{"path":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/Dictionary#parseAffix(TreeMap[String,List[Integer]],String,LineNumberReader,String,Map[String,Integer],Map[String,Integer]).mjava","commits":[{"id":"79cce2ac13867412e1a9dfd8c8df36833fba0d6a","date":1405962468,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/Dictionary#parseAffix(TreeMap[String,List[Integer]],String,LineNumberReader,String,Map[String,Integer],Map[String,Integer]).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/Dictionary#parseAffix(TreeMap[String,List[Character]],String,LineNumberReader,String,Map[String,Integer],Map[String,Integer]).mjava","sourceNew":"  /**\n   * Parses a specific affix rule putting the result into the provided affix map\n   * \n   * @param affixes Map where the result of the parsing will be put\n   * @param header Header line of the affix rule\n   * @param reader BufferedReader to read the content of the rule from\n   * @param conditionPattern {@link String#format(String, Object...)} pattern to be used to generate the condition regex\n   *                         pattern\n   * @param seenPatterns map from condition -> index of patterns, for deduplication.\n   * @throws IOException Can be thrown while reading the rule\n   */\n  private void parseAffix(TreeMap<String,List<Integer>> affixes,\n                          String header,\n                          LineNumberReader reader,\n                          String conditionPattern,\n                          Map<String,Integer> seenPatterns,\n                          Map<String,Integer> seenStrips) throws IOException, ParseException {\n    \n    BytesRef scratch = new BytesRef();\n    StringBuilder sb = new StringBuilder();\n    String args[] = header.split(\"\\\\s+\");\n\n    boolean crossProduct = args[2].equals(\"Y\");\n    boolean isSuffix = conditionPattern == SUFFIX_CONDITION_REGEX_PATTERN;\n    \n    int numLines = Integer.parseInt(args[3]);\n    affixData = ArrayUtil.grow(affixData, (currentAffix << 3) + (numLines << 3));\n    ByteArrayDataOutput affixWriter = new ByteArrayDataOutput(affixData, currentAffix << 3, numLines << 3);\n    \n    for (int i = 0; i < numLines; i++) {\n      assert affixWriter.getPosition() == currentAffix << 3;\n      String line = reader.readLine();\n      String ruleArgs[] = line.split(\"\\\\s+\");\n\n      // from the manpage: PFX flag stripping prefix [condition [morphological_fields...]]\n      // condition is optional\n      if (ruleArgs.length < 4) {\n          throw new ParseException(\"The affix file contains a rule with less than four elements: \" + line, reader.getLineNumber());\n      }\n      \n      char flag = flagParsingStrategy.parseFlag(ruleArgs[1]);\n      String strip = ruleArgs[2].equals(\"0\") ? \"\" : ruleArgs[2];\n      String affixArg = ruleArgs[3].equals(\"0\") ? \"\" : ruleArgs[3];\n      char appendFlags[] = null;\n      \n      int flagSep = affixArg.lastIndexOf('/');\n      if (flagSep != -1) {\n        String flagPart = affixArg.substring(flagSep + 1);\n        affixArg = affixArg.substring(0, flagSep);\n\n        if (aliasCount > 0) {\n          flagPart = getAliasValue(Integer.parseInt(flagPart));\n        } \n        \n        appendFlags = flagParsingStrategy.parseFlags(flagPart);\n        Arrays.sort(appendFlags);\n        twoStageAffix = true;\n      }\n      \n      String condition = ruleArgs.length > 4 ? ruleArgs[4] : \".\";\n      // at least the gascon affix file has this issue\n      if (condition.startsWith(\"[\") && condition.indexOf(']') == -1) {\n        condition = condition + \"]\";\n      }\n      // \"dash hasn't got special meaning\" (we must escape it)\n      if (condition.indexOf('-') >= 0) {\n        condition = escapeDash(condition);\n      }\n\n      final String regex;\n      if (\".\".equals(condition)) {\n        regex = \".*\"; // Zero condition is indicated by dot\n      } else if (condition.equals(strip)) {\n        regex = \".*\"; // TODO: optimize this better:\n                      // if we remove 'strip' from condition, we don't have to append 'strip' to check it...!\n                      // but this is complicated...\n      } else {\n        regex = String.format(Locale.ROOT, conditionPattern, condition);\n      }\n      \n      // deduplicate patterns\n      Integer patternIndex = seenPatterns.get(regex);\n      if (patternIndex == null) {\n        patternIndex = patterns.size();\n        if (patternIndex > Short.MAX_VALUE) {\n          throw new UnsupportedOperationException(\"Too many patterns, please report this to dev@lucene.apache.org\");          \n        }\n        seenPatterns.put(regex, patternIndex);\n        CharacterRunAutomaton pattern = new CharacterRunAutomaton(new RegExp(regex, RegExp.NONE).toAutomaton());\n        patterns.add(pattern);\n      }\n      \n      Integer stripOrd = seenStrips.get(strip);\n      if (stripOrd == null) {\n        stripOrd = seenStrips.size();\n        seenStrips.put(strip, stripOrd);\n        if (stripOrd > Character.MAX_VALUE) {\n          throw new UnsupportedOperationException(\"Too many unique strips, please report this to dev@lucene.apache.org\");\n        }\n      }\n\n      if (appendFlags == null) {\n        appendFlags = NOFLAGS;\n      }\n      \n      encodeFlags(scratch, appendFlags);\n      int appendFlagsOrd = flagLookup.add(scratch);\n      if (appendFlagsOrd < 0) {\n        // already exists in our hash\n        appendFlagsOrd = (-appendFlagsOrd)-1;\n      } else if (appendFlagsOrd > Short.MAX_VALUE) {\n        // this limit is probably flexible, but its a good sanity check too\n        throw new UnsupportedOperationException(\"Too many unique append flags, please report this to dev@lucene.apache.org\");\n      }\n      \n      affixWriter.writeShort((short)flag);\n      affixWriter.writeShort((short)stripOrd.intValue());\n      // encode crossProduct into patternIndex\n      int patternOrd = patternIndex.intValue() << 1 | (crossProduct ? 1 : 0);\n      affixWriter.writeShort((short)patternOrd);\n      affixWriter.writeShort((short)appendFlagsOrd);\n      \n      if (needsInputCleaning) {\n        CharSequence cleaned = cleanInput(affixArg, sb);\n        affixArg = cleaned.toString();\n      }\n      \n      if (isSuffix) {\n        affixArg = new StringBuilder(affixArg).reverse().toString();\n      }\n      \n      List<Integer> list = affixes.get(affixArg);\n      if (list == null) {\n        list = new ArrayList<>();\n        affixes.put(affixArg, list);\n      }\n      list.add(currentAffix);\n      currentAffix++;\n    }\n  }\n\n","sourceOld":"  /**\n   * Parses a specific affix rule putting the result into the provided affix map\n   * \n   * @param affixes Map where the result of the parsing will be put\n   * @param header Header line of the affix rule\n   * @param reader BufferedReader to read the content of the rule from\n   * @param conditionPattern {@link String#format(String, Object...)} pattern to be used to generate the condition regex\n   *                         pattern\n   * @param seenPatterns map from condition -> index of patterns, for deduplication.\n   * @throws IOException Can be thrown while reading the rule\n   */\n  private void parseAffix(TreeMap<String,List<Character>> affixes,\n                          String header,\n                          LineNumberReader reader,\n                          String conditionPattern,\n                          Map<String,Integer> seenPatterns,\n                          Map<String,Integer> seenStrips) throws IOException, ParseException {\n    \n    BytesRef scratch = new BytesRef();\n    StringBuilder sb = new StringBuilder();\n    String args[] = header.split(\"\\\\s+\");\n\n    boolean crossProduct = args[2].equals(\"Y\");\n    boolean isSuffix = conditionPattern == SUFFIX_CONDITION_REGEX_PATTERN;\n    \n    int numLines = Integer.parseInt(args[3]);\n    affixData = ArrayUtil.grow(affixData, (currentAffix << 3) + (numLines << 3));\n    ByteArrayDataOutput affixWriter = new ByteArrayDataOutput(affixData, currentAffix << 3, numLines << 3);\n    \n    for (int i = 0; i < numLines; i++) {\n      assert affixWriter.getPosition() == currentAffix << 3;\n      String line = reader.readLine();\n      String ruleArgs[] = line.split(\"\\\\s+\");\n\n      // from the manpage: PFX flag stripping prefix [condition [morphological_fields...]]\n      // condition is optional\n      if (ruleArgs.length < 4) {\n          throw new ParseException(\"The affix file contains a rule with less than four elements: \" + line, reader.getLineNumber());\n      }\n      \n      char flag = flagParsingStrategy.parseFlag(ruleArgs[1]);\n      String strip = ruleArgs[2].equals(\"0\") ? \"\" : ruleArgs[2];\n      String affixArg = ruleArgs[3].equals(\"0\") ? \"\" : ruleArgs[3];\n      char appendFlags[] = null;\n      \n      int flagSep = affixArg.lastIndexOf('/');\n      if (flagSep != -1) {\n        String flagPart = affixArg.substring(flagSep + 1);\n        affixArg = affixArg.substring(0, flagSep);\n\n        if (aliasCount > 0) {\n          flagPart = getAliasValue(Integer.parseInt(flagPart));\n        } \n        \n        appendFlags = flagParsingStrategy.parseFlags(flagPart);\n        Arrays.sort(appendFlags);\n        twoStageAffix = true;\n      }\n      \n      String condition = ruleArgs.length > 4 ? ruleArgs[4] : \".\";\n      // at least the gascon affix file has this issue\n      if (condition.startsWith(\"[\") && condition.indexOf(']') == -1) {\n        condition = condition + \"]\";\n      }\n      // \"dash hasn't got special meaning\" (we must escape it)\n      if (condition.indexOf('-') >= 0) {\n        condition = escapeDash(condition);\n      }\n\n      final String regex;\n      if (\".\".equals(condition)) {\n        regex = \".*\"; // Zero condition is indicated by dot\n      } else if (condition.equals(strip)) {\n        regex = \".*\"; // TODO: optimize this better:\n                      // if we remove 'strip' from condition, we don't have to append 'strip' to check it...!\n                      // but this is complicated...\n      } else {\n        regex = String.format(Locale.ROOT, conditionPattern, condition);\n      }\n      \n      // deduplicate patterns\n      Integer patternIndex = seenPatterns.get(regex);\n      if (patternIndex == null) {\n        patternIndex = patterns.size();\n        if (patternIndex > Short.MAX_VALUE) {\n          throw new UnsupportedOperationException(\"Too many patterns, please report this to dev@lucene.apache.org\");          \n        }\n        seenPatterns.put(regex, patternIndex);\n        CharacterRunAutomaton pattern = new CharacterRunAutomaton(new RegExp(regex, RegExp.NONE).toAutomaton());\n        patterns.add(pattern);\n      }\n      \n      Integer stripOrd = seenStrips.get(strip);\n      if (stripOrd == null) {\n        stripOrd = seenStrips.size();\n        seenStrips.put(strip, stripOrd);\n        if (stripOrd > Character.MAX_VALUE) {\n          throw new UnsupportedOperationException(\"Too many unique strips, please report this to dev@lucene.apache.org\");\n        }\n      }\n\n      if (appendFlags == null) {\n        appendFlags = NOFLAGS;\n      }\n      \n      encodeFlags(scratch, appendFlags);\n      int appendFlagsOrd = flagLookup.add(scratch);\n      if (appendFlagsOrd < 0) {\n        // already exists in our hash\n        appendFlagsOrd = (-appendFlagsOrd)-1;\n      } else if (appendFlagsOrd > Short.MAX_VALUE) {\n        // this limit is probably flexible, but its a good sanity check too\n        throw new UnsupportedOperationException(\"Too many unique append flags, please report this to dev@lucene.apache.org\");\n      }\n      \n      affixWriter.writeShort((short)flag);\n      affixWriter.writeShort((short)stripOrd.intValue());\n      // encode crossProduct into patternIndex\n      int patternOrd = patternIndex.intValue() << 1 | (crossProduct ? 1 : 0);\n      affixWriter.writeShort((short)patternOrd);\n      affixWriter.writeShort((short)appendFlagsOrd);\n      \n      if (needsInputCleaning) {\n        CharSequence cleaned = cleanInput(affixArg, sb);\n        affixArg = cleaned.toString();\n      }\n      \n      if (isSuffix) {\n        affixArg = new StringBuilder(affixArg).reverse().toString();\n      }\n      \n      List<Character> list = affixes.get(affixArg);\n      if (list == null) {\n        list = new ArrayList<>();\n        affixes.put(affixArg, list);\n      }\n      \n      list.add((char)currentAffix);\n      currentAffix++;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"342a78c7b197137c2e55572d7e8296bb522c7fc8","date":1406001005,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/Dictionary#parseAffix(TreeMap[String,List[Integer]],String,LineNumberReader,String,Map[String,Integer],Map[String,Integer]).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/Dictionary#parseAffix(TreeMap[String,List[Integer]],String,LineNumberReader,String,Map[String,Integer],Map[String,Integer]).mjava","sourceNew":"  /**\n   * Parses a specific affix rule putting the result into the provided affix map\n   * \n   * @param affixes Map where the result of the parsing will be put\n   * @param header Header line of the affix rule\n   * @param reader BufferedReader to read the content of the rule from\n   * @param conditionPattern {@link String#format(String, Object...)} pattern to be used to generate the condition regex\n   *                         pattern\n   * @param seenPatterns map from condition -> index of patterns, for deduplication.\n   * @throws IOException Can be thrown while reading the rule\n   */\n  private void parseAffix(TreeMap<String,List<Integer>> affixes,\n                          String header,\n                          LineNumberReader reader,\n                          String conditionPattern,\n                          Map<String,Integer> seenPatterns,\n                          Map<String,Integer> seenStrips) throws IOException, ParseException {\n    \n    BytesRef scratch = new BytesRef();\n    StringBuilder sb = new StringBuilder();\n    String args[] = header.split(\"\\\\s+\");\n\n    boolean crossProduct = args[2].equals(\"Y\");\n    boolean isSuffix = conditionPattern == SUFFIX_CONDITION_REGEX_PATTERN;\n    \n    int numLines = Integer.parseInt(args[3]);\n    affixData = ArrayUtil.grow(affixData, (currentAffix << 3) + (numLines << 3));\n    ByteArrayDataOutput affixWriter = new ByteArrayDataOutput(affixData, currentAffix << 3, numLines << 3);\n    \n    for (int i = 0; i < numLines; i++) {\n      assert affixWriter.getPosition() == currentAffix << 3;\n      String line = reader.readLine();\n      String ruleArgs[] = line.split(\"\\\\s+\");\n\n      // from the manpage: PFX flag stripping prefix [condition [morphological_fields...]]\n      // condition is optional\n      if (ruleArgs.length < 4) {\n          throw new ParseException(\"The affix file contains a rule with less than four elements: \" + line, reader.getLineNumber());\n      }\n      \n      char flag = flagParsingStrategy.parseFlag(ruleArgs[1]);\n      String strip = ruleArgs[2].equals(\"0\") ? \"\" : ruleArgs[2];\n      String affixArg = ruleArgs[3];\n      char appendFlags[] = null;\n      \n      // first: parse continuation classes out of affix\n      int flagSep = affixArg.lastIndexOf('/');\n      if (flagSep != -1) {\n        String flagPart = affixArg.substring(flagSep + 1);\n        affixArg = affixArg.substring(0, flagSep);\n\n        if (aliasCount > 0) {\n          flagPart = getAliasValue(Integer.parseInt(flagPart));\n        } \n        \n        appendFlags = flagParsingStrategy.parseFlags(flagPart);\n        Arrays.sort(appendFlags);\n        twoStageAffix = true;\n      }\n      // zero affix -> empty string\n      if (\"0\".equals(affixArg)) {\n        affixArg = \"\";\n      }\n      \n      String condition = ruleArgs.length > 4 ? ruleArgs[4] : \".\";\n      // at least the gascon affix file has this issue\n      if (condition.startsWith(\"[\") && condition.indexOf(']') == -1) {\n        condition = condition + \"]\";\n      }\n      // \"dash hasn't got special meaning\" (we must escape it)\n      if (condition.indexOf('-') >= 0) {\n        condition = escapeDash(condition);\n      }\n\n      final String regex;\n      if (\".\".equals(condition)) {\n        regex = \".*\"; // Zero condition is indicated by dot\n      } else if (condition.equals(strip)) {\n        regex = \".*\"; // TODO: optimize this better:\n                      // if we remove 'strip' from condition, we don't have to append 'strip' to check it...!\n                      // but this is complicated...\n      } else {\n        regex = String.format(Locale.ROOT, conditionPattern, condition);\n      }\n      \n      // deduplicate patterns\n      Integer patternIndex = seenPatterns.get(regex);\n      if (patternIndex == null) {\n        patternIndex = patterns.size();\n        if (patternIndex > Short.MAX_VALUE) {\n          throw new UnsupportedOperationException(\"Too many patterns, please report this to dev@lucene.apache.org\");          \n        }\n        seenPatterns.put(regex, patternIndex);\n        CharacterRunAutomaton pattern = new CharacterRunAutomaton(new RegExp(regex, RegExp.NONE).toAutomaton());\n        patterns.add(pattern);\n      }\n      \n      Integer stripOrd = seenStrips.get(strip);\n      if (stripOrd == null) {\n        stripOrd = seenStrips.size();\n        seenStrips.put(strip, stripOrd);\n        if (stripOrd > Character.MAX_VALUE) {\n          throw new UnsupportedOperationException(\"Too many unique strips, please report this to dev@lucene.apache.org\");\n        }\n      }\n\n      if (appendFlags == null) {\n        appendFlags = NOFLAGS;\n      }\n      \n      encodeFlags(scratch, appendFlags);\n      int appendFlagsOrd = flagLookup.add(scratch);\n      if (appendFlagsOrd < 0) {\n        // already exists in our hash\n        appendFlagsOrd = (-appendFlagsOrd)-1;\n      } else if (appendFlagsOrd > Short.MAX_VALUE) {\n        // this limit is probably flexible, but its a good sanity check too\n        throw new UnsupportedOperationException(\"Too many unique append flags, please report this to dev@lucene.apache.org\");\n      }\n      \n      affixWriter.writeShort((short)flag);\n      affixWriter.writeShort((short)stripOrd.intValue());\n      // encode crossProduct into patternIndex\n      int patternOrd = patternIndex.intValue() << 1 | (crossProduct ? 1 : 0);\n      affixWriter.writeShort((short)patternOrd);\n      affixWriter.writeShort((short)appendFlagsOrd);\n      \n      if (needsInputCleaning) {\n        CharSequence cleaned = cleanInput(affixArg, sb);\n        affixArg = cleaned.toString();\n      }\n      \n      if (isSuffix) {\n        affixArg = new StringBuilder(affixArg).reverse().toString();\n      }\n      \n      List<Integer> list = affixes.get(affixArg);\n      if (list == null) {\n        list = new ArrayList<>();\n        affixes.put(affixArg, list);\n      }\n      list.add(currentAffix);\n      currentAffix++;\n    }\n  }\n\n","sourceOld":"  /**\n   * Parses a specific affix rule putting the result into the provided affix map\n   * \n   * @param affixes Map where the result of the parsing will be put\n   * @param header Header line of the affix rule\n   * @param reader BufferedReader to read the content of the rule from\n   * @param conditionPattern {@link String#format(String, Object...)} pattern to be used to generate the condition regex\n   *                         pattern\n   * @param seenPatterns map from condition -> index of patterns, for deduplication.\n   * @throws IOException Can be thrown while reading the rule\n   */\n  private void parseAffix(TreeMap<String,List<Integer>> affixes,\n                          String header,\n                          LineNumberReader reader,\n                          String conditionPattern,\n                          Map<String,Integer> seenPatterns,\n                          Map<String,Integer> seenStrips) throws IOException, ParseException {\n    \n    BytesRef scratch = new BytesRef();\n    StringBuilder sb = new StringBuilder();\n    String args[] = header.split(\"\\\\s+\");\n\n    boolean crossProduct = args[2].equals(\"Y\");\n    boolean isSuffix = conditionPattern == SUFFIX_CONDITION_REGEX_PATTERN;\n    \n    int numLines = Integer.parseInt(args[3]);\n    affixData = ArrayUtil.grow(affixData, (currentAffix << 3) + (numLines << 3));\n    ByteArrayDataOutput affixWriter = new ByteArrayDataOutput(affixData, currentAffix << 3, numLines << 3);\n    \n    for (int i = 0; i < numLines; i++) {\n      assert affixWriter.getPosition() == currentAffix << 3;\n      String line = reader.readLine();\n      String ruleArgs[] = line.split(\"\\\\s+\");\n\n      // from the manpage: PFX flag stripping prefix [condition [morphological_fields...]]\n      // condition is optional\n      if (ruleArgs.length < 4) {\n          throw new ParseException(\"The affix file contains a rule with less than four elements: \" + line, reader.getLineNumber());\n      }\n      \n      char flag = flagParsingStrategy.parseFlag(ruleArgs[1]);\n      String strip = ruleArgs[2].equals(\"0\") ? \"\" : ruleArgs[2];\n      String affixArg = ruleArgs[3].equals(\"0\") ? \"\" : ruleArgs[3];\n      char appendFlags[] = null;\n      \n      int flagSep = affixArg.lastIndexOf('/');\n      if (flagSep != -1) {\n        String flagPart = affixArg.substring(flagSep + 1);\n        affixArg = affixArg.substring(0, flagSep);\n\n        if (aliasCount > 0) {\n          flagPart = getAliasValue(Integer.parseInt(flagPart));\n        } \n        \n        appendFlags = flagParsingStrategy.parseFlags(flagPart);\n        Arrays.sort(appendFlags);\n        twoStageAffix = true;\n      }\n      \n      String condition = ruleArgs.length > 4 ? ruleArgs[4] : \".\";\n      // at least the gascon affix file has this issue\n      if (condition.startsWith(\"[\") && condition.indexOf(']') == -1) {\n        condition = condition + \"]\";\n      }\n      // \"dash hasn't got special meaning\" (we must escape it)\n      if (condition.indexOf('-') >= 0) {\n        condition = escapeDash(condition);\n      }\n\n      final String regex;\n      if (\".\".equals(condition)) {\n        regex = \".*\"; // Zero condition is indicated by dot\n      } else if (condition.equals(strip)) {\n        regex = \".*\"; // TODO: optimize this better:\n                      // if we remove 'strip' from condition, we don't have to append 'strip' to check it...!\n                      // but this is complicated...\n      } else {\n        regex = String.format(Locale.ROOT, conditionPattern, condition);\n      }\n      \n      // deduplicate patterns\n      Integer patternIndex = seenPatterns.get(regex);\n      if (patternIndex == null) {\n        patternIndex = patterns.size();\n        if (patternIndex > Short.MAX_VALUE) {\n          throw new UnsupportedOperationException(\"Too many patterns, please report this to dev@lucene.apache.org\");          \n        }\n        seenPatterns.put(regex, patternIndex);\n        CharacterRunAutomaton pattern = new CharacterRunAutomaton(new RegExp(regex, RegExp.NONE).toAutomaton());\n        patterns.add(pattern);\n      }\n      \n      Integer stripOrd = seenStrips.get(strip);\n      if (stripOrd == null) {\n        stripOrd = seenStrips.size();\n        seenStrips.put(strip, stripOrd);\n        if (stripOrd > Character.MAX_VALUE) {\n          throw new UnsupportedOperationException(\"Too many unique strips, please report this to dev@lucene.apache.org\");\n        }\n      }\n\n      if (appendFlags == null) {\n        appendFlags = NOFLAGS;\n      }\n      \n      encodeFlags(scratch, appendFlags);\n      int appendFlagsOrd = flagLookup.add(scratch);\n      if (appendFlagsOrd < 0) {\n        // already exists in our hash\n        appendFlagsOrd = (-appendFlagsOrd)-1;\n      } else if (appendFlagsOrd > Short.MAX_VALUE) {\n        // this limit is probably flexible, but its a good sanity check too\n        throw new UnsupportedOperationException(\"Too many unique append flags, please report this to dev@lucene.apache.org\");\n      }\n      \n      affixWriter.writeShort((short)flag);\n      affixWriter.writeShort((short)stripOrd.intValue());\n      // encode crossProduct into patternIndex\n      int patternOrd = patternIndex.intValue() << 1 | (crossProduct ? 1 : 0);\n      affixWriter.writeShort((short)patternOrd);\n      affixWriter.writeShort((short)appendFlagsOrd);\n      \n      if (needsInputCleaning) {\n        CharSequence cleaned = cleanInput(affixArg, sb);\n        affixArg = cleaned.toString();\n      }\n      \n      if (isSuffix) {\n        affixArg = new StringBuilder(affixArg).reverse().toString();\n      }\n      \n      List<Integer> list = affixes.get(affixArg);\n      if (list == null) {\n        list = new ArrayList<>();\n        affixes.put(affixArg, list);\n      }\n      list.add(currentAffix);\n      currentAffix++;\n    }\n  }\n\n","bugFix":["5dc1f9b25a92ab637175c85b5338de21a939f56f"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","date":1407854805,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/Dictionary#parseAffix(TreeMap[String,List[Integer]],String,LineNumberReader,String,Map[String,Integer],Map[String,Integer]).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/Dictionary#parseAffix(TreeMap[String,List[Integer]],String,LineNumberReader,String,Map[String,Integer],Map[String,Integer]).mjava","sourceNew":"  /**\n   * Parses a specific affix rule putting the result into the provided affix map\n   * \n   * @param affixes Map where the result of the parsing will be put\n   * @param header Header line of the affix rule\n   * @param reader BufferedReader to read the content of the rule from\n   * @param conditionPattern {@link String#format(String, Object...)} pattern to be used to generate the condition regex\n   *                         pattern\n   * @param seenPatterns map from condition -> index of patterns, for deduplication.\n   * @throws IOException Can be thrown while reading the rule\n   */\n  private void parseAffix(TreeMap<String,List<Integer>> affixes,\n                          String header,\n                          LineNumberReader reader,\n                          String conditionPattern,\n                          Map<String,Integer> seenPatterns,\n                          Map<String,Integer> seenStrips) throws IOException, ParseException {\n    \n    BytesRefBuilder scratch = new BytesRefBuilder();\n    StringBuilder sb = new StringBuilder();\n    String args[] = header.split(\"\\\\s+\");\n\n    boolean crossProduct = args[2].equals(\"Y\");\n    boolean isSuffix = conditionPattern == SUFFIX_CONDITION_REGEX_PATTERN;\n    \n    int numLines = Integer.parseInt(args[3]);\n    affixData = ArrayUtil.grow(affixData, (currentAffix << 3) + (numLines << 3));\n    ByteArrayDataOutput affixWriter = new ByteArrayDataOutput(affixData, currentAffix << 3, numLines << 3);\n    \n    for (int i = 0; i < numLines; i++) {\n      assert affixWriter.getPosition() == currentAffix << 3;\n      String line = reader.readLine();\n      String ruleArgs[] = line.split(\"\\\\s+\");\n\n      // from the manpage: PFX flag stripping prefix [condition [morphological_fields...]]\n      // condition is optional\n      if (ruleArgs.length < 4) {\n          throw new ParseException(\"The affix file contains a rule with less than four elements: \" + line, reader.getLineNumber());\n      }\n      \n      char flag = flagParsingStrategy.parseFlag(ruleArgs[1]);\n      String strip = ruleArgs[2].equals(\"0\") ? \"\" : ruleArgs[2];\n      String affixArg = ruleArgs[3];\n      char appendFlags[] = null;\n      \n      // first: parse continuation classes out of affix\n      int flagSep = affixArg.lastIndexOf('/');\n      if (flagSep != -1) {\n        String flagPart = affixArg.substring(flagSep + 1);\n        affixArg = affixArg.substring(0, flagSep);\n\n        if (aliasCount > 0) {\n          flagPart = getAliasValue(Integer.parseInt(flagPart));\n        } \n        \n        appendFlags = flagParsingStrategy.parseFlags(flagPart);\n        Arrays.sort(appendFlags);\n        twoStageAffix = true;\n      }\n      // zero affix -> empty string\n      if (\"0\".equals(affixArg)) {\n        affixArg = \"\";\n      }\n      \n      String condition = ruleArgs.length > 4 ? ruleArgs[4] : \".\";\n      // at least the gascon affix file has this issue\n      if (condition.startsWith(\"[\") && condition.indexOf(']') == -1) {\n        condition = condition + \"]\";\n      }\n      // \"dash hasn't got special meaning\" (we must escape it)\n      if (condition.indexOf('-') >= 0) {\n        condition = escapeDash(condition);\n      }\n\n      final String regex;\n      if (\".\".equals(condition)) {\n        regex = \".*\"; // Zero condition is indicated by dot\n      } else if (condition.equals(strip)) {\n        regex = \".*\"; // TODO: optimize this better:\n                      // if we remove 'strip' from condition, we don't have to append 'strip' to check it...!\n                      // but this is complicated...\n      } else {\n        regex = String.format(Locale.ROOT, conditionPattern, condition);\n      }\n      \n      // deduplicate patterns\n      Integer patternIndex = seenPatterns.get(regex);\n      if (patternIndex == null) {\n        patternIndex = patterns.size();\n        if (patternIndex > Short.MAX_VALUE) {\n          throw new UnsupportedOperationException(\"Too many patterns, please report this to dev@lucene.apache.org\");          \n        }\n        seenPatterns.put(regex, patternIndex);\n        CharacterRunAutomaton pattern = new CharacterRunAutomaton(new RegExp(regex, RegExp.NONE).toAutomaton());\n        patterns.add(pattern);\n      }\n      \n      Integer stripOrd = seenStrips.get(strip);\n      if (stripOrd == null) {\n        stripOrd = seenStrips.size();\n        seenStrips.put(strip, stripOrd);\n        if (stripOrd > Character.MAX_VALUE) {\n          throw new UnsupportedOperationException(\"Too many unique strips, please report this to dev@lucene.apache.org\");\n        }\n      }\n\n      if (appendFlags == null) {\n        appendFlags = NOFLAGS;\n      }\n      \n      encodeFlags(scratch, appendFlags);\n      int appendFlagsOrd = flagLookup.add(scratch.get());\n      if (appendFlagsOrd < 0) {\n        // already exists in our hash\n        appendFlagsOrd = (-appendFlagsOrd)-1;\n      } else if (appendFlagsOrd > Short.MAX_VALUE) {\n        // this limit is probably flexible, but its a good sanity check too\n        throw new UnsupportedOperationException(\"Too many unique append flags, please report this to dev@lucene.apache.org\");\n      }\n      \n      affixWriter.writeShort((short)flag);\n      affixWriter.writeShort((short)stripOrd.intValue());\n      // encode crossProduct into patternIndex\n      int patternOrd = patternIndex.intValue() << 1 | (crossProduct ? 1 : 0);\n      affixWriter.writeShort((short)patternOrd);\n      affixWriter.writeShort((short)appendFlagsOrd);\n      \n      if (needsInputCleaning) {\n        CharSequence cleaned = cleanInput(affixArg, sb);\n        affixArg = cleaned.toString();\n      }\n      \n      if (isSuffix) {\n        affixArg = new StringBuilder(affixArg).reverse().toString();\n      }\n      \n      List<Integer> list = affixes.get(affixArg);\n      if (list == null) {\n        list = new ArrayList<>();\n        affixes.put(affixArg, list);\n      }\n      list.add(currentAffix);\n      currentAffix++;\n    }\n  }\n\n","sourceOld":"  /**\n   * Parses a specific affix rule putting the result into the provided affix map\n   * \n   * @param affixes Map where the result of the parsing will be put\n   * @param header Header line of the affix rule\n   * @param reader BufferedReader to read the content of the rule from\n   * @param conditionPattern {@link String#format(String, Object...)} pattern to be used to generate the condition regex\n   *                         pattern\n   * @param seenPatterns map from condition -> index of patterns, for deduplication.\n   * @throws IOException Can be thrown while reading the rule\n   */\n  private void parseAffix(TreeMap<String,List<Integer>> affixes,\n                          String header,\n                          LineNumberReader reader,\n                          String conditionPattern,\n                          Map<String,Integer> seenPatterns,\n                          Map<String,Integer> seenStrips) throws IOException, ParseException {\n    \n    BytesRef scratch = new BytesRef();\n    StringBuilder sb = new StringBuilder();\n    String args[] = header.split(\"\\\\s+\");\n\n    boolean crossProduct = args[2].equals(\"Y\");\n    boolean isSuffix = conditionPattern == SUFFIX_CONDITION_REGEX_PATTERN;\n    \n    int numLines = Integer.parseInt(args[3]);\n    affixData = ArrayUtil.grow(affixData, (currentAffix << 3) + (numLines << 3));\n    ByteArrayDataOutput affixWriter = new ByteArrayDataOutput(affixData, currentAffix << 3, numLines << 3);\n    \n    for (int i = 0; i < numLines; i++) {\n      assert affixWriter.getPosition() == currentAffix << 3;\n      String line = reader.readLine();\n      String ruleArgs[] = line.split(\"\\\\s+\");\n\n      // from the manpage: PFX flag stripping prefix [condition [morphological_fields...]]\n      // condition is optional\n      if (ruleArgs.length < 4) {\n          throw new ParseException(\"The affix file contains a rule with less than four elements: \" + line, reader.getLineNumber());\n      }\n      \n      char flag = flagParsingStrategy.parseFlag(ruleArgs[1]);\n      String strip = ruleArgs[2].equals(\"0\") ? \"\" : ruleArgs[2];\n      String affixArg = ruleArgs[3];\n      char appendFlags[] = null;\n      \n      // first: parse continuation classes out of affix\n      int flagSep = affixArg.lastIndexOf('/');\n      if (flagSep != -1) {\n        String flagPart = affixArg.substring(flagSep + 1);\n        affixArg = affixArg.substring(0, flagSep);\n\n        if (aliasCount > 0) {\n          flagPart = getAliasValue(Integer.parseInt(flagPart));\n        } \n        \n        appendFlags = flagParsingStrategy.parseFlags(flagPart);\n        Arrays.sort(appendFlags);\n        twoStageAffix = true;\n      }\n      // zero affix -> empty string\n      if (\"0\".equals(affixArg)) {\n        affixArg = \"\";\n      }\n      \n      String condition = ruleArgs.length > 4 ? ruleArgs[4] : \".\";\n      // at least the gascon affix file has this issue\n      if (condition.startsWith(\"[\") && condition.indexOf(']') == -1) {\n        condition = condition + \"]\";\n      }\n      // \"dash hasn't got special meaning\" (we must escape it)\n      if (condition.indexOf('-') >= 0) {\n        condition = escapeDash(condition);\n      }\n\n      final String regex;\n      if (\".\".equals(condition)) {\n        regex = \".*\"; // Zero condition is indicated by dot\n      } else if (condition.equals(strip)) {\n        regex = \".*\"; // TODO: optimize this better:\n                      // if we remove 'strip' from condition, we don't have to append 'strip' to check it...!\n                      // but this is complicated...\n      } else {\n        regex = String.format(Locale.ROOT, conditionPattern, condition);\n      }\n      \n      // deduplicate patterns\n      Integer patternIndex = seenPatterns.get(regex);\n      if (patternIndex == null) {\n        patternIndex = patterns.size();\n        if (patternIndex > Short.MAX_VALUE) {\n          throw new UnsupportedOperationException(\"Too many patterns, please report this to dev@lucene.apache.org\");          \n        }\n        seenPatterns.put(regex, patternIndex);\n        CharacterRunAutomaton pattern = new CharacterRunAutomaton(new RegExp(regex, RegExp.NONE).toAutomaton());\n        patterns.add(pattern);\n      }\n      \n      Integer stripOrd = seenStrips.get(strip);\n      if (stripOrd == null) {\n        stripOrd = seenStrips.size();\n        seenStrips.put(strip, stripOrd);\n        if (stripOrd > Character.MAX_VALUE) {\n          throw new UnsupportedOperationException(\"Too many unique strips, please report this to dev@lucene.apache.org\");\n        }\n      }\n\n      if (appendFlags == null) {\n        appendFlags = NOFLAGS;\n      }\n      \n      encodeFlags(scratch, appendFlags);\n      int appendFlagsOrd = flagLookup.add(scratch);\n      if (appendFlagsOrd < 0) {\n        // already exists in our hash\n        appendFlagsOrd = (-appendFlagsOrd)-1;\n      } else if (appendFlagsOrd > Short.MAX_VALUE) {\n        // this limit is probably flexible, but its a good sanity check too\n        throw new UnsupportedOperationException(\"Too many unique append flags, please report this to dev@lucene.apache.org\");\n      }\n      \n      affixWriter.writeShort((short)flag);\n      affixWriter.writeShort((short)stripOrd.intValue());\n      // encode crossProduct into patternIndex\n      int patternOrd = patternIndex.intValue() << 1 | (crossProduct ? 1 : 0);\n      affixWriter.writeShort((short)patternOrd);\n      affixWriter.writeShort((short)appendFlagsOrd);\n      \n      if (needsInputCleaning) {\n        CharSequence cleaned = cleanInput(affixArg, sb);\n        affixArg = cleaned.toString();\n      }\n      \n      if (isSuffix) {\n        affixArg = new StringBuilder(affixArg).reverse().toString();\n      }\n      \n      List<Integer> list = affixes.get(affixArg);\n      if (list == null) {\n        list = new ArrayList<>();\n        affixes.put(affixArg, list);\n      }\n      list.add(currentAffix);\n      currentAffix++;\n    }\n  }\n\n","bugFix":["f01af929441dec992bb546ac539c0bf40ae90965","30fe9fa09df804ce770f1b667401a7a7647301ed"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b1eb427f2c6beed80d1724555fc1db003ccf3030","date":1417137397,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/Dictionary#parseAffix(TreeMap[String,List[Integer]],String,LineNumberReader,String,Map[String,Integer],Map[String,Integer]).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/Dictionary#parseAffix(TreeMap[String,List[Integer]],String,LineNumberReader,String,Map[String,Integer],Map[String,Integer]).mjava","sourceNew":"  /**\n   * Parses a specific affix rule putting the result into the provided affix map\n   * \n   * @param affixes Map where the result of the parsing will be put\n   * @param header Header line of the affix rule\n   * @param reader BufferedReader to read the content of the rule from\n   * @param conditionPattern {@link String#format(String, Object...)} pattern to be used to generate the condition regex\n   *                         pattern\n   * @param seenPatterns map from condition -&gt; index of patterns, for deduplication.\n   * @throws IOException Can be thrown while reading the rule\n   */\n  private void parseAffix(TreeMap<String,List<Integer>> affixes,\n                          String header,\n                          LineNumberReader reader,\n                          String conditionPattern,\n                          Map<String,Integer> seenPatterns,\n                          Map<String,Integer> seenStrips) throws IOException, ParseException {\n    \n    BytesRefBuilder scratch = new BytesRefBuilder();\n    StringBuilder sb = new StringBuilder();\n    String args[] = header.split(\"\\\\s+\");\n\n    boolean crossProduct = args[2].equals(\"Y\");\n    boolean isSuffix = conditionPattern == SUFFIX_CONDITION_REGEX_PATTERN;\n    \n    int numLines = Integer.parseInt(args[3]);\n    affixData = ArrayUtil.grow(affixData, (currentAffix << 3) + (numLines << 3));\n    ByteArrayDataOutput affixWriter = new ByteArrayDataOutput(affixData, currentAffix << 3, numLines << 3);\n    \n    for (int i = 0; i < numLines; i++) {\n      assert affixWriter.getPosition() == currentAffix << 3;\n      String line = reader.readLine();\n      String ruleArgs[] = line.split(\"\\\\s+\");\n\n      // from the manpage: PFX flag stripping prefix [condition [morphological_fields...]]\n      // condition is optional\n      if (ruleArgs.length < 4) {\n          throw new ParseException(\"The affix file contains a rule with less than four elements: \" + line, reader.getLineNumber());\n      }\n      \n      char flag = flagParsingStrategy.parseFlag(ruleArgs[1]);\n      String strip = ruleArgs[2].equals(\"0\") ? \"\" : ruleArgs[2];\n      String affixArg = ruleArgs[3];\n      char appendFlags[] = null;\n      \n      // first: parse continuation classes out of affix\n      int flagSep = affixArg.lastIndexOf('/');\n      if (flagSep != -1) {\n        String flagPart = affixArg.substring(flagSep + 1);\n        affixArg = affixArg.substring(0, flagSep);\n\n        if (aliasCount > 0) {\n          flagPart = getAliasValue(Integer.parseInt(flagPart));\n        } \n        \n        appendFlags = flagParsingStrategy.parseFlags(flagPart);\n        Arrays.sort(appendFlags);\n        twoStageAffix = true;\n      }\n      // zero affix -> empty string\n      if (\"0\".equals(affixArg)) {\n        affixArg = \"\";\n      }\n      \n      String condition = ruleArgs.length > 4 ? ruleArgs[4] : \".\";\n      // at least the gascon affix file has this issue\n      if (condition.startsWith(\"[\") && condition.indexOf(']') == -1) {\n        condition = condition + \"]\";\n      }\n      // \"dash hasn't got special meaning\" (we must escape it)\n      if (condition.indexOf('-') >= 0) {\n        condition = escapeDash(condition);\n      }\n\n      final String regex;\n      if (\".\".equals(condition)) {\n        regex = \".*\"; // Zero condition is indicated by dot\n      } else if (condition.equals(strip)) {\n        regex = \".*\"; // TODO: optimize this better:\n                      // if we remove 'strip' from condition, we don't have to append 'strip' to check it...!\n                      // but this is complicated...\n      } else {\n        regex = String.format(Locale.ROOT, conditionPattern, condition);\n      }\n      \n      // deduplicate patterns\n      Integer patternIndex = seenPatterns.get(regex);\n      if (patternIndex == null) {\n        patternIndex = patterns.size();\n        if (patternIndex > Short.MAX_VALUE) {\n          throw new UnsupportedOperationException(\"Too many patterns, please report this to dev@lucene.apache.org\");          \n        }\n        seenPatterns.put(regex, patternIndex);\n        CharacterRunAutomaton pattern = new CharacterRunAutomaton(new RegExp(regex, RegExp.NONE).toAutomaton());\n        patterns.add(pattern);\n      }\n      \n      Integer stripOrd = seenStrips.get(strip);\n      if (stripOrd == null) {\n        stripOrd = seenStrips.size();\n        seenStrips.put(strip, stripOrd);\n        if (stripOrd > Character.MAX_VALUE) {\n          throw new UnsupportedOperationException(\"Too many unique strips, please report this to dev@lucene.apache.org\");\n        }\n      }\n\n      if (appendFlags == null) {\n        appendFlags = NOFLAGS;\n      }\n      \n      encodeFlags(scratch, appendFlags);\n      int appendFlagsOrd = flagLookup.add(scratch.get());\n      if (appendFlagsOrd < 0) {\n        // already exists in our hash\n        appendFlagsOrd = (-appendFlagsOrd)-1;\n      } else if (appendFlagsOrd > Short.MAX_VALUE) {\n        // this limit is probably flexible, but its a good sanity check too\n        throw new UnsupportedOperationException(\"Too many unique append flags, please report this to dev@lucene.apache.org\");\n      }\n      \n      affixWriter.writeShort((short)flag);\n      affixWriter.writeShort((short)stripOrd.intValue());\n      // encode crossProduct into patternIndex\n      int patternOrd = patternIndex.intValue() << 1 | (crossProduct ? 1 : 0);\n      affixWriter.writeShort((short)patternOrd);\n      affixWriter.writeShort((short)appendFlagsOrd);\n      \n      if (needsInputCleaning) {\n        CharSequence cleaned = cleanInput(affixArg, sb);\n        affixArg = cleaned.toString();\n      }\n      \n      if (isSuffix) {\n        affixArg = new StringBuilder(affixArg).reverse().toString();\n      }\n      \n      List<Integer> list = affixes.get(affixArg);\n      if (list == null) {\n        list = new ArrayList<>();\n        affixes.put(affixArg, list);\n      }\n      list.add(currentAffix);\n      currentAffix++;\n    }\n  }\n\n","sourceOld":"  /**\n   * Parses a specific affix rule putting the result into the provided affix map\n   * \n   * @param affixes Map where the result of the parsing will be put\n   * @param header Header line of the affix rule\n   * @param reader BufferedReader to read the content of the rule from\n   * @param conditionPattern {@link String#format(String, Object...)} pattern to be used to generate the condition regex\n   *                         pattern\n   * @param seenPatterns map from condition -> index of patterns, for deduplication.\n   * @throws IOException Can be thrown while reading the rule\n   */\n  private void parseAffix(TreeMap<String,List<Integer>> affixes,\n                          String header,\n                          LineNumberReader reader,\n                          String conditionPattern,\n                          Map<String,Integer> seenPatterns,\n                          Map<String,Integer> seenStrips) throws IOException, ParseException {\n    \n    BytesRefBuilder scratch = new BytesRefBuilder();\n    StringBuilder sb = new StringBuilder();\n    String args[] = header.split(\"\\\\s+\");\n\n    boolean crossProduct = args[2].equals(\"Y\");\n    boolean isSuffix = conditionPattern == SUFFIX_CONDITION_REGEX_PATTERN;\n    \n    int numLines = Integer.parseInt(args[3]);\n    affixData = ArrayUtil.grow(affixData, (currentAffix << 3) + (numLines << 3));\n    ByteArrayDataOutput affixWriter = new ByteArrayDataOutput(affixData, currentAffix << 3, numLines << 3);\n    \n    for (int i = 0; i < numLines; i++) {\n      assert affixWriter.getPosition() == currentAffix << 3;\n      String line = reader.readLine();\n      String ruleArgs[] = line.split(\"\\\\s+\");\n\n      // from the manpage: PFX flag stripping prefix [condition [morphological_fields...]]\n      // condition is optional\n      if (ruleArgs.length < 4) {\n          throw new ParseException(\"The affix file contains a rule with less than four elements: \" + line, reader.getLineNumber());\n      }\n      \n      char flag = flagParsingStrategy.parseFlag(ruleArgs[1]);\n      String strip = ruleArgs[2].equals(\"0\") ? \"\" : ruleArgs[2];\n      String affixArg = ruleArgs[3];\n      char appendFlags[] = null;\n      \n      // first: parse continuation classes out of affix\n      int flagSep = affixArg.lastIndexOf('/');\n      if (flagSep != -1) {\n        String flagPart = affixArg.substring(flagSep + 1);\n        affixArg = affixArg.substring(0, flagSep);\n\n        if (aliasCount > 0) {\n          flagPart = getAliasValue(Integer.parseInt(flagPart));\n        } \n        \n        appendFlags = flagParsingStrategy.parseFlags(flagPart);\n        Arrays.sort(appendFlags);\n        twoStageAffix = true;\n      }\n      // zero affix -> empty string\n      if (\"0\".equals(affixArg)) {\n        affixArg = \"\";\n      }\n      \n      String condition = ruleArgs.length > 4 ? ruleArgs[4] : \".\";\n      // at least the gascon affix file has this issue\n      if (condition.startsWith(\"[\") && condition.indexOf(']') == -1) {\n        condition = condition + \"]\";\n      }\n      // \"dash hasn't got special meaning\" (we must escape it)\n      if (condition.indexOf('-') >= 0) {\n        condition = escapeDash(condition);\n      }\n\n      final String regex;\n      if (\".\".equals(condition)) {\n        regex = \".*\"; // Zero condition is indicated by dot\n      } else if (condition.equals(strip)) {\n        regex = \".*\"; // TODO: optimize this better:\n                      // if we remove 'strip' from condition, we don't have to append 'strip' to check it...!\n                      // but this is complicated...\n      } else {\n        regex = String.format(Locale.ROOT, conditionPattern, condition);\n      }\n      \n      // deduplicate patterns\n      Integer patternIndex = seenPatterns.get(regex);\n      if (patternIndex == null) {\n        patternIndex = patterns.size();\n        if (patternIndex > Short.MAX_VALUE) {\n          throw new UnsupportedOperationException(\"Too many patterns, please report this to dev@lucene.apache.org\");          \n        }\n        seenPatterns.put(regex, patternIndex);\n        CharacterRunAutomaton pattern = new CharacterRunAutomaton(new RegExp(regex, RegExp.NONE).toAutomaton());\n        patterns.add(pattern);\n      }\n      \n      Integer stripOrd = seenStrips.get(strip);\n      if (stripOrd == null) {\n        stripOrd = seenStrips.size();\n        seenStrips.put(strip, stripOrd);\n        if (stripOrd > Character.MAX_VALUE) {\n          throw new UnsupportedOperationException(\"Too many unique strips, please report this to dev@lucene.apache.org\");\n        }\n      }\n\n      if (appendFlags == null) {\n        appendFlags = NOFLAGS;\n      }\n      \n      encodeFlags(scratch, appendFlags);\n      int appendFlagsOrd = flagLookup.add(scratch.get());\n      if (appendFlagsOrd < 0) {\n        // already exists in our hash\n        appendFlagsOrd = (-appendFlagsOrd)-1;\n      } else if (appendFlagsOrd > Short.MAX_VALUE) {\n        // this limit is probably flexible, but its a good sanity check too\n        throw new UnsupportedOperationException(\"Too many unique append flags, please report this to dev@lucene.apache.org\");\n      }\n      \n      affixWriter.writeShort((short)flag);\n      affixWriter.writeShort((short)stripOrd.intValue());\n      // encode crossProduct into patternIndex\n      int patternOrd = patternIndex.intValue() << 1 | (crossProduct ? 1 : 0);\n      affixWriter.writeShort((short)patternOrd);\n      affixWriter.writeShort((short)appendFlagsOrd);\n      \n      if (needsInputCleaning) {\n        CharSequence cleaned = cleanInput(affixArg, sb);\n        affixArg = cleaned.toString();\n      }\n      \n      if (isSuffix) {\n        affixArg = new StringBuilder(affixArg).reverse().toString();\n      }\n      \n      List<Integer> list = affixes.get(affixArg);\n      if (list == null) {\n        list = new ArrayList<>();\n        affixes.put(affixArg, list);\n      }\n      list.add(currentAffix);\n      currentAffix++;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1","date":1419400138,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/Dictionary#parseAffix(TreeMap[String,List[Integer]],String,LineNumberReader,String,Map[String,Integer],Map[String,Integer]).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/Dictionary#parseAffix(TreeMap[String,List[Integer]],String,LineNumberReader,String,Map[String,Integer],Map[String,Integer]).mjava","sourceNew":"  /**\n   * Parses a specific affix rule putting the result into the provided affix map\n   * \n   * @param affixes Map where the result of the parsing will be put\n   * @param header Header line of the affix rule\n   * @param reader BufferedReader to read the content of the rule from\n   * @param conditionPattern {@link String#format(String, Object...)} pattern to be used to generate the condition regex\n   *                         pattern\n   * @param seenPatterns map from condition -&gt; index of patterns, for deduplication.\n   * @throws IOException Can be thrown while reading the rule\n   */\n  private void parseAffix(TreeMap<String,List<Integer>> affixes,\n                          String header,\n                          LineNumberReader reader,\n                          String conditionPattern,\n                          Map<String,Integer> seenPatterns,\n                          Map<String,Integer> seenStrips) throws IOException, ParseException {\n    \n    BytesRefBuilder scratch = new BytesRefBuilder();\n    StringBuilder sb = new StringBuilder();\n    String args[] = header.split(\"\\\\s+\");\n\n    boolean crossProduct = args[2].equals(\"Y\");\n    boolean isSuffix = conditionPattern == SUFFIX_CONDITION_REGEX_PATTERN;\n    \n    int numLines = Integer.parseInt(args[3]);\n    affixData = ArrayUtil.grow(affixData, (currentAffix << 3) + (numLines << 3));\n    ByteArrayDataOutput affixWriter = new ByteArrayDataOutput(affixData, currentAffix << 3, numLines << 3);\n    \n    for (int i = 0; i < numLines; i++) {\n      assert affixWriter.getPosition() == currentAffix << 3;\n      String line = reader.readLine();\n      String ruleArgs[] = line.split(\"\\\\s+\");\n\n      // from the manpage: PFX flag stripping prefix [condition [morphological_fields...]]\n      // condition is optional\n      if (ruleArgs.length < 4) {\n          throw new ParseException(\"The affix file contains a rule with less than four elements: \" + line, reader.getLineNumber());\n      }\n      \n      char flag = flagParsingStrategy.parseFlag(ruleArgs[1]);\n      String strip = ruleArgs[2].equals(\"0\") ? \"\" : ruleArgs[2];\n      String affixArg = ruleArgs[3];\n      char appendFlags[] = null;\n      \n      // first: parse continuation classes out of affix\n      int flagSep = affixArg.lastIndexOf('/');\n      if (flagSep != -1) {\n        String flagPart = affixArg.substring(flagSep + 1);\n        affixArg = affixArg.substring(0, flagSep);\n\n        if (aliasCount > 0) {\n          flagPart = getAliasValue(Integer.parseInt(flagPart));\n        } \n        \n        appendFlags = flagParsingStrategy.parseFlags(flagPart);\n        Arrays.sort(appendFlags);\n        twoStageAffix = true;\n      }\n      // zero affix -> empty string\n      if (\"0\".equals(affixArg)) {\n        affixArg = \"\";\n      }\n      \n      String condition = ruleArgs.length > 4 ? ruleArgs[4] : \".\";\n      // at least the gascon affix file has this issue\n      if (condition.startsWith(\"[\") && condition.indexOf(']') == -1) {\n        condition = condition + \"]\";\n      }\n      // \"dash hasn't got special meaning\" (we must escape it)\n      if (condition.indexOf('-') >= 0) {\n        condition = escapeDash(condition);\n      }\n\n      final String regex;\n      if (\".\".equals(condition)) {\n        regex = \".*\"; // Zero condition is indicated by dot\n      } else if (condition.equals(strip)) {\n        regex = \".*\"; // TODO: optimize this better:\n                      // if we remove 'strip' from condition, we don't have to append 'strip' to check it...!\n                      // but this is complicated...\n      } else {\n        regex = String.format(Locale.ROOT, conditionPattern, condition);\n      }\n      \n      // deduplicate patterns\n      Integer patternIndex = seenPatterns.get(regex);\n      if (patternIndex == null) {\n        patternIndex = patterns.size();\n        if (patternIndex > Short.MAX_VALUE) {\n          throw new UnsupportedOperationException(\"Too many patterns, please report this to dev@lucene.apache.org\");          \n        }\n        seenPatterns.put(regex, patternIndex);\n        CharacterRunAutomaton pattern = new CharacterRunAutomaton(new RegExp(regex, RegExp.NONE).toAutomaton());\n        patterns.add(pattern);\n      }\n      \n      Integer stripOrd = seenStrips.get(strip);\n      if (stripOrd == null) {\n        stripOrd = seenStrips.size();\n        seenStrips.put(strip, stripOrd);\n        if (stripOrd > Character.MAX_VALUE) {\n          throw new UnsupportedOperationException(\"Too many unique strips, please report this to dev@lucene.apache.org\");\n        }\n      }\n\n      if (appendFlags == null) {\n        appendFlags = NOFLAGS;\n      }\n      \n      encodeFlags(scratch, appendFlags);\n      int appendFlagsOrd = flagLookup.add(scratch.get());\n      if (appendFlagsOrd < 0) {\n        // already exists in our hash\n        appendFlagsOrd = (-appendFlagsOrd)-1;\n      } else if (appendFlagsOrd > Short.MAX_VALUE) {\n        // this limit is probably flexible, but it's a good sanity check too\n        throw new UnsupportedOperationException(\"Too many unique append flags, please report this to dev@lucene.apache.org\");\n      }\n      \n      affixWriter.writeShort((short)flag);\n      affixWriter.writeShort((short)stripOrd.intValue());\n      // encode crossProduct into patternIndex\n      int patternOrd = patternIndex.intValue() << 1 | (crossProduct ? 1 : 0);\n      affixWriter.writeShort((short)patternOrd);\n      affixWriter.writeShort((short)appendFlagsOrd);\n      \n      if (needsInputCleaning) {\n        CharSequence cleaned = cleanInput(affixArg, sb);\n        affixArg = cleaned.toString();\n      }\n      \n      if (isSuffix) {\n        affixArg = new StringBuilder(affixArg).reverse().toString();\n      }\n      \n      List<Integer> list = affixes.get(affixArg);\n      if (list == null) {\n        list = new ArrayList<>();\n        affixes.put(affixArg, list);\n      }\n      list.add(currentAffix);\n      currentAffix++;\n    }\n  }\n\n","sourceOld":"  /**\n   * Parses a specific affix rule putting the result into the provided affix map\n   * \n   * @param affixes Map where the result of the parsing will be put\n   * @param header Header line of the affix rule\n   * @param reader BufferedReader to read the content of the rule from\n   * @param conditionPattern {@link String#format(String, Object...)} pattern to be used to generate the condition regex\n   *                         pattern\n   * @param seenPatterns map from condition -&gt; index of patterns, for deduplication.\n   * @throws IOException Can be thrown while reading the rule\n   */\n  private void parseAffix(TreeMap<String,List<Integer>> affixes,\n                          String header,\n                          LineNumberReader reader,\n                          String conditionPattern,\n                          Map<String,Integer> seenPatterns,\n                          Map<String,Integer> seenStrips) throws IOException, ParseException {\n    \n    BytesRefBuilder scratch = new BytesRefBuilder();\n    StringBuilder sb = new StringBuilder();\n    String args[] = header.split(\"\\\\s+\");\n\n    boolean crossProduct = args[2].equals(\"Y\");\n    boolean isSuffix = conditionPattern == SUFFIX_CONDITION_REGEX_PATTERN;\n    \n    int numLines = Integer.parseInt(args[3]);\n    affixData = ArrayUtil.grow(affixData, (currentAffix << 3) + (numLines << 3));\n    ByteArrayDataOutput affixWriter = new ByteArrayDataOutput(affixData, currentAffix << 3, numLines << 3);\n    \n    for (int i = 0; i < numLines; i++) {\n      assert affixWriter.getPosition() == currentAffix << 3;\n      String line = reader.readLine();\n      String ruleArgs[] = line.split(\"\\\\s+\");\n\n      // from the manpage: PFX flag stripping prefix [condition [morphological_fields...]]\n      // condition is optional\n      if (ruleArgs.length < 4) {\n          throw new ParseException(\"The affix file contains a rule with less than four elements: \" + line, reader.getLineNumber());\n      }\n      \n      char flag = flagParsingStrategy.parseFlag(ruleArgs[1]);\n      String strip = ruleArgs[2].equals(\"0\") ? \"\" : ruleArgs[2];\n      String affixArg = ruleArgs[3];\n      char appendFlags[] = null;\n      \n      // first: parse continuation classes out of affix\n      int flagSep = affixArg.lastIndexOf('/');\n      if (flagSep != -1) {\n        String flagPart = affixArg.substring(flagSep + 1);\n        affixArg = affixArg.substring(0, flagSep);\n\n        if (aliasCount > 0) {\n          flagPart = getAliasValue(Integer.parseInt(flagPart));\n        } \n        \n        appendFlags = flagParsingStrategy.parseFlags(flagPart);\n        Arrays.sort(appendFlags);\n        twoStageAffix = true;\n      }\n      // zero affix -> empty string\n      if (\"0\".equals(affixArg)) {\n        affixArg = \"\";\n      }\n      \n      String condition = ruleArgs.length > 4 ? ruleArgs[4] : \".\";\n      // at least the gascon affix file has this issue\n      if (condition.startsWith(\"[\") && condition.indexOf(']') == -1) {\n        condition = condition + \"]\";\n      }\n      // \"dash hasn't got special meaning\" (we must escape it)\n      if (condition.indexOf('-') >= 0) {\n        condition = escapeDash(condition);\n      }\n\n      final String regex;\n      if (\".\".equals(condition)) {\n        regex = \".*\"; // Zero condition is indicated by dot\n      } else if (condition.equals(strip)) {\n        regex = \".*\"; // TODO: optimize this better:\n                      // if we remove 'strip' from condition, we don't have to append 'strip' to check it...!\n                      // but this is complicated...\n      } else {\n        regex = String.format(Locale.ROOT, conditionPattern, condition);\n      }\n      \n      // deduplicate patterns\n      Integer patternIndex = seenPatterns.get(regex);\n      if (patternIndex == null) {\n        patternIndex = patterns.size();\n        if (patternIndex > Short.MAX_VALUE) {\n          throw new UnsupportedOperationException(\"Too many patterns, please report this to dev@lucene.apache.org\");          \n        }\n        seenPatterns.put(regex, patternIndex);\n        CharacterRunAutomaton pattern = new CharacterRunAutomaton(new RegExp(regex, RegExp.NONE).toAutomaton());\n        patterns.add(pattern);\n      }\n      \n      Integer stripOrd = seenStrips.get(strip);\n      if (stripOrd == null) {\n        stripOrd = seenStrips.size();\n        seenStrips.put(strip, stripOrd);\n        if (stripOrd > Character.MAX_VALUE) {\n          throw new UnsupportedOperationException(\"Too many unique strips, please report this to dev@lucene.apache.org\");\n        }\n      }\n\n      if (appendFlags == null) {\n        appendFlags = NOFLAGS;\n      }\n      \n      encodeFlags(scratch, appendFlags);\n      int appendFlagsOrd = flagLookup.add(scratch.get());\n      if (appendFlagsOrd < 0) {\n        // already exists in our hash\n        appendFlagsOrd = (-appendFlagsOrd)-1;\n      } else if (appendFlagsOrd > Short.MAX_VALUE) {\n        // this limit is probably flexible, but its a good sanity check too\n        throw new UnsupportedOperationException(\"Too many unique append flags, please report this to dev@lucene.apache.org\");\n      }\n      \n      affixWriter.writeShort((short)flag);\n      affixWriter.writeShort((short)stripOrd.intValue());\n      // encode crossProduct into patternIndex\n      int patternOrd = patternIndex.intValue() << 1 | (crossProduct ? 1 : 0);\n      affixWriter.writeShort((short)patternOrd);\n      affixWriter.writeShort((short)appendFlagsOrd);\n      \n      if (needsInputCleaning) {\n        CharSequence cleaned = cleanInput(affixArg, sb);\n        affixArg = cleaned.toString();\n      }\n      \n      if (isSuffix) {\n        affixArg = new StringBuilder(affixArg).reverse().toString();\n      }\n      \n      List<Integer> list = affixes.get(affixArg);\n      if (list == null) {\n        list = new ArrayList<>();\n        affixes.put(affixArg, list);\n      }\n      list.add(currentAffix);\n      currentAffix++;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b1eb427f2c6beed80d1724555fc1db003ccf3030":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1":["b1eb427f2c6beed80d1724555fc1db003ccf3030"],"79cce2ac13867412e1a9dfd8c8df36833fba0d6a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["342a78c7b197137c2e55572d7e8296bb522c7fc8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1"],"342a78c7b197137c2e55572d7e8296bb522c7fc8":["79cce2ac13867412e1a9dfd8c8df36833fba0d6a"]},"commit2Childs":{"b1eb427f2c6beed80d1724555fc1db003ccf3030":["8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1"],"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"79cce2ac13867412e1a9dfd8c8df36833fba0d6a":["342a78c7b197137c2e55572d7e8296bb522c7fc8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["79cce2ac13867412e1a9dfd8c8df36833fba0d6a"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["b1eb427f2c6beed80d1724555fc1db003ccf3030"],"342a78c7b197137c2e55572d7e8296bb522c7fc8":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}