{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/FieldEvaluator#evaluate(Tuple).mjava","commits":[{"id":"88073e8783f450d4c0218decc2f001a1ac2c7e7c","date":1486705191,"type":0,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/FieldEvaluator#evaluate(Tuple).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Object evaluate(Tuple tuple) {\n    return tuple.get(fieldName); // returns null if field doesn't exist in tuple\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d492b24eb91b29b3fb6bca5b158bec326fbc12df","date":1490042446,"type":3,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/FieldEvaluator#evaluate(Tuple).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/FieldEvaluator#evaluate(Tuple).mjava","sourceNew":"  @Override\n  public Object evaluate(Tuple tuple) {\n    Object value = tuple.get(fieldName);\n    \n    // if we have an array then convert to an ArrayList\n    // if we have an iterable that is not a list then convert to ArrayList\n    // lists are good to go\n    if(null != value){\n      if(value instanceof Object[]){\n        Object[] array = (Object[])value;\n        List<Object> list = new ArrayList<Object>(array.length);\n        for(Object obj : array){\n          list.add(obj);\n        }\n        return list;\n      }\n      else if(value instanceof Iterable && !(value instanceof List<?>)){\n        Iterable<?> iter = (Iterable<?>)value;\n        List<Object> list = new ArrayList<Object>();\n        for(Object obj : iter){\n          list.add(obj);\n        }\n        return list;\n      }\n    }\n    \n    return value;\n  }\n\n","sourceOld":"  @Override\n  public Object evaluate(Tuple tuple) {\n    return tuple.get(fieldName); // returns null if field doesn't exist in tuple\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"869bbd0c59fee20268facd5a2e0d3c77e34500ed","date":1490280012,"type":3,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/FieldEvaluator#evaluate(Tuple).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/FieldEvaluator#evaluate(Tuple).mjava","sourceNew":"  @Override\n  public Object evaluate(Tuple tuple) {\n    Object value = tuple.get(fieldName);\n    \n    // if we have an array then convert to an ArrayList\n    // if we have an iterable that is not a list then convert to ArrayList\n    // lists are good to go\n    if(null != value){\n      if(value instanceof Object[]){\n        Object[] array = (Object[])value;\n        List<Object> list = new ArrayList<Object>(array.length);\n        for(Object obj : array){\n          list.add(obj);\n        }\n        return list;\n      }\n      else if(value instanceof Iterable && !(value instanceof List<?>)){\n        Iterable<?> iter = (Iterable<?>)value;\n        List<Object> list = new ArrayList<Object>();\n        for(Object obj : iter){\n          list.add(obj);\n        }\n        return list;\n      }\n    }\n    \n    return value;\n  }\n\n","sourceOld":"  @Override\n  public Object evaluate(Tuple tuple) {\n    return tuple.get(fieldName); // returns null if field doesn't exist in tuple\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d43c6d0a8b813b1c64f24d3ba07a65cd4a19e792","date":1493430356,"type":3,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/FieldEvaluator#evaluate(Tuple).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/FieldEvaluator#evaluate(Tuple).mjava","sourceNew":"  @Override\n  public Object evaluate(Tuple tuple) throws IOException {\n    Object value = tuple.get(fieldName);\n    \n    // This is somewhat radical.\n    // Here, we allow for the use of the context to provide alternative values\n    // when they are not available in the provided tuple. This means that all\n    // evaluators can evaluate over both a stream's tuple and the context, and\n    // can even evaluate over fields from both of them in the same evaluation\n    if(null == value && null != getStreamContext()){\n      value = getStreamContext().getLets().get(fieldName);\n      \n      // If what's contained in the context is itself an evaluator then\n      // we need to evaluate it\n      if(value instanceof StreamEvaluator){\n        value = ((StreamEvaluator)value).evaluate(tuple);\n      }\n    }\n    \n    // if we have an array then convert to an ArrayList\n    // if we have an iterable that is not a list then convert to ArrayList\n    // lists are good to go\n    if(null != value){\n      if(value instanceof Object[]){\n        Object[] array = (Object[])value;\n        List<Object> list = new ArrayList<Object>(array.length);\n        for(Object obj : array){\n          list.add(obj);\n        }\n        return list;\n      }\n      else if(value instanceof Iterable && !(value instanceof List<?>)){\n        Iterable<?> iter = (Iterable<?>)value;\n        List<Object> list = new ArrayList<Object>();\n        for(Object obj : iter){\n          list.add(obj);\n        }\n        return list;\n      }\n    }\n    \n    return value;\n  }\n\n","sourceOld":"  @Override\n  public Object evaluate(Tuple tuple) {\n    Object value = tuple.get(fieldName);\n    \n    // if we have an array then convert to an ArrayList\n    // if we have an iterable that is not a list then convert to ArrayList\n    // lists are good to go\n    if(null != value){\n      if(value instanceof Object[]){\n        Object[] array = (Object[])value;\n        List<Object> list = new ArrayList<Object>(array.length);\n        for(Object obj : array){\n          list.add(obj);\n        }\n        return list;\n      }\n      else if(value instanceof Iterable && !(value instanceof List<?>)){\n        Iterable<?> iter = (Iterable<?>)value;\n        List<Object> list = new ArrayList<Object>();\n        for(Object obj : iter){\n          list.add(obj);\n        }\n        return list;\n      }\n    }\n    \n    return value;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/FieldEvaluator#evaluate(Tuple).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/FieldEvaluator#evaluate(Tuple).mjava","sourceNew":"  @Override\n  public Object evaluate(Tuple tuple) throws IOException {\n    Object value = tuple.get(fieldName);\n    \n    // This is somewhat radical.\n    // Here, we allow for the use of the context to provide alternative values\n    // when they are not available in the provided tuple. This means that all\n    // evaluators can evaluate over both a stream's tuple and the context, and\n    // can even evaluate over fields from both of them in the same evaluation\n    if(null == value && null != getStreamContext()){\n      value = getStreamContext().getLets().get(fieldName);\n      \n      // If what's contained in the context is itself an evaluator then\n      // we need to evaluate it\n      if(value instanceof StreamEvaluator){\n        value = ((StreamEvaluator)value).evaluate(tuple);\n      }\n    }\n    \n    // if we have an array then convert to an ArrayList\n    // if we have an iterable that is not a list then convert to ArrayList\n    // lists are good to go\n    if(null != value){\n      if(value instanceof Object[]){\n        Object[] array = (Object[])value;\n        List<Object> list = new ArrayList<Object>(array.length);\n        for(Object obj : array){\n          list.add(obj);\n        }\n        return list;\n      }\n      else if(value instanceof Iterable && !(value instanceof List<?>)){\n        Iterable<?> iter = (Iterable<?>)value;\n        List<Object> list = new ArrayList<Object>();\n        for(Object obj : iter){\n          list.add(obj);\n        }\n        return list;\n      }\n    }\n    \n    return value;\n  }\n\n","sourceOld":"  @Override\n  public Object evaluate(Tuple tuple) {\n    Object value = tuple.get(fieldName);\n    \n    // if we have an array then convert to an ArrayList\n    // if we have an iterable that is not a list then convert to ArrayList\n    // lists are good to go\n    if(null != value){\n      if(value instanceof Object[]){\n        Object[] array = (Object[])value;\n        List<Object> list = new ArrayList<Object>(array.length);\n        for(Object obj : array){\n          list.add(obj);\n        }\n        return list;\n      }\n      else if(value instanceof Iterable && !(value instanceof List<?>)){\n        Iterable<?> iter = (Iterable<?>)value;\n        List<Object> list = new ArrayList<Object>();\n        for(Object obj : iter){\n          list.add(obj);\n        }\n        return list;\n      }\n    }\n    \n    return value;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba1e7de64990e3928b90142a52fb92eeff556475","date":1503713257,"type":5,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/FieldValueEvaluator#evaluate(Tuple).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/FieldEvaluator#evaluate(Tuple).mjava","sourceNew":"  @Override\n  public Object evaluate(Tuple tuple) throws IOException {\n    Object value = tuple.get(fieldName);\n    \n    // This is somewhat radical.\n    // Here, we allow for the use of the context to provide alternative values\n    // when they are not available in the provided tuple. This means that all\n    // evaluators can evaluate over both a stream's tuple and the context, and\n    // can even evaluate over fields from both of them in the same evaluation\n    if(null == value && null != getStreamContext()){\n      value = getStreamContext().getLets().get(fieldName);\n      \n      // If what's contained in the context is itself an evaluator then\n      // we need to evaluate it\n      if(value instanceof StreamEvaluator){\n        value = ((StreamEvaluator)value).evaluate(tuple);\n      }\n    }\n    \n    // if we have an array then convert to an ArrayList\n    // if we have an iterable that is not a list then convert to ArrayList\n    // lists are good to go\n    if(null != value){\n      if(value instanceof Object[]){\n        Object[] array = (Object[])value;\n        List<Object> list = new ArrayList<Object>(array.length);\n        for(Object obj : array){\n          list.add(obj);\n        }\n        return list;\n      }\n      else if(value instanceof Iterable && !(value instanceof List<?>)){\n        Iterable<?> iter = (Iterable<?>)value;\n        List<Object> list = new ArrayList<Object>();\n        for(Object obj : iter){\n          list.add(obj);\n        }\n        return list;\n      }\n    }\n    \n    return value;\n  }\n\n","sourceOld":"  @Override\n  public Object evaluate(Tuple tuple) throws IOException {\n    Object value = tuple.get(fieldName);\n    \n    // This is somewhat radical.\n    // Here, we allow for the use of the context to provide alternative values\n    // when they are not available in the provided tuple. This means that all\n    // evaluators can evaluate over both a stream's tuple and the context, and\n    // can even evaluate over fields from both of them in the same evaluation\n    if(null == value && null != getStreamContext()){\n      value = getStreamContext().getLets().get(fieldName);\n      \n      // If what's contained in the context is itself an evaluator then\n      // we need to evaluate it\n      if(value instanceof StreamEvaluator){\n        value = ((StreamEvaluator)value).evaluate(tuple);\n      }\n    }\n    \n    // if we have an array then convert to an ArrayList\n    // if we have an iterable that is not a list then convert to ArrayList\n    // lists are good to go\n    if(null != value){\n      if(value instanceof Object[]){\n        Object[] array = (Object[])value;\n        List<Object> list = new ArrayList<Object>(array.length);\n        for(Object obj : array){\n          list.add(obj);\n        }\n        return list;\n      }\n      else if(value instanceof Iterable && !(value instanceof List<?>)){\n        Iterable<?> iter = (Iterable<?>)value;\n        List<Object> list = new ArrayList<Object>();\n        for(Object obj : iter){\n          list.add(obj);\n        }\n        return list;\n      }\n    }\n    \n    return value;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"45c28dbb559366e1f4ef8077346552bfb3f7ecf6","date":1503738439,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/FieldValueEvaluator#evaluate(Tuple).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/FieldEvaluator#evaluate(Tuple).mjava","sourceNew":"  @Override\n  public Object evaluate(Tuple tuple) throws IOException {\n    Object value = tuple.get(fieldName);\n    \n    // This is somewhat radical.\n    // Here, we allow for the use of the context to provide alternative values\n    // when they are not available in the provided tuple. This means that all\n    // evaluators can evaluate over both a stream's tuple and the context, and\n    // can even evaluate over fields from both of them in the same evaluation\n    if(null == value && null != getStreamContext()){\n      value = getStreamContext().getLets().get(fieldName);\n      \n      // If what's contained in the context is itself an evaluator then\n      // we need to evaluate it\n      if(value instanceof StreamEvaluator){\n        value = ((StreamEvaluator)value).evaluate(tuple);\n      }\n    }\n    \n    // if we have an array then convert to an ArrayList\n    // if we have an iterable that is not a list then convert to ArrayList\n    // lists are good to go\n    if(null != value){\n      if(value instanceof Object[]){\n        Object[] array = (Object[])value;\n        List<Object> list = new ArrayList<Object>(array.length);\n        for(Object obj : array){\n          list.add(obj);\n        }\n        return list;\n      }\n      else if(value instanceof Iterable && !(value instanceof List<?>)){\n        Iterable<?> iter = (Iterable<?>)value;\n        List<Object> list = new ArrayList<Object>();\n        for(Object obj : iter){\n          list.add(obj);\n        }\n        return list;\n      }\n    }\n    \n    return value;\n  }\n\n","sourceOld":"  @Override\n  public Object evaluate(Tuple tuple) throws IOException {\n    Object value = tuple.get(fieldName);\n    \n    // This is somewhat radical.\n    // Here, we allow for the use of the context to provide alternative values\n    // when they are not available in the provided tuple. This means that all\n    // evaluators can evaluate over both a stream's tuple and the context, and\n    // can even evaluate over fields from both of them in the same evaluation\n    if(null == value && null != getStreamContext()){\n      value = getStreamContext().getLets().get(fieldName);\n      \n      // If what's contained in the context is itself an evaluator then\n      // we need to evaluate it\n      if(value instanceof StreamEvaluator){\n        value = ((StreamEvaluator)value).evaluate(tuple);\n      }\n    }\n    \n    // if we have an array then convert to an ArrayList\n    // if we have an iterable that is not a list then convert to ArrayList\n    // lists are good to go\n    if(null != value){\n      if(value instanceof Object[]){\n        Object[] array = (Object[])value;\n        List<Object> list = new ArrayList<Object>(array.length);\n        for(Object obj : array){\n          list.add(obj);\n        }\n        return list;\n      }\n      else if(value instanceof Iterable && !(value instanceof List<?>)){\n        Iterable<?> iter = (Iterable<?>)value;\n        List<Object> list = new ArrayList<Object>();\n        for(Object obj : iter){\n          list.add(obj);\n        }\n        return list;\n      }\n    }\n    \n    return value;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a7809d1d753b67f48b1a706e17034bf8b624ea3","date":1504366927,"type":5,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/FieldValueEvaluator#evaluate(Tuple).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/FieldEvaluator#evaluate(Tuple).mjava","sourceNew":"  @Override\n  public Object evaluate(Tuple tuple) throws IOException {\n    Object value = tuple.get(fieldName);\n    \n    // This is somewhat radical.\n    // Here, we allow for the use of the context to provide alternative values\n    // when they are not available in the provided tuple. This means that all\n    // evaluators can evaluate over both a stream's tuple and the context, and\n    // can even evaluate over fields from both of them in the same evaluation\n    if(null == value && null != getStreamContext()){\n      value = getStreamContext().getLets().get(fieldName);\n      \n      // If what's contained in the context is itself an evaluator then\n      // we need to evaluate it\n      if(value instanceof StreamEvaluator){\n        value = ((StreamEvaluator)value).evaluate(tuple);\n      }\n    }\n    \n    // if we have an array then convert to an ArrayList\n    // if we have an iterable that is not a list then convert to ArrayList\n    // lists are good to go\n    if(null != value){\n      if(value instanceof Object[]){\n        Object[] array = (Object[])value;\n        List<Object> list = new ArrayList<Object>(array.length);\n        for(Object obj : array){\n          list.add(obj);\n        }\n        return list;\n      }\n      else if(value instanceof Iterable && !(value instanceof List<?>)){\n        Iterable<?> iter = (Iterable<?>)value;\n        List<Object> list = new ArrayList<Object>();\n        for(Object obj : iter){\n          list.add(obj);\n        }\n        return list;\n      }\n    }\n    \n    return value;\n  }\n\n","sourceOld":"  @Override\n  public Object evaluate(Tuple tuple) throws IOException {\n    Object value = tuple.get(fieldName);\n    \n    // This is somewhat radical.\n    // Here, we allow for the use of the context to provide alternative values\n    // when they are not available in the provided tuple. This means that all\n    // evaluators can evaluate over both a stream's tuple and the context, and\n    // can even evaluate over fields from both of them in the same evaluation\n    if(null == value && null != getStreamContext()){\n      value = getStreamContext().getLets().get(fieldName);\n      \n      // If what's contained in the context is itself an evaluator then\n      // we need to evaluate it\n      if(value instanceof StreamEvaluator){\n        value = ((StreamEvaluator)value).evaluate(tuple);\n      }\n    }\n    \n    // if we have an array then convert to an ArrayList\n    // if we have an iterable that is not a list then convert to ArrayList\n    // lists are good to go\n    if(null != value){\n      if(value instanceof Object[]){\n        Object[] array = (Object[])value;\n        List<Object> list = new ArrayList<Object>(array.length);\n        for(Object obj : array){\n          list.add(obj);\n        }\n        return list;\n      }\n      else if(value instanceof Iterable && !(value instanceof List<?>)){\n        Iterable<?> iter = (Iterable<?>)value;\n        List<Object> list = new ArrayList<Object>();\n        for(Object obj : iter){\n          list.add(obj);\n        }\n        return list;\n      }\n    }\n    \n    return value;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["869bbd0c59fee20268facd5a2e0d3c77e34500ed","d43c6d0a8b813b1c64f24d3ba07a65cd4a19e792"],"88073e8783f450d4c0218decc2f001a1ac2c7e7c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"869bbd0c59fee20268facd5a2e0d3c77e34500ed":["88073e8783f450d4c0218decc2f001a1ac2c7e7c"],"3a7809d1d753b67f48b1a706e17034bf8b624ea3":["e9017cf144952056066919f1ebc7897ff9bd71b1","45c28dbb559366e1f4ef8077346552bfb3f7ecf6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"45c28dbb559366e1f4ef8077346552bfb3f7ecf6":["d43c6d0a8b813b1c64f24d3ba07a65cd4a19e792","ba1e7de64990e3928b90142a52fb92eeff556475"],"d492b24eb91b29b3fb6bca5b158bec326fbc12df":["88073e8783f450d4c0218decc2f001a1ac2c7e7c"],"ba1e7de64990e3928b90142a52fb92eeff556475":["d43c6d0a8b813b1c64f24d3ba07a65cd4a19e792"],"d43c6d0a8b813b1c64f24d3ba07a65cd4a19e792":["d492b24eb91b29b3fb6bca5b158bec326fbc12df"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["45c28dbb559366e1f4ef8077346552bfb3f7ecf6"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["3a7809d1d753b67f48b1a706e17034bf8b624ea3"],"88073e8783f450d4c0218decc2f001a1ac2c7e7c":["869bbd0c59fee20268facd5a2e0d3c77e34500ed","d492b24eb91b29b3fb6bca5b158bec326fbc12df"],"869bbd0c59fee20268facd5a2e0d3c77e34500ed":["e9017cf144952056066919f1ebc7897ff9bd71b1"],"3a7809d1d753b67f48b1a706e17034bf8b624ea3":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["88073e8783f450d4c0218decc2f001a1ac2c7e7c"],"45c28dbb559366e1f4ef8077346552bfb3f7ecf6":["3a7809d1d753b67f48b1a706e17034bf8b624ea3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ba1e7de64990e3928b90142a52fb92eeff556475":["45c28dbb559366e1f4ef8077346552bfb3f7ecf6"],"d492b24eb91b29b3fb6bca5b158bec326fbc12df":["d43c6d0a8b813b1c64f24d3ba07a65cd4a19e792"],"d43c6d0a8b813b1c64f24d3ba07a65cd4a19e792":["e9017cf144952056066919f1ebc7897ff9bd71b1","45c28dbb559366e1f4ef8077346552bfb3f7ecf6","ba1e7de64990e3928b90142a52fb92eeff556475"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3a7809d1d753b67f48b1a706e17034bf8b624ea3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}