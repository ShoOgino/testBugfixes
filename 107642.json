{"path":"lucene/src/java/org/apache/lucene/index/IndexWriter#optimizeMergesPending().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#optimizeMergesPending().mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#optimizeMergesPending().mjava","sourceNew":"  /** Returns true if any merges in pendingMerges or\n   *  runningMerges are optimization merges. */\n  private synchronized boolean optimizeMergesPending() {\n    for (final MergePolicy.OneMerge merge : pendingMerges) {\n      if (merge.optimize)\n        return true;\n    }\n    \n    for (final MergePolicy.OneMerge merge : runningMerges) {\n      if (merge.optimize)\n        return true;\n    }\n    \n    return false;\n  }\n\n","sourceOld":"  /** Returns true if any merges in pendingMerges or\n   *  runningMerges are optimization merges. */\n  private synchronized boolean optimizeMergesPending() {\n    for (final MergePolicy.OneMerge merge : pendingMerges) {\n      if (merge.optimize)\n        return true;\n    }\n    \n    for (final MergePolicy.OneMerge merge : runningMerges) {\n      if (merge.optimize)\n        return true;\n    }\n    \n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#optimizeMergesPending().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#optimizeMergesPending().mjava","sourceNew":"  /** Returns true if any merges in pendingMerges or\n   *  runningMerges are optimization merges. */\n  private synchronized boolean optimizeMergesPending() {\n    for (final MergePolicy.OneMerge merge : pendingMerges) {\n      if (merge.optimize)\n        return true;\n    }\n\n    for (final MergePolicy.OneMerge merge : runningMerges) {\n      if (merge.optimize)\n        return true;\n    }\n\n    return false;\n  }\n\n","sourceOld":"  /** Returns true if any merges in pendingMerges or\n   *  runningMerges are optimization merges. */\n  private synchronized boolean optimizeMergesPending() {\n    for (final MergePolicy.OneMerge merge : pendingMerges) {\n      if (merge.optimize)\n        return true;\n    }\n    \n    for (final MergePolicy.OneMerge merge : runningMerges) {\n      if (merge.optimize)\n        return true;\n    }\n    \n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b3e06be49006ecac364d39d12b9c9f74882f9b9f","date":1304289513,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#optimizeMergesPending().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#optimizeMergesPending().mjava","sourceNew":"  /** Returns true if any merges in pendingMerges or\n   *  runningMerges are optimization merges. */\n  private synchronized boolean optimizeMergesPending() {\n    for (final MergePolicy.OneMerge merge : pendingMerges) {\n      if (merge.optimize)\n        return true;\n    }\n\n    for (final MergePolicy.OneMerge merge : runningMerges) {\n      if (merge.optimize)\n        return true;\n    }\n\n    return false;\n  }\n\n","sourceOld":"  /** Returns true if any merges in pendingMerges or\n   *  runningMerges are optimization merges. */\n  private synchronized boolean optimizeMergesPending() {\n    for (final MergePolicy.OneMerge merge : pendingMerges) {\n      if (merge.optimize)\n        return true;\n    }\n    \n    for (final MergePolicy.OneMerge merge : runningMerges) {\n      if (merge.optimize)\n        return true;\n    }\n    \n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#optimizeMergesPending().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#optimizeMergesPending().mjava","sourceNew":"  /** Returns true if any merges in pendingMerges or\n   *  runningMerges are optimization merges. */\n  private synchronized boolean optimizeMergesPending() {\n    for (final MergePolicy.OneMerge merge : pendingMerges) {\n      if (merge.optimize)\n        return true;\n    }\n\n    for (final MergePolicy.OneMerge merge : runningMerges) {\n      if (merge.optimize)\n        return true;\n    }\n\n    return false;\n  }\n\n","sourceOld":"  /** Returns true if any merges in pendingMerges or\n   *  runningMerges are optimization merges. */\n  private synchronized boolean optimizeMergesPending() {\n    for (final MergePolicy.OneMerge merge : pendingMerges) {\n      if (merge.optimize)\n        return true;\n    }\n    \n    for (final MergePolicy.OneMerge merge : runningMerges) {\n      if (merge.optimize)\n        return true;\n    }\n    \n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#optimizeMergesPending().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#optimizeMergesPending().mjava","sourceNew":"  /** Returns true if any merges in pendingMerges or\n   *  runningMerges are optimization merges. */\n  private synchronized boolean optimizeMergesPending() {\n    for (final MergePolicy.OneMerge merge : pendingMerges) {\n      if (merge.optimize)\n        return true;\n    }\n\n    for (final MergePolicy.OneMerge merge : runningMerges) {\n      if (merge.optimize)\n        return true;\n    }\n\n    return false;\n  }\n\n","sourceOld":"  /** Returns true if any merges in pendingMerges or\n   *  runningMerges are optimization merges. */\n  private synchronized boolean optimizeMergesPending() {\n    for (final MergePolicy.OneMerge merge : pendingMerges) {\n      if (merge.optimize)\n        return true;\n    }\n    \n    for (final MergePolicy.OneMerge merge : runningMerges) {\n      if (merge.optimize)\n        return true;\n    }\n    \n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d14e8d18c0e3970c20354dbeeb49da11bd587fbd","date":1321041051,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#maxNumSegmentsMergesPending().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#optimizeMergesPending().mjava","sourceNew":"  /** Returns true if any merges in pendingMerges or\n   *  runningMerges are maxNumSegments merges. */\n  private synchronized boolean maxNumSegmentsMergesPending() {\n    for (final MergePolicy.OneMerge merge : pendingMerges) {\n      if (merge.maxNumSegments != -1)\n        return true;\n    }\n\n    for (final MergePolicy.OneMerge merge : runningMerges) {\n      if (merge.maxNumSegments != -1)\n        return true;\n    }\n\n    return false;\n  }\n\n","sourceOld":"  /** Returns true if any merges in pendingMerges or\n   *  runningMerges are optimization merges. */\n  private synchronized boolean optimizeMergesPending() {\n    for (final MergePolicy.OneMerge merge : pendingMerges) {\n      if (merge.optimize)\n        return true;\n    }\n\n    for (final MergePolicy.OneMerge merge : runningMerges) {\n      if (merge.optimize)\n        return true;\n    }\n\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a3776dccca01c11e7046323cfad46a3b4a471233":["9454a6510e2db155fb01faa5c049b06ece95fab9","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["9454a6510e2db155fb01faa5c049b06ece95fab9","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["9454a6510e2db155fb01faa5c049b06ece95fab9","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["9454a6510e2db155fb01faa5c049b06ece95fab9","9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","b3e06be49006ecac364d39d12b9c9f74882f9b9f","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}