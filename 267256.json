{"path":"lucene/analysis/common/src/java/org/apache/lucene/analysis/br/BrazilianStemmer#isStemmable(String).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/br/BrazilianStemmer#isStemmable(String).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/br/BrazilianStemmer#isStemmable(String).mjava","sourceNew":"\t/**\n\t * Checks a term if it can be processed correctly.\n\t *\n\t * @return  true if, and only if, the given term consists in letters.\n\t */\n\tprivate boolean isStemmable( String term ) {\n\t\tfor ( int c = 0; c < term.length(); c++ ) {\n\t\t\t// Discard terms that contain non-letter characters.\n\t\t\tif ( !Character.isLetter(term.charAt(c))) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n","sourceOld":"\t/**\n\t * Checks a term if it can be processed correctly.\n\t *\n\t * @return  true if, and only if, the given term consists in letters.\n\t */\n\tprivate boolean isStemmable( String term ) {\n\t\tfor ( int c = 0; c < term.length(); c++ ) {\n\t\t\t// Discard terms that contain non-letter characters.\n\t\t\tif ( !Character.isLetter(term.charAt(c))) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4093b270ba337f9c25a4c0e6cb2ae2c07f697376","date":1347897716,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/br/BrazilianStemmer#isStemmable(String).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/br/BrazilianStemmer#isStemmable(String).mjava","sourceNew":"  /**\n   * Checks a term if it can be processed correctly.\n   *\n   * @return  true if, and only if, the given term consists in letters.\n   */\n  private boolean isStemmable( String term ) {\n    for ( int c = 0; c < term.length(); c++ ) {\n      // Discard terms that contain non-letter characters.\n      if ( !Character.isLetter(term.charAt(c))) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n","sourceOld":"\t/**\n\t * Checks a term if it can be processed correctly.\n\t *\n\t * @return  true if, and only if, the given term consists in letters.\n\t */\n\tprivate boolean isStemmable( String term ) {\n\t\tfor ( int c = 0; c < term.length(); c++ ) {\n\t\t\t// Discard terms that contain non-letter characters.\n\t\t\tif ( !Character.isLetter(term.charAt(c))) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4093b270ba337f9c25a4c0e6cb2ae2c07f697376"],"4093b270ba337f9c25a4c0e6cb2ae2c07f697376":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["4093b270ba337f9c25a4c0e6cb2ae2c07f697376"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"4093b270ba337f9c25a4c0e6cb2ae2c07f697376":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}