{"path":"lucene/core/src/java/org/apache/lucene/index/MultiFields#getTermPositionsEnum(IndexReader,String,BytesRef,int).mjava","commits":[{"id":"0f4464508ee83288c8c4585b533f9faaa93aa314","date":1435240759,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MultiFields#getTermPositionsEnum(IndexReader,String,BytesRef,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/MultiFields#getTermPositionsEnum(IndexReader,Bits,String,BytesRef,int).mjava","sourceNew":"  /** Returns {@link PostingsEnum} for the specified\n   *  field and term, with control over whether offsets and payloads are\n   *  required.  Some codecs may be able to optimize\n   *  their implementation when offsets and/or payloads are not\n   *  required. This will return null if the field or term does not\n   *  exist. See {@link TermsEnum#postings(PostingsEnum,int)}. */\n  public static PostingsEnum getTermPositionsEnum(IndexReader r, String field, BytesRef term, int flags) throws IOException {\n    assert field != null;\n    assert term != null;\n    final Terms terms = getTerms(r, field);\n    if (terms != null) {\n      final TermsEnum termsEnum = terms.iterator();\n      if (termsEnum.seekExact(term)) {\n        return termsEnum.postings(null, flags);\n      }\n    }\n    return null;\n  }\n\n","sourceOld":"  /** Returns {@link PostingsEnum} for the specified\n   *  field and term, with control over whether offsets and payloads are\n   *  required.  Some codecs may be able to optimize\n   *  their implementation when offsets and/or payloads are not\n   *  required. This will return null if the field or term does not\n   *  exist. See {@link TermsEnum#postings(Bits, PostingsEnum,int)}. */\n  public static PostingsEnum getTermPositionsEnum(IndexReader r, Bits liveDocs, String field, BytesRef term, int flags) throws IOException {\n    assert field != null;\n    assert term != null;\n    final Terms terms = getTerms(r, field);\n    if (terms != null) {\n      final TermsEnum termsEnum = terms.iterator();\n      if (termsEnum.seekExact(term)) {\n        return termsEnum.postings(liveDocs, null, flags);\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"04e775de416dd2d8067b10db1c8af975a1d5017e","date":1539906554,"type":5,"author":"David Smiley","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MultiTerms#getTermPostingsEnum(IndexReader,String,BytesRef,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/MultiFields#getTermPositionsEnum(IndexReader,String,BytesRef,int).mjava","sourceNew":"  /** Returns {@link PostingsEnum} for the specified\n   *  field and term, with control over whether freqs, positions, offsets or payloads\n   *  are required.  Some codecs may be able to optimize\n   *  their implementation when offsets and/or payloads are not\n   *  required. This will return null if the field or term does not\n   *  exist. See {@link TermsEnum#postings(PostingsEnum,int)}. */\n  public static PostingsEnum getTermPostingsEnum(IndexReader r, String field, BytesRef term, int flags) throws IOException {\n    assert field != null;\n    assert term != null;\n    final Terms terms = getTerms(r, field);\n    if (terms != null) {\n      final TermsEnum termsEnum = terms.iterator();\n      if (termsEnum.seekExact(term)) {\n        return termsEnum.postings(null, flags);\n      }\n    }\n    return null;\n  }\n\n","sourceOld":"  /** Returns {@link PostingsEnum} for the specified\n   *  field and term, with control over whether offsets and payloads are\n   *  required.  Some codecs may be able to optimize\n   *  their implementation when offsets and/or payloads are not\n   *  required. This will return null if the field or term does not\n   *  exist. See {@link TermsEnum#postings(PostingsEnum,int)}. */\n  public static PostingsEnum getTermPositionsEnum(IndexReader r, String field, BytesRef term, int flags) throws IOException {\n    assert field != null;\n    assert term != null;\n    final Terms terms = getTerms(r, field);\n    if (terms != null) {\n      final TermsEnum termsEnum = terms.iterator();\n      if (termsEnum.seekExact(term)) {\n        return termsEnum.postings(null, flags);\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0f4464508ee83288c8c4585b533f9faaa93aa314":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"04e775de416dd2d8067b10db1c8af975a1d5017e":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["04e775de416dd2d8067b10db1c8af975a1d5017e"]},"commit2Childs":{"0f4464508ee83288c8c4585b533f9faaa93aa314":["04e775de416dd2d8067b10db1c8af975a1d5017e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"04e775de416dd2d8067b10db1c8af975a1d5017e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}