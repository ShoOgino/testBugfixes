{"path":"lucene/src/test/org/apache/lucene/index/TestCrash#crash(IndexWriter).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestCrash#crash(IndexWriter).mjava","pathOld":"src/test/org/apache/lucene/index/TestCrash#crash(IndexWriter).mjava","sourceNew":"  private void crash(final IndexWriter writer) throws IOException {\n    final MockRAMDirectory dir = (MockRAMDirectory) writer.getDirectory();\n    ConcurrentMergeScheduler cms = (ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler();\n    dir.crash();\n    cms.sync();\n    dir.clearCrash();\n  }\n\n","sourceOld":"  private void crash(final IndexWriter writer) throws IOException {\n    final MockRAMDirectory dir = (MockRAMDirectory) writer.getDirectory();\n    ConcurrentMergeScheduler cms = (ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler();\n    dir.crash();\n    cms.sync();\n    dir.clearCrash();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b21422ff1d1d56499dec481f193b402e5e8def5b","date":1281472367,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestCrash#crash(IndexWriter).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestCrash#crash(IndexWriter).mjava","sourceNew":"  private void crash(final IndexWriter writer) throws IOException {\n    final MockRAMDirectory dir = (MockRAMDirectory) writer.getDirectory();\n    ConcurrentMergeScheduler cms = (ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler();\n    cms.sync();\n    dir.crash();\n    cms.sync();\n    dir.clearCrash();\n  }\n\n","sourceOld":"  private void crash(final IndexWriter writer) throws IOException {\n    final MockRAMDirectory dir = (MockRAMDirectory) writer.getDirectory();\n    ConcurrentMergeScheduler cms = (ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler();\n    dir.crash();\n    cms.sync();\n    dir.clearCrash();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a05409176bd65129d67a785ee70e881e238a9aef","date":1282582843,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestCrash#crash(IndexWriter).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestCrash#crash(IndexWriter).mjava","sourceNew":"  private void crash(final IndexWriter writer) throws IOException {\n    final MockDirectoryWrapper dir = (MockDirectoryWrapper) writer.getDirectory();\n    ConcurrentMergeScheduler cms = (ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler();\n    cms.sync();\n    dir.crash();\n    cms.sync();\n    dir.clearCrash();\n  }\n\n","sourceOld":"  private void crash(final IndexWriter writer) throws IOException {\n    final MockRAMDirectory dir = (MockRAMDirectory) writer.getDirectory();\n    ConcurrentMergeScheduler cms = (ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler();\n    cms.sync();\n    dir.crash();\n    cms.sync();\n    dir.clearCrash();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestCrash#crash(IndexWriter).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestCrash#crash(IndexWriter).mjava","sourceNew":"  private void crash(final IndexWriter writer) throws IOException {\n    final MockDirectoryWrapper dir = (MockDirectoryWrapper) writer.getDirectory();\n    ConcurrentMergeScheduler cms = (ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler();\n    cms.sync();\n    dir.crash();\n    cms.sync();\n    dir.clearCrash();\n  }\n\n","sourceOld":"  private void crash(final IndexWriter writer) throws IOException {\n    final MockRAMDirectory dir = (MockRAMDirectory) writer.getDirectory();\n    ConcurrentMergeScheduler cms = (ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler();\n    dir.crash();\n    cms.sync();\n    dir.clearCrash();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestCrash#crash(IndexWriter).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestCrash#crash(IndexWriter).mjava","sourceNew":"  private void crash(final IndexWriter writer) throws IOException {\n    final MockDirectoryWrapper dir = (MockDirectoryWrapper) writer.getDirectory();\n    ConcurrentMergeScheduler cms = (ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler();\n    cms.sync();\n    dir.crash();\n    cms.sync();\n    dir.clearCrash();\n  }\n\n","sourceOld":"  private void crash(final IndexWriter writer) throws IOException {\n    final MockDirectoryWrapper dir = (MockDirectoryWrapper) writer.getDirectory();\n    ConcurrentMergeScheduler cms = (ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler();\n    cms.sync();\n    dir.crash();\n    cms.sync();\n    dir.clearCrash();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a05409176bd65129d67a785ee70e881e238a9aef"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a05409176bd65129d67a785ee70e881e238a9aef":["b21422ff1d1d56499dec481f193b402e5e8def5b"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["9454a6510e2db155fb01faa5c049b06ece95fab9","a05409176bd65129d67a785ee70e881e238a9aef"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a05409176bd65129d67a785ee70e881e238a9aef":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"b21422ff1d1d56499dec481f193b402e5e8def5b":["a05409176bd65129d67a785ee70e881e238a9aef"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","b21422ff1d1d56499dec481f193b402e5e8def5b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}