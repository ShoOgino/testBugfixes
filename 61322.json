{"path":"lucene/core/src/java/org/apache/lucene/index/BufferedUpdatesStream#waitApply(Set[FrozenBufferedUpdates]).mjava","commits":[{"id":"f4363cd33f6eff7fb4753574a441e2d18c1022a4","date":1498067235,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/BufferedUpdatesStream#waitApply(Set[FrozenBufferedUpdates]).mjava","pathOld":"/dev/null","sourceNew":"  private void waitApply(Set<FrozenBufferedUpdates> waitFor) throws IOException {\n\n    long startNS = System.nanoTime();\n\n    int packetCount = waitFor.size();\n\n    if (waitFor.isEmpty()) {\n      if (infoStream.isEnabled(\"BD\")) {\n        infoStream.message(\"BD\", \"waitApply: no deletes to apply\");\n      }\n      return;\n    }\n\n    if (infoStream.isEnabled(\"BD\")) {\n      infoStream.message(\"BD\", \"waitApply: \" + waitFor.size() + \" packets: \" + waitFor);\n    }\n\n    long totalDelCount = 0;\n    for (FrozenBufferedUpdates packet : waitFor) {\n      // Frozen packets are now resolved, concurrently, by the indexing threads that\n      // create them, by adding a DocumentsWriter.ResolveUpdatesEvent to the events queue,\n      // but if we get here and the packet is not yet resolved, we resolve it now ourselves:\n      packet.apply(writer);\n      totalDelCount += packet.totalDelCount;\n    }\n\n    if (infoStream.isEnabled(\"BD\")) {\n      infoStream.message(\"BD\",\n                         String.format(Locale.ROOT, \"waitApply: done %d packets; totalDelCount=%d; totBytesUsed=%d; took %.2f msec\",\n                                       packetCount,\n                                       totalDelCount,\n                                       bytesUsed.get(),\n                                       (System.nanoTime() - startNS) / 1000000.));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/BufferedUpdatesStream#waitApply(Set[FrozenBufferedUpdates]).mjava","pathOld":"/dev/null","sourceNew":"  private void waitApply(Set<FrozenBufferedUpdates> waitFor) throws IOException {\n\n    long startNS = System.nanoTime();\n\n    int packetCount = waitFor.size();\n\n    if (waitFor.isEmpty()) {\n      if (infoStream.isEnabled(\"BD\")) {\n        infoStream.message(\"BD\", \"waitApply: no deletes to apply\");\n      }\n      return;\n    }\n\n    if (infoStream.isEnabled(\"BD\")) {\n      infoStream.message(\"BD\", \"waitApply: \" + waitFor.size() + \" packets: \" + waitFor);\n    }\n\n    long totalDelCount = 0;\n    for (FrozenBufferedUpdates packet : waitFor) {\n      // Frozen packets are now resolved, concurrently, by the indexing threads that\n      // create them, by adding a DocumentsWriter.ResolveUpdatesEvent to the events queue,\n      // but if we get here and the packet is not yet resolved, we resolve it now ourselves:\n      packet.apply(writer);\n      totalDelCount += packet.totalDelCount;\n    }\n\n    if (infoStream.isEnabled(\"BD\")) {\n      infoStream.message(\"BD\",\n                         String.format(Locale.ROOT, \"waitApply: done %d packets; totalDelCount=%d; totBytesUsed=%d; took %.2f msec\",\n                                       packetCount,\n                                       totalDelCount,\n                                       bytesUsed.get(),\n                                       (System.nanoTime() - startNS) / 1000000.));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/BufferedUpdatesStream#waitApply(Set[FrozenBufferedUpdates]).mjava","pathOld":"/dev/null","sourceNew":"  private void waitApply(Set<FrozenBufferedUpdates> waitFor) throws IOException {\n\n    long startNS = System.nanoTime();\n\n    int packetCount = waitFor.size();\n\n    if (waitFor.isEmpty()) {\n      if (infoStream.isEnabled(\"BD\")) {\n        infoStream.message(\"BD\", \"waitApply: no deletes to apply\");\n      }\n      return;\n    }\n\n    if (infoStream.isEnabled(\"BD\")) {\n      infoStream.message(\"BD\", \"waitApply: \" + waitFor.size() + \" packets: \" + waitFor);\n    }\n\n    long totalDelCount = 0;\n    for (FrozenBufferedUpdates packet : waitFor) {\n      // Frozen packets are now resolved, concurrently, by the indexing threads that\n      // create them, by adding a DocumentsWriter.ResolveUpdatesEvent to the events queue,\n      // but if we get here and the packet is not yet resolved, we resolve it now ourselves:\n      packet.apply(writer);\n      totalDelCount += packet.totalDelCount;\n    }\n\n    if (infoStream.isEnabled(\"BD\")) {\n      infoStream.message(\"BD\",\n                         String.format(Locale.ROOT, \"waitApply: done %d packets; totalDelCount=%d; totBytesUsed=%d; took %.2f msec\",\n                                       packetCount,\n                                       totalDelCount,\n                                       bytesUsed.get(),\n                                       (System.nanoTime() - startNS) / 1000000.));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"86a2e8a56b368d37ef3ba7180541fa317d6fd6c7","date":1524496660,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/BufferedUpdatesStream#waitApply(Set[FrozenBufferedUpdates],IndexWriter).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/BufferedUpdatesStream#waitApply(Set[FrozenBufferedUpdates]).mjava","sourceNew":"  private void waitApply(Set<FrozenBufferedUpdates> waitFor, IndexWriter writer) throws IOException {\n\n    long startNS = System.nanoTime();\n\n    int packetCount = waitFor.size();\n\n    if (waitFor.isEmpty()) {\n      if (infoStream.isEnabled(\"BD\")) {\n        infoStream.message(\"BD\", \"waitApply: no deletes to apply\");\n      }\n      return;\n    }\n\n    if (infoStream.isEnabled(\"BD\")) {\n      infoStream.message(\"BD\", \"waitApply: \" + waitFor.size() + \" packets: \" + waitFor);\n    }\n\n    long totalDelCount = 0;\n    for (FrozenBufferedUpdates packet : waitFor) {\n      // Frozen packets are now resolved, concurrently, by the indexing threads that\n      // create them, by adding a DocumentsWriter.ResolveUpdatesEvent to the events queue,\n      // but if we get here and the packet is not yet resolved, we resolve it now ourselves:\n      packet.apply(writer);\n      totalDelCount += packet.totalDelCount;\n    }\n\n    if (infoStream.isEnabled(\"BD\")) {\n      infoStream.message(\"BD\",\n                         String.format(Locale.ROOT, \"waitApply: done %d packets; totalDelCount=%d; totBytesUsed=%d; took %.2f msec\",\n                                       packetCount,\n                                       totalDelCount,\n                                       bytesUsed.get(),\n                                       (System.nanoTime() - startNS) / 1000000.));\n    }\n  }\n\n","sourceOld":"  private void waitApply(Set<FrozenBufferedUpdates> waitFor) throws IOException {\n\n    long startNS = System.nanoTime();\n\n    int packetCount = waitFor.size();\n\n    if (waitFor.isEmpty()) {\n      if (infoStream.isEnabled(\"BD\")) {\n        infoStream.message(\"BD\", \"waitApply: no deletes to apply\");\n      }\n      return;\n    }\n\n    if (infoStream.isEnabled(\"BD\")) {\n      infoStream.message(\"BD\", \"waitApply: \" + waitFor.size() + \" packets: \" + waitFor);\n    }\n\n    long totalDelCount = 0;\n    for (FrozenBufferedUpdates packet : waitFor) {\n      // Frozen packets are now resolved, concurrently, by the indexing threads that\n      // create them, by adding a DocumentsWriter.ResolveUpdatesEvent to the events queue,\n      // but if we get here and the packet is not yet resolved, we resolve it now ourselves:\n      packet.apply(writer);\n      totalDelCount += packet.totalDelCount;\n    }\n\n    if (infoStream.isEnabled(\"BD\")) {\n      infoStream.message(\"BD\",\n                         String.format(Locale.ROOT, \"waitApply: done %d packets; totalDelCount=%d; totBytesUsed=%d; took %.2f msec\",\n                                       packetCount,\n                                       totalDelCount,\n                                       bytesUsed.get(),\n                                       (System.nanoTime() - startNS) / 1000000.));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"86a2e8a56b368d37ef3ba7180541fa317d6fd6c7":["28288370235ed02234a64753cdbf0c6ec096304a"],"f4363cd33f6eff7fb4753574a441e2d18c1022a4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f4363cd33f6eff7fb4753574a441e2d18c1022a4"],"28288370235ed02234a64753cdbf0c6ec096304a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f4363cd33f6eff7fb4753574a441e2d18c1022a4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["86a2e8a56b368d37ef3ba7180541fa317d6fd6c7"]},"commit2Childs":{"86a2e8a56b368d37ef3ba7180541fa317d6fd6c7":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f4363cd33f6eff7fb4753574a441e2d18c1022a4":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f4363cd33f6eff7fb4753574a441e2d18c1022a4","b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":[],"28288370235ed02234a64753cdbf0c6ec096304a":["86a2e8a56b368d37ef3ba7180541fa317d6fd6c7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}