{"path":"lucene/core/src/test/org/apache/lucene/search/TestMatchesIterator#testMinimalSeekingWithWildcards().mjava","commits":[{"id":"ed92e59fbbda9c37864901408389996d7ac5f97f","date":1565173175,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMatchesIterator#testMinimalSeekingWithWildcards().mjava","pathOld":"/dev/null","sourceNew":"  public void testMinimalSeekingWithWildcards() throws IOException {\n    SeekCountingLeafReader reader = new SeekCountingLeafReader(getOnlyLeafReader(this.reader));\n    this.searcher = new IndexSearcher(reader);\n    Query query = new PrefixQuery(new Term(FIELD_WITH_OFFSETS, \"w\"));\n    Weight w = searcher.createWeight(query.rewrite(reader), ScoreMode.COMPLETE, 1);\n\n    // docs 0-3 match several different terms here, but we only seek to the first term and\n    // then short-cut return; other terms are ignored until we try and iterate over matches\n    int[] expectedSeeks = new int[]{ 1, 1, 1, 1, 6, 6 };\n    int i = 0;\n    for (LeafReaderContext ctx : reader.leaves()) {\n      for (int doc = 0; doc < ctx.reader().maxDoc(); doc++) {\n        reader.seeks = 0;\n        w.matches(ctx, doc);\n        assertEquals(\"Unexpected seek count on doc \" + doc, expectedSeeks[i], reader.seeks);\n        i++;\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ed92e59fbbda9c37864901408389996d7ac5f97f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ed92e59fbbda9c37864901408389996d7ac5f97f"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ed92e59fbbda9c37864901408389996d7ac5f97f"],"ed92e59fbbda9c37864901408389996d7ac5f97f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}