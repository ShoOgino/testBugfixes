{"path":"lucene/src/test/org/apache/lucene/analysis/TestToken#testClone().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":2,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/analysis/TestToken#testClone().mjava","pathOld":"backwards/src/test/org/apache/lucene/analysis/TestToken#testClone().mjava","sourceNew":"  public void testClone() throws Exception {\n    Token t = new Token(0, 5);\n    char[] content = \"hello\".toCharArray();\n    t.setTermBuffer(content, 0, 5);\n    char[] buf = t.termBuffer();\n    Token copy = (Token) TestSimpleAttributeImpls.assertCloneIsEqual(t);\n    assertEquals(t.term(), copy.term());\n    assertNotSame(buf, copy.termBuffer());\n\n    Payload pl = new Payload(new byte[]{1,2,3,4});\n    t.setPayload(pl);\n    copy = (Token) TestSimpleAttributeImpls.assertCloneIsEqual(t);\n    assertEquals(pl, copy.getPayload());\n    assertNotSame(pl, copy.getPayload());\n  }\n\n","sourceOld":"  public void testClone() throws Exception {\n    Token t = new Token(0, 5);\n    char[] content = \"hello\".toCharArray();\n    t.setTermBuffer(content, 0, 5);\n    char[] buf = t.termBuffer();\n    Token copy = (Token) TestSimpleAttributeImpls.assertCloneIsEqual(t);\n    assertEquals(t.term(), copy.term());\n    assertNotSame(buf, copy.termBuffer());\n\n    Payload pl = new Payload(new byte[]{1,2,3,4});\n    t.setPayload(pl);\n    copy = (Token) TestSimpleAttributeImpls.assertCloneIsEqual(t);\n    assertEquals(pl, copy.getPayload());\n    assertNotSame(pl, copy.getPayload());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c3ba5366b7a7f11839e9c824b23007f048d002f6","date":1275996475,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/analysis/TestToken#testClone().mjava","pathOld":"lucene/src/test/org/apache/lucene/analysis/TestToken#testClone().mjava","sourceNew":"  public void testClone() throws Exception {\n    Token t = new Token(0, 5);\n    char[] content = \"hello\".toCharArray();\n    t.copyBuffer(content, 0, 5);\n    char[] buf = t.buffer();\n    Token copy = (Token) TestSimpleAttributeImpls.assertCloneIsEqual(t);\n    assertEquals(t.toString(), copy.toString());\n    assertNotSame(buf, copy.buffer());\n\n    Payload pl = new Payload(new byte[]{1,2,3,4});\n    t.setPayload(pl);\n    copy = (Token) TestSimpleAttributeImpls.assertCloneIsEqual(t);\n    assertEquals(pl, copy.getPayload());\n    assertNotSame(pl, copy.getPayload());\n  }\n\n","sourceOld":"  public void testClone() throws Exception {\n    Token t = new Token(0, 5);\n    char[] content = \"hello\".toCharArray();\n    t.setTermBuffer(content, 0, 5);\n    char[] buf = t.termBuffer();\n    Token copy = (Token) TestSimpleAttributeImpls.assertCloneIsEqual(t);\n    assertEquals(t.term(), copy.term());\n    assertNotSame(buf, copy.termBuffer());\n\n    Payload pl = new Payload(new byte[]{1,2,3,4});\n    t.setPayload(pl);\n    copy = (Token) TestSimpleAttributeImpls.assertCloneIsEqual(t);\n    assertEquals(pl, copy.getPayload());\n    assertNotSame(pl, copy.getPayload());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e8cc373c801e54cec75daf9f52792cb4b17f536","date":1291116159,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/analysis/TestToken#testClone().mjava","pathOld":"lucene/src/test/org/apache/lucene/analysis/TestToken#testClone().mjava","sourceNew":"  public void testClone() throws Exception {\n    Token t = new Token(0, 5);\n    char[] content = \"hello\".toCharArray();\n    t.copyBuffer(content, 0, 5);\n    char[] buf = t.buffer();\n    Token copy = assertCloneIsEqual(t);\n    assertEquals(t.toString(), copy.toString());\n    assertNotSame(buf, copy.buffer());\n\n    Payload pl = new Payload(new byte[]{1,2,3,4});\n    t.setPayload(pl);\n    copy = assertCloneIsEqual(t);\n    assertEquals(pl, copy.getPayload());\n    assertNotSame(pl, copy.getPayload());\n  }\n\n","sourceOld":"  public void testClone() throws Exception {\n    Token t = new Token(0, 5);\n    char[] content = \"hello\".toCharArray();\n    t.copyBuffer(content, 0, 5);\n    char[] buf = t.buffer();\n    Token copy = (Token) TestSimpleAttributeImpls.assertCloneIsEqual(t);\n    assertEquals(t.toString(), copy.toString());\n    assertNotSame(buf, copy.buffer());\n\n    Payload pl = new Payload(new byte[]{1,2,3,4});\n    t.setPayload(pl);\n    copy = (Token) TestSimpleAttributeImpls.assertCloneIsEqual(t);\n    assertEquals(pl, copy.getPayload());\n    assertNotSame(pl, copy.getPayload());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/analysis/TestToken#testClone().mjava","pathOld":"lucene/src/test/org/apache/lucene/analysis/TestToken#testClone().mjava","sourceNew":"  public void testClone() throws Exception {\n    Token t = new Token(0, 5);\n    char[] content = \"hello\".toCharArray();\n    t.copyBuffer(content, 0, 5);\n    char[] buf = t.buffer();\n    Token copy = assertCloneIsEqual(t);\n    assertEquals(t.toString(), copy.toString());\n    assertNotSame(buf, copy.buffer());\n\n    Payload pl = new Payload(new byte[]{1,2,3,4});\n    t.setPayload(pl);\n    copy = assertCloneIsEqual(t);\n    assertEquals(pl, copy.getPayload());\n    assertNotSame(pl, copy.getPayload());\n  }\n\n","sourceOld":"  public void testClone() throws Exception {\n    Token t = new Token(0, 5);\n    char[] content = \"hello\".toCharArray();\n    t.copyBuffer(content, 0, 5);\n    char[] buf = t.buffer();\n    Token copy = (Token) TestSimpleAttributeImpls.assertCloneIsEqual(t);\n    assertEquals(t.toString(), copy.toString());\n    assertNotSame(buf, copy.buffer());\n\n    Payload pl = new Payload(new byte[]{1,2,3,4});\n    t.setPayload(pl);\n    copy = (Token) TestSimpleAttributeImpls.assertCloneIsEqual(t);\n    assertEquals(pl, copy.getPayload());\n    assertNotSame(pl, copy.getPayload());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/analysis/TestToken#testClone().mjava","pathOld":"lucene/src/test/org/apache/lucene/analysis/TestToken#testClone().mjava","sourceNew":"  public void testClone() throws Exception {\n    Token t = new Token(0, 5);\n    char[] content = \"hello\".toCharArray();\n    t.copyBuffer(content, 0, 5);\n    char[] buf = t.buffer();\n    Token copy = assertCloneIsEqual(t);\n    assertEquals(t.toString(), copy.toString());\n    assertNotSame(buf, copy.buffer());\n\n    Payload pl = new Payload(new byte[]{1,2,3,4});\n    t.setPayload(pl);\n    copy = assertCloneIsEqual(t);\n    assertEquals(pl, copy.getPayload());\n    assertNotSame(pl, copy.getPayload());\n  }\n\n","sourceOld":"  public void testClone() throws Exception {\n    Token t = new Token(0, 5);\n    char[] content = \"hello\".toCharArray();\n    t.copyBuffer(content, 0, 5);\n    char[] buf = t.buffer();\n    Token copy = (Token) TestSimpleAttributeImpls.assertCloneIsEqual(t);\n    assertEquals(t.toString(), copy.toString());\n    assertNotSame(buf, copy.buffer());\n\n    Payload pl = new Payload(new byte[]{1,2,3,4});\n    t.setPayload(pl);\n    copy = (Token) TestSimpleAttributeImpls.assertCloneIsEqual(t);\n    assertEquals(pl, copy.getPayload());\n    assertNotSame(pl, copy.getPayload());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/analysis/TestToken#testClone().mjava","pathOld":"lucene/src/test/org/apache/lucene/analysis/TestToken#testClone().mjava","sourceNew":"  public void testClone() throws Exception {\n    Token t = new Token(0, 5);\n    char[] content = \"hello\".toCharArray();\n    t.copyBuffer(content, 0, 5);\n    char[] buf = t.buffer();\n    Token copy = assertCloneIsEqual(t);\n    assertEquals(t.toString(), copy.toString());\n    assertNotSame(buf, copy.buffer());\n\n    Payload pl = new Payload(new byte[]{1,2,3,4});\n    t.setPayload(pl);\n    copy = assertCloneIsEqual(t);\n    assertEquals(pl, copy.getPayload());\n    assertNotSame(pl, copy.getPayload());\n  }\n\n","sourceOld":"  public void testClone() throws Exception {\n    Token t = new Token(0, 5);\n    char[] content = \"hello\".toCharArray();\n    t.copyBuffer(content, 0, 5);\n    char[] buf = t.buffer();\n    Token copy = assertCloneIsEqual(t);\n    assertEquals(t.toString(), copy.toString());\n    assertNotSame(buf, copy.buffer());\n\n    Payload pl = new Payload(new byte[]{1,2,3,4});\n    t.setPayload(pl);\n    copy = assertCloneIsEqual(t);\n    assertEquals(pl, copy.getPayload());\n    assertNotSame(pl, copy.getPayload());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c3ba5366b7a7f11839e9c824b23007f048d002f6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["4e8cc373c801e54cec75daf9f52792cb4b17f536"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["c3ba5366b7a7f11839e9c824b23007f048d002f6","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"3bb13258feba31ab676502787ab2e1779f129b7a":["c3ba5366b7a7f11839e9c824b23007f048d002f6","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["c3ba5366b7a7f11839e9c824b23007f048d002f6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"c3ba5366b7a7f11839e9c824b23007f048d002f6":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"3bb13258feba31ab676502787ab2e1779f129b7a":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["c3ba5366b7a7f11839e9c824b23007f048d002f6"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}