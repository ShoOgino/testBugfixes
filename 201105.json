{"path":"lucene/core/src/java/org/apache/lucene/search/DocValuesFieldExistsQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","commits":[{"id":"9fc47cb7b4346802411bb432f501ed0673d7119e","date":1512640179,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DocValuesFieldExistsQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/DocValuesFieldExistsQuery#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n    return new ConstantScoreWeight(this, boost) {\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        FieldInfos fieldInfos = context.reader().getFieldInfos();\n        FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n        if (fieldInfo == null) {\n          return null;\n        }\n        DocValuesType dvType = fieldInfo.getDocValuesType();\n        LeafReader reader = context.reader();\n        DocIdSetIterator iterator;\n        switch(dvType) {\n        case NONE:\n          return null;\n        case NUMERIC:\n          iterator = reader.getNumericDocValues(field);\n          break;\n        case BINARY:\n          iterator = reader.getBinaryDocValues(field);\n          break;\n        case SORTED:\n          iterator = reader.getSortedDocValues(field);\n          break;\n        case SORTED_NUMERIC:\n          iterator = reader.getSortedNumericDocValues(field);\n          break;\n        case SORTED_SET:\n          iterator = reader.getSortedSetDocValues(field);\n          break;\n        default:\n          throw new AssertionError();\n        }\n\n        return new ConstantScoreScorer(this, score(), iterator);\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return DocValues.isCacheable(ctx, field);\n      }\n\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    return new ConstantScoreWeight(this, boost) {\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        FieldInfos fieldInfos = context.reader().getFieldInfos();\n        FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n        if (fieldInfo == null) {\n          return null;\n        }\n        DocValuesType dvType = fieldInfo.getDocValuesType();\n        LeafReader reader = context.reader();\n        DocIdSetIterator iterator;\n        switch(dvType) {\n        case NONE:\n          return null;\n        case NUMERIC:\n          iterator = reader.getNumericDocValues(field);\n          break;\n        case BINARY:\n          iterator = reader.getBinaryDocValues(field);\n          break;\n        case SORTED:\n          iterator = reader.getSortedDocValues(field);\n          break;\n        case SORTED_NUMERIC:\n          iterator = reader.getSortedNumericDocValues(field);\n          break;\n        case SORTED_SET:\n          iterator = reader.getSortedSetDocValues(field);\n          break;\n        default:\n          throw new AssertionError();\n        }\n\n        return new ConstantScoreScorer(this, score(), iterator);\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return DocValues.isCacheable(ctx, field);\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"417142ff08fda9cf0b72d5133e63097a166c6458","date":1512729693,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DocValuesFieldExistsQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/DocValuesFieldExistsQuery#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n    return new ConstantScoreWeight(this, boost) {\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        FieldInfos fieldInfos = context.reader().getFieldInfos();\n        FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n        if (fieldInfo == null) {\n          return null;\n        }\n        DocValuesType dvType = fieldInfo.getDocValuesType();\n        LeafReader reader = context.reader();\n        DocIdSetIterator iterator;\n        switch(dvType) {\n        case NONE:\n          return null;\n        case NUMERIC:\n          iterator = reader.getNumericDocValues(field);\n          break;\n        case BINARY:\n          iterator = reader.getBinaryDocValues(field);\n          break;\n        case SORTED:\n          iterator = reader.getSortedDocValues(field);\n          break;\n        case SORTED_NUMERIC:\n          iterator = reader.getSortedNumericDocValues(field);\n          break;\n        case SORTED_SET:\n          iterator = reader.getSortedSetDocValues(field);\n          break;\n        default:\n          throw new AssertionError();\n        }\n\n        return new ConstantScoreScorer(this, score(), iterator);\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return DocValues.isCacheable(ctx, field);\n      }\n\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    return new ConstantScoreWeight(this, boost) {\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        FieldInfos fieldInfos = context.reader().getFieldInfos();\n        FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n        if (fieldInfo == null) {\n          return null;\n        }\n        DocValuesType dvType = fieldInfo.getDocValuesType();\n        LeafReader reader = context.reader();\n        DocIdSetIterator iterator;\n        switch(dvType) {\n        case NONE:\n          return null;\n        case NUMERIC:\n          iterator = reader.getNumericDocValues(field);\n          break;\n        case BINARY:\n          iterator = reader.getBinaryDocValues(field);\n          break;\n        case SORTED:\n          iterator = reader.getSortedDocValues(field);\n          break;\n        case SORTED_NUMERIC:\n          iterator = reader.getSortedNumericDocValues(field);\n          break;\n        case SORTED_SET:\n          iterator = reader.getSortedSetDocValues(field);\n          break;\n        default:\n          throw new AssertionError();\n        }\n\n        return new ConstantScoreScorer(this, score(), iterator);\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return DocValues.isCacheable(ctx, field);\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5ee0394b8176abd7c90a4be8c05465be1879db79","date":1522842314,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DocValuesFieldExistsQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/DocValuesFieldExistsQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) {\n    return new ConstantScoreWeight(this, boost) {\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        DocIdSetIterator iterator = getDocValuesDocIdSetIterator(field, context.reader());\n        if (iterator == null) {\n          return null;\n        }\n        return new ConstantScoreScorer(this, score(), iterator);\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return DocValues.isCacheable(ctx, field);\n      }\n\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n    return new ConstantScoreWeight(this, boost) {\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        FieldInfos fieldInfos = context.reader().getFieldInfos();\n        FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n        if (fieldInfo == null) {\n          return null;\n        }\n        DocValuesType dvType = fieldInfo.getDocValuesType();\n        LeafReader reader = context.reader();\n        DocIdSetIterator iterator;\n        switch(dvType) {\n        case NONE:\n          return null;\n        case NUMERIC:\n          iterator = reader.getNumericDocValues(field);\n          break;\n        case BINARY:\n          iterator = reader.getBinaryDocValues(field);\n          break;\n        case SORTED:\n          iterator = reader.getSortedDocValues(field);\n          break;\n        case SORTED_NUMERIC:\n          iterator = reader.getSortedNumericDocValues(field);\n          break;\n        case SORTED_SET:\n          iterator = reader.getSortedSetDocValues(field);\n          break;\n        default:\n          throw new AssertionError();\n        }\n\n        return new ConstantScoreScorer(this, score(), iterator);\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return DocValues.isCacheable(ctx, field);\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9c226b0eeb8b028f572020f459851a663a2c064e","date":1542377651,"type":3,"author":"Christophe Bismuth","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DocValuesFieldExistsQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/DocValuesFieldExistsQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) {\n    return new ConstantScoreWeight(this, boost) {\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        DocIdSetIterator iterator = getDocValuesDocIdSetIterator(field, context.reader());\n        if (iterator == null) {\n          return null;\n        }\n        return new ConstantScoreScorer(this, score(), scoreMode, iterator);\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return DocValues.isCacheable(ctx, field);\n      }\n\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) {\n    return new ConstantScoreWeight(this, boost) {\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        DocIdSetIterator iterator = getDocValuesDocIdSetIterator(field, context.reader());\n        if (iterator == null) {\n          return null;\n        }\n        return new ConstantScoreScorer(this, score(), iterator);\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return DocValues.isCacheable(ctx, field);\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5ee0394b8176abd7c90a4be8c05465be1879db79":["417142ff08fda9cf0b72d5133e63097a166c6458"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9fc47cb7b4346802411bb432f501ed0673d7119e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9c226b0eeb8b028f572020f459851a663a2c064e":["5ee0394b8176abd7c90a4be8c05465be1879db79"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9c226b0eeb8b028f572020f459851a663a2c064e"],"417142ff08fda9cf0b72d5133e63097a166c6458":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9fc47cb7b4346802411bb432f501ed0673d7119e"]},"commit2Childs":{"5ee0394b8176abd7c90a4be8c05465be1879db79":["9c226b0eeb8b028f572020f459851a663a2c064e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9fc47cb7b4346802411bb432f501ed0673d7119e","417142ff08fda9cf0b72d5133e63097a166c6458"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["417142ff08fda9cf0b72d5133e63097a166c6458"],"9c226b0eeb8b028f572020f459851a663a2c064e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"417142ff08fda9cf0b72d5133e63097a166c6458":["5ee0394b8176abd7c90a4be8c05465be1879db79"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}