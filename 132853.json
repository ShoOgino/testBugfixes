{"path":"sandbox/contributions/XML-Indexing-Demo/src/java/org/apache/lucenesandbox/xmlindexingdemo/SearchFiles#main(String[]).mjava","commits":[{"id":"8c7ebc820e10871ab86ee5e759583481ab526e45","date":1024671771,"type":0,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"sandbox/contributions/XML-Indexing-Demo/src/java/org/apache/lucenesandbox/xmlindexingdemo/SearchFiles#main(String[]).mjava","pathOld":"/dev/null","sourceNew":"  public static void main(String[] args) {\n    try {\n      Searcher searcher = new IndexSearcher(\"index\");\n      Analyzer analyzer = new StandardAnalyzer();\n\n      BufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n      while (true) {\n\tSystem.out.print(\"Query: \");\n\tString line = in.readLine();\n\n\tif (line.length() == -1)\n\t  break;\n\n\tQuery query = QueryParser.parse(line, \"name\", analyzer);\n\tSystem.out.println(\"Searching for: \" + query.toString(\"name\"));\n\n\tHits hits = searcher.search(query);\n\tSystem.out.println(hits.length() + \" total matching documents\");\n\n\tfinal int HITS_PER_PAGE = 10;\n\tfor (int start = 0; start < hits.length(); start += HITS_PER_PAGE)\n        {\n\t  int end = Math.min(hits.length(), start + HITS_PER_PAGE);\n\t  for (int i = start; i < end; i++)\n          {\n\t    Document doc = hits.doc(i);\n\t    String name = doc.get(\"name\");\n\t    System.out.println(name);\n            System.out.println(doc.get(\"profession\"));\n            System.out.println(doc.get(\"addressLine1\"));\n            System.out.println(doc.get(\"addressLine2\"));\n            System.out.print(doc.get(\"city\"));\n            System.out.print(\" \");\n            System.out.print(doc.get(\"state\"));\n            System.out.print(\" \");\n            System.out.print(doc.get(\"zip\"));\n            System.out.println(doc.get(\"country\"));\n\n\t  }\n\n\t  if (hits.length() > end) {\n\t    System.out.print(\"more (y/n) ? \");\n\t    line = in.readLine();\n\t    if (line.length() == 0 || line.charAt(0) == 'n')\n\t      break;\n\t  }\n\t}\n      }\n      searcher.close();\n\n    } catch (Exception e) {\n      System.out.println(\" caught a \" + e.getClass() +\n\t\t\t \"\\n with message: \" + e.getMessage());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f979ddd9eacc7a679a9f030774cc6ec819fa2558","date":1114819647,"type":4,"author":"Erik Hatcher","isMerge":false,"pathNew":"/dev/null","pathOld":"sandbox/contributions/XML-Indexing-Demo/src/java/org/apache/lucenesandbox/xmlindexingdemo/SearchFiles#main(String[]).mjava","sourceNew":null,"sourceOld":"  public static void main(String[] args) {\n    try {\n      Searcher searcher = new IndexSearcher(\"index\");\n      Analyzer analyzer = new StandardAnalyzer();\n\n      BufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n      while (true) {\n\tSystem.out.print(\"Query: \");\n\tString line = in.readLine();\n\n\tif (line.length() == -1)\n\t  break;\n\n\tQuery query = QueryParser.parse(line, \"name\", analyzer);\n\tSystem.out.println(\"Searching for: \" + query.toString(\"name\"));\n\n\tHits hits = searcher.search(query);\n\tSystem.out.println(hits.length() + \" total matching documents\");\n\n\tfinal int HITS_PER_PAGE = 10;\n\tfor (int start = 0; start < hits.length(); start += HITS_PER_PAGE)\n        {\n\t  int end = Math.min(hits.length(), start + HITS_PER_PAGE);\n\t  for (int i = start; i < end; i++)\n          {\n\t    Document doc = hits.doc(i);\n\t    String name = doc.get(\"name\");\n\t    System.out.println(name);\n            System.out.println(doc.get(\"profession\"));\n            System.out.println(doc.get(\"addressLine1\"));\n            System.out.println(doc.get(\"addressLine2\"));\n            System.out.print(doc.get(\"city\"));\n            System.out.print(\" \");\n            System.out.print(doc.get(\"state\"));\n            System.out.print(\" \");\n            System.out.print(doc.get(\"zip\"));\n            System.out.println(doc.get(\"country\"));\n\n\t  }\n\n\t  if (hits.length() > end) {\n\t    System.out.print(\"more (y/n) ? \");\n\t    line = in.readLine();\n\t    if (line.length() == 0 || line.charAt(0) == 'n')\n\t      break;\n\t  }\n\t}\n      }\n      searcher.close();\n\n    } catch (Exception e) {\n      System.out.println(\" caught a \" + e.getClass() +\n\t\t\t \"\\n with message: \" + e.getMessage());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8c7ebc820e10871ab86ee5e759583481ab526e45":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f979ddd9eacc7a679a9f030774cc6ec819fa2558"],"f979ddd9eacc7a679a9f030774cc6ec819fa2558":["8c7ebc820e10871ab86ee5e759583481ab526e45"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8c7ebc820e10871ab86ee5e759583481ab526e45"],"8c7ebc820e10871ab86ee5e759583481ab526e45":["f979ddd9eacc7a679a9f030774cc6ec819fa2558"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"f979ddd9eacc7a679a9f030774cc6ec819fa2558":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}