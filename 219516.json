{"path":"lucene/test-framework/src/java/org/apache/lucene/search/AssertingBulkScorer#score(LeafCollector,int,int).mjava","commits":[{"id":"e166cc9c5f45f78a8dd02332b5ac100221063fd8","date":1421678965,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/AssertingBulkScorer#score(LeafCollector,int,int).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public int score(LeafCollector collector, int min, final int max) throws IOException {\n    assert min >= this.max: \"Scoring backward: min=\" + min + \" while previous max was max=\" + this.max;\n    assert min < max : \"max must be greater than min, got min=\" + min + \", and max=\" + max;\n    this.max = max;\n    collector = new AssertingLeafCollector(random, collector, min, max);\n    final int next = in.score(collector, min, max);\n    assert next >= max;\n    if (max >= maxDoc || next >= maxDoc) {\n      assert next == DocIdSetIterator.NO_MORE_DOCS;\n      return DocIdSetIterator.NO_MORE_DOCS;\n    } else {\n      return RandomInts.randomIntBetween(random, max, next);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"251e6911800e3a02e1da3bfd4dc49a914aef9778","date":1423063783,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/AssertingBulkScorer#score(LeafCollector,int,int).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/AssertingBulkScorer#score(LeafCollector,int,int).mjava","sourceNew":"  @Override\n  public int score(LeafCollector collector, int min, final int max) throws IOException {\n    assert min >= this.max: \"Scoring backward: min=\" + min + \" while previous max was max=\" + this.max;\n    assert min <= max : \"max must be greater than min, got min=\" + min + \", and max=\" + max;\n    this.max = max;\n    collector = new AssertingLeafCollector(random, collector, min, max);\n    final int next = in.score(collector, min, max);\n    assert next >= max;\n    if (max >= maxDoc || next >= maxDoc) {\n      assert next == DocIdSetIterator.NO_MORE_DOCS;\n      return DocIdSetIterator.NO_MORE_DOCS;\n    } else {\n      return RandomInts.randomIntBetween(random, max, next);\n    }\n  }\n\n","sourceOld":"  @Override\n  public int score(LeafCollector collector, int min, final int max) throws IOException {\n    assert min >= this.max: \"Scoring backward: min=\" + min + \" while previous max was max=\" + this.max;\n    assert min < max : \"max must be greater than min, got min=\" + min + \", and max=\" + max;\n    this.max = max;\n    collector = new AssertingLeafCollector(random, collector, min, max);\n    final int next = in.score(collector, min, max);\n    assert next >= max;\n    if (max >= maxDoc || next >= maxDoc) {\n      assert next == DocIdSetIterator.NO_MORE_DOCS;\n      return DocIdSetIterator.NO_MORE_DOCS;\n    } else {\n      return RandomInts.randomIntBetween(random, max, next);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f4464508ee83288c8c4585b533f9faaa93aa314","date":1435240759,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/AssertingBulkScorer#score(LeafCollector,Bits,int,int).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/AssertingBulkScorer#score(LeafCollector,int,int).mjava","sourceNew":"  @Override\n  public int score(LeafCollector collector, Bits acceptDocs, int min, final int max) throws IOException {\n    assert min >= this.max: \"Scoring backward: min=\" + min + \" while previous max was max=\" + this.max;\n    assert min <= max : \"max must be greater than min, got min=\" + min + \", and max=\" + max;\n    this.max = max;\n    collector = new AssertingLeafCollector(random, collector, min, max);\n    final int next = in.score(collector, acceptDocs, min, max);\n    assert next >= max;\n    if (max >= maxDoc || next >= maxDoc) {\n      assert next == DocIdSetIterator.NO_MORE_DOCS;\n      return DocIdSetIterator.NO_MORE_DOCS;\n    } else {\n      return RandomInts.randomIntBetween(random, max, next);\n    }\n  }\n\n","sourceOld":"  @Override\n  public int score(LeafCollector collector, int min, final int max) throws IOException {\n    assert min >= this.max: \"Scoring backward: min=\" + min + \" while previous max was max=\" + this.max;\n    assert min <= max : \"max must be greater than min, got min=\" + min + \", and max=\" + max;\n    this.max = max;\n    collector = new AssertingLeafCollector(random, collector, min, max);\n    final int next = in.score(collector, min, max);\n    assert next >= max;\n    if (max >= maxDoc || next >= maxDoc) {\n      assert next == DocIdSetIterator.NO_MORE_DOCS;\n      return DocIdSetIterator.NO_MORE_DOCS;\n    } else {\n      return RandomInts.randomIntBetween(random, max, next);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"251e6911800e3a02e1da3bfd4dc49a914aef9778":["e166cc9c5f45f78a8dd02332b5ac100221063fd8"],"0f4464508ee83288c8c4585b533f9faaa93aa314":["251e6911800e3a02e1da3bfd4dc49a914aef9778"],"e166cc9c5f45f78a8dd02332b5ac100221063fd8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f4464508ee83288c8c4585b533f9faaa93aa314"]},"commit2Childs":{"251e6911800e3a02e1da3bfd4dc49a914aef9778":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"e166cc9c5f45f78a8dd02332b5ac100221063fd8":["251e6911800e3a02e1da3bfd4dc49a914aef9778"],"0f4464508ee83288c8c4585b533f9faaa93aa314":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e166cc9c5f45f78a8dd02332b5ac100221063fd8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}