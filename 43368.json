{"path":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#getTS2a().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#getTS2a().mjava","pathOld":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#getTS2a().mjava","sourceNew":"  // same token-stream as above, but the bigger token comes first this time\n  protected TokenStream getTS2a() {\n    // String s = \"Hi-Speed10 foo\";\n    return new TokenStream() {\n      Iterator<Token> iter;\n      List<Token> lst;\n      private final CharTermAttribute termAtt = addAttribute(CharTermAttribute.class);\n      private final PositionIncrementAttribute posIncrAtt = addAttribute(PositionIncrementAttribute.class);\n      private final OffsetAttribute offsetAtt = addAttribute(OffsetAttribute.class);\n      {\n        lst = new ArrayList<Token>();\n        Token t;\n        t = createToken(\"hispeed\", 0, 8);\n        t.setPositionIncrement(1);\n        lst.add(t);\n        t = createToken(\"hi\", 0, 2);\n        t.setPositionIncrement(0);\n        lst.add(t);\n        t = createToken(\"speed\", 3, 8);\n        t.setPositionIncrement(1);\n        lst.add(t);\n        t = createToken(\"10\", 8, 10);\n        t.setPositionIncrement(1);\n        lst.add(t);\n        t = createToken(\"foo\", 11, 14);\n        t.setPositionIncrement(1);\n        lst.add(t);\n        iter = lst.iterator();\n      }\n\n      @Override\n      public boolean incrementToken() throws IOException {\n        if(iter.hasNext()) {\n          Token token = iter.next();\n          clearAttributes();\n          termAtt.setEmpty().append(token);\n          posIncrAtt.setPositionIncrement(token.getPositionIncrement());\n          offsetAtt.setOffset(token.startOffset(), token.endOffset());\n          return true;\n        }\n        return false;\n      }\n\n      @Override\n      public void reset() throws IOException {\n        super.reset();\n        iter = lst.iterator();\n      }\n    };\n  }\n\n","sourceOld":"  // same token-stream as above, but the bigger token comes first this time\n  protected TokenStream getTS2a() {\n    // String s = \"Hi-Speed10 foo\";\n    return new TokenStream() {\n      Iterator<Token> iter;\n      List<Token> lst;\n      private final CharTermAttribute termAtt = addAttribute(CharTermAttribute.class);\n      private final PositionIncrementAttribute posIncrAtt = addAttribute(PositionIncrementAttribute.class);\n      private final OffsetAttribute offsetAtt = addAttribute(OffsetAttribute.class);\n      {\n        lst = new ArrayList<Token>();\n        Token t;\n        t = createToken(\"hispeed\", 0, 8);\n        t.setPositionIncrement(1);\n        lst.add(t);\n        t = createToken(\"hi\", 0, 2);\n        t.setPositionIncrement(0);\n        lst.add(t);\n        t = createToken(\"speed\", 3, 8);\n        t.setPositionIncrement(1);\n        lst.add(t);\n        t = createToken(\"10\", 8, 10);\n        t.setPositionIncrement(1);\n        lst.add(t);\n        t = createToken(\"foo\", 11, 14);\n        t.setPositionIncrement(1);\n        lst.add(t);\n        iter = lst.iterator();\n      }\n\n      @Override\n      public boolean incrementToken() throws IOException {\n        if(iter.hasNext()) {\n          Token token = iter.next();\n          clearAttributes();\n          termAtt.setEmpty().append(token);\n          posIncrAtt.setPositionIncrement(token.getPositionIncrement());\n          offsetAtt.setOffset(token.startOffset(), token.endOffset());\n          return true;\n        }\n        return false;\n      }\n\n      @Override\n      public void reset() throws IOException {\n        super.reset();\n        iter = lst.iterator();\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#getTS2a().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#getTS2a().mjava","sourceNew":"  // same token-stream as above, but the bigger token comes first this time\n  protected TokenStream getTS2a() {\n    // String s = \"Hi-Speed10 foo\";\n    return new TokenStream() {\n      Iterator<Token> iter;\n      List<Token> lst;\n      private final CharTermAttribute termAtt = addAttribute(CharTermAttribute.class);\n      private final PositionIncrementAttribute posIncrAtt = addAttribute(PositionIncrementAttribute.class);\n      private final OffsetAttribute offsetAtt = addAttribute(OffsetAttribute.class);\n      {\n        lst = new ArrayList<Token>();\n        Token t;\n        t = createToken(\"hispeed\", 0, 8);\n        t.setPositionIncrement(1);\n        lst.add(t);\n        t = createToken(\"hi\", 0, 2);\n        t.setPositionIncrement(0);\n        lst.add(t);\n        t = createToken(\"speed\", 3, 8);\n        t.setPositionIncrement(1);\n        lst.add(t);\n        t = createToken(\"10\", 8, 10);\n        t.setPositionIncrement(1);\n        lst.add(t);\n        t = createToken(\"foo\", 11, 14);\n        t.setPositionIncrement(1);\n        lst.add(t);\n        iter = lst.iterator();\n      }\n\n      @Override\n      public boolean incrementToken() {\n        if(iter.hasNext()) {\n          Token token = iter.next();\n          clearAttributes();\n          termAtt.setEmpty().append(token);\n          posIncrAtt.setPositionIncrement(token.getPositionIncrement());\n          offsetAtt.setOffset(token.startOffset(), token.endOffset());\n          return true;\n        }\n        return false;\n      }\n\n      @Override\n      public void reset() throws IOException {\n        super.reset();\n        iter = lst.iterator();\n      }\n    };\n  }\n\n","sourceOld":"  // same token-stream as above, but the bigger token comes first this time\n  protected TokenStream getTS2a() {\n    // String s = \"Hi-Speed10 foo\";\n    return new TokenStream() {\n      Iterator<Token> iter;\n      List<Token> lst;\n      private final CharTermAttribute termAtt = addAttribute(CharTermAttribute.class);\n      private final PositionIncrementAttribute posIncrAtt = addAttribute(PositionIncrementAttribute.class);\n      private final OffsetAttribute offsetAtt = addAttribute(OffsetAttribute.class);\n      {\n        lst = new ArrayList<Token>();\n        Token t;\n        t = createToken(\"hispeed\", 0, 8);\n        t.setPositionIncrement(1);\n        lst.add(t);\n        t = createToken(\"hi\", 0, 2);\n        t.setPositionIncrement(0);\n        lst.add(t);\n        t = createToken(\"speed\", 3, 8);\n        t.setPositionIncrement(1);\n        lst.add(t);\n        t = createToken(\"10\", 8, 10);\n        t.setPositionIncrement(1);\n        lst.add(t);\n        t = createToken(\"foo\", 11, 14);\n        t.setPositionIncrement(1);\n        lst.add(t);\n        iter = lst.iterator();\n      }\n\n      @Override\n      public boolean incrementToken() throws IOException {\n        if(iter.hasNext()) {\n          Token token = iter.next();\n          clearAttributes();\n          termAtt.setEmpty().append(token);\n          posIncrAtt.setPositionIncrement(token.getPositionIncrement());\n          offsetAtt.setOffset(token.startOffset(), token.endOffset());\n          return true;\n        }\n        return false;\n      }\n\n      @Override\n      public void reset() throws IOException {\n        super.reset();\n        iter = lst.iterator();\n      }\n    };\n  }\n\n","bugFix":["b4471b2ef75c0e11869f60b23cabe292b895c3ee"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#getTS2a().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#getTS2a().mjava","sourceNew":"  // same token-stream as above, but the bigger token comes first this time\n  protected TokenStream getTS2a() {\n    // String s = \"Hi-Speed10 foo\";\n    return new TokenStream() {\n      Iterator<Token> iter;\n      List<Token> lst;\n      private final CharTermAttribute termAtt = addAttribute(CharTermAttribute.class);\n      private final PositionIncrementAttribute posIncrAtt = addAttribute(PositionIncrementAttribute.class);\n      private final OffsetAttribute offsetAtt = addAttribute(OffsetAttribute.class);\n      {\n        lst = new ArrayList<Token>();\n        Token t;\n        t = createToken(\"hispeed\", 0, 8);\n        t.setPositionIncrement(1);\n        lst.add(t);\n        t = createToken(\"hi\", 0, 2);\n        t.setPositionIncrement(0);\n        lst.add(t);\n        t = createToken(\"speed\", 3, 8);\n        t.setPositionIncrement(1);\n        lst.add(t);\n        t = createToken(\"10\", 8, 10);\n        t.setPositionIncrement(1);\n        lst.add(t);\n        t = createToken(\"foo\", 11, 14);\n        t.setPositionIncrement(1);\n        lst.add(t);\n        iter = lst.iterator();\n      }\n\n      @Override\n      public boolean incrementToken() {\n        if(iter.hasNext()) {\n          Token token = iter.next();\n          clearAttributes();\n          termAtt.setEmpty().append(token);\n          posIncrAtt.setPositionIncrement(token.getPositionIncrement());\n          offsetAtt.setOffset(token.startOffset(), token.endOffset());\n          return true;\n        }\n        return false;\n      }\n\n      @Override\n      public void reset() throws IOException {\n        super.reset();\n        iter = lst.iterator();\n      }\n    };\n  }\n\n","sourceOld":"  // same token-stream as above, but the bigger token comes first this time\n  protected TokenStream getTS2a() {\n    // String s = \"Hi-Speed10 foo\";\n    return new TokenStream() {\n      Iterator<Token> iter;\n      List<Token> lst;\n      private final CharTermAttribute termAtt = addAttribute(CharTermAttribute.class);\n      private final PositionIncrementAttribute posIncrAtt = addAttribute(PositionIncrementAttribute.class);\n      private final OffsetAttribute offsetAtt = addAttribute(OffsetAttribute.class);\n      {\n        lst = new ArrayList<Token>();\n        Token t;\n        t = createToken(\"hispeed\", 0, 8);\n        t.setPositionIncrement(1);\n        lst.add(t);\n        t = createToken(\"hi\", 0, 2);\n        t.setPositionIncrement(0);\n        lst.add(t);\n        t = createToken(\"speed\", 3, 8);\n        t.setPositionIncrement(1);\n        lst.add(t);\n        t = createToken(\"10\", 8, 10);\n        t.setPositionIncrement(1);\n        lst.add(t);\n        t = createToken(\"foo\", 11, 14);\n        t.setPositionIncrement(1);\n        lst.add(t);\n        iter = lst.iterator();\n      }\n\n      @Override\n      public boolean incrementToken() throws IOException {\n        if(iter.hasNext()) {\n          Token token = iter.next();\n          clearAttributes();\n          termAtt.setEmpty().append(token);\n          posIncrAtt.setPositionIncrement(token.getPositionIncrement());\n          offsetAtt.setOffset(token.startOffset(), token.endOffset());\n          return true;\n        }\n        return false;\n      }\n\n      @Override\n      public void reset() throws IOException {\n        super.reset();\n        iter = lst.iterator();\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#getTS2a().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#getTS2a().mjava","sourceNew":"  // same token-stream as above, but the bigger token comes first this time\n  protected TokenStream getTS2a() {\n    // String s = \"Hi-Speed10 foo\";\n    return new TokenStream() {\n      Iterator<Token> iter;\n      List<Token> lst;\n      private final CharTermAttribute termAtt = addAttribute(CharTermAttribute.class);\n      private final PositionIncrementAttribute posIncrAtt = addAttribute(PositionIncrementAttribute.class);\n      private final OffsetAttribute offsetAtt = addAttribute(OffsetAttribute.class);\n      {\n        lst = new ArrayList<>();\n        Token t;\n        t = createToken(\"hispeed\", 0, 8);\n        t.setPositionIncrement(1);\n        lst.add(t);\n        t = createToken(\"hi\", 0, 2);\n        t.setPositionIncrement(0);\n        lst.add(t);\n        t = createToken(\"speed\", 3, 8);\n        t.setPositionIncrement(1);\n        lst.add(t);\n        t = createToken(\"10\", 8, 10);\n        t.setPositionIncrement(1);\n        lst.add(t);\n        t = createToken(\"foo\", 11, 14);\n        t.setPositionIncrement(1);\n        lst.add(t);\n        iter = lst.iterator();\n      }\n\n      @Override\n      public boolean incrementToken() {\n        if(iter.hasNext()) {\n          Token token = iter.next();\n          clearAttributes();\n          termAtt.setEmpty().append(token);\n          posIncrAtt.setPositionIncrement(token.getPositionIncrement());\n          offsetAtt.setOffset(token.startOffset(), token.endOffset());\n          return true;\n        }\n        return false;\n      }\n\n      @Override\n      public void reset() throws IOException {\n        super.reset();\n        iter = lst.iterator();\n      }\n    };\n  }\n\n","sourceOld":"  // same token-stream as above, but the bigger token comes first this time\n  protected TokenStream getTS2a() {\n    // String s = \"Hi-Speed10 foo\";\n    return new TokenStream() {\n      Iterator<Token> iter;\n      List<Token> lst;\n      private final CharTermAttribute termAtt = addAttribute(CharTermAttribute.class);\n      private final PositionIncrementAttribute posIncrAtt = addAttribute(PositionIncrementAttribute.class);\n      private final OffsetAttribute offsetAtt = addAttribute(OffsetAttribute.class);\n      {\n        lst = new ArrayList<Token>();\n        Token t;\n        t = createToken(\"hispeed\", 0, 8);\n        t.setPositionIncrement(1);\n        lst.add(t);\n        t = createToken(\"hi\", 0, 2);\n        t.setPositionIncrement(0);\n        lst.add(t);\n        t = createToken(\"speed\", 3, 8);\n        t.setPositionIncrement(1);\n        lst.add(t);\n        t = createToken(\"10\", 8, 10);\n        t.setPositionIncrement(1);\n        lst.add(t);\n        t = createToken(\"foo\", 11, 14);\n        t.setPositionIncrement(1);\n        lst.add(t);\n        iter = lst.iterator();\n      }\n\n      @Override\n      public boolean incrementToken() {\n        if(iter.hasNext()) {\n          Token token = iter.next();\n          clearAttributes();\n          termAtt.setEmpty().append(token);\n          posIncrAtt.setPositionIncrement(token.getPositionIncrement());\n          offsetAtt.setOffset(token.startOffset(), token.endOffset());\n          return true;\n        }\n        return false;\n      }\n\n      @Override\n      public void reset() throws IOException {\n        super.reset();\n        iter = lst.iterator();\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["b89678825b68eccaf09e6ab71675fc0b0af1e099","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["fe33227f6805edab2036cbb80645cc4e2d1fa424","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}