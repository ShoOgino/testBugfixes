{"path":"lucene/queries/src/java/org/apache/lucene/queries/intervals/MultiTermIntervalsSource#matches(String,LeafReaderContext,int).mjava","commits":[{"id":"97ee2282ff806e9bc9d705f389cf40451ab81c3e","date":1561721333,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/intervals/MultiTermIntervalsSource#matches(String,LeafReaderContext,int).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/search/intervals/MultiTermIntervalsSource#matches(String,LeafReaderContext,int).mjava","sourceNew":"  @Override\n  public MatchesIterator matches(String field, LeafReaderContext ctx, int doc) throws IOException {\n    Terms terms = ctx.reader().terms(field);\n    if (terms == null) {\n      return null;\n    }\n    List<MatchesIterator> subMatches = new ArrayList<>();\n    TermsEnum te = automaton.getTermsEnum(terms);\n    BytesRef term;\n    int count = 0;\n    while ((term = te.next()) != null) {\n      MatchesIterator mi = TermIntervalsSource.matches(te, doc);\n      if (mi != null) {\n        subMatches.add(mi);\n        if (count++ > maxExpansions) {\n          throw new IllegalStateException(\"Automaton \" + term + \" expanded to too many terms (limit \" + maxExpansions + \")\");\n        }\n      }\n    }\n    return MatchesUtils.disjunction(subMatches);\n  }\n\n","sourceOld":"  @Override\n  public MatchesIterator matches(String field, LeafReaderContext ctx, int doc) throws IOException {\n    Terms terms = ctx.reader().terms(field);\n    if (terms == null) {\n      return null;\n    }\n    List<MatchesIterator> subMatches = new ArrayList<>();\n    TermsEnum te = automaton.getTermsEnum(terms);\n    BytesRef term;\n    int count = 0;\n    while ((term = te.next()) != null) {\n      MatchesIterator mi = TermIntervalsSource.matches(te, doc);\n      if (mi != null) {\n        subMatches.add(mi);\n        if (count++ > maxExpansions) {\n          throw new IllegalStateException(\"Automaton \" + term + \" expanded to too many terms (limit \" + maxExpansions + \")\");\n        }\n      }\n    }\n    return MatchesUtils.disjunction(subMatches);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"68a600ba48cf2abfb5af305ebbf96bb6e2d820ea","date":1574601528,"type":3,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/intervals/MultiTermIntervalsSource#matches(String,LeafReaderContext,int).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/intervals/MultiTermIntervalsSource#matches(String,LeafReaderContext,int).mjava","sourceNew":"  @Override\n  public MatchesIterator matches(String field, LeafReaderContext ctx, int doc) throws IOException {\n    Terms terms = ctx.reader().terms(field);\n    if (terms == null) {\n      return null;\n    }\n    List<MatchesIterator> subMatches = new ArrayList<>();\n    TermsEnum te = automaton.getTermsEnum(terms);\n    BytesRef term;\n    int count = 0;\n    while ((term = te.next()) != null) {\n      MatchesIterator mi = TermIntervalsSource.matches(te, doc, field);\n      if (mi != null) {\n        subMatches.add(mi);\n        if (count++ > maxExpansions) {\n          throw new IllegalStateException(\"Automaton \" + term + \" expanded to too many terms (limit \" + maxExpansions + \")\");\n        }\n      }\n    }\n    return MatchesUtils.disjunction(subMatches);\n  }\n\n","sourceOld":"  @Override\n  public MatchesIterator matches(String field, LeafReaderContext ctx, int doc) throws IOException {\n    Terms terms = ctx.reader().terms(field);\n    if (terms == null) {\n      return null;\n    }\n    List<MatchesIterator> subMatches = new ArrayList<>();\n    TermsEnum te = automaton.getTermsEnum(terms);\n    BytesRef term;\n    int count = 0;\n    while ((term = te.next()) != null) {\n      MatchesIterator mi = TermIntervalsSource.matches(te, doc);\n      if (mi != null) {\n        subMatches.add(mi);\n        if (count++ > maxExpansions) {\n          throw new IllegalStateException(\"Automaton \" + term + \" expanded to too many terms (limit \" + maxExpansions + \")\");\n        }\n      }\n    }\n    return MatchesUtils.disjunction(subMatches);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30c78dc09f599cd42c186ddd94084249c8db1ede","date":1581000287,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/intervals/MultiTermIntervalsSource#matches(String,LeafReaderContext,int).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/intervals/MultiTermIntervalsSource#matches(String,LeafReaderContext,int).mjava","sourceNew":"  @Override\n  public IntervalMatchesIterator matches(String field, LeafReaderContext ctx, int doc) throws IOException {\n    Terms terms = ctx.reader().terms(field);\n    if (terms == null) {\n      return null;\n    }\n    List<MatchesIterator> subMatches = new ArrayList<>();\n    TermsEnum te = automaton.getTermsEnum(terms);\n    BytesRef term;\n    int count = 0;\n    while ((term = te.next()) != null) {\n      MatchesIterator mi = TermIntervalsSource.matches(te, doc, field);\n      if (mi != null) {\n        subMatches.add(mi);\n        if (count++ > maxExpansions) {\n          throw new IllegalStateException(\"Automaton \" + term + \" expanded to too many terms (limit \" + maxExpansions + \")\");\n        }\n      }\n    }\n    MatchesIterator mi = MatchesUtils.disjunction(subMatches);\n    if (mi == null) {\n      return null;\n    }\n    return new IntervalMatchesIterator() {\n      @Override\n      public int gaps() {\n        return 0;\n      }\n\n      @Override\n      public int width() {\n        return 1;\n      }\n\n      @Override\n      public boolean next() throws IOException {\n        return mi.next();\n      }\n\n      @Override\n      public int startPosition() {\n        return mi.startPosition();\n      }\n\n      @Override\n      public int endPosition() {\n        return mi.endPosition();\n      }\n\n      @Override\n      public int startOffset() throws IOException {\n        return mi.startOffset();\n      }\n\n      @Override\n      public int endOffset() throws IOException {\n        return mi.endOffset();\n      }\n\n      @Override\n      public MatchesIterator getSubMatches() throws IOException {\n        return mi.getSubMatches();\n      }\n\n      @Override\n      public Query getQuery() {\n        return mi.getQuery();\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public MatchesIterator matches(String field, LeafReaderContext ctx, int doc) throws IOException {\n    Terms terms = ctx.reader().terms(field);\n    if (terms == null) {\n      return null;\n    }\n    List<MatchesIterator> subMatches = new ArrayList<>();\n    TermsEnum te = automaton.getTermsEnum(terms);\n    BytesRef term;\n    int count = 0;\n    while ((term = te.next()) != null) {\n      MatchesIterator mi = TermIntervalsSource.matches(te, doc, field);\n      if (mi != null) {\n        subMatches.add(mi);\n        if (count++ > maxExpansions) {\n          throw new IllegalStateException(\"Automaton \" + term + \" expanded to too many terms (limit \" + maxExpansions + \")\");\n        }\n      }\n    }\n    return MatchesUtils.disjunction(subMatches);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"97ee2282ff806e9bc9d705f389cf40451ab81c3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"30c78dc09f599cd42c186ddd94084249c8db1ede":["68a600ba48cf2abfb5af305ebbf96bb6e2d820ea"],"68a600ba48cf2abfb5af305ebbf96bb6e2d820ea":["97ee2282ff806e9bc9d705f389cf40451ab81c3e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["30c78dc09f599cd42c186ddd94084249c8db1ede"]},"commit2Childs":{"97ee2282ff806e9bc9d705f389cf40451ab81c3e":["68a600ba48cf2abfb5af305ebbf96bb6e2d820ea"],"30c78dc09f599cd42c186ddd94084249c8db1ede":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"68a600ba48cf2abfb5af305ebbf96bb6e2d820ea":["30c78dc09f599cd42c186ddd94084249c8db1ede"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["97ee2282ff806e9bc9d705f389cf40451ab81c3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}