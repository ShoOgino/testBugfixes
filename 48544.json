{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/DensityEvaluator#doWork(Object,Object).mjava","commits":[{"id":"667b4a609c6416604e0f47843deceb73807cee4e","date":1513957302,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/DensityEvaluator#doWork(Object,Object).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Object doWork(Object first, Object second) throws IOException{\n\n    if (!(first instanceof MultivariateRealDistribution)) {\n      throw new IOException(String.format(Locale.ROOT, \"Invalid expression %s - found type %s for the first value, expecting a MultiVariateRealDistribution for density\", toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n    if (!(second instanceof List)) {\n      throw new IOException(String.format(Locale.ROOT, \"Invalid expression %s - found type %s for the second value, expecting a numeric array.\", toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n\n    MultivariateRealDistribution multivariateRealDistribution = (MultivariateRealDistribution) first;\n    List<Number> nums = (List<Number>) second;\n\n    double[] vec = new double[nums.size()];\n\n    for(int i=0; i<vec.length; i++) {\n      vec[i] = nums.get(i).doubleValue();\n    }\n\n    return multivariateRealDistribution.density(vec);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885","date":1591579911,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/DensityEvaluator#doWork(Object,Object).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/DensityEvaluator#doWork(Object,Object).mjava","sourceNew":"  @Override\n  public Object doWork(Object first, Object second) throws IOException{\n\n    if (!(first instanceof MultivariateRealDistribution)) {\n      throw new IOException(String.format(Locale.ROOT, \"Invalid expression %s - found type %s for the first value, expecting a MultiVariateRealDistribution for density\", toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n    if (!(second instanceof List)) {\n      throw new IOException(String.format(Locale.ROOT, \"Invalid expression %s - found type %s for the second value, expecting a numeric array.\", toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n\n    MultivariateRealDistribution multivariateRealDistribution = (MultivariateRealDistribution) first;\n    @SuppressWarnings({\"unchecked\"})\n    List<Number> nums = (List<Number>) second;\n\n    double[] vec = new double[nums.size()];\n\n    for(int i=0; i<vec.length; i++) {\n      vec[i] = nums.get(i).doubleValue();\n    }\n\n    return multivariateRealDistribution.density(vec);\n  }\n\n","sourceOld":"  @Override\n  public Object doWork(Object first, Object second) throws IOException{\n\n    if (!(first instanceof MultivariateRealDistribution)) {\n      throw new IOException(String.format(Locale.ROOT, \"Invalid expression %s - found type %s for the first value, expecting a MultiVariateRealDistribution for density\", toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n    if (!(second instanceof List)) {\n      throw new IOException(String.format(Locale.ROOT, \"Invalid expression %s - found type %s for the second value, expecting a numeric array.\", toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n\n    MultivariateRealDistribution multivariateRealDistribution = (MultivariateRealDistribution) first;\n    List<Number> nums = (List<Number>) second;\n\n    double[] vec = new double[nums.size()];\n\n    for(int i=0; i<vec.length; i++) {\n      vec[i] = nums.get(i).doubleValue();\n    }\n\n    return multivariateRealDistribution.density(vec);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885":["667b4a609c6416604e0f47843deceb73807cee4e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"667b4a609c6416604e0f47843deceb73807cee4e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885"]},"commit2Childs":{"df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["667b4a609c6416604e0f47843deceb73807cee4e"],"667b4a609c6416604e0f47843deceb73807cee4e":["df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}