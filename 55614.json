{"path":"solr/core/src/test/org/apache/solr/cloud/TestRebalanceLeaders#checkReplicasInactive(List[JettySolrRunner]).mjava","commits":[{"id":"73fd358e8ec697393d56617f4d9cedaca74dca14","date":1547954439,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestRebalanceLeaders#checkReplicasInactive(List[JettySolrRunner]).mjava","pathOld":"/dev/null","sourceNew":"  // Since we have to restart jettys, we don't want to try rebalancing etc. until we're sure all jettys that should\n  // be up are up and all replicas are active.\n  private void checkReplicasInactive(List<JettySolrRunner> downJettys) throws KeeperException, InterruptedException {\n    TimeOut timeout = new TimeOut(timeoutMs, TimeUnit.MILLISECONDS, TimeSource.NANO_TIME);\n    DocCollection docCollection = null;\n    Set<String> liveNodes = null;\n\n    Set<String> downJettyNodes = new TreeSet<>();\n    for (JettySolrRunner jetty : downJettys) {\n      downJettyNodes.add(jetty.getBaseUrl().getHost() + \":\" + jetty.getBaseUrl().getPort() + \"_solr\");\n    }\n    while (timeout.hasTimedOut() == false) {\n      forceUpdateCollectionStatus();\n      docCollection = cluster.getSolrClient().getZkStateReader().getClusterState().getCollection(COLLECTION_NAME);\n      liveNodes = cluster.getSolrClient().getZkStateReader().getClusterState().getLiveNodes();\n      boolean expectedInactive = true;\n\n      for (Slice slice : docCollection.getSlices()) {\n        for (Replica rep : slice.getReplicas()) {\n          if (downJettyNodes.contains(rep.getNodeName()) == false) {\n            continue; // We are on a live node\n          }\n          // A replica on an allegedly down node is reported as active.\n          if (rep.isActive(liveNodes)) {\n            expectedInactive = false;\n          }\n        }\n      }\n      if (expectedInactive) {\n        return;\n      }\n      TimeUnit.MILLISECONDS.sleep(100);\n    }\n    fail(\"timed out waiting for all replicas to become inactive: livenodes: \" + liveNodes +\n        \" Collection state: \" + docCollection.toString());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c89f1ef80a9432f4eabaeda9a1e135cd72e60836","date":1547972642,"type":0,"author":"Tommaso Teofili","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestRebalanceLeaders#checkReplicasInactive(List[JettySolrRunner]).mjava","pathOld":"/dev/null","sourceNew":"  // Since we have to restart jettys, we don't want to try rebalancing etc. until we're sure all jettys that should\n  // be up are up and all replicas are active.\n  private void checkReplicasInactive(List<JettySolrRunner> downJettys) throws KeeperException, InterruptedException {\n    TimeOut timeout = new TimeOut(timeoutMs, TimeUnit.MILLISECONDS, TimeSource.NANO_TIME);\n    DocCollection docCollection = null;\n    Set<String> liveNodes = null;\n\n    Set<String> downJettyNodes = new TreeSet<>();\n    for (JettySolrRunner jetty : downJettys) {\n      downJettyNodes.add(jetty.getBaseUrl().getHost() + \":\" + jetty.getBaseUrl().getPort() + \"_solr\");\n    }\n    while (timeout.hasTimedOut() == false) {\n      forceUpdateCollectionStatus();\n      docCollection = cluster.getSolrClient().getZkStateReader().getClusterState().getCollection(COLLECTION_NAME);\n      liveNodes = cluster.getSolrClient().getZkStateReader().getClusterState().getLiveNodes();\n      boolean expectedInactive = true;\n\n      for (Slice slice : docCollection.getSlices()) {\n        for (Replica rep : slice.getReplicas()) {\n          if (downJettyNodes.contains(rep.getNodeName()) == false) {\n            continue; // We are on a live node\n          }\n          // A replica on an allegedly down node is reported as active.\n          if (rep.isActive(liveNodes)) {\n            expectedInactive = false;\n          }\n        }\n      }\n      if (expectedInactive) {\n        return;\n      }\n      TimeUnit.MILLISECONDS.sleep(100);\n    }\n    fail(\"timed out waiting for all replicas to become inactive: livenodes: \" + liveNodes +\n        \" Collection state: \" + docCollection.toString());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c89f1ef80a9432f4eabaeda9a1e135cd72e60836":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","73fd358e8ec697393d56617f4d9cedaca74dca14"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"73fd358e8ec697393d56617f4d9cedaca74dca14":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["73fd358e8ec697393d56617f4d9cedaca74dca14"]},"commit2Childs":{"c89f1ef80a9432f4eabaeda9a1e135cd72e60836":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c89f1ef80a9432f4eabaeda9a1e135cd72e60836","73fd358e8ec697393d56617f4d9cedaca74dca14"],"73fd358e8ec697393d56617f4d9cedaca74dca14":["c89f1ef80a9432f4eabaeda9a1e135cd72e60836","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c89f1ef80a9432f4eabaeda9a1e135cd72e60836","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}