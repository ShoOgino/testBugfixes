{"path":"solr/core/src/test/org/apache/solr/legacy/TestNumericRangeQuery32#testRangeSplit(int).mjava","commits":[{"id":"a178ac3dec643551e66363c457a9074f55545f86","date":1496133188,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/legacy/TestNumericRangeQuery32#testRangeSplit(int).mjava","pathOld":"lucene/backward-codecs/src/test/org/apache/lucene/legacy/TestNumericRangeQuery32#testRangeSplit(int).mjava","sourceNew":"  private void testRangeSplit(int precisionStep) throws Exception {\n    String field=\"ascfield\"+precisionStep;\n    // 10 random tests\n    int num = TestUtil.nextInt(random(), 10, 20);\n    for (int  i =0;  i< num; i++) {\n      int lower=(int)(random().nextDouble()*noDocs - noDocs/2);\n      int upper=(int)(random().nextDouble()*noDocs - noDocs/2);\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      // test inclusive range\n      Query tq= LegacyNumericRangeQuery.newIntRange(field, precisionStep, lower, upper, true, true);\n      TopDocs tTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count of range query must be equal to inclusive range length\", upper-lower+1, tTopDocs.totalHits );\n      // test exclusive range\n      tq= LegacyNumericRangeQuery.newIntRange(field, precisionStep, lower, upper, false, false);\n      tTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count of range query must be equal to exclusive range length\", Math.max(upper-lower-1, 0), tTopDocs.totalHits );\n      // test left exclusive range\n      tq= LegacyNumericRangeQuery.newIntRange(field, precisionStep, lower, upper, false, true);\n      tTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count of range query must be equal to half exclusive range length\", upper-lower, tTopDocs.totalHits );\n      // test right exclusive range\n      tq= LegacyNumericRangeQuery.newIntRange(field, precisionStep, lower, upper, true, false);\n      tTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count of range query must be equal to half exclusive range length\", upper-lower, tTopDocs.totalHits );\n    }\n  }\n\n","sourceOld":"  private void testRangeSplit(int precisionStep) throws Exception {\n    String field=\"ascfield\"+precisionStep;\n    // 10 random tests\n    int num = TestUtil.nextInt(random(), 10, 20);\n    for (int  i =0;  i< num; i++) {\n      int lower=(int)(random().nextDouble()*noDocs - noDocs/2);\n      int upper=(int)(random().nextDouble()*noDocs - noDocs/2);\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      // test inclusive range\n      Query tq= LegacyNumericRangeQuery.newIntRange(field, precisionStep, lower, upper, true, true);\n      TopDocs tTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count of range query must be equal to inclusive range length\", upper-lower+1, tTopDocs.totalHits );\n      // test exclusive range\n      tq= LegacyNumericRangeQuery.newIntRange(field, precisionStep, lower, upper, false, false);\n      tTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count of range query must be equal to exclusive range length\", Math.max(upper-lower-1, 0), tTopDocs.totalHits );\n      // test left exclusive range\n      tq= LegacyNumericRangeQuery.newIntRange(field, precisionStep, lower, upper, false, true);\n      tTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count of range query must be equal to half exclusive range length\", upper-lower, tTopDocs.totalHits );\n      // test right exclusive range\n      tq= LegacyNumericRangeQuery.newIntRange(field, precisionStep, lower, upper, true, false);\n      tTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count of range query must be equal to half exclusive range length\", upper-lower, tTopDocs.totalHits );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d1f5728f32a4a256b36cfabd7a2636452f599bb9","date":1496231774,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/legacy/TestNumericRangeQuery32#testRangeSplit(int).mjava","pathOld":"lucene/backward-codecs/src/test/org/apache/lucene/legacy/TestNumericRangeQuery32#testRangeSplit(int).mjava","sourceNew":"  private void testRangeSplit(int precisionStep) throws Exception {\n    String field=\"ascfield\"+precisionStep;\n    // 10 random tests\n    int num = TestUtil.nextInt(random(), 10, 20);\n    for (int  i =0;  i< num; i++) {\n      int lower=(int)(random().nextDouble()*noDocs - noDocs/2);\n      int upper=(int)(random().nextDouble()*noDocs - noDocs/2);\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      // test inclusive range\n      Query tq= LegacyNumericRangeQuery.newIntRange(field, precisionStep, lower, upper, true, true);\n      TopDocs tTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count of range query must be equal to inclusive range length\", upper-lower+1, tTopDocs.totalHits );\n      // test exclusive range\n      tq= LegacyNumericRangeQuery.newIntRange(field, precisionStep, lower, upper, false, false);\n      tTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count of range query must be equal to exclusive range length\", Math.max(upper-lower-1, 0), tTopDocs.totalHits );\n      // test left exclusive range\n      tq= LegacyNumericRangeQuery.newIntRange(field, precisionStep, lower, upper, false, true);\n      tTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count of range query must be equal to half exclusive range length\", upper-lower, tTopDocs.totalHits );\n      // test right exclusive range\n      tq= LegacyNumericRangeQuery.newIntRange(field, precisionStep, lower, upper, true, false);\n      tTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count of range query must be equal to half exclusive range length\", upper-lower, tTopDocs.totalHits );\n    }\n  }\n\n","sourceOld":"  private void testRangeSplit(int precisionStep) throws Exception {\n    String field=\"ascfield\"+precisionStep;\n    // 10 random tests\n    int num = TestUtil.nextInt(random(), 10, 20);\n    for (int  i =0;  i< num; i++) {\n      int lower=(int)(random().nextDouble()*noDocs - noDocs/2);\n      int upper=(int)(random().nextDouble()*noDocs - noDocs/2);\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      // test inclusive range\n      Query tq= LegacyNumericRangeQuery.newIntRange(field, precisionStep, lower, upper, true, true);\n      TopDocs tTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count of range query must be equal to inclusive range length\", upper-lower+1, tTopDocs.totalHits );\n      // test exclusive range\n      tq= LegacyNumericRangeQuery.newIntRange(field, precisionStep, lower, upper, false, false);\n      tTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count of range query must be equal to exclusive range length\", Math.max(upper-lower-1, 0), tTopDocs.totalHits );\n      // test left exclusive range\n      tq= LegacyNumericRangeQuery.newIntRange(field, precisionStep, lower, upper, false, true);\n      tTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count of range query must be equal to half exclusive range length\", upper-lower, tTopDocs.totalHits );\n      // test right exclusive range\n      tq= LegacyNumericRangeQuery.newIntRange(field, precisionStep, lower, upper, true, false);\n      tTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count of range query must be equal to half exclusive range length\", upper-lower, tTopDocs.totalHits );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":1,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/legacy/TestNumericRangeQuery32#testRangeSplit(int).mjava","pathOld":"lucene/backward-codecs/src/test/org/apache/lucene/legacy/TestNumericRangeQuery32#testRangeSplit(int).mjava","sourceNew":"  private void testRangeSplit(int precisionStep) throws Exception {\n    String field=\"ascfield\"+precisionStep;\n    // 10 random tests\n    int num = TestUtil.nextInt(random(), 10, 20);\n    for (int  i =0;  i< num; i++) {\n      int lower=(int)(random().nextDouble()*noDocs - noDocs/2);\n      int upper=(int)(random().nextDouble()*noDocs - noDocs/2);\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      // test inclusive range\n      Query tq= LegacyNumericRangeQuery.newIntRange(field, precisionStep, lower, upper, true, true);\n      TopDocs tTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count of range query must be equal to inclusive range length\", upper-lower+1, tTopDocs.totalHits );\n      // test exclusive range\n      tq= LegacyNumericRangeQuery.newIntRange(field, precisionStep, lower, upper, false, false);\n      tTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count of range query must be equal to exclusive range length\", Math.max(upper-lower-1, 0), tTopDocs.totalHits );\n      // test left exclusive range\n      tq= LegacyNumericRangeQuery.newIntRange(field, precisionStep, lower, upper, false, true);\n      tTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count of range query must be equal to half exclusive range length\", upper-lower, tTopDocs.totalHits );\n      // test right exclusive range\n      tq= LegacyNumericRangeQuery.newIntRange(field, precisionStep, lower, upper, true, false);\n      tTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count of range query must be equal to half exclusive range length\", upper-lower, tTopDocs.totalHits );\n    }\n  }\n\n","sourceOld":"  private void testRangeSplit(int precisionStep) throws Exception {\n    String field=\"ascfield\"+precisionStep;\n    // 10 random tests\n    int num = TestUtil.nextInt(random(), 10, 20);\n    for (int  i =0;  i< num; i++) {\n      int lower=(int)(random().nextDouble()*noDocs - noDocs/2);\n      int upper=(int)(random().nextDouble()*noDocs - noDocs/2);\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      // test inclusive range\n      Query tq= LegacyNumericRangeQuery.newIntRange(field, precisionStep, lower, upper, true, true);\n      TopDocs tTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count of range query must be equal to inclusive range length\", upper-lower+1, tTopDocs.totalHits );\n      // test exclusive range\n      tq= LegacyNumericRangeQuery.newIntRange(field, precisionStep, lower, upper, false, false);\n      tTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count of range query must be equal to exclusive range length\", Math.max(upper-lower-1, 0), tTopDocs.totalHits );\n      // test left exclusive range\n      tq= LegacyNumericRangeQuery.newIntRange(field, precisionStep, lower, upper, false, true);\n      tTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count of range query must be equal to half exclusive range length\", upper-lower, tTopDocs.totalHits );\n      // test right exclusive range\n      tq= LegacyNumericRangeQuery.newIntRange(field, precisionStep, lower, upper, true, false);\n      tTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count of range query must be equal to half exclusive range length\", upper-lower, tTopDocs.totalHits );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83788ad129a5154d5c6562c4e8ce3db48793aada","date":1532961485,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/legacy/TestNumericRangeQuery32#testRangeSplit(int).mjava","pathOld":"solr/core/src/test/org/apache/solr/legacy/TestNumericRangeQuery32#testRangeSplit(int).mjava","sourceNew":"  private void testRangeSplit(int precisionStep) throws Exception {\n    String field=\"ascfield\"+precisionStep;\n    // 10 random tests\n    int num = TestUtil.nextInt(random(), 10, 20);\n    for (int  i =0;  i< num; i++) {\n      int lower=(int)(random().nextDouble()*noDocs - noDocs/2);\n      int upper=(int)(random().nextDouble()*noDocs - noDocs/2);\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      // test inclusive range\n      Query tq= LegacyNumericRangeQuery.newIntRange(field, precisionStep, lower, upper, true, true);\n      TopDocs tTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count of range query must be equal to inclusive range length\", upper-lower+1, tTopDocs.totalHits.value );\n      // test exclusive range\n      tq= LegacyNumericRangeQuery.newIntRange(field, precisionStep, lower, upper, false, false);\n      tTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count of range query must be equal to exclusive range length\", Math.max(upper-lower-1, 0), tTopDocs.totalHits.value );\n      // test left exclusive range\n      tq= LegacyNumericRangeQuery.newIntRange(field, precisionStep, lower, upper, false, true);\n      tTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count of range query must be equal to half exclusive range length\", upper-lower, tTopDocs.totalHits.value );\n      // test right exclusive range\n      tq= LegacyNumericRangeQuery.newIntRange(field, precisionStep, lower, upper, true, false);\n      tTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count of range query must be equal to half exclusive range length\", upper-lower, tTopDocs.totalHits.value );\n    }\n  }\n\n","sourceOld":"  private void testRangeSplit(int precisionStep) throws Exception {\n    String field=\"ascfield\"+precisionStep;\n    // 10 random tests\n    int num = TestUtil.nextInt(random(), 10, 20);\n    for (int  i =0;  i< num; i++) {\n      int lower=(int)(random().nextDouble()*noDocs - noDocs/2);\n      int upper=(int)(random().nextDouble()*noDocs - noDocs/2);\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      // test inclusive range\n      Query tq= LegacyNumericRangeQuery.newIntRange(field, precisionStep, lower, upper, true, true);\n      TopDocs tTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count of range query must be equal to inclusive range length\", upper-lower+1, tTopDocs.totalHits );\n      // test exclusive range\n      tq= LegacyNumericRangeQuery.newIntRange(field, precisionStep, lower, upper, false, false);\n      tTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count of range query must be equal to exclusive range length\", Math.max(upper-lower-1, 0), tTopDocs.totalHits );\n      // test left exclusive range\n      tq= LegacyNumericRangeQuery.newIntRange(field, precisionStep, lower, upper, false, true);\n      tTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count of range query must be equal to half exclusive range length\", upper-lower, tTopDocs.totalHits );\n      // test right exclusive range\n      tq= LegacyNumericRangeQuery.newIntRange(field, precisionStep, lower, upper, true, false);\n      tTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count of range query must be equal to half exclusive range length\", upper-lower, tTopDocs.totalHits );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e29e66165c8c36fbd9967747d27b165761c55081","date":1542486027,"type":3,"author":"Jim Ferenczi","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/legacy/TestNumericRangeQuery32#testRangeSplit(int).mjava","pathOld":"solr/core/src/test/org/apache/solr/legacy/TestNumericRangeQuery32#testRangeSplit(int).mjava","sourceNew":"  private void testRangeSplit(int precisionStep) throws Exception {\n    String field=\"ascfield\"+precisionStep;\n    // 10 random tests\n    int num = TestUtil.nextInt(random(), 10, 20);\n    for (int  i =0;  i< num; i++) {\n      int lower=(int)(random().nextDouble()*noDocs - noDocs/2);\n      int upper=(int)(random().nextDouble()*noDocs - noDocs/2);\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      // test inclusive range\n      Query tq= LegacyNumericRangeQuery.newIntRange(field, precisionStep, lower, upper, true, true);\n      TopScoreDocCollector collector = TopScoreDocCollector.create(1, Integer.MAX_VALUE);\n      searcher.search(tq, collector);\n      TopDocs tTopDocs = collector.topDocs();\n      assertEquals(\"Returned count of range query must be equal to inclusive range length\", upper-lower+1, tTopDocs.totalHits.value );\n      // test exclusive range\n      tq= LegacyNumericRangeQuery.newIntRange(field, precisionStep, lower, upper, false, false);\n      collector = TopScoreDocCollector.create(1, Integer.MAX_VALUE);\n      searcher.search(tq, collector);\n      tTopDocs = collector.topDocs();\n      assertEquals(\"Returned count of range query must be equal to exclusive range length\", Math.max(upper-lower-1, 0), tTopDocs.totalHits.value );\n      // test left exclusive range\n      tq= LegacyNumericRangeQuery.newIntRange(field, precisionStep, lower, upper, false, true);\n      collector = TopScoreDocCollector.create(1, Integer.MAX_VALUE);\n      searcher.search(tq, collector);\n      tTopDocs = collector.topDocs();\n      assertEquals(\"Returned count of range query must be equal to half exclusive range length\", upper-lower, tTopDocs.totalHits.value );\n      // test right exclusive range\n      tq= LegacyNumericRangeQuery.newIntRange(field, precisionStep, lower, upper, true, false);\n      collector = TopScoreDocCollector.create(1, Integer.MAX_VALUE);\n      searcher.search(tq, collector);\n      tTopDocs = collector.topDocs();\n      assertEquals(\"Returned count of range query must be equal to half exclusive range length\", upper-lower, tTopDocs.totalHits.value );\n    }\n  }\n\n","sourceOld":"  private void testRangeSplit(int precisionStep) throws Exception {\n    String field=\"ascfield\"+precisionStep;\n    // 10 random tests\n    int num = TestUtil.nextInt(random(), 10, 20);\n    for (int  i =0;  i< num; i++) {\n      int lower=(int)(random().nextDouble()*noDocs - noDocs/2);\n      int upper=(int)(random().nextDouble()*noDocs - noDocs/2);\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      // test inclusive range\n      Query tq= LegacyNumericRangeQuery.newIntRange(field, precisionStep, lower, upper, true, true);\n      TopDocs tTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count of range query must be equal to inclusive range length\", upper-lower+1, tTopDocs.totalHits.value );\n      // test exclusive range\n      tq= LegacyNumericRangeQuery.newIntRange(field, precisionStep, lower, upper, false, false);\n      tTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count of range query must be equal to exclusive range length\", Math.max(upper-lower-1, 0), tTopDocs.totalHits.value );\n      // test left exclusive range\n      tq= LegacyNumericRangeQuery.newIntRange(field, precisionStep, lower, upper, false, true);\n      tTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count of range query must be equal to half exclusive range length\", upper-lower, tTopDocs.totalHits.value );\n      // test right exclusive range\n      tq= LegacyNumericRangeQuery.newIntRange(field, precisionStep, lower, upper, true, false);\n      tTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count of range query must be equal to half exclusive range length\", upper-lower, tTopDocs.totalHits.value );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a178ac3dec643551e66363c457a9074f55545f86":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a178ac3dec643551e66363c457a9074f55545f86"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"83788ad129a5154d5c6562c4e8ce3db48793aada":["d1f5728f32a4a256b36cfabd7a2636452f599bb9"],"e29e66165c8c36fbd9967747d27b165761c55081":["83788ad129a5154d5c6562c4e8ce3db48793aada"],"d1f5728f32a4a256b36cfabd7a2636452f599bb9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a178ac3dec643551e66363c457a9074f55545f86"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e29e66165c8c36fbd9967747d27b165761c55081"]},"commit2Childs":{"a178ac3dec643551e66363c457a9074f55545f86":["e9017cf144952056066919f1ebc7897ff9bd71b1","d1f5728f32a4a256b36cfabd7a2636452f599bb9"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a178ac3dec643551e66363c457a9074f55545f86","e9017cf144952056066919f1ebc7897ff9bd71b1","d1f5728f32a4a256b36cfabd7a2636452f599bb9"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["e29e66165c8c36fbd9967747d27b165761c55081"],"e29e66165c8c36fbd9967747d27b165761c55081":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d1f5728f32a4a256b36cfabd7a2636452f599bb9":["83788ad129a5154d5c6562c4e8ce3db48793aada"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}