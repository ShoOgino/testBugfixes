{"path":"contrib/db/bdb-je/src/test/org/apache/lucene/store/je/JEStoreTest#testBytes().mjava","commits":[{"id":"87fc6f159522f12e67225691468cbf3d11be8590","date":1136423057,"type":0,"author":"Andreas Vajda","isMerge":false,"pathNew":"contrib/db/bdb-je/src/test/org/apache/lucene/store/je/JEStoreTest#testBytes().mjava","pathOld":"/dev/null","sourceNew":"    public void testBytes()\n        throws Exception\n    {\n        final int count = 250;\n        final int LENGTH_MASK = 0xffff;\n\n        Random gen = new Random(1251971);\n        int totalLength = 0;\n        int duration;\n        Date end;\n    \n        Date veryStart = new Date();\n        Date start = new Date();\n        Transaction txn = null;\n        Directory store = null;\n\n        System.out.println(\"Writing files byte by byte\");\n\n        try {\n            txn = env.beginTransaction(null, null);\n            store = new JEDirectory(txn, index, blocks);\n\n            for (int i = 0; i < count; i++) {\n                String name = i + \".dat\";\n                int length = gen.nextInt() & LENGTH_MASK;\n                IndexOutput file = store.createOutput(name);\n\n                totalLength += length;\n\n                for (int j = 0; j < length; j++) {\n                    byte b = (byte)(gen.nextInt() & 0x7F);\n                    file.writeByte(b);\n                }\n      \n                file.close();\n            }\n        } catch (IOException e) {\n            txn.abort();\n            txn = null;\n            throw e;\n        } catch (DatabaseException e) {\n            if (txn != null)\n            {\n                txn.abort();\n                txn = null;\n            }\n            throw e;\n        } finally {\n            if (txn != null)\n                txn.commit();\n\n            store.close();\n        }\n\n        end = new Date();\n\n        duration = (int) (end.getTime() - start.getTime());\n        System.out.print(duration);\n        System.out.print(\" total milliseconds to create, \");\n        System.out.print(totalLength / duration);\n        System.out.println(\" kb/s\");\n\n        try {\n            txn = env.beginTransaction(null, null);\n            store = new JEDirectory(txn, index, blocks);\n\n            gen = new Random(1251971);\n            start = new Date();\n\n            for (int i = 0; i < count; i++) {\n                String name = i + \".dat\";\n                int length = gen.nextInt() & LENGTH_MASK;\n                IndexInput file = store.openInput(name);\n\n                if (file.length() != length)\n                    throw new Exception(\"length incorrect\");\n\n                for (int j = 0; j < length; j++) {\n                    byte b = (byte)(gen.nextInt() & 0x7F);\n\n                    if (file.readByte() != b)\n                        throw new Exception(\"contents incorrect\");\n                }\n\n                file.close();\n            }\n        } catch (IOException e) {\n            txn.abort();\n            txn = null;\n            throw e;\n        } catch (DatabaseException e) {\n            if (txn != null)\n            {\n                txn.abort();\n                txn = null;\n            }\n            throw e;\n        } finally {\n            if (txn != null)\n                txn.commit();\n\n            store.close();\n        }\n\n        end = new Date();\n\n        duration = (int) (end.getTime() - start.getTime());\n        System.out.print(duration);\n        System.out.print(\" total milliseconds to read, \");\n        System.out.print(totalLength / duration);\n        System.out.println(\" kb/s\");\n\n        try {\n            txn = env.beginTransaction(null, null);\n            store = new JEDirectory(txn, index, blocks);\n\n            gen = new Random(1251971);\n            start = new Date();\n\n            for (int i = 0; i < count; i++) {\n                String name = i + \".dat\";\n                store.deleteFile(name);\n            }\n        } catch (IOException e) {\n            txn.abort();\n            txn = null;\n            throw e;\n        } catch (DatabaseException e) {\n            if (txn != null)\n            {\n                txn.abort();\n                txn = null;\n            }\n            throw e;\n        } finally {\n            if (txn != null)\n                txn.commit();\n\n            store.close();\n        }\n\n        end = new Date();\n\n        System.out.print(end.getTime() - start.getTime());\n        System.out.println(\" total milliseconds to delete\");\n\n        System.out.print(end.getTime() - veryStart.getTime());\n        System.out.println(\" total milliseconds\");\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"726b696258060f802944722ff3cbb190dd5140ac","date":1145053400,"type":5,"author":"Andreas Vajda","isMerge":false,"pathNew":"contrib/db/bdb-je/src/test/org/apache/lucene/store/je/JEStoreTest#tesBytes().mjava","pathOld":"contrib/db/bdb-je/src/test/org/apache/lucene/store/je/JEStoreTest#testBytes().mjava","sourceNew":"    public void tesBytes() throws Exception {\n        final int count = 250;\n        final int LENGTH_MASK = 0xffff;\n\n        Random gen = new Random(1251971);\n        int totalLength = 0;\n        int duration;\n        Date end;\n\n        Date veryStart = new Date();\n        Date start = new Date();\n        Transaction txn = null;\n        Directory store = null;\n\n        System.out.println(\"Writing files byte by byte\");\n\n        try {\n            txn = env.beginTransaction(null, null);\n            store = new JEDirectory(txn, index, blocks);\n\n            for (int i = 0; i < count; i++) {\n                String name = i + \".dat\";\n                int length = gen.nextInt() & LENGTH_MASK;\n                IndexOutput file = store.createOutput(name);\n\n                totalLength += length;\n\n                for (int j = 0; j < length; j++) {\n                    byte b = (byte) (gen.nextInt() & 0x7F);\n                    file.writeByte(b);\n                }\n\n                file.close();\n            }\n        } catch (IOException e) {\n            txn.abort();\n            txn = null;\n            throw e;\n        } catch (DatabaseException e) {\n            if (txn != null) {\n                txn.abort();\n                txn = null;\n            }\n            throw e;\n        } finally {\n            if (txn != null)\n                txn.commit();\n\n            store.close();\n        }\n\n        end = new Date();\n\n        duration = (int) (end.getTime() - start.getTime());\n        System.out.print(duration);\n        System.out.print(\" total milliseconds to create, \");\n        System.out.print(totalLength / duration);\n        System.out.println(\" kb/s\");\n\n        try {\n            txn = env.beginTransaction(null, null);\n            store = new JEDirectory(txn, index, blocks);\n\n            gen = new Random(1251971);\n            start = new Date();\n\n            for (int i = 0; i < count; i++) {\n                String name = i + \".dat\";\n                int length = gen.nextInt() & LENGTH_MASK;\n                IndexInput file = store.openInput(name);\n\n                if (file.length() != length)\n                    throw new Exception(\"length incorrect\");\n\n                for (int j = 0; j < length; j++) {\n                    byte b = (byte) (gen.nextInt() & 0x7F);\n\n                    if (file.readByte() != b)\n                        throw new Exception(\"contents incorrect\");\n                }\n\n                file.close();\n            }\n        } catch (IOException e) {\n            txn.abort();\n            txn = null;\n            throw e;\n        } catch (DatabaseException e) {\n            if (txn != null) {\n                txn.abort();\n                txn = null;\n            }\n            throw e;\n        } finally {\n            if (txn != null)\n                txn.commit();\n\n            store.close();\n        }\n\n        end = new Date();\n\n        duration = (int) (end.getTime() - start.getTime());\n        System.out.print(duration);\n        System.out.print(\" total milliseconds to read, \");\n        System.out.print(totalLength / duration);\n        System.out.println(\" kb/s\");\n\n        try {\n            txn = env.beginTransaction(null, null);\n            store = new JEDirectory(txn, index, blocks);\n\n            gen = new Random(1251971);\n            start = new Date();\n\n            for (int i = 0; i < count; i++) {\n                String name = i + \".dat\";\n                store.deleteFile(name);\n            }\n        } catch (IOException e) {\n            txn.abort();\n            txn = null;\n            throw e;\n        } catch (DatabaseException e) {\n            if (txn != null) {\n                txn.abort();\n                txn = null;\n            }\n            throw e;\n        } finally {\n            if (txn != null)\n                txn.commit();\n\n            store.close();\n        }\n\n        end = new Date();\n\n        System.out.print(end.getTime() - start.getTime());\n        System.out.println(\" total milliseconds to delete\");\n\n        System.out.print(end.getTime() - veryStart.getTime());\n        System.out.println(\" total milliseconds\");\n    }\n\n","sourceOld":"    public void testBytes()\n        throws Exception\n    {\n        final int count = 250;\n        final int LENGTH_MASK = 0xffff;\n\n        Random gen = new Random(1251971);\n        int totalLength = 0;\n        int duration;\n        Date end;\n    \n        Date veryStart = new Date();\n        Date start = new Date();\n        Transaction txn = null;\n        Directory store = null;\n\n        System.out.println(\"Writing files byte by byte\");\n\n        try {\n            txn = env.beginTransaction(null, null);\n            store = new JEDirectory(txn, index, blocks);\n\n            for (int i = 0; i < count; i++) {\n                String name = i + \".dat\";\n                int length = gen.nextInt() & LENGTH_MASK;\n                IndexOutput file = store.createOutput(name);\n\n                totalLength += length;\n\n                for (int j = 0; j < length; j++) {\n                    byte b = (byte)(gen.nextInt() & 0x7F);\n                    file.writeByte(b);\n                }\n      \n                file.close();\n            }\n        } catch (IOException e) {\n            txn.abort();\n            txn = null;\n            throw e;\n        } catch (DatabaseException e) {\n            if (txn != null)\n            {\n                txn.abort();\n                txn = null;\n            }\n            throw e;\n        } finally {\n            if (txn != null)\n                txn.commit();\n\n            store.close();\n        }\n\n        end = new Date();\n\n        duration = (int) (end.getTime() - start.getTime());\n        System.out.print(duration);\n        System.out.print(\" total milliseconds to create, \");\n        System.out.print(totalLength / duration);\n        System.out.println(\" kb/s\");\n\n        try {\n            txn = env.beginTransaction(null, null);\n            store = new JEDirectory(txn, index, blocks);\n\n            gen = new Random(1251971);\n            start = new Date();\n\n            for (int i = 0; i < count; i++) {\n                String name = i + \".dat\";\n                int length = gen.nextInt() & LENGTH_MASK;\n                IndexInput file = store.openInput(name);\n\n                if (file.length() != length)\n                    throw new Exception(\"length incorrect\");\n\n                for (int j = 0; j < length; j++) {\n                    byte b = (byte)(gen.nextInt() & 0x7F);\n\n                    if (file.readByte() != b)\n                        throw new Exception(\"contents incorrect\");\n                }\n\n                file.close();\n            }\n        } catch (IOException e) {\n            txn.abort();\n            txn = null;\n            throw e;\n        } catch (DatabaseException e) {\n            if (txn != null)\n            {\n                txn.abort();\n                txn = null;\n            }\n            throw e;\n        } finally {\n            if (txn != null)\n                txn.commit();\n\n            store.close();\n        }\n\n        end = new Date();\n\n        duration = (int) (end.getTime() - start.getTime());\n        System.out.print(duration);\n        System.out.print(\" total milliseconds to read, \");\n        System.out.print(totalLength / duration);\n        System.out.println(\" kb/s\");\n\n        try {\n            txn = env.beginTransaction(null, null);\n            store = new JEDirectory(txn, index, blocks);\n\n            gen = new Random(1251971);\n            start = new Date();\n\n            for (int i = 0; i < count; i++) {\n                String name = i + \".dat\";\n                store.deleteFile(name);\n            }\n        } catch (IOException e) {\n            txn.abort();\n            txn = null;\n            throw e;\n        } catch (DatabaseException e) {\n            if (txn != null)\n            {\n                txn.abort();\n                txn = null;\n            }\n            throw e;\n        } finally {\n            if (txn != null)\n                txn.commit();\n\n            store.close();\n        }\n\n        end = new Date();\n\n        System.out.print(end.getTime() - start.getTime());\n        System.out.println(\" total milliseconds to delete\");\n\n        System.out.print(end.getTime() - veryStart.getTime());\n        System.out.println(\" total milliseconds\");\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"25e0aaaec0defe1bacaadfe8f619322269457753","date":1222654911,"type":1,"author":"Andreas Vajda","isMerge":false,"pathNew":"contrib/db/bdb-je/src/test/org/apache/lucene/store/je/JEStoreTest#testBytes().mjava","pathOld":"contrib/db/bdb-je/src/test/org/apache/lucene/store/je/JEStoreTest#tesBytes().mjava","sourceNew":"    public void testBytes() throws Exception {\n        final int count = 250;\n        final int LENGTH_MASK = 0xffff;\n\n        Random gen = new Random(1251971);\n        int totalLength = 0;\n        int duration;\n        Date end;\n\n        Date veryStart = new Date();\n        Date start = new Date();\n        Transaction txn = null;\n        Directory store = null;\n\n        System.out.println(\"Writing files byte by byte\");\n\n        try {\n            txn = env.beginTransaction(null, null);\n            store = new JEDirectory(txn, index, blocks);\n\n            for (int i = 0; i < count; i++) {\n                String name = i + \".dat\";\n                int length = gen.nextInt() & LENGTH_MASK;\n                IndexOutput file = store.createOutput(name);\n\n                totalLength += length;\n\n                for (int j = 0; j < length; j++) {\n                    byte b = (byte) (gen.nextInt() & 0x7F);\n                    file.writeByte(b);\n                }\n\n                file.close();\n            }\n        } catch (IOException e) {\n            txn.abort();\n            txn = null;\n            throw e;\n        } catch (DatabaseException e) {\n            if (txn != null) {\n                txn.abort();\n                txn = null;\n            }\n            throw e;\n        } finally {\n            if (txn != null)\n                txn.commit();\n\n            store.close();\n        }\n\n        end = new Date();\n\n        duration = (int) (end.getTime() - start.getTime());\n        System.out.print(duration);\n        System.out.print(\" total milliseconds to create, \");\n        System.out.print(totalLength / duration);\n        System.out.println(\" kb/s\");\n\n        try {\n            txn = env.beginTransaction(null, null);\n            store = new JEDirectory(txn, index, blocks);\n\n            gen = new Random(1251971);\n            start = new Date();\n\n            for (int i = 0; i < count; i++) {\n                String name = i + \".dat\";\n                int length = gen.nextInt() & LENGTH_MASK;\n                IndexInput file = store.openInput(name);\n\n                if (file.length() != length)\n                    throw new Exception(\"length incorrect\");\n\n                for (int j = 0; j < length; j++) {\n                    byte b = (byte) (gen.nextInt() & 0x7F);\n\n                    if (file.readByte() != b)\n                        throw new Exception(\"contents incorrect\");\n                }\n\n                file.close();\n            }\n        } catch (IOException e) {\n            txn.abort();\n            txn = null;\n            throw e;\n        } catch (DatabaseException e) {\n            if (txn != null) {\n                txn.abort();\n                txn = null;\n            }\n            throw e;\n        } finally {\n            if (txn != null)\n                txn.commit();\n\n            store.close();\n        }\n\n        end = new Date();\n\n        duration = (int) (end.getTime() - start.getTime());\n        System.out.print(duration);\n        System.out.print(\" total milliseconds to read, \");\n        System.out.print(totalLength / duration);\n        System.out.println(\" kb/s\");\n\n        try {\n            txn = env.beginTransaction(null, null);\n            store = new JEDirectory(txn, index, blocks);\n\n            gen = new Random(1251971);\n            start = new Date();\n\n            for (int i = 0; i < count; i++) {\n                String name = i + \".dat\";\n                store.deleteFile(name);\n            }\n        } catch (IOException e) {\n            txn.abort();\n            txn = null;\n            throw e;\n        } catch (DatabaseException e) {\n            if (txn != null) {\n                txn.abort();\n                txn = null;\n            }\n            throw e;\n        } finally {\n            if (txn != null)\n                txn.commit();\n\n            store.close();\n        }\n\n        end = new Date();\n\n        System.out.print(end.getTime() - start.getTime());\n        System.out.println(\" total milliseconds to delete\");\n\n        System.out.print(end.getTime() - veryStart.getTime());\n        System.out.println(\" total milliseconds\");\n    }\n\n","sourceOld":"    public void tesBytes() throws Exception {\n        final int count = 250;\n        final int LENGTH_MASK = 0xffff;\n\n        Random gen = new Random(1251971);\n        int totalLength = 0;\n        int duration;\n        Date end;\n\n        Date veryStart = new Date();\n        Date start = new Date();\n        Transaction txn = null;\n        Directory store = null;\n\n        System.out.println(\"Writing files byte by byte\");\n\n        try {\n            txn = env.beginTransaction(null, null);\n            store = new JEDirectory(txn, index, blocks);\n\n            for (int i = 0; i < count; i++) {\n                String name = i + \".dat\";\n                int length = gen.nextInt() & LENGTH_MASK;\n                IndexOutput file = store.createOutput(name);\n\n                totalLength += length;\n\n                for (int j = 0; j < length; j++) {\n                    byte b = (byte) (gen.nextInt() & 0x7F);\n                    file.writeByte(b);\n                }\n\n                file.close();\n            }\n        } catch (IOException e) {\n            txn.abort();\n            txn = null;\n            throw e;\n        } catch (DatabaseException e) {\n            if (txn != null) {\n                txn.abort();\n                txn = null;\n            }\n            throw e;\n        } finally {\n            if (txn != null)\n                txn.commit();\n\n            store.close();\n        }\n\n        end = new Date();\n\n        duration = (int) (end.getTime() - start.getTime());\n        System.out.print(duration);\n        System.out.print(\" total milliseconds to create, \");\n        System.out.print(totalLength / duration);\n        System.out.println(\" kb/s\");\n\n        try {\n            txn = env.beginTransaction(null, null);\n            store = new JEDirectory(txn, index, blocks);\n\n            gen = new Random(1251971);\n            start = new Date();\n\n            for (int i = 0; i < count; i++) {\n                String name = i + \".dat\";\n                int length = gen.nextInt() & LENGTH_MASK;\n                IndexInput file = store.openInput(name);\n\n                if (file.length() != length)\n                    throw new Exception(\"length incorrect\");\n\n                for (int j = 0; j < length; j++) {\n                    byte b = (byte) (gen.nextInt() & 0x7F);\n\n                    if (file.readByte() != b)\n                        throw new Exception(\"contents incorrect\");\n                }\n\n                file.close();\n            }\n        } catch (IOException e) {\n            txn.abort();\n            txn = null;\n            throw e;\n        } catch (DatabaseException e) {\n            if (txn != null) {\n                txn.abort();\n                txn = null;\n            }\n            throw e;\n        } finally {\n            if (txn != null)\n                txn.commit();\n\n            store.close();\n        }\n\n        end = new Date();\n\n        duration = (int) (end.getTime() - start.getTime());\n        System.out.print(duration);\n        System.out.print(\" total milliseconds to read, \");\n        System.out.print(totalLength / duration);\n        System.out.println(\" kb/s\");\n\n        try {\n            txn = env.beginTransaction(null, null);\n            store = new JEDirectory(txn, index, blocks);\n\n            gen = new Random(1251971);\n            start = new Date();\n\n            for (int i = 0; i < count; i++) {\n                String name = i + \".dat\";\n                store.deleteFile(name);\n            }\n        } catch (IOException e) {\n            txn.abort();\n            txn = null;\n            throw e;\n        } catch (DatabaseException e) {\n            if (txn != null) {\n                txn.abort();\n                txn = null;\n            }\n            throw e;\n        } finally {\n            if (txn != null)\n                txn.commit();\n\n            store.close();\n        }\n\n        end = new Date();\n\n        System.out.print(end.getTime() - start.getTime());\n        System.out.println(\" total milliseconds to delete\");\n\n        System.out.print(end.getTime() - veryStart.getTime());\n        System.out.println(\" total milliseconds\");\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cb1066f2afe9450585d0d10063ea4450085236f1","date":1233870820,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/db/bdb-je/src/test/org/apache/lucene/store/je/JEStoreTest#testBytes().mjava","pathOld":"contrib/db/bdb-je/src/test/org/apache/lucene/store/je/JEStoreTest#testBytes().mjava","sourceNew":"    public void testBytes() throws Exception {\n        final int count = 250;\n        final int LENGTH_MASK = 0xffff;\n\n        Random r = newRandom();\n        final long seed = r.nextLong();\n        Random gen = new Random(seed);\n        int totalLength = 0;\n        int duration;\n        Date end;\n\n        Date veryStart = new Date();\n        Date start = new Date();\n        Transaction txn = null;\n        Directory store = null;\n\n        System.out.println(\"Writing files byte by byte\");\n\n        try {\n            txn = env.beginTransaction(null, null);\n            store = new JEDirectory(txn, index, blocks);\n\n            for (int i = 0; i < count; i++) {\n                String name = i + \".dat\";\n                int length = gen.nextInt() & LENGTH_MASK;\n                IndexOutput file = store.createOutput(name);\n\n                totalLength += length;\n\n                for (int j = 0; j < length; j++) {\n                    byte b = (byte) (gen.nextInt() & 0x7F);\n                    file.writeByte(b);\n                }\n\n                file.close();\n            }\n        } catch (IOException e) {\n            txn.abort();\n            txn = null;\n            throw e;\n        } catch (DatabaseException e) {\n            if (txn != null) {\n                txn.abort();\n                txn = null;\n            }\n            throw e;\n        } finally {\n            if (txn != null)\n                txn.commit();\n\n            store.close();\n        }\n\n        end = new Date();\n\n        duration = (int) (end.getTime() - start.getTime());\n        System.out.print(duration);\n        System.out.print(\" total milliseconds to create, \");\n        System.out.print(totalLength / duration);\n        System.out.println(\" kb/s\");\n\n        try {\n            txn = env.beginTransaction(null, null);\n            store = new JEDirectory(txn, index, blocks);\n\n            gen = new Random(seed);\n            start = new Date();\n\n            for (int i = 0; i < count; i++) {\n                String name = i + \".dat\";\n                int length = gen.nextInt() & LENGTH_MASK;\n                IndexInput file = store.openInput(name);\n\n                if (file.length() != length)\n                    throw new Exception(\"length incorrect\");\n\n                for (int j = 0; j < length; j++) {\n                    byte b = (byte) (gen.nextInt() & 0x7F);\n\n                    if (file.readByte() != b)\n                        throw new Exception(\"contents incorrect\");\n                }\n\n                file.close();\n            }\n        } catch (IOException e) {\n            txn.abort();\n            txn = null;\n            throw e;\n        } catch (DatabaseException e) {\n            if (txn != null) {\n                txn.abort();\n                txn = null;\n            }\n            throw e;\n        } finally {\n            if (txn != null)\n                txn.commit();\n\n            store.close();\n        }\n\n        end = new Date();\n\n        duration = (int) (end.getTime() - start.getTime());\n        System.out.print(duration);\n        System.out.print(\" total milliseconds to read, \");\n        System.out.print(totalLength / duration);\n        System.out.println(\" kb/s\");\n\n        try {\n            txn = env.beginTransaction(null, null);\n            store = new JEDirectory(txn, index, blocks);\n\n            gen = new Random(seed);\n            start = new Date();\n\n            for (int i = 0; i < count; i++) {\n                String name = i + \".dat\";\n                store.deleteFile(name);\n            }\n        } catch (IOException e) {\n            txn.abort();\n            txn = null;\n            throw e;\n        } catch (DatabaseException e) {\n            if (txn != null) {\n                txn.abort();\n                txn = null;\n            }\n            throw e;\n        } finally {\n            if (txn != null)\n                txn.commit();\n\n            store.close();\n        }\n\n        end = new Date();\n\n        System.out.print(end.getTime() - start.getTime());\n        System.out.println(\" total milliseconds to delete\");\n\n        System.out.print(end.getTime() - veryStart.getTime());\n        System.out.println(\" total milliseconds\");\n    }\n\n","sourceOld":"    public void testBytes() throws Exception {\n        final int count = 250;\n        final int LENGTH_MASK = 0xffff;\n\n        Random gen = new Random(1251971);\n        int totalLength = 0;\n        int duration;\n        Date end;\n\n        Date veryStart = new Date();\n        Date start = new Date();\n        Transaction txn = null;\n        Directory store = null;\n\n        System.out.println(\"Writing files byte by byte\");\n\n        try {\n            txn = env.beginTransaction(null, null);\n            store = new JEDirectory(txn, index, blocks);\n\n            for (int i = 0; i < count; i++) {\n                String name = i + \".dat\";\n                int length = gen.nextInt() & LENGTH_MASK;\n                IndexOutput file = store.createOutput(name);\n\n                totalLength += length;\n\n                for (int j = 0; j < length; j++) {\n                    byte b = (byte) (gen.nextInt() & 0x7F);\n                    file.writeByte(b);\n                }\n\n                file.close();\n            }\n        } catch (IOException e) {\n            txn.abort();\n            txn = null;\n            throw e;\n        } catch (DatabaseException e) {\n            if (txn != null) {\n                txn.abort();\n                txn = null;\n            }\n            throw e;\n        } finally {\n            if (txn != null)\n                txn.commit();\n\n            store.close();\n        }\n\n        end = new Date();\n\n        duration = (int) (end.getTime() - start.getTime());\n        System.out.print(duration);\n        System.out.print(\" total milliseconds to create, \");\n        System.out.print(totalLength / duration);\n        System.out.println(\" kb/s\");\n\n        try {\n            txn = env.beginTransaction(null, null);\n            store = new JEDirectory(txn, index, blocks);\n\n            gen = new Random(1251971);\n            start = new Date();\n\n            for (int i = 0; i < count; i++) {\n                String name = i + \".dat\";\n                int length = gen.nextInt() & LENGTH_MASK;\n                IndexInput file = store.openInput(name);\n\n                if (file.length() != length)\n                    throw new Exception(\"length incorrect\");\n\n                for (int j = 0; j < length; j++) {\n                    byte b = (byte) (gen.nextInt() & 0x7F);\n\n                    if (file.readByte() != b)\n                        throw new Exception(\"contents incorrect\");\n                }\n\n                file.close();\n            }\n        } catch (IOException e) {\n            txn.abort();\n            txn = null;\n            throw e;\n        } catch (DatabaseException e) {\n            if (txn != null) {\n                txn.abort();\n                txn = null;\n            }\n            throw e;\n        } finally {\n            if (txn != null)\n                txn.commit();\n\n            store.close();\n        }\n\n        end = new Date();\n\n        duration = (int) (end.getTime() - start.getTime());\n        System.out.print(duration);\n        System.out.print(\" total milliseconds to read, \");\n        System.out.print(totalLength / duration);\n        System.out.println(\" kb/s\");\n\n        try {\n            txn = env.beginTransaction(null, null);\n            store = new JEDirectory(txn, index, blocks);\n\n            gen = new Random(1251971);\n            start = new Date();\n\n            for (int i = 0; i < count; i++) {\n                String name = i + \".dat\";\n                store.deleteFile(name);\n            }\n        } catch (IOException e) {\n            txn.abort();\n            txn = null;\n            throw e;\n        } catch (DatabaseException e) {\n            if (txn != null) {\n                txn.abort();\n                txn = null;\n            }\n            throw e;\n        } finally {\n            if (txn != null)\n                txn.commit();\n\n            store.close();\n        }\n\n        end = new Date();\n\n        System.out.print(end.getTime() - start.getTime());\n        System.out.println(\" total milliseconds to delete\");\n\n        System.out.print(end.getTime() - veryStart.getTime());\n        System.out.println(\" total milliseconds\");\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a","date":1267298041,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/db/bdb-je/src/test/org/apache/lucene/store/je/JEStoreTest#testBytes().mjava","pathOld":"contrib/db/bdb-je/src/test/org/apache/lucene/store/je/JEStoreTest#testBytes().mjava","sourceNew":"    public void testBytes() throws Exception {\n        final int count = 250;\n        final int LENGTH_MASK = 0xffff;\n\n        Random r = newRandom();\n        final long seed = r.nextLong();\n        Random gen = new Random(seed);\n        int totalLength = 0;\n        int duration;\n        Date end;\n\n        Date veryStart = new Date();\n        Date start = new Date();\n        Transaction txn = env.beginTransaction(null, null);\n        Directory store = null;\n\n        System.out.println(\"Writing files byte by byte\");\n\n        try {\n            store = new JEDirectory(txn, index, blocks);\n\n            for (int i = 0; i < count; i++) {\n                String name = i + \".dat\";\n                int length = gen.nextInt() & LENGTH_MASK;\n                IndexOutput file = store.createOutput(name);\n\n                totalLength += length;\n\n                for (int j = 0; j < length; j++) {\n                    byte b = (byte) (gen.nextInt() & 0x7F);\n                    file.writeByte(b);\n                }\n\n                file.close();\n            }\n        } catch (IOException e) {\n            txn.abort();\n            txn = null;\n            throw e;\n        } finally {\n            if (txn != null)\n                txn.commit();\n\n            store.close();\n        }\n\n        end = new Date();\n\n        duration = (int) (end.getTime() - start.getTime());\n        System.out.print(duration);\n        System.out.print(\" total milliseconds to create, \");\n        System.out.print(totalLength / duration);\n        System.out.println(\" kb/s\");\n\n        try {\n            txn = env.beginTransaction(null, null);\n            store = new JEDirectory(txn, index, blocks);\n\n            gen = new Random(seed);\n            start = new Date();\n\n            for (int i = 0; i < count; i++) {\n                String name = i + \".dat\";\n                int length = gen.nextInt() & LENGTH_MASK;\n                IndexInput file = store.openInput(name);\n\n                if (file.length() != length)\n                    throw new Exception(\"length incorrect\");\n\n                for (int j = 0; j < length; j++) {\n                    byte b = (byte) (gen.nextInt() & 0x7F);\n\n                    if (file.readByte() != b)\n                        throw new Exception(\"contents incorrect\");\n                }\n\n                file.close();\n            }\n        } catch (IOException e) {\n            txn.abort();\n            txn = null;\n            throw e;\n        } catch (DatabaseException e) {\n            if (txn != null) {\n                txn.abort();\n                txn = null;\n            }\n            throw e;\n        } finally {\n            if (txn != null)\n                txn.commit();\n\n            store.close();\n        }\n\n        end = new Date();\n\n        duration = (int) (end.getTime() - start.getTime());\n        System.out.print(duration);\n        System.out.print(\" total milliseconds to read, \");\n        System.out.print(totalLength / duration);\n        System.out.println(\" kb/s\");\n\n        try {\n            txn = env.beginTransaction(null, null);\n            store = new JEDirectory(txn, index, blocks);\n\n            gen = new Random(seed);\n            start = new Date();\n\n            for (int i = 0; i < count; i++) {\n                String name = i + \".dat\";\n                store.deleteFile(name);\n            }\n        } catch (IOException e) {\n            txn.abort();\n            txn = null;\n            throw e;\n        } catch (DatabaseException e) {\n            if (txn != null) {\n                txn.abort();\n                txn = null;\n            }\n            throw e;\n        } finally {\n            if (txn != null)\n                txn.commit();\n\n            store.close();\n        }\n\n        end = new Date();\n\n        System.out.print(end.getTime() - start.getTime());\n        System.out.println(\" total milliseconds to delete\");\n\n        System.out.print(end.getTime() - veryStart.getTime());\n        System.out.println(\" total milliseconds\");\n    }\n\n","sourceOld":"    public void testBytes() throws Exception {\n        final int count = 250;\n        final int LENGTH_MASK = 0xffff;\n\n        Random r = newRandom();\n        final long seed = r.nextLong();\n        Random gen = new Random(seed);\n        int totalLength = 0;\n        int duration;\n        Date end;\n\n        Date veryStart = new Date();\n        Date start = new Date();\n        Transaction txn = null;\n        Directory store = null;\n\n        System.out.println(\"Writing files byte by byte\");\n\n        try {\n            txn = env.beginTransaction(null, null);\n            store = new JEDirectory(txn, index, blocks);\n\n            for (int i = 0; i < count; i++) {\n                String name = i + \".dat\";\n                int length = gen.nextInt() & LENGTH_MASK;\n                IndexOutput file = store.createOutput(name);\n\n                totalLength += length;\n\n                for (int j = 0; j < length; j++) {\n                    byte b = (byte) (gen.nextInt() & 0x7F);\n                    file.writeByte(b);\n                }\n\n                file.close();\n            }\n        } catch (IOException e) {\n            txn.abort();\n            txn = null;\n            throw e;\n        } catch (DatabaseException e) {\n            if (txn != null) {\n                txn.abort();\n                txn = null;\n            }\n            throw e;\n        } finally {\n            if (txn != null)\n                txn.commit();\n\n            store.close();\n        }\n\n        end = new Date();\n\n        duration = (int) (end.getTime() - start.getTime());\n        System.out.print(duration);\n        System.out.print(\" total milliseconds to create, \");\n        System.out.print(totalLength / duration);\n        System.out.println(\" kb/s\");\n\n        try {\n            txn = env.beginTransaction(null, null);\n            store = new JEDirectory(txn, index, blocks);\n\n            gen = new Random(seed);\n            start = new Date();\n\n            for (int i = 0; i < count; i++) {\n                String name = i + \".dat\";\n                int length = gen.nextInt() & LENGTH_MASK;\n                IndexInput file = store.openInput(name);\n\n                if (file.length() != length)\n                    throw new Exception(\"length incorrect\");\n\n                for (int j = 0; j < length; j++) {\n                    byte b = (byte) (gen.nextInt() & 0x7F);\n\n                    if (file.readByte() != b)\n                        throw new Exception(\"contents incorrect\");\n                }\n\n                file.close();\n            }\n        } catch (IOException e) {\n            txn.abort();\n            txn = null;\n            throw e;\n        } catch (DatabaseException e) {\n            if (txn != null) {\n                txn.abort();\n                txn = null;\n            }\n            throw e;\n        } finally {\n            if (txn != null)\n                txn.commit();\n\n            store.close();\n        }\n\n        end = new Date();\n\n        duration = (int) (end.getTime() - start.getTime());\n        System.out.print(duration);\n        System.out.print(\" total milliseconds to read, \");\n        System.out.print(totalLength / duration);\n        System.out.println(\" kb/s\");\n\n        try {\n            txn = env.beginTransaction(null, null);\n            store = new JEDirectory(txn, index, blocks);\n\n            gen = new Random(seed);\n            start = new Date();\n\n            for (int i = 0; i < count; i++) {\n                String name = i + \".dat\";\n                store.deleteFile(name);\n            }\n        } catch (IOException e) {\n            txn.abort();\n            txn = null;\n            throw e;\n        } catch (DatabaseException e) {\n            if (txn != null) {\n                txn.abort();\n                txn = null;\n            }\n            throw e;\n        } finally {\n            if (txn != null)\n                txn.commit();\n\n            store.close();\n        }\n\n        end = new Date();\n\n        System.out.print(end.getTime() - start.getTime());\n        System.out.println(\" total milliseconds to delete\");\n\n        System.out.print(end.getTime() - veryStart.getTime());\n        System.out.println(\" total milliseconds\");\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"42607aa380c892dc1ec0ab26e86a575c28e13618","date":1268641604,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/db/bdb-je/src/test/org/apache/lucene/store/je/JEStoreTest#testBytes().mjava","pathOld":"contrib/db/bdb-je/src/test/org/apache/lucene/store/je/JEStoreTest#testBytes().mjava","sourceNew":"    public void testBytes() throws Exception {\n        final int count = 250;\n        final int LENGTH_MASK = 0xffff;\n\n        Random r = newRandom();\n        final long seed = r.nextLong();\n        Random gen = new Random(seed);\n        int totalLength = 0;\n        int duration;\n        Date end;\n\n        Date veryStart = new Date();\n        Date start = new Date();\n        Transaction txn = env.beginTransaction(null, null);\n        Directory store = null;\n\n        if (VERBOSE) System.out.println(\"Writing files byte by byte\");\n\n        try {\n            store = new JEDirectory(txn, index, blocks);\n\n            for (int i = 0; i < count; i++) {\n                String name = i + \".dat\";\n                int length = gen.nextInt() & LENGTH_MASK;\n                IndexOutput file = store.createOutput(name);\n\n                totalLength += length;\n\n                for (int j = 0; j < length; j++) {\n                    byte b = (byte) (gen.nextInt() & 0x7F);\n                    file.writeByte(b);\n                }\n\n                file.close();\n            }\n        } catch (IOException e) {\n            txn.abort();\n            txn = null;\n            throw e;\n        } finally {\n            if (txn != null)\n                txn.commit();\n\n            store.close();\n        }\n\n        end = new Date();\n\n        if (VERBOSE) {\n          duration = (int) (end.getTime() - start.getTime());\n          System.out.print(duration);\n          System.out.print(\" total milliseconds to create, \");\n          System.out.print(totalLength / duration);\n          System.out.println(\" kb/s\");\n        }\n\n        try {\n            txn = env.beginTransaction(null, null);\n            store = new JEDirectory(txn, index, blocks);\n\n            gen = new Random(seed);\n            start = new Date();\n\n            for (int i = 0; i < count; i++) {\n                String name = i + \".dat\";\n                int length = gen.nextInt() & LENGTH_MASK;\n                IndexInput file = store.openInput(name);\n\n                if (file.length() != length)\n                    throw new Exception(\"length incorrect\");\n\n                for (int j = 0; j < length; j++) {\n                    byte b = (byte) (gen.nextInt() & 0x7F);\n\n                    if (file.readByte() != b)\n                        throw new Exception(\"contents incorrect\");\n                }\n\n                file.close();\n            }\n        } catch (IOException e) {\n            txn.abort();\n            txn = null;\n            throw e;\n        } catch (DatabaseException e) {\n            if (txn != null) {\n                txn.abort();\n                txn = null;\n            }\n            throw e;\n        } finally {\n            if (txn != null)\n                txn.commit();\n\n            store.close();\n        }\n\n        end = new Date();\n\n        if (VERBOSE) {\n          duration = (int) (end.getTime() - start.getTime());\n          System.out.print(duration);\n          System.out.print(\" total milliseconds to read, \");\n          System.out.print(totalLength / duration);\n          System.out.println(\" kb/s\");\n        }\n\n        try {\n            txn = env.beginTransaction(null, null);\n            store = new JEDirectory(txn, index, blocks);\n\n            gen = new Random(seed);\n            start = new Date();\n\n            for (int i = 0; i < count; i++) {\n                String name = i + \".dat\";\n                store.deleteFile(name);\n            }\n        } catch (IOException e) {\n            txn.abort();\n            txn = null;\n            throw e;\n        } catch (DatabaseException e) {\n            if (txn != null) {\n                txn.abort();\n                txn = null;\n            }\n            throw e;\n        } finally {\n            if (txn != null)\n                txn.commit();\n\n            store.close();\n        }\n\n        end = new Date();\n\n        if (VERBOSE) {\n          System.out.print(end.getTime() - start.getTime());\n          System.out.println(\" total milliseconds to delete\");\n\n          System.out.print(end.getTime() - veryStart.getTime());\n          System.out.println(\" total milliseconds\");\n        }\n    }\n\n","sourceOld":"    public void testBytes() throws Exception {\n        final int count = 250;\n        final int LENGTH_MASK = 0xffff;\n\n        Random r = newRandom();\n        final long seed = r.nextLong();\n        Random gen = new Random(seed);\n        int totalLength = 0;\n        int duration;\n        Date end;\n\n        Date veryStart = new Date();\n        Date start = new Date();\n        Transaction txn = env.beginTransaction(null, null);\n        Directory store = null;\n\n        System.out.println(\"Writing files byte by byte\");\n\n        try {\n            store = new JEDirectory(txn, index, blocks);\n\n            for (int i = 0; i < count; i++) {\n                String name = i + \".dat\";\n                int length = gen.nextInt() & LENGTH_MASK;\n                IndexOutput file = store.createOutput(name);\n\n                totalLength += length;\n\n                for (int j = 0; j < length; j++) {\n                    byte b = (byte) (gen.nextInt() & 0x7F);\n                    file.writeByte(b);\n                }\n\n                file.close();\n            }\n        } catch (IOException e) {\n            txn.abort();\n            txn = null;\n            throw e;\n        } finally {\n            if (txn != null)\n                txn.commit();\n\n            store.close();\n        }\n\n        end = new Date();\n\n        duration = (int) (end.getTime() - start.getTime());\n        System.out.print(duration);\n        System.out.print(\" total milliseconds to create, \");\n        System.out.print(totalLength / duration);\n        System.out.println(\" kb/s\");\n\n        try {\n            txn = env.beginTransaction(null, null);\n            store = new JEDirectory(txn, index, blocks);\n\n            gen = new Random(seed);\n            start = new Date();\n\n            for (int i = 0; i < count; i++) {\n                String name = i + \".dat\";\n                int length = gen.nextInt() & LENGTH_MASK;\n                IndexInput file = store.openInput(name);\n\n                if (file.length() != length)\n                    throw new Exception(\"length incorrect\");\n\n                for (int j = 0; j < length; j++) {\n                    byte b = (byte) (gen.nextInt() & 0x7F);\n\n                    if (file.readByte() != b)\n                        throw new Exception(\"contents incorrect\");\n                }\n\n                file.close();\n            }\n        } catch (IOException e) {\n            txn.abort();\n            txn = null;\n            throw e;\n        } catch (DatabaseException e) {\n            if (txn != null) {\n                txn.abort();\n                txn = null;\n            }\n            throw e;\n        } finally {\n            if (txn != null)\n                txn.commit();\n\n            store.close();\n        }\n\n        end = new Date();\n\n        duration = (int) (end.getTime() - start.getTime());\n        System.out.print(duration);\n        System.out.print(\" total milliseconds to read, \");\n        System.out.print(totalLength / duration);\n        System.out.println(\" kb/s\");\n\n        try {\n            txn = env.beginTransaction(null, null);\n            store = new JEDirectory(txn, index, blocks);\n\n            gen = new Random(seed);\n            start = new Date();\n\n            for (int i = 0; i < count; i++) {\n                String name = i + \".dat\";\n                store.deleteFile(name);\n            }\n        } catch (IOException e) {\n            txn.abort();\n            txn = null;\n            throw e;\n        } catch (DatabaseException e) {\n            if (txn != null) {\n                txn.abort();\n                txn = null;\n            }\n            throw e;\n        } finally {\n            if (txn != null)\n                txn.commit();\n\n            store.close();\n        }\n\n        end = new Date();\n\n        System.out.print(end.getTime() - start.getTime());\n        System.out.println(\" total milliseconds to delete\");\n\n        System.out.print(end.getTime() - veryStart.getTime());\n        System.out.println(\" total milliseconds\");\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/db/bdb-je/src/test/org/apache/lucene/store/je/JEStoreTest#testBytes().mjava","pathOld":"contrib/db/bdb-je/src/test/org/apache/lucene/store/je/JEStoreTest#testBytes().mjava","sourceNew":"    public void testBytes() throws Exception {\n        final int count = 250;\n        final int LENGTH_MASK = 0xffff;\n\n        Random r = newRandom();\n        final long seed = r.nextLong();\n        Random gen = new Random(seed);\n        int totalLength = 0;\n        int duration;\n        Date end;\n\n        Date veryStart = new Date();\n        Date start = new Date();\n        Transaction txn = env.beginTransaction(null, null);\n        Directory store = null;\n\n        if (VERBOSE) System.out.println(\"Writing files byte by byte\");\n\n        try {\n            store = new JEDirectory(txn, index, blocks);\n\n            for (int i = 0; i < count; i++) {\n                String name = i + \".dat\";\n                int length = gen.nextInt() & LENGTH_MASK;\n                IndexOutput file = store.createOutput(name);\n\n                totalLength += length;\n\n                for (int j = 0; j < length; j++) {\n                    byte b = (byte) (gen.nextInt() & 0x7F);\n                    file.writeByte(b);\n                }\n\n                file.close();\n            }\n        } catch (IOException e) {\n            txn.abort();\n            txn = null;\n            throw e;\n        } finally {\n            if (txn != null)\n                txn.commit();\n\n            store.close();\n        }\n\n        end = new Date();\n\n        if (VERBOSE) {\n          duration = (int) (end.getTime() - start.getTime());\n          System.out.print(duration);\n          System.out.print(\" total milliseconds to create, \");\n          System.out.print(totalLength / duration);\n          System.out.println(\" kb/s\");\n        }\n\n        try {\n            txn = env.beginTransaction(null, null);\n            store = new JEDirectory(txn, index, blocks);\n\n            gen = new Random(seed);\n            start = new Date();\n\n            for (int i = 0; i < count; i++) {\n                String name = i + \".dat\";\n                int length = gen.nextInt() & LENGTH_MASK;\n                IndexInput file = store.openInput(name);\n\n                if (file.length() != length)\n                    throw new Exception(\"length incorrect\");\n\n                for (int j = 0; j < length; j++) {\n                    byte b = (byte) (gen.nextInt() & 0x7F);\n\n                    if (file.readByte() != b)\n                        throw new Exception(\"contents incorrect\");\n                }\n\n                file.close();\n            }\n        } catch (IOException e) {\n            txn.abort();\n            txn = null;\n            throw e;\n        } catch (DatabaseException e) {\n            if (txn != null) {\n                txn.abort();\n                txn = null;\n            }\n            throw e;\n        } finally {\n            if (txn != null)\n                txn.commit();\n\n            store.close();\n        }\n\n        end = new Date();\n\n        if (VERBOSE) {\n          duration = (int) (end.getTime() - start.getTime());\n          System.out.print(duration);\n          System.out.print(\" total milliseconds to read, \");\n          System.out.print(totalLength / duration);\n          System.out.println(\" kb/s\");\n        }\n\n        try {\n            txn = env.beginTransaction(null, null);\n            store = new JEDirectory(txn, index, blocks);\n\n            gen = new Random(seed);\n            start = new Date();\n\n            for (int i = 0; i < count; i++) {\n                String name = i + \".dat\";\n                store.deleteFile(name);\n            }\n        } catch (IOException e) {\n            txn.abort();\n            txn = null;\n            throw e;\n        } catch (DatabaseException e) {\n            if (txn != null) {\n                txn.abort();\n                txn = null;\n            }\n            throw e;\n        } finally {\n            if (txn != null)\n                txn.commit();\n\n            store.close();\n        }\n\n        end = new Date();\n\n        if (VERBOSE) {\n          System.out.print(end.getTime() - start.getTime());\n          System.out.println(\" total milliseconds to delete\");\n\n          System.out.print(end.getTime() - veryStart.getTime());\n          System.out.println(\" total milliseconds\");\n        }\n    }\n\n","sourceOld":"    public void testBytes() throws Exception {\n        final int count = 250;\n        final int LENGTH_MASK = 0xffff;\n\n        Random r = newRandom();\n        final long seed = r.nextLong();\n        Random gen = new Random(seed);\n        int totalLength = 0;\n        int duration;\n        Date end;\n\n        Date veryStart = new Date();\n        Date start = new Date();\n        Transaction txn = env.beginTransaction(null, null);\n        Directory store = null;\n\n        if (VERBOSE) System.out.println(\"Writing files byte by byte\");\n\n        try {\n            store = new JEDirectory(txn, index, blocks);\n\n            for (int i = 0; i < count; i++) {\n                String name = i + \".dat\";\n                int length = gen.nextInt() & LENGTH_MASK;\n                IndexOutput file = store.createOutput(name);\n\n                totalLength += length;\n\n                for (int j = 0; j < length; j++) {\n                    byte b = (byte) (gen.nextInt() & 0x7F);\n                    file.writeByte(b);\n                }\n\n                file.close();\n            }\n        } catch (IOException e) {\n            txn.abort();\n            txn = null;\n            throw e;\n        } finally {\n            if (txn != null)\n                txn.commit();\n\n            store.close();\n        }\n\n        end = new Date();\n\n        if (VERBOSE) {\n          duration = (int) (end.getTime() - start.getTime());\n          System.out.print(duration);\n          System.out.print(\" total milliseconds to create, \");\n          System.out.print(totalLength / duration);\n          System.out.println(\" kb/s\");\n        }\n\n        try {\n            txn = env.beginTransaction(null, null);\n            store = new JEDirectory(txn, index, blocks);\n\n            gen = new Random(seed);\n            start = new Date();\n\n            for (int i = 0; i < count; i++) {\n                String name = i + \".dat\";\n                int length = gen.nextInt() & LENGTH_MASK;\n                IndexInput file = store.openInput(name);\n\n                if (file.length() != length)\n                    throw new Exception(\"length incorrect\");\n\n                for (int j = 0; j < length; j++) {\n                    byte b = (byte) (gen.nextInt() & 0x7F);\n\n                    if (file.readByte() != b)\n                        throw new Exception(\"contents incorrect\");\n                }\n\n                file.close();\n            }\n        } catch (IOException e) {\n            txn.abort();\n            txn = null;\n            throw e;\n        } catch (DatabaseException e) {\n            if (txn != null) {\n                txn.abort();\n                txn = null;\n            }\n            throw e;\n        } finally {\n            if (txn != null)\n                txn.commit();\n\n            store.close();\n        }\n\n        end = new Date();\n\n        if (VERBOSE) {\n          duration = (int) (end.getTime() - start.getTime());\n          System.out.print(duration);\n          System.out.print(\" total milliseconds to read, \");\n          System.out.print(totalLength / duration);\n          System.out.println(\" kb/s\");\n        }\n\n        try {\n            txn = env.beginTransaction(null, null);\n            store = new JEDirectory(txn, index, blocks);\n\n            gen = new Random(seed);\n            start = new Date();\n\n            for (int i = 0; i < count; i++) {\n                String name = i + \".dat\";\n                store.deleteFile(name);\n            }\n        } catch (IOException e) {\n            txn.abort();\n            txn = null;\n            throw e;\n        } catch (DatabaseException e) {\n            if (txn != null) {\n                txn.abort();\n                txn = null;\n            }\n            throw e;\n        } finally {\n            if (txn != null)\n                txn.commit();\n\n            store.close();\n        }\n\n        end = new Date();\n\n        if (VERBOSE) {\n          System.out.print(end.getTime() - start.getTime());\n          System.out.println(\" total milliseconds to delete\");\n\n          System.out.print(end.getTime() - veryStart.getTime());\n          System.out.println(\" total milliseconds\");\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"cb1066f2afe9450585d0d10063ea4450085236f1":["25e0aaaec0defe1bacaadfe8f619322269457753"],"726b696258060f802944722ff3cbb190dd5140ac":["87fc6f159522f12e67225691468cbf3d11be8590"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"87fc6f159522f12e67225691468cbf3d11be8590":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"42607aa380c892dc1ec0ab26e86a575c28e13618":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["cb1066f2afe9450585d0d10063ea4450085236f1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["42607aa380c892dc1ec0ab26e86a575c28e13618"],"25e0aaaec0defe1bacaadfe8f619322269457753":["726b696258060f802944722ff3cbb190dd5140ac"]},"commit2Childs":{"cb1066f2afe9450585d0d10063ea4450085236f1":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"],"726b696258060f802944722ff3cbb190dd5140ac":["25e0aaaec0defe1bacaadfe8f619322269457753"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["87fc6f159522f12e67225691468cbf3d11be8590"],"87fc6f159522f12e67225691468cbf3d11be8590":["726b696258060f802944722ff3cbb190dd5140ac"],"42607aa380c892dc1ec0ab26e86a575c28e13618":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["42607aa380c892dc1ec0ab26e86a575c28e13618"],"25e0aaaec0defe1bacaadfe8f619322269457753":["cb1066f2afe9450585d0d10063ea4450085236f1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}