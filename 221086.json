{"path":"solr/core/src/java/org/apache/solr/schema/ManagedIndexSchema#addCopyFields(Map[String,Collection[String]],boolean).mjava","commits":[{"id":"4a54d9ede1b7f2f026639186eb07f3f314d87d9a","date":1412176848,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/ManagedIndexSchema#addCopyFields(Map[String,Collection[String]],boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/ManagedIndexSchema#addCopyFields(Map[String,Collection[String]]).mjava","sourceNew":"  @Override\n  public ManagedIndexSchema addCopyFields(Map<String, Collection<String>> copyFields, boolean persist) {\n    ManagedIndexSchema newSchema = null;\n    if (isMutable) {\n      boolean success = false;\n      newSchema = shallowCopy(true);\n      for (Map.Entry<String, Collection<String>> entry : copyFields.entrySet()) {\n        //Key is the name of the field, values are the destinations\n\n        for (String destination : entry.getValue()) {\n          newSchema.registerCopyField(entry.getKey(), destination);\n        }\n      }\n      //TODO: move this common stuff out to shared methods\n      // Run the callbacks on SchemaAware now that everything else is done\n      for (SchemaAware aware : newSchema.schemaAware) {\n        aware.inform(newSchema);\n      }\n      newSchema.refreshAnalyzers();\n      if(persist) {\n        success = newSchema.persistManagedSchema(false); // don't just create - update it if it already exists\n        if (success) {\n          log.debug(\"Added copy fields for {} sources\", copyFields.size());\n        } else {\n          log.error(\"Failed to add copy fields for {} sources\", copyFields.size());\n        }\n      }\n    }\n    return newSchema;\n  }\n\n","sourceOld":"  @Override\n  public ManagedIndexSchema addCopyFields(Map<String, Collection<String>> copyFields) {\n    ManagedIndexSchema newSchema = null;\n    if (isMutable) {\n      boolean success = false;\n      newSchema = shallowCopy(true);\n      for (Map.Entry<String, Collection<String>> entry : copyFields.entrySet()) {\n        //Key is the name of the field, values are the destinations\n\n        for (String destination : entry.getValue()) {\n          newSchema.registerCopyField(entry.getKey(), destination);\n        }\n      }\n      //TODO: move this common stuff out to shared methods\n      // Run the callbacks on SchemaAware now that everything else is done\n      for (SchemaAware aware : newSchema.schemaAware) {\n        aware.inform(newSchema);\n      }\n      newSchema.refreshAnalyzers();\n      success = newSchema.persistManagedSchema(false); // don't just create - update it if it already exists\n      if (success) {\n        log.debug(\"Added copy fields for {} sources\", copyFields.size());\n      } else {\n        log.error(\"Failed to add copy fields for {} sources\", copyFields.size());\n      }\n    }\n    return newSchema;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d9a47902d6207303f5ed3e7aaca62ca33433af66","date":1412435312,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/ManagedIndexSchema#addCopyFields(Map[String,Collection[String]],boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/ManagedIndexSchema#addCopyFields(Map[String,Collection[String]]).mjava","sourceNew":"  @Override\n  public ManagedIndexSchema addCopyFields(Map<String, Collection<String>> copyFields, boolean persist) {\n    ManagedIndexSchema newSchema = null;\n    if (isMutable) {\n      boolean success = false;\n      newSchema = shallowCopy(true);\n      for (Map.Entry<String, Collection<String>> entry : copyFields.entrySet()) {\n        //Key is the name of the field, values are the destinations\n\n        for (String destination : entry.getValue()) {\n          newSchema.registerCopyField(entry.getKey(), destination);\n        }\n      }\n      //TODO: move this common stuff out to shared methods\n      // Run the callbacks on SchemaAware now that everything else is done\n      for (SchemaAware aware : newSchema.schemaAware) {\n        aware.inform(newSchema);\n      }\n      newSchema.refreshAnalyzers();\n      if(persist) {\n        success = newSchema.persistManagedSchema(false); // don't just create - update it if it already exists\n        if (success) {\n          log.debug(\"Added copy fields for {} sources\", copyFields.size());\n        } else {\n          log.error(\"Failed to add copy fields for {} sources\", copyFields.size());\n        }\n      }\n    }\n    return newSchema;\n  }\n\n","sourceOld":"  @Override\n  public ManagedIndexSchema addCopyFields(Map<String, Collection<String>> copyFields) {\n    ManagedIndexSchema newSchema = null;\n    if (isMutable) {\n      boolean success = false;\n      newSchema = shallowCopy(true);\n      for (Map.Entry<String, Collection<String>> entry : copyFields.entrySet()) {\n        //Key is the name of the field, values are the destinations\n\n        for (String destination : entry.getValue()) {\n          newSchema.registerCopyField(entry.getKey(), destination);\n        }\n      }\n      //TODO: move this common stuff out to shared methods\n      // Run the callbacks on SchemaAware now that everything else is done\n      for (SchemaAware aware : newSchema.schemaAware) {\n        aware.inform(newSchema);\n      }\n      newSchema.refreshAnalyzers();\n      success = newSchema.persistManagedSchema(false); // don't just create - update it if it already exists\n      if (success) {\n        log.debug(\"Added copy fields for {} sources\", copyFields.size());\n      } else {\n        log.error(\"Failed to add copy fields for {} sources\", copyFields.size());\n      }\n    }\n    return newSchema;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eeeea2295d6355a29e259130a5c48ace73022d7c","date":1426569216,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/ManagedIndexSchema#addCopyFields(Map[String,Collection[String]],boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/ManagedIndexSchema#addCopyFields(Map[String,Collection[String]],boolean).mjava","sourceNew":"  @Override\n  public ManagedIndexSchema addCopyFields(Map<String, Collection<String>> copyFields, boolean persist) {\n    ManagedIndexSchema newSchema;\n    if (isMutable) {\n      boolean success = false;\n      newSchema = shallowCopy(true);\n      for (Map.Entry<String, Collection<String>> entry : copyFields.entrySet()) {\n        //Key is the name of the field, values are the destinations\n\n        for (String destination : entry.getValue()) {\n          newSchema.registerCopyField(entry.getKey(), destination);\n        }\n      }\n      //TODO: move this common stuff out to shared methods\n      // Run the callbacks on SchemaAware now that everything else is done\n      for (SchemaAware aware : newSchema.schemaAware) {\n        aware.inform(newSchema);\n      }\n      newSchema.refreshAnalyzers();\n      if(persist) {\n        success = newSchema.persistManagedSchema(false); // don't just create - update it if it already exists\n        if (success) {\n          log.debug(\"Added copy fields for {} sources\", copyFields.size());\n        } else {\n          log.error(\"Failed to add copy fields for {} sources\", copyFields.size());\n        }\n      }\n    } else {\n      String msg = \"This ManagedIndexSchema is not mutable.\";\n      log.error(msg);\n      throw new SolrException(ErrorCode.SERVER_ERROR, msg);\n    }\n    return newSchema;\n  }\n\n","sourceOld":"  @Override\n  public ManagedIndexSchema addCopyFields(Map<String, Collection<String>> copyFields, boolean persist) {\n    ManagedIndexSchema newSchema = null;\n    if (isMutable) {\n      boolean success = false;\n      newSchema = shallowCopy(true);\n      for (Map.Entry<String, Collection<String>> entry : copyFields.entrySet()) {\n        //Key is the name of the field, values are the destinations\n\n        for (String destination : entry.getValue()) {\n          newSchema.registerCopyField(entry.getKey(), destination);\n        }\n      }\n      //TODO: move this common stuff out to shared methods\n      // Run the callbacks on SchemaAware now that everything else is done\n      for (SchemaAware aware : newSchema.schemaAware) {\n        aware.inform(newSchema);\n      }\n      newSchema.refreshAnalyzers();\n      if(persist) {\n        success = newSchema.persistManagedSchema(false); // don't just create - update it if it already exists\n        if (success) {\n          log.debug(\"Added copy fields for {} sources\", copyFields.size());\n        } else {\n          log.error(\"Failed to add copy fields for {} sources\", copyFields.size());\n        }\n      }\n    }\n    return newSchema;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/ManagedIndexSchema#addCopyFields(Map[String,Collection[String]],boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/ManagedIndexSchema#addCopyFields(Map[String,Collection[String]],boolean).mjava","sourceNew":"  @Override\n  public ManagedIndexSchema addCopyFields(Map<String, Collection<String>> copyFields, boolean persist) {\n    ManagedIndexSchema newSchema;\n    if (isMutable) {\n      boolean success = false;\n      newSchema = shallowCopy(true);\n      for (Map.Entry<String, Collection<String>> entry : copyFields.entrySet()) {\n        //Key is the name of the field, values are the destinations\n\n        for (String destination : entry.getValue()) {\n          newSchema.registerCopyField(entry.getKey(), destination);\n        }\n      }\n      //TODO: move this common stuff out to shared methods\n      // Run the callbacks on SchemaAware now that everything else is done\n      for (SchemaAware aware : newSchema.schemaAware) {\n        aware.inform(newSchema);\n      }\n      newSchema.refreshAnalyzers();\n      if(persist) {\n        success = newSchema.persistManagedSchema(false); // don't just create - update it if it already exists\n        if (success) {\n          log.debug(\"Added copy fields for {} sources\", copyFields.size());\n        } else {\n          log.error(\"Failed to add copy fields for {} sources\", copyFields.size());\n        }\n      }\n    } else {\n      String msg = \"This ManagedIndexSchema is not mutable.\";\n      log.error(msg);\n      throw new SolrException(ErrorCode.SERVER_ERROR, msg);\n    }\n    return newSchema;\n  }\n\n","sourceOld":"  @Override\n  public ManagedIndexSchema addCopyFields(Map<String, Collection<String>> copyFields, boolean persist) {\n    ManagedIndexSchema newSchema = null;\n    if (isMutable) {\n      boolean success = false;\n      newSchema = shallowCopy(true);\n      for (Map.Entry<String, Collection<String>> entry : copyFields.entrySet()) {\n        //Key is the name of the field, values are the destinations\n\n        for (String destination : entry.getValue()) {\n          newSchema.registerCopyField(entry.getKey(), destination);\n        }\n      }\n      //TODO: move this common stuff out to shared methods\n      // Run the callbacks on SchemaAware now that everything else is done\n      for (SchemaAware aware : newSchema.schemaAware) {\n        aware.inform(newSchema);\n      }\n      newSchema.refreshAnalyzers();\n      if(persist) {\n        success = newSchema.persistManagedSchema(false); // don't just create - update it if it already exists\n        if (success) {\n          log.debug(\"Added copy fields for {} sources\", copyFields.size());\n        } else {\n          log.error(\"Failed to add copy fields for {} sources\", copyFields.size());\n        }\n      }\n    }\n    return newSchema;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9d62f72d1c60d2be239222de52d5e7b516da5f6f","date":1428554550,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/ManagedIndexSchema#addCopyFields(Map[String,Collection[String]],boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/ManagedIndexSchema#addCopyFields(Map[String,Collection[String]],boolean).mjava","sourceNew":"  @Override\n  public ManagedIndexSchema addCopyFields(Map<String, Collection<String>> copyFields, boolean persist) {\n    ManagedIndexSchema newSchema;\n    if (isMutable) {\n      boolean success = false;\n      newSchema = shallowCopy(true);\n      for (Map.Entry<String, Collection<String>> entry : copyFields.entrySet()) {\n        //Key is the name of the field, values are the destinations\n\n        for (String destination : entry.getValue()) {\n          newSchema.registerCopyField(entry.getKey(), destination);\n        }\n      }\n      newSchema.postReadInform();\n      newSchema.refreshAnalyzers();\n      if(persist) {\n        success = newSchema.persistManagedSchema(false); // don't just create - update it if it already exists\n        if (success) {\n          log.debug(\"Added copy fields for {} sources\", copyFields.size());\n        } else {\n          log.error(\"Failed to add copy fields for {} sources\", copyFields.size());\n        }\n      }\n    } else {\n      String msg = \"This ManagedIndexSchema is not mutable.\";\n      log.error(msg);\n      throw new SolrException(ErrorCode.SERVER_ERROR, msg);\n    }\n    return newSchema;\n  }\n\n","sourceOld":"  @Override\n  public ManagedIndexSchema addCopyFields(Map<String, Collection<String>> copyFields, boolean persist) {\n    ManagedIndexSchema newSchema;\n    if (isMutable) {\n      boolean success = false;\n      newSchema = shallowCopy(true);\n      for (Map.Entry<String, Collection<String>> entry : copyFields.entrySet()) {\n        //Key is the name of the field, values are the destinations\n\n        for (String destination : entry.getValue()) {\n          newSchema.registerCopyField(entry.getKey(), destination);\n        }\n      }\n      //TODO: move this common stuff out to shared methods\n      // Run the callbacks on SchemaAware now that everything else is done\n      for (SchemaAware aware : newSchema.schemaAware) {\n        aware.inform(newSchema);\n      }\n      newSchema.refreshAnalyzers();\n      if(persist) {\n        success = newSchema.persistManagedSchema(false); // don't just create - update it if it already exists\n        if (success) {\n          log.debug(\"Added copy fields for {} sources\", copyFields.size());\n        } else {\n          log.error(\"Failed to add copy fields for {} sources\", copyFields.size());\n        }\n      }\n    } else {\n      String msg = \"This ManagedIndexSchema is not mutable.\";\n      log.error(msg);\n      throw new SolrException(ErrorCode.SERVER_ERROR, msg);\n    }\n    return newSchema;\n  }\n\n","bugFix":["a54972b2387f87fdd92600308f9a0d477b1f53b0"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9df8125ba9193a2e2e285ed92157810b1952a244","date":1587326330,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/ManagedIndexSchema#addCopyFields(Map[String,Collection[String]],boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/ManagedIndexSchema#addCopyFields(Map[String,Collection[String]],boolean).mjava","sourceNew":"  @Override\n  public ManagedIndexSchema addCopyFields(Map<String, Collection<String>> copyFields, boolean persist) {\n    ManagedIndexSchema newSchema;\n    if (isMutable) {\n      boolean success = false;\n      newSchema = shallowCopy(true);\n      for (Map.Entry<String, Collection<String>> entry : copyFields.entrySet()) {\n        //Key is the name of the field, values are the destinations\n\n        for (String destination : entry.getValue()) {\n          newSchema.registerCopyField(entry.getKey(), destination);\n        }\n      }\n      newSchema.postReadInform();\n      newSchema.refreshAnalyzers();\n      if(persist) {\n        success = newSchema.persistManagedSchema(false); // don't just create - update it if it already exists\n        if (success) {\n          if (log.isDebugEnabled()) {\n            log.debug(\"Added copy fields for {} sources\", copyFields.size());\n          }\n        } else {\n          log.error(\"Failed to add copy fields for {} sources\", copyFields.size());\n        }\n      }\n    } else {\n      String msg = \"This ManagedIndexSchema is not mutable.\";\n      log.error(msg);\n      throw new SolrException(ErrorCode.SERVER_ERROR, msg);\n    }\n    return newSchema;\n  }\n\n","sourceOld":"  @Override\n  public ManagedIndexSchema addCopyFields(Map<String, Collection<String>> copyFields, boolean persist) {\n    ManagedIndexSchema newSchema;\n    if (isMutable) {\n      boolean success = false;\n      newSchema = shallowCopy(true);\n      for (Map.Entry<String, Collection<String>> entry : copyFields.entrySet()) {\n        //Key is the name of the field, values are the destinations\n\n        for (String destination : entry.getValue()) {\n          newSchema.registerCopyField(entry.getKey(), destination);\n        }\n      }\n      newSchema.postReadInform();\n      newSchema.refreshAnalyzers();\n      if(persist) {\n        success = newSchema.persistManagedSchema(false); // don't just create - update it if it already exists\n        if (success) {\n          log.debug(\"Added copy fields for {} sources\", copyFields.size());\n        } else {\n          log.error(\"Failed to add copy fields for {} sources\", copyFields.size());\n        }\n      }\n    } else {\n      String msg = \"This ManagedIndexSchema is not mutable.\";\n      log.error(msg);\n      throw new SolrException(ErrorCode.SERVER_ERROR, msg);\n    }\n    return newSchema;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["4a54d9ede1b7f2f026639186eb07f3f314d87d9a","eeeea2295d6355a29e259130a5c48ace73022d7c"],"9d62f72d1c60d2be239222de52d5e7b516da5f6f":["eeeea2295d6355a29e259130a5c48ace73022d7c"],"eeeea2295d6355a29e259130a5c48ace73022d7c":["4a54d9ede1b7f2f026639186eb07f3f314d87d9a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4a54d9ede1b7f2f026639186eb07f3f314d87d9a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d9a47902d6207303f5ed3e7aaca62ca33433af66":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4a54d9ede1b7f2f026639186eb07f3f314d87d9a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9df8125ba9193a2e2e285ed92157810b1952a244"],"9df8125ba9193a2e2e285ed92157810b1952a244":["9d62f72d1c60d2be239222de52d5e7b516da5f6f"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"9d62f72d1c60d2be239222de52d5e7b516da5f6f":["9df8125ba9193a2e2e285ed92157810b1952a244"],"eeeea2295d6355a29e259130a5c48ace73022d7c":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","9d62f72d1c60d2be239222de52d5e7b516da5f6f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4a54d9ede1b7f2f026639186eb07f3f314d87d9a","d9a47902d6207303f5ed3e7aaca62ca33433af66"],"4a54d9ede1b7f2f026639186eb07f3f314d87d9a":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","eeeea2295d6355a29e259130a5c48ace73022d7c","d9a47902d6207303f5ed3e7aaca62ca33433af66"],"d9a47902d6207303f5ed3e7aaca62ca33433af66":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9df8125ba9193a2e2e285ed92157810b1952a244":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","d9a47902d6207303f5ed3e7aaca62ca33433af66","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}