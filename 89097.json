{"path":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/GeoExactCircleTest#testRandom_LUCENE8054().mjava","commits":[{"id":"a7a6109173bbca417edffdfc7bf9f2e35fef63ab","date":1511856065,"type":1,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/GeoExactCircleTest#testRandom_LUCENE8054().mjava","pathOld":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/RandomGeoShapeRelationshipTest#testRandom_LUCENE8054().mjava","sourceNew":"  /**\n   * in LUCENE-8054 we have problems with exact circles that have\n   * edges that are close together. This test creates those circles with the same\n   * center and slightly different radius.\n   */\n  @Test\n  @Repeat(iterations = 100)\n  public void testRandom_LUCENE8054() {\n    PlanetModel planetModel = PlanetModel.WGS84;\n    GeoCircle circle1 = (GeoCircle) randomGeoAreaShape(EXACT_CIRCLE, planetModel);\n    // new radius, a bit smaller than the generated one!\n    double radius = circle1.getRadius() *  (1 - 0.01 * random().nextDouble());\n    //circle with same center and new radius\n    GeoCircle circle2 = GeoCircleFactory.makeExactGeoCircle(planetModel,\n        circle1.getCenter().getLatitude(),\n        circle1.getCenter().getLongitude(),\n        radius, 1e-5 );\n    StringBuilder b = new StringBuilder();\n    b.append(\"circle1: \" + circle1 + \"\\n\");\n    b.append(\"circle2: \" + circle2);\n    //It cannot be disjoint, same center!\n    assertTrue(b.toString(), circle1.getRelationship(circle2) != GeoArea.DISJOINT);\n  }\n\n","sourceOld":"  /**\n   * in LUCENE-8054 we have problems with exact circles that have\n   * edges that are close together. This test creates those circles with the same\n   * center and slightly different radius. It is able to reproduce\n   * the problem.\n   */\n  @Test\n  @Repeat(iterations = 100)\n  public void testRandom_LUCENE8054() {\n    PlanetModel planetModel = PlanetModel.WGS84;\n    GeoCircle circle1 = (GeoCircle) randomGeoAreaShape(EXACT_CIRCLE, planetModel);\n    // new radius, a bit smaller than the generated one!\n    double radius = circle1.getRadius() *  (1 - 0.01 * random().nextDouble());\n    //circle with same center and new radius\n    GeoCircle circle2 = GeoCircleFactory.makeExactGeoCircle(planetModel,\n        circle1.getCenter().getLatitude(),\n        circle1.getCenter().getLongitude(),\n        radius, 1e-5 );\n    StringBuilder b = new StringBuilder();\n    b.append(\"circle1: \" + circle1 + \"\\n\");\n    b.append(\"circle2: \" + circle2);\n    //It cannot be disjoint, same center!\n    assertTrue(b.toString(), circle1.getRelationship(circle2) != GeoArea.DISJOINT);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a03d351abb1e487ff1b7feaacc286da105d59a04","date":1512729671,"type":5,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/GeoExactCircleTest#testRandomLUCENE8054().mjava","pathOld":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/GeoExactCircleTest#testRandom_LUCENE8054().mjava","sourceNew":"  /**\n   * in LUCENE-8054 we have problems with exact circles that have\n   * edges that are close together. This test creates those circles with the same\n   * center and slightly different radius.\n   */\n  @Test\n  @Repeat(iterations = 100)\n  public void testRandomLUCENE8054() {\n    PlanetModel planetModel = randomPlanetModel();\n    GeoCircle circle1 = (GeoCircle) randomGeoAreaShape(EXACT_CIRCLE, planetModel);\n    // new radius, a bit smaller than the generated one!\n    double radius = circle1.getRadius() *  (1 - 0.01 * random().nextDouble());\n    //circle with same center and new radius\n    GeoCircle circle2 = GeoCircleFactory.makeExactGeoCircle(planetModel,\n        circle1.getCenter().getLatitude(),\n        circle1.getCenter().getLongitude(),\n        radius, 1e-5 );\n    StringBuilder b = new StringBuilder();\n    b.append(\"circle1: \" + circle1 + \"\\n\");\n    b.append(\"circle2: \" + circle2);\n    //It cannot be disjoint, same center!\n    assertTrue(b.toString(), circle1.getRelationship(circle2) != GeoArea.DISJOINT);\n  }\n\n","sourceOld":"  /**\n   * in LUCENE-8054 we have problems with exact circles that have\n   * edges that are close together. This test creates those circles with the same\n   * center and slightly different radius.\n   */\n  @Test\n  @Repeat(iterations = 100)\n  public void testRandom_LUCENE8054() {\n    PlanetModel planetModel = PlanetModel.WGS84;\n    GeoCircle circle1 = (GeoCircle) randomGeoAreaShape(EXACT_CIRCLE, planetModel);\n    // new radius, a bit smaller than the generated one!\n    double radius = circle1.getRadius() *  (1 - 0.01 * random().nextDouble());\n    //circle with same center and new radius\n    GeoCircle circle2 = GeoCircleFactory.makeExactGeoCircle(planetModel,\n        circle1.getCenter().getLatitude(),\n        circle1.getCenter().getLongitude(),\n        radius, 1e-5 );\n    StringBuilder b = new StringBuilder();\n    b.append(\"circle1: \" + circle1 + \"\\n\");\n    b.append(\"circle2: \" + circle2);\n    //It cannot be disjoint, same center!\n    assertTrue(b.toString(), circle1.getRelationship(circle2) != GeoArea.DISJOINT);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a03d351abb1e487ff1b7feaacc286da105d59a04":["a7a6109173bbca417edffdfc7bf9f2e35fef63ab"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a03d351abb1e487ff1b7feaacc286da105d59a04"],"a7a6109173bbca417edffdfc7bf9f2e35fef63ab":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a7a6109173bbca417edffdfc7bf9f2e35fef63ab"],"a03d351abb1e487ff1b7feaacc286da105d59a04":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a7a6109173bbca417edffdfc7bf9f2e35fef63ab":["a03d351abb1e487ff1b7feaacc286da105d59a04"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}