{"path":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDReader.IndexTree#IndexTree(IndexInput,int,int).mjava","commits":[{"id":"d6b1fd50f847900ca47783ea832846d60e81f990","date":1591769592,"type":0,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDReader.IndexTree#IndexTree(IndexInput,int,int).mjava","pathOld":"/dev/null","sourceNew":"    private IndexTree(IndexInput in, int nodeID, int level) {\n      int treeDepth = getTreeDepth();\n      splitPackedValueStack = new byte[treeDepth+1][];\n      this.nodeID = nodeID;\n      this.level = level;\n      splitPackedValueStack[level] = new byte[packedIndexBytesLength];\n      leafBlockFPStack = new long[treeDepth+1];\n      rightNodePositions = new int[treeDepth+1];\n      splitValuesStack = new byte[treeDepth+1][];\n      splitDims = new int[treeDepth+1];\n      negativeDeltas = new boolean[numIndexDims*(treeDepth+1)];\n      this.in = in;\n      splitValuesStack[0] = new byte[packedIndexBytesLength];\n      scratch = new BytesRef();\n      scratch.length = bytesPerDim;\n    }      \n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb94bf667d51f9c390c99d97afb36b7caab6b6e9","date":1599548621,"type":3,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDReader.IndexTree#IndexTree(IndexInput,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDReader.IndexTree#IndexTree(IndexInput,int,int).mjava","sourceNew":"    private IndexTree(IndexInput in, int nodeID, int level) {\n      int treeDepth = getTreeDepth();\n      splitPackedValueStack = new byte[treeDepth+1][];\n      this.nodeID = nodeID;\n      this.level = level;\n      splitPackedValueStack[level] = new byte[config.packedIndexBytesLength];\n      leafBlockFPStack = new long[treeDepth+1];\n      rightNodePositions = new int[treeDepth+1];\n      splitValuesStack = new byte[treeDepth+1][];\n      splitDims = new int[treeDepth+1];\n      negativeDeltas = new boolean[config.numIndexDims*(treeDepth+1)];\n      this.in = in;\n      splitValuesStack[0] = new byte[config.packedIndexBytesLength];\n      scratch = new BytesRef();\n      scratch.length = config.bytesPerDim;\n    }      \n\n","sourceOld":"    private IndexTree(IndexInput in, int nodeID, int level) {\n      int treeDepth = getTreeDepth();\n      splitPackedValueStack = new byte[treeDepth+1][];\n      this.nodeID = nodeID;\n      this.level = level;\n      splitPackedValueStack[level] = new byte[packedIndexBytesLength];\n      leafBlockFPStack = new long[treeDepth+1];\n      rightNodePositions = new int[treeDepth+1];\n      splitValuesStack = new byte[treeDepth+1][];\n      splitDims = new int[treeDepth+1];\n      negativeDeltas = new boolean[numIndexDims*(treeDepth+1)];\n      this.in = in;\n      splitValuesStack[0] = new byte[packedIndexBytesLength];\n      scratch = new BytesRef();\n      scratch.length = bytesPerDim;\n    }      \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bb94bf667d51f9c390c99d97afb36b7caab6b6e9":["d6b1fd50f847900ca47783ea832846d60e81f990"],"d6b1fd50f847900ca47783ea832846d60e81f990":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bb94bf667d51f9c390c99d97afb36b7caab6b6e9"]},"commit2Childs":{"bb94bf667d51f9c390c99d97afb36b7caab6b6e9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d6b1fd50f847900ca47783ea832846d60e81f990":["bb94bf667d51f9c390c99d97afb36b7caab6b6e9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d6b1fd50f847900ca47783ea832846d60e81f990"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}