{"path":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent#getCustomParams(String,SolrParams,boolean).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent#getCustomParams(String,SolrParams,boolean).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/SpellCheckComponent#getCustomParams(String,SolrParams,boolean).mjava","sourceNew":"  /**\n   * For every param that is of the form \"spellcheck.[dictionary name].XXXX=YYYY, add\n   * XXXX=YYYY as a param to the custom param list\n   * @param params The original SolrParams\n   * @return The new Params\n   */\n  protected SolrParams getCustomParams(String dictionary, SolrParams params, boolean shardRequest) {\n    ModifiableSolrParams result = new ModifiableSolrParams();\n    Iterator<String> iter = params.getParameterNamesIterator();\n    String prefix = SpellingParams.SPELLCHECK_PREFIX + \".\" + dictionary + \".\";\n    while (iter.hasNext()){\n      String nxt = iter.next();\n      if (nxt.startsWith(prefix)){\n        result.add(nxt.substring(prefix.length()), params.getParams(nxt));\n      }\n    }\n    if(shardRequest)\n    {\n    \tresult.add(ShardParams.IS_SHARD, \"true\");\n    }\n    return result;\n  }\n\n","sourceOld":"  /**\n   * For every param that is of the form \"spellcheck.[dictionary name].XXXX=YYYY, add\n   * XXXX=YYYY as a param to the custom param list\n   * @param params The original SolrParams\n   * @return The new Params\n   */\n  protected SolrParams getCustomParams(String dictionary, SolrParams params, boolean shardRequest) {\n    ModifiableSolrParams result = new ModifiableSolrParams();\n    Iterator<String> iter = params.getParameterNamesIterator();\n    String prefix = SpellingParams.SPELLCHECK_PREFIX + \".\" + dictionary + \".\";\n    while (iter.hasNext()){\n      String nxt = iter.next();\n      if (nxt.startsWith(prefix)){\n        result.add(nxt.substring(prefix.length()), params.getParams(nxt));\n      }\n    }\n    if(shardRequest)\n    {\n    \tresult.add(ShardParams.IS_SHARD, \"true\");\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent#getCustomParams(String,SolrParams,boolean).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/SpellCheckComponent#getCustomParams(String,SolrParams,boolean).mjava","sourceNew":"  /**\n   * For every param that is of the form \"spellcheck.[dictionary name].XXXX=YYYY, add\n   * XXXX=YYYY as a param to the custom param list\n   * @param params The original SolrParams\n   * @return The new Params\n   */\n  protected SolrParams getCustomParams(String dictionary, SolrParams params, boolean shardRequest) {\n    ModifiableSolrParams result = new ModifiableSolrParams();\n    Iterator<String> iter = params.getParameterNamesIterator();\n    String prefix = SpellingParams.SPELLCHECK_PREFIX + \".\" + dictionary + \".\";\n    while (iter.hasNext()){\n      String nxt = iter.next();\n      if (nxt.startsWith(prefix)){\n        result.add(nxt.substring(prefix.length()), params.getParams(nxt));\n      }\n    }\n    if(shardRequest)\n    {\n    \tresult.add(ShardParams.IS_SHARD, \"true\");\n    }\n    return result;\n  }\n\n","sourceOld":"  /**\n   * For every param that is of the form \"spellcheck.[dictionary name].XXXX=YYYY, add\n   * XXXX=YYYY as a param to the custom param list\n   * @param params The original SolrParams\n   * @return The new Params\n   */\n  protected SolrParams getCustomParams(String dictionary, SolrParams params, boolean shardRequest) {\n    ModifiableSolrParams result = new ModifiableSolrParams();\n    Iterator<String> iter = params.getParameterNamesIterator();\n    String prefix = SpellingParams.SPELLCHECK_PREFIX + \".\" + dictionary + \".\";\n    while (iter.hasNext()){\n      String nxt = iter.next();\n      if (nxt.startsWith(prefix)){\n        result.add(nxt.substring(prefix.length()), params.getParams(nxt));\n      }\n    }\n    if(shardRequest)\n    {\n    \tresult.add(ShardParams.IS_SHARD, \"true\");\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent#getCustomParams(String,SolrParams,boolean).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/SpellCheckComponent#getCustomParams(String,SolrParams,boolean).mjava","sourceNew":"  /**\n   * For every param that is of the form \"spellcheck.[dictionary name].XXXX=YYYY, add\n   * XXXX=YYYY as a param to the custom param list\n   * @param params The original SolrParams\n   * @return The new Params\n   */\n  protected SolrParams getCustomParams(String dictionary, SolrParams params, boolean shardRequest) {\n    ModifiableSolrParams result = new ModifiableSolrParams();\n    Iterator<String> iter = params.getParameterNamesIterator();\n    String prefix = SpellingParams.SPELLCHECK_PREFIX + \".\" + dictionary + \".\";\n    while (iter.hasNext()){\n      String nxt = iter.next();\n      if (nxt.startsWith(prefix)){\n        result.add(nxt.substring(prefix.length()), params.getParams(nxt));\n      }\n    }\n    if(shardRequest)\n    {\n    \tresult.add(ShardParams.IS_SHARD, \"true\");\n    }\n    return result;\n  }\n\n","sourceOld":"  /**\n   * For every param that is of the form \"spellcheck.[dictionary name].XXXX=YYYY, add\n   * XXXX=YYYY as a param to the custom param list\n   * @param params The original SolrParams\n   * @return The new Params\n   */\n  protected SolrParams getCustomParams(String dictionary, SolrParams params, boolean shardRequest) {\n    ModifiableSolrParams result = new ModifiableSolrParams();\n    Iterator<String> iter = params.getParameterNamesIterator();\n    String prefix = SpellingParams.SPELLCHECK_PREFIX + \".\" + dictionary + \".\";\n    while (iter.hasNext()){\n      String nxt = iter.next();\n      if (nxt.startsWith(prefix)){\n        result.add(nxt.substring(prefix.length()), params.getParams(nxt));\n      }\n    }\n    if(shardRequest)\n    {\n    \tresult.add(ShardParams.IS_SHARD, \"true\");\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"51338b5fe0f5d865f3d3ce9ed83d94ae4733a8c5","date":1320922486,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent#getCustomParams(String,SolrParams).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent#getCustomParams(String,SolrParams,boolean).mjava","sourceNew":"  /**\n   * For every param that is of the form \"spellcheck.[dictionary name].XXXX=YYYY, add\n   * XXXX=YYYY as a param to the custom param list\n   * @param params The original SolrParams\n   * @return The new Params\n   */\n  protected SolrParams getCustomParams(String dictionary, SolrParams params) {\n    ModifiableSolrParams result = new ModifiableSolrParams();\n    Iterator<String> iter = params.getParameterNamesIterator();\n    String prefix = SpellingParams.SPELLCHECK_PREFIX + \".\" + dictionary + \".\";\n    while (iter.hasNext()){\n      String nxt = iter.next();\n      if (nxt.startsWith(prefix)){\n        result.add(nxt.substring(prefix.length()), params.getParams(nxt));\n      }\n    }\n    return result;\n  }\n\n","sourceOld":"  /**\n   * For every param that is of the form \"spellcheck.[dictionary name].XXXX=YYYY, add\n   * XXXX=YYYY as a param to the custom param list\n   * @param params The original SolrParams\n   * @return The new Params\n   */\n  protected SolrParams getCustomParams(String dictionary, SolrParams params, boolean shardRequest) {\n    ModifiableSolrParams result = new ModifiableSolrParams();\n    Iterator<String> iter = params.getParameterNamesIterator();\n    String prefix = SpellingParams.SPELLCHECK_PREFIX + \".\" + dictionary + \".\";\n    while (iter.hasNext()){\n      String nxt = iter.next();\n      if (nxt.startsWith(prefix)){\n        result.add(nxt.substring(prefix.length()), params.getParams(nxt));\n      }\n    }\n    if(shardRequest)\n    {\n    \tresult.add(ShardParams.IS_SHARD, \"true\");\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"51338b5fe0f5d865f3d3ce9ed83d94ae4733a8c5":["c26f00b574427b55127e869b935845554afde1fa"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["51338b5fe0f5d865f3d3ce9ed83d94ae4733a8c5"]},"commit2Childs":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["51338b5fe0f5d865f3d3ce9ed83d94ae4733a8c5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"51338b5fe0f5d865f3d3ce9ed83d94ae4733a8c5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}