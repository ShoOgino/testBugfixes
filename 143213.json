{"path":"lucene/demo/src/test/org/apache/lucene/demo/facet/TestAssociationExample#assertExampleResult(ExampleResult,double[]).mjava","commits":[{"id":"1289047c4a6e31121c9d3a8f4c7a3fb30179f0fc","date":1359570667,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/demo/src/test/org/apache/lucene/demo/facet/TestAssociationExample#assertExampleResult(ExampleResult,double[]).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/example/TestAssociationExample#assertExampleResult(ExampleResult,double[]).mjava","sourceNew":"  private void assertExampleResult(ExampleResult res, double[] expectedResults) {\n    assertNotNull(\"Null result!\", res);\n    assertNotNull(\"Null facet result!\", res.getFacetResults());\n    assertEquals(\"Wrong number of results!\", 1, res.getFacetResults().size());\n    assertEquals(\"Wrong number of facets!\", 2, res.getFacetResults().get(0).getNumValidDescendants());\n    \n    Iterable<? extends FacetResultNode> it = res.getFacetResults().get(0).getFacetResultNode().subResults;\n    int i = 0;\n    for (FacetResultNode fResNode : it) {\n      assertEquals(\"Wrong result for facet \"+fResNode.label, expectedResults[i++], fResNode.value, 1E-5);\n    }\n  }\n\n","sourceOld":"  private void assertExampleResult(ExampleResult res, double[] expectedResults) {\n    assertNotNull(\"Null result!\", res);\n    assertNotNull(\"Null facet result!\", res.getFacetResults());\n    assertEquals(\"Wrong number of results!\", 1, res.getFacetResults().size());\n    assertEquals(\"Wrong number of facets!\", 2, res.getFacetResults().get(0).getNumValidDescendants());\n    \n    Iterable<? extends FacetResultNode> it = res.getFacetResults().get(0).getFacetResultNode().subResults;\n    int i = 0;\n    for (FacetResultNode fResNode : it) {\n      assertEquals(\"Wrong result for facet \"+fResNode.label, expectedResults[i++], fResNode.value, 1E-5);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"61d5f95d14e5b9b046998c51e16709a398c15226","date":1359603451,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/demo/src/test/org/apache/lucene/demo/facet/TestAssociationExample#assertExampleResult(ExampleResult,double[]).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/example/TestAssociationExample#assertExampleResult(ExampleResult,double[]).mjava","sourceNew":"  private void assertExampleResult(ExampleResult res, double[] expectedResults) {\n    assertNotNull(\"Null result!\", res);\n    assertNotNull(\"Null facet result!\", res.getFacetResults());\n    assertEquals(\"Wrong number of results!\", 1, res.getFacetResults().size());\n    assertEquals(\"Wrong number of facets!\", 2, res.getFacetResults().get(0).getNumValidDescendants());\n    \n    Iterable<? extends FacetResultNode> it = res.getFacetResults().get(0).getFacetResultNode().subResults;\n    int i = 0;\n    for (FacetResultNode fResNode : it) {\n      assertEquals(\"Wrong result for facet \"+fResNode.label, expectedResults[i++], fResNode.value, 1E-5);\n    }\n  }\n\n","sourceOld":"  private void assertExampleResult(ExampleResult res, double[] expectedResults) {\n    assertNotNull(\"Null result!\", res);\n    assertNotNull(\"Null facet result!\", res.getFacetResults());\n    assertEquals(\"Wrong number of results!\", 1, res.getFacetResults().size());\n    assertEquals(\"Wrong number of facets!\", 2, res.getFacetResults().get(0).getNumValidDescendants());\n    \n    Iterable<? extends FacetResultNode> it = res.getFacetResults().get(0).getFacetResultNode().subResults;\n    int i = 0;\n    for (FacetResultNode fResNode : it) {\n      assertEquals(\"Wrong result for facet \"+fResNode.label, expectedResults[i++], fResNode.value, 1E-5);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"31703f98041a9e7086254ed134d8f91c22ac933f","date":1360500940,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/demo/src/test/org/apache/lucene/demo/facet/TestAssociationsFacetsExample#assertExampleResult(List[FacetResult],double[]).mjava","pathOld":"lucene/demo/src/test/org/apache/lucene/demo/facet/TestAssociationExample#assertExampleResult(ExampleResult,double[]).mjava","sourceNew":"  private void assertExampleResult(List<FacetResult> res, double[] expectedResults) {\n    assertNotNull(\"Null result!\", res);\n    assertEquals(\"Wrong number of results!\", 1, res.size());\n    assertEquals(\"Wrong number of facets!\", 2, res.get(0).getNumValidDescendants());\n    \n    Iterable<? extends FacetResultNode> it = res.get(0).getFacetResultNode().subResults;\n    int i = 0;\n    for (FacetResultNode fResNode : it) {\n      assertEquals(\"Wrong result for facet \"+fResNode.label, expectedResults[i++], fResNode.value, 1E-5);\n    }\n  }\n\n","sourceOld":"  private void assertExampleResult(ExampleResult res, double[] expectedResults) {\n    assertNotNull(\"Null result!\", res);\n    assertNotNull(\"Null facet result!\", res.getFacetResults());\n    assertEquals(\"Wrong number of results!\", 1, res.getFacetResults().size());\n    assertEquals(\"Wrong number of facets!\", 2, res.getFacetResults().get(0).getNumValidDescendants());\n    \n    Iterable<? extends FacetResultNode> it = res.getFacetResults().get(0).getFacetResultNode().subResults;\n    int i = 0;\n    for (FacetResultNode fResNode : it) {\n      assertEquals(\"Wrong result for facet \"+fResNode.label, expectedResults[i++], fResNode.value, 1E-5);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"61d5f95d14e5b9b046998c51e16709a398c15226":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1289047c4a6e31121c9d3a8f4c7a3fb30179f0fc"],"31703f98041a9e7086254ed134d8f91c22ac933f":["1289047c4a6e31121c9d3a8f4c7a3fb30179f0fc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1289047c4a6e31121c9d3a8f4c7a3fb30179f0fc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["31703f98041a9e7086254ed134d8f91c22ac933f"]},"commit2Childs":{"61d5f95d14e5b9b046998c51e16709a398c15226":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["61d5f95d14e5b9b046998c51e16709a398c15226","1289047c4a6e31121c9d3a8f4c7a3fb30179f0fc"],"31703f98041a9e7086254ed134d8f91c22ac933f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1289047c4a6e31121c9d3a8f4c7a3fb30179f0fc":["61d5f95d14e5b9b046998c51e16709a398c15226","31703f98041a9e7086254ed134d8f91c22ac933f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["61d5f95d14e5b9b046998c51e16709a398c15226","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}