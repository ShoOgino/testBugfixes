{"path":"lucene/core/src/test/org/apache/lucene/index/TestOmitPositions#testPositions().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestOmitPositions#testPositions().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestOmitPositions#testPositions().mjava","sourceNew":"  // Tests whether the DocumentWriter correctly enable the\n  // omitTermFreqAndPositions bit in the FieldInfo\n  public void testPositions() throws Exception {\n    Directory ram = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random);\n    IndexWriter writer = new IndexWriter(ram, newIndexWriterConfig( TEST_VERSION_CURRENT, analyzer));\n    Document d = new Document();\n        \n    // f1,f2,f3: docs only\n    FieldType ft = new FieldType(TextField.TYPE_UNSTORED);\n    ft.setIndexOptions(IndexOptions.DOCS_ONLY);\n    \n    Field f1 = newField(\"f1\", \"This field has docs only\", ft);\n    d.add(f1);\n       \n    Field f2 = newField(\"f2\", \"This field has docs only\", ft);\n    d.add(f2);\n    \n    Field f3 = newField(\"f3\", \"This field has docs only\", ft);\n    d.add(f3);\n\n    FieldType ft2 = new FieldType(TextField.TYPE_UNSTORED);\n    ft2.setIndexOptions(IndexOptions.DOCS_AND_FREQS);\n    \n    // f4,f5,f6 docs and freqs\n    Field f4 = newField(\"f4\", \"This field has docs and freqs\", ft2);\n    d.add(f4);\n       \n    Field f5 = newField(\"f5\", \"This field has docs and freqs\", ft2);\n    d.add(f5);\n    \n    Field f6 = newField(\"f6\", \"This field has docs and freqs\", ft2);\n    d.add(f6);\n    \n    FieldType ft3 = new FieldType(TextField.TYPE_UNSTORED);\n    ft3.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS);\n    \n    // f7,f8,f9 docs/freqs/positions\n    Field f7 = newField(\"f7\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f7);\n       \n    Field f8 = newField(\"f8\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f8);\n    \n    Field f9 = newField(\"f9\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f9);\n        \n    writer.addDocument(d);\n    writer.forceMerge(1);\n\n    // now we add another document which has docs-only for f1, f4, f7, docs/freqs for f2, f5, f8, \n    // and docs/freqs/positions for f3, f6, f9\n    d = new Document();\n    \n    // f1,f4,f7: docs only\n    f1 = newField(\"f1\", \"This field has docs only\", ft);\n    d.add(f1);\n    \n    f4 = newField(\"f4\", \"This field has docs only\", ft);\n    d.add(f4);\n    \n    f7 = newField(\"f7\", \"This field has docs only\", ft);\n    d.add(f7);\n\n    // f2, f5, f8: docs and freqs\n    f2 = newField(\"f2\", \"This field has docs and freqs\", ft2);\n    d.add(f2);\n    \n    f5 = newField(\"f5\", \"This field has docs and freqs\", ft2);\n    d.add(f5);\n    \n    f8 = newField(\"f8\", \"This field has docs and freqs\", ft2);\n    d.add(f8);\n    \n    // f3, f6, f9: docs and freqs and positions\n    f3 = newField(\"f3\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f3);     \n    \n    f6 = newField(\"f6\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f6);\n    \n    f9 = newField(\"f9\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f9);\n        \n    writer.addDocument(d);\n\n    // force merge\n    writer.forceMerge(1);\n    // flush\n    writer.close();\n\n    SegmentReader reader = getOnlySegmentReader(IndexReader.open(ram));\n    FieldInfos fi = reader.getFieldInfos();\n    // docs + docs = docs\n    assertEquals(IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f1\").indexOptions);\n    // docs + docs/freqs = docs\n    assertEquals(IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f2\").indexOptions);\n    // docs + docs/freqs/pos = docs\n    assertEquals(IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f3\").indexOptions);\n    // docs/freqs + docs = docs\n    assertEquals(IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f4\").indexOptions);\n    // docs/freqs + docs/freqs = docs/freqs\n    assertEquals(IndexOptions.DOCS_AND_FREQS, fi.fieldInfo(\"f5\").indexOptions);\n    // docs/freqs + docs/freqs/pos = docs/freqs\n    assertEquals(IndexOptions.DOCS_AND_FREQS, fi.fieldInfo(\"f6\").indexOptions);\n    // docs/freqs/pos + docs = docs\n    assertEquals(IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f7\").indexOptions);\n    // docs/freqs/pos + docs/freqs = docs/freqs\n    assertEquals(IndexOptions.DOCS_AND_FREQS, fi.fieldInfo(\"f8\").indexOptions);\n    // docs/freqs/pos + docs/freqs/pos = docs/freqs/pos\n    assertEquals(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS, fi.fieldInfo(\"f9\").indexOptions);\n    \n    reader.close();\n    ram.close();\n  }\n\n","sourceOld":"  // Tests whether the DocumentWriter correctly enable the\n  // omitTermFreqAndPositions bit in the FieldInfo\n  public void testPositions() throws Exception {\n    Directory ram = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random);\n    IndexWriter writer = new IndexWriter(ram, newIndexWriterConfig( TEST_VERSION_CURRENT, analyzer));\n    Document d = new Document();\n        \n    // f1,f2,f3: docs only\n    FieldType ft = new FieldType(TextField.TYPE_UNSTORED);\n    ft.setIndexOptions(IndexOptions.DOCS_ONLY);\n    \n    Field f1 = newField(\"f1\", \"This field has docs only\", ft);\n    d.add(f1);\n       \n    Field f2 = newField(\"f2\", \"This field has docs only\", ft);\n    d.add(f2);\n    \n    Field f3 = newField(\"f3\", \"This field has docs only\", ft);\n    d.add(f3);\n\n    FieldType ft2 = new FieldType(TextField.TYPE_UNSTORED);\n    ft2.setIndexOptions(IndexOptions.DOCS_AND_FREQS);\n    \n    // f4,f5,f6 docs and freqs\n    Field f4 = newField(\"f4\", \"This field has docs and freqs\", ft2);\n    d.add(f4);\n       \n    Field f5 = newField(\"f5\", \"This field has docs and freqs\", ft2);\n    d.add(f5);\n    \n    Field f6 = newField(\"f6\", \"This field has docs and freqs\", ft2);\n    d.add(f6);\n    \n    FieldType ft3 = new FieldType(TextField.TYPE_UNSTORED);\n    ft3.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS);\n    \n    // f7,f8,f9 docs/freqs/positions\n    Field f7 = newField(\"f7\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f7);\n       \n    Field f8 = newField(\"f8\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f8);\n    \n    Field f9 = newField(\"f9\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f9);\n        \n    writer.addDocument(d);\n    writer.forceMerge(1);\n\n    // now we add another document which has docs-only for f1, f4, f7, docs/freqs for f2, f5, f8, \n    // and docs/freqs/positions for f3, f6, f9\n    d = new Document();\n    \n    // f1,f4,f7: docs only\n    f1 = newField(\"f1\", \"This field has docs only\", ft);\n    d.add(f1);\n    \n    f4 = newField(\"f4\", \"This field has docs only\", ft);\n    d.add(f4);\n    \n    f7 = newField(\"f7\", \"This field has docs only\", ft);\n    d.add(f7);\n\n    // f2, f5, f8: docs and freqs\n    f2 = newField(\"f2\", \"This field has docs and freqs\", ft2);\n    d.add(f2);\n    \n    f5 = newField(\"f5\", \"This field has docs and freqs\", ft2);\n    d.add(f5);\n    \n    f8 = newField(\"f8\", \"This field has docs and freqs\", ft2);\n    d.add(f8);\n    \n    // f3, f6, f9: docs and freqs and positions\n    f3 = newField(\"f3\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f3);     \n    \n    f6 = newField(\"f6\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f6);\n    \n    f9 = newField(\"f9\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f9);\n        \n    writer.addDocument(d);\n\n    // force merge\n    writer.forceMerge(1);\n    // flush\n    writer.close();\n\n    SegmentReader reader = getOnlySegmentReader(IndexReader.open(ram));\n    FieldInfos fi = reader.getFieldInfos();\n    // docs + docs = docs\n    assertEquals(IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f1\").indexOptions);\n    // docs + docs/freqs = docs\n    assertEquals(IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f2\").indexOptions);\n    // docs + docs/freqs/pos = docs\n    assertEquals(IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f3\").indexOptions);\n    // docs/freqs + docs = docs\n    assertEquals(IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f4\").indexOptions);\n    // docs/freqs + docs/freqs = docs/freqs\n    assertEquals(IndexOptions.DOCS_AND_FREQS, fi.fieldInfo(\"f5\").indexOptions);\n    // docs/freqs + docs/freqs/pos = docs/freqs\n    assertEquals(IndexOptions.DOCS_AND_FREQS, fi.fieldInfo(\"f6\").indexOptions);\n    // docs/freqs/pos + docs = docs\n    assertEquals(IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f7\").indexOptions);\n    // docs/freqs/pos + docs/freqs = docs/freqs\n    assertEquals(IndexOptions.DOCS_AND_FREQS, fi.fieldInfo(\"f8\").indexOptions);\n    // docs/freqs/pos + docs/freqs/pos = docs/freqs/pos\n    assertEquals(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS, fi.fieldInfo(\"f9\").indexOptions);\n    \n    reader.close();\n    ram.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestOmitPositions#testPositions().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestOmitPositions#testPositions().mjava","sourceNew":"  // Tests whether the DocumentWriter correctly enable the\n  // omitTermFreqAndPositions bit in the FieldInfo\n  public void testPositions() throws Exception {\n    Directory ram = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random());\n    IndexWriter writer = new IndexWriter(ram, newIndexWriterConfig( TEST_VERSION_CURRENT, analyzer));\n    Document d = new Document();\n        \n    // f1,f2,f3: docs only\n    FieldType ft = new FieldType(TextField.TYPE_UNSTORED);\n    ft.setIndexOptions(IndexOptions.DOCS_ONLY);\n    \n    Field f1 = newField(\"f1\", \"This field has docs only\", ft);\n    d.add(f1);\n       \n    Field f2 = newField(\"f2\", \"This field has docs only\", ft);\n    d.add(f2);\n    \n    Field f3 = newField(\"f3\", \"This field has docs only\", ft);\n    d.add(f3);\n\n    FieldType ft2 = new FieldType(TextField.TYPE_UNSTORED);\n    ft2.setIndexOptions(IndexOptions.DOCS_AND_FREQS);\n    \n    // f4,f5,f6 docs and freqs\n    Field f4 = newField(\"f4\", \"This field has docs and freqs\", ft2);\n    d.add(f4);\n       \n    Field f5 = newField(\"f5\", \"This field has docs and freqs\", ft2);\n    d.add(f5);\n    \n    Field f6 = newField(\"f6\", \"This field has docs and freqs\", ft2);\n    d.add(f6);\n    \n    FieldType ft3 = new FieldType(TextField.TYPE_UNSTORED);\n    ft3.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS);\n    \n    // f7,f8,f9 docs/freqs/positions\n    Field f7 = newField(\"f7\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f7);\n       \n    Field f8 = newField(\"f8\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f8);\n    \n    Field f9 = newField(\"f9\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f9);\n        \n    writer.addDocument(d);\n    writer.forceMerge(1);\n\n    // now we add another document which has docs-only for f1, f4, f7, docs/freqs for f2, f5, f8, \n    // and docs/freqs/positions for f3, f6, f9\n    d = new Document();\n    \n    // f1,f4,f7: docs only\n    f1 = newField(\"f1\", \"This field has docs only\", ft);\n    d.add(f1);\n    \n    f4 = newField(\"f4\", \"This field has docs only\", ft);\n    d.add(f4);\n    \n    f7 = newField(\"f7\", \"This field has docs only\", ft);\n    d.add(f7);\n\n    // f2, f5, f8: docs and freqs\n    f2 = newField(\"f2\", \"This field has docs and freqs\", ft2);\n    d.add(f2);\n    \n    f5 = newField(\"f5\", \"This field has docs and freqs\", ft2);\n    d.add(f5);\n    \n    f8 = newField(\"f8\", \"This field has docs and freqs\", ft2);\n    d.add(f8);\n    \n    // f3, f6, f9: docs and freqs and positions\n    f3 = newField(\"f3\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f3);     \n    \n    f6 = newField(\"f6\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f6);\n    \n    f9 = newField(\"f9\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f9);\n        \n    writer.addDocument(d);\n\n    // force merge\n    writer.forceMerge(1);\n    // flush\n    writer.close();\n\n    SegmentReader reader = getOnlySegmentReader(IndexReader.open(ram));\n    FieldInfos fi = reader.getFieldInfos();\n    // docs + docs = docs\n    assertEquals(IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f1\").indexOptions);\n    // docs + docs/freqs = docs\n    assertEquals(IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f2\").indexOptions);\n    // docs + docs/freqs/pos = docs\n    assertEquals(IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f3\").indexOptions);\n    // docs/freqs + docs = docs\n    assertEquals(IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f4\").indexOptions);\n    // docs/freqs + docs/freqs = docs/freqs\n    assertEquals(IndexOptions.DOCS_AND_FREQS, fi.fieldInfo(\"f5\").indexOptions);\n    // docs/freqs + docs/freqs/pos = docs/freqs\n    assertEquals(IndexOptions.DOCS_AND_FREQS, fi.fieldInfo(\"f6\").indexOptions);\n    // docs/freqs/pos + docs = docs\n    assertEquals(IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f7\").indexOptions);\n    // docs/freqs/pos + docs/freqs = docs/freqs\n    assertEquals(IndexOptions.DOCS_AND_FREQS, fi.fieldInfo(\"f8\").indexOptions);\n    // docs/freqs/pos + docs/freqs/pos = docs/freqs/pos\n    assertEquals(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS, fi.fieldInfo(\"f9\").indexOptions);\n    \n    reader.close();\n    ram.close();\n  }\n\n","sourceOld":"  // Tests whether the DocumentWriter correctly enable the\n  // omitTermFreqAndPositions bit in the FieldInfo\n  public void testPositions() throws Exception {\n    Directory ram = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random);\n    IndexWriter writer = new IndexWriter(ram, newIndexWriterConfig( TEST_VERSION_CURRENT, analyzer));\n    Document d = new Document();\n        \n    // f1,f2,f3: docs only\n    FieldType ft = new FieldType(TextField.TYPE_UNSTORED);\n    ft.setIndexOptions(IndexOptions.DOCS_ONLY);\n    \n    Field f1 = newField(\"f1\", \"This field has docs only\", ft);\n    d.add(f1);\n       \n    Field f2 = newField(\"f2\", \"This field has docs only\", ft);\n    d.add(f2);\n    \n    Field f3 = newField(\"f3\", \"This field has docs only\", ft);\n    d.add(f3);\n\n    FieldType ft2 = new FieldType(TextField.TYPE_UNSTORED);\n    ft2.setIndexOptions(IndexOptions.DOCS_AND_FREQS);\n    \n    // f4,f5,f6 docs and freqs\n    Field f4 = newField(\"f4\", \"This field has docs and freqs\", ft2);\n    d.add(f4);\n       \n    Field f5 = newField(\"f5\", \"This field has docs and freqs\", ft2);\n    d.add(f5);\n    \n    Field f6 = newField(\"f6\", \"This field has docs and freqs\", ft2);\n    d.add(f6);\n    \n    FieldType ft3 = new FieldType(TextField.TYPE_UNSTORED);\n    ft3.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS);\n    \n    // f7,f8,f9 docs/freqs/positions\n    Field f7 = newField(\"f7\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f7);\n       \n    Field f8 = newField(\"f8\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f8);\n    \n    Field f9 = newField(\"f9\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f9);\n        \n    writer.addDocument(d);\n    writer.forceMerge(1);\n\n    // now we add another document which has docs-only for f1, f4, f7, docs/freqs for f2, f5, f8, \n    // and docs/freqs/positions for f3, f6, f9\n    d = new Document();\n    \n    // f1,f4,f7: docs only\n    f1 = newField(\"f1\", \"This field has docs only\", ft);\n    d.add(f1);\n    \n    f4 = newField(\"f4\", \"This field has docs only\", ft);\n    d.add(f4);\n    \n    f7 = newField(\"f7\", \"This field has docs only\", ft);\n    d.add(f7);\n\n    // f2, f5, f8: docs and freqs\n    f2 = newField(\"f2\", \"This field has docs and freqs\", ft2);\n    d.add(f2);\n    \n    f5 = newField(\"f5\", \"This field has docs and freqs\", ft2);\n    d.add(f5);\n    \n    f8 = newField(\"f8\", \"This field has docs and freqs\", ft2);\n    d.add(f8);\n    \n    // f3, f6, f9: docs and freqs and positions\n    f3 = newField(\"f3\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f3);     \n    \n    f6 = newField(\"f6\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f6);\n    \n    f9 = newField(\"f9\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f9);\n        \n    writer.addDocument(d);\n\n    // force merge\n    writer.forceMerge(1);\n    // flush\n    writer.close();\n\n    SegmentReader reader = getOnlySegmentReader(IndexReader.open(ram));\n    FieldInfos fi = reader.getFieldInfos();\n    // docs + docs = docs\n    assertEquals(IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f1\").indexOptions);\n    // docs + docs/freqs = docs\n    assertEquals(IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f2\").indexOptions);\n    // docs + docs/freqs/pos = docs\n    assertEquals(IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f3\").indexOptions);\n    // docs/freqs + docs = docs\n    assertEquals(IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f4\").indexOptions);\n    // docs/freqs + docs/freqs = docs/freqs\n    assertEquals(IndexOptions.DOCS_AND_FREQS, fi.fieldInfo(\"f5\").indexOptions);\n    // docs/freqs + docs/freqs/pos = docs/freqs\n    assertEquals(IndexOptions.DOCS_AND_FREQS, fi.fieldInfo(\"f6\").indexOptions);\n    // docs/freqs/pos + docs = docs\n    assertEquals(IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f7\").indexOptions);\n    // docs/freqs/pos + docs/freqs = docs/freqs\n    assertEquals(IndexOptions.DOCS_AND_FREQS, fi.fieldInfo(\"f8\").indexOptions);\n    // docs/freqs/pos + docs/freqs/pos = docs/freqs/pos\n    assertEquals(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS, fi.fieldInfo(\"f9\").indexOptions);\n    \n    reader.close();\n    ram.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"76923f6a33f2c4bec7f584e3f251261afe7ea276","date":1337149711,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestOmitPositions#testPositions().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestOmitPositions#testPositions().mjava","sourceNew":"  // Tests whether the DocumentWriter correctly enable the\n  // omitTermFreqAndPositions bit in the FieldInfo\n  public void testPositions() throws Exception {\n    Directory ram = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random());\n    IndexWriter writer = new IndexWriter(ram, newIndexWriterConfig( TEST_VERSION_CURRENT, analyzer));\n    Document d = new Document();\n        \n    // f1,f2,f3: docs only\n    FieldType ft = new FieldType(TextField.TYPE_UNSTORED);\n    ft.setIndexOptions(IndexOptions.DOCS_ONLY);\n    \n    Field f1 = newField(\"f1\", \"This field has docs only\", ft);\n    d.add(f1);\n       \n    Field f2 = newField(\"f2\", \"This field has docs only\", ft);\n    d.add(f2);\n    \n    Field f3 = newField(\"f3\", \"This field has docs only\", ft);\n    d.add(f3);\n\n    FieldType ft2 = new FieldType(TextField.TYPE_UNSTORED);\n    ft2.setIndexOptions(IndexOptions.DOCS_AND_FREQS);\n    \n    // f4,f5,f6 docs and freqs\n    Field f4 = newField(\"f4\", \"This field has docs and freqs\", ft2);\n    d.add(f4);\n       \n    Field f5 = newField(\"f5\", \"This field has docs and freqs\", ft2);\n    d.add(f5);\n    \n    Field f6 = newField(\"f6\", \"This field has docs and freqs\", ft2);\n    d.add(f6);\n    \n    FieldType ft3 = new FieldType(TextField.TYPE_UNSTORED);\n    ft3.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS);\n    \n    // f7,f8,f9 docs/freqs/positions\n    Field f7 = newField(\"f7\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f7);\n       \n    Field f8 = newField(\"f8\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f8);\n    \n    Field f9 = newField(\"f9\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f9);\n        \n    writer.addDocument(d);\n    writer.forceMerge(1);\n\n    // now we add another document which has docs-only for f1, f4, f7, docs/freqs for f2, f5, f8, \n    // and docs/freqs/positions for f3, f6, f9\n    d = new Document();\n    \n    // f1,f4,f7: docs only\n    f1 = newField(\"f1\", \"This field has docs only\", ft);\n    d.add(f1);\n    \n    f4 = newField(\"f4\", \"This field has docs only\", ft);\n    d.add(f4);\n    \n    f7 = newField(\"f7\", \"This field has docs only\", ft);\n    d.add(f7);\n\n    // f2, f5, f8: docs and freqs\n    f2 = newField(\"f2\", \"This field has docs and freqs\", ft2);\n    d.add(f2);\n    \n    f5 = newField(\"f5\", \"This field has docs and freqs\", ft2);\n    d.add(f5);\n    \n    f8 = newField(\"f8\", \"This field has docs and freqs\", ft2);\n    d.add(f8);\n    \n    // f3, f6, f9: docs and freqs and positions\n    f3 = newField(\"f3\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f3);     \n    \n    f6 = newField(\"f6\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f6);\n    \n    f9 = newField(\"f9\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f9);\n        \n    writer.addDocument(d);\n\n    // force merge\n    writer.forceMerge(1);\n    // flush\n    writer.close();\n\n    SegmentReader reader = getOnlySegmentReader(IndexReader.open(ram));\n    FieldInfos fi = reader.getFieldInfos();\n    // docs + docs = docs\n    assertEquals(IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f1\").getIndexOptions());\n    // docs + docs/freqs = docs\n    assertEquals(IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f2\").getIndexOptions());\n    // docs + docs/freqs/pos = docs\n    assertEquals(IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f3\").getIndexOptions());\n    // docs/freqs + docs = docs\n    assertEquals(IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f4\").getIndexOptions());\n    // docs/freqs + docs/freqs = docs/freqs\n    assertEquals(IndexOptions.DOCS_AND_FREQS, fi.fieldInfo(\"f5\").getIndexOptions());\n    // docs/freqs + docs/freqs/pos = docs/freqs\n    assertEquals(IndexOptions.DOCS_AND_FREQS, fi.fieldInfo(\"f6\").getIndexOptions());\n    // docs/freqs/pos + docs = docs\n    assertEquals(IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f7\").getIndexOptions());\n    // docs/freqs/pos + docs/freqs = docs/freqs\n    assertEquals(IndexOptions.DOCS_AND_FREQS, fi.fieldInfo(\"f8\").getIndexOptions());\n    // docs/freqs/pos + docs/freqs/pos = docs/freqs/pos\n    assertEquals(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS, fi.fieldInfo(\"f9\").getIndexOptions());\n    \n    reader.close();\n    ram.close();\n  }\n\n","sourceOld":"  // Tests whether the DocumentWriter correctly enable the\n  // omitTermFreqAndPositions bit in the FieldInfo\n  public void testPositions() throws Exception {\n    Directory ram = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random());\n    IndexWriter writer = new IndexWriter(ram, newIndexWriterConfig( TEST_VERSION_CURRENT, analyzer));\n    Document d = new Document();\n        \n    // f1,f2,f3: docs only\n    FieldType ft = new FieldType(TextField.TYPE_UNSTORED);\n    ft.setIndexOptions(IndexOptions.DOCS_ONLY);\n    \n    Field f1 = newField(\"f1\", \"This field has docs only\", ft);\n    d.add(f1);\n       \n    Field f2 = newField(\"f2\", \"This field has docs only\", ft);\n    d.add(f2);\n    \n    Field f3 = newField(\"f3\", \"This field has docs only\", ft);\n    d.add(f3);\n\n    FieldType ft2 = new FieldType(TextField.TYPE_UNSTORED);\n    ft2.setIndexOptions(IndexOptions.DOCS_AND_FREQS);\n    \n    // f4,f5,f6 docs and freqs\n    Field f4 = newField(\"f4\", \"This field has docs and freqs\", ft2);\n    d.add(f4);\n       \n    Field f5 = newField(\"f5\", \"This field has docs and freqs\", ft2);\n    d.add(f5);\n    \n    Field f6 = newField(\"f6\", \"This field has docs and freqs\", ft2);\n    d.add(f6);\n    \n    FieldType ft3 = new FieldType(TextField.TYPE_UNSTORED);\n    ft3.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS);\n    \n    // f7,f8,f9 docs/freqs/positions\n    Field f7 = newField(\"f7\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f7);\n       \n    Field f8 = newField(\"f8\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f8);\n    \n    Field f9 = newField(\"f9\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f9);\n        \n    writer.addDocument(d);\n    writer.forceMerge(1);\n\n    // now we add another document which has docs-only for f1, f4, f7, docs/freqs for f2, f5, f8, \n    // and docs/freqs/positions for f3, f6, f9\n    d = new Document();\n    \n    // f1,f4,f7: docs only\n    f1 = newField(\"f1\", \"This field has docs only\", ft);\n    d.add(f1);\n    \n    f4 = newField(\"f4\", \"This field has docs only\", ft);\n    d.add(f4);\n    \n    f7 = newField(\"f7\", \"This field has docs only\", ft);\n    d.add(f7);\n\n    // f2, f5, f8: docs and freqs\n    f2 = newField(\"f2\", \"This field has docs and freqs\", ft2);\n    d.add(f2);\n    \n    f5 = newField(\"f5\", \"This field has docs and freqs\", ft2);\n    d.add(f5);\n    \n    f8 = newField(\"f8\", \"This field has docs and freqs\", ft2);\n    d.add(f8);\n    \n    // f3, f6, f9: docs and freqs and positions\n    f3 = newField(\"f3\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f3);     \n    \n    f6 = newField(\"f6\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f6);\n    \n    f9 = newField(\"f9\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f9);\n        \n    writer.addDocument(d);\n\n    // force merge\n    writer.forceMerge(1);\n    // flush\n    writer.close();\n\n    SegmentReader reader = getOnlySegmentReader(IndexReader.open(ram));\n    FieldInfos fi = reader.getFieldInfos();\n    // docs + docs = docs\n    assertEquals(IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f1\").indexOptions);\n    // docs + docs/freqs = docs\n    assertEquals(IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f2\").indexOptions);\n    // docs + docs/freqs/pos = docs\n    assertEquals(IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f3\").indexOptions);\n    // docs/freqs + docs = docs\n    assertEquals(IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f4\").indexOptions);\n    // docs/freqs + docs/freqs = docs/freqs\n    assertEquals(IndexOptions.DOCS_AND_FREQS, fi.fieldInfo(\"f5\").indexOptions);\n    // docs/freqs + docs/freqs/pos = docs/freqs\n    assertEquals(IndexOptions.DOCS_AND_FREQS, fi.fieldInfo(\"f6\").indexOptions);\n    // docs/freqs/pos + docs = docs\n    assertEquals(IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f7\").indexOptions);\n    // docs/freqs/pos + docs/freqs = docs/freqs\n    assertEquals(IndexOptions.DOCS_AND_FREQS, fi.fieldInfo(\"f8\").indexOptions);\n    // docs/freqs/pos + docs/freqs/pos = docs/freqs/pos\n    assertEquals(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS, fi.fieldInfo(\"f9\").indexOptions);\n    \n    reader.close();\n    ram.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"615ddbd81799980d0fdd95e0238e1c498b6f47b0","date":1338233290,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestOmitPositions#testPositions().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestOmitPositions#testPositions().mjava","sourceNew":"  // Tests whether the DocumentWriter correctly enable the\n  // omitTermFreqAndPositions bit in the FieldInfo\n  public void testPositions() throws Exception {\n    Directory ram = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random());\n    IndexWriter writer = new IndexWriter(ram, newIndexWriterConfig( TEST_VERSION_CURRENT, analyzer));\n    Document d = new Document();\n        \n    // f1,f2,f3: docs only\n    FieldType ft = new FieldType(TextField.TYPE_UNSTORED);\n    ft.setIndexOptions(IndexOptions.DOCS_ONLY);\n    \n    Field f1 = newField(\"f1\", \"This field has docs only\", ft);\n    d.add(f1);\n       \n    Field f2 = newField(\"f2\", \"This field has docs only\", ft);\n    d.add(f2);\n    \n    Field f3 = newField(\"f3\", \"This field has docs only\", ft);\n    d.add(f3);\n\n    FieldType ft2 = new FieldType(TextField.TYPE_UNSTORED);\n    ft2.setIndexOptions(IndexOptions.DOCS_AND_FREQS);\n    \n    // f4,f5,f6 docs and freqs\n    Field f4 = newField(\"f4\", \"This field has docs and freqs\", ft2);\n    d.add(f4);\n       \n    Field f5 = newField(\"f5\", \"This field has docs and freqs\", ft2);\n    d.add(f5);\n    \n    Field f6 = newField(\"f6\", \"This field has docs and freqs\", ft2);\n    d.add(f6);\n    \n    FieldType ft3 = new FieldType(TextField.TYPE_UNSTORED);\n    ft3.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS);\n    \n    // f7,f8,f9 docs/freqs/positions\n    Field f7 = newField(\"f7\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f7);\n       \n    Field f8 = newField(\"f8\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f8);\n    \n    Field f9 = newField(\"f9\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f9);\n        \n    writer.addDocument(d);\n    writer.forceMerge(1);\n\n    // now we add another document which has docs-only for f1, f4, f7, docs/freqs for f2, f5, f8, \n    // and docs/freqs/positions for f3, f6, f9\n    d = new Document();\n    \n    // f1,f4,f7: docs only\n    f1 = newField(\"f1\", \"This field has docs only\", ft);\n    d.add(f1);\n    \n    f4 = newField(\"f4\", \"This field has docs only\", ft);\n    d.add(f4);\n    \n    f7 = newField(\"f7\", \"This field has docs only\", ft);\n    d.add(f7);\n\n    // f2, f5, f8: docs and freqs\n    f2 = newField(\"f2\", \"This field has docs and freqs\", ft2);\n    d.add(f2);\n    \n    f5 = newField(\"f5\", \"This field has docs and freqs\", ft2);\n    d.add(f5);\n    \n    f8 = newField(\"f8\", \"This field has docs and freqs\", ft2);\n    d.add(f8);\n    \n    // f3, f6, f9: docs and freqs and positions\n    f3 = newField(\"f3\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f3);     \n    \n    f6 = newField(\"f6\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f6);\n    \n    f9 = newField(\"f9\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f9);\n        \n    writer.addDocument(d);\n\n    // force merge\n    writer.forceMerge(1);\n    // flush\n    writer.close();\n\n    SegmentReader reader = getOnlySegmentReader(IndexReader.open(ram));\n    FieldInfos fi = reader.getFieldInfos();\n    // docs + docs = docs\n    assertEquals(IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f1\").getIndexOptions());\n    // docs + docs/freqs = docs\n    assertEquals(IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f2\").getIndexOptions());\n    // docs + docs/freqs/pos = docs\n    assertEquals(IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f3\").getIndexOptions());\n    // docs/freqs + docs = docs\n    assertEquals(IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f4\").getIndexOptions());\n    // docs/freqs + docs/freqs = docs/freqs\n    assertEquals(IndexOptions.DOCS_AND_FREQS, fi.fieldInfo(\"f5\").getIndexOptions());\n    // docs/freqs + docs/freqs/pos = docs/freqs\n    assertEquals(IndexOptions.DOCS_AND_FREQS, fi.fieldInfo(\"f6\").getIndexOptions());\n    // docs/freqs/pos + docs = docs\n    assertEquals(IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f7\").getIndexOptions());\n    // docs/freqs/pos + docs/freqs = docs/freqs\n    assertEquals(IndexOptions.DOCS_AND_FREQS, fi.fieldInfo(\"f8\").getIndexOptions());\n    // docs/freqs/pos + docs/freqs/pos = docs/freqs/pos\n    assertEquals(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS, fi.fieldInfo(\"f9\").getIndexOptions());\n    \n    reader.close();\n    ram.close();\n  }\n\n","sourceOld":"  // Tests whether the DocumentWriter correctly enable the\n  // omitTermFreqAndPositions bit in the FieldInfo\n  public void testPositions() throws Exception {\n    Directory ram = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random());\n    IndexWriter writer = new IndexWriter(ram, newIndexWriterConfig( TEST_VERSION_CURRENT, analyzer));\n    Document d = new Document();\n        \n    // f1,f2,f3: docs only\n    FieldType ft = new FieldType(TextField.TYPE_UNSTORED);\n    ft.setIndexOptions(IndexOptions.DOCS_ONLY);\n    \n    Field f1 = newField(\"f1\", \"This field has docs only\", ft);\n    d.add(f1);\n       \n    Field f2 = newField(\"f2\", \"This field has docs only\", ft);\n    d.add(f2);\n    \n    Field f3 = newField(\"f3\", \"This field has docs only\", ft);\n    d.add(f3);\n\n    FieldType ft2 = new FieldType(TextField.TYPE_UNSTORED);\n    ft2.setIndexOptions(IndexOptions.DOCS_AND_FREQS);\n    \n    // f4,f5,f6 docs and freqs\n    Field f4 = newField(\"f4\", \"This field has docs and freqs\", ft2);\n    d.add(f4);\n       \n    Field f5 = newField(\"f5\", \"This field has docs and freqs\", ft2);\n    d.add(f5);\n    \n    Field f6 = newField(\"f6\", \"This field has docs and freqs\", ft2);\n    d.add(f6);\n    \n    FieldType ft3 = new FieldType(TextField.TYPE_UNSTORED);\n    ft3.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS);\n    \n    // f7,f8,f9 docs/freqs/positions\n    Field f7 = newField(\"f7\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f7);\n       \n    Field f8 = newField(\"f8\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f8);\n    \n    Field f9 = newField(\"f9\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f9);\n        \n    writer.addDocument(d);\n    writer.forceMerge(1);\n\n    // now we add another document which has docs-only for f1, f4, f7, docs/freqs for f2, f5, f8, \n    // and docs/freqs/positions for f3, f6, f9\n    d = new Document();\n    \n    // f1,f4,f7: docs only\n    f1 = newField(\"f1\", \"This field has docs only\", ft);\n    d.add(f1);\n    \n    f4 = newField(\"f4\", \"This field has docs only\", ft);\n    d.add(f4);\n    \n    f7 = newField(\"f7\", \"This field has docs only\", ft);\n    d.add(f7);\n\n    // f2, f5, f8: docs and freqs\n    f2 = newField(\"f2\", \"This field has docs and freqs\", ft2);\n    d.add(f2);\n    \n    f5 = newField(\"f5\", \"This field has docs and freqs\", ft2);\n    d.add(f5);\n    \n    f8 = newField(\"f8\", \"This field has docs and freqs\", ft2);\n    d.add(f8);\n    \n    // f3, f6, f9: docs and freqs and positions\n    f3 = newField(\"f3\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f3);     \n    \n    f6 = newField(\"f6\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f6);\n    \n    f9 = newField(\"f9\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f9);\n        \n    writer.addDocument(d);\n\n    // force merge\n    writer.forceMerge(1);\n    // flush\n    writer.close();\n\n    SegmentReader reader = getOnlySegmentReader(IndexReader.open(ram));\n    FieldInfos fi = reader.getFieldInfos();\n    // docs + docs = docs\n    assertEquals(IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f1\").indexOptions);\n    // docs + docs/freqs = docs\n    assertEquals(IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f2\").indexOptions);\n    // docs + docs/freqs/pos = docs\n    assertEquals(IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f3\").indexOptions);\n    // docs/freqs + docs = docs\n    assertEquals(IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f4\").indexOptions);\n    // docs/freqs + docs/freqs = docs/freqs\n    assertEquals(IndexOptions.DOCS_AND_FREQS, fi.fieldInfo(\"f5\").indexOptions);\n    // docs/freqs + docs/freqs/pos = docs/freqs\n    assertEquals(IndexOptions.DOCS_AND_FREQS, fi.fieldInfo(\"f6\").indexOptions);\n    // docs/freqs/pos + docs = docs\n    assertEquals(IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f7\").indexOptions);\n    // docs/freqs/pos + docs/freqs = docs/freqs\n    assertEquals(IndexOptions.DOCS_AND_FREQS, fi.fieldInfo(\"f8\").indexOptions);\n    // docs/freqs/pos + docs/freqs/pos = docs/freqs/pos\n    assertEquals(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS, fi.fieldInfo(\"f9\").indexOptions);\n    \n    reader.close();\n    ram.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","date":1338430031,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestOmitPositions#testPositions().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestOmitPositions#testPositions().mjava","sourceNew":"  // Tests whether the DocumentWriter correctly enable the\n  // omitTermFreqAndPositions bit in the FieldInfo\n  public void testPositions() throws Exception {\n    Directory ram = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random());\n    IndexWriter writer = new IndexWriter(ram, newIndexWriterConfig( TEST_VERSION_CURRENT, analyzer));\n    Document d = new Document();\n        \n    // f1,f2,f3: docs only\n    FieldType ft = new FieldType(TextField.TYPE_UNSTORED);\n    ft.setIndexOptions(IndexOptions.DOCS_ONLY);\n    \n    Field f1 = newField(\"f1\", \"This field has docs only\", ft);\n    d.add(f1);\n       \n    Field f2 = newField(\"f2\", \"This field has docs only\", ft);\n    d.add(f2);\n    \n    Field f3 = newField(\"f3\", \"This field has docs only\", ft);\n    d.add(f3);\n\n    FieldType ft2 = new FieldType(TextField.TYPE_UNSTORED);\n    ft2.setIndexOptions(IndexOptions.DOCS_AND_FREQS);\n    \n    // f4,f5,f6 docs and freqs\n    Field f4 = newField(\"f4\", \"This field has docs and freqs\", ft2);\n    d.add(f4);\n       \n    Field f5 = newField(\"f5\", \"This field has docs and freqs\", ft2);\n    d.add(f5);\n    \n    Field f6 = newField(\"f6\", \"This field has docs and freqs\", ft2);\n    d.add(f6);\n    \n    FieldType ft3 = new FieldType(TextField.TYPE_UNSTORED);\n    ft3.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS);\n    \n    // f7,f8,f9 docs/freqs/positions\n    Field f7 = newField(\"f7\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f7);\n       \n    Field f8 = newField(\"f8\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f8);\n    \n    Field f9 = newField(\"f9\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f9);\n        \n    writer.addDocument(d);\n    writer.forceMerge(1);\n\n    // now we add another document which has docs-only for f1, f4, f7, docs/freqs for f2, f5, f8, \n    // and docs/freqs/positions for f3, f6, f9\n    d = new Document();\n    \n    // f1,f4,f7: docs only\n    f1 = newField(\"f1\", \"This field has docs only\", ft);\n    d.add(f1);\n    \n    f4 = newField(\"f4\", \"This field has docs only\", ft);\n    d.add(f4);\n    \n    f7 = newField(\"f7\", \"This field has docs only\", ft);\n    d.add(f7);\n\n    // f2, f5, f8: docs and freqs\n    f2 = newField(\"f2\", \"This field has docs and freqs\", ft2);\n    d.add(f2);\n    \n    f5 = newField(\"f5\", \"This field has docs and freqs\", ft2);\n    d.add(f5);\n    \n    f8 = newField(\"f8\", \"This field has docs and freqs\", ft2);\n    d.add(f8);\n    \n    // f3, f6, f9: docs and freqs and positions\n    f3 = newField(\"f3\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f3);     \n    \n    f6 = newField(\"f6\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f6);\n    \n    f9 = newField(\"f9\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f9);\n        \n    writer.addDocument(d);\n\n    // force merge\n    writer.forceMerge(1);\n    // flush\n    writer.close();\n\n    SegmentReader reader = getOnlySegmentReader(DirectoryReader.open(ram));\n    FieldInfos fi = reader.getFieldInfos();\n    // docs + docs = docs\n    assertEquals(IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f1\").getIndexOptions());\n    // docs + docs/freqs = docs\n    assertEquals(IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f2\").getIndexOptions());\n    // docs + docs/freqs/pos = docs\n    assertEquals(IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f3\").getIndexOptions());\n    // docs/freqs + docs = docs\n    assertEquals(IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f4\").getIndexOptions());\n    // docs/freqs + docs/freqs = docs/freqs\n    assertEquals(IndexOptions.DOCS_AND_FREQS, fi.fieldInfo(\"f5\").getIndexOptions());\n    // docs/freqs + docs/freqs/pos = docs/freqs\n    assertEquals(IndexOptions.DOCS_AND_FREQS, fi.fieldInfo(\"f6\").getIndexOptions());\n    // docs/freqs/pos + docs = docs\n    assertEquals(IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f7\").getIndexOptions());\n    // docs/freqs/pos + docs/freqs = docs/freqs\n    assertEquals(IndexOptions.DOCS_AND_FREQS, fi.fieldInfo(\"f8\").getIndexOptions());\n    // docs/freqs/pos + docs/freqs/pos = docs/freqs/pos\n    assertEquals(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS, fi.fieldInfo(\"f9\").getIndexOptions());\n    \n    reader.close();\n    ram.close();\n  }\n\n","sourceOld":"  // Tests whether the DocumentWriter correctly enable the\n  // omitTermFreqAndPositions bit in the FieldInfo\n  public void testPositions() throws Exception {\n    Directory ram = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random());\n    IndexWriter writer = new IndexWriter(ram, newIndexWriterConfig( TEST_VERSION_CURRENT, analyzer));\n    Document d = new Document();\n        \n    // f1,f2,f3: docs only\n    FieldType ft = new FieldType(TextField.TYPE_UNSTORED);\n    ft.setIndexOptions(IndexOptions.DOCS_ONLY);\n    \n    Field f1 = newField(\"f1\", \"This field has docs only\", ft);\n    d.add(f1);\n       \n    Field f2 = newField(\"f2\", \"This field has docs only\", ft);\n    d.add(f2);\n    \n    Field f3 = newField(\"f3\", \"This field has docs only\", ft);\n    d.add(f3);\n\n    FieldType ft2 = new FieldType(TextField.TYPE_UNSTORED);\n    ft2.setIndexOptions(IndexOptions.DOCS_AND_FREQS);\n    \n    // f4,f5,f6 docs and freqs\n    Field f4 = newField(\"f4\", \"This field has docs and freqs\", ft2);\n    d.add(f4);\n       \n    Field f5 = newField(\"f5\", \"This field has docs and freqs\", ft2);\n    d.add(f5);\n    \n    Field f6 = newField(\"f6\", \"This field has docs and freqs\", ft2);\n    d.add(f6);\n    \n    FieldType ft3 = new FieldType(TextField.TYPE_UNSTORED);\n    ft3.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS);\n    \n    // f7,f8,f9 docs/freqs/positions\n    Field f7 = newField(\"f7\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f7);\n       \n    Field f8 = newField(\"f8\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f8);\n    \n    Field f9 = newField(\"f9\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f9);\n        \n    writer.addDocument(d);\n    writer.forceMerge(1);\n\n    // now we add another document which has docs-only for f1, f4, f7, docs/freqs for f2, f5, f8, \n    // and docs/freqs/positions for f3, f6, f9\n    d = new Document();\n    \n    // f1,f4,f7: docs only\n    f1 = newField(\"f1\", \"This field has docs only\", ft);\n    d.add(f1);\n    \n    f4 = newField(\"f4\", \"This field has docs only\", ft);\n    d.add(f4);\n    \n    f7 = newField(\"f7\", \"This field has docs only\", ft);\n    d.add(f7);\n\n    // f2, f5, f8: docs and freqs\n    f2 = newField(\"f2\", \"This field has docs and freqs\", ft2);\n    d.add(f2);\n    \n    f5 = newField(\"f5\", \"This field has docs and freqs\", ft2);\n    d.add(f5);\n    \n    f8 = newField(\"f8\", \"This field has docs and freqs\", ft2);\n    d.add(f8);\n    \n    // f3, f6, f9: docs and freqs and positions\n    f3 = newField(\"f3\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f3);     \n    \n    f6 = newField(\"f6\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f6);\n    \n    f9 = newField(\"f9\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f9);\n        \n    writer.addDocument(d);\n\n    // force merge\n    writer.forceMerge(1);\n    // flush\n    writer.close();\n\n    SegmentReader reader = getOnlySegmentReader(IndexReader.open(ram));\n    FieldInfos fi = reader.getFieldInfos();\n    // docs + docs = docs\n    assertEquals(IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f1\").getIndexOptions());\n    // docs + docs/freqs = docs\n    assertEquals(IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f2\").getIndexOptions());\n    // docs + docs/freqs/pos = docs\n    assertEquals(IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f3\").getIndexOptions());\n    // docs/freqs + docs = docs\n    assertEquals(IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f4\").getIndexOptions());\n    // docs/freqs + docs/freqs = docs/freqs\n    assertEquals(IndexOptions.DOCS_AND_FREQS, fi.fieldInfo(\"f5\").getIndexOptions());\n    // docs/freqs + docs/freqs/pos = docs/freqs\n    assertEquals(IndexOptions.DOCS_AND_FREQS, fi.fieldInfo(\"f6\").getIndexOptions());\n    // docs/freqs/pos + docs = docs\n    assertEquals(IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f7\").getIndexOptions());\n    // docs/freqs/pos + docs/freqs = docs/freqs\n    assertEquals(IndexOptions.DOCS_AND_FREQS, fi.fieldInfo(\"f8\").getIndexOptions());\n    // docs/freqs/pos + docs/freqs/pos = docs/freqs/pos\n    assertEquals(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS, fi.fieldInfo(\"f9\").getIndexOptions());\n    \n    reader.close();\n    ram.close();\n  }\n\n","bugFix":null,"bugIntro":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"04f07771a2a7dd3a395700665ed839c3dae2def2","date":1339350139,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestOmitPositions#testPositions().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestOmitPositions#testPositions().mjava","sourceNew":"  // Tests whether the DocumentWriter correctly enable the\n  // omitTermFreqAndPositions bit in the FieldInfo\n  public void testPositions() throws Exception {\n    Directory ram = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random());\n    IndexWriter writer = new IndexWriter(ram, newIndexWriterConfig( TEST_VERSION_CURRENT, analyzer));\n    Document d = new Document();\n        \n    // f1,f2,f3: docs only\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setIndexOptions(IndexOptions.DOCS_ONLY);\n    \n    Field f1 = newField(\"f1\", \"This field has docs only\", ft);\n    d.add(f1);\n       \n    Field f2 = newField(\"f2\", \"This field has docs only\", ft);\n    d.add(f2);\n    \n    Field f3 = newField(\"f3\", \"This field has docs only\", ft);\n    d.add(f3);\n\n    FieldType ft2 = new FieldType(TextField.TYPE_NOT_STORED);\n    ft2.setIndexOptions(IndexOptions.DOCS_AND_FREQS);\n    \n    // f4,f5,f6 docs and freqs\n    Field f4 = newField(\"f4\", \"This field has docs and freqs\", ft2);\n    d.add(f4);\n       \n    Field f5 = newField(\"f5\", \"This field has docs and freqs\", ft2);\n    d.add(f5);\n    \n    Field f6 = newField(\"f6\", \"This field has docs and freqs\", ft2);\n    d.add(f6);\n    \n    FieldType ft3 = new FieldType(TextField.TYPE_NOT_STORED);\n    ft3.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS);\n    \n    // f7,f8,f9 docs/freqs/positions\n    Field f7 = newField(\"f7\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f7);\n       \n    Field f8 = newField(\"f8\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f8);\n    \n    Field f9 = newField(\"f9\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f9);\n        \n    writer.addDocument(d);\n    writer.forceMerge(1);\n\n    // now we add another document which has docs-only for f1, f4, f7, docs/freqs for f2, f5, f8, \n    // and docs/freqs/positions for f3, f6, f9\n    d = new Document();\n    \n    // f1,f4,f7: docs only\n    f1 = newField(\"f1\", \"This field has docs only\", ft);\n    d.add(f1);\n    \n    f4 = newField(\"f4\", \"This field has docs only\", ft);\n    d.add(f4);\n    \n    f7 = newField(\"f7\", \"This field has docs only\", ft);\n    d.add(f7);\n\n    // f2, f5, f8: docs and freqs\n    f2 = newField(\"f2\", \"This field has docs and freqs\", ft2);\n    d.add(f2);\n    \n    f5 = newField(\"f5\", \"This field has docs and freqs\", ft2);\n    d.add(f5);\n    \n    f8 = newField(\"f8\", \"This field has docs and freqs\", ft2);\n    d.add(f8);\n    \n    // f3, f6, f9: docs and freqs and positions\n    f3 = newField(\"f3\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f3);     \n    \n    f6 = newField(\"f6\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f6);\n    \n    f9 = newField(\"f9\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f9);\n        \n    writer.addDocument(d);\n\n    // force merge\n    writer.forceMerge(1);\n    // flush\n    writer.close();\n\n    SegmentReader reader = getOnlySegmentReader(DirectoryReader.open(ram));\n    FieldInfos fi = reader.getFieldInfos();\n    // docs + docs = docs\n    assertEquals(IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f1\").getIndexOptions());\n    // docs + docs/freqs = docs\n    assertEquals(IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f2\").getIndexOptions());\n    // docs + docs/freqs/pos = docs\n    assertEquals(IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f3\").getIndexOptions());\n    // docs/freqs + docs = docs\n    assertEquals(IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f4\").getIndexOptions());\n    // docs/freqs + docs/freqs = docs/freqs\n    assertEquals(IndexOptions.DOCS_AND_FREQS, fi.fieldInfo(\"f5\").getIndexOptions());\n    // docs/freqs + docs/freqs/pos = docs/freqs\n    assertEquals(IndexOptions.DOCS_AND_FREQS, fi.fieldInfo(\"f6\").getIndexOptions());\n    // docs/freqs/pos + docs = docs\n    assertEquals(IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f7\").getIndexOptions());\n    // docs/freqs/pos + docs/freqs = docs/freqs\n    assertEquals(IndexOptions.DOCS_AND_FREQS, fi.fieldInfo(\"f8\").getIndexOptions());\n    // docs/freqs/pos + docs/freqs/pos = docs/freqs/pos\n    assertEquals(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS, fi.fieldInfo(\"f9\").getIndexOptions());\n    \n    reader.close();\n    ram.close();\n  }\n\n","sourceOld":"  // Tests whether the DocumentWriter correctly enable the\n  // omitTermFreqAndPositions bit in the FieldInfo\n  public void testPositions() throws Exception {\n    Directory ram = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random());\n    IndexWriter writer = new IndexWriter(ram, newIndexWriterConfig( TEST_VERSION_CURRENT, analyzer));\n    Document d = new Document();\n        \n    // f1,f2,f3: docs only\n    FieldType ft = new FieldType(TextField.TYPE_UNSTORED);\n    ft.setIndexOptions(IndexOptions.DOCS_ONLY);\n    \n    Field f1 = newField(\"f1\", \"This field has docs only\", ft);\n    d.add(f1);\n       \n    Field f2 = newField(\"f2\", \"This field has docs only\", ft);\n    d.add(f2);\n    \n    Field f3 = newField(\"f3\", \"This field has docs only\", ft);\n    d.add(f3);\n\n    FieldType ft2 = new FieldType(TextField.TYPE_UNSTORED);\n    ft2.setIndexOptions(IndexOptions.DOCS_AND_FREQS);\n    \n    // f4,f5,f6 docs and freqs\n    Field f4 = newField(\"f4\", \"This field has docs and freqs\", ft2);\n    d.add(f4);\n       \n    Field f5 = newField(\"f5\", \"This field has docs and freqs\", ft2);\n    d.add(f5);\n    \n    Field f6 = newField(\"f6\", \"This field has docs and freqs\", ft2);\n    d.add(f6);\n    \n    FieldType ft3 = new FieldType(TextField.TYPE_UNSTORED);\n    ft3.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS);\n    \n    // f7,f8,f9 docs/freqs/positions\n    Field f7 = newField(\"f7\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f7);\n       \n    Field f8 = newField(\"f8\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f8);\n    \n    Field f9 = newField(\"f9\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f9);\n        \n    writer.addDocument(d);\n    writer.forceMerge(1);\n\n    // now we add another document which has docs-only for f1, f4, f7, docs/freqs for f2, f5, f8, \n    // and docs/freqs/positions for f3, f6, f9\n    d = new Document();\n    \n    // f1,f4,f7: docs only\n    f1 = newField(\"f1\", \"This field has docs only\", ft);\n    d.add(f1);\n    \n    f4 = newField(\"f4\", \"This field has docs only\", ft);\n    d.add(f4);\n    \n    f7 = newField(\"f7\", \"This field has docs only\", ft);\n    d.add(f7);\n\n    // f2, f5, f8: docs and freqs\n    f2 = newField(\"f2\", \"This field has docs and freqs\", ft2);\n    d.add(f2);\n    \n    f5 = newField(\"f5\", \"This field has docs and freqs\", ft2);\n    d.add(f5);\n    \n    f8 = newField(\"f8\", \"This field has docs and freqs\", ft2);\n    d.add(f8);\n    \n    // f3, f6, f9: docs and freqs and positions\n    f3 = newField(\"f3\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f3);     \n    \n    f6 = newField(\"f6\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f6);\n    \n    f9 = newField(\"f9\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f9);\n        \n    writer.addDocument(d);\n\n    // force merge\n    writer.forceMerge(1);\n    // flush\n    writer.close();\n\n    SegmentReader reader = getOnlySegmentReader(DirectoryReader.open(ram));\n    FieldInfos fi = reader.getFieldInfos();\n    // docs + docs = docs\n    assertEquals(IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f1\").getIndexOptions());\n    // docs + docs/freqs = docs\n    assertEquals(IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f2\").getIndexOptions());\n    // docs + docs/freqs/pos = docs\n    assertEquals(IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f3\").getIndexOptions());\n    // docs/freqs + docs = docs\n    assertEquals(IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f4\").getIndexOptions());\n    // docs/freqs + docs/freqs = docs/freqs\n    assertEquals(IndexOptions.DOCS_AND_FREQS, fi.fieldInfo(\"f5\").getIndexOptions());\n    // docs/freqs + docs/freqs/pos = docs/freqs\n    assertEquals(IndexOptions.DOCS_AND_FREQS, fi.fieldInfo(\"f6\").getIndexOptions());\n    // docs/freqs/pos + docs = docs\n    assertEquals(IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f7\").getIndexOptions());\n    // docs/freqs/pos + docs/freqs = docs/freqs\n    assertEquals(IndexOptions.DOCS_AND_FREQS, fi.fieldInfo(\"f8\").getIndexOptions());\n    // docs/freqs/pos + docs/freqs/pos = docs/freqs/pos\n    assertEquals(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS, fi.fieldInfo(\"f9\").getIndexOptions());\n    \n    reader.close();\n    ram.close();\n  }\n\n","bugFix":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestOmitPositions#testPositions().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestOmitPositions#testPositions().mjava","sourceNew":"  // Tests whether the DocumentWriter correctly enable the\n  // omitTermFreqAndPositions bit in the FieldInfo\n  public void testPositions() throws Exception {\n    Directory ram = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random());\n    IndexWriter writer = new IndexWriter(ram, newIndexWriterConfig( TEST_VERSION_CURRENT, analyzer));\n    Document d = new Document();\n        \n    // f1,f2,f3: docs only\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setIndexOptions(IndexOptions.DOCS_ONLY);\n    \n    Field f1 = newField(\"f1\", \"This field has docs only\", ft);\n    d.add(f1);\n       \n    Field f2 = newField(\"f2\", \"This field has docs only\", ft);\n    d.add(f2);\n    \n    Field f3 = newField(\"f3\", \"This field has docs only\", ft);\n    d.add(f3);\n\n    FieldType ft2 = new FieldType(TextField.TYPE_NOT_STORED);\n    ft2.setIndexOptions(IndexOptions.DOCS_AND_FREQS);\n    \n    // f4,f5,f6 docs and freqs\n    Field f4 = newField(\"f4\", \"This field has docs and freqs\", ft2);\n    d.add(f4);\n       \n    Field f5 = newField(\"f5\", \"This field has docs and freqs\", ft2);\n    d.add(f5);\n    \n    Field f6 = newField(\"f6\", \"This field has docs and freqs\", ft2);\n    d.add(f6);\n    \n    FieldType ft3 = new FieldType(TextField.TYPE_NOT_STORED);\n    ft3.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS);\n    \n    // f7,f8,f9 docs/freqs/positions\n    Field f7 = newField(\"f7\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f7);\n       \n    Field f8 = newField(\"f8\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f8);\n    \n    Field f9 = newField(\"f9\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f9);\n        \n    writer.addDocument(d);\n    writer.forceMerge(1);\n\n    // now we add another document which has docs-only for f1, f4, f7, docs/freqs for f2, f5, f8, \n    // and docs/freqs/positions for f3, f6, f9\n    d = new Document();\n    \n    // f1,f4,f7: docs only\n    f1 = newField(\"f1\", \"This field has docs only\", ft);\n    d.add(f1);\n    \n    f4 = newField(\"f4\", \"This field has docs only\", ft);\n    d.add(f4);\n    \n    f7 = newField(\"f7\", \"This field has docs only\", ft);\n    d.add(f7);\n\n    // f2, f5, f8: docs and freqs\n    f2 = newField(\"f2\", \"This field has docs and freqs\", ft2);\n    d.add(f2);\n    \n    f5 = newField(\"f5\", \"This field has docs and freqs\", ft2);\n    d.add(f5);\n    \n    f8 = newField(\"f8\", \"This field has docs and freqs\", ft2);\n    d.add(f8);\n    \n    // f3, f6, f9: docs and freqs and positions\n    f3 = newField(\"f3\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f3);     \n    \n    f6 = newField(\"f6\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f6);\n    \n    f9 = newField(\"f9\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f9);\n        \n    writer.addDocument(d);\n\n    // force merge\n    writer.forceMerge(1);\n    // flush\n    writer.shutdown();\n\n    SegmentReader reader = getOnlySegmentReader(DirectoryReader.open(ram));\n    FieldInfos fi = reader.getFieldInfos();\n    // docs + docs = docs\n    assertEquals(IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f1\").getIndexOptions());\n    // docs + docs/freqs = docs\n    assertEquals(IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f2\").getIndexOptions());\n    // docs + docs/freqs/pos = docs\n    assertEquals(IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f3\").getIndexOptions());\n    // docs/freqs + docs = docs\n    assertEquals(IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f4\").getIndexOptions());\n    // docs/freqs + docs/freqs = docs/freqs\n    assertEquals(IndexOptions.DOCS_AND_FREQS, fi.fieldInfo(\"f5\").getIndexOptions());\n    // docs/freqs + docs/freqs/pos = docs/freqs\n    assertEquals(IndexOptions.DOCS_AND_FREQS, fi.fieldInfo(\"f6\").getIndexOptions());\n    // docs/freqs/pos + docs = docs\n    assertEquals(IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f7\").getIndexOptions());\n    // docs/freqs/pos + docs/freqs = docs/freqs\n    assertEquals(IndexOptions.DOCS_AND_FREQS, fi.fieldInfo(\"f8\").getIndexOptions());\n    // docs/freqs/pos + docs/freqs/pos = docs/freqs/pos\n    assertEquals(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS, fi.fieldInfo(\"f9\").getIndexOptions());\n    \n    reader.close();\n    ram.close();\n  }\n\n","sourceOld":"  // Tests whether the DocumentWriter correctly enable the\n  // omitTermFreqAndPositions bit in the FieldInfo\n  public void testPositions() throws Exception {\n    Directory ram = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random());\n    IndexWriter writer = new IndexWriter(ram, newIndexWriterConfig( TEST_VERSION_CURRENT, analyzer));\n    Document d = new Document();\n        \n    // f1,f2,f3: docs only\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setIndexOptions(IndexOptions.DOCS_ONLY);\n    \n    Field f1 = newField(\"f1\", \"This field has docs only\", ft);\n    d.add(f1);\n       \n    Field f2 = newField(\"f2\", \"This field has docs only\", ft);\n    d.add(f2);\n    \n    Field f3 = newField(\"f3\", \"This field has docs only\", ft);\n    d.add(f3);\n\n    FieldType ft2 = new FieldType(TextField.TYPE_NOT_STORED);\n    ft2.setIndexOptions(IndexOptions.DOCS_AND_FREQS);\n    \n    // f4,f5,f6 docs and freqs\n    Field f4 = newField(\"f4\", \"This field has docs and freqs\", ft2);\n    d.add(f4);\n       \n    Field f5 = newField(\"f5\", \"This field has docs and freqs\", ft2);\n    d.add(f5);\n    \n    Field f6 = newField(\"f6\", \"This field has docs and freqs\", ft2);\n    d.add(f6);\n    \n    FieldType ft3 = new FieldType(TextField.TYPE_NOT_STORED);\n    ft3.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS);\n    \n    // f7,f8,f9 docs/freqs/positions\n    Field f7 = newField(\"f7\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f7);\n       \n    Field f8 = newField(\"f8\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f8);\n    \n    Field f9 = newField(\"f9\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f9);\n        \n    writer.addDocument(d);\n    writer.forceMerge(1);\n\n    // now we add another document which has docs-only for f1, f4, f7, docs/freqs for f2, f5, f8, \n    // and docs/freqs/positions for f3, f6, f9\n    d = new Document();\n    \n    // f1,f4,f7: docs only\n    f1 = newField(\"f1\", \"This field has docs only\", ft);\n    d.add(f1);\n    \n    f4 = newField(\"f4\", \"This field has docs only\", ft);\n    d.add(f4);\n    \n    f7 = newField(\"f7\", \"This field has docs only\", ft);\n    d.add(f7);\n\n    // f2, f5, f8: docs and freqs\n    f2 = newField(\"f2\", \"This field has docs and freqs\", ft2);\n    d.add(f2);\n    \n    f5 = newField(\"f5\", \"This field has docs and freqs\", ft2);\n    d.add(f5);\n    \n    f8 = newField(\"f8\", \"This field has docs and freqs\", ft2);\n    d.add(f8);\n    \n    // f3, f6, f9: docs and freqs and positions\n    f3 = newField(\"f3\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f3);     \n    \n    f6 = newField(\"f6\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f6);\n    \n    f9 = newField(\"f9\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f9);\n        \n    writer.addDocument(d);\n\n    // force merge\n    writer.forceMerge(1);\n    // flush\n    writer.close();\n\n    SegmentReader reader = getOnlySegmentReader(DirectoryReader.open(ram));\n    FieldInfos fi = reader.getFieldInfos();\n    // docs + docs = docs\n    assertEquals(IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f1\").getIndexOptions());\n    // docs + docs/freqs = docs\n    assertEquals(IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f2\").getIndexOptions());\n    // docs + docs/freqs/pos = docs\n    assertEquals(IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f3\").getIndexOptions());\n    // docs/freqs + docs = docs\n    assertEquals(IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f4\").getIndexOptions());\n    // docs/freqs + docs/freqs = docs/freqs\n    assertEquals(IndexOptions.DOCS_AND_FREQS, fi.fieldInfo(\"f5\").getIndexOptions());\n    // docs/freqs + docs/freqs/pos = docs/freqs\n    assertEquals(IndexOptions.DOCS_AND_FREQS, fi.fieldInfo(\"f6\").getIndexOptions());\n    // docs/freqs/pos + docs = docs\n    assertEquals(IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f7\").getIndexOptions());\n    // docs/freqs/pos + docs/freqs = docs/freqs\n    assertEquals(IndexOptions.DOCS_AND_FREQS, fi.fieldInfo(\"f8\").getIndexOptions());\n    // docs/freqs/pos + docs/freqs/pos = docs/freqs/pos\n    assertEquals(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS, fi.fieldInfo(\"f9\").getIndexOptions());\n    \n    reader.close();\n    ram.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestOmitPositions#testPositions().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestOmitPositions#testPositions().mjava","sourceNew":"  // Tests whether the DocumentWriter correctly enable the\n  // omitTermFreqAndPositions bit in the FieldInfo\n  public void testPositions() throws Exception {\n    Directory ram = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random());\n    IndexWriter writer = new IndexWriter(ram, newIndexWriterConfig(analyzer));\n    Document d = new Document();\n        \n    // f1,f2,f3: docs only\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setIndexOptions(IndexOptions.DOCS_ONLY);\n    \n    Field f1 = newField(\"f1\", \"This field has docs only\", ft);\n    d.add(f1);\n       \n    Field f2 = newField(\"f2\", \"This field has docs only\", ft);\n    d.add(f2);\n    \n    Field f3 = newField(\"f3\", \"This field has docs only\", ft);\n    d.add(f3);\n\n    FieldType ft2 = new FieldType(TextField.TYPE_NOT_STORED);\n    ft2.setIndexOptions(IndexOptions.DOCS_AND_FREQS);\n    \n    // f4,f5,f6 docs and freqs\n    Field f4 = newField(\"f4\", \"This field has docs and freqs\", ft2);\n    d.add(f4);\n       \n    Field f5 = newField(\"f5\", \"This field has docs and freqs\", ft2);\n    d.add(f5);\n    \n    Field f6 = newField(\"f6\", \"This field has docs and freqs\", ft2);\n    d.add(f6);\n    \n    FieldType ft3 = new FieldType(TextField.TYPE_NOT_STORED);\n    ft3.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS);\n    \n    // f7,f8,f9 docs/freqs/positions\n    Field f7 = newField(\"f7\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f7);\n       \n    Field f8 = newField(\"f8\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f8);\n    \n    Field f9 = newField(\"f9\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f9);\n        \n    writer.addDocument(d);\n    writer.forceMerge(1);\n\n    // now we add another document which has docs-only for f1, f4, f7, docs/freqs for f2, f5, f8, \n    // and docs/freqs/positions for f3, f6, f9\n    d = new Document();\n    \n    // f1,f4,f7: docs only\n    f1 = newField(\"f1\", \"This field has docs only\", ft);\n    d.add(f1);\n    \n    f4 = newField(\"f4\", \"This field has docs only\", ft);\n    d.add(f4);\n    \n    f7 = newField(\"f7\", \"This field has docs only\", ft);\n    d.add(f7);\n\n    // f2, f5, f8: docs and freqs\n    f2 = newField(\"f2\", \"This field has docs and freqs\", ft2);\n    d.add(f2);\n    \n    f5 = newField(\"f5\", \"This field has docs and freqs\", ft2);\n    d.add(f5);\n    \n    f8 = newField(\"f8\", \"This field has docs and freqs\", ft2);\n    d.add(f8);\n    \n    // f3, f6, f9: docs and freqs and positions\n    f3 = newField(\"f3\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f3);     \n    \n    f6 = newField(\"f6\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f6);\n    \n    f9 = newField(\"f9\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f9);\n        \n    writer.addDocument(d);\n\n    // force merge\n    writer.forceMerge(1);\n    // flush\n    writer.shutdown();\n\n    SegmentReader reader = getOnlySegmentReader(DirectoryReader.open(ram));\n    FieldInfos fi = reader.getFieldInfos();\n    // docs + docs = docs\n    assertEquals(IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f1\").getIndexOptions());\n    // docs + docs/freqs = docs\n    assertEquals(IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f2\").getIndexOptions());\n    // docs + docs/freqs/pos = docs\n    assertEquals(IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f3\").getIndexOptions());\n    // docs/freqs + docs = docs\n    assertEquals(IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f4\").getIndexOptions());\n    // docs/freqs + docs/freqs = docs/freqs\n    assertEquals(IndexOptions.DOCS_AND_FREQS, fi.fieldInfo(\"f5\").getIndexOptions());\n    // docs/freqs + docs/freqs/pos = docs/freqs\n    assertEquals(IndexOptions.DOCS_AND_FREQS, fi.fieldInfo(\"f6\").getIndexOptions());\n    // docs/freqs/pos + docs = docs\n    assertEquals(IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f7\").getIndexOptions());\n    // docs/freqs/pos + docs/freqs = docs/freqs\n    assertEquals(IndexOptions.DOCS_AND_FREQS, fi.fieldInfo(\"f8\").getIndexOptions());\n    // docs/freqs/pos + docs/freqs/pos = docs/freqs/pos\n    assertEquals(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS, fi.fieldInfo(\"f9\").getIndexOptions());\n    \n    reader.close();\n    ram.close();\n  }\n\n","sourceOld":"  // Tests whether the DocumentWriter correctly enable the\n  // omitTermFreqAndPositions bit in the FieldInfo\n  public void testPositions() throws Exception {\n    Directory ram = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random());\n    IndexWriter writer = new IndexWriter(ram, newIndexWriterConfig( TEST_VERSION_CURRENT, analyzer));\n    Document d = new Document();\n        \n    // f1,f2,f3: docs only\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setIndexOptions(IndexOptions.DOCS_ONLY);\n    \n    Field f1 = newField(\"f1\", \"This field has docs only\", ft);\n    d.add(f1);\n       \n    Field f2 = newField(\"f2\", \"This field has docs only\", ft);\n    d.add(f2);\n    \n    Field f3 = newField(\"f3\", \"This field has docs only\", ft);\n    d.add(f3);\n\n    FieldType ft2 = new FieldType(TextField.TYPE_NOT_STORED);\n    ft2.setIndexOptions(IndexOptions.DOCS_AND_FREQS);\n    \n    // f4,f5,f6 docs and freqs\n    Field f4 = newField(\"f4\", \"This field has docs and freqs\", ft2);\n    d.add(f4);\n       \n    Field f5 = newField(\"f5\", \"This field has docs and freqs\", ft2);\n    d.add(f5);\n    \n    Field f6 = newField(\"f6\", \"This field has docs and freqs\", ft2);\n    d.add(f6);\n    \n    FieldType ft3 = new FieldType(TextField.TYPE_NOT_STORED);\n    ft3.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS);\n    \n    // f7,f8,f9 docs/freqs/positions\n    Field f7 = newField(\"f7\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f7);\n       \n    Field f8 = newField(\"f8\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f8);\n    \n    Field f9 = newField(\"f9\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f9);\n        \n    writer.addDocument(d);\n    writer.forceMerge(1);\n\n    // now we add another document which has docs-only for f1, f4, f7, docs/freqs for f2, f5, f8, \n    // and docs/freqs/positions for f3, f6, f9\n    d = new Document();\n    \n    // f1,f4,f7: docs only\n    f1 = newField(\"f1\", \"This field has docs only\", ft);\n    d.add(f1);\n    \n    f4 = newField(\"f4\", \"This field has docs only\", ft);\n    d.add(f4);\n    \n    f7 = newField(\"f7\", \"This field has docs only\", ft);\n    d.add(f7);\n\n    // f2, f5, f8: docs and freqs\n    f2 = newField(\"f2\", \"This field has docs and freqs\", ft2);\n    d.add(f2);\n    \n    f5 = newField(\"f5\", \"This field has docs and freqs\", ft2);\n    d.add(f5);\n    \n    f8 = newField(\"f8\", \"This field has docs and freqs\", ft2);\n    d.add(f8);\n    \n    // f3, f6, f9: docs and freqs and positions\n    f3 = newField(\"f3\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f3);     \n    \n    f6 = newField(\"f6\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f6);\n    \n    f9 = newField(\"f9\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f9);\n        \n    writer.addDocument(d);\n\n    // force merge\n    writer.forceMerge(1);\n    // flush\n    writer.shutdown();\n\n    SegmentReader reader = getOnlySegmentReader(DirectoryReader.open(ram));\n    FieldInfos fi = reader.getFieldInfos();\n    // docs + docs = docs\n    assertEquals(IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f1\").getIndexOptions());\n    // docs + docs/freqs = docs\n    assertEquals(IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f2\").getIndexOptions());\n    // docs + docs/freqs/pos = docs\n    assertEquals(IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f3\").getIndexOptions());\n    // docs/freqs + docs = docs\n    assertEquals(IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f4\").getIndexOptions());\n    // docs/freqs + docs/freqs = docs/freqs\n    assertEquals(IndexOptions.DOCS_AND_FREQS, fi.fieldInfo(\"f5\").getIndexOptions());\n    // docs/freqs + docs/freqs/pos = docs/freqs\n    assertEquals(IndexOptions.DOCS_AND_FREQS, fi.fieldInfo(\"f6\").getIndexOptions());\n    // docs/freqs/pos + docs = docs\n    assertEquals(IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f7\").getIndexOptions());\n    // docs/freqs/pos + docs/freqs = docs/freqs\n    assertEquals(IndexOptions.DOCS_AND_FREQS, fi.fieldInfo(\"f8\").getIndexOptions());\n    // docs/freqs/pos + docs/freqs/pos = docs/freqs/pos\n    assertEquals(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS, fi.fieldInfo(\"f9\").getIndexOptions());\n    \n    reader.close();\n    ram.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestOmitPositions#testPositions().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestOmitPositions#testPositions().mjava","sourceNew":"  // Tests whether the DocumentWriter correctly enable the\n  // omitTermFreqAndPositions bit in the FieldInfo\n  public void testPositions() throws Exception {\n    Directory ram = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random());\n    IndexWriter writer = new IndexWriter(ram, newIndexWriterConfig(analyzer));\n    Document d = new Document();\n        \n    // f1,f2,f3: docs only\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setIndexOptions(IndexOptions.DOCS_ONLY);\n    \n    Field f1 = newField(\"f1\", \"This field has docs only\", ft);\n    d.add(f1);\n       \n    Field f2 = newField(\"f2\", \"This field has docs only\", ft);\n    d.add(f2);\n    \n    Field f3 = newField(\"f3\", \"This field has docs only\", ft);\n    d.add(f3);\n\n    FieldType ft2 = new FieldType(TextField.TYPE_NOT_STORED);\n    ft2.setIndexOptions(IndexOptions.DOCS_AND_FREQS);\n    \n    // f4,f5,f6 docs and freqs\n    Field f4 = newField(\"f4\", \"This field has docs and freqs\", ft2);\n    d.add(f4);\n       \n    Field f5 = newField(\"f5\", \"This field has docs and freqs\", ft2);\n    d.add(f5);\n    \n    Field f6 = newField(\"f6\", \"This field has docs and freqs\", ft2);\n    d.add(f6);\n    \n    FieldType ft3 = new FieldType(TextField.TYPE_NOT_STORED);\n    ft3.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS);\n    \n    // f7,f8,f9 docs/freqs/positions\n    Field f7 = newField(\"f7\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f7);\n       \n    Field f8 = newField(\"f8\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f8);\n    \n    Field f9 = newField(\"f9\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f9);\n        \n    writer.addDocument(d);\n    writer.forceMerge(1);\n\n    // now we add another document which has docs-only for f1, f4, f7, docs/freqs for f2, f5, f8, \n    // and docs/freqs/positions for f3, f6, f9\n    d = new Document();\n    \n    // f1,f4,f7: docs only\n    f1 = newField(\"f1\", \"This field has docs only\", ft);\n    d.add(f1);\n    \n    f4 = newField(\"f4\", \"This field has docs only\", ft);\n    d.add(f4);\n    \n    f7 = newField(\"f7\", \"This field has docs only\", ft);\n    d.add(f7);\n\n    // f2, f5, f8: docs and freqs\n    f2 = newField(\"f2\", \"This field has docs and freqs\", ft2);\n    d.add(f2);\n    \n    f5 = newField(\"f5\", \"This field has docs and freqs\", ft2);\n    d.add(f5);\n    \n    f8 = newField(\"f8\", \"This field has docs and freqs\", ft2);\n    d.add(f8);\n    \n    // f3, f6, f9: docs and freqs and positions\n    f3 = newField(\"f3\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f3);     \n    \n    f6 = newField(\"f6\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f6);\n    \n    f9 = newField(\"f9\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f9);\n        \n    writer.addDocument(d);\n\n    // force merge\n    writer.forceMerge(1);\n    // flush\n    writer.close();\n\n    SegmentReader reader = getOnlySegmentReader(DirectoryReader.open(ram));\n    FieldInfos fi = reader.getFieldInfos();\n    // docs + docs = docs\n    assertEquals(IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f1\").getIndexOptions());\n    // docs + docs/freqs = docs\n    assertEquals(IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f2\").getIndexOptions());\n    // docs + docs/freqs/pos = docs\n    assertEquals(IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f3\").getIndexOptions());\n    // docs/freqs + docs = docs\n    assertEquals(IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f4\").getIndexOptions());\n    // docs/freqs + docs/freqs = docs/freqs\n    assertEquals(IndexOptions.DOCS_AND_FREQS, fi.fieldInfo(\"f5\").getIndexOptions());\n    // docs/freqs + docs/freqs/pos = docs/freqs\n    assertEquals(IndexOptions.DOCS_AND_FREQS, fi.fieldInfo(\"f6\").getIndexOptions());\n    // docs/freqs/pos + docs = docs\n    assertEquals(IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f7\").getIndexOptions());\n    // docs/freqs/pos + docs/freqs = docs/freqs\n    assertEquals(IndexOptions.DOCS_AND_FREQS, fi.fieldInfo(\"f8\").getIndexOptions());\n    // docs/freqs/pos + docs/freqs/pos = docs/freqs/pos\n    assertEquals(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS, fi.fieldInfo(\"f9\").getIndexOptions());\n    \n    reader.close();\n    ram.close();\n  }\n\n","sourceOld":"  // Tests whether the DocumentWriter correctly enable the\n  // omitTermFreqAndPositions bit in the FieldInfo\n  public void testPositions() throws Exception {\n    Directory ram = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random());\n    IndexWriter writer = new IndexWriter(ram, newIndexWriterConfig(analyzer));\n    Document d = new Document();\n        \n    // f1,f2,f3: docs only\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setIndexOptions(IndexOptions.DOCS_ONLY);\n    \n    Field f1 = newField(\"f1\", \"This field has docs only\", ft);\n    d.add(f1);\n       \n    Field f2 = newField(\"f2\", \"This field has docs only\", ft);\n    d.add(f2);\n    \n    Field f3 = newField(\"f3\", \"This field has docs only\", ft);\n    d.add(f3);\n\n    FieldType ft2 = new FieldType(TextField.TYPE_NOT_STORED);\n    ft2.setIndexOptions(IndexOptions.DOCS_AND_FREQS);\n    \n    // f4,f5,f6 docs and freqs\n    Field f4 = newField(\"f4\", \"This field has docs and freqs\", ft2);\n    d.add(f4);\n       \n    Field f5 = newField(\"f5\", \"This field has docs and freqs\", ft2);\n    d.add(f5);\n    \n    Field f6 = newField(\"f6\", \"This field has docs and freqs\", ft2);\n    d.add(f6);\n    \n    FieldType ft3 = new FieldType(TextField.TYPE_NOT_STORED);\n    ft3.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS);\n    \n    // f7,f8,f9 docs/freqs/positions\n    Field f7 = newField(\"f7\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f7);\n       \n    Field f8 = newField(\"f8\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f8);\n    \n    Field f9 = newField(\"f9\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f9);\n        \n    writer.addDocument(d);\n    writer.forceMerge(1);\n\n    // now we add another document which has docs-only for f1, f4, f7, docs/freqs for f2, f5, f8, \n    // and docs/freqs/positions for f3, f6, f9\n    d = new Document();\n    \n    // f1,f4,f7: docs only\n    f1 = newField(\"f1\", \"This field has docs only\", ft);\n    d.add(f1);\n    \n    f4 = newField(\"f4\", \"This field has docs only\", ft);\n    d.add(f4);\n    \n    f7 = newField(\"f7\", \"This field has docs only\", ft);\n    d.add(f7);\n\n    // f2, f5, f8: docs and freqs\n    f2 = newField(\"f2\", \"This field has docs and freqs\", ft2);\n    d.add(f2);\n    \n    f5 = newField(\"f5\", \"This field has docs and freqs\", ft2);\n    d.add(f5);\n    \n    f8 = newField(\"f8\", \"This field has docs and freqs\", ft2);\n    d.add(f8);\n    \n    // f3, f6, f9: docs and freqs and positions\n    f3 = newField(\"f3\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f3);     \n    \n    f6 = newField(\"f6\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f6);\n    \n    f9 = newField(\"f9\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f9);\n        \n    writer.addDocument(d);\n\n    // force merge\n    writer.forceMerge(1);\n    // flush\n    writer.shutdown();\n\n    SegmentReader reader = getOnlySegmentReader(DirectoryReader.open(ram));\n    FieldInfos fi = reader.getFieldInfos();\n    // docs + docs = docs\n    assertEquals(IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f1\").getIndexOptions());\n    // docs + docs/freqs = docs\n    assertEquals(IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f2\").getIndexOptions());\n    // docs + docs/freqs/pos = docs\n    assertEquals(IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f3\").getIndexOptions());\n    // docs/freqs + docs = docs\n    assertEquals(IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f4\").getIndexOptions());\n    // docs/freqs + docs/freqs = docs/freqs\n    assertEquals(IndexOptions.DOCS_AND_FREQS, fi.fieldInfo(\"f5\").getIndexOptions());\n    // docs/freqs + docs/freqs/pos = docs/freqs\n    assertEquals(IndexOptions.DOCS_AND_FREQS, fi.fieldInfo(\"f6\").getIndexOptions());\n    // docs/freqs/pos + docs = docs\n    assertEquals(IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f7\").getIndexOptions());\n    // docs/freqs/pos + docs/freqs = docs/freqs\n    assertEquals(IndexOptions.DOCS_AND_FREQS, fi.fieldInfo(\"f8\").getIndexOptions());\n    // docs/freqs/pos + docs/freqs/pos = docs/freqs/pos\n    assertEquals(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS, fi.fieldInfo(\"f9\").getIndexOptions());\n    \n    reader.close();\n    ram.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2bb2842e561df4e8e9ad89010605fc86ac265465","date":1414768208,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestOmitPositions#testPositions().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestOmitPositions#testPositions().mjava","sourceNew":"  // Tests whether the DocumentWriter correctly enable the\n  // omitTermFreqAndPositions bit in the FieldInfo\n  public void testPositions() throws Exception {\n    Directory ram = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random());\n    IndexWriter writer = new IndexWriter(ram, newIndexWriterConfig(analyzer));\n    Document d = new Document();\n        \n    // f1,f2,f3: docs only\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setIndexOptions(IndexOptions.DOCS);\n    \n    Field f1 = newField(\"f1\", \"This field has docs only\", ft);\n    d.add(f1);\n       \n    Field f2 = newField(\"f2\", \"This field has docs only\", ft);\n    d.add(f2);\n    \n    Field f3 = newField(\"f3\", \"This field has docs only\", ft);\n    d.add(f3);\n\n    FieldType ft2 = new FieldType(TextField.TYPE_NOT_STORED);\n    ft2.setIndexOptions(IndexOptions.DOCS_AND_FREQS);\n    \n    // f4,f5,f6 docs and freqs\n    Field f4 = newField(\"f4\", \"This field has docs and freqs\", ft2);\n    d.add(f4);\n       \n    Field f5 = newField(\"f5\", \"This field has docs and freqs\", ft2);\n    d.add(f5);\n    \n    Field f6 = newField(\"f6\", \"This field has docs and freqs\", ft2);\n    d.add(f6);\n    \n    FieldType ft3 = new FieldType(TextField.TYPE_NOT_STORED);\n    ft3.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS);\n    \n    // f7,f8,f9 docs/freqs/positions\n    Field f7 = newField(\"f7\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f7);\n       \n    Field f8 = newField(\"f8\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f8);\n    \n    Field f9 = newField(\"f9\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f9);\n        \n    writer.addDocument(d);\n    writer.forceMerge(1);\n\n    // now we add another document which has docs-only for f1, f4, f7, docs/freqs for f2, f5, f8, \n    // and docs/freqs/positions for f3, f6, f9\n    d = new Document();\n    \n    // f1,f4,f7: docs only\n    f1 = newField(\"f1\", \"This field has docs only\", ft);\n    d.add(f1);\n    \n    f4 = newField(\"f4\", \"This field has docs only\", ft);\n    d.add(f4);\n    \n    f7 = newField(\"f7\", \"This field has docs only\", ft);\n    d.add(f7);\n\n    // f2, f5, f8: docs and freqs\n    f2 = newField(\"f2\", \"This field has docs and freqs\", ft2);\n    d.add(f2);\n    \n    f5 = newField(\"f5\", \"This field has docs and freqs\", ft2);\n    d.add(f5);\n    \n    f8 = newField(\"f8\", \"This field has docs and freqs\", ft2);\n    d.add(f8);\n    \n    // f3, f6, f9: docs and freqs and positions\n    f3 = newField(\"f3\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f3);     \n    \n    f6 = newField(\"f6\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f6);\n    \n    f9 = newField(\"f9\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f9);\n        \n    writer.addDocument(d);\n\n    // force merge\n    writer.forceMerge(1);\n    // flush\n    writer.close();\n\n    SegmentReader reader = getOnlySegmentReader(DirectoryReader.open(ram));\n    FieldInfos fi = reader.getFieldInfos();\n    // docs + docs = docs\n    assertEquals(IndexOptions.DOCS, fi.fieldInfo(\"f1\").getIndexOptions());\n    // docs + docs/freqs = docs\n    assertEquals(IndexOptions.DOCS, fi.fieldInfo(\"f2\").getIndexOptions());\n    // docs + docs/freqs/pos = docs\n    assertEquals(IndexOptions.DOCS, fi.fieldInfo(\"f3\").getIndexOptions());\n    // docs/freqs + docs = docs\n    assertEquals(IndexOptions.DOCS, fi.fieldInfo(\"f4\").getIndexOptions());\n    // docs/freqs + docs/freqs = docs/freqs\n    assertEquals(IndexOptions.DOCS_AND_FREQS, fi.fieldInfo(\"f5\").getIndexOptions());\n    // docs/freqs + docs/freqs/pos = docs/freqs\n    assertEquals(IndexOptions.DOCS_AND_FREQS, fi.fieldInfo(\"f6\").getIndexOptions());\n    // docs/freqs/pos + docs = docs\n    assertEquals(IndexOptions.DOCS, fi.fieldInfo(\"f7\").getIndexOptions());\n    // docs/freqs/pos + docs/freqs = docs/freqs\n    assertEquals(IndexOptions.DOCS_AND_FREQS, fi.fieldInfo(\"f8\").getIndexOptions());\n    // docs/freqs/pos + docs/freqs/pos = docs/freqs/pos\n    assertEquals(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS, fi.fieldInfo(\"f9\").getIndexOptions());\n    \n    reader.close();\n    ram.close();\n  }\n\n","sourceOld":"  // Tests whether the DocumentWriter correctly enable the\n  // omitTermFreqAndPositions bit in the FieldInfo\n  public void testPositions() throws Exception {\n    Directory ram = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random());\n    IndexWriter writer = new IndexWriter(ram, newIndexWriterConfig(analyzer));\n    Document d = new Document();\n        \n    // f1,f2,f3: docs only\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setIndexOptions(IndexOptions.DOCS_ONLY);\n    \n    Field f1 = newField(\"f1\", \"This field has docs only\", ft);\n    d.add(f1);\n       \n    Field f2 = newField(\"f2\", \"This field has docs only\", ft);\n    d.add(f2);\n    \n    Field f3 = newField(\"f3\", \"This field has docs only\", ft);\n    d.add(f3);\n\n    FieldType ft2 = new FieldType(TextField.TYPE_NOT_STORED);\n    ft2.setIndexOptions(IndexOptions.DOCS_AND_FREQS);\n    \n    // f4,f5,f6 docs and freqs\n    Field f4 = newField(\"f4\", \"This field has docs and freqs\", ft2);\n    d.add(f4);\n       \n    Field f5 = newField(\"f5\", \"This field has docs and freqs\", ft2);\n    d.add(f5);\n    \n    Field f6 = newField(\"f6\", \"This field has docs and freqs\", ft2);\n    d.add(f6);\n    \n    FieldType ft3 = new FieldType(TextField.TYPE_NOT_STORED);\n    ft3.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS);\n    \n    // f7,f8,f9 docs/freqs/positions\n    Field f7 = newField(\"f7\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f7);\n       \n    Field f8 = newField(\"f8\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f8);\n    \n    Field f9 = newField(\"f9\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f9);\n        \n    writer.addDocument(d);\n    writer.forceMerge(1);\n\n    // now we add another document which has docs-only for f1, f4, f7, docs/freqs for f2, f5, f8, \n    // and docs/freqs/positions for f3, f6, f9\n    d = new Document();\n    \n    // f1,f4,f7: docs only\n    f1 = newField(\"f1\", \"This field has docs only\", ft);\n    d.add(f1);\n    \n    f4 = newField(\"f4\", \"This field has docs only\", ft);\n    d.add(f4);\n    \n    f7 = newField(\"f7\", \"This field has docs only\", ft);\n    d.add(f7);\n\n    // f2, f5, f8: docs and freqs\n    f2 = newField(\"f2\", \"This field has docs and freqs\", ft2);\n    d.add(f2);\n    \n    f5 = newField(\"f5\", \"This field has docs and freqs\", ft2);\n    d.add(f5);\n    \n    f8 = newField(\"f8\", \"This field has docs and freqs\", ft2);\n    d.add(f8);\n    \n    // f3, f6, f9: docs and freqs and positions\n    f3 = newField(\"f3\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f3);     \n    \n    f6 = newField(\"f6\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f6);\n    \n    f9 = newField(\"f9\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f9);\n        \n    writer.addDocument(d);\n\n    // force merge\n    writer.forceMerge(1);\n    // flush\n    writer.close();\n\n    SegmentReader reader = getOnlySegmentReader(DirectoryReader.open(ram));\n    FieldInfos fi = reader.getFieldInfos();\n    // docs + docs = docs\n    assertEquals(IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f1\").getIndexOptions());\n    // docs + docs/freqs = docs\n    assertEquals(IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f2\").getIndexOptions());\n    // docs + docs/freqs/pos = docs\n    assertEquals(IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f3\").getIndexOptions());\n    // docs/freqs + docs = docs\n    assertEquals(IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f4\").getIndexOptions());\n    // docs/freqs + docs/freqs = docs/freqs\n    assertEquals(IndexOptions.DOCS_AND_FREQS, fi.fieldInfo(\"f5\").getIndexOptions());\n    // docs/freqs + docs/freqs/pos = docs/freqs\n    assertEquals(IndexOptions.DOCS_AND_FREQS, fi.fieldInfo(\"f6\").getIndexOptions());\n    // docs/freqs/pos + docs = docs\n    assertEquals(IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f7\").getIndexOptions());\n    // docs/freqs/pos + docs/freqs = docs/freqs\n    assertEquals(IndexOptions.DOCS_AND_FREQS, fi.fieldInfo(\"f8\").getIndexOptions());\n    // docs/freqs/pos + docs/freqs/pos = docs/freqs/pos\n    assertEquals(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS, fi.fieldInfo(\"f9\").getIndexOptions());\n    \n    reader.close();\n    ram.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1","date":1457644139,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestOmitPositions#testPositions().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestOmitPositions#testPositions().mjava","sourceNew":"  // Tests whether the DocumentWriter correctly enable the\n  // omitTermFreqAndPositions bit in the FieldInfo\n  public void testPositions() throws Exception {\n    Directory ram = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random());\n    IndexWriter writer = new IndexWriter(ram, newIndexWriterConfig(analyzer));\n    Document d = new Document();\n        \n    // f1,f2,f3: docs only\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setIndexOptions(IndexOptions.DOCS);\n    \n    Field f1 = newField(\"f1\", \"This field has docs only\", ft);\n    d.add(f1);\n       \n    Field f2 = newField(\"f2\", \"This field has docs only\", ft);\n    d.add(f2);\n    \n    Field f3 = newField(\"f3\", \"This field has docs only\", ft);\n    d.add(f3);\n\n    FieldType ft2 = new FieldType(TextField.TYPE_NOT_STORED);\n    ft2.setIndexOptions(IndexOptions.DOCS_AND_FREQS);\n    \n    // f4,f5,f6 docs and freqs\n    Field f4 = newField(\"f4\", \"This field has docs and freqs\", ft2);\n    d.add(f4);\n       \n    Field f5 = newField(\"f5\", \"This field has docs and freqs\", ft2);\n    d.add(f5);\n    \n    Field f6 = newField(\"f6\", \"This field has docs and freqs\", ft2);\n    d.add(f6);\n    \n    FieldType ft3 = new FieldType(TextField.TYPE_NOT_STORED);\n    ft3.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS);\n    \n    // f7,f8,f9 docs/freqs/positions\n    Field f7 = newField(\"f7\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f7);\n       \n    Field f8 = newField(\"f8\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f8);\n    \n    Field f9 = newField(\"f9\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f9);\n        \n    writer.addDocument(d);\n    writer.forceMerge(1);\n\n    // now we add another document which has docs-only for f1, f4, f7, docs/freqs for f2, f5, f8, \n    // and docs/freqs/positions for f3, f6, f9\n    d = new Document();\n    \n    // f1,f4,f7: docs only\n    f1 = newField(\"f1\", \"This field has docs only\", ft);\n    d.add(f1);\n    \n    f4 = newField(\"f4\", \"This field has docs only\", ft);\n    d.add(f4);\n    \n    f7 = newField(\"f7\", \"This field has docs only\", ft);\n    d.add(f7);\n\n    // f2, f5, f8: docs and freqs\n    f2 = newField(\"f2\", \"This field has docs and freqs\", ft2);\n    d.add(f2);\n    \n    f5 = newField(\"f5\", \"This field has docs and freqs\", ft2);\n    d.add(f5);\n    \n    f8 = newField(\"f8\", \"This field has docs and freqs\", ft2);\n    d.add(f8);\n    \n    // f3, f6, f9: docs and freqs and positions\n    f3 = newField(\"f3\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f3);     \n    \n    f6 = newField(\"f6\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f6);\n    \n    f9 = newField(\"f9\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f9);\n        \n    writer.addDocument(d);\n\n    // force merge\n    writer.forceMerge(1);\n    // flush\n    writer.close();\n\n    LeafReader reader = getOnlyLeafReader(DirectoryReader.open(ram));\n    FieldInfos fi = reader.getFieldInfos();\n    // docs + docs = docs\n    assertEquals(IndexOptions.DOCS, fi.fieldInfo(\"f1\").getIndexOptions());\n    // docs + docs/freqs = docs\n    assertEquals(IndexOptions.DOCS, fi.fieldInfo(\"f2\").getIndexOptions());\n    // docs + docs/freqs/pos = docs\n    assertEquals(IndexOptions.DOCS, fi.fieldInfo(\"f3\").getIndexOptions());\n    // docs/freqs + docs = docs\n    assertEquals(IndexOptions.DOCS, fi.fieldInfo(\"f4\").getIndexOptions());\n    // docs/freqs + docs/freqs = docs/freqs\n    assertEquals(IndexOptions.DOCS_AND_FREQS, fi.fieldInfo(\"f5\").getIndexOptions());\n    // docs/freqs + docs/freqs/pos = docs/freqs\n    assertEquals(IndexOptions.DOCS_AND_FREQS, fi.fieldInfo(\"f6\").getIndexOptions());\n    // docs/freqs/pos + docs = docs\n    assertEquals(IndexOptions.DOCS, fi.fieldInfo(\"f7\").getIndexOptions());\n    // docs/freqs/pos + docs/freqs = docs/freqs\n    assertEquals(IndexOptions.DOCS_AND_FREQS, fi.fieldInfo(\"f8\").getIndexOptions());\n    // docs/freqs/pos + docs/freqs/pos = docs/freqs/pos\n    assertEquals(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS, fi.fieldInfo(\"f9\").getIndexOptions());\n    \n    reader.close();\n    ram.close();\n  }\n\n","sourceOld":"  // Tests whether the DocumentWriter correctly enable the\n  // omitTermFreqAndPositions bit in the FieldInfo\n  public void testPositions() throws Exception {\n    Directory ram = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random());\n    IndexWriter writer = new IndexWriter(ram, newIndexWriterConfig(analyzer));\n    Document d = new Document();\n        \n    // f1,f2,f3: docs only\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setIndexOptions(IndexOptions.DOCS);\n    \n    Field f1 = newField(\"f1\", \"This field has docs only\", ft);\n    d.add(f1);\n       \n    Field f2 = newField(\"f2\", \"This field has docs only\", ft);\n    d.add(f2);\n    \n    Field f3 = newField(\"f3\", \"This field has docs only\", ft);\n    d.add(f3);\n\n    FieldType ft2 = new FieldType(TextField.TYPE_NOT_STORED);\n    ft2.setIndexOptions(IndexOptions.DOCS_AND_FREQS);\n    \n    // f4,f5,f6 docs and freqs\n    Field f4 = newField(\"f4\", \"This field has docs and freqs\", ft2);\n    d.add(f4);\n       \n    Field f5 = newField(\"f5\", \"This field has docs and freqs\", ft2);\n    d.add(f5);\n    \n    Field f6 = newField(\"f6\", \"This field has docs and freqs\", ft2);\n    d.add(f6);\n    \n    FieldType ft3 = new FieldType(TextField.TYPE_NOT_STORED);\n    ft3.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS);\n    \n    // f7,f8,f9 docs/freqs/positions\n    Field f7 = newField(\"f7\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f7);\n       \n    Field f8 = newField(\"f8\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f8);\n    \n    Field f9 = newField(\"f9\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f9);\n        \n    writer.addDocument(d);\n    writer.forceMerge(1);\n\n    // now we add another document which has docs-only for f1, f4, f7, docs/freqs for f2, f5, f8, \n    // and docs/freqs/positions for f3, f6, f9\n    d = new Document();\n    \n    // f1,f4,f7: docs only\n    f1 = newField(\"f1\", \"This field has docs only\", ft);\n    d.add(f1);\n    \n    f4 = newField(\"f4\", \"This field has docs only\", ft);\n    d.add(f4);\n    \n    f7 = newField(\"f7\", \"This field has docs only\", ft);\n    d.add(f7);\n\n    // f2, f5, f8: docs and freqs\n    f2 = newField(\"f2\", \"This field has docs and freqs\", ft2);\n    d.add(f2);\n    \n    f5 = newField(\"f5\", \"This field has docs and freqs\", ft2);\n    d.add(f5);\n    \n    f8 = newField(\"f8\", \"This field has docs and freqs\", ft2);\n    d.add(f8);\n    \n    // f3, f6, f9: docs and freqs and positions\n    f3 = newField(\"f3\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f3);     \n    \n    f6 = newField(\"f6\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f6);\n    \n    f9 = newField(\"f9\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f9);\n        \n    writer.addDocument(d);\n\n    // force merge\n    writer.forceMerge(1);\n    // flush\n    writer.close();\n\n    SegmentReader reader = getOnlySegmentReader(DirectoryReader.open(ram));\n    FieldInfos fi = reader.getFieldInfos();\n    // docs + docs = docs\n    assertEquals(IndexOptions.DOCS, fi.fieldInfo(\"f1\").getIndexOptions());\n    // docs + docs/freqs = docs\n    assertEquals(IndexOptions.DOCS, fi.fieldInfo(\"f2\").getIndexOptions());\n    // docs + docs/freqs/pos = docs\n    assertEquals(IndexOptions.DOCS, fi.fieldInfo(\"f3\").getIndexOptions());\n    // docs/freqs + docs = docs\n    assertEquals(IndexOptions.DOCS, fi.fieldInfo(\"f4\").getIndexOptions());\n    // docs/freqs + docs/freqs = docs/freqs\n    assertEquals(IndexOptions.DOCS_AND_FREQS, fi.fieldInfo(\"f5\").getIndexOptions());\n    // docs/freqs + docs/freqs/pos = docs/freqs\n    assertEquals(IndexOptions.DOCS_AND_FREQS, fi.fieldInfo(\"f6\").getIndexOptions());\n    // docs/freqs/pos + docs = docs\n    assertEquals(IndexOptions.DOCS, fi.fieldInfo(\"f7\").getIndexOptions());\n    // docs/freqs/pos + docs/freqs = docs/freqs\n    assertEquals(IndexOptions.DOCS_AND_FREQS, fi.fieldInfo(\"f8\").getIndexOptions());\n    // docs/freqs/pos + docs/freqs/pos = docs/freqs/pos\n    assertEquals(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS, fi.fieldInfo(\"f9\").getIndexOptions());\n    \n    reader.close();\n    ram.close();\n  }\n\n","bugFix":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"165c905a42bedc7c7d1acb37b177498306b7e866","date":1518704038,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestOmitPositions#testPositions().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestOmitPositions#testPositions().mjava","sourceNew":"  // Tests whether the DocumentWriter correctly enable the\n  // omitTermFreqAndPositions bit in the FieldInfo\n  public void testPositions() throws Exception {\n    Directory ram = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random());\n    IndexWriter writer = new IndexWriter(ram, newIndexWriterConfig(analyzer));\n    Document d = new Document();\n        \n    // f1: docs only\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setIndexOptions(IndexOptions.DOCS);\n    \n    Field f1 = newField(\"f1\", \"This field has docs only\", ft);\n    d.add(f1);\n\n    FieldType ft2 = new FieldType(TextField.TYPE_NOT_STORED);\n    ft2.setIndexOptions(IndexOptions.DOCS_AND_FREQS);\n    \n    // f2: docs and freqs\n    Field f2 = newField(\"f2\", \"This field has docs and freqs\", ft2);\n    d.add(f2);\n    \n    FieldType ft3 = new FieldType(TextField.TYPE_NOT_STORED);\n    ft3.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS);\n    \n    // f3: docs/freqs/positions\n    Field f3 = newField(\"f3\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f3);\n        \n    writer.addDocument(d);\n    writer.forceMerge(1);\n    // flush\n    writer.close();\n\n    LeafReader reader = getOnlyLeafReader(DirectoryReader.open(ram));\n    FieldInfos fi = reader.getFieldInfos();\n    // docs + docs = docs\n    assertEquals(IndexOptions.DOCS, fi.fieldInfo(\"f1\").getIndexOptions());\n    // docs/freqs + docs/freqs = docs/freqs\n    assertEquals(IndexOptions.DOCS_AND_FREQS, fi.fieldInfo(\"f2\").getIndexOptions());\n    // docs/freqs/pos + docs/freqs/pos = docs/freqs/pos\n    assertEquals(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS, fi.fieldInfo(\"f3\").getIndexOptions());\n    \n    reader.close();\n    ram.close();\n  }\n\n","sourceOld":"  // Tests whether the DocumentWriter correctly enable the\n  // omitTermFreqAndPositions bit in the FieldInfo\n  public void testPositions() throws Exception {\n    Directory ram = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random());\n    IndexWriter writer = new IndexWriter(ram, newIndexWriterConfig(analyzer));\n    Document d = new Document();\n        \n    // f1,f2,f3: docs only\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setIndexOptions(IndexOptions.DOCS);\n    \n    Field f1 = newField(\"f1\", \"This field has docs only\", ft);\n    d.add(f1);\n       \n    Field f2 = newField(\"f2\", \"This field has docs only\", ft);\n    d.add(f2);\n    \n    Field f3 = newField(\"f3\", \"This field has docs only\", ft);\n    d.add(f3);\n\n    FieldType ft2 = new FieldType(TextField.TYPE_NOT_STORED);\n    ft2.setIndexOptions(IndexOptions.DOCS_AND_FREQS);\n    \n    // f4,f5,f6 docs and freqs\n    Field f4 = newField(\"f4\", \"This field has docs and freqs\", ft2);\n    d.add(f4);\n       \n    Field f5 = newField(\"f5\", \"This field has docs and freqs\", ft2);\n    d.add(f5);\n    \n    Field f6 = newField(\"f6\", \"This field has docs and freqs\", ft2);\n    d.add(f6);\n    \n    FieldType ft3 = new FieldType(TextField.TYPE_NOT_STORED);\n    ft3.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS);\n    \n    // f7,f8,f9 docs/freqs/positions\n    Field f7 = newField(\"f7\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f7);\n       \n    Field f8 = newField(\"f8\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f8);\n    \n    Field f9 = newField(\"f9\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f9);\n        \n    writer.addDocument(d);\n    writer.forceMerge(1);\n\n    // now we add another document which has docs-only for f1, f4, f7, docs/freqs for f2, f5, f8, \n    // and docs/freqs/positions for f3, f6, f9\n    d = new Document();\n    \n    // f1,f4,f7: docs only\n    f1 = newField(\"f1\", \"This field has docs only\", ft);\n    d.add(f1);\n    \n    f4 = newField(\"f4\", \"This field has docs only\", ft);\n    d.add(f4);\n    \n    f7 = newField(\"f7\", \"This field has docs only\", ft);\n    d.add(f7);\n\n    // f2, f5, f8: docs and freqs\n    f2 = newField(\"f2\", \"This field has docs and freqs\", ft2);\n    d.add(f2);\n    \n    f5 = newField(\"f5\", \"This field has docs and freqs\", ft2);\n    d.add(f5);\n    \n    f8 = newField(\"f8\", \"This field has docs and freqs\", ft2);\n    d.add(f8);\n    \n    // f3, f6, f9: docs and freqs and positions\n    f3 = newField(\"f3\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f3);     \n    \n    f6 = newField(\"f6\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f6);\n    \n    f9 = newField(\"f9\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f9);\n        \n    writer.addDocument(d);\n\n    // force merge\n    writer.forceMerge(1);\n    // flush\n    writer.close();\n\n    LeafReader reader = getOnlyLeafReader(DirectoryReader.open(ram));\n    FieldInfos fi = reader.getFieldInfos();\n    // docs + docs = docs\n    assertEquals(IndexOptions.DOCS, fi.fieldInfo(\"f1\").getIndexOptions());\n    // docs + docs/freqs = docs\n    assertEquals(IndexOptions.DOCS, fi.fieldInfo(\"f2\").getIndexOptions());\n    // docs + docs/freqs/pos = docs\n    assertEquals(IndexOptions.DOCS, fi.fieldInfo(\"f3\").getIndexOptions());\n    // docs/freqs + docs = docs\n    assertEquals(IndexOptions.DOCS, fi.fieldInfo(\"f4\").getIndexOptions());\n    // docs/freqs + docs/freqs = docs/freqs\n    assertEquals(IndexOptions.DOCS_AND_FREQS, fi.fieldInfo(\"f5\").getIndexOptions());\n    // docs/freqs + docs/freqs/pos = docs/freqs\n    assertEquals(IndexOptions.DOCS_AND_FREQS, fi.fieldInfo(\"f6\").getIndexOptions());\n    // docs/freqs/pos + docs = docs\n    assertEquals(IndexOptions.DOCS, fi.fieldInfo(\"f7\").getIndexOptions());\n    // docs/freqs/pos + docs/freqs = docs/freqs\n    assertEquals(IndexOptions.DOCS_AND_FREQS, fi.fieldInfo(\"f8\").getIndexOptions());\n    // docs/freqs/pos + docs/freqs/pos = docs/freqs/pos\n    assertEquals(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS, fi.fieldInfo(\"f9\").getIndexOptions());\n    \n    reader.close();\n    ram.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2bb2842e561df4e8e9ad89010605fc86ac265465":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1":["2bb2842e561df4e8e9ad89010605fc86ac265465"],"04f07771a2a7dd3a395700665ed839c3dae2def2":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"76923f6a33f2c4bec7f584e3f251261afe7ea276":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"165c905a42bedc7c7d1acb37b177498306b7e866":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["629c38c4ae4e303d0617e05fbfe508140b32f0a3","76923f6a33f2c4bec7f584e3f251261afe7ea276"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["165c905a42bedc7c7d1acb37b177498306b7e866"]},"commit2Childs":{"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"2bb2842e561df4e8e9ad89010605fc86ac265465":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1":["165c905a42bedc7c7d1acb37b177498306b7e866"],"04f07771a2a7dd3a395700665ed839c3dae2def2":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"76923f6a33f2c4bec7f584e3f251261afe7ea276":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"165c905a42bedc7c7d1acb37b177498306b7e866":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["2bb2842e561df4e8e9ad89010605fc86ac265465"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["76923f6a33f2c4bec7f584e3f251261afe7ea276","615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}