{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/IndexedDISICacheFactory.VaryingBPVJumpTable#VaryingBPVJumpTable(RandomAccessInput,String,long).mjava","commits":[{"id":"02d47321ea7c7780a0e0cb7a3676d109d9d62542","date":1543843794,"type":0,"author":"Toke Eskildsen","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/IndexedDISICacheFactory.VaryingBPVJumpTable#VaryingBPVJumpTable(RandomAccessInput,String,long).mjava","pathOld":"/dev/null","sourceNew":"    VaryingBPVJumpTable(RandomAccessInput slice, String name, long valuesLength) throws IOException {\n      final long startTime = System.nanoTime();\n\n      int block = -1;\n      long offset;\n      long blockEndOffset = 0;\n\n      int bitsPerValue;\n      do {\n        offset = blockEndOffset;\n\n        offsets = ArrayUtil.grow(offsets, block+2); // No-op if large enough\n        offsets[block+1] = offset;\n\n        bitsPerValue = slice.readByte(offset++);\n        offset += Long.BYTES; // Skip over delta as we do not resolve the values themselves at this point\n        if (bitsPerValue == 0) {\n          blockEndOffset = offset;\n        } else {\n          final int length = slice.readInt(offset);\n          offset += Integer.BYTES;\n          blockEndOffset = offset + length;\n        }\n        block++;\n      } while (blockEndOffset < valuesLength-Byte.BYTES);\n      offsets = ArrayUtil.copyOfSubArray(offsets, 0, block+1);\n      creationStats = String.format(Locale.ENGLISH,\n          \"name=%s, blocks=%d, time=%dms\",\n          name, offsets.length, (System.nanoTime()-startTime)/1000000);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e86b9927b3acb1937be9daf7b71fe0733edc2206","date":1544534047,"type":4,"author":"Toke Eskildsen","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/IndexedDISICacheFactory.VaryingBPVJumpTable#VaryingBPVJumpTable(RandomAccessInput,String,long).mjava","sourceNew":null,"sourceOld":"    VaryingBPVJumpTable(RandomAccessInput slice, String name, long valuesLength) throws IOException {\n      final long startTime = System.nanoTime();\n\n      int block = -1;\n      long offset;\n      long blockEndOffset = 0;\n\n      int bitsPerValue;\n      do {\n        offset = blockEndOffset;\n\n        offsets = ArrayUtil.grow(offsets, block+2); // No-op if large enough\n        offsets[block+1] = offset;\n\n        bitsPerValue = slice.readByte(offset++);\n        offset += Long.BYTES; // Skip over delta as we do not resolve the values themselves at this point\n        if (bitsPerValue == 0) {\n          blockEndOffset = offset;\n        } else {\n          final int length = slice.readInt(offset);\n          offset += Integer.BYTES;\n          blockEndOffset = offset + length;\n        }\n        block++;\n      } while (blockEndOffset < valuesLength-Byte.BYTES);\n      offsets = ArrayUtil.copyOfSubArray(offsets, 0, block+1);\n      creationStats = String.format(Locale.ENGLISH,\n          \"name=%s, blocks=%d, time=%dms\",\n          name, offsets.length, (System.nanoTime()-startTime)/1000000);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cfd70c9571310639a77f0123aea0db41077d9bb6","date":1544538617,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/IndexedDISICacheFactory.VaryingBPVJumpTable#VaryingBPVJumpTable(RandomAccessInput,String,long).mjava","sourceNew":null,"sourceOld":"    VaryingBPVJumpTable(RandomAccessInput slice, String name, long valuesLength) throws IOException {\n      final long startTime = System.nanoTime();\n\n      int block = -1;\n      long offset;\n      long blockEndOffset = 0;\n\n      int bitsPerValue;\n      do {\n        offset = blockEndOffset;\n\n        offsets = ArrayUtil.grow(offsets, block+2); // No-op if large enough\n        offsets[block+1] = offset;\n\n        bitsPerValue = slice.readByte(offset++);\n        offset += Long.BYTES; // Skip over delta as we do not resolve the values themselves at this point\n        if (bitsPerValue == 0) {\n          blockEndOffset = offset;\n        } else {\n          final int length = slice.readInt(offset);\n          offset += Integer.BYTES;\n          blockEndOffset = offset + length;\n        }\n        block++;\n      } while (blockEndOffset < valuesLength-Byte.BYTES);\n      offsets = ArrayUtil.copyOfSubArray(offsets, 0, block+1);\n      creationStats = String.format(Locale.ENGLISH,\n          \"name=%s, blocks=%d, time=%dms\",\n          name, offsets.length, (System.nanoTime()-startTime)/1000000);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"cfd70c9571310639a77f0123aea0db41077d9bb6":["02d47321ea7c7780a0e0cb7a3676d109d9d62542","e86b9927b3acb1937be9daf7b71fe0733edc2206"],"02d47321ea7c7780a0e0cb7a3676d109d9d62542":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cfd70c9571310639a77f0123aea0db41077d9bb6"],"e86b9927b3acb1937be9daf7b71fe0733edc2206":["02d47321ea7c7780a0e0cb7a3676d109d9d62542"]},"commit2Childs":{"cfd70c9571310639a77f0123aea0db41077d9bb6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"02d47321ea7c7780a0e0cb7a3676d109d9d62542":["cfd70c9571310639a77f0123aea0db41077d9bb6","e86b9927b3acb1937be9daf7b71fe0733edc2206"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["02d47321ea7c7780a0e0cb7a3676d109d9d62542"],"e86b9927b3acb1937be9daf7b71fe0733edc2206":["cfd70c9571310639a77f0123aea0db41077d9bb6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}