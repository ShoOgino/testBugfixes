{"path":"solr/core/src/java/org/apache/solr/cloud/autoscaling/HttpTriggerListener#onEvent(TriggerEvent,AutoScaling.EventProcessorStage,String,ActionContext,Throwable,String).mjava","commits":[{"id":"c5fd294da67452cd8d116692194908de00eb5209","date":1499704155,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/HttpTriggerListener#onEvent(TriggerEvent,AutoScaling.EventProcessorStage,String,ActionContext,Throwable,String).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void onEvent(TriggerEvent event, AutoScaling.EventProcessorStage stage, String actionName, ActionContext context, Throwable error, String message) {\n    Properties properties = new Properties();\n    properties.setProperty(\"stage\", stage.toString());\n    // if configuration used \"actionName\" but we're in a non-action related stage then PropertiesUtil will\n    // throws an exception on missing value - so replace it with an empty string\n    if (actionName == null) {\n      actionName = \"\";\n    }\n    properties.setProperty(\"actionName\", actionName);\n    if (context != null) {\n      context.getProperties().forEach((k, v) -> {\n        properties.setProperty(\"context.\" + k, String.valueOf(v));\n      });\n    }\n    if (error != null) {\n      properties.setProperty(\"error\", error.toString());\n    } else {\n      properties.setProperty(\"error\", \"\");\n    }\n    if (message != null) {\n      properties.setProperty(\"message\", message);\n    } else {\n      properties.setProperty(\"message\", \"\");\n    }\n    // add event properties\n    properties.setProperty(\"event.id\", event.getId());\n    properties.setProperty(\"event.source\", event.getSource());\n    properties.setProperty(\"event.eventTime\", String.valueOf(event.eventTime));\n    properties.setProperty(\"event.eventType\", event.getEventType().toString());\n    event.getProperties().forEach((k, v) -> {\n      properties.setProperty(\"event.properties.\" + k, String.valueOf(v));\n    });\n    // add config properties\n    properties.setProperty(\"config.name\", config.name);\n    properties.setProperty(\"config.trigger\", config.trigger);\n    properties.setProperty(\"config.listenerClass\", config.listenerClass);\n    properties.setProperty(\"config.beforeActions\", String.join(\",\", config.beforeActions));\n    properties.setProperty(\"config.afterActions\", String.join(\",\", config.afterActions));\n    StringJoiner joiner = new StringJoiner(\",\");\n    config.stages.forEach(s -> joiner.add(s.toString()));\n    properties.setProperty(\"config.stages\", joiner.toString());\n    config.properties.forEach((k, v) -> {\n      properties.setProperty(\"config.properties.\" + k, String.valueOf(v));\n    });\n    String url = PropertiesUtil.substituteProperty(urlTemplate, properties);\n    String payload;\n    String type;\n    if (payloadTemplate != null) {\n      payload = PropertiesUtil.substituteProperty(payloadTemplate, properties);\n      if (contentType != null) {\n        type = contentType;\n      } else {\n        type = \"application/json\";\n      }\n    } else {\n      payload = Utils.toJSONString(properties);\n      type = \"application/json\";\n    }\n    HttpPost post = new HttpPost(url);\n    HttpEntity entity = new StringEntity(payload, \"UTF-8\");\n    headerTemplates.forEach((k, v) -> {\n      String headerVal = PropertiesUtil.substituteProperty(v, properties);\n      if (!headerVal.isEmpty()) {\n        post.addHeader(k, headerVal);\n      }\n    });\n    post.setEntity(entity);\n    post.setHeader(\"Content-Type\", type);\n    org.apache.http.client.config.RequestConfig.Builder requestConfigBuilder = HttpClientUtil.createDefaultRequestConfigBuilder();\n    requestConfigBuilder.setSocketTimeout(timeout);\n    requestConfigBuilder.setConnectTimeout(timeout);\n    requestConfigBuilder.setRedirectsEnabled(followRedirects);\n\n    post.setConfig(requestConfigBuilder.build());\n    try {\n      HttpClientContext httpClientRequestContext = HttpClientUtil.createNewHttpClientRequestContext();\n      HttpResponse rsp = httpClient.execute(post, httpClientRequestContext);\n      int statusCode = rsp.getStatusLine().getStatusCode();\n      if (statusCode != 200) {\n        LOG.warn(\"Error sending request for event \" + event + \", HTTP response: \" + rsp.toString());\n      }\n      HttpEntity responseEntity = rsp.getEntity();\n      Utils.consumeFully(responseEntity);\n    } catch (IOException e) {\n      LOG.warn(\"Exception sending request for event \" + event, e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25","date":1499961129,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/HttpTriggerListener#onEvent(TriggerEvent,TriggerEventProcessorStage,String,ActionContext,Throwable,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/HttpTriggerListener#onEvent(TriggerEvent,AutoScaling.EventProcessorStage,String,ActionContext,Throwable,String).mjava","sourceNew":"  @Override\n  public void onEvent(TriggerEvent event, TriggerEventProcessorStage stage, String actionName, ActionContext context, Throwable error, String message) {\n    Properties properties = new Properties();\n    properties.setProperty(\"stage\", stage.toString());\n    // if configuration used \"actionName\" but we're in a non-action related stage then PropertiesUtil will\n    // throws an exception on missing value - so replace it with an empty string\n    if (actionName == null) {\n      actionName = \"\";\n    }\n    properties.setProperty(\"actionName\", actionName);\n    if (context != null) {\n      context.getProperties().forEach((k, v) -> {\n        properties.setProperty(\"context.\" + k, String.valueOf(v));\n      });\n    }\n    if (error != null) {\n      properties.setProperty(\"error\", error.toString());\n    } else {\n      properties.setProperty(\"error\", \"\");\n    }\n    if (message != null) {\n      properties.setProperty(\"message\", message);\n    } else {\n      properties.setProperty(\"message\", \"\");\n    }\n    // add event properties\n    properties.setProperty(\"event.id\", event.getId());\n    properties.setProperty(\"event.source\", event.getSource());\n    properties.setProperty(\"event.eventTime\", String.valueOf(event.eventTime));\n    properties.setProperty(\"event.eventType\", event.getEventType().toString());\n    event.getProperties().forEach((k, v) -> {\n      properties.setProperty(\"event.properties.\" + k, String.valueOf(v));\n    });\n    // add config properties\n    properties.setProperty(\"config.name\", config.name);\n    properties.setProperty(\"config.trigger\", config.trigger);\n    properties.setProperty(\"config.listenerClass\", config.listenerClass);\n    properties.setProperty(\"config.beforeActions\", String.join(\",\", config.beforeActions));\n    properties.setProperty(\"config.afterActions\", String.join(\",\", config.afterActions));\n    StringJoiner joiner = new StringJoiner(\",\");\n    config.stages.forEach(s -> joiner.add(s.toString()));\n    properties.setProperty(\"config.stages\", joiner.toString());\n    config.properties.forEach((k, v) -> {\n      properties.setProperty(\"config.properties.\" + k, String.valueOf(v));\n    });\n    String url = PropertiesUtil.substituteProperty(urlTemplate, properties);\n    String payload;\n    String type;\n    if (payloadTemplate != null) {\n      payload = PropertiesUtil.substituteProperty(payloadTemplate, properties);\n      if (contentType != null) {\n        type = contentType;\n      } else {\n        type = \"application/json\";\n      }\n    } else {\n      payload = Utils.toJSONString(properties);\n      type = \"application/json\";\n    }\n    HttpPost post = new HttpPost(url);\n    HttpEntity entity = new StringEntity(payload, \"UTF-8\");\n    headerTemplates.forEach((k, v) -> {\n      String headerVal = PropertiesUtil.substituteProperty(v, properties);\n      if (!headerVal.isEmpty()) {\n        post.addHeader(k, headerVal);\n      }\n    });\n    post.setEntity(entity);\n    post.setHeader(\"Content-Type\", type);\n    org.apache.http.client.config.RequestConfig.Builder requestConfigBuilder = HttpClientUtil.createDefaultRequestConfigBuilder();\n    requestConfigBuilder.setSocketTimeout(timeout);\n    requestConfigBuilder.setConnectTimeout(timeout);\n    requestConfigBuilder.setRedirectsEnabled(followRedirects);\n\n    post.setConfig(requestConfigBuilder.build());\n    try {\n      HttpClientContext httpClientRequestContext = HttpClientUtil.createNewHttpClientRequestContext();\n      HttpResponse rsp = httpClient.execute(post, httpClientRequestContext);\n      int statusCode = rsp.getStatusLine().getStatusCode();\n      if (statusCode != 200) {\n        LOG.warn(\"Error sending request for event \" + event + \", HTTP response: \" + rsp.toString());\n      }\n      HttpEntity responseEntity = rsp.getEntity();\n      Utils.consumeFully(responseEntity);\n    } catch (IOException e) {\n      LOG.warn(\"Exception sending request for event \" + event, e);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void onEvent(TriggerEvent event, AutoScaling.EventProcessorStage stage, String actionName, ActionContext context, Throwable error, String message) {\n    Properties properties = new Properties();\n    properties.setProperty(\"stage\", stage.toString());\n    // if configuration used \"actionName\" but we're in a non-action related stage then PropertiesUtil will\n    // throws an exception on missing value - so replace it with an empty string\n    if (actionName == null) {\n      actionName = \"\";\n    }\n    properties.setProperty(\"actionName\", actionName);\n    if (context != null) {\n      context.getProperties().forEach((k, v) -> {\n        properties.setProperty(\"context.\" + k, String.valueOf(v));\n      });\n    }\n    if (error != null) {\n      properties.setProperty(\"error\", error.toString());\n    } else {\n      properties.setProperty(\"error\", \"\");\n    }\n    if (message != null) {\n      properties.setProperty(\"message\", message);\n    } else {\n      properties.setProperty(\"message\", \"\");\n    }\n    // add event properties\n    properties.setProperty(\"event.id\", event.getId());\n    properties.setProperty(\"event.source\", event.getSource());\n    properties.setProperty(\"event.eventTime\", String.valueOf(event.eventTime));\n    properties.setProperty(\"event.eventType\", event.getEventType().toString());\n    event.getProperties().forEach((k, v) -> {\n      properties.setProperty(\"event.properties.\" + k, String.valueOf(v));\n    });\n    // add config properties\n    properties.setProperty(\"config.name\", config.name);\n    properties.setProperty(\"config.trigger\", config.trigger);\n    properties.setProperty(\"config.listenerClass\", config.listenerClass);\n    properties.setProperty(\"config.beforeActions\", String.join(\",\", config.beforeActions));\n    properties.setProperty(\"config.afterActions\", String.join(\",\", config.afterActions));\n    StringJoiner joiner = new StringJoiner(\",\");\n    config.stages.forEach(s -> joiner.add(s.toString()));\n    properties.setProperty(\"config.stages\", joiner.toString());\n    config.properties.forEach((k, v) -> {\n      properties.setProperty(\"config.properties.\" + k, String.valueOf(v));\n    });\n    String url = PropertiesUtil.substituteProperty(urlTemplate, properties);\n    String payload;\n    String type;\n    if (payloadTemplate != null) {\n      payload = PropertiesUtil.substituteProperty(payloadTemplate, properties);\n      if (contentType != null) {\n        type = contentType;\n      } else {\n        type = \"application/json\";\n      }\n    } else {\n      payload = Utils.toJSONString(properties);\n      type = \"application/json\";\n    }\n    HttpPost post = new HttpPost(url);\n    HttpEntity entity = new StringEntity(payload, \"UTF-8\");\n    headerTemplates.forEach((k, v) -> {\n      String headerVal = PropertiesUtil.substituteProperty(v, properties);\n      if (!headerVal.isEmpty()) {\n        post.addHeader(k, headerVal);\n      }\n    });\n    post.setEntity(entity);\n    post.setHeader(\"Content-Type\", type);\n    org.apache.http.client.config.RequestConfig.Builder requestConfigBuilder = HttpClientUtil.createDefaultRequestConfigBuilder();\n    requestConfigBuilder.setSocketTimeout(timeout);\n    requestConfigBuilder.setConnectTimeout(timeout);\n    requestConfigBuilder.setRedirectsEnabled(followRedirects);\n\n    post.setConfig(requestConfigBuilder.build());\n    try {\n      HttpClientContext httpClientRequestContext = HttpClientUtil.createNewHttpClientRequestContext();\n      HttpResponse rsp = httpClient.execute(post, httpClientRequestContext);\n      int statusCode = rsp.getStatusLine().getStatusCode();\n      if (statusCode != 200) {\n        LOG.warn(\"Error sending request for event \" + event + \", HTTP response: \" + rsp.toString());\n      }\n      HttpEntity responseEntity = rsp.getEntity();\n      Utils.consumeFully(responseEntity);\n    } catch (IOException e) {\n      LOG.warn(\"Exception sending request for event \" + event, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c5fd294da67452cd8d116692194908de00eb5209":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25":["c5fd294da67452cd8d116692194908de00eb5209"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"c5fd294da67452cd8d116692194908de00eb5209":["219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c5fd294da67452cd8d116692194908de00eb5209","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}