{"path":"solr/core/src/test/org/apache/solr/schema/PolyFieldTest#testPointFieldType().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/PolyFieldTest#testPointFieldType().mjava","pathOld":"solr/src/test/org/apache/solr/schema/PolyFieldTest#testPointFieldType().mjava","sourceNew":"  @Test\n  public void testPointFieldType() throws Exception {\n    SolrCore core = h.getCore();\n    IndexSchema schema = core.getSchema();\n    SchemaField home = schema.getField(\"home\");\n    assertNotNull(home);\n    assertTrue(\"home is not a poly field\", home.isPolyField());\n    FieldType tmp = home.getType();\n    assertTrue(tmp instanceof PointType);\n    PointType pt = (PointType) tmp;\n    assertEquals(pt.getDimension(), 2);\n    double[] xy = new double[]{35.0, -79.34};\n    String point = xy[0] + \",\" + xy[1];\n    Fieldable[] fields = home.createFields(point, 2);\n    assertEquals(fields.length, 3);//should be 3, we have a stored field\n    //first two fields contain the values, third is just stored and contains the original\n    for (int i = 0; i < 3; i++) {\n      boolean hasValue = fields[1].tokenStreamValue() != null\n              || fields[1].getBinaryValue() != null\n              || fields[1].stringValue() != null;\n      assertTrue(\"Doesn't have a value: \" + fields[1], hasValue);\n    }\n    /*assertTrue(\"first field \" + fields[0].tokenStreamValue() +  \" is not 35.0\", pt.getSubType().toExternal(fields[0]).equals(String.valueOf(xy[0])));\n    assertTrue(\"second field is not -79.34\", pt.getSubType().toExternal(fields[1]).equals(String.valueOf(xy[1])));\n    assertTrue(\"third field is not '35.0,-79.34'\", pt.getSubType().toExternal(fields[2]).equals(point));*/\n\n\n    home = schema.getField(\"home_ns\");\n    assertNotNull(home);\n    fields = home.createFields(point, 2);\n    assertEquals(fields.length, 2);//should be 2, since we aren't storing\n\n    home = schema.getField(\"home_ns\");\n    assertNotNull(home);\n    try {\n      fields = home.createFields(\"35.0,foo\", 2);\n      assertTrue(false);\n    } catch (Exception e) {\n      //\n    }\n\n    //\n    SchemaField s1 = schema.getField(\"test_p\");\n    SchemaField s2 = schema.getField(\"test_p\");\n    ValueSource v1 = s1.getType().getValueSource(s1, null);\n    ValueSource v2 = s2.getType().getValueSource(s2, null);\n    assertEquals(v1, v2);\n    assertEquals(v1.hashCode(), v2.hashCode());\n  }\n\n","sourceOld":"  @Test\n  public void testPointFieldType() throws Exception {\n    SolrCore core = h.getCore();\n    IndexSchema schema = core.getSchema();\n    SchemaField home = schema.getField(\"home\");\n    assertNotNull(home);\n    assertTrue(\"home is not a poly field\", home.isPolyField());\n    FieldType tmp = home.getType();\n    assertTrue(tmp instanceof PointType);\n    PointType pt = (PointType) tmp;\n    assertEquals(pt.getDimension(), 2);\n    double[] xy = new double[]{35.0, -79.34};\n    String point = xy[0] + \",\" + xy[1];\n    Fieldable[] fields = home.createFields(point, 2);\n    assertEquals(fields.length, 3);//should be 3, we have a stored field\n    //first two fields contain the values, third is just stored and contains the original\n    for (int i = 0; i < 3; i++) {\n      boolean hasValue = fields[1].tokenStreamValue() != null\n              || fields[1].getBinaryValue() != null\n              || fields[1].stringValue() != null;\n      assertTrue(\"Doesn't have a value: \" + fields[1], hasValue);\n    }\n    /*assertTrue(\"first field \" + fields[0].tokenStreamValue() +  \" is not 35.0\", pt.getSubType().toExternal(fields[0]).equals(String.valueOf(xy[0])));\n    assertTrue(\"second field is not -79.34\", pt.getSubType().toExternal(fields[1]).equals(String.valueOf(xy[1])));\n    assertTrue(\"third field is not '35.0,-79.34'\", pt.getSubType().toExternal(fields[2]).equals(point));*/\n\n\n    home = schema.getField(\"home_ns\");\n    assertNotNull(home);\n    fields = home.createFields(point, 2);\n    assertEquals(fields.length, 2);//should be 2, since we aren't storing\n\n    home = schema.getField(\"home_ns\");\n    assertNotNull(home);\n    try {\n      fields = home.createFields(\"35.0,foo\", 2);\n      assertTrue(false);\n    } catch (Exception e) {\n      //\n    }\n\n    //\n    SchemaField s1 = schema.getField(\"test_p\");\n    SchemaField s2 = schema.getField(\"test_p\");\n    ValueSource v1 = s1.getType().getValueSource(s1, null);\n    ValueSource v2 = s2.getType().getValueSource(s2, null);\n    assertEquals(v1, v2);\n    assertEquals(v1.hashCode(), v2.hashCode());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/PolyFieldTest#testPointFieldType().mjava","pathOld":"solr/src/test/org/apache/solr/schema/PolyFieldTest#testPointFieldType().mjava","sourceNew":"  @Test\n  public void testPointFieldType() throws Exception {\n    SolrCore core = h.getCore();\n    IndexSchema schema = core.getSchema();\n    SchemaField home = schema.getField(\"home\");\n    assertNotNull(home);\n    assertTrue(\"home is not a poly field\", home.isPolyField());\n    FieldType tmp = home.getType();\n    assertTrue(tmp instanceof PointType);\n    PointType pt = (PointType) tmp;\n    assertEquals(pt.getDimension(), 2);\n    double[] xy = new double[]{35.0, -79.34};\n    String point = xy[0] + \",\" + xy[1];\n    Fieldable[] fields = home.createFields(point, 2);\n    assertEquals(fields.length, 3);//should be 3, we have a stored field\n    //first two fields contain the values, third is just stored and contains the original\n    for (int i = 0; i < 3; i++) {\n      boolean hasValue = fields[1].tokenStreamValue() != null\n              || fields[1].getBinaryValue() != null\n              || fields[1].stringValue() != null;\n      assertTrue(\"Doesn't have a value: \" + fields[1], hasValue);\n    }\n    /*assertTrue(\"first field \" + fields[0].tokenStreamValue() +  \" is not 35.0\", pt.getSubType().toExternal(fields[0]).equals(String.valueOf(xy[0])));\n    assertTrue(\"second field is not -79.34\", pt.getSubType().toExternal(fields[1]).equals(String.valueOf(xy[1])));\n    assertTrue(\"third field is not '35.0,-79.34'\", pt.getSubType().toExternal(fields[2]).equals(point));*/\n\n\n    home = schema.getField(\"home_ns\");\n    assertNotNull(home);\n    fields = home.createFields(point, 2);\n    assertEquals(fields.length, 2);//should be 2, since we aren't storing\n\n    home = schema.getField(\"home_ns\");\n    assertNotNull(home);\n    try {\n      fields = home.createFields(\"35.0,foo\", 2);\n      assertTrue(false);\n    } catch (Exception e) {\n      //\n    }\n\n    //\n    SchemaField s1 = schema.getField(\"test_p\");\n    SchemaField s2 = schema.getField(\"test_p\");\n    ValueSource v1 = s1.getType().getValueSource(s1, null);\n    ValueSource v2 = s2.getType().getValueSource(s2, null);\n    assertEquals(v1, v2);\n    assertEquals(v1.hashCode(), v2.hashCode());\n  }\n\n","sourceOld":"  @Test\n  public void testPointFieldType() throws Exception {\n    SolrCore core = h.getCore();\n    IndexSchema schema = core.getSchema();\n    SchemaField home = schema.getField(\"home\");\n    assertNotNull(home);\n    assertTrue(\"home is not a poly field\", home.isPolyField());\n    FieldType tmp = home.getType();\n    assertTrue(tmp instanceof PointType);\n    PointType pt = (PointType) tmp;\n    assertEquals(pt.getDimension(), 2);\n    double[] xy = new double[]{35.0, -79.34};\n    String point = xy[0] + \",\" + xy[1];\n    Fieldable[] fields = home.createFields(point, 2);\n    assertEquals(fields.length, 3);//should be 3, we have a stored field\n    //first two fields contain the values, third is just stored and contains the original\n    for (int i = 0; i < 3; i++) {\n      boolean hasValue = fields[1].tokenStreamValue() != null\n              || fields[1].getBinaryValue() != null\n              || fields[1].stringValue() != null;\n      assertTrue(\"Doesn't have a value: \" + fields[1], hasValue);\n    }\n    /*assertTrue(\"first field \" + fields[0].tokenStreamValue() +  \" is not 35.0\", pt.getSubType().toExternal(fields[0]).equals(String.valueOf(xy[0])));\n    assertTrue(\"second field is not -79.34\", pt.getSubType().toExternal(fields[1]).equals(String.valueOf(xy[1])));\n    assertTrue(\"third field is not '35.0,-79.34'\", pt.getSubType().toExternal(fields[2]).equals(point));*/\n\n\n    home = schema.getField(\"home_ns\");\n    assertNotNull(home);\n    fields = home.createFields(point, 2);\n    assertEquals(fields.length, 2);//should be 2, since we aren't storing\n\n    home = schema.getField(\"home_ns\");\n    assertNotNull(home);\n    try {\n      fields = home.createFields(\"35.0,foo\", 2);\n      assertTrue(false);\n    } catch (Exception e) {\n      //\n    }\n\n    //\n    SchemaField s1 = schema.getField(\"test_p\");\n    SchemaField s2 = schema.getField(\"test_p\");\n    ValueSource v1 = s1.getType().getValueSource(s1, null);\n    ValueSource v2 = s2.getType().getValueSource(s2, null);\n    assertEquals(v1, v2);\n    assertEquals(v1.hashCode(), v2.hashCode());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/PolyFieldTest#testPointFieldType().mjava","pathOld":"solr/src/test/org/apache/solr/schema/PolyFieldTest#testPointFieldType().mjava","sourceNew":"  @Test\n  public void testPointFieldType() throws Exception {\n    SolrCore core = h.getCore();\n    IndexSchema schema = core.getSchema();\n    SchemaField home = schema.getField(\"home\");\n    assertNotNull(home);\n    assertTrue(\"home is not a poly field\", home.isPolyField());\n    FieldType tmp = home.getType();\n    assertTrue(tmp instanceof PointType);\n    PointType pt = (PointType) tmp;\n    assertEquals(pt.getDimension(), 2);\n    double[] xy = new double[]{35.0, -79.34};\n    String point = xy[0] + \",\" + xy[1];\n    Fieldable[] fields = home.createFields(point, 2);\n    assertEquals(fields.length, 3);//should be 3, we have a stored field\n    //first two fields contain the values, third is just stored and contains the original\n    for (int i = 0; i < 3; i++) {\n      boolean hasValue = fields[1].tokenStreamValue() != null\n              || fields[1].getBinaryValue() != null\n              || fields[1].stringValue() != null;\n      assertTrue(\"Doesn't have a value: \" + fields[1], hasValue);\n    }\n    /*assertTrue(\"first field \" + fields[0].tokenStreamValue() +  \" is not 35.0\", pt.getSubType().toExternal(fields[0]).equals(String.valueOf(xy[0])));\n    assertTrue(\"second field is not -79.34\", pt.getSubType().toExternal(fields[1]).equals(String.valueOf(xy[1])));\n    assertTrue(\"third field is not '35.0,-79.34'\", pt.getSubType().toExternal(fields[2]).equals(point));*/\n\n\n    home = schema.getField(\"home_ns\");\n    assertNotNull(home);\n    fields = home.createFields(point, 2);\n    assertEquals(fields.length, 2);//should be 2, since we aren't storing\n\n    home = schema.getField(\"home_ns\");\n    assertNotNull(home);\n    try {\n      fields = home.createFields(\"35.0,foo\", 2);\n      assertTrue(false);\n    } catch (Exception e) {\n      //\n    }\n\n    //\n    SchemaField s1 = schema.getField(\"test_p\");\n    SchemaField s2 = schema.getField(\"test_p\");\n    ValueSource v1 = s1.getType().getValueSource(s1, null);\n    ValueSource v2 = s2.getType().getValueSource(s2, null);\n    assertEquals(v1, v2);\n    assertEquals(v1.hashCode(), v2.hashCode());\n  }\n\n","sourceOld":"  @Test\n  public void testPointFieldType() throws Exception {\n    SolrCore core = h.getCore();\n    IndexSchema schema = core.getSchema();\n    SchemaField home = schema.getField(\"home\");\n    assertNotNull(home);\n    assertTrue(\"home is not a poly field\", home.isPolyField());\n    FieldType tmp = home.getType();\n    assertTrue(tmp instanceof PointType);\n    PointType pt = (PointType) tmp;\n    assertEquals(pt.getDimension(), 2);\n    double[] xy = new double[]{35.0, -79.34};\n    String point = xy[0] + \",\" + xy[1];\n    Fieldable[] fields = home.createFields(point, 2);\n    assertEquals(fields.length, 3);//should be 3, we have a stored field\n    //first two fields contain the values, third is just stored and contains the original\n    for (int i = 0; i < 3; i++) {\n      boolean hasValue = fields[1].tokenStreamValue() != null\n              || fields[1].getBinaryValue() != null\n              || fields[1].stringValue() != null;\n      assertTrue(\"Doesn't have a value: \" + fields[1], hasValue);\n    }\n    /*assertTrue(\"first field \" + fields[0].tokenStreamValue() +  \" is not 35.0\", pt.getSubType().toExternal(fields[0]).equals(String.valueOf(xy[0])));\n    assertTrue(\"second field is not -79.34\", pt.getSubType().toExternal(fields[1]).equals(String.valueOf(xy[1])));\n    assertTrue(\"third field is not '35.0,-79.34'\", pt.getSubType().toExternal(fields[2]).equals(point));*/\n\n\n    home = schema.getField(\"home_ns\");\n    assertNotNull(home);\n    fields = home.createFields(point, 2);\n    assertEquals(fields.length, 2);//should be 2, since we aren't storing\n\n    home = schema.getField(\"home_ns\");\n    assertNotNull(home);\n    try {\n      fields = home.createFields(\"35.0,foo\", 2);\n      assertTrue(false);\n    } catch (Exception e) {\n      //\n    }\n\n    //\n    SchemaField s1 = schema.getField(\"test_p\");\n    SchemaField s2 = schema.getField(\"test_p\");\n    ValueSource v1 = s1.getType().getValueSource(s1, null);\n    ValueSource v2 = s2.getType().getValueSource(s2, null);\n    assertEquals(v1, v2);\n    assertEquals(v1.hashCode(), v2.hashCode());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/PolyFieldTest#testPointFieldType().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/PolyFieldTest#testPointFieldType().mjava","sourceNew":"  @Test\n  public void testPointFieldType() throws Exception {\n    SolrCore core = h.getCore();\n    IndexSchema schema = core.getSchema();\n    SchemaField home = schema.getField(\"home\");\n    assertNotNull(home);\n    assertTrue(\"home is not a poly field\", home.isPolyField());\n    FieldType tmp = home.getType();\n    assertTrue(tmp instanceof PointType);\n    PointType pt = (PointType) tmp;\n    assertEquals(pt.getDimension(), 2);\n    double[] xy = new double[]{35.0, -79.34};\n    String point = xy[0] + \",\" + xy[1];\n    IndexableField[] fields = home.createFields(point, 2);\n    assertEquals(fields.length, 3);//should be 3, we have a stored field\n    //first two fields contain the values, third is just stored and contains the original\n    for (int i = 0; i < 3; i++) {\n      boolean hasValue = fields[1].tokenStreamValue() != null\n              || fields[1].binaryValue() != null\n              || fields[1].stringValue() != null;\n      assertTrue(\"Doesn't have a value: \" + fields[1], hasValue);\n    }\n    /*assertTrue(\"first field \" + fields[0].tokenStreamValue() +  \" is not 35.0\", pt.getSubType().toExternal(fields[0]).equals(String.valueOf(xy[0])));\n    assertTrue(\"second field is not -79.34\", pt.getSubType().toExternal(fields[1]).equals(String.valueOf(xy[1])));\n    assertTrue(\"third field is not '35.0,-79.34'\", pt.getSubType().toExternal(fields[2]).equals(point));*/\n\n\n    home = schema.getField(\"home_ns\");\n    assertNotNull(home);\n    fields = home.createFields(point, 2);\n    assertEquals(fields.length, 2);//should be 2, since we aren't storing\n\n    home = schema.getField(\"home_ns\");\n    assertNotNull(home);\n    try {\n      fields = home.createFields(\"35.0,foo\", 2);\n      assertTrue(false);\n    } catch (Exception e) {\n      //\n    }\n\n    //\n    SchemaField s1 = schema.getField(\"test_p\");\n    SchemaField s2 = schema.getField(\"test_p\");\n    ValueSource v1 = s1.getType().getValueSource(s1, null);\n    ValueSource v2 = s2.getType().getValueSource(s2, null);\n    assertEquals(v1, v2);\n    assertEquals(v1.hashCode(), v2.hashCode());\n  }\n\n","sourceOld":"  @Test\n  public void testPointFieldType() throws Exception {\n    SolrCore core = h.getCore();\n    IndexSchema schema = core.getSchema();\n    SchemaField home = schema.getField(\"home\");\n    assertNotNull(home);\n    assertTrue(\"home is not a poly field\", home.isPolyField());\n    FieldType tmp = home.getType();\n    assertTrue(tmp instanceof PointType);\n    PointType pt = (PointType) tmp;\n    assertEquals(pt.getDimension(), 2);\n    double[] xy = new double[]{35.0, -79.34};\n    String point = xy[0] + \",\" + xy[1];\n    Fieldable[] fields = home.createFields(point, 2);\n    assertEquals(fields.length, 3);//should be 3, we have a stored field\n    //first two fields contain the values, third is just stored and contains the original\n    for (int i = 0; i < 3; i++) {\n      boolean hasValue = fields[1].tokenStreamValue() != null\n              || fields[1].getBinaryValue() != null\n              || fields[1].stringValue() != null;\n      assertTrue(\"Doesn't have a value: \" + fields[1], hasValue);\n    }\n    /*assertTrue(\"first field \" + fields[0].tokenStreamValue() +  \" is not 35.0\", pt.getSubType().toExternal(fields[0]).equals(String.valueOf(xy[0])));\n    assertTrue(\"second field is not -79.34\", pt.getSubType().toExternal(fields[1]).equals(String.valueOf(xy[1])));\n    assertTrue(\"third field is not '35.0,-79.34'\", pt.getSubType().toExternal(fields[2]).equals(point));*/\n\n\n    home = schema.getField(\"home_ns\");\n    assertNotNull(home);\n    fields = home.createFields(point, 2);\n    assertEquals(fields.length, 2);//should be 2, since we aren't storing\n\n    home = schema.getField(\"home_ns\");\n    assertNotNull(home);\n    try {\n      fields = home.createFields(\"35.0,foo\", 2);\n      assertTrue(false);\n    } catch (Exception e) {\n      //\n    }\n\n    //\n    SchemaField s1 = schema.getField(\"test_p\");\n    SchemaField s2 = schema.getField(\"test_p\");\n    ValueSource v1 = s1.getType().getValueSource(s1, null);\n    ValueSource v2 = s2.getType().getValueSource(s2, null);\n    assertEquals(v1, v2);\n    assertEquals(v1.hashCode(), v2.hashCode());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8b3bdb938a073ccc28d7ed813f6e8c4cb58e04c5","date":1316747797,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/PolyFieldTest#testPointFieldType().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/PolyFieldTest#testPointFieldType().mjava","sourceNew":"  @Test\n  public void testPointFieldType() throws Exception {\n    SolrCore core = h.getCore();\n    IndexSchema schema = core.getSchema();\n    SchemaField home = schema.getField(\"home\");\n    assertNotNull(home);\n    assertTrue(\"home is not a poly field\", home.isPolyField());\n    FieldType tmp = home.getType();\n    assertTrue(tmp instanceof PointType);\n    PointType pt = (PointType) tmp;\n    assertEquals(pt.getDimension(), 2);\n    double[] xy = new double[]{35.0, -79.34};\n    String point = xy[0] + \",\" + xy[1];\n    IndexableField[] fields = home.createFields(point, 2);\n    assertEquals(fields.length, 3);//should be 3, we have a stored field\n    //first two fields contain the values, third is just stored and contains the original\n    for (int i = 0; i < 3; i++) {\n      boolean hasValue = fields[i].binaryValue() != null\n          || fields[i].stringValue() != null;\n      assertTrue(\"Doesn't have a value: \" + fields[i], hasValue);\n    }\n    /*assertTrue(\"first field \" + fields[0].tokenStreamValue() +  \" is not 35.0\", pt.getSubType().toExternal(fields[0]).equals(String.valueOf(xy[0])));\n    assertTrue(\"second field is not -79.34\", pt.getSubType().toExternal(fields[1]).equals(String.valueOf(xy[1])));\n    assertTrue(\"third field is not '35.0,-79.34'\", pt.getSubType().toExternal(fields[2]).equals(point));*/\n\n\n    home = schema.getField(\"home_ns\");\n    assertNotNull(home);\n    fields = home.createFields(point, 2);\n    assertEquals(fields.length, 2);//should be 2, since we aren't storing\n\n    home = schema.getField(\"home_ns\");\n    assertNotNull(home);\n    try {\n      fields = home.createFields(\"35.0,foo\", 2);\n      assertTrue(false);\n    } catch (Exception e) {\n      //\n    }\n\n    //\n    SchemaField s1 = schema.getField(\"test_p\");\n    SchemaField s2 = schema.getField(\"test_p\");\n    ValueSource v1 = s1.getType().getValueSource(s1, null);\n    ValueSource v2 = s2.getType().getValueSource(s2, null);\n    assertEquals(v1, v2);\n    assertEquals(v1.hashCode(), v2.hashCode());\n  }\n\n","sourceOld":"  @Test\n  public void testPointFieldType() throws Exception {\n    SolrCore core = h.getCore();\n    IndexSchema schema = core.getSchema();\n    SchemaField home = schema.getField(\"home\");\n    assertNotNull(home);\n    assertTrue(\"home is not a poly field\", home.isPolyField());\n    FieldType tmp = home.getType();\n    assertTrue(tmp instanceof PointType);\n    PointType pt = (PointType) tmp;\n    assertEquals(pt.getDimension(), 2);\n    double[] xy = new double[]{35.0, -79.34};\n    String point = xy[0] + \",\" + xy[1];\n    IndexableField[] fields = home.createFields(point, 2);\n    assertEquals(fields.length, 3);//should be 3, we have a stored field\n    //first two fields contain the values, third is just stored and contains the original\n    for (int i = 0; i < 3; i++) {\n      boolean hasValue = fields[1].tokenStreamValue() != null\n              || fields[1].binaryValue() != null\n              || fields[1].stringValue() != null;\n      assertTrue(\"Doesn't have a value: \" + fields[1], hasValue);\n    }\n    /*assertTrue(\"first field \" + fields[0].tokenStreamValue() +  \" is not 35.0\", pt.getSubType().toExternal(fields[0]).equals(String.valueOf(xy[0])));\n    assertTrue(\"second field is not -79.34\", pt.getSubType().toExternal(fields[1]).equals(String.valueOf(xy[1])));\n    assertTrue(\"third field is not '35.0,-79.34'\", pt.getSubType().toExternal(fields[2]).equals(point));*/\n\n\n    home = schema.getField(\"home_ns\");\n    assertNotNull(home);\n    fields = home.createFields(point, 2);\n    assertEquals(fields.length, 2);//should be 2, since we aren't storing\n\n    home = schema.getField(\"home_ns\");\n    assertNotNull(home);\n    try {\n      fields = home.createFields(\"35.0,foo\", 2);\n      assertTrue(false);\n    } catch (Exception e) {\n      //\n    }\n\n    //\n    SchemaField s1 = schema.getField(\"test_p\");\n    SchemaField s2 = schema.getField(\"test_p\");\n    ValueSource v1 = s1.getType().getValueSource(s1, null);\n    ValueSource v2 = s2.getType().getValueSource(s2, null);\n    assertEquals(v1, v2);\n    assertEquals(v1.hashCode(), v2.hashCode());\n  }\n\n","bugFix":null,"bugIntro":["fa0f44f887719e97183771e977cfc4bfb485b766"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fa0f44f887719e97183771e977cfc4bfb485b766","date":1326668713,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/PolyFieldTest#testPointFieldType().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/PolyFieldTest#testPointFieldType().mjava","sourceNew":"  @Test\n  public void testPointFieldType() throws Exception {\n    SolrCore core = h.getCore();\n    IndexSchema schema = core.getSchema();\n    SchemaField home = schema.getField(\"home\");\n    assertNotNull(home);\n    assertTrue(\"home is not a poly field\", home.isPolyField());\n    FieldType tmp = home.getType();\n    assertTrue(tmp instanceof PointType);\n    PointType pt = (PointType) tmp;\n    assertEquals(pt.getDimension(), 2);\n    double[] xy = new double[]{35.0, -79.34};\n    String point = xy[0] + \",\" + xy[1];\n    IndexableField[] fields = home.createFields(point, 2);\n    assertEquals(fields.length, 3);//should be 3, we have a stored field\n    //first two fields contain the values, third is just stored and contains the original\n    for (int i = 0; i < 3; i++) {\n      boolean hasValue = fields[i].binaryValue() != null\n          || fields[i].stringValue() != null\n          || fields[i].numericValue() != null;\n      assertTrue(\"Doesn't have a value: \" + fields[i], hasValue);\n    }\n    /*assertTrue(\"first field \" + fields[0].tokenStreamValue() +  \" is not 35.0\", pt.getSubType().toExternal(fields[0]).equals(String.valueOf(xy[0])));\n    assertTrue(\"second field is not -79.34\", pt.getSubType().toExternal(fields[1]).equals(String.valueOf(xy[1])));\n    assertTrue(\"third field is not '35.0,-79.34'\", pt.getSubType().toExternal(fields[2]).equals(point));*/\n\n\n    home = schema.getField(\"home_ns\");\n    assertNotNull(home);\n    fields = home.createFields(point, 2);\n    assertEquals(fields.length, 2);//should be 2, since we aren't storing\n\n    home = schema.getField(\"home_ns\");\n    assertNotNull(home);\n    try {\n      fields = home.createFields(\"35.0,foo\", 2);\n      assertTrue(false);\n    } catch (Exception e) {\n      //\n    }\n\n    //\n    SchemaField s1 = schema.getField(\"test_p\");\n    SchemaField s2 = schema.getField(\"test_p\");\n    ValueSource v1 = s1.getType().getValueSource(s1, null);\n    ValueSource v2 = s2.getType().getValueSource(s2, null);\n    assertEquals(v1, v2);\n    assertEquals(v1.hashCode(), v2.hashCode());\n  }\n\n","sourceOld":"  @Test\n  public void testPointFieldType() throws Exception {\n    SolrCore core = h.getCore();\n    IndexSchema schema = core.getSchema();\n    SchemaField home = schema.getField(\"home\");\n    assertNotNull(home);\n    assertTrue(\"home is not a poly field\", home.isPolyField());\n    FieldType tmp = home.getType();\n    assertTrue(tmp instanceof PointType);\n    PointType pt = (PointType) tmp;\n    assertEquals(pt.getDimension(), 2);\n    double[] xy = new double[]{35.0, -79.34};\n    String point = xy[0] + \",\" + xy[1];\n    IndexableField[] fields = home.createFields(point, 2);\n    assertEquals(fields.length, 3);//should be 3, we have a stored field\n    //first two fields contain the values, third is just stored and contains the original\n    for (int i = 0; i < 3; i++) {\n      boolean hasValue = fields[i].binaryValue() != null\n          || fields[i].stringValue() != null;\n      assertTrue(\"Doesn't have a value: \" + fields[i], hasValue);\n    }\n    /*assertTrue(\"first field \" + fields[0].tokenStreamValue() +  \" is not 35.0\", pt.getSubType().toExternal(fields[0]).equals(String.valueOf(xy[0])));\n    assertTrue(\"second field is not -79.34\", pt.getSubType().toExternal(fields[1]).equals(String.valueOf(xy[1])));\n    assertTrue(\"third field is not '35.0,-79.34'\", pt.getSubType().toExternal(fields[2]).equals(point));*/\n\n\n    home = schema.getField(\"home_ns\");\n    assertNotNull(home);\n    fields = home.createFields(point, 2);\n    assertEquals(fields.length, 2);//should be 2, since we aren't storing\n\n    home = schema.getField(\"home_ns\");\n    assertNotNull(home);\n    try {\n      fields = home.createFields(\"35.0,foo\", 2);\n      assertTrue(false);\n    } catch (Exception e) {\n      //\n    }\n\n    //\n    SchemaField s1 = schema.getField(\"test_p\");\n    SchemaField s2 = schema.getField(\"test_p\");\n    ValueSource v1 = s1.getType().getValueSource(s1, null);\n    ValueSource v2 = s2.getType().getValueSource(s2, null);\n    assertEquals(v1, v2);\n    assertEquals(v1.hashCode(), v2.hashCode());\n  }\n\n","bugFix":["8b3bdb938a073ccc28d7ed813f6e8c4cb58e04c5"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"409324b31a1419d7c05a38211168cf317e39be77","date":1344866765,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/PolyFieldTest#testPointFieldType().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/PolyFieldTest#testPointFieldType().mjava","sourceNew":"  @Test\n  public void testPointFieldType() throws Exception {\n    SolrCore core = h.getCore();\n    IndexSchema schema = core.getSchema();\n    SchemaField home = schema.getField(\"home\");\n    assertNotNull(home);\n    assertTrue(\"home is not a poly field\", home.isPolyField());\n    FieldType tmp = home.getType();\n    assertTrue(tmp instanceof PointType);\n    PointType pt = (PointType) tmp;\n    assertEquals(pt.getDimension(), 2);\n    double[] xy = new double[]{35.0, -79.34};\n    String point = xy[0] + \",\" + xy[1];\n    StorableField[] fields = home.createFields(point, 2);\n    assertEquals(fields.length, 3);//should be 3, we have a stored field\n    //first two fields contain the values, third is just stored and contains the original\n    for (int i = 0; i < 3; i++) {\n      boolean hasValue = fields[i].binaryValue() != null\n          || fields[i].stringValue() != null\n          || fields[i].numericValue() != null;\n      assertTrue(\"Doesn't have a value: \" + fields[i], hasValue);\n    }\n    /*assertTrue(\"first field \" + fields[0].tokenStreamValue() +  \" is not 35.0\", pt.getSubType().toExternal(fields[0]).equals(String.valueOf(xy[0])));\n    assertTrue(\"second field is not -79.34\", pt.getSubType().toExternal(fields[1]).equals(String.valueOf(xy[1])));\n    assertTrue(\"third field is not '35.0,-79.34'\", pt.getSubType().toExternal(fields[2]).equals(point));*/\n\n\n    home = schema.getField(\"home_ns\");\n    assertNotNull(home);\n    fields = home.createFields(point, 2);\n    assertEquals(fields.length, 2);//should be 2, since we aren't storing\n\n    home = schema.getField(\"home_ns\");\n    assertNotNull(home);\n    try {\n      fields = home.createFields(\"35.0,foo\", 2);\n      assertTrue(false);\n    } catch (Exception e) {\n      //\n    }\n\n    //\n    SchemaField s1 = schema.getField(\"test_p\");\n    SchemaField s2 = schema.getField(\"test_p\");\n    ValueSource v1 = s1.getType().getValueSource(s1, null);\n    ValueSource v2 = s2.getType().getValueSource(s2, null);\n    assertEquals(v1, v2);\n    assertEquals(v1.hashCode(), v2.hashCode());\n  }\n\n","sourceOld":"  @Test\n  public void testPointFieldType() throws Exception {\n    SolrCore core = h.getCore();\n    IndexSchema schema = core.getSchema();\n    SchemaField home = schema.getField(\"home\");\n    assertNotNull(home);\n    assertTrue(\"home is not a poly field\", home.isPolyField());\n    FieldType tmp = home.getType();\n    assertTrue(tmp instanceof PointType);\n    PointType pt = (PointType) tmp;\n    assertEquals(pt.getDimension(), 2);\n    double[] xy = new double[]{35.0, -79.34};\n    String point = xy[0] + \",\" + xy[1];\n    IndexableField[] fields = home.createFields(point, 2);\n    assertEquals(fields.length, 3);//should be 3, we have a stored field\n    //first two fields contain the values, third is just stored and contains the original\n    for (int i = 0; i < 3; i++) {\n      boolean hasValue = fields[i].binaryValue() != null\n          || fields[i].stringValue() != null\n          || fields[i].numericValue() != null;\n      assertTrue(\"Doesn't have a value: \" + fields[i], hasValue);\n    }\n    /*assertTrue(\"first field \" + fields[0].tokenStreamValue() +  \" is not 35.0\", pt.getSubType().toExternal(fields[0]).equals(String.valueOf(xy[0])));\n    assertTrue(\"second field is not -79.34\", pt.getSubType().toExternal(fields[1]).equals(String.valueOf(xy[1])));\n    assertTrue(\"third field is not '35.0,-79.34'\", pt.getSubType().toExternal(fields[2]).equals(point));*/\n\n\n    home = schema.getField(\"home_ns\");\n    assertNotNull(home);\n    fields = home.createFields(point, 2);\n    assertEquals(fields.length, 2);//should be 2, since we aren't storing\n\n    home = schema.getField(\"home_ns\");\n    assertNotNull(home);\n    try {\n      fields = home.createFields(\"35.0,foo\", 2);\n      assertTrue(false);\n    } catch (Exception e) {\n      //\n    }\n\n    //\n    SchemaField s1 = schema.getField(\"test_p\");\n    SchemaField s2 = schema.getField(\"test_p\");\n    ValueSource v1 = s1.getType().getValueSource(s1, null);\n    ValueSource v2 = s2.getType().getValueSource(s2, null);\n    assertEquals(v1, v2);\n    assertEquals(v1.hashCode(), v2.hashCode());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1d028314cced5858683a1bb4741423d0f934257b","date":1346596535,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/PolyFieldTest#testPointFieldType().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/PolyFieldTest#testPointFieldType().mjava","sourceNew":"  @Test\n  public void testPointFieldType() throws Exception {\n    SolrCore core = h.getCore();\n    IndexSchema schema = core.getSchema();\n    SchemaField home = schema.getField(\"home\");\n    assertNotNull(home);\n    assertTrue(\"home is not a poly field\", home.isPolyField());\n    FieldType tmp = home.getType();\n    assertTrue(tmp instanceof PointType);\n    PointType pt = (PointType) tmp;\n    assertEquals(pt.getDimension(), 2);\n    double[] xy = new double[]{35.0, -79.34};\n    String point = xy[0] + \",\" + xy[1];\n    StorableField[] fields = home.createFields(point, 2);\n    assertEquals(fields.length, 3);//should be 3, we have a stored field\n    //first two fields contain the values, third is just stored and contains the original\n    for (int i = 0; i < 3; i++) {\n      boolean hasValue = fields[i].binaryValue() != null\n          || fields[i].stringValue() != null\n          || fields[i].numericValue() != null;\n      assertTrue(\"Doesn't have a value: \" + fields[i], hasValue);\n    }\n    /*assertTrue(\"first field \" + fields[0].tokenStreamValue() +  \" is not 35.0\", pt.getSubType().toExternal(fields[0]).equals(String.valueOf(xy[0])));\n    assertTrue(\"second field is not -79.34\", pt.getSubType().toExternal(fields[1]).equals(String.valueOf(xy[1])));\n    assertTrue(\"third field is not '35.0,-79.34'\", pt.getSubType().toExternal(fields[2]).equals(point));*/\n\n\n    home = schema.getField(\"home_ns\");\n    assertNotNull(home);\n    fields = home.createFields(point, 2);\n    assertEquals(fields.length, 2);//should be 2, since we aren't storing\n\n    home = schema.getField(\"home_ns\");\n    assertNotNull(home);\n    try {\n      fields = home.createFields(\"35.0,foo\", 2);\n      assertTrue(false);\n    } catch (Exception e) {\n      //\n    }\n\n    //\n    SchemaField s1 = schema.getField(\"test_p\");\n    SchemaField s2 = schema.getField(\"test_p\");\n    ValueSource v1 = s1.getType().getValueSource(s1, null);\n    ValueSource v2 = s2.getType().getValueSource(s2, null);\n    assertEquals(v1, v2);\n    assertEquals(v1.hashCode(), v2.hashCode());\n  }\n\n","sourceOld":"  @Test\n  public void testPointFieldType() throws Exception {\n    SolrCore core = h.getCore();\n    IndexSchema schema = core.getSchema();\n    SchemaField home = schema.getField(\"home\");\n    assertNotNull(home);\n    assertTrue(\"home is not a poly field\", home.isPolyField());\n    FieldType tmp = home.getType();\n    assertTrue(tmp instanceof PointType);\n    PointType pt = (PointType) tmp;\n    assertEquals(pt.getDimension(), 2);\n    double[] xy = new double[]{35.0, -79.34};\n    String point = xy[0] + \",\" + xy[1];\n    IndexableField[] fields = home.createFields(point, 2);\n    assertEquals(fields.length, 3);//should be 3, we have a stored field\n    //first two fields contain the values, third is just stored and contains the original\n    for (int i = 0; i < 3; i++) {\n      boolean hasValue = fields[i].binaryValue() != null\n          || fields[i].stringValue() != null\n          || fields[i].numericValue() != null;\n      assertTrue(\"Doesn't have a value: \" + fields[i], hasValue);\n    }\n    /*assertTrue(\"first field \" + fields[0].tokenStreamValue() +  \" is not 35.0\", pt.getSubType().toExternal(fields[0]).equals(String.valueOf(xy[0])));\n    assertTrue(\"second field is not -79.34\", pt.getSubType().toExternal(fields[1]).equals(String.valueOf(xy[1])));\n    assertTrue(\"third field is not '35.0,-79.34'\", pt.getSubType().toExternal(fields[2]).equals(point));*/\n\n\n    home = schema.getField(\"home_ns\");\n    assertNotNull(home);\n    fields = home.createFields(point, 2);\n    assertEquals(fields.length, 2);//should be 2, since we aren't storing\n\n    home = schema.getField(\"home_ns\");\n    assertNotNull(home);\n    try {\n      fields = home.createFields(\"35.0,foo\", 2);\n      assertTrue(false);\n    } catch (Exception e) {\n      //\n    }\n\n    //\n    SchemaField s1 = schema.getField(\"test_p\");\n    SchemaField s2 = schema.getField(\"test_p\");\n    ValueSource v1 = s1.getType().getValueSource(s1, null);\n    ValueSource v2 = s2.getType().getValueSource(s2, null);\n    assertEquals(v1, v2);\n    assertEquals(v1.hashCode(), v2.hashCode());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"73bb5a57dc75b54a39494f99986599cae7dff417","date":1361040620,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/PolyFieldTest#testPointFieldType().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/PolyFieldTest#testPointFieldType().mjava","sourceNew":"  @Test\n  public void testPointFieldType() throws Exception {\n    SolrCore core = h.getCore();\n    IndexSchema schema = core.getSchema();\n    SchemaField home = schema.getField(\"home\");\n    assertNotNull(home);\n    assertTrue(\"home is not a poly field\", home.isPolyField());\n    FieldType tmp = home.getType();\n    assertTrue(tmp instanceof PointType);\n    PointType pt = (PointType) tmp;\n    assertEquals(pt.getDimension(), 2);\n    double[] xy = new double[]{35.0, -79.34};\n    String point = xy[0] + \",\" + xy[1];\n    List<StorableField> fields = home.createFields(point, 2);\n    assertEquals(fields.size(), 3);//should be 3, we have a stored field\n    //first two fields contain the values, third is just stored and contains the original\n    for (int i = 0; i < 3; i++) {\n      boolean hasValue = fields.get(i).binaryValue() != null\n          || fields.get(i).stringValue() != null\n          || fields.get(i).numericValue() != null;\n      assertTrue(\"Doesn't have a value: \" + fields.get(i), hasValue);\n    }\n    /*assertTrue(\"first field \" + fields[0].tokenStreamValue() +  \" is not 35.0\", pt.getSubType().toExternal(fields[0]).equals(String.valueOf(xy[0])));\n    assertTrue(\"second field is not -79.34\", pt.getSubType().toExternal(fields[1]).equals(String.valueOf(xy[1])));\n    assertTrue(\"third field is not '35.0,-79.34'\", pt.getSubType().toExternal(fields[2]).equals(point));*/\n\n\n    home = schema.getField(\"home_ns\");\n    assertNotNull(home);\n    fields = home.createFields(point, 2);\n    assertEquals(fields.size(), 2);//should be 2, since we aren't storing\n\n    home = schema.getField(\"home_ns\");\n    assertNotNull(home);\n    try {\n      fields = home.createFields(\"35.0,foo\", 2);\n      assertTrue(false);\n    } catch (Exception e) {\n      //\n    }\n\n    //\n    SchemaField s1 = schema.getField(\"test_p\");\n    SchemaField s2 = schema.getField(\"test_p\");\n    ValueSource v1 = s1.getType().getValueSource(s1, null);\n    ValueSource v2 = s2.getType().getValueSource(s2, null);\n    assertEquals(v1, v2);\n    assertEquals(v1.hashCode(), v2.hashCode());\n  }\n\n","sourceOld":"  @Test\n  public void testPointFieldType() throws Exception {\n    SolrCore core = h.getCore();\n    IndexSchema schema = core.getSchema();\n    SchemaField home = schema.getField(\"home\");\n    assertNotNull(home);\n    assertTrue(\"home is not a poly field\", home.isPolyField());\n    FieldType tmp = home.getType();\n    assertTrue(tmp instanceof PointType);\n    PointType pt = (PointType) tmp;\n    assertEquals(pt.getDimension(), 2);\n    double[] xy = new double[]{35.0, -79.34};\n    String point = xy[0] + \",\" + xy[1];\n    StorableField[] fields = home.createFields(point, 2);\n    assertEquals(fields.length, 3);//should be 3, we have a stored field\n    //first two fields contain the values, third is just stored and contains the original\n    for (int i = 0; i < 3; i++) {\n      boolean hasValue = fields[i].binaryValue() != null\n          || fields[i].stringValue() != null\n          || fields[i].numericValue() != null;\n      assertTrue(\"Doesn't have a value: \" + fields[i], hasValue);\n    }\n    /*assertTrue(\"first field \" + fields[0].tokenStreamValue() +  \" is not 35.0\", pt.getSubType().toExternal(fields[0]).equals(String.valueOf(xy[0])));\n    assertTrue(\"second field is not -79.34\", pt.getSubType().toExternal(fields[1]).equals(String.valueOf(xy[1])));\n    assertTrue(\"third field is not '35.0,-79.34'\", pt.getSubType().toExternal(fields[2]).equals(point));*/\n\n\n    home = schema.getField(\"home_ns\");\n    assertNotNull(home);\n    fields = home.createFields(point, 2);\n    assertEquals(fields.length, 2);//should be 2, since we aren't storing\n\n    home = schema.getField(\"home_ns\");\n    assertNotNull(home);\n    try {\n      fields = home.createFields(\"35.0,foo\", 2);\n      assertTrue(false);\n    } catch (Exception e) {\n      //\n    }\n\n    //\n    SchemaField s1 = schema.getField(\"test_p\");\n    SchemaField s2 = schema.getField(\"test_p\");\n    ValueSource v1 = s1.getType().getValueSource(s1, null);\n    ValueSource v2 = s2.getType().getValueSource(s2, null);\n    assertEquals(v1, v2);\n    assertEquals(v1.hashCode(), v2.hashCode());\n  }\n\n","bugFix":null,"bugIntro":["378c6150f20ef79f184ab9cd89a056771fc918c7"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"95303ff3749680c743b9425f9cf99e6e4065e8a8","date":1361061922,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/PolyFieldTest#testPointFieldType().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/PolyFieldTest#testPointFieldType().mjava","sourceNew":"  @Test\n  public void testPointFieldType() throws Exception {\n    SolrCore core = h.getCore();\n    IndexSchema schema = core.getSchema();\n    SchemaField home = schema.getField(\"home\");\n    assertNotNull(home);\n    assertTrue(\"home is not a poly field\", home.isPolyField());\n    FieldType tmp = home.getType();\n    assertTrue(tmp instanceof PointType);\n    PointType pt = (PointType) tmp;\n    assertEquals(pt.getDimension(), 2);\n    double[] xy = new double[]{35.0, -79.34};\n    String point = xy[0] + \",\" + xy[1];\n    List<StorableField> fields = home.createFields(point, 2);\n    assertEquals(fields.size(), 3);//should be 3, we have a stored field\n    //first two fields contain the values, third is just stored and contains the original\n    for (int i = 0; i < 3; i++) {\n      boolean hasValue = fields.get(i).binaryValue() != null\n          || fields.get(i).stringValue() != null\n          || fields.get(i).numericValue() != null;\n      assertTrue(\"Doesn't have a value: \" + fields.get(i), hasValue);\n    }\n    /*assertTrue(\"first field \" + fields[0].tokenStreamValue() +  \" is not 35.0\", pt.getSubType().toExternal(fields[0]).equals(String.valueOf(xy[0])));\n    assertTrue(\"second field is not -79.34\", pt.getSubType().toExternal(fields[1]).equals(String.valueOf(xy[1])));\n    assertTrue(\"third field is not '35.0,-79.34'\", pt.getSubType().toExternal(fields[2]).equals(point));*/\n\n\n    home = schema.getField(\"home_ns\");\n    assertNotNull(home);\n    fields = home.createFields(point, 2);\n    assertEquals(fields.size(), 2);//should be 2, since we aren't storing\n\n    home = schema.getField(\"home_ns\");\n    assertNotNull(home);\n    try {\n      fields = home.createFields(\"35.0,foo\", 2);\n      assertTrue(false);\n    } catch (Exception e) {\n      //\n    }\n\n    //\n    SchemaField s1 = schema.getField(\"test_p\");\n    SchemaField s2 = schema.getField(\"test_p\");\n    ValueSource v1 = s1.getType().getValueSource(s1, null);\n    ValueSource v2 = s2.getType().getValueSource(s2, null);\n    assertEquals(v1, v2);\n    assertEquals(v1.hashCode(), v2.hashCode());\n  }\n\n","sourceOld":"  @Test\n  public void testPointFieldType() throws Exception {\n    SolrCore core = h.getCore();\n    IndexSchema schema = core.getSchema();\n    SchemaField home = schema.getField(\"home\");\n    assertNotNull(home);\n    assertTrue(\"home is not a poly field\", home.isPolyField());\n    FieldType tmp = home.getType();\n    assertTrue(tmp instanceof PointType);\n    PointType pt = (PointType) tmp;\n    assertEquals(pt.getDimension(), 2);\n    double[] xy = new double[]{35.0, -79.34};\n    String point = xy[0] + \",\" + xy[1];\n    StorableField[] fields = home.createFields(point, 2);\n    assertEquals(fields.length, 3);//should be 3, we have a stored field\n    //first two fields contain the values, third is just stored and contains the original\n    for (int i = 0; i < 3; i++) {\n      boolean hasValue = fields[i].binaryValue() != null\n          || fields[i].stringValue() != null\n          || fields[i].numericValue() != null;\n      assertTrue(\"Doesn't have a value: \" + fields[i], hasValue);\n    }\n    /*assertTrue(\"first field \" + fields[0].tokenStreamValue() +  \" is not 35.0\", pt.getSubType().toExternal(fields[0]).equals(String.valueOf(xy[0])));\n    assertTrue(\"second field is not -79.34\", pt.getSubType().toExternal(fields[1]).equals(String.valueOf(xy[1])));\n    assertTrue(\"third field is not '35.0,-79.34'\", pt.getSubType().toExternal(fields[2]).equals(point));*/\n\n\n    home = schema.getField(\"home_ns\");\n    assertNotNull(home);\n    fields = home.createFields(point, 2);\n    assertEquals(fields.length, 2);//should be 2, since we aren't storing\n\n    home = schema.getField(\"home_ns\");\n    assertNotNull(home);\n    try {\n      fields = home.createFields(\"35.0,foo\", 2);\n      assertTrue(false);\n    } catch (Exception e) {\n      //\n    }\n\n    //\n    SchemaField s1 = schema.getField(\"test_p\");\n    SchemaField s2 = schema.getField(\"test_p\");\n    ValueSource v1 = s1.getType().getValueSource(s1, null);\n    ValueSource v2 = s2.getType().getValueSource(s2, null);\n    assertEquals(v1, v2);\n    assertEquals(v1.hashCode(), v2.hashCode());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"08970e5b8411182a29412c177eff67ec1110095b","date":1366640815,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/PolyFieldTest#testPointFieldType().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/PolyFieldTest#testPointFieldType().mjava","sourceNew":"  @Test\n  public void testPointFieldType() throws Exception {\n    SolrCore core = h.getCore();\n    IndexSchema schema = core.getLatestSchema();\n    SchemaField home = schema.getField(\"home\");\n    assertNotNull(home);\n    assertTrue(\"home is not a poly field\", home.isPolyField());\n    FieldType tmp = home.getType();\n    assertTrue(tmp instanceof PointType);\n    PointType pt = (PointType) tmp;\n    assertEquals(pt.getDimension(), 2);\n    double[] xy = new double[]{35.0, -79.34};\n    String point = xy[0] + \",\" + xy[1];\n    List<StorableField> fields = home.createFields(point, 2);\n    assertEquals(fields.size(), 3);//should be 3, we have a stored field\n    //first two fields contain the values, third is just stored and contains the original\n    for (int i = 0; i < 3; i++) {\n      boolean hasValue = fields.get(i).binaryValue() != null\n          || fields.get(i).stringValue() != null\n          || fields.get(i).numericValue() != null;\n      assertTrue(\"Doesn't have a value: \" + fields.get(i), hasValue);\n    }\n    /*assertTrue(\"first field \" + fields[0].tokenStreamValue() +  \" is not 35.0\", pt.getSubType().toExternal(fields[0]).equals(String.valueOf(xy[0])));\n    assertTrue(\"second field is not -79.34\", pt.getSubType().toExternal(fields[1]).equals(String.valueOf(xy[1])));\n    assertTrue(\"third field is not '35.0,-79.34'\", pt.getSubType().toExternal(fields[2]).equals(point));*/\n\n\n    home = schema.getField(\"home_ns\");\n    assertNotNull(home);\n    fields = home.createFields(point, 2);\n    assertEquals(fields.size(), 2);//should be 2, since we aren't storing\n\n    home = schema.getField(\"home_ns\");\n    assertNotNull(home);\n    try {\n      fields = home.createFields(\"35.0,foo\", 2);\n      assertTrue(false);\n    } catch (Exception e) {\n      //\n    }\n\n    //\n    SchemaField s1 = schema.getField(\"test_p\");\n    SchemaField s2 = schema.getField(\"test_p\");\n    ValueSource v1 = s1.getType().getValueSource(s1, null);\n    ValueSource v2 = s2.getType().getValueSource(s2, null);\n    assertEquals(v1, v2);\n    assertEquals(v1.hashCode(), v2.hashCode());\n  }\n\n","sourceOld":"  @Test\n  public void testPointFieldType() throws Exception {\n    SolrCore core = h.getCore();\n    IndexSchema schema = core.getSchema();\n    SchemaField home = schema.getField(\"home\");\n    assertNotNull(home);\n    assertTrue(\"home is not a poly field\", home.isPolyField());\n    FieldType tmp = home.getType();\n    assertTrue(tmp instanceof PointType);\n    PointType pt = (PointType) tmp;\n    assertEquals(pt.getDimension(), 2);\n    double[] xy = new double[]{35.0, -79.34};\n    String point = xy[0] + \",\" + xy[1];\n    List<StorableField> fields = home.createFields(point, 2);\n    assertEquals(fields.size(), 3);//should be 3, we have a stored field\n    //first two fields contain the values, third is just stored and contains the original\n    for (int i = 0; i < 3; i++) {\n      boolean hasValue = fields.get(i).binaryValue() != null\n          || fields.get(i).stringValue() != null\n          || fields.get(i).numericValue() != null;\n      assertTrue(\"Doesn't have a value: \" + fields.get(i), hasValue);\n    }\n    /*assertTrue(\"first field \" + fields[0].tokenStreamValue() +  \" is not 35.0\", pt.getSubType().toExternal(fields[0]).equals(String.valueOf(xy[0])));\n    assertTrue(\"second field is not -79.34\", pt.getSubType().toExternal(fields[1]).equals(String.valueOf(xy[1])));\n    assertTrue(\"third field is not '35.0,-79.34'\", pt.getSubType().toExternal(fields[2]).equals(point));*/\n\n\n    home = schema.getField(\"home_ns\");\n    assertNotNull(home);\n    fields = home.createFields(point, 2);\n    assertEquals(fields.size(), 2);//should be 2, since we aren't storing\n\n    home = schema.getField(\"home_ns\");\n    assertNotNull(home);\n    try {\n      fields = home.createFields(\"35.0,foo\", 2);\n      assertTrue(false);\n    } catch (Exception e) {\n      //\n    }\n\n    //\n    SchemaField s1 = schema.getField(\"test_p\");\n    SchemaField s2 = schema.getField(\"test_p\");\n    ValueSource v1 = s1.getType().getValueSource(s1, null);\n    ValueSource v2 = s2.getType().getValueSource(s2, null);\n    assertEquals(v1, v2);\n    assertEquals(v1.hashCode(), v2.hashCode());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","date":1453060490,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/PolyFieldTest#testPointFieldType().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/PolyFieldTest#testPointFieldType().mjava","sourceNew":"  @Test\n  public void testPointFieldType() throws Exception {\n    SolrCore core = h.getCore();\n    IndexSchema schema = core.getLatestSchema();\n    SchemaField home = schema.getField(\"home\");\n    assertNotNull(home);\n    assertTrue(\"home is not a poly field\", home.isPolyField());\n    FieldType tmp = home.getType();\n    assertTrue(tmp instanceof PointType);\n    PointType pt = (PointType) tmp;\n    assertEquals(pt.getDimension(), 2);\n    double[] xy = new double[]{35.0, -79.34};\n    String point = xy[0] + \",\" + xy[1];\n    List<IndexableField> fields = home.createFields(point, 2);\n    assertEquals(fields.size(), 3);//should be 3, we have a stored field\n    //first two fields contain the values, third is just stored and contains the original\n    for (int i = 0; i < 3; i++) {\n      boolean hasValue = fields.get(i).binaryValue() != null\n          || fields.get(i).stringValue() != null\n          || fields.get(i).numericValue() != null;\n      assertTrue(\"Doesn't have a value: \" + fields.get(i), hasValue);\n    }\n    /*assertTrue(\"first field \" + fields[0].tokenStreamValue() +  \" is not 35.0\", pt.getSubType().toExternal(fields[0]).equals(String.valueOf(xy[0])));\n    assertTrue(\"second field is not -79.34\", pt.getSubType().toExternal(fields[1]).equals(String.valueOf(xy[1])));\n    assertTrue(\"third field is not '35.0,-79.34'\", pt.getSubType().toExternal(fields[2]).equals(point));*/\n\n\n    home = schema.getField(\"home_ns\");\n    assertNotNull(home);\n    fields = home.createFields(point, 2);\n    assertEquals(fields.size(), 2);//should be 2, since we aren't storing\n\n    home = schema.getField(\"home_ns\");\n    assertNotNull(home);\n    try {\n      fields = home.createFields(\"35.0,foo\", 2);\n      assertTrue(false);\n    } catch (Exception e) {\n      //\n    }\n\n    //\n    SchemaField s1 = schema.getField(\"test_p\");\n    SchemaField s2 = schema.getField(\"test_p\");\n    ValueSource v1 = s1.getType().getValueSource(s1, null);\n    ValueSource v2 = s2.getType().getValueSource(s2, null);\n    assertEquals(v1, v2);\n    assertEquals(v1.hashCode(), v2.hashCode());\n  }\n\n","sourceOld":"  @Test\n  public void testPointFieldType() throws Exception {\n    SolrCore core = h.getCore();\n    IndexSchema schema = core.getLatestSchema();\n    SchemaField home = schema.getField(\"home\");\n    assertNotNull(home);\n    assertTrue(\"home is not a poly field\", home.isPolyField());\n    FieldType tmp = home.getType();\n    assertTrue(tmp instanceof PointType);\n    PointType pt = (PointType) tmp;\n    assertEquals(pt.getDimension(), 2);\n    double[] xy = new double[]{35.0, -79.34};\n    String point = xy[0] + \",\" + xy[1];\n    List<StorableField> fields = home.createFields(point, 2);\n    assertEquals(fields.size(), 3);//should be 3, we have a stored field\n    //first two fields contain the values, third is just stored and contains the original\n    for (int i = 0; i < 3; i++) {\n      boolean hasValue = fields.get(i).binaryValue() != null\n          || fields.get(i).stringValue() != null\n          || fields.get(i).numericValue() != null;\n      assertTrue(\"Doesn't have a value: \" + fields.get(i), hasValue);\n    }\n    /*assertTrue(\"first field \" + fields[0].tokenStreamValue() +  \" is not 35.0\", pt.getSubType().toExternal(fields[0]).equals(String.valueOf(xy[0])));\n    assertTrue(\"second field is not -79.34\", pt.getSubType().toExternal(fields[1]).equals(String.valueOf(xy[1])));\n    assertTrue(\"third field is not '35.0,-79.34'\", pt.getSubType().toExternal(fields[2]).equals(point));*/\n\n\n    home = schema.getField(\"home_ns\");\n    assertNotNull(home);\n    fields = home.createFields(point, 2);\n    assertEquals(fields.size(), 2);//should be 2, since we aren't storing\n\n    home = schema.getField(\"home_ns\");\n    assertNotNull(home);\n    try {\n      fields = home.createFields(\"35.0,foo\", 2);\n      assertTrue(false);\n    } catch (Exception e) {\n      //\n    }\n\n    //\n    SchemaField s1 = schema.getField(\"test_p\");\n    SchemaField s2 = schema.getField(\"test_p\");\n    ValueSource v1 = s1.getType().getValueSource(s1, null);\n    ValueSource v2 = s2.getType().getValueSource(s2, null);\n    assertEquals(v1, v2);\n    assertEquals(v1.hashCode(), v2.hashCode());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"19284d685ce334cd95ff0ace2793842f84bf7383","date":1487788272,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/PolyFieldTest#testPointFieldType().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/PolyFieldTest#testPointFieldType().mjava","sourceNew":"  @Test\n  public void testPointFieldType() throws Exception {\n    SolrCore core = h.getCore();\n    IndexSchema schema = core.getLatestSchema();\n    SchemaField home = schema.getField(\"home\");\n    assertNotNull(home);\n    assertTrue(\"home is not a poly field\", home.isPolyField());\n    FieldType tmp = home.getType();\n    assertTrue(tmp instanceof PointType);\n    PointType pt = (PointType) tmp;\n    assertEquals(pt.getDimension(), 2);\n    double[] xy = new double[]{35.0, -79.34};\n    String point = xy[0] + \",\" + xy[1];\n    List<IndexableField> fields = home.createFields(point, 2);\n    assertEquals(fields.size(), 3);//should be 3, we have a stored field\n    //first two fields contain the values, third is just stored and contains the original\n    for (int i = 0; i < 3; i++) {\n      boolean hasValue = fields.get(i).binaryValue() != null\n          || fields.get(i).stringValue() != null\n          || fields.get(i).numericValue() != null;\n      assertTrue(\"Doesn't have a value: \" + fields.get(i), hasValue);\n    }\n    /*assertTrue(\"first field \" + fields[0].tokenStreamValue() +  \" is not 35.0\", pt.getSubType().toExternal(fields[0]).equals(String.valueOf(xy[0])));\n    assertTrue(\"second field is not -79.34\", pt.getSubType().toExternal(fields[1]).equals(String.valueOf(xy[1])));\n    assertTrue(\"third field is not '35.0,-79.34'\", pt.getSubType().toExternal(fields[2]).equals(point));*/\n\n\n    home = schema.getField(\"home_ns\");\n    assertNotNull(home);\n    fields = home.createFields(point, 2);\n    assertEquals(fields.size(), 2);//should be 2, since we aren't storing\n\n    home = schema.getField(\"home_ns\");\n    assertNotNull(home);\n    try {\n      fields = home.createFields(\"35.0,foo\", 2);\n      assertTrue(false);\n    } catch (Exception e) {\n      //\n    }\n\n    \n    SchemaField s1 = schema.getField(\"test_p\");\n    SchemaField s2 = schema.getField(\"test_p\");\n    // If we use [Int/Double/Long/Float]PointField, we can't get the valueSource, since docValues is false\n    if (s1.createFields(\"1,2\", 0).get(0).fieldType().pointDimensionCount() == 0) {\n      assertFalse(s2.getType().isPointField());\n      ValueSource v1 = s1.getType().getValueSource(s1, null);\n      ValueSource v2 = s2.getType().getValueSource(s2, null);\n      assertEquals(v1, v2);\n      assertEquals(v1.hashCode(), v2.hashCode());\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testPointFieldType() throws Exception {\n    SolrCore core = h.getCore();\n    IndexSchema schema = core.getLatestSchema();\n    SchemaField home = schema.getField(\"home\");\n    assertNotNull(home);\n    assertTrue(\"home is not a poly field\", home.isPolyField());\n    FieldType tmp = home.getType();\n    assertTrue(tmp instanceof PointType);\n    PointType pt = (PointType) tmp;\n    assertEquals(pt.getDimension(), 2);\n    double[] xy = new double[]{35.0, -79.34};\n    String point = xy[0] + \",\" + xy[1];\n    List<IndexableField> fields = home.createFields(point, 2);\n    assertEquals(fields.size(), 3);//should be 3, we have a stored field\n    //first two fields contain the values, third is just stored and contains the original\n    for (int i = 0; i < 3; i++) {\n      boolean hasValue = fields.get(i).binaryValue() != null\n          || fields.get(i).stringValue() != null\n          || fields.get(i).numericValue() != null;\n      assertTrue(\"Doesn't have a value: \" + fields.get(i), hasValue);\n    }\n    /*assertTrue(\"first field \" + fields[0].tokenStreamValue() +  \" is not 35.0\", pt.getSubType().toExternal(fields[0]).equals(String.valueOf(xy[0])));\n    assertTrue(\"second field is not -79.34\", pt.getSubType().toExternal(fields[1]).equals(String.valueOf(xy[1])));\n    assertTrue(\"third field is not '35.0,-79.34'\", pt.getSubType().toExternal(fields[2]).equals(point));*/\n\n\n    home = schema.getField(\"home_ns\");\n    assertNotNull(home);\n    fields = home.createFields(point, 2);\n    assertEquals(fields.size(), 2);//should be 2, since we aren't storing\n\n    home = schema.getField(\"home_ns\");\n    assertNotNull(home);\n    try {\n      fields = home.createFields(\"35.0,foo\", 2);\n      assertTrue(false);\n    } catch (Exception e) {\n      //\n    }\n\n    //\n    SchemaField s1 = schema.getField(\"test_p\");\n    SchemaField s2 = schema.getField(\"test_p\");\n    ValueSource v1 = s1.getType().getValueSource(s1, null);\n    ValueSource v2 = s2.getType().getValueSource(s2, null);\n    assertEquals(v1, v2);\n    assertEquals(v1.hashCode(), v2.hashCode());\n  }\n\n","bugFix":null,"bugIntro":["378c6150f20ef79f184ab9cd89a056771fc918c7"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"acd9883560fd89e6448b2b447302fe543040cd4f","date":1488478696,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/PolyFieldTest#testPointFieldType().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/PolyFieldTest#testPointFieldType().mjava","sourceNew":"  @Test\n  public void testPointFieldType() throws Exception {\n    SolrCore core = h.getCore();\n    IndexSchema schema = core.getLatestSchema();\n    SchemaField home = schema.getField(\"home\");\n    assertNotNull(home);\n    assertTrue(\"home is not a poly field\", home.isPolyField());\n    FieldType tmp = home.getType();\n    assertTrue(tmp instanceof PointType);\n    PointType pt = (PointType) tmp;\n    assertEquals(pt.getDimension(), 2);\n    double[] xy = new double[]{35.0, -79.34};\n    String point = xy[0] + \",\" + xy[1];\n    List<IndexableField> fields = home.createFields(point);\n    assertEquals(fields.size(), 3);//should be 3, we have a stored field\n    //first two fields contain the values, third is just stored and contains the original\n    for (int i = 0; i < 3; i++) {\n      boolean hasValue = fields.get(i).binaryValue() != null\n          || fields.get(i).stringValue() != null\n          || fields.get(i).numericValue() != null;\n      assertTrue(\"Doesn't have a value: \" + fields.get(i), hasValue);\n    }\n    /*assertTrue(\"first field \" + fields[0].tokenStreamValue() +  \" is not 35.0\", pt.getSubType().toExternal(fields[0]).equals(String.valueOf(xy[0])));\n    assertTrue(\"second field is not -79.34\", pt.getSubType().toExternal(fields[1]).equals(String.valueOf(xy[1])));\n    assertTrue(\"third field is not '35.0,-79.34'\", pt.getSubType().toExternal(fields[2]).equals(point));*/\n\n\n    home = schema.getField(\"home_ns\");\n    assertNotNull(home);\n    fields = home.createFields(point);\n    assertEquals(fields.size(), 2);//should be 2, since we aren't storing\n\n    home = schema.getField(\"home_ns\");\n    assertNotNull(home);\n    try {\n      fields = home.createFields(\"35.0,foo\");\n      assertTrue(false);\n    } catch (Exception e) {\n      //\n    }\n\n    \n    SchemaField s1 = schema.getField(\"test_p\");\n    SchemaField s2 = schema.getField(\"test_p\");\n    // If we use [Int/Double/Long/Float]PointField, we can't get the valueSource, since docValues is false\n    if (s1.createFields(\"1,2\").get(0).fieldType().pointDimensionCount() == 0) {\n      assertFalse(s2.getType().isPointField());\n      ValueSource v1 = s1.getType().getValueSource(s1, null);\n      ValueSource v2 = s2.getType().getValueSource(s2, null);\n      assertEquals(v1, v2);\n      assertEquals(v1.hashCode(), v2.hashCode());\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testPointFieldType() throws Exception {\n    SolrCore core = h.getCore();\n    IndexSchema schema = core.getLatestSchema();\n    SchemaField home = schema.getField(\"home\");\n    assertNotNull(home);\n    assertTrue(\"home is not a poly field\", home.isPolyField());\n    FieldType tmp = home.getType();\n    assertTrue(tmp instanceof PointType);\n    PointType pt = (PointType) tmp;\n    assertEquals(pt.getDimension(), 2);\n    double[] xy = new double[]{35.0, -79.34};\n    String point = xy[0] + \",\" + xy[1];\n    List<IndexableField> fields = home.createFields(point, 2);\n    assertEquals(fields.size(), 3);//should be 3, we have a stored field\n    //first two fields contain the values, third is just stored and contains the original\n    for (int i = 0; i < 3; i++) {\n      boolean hasValue = fields.get(i).binaryValue() != null\n          || fields.get(i).stringValue() != null\n          || fields.get(i).numericValue() != null;\n      assertTrue(\"Doesn't have a value: \" + fields.get(i), hasValue);\n    }\n    /*assertTrue(\"first field \" + fields[0].tokenStreamValue() +  \" is not 35.0\", pt.getSubType().toExternal(fields[0]).equals(String.valueOf(xy[0])));\n    assertTrue(\"second field is not -79.34\", pt.getSubType().toExternal(fields[1]).equals(String.valueOf(xy[1])));\n    assertTrue(\"third field is not '35.0,-79.34'\", pt.getSubType().toExternal(fields[2]).equals(point));*/\n\n\n    home = schema.getField(\"home_ns\");\n    assertNotNull(home);\n    fields = home.createFields(point, 2);\n    assertEquals(fields.size(), 2);//should be 2, since we aren't storing\n\n    home = schema.getField(\"home_ns\");\n    assertNotNull(home);\n    try {\n      fields = home.createFields(\"35.0,foo\", 2);\n      assertTrue(false);\n    } catch (Exception e) {\n      //\n    }\n\n    \n    SchemaField s1 = schema.getField(\"test_p\");\n    SchemaField s2 = schema.getField(\"test_p\");\n    // If we use [Int/Double/Long/Float]PointField, we can't get the valueSource, since docValues is false\n    if (s1.createFields(\"1,2\", 0).get(0).fieldType().pointDimensionCount() == 0) {\n      assertFalse(s2.getType().isPointField());\n      ValueSource v1 = s1.getType().getValueSource(s1, null);\n      ValueSource v2 = s2.getType().getValueSource(s2, null);\n      assertEquals(v1, v2);\n      assertEquals(v1.hashCode(), v2.hashCode());\n    }\n  }\n\n","bugFix":null,"bugIntro":["378c6150f20ef79f184ab9cd89a056771fc918c7"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9a7bf782535cdb8bcd80741225832314d5c2380c","date":1489776915,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/PolyFieldTest#testPointFieldType().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/PolyFieldTest#testPointFieldType().mjava","sourceNew":"  @Test\n  public void testPointFieldType() throws Exception {\n    SolrCore core = h.getCore();\n    IndexSchema schema = core.getLatestSchema();\n    SchemaField home = schema.getField(\"home\");\n    assertNotNull(home);\n    assertTrue(\"home is not a poly field\", home.isPolyField());\n    FieldType tmp = home.getType();\n    assertTrue(tmp instanceof PointType);\n    PointType pt = (PointType) tmp;\n    assertEquals(pt.getDimension(), 2);\n    double[] xy = new double[]{35.0, -79.34};\n    String point = xy[0] + \",\" + xy[1];\n    List<IndexableField> fields = home.createFields(point);\n    assertNotNull(pt.getSubType());\n    int expectdNumFields = 3;//If DV=false, we expect one field per dimension plus a stored field\n    if (pt.subField(home, 0, schema).hasDocValues()) {\n      expectdNumFields+=2; // If docValues=true, then we expect two more fields\n    }\n    assertEquals(\"Unexpected fields created: \" + Arrays.toString(fields.toArray()), expectdNumFields, fields.size());\n    //first two/four fields contain the values, last one is just stored and contains the original\n    for (int i = 0; i < expectdNumFields; i++) {\n      boolean hasValue = fields.get(i).binaryValue() != null\n          || fields.get(i).stringValue() != null\n          || fields.get(i).numericValue() != null;\n      assertTrue(\"Doesn't have a value: \" + fields.get(i), hasValue);\n    }\n    /*assertTrue(\"first field \" + fields[0].tokenStreamValue() +  \" is not 35.0\", pt.getSubType().toExternal(fields[0]).equals(String.valueOf(xy[0])));\n    assertTrue(\"second field is not -79.34\", pt.getSubType().toExternal(fields[1]).equals(String.valueOf(xy[1])));\n    assertTrue(\"third field is not '35.0,-79.34'\", pt.getSubType().toExternal(fields[2]).equals(point));*/\n\n\n    home = schema.getField(\"home_ns\");\n    assertNotNull(home);\n    fields = home.createFields(point);\n    assertEquals(expectdNumFields - 1, fields.size(), 2);//one less field than with \"home\", since we aren't storing\n\n    home = schema.getField(\"home_ns\");\n    assertNotNull(home);\n    try {\n      fields = home.createFields(\"35.0,foo\");\n      assertTrue(false);\n    } catch (Exception e) {\n      //\n    }\n\n    SchemaField s1 = schema.getField(\"test_p\");\n    SchemaField s2 = schema.getField(\"test_p\");\n    ValueSource v1 = s1.getType().getValueSource(s1, null);\n    ValueSource v2 = s2.getType().getValueSource(s2, null);\n    assertEquals(v1, v2);\n    assertEquals(v1.hashCode(), v2.hashCode());\n  }\n\n","sourceOld":"  @Test\n  public void testPointFieldType() throws Exception {\n    SolrCore core = h.getCore();\n    IndexSchema schema = core.getLatestSchema();\n    SchemaField home = schema.getField(\"home\");\n    assertNotNull(home);\n    assertTrue(\"home is not a poly field\", home.isPolyField());\n    FieldType tmp = home.getType();\n    assertTrue(tmp instanceof PointType);\n    PointType pt = (PointType) tmp;\n    assertEquals(pt.getDimension(), 2);\n    double[] xy = new double[]{35.0, -79.34};\n    String point = xy[0] + \",\" + xy[1];\n    List<IndexableField> fields = home.createFields(point);\n    assertEquals(fields.size(), 3);//should be 3, we have a stored field\n    //first two fields contain the values, third is just stored and contains the original\n    for (int i = 0; i < 3; i++) {\n      boolean hasValue = fields.get(i).binaryValue() != null\n          || fields.get(i).stringValue() != null\n          || fields.get(i).numericValue() != null;\n      assertTrue(\"Doesn't have a value: \" + fields.get(i), hasValue);\n    }\n    /*assertTrue(\"first field \" + fields[0].tokenStreamValue() +  \" is not 35.0\", pt.getSubType().toExternal(fields[0]).equals(String.valueOf(xy[0])));\n    assertTrue(\"second field is not -79.34\", pt.getSubType().toExternal(fields[1]).equals(String.valueOf(xy[1])));\n    assertTrue(\"third field is not '35.0,-79.34'\", pt.getSubType().toExternal(fields[2]).equals(point));*/\n\n\n    home = schema.getField(\"home_ns\");\n    assertNotNull(home);\n    fields = home.createFields(point);\n    assertEquals(fields.size(), 2);//should be 2, since we aren't storing\n\n    home = schema.getField(\"home_ns\");\n    assertNotNull(home);\n    try {\n      fields = home.createFields(\"35.0,foo\");\n      assertTrue(false);\n    } catch (Exception e) {\n      //\n    }\n\n    \n    SchemaField s1 = schema.getField(\"test_p\");\n    SchemaField s2 = schema.getField(\"test_p\");\n    // If we use [Int/Double/Long/Float]PointField, we can't get the valueSource, since docValues is false\n    if (s1.createFields(\"1,2\").get(0).fieldType().pointDimensionCount() == 0) {\n      assertFalse(s2.getType().isPointField());\n      ValueSource v1 = s1.getType().getValueSource(s1, null);\n      ValueSource v2 = s2.getType().getValueSource(s2, null);\n      assertEquals(v1, v2);\n      assertEquals(v1.hashCode(), v2.hashCode());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"378c6150f20ef79f184ab9cd89a056771fc918c7","date":1490280011,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/PolyFieldTest#testPointFieldType().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/PolyFieldTest#testPointFieldType().mjava","sourceNew":"  @Test\n  public void testPointFieldType() throws Exception {\n    SolrCore core = h.getCore();\n    IndexSchema schema = core.getLatestSchema();\n    SchemaField home = schema.getField(\"home\");\n    assertNotNull(home);\n    assertTrue(\"home is not a poly field\", home.isPolyField());\n    FieldType tmp = home.getType();\n    assertTrue(tmp instanceof PointType);\n    PointType pt = (PointType) tmp;\n    assertEquals(pt.getDimension(), 2);\n    double[] xy = new double[]{35.0, -79.34};\n    String point = xy[0] + \",\" + xy[1];\n    List<IndexableField> fields = home.createFields(point);\n    assertNotNull(pt.getSubType());\n    int expectdNumFields = 3;//If DV=false, we expect one field per dimension plus a stored field\n    if (pt.subField(home, 0, schema).hasDocValues()) {\n      expectdNumFields+=2; // If docValues=true, then we expect two more fields\n    }\n    assertEquals(\"Unexpected fields created: \" + Arrays.toString(fields.toArray()), expectdNumFields, fields.size());\n    //first two/four fields contain the values, last one is just stored and contains the original\n    for (int i = 0; i < expectdNumFields; i++) {\n      boolean hasValue = fields.get(i).binaryValue() != null\n          || fields.get(i).stringValue() != null\n          || fields.get(i).numericValue() != null;\n      assertTrue(\"Doesn't have a value: \" + fields.get(i), hasValue);\n    }\n    /*assertTrue(\"first field \" + fields[0].tokenStreamValue() +  \" is not 35.0\", pt.getSubType().toExternal(fields[0]).equals(String.valueOf(xy[0])));\n    assertTrue(\"second field is not -79.34\", pt.getSubType().toExternal(fields[1]).equals(String.valueOf(xy[1])));\n    assertTrue(\"third field is not '35.0,-79.34'\", pt.getSubType().toExternal(fields[2]).equals(point));*/\n\n\n    home = schema.getField(\"home_ns\");\n    assertNotNull(home);\n    fields = home.createFields(point);\n    assertEquals(expectdNumFields - 1, fields.size(), 2);//one less field than with \"home\", since we aren't storing\n\n    home = schema.getField(\"home_ns\");\n    assertNotNull(home);\n    try {\n      fields = home.createFields(\"35.0,foo\");\n      assertTrue(false);\n    } catch (Exception e) {\n      //\n    }\n\n    SchemaField s1 = schema.getField(\"test_p\");\n    SchemaField s2 = schema.getField(\"test_p\");\n    ValueSource v1 = s1.getType().getValueSource(s1, null);\n    ValueSource v2 = s2.getType().getValueSource(s2, null);\n    assertEquals(v1, v2);\n    assertEquals(v1.hashCode(), v2.hashCode());\n  }\n\n","sourceOld":"  @Test\n  public void testPointFieldType() throws Exception {\n    SolrCore core = h.getCore();\n    IndexSchema schema = core.getLatestSchema();\n    SchemaField home = schema.getField(\"home\");\n    assertNotNull(home);\n    assertTrue(\"home is not a poly field\", home.isPolyField());\n    FieldType tmp = home.getType();\n    assertTrue(tmp instanceof PointType);\n    PointType pt = (PointType) tmp;\n    assertEquals(pt.getDimension(), 2);\n    double[] xy = new double[]{35.0, -79.34};\n    String point = xy[0] + \",\" + xy[1];\n    List<IndexableField> fields = home.createFields(point);\n    assertEquals(fields.size(), 3);//should be 3, we have a stored field\n    //first two fields contain the values, third is just stored and contains the original\n    for (int i = 0; i < 3; i++) {\n      boolean hasValue = fields.get(i).binaryValue() != null\n          || fields.get(i).stringValue() != null\n          || fields.get(i).numericValue() != null;\n      assertTrue(\"Doesn't have a value: \" + fields.get(i), hasValue);\n    }\n    /*assertTrue(\"first field \" + fields[0].tokenStreamValue() +  \" is not 35.0\", pt.getSubType().toExternal(fields[0]).equals(String.valueOf(xy[0])));\n    assertTrue(\"second field is not -79.34\", pt.getSubType().toExternal(fields[1]).equals(String.valueOf(xy[1])));\n    assertTrue(\"third field is not '35.0,-79.34'\", pt.getSubType().toExternal(fields[2]).equals(point));*/\n\n\n    home = schema.getField(\"home_ns\");\n    assertNotNull(home);\n    fields = home.createFields(point);\n    assertEquals(fields.size(), 2);//should be 2, since we aren't storing\n\n    home = schema.getField(\"home_ns\");\n    assertNotNull(home);\n    try {\n      fields = home.createFields(\"35.0,foo\");\n      assertTrue(false);\n    } catch (Exception e) {\n      //\n    }\n\n    \n    SchemaField s1 = schema.getField(\"test_p\");\n    SchemaField s2 = schema.getField(\"test_p\");\n    // If we use [Int/Double/Long/Float]PointField, we can't get the valueSource, since docValues is false\n    if (s1.createFields(\"1,2\").get(0).fieldType().pointDimensionCount() == 0) {\n      assertFalse(s2.getType().isPointField());\n      ValueSource v1 = s1.getType().getValueSource(s1, null);\n      ValueSource v2 = s2.getType().getValueSource(s2, null);\n      assertEquals(v1, v2);\n      assertEquals(v1.hashCode(), v2.hashCode());\n    }\n  }\n\n","bugFix":["abec2fd822be07fc74ef5ba3609b9c5625a87d6d","acd9883560fd89e6448b2b447302fe543040cd4f","19284d685ce334cd95ff0ace2793842f84bf7383","73bb5a57dc75b54a39494f99986599cae7dff417"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"19284d685ce334cd95ff0ace2793842f84bf7383":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"409324b31a1419d7c05a38211168cf317e39be77":["fa0f44f887719e97183771e977cfc4bfb485b766"],"9a7bf782535cdb8bcd80741225832314d5c2380c":["acd9883560fd89e6448b2b447302fe543040cd4f"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"08970e5b8411182a29412c177eff67ec1110095b":["73bb5a57dc75b54a39494f99986599cae7dff417"],"1d028314cced5858683a1bb4741423d0f934257b":["fa0f44f887719e97183771e977cfc4bfb485b766","409324b31a1419d7c05a38211168cf317e39be77"],"378c6150f20ef79f184ab9cd89a056771fc918c7":["acd9883560fd89e6448b2b447302fe543040cd4f"],"95303ff3749680c743b9425f9cf99e6e4065e8a8":["1d028314cced5858683a1bb4741423d0f934257b","73bb5a57dc75b54a39494f99986599cae7dff417"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fa0f44f887719e97183771e977cfc4bfb485b766":["8b3bdb938a073ccc28d7ed813f6e8c4cb58e04c5"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["c26f00b574427b55127e869b935845554afde1fa"],"8b3bdb938a073ccc28d7ed813f6e8c4cb58e04c5":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"acd9883560fd89e6448b2b447302fe543040cd4f":["19284d685ce334cd95ff0ace2793842f84bf7383"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9a7bf782535cdb8bcd80741225832314d5c2380c"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["08970e5b8411182a29412c177eff67ec1110095b"],"73bb5a57dc75b54a39494f99986599cae7dff417":["1d028314cced5858683a1bb4741423d0f934257b"]},"commit2Childs":{"19284d685ce334cd95ff0ace2793842f84bf7383":["acd9883560fd89e6448b2b447302fe543040cd4f"],"409324b31a1419d7c05a38211168cf317e39be77":["1d028314cced5858683a1bb4741423d0f934257b"],"9a7bf782535cdb8bcd80741225832314d5c2380c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c26f00b574427b55127e869b935845554afde1fa":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"08970e5b8411182a29412c177eff67ec1110095b":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"1d028314cced5858683a1bb4741423d0f934257b":["95303ff3749680c743b9425f9cf99e6e4065e8a8","73bb5a57dc75b54a39494f99986599cae7dff417"],"378c6150f20ef79f184ab9cd89a056771fc918c7":[],"95303ff3749680c743b9425f9cf99e6e4065e8a8":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"fa0f44f887719e97183771e977cfc4bfb485b766":["409324b31a1419d7c05a38211168cf317e39be77","1d028314cced5858683a1bb4741423d0f934257b"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["8b3bdb938a073ccc28d7ed813f6e8c4cb58e04c5"],"8b3bdb938a073ccc28d7ed813f6e8c4cb58e04c5":["fa0f44f887719e97183771e977cfc4bfb485b766"],"acd9883560fd89e6448b2b447302fe543040cd4f":["9a7bf782535cdb8bcd80741225832314d5c2380c","378c6150f20ef79f184ab9cd89a056771fc918c7"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["19284d685ce334cd95ff0ace2793842f84bf7383"],"73bb5a57dc75b54a39494f99986599cae7dff417":["08970e5b8411182a29412c177eff67ec1110095b","95303ff3749680c743b9425f9cf99e6e4065e8a8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["378c6150f20ef79f184ab9cd89a056771fc918c7","95303ff3749680c743b9425f9cf99e6e4065e8a8","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}