{"path":"lucene/backwards/src/java/org/apache/lucene/util/FieldCacheSanityChecker#checkSubreaders(MapOfSets[Integer,CacheEntry],MapOfSets[ReaderField,Integer]).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/util/FieldCacheSanityChecker#checkSubreaders(MapOfSets[Integer,CacheEntry],MapOfSets[ReaderField,Integer]).mjava","pathOld":"backwards/src/java/org/apache/lucene/util/FieldCacheSanityChecker#checkSubreaders(MapOfSets[Integer,CacheEntry],MapOfSets[ReaderField,Integer]).mjava","sourceNew":"  /** \n   * Internal helper method used by check that iterates over \n   * the keys of readerFieldToValIds and generates a Collection \n   * of Insanity instances whenever two (or more) ReaderField instances are \n   * found that have an ancestry relationships.  \n   *\n   * @see InsanityType#SUBREADER\n   */\n  private Collection<Insanity> checkSubreaders( MapOfSets<Integer, CacheEntry>  valIdToItems,\n                                      MapOfSets<ReaderField, Integer> readerFieldToValIds) {\n\n    final List<Insanity> insanity = new ArrayList<Insanity>(23);\n\n    Map<ReaderField, Set<ReaderField>> badChildren = new HashMap<ReaderField, Set<ReaderField>>(17);\n    MapOfSets<ReaderField, ReaderField> badKids = new MapOfSets<ReaderField, ReaderField>(badChildren); // wrapper\n\n    Map<Integer, Set<CacheEntry>> viToItemSets = valIdToItems.getMap();\n    Map<ReaderField, Set<Integer>> rfToValIdSets = readerFieldToValIds.getMap();\n\n    Set<ReaderField> seen = new HashSet<ReaderField>(17);\n\n    Set<ReaderField> readerFields = rfToValIdSets.keySet();\n    for (final ReaderField rf : readerFields) {\n      \n      if (seen.contains(rf)) continue;\n\n      List kids = getAllDecendentReaderKeys(rf.readerKey);\n      for (Object kidKey : kids) {\n        ReaderField kid = new ReaderField(kidKey, rf.fieldName);\n        \n        if (badChildren.containsKey(kid)) {\n          // we've already process this kid as RF and found other problems\n          // track those problems as our own\n          badKids.put(rf, kid);\n          badKids.putAll(rf, badChildren.get(kid));\n          badChildren.remove(kid);\n          \n        } else if (rfToValIdSets.containsKey(kid)) {\n          // we have cache entries for the kid\n          badKids.put(rf, kid);\n        }\n        seen.add(kid);\n      }\n      seen.add(rf);\n    }\n\n    // every mapping in badKids represents an Insanity\n    for (final ReaderField parent : badChildren.keySet()) {\n      Set<ReaderField> kids = badChildren.get(parent);\n\n      List<CacheEntry> badEntries = new ArrayList<CacheEntry>(kids.size() * 2);\n\n      // put parent entr(ies) in first\n      {\n        for (final Integer value  : rfToValIdSets.get(parent)) {\n          badEntries.addAll(viToItemSets.get(value));\n        }\n      }\n\n      // now the entries for the descendants\n      for (final ReaderField kid : kids) {\n        for (final Integer value : rfToValIdSets.get(kid)) {\n          badEntries.addAll(viToItemSets.get(value));\n        }\n      }\n\n      CacheEntry[] badness = new CacheEntry[badEntries.size()];\n      badness = badEntries.toArray(badness);\n\n      insanity.add(new Insanity(InsanityType.SUBREADER,\n                                \"Found caches for decendents of \" + \n                                parent.toString(),\n                                badness));\n    }\n\n    return insanity;\n\n  }\n\n","sourceOld":"  /** \n   * Internal helper method used by check that iterates over \n   * the keys of readerFieldToValIds and generates a Collection \n   * of Insanity instances whenever two (or more) ReaderField instances are \n   * found that have an ancestry relationships.  \n   *\n   * @see InsanityType#SUBREADER\n   */\n  private Collection<Insanity> checkSubreaders( MapOfSets<Integer, CacheEntry>  valIdToItems,\n                                      MapOfSets<ReaderField, Integer> readerFieldToValIds) {\n\n    final List<Insanity> insanity = new ArrayList<Insanity>(23);\n\n    Map<ReaderField, Set<ReaderField>> badChildren = new HashMap<ReaderField, Set<ReaderField>>(17);\n    MapOfSets<ReaderField, ReaderField> badKids = new MapOfSets<ReaderField, ReaderField>(badChildren); // wrapper\n\n    Map<Integer, Set<CacheEntry>> viToItemSets = valIdToItems.getMap();\n    Map<ReaderField, Set<Integer>> rfToValIdSets = readerFieldToValIds.getMap();\n\n    Set<ReaderField> seen = new HashSet<ReaderField>(17);\n\n    Set<ReaderField> readerFields = rfToValIdSets.keySet();\n    for (final ReaderField rf : readerFields) {\n      \n      if (seen.contains(rf)) continue;\n\n      List kids = getAllDecendentReaderKeys(rf.readerKey);\n      for (Object kidKey : kids) {\n        ReaderField kid = new ReaderField(kidKey, rf.fieldName);\n        \n        if (badChildren.containsKey(kid)) {\n          // we've already process this kid as RF and found other problems\n          // track those problems as our own\n          badKids.put(rf, kid);\n          badKids.putAll(rf, badChildren.get(kid));\n          badChildren.remove(kid);\n          \n        } else if (rfToValIdSets.containsKey(kid)) {\n          // we have cache entries for the kid\n          badKids.put(rf, kid);\n        }\n        seen.add(kid);\n      }\n      seen.add(rf);\n    }\n\n    // every mapping in badKids represents an Insanity\n    for (final ReaderField parent : badChildren.keySet()) {\n      Set<ReaderField> kids = badChildren.get(parent);\n\n      List<CacheEntry> badEntries = new ArrayList<CacheEntry>(kids.size() * 2);\n\n      // put parent entr(ies) in first\n      {\n        for (final Integer value  : rfToValIdSets.get(parent)) {\n          badEntries.addAll(viToItemSets.get(value));\n        }\n      }\n\n      // now the entries for the descendants\n      for (final ReaderField kid : kids) {\n        for (final Integer value : rfToValIdSets.get(kid)) {\n          badEntries.addAll(viToItemSets.get(value));\n        }\n      }\n\n      CacheEntry[] badness = new CacheEntry[badEntries.size()];\n      badness = badEntries.toArray(badness);\n\n      insanity.add(new Insanity(InsanityType.SUBREADER,\n                                \"Found caches for decendents of \" + \n                                parent.toString(),\n                                badness));\n    }\n\n    return insanity;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/java/org/apache/lucene/util/FieldCacheSanityChecker#checkSubreaders(MapOfSets[Integer,CacheEntry],MapOfSets[ReaderField,Integer]).mjava","sourceNew":null,"sourceOld":"  /** \n   * Internal helper method used by check that iterates over \n   * the keys of readerFieldToValIds and generates a Collection \n   * of Insanity instances whenever two (or more) ReaderField instances are \n   * found that have an ancestry relationships.  \n   *\n   * @see InsanityType#SUBREADER\n   */\n  private Collection<Insanity> checkSubreaders( MapOfSets<Integer, CacheEntry>  valIdToItems,\n                                      MapOfSets<ReaderField, Integer> readerFieldToValIds) {\n\n    final List<Insanity> insanity = new ArrayList<Insanity>(23);\n\n    Map<ReaderField, Set<ReaderField>> badChildren = new HashMap<ReaderField, Set<ReaderField>>(17);\n    MapOfSets<ReaderField, ReaderField> badKids = new MapOfSets<ReaderField, ReaderField>(badChildren); // wrapper\n\n    Map<Integer, Set<CacheEntry>> viToItemSets = valIdToItems.getMap();\n    Map<ReaderField, Set<Integer>> rfToValIdSets = readerFieldToValIds.getMap();\n\n    Set<ReaderField> seen = new HashSet<ReaderField>(17);\n\n    Set<ReaderField> readerFields = rfToValIdSets.keySet();\n    for (final ReaderField rf : readerFields) {\n      \n      if (seen.contains(rf)) continue;\n\n      List kids = getAllDecendentReaderKeys(rf.readerKey);\n      for (Object kidKey : kids) {\n        ReaderField kid = new ReaderField(kidKey, rf.fieldName);\n        \n        if (badChildren.containsKey(kid)) {\n          // we've already process this kid as RF and found other problems\n          // track those problems as our own\n          badKids.put(rf, kid);\n          badKids.putAll(rf, badChildren.get(kid));\n          badChildren.remove(kid);\n          \n        } else if (rfToValIdSets.containsKey(kid)) {\n          // we have cache entries for the kid\n          badKids.put(rf, kid);\n        }\n        seen.add(kid);\n      }\n      seen.add(rf);\n    }\n\n    // every mapping in badKids represents an Insanity\n    for (final ReaderField parent : badChildren.keySet()) {\n      Set<ReaderField> kids = badChildren.get(parent);\n\n      List<CacheEntry> badEntries = new ArrayList<CacheEntry>(kids.size() * 2);\n\n      // put parent entr(ies) in first\n      {\n        for (final Integer value  : rfToValIdSets.get(parent)) {\n          badEntries.addAll(viToItemSets.get(value));\n        }\n      }\n\n      // now the entries for the descendants\n      for (final ReaderField kid : kids) {\n        for (final Integer value : rfToValIdSets.get(kid)) {\n          badEntries.addAll(viToItemSets.get(value));\n        }\n      }\n\n      CacheEntry[] badness = new CacheEntry[badEntries.size()];\n      badness = badEntries.toArray(badness);\n\n      insanity.add(new Insanity(InsanityType.SUBREADER,\n                                \"Found caches for decendents of \" + \n                                parent.toString(),\n                                badness));\n    }\n\n    return insanity;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}