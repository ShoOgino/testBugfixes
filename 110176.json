{"path":"lucene/core/src/test/org/apache/lucene/index/TestBinaryDocValuesUpdates#testUpdateOldSegments().mjava","commits":[{"id":"06805da26538ed636bd89b10c2699cc3834032ae","date":1395132972,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestBinaryDocValuesUpdates#testUpdateOldSegments().mjava","pathOld":"/dev/null","sourceNew":"  public void testUpdateOldSegments() throws Exception {\n    Codec[] oldCodecs = new Codec[] { new Lucene40RWCodec(), new Lucene41RWCodec(), new Lucene42RWCodec(), new Lucene45RWCodec() };\n    Directory dir = newDirectory();\n    \n    boolean oldValue = OLD_FORMAT_IMPERSONATION_IS_ACTIVE;\n    // create a segment with an old Codec\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    conf.setCodec(oldCodecs[random().nextInt(oldCodecs.length)]);\n    OLD_FORMAT_IMPERSONATION_IS_ACTIVE = true;\n    IndexWriter writer = new IndexWriter(dir, conf);\n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"doc\", Store.NO));\n    doc.add(new BinaryDocValuesField(\"f\", toBytes(5L)));\n    writer.addDocument(doc);\n    writer.close();\n    \n    conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    writer = new IndexWriter(dir, conf);\n    writer.updateBinaryDocValue(new Term(\"id\", \"doc\"), \"f\", toBytes(4L));\n    OLD_FORMAT_IMPERSONATION_IS_ACTIVE = false;\n    try {\n      writer.close();\n      fail(\"should not have succeeded to update a segment written with an old Codec\");\n    } catch (UnsupportedOperationException e) {\n      writer.rollback(); \n    } finally {\n      OLD_FORMAT_IMPERSONATION_IS_ACTIVE = oldValue;\n    }\n    \n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestBinaryDocValuesUpdates#testUpdateOldSegments().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestBinaryDocValuesUpdates#testUpdateOldSegments().mjava","sourceNew":"  public void testUpdateOldSegments() throws Exception {\n    Codec[] oldCodecs = new Codec[] { new Lucene40RWCodec(), new Lucene41RWCodec(), new Lucene42RWCodec(), new Lucene45RWCodec() };\n    Directory dir = newDirectory();\n    \n    boolean oldValue = OLD_FORMAT_IMPERSONATION_IS_ACTIVE;\n    // create a segment with an old Codec\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    conf.setCodec(oldCodecs[random().nextInt(oldCodecs.length)]);\n    OLD_FORMAT_IMPERSONATION_IS_ACTIVE = true;\n    IndexWriter writer = new IndexWriter(dir, conf);\n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"doc\", Store.NO));\n    doc.add(new BinaryDocValuesField(\"f\", toBytes(5L)));\n    writer.addDocument(doc);\n    writer.shutdown();\n    \n    conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    writer = new IndexWriter(dir, conf);\n    writer.updateBinaryDocValue(new Term(\"id\", \"doc\"), \"f\", toBytes(4L));\n    OLD_FORMAT_IMPERSONATION_IS_ACTIVE = false;\n    try {\n      writer.shutdown();\n      fail(\"should not have succeeded to update a segment written with an old Codec\");\n    } catch (UnsupportedOperationException e) {\n      writer.rollback(); \n    } finally {\n      OLD_FORMAT_IMPERSONATION_IS_ACTIVE = oldValue;\n    }\n    \n    dir.close();\n  }\n\n","sourceOld":"  public void testUpdateOldSegments() throws Exception {\n    Codec[] oldCodecs = new Codec[] { new Lucene40RWCodec(), new Lucene41RWCodec(), new Lucene42RWCodec(), new Lucene45RWCodec() };\n    Directory dir = newDirectory();\n    \n    boolean oldValue = OLD_FORMAT_IMPERSONATION_IS_ACTIVE;\n    // create a segment with an old Codec\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    conf.setCodec(oldCodecs[random().nextInt(oldCodecs.length)]);\n    OLD_FORMAT_IMPERSONATION_IS_ACTIVE = true;\n    IndexWriter writer = new IndexWriter(dir, conf);\n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"doc\", Store.NO));\n    doc.add(new BinaryDocValuesField(\"f\", toBytes(5L)));\n    writer.addDocument(doc);\n    writer.close();\n    \n    conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    writer = new IndexWriter(dir, conf);\n    writer.updateBinaryDocValue(new Term(\"id\", \"doc\"), \"f\", toBytes(4L));\n    OLD_FORMAT_IMPERSONATION_IS_ACTIVE = false;\n    try {\n      writer.close();\n      fail(\"should not have succeeded to update a segment written with an old Codec\");\n    } catch (UnsupportedOperationException e) {\n      writer.rollback(); \n    } finally {\n      OLD_FORMAT_IMPERSONATION_IS_ACTIVE = oldValue;\n    }\n    \n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestBinaryDocValuesUpdates#testUpdateOldSegments().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestBinaryDocValuesUpdates#testUpdateOldSegments().mjava","sourceNew":"  public void testUpdateOldSegments() throws Exception {\n    Codec[] oldCodecs = new Codec[] { new Lucene40RWCodec(), new Lucene41RWCodec(), new Lucene42RWCodec(), new Lucene45RWCodec() };\n    Directory dir = newDirectory();\n    \n    boolean oldValue = OLD_FORMAT_IMPERSONATION_IS_ACTIVE;\n    // create a segment with an old Codec\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setCodec(oldCodecs[random().nextInt(oldCodecs.length)]);\n    OLD_FORMAT_IMPERSONATION_IS_ACTIVE = true;\n    IndexWriter writer = new IndexWriter(dir, conf);\n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"doc\", Store.NO));\n    doc.add(new BinaryDocValuesField(\"f\", toBytes(5L)));\n    writer.addDocument(doc);\n    writer.shutdown();\n    \n    conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    writer = new IndexWriter(dir, conf);\n    writer.updateBinaryDocValue(new Term(\"id\", \"doc\"), \"f\", toBytes(4L));\n    OLD_FORMAT_IMPERSONATION_IS_ACTIVE = false;\n    try {\n      writer.shutdown();\n      fail(\"should not have succeeded to update a segment written with an old Codec\");\n    } catch (UnsupportedOperationException e) {\n      writer.rollback(); \n    } finally {\n      OLD_FORMAT_IMPERSONATION_IS_ACTIVE = oldValue;\n    }\n    \n    dir.close();\n  }\n\n","sourceOld":"  public void testUpdateOldSegments() throws Exception {\n    Codec[] oldCodecs = new Codec[] { new Lucene40RWCodec(), new Lucene41RWCodec(), new Lucene42RWCodec(), new Lucene45RWCodec() };\n    Directory dir = newDirectory();\n    \n    boolean oldValue = OLD_FORMAT_IMPERSONATION_IS_ACTIVE;\n    // create a segment with an old Codec\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    conf.setCodec(oldCodecs[random().nextInt(oldCodecs.length)]);\n    OLD_FORMAT_IMPERSONATION_IS_ACTIVE = true;\n    IndexWriter writer = new IndexWriter(dir, conf);\n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"doc\", Store.NO));\n    doc.add(new BinaryDocValuesField(\"f\", toBytes(5L)));\n    writer.addDocument(doc);\n    writer.shutdown();\n    \n    conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    writer = new IndexWriter(dir, conf);\n    writer.updateBinaryDocValue(new Term(\"id\", \"doc\"), \"f\", toBytes(4L));\n    OLD_FORMAT_IMPERSONATION_IS_ACTIVE = false;\n    try {\n      writer.shutdown();\n      fail(\"should not have succeeded to update a segment written with an old Codec\");\n    } catch (UnsupportedOperationException e) {\n      writer.rollback(); \n    } finally {\n      OLD_FORMAT_IMPERSONATION_IS_ACTIVE = oldValue;\n    }\n    \n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestBinaryDocValuesUpdates#testUpdateOldSegments().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestBinaryDocValuesUpdates#testUpdateOldSegments().mjava","sourceNew":"  public void testUpdateOldSegments() throws Exception {\n    Codec[] oldCodecs = new Codec[] { new Lucene40RWCodec(), new Lucene41RWCodec(), new Lucene42RWCodec(), new Lucene45RWCodec() };\n    Directory dir = newDirectory();\n    \n    boolean oldValue = OLD_FORMAT_IMPERSONATION_IS_ACTIVE;\n    // create a segment with an old Codec\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setCodec(oldCodecs[random().nextInt(oldCodecs.length)]);\n    OLD_FORMAT_IMPERSONATION_IS_ACTIVE = true;\n    IndexWriter writer = new IndexWriter(dir, conf);\n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"doc\", Store.NO));\n    doc.add(new BinaryDocValuesField(\"f\", toBytes(5L)));\n    writer.addDocument(doc);\n    writer.close();\n    \n    conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    writer = new IndexWriter(dir, conf);\n    writer.updateBinaryDocValue(new Term(\"id\", \"doc\"), \"f\", toBytes(4L));\n    OLD_FORMAT_IMPERSONATION_IS_ACTIVE = false;\n    try {\n      writer.close();\n      fail(\"should not have succeeded to update a segment written with an old Codec\");\n    } catch (UnsupportedOperationException e) {\n      writer.rollback(); \n    } finally {\n      OLD_FORMAT_IMPERSONATION_IS_ACTIVE = oldValue;\n    }\n    \n    dir.close();\n  }\n\n","sourceOld":"  public void testUpdateOldSegments() throws Exception {\n    Codec[] oldCodecs = new Codec[] { new Lucene40RWCodec(), new Lucene41RWCodec(), new Lucene42RWCodec(), new Lucene45RWCodec() };\n    Directory dir = newDirectory();\n    \n    boolean oldValue = OLD_FORMAT_IMPERSONATION_IS_ACTIVE;\n    // create a segment with an old Codec\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setCodec(oldCodecs[random().nextInt(oldCodecs.length)]);\n    OLD_FORMAT_IMPERSONATION_IS_ACTIVE = true;\n    IndexWriter writer = new IndexWriter(dir, conf);\n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"doc\", Store.NO));\n    doc.add(new BinaryDocValuesField(\"f\", toBytes(5L)));\n    writer.addDocument(doc);\n    writer.shutdown();\n    \n    conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    writer = new IndexWriter(dir, conf);\n    writer.updateBinaryDocValue(new Term(\"id\", \"doc\"), \"f\", toBytes(4L));\n    OLD_FORMAT_IMPERSONATION_IS_ACTIVE = false;\n    try {\n      writer.shutdown();\n      fail(\"should not have succeeded to update a segment written with an old Codec\");\n    } catch (UnsupportedOperationException e) {\n      writer.rollback(); \n    } finally {\n      OLD_FORMAT_IMPERSONATION_IS_ACTIVE = oldValue;\n    }\n    \n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cc45c615dbb82bf79d5f9550286098367874fbf","date":1409571423,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestBinaryDocValuesUpdates#testUpdateOldSegments().mjava","sourceNew":null,"sourceOld":"  public void testUpdateOldSegments() throws Exception {\n    Codec[] oldCodecs = new Codec[] { new Lucene40RWCodec(), new Lucene41RWCodec(), new Lucene42RWCodec(), new Lucene45RWCodec() };\n    Directory dir = newDirectory();\n    \n    boolean oldValue = OLD_FORMAT_IMPERSONATION_IS_ACTIVE;\n    // create a segment with an old Codec\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setCodec(oldCodecs[random().nextInt(oldCodecs.length)]);\n    OLD_FORMAT_IMPERSONATION_IS_ACTIVE = true;\n    IndexWriter writer = new IndexWriter(dir, conf);\n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"doc\", Store.NO));\n    doc.add(new BinaryDocValuesField(\"f\", toBytes(5L)));\n    writer.addDocument(doc);\n    writer.close();\n    \n    conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    writer = new IndexWriter(dir, conf);\n    writer.updateBinaryDocValue(new Term(\"id\", \"doc\"), \"f\", toBytes(4L));\n    OLD_FORMAT_IMPERSONATION_IS_ACTIVE = false;\n    try {\n      writer.close();\n      fail(\"should not have succeeded to update a segment written with an old Codec\");\n    } catch (UnsupportedOperationException e) {\n      writer.rollback(); \n    } finally {\n      OLD_FORMAT_IMPERSONATION_IS_ACTIVE = oldValue;\n    }\n    \n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"402ad3ddc9da7b70da1b167667a60ece6a1381fb","date":1409656478,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestDocValuesUpdatesOnOldSegments#testBinaryUpdates().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestBinaryDocValuesUpdates#testUpdateOldSegments().mjava","sourceNew":"  public void testBinaryUpdates() throws Exception {\n    Codec[] oldCodecs = new Codec[] { new Lucene40RWCodec(), new Lucene41RWCodec(), new Lucene42RWCodec(), new Lucene45RWCodec() };\n    Directory dir = newDirectory();\n\n    // create a segment with an old Codec\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setCodec(oldCodecs[random().nextInt(oldCodecs.length)]);\n    IndexWriter writer = new IndexWriter(dir, conf);\n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"doc\", Store.NO));\n    doc.add(new BinaryDocValuesField(\"f\", toBytes(5L)));\n    writer.addDocument(doc);\n    writer.close();\n\n    conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    writer = new IndexWriter(dir, conf);\n    writer.updateBinaryDocValue(new Term(\"id\", \"doc\"), \"f\", toBytes(4L));\n    try {\n      writer.close();\n      fail(\"should not have succeeded to update a segment written with an old Codec\");\n    } catch (UnsupportedOperationException e) {\n      writer.rollback();\n    }\n\n    dir.close();\n  }\n\n","sourceOld":"  public void testUpdateOldSegments() throws Exception {\n    Codec[] oldCodecs = new Codec[] { new Lucene40RWCodec(), new Lucene41RWCodec(), new Lucene42RWCodec(), new Lucene45RWCodec() };\n    Directory dir = newDirectory();\n    \n    boolean oldValue = OLD_FORMAT_IMPERSONATION_IS_ACTIVE;\n    // create a segment with an old Codec\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setCodec(oldCodecs[random().nextInt(oldCodecs.length)]);\n    OLD_FORMAT_IMPERSONATION_IS_ACTIVE = true;\n    IndexWriter writer = new IndexWriter(dir, conf);\n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"doc\", Store.NO));\n    doc.add(new BinaryDocValuesField(\"f\", toBytes(5L)));\n    writer.addDocument(doc);\n    writer.close();\n    \n    conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    writer = new IndexWriter(dir, conf);\n    writer.updateBinaryDocValue(new Term(\"id\", \"doc\"), \"f\", toBytes(4L));\n    OLD_FORMAT_IMPERSONATION_IS_ACTIVE = false;\n    try {\n      writer.close();\n      fail(\"should not have succeeded to update a segment written with an old Codec\");\n    } catch (UnsupportedOperationException e) {\n      writer.rollback(); \n    } finally {\n      OLD_FORMAT_IMPERSONATION_IS_ACTIVE = oldValue;\n    }\n    \n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cc45c615dbb82bf79d5f9550286098367874fbf":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"06805da26538ed636bd89b10c2699cc3834032ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["06805da26538ed636bd89b10c2699cc3834032ae"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["d0ef034a4f10871667ae75181537775ddcf8ade4","4cc45c615dbb82bf79d5f9550286098367874fbf"]},"commit2Childs":{"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["06805da26538ed636bd89b10c2699cc3834032ae"],"4cc45c615dbb82bf79d5f9550286098367874fbf":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["4cc45c615dbb82bf79d5f9550286098367874fbf","402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"06805da26538ed636bd89b10c2699cc3834032ae":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}