{"path":"lucene/core/src/test/org/apache/lucene/search/TestPointQueries#testCrazyFloats().mjava","commits":[{"id":"1800b996d8677670482a071dcb7a48b08c423ace","date":1456955558,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestPointQueries#testCrazyFloats().mjava","pathOld":"/dev/null","sourceNew":"  public void testCrazyFloats() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(new MockAnalyzer(random())));\n\n    Document doc = new Document();\n    doc.add(new FloatPoint(\"point\", Float.NEGATIVE_INFINITY));\n    w.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new FloatPoint(\"point\", -0.0F));\n    w.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new FloatPoint(\"point\", +0.0F));\n    w.addDocument(doc);\n\n    doc = new Document();\n    doc.add(new FloatPoint(\"point\", Float.MIN_VALUE));\n    w.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new FloatPoint(\"point\", Float.MAX_VALUE));\n    w.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new FloatPoint(\"point\", Float.POSITIVE_INFINITY));\n    w.addDocument(doc);\n\n    doc = new Document();\n    doc.add(new FloatPoint(\"point\", Float.NaN));\n    w.addDocument(doc);\n\n    DirectoryReader r = DirectoryReader.open(w);\n    IndexSearcher s = new IndexSearcher(r);\n    \n    // exact queries\n    assertEquals(1, s.count(FloatPoint.newExactQuery(\"point\", Float.NEGATIVE_INFINITY)));\n    assertEquals(1, s.count(FloatPoint.newExactQuery(\"point\", -0.0F)));\n    assertEquals(1, s.count(FloatPoint.newExactQuery(\"point\", +0.0F)));\n    assertEquals(1, s.count(FloatPoint.newExactQuery(\"point\", Float.MIN_VALUE)));\n    assertEquals(1, s.count(FloatPoint.newExactQuery(\"point\", Float.MAX_VALUE)));\n    assertEquals(1, s.count(FloatPoint.newExactQuery(\"point\", Float.POSITIVE_INFINITY)));\n    assertEquals(1, s.count(FloatPoint.newExactQuery(\"point\", Float.NaN)));\n    \n    // set query\n    float set[] = new float[] { Float.MAX_VALUE, Float.NaN, +0.0F, Float.NEGATIVE_INFINITY, Float.MIN_VALUE, -0.0F, Float.POSITIVE_INFINITY };\n    assertEquals(7, s.count(FloatPoint.newSetQuery(\"point\", set)));\n\n    // ranges\n    assertEquals(2, s.count(FloatPoint.newRangeQuery(\"point\", Float.NEGATIVE_INFINITY, -0.0F)));\n    assertEquals(2, s.count(FloatPoint.newRangeQuery(\"point\", -0.0F, 0.0F)));\n    assertEquals(2, s.count(FloatPoint.newRangeQuery(\"point\", 0.0F, Float.MIN_VALUE)));\n    assertEquals(2, s.count(FloatPoint.newRangeQuery(\"point\", Float.MIN_VALUE, Float.MAX_VALUE)));\n    assertEquals(2, s.count(FloatPoint.newRangeQuery(\"point\", Float.MAX_VALUE, Float.POSITIVE_INFINITY)));\n    assertEquals(2, s.count(FloatPoint.newRangeQuery(\"point\", Float.POSITIVE_INFINITY, Float.NaN)));\n\n    w.close();\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c422e924212367b334b4938f1fd3e44438e88c40","date":1456962933,"type":0,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestPointQueries#testCrazyFloats().mjava","pathOld":"/dev/null","sourceNew":"  public void testCrazyFloats() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(new MockAnalyzer(random())));\n\n    Document doc = new Document();\n    doc.add(new FloatPoint(\"point\", Float.NEGATIVE_INFINITY));\n    w.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new FloatPoint(\"point\", -0.0F));\n    w.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new FloatPoint(\"point\", +0.0F));\n    w.addDocument(doc);\n\n    doc = new Document();\n    doc.add(new FloatPoint(\"point\", Float.MIN_VALUE));\n    w.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new FloatPoint(\"point\", Float.MAX_VALUE));\n    w.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new FloatPoint(\"point\", Float.POSITIVE_INFINITY));\n    w.addDocument(doc);\n\n    doc = new Document();\n    doc.add(new FloatPoint(\"point\", Float.NaN));\n    w.addDocument(doc);\n\n    DirectoryReader r = DirectoryReader.open(w);\n    IndexSearcher s = new IndexSearcher(r);\n    \n    // exact queries\n    assertEquals(1, s.count(FloatPoint.newExactQuery(\"point\", Float.NEGATIVE_INFINITY)));\n    assertEquals(1, s.count(FloatPoint.newExactQuery(\"point\", -0.0F)));\n    assertEquals(1, s.count(FloatPoint.newExactQuery(\"point\", +0.0F)));\n    assertEquals(1, s.count(FloatPoint.newExactQuery(\"point\", Float.MIN_VALUE)));\n    assertEquals(1, s.count(FloatPoint.newExactQuery(\"point\", Float.MAX_VALUE)));\n    assertEquals(1, s.count(FloatPoint.newExactQuery(\"point\", Float.POSITIVE_INFINITY)));\n    assertEquals(1, s.count(FloatPoint.newExactQuery(\"point\", Float.NaN)));\n    \n    // set query\n    float set[] = new float[] { Float.MAX_VALUE, Float.NaN, +0.0F, Float.NEGATIVE_INFINITY, Float.MIN_VALUE, -0.0F, Float.POSITIVE_INFINITY };\n    assertEquals(7, s.count(FloatPoint.newSetQuery(\"point\", set)));\n\n    // ranges\n    assertEquals(2, s.count(FloatPoint.newRangeQuery(\"point\", Float.NEGATIVE_INFINITY, -0.0F)));\n    assertEquals(2, s.count(FloatPoint.newRangeQuery(\"point\", -0.0F, 0.0F)));\n    assertEquals(2, s.count(FloatPoint.newRangeQuery(\"point\", 0.0F, Float.MIN_VALUE)));\n    assertEquals(2, s.count(FloatPoint.newRangeQuery(\"point\", Float.MIN_VALUE, Float.MAX_VALUE)));\n    assertEquals(2, s.count(FloatPoint.newRangeQuery(\"point\", Float.MAX_VALUE, Float.POSITIVE_INFINITY)));\n    assertEquals(2, s.count(FloatPoint.newRangeQuery(\"point\", Float.POSITIVE_INFINITY, Float.NaN)));\n\n    w.close();\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf1a614098b46c9c22afebd7b898ae4d1d2fc273","date":1457088850,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestPointQueries#testCrazyFloats().mjava","pathOld":"/dev/null","sourceNew":"  public void testCrazyFloats() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(new MockAnalyzer(random())));\n\n    Document doc = new Document();\n    doc.add(new FloatPoint(\"point\", Float.NEGATIVE_INFINITY));\n    w.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new FloatPoint(\"point\", -0.0F));\n    w.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new FloatPoint(\"point\", +0.0F));\n    w.addDocument(doc);\n\n    doc = new Document();\n    doc.add(new FloatPoint(\"point\", Float.MIN_VALUE));\n    w.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new FloatPoint(\"point\", Float.MAX_VALUE));\n    w.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new FloatPoint(\"point\", Float.POSITIVE_INFINITY));\n    w.addDocument(doc);\n\n    doc = new Document();\n    doc.add(new FloatPoint(\"point\", Float.NaN));\n    w.addDocument(doc);\n\n    DirectoryReader r = DirectoryReader.open(w);\n    IndexSearcher s = new IndexSearcher(r);\n    \n    // exact queries\n    assertEquals(1, s.count(FloatPoint.newExactQuery(\"point\", Float.NEGATIVE_INFINITY)));\n    assertEquals(1, s.count(FloatPoint.newExactQuery(\"point\", -0.0F)));\n    assertEquals(1, s.count(FloatPoint.newExactQuery(\"point\", +0.0F)));\n    assertEquals(1, s.count(FloatPoint.newExactQuery(\"point\", Float.MIN_VALUE)));\n    assertEquals(1, s.count(FloatPoint.newExactQuery(\"point\", Float.MAX_VALUE)));\n    assertEquals(1, s.count(FloatPoint.newExactQuery(\"point\", Float.POSITIVE_INFINITY)));\n    assertEquals(1, s.count(FloatPoint.newExactQuery(\"point\", Float.NaN)));\n    \n    // set query\n    float set[] = new float[] { Float.MAX_VALUE, Float.NaN, +0.0F, Float.NEGATIVE_INFINITY, Float.MIN_VALUE, -0.0F, Float.POSITIVE_INFINITY };\n    assertEquals(7, s.count(FloatPoint.newSetQuery(\"point\", set)));\n\n    // ranges\n    assertEquals(2, s.count(FloatPoint.newRangeQuery(\"point\", Float.NEGATIVE_INFINITY, -0.0F)));\n    assertEquals(2, s.count(FloatPoint.newRangeQuery(\"point\", -0.0F, 0.0F)));\n    assertEquals(2, s.count(FloatPoint.newRangeQuery(\"point\", 0.0F, Float.MIN_VALUE)));\n    assertEquals(2, s.count(FloatPoint.newRangeQuery(\"point\", Float.MIN_VALUE, Float.MAX_VALUE)));\n    assertEquals(2, s.count(FloatPoint.newRangeQuery(\"point\", Float.MAX_VALUE, Float.POSITIVE_INFINITY)));\n    assertEquals(2, s.count(FloatPoint.newRangeQuery(\"point\", Float.POSITIVE_INFINITY, Float.NaN)));\n\n    w.close();\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c422e924212367b334b4938f1fd3e44438e88c40"],"c422e924212367b334b4938f1fd3e44438e88c40":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1800b996d8677670482a071dcb7a48b08c423ace"],"1800b996d8677670482a071dcb7a48b08c423ace":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273","c422e924212367b334b4938f1fd3e44438e88c40","1800b996d8677670482a071dcb7a48b08c423ace"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c422e924212367b334b4938f1fd3e44438e88c40":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"1800b996d8677670482a071dcb7a48b08c423ace":["c422e924212367b334b4938f1fd3e44438e88c40"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}