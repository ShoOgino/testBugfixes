{"path":"lucene/analysis/common/src/test/org/apache/lucene/analysis/reverse/TestReverseStringFilter#testReverseSupplementaryChar().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/reverse/TestReverseStringFilter#testReverseSupplementaryChar().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/reverse/TestReverseStringFilter#testReverseSupplementaryChar().mjava","sourceNew":"  public void testReverseSupplementaryChar() throws Exception {\n    // supplementary at end\n    char[] buffer = \"abc瀛愯䇹鍟艱𩬅\".toCharArray();\n    ReverseStringFilter.reverse(TEST_VERSION_CURRENT, buffer, 3, 7);\n    assertEquals(\"abc𩬅艱鍟䇹愯瀛\", new String(buffer));\n    // supplementary at end - 1\n    buffer = \"abc瀛愯䇹鍟艱𩬅d\".toCharArray();\n    ReverseStringFilter.reverse(TEST_VERSION_CURRENT, buffer, 3, 8);\n    assertEquals(\"abcd𩬅艱鍟䇹愯瀛\", new String(buffer));\n    // supplementary at start\n    buffer = \"abc𩬅瀛愯䇹鍟艱\".toCharArray();\n    ReverseStringFilter.reverse(TEST_VERSION_CURRENT, buffer, 3, 7);\n    assertEquals(\"abc艱鍟䇹愯瀛𩬅\", new String(buffer));\n    // supplementary at start + 1\n    buffer = \"abcd𩬅瀛愯䇹鍟艱\".toCharArray();\n    ReverseStringFilter.reverse(TEST_VERSION_CURRENT, buffer, 3, 8);\n    assertEquals(\"abc艱鍟䇹愯瀛𩬅d\", new String(buffer));\n    // supplementary medial\n    buffer = \"abc瀛愯𩬅def\".toCharArray();\n    ReverseStringFilter.reverse(TEST_VERSION_CURRENT, buffer, 3, 7);\n    assertEquals(\"abcfed𩬅愯瀛\", new String(buffer));\n  }\n\n","sourceOld":"  public void testReverseSupplementaryChar() throws Exception {\n    // supplementary at end\n    char[] buffer = \"abc瀛愯䇹鍟艱𩬅\".toCharArray();\n    ReverseStringFilter.reverse(TEST_VERSION_CURRENT, buffer, 3, 7);\n    assertEquals(\"abc𩬅艱鍟䇹愯瀛\", new String(buffer));\n    // supplementary at end - 1\n    buffer = \"abc瀛愯䇹鍟艱𩬅d\".toCharArray();\n    ReverseStringFilter.reverse(TEST_VERSION_CURRENT, buffer, 3, 8);\n    assertEquals(\"abcd𩬅艱鍟䇹愯瀛\", new String(buffer));\n    // supplementary at start\n    buffer = \"abc𩬅瀛愯䇹鍟艱\".toCharArray();\n    ReverseStringFilter.reverse(TEST_VERSION_CURRENT, buffer, 3, 7);\n    assertEquals(\"abc艱鍟䇹愯瀛𩬅\", new String(buffer));\n    // supplementary at start + 1\n    buffer = \"abcd𩬅瀛愯䇹鍟艱\".toCharArray();\n    ReverseStringFilter.reverse(TEST_VERSION_CURRENT, buffer, 3, 8);\n    assertEquals(\"abc艱鍟䇹愯瀛𩬅d\", new String(buffer));\n    // supplementary medial\n    buffer = \"abc瀛愯𩬅def\".toCharArray();\n    ReverseStringFilter.reverse(TEST_VERSION_CURRENT, buffer, 3, 7);\n    assertEquals(\"abcfed𩬅愯瀛\", new String(buffer));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff4227bb146f97aabae888091c19e48c88dbb0db","date":1406758576,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/reverse/TestReverseStringFilter#testReverseSupplementaryChar().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/reverse/TestReverseStringFilter#testReverseSupplementaryChar().mjava","sourceNew":"  public void testReverseSupplementaryChar() throws Exception {\n    // supplementary at end\n    char[] buffer = \"abc瀛愯䇹鍟艱𩬅\".toCharArray();\n    ReverseStringFilter.reverse(buffer, 3, 7);\n    assertEquals(\"abc𩬅艱鍟䇹愯瀛\", new String(buffer));\n    // supplementary at end - 1\n    buffer = \"abc瀛愯䇹鍟艱𩬅d\".toCharArray();\n    ReverseStringFilter.reverse(buffer, 3, 8);\n    assertEquals(\"abcd𩬅艱鍟䇹愯瀛\", new String(buffer));\n    // supplementary at start\n    buffer = \"abc𩬅瀛愯䇹鍟艱\".toCharArray();\n    ReverseStringFilter.reverse(buffer, 3, 7);\n    assertEquals(\"abc艱鍟䇹愯瀛𩬅\", new String(buffer));\n    // supplementary at start + 1\n    buffer = \"abcd𩬅瀛愯䇹鍟艱\".toCharArray();\n    ReverseStringFilter.reverse(buffer, 3, 8);\n    assertEquals(\"abc艱鍟䇹愯瀛𩬅d\", new String(buffer));\n    // supplementary medial\n    buffer = \"abc瀛愯𩬅def\".toCharArray();\n    ReverseStringFilter.reverse(buffer, 3, 7);\n    assertEquals(\"abcfed𩬅愯瀛\", new String(buffer));\n  }\n\n","sourceOld":"  public void testReverseSupplementaryChar() throws Exception {\n    // supplementary at end\n    char[] buffer = \"abc瀛愯䇹鍟艱𩬅\".toCharArray();\n    ReverseStringFilter.reverse(TEST_VERSION_CURRENT, buffer, 3, 7);\n    assertEquals(\"abc𩬅艱鍟䇹愯瀛\", new String(buffer));\n    // supplementary at end - 1\n    buffer = \"abc瀛愯䇹鍟艱𩬅d\".toCharArray();\n    ReverseStringFilter.reverse(TEST_VERSION_CURRENT, buffer, 3, 8);\n    assertEquals(\"abcd𩬅艱鍟䇹愯瀛\", new String(buffer));\n    // supplementary at start\n    buffer = \"abc𩬅瀛愯䇹鍟艱\".toCharArray();\n    ReverseStringFilter.reverse(TEST_VERSION_CURRENT, buffer, 3, 7);\n    assertEquals(\"abc艱鍟䇹愯瀛𩬅\", new String(buffer));\n    // supplementary at start + 1\n    buffer = \"abcd𩬅瀛愯䇹鍟艱\".toCharArray();\n    ReverseStringFilter.reverse(TEST_VERSION_CURRENT, buffer, 3, 8);\n    assertEquals(\"abc艱鍟䇹愯瀛𩬅d\", new String(buffer));\n    // supplementary medial\n    buffer = \"abc瀛愯𩬅def\".toCharArray();\n    ReverseStringFilter.reverse(TEST_VERSION_CURRENT, buffer, 3, 7);\n    assertEquals(\"abcfed𩬅愯瀛\", new String(buffer));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cdab62f058ea765dd33deb05b4f19b7d626c801","date":1406803479,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/reverse/TestReverseStringFilter#testReverseSupplementaryChar().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/reverse/TestReverseStringFilter#testReverseSupplementaryChar().mjava","sourceNew":"  public void testReverseSupplementaryChar() throws Exception {\n    // supplementary at end\n    char[] buffer = \"abc瀛愯䇹鍟艱𩬅\".toCharArray();\n    ReverseStringFilter.reverse(TEST_VERSION_CURRENT, buffer, 3, 7);\n    assertEquals(\"abc𩬅艱鍟䇹愯瀛\", new String(buffer));\n    // supplementary at end - 1\n    buffer = \"abc瀛愯䇹鍟艱𩬅d\".toCharArray();\n    ReverseStringFilter.reverse(TEST_VERSION_CURRENT, buffer, 3, 8);\n    assertEquals(\"abcd𩬅艱鍟䇹愯瀛\", new String(buffer));\n    // supplementary at start\n    buffer = \"abc𩬅瀛愯䇹鍟艱\".toCharArray();\n    ReverseStringFilter.reverse(TEST_VERSION_CURRENT, buffer, 3, 7);\n    assertEquals(\"abc艱鍟䇹愯瀛𩬅\", new String(buffer));\n    // supplementary at start + 1\n    buffer = \"abcd𩬅瀛愯䇹鍟艱\".toCharArray();\n    ReverseStringFilter.reverse(TEST_VERSION_CURRENT, buffer, 3, 8);\n    assertEquals(\"abc艱鍟䇹愯瀛𩬅d\", new String(buffer));\n    // supplementary medial\n    buffer = \"abc瀛愯𩬅def\".toCharArray();\n    ReverseStringFilter.reverse(TEST_VERSION_CURRENT, buffer, 3, 7);\n    assertEquals(\"abcfed𩬅愯瀛\", new String(buffer));\n  }\n\n","sourceOld":"  public void testReverseSupplementaryChar() throws Exception {\n    // supplementary at end\n    char[] buffer = \"abc瀛愯䇹鍟艱𩬅\".toCharArray();\n    ReverseStringFilter.reverse(buffer, 3, 7);\n    assertEquals(\"abc𩬅艱鍟䇹愯瀛\", new String(buffer));\n    // supplementary at end - 1\n    buffer = \"abc瀛愯䇹鍟艱𩬅d\".toCharArray();\n    ReverseStringFilter.reverse(buffer, 3, 8);\n    assertEquals(\"abcd𩬅艱鍟䇹愯瀛\", new String(buffer));\n    // supplementary at start\n    buffer = \"abc𩬅瀛愯䇹鍟艱\".toCharArray();\n    ReverseStringFilter.reverse(buffer, 3, 7);\n    assertEquals(\"abc艱鍟䇹愯瀛𩬅\", new String(buffer));\n    // supplementary at start + 1\n    buffer = \"abcd𩬅瀛愯䇹鍟艱\".toCharArray();\n    ReverseStringFilter.reverse(buffer, 3, 8);\n    assertEquals(\"abc艱鍟䇹愯瀛𩬅d\", new String(buffer));\n    // supplementary medial\n    buffer = \"abc瀛愯𩬅def\".toCharArray();\n    ReverseStringFilter.reverse(buffer, 3, 7);\n    assertEquals(\"abcfed𩬅愯瀛\", new String(buffer));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"379db3ad24c4f0214f30a122265a6d6be003a99d","date":1407537768,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/reverse/TestReverseStringFilter#testReverseSupplementaryChar().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/reverse/TestReverseStringFilter#testReverseSupplementaryChar().mjava","sourceNew":"  public void testReverseSupplementaryChar() throws Exception {\n    // supplementary at end\n    char[] buffer = \"abc瀛愯䇹鍟艱𩬅\".toCharArray();\n    ReverseStringFilter.reverse(buffer, 3, 7);\n    assertEquals(\"abc𩬅艱鍟䇹愯瀛\", new String(buffer));\n    // supplementary at end - 1\n    buffer = \"abc瀛愯䇹鍟艱𩬅d\".toCharArray();\n    ReverseStringFilter.reverse(buffer, 3, 8);\n    assertEquals(\"abcd𩬅艱鍟䇹愯瀛\", new String(buffer));\n    // supplementary at start\n    buffer = \"abc𩬅瀛愯䇹鍟艱\".toCharArray();\n    ReverseStringFilter.reverse(buffer, 3, 7);\n    assertEquals(\"abc艱鍟䇹愯瀛𩬅\", new String(buffer));\n    // supplementary at start + 1\n    buffer = \"abcd𩬅瀛愯䇹鍟艱\".toCharArray();\n    ReverseStringFilter.reverse(buffer, 3, 8);\n    assertEquals(\"abc艱鍟䇹愯瀛𩬅d\", new String(buffer));\n    // supplementary medial\n    buffer = \"abc瀛愯𩬅def\".toCharArray();\n    ReverseStringFilter.reverse(buffer, 3, 7);\n    assertEquals(\"abcfed𩬅愯瀛\", new String(buffer));\n  }\n\n","sourceOld":"  public void testReverseSupplementaryChar() throws Exception {\n    // supplementary at end\n    char[] buffer = \"abc瀛愯䇹鍟艱𩬅\".toCharArray();\n    ReverseStringFilter.reverse(TEST_VERSION_CURRENT, buffer, 3, 7);\n    assertEquals(\"abc𩬅艱鍟䇹愯瀛\", new String(buffer));\n    // supplementary at end - 1\n    buffer = \"abc瀛愯䇹鍟艱𩬅d\".toCharArray();\n    ReverseStringFilter.reverse(TEST_VERSION_CURRENT, buffer, 3, 8);\n    assertEquals(\"abcd𩬅艱鍟䇹愯瀛\", new String(buffer));\n    // supplementary at start\n    buffer = \"abc𩬅瀛愯䇹鍟艱\".toCharArray();\n    ReverseStringFilter.reverse(TEST_VERSION_CURRENT, buffer, 3, 7);\n    assertEquals(\"abc艱鍟䇹愯瀛𩬅\", new String(buffer));\n    // supplementary at start + 1\n    buffer = \"abcd𩬅瀛愯䇹鍟艱\".toCharArray();\n    ReverseStringFilter.reverse(TEST_VERSION_CURRENT, buffer, 3, 8);\n    assertEquals(\"abc艱鍟䇹愯瀛𩬅d\", new String(buffer));\n    // supplementary medial\n    buffer = \"abc瀛愯𩬅def\".toCharArray();\n    ReverseStringFilter.reverse(TEST_VERSION_CURRENT, buffer, 3, 7);\n    assertEquals(\"abcfed𩬅愯瀛\", new String(buffer));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ff4227bb146f97aabae888091c19e48c88dbb0db":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"379db3ad24c4f0214f30a122265a6d6be003a99d":["5cdab62f058ea765dd33deb05b4f19b7d626c801"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5cdab62f058ea765dd33deb05b4f19b7d626c801":["ff4227bb146f97aabae888091c19e48c88dbb0db"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["379db3ad24c4f0214f30a122265a6d6be003a99d"]},"commit2Childs":{"ff4227bb146f97aabae888091c19e48c88dbb0db":["5cdab62f058ea765dd33deb05b4f19b7d626c801"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["ff4227bb146f97aabae888091c19e48c88dbb0db"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"379db3ad24c4f0214f30a122265a6d6be003a99d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5cdab62f058ea765dd33deb05b4f19b7d626c801":["379db3ad24c4f0214f30a122265a6d6be003a99d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}