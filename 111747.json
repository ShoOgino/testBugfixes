{"path":"solr/core/src/test/org/apache/solr/update/processor/FieldMutatingUpdateProcessorTest#testRegexReplace().mjava","commits":[{"id":"be9a5d1846ac0beb625ba68da060e16119d9f51e","date":1328820081,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/FieldMutatingUpdateProcessorTest#testRegexReplace().mjava","pathOld":"/dev/null","sourceNew":"  public void testRegexReplace() throws Exception {\n    SolrInputDocument d = null;\n    d = processAdd(\"regex-replace\", \n                   doc(f(\"id\", \"doc1\"),\n                       f(\"content\", \"This is         a text\\t with a lot\\n     of whitespace\"),\n                       f(\"title\", \"This\\ttitle     has a lot of    spaces\")));\n    \n    assertNotNull(d);\n    \n    assertEquals(\"ThisXisXaXtextXwithXaXlotXofXwhitespace\", \n                 d.getFieldValue(\"content\"));\n    assertEquals(\"ThisXtitleXhasXaXlotXofXspaces\", \n                 d.getFieldValue(\"title\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b8e651aca23d53b6305f5d82cdda52a4697284d0","date":1397071861,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/FieldMutatingUpdateProcessorTest#testRegexReplace().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/processor/FieldMutatingUpdateProcessorTest#testRegexReplace().mjava","sourceNew":"  public void testRegexReplace() throws Exception {\n    SolrInputDocument d = null;\n    d = processAdd(\"regex-replace\", \n                   doc(f(\"id\", \"doc1\"),\n                       f(\"content\", \"This is         a text\\t with a lot\\n     of whitespace\"),\n                       f(\"title\", \"This\\ttitle     has a lot of    spaces\")));\n    \n    assertNotNull(d);\n    \n    assertEquals(\"ThisXisXaXtextXwithXaXlotXofXwhitespace\", \n                 d.getFieldValue(\"content\"));\n    assertEquals(\"ThisXtitleXhasXaXlotXofXspaces\", \n                 d.getFieldValue(\"title\"));\n\n    // literalReplacement = true\n    d = processAdd(\"regex-replace-literal-true\",\n        doc(f(\"id\", \"doc2\"),\n            f(\"content\", \"Let's try this one\"),\n            f(\"title\", \"Let's try try this one\")));\n\n    assertNotNull(d);\n\n    assertEquals(\"Let's <$1> this one\",\n        d.getFieldValue(\"content\"));\n    assertEquals(\"Let's <$1> <$1> this one\",\n        d.getFieldValue(\"title\"));\n\n    // literalReplacement is not specified, defaults to true\n    d = processAdd(\"regex-replace-literal-default-true\",\n        doc(f(\"id\", \"doc3\"),\n            f(\"content\", \"Let's try this one\"),\n            f(\"title\", \"Let's try try this one\")));\n\n    assertNotNull(d);\n\n    assertEquals(\"Let's <$1> this one\",\n        d.getFieldValue(\"content\"));\n    assertEquals(\"Let's <$1> <$1> this one\",\n        d.getFieldValue(\"title\"));\n\n    // if user passes literalReplacement as a string param instead of boolean\n    d = processAdd(\"regex-replace-literal-str-true\",\n        doc(f(\"id\", \"doc4\"),\n            f(\"content\", \"Let's try this one\"),\n            f(\"title\", \"Let's try try this one\")));\n\n    assertNotNull(d);\n\n    assertEquals(\"Let's <$1> this one\",\n        d.getFieldValue(\"content\"));\n    assertEquals(\"Let's <$1> <$1> this one\",\n        d.getFieldValue(\"title\"));\n\n    // This is with literalReplacement = false\n    d = processAdd(\"regex-replace-literal-false\",\n        doc(f(\"id\", \"doc5\"),\n            f(\"content\", \"Let's try this one\"),\n            f(\"title\", \"Let's try try this one\")));\n\n    assertNotNull(d);\n\n    assertEquals(\"Let's <try> this one\",\n        d.getFieldValue(\"content\"));\n    assertEquals(\"Let's <try> <try> this one\",\n        d.getFieldValue(\"title\"));\n\n  }\n\n","sourceOld":"  public void testRegexReplace() throws Exception {\n    SolrInputDocument d = null;\n    d = processAdd(\"regex-replace\", \n                   doc(f(\"id\", \"doc1\"),\n                       f(\"content\", \"This is         a text\\t with a lot\\n     of whitespace\"),\n                       f(\"title\", \"This\\ttitle     has a lot of    spaces\")));\n    \n    assertNotNull(d);\n    \n    assertEquals(\"ThisXisXaXtextXwithXaXlotXofXwhitespace\", \n                 d.getFieldValue(\"content\"));\n    assertEquals(\"ThisXtitleXhasXaXlotXofXspaces\", \n                 d.getFieldValue(\"title\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"be9a5d1846ac0beb625ba68da060e16119d9f51e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b8e651aca23d53b6305f5d82cdda52a4697284d0":["be9a5d1846ac0beb625ba68da060e16119d9f51e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b8e651aca23d53b6305f5d82cdda52a4697284d0"]},"commit2Childs":{"be9a5d1846ac0beb625ba68da060e16119d9f51e":["b8e651aca23d53b6305f5d82cdda52a4697284d0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["be9a5d1846ac0beb625ba68da060e16119d9f51e"],"b8e651aca23d53b6305f5d82cdda52a4697284d0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}