{"path":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterUnicode#testRandomUnicodeStrings().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterUnicode#testRandomUnicodeStrings().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterUnicode#testRandomUnicodeStrings().mjava","sourceNew":"  // LUCENE-510\n  public void testRandomUnicodeStrings() throws Throwable {\n    char[] buffer = new char[20];\n    char[] expected = new char[20];\n\n    BytesRef utf8 = new BytesRef(20);\n    CharsRef utf16 = new CharsRef(20);\n\n    int num = atLeast(100000);\n    for (int iter = 0; iter < num; iter++) {\n      boolean hasIllegal = fillUnicode(buffer, expected, 0, 20);\n\n      UnicodeUtil.UTF16toUTF8(buffer, 0, 20, utf8);\n      if (!hasIllegal) {\n        byte[] b = new String(buffer, 0, 20).getBytes(\"UTF-8\");\n        assertEquals(b.length, utf8.length);\n        for(int i=0;i<b.length;i++)\n          assertEquals(b[i], utf8.bytes[i]);\n      }\n\n      UnicodeUtil.UTF8toUTF16(utf8.bytes, 0, utf8.length, utf16);\n      assertEquals(utf16.length, 20);\n      for(int i=0;i<20;i++)\n        assertEquals(expected[i], utf16.chars[i]);\n    }\n  }\n\n","sourceOld":"  // LUCENE-510\n  public void testRandomUnicodeStrings() throws Throwable {\n    char[] buffer = new char[20];\n    char[] expected = new char[20];\n\n    BytesRef utf8 = new BytesRef(20);\n    CharsRef utf16 = new CharsRef(20);\n\n    int num = atLeast(100000);\n    for (int iter = 0; iter < num; iter++) {\n      boolean hasIllegal = fillUnicode(buffer, expected, 0, 20);\n\n      UnicodeUtil.UTF16toUTF8(buffer, 0, 20, utf8);\n      if (!hasIllegal) {\n        byte[] b = new String(buffer, 0, 20).getBytes(\"UTF-8\");\n        assertEquals(b.length, utf8.length);\n        for(int i=0;i<b.length;i++)\n          assertEquals(b[i], utf8.bytes[i]);\n      }\n\n      UnicodeUtil.UTF8toUTF16(utf8.bytes, 0, utf8.length, utf16);\n      assertEquals(utf16.length, 20);\n      for(int i=0;i<20;i++)\n        assertEquals(expected[i], utf16.chars[i]);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7d89d7e4e5101347833eea558851bf4209218619","date":1396265641,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterUnicode#testRandomUnicodeStrings().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterUnicode#testRandomUnicodeStrings().mjava","sourceNew":"  // LUCENE-510\n  public void testRandomUnicodeStrings() throws Throwable {\n    char[] buffer = new char[20];\n    char[] expected = new char[20];\n\n    BytesRef utf8 = new BytesRef(20);\n    CharsRef utf16 = new CharsRef(20);\n\n    int num = atLeast(100000);\n    for (int iter = 0; iter < num; iter++) {\n      boolean hasIllegal = fillUnicode(buffer, expected, 0, 20);\n\n      UnicodeUtil.UTF16toUTF8(buffer, 0, 20, utf8);\n      if (!hasIllegal) {\n        byte[] b = new String(buffer, 0, 20).getBytes(StandardCharsets.UTF_8);\n        assertEquals(b.length, utf8.length);\n        for(int i=0;i<b.length;i++)\n          assertEquals(b[i], utf8.bytes[i]);\n      }\n\n      UnicodeUtil.UTF8toUTF16(utf8.bytes, 0, utf8.length, utf16);\n      assertEquals(utf16.length, 20);\n      for(int i=0;i<20;i++)\n        assertEquals(expected[i], utf16.chars[i]);\n    }\n  }\n\n","sourceOld":"  // LUCENE-510\n  public void testRandomUnicodeStrings() throws Throwable {\n    char[] buffer = new char[20];\n    char[] expected = new char[20];\n\n    BytesRef utf8 = new BytesRef(20);\n    CharsRef utf16 = new CharsRef(20);\n\n    int num = atLeast(100000);\n    for (int iter = 0; iter < num; iter++) {\n      boolean hasIllegal = fillUnicode(buffer, expected, 0, 20);\n\n      UnicodeUtil.UTF16toUTF8(buffer, 0, 20, utf8);\n      if (!hasIllegal) {\n        byte[] b = new String(buffer, 0, 20).getBytes(\"UTF-8\");\n        assertEquals(b.length, utf8.length);\n        for(int i=0;i<b.length;i++)\n          assertEquals(b[i], utf8.bytes[i]);\n      }\n\n      UnicodeUtil.UTF8toUTF16(utf8.bytes, 0, utf8.length, utf16);\n      assertEquals(utf16.length, 20);\n      for(int i=0;i<20;i++)\n        assertEquals(expected[i], utf16.chars[i]);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterUnicode#testRandomUnicodeStrings().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterUnicode#testRandomUnicodeStrings().mjava","sourceNew":"  // LUCENE-510\n  public void testRandomUnicodeStrings() throws Throwable {\n    char[] buffer = new char[20];\n    char[] expected = new char[20];\n\n    BytesRef utf8 = new BytesRef(20);\n    CharsRef utf16 = new CharsRef(20);\n\n    int num = atLeast(100000);\n    for (int iter = 0; iter < num; iter++) {\n      boolean hasIllegal = fillUnicode(buffer, expected, 0, 20);\n\n      UnicodeUtil.UTF16toUTF8(buffer, 0, 20, utf8);\n      if (!hasIllegal) {\n        byte[] b = new String(buffer, 0, 20).getBytes(StandardCharsets.UTF_8);\n        assertEquals(b.length, utf8.length);\n        for(int i=0;i<b.length;i++)\n          assertEquals(b[i], utf8.bytes[i]);\n      }\n\n      UnicodeUtil.UTF8toUTF16(utf8.bytes, 0, utf8.length, utf16);\n      assertEquals(utf16.length, 20);\n      for(int i=0;i<20;i++)\n        assertEquals(expected[i], utf16.chars[i]);\n    }\n  }\n\n","sourceOld":"  // LUCENE-510\n  public void testRandomUnicodeStrings() throws Throwable {\n    char[] buffer = new char[20];\n    char[] expected = new char[20];\n\n    BytesRef utf8 = new BytesRef(20);\n    CharsRef utf16 = new CharsRef(20);\n\n    int num = atLeast(100000);\n    for (int iter = 0; iter < num; iter++) {\n      boolean hasIllegal = fillUnicode(buffer, expected, 0, 20);\n\n      UnicodeUtil.UTF16toUTF8(buffer, 0, 20, utf8);\n      if (!hasIllegal) {\n        byte[] b = new String(buffer, 0, 20).getBytes(\"UTF-8\");\n        assertEquals(b.length, utf8.length);\n        for(int i=0;i<b.length;i++)\n          assertEquals(b[i], utf8.bytes[i]);\n      }\n\n      UnicodeUtil.UTF8toUTF16(utf8.bytes, 0, utf8.length, utf16);\n      assertEquals(utf16.length, 20);\n      for(int i=0;i<20;i++)\n        assertEquals(expected[i], utf16.chars[i]);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","date":1407854805,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterUnicode#testRandomUnicodeStrings().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterUnicode#testRandomUnicodeStrings().mjava","sourceNew":"  // LUCENE-510\n  public void testRandomUnicodeStrings() throws Throwable {\n    char[] buffer = new char[20];\n    char[] expected = new char[20];\n\n    CharsRefBuilder utf16 = new CharsRefBuilder();\n\n    int num = atLeast(100000);\n    for (int iter = 0; iter < num; iter++) {\n      boolean hasIllegal = fillUnicode(buffer, expected, 0, 20);\n\n      BytesRef utf8 = new BytesRef(CharBuffer.wrap(buffer, 0, 20));\n      if (!hasIllegal) {\n        byte[] b = new String(buffer, 0, 20).getBytes(StandardCharsets.UTF_8);\n        assertEquals(b.length, utf8.length);\n        for(int i=0;i<b.length;i++)\n          assertEquals(b[i], utf8.bytes[i]);\n      }\n\n      utf16.copyUTF8Bytes(utf8.bytes, 0, utf8.length);\n      assertEquals(utf16.length(), 20);\n      for(int i=0;i<20;i++)\n        assertEquals(expected[i], utf16.charAt(i));\n    }\n  }\n\n","sourceOld":"  // LUCENE-510\n  public void testRandomUnicodeStrings() throws Throwable {\n    char[] buffer = new char[20];\n    char[] expected = new char[20];\n\n    BytesRef utf8 = new BytesRef(20);\n    CharsRef utf16 = new CharsRef(20);\n\n    int num = atLeast(100000);\n    for (int iter = 0; iter < num; iter++) {\n      boolean hasIllegal = fillUnicode(buffer, expected, 0, 20);\n\n      UnicodeUtil.UTF16toUTF8(buffer, 0, 20, utf8);\n      if (!hasIllegal) {\n        byte[] b = new String(buffer, 0, 20).getBytes(StandardCharsets.UTF_8);\n        assertEquals(b.length, utf8.length);\n        for(int i=0;i<b.length;i++)\n          assertEquals(b[i], utf8.bytes[i]);\n      }\n\n      UnicodeUtil.UTF8toUTF16(utf8.bytes, 0, utf8.length, utf16);\n      assertEquals(utf16.length, 20);\n      for(int i=0;i<20;i++)\n        assertEquals(expected[i], utf16.chars[i]);\n    }\n  }\n\n","bugFix":["dbb7b6f10bff9eedd5c9bc6cf9222ffbb2df74d4","955c32f886db6f6356c9fcdea6b1f1cb4effda24","a1b3a24d5d9b47345473ff564f5cc127a7b526b4"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4208ed8e426ae5f75a41d8b4ae53f4587e413061","date":1580475454,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterUnicode#testRandomUnicodeStrings().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterUnicode#testRandomUnicodeStrings().mjava","sourceNew":"  // LUCENE-510\n  public void testRandomUnicodeStrings() throws Throwable {\n    char[] buffer = new char[20];\n    char[] expected = new char[20];\n\n    CharsRefBuilder utf16 = new CharsRefBuilder();\n\n    int num = atLeast(10000);\n    for (int iter = 0; iter < num; iter++) {\n      boolean hasIllegal = fillUnicode(buffer, expected, 0, 20);\n\n      BytesRef utf8 = new BytesRef(CharBuffer.wrap(buffer, 0, 20));\n      if (!hasIllegal) {\n        byte[] b = new String(buffer, 0, 20).getBytes(StandardCharsets.UTF_8);\n        assertEquals(b.length, utf8.length);\n        for(int i=0;i<b.length;i++)\n          assertEquals(b[i], utf8.bytes[i]);\n      }\n\n      utf16.copyUTF8Bytes(utf8.bytes, 0, utf8.length);\n      assertEquals(utf16.length(), 20);\n      for(int i=0;i<20;i++)\n        assertEquals(expected[i], utf16.charAt(i));\n    }\n  }\n\n","sourceOld":"  // LUCENE-510\n  public void testRandomUnicodeStrings() throws Throwable {\n    char[] buffer = new char[20];\n    char[] expected = new char[20];\n\n    CharsRefBuilder utf16 = new CharsRefBuilder();\n\n    int num = atLeast(100000);\n    for (int iter = 0; iter < num; iter++) {\n      boolean hasIllegal = fillUnicode(buffer, expected, 0, 20);\n\n      BytesRef utf8 = new BytesRef(CharBuffer.wrap(buffer, 0, 20));\n      if (!hasIllegal) {\n        byte[] b = new String(buffer, 0, 20).getBytes(StandardCharsets.UTF_8);\n        assertEquals(b.length, utf8.length);\n        for(int i=0;i<b.length;i++)\n          assertEquals(b[i], utf8.bytes[i]);\n      }\n\n      utf16.copyUTF8Bytes(utf8.bytes, 0, utf8.length);\n      assertEquals(utf16.length(), 20);\n      for(int i=0;i<20;i++)\n        assertEquals(expected[i], utf16.charAt(i));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5eb2511ababf862ea11e10761c70ee560cd84510":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","7d89d7e4e5101347833eea558851bf4209218619"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4208ed8e426ae5f75a41d8b4ae53f4587e413061":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["7d89d7e4e5101347833eea558851bf4209218619"],"7d89d7e4e5101347833eea558851bf4209218619":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4208ed8e426ae5f75a41d8b4ae53f4587e413061"]},"commit2Childs":{"5eb2511ababf862ea11e10761c70ee560cd84510":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["5eb2511ababf862ea11e10761c70ee560cd84510","7d89d7e4e5101347833eea558851bf4209218619"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4208ed8e426ae5f75a41d8b4ae53f4587e413061":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["4208ed8e426ae5f75a41d8b4ae53f4587e413061"],"7d89d7e4e5101347833eea558851bf4209218619":["5eb2511ababf862ea11e10761c70ee560cd84510","7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}