{"path":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggesterTest#testBasicContext().mjava","commits":[{"id":"58d0345a28bb6b4be59c38e6a77e2cc0e615ee4b","date":1395588343,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggesterTest#testBasicContext().mjava","pathOld":"/dev/null","sourceNew":"  // LUCENE-5528\n  public void testBasicContext() throws Exception {\n    Input keys[] = new Input[] {\n      new Input(\"lend me your ear\", 8, new BytesRef(\"foobar\"), asSet(\"foo\", \"bar\")),\n      new Input(\"a penny saved is a penny earned\", 10, new BytesRef(\"foobaz\"), asSet(\"foo\", \"baz\"))\n    };\n\n    File tempDir = TestUtil.getTempDir(\"analyzingInfixContext\");\n\n    for(int iter=0;iter<2;iter++) {\n      AnalyzingInfixSuggester suggester;\n      Analyzer a = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n      if (iter == 0) {\n        suggester = new AnalyzingInfixSuggester(TEST_VERSION_CURRENT, newFSDirectory(tempDir), a, a, 3);\n        suggester.build(new InputArrayIterator(keys));\n      } else {\n        // Test again, after close/reopen:\n        suggester = new AnalyzingInfixSuggester(TEST_VERSION_CURRENT, newFSDirectory(tempDir), a, a, 3);\n      }\n\n      // No context provided, all results returned\n      List<LookupResult> results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), 10, true, true);\n      assertEquals(2, results.size());\n      LookupResult result = results.get(0);\n      assertEquals(\"a penny saved is a penny <b>ear</b>ned\", result.key);\n      assertEquals(10, result.value);\n      assertEquals(new BytesRef(\"foobaz\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"baz\")));\n\n      result = results.get(1);\n      assertEquals(\"lend me your <b>ear</b>\", result.key);\n      assertEquals(8, result.value);\n      assertEquals(new BytesRef(\"foobar\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"bar\")));\n\n      // Both suggestions have \"foo\" context:\n      results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), asSet(\"foo\"), 10, true, true);\n      assertEquals(2, results.size());\n\n      result = results.get(0);\n      assertEquals(\"a penny saved is a penny <b>ear</b>ned\", result.key);\n      assertEquals(10, result.value);\n      assertEquals(new BytesRef(\"foobaz\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"baz\")));\n\n      result = results.get(1);\n      assertEquals(\"lend me your <b>ear</b>\", result.key);\n      assertEquals(8, result.value);\n      assertEquals(new BytesRef(\"foobar\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"bar\")));\n\n      // Only one has \"bar\" context:\n      results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), asSet(\"bar\"), 10, true, true);\n      assertEquals(1, results.size());\n\n      result = results.get(0);\n      assertEquals(\"lend me your <b>ear</b>\", result.key);\n      assertEquals(8, result.value);\n      assertEquals(new BytesRef(\"foobar\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"bar\")));\n\n      // Only one has \"baz\" context:\n      results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), asSet(\"baz\"), 10, true, true);\n      assertEquals(1, results.size());\n\n      result = results.get(0);\n      assertEquals(\"a penny saved is a penny <b>ear</b>ned\", result.key);\n      assertEquals(10, result.value);\n      assertEquals(new BytesRef(\"foobaz\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"baz\")));\n\n      // Both have foo or bar:\n      results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), asSet(\"foo\", \"bar\"), 10, true, true);\n      assertEquals(2, results.size());\n\n      result = results.get(0);\n      assertEquals(\"a penny saved is a penny <b>ear</b>ned\", result.key);\n      assertEquals(10, result.value);\n      assertEquals(new BytesRef(\"foobaz\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"baz\")));\n\n      result = results.get(1);\n      assertEquals(\"lend me your <b>ear</b>\", result.key);\n      assertEquals(8, result.value);\n      assertEquals(new BytesRef(\"foobar\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"bar\")));\n\n      suggester.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["0977217be8980b17c612feb7ea3d1556ccf4aeed","ec083aa3f3ecd55f91c47009d49e45553f99bd77"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d0d579490a72f2e6297eaa648940611234c57cf1","date":1395917140,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggesterTest#testBasicContext().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggesterTest#testBasicContext().mjava","sourceNew":"  // LUCENE-5528\n  public void testBasicContext() throws Exception {\n    Input keys[] = new Input[] {\n      new Input(\"lend me your ear\", 8, new BytesRef(\"foobar\"), asSet(\"foo\", \"bar\")),\n      new Input(\"a penny saved is a penny earned\", 10, new BytesRef(\"foobaz\"), asSet(\"foo\", \"baz\"))\n    };\n\n    File tempDir = TestUtil.createTempDir(\"analyzingInfixContext\");\n\n    for(int iter=0;iter<2;iter++) {\n      AnalyzingInfixSuggester suggester;\n      Analyzer a = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n      if (iter == 0) {\n        suggester = new AnalyzingInfixSuggester(TEST_VERSION_CURRENT, newFSDirectory(tempDir), a, a, 3);\n        suggester.build(new InputArrayIterator(keys));\n      } else {\n        // Test again, after close/reopen:\n        suggester = new AnalyzingInfixSuggester(TEST_VERSION_CURRENT, newFSDirectory(tempDir), a, a, 3);\n      }\n\n      // No context provided, all results returned\n      List<LookupResult> results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), 10, true, true);\n      assertEquals(2, results.size());\n      LookupResult result = results.get(0);\n      assertEquals(\"a penny saved is a penny <b>ear</b>ned\", result.key);\n      assertEquals(10, result.value);\n      assertEquals(new BytesRef(\"foobaz\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"baz\")));\n\n      result = results.get(1);\n      assertEquals(\"lend me your <b>ear</b>\", result.key);\n      assertEquals(8, result.value);\n      assertEquals(new BytesRef(\"foobar\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"bar\")));\n\n      // Both suggestions have \"foo\" context:\n      results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), asSet(\"foo\"), 10, true, true);\n      assertEquals(2, results.size());\n\n      result = results.get(0);\n      assertEquals(\"a penny saved is a penny <b>ear</b>ned\", result.key);\n      assertEquals(10, result.value);\n      assertEquals(new BytesRef(\"foobaz\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"baz\")));\n\n      result = results.get(1);\n      assertEquals(\"lend me your <b>ear</b>\", result.key);\n      assertEquals(8, result.value);\n      assertEquals(new BytesRef(\"foobar\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"bar\")));\n\n      // Only one has \"bar\" context:\n      results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), asSet(\"bar\"), 10, true, true);\n      assertEquals(1, results.size());\n\n      result = results.get(0);\n      assertEquals(\"lend me your <b>ear</b>\", result.key);\n      assertEquals(8, result.value);\n      assertEquals(new BytesRef(\"foobar\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"bar\")));\n\n      // Only one has \"baz\" context:\n      results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), asSet(\"baz\"), 10, true, true);\n      assertEquals(1, results.size());\n\n      result = results.get(0);\n      assertEquals(\"a penny saved is a penny <b>ear</b>ned\", result.key);\n      assertEquals(10, result.value);\n      assertEquals(new BytesRef(\"foobaz\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"baz\")));\n\n      // Both have foo or bar:\n      results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), asSet(\"foo\", \"bar\"), 10, true, true);\n      assertEquals(2, results.size());\n\n      result = results.get(0);\n      assertEquals(\"a penny saved is a penny <b>ear</b>ned\", result.key);\n      assertEquals(10, result.value);\n      assertEquals(new BytesRef(\"foobaz\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"baz\")));\n\n      result = results.get(1);\n      assertEquals(\"lend me your <b>ear</b>\", result.key);\n      assertEquals(8, result.value);\n      assertEquals(new BytesRef(\"foobar\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"bar\")));\n\n      suggester.close();\n    }\n  }\n\n","sourceOld":"  // LUCENE-5528\n  public void testBasicContext() throws Exception {\n    Input keys[] = new Input[] {\n      new Input(\"lend me your ear\", 8, new BytesRef(\"foobar\"), asSet(\"foo\", \"bar\")),\n      new Input(\"a penny saved is a penny earned\", 10, new BytesRef(\"foobaz\"), asSet(\"foo\", \"baz\"))\n    };\n\n    File tempDir = TestUtil.getTempDir(\"analyzingInfixContext\");\n\n    for(int iter=0;iter<2;iter++) {\n      AnalyzingInfixSuggester suggester;\n      Analyzer a = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n      if (iter == 0) {\n        suggester = new AnalyzingInfixSuggester(TEST_VERSION_CURRENT, newFSDirectory(tempDir), a, a, 3);\n        suggester.build(new InputArrayIterator(keys));\n      } else {\n        // Test again, after close/reopen:\n        suggester = new AnalyzingInfixSuggester(TEST_VERSION_CURRENT, newFSDirectory(tempDir), a, a, 3);\n      }\n\n      // No context provided, all results returned\n      List<LookupResult> results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), 10, true, true);\n      assertEquals(2, results.size());\n      LookupResult result = results.get(0);\n      assertEquals(\"a penny saved is a penny <b>ear</b>ned\", result.key);\n      assertEquals(10, result.value);\n      assertEquals(new BytesRef(\"foobaz\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"baz\")));\n\n      result = results.get(1);\n      assertEquals(\"lend me your <b>ear</b>\", result.key);\n      assertEquals(8, result.value);\n      assertEquals(new BytesRef(\"foobar\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"bar\")));\n\n      // Both suggestions have \"foo\" context:\n      results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), asSet(\"foo\"), 10, true, true);\n      assertEquals(2, results.size());\n\n      result = results.get(0);\n      assertEquals(\"a penny saved is a penny <b>ear</b>ned\", result.key);\n      assertEquals(10, result.value);\n      assertEquals(new BytesRef(\"foobaz\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"baz\")));\n\n      result = results.get(1);\n      assertEquals(\"lend me your <b>ear</b>\", result.key);\n      assertEquals(8, result.value);\n      assertEquals(new BytesRef(\"foobar\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"bar\")));\n\n      // Only one has \"bar\" context:\n      results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), asSet(\"bar\"), 10, true, true);\n      assertEquals(1, results.size());\n\n      result = results.get(0);\n      assertEquals(\"lend me your <b>ear</b>\", result.key);\n      assertEquals(8, result.value);\n      assertEquals(new BytesRef(\"foobar\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"bar\")));\n\n      // Only one has \"baz\" context:\n      results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), asSet(\"baz\"), 10, true, true);\n      assertEquals(1, results.size());\n\n      result = results.get(0);\n      assertEquals(\"a penny saved is a penny <b>ear</b>ned\", result.key);\n      assertEquals(10, result.value);\n      assertEquals(new BytesRef(\"foobaz\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"baz\")));\n\n      // Both have foo or bar:\n      results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), asSet(\"foo\", \"bar\"), 10, true, true);\n      assertEquals(2, results.size());\n\n      result = results.get(0);\n      assertEquals(\"a penny saved is a penny <b>ear</b>ned\", result.key);\n      assertEquals(10, result.value);\n      assertEquals(new BytesRef(\"foobaz\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"baz\")));\n\n      result = results.get(1);\n      assertEquals(\"lend me your <b>ear</b>\", result.key);\n      assertEquals(8, result.value);\n      assertEquals(new BytesRef(\"foobar\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"bar\")));\n\n      suggester.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c","date":1396633078,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggesterTest#testBasicContext().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggesterTest#testBasicContext().mjava","sourceNew":"  // LUCENE-5528\n  public void testBasicContext() throws Exception {\n    Input keys[] = new Input[] {\n      new Input(\"lend me your ear\", 8, new BytesRef(\"foobar\"), asSet(\"foo\", \"bar\")),\n      new Input(\"a penny saved is a penny earned\", 10, new BytesRef(\"foobaz\"), asSet(\"foo\", \"baz\"))\n    };\n\n    File tempDir = createTempDir(\"analyzingInfixContext\");\n\n    for(int iter=0;iter<2;iter++) {\n      AnalyzingInfixSuggester suggester;\n      Analyzer a = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n      if (iter == 0) {\n        suggester = new AnalyzingInfixSuggester(TEST_VERSION_CURRENT, newFSDirectory(tempDir), a, a, 3);\n        suggester.build(new InputArrayIterator(keys));\n      } else {\n        // Test again, after close/reopen:\n        suggester = new AnalyzingInfixSuggester(TEST_VERSION_CURRENT, newFSDirectory(tempDir), a, a, 3);\n      }\n\n      // No context provided, all results returned\n      List<LookupResult> results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), 10, true, true);\n      assertEquals(2, results.size());\n      LookupResult result = results.get(0);\n      assertEquals(\"a penny saved is a penny <b>ear</b>ned\", result.key);\n      assertEquals(10, result.value);\n      assertEquals(new BytesRef(\"foobaz\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"baz\")));\n\n      result = results.get(1);\n      assertEquals(\"lend me your <b>ear</b>\", result.key);\n      assertEquals(8, result.value);\n      assertEquals(new BytesRef(\"foobar\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"bar\")));\n\n      // Both suggestions have \"foo\" context:\n      results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), asSet(\"foo\"), 10, true, true);\n      assertEquals(2, results.size());\n\n      result = results.get(0);\n      assertEquals(\"a penny saved is a penny <b>ear</b>ned\", result.key);\n      assertEquals(10, result.value);\n      assertEquals(new BytesRef(\"foobaz\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"baz\")));\n\n      result = results.get(1);\n      assertEquals(\"lend me your <b>ear</b>\", result.key);\n      assertEquals(8, result.value);\n      assertEquals(new BytesRef(\"foobar\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"bar\")));\n\n      // Only one has \"bar\" context:\n      results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), asSet(\"bar\"), 10, true, true);\n      assertEquals(1, results.size());\n\n      result = results.get(0);\n      assertEquals(\"lend me your <b>ear</b>\", result.key);\n      assertEquals(8, result.value);\n      assertEquals(new BytesRef(\"foobar\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"bar\")));\n\n      // Only one has \"baz\" context:\n      results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), asSet(\"baz\"), 10, true, true);\n      assertEquals(1, results.size());\n\n      result = results.get(0);\n      assertEquals(\"a penny saved is a penny <b>ear</b>ned\", result.key);\n      assertEquals(10, result.value);\n      assertEquals(new BytesRef(\"foobaz\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"baz\")));\n\n      // Both have foo or bar:\n      results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), asSet(\"foo\", \"bar\"), 10, true, true);\n      assertEquals(2, results.size());\n\n      result = results.get(0);\n      assertEquals(\"a penny saved is a penny <b>ear</b>ned\", result.key);\n      assertEquals(10, result.value);\n      assertEquals(new BytesRef(\"foobaz\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"baz\")));\n\n      result = results.get(1);\n      assertEquals(\"lend me your <b>ear</b>\", result.key);\n      assertEquals(8, result.value);\n      assertEquals(new BytesRef(\"foobar\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"bar\")));\n\n      suggester.close();\n    }\n  }\n\n","sourceOld":"  // LUCENE-5528\n  public void testBasicContext() throws Exception {\n    Input keys[] = new Input[] {\n      new Input(\"lend me your ear\", 8, new BytesRef(\"foobar\"), asSet(\"foo\", \"bar\")),\n      new Input(\"a penny saved is a penny earned\", 10, new BytesRef(\"foobaz\"), asSet(\"foo\", \"baz\"))\n    };\n\n    File tempDir = TestUtil.createTempDir(\"analyzingInfixContext\");\n\n    for(int iter=0;iter<2;iter++) {\n      AnalyzingInfixSuggester suggester;\n      Analyzer a = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n      if (iter == 0) {\n        suggester = new AnalyzingInfixSuggester(TEST_VERSION_CURRENT, newFSDirectory(tempDir), a, a, 3);\n        suggester.build(new InputArrayIterator(keys));\n      } else {\n        // Test again, after close/reopen:\n        suggester = new AnalyzingInfixSuggester(TEST_VERSION_CURRENT, newFSDirectory(tempDir), a, a, 3);\n      }\n\n      // No context provided, all results returned\n      List<LookupResult> results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), 10, true, true);\n      assertEquals(2, results.size());\n      LookupResult result = results.get(0);\n      assertEquals(\"a penny saved is a penny <b>ear</b>ned\", result.key);\n      assertEquals(10, result.value);\n      assertEquals(new BytesRef(\"foobaz\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"baz\")));\n\n      result = results.get(1);\n      assertEquals(\"lend me your <b>ear</b>\", result.key);\n      assertEquals(8, result.value);\n      assertEquals(new BytesRef(\"foobar\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"bar\")));\n\n      // Both suggestions have \"foo\" context:\n      results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), asSet(\"foo\"), 10, true, true);\n      assertEquals(2, results.size());\n\n      result = results.get(0);\n      assertEquals(\"a penny saved is a penny <b>ear</b>ned\", result.key);\n      assertEquals(10, result.value);\n      assertEquals(new BytesRef(\"foobaz\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"baz\")));\n\n      result = results.get(1);\n      assertEquals(\"lend me your <b>ear</b>\", result.key);\n      assertEquals(8, result.value);\n      assertEquals(new BytesRef(\"foobar\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"bar\")));\n\n      // Only one has \"bar\" context:\n      results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), asSet(\"bar\"), 10, true, true);\n      assertEquals(1, results.size());\n\n      result = results.get(0);\n      assertEquals(\"lend me your <b>ear</b>\", result.key);\n      assertEquals(8, result.value);\n      assertEquals(new BytesRef(\"foobar\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"bar\")));\n\n      // Only one has \"baz\" context:\n      results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), asSet(\"baz\"), 10, true, true);\n      assertEquals(1, results.size());\n\n      result = results.get(0);\n      assertEquals(\"a penny saved is a penny <b>ear</b>ned\", result.key);\n      assertEquals(10, result.value);\n      assertEquals(new BytesRef(\"foobaz\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"baz\")));\n\n      // Both have foo or bar:\n      results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), asSet(\"foo\", \"bar\"), 10, true, true);\n      assertEquals(2, results.size());\n\n      result = results.get(0);\n      assertEquals(\"a penny saved is a penny <b>ear</b>ned\", result.key);\n      assertEquals(10, result.value);\n      assertEquals(new BytesRef(\"foobaz\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"baz\")));\n\n      result = results.get(1);\n      assertEquals(\"lend me your <b>ear</b>\", result.key);\n      assertEquals(8, result.value);\n      assertEquals(new BytesRef(\"foobar\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"bar\")));\n\n      suggester.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2a0f5bb79c600763ffe7b8141df59a3169d31e48","date":1396689440,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggesterTest#testBasicContext().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggesterTest#testBasicContext().mjava","sourceNew":"  // LUCENE-5528\n  public void testBasicContext() throws Exception {\n    Input keys[] = new Input[] {\n      new Input(\"lend me your ear\", 8, new BytesRef(\"foobar\"), asSet(\"foo\", \"bar\")),\n      new Input(\"a penny saved is a penny earned\", 10, new BytesRef(\"foobaz\"), asSet(\"foo\", \"baz\"))\n    };\n\n    File tempDir = createTempDir(\"analyzingInfixContext\");\n\n    for(int iter=0;iter<2;iter++) {\n      AnalyzingInfixSuggester suggester;\n      Analyzer a = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n      if (iter == 0) {\n        suggester = new AnalyzingInfixSuggester(TEST_VERSION_CURRENT, newFSDirectory(tempDir), a, a, 3);\n        suggester.build(new InputArrayIterator(keys));\n      } else {\n        // Test again, after close/reopen:\n        suggester = new AnalyzingInfixSuggester(TEST_VERSION_CURRENT, newFSDirectory(tempDir), a, a, 3);\n      }\n\n      // No context provided, all results returned\n      List<LookupResult> results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), 10, true, true);\n      assertEquals(2, results.size());\n      LookupResult result = results.get(0);\n      assertEquals(\"a penny saved is a penny <b>ear</b>ned\", result.key);\n      assertEquals(10, result.value);\n      assertEquals(new BytesRef(\"foobaz\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"baz\")));\n\n      result = results.get(1);\n      assertEquals(\"lend me your <b>ear</b>\", result.key);\n      assertEquals(8, result.value);\n      assertEquals(new BytesRef(\"foobar\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"bar\")));\n\n      // Both suggestions have \"foo\" context:\n      results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), asSet(\"foo\"), 10, true, true);\n      assertEquals(2, results.size());\n\n      result = results.get(0);\n      assertEquals(\"a penny saved is a penny <b>ear</b>ned\", result.key);\n      assertEquals(10, result.value);\n      assertEquals(new BytesRef(\"foobaz\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"baz\")));\n\n      result = results.get(1);\n      assertEquals(\"lend me your <b>ear</b>\", result.key);\n      assertEquals(8, result.value);\n      assertEquals(new BytesRef(\"foobar\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"bar\")));\n\n      // Only one has \"bar\" context:\n      results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), asSet(\"bar\"), 10, true, true);\n      assertEquals(1, results.size());\n\n      result = results.get(0);\n      assertEquals(\"lend me your <b>ear</b>\", result.key);\n      assertEquals(8, result.value);\n      assertEquals(new BytesRef(\"foobar\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"bar\")));\n\n      // Only one has \"baz\" context:\n      results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), asSet(\"baz\"), 10, true, true);\n      assertEquals(1, results.size());\n\n      result = results.get(0);\n      assertEquals(\"a penny saved is a penny <b>ear</b>ned\", result.key);\n      assertEquals(10, result.value);\n      assertEquals(new BytesRef(\"foobaz\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"baz\")));\n\n      // Both have foo or bar:\n      results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), asSet(\"foo\", \"bar\"), 10, true, true);\n      assertEquals(2, results.size());\n\n      result = results.get(0);\n      assertEquals(\"a penny saved is a penny <b>ear</b>ned\", result.key);\n      assertEquals(10, result.value);\n      assertEquals(new BytesRef(\"foobaz\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"baz\")));\n\n      result = results.get(1);\n      assertEquals(\"lend me your <b>ear</b>\", result.key);\n      assertEquals(8, result.value);\n      assertEquals(new BytesRef(\"foobar\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"bar\")));\n\n      suggester.close();\n    }\n  }\n\n","sourceOld":"  // LUCENE-5528\n  public void testBasicContext() throws Exception {\n    Input keys[] = new Input[] {\n      new Input(\"lend me your ear\", 8, new BytesRef(\"foobar\"), asSet(\"foo\", \"bar\")),\n      new Input(\"a penny saved is a penny earned\", 10, new BytesRef(\"foobaz\"), asSet(\"foo\", \"baz\"))\n    };\n\n    File tempDir = TestUtil.getTempDir(\"analyzingInfixContext\");\n\n    for(int iter=0;iter<2;iter++) {\n      AnalyzingInfixSuggester suggester;\n      Analyzer a = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n      if (iter == 0) {\n        suggester = new AnalyzingInfixSuggester(TEST_VERSION_CURRENT, newFSDirectory(tempDir), a, a, 3);\n        suggester.build(new InputArrayIterator(keys));\n      } else {\n        // Test again, after close/reopen:\n        suggester = new AnalyzingInfixSuggester(TEST_VERSION_CURRENT, newFSDirectory(tempDir), a, a, 3);\n      }\n\n      // No context provided, all results returned\n      List<LookupResult> results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), 10, true, true);\n      assertEquals(2, results.size());\n      LookupResult result = results.get(0);\n      assertEquals(\"a penny saved is a penny <b>ear</b>ned\", result.key);\n      assertEquals(10, result.value);\n      assertEquals(new BytesRef(\"foobaz\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"baz\")));\n\n      result = results.get(1);\n      assertEquals(\"lend me your <b>ear</b>\", result.key);\n      assertEquals(8, result.value);\n      assertEquals(new BytesRef(\"foobar\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"bar\")));\n\n      // Both suggestions have \"foo\" context:\n      results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), asSet(\"foo\"), 10, true, true);\n      assertEquals(2, results.size());\n\n      result = results.get(0);\n      assertEquals(\"a penny saved is a penny <b>ear</b>ned\", result.key);\n      assertEquals(10, result.value);\n      assertEquals(new BytesRef(\"foobaz\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"baz\")));\n\n      result = results.get(1);\n      assertEquals(\"lend me your <b>ear</b>\", result.key);\n      assertEquals(8, result.value);\n      assertEquals(new BytesRef(\"foobar\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"bar\")));\n\n      // Only one has \"bar\" context:\n      results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), asSet(\"bar\"), 10, true, true);\n      assertEquals(1, results.size());\n\n      result = results.get(0);\n      assertEquals(\"lend me your <b>ear</b>\", result.key);\n      assertEquals(8, result.value);\n      assertEquals(new BytesRef(\"foobar\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"bar\")));\n\n      // Only one has \"baz\" context:\n      results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), asSet(\"baz\"), 10, true, true);\n      assertEquals(1, results.size());\n\n      result = results.get(0);\n      assertEquals(\"a penny saved is a penny <b>ear</b>ned\", result.key);\n      assertEquals(10, result.value);\n      assertEquals(new BytesRef(\"foobaz\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"baz\")));\n\n      // Both have foo or bar:\n      results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), asSet(\"foo\", \"bar\"), 10, true, true);\n      assertEquals(2, results.size());\n\n      result = results.get(0);\n      assertEquals(\"a penny saved is a penny <b>ear</b>ned\", result.key);\n      assertEquals(10, result.value);\n      assertEquals(new BytesRef(\"foobaz\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"baz\")));\n\n      result = results.get(1);\n      assertEquals(\"lend me your <b>ear</b>\", result.key);\n      assertEquals(8, result.value);\n      assertEquals(new BytesRef(\"foobar\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"bar\")));\n\n      suggester.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6549d5ea6b7b25525309b981de3ec92b4dff99d1","date":1408666035,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggesterTest#testBasicContext().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggesterTest#testBasicContext().mjava","sourceNew":"  // LUCENE-5528\n  public void testBasicContext() throws Exception {\n    Input keys[] = new Input[] {\n      new Input(\"lend me your ear\", 8, new BytesRef(\"foobar\"), asSet(\"foo\", \"bar\")),\n      new Input(\"a penny saved is a penny earned\", 10, new BytesRef(\"foobaz\"), asSet(\"foo\", \"baz\"))\n    };\n\n    File tempDir = createTempDir(\"analyzingInfixContext\");\n\n    for(int iter=0;iter<2;iter++) {\n      AnalyzingInfixSuggester suggester;\n      Analyzer a = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n      if (iter == 0) {\n        suggester = new AnalyzingInfixSuggester(TEST_VERSION_CURRENT, newFSDirectory(tempDir), a, a, 3, false);\n        suggester.build(new InputArrayIterator(keys));\n      } else {\n        // Test again, after close/reopen:\n        suggester = new AnalyzingInfixSuggester(TEST_VERSION_CURRENT, newFSDirectory(tempDir), a, a, 3, false);\n      }\n\n      // No context provided, all results returned\n      List<LookupResult> results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), 10, true, true);\n      assertEquals(2, results.size());\n      LookupResult result = results.get(0);\n      assertEquals(\"a penny saved is a penny <b>ear</b>ned\", result.key);\n      assertEquals(10, result.value);\n      assertEquals(new BytesRef(\"foobaz\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"baz\")));\n\n      result = results.get(1);\n      assertEquals(\"lend me your <b>ear</b>\", result.key);\n      assertEquals(8, result.value);\n      assertEquals(new BytesRef(\"foobar\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"bar\")));\n\n      // Both suggestions have \"foo\" context:\n      results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), asSet(\"foo\"), 10, true, true);\n      assertEquals(2, results.size());\n\n      result = results.get(0);\n      assertEquals(\"a penny saved is a penny <b>ear</b>ned\", result.key);\n      assertEquals(10, result.value);\n      assertEquals(new BytesRef(\"foobaz\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"baz\")));\n\n      result = results.get(1);\n      assertEquals(\"lend me your <b>ear</b>\", result.key);\n      assertEquals(8, result.value);\n      assertEquals(new BytesRef(\"foobar\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"bar\")));\n\n      // Only one has \"bar\" context:\n      results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), asSet(\"bar\"), 10, true, true);\n      assertEquals(1, results.size());\n\n      result = results.get(0);\n      assertEquals(\"lend me your <b>ear</b>\", result.key);\n      assertEquals(8, result.value);\n      assertEquals(new BytesRef(\"foobar\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"bar\")));\n\n      // Only one has \"baz\" context:\n      results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), asSet(\"baz\"), 10, true, true);\n      assertEquals(1, results.size());\n\n      result = results.get(0);\n      assertEquals(\"a penny saved is a penny <b>ear</b>ned\", result.key);\n      assertEquals(10, result.value);\n      assertEquals(new BytesRef(\"foobaz\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"baz\")));\n\n      // Both have foo or bar:\n      results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), asSet(\"foo\", \"bar\"), 10, true, true);\n      assertEquals(2, results.size());\n\n      result = results.get(0);\n      assertEquals(\"a penny saved is a penny <b>ear</b>ned\", result.key);\n      assertEquals(10, result.value);\n      assertEquals(new BytesRef(\"foobaz\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"baz\")));\n\n      result = results.get(1);\n      assertEquals(\"lend me your <b>ear</b>\", result.key);\n      assertEquals(8, result.value);\n      assertEquals(new BytesRef(\"foobar\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"bar\")));\n\n      suggester.close();\n    }\n  }\n\n","sourceOld":"  // LUCENE-5528\n  public void testBasicContext() throws Exception {\n    Input keys[] = new Input[] {\n      new Input(\"lend me your ear\", 8, new BytesRef(\"foobar\"), asSet(\"foo\", \"bar\")),\n      new Input(\"a penny saved is a penny earned\", 10, new BytesRef(\"foobaz\"), asSet(\"foo\", \"baz\"))\n    };\n\n    File tempDir = createTempDir(\"analyzingInfixContext\");\n\n    for(int iter=0;iter<2;iter++) {\n      AnalyzingInfixSuggester suggester;\n      Analyzer a = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n      if (iter == 0) {\n        suggester = new AnalyzingInfixSuggester(TEST_VERSION_CURRENT, newFSDirectory(tempDir), a, a, 3);\n        suggester.build(new InputArrayIterator(keys));\n      } else {\n        // Test again, after close/reopen:\n        suggester = new AnalyzingInfixSuggester(TEST_VERSION_CURRENT, newFSDirectory(tempDir), a, a, 3);\n      }\n\n      // No context provided, all results returned\n      List<LookupResult> results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), 10, true, true);\n      assertEquals(2, results.size());\n      LookupResult result = results.get(0);\n      assertEquals(\"a penny saved is a penny <b>ear</b>ned\", result.key);\n      assertEquals(10, result.value);\n      assertEquals(new BytesRef(\"foobaz\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"baz\")));\n\n      result = results.get(1);\n      assertEquals(\"lend me your <b>ear</b>\", result.key);\n      assertEquals(8, result.value);\n      assertEquals(new BytesRef(\"foobar\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"bar\")));\n\n      // Both suggestions have \"foo\" context:\n      results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), asSet(\"foo\"), 10, true, true);\n      assertEquals(2, results.size());\n\n      result = results.get(0);\n      assertEquals(\"a penny saved is a penny <b>ear</b>ned\", result.key);\n      assertEquals(10, result.value);\n      assertEquals(new BytesRef(\"foobaz\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"baz\")));\n\n      result = results.get(1);\n      assertEquals(\"lend me your <b>ear</b>\", result.key);\n      assertEquals(8, result.value);\n      assertEquals(new BytesRef(\"foobar\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"bar\")));\n\n      // Only one has \"bar\" context:\n      results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), asSet(\"bar\"), 10, true, true);\n      assertEquals(1, results.size());\n\n      result = results.get(0);\n      assertEquals(\"lend me your <b>ear</b>\", result.key);\n      assertEquals(8, result.value);\n      assertEquals(new BytesRef(\"foobar\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"bar\")));\n\n      // Only one has \"baz\" context:\n      results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), asSet(\"baz\"), 10, true, true);\n      assertEquals(1, results.size());\n\n      result = results.get(0);\n      assertEquals(\"a penny saved is a penny <b>ear</b>ned\", result.key);\n      assertEquals(10, result.value);\n      assertEquals(new BytesRef(\"foobaz\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"baz\")));\n\n      // Both have foo or bar:\n      results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), asSet(\"foo\", \"bar\"), 10, true, true);\n      assertEquals(2, results.size());\n\n      result = results.get(0);\n      assertEquals(\"a penny saved is a penny <b>ear</b>ned\", result.key);\n      assertEquals(10, result.value);\n      assertEquals(new BytesRef(\"foobaz\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"baz\")));\n\n      result = results.get(1);\n      assertEquals(\"lend me your <b>ear</b>\", result.key);\n      assertEquals(8, result.value);\n      assertEquals(new BytesRef(\"foobar\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"bar\")));\n\n      suggester.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"19e497fe4da591a79332da97681b8017d9c61165","date":1409030374,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggesterTest#testBasicContext().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggesterTest#testBasicContext().mjava","sourceNew":"  // LUCENE-5528\n  public void testBasicContext() throws Exception {\n    Input keys[] = new Input[] {\n      new Input(\"lend me your ear\", 8, new BytesRef(\"foobar\"), asSet(\"foo\", \"bar\")),\n      new Input(\"a penny saved is a penny earned\", 10, new BytesRef(\"foobaz\"), asSet(\"foo\", \"baz\"))\n    };\n\n    File tempDir = createTempDir(\"analyzingInfixContext\");\n\n    for(int iter=0;iter<2;iter++) {\n      AnalyzingInfixSuggester suggester;\n      Analyzer a = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n      if (iter == 0) {\n        suggester = new AnalyzingInfixSuggester(newFSDirectory(tempDir), a, a, 3, false);\n        suggester.build(new InputArrayIterator(keys));\n      } else {\n        // Test again, after close/reopen:\n        suggester = new AnalyzingInfixSuggester(newFSDirectory(tempDir), a, a, 3, false);\n      }\n\n      // No context provided, all results returned\n      List<LookupResult> results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), 10, true, true);\n      assertEquals(2, results.size());\n      LookupResult result = results.get(0);\n      assertEquals(\"a penny saved is a penny <b>ear</b>ned\", result.key);\n      assertEquals(10, result.value);\n      assertEquals(new BytesRef(\"foobaz\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"baz\")));\n\n      result = results.get(1);\n      assertEquals(\"lend me your <b>ear</b>\", result.key);\n      assertEquals(8, result.value);\n      assertEquals(new BytesRef(\"foobar\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"bar\")));\n\n      // Both suggestions have \"foo\" context:\n      results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), asSet(\"foo\"), 10, true, true);\n      assertEquals(2, results.size());\n\n      result = results.get(0);\n      assertEquals(\"a penny saved is a penny <b>ear</b>ned\", result.key);\n      assertEquals(10, result.value);\n      assertEquals(new BytesRef(\"foobaz\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"baz\")));\n\n      result = results.get(1);\n      assertEquals(\"lend me your <b>ear</b>\", result.key);\n      assertEquals(8, result.value);\n      assertEquals(new BytesRef(\"foobar\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"bar\")));\n\n      // Only one has \"bar\" context:\n      results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), asSet(\"bar\"), 10, true, true);\n      assertEquals(1, results.size());\n\n      result = results.get(0);\n      assertEquals(\"lend me your <b>ear</b>\", result.key);\n      assertEquals(8, result.value);\n      assertEquals(new BytesRef(\"foobar\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"bar\")));\n\n      // Only one has \"baz\" context:\n      results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), asSet(\"baz\"), 10, true, true);\n      assertEquals(1, results.size());\n\n      result = results.get(0);\n      assertEquals(\"a penny saved is a penny <b>ear</b>ned\", result.key);\n      assertEquals(10, result.value);\n      assertEquals(new BytesRef(\"foobaz\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"baz\")));\n\n      // Both have foo or bar:\n      results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), asSet(\"foo\", \"bar\"), 10, true, true);\n      assertEquals(2, results.size());\n\n      result = results.get(0);\n      assertEquals(\"a penny saved is a penny <b>ear</b>ned\", result.key);\n      assertEquals(10, result.value);\n      assertEquals(new BytesRef(\"foobaz\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"baz\")));\n\n      result = results.get(1);\n      assertEquals(\"lend me your <b>ear</b>\", result.key);\n      assertEquals(8, result.value);\n      assertEquals(new BytesRef(\"foobar\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"bar\")));\n\n      suggester.close();\n    }\n  }\n\n","sourceOld":"  // LUCENE-5528\n  public void testBasicContext() throws Exception {\n    Input keys[] = new Input[] {\n      new Input(\"lend me your ear\", 8, new BytesRef(\"foobar\"), asSet(\"foo\", \"bar\")),\n      new Input(\"a penny saved is a penny earned\", 10, new BytesRef(\"foobaz\"), asSet(\"foo\", \"baz\"))\n    };\n\n    File tempDir = createTempDir(\"analyzingInfixContext\");\n\n    for(int iter=0;iter<2;iter++) {\n      AnalyzingInfixSuggester suggester;\n      Analyzer a = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n      if (iter == 0) {\n        suggester = new AnalyzingInfixSuggester(TEST_VERSION_CURRENT, newFSDirectory(tempDir), a, a, 3, false);\n        suggester.build(new InputArrayIterator(keys));\n      } else {\n        // Test again, after close/reopen:\n        suggester = new AnalyzingInfixSuggester(TEST_VERSION_CURRENT, newFSDirectory(tempDir), a, a, 3, false);\n      }\n\n      // No context provided, all results returned\n      List<LookupResult> results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), 10, true, true);\n      assertEquals(2, results.size());\n      LookupResult result = results.get(0);\n      assertEquals(\"a penny saved is a penny <b>ear</b>ned\", result.key);\n      assertEquals(10, result.value);\n      assertEquals(new BytesRef(\"foobaz\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"baz\")));\n\n      result = results.get(1);\n      assertEquals(\"lend me your <b>ear</b>\", result.key);\n      assertEquals(8, result.value);\n      assertEquals(new BytesRef(\"foobar\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"bar\")));\n\n      // Both suggestions have \"foo\" context:\n      results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), asSet(\"foo\"), 10, true, true);\n      assertEquals(2, results.size());\n\n      result = results.get(0);\n      assertEquals(\"a penny saved is a penny <b>ear</b>ned\", result.key);\n      assertEquals(10, result.value);\n      assertEquals(new BytesRef(\"foobaz\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"baz\")));\n\n      result = results.get(1);\n      assertEquals(\"lend me your <b>ear</b>\", result.key);\n      assertEquals(8, result.value);\n      assertEquals(new BytesRef(\"foobar\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"bar\")));\n\n      // Only one has \"bar\" context:\n      results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), asSet(\"bar\"), 10, true, true);\n      assertEquals(1, results.size());\n\n      result = results.get(0);\n      assertEquals(\"lend me your <b>ear</b>\", result.key);\n      assertEquals(8, result.value);\n      assertEquals(new BytesRef(\"foobar\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"bar\")));\n\n      // Only one has \"baz\" context:\n      results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), asSet(\"baz\"), 10, true, true);\n      assertEquals(1, results.size());\n\n      result = results.get(0);\n      assertEquals(\"a penny saved is a penny <b>ear</b>ned\", result.key);\n      assertEquals(10, result.value);\n      assertEquals(new BytesRef(\"foobaz\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"baz\")));\n\n      // Both have foo or bar:\n      results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), asSet(\"foo\", \"bar\"), 10, true, true);\n      assertEquals(2, results.size());\n\n      result = results.get(0);\n      assertEquals(\"a penny saved is a penny <b>ear</b>ned\", result.key);\n      assertEquals(10, result.value);\n      assertEquals(new BytesRef(\"foobaz\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"baz\")));\n\n      result = results.get(1);\n      assertEquals(\"lend me your <b>ear</b>\", result.key);\n      assertEquals(8, result.value);\n      assertEquals(new BytesRef(\"foobar\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"bar\")));\n\n      suggester.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f4abec28b874149a7223e32cc7a01704c27790de","date":1410644789,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggesterTest#testBasicContext().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggesterTest#testBasicContext().mjava","sourceNew":"  // LUCENE-5528\n  public void testBasicContext() throws Exception {\n    Input keys[] = new Input[] {\n      new Input(\"lend me your ear\", 8, new BytesRef(\"foobar\"), asSet(\"foo\", \"bar\")),\n      new Input(\"a penny saved is a penny earned\", 10, new BytesRef(\"foobaz\"), asSet(\"foo\", \"baz\"))\n    };\n\n    Path tempDir = createTempDir(\"analyzingInfixContext\");\n\n    for(int iter=0;iter<2;iter++) {\n      AnalyzingInfixSuggester suggester;\n      Analyzer a = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n      if (iter == 0) {\n        suggester = new AnalyzingInfixSuggester(newFSDirectory(tempDir), a, a, 3, false);\n        suggester.build(new InputArrayIterator(keys));\n      } else {\n        // Test again, after close/reopen:\n        suggester = new AnalyzingInfixSuggester(newFSDirectory(tempDir), a, a, 3, false);\n      }\n\n      // No context provided, all results returned\n      List<LookupResult> results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), 10, true, true);\n      assertEquals(2, results.size());\n      LookupResult result = results.get(0);\n      assertEquals(\"a penny saved is a penny <b>ear</b>ned\", result.key);\n      assertEquals(10, result.value);\n      assertEquals(new BytesRef(\"foobaz\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"baz\")));\n\n      result = results.get(1);\n      assertEquals(\"lend me your <b>ear</b>\", result.key);\n      assertEquals(8, result.value);\n      assertEquals(new BytesRef(\"foobar\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"bar\")));\n\n      // Both suggestions have \"foo\" context:\n      results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), asSet(\"foo\"), 10, true, true);\n      assertEquals(2, results.size());\n\n      result = results.get(0);\n      assertEquals(\"a penny saved is a penny <b>ear</b>ned\", result.key);\n      assertEquals(10, result.value);\n      assertEquals(new BytesRef(\"foobaz\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"baz\")));\n\n      result = results.get(1);\n      assertEquals(\"lend me your <b>ear</b>\", result.key);\n      assertEquals(8, result.value);\n      assertEquals(new BytesRef(\"foobar\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"bar\")));\n\n      // Only one has \"bar\" context:\n      results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), asSet(\"bar\"), 10, true, true);\n      assertEquals(1, results.size());\n\n      result = results.get(0);\n      assertEquals(\"lend me your <b>ear</b>\", result.key);\n      assertEquals(8, result.value);\n      assertEquals(new BytesRef(\"foobar\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"bar\")));\n\n      // Only one has \"baz\" context:\n      results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), asSet(\"baz\"), 10, true, true);\n      assertEquals(1, results.size());\n\n      result = results.get(0);\n      assertEquals(\"a penny saved is a penny <b>ear</b>ned\", result.key);\n      assertEquals(10, result.value);\n      assertEquals(new BytesRef(\"foobaz\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"baz\")));\n\n      // Both have foo or bar:\n      results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), asSet(\"foo\", \"bar\"), 10, true, true);\n      assertEquals(2, results.size());\n\n      result = results.get(0);\n      assertEquals(\"a penny saved is a penny <b>ear</b>ned\", result.key);\n      assertEquals(10, result.value);\n      assertEquals(new BytesRef(\"foobaz\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"baz\")));\n\n      result = results.get(1);\n      assertEquals(\"lend me your <b>ear</b>\", result.key);\n      assertEquals(8, result.value);\n      assertEquals(new BytesRef(\"foobar\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"bar\")));\n\n      suggester.close();\n    }\n  }\n\n","sourceOld":"  // LUCENE-5528\n  public void testBasicContext() throws Exception {\n    Input keys[] = new Input[] {\n      new Input(\"lend me your ear\", 8, new BytesRef(\"foobar\"), asSet(\"foo\", \"bar\")),\n      new Input(\"a penny saved is a penny earned\", 10, new BytesRef(\"foobaz\"), asSet(\"foo\", \"baz\"))\n    };\n\n    File tempDir = createTempDir(\"analyzingInfixContext\");\n\n    for(int iter=0;iter<2;iter++) {\n      AnalyzingInfixSuggester suggester;\n      Analyzer a = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n      if (iter == 0) {\n        suggester = new AnalyzingInfixSuggester(newFSDirectory(tempDir), a, a, 3, false);\n        suggester.build(new InputArrayIterator(keys));\n      } else {\n        // Test again, after close/reopen:\n        suggester = new AnalyzingInfixSuggester(newFSDirectory(tempDir), a, a, 3, false);\n      }\n\n      // No context provided, all results returned\n      List<LookupResult> results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), 10, true, true);\n      assertEquals(2, results.size());\n      LookupResult result = results.get(0);\n      assertEquals(\"a penny saved is a penny <b>ear</b>ned\", result.key);\n      assertEquals(10, result.value);\n      assertEquals(new BytesRef(\"foobaz\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"baz\")));\n\n      result = results.get(1);\n      assertEquals(\"lend me your <b>ear</b>\", result.key);\n      assertEquals(8, result.value);\n      assertEquals(new BytesRef(\"foobar\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"bar\")));\n\n      // Both suggestions have \"foo\" context:\n      results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), asSet(\"foo\"), 10, true, true);\n      assertEquals(2, results.size());\n\n      result = results.get(0);\n      assertEquals(\"a penny saved is a penny <b>ear</b>ned\", result.key);\n      assertEquals(10, result.value);\n      assertEquals(new BytesRef(\"foobaz\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"baz\")));\n\n      result = results.get(1);\n      assertEquals(\"lend me your <b>ear</b>\", result.key);\n      assertEquals(8, result.value);\n      assertEquals(new BytesRef(\"foobar\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"bar\")));\n\n      // Only one has \"bar\" context:\n      results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), asSet(\"bar\"), 10, true, true);\n      assertEquals(1, results.size());\n\n      result = results.get(0);\n      assertEquals(\"lend me your <b>ear</b>\", result.key);\n      assertEquals(8, result.value);\n      assertEquals(new BytesRef(\"foobar\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"bar\")));\n\n      // Only one has \"baz\" context:\n      results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), asSet(\"baz\"), 10, true, true);\n      assertEquals(1, results.size());\n\n      result = results.get(0);\n      assertEquals(\"a penny saved is a penny <b>ear</b>ned\", result.key);\n      assertEquals(10, result.value);\n      assertEquals(new BytesRef(\"foobaz\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"baz\")));\n\n      // Both have foo or bar:\n      results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), asSet(\"foo\", \"bar\"), 10, true, true);\n      assertEquals(2, results.size());\n\n      result = results.get(0);\n      assertEquals(\"a penny saved is a penny <b>ear</b>ned\", result.key);\n      assertEquals(10, result.value);\n      assertEquals(new BytesRef(\"foobaz\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"baz\")));\n\n      result = results.get(1);\n      assertEquals(\"lend me your <b>ear</b>\", result.key);\n      assertEquals(8, result.value);\n      assertEquals(new BytesRef(\"foobar\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"bar\")));\n\n      suggester.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0977217be8980b17c612feb7ea3d1556ccf4aeed","date":1415742153,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggesterTest#testBasicContext().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggesterTest#testBasicContext().mjava","sourceNew":"  // LUCENE-5528\n  public void testBasicContext() throws Exception {\n    Input keys[] = new Input[] {\n      new Input(\"lend me your ear\", 8, new BytesRef(\"foobar\"), asSet(\"foo\", \"bar\")),\n      new Input(\"a penny saved is a penny earned\", 10, new BytesRef(\"foobaz\"), asSet(\"foo\", \"baz\"))\n    };\n\n    Path tempDir = createTempDir(\"analyzingInfixContext\");\n\n    for(int iter=0;iter<2;iter++) {\n      AnalyzingInfixSuggester suggester;\n      Analyzer a = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n      if (iter == 0) {\n        suggester = new AnalyzingInfixSuggester(newFSDirectory(tempDir), a, a, 3, false);\n        suggester.build(new InputArrayIterator(keys));\n      } else {\n        // Test again, after close/reopen:\n        suggester = new AnalyzingInfixSuggester(newFSDirectory(tempDir), a, a, 3, false);\n      }\n\n      // No context provided, all results returned\n      List<LookupResult> results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), 10, true, true);\n      assertEquals(2, results.size());\n      LookupResult result = results.get(0);\n      assertEquals(\"a penny saved is a penny <b>ear</b>ned\", result.key);\n      assertEquals(10, result.value);\n      assertEquals(new BytesRef(\"foobaz\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"baz\")));\n\n      result = results.get(1);\n      assertEquals(\"lend me your <b>ear</b>\", result.key);\n      assertEquals(8, result.value);\n      assertEquals(new BytesRef(\"foobar\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"bar\")));\n\n      // Both have \"foo\" context:\n      results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), asSet(\"foo\"), 10, true, true);\n      assertEquals(2, results.size());\n\n      result = results.get(0);\n      assertEquals(\"a penny saved is a penny <b>ear</b>ned\", result.key);\n      assertEquals(10, result.value);\n      assertEquals(new BytesRef(\"foobaz\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"baz\")));\n\n      result = results.get(1);\n      assertEquals(\"lend me your <b>ear</b>\", result.key);\n      assertEquals(8, result.value);\n      assertEquals(new BytesRef(\"foobar\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"bar\")));\n\n      // Only one has \"bar\" context:\n      results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), asSet(\"bar\"), 10, true, true);\n      assertEquals(1, results.size());\n\n      result = results.get(0);\n      assertEquals(\"lend me your <b>ear</b>\", result.key);\n      assertEquals(8, result.value);\n      assertEquals(new BytesRef(\"foobar\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"bar\")));\n\n      // None do not have \"foo\" context:\n      Map<BytesRef, BooleanClause.Occur> contextInfo = new HashMap<>();\n      contextInfo.put(new BytesRef(\"foo\"), BooleanClause.Occur.MUST_NOT);\n      results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), contextInfo, 10, true, true);\n      assertEquals(0, results.size());\n\n      // Only one does not have \"bar\" context:\n      contextInfo.clear();\n      contextInfo.put(new BytesRef(\"bar\"), BooleanClause.Occur.MUST_NOT);\n      results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), contextInfo, 10, true, true);\n      assertEquals(1, results.size());\n\n      result = results.get(0);\n      assertEquals(\"a penny saved is a penny <b>ear</b>ned\", result.key);\n      assertEquals(10, result.value);\n      assertEquals(new BytesRef(\"foobaz\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"baz\")));\n\n      // Both have \"foo\" or \"bar\" context:\n      results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), asSet(\"foo\", \"bar\"), 10, true, true);\n      assertEquals(2, results.size());\n\n      result = results.get(0);\n      assertEquals(\"a penny saved is a penny <b>ear</b>ned\", result.key);\n      assertEquals(10, result.value);\n      assertEquals(new BytesRef(\"foobaz\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"baz\")));\n\n      result = results.get(1);\n      assertEquals(\"lend me your <b>ear</b>\", result.key);\n      assertEquals(8, result.value);\n      assertEquals(new BytesRef(\"foobar\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"bar\")));\n\n      // Both have \"bar\" or \"baz\" context:\n      results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), asSet(\"bar\", \"baz\"), 10, true, true);\n      assertEquals(2, results.size());\n\n      result = results.get(0);\n      assertEquals(\"a penny saved is a penny <b>ear</b>ned\", result.key);\n      assertEquals(10, result.value);\n      assertEquals(new BytesRef(\"foobaz\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"baz\")));\n\n      result = results.get(1);\n      assertEquals(\"lend me your <b>ear</b>\", result.key);\n      assertEquals(8, result.value);\n      assertEquals(new BytesRef(\"foobar\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"bar\")));\n\n      // Only one has \"foo\" and \"bar\" context:\n      contextInfo.clear();\n      contextInfo.put(new BytesRef(\"foo\"), BooleanClause.Occur.MUST);\n      contextInfo.put(new BytesRef(\"bar\"), BooleanClause.Occur.MUST);\n      results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), contextInfo, 10, true, true);\n      assertEquals(1, results.size());\n\n      result = results.get(0);\n      assertEquals(\"lend me your <b>ear</b>\", result.key);\n      assertEquals(8, result.value);\n      assertEquals(new BytesRef(\"foobar\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"bar\")));\n\n      // None have \"bar\" and \"baz\" context:\n      contextInfo.clear();\n      contextInfo.put(new BytesRef(\"bar\"), BooleanClause.Occur.MUST);\n      contextInfo.put(new BytesRef(\"baz\"), BooleanClause.Occur.MUST);\n      results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), contextInfo, 10, true, true);\n      assertEquals(0, results.size());\n\n      // None do not have \"foo\" and do not have \"bar\" context:\n      contextInfo.clear();\n      contextInfo.put(new BytesRef(\"foo\"), BooleanClause.Occur.MUST_NOT);\n      contextInfo.put(new BytesRef(\"bar\"), BooleanClause.Occur.MUST_NOT);\n      results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), contextInfo, 10, true, true);\n      assertEquals(0, results.size());\n\n      // Both do not have \"bar\" and do not have \"baz\" context:\n      contextInfo.clear();\n      contextInfo.put(new BytesRef(\"bar\"), BooleanClause.Occur.MUST_NOT);\n      contextInfo.put(new BytesRef(\"baz\"), BooleanClause.Occur.MUST_NOT);\n      results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), asSet(\"bar\", \"baz\"), 10, true, true);\n      assertEquals(2, results.size());\n\n      result = results.get(0);\n      assertEquals(\"a penny saved is a penny <b>ear</b>ned\", result.key);\n      assertEquals(10, result.value);\n      assertEquals(new BytesRef(\"foobaz\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"baz\")));\n\n      result = results.get(1);\n      assertEquals(\"lend me your <b>ear</b>\", result.key);\n      assertEquals(8, result.value);\n      assertEquals(new BytesRef(\"foobar\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"bar\")));\n\n      // Only one has \"foo\" and does not have \"bar\" context:\n      contextInfo.clear();\n      contextInfo.put(new BytesRef(\"foo\"), BooleanClause.Occur.MUST);\n      contextInfo.put(new BytesRef(\"bar\"), BooleanClause.Occur.MUST_NOT);\n      results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), contextInfo, 10, true, true);\n      assertEquals(1, results.size());\n\n      result = results.get(0);\n      assertEquals(\"a penny saved is a penny <b>ear</b>ned\", result.key);\n      assertEquals(10, result.value);\n      assertEquals(new BytesRef(\"foobaz\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"baz\")));\n\n      suggester.close();\n    }\n  }\n\n","sourceOld":"  // LUCENE-5528\n  public void testBasicContext() throws Exception {\n    Input keys[] = new Input[] {\n      new Input(\"lend me your ear\", 8, new BytesRef(\"foobar\"), asSet(\"foo\", \"bar\")),\n      new Input(\"a penny saved is a penny earned\", 10, new BytesRef(\"foobaz\"), asSet(\"foo\", \"baz\"))\n    };\n\n    Path tempDir = createTempDir(\"analyzingInfixContext\");\n\n    for(int iter=0;iter<2;iter++) {\n      AnalyzingInfixSuggester suggester;\n      Analyzer a = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n      if (iter == 0) {\n        suggester = new AnalyzingInfixSuggester(newFSDirectory(tempDir), a, a, 3, false);\n        suggester.build(new InputArrayIterator(keys));\n      } else {\n        // Test again, after close/reopen:\n        suggester = new AnalyzingInfixSuggester(newFSDirectory(tempDir), a, a, 3, false);\n      }\n\n      // No context provided, all results returned\n      List<LookupResult> results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), 10, true, true);\n      assertEquals(2, results.size());\n      LookupResult result = results.get(0);\n      assertEquals(\"a penny saved is a penny <b>ear</b>ned\", result.key);\n      assertEquals(10, result.value);\n      assertEquals(new BytesRef(\"foobaz\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"baz\")));\n\n      result = results.get(1);\n      assertEquals(\"lend me your <b>ear</b>\", result.key);\n      assertEquals(8, result.value);\n      assertEquals(new BytesRef(\"foobar\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"bar\")));\n\n      // Both suggestions have \"foo\" context:\n      results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), asSet(\"foo\"), 10, true, true);\n      assertEquals(2, results.size());\n\n      result = results.get(0);\n      assertEquals(\"a penny saved is a penny <b>ear</b>ned\", result.key);\n      assertEquals(10, result.value);\n      assertEquals(new BytesRef(\"foobaz\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"baz\")));\n\n      result = results.get(1);\n      assertEquals(\"lend me your <b>ear</b>\", result.key);\n      assertEquals(8, result.value);\n      assertEquals(new BytesRef(\"foobar\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"bar\")));\n\n      // Only one has \"bar\" context:\n      results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), asSet(\"bar\"), 10, true, true);\n      assertEquals(1, results.size());\n\n      result = results.get(0);\n      assertEquals(\"lend me your <b>ear</b>\", result.key);\n      assertEquals(8, result.value);\n      assertEquals(new BytesRef(\"foobar\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"bar\")));\n\n      // Only one has \"baz\" context:\n      results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), asSet(\"baz\"), 10, true, true);\n      assertEquals(1, results.size());\n\n      result = results.get(0);\n      assertEquals(\"a penny saved is a penny <b>ear</b>ned\", result.key);\n      assertEquals(10, result.value);\n      assertEquals(new BytesRef(\"foobaz\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"baz\")));\n\n      // Both have foo or bar:\n      results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), asSet(\"foo\", \"bar\"), 10, true, true);\n      assertEquals(2, results.size());\n\n      result = results.get(0);\n      assertEquals(\"a penny saved is a penny <b>ear</b>ned\", result.key);\n      assertEquals(10, result.value);\n      assertEquals(new BytesRef(\"foobaz\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"baz\")));\n\n      result = results.get(1);\n      assertEquals(\"lend me your <b>ear</b>\", result.key);\n      assertEquals(8, result.value);\n      assertEquals(new BytesRef(\"foobar\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"bar\")));\n\n      suggester.close();\n    }\n  }\n\n","bugFix":["58d0345a28bb6b4be59c38e6a77e2cc0e615ee4b"],"bugIntro":["ec083aa3f3ecd55f91c47009d49e45553f99bd77"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ec083aa3f3ecd55f91c47009d49e45553f99bd77","date":1416002645,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggesterTest#testBasicContext().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggesterTest#testBasicContext().mjava","sourceNew":"  // LUCENE-5528\n  public void testBasicContext() throws Exception {\n    Input keys[] = new Input[] {\n      new Input(\"lend me your ear\", 8, new BytesRef(\"foobar\"), asSet(\"foo\", \"bar\")),\n      new Input(\"a penny saved is a penny earned\", 10, new BytesRef(\"foobaz\"), asSet(\"foo\", \"baz\"))\n    };\n\n    Path tempDir = createTempDir(\"analyzingInfixContext\");\n\n    for(int iter=0;iter<2;iter++) {\n      AnalyzingInfixSuggester suggester;\n      Analyzer a = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n      if (iter == 0) {\n        suggester = new AnalyzingInfixSuggester(newFSDirectory(tempDir), a, a, 3, false);\n        suggester.build(new InputArrayIterator(keys));\n      } else {\n        // Test again, after close/reopen:\n        suggester = new AnalyzingInfixSuggester(newFSDirectory(tempDir), a, a, 3, false);\n      }\n\n      // No context provided, all results returned\n      List<LookupResult> results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), 10, true, true);\n      assertEquals(2, results.size());\n      LookupResult result = results.get(0);\n      assertEquals(\"a penny saved is a penny earned\", result.key);\n      assertEquals(\"a penny saved is a penny <b>ear</b>ned\", result.highlightKey);\n      assertEquals(10, result.value);\n      assertEquals(new BytesRef(\"foobaz\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"baz\")));\n\n      result = results.get(1);\n      assertEquals(\"lend me your ear\", result.key);\n      assertEquals(\"lend me your <b>ear</b>\", result.highlightKey);\n      assertEquals(8, result.value);\n      assertEquals(new BytesRef(\"foobar\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"bar\")));\n\n      // Both have \"foo\" context:\n      results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), asSet(\"foo\"), 10, true, true);\n      assertEquals(2, results.size());\n\n      result = results.get(0);\n      assertEquals(\"a penny saved is a penny earned\", result.key);\n      assertEquals(\"a penny saved is a penny <b>ear</b>ned\", result.highlightKey);\n      assertEquals(10, result.value);\n      assertEquals(new BytesRef(\"foobaz\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"baz\")));\n\n      result = results.get(1);\n      assertEquals(\"lend me your ear\", result.key);\n      assertEquals(\"lend me your <b>ear</b>\", result.highlightKey);\n      assertEquals(8, result.value);\n      assertEquals(new BytesRef(\"foobar\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"bar\")));\n\n      // Only one has \"bar\" context:\n      results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), asSet(\"bar\"), 10, true, true);\n      assertEquals(1, results.size());\n\n      result = results.get(0);\n      assertEquals(\"lend me your ear\", result.key);\n      assertEquals(\"lend me your <b>ear</b>\", result.highlightKey);\n      assertEquals(8, result.value);\n      assertEquals(new BytesRef(\"foobar\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"bar\")));\n\n      // None do not have \"foo\" context:\n      Map<BytesRef, BooleanClause.Occur> contextInfo = new HashMap<>();\n      contextInfo.put(new BytesRef(\"foo\"), BooleanClause.Occur.MUST_NOT);\n      results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), contextInfo, 10, true, true);\n      assertEquals(0, results.size());\n\n      // Only one does not have \"bar\" context:\n      contextInfo.clear();\n      contextInfo.put(new BytesRef(\"bar\"), BooleanClause.Occur.MUST_NOT);\n      results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), contextInfo, 10, true, true);\n      assertEquals(1, results.size());\n\n      result = results.get(0);\n      assertEquals(\"a penny saved is a penny earned\", result.key);\n      assertEquals(\"a penny saved is a penny <b>ear</b>ned\", result.highlightKey);\n      assertEquals(10, result.value);\n      assertEquals(new BytesRef(\"foobaz\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"baz\")));\n\n      // Both have \"foo\" or \"bar\" context:\n      results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), asSet(\"foo\", \"bar\"), 10, true, true);\n      assertEquals(2, results.size());\n\n      result = results.get(0);\n      assertEquals(\"a penny saved is a penny earned\", result.key);\n      assertEquals(\"a penny saved is a penny <b>ear</b>ned\", result.highlightKey);\n      assertEquals(10, result.value);\n      assertEquals(new BytesRef(\"foobaz\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"baz\")));\n\n      result = results.get(1);\n      assertEquals(\"lend me your ear\", result.key);\n      assertEquals(\"lend me your <b>ear</b>\", result.highlightKey);\n      assertEquals(8, result.value);\n      assertEquals(new BytesRef(\"foobar\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"bar\")));\n\n      // Both have \"bar\" or \"baz\" context:\n      results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), asSet(\"bar\", \"baz\"), 10, true, true);\n      assertEquals(2, results.size());\n\n      result = results.get(0);\n      assertEquals(\"a penny saved is a penny earned\", result.key);\n      assertEquals(\"a penny saved is a penny <b>ear</b>ned\", result.highlightKey);\n      assertEquals(10, result.value);\n      assertEquals(new BytesRef(\"foobaz\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"baz\")));\n\n      result = results.get(1);\n      assertEquals(\"lend me your ear\", result.key);\n      assertEquals(\"lend me your <b>ear</b>\", result.highlightKey);\n      assertEquals(8, result.value);\n      assertEquals(new BytesRef(\"foobar\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"bar\")));\n\n      // Only one has \"foo\" and \"bar\" context:\n      contextInfo.clear();\n      contextInfo.put(new BytesRef(\"foo\"), BooleanClause.Occur.MUST);\n      contextInfo.put(new BytesRef(\"bar\"), BooleanClause.Occur.MUST);\n      results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), contextInfo, 10, true, true);\n      assertEquals(1, results.size());\n\n      result = results.get(0);\n      assertEquals(\"lend me your ear\", result.key);\n      assertEquals(\"lend me your <b>ear</b>\", result.highlightKey);\n      assertEquals(8, result.value);\n      assertEquals(new BytesRef(\"foobar\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"bar\")));\n\n      // None have \"bar\" and \"baz\" context:\n      contextInfo.clear();\n      contextInfo.put(new BytesRef(\"bar\"), BooleanClause.Occur.MUST);\n      contextInfo.put(new BytesRef(\"baz\"), BooleanClause.Occur.MUST);\n      results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), contextInfo, 10, true, true);\n      assertEquals(0, results.size());\n\n      // None do not have \"foo\" and do not have \"bar\" context:\n      contextInfo.clear();\n      contextInfo.put(new BytesRef(\"foo\"), BooleanClause.Occur.MUST_NOT);\n      contextInfo.put(new BytesRef(\"bar\"), BooleanClause.Occur.MUST_NOT);\n      results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), contextInfo, 10, true, true);\n      assertEquals(0, results.size());\n\n      // Both do not have \"bar\" and do not have \"baz\" context:\n      contextInfo.clear();\n      contextInfo.put(new BytesRef(\"bar\"), BooleanClause.Occur.MUST_NOT);\n      contextInfo.put(new BytesRef(\"baz\"), BooleanClause.Occur.MUST_NOT);\n      results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), asSet(\"bar\", \"baz\"), 10, true, true);\n      assertEquals(2, results.size());\n\n      result = results.get(0);\n      assertEquals(\"a penny saved is a penny earned\", result.key);\n      assertEquals(\"a penny saved is a penny <b>ear</b>ned\", result.highlightKey);\n      assertEquals(10, result.value);\n      assertEquals(new BytesRef(\"foobaz\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"baz\")));\n\n      result = results.get(1);\n      assertEquals(\"lend me your ear\", result.key);\n      assertEquals(\"lend me your <b>ear</b>\", result.highlightKey);\n      assertEquals(8, result.value);\n      assertEquals(new BytesRef(\"foobar\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"bar\")));\n\n      // Only one has \"foo\" and does not have \"bar\" context:\n      contextInfo.clear();\n      contextInfo.put(new BytesRef(\"foo\"), BooleanClause.Occur.MUST);\n      contextInfo.put(new BytesRef(\"bar\"), BooleanClause.Occur.MUST_NOT);\n      results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), contextInfo, 10, true, true);\n      assertEquals(1, results.size());\n\n      result = results.get(0);\n      assertEquals(\"a penny saved is a penny earned\", result.key);\n      assertEquals(\"a penny saved is a penny <b>ear</b>ned\", result.highlightKey);\n      assertEquals(10, result.value);\n      assertEquals(new BytesRef(\"foobaz\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"baz\")));\n\n      suggester.close();\n    }\n  }\n\n","sourceOld":"  // LUCENE-5528\n  public void testBasicContext() throws Exception {\n    Input keys[] = new Input[] {\n      new Input(\"lend me your ear\", 8, new BytesRef(\"foobar\"), asSet(\"foo\", \"bar\")),\n      new Input(\"a penny saved is a penny earned\", 10, new BytesRef(\"foobaz\"), asSet(\"foo\", \"baz\"))\n    };\n\n    Path tempDir = createTempDir(\"analyzingInfixContext\");\n\n    for(int iter=0;iter<2;iter++) {\n      AnalyzingInfixSuggester suggester;\n      Analyzer a = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n      if (iter == 0) {\n        suggester = new AnalyzingInfixSuggester(newFSDirectory(tempDir), a, a, 3, false);\n        suggester.build(new InputArrayIterator(keys));\n      } else {\n        // Test again, after close/reopen:\n        suggester = new AnalyzingInfixSuggester(newFSDirectory(tempDir), a, a, 3, false);\n      }\n\n      // No context provided, all results returned\n      List<LookupResult> results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), 10, true, true);\n      assertEquals(2, results.size());\n      LookupResult result = results.get(0);\n      assertEquals(\"a penny saved is a penny <b>ear</b>ned\", result.key);\n      assertEquals(10, result.value);\n      assertEquals(new BytesRef(\"foobaz\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"baz\")));\n\n      result = results.get(1);\n      assertEquals(\"lend me your <b>ear</b>\", result.key);\n      assertEquals(8, result.value);\n      assertEquals(new BytesRef(\"foobar\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"bar\")));\n\n      // Both have \"foo\" context:\n      results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), asSet(\"foo\"), 10, true, true);\n      assertEquals(2, results.size());\n\n      result = results.get(0);\n      assertEquals(\"a penny saved is a penny <b>ear</b>ned\", result.key);\n      assertEquals(10, result.value);\n      assertEquals(new BytesRef(\"foobaz\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"baz\")));\n\n      result = results.get(1);\n      assertEquals(\"lend me your <b>ear</b>\", result.key);\n      assertEquals(8, result.value);\n      assertEquals(new BytesRef(\"foobar\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"bar\")));\n\n      // Only one has \"bar\" context:\n      results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), asSet(\"bar\"), 10, true, true);\n      assertEquals(1, results.size());\n\n      result = results.get(0);\n      assertEquals(\"lend me your <b>ear</b>\", result.key);\n      assertEquals(8, result.value);\n      assertEquals(new BytesRef(\"foobar\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"bar\")));\n\n      // None do not have \"foo\" context:\n      Map<BytesRef, BooleanClause.Occur> contextInfo = new HashMap<>();\n      contextInfo.put(new BytesRef(\"foo\"), BooleanClause.Occur.MUST_NOT);\n      results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), contextInfo, 10, true, true);\n      assertEquals(0, results.size());\n\n      // Only one does not have \"bar\" context:\n      contextInfo.clear();\n      contextInfo.put(new BytesRef(\"bar\"), BooleanClause.Occur.MUST_NOT);\n      results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), contextInfo, 10, true, true);\n      assertEquals(1, results.size());\n\n      result = results.get(0);\n      assertEquals(\"a penny saved is a penny <b>ear</b>ned\", result.key);\n      assertEquals(10, result.value);\n      assertEquals(new BytesRef(\"foobaz\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"baz\")));\n\n      // Both have \"foo\" or \"bar\" context:\n      results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), asSet(\"foo\", \"bar\"), 10, true, true);\n      assertEquals(2, results.size());\n\n      result = results.get(0);\n      assertEquals(\"a penny saved is a penny <b>ear</b>ned\", result.key);\n      assertEquals(10, result.value);\n      assertEquals(new BytesRef(\"foobaz\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"baz\")));\n\n      result = results.get(1);\n      assertEquals(\"lend me your <b>ear</b>\", result.key);\n      assertEquals(8, result.value);\n      assertEquals(new BytesRef(\"foobar\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"bar\")));\n\n      // Both have \"bar\" or \"baz\" context:\n      results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), asSet(\"bar\", \"baz\"), 10, true, true);\n      assertEquals(2, results.size());\n\n      result = results.get(0);\n      assertEquals(\"a penny saved is a penny <b>ear</b>ned\", result.key);\n      assertEquals(10, result.value);\n      assertEquals(new BytesRef(\"foobaz\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"baz\")));\n\n      result = results.get(1);\n      assertEquals(\"lend me your <b>ear</b>\", result.key);\n      assertEquals(8, result.value);\n      assertEquals(new BytesRef(\"foobar\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"bar\")));\n\n      // Only one has \"foo\" and \"bar\" context:\n      contextInfo.clear();\n      contextInfo.put(new BytesRef(\"foo\"), BooleanClause.Occur.MUST);\n      contextInfo.put(new BytesRef(\"bar\"), BooleanClause.Occur.MUST);\n      results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), contextInfo, 10, true, true);\n      assertEquals(1, results.size());\n\n      result = results.get(0);\n      assertEquals(\"lend me your <b>ear</b>\", result.key);\n      assertEquals(8, result.value);\n      assertEquals(new BytesRef(\"foobar\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"bar\")));\n\n      // None have \"bar\" and \"baz\" context:\n      contextInfo.clear();\n      contextInfo.put(new BytesRef(\"bar\"), BooleanClause.Occur.MUST);\n      contextInfo.put(new BytesRef(\"baz\"), BooleanClause.Occur.MUST);\n      results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), contextInfo, 10, true, true);\n      assertEquals(0, results.size());\n\n      // None do not have \"foo\" and do not have \"bar\" context:\n      contextInfo.clear();\n      contextInfo.put(new BytesRef(\"foo\"), BooleanClause.Occur.MUST_NOT);\n      contextInfo.put(new BytesRef(\"bar\"), BooleanClause.Occur.MUST_NOT);\n      results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), contextInfo, 10, true, true);\n      assertEquals(0, results.size());\n\n      // Both do not have \"bar\" and do not have \"baz\" context:\n      contextInfo.clear();\n      contextInfo.put(new BytesRef(\"bar\"), BooleanClause.Occur.MUST_NOT);\n      contextInfo.put(new BytesRef(\"baz\"), BooleanClause.Occur.MUST_NOT);\n      results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), asSet(\"bar\", \"baz\"), 10, true, true);\n      assertEquals(2, results.size());\n\n      result = results.get(0);\n      assertEquals(\"a penny saved is a penny <b>ear</b>ned\", result.key);\n      assertEquals(10, result.value);\n      assertEquals(new BytesRef(\"foobaz\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"baz\")));\n\n      result = results.get(1);\n      assertEquals(\"lend me your <b>ear</b>\", result.key);\n      assertEquals(8, result.value);\n      assertEquals(new BytesRef(\"foobar\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"bar\")));\n\n      // Only one has \"foo\" and does not have \"bar\" context:\n      contextInfo.clear();\n      contextInfo.put(new BytesRef(\"foo\"), BooleanClause.Occur.MUST);\n      contextInfo.put(new BytesRef(\"bar\"), BooleanClause.Occur.MUST_NOT);\n      results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), contextInfo, 10, true, true);\n      assertEquals(1, results.size());\n\n      result = results.get(0);\n      assertEquals(\"a penny saved is a penny <b>ear</b>ned\", result.key);\n      assertEquals(10, result.value);\n      assertEquals(new BytesRef(\"foobaz\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"baz\")));\n\n      suggester.close();\n    }\n  }\n\n","bugFix":["58d0345a28bb6b4be59c38e6a77e2cc0e615ee4b","0977217be8980b17c612feb7ea3d1556ccf4aeed"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a56958d7f71a28824f20031ffbb2e13502a0274e","date":1425573902,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggesterTest#testBasicContext().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggesterTest#testBasicContext().mjava","sourceNew":"  // LUCENE-5528\n  public void testBasicContext() throws Exception {\n    Input keys[] = new Input[] {\n      new Input(\"lend me your ear\", 8, new BytesRef(\"foobar\"), asSet(\"foo\", \"bar\")),\n      new Input(\"a penny saved is a penny earned\", 10, new BytesRef(\"foobaz\"), asSet(\"foo\", \"baz\"))\n    };\n\n    Path tempDir = createTempDir(\"analyzingInfixContext\");\n\n    for(int iter=0;iter<2;iter++) {\n      AnalyzingInfixSuggester suggester;\n      Analyzer a = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n      if (iter == 0) {\n        suggester = new AnalyzingInfixSuggester(newFSDirectory(tempDir), a, a, 3, false);\n        suggester.build(new InputArrayIterator(keys));\n      } else {\n        // Test again, after close/reopen:\n        suggester = new AnalyzingInfixSuggester(newFSDirectory(tempDir), a, a, 3, false);\n      }\n\n      // No context provided, all results returned\n      List<LookupResult> results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), 10, true, true);\n      assertEquals(2, results.size());\n      LookupResult result = results.get(0);\n      assertEquals(\"a penny saved is a penny earned\", result.key);\n      assertEquals(\"a penny saved is a penny <b>ear</b>ned\", result.highlightKey);\n      assertEquals(10, result.value);\n      assertEquals(new BytesRef(\"foobaz\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"baz\")));\n\n      result = results.get(1);\n      assertEquals(\"lend me your ear\", result.key);\n      assertEquals(\"lend me your <b>ear</b>\", result.highlightKey);\n      assertEquals(8, result.value);\n      assertEquals(new BytesRef(\"foobar\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"bar\")));\n\n      // Both have \"foo\" context:\n      results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), asSet(\"foo\"), 10, true, true);\n      assertEquals(2, results.size());\n\n      result = results.get(0);\n      assertEquals(\"a penny saved is a penny earned\", result.key);\n      assertEquals(\"a penny saved is a penny <b>ear</b>ned\", result.highlightKey);\n      assertEquals(10, result.value);\n      assertEquals(new BytesRef(\"foobaz\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"baz\")));\n\n      result = results.get(1);\n      assertEquals(\"lend me your ear\", result.key);\n      assertEquals(\"lend me your <b>ear</b>\", result.highlightKey);\n      assertEquals(8, result.value);\n      assertEquals(new BytesRef(\"foobar\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"bar\")));\n\n      // Only one has \"bar\" context:\n      results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), asSet(\"bar\"), 10, true, true);\n      assertEquals(1, results.size());\n\n      result = results.get(0);\n      assertEquals(\"lend me your ear\", result.key);\n      assertEquals(\"lend me your <b>ear</b>\", result.highlightKey);\n      assertEquals(8, result.value);\n      assertEquals(new BytesRef(\"foobar\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"bar\")));\n\n      // None do not have \"foo\" context:\n      Map<BytesRef, BooleanClause.Occur> contextInfo = new HashMap<>();\n      contextInfo.put(new BytesRef(\"foo\"), BooleanClause.Occur.MUST_NOT);\n      results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), contextInfo, 10, true, true);\n      assertEquals(0, results.size());\n\n      // Only one does not have \"bar\" context:\n      contextInfo.clear();\n      contextInfo.put(new BytesRef(\"bar\"), BooleanClause.Occur.MUST_NOT);\n      results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), contextInfo, 10, true, true);\n      assertEquals(1, results.size());\n\n      result = results.get(0);\n      assertEquals(\"a penny saved is a penny earned\", result.key);\n      assertEquals(\"a penny saved is a penny <b>ear</b>ned\", result.highlightKey);\n      assertEquals(10, result.value);\n      assertEquals(new BytesRef(\"foobaz\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"baz\")));\n\n      // Both have \"foo\" or \"bar\" context:\n      results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), asSet(\"foo\", \"bar\"), 10, true, true);\n      assertEquals(2, results.size());\n\n      result = results.get(0);\n      assertEquals(\"a penny saved is a penny earned\", result.key);\n      assertEquals(\"a penny saved is a penny <b>ear</b>ned\", result.highlightKey);\n      assertEquals(10, result.value);\n      assertEquals(new BytesRef(\"foobaz\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"baz\")));\n\n      result = results.get(1);\n      assertEquals(\"lend me your ear\", result.key);\n      assertEquals(\"lend me your <b>ear</b>\", result.highlightKey);\n      assertEquals(8, result.value);\n      assertEquals(new BytesRef(\"foobar\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"bar\")));\n\n      // Both have \"bar\" or \"baz\" context:\n      results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), asSet(\"bar\", \"baz\"), 10, true, true);\n      assertEquals(2, results.size());\n\n      result = results.get(0);\n      assertEquals(\"a penny saved is a penny earned\", result.key);\n      assertEquals(\"a penny saved is a penny <b>ear</b>ned\", result.highlightKey);\n      assertEquals(10, result.value);\n      assertEquals(new BytesRef(\"foobaz\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"baz\")));\n\n      result = results.get(1);\n      assertEquals(\"lend me your ear\", result.key);\n      assertEquals(\"lend me your <b>ear</b>\", result.highlightKey);\n      assertEquals(8, result.value);\n      assertEquals(new BytesRef(\"foobar\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"bar\")));\n\n      // Only one has \"foo\" and \"bar\" context:\n      contextInfo.clear();\n      contextInfo.put(new BytesRef(\"foo\"), BooleanClause.Occur.MUST);\n      contextInfo.put(new BytesRef(\"bar\"), BooleanClause.Occur.MUST);\n      results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), contextInfo, 10, true, true);\n      assertEquals(1, results.size());\n\n      result = results.get(0);\n      assertEquals(\"lend me your ear\", result.key);\n      assertEquals(\"lend me your <b>ear</b>\", result.highlightKey);\n      assertEquals(8, result.value);\n      assertEquals(new BytesRef(\"foobar\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"bar\")));\n\n      // None have \"bar\" and \"baz\" context:\n      contextInfo.clear();\n      contextInfo.put(new BytesRef(\"bar\"), BooleanClause.Occur.MUST);\n      contextInfo.put(new BytesRef(\"baz\"), BooleanClause.Occur.MUST);\n      results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), contextInfo, 10, true, true);\n      assertEquals(0, results.size());\n\n      // None do not have \"foo\" and do not have \"bar\" context:\n      contextInfo.clear();\n      contextInfo.put(new BytesRef(\"foo\"), BooleanClause.Occur.MUST_NOT);\n      contextInfo.put(new BytesRef(\"bar\"), BooleanClause.Occur.MUST_NOT);\n      results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), contextInfo, 10, true, true);\n      assertEquals(0, results.size());\n\n      // Both do not have \"bar\" and do not have \"baz\" context:\n      contextInfo.clear();\n      contextInfo.put(new BytesRef(\"bar\"), BooleanClause.Occur.MUST_NOT);\n      contextInfo.put(new BytesRef(\"baz\"), BooleanClause.Occur.MUST_NOT);\n      results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), asSet(\"bar\", \"baz\"), 10, true, true);\n      assertEquals(2, results.size());\n\n      result = results.get(0);\n      assertEquals(\"a penny saved is a penny earned\", result.key);\n      assertEquals(\"a penny saved is a penny <b>ear</b>ned\", result.highlightKey);\n      assertEquals(10, result.value);\n      assertEquals(new BytesRef(\"foobaz\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"baz\")));\n\n      result = results.get(1);\n      assertEquals(\"lend me your ear\", result.key);\n      assertEquals(\"lend me your <b>ear</b>\", result.highlightKey);\n      assertEquals(8, result.value);\n      assertEquals(new BytesRef(\"foobar\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"bar\")));\n\n      // Only one has \"foo\" and does not have \"bar\" context:\n      contextInfo.clear();\n      contextInfo.put(new BytesRef(\"foo\"), BooleanClause.Occur.MUST);\n      contextInfo.put(new BytesRef(\"bar\"), BooleanClause.Occur.MUST_NOT);\n      results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), contextInfo, 10, true, true);\n      assertEquals(1, results.size());\n\n      result = results.get(0);\n      assertEquals(\"a penny saved is a penny earned\", result.key);\n      assertEquals(\"a penny saved is a penny <b>ear</b>ned\", result.highlightKey);\n      assertEquals(10, result.value);\n      assertEquals(new BytesRef(\"foobaz\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"baz\")));\n\n      suggester.close();\n      a.close();\n    }\n  }\n\n","sourceOld":"  // LUCENE-5528\n  public void testBasicContext() throws Exception {\n    Input keys[] = new Input[] {\n      new Input(\"lend me your ear\", 8, new BytesRef(\"foobar\"), asSet(\"foo\", \"bar\")),\n      new Input(\"a penny saved is a penny earned\", 10, new BytesRef(\"foobaz\"), asSet(\"foo\", \"baz\"))\n    };\n\n    Path tempDir = createTempDir(\"analyzingInfixContext\");\n\n    for(int iter=0;iter<2;iter++) {\n      AnalyzingInfixSuggester suggester;\n      Analyzer a = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n      if (iter == 0) {\n        suggester = new AnalyzingInfixSuggester(newFSDirectory(tempDir), a, a, 3, false);\n        suggester.build(new InputArrayIterator(keys));\n      } else {\n        // Test again, after close/reopen:\n        suggester = new AnalyzingInfixSuggester(newFSDirectory(tempDir), a, a, 3, false);\n      }\n\n      // No context provided, all results returned\n      List<LookupResult> results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), 10, true, true);\n      assertEquals(2, results.size());\n      LookupResult result = results.get(0);\n      assertEquals(\"a penny saved is a penny earned\", result.key);\n      assertEquals(\"a penny saved is a penny <b>ear</b>ned\", result.highlightKey);\n      assertEquals(10, result.value);\n      assertEquals(new BytesRef(\"foobaz\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"baz\")));\n\n      result = results.get(1);\n      assertEquals(\"lend me your ear\", result.key);\n      assertEquals(\"lend me your <b>ear</b>\", result.highlightKey);\n      assertEquals(8, result.value);\n      assertEquals(new BytesRef(\"foobar\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"bar\")));\n\n      // Both have \"foo\" context:\n      results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), asSet(\"foo\"), 10, true, true);\n      assertEquals(2, results.size());\n\n      result = results.get(0);\n      assertEquals(\"a penny saved is a penny earned\", result.key);\n      assertEquals(\"a penny saved is a penny <b>ear</b>ned\", result.highlightKey);\n      assertEquals(10, result.value);\n      assertEquals(new BytesRef(\"foobaz\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"baz\")));\n\n      result = results.get(1);\n      assertEquals(\"lend me your ear\", result.key);\n      assertEquals(\"lend me your <b>ear</b>\", result.highlightKey);\n      assertEquals(8, result.value);\n      assertEquals(new BytesRef(\"foobar\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"bar\")));\n\n      // Only one has \"bar\" context:\n      results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), asSet(\"bar\"), 10, true, true);\n      assertEquals(1, results.size());\n\n      result = results.get(0);\n      assertEquals(\"lend me your ear\", result.key);\n      assertEquals(\"lend me your <b>ear</b>\", result.highlightKey);\n      assertEquals(8, result.value);\n      assertEquals(new BytesRef(\"foobar\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"bar\")));\n\n      // None do not have \"foo\" context:\n      Map<BytesRef, BooleanClause.Occur> contextInfo = new HashMap<>();\n      contextInfo.put(new BytesRef(\"foo\"), BooleanClause.Occur.MUST_NOT);\n      results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), contextInfo, 10, true, true);\n      assertEquals(0, results.size());\n\n      // Only one does not have \"bar\" context:\n      contextInfo.clear();\n      contextInfo.put(new BytesRef(\"bar\"), BooleanClause.Occur.MUST_NOT);\n      results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), contextInfo, 10, true, true);\n      assertEquals(1, results.size());\n\n      result = results.get(0);\n      assertEquals(\"a penny saved is a penny earned\", result.key);\n      assertEquals(\"a penny saved is a penny <b>ear</b>ned\", result.highlightKey);\n      assertEquals(10, result.value);\n      assertEquals(new BytesRef(\"foobaz\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"baz\")));\n\n      // Both have \"foo\" or \"bar\" context:\n      results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), asSet(\"foo\", \"bar\"), 10, true, true);\n      assertEquals(2, results.size());\n\n      result = results.get(0);\n      assertEquals(\"a penny saved is a penny earned\", result.key);\n      assertEquals(\"a penny saved is a penny <b>ear</b>ned\", result.highlightKey);\n      assertEquals(10, result.value);\n      assertEquals(new BytesRef(\"foobaz\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"baz\")));\n\n      result = results.get(1);\n      assertEquals(\"lend me your ear\", result.key);\n      assertEquals(\"lend me your <b>ear</b>\", result.highlightKey);\n      assertEquals(8, result.value);\n      assertEquals(new BytesRef(\"foobar\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"bar\")));\n\n      // Both have \"bar\" or \"baz\" context:\n      results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), asSet(\"bar\", \"baz\"), 10, true, true);\n      assertEquals(2, results.size());\n\n      result = results.get(0);\n      assertEquals(\"a penny saved is a penny earned\", result.key);\n      assertEquals(\"a penny saved is a penny <b>ear</b>ned\", result.highlightKey);\n      assertEquals(10, result.value);\n      assertEquals(new BytesRef(\"foobaz\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"baz\")));\n\n      result = results.get(1);\n      assertEquals(\"lend me your ear\", result.key);\n      assertEquals(\"lend me your <b>ear</b>\", result.highlightKey);\n      assertEquals(8, result.value);\n      assertEquals(new BytesRef(\"foobar\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"bar\")));\n\n      // Only one has \"foo\" and \"bar\" context:\n      contextInfo.clear();\n      contextInfo.put(new BytesRef(\"foo\"), BooleanClause.Occur.MUST);\n      contextInfo.put(new BytesRef(\"bar\"), BooleanClause.Occur.MUST);\n      results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), contextInfo, 10, true, true);\n      assertEquals(1, results.size());\n\n      result = results.get(0);\n      assertEquals(\"lend me your ear\", result.key);\n      assertEquals(\"lend me your <b>ear</b>\", result.highlightKey);\n      assertEquals(8, result.value);\n      assertEquals(new BytesRef(\"foobar\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"bar\")));\n\n      // None have \"bar\" and \"baz\" context:\n      contextInfo.clear();\n      contextInfo.put(new BytesRef(\"bar\"), BooleanClause.Occur.MUST);\n      contextInfo.put(new BytesRef(\"baz\"), BooleanClause.Occur.MUST);\n      results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), contextInfo, 10, true, true);\n      assertEquals(0, results.size());\n\n      // None do not have \"foo\" and do not have \"bar\" context:\n      contextInfo.clear();\n      contextInfo.put(new BytesRef(\"foo\"), BooleanClause.Occur.MUST_NOT);\n      contextInfo.put(new BytesRef(\"bar\"), BooleanClause.Occur.MUST_NOT);\n      results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), contextInfo, 10, true, true);\n      assertEquals(0, results.size());\n\n      // Both do not have \"bar\" and do not have \"baz\" context:\n      contextInfo.clear();\n      contextInfo.put(new BytesRef(\"bar\"), BooleanClause.Occur.MUST_NOT);\n      contextInfo.put(new BytesRef(\"baz\"), BooleanClause.Occur.MUST_NOT);\n      results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), asSet(\"bar\", \"baz\"), 10, true, true);\n      assertEquals(2, results.size());\n\n      result = results.get(0);\n      assertEquals(\"a penny saved is a penny earned\", result.key);\n      assertEquals(\"a penny saved is a penny <b>ear</b>ned\", result.highlightKey);\n      assertEquals(10, result.value);\n      assertEquals(new BytesRef(\"foobaz\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"baz\")));\n\n      result = results.get(1);\n      assertEquals(\"lend me your ear\", result.key);\n      assertEquals(\"lend me your <b>ear</b>\", result.highlightKey);\n      assertEquals(8, result.value);\n      assertEquals(new BytesRef(\"foobar\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"bar\")));\n\n      // Only one has \"foo\" and does not have \"bar\" context:\n      contextInfo.clear();\n      contextInfo.put(new BytesRef(\"foo\"), BooleanClause.Occur.MUST);\n      contextInfo.put(new BytesRef(\"bar\"), BooleanClause.Occur.MUST_NOT);\n      results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), contextInfo, 10, true, true);\n      assertEquals(1, results.size());\n\n      result = results.get(0);\n      assertEquals(\"a penny saved is a penny earned\", result.key);\n      assertEquals(\"a penny saved is a penny <b>ear</b>ned\", result.highlightKey);\n      assertEquals(10, result.value);\n      assertEquals(new BytesRef(\"foobaz\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"baz\")));\n\n      suggester.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggesterTest#testBasicContext().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggesterTest#testBasicContext().mjava","sourceNew":"  // LUCENE-5528\n  public void testBasicContext() throws Exception {\n    Input keys[] = new Input[] {\n      new Input(\"lend me your ear\", 8, new BytesRef(\"foobar\"), asSet(\"foo\", \"bar\")),\n      new Input(\"a penny saved is a penny earned\", 10, new BytesRef(\"foobaz\"), asSet(\"foo\", \"baz\"))\n    };\n\n    Path tempDir = createTempDir(\"analyzingInfixContext\");\n\n    for(int iter=0;iter<2;iter++) {\n      AnalyzingInfixSuggester suggester;\n      Analyzer a = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n      if (iter == 0) {\n        suggester = new AnalyzingInfixSuggester(newFSDirectory(tempDir), a, a, 3, false);\n        suggester.build(new InputArrayIterator(keys));\n      } else {\n        // Test again, after close/reopen:\n        suggester = new AnalyzingInfixSuggester(newFSDirectory(tempDir), a, a, 3, false);\n      }\n\n      // No context provided, all results returned\n      List<LookupResult> results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), 10, true, true);\n      assertEquals(2, results.size());\n      LookupResult result = results.get(0);\n      assertEquals(\"a penny saved is a penny earned\", result.key);\n      assertEquals(\"a penny saved is a penny <b>ear</b>ned\", result.highlightKey);\n      assertEquals(10, result.value);\n      assertEquals(new BytesRef(\"foobaz\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"baz\")));\n\n      result = results.get(1);\n      assertEquals(\"lend me your ear\", result.key);\n      assertEquals(\"lend me your <b>ear</b>\", result.highlightKey);\n      assertEquals(8, result.value);\n      assertEquals(new BytesRef(\"foobar\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"bar\")));\n\n      // Both have \"foo\" context:\n      results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), asSet(\"foo\"), 10, true, true);\n      assertEquals(2, results.size());\n\n      result = results.get(0);\n      assertEquals(\"a penny saved is a penny earned\", result.key);\n      assertEquals(\"a penny saved is a penny <b>ear</b>ned\", result.highlightKey);\n      assertEquals(10, result.value);\n      assertEquals(new BytesRef(\"foobaz\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"baz\")));\n\n      result = results.get(1);\n      assertEquals(\"lend me your ear\", result.key);\n      assertEquals(\"lend me your <b>ear</b>\", result.highlightKey);\n      assertEquals(8, result.value);\n      assertEquals(new BytesRef(\"foobar\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"bar\")));\n\n      // Only one has \"bar\" context:\n      results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), asSet(\"bar\"), 10, true, true);\n      assertEquals(1, results.size());\n\n      result = results.get(0);\n      assertEquals(\"lend me your ear\", result.key);\n      assertEquals(\"lend me your <b>ear</b>\", result.highlightKey);\n      assertEquals(8, result.value);\n      assertEquals(new BytesRef(\"foobar\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"bar\")));\n\n      // None do not have \"foo\" context:\n      Map<BytesRef, BooleanClause.Occur> contextInfo = new HashMap<>();\n      contextInfo.put(new BytesRef(\"foo\"), BooleanClause.Occur.MUST_NOT);\n      results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), contextInfo, 10, true, true);\n      assertEquals(0, results.size());\n\n      // Only one does not have \"bar\" context:\n      contextInfo.clear();\n      contextInfo.put(new BytesRef(\"bar\"), BooleanClause.Occur.MUST_NOT);\n      results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), contextInfo, 10, true, true);\n      assertEquals(1, results.size());\n\n      result = results.get(0);\n      assertEquals(\"a penny saved is a penny earned\", result.key);\n      assertEquals(\"a penny saved is a penny <b>ear</b>ned\", result.highlightKey);\n      assertEquals(10, result.value);\n      assertEquals(new BytesRef(\"foobaz\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"baz\")));\n\n      // Both have \"foo\" or \"bar\" context:\n      results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), asSet(\"foo\", \"bar\"), 10, true, true);\n      assertEquals(2, results.size());\n\n      result = results.get(0);\n      assertEquals(\"a penny saved is a penny earned\", result.key);\n      assertEquals(\"a penny saved is a penny <b>ear</b>ned\", result.highlightKey);\n      assertEquals(10, result.value);\n      assertEquals(new BytesRef(\"foobaz\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"baz\")));\n\n      result = results.get(1);\n      assertEquals(\"lend me your ear\", result.key);\n      assertEquals(\"lend me your <b>ear</b>\", result.highlightKey);\n      assertEquals(8, result.value);\n      assertEquals(new BytesRef(\"foobar\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"bar\")));\n\n      // Both have \"bar\" or \"baz\" context:\n      results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), asSet(\"bar\", \"baz\"), 10, true, true);\n      assertEquals(2, results.size());\n\n      result = results.get(0);\n      assertEquals(\"a penny saved is a penny earned\", result.key);\n      assertEquals(\"a penny saved is a penny <b>ear</b>ned\", result.highlightKey);\n      assertEquals(10, result.value);\n      assertEquals(new BytesRef(\"foobaz\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"baz\")));\n\n      result = results.get(1);\n      assertEquals(\"lend me your ear\", result.key);\n      assertEquals(\"lend me your <b>ear</b>\", result.highlightKey);\n      assertEquals(8, result.value);\n      assertEquals(new BytesRef(\"foobar\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"bar\")));\n\n      // Only one has \"foo\" and \"bar\" context:\n      contextInfo.clear();\n      contextInfo.put(new BytesRef(\"foo\"), BooleanClause.Occur.MUST);\n      contextInfo.put(new BytesRef(\"bar\"), BooleanClause.Occur.MUST);\n      results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), contextInfo, 10, true, true);\n      assertEquals(1, results.size());\n\n      result = results.get(0);\n      assertEquals(\"lend me your ear\", result.key);\n      assertEquals(\"lend me your <b>ear</b>\", result.highlightKey);\n      assertEquals(8, result.value);\n      assertEquals(new BytesRef(\"foobar\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"bar\")));\n\n      // None have \"bar\" and \"baz\" context:\n      contextInfo.clear();\n      contextInfo.put(new BytesRef(\"bar\"), BooleanClause.Occur.MUST);\n      contextInfo.put(new BytesRef(\"baz\"), BooleanClause.Occur.MUST);\n      results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), contextInfo, 10, true, true);\n      assertEquals(0, results.size());\n\n      // None do not have \"foo\" and do not have \"bar\" context:\n      contextInfo.clear();\n      contextInfo.put(new BytesRef(\"foo\"), BooleanClause.Occur.MUST_NOT);\n      contextInfo.put(new BytesRef(\"bar\"), BooleanClause.Occur.MUST_NOT);\n      results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), contextInfo, 10, true, true);\n      assertEquals(0, results.size());\n\n      // Both do not have \"bar\" and do not have \"baz\" context:\n      contextInfo.clear();\n      contextInfo.put(new BytesRef(\"bar\"), BooleanClause.Occur.MUST_NOT);\n      contextInfo.put(new BytesRef(\"baz\"), BooleanClause.Occur.MUST_NOT);\n      results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), asSet(\"bar\", \"baz\"), 10, true, true);\n      assertEquals(2, results.size());\n\n      result = results.get(0);\n      assertEquals(\"a penny saved is a penny earned\", result.key);\n      assertEquals(\"a penny saved is a penny <b>ear</b>ned\", result.highlightKey);\n      assertEquals(10, result.value);\n      assertEquals(new BytesRef(\"foobaz\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"baz\")));\n\n      result = results.get(1);\n      assertEquals(\"lend me your ear\", result.key);\n      assertEquals(\"lend me your <b>ear</b>\", result.highlightKey);\n      assertEquals(8, result.value);\n      assertEquals(new BytesRef(\"foobar\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"bar\")));\n\n      // Only one has \"foo\" and does not have \"bar\" context:\n      contextInfo.clear();\n      contextInfo.put(new BytesRef(\"foo\"), BooleanClause.Occur.MUST);\n      contextInfo.put(new BytesRef(\"bar\"), BooleanClause.Occur.MUST_NOT);\n      results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), contextInfo, 10, true, true);\n      assertEquals(1, results.size());\n\n      result = results.get(0);\n      assertEquals(\"a penny saved is a penny earned\", result.key);\n      assertEquals(\"a penny saved is a penny <b>ear</b>ned\", result.highlightKey);\n      assertEquals(10, result.value);\n      assertEquals(new BytesRef(\"foobaz\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"baz\")));\n\n      suggester.close();\n      a.close();\n    }\n  }\n\n","sourceOld":"  // LUCENE-5528\n  public void testBasicContext() throws Exception {\n    Input keys[] = new Input[] {\n      new Input(\"lend me your ear\", 8, new BytesRef(\"foobar\"), asSet(\"foo\", \"bar\")),\n      new Input(\"a penny saved is a penny earned\", 10, new BytesRef(\"foobaz\"), asSet(\"foo\", \"baz\"))\n    };\n\n    Path tempDir = createTempDir(\"analyzingInfixContext\");\n\n    for(int iter=0;iter<2;iter++) {\n      AnalyzingInfixSuggester suggester;\n      Analyzer a = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n      if (iter == 0) {\n        suggester = new AnalyzingInfixSuggester(newFSDirectory(tempDir), a, a, 3, false);\n        suggester.build(new InputArrayIterator(keys));\n      } else {\n        // Test again, after close/reopen:\n        suggester = new AnalyzingInfixSuggester(newFSDirectory(tempDir), a, a, 3, false);\n      }\n\n      // No context provided, all results returned\n      List<LookupResult> results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), 10, true, true);\n      assertEquals(2, results.size());\n      LookupResult result = results.get(0);\n      assertEquals(\"a penny saved is a penny earned\", result.key);\n      assertEquals(\"a penny saved is a penny <b>ear</b>ned\", result.highlightKey);\n      assertEquals(10, result.value);\n      assertEquals(new BytesRef(\"foobaz\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"baz\")));\n\n      result = results.get(1);\n      assertEquals(\"lend me your ear\", result.key);\n      assertEquals(\"lend me your <b>ear</b>\", result.highlightKey);\n      assertEquals(8, result.value);\n      assertEquals(new BytesRef(\"foobar\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"bar\")));\n\n      // Both have \"foo\" context:\n      results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), asSet(\"foo\"), 10, true, true);\n      assertEquals(2, results.size());\n\n      result = results.get(0);\n      assertEquals(\"a penny saved is a penny earned\", result.key);\n      assertEquals(\"a penny saved is a penny <b>ear</b>ned\", result.highlightKey);\n      assertEquals(10, result.value);\n      assertEquals(new BytesRef(\"foobaz\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"baz\")));\n\n      result = results.get(1);\n      assertEquals(\"lend me your ear\", result.key);\n      assertEquals(\"lend me your <b>ear</b>\", result.highlightKey);\n      assertEquals(8, result.value);\n      assertEquals(new BytesRef(\"foobar\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"bar\")));\n\n      // Only one has \"bar\" context:\n      results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), asSet(\"bar\"), 10, true, true);\n      assertEquals(1, results.size());\n\n      result = results.get(0);\n      assertEquals(\"lend me your ear\", result.key);\n      assertEquals(\"lend me your <b>ear</b>\", result.highlightKey);\n      assertEquals(8, result.value);\n      assertEquals(new BytesRef(\"foobar\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"bar\")));\n\n      // None do not have \"foo\" context:\n      Map<BytesRef, BooleanClause.Occur> contextInfo = new HashMap<>();\n      contextInfo.put(new BytesRef(\"foo\"), BooleanClause.Occur.MUST_NOT);\n      results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), contextInfo, 10, true, true);\n      assertEquals(0, results.size());\n\n      // Only one does not have \"bar\" context:\n      contextInfo.clear();\n      contextInfo.put(new BytesRef(\"bar\"), BooleanClause.Occur.MUST_NOT);\n      results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), contextInfo, 10, true, true);\n      assertEquals(1, results.size());\n\n      result = results.get(0);\n      assertEquals(\"a penny saved is a penny earned\", result.key);\n      assertEquals(\"a penny saved is a penny <b>ear</b>ned\", result.highlightKey);\n      assertEquals(10, result.value);\n      assertEquals(new BytesRef(\"foobaz\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"baz\")));\n\n      // Both have \"foo\" or \"bar\" context:\n      results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), asSet(\"foo\", \"bar\"), 10, true, true);\n      assertEquals(2, results.size());\n\n      result = results.get(0);\n      assertEquals(\"a penny saved is a penny earned\", result.key);\n      assertEquals(\"a penny saved is a penny <b>ear</b>ned\", result.highlightKey);\n      assertEquals(10, result.value);\n      assertEquals(new BytesRef(\"foobaz\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"baz\")));\n\n      result = results.get(1);\n      assertEquals(\"lend me your ear\", result.key);\n      assertEquals(\"lend me your <b>ear</b>\", result.highlightKey);\n      assertEquals(8, result.value);\n      assertEquals(new BytesRef(\"foobar\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"bar\")));\n\n      // Both have \"bar\" or \"baz\" context:\n      results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), asSet(\"bar\", \"baz\"), 10, true, true);\n      assertEquals(2, results.size());\n\n      result = results.get(0);\n      assertEquals(\"a penny saved is a penny earned\", result.key);\n      assertEquals(\"a penny saved is a penny <b>ear</b>ned\", result.highlightKey);\n      assertEquals(10, result.value);\n      assertEquals(new BytesRef(\"foobaz\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"baz\")));\n\n      result = results.get(1);\n      assertEquals(\"lend me your ear\", result.key);\n      assertEquals(\"lend me your <b>ear</b>\", result.highlightKey);\n      assertEquals(8, result.value);\n      assertEquals(new BytesRef(\"foobar\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"bar\")));\n\n      // Only one has \"foo\" and \"bar\" context:\n      contextInfo.clear();\n      contextInfo.put(new BytesRef(\"foo\"), BooleanClause.Occur.MUST);\n      contextInfo.put(new BytesRef(\"bar\"), BooleanClause.Occur.MUST);\n      results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), contextInfo, 10, true, true);\n      assertEquals(1, results.size());\n\n      result = results.get(0);\n      assertEquals(\"lend me your ear\", result.key);\n      assertEquals(\"lend me your <b>ear</b>\", result.highlightKey);\n      assertEquals(8, result.value);\n      assertEquals(new BytesRef(\"foobar\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"bar\")));\n\n      // None have \"bar\" and \"baz\" context:\n      contextInfo.clear();\n      contextInfo.put(new BytesRef(\"bar\"), BooleanClause.Occur.MUST);\n      contextInfo.put(new BytesRef(\"baz\"), BooleanClause.Occur.MUST);\n      results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), contextInfo, 10, true, true);\n      assertEquals(0, results.size());\n\n      // None do not have \"foo\" and do not have \"bar\" context:\n      contextInfo.clear();\n      contextInfo.put(new BytesRef(\"foo\"), BooleanClause.Occur.MUST_NOT);\n      contextInfo.put(new BytesRef(\"bar\"), BooleanClause.Occur.MUST_NOT);\n      results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), contextInfo, 10, true, true);\n      assertEquals(0, results.size());\n\n      // Both do not have \"bar\" and do not have \"baz\" context:\n      contextInfo.clear();\n      contextInfo.put(new BytesRef(\"bar\"), BooleanClause.Occur.MUST_NOT);\n      contextInfo.put(new BytesRef(\"baz\"), BooleanClause.Occur.MUST_NOT);\n      results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), asSet(\"bar\", \"baz\"), 10, true, true);\n      assertEquals(2, results.size());\n\n      result = results.get(0);\n      assertEquals(\"a penny saved is a penny earned\", result.key);\n      assertEquals(\"a penny saved is a penny <b>ear</b>ned\", result.highlightKey);\n      assertEquals(10, result.value);\n      assertEquals(new BytesRef(\"foobaz\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"baz\")));\n\n      result = results.get(1);\n      assertEquals(\"lend me your ear\", result.key);\n      assertEquals(\"lend me your <b>ear</b>\", result.highlightKey);\n      assertEquals(8, result.value);\n      assertEquals(new BytesRef(\"foobar\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"bar\")));\n\n      // Only one has \"foo\" and does not have \"bar\" context:\n      contextInfo.clear();\n      contextInfo.put(new BytesRef(\"foo\"), BooleanClause.Occur.MUST);\n      contextInfo.put(new BytesRef(\"bar\"), BooleanClause.Occur.MUST_NOT);\n      results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), contextInfo, 10, true, true);\n      assertEquals(1, results.size());\n\n      result = results.get(0);\n      assertEquals(\"a penny saved is a penny earned\", result.key);\n      assertEquals(\"a penny saved is a penny <b>ear</b>ned\", result.highlightKey);\n      assertEquals(10, result.value);\n      assertEquals(new BytesRef(\"foobaz\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"baz\")));\n\n      suggester.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2204dea8cf3dcfbffdf7b4d3459cf5287cc1c30","date":1431701935,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggesterTest#testBasicContext().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggesterTest#testBasicContext().mjava","sourceNew":"  // LUCENE-5528 and LUCENE-6464\n  public void testBasicContext() throws Exception {\n    Input keys[] = new Input[] {\n      new Input(\"lend me your ear\", 8, new BytesRef(\"foobar\"), asSet(\"foo\", \"bar\")),\n      new Input(\"a penny saved is a penny earned\", 10, new BytesRef(\"foobaz\"), asSet(\"foo\", \"baz\"))\n    };\n\n    Path tempDir = createTempDir(\"analyzingInfixContext\");\n\n    for(int iter=0;iter<2;iter++) {\n      AnalyzingInfixSuggester suggester;\n      Analyzer a = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n      if (iter == 0) {\n        suggester = new AnalyzingInfixSuggester(newFSDirectory(tempDir), a, a, 3, false);\n        suggester.build(new InputArrayIterator(keys));\n      } else {\n        // Test again, after close/reopen:\n        suggester = new AnalyzingInfixSuggester(newFSDirectory(tempDir), a, a, 3, false);\n      }\n\n      // No context provided, all results returned\n      List<LookupResult> results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), 10, true, true);\n      assertEquals(2, results.size());\n      LookupResult result = results.get(0);\n      assertEquals(\"a penny saved is a penny earned\", result.key);\n      assertEquals(\"a penny saved is a penny <b>ear</b>ned\", result.highlightKey);\n      assertEquals(10, result.value);\n      assertEquals(new BytesRef(\"foobaz\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"baz\")));\n\n      result = results.get(1);\n      assertEquals(\"lend me your ear\", result.key);\n      assertEquals(\"lend me your <b>ear</b>\", result.highlightKey);\n      assertEquals(8, result.value);\n      assertEquals(new BytesRef(\"foobar\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"bar\")));\n\n      // Both have \"foo\" context:\n      results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), asSet(\"foo\"), 10, true, true);\n      assertEquals(2, results.size());\n\n      result = results.get(0);\n      assertEquals(\"a penny saved is a penny earned\", result.key);\n      assertEquals(\"a penny saved is a penny <b>ear</b>ned\", result.highlightKey);\n      assertEquals(10, result.value);\n      assertEquals(new BytesRef(\"foobaz\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"baz\")));\n\n      result = results.get(1);\n      assertEquals(\"lend me your ear\", result.key);\n      assertEquals(\"lend me your <b>ear</b>\", result.highlightKey);\n      assertEquals(8, result.value);\n      assertEquals(new BytesRef(\"foobar\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"bar\")));\n\n      // Only one has \"bar\" context:\n      results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), asSet(\"bar\"), 10, true, true);\n      assertEquals(1, results.size());\n\n      result = results.get(0);\n      assertEquals(\"lend me your ear\", result.key);\n      assertEquals(\"lend me your <b>ear</b>\", result.highlightKey);\n      assertEquals(8, result.value);\n      assertEquals(new BytesRef(\"foobar\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"bar\")));\n\n      // None do not have \"foo\" context:\n      Map<BytesRef, BooleanClause.Occur> contextInfo = new HashMap<>();\n      contextInfo.put(new BytesRef(\"foo\"), BooleanClause.Occur.MUST_NOT);\n      results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), contextInfo, 10, true, true);\n      assertEquals(0, results.size());\n\n      // Only one does not have \"bar\" context:\n      contextInfo.clear();\n      contextInfo.put(new BytesRef(\"bar\"), BooleanClause.Occur.MUST_NOT);\n      results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), contextInfo, 10, true, true);\n      assertEquals(1, results.size());\n\n      result = results.get(0);\n      assertEquals(\"a penny saved is a penny earned\", result.key);\n      assertEquals(\"a penny saved is a penny <b>ear</b>ned\", result.highlightKey);\n      assertEquals(10, result.value);\n      assertEquals(new BytesRef(\"foobaz\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"baz\")));\n\n      // Both have \"foo\" or \"bar\" context:\n      results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), asSet(\"foo\", \"bar\"), 10, true, true);\n      assertEquals(2, results.size());\n\n      result = results.get(0);\n      assertEquals(\"a penny saved is a penny earned\", result.key);\n      assertEquals(\"a penny saved is a penny <b>ear</b>ned\", result.highlightKey);\n      assertEquals(10, result.value);\n      assertEquals(new BytesRef(\"foobaz\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"baz\")));\n\n      result = results.get(1);\n      assertEquals(\"lend me your ear\", result.key);\n      assertEquals(\"lend me your <b>ear</b>\", result.highlightKey);\n      assertEquals(8, result.value);\n      assertEquals(new BytesRef(\"foobar\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"bar\")));\n\n      // Both have \"bar\" or \"baz\" context:\n      results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), asSet(\"bar\", \"baz\"), 10, true, true);\n      assertEquals(2, results.size());\n\n      result = results.get(0);\n      assertEquals(\"a penny saved is a penny earned\", result.key);\n      assertEquals(\"a penny saved is a penny <b>ear</b>ned\", result.highlightKey);\n      assertEquals(10, result.value);\n      assertEquals(new BytesRef(\"foobaz\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"baz\")));\n\n      result = results.get(1);\n      assertEquals(\"lend me your ear\", result.key);\n      assertEquals(\"lend me your <b>ear</b>\", result.highlightKey);\n      assertEquals(8, result.value);\n      assertEquals(new BytesRef(\"foobar\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"bar\")));\n\n      // Only one has \"foo\" and \"bar\" context:\n      contextInfo.clear();\n      contextInfo.put(new BytesRef(\"foo\"), BooleanClause.Occur.MUST);\n      contextInfo.put(new BytesRef(\"bar\"), BooleanClause.Occur.MUST);\n      results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), contextInfo, 10, true, true);\n      assertEquals(1, results.size());\n\n      result = results.get(0);\n      assertEquals(\"lend me your ear\", result.key);\n      assertEquals(\"lend me your <b>ear</b>\", result.highlightKey);\n      assertEquals(8, result.value);\n      assertEquals(new BytesRef(\"foobar\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"bar\")));\n\n      // None have \"bar\" and \"baz\" context:\n      contextInfo.clear();\n      contextInfo.put(new BytesRef(\"bar\"), BooleanClause.Occur.MUST);\n      contextInfo.put(new BytesRef(\"baz\"), BooleanClause.Occur.MUST);\n      results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), contextInfo, 10, true, true);\n      assertEquals(0, results.size());\n\n      // None do not have \"foo\" and do not have \"bar\" context:\n      contextInfo.clear();\n      contextInfo.put(new BytesRef(\"foo\"), BooleanClause.Occur.MUST_NOT);\n      contextInfo.put(new BytesRef(\"bar\"), BooleanClause.Occur.MUST_NOT);\n      results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), contextInfo, 10, true, true);\n      assertEquals(0, results.size());\n\n      // Both do not have \"bar\" and do not have \"baz\" context:\n      contextInfo.clear();\n      contextInfo.put(new BytesRef(\"bar\"), BooleanClause.Occur.MUST_NOT);\n      contextInfo.put(new BytesRef(\"baz\"), BooleanClause.Occur.MUST_NOT);\n      results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), asSet(\"bar\", \"baz\"), 10, true, true);\n      assertEquals(2, results.size());\n\n      result = results.get(0);\n      assertEquals(\"a penny saved is a penny earned\", result.key);\n      assertEquals(\"a penny saved is a penny <b>ear</b>ned\", result.highlightKey);\n      assertEquals(10, result.value);\n      assertEquals(new BytesRef(\"foobaz\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"baz\")));\n\n      result = results.get(1);\n      assertEquals(\"lend me your ear\", result.key);\n      assertEquals(\"lend me your <b>ear</b>\", result.highlightKey);\n      assertEquals(8, result.value);\n      assertEquals(new BytesRef(\"foobar\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"bar\")));\n\n      // Only one has \"foo\" and does not have \"bar\" context:\n      contextInfo.clear();\n      contextInfo.put(new BytesRef(\"foo\"), BooleanClause.Occur.MUST);\n      contextInfo.put(new BytesRef(\"bar\"), BooleanClause.Occur.MUST_NOT);\n      results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), contextInfo, 10, true, true);\n      assertEquals(1, results.size());\n\n      result = results.get(0);\n      assertEquals(\"a penny saved is a penny earned\", result.key);\n      assertEquals(\"a penny saved is a penny <b>ear</b>ned\", result.highlightKey);\n      assertEquals(10, result.value);\n      assertEquals(new BytesRef(\"foobaz\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"baz\")));\n      \n      //LUCENE-6464 Using the advanced context filtering by query. \n      //Note that this is just a sanity test as all the above tests run through the filter by query method\n      BooleanQuery query = new BooleanQuery();\n      suggester.addContextToQuery(query, new BytesRef(\"foo\"), BooleanClause.Occur.MUST);\n      suggester.addContextToQuery(query, new BytesRef(\"bar\"), BooleanClause.Occur.MUST_NOT);\n      results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), query, 10, true, true);\n      assertEquals(1, results.size());\n      \n      suggester.close();\n      a.close();\n    }\n  }\n\n","sourceOld":"  // LUCENE-5528\n  public void testBasicContext() throws Exception {\n    Input keys[] = new Input[] {\n      new Input(\"lend me your ear\", 8, new BytesRef(\"foobar\"), asSet(\"foo\", \"bar\")),\n      new Input(\"a penny saved is a penny earned\", 10, new BytesRef(\"foobaz\"), asSet(\"foo\", \"baz\"))\n    };\n\n    Path tempDir = createTempDir(\"analyzingInfixContext\");\n\n    for(int iter=0;iter<2;iter++) {\n      AnalyzingInfixSuggester suggester;\n      Analyzer a = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n      if (iter == 0) {\n        suggester = new AnalyzingInfixSuggester(newFSDirectory(tempDir), a, a, 3, false);\n        suggester.build(new InputArrayIterator(keys));\n      } else {\n        // Test again, after close/reopen:\n        suggester = new AnalyzingInfixSuggester(newFSDirectory(tempDir), a, a, 3, false);\n      }\n\n      // No context provided, all results returned\n      List<LookupResult> results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), 10, true, true);\n      assertEquals(2, results.size());\n      LookupResult result = results.get(0);\n      assertEquals(\"a penny saved is a penny earned\", result.key);\n      assertEquals(\"a penny saved is a penny <b>ear</b>ned\", result.highlightKey);\n      assertEquals(10, result.value);\n      assertEquals(new BytesRef(\"foobaz\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"baz\")));\n\n      result = results.get(1);\n      assertEquals(\"lend me your ear\", result.key);\n      assertEquals(\"lend me your <b>ear</b>\", result.highlightKey);\n      assertEquals(8, result.value);\n      assertEquals(new BytesRef(\"foobar\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"bar\")));\n\n      // Both have \"foo\" context:\n      results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), asSet(\"foo\"), 10, true, true);\n      assertEquals(2, results.size());\n\n      result = results.get(0);\n      assertEquals(\"a penny saved is a penny earned\", result.key);\n      assertEquals(\"a penny saved is a penny <b>ear</b>ned\", result.highlightKey);\n      assertEquals(10, result.value);\n      assertEquals(new BytesRef(\"foobaz\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"baz\")));\n\n      result = results.get(1);\n      assertEquals(\"lend me your ear\", result.key);\n      assertEquals(\"lend me your <b>ear</b>\", result.highlightKey);\n      assertEquals(8, result.value);\n      assertEquals(new BytesRef(\"foobar\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"bar\")));\n\n      // Only one has \"bar\" context:\n      results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), asSet(\"bar\"), 10, true, true);\n      assertEquals(1, results.size());\n\n      result = results.get(0);\n      assertEquals(\"lend me your ear\", result.key);\n      assertEquals(\"lend me your <b>ear</b>\", result.highlightKey);\n      assertEquals(8, result.value);\n      assertEquals(new BytesRef(\"foobar\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"bar\")));\n\n      // None do not have \"foo\" context:\n      Map<BytesRef, BooleanClause.Occur> contextInfo = new HashMap<>();\n      contextInfo.put(new BytesRef(\"foo\"), BooleanClause.Occur.MUST_NOT);\n      results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), contextInfo, 10, true, true);\n      assertEquals(0, results.size());\n\n      // Only one does not have \"bar\" context:\n      contextInfo.clear();\n      contextInfo.put(new BytesRef(\"bar\"), BooleanClause.Occur.MUST_NOT);\n      results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), contextInfo, 10, true, true);\n      assertEquals(1, results.size());\n\n      result = results.get(0);\n      assertEquals(\"a penny saved is a penny earned\", result.key);\n      assertEquals(\"a penny saved is a penny <b>ear</b>ned\", result.highlightKey);\n      assertEquals(10, result.value);\n      assertEquals(new BytesRef(\"foobaz\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"baz\")));\n\n      // Both have \"foo\" or \"bar\" context:\n      results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), asSet(\"foo\", \"bar\"), 10, true, true);\n      assertEquals(2, results.size());\n\n      result = results.get(0);\n      assertEquals(\"a penny saved is a penny earned\", result.key);\n      assertEquals(\"a penny saved is a penny <b>ear</b>ned\", result.highlightKey);\n      assertEquals(10, result.value);\n      assertEquals(new BytesRef(\"foobaz\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"baz\")));\n\n      result = results.get(1);\n      assertEquals(\"lend me your ear\", result.key);\n      assertEquals(\"lend me your <b>ear</b>\", result.highlightKey);\n      assertEquals(8, result.value);\n      assertEquals(new BytesRef(\"foobar\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"bar\")));\n\n      // Both have \"bar\" or \"baz\" context:\n      results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), asSet(\"bar\", \"baz\"), 10, true, true);\n      assertEquals(2, results.size());\n\n      result = results.get(0);\n      assertEquals(\"a penny saved is a penny earned\", result.key);\n      assertEquals(\"a penny saved is a penny <b>ear</b>ned\", result.highlightKey);\n      assertEquals(10, result.value);\n      assertEquals(new BytesRef(\"foobaz\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"baz\")));\n\n      result = results.get(1);\n      assertEquals(\"lend me your ear\", result.key);\n      assertEquals(\"lend me your <b>ear</b>\", result.highlightKey);\n      assertEquals(8, result.value);\n      assertEquals(new BytesRef(\"foobar\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"bar\")));\n\n      // Only one has \"foo\" and \"bar\" context:\n      contextInfo.clear();\n      contextInfo.put(new BytesRef(\"foo\"), BooleanClause.Occur.MUST);\n      contextInfo.put(new BytesRef(\"bar\"), BooleanClause.Occur.MUST);\n      results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), contextInfo, 10, true, true);\n      assertEquals(1, results.size());\n\n      result = results.get(0);\n      assertEquals(\"lend me your ear\", result.key);\n      assertEquals(\"lend me your <b>ear</b>\", result.highlightKey);\n      assertEquals(8, result.value);\n      assertEquals(new BytesRef(\"foobar\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"bar\")));\n\n      // None have \"bar\" and \"baz\" context:\n      contextInfo.clear();\n      contextInfo.put(new BytesRef(\"bar\"), BooleanClause.Occur.MUST);\n      contextInfo.put(new BytesRef(\"baz\"), BooleanClause.Occur.MUST);\n      results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), contextInfo, 10, true, true);\n      assertEquals(0, results.size());\n\n      // None do not have \"foo\" and do not have \"bar\" context:\n      contextInfo.clear();\n      contextInfo.put(new BytesRef(\"foo\"), BooleanClause.Occur.MUST_NOT);\n      contextInfo.put(new BytesRef(\"bar\"), BooleanClause.Occur.MUST_NOT);\n      results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), contextInfo, 10, true, true);\n      assertEquals(0, results.size());\n\n      // Both do not have \"bar\" and do not have \"baz\" context:\n      contextInfo.clear();\n      contextInfo.put(new BytesRef(\"bar\"), BooleanClause.Occur.MUST_NOT);\n      contextInfo.put(new BytesRef(\"baz\"), BooleanClause.Occur.MUST_NOT);\n      results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), asSet(\"bar\", \"baz\"), 10, true, true);\n      assertEquals(2, results.size());\n\n      result = results.get(0);\n      assertEquals(\"a penny saved is a penny earned\", result.key);\n      assertEquals(\"a penny saved is a penny <b>ear</b>ned\", result.highlightKey);\n      assertEquals(10, result.value);\n      assertEquals(new BytesRef(\"foobaz\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"baz\")));\n\n      result = results.get(1);\n      assertEquals(\"lend me your ear\", result.key);\n      assertEquals(\"lend me your <b>ear</b>\", result.highlightKey);\n      assertEquals(8, result.value);\n      assertEquals(new BytesRef(\"foobar\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"bar\")));\n\n      // Only one has \"foo\" and does not have \"bar\" context:\n      contextInfo.clear();\n      contextInfo.put(new BytesRef(\"foo\"), BooleanClause.Occur.MUST);\n      contextInfo.put(new BytesRef(\"bar\"), BooleanClause.Occur.MUST_NOT);\n      results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), contextInfo, 10, true, true);\n      assertEquals(1, results.size());\n\n      result = results.get(0);\n      assertEquals(\"a penny saved is a penny earned\", result.key);\n      assertEquals(\"a penny saved is a penny <b>ear</b>ned\", result.highlightKey);\n      assertEquals(10, result.value);\n      assertEquals(new BytesRef(\"foobaz\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"baz\")));\n\n      suggester.close();\n      a.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f68d01cf19df971dcdcb05e30247f4ad7ec9747","date":1434611645,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggesterTest#testBasicContext().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggesterTest#testBasicContext().mjava","sourceNew":"  // LUCENE-5528 and LUCENE-6464\n  public void testBasicContext() throws Exception {\n    Input keys[] = new Input[] {\n      new Input(\"lend me your ear\", 8, new BytesRef(\"foobar\"), asSet(\"foo\", \"bar\")),\n      new Input(\"a penny saved is a penny earned\", 10, new BytesRef(\"foobaz\"), asSet(\"foo\", \"baz\"))\n    };\n\n    Path tempDir = createTempDir(\"analyzingInfixContext\");\n\n    for(int iter=0;iter<2;iter++) {\n      AnalyzingInfixSuggester suggester;\n      Analyzer a = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n      if (iter == 0) {\n        suggester = new AnalyzingInfixSuggester(newFSDirectory(tempDir), a, a, 3, false);\n        suggester.build(new InputArrayIterator(keys));\n      } else {\n        // Test again, after close/reopen:\n        suggester = new AnalyzingInfixSuggester(newFSDirectory(tempDir), a, a, 3, false);\n      }\n\n      // No context provided, all results returned\n      List<LookupResult> results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), 10, true, true);\n      assertEquals(2, results.size());\n      LookupResult result = results.get(0);\n      assertEquals(\"a penny saved is a penny earned\", result.key);\n      assertEquals(\"a penny saved is a penny <b>ear</b>ned\", result.highlightKey);\n      assertEquals(10, result.value);\n      assertEquals(new BytesRef(\"foobaz\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"baz\")));\n\n      result = results.get(1);\n      assertEquals(\"lend me your ear\", result.key);\n      assertEquals(\"lend me your <b>ear</b>\", result.highlightKey);\n      assertEquals(8, result.value);\n      assertEquals(new BytesRef(\"foobar\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"bar\")));\n\n      // Both have \"foo\" context:\n      results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), asSet(\"foo\"), 10, true, true);\n      assertEquals(2, results.size());\n\n      result = results.get(0);\n      assertEquals(\"a penny saved is a penny earned\", result.key);\n      assertEquals(\"a penny saved is a penny <b>ear</b>ned\", result.highlightKey);\n      assertEquals(10, result.value);\n      assertEquals(new BytesRef(\"foobaz\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"baz\")));\n\n      result = results.get(1);\n      assertEquals(\"lend me your ear\", result.key);\n      assertEquals(\"lend me your <b>ear</b>\", result.highlightKey);\n      assertEquals(8, result.value);\n      assertEquals(new BytesRef(\"foobar\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"bar\")));\n\n      // Only one has \"bar\" context:\n      results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), asSet(\"bar\"), 10, true, true);\n      assertEquals(1, results.size());\n\n      result = results.get(0);\n      assertEquals(\"lend me your ear\", result.key);\n      assertEquals(\"lend me your <b>ear</b>\", result.highlightKey);\n      assertEquals(8, result.value);\n      assertEquals(new BytesRef(\"foobar\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"bar\")));\n\n      // None do not have \"foo\" context:\n      Map<BytesRef, BooleanClause.Occur> contextInfo = new HashMap<>();\n      contextInfo.put(new BytesRef(\"foo\"), BooleanClause.Occur.MUST_NOT);\n      results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), contextInfo, 10, true, true);\n      assertEquals(0, results.size());\n\n      // Only one does not have \"bar\" context:\n      contextInfo.clear();\n      contextInfo.put(new BytesRef(\"bar\"), BooleanClause.Occur.MUST_NOT);\n      results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), contextInfo, 10, true, true);\n      assertEquals(1, results.size());\n\n      result = results.get(0);\n      assertEquals(\"a penny saved is a penny earned\", result.key);\n      assertEquals(\"a penny saved is a penny <b>ear</b>ned\", result.highlightKey);\n      assertEquals(10, result.value);\n      assertEquals(new BytesRef(\"foobaz\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"baz\")));\n\n      // Both have \"foo\" or \"bar\" context:\n      results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), asSet(\"foo\", \"bar\"), 10, true, true);\n      assertEquals(2, results.size());\n\n      result = results.get(0);\n      assertEquals(\"a penny saved is a penny earned\", result.key);\n      assertEquals(\"a penny saved is a penny <b>ear</b>ned\", result.highlightKey);\n      assertEquals(10, result.value);\n      assertEquals(new BytesRef(\"foobaz\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"baz\")));\n\n      result = results.get(1);\n      assertEquals(\"lend me your ear\", result.key);\n      assertEquals(\"lend me your <b>ear</b>\", result.highlightKey);\n      assertEquals(8, result.value);\n      assertEquals(new BytesRef(\"foobar\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"bar\")));\n\n      // Both have \"bar\" or \"baz\" context:\n      results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), asSet(\"bar\", \"baz\"), 10, true, true);\n      assertEquals(2, results.size());\n\n      result = results.get(0);\n      assertEquals(\"a penny saved is a penny earned\", result.key);\n      assertEquals(\"a penny saved is a penny <b>ear</b>ned\", result.highlightKey);\n      assertEquals(10, result.value);\n      assertEquals(new BytesRef(\"foobaz\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"baz\")));\n\n      result = results.get(1);\n      assertEquals(\"lend me your ear\", result.key);\n      assertEquals(\"lend me your <b>ear</b>\", result.highlightKey);\n      assertEquals(8, result.value);\n      assertEquals(new BytesRef(\"foobar\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"bar\")));\n\n      // Only one has \"foo\" and \"bar\" context:\n      contextInfo.clear();\n      contextInfo.put(new BytesRef(\"foo\"), BooleanClause.Occur.MUST);\n      contextInfo.put(new BytesRef(\"bar\"), BooleanClause.Occur.MUST);\n      results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), contextInfo, 10, true, true);\n      assertEquals(1, results.size());\n\n      result = results.get(0);\n      assertEquals(\"lend me your ear\", result.key);\n      assertEquals(\"lend me your <b>ear</b>\", result.highlightKey);\n      assertEquals(8, result.value);\n      assertEquals(new BytesRef(\"foobar\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"bar\")));\n\n      // None have \"bar\" and \"baz\" context:\n      contextInfo.clear();\n      contextInfo.put(new BytesRef(\"bar\"), BooleanClause.Occur.MUST);\n      contextInfo.put(new BytesRef(\"baz\"), BooleanClause.Occur.MUST);\n      results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), contextInfo, 10, true, true);\n      assertEquals(0, results.size());\n\n      // None do not have \"foo\" and do not have \"bar\" context:\n      contextInfo.clear();\n      contextInfo.put(new BytesRef(\"foo\"), BooleanClause.Occur.MUST_NOT);\n      contextInfo.put(new BytesRef(\"bar\"), BooleanClause.Occur.MUST_NOT);\n      results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), contextInfo, 10, true, true);\n      assertEquals(0, results.size());\n\n      // Both do not have \"bar\" and do not have \"baz\" context:\n      contextInfo.clear();\n      contextInfo.put(new BytesRef(\"bar\"), BooleanClause.Occur.MUST_NOT);\n      contextInfo.put(new BytesRef(\"baz\"), BooleanClause.Occur.MUST_NOT);\n      results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), asSet(\"bar\", \"baz\"), 10, true, true);\n      assertEquals(2, results.size());\n\n      result = results.get(0);\n      assertEquals(\"a penny saved is a penny earned\", result.key);\n      assertEquals(\"a penny saved is a penny <b>ear</b>ned\", result.highlightKey);\n      assertEquals(10, result.value);\n      assertEquals(new BytesRef(\"foobaz\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"baz\")));\n\n      result = results.get(1);\n      assertEquals(\"lend me your ear\", result.key);\n      assertEquals(\"lend me your <b>ear</b>\", result.highlightKey);\n      assertEquals(8, result.value);\n      assertEquals(new BytesRef(\"foobar\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"bar\")));\n\n      // Only one has \"foo\" and does not have \"bar\" context:\n      contextInfo.clear();\n      contextInfo.put(new BytesRef(\"foo\"), BooleanClause.Occur.MUST);\n      contextInfo.put(new BytesRef(\"bar\"), BooleanClause.Occur.MUST_NOT);\n      results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), contextInfo, 10, true, true);\n      assertEquals(1, results.size());\n\n      result = results.get(0);\n      assertEquals(\"a penny saved is a penny earned\", result.key);\n      assertEquals(\"a penny saved is a penny <b>ear</b>ned\", result.highlightKey);\n      assertEquals(10, result.value);\n      assertEquals(new BytesRef(\"foobaz\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"baz\")));\n      \n      //LUCENE-6464 Using the advanced context filtering by query. \n      //Note that this is just a sanity test as all the above tests run through the filter by query method\n      BooleanQuery.Builder query = new BooleanQuery.Builder();\n      suggester.addContextToQuery(query, new BytesRef(\"foo\"), BooleanClause.Occur.MUST);\n      suggester.addContextToQuery(query, new BytesRef(\"bar\"), BooleanClause.Occur.MUST_NOT);\n      results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), query.build(), 10, true, true);\n      assertEquals(1, results.size());\n      \n      suggester.close();\n      a.close();\n    }\n  }\n\n","sourceOld":"  // LUCENE-5528 and LUCENE-6464\n  public void testBasicContext() throws Exception {\n    Input keys[] = new Input[] {\n      new Input(\"lend me your ear\", 8, new BytesRef(\"foobar\"), asSet(\"foo\", \"bar\")),\n      new Input(\"a penny saved is a penny earned\", 10, new BytesRef(\"foobaz\"), asSet(\"foo\", \"baz\"))\n    };\n\n    Path tempDir = createTempDir(\"analyzingInfixContext\");\n\n    for(int iter=0;iter<2;iter++) {\n      AnalyzingInfixSuggester suggester;\n      Analyzer a = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n      if (iter == 0) {\n        suggester = new AnalyzingInfixSuggester(newFSDirectory(tempDir), a, a, 3, false);\n        suggester.build(new InputArrayIterator(keys));\n      } else {\n        // Test again, after close/reopen:\n        suggester = new AnalyzingInfixSuggester(newFSDirectory(tempDir), a, a, 3, false);\n      }\n\n      // No context provided, all results returned\n      List<LookupResult> results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), 10, true, true);\n      assertEquals(2, results.size());\n      LookupResult result = results.get(0);\n      assertEquals(\"a penny saved is a penny earned\", result.key);\n      assertEquals(\"a penny saved is a penny <b>ear</b>ned\", result.highlightKey);\n      assertEquals(10, result.value);\n      assertEquals(new BytesRef(\"foobaz\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"baz\")));\n\n      result = results.get(1);\n      assertEquals(\"lend me your ear\", result.key);\n      assertEquals(\"lend me your <b>ear</b>\", result.highlightKey);\n      assertEquals(8, result.value);\n      assertEquals(new BytesRef(\"foobar\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"bar\")));\n\n      // Both have \"foo\" context:\n      results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), asSet(\"foo\"), 10, true, true);\n      assertEquals(2, results.size());\n\n      result = results.get(0);\n      assertEquals(\"a penny saved is a penny earned\", result.key);\n      assertEquals(\"a penny saved is a penny <b>ear</b>ned\", result.highlightKey);\n      assertEquals(10, result.value);\n      assertEquals(new BytesRef(\"foobaz\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"baz\")));\n\n      result = results.get(1);\n      assertEquals(\"lend me your ear\", result.key);\n      assertEquals(\"lend me your <b>ear</b>\", result.highlightKey);\n      assertEquals(8, result.value);\n      assertEquals(new BytesRef(\"foobar\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"bar\")));\n\n      // Only one has \"bar\" context:\n      results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), asSet(\"bar\"), 10, true, true);\n      assertEquals(1, results.size());\n\n      result = results.get(0);\n      assertEquals(\"lend me your ear\", result.key);\n      assertEquals(\"lend me your <b>ear</b>\", result.highlightKey);\n      assertEquals(8, result.value);\n      assertEquals(new BytesRef(\"foobar\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"bar\")));\n\n      // None do not have \"foo\" context:\n      Map<BytesRef, BooleanClause.Occur> contextInfo = new HashMap<>();\n      contextInfo.put(new BytesRef(\"foo\"), BooleanClause.Occur.MUST_NOT);\n      results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), contextInfo, 10, true, true);\n      assertEquals(0, results.size());\n\n      // Only one does not have \"bar\" context:\n      contextInfo.clear();\n      contextInfo.put(new BytesRef(\"bar\"), BooleanClause.Occur.MUST_NOT);\n      results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), contextInfo, 10, true, true);\n      assertEquals(1, results.size());\n\n      result = results.get(0);\n      assertEquals(\"a penny saved is a penny earned\", result.key);\n      assertEquals(\"a penny saved is a penny <b>ear</b>ned\", result.highlightKey);\n      assertEquals(10, result.value);\n      assertEquals(new BytesRef(\"foobaz\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"baz\")));\n\n      // Both have \"foo\" or \"bar\" context:\n      results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), asSet(\"foo\", \"bar\"), 10, true, true);\n      assertEquals(2, results.size());\n\n      result = results.get(0);\n      assertEquals(\"a penny saved is a penny earned\", result.key);\n      assertEquals(\"a penny saved is a penny <b>ear</b>ned\", result.highlightKey);\n      assertEquals(10, result.value);\n      assertEquals(new BytesRef(\"foobaz\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"baz\")));\n\n      result = results.get(1);\n      assertEquals(\"lend me your ear\", result.key);\n      assertEquals(\"lend me your <b>ear</b>\", result.highlightKey);\n      assertEquals(8, result.value);\n      assertEquals(new BytesRef(\"foobar\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"bar\")));\n\n      // Both have \"bar\" or \"baz\" context:\n      results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), asSet(\"bar\", \"baz\"), 10, true, true);\n      assertEquals(2, results.size());\n\n      result = results.get(0);\n      assertEquals(\"a penny saved is a penny earned\", result.key);\n      assertEquals(\"a penny saved is a penny <b>ear</b>ned\", result.highlightKey);\n      assertEquals(10, result.value);\n      assertEquals(new BytesRef(\"foobaz\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"baz\")));\n\n      result = results.get(1);\n      assertEquals(\"lend me your ear\", result.key);\n      assertEquals(\"lend me your <b>ear</b>\", result.highlightKey);\n      assertEquals(8, result.value);\n      assertEquals(new BytesRef(\"foobar\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"bar\")));\n\n      // Only one has \"foo\" and \"bar\" context:\n      contextInfo.clear();\n      contextInfo.put(new BytesRef(\"foo\"), BooleanClause.Occur.MUST);\n      contextInfo.put(new BytesRef(\"bar\"), BooleanClause.Occur.MUST);\n      results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), contextInfo, 10, true, true);\n      assertEquals(1, results.size());\n\n      result = results.get(0);\n      assertEquals(\"lend me your ear\", result.key);\n      assertEquals(\"lend me your <b>ear</b>\", result.highlightKey);\n      assertEquals(8, result.value);\n      assertEquals(new BytesRef(\"foobar\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"bar\")));\n\n      // None have \"bar\" and \"baz\" context:\n      contextInfo.clear();\n      contextInfo.put(new BytesRef(\"bar\"), BooleanClause.Occur.MUST);\n      contextInfo.put(new BytesRef(\"baz\"), BooleanClause.Occur.MUST);\n      results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), contextInfo, 10, true, true);\n      assertEquals(0, results.size());\n\n      // None do not have \"foo\" and do not have \"bar\" context:\n      contextInfo.clear();\n      contextInfo.put(new BytesRef(\"foo\"), BooleanClause.Occur.MUST_NOT);\n      contextInfo.put(new BytesRef(\"bar\"), BooleanClause.Occur.MUST_NOT);\n      results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), contextInfo, 10, true, true);\n      assertEquals(0, results.size());\n\n      // Both do not have \"bar\" and do not have \"baz\" context:\n      contextInfo.clear();\n      contextInfo.put(new BytesRef(\"bar\"), BooleanClause.Occur.MUST_NOT);\n      contextInfo.put(new BytesRef(\"baz\"), BooleanClause.Occur.MUST_NOT);\n      results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), asSet(\"bar\", \"baz\"), 10, true, true);\n      assertEquals(2, results.size());\n\n      result = results.get(0);\n      assertEquals(\"a penny saved is a penny earned\", result.key);\n      assertEquals(\"a penny saved is a penny <b>ear</b>ned\", result.highlightKey);\n      assertEquals(10, result.value);\n      assertEquals(new BytesRef(\"foobaz\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"baz\")));\n\n      result = results.get(1);\n      assertEquals(\"lend me your ear\", result.key);\n      assertEquals(\"lend me your <b>ear</b>\", result.highlightKey);\n      assertEquals(8, result.value);\n      assertEquals(new BytesRef(\"foobar\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"bar\")));\n\n      // Only one has \"foo\" and does not have \"bar\" context:\n      contextInfo.clear();\n      contextInfo.put(new BytesRef(\"foo\"), BooleanClause.Occur.MUST);\n      contextInfo.put(new BytesRef(\"bar\"), BooleanClause.Occur.MUST_NOT);\n      results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), contextInfo, 10, true, true);\n      assertEquals(1, results.size());\n\n      result = results.get(0);\n      assertEquals(\"a penny saved is a penny earned\", result.key);\n      assertEquals(\"a penny saved is a penny <b>ear</b>ned\", result.highlightKey);\n      assertEquals(10, result.value);\n      assertEquals(new BytesRef(\"foobaz\"), result.payload);\n      assertNotNull(result.contexts);\n      assertEquals(2, result.contexts.size());\n      assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n      assertTrue(result.contexts.contains(new BytesRef(\"baz\")));\n      \n      //LUCENE-6464 Using the advanced context filtering by query. \n      //Note that this is just a sanity test as all the above tests run through the filter by query method\n      BooleanQuery query = new BooleanQuery();\n      suggester.addContextToQuery(query, new BytesRef(\"foo\"), BooleanClause.Occur.MUST);\n      suggester.addContextToQuery(query, new BytesRef(\"bar\"), BooleanClause.Occur.MUST_NOT);\n      results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), query, 10, true, true);\n      assertEquals(1, results.size());\n      \n      suggester.close();\n      a.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0977217be8980b17c612feb7ea3d1556ccf4aeed":["f4abec28b874149a7223e32cc7a01704c27790de"],"58d0345a28bb6b4be59c38e6a77e2cc0e615ee4b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2a0f5bb79c600763ffe7b8141df59a3169d31e48":["58d0345a28bb6b4be59c38e6a77e2cc0e615ee4b","a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c"],"6549d5ea6b7b25525309b981de3ec92b4dff99d1":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"f4abec28b874149a7223e32cc7a01704c27790de":["19e497fe4da591a79332da97681b8017d9c61165"],"d0d579490a72f2e6297eaa648940611234c57cf1":["58d0345a28bb6b4be59c38e6a77e2cc0e615ee4b"],"19e497fe4da591a79332da97681b8017d9c61165":["6549d5ea6b7b25525309b981de3ec92b4dff99d1"],"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["d2204dea8cf3dcfbffdf7b4d3459cf5287cc1c30"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["ec083aa3f3ecd55f91c47009d49e45553f99bd77","a56958d7f71a28824f20031ffbb2e13502a0274e"],"a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c":["d0d579490a72f2e6297eaa648940611234c57cf1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ec083aa3f3ecd55f91c47009d49e45553f99bd77":["0977217be8980b17c612feb7ea3d1556ccf4aeed"],"d2204dea8cf3dcfbffdf7b4d3459cf5287cc1c30":["a56958d7f71a28824f20031ffbb2e13502a0274e"],"a56958d7f71a28824f20031ffbb2e13502a0274e":["ec083aa3f3ecd55f91c47009d49e45553f99bd77"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"]},"commit2Childs":{"0977217be8980b17c612feb7ea3d1556ccf4aeed":["ec083aa3f3ecd55f91c47009d49e45553f99bd77"],"58d0345a28bb6b4be59c38e6a77e2cc0e615ee4b":["2a0f5bb79c600763ffe7b8141df59a3169d31e48","d0d579490a72f2e6297eaa648940611234c57cf1"],"2a0f5bb79c600763ffe7b8141df59a3169d31e48":["6549d5ea6b7b25525309b981de3ec92b4dff99d1"],"6549d5ea6b7b25525309b981de3ec92b4dff99d1":["19e497fe4da591a79332da97681b8017d9c61165"],"f4abec28b874149a7223e32cc7a01704c27790de":["0977217be8980b17c612feb7ea3d1556ccf4aeed"],"d0d579490a72f2e6297eaa648940611234c57cf1":["a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c"],"19e497fe4da591a79332da97681b8017d9c61165":["f4abec28b874149a7223e32cc7a01704c27790de"],"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["58d0345a28bb6b4be59c38e6a77e2cc0e615ee4b"],"ec083aa3f3ecd55f91c47009d49e45553f99bd77":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","a56958d7f71a28824f20031ffbb2e13502a0274e"],"d2204dea8cf3dcfbffdf7b4d3459cf5287cc1c30":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"a56958d7f71a28824f20031ffbb2e13502a0274e":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","d2204dea8cf3dcfbffdf7b4d3459cf5287cc1c30"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}