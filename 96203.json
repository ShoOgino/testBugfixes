{"path":"lucene/core/src/java/org/apache/lucene/index/StandardDirectoryReader#doOpenIfChanged(IndexWriter,boolean).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/StandardDirectoryReader#doOpenIfChanged(IndexWriter,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/StandardDirectoryReader#doOpenIfChanged(IndexWriter,boolean).mjava","sourceNew":"  @Override\n  protected final DirectoryReader doOpenIfChanged(IndexWriter writer, boolean applyAllDeletes) throws CorruptIndexException, IOException {\n    ensureOpen();\n    if (writer == this.writer && applyAllDeletes == this.applyAllDeletes) {\n      return doOpenFromWriter(null);\n    } else {\n      return writer.getReader(applyAllDeletes);\n    }\n  }\n\n","sourceOld":"  @Override\n  protected final DirectoryReader doOpenIfChanged(IndexWriter writer, boolean applyAllDeletes) throws CorruptIndexException, IOException {\n    ensureOpen();\n    if (writer == this.writer && applyAllDeletes == this.applyAllDeletes) {\n      return doOpenFromWriter(null);\n    } else {\n      return writer.getReader(applyAllDeletes);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae695f21c50b03702b5d0fa2543d5af844bb7cd3","date":1331554994,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/StandardDirectoryReader#doOpenIfChanged(IndexWriter,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/StandardDirectoryReader#doOpenIfChanged(IndexWriter,boolean).mjava","sourceNew":"  @Override\n  protected DirectoryReader doOpenIfChanged(IndexWriter writer, boolean applyAllDeletes) throws CorruptIndexException, IOException {\n    ensureOpen();\n    if (writer == this.writer && applyAllDeletes == this.applyAllDeletes) {\n      return doOpenFromWriter(null);\n    } else {\n      return writer.getReader(applyAllDeletes);\n    }\n  }\n\n","sourceOld":"  @Override\n  protected final DirectoryReader doOpenIfChanged(IndexWriter writer, boolean applyAllDeletes) throws CorruptIndexException, IOException {\n    ensureOpen();\n    if (writer == this.writer && applyAllDeletes == this.applyAllDeletes) {\n      return doOpenFromWriter(null);\n    } else {\n      return writer.getReader(applyAllDeletes);\n    }\n  }\n\n","bugFix":["d7bbf8cffd2321f26cf9f6487f1571d325f20bc3"],"bugIntro":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"38e3b736c7ca086d61b7dbb841c905ee115490da","date":1331657018,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/StandardDirectoryReader#doOpenIfChanged(IndexWriter,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/StandardDirectoryReader#doOpenIfChanged(IndexWriter,boolean).mjava","sourceNew":"  @Override\n  protected DirectoryReader doOpenIfChanged(IndexWriter writer, boolean applyAllDeletes) throws CorruptIndexException, IOException {\n    ensureOpen();\n    if (writer == this.writer && applyAllDeletes == this.applyAllDeletes) {\n      return doOpenFromWriter(null);\n    } else {\n      return writer.getReader(applyAllDeletes);\n    }\n  }\n\n","sourceOld":"  @Override\n  protected final DirectoryReader doOpenIfChanged(IndexWriter writer, boolean applyAllDeletes) throws CorruptIndexException, IOException {\n    ensureOpen();\n    if (writer == this.writer && applyAllDeletes == this.applyAllDeletes) {\n      return doOpenFromWriter(null);\n    } else {\n      return writer.getReader(applyAllDeletes);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/StandardDirectoryReader#doOpenIfChanged(IndexWriter,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/StandardDirectoryReader#doOpenIfChanged(IndexWriter,boolean).mjava","sourceNew":"  @Override\n  protected DirectoryReader doOpenIfChanged(IndexWriter writer, boolean applyAllDeletes) throws IOException {\n    ensureOpen();\n    if (writer == this.writer && applyAllDeletes == this.applyAllDeletes) {\n      return doOpenFromWriter(null);\n    } else {\n      return writer.getReader(applyAllDeletes);\n    }\n  }\n\n","sourceOld":"  @Override\n  protected DirectoryReader doOpenIfChanged(IndexWriter writer, boolean applyAllDeletes) throws CorruptIndexException, IOException {\n    ensureOpen();\n    if (writer == this.writer && applyAllDeletes == this.applyAllDeletes) {\n      return doOpenFromWriter(null);\n    } else {\n      return writer.getReader(applyAllDeletes);\n    }\n  }\n\n","bugFix":["ae695f21c50b03702b5d0fa2543d5af844bb7cd3"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/StandardDirectoryReader#doOpenIfChanged(IndexWriter,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/StandardDirectoryReader#doOpenIfChanged(IndexWriter,boolean).mjava","sourceNew":"  @Override\n  protected DirectoryReader doOpenIfChanged(IndexWriter writer, boolean applyAllDeletes) throws IOException {\n    ensureOpen();\n    if (writer == this.writer && applyAllDeletes == this.applyAllDeletes) {\n      return doOpenFromWriter(null);\n    } else {\n      return writer.getReader(applyAllDeletes);\n    }\n  }\n\n","sourceOld":"  @Override\n  protected DirectoryReader doOpenIfChanged(IndexWriter writer, boolean applyAllDeletes) throws CorruptIndexException, IOException {\n    ensureOpen();\n    if (writer == this.writer && applyAllDeletes == this.applyAllDeletes) {\n      return doOpenFromWriter(null);\n    } else {\n      return writer.getReader(applyAllDeletes);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d49a158012a8ff48f328a4558e4bfcffbaed16f","date":1453677440,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/StandardDirectoryReader#doOpenIfChanged(IndexWriter,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/StandardDirectoryReader#doOpenIfChanged(IndexWriter,boolean).mjava","sourceNew":"  @Override\n  protected DirectoryReader doOpenIfChanged(IndexWriter writer, boolean applyAllDeletes) throws IOException {\n    ensureOpen();\n    if (writer == this.writer && applyAllDeletes == this.applyAllDeletes) {\n      return doOpenFromWriter(null);\n    } else {\n      return writer.getReader(applyAllDeletes, writeAllDeletes);\n    }\n  }\n\n","sourceOld":"  @Override\n  protected DirectoryReader doOpenIfChanged(IndexWriter writer, boolean applyAllDeletes) throws IOException {\n    ensureOpen();\n    if (writer == this.writer && applyAllDeletes == this.applyAllDeletes) {\n      return doOpenFromWriter(null);\n    } else {\n      return writer.getReader(applyAllDeletes);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"68496c2200e559fb7802f7575427b7a482659afb","date":1455207618,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/StandardDirectoryReader#doOpenIfChanged(IndexWriter,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/StandardDirectoryReader#doOpenIfChanged(IndexWriter,boolean).mjava","sourceNew":"  @Override\n  protected DirectoryReader doOpenIfChanged(IndexWriter writer, boolean applyAllDeletes) throws IOException {\n    ensureOpen();\n    if (writer == this.writer && applyAllDeletes == this.applyAllDeletes) {\n      return doOpenFromWriter(null);\n    } else {\n      return writer.getReader(applyAllDeletes, writeAllDeletes);\n    }\n  }\n\n","sourceOld":"  @Override\n  protected DirectoryReader doOpenIfChanged(IndexWriter writer, boolean applyAllDeletes) throws IOException {\n    ensureOpen();\n    if (writer == this.writer && applyAllDeletes == this.applyAllDeletes) {\n      return doOpenFromWriter(null);\n    } else {\n      return writer.getReader(applyAllDeletes);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"38e3b736c7ca086d61b7dbb841c905ee115490da":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","ae695f21c50b03702b5d0fa2543d5af844bb7cd3"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["ae695f21c50b03702b5d0fa2543d5af844bb7cd3","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ae695f21c50b03702b5d0fa2543d5af844bb7cd3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"68496c2200e559fb7802f7575427b7a482659afb":["4d3e8520fd031bab31fd0e4d480e55958bc45efe","0d49a158012a8ff48f328a4558e4bfcffbaed16f"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["ae695f21c50b03702b5d0fa2543d5af844bb7cd3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["68496c2200e559fb7802f7575427b7a482659afb"],"0d49a158012a8ff48f328a4558e4bfcffbaed16f":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"]},"commit2Childs":{"38e3b736c7ca086d61b7dbb841c905ee115490da":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["38e3b736c7ca086d61b7dbb841c905ee115490da","ae695f21c50b03702b5d0fa2543d5af844bb7cd3"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"ae695f21c50b03702b5d0fa2543d5af844bb7cd3":["38e3b736c7ca086d61b7dbb841c905ee115490da","fe33227f6805edab2036cbb80645cc4e2d1fa424","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"68496c2200e559fb7802f7575427b7a482659afb":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["fe33227f6805edab2036cbb80645cc4e2d1fa424","68496c2200e559fb7802f7575427b7a482659afb","0d49a158012a8ff48f328a4558e4bfcffbaed16f"],"0d49a158012a8ff48f328a4558e4bfcffbaed16f":["68496c2200e559fb7802f7575427b7a482659afb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["38e3b736c7ca086d61b7dbb841c905ee115490da","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}