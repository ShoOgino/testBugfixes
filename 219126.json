{"path":"lucene/src/java/org/apache/lucene/index/NormsConsumerPerField#finish().mjava","commits":[{"id":"143d45d6fe43d56d1f541059577c929fc0ad27a1","date":1323026648,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/NormsConsumerPerField#finish().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/NormsWriterPerField#finish().mjava","sourceNew":"  @Override\n  void finish() {\n    if (fieldInfo.isIndexed && !fieldInfo.omitNorms) {\n      if (docIDs.length <= upto) {\n        assert docIDs.length == upto;\n        docIDs = ArrayUtil.grow(docIDs, 1+upto);\n      }\n      if (norms.length <= upto) {\n        assert norms.length == upto;\n        norms = ArrayUtil.grow(norms, 1+upto);\n      }\n      norms[upto] = similarity.computeNorm(fieldState);\n      docIDs[upto] = docState.docID;\n      upto++;\n    }\n  }\n\n","sourceOld":"  @Override\n  void finish() {\n    if (fieldInfo.isIndexed && !fieldInfo.omitNorms) {\n      if (docIDs.length <= upto) {\n        assert docIDs.length == upto;\n        docIDs = ArrayUtil.grow(docIDs, 1+upto);\n      }\n      if (norms.length <= upto) {\n        assert norms.length == upto;\n        norms = ArrayUtil.grow(norms, 1+upto);\n      }\n      norms[upto] = similarity.computeNorm(fieldState);\n      docIDs[upto] = docState.docID;\n      upto++;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3615ce4a1f785ae1b779244de52c6a7d99227e60","date":1323422019,"type":1,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/NormsConsumerPerField#finish().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/NormsWriterPerField#finish().mjava","sourceNew":"  @Override\n  void finish() {\n    if (fieldInfo.isIndexed && !fieldInfo.omitNorms) {\n      if (docIDs.length <= upto) {\n        assert docIDs.length == upto;\n        docIDs = ArrayUtil.grow(docIDs, 1+upto);\n      }\n      if (norms.length <= upto) {\n        assert norms.length == upto;\n        norms = ArrayUtil.grow(norms, 1+upto);\n      }\n      norms[upto] = similarity.computeNorm(fieldState);\n      docIDs[upto] = docState.docID;\n      upto++;\n    }\n  }\n\n","sourceOld":"  @Override\n  void finish() {\n    if (fieldInfo.isIndexed && !fieldInfo.omitNorms) {\n      if (docIDs.length <= upto) {\n        assert docIDs.length == upto;\n        docIDs = ArrayUtil.grow(docIDs, 1+upto);\n      }\n      if (norms.length <= upto) {\n        assert norms.length == upto;\n        norms = ArrayUtil.grow(norms, 1+upto);\n      }\n      norms[upto] = similarity.computeNorm(fieldState);\n      docIDs[upto] = docState.docID;\n      upto++;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","date":1323437438,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/NormsConsumerPerField#finish().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/NormsWriterPerField#finish().mjava","sourceNew":"  @Override\n  void finish() {\n    if (fieldInfo.isIndexed && !fieldInfo.omitNorms) {\n      if (docIDs.length <= upto) {\n        assert docIDs.length == upto;\n        docIDs = ArrayUtil.grow(docIDs, 1+upto);\n      }\n      if (norms.length <= upto) {\n        assert norms.length == upto;\n        norms = ArrayUtil.grow(norms, 1+upto);\n      }\n      norms[upto] = similarity.computeNorm(fieldState);\n      docIDs[upto] = docState.docID;\n      upto++;\n    }\n  }\n\n","sourceOld":"  @Override\n  void finish() {\n    if (fieldInfo.isIndexed && !fieldInfo.omitNorms) {\n      if (docIDs.length <= upto) {\n        assert docIDs.length == upto;\n        docIDs = ArrayUtil.grow(docIDs, 1+upto);\n      }\n      if (norms.length <= upto) {\n        assert norms.length == upto;\n        norms = ArrayUtil.grow(norms, 1+upto);\n      }\n      norms[upto] = similarity.computeNorm(fieldState);\n      docIDs[upto] = docState.docID;\n      upto++;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f6e3376a314fcc2b31bc46d399c2ff23552b78d6","date":1325780477,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/NormsConsumerPerField#finish().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/NormsConsumerPerField#finish().mjava","sourceNew":"  @Override\n  void finish() throws IOException {\n    if (fieldInfo.isIndexed && !fieldInfo.omitNorms) {\n      DocValuesConsumer consumer = getConsumer();\n      spare.bytes[0] = similarity.computeNorm(fieldState);\n      value.setBytes(spare, Type.BYTES_FIXED_STRAIGHT);\n      consumer.add(docState.docID, value);\n      \n    }    \n  }\n\n","sourceOld":"  @Override\n  void finish() {\n    if (fieldInfo.isIndexed && !fieldInfo.omitNorms) {\n      if (docIDs.length <= upto) {\n        assert docIDs.length == upto;\n        docIDs = ArrayUtil.grow(docIDs, 1+upto);\n      }\n      if (norms.length <= upto) {\n        assert norms.length == upto;\n        norms = ArrayUtil.grow(norms, 1+upto);\n      }\n      norms[upto] = similarity.computeNorm(fieldState);\n      docIDs[upto] = docState.docID;\n      upto++;\n    }\n  }\n\n","bugFix":null,"bugIntro":["d4d69c535930b5cce125cff868d40f6373dc27d4","fa0f44f887719e97183771e977cfc4bfb485b766"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fa0f44f887719e97183771e977cfc4bfb485b766","date":1326668713,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/NormsConsumerPerField#finish().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/NormsConsumerPerField#finish().mjava","sourceNew":"  @Override\n  void finish() throws IOException {\n    if (fieldInfo.isIndexed && !fieldInfo.omitNorms) {\n      DocValuesConsumer consumer = getConsumer();\n      spare.bytes[0] = similarity.computeNorm(fieldState);\n      consumer.add(docState.docID, value);\n    }    \n  }\n\n","sourceOld":"  @Override\n  void finish() throws IOException {\n    if (fieldInfo.isIndexed && !fieldInfo.omitNorms) {\n      DocValuesConsumer consumer = getConsumer();\n      spare.bytes[0] = similarity.computeNorm(fieldState);\n      value.setBytes(spare, Type.BYTES_FIXED_STRAIGHT);\n      consumer.add(docState.docID, value);\n      \n    }    \n  }\n\n","bugFix":["f6e3376a314fcc2b31bc46d399c2ff23552b78d6"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9e8d5a6ffbfa3405d234a87c833741eabed98d13","date":1326725835,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/NormsConsumerPerField#finish().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/NormsConsumerPerField#finish().mjava","sourceNew":"  @Override\n  void finish() throws IOException {\n    if (fieldInfo.isIndexed && !fieldInfo.omitNorms) {\n      similarity.computeNorm(fieldState, norm);\n      \n      if (norm.type() != null) {\n        IndexableField field = norm.field();\n        // some similarity might not compute any norms\n        DocValuesConsumer consumer = getConsumer(norm.type());\n        consumer.add(docState.docID, field);\n      }\n    }    \n  }\n\n","sourceOld":"  @Override\n  void finish() throws IOException {\n    if (fieldInfo.isIndexed && !fieldInfo.omitNorms) {\n      DocValuesConsumer consumer = getConsumer();\n      spare.bytes[0] = similarity.computeNorm(fieldState);\n      consumer.add(docState.docID, value);\n    }    \n  }\n\n","bugFix":null,"bugIntro":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/NormsConsumerPerField#finish().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/NormsConsumerPerField#finish().mjava","sourceNew":"  @Override\n  void finish() throws IOException {\n    if (fieldInfo.isIndexed && !fieldInfo.omitNorms) {\n      similarity.computeNorm(fieldState, norm);\n      \n      if (norm.type() != null) {\n        IndexableField field = norm.field();\n        // some similarity might not compute any norms\n        DocValuesConsumer consumer = getConsumer(norm.type());\n        consumer.add(docState.docID, field);\n      }\n    }    \n  }\n\n","sourceOld":"  @Override\n  void finish() throws IOException {\n    if (fieldInfo.isIndexed && !fieldInfo.omitNorms) {\n      similarity.computeNorm(fieldState, norm);\n      \n      if (norm.type() != null) {\n        IndexableField field = norm.field();\n        // some similarity might not compute any norms\n        DocValuesConsumer consumer = getConsumer(norm.type());\n        consumer.add(docState.docID, field);\n      }\n    }    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"143d45d6fe43d56d1f541059577c929fc0ad27a1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9e8d5a6ffbfa3405d234a87c833741eabed98d13":["fa0f44f887719e97183771e977cfc4bfb485b766"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["9e8d5a6ffbfa3405d234a87c833741eabed98d13"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fa0f44f887719e97183771e977cfc4bfb485b766":["f6e3376a314fcc2b31bc46d399c2ff23552b78d6"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","143d45d6fe43d56d1f541059577c929fc0ad27a1"],"f6e3376a314fcc2b31bc46d399c2ff23552b78d6":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"143d45d6fe43d56d1f541059577c929fc0ad27a1":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"9e8d5a6ffbfa3405d234a87c833741eabed98d13":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["143d45d6fe43d56d1f541059577c929fc0ad27a1","ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"fa0f44f887719e97183771e977cfc4bfb485b766":["9e8d5a6ffbfa3405d234a87c833741eabed98d13"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","f6e3376a314fcc2b31bc46d399c2ff23552b78d6"],"f6e3376a314fcc2b31bc46d399c2ff23552b78d6":["fa0f44f887719e97183771e977cfc4bfb485b766"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}