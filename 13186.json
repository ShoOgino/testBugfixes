{"path":"solr/core/src/java/org/apache/solr/util/ConcurrentLFUCache#maybeMarkAndSweep().mjava","commits":[{"id":"bfa27be7bde9d711ce2b418fadc555654849383f","date":1573652589,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/ConcurrentLFUCache#maybeMarkAndSweep().mjava","pathOld":"/dev/null","sourceNew":"  private void maybeMarkAndSweep() {\n    // Check if we need to clear out old entries from the cache.\n    // isCleaning variable is checked instead of markAndSweepLock.isLocked()\n    // for performance because every put invokation will check until\n    // the size is back to an acceptable level.\n    //\n    // There is a race between the check and the call to markAndSweep, but\n    // it's unimportant because markAndSweep actually aquires the lock or returns if it can't.\n    //\n    // Thread safety note: isCleaning read is piggybacked (comes after) other volatile reads\n    // in this method.\n    boolean evictByIdleTime = maxIdleTimeNs != Long.MAX_VALUE;\n    int currentSize = stats.size.intValue();\n    long idleCutoff = evictByIdleTime ? timeSource.getEpochTimeNs() - maxIdleTimeNs : -1L;\n    if ((currentSize > upperWaterMark || (evictByIdleTime && oldestEntry.get() < idleCutoff)) && !isCleaning) {\n      if (newThreadForCleanup) {\n        new Thread(this::markAndSweep).start();\n      } else if (cleanupThread != null) {\n        cleanupThread.wakeThread();\n      } else {\n        markAndSweep();\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d7d3943904804560937e6239effeebda0f920e4","date":1573762904,"type":4,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/util/ConcurrentLFUCache#maybeMarkAndSweep().mjava","sourceNew":null,"sourceOld":"  private void maybeMarkAndSweep() {\n    // Check if we need to clear out old entries from the cache.\n    // isCleaning variable is checked instead of markAndSweepLock.isLocked()\n    // for performance because every put invokation will check until\n    // the size is back to an acceptable level.\n    //\n    // There is a race between the check and the call to markAndSweep, but\n    // it's unimportant because markAndSweep actually aquires the lock or returns if it can't.\n    //\n    // Thread safety note: isCleaning read is piggybacked (comes after) other volatile reads\n    // in this method.\n    boolean evictByIdleTime = maxIdleTimeNs != Long.MAX_VALUE;\n    int currentSize = stats.size.intValue();\n    long idleCutoff = evictByIdleTime ? timeSource.getEpochTimeNs() - maxIdleTimeNs : -1L;\n    if ((currentSize > upperWaterMark || (evictByIdleTime && oldestEntry.get() < idleCutoff)) && !isCleaning) {\n      if (newThreadForCleanup) {\n        new Thread(this::markAndSweep).start();\n      } else if (cleanupThread != null) {\n        cleanupThread.wakeThread();\n      } else {\n        markAndSweep();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bfa27be7bde9d711ce2b418fadc555654849383f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4d7d3943904804560937e6239effeebda0f920e4":["bfa27be7bde9d711ce2b418fadc555654849383f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4d7d3943904804560937e6239effeebda0f920e4"]},"commit2Childs":{"bfa27be7bde9d711ce2b418fadc555654849383f":["4d7d3943904804560937e6239effeebda0f920e4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bfa27be7bde9d711ce2b418fadc555654849383f"],"4d7d3943904804560937e6239effeebda0f920e4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}