{"path":"lucene/core/src/test/org/apache/lucene/index/TestTransactions.IndexerThread#doWork().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTransactions.IndexerThread#doWork().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestTransactions.IndexerThread#doWork().mjava","sourceNew":"    @Override\n    public void doWork() throws Throwable {\n\n      IndexWriter writer1 = new IndexWriter(\n          dir1,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setMaxBufferedDocs(3).\n              setMergeScheduler(new ConcurrentMergeScheduler()).\n              setMergePolicy(newLogMergePolicy(2))\n      );\n      ((ConcurrentMergeScheduler) writer1.getConfig().getMergeScheduler()).setSuppressExceptions();\n\n      // Intentionally use different params so flush/merge\n      // happen @ different times\n      IndexWriter writer2 = new IndexWriter(\n          dir2,\n          newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setMaxBufferedDocs(2).\n              setMergeScheduler(new ConcurrentMergeScheduler()).\n              setMergePolicy(newLogMergePolicy(3))\n      );\n      ((ConcurrentMergeScheduler) writer2.getConfig().getMergeScheduler()).setSuppressExceptions();\n\n      update(writer1);\n      update(writer2);\n\n      TestTransactions.doFail = true;\n      try {\n        synchronized(lock) {\n          try {\n            writer1.prepareCommit();\n          } catch (Throwable t) {\n            writer1.rollback();\n            writer2.rollback();\n            return;\n          }\n          try {\n            writer2.prepareCommit();\n          } catch (Throwable t) { \t\n            writer1.rollback();\n            writer2.rollback();\n            return;\n          }\n\n          writer1.commit();\n          writer2.commit();\n        }\n      } finally {\n        TestTransactions.doFail = false;\n      }  \n\n      writer1.close();\n      writer2.close();\n    }\n\n","sourceOld":"    @Override\n    public void doWork() throws Throwable {\n\n      IndexWriter writer1 = new IndexWriter(\n          dir1,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setMaxBufferedDocs(3).\n              setMergeScheduler(new ConcurrentMergeScheduler()).\n              setMergePolicy(newLogMergePolicy(2))\n      );\n      ((ConcurrentMergeScheduler) writer1.getConfig().getMergeScheduler()).setSuppressExceptions();\n\n      // Intentionally use different params so flush/merge\n      // happen @ different times\n      IndexWriter writer2 = new IndexWriter(\n          dir2,\n          newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setMaxBufferedDocs(2).\n              setMergeScheduler(new ConcurrentMergeScheduler()).\n              setMergePolicy(newLogMergePolicy(3))\n      );\n      ((ConcurrentMergeScheduler) writer2.getConfig().getMergeScheduler()).setSuppressExceptions();\n\n      update(writer1);\n      update(writer2);\n\n      TestTransactions.doFail = true;\n      try {\n        synchronized(lock) {\n          try {\n            writer1.prepareCommit();\n          } catch (Throwable t) {\n            writer1.rollback();\n            writer2.rollback();\n            return;\n          }\n          try {\n            writer2.prepareCommit();\n          } catch (Throwable t) { \t\n            writer1.rollback();\n            writer2.rollback();\n            return;\n          }\n\n          writer1.commit();\n          writer2.commit();\n        }\n      } finally {\n        TestTransactions.doFail = false;\n      }  \n\n      writer1.close();\n      writer2.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTransactions.IndexerThread#doWork().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTransactions.IndexerThread#doWork().mjava","sourceNew":"    @Override\n    public void doWork() throws Throwable {\n\n      IndexWriter writer1 = new IndexWriter(\n          dir1,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n              setMaxBufferedDocs(3).\n              setMergeScheduler(new ConcurrentMergeScheduler()).\n              setMergePolicy(newLogMergePolicy(2))\n      );\n      ((ConcurrentMergeScheduler) writer1.getConfig().getMergeScheduler()).setSuppressExceptions();\n\n      // Intentionally use different params so flush/merge\n      // happen @ different times\n      IndexWriter writer2 = new IndexWriter(\n          dir2,\n          newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n              setMaxBufferedDocs(2).\n              setMergeScheduler(new ConcurrentMergeScheduler()).\n              setMergePolicy(newLogMergePolicy(3))\n      );\n      ((ConcurrentMergeScheduler) writer2.getConfig().getMergeScheduler()).setSuppressExceptions();\n\n      update(writer1);\n      update(writer2);\n\n      TestTransactions.doFail = true;\n      try {\n        synchronized(lock) {\n          try {\n            writer1.prepareCommit();\n          } catch (Throwable t) {\n            writer1.rollback();\n            writer2.rollback();\n            return;\n          }\n          try {\n            writer2.prepareCommit();\n          } catch (Throwable t) { \t\n            writer1.rollback();\n            writer2.rollback();\n            return;\n          }\n\n          writer1.commit();\n          writer2.commit();\n        }\n      } finally {\n        TestTransactions.doFail = false;\n      }  \n\n      writer1.close();\n      writer2.close();\n    }\n\n","sourceOld":"    @Override\n    public void doWork() throws Throwable {\n\n      IndexWriter writer1 = new IndexWriter(\n          dir1,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setMaxBufferedDocs(3).\n              setMergeScheduler(new ConcurrentMergeScheduler()).\n              setMergePolicy(newLogMergePolicy(2))\n      );\n      ((ConcurrentMergeScheduler) writer1.getConfig().getMergeScheduler()).setSuppressExceptions();\n\n      // Intentionally use different params so flush/merge\n      // happen @ different times\n      IndexWriter writer2 = new IndexWriter(\n          dir2,\n          newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setMaxBufferedDocs(2).\n              setMergeScheduler(new ConcurrentMergeScheduler()).\n              setMergePolicy(newLogMergePolicy(3))\n      );\n      ((ConcurrentMergeScheduler) writer2.getConfig().getMergeScheduler()).setSuppressExceptions();\n\n      update(writer1);\n      update(writer2);\n\n      TestTransactions.doFail = true;\n      try {\n        synchronized(lock) {\n          try {\n            writer1.prepareCommit();\n          } catch (Throwable t) {\n            writer1.rollback();\n            writer2.rollback();\n            return;\n          }\n          try {\n            writer2.prepareCommit();\n          } catch (Throwable t) { \t\n            writer1.rollback();\n            writer2.rollback();\n            return;\n          }\n\n          writer1.commit();\n          writer2.commit();\n        }\n      } finally {\n        TestTransactions.doFail = false;\n      }  \n\n      writer1.close();\n      writer2.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4093b270ba337f9c25a4c0e6cb2ae2c07f697376","date":1347897716,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTransactions.IndexerThread#doWork().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTransactions.IndexerThread#doWork().mjava","sourceNew":"    @Override\n    public void doWork() throws Throwable {\n\n      IndexWriter writer1 = new IndexWriter(\n          dir1,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n              setMaxBufferedDocs(3).\n              setMergeScheduler(new ConcurrentMergeScheduler()).\n              setMergePolicy(newLogMergePolicy(2))\n      );\n      ((ConcurrentMergeScheduler) writer1.getConfig().getMergeScheduler()).setSuppressExceptions();\n\n      // Intentionally use different params so flush/merge\n      // happen @ different times\n      IndexWriter writer2 = new IndexWriter(\n          dir2,\n          newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n              setMaxBufferedDocs(2).\n              setMergeScheduler(new ConcurrentMergeScheduler()).\n              setMergePolicy(newLogMergePolicy(3))\n      );\n      ((ConcurrentMergeScheduler) writer2.getConfig().getMergeScheduler()).setSuppressExceptions();\n\n      update(writer1);\n      update(writer2);\n\n      TestTransactions.doFail = true;\n      try {\n        synchronized(lock) {\n          try {\n            writer1.prepareCommit();\n          } catch (Throwable t) {\n            writer1.rollback();\n            writer2.rollback();\n            return;\n          }\n          try {\n            writer2.prepareCommit();\n          } catch (Throwable t) {\n            writer1.rollback();\n            writer2.rollback();\n            return;\n          }\n\n          writer1.commit();\n          writer2.commit();\n        }\n      } finally {\n        TestTransactions.doFail = false;\n      }  \n\n      writer1.close();\n      writer2.close();\n    }\n\n","sourceOld":"    @Override\n    public void doWork() throws Throwable {\n\n      IndexWriter writer1 = new IndexWriter(\n          dir1,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n              setMaxBufferedDocs(3).\n              setMergeScheduler(new ConcurrentMergeScheduler()).\n              setMergePolicy(newLogMergePolicy(2))\n      );\n      ((ConcurrentMergeScheduler) writer1.getConfig().getMergeScheduler()).setSuppressExceptions();\n\n      // Intentionally use different params so flush/merge\n      // happen @ different times\n      IndexWriter writer2 = new IndexWriter(\n          dir2,\n          newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n              setMaxBufferedDocs(2).\n              setMergeScheduler(new ConcurrentMergeScheduler()).\n              setMergePolicy(newLogMergePolicy(3))\n      );\n      ((ConcurrentMergeScheduler) writer2.getConfig().getMergeScheduler()).setSuppressExceptions();\n\n      update(writer1);\n      update(writer2);\n\n      TestTransactions.doFail = true;\n      try {\n        synchronized(lock) {\n          try {\n            writer1.prepareCommit();\n          } catch (Throwable t) {\n            writer1.rollback();\n            writer2.rollback();\n            return;\n          }\n          try {\n            writer2.prepareCommit();\n          } catch (Throwable t) { \t\n            writer1.rollback();\n            writer2.rollback();\n            return;\n          }\n\n          writer1.commit();\n          writer2.commit();\n        }\n      } finally {\n        TestTransactions.doFail = false;\n      }  \n\n      writer1.close();\n      writer2.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTransactions.IndexerThread#doWork().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTransactions.IndexerThread#doWork().mjava","sourceNew":"    @Override\n    public void doWork() throws Throwable {\n\n      IndexWriter writer1 = new IndexWriter(\n          dir1,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n              setMaxBufferedDocs(3).\n              setMergeScheduler(new ConcurrentMergeScheduler()).\n              setMergePolicy(newLogMergePolicy(2))\n      );\n      ((ConcurrentMergeScheduler) writer1.getConfig().getMergeScheduler()).setSuppressExceptions();\n\n      // Intentionally use different params so flush/merge\n      // happen @ different times\n      IndexWriter writer2 = new IndexWriter(\n          dir2,\n          newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n              setMaxBufferedDocs(2).\n              setMergeScheduler(new ConcurrentMergeScheduler()).\n              setMergePolicy(newLogMergePolicy(3))\n      );\n      ((ConcurrentMergeScheduler) writer2.getConfig().getMergeScheduler()).setSuppressExceptions();\n\n      update(writer1);\n      update(writer2);\n\n      TestTransactions.doFail = true;\n      try {\n        synchronized(lock) {\n          try {\n            writer1.prepareCommit();\n          } catch (Throwable t) {\n            writer1.rollback();\n            writer2.rollback();\n            return;\n          }\n          try {\n            writer2.prepareCommit();\n          } catch (Throwable t) {\n            writer1.rollback();\n            writer2.rollback();\n            return;\n          }\n\n          writer1.commit();\n          writer2.commit();\n        }\n      } finally {\n        TestTransactions.doFail = false;\n      }  \n\n      writer1.shutdown();\n      writer2.shutdown();\n    }\n\n","sourceOld":"    @Override\n    public void doWork() throws Throwable {\n\n      IndexWriter writer1 = new IndexWriter(\n          dir1,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n              setMaxBufferedDocs(3).\n              setMergeScheduler(new ConcurrentMergeScheduler()).\n              setMergePolicy(newLogMergePolicy(2))\n      );\n      ((ConcurrentMergeScheduler) writer1.getConfig().getMergeScheduler()).setSuppressExceptions();\n\n      // Intentionally use different params so flush/merge\n      // happen @ different times\n      IndexWriter writer2 = new IndexWriter(\n          dir2,\n          newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n              setMaxBufferedDocs(2).\n              setMergeScheduler(new ConcurrentMergeScheduler()).\n              setMergePolicy(newLogMergePolicy(3))\n      );\n      ((ConcurrentMergeScheduler) writer2.getConfig().getMergeScheduler()).setSuppressExceptions();\n\n      update(writer1);\n      update(writer2);\n\n      TestTransactions.doFail = true;\n      try {\n        synchronized(lock) {\n          try {\n            writer1.prepareCommit();\n          } catch (Throwable t) {\n            writer1.rollback();\n            writer2.rollback();\n            return;\n          }\n          try {\n            writer2.prepareCommit();\n          } catch (Throwable t) {\n            writer1.rollback();\n            writer2.rollback();\n            return;\n          }\n\n          writer1.commit();\n          writer2.commit();\n        }\n      } finally {\n        TestTransactions.doFail = false;\n      }  \n\n      writer1.close();\n      writer2.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTransactions.IndexerThread#doWork().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTransactions.IndexerThread#doWork().mjava","sourceNew":"    @Override\n    public void doWork() throws Throwable {\n\n      IndexWriter writer1 = new IndexWriter(\n          dir1,\n          newIndexWriterConfig(new MockAnalyzer(random())).\n              setMaxBufferedDocs(3).\n              setMergeScheduler(new ConcurrentMergeScheduler()).\n              setMergePolicy(newLogMergePolicy(2))\n      );\n      ((ConcurrentMergeScheduler) writer1.getConfig().getMergeScheduler()).setSuppressExceptions();\n\n      // Intentionally use different params so flush/merge\n      // happen @ different times\n      IndexWriter writer2 = new IndexWriter(\n          dir2,\n          newIndexWriterConfig(new MockAnalyzer(random())).\n              setMaxBufferedDocs(2).\n              setMergeScheduler(new ConcurrentMergeScheduler()).\n              setMergePolicy(newLogMergePolicy(3))\n      );\n      ((ConcurrentMergeScheduler) writer2.getConfig().getMergeScheduler()).setSuppressExceptions();\n\n      update(writer1);\n      update(writer2);\n\n      TestTransactions.doFail = true;\n      try {\n        synchronized(lock) {\n          try {\n            writer1.prepareCommit();\n          } catch (Throwable t) {\n            writer1.rollback();\n            writer2.rollback();\n            return;\n          }\n          try {\n            writer2.prepareCommit();\n          } catch (Throwable t) {\n            writer1.rollback();\n            writer2.rollback();\n            return;\n          }\n\n          writer1.commit();\n          writer2.commit();\n        }\n      } finally {\n        TestTransactions.doFail = false;\n      }  \n\n      writer1.shutdown();\n      writer2.shutdown();\n    }\n\n","sourceOld":"    @Override\n    public void doWork() throws Throwable {\n\n      IndexWriter writer1 = new IndexWriter(\n          dir1,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n              setMaxBufferedDocs(3).\n              setMergeScheduler(new ConcurrentMergeScheduler()).\n              setMergePolicy(newLogMergePolicy(2))\n      );\n      ((ConcurrentMergeScheduler) writer1.getConfig().getMergeScheduler()).setSuppressExceptions();\n\n      // Intentionally use different params so flush/merge\n      // happen @ different times\n      IndexWriter writer2 = new IndexWriter(\n          dir2,\n          newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n              setMaxBufferedDocs(2).\n              setMergeScheduler(new ConcurrentMergeScheduler()).\n              setMergePolicy(newLogMergePolicy(3))\n      );\n      ((ConcurrentMergeScheduler) writer2.getConfig().getMergeScheduler()).setSuppressExceptions();\n\n      update(writer1);\n      update(writer2);\n\n      TestTransactions.doFail = true;\n      try {\n        synchronized(lock) {\n          try {\n            writer1.prepareCommit();\n          } catch (Throwable t) {\n            writer1.rollback();\n            writer2.rollback();\n            return;\n          }\n          try {\n            writer2.prepareCommit();\n          } catch (Throwable t) {\n            writer1.rollback();\n            writer2.rollback();\n            return;\n          }\n\n          writer1.commit();\n          writer2.commit();\n        }\n      } finally {\n        TestTransactions.doFail = false;\n      }  \n\n      writer1.shutdown();\n      writer2.shutdown();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTransactions.IndexerThread#doWork().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTransactions.IndexerThread#doWork().mjava","sourceNew":"    @Override\n    public void doWork() throws Throwable {\n\n      IndexWriter writer1 = new IndexWriter(\n          dir1,\n          newIndexWriterConfig(new MockAnalyzer(random())).\n              setMaxBufferedDocs(3).\n              setMergeScheduler(new ConcurrentMergeScheduler()).\n              setMergePolicy(newLogMergePolicy(2))\n      );\n      ((ConcurrentMergeScheduler) writer1.getConfig().getMergeScheduler()).setSuppressExceptions();\n\n      // Intentionally use different params so flush/merge\n      // happen @ different times\n      IndexWriter writer2 = new IndexWriter(\n          dir2,\n          newIndexWriterConfig(new MockAnalyzer(random())).\n              setMaxBufferedDocs(2).\n              setMergeScheduler(new ConcurrentMergeScheduler()).\n              setMergePolicy(newLogMergePolicy(3))\n      );\n      ((ConcurrentMergeScheduler) writer2.getConfig().getMergeScheduler()).setSuppressExceptions();\n\n      update(writer1);\n      update(writer2);\n\n      TestTransactions.doFail = true;\n      try {\n        synchronized(lock) {\n          try {\n            writer1.prepareCommit();\n          } catch (Throwable t) {\n            writer1.rollback();\n            writer2.rollback();\n            return;\n          }\n          try {\n            writer2.prepareCommit();\n          } catch (Throwable t) {\n            writer1.rollback();\n            writer2.rollback();\n            return;\n          }\n\n          writer1.commit();\n          writer2.commit();\n        }\n      } finally {\n        TestTransactions.doFail = false;\n      }  \n\n      writer1.close();\n      writer2.close();\n    }\n\n","sourceOld":"    @Override\n    public void doWork() throws Throwable {\n\n      IndexWriter writer1 = new IndexWriter(\n          dir1,\n          newIndexWriterConfig(new MockAnalyzer(random())).\n              setMaxBufferedDocs(3).\n              setMergeScheduler(new ConcurrentMergeScheduler()).\n              setMergePolicy(newLogMergePolicy(2))\n      );\n      ((ConcurrentMergeScheduler) writer1.getConfig().getMergeScheduler()).setSuppressExceptions();\n\n      // Intentionally use different params so flush/merge\n      // happen @ different times\n      IndexWriter writer2 = new IndexWriter(\n          dir2,\n          newIndexWriterConfig(new MockAnalyzer(random())).\n              setMaxBufferedDocs(2).\n              setMergeScheduler(new ConcurrentMergeScheduler()).\n              setMergePolicy(newLogMergePolicy(3))\n      );\n      ((ConcurrentMergeScheduler) writer2.getConfig().getMergeScheduler()).setSuppressExceptions();\n\n      update(writer1);\n      update(writer2);\n\n      TestTransactions.doFail = true;\n      try {\n        synchronized(lock) {\n          try {\n            writer1.prepareCommit();\n          } catch (Throwable t) {\n            writer1.rollback();\n            writer2.rollback();\n            return;\n          }\n          try {\n            writer2.prepareCommit();\n          } catch (Throwable t) {\n            writer1.rollback();\n            writer2.rollback();\n            return;\n          }\n\n          writer1.commit();\n          writer2.commit();\n        }\n      } finally {\n        TestTransactions.doFail = false;\n      }  \n\n      writer1.shutdown();\n      writer2.shutdown();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19db42d0b541c39fee97429b55d2cf8755d31856","date":1428461231,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTransactions.IndexerThread#doWork().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTransactions.IndexerThread#doWork().mjava","sourceNew":"    @Override\n    public void doWork() throws Throwable {\n\n      IndexWriter writer1 = new IndexWriter(\n          dir1,\n          newIndexWriterConfig(new MockAnalyzer(random())).\n              setMaxBufferedDocs(3).\n              setMergeScheduler(new ConcurrentMergeScheduler()).\n              setMergePolicy(newLogMergePolicy(2))\n      );\n      ((ConcurrentMergeScheduler) writer1.getConfig().getMergeScheduler()).setSuppressExceptions();\n\n      // Intentionally use different params so flush/merge\n      // happen @ different times\n      IndexWriter writer2 = new IndexWriter(\n          dir2,\n          newIndexWriterConfig(new MockAnalyzer(random())).\n              setMaxBufferedDocs(2).\n              setMergeScheduler(new ConcurrentMergeScheduler()).\n              setMergePolicy(newLogMergePolicy(3))\n      );\n      ((ConcurrentMergeScheduler) writer2.getConfig().getMergeScheduler()).setSuppressExceptions();\n\n      update(writer1);\n      update(writer2);\n\n      TestTransactions.doFail = true;\n      try {\n        synchronized(lock) {\n          try {\n            writer1.prepareCommit();\n          } catch (Throwable t) {\n            // release resources\n            try {\n              writer1.rollback();\n            } catch (Throwable ignore) {}\n            try {\n              writer2.rollback();\n            } catch (Throwable ignore) {}\n            return;\n          }\n          try {\n            writer2.prepareCommit();\n          } catch (Throwable t) {\n            // release resources\n            try {\n              writer1.rollback();\n            } catch (Throwable ignore) {}\n            try {\n              writer2.rollback();\n            } catch (Throwable ignore) {}\n            return;\n          }\n\n          writer1.commit();\n          writer2.commit();\n        }\n      } finally {\n        TestTransactions.doFail = false;\n      }  \n\n      writer1.close();\n      writer2.close();\n    }\n\n","sourceOld":"    @Override\n    public void doWork() throws Throwable {\n\n      IndexWriter writer1 = new IndexWriter(\n          dir1,\n          newIndexWriterConfig(new MockAnalyzer(random())).\n              setMaxBufferedDocs(3).\n              setMergeScheduler(new ConcurrentMergeScheduler()).\n              setMergePolicy(newLogMergePolicy(2))\n      );\n      ((ConcurrentMergeScheduler) writer1.getConfig().getMergeScheduler()).setSuppressExceptions();\n\n      // Intentionally use different params so flush/merge\n      // happen @ different times\n      IndexWriter writer2 = new IndexWriter(\n          dir2,\n          newIndexWriterConfig(new MockAnalyzer(random())).\n              setMaxBufferedDocs(2).\n              setMergeScheduler(new ConcurrentMergeScheduler()).\n              setMergePolicy(newLogMergePolicy(3))\n      );\n      ((ConcurrentMergeScheduler) writer2.getConfig().getMergeScheduler()).setSuppressExceptions();\n\n      update(writer1);\n      update(writer2);\n\n      TestTransactions.doFail = true;\n      try {\n        synchronized(lock) {\n          try {\n            writer1.prepareCommit();\n          } catch (Throwable t) {\n            writer1.rollback();\n            writer2.rollback();\n            return;\n          }\n          try {\n            writer2.prepareCommit();\n          } catch (Throwable t) {\n            writer1.rollback();\n            writer2.rollback();\n            return;\n          }\n\n          writer1.commit();\n          writer2.commit();\n        }\n      } finally {\n        TestTransactions.doFail = false;\n      }  \n\n      writer1.close();\n      writer2.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"19db42d0b541c39fee97429b55d2cf8755d31856":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["4093b270ba337f9c25a4c0e6cb2ae2c07f697376"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["19db42d0b541c39fee97429b55d2cf8755d31856"],"4093b270ba337f9c25a4c0e6cb2ae2c07f697376":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"]},"commit2Childs":{"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["19db42d0b541c39fee97429b55d2cf8755d31856"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"19db42d0b541c39fee97429b55d2cf8755d31856":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["4093b270ba337f9c25a4c0e6cb2ae2c07f697376"],"4093b270ba337f9c25a4c0e6cb2ae2c07f697376":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}