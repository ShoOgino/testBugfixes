{"path":"lucene/sandbox/src/test/org/apache/lucene/search/LongHashSetTests#testRandom().mjava","commits":[{"id":"6b2b4edc1ab85940153f1b5a0eeb7ee6f4f4bafb","date":1481818674,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/search/LongHashSetTests#testRandom().mjava","pathOld":"/dev/null","sourceNew":"  public void testRandom() {\n    final int iters = atLeast(10);\n    for (int iter = 0; iter < iters; ++iter) {\n      long[] values = new long[random().nextInt(1 << random().nextInt(16))];\n      for (int i = 0; i < values.length; ++i) {\n        if (i == 0 || random().nextInt(10) < 9) {\n          values[i] = random().nextLong();\n        } else {\n          values[i] = values[random().nextInt(i)];\n        }\n      }\n      if (values.length > 0 && random().nextBoolean()) {\n        values[values.length/2] = Long.MIN_VALUE;\n      }\n      Set<Long> set1 = LongStream.of(values).mapToObj(Long::valueOf).collect(Collectors.toCollection(HashSet::new));\n      LongHashSet set2 = new LongHashSet(values);\n      assertEquals(set1, set2);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9856095f7afb5a607bf5e65077615ed91273508c","date":1481837697,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/search/LongHashSetTests#testRandom().mjava","pathOld":"/dev/null","sourceNew":"  public void testRandom() {\n    final int iters = atLeast(10);\n    for (int iter = 0; iter < iters; ++iter) {\n      long[] values = new long[random().nextInt(1 << random().nextInt(16))];\n      for (int i = 0; i < values.length; ++i) {\n        if (i == 0 || random().nextInt(10) < 9) {\n          values[i] = random().nextLong();\n        } else {\n          values[i] = values[random().nextInt(i)];\n        }\n      }\n      if (values.length > 0 && random().nextBoolean()) {\n        values[values.length/2] = Long.MIN_VALUE;\n      }\n      Set<Long> set1 = LongStream.of(values).mapToObj(Long::valueOf).collect(Collectors.toCollection(HashSet::new));\n      LongHashSet set2 = new LongHashSet(values);\n      assertEquals(set1, set2);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6b2b4edc1ab85940153f1b5a0eeb7ee6f4f4bafb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9856095f7afb5a607bf5e65077615ed91273508c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6b2b4edc1ab85940153f1b5a0eeb7ee6f4f4bafb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6b2b4edc1ab85940153f1b5a0eeb7ee6f4f4bafb"]},"commit2Childs":{"6b2b4edc1ab85940153f1b5a0eeb7ee6f4f4bafb":["9856095f7afb5a607bf5e65077615ed91273508c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6b2b4edc1ab85940153f1b5a0eeb7ee6f4f4bafb","9856095f7afb5a607bf5e65077615ed91273508c"],"9856095f7afb5a607bf5e65077615ed91273508c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9856095f7afb5a607bf5e65077615ed91273508c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}