{"path":"lucene/facet/src/test/org/apache/lucene/facet/TestCachedOrdinalsReader#testWithThreads().mjava","commits":[{"id":"21d36d0db865f7b84026b447bec653469a6e66df","date":1385495602,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/TestCachedOrdinalsReader#testWithThreads().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/simple/TestCachedOrdinalsReader#testWithThreads().mjava","sourceNew":"  @Test\n  public void testWithThreads() throws Exception {\n    // LUCENE-5303: OrdinalsCache used the ThreadLocal BinaryDV instead of reader.getCoreCacheKey().\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(indexDir, conf);\n    DirectoryTaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir);\n    FacetsConfig config = new FacetsConfig(taxoWriter);\n    \n    Document doc = new Document();\n    doc.add(new FacetField(\"A\", \"1\"));\n    writer.addDocument(config.build(doc));\n    doc = new Document();\n    doc.add(new FacetField(\"A\", \"2\"));\n    writer.addDocument(config.build(doc));\n    \n    final DirectoryReader reader = DirectoryReader.open(writer, true);\n    final CachedOrdinalsReader ordsReader = new CachedOrdinalsReader(new DocValuesOrdinalsReader(FacetsConfig.DEFAULT_INDEX_FIELD_NAME));\n    Thread[] threads = new Thread[3];\n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new Thread(\"CachedOrdsThread-\" + i) {\n        @Override\n        public void run() {\n          for (AtomicReaderContext context : reader.leaves()) {\n            try {\n              ordsReader.getReader(context);\n            } catch (IOException e) {\n              throw new RuntimeException(e);\n            }\n          }\n        }\n      };\n    }\n\n    long ramBytesUsed = 0;\n    for (Thread t : threads) {\n      t.start();\n      t.join();\n      if (ramBytesUsed == 0) {\n        ramBytesUsed = ordsReader.ramBytesUsed();\n      } else {\n        assertEquals(ramBytesUsed, ordsReader.ramBytesUsed());\n      }\n    }\n    \n    IOUtils.close(writer, taxoWriter, reader, indexDir, taxoDir);\n  }\n\n","sourceOld":"  @Test\n  public void testWithThreads() throws Exception {\n    // LUCENE-5303: OrdinalsCache used the ThreadLocal BinaryDV instead of reader.getCoreCacheKey().\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(indexDir, conf);\n    DirectoryTaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir);\n    FacetsConfig config = new FacetsConfig(taxoWriter);\n    \n    Document doc = new Document();\n    doc.add(new FacetField(\"A\", \"1\"));\n    writer.addDocument(config.build(doc));\n    doc = new Document();\n    doc.add(new FacetField(\"A\", \"2\"));\n    writer.addDocument(config.build(doc));\n    \n    final DirectoryReader reader = DirectoryReader.open(writer, true);\n    final CachedOrdinalsReader ordsReader = new CachedOrdinalsReader(new DocValuesOrdinalsReader(FacetsConfig.DEFAULT_INDEX_FIELD_NAME));\n    Thread[] threads = new Thread[3];\n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new Thread(\"CachedOrdsThread-\" + i) {\n        @Override\n        public void run() {\n          for (AtomicReaderContext context : reader.leaves()) {\n            try {\n              ordsReader.getReader(context);\n            } catch (IOException e) {\n              throw new RuntimeException(e);\n            }\n          }\n        }\n      };\n    }\n\n    long ramBytesUsed = 0;\n    for (Thread t : threads) {\n      t.start();\n      t.join();\n      if (ramBytesUsed == 0) {\n        ramBytesUsed = ordsReader.ramBytesUsed();\n      } else {\n        assertEquals(ramBytesUsed, ordsReader.ramBytesUsed());\n      }\n    }\n    \n    IOUtils.close(writer, taxoWriter, reader, indexDir, taxoDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd83550e4b0bdd36e7d9dca9273264100782440b","date":1385761753,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/TestCachedOrdinalsReader#testWithThreads().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/TestCachedOrdinalsReader#testWithThreads().mjava","sourceNew":"  @Test\n  public void testWithThreads() throws Exception {\n    // LUCENE-5303: OrdinalsCache used the ThreadLocal BinaryDV instead of reader.getCoreCacheKey().\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(indexDir, conf);\n    DirectoryTaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir);\n    FacetsConfig config = new FacetsConfig();\n    \n    Document doc = new Document();\n    doc.add(new FacetField(\"A\", \"1\"));\n    writer.addDocument(config.build(taxoWriter, doc));\n    doc = new Document();\n    doc.add(new FacetField(\"A\", \"2\"));\n    writer.addDocument(config.build(taxoWriter, doc));\n    \n    final DirectoryReader reader = DirectoryReader.open(writer, true);\n    final CachedOrdinalsReader ordsReader = new CachedOrdinalsReader(new DocValuesOrdinalsReader(FacetsConfig.DEFAULT_INDEX_FIELD_NAME));\n    Thread[] threads = new Thread[3];\n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new Thread(\"CachedOrdsThread-\" + i) {\n        @Override\n        public void run() {\n          for (AtomicReaderContext context : reader.leaves()) {\n            try {\n              ordsReader.getReader(context);\n            } catch (IOException e) {\n              throw new RuntimeException(e);\n            }\n          }\n        }\n      };\n    }\n\n    long ramBytesUsed = 0;\n    for (Thread t : threads) {\n      t.start();\n      t.join();\n      if (ramBytesUsed == 0) {\n        ramBytesUsed = ordsReader.ramBytesUsed();\n      } else {\n        assertEquals(ramBytesUsed, ordsReader.ramBytesUsed());\n      }\n    }\n    \n    IOUtils.close(writer, taxoWriter, reader, indexDir, taxoDir);\n  }\n\n","sourceOld":"  @Test\n  public void testWithThreads() throws Exception {\n    // LUCENE-5303: OrdinalsCache used the ThreadLocal BinaryDV instead of reader.getCoreCacheKey().\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(indexDir, conf);\n    DirectoryTaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir);\n    FacetsConfig config = new FacetsConfig(taxoWriter);\n    \n    Document doc = new Document();\n    doc.add(new FacetField(\"A\", \"1\"));\n    writer.addDocument(config.build(doc));\n    doc = new Document();\n    doc.add(new FacetField(\"A\", \"2\"));\n    writer.addDocument(config.build(doc));\n    \n    final DirectoryReader reader = DirectoryReader.open(writer, true);\n    final CachedOrdinalsReader ordsReader = new CachedOrdinalsReader(new DocValuesOrdinalsReader(FacetsConfig.DEFAULT_INDEX_FIELD_NAME));\n    Thread[] threads = new Thread[3];\n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new Thread(\"CachedOrdsThread-\" + i) {\n        @Override\n        public void run() {\n          for (AtomicReaderContext context : reader.leaves()) {\n            try {\n              ordsReader.getReader(context);\n            } catch (IOException e) {\n              throw new RuntimeException(e);\n            }\n          }\n        }\n      };\n    }\n\n    long ramBytesUsed = 0;\n    for (Thread t : threads) {\n      t.start();\n      t.join();\n      if (ramBytesUsed == 0) {\n        ramBytesUsed = ordsReader.ramBytesUsed();\n      } else {\n        assertEquals(ramBytesUsed, ordsReader.ramBytesUsed());\n      }\n    }\n    \n    IOUtils.close(writer, taxoWriter, reader, indexDir, taxoDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/TestCachedOrdinalsReader#testWithThreads().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testWithThreads() throws Exception {\n    // LUCENE-5303: OrdinalsCache used the ThreadLocal BinaryDV instead of reader.getCoreCacheKey().\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(indexDir, conf);\n    DirectoryTaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir);\n    FacetsConfig config = new FacetsConfig();\n    \n    Document doc = new Document();\n    doc.add(new FacetField(\"A\", \"1\"));\n    writer.addDocument(config.build(taxoWriter, doc));\n    doc = new Document();\n    doc.add(new FacetField(\"A\", \"2\"));\n    writer.addDocument(config.build(taxoWriter, doc));\n    \n    final DirectoryReader reader = DirectoryReader.open(writer, true);\n    final CachedOrdinalsReader ordsReader = new CachedOrdinalsReader(new DocValuesOrdinalsReader(FacetsConfig.DEFAULT_INDEX_FIELD_NAME));\n    Thread[] threads = new Thread[3];\n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new Thread(\"CachedOrdsThread-\" + i) {\n        @Override\n        public void run() {\n          for (AtomicReaderContext context : reader.leaves()) {\n            try {\n              ordsReader.getReader(context);\n            } catch (IOException e) {\n              throw new RuntimeException(e);\n            }\n          }\n        }\n      };\n    }\n\n    long ramBytesUsed = 0;\n    for (Thread t : threads) {\n      t.start();\n      t.join();\n      if (ramBytesUsed == 0) {\n        ramBytesUsed = ordsReader.ramBytesUsed();\n      } else {\n        assertEquals(ramBytesUsed, ordsReader.ramBytesUsed());\n      }\n    }\n    \n    IOUtils.close(writer, taxoWriter, reader, indexDir, taxoDir);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9905adab7913dc4e059260c31a65cdfbd94afea9","date":1388944941,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestCachedOrdinalsReader#testWithThreads().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/TestCachedOrdinalsReader#testWithThreads().mjava","sourceNew":"  @Test\n  public void testWithThreads() throws Exception {\n    // LUCENE-5303: OrdinalsCache used the ThreadLocal BinaryDV instead of reader.getCoreCacheKey().\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(indexDir, conf);\n    DirectoryTaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir);\n    FacetsConfig config = new FacetsConfig();\n    \n    Document doc = new Document();\n    doc.add(new FacetField(\"A\", \"1\"));\n    writer.addDocument(config.build(taxoWriter, doc));\n    doc = new Document();\n    doc.add(new FacetField(\"A\", \"2\"));\n    writer.addDocument(config.build(taxoWriter, doc));\n    \n    final DirectoryReader reader = DirectoryReader.open(writer, true);\n    final CachedOrdinalsReader ordsReader = new CachedOrdinalsReader(new DocValuesOrdinalsReader(FacetsConfig.DEFAULT_INDEX_FIELD_NAME));\n    Thread[] threads = new Thread[3];\n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new Thread(\"CachedOrdsThread-\" + i) {\n        @Override\n        public void run() {\n          for (AtomicReaderContext context : reader.leaves()) {\n            try {\n              ordsReader.getReader(context);\n            } catch (IOException e) {\n              throw new RuntimeException(e);\n            }\n          }\n        }\n      };\n    }\n\n    long ramBytesUsed = 0;\n    for (Thread t : threads) {\n      t.start();\n      t.join();\n      if (ramBytesUsed == 0) {\n        ramBytesUsed = ordsReader.ramBytesUsed();\n      } else {\n        assertEquals(ramBytesUsed, ordsReader.ramBytesUsed());\n      }\n    }\n    \n    IOUtils.close(writer, taxoWriter, reader, indexDir, taxoDir);\n  }\n\n","sourceOld":"  @Test\n  public void testWithThreads() throws Exception {\n    // LUCENE-5303: OrdinalsCache used the ThreadLocal BinaryDV instead of reader.getCoreCacheKey().\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(indexDir, conf);\n    DirectoryTaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir);\n    FacetsConfig config = new FacetsConfig();\n    \n    Document doc = new Document();\n    doc.add(new FacetField(\"A\", \"1\"));\n    writer.addDocument(config.build(taxoWriter, doc));\n    doc = new Document();\n    doc.add(new FacetField(\"A\", \"2\"));\n    writer.addDocument(config.build(taxoWriter, doc));\n    \n    final DirectoryReader reader = DirectoryReader.open(writer, true);\n    final CachedOrdinalsReader ordsReader = new CachedOrdinalsReader(new DocValuesOrdinalsReader(FacetsConfig.DEFAULT_INDEX_FIELD_NAME));\n    Thread[] threads = new Thread[3];\n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new Thread(\"CachedOrdsThread-\" + i) {\n        @Override\n        public void run() {\n          for (AtomicReaderContext context : reader.leaves()) {\n            try {\n              ordsReader.getReader(context);\n            } catch (IOException e) {\n              throw new RuntimeException(e);\n            }\n          }\n        }\n      };\n    }\n\n    long ramBytesUsed = 0;\n    for (Thread t : threads) {\n      t.start();\n      t.join();\n      if (ramBytesUsed == 0) {\n        ramBytesUsed = ordsReader.ramBytesUsed();\n      } else {\n        assertEquals(ramBytesUsed, ordsReader.ramBytesUsed());\n      }\n    }\n    \n    IOUtils.close(writer, taxoWriter, reader, indexDir, taxoDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9905adab7913dc4e059260c31a65cdfbd94afea9":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"21d36d0db865f7b84026b447bec653469a6e66df":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fd83550e4b0bdd36e7d9dca9273264100782440b":["21d36d0db865f7b84026b447bec653469a6e66df"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","fd83550e4b0bdd36e7d9dca9273264100782440b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9905adab7913dc4e059260c31a65cdfbd94afea9"]},"commit2Childs":{"9905adab7913dc4e059260c31a65cdfbd94afea9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["21d36d0db865f7b84026b447bec653469a6e66df","3cc728b07df73b197e6d940d27f9b08b63918f13"],"21d36d0db865f7b84026b447bec653469a6e66df":["fd83550e4b0bdd36e7d9dca9273264100782440b"],"fd83550e4b0bdd36e7d9dca9273264100782440b":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["9905adab7913dc4e059260c31a65cdfbd94afea9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}