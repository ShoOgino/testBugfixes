{"path":"lucene/contrib/spatial/src/java/org/apache/lucene/spatial/tier/LatLongDistanceFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","commits":[{"id":"6620df8541b174097b1133a4fc370adb2e570524","date":1319544675,"type":1,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/contrib/spatial/src/java/org/apache/lucene/spatial/tier/LatLongDistanceFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","pathOld":"lucene/contrib/spatial/src/java/org/apache/lucene/spatial/tier/LatLongDistanceFilter#getDocIdSet(AtomicReaderContext).mjava","sourceNew":"  @Override\n  public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n\n    final double[] latIndex = FieldCache.DEFAULT.getDoubles(context.reader, latField);\n    final double[] lngIndex = FieldCache.DEFAULT.getDoubles(context.reader, lngField);\n\n    final int docBase = nextDocBase;\n    nextDocBase += context.reader.maxDoc();\n\n    return new FilteredDocIdSet(startingFilter.getDocIdSet(context, acceptDocs)) {\n      @Override\n      protected boolean match(int doc) {\n        double x = latIndex[doc];\n        double y = lngIndex[doc];\n      \n        // round off lat / longs if necessary\n        //      x = DistanceHandler.getPrecision(x, precise);\n        //      y = DistanceHandler.getPrecision(y, precise);\n      \n        String ck = Double.toString(x)+\",\"+Double.toString(y);\n        Double cachedDistance = distanceLookupCache.get(ck);\n\n        double d;\n        if (cachedDistance != null){\n          d = cachedDistance.doubleValue();\n        } else {\n          d = DistanceUtils.getDistanceMi(lat, lng, x, y);\n          distanceLookupCache.put(ck, d);\n        }\n\n        if (d < distance) {\n          // Save distances, so they can be pulled for\n          // sorting after filtering is done:\n          distances.put(doc+docBase, d);\n          return true;\n        } else {\n          return false;\n        }\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public DocIdSet getDocIdSet(AtomicReaderContext context) throws IOException {\n\n    final double[] latIndex = FieldCache.DEFAULT.getDoubles(context.reader, latField);\n    final double[] lngIndex = FieldCache.DEFAULT.getDoubles(context.reader, lngField);\n\n    final int docBase = nextDocBase;\n    nextDocBase += context.reader.maxDoc();\n\n    return new FilteredDocIdSet(startingFilter.getDocIdSet(context)) {\n      @Override\n      protected boolean match(int doc) {\n        double x = latIndex[doc];\n        double y = lngIndex[doc];\n      \n        // round off lat / longs if necessary\n        //      x = DistanceHandler.getPrecision(x, precise);\n        //      y = DistanceHandler.getPrecision(y, precise);\n      \n        String ck = Double.toString(x)+\",\"+Double.toString(y);\n        Double cachedDistance = distanceLookupCache.get(ck);\n\n        double d;\n        if (cachedDistance != null){\n          d = cachedDistance.doubleValue();\n        } else {\n          d = DistanceUtils.getDistanceMi(lat, lng, x, y);\n          distanceLookupCache.put(ck, d);\n        }\n\n        if (d < distance) {\n          // Save distances, so they can be pulled for\n          // sorting after filtering is done:\n          distances.put(doc+docBase, d);\n          return true;\n        } else {\n          return false;\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"382fe3a6ca9745891afebda9b9a57cc158305545","date":1320952430,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/contrib/spatial/src/java/org/apache/lucene/spatial/tier/LatLongDistanceFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","pathOld":"lucene/contrib/spatial/src/java/org/apache/lucene/spatial/tier/LatLongDistanceFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","sourceNew":"  @Override\n  public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n\n    final double[] latIndex = FieldCache.DEFAULT.getDoubles(context.reader, latField, false);\n    final double[] lngIndex = FieldCache.DEFAULT.getDoubles(context.reader, lngField, false);\n\n    final int docBase = nextDocBase;\n    nextDocBase += context.reader.maxDoc();\n\n    return new FilteredDocIdSet(startingFilter.getDocIdSet(context, acceptDocs)) {\n      @Override\n      protected boolean match(int doc) {\n        double x = latIndex[doc];\n        double y = lngIndex[doc];\n      \n        // round off lat / longs if necessary\n        //      x = DistanceHandler.getPrecision(x, precise);\n        //      y = DistanceHandler.getPrecision(y, precise);\n      \n        String ck = Double.toString(x)+\",\"+Double.toString(y);\n        Double cachedDistance = distanceLookupCache.get(ck);\n\n        double d;\n        if (cachedDistance != null){\n          d = cachedDistance.doubleValue();\n        } else {\n          d = DistanceUtils.getDistanceMi(lat, lng, x, y);\n          distanceLookupCache.put(ck, d);\n        }\n\n        if (d < distance) {\n          // Save distances, so they can be pulled for\n          // sorting after filtering is done:\n          distances.put(doc+docBase, d);\n          return true;\n        } else {\n          return false;\n        }\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n\n    final double[] latIndex = FieldCache.DEFAULT.getDoubles(context.reader, latField);\n    final double[] lngIndex = FieldCache.DEFAULT.getDoubles(context.reader, lngField);\n\n    final int docBase = nextDocBase;\n    nextDocBase += context.reader.maxDoc();\n\n    return new FilteredDocIdSet(startingFilter.getDocIdSet(context, acceptDocs)) {\n      @Override\n      protected boolean match(int doc) {\n        double x = latIndex[doc];\n        double y = lngIndex[doc];\n      \n        // round off lat / longs if necessary\n        //      x = DistanceHandler.getPrecision(x, precise);\n        //      y = DistanceHandler.getPrecision(y, precise);\n      \n        String ck = Double.toString(x)+\",\"+Double.toString(y);\n        Double cachedDistance = distanceLookupCache.get(ck);\n\n        double d;\n        if (cachedDistance != null){\n          d = cachedDistance.doubleValue();\n        } else {\n          d = DistanceUtils.getDistanceMi(lat, lng, x, y);\n          distanceLookupCache.put(ck, d);\n        }\n\n        if (d < distance) {\n          // Save distances, so they can be pulled for\n          // sorting after filtering is done:\n          distances.put(doc+docBase, d);\n          return true;\n        } else {\n          return false;\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7d96de0b570b8114d342279209d469225abe06cf","date":1327855981,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/spatial/src/java/org/apache/lucene/spatial/tier/LatLongDistanceFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","pathOld":"lucene/contrib/spatial/src/java/org/apache/lucene/spatial/tier/LatLongDistanceFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","sourceNew":"  @Override\n  public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n\n    final double[] latIndex = FieldCache.DEFAULT.getDoubles(context.reader(), latField, false);\n    final double[] lngIndex = FieldCache.DEFAULT.getDoubles(context.reader(), lngField, false);\n\n    final int docBase = nextDocBase;\n    nextDocBase += context.reader().maxDoc();\n\n    return new FilteredDocIdSet(startingFilter.getDocIdSet(context, acceptDocs)) {\n      @Override\n      protected boolean match(int doc) {\n        double x = latIndex[doc];\n        double y = lngIndex[doc];\n      \n        // round off lat / longs if necessary\n        //      x = DistanceHandler.getPrecision(x, precise);\n        //      y = DistanceHandler.getPrecision(y, precise);\n      \n        String ck = Double.toString(x)+\",\"+Double.toString(y);\n        Double cachedDistance = distanceLookupCache.get(ck);\n\n        double d;\n        if (cachedDistance != null){\n          d = cachedDistance.doubleValue();\n        } else {\n          d = DistanceUtils.getDistanceMi(lat, lng, x, y);\n          distanceLookupCache.put(ck, d);\n        }\n\n        if (d < distance) {\n          // Save distances, so they can be pulled for\n          // sorting after filtering is done:\n          distances.put(doc+docBase, d);\n          return true;\n        } else {\n          return false;\n        }\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n\n    final double[] latIndex = FieldCache.DEFAULT.getDoubles(context.reader, latField, false);\n    final double[] lngIndex = FieldCache.DEFAULT.getDoubles(context.reader, lngField, false);\n\n    final int docBase = nextDocBase;\n    nextDocBase += context.reader.maxDoc();\n\n    return new FilteredDocIdSet(startingFilter.getDocIdSet(context, acceptDocs)) {\n      @Override\n      protected boolean match(int doc) {\n        double x = latIndex[doc];\n        double y = lngIndex[doc];\n      \n        // round off lat / longs if necessary\n        //      x = DistanceHandler.getPrecision(x, precise);\n        //      y = DistanceHandler.getPrecision(y, precise);\n      \n        String ck = Double.toString(x)+\",\"+Double.toString(y);\n        Double cachedDistance = distanceLookupCache.get(ck);\n\n        double d;\n        if (cachedDistance != null){\n          d = cachedDistance.doubleValue();\n        } else {\n          d = DistanceUtils.getDistanceMi(lat, lng, x, y);\n          distanceLookupCache.put(ck, d);\n        }\n\n        if (d < distance) {\n          // Save distances, so they can be pulled for\n          // sorting after filtering is done:\n          distances.put(doc+docBase, d);\n          return true;\n        } else {\n          return false;\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/contrib/spatial/src/java/org/apache/lucene/spatial/tier/LatLongDistanceFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","pathOld":"lucene/contrib/spatial/src/java/org/apache/lucene/spatial/tier/LatLongDistanceFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","sourceNew":"  @Override\n  public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n\n    final double[] latIndex = FieldCache.DEFAULT.getDoubles(context.reader(), latField, false);\n    final double[] lngIndex = FieldCache.DEFAULT.getDoubles(context.reader(), lngField, false);\n\n    final int docBase = nextDocBase;\n    nextDocBase += context.reader().maxDoc();\n\n    return new FilteredDocIdSet(startingFilter.getDocIdSet(context, acceptDocs)) {\n      @Override\n      protected boolean match(int doc) {\n        double x = latIndex[doc];\n        double y = lngIndex[doc];\n      \n        // round off lat / longs if necessary\n        //      x = DistanceHandler.getPrecision(x, precise);\n        //      y = DistanceHandler.getPrecision(y, precise);\n      \n        String ck = Double.toString(x)+\",\"+Double.toString(y);\n        Double cachedDistance = distanceLookupCache.get(ck);\n\n        double d;\n        if (cachedDistance != null){\n          d = cachedDistance.doubleValue();\n        } else {\n          d = DistanceUtils.getDistanceMi(lat, lng, x, y);\n          distanceLookupCache.put(ck, d);\n        }\n\n        if (d < distance) {\n          // Save distances, so they can be pulled for\n          // sorting after filtering is done:\n          distances.put(doc+docBase, d);\n          return true;\n        } else {\n          return false;\n        }\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n\n    final double[] latIndex = FieldCache.DEFAULT.getDoubles(context.reader, latField, false);\n    final double[] lngIndex = FieldCache.DEFAULT.getDoubles(context.reader, lngField, false);\n\n    final int docBase = nextDocBase;\n    nextDocBase += context.reader.maxDoc();\n\n    return new FilteredDocIdSet(startingFilter.getDocIdSet(context, acceptDocs)) {\n      @Override\n      protected boolean match(int doc) {\n        double x = latIndex[doc];\n        double y = lngIndex[doc];\n      \n        // round off lat / longs if necessary\n        //      x = DistanceHandler.getPrecision(x, precise);\n        //      y = DistanceHandler.getPrecision(y, precise);\n      \n        String ck = Double.toString(x)+\",\"+Double.toString(y);\n        Double cachedDistance = distanceLookupCache.get(ck);\n\n        double d;\n        if (cachedDistance != null){\n          d = cachedDistance.doubleValue();\n        } else {\n          d = DistanceUtils.getDistanceMi(lat, lng, x, y);\n          distanceLookupCache.put(ck, d);\n        }\n\n        if (d < distance) {\n          // Save distances, so they can be pulled for\n          // sorting after filtering is done:\n          distances.put(doc+docBase, d);\n          return true;\n        } else {\n          return false;\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2fb7e38713d15939e085d376c6391e6e6262a81f","date":1329897272,"type":4,"author":"David Wayne Smiley","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/contrib/spatial/src/java/org/apache/lucene/spatial/tier/LatLongDistanceFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","sourceNew":null,"sourceOld":"  @Override\n  public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n\n    final double[] latIndex = FieldCache.DEFAULT.getDoubles(context.reader(), latField, false);\n    final double[] lngIndex = FieldCache.DEFAULT.getDoubles(context.reader(), lngField, false);\n\n    final int docBase = nextDocBase;\n    nextDocBase += context.reader().maxDoc();\n\n    return new FilteredDocIdSet(startingFilter.getDocIdSet(context, acceptDocs)) {\n      @Override\n      protected boolean match(int doc) {\n        double x = latIndex[doc];\n        double y = lngIndex[doc];\n      \n        // round off lat / longs if necessary\n        //      x = DistanceHandler.getPrecision(x, precise);\n        //      y = DistanceHandler.getPrecision(y, precise);\n      \n        String ck = Double.toString(x)+\",\"+Double.toString(y);\n        Double cachedDistance = distanceLookupCache.get(ck);\n\n        double d;\n        if (cachedDistance != null){\n          d = cachedDistance.doubleValue();\n        } else {\n          d = DistanceUtils.getDistanceMi(lat, lng, x, y);\n          distanceLookupCache.put(ck, d);\n        }\n\n        if (d < distance) {\n          // Save distances, so they can be pulled for\n          // sorting after filtering is done:\n          distances.put(doc+docBase, d);\n          return true;\n        } else {\n          return false;\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e47768b261c28e7e6032060e8331475c81057953","date":1331681297,"type":4,"author":"Ryan McKinley","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/contrib/spatial/src/java/org/apache/lucene/spatial/tier/LatLongDistanceFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","sourceNew":null,"sourceOld":"  @Override\n  public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n\n    final double[] latIndex = FieldCache.DEFAULT.getDoubles(context.reader(), latField, false);\n    final double[] lngIndex = FieldCache.DEFAULT.getDoubles(context.reader(), lngField, false);\n\n    final int docBase = nextDocBase;\n    nextDocBase += context.reader().maxDoc();\n\n    return new FilteredDocIdSet(startingFilter.getDocIdSet(context, acceptDocs)) {\n      @Override\n      protected boolean match(int doc) {\n        double x = latIndex[doc];\n        double y = lngIndex[doc];\n      \n        // round off lat / longs if necessary\n        //      x = DistanceHandler.getPrecision(x, precise);\n        //      y = DistanceHandler.getPrecision(y, precise);\n      \n        String ck = Double.toString(x)+\",\"+Double.toString(y);\n        Double cachedDistance = distanceLookupCache.get(ck);\n\n        double d;\n        if (cachedDistance != null){\n          d = cachedDistance.doubleValue();\n        } else {\n          d = DistanceUtils.getDistanceMi(lat, lng, x, y);\n          distanceLookupCache.put(ck, d);\n        }\n\n        if (d < distance) {\n          // Save distances, so they can be pulled for\n          // sorting after filtering is done:\n          distances.put(doc+docBase, d);\n          return true;\n        } else {\n          return false;\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6620df8541b174097b1133a4fc370adb2e570524":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7d96de0b570b8114d342279209d469225abe06cf":["382fe3a6ca9745891afebda9b9a57cc158305545"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"382fe3a6ca9745891afebda9b9a57cc158305545":["6620df8541b174097b1133a4fc370adb2e570524"],"e47768b261c28e7e6032060e8331475c81057953":["5cab9a86bd67202d20b6adc463008c8e982b070a","2fb7e38713d15939e085d376c6391e6e6262a81f"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["382fe3a6ca9745891afebda9b9a57cc158305545","7d96de0b570b8114d342279209d469225abe06cf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e47768b261c28e7e6032060e8331475c81057953"],"2fb7e38713d15939e085d376c6391e6e6262a81f":["5cab9a86bd67202d20b6adc463008c8e982b070a"]},"commit2Childs":{"6620df8541b174097b1133a4fc370adb2e570524":["382fe3a6ca9745891afebda9b9a57cc158305545"],"7d96de0b570b8114d342279209d469225abe06cf":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6620df8541b174097b1133a4fc370adb2e570524"],"382fe3a6ca9745891afebda9b9a57cc158305545":["7d96de0b570b8114d342279209d469225abe06cf","5cab9a86bd67202d20b6adc463008c8e982b070a"],"e47768b261c28e7e6032060e8331475c81057953":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["e47768b261c28e7e6032060e8331475c81057953","2fb7e38713d15939e085d376c6391e6e6262a81f"],"2fb7e38713d15939e085d376c6391e6e6262a81f":["e47768b261c28e7e6032060e8331475c81057953"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}