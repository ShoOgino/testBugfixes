{"path":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/SpatialPrefixTree#getLevelForDistance(double).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/SpatialPrefixTree#getLevelForDistance(double).mjava","pathOld":"modules/spatial/src/java/org/apache/lucene/spatial/prefix/tree/SpatialPrefixTree#getLevelForDistance(double).mjava","sourceNew":"  /**\n   * Returns the level of the smallest grid size with a side length that is greater or equal to the provided\n   * distance.\n   *\n   * @param dist >= 0\n   * @return level [1-maxLevels]\n   */\n  public abstract int getLevelForDistance(double dist);\n\n","sourceOld":"  /**\n   * Returns the level of the smallest grid size with a side length that is greater or equal to the provided\n   * distance.\n   *\n   * @param dist >= 0\n   * @return level [1-maxLevels]\n   */\n  public abstract int getLevelForDistance(double dist);\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85ac3534293008a0b7704f8ba54592d51fd29fa5","date":1346435585,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/SpatialPrefixTree#getLevelForDistance(double).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/SpatialPrefixTree#getLevelForDistance(double).mjava","sourceNew":"  /**\n   * Returns the level of the largest grid in which its longest side is less\n   * than or equal to the provided distance (in degrees). Consequently {@link\n   * dist} acts as an error epsilon declaring the amount of detail needed in the\n   * grid, such that you can get a grid with just the right amount of\n   * precision.\n   *\n   * @param dist >= 0\n   * @return level [1 to maxLevels]\n   */\n  public abstract int getLevelForDistance(double dist);\n\n","sourceOld":"  /**\n   * Returns the level of the smallest grid size with a side length that is greater or equal to the provided\n   * distance.\n   *\n   * @param dist >= 0\n   * @return level [1-maxLevels]\n   */\n  public abstract int getLevelForDistance(double dist);\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a8fd8551741cd7c71f29c1a939f4723675907c5a","date":1346466626,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/SpatialPrefixTree#getLevelForDistance(double).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/SpatialPrefixTree#getLevelForDistance(double).mjava","sourceNew":"  /**\n   * Returns the level of the largest grid in which its longest side is less\n   * than or equal to the provided distance (in degrees). Consequently {@code\n   * dist} acts as an error epsilon declaring the amount of detail needed in the\n   * grid, such that you can get a grid with just the right amount of\n   * precision.\n   *\n   * @param dist >= 0\n   * @return level [1 to maxLevels]\n   */\n  public abstract int getLevelForDistance(double dist);\n\n","sourceOld":"  /**\n   * Returns the level of the largest grid in which its longest side is less\n   * than or equal to the provided distance (in degrees). Consequently {@link\n   * dist} acts as an error epsilon declaring the amount of detail needed in the\n   * grid, such that you can get a grid with just the right amount of\n   * precision.\n   *\n   * @param dist >= 0\n   * @return level [1 to maxLevels]\n   */\n  public abstract int getLevelForDistance(double dist);\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0d1f90e969803cc84174589b5e4a39b7935fecd","date":1346584861,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/SpatialPrefixTree#getLevelForDistance(double).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/SpatialPrefixTree#getLevelForDistance(double).mjava","sourceNew":"  /**\n   * Returns the level of the largest grid in which its longest side is less\n   * than or equal to the provided distance (in degrees). Consequently {@code\n   * dist} acts as an error epsilon declaring the amount of detail needed in the\n   * grid, such that you can get a grid with just the right amount of\n   * precision.\n   *\n   * @param dist >= 0\n   * @return level [1 to maxLevels]\n   */\n  public abstract int getLevelForDistance(double dist);\n\n","sourceOld":"  /**\n   * Returns the level of the smallest grid size with a side length that is greater or equal to the provided\n   * distance.\n   *\n   * @param dist >= 0\n   * @return level [1-maxLevels]\n   */\n  public abstract int getLevelForDistance(double dist);\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b1eb427f2c6beed80d1724555fc1db003ccf3030","date":1417137397,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/SpatialPrefixTree#getLevelForDistance(double).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/SpatialPrefixTree#getLevelForDistance(double).mjava","sourceNew":"  /**\n   * Returns the level of the largest grid in which its longest side is less\n   * than or equal to the provided distance (in degrees). Consequently {@code\n   * dist} acts as an error epsilon declaring the amount of detail needed in the\n   * grid, such that you can get a grid with just the right amount of\n   * precision.\n   *\n   * @param dist {@code >= 0}\n   * @return level [1 to maxLevels]\n   */\n  public abstract int getLevelForDistance(double dist);\n\n","sourceOld":"  /**\n   * Returns the level of the largest grid in which its longest side is less\n   * than or equal to the provided distance (in degrees). Consequently {@code\n   * dist} acts as an error epsilon declaring the amount of detail needed in the\n   * grid, such that you can get a grid with just the right amount of\n   * precision.\n   *\n   * @param dist >= 0\n   * @return level [1 to maxLevels]\n   */\n  public abstract int getLevelForDistance(double dist);\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"112d77ac8d3e10a362516ad834c9a11d35c94234","date":1456784319,"type":5,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/prefix/tree/SpatialPrefixTree#getLevelForDistance(double).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/SpatialPrefixTree#getLevelForDistance(double).mjava","sourceNew":"  /**\n   * Returns the level of the largest grid in which its longest side is less\n   * than or equal to the provided distance (in degrees). Consequently {@code\n   * dist} acts as an error epsilon declaring the amount of detail needed in the\n   * grid, such that you can get a grid with just the right amount of\n   * precision.\n   *\n   * @param dist {@code >= 0}\n   * @return level [1 to maxLevels]\n   */\n  public abstract int getLevelForDistance(double dist);\n\n","sourceOld":"  /**\n   * Returns the level of the largest grid in which its longest side is less\n   * than or equal to the provided distance (in degrees). Consequently {@code\n   * dist} acts as an error epsilon declaring the amount of detail needed in the\n   * grid, such that you can get a grid with just the right amount of\n   * precision.\n   *\n   * @param dist {@code >= 0}\n   * @return level [1 to maxLevels]\n   */\n  public abstract int getLevelForDistance(double dist);\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af2638813028b254a88b418ebeafb541afb49653","date":1456804822,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/prefix/tree/SpatialPrefixTree#getLevelForDistance(double).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/SpatialPrefixTree#getLevelForDistance(double).mjava","sourceNew":"  /**\n   * Returns the level of the largest grid in which its longest side is less\n   * than or equal to the provided distance (in degrees). Consequently {@code\n   * dist} acts as an error epsilon declaring the amount of detail needed in the\n   * grid, such that you can get a grid with just the right amount of\n   * precision.\n   *\n   * @param dist {@code >= 0}\n   * @return level [1 to maxLevels]\n   */\n  public abstract int getLevelForDistance(double dist);\n\n","sourceOld":"  /**\n   * Returns the level of the largest grid in which its longest side is less\n   * than or equal to the provided distance (in degrees). Consequently {@code\n   * dist} acts as an error epsilon declaring the amount of detail needed in the\n   * grid, such that you can get a grid with just the right amount of\n   * precision.\n   *\n   * @param dist {@code >= 0}\n   * @return level [1 to maxLevels]\n   */\n  public abstract int getLevelForDistance(double dist);\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b1eb427f2c6beed80d1724555fc1db003ccf3030":["a8fd8551741cd7c71f29c1a939f4723675907c5a"],"af2638813028b254a88b418ebeafb541afb49653":["b1eb427f2c6beed80d1724555fc1db003ccf3030","112d77ac8d3e10a362516ad834c9a11d35c94234"],"d0d1f90e969803cc84174589b5e4a39b7935fecd":["b89678825b68eccaf09e6ab71675fc0b0af1e099","a8fd8551741cd7c71f29c1a939f4723675907c5a"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a8fd8551741cd7c71f29c1a939f4723675907c5a":["85ac3534293008a0b7704f8ba54592d51fd29fa5"],"85ac3534293008a0b7704f8ba54592d51fd29fa5":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"112d77ac8d3e10a362516ad834c9a11d35c94234":["b1eb427f2c6beed80d1724555fc1db003ccf3030"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["af2638813028b254a88b418ebeafb541afb49653"]},"commit2Childs":{"b1eb427f2c6beed80d1724555fc1db003ccf3030":["af2638813028b254a88b418ebeafb541afb49653","112d77ac8d3e10a362516ad834c9a11d35c94234"],"af2638813028b254a88b418ebeafb541afb49653":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d0d1f90e969803cc84174589b5e4a39b7935fecd":[],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["d0d1f90e969803cc84174589b5e4a39b7935fecd","85ac3534293008a0b7704f8ba54592d51fd29fa5"],"a8fd8551741cd7c71f29c1a939f4723675907c5a":["b1eb427f2c6beed80d1724555fc1db003ccf3030","d0d1f90e969803cc84174589b5e4a39b7935fecd"],"85ac3534293008a0b7704f8ba54592d51fd29fa5":["a8fd8551741cd7c71f29c1a939f4723675907c5a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"112d77ac8d3e10a362516ad834c9a11d35c94234":["af2638813028b254a88b418ebeafb541afb49653"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d0d1f90e969803cc84174589b5e4a39b7935fecd","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}