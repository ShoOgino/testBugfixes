{"path":"solr/core/src/test/org/apache/solr/spelling/SpellPossibilityIteratorTest#testScalability().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/spelling/SpellPossibilityIteratorTest#testScalability().mjava","pathOld":"solr/src/test/org/apache/solr/spelling/SpellPossibilityIteratorTest#testScalability().mjava","sourceNew":"\t@Test\n\tpublic void testScalability() throws Exception {\n\t\tPossibilityIterator iter = new PossibilityIterator(lotsaSuggestions, 1000, 10000);\n\t\tint count = 0;\n\t\twhile (iter.hasNext()) {\t\t\t\n\t\t\tRankedSpellPossibility rsp = iter.next();\n\t\t\tcount++;\n\t\t}\n\t\tassertTrue(count==1000);\n\t}\n\n","sourceOld":"\t@Test\n\tpublic void testScalability() throws Exception {\n\t\tPossibilityIterator iter = new PossibilityIterator(lotsaSuggestions, 1000, 10000);\n\t\tint count = 0;\n\t\twhile (iter.hasNext()) {\t\t\t\n\t\t\tRankedSpellPossibility rsp = iter.next();\n\t\t\tcount++;\n\t\t}\n\t\tassertTrue(count==1000);\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/spelling/SpellPossibilityIteratorTest#testScalability().mjava","pathOld":"solr/src/test/org/apache/solr/spelling/SpellPossibilityIteratorTest#testScalability().mjava","sourceNew":"\t@Test\n\tpublic void testScalability() throws Exception {\n\t\tPossibilityIterator iter = new PossibilityIterator(lotsaSuggestions, 1000, 10000);\n\t\tint count = 0;\n\t\twhile (iter.hasNext()) {\t\t\t\n\t\t\tRankedSpellPossibility rsp = iter.next();\n\t\t\tcount++;\n\t\t}\n\t\tassertTrue(count==1000);\n\t}\n\n","sourceOld":"\t@Test\n\tpublic void testScalability() throws Exception {\n\t\tPossibilityIterator iter = new PossibilityIterator(lotsaSuggestions, 1000, 10000);\n\t\tint count = 0;\n\t\twhile (iter.hasNext()) {\t\t\t\n\t\t\tRankedSpellPossibility rsp = iter.next();\n\t\t\tcount++;\n\t\t}\n\t\tassertTrue(count==1000);\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/spelling/SpellPossibilityIteratorTest#testScalability().mjava","pathOld":"solr/src/test/org/apache/solr/spelling/SpellPossibilityIteratorTest#testScalability().mjava","sourceNew":"\t@Test\n\tpublic void testScalability() throws Exception {\n\t\tPossibilityIterator iter = new PossibilityIterator(lotsaSuggestions, 1000, 10000);\n\t\tint count = 0;\n\t\twhile (iter.hasNext()) {\t\t\t\n\t\t\tRankedSpellPossibility rsp = iter.next();\n\t\t\tcount++;\n\t\t}\n\t\tassertTrue(count==1000);\n\t}\n\n","sourceOld":"\t@Test\n\tpublic void testScalability() throws Exception {\n\t\tPossibilityIterator iter = new PossibilityIterator(lotsaSuggestions, 1000, 10000);\n\t\tint count = 0;\n\t\twhile (iter.hasNext()) {\t\t\t\n\t\t\tRankedSpellPossibility rsp = iter.next();\n\t\t\tcount++;\n\t\t}\n\t\tassertTrue(count==1000);\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ad9ec888e587ca9a3279368245cdf00aabdc108","date":1338832525,"type":3,"author":"James Dyer","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/spelling/SpellPossibilityIteratorTest#testScalability().mjava","pathOld":"solr/core/src/test/org/apache/solr/spelling/SpellPossibilityIteratorTest#testScalability().mjava","sourceNew":"\t@Test\n\tpublic void testScalability() throws Exception {\n\t  Map<Token, LinkedHashMap<String, Integer>> lotsaSuggestions = new LinkedHashMap<Token, LinkedHashMap<String, Integer>>();\n\t  lotsaSuggestions.put(TOKEN_AYE , AYE);\n    lotsaSuggestions.put(TOKEN_BEE , BEE);\n    lotsaSuggestions.put(TOKEN_CEE , CEE);\n    \n    lotsaSuggestions.put(new Token(\"AYE1\", 0, 3),  AYE);\n    lotsaSuggestions.put(new Token(\"BEE1\", 4, 7),  BEE);\n    lotsaSuggestions.put(new Token(\"CEE1\", 8, 11), CEE);\n    \n    lotsaSuggestions.put(new Token(\"AYE2\", 0, 3),  AYE);\n    lotsaSuggestions.put(new Token(\"BEE2\", 4, 7),  BEE);\n    lotsaSuggestions.put(new Token(\"CEE2\", 8, 11), CEE);\n    \n    lotsaSuggestions.put(new Token(\"AYE3\", 0, 3),  AYE);\n    lotsaSuggestions.put(new Token(\"BEE3\", 4, 7),  BEE);\n    lotsaSuggestions.put(new Token(\"CEE3\", 8, 11), CEE);\n    \n    lotsaSuggestions.put(new Token(\"AYE4\", 0, 3),  AYE);\n    lotsaSuggestions.put(new Token(\"BEE4\", 4, 7),  BEE);\n    lotsaSuggestions.put(new Token(\"CEE4\", 8, 11), CEE);\n    \n\t\tPossibilityIterator iter = new PossibilityIterator(lotsaSuggestions, 1000, 10000, false);\n\t\tint count = 0;\n\t\twhile (iter.hasNext()) {\t\t\t\n\t\t\tPossibilityIterator.RankedSpellPossibility rsp = iter.next();\n\t\t\tcount++;\n\t\t}\n\t\tassertTrue(count==1000);\n\t\t\n\t\tlotsaSuggestions.put(new Token(\"AYE_BEE1\", 0, 7), AYE_BEE);\n    lotsaSuggestions.put(new Token(\"AYE_BEE2\", 0, 7), AYE_BEE);\n    lotsaSuggestions.put(new Token(\"AYE_BEE3\", 0, 7), AYE_BEE);\n    lotsaSuggestions.put(new Token(\"AYE_BEE4\", 0, 7), AYE_BEE);\n    iter = new PossibilityIterator(lotsaSuggestions, 1000, 10000, true);\n    count = 0;\n    while (iter.hasNext()) {      \n      PossibilityIterator.RankedSpellPossibility rsp = iter.next();\n      count++;\n    }\n    assertTrue(count<100);\n\t}\n\n","sourceOld":"\t@Test\n\tpublic void testScalability() throws Exception {\n\t\tPossibilityIterator iter = new PossibilityIterator(lotsaSuggestions, 1000, 10000);\n\t\tint count = 0;\n\t\twhile (iter.hasNext()) {\t\t\t\n\t\t\tRankedSpellPossibility rsp = iter.next();\n\t\t\tcount++;\n\t\t}\n\t\tassertTrue(count==1000);\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4093b270ba337f9c25a4c0e6cb2ae2c07f697376","date":1347897716,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/spelling/SpellPossibilityIteratorTest#testScalability().mjava","pathOld":"solr/core/src/test/org/apache/solr/spelling/SpellPossibilityIteratorTest#testScalability().mjava","sourceNew":"  @Test\n  public void testScalability() throws Exception {\n    Map<Token, LinkedHashMap<String, Integer>> lotsaSuggestions = new LinkedHashMap<Token, LinkedHashMap<String, Integer>>();\n    lotsaSuggestions.put(TOKEN_AYE , AYE);\n    lotsaSuggestions.put(TOKEN_BEE , BEE);\n    lotsaSuggestions.put(TOKEN_CEE , CEE);\n    \n    lotsaSuggestions.put(new Token(\"AYE1\", 0, 3),  AYE);\n    lotsaSuggestions.put(new Token(\"BEE1\", 4, 7),  BEE);\n    lotsaSuggestions.put(new Token(\"CEE1\", 8, 11), CEE);\n    \n    lotsaSuggestions.put(new Token(\"AYE2\", 0, 3),  AYE);\n    lotsaSuggestions.put(new Token(\"BEE2\", 4, 7),  BEE);\n    lotsaSuggestions.put(new Token(\"CEE2\", 8, 11), CEE);\n    \n    lotsaSuggestions.put(new Token(\"AYE3\", 0, 3),  AYE);\n    lotsaSuggestions.put(new Token(\"BEE3\", 4, 7),  BEE);\n    lotsaSuggestions.put(new Token(\"CEE3\", 8, 11), CEE);\n    \n    lotsaSuggestions.put(new Token(\"AYE4\", 0, 3),  AYE);\n    lotsaSuggestions.put(new Token(\"BEE4\", 4, 7),  BEE);\n    lotsaSuggestions.put(new Token(\"CEE4\", 8, 11), CEE);\n    \n    PossibilityIterator iter = new PossibilityIterator(lotsaSuggestions, 1000, 10000, false);\n    int count = 0;\n    while (iter.hasNext()) {\n      PossibilityIterator.RankedSpellPossibility rsp = iter.next();\n      count++;\n    }\n    assertTrue(count==1000);\n\n    lotsaSuggestions.put(new Token(\"AYE_BEE1\", 0, 7), AYE_BEE);\n    lotsaSuggestions.put(new Token(\"AYE_BEE2\", 0, 7), AYE_BEE);\n    lotsaSuggestions.put(new Token(\"AYE_BEE3\", 0, 7), AYE_BEE);\n    lotsaSuggestions.put(new Token(\"AYE_BEE4\", 0, 7), AYE_BEE);\n    iter = new PossibilityIterator(lotsaSuggestions, 1000, 10000, true);\n    count = 0;\n    while (iter.hasNext()) {      \n      PossibilityIterator.RankedSpellPossibility rsp = iter.next();\n      count++;\n    }\n    assertTrue(count<100);\n  }\n\n","sourceOld":"\t@Test\n\tpublic void testScalability() throws Exception {\n\t  Map<Token, LinkedHashMap<String, Integer>> lotsaSuggestions = new LinkedHashMap<Token, LinkedHashMap<String, Integer>>();\n\t  lotsaSuggestions.put(TOKEN_AYE , AYE);\n    lotsaSuggestions.put(TOKEN_BEE , BEE);\n    lotsaSuggestions.put(TOKEN_CEE , CEE);\n    \n    lotsaSuggestions.put(new Token(\"AYE1\", 0, 3),  AYE);\n    lotsaSuggestions.put(new Token(\"BEE1\", 4, 7),  BEE);\n    lotsaSuggestions.put(new Token(\"CEE1\", 8, 11), CEE);\n    \n    lotsaSuggestions.put(new Token(\"AYE2\", 0, 3),  AYE);\n    lotsaSuggestions.put(new Token(\"BEE2\", 4, 7),  BEE);\n    lotsaSuggestions.put(new Token(\"CEE2\", 8, 11), CEE);\n    \n    lotsaSuggestions.put(new Token(\"AYE3\", 0, 3),  AYE);\n    lotsaSuggestions.put(new Token(\"BEE3\", 4, 7),  BEE);\n    lotsaSuggestions.put(new Token(\"CEE3\", 8, 11), CEE);\n    \n    lotsaSuggestions.put(new Token(\"AYE4\", 0, 3),  AYE);\n    lotsaSuggestions.put(new Token(\"BEE4\", 4, 7),  BEE);\n    lotsaSuggestions.put(new Token(\"CEE4\", 8, 11), CEE);\n    \n\t\tPossibilityIterator iter = new PossibilityIterator(lotsaSuggestions, 1000, 10000, false);\n\t\tint count = 0;\n\t\twhile (iter.hasNext()) {\t\t\t\n\t\t\tPossibilityIterator.RankedSpellPossibility rsp = iter.next();\n\t\t\tcount++;\n\t\t}\n\t\tassertTrue(count==1000);\n\t\t\n\t\tlotsaSuggestions.put(new Token(\"AYE_BEE1\", 0, 7), AYE_BEE);\n    lotsaSuggestions.put(new Token(\"AYE_BEE2\", 0, 7), AYE_BEE);\n    lotsaSuggestions.put(new Token(\"AYE_BEE3\", 0, 7), AYE_BEE);\n    lotsaSuggestions.put(new Token(\"AYE_BEE4\", 0, 7), AYE_BEE);\n    iter = new PossibilityIterator(lotsaSuggestions, 1000, 10000, true);\n    count = 0;\n    while (iter.hasNext()) {      \n      PossibilityIterator.RankedSpellPossibility rsp = iter.next();\n      count++;\n    }\n    assertTrue(count<100);\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/spelling/SpellPossibilityIteratorTest#testScalability().mjava","pathOld":"solr/core/src/test/org/apache/solr/spelling/SpellPossibilityIteratorTest#testScalability().mjava","sourceNew":"  @Test\n  public void testScalability() throws Exception {\n    Map<Token, LinkedHashMap<String, Integer>> lotsaSuggestions = new LinkedHashMap<>();\n    lotsaSuggestions.put(TOKEN_AYE , AYE);\n    lotsaSuggestions.put(TOKEN_BEE , BEE);\n    lotsaSuggestions.put(TOKEN_CEE , CEE);\n    \n    lotsaSuggestions.put(new Token(\"AYE1\", 0, 3),  AYE);\n    lotsaSuggestions.put(new Token(\"BEE1\", 4, 7),  BEE);\n    lotsaSuggestions.put(new Token(\"CEE1\", 8, 11), CEE);\n    \n    lotsaSuggestions.put(new Token(\"AYE2\", 0, 3),  AYE);\n    lotsaSuggestions.put(new Token(\"BEE2\", 4, 7),  BEE);\n    lotsaSuggestions.put(new Token(\"CEE2\", 8, 11), CEE);\n    \n    lotsaSuggestions.put(new Token(\"AYE3\", 0, 3),  AYE);\n    lotsaSuggestions.put(new Token(\"BEE3\", 4, 7),  BEE);\n    lotsaSuggestions.put(new Token(\"CEE3\", 8, 11), CEE);\n    \n    lotsaSuggestions.put(new Token(\"AYE4\", 0, 3),  AYE);\n    lotsaSuggestions.put(new Token(\"BEE4\", 4, 7),  BEE);\n    lotsaSuggestions.put(new Token(\"CEE4\", 8, 11), CEE);\n    \n    PossibilityIterator iter = new PossibilityIterator(lotsaSuggestions, 1000, 10000, false);\n    int count = 0;\n    while (iter.hasNext()) {\n      PossibilityIterator.RankedSpellPossibility rsp = iter.next();\n      count++;\n    }\n    assertTrue(count==1000);\n\n    lotsaSuggestions.put(new Token(\"AYE_BEE1\", 0, 7), AYE_BEE);\n    lotsaSuggestions.put(new Token(\"AYE_BEE2\", 0, 7), AYE_BEE);\n    lotsaSuggestions.put(new Token(\"AYE_BEE3\", 0, 7), AYE_BEE);\n    lotsaSuggestions.put(new Token(\"AYE_BEE4\", 0, 7), AYE_BEE);\n    iter = new PossibilityIterator(lotsaSuggestions, 1000, 10000, true);\n    count = 0;\n    while (iter.hasNext()) {      \n      PossibilityIterator.RankedSpellPossibility rsp = iter.next();\n      count++;\n    }\n    assertTrue(count<100);\n  }\n\n","sourceOld":"  @Test\n  public void testScalability() throws Exception {\n    Map<Token, LinkedHashMap<String, Integer>> lotsaSuggestions = new LinkedHashMap<Token, LinkedHashMap<String, Integer>>();\n    lotsaSuggestions.put(TOKEN_AYE , AYE);\n    lotsaSuggestions.put(TOKEN_BEE , BEE);\n    lotsaSuggestions.put(TOKEN_CEE , CEE);\n    \n    lotsaSuggestions.put(new Token(\"AYE1\", 0, 3),  AYE);\n    lotsaSuggestions.put(new Token(\"BEE1\", 4, 7),  BEE);\n    lotsaSuggestions.put(new Token(\"CEE1\", 8, 11), CEE);\n    \n    lotsaSuggestions.put(new Token(\"AYE2\", 0, 3),  AYE);\n    lotsaSuggestions.put(new Token(\"BEE2\", 4, 7),  BEE);\n    lotsaSuggestions.put(new Token(\"CEE2\", 8, 11), CEE);\n    \n    lotsaSuggestions.put(new Token(\"AYE3\", 0, 3),  AYE);\n    lotsaSuggestions.put(new Token(\"BEE3\", 4, 7),  BEE);\n    lotsaSuggestions.put(new Token(\"CEE3\", 8, 11), CEE);\n    \n    lotsaSuggestions.put(new Token(\"AYE4\", 0, 3),  AYE);\n    lotsaSuggestions.put(new Token(\"BEE4\", 4, 7),  BEE);\n    lotsaSuggestions.put(new Token(\"CEE4\", 8, 11), CEE);\n    \n    PossibilityIterator iter = new PossibilityIterator(lotsaSuggestions, 1000, 10000, false);\n    int count = 0;\n    while (iter.hasNext()) {\n      PossibilityIterator.RankedSpellPossibility rsp = iter.next();\n      count++;\n    }\n    assertTrue(count==1000);\n\n    lotsaSuggestions.put(new Token(\"AYE_BEE1\", 0, 7), AYE_BEE);\n    lotsaSuggestions.put(new Token(\"AYE_BEE2\", 0, 7), AYE_BEE);\n    lotsaSuggestions.put(new Token(\"AYE_BEE3\", 0, 7), AYE_BEE);\n    lotsaSuggestions.put(new Token(\"AYE_BEE4\", 0, 7), AYE_BEE);\n    iter = new PossibilityIterator(lotsaSuggestions, 1000, 10000, true);\n    count = 0;\n    while (iter.hasNext()) {      \n      PossibilityIterator.RankedSpellPossibility rsp = iter.next();\n      count++;\n    }\n    assertTrue(count<100);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["4093b270ba337f9c25a4c0e6cb2ae2c07f697376"],"0ad9ec888e587ca9a3279368245cdf00aabdc108":["c26f00b574427b55127e869b935845554afde1fa"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"4093b270ba337f9c25a4c0e6cb2ae2c07f697376":["0ad9ec888e587ca9a3279368245cdf00aabdc108"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0ad9ec888e587ca9a3279368245cdf00aabdc108":["4093b270ba337f9c25a4c0e6cb2ae2c07f697376"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["0ad9ec888e587ca9a3279368245cdf00aabdc108"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"4093b270ba337f9c25a4c0e6cb2ae2c07f697376":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}