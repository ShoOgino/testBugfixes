{"path":"lucene/src/java/org/apache/lucene/index/IndexReader#undeleteAll().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#undeleteAll().mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#undeleteAll().mjava","sourceNew":"  /** Undeletes all documents currently marked as deleted in this index.\n   *\n   * @throws StaleReaderException if the index has changed\n   *  since this reader was opened\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public synchronized void undeleteAll() throws StaleReaderException, CorruptIndexException, LockObtainFailedException, IOException {\n    ensureOpen();\n    acquireWriteLock();\n    hasChanges = true;\n    doUndeleteAll();\n  }\n\n","sourceOld":"  /** Undeletes all documents currently marked as deleted in this index.\n   *\n   * @throws StaleReaderException if the index has changed\n   *  since this reader was opened\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public synchronized void undeleteAll() throws StaleReaderException, CorruptIndexException, LockObtainFailedException, IOException {\n    ensureOpen();\n    acquireWriteLock();\n    hasChanges = true;\n    doUndeleteAll();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cfd641edd796340315609425e9f70819e6d9ef0e","date":1295970051,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#undeleteAll().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#undeleteAll().mjava","sourceNew":"  /** Undeletes all documents currently marked as deleted in\n   * this index.\n   *\n   * <p>NOTE: this is only a best-effort process.  For\n   * example, if all documents in a given segment were\n   * deleted, Lucene now drops that segment from the index,\n   * which means its documents will not be recovered by this\n   * method.\n   *\n   * @throws StaleReaderException if the index has changed\n   *  since this reader was opened\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public synchronized void undeleteAll() throws StaleReaderException, CorruptIndexException, LockObtainFailedException, IOException {\n    ensureOpen();\n    acquireWriteLock();\n    hasChanges = true;\n    doUndeleteAll();\n  }\n\n","sourceOld":"  /** Undeletes all documents currently marked as deleted in this index.\n   *\n   * @throws StaleReaderException if the index has changed\n   *  since this reader was opened\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public synchronized void undeleteAll() throws StaleReaderException, CorruptIndexException, LockObtainFailedException, IOException {\n    ensureOpen();\n    acquireWriteLock();\n    hasChanges = true;\n    doUndeleteAll();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d34bb049e6e6181a091c6605cc97170cf758e19f","date":1295997301,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#undeleteAll().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#undeleteAll().mjava","sourceNew":"  /** Undeletes all documents currently marked as deleted in\n   * this index.\n   *\n   * <p>NOTE: this method can only recover documents marked\n   * for deletion but not yet removed from the index; when\n   * and how Lucene removes deleted documents is an\n   * implementation detail, subject to change from release\n   * to release.  However, you can use {@link\n   * #numDeletedDocs} on the current IndexReader instance to\n   * see how many documents will be un-deleted.\n   *\n   * @throws StaleReaderException if the index has changed\n   *  since this reader was opened\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public synchronized void undeleteAll() throws StaleReaderException, CorruptIndexException, LockObtainFailedException, IOException {\n    ensureOpen();\n    acquireWriteLock();\n    hasChanges = true;\n    doUndeleteAll();\n  }\n\n","sourceOld":"  /** Undeletes all documents currently marked as deleted in\n   * this index.\n   *\n   * <p>NOTE: this is only a best-effort process.  For\n   * example, if all documents in a given segment were\n   * deleted, Lucene now drops that segment from the index,\n   * which means its documents will not be recovered by this\n   * method.\n   *\n   * @throws StaleReaderException if the index has changed\n   *  since this reader was opened\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public synchronized void undeleteAll() throws StaleReaderException, CorruptIndexException, LockObtainFailedException, IOException {\n    ensureOpen();\n    acquireWriteLock();\n    hasChanges = true;\n    doUndeleteAll();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#undeleteAll().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#undeleteAll().mjava","sourceNew":"  /** Undeletes all documents currently marked as deleted in\n   * this index.\n   *\n   * <p>NOTE: this method can only recover documents marked\n   * for deletion but not yet removed from the index; when\n   * and how Lucene removes deleted documents is an\n   * implementation detail, subject to change from release\n   * to release.  However, you can use {@link\n   * #numDeletedDocs} on the current IndexReader instance to\n   * see how many documents will be un-deleted.\n   *\n   * @throws StaleReaderException if the index has changed\n   *  since this reader was opened\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public synchronized void undeleteAll() throws StaleReaderException, CorruptIndexException, LockObtainFailedException, IOException {\n    ensureOpen();\n    acquireWriteLock();\n    hasChanges = true;\n    doUndeleteAll();\n  }\n\n","sourceOld":"  /** Undeletes all documents currently marked as deleted in this index.\n   *\n   * @throws StaleReaderException if the index has changed\n   *  since this reader was opened\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public synchronized void undeleteAll() throws StaleReaderException, CorruptIndexException, LockObtainFailedException, IOException {\n    ensureOpen();\n    acquireWriteLock();\n    hasChanges = true;\n    doUndeleteAll();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#undeleteAll().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#undeleteAll().mjava","sourceNew":"  /** Undeletes all documents currently marked as deleted in\n   * this index.\n   *\n   * <p>NOTE: this method can only recover documents marked\n   * for deletion but not yet removed from the index; when\n   * and how Lucene removes deleted documents is an\n   * implementation detail, subject to change from release\n   * to release.  However, you can use {@link\n   * #numDeletedDocs} on the current IndexReader instance to\n   * see how many documents will be un-deleted.\n   *\n   * @throws StaleReaderException if the index has changed\n   *  since this reader was opened\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public synchronized void undeleteAll() throws StaleReaderException, CorruptIndexException, LockObtainFailedException, IOException {\n    ensureOpen();\n    acquireWriteLock();\n    hasChanges = true;\n    doUndeleteAll();\n  }\n\n","sourceOld":"  /** Undeletes all documents currently marked as deleted in this index.\n   *\n   * @throws StaleReaderException if the index has changed\n   *  since this reader was opened\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public synchronized void undeleteAll() throws StaleReaderException, CorruptIndexException, LockObtainFailedException, IOException {\n    ensureOpen();\n    acquireWriteLock();\n    hasChanges = true;\n    doUndeleteAll();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"75ec8c9aaa10ac00b30fd4c2465409770c838f7b","date":1323020115,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#undeleteAll().mjava","sourceNew":null,"sourceOld":"  /** Undeletes all documents currently marked as deleted in\n   * this index.\n   *\n   * <p>NOTE: this method can only recover documents marked\n   * for deletion but not yet removed from the index; when\n   * and how Lucene removes deleted documents is an\n   * implementation detail, subject to change from release\n   * to release.  However, you can use {@link\n   * #numDeletedDocs} on the current IndexReader instance to\n   * see how many documents will be un-deleted.\n   *\n   * @throws StaleReaderException if the index has changed\n   *  since this reader was opened\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public synchronized void undeleteAll() throws StaleReaderException, CorruptIndexException, LockObtainFailedException, IOException {\n    ensureOpen();\n    acquireWriteLock();\n    hasChanges = true;\n    doUndeleteAll();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3615ce4a1f785ae1b779244de52c6a7d99227e60","date":1323422019,"type":4,"author":"Uwe Schindler","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#undeleteAll().mjava","sourceNew":null,"sourceOld":"  /** Undeletes all documents currently marked as deleted in\n   * this index.\n   *\n   * <p>NOTE: this method can only recover documents marked\n   * for deletion but not yet removed from the index; when\n   * and how Lucene removes deleted documents is an\n   * implementation detail, subject to change from release\n   * to release.  However, you can use {@link\n   * #numDeletedDocs} on the current IndexReader instance to\n   * see how many documents will be un-deleted.\n   *\n   * @throws StaleReaderException if the index has changed\n   *  since this reader was opened\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public synchronized void undeleteAll() throws StaleReaderException, CorruptIndexException, LockObtainFailedException, IOException {\n    ensureOpen();\n    acquireWriteLock();\n    hasChanges = true;\n    doUndeleteAll();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","date":1323437438,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#undeleteAll().mjava","sourceNew":null,"sourceOld":"  /** Undeletes all documents currently marked as deleted in\n   * this index.\n   *\n   * <p>NOTE: this method can only recover documents marked\n   * for deletion but not yet removed from the index; when\n   * and how Lucene removes deleted documents is an\n   * implementation detail, subject to change from release\n   * to release.  However, you can use {@link\n   * #numDeletedDocs} on the current IndexReader instance to\n   * see how many documents will be un-deleted.\n   *\n   * @throws StaleReaderException if the index has changed\n   *  since this reader was opened\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public synchronized void undeleteAll() throws StaleReaderException, CorruptIndexException, LockObtainFailedException, IOException {\n    ensureOpen();\n    acquireWriteLock();\n    hasChanges = true;\n    doUndeleteAll();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d34bb049e6e6181a091c6605cc97170cf758e19f":["cfd641edd796340315609425e9f70819e6d9ef0e"],"75ec8c9aaa10ac00b30fd4c2465409770c838f7b":["d34bb049e6e6181a091c6605cc97170cf758e19f"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["d34bb049e6e6181a091c6605cc97170cf758e19f","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["9454a6510e2db155fb01faa5c049b06ece95fab9","d34bb049e6e6181a091c6605cc97170cf758e19f"],"cfd641edd796340315609425e9f70819e6d9ef0e":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["d34bb049e6e6181a091c6605cc97170cf758e19f","75ec8c9aaa10ac00b30fd4c2465409770c838f7b"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["9454a6510e2db155fb01faa5c049b06ece95fab9","d34bb049e6e6181a091c6605cc97170cf758e19f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"d34bb049e6e6181a091c6605cc97170cf758e19f":["75ec8c9aaa10ac00b30fd4c2465409770c838f7b","ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","29ef99d61cda9641b6250bf9567329a6e65f901d","3615ce4a1f785ae1b779244de52c6a7d99227e60","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"75ec8c9aaa10ac00b30fd4c2465409770c838f7b":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":[],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"cfd641edd796340315609425e9f70819e6d9ef0e":["d34bb049e6e6181a091c6605cc97170cf758e19f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["29ef99d61cda9641b6250bf9567329a6e65f901d","cfd641edd796340315609425e9f70819e6d9ef0e","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}