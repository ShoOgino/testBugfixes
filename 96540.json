{"path":"solr/src/java/org/apache/solr/schema/DateFieldSource[DateField]#getValues(Map,IndexReader).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/schema/DateFieldSource[DateField]#getValues(Map,IndexReader).mjava","pathOld":"/dev/null","sourceNew":"  public DocValues getValues(Map context, IndexReader reader) throws IOException {\n    return new StringIndexDocValues(this, reader, field) {\n      protected String toTerm(String readableValue) {\n        // needed for frange queries to work properly\n        return ft.toInternal(readableValue);\n      }\n\n      public float floatVal(int doc) {\n        return (float)intVal(doc);\n      }\n\n      public int intVal(int doc) {\n        int ord=order[doc];\n        return ord;\n      }\n\n      public long longVal(int doc) {\n        return (long)intVal(doc);\n      }\n\n      public double doubleVal(int doc) {\n        return (double)intVal(doc);\n      }\n\n      public String strVal(int doc) {\n        int ord=order[doc];\n        return ft.indexedToReadable(lookup[ord]);\n      }\n\n      public String toString(int doc) {\n        return description() + '=' + intVal(doc);\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/schema/DateFieldSource[DateField]#getValues(Map,IndexReader).mjava","sourceNew":null,"sourceOld":"  public DocValues getValues(Map context, IndexReader reader) throws IOException {\n    return new StringIndexDocValues(this, reader, field) {\n      protected String toTerm(String readableValue) {\n        // needed for frange queries to work properly\n        return ft.toInternal(readableValue);\n      }\n\n      public float floatVal(int doc) {\n        return (float)intVal(doc);\n      }\n\n      public int intVal(int doc) {\n        int ord=order[doc];\n        return ord;\n      }\n\n      public long longVal(int doc) {\n        return (long)intVal(doc);\n      }\n\n      public double doubleVal(int doc) {\n        return (double)intVal(doc);\n      }\n\n      public String strVal(int doc) {\n        int ord=order[doc];\n        return ft.indexedToReadable(lookup[ord]);\n      }\n\n      public String toString(int doc) {\n        return description() + '=' + intVal(doc);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/schema/DateFieldSource[DateField]#getValues(Map,IndexReader).mjava","pathOld":"src/java/org/apache/solr/schema/DateFieldSource[DateField]#getValues(Map,IndexReader).mjava","sourceNew":"  public DocValues getValues(Map context, IndexReader reader) throws IOException {\n    return new StringIndexDocValues(this, reader, field) {\n      protected String toTerm(String readableValue) {\n        // needed for frange queries to work properly\n        return ft.toInternal(readableValue);\n      }\n\n      public float floatVal(int doc) {\n        return (float)intVal(doc);\n      }\n\n      public int intVal(int doc) {\n        int ord=order[doc];\n        return ord;\n      }\n\n      public long longVal(int doc) {\n        return (long)intVal(doc);\n      }\n\n      public double doubleVal(int doc) {\n        return (double)intVal(doc);\n      }\n\n      public String strVal(int doc) {\n        int ord=order[doc];\n        return ft.indexedToReadable(lookup[ord]);\n      }\n\n      public String toString(int doc) {\n        return description() + '=' + intVal(doc);\n      }\n    };\n  }\n\n","sourceOld":"  public DocValues getValues(Map context, IndexReader reader) throws IOException {\n    return new StringIndexDocValues(this, reader, field) {\n      protected String toTerm(String readableValue) {\n        // needed for frange queries to work properly\n        return ft.toInternal(readableValue);\n      }\n\n      public float floatVal(int doc) {\n        return (float)intVal(doc);\n      }\n\n      public int intVal(int doc) {\n        int ord=order[doc];\n        return ord;\n      }\n\n      public long longVal(int doc) {\n        return (long)intVal(doc);\n      }\n\n      public double doubleVal(int doc) {\n        return (double)intVal(doc);\n      }\n\n      public String strVal(int doc) {\n        int ord=order[doc];\n        return ft.indexedToReadable(lookup[ord]);\n      }\n\n      public String toString(int doc) {\n        return description() + '=' + intVal(doc);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/schema/DateFieldSource[DateField]#getValues(Map,IndexReader).mjava","pathOld":"/dev/null","sourceNew":"  public DocValues getValues(Map context, IndexReader reader) throws IOException {\n    return new StringIndexDocValues(this, reader, field) {\n      protected String toTerm(String readableValue) {\n        // needed for frange queries to work properly\n        return ft.toInternal(readableValue);\n      }\n\n      public float floatVal(int doc) {\n        return (float)intVal(doc);\n      }\n\n      public int intVal(int doc) {\n        int ord=order[doc];\n        return ord;\n      }\n\n      public long longVal(int doc) {\n        return (long)intVal(doc);\n      }\n\n      public double doubleVal(int doc) {\n        return (double)intVal(doc);\n      }\n\n      public String strVal(int doc) {\n        int ord=order[doc];\n        return ft.indexedToReadable(lookup[ord]);\n      }\n\n      public String toString(int doc) {\n        return description() + '=' + intVal(doc);\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"be20f9fed1d3edcb1c84abcc39df87a90fab22df","date":1275590285,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/schema/DateFieldSource[DateField]#getValues(Map,IndexReader).mjava","pathOld":"solr/src/java/org/apache/solr/schema/DateFieldSource[DateField]#getValues(Map,IndexReader).mjava","sourceNew":"  public DocValues getValues(Map context, IndexReader reader) throws IOException {\n    return new StringIndexDocValues(this, reader, field) {\n      protected String toTerm(String readableValue) {\n        // needed for frange queries to work properly\n        return ft.toInternal(readableValue);\n      }\n\n      public float floatVal(int doc) {\n        return (float)intVal(doc);\n      }\n\n      public int intVal(int doc) {\n        int ord=termsIndex.getOrd(doc);\n        return ord;\n      }\n\n      public long longVal(int doc) {\n        return (long)intVal(doc);\n      }\n\n      public double doubleVal(int doc) {\n        return (double)intVal(doc);\n      }\n\n      public String strVal(int doc) {\n        int ord=termsIndex.getOrd(doc);\n        if (ord == 0) {\n          return null;\n        } else {\n          BytesRef br = termsIndex.lookup(ord, new BytesRef());\n          CharArr spare = new CharArr();\n          ft.indexedToReadable(br, spare);\n          return spare.toString();\n        }\n      }\n\n      public String toString(int doc) {\n        return description() + '=' + intVal(doc);\n      }\n    };\n  }\n\n","sourceOld":"  public DocValues getValues(Map context, IndexReader reader) throws IOException {\n    return new StringIndexDocValues(this, reader, field) {\n      protected String toTerm(String readableValue) {\n        // needed for frange queries to work properly\n        return ft.toInternal(readableValue);\n      }\n\n      public float floatVal(int doc) {\n        return (float)intVal(doc);\n      }\n\n      public int intVal(int doc) {\n        int ord=order[doc];\n        return ord;\n      }\n\n      public long longVal(int doc) {\n        return (long)intVal(doc);\n      }\n\n      public double doubleVal(int doc) {\n        return (double)intVal(doc);\n      }\n\n      public String strVal(int doc) {\n        int ord=order[doc];\n        return ft.indexedToReadable(lookup[ord]);\n      }\n\n      public String toString(int doc) {\n        return description() + '=' + intVal(doc);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":["d4d69c535930b5cce125cff868d40f6373dc27d4","d4d69c535930b5cce125cff868d40f6373dc27d4","d4d69c535930b5cce125cff868d40f6373dc27d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c220849f876de24a79f756f65b3eb045db59f63f","date":1294902803,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/schema/DateFieldSource[DateField]#getValues(Map,AtomicReaderContext).mjava","pathOld":"solr/src/java/org/apache/solr/schema/DateFieldSource[DateField]#getValues(Map,IndexReader).mjava","sourceNew":"  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    return new StringIndexDocValues(this, readerContext, field) {\n      protected String toTerm(String readableValue) {\n        // needed for frange queries to work properly\n        return ft.toInternal(readableValue);\n      }\n\n      public float floatVal(int doc) {\n        return (float)intVal(doc);\n      }\n\n      public int intVal(int doc) {\n        int ord=termsIndex.getOrd(doc);\n        return ord;\n      }\n\n      public long longVal(int doc) {\n        return (long)intVal(doc);\n      }\n\n      public double doubleVal(int doc) {\n        return (double)intVal(doc);\n      }\n\n      public String strVal(int doc) {\n        int ord=termsIndex.getOrd(doc);\n        if (ord == 0) {\n          return null;\n        } else {\n          BytesRef br = termsIndex.lookup(ord, new BytesRef());\n          CharArr spare = new CharArr();\n          ft.indexedToReadable(br, spare);\n          return spare.toString();\n        }\n      }\n\n      public String toString(int doc) {\n        return description() + '=' + intVal(doc);\n      }\n    };\n  }\n\n","sourceOld":"  public DocValues getValues(Map context, IndexReader reader) throws IOException {\n    return new StringIndexDocValues(this, reader, field) {\n      protected String toTerm(String readableValue) {\n        // needed for frange queries to work properly\n        return ft.toInternal(readableValue);\n      }\n\n      public float floatVal(int doc) {\n        return (float)intVal(doc);\n      }\n\n      public int intVal(int doc) {\n        int ord=termsIndex.getOrd(doc);\n        return ord;\n      }\n\n      public long longVal(int doc) {\n        return (long)intVal(doc);\n      }\n\n      public double doubleVal(int doc) {\n        return (double)intVal(doc);\n      }\n\n      public String strVal(int doc) {\n        int ord=termsIndex.getOrd(doc);\n        if (ord == 0) {\n          return null;\n        } else {\n          BytesRef br = termsIndex.lookup(ord, new BytesRef());\n          CharArr spare = new CharArr();\n          ft.indexedToReadable(br, spare);\n          return spare.toString();\n        }\n      }\n\n      public String toString(int doc) {\n        return description() + '=' + intVal(doc);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/schema/DateFieldSource[DateField]#getValues(Map,IndexReader).mjava","sourceNew":null,"sourceOld":"  public DocValues getValues(Map context, IndexReader reader) throws IOException {\n    return new StringIndexDocValues(this, reader, field) {\n      protected String toTerm(String readableValue) {\n        // needed for frange queries to work properly\n        return ft.toInternal(readableValue);\n      }\n\n      public float floatVal(int doc) {\n        return (float)intVal(doc);\n      }\n\n      public int intVal(int doc) {\n        int ord=termsIndex.getOrd(doc);\n        return ord;\n      }\n\n      public long longVal(int doc) {\n        return (long)intVal(doc);\n      }\n\n      public double doubleVal(int doc) {\n        return (double)intVal(doc);\n      }\n\n      public String strVal(int doc) {\n        int ord=termsIndex.getOrd(doc);\n        if (ord == 0) {\n          return null;\n        } else {\n          BytesRef br = termsIndex.lookup(ord, new BytesRef());\n          CharArr spare = new CharArr();\n          ft.indexedToReadable(br, spare);\n          return spare.toString();\n        }\n      }\n\n      public String toString(int doc) {\n        return description() + '=' + intVal(doc);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/schema/DateFieldSource[DateField]#getValues(Map,IndexReader).mjava","sourceNew":null,"sourceOld":"  public DocValues getValues(Map context, IndexReader reader) throws IOException {\n    return new StringIndexDocValues(this, reader, field) {\n      protected String toTerm(String readableValue) {\n        // needed for frange queries to work properly\n        return ft.toInternal(readableValue);\n      }\n\n      public float floatVal(int doc) {\n        return (float)intVal(doc);\n      }\n\n      public int intVal(int doc) {\n        int ord=termsIndex.getOrd(doc);\n        return ord;\n      }\n\n      public long longVal(int doc) {\n        return (long)intVal(doc);\n      }\n\n      public double doubleVal(int doc) {\n        return (double)intVal(doc);\n      }\n\n      public String strVal(int doc) {\n        int ord=termsIndex.getOrd(doc);\n        if (ord == 0) {\n          return null;\n        } else {\n          BytesRef br = termsIndex.lookup(ord, new BytesRef());\n          CharArr spare = new CharArr();\n          ft.indexedToReadable(br, spare);\n          return spare.toString();\n        }\n      }\n\n      public String toString(int doc) {\n        return description() + '=' + intVal(doc);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"be20f9fed1d3edcb1c84abcc39df87a90fab22df":["1da8d55113b689b06716246649de6f62430f15c0"],"c220849f876de24a79f756f65b3eb045db59f63f":["be20f9fed1d3edcb1c84abcc39df87a90fab22df"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["be20f9fed1d3edcb1c84abcc39df87a90fab22df","c220849f876de24a79f756f65b3eb045db59f63f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["be20f9fed1d3edcb1c84abcc39df87a90fab22df","c220849f876de24a79f756f65b3eb045db59f63f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c220849f876de24a79f756f65b3eb045db59f63f"]},"commit2Childs":{"1da8d55113b689b06716246649de6f62430f15c0":["be20f9fed1d3edcb1c84abcc39df87a90fab22df"],"be20f9fed1d3edcb1c84abcc39df87a90fab22df":["c220849f876de24a79f756f65b3eb045db59f63f","29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295"],"c220849f876de24a79f756f65b3eb045db59f63f":["29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}