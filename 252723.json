{"path":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/feeds/DocMakerTest#testDocMakerLeak().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/feeds/DocMakerTest#testDocMakerLeak().mjava","pathOld":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/feeds/DocMakerTest#testDocMakerLeak().mjava","sourceNew":"  public void testDocMakerLeak() throws Exception {\n    // DocMaker did not close its ContentSource if resetInputs was called twice,\n    // leading to a file handle leak.\n    File f = new File(getWorkDir(), \"docMakerLeak.txt\");\n    PrintStream ps = new PrintStream(f);\n    ps.println(\"one title\\t\" + System.currentTimeMillis() + \"\\tsome content\");\n    ps.close();\n    \n    Properties props = new Properties();\n    props.setProperty(\"content.source\", \"org.apache.lucene.benchmark.byTask.feeds.LineDocSource\");\n    props.setProperty(\"docs.file\", f.getAbsolutePath());\n    props.setProperty(\"content.source.forever\", \"false\");\n    Config config = new Config(props);\n    DocMaker dm = new DocMaker();\n    dm.setConfig(config);\n    dm.resetInputs();\n    dm.resetInputs();\n    dm.close();\n  }\n\n","sourceOld":"  public void testDocMakerLeak() throws Exception {\n    // DocMaker did not close its ContentSource if resetInputs was called twice,\n    // leading to a file handle leak.\n    File f = new File(getWorkDir(), \"docMakerLeak.txt\");\n    PrintStream ps = new PrintStream(f);\n    ps.println(\"one title\\t\" + System.currentTimeMillis() + \"\\tsome content\");\n    ps.close();\n    \n    Properties props = new Properties();\n    props.setProperty(\"content.source\", \"org.apache.lucene.benchmark.byTask.feeds.LineDocSource\");\n    props.setProperty(\"docs.file\", f.getAbsolutePath());\n    props.setProperty(\"content.source.forever\", \"false\");\n    Config config = new Config(props);\n    DocMaker dm = new DocMaker();\n    dm.setConfig(config);\n    dm.resetInputs();\n    dm.resetInputs();\n    dm.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e76e769a8863037082ce292c260151d588e6724e","date":1337253730,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/feeds/DocMakerTest#testDocMakerLeak().mjava","pathOld":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/feeds/DocMakerTest#testDocMakerLeak().mjava","sourceNew":"  public void testDocMakerLeak() throws Exception {\n    // DocMaker did not close its ContentSource if resetInputs was called twice,\n    // leading to a file handle leak.\n    File f = new File(getWorkDir(), \"docMakerLeak.txt\");\n    PrintStream ps = new PrintStream(f);\n    ps.println(\"one title\\t\" + System.currentTimeMillis() + \"\\tsome content\");\n    ps.close();\n    \n    Properties props = new Properties();\n    props.setProperty(\"docs.file\", f.getAbsolutePath());\n    props.setProperty(\"content.source.forever\", \"false\");\n    Config config = new Config(props);\n    \n    ContentSource source = new LineDocSource();\n    source.setConfig(config);\n    \n    DocMaker dm = new DocMaker();\n    dm.setConfig(config, source);\n    dm.resetInputs();\n    dm.resetInputs();\n    dm.close();\n  }\n\n","sourceOld":"  public void testDocMakerLeak() throws Exception {\n    // DocMaker did not close its ContentSource if resetInputs was called twice,\n    // leading to a file handle leak.\n    File f = new File(getWorkDir(), \"docMakerLeak.txt\");\n    PrintStream ps = new PrintStream(f);\n    ps.println(\"one title\\t\" + System.currentTimeMillis() + \"\\tsome content\");\n    ps.close();\n    \n    Properties props = new Properties();\n    props.setProperty(\"content.source\", \"org.apache.lucene.benchmark.byTask.feeds.LineDocSource\");\n    props.setProperty(\"docs.file\", f.getAbsolutePath());\n    props.setProperty(\"content.source.forever\", \"false\");\n    Config config = new Config(props);\n    DocMaker dm = new DocMaker();\n    dm.setConfig(config);\n    dm.resetInputs();\n    dm.resetInputs();\n    dm.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ef0d8a69209261514c5739c770bba706c2308450","date":1337607597,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/feeds/DocMakerTest#testDocMakerLeak().mjava","pathOld":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/feeds/DocMakerTest#testDocMakerLeak().mjava","sourceNew":"  public void testDocMakerLeak() throws Exception {\n    // DocMaker did not close its ContentSource if resetInputs was called twice,\n    // leading to a file handle leak.\n    File f = new File(getWorkDir(), \"docMakerLeak.txt\");\n    PrintStream ps = new PrintStream(f);\n    ps.println(\"one title\\t\" + System.currentTimeMillis() + \"\\tsome content\");\n    ps.close();\n    \n    Properties props = new Properties();\n    props.setProperty(\"docs.file\", f.getAbsolutePath());\n    props.setProperty(\"content.source.forever\", \"false\");\n    Config config = new Config(props);\n    \n    ContentSource source = new LineDocSource();\n    source.setConfig(config);\n    \n    DocMaker dm = new DocMaker();\n    dm.setConfig(config, source);\n    dm.resetInputs();\n    dm.resetInputs();\n    dm.close();\n  }\n\n","sourceOld":"  public void testDocMakerLeak() throws Exception {\n    // DocMaker did not close its ContentSource if resetInputs was called twice,\n    // leading to a file handle leak.\n    File f = new File(getWorkDir(), \"docMakerLeak.txt\");\n    PrintStream ps = new PrintStream(f);\n    ps.println(\"one title\\t\" + System.currentTimeMillis() + \"\\tsome content\");\n    ps.close();\n    \n    Properties props = new Properties();\n    props.setProperty(\"content.source\", \"org.apache.lucene.benchmark.byTask.feeds.LineDocSource\");\n    props.setProperty(\"docs.file\", f.getAbsolutePath());\n    props.setProperty(\"content.source.forever\", \"false\");\n    Config config = new Config(props);\n    DocMaker dm = new DocMaker();\n    dm.setConfig(config);\n    dm.resetInputs();\n    dm.resetInputs();\n    dm.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9c70cdb81dc660d90f9d0664dd91b473b7e66563","date":1341679310,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/feeds/DocMakerTest#testDocMakerLeak().mjava","pathOld":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/feeds/DocMakerTest#testDocMakerLeak().mjava","sourceNew":"  public void testDocMakerLeak() throws Exception {\n    // DocMaker did not close its ContentSource if resetInputs was called twice,\n    // leading to a file handle leak.\n    File f = new File(getWorkDir(), \"docMakerLeak.txt\");\n    PrintStream ps = new PrintStream(f, \"UTF-8\");\n    ps.println(\"one title\\t\" + System.currentTimeMillis() + \"\\tsome content\");\n    ps.close();\n    \n    Properties props = new Properties();\n    props.setProperty(\"docs.file\", f.getAbsolutePath());\n    props.setProperty(\"content.source.forever\", \"false\");\n    Config config = new Config(props);\n    \n    ContentSource source = new LineDocSource();\n    source.setConfig(config);\n    \n    DocMaker dm = new DocMaker();\n    dm.setConfig(config, source);\n    dm.resetInputs();\n    dm.resetInputs();\n    dm.close();\n  }\n\n","sourceOld":"  public void testDocMakerLeak() throws Exception {\n    // DocMaker did not close its ContentSource if resetInputs was called twice,\n    // leading to a file handle leak.\n    File f = new File(getWorkDir(), \"docMakerLeak.txt\");\n    PrintStream ps = new PrintStream(f);\n    ps.println(\"one title\\t\" + System.currentTimeMillis() + \"\\tsome content\");\n    ps.close();\n    \n    Properties props = new Properties();\n    props.setProperty(\"docs.file\", f.getAbsolutePath());\n    props.setProperty(\"content.source.forever\", \"false\");\n    Config config = new Config(props);\n    \n    ContentSource source = new LineDocSource();\n    source.setConfig(config);\n    \n    DocMaker dm = new DocMaker();\n    dm.setConfig(config, source);\n    dm.resetInputs();\n    dm.resetInputs();\n    dm.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2acf500f78aa12b92e371fd89c719291986b6b90","date":1341846236,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/feeds/DocMakerTest#testDocMakerLeak().mjava","pathOld":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/feeds/DocMakerTest#testDocMakerLeak().mjava","sourceNew":"  public void testDocMakerLeak() throws Exception {\n    // DocMaker did not close its ContentSource if resetInputs was called twice,\n    // leading to a file handle leak.\n    File f = new File(getWorkDir(), \"docMakerLeak.txt\");\n    PrintStream ps = new PrintStream(f, \"UTF-8\");\n    ps.println(\"one title\\t\" + System.currentTimeMillis() + \"\\tsome content\");\n    ps.close();\n    \n    Properties props = new Properties();\n    props.setProperty(\"docs.file\", f.getAbsolutePath());\n    props.setProperty(\"content.source.forever\", \"false\");\n    Config config = new Config(props);\n    \n    ContentSource source = new LineDocSource();\n    source.setConfig(config);\n    \n    DocMaker dm = new DocMaker();\n    dm.setConfig(config, source);\n    dm.resetInputs();\n    dm.resetInputs();\n    dm.close();\n  }\n\n","sourceOld":"  public void testDocMakerLeak() throws Exception {\n    // DocMaker did not close its ContentSource if resetInputs was called twice,\n    // leading to a file handle leak.\n    File f = new File(getWorkDir(), \"docMakerLeak.txt\");\n    PrintStream ps = new PrintStream(f);\n    ps.println(\"one title\\t\" + System.currentTimeMillis() + \"\\tsome content\");\n    ps.close();\n    \n    Properties props = new Properties();\n    props.setProperty(\"docs.file\", f.getAbsolutePath());\n    props.setProperty(\"content.source.forever\", \"false\");\n    Config config = new Config(props);\n    \n    ContentSource source = new LineDocSource();\n    source.setConfig(config);\n    \n    DocMaker dm = new DocMaker();\n    dm.setConfig(config, source);\n    dm.resetInputs();\n    dm.resetInputs();\n    dm.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"46d8ada1fff8d18cb197c38c7983225162599948","date":1341853497,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/feeds/DocMakerTest#testDocMakerLeak().mjava","pathOld":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/feeds/DocMakerTest#testDocMakerLeak().mjava","sourceNew":"  public void testDocMakerLeak() throws Exception {\n    // DocMaker did not close its ContentSource if resetInputs was called twice,\n    // leading to a file handle leak.\n    File f = new File(getWorkDir(), \"docMakerLeak.txt\");\n    PrintStream ps = new PrintStream(f, \"UTF-8\");\n    ps.println(\"one title\\t\" + System.currentTimeMillis() + \"\\tsome content\");\n    ps.close();\n    \n    Properties props = new Properties();\n    props.setProperty(\"docs.file\", f.getAbsolutePath());\n    props.setProperty(\"content.source.forever\", \"false\");\n    Config config = new Config(props);\n    \n    ContentSource source = new LineDocSource();\n    source.setConfig(config);\n    \n    DocMaker dm = new DocMaker();\n    dm.setConfig(config, source);\n    dm.resetInputs();\n    dm.resetInputs();\n    dm.close();\n  }\n\n","sourceOld":"  public void testDocMakerLeak() throws Exception {\n    // DocMaker did not close its ContentSource if resetInputs was called twice,\n    // leading to a file handle leak.\n    File f = new File(getWorkDir(), \"docMakerLeak.txt\");\n    PrintStream ps = new PrintStream(f);\n    ps.println(\"one title\\t\" + System.currentTimeMillis() + \"\\tsome content\");\n    ps.close();\n    \n    Properties props = new Properties();\n    props.setProperty(\"docs.file\", f.getAbsolutePath());\n    props.setProperty(\"content.source.forever\", \"false\");\n    Config config = new Config(props);\n    \n    ContentSource source = new LineDocSource();\n    source.setConfig(config);\n    \n    DocMaker dm = new DocMaker();\n    dm.setConfig(config, source);\n    dm.resetInputs();\n    dm.resetInputs();\n    dm.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/feeds/DocMakerTest#testDocMakerLeak().mjava","pathOld":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/feeds/DocMakerTest#testDocMakerLeak().mjava","sourceNew":"  public void testDocMakerLeak() throws Exception {\n    // DocMaker did not close its ContentSource if resetInputs was called twice,\n    // leading to a file handle leak.\n    File f = new File(getWorkDir(), \"docMakerLeak.txt\");\n    PrintStream ps = new PrintStream(f, \"UTF-8\");\n    ps.println(\"one title\\t\" + System.currentTimeMillis() + \"\\tsome content\");\n    ps.close();\n    \n    Properties props = new Properties();\n    props.setProperty(\"docs.file\", f.getAbsolutePath());\n    props.setProperty(\"content.source.forever\", \"false\");\n    Config config = new Config(props);\n    \n    ContentSource source = new LineDocSource();\n    source.setConfig(config);\n    \n    DocMaker dm = new DocMaker();\n    dm.setConfig(config, source);\n    dm.resetInputs();\n    dm.resetInputs();\n    dm.close();\n  }\n\n","sourceOld":"  public void testDocMakerLeak() throws Exception {\n    // DocMaker did not close its ContentSource if resetInputs was called twice,\n    // leading to a file handle leak.\n    File f = new File(getWorkDir(), \"docMakerLeak.txt\");\n    PrintStream ps = new PrintStream(f);\n    ps.println(\"one title\\t\" + System.currentTimeMillis() + \"\\tsome content\");\n    ps.close();\n    \n    Properties props = new Properties();\n    props.setProperty(\"docs.file\", f.getAbsolutePath());\n    props.setProperty(\"content.source.forever\", \"false\");\n    Config config = new Config(props);\n    \n    ContentSource source = new LineDocSource();\n    source.setConfig(config);\n    \n    DocMaker dm = new DocMaker();\n    dm.setConfig(config, source);\n    dm.resetInputs();\n    dm.resetInputs();\n    dm.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7d89d7e4e5101347833eea558851bf4209218619","date":1396265641,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/feeds/DocMakerTest#testDocMakerLeak().mjava","pathOld":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/feeds/DocMakerTest#testDocMakerLeak().mjava","sourceNew":"  public void testDocMakerLeak() throws Exception {\n    // DocMaker did not close its ContentSource if resetInputs was called twice,\n    // leading to a file handle leak.\n    File f = new File(getWorkDir(), \"docMakerLeak.txt\");\n    PrintStream ps = new PrintStream(f, IOUtils.UTF_8);\n    ps.println(\"one title\\t\" + System.currentTimeMillis() + \"\\tsome content\");\n    ps.close();\n    \n    Properties props = new Properties();\n    props.setProperty(\"docs.file\", f.getAbsolutePath());\n    props.setProperty(\"content.source.forever\", \"false\");\n    Config config = new Config(props);\n    \n    ContentSource source = new LineDocSource();\n    source.setConfig(config);\n    \n    DocMaker dm = new DocMaker();\n    dm.setConfig(config, source);\n    dm.resetInputs();\n    dm.resetInputs();\n    dm.close();\n  }\n\n","sourceOld":"  public void testDocMakerLeak() throws Exception {\n    // DocMaker did not close its ContentSource if resetInputs was called twice,\n    // leading to a file handle leak.\n    File f = new File(getWorkDir(), \"docMakerLeak.txt\");\n    PrintStream ps = new PrintStream(f, \"UTF-8\");\n    ps.println(\"one title\\t\" + System.currentTimeMillis() + \"\\tsome content\");\n    ps.close();\n    \n    Properties props = new Properties();\n    props.setProperty(\"docs.file\", f.getAbsolutePath());\n    props.setProperty(\"content.source.forever\", \"false\");\n    Config config = new Config(props);\n    \n    ContentSource source = new LineDocSource();\n    source.setConfig(config);\n    \n    DocMaker dm = new DocMaker();\n    dm.setConfig(config, source);\n    dm.resetInputs();\n    dm.resetInputs();\n    dm.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/feeds/DocMakerTest#testDocMakerLeak().mjava","pathOld":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/feeds/DocMakerTest#testDocMakerLeak().mjava","sourceNew":"  public void testDocMakerLeak() throws Exception {\n    // DocMaker did not close its ContentSource if resetInputs was called twice,\n    // leading to a file handle leak.\n    File f = new File(getWorkDir(), \"docMakerLeak.txt\");\n    PrintStream ps = new PrintStream(f, IOUtils.UTF_8);\n    ps.println(\"one title\\t\" + System.currentTimeMillis() + \"\\tsome content\");\n    ps.close();\n    \n    Properties props = new Properties();\n    props.setProperty(\"docs.file\", f.getAbsolutePath());\n    props.setProperty(\"content.source.forever\", \"false\");\n    Config config = new Config(props);\n    \n    ContentSource source = new LineDocSource();\n    source.setConfig(config);\n    \n    DocMaker dm = new DocMaker();\n    dm.setConfig(config, source);\n    dm.resetInputs();\n    dm.resetInputs();\n    dm.close();\n  }\n\n","sourceOld":"  public void testDocMakerLeak() throws Exception {\n    // DocMaker did not close its ContentSource if resetInputs was called twice,\n    // leading to a file handle leak.\n    File f = new File(getWorkDir(), \"docMakerLeak.txt\");\n    PrintStream ps = new PrintStream(f, \"UTF-8\");\n    ps.println(\"one title\\t\" + System.currentTimeMillis() + \"\\tsome content\");\n    ps.close();\n    \n    Properties props = new Properties();\n    props.setProperty(\"docs.file\", f.getAbsolutePath());\n    props.setProperty(\"content.source.forever\", \"false\");\n    Config config = new Config(props);\n    \n    ContentSource source = new LineDocSource();\n    source.setConfig(config);\n    \n    DocMaker dm = new DocMaker();\n    dm.setConfig(config, source);\n    dm.resetInputs();\n    dm.resetInputs();\n    dm.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4abec28b874149a7223e32cc7a01704c27790de","date":1410644789,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/feeds/DocMakerTest#testDocMakerLeak().mjava","pathOld":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/feeds/DocMakerTest#testDocMakerLeak().mjava","sourceNew":"  public void testDocMakerLeak() throws Exception {\n    // DocMaker did not close its ContentSource if resetInputs was called twice,\n    // leading to a file handle leak.\n    Path f = getWorkDir().resolve(\"docMakerLeak.txt\");\n    PrintStream ps = new PrintStream(Files.newOutputStream(f), true, IOUtils.UTF_8);\n    ps.println(\"one title\\t\" + System.currentTimeMillis() + \"\\tsome content\");\n    ps.close();\n    \n    Properties props = new Properties();\n    props.setProperty(\"docs.file\", f.toAbsolutePath().toString());\n    props.setProperty(\"content.source.forever\", \"false\");\n    Config config = new Config(props);\n    \n    ContentSource source = new LineDocSource();\n    source.setConfig(config);\n    \n    DocMaker dm = new DocMaker();\n    dm.setConfig(config, source);\n    dm.resetInputs();\n    dm.resetInputs();\n    dm.close();\n  }\n\n","sourceOld":"  public void testDocMakerLeak() throws Exception {\n    // DocMaker did not close its ContentSource if resetInputs was called twice,\n    // leading to a file handle leak.\n    File f = new File(getWorkDir(), \"docMakerLeak.txt\");\n    PrintStream ps = new PrintStream(f, IOUtils.UTF_8);\n    ps.println(\"one title\\t\" + System.currentTimeMillis() + \"\\tsome content\");\n    ps.close();\n    \n    Properties props = new Properties();\n    props.setProperty(\"docs.file\", f.getAbsolutePath());\n    props.setProperty(\"content.source.forever\", \"false\");\n    Config config = new Config(props);\n    \n    ContentSource source = new LineDocSource();\n    source.setConfig(config);\n    \n    DocMaker dm = new DocMaker();\n    dm.setConfig(config, source);\n    dm.resetInputs();\n    dm.resetInputs();\n    dm.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5eb2511ababf862ea11e10761c70ee560cd84510":["2acf500f78aa12b92e371fd89c719291986b6b90","7d89d7e4e5101347833eea558851bf4209218619"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["e76e769a8863037082ce292c260151d588e6724e","2acf500f78aa12b92e371fd89c719291986b6b90"],"e76e769a8863037082ce292c260151d588e6724e":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2acf500f78aa12b92e371fd89c719291986b6b90":["e76e769a8863037082ce292c260151d588e6724e","9c70cdb81dc660d90f9d0664dd91b473b7e66563"],"f4abec28b874149a7223e32cc7a01704c27790de":["7d89d7e4e5101347833eea558851bf4209218619"],"7d89d7e4e5101347833eea558851bf4209218619":["2acf500f78aa12b92e371fd89c719291986b6b90"],"ef0d8a69209261514c5739c770bba706c2308450":["b89678825b68eccaf09e6ab71675fc0b0af1e099","e76e769a8863037082ce292c260151d588e6724e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f4abec28b874149a7223e32cc7a01704c27790de"],"9c70cdb81dc660d90f9d0664dd91b473b7e66563":["e76e769a8863037082ce292c260151d588e6724e"],"46d8ada1fff8d18cb197c38c7983225162599948":["e76e769a8863037082ce292c260151d588e6724e","2acf500f78aa12b92e371fd89c719291986b6b90"]},"commit2Childs":{"5eb2511ababf862ea11e10761c70ee560cd84510":[],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["e76e769a8863037082ce292c260151d588e6724e","ef0d8a69209261514c5739c770bba706c2308450"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"e76e769a8863037082ce292c260151d588e6724e":["fe33227f6805edab2036cbb80645cc4e2d1fa424","2acf500f78aa12b92e371fd89c719291986b6b90","ef0d8a69209261514c5739c770bba706c2308450","9c70cdb81dc660d90f9d0664dd91b473b7e66563","46d8ada1fff8d18cb197c38c7983225162599948"],"2acf500f78aa12b92e371fd89c719291986b6b90":["5eb2511ababf862ea11e10761c70ee560cd84510","fe33227f6805edab2036cbb80645cc4e2d1fa424","7d89d7e4e5101347833eea558851bf4209218619","46d8ada1fff8d18cb197c38c7983225162599948"],"7d89d7e4e5101347833eea558851bf4209218619":["5eb2511ababf862ea11e10761c70ee560cd84510","f4abec28b874149a7223e32cc7a01704c27790de"],"f4abec28b874149a7223e32cc7a01704c27790de":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ef0d8a69209261514c5739c770bba706c2308450":[],"9c70cdb81dc660d90f9d0664dd91b473b7e66563":["2acf500f78aa12b92e371fd89c719291986b6b90"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"46d8ada1fff8d18cb197c38c7983225162599948":[]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","fe33227f6805edab2036cbb80645cc4e2d1fa424","ef0d8a69209261514c5739c770bba706c2308450","cd5edd1f2b162a5cfa08efd17851a07373a96817","46d8ada1fff8d18cb197c38c7983225162599948"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}