{"path":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterMaxDocs#testExactlyAtTrueLimit().mjava","commits":[{"id":"d6b7c6630218ed9693cdb8643276513f9f0043f4","date":1406648084,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterMaxDocs#testExactlyAtTrueLimit().mjava","pathOld":"/dev/null","sourceNew":"  @Monster(\"takes a long time\")\n  public void testExactlyAtTrueLimit() throws Exception {\n    Directory dir = newFSDirectory(createTempDir(\"2BDocs3\"));\n    IndexWriter iw = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, null));\n    Document doc = new Document();\n    doc.add(newStringField(\"field\", \"text\", Field.Store.NO));\n    for (int i = 0; i < IndexWriter.MAX_DOCS; i++) {\n      iw.addDocument(doc);\n      /*\n      if (i%1000000 == 0) {\n        System.out.println((i/1000000) + \" M docs...\");\n      }\n      */\n    }\n    iw.commit();\n\n    // First unoptimized, then optimized:\n    for(int i=0;i<2;i++) {\n      DirectoryReader ir = DirectoryReader.open(dir);\n      assertEquals(IndexWriter.MAX_DOCS, ir.maxDoc());\n      assertEquals(IndexWriter.MAX_DOCS, ir.numDocs());\n      IndexSearcher searcher = new IndexSearcher(ir);\n      TopDocs hits = searcher.search(new TermQuery(new Term(\"field\", \"text\")), 10);\n      assertEquals(IndexWriter.MAX_DOCS, hits.totalHits);\n\n      // Sort by docID reversed:\n      hits = searcher.search(new TermQuery(new Term(\"field\", \"text\")), null, 10, new Sort(new SortField(null, SortField.Type.DOC, true)));\n      assertEquals(IndexWriter.MAX_DOCS, hits.totalHits);\n      assertEquals(10, hits.scoreDocs.length);\n      assertEquals(IndexWriter.MAX_DOCS-1, hits.scoreDocs[0].doc);\n      ir.close();\n\n      iw.forceMerge(1);\n    }\n\n    iw.shutdown();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["fd3746413dc46d6779710924524e4b59425b0bd0","656cfb06eff2244ff5a25ffb3ed3a79942ece85c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterMaxDocs#testExactlyAtTrueLimit().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterMaxDocs#testExactlyAtTrueLimit().mjava","sourceNew":"  @Monster(\"takes a long time\")\n  public void testExactlyAtTrueLimit() throws Exception {\n    Directory dir = newFSDirectory(createTempDir(\"2BDocs3\"));\n    IndexWriter iw = new IndexWriter(dir, new IndexWriterConfig(null));\n    Document doc = new Document();\n    doc.add(newStringField(\"field\", \"text\", Field.Store.NO));\n    for (int i = 0; i < IndexWriter.MAX_DOCS; i++) {\n      iw.addDocument(doc);\n      /*\n      if (i%1000000 == 0) {\n        System.out.println((i/1000000) + \" M docs...\");\n      }\n      */\n    }\n    iw.commit();\n\n    // First unoptimized, then optimized:\n    for(int i=0;i<2;i++) {\n      DirectoryReader ir = DirectoryReader.open(dir);\n      assertEquals(IndexWriter.MAX_DOCS, ir.maxDoc());\n      assertEquals(IndexWriter.MAX_DOCS, ir.numDocs());\n      IndexSearcher searcher = new IndexSearcher(ir);\n      TopDocs hits = searcher.search(new TermQuery(new Term(\"field\", \"text\")), 10);\n      assertEquals(IndexWriter.MAX_DOCS, hits.totalHits);\n\n      // Sort by docID reversed:\n      hits = searcher.search(new TermQuery(new Term(\"field\", \"text\")), null, 10, new Sort(new SortField(null, SortField.Type.DOC, true)));\n      assertEquals(IndexWriter.MAX_DOCS, hits.totalHits);\n      assertEquals(10, hits.scoreDocs.length);\n      assertEquals(IndexWriter.MAX_DOCS-1, hits.scoreDocs[0].doc);\n      ir.close();\n\n      iw.forceMerge(1);\n    }\n\n    iw.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Monster(\"takes a long time\")\n  public void testExactlyAtTrueLimit() throws Exception {\n    Directory dir = newFSDirectory(createTempDir(\"2BDocs3\"));\n    IndexWriter iw = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, null));\n    Document doc = new Document();\n    doc.add(newStringField(\"field\", \"text\", Field.Store.NO));\n    for (int i = 0; i < IndexWriter.MAX_DOCS; i++) {\n      iw.addDocument(doc);\n      /*\n      if (i%1000000 == 0) {\n        System.out.println((i/1000000) + \" M docs...\");\n      }\n      */\n    }\n    iw.commit();\n\n    // First unoptimized, then optimized:\n    for(int i=0;i<2;i++) {\n      DirectoryReader ir = DirectoryReader.open(dir);\n      assertEquals(IndexWriter.MAX_DOCS, ir.maxDoc());\n      assertEquals(IndexWriter.MAX_DOCS, ir.numDocs());\n      IndexSearcher searcher = new IndexSearcher(ir);\n      TopDocs hits = searcher.search(new TermQuery(new Term(\"field\", \"text\")), 10);\n      assertEquals(IndexWriter.MAX_DOCS, hits.totalHits);\n\n      // Sort by docID reversed:\n      hits = searcher.search(new TermQuery(new Term(\"field\", \"text\")), null, 10, new Sort(new SortField(null, SortField.Type.DOC, true)));\n      assertEquals(IndexWriter.MAX_DOCS, hits.totalHits);\n      assertEquals(10, hits.scoreDocs.length);\n      assertEquals(IndexWriter.MAX_DOCS-1, hits.scoreDocs[0].doc);\n      ir.close();\n\n      iw.forceMerge(1);\n    }\n\n    iw.shutdown();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"656cfb06eff2244ff5a25ffb3ed3a79942ece85c","date":1413181096,"type":3,"author":"Shawn Heisey","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterMaxDocs#testExactlyAtTrueLimit().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterMaxDocs#testExactlyAtTrueLimit().mjava","sourceNew":"  // The two hour time was achieved on a Linux 3.13 system with these specs:\n  // 3-core AMD at 2.5Ghz, 12 GB RAM, 5GB test heap, 2 test JVMs, 2TB SATA.\n  @Monster(\"takes over two hours\")\n  public void testExactlyAtTrueLimit() throws Exception {\n    Directory dir = newFSDirectory(createTempDir(\"2BDocs3\"));\n    IndexWriter iw = new IndexWriter(dir, new IndexWriterConfig(null));\n    Document doc = new Document();\n    doc.add(newStringField(\"field\", \"text\", Field.Store.NO));\n    for (int i = 0; i < IndexWriter.MAX_DOCS; i++) {\n      iw.addDocument(doc);\n      /*\n      if (i%1000000 == 0) {\n        System.out.println((i/1000000) + \" M docs...\");\n      }\n      */\n    }\n    iw.commit();\n\n    // First unoptimized, then optimized:\n    for(int i=0;i<2;i++) {\n      DirectoryReader ir = DirectoryReader.open(dir);\n      assertEquals(IndexWriter.MAX_DOCS, ir.maxDoc());\n      assertEquals(IndexWriter.MAX_DOCS, ir.numDocs());\n      IndexSearcher searcher = new IndexSearcher(ir);\n      TopDocs hits = searcher.search(new TermQuery(new Term(\"field\", \"text\")), 10);\n      assertEquals(IndexWriter.MAX_DOCS, hits.totalHits);\n\n      // Sort by docID reversed:\n      hits = searcher.search(new TermQuery(new Term(\"field\", \"text\")), null, 10, new Sort(new SortField(null, SortField.Type.DOC, true)));\n      assertEquals(IndexWriter.MAX_DOCS, hits.totalHits);\n      assertEquals(10, hits.scoreDocs.length);\n      assertEquals(IndexWriter.MAX_DOCS-1, hits.scoreDocs[0].doc);\n      ir.close();\n\n      iw.forceMerge(1);\n    }\n\n    iw.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Monster(\"takes a long time\")\n  public void testExactlyAtTrueLimit() throws Exception {\n    Directory dir = newFSDirectory(createTempDir(\"2BDocs3\"));\n    IndexWriter iw = new IndexWriter(dir, new IndexWriterConfig(null));\n    Document doc = new Document();\n    doc.add(newStringField(\"field\", \"text\", Field.Store.NO));\n    for (int i = 0; i < IndexWriter.MAX_DOCS; i++) {\n      iw.addDocument(doc);\n      /*\n      if (i%1000000 == 0) {\n        System.out.println((i/1000000) + \" M docs...\");\n      }\n      */\n    }\n    iw.commit();\n\n    // First unoptimized, then optimized:\n    for(int i=0;i<2;i++) {\n      DirectoryReader ir = DirectoryReader.open(dir);\n      assertEquals(IndexWriter.MAX_DOCS, ir.maxDoc());\n      assertEquals(IndexWriter.MAX_DOCS, ir.numDocs());\n      IndexSearcher searcher = new IndexSearcher(ir);\n      TopDocs hits = searcher.search(new TermQuery(new Term(\"field\", \"text\")), 10);\n      assertEquals(IndexWriter.MAX_DOCS, hits.totalHits);\n\n      // Sort by docID reversed:\n      hits = searcher.search(new TermQuery(new Term(\"field\", \"text\")), null, 10, new Sort(new SortField(null, SortField.Type.DOC, true)));\n      assertEquals(IndexWriter.MAX_DOCS, hits.totalHits);\n      assertEquals(10, hits.scoreDocs.length);\n      assertEquals(IndexWriter.MAX_DOCS-1, hits.scoreDocs[0].doc);\n      ir.close();\n\n      iw.forceMerge(1);\n    }\n\n    iw.close();\n    dir.close();\n  }\n\n","bugFix":["d6b7c6630218ed9693cdb8643276513f9f0043f4"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"55980207f1977bd1463465de1659b821347e2fa8","date":1413336386,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterMaxDocs#testExactlyAtTrueLimit().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterMaxDocs#testExactlyAtTrueLimit().mjava","sourceNew":"  // The two hour time was achieved on a Linux 3.13 system with these specs:\n  // 3-core AMD at 2.5Ghz, 12 GB RAM, 5GB test heap, 2 test JVMs, 2TB SATA.\n  @Monster(\"takes over two hours\")\n  public void testExactlyAtTrueLimit() throws Exception {\n    Directory dir = newFSDirectory(createTempDir(\"2BDocs3\"));\n    IndexWriter iw = new IndexWriter(dir, new IndexWriterConfig(null));\n    Document doc = new Document();\n    doc.add(newStringField(\"field\", \"text\", Field.Store.NO));\n    for (int i = 0; i < IndexWriter.MAX_DOCS; i++) {\n      iw.addDocument(doc);\n      /*\n      if (i%1000000 == 0) {\n        System.out.println((i/1000000) + \" M docs...\");\n      }\n      */\n    }\n    iw.commit();\n\n    // First unoptimized, then optimized:\n    for(int i=0;i<2;i++) {\n      DirectoryReader ir = DirectoryReader.open(dir);\n      assertEquals(IndexWriter.MAX_DOCS, ir.maxDoc());\n      assertEquals(IndexWriter.MAX_DOCS, ir.numDocs());\n      IndexSearcher searcher = new IndexSearcher(ir);\n      TopDocs hits = searcher.search(new TermQuery(new Term(\"field\", \"text\")), 10);\n      assertEquals(IndexWriter.MAX_DOCS, hits.totalHits);\n\n      // Sort by docID reversed:\n      hits = searcher.search(new TermQuery(new Term(\"field\", \"text\")), null, 10, new Sort(new SortField(null, SortField.Type.DOC, true)));\n      assertEquals(IndexWriter.MAX_DOCS, hits.totalHits);\n      assertEquals(10, hits.scoreDocs.length);\n      assertEquals(IndexWriter.MAX_DOCS-1, hits.scoreDocs[0].doc);\n      ir.close();\n\n      iw.forceMerge(1);\n    }\n\n    iw.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Monster(\"takes a long time\")\n  public void testExactlyAtTrueLimit() throws Exception {\n    Directory dir = newFSDirectory(createTempDir(\"2BDocs3\"));\n    IndexWriter iw = new IndexWriter(dir, new IndexWriterConfig(null));\n    Document doc = new Document();\n    doc.add(newStringField(\"field\", \"text\", Field.Store.NO));\n    for (int i = 0; i < IndexWriter.MAX_DOCS; i++) {\n      iw.addDocument(doc);\n      /*\n      if (i%1000000 == 0) {\n        System.out.println((i/1000000) + \" M docs...\");\n      }\n      */\n    }\n    iw.commit();\n\n    // First unoptimized, then optimized:\n    for(int i=0;i<2;i++) {\n      DirectoryReader ir = DirectoryReader.open(dir);\n      assertEquals(IndexWriter.MAX_DOCS, ir.maxDoc());\n      assertEquals(IndexWriter.MAX_DOCS, ir.numDocs());\n      IndexSearcher searcher = new IndexSearcher(ir);\n      TopDocs hits = searcher.search(new TermQuery(new Term(\"field\", \"text\")), 10);\n      assertEquals(IndexWriter.MAX_DOCS, hits.totalHits);\n\n      // Sort by docID reversed:\n      hits = searcher.search(new TermQuery(new Term(\"field\", \"text\")), null, 10, new Sort(new SortField(null, SortField.Type.DOC, true)));\n      assertEquals(IndexWriter.MAX_DOCS, hits.totalHits);\n      assertEquals(10, hits.scoreDocs.length);\n      assertEquals(IndexWriter.MAX_DOCS-1, hits.scoreDocs[0].doc);\n      ir.close();\n\n      iw.forceMerge(1);\n    }\n\n    iw.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc","date":1424799790,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterMaxDocs#testExactlyAtTrueLimit().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterMaxDocs#testExactlyAtTrueLimit().mjava","sourceNew":"  // The two hour time was achieved on a Linux 3.13 system with these specs:\n  // 3-core AMD at 2.5Ghz, 12 GB RAM, 5GB test heap, 2 test JVMs, 2TB SATA.\n  @Monster(\"takes over two hours\")\n  public void testExactlyAtTrueLimit() throws Exception {\n    Directory dir = newFSDirectory(createTempDir(\"2BDocs3\"));\n    IndexWriter iw = new IndexWriter(dir, new IndexWriterConfig(null));\n    Document doc = new Document();\n    doc.add(newStringField(\"field\", \"text\", Field.Store.NO));\n    for (int i = 0; i < IndexWriter.MAX_DOCS; i++) {\n      iw.addDocument(doc);\n      /*\n      if (i%1000000 == 0) {\n        System.out.println((i/1000000) + \" M docs...\");\n      }\n      */\n    }\n    iw.commit();\n\n    // First unoptimized, then optimized:\n    for(int i=0;i<2;i++) {\n      DirectoryReader ir = DirectoryReader.open(dir);\n      assertEquals(IndexWriter.MAX_DOCS, ir.maxDoc());\n      assertEquals(IndexWriter.MAX_DOCS, ir.numDocs());\n      IndexSearcher searcher = new IndexSearcher(ir);\n      TopDocs hits = searcher.search(new TermQuery(new Term(\"field\", \"text\")), 10);\n      assertEquals(IndexWriter.MAX_DOCS, hits.totalHits);\n\n      // Sort by docID reversed:\n      hits = searcher.search(new TermQuery(new Term(\"field\", \"text\")), 10, new Sort(new SortField(null, SortField.Type.DOC, true)));\n      assertEquals(IndexWriter.MAX_DOCS, hits.totalHits);\n      assertEquals(10, hits.scoreDocs.length);\n      assertEquals(IndexWriter.MAX_DOCS-1, hits.scoreDocs[0].doc);\n      ir.close();\n\n      iw.forceMerge(1);\n    }\n\n    iw.close();\n    dir.close();\n  }\n\n","sourceOld":"  // The two hour time was achieved on a Linux 3.13 system with these specs:\n  // 3-core AMD at 2.5Ghz, 12 GB RAM, 5GB test heap, 2 test JVMs, 2TB SATA.\n  @Monster(\"takes over two hours\")\n  public void testExactlyAtTrueLimit() throws Exception {\n    Directory dir = newFSDirectory(createTempDir(\"2BDocs3\"));\n    IndexWriter iw = new IndexWriter(dir, new IndexWriterConfig(null));\n    Document doc = new Document();\n    doc.add(newStringField(\"field\", \"text\", Field.Store.NO));\n    for (int i = 0; i < IndexWriter.MAX_DOCS; i++) {\n      iw.addDocument(doc);\n      /*\n      if (i%1000000 == 0) {\n        System.out.println((i/1000000) + \" M docs...\");\n      }\n      */\n    }\n    iw.commit();\n\n    // First unoptimized, then optimized:\n    for(int i=0;i<2;i++) {\n      DirectoryReader ir = DirectoryReader.open(dir);\n      assertEquals(IndexWriter.MAX_DOCS, ir.maxDoc());\n      assertEquals(IndexWriter.MAX_DOCS, ir.numDocs());\n      IndexSearcher searcher = new IndexSearcher(ir);\n      TopDocs hits = searcher.search(new TermQuery(new Term(\"field\", \"text\")), 10);\n      assertEquals(IndexWriter.MAX_DOCS, hits.totalHits);\n\n      // Sort by docID reversed:\n      hits = searcher.search(new TermQuery(new Term(\"field\", \"text\")), null, 10, new Sort(new SortField(null, SortField.Type.DOC, true)));\n      assertEquals(IndexWriter.MAX_DOCS, hits.totalHits);\n      assertEquals(10, hits.scoreDocs.length);\n      assertEquals(IndexWriter.MAX_DOCS-1, hits.scoreDocs[0].doc);\n      ir.close();\n\n      iw.forceMerge(1);\n    }\n\n    iw.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"83788ad129a5154d5c6562c4e8ce3db48793aada","date":1532961485,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterMaxDocs#testExactlyAtTrueLimit().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterMaxDocs#testExactlyAtTrueLimit().mjava","sourceNew":"  // The two hour time was achieved on a Linux 3.13 system with these specs:\n  // 3-core AMD at 2.5Ghz, 12 GB RAM, 5GB test heap, 2 test JVMs, 2TB SATA.\n  @Monster(\"takes over two hours\")\n  public void testExactlyAtTrueLimit() throws Exception {\n    Directory dir = newFSDirectory(createTempDir(\"2BDocs3\"));\n    IndexWriter iw = new IndexWriter(dir, new IndexWriterConfig(null));\n    Document doc = new Document();\n    doc.add(newStringField(\"field\", \"text\", Field.Store.NO));\n    for (int i = 0; i < IndexWriter.MAX_DOCS; i++) {\n      iw.addDocument(doc);\n      /*\n      if (i%1000000 == 0) {\n        System.out.println((i/1000000) + \" M docs...\");\n      }\n      */\n    }\n    iw.commit();\n\n    // First unoptimized, then optimized:\n    for(int i=0;i<2;i++) {\n      DirectoryReader ir = DirectoryReader.open(dir);\n      assertEquals(IndexWriter.MAX_DOCS, ir.maxDoc());\n      assertEquals(IndexWriter.MAX_DOCS, ir.numDocs());\n      IndexSearcher searcher = new IndexSearcher(ir);\n      TopDocs hits = searcher.search(new TermQuery(new Term(\"field\", \"text\")), 10);\n      assertEquals(IndexWriter.MAX_DOCS, hits.totalHits.value);\n\n      // Sort by docID reversed:\n      hits = searcher.search(new TermQuery(new Term(\"field\", \"text\")), 10, new Sort(new SortField(null, SortField.Type.DOC, true)));\n      assertEquals(IndexWriter.MAX_DOCS, hits.totalHits.value);\n      assertEquals(10, hits.scoreDocs.length);\n      assertEquals(IndexWriter.MAX_DOCS-1, hits.scoreDocs[0].doc);\n      ir.close();\n\n      iw.forceMerge(1);\n    }\n\n    iw.close();\n    dir.close();\n  }\n\n","sourceOld":"  // The two hour time was achieved on a Linux 3.13 system with these specs:\n  // 3-core AMD at 2.5Ghz, 12 GB RAM, 5GB test heap, 2 test JVMs, 2TB SATA.\n  @Monster(\"takes over two hours\")\n  public void testExactlyAtTrueLimit() throws Exception {\n    Directory dir = newFSDirectory(createTempDir(\"2BDocs3\"));\n    IndexWriter iw = new IndexWriter(dir, new IndexWriterConfig(null));\n    Document doc = new Document();\n    doc.add(newStringField(\"field\", \"text\", Field.Store.NO));\n    for (int i = 0; i < IndexWriter.MAX_DOCS; i++) {\n      iw.addDocument(doc);\n      /*\n      if (i%1000000 == 0) {\n        System.out.println((i/1000000) + \" M docs...\");\n      }\n      */\n    }\n    iw.commit();\n\n    // First unoptimized, then optimized:\n    for(int i=0;i<2;i++) {\n      DirectoryReader ir = DirectoryReader.open(dir);\n      assertEquals(IndexWriter.MAX_DOCS, ir.maxDoc());\n      assertEquals(IndexWriter.MAX_DOCS, ir.numDocs());\n      IndexSearcher searcher = new IndexSearcher(ir);\n      TopDocs hits = searcher.search(new TermQuery(new Term(\"field\", \"text\")), 10);\n      assertEquals(IndexWriter.MAX_DOCS, hits.totalHits);\n\n      // Sort by docID reversed:\n      hits = searcher.search(new TermQuery(new Term(\"field\", \"text\")), 10, new Sort(new SortField(null, SortField.Type.DOC, true)));\n      assertEquals(IndexWriter.MAX_DOCS, hits.totalHits);\n      assertEquals(10, hits.scoreDocs.length);\n      assertEquals(IndexWriter.MAX_DOCS-1, hits.scoreDocs[0].doc);\n      ir.close();\n\n      iw.forceMerge(1);\n    }\n\n    iw.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fd3746413dc46d6779710924524e4b59425b0bd0","date":1538722774,"type":3,"author":"iverase","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterMaxDocs#testExactlyAtTrueLimit().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterMaxDocs#testExactlyAtTrueLimit().mjava","sourceNew":"  // The two hour time was achieved on a Linux 3.13 system with these specs:\n  // 3-core AMD at 2.5Ghz, 12 GB RAM, 5GB test heap, 2 test JVMs, 2TB SATA.\n  @Monster(\"takes over two hours\")\n  public void testExactlyAtTrueLimit() throws Exception {\n    Directory dir = newFSDirectory(createTempDir(\"2BDocs3\"));\n    IndexWriter iw = new IndexWriter(dir, new IndexWriterConfig(null));\n    Document doc = new Document();\n    doc.add(newStringField(\"field\", \"text\", Field.Store.NO));\n    for (int i = 0; i < IndexWriter.MAX_DOCS; i++) {\n      iw.addDocument(doc);\n      /*\n      if (i%1000000 == 0) {\n        System.out.println((i/1000000) + \" M docs...\");\n      }\n      */\n    }\n    iw.commit();\n\n    // First unoptimized, then optimized:\n    for(int i=0;i<2;i++) {\n      DirectoryReader ir = DirectoryReader.open(dir);\n      assertEquals(IndexWriter.MAX_DOCS, ir.maxDoc());\n      assertEquals(IndexWriter.MAX_DOCS, ir.numDocs());\n      IndexSearcher searcher = new IndexSearcher(ir);\n      TopScoreDocCollector collector = TopScoreDocCollector.create(10, Integer.MAX_VALUE);\n      searcher.search(new TermQuery(new Term(\"field\", \"text\")), collector);\n      TopDocs hits = collector.topDocs();\n      assertEquals(IndexWriter.MAX_DOCS, hits.totalHits.value);\n\n      // Sort by docID reversed:\n      hits = searcher.search(new TermQuery(new Term(\"field\", \"text\")), 10, new Sort(new SortField(null, SortField.Type.DOC, true)));\n      assertEquals(IndexWriter.MAX_DOCS, hits.totalHits.value);\n      assertEquals(10, hits.scoreDocs.length);\n      assertEquals(IndexWriter.MAX_DOCS-1, hits.scoreDocs[0].doc);\n      ir.close();\n\n      iw.forceMerge(1);\n    }\n\n    iw.close();\n    dir.close();\n  }\n\n","sourceOld":"  // The two hour time was achieved on a Linux 3.13 system with these specs:\n  // 3-core AMD at 2.5Ghz, 12 GB RAM, 5GB test heap, 2 test JVMs, 2TB SATA.\n  @Monster(\"takes over two hours\")\n  public void testExactlyAtTrueLimit() throws Exception {\n    Directory dir = newFSDirectory(createTempDir(\"2BDocs3\"));\n    IndexWriter iw = new IndexWriter(dir, new IndexWriterConfig(null));\n    Document doc = new Document();\n    doc.add(newStringField(\"field\", \"text\", Field.Store.NO));\n    for (int i = 0; i < IndexWriter.MAX_DOCS; i++) {\n      iw.addDocument(doc);\n      /*\n      if (i%1000000 == 0) {\n        System.out.println((i/1000000) + \" M docs...\");\n      }\n      */\n    }\n    iw.commit();\n\n    // First unoptimized, then optimized:\n    for(int i=0;i<2;i++) {\n      DirectoryReader ir = DirectoryReader.open(dir);\n      assertEquals(IndexWriter.MAX_DOCS, ir.maxDoc());\n      assertEquals(IndexWriter.MAX_DOCS, ir.numDocs());\n      IndexSearcher searcher = new IndexSearcher(ir);\n      TopDocs hits = searcher.search(new TermQuery(new Term(\"field\", \"text\")), 10);\n      assertEquals(IndexWriter.MAX_DOCS, hits.totalHits.value);\n\n      // Sort by docID reversed:\n      hits = searcher.search(new TermQuery(new Term(\"field\", \"text\")), 10, new Sort(new SortField(null, SortField.Type.DOC, true)));\n      assertEquals(IndexWriter.MAX_DOCS, hits.totalHits.value);\n      assertEquals(10, hits.scoreDocs.length);\n      assertEquals(IndexWriter.MAX_DOCS-1, hits.scoreDocs[0].doc);\n      ir.close();\n\n      iw.forceMerge(1);\n    }\n\n    iw.close();\n    dir.close();\n  }\n\n","bugFix":["d6b7c6630218ed9693cdb8643276513f9f0043f4"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fd3746413dc46d6779710924524e4b59425b0bd0":["83788ad129a5154d5c6562c4e8ce3db48793aada"],"55980207f1977bd1463465de1659b821347e2fa8":["d0ef034a4f10871667ae75181537775ddcf8ade4","656cfb06eff2244ff5a25ffb3ed3a79942ece85c"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["656cfb06eff2244ff5a25ffb3ed3a79942ece85c"],"656cfb06eff2244ff5a25ffb3ed3a79942ece85c":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["d6b7c6630218ed9693cdb8643276513f9f0043f4"],"d6b7c6630218ed9693cdb8643276513f9f0043f4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fd3746413dc46d6779710924524e4b59425b0bd0"]},"commit2Childs":{"fd3746413dc46d6779710924524e4b59425b0bd0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"55980207f1977bd1463465de1659b821347e2fa8":[],"656cfb06eff2244ff5a25ffb3ed3a79942ece85c":["55980207f1977bd1463465de1659b821347e2fa8","f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["83788ad129a5154d5c6562c4e8ce3db48793aada"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d6b7c6630218ed9693cdb8643276513f9f0043f4"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["55980207f1977bd1463465de1659b821347e2fa8","656cfb06eff2244ff5a25ffb3ed3a79942ece85c"],"d6b7c6630218ed9693cdb8643276513f9f0043f4":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["fd3746413dc46d6779710924524e4b59425b0bd0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["55980207f1977bd1463465de1659b821347e2fa8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}