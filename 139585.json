{"path":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestQueryParser#testWildCardEscapes().mjava","commits":[{"id":"ea4107f60b9f95623c16025c9c247412ff809092","date":1468333987,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestQueryParser#testWildCardEscapes().mjava","pathOld":"/dev/null","sourceNew":"  public void testWildCardEscapes() throws ParseException, IOException {\n    Analyzer a = new ASCIIAnalyzer();\n    QueryParser parser = new QueryParser(FIELD, a);\n    assertTrue(isAHit(parser.parse(\"mö*tley\"), \"moatley\", a));\n    // need to have at least one genuine wildcard to trigger the wildcard analysis\n    // hence the * before the y\n    assertTrue(isAHit(parser.parse(\"mö\\\\*tl*y\"), \"mo*tley\", a));\n    // escaped backslash then true wildcard\n    assertTrue(isAHit(parser.parse(\"mö\\\\\\\\*tley\"), \"mo\\\\atley\", a));\n    // escaped wildcard then true wildcard\n    assertTrue(isAHit(parser.parse(\"mö\\\\??ley\"), \"mo?tley\", a));\n\n    // the first is an escaped * which should yield a miss\n    assertFalse(isAHit(parser.parse(\"mö\\\\*tl*y\"), \"moatley\", a));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestQueryParser#testWildCardEscapes().mjava","pathOld":"/dev/null","sourceNew":"  public void testWildCardEscapes() throws ParseException, IOException {\n    Analyzer a = new ASCIIAnalyzer();\n    QueryParser parser = new QueryParser(FIELD, a);\n    assertTrue(isAHit(parser.parse(\"mö*tley\"), \"moatley\", a));\n    // need to have at least one genuine wildcard to trigger the wildcard analysis\n    // hence the * before the y\n    assertTrue(isAHit(parser.parse(\"mö\\\\*tl*y\"), \"mo*tley\", a));\n    // escaped backslash then true wildcard\n    assertTrue(isAHit(parser.parse(\"mö\\\\\\\\*tley\"), \"mo\\\\atley\", a));\n    // escaped wildcard then true wildcard\n    assertTrue(isAHit(parser.parse(\"mö\\\\??ley\"), \"mo?tley\", a));\n\n    // the first is an escaped * which should yield a miss\n    assertFalse(isAHit(parser.parse(\"mö\\\\*tl*y\"), \"moatley\", a));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ea4107f60b9f95623c16025c9c247412ff809092":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ea4107f60b9f95623c16025c9c247412ff809092"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ea4107f60b9f95623c16025c9c247412ff809092"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ea4107f60b9f95623c16025c9c247412ff809092","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"ea4107f60b9f95623c16025c9c247412ff809092":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}