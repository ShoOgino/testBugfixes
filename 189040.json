{"path":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#processGetInputDocument(ResponseBuilder).mjava","commits":[{"id":"415bbbe7da8065dd3c477bdc3c703c6425622998","date":1485393793,"type":0,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#processGetInputDocument(ResponseBuilder).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Return the requested SolrInputDocument from the tlog/index. This will\n   * always be a full document, i.e. any partial in-place document will be resolved.\n   */\n  void processGetInputDocument(ResponseBuilder rb) throws IOException {\n    SolrQueryRequest req = rb.req;\n    SolrQueryResponse rsp = rb.rsp;\n    SolrParams params = req.getParams();\n\n    if (!params.getBool(COMPONENT_NAME, true)) {\n      return;\n    }\n\n    String idStr = params.get(\"getInputDocument\", null);\n    if (idStr == null) return;\n    AtomicLong version = new AtomicLong();\n    SolrInputDocument doc = getInputDocument(req.getCore(), new BytesRef(idStr), version, false, null, true);\n    log.info(\"getInputDocument called for id=\"+idStr+\", returning: \"+doc);\n    rb.rsp.add(\"inputDocument\", doc);\n    rb.rsp.add(\"version\", version.get());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"598b5d23aa7c9732bf473c21a9cd309c44599394","date":1485530378,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#processGetInputDocument(ResponseBuilder).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Return the requested SolrInputDocument from the tlog/index. This will\n   * always be a full document, i.e. any partial in-place document will be resolved.\n   */\n  void processGetInputDocument(ResponseBuilder rb) throws IOException {\n    SolrQueryRequest req = rb.req;\n    SolrQueryResponse rsp = rb.rsp;\n    SolrParams params = req.getParams();\n\n    if (!params.getBool(COMPONENT_NAME, true)) {\n      return;\n    }\n\n    String idStr = params.get(\"getInputDocument\", null);\n    if (idStr == null) return;\n    AtomicLong version = new AtomicLong();\n    SolrInputDocument doc = getInputDocument(req.getCore(), new BytesRef(idStr), version, false, null, true);\n    log.info(\"getInputDocument called for id=\"+idStr+\", returning: \"+doc);\n    rb.rsp.add(\"inputDocument\", doc);\n    rb.rsp.add(\"version\", version.get());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"07749612bed4eb54dd05255c1434c301133310c1","date":1554879779,"type":3,"author":"Moshe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#processGetInputDocument(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#processGetInputDocument(ResponseBuilder).mjava","sourceNew":"  /**\n   * Return the requested SolrInputDocument from the tlog/index. This will\n   * always be a full document, i.e. any partial in-place document will be resolved.\n   */\n  void processGetInputDocument(ResponseBuilder rb) throws IOException {\n    SolrQueryRequest req = rb.req;\n    SolrQueryResponse rsp = rb.rsp;\n    SolrParams params = req.getParams();\n\n    if (!params.getBool(COMPONENT_NAME, true)) {\n      return;\n    }\n\n    String idStr = params.get(\"getInputDocument\", null);\n    if (idStr == null) return;\n    AtomicLong version = new AtomicLong();\n    SolrInputDocument doc = getInputDocument(req.getCore(), new BytesRef(idStr), version, null, Resolution.DOC);\n    log.info(\"getInputDocument called for id=\"+idStr+\", returning: \"+doc);\n    rb.rsp.add(\"inputDocument\", doc);\n    rb.rsp.add(\"version\", version.get());\n  }\n\n","sourceOld":"  /**\n   * Return the requested SolrInputDocument from the tlog/index. This will\n   * always be a full document, i.e. any partial in-place document will be resolved.\n   */\n  void processGetInputDocument(ResponseBuilder rb) throws IOException {\n    SolrQueryRequest req = rb.req;\n    SolrQueryResponse rsp = rb.rsp;\n    SolrParams params = req.getParams();\n\n    if (!params.getBool(COMPONENT_NAME, true)) {\n      return;\n    }\n\n    String idStr = params.get(\"getInputDocument\", null);\n    if (idStr == null) return;\n    AtomicLong version = new AtomicLong();\n    SolrInputDocument doc = getInputDocument(req.getCore(), new BytesRef(idStr), version, false, null, true);\n    log.info(\"getInputDocument called for id=\"+idStr+\", returning: \"+doc);\n    rb.rsp.add(\"inputDocument\", doc);\n    rb.rsp.add(\"version\", version.get());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"575e66bd4b2349209027f6801184da7fc3cba13f","date":1587609169,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#processGetInputDocument(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#processGetInputDocument(ResponseBuilder).mjava","sourceNew":"  /**\n   * Return the requested SolrInputDocument from the tlog/index. This will\n   * always be a full document, i.e. any partial in-place document will be resolved.\n   */\n  void processGetInputDocument(ResponseBuilder rb) throws IOException {\n    SolrQueryRequest req = rb.req;\n    SolrQueryResponse rsp = rb.rsp;\n    SolrParams params = req.getParams();\n\n    if (!params.getBool(COMPONENT_NAME, true)) {\n      return;\n    }\n\n    String idStr = params.get(\"getInputDocument\", null);\n    if (idStr == null) return;\n    AtomicLong version = new AtomicLong();\n    SolrInputDocument doc = getInputDocument(req.getCore(), new BytesRef(idStr), version, null, Resolution.DOC);\n    log.info(\"getInputDocument called for id={}, returning {}\", idStr, doc);\n    rb.rsp.add(\"inputDocument\", doc);\n    rb.rsp.add(\"version\", version.get());\n  }\n\n","sourceOld":"  /**\n   * Return the requested SolrInputDocument from the tlog/index. This will\n   * always be a full document, i.e. any partial in-place document will be resolved.\n   */\n  void processGetInputDocument(ResponseBuilder rb) throws IOException {\n    SolrQueryRequest req = rb.req;\n    SolrQueryResponse rsp = rb.rsp;\n    SolrParams params = req.getParams();\n\n    if (!params.getBool(COMPONENT_NAME, true)) {\n      return;\n    }\n\n    String idStr = params.get(\"getInputDocument\", null);\n    if (idStr == null) return;\n    AtomicLong version = new AtomicLong();\n    SolrInputDocument doc = getInputDocument(req.getCore(), new BytesRef(idStr), version, null, Resolution.DOC);\n    log.info(\"getInputDocument called for id=\"+idStr+\", returning: \"+doc);\n    rb.rsp.add(\"inputDocument\", doc);\n    rb.rsp.add(\"version\", version.get());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"415bbbe7da8065dd3c477bdc3c703c6425622998":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"598b5d23aa7c9732bf473c21a9cd309c44599394":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","415bbbe7da8065dd3c477bdc3c703c6425622998"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"575e66bd4b2349209027f6801184da7fc3cba13f":["07749612bed4eb54dd05255c1434c301133310c1"],"07749612bed4eb54dd05255c1434c301133310c1":["415bbbe7da8065dd3c477bdc3c703c6425622998"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["575e66bd4b2349209027f6801184da7fc3cba13f"]},"commit2Childs":{"415bbbe7da8065dd3c477bdc3c703c6425622998":["598b5d23aa7c9732bf473c21a9cd309c44599394","07749612bed4eb54dd05255c1434c301133310c1"],"598b5d23aa7c9732bf473c21a9cd309c44599394":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["415bbbe7da8065dd3c477bdc3c703c6425622998","598b5d23aa7c9732bf473c21a9cd309c44599394"],"575e66bd4b2349209027f6801184da7fc3cba13f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"07749612bed4eb54dd05255c1434c301133310c1":["575e66bd4b2349209027f6801184da7fc3cba13f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["598b5d23aa7c9732bf473c21a9cd309c44599394","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}