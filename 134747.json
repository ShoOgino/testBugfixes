{"path":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestAnalyzers#testSimple().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestAnalyzers#testSimple().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/core/TestAnalyzers#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n    Analyzer a = new SimpleAnalyzer(TEST_VERSION_CURRENT);\n    assertAnalyzesTo(a, \"foo bar FOO BAR\", \n                     new String[] { \"foo\", \"bar\", \"foo\", \"bar\" });\n    assertAnalyzesTo(a, \"foo      bar .  FOO <> BAR\", \n                     new String[] { \"foo\", \"bar\", \"foo\", \"bar\" });\n    assertAnalyzesTo(a, \"foo.bar.FOO.BAR\", \n                     new String[] { \"foo\", \"bar\", \"foo\", \"bar\" });\n    assertAnalyzesTo(a, \"U.S.A.\", \n                     new String[] { \"u\", \"s\", \"a\" });\n    assertAnalyzesTo(a, \"C++\", \n                     new String[] { \"c\" });\n    assertAnalyzesTo(a, \"B2B\", \n                     new String[] { \"b\", \"b\" });\n    assertAnalyzesTo(a, \"2B\", \n                     new String[] { \"b\" });\n    assertAnalyzesTo(a, \"\\\"QUOTED\\\" word\", \n                     new String[] { \"quoted\", \"word\" });\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n    Analyzer a = new SimpleAnalyzer(TEST_VERSION_CURRENT);\n    assertAnalyzesTo(a, \"foo bar FOO BAR\", \n                     new String[] { \"foo\", \"bar\", \"foo\", \"bar\" });\n    assertAnalyzesTo(a, \"foo      bar .  FOO <> BAR\", \n                     new String[] { \"foo\", \"bar\", \"foo\", \"bar\" });\n    assertAnalyzesTo(a, \"foo.bar.FOO.BAR\", \n                     new String[] { \"foo\", \"bar\", \"foo\", \"bar\" });\n    assertAnalyzesTo(a, \"U.S.A.\", \n                     new String[] { \"u\", \"s\", \"a\" });\n    assertAnalyzesTo(a, \"C++\", \n                     new String[] { \"c\" });\n    assertAnalyzesTo(a, \"B2B\", \n                     new String[] { \"b\", \"b\" });\n    assertAnalyzesTo(a, \"2B\", \n                     new String[] { \"b\" });\n    assertAnalyzesTo(a, \"\\\"QUOTED\\\" word\", \n                     new String[] { \"quoted\", \"word\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff4227bb146f97aabae888091c19e48c88dbb0db","date":1406758576,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestAnalyzers#testSimple().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestAnalyzers#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n    Analyzer a = new SimpleAnalyzer();\n    assertAnalyzesTo(a, \"foo bar FOO BAR\", \n                     new String[] { \"foo\", \"bar\", \"foo\", \"bar\" });\n    assertAnalyzesTo(a, \"foo      bar .  FOO <> BAR\", \n                     new String[] { \"foo\", \"bar\", \"foo\", \"bar\" });\n    assertAnalyzesTo(a, \"foo.bar.FOO.BAR\", \n                     new String[] { \"foo\", \"bar\", \"foo\", \"bar\" });\n    assertAnalyzesTo(a, \"U.S.A.\", \n                     new String[] { \"u\", \"s\", \"a\" });\n    assertAnalyzesTo(a, \"C++\", \n                     new String[] { \"c\" });\n    assertAnalyzesTo(a, \"B2B\", \n                     new String[] { \"b\", \"b\" });\n    assertAnalyzesTo(a, \"2B\", \n                     new String[] { \"b\" });\n    assertAnalyzesTo(a, \"\\\"QUOTED\\\" word\", \n                     new String[] { \"quoted\", \"word\" });\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n    Analyzer a = new SimpleAnalyzer(TEST_VERSION_CURRENT);\n    assertAnalyzesTo(a, \"foo bar FOO BAR\", \n                     new String[] { \"foo\", \"bar\", \"foo\", \"bar\" });\n    assertAnalyzesTo(a, \"foo      bar .  FOO <> BAR\", \n                     new String[] { \"foo\", \"bar\", \"foo\", \"bar\" });\n    assertAnalyzesTo(a, \"foo.bar.FOO.BAR\", \n                     new String[] { \"foo\", \"bar\", \"foo\", \"bar\" });\n    assertAnalyzesTo(a, \"U.S.A.\", \n                     new String[] { \"u\", \"s\", \"a\" });\n    assertAnalyzesTo(a, \"C++\", \n                     new String[] { \"c\" });\n    assertAnalyzesTo(a, \"B2B\", \n                     new String[] { \"b\", \"b\" });\n    assertAnalyzesTo(a, \"2B\", \n                     new String[] { \"b\" });\n    assertAnalyzesTo(a, \"\\\"QUOTED\\\" word\", \n                     new String[] { \"quoted\", \"word\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cdab62f058ea765dd33deb05b4f19b7d626c801","date":1406803479,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestAnalyzers#testSimple().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestAnalyzers#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n    Analyzer a = new SimpleAnalyzer(TEST_VERSION_CURRENT);\n    assertAnalyzesTo(a, \"foo bar FOO BAR\", \n                     new String[] { \"foo\", \"bar\", \"foo\", \"bar\" });\n    assertAnalyzesTo(a, \"foo      bar .  FOO <> BAR\", \n                     new String[] { \"foo\", \"bar\", \"foo\", \"bar\" });\n    assertAnalyzesTo(a, \"foo.bar.FOO.BAR\", \n                     new String[] { \"foo\", \"bar\", \"foo\", \"bar\" });\n    assertAnalyzesTo(a, \"U.S.A.\", \n                     new String[] { \"u\", \"s\", \"a\" });\n    assertAnalyzesTo(a, \"C++\", \n                     new String[] { \"c\" });\n    assertAnalyzesTo(a, \"B2B\", \n                     new String[] { \"b\", \"b\" });\n    assertAnalyzesTo(a, \"2B\", \n                     new String[] { \"b\" });\n    assertAnalyzesTo(a, \"\\\"QUOTED\\\" word\", \n                     new String[] { \"quoted\", \"word\" });\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n    Analyzer a = new SimpleAnalyzer();\n    assertAnalyzesTo(a, \"foo bar FOO BAR\", \n                     new String[] { \"foo\", \"bar\", \"foo\", \"bar\" });\n    assertAnalyzesTo(a, \"foo      bar .  FOO <> BAR\", \n                     new String[] { \"foo\", \"bar\", \"foo\", \"bar\" });\n    assertAnalyzesTo(a, \"foo.bar.FOO.BAR\", \n                     new String[] { \"foo\", \"bar\", \"foo\", \"bar\" });\n    assertAnalyzesTo(a, \"U.S.A.\", \n                     new String[] { \"u\", \"s\", \"a\" });\n    assertAnalyzesTo(a, \"C++\", \n                     new String[] { \"c\" });\n    assertAnalyzesTo(a, \"B2B\", \n                     new String[] { \"b\", \"b\" });\n    assertAnalyzesTo(a, \"2B\", \n                     new String[] { \"b\" });\n    assertAnalyzesTo(a, \"\\\"QUOTED\\\" word\", \n                     new String[] { \"quoted\", \"word\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"379db3ad24c4f0214f30a122265a6d6be003a99d","date":1407537768,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestAnalyzers#testSimple().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestAnalyzers#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n    Analyzer a = new SimpleAnalyzer();\n    assertAnalyzesTo(a, \"foo bar FOO BAR\", \n                     new String[] { \"foo\", \"bar\", \"foo\", \"bar\" });\n    assertAnalyzesTo(a, \"foo      bar .  FOO <> BAR\", \n                     new String[] { \"foo\", \"bar\", \"foo\", \"bar\" });\n    assertAnalyzesTo(a, \"foo.bar.FOO.BAR\", \n                     new String[] { \"foo\", \"bar\", \"foo\", \"bar\" });\n    assertAnalyzesTo(a, \"U.S.A.\", \n                     new String[] { \"u\", \"s\", \"a\" });\n    assertAnalyzesTo(a, \"C++\", \n                     new String[] { \"c\" });\n    assertAnalyzesTo(a, \"B2B\", \n                     new String[] { \"b\", \"b\" });\n    assertAnalyzesTo(a, \"2B\", \n                     new String[] { \"b\" });\n    assertAnalyzesTo(a, \"\\\"QUOTED\\\" word\", \n                     new String[] { \"quoted\", \"word\" });\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n    Analyzer a = new SimpleAnalyzer(TEST_VERSION_CURRENT);\n    assertAnalyzesTo(a, \"foo bar FOO BAR\", \n                     new String[] { \"foo\", \"bar\", \"foo\", \"bar\" });\n    assertAnalyzesTo(a, \"foo      bar .  FOO <> BAR\", \n                     new String[] { \"foo\", \"bar\", \"foo\", \"bar\" });\n    assertAnalyzesTo(a, \"foo.bar.FOO.BAR\", \n                     new String[] { \"foo\", \"bar\", \"foo\", \"bar\" });\n    assertAnalyzesTo(a, \"U.S.A.\", \n                     new String[] { \"u\", \"s\", \"a\" });\n    assertAnalyzesTo(a, \"C++\", \n                     new String[] { \"c\" });\n    assertAnalyzesTo(a, \"B2B\", \n                     new String[] { \"b\", \"b\" });\n    assertAnalyzesTo(a, \"2B\", \n                     new String[] { \"b\" });\n    assertAnalyzesTo(a, \"\\\"QUOTED\\\" word\", \n                     new String[] { \"quoted\", \"word\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a56958d7f71a28824f20031ffbb2e13502a0274e","date":1425573902,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestAnalyzers#testSimple().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestAnalyzers#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n    Analyzer a = new SimpleAnalyzer();\n    assertAnalyzesTo(a, \"foo bar FOO BAR\", \n                     new String[] { \"foo\", \"bar\", \"foo\", \"bar\" });\n    assertAnalyzesTo(a, \"foo      bar .  FOO <> BAR\", \n                     new String[] { \"foo\", \"bar\", \"foo\", \"bar\" });\n    assertAnalyzesTo(a, \"foo.bar.FOO.BAR\", \n                     new String[] { \"foo\", \"bar\", \"foo\", \"bar\" });\n    assertAnalyzesTo(a, \"U.S.A.\", \n                     new String[] { \"u\", \"s\", \"a\" });\n    assertAnalyzesTo(a, \"C++\", \n                     new String[] { \"c\" });\n    assertAnalyzesTo(a, \"B2B\", \n                     new String[] { \"b\", \"b\" });\n    assertAnalyzesTo(a, \"2B\", \n                     new String[] { \"b\" });\n    assertAnalyzesTo(a, \"\\\"QUOTED\\\" word\", \n                     new String[] { \"quoted\", \"word\" });\n    a.close();\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n    Analyzer a = new SimpleAnalyzer();\n    assertAnalyzesTo(a, \"foo bar FOO BAR\", \n                     new String[] { \"foo\", \"bar\", \"foo\", \"bar\" });\n    assertAnalyzesTo(a, \"foo      bar .  FOO <> BAR\", \n                     new String[] { \"foo\", \"bar\", \"foo\", \"bar\" });\n    assertAnalyzesTo(a, \"foo.bar.FOO.BAR\", \n                     new String[] { \"foo\", \"bar\", \"foo\", \"bar\" });\n    assertAnalyzesTo(a, \"U.S.A.\", \n                     new String[] { \"u\", \"s\", \"a\" });\n    assertAnalyzesTo(a, \"C++\", \n                     new String[] { \"c\" });\n    assertAnalyzesTo(a, \"B2B\", \n                     new String[] { \"b\", \"b\" });\n    assertAnalyzesTo(a, \"2B\", \n                     new String[] { \"b\" });\n    assertAnalyzesTo(a, \"\\\"QUOTED\\\" word\", \n                     new String[] { \"quoted\", \"word\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestAnalyzers#testSimple().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestAnalyzers#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n    Analyzer a = new SimpleAnalyzer();\n    assertAnalyzesTo(a, \"foo bar FOO BAR\", \n                     new String[] { \"foo\", \"bar\", \"foo\", \"bar\" });\n    assertAnalyzesTo(a, \"foo      bar .  FOO <> BAR\", \n                     new String[] { \"foo\", \"bar\", \"foo\", \"bar\" });\n    assertAnalyzesTo(a, \"foo.bar.FOO.BAR\", \n                     new String[] { \"foo\", \"bar\", \"foo\", \"bar\" });\n    assertAnalyzesTo(a, \"U.S.A.\", \n                     new String[] { \"u\", \"s\", \"a\" });\n    assertAnalyzesTo(a, \"C++\", \n                     new String[] { \"c\" });\n    assertAnalyzesTo(a, \"B2B\", \n                     new String[] { \"b\", \"b\" });\n    assertAnalyzesTo(a, \"2B\", \n                     new String[] { \"b\" });\n    assertAnalyzesTo(a, \"\\\"QUOTED\\\" word\", \n                     new String[] { \"quoted\", \"word\" });\n    a.close();\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n    Analyzer a = new SimpleAnalyzer();\n    assertAnalyzesTo(a, \"foo bar FOO BAR\", \n                     new String[] { \"foo\", \"bar\", \"foo\", \"bar\" });\n    assertAnalyzesTo(a, \"foo      bar .  FOO <> BAR\", \n                     new String[] { \"foo\", \"bar\", \"foo\", \"bar\" });\n    assertAnalyzesTo(a, \"foo.bar.FOO.BAR\", \n                     new String[] { \"foo\", \"bar\", \"foo\", \"bar\" });\n    assertAnalyzesTo(a, \"U.S.A.\", \n                     new String[] { \"u\", \"s\", \"a\" });\n    assertAnalyzesTo(a, \"C++\", \n                     new String[] { \"c\" });\n    assertAnalyzesTo(a, \"B2B\", \n                     new String[] { \"b\", \"b\" });\n    assertAnalyzesTo(a, \"2B\", \n                     new String[] { \"b\" });\n    assertAnalyzesTo(a, \"\\\"QUOTED\\\" word\", \n                     new String[] { \"quoted\", \"word\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ea4107f60b9f95623c16025c9c247412ff809092","date":1468333987,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestAnalyzers#testSimple().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestAnalyzers#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n    Analyzer a = new SimpleAnalyzer();\n    assertAnalyzesTo(a, \"foo bar FOO BAR\", \n                     new String[] { \"foo\", \"bar\", \"foo\", \"bar\" });\n    assertAnalyzesTo(a, \"foo      bar .  FOO <> BAR\", \n                     new String[] { \"foo\", \"bar\", \"foo\", \"bar\" });\n    assertAnalyzesTo(a, \"foo.bar.FOO.BAR\", \n                     new String[] { \"foo\", \"bar\", \"foo\", \"bar\" });\n    assertAnalyzesTo(a, \"U.S.A.\", \n                     new String[] { \"u\", \"s\", \"a\" });\n    assertAnalyzesTo(a, \"C++\", \n                     new String[] { \"c\" });\n    assertAnalyzesTo(a, \"B2B\", \n                     new String[] { \"b\", \"b\" });\n    assertAnalyzesTo(a, \"2B\", \n                     new String[] { \"b\" });\n    assertAnalyzesTo(a, \"\\\"QUOTED\\\" word\", \n                     new String[] { \"quoted\", \"word\" });\n    assertEquals(new BytesRef(\"\\\"\\\\à3[]()! cz@\"), a.normalize(\"dummy\", \"\\\"\\\\À3[]()! Cz@\"));\n    a.close();\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n    Analyzer a = new SimpleAnalyzer();\n    assertAnalyzesTo(a, \"foo bar FOO BAR\", \n                     new String[] { \"foo\", \"bar\", \"foo\", \"bar\" });\n    assertAnalyzesTo(a, \"foo      bar .  FOO <> BAR\", \n                     new String[] { \"foo\", \"bar\", \"foo\", \"bar\" });\n    assertAnalyzesTo(a, \"foo.bar.FOO.BAR\", \n                     new String[] { \"foo\", \"bar\", \"foo\", \"bar\" });\n    assertAnalyzesTo(a, \"U.S.A.\", \n                     new String[] { \"u\", \"s\", \"a\" });\n    assertAnalyzesTo(a, \"C++\", \n                     new String[] { \"c\" });\n    assertAnalyzesTo(a, \"B2B\", \n                     new String[] { \"b\", \"b\" });\n    assertAnalyzesTo(a, \"2B\", \n                     new String[] { \"b\" });\n    assertAnalyzesTo(a, \"\\\"QUOTED\\\" word\", \n                     new String[] { \"quoted\", \"word\" });\n    a.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestAnalyzers#testSimple().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestAnalyzers#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n    Analyzer a = new SimpleAnalyzer();\n    assertAnalyzesTo(a, \"foo bar FOO BAR\", \n                     new String[] { \"foo\", \"bar\", \"foo\", \"bar\" });\n    assertAnalyzesTo(a, \"foo      bar .  FOO <> BAR\", \n                     new String[] { \"foo\", \"bar\", \"foo\", \"bar\" });\n    assertAnalyzesTo(a, \"foo.bar.FOO.BAR\", \n                     new String[] { \"foo\", \"bar\", \"foo\", \"bar\" });\n    assertAnalyzesTo(a, \"U.S.A.\", \n                     new String[] { \"u\", \"s\", \"a\" });\n    assertAnalyzesTo(a, \"C++\", \n                     new String[] { \"c\" });\n    assertAnalyzesTo(a, \"B2B\", \n                     new String[] { \"b\", \"b\" });\n    assertAnalyzesTo(a, \"2B\", \n                     new String[] { \"b\" });\n    assertAnalyzesTo(a, \"\\\"QUOTED\\\" word\", \n                     new String[] { \"quoted\", \"word\" });\n    assertEquals(new BytesRef(\"\\\"\\\\à3[]()! cz@\"), a.normalize(\"dummy\", \"\\\"\\\\À3[]()! Cz@\"));\n    a.close();\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n    Analyzer a = new SimpleAnalyzer();\n    assertAnalyzesTo(a, \"foo bar FOO BAR\", \n                     new String[] { \"foo\", \"bar\", \"foo\", \"bar\" });\n    assertAnalyzesTo(a, \"foo      bar .  FOO <> BAR\", \n                     new String[] { \"foo\", \"bar\", \"foo\", \"bar\" });\n    assertAnalyzesTo(a, \"foo.bar.FOO.BAR\", \n                     new String[] { \"foo\", \"bar\", \"foo\", \"bar\" });\n    assertAnalyzesTo(a, \"U.S.A.\", \n                     new String[] { \"u\", \"s\", \"a\" });\n    assertAnalyzesTo(a, \"C++\", \n                     new String[] { \"c\" });\n    assertAnalyzesTo(a, \"B2B\", \n                     new String[] { \"b\", \"b\" });\n    assertAnalyzesTo(a, \"2B\", \n                     new String[] { \"b\" });\n    assertAnalyzesTo(a, \"\\\"QUOTED\\\" word\", \n                     new String[] { \"quoted\", \"word\" });\n    a.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ff4227bb146f97aabae888091c19e48c88dbb0db":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["379db3ad24c4f0214f30a122265a6d6be003a99d","a56958d7f71a28824f20031ffbb2e13502a0274e"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"379db3ad24c4f0214f30a122265a6d6be003a99d":["5cdab62f058ea765dd33deb05b4f19b7d626c801"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ea4107f60b9f95623c16025c9c247412ff809092":["a56958d7f71a28824f20031ffbb2e13502a0274e"],"a56958d7f71a28824f20031ffbb2e13502a0274e":["379db3ad24c4f0214f30a122265a6d6be003a99d"],"5cdab62f058ea765dd33deb05b4f19b7d626c801":["ff4227bb146f97aabae888091c19e48c88dbb0db"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a56958d7f71a28824f20031ffbb2e13502a0274e","ea4107f60b9f95623c16025c9c247412ff809092"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ea4107f60b9f95623c16025c9c247412ff809092"]},"commit2Childs":{"ff4227bb146f97aabae888091c19e48c88dbb0db":["5cdab62f058ea765dd33deb05b4f19b7d626c801"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["ff4227bb146f97aabae888091c19e48c88dbb0db"],"379db3ad24c4f0214f30a122265a6d6be003a99d":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","a56958d7f71a28824f20031ffbb2e13502a0274e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a56958d7f71a28824f20031ffbb2e13502a0274e":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","ea4107f60b9f95623c16025c9c247412ff809092","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"5cdab62f058ea765dd33deb05b4f19b7d626c801":["379db3ad24c4f0214f30a122265a6d6be003a99d"],"ea4107f60b9f95623c16025c9c247412ff809092":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}