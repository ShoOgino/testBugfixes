{"path":"backwards/src/java/org/apache/lucene/queryParser/QueryParser#getRangeQuery(String,String,String,boolean).mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/java/org/apache/lucene/queryParser/QueryParser#getRangeQuery(String,String,String,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * @exception ParseException throw in overridden method to disallow\n   */\n  protected Query getRangeQuery(String field,\n                                String part1,\n                                String part2,\n                                boolean inclusive) throws ParseException\n  {\n    if (lowercaseExpandedTerms) {\n      part1 = part1.toLowerCase();\n      part2 = part2.toLowerCase();\n    }\n    try {\n      DateFormat df = DateFormat.getDateInstance(DateFormat.SHORT, locale);\n      df.setLenient(true);\n      Date d1 = df.parse(part1);\n      Date d2 = df.parse(part2);\n      if (inclusive) {\n        // The user can only specify the date, not the time, so make sure\n        // the time is set to the latest possible time of that date to really\n        // include all documents:\n        Calendar cal = Calendar.getInstance(locale);\n        cal.setTime(d2);\n        cal.set(Calendar.HOUR_OF_DAY, 23);\n        cal.set(Calendar.MINUTE, 59);\n        cal.set(Calendar.SECOND, 59);\n        cal.set(Calendar.MILLISECOND, 999);\n        d2 = cal.getTime();\n      }\n      DateTools.Resolution resolution = getDateResolution(field);\n      if (resolution == null) {\n        // no default or field specific date resolution has been set,\n        // use deprecated DateField to maintain compatibility with\n        // pre-1.9 Lucene versions.\n        part1 = DateField.dateToString(d1);\n        part2 = DateField.dateToString(d2);\n      } else {\n        part1 = DateTools.dateToString(d1, resolution);\n        part2 = DateTools.dateToString(d2, resolution);\n      }\n    }\n    catch (Exception e) { }\n\n    return newRangeQuery(field, part1, part2, inclusive);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/queryParser/QueryParser#getRangeQuery(String,String,String,boolean).mjava","pathOld":"backwards/src/java/org/apache/lucene/queryParser/QueryParser#getRangeQuery(String,String,String,boolean).mjava","sourceNew":"  /**\n   * @exception ParseException throw in overridden method to disallow\n   */\n  protected Query getRangeQuery(String field,\n                                String part1,\n                                String part2,\n                                boolean inclusive) throws ParseException\n  {\n    if (lowercaseExpandedTerms) {\n      part1 = part1.toLowerCase();\n      part2 = part2.toLowerCase();\n    }\n    try {\n      DateFormat df = DateFormat.getDateInstance(DateFormat.SHORT, locale);\n      df.setLenient(true);\n      Date d1 = df.parse(part1);\n      Date d2 = df.parse(part2);\n      if (inclusive) {\n        // The user can only specify the date, not the time, so make sure\n        // the time is set to the latest possible time of that date to really\n        // include all documents:\n        Calendar cal = Calendar.getInstance(locale);\n        cal.setTime(d2);\n        cal.set(Calendar.HOUR_OF_DAY, 23);\n        cal.set(Calendar.MINUTE, 59);\n        cal.set(Calendar.SECOND, 59);\n        cal.set(Calendar.MILLISECOND, 999);\n        d2 = cal.getTime();\n      }\n      DateTools.Resolution resolution = getDateResolution(field);\n      if (resolution == null) {\n        // no default or field specific date resolution has been set,\n        // use deprecated DateField to maintain compatibility with\n        // pre-1.9 Lucene versions.\n        part1 = DateField.dateToString(d1);\n        part2 = DateField.dateToString(d2);\n      } else {\n        part1 = DateTools.dateToString(d1, resolution);\n        part2 = DateTools.dateToString(d2, resolution);\n      }\n    }\n    catch (Exception e) { }\n\n    return newRangeQuery(field, part1, part2, inclusive);\n  }\n\n","sourceOld":"  /**\n   * @exception ParseException throw in overridden method to disallow\n   */\n  protected Query getRangeQuery(String field,\n                                String part1,\n                                String part2,\n                                boolean inclusive) throws ParseException\n  {\n    if (lowercaseExpandedTerms) {\n      part1 = part1.toLowerCase();\n      part2 = part2.toLowerCase();\n    }\n    try {\n      DateFormat df = DateFormat.getDateInstance(DateFormat.SHORT, locale);\n      df.setLenient(true);\n      Date d1 = df.parse(part1);\n      Date d2 = df.parse(part2);\n      if (inclusive) {\n        // The user can only specify the date, not the time, so make sure\n        // the time is set to the latest possible time of that date to really\n        // include all documents:\n        Calendar cal = Calendar.getInstance(locale);\n        cal.setTime(d2);\n        cal.set(Calendar.HOUR_OF_DAY, 23);\n        cal.set(Calendar.MINUTE, 59);\n        cal.set(Calendar.SECOND, 59);\n        cal.set(Calendar.MILLISECOND, 999);\n        d2 = cal.getTime();\n      }\n      DateTools.Resolution resolution = getDateResolution(field);\n      if (resolution == null) {\n        // no default or field specific date resolution has been set,\n        // use deprecated DateField to maintain compatibility with\n        // pre-1.9 Lucene versions.\n        part1 = DateField.dateToString(d1);\n        part2 = DateField.dateToString(d2);\n      } else {\n        part1 = DateTools.dateToString(d1, resolution);\n        part2 = DateTools.dateToString(d2, resolution);\n      }\n    }\n    catch (Exception e) { }\n\n    return newRangeQuery(field, part1, part2, inclusive);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}