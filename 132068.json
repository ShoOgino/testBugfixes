{"path":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/feeds/LineDocSourceTest#testInvalidFormat().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/feeds/LineDocSourceTest#testInvalidFormat().mjava","pathOld":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/feeds/LineDocSourceTest#testInvalidFormat().mjava","sourceNew":"  public void testInvalidFormat() throws Exception {\n    String[] testCases = new String[] {\n      \"\", // empty line\n      \"title\", // just title\n      \"title\" + WriteLineDocTask.SEP, // title + SEP\n      \"title\" + WriteLineDocTask.SEP + \"body\", // title + SEP + body\n      // note that title + SEP + body + SEP is a valid line, which results in an\n      // empty body\n    };\n    \n    for (int i = 0; i < testCases.length; i++) {\n      File file = new File(getWorkDir(), \"one-line\");\n      BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(file), \"utf-8\"));\n      writer.write(testCases[i]);\n      writer.newLine();\n      writer.close();\n      try {\n        doIndexAndSearchTest(file, null, null);\n        fail(\"Some exception should have been thrown for: [\" + testCases[i] + \"]\");\n      } catch (Exception e) {\n        // expected.\n      }\n    }\n  }\n\n","sourceOld":"  public void testInvalidFormat() throws Exception {\n    String[] testCases = new String[] {\n      \"\", // empty line\n      \"title\", // just title\n      \"title\" + WriteLineDocTask.SEP, // title + SEP\n      \"title\" + WriteLineDocTask.SEP + \"body\", // title + SEP + body\n      // note that title + SEP + body + SEP is a valid line, which results in an\n      // empty body\n    };\n    \n    for (int i = 0; i < testCases.length; i++) {\n      File file = new File(getWorkDir(), \"one-line\");\n      BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(file), \"utf-8\"));\n      writer.write(testCases[i]);\n      writer.newLine();\n      writer.close();\n      try {\n        doIndexAndSearchTest(file, null, null);\n        fail(\"Some exception should have been thrown for: [\" + testCases[i] + \"]\");\n      } catch (Exception e) {\n        // expected.\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7d89d7e4e5101347833eea558851bf4209218619","date":1396265641,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/feeds/LineDocSourceTest#testInvalidFormat().mjava","pathOld":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/feeds/LineDocSourceTest#testInvalidFormat().mjava","sourceNew":"  public void testInvalidFormat() throws Exception {\n    String[] testCases = new String[] {\n      \"\", // empty line\n      \"title\", // just title\n      \"title\" + WriteLineDocTask.SEP, // title + SEP\n      \"title\" + WriteLineDocTask.SEP + \"body\", // title + SEP + body\n      // note that title + SEP + body + SEP is a valid line, which results in an\n      // empty body\n    };\n    \n    for (int i = 0; i < testCases.length; i++) {\n      File file = new File(getWorkDir(), \"one-line\");\n      BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(file), StandardCharsets.UTF_8));\n      writer.write(testCases[i]);\n      writer.newLine();\n      writer.close();\n      try {\n        doIndexAndSearchTest(file, null, null);\n        fail(\"Some exception should have been thrown for: [\" + testCases[i] + \"]\");\n      } catch (Exception e) {\n        // expected.\n      }\n    }\n  }\n\n","sourceOld":"  public void testInvalidFormat() throws Exception {\n    String[] testCases = new String[] {\n      \"\", // empty line\n      \"title\", // just title\n      \"title\" + WriteLineDocTask.SEP, // title + SEP\n      \"title\" + WriteLineDocTask.SEP + \"body\", // title + SEP + body\n      // note that title + SEP + body + SEP is a valid line, which results in an\n      // empty body\n    };\n    \n    for (int i = 0; i < testCases.length; i++) {\n      File file = new File(getWorkDir(), \"one-line\");\n      BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(file), \"utf-8\"));\n      writer.write(testCases[i]);\n      writer.newLine();\n      writer.close();\n      try {\n        doIndexAndSearchTest(file, null, null);\n        fail(\"Some exception should have been thrown for: [\" + testCases[i] + \"]\");\n      } catch (Exception e) {\n        // expected.\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/feeds/LineDocSourceTest#testInvalidFormat().mjava","pathOld":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/feeds/LineDocSourceTest#testInvalidFormat().mjava","sourceNew":"  public void testInvalidFormat() throws Exception {\n    String[] testCases = new String[] {\n      \"\", // empty line\n      \"title\", // just title\n      \"title\" + WriteLineDocTask.SEP, // title + SEP\n      \"title\" + WriteLineDocTask.SEP + \"body\", // title + SEP + body\n      // note that title + SEP + body + SEP is a valid line, which results in an\n      // empty body\n    };\n    \n    for (int i = 0; i < testCases.length; i++) {\n      File file = new File(getWorkDir(), \"one-line\");\n      BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(file), StandardCharsets.UTF_8));\n      writer.write(testCases[i]);\n      writer.newLine();\n      writer.close();\n      try {\n        doIndexAndSearchTest(file, null, null);\n        fail(\"Some exception should have been thrown for: [\" + testCases[i] + \"]\");\n      } catch (Exception e) {\n        // expected.\n      }\n    }\n  }\n\n","sourceOld":"  public void testInvalidFormat() throws Exception {\n    String[] testCases = new String[] {\n      \"\", // empty line\n      \"title\", // just title\n      \"title\" + WriteLineDocTask.SEP, // title + SEP\n      \"title\" + WriteLineDocTask.SEP + \"body\", // title + SEP + body\n      // note that title + SEP + body + SEP is a valid line, which results in an\n      // empty body\n    };\n    \n    for (int i = 0; i < testCases.length; i++) {\n      File file = new File(getWorkDir(), \"one-line\");\n      BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(file), \"utf-8\"));\n      writer.write(testCases[i]);\n      writer.newLine();\n      writer.close();\n      try {\n        doIndexAndSearchTest(file, null, null);\n        fail(\"Some exception should have been thrown for: [\" + testCases[i] + \"]\");\n      } catch (Exception e) {\n        // expected.\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4abec28b874149a7223e32cc7a01704c27790de","date":1410644789,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/feeds/LineDocSourceTest#testInvalidFormat().mjava","pathOld":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/feeds/LineDocSourceTest#testInvalidFormat().mjava","sourceNew":"  public void testInvalidFormat() throws Exception {\n    String[] testCases = new String[] {\n      \"\", // empty line\n      \"title\", // just title\n      \"title\" + WriteLineDocTask.SEP, // title + SEP\n      \"title\" + WriteLineDocTask.SEP + \"body\", // title + SEP + body\n      // note that title + SEP + body + SEP is a valid line, which results in an\n      // empty body\n    };\n    \n    for (int i = 0; i < testCases.length; i++) {\n      Path file = getWorkDir().resolve(\"one-line\");\n      BufferedWriter writer = Files.newBufferedWriter(file, StandardCharsets.UTF_8);\n      writer.write(testCases[i]);\n      writer.newLine();\n      writer.close();\n      try {\n        doIndexAndSearchTest(file, null, null);\n        fail(\"Some exception should have been thrown for: [\" + testCases[i] + \"]\");\n      } catch (Exception e) {\n        // expected.\n      }\n    }\n  }\n\n","sourceOld":"  public void testInvalidFormat() throws Exception {\n    String[] testCases = new String[] {\n      \"\", // empty line\n      \"title\", // just title\n      \"title\" + WriteLineDocTask.SEP, // title + SEP\n      \"title\" + WriteLineDocTask.SEP + \"body\", // title + SEP + body\n      // note that title + SEP + body + SEP is a valid line, which results in an\n      // empty body\n    };\n    \n    for (int i = 0; i < testCases.length; i++) {\n      File file = new File(getWorkDir(), \"one-line\");\n      BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(file), StandardCharsets.UTF_8));\n      writer.write(testCases[i]);\n      writer.newLine();\n      writer.close();\n      try {\n        doIndexAndSearchTest(file, null, null);\n        fail(\"Some exception should have been thrown for: [\" + testCases[i] + \"]\");\n      } catch (Exception e) {\n        // expected.\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"05fe562aa248790944d43cdd478f512572835ba0","date":1455901667,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/feeds/LineDocSourceTest#testInvalidFormat().mjava","pathOld":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/feeds/LineDocSourceTest#testInvalidFormat().mjava","sourceNew":"  public void testInvalidFormat() throws Exception {\n    String[] testCases = new String[] {\n      \"\", // empty line\n      \"title\", // just title\n      \"title\" + WriteLineDocTask.SEP, // title + SEP\n      \"title\" + WriteLineDocTask.SEP + \"body\", // title + SEP + body\n      // note that title + SEP + body + SEP is a valid line, which results in an\n      // empty body\n    };\n    \n    for (int i = 0; i < testCases.length; i++) {\n      Path file = getWorkDir().resolve(\"one-line\");\n      BufferedWriter writer = Files.newBufferedWriter(file, StandardCharsets.UTF_8);\n      writer.write(testCases[i]);\n      writer.newLine();\n      writer.close();\n      expectThrows(Exception.class, () -> {\n        doIndexAndSearchTest(file, null, null);\n      });\n    }\n  }\n\n","sourceOld":"  public void testInvalidFormat() throws Exception {\n    String[] testCases = new String[] {\n      \"\", // empty line\n      \"title\", // just title\n      \"title\" + WriteLineDocTask.SEP, // title + SEP\n      \"title\" + WriteLineDocTask.SEP + \"body\", // title + SEP + body\n      // note that title + SEP + body + SEP is a valid line, which results in an\n      // empty body\n    };\n    \n    for (int i = 0; i < testCases.length; i++) {\n      Path file = getWorkDir().resolve(\"one-line\");\n      BufferedWriter writer = Files.newBufferedWriter(file, StandardCharsets.UTF_8);\n      writer.write(testCases[i]);\n      writer.newLine();\n      writer.close();\n      try {\n        doIndexAndSearchTest(file, null, null);\n        fail(\"Some exception should have been thrown for: [\" + testCases[i] + \"]\");\n      } catch (Exception e) {\n        // expected.\n      }\n    }\n  }\n\n","bugFix":["c4bea909b475e3f9d726f4fee3c27d3c870b9027"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5eb2511ababf862ea11e10761c70ee560cd84510":["b89678825b68eccaf09e6ab71675fc0b0af1e099","7d89d7e4e5101347833eea558851bf4209218619"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"05fe562aa248790944d43cdd478f512572835ba0":["f4abec28b874149a7223e32cc7a01704c27790de"],"f4abec28b874149a7223e32cc7a01704c27790de":["7d89d7e4e5101347833eea558851bf4209218619"],"7d89d7e4e5101347833eea558851bf4209218619":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["05fe562aa248790944d43cdd478f512572835ba0"]},"commit2Childs":{"5eb2511ababf862ea11e10761c70ee560cd84510":[],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["5eb2511ababf862ea11e10761c70ee560cd84510","7d89d7e4e5101347833eea558851bf4209218619"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"05fe562aa248790944d43cdd478f512572835ba0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7d89d7e4e5101347833eea558851bf4209218619":["5eb2511ababf862ea11e10761c70ee560cd84510","f4abec28b874149a7223e32cc7a01704c27790de"],"f4abec28b874149a7223e32cc7a01704c27790de":["05fe562aa248790944d43cdd478f512572835ba0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}