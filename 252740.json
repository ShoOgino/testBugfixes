{"path":"lucene/spatial/src/java/org/apache/lucene/spatial/vector/DistanceValueSource#getValues(Map,LeafReaderContext).mjava","commits":[{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":0,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/vector/DistanceValueSource#getValues(Map,LeafReaderContext).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns the FunctionValues used by the function query.\n   */\n  @Override\n  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    LeafReader reader = readerContext.reader();\n\n    final NumericDocValues ptX = DocValues.getNumeric(reader, strategy.getFieldNameX());\n    final NumericDocValues ptY = DocValues.getNumeric(reader, strategy.getFieldNameY());\n    final Bits validX =  DocValues.getDocsWithField(reader, strategy.getFieldNameX());\n    final Bits validY =  DocValues.getDocsWithField(reader, strategy.getFieldNameY());\n\n    return new FunctionValues() {\n\n      private final Point from = DistanceValueSource.this.from;\n      private final DistanceCalculator calculator = strategy.getSpatialContext().getDistCalc();\n      private final double nullValue =\n          (strategy.getSpatialContext().isGeo() ? 180 * multiplier : Double.MAX_VALUE);\n\n      @Override\n      public float floatVal(int doc) {\n        return (float) doubleVal(doc);\n      }\n\n      @Override\n      public double doubleVal(int doc) {\n        // make sure it has minX and area\n        if (validX.get(doc)) {\n          assert validY.get(doc);\n          return calculator.distance(from, Double.longBitsToDouble(ptX.get(doc)), Double.longBitsToDouble(ptY.get(doc))) * multiplier;\n        }\n        return nullValue;\n      }\n\n      @Override\n      public String toString(int doc) {\n        return description() + \"=\" + floatVal(doc);\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"112d77ac8d3e10a362516ad834c9a11d35c94234","date":1456784319,"type":5,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/vector/DistanceValueSource#getValues(Map,LeafReaderContext).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/vector/DistanceValueSource#getValues(Map,LeafReaderContext).mjava","sourceNew":"  /**\n   * Returns the FunctionValues used by the function query.\n   */\n  @Override\n  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    LeafReader reader = readerContext.reader();\n\n    final NumericDocValues ptX = DocValues.getNumeric(reader, strategy.getFieldNameX());\n    final NumericDocValues ptY = DocValues.getNumeric(reader, strategy.getFieldNameY());\n    final Bits validX =  DocValues.getDocsWithField(reader, strategy.getFieldNameX());\n    final Bits validY =  DocValues.getDocsWithField(reader, strategy.getFieldNameY());\n\n    return new FunctionValues() {\n\n      private final Point from = DistanceValueSource.this.from;\n      private final DistanceCalculator calculator = strategy.getSpatialContext().getDistCalc();\n      private final double nullValue =\n          (strategy.getSpatialContext().isGeo() ? 180 * multiplier : Double.MAX_VALUE);\n\n      @Override\n      public float floatVal(int doc) {\n        return (float) doubleVal(doc);\n      }\n\n      @Override\n      public double doubleVal(int doc) {\n        // make sure it has minX and area\n        if (validX.get(doc)) {\n          assert validY.get(doc);\n          return calculator.distance(from, Double.longBitsToDouble(ptX.get(doc)), Double.longBitsToDouble(ptY.get(doc))) * multiplier;\n        }\n        return nullValue;\n      }\n\n      @Override\n      public String toString(int doc) {\n        return description() + \"=\" + floatVal(doc);\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * Returns the FunctionValues used by the function query.\n   */\n  @Override\n  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    LeafReader reader = readerContext.reader();\n\n    final NumericDocValues ptX = DocValues.getNumeric(reader, strategy.getFieldNameX());\n    final NumericDocValues ptY = DocValues.getNumeric(reader, strategy.getFieldNameY());\n    final Bits validX =  DocValues.getDocsWithField(reader, strategy.getFieldNameX());\n    final Bits validY =  DocValues.getDocsWithField(reader, strategy.getFieldNameY());\n\n    return new FunctionValues() {\n\n      private final Point from = DistanceValueSource.this.from;\n      private final DistanceCalculator calculator = strategy.getSpatialContext().getDistCalc();\n      private final double nullValue =\n          (strategy.getSpatialContext().isGeo() ? 180 * multiplier : Double.MAX_VALUE);\n\n      @Override\n      public float floatVal(int doc) {\n        return (float) doubleVal(doc);\n      }\n\n      @Override\n      public double doubleVal(int doc) {\n        // make sure it has minX and area\n        if (validX.get(doc)) {\n          assert validY.get(doc);\n          return calculator.distance(from, Double.longBitsToDouble(ptX.get(doc)), Double.longBitsToDouble(ptY.get(doc))) * multiplier;\n        }\n        return nullValue;\n      }\n\n      @Override\n      public String toString(int doc) {\n        return description() + \"=\" + floatVal(doc);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af2638813028b254a88b418ebeafb541afb49653","date":1456804822,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/vector/DistanceValueSource#getValues(Map,LeafReaderContext).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/vector/DistanceValueSource#getValues(Map,LeafReaderContext).mjava","sourceNew":"  /**\n   * Returns the FunctionValues used by the function query.\n   */\n  @Override\n  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    LeafReader reader = readerContext.reader();\n\n    final NumericDocValues ptX = DocValues.getNumeric(reader, strategy.getFieldNameX());\n    final NumericDocValues ptY = DocValues.getNumeric(reader, strategy.getFieldNameY());\n    final Bits validX =  DocValues.getDocsWithField(reader, strategy.getFieldNameX());\n    final Bits validY =  DocValues.getDocsWithField(reader, strategy.getFieldNameY());\n\n    return new FunctionValues() {\n\n      private final Point from = DistanceValueSource.this.from;\n      private final DistanceCalculator calculator = strategy.getSpatialContext().getDistCalc();\n      private final double nullValue =\n          (strategy.getSpatialContext().isGeo() ? 180 * multiplier : Double.MAX_VALUE);\n\n      @Override\n      public float floatVal(int doc) {\n        return (float) doubleVal(doc);\n      }\n\n      @Override\n      public double doubleVal(int doc) {\n        // make sure it has minX and area\n        if (validX.get(doc)) {\n          assert validY.get(doc);\n          return calculator.distance(from, Double.longBitsToDouble(ptX.get(doc)), Double.longBitsToDouble(ptY.get(doc))) * multiplier;\n        }\n        return nullValue;\n      }\n\n      @Override\n      public String toString(int doc) {\n        return description() + \"=\" + floatVal(doc);\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * Returns the FunctionValues used by the function query.\n   */\n  @Override\n  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    LeafReader reader = readerContext.reader();\n\n    final NumericDocValues ptX = DocValues.getNumeric(reader, strategy.getFieldNameX());\n    final NumericDocValues ptY = DocValues.getNumeric(reader, strategy.getFieldNameY());\n    final Bits validX =  DocValues.getDocsWithField(reader, strategy.getFieldNameX());\n    final Bits validY =  DocValues.getDocsWithField(reader, strategy.getFieldNameY());\n\n    return new FunctionValues() {\n\n      private final Point from = DistanceValueSource.this.from;\n      private final DistanceCalculator calculator = strategy.getSpatialContext().getDistCalc();\n      private final double nullValue =\n          (strategy.getSpatialContext().isGeo() ? 180 * multiplier : Double.MAX_VALUE);\n\n      @Override\n      public float floatVal(int doc) {\n        return (float) doubleVal(doc);\n      }\n\n      @Override\n      public double doubleVal(int doc) {\n        // make sure it has minX and area\n        if (validX.get(doc)) {\n          assert validY.get(doc);\n          return calculator.distance(from, Double.longBitsToDouble(ptX.get(doc)), Double.longBitsToDouble(ptY.get(doc))) * multiplier;\n        }\n        return nullValue;\n      }\n\n      @Override\n      public String toString(int doc) {\n        return description() + \"=\" + floatVal(doc);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"af2638813028b254a88b418ebeafb541afb49653":["c9fb5f46e264daf5ba3860defe623a89d202dd87","112d77ac8d3e10a362516ad834c9a11d35c94234"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"112d77ac8d3e10a362516ad834c9a11d35c94234":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["af2638813028b254a88b418ebeafb541afb49653"]},"commit2Childs":{"af2638813028b254a88b418ebeafb541afb49653":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"112d77ac8d3e10a362516ad834c9a11d35c94234":["af2638813028b254a88b418ebeafb541afb49653"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["af2638813028b254a88b418ebeafb541afb49653","112d77ac8d3e10a362516ad834c9a11d35c94234"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}