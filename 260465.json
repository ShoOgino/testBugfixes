{"path":"solr/core/src/test/org/apache/solr/request/TestFaceting#assertEquals(String,SortedSetDocValues,SortedSetDocValues).mjava","commits":[{"id":"5275a994b4fc707fafce0408625bd3456edc28a4","date":1400004510,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/request/TestFaceting#assertEquals(String,SortedSetDocValues,SortedSetDocValues).mjava","pathOld":"/dev/null","sourceNew":"  // assert same instance: either same object, or both wrapping same single-valued object\n  private void assertEquals(String msg, SortedSetDocValues dv1, SortedSetDocValues dv2) {\n    SortedDocValues singleton1 = DocValues.unwrapSingleton(dv1);\n    SortedDocValues singleton2 = DocValues.unwrapSingleton(dv2);\n    if (singleton1 == null || singleton2 == null) {\n      assertSame(dv1, dv2);\n    } else {\n      assertSame(singleton1, singleton2);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93dd449115a9247533e44bab47e8429e5dccbc6d","date":1400258396,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/request/TestFaceting#assertEquals(String,SortedSetDocValues,SortedSetDocValues).mjava","pathOld":"/dev/null","sourceNew":"  // assert same instance: either same object, or both wrapping same single-valued object\n  private void assertEquals(String msg, SortedSetDocValues dv1, SortedSetDocValues dv2) {\n    SortedDocValues singleton1 = DocValues.unwrapSingleton(dv1);\n    SortedDocValues singleton2 = DocValues.unwrapSingleton(dv2);\n    if (singleton1 == null || singleton2 == null) {\n      assertSame(dv1, dv2);\n    } else {\n      assertSame(singleton1, singleton2);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56572ec06f1407c066d6b7399413178b33176cd8","date":1400495675,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/request/TestFaceting#assertEquals(String,SortedSetDocValues,SortedSetDocValues).mjava","pathOld":"/dev/null","sourceNew":"  // assert same instance: either same object, or both wrapping same single-valued object\n  private void assertEquals(String msg, SortedSetDocValues dv1, SortedSetDocValues dv2) {\n    SortedDocValues singleton1 = DocValues.unwrapSingleton(dv1);\n    SortedDocValues singleton2 = DocValues.unwrapSingleton(dv2);\n    if (singleton1 == null || singleton2 == null) {\n      assertSame(dv1, dv2);\n    } else {\n      assertSame(singleton1, singleton2);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ced4ab53863c457dc59ef8c4707c06dbb11b23f","date":1400609850,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/request/TestFaceting#assertEquals(String,SortedSetDocValues,SortedSetDocValues).mjava","pathOld":"solr/core/src/test/org/apache/solr/request/TestFaceting#assertEquals(String,SortedSetDocValues,SortedSetDocValues).mjava","sourceNew":"  // assert same instance: either same object, or both wrapping same single-valued object\n  private void assertEquals(String msg, SortedSetDocValues dv1, SortedSetDocValues dv2) {\n    SortedDocValues singleton1 = DocValues.unwrapSingleton(dv1);\n    SortedDocValues singleton2 = DocValues.unwrapSingleton(dv2);\n    if (singleton1 == null || singleton2 == null) {\n      // actually a multi-valued field\n      if (dv1 instanceof MultiDocValues.MultiSortedSetDocValues) {\n        // if we produced more than one segment, ensure the core ordinal map is the same object\n        assertTrue(dv2 instanceof MultiDocValues.MultiSortedSetDocValues);\n        assertSame(((MultiDocValues.MultiSortedSetDocValues) dv1).mapping, \n                   ((MultiDocValues.MultiSortedSetDocValues) dv2).mapping);\n      } else {\n        // otherwise, same atomic instance\n        assertSame(dv1, dv2);\n      }\n    } else {\n      // just wrapping a field that is actually single-valued\n      if (singleton1 instanceof MultiDocValues.MultiSortedDocValues) {\n        // if we produced more than one segment, ensure the core ordinal map is the same object\n        assertTrue(singleton2 instanceof MultiDocValues.MultiSortedDocValues);\n        assertSame(((MultiDocValues.MultiSortedDocValues) singleton1).mapping, \n                   ((MultiDocValues.MultiSortedDocValues) singleton2).mapping);\n      } else {\n        // otherwise, same atomic instance\n        assertSame(singleton1, singleton2);\n      }\n    }\n  }\n\n","sourceOld":"  // assert same instance: either same object, or both wrapping same single-valued object\n  private void assertEquals(String msg, SortedSetDocValues dv1, SortedSetDocValues dv2) {\n    SortedDocValues singleton1 = DocValues.unwrapSingleton(dv1);\n    SortedDocValues singleton2 = DocValues.unwrapSingleton(dv2);\n    if (singleton1 == null || singleton2 == null) {\n      assertSame(dv1, dv2);\n    } else {\n      assertSame(singleton1, singleton2);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7605579001505896d48b07160075a5c8b8e128e","date":1400758727,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/request/TestFaceting#assertEquals(String,SortedSetDocValues,SortedSetDocValues).mjava","pathOld":"solr/core/src/test/org/apache/solr/request/TestFaceting#assertEquals(String,SortedSetDocValues,SortedSetDocValues).mjava","sourceNew":"  // assert same instance: either same object, or both wrapping same single-valued object\n  private void assertEquals(String msg, SortedSetDocValues dv1, SortedSetDocValues dv2) {\n    SortedDocValues singleton1 = DocValues.unwrapSingleton(dv1);\n    SortedDocValues singleton2 = DocValues.unwrapSingleton(dv2);\n    if (singleton1 == null || singleton2 == null) {\n      // actually a multi-valued field\n      if (dv1 instanceof MultiDocValues.MultiSortedSetDocValues) {\n        // if we produced more than one segment, ensure the core ordinal map is the same object\n        assertTrue(dv2 instanceof MultiDocValues.MultiSortedSetDocValues);\n        assertSame(((MultiDocValues.MultiSortedSetDocValues) dv1).mapping, \n                   ((MultiDocValues.MultiSortedSetDocValues) dv2).mapping);\n      } else {\n        // otherwise, same atomic instance\n        assertSame(dv1, dv2);\n      }\n    } else {\n      // just wrapping a field that is actually single-valued\n      if (singleton1 instanceof MultiDocValues.MultiSortedDocValues) {\n        // if we produced more than one segment, ensure the core ordinal map is the same object\n        assertTrue(singleton2 instanceof MultiDocValues.MultiSortedDocValues);\n        assertSame(((MultiDocValues.MultiSortedDocValues) singleton1).mapping, \n                   ((MultiDocValues.MultiSortedDocValues) singleton2).mapping);\n      } else {\n        // otherwise, same atomic instance\n        assertSame(singleton1, singleton2);\n      }\n    }\n  }\n\n","sourceOld":"  // assert same instance: either same object, or both wrapping same single-valued object\n  private void assertEquals(String msg, SortedSetDocValues dv1, SortedSetDocValues dv2) {\n    SortedDocValues singleton1 = DocValues.unwrapSingleton(dv1);\n    SortedDocValues singleton2 = DocValues.unwrapSingleton(dv2);\n    if (singleton1 == null || singleton2 == null) {\n      assertSame(dv1, dv2);\n    } else {\n      assertSame(singleton1, singleton2);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf","date":1401983689,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/request/TestFaceting#assertEquals(String,SortedSetDocValues,SortedSetDocValues).mjava","sourceNew":null,"sourceOld":"  // assert same instance: either same object, or both wrapping same single-valued object\n  private void assertEquals(String msg, SortedSetDocValues dv1, SortedSetDocValues dv2) {\n    SortedDocValues singleton1 = DocValues.unwrapSingleton(dv1);\n    SortedDocValues singleton2 = DocValues.unwrapSingleton(dv2);\n    if (singleton1 == null || singleton2 == null) {\n      // actually a multi-valued field\n      if (dv1 instanceof MultiDocValues.MultiSortedSetDocValues) {\n        // if we produced more than one segment, ensure the core ordinal map is the same object\n        assertTrue(dv2 instanceof MultiDocValues.MultiSortedSetDocValues);\n        assertSame(((MultiDocValues.MultiSortedSetDocValues) dv1).mapping, \n                   ((MultiDocValues.MultiSortedSetDocValues) dv2).mapping);\n      } else {\n        // otherwise, same atomic instance\n        assertSame(dv1, dv2);\n      }\n    } else {\n      // just wrapping a field that is actually single-valued\n      if (singleton1 instanceof MultiDocValues.MultiSortedDocValues) {\n        // if we produced more than one segment, ensure the core ordinal map is the same object\n        assertTrue(singleton2 instanceof MultiDocValues.MultiSortedDocValues);\n        assertSame(((MultiDocValues.MultiSortedDocValues) singleton1).mapping, \n                   ((MultiDocValues.MultiSortedDocValues) singleton2).mapping);\n      } else {\n        // otherwise, same atomic instance\n        assertSame(singleton1, singleton2);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"93dd449115a9247533e44bab47e8429e5dccbc6d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5275a994b4fc707fafce0408625bd3456edc28a4"],"5275a994b4fc707fafce0408625bd3456edc28a4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf":["9ced4ab53863c457dc59ef8c4707c06dbb11b23f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7605579001505896d48b07160075a5c8b8e128e":["56572ec06f1407c066d6b7399413178b33176cd8","9ced4ab53863c457dc59ef8c4707c06dbb11b23f"],"56572ec06f1407c066d6b7399413178b33176cd8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","93dd449115a9247533e44bab47e8429e5dccbc6d"],"9ced4ab53863c457dc59ef8c4707c06dbb11b23f":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf"]},"commit2Childs":{"93dd449115a9247533e44bab47e8429e5dccbc6d":["56572ec06f1407c066d6b7399413178b33176cd8","9ced4ab53863c457dc59ef8c4707c06dbb11b23f"],"5275a994b4fc707fafce0408625bd3456edc28a4":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["93dd449115a9247533e44bab47e8429e5dccbc6d","5275a994b4fc707fafce0408625bd3456edc28a4","56572ec06f1407c066d6b7399413178b33176cd8"],"b7605579001505896d48b07160075a5c8b8e128e":[],"56572ec06f1407c066d6b7399413178b33176cd8":["b7605579001505896d48b07160075a5c8b8e128e"],"9ced4ab53863c457dc59ef8c4707c06dbb11b23f":["53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf","b7605579001505896d48b07160075a5c8b8e128e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b7605579001505896d48b07160075a5c8b8e128e","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}