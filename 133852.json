{"path":"modules/facet/src/test/org/apache/lucene/facet/search/sampling/BaseSampleTestTopK#testCountUsingSamping().mjava","commits":[{"id":"95535508327351a4c38a0dc7711075dfabe5941f","date":1309882395,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/facet/src/test/org/apache/lucene/facet/search/sampling/BaseSampleTestTopK#testCountUsingSamping().mjava","pathOld":"modules/facet/src/test/org/apache/lucene/facet/search/sampling/BaseSampleTestTopK#doTestWithSamping(boolean).mjava","sourceNew":"  /**\n   * Try out faceted search with sampling enabled and complements either disabled or enforced\n   * Lots of randomly generated data is being indexed, and later on a \"90% docs\" faceted search\n   * is performed. The results are compared to non-sampled ones.\n   */\n  public void testCountUsingSamping() throws Exception, IOException {\n    for (int partitionSize : partitionSizes) {\n      initIndex(partitionSize);\n      \n      // Get all of the documents and run the query, then do different\n      // facet counts and compare to control\n      Query q = new TermQuery(new Term(CONTENT_FIELD, BETA)); // 90% of the docs\n      ScoredDocIdCollector docCollector = ScoredDocIdCollector.create(searcher.maxDoc(), false);\n      \n      FacetSearchParams expectedSearchParams = searchParamsWithRequests(K, partitionSize); \n      FacetsCollector fc = new FacetsCollector(expectedSearchParams, indexReader, taxoReader);\n      \n      searcher.search(q, MultiCollector.wrap(docCollector, fc));\n      \n      List<FacetResult> expectedResults = fc.getFacetResults();\n      \n      // complement with sampling!\n      final Sampler sampler = createSampler(docCollector.getScoredDocIDs());\n      \n      FacetSearchParams samplingSearchParams = searchParamsWithRequests(K, partitionSize); \n\n      assertSampling(expectedResults, q, sampler, samplingSearchParams, false);\n      assertSampling(expectedResults, q, sampler, samplingSearchParams, true);\n\n      closeAll();\n    }\n  }\n\n","sourceOld":"  /**\n   * Try out faceted search with sampling enabled and complements either disabled or enforced\n   * Lots of randomly generated data is being indexed, and later on a \"90% docs\" faceted search\n   * is performed. The results are compared to non-sampled ones.\n   */\n  private void doTestWithSamping(boolean complement) throws Exception, IOException {\n    for (int partitionSize : partitionSizes) {\n      initIndex(partitionSize);\n      \n      // Get all of the documents and run the query, then do different\n      // facet counts and compare to control\n      Query q = new TermQuery(new Term(CONTENT_FIELD, BETA)); // 90% of the docs\n      ScoredDocIdCollector docCollector = ScoredDocIdCollector.create(searcher.maxDoc(), false);\n      \n      FacetSearchParams expectedSearchParams = searchParamsWithRequests(K, partitionSize); \n      FacetsCollector fc = new FacetsCollector(expectedSearchParams, indexReader, taxoReader);\n      \n      searcher.search(q, MultiCollector.wrap(docCollector, fc));\n      \n      List<FacetResult> expectedResults = fc.getFacetResults();\n      \n      // complement with sampling!\n      final Sampler sampler = createSampler(docCollector.getScoredDocIDs());\n      \n      FacetSearchParams samplingSearchParams = searchParamsWithRequests(K, partitionSize); \n\n      // try several times in case of failure, because the test has a chance to fail \n      // if the top K facets are not sufficiently common with the sample set\n      for (int n=RETRIES; n>0; n--) {\n        FacetsCollector samplingFC = samplingCollector(complement, sampler,  samplingSearchParams);\n        \n        searcher.search(q, samplingFC);\n        List<FacetResult> sampledResults = samplingFC.getFacetResults();\n        \n        try {\n          assertSameResults(expectedResults, sampledResults);\n          break; // succeeded\n        } catch (Exception e) {\n          if (n<=1) { // otherwise try again\n            throw e; \n          }\n        }\n      }\n      closeAll();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/facet/src/test/org/apache/lucene/facet/search/sampling/BaseSampleTestTopK#testCountUsingSamping().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Try out faceted search with sampling enabled and complements either disabled or enforced\n   * Lots of randomly generated data is being indexed, and later on a \"90% docs\" faceted search\n   * is performed. The results are compared to non-sampled ones.\n   */\n  public void testCountUsingSamping() throws Exception, IOException {\n    for (int partitionSize : partitionSizes) {\n      initIndex(partitionSize);\n      \n      // Get all of the documents and run the query, then do different\n      // facet counts and compare to control\n      Query q = new TermQuery(new Term(CONTENT_FIELD, BETA)); // 90% of the docs\n      ScoredDocIdCollector docCollector = ScoredDocIdCollector.create(searcher.maxDoc(), false);\n      \n      FacetSearchParams expectedSearchParams = searchParamsWithRequests(K, partitionSize); \n      FacetsCollector fc = new FacetsCollector(expectedSearchParams, indexReader, taxoReader);\n      \n      searcher.search(q, MultiCollector.wrap(docCollector, fc));\n      \n      List<FacetResult> expectedResults = fc.getFacetResults();\n      \n      // complement with sampling!\n      final Sampler sampler = createSampler(docCollector.getScoredDocIDs());\n      \n      FacetSearchParams samplingSearchParams = searchParamsWithRequests(K, partitionSize); \n\n      assertSampling(expectedResults, q, sampler, samplingSearchParams, false);\n      assertSampling(expectedResults, q, sampler, samplingSearchParams, true);\n\n      closeAll();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/facet/src/test/org/apache/lucene/facet/search/sampling/BaseSampleTestTopK#testCountUsingSamping().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Try out faceted search with sampling enabled and complements either disabled or enforced\n   * Lots of randomly generated data is being indexed, and later on a \"90% docs\" faceted search\n   * is performed. The results are compared to non-sampled ones.\n   */\n  public void testCountUsingSamping() throws Exception, IOException {\n    for (int partitionSize : partitionSizes) {\n      initIndex(partitionSize);\n      \n      // Get all of the documents and run the query, then do different\n      // facet counts and compare to control\n      Query q = new TermQuery(new Term(CONTENT_FIELD, BETA)); // 90% of the docs\n      ScoredDocIdCollector docCollector = ScoredDocIdCollector.create(searcher.maxDoc(), false);\n      \n      FacetSearchParams expectedSearchParams = searchParamsWithRequests(K, partitionSize); \n      FacetsCollector fc = new FacetsCollector(expectedSearchParams, indexReader, taxoReader);\n      \n      searcher.search(q, MultiCollector.wrap(docCollector, fc));\n      \n      List<FacetResult> expectedResults = fc.getFacetResults();\n      \n      // complement with sampling!\n      final Sampler sampler = createSampler(docCollector.getScoredDocIDs());\n      \n      FacetSearchParams samplingSearchParams = searchParamsWithRequests(K, partitionSize); \n\n      assertSampling(expectedResults, q, sampler, samplingSearchParams, false);\n      assertSampling(expectedResults, q, sampler, samplingSearchParams, true);\n\n      closeAll();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"99b17503f4e360f8140fe80a593268486cd718b4","date":1318337685,"type":3,"author":"Doron Cohen","isMerge":false,"pathNew":"modules/facet/src/test/org/apache/lucene/facet/search/sampling/BaseSampleTestTopK#testCountUsingSamping().mjava","pathOld":"modules/facet/src/test/org/apache/lucene/facet/search/sampling/BaseSampleTestTopK#testCountUsingSamping().mjava","sourceNew":"  /**\n   * Try out faceted search with sampling enabled and complements either disabled or enforced\n   * Lots of randomly generated data is being indexed, and later on a \"90% docs\" faceted search\n   * is performed. The results are compared to non-sampled ones.\n   */\n  public void testCountUsingSamping() throws Exception, IOException {\n    boolean useRandomSampler = random.nextBoolean();\n    for (int partitionSize : partitionSizes) {\n      try {\n        initIndex(partitionSize);\n        // Get all of the documents and run the query, then do different\n        // facet counts and compare to control\n        Query q = new TermQuery(new Term(CONTENT_FIELD, BETA)); // 90% of the docs\n        ScoredDocIdCollector docCollector = ScoredDocIdCollector.create(searcher.maxDoc(), false);\n        \n        FacetSearchParams expectedSearchParams = searchParamsWithRequests(K, partitionSize); \n        FacetsCollector fc = new FacetsCollector(expectedSearchParams, indexReader, taxoReader);\n        \n        searcher.search(q, MultiCollector.wrap(docCollector, fc));\n        \n        List<FacetResult> expectedResults = fc.getFacetResults();\n        \n        FacetSearchParams samplingSearchParams = searchParamsWithRequests(K, partitionSize); \n        \n        // try several times in case of failure, because the test has a chance to fail \n        // if the top K facets are not sufficiently common with the sample set\n        for (int nTrial=0; nTrial<RETRIES; nTrial++) {\n          try {\n            // complement with sampling!\n            final Sampler sampler = createSampler(nTrial, docCollector.getScoredDocIDs(), useRandomSampler);\n            \n            assertSampling(expectedResults, q, sampler, samplingSearchParams, false);\n            assertSampling(expectedResults, q, sampler, samplingSearchParams, true);\n            \n            break; // succeeded\n          } catch (NotSameResultError e) {\n            if (nTrial>=RETRIES-1) {\n              throw e; // no more retries allowed, must fail\n            }\n          }\n        }\n      } finally { \n        closeAll();\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Try out faceted search with sampling enabled and complements either disabled or enforced\n   * Lots of randomly generated data is being indexed, and later on a \"90% docs\" faceted search\n   * is performed. The results are compared to non-sampled ones.\n   */\n  public void testCountUsingSamping() throws Exception, IOException {\n    for (int partitionSize : partitionSizes) {\n      initIndex(partitionSize);\n      \n      // Get all of the documents and run the query, then do different\n      // facet counts and compare to control\n      Query q = new TermQuery(new Term(CONTENT_FIELD, BETA)); // 90% of the docs\n      ScoredDocIdCollector docCollector = ScoredDocIdCollector.create(searcher.maxDoc(), false);\n      \n      FacetSearchParams expectedSearchParams = searchParamsWithRequests(K, partitionSize); \n      FacetsCollector fc = new FacetsCollector(expectedSearchParams, indexReader, taxoReader);\n      \n      searcher.search(q, MultiCollector.wrap(docCollector, fc));\n      \n      List<FacetResult> expectedResults = fc.getFacetResults();\n      \n      // complement with sampling!\n      final Sampler sampler = createSampler(docCollector.getScoredDocIDs());\n      \n      FacetSearchParams samplingSearchParams = searchParamsWithRequests(K, partitionSize); \n\n      assertSampling(expectedResults, q, sampler, samplingSearchParams, false);\n      assertSampling(expectedResults, q, sampler, samplingSearchParams, true);\n\n      closeAll();\n    }\n  }\n\n","bugFix":["7a4df66e06e0c3b520d7d5941e1c043076f06f17","89f15687f60bd49cd3d9de427e85c17fd9397d61","95535508327351a4c38a0dc7711075dfabe5941f"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f4c236b7b2d1cb61683f5ba02d09249fdb42a7fd","date":1320399315,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/facet/src/test/org/apache/lucene/facet/search/sampling/BaseSampleTestTopK#testCountUsingSamping().mjava","pathOld":"modules/facet/src/test/org/apache/lucene/facet/search/sampling/BaseSampleTestTopK#testCountUsingSamping().mjava","sourceNew":"  /**\n   * Try out faceted search with sampling enabled and complements either disabled or enforced\n   * Lots of randomly generated data is being indexed, and later on a \"90% docs\" faceted search\n   * is performed. The results are compared to non-sampled ones.\n   */\n  public void testCountUsingSamping() throws Exception, IOException {\n    boolean useRandomSampler = random.nextBoolean();\n    for (int partitionSize : partitionSizes) {\n      try {\n        initIndex(partitionSize);\n        // Get all of the documents and run the query, then do different\n        // facet counts and compare to control\n        Query q = new TermQuery(new Term(CONTENT_FIELD, BETA)); // 90% of the docs\n        ScoredDocIdCollector docCollector = ScoredDocIdCollector.create(indexReader.maxDoc(), false);\n        \n        FacetSearchParams expectedSearchParams = searchParamsWithRequests(K, partitionSize); \n        FacetsCollector fc = new FacetsCollector(expectedSearchParams, indexReader, taxoReader);\n        \n        searcher.search(q, MultiCollector.wrap(docCollector, fc));\n        \n        List<FacetResult> expectedResults = fc.getFacetResults();\n        \n        FacetSearchParams samplingSearchParams = searchParamsWithRequests(K, partitionSize); \n        \n        // try several times in case of failure, because the test has a chance to fail \n        // if the top K facets are not sufficiently common with the sample set\n        for (int nTrial=0; nTrial<RETRIES; nTrial++) {\n          try {\n            // complement with sampling!\n            final Sampler sampler = createSampler(nTrial, docCollector.getScoredDocIDs(), useRandomSampler);\n            \n            assertSampling(expectedResults, q, sampler, samplingSearchParams, false);\n            assertSampling(expectedResults, q, sampler, samplingSearchParams, true);\n            \n            break; // succeeded\n          } catch (NotSameResultError e) {\n            if (nTrial>=RETRIES-1) {\n              throw e; // no more retries allowed, must fail\n            }\n          }\n        }\n      } finally { \n        closeAll();\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Try out faceted search with sampling enabled and complements either disabled or enforced\n   * Lots of randomly generated data is being indexed, and later on a \"90% docs\" faceted search\n   * is performed. The results are compared to non-sampled ones.\n   */\n  public void testCountUsingSamping() throws Exception, IOException {\n    boolean useRandomSampler = random.nextBoolean();\n    for (int partitionSize : partitionSizes) {\n      try {\n        initIndex(partitionSize);\n        // Get all of the documents and run the query, then do different\n        // facet counts and compare to control\n        Query q = new TermQuery(new Term(CONTENT_FIELD, BETA)); // 90% of the docs\n        ScoredDocIdCollector docCollector = ScoredDocIdCollector.create(searcher.maxDoc(), false);\n        \n        FacetSearchParams expectedSearchParams = searchParamsWithRequests(K, partitionSize); \n        FacetsCollector fc = new FacetsCollector(expectedSearchParams, indexReader, taxoReader);\n        \n        searcher.search(q, MultiCollector.wrap(docCollector, fc));\n        \n        List<FacetResult> expectedResults = fc.getFacetResults();\n        \n        FacetSearchParams samplingSearchParams = searchParamsWithRequests(K, partitionSize); \n        \n        // try several times in case of failure, because the test has a chance to fail \n        // if the top K facets are not sufficiently common with the sample set\n        for (int nTrial=0; nTrial<RETRIES; nTrial++) {\n          try {\n            // complement with sampling!\n            final Sampler sampler = createSampler(nTrial, docCollector.getScoredDocIDs(), useRandomSampler);\n            \n            assertSampling(expectedResults, q, sampler, samplingSearchParams, false);\n            assertSampling(expectedResults, q, sampler, samplingSearchParams, true);\n            \n            break; // succeeded\n          } catch (NotSameResultError e) {\n            if (nTrial>=RETRIES-1) {\n              throw e; // no more retries allowed, must fail\n            }\n          }\n        }\n      } finally { \n        closeAll();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"modules/facet/src/test/org/apache/lucene/facet/search/sampling/BaseSampleTestTopK#testCountUsingSamping().mjava","pathOld":"modules/facet/src/test/org/apache/lucene/facet/search/sampling/BaseSampleTestTopK#testCountUsingSamping().mjava","sourceNew":"  /**\n   * Try out faceted search with sampling enabled and complements either disabled or enforced\n   * Lots of randomly generated data is being indexed, and later on a \"90% docs\" faceted search\n   * is performed. The results are compared to non-sampled ones.\n   */\n  public void testCountUsingSamping() throws Exception, IOException {\n    boolean useRandomSampler = random().nextBoolean();\n    for (int partitionSize : partitionSizes) {\n      try {\n        initIndex(partitionSize);\n        // Get all of the documents and run the query, then do different\n        // facet counts and compare to control\n        Query q = new TermQuery(new Term(CONTENT_FIELD, BETA)); // 90% of the docs\n        ScoredDocIdCollector docCollector = ScoredDocIdCollector.create(indexReader.maxDoc(), false);\n        \n        FacetSearchParams expectedSearchParams = searchParamsWithRequests(K, partitionSize); \n        FacetsCollector fc = new FacetsCollector(expectedSearchParams, indexReader, taxoReader);\n        \n        searcher.search(q, MultiCollector.wrap(docCollector, fc));\n        \n        List<FacetResult> expectedResults = fc.getFacetResults();\n        \n        FacetSearchParams samplingSearchParams = searchParamsWithRequests(K, partitionSize); \n        \n        // try several times in case of failure, because the test has a chance to fail \n        // if the top K facets are not sufficiently common with the sample set\n        for (int nTrial=0; nTrial<RETRIES; nTrial++) {\n          try {\n            // complement with sampling!\n            final Sampler sampler = createSampler(nTrial, docCollector.getScoredDocIDs(), useRandomSampler);\n            \n            assertSampling(expectedResults, q, sampler, samplingSearchParams, false);\n            assertSampling(expectedResults, q, sampler, samplingSearchParams, true);\n            \n            break; // succeeded\n          } catch (NotSameResultError e) {\n            if (nTrial>=RETRIES-1) {\n              throw e; // no more retries allowed, must fail\n            }\n          }\n        }\n      } finally { \n        closeAll();\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Try out faceted search with sampling enabled and complements either disabled or enforced\n   * Lots of randomly generated data is being indexed, and later on a \"90% docs\" faceted search\n   * is performed. The results are compared to non-sampled ones.\n   */\n  public void testCountUsingSamping() throws Exception, IOException {\n    boolean useRandomSampler = random.nextBoolean();\n    for (int partitionSize : partitionSizes) {\n      try {\n        initIndex(partitionSize);\n        // Get all of the documents and run the query, then do different\n        // facet counts and compare to control\n        Query q = new TermQuery(new Term(CONTENT_FIELD, BETA)); // 90% of the docs\n        ScoredDocIdCollector docCollector = ScoredDocIdCollector.create(indexReader.maxDoc(), false);\n        \n        FacetSearchParams expectedSearchParams = searchParamsWithRequests(K, partitionSize); \n        FacetsCollector fc = new FacetsCollector(expectedSearchParams, indexReader, taxoReader);\n        \n        searcher.search(q, MultiCollector.wrap(docCollector, fc));\n        \n        List<FacetResult> expectedResults = fc.getFacetResults();\n        \n        FacetSearchParams samplingSearchParams = searchParamsWithRequests(K, partitionSize); \n        \n        // try several times in case of failure, because the test has a chance to fail \n        // if the top K facets are not sufficiently common with the sample set\n        for (int nTrial=0; nTrial<RETRIES; nTrial++) {\n          try {\n            // complement with sampling!\n            final Sampler sampler = createSampler(nTrial, docCollector.getScoredDocIDs(), useRandomSampler);\n            \n            assertSampling(expectedResults, q, sampler, samplingSearchParams, false);\n            assertSampling(expectedResults, q, sampler, samplingSearchParams, true);\n            \n            break; // succeeded\n          } catch (NotSameResultError e) {\n            if (nTrial>=RETRIES-1) {\n              throw e; // no more retries allowed, must fail\n            }\n          }\n        }\n      } finally { \n        closeAll();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/sampling/BaseSampleTestTopK#testCountUsingSamping().mjava","pathOld":"modules/facet/src/test/org/apache/lucene/facet/search/sampling/BaseSampleTestTopK#testCountUsingSamping().mjava","sourceNew":"  /**\n   * Try out faceted search with sampling enabled and complements either disabled or enforced\n   * Lots of randomly generated data is being indexed, and later on a \"90% docs\" faceted search\n   * is performed. The results are compared to non-sampled ones.\n   */\n  public void testCountUsingSamping() throws Exception, IOException {\n    boolean useRandomSampler = random().nextBoolean();\n    for (int partitionSize : partitionSizes) {\n      try {\n        initIndex(partitionSize);\n        // Get all of the documents and run the query, then do different\n        // facet counts and compare to control\n        Query q = new TermQuery(new Term(CONTENT_FIELD, BETA)); // 90% of the docs\n        ScoredDocIdCollector docCollector = ScoredDocIdCollector.create(indexReader.maxDoc(), false);\n        \n        FacetSearchParams expectedSearchParams = searchParamsWithRequests(K, partitionSize); \n        FacetsCollector fc = new FacetsCollector(expectedSearchParams, indexReader, taxoReader);\n        \n        searcher.search(q, MultiCollector.wrap(docCollector, fc));\n        \n        List<FacetResult> expectedResults = fc.getFacetResults();\n        \n        FacetSearchParams samplingSearchParams = searchParamsWithRequests(K, partitionSize); \n        \n        // try several times in case of failure, because the test has a chance to fail \n        // if the top K facets are not sufficiently common with the sample set\n        for (int nTrial=0; nTrial<RETRIES; nTrial++) {\n          try {\n            // complement with sampling!\n            final Sampler sampler = createSampler(nTrial, docCollector.getScoredDocIDs(), useRandomSampler);\n            \n            assertSampling(expectedResults, q, sampler, samplingSearchParams, false);\n            assertSampling(expectedResults, q, sampler, samplingSearchParams, true);\n            \n            break; // succeeded\n          } catch (NotSameResultError e) {\n            if (nTrial>=RETRIES-1) {\n              throw e; // no more retries allowed, must fail\n            }\n          }\n        }\n      } finally { \n        closeAll();\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Try out faceted search with sampling enabled and complements either disabled or enforced\n   * Lots of randomly generated data is being indexed, and later on a \"90% docs\" faceted search\n   * is performed. The results are compared to non-sampled ones.\n   */\n  public void testCountUsingSamping() throws Exception, IOException {\n    boolean useRandomSampler = random().nextBoolean();\n    for (int partitionSize : partitionSizes) {\n      try {\n        initIndex(partitionSize);\n        // Get all of the documents and run the query, then do different\n        // facet counts and compare to control\n        Query q = new TermQuery(new Term(CONTENT_FIELD, BETA)); // 90% of the docs\n        ScoredDocIdCollector docCollector = ScoredDocIdCollector.create(indexReader.maxDoc(), false);\n        \n        FacetSearchParams expectedSearchParams = searchParamsWithRequests(K, partitionSize); \n        FacetsCollector fc = new FacetsCollector(expectedSearchParams, indexReader, taxoReader);\n        \n        searcher.search(q, MultiCollector.wrap(docCollector, fc));\n        \n        List<FacetResult> expectedResults = fc.getFacetResults();\n        \n        FacetSearchParams samplingSearchParams = searchParamsWithRequests(K, partitionSize); \n        \n        // try several times in case of failure, because the test has a chance to fail \n        // if the top K facets are not sufficiently common with the sample set\n        for (int nTrial=0; nTrial<RETRIES; nTrial++) {\n          try {\n            // complement with sampling!\n            final Sampler sampler = createSampler(nTrial, docCollector.getScoredDocIDs(), useRandomSampler);\n            \n            assertSampling(expectedResults, q, sampler, samplingSearchParams, false);\n            assertSampling(expectedResults, q, sampler, samplingSearchParams, true);\n            \n            break; // succeeded\n          } catch (NotSameResultError e) {\n            if (nTrial>=RETRIES-1) {\n              throw e; // no more retries allowed, must fail\n            }\n          }\n        }\n      } finally { \n        closeAll();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"95535508327351a4c38a0dc7711075dfabe5941f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"99b17503f4e360f8140fe80a593268486cd718b4":["95535508327351a4c38a0dc7711075dfabe5941f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["f4c236b7b2d1cb61683f5ba02d09249fdb42a7fd"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","95535508327351a4c38a0dc7711075dfabe5941f"],"f4c236b7b2d1cb61683f5ba02d09249fdb42a7fd":["99b17503f4e360f8140fe80a593268486cd718b4"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","95535508327351a4c38a0dc7711075dfabe5941f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"95535508327351a4c38a0dc7711075dfabe5941f":["99b17503f4e360f8140fe80a593268486cd718b4","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"99b17503f4e360f8140fe80a593268486cd718b4":["f4c236b7b2d1cb61683f5ba02d09249fdb42a7fd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["95535508327351a4c38a0dc7711075dfabe5941f","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"f4c236b7b2d1cb61683f5ba02d09249fdb42a7fd":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}