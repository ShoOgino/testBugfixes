{"path":"lucene/suggest/src/test/org/apache/lucene/search/suggest/TestTermFreqPayloadIterator#testTerms().mjava","commits":[{"id":"ada2f7352a7f964fe49bccd13227c4ec38563d39","date":1381659982,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/TestTermFreqPayloadIterator#testTerms().mjava","pathOld":"/dev/null","sourceNew":"  public void testTerms() throws Exception {\n    Random random = random();\n    int num = atLeast(10000);\n    \n    Comparator<BytesRef> comparator = random.nextBoolean() ? BytesRef.getUTF8SortedAsUnicodeComparator() : BytesRef.getUTF8SortedAsUTF16Comparator();\n    TreeMap<BytesRef, SimpleEntry<Long, BytesRef>> sorted = new TreeMap<>(comparator);\n    TreeMap<BytesRef, Long> sortedWithoutPayload = new TreeMap<>(comparator);\n    TermFreqPayload[] unsorted = new TermFreqPayload[num];\n    TermFreqPayload[] unsortedWithoutPayload = new TermFreqPayload[num];\n\n    for (int i = 0; i < num; i++) {\n      BytesRef key;\n      BytesRef payload;\n      do {\n        key = new BytesRef(_TestUtil.randomUnicodeString(random));\n        payload = new BytesRef(_TestUtil.randomUnicodeString(random));\n      } while (sorted.containsKey(key));\n      long value = random.nextLong();\n      sortedWithoutPayload.put(key, value);\n      sorted.put(key, new SimpleEntry<>(value, payload));\n      unsorted[i] = new TermFreqPayload(key, value, payload);\n      unsortedWithoutPayload[i] = new TermFreqPayload(key, value);\n    }\n    \n    // test the sorted iterator wrapper with payloads\n    TermFreqPayloadIterator wrapper = new SortedTermFreqPayloadIteratorWrapper(new TermFreqPayloadArrayIterator(unsorted), comparator);\n    Iterator<Map.Entry<BytesRef, SimpleEntry<Long, BytesRef>>> expected = sorted.entrySet().iterator();\n    while (expected.hasNext()) {\n      Map.Entry<BytesRef,SimpleEntry<Long, BytesRef>> entry = expected.next();\n      \n      assertEquals(entry.getKey(), wrapper.next());\n      assertEquals(entry.getValue().getKey().longValue(), wrapper.weight());\n      assertEquals(entry.getValue().getValue(), wrapper.payload());\n    }\n    assertNull(wrapper.next());\n    \n    // test the unsorted iterator wrapper with payloads\n    wrapper = new UnsortedTermFreqPayloadIteratorWrapper(new TermFreqPayloadArrayIterator(unsorted));\n    TreeMap<BytesRef, SimpleEntry<Long, BytesRef>> actual = new TreeMap<>();\n    BytesRef key;\n    while ((key = wrapper.next()) != null) {\n      long value = wrapper.weight();\n      BytesRef payload = wrapper.payload();\n      actual.put(BytesRef.deepCopyOf(key), new SimpleEntry<>(value, BytesRef.deepCopyOf(payload)));\n    }\n    assertEquals(sorted, actual);\n\n    // test the sorted iterator wrapper without payloads\n    TermFreqPayloadIterator wrapperWithoutPayload = new SortedTermFreqPayloadIteratorWrapper(new TermFreqPayloadArrayIterator(unsortedWithoutPayload), comparator);\n    Iterator<Map.Entry<BytesRef, Long>> expectedWithoutPayload = sortedWithoutPayload.entrySet().iterator();\n    while (expectedWithoutPayload.hasNext()) {\n      Map.Entry<BytesRef, Long> entry = expectedWithoutPayload.next();\n      \n      assertEquals(entry.getKey(), wrapperWithoutPayload.next());\n      assertEquals(entry.getValue().longValue(), wrapperWithoutPayload.weight());\n      assertNull(wrapperWithoutPayload.payload());\n    }\n    assertNull(wrapperWithoutPayload.next());\n    \n    // test the unsorted iterator wrapper without payloads\n    wrapperWithoutPayload = new UnsortedTermFreqPayloadIteratorWrapper(new TermFreqPayloadArrayIterator(unsortedWithoutPayload));\n    TreeMap<BytesRef, Long> actualWithoutPayload = new TreeMap<>();\n    while ((key = wrapperWithoutPayload.next()) != null) {\n      long value = wrapperWithoutPayload.weight();\n      assertNull(wrapperWithoutPayload.payload());\n      actualWithoutPayload.put(BytesRef.deepCopyOf(key), value);\n    }\n    assertEquals(sortedWithoutPayload, actualWithoutPayload);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"41aee74b5f91a096e3fd950f4a336bc763f0e7a7","date":1381772070,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/TestInputIterator#testTerms().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/TestTermFreqPayloadIterator#testTerms().mjava","sourceNew":"  public void testTerms() throws Exception {\n    Random random = random();\n    int num = atLeast(10000);\n    \n    Comparator<BytesRef> comparator = random.nextBoolean() ? BytesRef.getUTF8SortedAsUnicodeComparator() : BytesRef.getUTF8SortedAsUTF16Comparator();\n    TreeMap<BytesRef, SimpleEntry<Long, BytesRef>> sorted = new TreeMap<>(comparator);\n    TreeMap<BytesRef, Long> sortedWithoutPayload = new TreeMap<>(comparator);\n    Input[] unsorted = new Input[num];\n    Input[] unsortedWithoutPayload = new Input[num];\n\n    for (int i = 0; i < num; i++) {\n      BytesRef key;\n      BytesRef payload;\n      do {\n        key = new BytesRef(_TestUtil.randomUnicodeString(random));\n        payload = new BytesRef(_TestUtil.randomUnicodeString(random));\n      } while (sorted.containsKey(key));\n      long value = random.nextLong();\n      sortedWithoutPayload.put(key, value);\n      sorted.put(key, new SimpleEntry<>(value, payload));\n      unsorted[i] = new Input(key, value, payload);\n      unsortedWithoutPayload[i] = new Input(key, value);\n    }\n    \n    // test the sorted iterator wrapper with payloads\n    InputIterator wrapper = new SortedInputIterator(new InputArrayIterator(unsorted), comparator);\n    Iterator<Map.Entry<BytesRef, SimpleEntry<Long, BytesRef>>> expected = sorted.entrySet().iterator();\n    while (expected.hasNext()) {\n      Map.Entry<BytesRef,SimpleEntry<Long, BytesRef>> entry = expected.next();\n      \n      assertEquals(entry.getKey(), wrapper.next());\n      assertEquals(entry.getValue().getKey().longValue(), wrapper.weight());\n      assertEquals(entry.getValue().getValue(), wrapper.payload());\n    }\n    assertNull(wrapper.next());\n    \n    // test the unsorted iterator wrapper with payloads\n    wrapper = new UnsortedInputIterator(new InputArrayIterator(unsorted));\n    TreeMap<BytesRef, SimpleEntry<Long, BytesRef>> actual = new TreeMap<>();\n    BytesRef key;\n    while ((key = wrapper.next()) != null) {\n      long value = wrapper.weight();\n      BytesRef payload = wrapper.payload();\n      actual.put(BytesRef.deepCopyOf(key), new SimpleEntry<>(value, BytesRef.deepCopyOf(payload)));\n    }\n    assertEquals(sorted, actual);\n\n    // test the sorted iterator wrapper without payloads\n    InputIterator wrapperWithoutPayload = new SortedInputIterator(new InputArrayIterator(unsortedWithoutPayload), comparator);\n    Iterator<Map.Entry<BytesRef, Long>> expectedWithoutPayload = sortedWithoutPayload.entrySet().iterator();\n    while (expectedWithoutPayload.hasNext()) {\n      Map.Entry<BytesRef, Long> entry = expectedWithoutPayload.next();\n      \n      assertEquals(entry.getKey(), wrapperWithoutPayload.next());\n      assertEquals(entry.getValue().longValue(), wrapperWithoutPayload.weight());\n      assertNull(wrapperWithoutPayload.payload());\n    }\n    assertNull(wrapperWithoutPayload.next());\n    \n    // test the unsorted iterator wrapper without payloads\n    wrapperWithoutPayload = new UnsortedInputIterator(new InputArrayIterator(unsortedWithoutPayload));\n    TreeMap<BytesRef, Long> actualWithoutPayload = new TreeMap<>();\n    while ((key = wrapperWithoutPayload.next()) != null) {\n      long value = wrapperWithoutPayload.weight();\n      assertNull(wrapperWithoutPayload.payload());\n      actualWithoutPayload.put(BytesRef.deepCopyOf(key), value);\n    }\n    assertEquals(sortedWithoutPayload, actualWithoutPayload);\n  }\n\n","sourceOld":"  public void testTerms() throws Exception {\n    Random random = random();\n    int num = atLeast(10000);\n    \n    Comparator<BytesRef> comparator = random.nextBoolean() ? BytesRef.getUTF8SortedAsUnicodeComparator() : BytesRef.getUTF8SortedAsUTF16Comparator();\n    TreeMap<BytesRef, SimpleEntry<Long, BytesRef>> sorted = new TreeMap<>(comparator);\n    TreeMap<BytesRef, Long> sortedWithoutPayload = new TreeMap<>(comparator);\n    TermFreqPayload[] unsorted = new TermFreqPayload[num];\n    TermFreqPayload[] unsortedWithoutPayload = new TermFreqPayload[num];\n\n    for (int i = 0; i < num; i++) {\n      BytesRef key;\n      BytesRef payload;\n      do {\n        key = new BytesRef(_TestUtil.randomUnicodeString(random));\n        payload = new BytesRef(_TestUtil.randomUnicodeString(random));\n      } while (sorted.containsKey(key));\n      long value = random.nextLong();\n      sortedWithoutPayload.put(key, value);\n      sorted.put(key, new SimpleEntry<>(value, payload));\n      unsorted[i] = new TermFreqPayload(key, value, payload);\n      unsortedWithoutPayload[i] = new TermFreqPayload(key, value);\n    }\n    \n    // test the sorted iterator wrapper with payloads\n    TermFreqPayloadIterator wrapper = new SortedTermFreqPayloadIteratorWrapper(new TermFreqPayloadArrayIterator(unsorted), comparator);\n    Iterator<Map.Entry<BytesRef, SimpleEntry<Long, BytesRef>>> expected = sorted.entrySet().iterator();\n    while (expected.hasNext()) {\n      Map.Entry<BytesRef,SimpleEntry<Long, BytesRef>> entry = expected.next();\n      \n      assertEquals(entry.getKey(), wrapper.next());\n      assertEquals(entry.getValue().getKey().longValue(), wrapper.weight());\n      assertEquals(entry.getValue().getValue(), wrapper.payload());\n    }\n    assertNull(wrapper.next());\n    \n    // test the unsorted iterator wrapper with payloads\n    wrapper = new UnsortedTermFreqPayloadIteratorWrapper(new TermFreqPayloadArrayIterator(unsorted));\n    TreeMap<BytesRef, SimpleEntry<Long, BytesRef>> actual = new TreeMap<>();\n    BytesRef key;\n    while ((key = wrapper.next()) != null) {\n      long value = wrapper.weight();\n      BytesRef payload = wrapper.payload();\n      actual.put(BytesRef.deepCopyOf(key), new SimpleEntry<>(value, BytesRef.deepCopyOf(payload)));\n    }\n    assertEquals(sorted, actual);\n\n    // test the sorted iterator wrapper without payloads\n    TermFreqPayloadIterator wrapperWithoutPayload = new SortedTermFreqPayloadIteratorWrapper(new TermFreqPayloadArrayIterator(unsortedWithoutPayload), comparator);\n    Iterator<Map.Entry<BytesRef, Long>> expectedWithoutPayload = sortedWithoutPayload.entrySet().iterator();\n    while (expectedWithoutPayload.hasNext()) {\n      Map.Entry<BytesRef, Long> entry = expectedWithoutPayload.next();\n      \n      assertEquals(entry.getKey(), wrapperWithoutPayload.next());\n      assertEquals(entry.getValue().longValue(), wrapperWithoutPayload.weight());\n      assertNull(wrapperWithoutPayload.payload());\n    }\n    assertNull(wrapperWithoutPayload.next());\n    \n    // test the unsorted iterator wrapper without payloads\n    wrapperWithoutPayload = new UnsortedTermFreqPayloadIteratorWrapper(new TermFreqPayloadArrayIterator(unsortedWithoutPayload));\n    TreeMap<BytesRef, Long> actualWithoutPayload = new TreeMap<>();\n    while ((key = wrapperWithoutPayload.next()) != null) {\n      long value = wrapperWithoutPayload.weight();\n      assertNull(wrapperWithoutPayload.payload());\n      actualWithoutPayload.put(BytesRef.deepCopyOf(key), value);\n    }\n    assertEquals(sortedWithoutPayload, actualWithoutPayload);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"41aee74b5f91a096e3fd950f4a336bc763f0e7a7":["ada2f7352a7f964fe49bccd13227c4ec38563d39"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["41aee74b5f91a096e3fd950f4a336bc763f0e7a7"],"ada2f7352a7f964fe49bccd13227c4ec38563d39":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"41aee74b5f91a096e3fd950f4a336bc763f0e7a7":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ada2f7352a7f964fe49bccd13227c4ec38563d39"],"ada2f7352a7f964fe49bccd13227c4ec38563d39":["41aee74b5f91a096e3fd950f4a336bc763f0e7a7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}