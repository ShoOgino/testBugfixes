{"path":"solr/core/src/java/org/apache/solr/cloud/autoscaling/IndexSizeTrigger#configure(SolrResourceLoader,SolrCloudManager,Map[String,Object]).mjava","commits":[{"id":"ce71a9836bf1eba34a0ab31884e9eb8ad3f1cef1","date":1523453934,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/IndexSizeTrigger#configure(SolrResourceLoader,SolrCloudManager,Map[String,Object]).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void configure(SolrResourceLoader loader, SolrCloudManager cloudManager, Map<String, Object> properties) throws TriggerValidationException {\n    super.configure(loader, cloudManager, properties);\n    String aboveStr = String.valueOf(properties.getOrDefault(ABOVE_BYTES_PROP, Long.MAX_VALUE));\n    String belowStr = String.valueOf(properties.getOrDefault(BELOW_BYTES_PROP, -1));\n    try {\n      aboveBytes = Long.parseLong(aboveStr);\n      if (aboveBytes <= 0) {\n        throw new Exception(\"value must be > 0\");\n      }\n    } catch (Exception e) {\n      throw new TriggerValidationException(getName(), ABOVE_BYTES_PROP, \"invalid value '\" + aboveStr + \"': \" + e.toString());\n    }\n    try {\n      belowBytes = Long.parseLong(belowStr);\n      if (belowBytes < 0) {\n        belowBytes = -1;\n      }\n    } catch (Exception e) {\n      throw new TriggerValidationException(getName(), BELOW_BYTES_PROP, \"invalid value '\" + belowStr + \"': \" + e.toString());\n    }\n    // below must be at least 2x smaller than above, otherwise splitting a shard\n    // would immediately put the shard below the threshold and cause the mergeshards action\n    if (belowBytes > 0 && (belowBytes * 2 > aboveBytes)) {\n      throw new TriggerValidationException(getName(), BELOW_BYTES_PROP,\n          \"invalid value \" + belowBytes + \", should be less than half of '\" + ABOVE_BYTES_PROP + \"' value, which is \" + aboveBytes);\n    }\n    // do the same for docs bounds\n    aboveStr = String.valueOf(properties.getOrDefault(ABOVE_DOCS_PROP, Long.MAX_VALUE));\n    belowStr = String.valueOf(properties.getOrDefault(BELOW_DOCS_PROP, -1));\n    try {\n      aboveDocs = Long.parseLong(aboveStr);\n      if (aboveDocs <= 0) {\n        throw new Exception(\"value must be > 0\");\n      }\n    } catch (Exception e) {\n      throw new TriggerValidationException(getName(), ABOVE_DOCS_PROP, \"invalid value '\" + aboveStr + \"': \" + e.toString());\n    }\n    try {\n      belowDocs = Long.parseLong(belowStr);\n      if (belowDocs < 0) {\n        belowDocs = -1;\n      }\n    } catch (Exception e) {\n      throw new TriggerValidationException(getName(), BELOW_DOCS_PROP, \"invalid value '\" + belowStr + \"': \" + e.toString());\n    }\n    // below must be at least 2x smaller than above, otherwise splitting a shard\n    // would immediately put the shard below the threshold and cause the mergeshards action\n    if (belowDocs > 0 && (belowDocs * 2 > aboveDocs)) {\n      throw new TriggerValidationException(getName(), BELOW_DOCS_PROP,\n          \"invalid value \" + belowDocs + \", should be less than half of '\" + ABOVE_DOCS_PROP + \"' value, which is \" + aboveDocs);\n    }\n\n    String collectionsString = (String) properties.get(COLLECTIONS_PROP);\n    if (collectionsString != null && !collectionsString.isEmpty()) {\n      collections.addAll(StrUtils.splitSmart(collectionsString, ','));\n    }\n    String aboveOpStr = String.valueOf(properties.getOrDefault(ABOVE_OP_PROP, CollectionParams.CollectionAction.SPLITSHARD.toLower()));\n    // TODO: this is a placeholder until SOLR-9407 is implemented\n    String belowOpStr = String.valueOf(properties.getOrDefault(BELOW_OP_PROP, CollectionParams.CollectionAction.MERGESHARDS.toLower()));\n    aboveOp = CollectionParams.CollectionAction.get(aboveOpStr);\n    if (aboveOp == null) {\n      throw new TriggerValidationException(getName(), ABOVE_OP_PROP, \"unrecognized value of \" + ABOVE_OP_PROP + \": '\" + aboveOpStr + \"'\");\n    }\n    belowOp = CollectionParams.CollectionAction.get(belowOpStr);\n    if (belowOp == null) {\n      throw new TriggerValidationException(getName(), BELOW_OP_PROP, \"unrecognized value of \" + BELOW_OP_PROP + \": '\" + belowOpStr + \"'\");\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43345f1452f9510f8aaadae6156fe0c834e7d957","date":1523483670,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/IndexSizeTrigger#configure(SolrResourceLoader,SolrCloudManager,Map[String,Object]).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void configure(SolrResourceLoader loader, SolrCloudManager cloudManager, Map<String, Object> properties) throws TriggerValidationException {\n    super.configure(loader, cloudManager, properties);\n    String aboveStr = String.valueOf(properties.getOrDefault(ABOVE_BYTES_PROP, Long.MAX_VALUE));\n    String belowStr = String.valueOf(properties.getOrDefault(BELOW_BYTES_PROP, -1));\n    try {\n      aboveBytes = Long.parseLong(aboveStr);\n      if (aboveBytes <= 0) {\n        throw new Exception(\"value must be > 0\");\n      }\n    } catch (Exception e) {\n      throw new TriggerValidationException(getName(), ABOVE_BYTES_PROP, \"invalid value '\" + aboveStr + \"': \" + e.toString());\n    }\n    try {\n      belowBytes = Long.parseLong(belowStr);\n      if (belowBytes < 0) {\n        belowBytes = -1;\n      }\n    } catch (Exception e) {\n      throw new TriggerValidationException(getName(), BELOW_BYTES_PROP, \"invalid value '\" + belowStr + \"': \" + e.toString());\n    }\n    // below must be at least 2x smaller than above, otherwise splitting a shard\n    // would immediately put the shard below the threshold and cause the mergeshards action\n    if (belowBytes > 0 && (belowBytes * 2 > aboveBytes)) {\n      throw new TriggerValidationException(getName(), BELOW_BYTES_PROP,\n          \"invalid value \" + belowBytes + \", should be less than half of '\" + ABOVE_BYTES_PROP + \"' value, which is \" + aboveBytes);\n    }\n    // do the same for docs bounds\n    aboveStr = String.valueOf(properties.getOrDefault(ABOVE_DOCS_PROP, Long.MAX_VALUE));\n    belowStr = String.valueOf(properties.getOrDefault(BELOW_DOCS_PROP, -1));\n    try {\n      aboveDocs = Long.parseLong(aboveStr);\n      if (aboveDocs <= 0) {\n        throw new Exception(\"value must be > 0\");\n      }\n    } catch (Exception e) {\n      throw new TriggerValidationException(getName(), ABOVE_DOCS_PROP, \"invalid value '\" + aboveStr + \"': \" + e.toString());\n    }\n    try {\n      belowDocs = Long.parseLong(belowStr);\n      if (belowDocs < 0) {\n        belowDocs = -1;\n      }\n    } catch (Exception e) {\n      throw new TriggerValidationException(getName(), BELOW_DOCS_PROP, \"invalid value '\" + belowStr + \"': \" + e.toString());\n    }\n    // below must be at least 2x smaller than above, otherwise splitting a shard\n    // would immediately put the shard below the threshold and cause the mergeshards action\n    if (belowDocs > 0 && (belowDocs * 2 > aboveDocs)) {\n      throw new TriggerValidationException(getName(), BELOW_DOCS_PROP,\n          \"invalid value \" + belowDocs + \", should be less than half of '\" + ABOVE_DOCS_PROP + \"' value, which is \" + aboveDocs);\n    }\n\n    String collectionsString = (String) properties.get(COLLECTIONS_PROP);\n    if (collectionsString != null && !collectionsString.isEmpty()) {\n      collections.addAll(StrUtils.splitSmart(collectionsString, ','));\n    }\n    String aboveOpStr = String.valueOf(properties.getOrDefault(ABOVE_OP_PROP, CollectionParams.CollectionAction.SPLITSHARD.toLower()));\n    // TODO: this is a placeholder until SOLR-9407 is implemented\n    String belowOpStr = String.valueOf(properties.getOrDefault(BELOW_OP_PROP, CollectionParams.CollectionAction.MERGESHARDS.toLower()));\n    aboveOp = CollectionParams.CollectionAction.get(aboveOpStr);\n    if (aboveOp == null) {\n      throw new TriggerValidationException(getName(), ABOVE_OP_PROP, \"unrecognized value of \" + ABOVE_OP_PROP + \": '\" + aboveOpStr + \"'\");\n    }\n    belowOp = CollectionParams.CollectionAction.get(belowOpStr);\n    if (belowOp == null) {\n      throw new TriggerValidationException(getName(), BELOW_OP_PROP, \"unrecognized value of \" + BELOW_OP_PROP + \": '\" + belowOpStr + \"'\");\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0b90ab8b228b1f7a05d5ddfbe879ce962d8964a","date":1524514741,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/IndexSizeTrigger#configure(SolrResourceLoader,SolrCloudManager,Map[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/IndexSizeTrigger#configure(SolrResourceLoader,SolrCloudManager,Map[String,Object]).mjava","sourceNew":"  @Override\n  public void configure(SolrResourceLoader loader, SolrCloudManager cloudManager, Map<String, Object> properties) throws TriggerValidationException {\n    super.configure(loader, cloudManager, properties);\n    String aboveStr = String.valueOf(properties.getOrDefault(ABOVE_BYTES_PROP, Long.MAX_VALUE));\n    String belowStr = String.valueOf(properties.getOrDefault(BELOW_BYTES_PROP, -1));\n    try {\n      aboveBytes = Long.parseLong(aboveStr);\n      if (aboveBytes <= 0) {\n        throw new Exception(\"value must be > 0\");\n      }\n    } catch (Exception e) {\n      throw new TriggerValidationException(getName(), ABOVE_BYTES_PROP, \"invalid value '\" + aboveStr + \"': \" + e.toString());\n    }\n    try {\n      belowBytes = Long.parseLong(belowStr);\n      if (belowBytes < 0) {\n        belowBytes = -1;\n      }\n    } catch (Exception e) {\n      throw new TriggerValidationException(getName(), BELOW_BYTES_PROP, \"invalid value '\" + belowStr + \"': \" + e.toString());\n    }\n    // below must be at least 2x smaller than above, otherwise splitting a shard\n    // would immediately put the shard below the threshold and cause the mergeshards action\n    if (belowBytes > 0 && (belowBytes * 2 > aboveBytes)) {\n      throw new TriggerValidationException(getName(), BELOW_BYTES_PROP,\n          \"invalid value \" + belowBytes + \", should be less than half of '\" + ABOVE_BYTES_PROP + \"' value, which is \" + aboveBytes);\n    }\n    // do the same for docs bounds\n    aboveStr = String.valueOf(properties.getOrDefault(ABOVE_DOCS_PROP, Long.MAX_VALUE));\n    belowStr = String.valueOf(properties.getOrDefault(BELOW_DOCS_PROP, -1));\n    try {\n      aboveDocs = Long.parseLong(aboveStr);\n      if (aboveDocs <= 0) {\n        throw new Exception(\"value must be > 0\");\n      }\n    } catch (Exception e) {\n      throw new TriggerValidationException(getName(), ABOVE_DOCS_PROP, \"invalid value '\" + aboveStr + \"': \" + e.toString());\n    }\n    try {\n      belowDocs = Long.parseLong(belowStr);\n      if (belowDocs < 0) {\n        belowDocs = -1;\n      }\n    } catch (Exception e) {\n      throw new TriggerValidationException(getName(), BELOW_DOCS_PROP, \"invalid value '\" + belowStr + \"': \" + e.toString());\n    }\n    // below must be at least 2x smaller than above, otherwise splitting a shard\n    // would immediately put the shard below the threshold and cause the mergeshards action\n    if (belowDocs > 0 && (belowDocs * 2 > aboveDocs)) {\n      throw new TriggerValidationException(getName(), BELOW_DOCS_PROP,\n          \"invalid value \" + belowDocs + \", should be less than half of '\" + ABOVE_DOCS_PROP + \"' value, which is \" + aboveDocs);\n    }\n\n    String collectionsString = (String) properties.get(COLLECTIONS_PROP);\n    if (collectionsString != null && !collectionsString.isEmpty()) {\n      collections.addAll(StrUtils.splitSmart(collectionsString, ','));\n    }\n    String aboveOpStr = String.valueOf(properties.getOrDefault(ABOVE_OP_PROP, CollectionParams.CollectionAction.SPLITSHARD.toLower()));\n    // TODO: this is a placeholder until SOLR-9407 is implemented\n    String belowOpStr = String.valueOf(properties.getOrDefault(BELOW_OP_PROP, CollectionParams.CollectionAction.MERGESHARDS.toLower()));\n    aboveOp = CollectionParams.CollectionAction.get(aboveOpStr);\n    if (aboveOp == null) {\n      throw new TriggerValidationException(getName(), ABOVE_OP_PROP, \"unrecognized value of: '\" + aboveOpStr + \"'\");\n    }\n    belowOp = CollectionParams.CollectionAction.get(belowOpStr);\n    if (belowOp == null) {\n      throw new TriggerValidationException(getName(), BELOW_OP_PROP, \"unrecognized value of: '\" + belowOpStr + \"'\");\n    }\n  }\n\n","sourceOld":"  @Override\n  public void configure(SolrResourceLoader loader, SolrCloudManager cloudManager, Map<String, Object> properties) throws TriggerValidationException {\n    super.configure(loader, cloudManager, properties);\n    String aboveStr = String.valueOf(properties.getOrDefault(ABOVE_BYTES_PROP, Long.MAX_VALUE));\n    String belowStr = String.valueOf(properties.getOrDefault(BELOW_BYTES_PROP, -1));\n    try {\n      aboveBytes = Long.parseLong(aboveStr);\n      if (aboveBytes <= 0) {\n        throw new Exception(\"value must be > 0\");\n      }\n    } catch (Exception e) {\n      throw new TriggerValidationException(getName(), ABOVE_BYTES_PROP, \"invalid value '\" + aboveStr + \"': \" + e.toString());\n    }\n    try {\n      belowBytes = Long.parseLong(belowStr);\n      if (belowBytes < 0) {\n        belowBytes = -1;\n      }\n    } catch (Exception e) {\n      throw new TriggerValidationException(getName(), BELOW_BYTES_PROP, \"invalid value '\" + belowStr + \"': \" + e.toString());\n    }\n    // below must be at least 2x smaller than above, otherwise splitting a shard\n    // would immediately put the shard below the threshold and cause the mergeshards action\n    if (belowBytes > 0 && (belowBytes * 2 > aboveBytes)) {\n      throw new TriggerValidationException(getName(), BELOW_BYTES_PROP,\n          \"invalid value \" + belowBytes + \", should be less than half of '\" + ABOVE_BYTES_PROP + \"' value, which is \" + aboveBytes);\n    }\n    // do the same for docs bounds\n    aboveStr = String.valueOf(properties.getOrDefault(ABOVE_DOCS_PROP, Long.MAX_VALUE));\n    belowStr = String.valueOf(properties.getOrDefault(BELOW_DOCS_PROP, -1));\n    try {\n      aboveDocs = Long.parseLong(aboveStr);\n      if (aboveDocs <= 0) {\n        throw new Exception(\"value must be > 0\");\n      }\n    } catch (Exception e) {\n      throw new TriggerValidationException(getName(), ABOVE_DOCS_PROP, \"invalid value '\" + aboveStr + \"': \" + e.toString());\n    }\n    try {\n      belowDocs = Long.parseLong(belowStr);\n      if (belowDocs < 0) {\n        belowDocs = -1;\n      }\n    } catch (Exception e) {\n      throw new TriggerValidationException(getName(), BELOW_DOCS_PROP, \"invalid value '\" + belowStr + \"': \" + e.toString());\n    }\n    // below must be at least 2x smaller than above, otherwise splitting a shard\n    // would immediately put the shard below the threshold and cause the mergeshards action\n    if (belowDocs > 0 && (belowDocs * 2 > aboveDocs)) {\n      throw new TriggerValidationException(getName(), BELOW_DOCS_PROP,\n          \"invalid value \" + belowDocs + \", should be less than half of '\" + ABOVE_DOCS_PROP + \"' value, which is \" + aboveDocs);\n    }\n\n    String collectionsString = (String) properties.get(COLLECTIONS_PROP);\n    if (collectionsString != null && !collectionsString.isEmpty()) {\n      collections.addAll(StrUtils.splitSmart(collectionsString, ','));\n    }\n    String aboveOpStr = String.valueOf(properties.getOrDefault(ABOVE_OP_PROP, CollectionParams.CollectionAction.SPLITSHARD.toLower()));\n    // TODO: this is a placeholder until SOLR-9407 is implemented\n    String belowOpStr = String.valueOf(properties.getOrDefault(BELOW_OP_PROP, CollectionParams.CollectionAction.MERGESHARDS.toLower()));\n    aboveOp = CollectionParams.CollectionAction.get(aboveOpStr);\n    if (aboveOp == null) {\n      throw new TriggerValidationException(getName(), ABOVE_OP_PROP, \"unrecognized value of \" + ABOVE_OP_PROP + \": '\" + aboveOpStr + \"'\");\n    }\n    belowOp = CollectionParams.CollectionAction.get(belowOpStr);\n    if (belowOp == null) {\n      throw new TriggerValidationException(getName(), BELOW_OP_PROP, \"unrecognized value of \" + BELOW_OP_PROP + \": '\" + belowOpStr + \"'\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9414d03a96422f6a92ced130e94f73f3fe1fc9a3","date":1538650105,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/IndexSizeTrigger#configure(SolrResourceLoader,SolrCloudManager,Map[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/IndexSizeTrigger#configure(SolrResourceLoader,SolrCloudManager,Map[String,Object]).mjava","sourceNew":"  @Override\n  public void configure(SolrResourceLoader loader, SolrCloudManager cloudManager, Map<String, Object> properties) throws TriggerValidationException {\n    super.configure(loader, cloudManager, properties);\n    String aboveStr = String.valueOf(properties.getOrDefault(ABOVE_BYTES_PROP, Long.MAX_VALUE));\n    String belowStr = String.valueOf(properties.getOrDefault(BELOW_BYTES_PROP, -1));\n    try {\n      aboveBytes = Long.parseLong(aboveStr);\n      if (aboveBytes <= 0) {\n        throw new Exception(\"value must be > 0\");\n      }\n    } catch (Exception e) {\n      throw new TriggerValidationException(getName(), ABOVE_BYTES_PROP, \"invalid value '\" + aboveStr + \"': \" + e.toString());\n    }\n    try {\n      belowBytes = Long.parseLong(belowStr);\n      if (belowBytes < 0) {\n        belowBytes = -1;\n      }\n    } catch (Exception e) {\n      throw new TriggerValidationException(getName(), BELOW_BYTES_PROP, \"invalid value '\" + belowStr + \"': \" + e.toString());\n    }\n    // below must be at least 2x smaller than above, otherwise splitting a shard\n    // would immediately put the shard below the threshold and cause the mergeshards action\n    if (belowBytes > 0 && (belowBytes * 2 > aboveBytes)) {\n      throw new TriggerValidationException(getName(), BELOW_BYTES_PROP,\n          \"invalid value \" + belowBytes + \", should be less than half of '\" + ABOVE_BYTES_PROP + \"' value, which is \" + aboveBytes);\n    }\n    // do the same for docs bounds\n    aboveStr = String.valueOf(properties.getOrDefault(ABOVE_DOCS_PROP, Long.MAX_VALUE));\n    belowStr = String.valueOf(properties.getOrDefault(BELOW_DOCS_PROP, -1));\n    try {\n      aboveDocs = Long.parseLong(aboveStr);\n      if (aboveDocs <= 0) {\n        throw new Exception(\"value must be > 0\");\n      }\n    } catch (Exception e) {\n      throw new TriggerValidationException(getName(), ABOVE_DOCS_PROP, \"invalid value '\" + aboveStr + \"': \" + e.toString());\n    }\n    try {\n      belowDocs = Long.parseLong(belowStr);\n      if (belowDocs < 0) {\n        belowDocs = -1;\n      }\n    } catch (Exception e) {\n      throw new TriggerValidationException(getName(), BELOW_DOCS_PROP, \"invalid value '\" + belowStr + \"': \" + e.toString());\n    }\n    // below must be at least 2x smaller than above, otherwise splitting a shard\n    // would immediately put the shard below the threshold and cause the mergeshards action\n    if (belowDocs > 0 && (belowDocs * 2 > aboveDocs)) {\n      throw new TriggerValidationException(getName(), BELOW_DOCS_PROP,\n          \"invalid value \" + belowDocs + \", should be less than half of '\" + ABOVE_DOCS_PROP + \"' value, which is \" + aboveDocs);\n    }\n\n    String collectionsString = (String) properties.get(COLLECTIONS_PROP);\n    if (collectionsString != null && !collectionsString.isEmpty()) {\n      collections.addAll(StrUtils.splitSmart(collectionsString, ','));\n    }\n    String aboveOpStr = String.valueOf(properties.getOrDefault(ABOVE_OP_PROP, CollectionParams.CollectionAction.SPLITSHARD.toLower()));\n    // TODO: this is a placeholder until SOLR-9407 is implemented\n    String belowOpStr = String.valueOf(properties.getOrDefault(BELOW_OP_PROP, CollectionParams.CollectionAction.MERGESHARDS.toLower()));\n    aboveOp = CollectionParams.CollectionAction.get(aboveOpStr);\n    if (aboveOp == null) {\n      throw new TriggerValidationException(getName(), ABOVE_OP_PROP, \"unrecognized value of: '\" + aboveOpStr + \"'\");\n    }\n    belowOp = CollectionParams.CollectionAction.get(belowOpStr);\n    if (belowOp == null) {\n      throw new TriggerValidationException(getName(), BELOW_OP_PROP, \"unrecognized value of: '\" + belowOpStr + \"'\");\n    }\n    String maxOpsStr = String.valueOf(properties.getOrDefault(MAX_OPS_PROP, DEFAULT_MAX_OPS));\n    try {\n      maxOps = Integer.parseInt(maxOpsStr);\n      if (maxOps < 1) {\n        throw new Exception(\"must be > 1\");\n      }\n    } catch (Exception e) {\n      throw new TriggerValidationException(getName(), MAX_OPS_PROP, \"invalid value: '\" + maxOpsStr + \"': \" + e.getMessage());\n    }\n  }\n\n","sourceOld":"  @Override\n  public void configure(SolrResourceLoader loader, SolrCloudManager cloudManager, Map<String, Object> properties) throws TriggerValidationException {\n    super.configure(loader, cloudManager, properties);\n    String aboveStr = String.valueOf(properties.getOrDefault(ABOVE_BYTES_PROP, Long.MAX_VALUE));\n    String belowStr = String.valueOf(properties.getOrDefault(BELOW_BYTES_PROP, -1));\n    try {\n      aboveBytes = Long.parseLong(aboveStr);\n      if (aboveBytes <= 0) {\n        throw new Exception(\"value must be > 0\");\n      }\n    } catch (Exception e) {\n      throw new TriggerValidationException(getName(), ABOVE_BYTES_PROP, \"invalid value '\" + aboveStr + \"': \" + e.toString());\n    }\n    try {\n      belowBytes = Long.parseLong(belowStr);\n      if (belowBytes < 0) {\n        belowBytes = -1;\n      }\n    } catch (Exception e) {\n      throw new TriggerValidationException(getName(), BELOW_BYTES_PROP, \"invalid value '\" + belowStr + \"': \" + e.toString());\n    }\n    // below must be at least 2x smaller than above, otherwise splitting a shard\n    // would immediately put the shard below the threshold and cause the mergeshards action\n    if (belowBytes > 0 && (belowBytes * 2 > aboveBytes)) {\n      throw new TriggerValidationException(getName(), BELOW_BYTES_PROP,\n          \"invalid value \" + belowBytes + \", should be less than half of '\" + ABOVE_BYTES_PROP + \"' value, which is \" + aboveBytes);\n    }\n    // do the same for docs bounds\n    aboveStr = String.valueOf(properties.getOrDefault(ABOVE_DOCS_PROP, Long.MAX_VALUE));\n    belowStr = String.valueOf(properties.getOrDefault(BELOW_DOCS_PROP, -1));\n    try {\n      aboveDocs = Long.parseLong(aboveStr);\n      if (aboveDocs <= 0) {\n        throw new Exception(\"value must be > 0\");\n      }\n    } catch (Exception e) {\n      throw new TriggerValidationException(getName(), ABOVE_DOCS_PROP, \"invalid value '\" + aboveStr + \"': \" + e.toString());\n    }\n    try {\n      belowDocs = Long.parseLong(belowStr);\n      if (belowDocs < 0) {\n        belowDocs = -1;\n      }\n    } catch (Exception e) {\n      throw new TriggerValidationException(getName(), BELOW_DOCS_PROP, \"invalid value '\" + belowStr + \"': \" + e.toString());\n    }\n    // below must be at least 2x smaller than above, otherwise splitting a shard\n    // would immediately put the shard below the threshold and cause the mergeshards action\n    if (belowDocs > 0 && (belowDocs * 2 > aboveDocs)) {\n      throw new TriggerValidationException(getName(), BELOW_DOCS_PROP,\n          \"invalid value \" + belowDocs + \", should be less than half of '\" + ABOVE_DOCS_PROP + \"' value, which is \" + aboveDocs);\n    }\n\n    String collectionsString = (String) properties.get(COLLECTIONS_PROP);\n    if (collectionsString != null && !collectionsString.isEmpty()) {\n      collections.addAll(StrUtils.splitSmart(collectionsString, ','));\n    }\n    String aboveOpStr = String.valueOf(properties.getOrDefault(ABOVE_OP_PROP, CollectionParams.CollectionAction.SPLITSHARD.toLower()));\n    // TODO: this is a placeholder until SOLR-9407 is implemented\n    String belowOpStr = String.valueOf(properties.getOrDefault(BELOW_OP_PROP, CollectionParams.CollectionAction.MERGESHARDS.toLower()));\n    aboveOp = CollectionParams.CollectionAction.get(aboveOpStr);\n    if (aboveOp == null) {\n      throw new TriggerValidationException(getName(), ABOVE_OP_PROP, \"unrecognized value of: '\" + aboveOpStr + \"'\");\n    }\n    belowOp = CollectionParams.CollectionAction.get(belowOpStr);\n    if (belowOp == null) {\n      throw new TriggerValidationException(getName(), BELOW_OP_PROP, \"unrecognized value of: '\" + belowOpStr + \"'\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"383671a9fe2f5147abf22eb1ce56e3ca3d6eb133","date":1541008054,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/IndexSizeTrigger#configure(SolrResourceLoader,SolrCloudManager,Map[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/IndexSizeTrigger#configure(SolrResourceLoader,SolrCloudManager,Map[String,Object]).mjava","sourceNew":"  @Override\n  public void configure(SolrResourceLoader loader, SolrCloudManager cloudManager, Map<String, Object> properties) throws TriggerValidationException {\n    super.configure(loader, cloudManager, properties);\n    String aboveStr = String.valueOf(properties.getOrDefault(ABOVE_BYTES_PROP, Long.MAX_VALUE));\n    String belowStr = String.valueOf(properties.getOrDefault(BELOW_BYTES_PROP, -1));\n    try {\n      aboveBytes = Long.parseLong(aboveStr);\n      if (aboveBytes <= 0) {\n        throw new Exception(\"value must be > 0\");\n      }\n    } catch (Exception e) {\n      throw new TriggerValidationException(getName(), ABOVE_BYTES_PROP, \"invalid value '\" + aboveStr + \"': \" + e.toString());\n    }\n    try {\n      belowBytes = Long.parseLong(belowStr);\n      if (belowBytes < 0) {\n        belowBytes = -1;\n      }\n    } catch (Exception e) {\n      throw new TriggerValidationException(getName(), BELOW_BYTES_PROP, \"invalid value '\" + belowStr + \"': \" + e.toString());\n    }\n    // below must be at least 2x smaller than above, otherwise splitting a shard\n    // would immediately put the shard below the threshold and cause the mergeshards action\n    if (belowBytes > 0 && (belowBytes * 2 > aboveBytes)) {\n      throw new TriggerValidationException(getName(), BELOW_BYTES_PROP,\n          \"invalid value \" + belowBytes + \", should be less than half of '\" + ABOVE_BYTES_PROP + \"' value, which is \" + aboveBytes);\n    }\n    // do the same for docs bounds\n    aboveStr = String.valueOf(properties.getOrDefault(ABOVE_DOCS_PROP, Long.MAX_VALUE));\n    belowStr = String.valueOf(properties.getOrDefault(BELOW_DOCS_PROP, -1));\n    try {\n      aboveDocs = Long.parseLong(aboveStr);\n      if (aboveDocs <= 0) {\n        throw new Exception(\"value must be > 0\");\n      }\n    } catch (Exception e) {\n      throw new TriggerValidationException(getName(), ABOVE_DOCS_PROP, \"invalid value '\" + aboveStr + \"': \" + e.toString());\n    }\n    try {\n      belowDocs = Long.parseLong(belowStr);\n      if (belowDocs < 0) {\n        belowDocs = -1;\n      }\n    } catch (Exception e) {\n      throw new TriggerValidationException(getName(), BELOW_DOCS_PROP, \"invalid value '\" + belowStr + \"': \" + e.toString());\n    }\n    // below must be at least 2x smaller than above, otherwise splitting a shard\n    // would immediately put the shard below the threshold and cause the mergeshards action\n    if (belowDocs > 0 && (belowDocs * 2 > aboveDocs)) {\n      throw new TriggerValidationException(getName(), BELOW_DOCS_PROP,\n          \"invalid value \" + belowDocs + \", should be less than half of '\" + ABOVE_DOCS_PROP + \"' value, which is \" + aboveDocs);\n    }\n\n    String collectionsString = (String) properties.get(COLLECTIONS_PROP);\n    if (collectionsString != null && !collectionsString.isEmpty()) {\n      collections.addAll(StrUtils.splitSmart(collectionsString, ','));\n    }\n    String aboveOpStr = String.valueOf(properties.getOrDefault(ABOVE_OP_PROP, CollectionParams.CollectionAction.SPLITSHARD.toLower()));\n    // TODO: this is a placeholder until SOLR-9407 is implemented\n    String belowOpStr = String.valueOf(properties.getOrDefault(BELOW_OP_PROP, CollectionParams.CollectionAction.MERGESHARDS.toLower()));\n    aboveOp = CollectionParams.CollectionAction.get(aboveOpStr);\n    if (aboveOp == null) {\n      throw new TriggerValidationException(getName(), ABOVE_OP_PROP, \"unrecognized value of: '\" + aboveOpStr + \"'\");\n    }\n    belowOp = CollectionParams.CollectionAction.get(belowOpStr);\n    if (belowOp == null) {\n      throw new TriggerValidationException(getName(), BELOW_OP_PROP, \"unrecognized value of: '\" + belowOpStr + \"'\");\n    }\n    String maxOpsStr = String.valueOf(properties.getOrDefault(MAX_OPS_PROP, DEFAULT_MAX_OPS));\n    try {\n      maxOps = Integer.parseInt(maxOpsStr);\n      if (maxOps < 1) {\n        throw new Exception(\"must be > 1\");\n      }\n    } catch (Exception e) {\n      throw new TriggerValidationException(getName(), MAX_OPS_PROP, \"invalid value: '\" + maxOpsStr + \"': \" + e.getMessage());\n    }\n    String methodStr = (String)properties.getOrDefault(CommonAdminParams.SPLIT_METHOD, SolrIndexSplitter.SplitMethod.REWRITE.toLower());\n    splitMethod = SolrIndexSplitter.SplitMethod.get(methodStr);\n    if (splitMethod == null) {\n      throw new TriggerValidationException(getName(), SPLIT_METHOD_PROP, \"Unknown value '\" + CommonAdminParams.SPLIT_METHOD +\n          \": \" + methodStr);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void configure(SolrResourceLoader loader, SolrCloudManager cloudManager, Map<String, Object> properties) throws TriggerValidationException {\n    super.configure(loader, cloudManager, properties);\n    String aboveStr = String.valueOf(properties.getOrDefault(ABOVE_BYTES_PROP, Long.MAX_VALUE));\n    String belowStr = String.valueOf(properties.getOrDefault(BELOW_BYTES_PROP, -1));\n    try {\n      aboveBytes = Long.parseLong(aboveStr);\n      if (aboveBytes <= 0) {\n        throw new Exception(\"value must be > 0\");\n      }\n    } catch (Exception e) {\n      throw new TriggerValidationException(getName(), ABOVE_BYTES_PROP, \"invalid value '\" + aboveStr + \"': \" + e.toString());\n    }\n    try {\n      belowBytes = Long.parseLong(belowStr);\n      if (belowBytes < 0) {\n        belowBytes = -1;\n      }\n    } catch (Exception e) {\n      throw new TriggerValidationException(getName(), BELOW_BYTES_PROP, \"invalid value '\" + belowStr + \"': \" + e.toString());\n    }\n    // below must be at least 2x smaller than above, otherwise splitting a shard\n    // would immediately put the shard below the threshold and cause the mergeshards action\n    if (belowBytes > 0 && (belowBytes * 2 > aboveBytes)) {\n      throw new TriggerValidationException(getName(), BELOW_BYTES_PROP,\n          \"invalid value \" + belowBytes + \", should be less than half of '\" + ABOVE_BYTES_PROP + \"' value, which is \" + aboveBytes);\n    }\n    // do the same for docs bounds\n    aboveStr = String.valueOf(properties.getOrDefault(ABOVE_DOCS_PROP, Long.MAX_VALUE));\n    belowStr = String.valueOf(properties.getOrDefault(BELOW_DOCS_PROP, -1));\n    try {\n      aboveDocs = Long.parseLong(aboveStr);\n      if (aboveDocs <= 0) {\n        throw new Exception(\"value must be > 0\");\n      }\n    } catch (Exception e) {\n      throw new TriggerValidationException(getName(), ABOVE_DOCS_PROP, \"invalid value '\" + aboveStr + \"': \" + e.toString());\n    }\n    try {\n      belowDocs = Long.parseLong(belowStr);\n      if (belowDocs < 0) {\n        belowDocs = -1;\n      }\n    } catch (Exception e) {\n      throw new TriggerValidationException(getName(), BELOW_DOCS_PROP, \"invalid value '\" + belowStr + \"': \" + e.toString());\n    }\n    // below must be at least 2x smaller than above, otherwise splitting a shard\n    // would immediately put the shard below the threshold and cause the mergeshards action\n    if (belowDocs > 0 && (belowDocs * 2 > aboveDocs)) {\n      throw new TriggerValidationException(getName(), BELOW_DOCS_PROP,\n          \"invalid value \" + belowDocs + \", should be less than half of '\" + ABOVE_DOCS_PROP + \"' value, which is \" + aboveDocs);\n    }\n\n    String collectionsString = (String) properties.get(COLLECTIONS_PROP);\n    if (collectionsString != null && !collectionsString.isEmpty()) {\n      collections.addAll(StrUtils.splitSmart(collectionsString, ','));\n    }\n    String aboveOpStr = String.valueOf(properties.getOrDefault(ABOVE_OP_PROP, CollectionParams.CollectionAction.SPLITSHARD.toLower()));\n    // TODO: this is a placeholder until SOLR-9407 is implemented\n    String belowOpStr = String.valueOf(properties.getOrDefault(BELOW_OP_PROP, CollectionParams.CollectionAction.MERGESHARDS.toLower()));\n    aboveOp = CollectionParams.CollectionAction.get(aboveOpStr);\n    if (aboveOp == null) {\n      throw new TriggerValidationException(getName(), ABOVE_OP_PROP, \"unrecognized value of: '\" + aboveOpStr + \"'\");\n    }\n    belowOp = CollectionParams.CollectionAction.get(belowOpStr);\n    if (belowOp == null) {\n      throw new TriggerValidationException(getName(), BELOW_OP_PROP, \"unrecognized value of: '\" + belowOpStr + \"'\");\n    }\n    String maxOpsStr = String.valueOf(properties.getOrDefault(MAX_OPS_PROP, DEFAULT_MAX_OPS));\n    try {\n      maxOps = Integer.parseInt(maxOpsStr);\n      if (maxOps < 1) {\n        throw new Exception(\"must be > 1\");\n      }\n    } catch (Exception e) {\n      throw new TriggerValidationException(getName(), MAX_OPS_PROP, \"invalid value: '\" + maxOpsStr + \"': \" + e.getMessage());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7cac1f2920f8057198f04505797cbabf74dd9a97","date":1546884894,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/IndexSizeTrigger#configure(SolrResourceLoader,SolrCloudManager,Map[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/IndexSizeTrigger#configure(SolrResourceLoader,SolrCloudManager,Map[String,Object]).mjava","sourceNew":"  @Override\n  public void configure(SolrResourceLoader loader, SolrCloudManager cloudManager, Map<String, Object> properties) throws TriggerValidationException {\n    super.configure(loader, cloudManager, properties);\n    String aboveStr = String.valueOf(properties.getOrDefault(ABOVE_BYTES_PROP, Long.MAX_VALUE));\n    String belowStr = String.valueOf(properties.getOrDefault(BELOW_BYTES_PROP, -1));\n    try {\n      aboveBytes = Long.parseLong(aboveStr);\n      if (aboveBytes <= 0) {\n        throw new Exception(\"value must be > 0\");\n      }\n    } catch (Exception e) {\n      throw new TriggerValidationException(getName(), ABOVE_BYTES_PROP, \"invalid value '\" + aboveStr + \"': \" + e.toString());\n    }\n    try {\n      belowBytes = Long.parseLong(belowStr);\n      if (belowBytes < 0) {\n        belowBytes = -1;\n      }\n    } catch (Exception e) {\n      throw new TriggerValidationException(getName(), BELOW_BYTES_PROP, \"invalid value '\" + belowStr + \"': \" + e.toString());\n    }\n    // below must be at least 2x smaller than above, otherwise splitting a shard\n    // would immediately put the shard below the threshold and cause the mergeshards action\n    if (belowBytes > 0 && (belowBytes * 2 > aboveBytes)) {\n      throw new TriggerValidationException(getName(), BELOW_BYTES_PROP,\n          \"invalid value \" + belowBytes + \", should be less than half of '\" + ABOVE_BYTES_PROP + \"' value, which is \" + aboveBytes);\n    }\n    // do the same for docs bounds\n    aboveStr = String.valueOf(properties.getOrDefault(ABOVE_DOCS_PROP, Long.MAX_VALUE));\n    belowStr = String.valueOf(properties.getOrDefault(BELOW_DOCS_PROP, -1));\n    try {\n      aboveDocs = Long.parseLong(aboveStr);\n      if (aboveDocs <= 0) {\n        throw new Exception(\"value must be > 0\");\n      }\n    } catch (Exception e) {\n      throw new TriggerValidationException(getName(), ABOVE_DOCS_PROP, \"invalid value '\" + aboveStr + \"': \" + e.toString());\n    }\n    try {\n      belowDocs = Long.parseLong(belowStr);\n      if (belowDocs < 0) {\n        belowDocs = -1;\n      }\n    } catch (Exception e) {\n      throw new TriggerValidationException(getName(), BELOW_DOCS_PROP, \"invalid value '\" + belowStr + \"': \" + e.toString());\n    }\n    // below must be at least 2x smaller than above, otherwise splitting a shard\n    // would immediately put the shard below the threshold and cause the mergeshards action\n    if (belowDocs > 0 && (belowDocs * 2 > aboveDocs)) {\n      throw new TriggerValidationException(getName(), BELOW_DOCS_PROP,\n          \"invalid value \" + belowDocs + \", should be less than half of '\" + ABOVE_DOCS_PROP + \"' value, which is \" + aboveDocs);\n    }\n\n    String collectionsString = (String) properties.get(COLLECTIONS_PROP);\n    if (collectionsString != null && !collectionsString.isEmpty()) {\n      collections.addAll(StrUtils.splitSmart(collectionsString, ','));\n    }\n    String aboveOpStr = String.valueOf(properties.getOrDefault(ABOVE_OP_PROP, CollectionParams.CollectionAction.SPLITSHARD.toLower()));\n    // TODO: this is a placeholder until SOLR-9407 is implemented\n    String belowOpStr = String.valueOf(properties.getOrDefault(BELOW_OP_PROP, CollectionParams.CollectionAction.MERGESHARDS.toLower()));\n    aboveOp = CollectionParams.CollectionAction.get(aboveOpStr);\n    if (aboveOp == null) {\n      throw new TriggerValidationException(getName(), ABOVE_OP_PROP, \"unrecognized value of: '\" + aboveOpStr + \"'\");\n    }\n    belowOp = CollectionParams.CollectionAction.get(belowOpStr);\n    if (belowOp == null) {\n      throw new TriggerValidationException(getName(), BELOW_OP_PROP, \"unrecognized value of: '\" + belowOpStr + \"'\");\n    }\n    String maxOpsStr = String.valueOf(properties.getOrDefault(MAX_OPS_PROP, DEFAULT_MAX_OPS));\n    try {\n      maxOps = Integer.parseInt(maxOpsStr);\n      if (maxOps < 1) {\n        throw new Exception(\"must be > 1\");\n      }\n    } catch (Exception e) {\n      throw new TriggerValidationException(getName(), MAX_OPS_PROP, \"invalid value: '\" + maxOpsStr + \"': \" + e.getMessage());\n    }\n    String methodStr = (String)properties.getOrDefault(CommonAdminParams.SPLIT_METHOD, SolrIndexSplitter.SplitMethod.LINK.toLower());\n    splitMethod = SolrIndexSplitter.SplitMethod.get(methodStr);\n    if (splitMethod == null) {\n      throw new TriggerValidationException(getName(), SPLIT_METHOD_PROP, \"Unknown value '\" + CommonAdminParams.SPLIT_METHOD +\n          \": \" + methodStr);\n    }\n    String fuzzStr = String.valueOf(properties.getOrDefault(SPLIT_FUZZ_PROP, 0.0f));\n    try {\n      splitFuzz = Float.parseFloat(fuzzStr);\n    } catch (Exception e) {\n      throw new TriggerValidationException(getName(), SPLIT_FUZZ_PROP, \"invalid value: '\" + fuzzStr + \"': \" + e.getMessage());\n    }\n  }\n\n","sourceOld":"  @Override\n  public void configure(SolrResourceLoader loader, SolrCloudManager cloudManager, Map<String, Object> properties) throws TriggerValidationException {\n    super.configure(loader, cloudManager, properties);\n    String aboveStr = String.valueOf(properties.getOrDefault(ABOVE_BYTES_PROP, Long.MAX_VALUE));\n    String belowStr = String.valueOf(properties.getOrDefault(BELOW_BYTES_PROP, -1));\n    try {\n      aboveBytes = Long.parseLong(aboveStr);\n      if (aboveBytes <= 0) {\n        throw new Exception(\"value must be > 0\");\n      }\n    } catch (Exception e) {\n      throw new TriggerValidationException(getName(), ABOVE_BYTES_PROP, \"invalid value '\" + aboveStr + \"': \" + e.toString());\n    }\n    try {\n      belowBytes = Long.parseLong(belowStr);\n      if (belowBytes < 0) {\n        belowBytes = -1;\n      }\n    } catch (Exception e) {\n      throw new TriggerValidationException(getName(), BELOW_BYTES_PROP, \"invalid value '\" + belowStr + \"': \" + e.toString());\n    }\n    // below must be at least 2x smaller than above, otherwise splitting a shard\n    // would immediately put the shard below the threshold and cause the mergeshards action\n    if (belowBytes > 0 && (belowBytes * 2 > aboveBytes)) {\n      throw new TriggerValidationException(getName(), BELOW_BYTES_PROP,\n          \"invalid value \" + belowBytes + \", should be less than half of '\" + ABOVE_BYTES_PROP + \"' value, which is \" + aboveBytes);\n    }\n    // do the same for docs bounds\n    aboveStr = String.valueOf(properties.getOrDefault(ABOVE_DOCS_PROP, Long.MAX_VALUE));\n    belowStr = String.valueOf(properties.getOrDefault(BELOW_DOCS_PROP, -1));\n    try {\n      aboveDocs = Long.parseLong(aboveStr);\n      if (aboveDocs <= 0) {\n        throw new Exception(\"value must be > 0\");\n      }\n    } catch (Exception e) {\n      throw new TriggerValidationException(getName(), ABOVE_DOCS_PROP, \"invalid value '\" + aboveStr + \"': \" + e.toString());\n    }\n    try {\n      belowDocs = Long.parseLong(belowStr);\n      if (belowDocs < 0) {\n        belowDocs = -1;\n      }\n    } catch (Exception e) {\n      throw new TriggerValidationException(getName(), BELOW_DOCS_PROP, \"invalid value '\" + belowStr + \"': \" + e.toString());\n    }\n    // below must be at least 2x smaller than above, otherwise splitting a shard\n    // would immediately put the shard below the threshold and cause the mergeshards action\n    if (belowDocs > 0 && (belowDocs * 2 > aboveDocs)) {\n      throw new TriggerValidationException(getName(), BELOW_DOCS_PROP,\n          \"invalid value \" + belowDocs + \", should be less than half of '\" + ABOVE_DOCS_PROP + \"' value, which is \" + aboveDocs);\n    }\n\n    String collectionsString = (String) properties.get(COLLECTIONS_PROP);\n    if (collectionsString != null && !collectionsString.isEmpty()) {\n      collections.addAll(StrUtils.splitSmart(collectionsString, ','));\n    }\n    String aboveOpStr = String.valueOf(properties.getOrDefault(ABOVE_OP_PROP, CollectionParams.CollectionAction.SPLITSHARD.toLower()));\n    // TODO: this is a placeholder until SOLR-9407 is implemented\n    String belowOpStr = String.valueOf(properties.getOrDefault(BELOW_OP_PROP, CollectionParams.CollectionAction.MERGESHARDS.toLower()));\n    aboveOp = CollectionParams.CollectionAction.get(aboveOpStr);\n    if (aboveOp == null) {\n      throw new TriggerValidationException(getName(), ABOVE_OP_PROP, \"unrecognized value of: '\" + aboveOpStr + \"'\");\n    }\n    belowOp = CollectionParams.CollectionAction.get(belowOpStr);\n    if (belowOp == null) {\n      throw new TriggerValidationException(getName(), BELOW_OP_PROP, \"unrecognized value of: '\" + belowOpStr + \"'\");\n    }\n    String maxOpsStr = String.valueOf(properties.getOrDefault(MAX_OPS_PROP, DEFAULT_MAX_OPS));\n    try {\n      maxOps = Integer.parseInt(maxOpsStr);\n      if (maxOps < 1) {\n        throw new Exception(\"must be > 1\");\n      }\n    } catch (Exception e) {\n      throw new TriggerValidationException(getName(), MAX_OPS_PROP, \"invalid value: '\" + maxOpsStr + \"': \" + e.getMessage());\n    }\n    String methodStr = (String)properties.getOrDefault(CommonAdminParams.SPLIT_METHOD, SolrIndexSplitter.SplitMethod.REWRITE.toLower());\n    splitMethod = SolrIndexSplitter.SplitMethod.get(methodStr);\n    if (splitMethod == null) {\n      throw new TriggerValidationException(getName(), SPLIT_METHOD_PROP, \"Unknown value '\" + CommonAdminParams.SPLIT_METHOD +\n          \": \" + methodStr);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a97a72dc16d01fda8ca5c9e0264b3604e30ab539","date":1565639985,"type":3,"author":"Megan Carey","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/IndexSizeTrigger#configure(SolrResourceLoader,SolrCloudManager,Map[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/IndexSizeTrigger#configure(SolrResourceLoader,SolrCloudManager,Map[String,Object]).mjava","sourceNew":"  @Override\n  public void configure(SolrResourceLoader loader, SolrCloudManager cloudManager, Map<String, Object> properties) throws TriggerValidationException {\n    super.configure(loader, cloudManager, properties);\n    String aboveStr = String.valueOf(properties.getOrDefault(ABOVE_BYTES_PROP, Long.MAX_VALUE));\n    String belowStr = String.valueOf(properties.getOrDefault(BELOW_BYTES_PROP, -1));\n    try {\n      aboveBytes = Long.parseLong(aboveStr);\n      if (aboveBytes <= 0) {\n        throw new Exception(\"value must be > 0\");\n      }\n    } catch (Exception e) {\n      throw new TriggerValidationException(getName(), ABOVE_BYTES_PROP, \"invalid value '\" + aboveStr + \"': \" + e.toString());\n    }\n    try {\n      belowBytes = Long.parseLong(belowStr);\n      if (belowBytes < 0) {\n        belowBytes = -1;\n      }\n    } catch (Exception e) {\n      throw new TriggerValidationException(getName(), BELOW_BYTES_PROP, \"invalid value '\" + belowStr + \"': \" + e.toString());\n    }\n    // below must be at least 2x smaller than above, otherwise splitting a shard\n    // would immediately put the shard below the threshold and cause the mergeshards action\n    if (belowBytes > 0 && (belowBytes * 2 > aboveBytes)) {\n      throw new TriggerValidationException(getName(), BELOW_BYTES_PROP,\n          \"invalid value \" + belowBytes + \", should be less than half of '\" + ABOVE_BYTES_PROP + \"' value, which is \" + aboveBytes);\n    }\n    // do the same for docs bounds\n    aboveStr = String.valueOf(properties.getOrDefault(ABOVE_DOCS_PROP, Long.MAX_VALUE));\n    belowStr = String.valueOf(properties.getOrDefault(BELOW_DOCS_PROP, -1));\n    try {\n      aboveDocs = Long.parseLong(aboveStr);\n      if (aboveDocs <= 0) {\n        throw new Exception(\"value must be > 0\");\n      }\n    } catch (Exception e) {\n      throw new TriggerValidationException(getName(), ABOVE_DOCS_PROP, \"invalid value '\" + aboveStr + \"': \" + e.toString());\n    }\n    try {\n      belowDocs = Long.parseLong(belowStr);\n      if (belowDocs < 0) {\n        belowDocs = -1;\n      }\n    } catch (Exception e) {\n      throw new TriggerValidationException(getName(), BELOW_DOCS_PROP, \"invalid value '\" + belowStr + \"': \" + e.toString());\n    }\n    // below must be at least 2x smaller than above, otherwise splitting a shard\n    // would immediately put the shard below the threshold and cause the mergeshards action\n    if (belowDocs > 0 && (belowDocs * 2 > aboveDocs)) {\n      throw new TriggerValidationException(getName(), BELOW_DOCS_PROP,\n          \"invalid value \" + belowDocs + \", should be less than half of '\" + ABOVE_DOCS_PROP + \"' value, which is \" + aboveDocs);\n    }\n\n    String collectionsString = (String) properties.get(COLLECTIONS_PROP);\n    if (collectionsString != null && !collectionsString.isEmpty()) {\n      collections.addAll(StrUtils.splitSmart(collectionsString, ','));\n    }\n    String aboveOpStr = String.valueOf(properties.getOrDefault(ABOVE_OP_PROP, CollectionParams.CollectionAction.SPLITSHARD.toLower()));\n    // TODO: this is a placeholder until SOLR-9407 is implemented\n    String belowOpStr = String.valueOf(properties.getOrDefault(BELOW_OP_PROP, CollectionParams.CollectionAction.MERGESHARDS.toLower()));\n    aboveOp = CollectionParams.CollectionAction.get(aboveOpStr);\n    if (aboveOp == null) {\n      throw new TriggerValidationException(getName(), ABOVE_OP_PROP, \"unrecognized value of: '\" + aboveOpStr + \"'\");\n    }\n    belowOp = CollectionParams.CollectionAction.get(belowOpStr);\n    if (belowOp == null) {\n      throw new TriggerValidationException(getName(), BELOW_OP_PROP, \"unrecognized value of: '\" + belowOpStr + \"'\");\n    }\n    String maxOpsStr = String.valueOf(properties.getOrDefault(MAX_OPS_PROP, DEFAULT_MAX_OPS));\n    try {\n      maxOps = Integer.parseInt(maxOpsStr);\n      if (maxOps < 1) {\n        throw new Exception(\"must be > 1\");\n      }\n    } catch (Exception e) {\n      throw new TriggerValidationException(getName(), MAX_OPS_PROP, \"invalid value: '\" + maxOpsStr + \"': \" + e.getMessage());\n    }\n    String methodStr = (String)properties.getOrDefault(SPLIT_METHOD_PROP, SolrIndexSplitter.SplitMethod.LINK.toLower());\n    splitMethod = SolrIndexSplitter.SplitMethod.get(methodStr);\n    if (splitMethod == null) {\n      throw new TriggerValidationException(getName(), SPLIT_METHOD_PROP, \"unrecognized value of: '\" + methodStr + \"'\");\n    }\n    String fuzzStr = String.valueOf(properties.getOrDefault(SPLIT_FUZZ_PROP, 0.0f));\n    try {\n      splitFuzz = Float.parseFloat(fuzzStr);\n    } catch (Exception e) {\n      throw new TriggerValidationException(getName(), SPLIT_FUZZ_PROP, \"invalid value: '\" + fuzzStr + \"': \" + e.getMessage());\n    }\n    String splitByPrefixStr = String.valueOf(properties.getOrDefault(SPLIT_BY_PREFIX, false));\n    try {\n      splitByPrefix = getValidBool(splitByPrefixStr);\n    } catch (Exception e) {\n      throw new TriggerValidationException(getName(), SPLIT_BY_PREFIX, \"invalid value: '\" + splitByPrefixStr + \"': \" + e.getMessage());\n    }\n  }\n\n","sourceOld":"  @Override\n  public void configure(SolrResourceLoader loader, SolrCloudManager cloudManager, Map<String, Object> properties) throws TriggerValidationException {\n    super.configure(loader, cloudManager, properties);\n    String aboveStr = String.valueOf(properties.getOrDefault(ABOVE_BYTES_PROP, Long.MAX_VALUE));\n    String belowStr = String.valueOf(properties.getOrDefault(BELOW_BYTES_PROP, -1));\n    try {\n      aboveBytes = Long.parseLong(aboveStr);\n      if (aboveBytes <= 0) {\n        throw new Exception(\"value must be > 0\");\n      }\n    } catch (Exception e) {\n      throw new TriggerValidationException(getName(), ABOVE_BYTES_PROP, \"invalid value '\" + aboveStr + \"': \" + e.toString());\n    }\n    try {\n      belowBytes = Long.parseLong(belowStr);\n      if (belowBytes < 0) {\n        belowBytes = -1;\n      }\n    } catch (Exception e) {\n      throw new TriggerValidationException(getName(), BELOW_BYTES_PROP, \"invalid value '\" + belowStr + \"': \" + e.toString());\n    }\n    // below must be at least 2x smaller than above, otherwise splitting a shard\n    // would immediately put the shard below the threshold and cause the mergeshards action\n    if (belowBytes > 0 && (belowBytes * 2 > aboveBytes)) {\n      throw new TriggerValidationException(getName(), BELOW_BYTES_PROP,\n          \"invalid value \" + belowBytes + \", should be less than half of '\" + ABOVE_BYTES_PROP + \"' value, which is \" + aboveBytes);\n    }\n    // do the same for docs bounds\n    aboveStr = String.valueOf(properties.getOrDefault(ABOVE_DOCS_PROP, Long.MAX_VALUE));\n    belowStr = String.valueOf(properties.getOrDefault(BELOW_DOCS_PROP, -1));\n    try {\n      aboveDocs = Long.parseLong(aboveStr);\n      if (aboveDocs <= 0) {\n        throw new Exception(\"value must be > 0\");\n      }\n    } catch (Exception e) {\n      throw new TriggerValidationException(getName(), ABOVE_DOCS_PROP, \"invalid value '\" + aboveStr + \"': \" + e.toString());\n    }\n    try {\n      belowDocs = Long.parseLong(belowStr);\n      if (belowDocs < 0) {\n        belowDocs = -1;\n      }\n    } catch (Exception e) {\n      throw new TriggerValidationException(getName(), BELOW_DOCS_PROP, \"invalid value '\" + belowStr + \"': \" + e.toString());\n    }\n    // below must be at least 2x smaller than above, otherwise splitting a shard\n    // would immediately put the shard below the threshold and cause the mergeshards action\n    if (belowDocs > 0 && (belowDocs * 2 > aboveDocs)) {\n      throw new TriggerValidationException(getName(), BELOW_DOCS_PROP,\n          \"invalid value \" + belowDocs + \", should be less than half of '\" + ABOVE_DOCS_PROP + \"' value, which is \" + aboveDocs);\n    }\n\n    String collectionsString = (String) properties.get(COLLECTIONS_PROP);\n    if (collectionsString != null && !collectionsString.isEmpty()) {\n      collections.addAll(StrUtils.splitSmart(collectionsString, ','));\n    }\n    String aboveOpStr = String.valueOf(properties.getOrDefault(ABOVE_OP_PROP, CollectionParams.CollectionAction.SPLITSHARD.toLower()));\n    // TODO: this is a placeholder until SOLR-9407 is implemented\n    String belowOpStr = String.valueOf(properties.getOrDefault(BELOW_OP_PROP, CollectionParams.CollectionAction.MERGESHARDS.toLower()));\n    aboveOp = CollectionParams.CollectionAction.get(aboveOpStr);\n    if (aboveOp == null) {\n      throw new TriggerValidationException(getName(), ABOVE_OP_PROP, \"unrecognized value of: '\" + aboveOpStr + \"'\");\n    }\n    belowOp = CollectionParams.CollectionAction.get(belowOpStr);\n    if (belowOp == null) {\n      throw new TriggerValidationException(getName(), BELOW_OP_PROP, \"unrecognized value of: '\" + belowOpStr + \"'\");\n    }\n    String maxOpsStr = String.valueOf(properties.getOrDefault(MAX_OPS_PROP, DEFAULT_MAX_OPS));\n    try {\n      maxOps = Integer.parseInt(maxOpsStr);\n      if (maxOps < 1) {\n        throw new Exception(\"must be > 1\");\n      }\n    } catch (Exception e) {\n      throw new TriggerValidationException(getName(), MAX_OPS_PROP, \"invalid value: '\" + maxOpsStr + \"': \" + e.getMessage());\n    }\n    String methodStr = (String)properties.getOrDefault(CommonAdminParams.SPLIT_METHOD, SolrIndexSplitter.SplitMethod.LINK.toLower());\n    splitMethod = SolrIndexSplitter.SplitMethod.get(methodStr);\n    if (splitMethod == null) {\n      throw new TriggerValidationException(getName(), SPLIT_METHOD_PROP, \"Unknown value '\" + CommonAdminParams.SPLIT_METHOD +\n          \": \" + methodStr);\n    }\n    String fuzzStr = String.valueOf(properties.getOrDefault(SPLIT_FUZZ_PROP, 0.0f));\n    try {\n      splitFuzz = Float.parseFloat(fuzzStr);\n    } catch (Exception e) {\n      throw new TriggerValidationException(getName(), SPLIT_FUZZ_PROP, \"invalid value: '\" + fuzzStr + \"': \" + e.getMessage());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/IndexSizeTrigger#configure(SolrResourceLoader,SolrCloudManager,Map[String,Object]).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void configure(SolrResourceLoader loader, SolrCloudManager cloudManager, Map<String, Object> properties) throws TriggerValidationException {\n    super.configure(loader, cloudManager, properties);\n    String aboveStr = String.valueOf(properties.getOrDefault(ABOVE_BYTES_PROP, Long.MAX_VALUE));\n    String belowStr = String.valueOf(properties.getOrDefault(BELOW_BYTES_PROP, -1));\n    try {\n      aboveBytes = Long.parseLong(aboveStr);\n      if (aboveBytes <= 0) {\n        throw new Exception(\"value must be > 0\");\n      }\n    } catch (Exception e) {\n      throw new TriggerValidationException(getName(), ABOVE_BYTES_PROP, \"invalid value '\" + aboveStr + \"': \" + e.toString());\n    }\n    try {\n      belowBytes = Long.parseLong(belowStr);\n      if (belowBytes < 0) {\n        belowBytes = -1;\n      }\n    } catch (Exception e) {\n      throw new TriggerValidationException(getName(), BELOW_BYTES_PROP, \"invalid value '\" + belowStr + \"': \" + e.toString());\n    }\n    // below must be at least 2x smaller than above, otherwise splitting a shard\n    // would immediately put the shard below the threshold and cause the mergeshards action\n    if (belowBytes > 0 && (belowBytes * 2 > aboveBytes)) {\n      throw new TriggerValidationException(getName(), BELOW_BYTES_PROP,\n          \"invalid value \" + belowBytes + \", should be less than half of '\" + ABOVE_BYTES_PROP + \"' value, which is \" + aboveBytes);\n    }\n    // do the same for docs bounds\n    aboveStr = String.valueOf(properties.getOrDefault(ABOVE_DOCS_PROP, Long.MAX_VALUE));\n    belowStr = String.valueOf(properties.getOrDefault(BELOW_DOCS_PROP, -1));\n    try {\n      aboveDocs = Long.parseLong(aboveStr);\n      if (aboveDocs <= 0) {\n        throw new Exception(\"value must be > 0\");\n      }\n    } catch (Exception e) {\n      throw new TriggerValidationException(getName(), ABOVE_DOCS_PROP, \"invalid value '\" + aboveStr + \"': \" + e.toString());\n    }\n    try {\n      belowDocs = Long.parseLong(belowStr);\n      if (belowDocs < 0) {\n        belowDocs = -1;\n      }\n    } catch (Exception e) {\n      throw new TriggerValidationException(getName(), BELOW_DOCS_PROP, \"invalid value '\" + belowStr + \"': \" + e.toString());\n    }\n    // below must be at least 2x smaller than above, otherwise splitting a shard\n    // would immediately put the shard below the threshold and cause the mergeshards action\n    if (belowDocs > 0 && (belowDocs * 2 > aboveDocs)) {\n      throw new TriggerValidationException(getName(), BELOW_DOCS_PROP,\n          \"invalid value \" + belowDocs + \", should be less than half of '\" + ABOVE_DOCS_PROP + \"' value, which is \" + aboveDocs);\n    }\n\n    String collectionsString = (String) properties.get(COLLECTIONS_PROP);\n    if (collectionsString != null && !collectionsString.isEmpty()) {\n      collections.addAll(StrUtils.splitSmart(collectionsString, ','));\n    }\n    String aboveOpStr = String.valueOf(properties.getOrDefault(ABOVE_OP_PROP, CollectionParams.CollectionAction.SPLITSHARD.toLower()));\n    // TODO: this is a placeholder until SOLR-9407 is implemented\n    String belowOpStr = String.valueOf(properties.getOrDefault(BELOW_OP_PROP, CollectionParams.CollectionAction.MERGESHARDS.toLower()));\n    aboveOp = CollectionParams.CollectionAction.get(aboveOpStr);\n    if (aboveOp == null) {\n      throw new TriggerValidationException(getName(), ABOVE_OP_PROP, \"unrecognized value of: '\" + aboveOpStr + \"'\");\n    }\n    belowOp = CollectionParams.CollectionAction.get(belowOpStr);\n    if (belowOp == null) {\n      throw new TriggerValidationException(getName(), BELOW_OP_PROP, \"unrecognized value of: '\" + belowOpStr + \"'\");\n    }\n    String maxOpsStr = String.valueOf(properties.getOrDefault(MAX_OPS_PROP, DEFAULT_MAX_OPS));\n    try {\n      maxOps = Integer.parseInt(maxOpsStr);\n      if (maxOps < 1) {\n        throw new Exception(\"must be > 1\");\n      }\n    } catch (Exception e) {\n      throw new TriggerValidationException(getName(), MAX_OPS_PROP, \"invalid value: '\" + maxOpsStr + \"': \" + e.getMessage());\n    }\n    String methodStr = (String)properties.getOrDefault(SPLIT_METHOD_PROP, SolrIndexSplitter.SplitMethod.LINK.toLower());\n    splitMethod = SolrIndexSplitter.SplitMethod.get(methodStr);\n    if (splitMethod == null) {\n      throw new TriggerValidationException(getName(), SPLIT_METHOD_PROP, \"unrecognized value of: '\" + methodStr + \"'\");\n    }\n    String fuzzStr = String.valueOf(properties.getOrDefault(SPLIT_FUZZ_PROP, 0.0f));\n    try {\n      splitFuzz = Float.parseFloat(fuzzStr);\n    } catch (Exception e) {\n      throw new TriggerValidationException(getName(), SPLIT_FUZZ_PROP, \"invalid value: '\" + fuzzStr + \"': \" + e.getMessage());\n    }\n    String splitByPrefixStr = String.valueOf(properties.getOrDefault(SPLIT_BY_PREFIX, false));\n    try {\n      splitByPrefix = getValidBool(splitByPrefixStr);\n    } catch (Exception e) {\n      throw new TriggerValidationException(getName(), SPLIT_BY_PREFIX, \"invalid value: '\" + splitByPrefixStr + \"': \" + e.getMessage());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c0b90ab8b228b1f7a05d5ddfbe879ce962d8964a":["43345f1452f9510f8aaadae6156fe0c834e7d957"],"383671a9fe2f5147abf22eb1ce56e3ca3d6eb133":["9414d03a96422f6a92ced130e94f73f3fe1fc9a3"],"7cac1f2920f8057198f04505797cbabf74dd9a97":["383671a9fe2f5147abf22eb1ce56e3ca3d6eb133"],"3f504512a03d978990cbff30db0522b354e846db":["a97a72dc16d01fda8ca5c9e0264b3604e30ab539"],"ce71a9836bf1eba34a0ab31884e9eb8ad3f1cef1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9414d03a96422f6a92ced130e94f73f3fe1fc9a3":["c0b90ab8b228b1f7a05d5ddfbe879ce962d8964a"],"43345f1452f9510f8aaadae6156fe0c834e7d957":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ce71a9836bf1eba34a0ab31884e9eb8ad3f1cef1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"],"a97a72dc16d01fda8ca5c9e0264b3604e30ab539":["7cac1f2920f8057198f04505797cbabf74dd9a97"]},"commit2Childs":{"c0b90ab8b228b1f7a05d5ddfbe879ce962d8964a":["9414d03a96422f6a92ced130e94f73f3fe1fc9a3"],"383671a9fe2f5147abf22eb1ce56e3ca3d6eb133":["7cac1f2920f8057198f04505797cbabf74dd9a97"],"7cac1f2920f8057198f04505797cbabf74dd9a97":["a97a72dc16d01fda8ca5c9e0264b3604e30ab539"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ce71a9836bf1eba34a0ab31884e9eb8ad3f1cef1":["43345f1452f9510f8aaadae6156fe0c834e7d957"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ce71a9836bf1eba34a0ab31884e9eb8ad3f1cef1","43345f1452f9510f8aaadae6156fe0c834e7d957"],"9414d03a96422f6a92ced130e94f73f3fe1fc9a3":["383671a9fe2f5147abf22eb1ce56e3ca3d6eb133"],"43345f1452f9510f8aaadae6156fe0c834e7d957":["c0b90ab8b228b1f7a05d5ddfbe879ce962d8964a"],"a97a72dc16d01fda8ca5c9e0264b3604e30ab539":["3f504512a03d978990cbff30db0522b354e846db"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}