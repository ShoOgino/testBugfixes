{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/TestSolrJErrorHandling#showExceptions().mjava","commits":[{"id":"a2a0d597d231e1e1141fcd33ad15e26e2a4266ac","date":1452194543,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/TestSolrJErrorHandling#showExceptions().mjava","pathOld":"/dev/null","sourceNew":"  public void showExceptions() throws Exception {\n    if (unexpected.isEmpty()) return;\n\n    Map<String,Integer> counts = new HashMap<>();\n\n    // dedup in case there are many clients or many exceptions\n    for (Throwable e : unexpected) {\n      String chain = getChain(e);\n      Integer prev = counts.put(chain, 1);\n      if (prev != null) {\n        counts.put(chain, prev+1);\n      }\n    }\n\n    StringBuilder sb = new StringBuilder(\"EXCEPTION LIST:\");\n    for (Map.Entry<String,Integer> entry : counts.entrySet()) {\n      sb.append(\"\\n\\t\").append(entry.getValue()).append(\") \").append(entry.getKey());\n    }\n\n    log.error(sb.toString());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6dc613ed6f75d1988140301ee8de8fdb056fa337","date":1588034757,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/TestSolrJErrorHandling#showExceptions().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/TestSolrJErrorHandling#showExceptions().mjava","sourceNew":"  public void showExceptions() throws Exception {\n    if (unexpected.isEmpty()) return;\n\n    Map<String,Integer> counts = new HashMap<>();\n\n    // dedup in case there are many clients or many exceptions\n    for (Throwable e : unexpected) {\n      String chain = getChain(e);\n      Integer prev = counts.put(chain, 1);\n      if (prev != null) {\n        counts.put(chain, prev+1);\n      }\n    }\n\n    StringBuilder sb = new StringBuilder(\"EXCEPTION LIST:\");\n    for (Map.Entry<String,Integer> entry : counts.entrySet()) {\n      sb.append(\"\\n\\t\").append(entry.getValue()).append(\") \").append(entry.getKey());\n    }\n\n    log.error(\"{}\", sb);\n  }\n\n","sourceOld":"  public void showExceptions() throws Exception {\n    if (unexpected.isEmpty()) return;\n\n    Map<String,Integer> counts = new HashMap<>();\n\n    // dedup in case there are many clients or many exceptions\n    for (Throwable e : unexpected) {\n      String chain = getChain(e);\n      Integer prev = counts.put(chain, 1);\n      if (prev != null) {\n        counts.put(chain, prev+1);\n      }\n    }\n\n    StringBuilder sb = new StringBuilder(\"EXCEPTION LIST:\");\n    for (Map.Entry<String,Integer> entry : counts.entrySet()) {\n      sb.append(\"\\n\\t\").append(entry.getValue()).append(\") \").append(entry.getKey());\n    }\n\n    log.error(sb.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6dc613ed6f75d1988140301ee8de8fdb056fa337":["a2a0d597d231e1e1141fcd33ad15e26e2a4266ac"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a2a0d597d231e1e1141fcd33ad15e26e2a4266ac":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6dc613ed6f75d1988140301ee8de8fdb056fa337"]},"commit2Childs":{"6dc613ed6f75d1988140301ee8de8fdb056fa337":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a2a0d597d231e1e1141fcd33ad15e26e2a4266ac"],"a2a0d597d231e1e1141fcd33ad15e26e2a4266ac":["6dc613ed6f75d1988140301ee8de8fdb056fa337"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}