{"path":"solr/core/src/java/org/apache/solr/schema/PointField#createFields(SchemaField,Object,float).mjava","commits":[{"id":"46dc9ac8b3e748407baaef82453138ff3974480c","date":1484789241,"type":0,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/PointField#createFields(SchemaField,Object,float).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public List<IndexableField> createFields(SchemaField sf, Object value, float boost) {\n    if (!(sf.hasDocValues() || sf.stored())) {\n      return Collections.singletonList(createField(sf, value, boost));\n    }\n    List<IndexableField> fields = new ArrayList<>();\n    final IndexableField field = createField(sf, value, boost);\n    fields.add(field);\n    \n    if (sf.hasDocValues()) {\n      if (sf.multiValued()) {\n        throw new UnsupportedOperationException(\"MultiValued Point fields with DocValues is not currently supported. Field: '\" + sf.getName() + \"'\");\n      } else {\n        final long bits;\n        if (field.numericValue() instanceof Integer || field.numericValue() instanceof Long) {\n          bits = field.numericValue().longValue();\n        } else if (field.numericValue() instanceof Float) {\n          bits = Float.floatToIntBits(field.numericValue().floatValue());\n        } else {\n          assert field.numericValue() instanceof Double;\n          bits = Double.doubleToLongBits(field.numericValue().doubleValue());\n        }\n        fields.add(new NumericDocValuesField(sf.getName(), bits));\n      }\n    }\n    if (sf.stored()) {\n      fields.add(getStoredField(sf, value));\n    }\n    return fields;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["0ff61c2e5ce6b1f26a271d9d454206db1917d628"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"90a682dc1bfd188ef61cc28373c7f5d700b4ac75","date":1485186128,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/PointField#createFields(SchemaField,Object,float).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public List<IndexableField> createFields(SchemaField sf, Object value, float boost) {\n    if (!(sf.hasDocValues() || sf.stored())) {\n      return Collections.singletonList(createField(sf, value, boost));\n    }\n    List<IndexableField> fields = new ArrayList<>();\n    final IndexableField field = createField(sf, value, boost);\n    fields.add(field);\n    \n    if (sf.hasDocValues()) {\n      if (sf.multiValued()) {\n        throw new UnsupportedOperationException(\"MultiValued Point fields with DocValues is not currently supported. Field: '\" + sf.getName() + \"'\");\n      } else {\n        final long bits;\n        if (field.numericValue() instanceof Integer || field.numericValue() instanceof Long) {\n          bits = field.numericValue().longValue();\n        } else if (field.numericValue() instanceof Float) {\n          bits = Float.floatToIntBits(field.numericValue().floatValue());\n        } else {\n          assert field.numericValue() instanceof Double;\n          bits = Double.doubleToLongBits(field.numericValue().doubleValue());\n        }\n        fields.add(new NumericDocValuesField(sf.getName(), bits));\n      }\n    }\n    if (sf.stored()) {\n      fields.add(getStoredField(sf, value));\n    }\n    return fields;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"744b111b17d15d490a648eb021bfa240e7f11556","date":1487008069,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/PointField#createFields(SchemaField,Object,float).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/PointField#createFields(SchemaField,Object,float).mjava","sourceNew":"  @Override\n  public List<IndexableField> createFields(SchemaField sf, Object value, float boost) {\n    if (!(sf.hasDocValues() || sf.stored())) {\n      return Collections.singletonList(createField(sf, value, boost));\n    }\n    List<IndexableField> fields = new ArrayList<>();\n    final IndexableField field = createField(sf, value, boost);\n    fields.add(field);\n    \n    if (sf.hasDocValues()) {\n      final long bits;\n      if (!sf.multiValued()) {\n        if (field.numericValue() instanceof Integer || field.numericValue() instanceof Long) {\n          bits = field.numericValue().longValue();\n        } else if (field.numericValue() instanceof Float) {\n          bits = Float.floatToIntBits(field.numericValue().floatValue());\n        } else {\n          assert field.numericValue() instanceof Double;\n          bits = Double.doubleToLongBits(field.numericValue().doubleValue());\n        }\n        fields.add(new NumericDocValuesField(sf.getName(), bits));\n      } else {\n        // MultiValued\n        if (field.numericValue() instanceof Integer || field.numericValue() instanceof Long) {\n          bits = field.numericValue().longValue();\n        } else if (field.numericValue() instanceof Float) {\n          bits = NumericUtils.floatToSortableInt(field.numericValue().floatValue());\n        } else {\n          assert field.numericValue() instanceof Double;\n          bits = NumericUtils.doubleToSortableLong(field.numericValue().doubleValue());\n        }\n        fields.add(new SortedNumericDocValuesField(sf.getName(), bits));\n      }\n    } \n    if (sf.stored()) {\n      fields.add(getStoredField(sf, value));\n    }\n    return fields;\n  }\n\n","sourceOld":"  @Override\n  public List<IndexableField> createFields(SchemaField sf, Object value, float boost) {\n    if (!(sf.hasDocValues() || sf.stored())) {\n      return Collections.singletonList(createField(sf, value, boost));\n    }\n    List<IndexableField> fields = new ArrayList<>();\n    final IndexableField field = createField(sf, value, boost);\n    fields.add(field);\n    \n    if (sf.hasDocValues()) {\n      if (sf.multiValued()) {\n        throw new UnsupportedOperationException(\"MultiValued Point fields with DocValues is not currently supported. Field: '\" + sf.getName() + \"'\");\n      } else {\n        final long bits;\n        if (field.numericValue() instanceof Integer || field.numericValue() instanceof Long) {\n          bits = field.numericValue().longValue();\n        } else if (field.numericValue() instanceof Float) {\n          bits = Float.floatToIntBits(field.numericValue().floatValue());\n        } else {\n          assert field.numericValue() instanceof Double;\n          bits = Double.doubleToLongBits(field.numericValue().doubleValue());\n        }\n        fields.add(new NumericDocValuesField(sf.getName(), bits));\n      }\n    }\n    if (sf.stored()) {\n      fields.add(getStoredField(sf, value));\n    }\n    return fields;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"022a4de90e0479b604264ca9c2e134c996454ab3","date":1487118265,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/PointField#createFields(SchemaField,Object,float).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/PointField#createFields(SchemaField,Object,float).mjava","sourceNew":"  @Override\n  public List<IndexableField> createFields(SchemaField sf, Object value, float boost) {\n    if (!(sf.hasDocValues() || sf.stored())) {\n      return Collections.singletonList(createField(sf, value, boost));\n    }\n    List<IndexableField> fields = new ArrayList<>();\n    final IndexableField field = createField(sf, value, boost);\n    fields.add(field);\n    \n    if (sf.hasDocValues()) {\n      final long bits;\n      if (!sf.multiValued()) {\n        if (field.numericValue() instanceof Integer || field.numericValue() instanceof Long) {\n          bits = field.numericValue().longValue();\n        } else if (field.numericValue() instanceof Float) {\n          bits = Float.floatToIntBits(field.numericValue().floatValue());\n        } else {\n          assert field.numericValue() instanceof Double;\n          bits = Double.doubleToLongBits(field.numericValue().doubleValue());\n        }\n        fields.add(new NumericDocValuesField(sf.getName(), bits));\n      } else {\n        // MultiValued\n        if (field.numericValue() instanceof Integer || field.numericValue() instanceof Long) {\n          bits = field.numericValue().longValue();\n        } else if (field.numericValue() instanceof Float) {\n          bits = NumericUtils.floatToSortableInt(field.numericValue().floatValue());\n        } else {\n          assert field.numericValue() instanceof Double;\n          bits = NumericUtils.doubleToSortableLong(field.numericValue().doubleValue());\n        }\n        fields.add(new SortedNumericDocValuesField(sf.getName(), bits));\n      }\n    } \n    if (sf.stored()) {\n      fields.add(getStoredField(sf, value));\n    }\n    return fields;\n  }\n\n","sourceOld":"  @Override\n  public List<IndexableField> createFields(SchemaField sf, Object value, float boost) {\n    if (!(sf.hasDocValues() || sf.stored())) {\n      return Collections.singletonList(createField(sf, value, boost));\n    }\n    List<IndexableField> fields = new ArrayList<>();\n    final IndexableField field = createField(sf, value, boost);\n    fields.add(field);\n    \n    if (sf.hasDocValues()) {\n      if (sf.multiValued()) {\n        throw new UnsupportedOperationException(\"MultiValued Point fields with DocValues is not currently supported. Field: '\" + sf.getName() + \"'\");\n      } else {\n        final long bits;\n        if (field.numericValue() instanceof Integer || field.numericValue() instanceof Long) {\n          bits = field.numericValue().longValue();\n        } else if (field.numericValue() instanceof Float) {\n          bits = Float.floatToIntBits(field.numericValue().floatValue());\n        } else {\n          assert field.numericValue() instanceof Double;\n          bits = Double.doubleToLongBits(field.numericValue().doubleValue());\n        }\n        fields.add(new NumericDocValuesField(sf.getName(), bits));\n      }\n    }\n    if (sf.stored()) {\n      fields.add(getStoredField(sf, value));\n    }\n    return fields;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b49c0eb9ef7bc25609a89e7986ce7e6eeb9c9d96","date":1487122334,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/PointField#createFields(SchemaField,Object,float).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/PointField#createFields(SchemaField,Object,float).mjava","sourceNew":"  @Override\n  public List<IndexableField> createFields(SchemaField sf, Object value, float boost) {\n    if (!(sf.hasDocValues() || sf.stored())) {\n      return Collections.singletonList(createField(sf, value, boost));\n    }\n    List<IndexableField> fields = new ArrayList<>();\n    final IndexableField field = createField(sf, value, boost);\n    fields.add(field);\n    \n    if (sf.hasDocValues()) {\n      if (sf.multiValued()) {\n        throw new UnsupportedOperationException(\"MultiValued Point fields with DocValues is not currently supported. Field: '\" + sf.getName() + \"'\");\n      } else {\n        final long bits;\n        if (field.numericValue() instanceof Integer || field.numericValue() instanceof Long) {\n          bits = field.numericValue().longValue();\n        } else if (field.numericValue() instanceof Float) {\n          bits = Float.floatToIntBits(field.numericValue().floatValue());\n        } else {\n          assert field.numericValue() instanceof Double;\n          bits = Double.doubleToLongBits(field.numericValue().doubleValue());\n        }\n        fields.add(new NumericDocValuesField(sf.getName(), bits));\n      }\n    }\n    if (sf.stored()) {\n      fields.add(getStoredField(sf, value));\n    }\n    return fields;\n  }\n\n","sourceOld":"  @Override\n  public List<IndexableField> createFields(SchemaField sf, Object value, float boost) {\n    if (!(sf.hasDocValues() || sf.stored())) {\n      return Collections.singletonList(createField(sf, value, boost));\n    }\n    List<IndexableField> fields = new ArrayList<>();\n    final IndexableField field = createField(sf, value, boost);\n    fields.add(field);\n    \n    if (sf.hasDocValues()) {\n      final long bits;\n      if (!sf.multiValued()) {\n        if (field.numericValue() instanceof Integer || field.numericValue() instanceof Long) {\n          bits = field.numericValue().longValue();\n        } else if (field.numericValue() instanceof Float) {\n          bits = Float.floatToIntBits(field.numericValue().floatValue());\n        } else {\n          assert field.numericValue() instanceof Double;\n          bits = Double.doubleToLongBits(field.numericValue().doubleValue());\n        }\n        fields.add(new NumericDocValuesField(sf.getName(), bits));\n      } else {\n        // MultiValued\n        if (field.numericValue() instanceof Integer || field.numericValue() instanceof Long) {\n          bits = field.numericValue().longValue();\n        } else if (field.numericValue() instanceof Float) {\n          bits = NumericUtils.floatToSortableInt(field.numericValue().floatValue());\n        } else {\n          assert field.numericValue() instanceof Double;\n          bits = NumericUtils.doubleToSortableLong(field.numericValue().doubleValue());\n        }\n        fields.add(new SortedNumericDocValuesField(sf.getName(), bits));\n      }\n    } \n    if (sf.stored()) {\n      fields.add(getStoredField(sf, value));\n    }\n    return fields;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"897b06b1364bd1f658a8be7591e43f0851458e7f","date":1487123008,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/PointField#createFields(SchemaField,Object,float).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/PointField#createFields(SchemaField,Object,float).mjava","sourceNew":"  @Override\n  public List<IndexableField> createFields(SchemaField sf, Object value, float boost) {\n    if (!(sf.hasDocValues() || sf.stored())) {\n      return Collections.singletonList(createField(sf, value, boost));\n    }\n    List<IndexableField> fields = new ArrayList<>();\n    final IndexableField field = createField(sf, value, boost);\n    fields.add(field);\n    \n    if (sf.hasDocValues()) {\n      final long bits;\n      if (!sf.multiValued()) {\n        if (field.numericValue() instanceof Integer || field.numericValue() instanceof Long) {\n          bits = field.numericValue().longValue();\n        } else if (field.numericValue() instanceof Float) {\n          bits = Float.floatToIntBits(field.numericValue().floatValue());\n        } else {\n          assert field.numericValue() instanceof Double;\n          bits = Double.doubleToLongBits(field.numericValue().doubleValue());\n        }\n        fields.add(new NumericDocValuesField(sf.getName(), bits));\n      } else {\n        // MultiValued\n        if (field.numericValue() instanceof Integer || field.numericValue() instanceof Long) {\n          bits = field.numericValue().longValue();\n        } else if (field.numericValue() instanceof Float) {\n          bits = NumericUtils.floatToSortableInt(field.numericValue().floatValue());\n        } else {\n          assert field.numericValue() instanceof Double;\n          bits = NumericUtils.doubleToSortableLong(field.numericValue().doubleValue());\n        }\n        fields.add(new SortedNumericDocValuesField(sf.getName(), bits));\n      }\n    } \n    if (sf.stored()) {\n      fields.add(getStoredField(sf, value));\n    }\n    return fields;\n  }\n\n","sourceOld":"  @Override\n  public List<IndexableField> createFields(SchemaField sf, Object value, float boost) {\n    if (!(sf.hasDocValues() || sf.stored())) {\n      return Collections.singletonList(createField(sf, value, boost));\n    }\n    List<IndexableField> fields = new ArrayList<>();\n    final IndexableField field = createField(sf, value, boost);\n    fields.add(field);\n    \n    if (sf.hasDocValues()) {\n      if (sf.multiValued()) {\n        throw new UnsupportedOperationException(\"MultiValued Point fields with DocValues is not currently supported. Field: '\" + sf.getName() + \"'\");\n      } else {\n        final long bits;\n        if (field.numericValue() instanceof Integer || field.numericValue() instanceof Long) {\n          bits = field.numericValue().longValue();\n        } else if (field.numericValue() instanceof Float) {\n          bits = Float.floatToIntBits(field.numericValue().floatValue());\n        } else {\n          assert field.numericValue() instanceof Double;\n          bits = Double.doubleToLongBits(field.numericValue().doubleValue());\n        }\n        fields.add(new NumericDocValuesField(sf.getName(), bits));\n      }\n    }\n    if (sf.stored()) {\n      fields.add(getStoredField(sf, value));\n    }\n    return fields;\n  }\n\n","bugFix":null,"bugIntro":["0ff61c2e5ce6b1f26a271d9d454206db1917d628"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"acd9883560fd89e6448b2b447302fe543040cd4f","date":1488478696,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/PointField#createFields(SchemaField,Object).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/PointField#createFields(SchemaField,Object,float).mjava","sourceNew":"  @Override\n  public List<IndexableField> createFields(SchemaField sf, Object value) {\n    if (!(sf.hasDocValues() || sf.stored())) {\n      return Collections.singletonList(createField(sf, value));\n    }\n    List<IndexableField> fields = new ArrayList<>();\n    final IndexableField field = createField(sf, value);\n    fields.add(field);\n    \n    if (sf.hasDocValues()) {\n      final long bits;\n      if (!sf.multiValued()) {\n        if (field.numericValue() instanceof Integer || field.numericValue() instanceof Long) {\n          bits = field.numericValue().longValue();\n        } else if (field.numericValue() instanceof Float) {\n          bits = Float.floatToIntBits(field.numericValue().floatValue());\n        } else {\n          assert field.numericValue() instanceof Double;\n          bits = Double.doubleToLongBits(field.numericValue().doubleValue());\n        }\n        fields.add(new NumericDocValuesField(sf.getName(), bits));\n      } else {\n        // MultiValued\n        if (field.numericValue() instanceof Integer || field.numericValue() instanceof Long) {\n          bits = field.numericValue().longValue();\n        } else if (field.numericValue() instanceof Float) {\n          bits = NumericUtils.floatToSortableInt(field.numericValue().floatValue());\n        } else {\n          assert field.numericValue() instanceof Double;\n          bits = NumericUtils.doubleToSortableLong(field.numericValue().doubleValue());\n        }\n        fields.add(new SortedNumericDocValuesField(sf.getName(), bits));\n      }\n    } \n    if (sf.stored()) {\n      fields.add(getStoredField(sf, value));\n    }\n    return fields;\n  }\n\n","sourceOld":"  @Override\n  public List<IndexableField> createFields(SchemaField sf, Object value, float boost) {\n    if (!(sf.hasDocValues() || sf.stored())) {\n      return Collections.singletonList(createField(sf, value, boost));\n    }\n    List<IndexableField> fields = new ArrayList<>();\n    final IndexableField field = createField(sf, value, boost);\n    fields.add(field);\n    \n    if (sf.hasDocValues()) {\n      final long bits;\n      if (!sf.multiValued()) {\n        if (field.numericValue() instanceof Integer || field.numericValue() instanceof Long) {\n          bits = field.numericValue().longValue();\n        } else if (field.numericValue() instanceof Float) {\n          bits = Float.floatToIntBits(field.numericValue().floatValue());\n        } else {\n          assert field.numericValue() instanceof Double;\n          bits = Double.doubleToLongBits(field.numericValue().doubleValue());\n        }\n        fields.add(new NumericDocValuesField(sf.getName(), bits));\n      } else {\n        // MultiValued\n        if (field.numericValue() instanceof Integer || field.numericValue() instanceof Long) {\n          bits = field.numericValue().longValue();\n        } else if (field.numericValue() instanceof Float) {\n          bits = NumericUtils.floatToSortableInt(field.numericValue().floatValue());\n        } else {\n          assert field.numericValue() instanceof Double;\n          bits = NumericUtils.doubleToSortableLong(field.numericValue().doubleValue());\n        }\n        fields.add(new SortedNumericDocValuesField(sf.getName(), bits));\n      }\n    } \n    if (sf.stored()) {\n      fields.add(getStoredField(sf, value));\n    }\n    return fields;\n  }\n\n","bugFix":null,"bugIntro":["0ff61c2e5ce6b1f26a271d9d454206db1917d628"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"b49c0eb9ef7bc25609a89e7986ce7e6eeb9c9d96":["022a4de90e0479b604264ca9c2e134c996454ab3"],"022a4de90e0479b604264ca9c2e134c996454ab3":["46dc9ac8b3e748407baaef82453138ff3974480c","744b111b17d15d490a648eb021bfa240e7f11556"],"897b06b1364bd1f658a8be7591e43f0851458e7f":["b49c0eb9ef7bc25609a89e7986ce7e6eeb9c9d96"],"46dc9ac8b3e748407baaef82453138ff3974480c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"744b111b17d15d490a648eb021bfa240e7f11556":["46dc9ac8b3e748407baaef82453138ff3974480c"],"acd9883560fd89e6448b2b447302fe543040cd4f":["897b06b1364bd1f658a8be7591e43f0851458e7f"],"90a682dc1bfd188ef61cc28373c7f5d700b4ac75":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","46dc9ac8b3e748407baaef82453138ff3974480c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["acd9883560fd89e6448b2b447302fe543040cd4f"]},"commit2Childs":{"b49c0eb9ef7bc25609a89e7986ce7e6eeb9c9d96":["897b06b1364bd1f658a8be7591e43f0851458e7f"],"022a4de90e0479b604264ca9c2e134c996454ab3":["b49c0eb9ef7bc25609a89e7986ce7e6eeb9c9d96"],"897b06b1364bd1f658a8be7591e43f0851458e7f":["acd9883560fd89e6448b2b447302fe543040cd4f"],"46dc9ac8b3e748407baaef82453138ff3974480c":["022a4de90e0479b604264ca9c2e134c996454ab3","744b111b17d15d490a648eb021bfa240e7f11556","90a682dc1bfd188ef61cc28373c7f5d700b4ac75"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["46dc9ac8b3e748407baaef82453138ff3974480c","90a682dc1bfd188ef61cc28373c7f5d700b4ac75"],"744b111b17d15d490a648eb021bfa240e7f11556":["022a4de90e0479b604264ca9c2e134c996454ab3"],"acd9883560fd89e6448b2b447302fe543040cd4f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"90a682dc1bfd188ef61cc28373c7f5d700b4ac75":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["90a682dc1bfd188ef61cc28373c7f5d700b4ac75","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}