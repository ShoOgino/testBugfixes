{"path":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/LineEntityProcessor#nextRow().mjava","commits":[{"id":"3b748a573c805ec5a2eb0b49f143381e82e25bac","date":1240222370,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/LineEntityProcessor#nextRow().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Reads lines from the url till it finds a lines that matches the\n   * optional acceptLineRegex and does not match the optional skipLineRegex.\n   *\n   * @return A row containing a minimum of one field \"rawLine\" or null to signal\n   * end of file. The rawLine is the as line as returned by readLine()\n   * from the url. However transformers can be used to create as \n   * many other fields as required.\n   */\n  public Map<String, Object> nextRow() {\n    if (reader == null) {\n      reader = new BufferedReader((Reader) context.getDataSource().getData(url));\n    }\n\n    String line;\n    \n    while ( true ) { \n      // read a line from the input file\n      try {\n        line = reader.readLine();\n      }\n      catch (IOException exp) {\n        throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n             \"Problem reading from input\", exp);\n      }\n  \n      if (line == null) return null; // end of input       \n\n      // First scan whole line to see if we want it\n      if (acceptLineRegex != null && ! acceptLineRegex.matcher(line).find()) continue;\n      if (skipLineRegex != null &&   skipLineRegex.matcher(line).find()) continue;\n      // Contruct the 'row' of fields\n      Map<String, Object> row = new HashMap<String, Object>();\n      row.put(\"rawLine\", line);\n      return row;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["233d157757a491ed2efb60c16b29af94d5cd8be4","233d157757a491ed2efb60c16b29af94d5cd8be4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/LineEntityProcessor#nextRow().mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/LineEntityProcessor#nextRow().mjava","sourceNew":"  /**\n   * Reads lines from the url till it finds a lines that matches the\n   * optional acceptLineRegex and does not match the optional skipLineRegex.\n   *\n   * @return A row containing a minimum of one field \"rawLine\" or null to signal\n   * end of file. The rawLine is the as line as returned by readLine()\n   * from the url. However transformers can be used to create as \n   * many other fields as required.\n   */\n  public Map<String, Object> nextRow() {\n    if (reader == null) {\n      reader = new BufferedReader((Reader) context.getDataSource().getData(url));\n    }\n\n    String line;\n    \n    while ( true ) { \n      // read a line from the input file\n      try {\n        line = reader.readLine();\n      }\n      catch (IOException exp) {\n        throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n             \"Problem reading from input\", exp);\n      }\n  \n      if (line == null) return null; // end of input       \n\n      // First scan whole line to see if we want it\n      if (acceptLineRegex != null && ! acceptLineRegex.matcher(line).find()) continue;\n      if (skipLineRegex != null &&   skipLineRegex.matcher(line).find()) continue;\n      // Contruct the 'row' of fields\n      Map<String, Object> row = new HashMap<String, Object>();\n      row.put(\"rawLine\", line);\n      return row;\n    }\n  }\n\n","sourceOld":"  /**\n   * Reads lines from the url till it finds a lines that matches the\n   * optional acceptLineRegex and does not match the optional skipLineRegex.\n   *\n   * @return A row containing a minimum of one field \"rawLine\" or null to signal\n   * end of file. The rawLine is the as line as returned by readLine()\n   * from the url. However transformers can be used to create as \n   * many other fields as required.\n   */\n  public Map<String, Object> nextRow() {\n    if (reader == null) {\n      reader = new BufferedReader((Reader) context.getDataSource().getData(url));\n    }\n\n    String line;\n    \n    while ( true ) { \n      // read a line from the input file\n      try {\n        line = reader.readLine();\n      }\n      catch (IOException exp) {\n        throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n             \"Problem reading from input\", exp);\n      }\n  \n      if (line == null) return null; // end of input       \n\n      // First scan whole line to see if we want it\n      if (acceptLineRegex != null && ! acceptLineRegex.matcher(line).find()) continue;\n      if (skipLineRegex != null &&   skipLineRegex.matcher(line).find()) continue;\n      // Contruct the 'row' of fields\n      Map<String, Object> row = new HashMap<String, Object>();\n      row.put(\"rawLine\", line);\n      return row;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"3b748a573c805ec5a2eb0b49f143381e82e25bac":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"ad94625fb8d088209f46650c8097196fec67f00c":["3b748a573c805ec5a2eb0b49f143381e82e25bac"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["3b748a573c805ec5a2eb0b49f143381e82e25bac"],"3b748a573c805ec5a2eb0b49f143381e82e25bac":["ad94625fb8d088209f46650c8097196fec67f00c"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}