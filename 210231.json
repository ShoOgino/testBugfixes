{"path":"solr/src/solrj/org/apache/solr/client/solrj/impl/StreamingBinaryResponseParser#processResponse(InputStream,String).mjava","commits":[{"id":"e5ac9c2d15e75a72c2c461039fb6789654439323","date":1284413428,"type":0,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/src/solrj/org/apache/solr/client/solrj/impl/StreamingBinaryResponseParser#processResponse(InputStream,String).mjava","pathOld":"/dev/null","sourceNew":"  @Override\r\n  public NamedList<Object> processResponse(InputStream body, String encoding) {\r\n    try {\r\n      JavaBinCodec codec = new JavaBinCodec() {\r\n\r\n        public SolrDocument readSolrDocument(FastInputStream dis) throws IOException {\r\n          SolrDocument doc = super.readSolrDocument(dis);\r\n          callback.streamSolrDocument( doc );\r\n          return null;\r\n        }\r\n\r\n        public SolrDocumentList readSolrDocumentList(FastInputStream dis) throws IOException {\r\n          SolrDocumentList solrDocs = new SolrDocumentList();\r\n          List list = (List) readVal(dis);\r\n          solrDocs.setNumFound((Long) list.get(0));\r\n          solrDocs.setStart((Long) list.get(1));\r\n          solrDocs.setMaxScore((Float) list.get(2));\r\n\r\n          callback.streamDocListInfo( \r\n              solrDocs.getNumFound(), \r\n              solrDocs.getStart(), \r\n              solrDocs.getMaxScore() );\r\n          \r\n          // Read the Array\r\n          tagByte = dis.readByte();\r\n          if( (tagByte >>> 5) != (ARR >>> 5) ) {\r\n            throw new RuntimeException( \"doclist must have an array\" );\r\n          } \r\n          int sz = readSize(dis);\r\n          for (int i = 0; i < sz; i++) {\r\n            // must be a SolrDocument\r\n            readVal( dis ); \r\n          }\r\n          return solrDocs;\r\n        }\r\n      };\r\n      \r\n      return (NamedList<Object>) codec.unmarshal(body);\r\n    } \r\n    catch (IOException e) {\r\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"parsing error\", e);\r\n    }\r\n  }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e904610f0db3fdf2ea10c5701f5f4f86c1e9ade","date":1286051536,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/solrj/org/apache/solr/client/solrj/impl/StreamingBinaryResponseParser#processResponse(InputStream,String).mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/impl/StreamingBinaryResponseParser#processResponse(InputStream,String).mjava","sourceNew":"  @Override\n  public NamedList<Object> processResponse(InputStream body, String encoding) {\n    try {\n      JavaBinCodec codec = new JavaBinCodec() {\n\n        public SolrDocument readSolrDocument(FastInputStream dis) throws IOException {\n          SolrDocument doc = super.readSolrDocument(dis);\n          callback.streamSolrDocument( doc );\n          return null;\n        }\n\n        public SolrDocumentList readSolrDocumentList(FastInputStream dis) throws IOException {\n          SolrDocumentList solrDocs = new SolrDocumentList();\n          List list = (List) readVal(dis);\n          solrDocs.setNumFound((Long) list.get(0));\n          solrDocs.setStart((Long) list.get(1));\n          solrDocs.setMaxScore((Float) list.get(2));\n\n          callback.streamDocListInfo( \n              solrDocs.getNumFound(), \n              solrDocs.getStart(), \n              solrDocs.getMaxScore() );\n          \n          // Read the Array\n          tagByte = dis.readByte();\n          if( (tagByte >>> 5) != (ARR >>> 5) ) {\n            throw new RuntimeException( \"doclist must have an array\" );\n          } \n          int sz = readSize(dis);\n          for (int i = 0; i < sz; i++) {\n            // must be a SolrDocument\n            readVal( dis ); \n          }\n          return solrDocs;\n        }\n      };\n      \n      return (NamedList<Object>) codec.unmarshal(body);\n    } \n    catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"parsing error\", e);\n    }\n  }\n\n","sourceOld":"  @Override\r\n  public NamedList<Object> processResponse(InputStream body, String encoding) {\r\n    try {\r\n      JavaBinCodec codec = new JavaBinCodec() {\r\n\r\n        public SolrDocument readSolrDocument(FastInputStream dis) throws IOException {\r\n          SolrDocument doc = super.readSolrDocument(dis);\r\n          callback.streamSolrDocument( doc );\r\n          return null;\r\n        }\r\n\r\n        public SolrDocumentList readSolrDocumentList(FastInputStream dis) throws IOException {\r\n          SolrDocumentList solrDocs = new SolrDocumentList();\r\n          List list = (List) readVal(dis);\r\n          solrDocs.setNumFound((Long) list.get(0));\r\n          solrDocs.setStart((Long) list.get(1));\r\n          solrDocs.setMaxScore((Float) list.get(2));\r\n\r\n          callback.streamDocListInfo( \r\n              solrDocs.getNumFound(), \r\n              solrDocs.getStart(), \r\n              solrDocs.getMaxScore() );\r\n          \r\n          // Read the Array\r\n          tagByte = dis.readByte();\r\n          if( (tagByte >>> 5) != (ARR >>> 5) ) {\r\n            throw new RuntimeException( \"doclist must have an array\" );\r\n          } \r\n          int sz = readSize(dis);\r\n          for (int i = 0; i < sz; i++) {\r\n            // must be a SolrDocument\r\n            readVal( dis ); \r\n          }\r\n          return solrDocs;\r\n        }\r\n      };\r\n      \r\n      return (NamedList<Object>) codec.unmarshal(body);\r\n    } \r\n    catch (IOException e) {\r\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"parsing error\", e);\r\n    }\r\n  }\r\n\n","bugFix":null,"bugIntro":["1e6dffeb9665eb433bf45523ed358afef21c7f83","1e6dffeb9665eb433bf45523ed358afef21c7f83","1e6dffeb9665eb433bf45523ed358afef21c7f83"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/solrj/org/apache/solr/client/solrj/impl/StreamingBinaryResponseParser#processResponse(InputStream,String).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public NamedList<Object> processResponse(InputStream body, String encoding) {\n    try {\n      JavaBinCodec codec = new JavaBinCodec() {\n\n        public SolrDocument readSolrDocument(FastInputStream dis) throws IOException {\n          SolrDocument doc = super.readSolrDocument(dis);\n          callback.streamSolrDocument( doc );\n          return null;\n        }\n\n        public SolrDocumentList readSolrDocumentList(FastInputStream dis) throws IOException {\n          SolrDocumentList solrDocs = new SolrDocumentList();\n          List list = (List) readVal(dis);\n          solrDocs.setNumFound((Long) list.get(0));\n          solrDocs.setStart((Long) list.get(1));\n          solrDocs.setMaxScore((Float) list.get(2));\n\n          callback.streamDocListInfo( \n              solrDocs.getNumFound(), \n              solrDocs.getStart(), \n              solrDocs.getMaxScore() );\n          \n          // Read the Array\n          tagByte = dis.readByte();\n          if( (tagByte >>> 5) != (ARR >>> 5) ) {\n            throw new RuntimeException( \"doclist must have an array\" );\n          } \n          int sz = readSize(dis);\n          for (int i = 0; i < sz; i++) {\n            // must be a SolrDocument\n            readVal( dis ); \n          }\n          return solrDocs;\n        }\n      };\n      \n      return (NamedList<Object>) codec.unmarshal(body);\n    } \n    catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"parsing error\", e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01","date":1296400215,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/solrj/org/apache/solr/client/solrj/impl/StreamingBinaryResponseParser#processResponse(InputStream,String).mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/impl/StreamingBinaryResponseParser#processResponse(InputStream,String).mjava","sourceNew":"  @Override\n  public NamedList<Object> processResponse(InputStream body, String encoding) {\n    try {\n      JavaBinCodec codec = new JavaBinCodec() {\n\n        @Override\n        public SolrDocument readSolrDocument(FastInputStream dis) throws IOException {\n          SolrDocument doc = super.readSolrDocument(dis);\n          callback.streamSolrDocument( doc );\n          return null;\n        }\n\n        @Override\n        public SolrDocumentList readSolrDocumentList(FastInputStream dis) throws IOException {\n          SolrDocumentList solrDocs = new SolrDocumentList();\n          List list = (List) readVal(dis);\n          solrDocs.setNumFound((Long) list.get(0));\n          solrDocs.setStart((Long) list.get(1));\n          solrDocs.setMaxScore((Float) list.get(2));\n\n          callback.streamDocListInfo( \n              solrDocs.getNumFound(), \n              solrDocs.getStart(), \n              solrDocs.getMaxScore() );\n          \n          // Read the Array\n          tagByte = dis.readByte();\n          if( (tagByte >>> 5) != (ARR >>> 5) ) {\n            throw new RuntimeException( \"doclist must have an array\" );\n          } \n          int sz = readSize(dis);\n          for (int i = 0; i < sz; i++) {\n            // must be a SolrDocument\n            readVal( dis ); \n          }\n          return solrDocs;\n        }\n      };\n      \n      return (NamedList<Object>) codec.unmarshal(body);\n    } \n    catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"parsing error\", e);\n    }\n  }\n\n","sourceOld":"  @Override\n  public NamedList<Object> processResponse(InputStream body, String encoding) {\n    try {\n      JavaBinCodec codec = new JavaBinCodec() {\n\n        public SolrDocument readSolrDocument(FastInputStream dis) throws IOException {\n          SolrDocument doc = super.readSolrDocument(dis);\n          callback.streamSolrDocument( doc );\n          return null;\n        }\n\n        public SolrDocumentList readSolrDocumentList(FastInputStream dis) throws IOException {\n          SolrDocumentList solrDocs = new SolrDocumentList();\n          List list = (List) readVal(dis);\n          solrDocs.setNumFound((Long) list.get(0));\n          solrDocs.setStart((Long) list.get(1));\n          solrDocs.setMaxScore((Float) list.get(2));\n\n          callback.streamDocListInfo( \n              solrDocs.getNumFound(), \n              solrDocs.getStart(), \n              solrDocs.getMaxScore() );\n          \n          // Read the Array\n          tagByte = dis.readByte();\n          if( (tagByte >>> 5) != (ARR >>> 5) ) {\n            throw new RuntimeException( \"doclist must have an array\" );\n          } \n          int sz = readSize(dis);\n          for (int i = 0; i < sz; i++) {\n            // must be a SolrDocument\n            readVal( dis ); \n          }\n          return solrDocs;\n        }\n      };\n      \n      return (NamedList<Object>) codec.unmarshal(body);\n    } \n    catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"parsing error\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/solrj/org/apache/solr/client/solrj/impl/StreamingBinaryResponseParser#processResponse(InputStream,String).mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/impl/StreamingBinaryResponseParser#processResponse(InputStream,String).mjava","sourceNew":"  @Override\n  public NamedList<Object> processResponse(InputStream body, String encoding) {\n    try {\n      JavaBinCodec codec = new JavaBinCodec() {\n\n        @Override\n        public SolrDocument readSolrDocument(FastInputStream dis) throws IOException {\n          SolrDocument doc = super.readSolrDocument(dis);\n          callback.streamSolrDocument( doc );\n          return null;\n        }\n\n        @Override\n        public SolrDocumentList readSolrDocumentList(FastInputStream dis) throws IOException {\n          SolrDocumentList solrDocs = new SolrDocumentList();\n          List list = (List) readVal(dis);\n          solrDocs.setNumFound((Long) list.get(0));\n          solrDocs.setStart((Long) list.get(1));\n          solrDocs.setMaxScore((Float) list.get(2));\n\n          callback.streamDocListInfo( \n              solrDocs.getNumFound(), \n              solrDocs.getStart(), \n              solrDocs.getMaxScore() );\n          \n          // Read the Array\n          tagByte = dis.readByte();\n          if( (tagByte >>> 5) != (ARR >>> 5) ) {\n            throw new RuntimeException( \"doclist must have an array\" );\n          } \n          int sz = readSize(dis);\n          for (int i = 0; i < sz; i++) {\n            // must be a SolrDocument\n            readVal( dis ); \n          }\n          return solrDocs;\n        }\n      };\n      \n      return (NamedList<Object>) codec.unmarshal(body);\n    } \n    catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"parsing error\", e);\n    }\n  }\n\n","sourceOld":"  @Override\n  public NamedList<Object> processResponse(InputStream body, String encoding) {\n    try {\n      JavaBinCodec codec = new JavaBinCodec() {\n\n        public SolrDocument readSolrDocument(FastInputStream dis) throws IOException {\n          SolrDocument doc = super.readSolrDocument(dis);\n          callback.streamSolrDocument( doc );\n          return null;\n        }\n\n        public SolrDocumentList readSolrDocumentList(FastInputStream dis) throws IOException {\n          SolrDocumentList solrDocs = new SolrDocumentList();\n          List list = (List) readVal(dis);\n          solrDocs.setNumFound((Long) list.get(0));\n          solrDocs.setStart((Long) list.get(1));\n          solrDocs.setMaxScore((Float) list.get(2));\n\n          callback.streamDocListInfo( \n              solrDocs.getNumFound(), \n              solrDocs.getStart(), \n              solrDocs.getMaxScore() );\n          \n          // Read the Array\n          tagByte = dis.readByte();\n          if( (tagByte >>> 5) != (ARR >>> 5) ) {\n            throw new RuntimeException( \"doclist must have an array\" );\n          } \n          int sz = readSize(dis);\n          for (int i = 0; i < sz; i++) {\n            // must be a SolrDocument\n            readVal( dis ); \n          }\n          return solrDocs;\n        }\n      };\n      \n      return (NamedList<Object>) codec.unmarshal(body);\n    } \n    catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"parsing error\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/solrj/org/apache/solr/client/solrj/impl/StreamingBinaryResponseParser#processResponse(InputStream,String).mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/impl/StreamingBinaryResponseParser#processResponse(InputStream,String).mjava","sourceNew":"  @Override\n  public NamedList<Object> processResponse(InputStream body, String encoding) {\n    try {\n      JavaBinCodec codec = new JavaBinCodec() {\n\n        @Override\n        public SolrDocument readSolrDocument(FastInputStream dis) throws IOException {\n          SolrDocument doc = super.readSolrDocument(dis);\n          callback.streamSolrDocument( doc );\n          return null;\n        }\n\n        @Override\n        public SolrDocumentList readSolrDocumentList(FastInputStream dis) throws IOException {\n          SolrDocumentList solrDocs = new SolrDocumentList();\n          List list = (List) readVal(dis);\n          solrDocs.setNumFound((Long) list.get(0));\n          solrDocs.setStart((Long) list.get(1));\n          solrDocs.setMaxScore((Float) list.get(2));\n\n          callback.streamDocListInfo( \n              solrDocs.getNumFound(), \n              solrDocs.getStart(), \n              solrDocs.getMaxScore() );\n          \n          // Read the Array\n          tagByte = dis.readByte();\n          if( (tagByte >>> 5) != (ARR >>> 5) ) {\n            throw new RuntimeException( \"doclist must have an array\" );\n          } \n          int sz = readSize(dis);\n          for (int i = 0; i < sz; i++) {\n            // must be a SolrDocument\n            readVal( dis ); \n          }\n          return solrDocs;\n        }\n      };\n      \n      return (NamedList<Object>) codec.unmarshal(body);\n    } \n    catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"parsing error\", e);\n    }\n  }\n\n","sourceOld":"  @Override\n  public NamedList<Object> processResponse(InputStream body, String encoding) {\n    try {\n      JavaBinCodec codec = new JavaBinCodec() {\n\n        public SolrDocument readSolrDocument(FastInputStream dis) throws IOException {\n          SolrDocument doc = super.readSolrDocument(dis);\n          callback.streamSolrDocument( doc );\n          return null;\n        }\n\n        public SolrDocumentList readSolrDocumentList(FastInputStream dis) throws IOException {\n          SolrDocumentList solrDocs = new SolrDocumentList();\n          List list = (List) readVal(dis);\n          solrDocs.setNumFound((Long) list.get(0));\n          solrDocs.setStart((Long) list.get(1));\n          solrDocs.setMaxScore((Float) list.get(2));\n\n          callback.streamDocListInfo( \n              solrDocs.getNumFound(), \n              solrDocs.getStart(), \n              solrDocs.getMaxScore() );\n          \n          // Read the Array\n          tagByte = dis.readByte();\n          if( (tagByte >>> 5) != (ARR >>> 5) ) {\n            throw new RuntimeException( \"doclist must have an array\" );\n          } \n          int sz = readSize(dis);\n          for (int i = 0; i < sz; i++) {\n            // must be a SolrDocument\n            readVal( dis ); \n          }\n          return solrDocs;\n        }\n      };\n      \n      return (NamedList<Object>) codec.unmarshal(body);\n    } \n    catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"parsing error\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/StreamingBinaryResponseParser#processResponse(InputStream,String).mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/impl/StreamingBinaryResponseParser#processResponse(InputStream,String).mjava","sourceNew":"  @Override\n  public NamedList<Object> processResponse(InputStream body, String encoding) {\n    try {\n      JavaBinCodec codec = new JavaBinCodec() {\n\n        @Override\n        public SolrDocument readSolrDocument(FastInputStream dis) throws IOException {\n          SolrDocument doc = super.readSolrDocument(dis);\n          callback.streamSolrDocument( doc );\n          return null;\n        }\n\n        @Override\n        public SolrDocumentList readSolrDocumentList(FastInputStream dis) throws IOException {\n          SolrDocumentList solrDocs = new SolrDocumentList();\n          List list = (List) readVal(dis);\n          solrDocs.setNumFound((Long) list.get(0));\n          solrDocs.setStart((Long) list.get(1));\n          solrDocs.setMaxScore((Float) list.get(2));\n\n          callback.streamDocListInfo( \n              solrDocs.getNumFound(), \n              solrDocs.getStart(), \n              solrDocs.getMaxScore() );\n          \n          // Read the Array\n          tagByte = dis.readByte();\n          if( (tagByte >>> 5) != (ARR >>> 5) ) {\n            throw new RuntimeException( \"doclist must have an array\" );\n          } \n          int sz = readSize(dis);\n          for (int i = 0; i < sz; i++) {\n            // must be a SolrDocument\n            readVal( dis ); \n          }\n          return solrDocs;\n        }\n      };\n      \n      return (NamedList<Object>) codec.unmarshal(body);\n    } \n    catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"parsing error\", e);\n    }\n  }\n\n","sourceOld":"  @Override\n  public NamedList<Object> processResponse(InputStream body, String encoding) {\n    try {\n      JavaBinCodec codec = new JavaBinCodec() {\n\n        @Override\n        public SolrDocument readSolrDocument(FastInputStream dis) throws IOException {\n          SolrDocument doc = super.readSolrDocument(dis);\n          callback.streamSolrDocument( doc );\n          return null;\n        }\n\n        @Override\n        public SolrDocumentList readSolrDocumentList(FastInputStream dis) throws IOException {\n          SolrDocumentList solrDocs = new SolrDocumentList();\n          List list = (List) readVal(dis);\n          solrDocs.setNumFound((Long) list.get(0));\n          solrDocs.setStart((Long) list.get(1));\n          solrDocs.setMaxScore((Float) list.get(2));\n\n          callback.streamDocListInfo( \n              solrDocs.getNumFound(), \n              solrDocs.getStart(), \n              solrDocs.getMaxScore() );\n          \n          // Read the Array\n          tagByte = dis.readByte();\n          if( (tagByte >>> 5) != (ARR >>> 5) ) {\n            throw new RuntimeException( \"doclist must have an array\" );\n          } \n          int sz = readSize(dis);\n          for (int i = 0; i < sz; i++) {\n            // must be a SolrDocument\n            readVal( dis ); \n          }\n          return solrDocs;\n        }\n      };\n      \n      return (NamedList<Object>) codec.unmarshal(body);\n    } \n    catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"parsing error\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/StreamingBinaryResponseParser#processResponse(InputStream,String).mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/impl/StreamingBinaryResponseParser#processResponse(InputStream,String).mjava","sourceNew":"  @Override\n  public NamedList<Object> processResponse(InputStream body, String encoding) {\n    try {\n      JavaBinCodec codec = new JavaBinCodec() {\n\n        @Override\n        public SolrDocument readSolrDocument(FastInputStream dis) throws IOException {\n          SolrDocument doc = super.readSolrDocument(dis);\n          callback.streamSolrDocument( doc );\n          return null;\n        }\n\n        @Override\n        public SolrDocumentList readSolrDocumentList(FastInputStream dis) throws IOException {\n          SolrDocumentList solrDocs = new SolrDocumentList();\n          List list = (List) readVal(dis);\n          solrDocs.setNumFound((Long) list.get(0));\n          solrDocs.setStart((Long) list.get(1));\n          solrDocs.setMaxScore((Float) list.get(2));\n\n          callback.streamDocListInfo( \n              solrDocs.getNumFound(), \n              solrDocs.getStart(), \n              solrDocs.getMaxScore() );\n          \n          // Read the Array\n          tagByte = dis.readByte();\n          if( (tagByte >>> 5) != (ARR >>> 5) ) {\n            throw new RuntimeException( \"doclist must have an array\" );\n          } \n          int sz = readSize(dis);\n          for (int i = 0; i < sz; i++) {\n            // must be a SolrDocument\n            readVal( dis ); \n          }\n          return solrDocs;\n        }\n      };\n      \n      return (NamedList<Object>) codec.unmarshal(body);\n    } \n    catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"parsing error\", e);\n    }\n  }\n\n","sourceOld":"  @Override\n  public NamedList<Object> processResponse(InputStream body, String encoding) {\n    try {\n      JavaBinCodec codec = new JavaBinCodec() {\n\n        @Override\n        public SolrDocument readSolrDocument(FastInputStream dis) throws IOException {\n          SolrDocument doc = super.readSolrDocument(dis);\n          callback.streamSolrDocument( doc );\n          return null;\n        }\n\n        @Override\n        public SolrDocumentList readSolrDocumentList(FastInputStream dis) throws IOException {\n          SolrDocumentList solrDocs = new SolrDocumentList();\n          List list = (List) readVal(dis);\n          solrDocs.setNumFound((Long) list.get(0));\n          solrDocs.setStart((Long) list.get(1));\n          solrDocs.setMaxScore((Float) list.get(2));\n\n          callback.streamDocListInfo( \n              solrDocs.getNumFound(), \n              solrDocs.getStart(), \n              solrDocs.getMaxScore() );\n          \n          // Read the Array\n          tagByte = dis.readByte();\n          if( (tagByte >>> 5) != (ARR >>> 5) ) {\n            throw new RuntimeException( \"doclist must have an array\" );\n          } \n          int sz = readSize(dis);\n          for (int i = 0; i < sz; i++) {\n            // must be a SolrDocument\n            readVal( dis ); \n          }\n          return solrDocs;\n        }\n      };\n      \n      return (NamedList<Object>) codec.unmarshal(body);\n    } \n    catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"parsing error\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/StreamingBinaryResponseParser#processResponse(InputStream,String).mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/impl/StreamingBinaryResponseParser#processResponse(InputStream,String).mjava","sourceNew":"  @Override\n  public NamedList<Object> processResponse(InputStream body, String encoding) {\n    try {\n      JavaBinCodec codec = new JavaBinCodec() {\n\n        @Override\n        public SolrDocument readSolrDocument(FastInputStream dis) throws IOException {\n          SolrDocument doc = super.readSolrDocument(dis);\n          callback.streamSolrDocument( doc );\n          return null;\n        }\n\n        @Override\n        public SolrDocumentList readSolrDocumentList(FastInputStream dis) throws IOException {\n          SolrDocumentList solrDocs = new SolrDocumentList();\n          List list = (List) readVal(dis);\n          solrDocs.setNumFound((Long) list.get(0));\n          solrDocs.setStart((Long) list.get(1));\n          solrDocs.setMaxScore((Float) list.get(2));\n\n          callback.streamDocListInfo( \n              solrDocs.getNumFound(), \n              solrDocs.getStart(), \n              solrDocs.getMaxScore() );\n          \n          // Read the Array\n          tagByte = dis.readByte();\n          if( (tagByte >>> 5) != (ARR >>> 5) ) {\n            throw new RuntimeException( \"doclist must have an array\" );\n          } \n          int sz = readSize(dis);\n          for (int i = 0; i < sz; i++) {\n            // must be a SolrDocument\n            readVal( dis ); \n          }\n          return solrDocs;\n        }\n      };\n      \n      return (NamedList<Object>) codec.unmarshal(body);\n    } \n    catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"parsing error\", e);\n    }\n  }\n\n","sourceOld":"  @Override\n  public NamedList<Object> processResponse(InputStream body, String encoding) {\n    try {\n      JavaBinCodec codec = new JavaBinCodec() {\n\n        @Override\n        public SolrDocument readSolrDocument(FastInputStream dis) throws IOException {\n          SolrDocument doc = super.readSolrDocument(dis);\n          callback.streamSolrDocument( doc );\n          return null;\n        }\n\n        @Override\n        public SolrDocumentList readSolrDocumentList(FastInputStream dis) throws IOException {\n          SolrDocumentList solrDocs = new SolrDocumentList();\n          List list = (List) readVal(dis);\n          solrDocs.setNumFound((Long) list.get(0));\n          solrDocs.setStart((Long) list.get(1));\n          solrDocs.setMaxScore((Float) list.get(2));\n\n          callback.streamDocListInfo( \n              solrDocs.getNumFound(), \n              solrDocs.getStart(), \n              solrDocs.getMaxScore() );\n          \n          // Read the Array\n          tagByte = dis.readByte();\n          if( (tagByte >>> 5) != (ARR >>> 5) ) {\n            throw new RuntimeException( \"doclist must have an array\" );\n          } \n          int sz = readSize(dis);\n          for (int i = 0; i < sz; i++) {\n            // must be a SolrDocument\n            readVal( dis ); \n          }\n          return solrDocs;\n        }\n      };\n      \n      return (NamedList<Object>) codec.unmarshal(body);\n    } \n    catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"parsing error\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01":["3e904610f0db3fdf2ea10c5701f5f4f86c1e9ade"],"3e904610f0db3fdf2ea10c5701f5f4f86c1e9ade":["e5ac9c2d15e75a72c2c461039fb6789654439323"],"e5ac9c2d15e75a72c2c461039fb6789654439323":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01"],"c26f00b574427b55127e869b935845554afde1fa":["70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["3e904610f0db3fdf2ea10c5701f5f4f86c1e9ade","70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3e904610f0db3fdf2ea10c5701f5f4f86c1e9ade"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","29ef99d61cda9641b6250bf9567329a6e65f901d","a258fbb26824fd104ed795e5d9033d2d040049ee","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"3e904610f0db3fdf2ea10c5701f5f4f86c1e9ade":["70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01","29ef99d61cda9641b6250bf9567329a6e65f901d","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"e5ac9c2d15e75a72c2c461039fb6789654439323":["3e904610f0db3fdf2ea10c5701f5f4f86c1e9ade"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e5ac9c2d15e75a72c2c461039fb6789654439323","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","a258fbb26824fd104ed795e5d9033d2d040049ee","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}