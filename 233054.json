{"path":"solr/core/src/java/org/apache/solr/cloud/api/collections/Assign#assignShard(DocCollection,Integer).mjava","commits":[{"id":"6146c07c0dee1ae1e42926167acd127fed5ef59d","date":1516129420,"type":1,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/Assign#assignShard(DocCollection,Integer).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Assign#assignShard(DocCollection,Integer).mjava","sourceNew":"  /**\n   * Assign a new unique id up to slices count - then add replicas evenly.\n   *\n   * @return the assigned shard id\n   */\n  public static String assignShard(DocCollection collection, Integer numShards) {\n    if (numShards == null) {\n      numShards = 1;\n    }\n    String returnShardId = null;\n    Map<String, Slice> sliceMap = collection != null ? collection.getActiveSlicesMap() : null;\n\n\n    // TODO: now that we create shards ahead of time, is this code needed?  Esp since hash ranges aren't assigned when creating via this method?\n\n    if (sliceMap == null) {\n      return \"shard1\";\n    }\n\n    List<String> shardIdNames = new ArrayList<>(sliceMap.keySet());\n\n    if (shardIdNames.size() < numShards) {\n      return \"shard\" + (shardIdNames.size() + 1);\n    }\n\n    // TODO: don't need to sort to find shard with fewest replicas!\n\n    // else figure out which shard needs more replicas\n    final Map<String, Integer> map = new HashMap<>();\n    for (String shardId : shardIdNames) {\n      int cnt = sliceMap.get(shardId).getReplicasMap().size();\n      map.put(shardId, cnt);\n    }\n\n    Collections.sort(shardIdNames, (String o1, String o2) -> {\n      Integer one = map.get(o1);\n      Integer two = map.get(o2);\n      return one.compareTo(two);\n    });\n\n    returnShardId = shardIdNames.get(0);\n    return returnShardId;\n  }\n\n","sourceOld":"  /**\n   * Assign a new unique id up to slices count - then add replicas evenly.\n   *\n   * @return the assigned shard id\n   */\n  public static String assignShard(DocCollection collection, Integer numShards) {\n    if (numShards == null) {\n      numShards = 1;\n    }\n    String returnShardId = null;\n    Map<String, Slice> sliceMap = collection != null ? collection.getActiveSlicesMap() : null;\n\n\n    // TODO: now that we create shards ahead of time, is this code needed?  Esp since hash ranges aren't assigned when creating via this method?\n\n    if (sliceMap == null) {\n      return \"shard1\";\n    }\n\n    List<String> shardIdNames = new ArrayList<>(sliceMap.keySet());\n\n    if (shardIdNames.size() < numShards) {\n      return \"shard\" + (shardIdNames.size() + 1);\n    }\n\n    // TODO: don't need to sort to find shard with fewest replicas!\n\n    // else figure out which shard needs more replicas\n    final Map<String, Integer> map = new HashMap<>();\n    for (String shardId : shardIdNames) {\n      int cnt = sliceMap.get(shardId).getReplicasMap().size();\n      map.put(shardId, cnt);\n    }\n\n    Collections.sort(shardIdNames, (String o1, String o2) -> {\n      Integer one = map.get(o1);\n      Integer two = map.get(o2);\n      return one.compareTo(two);\n    });\n\n    returnShardId = shardIdNames.get(0);\n    return returnShardId;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/Assign#assignShard(DocCollection,Integer).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Assign#assignShard(DocCollection,Integer).mjava","sourceNew":"  /**\n   * Assign a new unique id up to slices count - then add replicas evenly.\n   *\n   * @return the assigned shard id\n   */\n  public static String assignShard(DocCollection collection, Integer numShards) {\n    if (numShards == null) {\n      numShards = 1;\n    }\n    String returnShardId = null;\n    Map<String, Slice> sliceMap = collection != null ? collection.getActiveSlicesMap() : null;\n\n\n    // TODO: now that we create shards ahead of time, is this code needed?  Esp since hash ranges aren't assigned when creating via this method?\n\n    if (sliceMap == null) {\n      return \"shard1\";\n    }\n\n    List<String> shardIdNames = new ArrayList<>(sliceMap.keySet());\n\n    if (shardIdNames.size() < numShards) {\n      return \"shard\" + (shardIdNames.size() + 1);\n    }\n\n    // TODO: don't need to sort to find shard with fewest replicas!\n\n    // else figure out which shard needs more replicas\n    final Map<String, Integer> map = new HashMap<>();\n    for (String shardId : shardIdNames) {\n      int cnt = sliceMap.get(shardId).getReplicasMap().size();\n      map.put(shardId, cnt);\n    }\n\n    Collections.sort(shardIdNames, (String o1, String o2) -> {\n      Integer one = map.get(o1);\n      Integer two = map.get(o2);\n      return one.compareTo(two);\n    });\n\n    returnShardId = shardIdNames.get(0);\n    return returnShardId;\n  }\n\n","sourceOld":"  /**\n   * Assign a new unique id up to slices count - then add replicas evenly.\n   *\n   * @return the assigned shard id\n   */\n  public static String assignShard(DocCollection collection, Integer numShards) {\n    if (numShards == null) {\n      numShards = 1;\n    }\n    String returnShardId = null;\n    Map<String, Slice> sliceMap = collection != null ? collection.getActiveSlicesMap() : null;\n\n\n    // TODO: now that we create shards ahead of time, is this code needed?  Esp since hash ranges aren't assigned when creating via this method?\n\n    if (sliceMap == null) {\n      return \"shard1\";\n    }\n\n    List<String> shardIdNames = new ArrayList<>(sliceMap.keySet());\n\n    if (shardIdNames.size() < numShards) {\n      return \"shard\" + (shardIdNames.size() + 1);\n    }\n\n    // TODO: don't need to sort to find shard with fewest replicas!\n\n    // else figure out which shard needs more replicas\n    final Map<String, Integer> map = new HashMap<>();\n    for (String shardId : shardIdNames) {\n      int cnt = sliceMap.get(shardId).getReplicasMap().size();\n      map.put(shardId, cnt);\n    }\n\n    Collections.sort(shardIdNames, (String o1, String o2) -> {\n      Integer one = map.get(o1);\n      Integer two = map.get(o2);\n      return one.compareTo(two);\n    });\n\n    returnShardId = shardIdNames.get(0);\n    return returnShardId;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b94236357aaa22b76c10629851fe4e376e0cea82"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b94236357aaa22b76c10629851fe4e376e0cea82","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["b94236357aaa22b76c10629851fe4e376e0cea82"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}