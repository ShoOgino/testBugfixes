{"path":"lucene/core/src/test/org/apache/lucene/index/TestIndexReaderClose#testCoreListenerOnWrapperWithDifferentCacheKey().mjava","commits":[{"id":"c1e9b5fc0abfd22167fc144d6a55b290bdc331dc","date":1431966006,"type":2,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexReaderClose#testCoreListenerOnWrapperWithDifferentCacheKey().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexReaderClose#testCoreListenerOnWrapper().mjava","sourceNew":"  public void testCoreListenerOnWrapperWithDifferentCacheKey() throws IOException {\n    RandomIndexWriter w = new RandomIndexWriter(random(), newDirectory());\n    final int numDocs = TestUtil.nextInt(random(), 1, 5);\n    for (int i = 0; i < numDocs; ++i) {\n      w.addDocument(new Document());\n      if (random().nextBoolean()) {\n        w.commit();\n      }\n    }\n    w.commit();\n    w.close();\n\n    final IndexReader reader = DirectoryReader.open(w.w.getDirectory());\n    // We explicitly define a different cache key\n    final Object coreCacheKey = new Object();\n    final LeafReader leafReader = new FilterLeafReader(SlowCompositeReaderWrapper.wrap(reader)) {\n      @Override\n      public Object getCoreCacheKey() {\n        return coreCacheKey;\n      }\n    };\n\n    final int numListeners = TestUtil.nextInt(random(), 1, 10);\n    final List<LeafReader.CoreClosedListener> listeners = new ArrayList<>();\n    AtomicInteger counter = new AtomicInteger(numListeners);\n    \n    for (int i = 0; i < numListeners; ++i) {\n      CountCoreListener listener = new CountCoreListener(counter, coreCacheKey);\n      listeners.add(listener);\n      leafReader.addCoreClosedListener(listener);\n    }\n    for (int i = 0; i < 100; ++i) {\n      leafReader.addCoreClosedListener(listeners.get(random().nextInt(listeners.size())));\n    }\n    final int removed = random().nextInt(numListeners);\n    Collections.shuffle(listeners, random());\n    for (int i = 0; i < removed; ++i) {\n      leafReader.removeCoreClosedListener(listeners.get(i));\n    }\n    assertEquals(numListeners, counter.get());\n    // make sure listeners are registered on the wrapped reader and that closing any of them has the same effect\n    if (random().nextBoolean()) {\n      reader.close();\n    } else {\n      leafReader.close();\n    }\n    assertEquals(removed, counter.get());\n    w.w.getDirectory().close();\n  }\n\n","sourceOld":"  public void testCoreListenerOnWrapper() throws IOException {\n    RandomIndexWriter w = new RandomIndexWriter(random(), newDirectory());\n    final int numDocs = TestUtil.nextInt(random(), 1, 5);\n    for (int i = 0; i < numDocs; ++i) {\n      w.addDocument(new Document());\n      if (random().nextBoolean()) {\n        w.commit();\n      }\n    }\n    w.commit();\n    w.close();\n\n    final IndexReader reader = DirectoryReader.open(w.w.getDirectory());\n    final LeafReader leafReader = SlowCompositeReaderWrapper.wrap(reader);\n    \n    final int numListeners = TestUtil.nextInt(random(), 1, 10);\n    final List<LeafReader.CoreClosedListener> listeners = new ArrayList<>();\n    AtomicInteger counter = new AtomicInteger(numListeners);\n    \n    for (int i = 0; i < numListeners; ++i) {\n      CountCoreListener listener = new CountCoreListener(counter);\n      listeners.add(listener);\n      leafReader.addCoreClosedListener(listener);\n    }\n    for (int i = 0; i < 100; ++i) {\n      leafReader.addCoreClosedListener(listeners.get(random().nextInt(listeners.size())));\n    }\n    final int removed = random().nextInt(numListeners);\n    Collections.shuffle(listeners, random());\n    for (int i = 0; i < removed; ++i) {\n      leafReader.removeCoreClosedListener(listeners.get(i));\n    }\n    assertEquals(numListeners, counter.get());\n    // make sure listeners are registered on the wrapped reader and that closing any of them has the same effect\n    if (random().nextBoolean()) {\n      reader.close();\n    } else {\n      leafReader.close();\n    }\n    assertEquals(removed, counter.get());\n    w.w.getDirectory().close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1","date":1457644139,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexReaderClose#testCoreListenerOnWrapperWithDifferentCacheKey().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexReaderClose#testCoreListenerOnWrapperWithDifferentCacheKey().mjava","sourceNew":"  public void testCoreListenerOnWrapperWithDifferentCacheKey() throws IOException {\n    RandomIndexWriter w = new RandomIndexWriter(random(), newDirectory());\n    final int numDocs = TestUtil.nextInt(random(), 1, 5);\n    for (int i = 0; i < numDocs; ++i) {\n      w.addDocument(new Document());\n      if (random().nextBoolean()) {\n        w.commit();\n      }\n    }\n    w.forceMerge(1);\n    w.commit();\n    w.close();\n\n    final IndexReader reader = DirectoryReader.open(w.w.getDirectory());\n    // We explicitly define a different cache key\n    final Object coreCacheKey = new Object();\n    final LeafReader leafReader = new FilterLeafReader(getOnlyLeafReader(reader)) {\n      @Override\n      public Object getCoreCacheKey() {\n        return coreCacheKey;\n      }\n    };\n\n    final int numListeners = TestUtil.nextInt(random(), 1, 10);\n    final List<LeafReader.CoreClosedListener> listeners = new ArrayList<>();\n    AtomicInteger counter = new AtomicInteger(numListeners);\n    \n    for (int i = 0; i < numListeners; ++i) {\n      CountCoreListener listener = new CountCoreListener(counter, coreCacheKey);\n      listeners.add(listener);\n      leafReader.addCoreClosedListener(listener);\n    }\n    for (int i = 0; i < 100; ++i) {\n      leafReader.addCoreClosedListener(listeners.get(random().nextInt(listeners.size())));\n    }\n    final int removed = random().nextInt(numListeners);\n    Collections.shuffle(listeners, random());\n    for (int i = 0; i < removed; ++i) {\n      leafReader.removeCoreClosedListener(listeners.get(i));\n    }\n    assertEquals(numListeners, counter.get());\n    // make sure listeners are registered on the wrapped reader and that closing any of them has the same effect\n    if (random().nextBoolean()) {\n      reader.close();\n    } else {\n      leafReader.close();\n    }\n    assertEquals(removed, counter.get());\n    w.w.getDirectory().close();\n  }\n\n","sourceOld":"  public void testCoreListenerOnWrapperWithDifferentCacheKey() throws IOException {\n    RandomIndexWriter w = new RandomIndexWriter(random(), newDirectory());\n    final int numDocs = TestUtil.nextInt(random(), 1, 5);\n    for (int i = 0; i < numDocs; ++i) {\n      w.addDocument(new Document());\n      if (random().nextBoolean()) {\n        w.commit();\n      }\n    }\n    w.commit();\n    w.close();\n\n    final IndexReader reader = DirectoryReader.open(w.w.getDirectory());\n    // We explicitly define a different cache key\n    final Object coreCacheKey = new Object();\n    final LeafReader leafReader = new FilterLeafReader(SlowCompositeReaderWrapper.wrap(reader)) {\n      @Override\n      public Object getCoreCacheKey() {\n        return coreCacheKey;\n      }\n    };\n\n    final int numListeners = TestUtil.nextInt(random(), 1, 10);\n    final List<LeafReader.CoreClosedListener> listeners = new ArrayList<>();\n    AtomicInteger counter = new AtomicInteger(numListeners);\n    \n    for (int i = 0; i < numListeners; ++i) {\n      CountCoreListener listener = new CountCoreListener(counter, coreCacheKey);\n      listeners.add(listener);\n      leafReader.addCoreClosedListener(listener);\n    }\n    for (int i = 0; i < 100; ++i) {\n      leafReader.addCoreClosedListener(listeners.get(random().nextInt(listeners.size())));\n    }\n    final int removed = random().nextInt(numListeners);\n    Collections.shuffle(listeners, random());\n    for (int i = 0; i < removed; ++i) {\n      leafReader.removeCoreClosedListener(listeners.get(i));\n    }\n    assertEquals(numListeners, counter.get());\n    // make sure listeners are registered on the wrapped reader and that closing any of them has the same effect\n    if (random().nextBoolean()) {\n      reader.close();\n    } else {\n      leafReader.close();\n    }\n    assertEquals(removed, counter.get());\n    w.w.getDirectory().close();\n  }\n\n","bugFix":["c1e9b5fc0abfd22167fc144d6a55b290bdc331dc"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d211216c83f01894810543d1c107160a9ae3650b","date":1488289605,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexReaderClose#testCoreListenerOnWrapperWithDifferentCacheKey().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexReaderClose#testCoreListenerOnWrapperWithDifferentCacheKey().mjava","sourceNew":"  public void testCoreListenerOnWrapperWithDifferentCacheKey() throws IOException {\n    RandomIndexWriter w = new RandomIndexWriter(random(), newDirectory());\n    final int numDocs = TestUtil.nextInt(random(), 1, 5);\n    for (int i = 0; i < numDocs; ++i) {\n      w.addDocument(new Document());\n      if (random().nextBoolean()) {\n        w.commit();\n      }\n    }\n    w.forceMerge(1);\n    w.commit();\n    w.close();\n\n    final IndexReader reader = DirectoryReader.open(w.w.getDirectory());\n    final LeafReader leafReader = new AssertingLeafReader(getOnlyLeafReader(reader));\n\n    final int numListeners = TestUtil.nextInt(random(), 1, 10);\n    final List<IndexReader.ClosedListener> listeners = new ArrayList<>();\n    AtomicInteger counter = new AtomicInteger(numListeners);\n\n    for (int i = 0; i < numListeners; ++i) {\n      CountCoreListener listener = new CountCoreListener(counter, leafReader.getCoreCacheHelper().getKey());\n      listeners.add(listener);\n      leafReader.getCoreCacheHelper().addClosedListener(listener);\n    }\n    for (int i = 0; i < 100; ++i) {\n      leafReader.getCoreCacheHelper().addClosedListener(listeners.get(random().nextInt(listeners.size())));\n    }\n    assertEquals(numListeners, counter.get());\n    // make sure listeners are registered on the wrapped reader and that closing any of them has the same effect\n    if (random().nextBoolean()) {\n      reader.close();\n    } else {\n      leafReader.close();\n    }\n    assertEquals(0, counter.get());\n    w.w.getDirectory().close();\n  }\n\n","sourceOld":"  public void testCoreListenerOnWrapperWithDifferentCacheKey() throws IOException {\n    RandomIndexWriter w = new RandomIndexWriter(random(), newDirectory());\n    final int numDocs = TestUtil.nextInt(random(), 1, 5);\n    for (int i = 0; i < numDocs; ++i) {\n      w.addDocument(new Document());\n      if (random().nextBoolean()) {\n        w.commit();\n      }\n    }\n    w.forceMerge(1);\n    w.commit();\n    w.close();\n\n    final IndexReader reader = DirectoryReader.open(w.w.getDirectory());\n    // We explicitly define a different cache key\n    final Object coreCacheKey = new Object();\n    final LeafReader leafReader = new FilterLeafReader(getOnlyLeafReader(reader)) {\n      @Override\n      public Object getCoreCacheKey() {\n        return coreCacheKey;\n      }\n    };\n\n    final int numListeners = TestUtil.nextInt(random(), 1, 10);\n    final List<LeafReader.CoreClosedListener> listeners = new ArrayList<>();\n    AtomicInteger counter = new AtomicInteger(numListeners);\n    \n    for (int i = 0; i < numListeners; ++i) {\n      CountCoreListener listener = new CountCoreListener(counter, coreCacheKey);\n      listeners.add(listener);\n      leafReader.addCoreClosedListener(listener);\n    }\n    for (int i = 0; i < 100; ++i) {\n      leafReader.addCoreClosedListener(listeners.get(random().nextInt(listeners.size())));\n    }\n    final int removed = random().nextInt(numListeners);\n    Collections.shuffle(listeners, random());\n    for (int i = 0; i < removed; ++i) {\n      leafReader.removeCoreClosedListener(listeners.get(i));\n    }\n    assertEquals(numListeners, counter.get());\n    // make sure listeners are registered on the wrapped reader and that closing any of them has the same effect\n    if (random().nextBoolean()) {\n      reader.close();\n    } else {\n      leafReader.close();\n    }\n    assertEquals(removed, counter.get());\n    w.w.getDirectory().close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"71da9a885c49918fb26c68bb7dba0154f87130da","date":1492065707,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexReaderClose#testCoreListenerOnWrapperWithDifferentCacheKey().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexReaderClose#testCoreListenerOnWrapperWithDifferentCacheKey().mjava","sourceNew":"  public void testCoreListenerOnWrapperWithDifferentCacheKey() throws IOException {\n    RandomIndexWriter w = new RandomIndexWriter(random(), newDirectory());\n    final int numDocs = TestUtil.nextInt(random(), 1, 5);\n    for (int i = 0; i < numDocs; ++i) {\n      w.addDocument(new Document());\n      if (random().nextBoolean()) {\n        w.commit();\n      }\n    }\n    w.forceMerge(1);\n    w.commit();\n    w.close();\n\n    final IndexReader reader = DirectoryReader.open(w.w.getDirectory());\n    final LeafReader leafReader = new AssertingLeafReader(getOnlyLeafReader(reader));\n\n    final int numListeners = TestUtil.nextInt(random(), 1, 10);\n    final List<IndexReader.ClosedListener> listeners = new ArrayList<>();\n    AtomicInteger counter = new AtomicInteger(numListeners);\n\n    for (int i = 0; i < numListeners; ++i) {\n      CountListener listener = new CountListener(counter, leafReader.getCoreCacheHelper().getKey());\n      listeners.add(listener);\n      leafReader.getCoreCacheHelper().addClosedListener(listener);\n    }\n    for (int i = 0; i < 100; ++i) {\n      leafReader.getCoreCacheHelper().addClosedListener(listeners.get(random().nextInt(listeners.size())));\n    }\n    assertEquals(numListeners, counter.get());\n    // make sure listeners are registered on the wrapped reader and that closing any of them has the same effect\n    if (random().nextBoolean()) {\n      reader.close();\n    } else {\n      leafReader.close();\n    }\n    assertEquals(0, counter.get());\n    w.w.getDirectory().close();\n  }\n\n","sourceOld":"  public void testCoreListenerOnWrapperWithDifferentCacheKey() throws IOException {\n    RandomIndexWriter w = new RandomIndexWriter(random(), newDirectory());\n    final int numDocs = TestUtil.nextInt(random(), 1, 5);\n    for (int i = 0; i < numDocs; ++i) {\n      w.addDocument(new Document());\n      if (random().nextBoolean()) {\n        w.commit();\n      }\n    }\n    w.forceMerge(1);\n    w.commit();\n    w.close();\n\n    final IndexReader reader = DirectoryReader.open(w.w.getDirectory());\n    final LeafReader leafReader = new AssertingLeafReader(getOnlyLeafReader(reader));\n\n    final int numListeners = TestUtil.nextInt(random(), 1, 10);\n    final List<IndexReader.ClosedListener> listeners = new ArrayList<>();\n    AtomicInteger counter = new AtomicInteger(numListeners);\n\n    for (int i = 0; i < numListeners; ++i) {\n      CountCoreListener listener = new CountCoreListener(counter, leafReader.getCoreCacheHelper().getKey());\n      listeners.add(listener);\n      leafReader.getCoreCacheHelper().addClosedListener(listener);\n    }\n    for (int i = 0; i < 100; ++i) {\n      leafReader.getCoreCacheHelper().addClosedListener(listeners.get(random().nextInt(listeners.size())));\n    }\n    assertEquals(numListeners, counter.get());\n    // make sure listeners are registered on the wrapped reader and that closing any of them has the same effect\n    if (random().nextBoolean()) {\n      reader.close();\n    } else {\n      leafReader.close();\n    }\n    assertEquals(0, counter.get());\n    w.w.getDirectory().close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexReaderClose#testCoreListenerOnWrapperWithDifferentCacheKey().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexReaderClose#testCoreListenerOnWrapperWithDifferentCacheKey().mjava","sourceNew":"  public void testCoreListenerOnWrapperWithDifferentCacheKey() throws IOException {\n    RandomIndexWriter w = new RandomIndexWriter(random(), newDirectory());\n    final int numDocs = TestUtil.nextInt(random(), 1, 5);\n    for (int i = 0; i < numDocs; ++i) {\n      w.addDocument(new Document());\n      if (random().nextBoolean()) {\n        w.commit();\n      }\n    }\n    w.forceMerge(1);\n    w.commit();\n    w.close();\n\n    final IndexReader reader = DirectoryReader.open(w.w.getDirectory());\n    final LeafReader leafReader = new AssertingLeafReader(getOnlyLeafReader(reader));\n\n    final int numListeners = TestUtil.nextInt(random(), 1, 10);\n    final List<IndexReader.ClosedListener> listeners = new ArrayList<>();\n    AtomicInteger counter = new AtomicInteger(numListeners);\n\n    for (int i = 0; i < numListeners; ++i) {\n      CountListener listener = new CountListener(counter, leafReader.getCoreCacheHelper().getKey());\n      listeners.add(listener);\n      leafReader.getCoreCacheHelper().addClosedListener(listener);\n    }\n    for (int i = 0; i < 100; ++i) {\n      leafReader.getCoreCacheHelper().addClosedListener(listeners.get(random().nextInt(listeners.size())));\n    }\n    assertEquals(numListeners, counter.get());\n    // make sure listeners are registered on the wrapped reader and that closing any of them has the same effect\n    if (random().nextBoolean()) {\n      reader.close();\n    } else {\n      leafReader.close();\n    }\n    assertEquals(0, counter.get());\n    w.w.getDirectory().close();\n  }\n\n","sourceOld":"  public void testCoreListenerOnWrapperWithDifferentCacheKey() throws IOException {\n    RandomIndexWriter w = new RandomIndexWriter(random(), newDirectory());\n    final int numDocs = TestUtil.nextInt(random(), 1, 5);\n    for (int i = 0; i < numDocs; ++i) {\n      w.addDocument(new Document());\n      if (random().nextBoolean()) {\n        w.commit();\n      }\n    }\n    w.forceMerge(1);\n    w.commit();\n    w.close();\n\n    final IndexReader reader = DirectoryReader.open(w.w.getDirectory());\n    final LeafReader leafReader = new AssertingLeafReader(getOnlyLeafReader(reader));\n\n    final int numListeners = TestUtil.nextInt(random(), 1, 10);\n    final List<IndexReader.ClosedListener> listeners = new ArrayList<>();\n    AtomicInteger counter = new AtomicInteger(numListeners);\n\n    for (int i = 0; i < numListeners; ++i) {\n      CountCoreListener listener = new CountCoreListener(counter, leafReader.getCoreCacheHelper().getKey());\n      listeners.add(listener);\n      leafReader.getCoreCacheHelper().addClosedListener(listener);\n    }\n    for (int i = 0; i < 100; ++i) {\n      leafReader.getCoreCacheHelper().addClosedListener(listeners.get(random().nextInt(listeners.size())));\n    }\n    assertEquals(numListeners, counter.get());\n    // make sure listeners are registered on the wrapped reader and that closing any of them has the same effect\n    if (random().nextBoolean()) {\n      reader.close();\n    } else {\n      leafReader.close();\n    }\n    assertEquals(0, counter.get());\n    w.w.getDirectory().close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"71da9a885c49918fb26c68bb7dba0154f87130da":["d211216c83f01894810543d1c107160a9ae3650b"],"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1":["c1e9b5fc0abfd22167fc144d6a55b290bdc331dc"],"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["d211216c83f01894810543d1c107160a9ae3650b"],"c1e9b5fc0abfd22167fc144d6a55b290bdc331dc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d211216c83f01894810543d1c107160a9ae3650b":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["71da9a885c49918fb26c68bb7dba0154f87130da"]},"commit2Childs":{"71da9a885c49918fb26c68bb7dba0154f87130da":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1":["d211216c83f01894810543d1c107160a9ae3650b"],"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"c1e9b5fc0abfd22167fc144d6a55b290bdc331dc":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"d211216c83f01894810543d1c107160a9ae3650b":["71da9a885c49918fb26c68bb7dba0154f87130da","54ca69905c5d9d1529286f06ab1d12c68f6c13cb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c1e9b5fc0abfd22167fc144d6a55b290bdc331dc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}