{"path":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndex#testBuildFromDocument().mjava","commits":[{"id":"b8b87263526557a451254f824e63e454e43e47ad","date":1453798964,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndex#testBuildFromDocument().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testBuildFromDocument() {\n\n    Document doc = new Document();\n    doc.add(new TextField(\"field1\", \"some text\", Field.Store.NO));\n    doc.add(new TextField(\"field1\", \"some more text\", Field.Store.NO));\n    doc.add(new StringField(\"field2\", \"untokenized text\", Field.Store.NO));\n\n    analyzer.setPositionIncrementGap(100);\n\n    MemoryIndex mi = MemoryIndex.fromDocument(doc, analyzer);\n\n    assertThat(mi.search(new TermQuery(new Term(\"field1\", \"text\"))), not(0.0f));\n    assertThat(mi.search(new TermQuery(new Term(\"field2\", \"text\"))), is(0.0f));\n    assertThat(mi.search(new TermQuery(new Term(\"field2\", \"untokenized text\"))), not(0.0f));\n\n    assertThat(mi.search(new PhraseQuery(\"field1\", \"some\", \"more\", \"text\")), not(0.0f));\n    assertThat(mi.search(new PhraseQuery(\"field1\", \"some\", \"text\")), not(0.0f));\n    assertThat(mi.search(new PhraseQuery(\"field1\", \"text\", \"some\")), is(0.0f));\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ac88193d9fe80e165a43bb0555c43afa83da8330","date":1453823827,"type":0,"author":"jbernste","isMerge":true,"pathNew":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndex#testBuildFromDocument().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testBuildFromDocument() {\n\n    Document doc = new Document();\n    doc.add(new TextField(\"field1\", \"some text\", Field.Store.NO));\n    doc.add(new TextField(\"field1\", \"some more text\", Field.Store.NO));\n    doc.add(new StringField(\"field2\", \"untokenized text\", Field.Store.NO));\n\n    analyzer.setPositionIncrementGap(100);\n\n    MemoryIndex mi = MemoryIndex.fromDocument(doc, analyzer);\n\n    assertThat(mi.search(new TermQuery(new Term(\"field1\", \"text\"))), not(0.0f));\n    assertThat(mi.search(new TermQuery(new Term(\"field2\", \"text\"))), is(0.0f));\n    assertThat(mi.search(new TermQuery(new Term(\"field2\", \"untokenized text\"))), not(0.0f));\n\n    assertThat(mi.search(new PhraseQuery(\"field1\", \"some\", \"more\", \"text\")), not(0.0f));\n    assertThat(mi.search(new PhraseQuery(\"field1\", \"some\", \"text\")), not(0.0f));\n    assertThat(mi.search(new PhraseQuery(\"field1\", \"text\", \"some\")), is(0.0f));\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":0,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndex#testBuildFromDocument().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testBuildFromDocument() {\n\n    Document doc = new Document();\n    doc.add(new TextField(\"field1\", \"some text\", Field.Store.NO));\n    doc.add(new TextField(\"field1\", \"some more text\", Field.Store.NO));\n    doc.add(new StringField(\"field2\", \"untokenized text\", Field.Store.NO));\n\n    analyzer.setPositionIncrementGap(100);\n\n    MemoryIndex mi = MemoryIndex.fromDocument(doc, analyzer);\n\n    assertThat(mi.search(new TermQuery(new Term(\"field1\", \"text\"))), not(0.0f));\n    assertThat(mi.search(new TermQuery(new Term(\"field2\", \"text\"))), is(0.0f));\n    assertThat(mi.search(new TermQuery(new Term(\"field2\", \"untokenized text\"))), not(0.0f));\n\n    assertThat(mi.search(new PhraseQuery(\"field1\", \"some\", \"more\", \"text\")), not(0.0f));\n    assertThat(mi.search(new PhraseQuery(\"field1\", \"some\", \"text\")), not(0.0f));\n    assertThat(mi.search(new PhraseQuery(\"field1\", \"text\", \"some\")), is(0.0f));\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ac88193d9fe80e165a43bb0555c43afa83da8330":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b8b87263526557a451254f824e63e454e43e47ad"],"b8b87263526557a451254f824e63e454e43e47ad":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ac88193d9fe80e165a43bb0555c43afa83da8330"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ac88193d9fe80e165a43bb0555c43afa83da8330"]},"commit2Childs":{"ac88193d9fe80e165a43bb0555c43afa83da8330":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b8b87263526557a451254f824e63e454e43e47ad":["ac88193d9fe80e165a43bb0555c43afa83da8330"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ac88193d9fe80e165a43bb0555c43afa83da8330","b8b87263526557a451254f824e63e454e43e47ad","1e6acbaae7af722f17204ceccf0f7db5753eccf3"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}