{"path":"lucene/test-framework/src/java/org/apache/lucene/util/TestSecurityManager#checkRead(String).mjava","commits":[{"id":"e5bcf88d0563d08e5b68c127842dd8e7d7e81338","date":1575519379,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestSecurityManager#checkRead(String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * {@inheritDoc}\n   * <p>This method implements hacks to workaround hadoop's garbage FileUtil code\n   */\n  @Override\n  public void checkRead(String file) {\n    for (StackTraceElement element : Thread.currentThread().getStackTrace()) {\n      // hadoop \"createPermissionsDiagnosisString\" method doesn't handle securityexception and fails completely.\n      // it insists on climbing up full directory tree!\n      // so, lie to it, and tell it we will happily read, so it does not crash.\n      if (\"org.apache.hadoop.hdfs.MiniDFSCluster\".equals(element.getClassName()) &&\n          \"createPermissionsDiagnosisString\".equals(element.getMethodName())) {\n        return;\n      }\n      // hadoop \"canRead\" method doesn't handle securityexception and fails completely.\n      // so, lie to it, and tell it we will happily read, so it does not crash.\n      if (\"org.apache.hadoop.fs.FileUtil\".equals(element.getClassName()) &&\n          \"canRead\".equals(element.getMethodName())) {\n        return;\n      }\n    }\n    super.checkRead(file);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a90f561fc609ec007ba18b10dea9191dbbd71831","date":1575541054,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestSecurityManager#checkRead(String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * {@inheritDoc}\n   * <p>This method implements hacks to workaround hadoop's garbage FileUtil code\n   */\n  @Override\n  public void checkRead(String file) {\n    for (StackTraceElement element : Thread.currentThread().getStackTrace()) {\n      // hadoop \"createPermissionsDiagnosisString\" method doesn't handle securityexception and fails completely.\n      // it insists on climbing up full directory tree!\n      // so, lie to it, and tell it we will happily read, so it does not crash.\n      if (\"org.apache.hadoop.hdfs.MiniDFSCluster\".equals(element.getClassName()) &&\n          \"createPermissionsDiagnosisString\".equals(element.getMethodName())) {\n        return;\n      }\n      // hadoop \"canRead\" method doesn't handle securityexception and fails completely.\n      // so, lie to it, and tell it we will happily read, so it does not crash.\n      if (\"org.apache.hadoop.fs.FileUtil\".equals(element.getClassName()) &&\n          \"canRead\".equals(element.getMethodName())) {\n        return;\n      }\n    }\n    super.checkRead(file);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf4186ad2efcdebf9859a7b14723a280571c6587","date":1575575603,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/util/SolrSecurityManager#checkRead(String).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/TestSecurityManager#checkRead(String).mjava","sourceNew":"  /**\n   * {@inheritDoc}\n   * <p>This method implements hacks to workaround hadoop's garbage FileUtil code\n   */\n  @Override\n  public void checkRead(String file) {\n    for (StackTraceElement element : Thread.currentThread().getStackTrace()) {\n      // hadoop \"createPermissionsDiagnosisString\" method doesn't handle securityexception and fails completely.\n      // it insists on climbing up full directory tree!\n      // so, lie to it, and tell it we will happily read, so it does not crash.\n      if (\"org.apache.hadoop.hdfs.MiniDFSCluster\".equals(element.getClassName()) &&\n          \"createPermissionsDiagnosisString\".equals(element.getMethodName())) {\n        return;\n      }\n      // hadoop \"canRead\" method doesn't handle securityexception and fails completely.\n      // so, lie to it, and tell it we will happily read, so it does not crash.\n      if (\"org.apache.hadoop.fs.FileUtil\".equals(element.getClassName()) &&\n          \"canRead\".equals(element.getMethodName())) {\n        return;\n      }\n    }\n    super.checkRead(file);\n  }\n\n","sourceOld":"  /**\n   * {@inheritDoc}\n   * <p>This method implements hacks to workaround hadoop's garbage FileUtil code\n   */\n  @Override\n  public void checkRead(String file) {\n    for (StackTraceElement element : Thread.currentThread().getStackTrace()) {\n      // hadoop \"createPermissionsDiagnosisString\" method doesn't handle securityexception and fails completely.\n      // it insists on climbing up full directory tree!\n      // so, lie to it, and tell it we will happily read, so it does not crash.\n      if (\"org.apache.hadoop.hdfs.MiniDFSCluster\".equals(element.getClassName()) &&\n          \"createPermissionsDiagnosisString\".equals(element.getMethodName())) {\n        return;\n      }\n      // hadoop \"canRead\" method doesn't handle securityexception and fails completely.\n      // so, lie to it, and tell it we will happily read, so it does not crash.\n      if (\"org.apache.hadoop.fs.FileUtil\".equals(element.getClassName()) &&\n          \"canRead\".equals(element.getMethodName())) {\n        return;\n      }\n    }\n    super.checkRead(file);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c173aec5dba4a880e26706e8ca1ec9e67b74ed5","date":1575629849,"type":5,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/util/SolrSecurityManager#checkRead(String).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/TestSecurityManager#checkRead(String).mjava","sourceNew":"  /**\n   * {@inheritDoc}\n   * <p>This method implements hacks to workaround hadoop's garbage FileUtil code\n   */\n  @Override\n  public void checkRead(String file) {\n    for (StackTraceElement element : Thread.currentThread().getStackTrace()) {\n      // hadoop \"createPermissionsDiagnosisString\" method doesn't handle securityexception and fails completely.\n      // it insists on climbing up full directory tree!\n      // so, lie to it, and tell it we will happily read, so it does not crash.\n      if (\"org.apache.hadoop.hdfs.MiniDFSCluster\".equals(element.getClassName()) &&\n          \"createPermissionsDiagnosisString\".equals(element.getMethodName())) {\n        return;\n      }\n      // hadoop \"canRead\" method doesn't handle securityexception and fails completely.\n      // so, lie to it, and tell it we will happily read, so it does not crash.\n      if (\"org.apache.hadoop.fs.FileUtil\".equals(element.getClassName()) &&\n          \"canRead\".equals(element.getMethodName())) {\n        return;\n      }\n    }\n    super.checkRead(file);\n  }\n\n","sourceOld":"  /**\n   * {@inheritDoc}\n   * <p>This method implements hacks to workaround hadoop's garbage FileUtil code\n   */\n  @Override\n  public void checkRead(String file) {\n    for (StackTraceElement element : Thread.currentThread().getStackTrace()) {\n      // hadoop \"createPermissionsDiagnosisString\" method doesn't handle securityexception and fails completely.\n      // it insists on climbing up full directory tree!\n      // so, lie to it, and tell it we will happily read, so it does not crash.\n      if (\"org.apache.hadoop.hdfs.MiniDFSCluster\".equals(element.getClassName()) &&\n          \"createPermissionsDiagnosisString\".equals(element.getMethodName())) {\n        return;\n      }\n      // hadoop \"canRead\" method doesn't handle securityexception and fails completely.\n      // so, lie to it, and tell it we will happily read, so it does not crash.\n      if (\"org.apache.hadoop.fs.FileUtil\".equals(element.getClassName()) &&\n          \"canRead\".equals(element.getMethodName())) {\n        return;\n      }\n    }\n    super.checkRead(file);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a90f561fc609ec007ba18b10dea9191dbbd71831":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e5bcf88d0563d08e5b68c127842dd8e7d7e81338"],"cf4186ad2efcdebf9859a7b14723a280571c6587":["e5bcf88d0563d08e5b68c127842dd8e7d7e81338"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2c173aec5dba4a880e26706e8ca1ec9e67b74ed5":["a90f561fc609ec007ba18b10dea9191dbbd71831","cf4186ad2efcdebf9859a7b14723a280571c6587"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cf4186ad2efcdebf9859a7b14723a280571c6587"],"e5bcf88d0563d08e5b68c127842dd8e7d7e81338":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a90f561fc609ec007ba18b10dea9191dbbd71831":["2c173aec5dba4a880e26706e8ca1ec9e67b74ed5"],"cf4186ad2efcdebf9859a7b14723a280571c6587":["2c173aec5dba4a880e26706e8ca1ec9e67b74ed5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a90f561fc609ec007ba18b10dea9191dbbd71831","e5bcf88d0563d08e5b68c127842dd8e7d7e81338"],"2c173aec5dba4a880e26706e8ca1ec9e67b74ed5":[],"e5bcf88d0563d08e5b68c127842dd8e7d7e81338":["a90f561fc609ec007ba18b10dea9191dbbd71831","cf4186ad2efcdebf9859a7b14723a280571c6587"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["2c173aec5dba4a880e26706e8ca1ec9e67b74ed5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}