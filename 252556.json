{"path":"solr/core/src/test/org/apache/solr/cloud/SolrCLIZkUtilsTest#testMv().mjava","commits":[{"id":"9272a617a9cbebf86be127014bbbacd7cf8f8e83","date":1467480344,"type":0,"author":"Erick","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/SolrCLIZkUtilsTest#testMv().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testMv() throws Exception {\n\n    // First get something up on ZK\n    Path src = TEST_PATH().resolve(\"configsets\").resolve(\"cloud-subdirs\").resolve(\"conf\");\n    Path configSet = TEST_PATH().resolve(\"configsets\").resolve(\"cloud-subdirs\");\n\n    copyConfigUp(src, configSet, \"mv1\");\n\n    // Now move it somewhere else.\n    String[] args = new String[]{\n        \"-src\", \"zk:/configs/mv1\",\n        \"-dst\", \"zk:/mv2\",\n        \"-zkHost\", zkAddr,\n    };\n\n    SolrCLI.ZkMvTool mvTool = new SolrCLI.ZkMvTool();\n\n    int res = mvTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(mvTool.getOptions()), args));\n    assertEquals(\"Move should have succeeded.\", 0, res);\n\n    // Now does the moved directory match the original on disk?\n    verifyZkLocalPathsMatch(src, \"/mv2\");\n    // And are we sure the old path is gone?\n    assertFalse(\"/configs/mv1 Znode should not be there: \", zkClient.exists(\"/configs/mv1\", true));\n\n    // Files are in mv2\n    // Now fail if we specify \"file:\". Everything should still be in /mv2\n    args = new String[]{\n        \"-src\", \"file:/mv2\",\n        \"-dst\", \"/mv3\",\n        \"-zkHost\", zkAddr,\n    };\n\n    // Still in mv2\n    res = mvTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(mvTool.getOptions()), args));\n    assertTrue(\"Move should NOT have succeeded with file: specified.\", 0 != res);\n\n    // Let's move it to yet another place with no zk: prefix.\n    args = new String[]{\n        \"-src\", \"/mv2\",\n        \"-dst\", \"/mv4\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = mvTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(mvTool.getOptions()), args));\n    assertEquals(\"Move should have succeeded.\", 0, res);\n\n    assertFalse(\"Znode /mv3 really should be gone\", zkClient.exists(\"/mv3\", true));\n\n    // Now does the moved directory match the original on disk?\n    verifyZkLocalPathsMatch(src, \"/mv4\");\n\n    args = new String[]{\n        \"-src\", \"/mv4/solrconfig.xml\",\n        \"-dst\", \"/testmvsingle/solrconfig.xml\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = mvTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(mvTool.getOptions()), args));\n    assertEquals(\"Move should have succeeded.\", 0, res);\n    assertTrue(\"Should be able to move a single file\", zkClient.exists(\"/testmvsingle/solrconfig.xml\", true));\n\n    zkClient.makePath(\"/parentNode\", true);\n\n    // what happens if the destination ends with a slash?\n    args = new String[]{\n        \"-src\", \"/mv4/schema.xml\",\n        \"-dst\", \"/parentnode/\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = mvTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(mvTool.getOptions()), args));\n    assertEquals(\"Move should have succeeded.\", 0, res);\n    assertTrue(\"Should be able to move a single file to a parent znode\", zkClient.exists(\"/parentnode/schema.xml\", true));\n    String content = new String(zkClient.getData(\"/parentnode/schema.xml\", null, null, true), StandardCharsets.UTF_8);\n    assertTrue(\"There should be content in the node! \", content.contains(\"Apache Software Foundation\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["f49693fcc05c1186d9b347493efa73a614f5bba7"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3100fa57deee363537557f82c2b38812a2576acc","date":1467500858,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/SolrCLIZkUtilsTest#testMv().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/SolrCLIZkUtilsTest#testMv().mjava","sourceNew":"  @Test\n  public void testMv() throws Exception {\n\n    // First get something up on ZK\n\n    Path configSet = TEST_PATH().resolve(\"configsets\");\n    Path srcPathCheck = configSet.resolve(\"cloud-subdirs\").resolve(\"conf\");\n    \n    copyConfigUp(configSet, \"cloud-subdirs\", \"mv1\");\n\n    // Now move it somewhere else.\n    String[] args = new String[]{\n        \"-src\", \"zk:/configs/mv1\",\n        \"-dst\", \"zk:/mv2\",\n        \"-zkHost\", zkAddr,\n    };\n\n    SolrCLI.ZkMvTool mvTool = new SolrCLI.ZkMvTool();\n\n    int res = mvTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(mvTool.getOptions()), args));\n    assertEquals(\"Move should have succeeded.\", 0, res);\n\n    // Now does the moved directory match the original on disk?\n    verifyZkLocalPathsMatch(srcPathCheck, \"/mv2\");\n    // And are we sure the old path is gone?\n    assertFalse(\"/configs/mv1 Znode should not be there: \", zkClient.exists(\"/configs/mv1\", true));\n\n    // Files are in mv2\n    // Now fail if we specify \"file:\". Everything should still be in /mv2\n    args = new String[]{\n        \"-src\", \"file:/mv2\",\n        \"-dst\", \"/mv3\",\n        \"-zkHost\", zkAddr,\n    };\n\n    // Still in mv2\n    res = mvTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(mvTool.getOptions()), args));\n    assertTrue(\"Move should NOT have succeeded with file: specified.\", 0 != res);\n\n    // Let's move it to yet another place with no zk: prefix.\n    args = new String[]{\n        \"-src\", \"/mv2\",\n        \"-dst\", \"/mv4\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = mvTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(mvTool.getOptions()), args));\n    assertEquals(\"Move should have succeeded.\", 0, res);\n\n    assertFalse(\"Znode /mv3 really should be gone\", zkClient.exists(\"/mv3\", true));\n\n    // Now does the moved directory match the original on disk?\n    verifyZkLocalPathsMatch(srcPathCheck, \"/mv4\");\n\n    args = new String[]{\n        \"-src\", \"/mv4/solrconfig.xml\",\n        \"-dst\", \"/testmvsingle/solrconfig.xml\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = mvTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(mvTool.getOptions()), args));\n    assertEquals(\"Move should have succeeded.\", 0, res);\n    assertTrue(\"Should be able to move a single file\", zkClient.exists(\"/testmvsingle/solrconfig.xml\", true));\n\n    zkClient.makePath(\"/parentNode\", true);\n\n    // what happens if the destination ends with a slash?\n    args = new String[]{\n        \"-src\", \"/mv4/schema.xml\",\n        \"-dst\", \"/parentnode/\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = mvTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(mvTool.getOptions()), args));\n    assertEquals(\"Move should have succeeded.\", 0, res);\n    assertTrue(\"Should be able to move a single file to a parent znode\", zkClient.exists(\"/parentnode/schema.xml\", true));\n    String content = new String(zkClient.getData(\"/parentnode/schema.xml\", null, null, true), StandardCharsets.UTF_8);\n    assertTrue(\"There should be content in the node! \", content.contains(\"Apache Software Foundation\"));\n  }\n\n","sourceOld":"  @Test\n  public void testMv() throws Exception {\n\n    // First get something up on ZK\n    Path src = TEST_PATH().resolve(\"configsets\").resolve(\"cloud-subdirs\").resolve(\"conf\");\n    Path configSet = TEST_PATH().resolve(\"configsets\").resolve(\"cloud-subdirs\");\n\n    copyConfigUp(src, configSet, \"mv1\");\n\n    // Now move it somewhere else.\n    String[] args = new String[]{\n        \"-src\", \"zk:/configs/mv1\",\n        \"-dst\", \"zk:/mv2\",\n        \"-zkHost\", zkAddr,\n    };\n\n    SolrCLI.ZkMvTool mvTool = new SolrCLI.ZkMvTool();\n\n    int res = mvTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(mvTool.getOptions()), args));\n    assertEquals(\"Move should have succeeded.\", 0, res);\n\n    // Now does the moved directory match the original on disk?\n    verifyZkLocalPathsMatch(src, \"/mv2\");\n    // And are we sure the old path is gone?\n    assertFalse(\"/configs/mv1 Znode should not be there: \", zkClient.exists(\"/configs/mv1\", true));\n\n    // Files are in mv2\n    // Now fail if we specify \"file:\". Everything should still be in /mv2\n    args = new String[]{\n        \"-src\", \"file:/mv2\",\n        \"-dst\", \"/mv3\",\n        \"-zkHost\", zkAddr,\n    };\n\n    // Still in mv2\n    res = mvTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(mvTool.getOptions()), args));\n    assertTrue(\"Move should NOT have succeeded with file: specified.\", 0 != res);\n\n    // Let's move it to yet another place with no zk: prefix.\n    args = new String[]{\n        \"-src\", \"/mv2\",\n        \"-dst\", \"/mv4\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = mvTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(mvTool.getOptions()), args));\n    assertEquals(\"Move should have succeeded.\", 0, res);\n\n    assertFalse(\"Znode /mv3 really should be gone\", zkClient.exists(\"/mv3\", true));\n\n    // Now does the moved directory match the original on disk?\n    verifyZkLocalPathsMatch(src, \"/mv4\");\n\n    args = new String[]{\n        \"-src\", \"/mv4/solrconfig.xml\",\n        \"-dst\", \"/testmvsingle/solrconfig.xml\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = mvTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(mvTool.getOptions()), args));\n    assertEquals(\"Move should have succeeded.\", 0, res);\n    assertTrue(\"Should be able to move a single file\", zkClient.exists(\"/testmvsingle/solrconfig.xml\", true));\n\n    zkClient.makePath(\"/parentNode\", true);\n\n    // what happens if the destination ends with a slash?\n    args = new String[]{\n        \"-src\", \"/mv4/schema.xml\",\n        \"-dst\", \"/parentnode/\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = mvTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(mvTool.getOptions()), args));\n    assertEquals(\"Move should have succeeded.\", 0, res);\n    assertTrue(\"Should be able to move a single file to a parent znode\", zkClient.exists(\"/parentnode/schema.xml\", true));\n    String content = new String(zkClient.getData(\"/parentnode/schema.xml\", null, null, true), StandardCharsets.UTF_8);\n    assertTrue(\"There should be content in the node! \", content.contains(\"Apache Software Foundation\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/SolrCLIZkUtilsTest#testMv().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testMv() throws Exception {\n\n    // First get something up on ZK\n\n    Path configSet = TEST_PATH().resolve(\"configsets\");\n    Path srcPathCheck = configSet.resolve(\"cloud-subdirs\").resolve(\"conf\");\n    \n    copyConfigUp(configSet, \"cloud-subdirs\", \"mv1\");\n\n    // Now move it somewhere else.\n    String[] args = new String[]{\n        \"-src\", \"zk:/configs/mv1\",\n        \"-dst\", \"zk:/mv2\",\n        \"-zkHost\", zkAddr,\n    };\n\n    SolrCLI.ZkMvTool mvTool = new SolrCLI.ZkMvTool();\n\n    int res = mvTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(mvTool.getOptions()), args));\n    assertEquals(\"Move should have succeeded.\", 0, res);\n\n    // Now does the moved directory match the original on disk?\n    verifyZkLocalPathsMatch(srcPathCheck, \"/mv2\");\n    // And are we sure the old path is gone?\n    assertFalse(\"/configs/mv1 Znode should not be there: \", zkClient.exists(\"/configs/mv1\", true));\n\n    // Files are in mv2\n    // Now fail if we specify \"file:\". Everything should still be in /mv2\n    args = new String[]{\n        \"-src\", \"file:/mv2\",\n        \"-dst\", \"/mv3\",\n        \"-zkHost\", zkAddr,\n    };\n\n    // Still in mv2\n    res = mvTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(mvTool.getOptions()), args));\n    assertTrue(\"Move should NOT have succeeded with file: specified.\", 0 != res);\n\n    // Let's move it to yet another place with no zk: prefix.\n    args = new String[]{\n        \"-src\", \"/mv2\",\n        \"-dst\", \"/mv4\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = mvTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(mvTool.getOptions()), args));\n    assertEquals(\"Move should have succeeded.\", 0, res);\n\n    assertFalse(\"Znode /mv3 really should be gone\", zkClient.exists(\"/mv3\", true));\n\n    // Now does the moved directory match the original on disk?\n    verifyZkLocalPathsMatch(srcPathCheck, \"/mv4\");\n\n    args = new String[]{\n        \"-src\", \"/mv4/solrconfig.xml\",\n        \"-dst\", \"/testmvsingle/solrconfig.xml\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = mvTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(mvTool.getOptions()), args));\n    assertEquals(\"Move should have succeeded.\", 0, res);\n    assertTrue(\"Should be able to move a single file\", zkClient.exists(\"/testmvsingle/solrconfig.xml\", true));\n\n    zkClient.makePath(\"/parentNode\", true);\n\n    // what happens if the destination ends with a slash?\n    args = new String[]{\n        \"-src\", \"/mv4/schema.xml\",\n        \"-dst\", \"/parentnode/\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = mvTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(mvTool.getOptions()), args));\n    assertEquals(\"Move should have succeeded.\", 0, res);\n    assertTrue(\"Should be able to move a single file to a parent znode\", zkClient.exists(\"/parentnode/schema.xml\", true));\n    String content = new String(zkClient.getData(\"/parentnode/schema.xml\", null, null, true), StandardCharsets.UTF_8);\n    assertTrue(\"There should be content in the node! \", content.contains(\"Apache Software Foundation\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3565ba5fc0dc3dd0214d263b28e5bf7e06fdbfc2","date":1490847220,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/SolrCLIZkUtilsTest#testMv().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/SolrCLIZkUtilsTest#testMv().mjava","sourceNew":"  @Test\n  public void testMv() throws Exception {\n\n    // First get something up on ZK\n\n    Path configSet = TEST_PATH().resolve(\"configsets\");\n    Path srcPathCheck = configSet.resolve(\"cloud-subdirs\").resolve(\"conf\");\n    \n    copyConfigUp(configSet, \"cloud-subdirs\", \"mv1\");\n\n    // Now move it somewhere else.\n    String[] args = new String[]{\n        \"-src\", \"zk:/configs/mv1\",\n        \"-dst\", \"zk:/mv2\",\n        \"-zkHost\", zkAddr,\n    };\n\n    SolrCLI.ZkMvTool mvTool = new SolrCLI.ZkMvTool();\n\n    int res = mvTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(mvTool.getOptions()), args));\n    assertEquals(\"Move should have succeeded.\", 0, res);\n\n    // Now does the moved directory match the original on disk?\n    verifyZkLocalPathsMatch(srcPathCheck, \"/mv2\");\n    // And are we sure the old path is gone?\n    assertFalse(\"/configs/mv1 Znode should not be there: \", zkClient.exists(\"/configs/mv1\", true));\n\n    // Files are in mv2\n    // Now fail if we specify \"file:\". Everything should still be in /mv2\n    args = new String[]{\n        \"-src\", \"file:\" + File.separator + \"mv2\",\n        \"-dst\", \"/mv3\",\n        \"-zkHost\", zkAddr,\n    };\n\n    // Still in mv2\n    res = mvTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(mvTool.getOptions()), args));\n    assertTrue(\"Move should NOT have succeeded with file: specified.\", 0 != res);\n\n    // Let's move it to yet another place with no zk: prefix.\n    args = new String[]{\n        \"-src\", \"/mv2\",\n        \"-dst\", \"/mv4\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = mvTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(mvTool.getOptions()), args));\n    assertEquals(\"Move should have succeeded.\", 0, res);\n\n    assertFalse(\"Znode /mv3 really should be gone\", zkClient.exists(\"/mv3\", true));\n\n    // Now does the moved directory match the original on disk?\n    verifyZkLocalPathsMatch(srcPathCheck, \"/mv4\");\n\n    args = new String[]{\n        \"-src\", \"/mv4/solrconfig.xml\",\n        \"-dst\", \"/testmvsingle/solrconfig.xml\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = mvTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(mvTool.getOptions()), args));\n    assertEquals(\"Move should have succeeded.\", 0, res);\n    assertTrue(\"Should be able to move a single file\", zkClient.exists(\"/testmvsingle/solrconfig.xml\", true));\n\n    zkClient.makePath(\"/parentNode\", true);\n\n    // what happens if the destination ends with a slash?\n    args = new String[]{\n        \"-src\", \"/mv4/schema.xml\",\n        \"-dst\", \"/parentnode/\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = mvTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(mvTool.getOptions()), args));\n    assertEquals(\"Move should have succeeded.\", 0, res);\n    assertTrue(\"Should be able to move a single file to a parent znode\", zkClient.exists(\"/parentnode/schema.xml\", true));\n    String content = new String(zkClient.getData(\"/parentnode/schema.xml\", null, null, true), StandardCharsets.UTF_8);\n    assertTrue(\"There should be content in the node! \", content.contains(\"Apache Software Foundation\"));\n  }\n\n","sourceOld":"  @Test\n  public void testMv() throws Exception {\n\n    // First get something up on ZK\n\n    Path configSet = TEST_PATH().resolve(\"configsets\");\n    Path srcPathCheck = configSet.resolve(\"cloud-subdirs\").resolve(\"conf\");\n    \n    copyConfigUp(configSet, \"cloud-subdirs\", \"mv1\");\n\n    // Now move it somewhere else.\n    String[] args = new String[]{\n        \"-src\", \"zk:/configs/mv1\",\n        \"-dst\", \"zk:/mv2\",\n        \"-zkHost\", zkAddr,\n    };\n\n    SolrCLI.ZkMvTool mvTool = new SolrCLI.ZkMvTool();\n\n    int res = mvTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(mvTool.getOptions()), args));\n    assertEquals(\"Move should have succeeded.\", 0, res);\n\n    // Now does the moved directory match the original on disk?\n    verifyZkLocalPathsMatch(srcPathCheck, \"/mv2\");\n    // And are we sure the old path is gone?\n    assertFalse(\"/configs/mv1 Znode should not be there: \", zkClient.exists(\"/configs/mv1\", true));\n\n    // Files are in mv2\n    // Now fail if we specify \"file:\". Everything should still be in /mv2\n    args = new String[]{\n        \"-src\", \"file:/mv2\",\n        \"-dst\", \"/mv3\",\n        \"-zkHost\", zkAddr,\n    };\n\n    // Still in mv2\n    res = mvTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(mvTool.getOptions()), args));\n    assertTrue(\"Move should NOT have succeeded with file: specified.\", 0 != res);\n\n    // Let's move it to yet another place with no zk: prefix.\n    args = new String[]{\n        \"-src\", \"/mv2\",\n        \"-dst\", \"/mv4\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = mvTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(mvTool.getOptions()), args));\n    assertEquals(\"Move should have succeeded.\", 0, res);\n\n    assertFalse(\"Znode /mv3 really should be gone\", zkClient.exists(\"/mv3\", true));\n\n    // Now does the moved directory match the original on disk?\n    verifyZkLocalPathsMatch(srcPathCheck, \"/mv4\");\n\n    args = new String[]{\n        \"-src\", \"/mv4/solrconfig.xml\",\n        \"-dst\", \"/testmvsingle/solrconfig.xml\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = mvTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(mvTool.getOptions()), args));\n    assertEquals(\"Move should have succeeded.\", 0, res);\n    assertTrue(\"Should be able to move a single file\", zkClient.exists(\"/testmvsingle/solrconfig.xml\", true));\n\n    zkClient.makePath(\"/parentNode\", true);\n\n    // what happens if the destination ends with a slash?\n    args = new String[]{\n        \"-src\", \"/mv4/schema.xml\",\n        \"-dst\", \"/parentnode/\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = mvTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(mvTool.getOptions()), args));\n    assertEquals(\"Move should have succeeded.\", 0, res);\n    assertTrue(\"Should be able to move a single file to a parent znode\", zkClient.exists(\"/parentnode/schema.xml\", true));\n    String content = new String(zkClient.getData(\"/parentnode/schema.xml\", null, null, true), StandardCharsets.UTF_8);\n    assertTrue(\"There should be content in the node! \", content.contains(\"Apache Software Foundation\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f49693fcc05c1186d9b347493efa73a614f5bba7","date":1490873947,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/SolrCLIZkUtilsTest#testMv().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/SolrCLIZkUtilsTest#testMv().mjava","sourceNew":"  @Test\n  public void testMv() throws Exception {\n\n    // First get something up on ZK\n\n    Path configSet = TEST_PATH().resolve(\"configsets\");\n    Path srcPathCheck = configSet.resolve(\"cloud-subdirs\").resolve(\"conf\");\n    \n    copyConfigUp(configSet, \"cloud-subdirs\", \"mv1\");\n\n    // Now move it somewhere else.\n    String[] args = new String[]{\n        \"-src\", \"zk:/configs/mv1\",\n        \"-dst\", \"zk:/mv2\",\n        \"-zkHost\", zkAddr,\n    };\n\n    SolrCLI.ZkMvTool mvTool = new SolrCLI.ZkMvTool();\n\n    int res = mvTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(mvTool.getOptions()), args));\n    assertEquals(\"Move should have succeeded.\", 0, res);\n\n    // Now does the moved directory match the original on disk?\n    verifyZkLocalPathsMatch(srcPathCheck, \"/mv2\");\n    // And are we sure the old path is gone?\n    assertFalse(\"/configs/mv1 Znode should not be there: \", zkClient.exists(\"/configs/mv1\", true));\n\n    // Files are in mv2\n    // Now fail if we specify \"file:\". Everything should still be in /mv2\n    args = new String[]{\n        \"-src\", \"file:\" + File.separator + \"mv2\",\n        \"-dst\", \"/mv3\",\n        \"-zkHost\", zkAddr,\n    };\n\n    // Still in mv2\n    res = mvTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(mvTool.getOptions()), args));\n    assertTrue(\"Move should NOT have succeeded with file: specified.\", 0 != res);\n\n    // Let's move it to yet another place with no zk: prefix.\n    args = new String[]{\n        \"-src\", \"/mv2\",\n        \"-dst\", \"/mv4\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = mvTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(mvTool.getOptions()), args));\n    assertEquals(\"Move should have succeeded.\", 0, res);\n\n    assertFalse(\"Znode /mv3 really should be gone\", zkClient.exists(\"/mv3\", true));\n\n    // Now does the moved directory match the original on disk?\n    verifyZkLocalPathsMatch(srcPathCheck, \"/mv4\");\n\n    args = new String[]{\n        \"-src\", \"/mv4/solrconfig.xml\",\n        \"-dst\", \"/testmvsingle/solrconfig.xml\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = mvTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(mvTool.getOptions()), args));\n    assertEquals(\"Move should have succeeded.\", 0, res);\n    assertTrue(\"Should be able to move a single file\", zkClient.exists(\"/testmvsingle/solrconfig.xml\", true));\n\n    zkClient.makePath(\"/parentNode\", true);\n\n    // what happens if the destination ends with a slash?\n    args = new String[]{\n        \"-src\", \"/mv4/schema.xml\",\n        \"-dst\", \"/parentnode/\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = mvTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(mvTool.getOptions()), args));\n    assertEquals(\"Move should have succeeded.\", 0, res);\n    assertTrue(\"Should be able to move a single file to a parent znode\", zkClient.exists(\"/parentnode/schema.xml\", true));\n    String content = new String(zkClient.getData(\"/parentnode/schema.xml\", null, null, true), StandardCharsets.UTF_8);\n    assertTrue(\"There should be content in the node! \", content.contains(\"Apache Software Foundation\"));\n  }\n\n","sourceOld":"  @Test\n  public void testMv() throws Exception {\n\n    // First get something up on ZK\n\n    Path configSet = TEST_PATH().resolve(\"configsets\");\n    Path srcPathCheck = configSet.resolve(\"cloud-subdirs\").resolve(\"conf\");\n    \n    copyConfigUp(configSet, \"cloud-subdirs\", \"mv1\");\n\n    // Now move it somewhere else.\n    String[] args = new String[]{\n        \"-src\", \"zk:/configs/mv1\",\n        \"-dst\", \"zk:/mv2\",\n        \"-zkHost\", zkAddr,\n    };\n\n    SolrCLI.ZkMvTool mvTool = new SolrCLI.ZkMvTool();\n\n    int res = mvTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(mvTool.getOptions()), args));\n    assertEquals(\"Move should have succeeded.\", 0, res);\n\n    // Now does the moved directory match the original on disk?\n    verifyZkLocalPathsMatch(srcPathCheck, \"/mv2\");\n    // And are we sure the old path is gone?\n    assertFalse(\"/configs/mv1 Znode should not be there: \", zkClient.exists(\"/configs/mv1\", true));\n\n    // Files are in mv2\n    // Now fail if we specify \"file:\". Everything should still be in /mv2\n    args = new String[]{\n        \"-src\", \"file:/mv2\",\n        \"-dst\", \"/mv3\",\n        \"-zkHost\", zkAddr,\n    };\n\n    // Still in mv2\n    res = mvTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(mvTool.getOptions()), args));\n    assertTrue(\"Move should NOT have succeeded with file: specified.\", 0 != res);\n\n    // Let's move it to yet another place with no zk: prefix.\n    args = new String[]{\n        \"-src\", \"/mv2\",\n        \"-dst\", \"/mv4\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = mvTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(mvTool.getOptions()), args));\n    assertEquals(\"Move should have succeeded.\", 0, res);\n\n    assertFalse(\"Znode /mv3 really should be gone\", zkClient.exists(\"/mv3\", true));\n\n    // Now does the moved directory match the original on disk?\n    verifyZkLocalPathsMatch(srcPathCheck, \"/mv4\");\n\n    args = new String[]{\n        \"-src\", \"/mv4/solrconfig.xml\",\n        \"-dst\", \"/testmvsingle/solrconfig.xml\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = mvTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(mvTool.getOptions()), args));\n    assertEquals(\"Move should have succeeded.\", 0, res);\n    assertTrue(\"Should be able to move a single file\", zkClient.exists(\"/testmvsingle/solrconfig.xml\", true));\n\n    zkClient.makePath(\"/parentNode\", true);\n\n    // what happens if the destination ends with a slash?\n    args = new String[]{\n        \"-src\", \"/mv4/schema.xml\",\n        \"-dst\", \"/parentnode/\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = mvTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(mvTool.getOptions()), args));\n    assertEquals(\"Move should have succeeded.\", 0, res);\n    assertTrue(\"Should be able to move a single file to a parent znode\", zkClient.exists(\"/parentnode/schema.xml\", true));\n    String content = new String(zkClient.getData(\"/parentnode/schema.xml\", null, null, true), StandardCharsets.UTF_8);\n    assertTrue(\"There should be content in the node! \", content.contains(\"Apache Software Foundation\"));\n  }\n\n","bugFix":["9272a617a9cbebf86be127014bbbacd7cf8f8e83"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4949836c6e83246ddba8997472e3333f40986c8c","date":1560293762,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/SolrCLIZkUtilsTest#testMv().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/SolrCLIZkUtilsTest#testMv().mjava","sourceNew":"  @Test\n  public void testMv() throws Exception {\n\n    // First get something up on ZK\n\n    Path configSet = TEST_PATH().resolve(\"configsets\");\n    Path srcPathCheck = configSet.resolve(\"cloud-subdirs\").resolve(\"conf\");\n\n    AbstractDistribZkTestBase.copyConfigUp(configSet, \"cloud-subdirs\", \"mv1\", zkAddr);\n\n    // Now move it somewhere else.\n    String[] args = new String[]{\n        \"-src\", \"zk:/configs/mv1\",\n        \"-dst\", \"zk:/mv2\",\n        \"-zkHost\", zkAddr,\n    };\n\n    SolrCLI.ZkMvTool mvTool = new SolrCLI.ZkMvTool();\n\n    int res = mvTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(mvTool.getOptions()), args));\n    assertEquals(\"Move should have succeeded.\", 0, res);\n\n    // Now does the moved directory match the original on disk?\n    verifyZkLocalPathsMatch(srcPathCheck, \"/mv2\");\n    // And are we sure the old path is gone?\n    assertFalse(\"/configs/mv1 Znode should not be there: \", zkClient.exists(\"/configs/mv1\", true));\n\n    // Files are in mv2\n    // Now fail if we specify \"file:\". Everything should still be in /mv2\n    args = new String[]{\n        \"-src\", \"file:\" + File.separator + \"mv2\",\n        \"-dst\", \"/mv3\",\n        \"-zkHost\", zkAddr,\n    };\n\n    // Still in mv2\n    res = mvTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(mvTool.getOptions()), args));\n    assertTrue(\"Move should NOT have succeeded with file: specified.\", 0 != res);\n\n    // Let's move it to yet another place with no zk: prefix.\n    args = new String[]{\n        \"-src\", \"/mv2\",\n        \"-dst\", \"/mv4\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = mvTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(mvTool.getOptions()), args));\n    assertEquals(\"Move should have succeeded.\", 0, res);\n\n    assertFalse(\"Znode /mv3 really should be gone\", zkClient.exists(\"/mv3\", true));\n\n    // Now does the moved directory match the original on disk?\n    verifyZkLocalPathsMatch(srcPathCheck, \"/mv4\");\n\n    args = new String[]{\n        \"-src\", \"/mv4/solrconfig.xml\",\n        \"-dst\", \"/testmvsingle/solrconfig.xml\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = mvTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(mvTool.getOptions()), args));\n    assertEquals(\"Move should have succeeded.\", 0, res);\n    assertTrue(\"Should be able to move a single file\", zkClient.exists(\"/testmvsingle/solrconfig.xml\", true));\n\n    zkClient.makePath(\"/parentNode\", true);\n\n    // what happens if the destination ends with a slash?\n    args = new String[]{\n        \"-src\", \"/mv4/schema.xml\",\n        \"-dst\", \"/parentnode/\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = mvTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(mvTool.getOptions()), args));\n    assertEquals(\"Move should have succeeded.\", 0, res);\n    assertTrue(\"Should be able to move a single file to a parent znode\", zkClient.exists(\"/parentnode/schema.xml\", true));\n    String content = new String(zkClient.getData(\"/parentnode/schema.xml\", null, null, true), StandardCharsets.UTF_8);\n    assertTrue(\"There should be content in the node! \", content.contains(\"Apache Software Foundation\"));\n  }\n\n","sourceOld":"  @Test\n  public void testMv() throws Exception {\n\n    // First get something up on ZK\n\n    Path configSet = TEST_PATH().resolve(\"configsets\");\n    Path srcPathCheck = configSet.resolve(\"cloud-subdirs\").resolve(\"conf\");\n    \n    copyConfigUp(configSet, \"cloud-subdirs\", \"mv1\");\n\n    // Now move it somewhere else.\n    String[] args = new String[]{\n        \"-src\", \"zk:/configs/mv1\",\n        \"-dst\", \"zk:/mv2\",\n        \"-zkHost\", zkAddr,\n    };\n\n    SolrCLI.ZkMvTool mvTool = new SolrCLI.ZkMvTool();\n\n    int res = mvTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(mvTool.getOptions()), args));\n    assertEquals(\"Move should have succeeded.\", 0, res);\n\n    // Now does the moved directory match the original on disk?\n    verifyZkLocalPathsMatch(srcPathCheck, \"/mv2\");\n    // And are we sure the old path is gone?\n    assertFalse(\"/configs/mv1 Znode should not be there: \", zkClient.exists(\"/configs/mv1\", true));\n\n    // Files are in mv2\n    // Now fail if we specify \"file:\". Everything should still be in /mv2\n    args = new String[]{\n        \"-src\", \"file:\" + File.separator + \"mv2\",\n        \"-dst\", \"/mv3\",\n        \"-zkHost\", zkAddr,\n    };\n\n    // Still in mv2\n    res = mvTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(mvTool.getOptions()), args));\n    assertTrue(\"Move should NOT have succeeded with file: specified.\", 0 != res);\n\n    // Let's move it to yet another place with no zk: prefix.\n    args = new String[]{\n        \"-src\", \"/mv2\",\n        \"-dst\", \"/mv4\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = mvTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(mvTool.getOptions()), args));\n    assertEquals(\"Move should have succeeded.\", 0, res);\n\n    assertFalse(\"Znode /mv3 really should be gone\", zkClient.exists(\"/mv3\", true));\n\n    // Now does the moved directory match the original on disk?\n    verifyZkLocalPathsMatch(srcPathCheck, \"/mv4\");\n\n    args = new String[]{\n        \"-src\", \"/mv4/solrconfig.xml\",\n        \"-dst\", \"/testmvsingle/solrconfig.xml\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = mvTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(mvTool.getOptions()), args));\n    assertEquals(\"Move should have succeeded.\", 0, res);\n    assertTrue(\"Should be able to move a single file\", zkClient.exists(\"/testmvsingle/solrconfig.xml\", true));\n\n    zkClient.makePath(\"/parentNode\", true);\n\n    // what happens if the destination ends with a slash?\n    args = new String[]{\n        \"-src\", \"/mv4/schema.xml\",\n        \"-dst\", \"/parentnode/\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = mvTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(mvTool.getOptions()), args));\n    assertEquals(\"Move should have succeeded.\", 0, res);\n    assertTrue(\"Should be able to move a single file to a parent znode\", zkClient.exists(\"/parentnode/schema.xml\", true));\n    String content = new String(zkClient.getData(\"/parentnode/schema.xml\", null, null, true), StandardCharsets.UTF_8);\n    assertTrue(\"There should be content in the node! \", content.contains(\"Apache Software Foundation\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f49693fcc05c1186d9b347493efa73a614f5bba7":["3100fa57deee363537557f82c2b38812a2576acc"],"3100fa57deee363537557f82c2b38812a2576acc":["9272a617a9cbebf86be127014bbbacd7cf8f8e83"],"9272a617a9cbebf86be127014bbbacd7cf8f8e83":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4949836c6e83246ddba8997472e3333f40986c8c":["3565ba5fc0dc3dd0214d263b28e5bf7e06fdbfc2"],"3565ba5fc0dc3dd0214d263b28e5bf7e06fdbfc2":["3100fa57deee363537557f82c2b38812a2576acc"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3100fa57deee363537557f82c2b38812a2576acc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4949836c6e83246ddba8997472e3333f40986c8c"]},"commit2Childs":{"f49693fcc05c1186d9b347493efa73a614f5bba7":[],"3100fa57deee363537557f82c2b38812a2576acc":["f49693fcc05c1186d9b347493efa73a614f5bba7","3565ba5fc0dc3dd0214d263b28e5bf7e06fdbfc2","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"9272a617a9cbebf86be127014bbbacd7cf8f8e83":["3100fa57deee363537557f82c2b38812a2576acc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9272a617a9cbebf86be127014bbbacd7cf8f8e83","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4949836c6e83246ddba8997472e3333f40986c8c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3565ba5fc0dc3dd0214d263b28e5bf7e06fdbfc2":["4949836c6e83246ddba8997472e3333f40986c8c"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["f49693fcc05c1186d9b347493efa73a614f5bba7","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}