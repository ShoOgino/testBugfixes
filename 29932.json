{"path":"solr/core/src/java/org/apache/solr/search/SolrDocumentFetcher.LargeLazyField#readBytes().mjava","commits":[{"id":"63a9344cff6a72bc4c1ef080c69e10ad0635b811","date":1490410892,"type":1,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrDocumentFetcher.LargeLazyField#readBytes().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher.LargeLazyField#readBytes().mjava","sourceNew":"    synchronized BytesRef readBytes() throws IOException {\n      if (cachedBytes != null) {\n        return cachedBytes;\n      } else {\n        BytesRef bytesRef = new BytesRef();\n        searcher.getIndexReader().document(docId, new StoredFieldVisitor() {\n          boolean done = false;\n          @Override\n          public Status needsField(FieldInfo fieldInfo) throws IOException {\n            if (done) {\n              return Status.STOP;\n            }\n            return fieldInfo.name.equals(name()) ? Status.YES : Status.NO;\n          }\n\n          @Override\n          public void stringField(FieldInfo fieldInfo, byte[] value) throws IOException {\n            bytesRef.bytes = value;\n            bytesRef.length = value.length;\n            done = true;\n          }\n\n          @Override\n          public void binaryField(FieldInfo fieldInfo, byte[] value) throws IOException {\n            throw new UnsupportedOperationException(\"'large' binary fields are not (yet) supported\");\n          }\n        });\n        if (bytesRef.length < largeValueLengthCacheThreshold) {\n          return cachedBytes = bytesRef;\n        } else {\n          return bytesRef;\n        }\n      }\n    }\n\n","sourceOld":"    synchronized BytesRef readBytes() throws IOException {\n      if (cachedBytes != null) {\n        return cachedBytes;\n      } else {\n        BytesRef bytesRef = new BytesRef();\n        getIndexReader().document(docId, new StoredFieldVisitor() {\n          boolean done = false;\n          @Override\n          public Status needsField(FieldInfo fieldInfo) throws IOException {\n            if (done) {\n              return Status.STOP;\n            }\n            return fieldInfo.name.equals(name()) ? Status.YES : Status.NO;\n          }\n\n          @Override\n          public void stringField(FieldInfo fieldInfo, byte[] value) throws IOException {\n            bytesRef.bytes = value;\n            bytesRef.length = value.length;\n            done = true;\n          }\n\n          @Override\n          public void binaryField(FieldInfo fieldInfo, byte[] value) throws IOException {\n            throw new UnsupportedOperationException(\"'large' binary fields are not (yet) supported\");\n          }\n        });\n        if (bytesRef.length < largeValueLengthCacheThreshold) {\n          return cachedBytes = bytesRef;\n        } else {\n          return bytesRef;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"de548de3ce5405595899f548152d4b93ac9eb9cc","date":1490594650,"type":1,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrDocumentFetcher.LargeLazyField#readBytes().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher.LargeLazyField#readBytes().mjava","sourceNew":"    synchronized BytesRef readBytes() throws IOException {\n      if (cachedBytes != null) {\n        return cachedBytes;\n      } else {\n        BytesRef bytesRef = new BytesRef();\n        searcher.getIndexReader().document(docId, new StoredFieldVisitor() {\n          boolean done = false;\n          @Override\n          public Status needsField(FieldInfo fieldInfo) throws IOException {\n            if (done) {\n              return Status.STOP;\n            }\n            return fieldInfo.name.equals(name()) ? Status.YES : Status.NO;\n          }\n\n          @Override\n          public void stringField(FieldInfo fieldInfo, byte[] value) throws IOException {\n            bytesRef.bytes = value;\n            bytesRef.length = value.length;\n            done = true;\n          }\n\n          @Override\n          public void binaryField(FieldInfo fieldInfo, byte[] value) throws IOException {\n            throw new UnsupportedOperationException(\"'large' binary fields are not (yet) supported\");\n          }\n        });\n        if (bytesRef.length < largeValueLengthCacheThreshold) {\n          return cachedBytes = bytesRef;\n        } else {\n          return bytesRef;\n        }\n      }\n    }\n\n","sourceOld":"    synchronized BytesRef readBytes() throws IOException {\n      if (cachedBytes != null) {\n        return cachedBytes;\n      } else {\n        BytesRef bytesRef = new BytesRef();\n        getIndexReader().document(docId, new StoredFieldVisitor() {\n          boolean done = false;\n          @Override\n          public Status needsField(FieldInfo fieldInfo) throws IOException {\n            if (done) {\n              return Status.STOP;\n            }\n            return fieldInfo.name.equals(name()) ? Status.YES : Status.NO;\n          }\n\n          @Override\n          public void stringField(FieldInfo fieldInfo, byte[] value) throws IOException {\n            bytesRef.bytes = value;\n            bytesRef.length = value.length;\n            done = true;\n          }\n\n          @Override\n          public void binaryField(FieldInfo fieldInfo, byte[] value) throws IOException {\n            throw new UnsupportedOperationException(\"'large' binary fields are not (yet) supported\");\n          }\n        });\n        if (bytesRef.length < largeValueLengthCacheThreshold) {\n          return cachedBytes = bytesRef;\n        } else {\n          return bytesRef;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"96ecd141e96e7a7a65822d7fada5ddc585b21149","date":1534786652,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrDocumentFetcher.LargeLazyField#readBytes().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrDocumentFetcher.LargeLazyField#readBytes().mjava","sourceNew":"    synchronized BytesRef readBytes() throws IOException {\n      if (cachedBytes != null) {\n        return cachedBytes;\n      } else {\n        BytesRef bytesRef = new BytesRef();\n        searcher.getIndexReader().document(docId, new StoredFieldVisitor() {\n          boolean done = false;\n\n          @Override\n          public Status needsField(FieldInfo fieldInfo) throws IOException {\n            if (done) {\n              return Status.STOP;\n            }\n            return fieldInfo.name.equals(name()) ? Status.YES : Status.NO;\n          }\n\n          @Override\n          public void stringField(FieldInfo fieldInfo, byte[] value) throws IOException {\n            bytesRef.bytes = value;\n            bytesRef.length = value.length;\n            done = true;\n          }\n\n          @Override\n          public void binaryField(FieldInfo fieldInfo, byte[] value) throws IOException {\n            throw new UnsupportedOperationException(\"'large' binary fields are not (yet) supported\");\n          }\n        });\n        if (bytesRef.length < largeValueLengthCacheThreshold) {\n          return cachedBytes = bytesRef;\n        } else {\n          return bytesRef;\n        }\n      }\n    }\n\n","sourceOld":"    synchronized BytesRef readBytes() throws IOException {\n      if (cachedBytes != null) {\n        return cachedBytes;\n      } else {\n        BytesRef bytesRef = new BytesRef();\n        searcher.getIndexReader().document(docId, new StoredFieldVisitor() {\n          boolean done = false;\n          @Override\n          public Status needsField(FieldInfo fieldInfo) throws IOException {\n            if (done) {\n              return Status.STOP;\n            }\n            return fieldInfo.name.equals(name()) ? Status.YES : Status.NO;\n          }\n\n          @Override\n          public void stringField(FieldInfo fieldInfo, byte[] value) throws IOException {\n            bytesRef.bytes = value;\n            bytesRef.length = value.length;\n            done = true;\n          }\n\n          @Override\n          public void binaryField(FieldInfo fieldInfo, byte[] value) throws IOException {\n            throw new UnsupportedOperationException(\"'large' binary fields are not (yet) supported\");\n          }\n        });\n        if (bytesRef.length < largeValueLengthCacheThreshold) {\n          return cachedBytes = bytesRef;\n        } else {\n          return bytesRef;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"500188ac33da6ce742a5b18858f34701ef16c77a","date":1558462722,"type":3,"author":"Namgyu Kim","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrDocumentFetcher.LargeLazyField#readBytes().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrDocumentFetcher.LargeLazyField#readBytes().mjava","sourceNew":"    synchronized BytesRef readBytes() throws IOException {\n      if (cachedBytes != null) {\n        return cachedBytes;\n      } else {\n        BytesRef bytesRef = new BytesRef();\n        searcher.getIndexReader().document(docId, new StoredFieldVisitor() {\n          boolean done = false;\n\n          @Override\n          public Status needsField(FieldInfo fieldInfo) throws IOException {\n            if (done) {\n              return Status.STOP;\n            }\n            return fieldInfo.name.equals(name()) ? Status.YES : Status.NO;\n          }\n\n          @Override\n          public void stringField(FieldInfo fieldInfo, String value) throws IOException {\n            Objects.requireNonNull(value, \"String value should not be null\");\n            bytesRef.bytes = value.getBytes(StandardCharsets.UTF_8);\n            bytesRef.length = value.length();\n            done = true;\n          }\n\n          @Override\n          public void binaryField(FieldInfo fieldInfo, byte[] value) throws IOException {\n            throw new UnsupportedOperationException(\"'large' binary fields are not (yet) supported\");\n          }\n        });\n        if (bytesRef.length < largeValueLengthCacheThreshold) {\n          return cachedBytes = bytesRef;\n        } else {\n          return bytesRef;\n        }\n      }\n    }\n\n","sourceOld":"    synchronized BytesRef readBytes() throws IOException {\n      if (cachedBytes != null) {\n        return cachedBytes;\n      } else {\n        BytesRef bytesRef = new BytesRef();\n        searcher.getIndexReader().document(docId, new StoredFieldVisitor() {\n          boolean done = false;\n\n          @Override\n          public Status needsField(FieldInfo fieldInfo) throws IOException {\n            if (done) {\n              return Status.STOP;\n            }\n            return fieldInfo.name.equals(name()) ? Status.YES : Status.NO;\n          }\n\n          @Override\n          public void stringField(FieldInfo fieldInfo, byte[] value) throws IOException {\n            bytesRef.bytes = value;\n            bytesRef.length = value.length;\n            done = true;\n          }\n\n          @Override\n          public void binaryField(FieldInfo fieldInfo, byte[] value) throws IOException {\n            throw new UnsupportedOperationException(\"'large' binary fields are not (yet) supported\");\n          }\n        });\n        if (bytesRef.length < largeValueLengthCacheThreshold) {\n          return cachedBytes = bytesRef;\n        } else {\n          return bytesRef;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"96ecd141e96e7a7a65822d7fada5ddc585b21149":["63a9344cff6a72bc4c1ef080c69e10ad0635b811"],"de548de3ce5405595899f548152d4b93ac9eb9cc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"63a9344cff6a72bc4c1ef080c69e10ad0635b811":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"500188ac33da6ce742a5b18858f34701ef16c77a":["96ecd141e96e7a7a65822d7fada5ddc585b21149"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["500188ac33da6ce742a5b18858f34701ef16c77a"]},"commit2Childs":{"96ecd141e96e7a7a65822d7fada5ddc585b21149":["500188ac33da6ce742a5b18858f34701ef16c77a"],"de548de3ce5405595899f548152d4b93ac9eb9cc":[],"63a9344cff6a72bc4c1ef080c69e10ad0635b811":["96ecd141e96e7a7a65822d7fada5ddc585b21149"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["de548de3ce5405595899f548152d4b93ac9eb9cc","63a9344cff6a72bc4c1ef080c69e10ad0635b811"],"500188ac33da6ce742a5b18858f34701ef16c77a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["de548de3ce5405595899f548152d4b93ac9eb9cc","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}