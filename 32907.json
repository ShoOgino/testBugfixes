{"path":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testDeleteUnusedUpdatesFiles().mjava","commits":[{"id":"2f13fb377f9b5df46af44bf90a2e507a884f2c30","date":1380476222,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testDeleteUnusedUpdatesFiles().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testDeleteUnusedUpdatesFiles() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"d0\", Store.NO));\n    doc.add(new NumericDocValuesField(\"f\", 1L));\n    writer.addDocument(doc);\n\n    // create _0_1.fnm\n    writer.updateNumericDocValue(new Term(\"id\", \"d0\"), \"f\", 2L);\n    writer.commit();\n\n    // create _0_2.fnm, and _0_1.fnm should be deleted\n    writer.updateNumericDocValue(new Term(\"id\", \"d0\"), \"f\", 2L);\n    writer.commit();\n\n    assertTrue(dir.fileExists(\"_0_2.fnm\"));\n    assertFalse(\"old generation field infos file should not exist in the directory: _0_1.fnm\", dir.fileExists(\"_0_1.fnm\"));\n    \n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["0567bdc5c86c94ced64201187cfcef2417d76dda","4b00269e80723ee74683383bea08f08dd2814ec8"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4b00269e80723ee74683383bea08f08dd2814ec8","date":1380523192,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testDeleteUnusedUpdatesFiles().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testDeleteUnusedUpdatesFiles().mjava","sourceNew":"  @Test\n  public void testDeleteUnusedUpdatesFiles() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"d0\", Store.NO));\n    doc.add(new NumericDocValuesField(\"f\", 1L));\n    writer.addDocument(doc);\n\n    // create first gen of update files\n    writer.updateNumericDocValue(new Term(\"id\", \"d0\"), \"f\", 2L);\n    writer.commit();\n    int numFiles = dir.listAll().length;\n\n    DirectoryReader r = DirectoryReader.open(dir);\n    assertEquals(2L, r.leaves().get(0).reader().getNumericDocValues(\"f\").get(0));\n    r.close();\n    \n    // create second gen of update files, first gen should be deleted\n    writer.updateNumericDocValue(new Term(\"id\", \"d0\"), \"f\", 5L);\n    writer.commit();\n    assertEquals(numFiles, dir.listAll().length);\n\n    r = DirectoryReader.open(dir);\n    assertEquals(5L, r.leaves().get(0).reader().getNumericDocValues(\"f\").get(0));\n    r.close();\n\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testDeleteUnusedUpdatesFiles() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"d0\", Store.NO));\n    doc.add(new NumericDocValuesField(\"f\", 1L));\n    writer.addDocument(doc);\n\n    // create _0_1.fnm\n    writer.updateNumericDocValue(new Term(\"id\", \"d0\"), \"f\", 2L);\n    writer.commit();\n\n    // create _0_2.fnm, and _0_1.fnm should be deleted\n    writer.updateNumericDocValue(new Term(\"id\", \"d0\"), \"f\", 2L);\n    writer.commit();\n\n    assertTrue(dir.fileExists(\"_0_2.fnm\"));\n    assertFalse(\"old generation field infos file should not exist in the directory: _0_1.fnm\", dir.fileExists(\"_0_1.fnm\"));\n    \n    writer.close();\n    dir.close();\n  }\n\n","bugFix":["2f13fb377f9b5df46af44bf90a2e507a884f2c30"],"bugIntro":["0567bdc5c86c94ced64201187cfcef2417d76dda"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testDeleteUnusedUpdatesFiles().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testDeleteUnusedUpdatesFiles().mjava","sourceNew":"  @Test\n  public void testDeleteUnusedUpdatesFiles() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"d0\", Store.NO));\n    doc.add(new NumericDocValuesField(\"f\", 1L));\n    writer.addDocument(doc);\n\n    // create first gen of update files\n    writer.updateNumericDocValue(new Term(\"id\", \"d0\"), \"f\", 2L);\n    writer.commit();\n    int numFiles = dir.listAll().length;\n\n    DirectoryReader r = DirectoryReader.open(dir);\n    assertEquals(2L, r.leaves().get(0).reader().getNumericDocValues(\"f\").get(0));\n    r.close();\n    \n    // create second gen of update files, first gen should be deleted\n    writer.updateNumericDocValue(new Term(\"id\", \"d0\"), \"f\", 5L);\n    writer.commit();\n    assertEquals(numFiles, dir.listAll().length);\n\n    r = DirectoryReader.open(dir);\n    assertEquals(5L, r.leaves().get(0).reader().getNumericDocValues(\"f\").get(0));\n    r.close();\n\n    writer.shutdown();\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testDeleteUnusedUpdatesFiles() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"d0\", Store.NO));\n    doc.add(new NumericDocValuesField(\"f\", 1L));\n    writer.addDocument(doc);\n\n    // create first gen of update files\n    writer.updateNumericDocValue(new Term(\"id\", \"d0\"), \"f\", 2L);\n    writer.commit();\n    int numFiles = dir.listAll().length;\n\n    DirectoryReader r = DirectoryReader.open(dir);\n    assertEquals(2L, r.leaves().get(0).reader().getNumericDocValues(\"f\").get(0));\n    r.close();\n    \n    // create second gen of update files, first gen should be deleted\n    writer.updateNumericDocValue(new Term(\"id\", \"d0\"), \"f\", 5L);\n    writer.commit();\n    assertEquals(numFiles, dir.listAll().length);\n\n    r = DirectoryReader.open(dir);\n    assertEquals(5L, r.leaves().get(0).reader().getNumericDocValues(\"f\").get(0));\n    r.close();\n\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0567bdc5c86c94ced64201187cfcef2417d76dda","date":1400678298,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testDeleteUnusedUpdatesFiles().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testDeleteUnusedUpdatesFiles().mjava","sourceNew":"  @Test\n  public void testDeleteUnusedUpdatesFiles() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"d0\", Store.NO));\n    doc.add(new NumericDocValuesField(\"f1\", 1L));\n    doc.add(new NumericDocValuesField(\"f2\", 1L));\n    writer.addDocument(doc);\n\n    // update each field twice to make sure all unneeded files are deleted\n    for (String f : new String[] { \"f1\", \"f2\" }) {\n      writer.updateNumericDocValue(new Term(\"id\", \"d0\"), f, 2L);\n      writer.commit();\n      int numFiles = dir.listAll().length;\n      \n      // update again, number of files shouldn't change (old field's gen is\n      // removed) \n      writer.updateNumericDocValue(new Term(\"id\", \"d0\"), f, 3L);\n      writer.commit();\n      \n      assertEquals(numFiles, dir.listAll().length);\n    }\n    \n    writer.shutdown();\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testDeleteUnusedUpdatesFiles() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"d0\", Store.NO));\n    doc.add(new NumericDocValuesField(\"f\", 1L));\n    writer.addDocument(doc);\n\n    // create first gen of update files\n    writer.updateNumericDocValue(new Term(\"id\", \"d0\"), \"f\", 2L);\n    writer.commit();\n    int numFiles = dir.listAll().length;\n\n    DirectoryReader r = DirectoryReader.open(dir);\n    assertEquals(2L, r.leaves().get(0).reader().getNumericDocValues(\"f\").get(0));\n    r.close();\n    \n    // create second gen of update files, first gen should be deleted\n    writer.updateNumericDocValue(new Term(\"id\", \"d0\"), \"f\", 5L);\n    writer.commit();\n    assertEquals(numFiles, dir.listAll().length);\n\n    r = DirectoryReader.open(dir);\n    assertEquals(5L, r.leaves().get(0).reader().getNumericDocValues(\"f\").get(0));\n    r.close();\n\n    writer.shutdown();\n    dir.close();\n  }\n\n","bugFix":["4b00269e80723ee74683383bea08f08dd2814ec8","2f13fb377f9b5df46af44bf90a2e507a884f2c30"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a656b32c3aa151037a8c52e9b134acc3cbf482bc","date":1400688195,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testDeleteUnusedUpdatesFiles().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testDeleteUnusedUpdatesFiles().mjava","sourceNew":"  @Test\n  public void testDeleteUnusedUpdatesFiles() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"d0\", Store.NO));\n    doc.add(new NumericDocValuesField(\"f1\", 1L));\n    doc.add(new NumericDocValuesField(\"f2\", 1L));\n    writer.addDocument(doc);\n\n    // update each field twice to make sure all unneeded files are deleted\n    for (String f : new String[] { \"f1\", \"f2\" }) {\n      writer.updateNumericDocValue(new Term(\"id\", \"d0\"), f, 2L);\n      writer.commit();\n      int numFiles = dir.listAll().length;\n      \n      // update again, number of files shouldn't change (old field's gen is\n      // removed) \n      writer.updateNumericDocValue(new Term(\"id\", \"d0\"), f, 3L);\n      writer.commit();\n      \n      assertEquals(numFiles, dir.listAll().length);\n    }\n    \n    writer.shutdown();\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testDeleteUnusedUpdatesFiles() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"d0\", Store.NO));\n    doc.add(new NumericDocValuesField(\"f\", 1L));\n    writer.addDocument(doc);\n\n    // create first gen of update files\n    writer.updateNumericDocValue(new Term(\"id\", \"d0\"), \"f\", 2L);\n    writer.commit();\n    int numFiles = dir.listAll().length;\n\n    DirectoryReader r = DirectoryReader.open(dir);\n    assertEquals(2L, r.leaves().get(0).reader().getNumericDocValues(\"f\").get(0));\n    r.close();\n    \n    // create second gen of update files, first gen should be deleted\n    writer.updateNumericDocValue(new Term(\"id\", \"d0\"), \"f\", 5L);\n    writer.commit();\n    assertEquals(numFiles, dir.listAll().length);\n\n    r = DirectoryReader.open(dir);\n    assertEquals(5L, r.leaves().get(0).reader().getNumericDocValues(\"f\").get(0));\n    r.close();\n\n    writer.shutdown();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7605579001505896d48b07160075a5c8b8e128e","date":1400758727,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testDeleteUnusedUpdatesFiles().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testDeleteUnusedUpdatesFiles().mjava","sourceNew":"  @Test\n  public void testDeleteUnusedUpdatesFiles() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"d0\", Store.NO));\n    doc.add(new NumericDocValuesField(\"f1\", 1L));\n    doc.add(new NumericDocValuesField(\"f2\", 1L));\n    writer.addDocument(doc);\n\n    // update each field twice to make sure all unneeded files are deleted\n    for (String f : new String[] { \"f1\", \"f2\" }) {\n      writer.updateNumericDocValue(new Term(\"id\", \"d0\"), f, 2L);\n      writer.commit();\n      int numFiles = dir.listAll().length;\n      \n      // update again, number of files shouldn't change (old field's gen is\n      // removed) \n      writer.updateNumericDocValue(new Term(\"id\", \"d0\"), f, 3L);\n      writer.commit();\n      \n      assertEquals(numFiles, dir.listAll().length);\n    }\n    \n    writer.shutdown();\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testDeleteUnusedUpdatesFiles() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"d0\", Store.NO));\n    doc.add(new NumericDocValuesField(\"f\", 1L));\n    writer.addDocument(doc);\n\n    // create first gen of update files\n    writer.updateNumericDocValue(new Term(\"id\", \"d0\"), \"f\", 2L);\n    writer.commit();\n    int numFiles = dir.listAll().length;\n\n    DirectoryReader r = DirectoryReader.open(dir);\n    assertEquals(2L, r.leaves().get(0).reader().getNumericDocValues(\"f\").get(0));\n    r.close();\n    \n    // create second gen of update files, first gen should be deleted\n    writer.updateNumericDocValue(new Term(\"id\", \"d0\"), \"f\", 5L);\n    writer.commit();\n    assertEquals(numFiles, dir.listAll().length);\n\n    r = DirectoryReader.open(dir);\n    assertEquals(5L, r.leaves().get(0).reader().getNumericDocValues(\"f\").get(0));\n    r.close();\n\n    writer.shutdown();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testDeleteUnusedUpdatesFiles().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testDeleteUnusedUpdatesFiles().mjava","sourceNew":"  @Test\n  public void testDeleteUnusedUpdatesFiles() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"d0\", Store.NO));\n    doc.add(new NumericDocValuesField(\"f1\", 1L));\n    doc.add(new NumericDocValuesField(\"f2\", 1L));\n    writer.addDocument(doc);\n\n    // update each field twice to make sure all unneeded files are deleted\n    for (String f : new String[] { \"f1\", \"f2\" }) {\n      writer.updateNumericDocValue(new Term(\"id\", \"d0\"), f, 2L);\n      writer.commit();\n      int numFiles = dir.listAll().length;\n      \n      // update again, number of files shouldn't change (old field's gen is\n      // removed) \n      writer.updateNumericDocValue(new Term(\"id\", \"d0\"), f, 3L);\n      writer.commit();\n      \n      assertEquals(numFiles, dir.listAll().length);\n    }\n    \n    writer.shutdown();\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testDeleteUnusedUpdatesFiles() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"d0\", Store.NO));\n    doc.add(new NumericDocValuesField(\"f1\", 1L));\n    doc.add(new NumericDocValuesField(\"f2\", 1L));\n    writer.addDocument(doc);\n\n    // update each field twice to make sure all unneeded files are deleted\n    for (String f : new String[] { \"f1\", \"f2\" }) {\n      writer.updateNumericDocValue(new Term(\"id\", \"d0\"), f, 2L);\n      writer.commit();\n      int numFiles = dir.listAll().length;\n      \n      // update again, number of files shouldn't change (old field's gen is\n      // removed) \n      writer.updateNumericDocValue(new Term(\"id\", \"d0\"), f, 3L);\n      writer.commit();\n      \n      assertEquals(numFiles, dir.listAll().length);\n    }\n    \n    writer.shutdown();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testDeleteUnusedUpdatesFiles().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testDeleteUnusedUpdatesFiles().mjava","sourceNew":"  @Test\n  public void testDeleteUnusedUpdatesFiles() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"d0\", Store.NO));\n    doc.add(new NumericDocValuesField(\"f1\", 1L));\n    doc.add(new NumericDocValuesField(\"f2\", 1L));\n    writer.addDocument(doc);\n\n    // update each field twice to make sure all unneeded files are deleted\n    for (String f : new String[] { \"f1\", \"f2\" }) {\n      writer.updateNumericDocValue(new Term(\"id\", \"d0\"), f, 2L);\n      writer.commit();\n      int numFiles = dir.listAll().length;\n      \n      // update again, number of files shouldn't change (old field's gen is\n      // removed) \n      writer.updateNumericDocValue(new Term(\"id\", \"d0\"), f, 3L);\n      writer.commit();\n      \n      assertEquals(numFiles, dir.listAll().length);\n    }\n    \n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testDeleteUnusedUpdatesFiles() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"d0\", Store.NO));\n    doc.add(new NumericDocValuesField(\"f1\", 1L));\n    doc.add(new NumericDocValuesField(\"f2\", 1L));\n    writer.addDocument(doc);\n\n    // update each field twice to make sure all unneeded files are deleted\n    for (String f : new String[] { \"f1\", \"f2\" }) {\n      writer.updateNumericDocValue(new Term(\"id\", \"d0\"), f, 2L);\n      writer.commit();\n      int numFiles = dir.listAll().length;\n      \n      // update again, number of files shouldn't change (old field's gen is\n      // removed) \n      writer.updateNumericDocValue(new Term(\"id\", \"d0\"), f, 3L);\n      writer.commit();\n      \n      assertEquals(numFiles, dir.listAll().length);\n    }\n    \n    writer.shutdown();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"98d2deb8c96c79ebef084a1f8e5a1a6c08608f13","date":1409346855,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testDeleteUnusedUpdatesFiles().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testDeleteUnusedUpdatesFiles().mjava","sourceNew":"  @Test\n  public void testDeleteUnusedUpdatesFiles() throws Exception {\n    Directory dir = newDirectory();\n    // test explicitly needs files to always be actually deleted\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setEnableVirusScanner(false);\n    }\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"d0\", Store.NO));\n    doc.add(new NumericDocValuesField(\"f1\", 1L));\n    doc.add(new NumericDocValuesField(\"f2\", 1L));\n    writer.addDocument(doc);\n\n    // update each field twice to make sure all unneeded files are deleted\n    for (String f : new String[] { \"f1\", \"f2\" }) {\n      writer.updateNumericDocValue(new Term(\"id\", \"d0\"), f, 2L);\n      writer.commit();\n      int numFiles = dir.listAll().length;\n      \n      // update again, number of files shouldn't change (old field's gen is\n      // removed) \n      writer.updateNumericDocValue(new Term(\"id\", \"d0\"), f, 3L);\n      writer.commit();\n      \n      assertEquals(numFiles, dir.listAll().length);\n    }\n    \n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testDeleteUnusedUpdatesFiles() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"d0\", Store.NO));\n    doc.add(new NumericDocValuesField(\"f1\", 1L));\n    doc.add(new NumericDocValuesField(\"f2\", 1L));\n    writer.addDocument(doc);\n\n    // update each field twice to make sure all unneeded files are deleted\n    for (String f : new String[] { \"f1\", \"f2\" }) {\n      writer.updateNumericDocValue(new Term(\"id\", \"d0\"), f, 2L);\n      writer.commit();\n      int numFiles = dir.listAll().length;\n      \n      // update again, number of files shouldn't change (old field's gen is\n      // removed) \n      writer.updateNumericDocValue(new Term(\"id\", \"d0\"), f, 3L);\n      writer.commit();\n      \n      assertEquals(numFiles, dir.listAll().length);\n    }\n    \n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6bfe104fc023fadc9e709f8d17403d2cc61133fe","date":1454446396,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testDeleteUnusedUpdatesFiles().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testDeleteUnusedUpdatesFiles().mjava","sourceNew":"  @Test\n  public void testDeleteUnusedUpdatesFiles() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"d0\", Store.NO));\n    doc.add(new NumericDocValuesField(\"f1\", 1L));\n    doc.add(new NumericDocValuesField(\"f2\", 1L));\n    writer.addDocument(doc);\n\n    // update each field twice to make sure all unneeded files are deleted\n    for (String f : new String[] { \"f1\", \"f2\" }) {\n      writer.updateNumericDocValue(new Term(\"id\", \"d0\"), f, 2L);\n      writer.commit();\n      int numFiles = dir.listAll().length;\n      \n      // update again, number of files shouldn't change (old field's gen is\n      // removed) \n      writer.updateNumericDocValue(new Term(\"id\", \"d0\"), f, 3L);\n      writer.commit();\n      \n      assertEquals(numFiles, dir.listAll().length);\n    }\n    \n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testDeleteUnusedUpdatesFiles() throws Exception {\n    Directory dir = newDirectory();\n    // test explicitly needs files to always be actually deleted\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setEnableVirusScanner(false);\n    }\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"d0\", Store.NO));\n    doc.add(new NumericDocValuesField(\"f1\", 1L));\n    doc.add(new NumericDocValuesField(\"f2\", 1L));\n    writer.addDocument(doc);\n\n    // update each field twice to make sure all unneeded files are deleted\n    for (String f : new String[] { \"f1\", \"f2\" }) {\n      writer.updateNumericDocValue(new Term(\"id\", \"d0\"), f, 2L);\n      writer.commit();\n      int numFiles = dir.listAll().length;\n      \n      // update again, number of files shouldn't change (old field's gen is\n      // removed) \n      writer.updateNumericDocValue(new Term(\"id\", \"d0\"), f, 3L);\n      writer.commit();\n      \n      assertEquals(numFiles, dir.listAll().length);\n    }\n    \n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b470f36a9372c97283360b1304eacbde22df6c0d","date":1454765175,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testDeleteUnusedUpdatesFiles().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testDeleteUnusedUpdatesFiles().mjava","sourceNew":"  @Test\n  public void testDeleteUnusedUpdatesFiles() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"d0\", Store.NO));\n    doc.add(new NumericDocValuesField(\"f1\", 1L));\n    doc.add(new NumericDocValuesField(\"f2\", 1L));\n    writer.addDocument(doc);\n\n    // update each field twice to make sure all unneeded files are deleted\n    for (String f : new String[] { \"f1\", \"f2\" }) {\n      writer.updateNumericDocValue(new Term(\"id\", \"d0\"), f, 2L);\n      writer.commit();\n      int numFiles = dir.listAll().length;\n      \n      // update again, number of files shouldn't change (old field's gen is\n      // removed) \n      writer.updateNumericDocValue(new Term(\"id\", \"d0\"), f, 3L);\n      writer.commit();\n      \n      assertEquals(numFiles, dir.listAll().length);\n    }\n    \n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testDeleteUnusedUpdatesFiles() throws Exception {\n    Directory dir = newDirectory();\n    // test explicitly needs files to always be actually deleted\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setEnableVirusScanner(false);\n    }\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"d0\", Store.NO));\n    doc.add(new NumericDocValuesField(\"f1\", 1L));\n    doc.add(new NumericDocValuesField(\"f2\", 1L));\n    writer.addDocument(doc);\n\n    // update each field twice to make sure all unneeded files are deleted\n    for (String f : new String[] { \"f1\", \"f2\" }) {\n      writer.updateNumericDocValue(new Term(\"id\", \"d0\"), f, 2L);\n      writer.commit();\n      int numFiles = dir.listAll().length;\n      \n      // update again, number of files shouldn't change (old field's gen is\n      // removed) \n      writer.updateNumericDocValue(new Term(\"id\", \"d0\"), f, 3L);\n      writer.commit();\n      \n      assertEquals(numFiles, dir.listAll().length);\n    }\n    \n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testDeleteUnusedUpdatesFiles().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testDeleteUnusedUpdatesFiles().mjava","sourceNew":"  @Test\n  public void testDeleteUnusedUpdatesFiles() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"d0\", Store.NO));\n    doc.add(new NumericDocValuesField(\"f1\", 1L));\n    doc.add(new NumericDocValuesField(\"f2\", 1L));\n    writer.addDocument(doc);\n\n    // update each field twice to make sure all unneeded files are deleted\n    for (String f : new String[] { \"f1\", \"f2\" }) {\n      writer.updateNumericDocValue(new Term(\"id\", \"d0\"), f, 2L);\n      writer.commit();\n      int numFiles = dir.listAll().length;\n      \n      // update again, number of files shouldn't change (old field's gen is\n      // removed) \n      writer.updateNumericDocValue(new Term(\"id\", \"d0\"), f, 3L);\n      writer.commit();\n      \n      assertEquals(numFiles, dir.listAll().length);\n    }\n    \n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testDeleteUnusedUpdatesFiles() throws Exception {\n    Directory dir = newDirectory();\n    // test explicitly needs files to always be actually deleted\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setEnableVirusScanner(false);\n    }\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"d0\", Store.NO));\n    doc.add(new NumericDocValuesField(\"f1\", 1L));\n    doc.add(new NumericDocValuesField(\"f2\", 1L));\n    writer.addDocument(doc);\n\n    // update each field twice to make sure all unneeded files are deleted\n    for (String f : new String[] { \"f1\", \"f2\" }) {\n      writer.updateNumericDocValue(new Term(\"id\", \"d0\"), f, 2L);\n      writer.commit();\n      int numFiles = dir.listAll().length;\n      \n      // update again, number of files shouldn't change (old field's gen is\n      // removed) \n      writer.updateNumericDocValue(new Term(\"id\", \"d0\"), f, 3L);\n      writer.commit();\n      \n      assertEquals(numFiles, dir.listAll().length);\n    }\n    \n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a207d19eac354d649c3f0e2cce070017c78125e","date":1454776470,"type":3,"author":"Erick Erickson","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testDeleteUnusedUpdatesFiles().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testDeleteUnusedUpdatesFiles().mjava","sourceNew":"  @Test\n  public void testDeleteUnusedUpdatesFiles() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"d0\", Store.NO));\n    doc.add(new NumericDocValuesField(\"f1\", 1L));\n    doc.add(new NumericDocValuesField(\"f2\", 1L));\n    writer.addDocument(doc);\n\n    // update each field twice to make sure all unneeded files are deleted\n    for (String f : new String[] { \"f1\", \"f2\" }) {\n      writer.updateNumericDocValue(new Term(\"id\", \"d0\"), f, 2L);\n      writer.commit();\n      int numFiles = dir.listAll().length;\n      \n      // update again, number of files shouldn't change (old field's gen is\n      // removed) \n      writer.updateNumericDocValue(new Term(\"id\", \"d0\"), f, 3L);\n      writer.commit();\n      \n      assertEquals(numFiles, dir.listAll().length);\n    }\n    \n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testDeleteUnusedUpdatesFiles() throws Exception {\n    Directory dir = newDirectory();\n    // test explicitly needs files to always be actually deleted\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setEnableVirusScanner(false);\n    }\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"d0\", Store.NO));\n    doc.add(new NumericDocValuesField(\"f1\", 1L));\n    doc.add(new NumericDocValuesField(\"f2\", 1L));\n    writer.addDocument(doc);\n\n    // update each field twice to make sure all unneeded files are deleted\n    for (String f : new String[] { \"f1\", \"f2\" }) {\n      writer.updateNumericDocValue(new Term(\"id\", \"d0\"), f, 2L);\n      writer.commit();\n      int numFiles = dir.listAll().length;\n      \n      // update again, number of files shouldn't change (old field's gen is\n      // removed) \n      writer.updateNumericDocValue(new Term(\"id\", \"d0\"), f, 3L);\n      writer.commit();\n      \n      assertEquals(numFiles, dir.listAll().length);\n    }\n    \n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4363cd33f6eff7fb4753574a441e2d18c1022a4","date":1498067235,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testDeleteUnusedUpdatesFiles().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testDeleteUnusedUpdatesFiles().mjava","sourceNew":"  public void testDeleteUnusedUpdatesFiles() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"d0\", Store.NO));\n    doc.add(new NumericDocValuesField(\"f1\", 1L));\n    doc.add(new NumericDocValuesField(\"f2\", 1L));\n    writer.addDocument(doc);\n\n    // update each field twice to make sure all unneeded files are deleted\n    for (String f : new String[] { \"f1\", \"f2\" }) {\n      writer.updateNumericDocValue(new Term(\"id\", \"d0\"), f, 2L);\n      writer.commit();\n      int numFiles = dir.listAll().length;\n      \n      // update again, number of files shouldn't change (old field's gen is\n      // removed) \n      writer.updateNumericDocValue(new Term(\"id\", \"d0\"), f, 3L);\n      writer.commit();\n      \n      assertEquals(numFiles, dir.listAll().length);\n    }\n    \n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testDeleteUnusedUpdatesFiles() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"d0\", Store.NO));\n    doc.add(new NumericDocValuesField(\"f1\", 1L));\n    doc.add(new NumericDocValuesField(\"f2\", 1L));\n    writer.addDocument(doc);\n\n    // update each field twice to make sure all unneeded files are deleted\n    for (String f : new String[] { \"f1\", \"f2\" }) {\n      writer.updateNumericDocValue(new Term(\"id\", \"d0\"), f, 2L);\n      writer.commit();\n      int numFiles = dir.listAll().length;\n      \n      // update again, number of files shouldn't change (old field's gen is\n      // removed) \n      writer.updateNumericDocValue(new Term(\"id\", \"d0\"), f, 3L);\n      writer.commit();\n      \n      assertEquals(numFiles, dir.listAll().length);\n    }\n    \n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testDeleteUnusedUpdatesFiles().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testDeleteUnusedUpdatesFiles().mjava","sourceNew":"  public void testDeleteUnusedUpdatesFiles() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"d0\", Store.NO));\n    doc.add(new NumericDocValuesField(\"f1\", 1L));\n    doc.add(new NumericDocValuesField(\"f2\", 1L));\n    writer.addDocument(doc);\n\n    // update each field twice to make sure all unneeded files are deleted\n    for (String f : new String[] { \"f1\", \"f2\" }) {\n      writer.updateNumericDocValue(new Term(\"id\", \"d0\"), f, 2L);\n      writer.commit();\n      int numFiles = dir.listAll().length;\n      \n      // update again, number of files shouldn't change (old field's gen is\n      // removed) \n      writer.updateNumericDocValue(new Term(\"id\", \"d0\"), f, 3L);\n      writer.commit();\n      \n      assertEquals(numFiles, dir.listAll().length);\n    }\n    \n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testDeleteUnusedUpdatesFiles() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"d0\", Store.NO));\n    doc.add(new NumericDocValuesField(\"f1\", 1L));\n    doc.add(new NumericDocValuesField(\"f2\", 1L));\n    writer.addDocument(doc);\n\n    // update each field twice to make sure all unneeded files are deleted\n    for (String f : new String[] { \"f1\", \"f2\" }) {\n      writer.updateNumericDocValue(new Term(\"id\", \"d0\"), f, 2L);\n      writer.commit();\n      int numFiles = dir.listAll().length;\n      \n      // update again, number of files shouldn't change (old field's gen is\n      // removed) \n      writer.updateNumericDocValue(new Term(\"id\", \"d0\"), f, 3L);\n      writer.commit();\n      \n      assertEquals(numFiles, dir.listAll().length);\n    }\n    \n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testDeleteUnusedUpdatesFiles().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testDeleteUnusedUpdatesFiles().mjava","sourceNew":"  public void testDeleteUnusedUpdatesFiles() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"d0\", Store.NO));\n    doc.add(new NumericDocValuesField(\"f1\", 1L));\n    doc.add(new NumericDocValuesField(\"f2\", 1L));\n    writer.addDocument(doc);\n\n    // update each field twice to make sure all unneeded files are deleted\n    for (String f : new String[] { \"f1\", \"f2\" }) {\n      writer.updateNumericDocValue(new Term(\"id\", \"d0\"), f, 2L);\n      writer.commit();\n      int numFiles = dir.listAll().length;\n      \n      // update again, number of files shouldn't change (old field's gen is\n      // removed) \n      writer.updateNumericDocValue(new Term(\"id\", \"d0\"), f, 3L);\n      writer.commit();\n      \n      assertEquals(numFiles, dir.listAll().length);\n    }\n    \n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testDeleteUnusedUpdatesFiles() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"d0\", Store.NO));\n    doc.add(new NumericDocValuesField(\"f1\", 1L));\n    doc.add(new NumericDocValuesField(\"f2\", 1L));\n    writer.addDocument(doc);\n\n    // update each field twice to make sure all unneeded files are deleted\n    for (String f : new String[] { \"f1\", \"f2\" }) {\n      writer.updateNumericDocValue(new Term(\"id\", \"d0\"), f, 2L);\n      writer.commit();\n      int numFiles = dir.listAll().length;\n      \n      // update again, number of files shouldn't change (old field's gen is\n      // removed) \n      writer.updateNumericDocValue(new Term(\"id\", \"d0\"), f, 3L);\n      writer.commit();\n      \n      assertEquals(numFiles, dir.listAll().length);\n    }\n    \n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["0567bdc5c86c94ced64201187cfcef2417d76dda"],"5a207d19eac354d649c3f0e2cce070017c78125e":["98d2deb8c96c79ebef084a1f8e5a1a6c08608f13","b470f36a9372c97283360b1304eacbde22df6c0d"],"f4363cd33f6eff7fb4753574a441e2d18c1022a4":["5a207d19eac354d649c3f0e2cce070017c78125e"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["98d2deb8c96c79ebef084a1f8e5a1a6c08608f13","b470f36a9372c97283360b1304eacbde22df6c0d"],"0567bdc5c86c94ced64201187cfcef2417d76dda":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"98d2deb8c96c79ebef084a1f8e5a1a6c08608f13":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"b7605579001505896d48b07160075a5c8b8e128e":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a","0567bdc5c86c94ced64201187cfcef2417d76dda"],"2f13fb377f9b5df46af44bf90a2e507a884f2c30":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["5a207d19eac354d649c3f0e2cce070017c78125e","f4363cd33f6eff7fb4753574a441e2d18c1022a4"],"28288370235ed02234a64753cdbf0c6ec096304a":["5a207d19eac354d649c3f0e2cce070017c78125e","f4363cd33f6eff7fb4753574a441e2d18c1022a4"],"b470f36a9372c97283360b1304eacbde22df6c0d":["98d2deb8c96c79ebef084a1f8e5a1a6c08608f13","6bfe104fc023fadc9e709f8d17403d2cc61133fe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"a656b32c3aa151037a8c52e9b134acc3cbf482bc":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a","0567bdc5c86c94ced64201187cfcef2417d76dda"],"6bfe104fc023fadc9e709f8d17403d2cc61133fe":["98d2deb8c96c79ebef084a1f8e5a1a6c08608f13"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["4b00269e80723ee74683383bea08f08dd2814ec8"],"4b00269e80723ee74683383bea08f08dd2814ec8":["2f13fb377f9b5df46af44bf90a2e507a884f2c30"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"]},"commit2Childs":{"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"5a207d19eac354d649c3f0e2cce070017c78125e":["f4363cd33f6eff7fb4753574a441e2d18c1022a4","b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"f4363cd33f6eff7fb4753574a441e2d18c1022a4":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":[],"0567bdc5c86c94ced64201187cfcef2417d76dda":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","b7605579001505896d48b07160075a5c8b8e128e","a656b32c3aa151037a8c52e9b134acc3cbf482bc"],"98d2deb8c96c79ebef084a1f8e5a1a6c08608f13":["5a207d19eac354d649c3f0e2cce070017c78125e","1e6acbaae7af722f17204ceccf0f7db5753eccf3","b470f36a9372c97283360b1304eacbde22df6c0d","6bfe104fc023fadc9e709f8d17403d2cc61133fe"],"b7605579001505896d48b07160075a5c8b8e128e":[],"2f13fb377f9b5df46af44bf90a2e507a884f2c30":["4b00269e80723ee74683383bea08f08dd2814ec8"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":[],"28288370235ed02234a64753cdbf0c6ec096304a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b470f36a9372c97283360b1304eacbde22df6c0d":["5a207d19eac354d649c3f0e2cce070017c78125e","1e6acbaae7af722f17204ceccf0f7db5753eccf3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2f13fb377f9b5df46af44bf90a2e507a884f2c30"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["98d2deb8c96c79ebef084a1f8e5a1a6c08608f13"],"a656b32c3aa151037a8c52e9b134acc3cbf482bc":[],"6bfe104fc023fadc9e709f8d17403d2cc61133fe":["b470f36a9372c97283360b1304eacbde22df6c0d"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["0567bdc5c86c94ced64201187cfcef2417d76dda","b7605579001505896d48b07160075a5c8b8e128e","a656b32c3aa151037a8c52e9b134acc3cbf482bc"],"4b00269e80723ee74683383bea08f08dd2814ec8":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","b7605579001505896d48b07160075a5c8b8e128e","b7dfa64bc2074fb87d0ca70095a644c1ead107e1","a656b32c3aa151037a8c52e9b134acc3cbf482bc","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}