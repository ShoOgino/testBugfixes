{"path":"lucene/contrib/remote/src/test/org/apache/lucene/search/TestRemoteSort#getIndex(boolean,boolean).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/remote/src/test/org/apache/lucene/search/TestRemoteSort#getIndex(boolean,boolean).mjava","pathOld":"contrib/remote/src/test/org/apache/lucene/search/TestRemoteSort#getIndex(boolean,boolean).mjava","sourceNew":"  // create an index of all the documents, or just the x, or just the y documents\n  private Searcher getIndex (boolean even, boolean odd)\n  throws IOException {\n    RAMDirectory indexStore = new RAMDirectory ();\n    IndexWriter writer = new IndexWriter(indexStore, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new SimpleAnalyzer(TEST_VERSION_CURRENT))\n        .setMaxBufferedDocs(2));\n    ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(1000);\n    for (int i=0; i<data.length; ++i) {\n      if (((i%2)==0 && even) || ((i%2)==1 && odd)) {\n        Document doc = new Document();\n        doc.add (new Field (\"tracer\",   data[i][0], Field.Store.YES, Field.Index.NO));\n        doc.add (new Field (\"contents\", data[i][1], Field.Store.NO, Field.Index.ANALYZED));\n        if (data[i][2] != null) doc.add (new Field (\"int\",      data[i][2], Field.Store.NO, Field.Index.NOT_ANALYZED));\n        if (data[i][3] != null) doc.add (new Field (\"float\",    data[i][3], Field.Store.NO, Field.Index.NOT_ANALYZED));\n        if (data[i][4] != null) doc.add (new Field (\"string\",   data[i][4], Field.Store.NO, Field.Index.NOT_ANALYZED));\n        if (data[i][5] != null) doc.add (new Field (\"custom\",   data[i][5], Field.Store.NO, Field.Index.NOT_ANALYZED));\n        if (data[i][6] != null) doc.add (new Field (\"i18n\",     data[i][6], Field.Store.NO, Field.Index.NOT_ANALYZED));\n        if (data[i][7] != null) doc.add (new Field (\"long\",     data[i][7], Field.Store.NO, Field.Index.NOT_ANALYZED));\n        if (data[i][8] != null) doc.add (new Field (\"double\",     data[i][8], Field.Store.NO, Field.Index.NOT_ANALYZED));\n        if (data[i][9] != null) doc.add (new Field (\"short\",     data[i][9], Field.Store.NO, Field.Index.NOT_ANALYZED));\n        if (data[i][10] != null) doc.add (new Field (\"byte\",     data[i][10], Field.Store.NO, Field.Index.NOT_ANALYZED));\n        if (data[i][11] != null) doc.add (new Field (\"parser\",     data[i][11], Field.Store.NO, Field.Index.NOT_ANALYZED));\n        doc.setBoost(2);  // produce some scores above 1.0\n        writer.addDocument (doc);\n      }\n    }\n    //writer.optimize ();\n    writer.close ();\n    IndexSearcher s = new IndexSearcher (indexStore, false);\n    s.setDefaultFieldSortScoring(true, true);\n    return s;\n  }\n\n","sourceOld":"  // create an index of all the documents, or just the x, or just the y documents\n  private Searcher getIndex (boolean even, boolean odd)\n  throws IOException {\n    RAMDirectory indexStore = new RAMDirectory ();\n    IndexWriter writer = new IndexWriter(indexStore, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new SimpleAnalyzer(TEST_VERSION_CURRENT))\n        .setMaxBufferedDocs(2));\n    ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(1000);\n    for (int i=0; i<data.length; ++i) {\n      if (((i%2)==0 && even) || ((i%2)==1 && odd)) {\n        Document doc = new Document();\n        doc.add (new Field (\"tracer\",   data[i][0], Field.Store.YES, Field.Index.NO));\n        doc.add (new Field (\"contents\", data[i][1], Field.Store.NO, Field.Index.ANALYZED));\n        if (data[i][2] != null) doc.add (new Field (\"int\",      data[i][2], Field.Store.NO, Field.Index.NOT_ANALYZED));\n        if (data[i][3] != null) doc.add (new Field (\"float\",    data[i][3], Field.Store.NO, Field.Index.NOT_ANALYZED));\n        if (data[i][4] != null) doc.add (new Field (\"string\",   data[i][4], Field.Store.NO, Field.Index.NOT_ANALYZED));\n        if (data[i][5] != null) doc.add (new Field (\"custom\",   data[i][5], Field.Store.NO, Field.Index.NOT_ANALYZED));\n        if (data[i][6] != null) doc.add (new Field (\"i18n\",     data[i][6], Field.Store.NO, Field.Index.NOT_ANALYZED));\n        if (data[i][7] != null) doc.add (new Field (\"long\",     data[i][7], Field.Store.NO, Field.Index.NOT_ANALYZED));\n        if (data[i][8] != null) doc.add (new Field (\"double\",     data[i][8], Field.Store.NO, Field.Index.NOT_ANALYZED));\n        if (data[i][9] != null) doc.add (new Field (\"short\",     data[i][9], Field.Store.NO, Field.Index.NOT_ANALYZED));\n        if (data[i][10] != null) doc.add (new Field (\"byte\",     data[i][10], Field.Store.NO, Field.Index.NOT_ANALYZED));\n        if (data[i][11] != null) doc.add (new Field (\"parser\",     data[i][11], Field.Store.NO, Field.Index.NOT_ANALYZED));\n        doc.setBoost(2);  // produce some scores above 1.0\n        writer.addDocument (doc);\n      }\n    }\n    //writer.optimize ();\n    writer.close ();\n    IndexSearcher s = new IndexSearcher (indexStore, false);\n    s.setDefaultFieldSortScoring(true, true);\n    return s;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7ab99e8c71442b92c320e218141dee04a9b91ce8","date":1269203801,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/contrib/remote/src/test/org/apache/lucene/search/TestRemoteSort#getIndex(boolean,boolean).mjava","pathOld":"lucene/contrib/remote/src/test/org/apache/lucene/search/TestRemoteSort#getIndex(boolean,boolean).mjava","sourceNew":"  // create an index of all the documents, or just the x, or just the y documents\n  private Searcher getIndex (boolean even, boolean odd)\n  throws IOException {\n    RAMDirectory indexStore = new RAMDirectory ();\n    IndexWriter writer = new IndexWriter(indexStore, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new SimpleAnalyzer(TEST_VERSION_CURRENT))\n        .setMaxBufferedDocs(2));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(1000);\n    for (int i=0; i<data.length; ++i) {\n      if (((i%2)==0 && even) || ((i%2)==1 && odd)) {\n        Document doc = new Document();\n        doc.add (new Field (\"tracer\",   data[i][0], Field.Store.YES, Field.Index.NO));\n        doc.add (new Field (\"contents\", data[i][1], Field.Store.NO, Field.Index.ANALYZED));\n        if (data[i][2] != null) doc.add (new Field (\"int\",      data[i][2], Field.Store.NO, Field.Index.NOT_ANALYZED));\n        if (data[i][3] != null) doc.add (new Field (\"float\",    data[i][3], Field.Store.NO, Field.Index.NOT_ANALYZED));\n        if (data[i][4] != null) doc.add (new Field (\"string\",   data[i][4], Field.Store.NO, Field.Index.NOT_ANALYZED));\n        if (data[i][5] != null) doc.add (new Field (\"custom\",   data[i][5], Field.Store.NO, Field.Index.NOT_ANALYZED));\n        if (data[i][6] != null) doc.add (new Field (\"i18n\",     data[i][6], Field.Store.NO, Field.Index.NOT_ANALYZED));\n        if (data[i][7] != null) doc.add (new Field (\"long\",     data[i][7], Field.Store.NO, Field.Index.NOT_ANALYZED));\n        if (data[i][8] != null) doc.add (new Field (\"double\",     data[i][8], Field.Store.NO, Field.Index.NOT_ANALYZED));\n        if (data[i][9] != null) doc.add (new Field (\"short\",     data[i][9], Field.Store.NO, Field.Index.NOT_ANALYZED));\n        if (data[i][10] != null) doc.add (new Field (\"byte\",     data[i][10], Field.Store.NO, Field.Index.NOT_ANALYZED));\n        if (data[i][11] != null) doc.add (new Field (\"parser\",     data[i][11], Field.Store.NO, Field.Index.NOT_ANALYZED));\n        doc.setBoost(2);  // produce some scores above 1.0\n        writer.addDocument (doc);\n      }\n    }\n    //writer.optimize ();\n    writer.close ();\n    IndexSearcher s = new IndexSearcher (indexStore, false);\n    s.setDefaultFieldSortScoring(true, true);\n    return s;\n  }\n\n","sourceOld":"  // create an index of all the documents, or just the x, or just the y documents\n  private Searcher getIndex (boolean even, boolean odd)\n  throws IOException {\n    RAMDirectory indexStore = new RAMDirectory ();\n    IndexWriter writer = new IndexWriter(indexStore, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new SimpleAnalyzer(TEST_VERSION_CURRENT))\n        .setMaxBufferedDocs(2));\n    ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(1000);\n    for (int i=0; i<data.length; ++i) {\n      if (((i%2)==0 && even) || ((i%2)==1 && odd)) {\n        Document doc = new Document();\n        doc.add (new Field (\"tracer\",   data[i][0], Field.Store.YES, Field.Index.NO));\n        doc.add (new Field (\"contents\", data[i][1], Field.Store.NO, Field.Index.ANALYZED));\n        if (data[i][2] != null) doc.add (new Field (\"int\",      data[i][2], Field.Store.NO, Field.Index.NOT_ANALYZED));\n        if (data[i][3] != null) doc.add (new Field (\"float\",    data[i][3], Field.Store.NO, Field.Index.NOT_ANALYZED));\n        if (data[i][4] != null) doc.add (new Field (\"string\",   data[i][4], Field.Store.NO, Field.Index.NOT_ANALYZED));\n        if (data[i][5] != null) doc.add (new Field (\"custom\",   data[i][5], Field.Store.NO, Field.Index.NOT_ANALYZED));\n        if (data[i][6] != null) doc.add (new Field (\"i18n\",     data[i][6], Field.Store.NO, Field.Index.NOT_ANALYZED));\n        if (data[i][7] != null) doc.add (new Field (\"long\",     data[i][7], Field.Store.NO, Field.Index.NOT_ANALYZED));\n        if (data[i][8] != null) doc.add (new Field (\"double\",     data[i][8], Field.Store.NO, Field.Index.NOT_ANALYZED));\n        if (data[i][9] != null) doc.add (new Field (\"short\",     data[i][9], Field.Store.NO, Field.Index.NOT_ANALYZED));\n        if (data[i][10] != null) doc.add (new Field (\"byte\",     data[i][10], Field.Store.NO, Field.Index.NOT_ANALYZED));\n        if (data[i][11] != null) doc.add (new Field (\"parser\",     data[i][11], Field.Store.NO, Field.Index.NOT_ANALYZED));\n        doc.setBoost(2);  // produce some scores above 1.0\n        writer.addDocument (doc);\n      }\n    }\n    //writer.optimize ();\n    writer.close ();\n    IndexSearcher s = new IndexSearcher (indexStore, false);\n    s.setDefaultFieldSortScoring(true, true);\n    return s;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"084b18e2b1c84d66746d1a94b6668766d357c2d4","date":1270935846,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/remote/src/test/org/apache/lucene/search/TestRemoteSort#beforeClass().mjava","pathOld":"lucene/contrib/remote/src/test/org/apache/lucene/search/TestRemoteSort#getIndex(boolean,boolean).mjava","sourceNew":"  // create an index of all the documents, or just the x, or just the y documents\n  @BeforeClass\n  public static void beforeClass() throws Exception {\n    RAMDirectory indexStore = new RAMDirectory ();\n    IndexWriter writer = new IndexWriter(indexStore, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new SimpleAnalyzer(TEST_VERSION_CURRENT))\n        .setMaxBufferedDocs(2));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(1000);\n    for (int i=0; i<data.length; ++i) {\n        Document doc = new Document();\n        doc.add (new Field (\"tracer\",   data[i][0], Field.Store.YES, Field.Index.NO));\n        doc.add (new Field (\"contents\", data[i][1], Field.Store.NO, Field.Index.ANALYZED));\n        if (data[i][2] != null) doc.add (new Field (\"int\",      data[i][2], Field.Store.NO, Field.Index.NOT_ANALYZED));\n        if (data[i][3] != null) doc.add (new Field (\"float\",    data[i][3], Field.Store.NO, Field.Index.NOT_ANALYZED));\n        if (data[i][4] != null) doc.add (new Field (\"string\",   data[i][4], Field.Store.NO, Field.Index.NOT_ANALYZED));\n        if (data[i][5] != null) doc.add (new Field (\"custom\",   data[i][5], Field.Store.NO, Field.Index.NOT_ANALYZED));\n        if (data[i][6] != null) doc.add (new Field (\"i18n\",     data[i][6], Field.Store.NO, Field.Index.NOT_ANALYZED));\n        if (data[i][7] != null) doc.add (new Field (\"long\",     data[i][7], Field.Store.NO, Field.Index.NOT_ANALYZED));\n        if (data[i][8] != null) doc.add (new Field (\"double\",     data[i][8], Field.Store.NO, Field.Index.NOT_ANALYZED));\n        if (data[i][9] != null) doc.add (new Field (\"short\",     data[i][9], Field.Store.NO, Field.Index.NOT_ANALYZED));\n        if (data[i][10] != null) doc.add (new Field (\"byte\",     data[i][10], Field.Store.NO, Field.Index.NOT_ANALYZED));\n        if (data[i][11] != null) doc.add (new Field (\"parser\",     data[i][11], Field.Store.NO, Field.Index.NOT_ANALYZED));\n        doc.setBoost(2);  // produce some scores above 1.0\n        writer.addDocument (doc);\n    }\n    //writer.optimize ();\n    writer.close ();\n    full = new IndexSearcher (indexStore, false);\n    full.setDefaultFieldSortScoring(true, true);\n    startServer(full);\n  }\n\n","sourceOld":"  // create an index of all the documents, or just the x, or just the y documents\n  private Searcher getIndex (boolean even, boolean odd)\n  throws IOException {\n    RAMDirectory indexStore = new RAMDirectory ();\n    IndexWriter writer = new IndexWriter(indexStore, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new SimpleAnalyzer(TEST_VERSION_CURRENT))\n        .setMaxBufferedDocs(2));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(1000);\n    for (int i=0; i<data.length; ++i) {\n      if (((i%2)==0 && even) || ((i%2)==1 && odd)) {\n        Document doc = new Document();\n        doc.add (new Field (\"tracer\",   data[i][0], Field.Store.YES, Field.Index.NO));\n        doc.add (new Field (\"contents\", data[i][1], Field.Store.NO, Field.Index.ANALYZED));\n        if (data[i][2] != null) doc.add (new Field (\"int\",      data[i][2], Field.Store.NO, Field.Index.NOT_ANALYZED));\n        if (data[i][3] != null) doc.add (new Field (\"float\",    data[i][3], Field.Store.NO, Field.Index.NOT_ANALYZED));\n        if (data[i][4] != null) doc.add (new Field (\"string\",   data[i][4], Field.Store.NO, Field.Index.NOT_ANALYZED));\n        if (data[i][5] != null) doc.add (new Field (\"custom\",   data[i][5], Field.Store.NO, Field.Index.NOT_ANALYZED));\n        if (data[i][6] != null) doc.add (new Field (\"i18n\",     data[i][6], Field.Store.NO, Field.Index.NOT_ANALYZED));\n        if (data[i][7] != null) doc.add (new Field (\"long\",     data[i][7], Field.Store.NO, Field.Index.NOT_ANALYZED));\n        if (data[i][8] != null) doc.add (new Field (\"double\",     data[i][8], Field.Store.NO, Field.Index.NOT_ANALYZED));\n        if (data[i][9] != null) doc.add (new Field (\"short\",     data[i][9], Field.Store.NO, Field.Index.NOT_ANALYZED));\n        if (data[i][10] != null) doc.add (new Field (\"byte\",     data[i][10], Field.Store.NO, Field.Index.NOT_ANALYZED));\n        if (data[i][11] != null) doc.add (new Field (\"parser\",     data[i][11], Field.Store.NO, Field.Index.NOT_ANALYZED));\n        doc.setBoost(2);  // produce some scores above 1.0\n        writer.addDocument (doc);\n      }\n    }\n    //writer.optimize ();\n    writer.close ();\n    IndexSearcher s = new IndexSearcher (indexStore, false);\n    s.setDefaultFieldSortScoring(true, true);\n    return s;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7ab99e8c71442b92c320e218141dee04a9b91ce8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"084b18e2b1c84d66746d1a94b6668766d357c2d4":["7ab99e8c71442b92c320e218141dee04a9b91ce8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["084b18e2b1c84d66746d1a94b6668766d357c2d4"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"7ab99e8c71442b92c320e218141dee04a9b91ce8":["084b18e2b1c84d66746d1a94b6668766d357c2d4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"084b18e2b1c84d66746d1a94b6668766d357c2d4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["7ab99e8c71442b92c320e218141dee04a9b91ce8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}