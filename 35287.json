{"path":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#registerMetric(SolrMetricsContext,String,Metric,ResolutionStrategy,String,String...).mjava","commits":[{"id":"462c81bfb611619a4867328837e70c876bd5a94f","date":1588355232,"type":0,"author":"Mike Drob","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#registerMetric(SolrMetricsContext,String,Metric,ResolutionStrategy,String,String...).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Register an instance of {@link Metric}.\n   *\n   * @param registry   registry name\n   * @param metric     metric instance\n   * @param strategy   the conflict resolution strategy to use if the named metric already exists.\n   * @param metricName metric name, either final name or a fully-qualified name\n   *                   using dotted notation\n   * @param metricPath (optional) additional top-most metric name path elements\n   */\n  public void registerMetric(SolrMetricsContext context, String registry, Metric metric, ResolutionStrategy strategy, String metricName, String... metricPath) {\n    MetricRegistry metricRegistry = registry(registry);\n    String fullName = mkName(metricName, metricPath);\n    if (context != null) {\n      context.registerMetricName(fullName);\n    }\n    synchronized (metricRegistry) { // prevent race; register() throws if metric is already present\n      if (strategy == ResolutionStrategy.REPLACE) { // must remove any existing one if present\n        metricRegistry.remove(fullName);\n      } else if (strategy == ResolutionStrategy.IGNORE && metricRegistry.getMetrics().containsKey(fullName)) {\n        return;\n      } // strategy == ERROR will fail when we try to register\n      metricRegistry.register(fullName, metric);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff7b5fca5c4207413bd78695e460f6eb81bc2e99","date":1588356568,"type":4,"author":"Mike Drob","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#registerMetric(SolrMetricsContext,String,Metric,ResolutionStrategy,String,String...).mjava","sourceNew":null,"sourceOld":"  /**\n   * Register an instance of {@link Metric}.\n   *\n   * @param registry   registry name\n   * @param metric     metric instance\n   * @param strategy   the conflict resolution strategy to use if the named metric already exists.\n   * @param metricName metric name, either final name or a fully-qualified name\n   *                   using dotted notation\n   * @param metricPath (optional) additional top-most metric name path elements\n   */\n  public void registerMetric(SolrMetricsContext context, String registry, Metric metric, ResolutionStrategy strategy, String metricName, String... metricPath) {\n    MetricRegistry metricRegistry = registry(registry);\n    String fullName = mkName(metricName, metricPath);\n    if (context != null) {\n      context.registerMetricName(fullName);\n    }\n    synchronized (metricRegistry) { // prevent race; register() throws if metric is already present\n      if (strategy == ResolutionStrategy.REPLACE) { // must remove any existing one if present\n        metricRegistry.remove(fullName);\n      } else if (strategy == ResolutionStrategy.IGNORE && metricRegistry.getMetrics().containsKey(fullName)) {\n        return;\n      } // strategy == ERROR will fail when we try to register\n      metricRegistry.register(fullName, metric);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bad14379f15be20a5f4871be82a276e5e69731fc","date":1599578304,"type":0,"author":"Mike Drob","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#registerMetric(SolrMetricsContext,String,Metric,ResolutionStrategy,String,String...).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Register an instance of {@link Metric}.\n   *\n   * @param registry   registry name\n   * @param metric     metric instance\n   * @param strategy   the conflict resolution strategy to use if the named metric already exists.\n   * @param metricName metric name, either final name or a fully-qualified name\n   *                   using dotted notation\n   * @param metricPath (optional) additional top-most metric name path elements\n   */\n  public void registerMetric(SolrMetricsContext context, String registry, Metric metric, ResolutionStrategy strategy, String metricName, String... metricPath) {\n    MetricRegistry metricRegistry = registry(registry);\n    String fullName = mkName(metricName, metricPath);\n    if (context != null) {\n      context.registerMetricName(fullName);\n    }\n    synchronized (metricRegistry) { // prevent race; register() throws if metric is already present\n      if (strategy == ResolutionStrategy.REPLACE) { // must remove any existing one if present\n        metricRegistry.remove(fullName);\n      } else if (strategy == ResolutionStrategy.IGNORE && metricRegistry.getMetrics().containsKey(fullName)) {\n        return;\n      } // strategy == ERROR will fail when we try to register\n      metricRegistry.register(fullName, metric);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"462c81bfb611619a4867328837e70c876bd5a94f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ff7b5fca5c4207413bd78695e460f6eb81bc2e99":["462c81bfb611619a4867328837e70c876bd5a94f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bad14379f15be20a5f4871be82a276e5e69731fc":["ff7b5fca5c4207413bd78695e460f6eb81bc2e99"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bad14379f15be20a5f4871be82a276e5e69731fc"]},"commit2Childs":{"462c81bfb611619a4867328837e70c876bd5a94f":["ff7b5fca5c4207413bd78695e460f6eb81bc2e99"],"ff7b5fca5c4207413bd78695e460f6eb81bc2e99":["bad14379f15be20a5f4871be82a276e5e69731fc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["462c81bfb611619a4867328837e70c876bd5a94f"],"bad14379f15be20a5f4871be82a276e5e69731fc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}