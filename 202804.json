{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testSpacesInParams().mjava","commits":[{"id":"f00f1c5fad501b66705121feb623f8cfbb6712f9","date":1431347838,"type":1,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testSpacesInParams().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/StreamingTest#testSpacesInParams().mjava","sourceNew":"  private void testSpacesInParams() throws Exception {\n\n    String zkHost = zkServer.getZkAddress();\n    streamFactory.withCollectionZkHost(\"collection1\", zkHost);\n\n    Map params = mapParams(\"q\",\"*:*\",\"fl\",\"id , a_s , a_i , a_f\",\"sort\", \"a_f  asc , a_i  asc\");\n\n    //CloudSolrStream compares the values of the sort with the fl field.\n    //The constructor will throw an exception if the sort fields do not the\n    //a value in the field list.\n\n    CloudSolrStream stream = new CloudSolrStream(zkHost, \"collection1\", params);\n\n    del(\"*:*\");\n    commit();\n\n  }\n\n","sourceOld":"  private void testSpacesInParams() throws Exception {\n\n    String zkHost = zkServer.getZkAddress();\n\n    Map params = mapParams(\"q\",\"*:*\",\"fl\",\"id , a_s , a_i , a_f\",\"sort\", \"a_f  asc , a_i  asc\");\n\n    //CloudSolrStream compares the values of the sort with the fl field.\n    //The constructor will throw an exception if the sort fields do not the\n    //a value in the field list.\n\n    CloudSolrStream stream = new CloudSolrStream(zkHost, \"collection1\", params);\n\n    del(\"*:*\");\n    commit();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a55bf71f91aeded06b44ad1abea6666ea168b697","date":1435941127,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testSpacesInParams().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testSpacesInParams().mjava","sourceNew":"  private void testSpacesInParams() throws Exception {\n\n    String zkHost = zkServer.getZkAddress();\n    streamFactory.withCollectionZkHost(\"collection1\", zkHost);\n\n    Map params = mapParams(\"q\", \"*:*\", \"fl\", \"id , a_s , a_i , a_f\", \"sort\", \"a_f  asc , a_i  asc\");\n\n    //CloudSolrStream compares the values of the sort with the fl field.\n    //The constructor will throw an exception if the sort fields do not the\n    //a value in the field list.\n\n    CloudSolrStream stream = new CloudSolrStream(zkHost, \"collection1\", params);\n\n    del(\"*:*\");\n    commit();\n\n  }\n\n","sourceOld":"  private void testSpacesInParams() throws Exception {\n\n    String zkHost = zkServer.getZkAddress();\n    streamFactory.withCollectionZkHost(\"collection1\", zkHost);\n\n    Map params = mapParams(\"q\",\"*:*\",\"fl\",\"id , a_s , a_i , a_f\",\"sort\", \"a_f  asc , a_i  asc\");\n\n    //CloudSolrStream compares the values of the sort with the fl field.\n    //The constructor will throw an exception if the sort fields do not the\n    //a value in the field list.\n\n    CloudSolrStream stream = new CloudSolrStream(zkHost, \"collection1\", params);\n\n    del(\"*:*\");\n    commit();\n\n  }\n\n","bugFix":["42f03b407cd85abd6edd2a1fe7cab9990164aa4b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b940572a59da1b42b6c20ab5278155b12816807a","date":1462388874,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testSpacesInParams().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testSpacesInParams().mjava","sourceNew":"  @Test\n  public void testSpacesInParams() throws Exception {\n\n    Map params = mapParams(\"q\", \"*:*\", \"fl\", \"id , a_s , a_i , a_f\", \"sort\", \"a_f  asc , a_i  asc\");\n\n    //CloudSolrStream compares the values of the sort with the fl field.\n    //The constructor will throw an exception if the sort fields do not the\n    //a value in the field list.\n\n    CloudSolrStream stream = new CloudSolrStream(\"\", \"collection1\", params);\n  }\n\n","sourceOld":"  private void testSpacesInParams() throws Exception {\n\n    String zkHost = zkServer.getZkAddress();\n    streamFactory.withCollectionZkHost(\"collection1\", zkHost);\n\n    Map params = mapParams(\"q\", \"*:*\", \"fl\", \"id , a_s , a_i , a_f\", \"sort\", \"a_f  asc , a_i  asc\");\n\n    //CloudSolrStream compares the values of the sort with the fl field.\n    //The constructor will throw an exception if the sort fields do not the\n    //a value in the field list.\n\n    CloudSolrStream stream = new CloudSolrStream(zkHost, \"collection1\", params);\n\n    del(\"*:*\");\n    commit();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bd78ba595fa6cdd7fff930f26d154d13a823fa47","date":1462400514,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testSpacesInParams().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testSpacesInParams().mjava","sourceNew":"  @Test\n  public void testSpacesInParams() throws Exception {\n\n    Map params = mapParams(\"q\", \"*:*\", \"fl\", \"id , a_s , a_i , a_f\", \"sort\", \"a_f  asc , a_i  asc\");\n\n    //CloudSolrStream compares the values of the sort with the fl field.\n    //The constructor will throw an exception if the sort fields do not the\n    //a value in the field list.\n\n    CloudSolrStream stream = new CloudSolrStream(\"\", \"collection1\", params);\n  }\n\n","sourceOld":"  private void testSpacesInParams() throws Exception {\n\n    String zkHost = zkServer.getZkAddress();\n    streamFactory.withCollectionZkHost(\"collection1\", zkHost);\n\n    Map params = mapParams(\"q\", \"*:*\", \"fl\", \"id , a_s , a_i , a_f\", \"sort\", \"a_f  asc , a_i  asc\");\n\n    //CloudSolrStream compares the values of the sort with the fl field.\n    //The constructor will throw an exception if the sort fields do not the\n    //a value in the field list.\n\n    CloudSolrStream stream = new CloudSolrStream(zkHost, \"collection1\", params);\n\n    del(\"*:*\");\n    commit();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"73450c0955930295d34703e7ddbfc6973b7a121a","date":1462431925,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testSpacesInParams().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testSpacesInParams().mjava","sourceNew":"  @Test\n  public void testSpacesInParams() throws Exception {\n\n    Map params = mapParams(\"q\", \"*:*\", \"fl\", \"id , a_s , a_i , a_f\", \"sort\", \"a_f  asc , a_i  asc\");\n\n    //CloudSolrStream compares the values of the sort with the fl field.\n    //The constructor will throw an exception if the sort fields do not the\n    //a value in the field list.\n\n    CloudSolrStream stream = new CloudSolrStream(\"\", \"collection1\", params);\n  }\n\n","sourceOld":"  private void testSpacesInParams() throws Exception {\n\n    String zkHost = zkServer.getZkAddress();\n    streamFactory.withCollectionZkHost(\"collection1\", zkHost);\n\n    Map params = mapParams(\"q\", \"*:*\", \"fl\", \"id , a_s , a_i , a_f\", \"sort\", \"a_f  asc , a_i  asc\");\n\n    //CloudSolrStream compares the values of the sort with the fl field.\n    //The constructor will throw an exception if the sort fields do not the\n    //a value in the field list.\n\n    CloudSolrStream stream = new CloudSolrStream(zkHost, \"collection1\", params);\n\n    del(\"*:*\");\n    commit();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","date":1462576651,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testSpacesInParams().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testSpacesInParams().mjava","sourceNew":"  @Test\n  public void testSpacesInParams() throws Exception {\n\n    Map params = mapParams(\"q\", \"*:*\", \"fl\", \"id , a_s , a_i , a_f\", \"sort\", \"a_f  asc , a_i  asc\");\n\n    //CloudSolrStream compares the values of the sort with the fl field.\n    //The constructor will throw an exception if the sort fields do not the\n    //a value in the field list.\n\n    CloudSolrStream stream = new CloudSolrStream(\"\", \"collection1\", params);\n  }\n\n","sourceOld":"  private void testSpacesInParams() throws Exception {\n\n    String zkHost = zkServer.getZkAddress();\n    streamFactory.withCollectionZkHost(\"collection1\", zkHost);\n\n    Map params = mapParams(\"q\", \"*:*\", \"fl\", \"id , a_s , a_i , a_f\", \"sort\", \"a_f  asc , a_i  asc\");\n\n    //CloudSolrStream compares the values of the sort with the fl field.\n    //The constructor will throw an exception if the sort fields do not the\n    //a value in the field list.\n\n    CloudSolrStream stream = new CloudSolrStream(zkHost, \"collection1\", params);\n\n    del(\"*:*\");\n    commit();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"826d15444ddf61716dc768c229cd54b2c2ccce1c","date":1462822652,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testSpacesInParams().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testSpacesInParams().mjava","sourceNew":"  @Test\n  public void testSpacesInParams() throws Exception {\n\n    SolrParams sParams = StreamingTest.mapParams(\"q\", \"*:*\", \"fl\", \"id , a_s , a_i , a_f\", \"sort\", \"a_f  asc , a_i  asc\");\n\n    //CloudSolrStream compares the values of the sort with the fl field.\n    //The constructor will throw an exception if the sort fields do not the\n    //a value in the field list.\n\n    CloudSolrStream stream = new CloudSolrStream(\"\", \"collection1\", sParams);\n  }\n\n","sourceOld":"  @Test\n  public void testSpacesInParams() throws Exception {\n\n    Map params = mapParams(\"q\", \"*:*\", \"fl\", \"id , a_s , a_i , a_f\", \"sort\", \"a_f  asc , a_i  asc\");\n\n    //CloudSolrStream compares the values of the sort with the fl field.\n    //The constructor will throw an exception if the sort fields do not the\n    //a value in the field list.\n\n    CloudSolrStream stream = new CloudSolrStream(\"\", \"collection1\", params);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e66a459d38c1c4a2f97128433dab546f683a9fed","date":1462873476,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testSpacesInParams().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testSpacesInParams().mjava","sourceNew":"  @Test\n  public void testSpacesInParams() throws Exception {\n\n    SolrParams sParams = StreamingTest.mapParams(\"q\", \"*:*\", \"fl\", \"id , a_s , a_i , a_f\", \"sort\", \"a_f  asc , a_i  asc\");\n\n    //CloudSolrStream compares the values of the sort with the fl field.\n    //The constructor will throw an exception if the sort fields do not the\n    //a value in the field list.\n\n    CloudSolrStream stream = new CloudSolrStream(\"\", \"collection1\", sParams);\n  }\n\n","sourceOld":"  @Test\n  public void testSpacesInParams() throws Exception {\n\n    Map params = mapParams(\"q\", \"*:*\", \"fl\", \"id , a_s , a_i , a_f\", \"sort\", \"a_f  asc , a_i  asc\");\n\n    //CloudSolrStream compares the values of the sort with the fl field.\n    //The constructor will throw an exception if the sort fields do not the\n    //a value in the field list.\n\n    CloudSolrStream stream = new CloudSolrStream(\"\", \"collection1\", params);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testSpacesInParams().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testSpacesInParams().mjava","sourceNew":"  @Test\n  public void testSpacesInParams() throws Exception {\n\n    SolrParams sParams = StreamingTest.mapParams(\"q\", \"*:*\", \"fl\", \"id , a_s , a_i , a_f\", \"sort\", \"a_f  asc , a_i  asc\");\n\n    //CloudSolrStream compares the values of the sort with the fl field.\n    //The constructor will throw an exception if the sort fields do not the\n    //a value in the field list.\n\n    CloudSolrStream stream = new CloudSolrStream(\"\", \"collection1\", sParams);\n  }\n\n","sourceOld":"  @Test\n  public void testSpacesInParams() throws Exception {\n\n    Map params = mapParams(\"q\", \"*:*\", \"fl\", \"id , a_s , a_i , a_f\", \"sort\", \"a_f  asc , a_i  asc\");\n\n    //CloudSolrStream compares the values of the sort with the fl field.\n    //The constructor will throw an exception if the sort fields do not the\n    //a value in the field list.\n\n    CloudSolrStream stream = new CloudSolrStream(\"\", \"collection1\", params);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testSpacesInParams().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testSpacesInParams().mjava","sourceNew":"  @Test\n  public void testSpacesInParams() throws Exception {\n\n    SolrParams sParams = StreamingTest.mapParams(\"q\", \"*:*\", \"fl\", \"id , a_s , a_i , a_f\", \"sort\", \"a_f  asc , a_i  asc\");\n\n    //CloudSolrStream compares the values of the sort with the fl field.\n    //The constructor will throw an exception if the sort fields do not the\n    //a value in the field list.\n\n    CloudSolrStream stream = new CloudSolrStream(\"\", \"collection1\", sParams);\n  }\n\n","sourceOld":"  @Test\n  public void testSpacesInParams() throws Exception {\n\n    Map params = mapParams(\"q\", \"*:*\", \"fl\", \"id , a_s , a_i , a_f\", \"sort\", \"a_f  asc , a_i  asc\");\n\n    //CloudSolrStream compares the values of the sort with the fl field.\n    //The constructor will throw an exception if the sort fields do not the\n    //a value in the field list.\n\n    CloudSolrStream stream = new CloudSolrStream(\"\", \"collection1\", params);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8c969f15cd04d31e520319c619a445ae21f02d72","date":1479263638,"type":3,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testSpacesInParams().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testSpacesInParams().mjava","sourceNew":"@Test\npublic void testSpacesInParams() throws Exception {\n\n  SolrParams sParams = StreamingTest.mapParams(\"q\", \"*:*\", \"fl\", \"id , a_s , a_i , a_f\", \"sort\", \"a_f  asc , a_i  asc\");\n\n  //CloudSolrStream compares the values of the sort with the fl field.\n  //The constructor will throw an exception if the sort fields do not the\n  //a value in the field list.\n\n  CloudSolrStream stream = new CloudSolrStream(\"\", \"collection1\", sParams);\n}\n\n","sourceOld":"  @Test\n  public void testSpacesInParams() throws Exception {\n\n    SolrParams sParams = StreamingTest.mapParams(\"q\", \"*:*\", \"fl\", \"id , a_s , a_i , a_f\", \"sort\", \"a_f  asc , a_i  asc\");\n\n    //CloudSolrStream compares the values of the sort with the fl field.\n    //The constructor will throw an exception if the sort fields do not the\n    //a value in the field list.\n\n    CloudSolrStream stream = new CloudSolrStream(\"\", \"collection1\", sParams);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a1ef55e1fff7ff44354432770ad8bc19be1fcc75","date":1479266056,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testSpacesInParams().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testSpacesInParams().mjava","sourceNew":"@Test\npublic void testSpacesInParams() throws Exception {\n\n  SolrParams sParams = StreamingTest.mapParams(\"q\", \"*:*\", \"fl\", \"id , a_s , a_i , a_f\", \"sort\", \"a_f  asc , a_i  asc\");\n\n  //CloudSolrStream compares the values of the sort with the fl field.\n  //The constructor will throw an exception if the sort fields do not the\n  //a value in the field list.\n\n  CloudSolrStream stream = new CloudSolrStream(\"\", \"collection1\", sParams);\n}\n\n","sourceOld":"  @Test\n  public void testSpacesInParams() throws Exception {\n\n    SolrParams sParams = StreamingTest.mapParams(\"q\", \"*:*\", \"fl\", \"id , a_s , a_i , a_f\", \"sort\", \"a_f  asc , a_i  asc\");\n\n    //CloudSolrStream compares the values of the sort with the fl field.\n    //The constructor will throw an exception if the sort fields do not the\n    //a value in the field list.\n\n    CloudSolrStream stream = new CloudSolrStream(\"\", \"collection1\", sParams);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f15af35d55d70c34451f9df5edeaeff6b31f8cbe","date":1519625627,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testSpacesInParams().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testSpacesInParams().mjava","sourceNew":"@Test\npublic void testSpacesInParams() throws Exception {\n\n  SolrParams sParams = StreamingTest.mapParams(\"q\", \"*:*\", \"fl\", \"id , a_s , a_i , a_f\", \"sort\", \"a_f  asc , a_i  asc\");\n\n  //CloudSolrStream compares the values of the sort with the fl field.\n  //The constructor will throw an exception if the sort fields do not the\n  //a value in the field list.\n\n  CloudSolrStream stream = new CloudSolrStream(\"\", \"collection1\", sParams);\n  stream.close();\n}\n\n","sourceOld":"@Test\npublic void testSpacesInParams() throws Exception {\n\n  SolrParams sParams = StreamingTest.mapParams(\"q\", \"*:*\", \"fl\", \"id , a_s , a_i , a_f\", \"sort\", \"a_f  asc , a_i  asc\");\n\n  //CloudSolrStream compares the values of the sort with the fl field.\n  //The constructor will throw an exception if the sort fields do not the\n  //a value in the field list.\n\n  CloudSolrStream stream = new CloudSolrStream(\"\", \"collection1\", sParams);\n}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f00f1c5fad501b66705121feb623f8cfbb6712f9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"73450c0955930295d34703e7ddbfc6973b7a121a":["a55bf71f91aeded06b44ad1abea6666ea168b697","b940572a59da1b42b6c20ab5278155b12816807a"],"b940572a59da1b42b6c20ab5278155b12816807a":["a55bf71f91aeded06b44ad1abea6666ea168b697"],"826d15444ddf61716dc768c229cd54b2c2ccce1c":["73450c0955930295d34703e7ddbfc6973b7a121a"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["bd78ba595fa6cdd7fff930f26d154d13a823fa47","d470c8182e92b264680e34081b75e70a9f2b3c89"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["73450c0955930295d34703e7ddbfc6973b7a121a","826d15444ddf61716dc768c229cd54b2c2ccce1c"],"bd78ba595fa6cdd7fff930f26d154d13a823fa47":["a55bf71f91aeded06b44ad1abea6666ea168b697","b940572a59da1b42b6c20ab5278155b12816807a"],"a55bf71f91aeded06b44ad1abea6666ea168b697":["f00f1c5fad501b66705121feb623f8cfbb6712f9"],"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904":["a55bf71f91aeded06b44ad1abea6666ea168b697","73450c0955930295d34703e7ddbfc6973b7a121a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a1ef55e1fff7ff44354432770ad8bc19be1fcc75":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","8c969f15cd04d31e520319c619a445ae21f02d72"],"e66a459d38c1c4a2f97128433dab546f683a9fed":["a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","826d15444ddf61716dc768c229cd54b2c2ccce1c"],"f15af35d55d70c34451f9df5edeaeff6b31f8cbe":["8c969f15cd04d31e520319c619a445ae21f02d72"],"8c969f15cd04d31e520319c619a445ae21f02d72":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f15af35d55d70c34451f9df5edeaeff6b31f8cbe"]},"commit2Childs":{"f00f1c5fad501b66705121feb623f8cfbb6712f9":["a55bf71f91aeded06b44ad1abea6666ea168b697"],"73450c0955930295d34703e7ddbfc6973b7a121a":["826d15444ddf61716dc768c229cd54b2c2ccce1c","d470c8182e92b264680e34081b75e70a9f2b3c89","a8ed5da4b0191db6bc7f77f9feb35da6bd76f904"],"b940572a59da1b42b6c20ab5278155b12816807a":["73450c0955930295d34703e7ddbfc6973b7a121a","bd78ba595fa6cdd7fff930f26d154d13a823fa47"],"826d15444ddf61716dc768c229cd54b2c2ccce1c":["d470c8182e92b264680e34081b75e70a9f2b3c89","e66a459d38c1c4a2f97128433dab546f683a9fed"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a1ef55e1fff7ff44354432770ad8bc19be1fcc75"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","8c969f15cd04d31e520319c619a445ae21f02d72"],"bd78ba595fa6cdd7fff930f26d154d13a823fa47":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a55bf71f91aeded06b44ad1abea6666ea168b697":["73450c0955930295d34703e7ddbfc6973b7a121a","b940572a59da1b42b6c20ab5278155b12816807a","bd78ba595fa6cdd7fff930f26d154d13a823fa47","a8ed5da4b0191db6bc7f77f9feb35da6bd76f904"],"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904":["e66a459d38c1c4a2f97128433dab546f683a9fed"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f00f1c5fad501b66705121feb623f8cfbb6712f9"],"a1ef55e1fff7ff44354432770ad8bc19be1fcc75":[],"e66a459d38c1c4a2f97128433dab546f683a9fed":[],"8c969f15cd04d31e520319c619a445ae21f02d72":["a1ef55e1fff7ff44354432770ad8bc19be1fcc75","f15af35d55d70c34451f9df5edeaeff6b31f8cbe"],"f15af35d55d70c34451f9df5edeaeff6b31f8cbe":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a1ef55e1fff7ff44354432770ad8bc19be1fcc75","e66a459d38c1c4a2f97128433dab546f683a9fed","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}