{"path":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testAfterClose().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testAfterClose().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriterReader#testAfterClose().mjava","sourceNew":"  // Make sure reader remains usable even if IndexWriter closes\n  public void testAfterClose() throws Exception {\n    Directory dir1 = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir1, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    writer.setInfoStream(infoStream);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n\n    IndexReader r = writer.getReader();\n    writer.close();\n\n    _TestUtil.checkIndex(dir1);\n\n    // reader should remain usable even after IndexWriter is closed:\n    assertEquals(100, r.numDocs());\n    Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n    assertEquals(100, new IndexSearcher(r).search(q, 10).totalHits);\n\n    try {\n      r.reopen();\n      fail(\"failed to hit AlreadyClosedException\");\n    } catch (AlreadyClosedException ace) {\n      // expected\n    }\n    r.close();\n    dir1.close();\n  }\n\n","sourceOld":"  // Make sure reader remains usable even if IndexWriter closes\n  public void testAfterClose() throws Exception {\n    Directory dir1 = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir1, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    writer.setInfoStream(infoStream);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n\n    IndexReader r = writer.getReader();\n    writer.close();\n\n    _TestUtil.checkIndex(dir1);\n\n    // reader should remain usable even after IndexWriter is closed:\n    assertEquals(100, r.numDocs());\n    Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n    assertEquals(100, new IndexSearcher(r).search(q, 10).totalHits);\n\n    try {\n      r.reopen();\n      fail(\"failed to hit AlreadyClosedException\");\n    } catch (AlreadyClosedException ace) {\n      // expected\n    }\n    r.close();\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d572389229127c297dd1fa5ce4758e1cec41e799","date":1273610938,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testAfterClose().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testAfterClose().mjava","sourceNew":"  // Make sure reader remains usable even if IndexWriter closes\n  public void testAfterClose() throws Exception {\n    Directory dir1 = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir1, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    writer.setInfoStream(infoStream);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n\n    IndexReader r = writer.getReader();\n    writer.close();\n\n    _TestUtil.checkIndex(dir1);\n\n    // reader should remain usable even after IndexWriter is closed:\n    assertEquals(100, r.numDocs());\n    Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n    assertEquals(100, new IndexSearcher(r).search(q, 10).totalHits);\n\n    try {\n      r.reopen();\n      fail(\"failed to hit AlreadyClosedException\");\n    } catch (AlreadyClosedException ace) {\n      // expected\n    }\n    r.close();\n    dir1.close();\n  }\n\n","sourceOld":"  // Make sure reader remains usable even if IndexWriter closes\n  public void testAfterClose() throws Exception {\n    Directory dir1 = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir1, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    writer.setInfoStream(infoStream);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n\n    IndexReader r = writer.getReader();\n    writer.close();\n\n    _TestUtil.checkIndex(dir1);\n\n    // reader should remain usable even after IndexWriter is closed:\n    assertEquals(100, r.numDocs());\n    Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n    assertEquals(100, new IndexSearcher(r).search(q, 10).totalHits);\n\n    try {\n      r.reopen();\n      fail(\"failed to hit AlreadyClosedException\");\n    } catch (AlreadyClosedException ace) {\n      // expected\n    }\n    r.close();\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b21422ff1d1d56499dec481f193b402e5e8def5b","date":1281472367,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testAfterClose().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testAfterClose().mjava","sourceNew":"  // Make sure reader remains usable even if IndexWriter closes\n  public void testAfterClose() throws Exception {\n    Directory dir1 = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir1, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()));\n    writer.setInfoStream(infoStream);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n\n    IndexReader r = writer.getReader();\n    writer.close();\n\n    _TestUtil.checkIndex(dir1);\n\n    // reader should remain usable even after IndexWriter is closed:\n    assertEquals(100, r.numDocs());\n    Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n    assertEquals(100, new IndexSearcher(r).search(q, 10).totalHits);\n\n    try {\n      r.reopen();\n      fail(\"failed to hit AlreadyClosedException\");\n    } catch (AlreadyClosedException ace) {\n      // expected\n    }\n    r.close();\n    dir1.close();\n  }\n\n","sourceOld":"  // Make sure reader remains usable even if IndexWriter closes\n  public void testAfterClose() throws Exception {\n    Directory dir1 = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir1, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    writer.setInfoStream(infoStream);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n\n    IndexReader r = writer.getReader();\n    writer.close();\n\n    _TestUtil.checkIndex(dir1);\n\n    // reader should remain usable even after IndexWriter is closed:\n    assertEquals(100, r.numDocs());\n    Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n    assertEquals(100, new IndexSearcher(r).search(q, 10).totalHits);\n\n    try {\n      r.reopen();\n      fail(\"failed to hit AlreadyClosedException\");\n    } catch (AlreadyClosedException ace) {\n      // expected\n    }\n    r.close();\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","date":1281646583,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testAfterClose().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testAfterClose().mjava","sourceNew":"  // Make sure reader remains usable even if IndexWriter closes\n  public void testAfterClose() throws Exception {\n    Directory dir1 = newDirectory(random);\n    IndexWriter writer = new IndexWriter(dir1, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()));\n    writer.setInfoStream(infoStream);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n\n    IndexReader r = writer.getReader();\n    writer.close();\n\n    _TestUtil.checkIndex(dir1);\n\n    // reader should remain usable even after IndexWriter is closed:\n    assertEquals(100, r.numDocs());\n    Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n    assertEquals(100, new IndexSearcher(r).search(q, 10).totalHits);\n\n    try {\n      r.reopen();\n      fail(\"failed to hit AlreadyClosedException\");\n    } catch (AlreadyClosedException ace) {\n      // expected\n    }\n    r.close();\n    dir1.close();\n  }\n\n","sourceOld":"  // Make sure reader remains usable even if IndexWriter closes\n  public void testAfterClose() throws Exception {\n    Directory dir1 = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir1, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()));\n    writer.setInfoStream(infoStream);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n\n    IndexReader r = writer.getReader();\n    writer.close();\n\n    _TestUtil.checkIndex(dir1);\n\n    // reader should remain usable even after IndexWriter is closed:\n    assertEquals(100, r.numDocs());\n    Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n    assertEquals(100, new IndexSearcher(r).search(q, 10).totalHits);\n\n    try {\n      r.reopen();\n      fail(\"failed to hit AlreadyClosedException\");\n    } catch (AlreadyClosedException ace) {\n      // expected\n    }\n    r.close();\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testAfterClose().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testAfterClose().mjava","sourceNew":"  // Make sure reader remains usable even if IndexWriter closes\n  public void testAfterClose() throws Exception {\n    Directory dir1 = newDirectory();\n    IndexWriter writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n    writer.setInfoStream(infoStream);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n\n    IndexReader r = writer.getReader();\n    writer.close();\n\n    _TestUtil.checkIndex(dir1);\n\n    // reader should remain usable even after IndexWriter is closed:\n    assertEquals(100, r.numDocs());\n    Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n    assertEquals(100, new IndexSearcher(r).search(q, 10).totalHits);\n\n    try {\n      r.reopen();\n      fail(\"failed to hit AlreadyClosedException\");\n    } catch (AlreadyClosedException ace) {\n      // expected\n    }\n    r.close();\n    dir1.close();\n  }\n\n","sourceOld":"  // Make sure reader remains usable even if IndexWriter closes\n  public void testAfterClose() throws Exception {\n    Directory dir1 = newDirectory(random);\n    IndexWriter writer = new IndexWriter(dir1, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()));\n    writer.setInfoStream(infoStream);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n\n    IndexReader r = writer.getReader();\n    writer.close();\n\n    _TestUtil.checkIndex(dir1);\n\n    // reader should remain usable even after IndexWriter is closed:\n    assertEquals(100, r.numDocs());\n    Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n    assertEquals(100, new IndexSearcher(r).search(q, 10).totalHits);\n\n    try {\n      r.reopen();\n      fail(\"failed to hit AlreadyClosedException\");\n    } catch (AlreadyClosedException ace) {\n      // expected\n    }\n    r.close();\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":["527cc14542789f47d75da436cb4287d1ab887e34"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testAfterClose().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testAfterClose().mjava","sourceNew":"  // Make sure reader remains usable even if IndexWriter closes\n  public void testAfterClose() throws Exception {\n    Directory dir1 = newDirectory();\n    IndexWriter writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n    writer.setInfoStream(infoStream);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n\n    IndexReader r = writer.getReader();\n    writer.close();\n\n    _TestUtil.checkIndex(dir1);\n\n    // reader should remain usable even after IndexWriter is closed:\n    assertEquals(100, r.numDocs());\n    Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n    assertEquals(100, new IndexSearcher(r).search(q, 10).totalHits);\n\n    try {\n      r.reopen();\n      fail(\"failed to hit AlreadyClosedException\");\n    } catch (AlreadyClosedException ace) {\n      // expected\n    }\n    r.close();\n    dir1.close();\n  }\n\n","sourceOld":"  // Make sure reader remains usable even if IndexWriter closes\n  public void testAfterClose() throws Exception {\n    Directory dir1 = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir1, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    writer.setInfoStream(infoStream);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n\n    IndexReader r = writer.getReader();\n    writer.close();\n\n    _TestUtil.checkIndex(dir1);\n\n    // reader should remain usable even after IndexWriter is closed:\n    assertEquals(100, r.numDocs());\n    Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n    assertEquals(100, new IndexSearcher(r).search(q, 10).totalHits);\n\n    try {\n      r.reopen();\n      fail(\"failed to hit AlreadyClosedException\");\n    } catch (AlreadyClosedException ace) {\n      // expected\n    }\n    r.close();\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"790e1fde4caa765b3faaad3fbcd25c6973450336","date":1296689245,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testAfterClose().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testAfterClose().mjava","sourceNew":"  // Make sure reader remains usable even if IndexWriter closes\n  public void testAfterClose() throws Exception {\n    Directory dir1 = newDirectory();\n    IndexWriter writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n    writer.setInfoStream(infoStream);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n\n    IndexReader r = writer.getReader();\n    writer.close();\n\n    _TestUtil.checkIndex(dir1);\n\n    // reader should remain usable even after IndexWriter is closed:\n    assertEquals(100, r.numDocs());\n    Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n    IndexSearcher searcher = newSearcher(r);\n    assertEquals(100, searcher.search(q, 10).totalHits);\n    searcher.close();\n    try {\n      r.reopen();\n      fail(\"failed to hit AlreadyClosedException\");\n    } catch (AlreadyClosedException ace) {\n      // expected\n    }\n    r.close();\n    dir1.close();\n  }\n\n","sourceOld":"  // Make sure reader remains usable even if IndexWriter closes\n  public void testAfterClose() throws Exception {\n    Directory dir1 = newDirectory();\n    IndexWriter writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n    writer.setInfoStream(infoStream);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n\n    IndexReader r = writer.getReader();\n    writer.close();\n\n    _TestUtil.checkIndex(dir1);\n\n    // reader should remain usable even after IndexWriter is closed:\n    assertEquals(100, r.numDocs());\n    Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n    assertEquals(100, new IndexSearcher(r).search(q, 10).totalHits);\n\n    try {\n      r.reopen();\n      fail(\"failed to hit AlreadyClosedException\");\n    } catch (AlreadyClosedException ace) {\n      // expected\n    }\n    r.close();\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testAfterClose().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testAfterClose().mjava","sourceNew":"  // Make sure reader remains usable even if IndexWriter closes\n  public void testAfterClose() throws Exception {\n    Directory dir1 = newDirectory();\n    IndexWriter writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n    writer.setInfoStream(infoStream);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n\n    IndexReader r = writer.getReader();\n    writer.close();\n\n    _TestUtil.checkIndex(dir1);\n\n    // reader should remain usable even after IndexWriter is closed:\n    assertEquals(100, r.numDocs());\n    Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n    IndexSearcher searcher = newSearcher(r);\n    assertEquals(100, searcher.search(q, 10).totalHits);\n    searcher.close();\n    try {\n      r.reopen();\n      fail(\"failed to hit AlreadyClosedException\");\n    } catch (AlreadyClosedException ace) {\n      // expected\n    }\n    r.close();\n    dir1.close();\n  }\n\n","sourceOld":"  // Make sure reader remains usable even if IndexWriter closes\n  public void testAfterClose() throws Exception {\n    Directory dir1 = newDirectory();\n    IndexWriter writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n    writer.setInfoStream(infoStream);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n\n    IndexReader r = writer.getReader();\n    writer.close();\n\n    _TestUtil.checkIndex(dir1);\n\n    // reader should remain usable even after IndexWriter is closed:\n    assertEquals(100, r.numDocs());\n    Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n    assertEquals(100, new IndexSearcher(r).search(q, 10).totalHits);\n\n    try {\n      r.reopen();\n      fail(\"failed to hit AlreadyClosedException\");\n    } catch (AlreadyClosedException ace) {\n      // expected\n    }\n    r.close();\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testAfterClose().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testAfterClose().mjava","sourceNew":"  // Make sure reader remains usable even if IndexWriter closes\n  public void testAfterClose() throws Exception {\n    Directory dir1 = newDirectory();\n    IndexWriter writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n    writer.setInfoStream(infoStream);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n\n    IndexReader r = writer.getReader();\n    writer.close();\n\n    _TestUtil.checkIndex(dir1);\n\n    // reader should remain usable even after IndexWriter is closed:\n    assertEquals(100, r.numDocs());\n    Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n    IndexSearcher searcher = newSearcher(r);\n    assertEquals(100, searcher.search(q, 10).totalHits);\n    searcher.close();\n    try {\n      r.reopen();\n      fail(\"failed to hit AlreadyClosedException\");\n    } catch (AlreadyClosedException ace) {\n      // expected\n    }\n    r.close();\n    dir1.close();\n  }\n\n","sourceOld":"  // Make sure reader remains usable even if IndexWriter closes\n  public void testAfterClose() throws Exception {\n    Directory dir1 = newDirectory();\n    IndexWriter writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n    writer.setInfoStream(infoStream);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n\n    IndexReader r = writer.getReader();\n    writer.close();\n\n    _TestUtil.checkIndex(dir1);\n\n    // reader should remain usable even after IndexWriter is closed:\n    assertEquals(100, r.numDocs());\n    Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n    assertEquals(100, new IndexSearcher(r).search(q, 10).totalHits);\n\n    try {\n      r.reopen();\n      fail(\"failed to hit AlreadyClosedException\");\n    } catch (AlreadyClosedException ace) {\n      // expected\n    }\n    r.close();\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2c5f0cb44df114db4228c8f77861714b5cabaea","date":1302542431,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testAfterClose().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testAfterClose().mjava","sourceNew":"  // Make sure reader remains usable even if IndexWriter closes\n  public void testAfterClose() throws Exception {\n    Directory dir1 = newDirectory();\n    IndexWriter writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    writer.setInfoStream(infoStream);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n\n    IndexReader r = writer.getReader();\n    writer.close();\n\n    _TestUtil.checkIndex(dir1);\n\n    // reader should remain usable even after IndexWriter is closed:\n    assertEquals(100, r.numDocs());\n    Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n    IndexSearcher searcher = newSearcher(r);\n    assertEquals(100, searcher.search(q, 10).totalHits);\n    searcher.close();\n    try {\n      r.reopen();\n      fail(\"failed to hit AlreadyClosedException\");\n    } catch (AlreadyClosedException ace) {\n      // expected\n    }\n    r.close();\n    dir1.close();\n  }\n\n","sourceOld":"  // Make sure reader remains usable even if IndexWriter closes\n  public void testAfterClose() throws Exception {\n    Directory dir1 = newDirectory();\n    IndexWriter writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n    writer.setInfoStream(infoStream);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n\n    IndexReader r = writer.getReader();\n    writer.close();\n\n    _TestUtil.checkIndex(dir1);\n\n    // reader should remain usable even after IndexWriter is closed:\n    assertEquals(100, r.numDocs());\n    Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n    IndexSearcher searcher = newSearcher(r);\n    assertEquals(100, searcher.search(q, 10).totalHits);\n    searcher.close();\n    try {\n      r.reopen();\n      fail(\"failed to hit AlreadyClosedException\");\n    } catch (AlreadyClosedException ace) {\n      // expected\n    }\n    r.close();\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testAfterClose().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testAfterClose().mjava","sourceNew":"  // Make sure reader remains usable even if IndexWriter closes\n  public void testAfterClose() throws Exception {\n    Directory dir1 = newDirectory();\n    IndexWriter writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    writer.setInfoStream(infoStream);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n\n    IndexReader r = writer.getReader();\n    writer.close();\n\n    _TestUtil.checkIndex(dir1);\n\n    // reader should remain usable even after IndexWriter is closed:\n    assertEquals(100, r.numDocs());\n    Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n    IndexSearcher searcher = newSearcher(r);\n    assertEquals(100, searcher.search(q, 10).totalHits);\n    searcher.close();\n    try {\n      r.reopen();\n      fail(\"failed to hit AlreadyClosedException\");\n    } catch (AlreadyClosedException ace) {\n      // expected\n    }\n    r.close();\n    dir1.close();\n  }\n\n","sourceOld":"  // Make sure reader remains usable even if IndexWriter closes\n  public void testAfterClose() throws Exception {\n    Directory dir1 = newDirectory();\n    IndexWriter writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n    writer.setInfoStream(infoStream);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n\n    IndexReader r = writer.getReader();\n    writer.close();\n\n    _TestUtil.checkIndex(dir1);\n\n    // reader should remain usable even after IndexWriter is closed:\n    assertEquals(100, r.numDocs());\n    Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n    IndexSearcher searcher = newSearcher(r);\n    assertEquals(100, searcher.search(q, 10).totalHits);\n    searcher.close();\n    try {\n      r.reopen();\n      fail(\"failed to hit AlreadyClosedException\");\n    } catch (AlreadyClosedException ace) {\n      // expected\n    }\n    r.close();\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testAfterClose().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testAfterClose().mjava","sourceNew":"  // Make sure reader remains usable even if IndexWriter closes\n  public void testAfterClose() throws Exception {\n    Directory dir1 = newDirectory();\n    IndexWriter writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    writer.setInfoStream(infoStream);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n\n    IndexReader r = writer.getReader();\n    writer.close();\n\n    _TestUtil.checkIndex(dir1);\n\n    // reader should remain usable even after IndexWriter is closed:\n    assertEquals(100, r.numDocs());\n    Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n    IndexSearcher searcher = newSearcher(r);\n    assertEquals(100, searcher.search(q, 10).totalHits);\n    searcher.close();\n    try {\n      r.reopen();\n      fail(\"failed to hit AlreadyClosedException\");\n    } catch (AlreadyClosedException ace) {\n      // expected\n    }\n    r.close();\n    dir1.close();\n  }\n\n","sourceOld":"  // Make sure reader remains usable even if IndexWriter closes\n  public void testAfterClose() throws Exception {\n    Directory dir1 = newDirectory();\n    IndexWriter writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n    writer.setInfoStream(infoStream);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n\n    IndexReader r = writer.getReader();\n    writer.close();\n\n    _TestUtil.checkIndex(dir1);\n\n    // reader should remain usable even after IndexWriter is closed:\n    assertEquals(100, r.numDocs());\n    Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n    IndexSearcher searcher = newSearcher(r);\n    assertEquals(100, searcher.search(q, 10).totalHits);\n    searcher.close();\n    try {\n      r.reopen();\n      fail(\"failed to hit AlreadyClosedException\");\n    } catch (AlreadyClosedException ace) {\n      // expected\n    }\n    r.close();\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testAfterClose().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testAfterClose().mjava","sourceNew":"  // Make sure reader remains usable even if IndexWriter closes\n  public void testAfterClose() throws Exception {\n    Directory dir1 = newDirectory();\n    IndexWriter writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    writer.setInfoStream(infoStream);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n\n    IndexReader r = writer.getReader();\n    writer.close();\n\n    _TestUtil.checkIndex(dir1);\n\n    // reader should remain usable even after IndexWriter is closed:\n    assertEquals(100, r.numDocs());\n    Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n    IndexSearcher searcher = newSearcher(r);\n    assertEquals(100, searcher.search(q, 10).totalHits);\n    searcher.close();\n    try {\n      r.reopen();\n      fail(\"failed to hit AlreadyClosedException\");\n    } catch (AlreadyClosedException ace) {\n      // expected\n    }\n    r.close();\n    dir1.close();\n  }\n\n","sourceOld":"  // Make sure reader remains usable even if IndexWriter closes\n  public void testAfterClose() throws Exception {\n    Directory dir1 = newDirectory();\n    IndexWriter writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n    writer.setInfoStream(infoStream);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n\n    IndexReader r = writer.getReader();\n    writer.close();\n\n    _TestUtil.checkIndex(dir1);\n\n    // reader should remain usable even after IndexWriter is closed:\n    assertEquals(100, r.numDocs());\n    Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n    IndexSearcher searcher = newSearcher(r);\n    assertEquals(100, searcher.search(q, 10).totalHits);\n    searcher.close();\n    try {\n      r.reopen();\n      fail(\"failed to hit AlreadyClosedException\");\n    } catch (AlreadyClosedException ace) {\n      // expected\n    }\n    r.close();\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8a8259c922a83abc544609227a60d48e5ee93e7e","date":1317679620,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testAfterClose().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testAfterClose().mjava","sourceNew":"  // Make sure reader remains usable even if IndexWriter closes\n  public void testAfterClose() throws Exception {\n    Directory dir1 = newDirectory();\n    IndexWriter writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    writer.setInfoStream(infoStream);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n\n    IndexReader r = writer.getReader();\n    writer.close();\n\n    _TestUtil.checkIndex(dir1);\n\n    // reader should remain usable even after IndexWriter is closed:\n    assertEquals(100, r.numDocs());\n    Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n    IndexSearcher searcher = newSearcher(r);\n    assertEquals(100, searcher.search(q, 10).totalHits);\n    searcher.close();\n    try {\n      IndexReader.openIfChanged(r);\n      fail(\"failed to hit AlreadyClosedException\");\n    } catch (AlreadyClosedException ace) {\n      // expected\n    }\n    r.close();\n    dir1.close();\n  }\n\n","sourceOld":"  // Make sure reader remains usable even if IndexWriter closes\n  public void testAfterClose() throws Exception {\n    Directory dir1 = newDirectory();\n    IndexWriter writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    writer.setInfoStream(infoStream);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n\n    IndexReader r = writer.getReader();\n    writer.close();\n\n    _TestUtil.checkIndex(dir1);\n\n    // reader should remain usable even after IndexWriter is closed:\n    assertEquals(100, r.numDocs());\n    Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n    IndexSearcher searcher = newSearcher(r);\n    assertEquals(100, searcher.search(q, 10).totalHits);\n    searcher.close();\n    try {\n      r.reopen();\n      fail(\"failed to hit AlreadyClosedException\");\n    } catch (AlreadyClosedException ace) {\n      // expected\n    }\n    r.close();\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"06584e6e98d592b34e1329b384182f368d2025e8","date":1320850353,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testAfterClose().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testAfterClose().mjava","sourceNew":"  // Make sure reader remains usable even if IndexWriter closes\n  public void testAfterClose() throws Exception {\n    Directory dir1 = newDirectory();\n    IndexWriter writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n\n    IndexReader r = writer.getReader();\n    writer.close();\n\n    _TestUtil.checkIndex(dir1);\n\n    // reader should remain usable even after IndexWriter is closed:\n    assertEquals(100, r.numDocs());\n    Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n    IndexSearcher searcher = newSearcher(r);\n    assertEquals(100, searcher.search(q, 10).totalHits);\n    searcher.close();\n    try {\n      IndexReader.openIfChanged(r);\n      fail(\"failed to hit AlreadyClosedException\");\n    } catch (AlreadyClosedException ace) {\n      // expected\n    }\n    r.close();\n    dir1.close();\n  }\n\n","sourceOld":"  // Make sure reader remains usable even if IndexWriter closes\n  public void testAfterClose() throws Exception {\n    Directory dir1 = newDirectory();\n    IndexWriter writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    writer.setInfoStream(infoStream);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n\n    IndexReader r = writer.getReader();\n    writer.close();\n\n    _TestUtil.checkIndex(dir1);\n\n    // reader should remain usable even after IndexWriter is closed:\n    assertEquals(100, r.numDocs());\n    Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n    IndexSearcher searcher = newSearcher(r);\n    assertEquals(100, searcher.search(q, 10).totalHits);\n    searcher.close();\n    try {\n      IndexReader.openIfChanged(r);\n      fail(\"failed to hit AlreadyClosedException\");\n    } catch (AlreadyClosedException ace) {\n      // expected\n    }\n    r.close();\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0e7c2454a6a8237bfd0e953f5b940838408c9055","date":1323649300,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testAfterClose().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testAfterClose().mjava","sourceNew":"  // Make sure reader remains usable even if IndexWriter closes\n  public void testAfterClose() throws Exception {\n    Directory dir1 = newDirectory();\n    IndexWriter writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n\n    IndexReader r = writer.getReader();\n    writer.close();\n\n    _TestUtil.checkIndex(dir1);\n\n    // reader should remain usable even after IndexWriter is closed:\n    assertEquals(100, r.numDocs());\n    Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n    IndexSearcher searcher = newSearcher(r);\n    assertEquals(100, searcher.search(q, 10).totalHits);\n    try {\n      IndexReader.openIfChanged(r);\n      fail(\"failed to hit AlreadyClosedException\");\n    } catch (AlreadyClosedException ace) {\n      // expected\n    }\n    r.close();\n    dir1.close();\n  }\n\n","sourceOld":"  // Make sure reader remains usable even if IndexWriter closes\n  public void testAfterClose() throws Exception {\n    Directory dir1 = newDirectory();\n    IndexWriter writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n\n    IndexReader r = writer.getReader();\n    writer.close();\n\n    _TestUtil.checkIndex(dir1);\n\n    // reader should remain usable even after IndexWriter is closed:\n    assertEquals(100, r.numDocs());\n    Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n    IndexSearcher searcher = newSearcher(r);\n    assertEquals(100, searcher.search(q, 10).totalHits);\n    searcher.close();\n    try {\n      IndexReader.openIfChanged(r);\n      fail(\"failed to hit AlreadyClosedException\");\n    } catch (AlreadyClosedException ace) {\n      // expected\n    }\n    r.close();\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","date":1323720782,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testAfterClose().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testAfterClose().mjava","sourceNew":"  // Make sure reader remains usable even if IndexWriter closes\n  public void testAfterClose() throws Exception {\n    Directory dir1 = newDirectory();\n    IndexWriter writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n\n    IndexReader r = writer.getReader();\n    writer.close();\n\n    _TestUtil.checkIndex(dir1);\n\n    // reader should remain usable even after IndexWriter is closed:\n    assertEquals(100, r.numDocs());\n    Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n    IndexSearcher searcher = newSearcher(r);\n    assertEquals(100, searcher.search(q, 10).totalHits);\n    try {\n      IndexReader.openIfChanged(r);\n      fail(\"failed to hit AlreadyClosedException\");\n    } catch (AlreadyClosedException ace) {\n      // expected\n    }\n    r.close();\n    dir1.close();\n  }\n\n","sourceOld":"  // Make sure reader remains usable even if IndexWriter closes\n  public void testAfterClose() throws Exception {\n    Directory dir1 = newDirectory();\n    IndexWriter writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n\n    IndexReader r = writer.getReader();\n    writer.close();\n\n    _TestUtil.checkIndex(dir1);\n\n    // reader should remain usable even after IndexWriter is closed:\n    assertEquals(100, r.numDocs());\n    Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n    IndexSearcher searcher = newSearcher(r);\n    assertEquals(100, searcher.search(q, 10).totalHits);\n    searcher.close();\n    try {\n      IndexReader.openIfChanged(r);\n      fail(\"failed to hit AlreadyClosedException\");\n    } catch (AlreadyClosedException ace) {\n      // expected\n    }\n    r.close();\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55c2bb1bcc0edd142e63b9230976dfc3e500dbe8","date":1327857288,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testAfterClose().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testAfterClose().mjava","sourceNew":"  // Make sure reader remains usable even if IndexWriter closes\n  public void testAfterClose() throws Exception {\n    Directory dir1 = newDirectory();\n    IndexWriter writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n\n    DirectoryReader r = writer.getReader();\n    writer.close();\n\n    _TestUtil.checkIndex(dir1);\n\n    // reader should remain usable even after IndexWriter is closed:\n    assertEquals(100, r.numDocs());\n    Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n    IndexSearcher searcher = newSearcher(r);\n    assertEquals(100, searcher.search(q, 10).totalHits);\n    try {\n      DirectoryReader.openIfChanged(r);\n      fail(\"failed to hit AlreadyClosedException\");\n    } catch (AlreadyClosedException ace) {\n      // expected\n    }\n    r.close();\n    dir1.close();\n  }\n\n","sourceOld":"  // Make sure reader remains usable even if IndexWriter closes\n  public void testAfterClose() throws Exception {\n    Directory dir1 = newDirectory();\n    IndexWriter writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n\n    IndexReader r = writer.getReader();\n    writer.close();\n\n    _TestUtil.checkIndex(dir1);\n\n    // reader should remain usable even after IndexWriter is closed:\n    assertEquals(100, r.numDocs());\n    Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n    IndexSearcher searcher = newSearcher(r);\n    assertEquals(100, searcher.search(q, 10).totalHits);\n    try {\n      IndexReader.openIfChanged(r);\n      fail(\"failed to hit AlreadyClosedException\");\n    } catch (AlreadyClosedException ace) {\n      // expected\n    }\n    r.close();\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testAfterClose().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testAfterClose().mjava","sourceNew":"  // Make sure reader remains usable even if IndexWriter closes\n  public void testAfterClose() throws Exception {\n    Directory dir1 = newDirectory();\n    IndexWriter writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n\n    DirectoryReader r = writer.getReader();\n    writer.close();\n\n    _TestUtil.checkIndex(dir1);\n\n    // reader should remain usable even after IndexWriter is closed:\n    assertEquals(100, r.numDocs());\n    Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n    IndexSearcher searcher = newSearcher(r);\n    assertEquals(100, searcher.search(q, 10).totalHits);\n    try {\n      DirectoryReader.openIfChanged(r);\n      fail(\"failed to hit AlreadyClosedException\");\n    } catch (AlreadyClosedException ace) {\n      // expected\n    }\n    r.close();\n    dir1.close();\n  }\n\n","sourceOld":"  // Make sure reader remains usable even if IndexWriter closes\n  public void testAfterClose() throws Exception {\n    Directory dir1 = newDirectory();\n    IndexWriter writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n\n    IndexReader r = writer.getReader();\n    writer.close();\n\n    _TestUtil.checkIndex(dir1);\n\n    // reader should remain usable even after IndexWriter is closed:\n    assertEquals(100, r.numDocs());\n    Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n    IndexSearcher searcher = newSearcher(r);\n    assertEquals(100, searcher.search(q, 10).totalHits);\n    try {\n      IndexReader.openIfChanged(r);\n      fail(\"failed to hit AlreadyClosedException\");\n    } catch (AlreadyClosedException ace) {\n      // expected\n    }\n    r.close();\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testAfterClose().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testAfterClose().mjava","sourceNew":"  // Make sure reader remains usable even if IndexWriter closes\n  public void testAfterClose() throws Exception {\n    Directory dir1 = newDirectory();\n    IndexWriter writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n\n    DirectoryReader r = writer.getReader();\n    writer.close();\n\n    _TestUtil.checkIndex(dir1);\n\n    // reader should remain usable even after IndexWriter is closed:\n    assertEquals(100, r.numDocs());\n    Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n    IndexSearcher searcher = newSearcher(r);\n    assertEquals(100, searcher.search(q, 10).totalHits);\n    try {\n      DirectoryReader.openIfChanged(r);\n      fail(\"failed to hit AlreadyClosedException\");\n    } catch (AlreadyClosedException ace) {\n      // expected\n    }\n    r.close();\n    dir1.close();\n  }\n\n","sourceOld":"  // Make sure reader remains usable even if IndexWriter closes\n  public void testAfterClose() throws Exception {\n    Directory dir1 = newDirectory();\n    IndexWriter writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n\n    DirectoryReader r = writer.getReader();\n    writer.close();\n\n    _TestUtil.checkIndex(dir1);\n\n    // reader should remain usable even after IndexWriter is closed:\n    assertEquals(100, r.numDocs());\n    Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n    IndexSearcher searcher = newSearcher(r);\n    assertEquals(100, searcher.search(q, 10).totalHits);\n    try {\n      DirectoryReader.openIfChanged(r);\n      fail(\"failed to hit AlreadyClosedException\");\n    } catch (AlreadyClosedException ace) {\n      // expected\n    }\n    r.close();\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["b21422ff1d1d56499dec481f193b402e5e8def5b"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"06584e6e98d592b34e1329b384182f368d2025e8":["8a8259c922a83abc544609227a60d48e5ee93e7e"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":["06584e6e98d592b34e1329b384182f368d2025e8","0e7c2454a6a8237bfd0e953f5b940838408c9055"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["29ef99d61cda9641b6250bf9567329a6e65f901d","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"55c2bb1bcc0edd142e63b9230976dfc3e500dbe8":["0e7c2454a6a8237bfd0e953f5b940838408c9055"],"d572389229127c297dd1fa5ce4758e1cec41e799":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"962d04139994fce5193143ef35615499a9a96d78":["bde51b089eb7f86171eb3406e38a274743f9b7ac","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["d572389229127c297dd1fa5ce4758e1cec41e799","1f653cfcf159baeaafe5d01682a911e95bba4012"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["0e7c2454a6a8237bfd0e953f5b940838408c9055","55c2bb1bcc0edd142e63b9230976dfc3e500dbe8"],"8a8259c922a83abc544609227a60d48e5ee93e7e":["f2c5f0cb44df114db4228c8f77861714b5cabaea"],"790e1fde4caa765b3faaad3fbcd25c6973450336":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["790e1fde4caa765b3faaad3fbcd25c6973450336"],"0e7c2454a6a8237bfd0e953f5b940838408c9055":["06584e6e98d592b34e1329b384182f368d2025e8"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"a3776dccca01c11e7046323cfad46a3b4a471233":["790e1fde4caa765b3faaad3fbcd25c6973450336","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["1f653cfcf159baeaafe5d01682a911e95bba4012","790e1fde4caa765b3faaad3fbcd25c6973450336"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b21422ff1d1d56499dec481f193b402e5e8def5b":["d572389229127c297dd1fa5ce4758e1cec41e799"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","790e1fde4caa765b3faaad3fbcd25c6973450336"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"06584e6e98d592b34e1329b384182f368d2025e8":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","0e7c2454a6a8237bfd0e953f5b940838408c9055"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":[],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"55c2bb1bcc0edd142e63b9230976dfc3e500dbe8":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"d572389229127c297dd1fa5ce4758e1cec41e799":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","b21422ff1d1d56499dec481f193b402e5e8def5b"],"962d04139994fce5193143ef35615499a9a96d78":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"8a8259c922a83abc544609227a60d48e5ee93e7e":["06584e6e98d592b34e1329b384182f368d2025e8"],"790e1fde4caa765b3faaad3fbcd25c6973450336":["f2c5f0cb44df114db4228c8f77861714b5cabaea","a3776dccca01c11e7046323cfad46a3b4a471233","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","8a8259c922a83abc544609227a60d48e5ee93e7e","a3776dccca01c11e7046323cfad46a3b4a471233"],"0e7c2454a6a8237bfd0e953f5b940838408c9055":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","55c2bb1bcc0edd142e63b9230976dfc3e500dbe8","5cab9a86bd67202d20b6adc463008c8e982b070a"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","790e1fde4caa765b3faaad3fbcd25c6973450336","29ef99d61cda9641b6250bf9567329a6e65f901d"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["962d04139994fce5193143ef35615499a9a96d78"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["d572389229127c297dd1fa5ce4758e1cec41e799"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}