{"path":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/ZKPropertiesWriter#readIndexerProperties().mjava","commits":[{"id":"b2a6913ca906832d1ef58d72498167acb00a7e4f","date":1330499260,"type":0,"author":"Sami Siren","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/ZKPropertiesWriter#readIndexerProperties().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Properties readIndexerProperties() {\n    Properties props = new Properties();\n    try {\n      byte[] data = zkClient.getData(path, null, null, false);\n      if (data != null) {\n        ByteArrayInputStream input = new ByteArrayInputStream(data);\n        props.load(input);\n      }\n    } catch (Throwable e) {\n      log.warn(\n          \"Could not read DIH properties from \" + path + \" :\" + e.getClass(), e);\n    }\n    return props;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["9fd2b0e0e1141e4851e1281c4955c7690b374c3b","f56da6f4f15d95f318d2d6ac2a39a9183dfecff2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":0,"author":"Ryan McKinley","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/ZKPropertiesWriter#readIndexerProperties().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Properties readIndexerProperties() {\n    Properties props = new Properties();\n    try {\n      byte[] data = zkClient.getData(path, null, null, false);\n      if (data != null) {\n        ByteArrayInputStream input = new ByteArrayInputStream(data);\n        props.load(input);\n      }\n    } catch (Throwable e) {\n      log.warn(\n          \"Could not read DIH properties from \" + path + \" :\" + e.getClass(), e);\n    }\n    return props;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b4804614e0358954d5d9f51128fcf3cd79e6e25b","date":1352831451,"type":3,"author":"James Dyer","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/ZKPropertiesWriter#readIndexerProperties().mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/ZKPropertiesWriter#readIndexerProperties().mjava","sourceNew":"  @Override\n  public Map<String, Object> readIndexerProperties() {\n    Properties props = new Properties();\n    try {\n      byte[] data = zkClient.getData(path, null, null, false);\n      if (data != null) {\n        ByteArrayInputStream input = new ByteArrayInputStream(data);\n        props.load(input);\n      }\n    } catch (Throwable e) {\n      log.warn(\n          \"Could not read DIH properties from \" + path + \" :\" + e.getClass(), e);\n    }\n    return propertiesToMap(props);\n  }\n\n","sourceOld":"  @Override\n  public Properties readIndexerProperties() {\n    Properties props = new Properties();\n    try {\n      byte[] data = zkClient.getData(path, null, null, false);\n      if (data != null) {\n        ByteArrayInputStream input = new ByteArrayInputStream(data);\n        props.load(input);\n      }\n    } catch (Throwable e) {\n      log.warn(\n          \"Could not read DIH properties from \" + path + \" :\" + e.getClass(), e);\n    }\n    return props;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/ZKPropertiesWriter#readIndexerProperties().mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/ZKPropertiesWriter#readIndexerProperties().mjava","sourceNew":"  @Override\n  public Map<String, Object> readIndexerProperties() {\n    Properties props = new Properties();\n    try {\n      byte[] data = zkClient.getData(path, null, null, false);\n      if (data != null) {\n        ByteArrayInputStream input = new ByteArrayInputStream(data);\n        props.load(input);\n      }\n    } catch (Throwable e) {\n      log.warn(\n          \"Could not read DIH properties from \" + path + \" :\" + e.getClass(), e);\n    }\n    return propertiesToMap(props);\n  }\n\n","sourceOld":"  @Override\n  public Properties readIndexerProperties() {\n    Properties props = new Properties();\n    try {\n      byte[] data = zkClient.getData(path, null, null, false);\n      if (data != null) {\n        ByteArrayInputStream input = new ByteArrayInputStream(data);\n        props.load(input);\n      }\n    } catch (Throwable e) {\n      log.warn(\n          \"Could not read DIH properties from \" + path + \" :\" + e.getClass(), e);\n    }\n    return props;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1fd8fc50365ae7bb9c0d47256bc40182559b70d1","date":1373649022,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/ZKPropertiesWriter#readIndexerProperties().mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/ZKPropertiesWriter#readIndexerProperties().mjava","sourceNew":"  @Override\n  public Map<String, Object> readIndexerProperties() {\n    Properties props = new Properties();\n    try {\n      byte[] data = zkClient.getData(path, null, null, false);\n      if (data != null) {\n        props.load(new StringReader(new String(data, \"UTF-8\")));\n      }\n    } catch (Throwable e) {\n      log.warn(\n          \"Could not read DIH properties from \" + path + \" :\" + e.getClass(), e);\n    }\n    return propertiesToMap(props);\n  }\n\n","sourceOld":"  @Override\n  public Map<String, Object> readIndexerProperties() {\n    Properties props = new Properties();\n    try {\n      byte[] data = zkClient.getData(path, null, null, false);\n      if (data != null) {\n        ByteArrayInputStream input = new ByteArrayInputStream(data);\n        props.load(input);\n      }\n    } catch (Throwable e) {\n      log.warn(\n          \"Could not read DIH properties from \" + path + \" :\" + e.getClass(), e);\n    }\n    return propertiesToMap(props);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/ZKPropertiesWriter#readIndexerProperties().mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/ZKPropertiesWriter#readIndexerProperties().mjava","sourceNew":"  @Override\n  public Map<String, Object> readIndexerProperties() {\n    Properties props = new Properties();\n    try {\n      byte[] data = zkClient.getData(path, null, null, false);\n      if (data != null) {\n        props.load(new StringReader(new String(data, \"UTF-8\")));\n      }\n    } catch (Throwable e) {\n      log.warn(\n          \"Could not read DIH properties from \" + path + \" :\" + e.getClass(), e);\n    }\n    return propertiesToMap(props);\n  }\n\n","sourceOld":"  @Override\n  public Map<String, Object> readIndexerProperties() {\n    Properties props = new Properties();\n    try {\n      byte[] data = zkClient.getData(path, null, null, false);\n      if (data != null) {\n        ByteArrayInputStream input = new ByteArrayInputStream(data);\n        props.load(input);\n      }\n    } catch (Throwable e) {\n      log.warn(\n          \"Could not read DIH properties from \" + path + \" :\" + e.getClass(), e);\n    }\n    return propertiesToMap(props);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f56da6f4f15d95f318d2d6ac2a39a9183dfecff2","date":1389633998,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/ZKPropertiesWriter#readIndexerProperties().mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/ZKPropertiesWriter#readIndexerProperties().mjava","sourceNew":"  @Override\n  public Map<String, Object> readIndexerProperties() {\n    Properties props = new Properties();\n    try {\n      byte[] data = zkClient.getData(path, null, null, false);\n      if (data != null) {\n        props.load(new StringReader(new String(data, \"UTF-8\")));\n      }\n    } catch (Exception e) {\n      log.warn(\n          \"Could not read DIH properties from \" + path + \" :\" + e.getClass(), e);\n    }\n    return propertiesToMap(props);\n  }\n\n","sourceOld":"  @Override\n  public Map<String, Object> readIndexerProperties() {\n    Properties props = new Properties();\n    try {\n      byte[] data = zkClient.getData(path, null, null, false);\n      if (data != null) {\n        props.load(new StringReader(new String(data, \"UTF-8\")));\n      }\n    } catch (Throwable e) {\n      log.warn(\n          \"Could not read DIH properties from \" + path + \" :\" + e.getClass(), e);\n    }\n    return propertiesToMap(props);\n  }\n\n","bugFix":["b2a6913ca906832d1ef58d72498167acb00a7e4f"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9d3d365762604952e436b51980101dfc84cc1b3e","date":1396298116,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/ZKPropertiesWriter#readIndexerProperties().mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/ZKPropertiesWriter#readIndexerProperties().mjava","sourceNew":"  @Override\n  public Map<String, Object> readIndexerProperties() {\n    Properties props = new Properties();\n    try {\n      byte[] data = zkClient.getData(path, null, null, false);\n      if (data != null) {\n        props.load(new StringReader(new String(data, StandardCharsets.UTF_8)));\n      }\n    } catch (Exception e) {\n      log.warn(\n          \"Could not read DIH properties from \" + path + \" :\" + e.getClass(), e);\n    }\n    return propertiesToMap(props);\n  }\n\n","sourceOld":"  @Override\n  public Map<String, Object> readIndexerProperties() {\n    Properties props = new Properties();\n    try {\n      byte[] data = zkClient.getData(path, null, null, false);\n      if (data != null) {\n        props.load(new StringReader(new String(data, \"UTF-8\")));\n      }\n    } catch (Exception e) {\n      log.warn(\n          \"Could not read DIH properties from \" + path + \" :\" + e.getClass(), e);\n    }\n    return propertiesToMap(props);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/ZKPropertiesWriter#readIndexerProperties().mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/ZKPropertiesWriter#readIndexerProperties().mjava","sourceNew":"  @Override\n  public Map<String, Object> readIndexerProperties() {\n    Properties props = new Properties();\n    try {\n      byte[] data = zkClient.getData(path, null, null, false);\n      if (data != null) {\n        props.load(new StringReader(new String(data, StandardCharsets.UTF_8)));\n      }\n    } catch (Exception e) {\n      log.warn(\n          \"Could not read DIH properties from \" + path + \" :\" + e.getClass(), e);\n    }\n    return propertiesToMap(props);\n  }\n\n","sourceOld":"  @Override\n  public Map<String, Object> readIndexerProperties() {\n    Properties props = new Properties();\n    try {\n      byte[] data = zkClient.getData(path, null, null, false);\n      if (data != null) {\n        props.load(new StringReader(new String(data, \"UTF-8\")));\n      }\n    } catch (Exception e) {\n      log.warn(\n          \"Could not read DIH properties from \" + path + \" :\" + e.getClass(), e);\n    }\n    return propertiesToMap(props);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9fd2b0e0e1141e4851e1281c4955c7690b374c3b","date":1474031826,"type":3,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/ZKPropertiesWriter#readIndexerProperties().mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/ZKPropertiesWriter#readIndexerProperties().mjava","sourceNew":"  @Override\n  public Map<String, Object> readIndexerProperties() {\n    Properties props = new Properties();\n    try {\n      byte[] data = zkClient.getData(path, null, null, true);\n      if (data != null) {\n        props.load(new StringReader(new String(data, StandardCharsets.UTF_8)));\n      }\n    } catch (Exception e) {\n      SolrZkClient.checkInterrupted(e);\n      log.warn(\"Could not read DIH properties from \" + path + \" :\" + e.getClass(), e);\n    }\n    return propertiesToMap(props);\n  }\n\n","sourceOld":"  @Override\n  public Map<String, Object> readIndexerProperties() {\n    Properties props = new Properties();\n    try {\n      byte[] data = zkClient.getData(path, null, null, false);\n      if (data != null) {\n        props.load(new StringReader(new String(data, StandardCharsets.UTF_8)));\n      }\n    } catch (Exception e) {\n      log.warn(\n          \"Could not read DIH properties from \" + path + \" :\" + e.getClass(), e);\n    }\n    return propertiesToMap(props);\n  }\n\n","bugFix":["b2a6913ca906832d1ef58d72498167acb00a7e4f"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/ZKPropertiesWriter#readIndexerProperties().mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/ZKPropertiesWriter#readIndexerProperties().mjava","sourceNew":"  @Override\n  public Map<String, Object> readIndexerProperties() {\n    Properties props = new Properties();\n    try {\n      byte[] data = zkClient.getData(path, null, null, true);\n      if (data != null) {\n        props.load(new StringReader(new String(data, StandardCharsets.UTF_8)));\n      }\n    } catch (Exception e) {\n      SolrZkClient.checkInterrupted(e);\n      log.warn(\"Could not read DIH properties from \" + path + \" :\" + e.getClass(), e);\n    }\n    return propertiesToMap(props);\n  }\n\n","sourceOld":"  @Override\n  public Map<String, Object> readIndexerProperties() {\n    Properties props = new Properties();\n    try {\n      byte[] data = zkClient.getData(path, null, null, false);\n      if (data != null) {\n        props.load(new StringReader(new String(data, StandardCharsets.UTF_8)));\n      }\n    } catch (Exception e) {\n      log.warn(\n          \"Could not read DIH properties from \" + path + \" :\" + e.getClass(), e);\n    }\n    return propertiesToMap(props);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/ZKPropertiesWriter#readIndexerProperties().mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/ZKPropertiesWriter#readIndexerProperties().mjava","sourceNew":"  @Override\n  public Map<String, Object> readIndexerProperties() {\n    Properties props = new Properties();\n    try {\n      byte[] data = zkClient.getData(path, null, null, true);\n      if (data != null) {\n        props.load(new StringReader(new String(data, StandardCharsets.UTF_8)));\n      }\n    } catch (Exception e) {\n      SolrZkClient.checkInterrupted(e);\n      log.warn(\"Could not read DIH properties from \" + path + \" :\" + e.getClass(), e);\n    }\n    return propertiesToMap(props);\n  }\n\n","sourceOld":"  @Override\n  public Map<String, Object> readIndexerProperties() {\n    Properties props = new Properties();\n    try {\n      byte[] data = zkClient.getData(path, null, null, false);\n      if (data != null) {\n        props.load(new StringReader(new String(data, StandardCharsets.UTF_8)));\n      }\n    } catch (Exception e) {\n      log.warn(\n          \"Could not read DIH properties from \" + path + \" :\" + e.getClass(), e);\n    }\n    return propertiesToMap(props);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a966532d92cf9ba2856f15a8140151bb6b518e4b","date":1588290631,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/ZKPropertiesWriter#readIndexerProperties().mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/ZKPropertiesWriter#readIndexerProperties().mjava","sourceNew":"  @Override\n  public Map<String, Object> readIndexerProperties() {\n    Properties props = new Properties();\n    try {\n      byte[] data = zkClient.getData(path, null, null, true);\n      if (data != null) {\n        props.load(new StringReader(new String(data, StandardCharsets.UTF_8)));\n      }\n    } catch (Exception e) {\n      SolrZkClient.checkInterrupted(e);\n      log.warn(\"Could not read DIH properties from {} : {}\", path, e.getClass(), e);\n    }\n    return propertiesToMap(props);\n  }\n\n","sourceOld":"  @Override\n  public Map<String, Object> readIndexerProperties() {\n    Properties props = new Properties();\n    try {\n      byte[] data = zkClient.getData(path, null, null, true);\n      if (data != null) {\n        props.load(new StringReader(new String(data, StandardCharsets.UTF_8)));\n      }\n    } catch (Exception e) {\n      SolrZkClient.checkInterrupted(e);\n      log.warn(\"Could not read DIH properties from \" + path + \" :\" + e.getClass(), e);\n    }\n    return propertiesToMap(props);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b","date":1598712724,"type":4,"author":"Alexandre Rafalovitch","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/ZKPropertiesWriter#readIndexerProperties().mjava","sourceNew":null,"sourceOld":"  @Override\n  public Map<String, Object> readIndexerProperties() {\n    Properties props = new Properties();\n    try {\n      byte[] data = zkClient.getData(path, null, null, true);\n      if (data != null) {\n        props.load(new StringReader(new String(data, StandardCharsets.UTF_8)));\n      }\n    } catch (Exception e) {\n      SolrZkClient.checkInterrupted(e);\n      log.warn(\"Could not read DIH properties from {} : {}\", path, e.getClass(), e);\n    }\n    return propertiesToMap(props);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5eb2511ababf862ea11e10761c70ee560cd84510":["f56da6f4f15d95f318d2d6ac2a39a9183dfecff2","9d3d365762604952e436b51980101dfc84cc1b3e"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["b4804614e0358954d5d9f51128fcf3cd79e6e25b","1fd8fc50365ae7bb9c0d47256bc40182559b70d1"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b2a6913ca906832d1ef58d72498167acb00a7e4f"],"407687e67faf6e1f02a211ca078d8e3eed631027":["b2a6913ca906832d1ef58d72498167acb00a7e4f","b4804614e0358954d5d9f51128fcf3cd79e6e25b"],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"1fd8fc50365ae7bb9c0d47256bc40182559b70d1":["b4804614e0358954d5d9f51128fcf3cd79e6e25b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["9d3d365762604952e436b51980101dfc84cc1b3e","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"b4804614e0358954d5d9f51128fcf3cd79e6e25b":["b2a6913ca906832d1ef58d72498167acb00a7e4f"],"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["a966532d92cf9ba2856f15a8140151bb6b518e4b"],"b2a6913ca906832d1ef58d72498167acb00a7e4f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9d3d365762604952e436b51980101dfc84cc1b3e":["f56da6f4f15d95f318d2d6ac2a39a9183dfecff2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["9d3d365762604952e436b51980101dfc84cc1b3e","9fd2b0e0e1141e4851e1281c4955c7690b374c3b"],"9fd2b0e0e1141e4851e1281c4955c7690b374c3b":["9d3d365762604952e436b51980101dfc84cc1b3e"],"f56da6f4f15d95f318d2d6ac2a39a9183dfecff2":["1fd8fc50365ae7bb9c0d47256bc40182559b70d1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b"]},"commit2Childs":{"5eb2511ababf862ea11e10761c70ee560cd84510":[],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b"],"1fd8fc50365ae7bb9c0d47256bc40182559b70d1":["37a0f60745e53927c4c876cfe5b5a58170f0646c","f56da6f4f15d95f318d2d6ac2a39a9183dfecff2"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"b4804614e0358954d5d9f51128fcf3cd79e6e25b":["37a0f60745e53927c4c876cfe5b5a58170f0646c","407687e67faf6e1f02a211ca078d8e3eed631027","1fd8fc50365ae7bb9c0d47256bc40182559b70d1"],"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b2a6913ca906832d1ef58d72498167acb00a7e4f":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","407687e67faf6e1f02a211ca078d8e3eed631027","b4804614e0358954d5d9f51128fcf3cd79e6e25b"],"9d3d365762604952e436b51980101dfc84cc1b3e":["5eb2511ababf862ea11e10761c70ee560cd84510","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","17e5da53e4e5bd659e22add9bba1cfa222e7e30d","9fd2b0e0e1141e4851e1281c4955c7690b374c3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","b2a6913ca906832d1ef58d72498167acb00a7e4f"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["a966532d92cf9ba2856f15a8140151bb6b518e4b","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"9fd2b0e0e1141e4851e1281c4955c7690b374c3b":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"f56da6f4f15d95f318d2d6ac2a39a9183dfecff2":["5eb2511ababf862ea11e10761c70ee560cd84510","9d3d365762604952e436b51980101dfc84cc1b3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","37a0f60745e53927c4c876cfe5b5a58170f0646c","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","407687e67faf6e1f02a211ca078d8e3eed631027","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}