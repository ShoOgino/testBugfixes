{"path":"solr/core/src/test/org/apache/solr/core/TestSolrConfigHandler#testForResponseElement(RestTestHarness,String,String,CloudSolrClient,List[String],String,long).mjava","commits":[{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrConfigHandler#testForResponseElement(RestTestHarness,String,String,CloudSolrClient,List[String],String,long).mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestSolrConfigHandler#testForResponseElement(RestTestHarness,String,String,CloudSolrServer,List[String],String,long).mjava","sourceNew":"  public static void testForResponseElement(RestTestHarness harness,\n                                            String testServerBaseUrl,\n                                            String uri,\n                                            CloudSolrClient cloudSolrServer,List<String> jsonPath,\n                                            String expected,\n                                            long maxTimeoutSeconds ) throws Exception {\n\n    boolean success = false;\n    long startTime = System.nanoTime();\n    Map m = null;\n\n    while ( TimeUnit.SECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutSeconds) {\n      try {\n        m = testServerBaseUrl ==null?  getRespMap(uri,harness) : TestSolrConfigHandlerConcurrent.getAsMap(testServerBaseUrl + uri, cloudSolrServer) ;\n      } catch (Exception e) {\n        Thread.sleep(100);\n        continue;\n\n      }\n      if(Objects.equals(expected,ConfigOverlay.getObjectByPath(m, false, jsonPath))) {\n        success = true;\n        break;\n      }\n      Thread.sleep(100);\n\n    }\n\n    assertTrue(MessageFormat.format(\"Could not get expected value  {0} for path {1} full output {2}\", expected, jsonPath, new String(ZkStateReader.toJSON(m), StandardCharsets.UTF_8)), success);\n  }\n\n","sourceOld":"  public static void testForResponseElement(RestTestHarness harness,\n                                            String testServerBaseUrl,\n                                            String uri,\n                                            CloudSolrServer cloudSolrServer,List<String> jsonPath,\n                                            String expected,\n                                            long maxTimeoutSeconds ) throws Exception {\n\n    boolean success = false;\n    long startTime = System.nanoTime();\n    Map m = null;\n\n    while ( TimeUnit.SECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutSeconds) {\n      try {\n        m = testServerBaseUrl ==null?  getRespMap(uri,harness) : TestSolrConfigHandlerConcurrent.getAsMap(testServerBaseUrl + uri, cloudSolrServer) ;\n      } catch (Exception e) {\n        Thread.sleep(100);\n        continue;\n\n      }\n      if(Objects.equals(expected,ConfigOverlay.getObjectByPath(m, false, jsonPath))) {\n        success = true;\n        break;\n      }\n      Thread.sleep(100);\n\n    }\n\n    assertTrue(MessageFormat.format(\"Could not get expected value  {0} for path {1} full output {2}\", expected, jsonPath, new String(ZkStateReader.toJSON(m), StandardCharsets.UTF_8)), success);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bf5d1e2ebf4d31138a7dea67029f32e53f8ae821","date":1420627779,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrConfigHandler#testForResponseElement(RestTestHarness,String,String,CloudSolrClient,List[String],String,long).mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestSolrConfigHandler#testForResponseElement(RestTestHarness,String,String,CloudSolrClient,List[String],String,long).mjava","sourceNew":"  public static void testForResponseElement(RestTestHarness harness,\n                                            String testServerBaseUrl,\n                                            String uri,\n                                            CloudSolrClient cloudSolrServer,List<String> jsonPath,\n                                            String expected,\n                                            long maxTimeoutSeconds ) throws Exception {\n\n    boolean success = false;\n    long startTime = System.nanoTime();\n    Map m = null;\n\n    while ( TimeUnit.SECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutSeconds) {\n      try {\n        m = testServerBaseUrl ==null?  getRespMap(uri,harness) : TestSolrConfigHandlerConcurrent.getAsMap(testServerBaseUrl + uri, cloudSolrServer) ;\n      } catch (Exception e) {\n        Thread.sleep(100);\n        continue;\n\n      }\n      if(Objects.equals(expected,ConfigOverlay.getObjectByPath(m, false, jsonPath))) {\n        success = true;\n        break;\n      }\n      Thread.sleep(100);\n\n    }\n\n    assertTrue(MessageFormat.format(\"Could not get expected value  {0} for path {1} full output {2}\", expected, jsonPath, getAsString(m)), success);\n  }\n\n","sourceOld":"  public static void testForResponseElement(RestTestHarness harness,\n                                            String testServerBaseUrl,\n                                            String uri,\n                                            CloudSolrClient cloudSolrServer,List<String> jsonPath,\n                                            String expected,\n                                            long maxTimeoutSeconds ) throws Exception {\n\n    boolean success = false;\n    long startTime = System.nanoTime();\n    Map m = null;\n\n    while ( TimeUnit.SECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutSeconds) {\n      try {\n        m = testServerBaseUrl ==null?  getRespMap(uri,harness) : TestSolrConfigHandlerConcurrent.getAsMap(testServerBaseUrl + uri, cloudSolrServer) ;\n      } catch (Exception e) {\n        Thread.sleep(100);\n        continue;\n\n      }\n      if(Objects.equals(expected,ConfigOverlay.getObjectByPath(m, false, jsonPath))) {\n        success = true;\n        break;\n      }\n      Thread.sleep(100);\n\n    }\n\n    assertTrue(MessageFormat.format(\"Could not get expected value  {0} for path {1} full output {2}\", expected, jsonPath, new String(ZkStateReader.toJSON(m), StandardCharsets.UTF_8)), success);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"262fe6f976cbf6dc45e8e1975fb04dd1b3d99149","date":1421139923,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrConfigHandler#testForResponseElement(RestTestHarness,String,String,CloudSolrClient,List[String],String,long).mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestSolrConfigHandler#testForResponseElement(RestTestHarness,String,String,CloudSolrClient,List[String],String,long).mjava","sourceNew":"  public static Map testForResponseElement(RestTestHarness harness,\n                                            String testServerBaseUrl,\n                                            String uri,\n                                            CloudSolrClient cloudSolrServer,List<String> jsonPath,\n                                            String expected,\n                                            long maxTimeoutSeconds ) throws Exception {\n\n    boolean success = false;\n    long startTime = System.nanoTime();\n    Map m = null;\n\n    while ( TimeUnit.SECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutSeconds) {\n      try {\n        m = testServerBaseUrl ==null?  getRespMap(uri,harness) : TestSolrConfigHandlerConcurrent.getAsMap(testServerBaseUrl + uri, cloudSolrServer) ;\n      } catch (Exception e) {\n        Thread.sleep(100);\n        continue;\n\n      }\n      if(Objects.equals(expected,ConfigOverlay.getObjectByPath(m, false, jsonPath))) {\n        success = true;\n        break;\n      }\n      Thread.sleep(100);\n\n    }\n\n    assertTrue(MessageFormat.format(\"Could not get expected value  {0} for path {1} full output {2}\", expected, jsonPath, getAsString(m)), success);\n    return m;\n  }\n\n","sourceOld":"  public static void testForResponseElement(RestTestHarness harness,\n                                            String testServerBaseUrl,\n                                            String uri,\n                                            CloudSolrClient cloudSolrServer,List<String> jsonPath,\n                                            String expected,\n                                            long maxTimeoutSeconds ) throws Exception {\n\n    boolean success = false;\n    long startTime = System.nanoTime();\n    Map m = null;\n\n    while ( TimeUnit.SECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutSeconds) {\n      try {\n        m = testServerBaseUrl ==null?  getRespMap(uri,harness) : TestSolrConfigHandlerConcurrent.getAsMap(testServerBaseUrl + uri, cloudSolrServer) ;\n      } catch (Exception e) {\n        Thread.sleep(100);\n        continue;\n\n      }\n      if(Objects.equals(expected,ConfigOverlay.getObjectByPath(m, false, jsonPath))) {\n        success = true;\n        break;\n      }\n      Thread.sleep(100);\n\n    }\n\n    assertTrue(MessageFormat.format(\"Could not get expected value  {0} for path {1} full output {2}\", expected, jsonPath, getAsString(m)), success);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"27785308abb8944af28e85eeacd67a8db055dd76","date":1421424050,"type":5,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrConfigHandler#testForResponseElement(RestTestHarness,String,String,CloudSolrClient,List[String],Object,long).mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestSolrConfigHandler#testForResponseElement(RestTestHarness,String,String,CloudSolrClient,List[String],String,long).mjava","sourceNew":"  public static Map testForResponseElement(RestTestHarness harness,\n                                            String testServerBaseUrl,\n                                            String uri,\n                                            CloudSolrClient cloudSolrServer,List<String> jsonPath,\n                                            Object expected,\n                                            long maxTimeoutSeconds ) throws Exception {\n\n    boolean success = false;\n    long startTime = System.nanoTime();\n    Map m = null;\n\n    while ( TimeUnit.SECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutSeconds) {\n      try {\n        m = testServerBaseUrl ==null?  getRespMap(uri,harness) : TestSolrConfigHandlerConcurrent.getAsMap(testServerBaseUrl + uri, cloudSolrServer) ;\n      } catch (Exception e) {\n        Thread.sleep(100);\n        continue;\n\n      }\n      if(Objects.equals(expected,ConfigOverlay.getObjectByPath(m, false, jsonPath))) {\n        success = true;\n        break;\n      }\n      Thread.sleep(100);\n\n    }\n\n    assertTrue(MessageFormat.format(\"Could not get expected value  {0} for path {1} full output {2}\", expected, jsonPath, getAsString(m)), success);\n    return m;\n  }\n\n","sourceOld":"  public static Map testForResponseElement(RestTestHarness harness,\n                                            String testServerBaseUrl,\n                                            String uri,\n                                            CloudSolrClient cloudSolrServer,List<String> jsonPath,\n                                            String expected,\n                                            long maxTimeoutSeconds ) throws Exception {\n\n    boolean success = false;\n    long startTime = System.nanoTime();\n    Map m = null;\n\n    while ( TimeUnit.SECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutSeconds) {\n      try {\n        m = testServerBaseUrl ==null?  getRespMap(uri,harness) : TestSolrConfigHandlerConcurrent.getAsMap(testServerBaseUrl + uri, cloudSolrServer) ;\n      } catch (Exception e) {\n        Thread.sleep(100);\n        continue;\n\n      }\n      if(Objects.equals(expected,ConfigOverlay.getObjectByPath(m, false, jsonPath))) {\n        success = true;\n        break;\n      }\n      Thread.sleep(100);\n\n    }\n\n    assertTrue(MessageFormat.format(\"Could not get expected value  {0} for path {1} full output {2}\", expected, jsonPath, getAsString(m)), success);\n    return m;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"27785308abb8944af28e85eeacd67a8db055dd76":["262fe6f976cbf6dc45e8e1975fb04dd1b3d99149"],"262fe6f976cbf6dc45e8e1975fb04dd1b3d99149":["bf5d1e2ebf4d31138a7dea67029f32e53f8ae821"],"bf5d1e2ebf4d31138a7dea67029f32e53f8ae821":["bafca15d8e408346a67f4282ad1143b88023893b"],"bafca15d8e408346a67f4282ad1143b88023893b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["27785308abb8944af28e85eeacd67a8db055dd76"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bafca15d8e408346a67f4282ad1143b88023893b"],"27785308abb8944af28e85eeacd67a8db055dd76":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"262fe6f976cbf6dc45e8e1975fb04dd1b3d99149":["27785308abb8944af28e85eeacd67a8db055dd76"],"bf5d1e2ebf4d31138a7dea67029f32e53f8ae821":["262fe6f976cbf6dc45e8e1975fb04dd1b3d99149"],"bafca15d8e408346a67f4282ad1143b88023893b":["bf5d1e2ebf4d31138a7dea67029f32e53f8ae821"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}