{"path":"lucene/core/src/test/org/apache/lucene/index/Test4GBStoredFields#test().mjava","commits":[{"id":"6d7e3780e3c6b6833ee8767982863b015de84daf","date":1349884751,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/Test4GBStoredFields#test().mjava","pathOld":"/dev/null","sourceNew":"  @Nightly\n  public void test() throws Exception {\n    BaseDirectoryWrapper dir = newFSDirectory(_TestUtil.getTempDir(\"4GBStoredFields\"));\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setThrottling(MockDirectoryWrapper.Throttling.NEVER);\n    }\n    dir.setCheckIndexOnClose(false); // don't double-checkindex\n\n    IndexWriter w = new IndexWriter(dir,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n        .setRAMBufferSizeMB(256.0)\n        .setMergeScheduler(new ConcurrentMergeScheduler())\n        .setMergePolicy(newLogMergePolicy(false, 10))\n        .setOpenMode(IndexWriterConfig.OpenMode.CREATE));\n\n    MergePolicy mp = w.getConfig().getMergePolicy();\n    if (mp instanceof LogByteSizeMergePolicy) {\n     // 1 petabyte:\n     ((LogByteSizeMergePolicy) mp).setMaxMergeMB(1024*1024*1024);\n    }\n\n    final Document doc = new Document();\n    final FieldType ft = new FieldType();\n    ft.setIndexed(false);\n    ft.setStored(true);\n    ft.freeze();\n    final int valueLength = RandomInts.randomIntBetween(random(), 1 << 13, 1 << 20);\n    final byte[] value = new byte[valueLength];\n    for (int i = 0; i < valueLength; ++i) {\n      // random so that even compressing codecs can't compress it\n      value[i] = (byte) random().nextInt(256);\n    }\n    final Field f = new Field(\"fld\", value, ft);\n    doc.add(f);\n\n    final int numDocs = (int) ((1L << 32) / valueLength + 100);\n    for (int i = 0; i < numDocs; ++i) {\n      w.addDocument(doc);\n      if (VERBOSE && i % (numDocs / 10) == 0) {\n        System.out.println(i + \" of \" + numDocs + \"...\");\n      }\n    }\n    w.forceMerge(1);\n    w.close();\n    if (VERBOSE) {\n      boolean found = false;\n      for (String file : dir.listAll()) {\n        if (file.endsWith(\".fdt\")) {\n          final long fileLength = dir.fileLength(file);\n          if (fileLength >= 1L << 32) {\n            found = true;\n          }\n          System.out.println(\"File length of \" + file + \" : \" + fileLength);\n        }\n      }\n      if (!found) {\n        System.out.println(\"No .fdt file larger than 4GB, test bug?\");\n      }\n    }\n\n    CheckIndex ci = new CheckIndex(dir);\n    if (VERBOSE) {\n      ci.setInfoStream(System.out);\n    }\n    ci.checkIndex();\n\n    DirectoryReader rd = DirectoryReader.open(dir);\n    StoredDocument sd = rd.document(numDocs - 1);\n    assertNotNull(sd);\n    assertEquals(1, sd.getFields().size());\n    BytesRef valueRef = sd.getBinaryValue(\"fld\");\n    assertNotNull(valueRef);\n    assertEquals(new BytesRef(value), valueRef);\n    rd.close();\n\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8868d972a8be9163a60a65388327ef478e97016","date":1350972073,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/Test4GBStoredFields#test().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/Test4GBStoredFields#test().mjava","sourceNew":"  @Nightly\n  public void test() throws Exception {\n    MockDirectoryWrapper dir = new MockDirectoryWrapper(random(), new MMapDirectory(_TestUtil.getTempDir(\"4GBStoredFields\")));\n    dir.setThrottling(MockDirectoryWrapper.Throttling.NEVER);\n\n    IndexWriter w = new IndexWriter(dir,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n        .setRAMBufferSizeMB(256.0)\n        .setMergeScheduler(new ConcurrentMergeScheduler())\n        .setMergePolicy(newLogMergePolicy(false, 10))\n        .setOpenMode(IndexWriterConfig.OpenMode.CREATE));\n\n    MergePolicy mp = w.getConfig().getMergePolicy();\n    if (mp instanceof LogByteSizeMergePolicy) {\n     // 1 petabyte:\n     ((LogByteSizeMergePolicy) mp).setMaxMergeMB(1024*1024*1024);\n    }\n\n    final Document doc = new Document();\n    final FieldType ft = new FieldType();\n    ft.setIndexed(false);\n    ft.setStored(true);\n    ft.freeze();\n    final int valueLength = RandomInts.randomIntBetween(random(), 1 << 13, 1 << 20);\n    final byte[] value = new byte[valueLength];\n    for (int i = 0; i < valueLength; ++i) {\n      // random so that even compressing codecs can't compress it\n      value[i] = (byte) random().nextInt(256);\n    }\n    final Field f = new Field(\"fld\", value, ft);\n    doc.add(f);\n\n    final int numDocs = (int) ((1L << 32) / valueLength + 100);\n    for (int i = 0; i < numDocs; ++i) {\n      w.addDocument(doc);\n      if (VERBOSE && i % (numDocs / 10) == 0) {\n        System.out.println(i + \" of \" + numDocs + \"...\");\n      }\n    }\n    w.forceMerge(1);\n    w.close();\n    if (VERBOSE) {\n      boolean found = false;\n      for (String file : dir.listAll()) {\n        if (file.endsWith(\".fdt\")) {\n          final long fileLength = dir.fileLength(file);\n          if (fileLength >= 1L << 32) {\n            found = true;\n          }\n          System.out.println(\"File length of \" + file + \" : \" + fileLength);\n        }\n      }\n      if (!found) {\n        System.out.println(\"No .fdt file larger than 4GB, test bug?\");\n      }\n    }\n\n    DirectoryReader rd = DirectoryReader.open(dir);\n    StoredDocument sd = rd.document(numDocs - 1);\n    assertNotNull(sd);\n    assertEquals(1, sd.getFields().size());\n    BytesRef valueRef = sd.getBinaryValue(\"fld\");\n    assertNotNull(valueRef);\n    assertEquals(new BytesRef(value), valueRef);\n    rd.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  @Nightly\n  public void test() throws Exception {\n    BaseDirectoryWrapper dir = newFSDirectory(_TestUtil.getTempDir(\"4GBStoredFields\"));\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setThrottling(MockDirectoryWrapper.Throttling.NEVER);\n    }\n    dir.setCheckIndexOnClose(false); // don't double-checkindex\n\n    IndexWriter w = new IndexWriter(dir,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n        .setRAMBufferSizeMB(256.0)\n        .setMergeScheduler(new ConcurrentMergeScheduler())\n        .setMergePolicy(newLogMergePolicy(false, 10))\n        .setOpenMode(IndexWriterConfig.OpenMode.CREATE));\n\n    MergePolicy mp = w.getConfig().getMergePolicy();\n    if (mp instanceof LogByteSizeMergePolicy) {\n     // 1 petabyte:\n     ((LogByteSizeMergePolicy) mp).setMaxMergeMB(1024*1024*1024);\n    }\n\n    final Document doc = new Document();\n    final FieldType ft = new FieldType();\n    ft.setIndexed(false);\n    ft.setStored(true);\n    ft.freeze();\n    final int valueLength = RandomInts.randomIntBetween(random(), 1 << 13, 1 << 20);\n    final byte[] value = new byte[valueLength];\n    for (int i = 0; i < valueLength; ++i) {\n      // random so that even compressing codecs can't compress it\n      value[i] = (byte) random().nextInt(256);\n    }\n    final Field f = new Field(\"fld\", value, ft);\n    doc.add(f);\n\n    final int numDocs = (int) ((1L << 32) / valueLength + 100);\n    for (int i = 0; i < numDocs; ++i) {\n      w.addDocument(doc);\n      if (VERBOSE && i % (numDocs / 10) == 0) {\n        System.out.println(i + \" of \" + numDocs + \"...\");\n      }\n    }\n    w.forceMerge(1);\n    w.close();\n    if (VERBOSE) {\n      boolean found = false;\n      for (String file : dir.listAll()) {\n        if (file.endsWith(\".fdt\")) {\n          final long fileLength = dir.fileLength(file);\n          if (fileLength >= 1L << 32) {\n            found = true;\n          }\n          System.out.println(\"File length of \" + file + \" : \" + fileLength);\n        }\n      }\n      if (!found) {\n        System.out.println(\"No .fdt file larger than 4GB, test bug?\");\n      }\n    }\n\n    CheckIndex ci = new CheckIndex(dir);\n    if (VERBOSE) {\n      ci.setInfoStream(System.out);\n    }\n    ci.checkIndex();\n\n    DirectoryReader rd = DirectoryReader.open(dir);\n    StoredDocument sd = rd.document(numDocs - 1);\n    assertNotNull(sd);\n    assertEquals(1, sd.getFields().size());\n    BytesRef valueRef = sd.getBinaryValue(\"fld\");\n    assertNotNull(valueRef);\n    assertEquals(new BytesRef(value), valueRef);\n    rd.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"62e52115b56781006682fd92c6938efaf174304d","date":1351014780,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/Test4GBStoredFields#test().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/Test4GBStoredFields#test().mjava","sourceNew":"  @Nightly\n  public void test() throws Exception {\n    MockDirectoryWrapper dir = new MockDirectoryWrapper(random(), new MMapDirectory(_TestUtil.getTempDir(\"4GBStoredFields\")));\n    dir.setThrottling(MockDirectoryWrapper.Throttling.NEVER);\n\n    IndexWriter w = new IndexWriter(dir,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n        .setRAMBufferSizeMB(256.0)\n        .setMergeScheduler(new ConcurrentMergeScheduler())\n        .setMergePolicy(newLogMergePolicy(false, 10))\n        .setOpenMode(IndexWriterConfig.OpenMode.CREATE));\n\n    MergePolicy mp = w.getConfig().getMergePolicy();\n    if (mp instanceof LogByteSizeMergePolicy) {\n     // 1 petabyte:\n     ((LogByteSizeMergePolicy) mp).setMaxMergeMB(1024*1024*1024);\n    }\n\n    final Document doc = new Document();\n    final FieldType ft = new FieldType();\n    ft.setIndexed(false);\n    ft.setStored(true);\n    ft.freeze();\n    final int valueLength = RandomInts.randomIntBetween(random(), 1 << 13, 1 << 20);\n    final byte[] value = new byte[valueLength];\n    for (int i = 0; i < valueLength; ++i) {\n      // random so that even compressing codecs can't compress it\n      value[i] = (byte) random().nextInt(256);\n    }\n    final Field f = new Field(\"fld\", value, ft);\n    doc.add(f);\n\n    final int numDocs = (int) ((1L << 32) / valueLength + 100);\n    for (int i = 0; i < numDocs; ++i) {\n      w.addDocument(doc);\n      if (VERBOSE && i % (numDocs / 10) == 0) {\n        System.out.println(i + \" of \" + numDocs + \"...\");\n      }\n    }\n    w.forceMerge(1);\n    w.close();\n    if (VERBOSE) {\n      boolean found = false;\n      for (String file : dir.listAll()) {\n        if (file.endsWith(\".fdt\")) {\n          final long fileLength = dir.fileLength(file);\n          if (fileLength >= 1L << 32) {\n            found = true;\n          }\n          System.out.println(\"File length of \" + file + \" : \" + fileLength);\n        }\n      }\n      if (!found) {\n        System.out.println(\"No .fdt file larger than 4GB, test bug?\");\n      }\n    }\n\n    DirectoryReader rd = DirectoryReader.open(dir);\n    StoredDocument sd = rd.document(numDocs - 1);\n    assertNotNull(sd);\n    assertEquals(1, sd.getFields().size());\n    BytesRef valueRef = sd.getBinaryValue(\"fld\");\n    assertNotNull(valueRef);\n    assertEquals(new BytesRef(value), valueRef);\n    rd.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  @Nightly\n  public void test() throws Exception {\n    BaseDirectoryWrapper dir = newFSDirectory(_TestUtil.getTempDir(\"4GBStoredFields\"));\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setThrottling(MockDirectoryWrapper.Throttling.NEVER);\n    }\n    dir.setCheckIndexOnClose(false); // don't double-checkindex\n\n    IndexWriter w = new IndexWriter(dir,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n        .setRAMBufferSizeMB(256.0)\n        .setMergeScheduler(new ConcurrentMergeScheduler())\n        .setMergePolicy(newLogMergePolicy(false, 10))\n        .setOpenMode(IndexWriterConfig.OpenMode.CREATE));\n\n    MergePolicy mp = w.getConfig().getMergePolicy();\n    if (mp instanceof LogByteSizeMergePolicy) {\n     // 1 petabyte:\n     ((LogByteSizeMergePolicy) mp).setMaxMergeMB(1024*1024*1024);\n    }\n\n    final Document doc = new Document();\n    final FieldType ft = new FieldType();\n    ft.setIndexed(false);\n    ft.setStored(true);\n    ft.freeze();\n    final int valueLength = RandomInts.randomIntBetween(random(), 1 << 13, 1 << 20);\n    final byte[] value = new byte[valueLength];\n    for (int i = 0; i < valueLength; ++i) {\n      // random so that even compressing codecs can't compress it\n      value[i] = (byte) random().nextInt(256);\n    }\n    final Field f = new Field(\"fld\", value, ft);\n    doc.add(f);\n\n    final int numDocs = (int) ((1L << 32) / valueLength + 100);\n    for (int i = 0; i < numDocs; ++i) {\n      w.addDocument(doc);\n      if (VERBOSE && i % (numDocs / 10) == 0) {\n        System.out.println(i + \" of \" + numDocs + \"...\");\n      }\n    }\n    w.forceMerge(1);\n    w.close();\n    if (VERBOSE) {\n      boolean found = false;\n      for (String file : dir.listAll()) {\n        if (file.endsWith(\".fdt\")) {\n          final long fileLength = dir.fileLength(file);\n          if (fileLength >= 1L << 32) {\n            found = true;\n          }\n          System.out.println(\"File length of \" + file + \" : \" + fileLength);\n        }\n      }\n      if (!found) {\n        System.out.println(\"No .fdt file larger than 4GB, test bug?\");\n      }\n    }\n\n    CheckIndex ci = new CheckIndex(dir);\n    if (VERBOSE) {\n      ci.setInfoStream(System.out);\n    }\n    ci.checkIndex();\n\n    DirectoryReader rd = DirectoryReader.open(dir);\n    StoredDocument sd = rd.document(numDocs - 1);\n    assertNotNull(sd);\n    assertEquals(1, sd.getFields().size());\n    BytesRef valueRef = sd.getBinaryValue(\"fld\");\n    assertNotNull(valueRef);\n    assertEquals(new BytesRef(value), valueRef);\n    rd.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/Test4GBStoredFields#test().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/Test4GBStoredFields#test().mjava","sourceNew":"  @Nightly\n  public void test() throws Exception {\n    MockDirectoryWrapper dir = new MockDirectoryWrapper(random(), new MMapDirectory(TestUtil.getTempDir(\"4GBStoredFields\")));\n    dir.setThrottling(MockDirectoryWrapper.Throttling.NEVER);\n\n    IndexWriter w = new IndexWriter(dir,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n        .setRAMBufferSizeMB(256.0)\n        .setMergeScheduler(new ConcurrentMergeScheduler())\n        .setMergePolicy(newLogMergePolicy(false, 10))\n        .setOpenMode(IndexWriterConfig.OpenMode.CREATE));\n\n    MergePolicy mp = w.getConfig().getMergePolicy();\n    if (mp instanceof LogByteSizeMergePolicy) {\n     // 1 petabyte:\n     ((LogByteSizeMergePolicy) mp).setMaxMergeMB(1024*1024*1024);\n    }\n\n    final Document doc = new Document();\n    final FieldType ft = new FieldType();\n    ft.setIndexed(false);\n    ft.setStored(true);\n    ft.freeze();\n    final int valueLength = RandomInts.randomIntBetween(random(), 1 << 13, 1 << 20);\n    final byte[] value = new byte[valueLength];\n    for (int i = 0; i < valueLength; ++i) {\n      // random so that even compressing codecs can't compress it\n      value[i] = (byte) random().nextInt(256);\n    }\n    final Field f = new Field(\"fld\", value, ft);\n    doc.add(f);\n\n    final int numDocs = (int) ((1L << 32) / valueLength + 100);\n    for (int i = 0; i < numDocs; ++i) {\n      w.addDocument(doc);\n      if (VERBOSE && i % (numDocs / 10) == 0) {\n        System.out.println(i + \" of \" + numDocs + \"...\");\n      }\n    }\n    w.forceMerge(1);\n    w.close();\n    if (VERBOSE) {\n      boolean found = false;\n      for (String file : dir.listAll()) {\n        if (file.endsWith(\".fdt\")) {\n          final long fileLength = dir.fileLength(file);\n          if (fileLength >= 1L << 32) {\n            found = true;\n          }\n          System.out.println(\"File length of \" + file + \" : \" + fileLength);\n        }\n      }\n      if (!found) {\n        System.out.println(\"No .fdt file larger than 4GB, test bug?\");\n      }\n    }\n\n    DirectoryReader rd = DirectoryReader.open(dir);\n    StoredDocument sd = rd.document(numDocs - 1);\n    assertNotNull(sd);\n    assertEquals(1, sd.getFields().size());\n    BytesRef valueRef = sd.getBinaryValue(\"fld\");\n    assertNotNull(valueRef);\n    assertEquals(new BytesRef(value), valueRef);\n    rd.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  @Nightly\n  public void test() throws Exception {\n    MockDirectoryWrapper dir = new MockDirectoryWrapper(random(), new MMapDirectory(_TestUtil.getTempDir(\"4GBStoredFields\")));\n    dir.setThrottling(MockDirectoryWrapper.Throttling.NEVER);\n\n    IndexWriter w = new IndexWriter(dir,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n        .setRAMBufferSizeMB(256.0)\n        .setMergeScheduler(new ConcurrentMergeScheduler())\n        .setMergePolicy(newLogMergePolicy(false, 10))\n        .setOpenMode(IndexWriterConfig.OpenMode.CREATE));\n\n    MergePolicy mp = w.getConfig().getMergePolicy();\n    if (mp instanceof LogByteSizeMergePolicy) {\n     // 1 petabyte:\n     ((LogByteSizeMergePolicy) mp).setMaxMergeMB(1024*1024*1024);\n    }\n\n    final Document doc = new Document();\n    final FieldType ft = new FieldType();\n    ft.setIndexed(false);\n    ft.setStored(true);\n    ft.freeze();\n    final int valueLength = RandomInts.randomIntBetween(random(), 1 << 13, 1 << 20);\n    final byte[] value = new byte[valueLength];\n    for (int i = 0; i < valueLength; ++i) {\n      // random so that even compressing codecs can't compress it\n      value[i] = (byte) random().nextInt(256);\n    }\n    final Field f = new Field(\"fld\", value, ft);\n    doc.add(f);\n\n    final int numDocs = (int) ((1L << 32) / valueLength + 100);\n    for (int i = 0; i < numDocs; ++i) {\n      w.addDocument(doc);\n      if (VERBOSE && i % (numDocs / 10) == 0) {\n        System.out.println(i + \" of \" + numDocs + \"...\");\n      }\n    }\n    w.forceMerge(1);\n    w.close();\n    if (VERBOSE) {\n      boolean found = false;\n      for (String file : dir.listAll()) {\n        if (file.endsWith(\".fdt\")) {\n          final long fileLength = dir.fileLength(file);\n          if (fileLength >= 1L << 32) {\n            found = true;\n          }\n          System.out.println(\"File length of \" + file + \" : \" + fileLength);\n        }\n      }\n      if (!found) {\n        System.out.println(\"No .fdt file larger than 4GB, test bug?\");\n      }\n    }\n\n    DirectoryReader rd = DirectoryReader.open(dir);\n    StoredDocument sd = rd.document(numDocs - 1);\n    assertNotNull(sd);\n    assertEquals(1, sd.getFields().size());\n    BytesRef valueRef = sd.getBinaryValue(\"fld\");\n    assertNotNull(valueRef);\n    assertEquals(new BytesRef(value), valueRef);\n    rd.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0d579490a72f2e6297eaa648940611234c57cf1","date":1395917140,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/Test4GBStoredFields#test().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/Test4GBStoredFields#test().mjava","sourceNew":"  @Nightly\n  public void test() throws Exception {\n    MockDirectoryWrapper dir = new MockDirectoryWrapper(random(), new MMapDirectory(TestUtil.createTempDir(\"4GBStoredFields\")));\n    dir.setThrottling(MockDirectoryWrapper.Throttling.NEVER);\n\n    IndexWriter w = new IndexWriter(dir,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n        .setRAMBufferSizeMB(256.0)\n        .setMergeScheduler(new ConcurrentMergeScheduler())\n        .setMergePolicy(newLogMergePolicy(false, 10))\n        .setOpenMode(IndexWriterConfig.OpenMode.CREATE));\n\n    MergePolicy mp = w.getConfig().getMergePolicy();\n    if (mp instanceof LogByteSizeMergePolicy) {\n     // 1 petabyte:\n     ((LogByteSizeMergePolicy) mp).setMaxMergeMB(1024*1024*1024);\n    }\n\n    final Document doc = new Document();\n    final FieldType ft = new FieldType();\n    ft.setIndexed(false);\n    ft.setStored(true);\n    ft.freeze();\n    final int valueLength = RandomInts.randomIntBetween(random(), 1 << 13, 1 << 20);\n    final byte[] value = new byte[valueLength];\n    for (int i = 0; i < valueLength; ++i) {\n      // random so that even compressing codecs can't compress it\n      value[i] = (byte) random().nextInt(256);\n    }\n    final Field f = new Field(\"fld\", value, ft);\n    doc.add(f);\n\n    final int numDocs = (int) ((1L << 32) / valueLength + 100);\n    for (int i = 0; i < numDocs; ++i) {\n      w.addDocument(doc);\n      if (VERBOSE && i % (numDocs / 10) == 0) {\n        System.out.println(i + \" of \" + numDocs + \"...\");\n      }\n    }\n    w.forceMerge(1);\n    w.close();\n    if (VERBOSE) {\n      boolean found = false;\n      for (String file : dir.listAll()) {\n        if (file.endsWith(\".fdt\")) {\n          final long fileLength = dir.fileLength(file);\n          if (fileLength >= 1L << 32) {\n            found = true;\n          }\n          System.out.println(\"File length of \" + file + \" : \" + fileLength);\n        }\n      }\n      if (!found) {\n        System.out.println(\"No .fdt file larger than 4GB, test bug?\");\n      }\n    }\n\n    DirectoryReader rd = DirectoryReader.open(dir);\n    StoredDocument sd = rd.document(numDocs - 1);\n    assertNotNull(sd);\n    assertEquals(1, sd.getFields().size());\n    BytesRef valueRef = sd.getBinaryValue(\"fld\");\n    assertNotNull(valueRef);\n    assertEquals(new BytesRef(value), valueRef);\n    rd.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  @Nightly\n  public void test() throws Exception {\n    MockDirectoryWrapper dir = new MockDirectoryWrapper(random(), new MMapDirectory(TestUtil.getTempDir(\"4GBStoredFields\")));\n    dir.setThrottling(MockDirectoryWrapper.Throttling.NEVER);\n\n    IndexWriter w = new IndexWriter(dir,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n        .setRAMBufferSizeMB(256.0)\n        .setMergeScheduler(new ConcurrentMergeScheduler())\n        .setMergePolicy(newLogMergePolicy(false, 10))\n        .setOpenMode(IndexWriterConfig.OpenMode.CREATE));\n\n    MergePolicy mp = w.getConfig().getMergePolicy();\n    if (mp instanceof LogByteSizeMergePolicy) {\n     // 1 petabyte:\n     ((LogByteSizeMergePolicy) mp).setMaxMergeMB(1024*1024*1024);\n    }\n\n    final Document doc = new Document();\n    final FieldType ft = new FieldType();\n    ft.setIndexed(false);\n    ft.setStored(true);\n    ft.freeze();\n    final int valueLength = RandomInts.randomIntBetween(random(), 1 << 13, 1 << 20);\n    final byte[] value = new byte[valueLength];\n    for (int i = 0; i < valueLength; ++i) {\n      // random so that even compressing codecs can't compress it\n      value[i] = (byte) random().nextInt(256);\n    }\n    final Field f = new Field(\"fld\", value, ft);\n    doc.add(f);\n\n    final int numDocs = (int) ((1L << 32) / valueLength + 100);\n    for (int i = 0; i < numDocs; ++i) {\n      w.addDocument(doc);\n      if (VERBOSE && i % (numDocs / 10) == 0) {\n        System.out.println(i + \" of \" + numDocs + \"...\");\n      }\n    }\n    w.forceMerge(1);\n    w.close();\n    if (VERBOSE) {\n      boolean found = false;\n      for (String file : dir.listAll()) {\n        if (file.endsWith(\".fdt\")) {\n          final long fileLength = dir.fileLength(file);\n          if (fileLength >= 1L << 32) {\n            found = true;\n          }\n          System.out.println(\"File length of \" + file + \" : \" + fileLength);\n        }\n      }\n      if (!found) {\n        System.out.println(\"No .fdt file larger than 4GB, test bug?\");\n      }\n    }\n\n    DirectoryReader rd = DirectoryReader.open(dir);\n    StoredDocument sd = rd.document(numDocs - 1);\n    assertNotNull(sd);\n    assertEquals(1, sd.getFields().size());\n    BytesRef valueRef = sd.getBinaryValue(\"fld\");\n    assertNotNull(valueRef);\n    assertEquals(new BytesRef(value), valueRef);\n    rd.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c","date":1396633078,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/Test4GBStoredFields#test().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/Test4GBStoredFields#test().mjava","sourceNew":"  @Nightly\n  public void test() throws Exception {\n    MockDirectoryWrapper dir = new MockDirectoryWrapper(random(), new MMapDirectory(createTempDir(\"4GBStoredFields\")));\n    dir.setThrottling(MockDirectoryWrapper.Throttling.NEVER);\n\n    IndexWriter w = new IndexWriter(dir,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n        .setRAMBufferSizeMB(256.0)\n        .setMergeScheduler(new ConcurrentMergeScheduler())\n        .setMergePolicy(newLogMergePolicy(false, 10))\n        .setOpenMode(IndexWriterConfig.OpenMode.CREATE));\n\n    MergePolicy mp = w.getConfig().getMergePolicy();\n    if (mp instanceof LogByteSizeMergePolicy) {\n     // 1 petabyte:\n     ((LogByteSizeMergePolicy) mp).setMaxMergeMB(1024*1024*1024);\n    }\n\n    final Document doc = new Document();\n    final FieldType ft = new FieldType();\n    ft.setIndexed(false);\n    ft.setStored(true);\n    ft.freeze();\n    final int valueLength = RandomInts.randomIntBetween(random(), 1 << 13, 1 << 20);\n    final byte[] value = new byte[valueLength];\n    for (int i = 0; i < valueLength; ++i) {\n      // random so that even compressing codecs can't compress it\n      value[i] = (byte) random().nextInt(256);\n    }\n    final Field f = new Field(\"fld\", value, ft);\n    doc.add(f);\n\n    final int numDocs = (int) ((1L << 32) / valueLength + 100);\n    for (int i = 0; i < numDocs; ++i) {\n      w.addDocument(doc);\n      if (VERBOSE && i % (numDocs / 10) == 0) {\n        System.out.println(i + \" of \" + numDocs + \"...\");\n      }\n    }\n    w.forceMerge(1);\n    w.close();\n    if (VERBOSE) {\n      boolean found = false;\n      for (String file : dir.listAll()) {\n        if (file.endsWith(\".fdt\")) {\n          final long fileLength = dir.fileLength(file);\n          if (fileLength >= 1L << 32) {\n            found = true;\n          }\n          System.out.println(\"File length of \" + file + \" : \" + fileLength);\n        }\n      }\n      if (!found) {\n        System.out.println(\"No .fdt file larger than 4GB, test bug?\");\n      }\n    }\n\n    DirectoryReader rd = DirectoryReader.open(dir);\n    StoredDocument sd = rd.document(numDocs - 1);\n    assertNotNull(sd);\n    assertEquals(1, sd.getFields().size());\n    BytesRef valueRef = sd.getBinaryValue(\"fld\");\n    assertNotNull(valueRef);\n    assertEquals(new BytesRef(value), valueRef);\n    rd.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  @Nightly\n  public void test() throws Exception {\n    MockDirectoryWrapper dir = new MockDirectoryWrapper(random(), new MMapDirectory(TestUtil.createTempDir(\"4GBStoredFields\")));\n    dir.setThrottling(MockDirectoryWrapper.Throttling.NEVER);\n\n    IndexWriter w = new IndexWriter(dir,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n        .setRAMBufferSizeMB(256.0)\n        .setMergeScheduler(new ConcurrentMergeScheduler())\n        .setMergePolicy(newLogMergePolicy(false, 10))\n        .setOpenMode(IndexWriterConfig.OpenMode.CREATE));\n\n    MergePolicy mp = w.getConfig().getMergePolicy();\n    if (mp instanceof LogByteSizeMergePolicy) {\n     // 1 petabyte:\n     ((LogByteSizeMergePolicy) mp).setMaxMergeMB(1024*1024*1024);\n    }\n\n    final Document doc = new Document();\n    final FieldType ft = new FieldType();\n    ft.setIndexed(false);\n    ft.setStored(true);\n    ft.freeze();\n    final int valueLength = RandomInts.randomIntBetween(random(), 1 << 13, 1 << 20);\n    final byte[] value = new byte[valueLength];\n    for (int i = 0; i < valueLength; ++i) {\n      // random so that even compressing codecs can't compress it\n      value[i] = (byte) random().nextInt(256);\n    }\n    final Field f = new Field(\"fld\", value, ft);\n    doc.add(f);\n\n    final int numDocs = (int) ((1L << 32) / valueLength + 100);\n    for (int i = 0; i < numDocs; ++i) {\n      w.addDocument(doc);\n      if (VERBOSE && i % (numDocs / 10) == 0) {\n        System.out.println(i + \" of \" + numDocs + \"...\");\n      }\n    }\n    w.forceMerge(1);\n    w.close();\n    if (VERBOSE) {\n      boolean found = false;\n      for (String file : dir.listAll()) {\n        if (file.endsWith(\".fdt\")) {\n          final long fileLength = dir.fileLength(file);\n          if (fileLength >= 1L << 32) {\n            found = true;\n          }\n          System.out.println(\"File length of \" + file + \" : \" + fileLength);\n        }\n      }\n      if (!found) {\n        System.out.println(\"No .fdt file larger than 4GB, test bug?\");\n      }\n    }\n\n    DirectoryReader rd = DirectoryReader.open(dir);\n    StoredDocument sd = rd.document(numDocs - 1);\n    assertNotNull(sd);\n    assertEquals(1, sd.getFields().size());\n    BytesRef valueRef = sd.getBinaryValue(\"fld\");\n    assertNotNull(valueRef);\n    assertEquals(new BytesRef(value), valueRef);\n    rd.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a0f5bb79c600763ffe7b8141df59a3169d31e48","date":1396689440,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/Test4GBStoredFields#test().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/Test4GBStoredFields#test().mjava","sourceNew":"  @Nightly\n  public void test() throws Exception {\n    MockDirectoryWrapper dir = new MockDirectoryWrapper(random(), new MMapDirectory(createTempDir(\"4GBStoredFields\")));\n    dir.setThrottling(MockDirectoryWrapper.Throttling.NEVER);\n\n    IndexWriter w = new IndexWriter(dir,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n        .setRAMBufferSizeMB(256.0)\n        .setMergeScheduler(new ConcurrentMergeScheduler())\n        .setMergePolicy(newLogMergePolicy(false, 10))\n        .setOpenMode(IndexWriterConfig.OpenMode.CREATE));\n\n    MergePolicy mp = w.getConfig().getMergePolicy();\n    if (mp instanceof LogByteSizeMergePolicy) {\n     // 1 petabyte:\n     ((LogByteSizeMergePolicy) mp).setMaxMergeMB(1024*1024*1024);\n    }\n\n    final Document doc = new Document();\n    final FieldType ft = new FieldType();\n    ft.setIndexed(false);\n    ft.setStored(true);\n    ft.freeze();\n    final int valueLength = RandomInts.randomIntBetween(random(), 1 << 13, 1 << 20);\n    final byte[] value = new byte[valueLength];\n    for (int i = 0; i < valueLength; ++i) {\n      // random so that even compressing codecs can't compress it\n      value[i] = (byte) random().nextInt(256);\n    }\n    final Field f = new Field(\"fld\", value, ft);\n    doc.add(f);\n\n    final int numDocs = (int) ((1L << 32) / valueLength + 100);\n    for (int i = 0; i < numDocs; ++i) {\n      w.addDocument(doc);\n      if (VERBOSE && i % (numDocs / 10) == 0) {\n        System.out.println(i + \" of \" + numDocs + \"...\");\n      }\n    }\n    w.forceMerge(1);\n    w.close();\n    if (VERBOSE) {\n      boolean found = false;\n      for (String file : dir.listAll()) {\n        if (file.endsWith(\".fdt\")) {\n          final long fileLength = dir.fileLength(file);\n          if (fileLength >= 1L << 32) {\n            found = true;\n          }\n          System.out.println(\"File length of \" + file + \" : \" + fileLength);\n        }\n      }\n      if (!found) {\n        System.out.println(\"No .fdt file larger than 4GB, test bug?\");\n      }\n    }\n\n    DirectoryReader rd = DirectoryReader.open(dir);\n    StoredDocument sd = rd.document(numDocs - 1);\n    assertNotNull(sd);\n    assertEquals(1, sd.getFields().size());\n    BytesRef valueRef = sd.getBinaryValue(\"fld\");\n    assertNotNull(valueRef);\n    assertEquals(new BytesRef(value), valueRef);\n    rd.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  @Nightly\n  public void test() throws Exception {\n    MockDirectoryWrapper dir = new MockDirectoryWrapper(random(), new MMapDirectory(TestUtil.getTempDir(\"4GBStoredFields\")));\n    dir.setThrottling(MockDirectoryWrapper.Throttling.NEVER);\n\n    IndexWriter w = new IndexWriter(dir,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n        .setRAMBufferSizeMB(256.0)\n        .setMergeScheduler(new ConcurrentMergeScheduler())\n        .setMergePolicy(newLogMergePolicy(false, 10))\n        .setOpenMode(IndexWriterConfig.OpenMode.CREATE));\n\n    MergePolicy mp = w.getConfig().getMergePolicy();\n    if (mp instanceof LogByteSizeMergePolicy) {\n     // 1 petabyte:\n     ((LogByteSizeMergePolicy) mp).setMaxMergeMB(1024*1024*1024);\n    }\n\n    final Document doc = new Document();\n    final FieldType ft = new FieldType();\n    ft.setIndexed(false);\n    ft.setStored(true);\n    ft.freeze();\n    final int valueLength = RandomInts.randomIntBetween(random(), 1 << 13, 1 << 20);\n    final byte[] value = new byte[valueLength];\n    for (int i = 0; i < valueLength; ++i) {\n      // random so that even compressing codecs can't compress it\n      value[i] = (byte) random().nextInt(256);\n    }\n    final Field f = new Field(\"fld\", value, ft);\n    doc.add(f);\n\n    final int numDocs = (int) ((1L << 32) / valueLength + 100);\n    for (int i = 0; i < numDocs; ++i) {\n      w.addDocument(doc);\n      if (VERBOSE && i % (numDocs / 10) == 0) {\n        System.out.println(i + \" of \" + numDocs + \"...\");\n      }\n    }\n    w.forceMerge(1);\n    w.close();\n    if (VERBOSE) {\n      boolean found = false;\n      for (String file : dir.listAll()) {\n        if (file.endsWith(\".fdt\")) {\n          final long fileLength = dir.fileLength(file);\n          if (fileLength >= 1L << 32) {\n            found = true;\n          }\n          System.out.println(\"File length of \" + file + \" : \" + fileLength);\n        }\n      }\n      if (!found) {\n        System.out.println(\"No .fdt file larger than 4GB, test bug?\");\n      }\n    }\n\n    DirectoryReader rd = DirectoryReader.open(dir);\n    StoredDocument sd = rd.document(numDocs - 1);\n    assertNotNull(sd);\n    assertEquals(1, sd.getFields().size());\n    BytesRef valueRef = sd.getBinaryValue(\"fld\");\n    assertNotNull(valueRef);\n    assertEquals(new BytesRef(value), valueRef);\n    rd.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/Test4GBStoredFields#test().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/Test4GBStoredFields#test().mjava","sourceNew":"  @Nightly\n  public void test() throws Exception {\n    MockDirectoryWrapper dir = new MockDirectoryWrapper(random(), new MMapDirectory(createTempDir(\"4GBStoredFields\")));\n    dir.setThrottling(MockDirectoryWrapper.Throttling.NEVER);\n\n    IndexWriter w = new IndexWriter(dir,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n        .setRAMBufferSizeMB(256.0)\n        .setMergeScheduler(new ConcurrentMergeScheduler())\n        .setMergePolicy(newLogMergePolicy(false, 10))\n        .setOpenMode(IndexWriterConfig.OpenMode.CREATE));\n\n    MergePolicy mp = w.getConfig().getMergePolicy();\n    if (mp instanceof LogByteSizeMergePolicy) {\n     // 1 petabyte:\n     ((LogByteSizeMergePolicy) mp).setMaxMergeMB(1024*1024*1024);\n    }\n\n    final Document doc = new Document();\n    final FieldType ft = new FieldType();\n    ft.setIndexed(false);\n    ft.setStored(true);\n    ft.freeze();\n    final int valueLength = RandomInts.randomIntBetween(random(), 1 << 13, 1 << 20);\n    final byte[] value = new byte[valueLength];\n    for (int i = 0; i < valueLength; ++i) {\n      // random so that even compressing codecs can't compress it\n      value[i] = (byte) random().nextInt(256);\n    }\n    final Field f = new Field(\"fld\", value, ft);\n    doc.add(f);\n\n    final int numDocs = (int) ((1L << 32) / valueLength + 100);\n    for (int i = 0; i < numDocs; ++i) {\n      w.addDocument(doc);\n      if (VERBOSE && i % (numDocs / 10) == 0) {\n        System.out.println(i + \" of \" + numDocs + \"...\");\n      }\n    }\n    w.forceMerge(1);\n    w.shutdown();\n    if (VERBOSE) {\n      boolean found = false;\n      for (String file : dir.listAll()) {\n        if (file.endsWith(\".fdt\")) {\n          final long fileLength = dir.fileLength(file);\n          if (fileLength >= 1L << 32) {\n            found = true;\n          }\n          System.out.println(\"File length of \" + file + \" : \" + fileLength);\n        }\n      }\n      if (!found) {\n        System.out.println(\"No .fdt file larger than 4GB, test bug?\");\n      }\n    }\n\n    DirectoryReader rd = DirectoryReader.open(dir);\n    StoredDocument sd = rd.document(numDocs - 1);\n    assertNotNull(sd);\n    assertEquals(1, sd.getFields().size());\n    BytesRef valueRef = sd.getBinaryValue(\"fld\");\n    assertNotNull(valueRef);\n    assertEquals(new BytesRef(value), valueRef);\n    rd.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  @Nightly\n  public void test() throws Exception {\n    MockDirectoryWrapper dir = new MockDirectoryWrapper(random(), new MMapDirectory(createTempDir(\"4GBStoredFields\")));\n    dir.setThrottling(MockDirectoryWrapper.Throttling.NEVER);\n\n    IndexWriter w = new IndexWriter(dir,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n        .setRAMBufferSizeMB(256.0)\n        .setMergeScheduler(new ConcurrentMergeScheduler())\n        .setMergePolicy(newLogMergePolicy(false, 10))\n        .setOpenMode(IndexWriterConfig.OpenMode.CREATE));\n\n    MergePolicy mp = w.getConfig().getMergePolicy();\n    if (mp instanceof LogByteSizeMergePolicy) {\n     // 1 petabyte:\n     ((LogByteSizeMergePolicy) mp).setMaxMergeMB(1024*1024*1024);\n    }\n\n    final Document doc = new Document();\n    final FieldType ft = new FieldType();\n    ft.setIndexed(false);\n    ft.setStored(true);\n    ft.freeze();\n    final int valueLength = RandomInts.randomIntBetween(random(), 1 << 13, 1 << 20);\n    final byte[] value = new byte[valueLength];\n    for (int i = 0; i < valueLength; ++i) {\n      // random so that even compressing codecs can't compress it\n      value[i] = (byte) random().nextInt(256);\n    }\n    final Field f = new Field(\"fld\", value, ft);\n    doc.add(f);\n\n    final int numDocs = (int) ((1L << 32) / valueLength + 100);\n    for (int i = 0; i < numDocs; ++i) {\n      w.addDocument(doc);\n      if (VERBOSE && i % (numDocs / 10) == 0) {\n        System.out.println(i + \" of \" + numDocs + \"...\");\n      }\n    }\n    w.forceMerge(1);\n    w.close();\n    if (VERBOSE) {\n      boolean found = false;\n      for (String file : dir.listAll()) {\n        if (file.endsWith(\".fdt\")) {\n          final long fileLength = dir.fileLength(file);\n          if (fileLength >= 1L << 32) {\n            found = true;\n          }\n          System.out.println(\"File length of \" + file + \" : \" + fileLength);\n        }\n      }\n      if (!found) {\n        System.out.println(\"No .fdt file larger than 4GB, test bug?\");\n      }\n    }\n\n    DirectoryReader rd = DirectoryReader.open(dir);\n    StoredDocument sd = rd.document(numDocs - 1);\n    assertNotNull(sd);\n    assertEquals(1, sd.getFields().size());\n    BytesRef valueRef = sd.getBinaryValue(\"fld\");\n    assertNotNull(valueRef);\n    assertEquals(new BytesRef(value), valueRef);\n    rd.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/Test4GBStoredFields#test().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/Test4GBStoredFields#test().mjava","sourceNew":"  @Nightly\n  public void test() throws Exception {\n    MockDirectoryWrapper dir = new MockDirectoryWrapper(random(), new MMapDirectory(createTempDir(\"4GBStoredFields\")));\n    dir.setThrottling(MockDirectoryWrapper.Throttling.NEVER);\n\n    IndexWriter w = new IndexWriter(dir,\n        new IndexWriterConfig(new MockAnalyzer(random()))\n        .setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n        .setRAMBufferSizeMB(256.0)\n        .setMergeScheduler(new ConcurrentMergeScheduler())\n        .setMergePolicy(newLogMergePolicy(false, 10))\n        .setOpenMode(IndexWriterConfig.OpenMode.CREATE));\n\n    MergePolicy mp = w.getConfig().getMergePolicy();\n    if (mp instanceof LogByteSizeMergePolicy) {\n     // 1 petabyte:\n     ((LogByteSizeMergePolicy) mp).setMaxMergeMB(1024*1024*1024);\n    }\n\n    final Document doc = new Document();\n    final FieldType ft = new FieldType();\n    ft.setIndexed(false);\n    ft.setStored(true);\n    ft.freeze();\n    final int valueLength = RandomInts.randomIntBetween(random(), 1 << 13, 1 << 20);\n    final byte[] value = new byte[valueLength];\n    for (int i = 0; i < valueLength; ++i) {\n      // random so that even compressing codecs can't compress it\n      value[i] = (byte) random().nextInt(256);\n    }\n    final Field f = new Field(\"fld\", value, ft);\n    doc.add(f);\n\n    final int numDocs = (int) ((1L << 32) / valueLength + 100);\n    for (int i = 0; i < numDocs; ++i) {\n      w.addDocument(doc);\n      if (VERBOSE && i % (numDocs / 10) == 0) {\n        System.out.println(i + \" of \" + numDocs + \"...\");\n      }\n    }\n    w.forceMerge(1);\n    w.close();\n    if (VERBOSE) {\n      boolean found = false;\n      for (String file : dir.listAll()) {\n        if (file.endsWith(\".fdt\")) {\n          final long fileLength = dir.fileLength(file);\n          if (fileLength >= 1L << 32) {\n            found = true;\n          }\n          System.out.println(\"File length of \" + file + \" : \" + fileLength);\n        }\n      }\n      if (!found) {\n        System.out.println(\"No .fdt file larger than 4GB, test bug?\");\n      }\n    }\n\n    DirectoryReader rd = DirectoryReader.open(dir);\n    StoredDocument sd = rd.document(numDocs - 1);\n    assertNotNull(sd);\n    assertEquals(1, sd.getFields().size());\n    BytesRef valueRef = sd.getBinaryValue(\"fld\");\n    assertNotNull(valueRef);\n    assertEquals(new BytesRef(value), valueRef);\n    rd.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  @Nightly\n  public void test() throws Exception {\n    MockDirectoryWrapper dir = new MockDirectoryWrapper(random(), new MMapDirectory(createTempDir(\"4GBStoredFields\")));\n    dir.setThrottling(MockDirectoryWrapper.Throttling.NEVER);\n\n    IndexWriter w = new IndexWriter(dir,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n        .setRAMBufferSizeMB(256.0)\n        .setMergeScheduler(new ConcurrentMergeScheduler())\n        .setMergePolicy(newLogMergePolicy(false, 10))\n        .setOpenMode(IndexWriterConfig.OpenMode.CREATE));\n\n    MergePolicy mp = w.getConfig().getMergePolicy();\n    if (mp instanceof LogByteSizeMergePolicy) {\n     // 1 petabyte:\n     ((LogByteSizeMergePolicy) mp).setMaxMergeMB(1024*1024*1024);\n    }\n\n    final Document doc = new Document();\n    final FieldType ft = new FieldType();\n    ft.setIndexed(false);\n    ft.setStored(true);\n    ft.freeze();\n    final int valueLength = RandomInts.randomIntBetween(random(), 1 << 13, 1 << 20);\n    final byte[] value = new byte[valueLength];\n    for (int i = 0; i < valueLength; ++i) {\n      // random so that even compressing codecs can't compress it\n      value[i] = (byte) random().nextInt(256);\n    }\n    final Field f = new Field(\"fld\", value, ft);\n    doc.add(f);\n\n    final int numDocs = (int) ((1L << 32) / valueLength + 100);\n    for (int i = 0; i < numDocs; ++i) {\n      w.addDocument(doc);\n      if (VERBOSE && i % (numDocs / 10) == 0) {\n        System.out.println(i + \" of \" + numDocs + \"...\");\n      }\n    }\n    w.forceMerge(1);\n    w.shutdown();\n    if (VERBOSE) {\n      boolean found = false;\n      for (String file : dir.listAll()) {\n        if (file.endsWith(\".fdt\")) {\n          final long fileLength = dir.fileLength(file);\n          if (fileLength >= 1L << 32) {\n            found = true;\n          }\n          System.out.println(\"File length of \" + file + \" : \" + fileLength);\n        }\n      }\n      if (!found) {\n        System.out.println(\"No .fdt file larger than 4GB, test bug?\");\n      }\n    }\n\n    DirectoryReader rd = DirectoryReader.open(dir);\n    StoredDocument sd = rd.document(numDocs - 1);\n    assertNotNull(sd);\n    assertEquals(1, sd.getFields().size());\n    BytesRef valueRef = sd.getBinaryValue(\"fld\");\n    assertNotNull(valueRef);\n    assertEquals(new BytesRef(value), valueRef);\n    rd.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3184874f7f3aca850248483485b4995343066875","date":1413876758,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/Test4GBStoredFields#test().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/Test4GBStoredFields#test().mjava","sourceNew":"  @Nightly\n  public void test() throws Exception {\n    MockDirectoryWrapper dir = new MockDirectoryWrapper(random(), new MMapDirectory(createTempDir(\"4GBStoredFields\")));\n    dir.setThrottling(MockDirectoryWrapper.Throttling.NEVER);\n\n    IndexWriter w = new IndexWriter(dir,\n        new IndexWriterConfig(new MockAnalyzer(random()))\n        .setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n        .setRAMBufferSizeMB(256.0)\n        .setMergeScheduler(new ConcurrentMergeScheduler())\n        .setMergePolicy(newLogMergePolicy(false, 10))\n        .setOpenMode(IndexWriterConfig.OpenMode.CREATE));\n\n    MergePolicy mp = w.getConfig().getMergePolicy();\n    if (mp instanceof LogByteSizeMergePolicy) {\n     // 1 petabyte:\n     ((LogByteSizeMergePolicy) mp).setMaxMergeMB(1024*1024*1024);\n    }\n\n    final Document doc = new Document();\n    final FieldType ft = new FieldType();\n    ft.setStored(true);\n    ft.freeze();\n    final int valueLength = RandomInts.randomIntBetween(random(), 1 << 13, 1 << 20);\n    final byte[] value = new byte[valueLength];\n    for (int i = 0; i < valueLength; ++i) {\n      // random so that even compressing codecs can't compress it\n      value[i] = (byte) random().nextInt(256);\n    }\n    final Field f = new Field(\"fld\", value, ft);\n    doc.add(f);\n\n    final int numDocs = (int) ((1L << 32) / valueLength + 100);\n    for (int i = 0; i < numDocs; ++i) {\n      w.addDocument(doc);\n      if (VERBOSE && i % (numDocs / 10) == 0) {\n        System.out.println(i + \" of \" + numDocs + \"...\");\n      }\n    }\n    w.forceMerge(1);\n    w.close();\n    if (VERBOSE) {\n      boolean found = false;\n      for (String file : dir.listAll()) {\n        if (file.endsWith(\".fdt\")) {\n          final long fileLength = dir.fileLength(file);\n          if (fileLength >= 1L << 32) {\n            found = true;\n          }\n          System.out.println(\"File length of \" + file + \" : \" + fileLength);\n        }\n      }\n      if (!found) {\n        System.out.println(\"No .fdt file larger than 4GB, test bug?\");\n      }\n    }\n\n    DirectoryReader rd = DirectoryReader.open(dir);\n    StoredDocument sd = rd.document(numDocs - 1);\n    assertNotNull(sd);\n    assertEquals(1, sd.getFields().size());\n    BytesRef valueRef = sd.getBinaryValue(\"fld\");\n    assertNotNull(valueRef);\n    assertEquals(new BytesRef(value), valueRef);\n    rd.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  @Nightly\n  public void test() throws Exception {\n    MockDirectoryWrapper dir = new MockDirectoryWrapper(random(), new MMapDirectory(createTempDir(\"4GBStoredFields\")));\n    dir.setThrottling(MockDirectoryWrapper.Throttling.NEVER);\n\n    IndexWriter w = new IndexWriter(dir,\n        new IndexWriterConfig(new MockAnalyzer(random()))\n        .setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n        .setRAMBufferSizeMB(256.0)\n        .setMergeScheduler(new ConcurrentMergeScheduler())\n        .setMergePolicy(newLogMergePolicy(false, 10))\n        .setOpenMode(IndexWriterConfig.OpenMode.CREATE));\n\n    MergePolicy mp = w.getConfig().getMergePolicy();\n    if (mp instanceof LogByteSizeMergePolicy) {\n     // 1 petabyte:\n     ((LogByteSizeMergePolicy) mp).setMaxMergeMB(1024*1024*1024);\n    }\n\n    final Document doc = new Document();\n    final FieldType ft = new FieldType();\n    ft.setIndexed(false);\n    ft.setStored(true);\n    ft.freeze();\n    final int valueLength = RandomInts.randomIntBetween(random(), 1 << 13, 1 << 20);\n    final byte[] value = new byte[valueLength];\n    for (int i = 0; i < valueLength; ++i) {\n      // random so that even compressing codecs can't compress it\n      value[i] = (byte) random().nextInt(256);\n    }\n    final Field f = new Field(\"fld\", value, ft);\n    doc.add(f);\n\n    final int numDocs = (int) ((1L << 32) / valueLength + 100);\n    for (int i = 0; i < numDocs; ++i) {\n      w.addDocument(doc);\n      if (VERBOSE && i % (numDocs / 10) == 0) {\n        System.out.println(i + \" of \" + numDocs + \"...\");\n      }\n    }\n    w.forceMerge(1);\n    w.close();\n    if (VERBOSE) {\n      boolean found = false;\n      for (String file : dir.listAll()) {\n        if (file.endsWith(\".fdt\")) {\n          final long fileLength = dir.fileLength(file);\n          if (fileLength >= 1L << 32) {\n            found = true;\n          }\n          System.out.println(\"File length of \" + file + \" : \" + fileLength);\n        }\n      }\n      if (!found) {\n        System.out.println(\"No .fdt file larger than 4GB, test bug?\");\n      }\n    }\n\n    DirectoryReader rd = DirectoryReader.open(dir);\n    StoredDocument sd = rd.document(numDocs - 1);\n    assertNotNull(sd);\n    assertEquals(1, sd.getFields().size());\n    BytesRef valueRef = sd.getBinaryValue(\"fld\");\n    assertNotNull(valueRef);\n    assertEquals(new BytesRef(value), valueRef);\n    rd.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a22eafe3f72a4c2945eaad9547e6c78816978f4","date":1413956657,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/Test4GBStoredFields#test().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/Test4GBStoredFields#test().mjava","sourceNew":"  @Nightly\n  public void test() throws Exception {\n    MockDirectoryWrapper dir = new MockDirectoryWrapper(random(), new MMapDirectory(createTempDir(\"4GBStoredFields\")));\n    dir.setThrottling(MockDirectoryWrapper.Throttling.NEVER);\n\n    IndexWriter w = new IndexWriter(dir,\n        new IndexWriterConfig(new MockAnalyzer(random()))\n        .setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n        .setRAMBufferSizeMB(256.0)\n        .setMergeScheduler(new ConcurrentMergeScheduler())\n        .setMergePolicy(newLogMergePolicy(false, 10))\n        .setOpenMode(IndexWriterConfig.OpenMode.CREATE));\n\n    MergePolicy mp = w.getConfig().getMergePolicy();\n    if (mp instanceof LogByteSizeMergePolicy) {\n     // 1 petabyte:\n     ((LogByteSizeMergePolicy) mp).setMaxMergeMB(1024*1024*1024);\n    }\n\n    final Document doc = new Document();\n    final FieldType ft = new FieldType();\n    ft.setStored(true);\n    ft.freeze();\n    final int valueLength = RandomInts.randomIntBetween(random(), 1 << 13, 1 << 20);\n    final byte[] value = new byte[valueLength];\n    for (int i = 0; i < valueLength; ++i) {\n      // random so that even compressing codecs can't compress it\n      value[i] = (byte) random().nextInt(256);\n    }\n    final Field f = new Field(\"fld\", value, ft);\n    doc.add(f);\n\n    final int numDocs = (int) ((1L << 32) / valueLength + 100);\n    for (int i = 0; i < numDocs; ++i) {\n      w.addDocument(doc);\n      if (VERBOSE && i % (numDocs / 10) == 0) {\n        System.out.println(i + \" of \" + numDocs + \"...\");\n      }\n    }\n    w.forceMerge(1);\n    w.close();\n    if (VERBOSE) {\n      boolean found = false;\n      for (String file : dir.listAll()) {\n        if (file.endsWith(\".fdt\")) {\n          final long fileLength = dir.fileLength(file);\n          if (fileLength >= 1L << 32) {\n            found = true;\n          }\n          System.out.println(\"File length of \" + file + \" : \" + fileLength);\n        }\n      }\n      if (!found) {\n        System.out.println(\"No .fdt file larger than 4GB, test bug?\");\n      }\n    }\n\n    DirectoryReader rd = DirectoryReader.open(dir);\n    StoredDocument sd = rd.document(numDocs - 1);\n    assertNotNull(sd);\n    assertEquals(1, sd.getFields().size());\n    BytesRef valueRef = sd.getBinaryValue(\"fld\");\n    assertNotNull(valueRef);\n    assertEquals(new BytesRef(value), valueRef);\n    rd.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  @Nightly\n  public void test() throws Exception {\n    MockDirectoryWrapper dir = new MockDirectoryWrapper(random(), new MMapDirectory(createTempDir(\"4GBStoredFields\")));\n    dir.setThrottling(MockDirectoryWrapper.Throttling.NEVER);\n\n    IndexWriter w = new IndexWriter(dir,\n        new IndexWriterConfig(new MockAnalyzer(random()))\n        .setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n        .setRAMBufferSizeMB(256.0)\n        .setMergeScheduler(new ConcurrentMergeScheduler())\n        .setMergePolicy(newLogMergePolicy(false, 10))\n        .setOpenMode(IndexWriterConfig.OpenMode.CREATE));\n\n    MergePolicy mp = w.getConfig().getMergePolicy();\n    if (mp instanceof LogByteSizeMergePolicy) {\n     // 1 petabyte:\n     ((LogByteSizeMergePolicy) mp).setMaxMergeMB(1024*1024*1024);\n    }\n\n    final Document doc = new Document();\n    final FieldType ft = new FieldType();\n    ft.setIndexed(false);\n    ft.setStored(true);\n    ft.freeze();\n    final int valueLength = RandomInts.randomIntBetween(random(), 1 << 13, 1 << 20);\n    final byte[] value = new byte[valueLength];\n    for (int i = 0; i < valueLength; ++i) {\n      // random so that even compressing codecs can't compress it\n      value[i] = (byte) random().nextInt(256);\n    }\n    final Field f = new Field(\"fld\", value, ft);\n    doc.add(f);\n\n    final int numDocs = (int) ((1L << 32) / valueLength + 100);\n    for (int i = 0; i < numDocs; ++i) {\n      w.addDocument(doc);\n      if (VERBOSE && i % (numDocs / 10) == 0) {\n        System.out.println(i + \" of \" + numDocs + \"...\");\n      }\n    }\n    w.forceMerge(1);\n    w.close();\n    if (VERBOSE) {\n      boolean found = false;\n      for (String file : dir.listAll()) {\n        if (file.endsWith(\".fdt\")) {\n          final long fileLength = dir.fileLength(file);\n          if (fileLength >= 1L << 32) {\n            found = true;\n          }\n          System.out.println(\"File length of \" + file + \" : \" + fileLength);\n        }\n      }\n      if (!found) {\n        System.out.println(\"No .fdt file larger than 4GB, test bug?\");\n      }\n    }\n\n    DirectoryReader rd = DirectoryReader.open(dir);\n    StoredDocument sd = rd.document(numDocs - 1);\n    assertNotNull(sd);\n    assertEquals(1, sd.getFields().size());\n    BytesRef valueRef = sd.getBinaryValue(\"fld\");\n    assertNotNull(valueRef);\n    assertEquals(new BytesRef(value), valueRef);\n    rd.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","date":1453060490,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/Test4GBStoredFields#test().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/Test4GBStoredFields#test().mjava","sourceNew":"  @Nightly\n  public void test() throws Exception {\n    MockDirectoryWrapper dir = new MockDirectoryWrapper(random(), new MMapDirectory(createTempDir(\"4GBStoredFields\")));\n    dir.setThrottling(MockDirectoryWrapper.Throttling.NEVER);\n\n    IndexWriter w = new IndexWriter(dir,\n        new IndexWriterConfig(new MockAnalyzer(random()))\n        .setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n        .setRAMBufferSizeMB(256.0)\n        .setMergeScheduler(new ConcurrentMergeScheduler())\n        .setMergePolicy(newLogMergePolicy(false, 10))\n        .setOpenMode(IndexWriterConfig.OpenMode.CREATE));\n\n    MergePolicy mp = w.getConfig().getMergePolicy();\n    if (mp instanceof LogByteSizeMergePolicy) {\n     // 1 petabyte:\n     ((LogByteSizeMergePolicy) mp).setMaxMergeMB(1024*1024*1024);\n    }\n\n    final Document doc = new Document();\n    final FieldType ft = new FieldType();\n    ft.setStored(true);\n    ft.freeze();\n    final int valueLength = RandomInts.randomIntBetween(random(), 1 << 13, 1 << 20);\n    final byte[] value = new byte[valueLength];\n    for (int i = 0; i < valueLength; ++i) {\n      // random so that even compressing codecs can't compress it\n      value[i] = (byte) random().nextInt(256);\n    }\n    final Field f = new Field(\"fld\", value, ft);\n    doc.add(f);\n\n    final int numDocs = (int) ((1L << 32) / valueLength + 100);\n    for (int i = 0; i < numDocs; ++i) {\n      w.addDocument(doc);\n      if (VERBOSE && i % (numDocs / 10) == 0) {\n        System.out.println(i + \" of \" + numDocs + \"...\");\n      }\n    }\n    w.forceMerge(1);\n    w.close();\n    if (VERBOSE) {\n      boolean found = false;\n      for (String file : dir.listAll()) {\n        if (file.endsWith(\".fdt\")) {\n          final long fileLength = dir.fileLength(file);\n          if (fileLength >= 1L << 32) {\n            found = true;\n          }\n          System.out.println(\"File length of \" + file + \" : \" + fileLength);\n        }\n      }\n      if (!found) {\n        System.out.println(\"No .fdt file larger than 4GB, test bug?\");\n      }\n    }\n\n    DirectoryReader rd = DirectoryReader.open(dir);\n    Document sd = rd.document(numDocs - 1);\n    assertNotNull(sd);\n    assertEquals(1, sd.getFields().size());\n    BytesRef valueRef = sd.getBinaryValue(\"fld\");\n    assertNotNull(valueRef);\n    assertEquals(new BytesRef(value), valueRef);\n    rd.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  @Nightly\n  public void test() throws Exception {\n    MockDirectoryWrapper dir = new MockDirectoryWrapper(random(), new MMapDirectory(createTempDir(\"4GBStoredFields\")));\n    dir.setThrottling(MockDirectoryWrapper.Throttling.NEVER);\n\n    IndexWriter w = new IndexWriter(dir,\n        new IndexWriterConfig(new MockAnalyzer(random()))\n        .setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n        .setRAMBufferSizeMB(256.0)\n        .setMergeScheduler(new ConcurrentMergeScheduler())\n        .setMergePolicy(newLogMergePolicy(false, 10))\n        .setOpenMode(IndexWriterConfig.OpenMode.CREATE));\n\n    MergePolicy mp = w.getConfig().getMergePolicy();\n    if (mp instanceof LogByteSizeMergePolicy) {\n     // 1 petabyte:\n     ((LogByteSizeMergePolicy) mp).setMaxMergeMB(1024*1024*1024);\n    }\n\n    final Document doc = new Document();\n    final FieldType ft = new FieldType();\n    ft.setStored(true);\n    ft.freeze();\n    final int valueLength = RandomInts.randomIntBetween(random(), 1 << 13, 1 << 20);\n    final byte[] value = new byte[valueLength];\n    for (int i = 0; i < valueLength; ++i) {\n      // random so that even compressing codecs can't compress it\n      value[i] = (byte) random().nextInt(256);\n    }\n    final Field f = new Field(\"fld\", value, ft);\n    doc.add(f);\n\n    final int numDocs = (int) ((1L << 32) / valueLength + 100);\n    for (int i = 0; i < numDocs; ++i) {\n      w.addDocument(doc);\n      if (VERBOSE && i % (numDocs / 10) == 0) {\n        System.out.println(i + \" of \" + numDocs + \"...\");\n      }\n    }\n    w.forceMerge(1);\n    w.close();\n    if (VERBOSE) {\n      boolean found = false;\n      for (String file : dir.listAll()) {\n        if (file.endsWith(\".fdt\")) {\n          final long fileLength = dir.fileLength(file);\n          if (fileLength >= 1L << 32) {\n            found = true;\n          }\n          System.out.println(\"File length of \" + file + \" : \" + fileLength);\n        }\n      }\n      if (!found) {\n        System.out.println(\"No .fdt file larger than 4GB, test bug?\");\n      }\n    }\n\n    DirectoryReader rd = DirectoryReader.open(dir);\n    StoredDocument sd = rd.document(numDocs - 1);\n    assertNotNull(sd);\n    assertEquals(1, sd.getFields().size());\n    BytesRef valueRef = sd.getBinaryValue(\"fld\");\n    assertNotNull(valueRef);\n    assertEquals(new BytesRef(value), valueRef);\n    rd.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"960efc08b4e7fdfeeef3fbbc37b24a1189fbfb2f","date":1460988711,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/Test4GBStoredFields#test().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/Test4GBStoredFields#test().mjava","sourceNew":"  @Nightly\n  public void test() throws Exception {\n    MockDirectoryWrapper dir = new MockDirectoryWrapper(random(), new MMapDirectory(createTempDir(\"4GBStoredFields\")));\n    dir.setThrottling(MockDirectoryWrapper.Throttling.NEVER);\n\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    iwc.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n    iwc.setRAMBufferSizeMB(256.0);\n    iwc.setMergeScheduler(new ConcurrentMergeScheduler());\n    iwc.setMergePolicy(newLogMergePolicy(false, 10));\n    iwc.setOpenMode(IndexWriterConfig.OpenMode.CREATE);\n\n    // TODO: we disable \"Compressing\" since it likes to pick very extreme values which will be too slow for this test.\n    // maybe we should factor out crazy cases to ExtremeCompressing? then annotations can handle this stuff...\n    if (random().nextBoolean()) {\n      iwc.setCodec(CompressingCodec.reasonableInstance(random()));\n    }\n\n    IndexWriter w = new IndexWriter(dir, iwc);\n\n    MergePolicy mp = w.getConfig().getMergePolicy();\n    if (mp instanceof LogByteSizeMergePolicy) {\n     // 1 petabyte:\n     ((LogByteSizeMergePolicy) mp).setMaxMergeMB(1024*1024*1024);\n    }\n\n    final Document doc = new Document();\n    final FieldType ft = new FieldType();\n    ft.setStored(true);\n    ft.freeze();\n    final int valueLength = RandomInts.randomIntBetween(random(), 1 << 13, 1 << 20);\n    final byte[] value = new byte[valueLength];\n    for (int i = 0; i < valueLength; ++i) {\n      // random so that even compressing codecs can't compress it\n      value[i] = (byte) random().nextInt(256);\n    }\n    final Field f = new Field(\"fld\", value, ft);\n    doc.add(f);\n\n    final int numDocs = (int) ((1L << 32) / valueLength + 100);\n    for (int i = 0; i < numDocs; ++i) {\n      w.addDocument(doc);\n      if (VERBOSE && i % (numDocs / 10) == 0) {\n        System.out.println(i + \" of \" + numDocs + \"...\");\n      }\n    }\n    w.forceMerge(1);\n    w.close();\n    if (VERBOSE) {\n      boolean found = false;\n      for (String file : dir.listAll()) {\n        if (file.endsWith(\".fdt\")) {\n          final long fileLength = dir.fileLength(file);\n          if (fileLength >= 1L << 32) {\n            found = true;\n          }\n          System.out.println(\"File length of \" + file + \" : \" + fileLength);\n        }\n      }\n      if (!found) {\n        System.out.println(\"No .fdt file larger than 4GB, test bug?\");\n      }\n    }\n\n    DirectoryReader rd = DirectoryReader.open(dir);\n    Document sd = rd.document(numDocs - 1);\n    assertNotNull(sd);\n    assertEquals(1, sd.getFields().size());\n    BytesRef valueRef = sd.getBinaryValue(\"fld\");\n    assertNotNull(valueRef);\n    assertEquals(new BytesRef(value), valueRef);\n    rd.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  @Nightly\n  public void test() throws Exception {\n    MockDirectoryWrapper dir = new MockDirectoryWrapper(random(), new MMapDirectory(createTempDir(\"4GBStoredFields\")));\n    dir.setThrottling(MockDirectoryWrapper.Throttling.NEVER);\n\n    IndexWriter w = new IndexWriter(dir,\n        new IndexWriterConfig(new MockAnalyzer(random()))\n        .setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n        .setRAMBufferSizeMB(256.0)\n        .setMergeScheduler(new ConcurrentMergeScheduler())\n        .setMergePolicy(newLogMergePolicy(false, 10))\n        .setOpenMode(IndexWriterConfig.OpenMode.CREATE));\n\n    MergePolicy mp = w.getConfig().getMergePolicy();\n    if (mp instanceof LogByteSizeMergePolicy) {\n     // 1 petabyte:\n     ((LogByteSizeMergePolicy) mp).setMaxMergeMB(1024*1024*1024);\n    }\n\n    final Document doc = new Document();\n    final FieldType ft = new FieldType();\n    ft.setStored(true);\n    ft.freeze();\n    final int valueLength = RandomInts.randomIntBetween(random(), 1 << 13, 1 << 20);\n    final byte[] value = new byte[valueLength];\n    for (int i = 0; i < valueLength; ++i) {\n      // random so that even compressing codecs can't compress it\n      value[i] = (byte) random().nextInt(256);\n    }\n    final Field f = new Field(\"fld\", value, ft);\n    doc.add(f);\n\n    final int numDocs = (int) ((1L << 32) / valueLength + 100);\n    for (int i = 0; i < numDocs; ++i) {\n      w.addDocument(doc);\n      if (VERBOSE && i % (numDocs / 10) == 0) {\n        System.out.println(i + \" of \" + numDocs + \"...\");\n      }\n    }\n    w.forceMerge(1);\n    w.close();\n    if (VERBOSE) {\n      boolean found = false;\n      for (String file : dir.listAll()) {\n        if (file.endsWith(\".fdt\")) {\n          final long fileLength = dir.fileLength(file);\n          if (fileLength >= 1L << 32) {\n            found = true;\n          }\n          System.out.println(\"File length of \" + file + \" : \" + fileLength);\n        }\n      }\n      if (!found) {\n        System.out.println(\"No .fdt file larger than 4GB, test bug?\");\n      }\n    }\n\n    DirectoryReader rd = DirectoryReader.open(dir);\n    Document sd = rd.document(numDocs - 1);\n    assertNotNull(sd);\n    assertEquals(1, sd.getFields().size());\n    BytesRef valueRef = sd.getBinaryValue(\"fld\");\n    assertNotNull(valueRef);\n    assertEquals(new BytesRef(value), valueRef);\n    rd.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"76b27bc4e241a6dd8c185cdb62b458a0562564f0","date":1460988862,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/Test4GBStoredFields#test().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/Test4GBStoredFields#test().mjava","sourceNew":"  @Nightly\n  public void test() throws Exception {\n    MockDirectoryWrapper dir = new MockDirectoryWrapper(random(), new MMapDirectory(createTempDir(\"4GBStoredFields\")));\n    dir.setThrottling(MockDirectoryWrapper.Throttling.NEVER);\n\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    iwc.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n    iwc.setRAMBufferSizeMB(256.0);\n    iwc.setMergeScheduler(new ConcurrentMergeScheduler());\n    iwc.setMergePolicy(newLogMergePolicy(false, 10));\n    iwc.setOpenMode(IndexWriterConfig.OpenMode.CREATE);\n\n    // TODO: we disable \"Compressing\" since it likes to pick very extreme values which will be too slow for this test.\n    // maybe we should factor out crazy cases to ExtremeCompressing? then annotations can handle this stuff...\n    if (random().nextBoolean()) {\n      iwc.setCodec(CompressingCodec.reasonableInstance(random()));\n    }\n\n    IndexWriter w = new IndexWriter(dir, iwc);\n\n    MergePolicy mp = w.getConfig().getMergePolicy();\n    if (mp instanceof LogByteSizeMergePolicy) {\n     // 1 petabyte:\n     ((LogByteSizeMergePolicy) mp).setMaxMergeMB(1024*1024*1024);\n    }\n\n    final Document doc = new Document();\n    final FieldType ft = new FieldType();\n    ft.setStored(true);\n    ft.freeze();\n    final int valueLength = RandomInts.randomIntBetween(random(), 1 << 13, 1 << 20);\n    final byte[] value = new byte[valueLength];\n    for (int i = 0; i < valueLength; ++i) {\n      // random so that even compressing codecs can't compress it\n      value[i] = (byte) random().nextInt(256);\n    }\n    final Field f = new Field(\"fld\", value, ft);\n    doc.add(f);\n\n    final int numDocs = (int) ((1L << 32) / valueLength + 100);\n    for (int i = 0; i < numDocs; ++i) {\n      w.addDocument(doc);\n      if (VERBOSE && i % (numDocs / 10) == 0) {\n        System.out.println(i + \" of \" + numDocs + \"...\");\n      }\n    }\n    w.forceMerge(1);\n    w.close();\n    if (VERBOSE) {\n      boolean found = false;\n      for (String file : dir.listAll()) {\n        if (file.endsWith(\".fdt\")) {\n          final long fileLength = dir.fileLength(file);\n          if (fileLength >= 1L << 32) {\n            found = true;\n          }\n          System.out.println(\"File length of \" + file + \" : \" + fileLength);\n        }\n      }\n      if (!found) {\n        System.out.println(\"No .fdt file larger than 4GB, test bug?\");\n      }\n    }\n\n    DirectoryReader rd = DirectoryReader.open(dir);\n    Document sd = rd.document(numDocs - 1);\n    assertNotNull(sd);\n    assertEquals(1, sd.getFields().size());\n    BytesRef valueRef = sd.getBinaryValue(\"fld\");\n    assertNotNull(valueRef);\n    assertEquals(new BytesRef(value), valueRef);\n    rd.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  @Nightly\n  public void test() throws Exception {\n    MockDirectoryWrapper dir = new MockDirectoryWrapper(random(), new MMapDirectory(createTempDir(\"4GBStoredFields\")));\n    dir.setThrottling(MockDirectoryWrapper.Throttling.NEVER);\n\n    IndexWriter w = new IndexWriter(dir,\n        new IndexWriterConfig(new MockAnalyzer(random()))\n        .setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n        .setRAMBufferSizeMB(256.0)\n        .setMergeScheduler(new ConcurrentMergeScheduler())\n        .setMergePolicy(newLogMergePolicy(false, 10))\n        .setOpenMode(IndexWriterConfig.OpenMode.CREATE));\n\n    MergePolicy mp = w.getConfig().getMergePolicy();\n    if (mp instanceof LogByteSizeMergePolicy) {\n     // 1 petabyte:\n     ((LogByteSizeMergePolicy) mp).setMaxMergeMB(1024*1024*1024);\n    }\n\n    final Document doc = new Document();\n    final FieldType ft = new FieldType();\n    ft.setStored(true);\n    ft.freeze();\n    final int valueLength = RandomInts.randomIntBetween(random(), 1 << 13, 1 << 20);\n    final byte[] value = new byte[valueLength];\n    for (int i = 0; i < valueLength; ++i) {\n      // random so that even compressing codecs can't compress it\n      value[i] = (byte) random().nextInt(256);\n    }\n    final Field f = new Field(\"fld\", value, ft);\n    doc.add(f);\n\n    final int numDocs = (int) ((1L << 32) / valueLength + 100);\n    for (int i = 0; i < numDocs; ++i) {\n      w.addDocument(doc);\n      if (VERBOSE && i % (numDocs / 10) == 0) {\n        System.out.println(i + \" of \" + numDocs + \"...\");\n      }\n    }\n    w.forceMerge(1);\n    w.close();\n    if (VERBOSE) {\n      boolean found = false;\n      for (String file : dir.listAll()) {\n        if (file.endsWith(\".fdt\")) {\n          final long fileLength = dir.fileLength(file);\n          if (fileLength >= 1L << 32) {\n            found = true;\n          }\n          System.out.println(\"File length of \" + file + \" : \" + fileLength);\n        }\n      }\n      if (!found) {\n        System.out.println(\"No .fdt file larger than 4GB, test bug?\");\n      }\n    }\n\n    DirectoryReader rd = DirectoryReader.open(dir);\n    Document sd = rd.document(numDocs - 1);\n    assertNotNull(sd);\n    assertEquals(1, sd.getFields().size());\n    BytesRef valueRef = sd.getBinaryValue(\"fld\");\n    assertNotNull(valueRef);\n    assertEquals(new BytesRef(value), valueRef);\n    rd.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"713122036535651642e6d4fe57ce12b449e18473","date":1461000510,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/Test4GBStoredFields#test().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/Test4GBStoredFields#test().mjava","sourceNew":"  @Nightly\n  public void test() throws Exception {\n    MockDirectoryWrapper dir = new MockDirectoryWrapper(random(), new MMapDirectory(createTempDir(\"4GBStoredFields\")));\n    dir.setThrottling(MockDirectoryWrapper.Throttling.NEVER);\n\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    iwc.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n    iwc.setRAMBufferSizeMB(256.0);\n    iwc.setMergeScheduler(new ConcurrentMergeScheduler());\n    iwc.setMergePolicy(newLogMergePolicy(false, 10));\n    iwc.setOpenMode(IndexWriterConfig.OpenMode.CREATE);\n\n    // TODO: we disable \"Compressing\" since it likes to pick very extreme values which will be too slow for this test.\n    // maybe we should factor out crazy cases to ExtremeCompressing? then annotations can handle this stuff...\n    if (random().nextBoolean()) {\n      iwc.setCodec(CompressingCodec.reasonableInstance(random()));\n    }\n\n    IndexWriter w = new IndexWriter(dir, iwc);\n\n    MergePolicy mp = w.getConfig().getMergePolicy();\n    if (mp instanceof LogByteSizeMergePolicy) {\n     // 1 petabyte:\n     ((LogByteSizeMergePolicy) mp).setMaxMergeMB(1024*1024*1024);\n    }\n\n    final Document doc = new Document();\n    final FieldType ft = new FieldType();\n    ft.setStored(true);\n    ft.freeze();\n    final int valueLength = RandomInts.randomIntBetween(random(), 1 << 13, 1 << 20);\n    final byte[] value = new byte[valueLength];\n    for (int i = 0; i < valueLength; ++i) {\n      // random so that even compressing codecs can't compress it\n      value[i] = (byte) random().nextInt(256);\n    }\n    final Field f = new Field(\"fld\", value, ft);\n    doc.add(f);\n\n    final int numDocs = (int) ((1L << 32) / valueLength + 100);\n    for (int i = 0; i < numDocs; ++i) {\n      w.addDocument(doc);\n      if (VERBOSE && i % (numDocs / 10) == 0) {\n        System.out.println(i + \" of \" + numDocs + \"...\");\n      }\n    }\n    w.forceMerge(1);\n    w.close();\n    if (VERBOSE) {\n      boolean found = false;\n      for (String file : dir.listAll()) {\n        if (file.endsWith(\".fdt\")) {\n          final long fileLength = dir.fileLength(file);\n          if (fileLength >= 1L << 32) {\n            found = true;\n          }\n          System.out.println(\"File length of \" + file + \" : \" + fileLength);\n        }\n      }\n      if (!found) {\n        System.out.println(\"No .fdt file larger than 4GB, test bug?\");\n      }\n    }\n\n    DirectoryReader rd = DirectoryReader.open(dir);\n    Document sd = rd.document(numDocs - 1);\n    assertNotNull(sd);\n    assertEquals(1, sd.getFields().size());\n    BytesRef valueRef = sd.getBinaryValue(\"fld\");\n    assertNotNull(valueRef);\n    assertEquals(new BytesRef(value), valueRef);\n    rd.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  @Nightly\n  public void test() throws Exception {\n    MockDirectoryWrapper dir = new MockDirectoryWrapper(random(), new MMapDirectory(createTempDir(\"4GBStoredFields\")));\n    dir.setThrottling(MockDirectoryWrapper.Throttling.NEVER);\n\n    IndexWriter w = new IndexWriter(dir,\n        new IndexWriterConfig(new MockAnalyzer(random()))\n        .setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n        .setRAMBufferSizeMB(256.0)\n        .setMergeScheduler(new ConcurrentMergeScheduler())\n        .setMergePolicy(newLogMergePolicy(false, 10))\n        .setOpenMode(IndexWriterConfig.OpenMode.CREATE));\n\n    MergePolicy mp = w.getConfig().getMergePolicy();\n    if (mp instanceof LogByteSizeMergePolicy) {\n     // 1 petabyte:\n     ((LogByteSizeMergePolicy) mp).setMaxMergeMB(1024*1024*1024);\n    }\n\n    final Document doc = new Document();\n    final FieldType ft = new FieldType();\n    ft.setStored(true);\n    ft.freeze();\n    final int valueLength = RandomInts.randomIntBetween(random(), 1 << 13, 1 << 20);\n    final byte[] value = new byte[valueLength];\n    for (int i = 0; i < valueLength; ++i) {\n      // random so that even compressing codecs can't compress it\n      value[i] = (byte) random().nextInt(256);\n    }\n    final Field f = new Field(\"fld\", value, ft);\n    doc.add(f);\n\n    final int numDocs = (int) ((1L << 32) / valueLength + 100);\n    for (int i = 0; i < numDocs; ++i) {\n      w.addDocument(doc);\n      if (VERBOSE && i % (numDocs / 10) == 0) {\n        System.out.println(i + \" of \" + numDocs + \"...\");\n      }\n    }\n    w.forceMerge(1);\n    w.close();\n    if (VERBOSE) {\n      boolean found = false;\n      for (String file : dir.listAll()) {\n        if (file.endsWith(\".fdt\")) {\n          final long fileLength = dir.fileLength(file);\n          if (fileLength >= 1L << 32) {\n            found = true;\n          }\n          System.out.println(\"File length of \" + file + \" : \" + fileLength);\n        }\n      }\n      if (!found) {\n        System.out.println(\"No .fdt file larger than 4GB, test bug?\");\n      }\n    }\n\n    DirectoryReader rd = DirectoryReader.open(dir);\n    Document sd = rd.document(numDocs - 1);\n    assertNotNull(sd);\n    assertEquals(1, sd.getFields().size());\n    BytesRef valueRef = sd.getBinaryValue(\"fld\");\n    assertNotNull(valueRef);\n    assertEquals(new BytesRef(value), valueRef);\n    rd.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6448f67be45147de82a85cd903fec34e8930da75","date":1477041277,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/Test4GBStoredFields#test().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/Test4GBStoredFields#test().mjava","sourceNew":"  @Nightly\n  public void test() throws Exception {\n    MockDirectoryWrapper dir = new MockDirectoryWrapper(random(), new MMapDirectory(createTempDir(\"4GBStoredFields\")));\n    dir.setThrottling(MockDirectoryWrapper.Throttling.NEVER);\n\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    iwc.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n    iwc.setRAMBufferSizeMB(256.0);\n    iwc.setMergeScheduler(new ConcurrentMergeScheduler());\n    iwc.setMergePolicy(newLogMergePolicy(false, 10));\n    iwc.setOpenMode(IndexWriterConfig.OpenMode.CREATE);\n\n    // TODO: we disable \"Compressing\" since it likes to pick very extreme values which will be too slow for this test.\n    // maybe we should factor out crazy cases to ExtremeCompressing? then annotations can handle this stuff...\n    if (random().nextBoolean()) {\n      iwc.setCodec(CompressingCodec.reasonableInstance(random()));\n    }\n\n    IndexWriter w = new IndexWriter(dir, iwc);\n\n    MergePolicy mp = w.getConfig().getMergePolicy();\n    if (mp instanceof LogByteSizeMergePolicy) {\n     // 1 petabyte:\n     ((LogByteSizeMergePolicy) mp).setMaxMergeMB(1024*1024*1024);\n    }\n\n    final Document doc = new Document();\n    final FieldType ft = new FieldType();\n    ft.setStored(true);\n    ft.freeze();\n    final int valueLength = RandomNumbers.randomIntBetween(random(), 1 << 13, 1 << 20);\n    final byte[] value = new byte[valueLength];\n    for (int i = 0; i < valueLength; ++i) {\n      // random so that even compressing codecs can't compress it\n      value[i] = (byte) random().nextInt(256);\n    }\n    final Field f = new Field(\"fld\", value, ft);\n    doc.add(f);\n\n    final int numDocs = (int) ((1L << 32) / valueLength + 100);\n    for (int i = 0; i < numDocs; ++i) {\n      w.addDocument(doc);\n      if (VERBOSE && i % (numDocs / 10) == 0) {\n        System.out.println(i + \" of \" + numDocs + \"...\");\n      }\n    }\n    w.forceMerge(1);\n    w.close();\n    if (VERBOSE) {\n      boolean found = false;\n      for (String file : dir.listAll()) {\n        if (file.endsWith(\".fdt\")) {\n          final long fileLength = dir.fileLength(file);\n          if (fileLength >= 1L << 32) {\n            found = true;\n          }\n          System.out.println(\"File length of \" + file + \" : \" + fileLength);\n        }\n      }\n      if (!found) {\n        System.out.println(\"No .fdt file larger than 4GB, test bug?\");\n      }\n    }\n\n    DirectoryReader rd = DirectoryReader.open(dir);\n    Document sd = rd.document(numDocs - 1);\n    assertNotNull(sd);\n    assertEquals(1, sd.getFields().size());\n    BytesRef valueRef = sd.getBinaryValue(\"fld\");\n    assertNotNull(valueRef);\n    assertEquals(new BytesRef(value), valueRef);\n    rd.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  @Nightly\n  public void test() throws Exception {\n    MockDirectoryWrapper dir = new MockDirectoryWrapper(random(), new MMapDirectory(createTempDir(\"4GBStoredFields\")));\n    dir.setThrottling(MockDirectoryWrapper.Throttling.NEVER);\n\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    iwc.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n    iwc.setRAMBufferSizeMB(256.0);\n    iwc.setMergeScheduler(new ConcurrentMergeScheduler());\n    iwc.setMergePolicy(newLogMergePolicy(false, 10));\n    iwc.setOpenMode(IndexWriterConfig.OpenMode.CREATE);\n\n    // TODO: we disable \"Compressing\" since it likes to pick very extreme values which will be too slow for this test.\n    // maybe we should factor out crazy cases to ExtremeCompressing? then annotations can handle this stuff...\n    if (random().nextBoolean()) {\n      iwc.setCodec(CompressingCodec.reasonableInstance(random()));\n    }\n\n    IndexWriter w = new IndexWriter(dir, iwc);\n\n    MergePolicy mp = w.getConfig().getMergePolicy();\n    if (mp instanceof LogByteSizeMergePolicy) {\n     // 1 petabyte:\n     ((LogByteSizeMergePolicy) mp).setMaxMergeMB(1024*1024*1024);\n    }\n\n    final Document doc = new Document();\n    final FieldType ft = new FieldType();\n    ft.setStored(true);\n    ft.freeze();\n    final int valueLength = RandomInts.randomIntBetween(random(), 1 << 13, 1 << 20);\n    final byte[] value = new byte[valueLength];\n    for (int i = 0; i < valueLength; ++i) {\n      // random so that even compressing codecs can't compress it\n      value[i] = (byte) random().nextInt(256);\n    }\n    final Field f = new Field(\"fld\", value, ft);\n    doc.add(f);\n\n    final int numDocs = (int) ((1L << 32) / valueLength + 100);\n    for (int i = 0; i < numDocs; ++i) {\n      w.addDocument(doc);\n      if (VERBOSE && i % (numDocs / 10) == 0) {\n        System.out.println(i + \" of \" + numDocs + \"...\");\n      }\n    }\n    w.forceMerge(1);\n    w.close();\n    if (VERBOSE) {\n      boolean found = false;\n      for (String file : dir.listAll()) {\n        if (file.endsWith(\".fdt\")) {\n          final long fileLength = dir.fileLength(file);\n          if (fileLength >= 1L << 32) {\n            found = true;\n          }\n          System.out.println(\"File length of \" + file + \" : \" + fileLength);\n        }\n      }\n      if (!found) {\n        System.out.println(\"No .fdt file larger than 4GB, test bug?\");\n      }\n    }\n\n    DirectoryReader rd = DirectoryReader.open(dir);\n    Document sd = rd.document(numDocs - 1);\n    assertNotNull(sd);\n    assertEquals(1, sd.getFields().size());\n    BytesRef valueRef = sd.getBinaryValue(\"fld\");\n    assertNotNull(valueRef);\n    assertEquals(new BytesRef(value), valueRef);\n    rd.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"80d0e6d59ae23f4a6f30eaf40bfb40742300287f","date":1477598926,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/Test4GBStoredFields#test().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/Test4GBStoredFields#test().mjava","sourceNew":"  @Nightly\n  public void test() throws Exception {\n    MockDirectoryWrapper dir = new MockDirectoryWrapper(random(), new MMapDirectory(createTempDir(\"4GBStoredFields\")));\n    dir.setThrottling(MockDirectoryWrapper.Throttling.NEVER);\n\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    iwc.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n    iwc.setRAMBufferSizeMB(256.0);\n    iwc.setMergeScheduler(new ConcurrentMergeScheduler());\n    iwc.setMergePolicy(newLogMergePolicy(false, 10));\n    iwc.setOpenMode(IndexWriterConfig.OpenMode.CREATE);\n\n    // TODO: we disable \"Compressing\" since it likes to pick very extreme values which will be too slow for this test.\n    // maybe we should factor out crazy cases to ExtremeCompressing? then annotations can handle this stuff...\n    if (random().nextBoolean()) {\n      iwc.setCodec(CompressingCodec.reasonableInstance(random()));\n    }\n\n    IndexWriter w = new IndexWriter(dir, iwc);\n\n    MergePolicy mp = w.getConfig().getMergePolicy();\n    if (mp instanceof LogByteSizeMergePolicy) {\n     // 1 petabyte:\n     ((LogByteSizeMergePolicy) mp).setMaxMergeMB(1024*1024*1024);\n    }\n\n    final Document doc = new Document();\n    final FieldType ft = new FieldType();\n    ft.setStored(true);\n    ft.freeze();\n    final int valueLength = RandomNumbers.randomIntBetween(random(), 1 << 13, 1 << 20);\n    final byte[] value = new byte[valueLength];\n    for (int i = 0; i < valueLength; ++i) {\n      // random so that even compressing codecs can't compress it\n      value[i] = (byte) random().nextInt(256);\n    }\n    final Field f = new Field(\"fld\", value, ft);\n    doc.add(f);\n\n    final int numDocs = (int) ((1L << 32) / valueLength + 100);\n    for (int i = 0; i < numDocs; ++i) {\n      w.addDocument(doc);\n      if (VERBOSE && i % (numDocs / 10) == 0) {\n        System.out.println(i + \" of \" + numDocs + \"...\");\n      }\n    }\n    w.forceMerge(1);\n    w.close();\n    if (VERBOSE) {\n      boolean found = false;\n      for (String file : dir.listAll()) {\n        if (file.endsWith(\".fdt\")) {\n          final long fileLength = dir.fileLength(file);\n          if (fileLength >= 1L << 32) {\n            found = true;\n          }\n          System.out.println(\"File length of \" + file + \" : \" + fileLength);\n        }\n      }\n      if (!found) {\n        System.out.println(\"No .fdt file larger than 4GB, test bug?\");\n      }\n    }\n\n    DirectoryReader rd = DirectoryReader.open(dir);\n    Document sd = rd.document(numDocs - 1);\n    assertNotNull(sd);\n    assertEquals(1, sd.getFields().size());\n    BytesRef valueRef = sd.getBinaryValue(\"fld\");\n    assertNotNull(valueRef);\n    assertEquals(new BytesRef(value), valueRef);\n    rd.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  @Nightly\n  public void test() throws Exception {\n    MockDirectoryWrapper dir = new MockDirectoryWrapper(random(), new MMapDirectory(createTempDir(\"4GBStoredFields\")));\n    dir.setThrottling(MockDirectoryWrapper.Throttling.NEVER);\n\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    iwc.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n    iwc.setRAMBufferSizeMB(256.0);\n    iwc.setMergeScheduler(new ConcurrentMergeScheduler());\n    iwc.setMergePolicy(newLogMergePolicy(false, 10));\n    iwc.setOpenMode(IndexWriterConfig.OpenMode.CREATE);\n\n    // TODO: we disable \"Compressing\" since it likes to pick very extreme values which will be too slow for this test.\n    // maybe we should factor out crazy cases to ExtremeCompressing? then annotations can handle this stuff...\n    if (random().nextBoolean()) {\n      iwc.setCodec(CompressingCodec.reasonableInstance(random()));\n    }\n\n    IndexWriter w = new IndexWriter(dir, iwc);\n\n    MergePolicy mp = w.getConfig().getMergePolicy();\n    if (mp instanceof LogByteSizeMergePolicy) {\n     // 1 petabyte:\n     ((LogByteSizeMergePolicy) mp).setMaxMergeMB(1024*1024*1024);\n    }\n\n    final Document doc = new Document();\n    final FieldType ft = new FieldType();\n    ft.setStored(true);\n    ft.freeze();\n    final int valueLength = RandomInts.randomIntBetween(random(), 1 << 13, 1 << 20);\n    final byte[] value = new byte[valueLength];\n    for (int i = 0; i < valueLength; ++i) {\n      // random so that even compressing codecs can't compress it\n      value[i] = (byte) random().nextInt(256);\n    }\n    final Field f = new Field(\"fld\", value, ft);\n    doc.add(f);\n\n    final int numDocs = (int) ((1L << 32) / valueLength + 100);\n    for (int i = 0; i < numDocs; ++i) {\n      w.addDocument(doc);\n      if (VERBOSE && i % (numDocs / 10) == 0) {\n        System.out.println(i + \" of \" + numDocs + \"...\");\n      }\n    }\n    w.forceMerge(1);\n    w.close();\n    if (VERBOSE) {\n      boolean found = false;\n      for (String file : dir.listAll()) {\n        if (file.endsWith(\".fdt\")) {\n          final long fileLength = dir.fileLength(file);\n          if (fileLength >= 1L << 32) {\n            found = true;\n          }\n          System.out.println(\"File length of \" + file + \" : \" + fileLength);\n        }\n      }\n      if (!found) {\n        System.out.println(\"No .fdt file larger than 4GB, test bug?\");\n      }\n    }\n\n    DirectoryReader rd = DirectoryReader.open(dir);\n    Document sd = rd.document(numDocs - 1);\n    assertNotNull(sd);\n    assertEquals(1, sd.getFields().size());\n    BytesRef valueRef = sd.getBinaryValue(\"fld\");\n    assertNotNull(valueRef);\n    assertEquals(new BytesRef(value), valueRef);\n    rd.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"336a0bd816238e31c31e191e1b046e974f7ae5fe","date":1482358070,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/Test4GBStoredFields#test().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/Test4GBStoredFields#test().mjava","sourceNew":"  @Nightly\n  public void test() throws Exception {\n    assumeWorkingMMapOnWindows();\n    \n    MockDirectoryWrapper dir = new MockDirectoryWrapper(random(), new MMapDirectory(createTempDir(\"4GBStoredFields\")));\n    dir.setThrottling(MockDirectoryWrapper.Throttling.NEVER);\n\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    iwc.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n    iwc.setRAMBufferSizeMB(256.0);\n    iwc.setMergeScheduler(new ConcurrentMergeScheduler());\n    iwc.setMergePolicy(newLogMergePolicy(false, 10));\n    iwc.setOpenMode(IndexWriterConfig.OpenMode.CREATE);\n\n    // TODO: we disable \"Compressing\" since it likes to pick very extreme values which will be too slow for this test.\n    // maybe we should factor out crazy cases to ExtremeCompressing? then annotations can handle this stuff...\n    if (random().nextBoolean()) {\n      iwc.setCodec(CompressingCodec.reasonableInstance(random()));\n    }\n\n    IndexWriter w = new IndexWriter(dir, iwc);\n\n    MergePolicy mp = w.getConfig().getMergePolicy();\n    if (mp instanceof LogByteSizeMergePolicy) {\n     // 1 petabyte:\n     ((LogByteSizeMergePolicy) mp).setMaxMergeMB(1024*1024*1024);\n    }\n\n    final Document doc = new Document();\n    final FieldType ft = new FieldType();\n    ft.setStored(true);\n    ft.freeze();\n    final int valueLength = RandomNumbers.randomIntBetween(random(), 1 << 13, 1 << 20);\n    final byte[] value = new byte[valueLength];\n    for (int i = 0; i < valueLength; ++i) {\n      // random so that even compressing codecs can't compress it\n      value[i] = (byte) random().nextInt(256);\n    }\n    final Field f = new Field(\"fld\", value, ft);\n    doc.add(f);\n\n    final int numDocs = (int) ((1L << 32) / valueLength + 100);\n    for (int i = 0; i < numDocs; ++i) {\n      w.addDocument(doc);\n      if (VERBOSE && i % (numDocs / 10) == 0) {\n        System.out.println(i + \" of \" + numDocs + \"...\");\n      }\n    }\n    w.forceMerge(1);\n    w.close();\n    if (VERBOSE) {\n      boolean found = false;\n      for (String file : dir.listAll()) {\n        if (file.endsWith(\".fdt\")) {\n          final long fileLength = dir.fileLength(file);\n          if (fileLength >= 1L << 32) {\n            found = true;\n          }\n          System.out.println(\"File length of \" + file + \" : \" + fileLength);\n        }\n      }\n      if (!found) {\n        System.out.println(\"No .fdt file larger than 4GB, test bug?\");\n      }\n    }\n\n    DirectoryReader rd = DirectoryReader.open(dir);\n    Document sd = rd.document(numDocs - 1);\n    assertNotNull(sd);\n    assertEquals(1, sd.getFields().size());\n    BytesRef valueRef = sd.getBinaryValue(\"fld\");\n    assertNotNull(valueRef);\n    assertEquals(new BytesRef(value), valueRef);\n    rd.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  @Nightly\n  public void test() throws Exception {\n    MockDirectoryWrapper dir = new MockDirectoryWrapper(random(), new MMapDirectory(createTempDir(\"4GBStoredFields\")));\n    dir.setThrottling(MockDirectoryWrapper.Throttling.NEVER);\n\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    iwc.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n    iwc.setRAMBufferSizeMB(256.0);\n    iwc.setMergeScheduler(new ConcurrentMergeScheduler());\n    iwc.setMergePolicy(newLogMergePolicy(false, 10));\n    iwc.setOpenMode(IndexWriterConfig.OpenMode.CREATE);\n\n    // TODO: we disable \"Compressing\" since it likes to pick very extreme values which will be too slow for this test.\n    // maybe we should factor out crazy cases to ExtremeCompressing? then annotations can handle this stuff...\n    if (random().nextBoolean()) {\n      iwc.setCodec(CompressingCodec.reasonableInstance(random()));\n    }\n\n    IndexWriter w = new IndexWriter(dir, iwc);\n\n    MergePolicy mp = w.getConfig().getMergePolicy();\n    if (mp instanceof LogByteSizeMergePolicy) {\n     // 1 petabyte:\n     ((LogByteSizeMergePolicy) mp).setMaxMergeMB(1024*1024*1024);\n    }\n\n    final Document doc = new Document();\n    final FieldType ft = new FieldType();\n    ft.setStored(true);\n    ft.freeze();\n    final int valueLength = RandomNumbers.randomIntBetween(random(), 1 << 13, 1 << 20);\n    final byte[] value = new byte[valueLength];\n    for (int i = 0; i < valueLength; ++i) {\n      // random so that even compressing codecs can't compress it\n      value[i] = (byte) random().nextInt(256);\n    }\n    final Field f = new Field(\"fld\", value, ft);\n    doc.add(f);\n\n    final int numDocs = (int) ((1L << 32) / valueLength + 100);\n    for (int i = 0; i < numDocs; ++i) {\n      w.addDocument(doc);\n      if (VERBOSE && i % (numDocs / 10) == 0) {\n        System.out.println(i + \" of \" + numDocs + \"...\");\n      }\n    }\n    w.forceMerge(1);\n    w.close();\n    if (VERBOSE) {\n      boolean found = false;\n      for (String file : dir.listAll()) {\n        if (file.endsWith(\".fdt\")) {\n          final long fileLength = dir.fileLength(file);\n          if (fileLength >= 1L << 32) {\n            found = true;\n          }\n          System.out.println(\"File length of \" + file + \" : \" + fileLength);\n        }\n      }\n      if (!found) {\n        System.out.println(\"No .fdt file larger than 4GB, test bug?\");\n      }\n    }\n\n    DirectoryReader rd = DirectoryReader.open(dir);\n    Document sd = rd.document(numDocs - 1);\n    assertNotNull(sd);\n    assertEquals(1, sd.getFields().size());\n    BytesRef valueRef = sd.getBinaryValue(\"fld\");\n    assertNotNull(valueRef);\n    assertEquals(new BytesRef(value), valueRef);\n    rd.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f03e4bed5023ec3ef93a771b8888cae991cf448d","date":1483469262,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/Test4GBStoredFields#test().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/Test4GBStoredFields#test().mjava","sourceNew":"  @Nightly\n  public void test() throws Exception {\n    assumeWorkingMMapOnWindows();\n    \n    MockDirectoryWrapper dir = new MockDirectoryWrapper(random(), new MMapDirectory(createTempDir(\"4GBStoredFields\")));\n    dir.setThrottling(MockDirectoryWrapper.Throttling.NEVER);\n\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    iwc.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n    iwc.setRAMBufferSizeMB(256.0);\n    iwc.setMergeScheduler(new ConcurrentMergeScheduler());\n    iwc.setMergePolicy(newLogMergePolicy(false, 10));\n    iwc.setOpenMode(IndexWriterConfig.OpenMode.CREATE);\n\n    // TODO: we disable \"Compressing\" since it likes to pick very extreme values which will be too slow for this test.\n    // maybe we should factor out crazy cases to ExtremeCompressing? then annotations can handle this stuff...\n    if (random().nextBoolean()) {\n      iwc.setCodec(CompressingCodec.reasonableInstance(random()));\n    }\n\n    IndexWriter w = new IndexWriter(dir, iwc);\n\n    MergePolicy mp = w.getConfig().getMergePolicy();\n    if (mp instanceof LogByteSizeMergePolicy) {\n     // 1 petabyte:\n     ((LogByteSizeMergePolicy) mp).setMaxMergeMB(1024*1024*1024);\n    }\n\n    final Document doc = new Document();\n    final FieldType ft = new FieldType();\n    ft.setStored(true);\n    ft.freeze();\n    final int valueLength = RandomNumbers.randomIntBetween(random(), 1 << 13, 1 << 20);\n    final byte[] value = new byte[valueLength];\n    for (int i = 0; i < valueLength; ++i) {\n      // random so that even compressing codecs can't compress it\n      value[i] = (byte) random().nextInt(256);\n    }\n    final Field f = new Field(\"fld\", value, ft);\n    doc.add(f);\n\n    final int numDocs = (int) ((1L << 32) / valueLength + 100);\n    for (int i = 0; i < numDocs; ++i) {\n      w.addDocument(doc);\n      if (VERBOSE && i % (numDocs / 10) == 0) {\n        System.out.println(i + \" of \" + numDocs + \"...\");\n      }\n    }\n    w.forceMerge(1);\n    w.close();\n    if (VERBOSE) {\n      boolean found = false;\n      for (String file : dir.listAll()) {\n        if (file.endsWith(\".fdt\")) {\n          final long fileLength = dir.fileLength(file);\n          if (fileLength >= 1L << 32) {\n            found = true;\n          }\n          System.out.println(\"File length of \" + file + \" : \" + fileLength);\n        }\n      }\n      if (!found) {\n        System.out.println(\"No .fdt file larger than 4GB, test bug?\");\n      }\n    }\n\n    DirectoryReader rd = DirectoryReader.open(dir);\n    Document sd = rd.document(numDocs - 1);\n    assertNotNull(sd);\n    assertEquals(1, sd.getFields().size());\n    BytesRef valueRef = sd.getBinaryValue(\"fld\");\n    assertNotNull(valueRef);\n    assertEquals(new BytesRef(value), valueRef);\n    rd.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  @Nightly\n  public void test() throws Exception {\n    MockDirectoryWrapper dir = new MockDirectoryWrapper(random(), new MMapDirectory(createTempDir(\"4GBStoredFields\")));\n    dir.setThrottling(MockDirectoryWrapper.Throttling.NEVER);\n\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    iwc.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n    iwc.setRAMBufferSizeMB(256.0);\n    iwc.setMergeScheduler(new ConcurrentMergeScheduler());\n    iwc.setMergePolicy(newLogMergePolicy(false, 10));\n    iwc.setOpenMode(IndexWriterConfig.OpenMode.CREATE);\n\n    // TODO: we disable \"Compressing\" since it likes to pick very extreme values which will be too slow for this test.\n    // maybe we should factor out crazy cases to ExtremeCompressing? then annotations can handle this stuff...\n    if (random().nextBoolean()) {\n      iwc.setCodec(CompressingCodec.reasonableInstance(random()));\n    }\n\n    IndexWriter w = new IndexWriter(dir, iwc);\n\n    MergePolicy mp = w.getConfig().getMergePolicy();\n    if (mp instanceof LogByteSizeMergePolicy) {\n     // 1 petabyte:\n     ((LogByteSizeMergePolicy) mp).setMaxMergeMB(1024*1024*1024);\n    }\n\n    final Document doc = new Document();\n    final FieldType ft = new FieldType();\n    ft.setStored(true);\n    ft.freeze();\n    final int valueLength = RandomNumbers.randomIntBetween(random(), 1 << 13, 1 << 20);\n    final byte[] value = new byte[valueLength];\n    for (int i = 0; i < valueLength; ++i) {\n      // random so that even compressing codecs can't compress it\n      value[i] = (byte) random().nextInt(256);\n    }\n    final Field f = new Field(\"fld\", value, ft);\n    doc.add(f);\n\n    final int numDocs = (int) ((1L << 32) / valueLength + 100);\n    for (int i = 0; i < numDocs; ++i) {\n      w.addDocument(doc);\n      if (VERBOSE && i % (numDocs / 10) == 0) {\n        System.out.println(i + \" of \" + numDocs + \"...\");\n      }\n    }\n    w.forceMerge(1);\n    w.close();\n    if (VERBOSE) {\n      boolean found = false;\n      for (String file : dir.listAll()) {\n        if (file.endsWith(\".fdt\")) {\n          final long fileLength = dir.fileLength(file);\n          if (fileLength >= 1L << 32) {\n            found = true;\n          }\n          System.out.println(\"File length of \" + file + \" : \" + fileLength);\n        }\n      }\n      if (!found) {\n        System.out.println(\"No .fdt file larger than 4GB, test bug?\");\n      }\n    }\n\n    DirectoryReader rd = DirectoryReader.open(dir);\n    Document sd = rd.document(numDocs - 1);\n    assertNotNull(sd);\n    assertEquals(1, sd.getFields().size());\n    BytesRef valueRef = sd.getBinaryValue(\"fld\");\n    assertNotNull(valueRef);\n    assertEquals(new BytesRef(value), valueRef);\n    rd.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2a0f5bb79c600763ffe7b8141df59a3169d31e48":["6613659748fe4411a7dcf85266e55db1f95f7315","a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c"],"6613659748fe4411a7dcf85266e55db1f95f7315":["f8868d972a8be9163a60a65388327ef478e97016"],"76b27bc4e241a6dd8c185cdb62b458a0562564f0":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","960efc08b4e7fdfeeef3fbbc37b24a1189fbfb2f"],"d0d579490a72f2e6297eaa648940611234c57cf1":["6613659748fe4411a7dcf85266e55db1f95f7315"],"3184874f7f3aca850248483485b4995343066875":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f","336a0bd816238e31c31e191e1b046e974f7ae5fe"],"0a22eafe3f72a4c2945eaad9547e6c78816978f4":["d0ef034a4f10871667ae75181537775ddcf8ade4","3184874f7f3aca850248483485b4995343066875"],"62e52115b56781006682fd92c6938efaf174304d":["6d7e3780e3c6b6833ee8767982863b015de84daf","f8868d972a8be9163a60a65388327ef478e97016"],"713122036535651642e6d4fe57ce12b449e18473":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","76b27bc4e241a6dd8c185cdb62b458a0562564f0"],"a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c":["d0d579490a72f2e6297eaa648940611234c57cf1"],"6448f67be45147de82a85cd903fec34e8930da75":["713122036535651642e6d4fe57ce12b449e18473"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":["713122036535651642e6d4fe57ce12b449e18473","6448f67be45147de82a85cd903fec34e8930da75"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"f8868d972a8be9163a60a65388327ef478e97016":["6d7e3780e3c6b6833ee8767982863b015de84daf"],"336a0bd816238e31c31e191e1b046e974f7ae5fe":["6448f67be45147de82a85cd903fec34e8930da75"],"960efc08b4e7fdfeeef3fbbc37b24a1189fbfb2f":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"6d7e3780e3c6b6833ee8767982863b015de84daf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["336a0bd816238e31c31e191e1b046e974f7ae5fe"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["3184874f7f3aca850248483485b4995343066875"]},"commit2Childs":{"2a0f5bb79c600763ffe7b8141df59a3169d31e48":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"6613659748fe4411a7dcf85266e55db1f95f7315":["2a0f5bb79c600763ffe7b8141df59a3169d31e48","d0d579490a72f2e6297eaa648940611234c57cf1"],"76b27bc4e241a6dd8c185cdb62b458a0562564f0":["713122036535651642e6d4fe57ce12b449e18473"],"d0d579490a72f2e6297eaa648940611234c57cf1":["a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c"],"3184874f7f3aca850248483485b4995343066875":["0a22eafe3f72a4c2945eaad9547e6c78816978f4","6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":[],"0a22eafe3f72a4c2945eaad9547e6c78816978f4":[],"62e52115b56781006682fd92c6938efaf174304d":[],"713122036535651642e6d4fe57ce12b449e18473":["6448f67be45147de82a85cd903fec34e8930da75","80d0e6d59ae23f4a6f30eaf40bfb40742300287f"],"a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":["f03e4bed5023ec3ef93a771b8888cae991cf448d"],"6448f67be45147de82a85cd903fec34e8930da75":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f","336a0bd816238e31c31e191e1b046e974f7ae5fe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6d7e3780e3c6b6833ee8767982863b015de84daf"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["3184874f7f3aca850248483485b4995343066875","0a22eafe3f72a4c2945eaad9547e6c78816978f4"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"f8868d972a8be9163a60a65388327ef478e97016":["6613659748fe4411a7dcf85266e55db1f95f7315","62e52115b56781006682fd92c6938efaf174304d"],"960efc08b4e7fdfeeef3fbbc37b24a1189fbfb2f":["76b27bc4e241a6dd8c185cdb62b458a0562564f0"],"336a0bd816238e31c31e191e1b046e974f7ae5fe":["f03e4bed5023ec3ef93a771b8888cae991cf448d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6d7e3780e3c6b6833ee8767982863b015de84daf":["62e52115b56781006682fd92c6938efaf174304d","f8868d972a8be9163a60a65388327ef478e97016"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["76b27bc4e241a6dd8c185cdb62b458a0562564f0","713122036535651642e6d4fe57ce12b449e18473","960efc08b4e7fdfeeef3fbbc37b24a1189fbfb2f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["f03e4bed5023ec3ef93a771b8888cae991cf448d","0a22eafe3f72a4c2945eaad9547e6c78816978f4","62e52115b56781006682fd92c6938efaf174304d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}