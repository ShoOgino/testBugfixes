{"path":"contrib/lucli/src/java/lucli/Lucli#handleCommand(String,ConsoleReader).mjava","commits":[{"id":"a4df60738409662c962b4ed3201d830cd3c14530","date":1114991851,"type":1,"author":"Erik Hatcher","isMerge":false,"pathNew":"contrib/lucli/src/java/lucli/Lucli#handleCommand(String,ConsoleReader).mjava","pathOld":"contrib/lucli/src/lucli/Lucli#handleCommand(String,ConsoleReader).mjava","sourceNew":"\tprivate void handleCommand(String line, ConsoleReader cr) throws IOException, ParseException {\n\t\tString [] words = tokenizeCommand(line);\n\t\tif (words.length == 0)\n\t\t\treturn; //white space\n\t\tString query = \"\";\n\t\tif (line.trim().startsWith(\"#\"))\t\t// # = comment\n\t\t\treturn;\n\t\t//Command name and number of arguments\n\t\tswitch (getCommandId(words[0], words.length - 1)) {\n\t\t\tcase INFO:\n\t\t\t\tluceneMethods.info();\n\t\t\t\tbreak;\n\t\t\tcase SEARCH:\n\t\t\t\tfor (int ii = 1; ii < words.length; ii++) {\n\t\t\t\t\tquery += words[ii] + \" \";\n\t\t\t\t}\n\t\t\t\tluceneMethods.search(query, false, false, cr);\n\t\t\t\tbreak;\n\t\t\tcase COUNT:\n\t\t\t\tfor (int ii = 1; ii < words.length; ii++) {\n\t\t\t\t\tquery += words[ii] + \" \";\n\t\t\t\t}\n\t\t\t\tluceneMethods.count(query);\n\t\t\t\tbreak;\n\t\t\tcase QUIT:\n\t\t\t\texit();\n\t\t\t\tbreak;\n\t\t\tcase TERMS:\n\t\t\t\tif(words.length > 1)\n\t\t\t\t\tluceneMethods.terms(words[1]);\n\t\t\t\telse\n\t\t\t\t\tluceneMethods.terms(null);\n\t\t\t\tbreak;\n\t\t\tcase INDEX:\n\t\t\t\tLuceneMethods newLm = new LuceneMethods(words[1]);\n\t\t\t\ttry {\n\t\t\t\t\tnewLm.info(); //will fail if can't open the index\n\t\t\t\t\tluceneMethods = newLm; //OK, so we'll use the new one\n\t\t\t\t} catch (IOException ioe) {\n\t\t\t\t\t//problem we'll keep using the old one\n\t\t\t\t\terror(ioe.toString());\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase OPTIMIZE:\n\t\t\t\tluceneMethods.optimize();\n\t\t\t\tbreak;\n\t\t\tcase TOKENS:\n\t\t\t\tfor (int ii = 1; ii < words.length; ii++) {\n\t\t\t\t\tquery += words[ii] + \" \";\n\t\t\t\t}\n\t\t\t\tluceneMethods.search(query, false, true, cr);\n\t\t\t\tbreak;\n\t\t\tcase EXPLAIN:\n\t\t\t\tfor (int ii = 1; ii < words.length; ii++) {\n\t\t\t\t\tquery += words[ii] + \" \";\n\t\t\t\t}\n\t\t\t\tluceneMethods.search(query, true, false, cr);\n\t\t\t\tbreak;\n\t\t\tcase HELP:\n\t\t\t\thelp();\n\t\t\t\tbreak;\n\t\t\tcase NOCOMMAND: //do nothing\n\t\t\t\tbreak;\n\t\t\tcase UNKOWN:\n\t\t\t\tSystem.out.println(\"Unknown command: \" + words[0] + \". Type help to get a list of commands.\");\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n","sourceOld":"\tprivate void handleCommand(String line, ConsoleReader cr) throws IOException, ParseException {\n\t\tString [] words = tokenizeCommand(line);\n\t\tif (words.length == 0)\n\t\t\treturn; //white space\n\t\tString query = \"\";\n\t\tif (line.trim().startsWith(\"#\"))\t\t// # = comment\n\t\t\treturn;\n\t\t//Command name and number of arguments\n\t\tswitch (getCommandId(words[0], words.length - 1)) {\n\t\t\tcase INFO:\n\t\t\t\tluceneMethods.info();\n\t\t\t\tbreak;\n\t\t\tcase SEARCH:\n\t\t\t\tfor (int ii = 1; ii < words.length; ii++) {\n\t\t\t\t\tquery += words[ii] + \" \";\n\t\t\t\t}\n\t\t\t\tluceneMethods.search(query, false, false, cr);\n\t\t\t\tbreak;\n\t\t\tcase COUNT:\n\t\t\t\tfor (int ii = 1; ii < words.length; ii++) {\n\t\t\t\t\tquery += words[ii] + \" \";\n\t\t\t\t}\n\t\t\t\tluceneMethods.count(query);\n\t\t\t\tbreak;\n\t\t\tcase QUIT:\n\t\t\t\texit();\n\t\t\t\tbreak;\n\t\t\tcase TERMS:\n\t\t\t\tif(words.length > 1)\n\t\t\t\t\tluceneMethods.terms(words[1]);\n\t\t\t\telse\n\t\t\t\t\tluceneMethods.terms(null);\n\t\t\t\tbreak;\n\t\t\tcase INDEX:\n\t\t\t\tLuceneMethods newLm = new LuceneMethods(words[1]);\n\t\t\t\ttry {\n\t\t\t\t\tnewLm.info(); //will fail if can't open the index\n\t\t\t\t\tluceneMethods = newLm; //OK, so we'll use the new one\n\t\t\t\t} catch (IOException ioe) {\n\t\t\t\t\t//problem we'll keep using the old one\n\t\t\t\t\terror(ioe.toString());\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase OPTIMIZE:\n\t\t\t\tluceneMethods.optimize();\n\t\t\t\tbreak;\n\t\t\tcase TOKENS:\n\t\t\t\tfor (int ii = 1; ii < words.length; ii++) {\n\t\t\t\t\tquery += words[ii] + \" \";\n\t\t\t\t}\n\t\t\t\tluceneMethods.search(query, false, true, cr);\n\t\t\t\tbreak;\n\t\t\tcase EXPLAIN:\n\t\t\t\tfor (int ii = 1; ii < words.length; ii++) {\n\t\t\t\t\tquery += words[ii] + \" \";\n\t\t\t\t}\n\t\t\t\tluceneMethods.search(query, true, false, cr);\n\t\t\t\tbreak;\n\t\t\tcase HELP:\n\t\t\t\thelp();\n\t\t\t\tbreak;\n\t\t\tcase NOCOMMAND: //do nothing\n\t\t\t\tbreak;\n\t\t\tcase UNKOWN:\n\t\t\t\tSystem.out.println(\"Unknown command: \" + words[0] + \". Type help to get a list of commands.\");\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c64e0c064f4d1397144dc064e5eb82f2e074357b","date":1247479561,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/lucli/src/java/lucli/Lucli#handleCommand(String,ConsoleReader).mjava","pathOld":"contrib/lucli/src/java/lucli/Lucli#handleCommand(String,ConsoleReader).mjava","sourceNew":"\tprivate void handleCommand(String line, ConsoleReader cr) throws IOException, ParseException {\n\t\tString [] words = tokenizeCommand(line);\n\t\tif (words.length == 0)\n\t\t\treturn; //white space\n\t\tString query = \"\";\n\t\tif (line.trim().startsWith(\"#\"))\t\t// # = comment\n\t\t\treturn;\n\t\t//Command name and number of arguments\n\t\tswitch (getCommandId(words[0], words.length - 1)) {\n\t\t\tcase INFO:\n\t\t\t\tluceneMethods.info();\n\t\t\t\tbreak;\n\t\t\tcase SEARCH:\n\t\t\t\tfor (int ii = 1; ii < words.length; ii++) {\n\t\t\t\t\tquery += words[ii] + \" \";\n\t\t\t\t}\n\t\t\t\tluceneMethods.search(query, false, false, cr);\n\t\t\t\tbreak;\n\t\t\tcase COUNT:\n\t\t\t\tfor (int ii = 1; ii < words.length; ii++) {\n\t\t\t\t\tquery += words[ii] + \" \";\n\t\t\t\t}\n\t\t\t\tluceneMethods.count(query);\n\t\t\t\tbreak;\n\t\t\tcase QUIT:\n\t\t\t\texit();\n\t\t\t\tbreak;\n\t\t\tcase TERMS:\n\t\t\t\tif(words.length > 1)\n\t\t\t\t\tluceneMethods.terms(words[1]);\n\t\t\t\telse\n\t\t\t\t\tluceneMethods.terms(null);\n\t\t\t\tbreak;\n\t\t\tcase INDEX:\n\t\t\t\tLuceneMethods newLm = new LuceneMethods(words[1]);\n\t\t\t\ttry {\n\t\t\t\t\tnewLm.info(); //will fail if can't open the index\n\t\t\t\t\tluceneMethods = newLm; //OK, so we'll use the new one\n\t\t\t\t} catch (IOException ioe) {\n\t\t\t\t\t//problem we'll keep using the old one\n\t\t\t\t\terror(ioe.toString());\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase OPTIMIZE:\n\t\t\t\tluceneMethods.optimize();\n\t\t\t\tbreak;\n\t\t\tcase TOKENS:\n\t\t\t\tfor (int ii = 1; ii < words.length; ii++) {\n\t\t\t\t\tquery += words[ii] + \" \";\n\t\t\t\t}\n\t\t\t\tluceneMethods.search(query, false, true, cr);\n\t\t\t\tbreak;\n\t\t\tcase EXPLAIN:\n\t\t\t\tfor (int ii = 1; ii < words.length; ii++) {\n\t\t\t\t\tquery += words[ii] + \" \";\n\t\t\t\t}\n\t\t\t\tluceneMethods.search(query, true, false, cr);\n\t\t\t\tbreak;\n\t\t\tcase ANALYZER:\n\t\t\t\tluceneMethods.analyzer(words[1]);\n\t\t\t\tbreak;\n\t\t\tcase HELP:\n\t\t\t\thelp();\n\t\t\t\tbreak;\n\t\t\tcase NOCOMMAND: //do nothing\n\t\t\t\tbreak;\n\t\t\tcase UNKOWN:\n\t\t\t\tSystem.out.println(\"Unknown command: \" + words[0] + \". Type help to get a list of commands.\");\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n","sourceOld":"\tprivate void handleCommand(String line, ConsoleReader cr) throws IOException, ParseException {\n\t\tString [] words = tokenizeCommand(line);\n\t\tif (words.length == 0)\n\t\t\treturn; //white space\n\t\tString query = \"\";\n\t\tif (line.trim().startsWith(\"#\"))\t\t// # = comment\n\t\t\treturn;\n\t\t//Command name and number of arguments\n\t\tswitch (getCommandId(words[0], words.length - 1)) {\n\t\t\tcase INFO:\n\t\t\t\tluceneMethods.info();\n\t\t\t\tbreak;\n\t\t\tcase SEARCH:\n\t\t\t\tfor (int ii = 1; ii < words.length; ii++) {\n\t\t\t\t\tquery += words[ii] + \" \";\n\t\t\t\t}\n\t\t\t\tluceneMethods.search(query, false, false, cr);\n\t\t\t\tbreak;\n\t\t\tcase COUNT:\n\t\t\t\tfor (int ii = 1; ii < words.length; ii++) {\n\t\t\t\t\tquery += words[ii] + \" \";\n\t\t\t\t}\n\t\t\t\tluceneMethods.count(query);\n\t\t\t\tbreak;\n\t\t\tcase QUIT:\n\t\t\t\texit();\n\t\t\t\tbreak;\n\t\t\tcase TERMS:\n\t\t\t\tif(words.length > 1)\n\t\t\t\t\tluceneMethods.terms(words[1]);\n\t\t\t\telse\n\t\t\t\t\tluceneMethods.terms(null);\n\t\t\t\tbreak;\n\t\t\tcase INDEX:\n\t\t\t\tLuceneMethods newLm = new LuceneMethods(words[1]);\n\t\t\t\ttry {\n\t\t\t\t\tnewLm.info(); //will fail if can't open the index\n\t\t\t\t\tluceneMethods = newLm; //OK, so we'll use the new one\n\t\t\t\t} catch (IOException ioe) {\n\t\t\t\t\t//problem we'll keep using the old one\n\t\t\t\t\terror(ioe.toString());\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase OPTIMIZE:\n\t\t\t\tluceneMethods.optimize();\n\t\t\t\tbreak;\n\t\t\tcase TOKENS:\n\t\t\t\tfor (int ii = 1; ii < words.length; ii++) {\n\t\t\t\t\tquery += words[ii] + \" \";\n\t\t\t\t}\n\t\t\t\tluceneMethods.search(query, false, true, cr);\n\t\t\t\tbreak;\n\t\t\tcase EXPLAIN:\n\t\t\t\tfor (int ii = 1; ii < words.length; ii++) {\n\t\t\t\t\tquery += words[ii] + \" \";\n\t\t\t\t}\n\t\t\t\tluceneMethods.search(query, true, false, cr);\n\t\t\t\tbreak;\n\t\t\tcase HELP:\n\t\t\t\thelp();\n\t\t\t\tbreak;\n\t\t\tcase NOCOMMAND: //do nothing\n\t\t\t\tbreak;\n\t\t\tcase UNKOWN:\n\t\t\t\tSystem.out.println(\"Unknown command: \" + words[0] + \". Type help to get a list of commands.\");\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/lucli/src/java/lucli/Lucli#handleCommand(String,ConsoleReader).mjava","pathOld":"contrib/lucli/src/java/lucli/Lucli#handleCommand(String,ConsoleReader).mjava","sourceNew":"\tprivate void handleCommand(String line, ConsoleReader cr) throws IOException, ParseException {\n\t\tString [] words = tokenizeCommand(line);\n\t\tif (words.length == 0)\n\t\t\treturn; //white space\n\t\tString query = \"\";\n\t\tif (line.trim().startsWith(\"#\"))\t\t// # = comment\n\t\t\treturn;\n\t\t//Command name and number of arguments\n\t\tswitch (getCommandId(words[0], words.length - 1)) {\n\t\t\tcase INFO:\n\t\t\t\tluceneMethods.info();\n\t\t\t\tbreak;\n\t\t\tcase SEARCH:\n\t\t\t\tfor (int ii = 1; ii < words.length; ii++) {\n\t\t\t\t\tquery += words[ii] + \" \";\n\t\t\t\t}\n\t\t\t\tluceneMethods.search(query, false, false, cr);\n\t\t\t\tbreak;\n\t\t\tcase COUNT:\n\t\t\t\tfor (int ii = 1; ii < words.length; ii++) {\n\t\t\t\t\tquery += words[ii] + \" \";\n\t\t\t\t}\n\t\t\t\tluceneMethods.count(query);\n\t\t\t\tbreak;\n\t\t\tcase QUIT:\n\t\t\t\texit();\n\t\t\t\tbreak;\n\t\t\tcase TERMS:\n\t\t\t\tif(words.length > 1)\n\t\t\t\t\tluceneMethods.terms(words[1]);\n\t\t\t\telse\n\t\t\t\t\tluceneMethods.terms(null);\n\t\t\t\tbreak;\n\t\t\tcase INDEX:\n\t\t\t\tLuceneMethods newLm = new LuceneMethods(words[1]);\n\t\t\t\ttry {\n\t\t\t\t\tnewLm.info(); //will fail if can't open the index\n\t\t\t\t\tluceneMethods = newLm; //OK, so we'll use the new one\n\t\t\t\t} catch (IOException ioe) {\n\t\t\t\t\t//problem we'll keep using the old one\n\t\t\t\t\terror(ioe.toString());\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase OPTIMIZE:\n\t\t\t\tluceneMethods.optimize();\n\t\t\t\tbreak;\n\t\t\tcase TOKENS:\n\t\t\t\tfor (int ii = 1; ii < words.length; ii++) {\n\t\t\t\t\tquery += words[ii] + \" \";\n\t\t\t\t}\n\t\t\t\tluceneMethods.search(query, false, true, cr);\n\t\t\t\tbreak;\n\t\t\tcase EXPLAIN:\n\t\t\t\tfor (int ii = 1; ii < words.length; ii++) {\n\t\t\t\t\tquery += words[ii] + \" \";\n\t\t\t\t}\n\t\t\t\tluceneMethods.search(query, true, false, cr);\n\t\t\t\tbreak;\n\t\t\tcase ANALYZER:\n\t\t\t\tluceneMethods.analyzer(words[1]);\n\t\t\t\tbreak;\n\t\t\tcase HELP:\n\t\t\t\thelp();\n\t\t\t\tbreak;\n\t\t\tcase NOCOMMAND: //do nothing\n\t\t\t\tbreak;\n\t\t\tcase UNKOWN:\n\t\t\t\tSystem.out.println(\"Unknown command: \" + words[0] + \". Type help to get a list of commands.\");\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n","sourceOld":"\tprivate void handleCommand(String line, ConsoleReader cr) throws IOException, ParseException {\n\t\tString [] words = tokenizeCommand(line);\n\t\tif (words.length == 0)\n\t\t\treturn; //white space\n\t\tString query = \"\";\n\t\tif (line.trim().startsWith(\"#\"))\t\t// # = comment\n\t\t\treturn;\n\t\t//Command name and number of arguments\n\t\tswitch (getCommandId(words[0], words.length - 1)) {\n\t\t\tcase INFO:\n\t\t\t\tluceneMethods.info();\n\t\t\t\tbreak;\n\t\t\tcase SEARCH:\n\t\t\t\tfor (int ii = 1; ii < words.length; ii++) {\n\t\t\t\t\tquery += words[ii] + \" \";\n\t\t\t\t}\n\t\t\t\tluceneMethods.search(query, false, false, cr);\n\t\t\t\tbreak;\n\t\t\tcase COUNT:\n\t\t\t\tfor (int ii = 1; ii < words.length; ii++) {\n\t\t\t\t\tquery += words[ii] + \" \";\n\t\t\t\t}\n\t\t\t\tluceneMethods.count(query);\n\t\t\t\tbreak;\n\t\t\tcase QUIT:\n\t\t\t\texit();\n\t\t\t\tbreak;\n\t\t\tcase TERMS:\n\t\t\t\tif(words.length > 1)\n\t\t\t\t\tluceneMethods.terms(words[1]);\n\t\t\t\telse\n\t\t\t\t\tluceneMethods.terms(null);\n\t\t\t\tbreak;\n\t\t\tcase INDEX:\n\t\t\t\tLuceneMethods newLm = new LuceneMethods(words[1]);\n\t\t\t\ttry {\n\t\t\t\t\tnewLm.info(); //will fail if can't open the index\n\t\t\t\t\tluceneMethods = newLm; //OK, so we'll use the new one\n\t\t\t\t} catch (IOException ioe) {\n\t\t\t\t\t//problem we'll keep using the old one\n\t\t\t\t\terror(ioe.toString());\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase OPTIMIZE:\n\t\t\t\tluceneMethods.optimize();\n\t\t\t\tbreak;\n\t\t\tcase TOKENS:\n\t\t\t\tfor (int ii = 1; ii < words.length; ii++) {\n\t\t\t\t\tquery += words[ii] + \" \";\n\t\t\t\t}\n\t\t\t\tluceneMethods.search(query, false, true, cr);\n\t\t\t\tbreak;\n\t\t\tcase EXPLAIN:\n\t\t\t\tfor (int ii = 1; ii < words.length; ii++) {\n\t\t\t\t\tquery += words[ii] + \" \";\n\t\t\t\t}\n\t\t\t\tluceneMethods.search(query, true, false, cr);\n\t\t\t\tbreak;\n\t\t\tcase ANALYZER:\n\t\t\t\tluceneMethods.analyzer(words[1]);\n\t\t\t\tbreak;\n\t\t\tcase HELP:\n\t\t\t\thelp();\n\t\t\t\tbreak;\n\t\t\tcase NOCOMMAND: //do nothing\n\t\t\t\tbreak;\n\t\t\tcase UNKOWN:\n\t\t\t\tSystem.out.println(\"Unknown command: \" + words[0] + \". Type help to get a list of commands.\");\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c64e0c064f4d1397144dc064e5eb82f2e074357b":["a4df60738409662c962b4ed3201d830cd3c14530"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["c64e0c064f4d1397144dc064e5eb82f2e074357b"],"a4df60738409662c962b4ed3201d830cd3c14530":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a4df60738409662c962b4ed3201d830cd3c14530"],"c64e0c064f4d1397144dc064e5eb82f2e074357b":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a4df60738409662c962b4ed3201d830cd3c14530":["c64e0c064f4d1397144dc064e5eb82f2e074357b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}