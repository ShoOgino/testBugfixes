{"path":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/TestGeo3DPoint.ExplainingVisitor#compare(byte[],byte[]).mjava","commits":[{"id":"4d3a37d877793d2b7b46b7d8b0b0319d65f7d2a9","date":1459984736,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/TestGeo3DPoint.ExplainingVisitor#compare(byte[],byte[]).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n      Cell cell = new Cell(minPackedValue, maxPackedValue);\n      //System.out.println(\"compare: \" + cell);\n\n      // TODO: this is a bit hacky, having to reverse-engineer where we are in the BKD tree's recursion ... but it's the lesser evil vs e.g.\n      // polluting this visitor API, or implementing this \"under the hood\" in BKDReader instead?\n      if (firstPhase) {\n\n        // Pop stack:\n        while (stack.size() > 0 && stack.get(stack.size()-1).contains(cell)) {\n          stack.remove(stack.size()-1);\n          //System.out.println(\"  pop\");\n        }\n\n        // Push stack:\n        stack.add(cell);\n        //System.out.println(\"  push\");\n\n        return Relation.CELL_CROSSES_QUERY;\n      } else {\n        Relation result = in.compare(minPackedValue, maxPackedValue);\n        if (targetStackUpto < stackToTargetDoc.size() && cell.equals(stackToTargetDoc.get(targetStackUpto))) {\n          b.append(\"  on cell \" + stackToTargetDoc.get(targetStackUpto) + \", wrapped visitor returned \" + result);\n          targetStackUpto++;\n        }\n        return result;\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b83bbf6cd73297d89a3c0dc1e40069bf1c46b60","date":1460367779,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/TestGeo3DPoint.ExplainingVisitor#compare(byte[],byte[]).mjava","pathOld":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/TestGeo3DPoint.ExplainingVisitor#compare(byte[],byte[]).mjava","sourceNew":"    @Override\n    public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n      Cell cell = new Cell(minPackedValue, maxPackedValue);\n      //System.out.println(\"compare: \" + cell);\n\n      // TODO: this is a bit hacky, having to reverse-engineer where we are in the BKD tree's recursion ... but it's the lesser evil vs e.g.\n      // polluting this visitor API, or implementing this \"under the hood\" in BKDReader instead?\n      if (firstPhase) {\n\n        // Pop stack:\n        while (stack.size() > 0 && stack.get(stack.size()-1).contains(cell) == false) {\n          stack.remove(stack.size()-1);\n          //System.out.println(\"  pop\");\n        }\n\n        // Push stack:\n        stack.add(cell);\n        //System.out.println(\"  push\");\n\n        return Relation.CELL_CROSSES_QUERY;\n      } else {\n        Relation result = in.compare(minPackedValue, maxPackedValue);\n        if (targetStackUpto < stackToTargetDoc.size() && cell.equals(stackToTargetDoc.get(targetStackUpto))) {\n          b.append(\"  on cell \" + stackToTargetDoc.get(targetStackUpto) + \", wrapped visitor returned \" + result);\n          targetStackUpto++;\n        }\n        return result;\n      }\n    }\n\n","sourceOld":"    @Override\n    public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n      Cell cell = new Cell(minPackedValue, maxPackedValue);\n      //System.out.println(\"compare: \" + cell);\n\n      // TODO: this is a bit hacky, having to reverse-engineer where we are in the BKD tree's recursion ... but it's the lesser evil vs e.g.\n      // polluting this visitor API, or implementing this \"under the hood\" in BKDReader instead?\n      if (firstPhase) {\n\n        // Pop stack:\n        while (stack.size() > 0 && stack.get(stack.size()-1).contains(cell)) {\n          stack.remove(stack.size()-1);\n          //System.out.println(\"  pop\");\n        }\n\n        // Push stack:\n        stack.add(cell);\n        //System.out.println(\"  push\");\n\n        return Relation.CELL_CROSSES_QUERY;\n      } else {\n        Relation result = in.compare(minPackedValue, maxPackedValue);\n        if (targetStackUpto < stackToTargetDoc.size() && cell.equals(stackToTargetDoc.get(targetStackUpto))) {\n          b.append(\"  on cell \" + stackToTargetDoc.get(targetStackUpto) + \", wrapped visitor returned \" + result);\n          targetStackUpto++;\n        }\n        return result;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fce328ef870a3ecd74b752ab0906156ff29a4b93","date":1460809783,"type":3,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/TestGeo3DPoint.ExplainingVisitor#compare(byte[],byte[]).mjava","pathOld":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/TestGeo3DPoint.ExplainingVisitor#compare(byte[],byte[]).mjava","sourceNew":"    @Override\n    public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n      Cell cell = new Cell(minPackedValue, maxPackedValue);\n      //System.out.println(\"compare: \" + cell);\n\n      // TODO: this is a bit hacky, having to reverse-engineer where we are in the BKD tree's recursion ... but it's the lesser evil vs e.g.\n      // polluting this visitor API, or implementing this \"under the hood\" in BKDReader instead?\n      if (firstPhase) {\n\n        // Pop stack:\n        while (stack.size() > 0 && stack.get(stack.size()-1).contains(cell) == false) {\n          stack.remove(stack.size()-1);\n          //System.out.println(\"  pop\");\n        }\n\n        // Push stack:\n        stack.add(cell);\n        //System.out.println(\"  push\");\n\n        return Relation.CELL_CROSSES_QUERY;\n      } else {\n        Relation result = in.compare(minPackedValue, maxPackedValue);\n        if (targetStackUpto < stackToTargetDoc.size() && cell.equals(stackToTargetDoc.get(targetStackUpto))) {\n          b.append(\"  on cell \" + stackToTargetDoc.get(targetStackUpto) + \", wrapped visitor returned \" + result + \"\\n\");\n          targetStackUpto++;\n        }\n        return result;\n      }\n    }\n\n","sourceOld":"    @Override\n    public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n      Cell cell = new Cell(minPackedValue, maxPackedValue);\n      //System.out.println(\"compare: \" + cell);\n\n      // TODO: this is a bit hacky, having to reverse-engineer where we are in the BKD tree's recursion ... but it's the lesser evil vs e.g.\n      // polluting this visitor API, or implementing this \"under the hood\" in BKDReader instead?\n      if (firstPhase) {\n\n        // Pop stack:\n        while (stack.size() > 0 && stack.get(stack.size()-1).contains(cell) == false) {\n          stack.remove(stack.size()-1);\n          //System.out.println(\"  pop\");\n        }\n\n        // Push stack:\n        stack.add(cell);\n        //System.out.println(\"  push\");\n\n        return Relation.CELL_CROSSES_QUERY;\n      } else {\n        Relation result = in.compare(minPackedValue, maxPackedValue);\n        if (targetStackUpto < stackToTargetDoc.size() && cell.equals(stackToTargetDoc.get(targetStackUpto))) {\n          b.append(\"  on cell \" + stackToTargetDoc.get(targetStackUpto) + \", wrapped visitor returned \" + result);\n          targetStackUpto++;\n        }\n        return result;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4d3a37d877793d2b7b46b7d8b0b0319d65f7d2a9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fce328ef870a3ecd74b752ab0906156ff29a4b93":["4b83bbf6cd73297d89a3c0dc1e40069bf1c46b60"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fce328ef870a3ecd74b752ab0906156ff29a4b93"],"4b83bbf6cd73297d89a3c0dc1e40069bf1c46b60":["4d3a37d877793d2b7b46b7d8b0b0319d65f7d2a9"]},"commit2Childs":{"4d3a37d877793d2b7b46b7d8b0b0319d65f7d2a9":["4b83bbf6cd73297d89a3c0dc1e40069bf1c46b60"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4d3a37d877793d2b7b46b7d8b0b0319d65f7d2a9"],"fce328ef870a3ecd74b752ab0906156ff29a4b93":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4b83bbf6cd73297d89a3c0dc1e40069bf1c46b60":["fce328ef870a3ecd74b752ab0906156ff29a4b93"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}