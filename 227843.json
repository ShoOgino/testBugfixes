{"path":"lucene/core/src/java/org/apache/lucene/util/packed/BlockPackedReaderIterator#refill().mjava","commits":[{"id":"37b84753dc1f66eba4973779932885fe42cde001","date":1358812051,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/BlockPackedReaderIterator#refill().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/BlockPackedReader#refill().mjava","sourceNew":"  private void refill() throws IOException {\n    final int token = in.readByte() & 0xFF;\n    final boolean minEquals0 = (token & MIN_VALUE_EQUALS_0) != 0;\n    final int bitsPerValue = token >>> BPV_SHIFT;\n    if (bitsPerValue > 64) {\n      throw new IOException(\"Corrupted\");\n    }\n    final long minValue = minEquals0 ? 0L : zigZagDecode(1L + readVLong(in));\n    assert minEquals0 || minValue != 0;\n\n    if (bitsPerValue == 0) {\n      Arrays.fill(values, minValue);\n    } else {\n      final PackedInts.Decoder decoder = PackedInts.getDecoder(PackedInts.Format.PACKED, packedIntsVersion, bitsPerValue);\n      final int iterations = blockSize / decoder.valueCount();\n      final int blocksSize = iterations * 8 * decoder.blockCount();\n      if (blocks == null || blocks.length < blocksSize) {\n        blocks = new byte[blocksSize];\n      }\n\n      final int valueCount = (int) Math.min(this.valueCount - ord, blockSize);\n      final int blocksCount = (int) PackedInts.Format.PACKED.byteCount(packedIntsVersion, valueCount, bitsPerValue);\n      in.readBytes(blocks, 0, blocksCount);\n\n      decoder.decode(blocks, 0, values, 0, iterations);\n\n      if (minValue != 0) {\n        for (int i = 0; i < valueCount; ++i) {\n          values[i] += minValue;\n        }\n      }\n    }\n    off = 0;\n  }\n\n","sourceOld":"  private void refill() throws IOException {\n    final int token = in.readByte() & 0xFF;\n    final boolean minEquals0 = (token & MIN_VALUE_EQUALS_0) != 0;\n    final int bitsPerValue = token >>> BPV_SHIFT;\n    if (bitsPerValue > 64) {\n      throw new IOException(\"Corrupted\");\n    }\n    final long minValue = minEquals0 ? 0L : zigZagDecode(1L + readVLong(in));\n    assert minEquals0 || minValue != 0;\n\n    if (bitsPerValue == 0) {\n      Arrays.fill(values, minValue);\n    } else {\n      final PackedInts.Decoder decoder = PackedInts.getDecoder(PackedInts.Format.PACKED, packedIntsVersion, bitsPerValue);\n      final int iterations = blockSize / decoder.valueCount();\n      final int blocksSize = iterations * 8 * decoder.blockCount();\n      if (blocks == null || blocks.length < blocksSize) {\n        blocks = new byte[blocksSize];\n      }\n\n      final int valueCount = (int) Math.min(this.valueCount - ord, blockSize);\n      final int blocksCount = (int) PackedInts.Format.PACKED.byteCount(packedIntsVersion, valueCount, bitsPerValue);\n      in.readBytes(blocks, 0, blocksCount);\n\n      decoder.decode(blocks, 0, values, 0, iterations);\n\n      if (minValue != 0) {\n        for (int i = 0; i < valueCount; ++i) {\n          values[i] += minValue;\n        }\n      }\n    }\n    off = 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"de522d9303bd67c8473a269a1319125d1f3700e0","date":1359477856,"type":3,"author":"Adrien Grand","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/BlockPackedReaderIterator#refill().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/BlockPackedReaderIterator#refill().mjava","sourceNew":"  private void refill() throws IOException {\n    final int token = in.readByte() & 0xFF;\n    final boolean minEquals0 = (token & MIN_VALUE_EQUALS_0) != 0;\n    final int bitsPerValue = token >>> BPV_SHIFT;\n    if (bitsPerValue > 64) {\n      throw new IOException(\"Corrupted\");\n    }\n    final long minValue = minEquals0 ? 0L : zigZagDecode(1L + readVLong(in));\n    assert minEquals0 || minValue != 0;\n\n    if (bitsPerValue == 0) {\n      Arrays.fill(values, minValue);\n    } else {\n      final PackedInts.Decoder decoder = PackedInts.getDecoder(PackedInts.Format.PACKED, packedIntsVersion, bitsPerValue);\n      final int iterations = blockSize / decoder.byteValueCount();\n      final int blocksSize = iterations * decoder.byteBlockCount();\n      if (blocks == null || blocks.length < blocksSize) {\n        blocks = new byte[blocksSize];\n      }\n\n      final int valueCount = (int) Math.min(this.valueCount - ord, blockSize);\n      final int blocksCount = (int) PackedInts.Format.PACKED.byteCount(packedIntsVersion, valueCount, bitsPerValue);\n      in.readBytes(blocks, 0, blocksCount);\n\n      decoder.decode(blocks, 0, values, 0, iterations);\n\n      if (minValue != 0) {\n        for (int i = 0; i < valueCount; ++i) {\n          values[i] += minValue;\n        }\n      }\n    }\n    off = 0;\n  }\n\n","sourceOld":"  private void refill() throws IOException {\n    final int token = in.readByte() & 0xFF;\n    final boolean minEquals0 = (token & MIN_VALUE_EQUALS_0) != 0;\n    final int bitsPerValue = token >>> BPV_SHIFT;\n    if (bitsPerValue > 64) {\n      throw new IOException(\"Corrupted\");\n    }\n    final long minValue = minEquals0 ? 0L : zigZagDecode(1L + readVLong(in));\n    assert minEquals0 || minValue != 0;\n\n    if (bitsPerValue == 0) {\n      Arrays.fill(values, minValue);\n    } else {\n      final PackedInts.Decoder decoder = PackedInts.getDecoder(PackedInts.Format.PACKED, packedIntsVersion, bitsPerValue);\n      final int iterations = blockSize / decoder.valueCount();\n      final int blocksSize = iterations * 8 * decoder.blockCount();\n      if (blocks == null || blocks.length < blocksSize) {\n        blocks = new byte[blocksSize];\n      }\n\n      final int valueCount = (int) Math.min(this.valueCount - ord, blockSize);\n      final int blocksCount = (int) PackedInts.Format.PACKED.byteCount(packedIntsVersion, valueCount, bitsPerValue);\n      in.readBytes(blocks, 0, blocksCount);\n\n      decoder.decode(blocks, 0, values, 0, iterations);\n\n      if (minValue != 0) {\n        for (int i = 0; i < valueCount; ++i) {\n          values[i] += minValue;\n        }\n      }\n    }\n    off = 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/BlockPackedReaderIterator#refill().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/BlockPackedReader#refill().mjava","sourceNew":"  private void refill() throws IOException {\n    final int token = in.readByte() & 0xFF;\n    final boolean minEquals0 = (token & MIN_VALUE_EQUALS_0) != 0;\n    final int bitsPerValue = token >>> BPV_SHIFT;\n    if (bitsPerValue > 64) {\n      throw new IOException(\"Corrupted\");\n    }\n    final long minValue = minEquals0 ? 0L : zigZagDecode(1L + readVLong(in));\n    assert minEquals0 || minValue != 0;\n\n    if (bitsPerValue == 0) {\n      Arrays.fill(values, minValue);\n    } else {\n      final PackedInts.Decoder decoder = PackedInts.getDecoder(PackedInts.Format.PACKED, packedIntsVersion, bitsPerValue);\n      final int iterations = blockSize / decoder.byteValueCount();\n      final int blocksSize = iterations * decoder.byteBlockCount();\n      if (blocks == null || blocks.length < blocksSize) {\n        blocks = new byte[blocksSize];\n      }\n\n      final int valueCount = (int) Math.min(this.valueCount - ord, blockSize);\n      final int blocksCount = (int) PackedInts.Format.PACKED.byteCount(packedIntsVersion, valueCount, bitsPerValue);\n      in.readBytes(blocks, 0, blocksCount);\n\n      decoder.decode(blocks, 0, values, 0, iterations);\n\n      if (minValue != 0) {\n        for (int i = 0; i < valueCount; ++i) {\n          values[i] += minValue;\n        }\n      }\n    }\n    off = 0;\n  }\n\n","sourceOld":"  private void refill() throws IOException {\n    final int token = in.readByte() & 0xFF;\n    final boolean minEquals0 = (token & MIN_VALUE_EQUALS_0) != 0;\n    final int bitsPerValue = token >>> BPV_SHIFT;\n    if (bitsPerValue > 64) {\n      throw new IOException(\"Corrupted\");\n    }\n    final long minValue = minEquals0 ? 0L : zigZagDecode(1L + readVLong(in));\n    assert minEquals0 || minValue != 0;\n\n    if (bitsPerValue == 0) {\n      Arrays.fill(values, minValue);\n    } else {\n      final PackedInts.Decoder decoder = PackedInts.getDecoder(PackedInts.Format.PACKED, packedIntsVersion, bitsPerValue);\n      final int iterations = blockSize / decoder.byteValueCount();\n      final int blocksSize = iterations * decoder.byteBlockCount();\n      if (blocks == null || blocks.length < blocksSize) {\n        blocks = new byte[blocksSize];\n      }\n\n      final int valueCount = (int) Math.min(this.valueCount - ord, blockSize);\n      final int blocksCount = (int) PackedInts.Format.PACKED.byteCount(packedIntsVersion, valueCount, bitsPerValue);\n      in.readBytes(blocks, 0, blocksCount);\n\n      decoder.decode(blocks, 0, values, 0, iterations);\n\n      if (minValue != 0) {\n        for (int i = 0; i < valueCount; ++i) {\n          values[i] += minValue;\n        }\n      }\n    }\n    off = 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d4d69c535930b5cce125cff868d40f6373dc27d4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","de522d9303bd67c8473a269a1319125d1f3700e0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"37b84753dc1f66eba4973779932885fe42cde001":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"de522d9303bd67c8473a269a1319125d1f3700e0":["37b84753dc1f66eba4973779932885fe42cde001","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d4d69c535930b5cce125cff868d40f6373dc27d4"]},"commit2Childs":{"d4d69c535930b5cce125cff868d40f6373dc27d4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d4d69c535930b5cce125cff868d40f6373dc27d4","37b84753dc1f66eba4973779932885fe42cde001","de522d9303bd67c8473a269a1319125d1f3700e0"],"37b84753dc1f66eba4973779932885fe42cde001":["de522d9303bd67c8473a269a1319125d1f3700e0"],"de522d9303bd67c8473a269a1319125d1f3700e0":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}