{"path":"solr/core/src/test/org/apache/solr/handler/component/StatsComponentTest#doTestFieldStatisticsResult(String,SolrParams[]).mjava","commits":[{"id":"511309ff970d3c2a68d1ac453cc187df1198f0d1","date":1410303604,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/StatsComponentTest#doTestFieldStatisticsResult(String,SolrParams[]).mjava","pathOld":"/dev/null","sourceNew":"  public void doTestFieldStatisticsResult(String f, SolrParams[] baseParamsSet) throws Exception {\n    assertU(adoc(\"id\", \"1\", f, \"-10\"));\n    assertU(adoc(\"id\", \"2\", f, \"-20\"));\n    assertU(commit());\n    assertU(adoc(\"id\", \"3\", f, \"-30\"));\n    assertU(adoc(\"id\", \"4\", f, \"-40\"));\n    assertU(commit());\n\n    // status should be the same regardless of baseParams\n    for (SolrParams baseParams : baseParamsSet) {\n\n      assertQ(\"test statistics values\", \n              req(baseParams, \"q\", \"*:*\", \"stats.calcdistinct\", \"true\")\n              , \"//double[@name='min'][.='-40.0']\"\n              , \"//double[@name='max'][.='-10.0']\"\n              , \"//double[@name='sum'][.='-100.0']\"\n              , \"//long[@name='count'][.='4']\"\n              , \"//long[@name='missing'][.='0']\"\n              , \"//long[@name='countDistinct'][.='4']\"\n              , \"count(//arr[@name='distinctValues']/*)=4\"\n              , \"//double[@name='sumOfSquares'][.='3000.0']\"\n              , \"//double[@name='mean'][.='-25.0']\"\n              , \"//double[@name='stddev'][.='12.909944487358056']\"\n              );  \n\n      assertQ(\"test statistics w/fq\", \n              req(baseParams, \n                  \"q\", \"*:*\", \"fq\", \"-id:4\",\n                  \"stats.calcdistinct\", \"true\")\n              , \"//double[@name='min'][.='-30.0']\"\n              , \"//double[@name='max'][.='-10.0']\"\n              , \"//double[@name='sum'][.='-60.0']\"\n              , \"//long[@name='count'][.='3']\"\n              , \"//long[@name='missing'][.='0']\"\n              , \"//long[@name='countDistinct'][.='3']\"\n              , \"count(//arr[@name='distinctValues']/*)=3\"\n              , \"//double[@name='sumOfSquares'][.='1400.0']\"\n              , \"//double[@name='mean'][.='-20.0']\"\n              , \"//double[@name='stddev'][.='10.0']\"\n              );  \n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["610c97b96420e614c67797fd43822ebc1d4b7ee2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"610c97b96420e614c67797fd43822ebc1d4b7ee2","date":1410814832,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/StatsComponentTest#doTestFieldStatisticsResult(String,SolrParams[]).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/StatsComponentTest#doTestFieldStatisticsResult(String,SolrParams[]).mjava","sourceNew":"  public void doTestFieldStatisticsResult(String f, SolrParams[] baseParamsSet) throws Exception {\n    // used when doing key overrides in conjunction with the baseParamsSet\n    //\n    // even when these aren't included in the request, using them helps us\n    // test the code path of an exclusion that refers to an fq that doesn't exist\n    final String all_possible_ex = \"fq1,fq2\";\n\n    assertU(adoc(\"id\", \"1\", f, \"-10\"));\n    assertU(adoc(\"id\", \"2\", f, \"-20\"));\n    assertU(commit());\n    assertU(adoc(\"id\", \"3\", f, \"-30\"));\n    assertU(adoc(\"id\", \"4\", f, \"-40\"));\n    assertU(commit());\n\n    final String fpre = XPRE + \"lst[@name='stats_fields']/lst[@name='\"+f+\"']/\";\n\n    final String key = \"key_key\";\n    final String kpre = XPRE + \"lst[@name='stats_fields']/lst[@name='\"+key+\"']/\";\n\n    // status should be the same regardless of baseParams\n    for (SolrParams baseParams : baseParamsSet) {\n      for (String ct : new String[] {\"stats.calcdistinct\", \"f.\"+f+\".stats.calcdistinct\"}) {\n        assertQ(\"test statistics values using: \" + ct, \n                req(baseParams, \"q\", \"*:*\", ct, \"true\")\n                , fpre + \"double[@name='min'][.='-40.0']\"\n                , fpre + \"double[@name='max'][.='-10.0']\"\n                , fpre + \"double[@name='sum'][.='-100.0']\"\n                , fpre + \"long[@name='count'][.='4']\"\n                , fpre + \"long[@name='missing'][.='0']\"\n                , fpre + \"long[@name='countDistinct'][.='4']\"\n                , \"count(\" + fpre + \"arr[@name='distinctValues']/*)=4\"\n                , fpre + \"double[@name='sumOfSquares'][.='3000.0']\"\n                , fpre + \"double[@name='mean'][.='-25.0']\"\n                , fpre + \"double[@name='stddev'][.='12.909944487358056']\"\n                );  \n        \n        assertQ(\"test statistics w/fq using: \" + ct, \n                req(baseParams, \"q\", \"*:*\", \"fq\", \"-id:4\", ct, \"true\")\n                , fpre + \"double[@name='min'][.='-30.0']\"\n                , fpre + \"double[@name='max'][.='-10.0']\"\n                , fpre + \"double[@name='sum'][.='-60.0']\"\n                , fpre + \"long[@name='count'][.='3']\"\n                , fpre + \"long[@name='missing'][.='0']\"\n                , fpre + \"long[@name='countDistinct'][.='3']\"\n                , \"count(\" + fpre + \"arr[@name='distinctValues']/*)=3\"\n                , fpre + \"double[@name='sumOfSquares'][.='1400.0']\"\n                , fpre + \"double[@name='mean'][.='-20.0']\"\n                , fpre + \"double[@name='stddev'][.='10.0']\"\n                );  \n        \n        // now do both in a single query\n\n        assertQ(\"test statistics w & w/fq via key override using: \" + ct, \n                req(baseParams, \"q\", \"*:*\", ct, \"true\",\n                    \"fq\", \"{!tag=key_ex_tag}-id:4\", \n                    \"stats.field\", \"{!key=\"+key+\" ex=key_ex_tag,\"+all_possible_ex+\"}\"+f)\n\n                // field name key, fq is applied\n                , fpre + \"double[@name='min'][.='-30.0']\"\n                , fpre + \"double[@name='max'][.='-10.0']\"\n                , fpre + \"double[@name='sum'][.='-60.0']\"\n                , fpre + \"long[@name='count'][.='3']\"\n                , fpre + \"long[@name='missing'][.='0']\"\n                , fpre + \"long[@name='countDistinct'][.='3']\"\n                , \"count(\" + fpre + \"arr[@name='distinctValues']/*)=3\"\n                , fpre + \"double[@name='sumOfSquares'][.='1400.0']\"\n                , fpre + \"double[@name='mean'][.='-20.0']\"\n                , fpre + \"double[@name='stddev'][.='10.0']\"\n\n                // overridden key, fq is excluded\n                , kpre + \"double[@name='min'][.='-40.0']\"\n                , kpre + \"double[@name='max'][.='-10.0']\"\n                , kpre + \"double[@name='sum'][.='-100.0']\"\n                , kpre + \"long[@name='count'][.='4']\"\n                , kpre + \"long[@name='missing'][.='0']\"\n                , kpre + \"long[@name='countDistinct'][.='4']\"\n                , \"count(\" + kpre + \"arr[@name='distinctValues']/*)=4\"\n                , kpre + \"double[@name='sumOfSquares'][.='3000.0']\"\n                , kpre + \"double[@name='mean'][.='-25.0']\"\n                , kpre + \"double[@name='stddev'][.='12.909944487358056']\"\n\n                );  \n\n        \n\n      }\n    }\n\n  }\n\n","sourceOld":"  public void doTestFieldStatisticsResult(String f, SolrParams[] baseParamsSet) throws Exception {\n    assertU(adoc(\"id\", \"1\", f, \"-10\"));\n    assertU(adoc(\"id\", \"2\", f, \"-20\"));\n    assertU(commit());\n    assertU(adoc(\"id\", \"3\", f, \"-30\"));\n    assertU(adoc(\"id\", \"4\", f, \"-40\"));\n    assertU(commit());\n\n    // status should be the same regardless of baseParams\n    for (SolrParams baseParams : baseParamsSet) {\n\n      assertQ(\"test statistics values\", \n              req(baseParams, \"q\", \"*:*\", \"stats.calcdistinct\", \"true\")\n              , \"//double[@name='min'][.='-40.0']\"\n              , \"//double[@name='max'][.='-10.0']\"\n              , \"//double[@name='sum'][.='-100.0']\"\n              , \"//long[@name='count'][.='4']\"\n              , \"//long[@name='missing'][.='0']\"\n              , \"//long[@name='countDistinct'][.='4']\"\n              , \"count(//arr[@name='distinctValues']/*)=4\"\n              , \"//double[@name='sumOfSquares'][.='3000.0']\"\n              , \"//double[@name='mean'][.='-25.0']\"\n              , \"//double[@name='stddev'][.='12.909944487358056']\"\n              );  \n\n      assertQ(\"test statistics w/fq\", \n              req(baseParams, \n                  \"q\", \"*:*\", \"fq\", \"-id:4\",\n                  \"stats.calcdistinct\", \"true\")\n              , \"//double[@name='min'][.='-30.0']\"\n              , \"//double[@name='max'][.='-10.0']\"\n              , \"//double[@name='sum'][.='-60.0']\"\n              , \"//long[@name='count'][.='3']\"\n              , \"//long[@name='missing'][.='0']\"\n              , \"//long[@name='countDistinct'][.='3']\"\n              , \"count(//arr[@name='distinctValues']/*)=3\"\n              , \"//double[@name='sumOfSquares'][.='1400.0']\"\n              , \"//double[@name='mean'][.='-20.0']\"\n              , \"//double[@name='stddev'][.='10.0']\"\n              );  \n    }\n  }\n\n","bugFix":["511309ff970d3c2a68d1ac453cc187df1198f0d1"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"283ff02f401ec3e7a2fad73643970f052383fb0c","date":1411407953,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/StatsComponentTest#doTestFieldStatisticsResult(String,SolrParams[]).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/StatsComponentTest#doTestFieldStatisticsResult(String,SolrParams[]).mjava","sourceNew":"  public void doTestFieldStatisticsResult(String f, SolrParams[] baseParamsSet) throws Exception {\n    // used when doing key overrides in conjunction with the baseParamsSet\n    //\n    // even when these aren't included in the request, using them helps us\n    // test the code path of an exclusion that refers to an fq that doesn't exist\n    final String all_possible_ex = \"fq1,fq2\";\n\n    assertU(adoc(\"id\", \"1\", f, \"-10\"));\n    assertU(adoc(\"id\", \"2\", f, \"-20\"));\n    assertU(commit());\n    assertU(adoc(\"id\", \"3\", f, \"-30\"));\n    assertU(adoc(\"id\", \"4\", f, \"-40\"));\n    assertU(commit());\n\n    final String fpre = XPRE + \"lst[@name='stats_fields']/lst[@name='\"+f+\"']/\";\n\n    final String key = \"key_key\";\n    final String kpre = XPRE + \"lst[@name='stats_fields']/lst[@name='\"+key+\"']/\";\n\n    // status should be the same regardless of baseParams\n    for (SolrParams baseParams : baseParamsSet) {\n      for (String ct : new String[] {\"stats.calcdistinct\", \"f.\"+f+\".stats.calcdistinct\"}) {\n        assertQ(\"test statistics values using: \" + ct, \n                req(baseParams, \"q\", \"*:*\", ct, \"true\")\n                , fpre + \"double[@name='min'][.='-40.0']\"\n                , fpre + \"double[@name='max'][.='-10.0']\"\n                , fpre + \"double[@name='sum'][.='-100.0']\"\n                , fpre + \"long[@name='count'][.='4']\"\n                , fpre + \"long[@name='missing'][.='0']\"\n                , fpre + \"long[@name='countDistinct'][.='4']\"\n                , \"count(\" + fpre + \"arr[@name='distinctValues']/*)=4\"\n                , fpre + \"double[@name='sumOfSquares'][.='3000.0']\"\n                , fpre + \"double[@name='mean'][.='-25.0']\"\n                , fpre + \"double[@name='stddev'][.='12.909944487358056']\"\n                );  \n        \n        assertQ(\"test statistics w/fq using: \" + ct, \n                req(baseParams, \"q\", \"*:*\", \"fq\", \"-id:4\", ct, \"true\")\n                , fpre + \"double[@name='min'][.='-30.0']\"\n                , fpre + \"double[@name='max'][.='-10.0']\"\n                , fpre + \"double[@name='sum'][.='-60.0']\"\n                , fpre + \"long[@name='count'][.='3']\"\n                , fpre + \"long[@name='missing'][.='0']\"\n                , fpre + \"long[@name='countDistinct'][.='3']\"\n                , \"count(\" + fpre + \"arr[@name='distinctValues']/*)=3\"\n                , fpre + \"double[@name='sumOfSquares'][.='1400.0']\"\n                , fpre + \"double[@name='mean'][.='-20.0']\"\n                , fpre + \"double[@name='stddev'][.='10.0']\"\n                );  \n        \n        // now do both in a single query\n\n        assertQ(\"test statistics w & w/fq via key override using: \" + ct, \n                req(baseParams, \"q\", \"*:*\", ct, \"true\",\n                    \"fq\", \"{!tag=key_ex_tag}-id:4\", \n                    \"stats.field\", \"{!key=\"+key+\" ex=key_ex_tag,\"+all_possible_ex+\"}\"+f)\n\n                // field name key, fq is applied\n                , fpre + \"double[@name='min'][.='-30.0']\"\n                , fpre + \"double[@name='max'][.='-10.0']\"\n                , fpre + \"double[@name='sum'][.='-60.0']\"\n                , fpre + \"long[@name='count'][.='3']\"\n                , fpre + \"long[@name='missing'][.='0']\"\n                , fpre + \"long[@name='countDistinct'][.='3']\"\n                , \"count(\" + fpre + \"arr[@name='distinctValues']/*)=3\"\n                , fpre + \"double[@name='sumOfSquares'][.='1400.0']\"\n                , fpre + \"double[@name='mean'][.='-20.0']\"\n                , fpre + \"double[@name='stddev'][.='10.0']\"\n\n                // overridden key, fq is excluded\n                , kpre + \"double[@name='min'][.='-40.0']\"\n                , kpre + \"double[@name='max'][.='-10.0']\"\n                , kpre + \"double[@name='sum'][.='-100.0']\"\n                , kpre + \"long[@name='count'][.='4']\"\n                , kpre + \"long[@name='missing'][.='0']\"\n                , kpre + \"long[@name='countDistinct'][.='4']\"\n                , \"count(\" + kpre + \"arr[@name='distinctValues']/*)=4\"\n                , kpre + \"double[@name='sumOfSquares'][.='3000.0']\"\n                , kpre + \"double[@name='mean'][.='-25.0']\"\n                , kpre + \"double[@name='stddev'][.='12.909944487358056']\"\n\n                );\n\n      }\n    }\n\n    // we should be able to compute exact same stats for a field even\n    // when we specify it using the \"field()\" function, or use other \n    // identify equivilent functions\n    for (String param : new String[] {\n        // bare\n        \"{!key=\"+key+\" ex=key_ex_tag}\" + f,\n        \"{!key=\"+key+\" ex=key_ex_tag v=\"+f+\"}\",\n        // field func\n        \"{!lucene key=\"+key+\" ex=key_ex_tag}_val_:\\\"field(\"+f+\")\\\"\",\n        \"{!func key=\"+key+\" ex=key_ex_tag}field(\"+f+\")\",\n        \"{!type=func key=\"+key+\" ex=key_ex_tag}field(\"+f+\")\",\n        \"{!type=func key=\"+key+\" ex=key_ex_tag v=field(\"+f+\")}\",\n        \"{!type=func key=\"+key+\" ex=key_ex_tag v='field(\"+f+\")'}\",\n        // identity math functions\n        \"{!type=func key=\"+key+\" ex=key_ex_tag v='sum(0,\"+f+\")'}\",\n        \"{!type=func key=\"+key+\" ex=key_ex_tag v='product(1,\"+f+\")'}\",\n      }) {\n      \n      assertQ(\"test statistics over field specified as a function: \" + param,\n              // NOTE: baseParams aren't used, we're looking at the function\n              req(\"q\", \"*:*\", \"stats\", \"true\", \"stats.calcdistinct\", \"true\",\n                  \"fq\", \"{!tag=key_ex_tag}-id:4\", \n                  \"stats.field\", param)\n              \n              , kpre + \"double[@name='min'][.='-40.0']\"\n              , kpre + \"double[@name='max'][.='-10.0']\"\n              , kpre + \"double[@name='sum'][.='-100.0']\"\n              , kpre + \"long[@name='count'][.='4']\"\n              , kpre + \"long[@name='missing'][.='0']\"\n              , kpre + \"long[@name='countDistinct'][.='4']\"\n              , \"count(\" + kpre + \"arr[@name='distinctValues']/*)=4\"\n              , kpre + \"double[@name='sumOfSquares'][.='3000.0']\"\n              , kpre + \"double[@name='mean'][.='-25.0']\"\n              , kpre + \"double[@name='stddev'][.='12.909944487358056']\"\n              \n              );\n    }\n    \n    // now get stats over a non-trivial function on our (single) field\n    String func = \"product(2, \" + f + \")\";\n    assertQ(\"test function statistics & key override\", \n            // NOTE: baseParams aren't used, we're looking at the function\n            req(\"q\", \"*:*\", \"stats\", \"true\", \"stats.calcdistinct\", \"true\",\n                \"fq\", \"{!tag=key_ex_tag}-id:4\", \n                \"stats.field\", \"{!func key=\"+key+\" ex=key_ex_tag}\"+func)\n\n            , kpre + \"double[@name='min'][.='-80.0']\"\n            , kpre + \"double[@name='max'][.='-20.0']\"\n            , kpre + \"double[@name='sum'][.='-200.0']\"\n            , kpre + \"long[@name='count'][.='4']\"\n            , kpre + \"long[@name='missing'][.='0']\"\n            , kpre + \"long[@name='countDistinct'][.='4']\"\n            , \"count(\" + kpre + \"arr[@name='distinctValues']/*)=4\"\n            , kpre + \"double[@name='sumOfSquares'][.='12000.0']\"\n            , kpre + \"double[@name='mean'][.='-50.0']\" \n            , kpre + \"double[@name='stddev'][.='25.81988897471611']\"\n            );\n  }\n\n","sourceOld":"  public void doTestFieldStatisticsResult(String f, SolrParams[] baseParamsSet) throws Exception {\n    // used when doing key overrides in conjunction with the baseParamsSet\n    //\n    // even when these aren't included in the request, using them helps us\n    // test the code path of an exclusion that refers to an fq that doesn't exist\n    final String all_possible_ex = \"fq1,fq2\";\n\n    assertU(adoc(\"id\", \"1\", f, \"-10\"));\n    assertU(adoc(\"id\", \"2\", f, \"-20\"));\n    assertU(commit());\n    assertU(adoc(\"id\", \"3\", f, \"-30\"));\n    assertU(adoc(\"id\", \"4\", f, \"-40\"));\n    assertU(commit());\n\n    final String fpre = XPRE + \"lst[@name='stats_fields']/lst[@name='\"+f+\"']/\";\n\n    final String key = \"key_key\";\n    final String kpre = XPRE + \"lst[@name='stats_fields']/lst[@name='\"+key+\"']/\";\n\n    // status should be the same regardless of baseParams\n    for (SolrParams baseParams : baseParamsSet) {\n      for (String ct : new String[] {\"stats.calcdistinct\", \"f.\"+f+\".stats.calcdistinct\"}) {\n        assertQ(\"test statistics values using: \" + ct, \n                req(baseParams, \"q\", \"*:*\", ct, \"true\")\n                , fpre + \"double[@name='min'][.='-40.0']\"\n                , fpre + \"double[@name='max'][.='-10.0']\"\n                , fpre + \"double[@name='sum'][.='-100.0']\"\n                , fpre + \"long[@name='count'][.='4']\"\n                , fpre + \"long[@name='missing'][.='0']\"\n                , fpre + \"long[@name='countDistinct'][.='4']\"\n                , \"count(\" + fpre + \"arr[@name='distinctValues']/*)=4\"\n                , fpre + \"double[@name='sumOfSquares'][.='3000.0']\"\n                , fpre + \"double[@name='mean'][.='-25.0']\"\n                , fpre + \"double[@name='stddev'][.='12.909944487358056']\"\n                );  \n        \n        assertQ(\"test statistics w/fq using: \" + ct, \n                req(baseParams, \"q\", \"*:*\", \"fq\", \"-id:4\", ct, \"true\")\n                , fpre + \"double[@name='min'][.='-30.0']\"\n                , fpre + \"double[@name='max'][.='-10.0']\"\n                , fpre + \"double[@name='sum'][.='-60.0']\"\n                , fpre + \"long[@name='count'][.='3']\"\n                , fpre + \"long[@name='missing'][.='0']\"\n                , fpre + \"long[@name='countDistinct'][.='3']\"\n                , \"count(\" + fpre + \"arr[@name='distinctValues']/*)=3\"\n                , fpre + \"double[@name='sumOfSquares'][.='1400.0']\"\n                , fpre + \"double[@name='mean'][.='-20.0']\"\n                , fpre + \"double[@name='stddev'][.='10.0']\"\n                );  \n        \n        // now do both in a single query\n\n        assertQ(\"test statistics w & w/fq via key override using: \" + ct, \n                req(baseParams, \"q\", \"*:*\", ct, \"true\",\n                    \"fq\", \"{!tag=key_ex_tag}-id:4\", \n                    \"stats.field\", \"{!key=\"+key+\" ex=key_ex_tag,\"+all_possible_ex+\"}\"+f)\n\n                // field name key, fq is applied\n                , fpre + \"double[@name='min'][.='-30.0']\"\n                , fpre + \"double[@name='max'][.='-10.0']\"\n                , fpre + \"double[@name='sum'][.='-60.0']\"\n                , fpre + \"long[@name='count'][.='3']\"\n                , fpre + \"long[@name='missing'][.='0']\"\n                , fpre + \"long[@name='countDistinct'][.='3']\"\n                , \"count(\" + fpre + \"arr[@name='distinctValues']/*)=3\"\n                , fpre + \"double[@name='sumOfSquares'][.='1400.0']\"\n                , fpre + \"double[@name='mean'][.='-20.0']\"\n                , fpre + \"double[@name='stddev'][.='10.0']\"\n\n                // overridden key, fq is excluded\n                , kpre + \"double[@name='min'][.='-40.0']\"\n                , kpre + \"double[@name='max'][.='-10.0']\"\n                , kpre + \"double[@name='sum'][.='-100.0']\"\n                , kpre + \"long[@name='count'][.='4']\"\n                , kpre + \"long[@name='missing'][.='0']\"\n                , kpre + \"long[@name='countDistinct'][.='4']\"\n                , \"count(\" + kpre + \"arr[@name='distinctValues']/*)=4\"\n                , kpre + \"double[@name='sumOfSquares'][.='3000.0']\"\n                , kpre + \"double[@name='mean'][.='-25.0']\"\n                , kpre + \"double[@name='stddev'][.='12.909944487358056']\"\n\n                );  \n\n        \n\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":["9f4251f14d2db68330fc1e6f0495c053a905d560"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4a4e2c829188fb99886a64558664d79c9ac0fdf1","date":1431021538,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/StatsComponentTest#doTestFieldStatisticsResult(String,SolrParams[]).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/StatsComponentTest#doTestFieldStatisticsResult(String,SolrParams[]).mjava","sourceNew":"  public void doTestFieldStatisticsResult(String f, SolrParams[] baseParamsSet) throws Exception {\n    // used when doing key overrides in conjunction with the baseParamsSet\n    //\n    // even when these aren't included in the request, using them helps us\n    // test the code path of an exclusion that refers to an fq that doesn't exist\n    final String all_possible_ex = \"fq1,fq2\";\n\n    assertU(adoc(\"id\", \"1\", f, \"-10\"));\n    assertU(adoc(\"id\", \"2\", f, \"-20\"));\n    assertU(commit());\n    assertU(adoc(\"id\", \"3\", f, \"-30\"));\n    assertU(adoc(\"id\", \"4\", f, \"-40\"));\n    assertU(commit());\n\n    final String fpre = XPRE + \"lst[@name='stats_fields']/lst[@name='\"+f+\"']/\";\n\n    final String key = \"key_key\";\n    final String kpre = XPRE + \"lst[@name='stats_fields']/lst[@name='\"+key+\"']/\";\n\n    // status should be the same regardless of baseParams\n    for (SolrParams baseParams : baseParamsSet) {\n      for (String ct : new String[] {\"stats.calcdistinct\", \"f.\"+f+\".stats.calcdistinct\"}) {\n        assertQ(\"test statistics values using: \" + ct, \n                req(baseParams, \"q\", \"*:*\", ct, \"true\")\n                , fpre + \"double[@name='min'][.='-40.0']\"\n                , fpre + \"double[@name='max'][.='-10.0']\"\n                , fpre + \"double[@name='sum'][.='-100.0']\"\n                , fpre + \"long[@name='count'][.='4']\"\n                , fpre + \"long[@name='missing'][.='0']\"\n                , fpre + \"long[@name='countDistinct'][.='4']\"\n                , \"count(\" + fpre + \"arr[@name='distinctValues']/*)=4\"\n                , fpre + \"double[@name='sumOfSquares'][.='3000.0']\"\n                , fpre + \"double[@name='mean'][.='-25.0']\"\n                , fpre + \"double[@name='stddev'][.='12.909944487358056']\"\n                );  \n        \n        assertQ(\"test statistics w/fq using: \" + ct, \n                req(baseParams, \"q\", \"*:*\", \"fq\", \"-id:4\", ct, \"true\")\n                , fpre + \"double[@name='min'][.='-30.0']\"\n                , fpre + \"double[@name='max'][.='-10.0']\"\n                , fpre + \"double[@name='sum'][.='-60.0']\"\n                , fpre + \"long[@name='count'][.='3']\"\n                , fpre + \"long[@name='missing'][.='0']\"\n                , fpre + \"long[@name='countDistinct'][.='3']\"\n                , \"count(\" + fpre + \"arr[@name='distinctValues']/*)=3\"\n                , fpre + \"double[@name='sumOfSquares'][.='1400.0']\"\n                , fpre + \"double[@name='mean'][.='-20.0']\"\n                , fpre + \"double[@name='stddev'][.='10.0']\"\n                );  \n        \n        // now do both in a single query\n\n        assertQ(\"test statistics w & w/fq via key override using: \" + ct, \n                req(baseParams, \"q\", \"*:*\", ct, \"true\",\n                    \"fq\", \"{!tag=key_ex_tag}-id:4\", \n                    \"stats.field\", \"{!key=\"+key+\" ex=key_ex_tag,\"+all_possible_ex+\"}\"+f)\n\n                // field name key, fq is applied\n                , fpre + \"double[@name='min'][.='-30.0']\"\n                , fpre + \"double[@name='max'][.='-10.0']\"\n                , fpre + \"double[@name='sum'][.='-60.0']\"\n                , fpre + \"long[@name='count'][.='3']\"\n                , fpre + \"long[@name='missing'][.='0']\"\n                , fpre + \"long[@name='countDistinct'][.='3']\"\n                , \"count(\" + fpre + \"arr[@name='distinctValues']/*)=3\"\n                , fpre + \"double[@name='sumOfSquares'][.='1400.0']\"\n                , fpre + \"double[@name='mean'][.='-20.0']\"\n                , fpre + \"double[@name='stddev'][.='10.0']\"\n\n                // overridden key, fq is excluded\n                , kpre + \"double[@name='min'][.='-40.0']\"\n                , kpre + \"double[@name='max'][.='-10.0']\"\n                , kpre + \"double[@name='sum'][.='-100.0']\"\n                , kpre + \"long[@name='count'][.='4']\"\n                , kpre + \"long[@name='missing'][.='0']\"\n                , kpre + \"long[@name='countDistinct'][.='4']\"\n                , \"count(\" + kpre + \"arr[@name='distinctValues']/*)=4\"\n                , kpre + \"double[@name='sumOfSquares'][.='3000.0']\"\n                , kpre + \"double[@name='mean'][.='-25.0']\"\n                , kpre + \"double[@name='stddev'][.='12.909944487358056']\"\n\n                );\n      }\n    }\n\n    // we should be able to compute exact same stats for a field even\n    // when we specify it using the \"field()\" function, or use other \n    // identify equivilent functions\n    for (String param : new String[] {\n        // bare\n        \"{!key=\"+key+\" ex=key_ex_tag}\" + f,\n        \"{!key=\"+key+\" ex=key_ex_tag v=\"+f+\"}\",\n        // field func\n        \"{!lucene key=\"+key+\" ex=key_ex_tag}_val_:\\\"field(\"+f+\")\\\"\",\n        \"{!func key=\"+key+\" ex=key_ex_tag}field(\"+f+\")\",\n        \"{!type=func key=\"+key+\" ex=key_ex_tag}field(\"+f+\")\",\n        \"{!type=func key=\"+key+\" ex=key_ex_tag v=field(\"+f+\")}\",\n        \"{!type=func key=\"+key+\" ex=key_ex_tag v='field(\"+f+\")'}\",\n        // identity math functions\n        \"{!type=func key=\"+key+\" ex=key_ex_tag v='sum(0,\"+f+\")'}\",\n        \"{!type=func key=\"+key+\" ex=key_ex_tag v='product(1,\"+f+\")'}\",\n      }) {\n      \n      assertQ(\"test statistics over field specified as a function: \" + param,\n              // NOTE: baseParams aren't used, we're looking at the function\n              req(\"q\", \"*:*\", \"stats\", \"true\", \"stats.calcdistinct\", \"true\",\n                  \"fq\", \"{!tag=key_ex_tag}-id:4\", \n                  \"stats.field\", param)\n              \n              , kpre + \"double[@name='min'][.='-40.0']\"\n              , kpre + \"double[@name='max'][.='-10.0']\"\n              , kpre + \"double[@name='sum'][.='-100.0']\"\n              , kpre + \"long[@name='count'][.='4']\"\n              , kpre + \"long[@name='missing'][.='0']\"\n              , kpre + \"long[@name='countDistinct'][.='4']\"\n              , \"count(\" + kpre + \"arr[@name='distinctValues']/*)=4\"\n              , kpre + \"double[@name='sumOfSquares'][.='3000.0']\"\n              , kpre + \"double[@name='mean'][.='-25.0']\"\n              , kpre + \"double[@name='stddev'][.='12.909944487358056']\"\n              \n              );\n    }\n    \n    // now get stats over a non-trivial function on our (single) field\n    String func = \"product(2, \" + f + \")\";\n    assertQ(\"test function statistics & key override\", \n            // NOTE: baseParams aren't used, we're looking at the function\n            req(\"q\", \"*:*\", \"stats\", \"true\", \"stats.calcdistinct\", \"true\",\n                \"fq\", \"{!tag=key_ex_tag}-id:4\", \n                \"stats.field\", \"{!func key=\"+key+\" ex=key_ex_tag}\"+func)\n\n            , kpre + \"double[@name='min'][.='-80.0']\"\n            , kpre + \"double[@name='max'][.='-20.0']\"\n            , kpre + \"double[@name='sum'][.='-200.0']\"\n            , kpre + \"long[@name='count'][.='4']\"\n            , kpre + \"long[@name='missing'][.='0']\"\n            , kpre + \"long[@name='countDistinct'][.='4']\"\n            , \"count(\" + kpre + \"arr[@name='distinctValues']/*)=4\"\n            , kpre + \"double[@name='sumOfSquares'][.='12000.0']\"\n            , kpre + \"double[@name='mean'][.='-50.0']\" \n            , kpre + \"double[@name='stddev'][.='25.81988897471611']\"\n            );\n\n    // simple cardinality over a numeric field\n    assertQ(\"test function statistics & key override\", \n            // NOTE: baseParams aren't used, we're looking only at the cardinality\n            req(\"q\", \"*:*\", \"stats\", \"true\",\n                \"fq\", \"{!tag=key_ex_tag}-id:4\", \n                \"stats.field\", \"{!key=\"+key+\" cardinality=true}\"+f)\n\n            , kpre + \"long[@name='cardinality'][.='3']\"\n            , \"count(\" + kpre + \"/*)=1\"\n            );\n  }\n\n","sourceOld":"  public void doTestFieldStatisticsResult(String f, SolrParams[] baseParamsSet) throws Exception {\n    // used when doing key overrides in conjunction with the baseParamsSet\n    //\n    // even when these aren't included in the request, using them helps us\n    // test the code path of an exclusion that refers to an fq that doesn't exist\n    final String all_possible_ex = \"fq1,fq2\";\n\n    assertU(adoc(\"id\", \"1\", f, \"-10\"));\n    assertU(adoc(\"id\", \"2\", f, \"-20\"));\n    assertU(commit());\n    assertU(adoc(\"id\", \"3\", f, \"-30\"));\n    assertU(adoc(\"id\", \"4\", f, \"-40\"));\n    assertU(commit());\n\n    final String fpre = XPRE + \"lst[@name='stats_fields']/lst[@name='\"+f+\"']/\";\n\n    final String key = \"key_key\";\n    final String kpre = XPRE + \"lst[@name='stats_fields']/lst[@name='\"+key+\"']/\";\n\n    // status should be the same regardless of baseParams\n    for (SolrParams baseParams : baseParamsSet) {\n      for (String ct : new String[] {\"stats.calcdistinct\", \"f.\"+f+\".stats.calcdistinct\"}) {\n        assertQ(\"test statistics values using: \" + ct, \n                req(baseParams, \"q\", \"*:*\", ct, \"true\")\n                , fpre + \"double[@name='min'][.='-40.0']\"\n                , fpre + \"double[@name='max'][.='-10.0']\"\n                , fpre + \"double[@name='sum'][.='-100.0']\"\n                , fpre + \"long[@name='count'][.='4']\"\n                , fpre + \"long[@name='missing'][.='0']\"\n                , fpre + \"long[@name='countDistinct'][.='4']\"\n                , \"count(\" + fpre + \"arr[@name='distinctValues']/*)=4\"\n                , fpre + \"double[@name='sumOfSquares'][.='3000.0']\"\n                , fpre + \"double[@name='mean'][.='-25.0']\"\n                , fpre + \"double[@name='stddev'][.='12.909944487358056']\"\n                );  \n        \n        assertQ(\"test statistics w/fq using: \" + ct, \n                req(baseParams, \"q\", \"*:*\", \"fq\", \"-id:4\", ct, \"true\")\n                , fpre + \"double[@name='min'][.='-30.0']\"\n                , fpre + \"double[@name='max'][.='-10.0']\"\n                , fpre + \"double[@name='sum'][.='-60.0']\"\n                , fpre + \"long[@name='count'][.='3']\"\n                , fpre + \"long[@name='missing'][.='0']\"\n                , fpre + \"long[@name='countDistinct'][.='3']\"\n                , \"count(\" + fpre + \"arr[@name='distinctValues']/*)=3\"\n                , fpre + \"double[@name='sumOfSquares'][.='1400.0']\"\n                , fpre + \"double[@name='mean'][.='-20.0']\"\n                , fpre + \"double[@name='stddev'][.='10.0']\"\n                );  \n        \n        // now do both in a single query\n\n        assertQ(\"test statistics w & w/fq via key override using: \" + ct, \n                req(baseParams, \"q\", \"*:*\", ct, \"true\",\n                    \"fq\", \"{!tag=key_ex_tag}-id:4\", \n                    \"stats.field\", \"{!key=\"+key+\" ex=key_ex_tag,\"+all_possible_ex+\"}\"+f)\n\n                // field name key, fq is applied\n                , fpre + \"double[@name='min'][.='-30.0']\"\n                , fpre + \"double[@name='max'][.='-10.0']\"\n                , fpre + \"double[@name='sum'][.='-60.0']\"\n                , fpre + \"long[@name='count'][.='3']\"\n                , fpre + \"long[@name='missing'][.='0']\"\n                , fpre + \"long[@name='countDistinct'][.='3']\"\n                , \"count(\" + fpre + \"arr[@name='distinctValues']/*)=3\"\n                , fpre + \"double[@name='sumOfSquares'][.='1400.0']\"\n                , fpre + \"double[@name='mean'][.='-20.0']\"\n                , fpre + \"double[@name='stddev'][.='10.0']\"\n\n                // overridden key, fq is excluded\n                , kpre + \"double[@name='min'][.='-40.0']\"\n                , kpre + \"double[@name='max'][.='-10.0']\"\n                , kpre + \"double[@name='sum'][.='-100.0']\"\n                , kpre + \"long[@name='count'][.='4']\"\n                , kpre + \"long[@name='missing'][.='0']\"\n                , kpre + \"long[@name='countDistinct'][.='4']\"\n                , \"count(\" + kpre + \"arr[@name='distinctValues']/*)=4\"\n                , kpre + \"double[@name='sumOfSquares'][.='3000.0']\"\n                , kpre + \"double[@name='mean'][.='-25.0']\"\n                , kpre + \"double[@name='stddev'][.='12.909944487358056']\"\n\n                );\n\n      }\n    }\n\n    // we should be able to compute exact same stats for a field even\n    // when we specify it using the \"field()\" function, or use other \n    // identify equivilent functions\n    for (String param : new String[] {\n        // bare\n        \"{!key=\"+key+\" ex=key_ex_tag}\" + f,\n        \"{!key=\"+key+\" ex=key_ex_tag v=\"+f+\"}\",\n        // field func\n        \"{!lucene key=\"+key+\" ex=key_ex_tag}_val_:\\\"field(\"+f+\")\\\"\",\n        \"{!func key=\"+key+\" ex=key_ex_tag}field(\"+f+\")\",\n        \"{!type=func key=\"+key+\" ex=key_ex_tag}field(\"+f+\")\",\n        \"{!type=func key=\"+key+\" ex=key_ex_tag v=field(\"+f+\")}\",\n        \"{!type=func key=\"+key+\" ex=key_ex_tag v='field(\"+f+\")'}\",\n        // identity math functions\n        \"{!type=func key=\"+key+\" ex=key_ex_tag v='sum(0,\"+f+\")'}\",\n        \"{!type=func key=\"+key+\" ex=key_ex_tag v='product(1,\"+f+\")'}\",\n      }) {\n      \n      assertQ(\"test statistics over field specified as a function: \" + param,\n              // NOTE: baseParams aren't used, we're looking at the function\n              req(\"q\", \"*:*\", \"stats\", \"true\", \"stats.calcdistinct\", \"true\",\n                  \"fq\", \"{!tag=key_ex_tag}-id:4\", \n                  \"stats.field\", param)\n              \n              , kpre + \"double[@name='min'][.='-40.0']\"\n              , kpre + \"double[@name='max'][.='-10.0']\"\n              , kpre + \"double[@name='sum'][.='-100.0']\"\n              , kpre + \"long[@name='count'][.='4']\"\n              , kpre + \"long[@name='missing'][.='0']\"\n              , kpre + \"long[@name='countDistinct'][.='4']\"\n              , \"count(\" + kpre + \"arr[@name='distinctValues']/*)=4\"\n              , kpre + \"double[@name='sumOfSquares'][.='3000.0']\"\n              , kpre + \"double[@name='mean'][.='-25.0']\"\n              , kpre + \"double[@name='stddev'][.='12.909944487358056']\"\n              \n              );\n    }\n    \n    // now get stats over a non-trivial function on our (single) field\n    String func = \"product(2, \" + f + \")\";\n    assertQ(\"test function statistics & key override\", \n            // NOTE: baseParams aren't used, we're looking at the function\n            req(\"q\", \"*:*\", \"stats\", \"true\", \"stats.calcdistinct\", \"true\",\n                \"fq\", \"{!tag=key_ex_tag}-id:4\", \n                \"stats.field\", \"{!func key=\"+key+\" ex=key_ex_tag}\"+func)\n\n            , kpre + \"double[@name='min'][.='-80.0']\"\n            , kpre + \"double[@name='max'][.='-20.0']\"\n            , kpre + \"double[@name='sum'][.='-200.0']\"\n            , kpre + \"long[@name='count'][.='4']\"\n            , kpre + \"long[@name='missing'][.='0']\"\n            , kpre + \"long[@name='countDistinct'][.='4']\"\n            , \"count(\" + kpre + \"arr[@name='distinctValues']/*)=4\"\n            , kpre + \"double[@name='sumOfSquares'][.='12000.0']\"\n            , kpre + \"double[@name='mean'][.='-50.0']\" \n            , kpre + \"double[@name='stddev'][.='25.81988897471611']\"\n            );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9f4251f14d2db68330fc1e6f0495c053a905d560","date":1537116380,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/StatsComponentTest#doTestFieldStatisticsResult(String,SolrParams[]).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/StatsComponentTest#doTestFieldStatisticsResult(String,SolrParams[]).mjava","sourceNew":"  public void doTestFieldStatisticsResult(String f, SolrParams[] baseParamsSet) throws Exception {\n    // used when doing key overrides in conjunction with the baseParamsSet\n    //\n    // even when these aren't included in the request, using them helps us\n    // test the code path of an exclusion that refers to an fq that doesn't exist\n    final String all_possible_ex = \"fq1,fq2\";\n\n    assertU(adoc(\"id\", \"1\", f, \"-10\"));\n    assertU(adoc(\"id\", \"2\", f, \"-20\"));\n    assertU(commit());\n    assertU(adoc(\"id\", \"3\", f, \"-30\"));\n    assertU(adoc(\"id\", \"4\", f, \"-40\"));\n    assertU(commit());\n\n    final String fpre = XPRE + \"lst[@name='stats_fields']/lst[@name='\"+f+\"']/\";\n\n    final String key = \"key_key\";\n    final String kpre = XPRE + \"lst[@name='stats_fields']/lst[@name='\"+key+\"']/\";\n\n    // status should be the same regardless of baseParams\n    for (SolrParams baseParams : baseParamsSet) {\n      for (String ct : new String[] {\"stats.calcdistinct\", \"f.\"+f+\".stats.calcdistinct\"}) {\n        assertQ(\"test statistics values using: \" + ct, \n                req(baseParams, \"q\", \"*:*\", ct, \"true\")\n                , fpre + \"double[@name='min'][.='-40.0']\"\n                , fpre + \"double[@name='max'][.='-10.0']\"\n                , fpre + \"double[@name='sum'][.='-100.0']\"\n                , fpre + \"long[@name='count'][.='4']\"\n                , fpre + \"long[@name='missing'][.='0']\"\n                , fpre + \"long[@name='countDistinct'][.='4']\"\n                , \"count(\" + fpre + \"arr[@name='distinctValues']/*)=4\"\n                , fpre + \"double[@name='sumOfSquares'][.='3000.0']\"\n                , fpre + \"double[@name='mean'][.='-25.0']\"\n                , fpre + \"double[@name='stddev'][.='12.909944487358056']\"\n                );  \n        \n        assertQ(\"test statistics w/fq using: \" + ct, \n                req(baseParams, \"q\", \"*:*\", \"fq\", \"-id:4\", ct, \"true\")\n                , fpre + \"double[@name='min'][.='-30.0']\"\n                , fpre + \"double[@name='max'][.='-10.0']\"\n                , fpre + \"double[@name='sum'][.='-60.0']\"\n                , fpre + \"long[@name='count'][.='3']\"\n                , fpre + \"long[@name='missing'][.='0']\"\n                , fpre + \"long[@name='countDistinct'][.='3']\"\n                , \"count(\" + fpre + \"arr[@name='distinctValues']/*)=3\"\n                , fpre + \"double[@name='sumOfSquares'][.='1400.0']\"\n                , fpre + \"double[@name='mean'][.='-20.0']\"\n                , fpre + \"double[@name='stddev'][.='10.0']\"\n                );  \n        \n        // now do both in a single query\n\n        assertQ(\"test statistics w & w/fq via key override using: \" + ct, \n                req(baseParams, \"q\", \"*:*\", ct, \"true\",\n                    \"fq\", \"{!tag=key_ex_tag}-id:4\", \n                    \"stats.field\", \"{!key=\"+key+\" ex=key_ex_tag,\"+all_possible_ex+\"}\"+f)\n\n                // field name key, fq is applied\n                , fpre + \"double[@name='min'][.='-30.0']\"\n                , fpre + \"double[@name='max'][.='-10.0']\"\n                , fpre + \"double[@name='sum'][.='-60.0']\"\n                , fpre + \"long[@name='count'][.='3']\"\n                , fpre + \"long[@name='missing'][.='0']\"\n                , fpre + \"long[@name='countDistinct'][.='3']\"\n                , \"count(\" + fpre + \"arr[@name='distinctValues']/*)=3\"\n                , fpre + \"double[@name='sumOfSquares'][.='1400.0']\"\n                , fpre + \"double[@name='mean'][.='-20.0']\"\n                , fpre + \"double[@name='stddev'][.='10.0']\"\n\n                // overridden key, fq is excluded\n                , kpre + \"double[@name='min'][.='-40.0']\"\n                , kpre + \"double[@name='max'][.='-10.0']\"\n                , kpre + \"double[@name='sum'][.='-100.0']\"\n                , kpre + \"long[@name='count'][.='4']\"\n                , kpre + \"long[@name='missing'][.='0']\"\n                , kpre + \"long[@name='countDistinct'][.='4']\"\n                , \"count(\" + kpre + \"arr[@name='distinctValues']/*)=4\"\n                , kpre + \"double[@name='sumOfSquares'][.='3000.0']\"\n                , kpre + \"double[@name='mean'][.='-25.0']\"\n                , kpre + \"double[@name='stddev'][.='12.909944487358056']\"\n\n                );\n      }\n    }\n\n    // we should be able to compute exact same stats for a field even\n    // when we specify it using the \"field()\" function, or use other \n    // identify equivalent functions\n    for (String param : new String[] {\n        // bare\n        \"{!key=\"+key+\" ex=key_ex_tag}\" + f,\n        \"{!key=\"+key+\" ex=key_ex_tag v=\"+f+\"}\",\n        // field func\n        \"{!lucene key=\"+key+\" ex=key_ex_tag}_val_:\\\"field(\"+f+\")\\\"\",\n        \"{!func key=\"+key+\" ex=key_ex_tag}field(\"+f+\")\",\n        \"{!type=func key=\"+key+\" ex=key_ex_tag}field(\"+f+\")\",\n        \"{!type=func key=\"+key+\" ex=key_ex_tag v=field(\"+f+\")}\",\n        \"{!type=func key=\"+key+\" ex=key_ex_tag v='field(\"+f+\")'}\",\n        // identity math functions\n        \"{!type=func key=\"+key+\" ex=key_ex_tag v='sum(0,\"+f+\")'}\",\n        \"{!type=func key=\"+key+\" ex=key_ex_tag v='product(1,\"+f+\")'}\",\n      }) {\n      \n      assertQ(\"test statistics over field specified as a function: \" + param,\n              // NOTE: baseParams aren't used, we're looking at the function\n              req(\"q\", \"*:*\", \"stats\", \"true\", \"stats.calcdistinct\", \"true\",\n                  \"fq\", \"{!tag=key_ex_tag}-id:4\", \n                  \"stats.field\", param)\n              \n              , kpre + \"double[@name='min'][.='-40.0']\"\n              , kpre + \"double[@name='max'][.='-10.0']\"\n              , kpre + \"double[@name='sum'][.='-100.0']\"\n              , kpre + \"long[@name='count'][.='4']\"\n              , kpre + \"long[@name='missing'][.='0']\"\n              , kpre + \"long[@name='countDistinct'][.='4']\"\n              , \"count(\" + kpre + \"arr[@name='distinctValues']/*)=4\"\n              , kpre + \"double[@name='sumOfSquares'][.='3000.0']\"\n              , kpre + \"double[@name='mean'][.='-25.0']\"\n              , kpre + \"double[@name='stddev'][.='12.909944487358056']\"\n              \n              );\n    }\n    \n    // now get stats over a non-trivial function on our (single) field\n    String func = \"product(2, \" + f + \")\";\n    assertQ(\"test function statistics & key override\", \n            // NOTE: baseParams aren't used, we're looking at the function\n            req(\"q\", \"*:*\", \"stats\", \"true\", \"stats.calcdistinct\", \"true\",\n                \"fq\", \"{!tag=key_ex_tag}-id:4\", \n                \"stats.field\", \"{!func key=\"+key+\" ex=key_ex_tag}\"+func)\n\n            , kpre + \"double[@name='min'][.='-80.0']\"\n            , kpre + \"double[@name='max'][.='-20.0']\"\n            , kpre + \"double[@name='sum'][.='-200.0']\"\n            , kpre + \"long[@name='count'][.='4']\"\n            , kpre + \"long[@name='missing'][.='0']\"\n            , kpre + \"long[@name='countDistinct'][.='4']\"\n            , \"count(\" + kpre + \"arr[@name='distinctValues']/*)=4\"\n            , kpre + \"double[@name='sumOfSquares'][.='12000.0']\"\n            , kpre + \"double[@name='mean'][.='-50.0']\" \n            , kpre + \"double[@name='stddev'][.='25.81988897471611']\"\n            );\n\n    // simple cardinality over a numeric field\n    assertQ(\"test function statistics & key override\", \n            // NOTE: baseParams aren't used, we're looking only at the cardinality\n            req(\"q\", \"*:*\", \"stats\", \"true\",\n                \"fq\", \"{!tag=key_ex_tag}-id:4\", \n                \"stats.field\", \"{!key=\"+key+\" cardinality=true}\"+f)\n\n            , kpre + \"long[@name='cardinality'][.='3']\"\n            , \"count(\" + kpre + \"/*)=1\"\n            );\n  }\n\n","sourceOld":"  public void doTestFieldStatisticsResult(String f, SolrParams[] baseParamsSet) throws Exception {\n    // used when doing key overrides in conjunction with the baseParamsSet\n    //\n    // even when these aren't included in the request, using them helps us\n    // test the code path of an exclusion that refers to an fq that doesn't exist\n    final String all_possible_ex = \"fq1,fq2\";\n\n    assertU(adoc(\"id\", \"1\", f, \"-10\"));\n    assertU(adoc(\"id\", \"2\", f, \"-20\"));\n    assertU(commit());\n    assertU(adoc(\"id\", \"3\", f, \"-30\"));\n    assertU(adoc(\"id\", \"4\", f, \"-40\"));\n    assertU(commit());\n\n    final String fpre = XPRE + \"lst[@name='stats_fields']/lst[@name='\"+f+\"']/\";\n\n    final String key = \"key_key\";\n    final String kpre = XPRE + \"lst[@name='stats_fields']/lst[@name='\"+key+\"']/\";\n\n    // status should be the same regardless of baseParams\n    for (SolrParams baseParams : baseParamsSet) {\n      for (String ct : new String[] {\"stats.calcdistinct\", \"f.\"+f+\".stats.calcdistinct\"}) {\n        assertQ(\"test statistics values using: \" + ct, \n                req(baseParams, \"q\", \"*:*\", ct, \"true\")\n                , fpre + \"double[@name='min'][.='-40.0']\"\n                , fpre + \"double[@name='max'][.='-10.0']\"\n                , fpre + \"double[@name='sum'][.='-100.0']\"\n                , fpre + \"long[@name='count'][.='4']\"\n                , fpre + \"long[@name='missing'][.='0']\"\n                , fpre + \"long[@name='countDistinct'][.='4']\"\n                , \"count(\" + fpre + \"arr[@name='distinctValues']/*)=4\"\n                , fpre + \"double[@name='sumOfSquares'][.='3000.0']\"\n                , fpre + \"double[@name='mean'][.='-25.0']\"\n                , fpre + \"double[@name='stddev'][.='12.909944487358056']\"\n                );  \n        \n        assertQ(\"test statistics w/fq using: \" + ct, \n                req(baseParams, \"q\", \"*:*\", \"fq\", \"-id:4\", ct, \"true\")\n                , fpre + \"double[@name='min'][.='-30.0']\"\n                , fpre + \"double[@name='max'][.='-10.0']\"\n                , fpre + \"double[@name='sum'][.='-60.0']\"\n                , fpre + \"long[@name='count'][.='3']\"\n                , fpre + \"long[@name='missing'][.='0']\"\n                , fpre + \"long[@name='countDistinct'][.='3']\"\n                , \"count(\" + fpre + \"arr[@name='distinctValues']/*)=3\"\n                , fpre + \"double[@name='sumOfSquares'][.='1400.0']\"\n                , fpre + \"double[@name='mean'][.='-20.0']\"\n                , fpre + \"double[@name='stddev'][.='10.0']\"\n                );  \n        \n        // now do both in a single query\n\n        assertQ(\"test statistics w & w/fq via key override using: \" + ct, \n                req(baseParams, \"q\", \"*:*\", ct, \"true\",\n                    \"fq\", \"{!tag=key_ex_tag}-id:4\", \n                    \"stats.field\", \"{!key=\"+key+\" ex=key_ex_tag,\"+all_possible_ex+\"}\"+f)\n\n                // field name key, fq is applied\n                , fpre + \"double[@name='min'][.='-30.0']\"\n                , fpre + \"double[@name='max'][.='-10.0']\"\n                , fpre + \"double[@name='sum'][.='-60.0']\"\n                , fpre + \"long[@name='count'][.='3']\"\n                , fpre + \"long[@name='missing'][.='0']\"\n                , fpre + \"long[@name='countDistinct'][.='3']\"\n                , \"count(\" + fpre + \"arr[@name='distinctValues']/*)=3\"\n                , fpre + \"double[@name='sumOfSquares'][.='1400.0']\"\n                , fpre + \"double[@name='mean'][.='-20.0']\"\n                , fpre + \"double[@name='stddev'][.='10.0']\"\n\n                // overridden key, fq is excluded\n                , kpre + \"double[@name='min'][.='-40.0']\"\n                , kpre + \"double[@name='max'][.='-10.0']\"\n                , kpre + \"double[@name='sum'][.='-100.0']\"\n                , kpre + \"long[@name='count'][.='4']\"\n                , kpre + \"long[@name='missing'][.='0']\"\n                , kpre + \"long[@name='countDistinct'][.='4']\"\n                , \"count(\" + kpre + \"arr[@name='distinctValues']/*)=4\"\n                , kpre + \"double[@name='sumOfSquares'][.='3000.0']\"\n                , kpre + \"double[@name='mean'][.='-25.0']\"\n                , kpre + \"double[@name='stddev'][.='12.909944487358056']\"\n\n                );\n      }\n    }\n\n    // we should be able to compute exact same stats for a field even\n    // when we specify it using the \"field()\" function, or use other \n    // identify equivilent functions\n    for (String param : new String[] {\n        // bare\n        \"{!key=\"+key+\" ex=key_ex_tag}\" + f,\n        \"{!key=\"+key+\" ex=key_ex_tag v=\"+f+\"}\",\n        // field func\n        \"{!lucene key=\"+key+\" ex=key_ex_tag}_val_:\\\"field(\"+f+\")\\\"\",\n        \"{!func key=\"+key+\" ex=key_ex_tag}field(\"+f+\")\",\n        \"{!type=func key=\"+key+\" ex=key_ex_tag}field(\"+f+\")\",\n        \"{!type=func key=\"+key+\" ex=key_ex_tag v=field(\"+f+\")}\",\n        \"{!type=func key=\"+key+\" ex=key_ex_tag v='field(\"+f+\")'}\",\n        // identity math functions\n        \"{!type=func key=\"+key+\" ex=key_ex_tag v='sum(0,\"+f+\")'}\",\n        \"{!type=func key=\"+key+\" ex=key_ex_tag v='product(1,\"+f+\")'}\",\n      }) {\n      \n      assertQ(\"test statistics over field specified as a function: \" + param,\n              // NOTE: baseParams aren't used, we're looking at the function\n              req(\"q\", \"*:*\", \"stats\", \"true\", \"stats.calcdistinct\", \"true\",\n                  \"fq\", \"{!tag=key_ex_tag}-id:4\", \n                  \"stats.field\", param)\n              \n              , kpre + \"double[@name='min'][.='-40.0']\"\n              , kpre + \"double[@name='max'][.='-10.0']\"\n              , kpre + \"double[@name='sum'][.='-100.0']\"\n              , kpre + \"long[@name='count'][.='4']\"\n              , kpre + \"long[@name='missing'][.='0']\"\n              , kpre + \"long[@name='countDistinct'][.='4']\"\n              , \"count(\" + kpre + \"arr[@name='distinctValues']/*)=4\"\n              , kpre + \"double[@name='sumOfSquares'][.='3000.0']\"\n              , kpre + \"double[@name='mean'][.='-25.0']\"\n              , kpre + \"double[@name='stddev'][.='12.909944487358056']\"\n              \n              );\n    }\n    \n    // now get stats over a non-trivial function on our (single) field\n    String func = \"product(2, \" + f + \")\";\n    assertQ(\"test function statistics & key override\", \n            // NOTE: baseParams aren't used, we're looking at the function\n            req(\"q\", \"*:*\", \"stats\", \"true\", \"stats.calcdistinct\", \"true\",\n                \"fq\", \"{!tag=key_ex_tag}-id:4\", \n                \"stats.field\", \"{!func key=\"+key+\" ex=key_ex_tag}\"+func)\n\n            , kpre + \"double[@name='min'][.='-80.0']\"\n            , kpre + \"double[@name='max'][.='-20.0']\"\n            , kpre + \"double[@name='sum'][.='-200.0']\"\n            , kpre + \"long[@name='count'][.='4']\"\n            , kpre + \"long[@name='missing'][.='0']\"\n            , kpre + \"long[@name='countDistinct'][.='4']\"\n            , \"count(\" + kpre + \"arr[@name='distinctValues']/*)=4\"\n            , kpre + \"double[@name='sumOfSquares'][.='12000.0']\"\n            , kpre + \"double[@name='mean'][.='-50.0']\" \n            , kpre + \"double[@name='stddev'][.='25.81988897471611']\"\n            );\n\n    // simple cardinality over a numeric field\n    assertQ(\"test function statistics & key override\", \n            // NOTE: baseParams aren't used, we're looking only at the cardinality\n            req(\"q\", \"*:*\", \"stats\", \"true\",\n                \"fq\", \"{!tag=key_ex_tag}-id:4\", \n                \"stats.field\", \"{!key=\"+key+\" cardinality=true}\"+f)\n\n            , kpre + \"long[@name='cardinality'][.='3']\"\n            , \"count(\" + kpre + \"/*)=1\"\n            );\n  }\n\n","bugFix":["283ff02f401ec3e7a2fad73643970f052383fb0c"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"283ff02f401ec3e7a2fad73643970f052383fb0c":["610c97b96420e614c67797fd43822ebc1d4b7ee2"],"9f4251f14d2db68330fc1e6f0495c053a905d560":["4a4e2c829188fb99886a64558664d79c9ac0fdf1"],"4a4e2c829188fb99886a64558664d79c9ac0fdf1":["283ff02f401ec3e7a2fad73643970f052383fb0c"],"511309ff970d3c2a68d1ac453cc187df1198f0d1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"610c97b96420e614c67797fd43822ebc1d4b7ee2":["511309ff970d3c2a68d1ac453cc187df1198f0d1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9f4251f14d2db68330fc1e6f0495c053a905d560"]},"commit2Childs":{"283ff02f401ec3e7a2fad73643970f052383fb0c":["4a4e2c829188fb99886a64558664d79c9ac0fdf1"],"9f4251f14d2db68330fc1e6f0495c053a905d560":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4a4e2c829188fb99886a64558664d79c9ac0fdf1":["9f4251f14d2db68330fc1e6f0495c053a905d560"],"511309ff970d3c2a68d1ac453cc187df1198f0d1":["610c97b96420e614c67797fd43822ebc1d4b7ee2"],"610c97b96420e614c67797fd43822ebc1d4b7ee2":["283ff02f401ec3e7a2fad73643970f052383fb0c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["511309ff970d3c2a68d1ac453cc187df1198f0d1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}