{"path":"contrib/gdata-server/src/java/org/apache/lucene/gdata/storage/lucenestorage/StorageModifier#updateEntry(StorageEntryWrapper).mjava","commits":[{"id":"5d43e216d757e2276d180eba8a192e300c4bfadb","date":1149717385,"type":0,"author":"Doug Cutting","isMerge":false,"pathNew":"contrib/gdata-server/src/java/org/apache/lucene/gdata/storage/lucenestorage/StorageModifier#updateEntry(StorageEntryWrapper).mjava","pathOld":"/dev/null","sourceNew":"    /** \n     * TODO document this \n     * @param wrapper \n     * @throws StorageException \n     */ \n    public void updateEntry(StorageEntryWrapper wrapper) \n            throws  StorageException { \n        try { \n            this.readLock.lock(); \n            Term tempTerm = new Term(StorageEntryWrapper.FIELD_ENTRY_ID, wrapper.getEntryId()); \n            this.buffer.addEntry(wrapper); \n            this.deletedForUpdateDocumentQueue.add(tempTerm); \n            this.documentMap.put(wrapper.getEntryId(),wrapper.getLuceneDocument()); \n            storageModified(); \n        } finally { \n            this.readLock.unlock(); \n        } \n    } \n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"52754a40a1550056d5637c8992b4076b5ed77328","date":1151345693,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"contrib/gdata-server/src/java/org/apache/lucene/gdata/storage/lucenestorage/StorageModifier#updateEntry(StorageEntryWrapper).mjava","pathOld":"contrib/gdata-server/src/java/org/apache/lucene/gdata/storage/lucenestorage/StorageModifier#updateEntry(StorageEntryWrapper).mjava","sourceNew":"    /**\n     * Updates the given entry. First the alredy persisted entry will be\n     * removed, after marking as deleted the new Entry will be written.\n     * \n     * @param wrapper -\n     *            the wrapper containing the entry\n     * @throws StorageException -\n     *             if the entry can not be stored\n     */\n    public void updateEntry(StorageEntryWrapper wrapper)\n            throws StorageException {\n        if(wrapper.getOperation() != StorageOperation.UPDATE)\n            throw new StorageException(\"Illegal method call -- updateEntry does not accept other storageOperations than update\");\n        this.readLock.lock();\n        try {\n            Term tempTerm = new Term(StorageEntryWrapper.FIELD_ENTRY_ID,\n                    wrapper.getEntryId());\n            this.documentMap.put(wrapper.getEntryId(), wrapper\n                    .getLuceneDocument());\n            this.deletedForUpdateDocumentQueue.add(tempTerm);\n            this.buffer.addEntry(wrapper);\n            storageModified();\n        } finally {\n            this.readLock.unlock();\n        }\n    }\n\n","sourceOld":"    /** \n     * TODO document this \n     * @param wrapper \n     * @throws StorageException \n     */ \n    public void updateEntry(StorageEntryWrapper wrapper) \n            throws  StorageException { \n        try { \n            this.readLock.lock(); \n            Term tempTerm = new Term(StorageEntryWrapper.FIELD_ENTRY_ID, wrapper.getEntryId()); \n            this.buffer.addEntry(wrapper); \n            this.deletedForUpdateDocumentQueue.add(tempTerm); \n            this.documentMap.put(wrapper.getEntryId(),wrapper.getLuceneDocument()); \n            storageModified(); \n        } finally { \n            this.readLock.unlock(); \n        } \n    } \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"303ca293666286b4ae2b0b4dbf10d3bf60ed727c","date":1153866181,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"contrib/gdata-server/src/java/org/apache/lucene/gdata/storage/lucenestorage/StorageModifier#updateEntry(StorageEntryWrapper).mjava","pathOld":"contrib/gdata-server/src/java/org/apache/lucene/gdata/storage/lucenestorage/StorageModifier#updateEntry(StorageEntryWrapper).mjava","sourceNew":"    /**\n     * Updates the given entry. First the alredy persisted entry will be\n     * removed, after marking as deleted the new Entry will be written.\n     * \n     * @param wrapper -\n     *            the wrapper containing the entry\n     * @throws StorageException -\n     *             if the entry can not be stored\n     */\n    public void updateEntry(StorageEntryWrapper wrapper)\n            throws StorageException {\n        if(wrapper.getOperation() != StorageOperation.UPDATE)\n            throw new StorageException(\"Illegal method call -- updateEntry does not accept other storageOperations than update\");\n        this.lock.lock();\n        try {\n            \n            Term tempTerm = new Term(StorageEntryWrapper.FIELD_ENTRY_ID,\n                    wrapper.getEntryId());\n            this.documentMap.put(wrapper.getEntryId(), wrapper\n                    .getLuceneDocument());\n            this.deletedForUpdateDocumentQueue.add(tempTerm);\n            storageModified();\n            /*\n             * If storage not written write entry to recoverfile\n             * and make the entry available via the buffer\n             */\n            if(this.modifiedCounter != 0)\n                try{\n                    this.controller.writeRecoverEntry(wrapper);\n                    this.buffer.addEntry(wrapper);\n                }catch (Exception e) {\n                    /*\n                     * remove from all resources\n                     */\n                    this.documentMap.remove(wrapper.getEntryId());\n                    this.deletedForUpdateDocumentQueue.remove(tempTerm);\n                    \n                }\n        } finally {\n            this.lock.unlock();\n        }\n    }\n\n","sourceOld":"    /**\n     * Updates the given entry. First the alredy persisted entry will be\n     * removed, after marking as deleted the new Entry will be written.\n     * \n     * @param wrapper -\n     *            the wrapper containing the entry\n     * @throws StorageException -\n     *             if the entry can not be stored\n     */\n    public void updateEntry(StorageEntryWrapper wrapper)\n            throws StorageException {\n        if(wrapper.getOperation() != StorageOperation.UPDATE)\n            throw new StorageException(\"Illegal method call -- updateEntry does not accept other storageOperations than update\");\n        this.readLock.lock();\n        try {\n            Term tempTerm = new Term(StorageEntryWrapper.FIELD_ENTRY_ID,\n                    wrapper.getEntryId());\n            this.documentMap.put(wrapper.getEntryId(), wrapper\n                    .getLuceneDocument());\n            this.deletedForUpdateDocumentQueue.add(tempTerm);\n            this.buffer.addEntry(wrapper);\n            storageModified();\n        } finally {\n            this.readLock.unlock();\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5824af871ba6863399636aa5989bfc0ef2ea448c","date":1166013128,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/gdata-server/src/core/java/org/apache/lucene/gdata/storage/lucenestorage/StorageModifier#updateEntry(StorageEntryWrapper).mjava","pathOld":"contrib/gdata-server/src/java/org/apache/lucene/gdata/storage/lucenestorage/StorageModifier#updateEntry(StorageEntryWrapper).mjava","sourceNew":"    /**\n     * Updates the given entry. First the alredy persisted entry will be\n     * removed, after marking as deleted the new Entry will be written.\n     * \n     * @param wrapper -\n     *            the wrapper containing the entry\n     * @throws StorageException -\n     *             if the entry can not be stored\n     */\n    public void updateEntry(StorageEntryWrapper wrapper)\n            throws StorageException {\n        if(wrapper.getOperation() != StorageOperation.UPDATE)\n            throw new StorageException(\"Illegal method call -- updateEntry does not accept other storageOperations than update\");\n        this.lock.lock();\n        try {\n            \n            Term tempTerm = new Term(StorageEntryWrapper.FIELD_ENTRY_ID,\n                    wrapper.getEntryId());\n            this.documentMap.put(wrapper.getEntryId(), wrapper\n                    .getLuceneDocument());\n            this.deletedForUpdateDocumentQueue.add(tempTerm);\n            storageModified();\n            /*\n             * If storage not written write entry to recoverfile\n             * and make the entry available via the buffer\n             */\n            if(this.modifiedCounter != 0)\n                try{\n                    this.controller.writeRecoverEntry(wrapper);\n                    this.buffer.addEntry(wrapper);\n                }catch (Exception e) {\n                    /*\n                     * remove from all resources\n                     */\n                    this.documentMap.remove(wrapper.getEntryId());\n                    this.deletedForUpdateDocumentQueue.remove(tempTerm);\n                    \n                }\n        } finally {\n            this.lock.unlock();\n        }\n    }\n\n","sourceOld":"    /**\n     * Updates the given entry. First the alredy persisted entry will be\n     * removed, after marking as deleted the new Entry will be written.\n     * \n     * @param wrapper -\n     *            the wrapper containing the entry\n     * @throws StorageException -\n     *             if the entry can not be stored\n     */\n    public void updateEntry(StorageEntryWrapper wrapper)\n            throws StorageException {\n        if(wrapper.getOperation() != StorageOperation.UPDATE)\n            throw new StorageException(\"Illegal method call -- updateEntry does not accept other storageOperations than update\");\n        this.lock.lock();\n        try {\n            \n            Term tempTerm = new Term(StorageEntryWrapper.FIELD_ENTRY_ID,\n                    wrapper.getEntryId());\n            this.documentMap.put(wrapper.getEntryId(), wrapper\n                    .getLuceneDocument());\n            this.deletedForUpdateDocumentQueue.add(tempTerm);\n            storageModified();\n            /*\n             * If storage not written write entry to recoverfile\n             * and make the entry available via the buffer\n             */\n            if(this.modifiedCounter != 0)\n                try{\n                    this.controller.writeRecoverEntry(wrapper);\n                    this.buffer.addEntry(wrapper);\n                }catch (Exception e) {\n                    /*\n                     * remove from all resources\n                     */\n                    this.documentMap.remove(wrapper.getEntryId());\n                    this.deletedForUpdateDocumentQueue.remove(tempTerm);\n                    \n                }\n        } finally {\n            this.lock.unlock();\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5824af871ba6863399636aa5989bfc0ef2ea448c":["303ca293666286b4ae2b0b4dbf10d3bf60ed727c"],"303ca293666286b4ae2b0b4dbf10d3bf60ed727c":["52754a40a1550056d5637c8992b4076b5ed77328"],"5d43e216d757e2276d180eba8a192e300c4bfadb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5824af871ba6863399636aa5989bfc0ef2ea448c"],"52754a40a1550056d5637c8992b4076b5ed77328":["5d43e216d757e2276d180eba8a192e300c4bfadb"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5d43e216d757e2276d180eba8a192e300c4bfadb"],"5824af871ba6863399636aa5989bfc0ef2ea448c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"303ca293666286b4ae2b0b4dbf10d3bf60ed727c":["5824af871ba6863399636aa5989bfc0ef2ea448c"],"5d43e216d757e2276d180eba8a192e300c4bfadb":["52754a40a1550056d5637c8992b4076b5ed77328"],"52754a40a1550056d5637c8992b4076b5ed77328":["303ca293666286b4ae2b0b4dbf10d3bf60ed727c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}