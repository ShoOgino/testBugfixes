{"path":"lucene/facet/src/java/org/apache/lucene/facet/FacetsConfig#stringToPath(String).mjava","commits":[{"id":"21d36d0db865f7b84026b447bec653469a6e66df","date":1385495602,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/FacetsConfig#stringToPath(String).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/simple/FacetsConfig#stringToPath(String).mjava","sourceNew":"  /** Turns a result from previous call to {@link\n   *  #pathToString} back into the original {@code String[]}\n   *  without stealing any characters. */\n  public static String[] stringToPath(String s) {\n    List<String> parts = new ArrayList<String>();\n    int length = s.length();\n    char[] buffer = new char[length];\n\n    int upto = 0;\n    boolean lastEscape = false;\n    for(int i=0;i<length;i++) {\n      char ch = s.charAt(i);\n      if (lastEscape) {\n        buffer[upto++] = ch;\n        lastEscape = false;\n      } else if (ch == ESCAPE_CHAR) {\n        lastEscape = true;\n      } else if (ch == DELIM_CHAR) {\n        parts.add(new String(buffer, 0, upto));\n        upto = 0;\n      } else {\n        buffer[upto++] = ch;\n      }\n    }\n    parts.add(new String(buffer, 0, upto));\n    assert !lastEscape;\n    return parts.toArray(new String[parts.size()]);\n  }\n\n","sourceOld":"  /** Turns a result from previous call to {@link\n   *  #pathToString} back into the original {@code String[]}\n   *  without stealing any characters. */\n  public static String[] stringToPath(String s) {\n    List<String> parts = new ArrayList<String>();\n    int length = s.length();\n    char[] buffer = new char[length];\n\n    int upto = 0;\n    boolean lastEscape = false;\n    for(int i=0;i<length;i++) {\n      char ch = s.charAt(i);\n      if (lastEscape) {\n        buffer[upto++] = ch;\n        lastEscape = false;\n      } else if (ch == ESCAPE_CHAR) {\n        lastEscape = true;\n      } else if (ch == DELIM_CHAR) {\n        parts.add(new String(buffer, 0, upto));\n        upto = 0;\n      } else {\n        buffer[upto++] = ch;\n      }\n    }\n    parts.add(new String(buffer, 0, upto));\n    assert !lastEscape;\n    return parts.toArray(new String[parts.size()]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b6e499df4729e7162d5b39a70b0142e3186a029f","date":1385554050,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/FacetsConfig#stringToPath(String).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/FacetsConfig#stringToPath(String).mjava","sourceNew":"  /** Turns an encoded string (from a previous call to {@link\n   *  #pathToString}) back into the original {@code\n   *  String[]}. */\n  public static String[] stringToPath(String s) {\n    List<String> parts = new ArrayList<String>();\n    int length = s.length();\n    char[] buffer = new char[length];\n\n    int upto = 0;\n    boolean lastEscape = false;\n    for(int i=0;i<length;i++) {\n      char ch = s.charAt(i);\n      if (lastEscape) {\n        buffer[upto++] = ch;\n        lastEscape = false;\n      } else if (ch == ESCAPE_CHAR) {\n        lastEscape = true;\n      } else if (ch == DELIM_CHAR) {\n        parts.add(new String(buffer, 0, upto));\n        upto = 0;\n      } else {\n        buffer[upto++] = ch;\n      }\n    }\n    parts.add(new String(buffer, 0, upto));\n    assert !lastEscape;\n    return parts.toArray(new String[parts.size()]);\n  }\n\n","sourceOld":"  /** Turns a result from previous call to {@link\n   *  #pathToString} back into the original {@code String[]}\n   *  without stealing any characters. */\n  public static String[] stringToPath(String s) {\n    List<String> parts = new ArrayList<String>();\n    int length = s.length();\n    char[] buffer = new char[length];\n\n    int upto = 0;\n    boolean lastEscape = false;\n    for(int i=0;i<length;i++) {\n      char ch = s.charAt(i);\n      if (lastEscape) {\n        buffer[upto++] = ch;\n        lastEscape = false;\n      } else if (ch == ESCAPE_CHAR) {\n        lastEscape = true;\n      } else if (ch == DELIM_CHAR) {\n        parts.add(new String(buffer, 0, upto));\n        upto = 0;\n      } else {\n        buffer[upto++] = ch;\n      }\n    }\n    parts.add(new String(buffer, 0, upto));\n    assert !lastEscape;\n    return parts.toArray(new String[parts.size()]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bbe9946d3cd818d329255e4c325597ac3480503e","date":1385580921,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/FacetsConfig#stringToPath(String).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/FacetsConfig#stringToPath(String).mjava","sourceNew":"  /** Turns an encoded string (from a previous call to {@link\n   *  #pathToString}) back into the original {@code\n   *  String[]}. */\n  public static String[] stringToPath(String s) {\n    List<String> parts = new ArrayList<String>();\n    int length = s.length();\n    if (length == 0) {\n      return new String[0];\n    }\n    char[] buffer = new char[length];\n\n    int upto = 0;\n    boolean lastEscape = false;\n    for(int i=0;i<length;i++) {\n      char ch = s.charAt(i);\n      if (lastEscape) {\n        buffer[upto++] = ch;\n        lastEscape = false;\n      } else if (ch == ESCAPE_CHAR) {\n        lastEscape = true;\n      } else if (ch == DELIM_CHAR) {\n        parts.add(new String(buffer, 0, upto));\n        upto = 0;\n      } else {\n        buffer[upto++] = ch;\n      }\n    }\n    parts.add(new String(buffer, 0, upto));\n    assert !lastEscape;\n    return parts.toArray(new String[parts.size()]);\n  }\n\n","sourceOld":"  /** Turns an encoded string (from a previous call to {@link\n   *  #pathToString}) back into the original {@code\n   *  String[]}. */\n  public static String[] stringToPath(String s) {\n    List<String> parts = new ArrayList<String>();\n    int length = s.length();\n    char[] buffer = new char[length];\n\n    int upto = 0;\n    boolean lastEscape = false;\n    for(int i=0;i<length;i++) {\n      char ch = s.charAt(i);\n      if (lastEscape) {\n        buffer[upto++] = ch;\n        lastEscape = false;\n      } else if (ch == ESCAPE_CHAR) {\n        lastEscape = true;\n      } else if (ch == DELIM_CHAR) {\n        parts.add(new String(buffer, 0, upto));\n        upto = 0;\n      } else {\n        buffer[upto++] = ch;\n      }\n    }\n    parts.add(new String(buffer, 0, upto));\n    assert !lastEscape;\n    return parts.toArray(new String[parts.size()]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/FacetsConfig#stringToPath(String).mjava","pathOld":"/dev/null","sourceNew":"  /** Turns an encoded string (from a previous call to {@link\n   *  #pathToString}) back into the original {@code\n   *  String[]}. */\n  public static String[] stringToPath(String s) {\n    List<String> parts = new ArrayList<String>();\n    int length = s.length();\n    if (length == 0) {\n      return new String[0];\n    }\n    char[] buffer = new char[length];\n\n    int upto = 0;\n    boolean lastEscape = false;\n    for(int i=0;i<length;i++) {\n      char ch = s.charAt(i);\n      if (lastEscape) {\n        buffer[upto++] = ch;\n        lastEscape = false;\n      } else if (ch == ESCAPE_CHAR) {\n        lastEscape = true;\n      } else if (ch == DELIM_CHAR) {\n        parts.add(new String(buffer, 0, upto));\n        upto = 0;\n      } else {\n        buffer[upto++] = ch;\n      }\n    }\n    parts.add(new String(buffer, 0, upto));\n    assert !lastEscape;\n    return parts.toArray(new String[parts.size()]);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/FacetsConfig#stringToPath(String).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/FacetsConfig#stringToPath(String).mjava","sourceNew":"  /** Turns an encoded string (from a previous call to {@link\n   *  #pathToString}) back into the original {@code\n   *  String[]}. */\n  public static String[] stringToPath(String s) {\n    List<String> parts = new ArrayList<>();\n    int length = s.length();\n    if (length == 0) {\n      return new String[0];\n    }\n    char[] buffer = new char[length];\n\n    int upto = 0;\n    boolean lastEscape = false;\n    for(int i=0;i<length;i++) {\n      char ch = s.charAt(i);\n      if (lastEscape) {\n        buffer[upto++] = ch;\n        lastEscape = false;\n      } else if (ch == ESCAPE_CHAR) {\n        lastEscape = true;\n      } else if (ch == DELIM_CHAR) {\n        parts.add(new String(buffer, 0, upto));\n        upto = 0;\n      } else {\n        buffer[upto++] = ch;\n      }\n    }\n    parts.add(new String(buffer, 0, upto));\n    assert !lastEscape;\n    return parts.toArray(new String[parts.size()]);\n  }\n\n","sourceOld":"  /** Turns an encoded string (from a previous call to {@link\n   *  #pathToString}) back into the original {@code\n   *  String[]}. */\n  public static String[] stringToPath(String s) {\n    List<String> parts = new ArrayList<String>();\n    int length = s.length();\n    if (length == 0) {\n      return new String[0];\n    }\n    char[] buffer = new char[length];\n\n    int upto = 0;\n    boolean lastEscape = false;\n    for(int i=0;i<length;i++) {\n      char ch = s.charAt(i);\n      if (lastEscape) {\n        buffer[upto++] = ch;\n        lastEscape = false;\n      } else if (ch == ESCAPE_CHAR) {\n        lastEscape = true;\n      } else if (ch == DELIM_CHAR) {\n        parts.add(new String(buffer, 0, upto));\n        upto = 0;\n      } else {\n        buffer[upto++] = ch;\n      }\n    }\n    parts.add(new String(buffer, 0, upto));\n    assert !lastEscape;\n    return parts.toArray(new String[parts.size()]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"b6e499df4729e7162d5b39a70b0142e3186a029f":["21d36d0db865f7b84026b447bec653469a6e66df"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"21d36d0db865f7b84026b447bec653469a6e66df":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","bbe9946d3cd818d329255e4c325597ac3480503e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"bbe9946d3cd818d329255e4c325597ac3480503e":["b6e499df4729e7162d5b39a70b0142e3186a029f"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b6e499df4729e7162d5b39a70b0142e3186a029f":["bbe9946d3cd818d329255e4c325597ac3480503e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["21d36d0db865f7b84026b447bec653469a6e66df","3cc728b07df73b197e6d940d27f9b08b63918f13"],"21d36d0db865f7b84026b447bec653469a6e66df":["b6e499df4729e7162d5b39a70b0142e3186a029f"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"bbe9946d3cd818d329255e4c325597ac3480503e":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}