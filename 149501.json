{"path":"contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/MultiFieldQueryParserWrapper#MultiFieldQueryParserWrapper(String[],Analyzer).mjava","commits":[{"id":"e8a848e758754282137f42bf85793c278e250390","date":1249640668,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/MultiFieldQueryParserWrapper#MultiFieldQueryParserWrapper(String[],Analyzer).mjava","pathOld":"contrib/queryparser/src/java/org/apache/lucene/queryParser/original/MultiFieldQueryParserWrapper#MultiFieldQueryParserWrapper(String[],Analyzer).mjava","sourceNew":"  /**\n   * Creates a MultiFieldQueryParser.\n   * \n   * <p>\n   * It will, when parse(String query) is called, construct a query like this\n   * (assuming the query consists of two terms and you specify the two fields\n   * <code>title</code> and <code>body</code>):\n   * </p>\n   * \n   * <code>\n     * (title:term1 body:term1) (title:term2 body:term2)\n     * </code>\n   * \n   * <p>\n   * When setDefaultOperator(AND_OPERATOR) is set, the result will be:\n   * </p>\n   * \n   * <code>\n     * +(title:term1 body:term1) +(title:term2 body:term2)\n     * </code>\n   * \n   * <p>\n   * In other words, all the query's terms must appear, but it doesn't matter in\n   * what fields they appear.\n   * </p>\n   */\n  public MultiFieldQueryParserWrapper(String[] fields, Analyzer analyzer) {\n    super(null, analyzer);\n\n    StandardQueryParser qpHelper = (StandardQueryParser) getQueryParserHelper();\n    qpHelper.setAnalyzer(analyzer);\n\n    qpHelper.setMultiFields(fields);\n  }\n\n","sourceOld":"  /**\n   * Creates a MultiFieldQueryParser.\n   * \n   * <p>\n   * It will, when parse(String query) is called, construct a query like this\n   * (assuming the query consists of two terms and you specify the two fields\n   * <code>title</code> and <code>body</code>):\n   * </p>\n   * \n   * <code>\n     * (title:term1 body:term1) (title:term2 body:term2)\n     * </code>\n   * \n   * <p>\n   * When setDefaultOperator(AND_OPERATOR) is set, the result will be:\n   * </p>\n   * \n   * <code>\n     * +(title:term1 body:term1) +(title:term2 body:term2)\n     * </code>\n   * \n   * <p>\n   * In other words, all the query's terms must appear, but it doesn't matter in\n   * what fields they appear.\n   * </p>\n   */\n  public MultiFieldQueryParserWrapper(String[] fields, Analyzer analyzer) {\n    super(null, analyzer);\n\n    OriginalQueryParserHelper qpHelper = (OriginalQueryParserHelper) getQueryParserHelper();\n    qpHelper.setAnalyzer(analyzer);\n\n    qpHelper.setMultiFields(fields);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a","date":1267298041,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/MultiFieldQueryParserWrapper#MultiFieldQueryParserWrapper(String[],Analyzer).mjava","pathOld":"contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/MultiFieldQueryParserWrapper#MultiFieldQueryParserWrapper(String[],Analyzer).mjava","sourceNew":"  /**\n   * Creates a MultiFieldQueryParser.\n   * \n   * <p>\n   * It will, when parse(String query) is called, construct a query like this\n   * (assuming the query consists of two terms and you specify the two fields\n   * <code>title</code> and <code>body</code>):\n   * </p>\n   * \n   * <code>\n     * (title:term1 body:term1) (title:term2 body:term2)\n     * </code>\n   * \n   * <p>\n   * When setDefaultOperator(AND_OPERATOR) is set, the result will be:\n   * </p>\n   * \n   * <code>\n     * +(title:term1 body:term1) +(title:term2 body:term2)\n     * </code>\n   * \n   * <p>\n   * In other words, all the query's terms must appear, but it doesn't matter in\n   * what fields they appear.\n   * </p>\n   */\n  public MultiFieldQueryParserWrapper(String[] fields, Analyzer analyzer) {\n    super(null, analyzer);\n\n    StandardQueryParser qpHelper = getQueryParserHelper();\n    qpHelper.setAnalyzer(analyzer);\n\n    qpHelper.setMultiFields(fields);\n  }\n\n","sourceOld":"  /**\n   * Creates a MultiFieldQueryParser.\n   * \n   * <p>\n   * It will, when parse(String query) is called, construct a query like this\n   * (assuming the query consists of two terms and you specify the two fields\n   * <code>title</code> and <code>body</code>):\n   * </p>\n   * \n   * <code>\n     * (title:term1 body:term1) (title:term2 body:term2)\n     * </code>\n   * \n   * <p>\n   * When setDefaultOperator(AND_OPERATOR) is set, the result will be:\n   * </p>\n   * \n   * <code>\n     * +(title:term1 body:term1) +(title:term2 body:term2)\n     * </code>\n   * \n   * <p>\n   * In other words, all the query's terms must appear, but it doesn't matter in\n   * what fields they appear.\n   * </p>\n   */\n  public MultiFieldQueryParserWrapper(String[] fields, Analyzer analyzer) {\n    super(null, analyzer);\n\n    StandardQueryParser qpHelper = (StandardQueryParser) getQueryParserHelper();\n    qpHelper.setAnalyzer(analyzer);\n\n    qpHelper.setMultiFields(fields);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/MultiFieldQueryParserWrapper#MultiFieldQueryParserWrapper(String[],Analyzer).mjava","pathOld":"contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/MultiFieldQueryParserWrapper#MultiFieldQueryParserWrapper(String[],Analyzer).mjava","sourceNew":"  /**\n   * Creates a MultiFieldQueryParser.\n   * \n   * <p>\n   * It will, when parse(String query) is called, construct a query like this\n   * (assuming the query consists of two terms and you specify the two fields\n   * <code>title</code> and <code>body</code>):\n   * </p>\n   * \n   * <code>\n     * (title:term1 body:term1) (title:term2 body:term2)\n     * </code>\n   * \n   * <p>\n   * When setDefaultOperator(AND_OPERATOR) is set, the result will be:\n   * </p>\n   * \n   * <code>\n     * +(title:term1 body:term1) +(title:term2 body:term2)\n     * </code>\n   * \n   * <p>\n   * In other words, all the query's terms must appear, but it doesn't matter in\n   * what fields they appear.\n   * </p>\n   */\n  public MultiFieldQueryParserWrapper(String[] fields, Analyzer analyzer) {\n    super(null, analyzer);\n\n    StandardQueryParser qpHelper = getQueryParserHelper();\n    qpHelper.setAnalyzer(analyzer);\n\n    qpHelper.setMultiFields(fields);\n  }\n\n","sourceOld":"  /**\n   * Creates a MultiFieldQueryParser.\n   * \n   * <p>\n   * It will, when parse(String query) is called, construct a query like this\n   * (assuming the query consists of two terms and you specify the two fields\n   * <code>title</code> and <code>body</code>):\n   * </p>\n   * \n   * <code>\n     * (title:term1 body:term1) (title:term2 body:term2)\n     * </code>\n   * \n   * <p>\n   * When setDefaultOperator(AND_OPERATOR) is set, the result will be:\n   * </p>\n   * \n   * <code>\n     * +(title:term1 body:term1) +(title:term2 body:term2)\n     * </code>\n   * \n   * <p>\n   * In other words, all the query's terms must appear, but it doesn't matter in\n   * what fields they appear.\n   * </p>\n   */\n  public MultiFieldQueryParserWrapper(String[] fields, Analyzer analyzer) {\n    super(null, analyzer);\n\n    StandardQueryParser qpHelper = getQueryParserHelper();\n    qpHelper.setAnalyzer(analyzer);\n\n    qpHelper.setMultiFields(fields);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e8a848e758754282137f42bf85793c278e250390":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["e8a848e758754282137f42bf85793c278e250390"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"]},"commit2Childs":{"e8a848e758754282137f42bf85793c278e250390":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e8a848e758754282137f42bf85793c278e250390"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}