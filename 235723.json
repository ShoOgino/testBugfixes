{"path":"src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#scorer(IndexReader,boolean,boolean).mjava","commits":[{"id":"052fac7830290bd38a04cddee1a121ee07656b56","date":1245780702,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#scorer(IndexReader,boolean,boolean).mjava","pathOld":"src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#scorer(IndexReader).mjava","sourceNew":"    public Scorer scorer(IndexReader reader, boolean scoreDocsInOrder, boolean topScorer) throws IOException {\n      if (termArrays.size() == 0)                  // optimize zero-term case\n        return null;\n\n      TermPositions[] tps = new TermPositions[termArrays.size()];\n      for (int i=0; i<tps.length; i++) {\n        Term[] terms = (Term[])termArrays.get(i);\n\n        TermPositions p;\n        if (terms.length > 1)\n          p = new MultipleTermPositions(reader, terms);\n        else\n          p = reader.termPositions(terms[0]);\n\n        if (p == null)\n          return null;\n\n        tps[i] = p;\n      }\n\n      if (slop == 0)\n        return new ExactPhraseScorer(this, tps, getPositions(), similarity,\n                                     reader.norms(field));\n      else\n        return new SloppyPhraseScorer(this, tps, getPositions(), similarity,\n                                      slop, reader.norms(field));\n    }\n\n","sourceOld":"    public Scorer scorer(IndexReader reader) throws IOException {\n      if (termArrays.size() == 0)                  // optimize zero-term case\n        return null;\n\n      TermPositions[] tps = new TermPositions[termArrays.size()];\n      for (int i=0; i<tps.length; i++) {\n        Term[] terms = (Term[])termArrays.get(i);\n\n        TermPositions p;\n        if (terms.length > 1)\n          p = new MultipleTermPositions(reader, terms);\n        else\n          p = reader.termPositions(terms[0]);\n\n        if (p == null)\n          return null;\n\n        tps[i] = p;\n      }\n\n      if (slop == 0)\n        return new ExactPhraseScorer(this, tps, getPositions(), similarity,\n                                     reader.norms(field));\n      else\n        return new SloppyPhraseScorer(this, tps, getPositions(), similarity,\n                                      slop, reader.norms(field));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"20645c714ca2a7b7707c2707d58ee9fa384c7362","date":1256074979,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#scorer(IndexReader,boolean,boolean).mjava","pathOld":"src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#scorer(IndexReader,boolean,boolean).mjava","sourceNew":"    public Scorer scorer(IndexReader reader, boolean scoreDocsInOrder, boolean topScorer) throws IOException {\n      if (termArrays.size() == 0)                  // optimize zero-term case\n        return null;\n\n      TermPositions[] tps = new TermPositions[termArrays.size()];\n      for (int i=0; i<tps.length; i++) {\n        Term[] terms = termArrays.get(i);\n\n        TermPositions p;\n        if (terms.length > 1)\n          p = new MultipleTermPositions(reader, terms);\n        else\n          p = reader.termPositions(terms[0]);\n\n        if (p == null)\n          return null;\n\n        tps[i] = p;\n      }\n\n      if (slop == 0)\n        return new ExactPhraseScorer(this, tps, getPositions(), similarity,\n                                     reader.norms(field));\n      else\n        return new SloppyPhraseScorer(this, tps, getPositions(), similarity,\n                                      slop, reader.norms(field));\n    }\n\n","sourceOld":"    public Scorer scorer(IndexReader reader, boolean scoreDocsInOrder, boolean topScorer) throws IOException {\n      if (termArrays.size() == 0)                  // optimize zero-term case\n        return null;\n\n      TermPositions[] tps = new TermPositions[termArrays.size()];\n      for (int i=0; i<tps.length; i++) {\n        Term[] terms = (Term[])termArrays.get(i);\n\n        TermPositions p;\n        if (terms.length > 1)\n          p = new MultipleTermPositions(reader, terms);\n        else\n          p = reader.termPositions(terms[0]);\n\n        if (p == null)\n          return null;\n\n        tps[i] = p;\n      }\n\n      if (slop == 0)\n        return new ExactPhraseScorer(this, tps, getPositions(), similarity,\n                                     reader.norms(field));\n      else\n        return new SloppyPhraseScorer(this, tps, getPositions(), similarity,\n                                      slop, reader.norms(field));\n    }\n\n","bugFix":null,"bugIntro":["2ac7b588a949391edf21dd63c943990a9c3aec5f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"486cfd5a3f7481938475c113415d896f7a74a4a9","date":1256682581,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#scorer(IndexReader,boolean,boolean).mjava","pathOld":"src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#scorer(IndexReader,boolean,boolean).mjava","sourceNew":"    @Override\n    public Scorer scorer(IndexReader reader, boolean scoreDocsInOrder, boolean topScorer) throws IOException {\n      if (termArrays.size() == 0)                  // optimize zero-term case\n        return null;\n\n      TermPositions[] tps = new TermPositions[termArrays.size()];\n      for (int i=0; i<tps.length; i++) {\n        Term[] terms = termArrays.get(i);\n\n        TermPositions p;\n        if (terms.length > 1)\n          p = new MultipleTermPositions(reader, terms);\n        else\n          p = reader.termPositions(terms[0]);\n\n        if (p == null)\n          return null;\n\n        tps[i] = p;\n      }\n\n      if (slop == 0)\n        return new ExactPhraseScorer(this, tps, getPositions(), similarity,\n                                     reader.norms(field));\n      else\n        return new SloppyPhraseScorer(this, tps, getPositions(), similarity,\n                                      slop, reader.norms(field));\n    }\n\n","sourceOld":"    public Scorer scorer(IndexReader reader, boolean scoreDocsInOrder, boolean topScorer) throws IOException {\n      if (termArrays.size() == 0)                  // optimize zero-term case\n        return null;\n\n      TermPositions[] tps = new TermPositions[termArrays.size()];\n      for (int i=0; i<tps.length; i++) {\n        Term[] terms = termArrays.get(i);\n\n        TermPositions p;\n        if (terms.length > 1)\n          p = new MultipleTermPositions(reader, terms);\n        else\n          p = reader.termPositions(terms[0]);\n\n        if (p == null)\n          return null;\n\n        tps[i] = p;\n      }\n\n      if (slop == 0)\n        return new ExactPhraseScorer(this, tps, getPositions(), similarity,\n                                     reader.norms(field));\n      else\n        return new SloppyPhraseScorer(this, tps, getPositions(), similarity,\n                                      slop, reader.norms(field));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#scorer(IndexReader,boolean,boolean).mjava","pathOld":"src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#scorer(IndexReader,boolean,boolean).mjava","sourceNew":"    @Override\n    public Scorer scorer(IndexReader reader, boolean scoreDocsInOrder, boolean topScorer) throws IOException {\n      if (termArrays.size() == 0)                  // optimize zero-term case\n        return null;\n\n      TermPositions[] tps = new TermPositions[termArrays.size()];\n      for (int i=0; i<tps.length; i++) {\n        Term[] terms = termArrays.get(i);\n\n        TermPositions p;\n        if (terms.length > 1)\n          p = new MultipleTermPositions(reader, terms);\n        else\n          p = reader.termPositions(terms[0]);\n\n        if (p == null)\n          return null;\n\n        tps[i] = p;\n      }\n\n      if (slop == 0)\n        return new ExactPhraseScorer(this, tps, getPositions(), similarity,\n                                     reader.norms(field));\n      else\n        return new SloppyPhraseScorer(this, tps, getPositions(), similarity,\n                                      slop, reader.norms(field));\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(IndexReader reader, boolean scoreDocsInOrder, boolean topScorer) throws IOException {\n      if (termArrays.size() == 0)                  // optimize zero-term case\n        return null;\n\n      TermPositions[] tps = new TermPositions[termArrays.size()];\n      for (int i=0; i<tps.length; i++) {\n        Term[] terms = termArrays.get(i);\n\n        TermPositions p;\n        if (terms.length > 1)\n          p = new MultipleTermPositions(reader, terms);\n        else\n          p = reader.termPositions(terms[0]);\n\n        if (p == null)\n          return null;\n\n        tps[i] = p;\n      }\n\n      if (slop == 0)\n        return new ExactPhraseScorer(this, tps, getPositions(), similarity,\n                                     reader.norms(field));\n      else\n        return new SloppyPhraseScorer(this, tps, getPositions(), similarity,\n                                      slop, reader.norms(field));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"486cfd5a3f7481938475c113415d896f7a74a4a9":["20645c714ca2a7b7707c2707d58ee9fa384c7362"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"20645c714ca2a7b7707c2707d58ee9fa384c7362":["052fac7830290bd38a04cddee1a121ee07656b56"],"052fac7830290bd38a04cddee1a121ee07656b56":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["486cfd5a3f7481938475c113415d896f7a74a4a9"]},"commit2Childs":{"486cfd5a3f7481938475c113415d896f7a74a4a9":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["052fac7830290bd38a04cddee1a121ee07656b56"],"20645c714ca2a7b7707c2707d58ee9fa384c7362":["486cfd5a3f7481938475c113415d896f7a74a4a9"],"052fac7830290bd38a04cddee1a121ee07656b56":["20645c714ca2a7b7707c2707d58ee9fa384c7362"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}