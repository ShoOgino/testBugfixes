{"path":"src/java/org/apache/solr/handler/SpellCheckerRequestHandler#init(NamedList).mjava","commits":[{"id":"583cdb620dea20ef2bfafd8639a73b29de305103","date":1174543740,"type":1,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/SpellCheckerRequestHandler#init(NamedList).mjava","pathOld":"src/java/org/apache/solr/request/SpellCheckerRequestHandler#init(NamedList).mjava","sourceNew":"    public void init(NamedList args) {\n        super.init(args);\n        SolrParams p = SolrParams.toSolrParams(args);\n        termSourceField = p.get(\"termSourceField\");\n        spellcheckerIndexDir = p.get(\"spellcheckerIndexDir\");\n        try {\n            spellChecker = new SpellChecker(FSDirectory.getDirectory(spellcheckerIndexDir));\n        } catch (IOException e) {\n            throw new RuntimeException(\"Cannot open SpellChecker index\", e);\n        }\n    }\n\n","sourceOld":"    public void init(NamedList args) {\n        super.init(args);\n        SolrParams p = SolrParams.toSolrParams(args);\n        termSourceField = p.get(\"termSourceField\");\n        spellcheckerIndexDir = p.get(\"spellcheckerIndexDir\");\n        try {\n            spellChecker = new SpellChecker(FSDirectory.getDirectory(spellcheckerIndexDir));\n        } catch (IOException e) {\n            throw new RuntimeException(\"Cannot open SpellChecker index\", e);\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c51a4de58ddc877061c374826b0232414b06c08b","date":1174943473,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/SpellCheckerRequestHandler#init(NamedList).mjava","pathOld":"src/java/org/apache/solr/handler/SpellCheckerRequestHandler#init(NamedList).mjava","sourceNew":"    public void init(NamedList args) {\n        super.init(args);\n        SolrParams p = SolrParams.toSolrParams(args);\n        termSourceField = p.get(\"termSourceField\");\n\n        try {\n          String dir = p.get(\"spellcheckerIndexDir\");\n          if (null != dir) {\n            File f = new File(dir);\n            if ( ! f.isAbsolute() ) {\n              f = new File(SolrCore.getSolrCore().getDataDir(), dir);\n            }\n            dirDescription = f.getAbsolutePath();\n            log.info(\"using spell directory: \" + dirDescription);\n            spellcheckerIndexDir = FSDirectory.getDirectory(f);\n          } else {\n            log.info(\"using RAM based spell directory\");\n          }\n          spellChecker = new SpellChecker(spellcheckerIndexDir);\n        } catch (IOException e) {\n          throw new RuntimeException(\"Cannot open SpellChecker index\", e);\n        }\n    }\n\n","sourceOld":"    public void init(NamedList args) {\n        super.init(args);\n        SolrParams p = SolrParams.toSolrParams(args);\n        termSourceField = p.get(\"termSourceField\");\n        spellcheckerIndexDir = p.get(\"spellcheckerIndexDir\");\n        try {\n            spellChecker = new SpellChecker(FSDirectory.getDirectory(spellcheckerIndexDir));\n        } catch (IOException e) {\n            throw new RuntimeException(\"Cannot open SpellChecker index\", e);\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6855049ff6427dd05716183aaeb715f5c84abf44","date":1174943640,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/SpellCheckerRequestHandler#init(NamedList).mjava","pathOld":"src/java/org/apache/solr/handler/SpellCheckerRequestHandler#init(NamedList).mjava","sourceNew":"  public void init(NamedList args) {\n    super.init(args);\n    SolrParams p = SolrParams.toSolrParams(args);\n    termSourceField = p.get(\"termSourceField\");\n\n    try {\n      String dir = p.get(\"spellcheckerIndexDir\");\n      if (null != dir) {\n        File f = new File(dir);\n        if ( ! f.isAbsolute() ) {\n          f = new File(SolrCore.getSolrCore().getDataDir(), dir);\n        }\n        dirDescription = f.getAbsolutePath();\n        log.info(\"using spell directory: \" + dirDescription);\n        spellcheckerIndexDir = FSDirectory.getDirectory(f);\n      } else {\n        log.info(\"using RAM based spell directory\");\n      }\n      spellChecker = new SpellChecker(spellcheckerIndexDir);\n    } catch (IOException e) {\n      throw new RuntimeException(\"Cannot open SpellChecker index\", e);\n    }\n  }\n\n","sourceOld":"    public void init(NamedList args) {\n        super.init(args);\n        SolrParams p = SolrParams.toSolrParams(args);\n        termSourceField = p.get(\"termSourceField\");\n\n        try {\n          String dir = p.get(\"spellcheckerIndexDir\");\n          if (null != dir) {\n            File f = new File(dir);\n            if ( ! f.isAbsolute() ) {\n              f = new File(SolrCore.getSolrCore().getDataDir(), dir);\n            }\n            dirDescription = f.getAbsolutePath();\n            log.info(\"using spell directory: \" + dirDescription);\n            spellcheckerIndexDir = FSDirectory.getDirectory(f);\n          } else {\n            log.info(\"using RAM based spell directory\");\n          }\n          spellChecker = new SpellChecker(spellcheckerIndexDir);\n        } catch (IOException e) {\n          throw new RuntimeException(\"Cannot open SpellChecker index\", e);\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"071bae97f774d86dca206e837de23a56b71c8b29","date":1194291554,"type":3,"author":"Mike Klaas","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/SpellCheckerRequestHandler#init(NamedList).mjava","pathOld":"src/java/org/apache/solr/handler/SpellCheckerRequestHandler#init(NamedList).mjava","sourceNew":"  public void init(NamedList args) {\n    super.init(args);\n    SolrParams p = SolrParams.toSolrParams(args);\n    termSourceField = p.get(SOURCE_FIELD, p.get(\"termSourceField\"));\n\n    try {\n      String dir = p.get(INDEX_DIR, p.get(\"spellcheckerIndexDir\"));\n      if (null != dir) {\n        File f = new File(dir);\n        if ( ! f.isAbsolute() ) {\n          f = new File(SolrCore.getSolrCore().getDataDir(), dir);\n        }\n        dirDescription = f.getAbsolutePath();\n        log.info(\"using spell directory: \" + dirDescription);\n        spellcheckerIndexDir = FSDirectory.getDirectory(f);\n      } else {\n        log.info(\"using RAM based spell directory\");\n      }\n      spellChecker = new SpellChecker(spellcheckerIndexDir);\n    } catch (IOException e) {\n      throw new RuntimeException(\"Cannot open SpellChecker index\", e);\n    }\n  }\n\n","sourceOld":"  public void init(NamedList args) {\n    super.init(args);\n    SolrParams p = SolrParams.toSolrParams(args);\n    termSourceField = p.get(\"termSourceField\");\n\n    try {\n      String dir = p.get(\"spellcheckerIndexDir\");\n      if (null != dir) {\n        File f = new File(dir);\n        if ( ! f.isAbsolute() ) {\n          f = new File(SolrCore.getSolrCore().getDataDir(), dir);\n        }\n        dirDescription = f.getAbsolutePath();\n        log.info(\"using spell directory: \" + dirDescription);\n        spellcheckerIndexDir = FSDirectory.getDirectory(f);\n      } else {\n        log.info(\"using RAM based spell directory\");\n      }\n      spellChecker = new SpellChecker(spellcheckerIndexDir);\n    } catch (IOException e) {\n      throw new RuntimeException(\"Cannot open SpellChecker index\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"89b4df10540683a05a9d930000b22c3a2cd470e3","date":1196797229,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/SpellCheckerRequestHandler#init(NamedList).mjava","pathOld":"src/java/org/apache/solr/handler/SpellCheckerRequestHandler#init(NamedList).mjava","sourceNew":"  @Override\n  public void init(NamedList args) {\n    super.init(args);\n    this.args = SolrParams.toSolrParams(args);\n  }\n\n","sourceOld":"  public void init(NamedList args) {\n    super.init(args);\n    SolrParams p = SolrParams.toSolrParams(args);\n    termSourceField = p.get(SOURCE_FIELD, p.get(\"termSourceField\"));\n\n    try {\n      String dir = p.get(INDEX_DIR, p.get(\"spellcheckerIndexDir\"));\n      if (null != dir) {\n        File f = new File(dir);\n        if ( ! f.isAbsolute() ) {\n          f = new File(SolrCore.getSolrCore().getDataDir(), dir);\n        }\n        dirDescription = f.getAbsolutePath();\n        log.info(\"using spell directory: \" + dirDescription);\n        spellcheckerIndexDir = FSDirectory.getDirectory(f);\n      } else {\n        log.info(\"using RAM based spell directory\");\n      }\n      spellChecker = new SpellChecker(spellcheckerIndexDir);\n    } catch (IOException e) {\n      throw new RuntimeException(\"Cannot open SpellChecker index\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/SpellCheckerRequestHandler#init(NamedList).mjava","pathOld":"src/java/org/apache/solr/handler/SpellCheckerRequestHandler#init(NamedList).mjava","sourceNew":"  @Override\n  public void init(NamedList args) {\n    super.init(args);\n    this.args = SolrParams.toSolrParams(args);\n  }\n\n","sourceOld":"  @Override\n  public void init(NamedList args) {\n    super.init(args);\n    this.args = SolrParams.toSolrParams(args);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"89b4df10540683a05a9d930000b22c3a2cd470e3":["071bae97f774d86dca206e837de23a56b71c8b29"],"c51a4de58ddc877061c374826b0232414b06c08b":["583cdb620dea20ef2bfafd8639a73b29de305103"],"583cdb620dea20ef2bfafd8639a73b29de305103":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"071bae97f774d86dca206e837de23a56b71c8b29":["6855049ff6427dd05716183aaeb715f5c84abf44"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"6855049ff6427dd05716183aaeb715f5c84abf44":["c51a4de58ddc877061c374826b0232414b06c08b"],"ad94625fb8d088209f46650c8097196fec67f00c":["89b4df10540683a05a9d930000b22c3a2cd470e3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"89b4df10540683a05a9d930000b22c3a2cd470e3":["ad94625fb8d088209f46650c8097196fec67f00c"],"c51a4de58ddc877061c374826b0232414b06c08b":["6855049ff6427dd05716183aaeb715f5c84abf44"],"583cdb620dea20ef2bfafd8639a73b29de305103":["c51a4de58ddc877061c374826b0232414b06c08b"],"071bae97f774d86dca206e837de23a56b71c8b29":["89b4df10540683a05a9d930000b22c3a2cd470e3"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["583cdb620dea20ef2bfafd8639a73b29de305103"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6855049ff6427dd05716183aaeb715f5c84abf44":["071bae97f774d86dca206e837de23a56b71c8b29"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}