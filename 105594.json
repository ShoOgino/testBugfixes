{"path":"solr/core/src/java/org/apache/solr/update/processor/TimePartitionedUpdateProcessor#TimePartitionedUpdateProcessor(SolrQueryRequest,SolrQueryResponse,UpdateRequestProcessor,String,DistribPhase).mjava","commits":[{"id":"543992c52fe295c8b15aafe4b066e7e3a9a42c48","date":1510862949,"type":0,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/TimePartitionedUpdateProcessor#TimePartitionedUpdateProcessor(SolrQueryRequest,SolrQueryResponse,UpdateRequestProcessor,String,DistribPhase).mjava","pathOld":"/dev/null","sourceNew":"  protected TimePartitionedUpdateProcessor(SolrQueryRequest req, SolrQueryResponse rsp, UpdateRequestProcessor next,\n                                           String aliasName,\n                                           DistribPhase aliasDistribPhase) {\n    super(next);\n    assert aliasDistribPhase == DistribPhase.NONE;\n    final SolrCore core = req.getCore();\n    this.thisCollection = core.getCoreDescriptor().getCloudDescriptor().getCollectionName();\n    this.aliasName = aliasName;\n    CoreContainer cc = core.getCoreContainer();\n    zkController = cc.getZkController();\n    cmdDistrib = new SolrCmdDistributor(cc.getUpdateShardHandler());\n\n    final Map<String, String> aliasMetadata = zkController.getZkStateReader().getAliases().getCollectionAliasMetadata(aliasName);\n    if (aliasMetadata == null) {\n      throw newAliasMustExistException(); // if it did exist, we'd have a non-null map\n    }\n    routeField = aliasMetadata.get(ROUTER_FIELD_METADATA);\n\n    ModifiableSolrParams outParams = new ModifiableSolrParams(req.getParams());\n    // Don't distribute these params; they will be distributed from the local processCommit separately.\n    //   (See RequestHandlerUtils.handleCommit from which this list was retrieved from)\n    outParams.remove(UpdateParams.OPTIMIZE);\n    outParams.remove(UpdateParams.COMMIT);\n    outParams.remove(UpdateParams.SOFT_COMMIT);\n    outParams.remove(UpdateParams.PREPARE_COMMIT);\n    outParams.remove(UpdateParams.ROLLBACK);\n    // Add these...\n    //  Ensures we skip over URPs prior to DistributedURP (see UpdateRequestProcessorChain)\n    outParams.set(DISTRIB_UPDATE_PARAM, DistribPhase.NONE.toString());\n    //  Signal this is a distributed search from this URP (see #wrap())\n    outParams.set(ALIAS_DISTRIB_UPDATE_PARAM, DistribPhase.TOLEADER.toString());\n    outParams.set(DISTRIB_FROM, ZkCoreNodeProps.getCoreUrl(zkController.getBaseUrl(), core.getName()));\n    outParamsToLeader = outParams;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5613a70439d5d429f0689c2c5a21615e58deff97","date":1512102314,"type":5,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/TimeRoutedAliasUpdateProcessor#TimeRoutedAliasUpdateProcessor(SolrQueryRequest,SolrQueryResponse,UpdateRequestProcessor,String,DistribPhase).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/TimePartitionedUpdateProcessor#TimePartitionedUpdateProcessor(SolrQueryRequest,SolrQueryResponse,UpdateRequestProcessor,String,DistribPhase).mjava","sourceNew":"  protected TimeRoutedAliasUpdateProcessor(SolrQueryRequest req, SolrQueryResponse rsp, UpdateRequestProcessor next,\n                                           String aliasName,\n                                           DistribPhase aliasDistribPhase) {\n    super(next);\n    assert aliasDistribPhase == DistribPhase.NONE;\n    final SolrCore core = req.getCore();\n    this.thisCollection = core.getCoreDescriptor().getCloudDescriptor().getCollectionName();\n    this.aliasName = aliasName;\n    CoreContainer cc = core.getCoreContainer();\n    zkController = cc.getZkController();\n    cmdDistrib = new SolrCmdDistributor(cc.getUpdateShardHandler());\n\n    final Map<String, String> aliasMetadata = zkController.getZkStateReader().getAliases().getCollectionAliasMetadata(aliasName);\n    if (aliasMetadata == null) {\n      throw newAliasMustExistException(); // if it did exist, we'd have a non-null map\n    }\n    routeField = aliasMetadata.get(ROUTER_FIELD_METADATA);\n\n    ModifiableSolrParams outParams = new ModifiableSolrParams(req.getParams());\n    // Don't distribute these params; they will be distributed from the local processCommit separately.\n    //   (See RequestHandlerUtils.handleCommit from which this list was retrieved from)\n    outParams.remove(UpdateParams.OPTIMIZE);\n    outParams.remove(UpdateParams.COMMIT);\n    outParams.remove(UpdateParams.SOFT_COMMIT);\n    outParams.remove(UpdateParams.PREPARE_COMMIT);\n    outParams.remove(UpdateParams.ROLLBACK);\n    // Add these...\n    //  Ensures we skip over URPs prior to DistributedURP (see UpdateRequestProcessorChain)\n    outParams.set(DISTRIB_UPDATE_PARAM, DistribPhase.NONE.toString());\n    //  Signal this is a distributed search from this URP (see #wrap())\n    outParams.set(ALIAS_DISTRIB_UPDATE_PARAM, DistribPhase.TOLEADER.toString());\n    outParams.set(DISTRIB_FROM, ZkCoreNodeProps.getCoreUrl(zkController.getBaseUrl(), core.getName()));\n    outParamsToLeader = outParams;\n  }\n\n","sourceOld":"  protected TimePartitionedUpdateProcessor(SolrQueryRequest req, SolrQueryResponse rsp, UpdateRequestProcessor next,\n                                           String aliasName,\n                                           DistribPhase aliasDistribPhase) {\n    super(next);\n    assert aliasDistribPhase == DistribPhase.NONE;\n    final SolrCore core = req.getCore();\n    this.thisCollection = core.getCoreDescriptor().getCloudDescriptor().getCollectionName();\n    this.aliasName = aliasName;\n    CoreContainer cc = core.getCoreContainer();\n    zkController = cc.getZkController();\n    cmdDistrib = new SolrCmdDistributor(cc.getUpdateShardHandler());\n\n    final Map<String, String> aliasMetadata = zkController.getZkStateReader().getAliases().getCollectionAliasMetadata(aliasName);\n    if (aliasMetadata == null) {\n      throw newAliasMustExistException(); // if it did exist, we'd have a non-null map\n    }\n    routeField = aliasMetadata.get(ROUTER_FIELD_METADATA);\n\n    ModifiableSolrParams outParams = new ModifiableSolrParams(req.getParams());\n    // Don't distribute these params; they will be distributed from the local processCommit separately.\n    //   (See RequestHandlerUtils.handleCommit from which this list was retrieved from)\n    outParams.remove(UpdateParams.OPTIMIZE);\n    outParams.remove(UpdateParams.COMMIT);\n    outParams.remove(UpdateParams.SOFT_COMMIT);\n    outParams.remove(UpdateParams.PREPARE_COMMIT);\n    outParams.remove(UpdateParams.ROLLBACK);\n    // Add these...\n    //  Ensures we skip over URPs prior to DistributedURP (see UpdateRequestProcessorChain)\n    outParams.set(DISTRIB_UPDATE_PARAM, DistribPhase.NONE.toString());\n    //  Signal this is a distributed search from this URP (see #wrap())\n    outParams.set(ALIAS_DISTRIB_UPDATE_PARAM, DistribPhase.TOLEADER.toString());\n    outParams.set(DISTRIB_FROM, ZkCoreNodeProps.getCoreUrl(zkController.getBaseUrl(), core.getName()));\n    outParamsToLeader = outParams;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5613a70439d5d429f0689c2c5a21615e58deff97":["543992c52fe295c8b15aafe4b066e7e3a9a42c48"],"543992c52fe295c8b15aafe4b066e7e3a9a42c48":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5613a70439d5d429f0689c2c5a21615e58deff97"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["543992c52fe295c8b15aafe4b066e7e3a9a42c48"],"5613a70439d5d429f0689c2c5a21615e58deff97":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"543992c52fe295c8b15aafe4b066e7e3a9a42c48":["5613a70439d5d429f0689c2c5a21615e58deff97"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}