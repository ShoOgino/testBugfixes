{"path":"solr/core/src/test/org/apache/solr/search/SortSpecParsingTest#testSort().mjava","commits":[{"id":"6c8dc56dbae186505066de8a78986cba31525ef0","date":1447876120,"type":1,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/SortSpecParsingTest#testSort().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/QueryParsingTest#testSort().mjava","sourceNew":"  @Test\n  public void testSort() throws Exception {\n    Sort sort;\n    SortSpec spec;\n    SolrQueryRequest req = req();\n\n    sort = SortSpecParsing.parseSortSpec(\"score desc\", req).getSort();\n    assertNull(\"sort\", sort);//only 1 thing in the list, no Sort specified\n\n    spec = SortSpecParsing.parseSortSpec(\"score desc\", req);\n    assertNotNull(\"spec\", spec);\n    assertNull(spec.getSort());\n    assertNotNull(spec.getSchemaFields());\n    assertEquals(0, spec.getSchemaFields().size());\n\n    // SOLR-4458 - using different case variations of asc and desc\n    sort = SortSpecParsing.parseSortSpec(\"score aSc\", req).getSort();\n    SortField[] flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.SCORE);\n    assertTrue(flds[0].getReverse());\n\n    spec = SortSpecParsing.parseSortSpec(\"score aSc\", req);\n    flds = spec.getSort().getSort();\n    assertEquals(1, flds.length);\n    assertEquals(flds[0].getType(), SortField.Type.SCORE);\n    assertTrue(flds[0].getReverse());\n    assertEquals(1, spec.getSchemaFields().size());\n    assertNull(spec.getSchemaFields().get(0));\n\n    sort = SortSpecParsing.parseSortSpec(\"weight dEsC\", req).getSort();\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n\n    spec = SortSpecParsing.parseSortSpec(\"weight dEsC\", req);\n    flds = spec.getSort().getSort();\n    assertEquals(1, flds.length);\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(1, spec.getSchemaFields().size());\n    assertNotNull(spec.getSchemaFields().get(0));\n    assertEquals(\"weight\", spec.getSchemaFields().get(0).getName());\n\n    sort = SortSpecParsing.parseSortSpec(\"weight desc,bday ASC\", req).getSort();\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.Type.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n    //order aliases\n    sort = SortSpecParsing.parseSortSpec(\"weight top,bday asc\", req).getSort();\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.Type.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n    sort = SortSpecParsing.parseSortSpec(\"weight top,bday bottom\", req).getSort();\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.Type.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n\n    //test weird spacing\n    sort = SortSpecParsing.parseSortSpec(\"weight         DESC,            bday         asc\", req).getSort();\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getType(), SortField.Type.LONG);\n    //handles trailing commas\n    sort = SortSpecParsing.parseSortSpec(\"weight desc,\", req).getSort();\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n\n    //test functions\n    sort = SortSpecParsing.parseSortSpec(\"pow(weight, 2) desc\", req).getSort();\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.REWRITEABLE);\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2))\");\n    \n    //test functions (more deep)\n    sort = SortSpecParsing.parseSortSpec(\"sum(product(r_f1,sum(d_f1,t_f1,1.0)),a_f1) asc\", req).getSort();\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.REWRITEABLE);\n    assertEquals(flds[0].getField(), \"sum(product(float(r_f1),sum(float(d_f1),float(t_f1),const(1.0))),float(a_f1))\");\n\n    sort = SortSpecParsing.parseSortSpec(\"pow(weight,                 2.0)         desc\", req).getSort();\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.REWRITEABLE);\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2.0))\");\n                 \n\n    spec = SortSpecParsing.parseSortSpec(\"pow(weight, 2.0) desc, weight    desc,   bday    asc\", req);\n    flds = spec.getSort().getSort();\n    List<SchemaField> schemaFlds = spec.getSchemaFields();\n    assertEquals(3, flds.length);\n    assertEquals(3, schemaFlds.size());\n\n    assertEquals(flds[0].getType(), SortField.Type.REWRITEABLE);\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2.0))\");\n    assertNull(schemaFlds.get(0));\n\n    assertEquals(flds[1].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[1].getField(), \"weight\");\n    assertNotNull(schemaFlds.get(1));\n    assertEquals(\"weight\", schemaFlds.get(1).getName());\n\n    assertEquals(flds[2].getField(), \"bday\");\n    assertEquals(flds[2].getType(), SortField.Type.LONG);\n    assertNotNull(schemaFlds.get(2));\n    assertEquals(\"bday\", schemaFlds.get(2).getName());\n    \n    //handles trailing commas\n    sort = SortSpecParsing.parseSortSpec(\"weight desc,\", req).getSort();\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n\n    //Test literals in functions\n    sort = SortSpecParsing.parseSortSpec(\"strdist(foo_s1, \\\"junk\\\", jw) desc\", req).getSort();\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.REWRITEABLE);\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"strdist(str(foo_s1),literal(junk), dist=org.apache.lucene.search.spell.JaroWinklerDistance)\");\n\n    sort = SortSpecParsing.parseSortSpec(\"\", req).getSort();\n    assertNull(sort);\n\n    spec = SortSpecParsing.parseSortSpec(\"\", req);\n    assertNotNull(spec);\n    assertNull(spec.getSort());\n\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testSort() throws Exception {\n    Sort sort;\n    SortSpec spec;\n    SolrQueryRequest req = req();\n\n    sort = QueryParsing.parseSortSpec(\"score desc\", req).getSort();\n    assertNull(\"sort\", sort);//only 1 thing in the list, no Sort specified\n\n    spec = QueryParsing.parseSortSpec(\"score desc\", req);\n    assertNotNull(\"spec\", spec);\n    assertNull(spec.getSort());\n    assertNotNull(spec.getSchemaFields());\n    assertEquals(0, spec.getSchemaFields().size());\n\n    // SOLR-4458 - using different case variations of asc and desc\n    sort = QueryParsing.parseSortSpec(\"score aSc\", req).getSort();\n    SortField[] flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.SCORE);\n    assertTrue(flds[0].getReverse());\n\n    spec = QueryParsing.parseSortSpec(\"score aSc\", req);\n    flds = spec.getSort().getSort();\n    assertEquals(1, flds.length);\n    assertEquals(flds[0].getType(), SortField.Type.SCORE);\n    assertTrue(flds[0].getReverse());\n    assertEquals(1, spec.getSchemaFields().size());\n    assertNull(spec.getSchemaFields().get(0));\n\n    sort = QueryParsing.parseSortSpec(\"weight dEsC\", req).getSort();\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n\n    spec = QueryParsing.parseSortSpec(\"weight dEsC\", req);\n    flds = spec.getSort().getSort();\n    assertEquals(1, flds.length);\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(1, spec.getSchemaFields().size());\n    assertNotNull(spec.getSchemaFields().get(0));\n    assertEquals(\"weight\", spec.getSchemaFields().get(0).getName());\n\n    sort = QueryParsing.parseSortSpec(\"weight desc,bday ASC\", req).getSort();\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.Type.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n    //order aliases\n    sort = QueryParsing.parseSortSpec(\"weight top,bday asc\", req).getSort();\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.Type.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n    sort = QueryParsing.parseSortSpec(\"weight top,bday bottom\", req).getSort();\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.Type.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n\n    //test weird spacing\n    sort = QueryParsing.parseSortSpec(\"weight         DESC,            bday         asc\", req).getSort();\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getType(), SortField.Type.LONG);\n    //handles trailing commas\n    sort = QueryParsing.parseSortSpec(\"weight desc,\", req).getSort();\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n\n    //test functions\n    sort = QueryParsing.parseSortSpec(\"pow(weight, 2) desc\", req).getSort();\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.REWRITEABLE);\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2))\");\n    \n    //test functions (more deep)\n    sort = QueryParsing.parseSortSpec(\"sum(product(r_f1,sum(d_f1,t_f1,1.0)),a_f1) asc\", req).getSort();\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.REWRITEABLE);\n    assertEquals(flds[0].getField(), \"sum(product(float(r_f1),sum(float(d_f1),float(t_f1),const(1.0))),float(a_f1))\");\n\n    sort = QueryParsing.parseSortSpec(\"pow(weight,                 2.0)         desc\", req).getSort();\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.REWRITEABLE);\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2.0))\");\n                 \n\n    spec = QueryParsing.parseSortSpec(\"pow(weight, 2.0) desc, weight    desc,   bday    asc\", req);\n    flds = spec.getSort().getSort();\n    List<SchemaField> schemaFlds = spec.getSchemaFields();\n    assertEquals(3, flds.length);\n    assertEquals(3, schemaFlds.size());\n\n    assertEquals(flds[0].getType(), SortField.Type.REWRITEABLE);\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2.0))\");\n    assertNull(schemaFlds.get(0));\n\n    assertEquals(flds[1].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[1].getField(), \"weight\");\n    assertNotNull(schemaFlds.get(1));\n    assertEquals(\"weight\", schemaFlds.get(1).getName());\n\n    assertEquals(flds[2].getField(), \"bday\");\n    assertEquals(flds[2].getType(), SortField.Type.LONG);\n    assertNotNull(schemaFlds.get(2));\n    assertEquals(\"bday\", schemaFlds.get(2).getName());\n    \n    //handles trailing commas\n    sort = QueryParsing.parseSortSpec(\"weight desc,\", req).getSort();\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n\n    //Test literals in functions\n    sort = QueryParsing.parseSortSpec(\"strdist(foo_s1, \\\"junk\\\", jw) desc\", req).getSort();\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.REWRITEABLE);\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"strdist(str(foo_s1),literal(junk), dist=org.apache.lucene.search.spell.JaroWinklerDistance)\");\n\n    sort = QueryParsing.parseSortSpec(\"\", req).getSort();\n    assertNull(sort);\n\n    spec = QueryParsing.parseSortSpec(\"\", req);\n    assertNotNull(spec);\n    assertNull(spec.getSort());\n\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c72019fa1d825f8209f23a6897c39e6006e3027","date":1448987188,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/SortSpecParsingTest#testSort().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/SortSpecParsingTest#testSort().mjava","sourceNew":"  @Test\n  public void testSort() throws Exception {\n    Sort sort;\n    SortSpec spec;\n    SolrQueryRequest req = req();\n\n    sort = doParseSortSpec(\"score desc\", req).getSort();\n    assertNull(\"sort\", sort);//only 1 thing in the list, no Sort specified\n\n    spec = doParseSortSpec(\"score desc\", req);\n    assertNotNull(\"spec\", spec);\n    assertNull(spec.getSort());\n    assertNotNull(spec.getSchemaFields());\n    assertEquals(0, spec.getSchemaFields().size());\n\n    // SOLR-4458 - using different case variations of asc and desc\n    sort = doParseSortSpec(\"score aSc\", req).getSort();\n    SortField[] flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.SCORE);\n    assertTrue(flds[0].getReverse());\n\n    spec = doParseSortSpec(\"score aSc\", req);\n    flds = spec.getSort().getSort();\n    assertEquals(1, flds.length);\n    assertEquals(flds[0].getType(), SortField.Type.SCORE);\n    assertTrue(flds[0].getReverse());\n    assertEquals(1, spec.getSchemaFields().size());\n    assertNull(spec.getSchemaFields().get(0));\n\n    sort = doParseSortSpec(\"weight dEsC\", req).getSort();\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n\n    spec = doParseSortSpec(\"weight dEsC\", req);\n    flds = spec.getSort().getSort();\n    assertEquals(1, flds.length);\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(1, spec.getSchemaFields().size());\n    assertNotNull(spec.getSchemaFields().get(0));\n    assertEquals(\"weight\", spec.getSchemaFields().get(0).getName());\n\n    sort = doParseSortSpec(\"weight desc,bday ASC\", req).getSort();\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.Type.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n    //order aliases\n    sort = doParseSortSpec(\"weight top,bday asc\", req).getSort();\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.Type.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n    sort = doParseSortSpec(\"weight top,bday bottom\", req).getSort();\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.Type.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n\n    //test weird spacing\n    sort = doParseSortSpec(\"weight         DESC,            bday         asc\", req).getSort();\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getType(), SortField.Type.LONG);\n    //handles trailing commas\n    sort = doParseSortSpec(\"weight desc,\", req).getSort();\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n\n    //test functions\n    sort = SortSpecParsing.parseSortSpec(\"pow(weight, 2) desc\", req).getSort();\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.REWRITEABLE);\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2))\");\n    \n    //test functions (more deep)\n    sort = SortSpecParsing.parseSortSpec(\"sum(product(r_f1,sum(d_f1,t_f1,1.0)),a_f1) asc\", req).getSort();\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.REWRITEABLE);\n    assertEquals(flds[0].getField(), \"sum(product(float(r_f1),sum(float(d_f1),float(t_f1),const(1.0))),float(a_f1))\");\n\n    sort = SortSpecParsing.parseSortSpec(\"pow(weight,                 2.0)         desc\", req).getSort();\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.REWRITEABLE);\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2.0))\");\n                 \n\n    spec = SortSpecParsing.parseSortSpec(\"pow(weight, 2.0) desc, weight    desc,   bday    asc\", req);\n    flds = spec.getSort().getSort();\n    List<SchemaField> schemaFlds = spec.getSchemaFields();\n    assertEquals(3, flds.length);\n    assertEquals(3, schemaFlds.size());\n\n    assertEquals(flds[0].getType(), SortField.Type.REWRITEABLE);\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2.0))\");\n    assertNull(schemaFlds.get(0));\n\n    assertEquals(flds[1].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[1].getField(), \"weight\");\n    assertNotNull(schemaFlds.get(1));\n    assertEquals(\"weight\", schemaFlds.get(1).getName());\n\n    assertEquals(flds[2].getField(), \"bday\");\n    assertEquals(flds[2].getType(), SortField.Type.LONG);\n    assertNotNull(schemaFlds.get(2));\n    assertEquals(\"bday\", schemaFlds.get(2).getName());\n    \n    //handles trailing commas\n    sort = doParseSortSpec(\"weight desc,\", req).getSort();\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n\n    //Test literals in functions\n    sort = SortSpecParsing.parseSortSpec(\"strdist(foo_s1, \\\"junk\\\", jw) desc\", req).getSort();\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.REWRITEABLE);\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"strdist(str(foo_s1),literal(junk), dist=org.apache.lucene.search.spell.JaroWinklerDistance)\");\n\n    sort = doParseSortSpec(\"\", req).getSort();\n    assertNull(sort);\n\n    spec = doParseSortSpec(\"\", req);\n    assertNotNull(spec);\n    assertNull(spec.getSort());\n\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testSort() throws Exception {\n    Sort sort;\n    SortSpec spec;\n    SolrQueryRequest req = req();\n\n    sort = SortSpecParsing.parseSortSpec(\"score desc\", req).getSort();\n    assertNull(\"sort\", sort);//only 1 thing in the list, no Sort specified\n\n    spec = SortSpecParsing.parseSortSpec(\"score desc\", req);\n    assertNotNull(\"spec\", spec);\n    assertNull(spec.getSort());\n    assertNotNull(spec.getSchemaFields());\n    assertEquals(0, spec.getSchemaFields().size());\n\n    // SOLR-4458 - using different case variations of asc and desc\n    sort = SortSpecParsing.parseSortSpec(\"score aSc\", req).getSort();\n    SortField[] flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.SCORE);\n    assertTrue(flds[0].getReverse());\n\n    spec = SortSpecParsing.parseSortSpec(\"score aSc\", req);\n    flds = spec.getSort().getSort();\n    assertEquals(1, flds.length);\n    assertEquals(flds[0].getType(), SortField.Type.SCORE);\n    assertTrue(flds[0].getReverse());\n    assertEquals(1, spec.getSchemaFields().size());\n    assertNull(spec.getSchemaFields().get(0));\n\n    sort = SortSpecParsing.parseSortSpec(\"weight dEsC\", req).getSort();\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n\n    spec = SortSpecParsing.parseSortSpec(\"weight dEsC\", req);\n    flds = spec.getSort().getSort();\n    assertEquals(1, flds.length);\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(1, spec.getSchemaFields().size());\n    assertNotNull(spec.getSchemaFields().get(0));\n    assertEquals(\"weight\", spec.getSchemaFields().get(0).getName());\n\n    sort = SortSpecParsing.parseSortSpec(\"weight desc,bday ASC\", req).getSort();\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.Type.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n    //order aliases\n    sort = SortSpecParsing.parseSortSpec(\"weight top,bday asc\", req).getSort();\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.Type.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n    sort = SortSpecParsing.parseSortSpec(\"weight top,bday bottom\", req).getSort();\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.Type.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n\n    //test weird spacing\n    sort = SortSpecParsing.parseSortSpec(\"weight         DESC,            bday         asc\", req).getSort();\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getType(), SortField.Type.LONG);\n    //handles trailing commas\n    sort = SortSpecParsing.parseSortSpec(\"weight desc,\", req).getSort();\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n\n    //test functions\n    sort = SortSpecParsing.parseSortSpec(\"pow(weight, 2) desc\", req).getSort();\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.REWRITEABLE);\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2))\");\n    \n    //test functions (more deep)\n    sort = SortSpecParsing.parseSortSpec(\"sum(product(r_f1,sum(d_f1,t_f1,1.0)),a_f1) asc\", req).getSort();\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.REWRITEABLE);\n    assertEquals(flds[0].getField(), \"sum(product(float(r_f1),sum(float(d_f1),float(t_f1),const(1.0))),float(a_f1))\");\n\n    sort = SortSpecParsing.parseSortSpec(\"pow(weight,                 2.0)         desc\", req).getSort();\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.REWRITEABLE);\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2.0))\");\n                 \n\n    spec = SortSpecParsing.parseSortSpec(\"pow(weight, 2.0) desc, weight    desc,   bday    asc\", req);\n    flds = spec.getSort().getSort();\n    List<SchemaField> schemaFlds = spec.getSchemaFields();\n    assertEquals(3, flds.length);\n    assertEquals(3, schemaFlds.size());\n\n    assertEquals(flds[0].getType(), SortField.Type.REWRITEABLE);\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2.0))\");\n    assertNull(schemaFlds.get(0));\n\n    assertEquals(flds[1].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[1].getField(), \"weight\");\n    assertNotNull(schemaFlds.get(1));\n    assertEquals(\"weight\", schemaFlds.get(1).getName());\n\n    assertEquals(flds[2].getField(), \"bday\");\n    assertEquals(flds[2].getType(), SortField.Type.LONG);\n    assertNotNull(schemaFlds.get(2));\n    assertEquals(\"bday\", schemaFlds.get(2).getName());\n    \n    //handles trailing commas\n    sort = SortSpecParsing.parseSortSpec(\"weight desc,\", req).getSort();\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n\n    //Test literals in functions\n    sort = SortSpecParsing.parseSortSpec(\"strdist(foo_s1, \\\"junk\\\", jw) desc\", req).getSort();\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.REWRITEABLE);\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"strdist(str(foo_s1),literal(junk), dist=org.apache.lucene.search.spell.JaroWinklerDistance)\");\n\n    sort = SortSpecParsing.parseSortSpec(\"\", req).getSort();\n    assertNull(sort);\n\n    spec = SortSpecParsing.parseSortSpec(\"\", req);\n    assertNotNull(spec);\n    assertNull(spec.getSort());\n\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6c8dc56dbae186505066de8a78986cba31525ef0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2c72019fa1d825f8209f23a6897c39e6006e3027":["6c8dc56dbae186505066de8a78986cba31525ef0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2c72019fa1d825f8209f23a6897c39e6006e3027"]},"commit2Childs":{"6c8dc56dbae186505066de8a78986cba31525ef0":["2c72019fa1d825f8209f23a6897c39e6006e3027"],"2c72019fa1d825f8209f23a6897c39e6006e3027":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6c8dc56dbae186505066de8a78986cba31525ef0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}