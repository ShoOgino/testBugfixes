{"path":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/ext/TestExtendableQueryParser#testExtDefaultField().mjava","commits":[{"id":"36f91bf9cfc9d0c3155edab43359e7670ea8a5af","date":1269580873,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/ext/TestExtendableQueryParser#testExtDefaultField().mjava","pathOld":"lucene/contrib/misc/src/test/org/apache/lucene/queryParser/ext/TestExtendableQueryParser#testExtDefaultField().mjava","sourceNew":"  public void testExtDefaultField() throws Exception {\n    for (int i = 0; i < DELIMITERS.length; i++) {\n      Extensions ext = newExtensions(DELIMITERS[i]);\n      ext.add(\"testExt\", new ExtensionStub());\n      ExtendableQueryParser parser = (ExtendableQueryParser) getParser(null,\n          ext);\n      String field = ext.buildExtensionField(\"testExt\");\n      Query parse = parser.parse(String.format(\"%s:\\\"foo \\\\& bar\\\"\", field));\n      assertTrue(\"expected instance of TermQuery but was \" + parse.getClass(),\n          parse instanceof TermQuery);\n      TermQuery tquery = (TermQuery) parse;\n      assertEquals(\"field\", tquery.getTerm().field());\n      assertEquals(\"foo & bar\", tquery.getTerm().text());\n    }\n  }\n\n","sourceOld":"  public void testExtDefaultField() throws Exception {\n    for (int i = 0; i < DELIMITERS.length; i++) {\n      Extensions ext = newExtensions(DELIMITERS[i]);\n      ext.add(\"testExt\", new ExtensionStub());\n      ExtendableQueryParser parser = (ExtendableQueryParser) getParser(null,\n          ext);\n      String field = ext.buildExtensionField(\"testExt\");\n      Query parse = parser.parse(String.format(\"%s:\\\"foo \\\\& bar\\\"\", field));\n      assertTrue(\"expected instance of TermQuery but was \" + parse.getClass(),\n          parse instanceof TermQuery);\n      TermQuery tquery = (TermQuery) parse;\n      assertEquals(\"field\", tquery.getTerm().field());\n      assertEquals(\"foo & bar\", tquery.getTerm().text());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a53a291ad9b1cc050d846b68758c061a55d52734","date":1310437344,"type":5,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queryparser/src/test/org/apache/lucene/queryparser/ext/TestExtendableQueryParser#testExtDefaultField().mjava","pathOld":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/ext/TestExtendableQueryParser#testExtDefaultField().mjava","sourceNew":"  public void testExtDefaultField() throws Exception {\n    for (int i = 0; i < DELIMITERS.length; i++) {\n      Extensions ext = newExtensions(DELIMITERS[i]);\n      ext.add(\"testExt\", new ExtensionStub());\n      ExtendableQueryParser parser = (ExtendableQueryParser) getParser(null,\n          ext);\n      String field = ext.buildExtensionField(\"testExt\");\n      Query parse = parser.parse(String.format(\"%s:\\\"foo \\\\& bar\\\"\", field));\n      assertTrue(\"expected instance of TermQuery but was \" + parse.getClass(),\n          parse instanceof TermQuery);\n      TermQuery tquery = (TermQuery) parse;\n      assertEquals(\"field\", tquery.getTerm().field());\n      assertEquals(\"foo & bar\", tquery.getTerm().text());\n    }\n  }\n\n","sourceOld":"  public void testExtDefaultField() throws Exception {\n    for (int i = 0; i < DELIMITERS.length; i++) {\n      Extensions ext = newExtensions(DELIMITERS[i]);\n      ext.add(\"testExt\", new ExtensionStub());\n      ExtendableQueryParser parser = (ExtendableQueryParser) getParser(null,\n          ext);\n      String field = ext.buildExtensionField(\"testExt\");\n      Query parse = parser.parse(String.format(\"%s:\\\"foo \\\\& bar\\\"\", field));\n      assertTrue(\"expected instance of TermQuery but was \" + parse.getClass(),\n          parse instanceof TermQuery);\n      TermQuery tquery = (TermQuery) parse;\n      assertEquals(\"field\", tquery.getTerm().field());\n      assertEquals(\"foo & bar\", tquery.getTerm().text());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"36f91bf9cfc9d0c3155edab43359e7670ea8a5af":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a53a291ad9b1cc050d846b68758c061a55d52734":["36f91bf9cfc9d0c3155edab43359e7670ea8a5af"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a53a291ad9b1cc050d846b68758c061a55d52734"]},"commit2Childs":{"36f91bf9cfc9d0c3155edab43359e7670ea8a5af":["a53a291ad9b1cc050d846b68758c061a55d52734"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["36f91bf9cfc9d0c3155edab43359e7670ea8a5af"],"a53a291ad9b1cc050d846b68758c061a55d52734":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}