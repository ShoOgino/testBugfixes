{"path":"lucene/core/src/java/org/apache/lucene/analysis/CharArrayMap#equals(char[],int,int,char[]).mjava","commits":[{"id":"b266fe0ac2172d4ad87cff12bd9bf9f8c8247345","date":1465936684,"type":1,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/analysis/CharArrayMap#equals(char[],int,int,char[]).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/util/CharArrayMap#equals(char[],int,int,char[]).mjava","sourceNew":"  private boolean equals(char[] text1, int off, int len, char[] text2) {\n    if (len != text2.length)\n      return false;\n    final int limit = off+len;\n    if (ignoreCase) {\n      for(int i=0;i<len;) {\n        final int codePointAt = Character.codePointAt(text1, off+i, limit);\n        if (Character.toLowerCase(codePointAt) != Character.codePointAt(text2, i, text2.length))\n          return false;\n        i += Character.charCount(codePointAt); \n      }\n    } else {\n      for(int i=0;i<len;i++) {\n        if (text1[off+i] != text2[i])\n          return false;\n      }\n    }\n    return true;\n  }\n\n","sourceOld":"  private boolean equals(char[] text1, int off, int len, char[] text2) {\n    if (len != text2.length)\n      return false;\n    final int limit = off+len;\n    if (ignoreCase) {\n      for(int i=0;i<len;) {\n        final int codePointAt = Character.codePointAt(text1, off+i, limit);\n        if (Character.toLowerCase(codePointAt) != Character.codePointAt(text2, i, text2.length))\n          return false;\n        i += Character.charCount(codePointAt); \n      }\n    } else {\n      for(int i=0;i<len;i++) {\n        if (text1[off+i] != text2[i])\n          return false;\n      }\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/analysis/CharArrayMap#equals(char[],int,int,char[]).mjava","pathOld":"/dev/null","sourceNew":"  private boolean equals(char[] text1, int off, int len, char[] text2) {\n    if (len != text2.length)\n      return false;\n    final int limit = off+len;\n    if (ignoreCase) {\n      for(int i=0;i<len;) {\n        final int codePointAt = Character.codePointAt(text1, off+i, limit);\n        if (Character.toLowerCase(codePointAt) != Character.codePointAt(text2, i, text2.length))\n          return false;\n        i += Character.charCount(codePointAt); \n      }\n    } else {\n      for(int i=0;i<len;i++) {\n        if (text1[off+i] != text2[i])\n          return false;\n      }\n    }\n    return true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b266fe0ac2172d4ad87cff12bd9bf9f8c8247345":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b266fe0ac2172d4ad87cff12bd9bf9f8c8247345"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b266fe0ac2172d4ad87cff12bd9bf9f8c8247345"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b266fe0ac2172d4ad87cff12bd9bf9f8c8247345","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"b266fe0ac2172d4ad87cff12bd9bf9f8c8247345":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}