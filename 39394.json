{"path":"lucene/test-framework/src/java/org/apache/lucene/util/automaton/AutomatonTestUtil#determinizeSimple(Automaton).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/automaton/AutomatonTestUtil#determinizeSimple(Automaton).mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/util/automaton/AutomatonTestUtil#determinizeSimple(Automaton).mjava","sourceNew":"  /**\n   * Simple, original brics implementation of determinize()\n   */\n  public static void determinizeSimple(Automaton a) {\n    if (a.deterministic || a.isSingleton())\n      return;\n    Set<State> initialset = new HashSet<State>();\n    initialset.add(a.initial);\n    determinizeSimple(a, initialset);\n  }\n\n","sourceOld":"  /**\n   * Simple, original brics implementation of determinize()\n   */\n  public static void determinizeSimple(Automaton a) {\n    if (a.deterministic || a.isSingleton())\n      return;\n    Set<State> initialset = new HashSet<State>();\n    initialset.add(a.initial);\n    determinizeSimple(a, initialset);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/automaton/AutomatonTestUtil#determinizeSimple(Automaton).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/automaton/AutomatonTestUtil#determinizeSimple(Automaton).mjava","sourceNew":"  /**\n   * Simple, original brics implementation of determinize()\n   */\n  public static void determinizeSimple(Automaton a) {\n    if (a.deterministic || a.isSingleton())\n      return;\n    Set<State> initialset = new HashSet<>();\n    initialset.add(a.initial);\n    determinizeSimple(a, initialset);\n  }\n\n","sourceOld":"  /**\n   * Simple, original brics implementation of determinize()\n   */\n  public static void determinizeSimple(Automaton a) {\n    if (a.deterministic || a.isSingleton())\n      return;\n    Set<State> initialset = new HashSet<State>();\n    initialset.add(a.initial);\n    determinizeSimple(a, initialset);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7f4ef381bf0c2d618c6db830d3dd668c6901c05a","date":1402592253,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/automaton/AutomatonTestUtil#determinizeSimple(Automaton).mjava","sourceNew":null,"sourceOld":"  /**\n   * Simple, original brics implementation of determinize()\n   */\n  public static void determinizeSimple(Automaton a) {\n    if (a.deterministic || a.isSingleton())\n      return;\n    Set<State> initialset = new HashSet<>();\n    initialset.add(a.initial);\n    determinizeSimple(a, initialset);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ca1c732df8923f5624f6c06b1dcca9e69d98c96","date":1402957391,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/automaton/AutomatonTestUtil#determinizeSimple(Automaton).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/automaton/AutomatonTestUtil#determinizeSimpleLight(LightAutomaton).mjava","sourceNew":"  /**\n   * Simple, original brics implementation of determinize()\n   */\n  public static Automaton determinizeSimple(Automaton a) {\n    Set<Integer> initialset = new HashSet<>();\n    initialset.add(0);\n    return determinizeSimple(a, initialset);\n  }\n\n","sourceOld":"  /**\n   * Simple, original brics implementation of determinize()\n   */\n  public static LightAutomaton determinizeSimpleLight(LightAutomaton a) {\n    Set<Integer> initialset = new HashSet<>();\n    initialset.add(0);\n    return determinizeSimpleLight(a, initialset);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c84485629d80d203608e8975a1139de9933cc38","date":1403166128,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/automaton/AutomatonTestUtil#determinizeSimple(Automaton).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/automaton/AutomatonTestUtil#determinizeSimple(Automaton).mjava","sourceNew":"  /**\n   * Simple, original brics implementation of determinize()\n   */\n  public static Automaton determinizeSimple(Automaton a) {\n    Set<Integer> initialset = new HashSet<>();\n    initialset.add(0);\n    return determinizeSimple(a, initialset);\n  }\n\n","sourceOld":"  /**\n   * Simple, original brics implementation of determinize()\n   */\n  public static void determinizeSimple(Automaton a) {\n    if (a.deterministic || a.isSingleton())\n      return;\n    Set<State> initialset = new HashSet<>();\n    initialset.add(a.initial);\n    determinizeSimple(a, initialset);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["7f4ef381bf0c2d618c6db830d3dd668c6901c05a"],"7f4ef381bf0c2d618c6db830d3dd668c6901c05a":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"5c84485629d80d203608e8975a1139de9933cc38":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5c84485629d80d203608e8975a1139de9933cc38"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["7f4ef381bf0c2d618c6db830d3dd668c6901c05a","5c84485629d80d203608e8975a1139de9933cc38"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["5c84485629d80d203608e8975a1139de9933cc38"],"7f4ef381bf0c2d618c6db830d3dd668c6901c05a":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"5c84485629d80d203608e8975a1139de9933cc38":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}