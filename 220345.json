{"path":"lucene/backwards/src/java/org/apache/lucene/search/MultiTermQuery#getTotalNumberOfTerms().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/search/MultiTermQuery#getTotalNumberOfTerms().mjava","pathOld":"backwards/src/java/org/apache/lucene/search/MultiTermQuery#getTotalNumberOfTerms().mjava","sourceNew":"  /**\n   * Expert: Return the number of unique terms visited during execution of the query.\n   * If there are many of them, you may consider using another query type\n   * or optimize your total term count in index.\n   * <p>This method is not thread safe, be sure to only call it when no query is running!\n   * If you re-use the same query instance for another\n   * search, be sure to first reset the term counter\n   * with {@link #clearTotalNumberOfTerms}.\n   * <p>On optimized indexes / no MultiReaders, you get the correct number of\n   * unique terms for the whole index. Use this number to compare different queries.\n   * For non-optimized indexes this number can also be achieved in\n   * non-constant-score mode. In constant-score mode you get the total number of\n   * terms seeked for all segments / sub-readers.\n   * @see #clearTotalNumberOfTerms\n   */\n  public int getTotalNumberOfTerms() {\n    return numberOfTerms;\n  }\n\n","sourceOld":"  /**\n   * Expert: Return the number of unique terms visited during execution of the query.\n   * If there are many of them, you may consider using another query type\n   * or optimize your total term count in index.\n   * <p>This method is not thread safe, be sure to only call it when no query is running!\n   * If you re-use the same query instance for another\n   * search, be sure to first reset the term counter\n   * with {@link #clearTotalNumberOfTerms}.\n   * <p>On optimized indexes / no MultiReaders, you get the correct number of\n   * unique terms for the whole index. Use this number to compare different queries.\n   * For non-optimized indexes this number can also be achieved in\n   * non-constant-score mode. In constant-score mode you get the total number of\n   * terms seeked for all segments / sub-readers.\n   * @see #clearTotalNumberOfTerms\n   */\n  public int getTotalNumberOfTerms() {\n    return numberOfTerms;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/java/org/apache/lucene/search/MultiTermQuery#getTotalNumberOfTerms().mjava","sourceNew":null,"sourceOld":"  /**\n   * Expert: Return the number of unique terms visited during execution of the query.\n   * If there are many of them, you may consider using another query type\n   * or optimize your total term count in index.\n   * <p>This method is not thread safe, be sure to only call it when no query is running!\n   * If you re-use the same query instance for another\n   * search, be sure to first reset the term counter\n   * with {@link #clearTotalNumberOfTerms}.\n   * <p>On optimized indexes / no MultiReaders, you get the correct number of\n   * unique terms for the whole index. Use this number to compare different queries.\n   * For non-optimized indexes this number can also be achieved in\n   * non-constant-score mode. In constant-score mode you get the total number of\n   * terms seeked for all segments / sub-readers.\n   * @see #clearTotalNumberOfTerms\n   */\n  public int getTotalNumberOfTerms() {\n    return numberOfTerms;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}