{"path":"src/test/org/apache/lucene/index/TestCompoundFile#testLargeWrites().mjava","commits":[{"id":"d66188c7c847c94b9441fff8c9dba58d48bccd48","date":1141330609,"type":0,"author":"Doug Cutting","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestCompoundFile#testLargeWrites().mjava","pathOld":"/dev/null","sourceNew":"    /** This test that writes larger than the size of the buffer output\n     * will correctly increment the file pointer.\n     */\n    public void testLargeWrites() throws IOException {\n        IndexOutput os = dir.createOutput(\"testBufferStart.txt\");\n\n        byte[] largeBuf = new byte[2048];\n        for (int i=0; i<largeBuf.length; i++) {\n            largeBuf[i] = (byte) (Math.random() * 256);\n        }\n\n        long currentPos = os.getFilePointer();\n        os.writeBytes(largeBuf, largeBuf.length);\n\n        try {\n            assertEquals(currentPos + largeBuf.length, os.getFilePointer());\n        } finally {\n            os.close();\n        }\n\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestCompoundFile#testLargeWrites().mjava","pathOld":"src/test/org/apache/lucene/index/TestCompoundFile#testLargeWrites().mjava","sourceNew":"    /** This test that writes larger than the size of the buffer output\n     * will correctly increment the file pointer.\n     */\n    public void testLargeWrites() throws IOException {\n        IndexOutput os = dir.createOutput(\"testBufferStart.txt\");\n\n        byte[] largeBuf = new byte[2048];\n        for (int i=0; i<largeBuf.length; i++) {\n            largeBuf[i] = (byte) (Math.random() * 256);\n        }\n\n        long currentPos = os.getFilePointer();\n        os.writeBytes(largeBuf, largeBuf.length);\n\n        try {\n            assertEquals(currentPos + largeBuf.length, os.getFilePointer());\n        } finally {\n            os.close();\n        }\n\n    }\n\n","sourceOld":"    /** This test that writes larger than the size of the buffer output\n     * will correctly increment the file pointer.\n     */\n    public void testLargeWrites() throws IOException {\n        IndexOutput os = dir.createOutput(\"testBufferStart.txt\");\n\n        byte[] largeBuf = new byte[2048];\n        for (int i=0; i<largeBuf.length; i++) {\n            largeBuf[i] = (byte) (Math.random() * 256);\n        }\n\n        long currentPos = os.getFilePointer();\n        os.writeBytes(largeBuf, largeBuf.length);\n\n        try {\n            assertEquals(currentPos + largeBuf.length, os.getFilePointer());\n        } finally {\n            os.close();\n        }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d66188c7c847c94b9441fff8c9dba58d48bccd48":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["d66188c7c847c94b9441fff8c9dba58d48bccd48"]},"commit2Childs":{"d66188c7c847c94b9441fff8c9dba58d48bccd48":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d66188c7c847c94b9441fff8c9dba58d48bccd48"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}