{"path":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/writercache/TestLruTaxonomyWriterCache#testDefaultLRUTypeIsCollisionSafe().mjava","commits":[{"id":"192421df3794405bd7104fbc120c1068b4375ec4","date":1504620838,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/writercache/TestLruTaxonomyWriterCache#testDefaultLRUTypeIsCollisionSafe().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testDefaultLRUTypeIsCollisionSafe() {\n    // These labels are clearly different, but have identical longHashCodes.\n    // Note that these labels are clearly contrived. We did encounter\n    // collisions in actual production data, but we aren't allowed to publish\n    // those.\n    final FacetLabel a = new FacetLabel(\"\\0\", \"\\u0003\\uFFE2\");\n    final FacetLabel b = new FacetLabel(\"\\1\", \"\\0\");\n    // If this fails, then the longHashCode implementation has changed. This\n    // cannot prevent collisions. (All hashes must allow for collisions.) It\n    // will however stop the rest of this test from making sense. To fix, find\n    // new colliding labels, or make a subclass of FacetLabel that produces\n    // collisions.\n    assertEquals(a.longHashCode(), b.longHashCode());\n    // Make a cache with capacity > 2 so both our labels will fit. Don't\n    // specify an LRUType, since we want to check if the default is\n    // collision-safe.\n    final LruTaxonomyWriterCache cache = new LruTaxonomyWriterCache(10);\n    cache.put(a, 0);\n    cache.put(b, 1);\n    assertEquals(cache.get(a), 0);\n    assertEquals(cache.get(b), 1);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b21283ed01203901a7257aa4b7f0a0899c86e56e","date":1504689720,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/writercache/TestLruTaxonomyWriterCache#testDefaultLRUTypeIsCollisionSafe().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testDefaultLRUTypeIsCollisionSafe() {\n    // These labels are clearly different, but have identical longHashCodes.\n    // Note that these labels are clearly contrived. We did encounter\n    // collisions in actual production data, but we aren't allowed to publish\n    // those.\n    final FacetLabel a = new FacetLabel(\"\\0\", \"\\u0003\\uFFE2\");\n    final FacetLabel b = new FacetLabel(\"\\1\", \"\\0\");\n    // If this fails, then the longHashCode implementation has changed. This\n    // cannot prevent collisions. (All hashes must allow for collisions.) It\n    // will however stop the rest of this test from making sense. To fix, find\n    // new colliding labels, or make a subclass of FacetLabel that produces\n    // collisions.\n    assertEquals(a.longHashCode(), b.longHashCode());\n    // Make a cache with capacity > 2 so both our labels will fit. Don't\n    // specify an LRUType, since we want to check if the default is\n    // collision-safe.\n    final LruTaxonomyWriterCache cache = new LruTaxonomyWriterCache(10);\n    cache.put(a, 0);\n    cache.put(b, 1);\n    assertEquals(cache.get(a), 0);\n    assertEquals(cache.get(b), 1);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"104a3f62ee393d48b5596de76ed4d9a4e0ea6de7","date":1504848000,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/writercache/TestLruTaxonomyWriterCache#testDefaultLRUTypeIsCollisionSafe().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testDefaultLRUTypeIsCollisionSafe() {\n    // These labels are clearly different, but have identical longHashCodes.\n    // Note that these labels are clearly contrived. We did encounter\n    // collisions in actual production data, but we aren't allowed to publish\n    // those.\n    final FacetLabel a = new FacetLabel(\"\\0\", \"\\u0003\\uFFE2\");\n    final FacetLabel b = new FacetLabel(\"\\1\", \"\\0\");\n    // If this fails, then the longHashCode implementation has changed. This\n    // cannot prevent collisions. (All hashes must allow for collisions.) It\n    // will however stop the rest of this test from making sense. To fix, find\n    // new colliding labels, or make a subclass of FacetLabel that produces\n    // collisions.\n    assertEquals(a.longHashCode(), b.longHashCode());\n    // Make a cache with capacity > 2 so both our labels will fit. Don't\n    // specify an LRUType, since we want to check if the default is\n    // collision-safe.\n    final LruTaxonomyWriterCache cache = new LruTaxonomyWriterCache(10);\n    cache.put(a, 0);\n    cache.put(b, 1);\n    assertEquals(cache.get(a), 0);\n    assertEquals(cache.get(b), 1);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"685bd38810c206c93e9058f3c2cfa9827c086c27","date":1505751821,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/writercache/TestLruTaxonomyWriterCache#testDefaultLRUTypeIsCollisionSafe().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testDefaultLRUTypeIsCollisionSafe() {\n    // These labels are clearly different, but have identical longHashCodes.\n    // Note that these labels are clearly contrived. We did encounter\n    // collisions in actual production data, but we aren't allowed to publish\n    // those.\n    final FacetLabel a = new FacetLabel(\"\\0\", \"\\u0003\\uFFE2\");\n    final FacetLabel b = new FacetLabel(\"\\1\", \"\\0\");\n    // If this fails, then the longHashCode implementation has changed. This\n    // cannot prevent collisions. (All hashes must allow for collisions.) It\n    // will however stop the rest of this test from making sense. To fix, find\n    // new colliding labels, or make a subclass of FacetLabel that produces\n    // collisions.\n    assertEquals(a.longHashCode(), b.longHashCode());\n    // Make a cache with capacity > 2 so both our labels will fit. Don't\n    // specify an LRUType, since we want to check if the default is\n    // collision-safe.\n    final LruTaxonomyWriterCache cache = new LruTaxonomyWriterCache(10);\n    cache.put(a, 0);\n    cache.put(b, 1);\n    assertEquals(cache.get(a), 0);\n    assertEquals(cache.get(b), 1);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"192421df3794405bd7104fbc120c1068b4375ec4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b21283ed01203901a7257aa4b7f0a0899c86e56e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","192421df3794405bd7104fbc120c1068b4375ec4"],"685bd38810c206c93e9058f3c2cfa9827c086c27":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","104a3f62ee393d48b5596de76ed4d9a4e0ea6de7"],"104a3f62ee393d48b5596de76ed4d9a4e0ea6de7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b21283ed01203901a7257aa4b7f0a0899c86e56e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["104a3f62ee393d48b5596de76ed4d9a4e0ea6de7"]},"commit2Childs":{"192421df3794405bd7104fbc120c1068b4375ec4":["b21283ed01203901a7257aa4b7f0a0899c86e56e"],"b21283ed01203901a7257aa4b7f0a0899c86e56e":["104a3f62ee393d48b5596de76ed4d9a4e0ea6de7"],"685bd38810c206c93e9058f3c2cfa9827c086c27":[],"104a3f62ee393d48b5596de76ed4d9a4e0ea6de7":["685bd38810c206c93e9058f3c2cfa9827c086c27","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["192421df3794405bd7104fbc120c1068b4375ec4","b21283ed01203901a7257aa4b7f0a0899c86e56e","685bd38810c206c93e9058f3c2cfa9827c086c27","104a3f62ee393d48b5596de76ed4d9a4e0ea6de7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["685bd38810c206c93e9058f3c2cfa9827c086c27","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}