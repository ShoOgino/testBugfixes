{"path":"lucene/src/test/org/apache/lucene/index/TestSegmentReader#checkNorms(IndexReader).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestSegmentReader#checkNorms(IndexReader).mjava","pathOld":"src/test/org/apache/lucene/index/TestSegmentReader#checkNorms(IndexReader).mjava","sourceNew":"  public static void checkNorms(IndexReader reader) throws IOException {\n        // test omit norms\n    for (int i=0; i<DocHelper.fields.length; i++) {\n      Fieldable f = DocHelper.fields[i];\n      if (f.isIndexed()) {\n        assertEquals(reader.hasNorms(f.name()), !f.getOmitNorms());\n        assertEquals(reader.hasNorms(f.name()), !DocHelper.noNorms.containsKey(f.name()));\n        if (!reader.hasNorms(f.name())) {\n          // test for fake norms of 1.0 or null depending on the flag\n          byte [] norms = reader.norms(f.name());\n          byte norm1 = Similarity.getDefault().encodeNormValue(1.0f);\n          assertNull(norms);\n          norms = new byte[reader.maxDoc()];\n          reader.norms(f.name(),norms, 0);\n          for (int j=0; j<reader.maxDoc(); j++) {\n            assertEquals(norms[j], norm1);\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public static void checkNorms(IndexReader reader) throws IOException {\n        // test omit norms\n    for (int i=0; i<DocHelper.fields.length; i++) {\n      Fieldable f = DocHelper.fields[i];\n      if (f.isIndexed()) {\n        assertEquals(reader.hasNorms(f.name()), !f.getOmitNorms());\n        assertEquals(reader.hasNorms(f.name()), !DocHelper.noNorms.containsKey(f.name()));\n        if (!reader.hasNorms(f.name())) {\n          // test for fake norms of 1.0 or null depending on the flag\n          byte [] norms = reader.norms(f.name());\n          byte norm1 = Similarity.getDefault().encodeNormValue(1.0f);\n          assertNull(norms);\n          norms = new byte[reader.maxDoc()];\n          reader.norms(f.name(),norms, 0);\n          for (int j=0; j<reader.maxDoc(); j++) {\n            assertEquals(norms[j], norm1);\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0d06946f61921459f43309f86ed621ebe67eebe","date":1294182697,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestSegmentReader#checkNorms(IndexReader).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestSegmentReader#checkNorms(IndexReader).mjava","sourceNew":"  public static void checkNorms(IndexReader reader) throws IOException {\n        // test omit norms\n    for (int i=0; i<DocHelper.fields.length; i++) {\n      Fieldable f = DocHelper.fields[i];\n      if (f.isIndexed()) {\n        assertEquals(reader.hasNorms(f.name()), !f.getOmitNorms());\n        assertEquals(reader.hasNorms(f.name()), !DocHelper.noNorms.containsKey(f.name()));\n        if (!reader.hasNorms(f.name())) {\n          // test for fake norms of 1.0 or null depending on the flag\n          byte [] norms = MultiNorms.norms(reader, f.name());\n          byte norm1 = Similarity.getDefault().encodeNormValue(1.0f);\n          assertNull(norms);\n          norms = new byte[reader.maxDoc()];\n          MultiNorms.norms(reader, f.name(),norms, 0);\n          for (int j=0; j<reader.maxDoc(); j++) {\n            assertEquals(norms[j], norm1);\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public static void checkNorms(IndexReader reader) throws IOException {\n        // test omit norms\n    for (int i=0; i<DocHelper.fields.length; i++) {\n      Fieldable f = DocHelper.fields[i];\n      if (f.isIndexed()) {\n        assertEquals(reader.hasNorms(f.name()), !f.getOmitNorms());\n        assertEquals(reader.hasNorms(f.name()), !DocHelper.noNorms.containsKey(f.name()));\n        if (!reader.hasNorms(f.name())) {\n          // test for fake norms of 1.0 or null depending on the flag\n          byte [] norms = reader.norms(f.name());\n          byte norm1 = Similarity.getDefault().encodeNormValue(1.0f);\n          assertNull(norms);\n          norms = new byte[reader.maxDoc()];\n          reader.norms(f.name(),norms, 0);\n          for (int j=0; j<reader.maxDoc(); j++) {\n            assertEquals(norms[j], norm1);\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestSegmentReader#checkNorms(IndexReader).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestSegmentReader#checkNorms(IndexReader).mjava","sourceNew":"  public static void checkNorms(IndexReader reader) throws IOException {\n        // test omit norms\n    for (int i=0; i<DocHelper.fields.length; i++) {\n      Fieldable f = DocHelper.fields[i];\n      if (f.isIndexed()) {\n        assertEquals(reader.hasNorms(f.name()), !f.getOmitNorms());\n        assertEquals(reader.hasNorms(f.name()), !DocHelper.noNorms.containsKey(f.name()));\n        if (!reader.hasNorms(f.name())) {\n          // test for fake norms of 1.0 or null depending on the flag\n          byte [] norms = MultiNorms.norms(reader, f.name());\n          byte norm1 = Similarity.getDefault().encodeNormValue(1.0f);\n          assertNull(norms);\n          norms = new byte[reader.maxDoc()];\n          MultiNorms.norms(reader, f.name(),norms, 0);\n          for (int j=0; j<reader.maxDoc(); j++) {\n            assertEquals(norms[j], norm1);\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public static void checkNorms(IndexReader reader) throws IOException {\n        // test omit norms\n    for (int i=0; i<DocHelper.fields.length; i++) {\n      Fieldable f = DocHelper.fields[i];\n      if (f.isIndexed()) {\n        assertEquals(reader.hasNorms(f.name()), !f.getOmitNorms());\n        assertEquals(reader.hasNorms(f.name()), !DocHelper.noNorms.containsKey(f.name()));\n        if (!reader.hasNorms(f.name())) {\n          // test for fake norms of 1.0 or null depending on the flag\n          byte [] norms = reader.norms(f.name());\n          byte norm1 = Similarity.getDefault().encodeNormValue(1.0f);\n          assertNull(norms);\n          norms = new byte[reader.maxDoc()];\n          reader.norms(f.name(),norms, 0);\n          for (int j=0; j<reader.maxDoc(); j++) {\n            assertEquals(norms[j], norm1);\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a54e23e03b47f3d568ab3020bdd386e4b2f0a05","date":1294877328,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestSegmentReader#checkNorms(IndexReader).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestSegmentReader#checkNorms(IndexReader).mjava","sourceNew":"  public static void checkNorms(IndexReader reader) throws IOException {\n        // test omit norms\n    for (int i=0; i<DocHelper.fields.length; i++) {\n      Fieldable f = DocHelper.fields[i];\n      if (f.isIndexed()) {\n        assertEquals(reader.hasNorms(f.name()), !f.getOmitNorms());\n        assertEquals(reader.hasNorms(f.name()), !DocHelper.noNorms.containsKey(f.name()));\n        if (!reader.hasNorms(f.name())) {\n          // test for norms of null\n          byte [] norms = MultiNorms.norms(reader, f.name());\n          assertNull(norms);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public static void checkNorms(IndexReader reader) throws IOException {\n        // test omit norms\n    for (int i=0; i<DocHelper.fields.length; i++) {\n      Fieldable f = DocHelper.fields[i];\n      if (f.isIndexed()) {\n        assertEquals(reader.hasNorms(f.name()), !f.getOmitNorms());\n        assertEquals(reader.hasNorms(f.name()), !DocHelper.noNorms.containsKey(f.name()));\n        if (!reader.hasNorms(f.name())) {\n          // test for fake norms of 1.0 or null depending on the flag\n          byte [] norms = MultiNorms.norms(reader, f.name());\n          byte norm1 = Similarity.getDefault().encodeNormValue(1.0f);\n          assertNull(norms);\n          norms = new byte[reader.maxDoc()];\n          MultiNorms.norms(reader, f.name(),norms, 0);\n          for (int j=0; j<reader.maxDoc(); j++) {\n            assertEquals(norms[j], norm1);\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestSegmentReader#checkNorms(IndexReader).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestSegmentReader#checkNorms(IndexReader).mjava","sourceNew":"  public static void checkNorms(IndexReader reader) throws IOException {\n        // test omit norms\n    for (int i=0; i<DocHelper.fields.length; i++) {\n      Fieldable f = DocHelper.fields[i];\n      if (f.isIndexed()) {\n        assertEquals(reader.hasNorms(f.name()), !f.getOmitNorms());\n        assertEquals(reader.hasNorms(f.name()), !DocHelper.noNorms.containsKey(f.name()));\n        if (!reader.hasNorms(f.name())) {\n          // test for norms of null\n          byte [] norms = MultiNorms.norms(reader, f.name());\n          assertNull(norms);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public static void checkNorms(IndexReader reader) throws IOException {\n        // test omit norms\n    for (int i=0; i<DocHelper.fields.length; i++) {\n      Fieldable f = DocHelper.fields[i];\n      if (f.isIndexed()) {\n        assertEquals(reader.hasNorms(f.name()), !f.getOmitNorms());\n        assertEquals(reader.hasNorms(f.name()), !DocHelper.noNorms.containsKey(f.name()));\n        if (!reader.hasNorms(f.name())) {\n          // test for fake norms of 1.0 or null depending on the flag\n          byte [] norms = reader.norms(f.name());\n          byte norm1 = Similarity.getDefault().encodeNormValue(1.0f);\n          assertNull(norms);\n          norms = new byte[reader.maxDoc()];\n          reader.norms(f.name(),norms, 0);\n          for (int j=0; j<reader.maxDoc(); j++) {\n            assertEquals(norms[j], norm1);\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestSegmentReader#checkNorms(IndexReader).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestSegmentReader#checkNorms(IndexReader).mjava","sourceNew":"  public static void checkNorms(IndexReader reader) throws IOException {\n        // test omit norms\n    for (int i=0; i<DocHelper.fields.length; i++) {\n      Fieldable f = DocHelper.fields[i];\n      if (f.isIndexed()) {\n        assertEquals(reader.hasNorms(f.name()), !f.getOmitNorms());\n        assertEquals(reader.hasNorms(f.name()), !DocHelper.noNorms.containsKey(f.name()));\n        if (!reader.hasNorms(f.name())) {\n          // test for norms of null\n          byte [] norms = MultiNorms.norms(reader, f.name());\n          assertNull(norms);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public static void checkNorms(IndexReader reader) throws IOException {\n        // test omit norms\n    for (int i=0; i<DocHelper.fields.length; i++) {\n      Fieldable f = DocHelper.fields[i];\n      if (f.isIndexed()) {\n        assertEquals(reader.hasNorms(f.name()), !f.getOmitNorms());\n        assertEquals(reader.hasNorms(f.name()), !DocHelper.noNorms.containsKey(f.name()));\n        if (!reader.hasNorms(f.name())) {\n          // test for fake norms of 1.0 or null depending on the flag\n          byte [] norms = MultiNorms.norms(reader, f.name());\n          byte norm1 = Similarity.getDefault().encodeNormValue(1.0f);\n          assertNull(norms);\n          norms = new byte[reader.maxDoc()];\n          MultiNorms.norms(reader, f.name(),norms, 0);\n          for (int j=0; j<reader.maxDoc(); j++) {\n            assertEquals(norms[j], norm1);\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestSegmentReader#checkNorms(IndexReader).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestSegmentReader#checkNorms(IndexReader).mjava","sourceNew":"  public static void checkNorms(IndexReader reader) throws IOException {\n        // test omit norms\n    for (int i=0; i<DocHelper.fields.length; i++) {\n      IndexableField f = DocHelper.fields[i];\n      if (f.indexed()) {\n        assertEquals(reader.hasNorms(f.name()), !f.omitNorms());\n        assertEquals(reader.hasNorms(f.name()), !DocHelper.noNorms.containsKey(f.name()));\n        if (!reader.hasNorms(f.name())) {\n          // test for norms of null\n          byte [] norms = MultiNorms.norms(reader, f.name());\n          assertNull(norms);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public static void checkNorms(IndexReader reader) throws IOException {\n        // test omit norms\n    for (int i=0; i<DocHelper.fields.length; i++) {\n      Fieldable f = DocHelper.fields[i];\n      if (f.isIndexed()) {\n        assertEquals(reader.hasNorms(f.name()), !f.getOmitNorms());\n        assertEquals(reader.hasNorms(f.name()), !DocHelper.noNorms.containsKey(f.name()));\n        if (!reader.hasNorms(f.name())) {\n          // test for norms of null\n          byte [] norms = MultiNorms.norms(reader, f.name());\n          assertNull(norms);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6eb141f80638abdb6ffaa5149877f36ea39b6ad5","date":1315714072,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestSegmentReader#checkNorms(IndexReader).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestSegmentReader#checkNorms(IndexReader).mjava","sourceNew":"  public static void checkNorms(IndexReader reader) throws IOException {\n        // test omit norms\n    for (int i=0; i<DocHelper.fields.length; i++) {\n      IndexableField f = DocHelper.fields[i];\n      if (f.fieldType().indexed()) {\n        assertEquals(reader.hasNorms(f.name()), !f.fieldType().omitNorms());\n        assertEquals(reader.hasNorms(f.name()), !DocHelper.noNorms.containsKey(f.name()));\n        if (!reader.hasNorms(f.name())) {\n          // test for norms of null\n          byte [] norms = MultiNorms.norms(reader, f.name());\n          assertNull(norms);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public static void checkNorms(IndexReader reader) throws IOException {\n        // test omit norms\n    for (int i=0; i<DocHelper.fields.length; i++) {\n      IndexableField f = DocHelper.fields[i];\n      if (f.indexed()) {\n        assertEquals(reader.hasNorms(f.name()), !f.omitNorms());\n        assertEquals(reader.hasNorms(f.name()), !DocHelper.noNorms.containsKey(f.name()));\n        if (!reader.hasNorms(f.name())) {\n          // test for norms of null\n          byte [] norms = MultiNorms.norms(reader, f.name());\n          assertNull(norms);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0f4b223b56d0c7927ae8baced5e1b1dd4c693b1d","date":1325789720,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestSegmentReader#checkNorms(IndexReader).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestSegmentReader#checkNorms(IndexReader).mjava","sourceNew":"  public static void checkNorms(IndexReader reader) throws IOException {\n        // test omit norms\n    for (int i=0; i<DocHelper.fields.length; i++) {\n      IndexableField f = DocHelper.fields[i];\n      if (f.fieldType().indexed()) {\n        assertEquals(reader.hasNorms(f.name()), !f.fieldType().omitNorms());\n        assertEquals(reader.hasNorms(f.name()), !DocHelper.noNorms.containsKey(f.name()));\n        if (!reader.hasNorms(f.name())) {\n          // test for norms of null\n          DocValues norms = MultiDocValues.getNormDocValues(reader, f.name());\n          assertNull(norms);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public static void checkNorms(IndexReader reader) throws IOException {\n        // test omit norms\n    for (int i=0; i<DocHelper.fields.length; i++) {\n      IndexableField f = DocHelper.fields[i];\n      if (f.fieldType().indexed()) {\n        assertEquals(reader.hasNorms(f.name()), !f.fieldType().omitNorms());\n        assertEquals(reader.hasNorms(f.name()), !DocHelper.noNorms.containsKey(f.name()));\n        if (!reader.hasNorms(f.name())) {\n          // test for norms of null\n          byte [] norms = MultiNorms.norms(reader, f.name());\n          assertNull(norms);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["d4d69c535930b5cce125cff868d40f6373dc27d4","d4d69c535930b5cce125cff868d40f6373dc27d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bd328b3cdb3f944c5c765d81bb246545f85932dd","date":1327857991,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestSegmentReader#checkNorms(AtomicIndexReader).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestSegmentReader#checkNorms(IndexReader).mjava","sourceNew":"  public static void checkNorms(AtomicIndexReader reader) throws IOException {\n        // test omit norms\n    for (int i=0; i<DocHelper.fields.length; i++) {\n      IndexableField f = DocHelper.fields[i];\n      if (f.fieldType().indexed()) {\n        assertEquals(reader.hasNorms(f.name()), !f.fieldType().omitNorms());\n        assertEquals(reader.hasNorms(f.name()), !DocHelper.noNorms.containsKey(f.name()));\n        if (!reader.hasNorms(f.name())) {\n          // test for norms of null\n          DocValues norms = MultiDocValues.getNormDocValues(reader, f.name());\n          assertNull(norms);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public static void checkNorms(IndexReader reader) throws IOException {\n        // test omit norms\n    for (int i=0; i<DocHelper.fields.length; i++) {\n      IndexableField f = DocHelper.fields[i];\n      if (f.fieldType().indexed()) {\n        assertEquals(reader.hasNorms(f.name()), !f.fieldType().omitNorms());\n        assertEquals(reader.hasNorms(f.name()), !DocHelper.noNorms.containsKey(f.name()));\n        if (!reader.hasNorms(f.name())) {\n          // test for norms of null\n          DocValues norms = MultiDocValues.getNormDocValues(reader, f.name());\n          assertNull(norms);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":5,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestSegmentReader#checkNorms(AtomicReader).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestSegmentReader#checkNorms(IndexReader).mjava","sourceNew":"  public static void checkNorms(AtomicReader reader) throws IOException {\n        // test omit norms\n    for (int i=0; i<DocHelper.fields.length; i++) {\n      IndexableField f = DocHelper.fields[i];\n      if (f.fieldType().indexed()) {\n        assertEquals(reader.hasNorms(f.name()), !f.fieldType().omitNorms());\n        assertEquals(reader.hasNorms(f.name()), !DocHelper.noNorms.containsKey(f.name()));\n        if (!reader.hasNorms(f.name())) {\n          // test for norms of null\n          DocValues norms = MultiDocValues.getNormDocValues(reader, f.name());\n          assertNull(norms);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public static void checkNorms(IndexReader reader) throws IOException {\n        // test omit norms\n    for (int i=0; i<DocHelper.fields.length; i++) {\n      IndexableField f = DocHelper.fields[i];\n      if (f.fieldType().indexed()) {\n        assertEquals(reader.hasNorms(f.name()), !f.fieldType().omitNorms());\n        assertEquals(reader.hasNorms(f.name()), !DocHelper.noNorms.containsKey(f.name()));\n        if (!reader.hasNorms(f.name())) {\n          // test for norms of null\n          DocValues norms = MultiDocValues.getNormDocValues(reader, f.name());\n          assertNull(norms);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"7a54e23e03b47f3d568ab3020bdd386e4b2f0a05":["b0d06946f61921459f43309f86ed621ebe67eebe"],"70ad682703b8585f5d0a637efec044d57ec05efb":["9454a6510e2db155fb01faa5c049b06ece95fab9","b0d06946f61921459f43309f86ed621ebe67eebe"],"b0d06946f61921459f43309f86ed621ebe67eebe":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"6eb141f80638abdb6ffaa5149877f36ea39b6ad5":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["0f4b223b56d0c7927ae8baced5e1b1dd4c693b1d","bd328b3cdb3f944c5c765d81bb246545f85932dd"],"0f4b223b56d0c7927ae8baced5e1b1dd4c693b1d":["6eb141f80638abdb6ffaa5149877f36ea39b6ad5"],"bd328b3cdb3f944c5c765d81bb246545f85932dd":["0f4b223b56d0c7927ae8baced5e1b1dd4c693b1d"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["70ad682703b8585f5d0a637efec044d57ec05efb","7a54e23e03b47f3d568ab3020bdd386e4b2f0a05"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["7a54e23e03b47f3d568ab3020bdd386e4b2f0a05"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["9454a6510e2db155fb01faa5c049b06ece95fab9","7a54e23e03b47f3d568ab3020bdd386e4b2f0a05"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"7a54e23e03b47f3d568ab3020bdd386e4b2f0a05":["29ef99d61cda9641b6250bf9567329a6e65f901d","1509f151d7692d84fae414b2b799ac06ba60fcb4","868da859b43505d9d2a023bfeae6dd0c795f5295"],"70ad682703b8585f5d0a637efec044d57ec05efb":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"b0d06946f61921459f43309f86ed621ebe67eebe":["7a54e23e03b47f3d568ab3020bdd386e4b2f0a05","70ad682703b8585f5d0a637efec044d57ec05efb"],"6eb141f80638abdb6ffaa5149877f36ea39b6ad5":["0f4b223b56d0c7927ae8baced5e1b1dd4c693b1d"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0f4b223b56d0c7927ae8baced5e1b1dd4c693b1d":["5cab9a86bd67202d20b6adc463008c8e982b070a","bd328b3cdb3f944c5c765d81bb246545f85932dd"],"bd328b3cdb3f944c5c765d81bb246545f85932dd":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["6eb141f80638abdb6ffaa5149877f36ea39b6ad5"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["70ad682703b8585f5d0a637efec044d57ec05efb","b0d06946f61921459f43309f86ed621ebe67eebe","868da859b43505d9d2a023bfeae6dd0c795f5295"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}