{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/GreaterThanEqualToEvaluator#evaluate(Tuple).mjava","commits":[{"id":"88073e8783f450d4c0218decc2f001a1ac2c7e7c","date":1486705191,"type":0,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/GreaterThanEqualToEvaluator#evaluate(Tuple).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Boolean evaluate(Tuple tuple) throws IOException {\n    \n    List<Object> results = evaluateAll(tuple);\n    \n    if(results.size() < 2){\n      String message = null;\n      if(1 == results.size()){\n        message = String.format(Locale.ROOT,\"%s(...) only works with at least 2 values but 1 was provided\", constructingFactory.getFunctionName(getClass())); \n      }\n      else{\n        message = String.format(Locale.ROOT,\"%s(...) only works with at least 2 values but 0 were provided\", constructingFactory.getFunctionName(getClass()));\n      }\n      throw new IOException(message);\n    }\n    \n    Checker checker = constructChecker(results.get(0));\n    if(results.stream().anyMatch(result -> null == result)){\n      throw new IOException(String.format(Locale.ROOT,\"Unable to check %s(...) because a null value was found\", constructingFactory.getFunctionName(getClass())));\n    }\n    if(results.stream().anyMatch(result -> !checker.isCorrectType(result))){\n      throw new IOException(String.format(Locale.ROOT,\"Unable to check %s(...) of differing types [%s]\", constructingFactory.getFunctionName(getClass()), results.stream().map(item -> item.getClass().getSimpleName()).collect(Collectors.joining(\",\"))));\n    }\n\n    for(int idx = 1; idx < results.size(); ++idx){\n      if(!checker.test(results.get(idx - 1), results.get(idx))){\n        return false;\n      }\n    }\n    \n    return true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba1e7de64990e3928b90142a52fb92eeff556475","date":1503713257,"type":5,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/RecursiveBooleanEvaluator#doWork(Object...).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/GreaterThanEqualToEvaluator#evaluate(Tuple).mjava","sourceNew":"  public Object doWork(Object ... values) throws IOException {\n    if(values.length < 2){\n      String message = null;\n      if(1 == values.length){\n        message = String.format(Locale.ROOT,\"%s(...) only works with at least 2 values but 1 was provided\", constructingFactory.getFunctionName(getClass())); \n      }\n      else{\n        message = String.format(Locale.ROOT,\"%s(...) only works with at least 2 values but 0 were provided\", constructingFactory.getFunctionName(getClass()));\n      }\n      throw new IOException(message);\n    }\n    \n    Checker checker = constructChecker(values[0]);\n    if(Arrays.stream(values).anyMatch(result -> null == result)){\n      throw new IOException(String.format(Locale.ROOT,\"Unable to check %s(...) because a null value was found\", constructingFactory.getFunctionName(getClass())));\n    }\n    if(Arrays.stream(values).anyMatch(result -> !checker.isCorrectType(result))){\n      throw new IOException(String.format(Locale.ROOT,\"Unable to check %s(...) of differing types [%s]\", constructingFactory.getFunctionName(getClass()), Arrays.stream(values).map(item -> item.getClass().getSimpleName()).collect(Collectors.joining(\",\"))));\n    }\n\n    for(int idx = 1; idx < values.length; ++idx){\n      if(!checker.test(values[idx - 1], values[idx])){\n        return false;\n      }\n    }\n    \n    return true;\n  }\n\n","sourceOld":"  @Override\n  public Boolean evaluate(Tuple tuple) throws IOException {\n    \n    List<Object> results = evaluateAll(tuple);\n    \n    if(results.size() < 2){\n      String message = null;\n      if(1 == results.size()){\n        message = String.format(Locale.ROOT,\"%s(...) only works with at least 2 values but 1 was provided\", constructingFactory.getFunctionName(getClass())); \n      }\n      else{\n        message = String.format(Locale.ROOT,\"%s(...) only works with at least 2 values but 0 were provided\", constructingFactory.getFunctionName(getClass()));\n      }\n      throw new IOException(message);\n    }\n    \n    Checker checker = constructChecker(results.get(0));\n    if(results.stream().anyMatch(result -> null == result)){\n      throw new IOException(String.format(Locale.ROOT,\"Unable to check %s(...) because a null value was found\", constructingFactory.getFunctionName(getClass())));\n    }\n    if(results.stream().anyMatch(result -> !checker.isCorrectType(result))){\n      throw new IOException(String.format(Locale.ROOT,\"Unable to check %s(...) of differing types [%s]\", constructingFactory.getFunctionName(getClass()), results.stream().map(item -> item.getClass().getSimpleName()).collect(Collectors.joining(\",\"))));\n    }\n\n    for(int idx = 1; idx < results.size(); ++idx){\n      if(!checker.test(results.get(idx - 1), results.get(idx))){\n        return false;\n      }\n    }\n    \n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"45c28dbb559366e1f4ef8077346552bfb3f7ecf6","date":1503738439,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/RecursiveBooleanEvaluator#doWork(Object...).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/GreaterThanEqualToEvaluator#evaluate(Tuple).mjava","sourceNew":"  public Object doWork(Object ... values) throws IOException {\n    if(values.length < 2){\n      String message = null;\n      if(1 == values.length){\n        message = String.format(Locale.ROOT,\"%s(...) only works with at least 2 values but 1 was provided\", constructingFactory.getFunctionName(getClass())); \n      }\n      else{\n        message = String.format(Locale.ROOT,\"%s(...) only works with at least 2 values but 0 were provided\", constructingFactory.getFunctionName(getClass()));\n      }\n      throw new IOException(message);\n    }\n    \n    Checker checker = constructChecker(values[0]);\n    if(Arrays.stream(values).anyMatch(result -> null == result)){\n      throw new IOException(String.format(Locale.ROOT,\"Unable to check %s(...) because a null value was found\", constructingFactory.getFunctionName(getClass())));\n    }\n    if(Arrays.stream(values).anyMatch(result -> !checker.isCorrectType(result))){\n      throw new IOException(String.format(Locale.ROOT,\"Unable to check %s(...) of differing types [%s]\", constructingFactory.getFunctionName(getClass()), Arrays.stream(values).map(item -> item.getClass().getSimpleName()).collect(Collectors.joining(\",\"))));\n    }\n\n    for(int idx = 1; idx < values.length; ++idx){\n      if(!checker.test(values[idx - 1], values[idx])){\n        return false;\n      }\n    }\n    \n    return true;\n  }\n\n","sourceOld":"  @Override\n  public Boolean evaluate(Tuple tuple) throws IOException {\n    \n    List<Object> results = evaluateAll(tuple);\n    \n    if(results.size() < 2){\n      String message = null;\n      if(1 == results.size()){\n        message = String.format(Locale.ROOT,\"%s(...) only works with at least 2 values but 1 was provided\", constructingFactory.getFunctionName(getClass())); \n      }\n      else{\n        message = String.format(Locale.ROOT,\"%s(...) only works with at least 2 values but 0 were provided\", constructingFactory.getFunctionName(getClass()));\n      }\n      throw new IOException(message);\n    }\n    \n    Checker checker = constructChecker(results.get(0));\n    if(results.stream().anyMatch(result -> null == result)){\n      throw new IOException(String.format(Locale.ROOT,\"Unable to check %s(...) because a null value was found\", constructingFactory.getFunctionName(getClass())));\n    }\n    if(results.stream().anyMatch(result -> !checker.isCorrectType(result))){\n      throw new IOException(String.format(Locale.ROOT,\"Unable to check %s(...) of differing types [%s]\", constructingFactory.getFunctionName(getClass()), results.stream().map(item -> item.getClass().getSimpleName()).collect(Collectors.joining(\",\"))));\n    }\n\n    for(int idx = 1; idx < results.size(); ++idx){\n      if(!checker.test(results.get(idx - 1), results.get(idx))){\n        return false;\n      }\n    }\n    \n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a7809d1d753b67f48b1a706e17034bf8b624ea3","date":1504366927,"type":5,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/RecursiveBooleanEvaluator#doWork(Object...).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/GreaterThanEqualToEvaluator#evaluate(Tuple).mjava","sourceNew":"  public Object doWork(Object ... values) throws IOException {\n    if(values.length < 2){\n      String message = null;\n      if(1 == values.length){\n        message = String.format(Locale.ROOT,\"%s(...) only works with at least 2 values but 1 was provided\", constructingFactory.getFunctionName(getClass())); \n      }\n      else{\n        message = String.format(Locale.ROOT,\"%s(...) only works with at least 2 values but 0 were provided\", constructingFactory.getFunctionName(getClass()));\n      }\n      throw new IOException(message);\n    }\n    \n    Checker checker = constructChecker(values[0]);\n    if(Arrays.stream(values).anyMatch(result -> null == result)){\n      throw new IOException(String.format(Locale.ROOT,\"Unable to check %s(...) because a null value was found\", constructingFactory.getFunctionName(getClass())));\n    }\n    if(Arrays.stream(values).anyMatch(result -> !checker.isCorrectType(result))){\n      throw new IOException(String.format(Locale.ROOT,\"Unable to check %s(...) of differing types [%s]\", constructingFactory.getFunctionName(getClass()), Arrays.stream(values).map(item -> item.getClass().getSimpleName()).collect(Collectors.joining(\",\"))));\n    }\n\n    for(int idx = 1; idx < values.length; ++idx){\n      if(!checker.test(values[idx - 1], values[idx])){\n        return false;\n      }\n    }\n    \n    return true;\n  }\n\n","sourceOld":"  @Override\n  public Boolean evaluate(Tuple tuple) throws IOException {\n    \n    List<Object> results = evaluateAll(tuple);\n    \n    if(results.size() < 2){\n      String message = null;\n      if(1 == results.size()){\n        message = String.format(Locale.ROOT,\"%s(...) only works with at least 2 values but 1 was provided\", constructingFactory.getFunctionName(getClass())); \n      }\n      else{\n        message = String.format(Locale.ROOT,\"%s(...) only works with at least 2 values but 0 were provided\", constructingFactory.getFunctionName(getClass()));\n      }\n      throw new IOException(message);\n    }\n    \n    Checker checker = constructChecker(results.get(0));\n    if(results.stream().anyMatch(result -> null == result)){\n      throw new IOException(String.format(Locale.ROOT,\"Unable to check %s(...) because a null value was found\", constructingFactory.getFunctionName(getClass())));\n    }\n    if(results.stream().anyMatch(result -> !checker.isCorrectType(result))){\n      throw new IOException(String.format(Locale.ROOT,\"Unable to check %s(...) of differing types [%s]\", constructingFactory.getFunctionName(getClass()), results.stream().map(item -> item.getClass().getSimpleName()).collect(Collectors.joining(\",\"))));\n    }\n\n    for(int idx = 1; idx < results.size(); ++idx){\n      if(!checker.test(results.get(idx - 1), results.get(idx))){\n        return false;\n      }\n    }\n    \n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"88073e8783f450d4c0218decc2f001a1ac2c7e7c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a7809d1d753b67f48b1a706e17034bf8b624ea3":["88073e8783f450d4c0218decc2f001a1ac2c7e7c","45c28dbb559366e1f4ef8077346552bfb3f7ecf6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"45c28dbb559366e1f4ef8077346552bfb3f7ecf6":["88073e8783f450d4c0218decc2f001a1ac2c7e7c","ba1e7de64990e3928b90142a52fb92eeff556475"],"ba1e7de64990e3928b90142a52fb92eeff556475":["88073e8783f450d4c0218decc2f001a1ac2c7e7c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["45c28dbb559366e1f4ef8077346552bfb3f7ecf6"]},"commit2Childs":{"88073e8783f450d4c0218decc2f001a1ac2c7e7c":["3a7809d1d753b67f48b1a706e17034bf8b624ea3","45c28dbb559366e1f4ef8077346552bfb3f7ecf6","ba1e7de64990e3928b90142a52fb92eeff556475"],"3a7809d1d753b67f48b1a706e17034bf8b624ea3":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["88073e8783f450d4c0218decc2f001a1ac2c7e7c"],"45c28dbb559366e1f4ef8077346552bfb3f7ecf6":["3a7809d1d753b67f48b1a706e17034bf8b624ea3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ba1e7de64990e3928b90142a52fb92eeff556475":["45c28dbb559366e1f4ef8077346552bfb3f7ecf6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3a7809d1d753b67f48b1a706e17034bf8b624ea3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}