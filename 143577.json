{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testErrorHandling().mjava","commits":[{"id":"5c8cb19f78af5bca202b4a4cfce35d2fc0ac9e4c","date":1501832890,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testErrorHandling().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testErrorHandling() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    try {\n      SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n      solrClient.request(req);\n      fail(\"expect exception\");\n    } catch (HttpSolrClient.RemoteExecutionException e) {\n      String message = String.valueOf(Utils.getObjectByPath(e.getMetaData(), true, \"error/details[0]/errorMessages[0]\"));\n      assertTrue(message.contains(\"replica is required in\"));\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"afde616cab4149eba221511fd7ff21d460cded7c","date":1501855890,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testErrorHandling().mjava","pathOld":"/dev/null","sourceNew":"  public void testErrorHandling() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    try {\n      SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n      solrClient.request(req);\n      fail(\"expect exception\");\n    } catch (HttpSolrClient.RemoteExecutionException e) {\n      String message = String.valueOf(Utils.getObjectByPath(e.getMetaData(), true, \"error/details[0]/errorMessages[0]\"));\n      assertTrue(message.contains(\"replica is required in\"));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c304e97e7c1d472bc70e801b35ee78583916c6cd","date":1507105431,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testErrorHandling().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testErrorHandling().mjava","sourceNew":"  @Test\n  public void testErrorHandling() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    try {\n      SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n      solrClient.request(req);\n      fail(\"expect exception\");\n    } catch (HttpSolrClient.RemoteExecutionException e) {\n      String message = String.valueOf(Utils.getObjectByPath(e.getMetaData(), true, \"error/details[0]/errorMessages[0]\"));\n      assertTrue(message.contains(\"replica is required in\"));\n    }\n\n  }\n\n","sourceOld":"  public void testErrorHandling() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    try {\n      SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n      solrClient.request(req);\n      fail(\"expect exception\");\n    } catch (HttpSolrClient.RemoteExecutionException e) {\n      String message = String.valueOf(Utils.getObjectByPath(e.getMetaData(), true, \"error/details[0]/errorMessages[0]\"));\n      assertTrue(message.contains(\"replica is required in\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"560c18d71dad43d675158783c3840f8c80d6d39c","date":1507105532,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testErrorHandling().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testErrorHandling().mjava","sourceNew":"  @Test\n  public void testErrorHandling() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    try {\n      SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n      solrClient.request(req);\n      fail(\"expect exception\");\n    } catch (HttpSolrClient.RemoteExecutionException e) {\n      String message = String.valueOf(Utils.getObjectByPath(e.getMetaData(), true, \"error/details[0]/errorMessages[0]\"));\n      assertTrue(message.contains(\"replica is required in\"));\n    }\n\n  }\n\n","sourceOld":"  public void testErrorHandling() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    try {\n      SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n      solrClient.request(req);\n      fail(\"expect exception\");\n    } catch (HttpSolrClient.RemoteExecutionException e) {\n      String message = String.valueOf(Utils.getObjectByPath(e.getMetaData(), true, \"error/details[0]/errorMessages[0]\"));\n      assertTrue(message.contains(\"replica is required in\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"89948af0461fead48f44ba8fb7866f107ce83f22","date":1545157711,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testErrorHandling().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testErrorHandling().mjava","sourceNew":"  @Test\n  public void testErrorHandling() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    try {\n      SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n      solrClient.request(req);\n      fail(\"expect exception\");\n    } catch (HttpSolrClient.RemoteExecutionException e) {\n      String message = String.valueOf(Utils.getObjectByPath(e.getMetaData(), true, \"error/details[0]/errorMessages[0]\"));\n      assertTrue(message.contains(\"replica is required in\"));\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testErrorHandling() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    try {\n      SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n      solrClient.request(req);\n      fail(\"expect exception\");\n    } catch (HttpSolrClient.RemoteExecutionException e) {\n      String message = String.valueOf(Utils.getObjectByPath(e.getMetaData(), true, \"error/details[0]/errorMessages[0]\"));\n      assertTrue(message.contains(\"replica is required in\"));\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d3a1cba0d84384334e5c75e77d139a3a9e480fa","date":1557955868,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testErrorHandling().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testErrorHandling().mjava","sourceNew":"  @Test\n  public void testErrorHandling() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    try {\n      SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n      solrClient.request(req);\n      fail(\"expect exception\");\n    } catch (HttpSolrClient.RemoteExecutionException e) {\n      String message = String.valueOf(getObjectByPath(e.getMetaData(), true, \"error/details[0]/errorMessages[0]\"));\n      assertTrue(message.contains(\"replica is required in\"));\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testErrorHandling() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    try {\n      SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n      solrClient.request(req);\n      fail(\"expect exception\");\n    } catch (HttpSolrClient.RemoteExecutionException e) {\n      String message = String.valueOf(Utils.getObjectByPath(e.getMetaData(), true, \"error/details[0]/errorMessages[0]\"));\n      assertTrue(message.contains(\"replica is required in\"));\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db96734b79e26d948b59f68bd4564c4836a71acf","date":1585375566,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testErrorHandling().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testErrorHandling().mjava","sourceNew":"  @Test\n  public void testErrorHandling() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    try {\n      SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n      solrClient.request(req);\n      fail(\"expect exception\");\n    } catch (BaseHttpSolrClient.RemoteExecutionException e) {\n      String message = String.valueOf(getObjectByPath(e.getMetaData(), true, \"error/details[0]/errorMessages[0]\"));\n      assertTrue(message.contains(\"replica is required in\"));\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testErrorHandling() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    try {\n      SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n      solrClient.request(req);\n      fail(\"expect exception\");\n    } catch (HttpSolrClient.RemoteExecutionException e) {\n      String message = String.valueOf(getObjectByPath(e.getMetaData(), true, \"error/details[0]/errorMessages[0]\"));\n      assertTrue(message.contains(\"replica is required in\"));\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aa2585c33d5d66a1c837c312221eb55ddb3c4300","date":1592493170,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testErrorHandling().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testErrorHandling().mjava","sourceNew":"  @Test\n  public void testErrorHandling() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    try {\n      @SuppressWarnings({\"rawtypes\"})\n      SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n      solrClient.request(req);\n      fail(\"expect exception\");\n    } catch (BaseHttpSolrClient.RemoteExecutionException e) {\n      String message = String.valueOf(getObjectByPath(e.getMetaData(), true, \"error/details[0]/errorMessages[0]\"));\n      assertTrue(message.contains(\"replica is required in\"));\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testErrorHandling() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    try {\n      SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n      solrClient.request(req);\n      fail(\"expect exception\");\n    } catch (BaseHttpSolrClient.RemoteExecutionException e) {\n      String message = String.valueOf(getObjectByPath(e.getMetaData(), true, \"error/details[0]/errorMessages[0]\"));\n      assertTrue(message.contains(\"replica is required in\"));\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testErrorHandling().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testErrorHandling() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    try {\n      @SuppressWarnings({\"rawtypes\"})\n      SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n      solrClient.request(req);\n      fail(\"expect exception\");\n    } catch (BaseHttpSolrClient.RemoteExecutionException e) {\n      String message = String.valueOf(getObjectByPath(e.getMetaData(), true, \"error/details[0]/errorMessages[0]\"));\n      assertTrue(message.contains(\"replica is required in\"));\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c304e97e7c1d472bc70e801b35ee78583916c6cd":["afde616cab4149eba221511fd7ff21d460cded7c","5c8cb19f78af5bca202b4a4cfce35d2fc0ac9e4c"],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["db96734b79e26d948b59f68bd4564c4836a71acf"],"3f504512a03d978990cbff30db0522b354e846db":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5c8cb19f78af5bca202b4a4cfce35d2fc0ac9e4c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0d3a1cba0d84384334e5c75e77d139a3a9e480fa":["89948af0461fead48f44ba8fb7866f107ce83f22"],"db96734b79e26d948b59f68bd4564c4836a71acf":["0d3a1cba0d84384334e5c75e77d139a3a9e480fa"],"560c18d71dad43d675158783c3840f8c80d6d39c":["afde616cab4149eba221511fd7ff21d460cded7c","c304e97e7c1d472bc70e801b35ee78583916c6cd"],"89948af0461fead48f44ba8fb7866f107ce83f22":["560c18d71dad43d675158783c3840f8c80d6d39c"],"afde616cab4149eba221511fd7ff21d460cded7c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"c304e97e7c1d472bc70e801b35ee78583916c6cd":["560c18d71dad43d675158783c3840f8c80d6d39c"],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["3f504512a03d978990cbff30db0522b354e846db"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5c8cb19f78af5bca202b4a4cfce35d2fc0ac9e4c":["c304e97e7c1d472bc70e801b35ee78583916c6cd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5c8cb19f78af5bca202b4a4cfce35d2fc0ac9e4c","afde616cab4149eba221511fd7ff21d460cded7c"],"0d3a1cba0d84384334e5c75e77d139a3a9e480fa":["db96734b79e26d948b59f68bd4564c4836a71acf"],"db96734b79e26d948b59f68bd4564c4836a71acf":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"560c18d71dad43d675158783c3840f8c80d6d39c":["89948af0461fead48f44ba8fb7866f107ce83f22"],"afde616cab4149eba221511fd7ff21d460cded7c":["c304e97e7c1d472bc70e801b35ee78583916c6cd","560c18d71dad43d675158783c3840f8c80d6d39c"],"89948af0461fead48f44ba8fb7866f107ce83f22":["0d3a1cba0d84384334e5c75e77d139a3a9e480fa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}