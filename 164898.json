{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene86/Lucene86SegmentInfoFormat#write(Directory,SegmentInfo,IOContext).mjava","commits":[{"id":"773bf150032d3ef6c95997a154fb914b82875cb8","date":1590150786,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene86/Lucene86SegmentInfoFormat#write(Directory,SegmentInfo,IOContext).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void write(Directory dir, SegmentInfo si, IOContext ioContext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(si.name, \"\", SI_EXTENSION);\n\n    try (IndexOutput output = dir.createOutput(fileName, ioContext)) {\n      // Only add the file once we've successfully created it, else IFD assert can trip:\n      si.addFile(fileName);\n      CodecUtil.writeIndexHeader(output,\n          CODEC_NAME,\n          VERSION_CURRENT,\n          si.getId(),\n          \"\");\n      Version version = si.getVersion();\n      if (version.major < 7) {\n        throw new IllegalArgumentException(\"invalid major version: should be >= 7 but got: \" + version.major + \" segment=\" + si);\n      }\n      // Write the Lucene version that created this segment, since 3.1\n      output.writeInt(version.major);\n      output.writeInt(version.minor);\n      output.writeInt(version.bugfix);\n\n      // Write the min Lucene version that contributed docs to the segment, since 7.0\n      if (si.getMinVersion() != null) {\n        output.writeByte((byte) 1);\n        Version minVersion = si.getMinVersion();\n        output.writeInt(minVersion.major);\n        output.writeInt(minVersion.minor);\n        output.writeInt(minVersion.bugfix);\n      } else {\n        output.writeByte((byte) 0);\n      }\n\n      assert version.prerelease == 0;\n      output.writeInt(si.maxDoc());\n\n      output.writeByte((byte) (si.getUseCompoundFile() ? SegmentInfo.YES : SegmentInfo.NO));\n      output.writeMapOfStrings(si.getDiagnostics());\n      Set<String> files = si.files();\n      for (String file : files) {\n        if (!IndexFileNames.parseSegmentName(file).equals(si.name)) {\n          throw new IllegalArgumentException(\"invalid files: expected segment=\" + si.name + \", got=\" + files);\n        }\n      }\n      output.writeSetOfStrings(files);\n      output.writeMapOfStrings(si.getAttributes());\n\n      Sort indexSort = si.getIndexSort();\n      int numSortFields = indexSort == null ? 0 : indexSort.getSort().length;\n      output.writeVInt(numSortFields);\n      for (int i = 0; i < numSortFields; ++i) {\n        SortField sortField = indexSort.getSort()[i];\n        IndexSorter sorter = sortField.getIndexSorter();\n        if (sorter == null) {\n          throw new IllegalArgumentException(\"cannot serialize SortField \" + sortField);\n        }\n        output.writeString(sorter.getProviderName());\n        SortFieldProvider.write(sortField, output);\n      }\n\n      CodecUtil.writeFooter(output);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"773bf150032d3ef6c95997a154fb914b82875cb8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["773bf150032d3ef6c95997a154fb914b82875cb8"]},"commit2Childs":{"773bf150032d3ef6c95997a154fb914b82875cb8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["773bf150032d3ef6c95997a154fb914b82875cb8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}