{"path":"contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestJdbcDataSource#retrieveFromDriverManager().mjava","commits":[{"id":"14aa57a2d9f13bcc41e8b38c52bd1e55f6390576","date":1245907815,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestJdbcDataSource#retrieveFromDriverManager().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void retrieveFromDriverManager() throws Exception {\n    DriverManager.registerDriver(driver);\n\n    EasyMock.expect(\n            driver.connect((String) EasyMock.notNull(), (Properties) EasyMock\n                    .notNull())).andReturn(connection);\n    connection.setAutoCommit(false);\n    connection.setHoldability(1);\n\n    props.put(JdbcDataSource.DRIVER, driver.getClass().getName());\n    props.put(JdbcDataSource.URL, \"jdbc:fakedb\");\n    mockControl.replay();\n\n    Connection conn = jdbcDataSource.createConnectionFactory(context, props)\n            .call();\n\n    mockControl.verify();\n\n    Assert.assertSame(\"connection\", conn, connection);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3559ee45772366e61cb043d9ce7392069ac27ac1","date":1255072294,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestJdbcDataSource#retrieveFromDriverManager().mjava","pathOld":"contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestJdbcDataSource#retrieveFromDriverManager().mjava","sourceNew":"  @Test\n  public void retrieveFromDriverManager() throws Exception {\n    DriverManager.registerDriver(driver);\n\n    EasyMock.expect(\n            driver.connect((String) EasyMock.notNull(), (Properties) EasyMock\n                    .notNull())).andReturn(connection);\n    connection.setAutoCommit(false);\n    connection.setHoldability(1);\n\n    props.put(JdbcDataSource.DRIVER, driver.getClass().getName());\n    props.put(JdbcDataSource.URL, \"jdbc:fakedb\");\n    props.put(\"holdability\", \"HOLD_CURSORS_OVER_COMMIT\");\n    mockControl.replay();\n\n    Connection conn = jdbcDataSource.createConnectionFactory(context, props)\n            .call();\n\n    mockControl.verify();\n\n    Assert.assertSame(\"connection\", conn, connection);\n  }\n\n","sourceOld":"  @Test\n  public void retrieveFromDriverManager() throws Exception {\n    DriverManager.registerDriver(driver);\n\n    EasyMock.expect(\n            driver.connect((String) EasyMock.notNull(), (Properties) EasyMock\n                    .notNull())).andReturn(connection);\n    connection.setAutoCommit(false);\n    connection.setHoldability(1);\n\n    props.put(JdbcDataSource.DRIVER, driver.getClass().getName());\n    props.put(JdbcDataSource.URL, \"jdbc:fakedb\");\n    mockControl.replay();\n\n    Connection conn = jdbcDataSource.createConnectionFactory(context, props)\n            .call();\n\n    mockControl.verify();\n\n    Assert.assertSame(\"connection\", conn, connection);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestJdbcDataSource#retrieveFromDriverManager().mjava","pathOld":"contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestJdbcDataSource#retrieveFromDriverManager().mjava","sourceNew":"  @Test\n  public void retrieveFromDriverManager() throws Exception {\n    DriverManager.registerDriver(driver);\n\n    EasyMock.expect(\n            driver.connect((String) EasyMock.notNull(), (Properties) EasyMock\n                    .notNull())).andReturn(connection);\n    connection.setAutoCommit(false);\n    connection.setHoldability(1);\n\n    props.put(JdbcDataSource.DRIVER, driver.getClass().getName());\n    props.put(JdbcDataSource.URL, \"jdbc:fakedb\");\n    props.put(\"holdability\", \"HOLD_CURSORS_OVER_COMMIT\");\n    mockControl.replay();\n\n    Connection conn = jdbcDataSource.createConnectionFactory(context, props)\n            .call();\n\n    mockControl.verify();\n\n    Assert.assertSame(\"connection\", conn, connection);\n  }\n\n","sourceOld":"  @Test\n  public void retrieveFromDriverManager() throws Exception {\n    DriverManager.registerDriver(driver);\n\n    EasyMock.expect(\n            driver.connect((String) EasyMock.notNull(), (Properties) EasyMock\n                    .notNull())).andReturn(connection);\n    connection.setAutoCommit(false);\n    connection.setHoldability(1);\n\n    props.put(JdbcDataSource.DRIVER, driver.getClass().getName());\n    props.put(JdbcDataSource.URL, \"jdbc:fakedb\");\n    props.put(\"holdability\", \"HOLD_CURSORS_OVER_COMMIT\");\n    mockControl.replay();\n\n    Connection conn = jdbcDataSource.createConnectionFactory(context, props)\n            .call();\n\n    mockControl.verify();\n\n    Assert.assertSame(\"connection\", conn, connection);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"14aa57a2d9f13bcc41e8b38c52bd1e55f6390576":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["3559ee45772366e61cb043d9ce7392069ac27ac1"],"3559ee45772366e61cb043d9ce7392069ac27ac1":["14aa57a2d9f13bcc41e8b38c52bd1e55f6390576"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"14aa57a2d9f13bcc41e8b38c52bd1e55f6390576":["3559ee45772366e61cb043d9ce7392069ac27ac1"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["14aa57a2d9f13bcc41e8b38c52bd1e55f6390576"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"3559ee45772366e61cb043d9ce7392069ac27ac1":["ad94625fb8d088209f46650c8097196fec67f00c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}