{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/DirectDocValuesProducer#getDocsWithField(FieldInfo).mjava","commits":[{"id":"e9eb6464bb91cd54f3151e5a0c18dde9311a60f1","date":1383143016,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/DirectDocValuesProducer#getDocsWithField(FieldInfo).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Bits getDocsWithField(FieldInfo field) throws IOException {\n    switch(field.getDocValuesType()) {\n      case SORTED_SET:\n        return new SortedSetDocsWithField(getSortedSet(field), maxDoc);\n      case SORTED:\n        return new SortedDocsWithField(getSorted(field), maxDoc);\n      case BINARY:\n        BinaryEntry be = binaries.get(field.number);\n        return getMissingBits(field.number, be.missingOffset, be.missingBytes);\n      case NUMERIC:\n        NumericEntry ne = numerics.get(field.number);\n        return getMissingBits(field.number, ne.missingOffset, ne.missingBytes);\n      default: \n        throw new AssertionError();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["8429ddf2214f2bf8abcbb5484fefef6aaf5c417e"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8429ddf2214f2bf8abcbb5484fefef6aaf5c417e","date":1397206443,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/DirectDocValuesProducer#getDocsWithField(FieldInfo).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/DirectDocValuesProducer#getDocsWithField(FieldInfo).mjava","sourceNew":"  @Override\n  public Bits getDocsWithField(FieldInfo field) throws IOException {\n    switch(field.getDocValuesType()) {\n      case SORTED_SET:\n        return DocValues.docsWithValue(getSortedSet(field), maxDoc);\n      case SORTED:\n        return DocValues.docsWithValue(getSorted(field), maxDoc);\n      case BINARY:\n        BinaryEntry be = binaries.get(field.number);\n        return getMissingBits(field.number, be.missingOffset, be.missingBytes);\n      case NUMERIC:\n        NumericEntry ne = numerics.get(field.number);\n        return getMissingBits(field.number, ne.missingOffset, ne.missingBytes);\n      default: \n        throw new AssertionError();\n    }\n  }\n\n","sourceOld":"  @Override\n  public Bits getDocsWithField(FieldInfo field) throws IOException {\n    switch(field.getDocValuesType()) {\n      case SORTED_SET:\n        return new SortedSetDocsWithField(getSortedSet(field), maxDoc);\n      case SORTED:\n        return new SortedDocsWithField(getSorted(field), maxDoc);\n      case BINARY:\n        BinaryEntry be = binaries.get(field.number);\n        return getMissingBits(field.number, be.missingOffset, be.missingBytes);\n      case NUMERIC:\n        NumericEntry ne = numerics.get(field.number);\n        return getMissingBits(field.number, ne.missingOffset, ne.missingBytes);\n      default: \n        throw new AssertionError();\n    }\n  }\n\n","bugFix":["e9eb6464bb91cd54f3151e5a0c18dde9311a60f1"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d14ffaac9c4a4a2c750bf0cd956506802561e062","date":1402602036,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/DirectDocValuesProducer#getDocsWithField(FieldInfo).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/DirectDocValuesProducer#getDocsWithField(FieldInfo).mjava","sourceNew":"  @Override\n  public Bits getDocsWithField(FieldInfo field) throws IOException {\n    switch(field.getDocValuesType()) {\n      case SORTED_SET:\n        return DocValues.docsWithValue(getSortedSet(field), maxDoc);\n      case SORTED_NUMERIC:\n        return DocValues.docsWithValue(getSortedNumeric(field), maxDoc);\n      case SORTED:\n        return DocValues.docsWithValue(getSorted(field), maxDoc);\n      case BINARY:\n        BinaryEntry be = binaries.get(field.number);\n        return getMissingBits(field.number, be.missingOffset, be.missingBytes);\n      case NUMERIC:\n        NumericEntry ne = numerics.get(field.number);\n        return getMissingBits(field.number, ne.missingOffset, ne.missingBytes);\n      default: \n        throw new AssertionError();\n    }\n  }\n\n","sourceOld":"  @Override\n  public Bits getDocsWithField(FieldInfo field) throws IOException {\n    switch(field.getDocValuesType()) {\n      case SORTED_SET:\n        return DocValues.docsWithValue(getSortedSet(field), maxDoc);\n      case SORTED:\n        return DocValues.docsWithValue(getSorted(field), maxDoc);\n      case BINARY:\n        BinaryEntry be = binaries.get(field.number);\n        return getMissingBits(field.number, be.missingOffset, be.missingBytes);\n      case NUMERIC:\n        NumericEntry ne = numerics.get(field.number);\n        return getMissingBits(field.number, ne.missingOffset, ne.missingBytes);\n      default: \n        throw new AssertionError();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c6f080a2ab37c464dd98db173f6cbf10dc74f211","date":1402946779,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/DirectDocValuesProducer#getDocsWithField(FieldInfo).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/DirectDocValuesProducer#getDocsWithField(FieldInfo).mjava","sourceNew":"  @Override\n  public Bits getDocsWithField(FieldInfo field) throws IOException {\n    switch(field.getDocValuesType()) {\n      case SORTED_SET:\n        return DocValues.docsWithValue(getSortedSet(field), maxDoc);\n      case SORTED_NUMERIC:\n        return DocValues.docsWithValue(getSortedNumeric(field), maxDoc);\n      case SORTED:\n        return DocValues.docsWithValue(getSorted(field), maxDoc);\n      case BINARY:\n        BinaryEntry be = binaries.get(field.number);\n        return getMissingBits(field.number, be.missingOffset, be.missingBytes);\n      case NUMERIC:\n        NumericEntry ne = numerics.get(field.number);\n        return getMissingBits(field.number, ne.missingOffset, ne.missingBytes);\n      default: \n        throw new AssertionError();\n    }\n  }\n\n","sourceOld":"  @Override\n  public Bits getDocsWithField(FieldInfo field) throws IOException {\n    switch(field.getDocValuesType()) {\n      case SORTED_SET:\n        return DocValues.docsWithValue(getSortedSet(field), maxDoc);\n      case SORTED:\n        return DocValues.docsWithValue(getSorted(field), maxDoc);\n      case BINARY:\n        BinaryEntry be = binaries.get(field.number);\n        return getMissingBits(field.number, be.missingOffset, be.missingBytes);\n      case NUMERIC:\n        NumericEntry ne = numerics.get(field.number);\n        return getMissingBits(field.number, ne.missingOffset, ne.missingBytes);\n      default: \n        throw new AssertionError();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0936055c0eed56be3e4ae5c9db5b0e355390736a","date":1410874015,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/DirectDocValuesProducer#getDocsWithField(FieldInfo).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/DirectDocValuesProducer#getDocsWithField(FieldInfo).mjava","sourceNew":"  @Override\n  public Bits getDocsWithField(FieldInfo field) throws IOException {\n    switch(field.getDocValuesType()) {\n      case SORTED_SET:\n        return DocValues.docsWithValue(getSortedSet(field), maxDoc);\n      case SORTED_NUMERIC:\n        return DocValues.docsWithValue(getSortedNumeric(field), maxDoc);\n      case SORTED:\n        return DocValues.docsWithValue(getSorted(field), maxDoc);\n      case BINARY:\n        BinaryEntry be = binaries.get(field.name);\n        return getMissingBits(field, be.missingOffset, be.missingBytes);\n      case NUMERIC:\n        NumericEntry ne = numerics.get(field.name);\n        return getMissingBits(field, ne.missingOffset, ne.missingBytes);\n      default: \n        throw new AssertionError();\n    }\n  }\n\n","sourceOld":"  @Override\n  public Bits getDocsWithField(FieldInfo field) throws IOException {\n    switch(field.getDocValuesType()) {\n      case SORTED_SET:\n        return DocValues.docsWithValue(getSortedSet(field), maxDoc);\n      case SORTED_NUMERIC:\n        return DocValues.docsWithValue(getSortedNumeric(field), maxDoc);\n      case SORTED:\n        return DocValues.docsWithValue(getSorted(field), maxDoc);\n      case BINARY:\n        BinaryEntry be = binaries.get(field.number);\n        return getMissingBits(field.number, be.missingOffset, be.missingBytes);\n      case NUMERIC:\n        NumericEntry ne = numerics.get(field.number);\n        return getMissingBits(field.number, ne.missingOffset, ne.missingBytes);\n      default: \n        throw new AssertionError();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":4,"author":"Mike McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/DirectDocValuesProducer#getDocsWithField(FieldInfo).mjava","sourceNew":null,"sourceOld":"  @Override\n  public Bits getDocsWithField(FieldInfo field) throws IOException {\n    switch(field.getDocValuesType()) {\n      case SORTED_SET:\n        return DocValues.docsWithValue(getSortedSet(field), maxDoc);\n      case SORTED_NUMERIC:\n        return DocValues.docsWithValue(getSortedNumeric(field), maxDoc);\n      case SORTED:\n        return DocValues.docsWithValue(getSorted(field), maxDoc);\n      case BINARY:\n        BinaryEntry be = binaries.get(field.name);\n        return getMissingBits(field, be.missingOffset, be.missingBytes);\n      case NUMERIC:\n        NumericEntry ne = numerics.get(field.name);\n        return getMissingBits(field, ne.missingOffset, ne.missingBytes);\n      default: \n        throw new AssertionError();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/DirectDocValuesProducer#getDocsWithField(FieldInfo).mjava","sourceNew":null,"sourceOld":"  @Override\n  public Bits getDocsWithField(FieldInfo field) throws IOException {\n    switch(field.getDocValuesType()) {\n      case SORTED_SET:\n        return DocValues.docsWithValue(getSortedSet(field), maxDoc);\n      case SORTED_NUMERIC:\n        return DocValues.docsWithValue(getSortedNumeric(field), maxDoc);\n      case SORTED:\n        return DocValues.docsWithValue(getSorted(field), maxDoc);\n      case BINARY:\n        BinaryEntry be = binaries.get(field.name);\n        return getMissingBits(field, be.missingOffset, be.missingBytes);\n      case NUMERIC:\n        NumericEntry ne = numerics.get(field.name);\n        return getMissingBits(field, ne.missingOffset, ne.missingBytes);\n      default: \n        throw new AssertionError();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/DirectDocValuesProducer#getDocsWithField(FieldInfo).mjava","sourceNew":null,"sourceOld":"  @Override\n  public Bits getDocsWithField(FieldInfo field) throws IOException {\n    switch(field.getDocValuesType()) {\n      case SORTED_SET:\n        return DocValues.docsWithValue(getSortedSet(field), maxDoc);\n      case SORTED_NUMERIC:\n        return DocValues.docsWithValue(getSortedNumeric(field), maxDoc);\n      case SORTED:\n        return DocValues.docsWithValue(getSorted(field), maxDoc);\n      case BINARY:\n        BinaryEntry be = binaries.get(field.name);\n        return getMissingBits(field, be.missingOffset, be.missingBytes);\n      case NUMERIC:\n        NumericEntry ne = numerics.get(field.name);\n        return getMissingBits(field, ne.missingOffset, ne.missingBytes);\n      default: \n        throw new AssertionError();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9eb6464bb91cd54f3151e5a0c18dde9311a60f1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["0936055c0eed56be3e4ae5c9db5b0e355390736a","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["0936055c0eed56be3e4ae5c9db5b0e355390736a"],"0936055c0eed56be3e4ae5c9db5b0e355390736a":["d14ffaac9c4a4a2c750bf0cd956506802561e062"],"c6f080a2ab37c464dd98db173f6cbf10dc74f211":["8429ddf2214f2bf8abcbb5484fefef6aaf5c417e","d14ffaac9c4a4a2c750bf0cd956506802561e062"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["0936055c0eed56be3e4ae5c9db5b0e355390736a","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"d14ffaac9c4a4a2c750bf0cd956506802561e062":["8429ddf2214f2bf8abcbb5484fefef6aaf5c417e"],"8429ddf2214f2bf8abcbb5484fefef6aaf5c417e":["e9eb6464bb91cd54f3151e5a0c18dde9311a60f1"]},"commit2Childs":{"e9eb6464bb91cd54f3151e5a0c18dde9311a60f1":["8429ddf2214f2bf8abcbb5484fefef6aaf5c417e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e9eb6464bb91cd54f3151e5a0c18dde9311a60f1"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"0936055c0eed56be3e4ae5c9db5b0e355390736a":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"c6f080a2ab37c464dd98db173f6cbf10dc74f211":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"d14ffaac9c4a4a2c750bf0cd956506802561e062":["0936055c0eed56be3e4ae5c9db5b0e355390736a","c6f080a2ab37c464dd98db173f6cbf10dc74f211"],"8429ddf2214f2bf8abcbb5484fefef6aaf5c417e":["c6f080a2ab37c464dd98db173f6cbf10dc74f211","d14ffaac9c4a4a2c750bf0cd956506802561e062"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c6f080a2ab37c464dd98db173f6cbf10dc74f211","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}