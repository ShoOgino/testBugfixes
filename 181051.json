{"path":"solr/core/src/test/org/apache/solr/handler/tagger/TaggerTest#testMultipleFilterQueries().mjava","commits":[{"id":"e091f281a6e026f8bb17aaf194efd0bbd3a7f549","date":1528221895,"type":0,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/tagger/TaggerTest#testMultipleFilterQueries().mjava","pathOld":"/dev/null","sourceNew":"  public void testMultipleFilterQueries() throws Exception {\n    baseParams.set(\"overlaps\", \"ALL\");\n\n    // build up the corpus with some additional fields for filtering purposes\n    deleteByQueryAndGetVersion(\"*:*\", null);\n\n    int i = 0;\n    assertU(adoc(\"id\", \"\"+i++, \"name\", N.London.getName(), \"type\", \"city\", \"country\", \"UK\"));\n    assertU(adoc(\"id\", \"\"+i++, \"name\", N.London_Business_School.getName(), \"type\", \"school\", \"country\", \"UK\"));\n    assertU(adoc(\"id\", \"\"+i++, \"name\", N.Boston.getName(), \"type\", \"city\", \"country\", \"US\"));\n    assertU(adoc(\"id\", \"\"+i++, \"name\", N.City_of_London.getName(), \"type\", \"org\", \"country\", \"UK\"));\n    assertU(commit());\n\n    // not calling buildNames so that we can bring along extra attributes for filtering\n    NAMES = Arrays.stream(N.values()).map(N::getName).collect(Collectors.toList());\n\n    // phrase that matches everything\n    String doc = \"City of London Business School in Boston\";\n\n    // first do no filtering\n    ModifiableSolrParams p = new ModifiableSolrParams();\n    p.add(CommonParams.Q, \"*:*\");\n    assertTags(reqDoc(doc, p),\n        tt(doc, \"City of London\", 0, N.City_of_London),\n        tt(doc, \"London\", 0, N.London),\n        tt(doc, \"London Business School\", 0, N.London_Business_School),\n        tt(doc, \"Boston\", 0, N.Boston));\n\n    // add a single fq\n    p.add(CommonParams.FQ, \"type:city\");\n    assertTags(reqDoc(doc, p),\n        tt(doc, \"London\", 0, N.London),\n        tt(doc, \"Boston\", 0, N.Boston));\n\n    // add another fq\n    p.add(CommonParams.FQ, \"country:US\");\n    assertTags(reqDoc(doc, p),\n        tt(doc, \"Boston\", 0, N.Boston));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f592209545c71895260367152601e9200399776d","date":1528238935,"type":0,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/tagger/TaggerTest#testMultipleFilterQueries().mjava","pathOld":"/dev/null","sourceNew":"  public void testMultipleFilterQueries() throws Exception {\n    baseParams.set(\"overlaps\", \"ALL\");\n\n    // build up the corpus with some additional fields for filtering purposes\n    deleteByQueryAndGetVersion(\"*:*\", null);\n\n    int i = 0;\n    assertU(adoc(\"id\", \"\"+i++, \"name\", N.London.getName(), \"type\", \"city\", \"country\", \"UK\"));\n    assertU(adoc(\"id\", \"\"+i++, \"name\", N.London_Business_School.getName(), \"type\", \"school\", \"country\", \"UK\"));\n    assertU(adoc(\"id\", \"\"+i++, \"name\", N.Boston.getName(), \"type\", \"city\", \"country\", \"US\"));\n    assertU(adoc(\"id\", \"\"+i++, \"name\", N.City_of_London.getName(), \"type\", \"org\", \"country\", \"UK\"));\n    assertU(commit());\n\n    // not calling buildNames so that we can bring along extra attributes for filtering\n    NAMES = Arrays.stream(N.values()).map(N::getName).collect(Collectors.toList());\n\n    // phrase that matches everything\n    String doc = \"City of London Business School in Boston\";\n\n    // first do no filtering\n    ModifiableSolrParams p = new ModifiableSolrParams();\n    p.add(CommonParams.Q, \"*:*\");\n    assertTags(reqDoc(doc, p),\n        tt(doc, \"City of London\", 0, N.City_of_London),\n        tt(doc, \"London\", 0, N.London),\n        tt(doc, \"London Business School\", 0, N.London_Business_School),\n        tt(doc, \"Boston\", 0, N.Boston));\n\n    // add a single fq\n    p.add(CommonParams.FQ, \"type:city\");\n    assertTags(reqDoc(doc, p),\n        tt(doc, \"London\", 0, N.London),\n        tt(doc, \"Boston\", 0, N.Boston));\n\n    // add another fq\n    p.add(CommonParams.FQ, \"country:US\");\n    assertTags(reqDoc(doc, p),\n        tt(doc, \"Boston\", 0, N.Boston));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b70042a8a492f7054d480ccdd2be9796510d4327","date":1528386658,"type":0,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/tagger/TaggerTest#testMultipleFilterQueries().mjava","pathOld":"/dev/null","sourceNew":"  public void testMultipleFilterQueries() throws Exception {\n    baseParams.set(\"overlaps\", \"ALL\");\n\n    // build up the corpus with some additional fields for filtering purposes\n    deleteByQueryAndGetVersion(\"*:*\", null);\n\n    int i = 0;\n    assertU(adoc(\"id\", \"\"+i++, \"name\", N.London.getName(), \"type\", \"city\", \"country\", \"UK\"));\n    assertU(adoc(\"id\", \"\"+i++, \"name\", N.London_Business_School.getName(), \"type\", \"school\", \"country\", \"UK\"));\n    assertU(adoc(\"id\", \"\"+i++, \"name\", N.Boston.getName(), \"type\", \"city\", \"country\", \"US\"));\n    assertU(adoc(\"id\", \"\"+i++, \"name\", N.City_of_London.getName(), \"type\", \"org\", \"country\", \"UK\"));\n    assertU(commit());\n\n    // not calling buildNames so that we can bring along extra attributes for filtering\n    NAMES = Arrays.stream(N.values()).map(N::getName).collect(Collectors.toList());\n\n    // phrase that matches everything\n    String doc = \"City of London Business School in Boston\";\n\n    // first do no filtering\n    ModifiableSolrParams p = new ModifiableSolrParams();\n    p.add(CommonParams.Q, \"*:*\");\n    assertTags(reqDoc(doc, p),\n        tt(doc, \"City of London\", 0, N.City_of_London),\n        tt(doc, \"London\", 0, N.London),\n        tt(doc, \"London Business School\", 0, N.London_Business_School),\n        tt(doc, \"Boston\", 0, N.Boston));\n\n    // add a single fq\n    p.add(CommonParams.FQ, \"type:city\");\n    assertTags(reqDoc(doc, p),\n        tt(doc, \"London\", 0, N.London),\n        tt(doc, \"Boston\", 0, N.Boston));\n\n    // add another fq\n    p.add(CommonParams.FQ, \"country:US\");\n    assertTags(reqDoc(doc, p),\n        tt(doc, \"Boston\", 0, N.Boston));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b70042a8a492f7054d480ccdd2be9796510d4327":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e091f281a6e026f8bb17aaf194efd0bbd3a7f549"],"f592209545c71895260367152601e9200399776d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e091f281a6e026f8bb17aaf194efd0bbd3a7f549"],"e091f281a6e026f8bb17aaf194efd0bbd3a7f549":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e091f281a6e026f8bb17aaf194efd0bbd3a7f549"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b70042a8a492f7054d480ccdd2be9796510d4327","f592209545c71895260367152601e9200399776d","e091f281a6e026f8bb17aaf194efd0bbd3a7f549"],"b70042a8a492f7054d480ccdd2be9796510d4327":[],"f592209545c71895260367152601e9200399776d":[],"e091f281a6e026f8bb17aaf194efd0bbd3a7f549":["b70042a8a492f7054d480ccdd2be9796510d4327","f592209545c71895260367152601e9200399776d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b70042a8a492f7054d480ccdd2be9796510d4327","f592209545c71895260367152601e9200399776d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}