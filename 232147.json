{"path":"lucene/src/test/org/apache/lucene/TestSearchForDuplicates#doTest(Random,PrintWriter,boolean,int).mjava","commits":[{"id":"0762b640e0d0d12b6edb96db68986e13145c3484","date":1307575932,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/TestSearchForDuplicates#doTest(Random,PrintWriter,boolean,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/TestSearchForDuplicates#doTest(Random,PrintWriter,boolean).mjava","sourceNew":"  private void doTest(Random random, PrintWriter out, boolean useCompoundFiles, int MAX_DOCS) throws Exception {\n      Directory directory = newDirectory();\n      Analyzer analyzer = new MockAnalyzer(random);\n      IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n      final MergePolicy mp = conf.getMergePolicy();\n      if (mp instanceof LogMergePolicy) {\n        ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFiles);\n      }\n      IndexWriter writer = new IndexWriter(directory, conf);\n      if (VERBOSE) {\n        System.out.println(\"TEST: now build index\");\n        writer.setInfoStream(System.out);\n      }\n\n      for (int j = 0; j < MAX_DOCS; j++) {\n        Document d = new Document();\n        d.add(newField(PRIORITY_FIELD, HIGH_PRIORITY, Field.Store.YES, Field.Index.ANALYZED));\n        d.add(newField(ID_FIELD, Integer.toString(j), Field.Store.YES, Field.Index.ANALYZED));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      // try a search without OR\n      IndexSearcher searcher = new IndexSearcher(directory, true);\n\n      QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, PRIORITY_FIELD, analyzer);\n\n      Query query = parser.parse(HIGH_PRIORITY);\n      out.println(\"Query: \" + query.toString(PRIORITY_FIELD));\n      if (VERBOSE) {\n        System.out.println(\"TEST: search query=\" + query);\n      }\n\n      final Sort sort = new Sort(new SortField[] {\n          SortField.FIELD_SCORE,\n          new SortField(ID_FIELD, SortField.INT)});\n\n      ScoreDoc[] hits = searcher.search(query, null, MAX_DOCS, sort).scoreDocs;\n      printHits(out, hits, searcher);\n      checkHits(hits, MAX_DOCS, searcher);\n\n      searcher.close();\n\n      // try a new search with OR\n      searcher = new IndexSearcher(directory, true);\n      hits = null;\n\n      parser = new QueryParser(TEST_VERSION_CURRENT, PRIORITY_FIELD, analyzer);\n\n      query = parser.parse(HIGH_PRIORITY + \" OR \" + MED_PRIORITY);\n      out.println(\"Query: \" + query.toString(PRIORITY_FIELD));\n\n      hits = searcher.search(query, null, MAX_DOCS, sort).scoreDocs;\n      printHits(out, hits, searcher);\n      checkHits(hits, MAX_DOCS, searcher);\n\n      searcher.close();\n      directory.close();\n  }\n\n","sourceOld":"  private void doTest(Random random, PrintWriter out, boolean useCompoundFiles) throws Exception {\n      Directory directory = newDirectory();\n      Analyzer analyzer = new MockAnalyzer(random);\n      IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n      final MergePolicy mp = conf.getMergePolicy();\n      if (mp instanceof LogMergePolicy) {\n        ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFiles);\n      }\n      IndexWriter writer = new IndexWriter(directory, conf);\n      if (VERBOSE) {\n        System.out.println(\"TEST: now build index\");\n        writer.setInfoStream(System.out);\n      }\n\n      final int MAX_DOCS = 225;\n\n      for (int j = 0; j < MAX_DOCS; j++) {\n        Document d = new Document();\n        d.add(newField(PRIORITY_FIELD, HIGH_PRIORITY, Field.Store.YES, Field.Index.ANALYZED));\n        d.add(newField(ID_FIELD, Integer.toString(j), Field.Store.YES, Field.Index.ANALYZED));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      // try a search without OR\n      IndexSearcher searcher = new IndexSearcher(directory, true);\n\n      QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, PRIORITY_FIELD, analyzer);\n\n      Query query = parser.parse(HIGH_PRIORITY);\n      out.println(\"Query: \" + query.toString(PRIORITY_FIELD));\n      if (VERBOSE) {\n        System.out.println(\"TEST: search query=\" + query);\n      }\n\n      final Sort sort = new Sort(new SortField[] {\n          SortField.FIELD_SCORE,\n          new SortField(ID_FIELD, SortField.INT)});\n\n      ScoreDoc[] hits = searcher.search(query, null, MAX_DOCS, sort).scoreDocs;\n      printHits(out, hits, searcher);\n      checkHits(hits, MAX_DOCS, searcher);\n\n      searcher.close();\n\n      // try a new search with OR\n      searcher = new IndexSearcher(directory, true);\n      hits = null;\n\n      parser = new QueryParser(TEST_VERSION_CURRENT, PRIORITY_FIELD, analyzer);\n\n      query = parser.parse(HIGH_PRIORITY + \" OR \" + MED_PRIORITY);\n      out.println(\"Query: \" + query.toString(PRIORITY_FIELD));\n\n      hits = searcher.search(query, null, MAX_DOCS, sort).scoreDocs;\n      printHits(out, hits, searcher);\n      checkHits(hits, MAX_DOCS, searcher);\n\n      searcher.close();\n      directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"77cf4379b2824f6ea34b091c495d6e95c38ff9e2","date":1307610475,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/TestSearchForDuplicates#doTest(Random,PrintWriter,boolean,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/TestSearchForDuplicates#doTest(Random,PrintWriter,boolean).mjava","sourceNew":"  private void doTest(Random random, PrintWriter out, boolean useCompoundFiles, int MAX_DOCS) throws Exception {\n      Directory directory = newDirectory();\n      Analyzer analyzer = new MockAnalyzer(random);\n      IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n      final MergePolicy mp = conf.getMergePolicy();\n      if (mp instanceof LogMergePolicy) {\n        ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFiles);\n      }\n      IndexWriter writer = new IndexWriter(directory, conf);\n      if (VERBOSE) {\n        System.out.println(\"TEST: now build index\");\n        writer.setInfoStream(System.out);\n      }\n\n      for (int j = 0; j < MAX_DOCS; j++) {\n        Document d = new Document();\n        d.add(newField(PRIORITY_FIELD, HIGH_PRIORITY, Field.Store.YES, Field.Index.ANALYZED));\n        d.add(newField(ID_FIELD, Integer.toString(j), Field.Store.YES, Field.Index.ANALYZED));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      // try a search without OR\n      IndexSearcher searcher = new IndexSearcher(directory, true);\n\n      QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, PRIORITY_FIELD, analyzer);\n\n      Query query = parser.parse(HIGH_PRIORITY);\n      out.println(\"Query: \" + query.toString(PRIORITY_FIELD));\n      if (VERBOSE) {\n        System.out.println(\"TEST: search query=\" + query);\n      }\n\n      final Sort sort = new Sort(new SortField[] {\n          SortField.FIELD_SCORE,\n          new SortField(ID_FIELD, SortField.INT)});\n\n      ScoreDoc[] hits = searcher.search(query, null, MAX_DOCS, sort).scoreDocs;\n      printHits(out, hits, searcher);\n      checkHits(hits, MAX_DOCS, searcher);\n\n      searcher.close();\n\n      // try a new search with OR\n      searcher = new IndexSearcher(directory, true);\n      hits = null;\n\n      parser = new QueryParser(TEST_VERSION_CURRENT, PRIORITY_FIELD, analyzer);\n\n      query = parser.parse(HIGH_PRIORITY + \" OR \" + MED_PRIORITY);\n      out.println(\"Query: \" + query.toString(PRIORITY_FIELD));\n\n      hits = searcher.search(query, null, MAX_DOCS, sort).scoreDocs;\n      printHits(out, hits, searcher);\n      checkHits(hits, MAX_DOCS, searcher);\n\n      searcher.close();\n      directory.close();\n  }\n\n","sourceOld":"  private void doTest(Random random, PrintWriter out, boolean useCompoundFiles) throws Exception {\n      Directory directory = newDirectory();\n      Analyzer analyzer = new MockAnalyzer(random);\n      IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n      final MergePolicy mp = conf.getMergePolicy();\n      if (mp instanceof LogMergePolicy) {\n        ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFiles);\n      }\n      IndexWriter writer = new IndexWriter(directory, conf);\n      if (VERBOSE) {\n        System.out.println(\"TEST: now build index\");\n        writer.setInfoStream(System.out);\n      }\n\n      final int MAX_DOCS = 225;\n\n      for (int j = 0; j < MAX_DOCS; j++) {\n        Document d = new Document();\n        d.add(newField(PRIORITY_FIELD, HIGH_PRIORITY, Field.Store.YES, Field.Index.ANALYZED));\n        d.add(newField(ID_FIELD, Integer.toString(j), Field.Store.YES, Field.Index.ANALYZED));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      // try a search without OR\n      IndexSearcher searcher = new IndexSearcher(directory, true);\n\n      QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, PRIORITY_FIELD, analyzer);\n\n      Query query = parser.parse(HIGH_PRIORITY);\n      out.println(\"Query: \" + query.toString(PRIORITY_FIELD));\n      if (VERBOSE) {\n        System.out.println(\"TEST: search query=\" + query);\n      }\n\n      final Sort sort = new Sort(new SortField[] {\n          SortField.FIELD_SCORE,\n          new SortField(ID_FIELD, SortField.INT)});\n\n      ScoreDoc[] hits = searcher.search(query, null, MAX_DOCS, sort).scoreDocs;\n      printHits(out, hits, searcher);\n      checkHits(hits, MAX_DOCS, searcher);\n\n      searcher.close();\n\n      // try a new search with OR\n      searcher = new IndexSearcher(directory, true);\n      hits = null;\n\n      parser = new QueryParser(TEST_VERSION_CURRENT, PRIORITY_FIELD, analyzer);\n\n      query = parser.parse(HIGH_PRIORITY + \" OR \" + MED_PRIORITY);\n      out.println(\"Query: \" + query.toString(PRIORITY_FIELD));\n\n      hits = searcher.search(query, null, MAX_DOCS, sort).scoreDocs;\n      printHits(out, hits, searcher);\n      checkHits(hits, MAX_DOCS, searcher);\n\n      searcher.close();\n      directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","date":1307729864,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/TestSearchForDuplicates#doTest(Random,PrintWriter,boolean,int).mjava","pathOld":"/dev/null","sourceNew":"  private void doTest(Random random, PrintWriter out, boolean useCompoundFiles, int MAX_DOCS) throws Exception {\n      Directory directory = newDirectory();\n      Analyzer analyzer = new MockAnalyzer(random);\n      IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n      final MergePolicy mp = conf.getMergePolicy();\n      if (mp instanceof LogMergePolicy) {\n        ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFiles);\n      }\n      IndexWriter writer = new IndexWriter(directory, conf);\n      if (VERBOSE) {\n        System.out.println(\"TEST: now build index\");\n        writer.setInfoStream(System.out);\n      }\n\n      for (int j = 0; j < MAX_DOCS; j++) {\n        Document d = new Document();\n        d.add(newField(PRIORITY_FIELD, HIGH_PRIORITY, Field.Store.YES, Field.Index.ANALYZED));\n        d.add(newField(ID_FIELD, Integer.toString(j), Field.Store.YES, Field.Index.ANALYZED));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      // try a search without OR\n      IndexSearcher searcher = new IndexSearcher(directory, true);\n\n      QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, PRIORITY_FIELD, analyzer);\n\n      Query query = parser.parse(HIGH_PRIORITY);\n      out.println(\"Query: \" + query.toString(PRIORITY_FIELD));\n      if (VERBOSE) {\n        System.out.println(\"TEST: search query=\" + query);\n      }\n\n      final Sort sort = new Sort(new SortField[] {\n          SortField.FIELD_SCORE,\n          new SortField(ID_FIELD, SortField.INT)});\n\n      ScoreDoc[] hits = searcher.search(query, null, MAX_DOCS, sort).scoreDocs;\n      printHits(out, hits, searcher);\n      checkHits(hits, MAX_DOCS, searcher);\n\n      searcher.close();\n\n      // try a new search with OR\n      searcher = new IndexSearcher(directory, true);\n      hits = null;\n\n      parser = new QueryParser(TEST_VERSION_CURRENT, PRIORITY_FIELD, analyzer);\n\n      query = parser.parse(HIGH_PRIORITY + \" OR \" + MED_PRIORITY);\n      out.println(\"Query: \" + query.toString(PRIORITY_FIELD));\n\n      hits = searcher.search(query, null, MAX_DOCS, sort).scoreDocs;\n      printHits(out, hits, searcher);\n      checkHits(hits, MAX_DOCS, searcher);\n\n      searcher.close();\n      directory.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"090a0320e4de4a3674376aef96b9701f47564f86","date":1308707325,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/TestSearchForDuplicates#doTest(Random,PrintWriter,boolean,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/TestSearchForDuplicates#doTest(Random,PrintWriter,boolean,int).mjava","sourceNew":"  private void doTest(Random random, PrintWriter out, boolean useCompoundFiles, int MAX_DOCS) throws Exception {\n      Directory directory = newDirectory();\n      Analyzer analyzer = new MockAnalyzer(random);\n      IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n      final MergePolicy mp = conf.getMergePolicy();\n      if (mp instanceof LogMergePolicy) {\n        ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFiles);\n      }\n      IndexWriter writer = new IndexWriter(directory, conf);\n      if (VERBOSE) {\n        System.out.println(\"TEST: now build index\");\n        writer.setInfoStream(System.out);\n      }\n\n      for (int j = 0; j < MAX_DOCS; j++) {\n        Document d = new Document();\n        d.add(newField(PRIORITY_FIELD, HIGH_PRIORITY, Field.Store.YES, Field.Index.ANALYZED));\n        d.add(newField(ID_FIELD, Integer.toString(j), Field.Store.YES, Field.Index.ANALYZED));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      // try a search without OR\n      IndexSearcher searcher = new IndexSearcher(directory, true);\n\n      QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, PRIORITY_FIELD, analyzer);\n\n      Query query = parser.parse(HIGH_PRIORITY);\n      out.println(\"Query: \" + query.toString(PRIORITY_FIELD));\n      if (VERBOSE) {\n        System.out.println(\"TEST: search query=\" + query);\n      }\n\n      final Sort sort = new Sort(new SortField[] {\n          SortField.FIELD_SCORE,\n          new SortField(ID_FIELD, SortField.Type.INT)});\n\n      ScoreDoc[] hits = searcher.search(query, null, MAX_DOCS, sort).scoreDocs;\n      printHits(out, hits, searcher);\n      checkHits(hits, MAX_DOCS, searcher);\n\n      searcher.close();\n\n      // try a new search with OR\n      searcher = new IndexSearcher(directory, true);\n      hits = null;\n\n      parser = new QueryParser(TEST_VERSION_CURRENT, PRIORITY_FIELD, analyzer);\n\n      query = parser.parse(HIGH_PRIORITY + \" OR \" + MED_PRIORITY);\n      out.println(\"Query: \" + query.toString(PRIORITY_FIELD));\n\n      hits = searcher.search(query, null, MAX_DOCS, sort).scoreDocs;\n      printHits(out, hits, searcher);\n      checkHits(hits, MAX_DOCS, searcher);\n\n      searcher.close();\n      directory.close();\n  }\n\n","sourceOld":"  private void doTest(Random random, PrintWriter out, boolean useCompoundFiles, int MAX_DOCS) throws Exception {\n      Directory directory = newDirectory();\n      Analyzer analyzer = new MockAnalyzer(random);\n      IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n      final MergePolicy mp = conf.getMergePolicy();\n      if (mp instanceof LogMergePolicy) {\n        ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFiles);\n      }\n      IndexWriter writer = new IndexWriter(directory, conf);\n      if (VERBOSE) {\n        System.out.println(\"TEST: now build index\");\n        writer.setInfoStream(System.out);\n      }\n\n      for (int j = 0; j < MAX_DOCS; j++) {\n        Document d = new Document();\n        d.add(newField(PRIORITY_FIELD, HIGH_PRIORITY, Field.Store.YES, Field.Index.ANALYZED));\n        d.add(newField(ID_FIELD, Integer.toString(j), Field.Store.YES, Field.Index.ANALYZED));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      // try a search without OR\n      IndexSearcher searcher = new IndexSearcher(directory, true);\n\n      QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, PRIORITY_FIELD, analyzer);\n\n      Query query = parser.parse(HIGH_PRIORITY);\n      out.println(\"Query: \" + query.toString(PRIORITY_FIELD));\n      if (VERBOSE) {\n        System.out.println(\"TEST: search query=\" + query);\n      }\n\n      final Sort sort = new Sort(new SortField[] {\n          SortField.FIELD_SCORE,\n          new SortField(ID_FIELD, SortField.INT)});\n\n      ScoreDoc[] hits = searcher.search(query, null, MAX_DOCS, sort).scoreDocs;\n      printHits(out, hits, searcher);\n      checkHits(hits, MAX_DOCS, searcher);\n\n      searcher.close();\n\n      // try a new search with OR\n      searcher = new IndexSearcher(directory, true);\n      hits = null;\n\n      parser = new QueryParser(TEST_VERSION_CURRENT, PRIORITY_FIELD, analyzer);\n\n      query = parser.parse(HIGH_PRIORITY + \" OR \" + MED_PRIORITY);\n      out.println(\"Query: \" + query.toString(PRIORITY_FIELD));\n\n      hits = searcher.search(query, null, MAX_DOCS, sort).scoreDocs;\n      printHits(out, hits, searcher);\n      checkHits(hits, MAX_DOCS, searcher);\n\n      searcher.close();\n      directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2553b00f699380c64959ccb27991289aae87be2e","date":1309290151,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/TestSearchForDuplicates#doTest(Random,PrintWriter,boolean,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/TestSearchForDuplicates#doTest(Random,PrintWriter,boolean,int).mjava","sourceNew":"  private void doTest(Random random, PrintWriter out, boolean useCompoundFiles, int MAX_DOCS) throws Exception {\n      Directory directory = newDirectory();\n      Analyzer analyzer = new MockAnalyzer(random);\n      IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n      final MergePolicy mp = conf.getMergePolicy();\n      if (mp instanceof LogMergePolicy) {\n        ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFiles);\n      }\n      IndexWriter writer = new IndexWriter(directory, conf);\n      if (VERBOSE) {\n        System.out.println(\"TEST: now build index\");\n        writer.setInfoStream(System.out);\n      }\n\n      for (int j = 0; j < MAX_DOCS; j++) {\n        Document d = new Document();\n        d.add(newField(PRIORITY_FIELD, HIGH_PRIORITY, Field.Store.YES, Field.Index.ANALYZED));\n        d.add(newField(ID_FIELD, Integer.toString(j), Field.Store.YES, Field.Index.ANALYZED));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      // try a search without OR\n      IndexSearcher searcher = new IndexSearcher(directory, true);\n\n      QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, PRIORITY_FIELD, analyzer);\n\n      Query query = parser.parse(HIGH_PRIORITY);\n      out.println(\"Query: \" + query.toString(PRIORITY_FIELD));\n      if (VERBOSE) {\n        System.out.println(\"TEST: search query=\" + query);\n      }\n\n      final Sort sort = new Sort(new SortField[] {\n          SortField.FIELD_SCORE,\n          new SortField(ID_FIELD, SortField.Type.INT)});\n\n      ScoreDoc[] hits = searcher.search(query, null, MAX_DOCS, sort).scoreDocs;\n      printHits(out, hits, searcher);\n      checkHits(hits, MAX_DOCS, searcher);\n\n      searcher.close();\n\n      // try a new search with OR\n      searcher = new IndexSearcher(directory, true);\n      hits = null;\n\n      parser = new QueryParser(TEST_VERSION_CURRENT, PRIORITY_FIELD, analyzer);\n\n      query = parser.parse(HIGH_PRIORITY + \" OR \" + MED_PRIORITY);\n      out.println(\"Query: \" + query.toString(PRIORITY_FIELD));\n\n      hits = searcher.search(query, null, MAX_DOCS, sort).scoreDocs;\n      printHits(out, hits, searcher);\n      checkHits(hits, MAX_DOCS, searcher);\n\n      searcher.close();\n      directory.close();\n  }\n\n","sourceOld":"  private void doTest(Random random, PrintWriter out, boolean useCompoundFiles, int MAX_DOCS) throws Exception {\n      Directory directory = newDirectory();\n      Analyzer analyzer = new MockAnalyzer(random);\n      IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n      final MergePolicy mp = conf.getMergePolicy();\n      if (mp instanceof LogMergePolicy) {\n        ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFiles);\n      }\n      IndexWriter writer = new IndexWriter(directory, conf);\n      if (VERBOSE) {\n        System.out.println(\"TEST: now build index\");\n        writer.setInfoStream(System.out);\n      }\n\n      for (int j = 0; j < MAX_DOCS; j++) {\n        Document d = new Document();\n        d.add(newField(PRIORITY_FIELD, HIGH_PRIORITY, Field.Store.YES, Field.Index.ANALYZED));\n        d.add(newField(ID_FIELD, Integer.toString(j), Field.Store.YES, Field.Index.ANALYZED));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      // try a search without OR\n      IndexSearcher searcher = new IndexSearcher(directory, true);\n\n      QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, PRIORITY_FIELD, analyzer);\n\n      Query query = parser.parse(HIGH_PRIORITY);\n      out.println(\"Query: \" + query.toString(PRIORITY_FIELD));\n      if (VERBOSE) {\n        System.out.println(\"TEST: search query=\" + query);\n      }\n\n      final Sort sort = new Sort(new SortField[] {\n          SortField.FIELD_SCORE,\n          new SortField(ID_FIELD, SortField.INT)});\n\n      ScoreDoc[] hits = searcher.search(query, null, MAX_DOCS, sort).scoreDocs;\n      printHits(out, hits, searcher);\n      checkHits(hits, MAX_DOCS, searcher);\n\n      searcher.close();\n\n      // try a new search with OR\n      searcher = new IndexSearcher(directory, true);\n      hits = null;\n\n      parser = new QueryParser(TEST_VERSION_CURRENT, PRIORITY_FIELD, analyzer);\n\n      query = parser.parse(HIGH_PRIORITY + \" OR \" + MED_PRIORITY);\n      out.println(\"Query: \" + query.toString(PRIORITY_FIELD));\n\n      hits = searcher.search(query, null, MAX_DOCS, sort).scoreDocs;\n      printHits(out, hits, searcher);\n      checkHits(hits, MAX_DOCS, searcher);\n\n      searcher.close();\n      directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"112629f1dfd1451722c6047bcf593e6efc96f5f4","date":1309910887,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/TestSearchForDuplicates#doTest(Random,PrintWriter,boolean,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/TestSearchForDuplicates#doTest(Random,PrintWriter,boolean,int).mjava","sourceNew":"  private void doTest(Random random, PrintWriter out, boolean useCompoundFiles, int MAX_DOCS) throws Exception {\n      Directory directory = newDirectory();\n      Analyzer analyzer = new MockAnalyzer(random);\n      IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n      final MergePolicy mp = conf.getMergePolicy();\n      if (mp instanceof LogMergePolicy) {\n        ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFiles);\n      }\n      IndexWriter writer = new IndexWriter(directory, conf);\n      if (VERBOSE) {\n        System.out.println(\"TEST: now build index\");\n        writer.setInfoStream(System.out);\n      }\n\n      for (int j = 0; j < MAX_DOCS; j++) {\n        Document d = new Document();\n        d.add(newField(PRIORITY_FIELD, HIGH_PRIORITY, Field.Store.YES, Field.Index.ANALYZED));\n        d.add(newField(ID_FIELD, Integer.toString(j), Field.Store.YES, Field.Index.ANALYZED));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      // try a search without OR\n      IndexSearcher searcher = new IndexSearcher(directory, true);\n\n      Query query = new TermQuery(new Term(PRIORITY_FIELD, HIGH_PRIORITY));\n      out.println(\"Query: \" + query.toString(PRIORITY_FIELD));\n      if (VERBOSE) {\n        System.out.println(\"TEST: search query=\" + query);\n      }\n\n      final Sort sort = new Sort(new SortField[] {\n          SortField.FIELD_SCORE,\n          new SortField(ID_FIELD, SortField.Type.INT)});\n\n      ScoreDoc[] hits = searcher.search(query, null, MAX_DOCS, sort).scoreDocs;\n      printHits(out, hits, searcher);\n      checkHits(hits, MAX_DOCS, searcher);\n\n      searcher.close();\n\n      // try a new search with OR\n      searcher = new IndexSearcher(directory, true);\n      hits = null;\n\n      BooleanQuery booleanQuery = new BooleanQuery();\n      booleanQuery.add(new TermQuery(new Term(PRIORITY_FIELD, HIGH_PRIORITY)), BooleanClause.Occur.SHOULD);\n      booleanQuery.add(new TermQuery(new Term(PRIORITY_FIELD, MED_PRIORITY)), BooleanClause.Occur.SHOULD);\n      out.println(\"Query: \" + booleanQuery.toString(PRIORITY_FIELD));\n\n      hits = searcher.search(booleanQuery, null, MAX_DOCS, sort).scoreDocs;\n      printHits(out, hits, searcher);\n      checkHits(hits, MAX_DOCS, searcher);\n\n      searcher.close();\n      directory.close();\n  }\n\n","sourceOld":"  private void doTest(Random random, PrintWriter out, boolean useCompoundFiles, int MAX_DOCS) throws Exception {\n      Directory directory = newDirectory();\n      Analyzer analyzer = new MockAnalyzer(random);\n      IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n      final MergePolicy mp = conf.getMergePolicy();\n      if (mp instanceof LogMergePolicy) {\n        ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFiles);\n      }\n      IndexWriter writer = new IndexWriter(directory, conf);\n      if (VERBOSE) {\n        System.out.println(\"TEST: now build index\");\n        writer.setInfoStream(System.out);\n      }\n\n      for (int j = 0; j < MAX_DOCS; j++) {\n        Document d = new Document();\n        d.add(newField(PRIORITY_FIELD, HIGH_PRIORITY, Field.Store.YES, Field.Index.ANALYZED));\n        d.add(newField(ID_FIELD, Integer.toString(j), Field.Store.YES, Field.Index.ANALYZED));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      // try a search without OR\n      IndexSearcher searcher = new IndexSearcher(directory, true);\n\n      QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, PRIORITY_FIELD, analyzer);\n\n      Query query = parser.parse(HIGH_PRIORITY);\n      out.println(\"Query: \" + query.toString(PRIORITY_FIELD));\n      if (VERBOSE) {\n        System.out.println(\"TEST: search query=\" + query);\n      }\n\n      final Sort sort = new Sort(new SortField[] {\n          SortField.FIELD_SCORE,\n          new SortField(ID_FIELD, SortField.Type.INT)});\n\n      ScoreDoc[] hits = searcher.search(query, null, MAX_DOCS, sort).scoreDocs;\n      printHits(out, hits, searcher);\n      checkHits(hits, MAX_DOCS, searcher);\n\n      searcher.close();\n\n      // try a new search with OR\n      searcher = new IndexSearcher(directory, true);\n      hits = null;\n\n      parser = new QueryParser(TEST_VERSION_CURRENT, PRIORITY_FIELD, analyzer);\n\n      query = parser.parse(HIGH_PRIORITY + \" OR \" + MED_PRIORITY);\n      out.println(\"Query: \" + query.toString(PRIORITY_FIELD));\n\n      hits = searcher.search(query, null, MAX_DOCS, sort).scoreDocs;\n      printHits(out, hits, searcher);\n      checkHits(hits, MAX_DOCS, searcher);\n\n      searcher.close();\n      directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/TestSearchForDuplicates#doTest(Random,PrintWriter,boolean,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/TestSearchForDuplicates#doTest(Random,PrintWriter,boolean,int).mjava","sourceNew":"  private void doTest(Random random, PrintWriter out, boolean useCompoundFiles, int MAX_DOCS) throws Exception {\n      Directory directory = newDirectory();\n      Analyzer analyzer = new MockAnalyzer(random);\n      IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n      final MergePolicy mp = conf.getMergePolicy();\n      if (mp instanceof LogMergePolicy) {\n        ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFiles);\n      }\n      IndexWriter writer = new IndexWriter(directory, conf);\n      if (VERBOSE) {\n        System.out.println(\"TEST: now build index\");\n        writer.setInfoStream(System.out);\n      }\n\n      for (int j = 0; j < MAX_DOCS; j++) {\n        Document d = new Document();\n        d.add(newField(PRIORITY_FIELD, HIGH_PRIORITY, Field.Store.YES, Field.Index.ANALYZED));\n        d.add(newField(ID_FIELD, Integer.toString(j), Field.Store.YES, Field.Index.ANALYZED));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      // try a search without OR\n      IndexSearcher searcher = new IndexSearcher(directory, true);\n\n      Query query = new TermQuery(new Term(PRIORITY_FIELD, HIGH_PRIORITY));\n      out.println(\"Query: \" + query.toString(PRIORITY_FIELD));\n      if (VERBOSE) {\n        System.out.println(\"TEST: search query=\" + query);\n      }\n\n      final Sort sort = new Sort(new SortField[] {\n          SortField.FIELD_SCORE,\n          new SortField(ID_FIELD, SortField.Type.INT)});\n\n      ScoreDoc[] hits = searcher.search(query, null, MAX_DOCS, sort).scoreDocs;\n      printHits(out, hits, searcher);\n      checkHits(hits, MAX_DOCS, searcher);\n\n      searcher.close();\n\n      // try a new search with OR\n      searcher = new IndexSearcher(directory, true);\n      hits = null;\n\n      BooleanQuery booleanQuery = new BooleanQuery();\n      booleanQuery.add(new TermQuery(new Term(PRIORITY_FIELD, HIGH_PRIORITY)), BooleanClause.Occur.SHOULD);\n      booleanQuery.add(new TermQuery(new Term(PRIORITY_FIELD, MED_PRIORITY)), BooleanClause.Occur.SHOULD);\n      out.println(\"Query: \" + booleanQuery.toString(PRIORITY_FIELD));\n\n      hits = searcher.search(booleanQuery, null, MAX_DOCS, sort).scoreDocs;\n      printHits(out, hits, searcher);\n      checkHits(hits, MAX_DOCS, searcher);\n\n      searcher.close();\n      directory.close();\n  }\n\n","sourceOld":"  private void doTest(Random random, PrintWriter out, boolean useCompoundFiles, int MAX_DOCS) throws Exception {\n      Directory directory = newDirectory();\n      Analyzer analyzer = new MockAnalyzer(random);\n      IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n      final MergePolicy mp = conf.getMergePolicy();\n      if (mp instanceof LogMergePolicy) {\n        ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFiles);\n      }\n      IndexWriter writer = new IndexWriter(directory, conf);\n      if (VERBOSE) {\n        System.out.println(\"TEST: now build index\");\n        writer.setInfoStream(System.out);\n      }\n\n      for (int j = 0; j < MAX_DOCS; j++) {\n        Document d = new Document();\n        d.add(newField(PRIORITY_FIELD, HIGH_PRIORITY, Field.Store.YES, Field.Index.ANALYZED));\n        d.add(newField(ID_FIELD, Integer.toString(j), Field.Store.YES, Field.Index.ANALYZED));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      // try a search without OR\n      IndexSearcher searcher = new IndexSearcher(directory, true);\n\n      QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, PRIORITY_FIELD, analyzer);\n\n      Query query = parser.parse(HIGH_PRIORITY);\n      out.println(\"Query: \" + query.toString(PRIORITY_FIELD));\n      if (VERBOSE) {\n        System.out.println(\"TEST: search query=\" + query);\n      }\n\n      final Sort sort = new Sort(new SortField[] {\n          SortField.FIELD_SCORE,\n          new SortField(ID_FIELD, SortField.Type.INT)});\n\n      ScoreDoc[] hits = searcher.search(query, null, MAX_DOCS, sort).scoreDocs;\n      printHits(out, hits, searcher);\n      checkHits(hits, MAX_DOCS, searcher);\n\n      searcher.close();\n\n      // try a new search with OR\n      searcher = new IndexSearcher(directory, true);\n      hits = null;\n\n      parser = new QueryParser(TEST_VERSION_CURRENT, PRIORITY_FIELD, analyzer);\n\n      query = parser.parse(HIGH_PRIORITY + \" OR \" + MED_PRIORITY);\n      out.println(\"Query: \" + query.toString(PRIORITY_FIELD));\n\n      hits = searcher.search(query, null, MAX_DOCS, sort).scoreDocs;\n      printHits(out, hits, searcher);\n      checkHits(hits, MAX_DOCS, searcher);\n\n      searcher.close();\n      directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/TestSearchForDuplicates#doTest(Random,PrintWriter,boolean,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/TestSearchForDuplicates#doTest(Random,PrintWriter,boolean,int).mjava","sourceNew":"  private void doTest(Random random, PrintWriter out, boolean useCompoundFiles, int MAX_DOCS) throws Exception {\n      Directory directory = newDirectory();\n      Analyzer analyzer = new MockAnalyzer(random);\n      IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n      final MergePolicy mp = conf.getMergePolicy();\n      if (mp instanceof LogMergePolicy) {\n        ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFiles);\n      }\n      IndexWriter writer = new IndexWriter(directory, conf);\n      if (VERBOSE) {\n        System.out.println(\"TEST: now build index\");\n        writer.setInfoStream(System.out);\n      }\n\n      for (int j = 0; j < MAX_DOCS; j++) {\n        Document d = new Document();\n        d.add(newField(PRIORITY_FIELD, HIGH_PRIORITY, Field.Store.YES, Field.Index.ANALYZED));\n        d.add(newField(ID_FIELD, Integer.toString(j), Field.Store.YES, Field.Index.ANALYZED));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      // try a search without OR\n      IndexSearcher searcher = new IndexSearcher(directory, true);\n\n      Query query = new TermQuery(new Term(PRIORITY_FIELD, HIGH_PRIORITY));\n      out.println(\"Query: \" + query.toString(PRIORITY_FIELD));\n      if (VERBOSE) {\n        System.out.println(\"TEST: search query=\" + query);\n      }\n\n      final Sort sort = new Sort(new SortField[] {\n          SortField.FIELD_SCORE,\n          new SortField(ID_FIELD, SortField.Type.INT)});\n\n      ScoreDoc[] hits = searcher.search(query, null, MAX_DOCS, sort).scoreDocs;\n      printHits(out, hits, searcher);\n      checkHits(hits, MAX_DOCS, searcher);\n\n      searcher.close();\n\n      // try a new search with OR\n      searcher = new IndexSearcher(directory, true);\n      hits = null;\n\n      BooleanQuery booleanQuery = new BooleanQuery();\n      booleanQuery.add(new TermQuery(new Term(PRIORITY_FIELD, HIGH_PRIORITY)), BooleanClause.Occur.SHOULD);\n      booleanQuery.add(new TermQuery(new Term(PRIORITY_FIELD, MED_PRIORITY)), BooleanClause.Occur.SHOULD);\n      out.println(\"Query: \" + booleanQuery.toString(PRIORITY_FIELD));\n\n      hits = searcher.search(booleanQuery, null, MAX_DOCS, sort).scoreDocs;\n      printHits(out, hits, searcher);\n      checkHits(hits, MAX_DOCS, searcher);\n\n      searcher.close();\n      directory.close();\n  }\n\n","sourceOld":"  private void doTest(Random random, PrintWriter out, boolean useCompoundFiles, int MAX_DOCS) throws Exception {\n      Directory directory = newDirectory();\n      Analyzer analyzer = new MockAnalyzer(random);\n      IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n      final MergePolicy mp = conf.getMergePolicy();\n      if (mp instanceof LogMergePolicy) {\n        ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFiles);\n      }\n      IndexWriter writer = new IndexWriter(directory, conf);\n      if (VERBOSE) {\n        System.out.println(\"TEST: now build index\");\n        writer.setInfoStream(System.out);\n      }\n\n      for (int j = 0; j < MAX_DOCS; j++) {\n        Document d = new Document();\n        d.add(newField(PRIORITY_FIELD, HIGH_PRIORITY, Field.Store.YES, Field.Index.ANALYZED));\n        d.add(newField(ID_FIELD, Integer.toString(j), Field.Store.YES, Field.Index.ANALYZED));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      // try a search without OR\n      IndexSearcher searcher = new IndexSearcher(directory, true);\n\n      QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, PRIORITY_FIELD, analyzer);\n\n      Query query = parser.parse(HIGH_PRIORITY);\n      out.println(\"Query: \" + query.toString(PRIORITY_FIELD));\n      if (VERBOSE) {\n        System.out.println(\"TEST: search query=\" + query);\n      }\n\n      final Sort sort = new Sort(new SortField[] {\n          SortField.FIELD_SCORE,\n          new SortField(ID_FIELD, SortField.INT)});\n\n      ScoreDoc[] hits = searcher.search(query, null, MAX_DOCS, sort).scoreDocs;\n      printHits(out, hits, searcher);\n      checkHits(hits, MAX_DOCS, searcher);\n\n      searcher.close();\n\n      // try a new search with OR\n      searcher = new IndexSearcher(directory, true);\n      hits = null;\n\n      parser = new QueryParser(TEST_VERSION_CURRENT, PRIORITY_FIELD, analyzer);\n\n      query = parser.parse(HIGH_PRIORITY + \" OR \" + MED_PRIORITY);\n      out.println(\"Query: \" + query.toString(PRIORITY_FIELD));\n\n      hits = searcher.search(query, null, MAX_DOCS, sort).scoreDocs;\n      printHits(out, hits, searcher);\n      checkHits(hits, MAX_DOCS, searcher);\n\n      searcher.close();\n      directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"60ba444201d2570214b6fcf1d15600dc1a01f548","date":1313868045,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/TestSearchForDuplicates#doTest(Random,PrintWriter,boolean,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/TestSearchForDuplicates#doTest(Random,PrintWriter,boolean,int).mjava","sourceNew":"  private void doTest(Random random, PrintWriter out, boolean useCompoundFiles, int MAX_DOCS) throws Exception {\n      Directory directory = newDirectory();\n      Analyzer analyzer = new MockAnalyzer(random);\n      IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n      final MergePolicy mp = conf.getMergePolicy();\n      if (mp instanceof LogMergePolicy) {\n        ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFiles);\n      }\n      IndexWriter writer = new IndexWriter(directory, conf);\n      if (VERBOSE) {\n        System.out.println(\"TEST: now build index MAX_DOCS=\" + MAX_DOCS);\n        writer.setInfoStream(System.out);\n      }\n\n      for (int j = 0; j < MAX_DOCS; j++) {\n        Document d = new Document();\n        d.add(newField(PRIORITY_FIELD, HIGH_PRIORITY, Field.Store.YES, Field.Index.ANALYZED));\n        d.add(newField(ID_FIELD, Integer.toString(j), Field.Store.YES, Field.Index.ANALYZED));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      // try a search without OR\n      IndexSearcher searcher = new IndexSearcher(directory, true);\n\n      Query query = new TermQuery(new Term(PRIORITY_FIELD, HIGH_PRIORITY));\n      out.println(\"Query: \" + query.toString(PRIORITY_FIELD));\n      if (VERBOSE) {\n        System.out.println(\"TEST: search query=\" + query);\n      }\n\n      final Sort sort = new Sort(new SortField[] {\n          SortField.FIELD_SCORE,\n          new SortField(ID_FIELD, SortField.Type.INT)});\n\n      ScoreDoc[] hits = searcher.search(query, null, MAX_DOCS, sort).scoreDocs;\n      printHits(out, hits, searcher);\n      checkHits(hits, MAX_DOCS, searcher);\n\n      searcher.close();\n\n      // try a new search with OR\n      searcher = new IndexSearcher(directory, true);\n      hits = null;\n\n      BooleanQuery booleanQuery = new BooleanQuery();\n      booleanQuery.add(new TermQuery(new Term(PRIORITY_FIELD, HIGH_PRIORITY)), BooleanClause.Occur.SHOULD);\n      booleanQuery.add(new TermQuery(new Term(PRIORITY_FIELD, MED_PRIORITY)), BooleanClause.Occur.SHOULD);\n      out.println(\"Query: \" + booleanQuery.toString(PRIORITY_FIELD));\n\n      hits = searcher.search(booleanQuery, null, MAX_DOCS, sort).scoreDocs;\n      printHits(out, hits, searcher);\n      checkHits(hits, MAX_DOCS, searcher);\n\n      searcher.close();\n      directory.close();\n  }\n\n","sourceOld":"  private void doTest(Random random, PrintWriter out, boolean useCompoundFiles, int MAX_DOCS) throws Exception {\n      Directory directory = newDirectory();\n      Analyzer analyzer = new MockAnalyzer(random);\n      IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n      final MergePolicy mp = conf.getMergePolicy();\n      if (mp instanceof LogMergePolicy) {\n        ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFiles);\n      }\n      IndexWriter writer = new IndexWriter(directory, conf);\n      if (VERBOSE) {\n        System.out.println(\"TEST: now build index\");\n        writer.setInfoStream(System.out);\n      }\n\n      for (int j = 0; j < MAX_DOCS; j++) {\n        Document d = new Document();\n        d.add(newField(PRIORITY_FIELD, HIGH_PRIORITY, Field.Store.YES, Field.Index.ANALYZED));\n        d.add(newField(ID_FIELD, Integer.toString(j), Field.Store.YES, Field.Index.ANALYZED));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      // try a search without OR\n      IndexSearcher searcher = new IndexSearcher(directory, true);\n\n      Query query = new TermQuery(new Term(PRIORITY_FIELD, HIGH_PRIORITY));\n      out.println(\"Query: \" + query.toString(PRIORITY_FIELD));\n      if (VERBOSE) {\n        System.out.println(\"TEST: search query=\" + query);\n      }\n\n      final Sort sort = new Sort(new SortField[] {\n          SortField.FIELD_SCORE,\n          new SortField(ID_FIELD, SortField.Type.INT)});\n\n      ScoreDoc[] hits = searcher.search(query, null, MAX_DOCS, sort).scoreDocs;\n      printHits(out, hits, searcher);\n      checkHits(hits, MAX_DOCS, searcher);\n\n      searcher.close();\n\n      // try a new search with OR\n      searcher = new IndexSearcher(directory, true);\n      hits = null;\n\n      BooleanQuery booleanQuery = new BooleanQuery();\n      booleanQuery.add(new TermQuery(new Term(PRIORITY_FIELD, HIGH_PRIORITY)), BooleanClause.Occur.SHOULD);\n      booleanQuery.add(new TermQuery(new Term(PRIORITY_FIELD, MED_PRIORITY)), BooleanClause.Occur.SHOULD);\n      out.println(\"Query: \" + booleanQuery.toString(PRIORITY_FIELD));\n\n      hits = searcher.search(booleanQuery, null, MAX_DOCS, sort).scoreDocs;\n      printHits(out, hits, searcher);\n      checkHits(hits, MAX_DOCS, searcher);\n\n      searcher.close();\n      directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/TestSearchForDuplicates#doTest(Random,PrintWriter,boolean,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/TestSearchForDuplicates#doTest(Random,PrintWriter,boolean,int).mjava","sourceNew":"  private void doTest(Random random, PrintWriter out, boolean useCompoundFiles, int MAX_DOCS) throws Exception {\n      Directory directory = newDirectory();\n      Analyzer analyzer = new MockAnalyzer(random);\n      IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n      final MergePolicy mp = conf.getMergePolicy();\n      if (mp instanceof LogMergePolicy) {\n        ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFiles);\n      }\n      IndexWriter writer = new IndexWriter(directory, conf);\n      if (VERBOSE) {\n        System.out.println(\"TEST: now build index MAX_DOCS=\" + MAX_DOCS);\n        writer.setInfoStream(System.out);\n      }\n\n      for (int j = 0; j < MAX_DOCS; j++) {\n        Document d = new Document();\n        d.add(newField(PRIORITY_FIELD, HIGH_PRIORITY, TextField.TYPE_STORED));\n        d.add(newField(ID_FIELD, Integer.toString(j), TextField.TYPE_STORED));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      // try a search without OR\n      IndexSearcher searcher = new IndexSearcher(directory, true);\n\n      Query query = new TermQuery(new Term(PRIORITY_FIELD, HIGH_PRIORITY));\n      out.println(\"Query: \" + query.toString(PRIORITY_FIELD));\n      if (VERBOSE) {\n        System.out.println(\"TEST: search query=\" + query);\n      }\n\n      final Sort sort = new Sort(new SortField[] {\n          SortField.FIELD_SCORE,\n          new SortField(ID_FIELD, SortField.Type.INT)});\n\n      ScoreDoc[] hits = searcher.search(query, null, MAX_DOCS, sort).scoreDocs;\n      printHits(out, hits, searcher);\n      checkHits(hits, MAX_DOCS, searcher);\n\n      searcher.close();\n\n      // try a new search with OR\n      searcher = new IndexSearcher(directory, true);\n      hits = null;\n\n      BooleanQuery booleanQuery = new BooleanQuery();\n      booleanQuery.add(new TermQuery(new Term(PRIORITY_FIELD, HIGH_PRIORITY)), BooleanClause.Occur.SHOULD);\n      booleanQuery.add(new TermQuery(new Term(PRIORITY_FIELD, MED_PRIORITY)), BooleanClause.Occur.SHOULD);\n      out.println(\"Query: \" + booleanQuery.toString(PRIORITY_FIELD));\n\n      hits = searcher.search(booleanQuery, null, MAX_DOCS, sort).scoreDocs;\n      printHits(out, hits, searcher);\n      checkHits(hits, MAX_DOCS, searcher);\n\n      searcher.close();\n      directory.close();\n  }\n\n","sourceOld":"  private void doTest(Random random, PrintWriter out, boolean useCompoundFiles, int MAX_DOCS) throws Exception {\n      Directory directory = newDirectory();\n      Analyzer analyzer = new MockAnalyzer(random);\n      IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n      final MergePolicy mp = conf.getMergePolicy();\n      if (mp instanceof LogMergePolicy) {\n        ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFiles);\n      }\n      IndexWriter writer = new IndexWriter(directory, conf);\n      if (VERBOSE) {\n        System.out.println(\"TEST: now build index MAX_DOCS=\" + MAX_DOCS);\n        writer.setInfoStream(System.out);\n      }\n\n      for (int j = 0; j < MAX_DOCS; j++) {\n        Document d = new Document();\n        d.add(newField(PRIORITY_FIELD, HIGH_PRIORITY, Field.Store.YES, Field.Index.ANALYZED));\n        d.add(newField(ID_FIELD, Integer.toString(j), Field.Store.YES, Field.Index.ANALYZED));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      // try a search without OR\n      IndexSearcher searcher = new IndexSearcher(directory, true);\n\n      Query query = new TermQuery(new Term(PRIORITY_FIELD, HIGH_PRIORITY));\n      out.println(\"Query: \" + query.toString(PRIORITY_FIELD));\n      if (VERBOSE) {\n        System.out.println(\"TEST: search query=\" + query);\n      }\n\n      final Sort sort = new Sort(new SortField[] {\n          SortField.FIELD_SCORE,\n          new SortField(ID_FIELD, SortField.Type.INT)});\n\n      ScoreDoc[] hits = searcher.search(query, null, MAX_DOCS, sort).scoreDocs;\n      printHits(out, hits, searcher);\n      checkHits(hits, MAX_DOCS, searcher);\n\n      searcher.close();\n\n      // try a new search with OR\n      searcher = new IndexSearcher(directory, true);\n      hits = null;\n\n      BooleanQuery booleanQuery = new BooleanQuery();\n      booleanQuery.add(new TermQuery(new Term(PRIORITY_FIELD, HIGH_PRIORITY)), BooleanClause.Occur.SHOULD);\n      booleanQuery.add(new TermQuery(new Term(PRIORITY_FIELD, MED_PRIORITY)), BooleanClause.Occur.SHOULD);\n      out.println(\"Query: \" + booleanQuery.toString(PRIORITY_FIELD));\n\n      hits = searcher.search(booleanQuery, null, MAX_DOCS, sort).scoreDocs;\n      printHits(out, hits, searcher);\n      checkHits(hits, MAX_DOCS, searcher);\n\n      searcher.close();\n      directory.close();\n  }\n\n","bugFix":null,"bugIntro":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"06584e6e98d592b34e1329b384182f368d2025e8","date":1320850353,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/TestSearchForDuplicates#doTest(Random,PrintWriter,boolean,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/TestSearchForDuplicates#doTest(Random,PrintWriter,boolean,int).mjava","sourceNew":"  private void doTest(Random random, PrintWriter out, boolean useCompoundFiles, int MAX_DOCS) throws Exception {\n      Directory directory = newDirectory();\n      Analyzer analyzer = new MockAnalyzer(random);\n      IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n      final MergePolicy mp = conf.getMergePolicy();\n      if (mp instanceof LogMergePolicy) {\n        ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFiles);\n      }\n      IndexWriter writer = new IndexWriter(directory, conf);\n      if (VERBOSE) {\n        System.out.println(\"TEST: now build index MAX_DOCS=\" + MAX_DOCS);\n      }\n\n      for (int j = 0; j < MAX_DOCS; j++) {\n        Document d = new Document();\n        d.add(newField(PRIORITY_FIELD, HIGH_PRIORITY, TextField.TYPE_STORED));\n        d.add(newField(ID_FIELD, Integer.toString(j), TextField.TYPE_STORED));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      // try a search without OR\n      IndexSearcher searcher = new IndexSearcher(directory, true);\n\n      Query query = new TermQuery(new Term(PRIORITY_FIELD, HIGH_PRIORITY));\n      out.println(\"Query: \" + query.toString(PRIORITY_FIELD));\n      if (VERBOSE) {\n        System.out.println(\"TEST: search query=\" + query);\n      }\n\n      final Sort sort = new Sort(new SortField[] {\n          SortField.FIELD_SCORE,\n          new SortField(ID_FIELD, SortField.Type.INT)});\n\n      ScoreDoc[] hits = searcher.search(query, null, MAX_DOCS, sort).scoreDocs;\n      printHits(out, hits, searcher);\n      checkHits(hits, MAX_DOCS, searcher);\n\n      searcher.close();\n\n      // try a new search with OR\n      searcher = new IndexSearcher(directory, true);\n      hits = null;\n\n      BooleanQuery booleanQuery = new BooleanQuery();\n      booleanQuery.add(new TermQuery(new Term(PRIORITY_FIELD, HIGH_PRIORITY)), BooleanClause.Occur.SHOULD);\n      booleanQuery.add(new TermQuery(new Term(PRIORITY_FIELD, MED_PRIORITY)), BooleanClause.Occur.SHOULD);\n      out.println(\"Query: \" + booleanQuery.toString(PRIORITY_FIELD));\n\n      hits = searcher.search(booleanQuery, null, MAX_DOCS, sort).scoreDocs;\n      printHits(out, hits, searcher);\n      checkHits(hits, MAX_DOCS, searcher);\n\n      searcher.close();\n      directory.close();\n  }\n\n","sourceOld":"  private void doTest(Random random, PrintWriter out, boolean useCompoundFiles, int MAX_DOCS) throws Exception {\n      Directory directory = newDirectory();\n      Analyzer analyzer = new MockAnalyzer(random);\n      IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n      final MergePolicy mp = conf.getMergePolicy();\n      if (mp instanceof LogMergePolicy) {\n        ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFiles);\n      }\n      IndexWriter writer = new IndexWriter(directory, conf);\n      if (VERBOSE) {\n        System.out.println(\"TEST: now build index MAX_DOCS=\" + MAX_DOCS);\n        writer.setInfoStream(System.out);\n      }\n\n      for (int j = 0; j < MAX_DOCS; j++) {\n        Document d = new Document();\n        d.add(newField(PRIORITY_FIELD, HIGH_PRIORITY, TextField.TYPE_STORED));\n        d.add(newField(ID_FIELD, Integer.toString(j), TextField.TYPE_STORED));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      // try a search without OR\n      IndexSearcher searcher = new IndexSearcher(directory, true);\n\n      Query query = new TermQuery(new Term(PRIORITY_FIELD, HIGH_PRIORITY));\n      out.println(\"Query: \" + query.toString(PRIORITY_FIELD));\n      if (VERBOSE) {\n        System.out.println(\"TEST: search query=\" + query);\n      }\n\n      final Sort sort = new Sort(new SortField[] {\n          SortField.FIELD_SCORE,\n          new SortField(ID_FIELD, SortField.Type.INT)});\n\n      ScoreDoc[] hits = searcher.search(query, null, MAX_DOCS, sort).scoreDocs;\n      printHits(out, hits, searcher);\n      checkHits(hits, MAX_DOCS, searcher);\n\n      searcher.close();\n\n      // try a new search with OR\n      searcher = new IndexSearcher(directory, true);\n      hits = null;\n\n      BooleanQuery booleanQuery = new BooleanQuery();\n      booleanQuery.add(new TermQuery(new Term(PRIORITY_FIELD, HIGH_PRIORITY)), BooleanClause.Occur.SHOULD);\n      booleanQuery.add(new TermQuery(new Term(PRIORITY_FIELD, MED_PRIORITY)), BooleanClause.Occur.SHOULD);\n      out.println(\"Query: \" + booleanQuery.toString(PRIORITY_FIELD));\n\n      hits = searcher.search(booleanQuery, null, MAX_DOCS, sort).scoreDocs;\n      printHits(out, hits, searcher);\n      checkHits(hits, MAX_DOCS, searcher);\n\n      searcher.close();\n      directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a3a0403b45dfe384fae4a1b6e96c3265d000c498","date":1321445981,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/TestSearchForDuplicates#doTest(Random,PrintWriter,boolean,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/TestSearchForDuplicates#doTest(Random,PrintWriter,boolean,int).mjava","sourceNew":"  private void doTest(Random random, PrintWriter out, boolean useCompoundFiles, int MAX_DOCS) throws Exception {\n      Directory directory = newDirectory();\n      Analyzer analyzer = new MockAnalyzer(random);\n      IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n      final MergePolicy mp = conf.getMergePolicy();\n      if (mp instanceof LogMergePolicy) {\n        ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFiles);\n      }\n      IndexWriter writer = new IndexWriter(directory, conf);\n      if (VERBOSE) {\n        System.out.println(\"TEST: now build index MAX_DOCS=\" + MAX_DOCS);\n      }\n\n      for (int j = 0; j < MAX_DOCS; j++) {\n        Document d = new Document();\n        d.add(newField(PRIORITY_FIELD, HIGH_PRIORITY, TextField.TYPE_STORED));\n        d.add(newField(ID_FIELD, Integer.toString(j), TextField.TYPE_STORED));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      // try a search without OR\n      IndexReader reader = IndexReader.open(directory);\n      IndexSearcher searcher = new IndexSearcher(reader);\n\n      Query query = new TermQuery(new Term(PRIORITY_FIELD, HIGH_PRIORITY));\n      out.println(\"Query: \" + query.toString(PRIORITY_FIELD));\n      if (VERBOSE) {\n        System.out.println(\"TEST: search query=\" + query);\n      }\n\n      final Sort sort = new Sort(new SortField[] {\n          SortField.FIELD_SCORE,\n          new SortField(ID_FIELD, SortField.Type.INT)});\n\n      ScoreDoc[] hits = searcher.search(query, null, MAX_DOCS, sort).scoreDocs;\n      printHits(out, hits, searcher);\n      checkHits(hits, MAX_DOCS, searcher);\n\n      searcher.close();\n\n      // try a new search with OR\n      searcher = new IndexSearcher(reader);\n      hits = null;\n\n      BooleanQuery booleanQuery = new BooleanQuery();\n      booleanQuery.add(new TermQuery(new Term(PRIORITY_FIELD, HIGH_PRIORITY)), BooleanClause.Occur.SHOULD);\n      booleanQuery.add(new TermQuery(new Term(PRIORITY_FIELD, MED_PRIORITY)), BooleanClause.Occur.SHOULD);\n      out.println(\"Query: \" + booleanQuery.toString(PRIORITY_FIELD));\n\n      hits = searcher.search(booleanQuery, null, MAX_DOCS, sort).scoreDocs;\n      printHits(out, hits, searcher);\n      checkHits(hits, MAX_DOCS, searcher);\n\n      searcher.close();\n      reader.close();\n      directory.close();\n  }\n\n","sourceOld":"  private void doTest(Random random, PrintWriter out, boolean useCompoundFiles, int MAX_DOCS) throws Exception {\n      Directory directory = newDirectory();\n      Analyzer analyzer = new MockAnalyzer(random);\n      IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n      final MergePolicy mp = conf.getMergePolicy();\n      if (mp instanceof LogMergePolicy) {\n        ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFiles);\n      }\n      IndexWriter writer = new IndexWriter(directory, conf);\n      if (VERBOSE) {\n        System.out.println(\"TEST: now build index MAX_DOCS=\" + MAX_DOCS);\n      }\n\n      for (int j = 0; j < MAX_DOCS; j++) {\n        Document d = new Document();\n        d.add(newField(PRIORITY_FIELD, HIGH_PRIORITY, TextField.TYPE_STORED));\n        d.add(newField(ID_FIELD, Integer.toString(j), TextField.TYPE_STORED));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      // try a search without OR\n      IndexSearcher searcher = new IndexSearcher(directory, true);\n\n      Query query = new TermQuery(new Term(PRIORITY_FIELD, HIGH_PRIORITY));\n      out.println(\"Query: \" + query.toString(PRIORITY_FIELD));\n      if (VERBOSE) {\n        System.out.println(\"TEST: search query=\" + query);\n      }\n\n      final Sort sort = new Sort(new SortField[] {\n          SortField.FIELD_SCORE,\n          new SortField(ID_FIELD, SortField.Type.INT)});\n\n      ScoreDoc[] hits = searcher.search(query, null, MAX_DOCS, sort).scoreDocs;\n      printHits(out, hits, searcher);\n      checkHits(hits, MAX_DOCS, searcher);\n\n      searcher.close();\n\n      // try a new search with OR\n      searcher = new IndexSearcher(directory, true);\n      hits = null;\n\n      BooleanQuery booleanQuery = new BooleanQuery();\n      booleanQuery.add(new TermQuery(new Term(PRIORITY_FIELD, HIGH_PRIORITY)), BooleanClause.Occur.SHOULD);\n      booleanQuery.add(new TermQuery(new Term(PRIORITY_FIELD, MED_PRIORITY)), BooleanClause.Occur.SHOULD);\n      out.println(\"Query: \" + booleanQuery.toString(PRIORITY_FIELD));\n\n      hits = searcher.search(booleanQuery, null, MAX_DOCS, sort).scoreDocs;\n      printHits(out, hits, searcher);\n      checkHits(hits, MAX_DOCS, searcher);\n\n      searcher.close();\n      directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0e7c2454a6a8237bfd0e953f5b940838408c9055","date":1323649300,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/TestSearchForDuplicates#doTest(Random,PrintWriter,boolean,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/TestSearchForDuplicates#doTest(Random,PrintWriter,boolean,int).mjava","sourceNew":"  private void doTest(Random random, PrintWriter out, boolean useCompoundFiles, int MAX_DOCS) throws Exception {\n      Directory directory = newDirectory();\n      Analyzer analyzer = new MockAnalyzer(random);\n      IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n      final MergePolicy mp = conf.getMergePolicy();\n      if (mp instanceof LogMergePolicy) {\n        ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFiles);\n      }\n      IndexWriter writer = new IndexWriter(directory, conf);\n      if (VERBOSE) {\n        System.out.println(\"TEST: now build index MAX_DOCS=\" + MAX_DOCS);\n      }\n\n      for (int j = 0; j < MAX_DOCS; j++) {\n        Document d = new Document();\n        d.add(newField(PRIORITY_FIELD, HIGH_PRIORITY, TextField.TYPE_STORED));\n        d.add(newField(ID_FIELD, Integer.toString(j), TextField.TYPE_STORED));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      // try a search without OR\n      IndexReader reader = IndexReader.open(directory);\n      IndexSearcher searcher = new IndexSearcher(reader);\n\n      Query query = new TermQuery(new Term(PRIORITY_FIELD, HIGH_PRIORITY));\n      out.println(\"Query: \" + query.toString(PRIORITY_FIELD));\n      if (VERBOSE) {\n        System.out.println(\"TEST: search query=\" + query);\n      }\n\n      final Sort sort = new Sort(new SortField[] {\n          SortField.FIELD_SCORE,\n          new SortField(ID_FIELD, SortField.Type.INT)});\n\n      ScoreDoc[] hits = searcher.search(query, null, MAX_DOCS, sort).scoreDocs;\n      printHits(out, hits, searcher);\n      checkHits(hits, MAX_DOCS, searcher);\n\n      // try a new search with OR\n      searcher = new IndexSearcher(reader);\n      hits = null;\n\n      BooleanQuery booleanQuery = new BooleanQuery();\n      booleanQuery.add(new TermQuery(new Term(PRIORITY_FIELD, HIGH_PRIORITY)), BooleanClause.Occur.SHOULD);\n      booleanQuery.add(new TermQuery(new Term(PRIORITY_FIELD, MED_PRIORITY)), BooleanClause.Occur.SHOULD);\n      out.println(\"Query: \" + booleanQuery.toString(PRIORITY_FIELD));\n\n      hits = searcher.search(booleanQuery, null, MAX_DOCS, sort).scoreDocs;\n      printHits(out, hits, searcher);\n      checkHits(hits, MAX_DOCS, searcher);\n\n      reader.close();\n      directory.close();\n  }\n\n","sourceOld":"  private void doTest(Random random, PrintWriter out, boolean useCompoundFiles, int MAX_DOCS) throws Exception {\n      Directory directory = newDirectory();\n      Analyzer analyzer = new MockAnalyzer(random);\n      IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n      final MergePolicy mp = conf.getMergePolicy();\n      if (mp instanceof LogMergePolicy) {\n        ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFiles);\n      }\n      IndexWriter writer = new IndexWriter(directory, conf);\n      if (VERBOSE) {\n        System.out.println(\"TEST: now build index MAX_DOCS=\" + MAX_DOCS);\n      }\n\n      for (int j = 0; j < MAX_DOCS; j++) {\n        Document d = new Document();\n        d.add(newField(PRIORITY_FIELD, HIGH_PRIORITY, TextField.TYPE_STORED));\n        d.add(newField(ID_FIELD, Integer.toString(j), TextField.TYPE_STORED));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      // try a search without OR\n      IndexReader reader = IndexReader.open(directory);\n      IndexSearcher searcher = new IndexSearcher(reader);\n\n      Query query = new TermQuery(new Term(PRIORITY_FIELD, HIGH_PRIORITY));\n      out.println(\"Query: \" + query.toString(PRIORITY_FIELD));\n      if (VERBOSE) {\n        System.out.println(\"TEST: search query=\" + query);\n      }\n\n      final Sort sort = new Sort(new SortField[] {\n          SortField.FIELD_SCORE,\n          new SortField(ID_FIELD, SortField.Type.INT)});\n\n      ScoreDoc[] hits = searcher.search(query, null, MAX_DOCS, sort).scoreDocs;\n      printHits(out, hits, searcher);\n      checkHits(hits, MAX_DOCS, searcher);\n\n      searcher.close();\n\n      // try a new search with OR\n      searcher = new IndexSearcher(reader);\n      hits = null;\n\n      BooleanQuery booleanQuery = new BooleanQuery();\n      booleanQuery.add(new TermQuery(new Term(PRIORITY_FIELD, HIGH_PRIORITY)), BooleanClause.Occur.SHOULD);\n      booleanQuery.add(new TermQuery(new Term(PRIORITY_FIELD, MED_PRIORITY)), BooleanClause.Occur.SHOULD);\n      out.println(\"Query: \" + booleanQuery.toString(PRIORITY_FIELD));\n\n      hits = searcher.search(booleanQuery, null, MAX_DOCS, sort).scoreDocs;\n      printHits(out, hits, searcher);\n      checkHits(hits, MAX_DOCS, searcher);\n\n      searcher.close();\n      reader.close();\n      directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","date":1323720782,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/TestSearchForDuplicates#doTest(Random,PrintWriter,boolean,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/TestSearchForDuplicates#doTest(Random,PrintWriter,boolean,int).mjava","sourceNew":"  private void doTest(Random random, PrintWriter out, boolean useCompoundFiles, int MAX_DOCS) throws Exception {\n      Directory directory = newDirectory();\n      Analyzer analyzer = new MockAnalyzer(random);\n      IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n      final MergePolicy mp = conf.getMergePolicy();\n      if (mp instanceof LogMergePolicy) {\n        ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFiles);\n      }\n      IndexWriter writer = new IndexWriter(directory, conf);\n      if (VERBOSE) {\n        System.out.println(\"TEST: now build index MAX_DOCS=\" + MAX_DOCS);\n      }\n\n      for (int j = 0; j < MAX_DOCS; j++) {\n        Document d = new Document();\n        d.add(newField(PRIORITY_FIELD, HIGH_PRIORITY, TextField.TYPE_STORED));\n        d.add(newField(ID_FIELD, Integer.toString(j), TextField.TYPE_STORED));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      // try a search without OR\n      IndexReader reader = IndexReader.open(directory);\n      IndexSearcher searcher = new IndexSearcher(reader);\n\n      Query query = new TermQuery(new Term(PRIORITY_FIELD, HIGH_PRIORITY));\n      out.println(\"Query: \" + query.toString(PRIORITY_FIELD));\n      if (VERBOSE) {\n        System.out.println(\"TEST: search query=\" + query);\n      }\n\n      final Sort sort = new Sort(new SortField[] {\n          SortField.FIELD_SCORE,\n          new SortField(ID_FIELD, SortField.Type.INT)});\n\n      ScoreDoc[] hits = searcher.search(query, null, MAX_DOCS, sort).scoreDocs;\n      printHits(out, hits, searcher);\n      checkHits(hits, MAX_DOCS, searcher);\n\n      // try a new search with OR\n      searcher = new IndexSearcher(reader);\n      hits = null;\n\n      BooleanQuery booleanQuery = new BooleanQuery();\n      booleanQuery.add(new TermQuery(new Term(PRIORITY_FIELD, HIGH_PRIORITY)), BooleanClause.Occur.SHOULD);\n      booleanQuery.add(new TermQuery(new Term(PRIORITY_FIELD, MED_PRIORITY)), BooleanClause.Occur.SHOULD);\n      out.println(\"Query: \" + booleanQuery.toString(PRIORITY_FIELD));\n\n      hits = searcher.search(booleanQuery, null, MAX_DOCS, sort).scoreDocs;\n      printHits(out, hits, searcher);\n      checkHits(hits, MAX_DOCS, searcher);\n\n      reader.close();\n      directory.close();\n  }\n\n","sourceOld":"  private void doTest(Random random, PrintWriter out, boolean useCompoundFiles, int MAX_DOCS) throws Exception {\n      Directory directory = newDirectory();\n      Analyzer analyzer = new MockAnalyzer(random);\n      IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n      final MergePolicy mp = conf.getMergePolicy();\n      if (mp instanceof LogMergePolicy) {\n        ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFiles);\n      }\n      IndexWriter writer = new IndexWriter(directory, conf);\n      if (VERBOSE) {\n        System.out.println(\"TEST: now build index MAX_DOCS=\" + MAX_DOCS);\n      }\n\n      for (int j = 0; j < MAX_DOCS; j++) {\n        Document d = new Document();\n        d.add(newField(PRIORITY_FIELD, HIGH_PRIORITY, TextField.TYPE_STORED));\n        d.add(newField(ID_FIELD, Integer.toString(j), TextField.TYPE_STORED));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      // try a search without OR\n      IndexReader reader = IndexReader.open(directory);\n      IndexSearcher searcher = new IndexSearcher(reader);\n\n      Query query = new TermQuery(new Term(PRIORITY_FIELD, HIGH_PRIORITY));\n      out.println(\"Query: \" + query.toString(PRIORITY_FIELD));\n      if (VERBOSE) {\n        System.out.println(\"TEST: search query=\" + query);\n      }\n\n      final Sort sort = new Sort(new SortField[] {\n          SortField.FIELD_SCORE,\n          new SortField(ID_FIELD, SortField.Type.INT)});\n\n      ScoreDoc[] hits = searcher.search(query, null, MAX_DOCS, sort).scoreDocs;\n      printHits(out, hits, searcher);\n      checkHits(hits, MAX_DOCS, searcher);\n\n      searcher.close();\n\n      // try a new search with OR\n      searcher = new IndexSearcher(reader);\n      hits = null;\n\n      BooleanQuery booleanQuery = new BooleanQuery();\n      booleanQuery.add(new TermQuery(new Term(PRIORITY_FIELD, HIGH_PRIORITY)), BooleanClause.Occur.SHOULD);\n      booleanQuery.add(new TermQuery(new Term(PRIORITY_FIELD, MED_PRIORITY)), BooleanClause.Occur.SHOULD);\n      out.println(\"Query: \" + booleanQuery.toString(PRIORITY_FIELD));\n\n      hits = searcher.search(booleanQuery, null, MAX_DOCS, sort).scoreDocs;\n      printHits(out, hits, searcher);\n      checkHits(hits, MAX_DOCS, searcher);\n\n      searcher.close();\n      reader.close();\n      directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fae06511695f4be0bce5337deb3b3f813d0c3e7c","date":1323890147,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/TestSearchForDuplicates#doTest(Random,PrintWriter,boolean,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/TestSearchForDuplicates#doTest(Random,PrintWriter,boolean,int).mjava","sourceNew":"  private void doTest(Random random, PrintWriter out, boolean useCompoundFiles, int MAX_DOCS) throws Exception {\n      Directory directory = newDirectory();\n      Analyzer analyzer = new MockAnalyzer(random);\n      IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n      final MergePolicy mp = conf.getMergePolicy();\n      if (mp instanceof LogMergePolicy) {\n        ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFiles);\n      }\n      IndexWriter writer = new IndexWriter(directory, conf);\n      if (VERBOSE) {\n        System.out.println(\"TEST: now build index MAX_DOCS=\" + MAX_DOCS);\n      }\n\n      for (int j = 0; j < MAX_DOCS; j++) {\n        Document d = new Document();\n        d.add(newField(PRIORITY_FIELD, HIGH_PRIORITY, TextField.TYPE_STORED));\n        d.add(newField(ID_FIELD, Integer.toString(j), TextField.TYPE_STORED));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      // try a search without OR\n      IndexReader reader = IndexReader.open(directory);\n      IndexSearcher searcher = new IndexSearcher(reader);\n\n      Query query = new TermQuery(new Term(PRIORITY_FIELD, HIGH_PRIORITY));\n      out.println(\"Query: \" + query.toString(PRIORITY_FIELD));\n      if (VERBOSE) {\n        System.out.println(\"TEST: search query=\" + query);\n      }\n\n      final Sort sort = new Sort(SortField.FIELD_SCORE,\n                                 new SortField(ID_FIELD, SortField.Type.INT));\n\n      ScoreDoc[] hits = searcher.search(query, null, MAX_DOCS, sort).scoreDocs;\n      printHits(out, hits, searcher);\n      checkHits(hits, MAX_DOCS, searcher);\n\n      // try a new search with OR\n      searcher = new IndexSearcher(reader);\n      hits = null;\n\n      BooleanQuery booleanQuery = new BooleanQuery();\n      booleanQuery.add(new TermQuery(new Term(PRIORITY_FIELD, HIGH_PRIORITY)), BooleanClause.Occur.SHOULD);\n      booleanQuery.add(new TermQuery(new Term(PRIORITY_FIELD, MED_PRIORITY)), BooleanClause.Occur.SHOULD);\n      out.println(\"Query: \" + booleanQuery.toString(PRIORITY_FIELD));\n\n      hits = searcher.search(booleanQuery, null, MAX_DOCS, sort).scoreDocs;\n      printHits(out, hits, searcher);\n      checkHits(hits, MAX_DOCS, searcher);\n\n      reader.close();\n      directory.close();\n  }\n\n","sourceOld":"  private void doTest(Random random, PrintWriter out, boolean useCompoundFiles, int MAX_DOCS) throws Exception {\n      Directory directory = newDirectory();\n      Analyzer analyzer = new MockAnalyzer(random);\n      IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n      final MergePolicy mp = conf.getMergePolicy();\n      if (mp instanceof LogMergePolicy) {\n        ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFiles);\n      }\n      IndexWriter writer = new IndexWriter(directory, conf);\n      if (VERBOSE) {\n        System.out.println(\"TEST: now build index MAX_DOCS=\" + MAX_DOCS);\n      }\n\n      for (int j = 0; j < MAX_DOCS; j++) {\n        Document d = new Document();\n        d.add(newField(PRIORITY_FIELD, HIGH_PRIORITY, TextField.TYPE_STORED));\n        d.add(newField(ID_FIELD, Integer.toString(j), TextField.TYPE_STORED));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      // try a search without OR\n      IndexReader reader = IndexReader.open(directory);\n      IndexSearcher searcher = new IndexSearcher(reader);\n\n      Query query = new TermQuery(new Term(PRIORITY_FIELD, HIGH_PRIORITY));\n      out.println(\"Query: \" + query.toString(PRIORITY_FIELD));\n      if (VERBOSE) {\n        System.out.println(\"TEST: search query=\" + query);\n      }\n\n      final Sort sort = new Sort(new SortField[] {\n          SortField.FIELD_SCORE,\n          new SortField(ID_FIELD, SortField.Type.INT)});\n\n      ScoreDoc[] hits = searcher.search(query, null, MAX_DOCS, sort).scoreDocs;\n      printHits(out, hits, searcher);\n      checkHits(hits, MAX_DOCS, searcher);\n\n      // try a new search with OR\n      searcher = new IndexSearcher(reader);\n      hits = null;\n\n      BooleanQuery booleanQuery = new BooleanQuery();\n      booleanQuery.add(new TermQuery(new Term(PRIORITY_FIELD, HIGH_PRIORITY)), BooleanClause.Occur.SHOULD);\n      booleanQuery.add(new TermQuery(new Term(PRIORITY_FIELD, MED_PRIORITY)), BooleanClause.Occur.SHOULD);\n      out.println(\"Query: \" + booleanQuery.toString(PRIORITY_FIELD));\n\n      hits = searcher.search(booleanQuery, null, MAX_DOCS, sort).scoreDocs;\n      printHits(out, hits, searcher);\n      checkHits(hits, MAX_DOCS, searcher);\n\n      reader.close();\n      directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/TestSearchForDuplicates#doTest(Random,PrintWriter,boolean,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/TestSearchForDuplicates#doTest(Random,PrintWriter,boolean,int).mjava","sourceNew":"  private void doTest(Random random, PrintWriter out, boolean useCompoundFiles, int MAX_DOCS) throws Exception {\n      Directory directory = newDirectory();\n      Analyzer analyzer = new MockAnalyzer(random);\n      IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n      final MergePolicy mp = conf.getMergePolicy();\n      if (mp instanceof LogMergePolicy) {\n        ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFiles);\n      }\n      IndexWriter writer = new IndexWriter(directory, conf);\n      if (VERBOSE) {\n        System.out.println(\"TEST: now build index MAX_DOCS=\" + MAX_DOCS);\n      }\n\n      for (int j = 0; j < MAX_DOCS; j++) {\n        Document d = new Document();\n        d.add(newField(PRIORITY_FIELD, HIGH_PRIORITY, TextField.TYPE_STORED));\n        d.add(newField(ID_FIELD, Integer.toString(j), TextField.TYPE_STORED));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      // try a search without OR\n      IndexReader reader = IndexReader.open(directory);\n      IndexSearcher searcher = new IndexSearcher(reader);\n\n      Query query = new TermQuery(new Term(PRIORITY_FIELD, HIGH_PRIORITY));\n      out.println(\"Query: \" + query.toString(PRIORITY_FIELD));\n      if (VERBOSE) {\n        System.out.println(\"TEST: search query=\" + query);\n      }\n\n      final Sort sort = new Sort(SortField.FIELD_SCORE,\n                                 new SortField(ID_FIELD, SortField.Type.INT));\n\n      ScoreDoc[] hits = searcher.search(query, null, MAX_DOCS, sort).scoreDocs;\n      printHits(out, hits, searcher);\n      checkHits(hits, MAX_DOCS, searcher);\n\n      // try a new search with OR\n      searcher = new IndexSearcher(reader);\n      hits = null;\n\n      BooleanQuery booleanQuery = new BooleanQuery();\n      booleanQuery.add(new TermQuery(new Term(PRIORITY_FIELD, HIGH_PRIORITY)), BooleanClause.Occur.SHOULD);\n      booleanQuery.add(new TermQuery(new Term(PRIORITY_FIELD, MED_PRIORITY)), BooleanClause.Occur.SHOULD);\n      out.println(\"Query: \" + booleanQuery.toString(PRIORITY_FIELD));\n\n      hits = searcher.search(booleanQuery, null, MAX_DOCS, sort).scoreDocs;\n      printHits(out, hits, searcher);\n      checkHits(hits, MAX_DOCS, searcher);\n\n      reader.close();\n      directory.close();\n  }\n\n","sourceOld":"  private void doTest(Random random, PrintWriter out, boolean useCompoundFiles, int MAX_DOCS) throws Exception {\n      Directory directory = newDirectory();\n      Analyzer analyzer = new MockAnalyzer(random);\n      IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n      final MergePolicy mp = conf.getMergePolicy();\n      if (mp instanceof LogMergePolicy) {\n        ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFiles);\n      }\n      IndexWriter writer = new IndexWriter(directory, conf);\n      if (VERBOSE) {\n        System.out.println(\"TEST: now build index MAX_DOCS=\" + MAX_DOCS);\n      }\n\n      for (int j = 0; j < MAX_DOCS; j++) {\n        Document d = new Document();\n        d.add(newField(PRIORITY_FIELD, HIGH_PRIORITY, TextField.TYPE_STORED));\n        d.add(newField(ID_FIELD, Integer.toString(j), TextField.TYPE_STORED));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      // try a search without OR\n      IndexReader reader = IndexReader.open(directory);\n      IndexSearcher searcher = new IndexSearcher(reader);\n\n      Query query = new TermQuery(new Term(PRIORITY_FIELD, HIGH_PRIORITY));\n      out.println(\"Query: \" + query.toString(PRIORITY_FIELD));\n      if (VERBOSE) {\n        System.out.println(\"TEST: search query=\" + query);\n      }\n\n      final Sort sort = new Sort(SortField.FIELD_SCORE,\n                                 new SortField(ID_FIELD, SortField.Type.INT));\n\n      ScoreDoc[] hits = searcher.search(query, null, MAX_DOCS, sort).scoreDocs;\n      printHits(out, hits, searcher);\n      checkHits(hits, MAX_DOCS, searcher);\n\n      // try a new search with OR\n      searcher = new IndexSearcher(reader);\n      hits = null;\n\n      BooleanQuery booleanQuery = new BooleanQuery();\n      booleanQuery.add(new TermQuery(new Term(PRIORITY_FIELD, HIGH_PRIORITY)), BooleanClause.Occur.SHOULD);\n      booleanQuery.add(new TermQuery(new Term(PRIORITY_FIELD, MED_PRIORITY)), BooleanClause.Occur.SHOULD);\n      out.println(\"Query: \" + booleanQuery.toString(PRIORITY_FIELD));\n\n      hits = searcher.search(booleanQuery, null, MAX_DOCS, sort).scoreDocs;\n      printHits(out, hits, searcher);\n      checkHits(hits, MAX_DOCS, searcher);\n\n      reader.close();\n      directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0762b640e0d0d12b6edb96db68986e13145c3484"],"0762b640e0d0d12b6edb96db68986e13145c3484":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["fae06511695f4be0bce5337deb3b3f813d0c3e7c"],"06584e6e98d592b34e1329b384182f368d2025e8":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":["a3a0403b45dfe384fae4a1b6e96c3265d000c498","0e7c2454a6a8237bfd0e953f5b940838408c9055"],"2553b00f699380c64959ccb27991289aae87be2e":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","090a0320e4de4a3674376aef96b9701f47564f86"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["0762b640e0d0d12b6edb96db68986e13145c3484","112629f1dfd1451722c6047bcf593e6efc96f5f4"],"090a0320e4de4a3674376aef96b9701f47564f86":["0762b640e0d0d12b6edb96db68986e13145c3484"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["2553b00f699380c64959ccb27991289aae87be2e","112629f1dfd1451722c6047bcf593e6efc96f5f4"],"60ba444201d2570214b6fcf1d15600dc1a01f548":["112629f1dfd1451722c6047bcf593e6efc96f5f4"],"0e7c2454a6a8237bfd0e953f5b940838408c9055":["a3a0403b45dfe384fae4a1b6e96c3265d000c498"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0762b640e0d0d12b6edb96db68986e13145c3484"],"a3a0403b45dfe384fae4a1b6e96c3265d000c498":["06584e6e98d592b34e1329b384182f368d2025e8"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["60ba444201d2570214b6fcf1d15600dc1a01f548"],"fae06511695f4be0bce5337deb3b3f813d0c3e7c":["0e7c2454a6a8237bfd0e953f5b940838408c9055"],"112629f1dfd1451722c6047bcf593e6efc96f5f4":["090a0320e4de4a3674376aef96b9701f47564f86"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["2553b00f699380c64959ccb27991289aae87be2e"],"0762b640e0d0d12b6edb96db68986e13145c3484":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","d083e83f225b11e5fdd900e83d26ddb385b6955c","090a0320e4de4a3674376aef96b9701f47564f86","77cf4379b2824f6ea34b091c495d6e95c38ff9e2"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"06584e6e98d592b34e1329b384182f368d2025e8":["a3a0403b45dfe384fae4a1b6e96c3265d000c498"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":[],"2553b00f699380c64959ccb27991289aae87be2e":["817d8435e9135b756f08ce6710ab0baac51bdf88"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"090a0320e4de4a3674376aef96b9701f47564f86":["2553b00f699380c64959ccb27991289aae87be2e","112629f1dfd1451722c6047bcf593e6efc96f5f4"],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"60ba444201d2570214b6fcf1d15600dc1a01f548":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"0e7c2454a6a8237bfd0e953f5b940838408c9055":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","fae06511695f4be0bce5337deb3b3f813d0c3e7c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","0762b640e0d0d12b6edb96db68986e13145c3484","77cf4379b2824f6ea34b091c495d6e95c38ff9e2"],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":[],"a3a0403b45dfe384fae4a1b6e96c3265d000c498":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","0e7c2454a6a8237bfd0e953f5b940838408c9055"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["06584e6e98d592b34e1329b384182f368d2025e8"],"fae06511695f4be0bce5337deb3b3f813d0c3e7c":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"112629f1dfd1451722c6047bcf593e6efc96f5f4":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","60ba444201d2570214b6fcf1d15600dc1a01f548"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","77cf4379b2824f6ea34b091c495d6e95c38ff9e2","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}