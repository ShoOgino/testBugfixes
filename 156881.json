{"path":"src/java/org/apache/solr/request/BaseResponseWriter#write(SingleResponseWriter,SolrQueryRequest,SolrQueryResponse).mjava","commits":[{"id":"1f54d9fd45db3494ecd4bf1c2583d7f65f4dc49a","date":1259147253,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"src/java/org/apache/solr/request/BaseResponseWriter#write(SingleResponseWriter,SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"/dev/null","sourceNew":"  /**\r\n   * \r\n   * The main method that allows users to write {@link SingleResponseWriter}s\r\n   * and provide them as the initial parameter <code>responseWriter</code> to\r\n   * this method which defines how output should be generated.\r\n   * \r\n   * @param responseWriter\r\n   *          The user-provided {@link SingleResponseWriter} implementation.\r\n   * @param request\r\n   *          The provided {@link SolrQueryRequest}.\r\n   * @param response\r\n   *          The provided {@link SolrQueryResponse}.\r\n   * @throws IOException\r\n   *           If any error occurs.\r\n   */\r\n  public void write(SingleResponseWriter responseWriter,\r\n      SolrQueryRequest request, SolrQueryResponse response) throws IOException {\r\n    responseWriter.start();\r\n    NamedList nl = response.getValues();\r\n    for (int i = 0; i < nl.size(); i++) {\r\n      String name = nl.getName(i);\r\n      Object val = nl.getVal(i);\r\n      if (RESPONSE_HEADER.equals(name)) {\r\n        Boolean omitHeader = request.getParams().getBool(CommonParams.OMIT_HEADER);\r\n        if (omitHeader == null || !omitHeader) responseWriter.writeResponseHeader((NamedList) val);\r\n      } else if (val instanceof SolrDocumentList) {\r\n        SolrDocumentList list = (SolrDocumentList) val;\r\n        DocListInfo info = new DocListInfo(list.getNumFound(), list.getStart(),\r\n            list.getMaxScore());\r\n        if (responseWriter.isStreamingDocs()) {\r\n          responseWriter.startDocumentList(info);\r\n          for (SolrDocument solrDocument : list)\r\n            responseWriter.writeDoc(solrDocument);\r\n          responseWriter.endDocumentList();\r\n        } else {\r\n          responseWriter.writeAllDocs(info, list);\r\n        }\r\n      } else if (val instanceof DocList) {\r\n        DocList docList = (DocList) val;\r\n        int sz = docList.size();\r\n        IdxInfo idxInfo = new IdxInfo(request.getSchema(), request\r\n            .getSearcher(), response.getReturnFields());\r\n        DocListInfo info = new DocListInfo(docList.matches(), docList.offset(),\r\n            docList.maxScore());\r\n        DocIterator iterator = docList.iterator();\r\n        if (responseWriter.isStreamingDocs()) {\r\n          responseWriter.startDocumentList(info);\r\n          for (int j = 0; j < sz; j++) {\r\n            SolrDocument sdoc = getDoc(iterator.nextDoc(), idxInfo);\r\n            if (idxInfo.includeScore && docList.hasScores()) {\r\n              sdoc.addField(SCORE_FIELD, iterator.score());\r\n            }\r\n            responseWriter.writeDoc(sdoc);\r\n          }\r\n          responseWriter.end();\r\n        } else {\r\n          ArrayList<SolrDocument> list = new ArrayList<SolrDocument>(docList\r\n              .size());\r\n          for (int j = 0; j < sz; j++) {\r\n            SolrDocument sdoc = getDoc(iterator.nextDoc(), idxInfo);\r\n            if (idxInfo.includeScore && docList.hasScores()) {\r\n              sdoc.addField(SCORE_FIELD, iterator.score());\r\n            }\r\n          }\r\n          responseWriter.writeAllDocs(info, list);\r\n        }\r\n\r\n      } else {\r\n        responseWriter.writeOther(name, val);\r\n\r\n      }\r\n    }\r\n    responseWriter.end();\r\n\r\n  }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"772e46157dc839fe891d541b3e7dac94eae91dfe","date":1259218036,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"src/java/org/apache/solr/request/BaseResponseWriter#write(SingleResponseWriter,SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"src/java/org/apache/solr/request/BaseResponseWriter#write(SingleResponseWriter,SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  /**\r\n   * \r\n   * The main method that allows users to write {@link SingleResponseWriter}s\r\n   * and provide them as the initial parameter <code>responseWriter</code> to\r\n   * this method which defines how output should be generated.\r\n   * \r\n   * @param responseWriter\r\n   *          The user-provided {@link SingleResponseWriter} implementation.\r\n   * @param request\r\n   *          The provided {@link SolrQueryRequest}.\r\n   * @param response\r\n   *          The provided {@link SolrQueryResponse}.\r\n   * @throws IOException\r\n   *           If any error occurs.\r\n   */\r\n  public void write(SingleResponseWriter responseWriter,\r\n      SolrQueryRequest request, SolrQueryResponse response) throws IOException {\r\n    responseWriter.start();\r\n    NamedList nl = response.getValues();\r\n    for (int i = 0; i < nl.size(); i++) {\r\n      String name = nl.getName(i);\r\n      Object val = nl.getVal(i);\r\n      if (\"responseHeader\".equals(name)) {\r\n        Boolean omitHeader = request.getParams().getBool(CommonParams.OMIT_HEADER);\r\n        if (omitHeader == null || !omitHeader) responseWriter.writeResponseHeader((NamedList) val);\r\n      } else if (val instanceof SolrDocumentList) {\r\n        SolrDocumentList list = (SolrDocumentList) val;\r\n        DocListInfo info = new DocListInfo(list.getNumFound(), list.getStart(),\r\n            list.getMaxScore());\r\n        if (responseWriter.isStreamingDocs()) {\r\n          responseWriter.startDocumentList(info);\r\n          for (SolrDocument solrDocument : list)\r\n            responseWriter.writeDoc(solrDocument);\r\n          responseWriter.endDocumentList();\r\n        } else {\r\n          responseWriter.writeAllDocs(info, list);\r\n        }\r\n      } else if (val instanceof DocList) {\r\n        DocList docList = (DocList) val;\r\n        int sz = docList.size();\r\n        IdxInfo idxInfo = new IdxInfo(request.getSchema(), request\r\n            .getSearcher(), response.getReturnFields());\r\n        DocListInfo info = new DocListInfo(docList.matches(), docList.offset(),\r\n            docList.maxScore());\r\n        DocIterator iterator = docList.iterator();\r\n        if (responseWriter.isStreamingDocs()) {\r\n          responseWriter.startDocumentList(info);\r\n          for (int j = 0; j < sz; j++) {\r\n            SolrDocument sdoc = getDoc(iterator.nextDoc(), idxInfo);\r\n            if (idxInfo.includeScore && docList.hasScores()) {\r\n              sdoc.addField(SCORE_FIELD, iterator.score());\r\n            }\r\n            responseWriter.writeDoc(sdoc);\r\n          }\r\n          responseWriter.end();\r\n        } else {\r\n          ArrayList<SolrDocument> list = new ArrayList<SolrDocument>(docList\r\n              .size());\r\n          for (int j = 0; j < sz; j++) {\r\n            SolrDocument sdoc = getDoc(iterator.nextDoc(), idxInfo);\r\n            if (idxInfo.includeScore && docList.hasScores()) {\r\n              sdoc.addField(SCORE_FIELD, iterator.score());\r\n            }\r\n          }\r\n          responseWriter.writeAllDocs(info, list);\r\n        }\r\n\r\n      } else {\r\n        responseWriter.writeOther(name, val);\r\n\r\n      }\r\n    }\r\n    responseWriter.end();\r\n\r\n  }\r\n\n","sourceOld":"  /**\r\n   * \r\n   * The main method that allows users to write {@link SingleResponseWriter}s\r\n   * and provide them as the initial parameter <code>responseWriter</code> to\r\n   * this method which defines how output should be generated.\r\n   * \r\n   * @param responseWriter\r\n   *          The user-provided {@link SingleResponseWriter} implementation.\r\n   * @param request\r\n   *          The provided {@link SolrQueryRequest}.\r\n   * @param response\r\n   *          The provided {@link SolrQueryResponse}.\r\n   * @throws IOException\r\n   *           If any error occurs.\r\n   */\r\n  public void write(SingleResponseWriter responseWriter,\r\n      SolrQueryRequest request, SolrQueryResponse response) throws IOException {\r\n    responseWriter.start();\r\n    NamedList nl = response.getValues();\r\n    for (int i = 0; i < nl.size(); i++) {\r\n      String name = nl.getName(i);\r\n      Object val = nl.getVal(i);\r\n      if (RESPONSE_HEADER.equals(name)) {\r\n        Boolean omitHeader = request.getParams().getBool(CommonParams.OMIT_HEADER);\r\n        if (omitHeader == null || !omitHeader) responseWriter.writeResponseHeader((NamedList) val);\r\n      } else if (val instanceof SolrDocumentList) {\r\n        SolrDocumentList list = (SolrDocumentList) val;\r\n        DocListInfo info = new DocListInfo(list.getNumFound(), list.getStart(),\r\n            list.getMaxScore());\r\n        if (responseWriter.isStreamingDocs()) {\r\n          responseWriter.startDocumentList(info);\r\n          for (SolrDocument solrDocument : list)\r\n            responseWriter.writeDoc(solrDocument);\r\n          responseWriter.endDocumentList();\r\n        } else {\r\n          responseWriter.writeAllDocs(info, list);\r\n        }\r\n      } else if (val instanceof DocList) {\r\n        DocList docList = (DocList) val;\r\n        int sz = docList.size();\r\n        IdxInfo idxInfo = new IdxInfo(request.getSchema(), request\r\n            .getSearcher(), response.getReturnFields());\r\n        DocListInfo info = new DocListInfo(docList.matches(), docList.offset(),\r\n            docList.maxScore());\r\n        DocIterator iterator = docList.iterator();\r\n        if (responseWriter.isStreamingDocs()) {\r\n          responseWriter.startDocumentList(info);\r\n          for (int j = 0; j < sz; j++) {\r\n            SolrDocument sdoc = getDoc(iterator.nextDoc(), idxInfo);\r\n            if (idxInfo.includeScore && docList.hasScores()) {\r\n              sdoc.addField(SCORE_FIELD, iterator.score());\r\n            }\r\n            responseWriter.writeDoc(sdoc);\r\n          }\r\n          responseWriter.end();\r\n        } else {\r\n          ArrayList<SolrDocument> list = new ArrayList<SolrDocument>(docList\r\n              .size());\r\n          for (int j = 0; j < sz; j++) {\r\n            SolrDocument sdoc = getDoc(iterator.nextDoc(), idxInfo);\r\n            if (idxInfo.includeScore && docList.hasScores()) {\r\n              sdoc.addField(SCORE_FIELD, iterator.score());\r\n            }\r\n          }\r\n          responseWriter.writeAllDocs(info, list);\r\n        }\r\n\r\n      } else {\r\n        responseWriter.writeOther(name, val);\r\n\r\n      }\r\n    }\r\n    responseWriter.end();\r\n\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fcef8226ed88cb26f62e9115699a80f8a388758c","date":1259223930,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"src/java/org/apache/solr/request/BaseResponseWriter#write(SingleResponseWriter,SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"src/java/org/apache/solr/request/BaseResponseWriter#write(SingleResponseWriter,SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  /**\r\n   * \r\n   * The main method that allows users to write {@link SingleResponseWriter}s\r\n   * and provide them as the initial parameter <code>responseWriter</code> to\r\n   * this method which defines how output should be generated.\r\n   * \r\n   * @param responseWriter\r\n   *          The user-provided {@link SingleResponseWriter} implementation.\r\n   * @param request\r\n   *          The provided {@link SolrQueryRequest}.\r\n   * @param response\r\n   *          The provided {@link SolrQueryResponse}.\r\n   * @throws IOException\r\n   *           If any error occurs.\r\n   */\r\n  public void write(SingleResponseWriter responseWriter,\r\n      SolrQueryRequest request, SolrQueryResponse response) throws IOException {\r\n    responseWriter.start();\r\n    NamedList nl = response.getValues();\r\n    for (int i = 0; i < nl.size(); i++) {\r\n      String name = nl.getName(i);\r\n      Object val = nl.getVal(i);\r\n      if (\"responseHeader\".equals(name)) {\r\n        Boolean omitHeader = request.getParams().getBool(CommonParams.OMIT_HEADER);\r\n        if (omitHeader == null || !omitHeader) responseWriter.writeResponseHeader((NamedList) val);\r\n      } else if (val instanceof SolrDocumentList) {\r\n        SolrDocumentList list = (SolrDocumentList) val;\r\n        DocListInfo info = new DocListInfo((int)list.getNumFound(), list.size(), (int)list.getStart(), list.getMaxScore());\r\n        if (responseWriter.isStreamingDocs()) {\r\n          responseWriter.startDocumentList(name,info);\r\n          for (SolrDocument solrDocument : list)\r\n            responseWriter.writeDoc(solrDocument);\r\n          responseWriter.endDocumentList();\r\n        } else {\r\n          responseWriter.writeAllDocs(info, list);\r\n        }\r\n      } else if (val instanceof DocList) {\r\n        DocList docList = (DocList) val;\r\n        int sz = docList.size();\r\n        IdxInfo idxInfo = new IdxInfo(request.getSchema(), request\r\n            .getSearcher(), response.getReturnFields());\r\n        DocListInfo info = new DocListInfo(docList.matches(), docList.size(),docList.offset(),\r\n            docList.maxScore());\r\n        DocIterator iterator = docList.iterator();\r\n        if (responseWriter.isStreamingDocs()) {\r\n          responseWriter.startDocumentList(name,info);\r\n          for (int j = 0; j < sz; j++) {\r\n            SolrDocument sdoc = getDoc(iterator.nextDoc(), idxInfo);\r\n            if (idxInfo.includeScore && docList.hasScores()) {\r\n              sdoc.addField(SCORE_FIELD, iterator.score());\r\n            }\r\n            responseWriter.writeDoc(sdoc);\r\n          }\r\n          responseWriter.end();\r\n        } else {\r\n          ArrayList<SolrDocument> list = new ArrayList<SolrDocument>(docList\r\n              .size());\r\n          for (int j = 0; j < sz; j++) {\r\n            SolrDocument sdoc = getDoc(iterator.nextDoc(), idxInfo);\r\n            if (idxInfo.includeScore && docList.hasScores()) {\r\n              sdoc.addField(SCORE_FIELD, iterator.score());\r\n            }\r\n          }\r\n          responseWriter.writeAllDocs(info, list);\r\n        }\r\n\r\n      } else {\r\n        responseWriter.writeOther(name, val);\r\n\r\n      }\r\n    }\r\n    responseWriter.end();\r\n\r\n  }\r\n\n","sourceOld":"  /**\r\n   * \r\n   * The main method that allows users to write {@link SingleResponseWriter}s\r\n   * and provide them as the initial parameter <code>responseWriter</code> to\r\n   * this method which defines how output should be generated.\r\n   * \r\n   * @param responseWriter\r\n   *          The user-provided {@link SingleResponseWriter} implementation.\r\n   * @param request\r\n   *          The provided {@link SolrQueryRequest}.\r\n   * @param response\r\n   *          The provided {@link SolrQueryResponse}.\r\n   * @throws IOException\r\n   *           If any error occurs.\r\n   */\r\n  public void write(SingleResponseWriter responseWriter,\r\n      SolrQueryRequest request, SolrQueryResponse response) throws IOException {\r\n    responseWriter.start();\r\n    NamedList nl = response.getValues();\r\n    for (int i = 0; i < nl.size(); i++) {\r\n      String name = nl.getName(i);\r\n      Object val = nl.getVal(i);\r\n      if (\"responseHeader\".equals(name)) {\r\n        Boolean omitHeader = request.getParams().getBool(CommonParams.OMIT_HEADER);\r\n        if (omitHeader == null || !omitHeader) responseWriter.writeResponseHeader((NamedList) val);\r\n      } else if (val instanceof SolrDocumentList) {\r\n        SolrDocumentList list = (SolrDocumentList) val;\r\n        DocListInfo info = new DocListInfo(list.getNumFound(), list.getStart(),\r\n            list.getMaxScore());\r\n        if (responseWriter.isStreamingDocs()) {\r\n          responseWriter.startDocumentList(info);\r\n          for (SolrDocument solrDocument : list)\r\n            responseWriter.writeDoc(solrDocument);\r\n          responseWriter.endDocumentList();\r\n        } else {\r\n          responseWriter.writeAllDocs(info, list);\r\n        }\r\n      } else if (val instanceof DocList) {\r\n        DocList docList = (DocList) val;\r\n        int sz = docList.size();\r\n        IdxInfo idxInfo = new IdxInfo(request.getSchema(), request\r\n            .getSearcher(), response.getReturnFields());\r\n        DocListInfo info = new DocListInfo(docList.matches(), docList.offset(),\r\n            docList.maxScore());\r\n        DocIterator iterator = docList.iterator();\r\n        if (responseWriter.isStreamingDocs()) {\r\n          responseWriter.startDocumentList(info);\r\n          for (int j = 0; j < sz; j++) {\r\n            SolrDocument sdoc = getDoc(iterator.nextDoc(), idxInfo);\r\n            if (idxInfo.includeScore && docList.hasScores()) {\r\n              sdoc.addField(SCORE_FIELD, iterator.score());\r\n            }\r\n            responseWriter.writeDoc(sdoc);\r\n          }\r\n          responseWriter.end();\r\n        } else {\r\n          ArrayList<SolrDocument> list = new ArrayList<SolrDocument>(docList\r\n              .size());\r\n          for (int j = 0; j < sz; j++) {\r\n            SolrDocument sdoc = getDoc(iterator.nextDoc(), idxInfo);\r\n            if (idxInfo.includeScore && docList.hasScores()) {\r\n              sdoc.addField(SCORE_FIELD, iterator.score());\r\n            }\r\n          }\r\n          responseWriter.writeAllDocs(info, list);\r\n        }\r\n\r\n      } else {\r\n        responseWriter.writeOther(name, val);\r\n\r\n      }\r\n    }\r\n    responseWriter.end();\r\n\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"10b17ff7ad534c3b34a34944d80a87d217011d9c","date":1263262796,"type":5,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/response/BaseResponseWriter#write(SingleResponseWriter,SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"src/java/org/apache/solr/request/BaseResponseWriter#write(SingleResponseWriter,SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  /**\r\n   * \r\n   * The main method that allows users to write {@link SingleResponseWriter}s\r\n   * and provide them as the initial parameter <code>responseWriter</code> to\r\n   * this method which defines how output should be generated.\r\n   * \r\n   * @param responseWriter\r\n   *          The user-provided {@link SingleResponseWriter} implementation.\r\n   * @param request\r\n   *          The provided {@link SolrQueryRequest}.\r\n   * @param response\r\n   *          The provided {@link SolrQueryResponse}.\r\n   * @throws IOException\r\n   *           If any error occurs.\r\n   */\r\n  public void write(SingleResponseWriter responseWriter,\r\n      SolrQueryRequest request, SolrQueryResponse response) throws IOException {\r\n    responseWriter.start();\r\n    NamedList nl = response.getValues();\r\n    for (int i = 0; i < nl.size(); i++) {\r\n      String name = nl.getName(i);\r\n      Object val = nl.getVal(i);\r\n      if (\"responseHeader\".equals(name)) {\r\n        Boolean omitHeader = request.getParams().getBool(CommonParams.OMIT_HEADER);\r\n        if (omitHeader == null || !omitHeader) responseWriter.writeResponseHeader((NamedList) val);\r\n      } else if (val instanceof SolrDocumentList) {\r\n        SolrDocumentList list = (SolrDocumentList) val;\r\n        DocListInfo info = new DocListInfo((int)list.getNumFound(), list.size(), (int)list.getStart(), list.getMaxScore());\r\n        if (responseWriter.isStreamingDocs()) {\r\n          responseWriter.startDocumentList(name,info);\r\n          for (SolrDocument solrDocument : list)\r\n            responseWriter.writeDoc(solrDocument);\r\n          responseWriter.endDocumentList();\r\n        } else {\r\n          responseWriter.writeAllDocs(info, list);\r\n        }\r\n      } else if (val instanceof DocList) {\r\n        DocList docList = (DocList) val;\r\n        int sz = docList.size();\r\n        IdxInfo idxInfo = new IdxInfo(request.getSchema(), request\r\n            .getSearcher(), response.getReturnFields());\r\n        DocListInfo info = new DocListInfo(docList.matches(), docList.size(),docList.offset(),\r\n            docList.maxScore());\r\n        DocIterator iterator = docList.iterator();\r\n        if (responseWriter.isStreamingDocs()) {\r\n          responseWriter.startDocumentList(name,info);\r\n          for (int j = 0; j < sz; j++) {\r\n            SolrDocument sdoc = getDoc(iterator.nextDoc(), idxInfo);\r\n            if (idxInfo.includeScore && docList.hasScores()) {\r\n              sdoc.addField(SCORE_FIELD, iterator.score());\r\n            }\r\n            responseWriter.writeDoc(sdoc);\r\n          }\r\n          responseWriter.end();\r\n        } else {\r\n          ArrayList<SolrDocument> list = new ArrayList<SolrDocument>(docList\r\n              .size());\r\n          for (int j = 0; j < sz; j++) {\r\n            SolrDocument sdoc = getDoc(iterator.nextDoc(), idxInfo);\r\n            if (idxInfo.includeScore && docList.hasScores()) {\r\n              sdoc.addField(SCORE_FIELD, iterator.score());\r\n            }\r\n          }\r\n          responseWriter.writeAllDocs(info, list);\r\n        }\r\n\r\n      } else {\r\n        responseWriter.writeOther(name, val);\r\n\r\n      }\r\n    }\r\n    responseWriter.end();\r\n\r\n  }\r\n\n","sourceOld":"  /**\r\n   * \r\n   * The main method that allows users to write {@link SingleResponseWriter}s\r\n   * and provide them as the initial parameter <code>responseWriter</code> to\r\n   * this method which defines how output should be generated.\r\n   * \r\n   * @param responseWriter\r\n   *          The user-provided {@link SingleResponseWriter} implementation.\r\n   * @param request\r\n   *          The provided {@link SolrQueryRequest}.\r\n   * @param response\r\n   *          The provided {@link SolrQueryResponse}.\r\n   * @throws IOException\r\n   *           If any error occurs.\r\n   */\r\n  public void write(SingleResponseWriter responseWriter,\r\n      SolrQueryRequest request, SolrQueryResponse response) throws IOException {\r\n    responseWriter.start();\r\n    NamedList nl = response.getValues();\r\n    for (int i = 0; i < nl.size(); i++) {\r\n      String name = nl.getName(i);\r\n      Object val = nl.getVal(i);\r\n      if (\"responseHeader\".equals(name)) {\r\n        Boolean omitHeader = request.getParams().getBool(CommonParams.OMIT_HEADER);\r\n        if (omitHeader == null || !omitHeader) responseWriter.writeResponseHeader((NamedList) val);\r\n      } else if (val instanceof SolrDocumentList) {\r\n        SolrDocumentList list = (SolrDocumentList) val;\r\n        DocListInfo info = new DocListInfo((int)list.getNumFound(), list.size(), (int)list.getStart(), list.getMaxScore());\r\n        if (responseWriter.isStreamingDocs()) {\r\n          responseWriter.startDocumentList(name,info);\r\n          for (SolrDocument solrDocument : list)\r\n            responseWriter.writeDoc(solrDocument);\r\n          responseWriter.endDocumentList();\r\n        } else {\r\n          responseWriter.writeAllDocs(info, list);\r\n        }\r\n      } else if (val instanceof DocList) {\r\n        DocList docList = (DocList) val;\r\n        int sz = docList.size();\r\n        IdxInfo idxInfo = new IdxInfo(request.getSchema(), request\r\n            .getSearcher(), response.getReturnFields());\r\n        DocListInfo info = new DocListInfo(docList.matches(), docList.size(),docList.offset(),\r\n            docList.maxScore());\r\n        DocIterator iterator = docList.iterator();\r\n        if (responseWriter.isStreamingDocs()) {\r\n          responseWriter.startDocumentList(name,info);\r\n          for (int j = 0; j < sz; j++) {\r\n            SolrDocument sdoc = getDoc(iterator.nextDoc(), idxInfo);\r\n            if (idxInfo.includeScore && docList.hasScores()) {\r\n              sdoc.addField(SCORE_FIELD, iterator.score());\r\n            }\r\n            responseWriter.writeDoc(sdoc);\r\n          }\r\n          responseWriter.end();\r\n        } else {\r\n          ArrayList<SolrDocument> list = new ArrayList<SolrDocument>(docList\r\n              .size());\r\n          for (int j = 0; j < sz; j++) {\r\n            SolrDocument sdoc = getDoc(iterator.nextDoc(), idxInfo);\r\n            if (idxInfo.includeScore && docList.hasScores()) {\r\n              sdoc.addField(SCORE_FIELD, iterator.score());\r\n            }\r\n          }\r\n          responseWriter.writeAllDocs(info, list);\r\n        }\r\n\r\n      } else {\r\n        responseWriter.writeOther(name, val);\r\n\r\n      }\r\n    }\r\n    responseWriter.end();\r\n\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"772e46157dc839fe891d541b3e7dac94eae91dfe":["1f54d9fd45db3494ecd4bf1c2583d7f65f4dc49a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"10b17ff7ad534c3b34a34944d80a87d217011d9c":["fcef8226ed88cb26f62e9115699a80f8a388758c"],"1f54d9fd45db3494ecd4bf1c2583d7f65f4dc49a":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fcef8226ed88cb26f62e9115699a80f8a388758c":["772e46157dc839fe891d541b3e7dac94eae91dfe"]},"commit2Childs":{"772e46157dc839fe891d541b3e7dac94eae91dfe":["fcef8226ed88cb26f62e9115699a80f8a388758c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["1f54d9fd45db3494ecd4bf1c2583d7f65f4dc49a"],"10b17ff7ad534c3b34a34944d80a87d217011d9c":[],"1f54d9fd45db3494ecd4bf1c2583d7f65f4dc49a":["772e46157dc839fe891d541b3e7dac94eae91dfe"],"fcef8226ed88cb26f62e9115699a80f8a388758c":["10b17ff7ad534c3b34a34944d80a87d217011d9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["10b17ff7ad534c3b34a34944d80a87d217011d9c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}