{"path":"modules/spatial-lucene/src/test/java/org/apache/lucene/spatial/base/context/BaseSpatialContextTestCase#checkArgParser(SpatialContext).mjava","commits":[{"id":"b17c5c53627893d93f9261826cc6d9c447c5ee3a","date":1329777932,"type":0,"author":"David Wayne Smiley","isMerge":false,"pathNew":"modules/spatial-lucene/src/test/java/org/apache/lucene/spatial/base/context/BaseSpatialContextTestCase#checkArgParser(SpatialContext).mjava","pathOld":"/dev/null","sourceNew":"  public static void checkArgParser(SpatialContext ctx) {\n    SpatialArgsParser parser = new SpatialArgsParser();\n\n    String arg = SpatialOperation.IsWithin + \"(-10 -20 10 20)\";\n    SpatialArgs out = parser.parse(arg, ctx);\n    assertEquals(SpatialOperation.IsWithin, out.getOperation());\n    Rectangle bounds = (Rectangle) out.getShape();\n    assertEquals(-10.0, bounds.getMinX(), 0D);\n    assertEquals(10.0, bounds.getMaxX(), 0D);\n\n    // Disjoint should not be scored\n    arg = SpatialOperation.IsDisjointTo + \" (-10 10 -20 20)\";\n    out = parser.parse(arg, ctx);\n    assertEquals(SpatialOperation.IsDisjointTo, out.getOperation());\n\n    try {\n      parser.parse(SpatialOperation.IsDisjointTo + \"[ ]\", ctx);\n      fail(\"spatial operations need args\");\n    }\n    catch (Exception ex) {//expected\n    }\n\n    try {\n      parser.parse(\"XXXX(-10 10 -20 20)\", ctx);\n      fail(\"unknown operation!\");\n    }\n    catch (Exception ex) {//expected\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ef186f4ac90644cd4e8df6b66acb56a52e5ca602","date":1329778037,"type":5,"author":"David Wayne Smiley","isMerge":false,"pathNew":"modules/spatial/src/test/java/org/apache/lucene/spatial/base/context/BaseSpatialContextTestCase#checkArgParser(SpatialContext).mjava","pathOld":"modules/spatial-lucene/src/test/java/org/apache/lucene/spatial/base/context/BaseSpatialContextTestCase#checkArgParser(SpatialContext).mjava","sourceNew":"  public static void checkArgParser(SpatialContext ctx) {\n    SpatialArgsParser parser = new SpatialArgsParser();\n\n    String arg = SpatialOperation.IsWithin + \"(-10 -20 10 20)\";\n    SpatialArgs out = parser.parse(arg, ctx);\n    assertEquals(SpatialOperation.IsWithin, out.getOperation());\n    Rectangle bounds = (Rectangle) out.getShape();\n    assertEquals(-10.0, bounds.getMinX(), 0D);\n    assertEquals(10.0, bounds.getMaxX(), 0D);\n\n    // Disjoint should not be scored\n    arg = SpatialOperation.IsDisjointTo + \" (-10 10 -20 20)\";\n    out = parser.parse(arg, ctx);\n    assertEquals(SpatialOperation.IsDisjointTo, out.getOperation());\n\n    try {\n      parser.parse(SpatialOperation.IsDisjointTo + \"[ ]\", ctx);\n      fail(\"spatial operations need args\");\n    }\n    catch (Exception ex) {//expected\n    }\n\n    try {\n      parser.parse(\"XXXX(-10 10 -20 20)\", ctx);\n      fail(\"unknown operation!\");\n    }\n    catch (Exception ex) {//expected\n    }\n  }\n\n","sourceOld":"  public static void checkArgParser(SpatialContext ctx) {\n    SpatialArgsParser parser = new SpatialArgsParser();\n\n    String arg = SpatialOperation.IsWithin + \"(-10 -20 10 20)\";\n    SpatialArgs out = parser.parse(arg, ctx);\n    assertEquals(SpatialOperation.IsWithin, out.getOperation());\n    Rectangle bounds = (Rectangle) out.getShape();\n    assertEquals(-10.0, bounds.getMinX(), 0D);\n    assertEquals(10.0, bounds.getMaxX(), 0D);\n\n    // Disjoint should not be scored\n    arg = SpatialOperation.IsDisjointTo + \" (-10 10 -20 20)\";\n    out = parser.parse(arg, ctx);\n    assertEquals(SpatialOperation.IsDisjointTo, out.getOperation());\n\n    try {\n      parser.parse(SpatialOperation.IsDisjointTo + \"[ ]\", ctx);\n      fail(\"spatial operations need args\");\n    }\n    catch (Exception ex) {//expected\n    }\n\n    try {\n      parser.parse(\"XXXX(-10 10 -20 20)\", ctx);\n      fail(\"unknown operation!\");\n    }\n    catch (Exception ex) {//expected\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ef186f4ac90644cd4e8df6b66acb56a52e5ca602":["b17c5c53627893d93f9261826cc6d9c447c5ee3a"],"b17c5c53627893d93f9261826cc6d9c447c5ee3a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b17c5c53627893d93f9261826cc6d9c447c5ee3a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ef186f4ac90644cd4e8df6b66acb56a52e5ca602":[],"b17c5c53627893d93f9261826cc6d9c447c5ee3a":["ef186f4ac90644cd4e8df6b66acb56a52e5ca602"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ef186f4ac90644cd4e8df6b66acb56a52e5ca602","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}