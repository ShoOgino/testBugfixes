{"path":"contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestCachedSqlEntityProcessor#doWhereTest(String,Context,MockDataSource,Map).mjava","commits":[{"id":"2a03a1c391a8e16977859a4af2c997bfb4c59b77","date":1238972294,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestCachedSqlEntityProcessor#doWhereTest(String,Context,MockDataSource,Map).mjava","pathOld":"/dev/null","sourceNew":"  private void doWhereTest(String q, Context context, MockDataSource ds, Map xNamespace) {\n    List<Map<String, Object>> rows = new ArrayList<Map<String, Object>>();\n    rows.add(AbstractDataImportHandlerTest.createMap(\"id\", 1, \"desc\", \"one\"));\n    rows.add(AbstractDataImportHandlerTest.createMap(\"id\", 2, \"desc\", \"two\"));\n    rows.add(AbstractDataImportHandlerTest.createMap(\"id\", 2, \"desc\",\n            \"another two\"));\n    rows.add(AbstractDataImportHandlerTest.createMap(\"id\", 3, \"desc\", \"three\"));\n    rows.add(AbstractDataImportHandlerTest.createMap(\"id\", 3, \"desc\",\n            \"another three\"));\n    rows.add(AbstractDataImportHandlerTest.createMap(\"id\", 3, \"desc\",\n            \"another another three\"));\n    MockDataSource.setIterator(q, rows.iterator());\n    CachedSqlEntityProcessor csep = new CachedSqlEntityProcessor();\n    csep.init(context);\n    rows = new ArrayList<Map<String, Object>>();\n    while (true) {\n      Map<String, Object> r = csep.nextRow();\n      if (r == null)\n        break;\n      rows.add(r);\n    }\n    Assert.assertEquals(0, rows.size());\n    ds.close();\n\n    csep.init(context);\n    rows = new ArrayList<Map<String, Object>>();\n    xNamespace.put(\"id\", 2);\n    while (true) {\n      Map<String, Object> r = csep.nextRow();\n      if (r == null)\n        break;\n      rows.add(r);\n    }\n    Assert.assertEquals(2, rows.size());\n\n    csep.init(context);\n    rows = new ArrayList<Map<String, Object>>();\n    xNamespace.put(\"id\", 3);\n    while (true) {\n      Map<String, Object> r = csep.nextRow();\n      if (r == null)\n        break;\n      rows.add(r);\n    }\n    Assert.assertEquals(3, rows.size());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"594d4ee17b3d941ed34827ca6646e378cf7d8d2a","date":1239868870,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestCachedSqlEntityProcessor#doWhereTest(String,Context,MockDataSource,Map).mjava","pathOld":"contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestCachedSqlEntityProcessor#doWhereTest(String,Context,MockDataSource,Map).mjava","sourceNew":"  private void doWhereTest(String q, Context context, MockDataSource ds, Map xNamespace) {\n    List<Map<String, Object>> rows = new ArrayList<Map<String, Object>>();\n    rows.add(AbstractDataImportHandlerTest.createMap(\"id\", 1, \"desc\", \"one\"));\n    rows.add(AbstractDataImportHandlerTest.createMap(\"id\", 2, \"desc\", \"two\"));\n    rows.add(AbstractDataImportHandlerTest.createMap(\"id\", 2, \"desc\",\n            \"another two\"));\n    rows.add(AbstractDataImportHandlerTest.createMap(\"id\", 3, \"desc\", \"three\"));\n    rows.add(AbstractDataImportHandlerTest.createMap(\"id\", 3, \"desc\", \"another three\"));\n    rows.add(AbstractDataImportHandlerTest.createMap(\"id\", 3, \"desc\", \"another another three\"));\n    MockDataSource.setIterator(q, rows.iterator());\n    CachedSqlEntityProcessor csep = new CachedSqlEntityProcessor();\n    csep.init(context);\n    rows = new ArrayList<Map<String, Object>>();\n    while (true) {\n      Map<String, Object> r = csep.nextRow();\n      if (r == null)\n        break;\n      rows.add(r);\n    }\n    Assert.assertEquals(0, rows.size());\n    ds.close();\n\n    csep.init(context);\n    rows = new ArrayList<Map<String, Object>>();\n    xNamespace.put(\"id\", 2);\n    while (true) {\n      Map<String, Object> r = csep.nextRow();\n      if (r == null)\n        break;\n      rows.add(r);\n    }\n    Assert.assertEquals(2, rows.size());\n\n    csep.init(context);\n    rows = new ArrayList<Map<String, Object>>();\n    xNamespace.put(\"id\", 3);\n    while (true) {\n      Map<String, Object> r = csep.nextRow();\n      if (r == null)\n        break;\n      rows.add(r);\n    }\n    Assert.assertEquals(3, rows.size());\n  }\n\n","sourceOld":"  private void doWhereTest(String q, Context context, MockDataSource ds, Map xNamespace) {\n    List<Map<String, Object>> rows = new ArrayList<Map<String, Object>>();\n    rows.add(AbstractDataImportHandlerTest.createMap(\"id\", 1, \"desc\", \"one\"));\n    rows.add(AbstractDataImportHandlerTest.createMap(\"id\", 2, \"desc\", \"two\"));\n    rows.add(AbstractDataImportHandlerTest.createMap(\"id\", 2, \"desc\",\n            \"another two\"));\n    rows.add(AbstractDataImportHandlerTest.createMap(\"id\", 3, \"desc\", \"three\"));\n    rows.add(AbstractDataImportHandlerTest.createMap(\"id\", 3, \"desc\",\n            \"another three\"));\n    rows.add(AbstractDataImportHandlerTest.createMap(\"id\", 3, \"desc\",\n            \"another another three\"));\n    MockDataSource.setIterator(q, rows.iterator());\n    CachedSqlEntityProcessor csep = new CachedSqlEntityProcessor();\n    csep.init(context);\n    rows = new ArrayList<Map<String, Object>>();\n    while (true) {\n      Map<String, Object> r = csep.nextRow();\n      if (r == null)\n        break;\n      rows.add(r);\n    }\n    Assert.assertEquals(0, rows.size());\n    ds.close();\n\n    csep.init(context);\n    rows = new ArrayList<Map<String, Object>>();\n    xNamespace.put(\"id\", 2);\n    while (true) {\n      Map<String, Object> r = csep.nextRow();\n      if (r == null)\n        break;\n      rows.add(r);\n    }\n    Assert.assertEquals(2, rows.size());\n\n    csep.init(context);\n    rows = new ArrayList<Map<String, Object>>();\n    xNamespace.put(\"id\", 3);\n    while (true) {\n      Map<String, Object> r = csep.nextRow();\n      if (r == null)\n        break;\n      rows.add(r);\n    }\n    Assert.assertEquals(3, rows.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"758fdd153bb361b47f22db79ace6af6f6b7b9330","date":1240213015,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestCachedSqlEntityProcessor#doWhereTest(String,Context,MockDataSource,Map).mjava","pathOld":"contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestCachedSqlEntityProcessor#doWhereTest(String,Context,MockDataSource,Map).mjava","sourceNew":"  private void doWhereTest(String q, Context context, MockDataSource ds, Map xNamespace) {\n    List<Map<String, Object>> rows = new ArrayList<Map<String, Object>>();\n    rows.add(AbstractDataImportHandlerTest.createMap(\"id\", 1, \"desc\", \"one\"));\n    rows.add(AbstractDataImportHandlerTest.createMap(\"id\", 2, \"desc\", \"two\"));\n    rows.add(AbstractDataImportHandlerTest.createMap(\"id\", 2, \"desc\",\n            \"another two\"));\n    rows.add(AbstractDataImportHandlerTest.createMap(\"id\", 3, \"desc\", \"three\"));\n    rows.add(AbstractDataImportHandlerTest.createMap(\"id\", 3, \"desc\", \"another three\"));\n    rows.add(AbstractDataImportHandlerTest.createMap(\"id\", 3, \"desc\", \"another another three\"));\n    MockDataSource.setIterator(q, rows.iterator());\n    EntityProcessor csep = new EntityProcessorWrapper(new CachedSqlEntityProcessor(), null);\n    csep.init(context);\n    rows = new ArrayList<Map<String, Object>>();\n    while (true) {\n      Map<String, Object> r = csep.nextRow();\n      if (r == null)\n        break;\n      rows.add(r);\n    }\n    Assert.assertEquals(0, rows.size());\n    ds.close();\n\n    csep.init(context);\n    rows = new ArrayList<Map<String, Object>>();\n    xNamespace.put(\"id\", 2);\n    while (true) {\n      Map<String, Object> r = csep.nextRow();\n      if (r == null)\n        break;\n      rows.add(r);\n    }\n    Assert.assertEquals(2, rows.size());\n\n    csep.init(context);\n    rows = new ArrayList<Map<String, Object>>();\n    xNamespace.put(\"id\", 3);\n    while (true) {\n      Map<String, Object> r = csep.nextRow();\n      if (r == null)\n        break;\n      rows.add(r);\n    }\n    Assert.assertEquals(3, rows.size());\n  }\n\n","sourceOld":"  private void doWhereTest(String q, Context context, MockDataSource ds, Map xNamespace) {\n    List<Map<String, Object>> rows = new ArrayList<Map<String, Object>>();\n    rows.add(AbstractDataImportHandlerTest.createMap(\"id\", 1, \"desc\", \"one\"));\n    rows.add(AbstractDataImportHandlerTest.createMap(\"id\", 2, \"desc\", \"two\"));\n    rows.add(AbstractDataImportHandlerTest.createMap(\"id\", 2, \"desc\",\n            \"another two\"));\n    rows.add(AbstractDataImportHandlerTest.createMap(\"id\", 3, \"desc\", \"three\"));\n    rows.add(AbstractDataImportHandlerTest.createMap(\"id\", 3, \"desc\", \"another three\"));\n    rows.add(AbstractDataImportHandlerTest.createMap(\"id\", 3, \"desc\", \"another another three\"));\n    MockDataSource.setIterator(q, rows.iterator());\n    CachedSqlEntityProcessor csep = new CachedSqlEntityProcessor();\n    csep.init(context);\n    rows = new ArrayList<Map<String, Object>>();\n    while (true) {\n      Map<String, Object> r = csep.nextRow();\n      if (r == null)\n        break;\n      rows.add(r);\n    }\n    Assert.assertEquals(0, rows.size());\n    ds.close();\n\n    csep.init(context);\n    rows = new ArrayList<Map<String, Object>>();\n    xNamespace.put(\"id\", 2);\n    while (true) {\n      Map<String, Object> r = csep.nextRow();\n      if (r == null)\n        break;\n      rows.add(r);\n    }\n    Assert.assertEquals(2, rows.size());\n\n    csep.init(context);\n    rows = new ArrayList<Map<String, Object>>();\n    xNamespace.put(\"id\", 3);\n    while (true) {\n      Map<String, Object> r = csep.nextRow();\n      if (r == null)\n        break;\n      rows.add(r);\n    }\n    Assert.assertEquals(3, rows.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestCachedSqlEntityProcessor#doWhereTest(String,Context,MockDataSource,Map).mjava","pathOld":"contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestCachedSqlEntityProcessor#doWhereTest(String,Context,MockDataSource,Map).mjava","sourceNew":"  private void doWhereTest(String q, Context context, MockDataSource ds, Map xNamespace) {\n    List<Map<String, Object>> rows = new ArrayList<Map<String, Object>>();\n    rows.add(AbstractDataImportHandlerTest.createMap(\"id\", 1, \"desc\", \"one\"));\n    rows.add(AbstractDataImportHandlerTest.createMap(\"id\", 2, \"desc\", \"two\"));\n    rows.add(AbstractDataImportHandlerTest.createMap(\"id\", 2, \"desc\",\n            \"another two\"));\n    rows.add(AbstractDataImportHandlerTest.createMap(\"id\", 3, \"desc\", \"three\"));\n    rows.add(AbstractDataImportHandlerTest.createMap(\"id\", 3, \"desc\", \"another three\"));\n    rows.add(AbstractDataImportHandlerTest.createMap(\"id\", 3, \"desc\", \"another another three\"));\n    MockDataSource.setIterator(q, rows.iterator());\n    EntityProcessor csep = new EntityProcessorWrapper(new CachedSqlEntityProcessor(), null);\n    csep.init(context);\n    rows = new ArrayList<Map<String, Object>>();\n    while (true) {\n      Map<String, Object> r = csep.nextRow();\n      if (r == null)\n        break;\n      rows.add(r);\n    }\n    Assert.assertEquals(0, rows.size());\n    ds.close();\n\n    csep.init(context);\n    rows = new ArrayList<Map<String, Object>>();\n    xNamespace.put(\"id\", 2);\n    while (true) {\n      Map<String, Object> r = csep.nextRow();\n      if (r == null)\n        break;\n      rows.add(r);\n    }\n    Assert.assertEquals(2, rows.size());\n\n    csep.init(context);\n    rows = new ArrayList<Map<String, Object>>();\n    xNamespace.put(\"id\", 3);\n    while (true) {\n      Map<String, Object> r = csep.nextRow();\n      if (r == null)\n        break;\n      rows.add(r);\n    }\n    Assert.assertEquals(3, rows.size());\n  }\n\n","sourceOld":"  private void doWhereTest(String q, Context context, MockDataSource ds, Map xNamespace) {\n    List<Map<String, Object>> rows = new ArrayList<Map<String, Object>>();\n    rows.add(AbstractDataImportHandlerTest.createMap(\"id\", 1, \"desc\", \"one\"));\n    rows.add(AbstractDataImportHandlerTest.createMap(\"id\", 2, \"desc\", \"two\"));\n    rows.add(AbstractDataImportHandlerTest.createMap(\"id\", 2, \"desc\",\n            \"another two\"));\n    rows.add(AbstractDataImportHandlerTest.createMap(\"id\", 3, \"desc\", \"three\"));\n    rows.add(AbstractDataImportHandlerTest.createMap(\"id\", 3, \"desc\", \"another three\"));\n    rows.add(AbstractDataImportHandlerTest.createMap(\"id\", 3, \"desc\", \"another another three\"));\n    MockDataSource.setIterator(q, rows.iterator());\n    EntityProcessor csep = new EntityProcessorWrapper(new CachedSqlEntityProcessor(), null);\n    csep.init(context);\n    rows = new ArrayList<Map<String, Object>>();\n    while (true) {\n      Map<String, Object> r = csep.nextRow();\n      if (r == null)\n        break;\n      rows.add(r);\n    }\n    Assert.assertEquals(0, rows.size());\n    ds.close();\n\n    csep.init(context);\n    rows = new ArrayList<Map<String, Object>>();\n    xNamespace.put(\"id\", 2);\n    while (true) {\n      Map<String, Object> r = csep.nextRow();\n      if (r == null)\n        break;\n      rows.add(r);\n    }\n    Assert.assertEquals(2, rows.size());\n\n    csep.init(context);\n    rows = new ArrayList<Map<String, Object>>();\n    xNamespace.put(\"id\", 3);\n    while (true) {\n      Map<String, Object> r = csep.nextRow();\n      if (r == null)\n        break;\n      rows.add(r);\n    }\n    Assert.assertEquals(3, rows.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"758fdd153bb361b47f22db79ace6af6f6b7b9330":["594d4ee17b3d941ed34827ca6646e378cf7d8d2a"],"2a03a1c391a8e16977859a4af2c997bfb4c59b77":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"ad94625fb8d088209f46650c8097196fec67f00c":["758fdd153bb361b47f22db79ace6af6f6b7b9330"],"594d4ee17b3d941ed34827ca6646e378cf7d8d2a":["2a03a1c391a8e16977859a4af2c997bfb4c59b77"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["2a03a1c391a8e16977859a4af2c997bfb4c59b77"],"758fdd153bb361b47f22db79ace6af6f6b7b9330":["ad94625fb8d088209f46650c8097196fec67f00c"],"2a03a1c391a8e16977859a4af2c997bfb4c59b77":["594d4ee17b3d941ed34827ca6646e378cf7d8d2a"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"594d4ee17b3d941ed34827ca6646e378cf7d8d2a":["758fdd153bb361b47f22db79ace6af6f6b7b9330"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}