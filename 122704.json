{"path":"src/test/org/apache/lucene/index/TestBackwardsCompatibility#testHits(ScoreDoc[],int,IndexReader).mjava","commits":[{"id":"5af07783dbc171e26a694c4f7d735e30c2769faa","date":1211569075,"type":1,"author":"Michael Busch","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestBackwardsCompatibility#testHits(ScoreDoc[],int,IndexReader).mjava","pathOld":"src/test/org/apache/lucene/index/TestBackwardsCompatibility#testHits(Hits,int,IndexReader).mjava","sourceNew":"  private void testHits(ScoreDoc[] hits, int expectedCount, IndexReader reader) throws IOException {\n    final int hitCount = hits.length;\n    assertEquals(\"wrong number of hits\", expectedCount, hitCount);\n    for(int i=0;i<hitCount;i++) {\n      reader.document(hits[i].doc);\n      reader.getTermFreqVectors(hits[i].doc);\n    }\n  }\n\n","sourceOld":"  private void testHits(Hits hits, int expectedCount, IndexReader reader) throws IOException {\n    final int hitCount = hits.length();\n    assertEquals(\"wrong number of hits\", expectedCount, hitCount);\n    for(int i=0;i<hitCount;i++) {\n      hits.doc(i);\n      reader.getTermFreqVectors(hits.id(i));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e8d1458a2543cbd30cbfe7929be4dcb5c5251659","date":1254582241,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"src/test/org/apache/lucene/index/TestBackwardsCompatibility#testHits(ScoreDoc[],int,IndexReader).mjava","sourceNew":null,"sourceOld":"  private void testHits(ScoreDoc[] hits, int expectedCount, IndexReader reader) throws IOException {\n    final int hitCount = hits.length;\n    assertEquals(\"wrong number of hits\", expectedCount, hitCount);\n    for(int i=0;i<hitCount;i++) {\n      reader.document(hits[i].doc);\n      reader.getTermFreqVectors(hits[i].doc);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a046c0c310bc77931fc8441bd920053b607dd14","date":1254584734,"type":4,"author":"Uwe Schindler","isMerge":true,"pathNew":"/dev/null","pathOld":"src/test/org/apache/lucene/index/TestBackwardsCompatibility#testHits(ScoreDoc[],int,IndexReader).mjava","sourceNew":null,"sourceOld":"  private void testHits(ScoreDoc[] hits, int expectedCount, IndexReader reader) throws IOException {\n    final int hitCount = hits.length;\n    assertEquals(\"wrong number of hits\", expectedCount, hitCount);\n    for(int i=0;i<hitCount;i++) {\n      reader.document(hits[i].doc);\n      reader.getTermFreqVectors(hits[i].doc);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f1b736248cf13d8c143d4af78b588926f4151240","date":1254825163,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestBackwardsCompatibility#testHits(ScoreDoc[],int,IndexReader).mjava","pathOld":"/dev/null","sourceNew":"  private void testHits(ScoreDoc[] hits, int expectedCount, IndexReader reader) throws IOException {\n    final int hitCount = hits.length;\n    assertEquals(\"wrong number of hits\", expectedCount, hitCount);\n    for(int i=0;i<hitCount;i++) {\n      reader.document(hits[i].doc);\n      reader.getTermFreqVectors(hits[i].doc);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9a4b98263fc6c77bb5eb34f7c3e9fd7542b9650","date":1254831793,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"src/test/org/apache/lucene/index/TestBackwardsCompatibility#testHits(ScoreDoc[],int,IndexReader).mjava","sourceNew":null,"sourceOld":"  private void testHits(ScoreDoc[] hits, int expectedCount, IndexReader reader) throws IOException {\n    final int hitCount = hits.length;\n    assertEquals(\"wrong number of hits\", expectedCount, hitCount);\n    for(int i=0;i<hitCount;i++) {\n      reader.document(hits[i].doc);\n      reader.getTermFreqVectors(hits[i].doc);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c5c0bd3bf61809aea862d848dcf2119d3b9c38bf","date":1254831905,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestBackwardsCompatibility#testHits(ScoreDoc[],int,IndexReader).mjava","pathOld":"/dev/null","sourceNew":"  private void testHits(ScoreDoc[] hits, int expectedCount, IndexReader reader) throws IOException {\n    final int hitCount = hits.length;\n    assertEquals(\"wrong number of hits\", expectedCount, hitCount);\n    for(int i=0;i<hitCount;i++) {\n      reader.document(hits[i].doc);\n      reader.getTermFreqVectors(hits[i].doc);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testHits(ScoreDoc[],int,IndexReader).mjava","pathOld":"src/test/org/apache/lucene/index/TestBackwardsCompatibility#testHits(ScoreDoc[],int,IndexReader).mjava","sourceNew":"  private void testHits(ScoreDoc[] hits, int expectedCount, IndexReader reader) throws IOException {\n    final int hitCount = hits.length;\n    assertEquals(\"wrong number of hits\", expectedCount, hitCount);\n    for(int i=0;i<hitCount;i++) {\n      reader.document(hits[i].doc);\n      reader.getTermFreqVectors(hits[i].doc);\n    }\n  }\n\n","sourceOld":"  private void testHits(ScoreDoc[] hits, int expectedCount, IndexReader reader) throws IOException {\n    final int hitCount = hits.length;\n    assertEquals(\"wrong number of hits\", expectedCount, hitCount);\n    for(int i=0;i<hitCount;i++) {\n      reader.document(hits[i].doc);\n      reader.getTermFreqVectors(hits[i].doc);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a9a4b98263fc6c77bb5eb34f7c3e9fd7542b9650":["f1b736248cf13d8c143d4af78b588926f4151240"],"f1b736248cf13d8c143d4af78b588926f4151240":["0a046c0c310bc77931fc8441bd920053b607dd14"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["5af07783dbc171e26a694c4f7d735e30c2769faa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0a046c0c310bc77931fc8441bd920053b607dd14":["5af07783dbc171e26a694c4f7d735e30c2769faa","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"5af07783dbc171e26a694c4f7d735e30c2769faa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c5c0bd3bf61809aea862d848dcf2119d3b9c38bf":["a9a4b98263fc6c77bb5eb34f7c3e9fd7542b9650"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["c5c0bd3bf61809aea862d848dcf2119d3b9c38bf"]},"commit2Childs":{"a9a4b98263fc6c77bb5eb34f7c3e9fd7542b9650":["c5c0bd3bf61809aea862d848dcf2119d3b9c38bf"],"f1b736248cf13d8c143d4af78b588926f4151240":["a9a4b98263fc6c77bb5eb34f7c3e9fd7542b9650"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["0a046c0c310bc77931fc8441bd920053b607dd14"],"0a046c0c310bc77931fc8441bd920053b607dd14":["f1b736248cf13d8c143d4af78b588926f4151240"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5af07783dbc171e26a694c4f7d735e30c2769faa"],"5af07783dbc171e26a694c4f7d735e30c2769faa":["e8d1458a2543cbd30cbfe7929be4dcb5c5251659","0a046c0c310bc77931fc8441bd920053b607dd14"],"c5c0bd3bf61809aea862d848dcf2119d3b9c38bf":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}