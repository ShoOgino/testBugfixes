{"path":"lucene/contrib/misc/src/test/org/apache/lucene/index/TestNRTManager#doAfterWriter(ExecutorService).mjava","commits":[{"id":"edcc2c2cbab6bf89ea584169ffb3ca83a31827f9","date":1316963893,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/contrib/misc/src/test/org/apache/lucene/index/TestNRTManager#doAfterWriter(ExecutorService).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  protected void doAfterWriter(ExecutorService es) throws Exception {\n    final double minReopenSec = 0.01 + 0.05 * random.nextDouble();\n    final double maxReopenSec = minReopenSec * (1.0 + 10 * random.nextDouble());\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: make NRTManager maxReopenSec=\" + maxReopenSec + \" minReopenSec=\" + minReopenSec);\n    }\n\n    nrt = new NRTManager(writer, es,\n                         new SearcherWarmer() {\n                           @Override\n                           public void warm(IndexSearcher s) throws IOException {\n                             TestNRTManager.this.warmCalled = true;\n                             s.search(new TermQuery(new Term(\"body\", \"united\")), 10);\n                           }\n                         });\n    nrtThread = new NRTManagerReopenThread(nrt, maxReopenSec, minReopenSec);\n    nrtThread.setName(\"NRT Reopen Thread\");\n    nrtThread.setPriority(Math.min(Thread.currentThread().getPriority()+2, Thread.MAX_PRIORITY));\n    nrtThread.setDaemon(true);\n    nrtThread.start();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"606baff722a317c76a92b111d183b54b6e6e5741","date":1317974711,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/contrib/misc/src/test/org/apache/lucene/index/TestNRTManager#doAfterWriter(ExecutorService).mjava","pathOld":"lucene/contrib/misc/src/test/org/apache/lucene/index/TestNRTManager#doAfterWriter(ExecutorService).mjava","sourceNew":"  @Override\n  protected void doAfterWriter(ExecutorService es) throws Exception {\n    final double minReopenSec = 0.01 + 0.05 * random.nextDouble();\n    final double maxReopenSec = minReopenSec * (1.0 + 10 * random.nextDouble());\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: make NRTManager maxReopenSec=\" + maxReopenSec + \" minReopenSec=\" + minReopenSec);\n    }\n\n    nrt = new NRTManager(writer, es,\n                         new SearcherWarmer() {\n                           @Override\n                           public void warm(IndexSearcher s) throws IOException {\n                             TestNRTManager.this.warmCalled = true;\n                             s.search(new TermQuery(new Term(\"body\", \"united\")), 10);\n                           }\n                         }, false);\n                         \n    nrtThread = new NRTManagerReopenThread(nrt, maxReopenSec, minReopenSec);\n    nrtThread.setName(\"NRT Reopen Thread\");\n    nrtThread.setPriority(Math.min(Thread.currentThread().getPriority()+2, Thread.MAX_PRIORITY));\n    nrtThread.setDaemon(true);\n    nrtThread.start();\n  }\n\n","sourceOld":"  @Override\n  protected void doAfterWriter(ExecutorService es) throws Exception {\n    final double minReopenSec = 0.01 + 0.05 * random.nextDouble();\n    final double maxReopenSec = minReopenSec * (1.0 + 10 * random.nextDouble());\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: make NRTManager maxReopenSec=\" + maxReopenSec + \" minReopenSec=\" + minReopenSec);\n    }\n\n    nrt = new NRTManager(writer, es,\n                         new SearcherWarmer() {\n                           @Override\n                           public void warm(IndexSearcher s) throws IOException {\n                             TestNRTManager.this.warmCalled = true;\n                             s.search(new TermQuery(new Term(\"body\", \"united\")), 10);\n                           }\n                         });\n    nrtThread = new NRTManagerReopenThread(nrt, maxReopenSec, minReopenSec);\n    nrtThread.setName(\"NRT Reopen Thread\");\n    nrtThread.setPriority(Math.min(Thread.currentThread().getPriority()+2, Thread.MAX_PRIORITY));\n    nrtThread.setDaemon(true);\n    nrtThread.start();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"df16fc2e9b615e0138edac46655ae628f5d098ad","date":1320876869,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestNRTManager#doAfterWriter(ExecutorService).mjava","pathOld":"lucene/contrib/misc/src/test/org/apache/lucene/index/TestNRTManager#doAfterWriter(ExecutorService).mjava","sourceNew":"  @Override\n  protected void doAfterWriter(ExecutorService es) throws Exception {\n    final double minReopenSec = 0.01 + 0.05 * random.nextDouble();\n    final double maxReopenSec = minReopenSec * (1.0 + 10 * random.nextDouble());\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: make NRTManager maxReopenSec=\" + maxReopenSec + \" minReopenSec=\" + minReopenSec);\n    }\n\n    nrt = new NRTManager(writer, es,\n                         new SearcherWarmer() {\n                           @Override\n                           public void warm(IndexSearcher s) throws IOException {\n                             TestNRTManager.this.warmCalled = true;\n                             s.search(new TermQuery(new Term(\"body\", \"united\")), 10);\n                           }\n                         }, false);\n                         \n    nrtThread = new NRTManagerReopenThread(nrt, maxReopenSec, minReopenSec);\n    nrtThread.setName(\"NRT Reopen Thread\");\n    nrtThread.setPriority(Math.min(Thread.currentThread().getPriority()+2, Thread.MAX_PRIORITY));\n    nrtThread.setDaemon(true);\n    nrtThread.start();\n  }\n\n","sourceOld":"  @Override\n  protected void doAfterWriter(ExecutorService es) throws Exception {\n    final double minReopenSec = 0.01 + 0.05 * random.nextDouble();\n    final double maxReopenSec = minReopenSec * (1.0 + 10 * random.nextDouble());\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: make NRTManager maxReopenSec=\" + maxReopenSec + \" minReopenSec=\" + minReopenSec);\n    }\n\n    nrt = new NRTManager(writer, es,\n                         new SearcherWarmer() {\n                           @Override\n                           public void warm(IndexSearcher s) throws IOException {\n                             TestNRTManager.this.warmCalled = true;\n                             s.search(new TermQuery(new Term(\"body\", \"united\")), 10);\n                           }\n                         }, false);\n                         \n    nrtThread = new NRTManagerReopenThread(nrt, maxReopenSec, minReopenSec);\n    nrtThread.setName(\"NRT Reopen Thread\");\n    nrtThread.setPriority(Math.min(Thread.currentThread().getPriority()+2, Thread.MAX_PRIORITY));\n    nrtThread.setDaemon(true);\n    nrtThread.start();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"df16fc2e9b615e0138edac46655ae628f5d098ad":["606baff722a317c76a92b111d183b54b6e6e5741"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"edcc2c2cbab6bf89ea584169ffb3ca83a31827f9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"606baff722a317c76a92b111d183b54b6e6e5741":["edcc2c2cbab6bf89ea584169ffb3ca83a31827f9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["df16fc2e9b615e0138edac46655ae628f5d098ad"]},"commit2Childs":{"df16fc2e9b615e0138edac46655ae628f5d098ad":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["edcc2c2cbab6bf89ea584169ffb3ca83a31827f9"],"edcc2c2cbab6bf89ea584169ffb3ca83a31827f9":["606baff722a317c76a92b111d183b54b6e6e5741"],"606baff722a317c76a92b111d183b54b6e6e5741":["df16fc2e9b615e0138edac46655ae628f5d098ad"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}