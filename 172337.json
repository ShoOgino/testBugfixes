{"path":"lucene/src/java/org/apache/lucene/index/IndexWriter#addDocument(Document,Analyzer).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#addDocument(Document,Analyzer).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#addDocument(Document,Analyzer).mjava","sourceNew":"  /**\n   * Adds a document to this index, using the provided analyzer instead of the\n   * value of {@link #getAnalyzer()}.  If the document contains more than\n   * {@link #setMaxFieldLength(int)} terms for a given field, the remainder are\n   * discarded.\n   *\n   * <p>See {@link #addDocument(Document)} for details on\n   * index and IndexWriter state after an Exception, and\n   * flushing/merging temporary free space requirements.</p>\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public void addDocument(Document doc, Analyzer analyzer) throws CorruptIndexException, IOException {\n    ensureOpen();\n    boolean doFlush = false;\n    boolean success = false;\n    try {\n      try {\n        doFlush = docWriter.addDocument(doc, analyzer);\n        success = true;\n      } finally {\n        if (!success) {\n\n          if (infoStream != null)\n            message(\"hit exception adding document\");\n\n          synchronized (this) {\n            // If docWriter has some aborted files that were\n            // never incref'd, then we clean them up here\n            if (docWriter != null) {\n              final Collection<String> files = docWriter.abortedFiles();\n              if (files != null)\n                deleter.deleteNewFiles(files);\n            }\n          }\n        }\n      }\n      if (doFlush)\n        flush(true, false, false);\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"addDocument\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Adds a document to this index, using the provided analyzer instead of the\n   * value of {@link #getAnalyzer()}.  If the document contains more than\n   * {@link #setMaxFieldLength(int)} terms for a given field, the remainder are\n   * discarded.\n   *\n   * <p>See {@link #addDocument(Document)} for details on\n   * index and IndexWriter state after an Exception, and\n   * flushing/merging temporary free space requirements.</p>\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public void addDocument(Document doc, Analyzer analyzer) throws CorruptIndexException, IOException {\n    ensureOpen();\n    boolean doFlush = false;\n    boolean success = false;\n    try {\n      try {\n        doFlush = docWriter.addDocument(doc, analyzer);\n        success = true;\n      } finally {\n        if (!success) {\n\n          if (infoStream != null)\n            message(\"hit exception adding document\");\n\n          synchronized (this) {\n            // If docWriter has some aborted files that were\n            // never incref'd, then we clean them up here\n            if (docWriter != null) {\n              final Collection<String> files = docWriter.abortedFiles();\n              if (files != null)\n                deleter.deleteNewFiles(files);\n            }\n          }\n        }\n      }\n      if (doFlush)\n        flush(true, false, false);\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"addDocument\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9b832cbed6eb3d54a8bb9339296bdda8eeb53014","date":1279708040,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#addDocument(Document,Analyzer).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#addDocument(Document,Analyzer).mjava","sourceNew":"  /**\n   * Adds a document to this index, using the provided analyzer instead of the\n   * value of {@link #getAnalyzer()}.  If the document contains more than\n   * {@link #setMaxFieldLength(int)} terms for a given field, the remainder are\n   * discarded.\n   *\n   * <p>See {@link #addDocument(Document)} for details on\n   * index and IndexWriter state after an Exception, and\n   * flushing/merging temporary free space requirements.</p>\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public long addDocument(Document doc, Analyzer analyzer) throws CorruptIndexException, IOException {\n    ensureOpen();\n    boolean success = false;\n    try {\n      try {\n        long sequenceID = docWriter.addDocument(doc, analyzer);\n        success = true;\n        return sequenceID;\n      } finally {\n        if (!success) {\n          if (infoStream != null) {\n            message(\"hit exception adding document\");\n          }\n          synchronized (this) {\n            // If docWriter has some aborted files that were\n            // never incref'd, then we clean them up here\n            if (docWriter != null) {\n              final Collection<String> files = docWriter.abortedFiles();\n              if (files != null) {\n                deleter.deleteNewFiles(files);\n              }\n            }\n          }\n        }\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"addDocument\");\n    }\n    \n    return -1;\n  }\n\n","sourceOld":"  /**\n   * Adds a document to this index, using the provided analyzer instead of the\n   * value of {@link #getAnalyzer()}.  If the document contains more than\n   * {@link #setMaxFieldLength(int)} terms for a given field, the remainder are\n   * discarded.\n   *\n   * <p>See {@link #addDocument(Document)} for details on\n   * index and IndexWriter state after an Exception, and\n   * flushing/merging temporary free space requirements.</p>\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public void addDocument(Document doc, Analyzer analyzer) throws CorruptIndexException, IOException {\n    ensureOpen();\n    boolean doFlush = false;\n    boolean success = false;\n    try {\n      try {\n        doFlush = docWriter.addDocument(doc, analyzer);\n        success = true;\n      } finally {\n        if (!success) {\n\n          if (infoStream != null)\n            message(\"hit exception adding document\");\n\n          synchronized (this) {\n            // If docWriter has some aborted files that were\n            // never incref'd, then we clean them up here\n            if (docWriter != null) {\n              final Collection<String> files = docWriter.abortedFiles();\n              if (files != null)\n                deleter.deleteNewFiles(files);\n            }\n          }\n        }\n      }\n      if (doFlush)\n        flush(true, false, false);\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"addDocument\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"334c1175813aea771a71728cd2c4ee4754fd0603","date":1279710173,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#addDocument(Document,Analyzer).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#addDocument(Document,Analyzer).mjava","sourceNew":"  /**\n   * Adds a document to this index, using the provided analyzer instead of the\n   * value of {@link #getAnalyzer()}.  If the document contains more than\n   * {@link #setMaxFieldLength(int)} terms for a given field, the remainder are\n   * discarded.\n   *\n   * <p>See {@link #addDocument(Document)} for details on\n   * index and IndexWriter state after an Exception, and\n   * flushing/merging temporary free space requirements.</p>\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public void addDocument(Document doc, Analyzer analyzer) throws CorruptIndexException, IOException {\n    ensureOpen();\n    boolean doFlush = false;\n    boolean success = false;\n    try {\n      try {\n        doFlush = docWriter.addDocument(doc, analyzer);\n        success = true;\n      } finally {\n        if (!success) {\n\n          if (infoStream != null)\n            message(\"hit exception adding document\");\n\n          synchronized (this) {\n            // If docWriter has some aborted files that were\n            // never incref'd, then we clean them up here\n            if (docWriter != null) {\n              final Collection<String> files = docWriter.abortedFiles();\n              if (files != null)\n                deleter.deleteNewFiles(files);\n            }\n          }\n        }\n      }\n      if (doFlush)\n        flush(true, false, false);\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"addDocument\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Adds a document to this index, using the provided analyzer instead of the\n   * value of {@link #getAnalyzer()}.  If the document contains more than\n   * {@link #setMaxFieldLength(int)} terms for a given field, the remainder are\n   * discarded.\n   *\n   * <p>See {@link #addDocument(Document)} for details on\n   * index and IndexWriter state after an Exception, and\n   * flushing/merging temporary free space requirements.</p>\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public long addDocument(Document doc, Analyzer analyzer) throws CorruptIndexException, IOException {\n    ensureOpen();\n    boolean success = false;\n    try {\n      try {\n        long sequenceID = docWriter.addDocument(doc, analyzer);\n        success = true;\n        return sequenceID;\n      } finally {\n        if (!success) {\n          if (infoStream != null) {\n            message(\"hit exception adding document\");\n          }\n          synchronized (this) {\n            // If docWriter has some aborted files that were\n            // never incref'd, then we clean them up here\n            if (docWriter != null) {\n              final Collection<String> files = docWriter.abortedFiles();\n              if (files != null) {\n                deleter.deleteNewFiles(files);\n              }\n            }\n          }\n        }\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"addDocument\");\n    }\n    \n    return -1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8fe956d65251358d755c56f14fe8380644790e47","date":1279711318,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#addDocument(Document,Analyzer).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#addDocument(Document,Analyzer).mjava","sourceNew":"  /**\n   * Adds a document to this index, using the provided analyzer instead of the\n   * value of {@link #getAnalyzer()}.  If the document contains more than\n   * {@link #setMaxFieldLength(int)} terms for a given field, the remainder are\n   * discarded.\n   *\n   * <p>See {@link #addDocument(Document)} for details on\n   * index and IndexWriter state after an Exception, and\n   * flushing/merging temporary free space requirements.</p>\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public long addDocument(Document doc, Analyzer analyzer) throws CorruptIndexException, IOException {\n    ensureOpen();\n    boolean success = false;\n    try {\n      try {\n        long sequenceID = docWriter.addDocument(doc, analyzer);\n        success = true;\n        return sequenceID;\n      } finally {\n        if (!success) {\n          if (infoStream != null) {\n            message(\"hit exception adding document\");\n          }\n          synchronized (this) {\n            // If docWriter has some aborted files that were\n            // never incref'd, then we clean them up here\n            if (docWriter != null) {\n              final Collection<String> files = docWriter.abortedFiles();\n              if (files != null) {\n                deleter.deleteNewFiles(files);\n              }\n            }\n          }\n        }\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"addDocument\");\n    }\n    \n    return -1;\n  }\n\n","sourceOld":"  /**\n   * Adds a document to this index, using the provided analyzer instead of the\n   * value of {@link #getAnalyzer()}.  If the document contains more than\n   * {@link #setMaxFieldLength(int)} terms for a given field, the remainder are\n   * discarded.\n   *\n   * <p>See {@link #addDocument(Document)} for details on\n   * index and IndexWriter state after an Exception, and\n   * flushing/merging temporary free space requirements.</p>\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public void addDocument(Document doc, Analyzer analyzer) throws CorruptIndexException, IOException {\n    ensureOpen();\n    boolean doFlush = false;\n    boolean success = false;\n    try {\n      try {\n        doFlush = docWriter.addDocument(doc, analyzer);\n        success = true;\n      } finally {\n        if (!success) {\n\n          if (infoStream != null)\n            message(\"hit exception adding document\");\n\n          synchronized (this) {\n            // If docWriter has some aborted files that were\n            // never incref'd, then we clean them up here\n            if (docWriter != null) {\n              final Collection<String> files = docWriter.abortedFiles();\n              if (files != null)\n                deleter.deleteNewFiles(files);\n            }\n          }\n        }\n      }\n      if (doFlush)\n        flush(true, false, false);\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"addDocument\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"38a62612cfa4e104080d89d7751a8f1a258ac335","date":1291442315,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#addDocument(Document,Analyzer).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#addDocument(Document,Analyzer).mjava","sourceNew":"  /**\n   * Adds a document to this index, using the provided analyzer instead of the\n   * value of {@link #getAnalyzer()}.  If the document contains more than\n   * {@link IndexWriterConfig#setMaxFieldLength(int)} terms for a given field, the remainder are\n   * discarded.\n   *\n   * <p>See {@link #addDocument(Document)} for details on\n   * index and IndexWriter state after an Exception, and\n   * flushing/merging temporary free space requirements.</p>\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public void addDocument(Document doc, Analyzer analyzer) throws CorruptIndexException, IOException {\n    ensureOpen();\n    boolean doFlush = false;\n    boolean success = false;\n    try {\n      try {\n        doFlush = docWriter.addDocument(doc, analyzer);\n        success = true;\n      } finally {\n        if (!success) {\n\n          if (infoStream != null)\n            message(\"hit exception adding document\");\n\n          synchronized (this) {\n            // If docWriter has some aborted files that were\n            // never incref'd, then we clean them up here\n            if (docWriter != null) {\n              final Collection<String> files = docWriter.abortedFiles();\n              if (files != null)\n                deleter.deleteNewFiles(files);\n            }\n          }\n        }\n      }\n      if (doFlush)\n        flush(true, false, false);\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"addDocument\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Adds a document to this index, using the provided analyzer instead of the\n   * value of {@link #getAnalyzer()}.  If the document contains more than\n   * {@link #setMaxFieldLength(int)} terms for a given field, the remainder are\n   * discarded.\n   *\n   * <p>See {@link #addDocument(Document)} for details on\n   * index and IndexWriter state after an Exception, and\n   * flushing/merging temporary free space requirements.</p>\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public void addDocument(Document doc, Analyzer analyzer) throws CorruptIndexException, IOException {\n    ensureOpen();\n    boolean doFlush = false;\n    boolean success = false;\n    try {\n      try {\n        doFlush = docWriter.addDocument(doc, analyzer);\n        success = true;\n      } finally {\n        if (!success) {\n\n          if (infoStream != null)\n            message(\"hit exception adding document\");\n\n          synchronized (this) {\n            // If docWriter has some aborted files that were\n            // never incref'd, then we clean them up here\n            if (docWriter != null) {\n              final Collection<String> files = docWriter.abortedFiles();\n              if (files != null)\n                deleter.deleteNewFiles(files);\n            }\n          }\n        }\n      }\n      if (doFlush)\n        flush(true, false, false);\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"addDocument\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4a69e5860d014751cc9329dfeb441a6d8fd1ed8e","date":1291833341,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#addDocument(Document,Analyzer).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#addDocument(Document,Analyzer).mjava","sourceNew":"  /**\n   * Adds a document to this index, using the provided analyzer instead of the\n   * value of {@link #getAnalyzer()}.  If the document contains more than\n   * {@link IndexWriterConfig#setMaxFieldLength(int)} terms for a given field, the remainder are\n   * discarded.\n   *\n   * <p>See {@link #addDocument(Document)} for details on\n   * index and IndexWriter state after an Exception, and\n   * flushing/merging temporary free space requirements.</p>\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public void addDocument(Document doc, Analyzer analyzer) throws CorruptIndexException, IOException {\n    ensureOpen();\n    boolean doFlush = false;\n    boolean success = false;\n    try {\n      try {\n        doFlush = docWriter.addDocument(doc, analyzer);\n        success = true;\n      } finally {\n        if (!success) {\n\n          if (infoStream != null)\n            message(\"hit exception adding document\");\n\n          synchronized (this) {\n            // If docWriter has some aborted files that were\n            // never incref'd, then we clean them up here\n            if (docWriter != null) {\n              final Collection<String> files = docWriter.abortedFiles();\n              if (files != null)\n                deleter.deleteNewFiles(files);\n            }\n          }\n        }\n      }\n      if (doFlush)\n        flush(true, false, false);\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"addDocument\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Adds a document to this index, using the provided analyzer instead of the\n   * value of {@link #getAnalyzer()}.  If the document contains more than\n   * {@link #setMaxFieldLength(int)} terms for a given field, the remainder are\n   * discarded.\n   *\n   * <p>See {@link #addDocument(Document)} for details on\n   * index and IndexWriter state after an Exception, and\n   * flushing/merging temporary free space requirements.</p>\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public void addDocument(Document doc, Analyzer analyzer) throws CorruptIndexException, IOException {\n    ensureOpen();\n    boolean doFlush = false;\n    boolean success = false;\n    try {\n      try {\n        doFlush = docWriter.addDocument(doc, analyzer);\n        success = true;\n      } finally {\n        if (!success) {\n\n          if (infoStream != null)\n            message(\"hit exception adding document\");\n\n          synchronized (this) {\n            // If docWriter has some aborted files that were\n            // never incref'd, then we clean them up here\n            if (docWriter != null) {\n              final Collection<String> files = docWriter.abortedFiles();\n              if (files != null)\n                deleter.deleteNewFiles(files);\n            }\n          }\n        }\n      }\n      if (doFlush)\n        flush(true, false, false);\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"addDocument\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"44fcbde6fb2ac44ee3b45e013e54a42911e689ff","date":1292065621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#addDocument(Document,Analyzer).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#addDocument(Document,Analyzer).mjava","sourceNew":"  /**\n   * Adds a document to this index, using the provided analyzer instead of the\n   * value of {@link #getAnalyzer()}.  If the document contains more than\n   * {@link IndexWriterConfig#setMaxFieldLength(int)} terms for a given field, the remainder are\n   * discarded.\n   *\n   * <p>See {@link #addDocument(Document)} for details on\n   * index and IndexWriter state after an Exception, and\n   * flushing/merging temporary free space requirements.</p>\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public void addDocument(Document doc, Analyzer analyzer) throws CorruptIndexException, IOException {\n    ensureOpen();\n    boolean doFlush = false;\n    boolean success = false;\n    try {\n      try {\n        doFlush = docWriter.updateDocument(doc, analyzer, null);\n        success = true;\n      } finally {\n        if (!success) {\n\n          if (infoStream != null) {\n            message(\"hit exception adding document\");\n          }\n\n          synchronized (this) {\n            // If docWriter has some aborted files that were\n            // never incref'd, then we clean them up here\n            if (docWriter != null) {\n              final Collection<String> files = docWriter.abortedFiles();\n              if (files != null)\n                deleter.deleteNewFiles(files);\n            }\n          }\n        }\n      }\n      if (doFlush)\n        flush(true, false, false);\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"addDocument\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Adds a document to this index, using the provided analyzer instead of the\n   * value of {@link #getAnalyzer()}.  If the document contains more than\n   * {@link IndexWriterConfig#setMaxFieldLength(int)} terms for a given field, the remainder are\n   * discarded.\n   *\n   * <p>See {@link #addDocument(Document)} for details on\n   * index and IndexWriter state after an Exception, and\n   * flushing/merging temporary free space requirements.</p>\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public void addDocument(Document doc, Analyzer analyzer) throws CorruptIndexException, IOException {\n    ensureOpen();\n    boolean doFlush = false;\n    boolean success = false;\n    try {\n      try {\n        doFlush = docWriter.addDocument(doc, analyzer);\n        success = true;\n      } finally {\n        if (!success) {\n\n          if (infoStream != null)\n            message(\"hit exception adding document\");\n\n          synchronized (this) {\n            // If docWriter has some aborted files that were\n            // never incref'd, then we clean them up here\n            if (docWriter != null) {\n              final Collection<String> files = docWriter.abortedFiles();\n              if (files != null)\n                deleter.deleteNewFiles(files);\n            }\n          }\n        }\n      }\n      if (doFlush)\n        flush(true, false, false);\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"addDocument\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e1cbd7e289dc1243c7a59e1a83d078163a147fe","date":1292268032,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#addDocument(Document,Analyzer).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#addDocument(Document,Analyzer).mjava","sourceNew":"  /**\n   * Adds a document to this index, using the provided analyzer instead of the\n   * value of {@link #getAnalyzer()}.  If the document contains more than\n   * {@link IndexWriterConfig#setMaxFieldLength(int)} terms for a given field, the remainder are\n   * discarded.\n   *\n   * <p>See {@link #addDocument(Document)} for details on\n   * index and IndexWriter state after an Exception, and\n   * flushing/merging temporary free space requirements.</p>\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public void addDocument(Document doc, Analyzer analyzer) throws CorruptIndexException, IOException {\n    ensureOpen();\n    boolean doFlush = false;\n    boolean success = false;\n    try {\n      try {\n        doFlush = docWriter.updateDocument(doc, analyzer, null);\n        success = true;\n      } finally {\n        if (!success) {\n\n          if (infoStream != null) {\n            message(\"hit exception adding document\");\n          }\n\n          synchronized (this) {\n            // If docWriter has some aborted files that were\n            // never incref'd, then we clean them up here\n            deleter.checkpoint(segmentInfos, false);\n            if (docWriter != null) {\n              final Collection<String> files = docWriter.abortedFiles();\n              if (files != null) {\n                deleter.deleteNewFiles(files);\n              }\n            }\n          }\n        }\n      }\n      if (doFlush)\n        flush(true, false, false);\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"addDocument\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Adds a document to this index, using the provided analyzer instead of the\n   * value of {@link #getAnalyzer()}.  If the document contains more than\n   * {@link IndexWriterConfig#setMaxFieldLength(int)} terms for a given field, the remainder are\n   * discarded.\n   *\n   * <p>See {@link #addDocument(Document)} for details on\n   * index and IndexWriter state after an Exception, and\n   * flushing/merging temporary free space requirements.</p>\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public void addDocument(Document doc, Analyzer analyzer) throws CorruptIndexException, IOException {\n    ensureOpen();\n    boolean doFlush = false;\n    boolean success = false;\n    try {\n      try {\n        doFlush = docWriter.updateDocument(doc, analyzer, null);\n        success = true;\n      } finally {\n        if (!success) {\n\n          if (infoStream != null) {\n            message(\"hit exception adding document\");\n          }\n\n          synchronized (this) {\n            // If docWriter has some aborted files that were\n            // never incref'd, then we clean them up here\n            if (docWriter != null) {\n              final Collection<String> files = docWriter.abortedFiles();\n              if (files != null)\n                deleter.deleteNewFiles(files);\n            }\n          }\n        }\n      }\n      if (doFlush)\n        flush(true, false, false);\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"addDocument\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4948bc5d29211f0c9b5ccc31b2632cdd27066ea5","date":1292695408,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#addDocument(Document,Analyzer).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#addDocument(Document,Analyzer).mjava","sourceNew":"  /**\n   * Adds a document to this index, using the provided analyzer instead of the\n   * value of {@link #getAnalyzer()}.  If the document contains more than\n   * {@link IndexWriterConfig#setMaxFieldLength(int)} terms for a given field, the remainder are\n   * discarded.\n   *\n   * <p>See {@link #addDocument(Document)} for details on\n   * index and IndexWriter state after an Exception, and\n   * flushing/merging temporary free space requirements.</p>\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public void addDocument(Document doc, Analyzer analyzer) throws CorruptIndexException, IOException {\n    ensureOpen();\n    boolean doFlush = false;\n    boolean success = false;\n    try {\n      try {\n        doFlush = docWriter.updateDocument(doc, analyzer, null);\n        success = true;\n      } finally {\n        if (!success && infoStream != null)\n          message(\"hit exception adding document\");\n      }\n      if (doFlush)\n        flush(true, false);\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"addDocument\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Adds a document to this index, using the provided analyzer instead of the\n   * value of {@link #getAnalyzer()}.  If the document contains more than\n   * {@link IndexWriterConfig#setMaxFieldLength(int)} terms for a given field, the remainder are\n   * discarded.\n   *\n   * <p>See {@link #addDocument(Document)} for details on\n   * index and IndexWriter state after an Exception, and\n   * flushing/merging temporary free space requirements.</p>\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public void addDocument(Document doc, Analyzer analyzer) throws CorruptIndexException, IOException {\n    ensureOpen();\n    boolean doFlush = false;\n    boolean success = false;\n    try {\n      try {\n        doFlush = docWriter.updateDocument(doc, analyzer, null);\n        success = true;\n      } finally {\n        if (!success) {\n\n          if (infoStream != null) {\n            message(\"hit exception adding document\");\n          }\n\n          synchronized (this) {\n            // If docWriter has some aborted files that were\n            // never incref'd, then we clean them up here\n            deleter.checkpoint(segmentInfos, false);\n            if (docWriter != null) {\n              final Collection<String> files = docWriter.abortedFiles();\n              if (files != null) {\n                deleter.deleteNewFiles(files);\n              }\n            }\n          }\n        }\n      }\n      if (doFlush)\n        flush(true, false, false);\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"addDocument\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab5cb6a74aefb78aa0569857970b9151dfe2e787","date":1292842407,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#addDocument(Document,Analyzer).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#addDocument(Document,Analyzer).mjava","sourceNew":"  /**\n   * Adds a document to this index, using the provided analyzer instead of the\n   * value of {@link #getAnalyzer()}.  If the document contains more than\n   * {@link IndexWriterConfig#setMaxFieldLength(int)} terms for a given field, the remainder are\n   * discarded.\n   *\n   * <p>See {@link #addDocument(Document)} for details on\n   * index and IndexWriter state after an Exception, and\n   * flushing/merging temporary free space requirements.</p>\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public void addDocument(Document doc, Analyzer analyzer) throws CorruptIndexException, IOException {\n    ensureOpen();\n    boolean doFlush = false;\n    boolean success = false;\n    try {\n      try {\n        doFlush = docWriter.updateDocument(doc, analyzer, null);\n        success = true;\n      } finally {\n        if (!success && infoStream != null)\n          message(\"hit exception adding document\");\n      }\n      if (doFlush)\n        flush(true, false);\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"addDocument\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Adds a document to this index, using the provided analyzer instead of the\n   * value of {@link #getAnalyzer()}.  If the document contains more than\n   * {@link IndexWriterConfig#setMaxFieldLength(int)} terms for a given field, the remainder are\n   * discarded.\n   *\n   * <p>See {@link #addDocument(Document)} for details on\n   * index and IndexWriter state after an Exception, and\n   * flushing/merging temporary free space requirements.</p>\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public void addDocument(Document doc, Analyzer analyzer) throws CorruptIndexException, IOException {\n    ensureOpen();\n    boolean doFlush = false;\n    boolean success = false;\n    try {\n      try {\n        doFlush = docWriter.addDocument(doc, analyzer);\n        success = true;\n      } finally {\n        if (!success) {\n\n          if (infoStream != null)\n            message(\"hit exception adding document\");\n\n          synchronized (this) {\n            // If docWriter has some aborted files that were\n            // never incref'd, then we clean them up here\n            if (docWriter != null) {\n              final Collection<String> files = docWriter.abortedFiles();\n              if (files != null)\n                deleter.deleteNewFiles(files);\n            }\n          }\n        }\n      }\n      if (doFlush)\n        flush(true, false, false);\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"addDocument\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#addDocument(Document,Analyzer).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#addDocument(Document,Analyzer).mjava","sourceNew":"  /**\n   * Adds a document to this index, using the provided analyzer instead of the\n   * value of {@link #getAnalyzer()}.  If the document contains more than\n   * {@link IndexWriterConfig#setMaxFieldLength(int)} terms for a given field, the remainder are\n   * discarded.\n   *\n   * <p>See {@link #addDocument(Document)} for details on\n   * index and IndexWriter state after an Exception, and\n   * flushing/merging temporary free space requirements.</p>\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public void addDocument(Document doc, Analyzer analyzer) throws CorruptIndexException, IOException {\n    updateDocument(null, doc, analyzer);\n  }\n\n","sourceOld":"  /**\n   * Adds a document to this index, using the provided analyzer instead of the\n   * value of {@link #getAnalyzer()}.  If the document contains more than\n   * {@link #setMaxFieldLength(int)} terms for a given field, the remainder are\n   * discarded.\n   *\n   * <p>See {@link #addDocument(Document)} for details on\n   * index and IndexWriter state after an Exception, and\n   * flushing/merging temporary free space requirements.</p>\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public long addDocument(Document doc, Analyzer analyzer) throws CorruptIndexException, IOException {\n    ensureOpen();\n    boolean success = false;\n    try {\n      try {\n        long sequenceID = docWriter.addDocument(doc, analyzer);\n        success = true;\n        return sequenceID;\n      } finally {\n        if (!success) {\n          if (infoStream != null) {\n            message(\"hit exception adding document\");\n          }\n          synchronized (this) {\n            // If docWriter has some aborted files that were\n            // never incref'd, then we clean them up here\n            if (docWriter != null) {\n              final Collection<String> files = docWriter.abortedFiles();\n              if (files != null) {\n                deleter.deleteNewFiles(files);\n              }\n            }\n          }\n        }\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"addDocument\");\n    }\n    \n    return -1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c2047784e704fe141e0ff36affac8a7cb6c7bbec","date":1295352100,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#addDocument(Document,Analyzer).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#addDocument(Document,Analyzer).mjava","sourceNew":"  /**\n   * Adds a document to this index, using the provided analyzer instead of the\n   * value of {@link #getAnalyzer()}.\n   *\n   * <p>See {@link #addDocument(Document)} for details on\n   * index and IndexWriter state after an Exception, and\n   * flushing/merging temporary free space requirements.</p>\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public void addDocument(Document doc, Analyzer analyzer) throws CorruptIndexException, IOException {\n    ensureOpen();\n    boolean doFlush = false;\n    boolean success = false;\n    try {\n      try {\n        doFlush = docWriter.updateDocument(doc, analyzer, null);\n        success = true;\n      } finally {\n        if (!success && infoStream != null)\n          message(\"hit exception adding document\");\n      }\n      if (doFlush)\n        flush(true, false);\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"addDocument\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Adds a document to this index, using the provided analyzer instead of the\n   * value of {@link #getAnalyzer()}.  If the document contains more than\n   * {@link IndexWriterConfig#setMaxFieldLength(int)} terms for a given field, the remainder are\n   * discarded.\n   *\n   * <p>See {@link #addDocument(Document)} for details on\n   * index and IndexWriter state after an Exception, and\n   * flushing/merging temporary free space requirements.</p>\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public void addDocument(Document doc, Analyzer analyzer) throws CorruptIndexException, IOException {\n    ensureOpen();\n    boolean doFlush = false;\n    boolean success = false;\n    try {\n      try {\n        doFlush = docWriter.updateDocument(doc, analyzer, null);\n        success = true;\n      } finally {\n        if (!success && infoStream != null)\n          message(\"hit exception adding document\");\n      }\n      if (doFlush)\n        flush(true, false);\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"addDocument\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#addDocument(Document,Analyzer).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#addDocument(Document,Analyzer).mjava","sourceNew":"  /**\n   * Adds a document to this index, using the provided analyzer instead of the\n   * value of {@link #getAnalyzer()}.\n   *\n   * <p>See {@link #addDocument(Document)} for details on\n   * index and IndexWriter state after an Exception, and\n   * flushing/merging temporary free space requirements.</p>\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public void addDocument(Document doc, Analyzer analyzer) throws CorruptIndexException, IOException {\n    ensureOpen();\n    boolean doFlush = false;\n    boolean success = false;\n    try {\n      try {\n        doFlush = docWriter.updateDocument(doc, analyzer, null);\n        success = true;\n      } finally {\n        if (!success && infoStream != null)\n          message(\"hit exception adding document\");\n      }\n      if (doFlush)\n        flush(true, false);\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"addDocument\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Adds a document to this index, using the provided analyzer instead of the\n   * value of {@link #getAnalyzer()}.  If the document contains more than\n   * {@link IndexWriterConfig#setMaxFieldLength(int)} terms for a given field, the remainder are\n   * discarded.\n   *\n   * <p>See {@link #addDocument(Document)} for details on\n   * index and IndexWriter state after an Exception, and\n   * flushing/merging temporary free space requirements.</p>\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public void addDocument(Document doc, Analyzer analyzer) throws CorruptIndexException, IOException {\n    ensureOpen();\n    boolean doFlush = false;\n    boolean success = false;\n    try {\n      try {\n        doFlush = docWriter.updateDocument(doc, analyzer, null);\n        success = true;\n      } finally {\n        if (!success && infoStream != null)\n          message(\"hit exception adding document\");\n      }\n      if (doFlush)\n        flush(true, false);\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"addDocument\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0ef0193974807e4bddf5432a6b0287fe4d6c9df","date":1301476645,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#addDocument(Document,Analyzer).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#addDocument(Document,Analyzer).mjava","sourceNew":"  /**\n   * Adds a document to this index, using the provided analyzer instead of the\n   * value of {@link #getAnalyzer()}.\n   *\n   * <p>See {@link #addDocument(Document)} for details on\n   * index and IndexWriter state after an Exception, and\n   * flushing/merging temporary free space requirements.</p>\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public void addDocument(Document doc, Analyzer analyzer) throws CorruptIndexException, IOException {\n    updateDocument(null, doc, analyzer);\n  }\n\n","sourceOld":"  /**\n   * Adds a document to this index, using the provided analyzer instead of the\n   * value of {@link #getAnalyzer()}.  If the document contains more than\n   * {@link IndexWriterConfig#setMaxFieldLength(int)} terms for a given field, the remainder are\n   * discarded.\n   *\n   * <p>See {@link #addDocument(Document)} for details on\n   * index and IndexWriter state after an Exception, and\n   * flushing/merging temporary free space requirements.</p>\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public void addDocument(Document doc, Analyzer analyzer) throws CorruptIndexException, IOException {\n    updateDocument(null, doc, analyzer);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b3e06be49006ecac364d39d12b9c9f74882f9b9f","date":1304289513,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#addDocument(Document,Analyzer).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#addDocument(Document,Analyzer).mjava","sourceNew":"  /**\n   * Adds a document to this index, using the provided analyzer instead of the\n   * value of {@link #getAnalyzer()}.\n   *\n   * <p>See {@link #addDocument(Document)} for details on\n   * index and IndexWriter state after an Exception, and\n   * flushing/merging temporary free space requirements.</p>\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public void addDocument(Document doc, Analyzer analyzer) throws CorruptIndexException, IOException {\n    updateDocument(null, doc, analyzer);\n  }\n\n","sourceOld":"  /**\n   * Adds a document to this index, using the provided analyzer instead of the\n   * value of {@link #getAnalyzer()}.\n   *\n   * <p>See {@link #addDocument(Document)} for details on\n   * index and IndexWriter state after an Exception, and\n   * flushing/merging temporary free space requirements.</p>\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public void addDocument(Document doc, Analyzer analyzer) throws CorruptIndexException, IOException {\n    ensureOpen();\n    boolean doFlush = false;\n    boolean success = false;\n    try {\n      try {\n        doFlush = docWriter.updateDocument(doc, analyzer, null);\n        success = true;\n      } finally {\n        if (!success && infoStream != null)\n          message(\"hit exception adding document\");\n      }\n      if (doFlush)\n        flush(true, false);\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"addDocument\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#addDocument(Document,Analyzer).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#addDocument(Document,Analyzer).mjava","sourceNew":"  /**\n   * Adds a document to this index, using the provided analyzer instead of the\n   * value of {@link #getAnalyzer()}.\n   *\n   * <p>See {@link #addDocument(Document)} for details on\n   * index and IndexWriter state after an Exception, and\n   * flushing/merging temporary free space requirements.</p>\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public void addDocument(Document doc, Analyzer analyzer) throws CorruptIndexException, IOException {\n    updateDocument(null, doc, analyzer);\n  }\n\n","sourceOld":"  /**\n   * Adds a document to this index, using the provided analyzer instead of the\n   * value of {@link #getAnalyzer()}.\n   *\n   * <p>See {@link #addDocument(Document)} for details on\n   * index and IndexWriter state after an Exception, and\n   * flushing/merging temporary free space requirements.</p>\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public void addDocument(Document doc, Analyzer analyzer) throws CorruptIndexException, IOException {\n    ensureOpen();\n    boolean doFlush = false;\n    boolean success = false;\n    try {\n      try {\n        doFlush = docWriter.updateDocument(doc, analyzer, null);\n        success = true;\n      } finally {\n        if (!success && infoStream != null)\n          message(\"hit exception adding document\");\n      }\n      if (doFlush)\n        flush(true, false);\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"addDocument\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#addDocument(Document,Analyzer).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#addDocument(Document,Analyzer).mjava","sourceNew":"  /**\n   * Adds a document to this index, using the provided analyzer instead of the\n   * value of {@link #getAnalyzer()}.\n   *\n   * <p>See {@link #addDocument(Document)} for details on\n   * index and IndexWriter state after an Exception, and\n   * flushing/merging temporary free space requirements.</p>\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public void addDocument(Document doc, Analyzer analyzer) throws CorruptIndexException, IOException {\n    updateDocument(null, doc, analyzer);\n  }\n\n","sourceOld":"  /**\n   * Adds a document to this index, using the provided analyzer instead of the\n   * value of {@link #getAnalyzer()}.\n   *\n   * <p>See {@link #addDocument(Document)} for details on\n   * index and IndexWriter state after an Exception, and\n   * flushing/merging temporary free space requirements.</p>\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public void addDocument(Document doc, Analyzer analyzer) throws CorruptIndexException, IOException {\n    ensureOpen();\n    boolean doFlush = false;\n    boolean success = false;\n    try {\n      try {\n        doFlush = docWriter.updateDocument(doc, analyzer, null);\n        success = true;\n      } finally {\n        if (!success && infoStream != null)\n          message(\"hit exception adding document\");\n      }\n      if (doFlush)\n        flush(true, false);\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"addDocument\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#addDocument(Iterable[#-extends-IndexableField],Analyzer).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#addDocument(Document,Analyzer).mjava","sourceNew":"  /**\n   * Adds a document to this index, using the provided analyzer instead of the\n   * value of {@link #getAnalyzer()}.\n   *\n   * <p>See {@link #addDocument(Iterable)} for details on\n   * index and IndexWriter state after an Exception, and\n   * flushing/merging temporary free space requirements.</p>\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public void addDocument(Iterable<? extends IndexableField> doc, Analyzer analyzer) throws CorruptIndexException, IOException {\n    updateDocument(null, doc, analyzer);\n  }\n\n","sourceOld":"  /**\n   * Adds a document to this index, using the provided analyzer instead of the\n   * value of {@link #getAnalyzer()}.\n   *\n   * <p>See {@link #addDocument(Document)} for details on\n   * index and IndexWriter state after an Exception, and\n   * flushing/merging temporary free space requirements.</p>\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public void addDocument(Document doc, Analyzer analyzer) throws CorruptIndexException, IOException {\n    updateDocument(null, doc, analyzer);\n  }\n\n","bugFix":null,"bugIntro":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"44fcbde6fb2ac44ee3b45e013e54a42911e689ff":["38a62612cfa4e104080d89d7751a8f1a258ac335"],"38a62612cfa4e104080d89d7751a8f1a258ac335":["334c1175813aea771a71728cd2c4ee4754fd0603"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["29ef99d61cda9641b6250bf9567329a6e65f901d","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["c2047784e704fe141e0ff36affac8a7cb6c7bbec","c0ef0193974807e4bddf5432a6b0287fe4d6c9df"],"4a69e5860d014751cc9329dfeb441a6d8fd1ed8e":["334c1175813aea771a71728cd2c4ee4754fd0603"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["4a69e5860d014751cc9329dfeb441a6d8fd1ed8e","4948bc5d29211f0c9b5ccc31b2632cdd27066ea5"],"334c1175813aea771a71728cd2c4ee4754fd0603":["9b832cbed6eb3d54a8bb9339296bdda8eeb53014"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["8fe956d65251358d755c56f14fe8380644790e47","4948bc5d29211f0c9b5ccc31b2632cdd27066ea5"],"9b832cbed6eb3d54a8bb9339296bdda8eeb53014":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"c2047784e704fe141e0ff36affac8a7cb6c7bbec":["4948bc5d29211f0c9b5ccc31b2632cdd27066ea5"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","c2047784e704fe141e0ff36affac8a7cb6c7bbec"],"a3776dccca01c11e7046323cfad46a3b4a471233":["c2047784e704fe141e0ff36affac8a7cb6c7bbec","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","c2047784e704fe141e0ff36affac8a7cb6c7bbec"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8fe956d65251358d755c56f14fe8380644790e47":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"4948bc5d29211f0c9b5ccc31b2632cdd27066ea5":["7e1cbd7e289dc1243c7a59e1a83d078163a147fe"],"7e1cbd7e289dc1243c7a59e1a83d078163a147fe":["44fcbde6fb2ac44ee3b45e013e54a42911e689ff"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"44fcbde6fb2ac44ee3b45e013e54a42911e689ff":["7e1cbd7e289dc1243c7a59e1a83d078163a147fe"],"38a62612cfa4e104080d89d7751a8f1a258ac335":["44fcbde6fb2ac44ee3b45e013e54a42911e689ff"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["135621f3a0670a9394eb563224a3b76cc4dddc0f","a3776dccca01c11e7046323cfad46a3b4a471233","1509f151d7692d84fae414b2b799ac06ba60fcb4"],"4a69e5860d014751cc9329dfeb441a6d8fd1ed8e":["ab5cb6a74aefb78aa0569857970b9151dfe2e787"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"334c1175813aea771a71728cd2c4ee4754fd0603":["38a62612cfa4e104080d89d7751a8f1a258ac335","4a69e5860d014751cc9329dfeb441a6d8fd1ed8e"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df"],"9b832cbed6eb3d54a8bb9339296bdda8eeb53014":["334c1175813aea771a71728cd2c4ee4754fd0603"],"c2047784e704fe141e0ff36affac8a7cb6c7bbec":["b3e06be49006ecac364d39d12b9c9f74882f9b9f","c0ef0193974807e4bddf5432a6b0287fe4d6c9df","a3776dccca01c11e7046323cfad46a3b4a471233","29ef99d61cda9641b6250bf9567329a6e65f901d"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"8fe956d65251358d755c56f14fe8380644790e47":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4948bc5d29211f0c9b5ccc31b2632cdd27066ea5":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","c2047784e704fe141e0ff36affac8a7cb6c7bbec"],"7e1cbd7e289dc1243c7a59e1a83d078163a147fe":["4948bc5d29211f0c9b5ccc31b2632cdd27066ea5"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["9b832cbed6eb3d54a8bb9339296bdda8eeb53014","8fe956d65251358d755c56f14fe8380644790e47"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["135621f3a0670a9394eb563224a3b76cc4dddc0f","a3776dccca01c11e7046323cfad46a3b4a471233","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}