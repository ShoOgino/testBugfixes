{"path":"solr/contrib/analytics/src/java/org/apache/solr/analytics/util/valuesource/ConstDateSource#getValues(Map,LeafReaderContext).mjava","commits":[{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":0,"author":"Ryan Ernst","isMerge":false,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/analytics/util/valuesource/ConstDateSource#getValues(Map,LeafReaderContext).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    return new FloatDocValues(this) {\n      @Override\n      public float floatVal(int doc) {\n        return getFloat();\n      }\n      @Override\n      public int intVal(int doc) {\n        return getInt();\n      }\n      @Override\n      public long longVal(int doc) {\n        return getLong();\n      }\n      @Override\n      public double doubleVal(int doc) {\n        return getDouble();\n      }\n      @Override\n      public String toString(int doc) {\n        return description();\n      }\n      @Override\n      public Object objectVal(int doc) {\n        return new Date(longVal(doc));\n      }\n      @SuppressWarnings(\"deprecation\")\n      @Override\n      public String strVal(int doc) {\n        return TrieDateField.formatExternal(new Date(longVal(doc)));\n      }\n      @Override\n      public boolean boolVal(int doc) {\n        return getFloat() != 0.0f;\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueDate mval = new MutableValueDate();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) {\n            mval.value = longVal(doc);\n            mval.exists = true;\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0c38a05f7a7b43c2dabbd25f12f9941c64bb2331","date":1437383270,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/analytics/util/valuesource/ConstDateSource#getValues(Map,LeafReaderContext).mjava","pathOld":"solr/contrib/analytics/src/java/org/apache/solr/analytics/util/valuesource/ConstDateSource#getValues(Map,LeafReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    return new FloatDocValues(this) {\n      @Override\n      public float floatVal(int doc) {\n        return getFloat();\n      }\n      @Override\n      public int intVal(int doc) {\n        return getInt();\n      }\n      @Override\n      public long longVal(int doc) {\n        return getLong();\n      }\n      @Override\n      public double doubleVal(int doc) {\n        return getDouble();\n      }\n      @Override\n      public String toString(int doc) {\n        return description();\n      }\n      @Override\n      public Object objectVal(int doc) {\n        return new Date(longVal(doc));\n      }\n      @SuppressWarnings(\"deprecation\")\n      @Override\n      public String strVal(int doc) {\n        return DateFormatUtil.formatExternal(new Date(longVal(doc)));\n      }\n      @Override\n      public boolean boolVal(int doc) {\n        return getFloat() != 0.0f;\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueDate mval = new MutableValueDate();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) {\n            mval.value = longVal(doc);\n            mval.exists = true;\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    return new FloatDocValues(this) {\n      @Override\n      public float floatVal(int doc) {\n        return getFloat();\n      }\n      @Override\n      public int intVal(int doc) {\n        return getInt();\n      }\n      @Override\n      public long longVal(int doc) {\n        return getLong();\n      }\n      @Override\n      public double doubleVal(int doc) {\n        return getDouble();\n      }\n      @Override\n      public String toString(int doc) {\n        return description();\n      }\n      @Override\n      public Object objectVal(int doc) {\n        return new Date(longVal(doc));\n      }\n      @SuppressWarnings(\"deprecation\")\n      @Override\n      public String strVal(int doc) {\n        return TrieDateField.formatExternal(new Date(longVal(doc)));\n      }\n      @Override\n      public boolean boolVal(int doc) {\n        return getFloat() != 0.0f;\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueDate mval = new MutableValueDate();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) {\n            mval.value = longVal(doc);\n            mval.exists = true;\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3f6c7717a0f1decd1668144537943efcc70cd95","date":1459359762,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/analytics/util/valuesource/ConstDateSource#getValues(Map,LeafReaderContext).mjava","pathOld":"solr/contrib/analytics/src/java/org/apache/solr/analytics/util/valuesource/ConstDateSource#getValues(Map,LeafReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    return new FloatDocValues(this) {\n      @Override\n      public float floatVal(int doc) {\n        return getFloat();\n      }\n      @Override\n      public int intVal(int doc) {\n        return getInt();\n      }\n      @Override\n      public long longVal(int doc) {\n        return getLong();\n      }\n      @Override\n      public double doubleVal(int doc) {\n        return getDouble();\n      }\n      @Override\n      public String toString(int doc) {\n        return description();\n      }\n      @Override\n      public Object objectVal(int doc) {\n        return new Date(longVal(doc));\n      }\n      @SuppressWarnings(\"deprecation\")\n      @Override\n      public String strVal(int doc) {\n        return Instant.ofEpochMilli(longVal(doc)).toString();\n      }\n      @Override\n      public boolean boolVal(int doc) {\n        return getFloat() != 0.0f;\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueDate mval = new MutableValueDate();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) {\n            mval.value = longVal(doc);\n            mval.exists = true;\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    return new FloatDocValues(this) {\n      @Override\n      public float floatVal(int doc) {\n        return getFloat();\n      }\n      @Override\n      public int intVal(int doc) {\n        return getInt();\n      }\n      @Override\n      public long longVal(int doc) {\n        return getLong();\n      }\n      @Override\n      public double doubleVal(int doc) {\n        return getDouble();\n      }\n      @Override\n      public String toString(int doc) {\n        return description();\n      }\n      @Override\n      public Object objectVal(int doc) {\n        return new Date(longVal(doc));\n      }\n      @SuppressWarnings(\"deprecation\")\n      @Override\n      public String strVal(int doc) {\n        return DateFormatUtil.formatExternal(new Date(longVal(doc)));\n      }\n      @Override\n      public boolean boolVal(int doc) {\n        return getFloat() != 0.0f;\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueDate mval = new MutableValueDate();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) {\n            mval.value = longVal(doc);\n            mval.exists = true;\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c495edcca4d0bc51bf62d9be3527c87bf9b44ded","date":1498673617,"type":4,"author":"Dennis Gove","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/analytics/src/java/org/apache/solr/analytics/util/valuesource/ConstDateSource#getValues(Map,LeafReaderContext).mjava","sourceNew":null,"sourceOld":"  @Override\n  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    return new FloatDocValues(this) {\n      @Override\n      public float floatVal(int doc) {\n        return getFloat();\n      }\n      @Override\n      public int intVal(int doc) {\n        return getInt();\n      }\n      @Override\n      public long longVal(int doc) {\n        return getLong();\n      }\n      @Override\n      public double doubleVal(int doc) {\n        return getDouble();\n      }\n      @Override\n      public String toString(int doc) {\n        return description();\n      }\n      @Override\n      public Object objectVal(int doc) {\n        return new Date(longVal(doc));\n      }\n      @SuppressWarnings(\"deprecation\")\n      @Override\n      public String strVal(int doc) {\n        return Instant.ofEpochMilli(longVal(doc)).toString();\n      }\n      @Override\n      public boolean boolVal(int doc) {\n        return getFloat() != 0.0f;\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueDate mval = new MutableValueDate();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) {\n            mval.value = longVal(doc);\n            mval.exists = true;\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/contrib/analytics/src/java/org/apache/solr/analytics/util/valuesource/ConstDateSource#getValues(Map,LeafReaderContext).mjava","sourceNew":null,"sourceOld":"  @Override\n  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    return new FloatDocValues(this) {\n      @Override\n      public float floatVal(int doc) {\n        return getFloat();\n      }\n      @Override\n      public int intVal(int doc) {\n        return getInt();\n      }\n      @Override\n      public long longVal(int doc) {\n        return getLong();\n      }\n      @Override\n      public double doubleVal(int doc) {\n        return getDouble();\n      }\n      @Override\n      public String toString(int doc) {\n        return description();\n      }\n      @Override\n      public Object objectVal(int doc) {\n        return new Date(longVal(doc));\n      }\n      @SuppressWarnings(\"deprecation\")\n      @Override\n      public String strVal(int doc) {\n        return Instant.ofEpochMilli(longVal(doc)).toString();\n      }\n      @Override\n      public boolean boolVal(int doc) {\n        return getFloat() != 0.0f;\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueDate mval = new MutableValueDate();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) {\n            mval.value = longVal(doc);\n            mval.exists = true;\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30c8e5574b55d57947e989443dfde611646530ee","date":1499131153,"type":4,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/contrib/analytics/src/java/org/apache/solr/analytics/util/valuesource/ConstDateSource#getValues(Map,LeafReaderContext).mjava","sourceNew":null,"sourceOld":"  @Override\n  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    return new FloatDocValues(this) {\n      @Override\n      public float floatVal(int doc) {\n        return getFloat();\n      }\n      @Override\n      public int intVal(int doc) {\n        return getInt();\n      }\n      @Override\n      public long longVal(int doc) {\n        return getLong();\n      }\n      @Override\n      public double doubleVal(int doc) {\n        return getDouble();\n      }\n      @Override\n      public String toString(int doc) {\n        return description();\n      }\n      @Override\n      public Object objectVal(int doc) {\n        return new Date(longVal(doc));\n      }\n      @SuppressWarnings(\"deprecation\")\n      @Override\n      public String strVal(int doc) {\n        return Instant.ofEpochMilli(longVal(doc)).toString();\n      }\n      @Override\n      public boolean boolVal(int doc) {\n        return getFloat() != 0.0f;\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueDate mval = new MutableValueDate();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) {\n            mval.value = longVal(doc);\n            mval.exists = true;\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3f6c7717a0f1decd1668144537943efcc70cd95":["0c38a05f7a7b43c2dabbd25f12f9941c64bb2331"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"30c8e5574b55d57947e989443dfde611646530ee":["d3f6c7717a0f1decd1668144537943efcc70cd95","28288370235ed02234a64753cdbf0c6ec096304a"],"c495edcca4d0bc51bf62d9be3527c87bf9b44ded":["d3f6c7717a0f1decd1668144537943efcc70cd95"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"28288370235ed02234a64753cdbf0c6ec096304a":["d3f6c7717a0f1decd1668144537943efcc70cd95","c495edcca4d0bc51bf62d9be3527c87bf9b44ded"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"],"0c38a05f7a7b43c2dabbd25f12f9941c64bb2331":["c9fb5f46e264daf5ba3860defe623a89d202dd87"]},"commit2Childs":{"d3f6c7717a0f1decd1668144537943efcc70cd95":["30c8e5574b55d57947e989443dfde611646530ee","c495edcca4d0bc51bf62d9be3527c87bf9b44ded","28288370235ed02234a64753cdbf0c6ec096304a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"30c8e5574b55d57947e989443dfde611646530ee":[],"c495edcca4d0bc51bf62d9be3527c87bf9b44ded":["28288370235ed02234a64753cdbf0c6ec096304a"],"28288370235ed02234a64753cdbf0c6ec096304a":["30c8e5574b55d57947e989443dfde611646530ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["0c38a05f7a7b43c2dabbd25f12f9941c64bb2331"],"0c38a05f7a7b43c2dabbd25f12f9941c64bb2331":["d3f6c7717a0f1decd1668144537943efcc70cd95"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["30c8e5574b55d57947e989443dfde611646530ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}