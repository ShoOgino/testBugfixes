{"path":"lucene/src/test/org/apache/lucene/index/TestIndexReaderDelete#testMultiReaderDeletes().mjava","commits":[{"id":"ff6fd241dc6610f7f81b62e3ba4cedf105939623","date":1307331653,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderDelete#testMultiReaderDeletes().mjava","pathOld":"/dev/null","sourceNew":"  public void testMultiReaderDeletes() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w= new RandomIndexWriter(random, dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    Document doc = new Document();\n    doc.add(newField(\"f\", \"doctor\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n    w.addDocument(doc);\n    doc = new Document();\n    w.commit();\n    doc.add(newField(\"f\", \"who\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n    w.addDocument(doc);\n    IndexReader r = new SlowMultiReaderWrapper(w.getReader());\n    w.close();\n\n    assertNull(r.getDeletedDocs());\n    r.close();\n\n    r = new SlowMultiReaderWrapper(IndexReader.open(dir, false));\n\n    assertNull(r.getDeletedDocs());\n    assertEquals(1, r.deleteDocuments(new Term(\"f\", \"doctor\")));\n    assertNotNull(r.getDeletedDocs());\n    assertTrue(r.getDeletedDocs().get(0));\n    assertEquals(1, r.deleteDocuments(new Term(\"f\", \"who\")));\n    assertTrue(r.getDeletedDocs().get(1));\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"79c2cb24929f2649a8875fb629086171f914d5ce","date":1307332717,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderDelete#testMultiReaderDeletes().mjava","pathOld":"/dev/null","sourceNew":"  public void testMultiReaderDeletes() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w= new RandomIndexWriter(random, dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    Document doc = new Document();\n    doc.add(newField(\"f\", \"doctor\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n    w.addDocument(doc);\n    doc = new Document();\n    w.commit();\n    doc.add(newField(\"f\", \"who\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n    w.addDocument(doc);\n    IndexReader r = new SlowMultiReaderWrapper(w.getReader());\n    w.close();\n\n    assertNull(r.getDeletedDocs());\n    r.close();\n\n    r = new SlowMultiReaderWrapper(IndexReader.open(dir, false));\n\n    assertNull(r.getDeletedDocs());\n    assertEquals(1, r.deleteDocuments(new Term(\"f\", \"doctor\")));\n    assertNotNull(r.getDeletedDocs());\n    assertTrue(r.getDeletedDocs().get(0));\n    assertEquals(1, r.deleteDocuments(new Term(\"f\", \"who\")));\n    assertTrue(r.getDeletedDocs().get(1));\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"77cf4379b2824f6ea34b091c495d6e95c38ff9e2","date":1307610475,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderDelete#testMultiReaderDeletes().mjava","pathOld":"/dev/null","sourceNew":"  public void testMultiReaderDeletes() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w= new RandomIndexWriter(random, dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    Document doc = new Document();\n    doc.add(newField(\"f\", \"doctor\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n    w.addDocument(doc);\n    doc = new Document();\n    w.commit();\n    doc.add(newField(\"f\", \"who\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n    w.addDocument(doc);\n    IndexReader r = new SlowMultiReaderWrapper(w.getReader());\n    w.close();\n\n    assertNull(r.getDeletedDocs());\n    r.close();\n\n    r = new SlowMultiReaderWrapper(IndexReader.open(dir, false));\n\n    assertNull(r.getDeletedDocs());\n    assertEquals(1, r.deleteDocuments(new Term(\"f\", \"doctor\")));\n    assertNotNull(r.getDeletedDocs());\n    assertTrue(r.getDeletedDocs().get(0));\n    assertEquals(1, r.deleteDocuments(new Term(\"f\", \"who\")));\n    assertTrue(r.getDeletedDocs().get(1));\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb","date":1309960478,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderDelete#testMultiReaderDeletes().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderDelete#testMultiReaderDeletes().mjava","sourceNew":"  public void testMultiReaderDeletes() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w= new RandomIndexWriter(random, dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    Document doc = new Document();\n    doc.add(newField(\"f\", \"doctor\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n    w.addDocument(doc);\n    doc = new Document();\n    w.commit();\n    doc.add(newField(\"f\", \"who\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n    w.addDocument(doc);\n    IndexReader r = new SlowMultiReaderWrapper(w.getReader());\n    w.close();\n\n    assertNull(r.getLiveDocs());\n    r.close();\n\n    r = new SlowMultiReaderWrapper(IndexReader.open(dir, false));\n\n    assertNull(r.getLiveDocs());\n    assertEquals(1, r.deleteDocuments(new Term(\"f\", \"doctor\")));\n    assertNotNull(r.getLiveDocs());\n    assertFalse(r.getLiveDocs().get(0));\n    assertEquals(1, r.deleteDocuments(new Term(\"f\", \"who\")));\n    assertFalse(r.getLiveDocs().get(1));\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testMultiReaderDeletes() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w= new RandomIndexWriter(random, dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    Document doc = new Document();\n    doc.add(newField(\"f\", \"doctor\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n    w.addDocument(doc);\n    doc = new Document();\n    w.commit();\n    doc.add(newField(\"f\", \"who\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n    w.addDocument(doc);\n    IndexReader r = new SlowMultiReaderWrapper(w.getReader());\n    w.close();\n\n    assertNull(r.getDeletedDocs());\n    r.close();\n\n    r = new SlowMultiReaderWrapper(IndexReader.open(dir, false));\n\n    assertNull(r.getDeletedDocs());\n    assertEquals(1, r.deleteDocuments(new Term(\"f\", \"doctor\")));\n    assertNotNull(r.getDeletedDocs());\n    assertTrue(r.getDeletedDocs().get(0));\n    assertEquals(1, r.deleteDocuments(new Term(\"f\", \"who\")));\n    assertTrue(r.getDeletedDocs().get(1));\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderDelete#testMultiReaderDeletes().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderDelete#testMultiReaderDeletes().mjava","sourceNew":"  public void testMultiReaderDeletes() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w= new RandomIndexWriter(random, dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    Document doc = new Document();\n    doc.add(newField(\"f\", \"doctor\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n    w.addDocument(doc);\n    doc = new Document();\n    w.commit();\n    doc.add(newField(\"f\", \"who\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n    w.addDocument(doc);\n    IndexReader r = new SlowMultiReaderWrapper(w.getReader());\n    w.close();\n\n    assertNull(r.getLiveDocs());\n    r.close();\n\n    r = new SlowMultiReaderWrapper(IndexReader.open(dir, false));\n\n    assertNull(r.getLiveDocs());\n    assertEquals(1, r.deleteDocuments(new Term(\"f\", \"doctor\")));\n    assertNotNull(r.getLiveDocs());\n    assertFalse(r.getLiveDocs().get(0));\n    assertEquals(1, r.deleteDocuments(new Term(\"f\", \"who\")));\n    assertFalse(r.getLiveDocs().get(1));\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testMultiReaderDeletes() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w= new RandomIndexWriter(random, dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    Document doc = new Document();\n    doc.add(newField(\"f\", \"doctor\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n    w.addDocument(doc);\n    doc = new Document();\n    w.commit();\n    doc.add(newField(\"f\", \"who\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n    w.addDocument(doc);\n    IndexReader r = new SlowMultiReaderWrapper(w.getReader());\n    w.close();\n\n    assertNull(r.getDeletedDocs());\n    r.close();\n\n    r = new SlowMultiReaderWrapper(IndexReader.open(dir, false));\n\n    assertNull(r.getDeletedDocs());\n    assertEquals(1, r.deleteDocuments(new Term(\"f\", \"doctor\")));\n    assertNotNull(r.getDeletedDocs());\n    assertTrue(r.getDeletedDocs().get(0));\n    assertEquals(1, r.deleteDocuments(new Term(\"f\", \"who\")));\n    assertTrue(r.getDeletedDocs().get(1));\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderDelete#testMultiReaderDeletes().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderDelete#testMultiReaderDeletes().mjava","sourceNew":"  public void testMultiReaderDeletes() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w= new RandomIndexWriter(random, dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    Document doc = new Document();\n    doc.add(newField(\"f\", \"doctor\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n    w.addDocument(doc);\n    doc = new Document();\n    w.commit();\n    doc.add(newField(\"f\", \"who\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n    w.addDocument(doc);\n    IndexReader r = new SlowMultiReaderWrapper(w.getReader());\n    w.close();\n\n    assertNull(r.getLiveDocs());\n    r.close();\n\n    r = new SlowMultiReaderWrapper(IndexReader.open(dir, false));\n\n    assertNull(r.getLiveDocs());\n    assertEquals(1, r.deleteDocuments(new Term(\"f\", \"doctor\")));\n    assertNotNull(r.getLiveDocs());\n    assertFalse(r.getLiveDocs().get(0));\n    assertEquals(1, r.deleteDocuments(new Term(\"f\", \"who\")));\n    assertFalse(r.getLiveDocs().get(1));\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testMultiReaderDeletes() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w= new RandomIndexWriter(random, dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    Document doc = new Document();\n    doc.add(newField(\"f\", \"doctor\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n    w.addDocument(doc);\n    doc = new Document();\n    w.commit();\n    doc.add(newField(\"f\", \"who\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n    w.addDocument(doc);\n    IndexReader r = new SlowMultiReaderWrapper(w.getReader());\n    w.close();\n\n    assertNull(r.getDeletedDocs());\n    r.close();\n\n    r = new SlowMultiReaderWrapper(IndexReader.open(dir, false));\n\n    assertNull(r.getDeletedDocs());\n    assertEquals(1, r.deleteDocuments(new Term(\"f\", \"doctor\")));\n    assertNotNull(r.getDeletedDocs());\n    assertTrue(r.getDeletedDocs().get(0));\n    assertEquals(1, r.deleteDocuments(new Term(\"f\", \"who\")));\n    assertTrue(r.getDeletedDocs().get(1));\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderDelete#testMultiReaderDeletes().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderDelete#testMultiReaderDeletes().mjava","sourceNew":"  public void testMultiReaderDeletes() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w= new RandomIndexWriter(random, dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    Document doc = new Document();\n    doc.add(newField(\"f\", \"doctor\", StringField.TYPE_UNSTORED));\n    w.addDocument(doc);\n    doc = new Document();\n    w.commit();\n    doc.add(newField(\"f\", \"who\", StringField.TYPE_UNSTORED));\n    w.addDocument(doc);\n    IndexReader r = new SlowMultiReaderWrapper(w.getReader());\n    w.close();\n\n    assertNull(r.getLiveDocs());\n    r.close();\n\n    r = new SlowMultiReaderWrapper(IndexReader.open(dir, false));\n\n    assertNull(r.getLiveDocs());\n    assertEquals(1, r.deleteDocuments(new Term(\"f\", \"doctor\")));\n    assertNotNull(r.getLiveDocs());\n    assertFalse(r.getLiveDocs().get(0));\n    assertEquals(1, r.deleteDocuments(new Term(\"f\", \"who\")));\n    assertFalse(r.getLiveDocs().get(1));\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testMultiReaderDeletes() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w= new RandomIndexWriter(random, dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    Document doc = new Document();\n    doc.add(newField(\"f\", \"doctor\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n    w.addDocument(doc);\n    doc = new Document();\n    w.commit();\n    doc.add(newField(\"f\", \"who\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n    w.addDocument(doc);\n    IndexReader r = new SlowMultiReaderWrapper(w.getReader());\n    w.close();\n\n    assertNull(r.getLiveDocs());\n    r.close();\n\n    r = new SlowMultiReaderWrapper(IndexReader.open(dir, false));\n\n    assertNull(r.getLiveDocs());\n    assertEquals(1, r.deleteDocuments(new Term(\"f\", \"doctor\")));\n    assertNotNull(r.getLiveDocs());\n    assertFalse(r.getLiveDocs().get(0));\n    assertEquals(1, r.deleteDocuments(new Term(\"f\", \"who\")));\n    assertFalse(r.getLiveDocs().get(1));\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"75ec8c9aaa10ac00b30fd4c2465409770c838f7b","date":1323020115,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderDelete#testMultiReaderDeletes().mjava","sourceNew":null,"sourceOld":"  public void testMultiReaderDeletes() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w= new RandomIndexWriter(random, dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    Document doc = new Document();\n    doc.add(newField(\"f\", \"doctor\", StringField.TYPE_UNSTORED));\n    w.addDocument(doc);\n    doc = new Document();\n    w.commit();\n    doc.add(newField(\"f\", \"who\", StringField.TYPE_UNSTORED));\n    w.addDocument(doc);\n    IndexReader r = new SlowMultiReaderWrapper(w.getReader());\n    w.close();\n\n    assertNull(r.getLiveDocs());\n    r.close();\n\n    r = new SlowMultiReaderWrapper(IndexReader.open(dir, false));\n\n    assertNull(r.getLiveDocs());\n    assertEquals(1, r.deleteDocuments(new Term(\"f\", \"doctor\")));\n    assertNotNull(r.getLiveDocs());\n    assertFalse(r.getLiveDocs().get(0));\n    assertEquals(1, r.deleteDocuments(new Term(\"f\", \"who\")));\n    assertFalse(r.getLiveDocs().get(1));\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3615ce4a1f785ae1b779244de52c6a7d99227e60","date":1323422019,"type":4,"author":"Uwe Schindler","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderDelete#testMultiReaderDeletes().mjava","sourceNew":null,"sourceOld":"  public void testMultiReaderDeletes() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w= new RandomIndexWriter(random, dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    Document doc = new Document();\n    doc.add(newField(\"f\", \"doctor\", StringField.TYPE_UNSTORED));\n    w.addDocument(doc);\n    doc = new Document();\n    w.commit();\n    doc.add(newField(\"f\", \"who\", StringField.TYPE_UNSTORED));\n    w.addDocument(doc);\n    IndexReader r = new SlowMultiReaderWrapper(w.getReader());\n    w.close();\n\n    assertNull(r.getLiveDocs());\n    r.close();\n\n    r = new SlowMultiReaderWrapper(IndexReader.open(dir, false));\n\n    assertNull(r.getLiveDocs());\n    assertEquals(1, r.deleteDocuments(new Term(\"f\", \"doctor\")));\n    assertNotNull(r.getLiveDocs());\n    assertFalse(r.getLiveDocs().get(0));\n    assertEquals(1, r.deleteDocuments(new Term(\"f\", \"who\")));\n    assertFalse(r.getLiveDocs().get(1));\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","date":1323437438,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderDelete#testMultiReaderDeletes().mjava","sourceNew":null,"sourceOld":"  public void testMultiReaderDeletes() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w= new RandomIndexWriter(random, dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    Document doc = new Document();\n    doc.add(newField(\"f\", \"doctor\", StringField.TYPE_UNSTORED));\n    w.addDocument(doc);\n    doc = new Document();\n    w.commit();\n    doc.add(newField(\"f\", \"who\", StringField.TYPE_UNSTORED));\n    w.addDocument(doc);\n    IndexReader r = new SlowMultiReaderWrapper(w.getReader());\n    w.close();\n\n    assertNull(r.getLiveDocs());\n    r.close();\n\n    r = new SlowMultiReaderWrapper(IndexReader.open(dir, false));\n\n    assertNull(r.getLiveDocs());\n    assertEquals(1, r.deleteDocuments(new Term(\"f\", \"doctor\")));\n    assertNotNull(r.getLiveDocs());\n    assertFalse(r.getLiveDocs().get(0));\n    assertEquals(1, r.deleteDocuments(new Term(\"f\", \"who\")));\n    assertFalse(r.getLiveDocs().get(1));\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ff6fd241dc6610f7f81b62e3ba4cedf105939623":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"75ec8c9aaa10ac00b30fd4c2465409770c838f7b":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["1509f151d7692d84fae414b2b799ac06ba60fcb4","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"79c2cb24929f2649a8875fb629086171f914d5ce":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ff6fd241dc6610f7f81b62e3ba4cedf105939623"],"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb":["ff6fd241dc6610f7f81b62e3ba4cedf105939623"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ff6fd241dc6610f7f81b62e3ba4cedf105939623"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["1509f151d7692d84fae414b2b799ac06ba60fcb4","75ec8c9aaa10ac00b30fd4c2465409770c838f7b"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["ff6fd241dc6610f7f81b62e3ba4cedf105939623","e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["79c2cb24929f2649a8875fb629086171f914d5ce","e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3615ce4a1f785ae1b779244de52c6a7d99227e60"]},"commit2Childs":{"ff6fd241dc6610f7f81b62e3ba4cedf105939623":["79c2cb24929f2649a8875fb629086171f914d5ce","e7bd246bb7bc35ac22edfee9157e034dfc4e65eb","77cf4379b2824f6ea34b091c495d6e95c38ff9e2","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"75ec8c9aaa10ac00b30fd4c2465409770c838f7b":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":[],"79c2cb24929f2649a8875fb629086171f914d5ce":["817d8435e9135b756f08ce6710ab0baac51bdf88"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ff6fd241dc6610f7f81b62e3ba4cedf105939623","79c2cb24929f2649a8875fb629086171f914d5ce","77cf4379b2824f6ea34b091c495d6e95c38ff9e2"],"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb":["1509f151d7692d84fae414b2b799ac06ba60fcb4","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":[],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["75ec8c9aaa10ac00b30fd4c2465409770c838f7b","ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","77cf4379b2824f6ea34b091c495d6e95c38ff9e2","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}