{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#testParallelUpdateQTime().mjava","commits":[{"id":"a3ca9e9e0800e26a0d02f8fcf73ec4f8362d0214","date":1442387183,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#testParallelUpdateQTime().mjava","pathOld":"/dev/null","sourceNew":"  private void testParallelUpdateQTime() throws Exception {\n    UpdateRequest req = new UpdateRequest();\n    for (int i=0; i<10; i++)  {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", String.valueOf(TestUtil.nextInt(random(), 1000, 1100)));\n      req.add(doc);\n    }\n    UpdateResponse response = req.process(cloudClient);\n    // See SOLR-6547, we just need to ensure that no exception is thrown here\n    assertTrue(response.getQTime() >= 0);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b940572a59da1b42b6c20ab5278155b12816807a","date":1462388874,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#testParallelUpdateQTime().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#testParallelUpdateQTime().mjava","sourceNew":"  @Test\n  public void testParallelUpdateQTime() throws Exception {\n    UpdateRequest req = new UpdateRequest();\n    for (int i=0; i<10; i++)  {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", String.valueOf(TestUtil.nextInt(random(), 1000, 1100)));\n      req.add(doc);\n    }\n    UpdateResponse response = req.process(cluster.getSolrClient(), COLLECTION);\n    // See SOLR-6547, we just need to ensure that no exception is thrown here\n    assertTrue(response.getQTime() >= 0);\n  }\n\n","sourceOld":"  private void testParallelUpdateQTime() throws Exception {\n    UpdateRequest req = new UpdateRequest();\n    for (int i=0; i<10; i++)  {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", String.valueOf(TestUtil.nextInt(random(), 1000, 1100)));\n      req.add(doc);\n    }\n    UpdateResponse response = req.process(cloudClient);\n    // See SOLR-6547, we just need to ensure that no exception is thrown here\n    assertTrue(response.getQTime() >= 0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bd78ba595fa6cdd7fff930f26d154d13a823fa47","date":1462400514,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#testParallelUpdateQTime().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#testParallelUpdateQTime().mjava","sourceNew":"  @Test\n  public void testParallelUpdateQTime() throws Exception {\n    UpdateRequest req = new UpdateRequest();\n    for (int i=0; i<10; i++)  {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", String.valueOf(TestUtil.nextInt(random(), 1000, 1100)));\n      req.add(doc);\n    }\n    UpdateResponse response = req.process(cluster.getSolrClient(), COLLECTION);\n    // See SOLR-6547, we just need to ensure that no exception is thrown here\n    assertTrue(response.getQTime() >= 0);\n  }\n\n","sourceOld":"  private void testParallelUpdateQTime() throws Exception {\n    UpdateRequest req = new UpdateRequest();\n    for (int i=0; i<10; i++)  {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", String.valueOf(TestUtil.nextInt(random(), 1000, 1100)));\n      req.add(doc);\n    }\n    UpdateResponse response = req.process(cloudClient);\n    // See SOLR-6547, we just need to ensure that no exception is thrown here\n    assertTrue(response.getQTime() >= 0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"73450c0955930295d34703e7ddbfc6973b7a121a","date":1462431925,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#testParallelUpdateQTime().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#testParallelUpdateQTime().mjava","sourceNew":"  @Test\n  public void testParallelUpdateQTime() throws Exception {\n    UpdateRequest req = new UpdateRequest();\n    for (int i=0; i<10; i++)  {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", String.valueOf(TestUtil.nextInt(random(), 1000, 1100)));\n      req.add(doc);\n    }\n    UpdateResponse response = req.process(cluster.getSolrClient(), COLLECTION);\n    // See SOLR-6547, we just need to ensure that no exception is thrown here\n    assertTrue(response.getQTime() >= 0);\n  }\n\n","sourceOld":"  private void testParallelUpdateQTime() throws Exception {\n    UpdateRequest req = new UpdateRequest();\n    for (int i=0; i<10; i++)  {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", String.valueOf(TestUtil.nextInt(random(), 1000, 1100)));\n      req.add(doc);\n    }\n    UpdateResponse response = req.process(cloudClient);\n    // See SOLR-6547, we just need to ensure that no exception is thrown here\n    assertTrue(response.getQTime() >= 0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","date":1462576651,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#testParallelUpdateQTime().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#testParallelUpdateQTime().mjava","sourceNew":"  @Test\n  public void testParallelUpdateQTime() throws Exception {\n    UpdateRequest req = new UpdateRequest();\n    for (int i=0; i<10; i++)  {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", String.valueOf(TestUtil.nextInt(random(), 1000, 1100)));\n      req.add(doc);\n    }\n    UpdateResponse response = req.process(cluster.getSolrClient(), COLLECTION);\n    // See SOLR-6547, we just need to ensure that no exception is thrown here\n    assertTrue(response.getQTime() >= 0);\n  }\n\n","sourceOld":"  private void testParallelUpdateQTime() throws Exception {\n    UpdateRequest req = new UpdateRequest();\n    for (int i=0; i<10; i++)  {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", String.valueOf(TestUtil.nextInt(random(), 1000, 1100)));\n      req.add(doc);\n    }\n    UpdateResponse response = req.process(cloudClient);\n    // See SOLR-6547, we just need to ensure that no exception is thrown here\n    assertTrue(response.getQTime() >= 0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a64b273d51a6540272668680ece9f8b686ff0004","date":1492404078,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#testParallelUpdateQTime().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#testParallelUpdateQTime().mjava","sourceNew":"  @Test\n  public void testParallelUpdateQTime() throws Exception {\n    UpdateRequest req = new UpdateRequest();\n    for (int i=0; i<10; i++)  {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", String.valueOf(TestUtil.nextInt(random(), 1000, 1100)));\n      req.add(doc);\n    }\n    UpdateResponse response = req.process(getRandomClient(), COLLECTION);\n    // See SOLR-6547, we just need to ensure that no exception is thrown here\n    assertTrue(response.getQTime() >= 0);\n  }\n\n","sourceOld":"  @Test\n  public void testParallelUpdateQTime() throws Exception {\n    UpdateRequest req = new UpdateRequest();\n    for (int i=0; i<10; i++)  {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", String.valueOf(TestUtil.nextInt(random(), 1000, 1100)));\n      req.add(doc);\n    }\n    UpdateResponse response = req.process(cluster.getSolrClient(), COLLECTION);\n    // See SOLR-6547, we just need to ensure that no exception is thrown here\n    assertTrue(response.getQTime() >= 0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#testParallelUpdateQTime().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#testParallelUpdateQTime().mjava","sourceNew":"  @Test\n  public void testParallelUpdateQTime() throws Exception {\n    UpdateRequest req = new UpdateRequest();\n    for (int i=0; i<10; i++)  {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", String.valueOf(TestUtil.nextInt(random(), 1000, 1100)));\n      req.add(doc);\n    }\n    UpdateResponse response = req.process(getRandomClient(), COLLECTION);\n    // See SOLR-6547, we just need to ensure that no exception is thrown here\n    assertTrue(response.getQTime() >= 0);\n  }\n\n","sourceOld":"  @Test\n  public void testParallelUpdateQTime() throws Exception {\n    UpdateRequest req = new UpdateRequest();\n    for (int i=0; i<10; i++)  {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", String.valueOf(TestUtil.nextInt(random(), 1000, 1100)));\n      req.add(doc);\n    }\n    UpdateResponse response = req.process(cluster.getSolrClient(), COLLECTION);\n    // See SOLR-6547, we just need to ensure that no exception is thrown here\n    assertTrue(response.getQTime() >= 0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"177e0a3b3d5d15f9cc40e392177343f6945f0fec","date":1539157346,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#testParallelUpdateQTime().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#testParallelUpdateQTime().mjava","sourceNew":"  @Test\n  public void testParallelUpdateQTime() throws Exception {\n    CollectionAdminRequest.createCollection(COLLECTION, \"conf\", 2, 1).process(cluster.getSolrClient());\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(COLLECTION, cluster.getSolrClient().getZkStateReader(),\n        false, true, TIMEOUT);\n    UpdateRequest req = new UpdateRequest();\n    for (int i=0; i<10; i++)  {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", String.valueOf(TestUtil.nextInt(random(), 1000, 1100)));\n      req.add(doc);\n    }\n    UpdateResponse response = req.process(getRandomClient(), COLLECTION);\n    // See SOLR-6547, we just need to ensure that no exception is thrown here\n    assertTrue(response.getQTime() >= 0);\n  }\n\n","sourceOld":"  @Test\n  public void testParallelUpdateQTime() throws Exception {\n    UpdateRequest req = new UpdateRequest();\n    for (int i=0; i<10; i++)  {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", String.valueOf(TestUtil.nextInt(random(), 1000, 1100)));\n      req.add(doc);\n    }\n    UpdateResponse response = req.process(getRandomClient(), COLLECTION);\n    // See SOLR-6547, we just need to ensure that no exception is thrown here\n    assertTrue(response.getQTime() >= 0);\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#testParallelUpdateQTime().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#testParallelUpdateQTime().mjava","sourceNew":"  @Test\n  public void testParallelUpdateQTime() throws Exception {\n    CollectionAdminRequest.createCollection(COLLECTION, \"conf\", 2, 1).process(cluster.getSolrClient());\n    cluster.waitForActiveCollection(COLLECTION, 2, 2);\n    UpdateRequest req = new UpdateRequest();\n    for (int i=0; i<10; i++)  {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", String.valueOf(TestUtil.nextInt(random(), 1000, 1100)));\n      req.add(doc);\n    }\n    UpdateResponse response = req.process(getRandomClient(), COLLECTION);\n    // See SOLR-6547, we just need to ensure that no exception is thrown here\n    assertTrue(response.getQTime() >= 0);\n  }\n\n","sourceOld":"  @Test\n  public void testParallelUpdateQTime() throws Exception {\n    CollectionAdminRequest.createCollection(COLLECTION, \"conf\", 2, 1).process(cluster.getSolrClient());\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(COLLECTION, cluster.getSolrClient().getZkStateReader(),\n        false, true, TIMEOUT);\n    UpdateRequest req = new UpdateRequest();\n    for (int i=0; i<10; i++)  {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", String.valueOf(TestUtil.nextInt(random(), 1000, 1100)));\n      req.add(doc);\n    }\n    UpdateResponse response = req.process(getRandomClient(), COLLECTION);\n    // See SOLR-6547, we just need to ensure that no exception is thrown here\n    assertTrue(response.getQTime() >= 0);\n  }\n\n","bugFix":["177e0a3b3d5d15f9cc40e392177343f6945f0fec"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["73450c0955930295d34703e7ddbfc6973b7a121a"],"bd78ba595fa6cdd7fff930f26d154d13a823fa47":["a3ca9e9e0800e26a0d02f8fcf73ec4f8362d0214","b940572a59da1b42b6c20ab5278155b12816807a"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["177e0a3b3d5d15f9cc40e392177343f6945f0fec"],"a64b273d51a6540272668680ece9f8b686ff0004":["73450c0955930295d34703e7ddbfc6973b7a121a"],"73450c0955930295d34703e7ddbfc6973b7a121a":["a3ca9e9e0800e26a0d02f8fcf73ec4f8362d0214","b940572a59da1b42b6c20ab5278155b12816807a"],"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904":["a3ca9e9e0800e26a0d02f8fcf73ec4f8362d0214","73450c0955930295d34703e7ddbfc6973b7a121a"],"a3ca9e9e0800e26a0d02f8fcf73ec4f8362d0214":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"177e0a3b3d5d15f9cc40e392177343f6945f0fec":["a64b273d51a6540272668680ece9f8b686ff0004"],"b940572a59da1b42b6c20ab5278155b12816807a":["a3ca9e9e0800e26a0d02f8fcf73ec4f8362d0214"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"bd78ba595fa6cdd7fff930f26d154d13a823fa47":[],"73450c0955930295d34703e7ddbfc6973b7a121a":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","a64b273d51a6540272668680ece9f8b686ff0004","a8ed5da4b0191db6bc7f77f9feb35da6bd76f904"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a64b273d51a6540272668680ece9f8b686ff0004":["177e0a3b3d5d15f9cc40e392177343f6945f0fec"],"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904":[],"a3ca9e9e0800e26a0d02f8fcf73ec4f8362d0214":["bd78ba595fa6cdd7fff930f26d154d13a823fa47","73450c0955930295d34703e7ddbfc6973b7a121a","a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","b940572a59da1b42b6c20ab5278155b12816807a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a3ca9e9e0800e26a0d02f8fcf73ec4f8362d0214"],"177e0a3b3d5d15f9cc40e392177343f6945f0fec":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"b940572a59da1b42b6c20ab5278155b12816807a":["bd78ba595fa6cdd7fff930f26d154d13a823fa47","73450c0955930295d34703e7ddbfc6973b7a121a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","bd78ba595fa6cdd7fff930f26d154d13a823fa47","a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}