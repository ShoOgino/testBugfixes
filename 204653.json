{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/ReplicaVariable#postValidate(Clause.Condition).mjava","commits":[{"id":"427edb17549d4bb82462a16eec4ee0533d12d5b7","date":1533006754,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/ReplicaVariable#postValidate(Clause.Condition).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public String postValidate(Clause.Condition condition) {\n    if (condition.computedType == Clause.ComputedType.EQUAL) {\n      if (condition.getClause().tag != null &&\n//              condition.getClause().tag.varType == NODE &&\n          (condition.getClause().tag.op == Operand.WILDCARD || condition.getClause().tag.op == Operand.IN)) {\n        return null;\n      } else {\n        return \"'replica': '#EQUAL` must be used with 'node':'#ANY'\";\n      }\n    }\n    if (condition.computedType == Clause.ComputedType.ALL) {\n      if (condition.getClause().tag != null && (condition.getClause().getTag().op == Operand.IN ||\n          condition.getClause().getTag().op == Operand.WILDCARD)) {\n        return StrUtils.formatString(\"array value or wild card cannot be used for tag {0} with replica : '#ALL'\",\n            condition.getClause().tag.getName());\n      }\n    }\n    return null;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cb4df98176b6dd0ae6ceba71eaa59c9bcb8fe2eb","date":1533364463,"type":5,"author":"noble","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/ReplicaVariable#postValidate(Condition).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/ReplicaVariable#postValidate(Clause.Condition).mjava","sourceNew":"  @Override\n  public String postValidate(Condition condition) {\n    if (condition.computedType == ComputedType.EQUAL) {\n      if (condition.getClause().tag != null &&\n//              condition.getClause().tag.varType == NODE &&\n          (condition.getClause().tag.op == Operand.WILDCARD || condition.getClause().tag.op == Operand.IN)) {\n        return null;\n      } else {\n        return \"'replica': '#EQUAL` must be used with 'node':'#ANY'\";\n      }\n    }\n    if (condition.computedType == ComputedType.ALL) {\n      if (condition.getClause().tag != null && (condition.getClause().getTag().op == Operand.IN ||\n          condition.getClause().getTag().op == Operand.WILDCARD)) {\n        return StrUtils.formatString(\"array value or wild card cannot be used for tag {0} with replica : '#ALL'\",\n            condition.getClause().tag.getName());\n      }\n    }\n    return null;\n  }\n\n","sourceOld":"  @Override\n  public String postValidate(Clause.Condition condition) {\n    if (condition.computedType == Clause.ComputedType.EQUAL) {\n      if (condition.getClause().tag != null &&\n//              condition.getClause().tag.varType == NODE &&\n          (condition.getClause().tag.op == Operand.WILDCARD || condition.getClause().tag.op == Operand.IN)) {\n        return null;\n      } else {\n        return \"'replica': '#EQUAL` must be used with 'node':'#ANY'\";\n      }\n    }\n    if (condition.computedType == Clause.ComputedType.ALL) {\n      if (condition.getClause().tag != null && (condition.getClause().getTag().op == Operand.IN ||\n          condition.getClause().getTag().op == Operand.WILDCARD)) {\n        return StrUtils.formatString(\"array value or wild card cannot be used for tag {0} with replica : '#ALL'\",\n            condition.getClause().tag.getName());\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"427edb17549d4bb82462a16eec4ee0533d12d5b7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cb4df98176b6dd0ae6ceba71eaa59c9bcb8fe2eb":["427edb17549d4bb82462a16eec4ee0533d12d5b7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cb4df98176b6dd0ae6ceba71eaa59c9bcb8fe2eb"]},"commit2Childs":{"427edb17549d4bb82462a16eec4ee0533d12d5b7":["cb4df98176b6dd0ae6ceba71eaa59c9bcb8fe2eb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["427edb17549d4bb82462a16eec4ee0533d12d5b7"],"cb4df98176b6dd0ae6ceba71eaa59c9bcb8fe2eb":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}