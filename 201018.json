{"path":"src/test/org/apache/solr/analysis/BaseTokenTestCase#assertTokEq(List[Token],List[Token],boolean).mjava","commits":[{"id":"de4d615b00f60dce1293e87276b0685ce0f0d621","date":1179940685,"type":1,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/test/org/apache/solr/analysis/BaseTokenTestCase#assertTokEq(List[Token],List[Token],boolean).mjava","pathOld":"src/test/org/apache/solr/analysis/TestSynonymFilter#assertTokEq(List,List,boolean).mjava","sourceNew":"  private void assertTokEq(List<Token> a, List<Token> b, boolean checkOff) {\n    int pos=0;\n    for (Iterator iter = a.iterator(); iter.hasNext();) {\n      Token tok = (Token)iter.next();\n      pos += tok.getPositionIncrement();\n      if (!tokAt(b, tok.termText(), pos\n              , checkOff ? tok.startOffset() : -1\n              , checkOff ? tok.endOffset() : -1\n              )) \n      {\n        fail(a + \"!=\" + b);\n      }\n    }\n  }\n\n","sourceOld":"  private void assertTokEq(List a, List b, boolean checkOff) {\n    int pos=0;\n    for (Iterator iter = a.iterator(); iter.hasNext();) {\n      Token tok = (Token)iter.next();\n      pos += tok.getPositionIncrement();\n      if (!tokAt(b, tok.termText(), pos\n              , checkOff ? tok.startOffset() : -1\n              , checkOff ? tok.endOffset() : -1\n              )) \n      {\n        fail(a + \"!=\" + b);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c90f01e1c0f11ee52212ab38c6d4393b3be8a646","date":1223059437,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/test/org/apache/solr/analysis/BaseTokenTestCase#assertTokEq(List[Token],List[Token],boolean).mjava","pathOld":"src/test/org/apache/solr/analysis/BaseTokenTestCase#assertTokEq(List[Token],List[Token],boolean).mjava","sourceNew":"  private void assertTokEq(List<Token> a, List<Token> b, boolean checkOff) {\n    int pos=0;\n    for (Iterator iter = a.iterator(); iter.hasNext();) {\n      Token tok = (Token)iter.next();\n      pos += tok.getPositionIncrement();\n      if (!tokAt(b, new String(tok.termBuffer(), 0, tok.termLength()), pos\n              , checkOff ? tok.startOffset() : -1\n              , checkOff ? tok.endOffset() : -1\n              )) \n      {\n        fail(a + \"!=\" + b);\n      }\n    }\n  }\n\n","sourceOld":"  private void assertTokEq(List<Token> a, List<Token> b, boolean checkOff) {\n    int pos=0;\n    for (Iterator iter = a.iterator(); iter.hasNext();) {\n      Token tok = (Token)iter.next();\n      pos += tok.getPositionIncrement();\n      if (!tokAt(b, tok.termText(), pos\n              , checkOff ? tok.startOffset() : -1\n              , checkOff ? tok.endOffset() : -1\n              )) \n      {\n        fail(a + \"!=\" + b);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2fd023a662cc25ae7e0ad0f33d71c476a16d0579","date":1261403630,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"src/test/org/apache/solr/analysis/BaseTokenTestCase#assertTokEq(List[Token],List[Token],boolean).mjava","sourceNew":null,"sourceOld":"  private void assertTokEq(List<Token> a, List<Token> b, boolean checkOff) {\n    int pos=0;\n    for (Iterator iter = a.iterator(); iter.hasNext();) {\n      Token tok = (Token)iter.next();\n      pos += tok.getPositionIncrement();\n      if (!tokAt(b, new String(tok.termBuffer(), 0, tok.termLength()), pos\n              , checkOff ? tok.startOffset() : -1\n              , checkOff ? tok.endOffset() : -1\n              )) \n      {\n        fail(a + \"!=\" + b);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c90f01e1c0f11ee52212ab38c6d4393b3be8a646":["de4d615b00f60dce1293e87276b0685ce0f0d621"],"de4d615b00f60dce1293e87276b0685ce0f0d621":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"2fd023a662cc25ae7e0ad0f33d71c476a16d0579":["c90f01e1c0f11ee52212ab38c6d4393b3be8a646"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"c90f01e1c0f11ee52212ab38c6d4393b3be8a646":["2fd023a662cc25ae7e0ad0f33d71c476a16d0579"],"de4d615b00f60dce1293e87276b0685ce0f0d621":["c90f01e1c0f11ee52212ab38c6d4393b3be8a646"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["de4d615b00f60dce1293e87276b0685ce0f0d621"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2fd023a662cc25ae7e0ad0f33d71c476a16d0579":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["2fd023a662cc25ae7e0ad0f33d71c476a16d0579","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}