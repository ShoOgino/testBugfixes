{"path":"lucene/src/test/org/apache/lucene/index/TestOmitTf#testStats().mjava","commits":[{"id":"8d1c6f669427bd8e9bd8d8ed5f4121fcccae384e","date":1314712686,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestOmitTf#testStats().mjava","pathOld":"/dev/null","sourceNew":"  /** test that when freqs are omitted, that totalTermFreq and sumTotalTermFreq are -1 */\n  public void testStats() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random, dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_UNSTORED);\n    ft.setIndexOptions(IndexOptions.DOCS_ONLY);\n    ft.freeze();\n    Field f = newField(\"foo\", \"bar\", ft);\n    doc.add(f);\n    iw.addDocument(doc);\n    IndexReader ir = iw.getReader();\n    iw.close();\n    Terms terms = MultiFields.getTerms(ir, \"foo\");\n    assertEquals(-1, terms.totalTermFreq(new BytesRef(\"bar\")));\n    assertEquals(-1, terms.getSumTotalTermFreq());\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e2297162a22c55456e200caef2cbcb00fe381120","date":1321551342,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestOmitTf#testStats().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestOmitTf#testStats().mjava","sourceNew":"  /** test that when freqs are omitted, that totalTermFreq and sumTotalTermFreq are -1 */\n  public void testStats() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random, dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_UNSTORED);\n    ft.setIndexOptions(IndexOptions.DOCS_ONLY);\n    ft.freeze();\n    Field f = newField(\"foo\", \"bar\", ft);\n    doc.add(f);\n    iw.addDocument(doc);\n    IndexReader ir = iw.getReader();\n    iw.close();\n    Terms terms = MultiFields.getTerms(ir, \"foo\");\n    assertEquals(-1, MultiFields.totalTermFreq(ir, \"foo\", new BytesRef(\"bar\")));\n    assertEquals(-1, terms.getSumTotalTermFreq());\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** test that when freqs are omitted, that totalTermFreq and sumTotalTermFreq are -1 */\n  public void testStats() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random, dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_UNSTORED);\n    ft.setIndexOptions(IndexOptions.DOCS_ONLY);\n    ft.freeze();\n    Field f = newField(\"foo\", \"bar\", ft);\n    doc.add(f);\n    iw.addDocument(doc);\n    IndexReader ir = iw.getReader();\n    iw.close();\n    Terms terms = MultiFields.getTerms(ir, \"foo\");\n    assertEquals(-1, terms.totalTermFreq(new BytesRef(\"bar\")));\n    assertEquals(-1, terms.getSumTotalTermFreq());\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestOmitTf#testStats().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestOmitTf#testStats().mjava","sourceNew":"  /** test that when freqs are omitted, that totalTermFreq and sumTotalTermFreq are -1 */\n  public void testStats() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random, dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_UNSTORED);\n    ft.setIndexOptions(IndexOptions.DOCS_ONLY);\n    ft.freeze();\n    Field f = newField(\"foo\", \"bar\", ft);\n    doc.add(f);\n    iw.addDocument(doc);\n    IndexReader ir = iw.getReader();\n    iw.close();\n    Terms terms = MultiFields.getTerms(ir, \"foo\");\n    assertEquals(-1, MultiFields.totalTermFreq(ir, \"foo\", new BytesRef(\"bar\")));\n    assertEquals(-1, terms.getSumTotalTermFreq());\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** test that when freqs are omitted, that totalTermFreq and sumTotalTermFreq are -1 */\n  public void testStats() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random, dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_UNSTORED);\n    ft.setIndexOptions(IndexOptions.DOCS_ONLY);\n    ft.freeze();\n    Field f = newField(\"foo\", \"bar\", ft);\n    doc.add(f);\n    iw.addDocument(doc);\n    IndexReader ir = iw.getReader();\n    iw.close();\n    Terms terms = MultiFields.getTerms(ir, \"foo\");\n    assertEquals(-1, MultiFields.totalTermFreq(ir, \"foo\", new BytesRef(\"bar\")));\n    assertEquals(-1, terms.getSumTotalTermFreq());\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["e2297162a22c55456e200caef2cbcb00fe381120"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8d1c6f669427bd8e9bd8d8ed5f4121fcccae384e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e2297162a22c55456e200caef2cbcb00fe381120":["8d1c6f669427bd8e9bd8d8ed5f4121fcccae384e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8d1c6f669427bd8e9bd8d8ed5f4121fcccae384e"],"8d1c6f669427bd8e9bd8d8ed5f4121fcccae384e":["e2297162a22c55456e200caef2cbcb00fe381120"],"e2297162a22c55456e200caef2cbcb00fe381120":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}