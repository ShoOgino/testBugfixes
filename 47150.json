{"path":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReaderReopen#createIndex(Random,Directory,boolean).mjava","commits":[{"id":"83e99d44c4a660a48c0fcc7a0108ad0a56dc2f87","date":1328967626,"type":1,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReaderReopen#createIndex(Random,Directory,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexReaderReopen#createIndex(Random,Directory,boolean).mjava","sourceNew":"  public static void createIndex(Random random, Directory dir, boolean multiSegment) throws IOException {\n    IndexWriter.unlock(dir);\n    IndexWriter w = new IndexWriter(dir, LuceneTestCase.newIndexWriterConfig(random,\n        TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMergePolicy(new LogDocMergePolicy()));\n    \n    for (int i = 0; i < 100; i++) {\n      w.addDocument(createDocument(i, 4));\n      if (multiSegment && (i % 10) == 0) {\n        w.commit();\n      }\n    }\n    \n    if (!multiSegment) {\n      w.forceMerge(1);\n    }\n    \n    w.close();\n\n    DirectoryReader r = DirectoryReader.open(dir);\n    if (multiSegment) {\n      assertTrue(r.getSequentialSubReaders().length > 1);\n    } else {\n      assertTrue(r.getSequentialSubReaders().length == 1);\n    }\n    r.close();\n  }\n\n","sourceOld":"  public static void createIndex(Random random, Directory dir, boolean multiSegment) throws IOException {\n    IndexWriter.unlock(dir);\n    IndexWriter w = new IndexWriter(dir, LuceneTestCase.newIndexWriterConfig(random,\n        TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMergePolicy(new LogDocMergePolicy()));\n    \n    for (int i = 0; i < 100; i++) {\n      w.addDocument(createDocument(i, 4));\n      if (multiSegment && (i % 10) == 0) {\n        w.commit();\n      }\n    }\n    \n    if (!multiSegment) {\n      w.forceMerge(1);\n    }\n    \n    w.close();\n\n    DirectoryReader r = DirectoryReader.open(dir);\n    if (multiSegment) {\n      assertTrue(r.getSequentialSubReaders().length > 1);\n    } else {\n      assertTrue(r.getSequentialSubReaders().length == 1);\n    }\n    r.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c","date":1340090669,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReaderReopen#createIndex(Random,Directory,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReaderReopen#createIndex(Random,Directory,boolean).mjava","sourceNew":"  public static void createIndex(Random random, Directory dir, boolean multiSegment) throws IOException {\n    IndexWriter.unlock(dir);\n    IndexWriter w = new IndexWriter(dir, LuceneTestCase.newIndexWriterConfig(random,\n        TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMergePolicy(new LogDocMergePolicy()));\n    \n    for (int i = 0; i < 100; i++) {\n      w.addDocument(createDocument(i, 4));\n      if (multiSegment && (i % 10) == 0) {\n        w.commit();\n      }\n    }\n    \n    if (!multiSegment) {\n      w.forceMerge(1);\n    }\n    \n    w.close();\n\n    DirectoryReader r = DirectoryReader.open(dir);\n    if (multiSegment) {\n      assertTrue(r.getSequentialSubReaders().size() > 1);\n    } else {\n      assertTrue(r.getSequentialSubReaders().size() == 1);\n    }\n    r.close();\n  }\n\n","sourceOld":"  public static void createIndex(Random random, Directory dir, boolean multiSegment) throws IOException {\n    IndexWriter.unlock(dir);\n    IndexWriter w = new IndexWriter(dir, LuceneTestCase.newIndexWriterConfig(random,\n        TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMergePolicy(new LogDocMergePolicy()));\n    \n    for (int i = 0; i < 100; i++) {\n      w.addDocument(createDocument(i, 4));\n      if (multiSegment && (i % 10) == 0) {\n        w.commit();\n      }\n    }\n    \n    if (!multiSegment) {\n      w.forceMerge(1);\n    }\n    \n    w.close();\n\n    DirectoryReader r = DirectoryReader.open(dir);\n    if (multiSegment) {\n      assertTrue(r.getSequentialSubReaders().length > 1);\n    } else {\n      assertTrue(r.getSequentialSubReaders().length == 1);\n    }\n    r.close();\n  }\n\n","bugFix":null,"bugIntro":["ced66195b26fdb1f77ee00e2a77ec6918dedd766"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ced66195b26fdb1f77ee00e2a77ec6918dedd766","date":1344948886,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReaderReopen#createIndex(Random,Directory,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReaderReopen#createIndex(Random,Directory,boolean).mjava","sourceNew":"  public static void createIndex(Random random, Directory dir, boolean multiSegment) throws IOException {\n    IndexWriter.unlock(dir);\n    IndexWriter w = new IndexWriter(dir, LuceneTestCase.newIndexWriterConfig(random,\n        TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMergePolicy(new LogDocMergePolicy()));\n    \n    for (int i = 0; i < 100; i++) {\n      w.addDocument(createDocument(i, 4));\n      if (multiSegment && (i % 10) == 0) {\n        w.commit();\n      }\n    }\n    \n    if (!multiSegment) {\n      w.forceMerge(1);\n    }\n    \n    w.close();\n\n    DirectoryReader r = DirectoryReader.open(dir);\n    if (multiSegment) {\n      assertTrue(r.leaves().size() > 1);\n    } else {\n      assertTrue(r.leaves().size() == 1);\n    }\n    r.close();\n  }\n\n","sourceOld":"  public static void createIndex(Random random, Directory dir, boolean multiSegment) throws IOException {\n    IndexWriter.unlock(dir);\n    IndexWriter w = new IndexWriter(dir, LuceneTestCase.newIndexWriterConfig(random,\n        TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMergePolicy(new LogDocMergePolicy()));\n    \n    for (int i = 0; i < 100; i++) {\n      w.addDocument(createDocument(i, 4));\n      if (multiSegment && (i % 10) == 0) {\n        w.commit();\n      }\n    }\n    \n    if (!multiSegment) {\n      w.forceMerge(1);\n    }\n    \n    w.close();\n\n    DirectoryReader r = DirectoryReader.open(dir);\n    if (multiSegment) {\n      assertTrue(r.getSequentialSubReaders().size() > 1);\n    } else {\n      assertTrue(r.getSequentialSubReaders().size() == 1);\n    }\n    r.close();\n  }\n\n","bugFix":["4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","date":1345029782,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReaderReopen#createIndex(Random,Directory,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReaderReopen#createIndex(Random,Directory,boolean).mjava","sourceNew":"  public static void createIndex(Random random, Directory dir, boolean multiSegment) throws IOException {\n    IndexWriter.unlock(dir);\n    IndexWriter w = new IndexWriter(dir, LuceneTestCase.newIndexWriterConfig(random,\n        TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMergePolicy(new LogDocMergePolicy()));\n    \n    for (int i = 0; i < 100; i++) {\n      w.addDocument(createDocument(i, 4));\n      if (multiSegment && (i % 10) == 0) {\n        w.commit();\n      }\n    }\n    \n    if (!multiSegment) {\n      w.forceMerge(1);\n    }\n    \n    w.close();\n\n    DirectoryReader r = DirectoryReader.open(dir);\n    if (multiSegment) {\n      assertTrue(r.leaves().size() > 1);\n    } else {\n      assertTrue(r.leaves().size() == 1);\n    }\n    r.close();\n  }\n\n","sourceOld":"  public static void createIndex(Random random, Directory dir, boolean multiSegment) throws IOException {\n    IndexWriter.unlock(dir);\n    IndexWriter w = new IndexWriter(dir, LuceneTestCase.newIndexWriterConfig(random,\n        TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMergePolicy(new LogDocMergePolicy()));\n    \n    for (int i = 0; i < 100; i++) {\n      w.addDocument(createDocument(i, 4));\n      if (multiSegment && (i % 10) == 0) {\n        w.commit();\n      }\n    }\n    \n    if (!multiSegment) {\n      w.forceMerge(1);\n    }\n    \n    w.close();\n\n    DirectoryReader r = DirectoryReader.open(dir);\n    if (multiSegment) {\n      assertTrue(r.getSequentialSubReaders().size() > 1);\n    } else {\n      assertTrue(r.getSequentialSubReaders().size() == 1);\n    }\n    r.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3c188105a9aae04f56c24996f98f8333fc825d2e","date":1345031914,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReaderReopen#createIndex(Random,Directory,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReaderReopen#createIndex(Random,Directory,boolean).mjava","sourceNew":"  public static void createIndex(Random random, Directory dir, boolean multiSegment) throws IOException {\n    IndexWriter.unlock(dir);\n    IndexWriter w = new IndexWriter(dir, LuceneTestCase.newIndexWriterConfig(random,\n        TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMergePolicy(new LogDocMergePolicy()));\n    \n    for (int i = 0; i < 100; i++) {\n      w.addDocument(createDocument(i, 4));\n      if (multiSegment && (i % 10) == 0) {\n        w.commit();\n      }\n    }\n    \n    if (!multiSegment) {\n      w.forceMerge(1);\n    }\n    \n    w.close();\n\n    DirectoryReader r = DirectoryReader.open(dir);\n    if (multiSegment) {\n      assertTrue(r.leaves().size() > 1);\n    } else {\n      assertTrue(r.leaves().size() == 1);\n    }\n    r.close();\n  }\n\n","sourceOld":"  public static void createIndex(Random random, Directory dir, boolean multiSegment) throws IOException {\n    IndexWriter.unlock(dir);\n    IndexWriter w = new IndexWriter(dir, LuceneTestCase.newIndexWriterConfig(random,\n        TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMergePolicy(new LogDocMergePolicy()));\n    \n    for (int i = 0; i < 100; i++) {\n      w.addDocument(createDocument(i, 4));\n      if (multiSegment && (i % 10) == 0) {\n        w.commit();\n      }\n    }\n    \n    if (!multiSegment) {\n      w.forceMerge(1);\n    }\n    \n    w.close();\n\n    DirectoryReader r = DirectoryReader.open(dir);\n    if (multiSegment) {\n      assertTrue(r.getSequentialSubReaders().size() > 1);\n    } else {\n      assertTrue(r.getSequentialSubReaders().size() == 1);\n    }\n    r.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1c93396a1df03720cb20e2c2f513a6fa59b21e4c","date":1345032673,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReaderReopen#createIndex(Random,Directory,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReaderReopen#createIndex(Random,Directory,boolean).mjava","sourceNew":"  public static void createIndex(Random random, Directory dir, boolean multiSegment) throws IOException {\n    IndexWriter.unlock(dir);\n    IndexWriter w = new IndexWriter(dir, LuceneTestCase.newIndexWriterConfig(random,\n        TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMergePolicy(new LogDocMergePolicy()));\n    \n    for (int i = 0; i < 100; i++) {\n      w.addDocument(createDocument(i, 4));\n      if (multiSegment && (i % 10) == 0) {\n        w.commit();\n      }\n    }\n    \n    if (!multiSegment) {\n      w.forceMerge(1);\n    }\n    \n    w.close();\n\n    DirectoryReader r = DirectoryReader.open(dir);\n    if (multiSegment) {\n      assertTrue(r.getSequentialSubReaders().size() > 1);\n    } else {\n      assertTrue(r.getSequentialSubReaders().size() == 1);\n    }\n    r.close();\n  }\n\n","sourceOld":"  public static void createIndex(Random random, Directory dir, boolean multiSegment) throws IOException {\n    IndexWriter.unlock(dir);\n    IndexWriter w = new IndexWriter(dir, LuceneTestCase.newIndexWriterConfig(random,\n        TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMergePolicy(new LogDocMergePolicy()));\n    \n    for (int i = 0; i < 100; i++) {\n      w.addDocument(createDocument(i, 4));\n      if (multiSegment && (i % 10) == 0) {\n        w.commit();\n      }\n    }\n    \n    if (!multiSegment) {\n      w.forceMerge(1);\n    }\n    \n    w.close();\n\n    DirectoryReader r = DirectoryReader.open(dir);\n    if (multiSegment) {\n      assertTrue(r.leaves().size() > 1);\n    } else {\n      assertTrue(r.leaves().size() == 1);\n    }\n    r.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b05c56a41b733e02a189c48895922b5bd8c7f3d1","date":1345033322,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReaderReopen#createIndex(Random,Directory,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReaderReopen#createIndex(Random,Directory,boolean).mjava","sourceNew":"  public static void createIndex(Random random, Directory dir, boolean multiSegment) throws IOException {\n    IndexWriter.unlock(dir);\n    IndexWriter w = new IndexWriter(dir, LuceneTestCase.newIndexWriterConfig(random,\n        TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMergePolicy(new LogDocMergePolicy()));\n    \n    for (int i = 0; i < 100; i++) {\n      w.addDocument(createDocument(i, 4));\n      if (multiSegment && (i % 10) == 0) {\n        w.commit();\n      }\n    }\n    \n    if (!multiSegment) {\n      w.forceMerge(1);\n    }\n    \n    w.close();\n\n    DirectoryReader r = DirectoryReader.open(dir);\n    if (multiSegment) {\n      assertTrue(r.leaves().size() > 1);\n    } else {\n      assertTrue(r.leaves().size() == 1);\n    }\n    r.close();\n  }\n\n","sourceOld":"  public static void createIndex(Random random, Directory dir, boolean multiSegment) throws IOException {\n    IndexWriter.unlock(dir);\n    IndexWriter w = new IndexWriter(dir, LuceneTestCase.newIndexWriterConfig(random,\n        TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMergePolicy(new LogDocMergePolicy()));\n    \n    for (int i = 0; i < 100; i++) {\n      w.addDocument(createDocument(i, 4));\n      if (multiSegment && (i % 10) == 0) {\n        w.commit();\n      }\n    }\n    \n    if (!multiSegment) {\n      w.forceMerge(1);\n    }\n    \n    w.close();\n\n    DirectoryReader r = DirectoryReader.open(dir);\n    if (multiSegment) {\n      assertTrue(r.getSequentialSubReaders().size() > 1);\n    } else {\n      assertTrue(r.getSequentialSubReaders().size() == 1);\n    }\n    r.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReaderReopen#createIndex(Random,Directory,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReaderReopen#createIndex(Random,Directory,boolean).mjava","sourceNew":"  public static void createIndex(Random random, Directory dir, boolean multiSegment) throws IOException {\n    IndexWriter.unlock(dir);\n    IndexWriter w = new IndexWriter(dir, LuceneTestCase.newIndexWriterConfig(random,\n        TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMergePolicy(new LogDocMergePolicy()));\n    \n    for (int i = 0; i < 100; i++) {\n      w.addDocument(createDocument(i, 4));\n      if (multiSegment && (i % 10) == 0) {\n        w.commit();\n      }\n    }\n    \n    if (!multiSegment) {\n      w.forceMerge(1);\n    }\n    \n    w.shutdown();\n\n    DirectoryReader r = DirectoryReader.open(dir);\n    if (multiSegment) {\n      assertTrue(r.leaves().size() > 1);\n    } else {\n      assertTrue(r.leaves().size() == 1);\n    }\n    r.close();\n  }\n\n","sourceOld":"  public static void createIndex(Random random, Directory dir, boolean multiSegment) throws IOException {\n    IndexWriter.unlock(dir);\n    IndexWriter w = new IndexWriter(dir, LuceneTestCase.newIndexWriterConfig(random,\n        TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMergePolicy(new LogDocMergePolicy()));\n    \n    for (int i = 0; i < 100; i++) {\n      w.addDocument(createDocument(i, 4));\n      if (multiSegment && (i % 10) == 0) {\n        w.commit();\n      }\n    }\n    \n    if (!multiSegment) {\n      w.forceMerge(1);\n    }\n    \n    w.close();\n\n    DirectoryReader r = DirectoryReader.open(dir);\n    if (multiSegment) {\n      assertTrue(r.leaves().size() > 1);\n    } else {\n      assertTrue(r.leaves().size() == 1);\n    }\n    r.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReaderReopen#createIndex(Random,Directory,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReaderReopen#createIndex(Random,Directory,boolean).mjava","sourceNew":"  public static void createIndex(Random random, Directory dir, boolean multiSegment) throws IOException {\n    IndexWriter.unlock(dir);\n    IndexWriter w = new IndexWriter(dir, LuceneTestCase.newIndexWriterConfig(random, new MockAnalyzer(random))\n        .setMergePolicy(new LogDocMergePolicy()));\n    \n    for (int i = 0; i < 100; i++) {\n      w.addDocument(createDocument(i, 4));\n      if (multiSegment && (i % 10) == 0) {\n        w.commit();\n      }\n    }\n    \n    if (!multiSegment) {\n      w.forceMerge(1);\n    }\n    \n    w.close();\n\n    DirectoryReader r = DirectoryReader.open(dir);\n    if (multiSegment) {\n      assertTrue(r.leaves().size() > 1);\n    } else {\n      assertTrue(r.leaves().size() == 1);\n    }\n    r.close();\n  }\n\n","sourceOld":"  public static void createIndex(Random random, Directory dir, boolean multiSegment) throws IOException {\n    IndexWriter.unlock(dir);\n    IndexWriter w = new IndexWriter(dir, LuceneTestCase.newIndexWriterConfig(random,\n        TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMergePolicy(new LogDocMergePolicy()));\n    \n    for (int i = 0; i < 100; i++) {\n      w.addDocument(createDocument(i, 4));\n      if (multiSegment && (i % 10) == 0) {\n        w.commit();\n      }\n    }\n    \n    if (!multiSegment) {\n      w.forceMerge(1);\n    }\n    \n    w.shutdown();\n\n    DirectoryReader r = DirectoryReader.open(dir);\n    if (multiSegment) {\n      assertTrue(r.leaves().size() > 1);\n    } else {\n      assertTrue(r.leaves().size() == 1);\n    }\n    r.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fafd23b8e49a461cdbc22b302dfdea2f2a08d953","date":1415887806,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReaderReopen#createIndex(Random,Directory,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReaderReopen#createIndex(Random,Directory,boolean).mjava","sourceNew":"  public static void createIndex(Random random, Directory dir, boolean multiSegment) throws IOException {\n    IndexWriter w = new IndexWriter(dir, LuceneTestCase.newIndexWriterConfig(random, new MockAnalyzer(random))\n        .setMergePolicy(new LogDocMergePolicy()));\n    \n    for (int i = 0; i < 100; i++) {\n      w.addDocument(createDocument(i, 4));\n      if (multiSegment && (i % 10) == 0) {\n        w.commit();\n      }\n    }\n    \n    if (!multiSegment) {\n      w.forceMerge(1);\n    }\n    \n    w.close();\n\n    DirectoryReader r = DirectoryReader.open(dir);\n    if (multiSegment) {\n      assertTrue(r.leaves().size() > 1);\n    } else {\n      assertTrue(r.leaves().size() == 1);\n    }\n    r.close();\n  }\n\n","sourceOld":"  public static void createIndex(Random random, Directory dir, boolean multiSegment) throws IOException {\n    IndexWriter.unlock(dir);\n    IndexWriter w = new IndexWriter(dir, LuceneTestCase.newIndexWriterConfig(random, new MockAnalyzer(random))\n        .setMergePolicy(new LogDocMergePolicy()));\n    \n    for (int i = 0; i < 100; i++) {\n      w.addDocument(createDocument(i, 4));\n      if (multiSegment && (i % 10) == 0) {\n        w.commit();\n      }\n    }\n    \n    if (!multiSegment) {\n      w.forceMerge(1);\n    }\n    \n    w.close();\n\n    DirectoryReader r = DirectoryReader.open(dir);\n    if (multiSegment) {\n      assertTrue(r.leaves().size() > 1);\n    } else {\n      assertTrue(r.leaves().size() == 1);\n    }\n    r.close();\n  }\n\n","bugFix":["6db660b56f04fdb2853d25cdee8ee0d36559a521"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"83e99d44c4a660a48c0fcc7a0108ad0a56dc2f87":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3c188105a9aae04f56c24996f98f8333fc825d2e":["4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c"],"4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c":["83e99d44c4a660a48c0fcc7a0108ad0a56dc2f87"],"b05c56a41b733e02a189c48895922b5bd8c7f3d1":["1c93396a1df03720cb20e2c2f513a6fa59b21e4c","ced66195b26fdb1f77ee00e2a77ec6918dedd766"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"1c93396a1df03720cb20e2c2f513a6fa59b21e4c":["3c188105a9aae04f56c24996f98f8333fc825d2e"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["ced66195b26fdb1f77ee00e2a77ec6918dedd766"],"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198":["4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c","ced66195b26fdb1f77ee00e2a77ec6918dedd766"],"fafd23b8e49a461cdbc22b302dfdea2f2a08d953":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"ced66195b26fdb1f77ee00e2a77ec6918dedd766":["4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fafd23b8e49a461cdbc22b302dfdea2f2a08d953"]},"commit2Childs":{"83e99d44c4a660a48c0fcc7a0108ad0a56dc2f87":["4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c"],"3c188105a9aae04f56c24996f98f8333fc825d2e":["1c93396a1df03720cb20e2c2f513a6fa59b21e4c"],"4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c":["3c188105a9aae04f56c24996f98f8333fc825d2e","c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","ced66195b26fdb1f77ee00e2a77ec6918dedd766"],"b05c56a41b733e02a189c48895922b5bd8c7f3d1":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["83e99d44c4a660a48c0fcc7a0108ad0a56dc2f87"],"1c93396a1df03720cb20e2c2f513a6fa59b21e4c":["b05c56a41b733e02a189c48895922b5bd8c7f3d1"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["fafd23b8e49a461cdbc22b302dfdea2f2a08d953"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198":[],"ced66195b26fdb1f77ee00e2a77ec6918dedd766":["b05c56a41b733e02a189c48895922b5bd8c7f3d1","ae14298f4eec6d5faee6a149f88ba57d14a6f21a","c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198"],"fafd23b8e49a461cdbc22b302dfdea2f2a08d953":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b05c56a41b733e02a189c48895922b5bd8c7f3d1","c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}