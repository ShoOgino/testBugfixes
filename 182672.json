{"path":"lucene/sandbox/src/java/org/apache/lucene/rangetree/NumericRangeTreeQuery#toString(String).mjava","commits":[{"id":"8c12c43c449a172df0f2b122918f0f5fc0e9a470","date":1438415333,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/rangetree/NumericRangeTreeQuery#toString(String).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public String toString(String field) {\n    final StringBuilder sb = new StringBuilder();\n    sb.append(getClass().getSimpleName());\n    sb.append(':');\n    if (this.field.equals(field) == false) {\n      sb.append(\"field=\");\n      sb.append(this.field);\n      sb.append(':');\n    }\n\n    return sb.append(minInclusive ? '[' : '{')\n      .append((minValue == null) ? \"*\" : minValue.toString())\n      .append(\" TO \")\n      .append((maxValue == null) ? \"*\" : maxValue.toString())\n      .append(maxInclusive ? ']' : '}')\n      .append(ToStringUtils.boost(getBoost()))\n      .toString();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2dfdf766e55e943d942055d7de53c7ad6bc45283","date":1441632886,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/rangetree/NumericRangeTreeQuery#toString(String).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/rangetree/NumericRangeTreeQuery#toString(String).mjava","sourceNew":"  @Override\n  public String toString(String field) {\n    final StringBuilder sb = new StringBuilder();\n    sb.append(getClass().getSimpleName());\n    sb.append(':');\n    if (this.field.equals(field) == false) {\n      sb.append(\"field=\");\n      sb.append(this.field);\n      sb.append(':');\n    }\n\n    return sb.append(minInclusive ? '[' : '{')\n      .append((minValue == null) ? \"*\" : minValue.toString())\n      .append(\" TO \")\n      .append((maxValue == null) ? \"*\" : maxValue.toString())\n      .append(maxInclusive ? ']' : '}')\n      .toString();\n  }\n\n","sourceOld":"  @Override\n  public String toString(String field) {\n    final StringBuilder sb = new StringBuilder();\n    sb.append(getClass().getSimpleName());\n    sb.append(':');\n    if (this.field.equals(field) == false) {\n      sb.append(\"field=\");\n      sb.append(this.field);\n      sb.append(':');\n    }\n\n    return sb.append(minInclusive ? '[' : '{')\n      .append((minValue == null) ? \"*\" : minValue.toString())\n      .append(\" TO \")\n      .append((maxValue == null) ? \"*\" : maxValue.toString())\n      .append(maxInclusive ? ']' : '}')\n      .append(ToStringUtils.boost(getBoost()))\n      .toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1904709ea0185dc04e3d77ea01c79e909caf2796","date":1447006699,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DimensionalRangeQuery#toString(String).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/rangetree/NumericRangeTreeQuery#toString(String).mjava","sourceNew":"  @Override\n  public String toString(String field) {\n    final StringBuilder sb = new StringBuilder();\n    sb.append(getClass().getSimpleName());\n    sb.append(':');\n    if (this.field.equals(field) == false) {\n      sb.append(\"field=\");\n      sb.append(this.field);\n      sb.append(':');\n    }\n\n    return sb.append('[')\n      .append(Arrays.toString(lowerPoint))\n      .append(\" TO \")\n      .append(Arrays.toString(upperPoint))\n      .append(']')\n      .toString();\n  }\n\n","sourceOld":"  @Override\n  public String toString(String field) {\n    final StringBuilder sb = new StringBuilder();\n    sb.append(getClass().getSimpleName());\n    sb.append(':');\n    if (this.field.equals(field) == false) {\n      sb.append(\"field=\");\n      sb.append(this.field);\n      sb.append(':');\n    }\n\n    return sb.append(minInclusive ? '[' : '{')\n      .append((minValue == null) ? \"*\" : minValue.toString())\n      .append(\" TO \")\n      .append((maxValue == null) ? \"*\" : maxValue.toString())\n      .append(maxInclusive ? ']' : '}')\n      .toString();\n  }\n\n","bugFix":null,"bugIntro":["5839bca64b33c24668e37476ee168d00dc0bb96d"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"8c12c43c449a172df0f2b122918f0f5fc0e9a470":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["8c12c43c449a172df0f2b122918f0f5fc0e9a470"],"1904709ea0185dc04e3d77ea01c79e909caf2796":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1904709ea0185dc04e3d77ea01c79e909caf2796"]},"commit2Childs":{"8c12c43c449a172df0f2b122918f0f5fc0e9a470":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8c12c43c449a172df0f2b122918f0f5fc0e9a470"],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["1904709ea0185dc04e3d77ea01c79e909caf2796"],"1904709ea0185dc04e3d77ea01c79e909caf2796":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}