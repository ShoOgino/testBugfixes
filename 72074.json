{"path":"lucene/facet/src/java/org/apache/lucene/util/encoding/UniqueValuesIntEncoder#encode(IntsRef,BytesRef).mjava","commits":[{"id":"ad883775f8b169218a8da5ffeb7ae26459443936","date":1358342713,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/util/encoding/UniqueValuesIntEncoder#encode(IntsRef,BytesRef).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/util/encoding/UniqueValuesIntEncoder#doEncode(IntsRef,BytesRef,int).mjava","sourceNew":"  @Override\n  public void encode(IntsRef values, BytesRef buf) {\n    int prev = values.ints[values.offset];\n    int idx = values.offset + 1;\n    int upto = values.offset + values.length;\n    for (int i = idx; i < upto; i++) {\n      if (values.ints[i] != prev) {\n        values.ints[idx++] = values.ints[i];\n        prev = values.ints[i];\n      }\n    }\n    values.length = idx - values.offset;\n    encoder.encode(values, buf);\n  }\n\n","sourceOld":"  @Override\n  protected void doEncode(IntsRef values, BytesRef buf, int upto) {\n    int prev = values.ints[values.offset];\n    int idx = values.offset + 1;\n    for (int i = idx; i < upto; i++) {\n      if (values.ints[i] != prev) {\n        values.ints[idx++] = values.ints[i];\n        prev = values.ints[i];\n      }\n    }\n    values.length = idx - values.offset;\n    encoder.doEncode(values, buf, idx);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c4015cd39dff8d4dec562d909f9766debac53aa6","date":1358548736,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/util/encoding/UniqueValuesIntEncoder#encode(IntsRef,BytesRef).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/util/encoding/UniqueValuesIntEncoder#doEncode(IntsRef,BytesRef,int).mjava","sourceNew":"  @Override\n  public void encode(IntsRef values, BytesRef buf) {\n    int prev = values.ints[values.offset];\n    int idx = values.offset + 1;\n    int upto = values.offset + values.length;\n    for (int i = idx; i < upto; i++) {\n      if (values.ints[i] != prev) {\n        values.ints[idx++] = values.ints[i];\n        prev = values.ints[i];\n      }\n    }\n    values.length = idx - values.offset;\n    encoder.encode(values, buf);\n  }\n\n","sourceOld":"  @Override\n  protected void doEncode(IntsRef values, BytesRef buf, int upto) {\n    int prev = values.ints[values.offset];\n    int idx = values.offset + 1;\n    for (int i = idx; i < upto; i++) {\n      if (values.ints[i] != prev) {\n        values.ints[idx++] = values.ints[i];\n        prev = values.ints[i];\n      }\n    }\n    values.length = idx - values.offset;\n    encoder.doEncode(values, buf, idx);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"607428da722dcb3e86bbd11c63de8986e6275c36","date":1360334150,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/encoding/UniqueValuesIntEncoder#encode(IntsRef,BytesRef).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/util/encoding/UniqueValuesIntEncoder#encode(IntsRef,BytesRef).mjava","sourceNew":"  @Override\n  public void encode(IntsRef values, BytesRef buf) {\n    int prev = values.ints[values.offset];\n    int idx = values.offset + 1;\n    int upto = values.offset + values.length;\n    for (int i = idx; i < upto; i++) {\n      if (values.ints[i] != prev) {\n        values.ints[idx++] = values.ints[i];\n        prev = values.ints[i];\n      }\n    }\n    values.length = idx - values.offset;\n    encoder.encode(values, buf);\n  }\n\n","sourceOld":"  @Override\n  public void encode(IntsRef values, BytesRef buf) {\n    int prev = values.ints[values.offset];\n    int idx = values.offset + 1;\n    int upto = values.offset + values.length;\n    for (int i = idx; i < upto; i++) {\n      if (values.ints[i] != prev) {\n        values.ints[idx++] = values.ints[i];\n        prev = values.ints[i];\n      }\n    }\n    values.length = idx - values.offset;\n    encoder.encode(values, buf);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"607428da722dcb3e86bbd11c63de8986e6275c36":["ad883775f8b169218a8da5ffeb7ae26459443936"],"c4015cd39dff8d4dec562d909f9766debac53aa6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ad883775f8b169218a8da5ffeb7ae26459443936"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["607428da722dcb3e86bbd11c63de8986e6275c36"],"ad883775f8b169218a8da5ffeb7ae26459443936":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"607428da722dcb3e86bbd11c63de8986e6275c36":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c4015cd39dff8d4dec562d909f9766debac53aa6":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c4015cd39dff8d4dec562d909f9766debac53aa6","ad883775f8b169218a8da5ffeb7ae26459443936"],"ad883775f8b169218a8da5ffeb7ae26459443936":["607428da722dcb3e86bbd11c63de8986e6275c36","c4015cd39dff8d4dec562d909f9766debac53aa6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c4015cd39dff8d4dec562d909f9766debac53aa6","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}