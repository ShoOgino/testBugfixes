{"path":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempBlockTreeTermsReader.Stats#toString().mjava","commits":[{"id":"6d01ed6d1df51191983f4dd157aedf5f4650e2b3","date":1376572546,"type":1,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempBlockTreeTermsReader.Stats#toString().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempBlockTermsReader.Stats#toString().mjava","sourceNew":"    @Override\n    public String toString() {\n      final ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n      PrintStream out;\n      try {\n        out = new PrintStream(bos, false, \"UTF-8\");\n      } catch (UnsupportedEncodingException bogus) {\n        throw new RuntimeException(bogus);\n      }\n      \n      out.println(\"  index FST:\");\n      out.println(\"    \" + indexNodeCount + \" nodes\");\n      out.println(\"    \" + indexArcCount + \" arcs\");\n      out.println(\"    \" + indexNumBytes + \" bytes\");\n      out.println(\"  terms:\");\n      out.println(\"    \" + totalTermCount + \" terms\");\n      out.println(\"    \" + totalTermBytes + \" bytes\" + (totalTermCount != 0 ? \" (\" + String.format(Locale.ROOT, \"%.1f\", ((double) totalTermBytes)/totalTermCount) + \" bytes/term)\" : \"\"));\n      out.println(\"  blocks:\");\n      out.println(\"    \" + totalBlockCount + \" blocks\");\n      out.println(\"    \" + termsOnlyBlockCount + \" terms-only blocks\");\n      out.println(\"    \" + subBlocksOnlyBlockCount + \" sub-block-only blocks\");\n      out.println(\"    \" + mixedBlockCount + \" mixed blocks\");\n      out.println(\"    \" + floorBlockCount + \" floor blocks\");\n      out.println(\"    \" + (totalBlockCount-floorSubBlockCount) + \" non-floor blocks\");\n      out.println(\"    \" + floorSubBlockCount + \" floor sub-blocks\");\n      out.println(\"    \" + totalBlockSuffixBytes + \" term suffix bytes\" + (totalBlockCount != 0 ? \" (\" + String.format(Locale.ROOT, \"%.1f\", ((double) totalBlockSuffixBytes)/totalBlockCount) + \" suffix-bytes/block)\" : \"\"));\n      out.println(\"    \" + totalBlockStatsBytes + \" term stats bytes\" + (totalBlockCount != 0 ? \" (\" + String.format(Locale.ROOT, \"%.1f\", ((double) totalBlockStatsBytes)/totalBlockCount) + \" stats-bytes/block)\" : \"\"));\n      out.println(\"    \" + totalBlockOtherBytes + \" other bytes\" + (totalBlockCount != 0 ? \" (\" + String.format(Locale.ROOT, \"%.1f\", ((double) totalBlockOtherBytes)/totalBlockCount) + \" other-bytes/block)\" : \"\"));\n      if (totalBlockCount != 0) {\n        out.println(\"    by prefix length:\");\n        int total = 0;\n        for(int prefix=0;prefix<blockCountByPrefixLen.length;prefix++) {\n          final int blockCount = blockCountByPrefixLen[prefix];\n          total += blockCount;\n          if (blockCount != 0) {\n            out.println(\"      \" + String.format(Locale.ROOT, \"%2d\", prefix) + \": \" + blockCount);\n          }\n        }\n        assert totalBlockCount == total;\n      }\n\n      try {\n        return bos.toString(\"UTF-8\");\n      } catch (UnsupportedEncodingException bogus) {\n        throw new RuntimeException(bogus);\n      }\n    }\n\n","sourceOld":"    @Override\n    public String toString() {\n      final ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n      PrintStream out;\n      try {\n        out = new PrintStream(bos, false, \"UTF-8\");\n      } catch (UnsupportedEncodingException bogus) {\n        throw new RuntimeException(bogus);\n      }\n      \n      out.println(\"  index FST:\");\n      out.println(\"    \" + indexNodeCount + \" nodes\");\n      out.println(\"    \" + indexArcCount + \" arcs\");\n      out.println(\"    \" + indexNumBytes + \" bytes\");\n      out.println(\"  terms:\");\n      out.println(\"    \" + totalTermCount + \" terms\");\n      out.println(\"    \" + totalTermBytes + \" bytes\" + (totalTermCount != 0 ? \" (\" + String.format(Locale.ROOT, \"%.1f\", ((double) totalTermBytes)/totalTermCount) + \" bytes/term)\" : \"\"));\n      out.println(\"  blocks:\");\n      out.println(\"    \" + totalBlockCount + \" blocks\");\n      out.println(\"    \" + termsOnlyBlockCount + \" terms-only blocks\");\n      out.println(\"    \" + subBlocksOnlyBlockCount + \" sub-block-only blocks\");\n      out.println(\"    \" + mixedBlockCount + \" mixed blocks\");\n      out.println(\"    \" + floorBlockCount + \" floor blocks\");\n      out.println(\"    \" + (totalBlockCount-floorSubBlockCount) + \" non-floor blocks\");\n      out.println(\"    \" + floorSubBlockCount + \" floor sub-blocks\");\n      out.println(\"    \" + totalBlockSuffixBytes + \" term suffix bytes\" + (totalBlockCount != 0 ? \" (\" + String.format(Locale.ROOT, \"%.1f\", ((double) totalBlockSuffixBytes)/totalBlockCount) + \" suffix-bytes/block)\" : \"\"));\n      out.println(\"    \" + totalBlockStatsBytes + \" term stats bytes\" + (totalBlockCount != 0 ? \" (\" + String.format(Locale.ROOT, \"%.1f\", ((double) totalBlockStatsBytes)/totalBlockCount) + \" stats-bytes/block)\" : \"\"));\n      out.println(\"    \" + totalBlockOtherBytes + \" other bytes\" + (totalBlockCount != 0 ? \" (\" + String.format(Locale.ROOT, \"%.1f\", ((double) totalBlockOtherBytes)/totalBlockCount) + \" other-bytes/block)\" : \"\"));\n      if (totalBlockCount != 0) {\n        out.println(\"    by prefix length:\");\n        int total = 0;\n        for(int prefix=0;prefix<blockCountByPrefixLen.length;prefix++) {\n          final int blockCount = blockCountByPrefixLen[prefix];\n          total += blockCount;\n          if (blockCount != 0) {\n            out.println(\"      \" + String.format(Locale.ROOT, \"%2d\", prefix) + \": \" + blockCount);\n          }\n        }\n        assert totalBlockCount == total;\n      }\n\n      try {\n        return bos.toString(\"UTF-8\");\n      } catch (UnsupportedEncodingException bogus) {\n        throw new RuntimeException(bogus);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e6904bcc97d8afa27bd72ee29ac01e525e327ad4","date":1377958787,"type":4,"author":"Han Jiang","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempBlockTreeTermsReader.Stats#toString().mjava","sourceNew":null,"sourceOld":"    @Override\n    public String toString() {\n      final ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n      PrintStream out;\n      try {\n        out = new PrintStream(bos, false, \"UTF-8\");\n      } catch (UnsupportedEncodingException bogus) {\n        throw new RuntimeException(bogus);\n      }\n      \n      out.println(\"  index FST:\");\n      out.println(\"    \" + indexNodeCount + \" nodes\");\n      out.println(\"    \" + indexArcCount + \" arcs\");\n      out.println(\"    \" + indexNumBytes + \" bytes\");\n      out.println(\"  terms:\");\n      out.println(\"    \" + totalTermCount + \" terms\");\n      out.println(\"    \" + totalTermBytes + \" bytes\" + (totalTermCount != 0 ? \" (\" + String.format(Locale.ROOT, \"%.1f\", ((double) totalTermBytes)/totalTermCount) + \" bytes/term)\" : \"\"));\n      out.println(\"  blocks:\");\n      out.println(\"    \" + totalBlockCount + \" blocks\");\n      out.println(\"    \" + termsOnlyBlockCount + \" terms-only blocks\");\n      out.println(\"    \" + subBlocksOnlyBlockCount + \" sub-block-only blocks\");\n      out.println(\"    \" + mixedBlockCount + \" mixed blocks\");\n      out.println(\"    \" + floorBlockCount + \" floor blocks\");\n      out.println(\"    \" + (totalBlockCount-floorSubBlockCount) + \" non-floor blocks\");\n      out.println(\"    \" + floorSubBlockCount + \" floor sub-blocks\");\n      out.println(\"    \" + totalBlockSuffixBytes + \" term suffix bytes\" + (totalBlockCount != 0 ? \" (\" + String.format(Locale.ROOT, \"%.1f\", ((double) totalBlockSuffixBytes)/totalBlockCount) + \" suffix-bytes/block)\" : \"\"));\n      out.println(\"    \" + totalBlockStatsBytes + \" term stats bytes\" + (totalBlockCount != 0 ? \" (\" + String.format(Locale.ROOT, \"%.1f\", ((double) totalBlockStatsBytes)/totalBlockCount) + \" stats-bytes/block)\" : \"\"));\n      out.println(\"    \" + totalBlockOtherBytes + \" other bytes\" + (totalBlockCount != 0 ? \" (\" + String.format(Locale.ROOT, \"%.1f\", ((double) totalBlockOtherBytes)/totalBlockCount) + \" other-bytes/block)\" : \"\"));\n      if (totalBlockCount != 0) {\n        out.println(\"    by prefix length:\");\n        int total = 0;\n        for(int prefix=0;prefix<blockCountByPrefixLen.length;prefix++) {\n          final int blockCount = blockCountByPrefixLen[prefix];\n          total += blockCount;\n          if (blockCount != 0) {\n            out.println(\"      \" + String.format(Locale.ROOT, \"%2d\", prefix) + \": \" + blockCount);\n          }\n        }\n        assert totalBlockCount == total;\n      }\n\n      try {\n        return bos.toString(\"UTF-8\");\n      } catch (UnsupportedEncodingException bogus) {\n        throw new RuntimeException(bogus);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e6904bcc97d8afa27bd72ee29ac01e525e327ad4":["6d01ed6d1df51191983f4dd157aedf5f4650e2b3"],"6d01ed6d1df51191983f4dd157aedf5f4650e2b3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6d01ed6d1df51191983f4dd157aedf5f4650e2b3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e6904bcc97d8afa27bd72ee29ac01e525e327ad4":[],"6d01ed6d1df51191983f4dd157aedf5f4650e2b3":["e6904bcc97d8afa27bd72ee29ac01e525e327ad4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e6904bcc97d8afa27bd72ee29ac01e525e327ad4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}