{"path":"solr/core/src/test/org/apache/solr/search/TestSolr4Spatial#testIntersectFilter().mjava","commits":[{"id":"c11e1d33f2ba742976268153f6edd2d29710cf69","date":1347851822,"type":0,"author":"David Wayne Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSolr4Spatial#testIntersectFilter().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testIntersectFilter() throws Exception {\n    setupDocs();\n    //Try some edge cases\n    checkHits(fieldName, \"1,1\", 175, 3, 5, 6, 7);\n    checkHits(fieldName, \"0,179.8\", 200, 2, 8, 9);\n    checkHits(fieldName, \"89.8, 50\", 200, 2, 10, 11);//this goes over the north pole\n    checkHits(fieldName, \"-89.8, 50\", 200, 2, 12, 13);//this goes over the south pole\n    //try some normal cases\n    checkHits(fieldName, \"33.0,-80.0\", 300, 2);\n    //large distance\n    checkHits(fieldName, \"1,1\", 5000, 3, 5, 6, 7);\n    //Because we are generating a box based on the west/east longitudes and the south/north latitudes, which then\n    //translates to a range query, which is slightly more inclusive.  Thus, even though 0.0 is 15.725 kms away,\n    //it will be included, b/c of the box calculation.\n    checkHits(fieldName, false, \"0.1,0.1\", 15, 2, 5, 6);\n\n    //try some more\n    clearIndex();\n    assertU(adoc(\"id\", \"14\", fieldName, \"0,5\"));\n    assertU(adoc(\"id\", \"15\", fieldName, \"0,15\"));\n    //3000KM from 0,0, see http://www.movable-type.co.uk/scripts/latlong.html\n    assertU(adoc(\"id\", \"16\", fieldName, \"18.71111,19.79750\"));\n    assertU(adoc(\"id\", \"17\", fieldName, \"44.043900,-95.436643\"));\n    assertU(commit());\n\n    checkHits(fieldName, \"0,0\", 1000, 1, 14);\n    checkHits(fieldName, \"0,0\", 2000, 2, 14, 15);\n    checkHits(fieldName, false, \"0,0\", 3000, 3, 14, 15, 16);\n    checkHits(fieldName, \"0,0\", 3001, 3, 14, 15, 16);\n    checkHits(fieldName, \"0,0\", 3000.1, 3, 14, 15, 16);\n\n    //really fine grained distance and reflects some of the vagaries of how we are calculating the box\n    checkHits(fieldName, \"43.517030,-96.789603\", 109, 0);\n\n    //falls outside of the real distance, but inside the bounding box\n    checkHits(fieldName, true,  \"43.517030,-96.789603\", 110, 0);\n    checkHits(fieldName, false, \"43.517030,-96.789603\", 110, 1, 17);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"167133992e7b384ce97f83ddb1dd2ddd09daf7aa","date":1420315776,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSolr4Spatial#testIntersectFilter().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestSolr4Spatial#testIntersectFilter().mjava","sourceNew":"  @Test\n  public void testIntersectFilter() throws Exception {\n    setupDocs();\n    \n    //Try some edge cases\n    checkHits(fieldName, \"1,1\", 175, DistanceUtils.EARTH_MEAN_RADIUS_KM, 3, 5, 6, 7);\n    checkHits(fieldName, \"0,179.8\", 200, DistanceUtils.EARTH_MEAN_RADIUS_KM, 2, 8, 9);\n    checkHits(fieldName, \"89.8, 50\", 200, DistanceUtils.EARTH_MEAN_RADIUS_KM, 2, 10, 11);//this goes over the north pole\n    checkHits(fieldName, \"-89.8, 50\", 200, DistanceUtils.EARTH_MEAN_RADIUS_KM, 2, 12, 13);//this goes over the south pole\n    //try some normal cases\n    checkHits(fieldName, \"33.0,-80.0\", 300, DistanceUtils.EARTH_MEAN_RADIUS_KM, 2);\n    //large distance\n    checkHits(fieldName, \"1,1\", 5000, DistanceUtils.EARTH_MEAN_RADIUS_KM, 3, 5, 6, 7);\n    //Because we are generating a box based on the west/east longitudes and the south/north latitudes, which then\n    //translates to a range query, which is slightly more inclusive.  Thus, even though 0.0 is 15.725 kms away,\n    //it will be included, b/c of the box calculation.\n    checkHits(fieldName, false, \"0.1,0.1\", 15, DistanceUtils.EARTH_MEAN_RADIUS_KM, 2, 5, 6);\n\n    //try some more\n    clearIndex();\n    assertU(adoc(\"id\", \"14\", fieldName, \"0,5\"));\n    assertU(adoc(\"id\", \"15\", fieldName, \"0,15\"));\n    //3000KM from 0,0, see http://www.movable-type.co.uk/scripts/latlong.html\n    assertU(adoc(\"id\", \"16\", fieldName, \"18.71111,19.79750\"));\n    assertU(adoc(\"id\", \"17\", fieldName, \"44.043900,-95.436643\"));\n    assertU(commit());\n\n    checkHits(fieldName, \"0,0\", 1000, DistanceUtils.EARTH_MEAN_RADIUS_KM, 1, 14);\n    checkHits(fieldName, \"0,0\", 2000, DistanceUtils.EARTH_MEAN_RADIUS_KM, 2, 14, 15);\n    checkHits(fieldName, false, \"0,0\", 3000, DistanceUtils.EARTH_MEAN_RADIUS_KM, 3, 14, 15, 16);\n    checkHits(fieldName, \"0,0\", 3001, DistanceUtils.EARTH_MEAN_RADIUS_KM, 3, 14, 15, 16);\n    checkHits(fieldName, \"0,0\", 3000.1, DistanceUtils.EARTH_MEAN_RADIUS_KM, 3, 14, 15, 16);\n\n    //really fine grained distance and reflects some of the vagaries of how we are calculating the box\n    checkHits(fieldName, \"43.517030,-96.789603\", 109, DistanceUtils.EARTH_MEAN_RADIUS_KM, 0);\n\n    //falls outside of the real distance, but inside the bounding box\n    checkHits(fieldName, true,  \"43.517030,-96.789603\", 110, DistanceUtils.EARTH_MEAN_RADIUS_KM, 0);\n    checkHits(fieldName, false, \"43.517030,-96.789603\", 110, DistanceUtils.EARTH_MEAN_RADIUS_KM, 1, 17);\n  }\n\n","sourceOld":"  @Test\n  public void testIntersectFilter() throws Exception {\n    setupDocs();\n    //Try some edge cases\n    checkHits(fieldName, \"1,1\", 175, 3, 5, 6, 7);\n    checkHits(fieldName, \"0,179.8\", 200, 2, 8, 9);\n    checkHits(fieldName, \"89.8, 50\", 200, 2, 10, 11);//this goes over the north pole\n    checkHits(fieldName, \"-89.8, 50\", 200, 2, 12, 13);//this goes over the south pole\n    //try some normal cases\n    checkHits(fieldName, \"33.0,-80.0\", 300, 2);\n    //large distance\n    checkHits(fieldName, \"1,1\", 5000, 3, 5, 6, 7);\n    //Because we are generating a box based on the west/east longitudes and the south/north latitudes, which then\n    //translates to a range query, which is slightly more inclusive.  Thus, even though 0.0 is 15.725 kms away,\n    //it will be included, b/c of the box calculation.\n    checkHits(fieldName, false, \"0.1,0.1\", 15, 2, 5, 6);\n\n    //try some more\n    clearIndex();\n    assertU(adoc(\"id\", \"14\", fieldName, \"0,5\"));\n    assertU(adoc(\"id\", \"15\", fieldName, \"0,15\"));\n    //3000KM from 0,0, see http://www.movable-type.co.uk/scripts/latlong.html\n    assertU(adoc(\"id\", \"16\", fieldName, \"18.71111,19.79750\"));\n    assertU(adoc(\"id\", \"17\", fieldName, \"44.043900,-95.436643\"));\n    assertU(commit());\n\n    checkHits(fieldName, \"0,0\", 1000, 1, 14);\n    checkHits(fieldName, \"0,0\", 2000, 2, 14, 15);\n    checkHits(fieldName, false, \"0,0\", 3000, 3, 14, 15, 16);\n    checkHits(fieldName, \"0,0\", 3001, 3, 14, 15, 16);\n    checkHits(fieldName, \"0,0\", 3000.1, 3, 14, 15, 16);\n\n    //really fine grained distance and reflects some of the vagaries of how we are calculating the box\n    checkHits(fieldName, \"43.517030,-96.789603\", 109, 0);\n\n    //falls outside of the real distance, but inside the bounding box\n    checkHits(fieldName, true,  \"43.517030,-96.789603\", 110, 0);\n    checkHits(fieldName, false, \"43.517030,-96.789603\", 110, 1, 17);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c11e1d33f2ba742976268153f6edd2d29710cf69":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"167133992e7b384ce97f83ddb1dd2ddd09daf7aa":["c11e1d33f2ba742976268153f6edd2d29710cf69"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["167133992e7b384ce97f83ddb1dd2ddd09daf7aa"]},"commit2Childs":{"c11e1d33f2ba742976268153f6edd2d29710cf69":["167133992e7b384ce97f83ddb1dd2ddd09daf7aa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c11e1d33f2ba742976268153f6edd2d29710cf69"],"167133992e7b384ce97f83ddb1dd2ddd09daf7aa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}