{"path":"lucene/backwards/src/test/org/apache/lucene/search/function/TestOrdValues#doTestRank(String,boolean).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/search/function/TestOrdValues#doTestRank(String,boolean).mjava","pathOld":"backwards/src/test/org/apache/lucene/search/function/TestOrdValues#doTestRank(String,boolean).mjava","sourceNew":"  // Test that queries based on reverse/ordFieldScore scores correctly\n  private void doTestRank (String field, boolean inOrder) throws CorruptIndexException, Exception {\n    IndexSearcher s = new IndexSearcher(dir, true);\n    ValueSource vs;\n    if (inOrder) {\n      vs = new OrdFieldSource(field);\n    } else {\n      vs = new ReverseOrdFieldSource(field);\n    }\n        \n    Query q = new ValueSourceQuery(vs);\n    log(\"test: \"+q);\n    QueryUtils.check(q,s);\n    ScoreDoc[] h = s.search(q, null, 1000).scoreDocs;\n    assertEquals(\"All docs should be matched!\",N_DOCS,h.length);\n    String prevID = inOrder\n      ? \"IE\"   // greater than all ids of docs in this test (\"ID0001\", etc.)\n      : \"IC\";  // smaller than all ids of docs in this test (\"ID0001\", etc.)\n          \n    for (int i=0; i<h.length; i++) {\n      String resID = s.doc(h[i].doc).get(ID_FIELD);\n      log(i+\".   score=\"+h[i].score+\"  -  \"+resID);\n      log(s.explain(q,h[i].doc));\n      if (inOrder) {\n        assertTrue(\"res id \"+resID+\" should be < prev res id \"+prevID, resID.compareTo(prevID)<0);\n      } else {\n        assertTrue(\"res id \"+resID+\" should be > prev res id \"+prevID, resID.compareTo(prevID)>0);\n      }\n      prevID = resID;\n    }\n  }\n\n","sourceOld":"  // Test that queries based on reverse/ordFieldScore scores correctly\n  private void doTestRank (String field, boolean inOrder) throws CorruptIndexException, Exception {\n    IndexSearcher s = new IndexSearcher(dir, true);\n    ValueSource vs;\n    if (inOrder) {\n      vs = new OrdFieldSource(field);\n    } else {\n      vs = new ReverseOrdFieldSource(field);\n    }\n        \n    Query q = new ValueSourceQuery(vs);\n    log(\"test: \"+q);\n    QueryUtils.check(q,s);\n    ScoreDoc[] h = s.search(q, null, 1000).scoreDocs;\n    assertEquals(\"All docs should be matched!\",N_DOCS,h.length);\n    String prevID = inOrder\n      ? \"IE\"   // greater than all ids of docs in this test (\"ID0001\", etc.)\n      : \"IC\";  // smaller than all ids of docs in this test (\"ID0001\", etc.)\n          \n    for (int i=0; i<h.length; i++) {\n      String resID = s.doc(h[i].doc).get(ID_FIELD);\n      log(i+\".   score=\"+h[i].score+\"  -  \"+resID);\n      log(s.explain(q,h[i].doc));\n      if (inOrder) {\n        assertTrue(\"res id \"+resID+\" should be < prev res id \"+prevID, resID.compareTo(prevID)<0);\n      } else {\n        assertTrue(\"res id \"+resID+\" should be > prev res id \"+prevID, resID.compareTo(prevID)>0);\n      }\n      prevID = resID;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/test/org/apache/lucene/search/function/TestOrdValues#doTestRank(String,boolean).mjava","sourceNew":null,"sourceOld":"  // Test that queries based on reverse/ordFieldScore scores correctly\n  private void doTestRank (String field, boolean inOrder) throws CorruptIndexException, Exception {\n    IndexSearcher s = new IndexSearcher(dir, true);\n    ValueSource vs;\n    if (inOrder) {\n      vs = new OrdFieldSource(field);\n    } else {\n      vs = new ReverseOrdFieldSource(field);\n    }\n        \n    Query q = new ValueSourceQuery(vs);\n    log(\"test: \"+q);\n    QueryUtils.check(q,s);\n    ScoreDoc[] h = s.search(q, null, 1000).scoreDocs;\n    assertEquals(\"All docs should be matched!\",N_DOCS,h.length);\n    String prevID = inOrder\n      ? \"IE\"   // greater than all ids of docs in this test (\"ID0001\", etc.)\n      : \"IC\";  // smaller than all ids of docs in this test (\"ID0001\", etc.)\n          \n    for (int i=0; i<h.length; i++) {\n      String resID = s.doc(h[i].doc).get(ID_FIELD);\n      log(i+\".   score=\"+h[i].score+\"  -  \"+resID);\n      log(s.explain(q,h[i].doc));\n      if (inOrder) {\n        assertTrue(\"res id \"+resID+\" should be < prev res id \"+prevID, resID.compareTo(prevID)<0);\n      } else {\n        assertTrue(\"res id \"+resID+\" should be > prev res id \"+prevID, resID.compareTo(prevID)>0);\n      }\n      prevID = resID;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}