{"path":"lucene/queryparser/src/java/org/apache/lucene/queryparser/surround/query/DistanceQuery#getSpanNearQuery(IndexReader,String,BasicQueryFactory).mjava","commits":[{"id":"2dfdf766e55e943d942055d7de53c7ad6bc45283","date":1441632886,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/surround/query/DistanceQuery#getSpanNearQuery(IndexReader,String,BasicQueryFactory).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/surround/query/DistanceQuery#getSpanNearQuery(IndexReader,String,float,BasicQueryFactory).mjava","sourceNew":"  public Query getSpanNearQuery(\n          IndexReader reader,\n          String fieldName,\n          BasicQueryFactory qf) throws IOException {\n    SpanQuery[] spanClauses = new SpanQuery[getNrSubQueries()];\n    Iterator<?> sqi = getSubQueriesIterator();\n    int qi = 0;\n    while (sqi.hasNext()) {\n      SpanNearClauseFactory sncf = new SpanNearClauseFactory(reader, fieldName, qf);\n      \n      ((DistanceSubQuery)sqi.next()).addSpanQueries(sncf);\n      if (sncf.size() == 0) { /* distance operator requires all sub queries */\n        while (sqi.hasNext()) { /* produce evt. error messages but ignore results */\n          ((DistanceSubQuery)sqi.next()).addSpanQueries(sncf);\n          sncf.clear();\n        }\n        return new MatchNoDocsQuery();\n      }\n      \n      spanClauses[qi] = sncf.makeSpanClause();\n      qi++;\n    }\n\n    return new SpanNearQuery(spanClauses, getOpDistance() - 1, subQueriesOrdered());\n  }\n\n","sourceOld":"  public Query getSpanNearQuery(\n          IndexReader reader,\n          String fieldName,\n          float boost,\n          BasicQueryFactory qf) throws IOException {\n    SpanQuery[] spanClauses = new SpanQuery[getNrSubQueries()];\n    Iterator<?> sqi = getSubQueriesIterator();\n    int qi = 0;\n    while (sqi.hasNext()) {\n      SpanNearClauseFactory sncf = new SpanNearClauseFactory(reader, fieldName, qf);\n      \n      ((DistanceSubQuery)sqi.next()).addSpanQueries(sncf);\n      if (sncf.size() == 0) { /* distance operator requires all sub queries */\n        while (sqi.hasNext()) { /* produce evt. error messages but ignore results */\n          ((DistanceSubQuery)sqi.next()).addSpanQueries(sncf);\n          sncf.clear();\n        }\n        return new MatchNoDocsQuery();\n      }\n      \n      spanClauses[qi] = sncf.makeSpanClause();\n      qi++;\n    }\n\n    SpanNearQuery r = new SpanNearQuery(spanClauses, getOpDistance() - 1, subQueriesOrdered());\n    r.setBoost(boost);\n    return r;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2dfdf766e55e943d942055d7de53c7ad6bc45283"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}