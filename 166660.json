{"path":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#addDoc(IndexWriter,int).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#addDoc(IndexWriter,int).mjava","pathOld":"src/test/org/apache/lucene/index/TestBackwardsCompatibility#addDoc(IndexWriter,int).mjava","sourceNew":"  private void addDoc(IndexWriter writer, int id) throws IOException\n  {\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"aaa\", Field.Store.NO, Field.Index.ANALYZED));\n    doc.add(new Field(\"id\", Integer.toString(id), Field.Store.YES, Field.Index.NOT_ANALYZED));\n    doc.add(new Field(\"autf8\", \"Lu\\uD834\\uDD1Ece\\uD834\\uDD60ne \\u0000 \\u2620 ab\\ud917\\udc17cd\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    doc.add(new Field(\"utf8\", \"Lu\\uD834\\uDD1Ece\\uD834\\uDD60ne \\u0000 \\u2620 ab\\ud917\\udc17cd\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    doc.add(new Field(\"content2\", \"here is more content with aaa aaa aaa\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    doc.add(new Field(\"fie\\u2C77ld\", \"field with non-ascii name\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    /* This was used in 2.9 to generate an index with compressed field:\n    if (id % 2 == 0) {\n      doc.add(new Field(\"compressed\", TEXT_TO_COMPRESS, Field.Store.COMPRESS, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"compressedSize\", Integer.toString(TEXT_COMPRESSED_LENGTH), Field.Store.YES, Field.Index.NOT_ANALYZED));\n    } else {\n      doc.add(new Field(\"compressed\", BINARY_TO_COMPRESS, Field.Store.COMPRESS));    \n      doc.add(new Field(\"compressedSize\", Integer.toString(BINARY_COMPRESSED_LENGTH), Field.Store.YES, Field.Index.NOT_ANALYZED));\n    }\n    */\n    writer.addDocument(doc);\n  }\n\n","sourceOld":"  private void addDoc(IndexWriter writer, int id) throws IOException\n  {\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"aaa\", Field.Store.NO, Field.Index.ANALYZED));\n    doc.add(new Field(\"id\", Integer.toString(id), Field.Store.YES, Field.Index.NOT_ANALYZED));\n    doc.add(new Field(\"autf8\", \"Lu\\uD834\\uDD1Ece\\uD834\\uDD60ne \\u0000 \\u2620 ab\\ud917\\udc17cd\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    doc.add(new Field(\"utf8\", \"Lu\\uD834\\uDD1Ece\\uD834\\uDD60ne \\u0000 \\u2620 ab\\ud917\\udc17cd\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    doc.add(new Field(\"content2\", \"here is more content with aaa aaa aaa\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    doc.add(new Field(\"fie\\u2C77ld\", \"field with non-ascii name\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    /* This was used in 2.9 to generate an index with compressed field:\n    if (id % 2 == 0) {\n      doc.add(new Field(\"compressed\", TEXT_TO_COMPRESS, Field.Store.COMPRESS, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"compressedSize\", Integer.toString(TEXT_COMPRESSED_LENGTH), Field.Store.YES, Field.Index.NOT_ANALYZED));\n    } else {\n      doc.add(new Field(\"compressed\", BINARY_TO_COMPRESS, Field.Store.COMPRESS));    \n      doc.add(new Field(\"compressedSize\", Integer.toString(BINARY_COMPRESSED_LENGTH), Field.Store.YES, Field.Index.NOT_ANALYZED));\n    }\n    */\n    writer.addDocument(doc);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#addDoc(IndexWriter,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#addDoc(IndexWriter,int).mjava","sourceNew":"  private void addDoc(IndexWriter writer, int id) throws IOException\n  {\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"aaa\", Field.Store.NO, Field.Index.ANALYZED));\n    doc.add(new Field(\"id\", Integer.toString(id), Field.Store.YES, Field.Index.NOT_ANALYZED));\n    doc.add(new Field(\"autf8\", \"Lu\\uD834\\uDD1Ece\\uD834\\uDD60ne \\u0000 \\u2620 ab\\ud917\\udc17cd\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    doc.add(new Field(\"utf8\", \"Lu\\uD834\\uDD1Ece\\uD834\\uDD60ne \\u0000 \\u2620 ab\\ud917\\udc17cd\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    doc.add(new Field(\"content2\", \"here is more content with aaa aaa aaa\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    doc.add(new Field(\"fie\\u2C77ld\", \"field with non-ascii name\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    /* This was used in 2.9 to generate an index with compressed field:\n    if (id % 2 == 0) {\n      doc.add(new Field(\"compressed\", TEXT_TO_COMPRESS, Field.Store.COMPRESS, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"compressedSize\", Integer.toString(TEXT_COMPRESSED_LENGTH), Field.Store.YES, Field.Index.NOT_ANALYZED));\n    } else {\n      doc.add(new Field(\"compressed\", BINARY_TO_COMPRESS, Field.Store.COMPRESS));    \n      doc.add(new Field(\"compressedSize\", Integer.toString(BINARY_COMPRESSED_LENGTH), Field.Store.YES, Field.Index.NOT_ANALYZED));\n    }\n    */\n    // add numeric fields, to test if flex preserves encoding\n    doc.add(new NumericField(\"trieInt\", 4).setIntValue(id));\n    doc.add(new NumericField(\"trieLong\", 4).setLongValue(id));\n    writer.addDocument(doc);\n  }\n\n","sourceOld":"  private void addDoc(IndexWriter writer, int id) throws IOException\n  {\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"aaa\", Field.Store.NO, Field.Index.ANALYZED));\n    doc.add(new Field(\"id\", Integer.toString(id), Field.Store.YES, Field.Index.NOT_ANALYZED));\n    doc.add(new Field(\"autf8\", \"Lu\\uD834\\uDD1Ece\\uD834\\uDD60ne \\u0000 \\u2620 ab\\ud917\\udc17cd\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    doc.add(new Field(\"utf8\", \"Lu\\uD834\\uDD1Ece\\uD834\\uDD60ne \\u0000 \\u2620 ab\\ud917\\udc17cd\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    doc.add(new Field(\"content2\", \"here is more content with aaa aaa aaa\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    doc.add(new Field(\"fie\\u2C77ld\", \"field with non-ascii name\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    /* This was used in 2.9 to generate an index with compressed field:\n    if (id % 2 == 0) {\n      doc.add(new Field(\"compressed\", TEXT_TO_COMPRESS, Field.Store.COMPRESS, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"compressedSize\", Integer.toString(TEXT_COMPRESSED_LENGTH), Field.Store.YES, Field.Index.NOT_ANALYZED));\n    } else {\n      doc.add(new Field(\"compressed\", BINARY_TO_COMPRESS, Field.Store.COMPRESS));    \n      doc.add(new Field(\"compressedSize\", Integer.toString(BINARY_COMPRESSED_LENGTH), Field.Store.YES, Field.Index.NOT_ANALYZED));\n    }\n    */\n    writer.addDocument(doc);\n  }\n\n","bugFix":null,"bugIntro":["fa0f44f887719e97183771e977cfc4bfb485b766"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6267e1ce56c2eec111425690cd04e251b6f14952","date":1275222352,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#addDoc(IndexWriter,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#addDoc(IndexWriter,int).mjava","sourceNew":"  private void addDoc(IndexWriter writer, int id) throws IOException\n  {\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"aaa\", Field.Store.NO, Field.Index.ANALYZED));\n    doc.add(new Field(\"id\", Integer.toString(id), Field.Store.YES, Field.Index.NOT_ANALYZED));\n    doc.add(new Field(\"autf8\", \"Lu\\uD834\\uDD1Ece\\uD834\\uDD60ne \\u0000 \\u2620 ab\\ud917\\udc17cd\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    doc.add(new Field(\"utf8\", \"Lu\\uD834\\uDD1Ece\\uD834\\uDD60ne \\u0000 \\u2620 ab\\ud917\\udc17cd\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    doc.add(new Field(\"content2\", \"here is more content with aaa aaa aaa\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    doc.add(new Field(\"fie\\u2C77ld\", \"field with non-ascii name\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    // add numeric fields, to test if flex preserves encoding\n    doc.add(new NumericField(\"trieInt\", 4).setIntValue(id));\n    doc.add(new NumericField(\"trieLong\", 4).setLongValue(id));\n    writer.addDocument(doc);\n  }\n\n","sourceOld":"  private void addDoc(IndexWriter writer, int id) throws IOException\n  {\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"aaa\", Field.Store.NO, Field.Index.ANALYZED));\n    doc.add(new Field(\"id\", Integer.toString(id), Field.Store.YES, Field.Index.NOT_ANALYZED));\n    doc.add(new Field(\"autf8\", \"Lu\\uD834\\uDD1Ece\\uD834\\uDD60ne \\u0000 \\u2620 ab\\ud917\\udc17cd\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    doc.add(new Field(\"utf8\", \"Lu\\uD834\\uDD1Ece\\uD834\\uDD60ne \\u0000 \\u2620 ab\\ud917\\udc17cd\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    doc.add(new Field(\"content2\", \"here is more content with aaa aaa aaa\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    doc.add(new Field(\"fie\\u2C77ld\", \"field with non-ascii name\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    /* This was used in 2.9 to generate an index with compressed field:\n    if (id % 2 == 0) {\n      doc.add(new Field(\"compressed\", TEXT_TO_COMPRESS, Field.Store.COMPRESS, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"compressedSize\", Integer.toString(TEXT_COMPRESSED_LENGTH), Field.Store.YES, Field.Index.NOT_ANALYZED));\n    } else {\n      doc.add(new Field(\"compressed\", BINARY_TO_COMPRESS, Field.Store.COMPRESS));    \n      doc.add(new Field(\"compressedSize\", Integer.toString(BINARY_COMPRESSED_LENGTH), Field.Store.YES, Field.Index.NOT_ANALYZED));\n    }\n    */\n    // add numeric fields, to test if flex preserves encoding\n    doc.add(new NumericField(\"trieInt\", 4).setIntValue(id));\n    doc.add(new NumericField(\"trieLong\", 4).setLongValue(id));\n    writer.addDocument(doc);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#addDoc(IndexWriter,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#addDoc(IndexWriter,int).mjava","sourceNew":"  private void addDoc(IndexWriter writer, int id) throws IOException\n  {\n    Document doc = new Document();\n    doc.add(new TextField(\"content\", \"aaa\"));\n    doc.add(new Field(\"id\", StringField.TYPE_STORED, Integer.toString(id)));\n    FieldType customType2 = new FieldType(TextField.TYPE_STORED);\n    customType2.setStoreTermVectors(true);\n    customType2.setStoreTermVectorPositions(true);\n    customType2.setStoreTermVectorOffsets(true);\n    doc.add(new Field(\"autf8\", customType2, \"Lu\\uD834\\uDD1Ece\\uD834\\uDD60ne \\u0000 \\u2620 ab\\ud917\\udc17cd\"));\n    doc.add(new Field(\"utf8\", customType2, \"Lu\\uD834\\uDD1Ece\\uD834\\uDD60ne \\u0000 \\u2620 ab\\ud917\\udc17cd\"));\n    doc.add(new Field(\"content2\", customType2, \"here is more content with aaa aaa aaa\"));\n    doc.add(new Field(\"fie\\u2C77ld\", customType2, \"field with non-ascii name\"));\n    // add numeric fields, to test if flex preserves encoding\n    doc.add(new NumericField(\"trieInt\", 4).setIntValue(id));\n    doc.add(new NumericField(\"trieLong\", 4).setLongValue(id));\n    writer.addDocument(doc);\n  }\n\n","sourceOld":"  private void addDoc(IndexWriter writer, int id) throws IOException\n  {\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"aaa\", Field.Store.NO, Field.Index.ANALYZED));\n    doc.add(new Field(\"id\", Integer.toString(id), Field.Store.YES, Field.Index.NOT_ANALYZED));\n    doc.add(new Field(\"autf8\", \"Lu\\uD834\\uDD1Ece\\uD834\\uDD60ne \\u0000 \\u2620 ab\\ud917\\udc17cd\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    doc.add(new Field(\"utf8\", \"Lu\\uD834\\uDD1Ece\\uD834\\uDD60ne \\u0000 \\u2620 ab\\ud917\\udc17cd\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    doc.add(new Field(\"content2\", \"here is more content with aaa aaa aaa\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    doc.add(new Field(\"fie\\u2C77ld\", \"field with non-ascii name\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    // add numeric fields, to test if flex preserves encoding\n    doc.add(new NumericField(\"trieInt\", 4).setIntValue(id));\n    doc.add(new NumericField(\"trieLong\", 4).setLongValue(id));\n    writer.addDocument(doc);\n  }\n\n","bugFix":null,"bugIntro":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7e4db59c6b6c10e25322cfb41c4c19d78b4298bd","date":1317197236,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#addDoc(IndexWriter,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#addDoc(IndexWriter,int).mjava","sourceNew":"  private void addDoc(IndexWriter writer, int id) throws IOException\n  {\n    Document doc = new Document();\n    doc.add(new TextField(\"content\", \"aaa\"));\n    doc.add(new Field(\"id\", Integer.toString(id), StringField.TYPE_STORED));\n    FieldType customType2 = new FieldType(TextField.TYPE_STORED);\n    customType2.setStoreTermVectors(true);\n    customType2.setStoreTermVectorPositions(true);\n    customType2.setStoreTermVectorOffsets(true);\n    doc.add(new Field(\"autf8\", \"Lu\\uD834\\uDD1Ece\\uD834\\uDD60ne \\u0000 \\u2620 ab\\ud917\\udc17cd\", customType2));\n    doc.add(new Field(\"utf8\", \"Lu\\uD834\\uDD1Ece\\uD834\\uDD60ne \\u0000 \\u2620 ab\\ud917\\udc17cd\", customType2));\n    doc.add(new Field(\"content2\", \"here is more content with aaa aaa aaa\", customType2));\n    doc.add(new Field(\"fie\\u2C77ld\", \"field with non-ascii name\", customType2));\n    // add numeric fields, to test if flex preserves encoding\n    doc.add(new NumericField(\"trieInt\", 4).setIntValue(id));\n    doc.add(new NumericField(\"trieLong\", 4).setLongValue(id));\n    writer.addDocument(doc);\n  }\n\n","sourceOld":"  private void addDoc(IndexWriter writer, int id) throws IOException\n  {\n    Document doc = new Document();\n    doc.add(new TextField(\"content\", \"aaa\"));\n    doc.add(new Field(\"id\", StringField.TYPE_STORED, Integer.toString(id)));\n    FieldType customType2 = new FieldType(TextField.TYPE_STORED);\n    customType2.setStoreTermVectors(true);\n    customType2.setStoreTermVectorPositions(true);\n    customType2.setStoreTermVectorOffsets(true);\n    doc.add(new Field(\"autf8\", customType2, \"Lu\\uD834\\uDD1Ece\\uD834\\uDD60ne \\u0000 \\u2620 ab\\ud917\\udc17cd\"));\n    doc.add(new Field(\"utf8\", customType2, \"Lu\\uD834\\uDD1Ece\\uD834\\uDD60ne \\u0000 \\u2620 ab\\ud917\\udc17cd\"));\n    doc.add(new Field(\"content2\", customType2, \"here is more content with aaa aaa aaa\"));\n    doc.add(new Field(\"fie\\u2C77ld\", customType2, \"field with non-ascii name\"));\n    // add numeric fields, to test if flex preserves encoding\n    doc.add(new NumericField(\"trieInt\", 4).setIntValue(id));\n    doc.add(new NumericField(\"trieLong\", 4).setLongValue(id));\n    writer.addDocument(doc);\n  }\n\n","bugFix":null,"bugIntro":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fa0f44f887719e97183771e977cfc4bfb485b766","date":1326668713,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#addDoc(IndexWriter,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#addDoc(IndexWriter,int).mjava","sourceNew":"  private void addDoc(IndexWriter writer, int id) throws IOException\n  {\n    Document doc = new Document();\n    doc.add(new TextField(\"content\", \"aaa\"));\n    doc.add(new Field(\"id\", Integer.toString(id), StringField.TYPE_STORED));\n    FieldType customType2 = new FieldType(TextField.TYPE_STORED);\n    customType2.setStoreTermVectors(true);\n    customType2.setStoreTermVectorPositions(true);\n    customType2.setStoreTermVectorOffsets(true);\n    doc.add(new Field(\"autf8\", \"Lu\\uD834\\uDD1Ece\\uD834\\uDD60ne \\u0000 \\u2620 ab\\ud917\\udc17cd\", customType2));\n    doc.add(new Field(\"utf8\", \"Lu\\uD834\\uDD1Ece\\uD834\\uDD60ne \\u0000 \\u2620 ab\\ud917\\udc17cd\", customType2));\n    doc.add(new Field(\"content2\", \"here is more content with aaa aaa aaa\", customType2));\n    doc.add(new Field(\"fie\\u2C77ld\", \"field with non-ascii name\", customType2));\n    // add numeric fields, to test if flex preserves encoding\n    doc.add(new NumericField(\"trieInt\", id));\n    doc.add(new NumericField(\"trieLong\", (long) id));\n    writer.addDocument(doc);\n  }\n\n","sourceOld":"  private void addDoc(IndexWriter writer, int id) throws IOException\n  {\n    Document doc = new Document();\n    doc.add(new TextField(\"content\", \"aaa\"));\n    doc.add(new Field(\"id\", Integer.toString(id), StringField.TYPE_STORED));\n    FieldType customType2 = new FieldType(TextField.TYPE_STORED);\n    customType2.setStoreTermVectors(true);\n    customType2.setStoreTermVectorPositions(true);\n    customType2.setStoreTermVectorOffsets(true);\n    doc.add(new Field(\"autf8\", \"Lu\\uD834\\uDD1Ece\\uD834\\uDD60ne \\u0000 \\u2620 ab\\ud917\\udc17cd\", customType2));\n    doc.add(new Field(\"utf8\", \"Lu\\uD834\\uDD1Ece\\uD834\\uDD60ne \\u0000 \\u2620 ab\\ud917\\udc17cd\", customType2));\n    doc.add(new Field(\"content2\", \"here is more content with aaa aaa aaa\", customType2));\n    doc.add(new Field(\"fie\\u2C77ld\", \"field with non-ascii name\", customType2));\n    // add numeric fields, to test if flex preserves encoding\n    doc.add(new NumericField(\"trieInt\", 4).setIntValue(id));\n    doc.add(new NumericField(\"trieLong\", 4).setLongValue(id));\n    writer.addDocument(doc);\n  }\n\n","bugFix":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"bugIntro":["a78a90fc9701e511308346ea29f4f5e548bb39fe"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestBackwardsCompatibility#addDoc(IndexWriter,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#addDoc(IndexWriter,int).mjava","sourceNew":"  private void addDoc(IndexWriter writer, int id) throws IOException\n  {\n    Document doc = new Document();\n    doc.add(new TextField(\"content\", \"aaa\"));\n    doc.add(new Field(\"id\", Integer.toString(id), StringField.TYPE_STORED));\n    FieldType customType2 = new FieldType(TextField.TYPE_STORED);\n    customType2.setStoreTermVectors(true);\n    customType2.setStoreTermVectorPositions(true);\n    customType2.setStoreTermVectorOffsets(true);\n    doc.add(new Field(\"autf8\", \"Lu\\uD834\\uDD1Ece\\uD834\\uDD60ne \\u0000 \\u2620 ab\\ud917\\udc17cd\", customType2));\n    doc.add(new Field(\"utf8\", \"Lu\\uD834\\uDD1Ece\\uD834\\uDD60ne \\u0000 \\u2620 ab\\ud917\\udc17cd\", customType2));\n    doc.add(new Field(\"content2\", \"here is more content with aaa aaa aaa\", customType2));\n    doc.add(new Field(\"fie\\u2C77ld\", \"field with non-ascii name\", customType2));\n    // add numeric fields, to test if flex preserves encoding\n    doc.add(new NumericField(\"trieInt\", id));\n    doc.add(new NumericField(\"trieLong\", (long) id));\n    writer.addDocument(doc);\n  }\n\n","sourceOld":"  private void addDoc(IndexWriter writer, int id) throws IOException\n  {\n    Document doc = new Document();\n    doc.add(new TextField(\"content\", \"aaa\"));\n    doc.add(new Field(\"id\", Integer.toString(id), StringField.TYPE_STORED));\n    FieldType customType2 = new FieldType(TextField.TYPE_STORED);\n    customType2.setStoreTermVectors(true);\n    customType2.setStoreTermVectorPositions(true);\n    customType2.setStoreTermVectorOffsets(true);\n    doc.add(new Field(\"autf8\", \"Lu\\uD834\\uDD1Ece\\uD834\\uDD60ne \\u0000 \\u2620 ab\\ud917\\udc17cd\", customType2));\n    doc.add(new Field(\"utf8\", \"Lu\\uD834\\uDD1Ece\\uD834\\uDD60ne \\u0000 \\u2620 ab\\ud917\\udc17cd\", customType2));\n    doc.add(new Field(\"content2\", \"here is more content with aaa aaa aaa\", customType2));\n    doc.add(new Field(\"fie\\u2C77ld\", \"field with non-ascii name\", customType2));\n    // add numeric fields, to test if flex preserves encoding\n    doc.add(new NumericField(\"trieInt\", id));\n    doc.add(new NumericField(\"trieLong\", (long) id));\n    writer.addDocument(doc);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"6267e1ce56c2eec111425690cd04e251b6f14952":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["fa0f44f887719e97183771e977cfc4bfb485b766"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fa0f44f887719e97183771e977cfc4bfb485b766":["7e4db59c6b6c10e25322cfb41c4c19d78b4298bd"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["6267e1ce56c2eec111425690cd04e251b6f14952"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"7e4db59c6b6c10e25322cfb41c4c19d78b4298bd":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"6267e1ce56c2eec111425690cd04e251b6f14952":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["6267e1ce56c2eec111425690cd04e251b6f14952"],"fa0f44f887719e97183771e977cfc4bfb485b766":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["7e4db59c6b6c10e25322cfb41c4c19d78b4298bd"],"7e4db59c6b6c10e25322cfb41c4c19d78b4298bd":["fa0f44f887719e97183771e977cfc4bfb485b766"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}