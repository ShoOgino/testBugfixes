{"path":"lucene/test-framework/src/java/org/apache/lucene/geo/GeoTestUtil#nextPolygon().mjava","commits":[{"id":"546f71f5b1e19230d6e7e59f117d08dbcf59fbfe","date":1459623422,"type":1,"author":"nknize","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/geo/GeoTestUtil#nextPolygon().mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/util/GeoTestUtil#nextPolygon().mjava","sourceNew":"  /** returns next pseudorandom polygon */\n  public static Polygon nextPolygon() {\n    if (random().nextBoolean()) {\n      return surpriseMePolygon(null, null);\n    }\n\n    Rectangle box = nextBoxInternal(nextLatitude(), nextLatitude(), nextLongitude(), nextLongitude(), false);\n    if (random().nextBoolean()) {\n      // box\n      return boxPolygon(box);\n    } else {\n      // triangle\n      return trianglePolygon(box);\n    }\n  }\n\n","sourceOld":"  /** returns next pseudorandom polygon */\n  public static Polygon nextPolygon() {\n    if (random().nextBoolean()) {\n      return surpriseMePolygon(null, null);\n    }\n\n    GeoRect box = nextBoxInternal(nextLatitude(), nextLatitude(), nextLongitude(), nextLongitude(), false);\n    if (random().nextBoolean()) {\n      // box\n      return boxPolygon(box);\n    } else {\n      // triangle\n      return trianglePolygon(box);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"479a2bccf10cd79339b5e18eccf3b0b9a18b755f","date":1460541098,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/geo/GeoTestUtil#nextPolygon().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/geo/GeoTestUtil#nextPolygon().mjava","sourceNew":"  /** returns next pseudorandom polygon */\n  public static Polygon nextPolygon() {\n    if (random().nextBoolean()) {\n      return surpriseMePolygon(null, null);\n    } else if (random().nextInt(10) == 1) {\n      // this poly is slow to create ... only do it 10% of the time:\n      while (true) {\n        int gons = TestUtil.nextInt(random(), 4, 500);\n        // So the poly can cover at most 50% of the earth's surface:\n        double radiusMeters = random().nextDouble() * GeoUtils.EARTH_MEAN_RADIUS_METERS * Math.PI / 2.0 + 1.0;\n        try {\n          return createRegularPolygon(nextLatitude(), nextLongitude(), radiusMeters, gons);\n        } catch (IllegalArgumentException iae) {\n          // we tried to cross dateline or pole ... try again\n        }\n      }\n    }\n\n    Rectangle box = nextBoxInternal(nextLatitude(), nextLatitude(), nextLongitude(), nextLongitude(), false);\n    if (random().nextBoolean()) {\n      // box\n      return boxPolygon(box);\n    } else {\n      // triangle\n      return trianglePolygon(box);\n    }\n  }\n\n","sourceOld":"  /** returns next pseudorandom polygon */\n  public static Polygon nextPolygon() {\n    if (random().nextBoolean()) {\n      return surpriseMePolygon(null, null);\n    }\n\n    Rectangle box = nextBoxInternal(nextLatitude(), nextLatitude(), nextLongitude(), nextLongitude(), false);\n    if (random().nextBoolean()) {\n      // box\n      return boxPolygon(box);\n    } else {\n      // triangle\n      return trianglePolygon(box);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ea9249ab9a9f76eb4132ceb4631d15315721f6a","date":1460578553,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/geo/GeoTestUtil#nextPolygon().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/geo/GeoTestUtil#nextPolygon().mjava","sourceNew":"  /** returns next pseudorandom polygon */\n  public static Polygon nextPolygon() {\n    if (random().nextBoolean()) {\n      return surpriseMePolygon(null, null);\n    } else if (random().nextInt(10) == 1) {\n      // this poly is slow to create ... only do it 10% of the time:\n      while (true) {\n        int gons = TestUtil.nextInt(random(), 4, 500);\n        // So the poly can cover at most 50% of the earth's surface:\n        double radiusMeters = random().nextDouble() * GeoUtils.EARTH_MEAN_RADIUS_METERS * Math.PI / 2.0 + 1.0;\n        try {\n          return createRegularPolygon(nextLatitude(), nextLongitude(), radiusMeters, gons);\n        } catch (IllegalArgumentException iae) {\n          // we tried to cross dateline or pole ... try again\n        }\n      }\n    }\n\n    Rectangle box = nextBoxInternal(nextLatitude(), nextLatitude(), nextLongitude(), nextLongitude(), false);\n    if (random().nextBoolean()) {\n      // box\n      return boxPolygon(box);\n    } else {\n      // triangle\n      return trianglePolygon(box);\n    }\n  }\n\n","sourceOld":"  /** returns next pseudorandom polygon */\n  public static Polygon nextPolygon() {\n    if (random().nextBoolean()) {\n      return surpriseMePolygon(null, null);\n    }\n\n    Rectangle box = nextBoxInternal(nextLatitude(), nextLatitude(), nextLongitude(), nextLongitude(), false);\n    if (random().nextBoolean()) {\n      // box\n      return boxPolygon(box);\n    } else {\n      // triangle\n      return trianglePolygon(box);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3542cf82b8acd1e9ff2ee90fb0bf35e08698a1c2","date":1460953142,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/geo/GeoTestUtil#nextPolygon().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/geo/GeoTestUtil#nextPolygon().mjava","sourceNew":"  /** returns next pseudorandom polygon */\n  public static Polygon nextPolygon() {\n    if (random().nextBoolean()) {\n      return surpriseMePolygon();\n    } else if (random().nextInt(10) == 1) {\n      // this poly is slow to create ... only do it 10% of the time:\n      while (true) {\n        int gons = TestUtil.nextInt(random(), 4, 500);\n        // So the poly can cover at most 50% of the earth's surface:\n        double radiusMeters = random().nextDouble() * GeoUtils.EARTH_MEAN_RADIUS_METERS * Math.PI / 2.0 + 1.0;\n        try {\n          return createRegularPolygon(nextLatitude(), nextLongitude(), radiusMeters, gons);\n        } catch (IllegalArgumentException iae) {\n          // we tried to cross dateline or pole ... try again\n        }\n      }\n    }\n\n    Rectangle box = nextBoxInternal(nextLatitude(), nextLatitude(), nextLongitude(), nextLongitude(), false);\n    if (random().nextBoolean()) {\n      // box\n      return boxPolygon(box);\n    } else {\n      // triangle\n      return trianglePolygon(box);\n    }\n  }\n\n","sourceOld":"  /** returns next pseudorandom polygon */\n  public static Polygon nextPolygon() {\n    if (random().nextBoolean()) {\n      return surpriseMePolygon(null, null);\n    } else if (random().nextInt(10) == 1) {\n      // this poly is slow to create ... only do it 10% of the time:\n      while (true) {\n        int gons = TestUtil.nextInt(random(), 4, 500);\n        // So the poly can cover at most 50% of the earth's surface:\n        double radiusMeters = random().nextDouble() * GeoUtils.EARTH_MEAN_RADIUS_METERS * Math.PI / 2.0 + 1.0;\n        try {\n          return createRegularPolygon(nextLatitude(), nextLongitude(), radiusMeters, gons);\n        } catch (IllegalArgumentException iae) {\n          // we tried to cross dateline or pole ... try again\n        }\n      }\n    }\n\n    Rectangle box = nextBoxInternal(nextLatitude(), nextLatitude(), nextLongitude(), nextLongitude(), false);\n    if (random().nextBoolean()) {\n      // box\n      return boxPolygon(box);\n    } else {\n      // triangle\n      return trianglePolygon(box);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"713122036535651642e6d4fe57ce12b449e18473","date":1461000510,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/geo/GeoTestUtil#nextPolygon().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/geo/GeoTestUtil#nextPolygon().mjava","sourceNew":"  /** returns next pseudorandom polygon */\n  public static Polygon nextPolygon() {\n    if (random().nextBoolean()) {\n      return surpriseMePolygon();\n    } else if (random().nextInt(10) == 1) {\n      // this poly is slow to create ... only do it 10% of the time:\n      while (true) {\n        int gons = TestUtil.nextInt(random(), 4, 500);\n        // So the poly can cover at most 50% of the earth's surface:\n        double radiusMeters = random().nextDouble() * GeoUtils.EARTH_MEAN_RADIUS_METERS * Math.PI / 2.0 + 1.0;\n        try {\n          return createRegularPolygon(nextLatitude(), nextLongitude(), radiusMeters, gons);\n        } catch (IllegalArgumentException iae) {\n          // we tried to cross dateline or pole ... try again\n        }\n      }\n    }\n\n    Rectangle box = nextBoxInternal(nextLatitude(), nextLatitude(), nextLongitude(), nextLongitude(), false);\n    if (random().nextBoolean()) {\n      // box\n      return boxPolygon(box);\n    } else {\n      // triangle\n      return trianglePolygon(box);\n    }\n  }\n\n","sourceOld":"  /** returns next pseudorandom polygon */\n  public static Polygon nextPolygon() {\n    if (random().nextBoolean()) {\n      return surpriseMePolygon(null, null);\n    } else if (random().nextInt(10) == 1) {\n      // this poly is slow to create ... only do it 10% of the time:\n      while (true) {\n        int gons = TestUtil.nextInt(random(), 4, 500);\n        // So the poly can cover at most 50% of the earth's surface:\n        double radiusMeters = random().nextDouble() * GeoUtils.EARTH_MEAN_RADIUS_METERS * Math.PI / 2.0 + 1.0;\n        try {\n          return createRegularPolygon(nextLatitude(), nextLongitude(), radiusMeters, gons);\n        } catch (IllegalArgumentException iae) {\n          // we tried to cross dateline or pole ... try again\n        }\n      }\n    }\n\n    Rectangle box = nextBoxInternal(nextLatitude(), nextLatitude(), nextLongitude(), nextLongitude(), false);\n    if (random().nextBoolean()) {\n      // box\n      return boxPolygon(box);\n    } else {\n      // triangle\n      return trianglePolygon(box);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06fc6aedefe19d7a0b0d82dac953a4f161e16b5c","date":1531585717,"type":3,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/geo/GeoTestUtil#nextPolygon().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/geo/GeoTestUtil#nextPolygon().mjava","sourceNew":"  /** returns next pseudorandom polygon */\n  public static Polygon nextPolygon() {\n    if (random().nextBoolean()) {\n      return surpriseMePolygon();\n    } else if (random().nextInt(10) == 1) {\n      // this poly is slow to create ... only do it 10% of the time:\n      while (true) {\n        int gons = TestUtil.nextInt(random(), 4, 500);\n        // So the poly can cover at most 50% of the earth's surface:\n        double radiusMeters = random().nextDouble() * GeoUtils.EARTH_MEAN_RADIUS_METERS * Math.PI / 2.0 + 1.0;\n        try {\n          return createRegularPolygon(nextLatitude(), nextLongitude(), radiusMeters, gons);\n        } catch (IllegalArgumentException iae) {\n          // we tried to cross dateline or pole ... try again\n        }\n      }\n    }\n\n    Rectangle box = nextBoxInternal(false);\n    if (random().nextBoolean()) {\n      // box\n      return boxPolygon(box);\n    } else {\n      // triangle\n      return trianglePolygon(box);\n    }\n  }\n\n","sourceOld":"  /** returns next pseudorandom polygon */\n  public static Polygon nextPolygon() {\n    if (random().nextBoolean()) {\n      return surpriseMePolygon();\n    } else if (random().nextInt(10) == 1) {\n      // this poly is slow to create ... only do it 10% of the time:\n      while (true) {\n        int gons = TestUtil.nextInt(random(), 4, 500);\n        // So the poly can cover at most 50% of the earth's surface:\n        double radiusMeters = random().nextDouble() * GeoUtils.EARTH_MEAN_RADIUS_METERS * Math.PI / 2.0 + 1.0;\n        try {\n          return createRegularPolygon(nextLatitude(), nextLongitude(), radiusMeters, gons);\n        } catch (IllegalArgumentException iae) {\n          // we tried to cross dateline or pole ... try again\n        }\n      }\n    }\n\n    Rectangle box = nextBoxInternal(nextLatitude(), nextLatitude(), nextLongitude(), nextLongitude(), false);\n    if (random().nextBoolean()) {\n      // box\n      return boxPolygon(box);\n    } else {\n      // triangle\n      return trianglePolygon(box);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/geo/GeoTestUtil#nextPolygon().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/geo/GeoTestUtil#nextPolygon().mjava","sourceNew":"  /** returns next pseudorandom polygon */\n  public static Polygon nextPolygon() {\n    if (random().nextBoolean()) {\n      return surpriseMePolygon();\n    } else if (random().nextInt(10) == 1) {\n      // this poly is slow to create ... only do it 10% of the time:\n      while (true) {\n        int gons = TestUtil.nextInt(random(), 4, 500);\n        // So the poly can cover at most 50% of the earth's surface:\n        double radiusMeters = random().nextDouble() * GeoUtils.EARTH_MEAN_RADIUS_METERS * Math.PI / 2.0 + 1.0;\n        try {\n          return createRegularPolygon(nextLatitude(), nextLongitude(), radiusMeters, gons);\n        } catch (IllegalArgumentException iae) {\n          // we tried to cross dateline or pole ... try again\n        }\n      }\n    }\n\n    Rectangle box = nextBoxInternal(false);\n    if (random().nextBoolean()) {\n      // box\n      return boxPolygon(box);\n    } else {\n      // triangle\n      return trianglePolygon(box);\n    }\n  }\n\n","sourceOld":"  /** returns next pseudorandom polygon */\n  public static Polygon nextPolygon() {\n    if (random().nextBoolean()) {\n      return surpriseMePolygon();\n    } else if (random().nextInt(10) == 1) {\n      // this poly is slow to create ... only do it 10% of the time:\n      while (true) {\n        int gons = TestUtil.nextInt(random(), 4, 500);\n        // So the poly can cover at most 50% of the earth's surface:\n        double radiusMeters = random().nextDouble() * GeoUtils.EARTH_MEAN_RADIUS_METERS * Math.PI / 2.0 + 1.0;\n        try {\n          return createRegularPolygon(nextLatitude(), nextLongitude(), radiusMeters, gons);\n        } catch (IllegalArgumentException iae) {\n          // we tried to cross dateline or pole ... try again\n        }\n      }\n    }\n\n    Rectangle box = nextBoxInternal(nextLatitude(), nextLatitude(), nextLongitude(), nextLongitude(), false);\n    if (random().nextBoolean()) {\n      // box\n      return boxPolygon(box);\n    } else {\n      // triangle\n      return trianglePolygon(box);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/geo/GeoTestUtil#nextPolygon().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/geo/GeoTestUtil#nextPolygon().mjava","sourceNew":"  /** returns next pseudorandom polygon */\n  public static Polygon nextPolygon() {\n    if (random().nextBoolean()) {\n      return surpriseMePolygon();\n    } else if (random().nextInt(10) == 1) {\n      // this poly is slow to create ... only do it 10% of the time:\n      while (true) {\n        int gons = TestUtil.nextInt(random(), 4, 500);\n        // So the poly can cover at most 50% of the earth's surface:\n        double radiusMeters = random().nextDouble() * GeoUtils.EARTH_MEAN_RADIUS_METERS * Math.PI / 2.0 + 1.0;\n        try {\n          return createRegularPolygon(nextLatitude(), nextLongitude(), radiusMeters, gons);\n        } catch (IllegalArgumentException iae) {\n          // we tried to cross dateline or pole ... try again\n        }\n      }\n    }\n\n    Rectangle box = nextBoxInternal(false);\n    if (random().nextBoolean()) {\n      // box\n      return boxPolygon(box);\n    } else {\n      // triangle\n      return trianglePolygon(box);\n    }\n  }\n\n","sourceOld":"  /** returns next pseudorandom polygon */\n  public static Polygon nextPolygon() {\n    if (random().nextBoolean()) {\n      return surpriseMePolygon();\n    } else if (random().nextInt(10) == 1) {\n      // this poly is slow to create ... only do it 10% of the time:\n      while (true) {\n        int gons = TestUtil.nextInt(random(), 4, 500);\n        // So the poly can cover at most 50% of the earth's surface:\n        double radiusMeters = random().nextDouble() * GeoUtils.EARTH_MEAN_RADIUS_METERS * Math.PI / 2.0 + 1.0;\n        try {\n          return createRegularPolygon(nextLatitude(), nextLongitude(), radiusMeters, gons);\n        } catch (IllegalArgumentException iae) {\n          // we tried to cross dateline or pole ... try again\n        }\n      }\n    }\n\n    Rectangle box = nextBoxInternal(nextLatitude(), nextLatitude(), nextLongitude(), nextLongitude(), false);\n    if (random().nextBoolean()) {\n      // box\n      return boxPolygon(box);\n    } else {\n      // triangle\n      return trianglePolygon(box);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"60f64dc6ee2edd7a99b719d96f6d9e7ef0ae5980","date":1533125102,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/geo/GeoTestUtil#nextPolygon().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/geo/GeoTestUtil#nextPolygon().mjava","sourceNew":"  /** returns next pseudorandom polygon */\n  public static Polygon nextPolygon() {\n    if (randomBoolean()) {\n      return surpriseMePolygon();\n    } else if (randomInt(10) == 1) {\n      // this poly is slow to create ... only do it 10% of the time:\n      while (true) {\n        int gons = randomIntBetween(4, 500);\n        // So the poly can cover at most 50% of the earth's surface:\n        double radiusMeters = randomDouble() * GeoUtils.EARTH_MEAN_RADIUS_METERS * Math.PI / 2.0 + 1.0;\n        try {\n          return createRegularPolygon(nextLatitude(), nextLongitude(), radiusMeters, gons);\n        } catch (IllegalArgumentException iae) {\n          // we tried to cross dateline or pole ... try again\n        }\n      }\n    }\n\n    Rectangle box = nextBoxInternal(false);\n    if (randomBoolean()) {\n      // box\n      return boxPolygon(box);\n    } else {\n      // triangle\n      return trianglePolygon(box);\n    }\n  }\n\n","sourceOld":"  /** returns next pseudorandom polygon */\n  public static Polygon nextPolygon() {\n    if (random().nextBoolean()) {\n      return surpriseMePolygon();\n    } else if (random().nextInt(10) == 1) {\n      // this poly is slow to create ... only do it 10% of the time:\n      while (true) {\n        int gons = TestUtil.nextInt(random(), 4, 500);\n        // So the poly can cover at most 50% of the earth's surface:\n        double radiusMeters = random().nextDouble() * GeoUtils.EARTH_MEAN_RADIUS_METERS * Math.PI / 2.0 + 1.0;\n        try {\n          return createRegularPolygon(nextLatitude(), nextLongitude(), radiusMeters, gons);\n        } catch (IllegalArgumentException iae) {\n          // we tried to cross dateline or pole ... try again\n        }\n      }\n    }\n\n    Rectangle box = nextBoxInternal(false);\n    if (random().nextBoolean()) {\n      // box\n      return boxPolygon(box);\n    } else {\n      // triangle\n      return trianglePolygon(box);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1b39f95206bdb2c5b28ef7e848cacce7f2baefea","date":1533131097,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/geo/GeoTestUtil#nextPolygon().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/geo/GeoTestUtil#nextPolygon().mjava","sourceNew":"  /** returns next pseudorandom polygon */\n  public static Polygon nextPolygon() {\n    if (random().nextBoolean()) {\n      return surpriseMePolygon();\n    } else if (random().nextInt(10) == 1) {\n      // this poly is slow to create ... only do it 10% of the time:\n      while (true) {\n        int gons = TestUtil.nextInt(random(), 4, 500);\n        // So the poly can cover at most 50% of the earth's surface:\n        double radiusMeters = random().nextDouble() * GeoUtils.EARTH_MEAN_RADIUS_METERS * Math.PI / 2.0 + 1.0;\n        try {\n          return createRegularPolygon(nextLatitude(), nextLongitude(), radiusMeters, gons);\n        } catch (IllegalArgumentException iae) {\n          // we tried to cross dateline or pole ... try again\n        }\n      }\n    }\n\n    Rectangle box = nextBoxInternal(false);\n    if (random().nextBoolean()) {\n      // box\n      return boxPolygon(box);\n    } else {\n      // triangle\n      return trianglePolygon(box);\n    }\n  }\n\n","sourceOld":"  /** returns next pseudorandom polygon */\n  public static Polygon nextPolygon() {\n    if (randomBoolean()) {\n      return surpriseMePolygon();\n    } else if (randomInt(10) == 1) {\n      // this poly is slow to create ... only do it 10% of the time:\n      while (true) {\n        int gons = randomIntBetween(4, 500);\n        // So the poly can cover at most 50% of the earth's surface:\n        double radiusMeters = randomDouble() * GeoUtils.EARTH_MEAN_RADIUS_METERS * Math.PI / 2.0 + 1.0;\n        try {\n          return createRegularPolygon(nextLatitude(), nextLongitude(), radiusMeters, gons);\n        } catch (IllegalArgumentException iae) {\n          // we tried to cross dateline or pole ... try again\n        }\n      }\n    }\n\n    Rectangle box = nextBoxInternal(false);\n    if (randomBoolean()) {\n      // box\n      return boxPolygon(box);\n    } else {\n      // triangle\n      return trianglePolygon(box);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"60f64dc6ee2edd7a99b719d96f6d9e7ef0ae5980":["06fc6aedefe19d7a0b0d82dac953a4f161e16b5c"],"06fc6aedefe19d7a0b0d82dac953a4f161e16b5c":["713122036535651642e6d4fe57ce12b449e18473"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["713122036535651642e6d4fe57ce12b449e18473","06fc6aedefe19d7a0b0d82dac953a4f161e16b5c"],"1b39f95206bdb2c5b28ef7e848cacce7f2baefea":["60f64dc6ee2edd7a99b719d96f6d9e7ef0ae5980"],"9ea9249ab9a9f76eb4132ceb4631d15315721f6a":["546f71f5b1e19230d6e7e59f117d08dbcf59fbfe","479a2bccf10cd79339b5e18eccf3b0b9a18b755f"],"713122036535651642e6d4fe57ce12b449e18473":["9ea9249ab9a9f76eb4132ceb4631d15315721f6a","3542cf82b8acd1e9ff2ee90fb0bf35e08698a1c2"],"479a2bccf10cd79339b5e18eccf3b0b9a18b755f":["546f71f5b1e19230d6e7e59f117d08dbcf59fbfe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"546f71f5b1e19230d6e7e59f117d08dbcf59fbfe":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3542cf82b8acd1e9ff2ee90fb0bf35e08698a1c2":["9ea9249ab9a9f76eb4132ceb4631d15315721f6a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1b39f95206bdb2c5b28ef7e848cacce7f2baefea"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["713122036535651642e6d4fe57ce12b449e18473","06fc6aedefe19d7a0b0d82dac953a4f161e16b5c"]},"commit2Childs":{"60f64dc6ee2edd7a99b719d96f6d9e7ef0ae5980":["1b39f95206bdb2c5b28ef7e848cacce7f2baefea"],"06fc6aedefe19d7a0b0d82dac953a4f161e16b5c":["60f64dc6ee2edd7a99b719d96f6d9e7ef0ae5980","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"1b39f95206bdb2c5b28ef7e848cacce7f2baefea":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9ea9249ab9a9f76eb4132ceb4631d15315721f6a":["713122036535651642e6d4fe57ce12b449e18473","3542cf82b8acd1e9ff2ee90fb0bf35e08698a1c2"],"713122036535651642e6d4fe57ce12b449e18473":["06fc6aedefe19d7a0b0d82dac953a4f161e16b5c","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"479a2bccf10cd79339b5e18eccf3b0b9a18b755f":["9ea9249ab9a9f76eb4132ceb4631d15315721f6a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["546f71f5b1e19230d6e7e59f117d08dbcf59fbfe"],"546f71f5b1e19230d6e7e59f117d08dbcf59fbfe":["9ea9249ab9a9f76eb4132ceb4631d15315721f6a","479a2bccf10cd79339b5e18eccf3b0b9a18b755f"],"3542cf82b8acd1e9ff2ee90fb0bf35e08698a1c2":["713122036535651642e6d4fe57ce12b449e18473"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}