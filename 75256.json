{"path":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndexAgainstDirectory#compareTermVectors(Terms,Terms,String).mjava","commits":[{"id":"d77dafd89756a5161d244985903e3487ca109182","date":1548679743,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndexAgainstDirectory#compareTermVectors(Terms,Terms,String).mjava","pathOld":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndexAgainstRAMDir#compareTermVectors(Terms,Terms,String).mjava","sourceNew":"  protected void compareTermVectors(Terms terms, Terms memTerms, String field_name) throws IOException {\n\n    TermsEnum termEnum = terms.iterator();\n    TermsEnum memTermEnum = memTerms.iterator();\n\n    while (termEnum.next() != null) {\n      assertNotNull(memTermEnum.next());\n      assertThat(termEnum.totalTermFreq(), equalTo(memTermEnum.totalTermFreq()));\n\n      PostingsEnum docsPosEnum = termEnum.postings(null, PostingsEnum.POSITIONS);\n      PostingsEnum memDocsPosEnum = memTermEnum.postings(null, PostingsEnum.POSITIONS);\n      String currentTerm = termEnum.term().utf8ToString();\n\n      assertThat(\"Token mismatch for field: \" + field_name, currentTerm, equalTo(memTermEnum.term().utf8ToString()));\n\n      docsPosEnum.nextDoc();\n      memDocsPosEnum.nextDoc();\n\n      int freq = docsPosEnum.freq();\n      assertThat(freq, equalTo(memDocsPosEnum.freq()));\n      for (int i = 0; i < freq; i++) {\n        String failDesc = \" (field:\" + field_name + \" term:\" + currentTerm + \")\";\n        int memPos = memDocsPosEnum.nextPosition();\n        int pos = docsPosEnum.nextPosition();\n        assertThat(\"Position test failed\" + failDesc, memPos, equalTo(pos));\n        assertThat(\"Start offset test failed\" + failDesc, memDocsPosEnum.startOffset(), equalTo(docsPosEnum.startOffset()));\n        assertThat(\"End offset test failed\" + failDesc, memDocsPosEnum.endOffset(), equalTo(docsPosEnum.endOffset()));\n        assertThat(\"Missing payload test failed\" + failDesc, docsPosEnum.getPayload(), equalTo(docsPosEnum.getPayload()));\n      }\n    }\n    assertNull(\"Still some tokens not processed\", memTermEnum.next());\n  }\n\n","sourceOld":"  protected void compareTermVectors(Terms terms, Terms memTerms, String field_name) throws IOException {\n\n    TermsEnum termEnum = terms.iterator();\n    TermsEnum memTermEnum = memTerms.iterator();\n\n    while (termEnum.next() != null) {\n      assertNotNull(memTermEnum.next());\n      assertThat(termEnum.totalTermFreq(), equalTo(memTermEnum.totalTermFreq()));\n\n      PostingsEnum docsPosEnum = termEnum.postings(null, PostingsEnum.POSITIONS);\n      PostingsEnum memDocsPosEnum = memTermEnum.postings(null, PostingsEnum.POSITIONS);\n      String currentTerm = termEnum.term().utf8ToString();\n\n      assertThat(\"Token mismatch for field: \" + field_name, currentTerm, equalTo(memTermEnum.term().utf8ToString()));\n\n      docsPosEnum.nextDoc();\n      memDocsPosEnum.nextDoc();\n\n      int freq = docsPosEnum.freq();\n      assertThat(freq, equalTo(memDocsPosEnum.freq()));\n      for (int i = 0; i < freq; i++) {\n        String failDesc = \" (field:\" + field_name + \" term:\" + currentTerm + \")\";\n        int memPos = memDocsPosEnum.nextPosition();\n        int pos = docsPosEnum.nextPosition();\n        assertThat(\"Position test failed\" + failDesc, memPos, equalTo(pos));\n        assertThat(\"Start offset test failed\" + failDesc, memDocsPosEnum.startOffset(), equalTo(docsPosEnum.startOffset()));\n        assertThat(\"End offset test failed\" + failDesc, memDocsPosEnum.endOffset(), equalTo(docsPosEnum.endOffset()));\n        assertThat(\"Missing payload test failed\" + failDesc, docsPosEnum.getPayload(), equalTo(docsPosEnum.getPayload()));\n      }\n    }\n    assertNull(\"Still some tokens not processed\", memTermEnum.next());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d77dafd89756a5161d244985903e3487ca109182":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d77dafd89756a5161d244985903e3487ca109182"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d77dafd89756a5161d244985903e3487ca109182"],"d77dafd89756a5161d244985903e3487ca109182":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}