{"path":"solr/contrib/morphlines-cell/src/java/org/apache/solr/morphlines/cell/SolrCellBuilder.SolrCell#SolrCell(CommandBuilder,Config,Command,Command,MorphlineContext).mjava","commits":[{"id":"b291fa953aeb2a135ed14740cb774eb76bfc64b0","date":1386184301,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/contrib/morphlines-cell/src/java/org/apache/solr/morphlines/cell/SolrCellBuilder.SolrCell#SolrCell(CommandBuilder,Config,Command,Command,MorphlineContext).mjava","pathOld":"solr/contrib/morphlines-cell/src/java/org/apache/solr/morphlines/cell/SolrCellBuilder.SolrCell#SolrCell(Config,Command,Command,MorphlineContext).mjava","sourceNew":"    public SolrCell(CommandBuilder builder, Config config, Command parent, Command child, MorphlineContext context) {\n      super(builder, config, parent, child, context);\n      \n      Config solrLocatorConfig = getConfigs().getConfig(config, \"solrLocator\");\n      SolrLocator locator = new SolrLocator(solrLocatorConfig, context);\n      LOG.debug(\"solrLocator: {}\", locator);\n      this.schema = locator.getIndexSchema();\n      Preconditions.checkNotNull(schema);\n      LOG.trace(\"Solr schema: \\n{}\", Joiner.on(\"\\n\").join(new TreeMap(schema.getFields()).values()));\n\n      ListMultimap<String, String> cellParams = ArrayListMultimap.create();\n      String uprefix = getConfigs().getString(config, ExtractingParams.UNKNOWN_FIELD_PREFIX, null);\n      if (uprefix != null) {\n        cellParams.put(ExtractingParams.UNKNOWN_FIELD_PREFIX, uprefix);\n      }\n      for (String capture : getConfigs().getStringList(config, ExtractingParams.CAPTURE_ELEMENTS, Collections.<String>emptyList())) {\n        cellParams.put(ExtractingParams.CAPTURE_ELEMENTS, capture);\n      }\n      Config fmapConfig = getConfigs().getConfig(config, \"fmap\", null);\n      if (fmapConfig != null) {\n        for (Map.Entry<String, Object> entry : new Configs().getEntrySet(fmapConfig)) {\n          cellParams.put(ExtractingParams.MAP_PREFIX + entry.getKey(), entry.getValue().toString());\n        }\n      }\n      String captureAttributes = getConfigs().getString(config, ExtractingParams.CAPTURE_ATTRIBUTES, null);\n      if (captureAttributes != null) {\n        cellParams.put(ExtractingParams.CAPTURE_ATTRIBUTES, captureAttributes);\n      }\n      String lowerNames = getConfigs().getString(config, ExtractingParams.LOWERNAMES, null);\n      if (lowerNames != null) {\n        cellParams.put(ExtractingParams.LOWERNAMES, lowerNames);\n      }\n      String defaultField = getConfigs().getString(config, ExtractingParams.DEFAULT_FIELD, null);\n      if (defaultField != null) {\n        cellParams.put(ExtractingParams.DEFAULT_FIELD, defaultField);\n      }\n      xpathExpr = getConfigs().getString(config, ExtractingParams.XPATH_EXPRESSION, null);\n      if (xpathExpr != null) {\n        cellParams.put(ExtractingParams.XPATH_EXPRESSION, xpathExpr);\n      }\n      \n      this.dateFormats = getConfigs().getStringList(config, \"dateFormats\", new ArrayList<String>(DateUtil.DEFAULT_DATE_FORMATS));\n      \n      String handlerStr = getConfigs().getString(config, \"solrContentHandlerFactory\", TrimSolrContentHandlerFactory.class.getName());\n      Class<? extends SolrContentHandlerFactory> factoryClass;\n      try {\n        factoryClass = (Class<? extends SolrContentHandlerFactory>)Class.forName(handlerStr);\n      } catch (ClassNotFoundException cnfe) {\n        throw new MorphlineCompilationException(\"Could not find class \"\n          + handlerStr + \" to use for \" + \"solrContentHandlerFactory\", config, cnfe);\n      }\n      this.solrContentHandlerFactory = getSolrContentHandlerFactory(factoryClass, dateFormats, config);\n\n      this.mediaTypeToParserMap = new HashMap<MediaType, Parser>();\n      //MimeTypes mimeTypes = MimeTypes.getDefaultMimeTypes(); // FIXME getMediaTypeRegistry.normalize() \n\n      List<? extends Config> parserConfigs = getConfigs().getConfigList(config, \"parsers\");\n      for (Config parserConfig : parserConfigs) {\n        String parserClassName = getConfigs().getString(parserConfig, \"parser\");\n        \n        Object obj;\n        try {\n          obj = Class.forName(parserClassName).newInstance();\n        } catch (Throwable e) {\n          throw new MorphlineCompilationException(\"Cannot instantiate Tika parser: \" + parserClassName, config, e);\n        }\n        if (!(obj instanceof Parser)) {\n          throw new MorphlineCompilationException(\"Tika parser \" + obj.getClass().getName()\n              + \" must be an instance of class \" + Parser.class.getName(), config);\n        }\n        Parser parser = (Parser) obj;\n        this.parsers.add(parser);\n\n        List<String> mediaTypes = getConfigs().getStringList(parserConfig, SUPPORTED_MIME_TYPES, Collections.<String>emptyList());\n        for (String mediaTypeStr : mediaTypes) {\n          MediaType mediaType = parseMediaType(mediaTypeStr);\n          addSupportedMimeType(mediaTypeStr);\n          this.mediaTypeToParserMap.put(mediaType, parser);\n        }\n        \n        if (!parserConfig.hasPath(SUPPORTED_MIME_TYPES)) {\n          for (MediaType mediaType : parser.getSupportedTypes(new ParseContext())) {\n            mediaType = mediaType.getBaseType();\n            addSupportedMimeType(mediaType.toString());\n            this.mediaTypeToParserMap.put(mediaType, parser);\n          }        \n          List<String> extras = getConfigs().getStringList(parserConfig, ADDITIONAL_SUPPORTED_MIME_TYPES, Collections.<String>emptyList());\n          for (String mediaTypeStr : extras) {\n            MediaType mediaType = parseMediaType(mediaTypeStr);\n            addSupportedMimeType(mediaTypeStr);\n            this.mediaTypeToParserMap.put(mediaType, parser);            \n          }\n        }\n      }\n      //LOG.info(\"mediaTypeToParserMap=\"+mediaTypeToParserMap);\n\n      Map<String, String[]> tmp = new HashMap();\n      for (Map.Entry<String,Collection<String>> entry : cellParams.asMap().entrySet()) {\n        tmp.put(entry.getKey(), entry.getValue().toArray(new String[entry.getValue().size()]));\n      }\n      this.solrParams = new MultiMapSolrParams(tmp);\n      validateArguments();\n    }\n\n","sourceOld":"    public SolrCell(Config config, Command parent, Command child, MorphlineContext context) {\n      super(config, parent, child, context);\n      \n      Config solrLocatorConfig = getConfigs().getConfig(config, \"solrLocator\");\n      SolrLocator locator = new SolrLocator(solrLocatorConfig, context);\n      LOG.debug(\"solrLocator: {}\", locator);\n      this.schema = locator.getIndexSchema();\n      Preconditions.checkNotNull(schema);\n      LOG.trace(\"Solr schema: \\n{}\", Joiner.on(\"\\n\").join(new TreeMap(schema.getFields()).values()));\n\n      ListMultimap<String, String> cellParams = ArrayListMultimap.create();\n      String uprefix = getConfigs().getString(config, ExtractingParams.UNKNOWN_FIELD_PREFIX, null);\n      if (uprefix != null) {\n        cellParams.put(ExtractingParams.UNKNOWN_FIELD_PREFIX, uprefix);\n      }\n      for (String capture : getConfigs().getStringList(config, ExtractingParams.CAPTURE_ELEMENTS, Collections.<String>emptyList())) {\n        cellParams.put(ExtractingParams.CAPTURE_ELEMENTS, capture);\n      }\n      Config fmapConfig = getConfigs().getConfig(config, \"fmap\", null);\n      if (fmapConfig != null) {\n        for (Map.Entry<String, Object> entry : fmapConfig.root().unwrapped().entrySet()) {\n          cellParams.put(ExtractingParams.MAP_PREFIX + entry.getKey(), entry.getValue().toString());\n        }\n      }\n      String captureAttributes = getConfigs().getString(config, ExtractingParams.CAPTURE_ATTRIBUTES, null);\n      if (captureAttributes != null) {\n        cellParams.put(ExtractingParams.CAPTURE_ATTRIBUTES, captureAttributes);\n      }\n      String lowerNames = getConfigs().getString(config, ExtractingParams.LOWERNAMES, null);\n      if (lowerNames != null) {\n        cellParams.put(ExtractingParams.LOWERNAMES, lowerNames);\n      }\n      String defaultField = getConfigs().getString(config, ExtractingParams.DEFAULT_FIELD, null);\n      if (defaultField != null) {\n        cellParams.put(ExtractingParams.DEFAULT_FIELD, defaultField);\n      }\n      xpathExpr = getConfigs().getString(config, ExtractingParams.XPATH_EXPRESSION, null);\n      if (xpathExpr != null) {\n        cellParams.put(ExtractingParams.XPATH_EXPRESSION, xpathExpr);\n      }\n      \n      this.dateFormats = getConfigs().getStringList(config, \"dateFormats\", new ArrayList<String>(DateUtil.DEFAULT_DATE_FORMATS));\n      \n      String handlerStr = getConfigs().getString(config, \"solrContentHandlerFactory\", TrimSolrContentHandlerFactory.class.getName());\n      Class<? extends SolrContentHandlerFactory> factoryClass;\n      try {\n        factoryClass = (Class<? extends SolrContentHandlerFactory>)Class.forName(handlerStr);\n      } catch (ClassNotFoundException cnfe) {\n        throw new MorphlineCompilationException(\"Could not find class \"\n          + handlerStr + \" to use for \" + \"solrContentHandlerFactory\", config, cnfe);\n      }\n      this.solrContentHandlerFactory = getSolrContentHandlerFactory(factoryClass, dateFormats, config);\n\n      this.mediaTypeToParserMap = new HashMap<MediaType, Parser>();\n      //MimeTypes mimeTypes = MimeTypes.getDefaultMimeTypes(); // FIXME getMediaTypeRegistry.normalize() \n\n      List<? extends Config> parserConfigs = getConfigs().getConfigList(config, \"parsers\");\n      for (Config parserConfig : parserConfigs) {\n        String parserClassName = getConfigs().getString(parserConfig, \"parser\");\n        \n        Object obj;\n        try {\n          obj = Class.forName(parserClassName).newInstance();\n        } catch (Throwable e) {\n          throw new MorphlineCompilationException(\"Cannot instantiate Tika parser: \" + parserClassName, config, e);\n        }\n        if (!(obj instanceof Parser)) {\n          throw new MorphlineCompilationException(\"Tika parser \" + obj.getClass().getName()\n              + \" must be an instance of class \" + Parser.class.getName(), config);\n        }\n        Parser parser = (Parser) obj;\n        this.parsers.add(parser);\n\n        List<String> mediaTypes = getConfigs().getStringList(parserConfig, SUPPORTED_MIME_TYPES, Collections.<String>emptyList());\n        for (String mediaTypeStr : mediaTypes) {\n          MediaType mediaType = parseMediaType(mediaTypeStr);\n          addSupportedMimeType(mediaTypeStr);\n          this.mediaTypeToParserMap.put(mediaType, parser);\n        }\n        \n        if (!parserConfig.hasPath(SUPPORTED_MIME_TYPES)) {\n          for (MediaType mediaType : parser.getSupportedTypes(new ParseContext())) {\n            mediaType = mediaType.getBaseType();\n            addSupportedMimeType(mediaType.toString());\n            this.mediaTypeToParserMap.put(mediaType, parser);\n          }        \n          List<String> extras = getConfigs().getStringList(parserConfig, ADDITIONAL_SUPPORTED_MIME_TYPES, Collections.<String>emptyList());\n          for (String mediaTypeStr : extras) {\n            MediaType mediaType = parseMediaType(mediaTypeStr);\n            addSupportedMimeType(mediaTypeStr);\n            this.mediaTypeToParserMap.put(mediaType, parser);            \n          }\n        }\n      }\n      //LOG.info(\"mediaTypeToParserMap=\"+mediaTypeToParserMap);\n\n      Map<String, String[]> tmp = new HashMap();\n      for (Map.Entry<String,Collection<String>> entry : cellParams.asMap().entrySet()) {\n        tmp.put(entry.getKey(), entry.getValue().toArray(new String[entry.getValue().size()]));\n      }\n      this.solrParams = new MultiMapSolrParams(tmp);\n      validateArguments();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/contrib/morphlines-cell/src/java/org/apache/solr/morphlines/cell/SolrCellBuilder.SolrCell#SolrCell(CommandBuilder,Config,Command,Command,MorphlineContext).mjava","pathOld":"/dev/null","sourceNew":"    public SolrCell(CommandBuilder builder, Config config, Command parent, Command child, MorphlineContext context) {\n      super(builder, config, parent, child, context);\n      \n      Config solrLocatorConfig = getConfigs().getConfig(config, \"solrLocator\");\n      SolrLocator locator = new SolrLocator(solrLocatorConfig, context);\n      LOG.debug(\"solrLocator: {}\", locator);\n      this.schema = locator.getIndexSchema();\n      Preconditions.checkNotNull(schema);\n      LOG.trace(\"Solr schema: \\n{}\", Joiner.on(\"\\n\").join(new TreeMap(schema.getFields()).values()));\n\n      ListMultimap<String, String> cellParams = ArrayListMultimap.create();\n      String uprefix = getConfigs().getString(config, ExtractingParams.UNKNOWN_FIELD_PREFIX, null);\n      if (uprefix != null) {\n        cellParams.put(ExtractingParams.UNKNOWN_FIELD_PREFIX, uprefix);\n      }\n      for (String capture : getConfigs().getStringList(config, ExtractingParams.CAPTURE_ELEMENTS, Collections.<String>emptyList())) {\n        cellParams.put(ExtractingParams.CAPTURE_ELEMENTS, capture);\n      }\n      Config fmapConfig = getConfigs().getConfig(config, \"fmap\", null);\n      if (fmapConfig != null) {\n        for (Map.Entry<String, Object> entry : new Configs().getEntrySet(fmapConfig)) {\n          cellParams.put(ExtractingParams.MAP_PREFIX + entry.getKey(), entry.getValue().toString());\n        }\n      }\n      String captureAttributes = getConfigs().getString(config, ExtractingParams.CAPTURE_ATTRIBUTES, null);\n      if (captureAttributes != null) {\n        cellParams.put(ExtractingParams.CAPTURE_ATTRIBUTES, captureAttributes);\n      }\n      String lowerNames = getConfigs().getString(config, ExtractingParams.LOWERNAMES, null);\n      if (lowerNames != null) {\n        cellParams.put(ExtractingParams.LOWERNAMES, lowerNames);\n      }\n      String defaultField = getConfigs().getString(config, ExtractingParams.DEFAULT_FIELD, null);\n      if (defaultField != null) {\n        cellParams.put(ExtractingParams.DEFAULT_FIELD, defaultField);\n      }\n      xpathExpr = getConfigs().getString(config, ExtractingParams.XPATH_EXPRESSION, null);\n      if (xpathExpr != null) {\n        cellParams.put(ExtractingParams.XPATH_EXPRESSION, xpathExpr);\n      }\n      \n      this.dateFormats = getConfigs().getStringList(config, \"dateFormats\", new ArrayList<String>(DateUtil.DEFAULT_DATE_FORMATS));\n      \n      String handlerStr = getConfigs().getString(config, \"solrContentHandlerFactory\", TrimSolrContentHandlerFactory.class.getName());\n      Class<? extends SolrContentHandlerFactory> factoryClass;\n      try {\n        factoryClass = (Class<? extends SolrContentHandlerFactory>)Class.forName(handlerStr);\n      } catch (ClassNotFoundException cnfe) {\n        throw new MorphlineCompilationException(\"Could not find class \"\n          + handlerStr + \" to use for \" + \"solrContentHandlerFactory\", config, cnfe);\n      }\n      this.solrContentHandlerFactory = getSolrContentHandlerFactory(factoryClass, dateFormats, config);\n\n      this.mediaTypeToParserMap = new HashMap<MediaType, Parser>();\n      //MimeTypes mimeTypes = MimeTypes.getDefaultMimeTypes(); // FIXME getMediaTypeRegistry.normalize() \n\n      List<? extends Config> parserConfigs = getConfigs().getConfigList(config, \"parsers\");\n      for (Config parserConfig : parserConfigs) {\n        String parserClassName = getConfigs().getString(parserConfig, \"parser\");\n        \n        Object obj;\n        try {\n          obj = Class.forName(parserClassName).newInstance();\n        } catch (Throwable e) {\n          throw new MorphlineCompilationException(\"Cannot instantiate Tika parser: \" + parserClassName, config, e);\n        }\n        if (!(obj instanceof Parser)) {\n          throw new MorphlineCompilationException(\"Tika parser \" + obj.getClass().getName()\n              + \" must be an instance of class \" + Parser.class.getName(), config);\n        }\n        Parser parser = (Parser) obj;\n        this.parsers.add(parser);\n\n        List<String> mediaTypes = getConfigs().getStringList(parserConfig, SUPPORTED_MIME_TYPES, Collections.<String>emptyList());\n        for (String mediaTypeStr : mediaTypes) {\n          MediaType mediaType = parseMediaType(mediaTypeStr);\n          addSupportedMimeType(mediaTypeStr);\n          this.mediaTypeToParserMap.put(mediaType, parser);\n        }\n        \n        if (!parserConfig.hasPath(SUPPORTED_MIME_TYPES)) {\n          for (MediaType mediaType : parser.getSupportedTypes(new ParseContext())) {\n            mediaType = mediaType.getBaseType();\n            addSupportedMimeType(mediaType.toString());\n            this.mediaTypeToParserMap.put(mediaType, parser);\n          }        \n          List<String> extras = getConfigs().getStringList(parserConfig, ADDITIONAL_SUPPORTED_MIME_TYPES, Collections.<String>emptyList());\n          for (String mediaTypeStr : extras) {\n            MediaType mediaType = parseMediaType(mediaTypeStr);\n            addSupportedMimeType(mediaTypeStr);\n            this.mediaTypeToParserMap.put(mediaType, parser);            \n          }\n        }\n      }\n      //LOG.info(\"mediaTypeToParserMap=\"+mediaTypeToParserMap);\n\n      Map<String, String[]> tmp = new HashMap();\n      for (Map.Entry<String,Collection<String>> entry : cellParams.asMap().entrySet()) {\n        tmp.put(entry.getKey(), entry.getValue().toArray(new String[entry.getValue().size()]));\n      }\n      this.solrParams = new MultiMapSolrParams(tmp);\n      validateArguments();\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c170e9d4c93c47801b611c5f124a91c5d27e0d73","date":1392824784,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/contrib/morphlines-cell/src/java/org/apache/solr/morphlines/cell/SolrCellBuilder.SolrCell#SolrCell(CommandBuilder,Config,Command,Command,MorphlineContext).mjava","pathOld":"solr/contrib/morphlines-cell/src/java/org/apache/solr/morphlines/cell/SolrCellBuilder.SolrCell#SolrCell(CommandBuilder,Config,Command,Command,MorphlineContext).mjava","sourceNew":"    public SolrCell(CommandBuilder builder, Config config, Command parent, Command child, MorphlineContext context) {\n      super(builder, config, parent, child, context);\n      \n      Config solrLocatorConfig = getConfigs().getConfig(config, \"solrLocator\");\n      SolrLocator locator = new SolrLocator(solrLocatorConfig, context);\n      LOG.debug(\"solrLocator: {}\", locator);\n      this.schema = locator.getIndexSchema();\n      Preconditions.checkNotNull(schema);\n      LOG.trace(\"Solr schema: \\n{}\", Joiner.on(\"\\n\").join(new TreeMap(schema.getFields()).values()));\n\n      ListMultimap<String, String> cellParams = ArrayListMultimap.create();\n      String uprefix = getConfigs().getString(config, ExtractingParams.UNKNOWN_FIELD_PREFIX, null);\n      if (uprefix != null) {\n        cellParams.put(ExtractingParams.UNKNOWN_FIELD_PREFIX, uprefix);\n      }\n      for (String capture : getConfigs().getStringList(config, ExtractingParams.CAPTURE_ELEMENTS, Collections.<String>emptyList())) {\n        cellParams.put(ExtractingParams.CAPTURE_ELEMENTS, capture);\n      }\n      Config fmapConfig = getConfigs().getConfig(config, \"fmap\", null);\n      if (fmapConfig != null) {\n        for (Map.Entry<String, Object> entry : new Configs().getEntrySet(fmapConfig)) {\n          cellParams.put(ExtractingParams.MAP_PREFIX + entry.getKey(), entry.getValue().toString());\n        }\n      }\n      String captureAttributes = getConfigs().getString(config, ExtractingParams.CAPTURE_ATTRIBUTES, null);\n      if (captureAttributes != null) {\n        cellParams.put(ExtractingParams.CAPTURE_ATTRIBUTES, captureAttributes);\n      }\n      String lowerNames = getConfigs().getString(config, ExtractingParams.LOWERNAMES, null);\n      if (lowerNames != null) {\n        cellParams.put(ExtractingParams.LOWERNAMES, lowerNames);\n      }\n      String defaultField = getConfigs().getString(config, ExtractingParams.DEFAULT_FIELD, null);\n      if (defaultField != null) {\n        cellParams.put(ExtractingParams.DEFAULT_FIELD, defaultField);\n      }\n      xpathExpr = getConfigs().getString(config, ExtractingParams.XPATH_EXPRESSION, null);\n      if (xpathExpr != null) {\n        cellParams.put(ExtractingParams.XPATH_EXPRESSION, xpathExpr);\n      }\n      \n      this.dateFormats = getConfigs().getStringList(config, \"dateFormats\", new ArrayList<String>(DateUtil.DEFAULT_DATE_FORMATS));\n      \n      String handlerStr = getConfigs().getString(config, \"solrContentHandlerFactory\", TrimSolrContentHandlerFactory.class.getName());\n      Class<? extends SolrContentHandlerFactory> factoryClass;\n      try {\n        factoryClass = (Class<? extends SolrContentHandlerFactory>)Class.forName(handlerStr);\n      } catch (ClassNotFoundException cnfe) {\n        throw new MorphlineCompilationException(\"Could not find class \"\n          + handlerStr + \" to use for \" + \"solrContentHandlerFactory\", config, cnfe);\n      }\n      this.solrContentHandlerFactory = getSolrContentHandlerFactory(factoryClass, dateFormats, config);\n\n      this.locale = getLocale(getConfigs().getString(config, \"locale\", \"\"));\n      \n      this.mediaTypeToParserMap = new HashMap<MediaType, Parser>();\n      //MimeTypes mimeTypes = MimeTypes.getDefaultMimeTypes(); // FIXME getMediaTypeRegistry.normalize() \n\n      List<? extends Config> parserConfigs = getConfigs().getConfigList(config, \"parsers\");\n      for (Config parserConfig : parserConfigs) {\n        String parserClassName = getConfigs().getString(parserConfig, \"parser\");\n        \n        Object obj;\n        try {\n          obj = Class.forName(parserClassName).newInstance();\n        } catch (Throwable e) {\n          throw new MorphlineCompilationException(\"Cannot instantiate Tika parser: \" + parserClassName, config, e);\n        }\n        if (!(obj instanceof Parser)) {\n          throw new MorphlineCompilationException(\"Tika parser \" + obj.getClass().getName()\n              + \" must be an instance of class \" + Parser.class.getName(), config);\n        }\n        Parser parser = (Parser) obj;\n        this.parsers.add(parser);\n\n        List<String> mediaTypes = getConfigs().getStringList(parserConfig, SUPPORTED_MIME_TYPES, Collections.<String>emptyList());\n        for (String mediaTypeStr : mediaTypes) {\n          MediaType mediaType = parseMediaType(mediaTypeStr);\n          addSupportedMimeType(mediaTypeStr);\n          this.mediaTypeToParserMap.put(mediaType, parser);\n        }\n        \n        if (!parserConfig.hasPath(SUPPORTED_MIME_TYPES)) {\n          for (MediaType mediaType : parser.getSupportedTypes(new ParseContext())) {\n            mediaType = mediaType.getBaseType();\n            addSupportedMimeType(mediaType.toString());\n            this.mediaTypeToParserMap.put(mediaType, parser);\n          }        \n          List<String> extras = getConfigs().getStringList(parserConfig, ADDITIONAL_SUPPORTED_MIME_TYPES, Collections.<String>emptyList());\n          for (String mediaTypeStr : extras) {\n            MediaType mediaType = parseMediaType(mediaTypeStr);\n            addSupportedMimeType(mediaTypeStr);\n            this.mediaTypeToParserMap.put(mediaType, parser);            \n          }\n        }\n      }\n      //LOG.info(\"mediaTypeToParserMap=\"+mediaTypeToParserMap);\n\n      Map<String, String[]> tmp = new HashMap();\n      for (Map.Entry<String,Collection<String>> entry : cellParams.asMap().entrySet()) {\n        tmp.put(entry.getKey(), entry.getValue().toArray(new String[entry.getValue().size()]));\n      }\n      this.solrParams = new MultiMapSolrParams(tmp);\n      validateArguments();\n    }\n\n","sourceOld":"    public SolrCell(CommandBuilder builder, Config config, Command parent, Command child, MorphlineContext context) {\n      super(builder, config, parent, child, context);\n      \n      Config solrLocatorConfig = getConfigs().getConfig(config, \"solrLocator\");\n      SolrLocator locator = new SolrLocator(solrLocatorConfig, context);\n      LOG.debug(\"solrLocator: {}\", locator);\n      this.schema = locator.getIndexSchema();\n      Preconditions.checkNotNull(schema);\n      LOG.trace(\"Solr schema: \\n{}\", Joiner.on(\"\\n\").join(new TreeMap(schema.getFields()).values()));\n\n      ListMultimap<String, String> cellParams = ArrayListMultimap.create();\n      String uprefix = getConfigs().getString(config, ExtractingParams.UNKNOWN_FIELD_PREFIX, null);\n      if (uprefix != null) {\n        cellParams.put(ExtractingParams.UNKNOWN_FIELD_PREFIX, uprefix);\n      }\n      for (String capture : getConfigs().getStringList(config, ExtractingParams.CAPTURE_ELEMENTS, Collections.<String>emptyList())) {\n        cellParams.put(ExtractingParams.CAPTURE_ELEMENTS, capture);\n      }\n      Config fmapConfig = getConfigs().getConfig(config, \"fmap\", null);\n      if (fmapConfig != null) {\n        for (Map.Entry<String, Object> entry : new Configs().getEntrySet(fmapConfig)) {\n          cellParams.put(ExtractingParams.MAP_PREFIX + entry.getKey(), entry.getValue().toString());\n        }\n      }\n      String captureAttributes = getConfigs().getString(config, ExtractingParams.CAPTURE_ATTRIBUTES, null);\n      if (captureAttributes != null) {\n        cellParams.put(ExtractingParams.CAPTURE_ATTRIBUTES, captureAttributes);\n      }\n      String lowerNames = getConfigs().getString(config, ExtractingParams.LOWERNAMES, null);\n      if (lowerNames != null) {\n        cellParams.put(ExtractingParams.LOWERNAMES, lowerNames);\n      }\n      String defaultField = getConfigs().getString(config, ExtractingParams.DEFAULT_FIELD, null);\n      if (defaultField != null) {\n        cellParams.put(ExtractingParams.DEFAULT_FIELD, defaultField);\n      }\n      xpathExpr = getConfigs().getString(config, ExtractingParams.XPATH_EXPRESSION, null);\n      if (xpathExpr != null) {\n        cellParams.put(ExtractingParams.XPATH_EXPRESSION, xpathExpr);\n      }\n      \n      this.dateFormats = getConfigs().getStringList(config, \"dateFormats\", new ArrayList<String>(DateUtil.DEFAULT_DATE_FORMATS));\n      \n      String handlerStr = getConfigs().getString(config, \"solrContentHandlerFactory\", TrimSolrContentHandlerFactory.class.getName());\n      Class<? extends SolrContentHandlerFactory> factoryClass;\n      try {\n        factoryClass = (Class<? extends SolrContentHandlerFactory>)Class.forName(handlerStr);\n      } catch (ClassNotFoundException cnfe) {\n        throw new MorphlineCompilationException(\"Could not find class \"\n          + handlerStr + \" to use for \" + \"solrContentHandlerFactory\", config, cnfe);\n      }\n      this.solrContentHandlerFactory = getSolrContentHandlerFactory(factoryClass, dateFormats, config);\n\n      this.mediaTypeToParserMap = new HashMap<MediaType, Parser>();\n      //MimeTypes mimeTypes = MimeTypes.getDefaultMimeTypes(); // FIXME getMediaTypeRegistry.normalize() \n\n      List<? extends Config> parserConfigs = getConfigs().getConfigList(config, \"parsers\");\n      for (Config parserConfig : parserConfigs) {\n        String parserClassName = getConfigs().getString(parserConfig, \"parser\");\n        \n        Object obj;\n        try {\n          obj = Class.forName(parserClassName).newInstance();\n        } catch (Throwable e) {\n          throw new MorphlineCompilationException(\"Cannot instantiate Tika parser: \" + parserClassName, config, e);\n        }\n        if (!(obj instanceof Parser)) {\n          throw new MorphlineCompilationException(\"Tika parser \" + obj.getClass().getName()\n              + \" must be an instance of class \" + Parser.class.getName(), config);\n        }\n        Parser parser = (Parser) obj;\n        this.parsers.add(parser);\n\n        List<String> mediaTypes = getConfigs().getStringList(parserConfig, SUPPORTED_MIME_TYPES, Collections.<String>emptyList());\n        for (String mediaTypeStr : mediaTypes) {\n          MediaType mediaType = parseMediaType(mediaTypeStr);\n          addSupportedMimeType(mediaTypeStr);\n          this.mediaTypeToParserMap.put(mediaType, parser);\n        }\n        \n        if (!parserConfig.hasPath(SUPPORTED_MIME_TYPES)) {\n          for (MediaType mediaType : parser.getSupportedTypes(new ParseContext())) {\n            mediaType = mediaType.getBaseType();\n            addSupportedMimeType(mediaType.toString());\n            this.mediaTypeToParserMap.put(mediaType, parser);\n          }        \n          List<String> extras = getConfigs().getStringList(parserConfig, ADDITIONAL_SUPPORTED_MIME_TYPES, Collections.<String>emptyList());\n          for (String mediaTypeStr : extras) {\n            MediaType mediaType = parseMediaType(mediaTypeStr);\n            addSupportedMimeType(mediaTypeStr);\n            this.mediaTypeToParserMap.put(mediaType, parser);            \n          }\n        }\n      }\n      //LOG.info(\"mediaTypeToParserMap=\"+mediaTypeToParserMap);\n\n      Map<String, String[]> tmp = new HashMap();\n      for (Map.Entry<String,Collection<String>> entry : cellParams.asMap().entrySet()) {\n        tmp.put(entry.getKey(), entry.getValue().toArray(new String[entry.getValue().size()]));\n      }\n      this.solrParams = new MultiMapSolrParams(tmp);\n      validateArguments();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/contrib/morphlines-cell/src/java/org/apache/solr/morphlines/cell/SolrCellBuilder.SolrCell#SolrCell(CommandBuilder,Config,Command,Command,MorphlineContext).mjava","pathOld":"solr/contrib/morphlines-cell/src/java/org/apache/solr/morphlines/cell/SolrCellBuilder.SolrCell#SolrCell(CommandBuilder,Config,Command,Command,MorphlineContext).mjava","sourceNew":"    public SolrCell(CommandBuilder builder, Config config, Command parent, Command child, MorphlineContext context) {\n      super(builder, config, parent, child, context);\n      \n      Config solrLocatorConfig = getConfigs().getConfig(config, \"solrLocator\");\n      SolrLocator locator = new SolrLocator(solrLocatorConfig, context);\n      LOG.debug(\"solrLocator: {}\", locator);\n      this.schema = locator.getIndexSchema();\n      Preconditions.checkNotNull(schema);\n      LOG.trace(\"Solr schema: \\n{}\", Joiner.on(\"\\n\").join(new TreeMap(schema.getFields()).values()));\n\n      ListMultimap<String, String> cellParams = ArrayListMultimap.create();\n      String uprefix = getConfigs().getString(config, ExtractingParams.UNKNOWN_FIELD_PREFIX, null);\n      if (uprefix != null) {\n        cellParams.put(ExtractingParams.UNKNOWN_FIELD_PREFIX, uprefix);\n      }\n      for (String capture : getConfigs().getStringList(config, ExtractingParams.CAPTURE_ELEMENTS, Collections.<String>emptyList())) {\n        cellParams.put(ExtractingParams.CAPTURE_ELEMENTS, capture);\n      }\n      Config fmapConfig = getConfigs().getConfig(config, \"fmap\", null);\n      if (fmapConfig != null) {\n        for (Map.Entry<String, Object> entry : new Configs().getEntrySet(fmapConfig)) {\n          cellParams.put(ExtractingParams.MAP_PREFIX + entry.getKey(), entry.getValue().toString());\n        }\n      }\n      String captureAttributes = getConfigs().getString(config, ExtractingParams.CAPTURE_ATTRIBUTES, null);\n      if (captureAttributes != null) {\n        cellParams.put(ExtractingParams.CAPTURE_ATTRIBUTES, captureAttributes);\n      }\n      String lowerNames = getConfigs().getString(config, ExtractingParams.LOWERNAMES, null);\n      if (lowerNames != null) {\n        cellParams.put(ExtractingParams.LOWERNAMES, lowerNames);\n      }\n      String defaultField = getConfigs().getString(config, ExtractingParams.DEFAULT_FIELD, null);\n      if (defaultField != null) {\n        cellParams.put(ExtractingParams.DEFAULT_FIELD, defaultField);\n      }\n      xpathExpr = getConfigs().getString(config, ExtractingParams.XPATH_EXPRESSION, null);\n      if (xpathExpr != null) {\n        cellParams.put(ExtractingParams.XPATH_EXPRESSION, xpathExpr);\n      }\n      \n      this.dateFormats = getConfigs().getStringList(config, \"dateFormats\", new ArrayList<>(DateUtil.DEFAULT_DATE_FORMATS));\n      \n      String handlerStr = getConfigs().getString(config, \"solrContentHandlerFactory\", TrimSolrContentHandlerFactory.class.getName());\n      Class<? extends SolrContentHandlerFactory> factoryClass;\n      try {\n        factoryClass = (Class<? extends SolrContentHandlerFactory>)Class.forName(handlerStr);\n      } catch (ClassNotFoundException cnfe) {\n        throw new MorphlineCompilationException(\"Could not find class \"\n          + handlerStr + \" to use for \" + \"solrContentHandlerFactory\", config, cnfe);\n      }\n      this.solrContentHandlerFactory = getSolrContentHandlerFactory(factoryClass, dateFormats, config);\n\n      this.locale = getLocale(getConfigs().getString(config, \"locale\", \"\"));\n      \n      this.mediaTypeToParserMap = new HashMap<>();\n      //MimeTypes mimeTypes = MimeTypes.getDefaultMimeTypes(); // FIXME getMediaTypeRegistry.normalize() \n\n      List<? extends Config> parserConfigs = getConfigs().getConfigList(config, \"parsers\");\n      for (Config parserConfig : parserConfigs) {\n        String parserClassName = getConfigs().getString(parserConfig, \"parser\");\n        \n        Object obj;\n        try {\n          obj = Class.forName(parserClassName).newInstance();\n        } catch (Throwable e) {\n          throw new MorphlineCompilationException(\"Cannot instantiate Tika parser: \" + parserClassName, config, e);\n        }\n        if (!(obj instanceof Parser)) {\n          throw new MorphlineCompilationException(\"Tika parser \" + obj.getClass().getName()\n              + \" must be an instance of class \" + Parser.class.getName(), config);\n        }\n        Parser parser = (Parser) obj;\n        this.parsers.add(parser);\n\n        List<String> mediaTypes = getConfigs().getStringList(parserConfig, SUPPORTED_MIME_TYPES, Collections.<String>emptyList());\n        for (String mediaTypeStr : mediaTypes) {\n          MediaType mediaType = parseMediaType(mediaTypeStr);\n          addSupportedMimeType(mediaTypeStr);\n          this.mediaTypeToParserMap.put(mediaType, parser);\n        }\n        \n        if (!parserConfig.hasPath(SUPPORTED_MIME_TYPES)) {\n          for (MediaType mediaType : parser.getSupportedTypes(new ParseContext())) {\n            mediaType = mediaType.getBaseType();\n            addSupportedMimeType(mediaType.toString());\n            this.mediaTypeToParserMap.put(mediaType, parser);\n          }        \n          List<String> extras = getConfigs().getStringList(parserConfig, ADDITIONAL_SUPPORTED_MIME_TYPES, Collections.<String>emptyList());\n          for (String mediaTypeStr : extras) {\n            MediaType mediaType = parseMediaType(mediaTypeStr);\n            addSupportedMimeType(mediaTypeStr);\n            this.mediaTypeToParserMap.put(mediaType, parser);            \n          }\n        }\n      }\n      //LOG.info(\"mediaTypeToParserMap=\"+mediaTypeToParserMap);\n\n      Map<String, String[]> tmp = new HashMap();\n      for (Map.Entry<String,Collection<String>> entry : cellParams.asMap().entrySet()) {\n        tmp.put(entry.getKey(), entry.getValue().toArray(new String[entry.getValue().size()]));\n      }\n      this.solrParams = new MultiMapSolrParams(tmp);\n      validateArguments();\n    }\n\n","sourceOld":"    public SolrCell(CommandBuilder builder, Config config, Command parent, Command child, MorphlineContext context) {\n      super(builder, config, parent, child, context);\n      \n      Config solrLocatorConfig = getConfigs().getConfig(config, \"solrLocator\");\n      SolrLocator locator = new SolrLocator(solrLocatorConfig, context);\n      LOG.debug(\"solrLocator: {}\", locator);\n      this.schema = locator.getIndexSchema();\n      Preconditions.checkNotNull(schema);\n      LOG.trace(\"Solr schema: \\n{}\", Joiner.on(\"\\n\").join(new TreeMap(schema.getFields()).values()));\n\n      ListMultimap<String, String> cellParams = ArrayListMultimap.create();\n      String uprefix = getConfigs().getString(config, ExtractingParams.UNKNOWN_FIELD_PREFIX, null);\n      if (uprefix != null) {\n        cellParams.put(ExtractingParams.UNKNOWN_FIELD_PREFIX, uprefix);\n      }\n      for (String capture : getConfigs().getStringList(config, ExtractingParams.CAPTURE_ELEMENTS, Collections.<String>emptyList())) {\n        cellParams.put(ExtractingParams.CAPTURE_ELEMENTS, capture);\n      }\n      Config fmapConfig = getConfigs().getConfig(config, \"fmap\", null);\n      if (fmapConfig != null) {\n        for (Map.Entry<String, Object> entry : new Configs().getEntrySet(fmapConfig)) {\n          cellParams.put(ExtractingParams.MAP_PREFIX + entry.getKey(), entry.getValue().toString());\n        }\n      }\n      String captureAttributes = getConfigs().getString(config, ExtractingParams.CAPTURE_ATTRIBUTES, null);\n      if (captureAttributes != null) {\n        cellParams.put(ExtractingParams.CAPTURE_ATTRIBUTES, captureAttributes);\n      }\n      String lowerNames = getConfigs().getString(config, ExtractingParams.LOWERNAMES, null);\n      if (lowerNames != null) {\n        cellParams.put(ExtractingParams.LOWERNAMES, lowerNames);\n      }\n      String defaultField = getConfigs().getString(config, ExtractingParams.DEFAULT_FIELD, null);\n      if (defaultField != null) {\n        cellParams.put(ExtractingParams.DEFAULT_FIELD, defaultField);\n      }\n      xpathExpr = getConfigs().getString(config, ExtractingParams.XPATH_EXPRESSION, null);\n      if (xpathExpr != null) {\n        cellParams.put(ExtractingParams.XPATH_EXPRESSION, xpathExpr);\n      }\n      \n      this.dateFormats = getConfigs().getStringList(config, \"dateFormats\", new ArrayList<String>(DateUtil.DEFAULT_DATE_FORMATS));\n      \n      String handlerStr = getConfigs().getString(config, \"solrContentHandlerFactory\", TrimSolrContentHandlerFactory.class.getName());\n      Class<? extends SolrContentHandlerFactory> factoryClass;\n      try {\n        factoryClass = (Class<? extends SolrContentHandlerFactory>)Class.forName(handlerStr);\n      } catch (ClassNotFoundException cnfe) {\n        throw new MorphlineCompilationException(\"Could not find class \"\n          + handlerStr + \" to use for \" + \"solrContentHandlerFactory\", config, cnfe);\n      }\n      this.solrContentHandlerFactory = getSolrContentHandlerFactory(factoryClass, dateFormats, config);\n\n      this.locale = getLocale(getConfigs().getString(config, \"locale\", \"\"));\n      \n      this.mediaTypeToParserMap = new HashMap<MediaType, Parser>();\n      //MimeTypes mimeTypes = MimeTypes.getDefaultMimeTypes(); // FIXME getMediaTypeRegistry.normalize() \n\n      List<? extends Config> parserConfigs = getConfigs().getConfigList(config, \"parsers\");\n      for (Config parserConfig : parserConfigs) {\n        String parserClassName = getConfigs().getString(parserConfig, \"parser\");\n        \n        Object obj;\n        try {\n          obj = Class.forName(parserClassName).newInstance();\n        } catch (Throwable e) {\n          throw new MorphlineCompilationException(\"Cannot instantiate Tika parser: \" + parserClassName, config, e);\n        }\n        if (!(obj instanceof Parser)) {\n          throw new MorphlineCompilationException(\"Tika parser \" + obj.getClass().getName()\n              + \" must be an instance of class \" + Parser.class.getName(), config);\n        }\n        Parser parser = (Parser) obj;\n        this.parsers.add(parser);\n\n        List<String> mediaTypes = getConfigs().getStringList(parserConfig, SUPPORTED_MIME_TYPES, Collections.<String>emptyList());\n        for (String mediaTypeStr : mediaTypes) {\n          MediaType mediaType = parseMediaType(mediaTypeStr);\n          addSupportedMimeType(mediaTypeStr);\n          this.mediaTypeToParserMap.put(mediaType, parser);\n        }\n        \n        if (!parserConfig.hasPath(SUPPORTED_MIME_TYPES)) {\n          for (MediaType mediaType : parser.getSupportedTypes(new ParseContext())) {\n            mediaType = mediaType.getBaseType();\n            addSupportedMimeType(mediaType.toString());\n            this.mediaTypeToParserMap.put(mediaType, parser);\n          }        \n          List<String> extras = getConfigs().getStringList(parserConfig, ADDITIONAL_SUPPORTED_MIME_TYPES, Collections.<String>emptyList());\n          for (String mediaTypeStr : extras) {\n            MediaType mediaType = parseMediaType(mediaTypeStr);\n            addSupportedMimeType(mediaTypeStr);\n            this.mediaTypeToParserMap.put(mediaType, parser);            \n          }\n        }\n      }\n      //LOG.info(\"mediaTypeToParserMap=\"+mediaTypeToParserMap);\n\n      Map<String, String[]> tmp = new HashMap();\n      for (Map.Entry<String,Collection<String>> entry : cellParams.asMap().entrySet()) {\n        tmp.put(entry.getKey(), entry.getValue().toArray(new String[entry.getValue().size()]));\n      }\n      this.solrParams = new MultiMapSolrParams(tmp);\n      validateArguments();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1a72cdac51dd6e3756b9d267dd995bf7b0718d90","date":1452897717,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/contrib/morphlines-cell/src/java/org/apache/solr/morphlines/cell/SolrCellBuilder.SolrCell#SolrCell(CommandBuilder,Config,Command,Command,MorphlineContext).mjava","pathOld":"solr/contrib/morphlines-cell/src/java/org/apache/solr/morphlines/cell/SolrCellBuilder.SolrCell#SolrCell(CommandBuilder,Config,Command,Command,MorphlineContext).mjava","sourceNew":"    public SolrCell(CommandBuilder builder, Config config, Command parent, Command child, MorphlineContext context) {\n      super(builder, config, parent, child, context);\n      \n      Config solrLocatorConfig = getConfigs().getConfig(config, \"solrLocator\");\n      SolrLocator locator = new SolrLocator(solrLocatorConfig, context);\n      LOG.debug(\"solrLocator: {}\", locator);\n      this.schema = locator.getIndexSchema();\n      Preconditions.checkNotNull(schema);\n      LOG.trace(\"Solr schema: \\n{}\", Joiner.on(\"\\n\").join(new TreeMap<>(schema.getFields()).values()));\n\n      ListMultimap<String, String> cellParams = ArrayListMultimap.create();\n      String uprefix = getConfigs().getString(config, ExtractingParams.UNKNOWN_FIELD_PREFIX, null);\n      if (uprefix != null) {\n        cellParams.put(ExtractingParams.UNKNOWN_FIELD_PREFIX, uprefix);\n      }\n      for (String capture : getConfigs().getStringList(config, ExtractingParams.CAPTURE_ELEMENTS, Collections.<String>emptyList())) {\n        cellParams.put(ExtractingParams.CAPTURE_ELEMENTS, capture);\n      }\n      Config fmapConfig = getConfigs().getConfig(config, \"fmap\", null);\n      if (fmapConfig != null) {\n        for (Map.Entry<String, Object> entry : new Configs().getEntrySet(fmapConfig)) {\n          cellParams.put(ExtractingParams.MAP_PREFIX + entry.getKey(), entry.getValue().toString());\n        }\n      }\n      String captureAttributes = getConfigs().getString(config, ExtractingParams.CAPTURE_ATTRIBUTES, null);\n      if (captureAttributes != null) {\n        cellParams.put(ExtractingParams.CAPTURE_ATTRIBUTES, captureAttributes);\n      }\n      String lowerNames = getConfigs().getString(config, ExtractingParams.LOWERNAMES, null);\n      if (lowerNames != null) {\n        cellParams.put(ExtractingParams.LOWERNAMES, lowerNames);\n      }\n      String defaultField = getConfigs().getString(config, ExtractingParams.DEFAULT_FIELD, null);\n      if (defaultField != null) {\n        cellParams.put(ExtractingParams.DEFAULT_FIELD, defaultField);\n      }\n      xpathExpr = getConfigs().getString(config, ExtractingParams.XPATH_EXPRESSION, null);\n      if (xpathExpr != null) {\n        cellParams.put(ExtractingParams.XPATH_EXPRESSION, xpathExpr);\n      }\n      \n      this.dateFormats = getConfigs().getStringList(config, \"dateFormats\", new ArrayList<>(DateUtil.DEFAULT_DATE_FORMATS));\n      \n      String handlerStr = getConfigs().getString(config, \"solrContentHandlerFactory\", TrimSolrContentHandlerFactory.class.getName());\n      Class<? extends SolrContentHandlerFactory> factoryClass;\n      try {\n        factoryClass = Class.forName(handlerStr).asSubclass(SolrContentHandlerFactory.class);\n      } catch (ClassNotFoundException cnfe) {\n        throw new MorphlineCompilationException(\"Could not find class \"\n          + handlerStr + \" to use for \" + \"solrContentHandlerFactory\", config, cnfe);\n      }\n      this.solrContentHandlerFactory = getSolrContentHandlerFactory(factoryClass, dateFormats, config);\n\n      this.locale = getLocale(getConfigs().getString(config, \"locale\", \"\"));\n      \n      this.mediaTypeToParserMap = new HashMap<>();\n      //MimeTypes mimeTypes = MimeTypes.getDefaultMimeTypes(); // FIXME getMediaTypeRegistry.normalize() \n\n      List<? extends Config> parserConfigs = getConfigs().getConfigList(config, \"parsers\");\n      for (Config parserConfig : parserConfigs) {\n        String parserClassName = getConfigs().getString(parserConfig, \"parser\");\n        \n        Object obj;\n        try {\n          obj = Class.forName(parserClassName).newInstance();\n        } catch (Throwable e) {\n          throw new MorphlineCompilationException(\"Cannot instantiate Tika parser: \" + parserClassName, config, e);\n        }\n        if (!(obj instanceof Parser)) {\n          throw new MorphlineCompilationException(\"Tika parser \" + obj.getClass().getName()\n              + \" must be an instance of class \" + Parser.class.getName(), config);\n        }\n        Parser parser = (Parser) obj;\n        this.parsers.add(parser);\n\n        List<String> mediaTypes = getConfigs().getStringList(parserConfig, SUPPORTED_MIME_TYPES, Collections.<String>emptyList());\n        for (String mediaTypeStr : mediaTypes) {\n          MediaType mediaType = parseMediaType(mediaTypeStr);\n          addSupportedMimeType(mediaTypeStr);\n          this.mediaTypeToParserMap.put(mediaType, parser);\n        }\n        \n        if (!parserConfig.hasPath(SUPPORTED_MIME_TYPES)) {\n          for (MediaType mediaType : parser.getSupportedTypes(new ParseContext())) {\n            mediaType = mediaType.getBaseType();\n            addSupportedMimeType(mediaType.toString());\n            this.mediaTypeToParserMap.put(mediaType, parser);\n          }        \n          List<String> extras = getConfigs().getStringList(parserConfig, ADDITIONAL_SUPPORTED_MIME_TYPES, Collections.<String>emptyList());\n          for (String mediaTypeStr : extras) {\n            MediaType mediaType = parseMediaType(mediaTypeStr);\n            addSupportedMimeType(mediaTypeStr);\n            this.mediaTypeToParserMap.put(mediaType, parser);            \n          }\n        }\n      }\n      //LOG.info(\"mediaTypeToParserMap=\"+mediaTypeToParserMap);\n\n      Map<String, String[]> tmp = new HashMap<>();\n      for (Map.Entry<String,Collection<String>> entry : cellParams.asMap().entrySet()) {\n        tmp.put(entry.getKey(), entry.getValue().toArray(new String[entry.getValue().size()]));\n      }\n      this.solrParams = new MultiMapSolrParams(tmp);\n      validateArguments();\n    }\n\n","sourceOld":"    public SolrCell(CommandBuilder builder, Config config, Command parent, Command child, MorphlineContext context) {\n      super(builder, config, parent, child, context);\n      \n      Config solrLocatorConfig = getConfigs().getConfig(config, \"solrLocator\");\n      SolrLocator locator = new SolrLocator(solrLocatorConfig, context);\n      LOG.debug(\"solrLocator: {}\", locator);\n      this.schema = locator.getIndexSchema();\n      Preconditions.checkNotNull(schema);\n      LOG.trace(\"Solr schema: \\n{}\", Joiner.on(\"\\n\").join(new TreeMap(schema.getFields()).values()));\n\n      ListMultimap<String, String> cellParams = ArrayListMultimap.create();\n      String uprefix = getConfigs().getString(config, ExtractingParams.UNKNOWN_FIELD_PREFIX, null);\n      if (uprefix != null) {\n        cellParams.put(ExtractingParams.UNKNOWN_FIELD_PREFIX, uprefix);\n      }\n      for (String capture : getConfigs().getStringList(config, ExtractingParams.CAPTURE_ELEMENTS, Collections.<String>emptyList())) {\n        cellParams.put(ExtractingParams.CAPTURE_ELEMENTS, capture);\n      }\n      Config fmapConfig = getConfigs().getConfig(config, \"fmap\", null);\n      if (fmapConfig != null) {\n        for (Map.Entry<String, Object> entry : new Configs().getEntrySet(fmapConfig)) {\n          cellParams.put(ExtractingParams.MAP_PREFIX + entry.getKey(), entry.getValue().toString());\n        }\n      }\n      String captureAttributes = getConfigs().getString(config, ExtractingParams.CAPTURE_ATTRIBUTES, null);\n      if (captureAttributes != null) {\n        cellParams.put(ExtractingParams.CAPTURE_ATTRIBUTES, captureAttributes);\n      }\n      String lowerNames = getConfigs().getString(config, ExtractingParams.LOWERNAMES, null);\n      if (lowerNames != null) {\n        cellParams.put(ExtractingParams.LOWERNAMES, lowerNames);\n      }\n      String defaultField = getConfigs().getString(config, ExtractingParams.DEFAULT_FIELD, null);\n      if (defaultField != null) {\n        cellParams.put(ExtractingParams.DEFAULT_FIELD, defaultField);\n      }\n      xpathExpr = getConfigs().getString(config, ExtractingParams.XPATH_EXPRESSION, null);\n      if (xpathExpr != null) {\n        cellParams.put(ExtractingParams.XPATH_EXPRESSION, xpathExpr);\n      }\n      \n      this.dateFormats = getConfigs().getStringList(config, \"dateFormats\", new ArrayList<>(DateUtil.DEFAULT_DATE_FORMATS));\n      \n      String handlerStr = getConfigs().getString(config, \"solrContentHandlerFactory\", TrimSolrContentHandlerFactory.class.getName());\n      Class<? extends SolrContentHandlerFactory> factoryClass;\n      try {\n        factoryClass = (Class<? extends SolrContentHandlerFactory>)Class.forName(handlerStr);\n      } catch (ClassNotFoundException cnfe) {\n        throw new MorphlineCompilationException(\"Could not find class \"\n          + handlerStr + \" to use for \" + \"solrContentHandlerFactory\", config, cnfe);\n      }\n      this.solrContentHandlerFactory = getSolrContentHandlerFactory(factoryClass, dateFormats, config);\n\n      this.locale = getLocale(getConfigs().getString(config, \"locale\", \"\"));\n      \n      this.mediaTypeToParserMap = new HashMap<>();\n      //MimeTypes mimeTypes = MimeTypes.getDefaultMimeTypes(); // FIXME getMediaTypeRegistry.normalize() \n\n      List<? extends Config> parserConfigs = getConfigs().getConfigList(config, \"parsers\");\n      for (Config parserConfig : parserConfigs) {\n        String parserClassName = getConfigs().getString(parserConfig, \"parser\");\n        \n        Object obj;\n        try {\n          obj = Class.forName(parserClassName).newInstance();\n        } catch (Throwable e) {\n          throw new MorphlineCompilationException(\"Cannot instantiate Tika parser: \" + parserClassName, config, e);\n        }\n        if (!(obj instanceof Parser)) {\n          throw new MorphlineCompilationException(\"Tika parser \" + obj.getClass().getName()\n              + \" must be an instance of class \" + Parser.class.getName(), config);\n        }\n        Parser parser = (Parser) obj;\n        this.parsers.add(parser);\n\n        List<String> mediaTypes = getConfigs().getStringList(parserConfig, SUPPORTED_MIME_TYPES, Collections.<String>emptyList());\n        for (String mediaTypeStr : mediaTypes) {\n          MediaType mediaType = parseMediaType(mediaTypeStr);\n          addSupportedMimeType(mediaTypeStr);\n          this.mediaTypeToParserMap.put(mediaType, parser);\n        }\n        \n        if (!parserConfig.hasPath(SUPPORTED_MIME_TYPES)) {\n          for (MediaType mediaType : parser.getSupportedTypes(new ParseContext())) {\n            mediaType = mediaType.getBaseType();\n            addSupportedMimeType(mediaType.toString());\n            this.mediaTypeToParserMap.put(mediaType, parser);\n          }        \n          List<String> extras = getConfigs().getStringList(parserConfig, ADDITIONAL_SUPPORTED_MIME_TYPES, Collections.<String>emptyList());\n          for (String mediaTypeStr : extras) {\n            MediaType mediaType = parseMediaType(mediaTypeStr);\n            addSupportedMimeType(mediaTypeStr);\n            this.mediaTypeToParserMap.put(mediaType, parser);            \n          }\n        }\n      }\n      //LOG.info(\"mediaTypeToParserMap=\"+mediaTypeToParserMap);\n\n      Map<String, String[]> tmp = new HashMap();\n      for (Map.Entry<String,Collection<String>> entry : cellParams.asMap().entrySet()) {\n        tmp.put(entry.getKey(), entry.getValue().toArray(new String[entry.getValue().size()]));\n      }\n      this.solrParams = new MultiMapSolrParams(tmp);\n      validateArguments();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"982acea6b1fe5ee8319e43789b99c5cfa04e6a36","date":1453496740,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/contrib/morphlines-cell/src/java/org/apache/solr/morphlines/cell/SolrCellBuilder.SolrCell#SolrCell(CommandBuilder,Config,Command,Command,MorphlineContext).mjava","pathOld":"solr/contrib/morphlines-cell/src/java/org/apache/solr/morphlines/cell/SolrCellBuilder.SolrCell#SolrCell(CommandBuilder,Config,Command,Command,MorphlineContext).mjava","sourceNew":"    public SolrCell(CommandBuilder builder, Config config, Command parent, Command child, MorphlineContext context) {\n      super(builder, config, parent, child, context);\n      \n      Config solrLocatorConfig = getConfigs().getConfig(config, \"solrLocator\");\n      SolrLocator locator = new SolrLocator(solrLocatorConfig, context);\n      LOG.debug(\"solrLocator: {}\", locator);\n      this.schema = locator.getIndexSchema();\n      Preconditions.checkNotNull(schema);\n      LOG.trace(\"Solr schema: \\n{}\", Joiner.on(\"\\n\").join(new TreeMap<>(schema.getFields()).values()));\n\n      ListMultimap<String, String> cellParams = ArrayListMultimap.create();\n      String uprefix = getConfigs().getString(config, ExtractingParams.UNKNOWN_FIELD_PREFIX, null);\n      if (uprefix != null) {\n        cellParams.put(ExtractingParams.UNKNOWN_FIELD_PREFIX, uprefix);\n      }\n      for (String capture : getConfigs().getStringList(config, ExtractingParams.CAPTURE_ELEMENTS, Collections.<String>emptyList())) {\n        cellParams.put(ExtractingParams.CAPTURE_ELEMENTS, capture);\n      }\n      Config fmapConfig = getConfigs().getConfig(config, \"fmap\", null);\n      if (fmapConfig != null) {\n        for (Map.Entry<String, Object> entry : new Configs().getEntrySet(fmapConfig)) {\n          cellParams.put(ExtractingParams.MAP_PREFIX + entry.getKey(), entry.getValue().toString());\n        }\n      }\n      String captureAttributes = getConfigs().getString(config, ExtractingParams.CAPTURE_ATTRIBUTES, null);\n      if (captureAttributes != null) {\n        cellParams.put(ExtractingParams.CAPTURE_ATTRIBUTES, captureAttributes);\n      }\n      String lowerNames = getConfigs().getString(config, ExtractingParams.LOWERNAMES, null);\n      if (lowerNames != null) {\n        cellParams.put(ExtractingParams.LOWERNAMES, lowerNames);\n      }\n      String defaultField = getConfigs().getString(config, ExtractingParams.DEFAULT_FIELD, null);\n      if (defaultField != null) {\n        cellParams.put(ExtractingParams.DEFAULT_FIELD, defaultField);\n      }\n      xpathExpr = getConfigs().getString(config, ExtractingParams.XPATH_EXPRESSION, null);\n      if (xpathExpr != null) {\n        cellParams.put(ExtractingParams.XPATH_EXPRESSION, xpathExpr);\n      }\n      \n      this.dateFormats = getConfigs().getStringList(config, \"dateFormats\", new ArrayList<>(DateUtil.DEFAULT_DATE_FORMATS));\n      \n      String handlerStr = getConfigs().getString(config, \"solrContentHandlerFactory\", TrimSolrContentHandlerFactory.class.getName());\n      Class<? extends SolrContentHandlerFactory> factoryClass;\n      try {\n        factoryClass = Class.forName(handlerStr).asSubclass(SolrContentHandlerFactory.class);\n      } catch (ClassNotFoundException cnfe) {\n        throw new MorphlineCompilationException(\"Could not find class \"\n          + handlerStr + \" to use for \" + \"solrContentHandlerFactory\", config, cnfe);\n      }\n      this.solrContentHandlerFactory = getSolrContentHandlerFactory(factoryClass, dateFormats, config);\n\n      this.locale = getLocale(getConfigs().getString(config, \"locale\", null));\n      \n      this.mediaTypeToParserMap = new HashMap<>();\n      //MimeTypes mimeTypes = MimeTypes.getDefaultMimeTypes(); // FIXME getMediaTypeRegistry.normalize() \n\n      List<? extends Config> parserConfigs = getConfigs().getConfigList(config, \"parsers\");\n      for (Config parserConfig : parserConfigs) {\n        String parserClassName = getConfigs().getString(parserConfig, \"parser\");\n        \n        Object obj;\n        try {\n          obj = Class.forName(parserClassName).newInstance();\n        } catch (Throwable e) {\n          throw new MorphlineCompilationException(\"Cannot instantiate Tika parser: \" + parserClassName, config, e);\n        }\n        if (!(obj instanceof Parser)) {\n          throw new MorphlineCompilationException(\"Tika parser \" + obj.getClass().getName()\n              + \" must be an instance of class \" + Parser.class.getName(), config);\n        }\n        Parser parser = (Parser) obj;\n        this.parsers.add(parser);\n\n        List<String> mediaTypes = getConfigs().getStringList(parserConfig, SUPPORTED_MIME_TYPES, Collections.<String>emptyList());\n        for (String mediaTypeStr : mediaTypes) {\n          MediaType mediaType = parseMediaType(mediaTypeStr);\n          addSupportedMimeType(mediaTypeStr);\n          this.mediaTypeToParserMap.put(mediaType, parser);\n        }\n        \n        if (!parserConfig.hasPath(SUPPORTED_MIME_TYPES)) {\n          for (MediaType mediaType : parser.getSupportedTypes(new ParseContext())) {\n            mediaType = mediaType.getBaseType();\n            addSupportedMimeType(mediaType.toString());\n            this.mediaTypeToParserMap.put(mediaType, parser);\n          }        \n          List<String> extras = getConfigs().getStringList(parserConfig, ADDITIONAL_SUPPORTED_MIME_TYPES, Collections.<String>emptyList());\n          for (String mediaTypeStr : extras) {\n            MediaType mediaType = parseMediaType(mediaTypeStr);\n            addSupportedMimeType(mediaTypeStr);\n            this.mediaTypeToParserMap.put(mediaType, parser);            \n          }\n        }\n      }\n      //LOG.info(\"mediaTypeToParserMap=\"+mediaTypeToParserMap);\n\n      Map<String, String[]> tmp = new HashMap<>();\n      for (Map.Entry<String,Collection<String>> entry : cellParams.asMap().entrySet()) {\n        tmp.put(entry.getKey(), entry.getValue().toArray(new String[entry.getValue().size()]));\n      }\n      this.solrParams = new MultiMapSolrParams(tmp);\n      validateArguments();\n    }\n\n","sourceOld":"    public SolrCell(CommandBuilder builder, Config config, Command parent, Command child, MorphlineContext context) {\n      super(builder, config, parent, child, context);\n      \n      Config solrLocatorConfig = getConfigs().getConfig(config, \"solrLocator\");\n      SolrLocator locator = new SolrLocator(solrLocatorConfig, context);\n      LOG.debug(\"solrLocator: {}\", locator);\n      this.schema = locator.getIndexSchema();\n      Preconditions.checkNotNull(schema);\n      LOG.trace(\"Solr schema: \\n{}\", Joiner.on(\"\\n\").join(new TreeMap<>(schema.getFields()).values()));\n\n      ListMultimap<String, String> cellParams = ArrayListMultimap.create();\n      String uprefix = getConfigs().getString(config, ExtractingParams.UNKNOWN_FIELD_PREFIX, null);\n      if (uprefix != null) {\n        cellParams.put(ExtractingParams.UNKNOWN_FIELD_PREFIX, uprefix);\n      }\n      for (String capture : getConfigs().getStringList(config, ExtractingParams.CAPTURE_ELEMENTS, Collections.<String>emptyList())) {\n        cellParams.put(ExtractingParams.CAPTURE_ELEMENTS, capture);\n      }\n      Config fmapConfig = getConfigs().getConfig(config, \"fmap\", null);\n      if (fmapConfig != null) {\n        for (Map.Entry<String, Object> entry : new Configs().getEntrySet(fmapConfig)) {\n          cellParams.put(ExtractingParams.MAP_PREFIX + entry.getKey(), entry.getValue().toString());\n        }\n      }\n      String captureAttributes = getConfigs().getString(config, ExtractingParams.CAPTURE_ATTRIBUTES, null);\n      if (captureAttributes != null) {\n        cellParams.put(ExtractingParams.CAPTURE_ATTRIBUTES, captureAttributes);\n      }\n      String lowerNames = getConfigs().getString(config, ExtractingParams.LOWERNAMES, null);\n      if (lowerNames != null) {\n        cellParams.put(ExtractingParams.LOWERNAMES, lowerNames);\n      }\n      String defaultField = getConfigs().getString(config, ExtractingParams.DEFAULT_FIELD, null);\n      if (defaultField != null) {\n        cellParams.put(ExtractingParams.DEFAULT_FIELD, defaultField);\n      }\n      xpathExpr = getConfigs().getString(config, ExtractingParams.XPATH_EXPRESSION, null);\n      if (xpathExpr != null) {\n        cellParams.put(ExtractingParams.XPATH_EXPRESSION, xpathExpr);\n      }\n      \n      this.dateFormats = getConfigs().getStringList(config, \"dateFormats\", new ArrayList<>(DateUtil.DEFAULT_DATE_FORMATS));\n      \n      String handlerStr = getConfigs().getString(config, \"solrContentHandlerFactory\", TrimSolrContentHandlerFactory.class.getName());\n      Class<? extends SolrContentHandlerFactory> factoryClass;\n      try {\n        factoryClass = Class.forName(handlerStr).asSubclass(SolrContentHandlerFactory.class);\n      } catch (ClassNotFoundException cnfe) {\n        throw new MorphlineCompilationException(\"Could not find class \"\n          + handlerStr + \" to use for \" + \"solrContentHandlerFactory\", config, cnfe);\n      }\n      this.solrContentHandlerFactory = getSolrContentHandlerFactory(factoryClass, dateFormats, config);\n\n      this.locale = getLocale(getConfigs().getString(config, \"locale\", \"\"));\n      \n      this.mediaTypeToParserMap = new HashMap<>();\n      //MimeTypes mimeTypes = MimeTypes.getDefaultMimeTypes(); // FIXME getMediaTypeRegistry.normalize() \n\n      List<? extends Config> parserConfigs = getConfigs().getConfigList(config, \"parsers\");\n      for (Config parserConfig : parserConfigs) {\n        String parserClassName = getConfigs().getString(parserConfig, \"parser\");\n        \n        Object obj;\n        try {\n          obj = Class.forName(parserClassName).newInstance();\n        } catch (Throwable e) {\n          throw new MorphlineCompilationException(\"Cannot instantiate Tika parser: \" + parserClassName, config, e);\n        }\n        if (!(obj instanceof Parser)) {\n          throw new MorphlineCompilationException(\"Tika parser \" + obj.getClass().getName()\n              + \" must be an instance of class \" + Parser.class.getName(), config);\n        }\n        Parser parser = (Parser) obj;\n        this.parsers.add(parser);\n\n        List<String> mediaTypes = getConfigs().getStringList(parserConfig, SUPPORTED_MIME_TYPES, Collections.<String>emptyList());\n        for (String mediaTypeStr : mediaTypes) {\n          MediaType mediaType = parseMediaType(mediaTypeStr);\n          addSupportedMimeType(mediaTypeStr);\n          this.mediaTypeToParserMap.put(mediaType, parser);\n        }\n        \n        if (!parserConfig.hasPath(SUPPORTED_MIME_TYPES)) {\n          for (MediaType mediaType : parser.getSupportedTypes(new ParseContext())) {\n            mediaType = mediaType.getBaseType();\n            addSupportedMimeType(mediaType.toString());\n            this.mediaTypeToParserMap.put(mediaType, parser);\n          }        \n          List<String> extras = getConfigs().getStringList(parserConfig, ADDITIONAL_SUPPORTED_MIME_TYPES, Collections.<String>emptyList());\n          for (String mediaTypeStr : extras) {\n            MediaType mediaType = parseMediaType(mediaTypeStr);\n            addSupportedMimeType(mediaTypeStr);\n            this.mediaTypeToParserMap.put(mediaType, parser);            \n          }\n        }\n      }\n      //LOG.info(\"mediaTypeToParserMap=\"+mediaTypeToParserMap);\n\n      Map<String, String[]> tmp = new HashMap<>();\n      for (Map.Entry<String,Collection<String>> entry : cellParams.asMap().entrySet()) {\n        tmp.put(entry.getKey(), entry.getValue().toArray(new String[entry.getValue().size()]));\n      }\n      this.solrParams = new MultiMapSolrParams(tmp);\n      validateArguments();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7d60e61c65a1b9de0ec7baf2c94de9f228a9ba69","date":1459364429,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/contrib/morphlines-cell/src/java/org/apache/solr/morphlines/cell/SolrCellBuilder.SolrCell#SolrCell(CommandBuilder,Config,Command,Command,MorphlineContext).mjava","pathOld":"solr/contrib/morphlines-cell/src/java/org/apache/solr/morphlines/cell/SolrCellBuilder.SolrCell#SolrCell(CommandBuilder,Config,Command,Command,MorphlineContext).mjava","sourceNew":"    public SolrCell(CommandBuilder builder, Config config, Command parent, Command child, MorphlineContext context) {\n      super(builder, config, parent, child, context);\n      \n      Config solrLocatorConfig = getConfigs().getConfig(config, \"solrLocator\");\n      SolrLocator locator = new SolrLocator(solrLocatorConfig, context);\n      LOG.debug(\"solrLocator: {}\", locator);\n      this.schema = locator.getIndexSchema();\n      Preconditions.checkNotNull(schema);\n      LOG.trace(\"Solr schema: \\n{}\", Joiner.on(\"\\n\").join(new TreeMap<>(schema.getFields()).values()));\n\n      ListMultimap<String, String> cellParams = ArrayListMultimap.create();\n      String uprefix = getConfigs().getString(config, ExtractingParams.UNKNOWN_FIELD_PREFIX, null);\n      if (uprefix != null) {\n        cellParams.put(ExtractingParams.UNKNOWN_FIELD_PREFIX, uprefix);\n      }\n      for (String capture : getConfigs().getStringList(config, ExtractingParams.CAPTURE_ELEMENTS, Collections.<String>emptyList())) {\n        cellParams.put(ExtractingParams.CAPTURE_ELEMENTS, capture);\n      }\n      Config fmapConfig = getConfigs().getConfig(config, \"fmap\", null);\n      if (fmapConfig != null) {\n        for (Map.Entry<String, Object> entry : new Configs().getEntrySet(fmapConfig)) {\n          cellParams.put(ExtractingParams.MAP_PREFIX + entry.getKey(), entry.getValue().toString());\n        }\n      }\n      String captureAttributes = getConfigs().getString(config, ExtractingParams.CAPTURE_ATTRIBUTES, null);\n      if (captureAttributes != null) {\n        cellParams.put(ExtractingParams.CAPTURE_ATTRIBUTES, captureAttributes);\n      }\n      String lowerNames = getConfigs().getString(config, ExtractingParams.LOWERNAMES, null);\n      if (lowerNames != null) {\n        cellParams.put(ExtractingParams.LOWERNAMES, lowerNames);\n      }\n      String defaultField = getConfigs().getString(config, ExtractingParams.DEFAULT_FIELD, null);\n      if (defaultField != null) {\n        cellParams.put(ExtractingParams.DEFAULT_FIELD, defaultField);\n      }\n      xpathExpr = getConfigs().getString(config, ExtractingParams.XPATH_EXPRESSION, null);\n      if (xpathExpr != null) {\n        cellParams.put(ExtractingParams.XPATH_EXPRESSION, xpathExpr);\n      }\n      \n      this.dateFormats = getConfigs().getStringList(config, \"dateFormats\", new ArrayList<>(ExtractionDateUtil.DEFAULT_DATE_FORMATS));\n      \n      String handlerStr = getConfigs().getString(config, \"solrContentHandlerFactory\", TrimSolrContentHandlerFactory.class.getName());\n      Class<? extends SolrContentHandlerFactory> factoryClass;\n      try {\n        factoryClass = Class.forName(handlerStr).asSubclass(SolrContentHandlerFactory.class);\n      } catch (ClassNotFoundException cnfe) {\n        throw new MorphlineCompilationException(\"Could not find class \"\n          + handlerStr + \" to use for \" + \"solrContentHandlerFactory\", config, cnfe);\n      }\n      this.solrContentHandlerFactory = getSolrContentHandlerFactory(factoryClass, dateFormats, config);\n\n      this.locale = getLocale(getConfigs().getString(config, \"locale\", null));\n      \n      this.mediaTypeToParserMap = new HashMap<>();\n      //MimeTypes mimeTypes = MimeTypes.getDefaultMimeTypes(); // FIXME getMediaTypeRegistry.normalize() \n\n      List<? extends Config> parserConfigs = getConfigs().getConfigList(config, \"parsers\");\n      for (Config parserConfig : parserConfigs) {\n        String parserClassName = getConfigs().getString(parserConfig, \"parser\");\n        \n        Object obj;\n        try {\n          obj = Class.forName(parserClassName).newInstance();\n        } catch (Throwable e) {\n          throw new MorphlineCompilationException(\"Cannot instantiate Tika parser: \" + parserClassName, config, e);\n        }\n        if (!(obj instanceof Parser)) {\n          throw new MorphlineCompilationException(\"Tika parser \" + obj.getClass().getName()\n              + \" must be an instance of class \" + Parser.class.getName(), config);\n        }\n        Parser parser = (Parser) obj;\n        this.parsers.add(parser);\n\n        List<String> mediaTypes = getConfigs().getStringList(parserConfig, SUPPORTED_MIME_TYPES, Collections.<String>emptyList());\n        for (String mediaTypeStr : mediaTypes) {\n          MediaType mediaType = parseMediaType(mediaTypeStr);\n          addSupportedMimeType(mediaTypeStr);\n          this.mediaTypeToParserMap.put(mediaType, parser);\n        }\n        \n        if (!parserConfig.hasPath(SUPPORTED_MIME_TYPES)) {\n          for (MediaType mediaType : parser.getSupportedTypes(new ParseContext())) {\n            mediaType = mediaType.getBaseType();\n            addSupportedMimeType(mediaType.toString());\n            this.mediaTypeToParserMap.put(mediaType, parser);\n          }        \n          List<String> extras = getConfigs().getStringList(parserConfig, ADDITIONAL_SUPPORTED_MIME_TYPES, Collections.<String>emptyList());\n          for (String mediaTypeStr : extras) {\n            MediaType mediaType = parseMediaType(mediaTypeStr);\n            addSupportedMimeType(mediaTypeStr);\n            this.mediaTypeToParserMap.put(mediaType, parser);            \n          }\n        }\n      }\n      //LOG.info(\"mediaTypeToParserMap=\"+mediaTypeToParserMap);\n\n      Map<String, String[]> tmp = new HashMap<>();\n      for (Map.Entry<String,Collection<String>> entry : cellParams.asMap().entrySet()) {\n        tmp.put(entry.getKey(), entry.getValue().toArray(new String[entry.getValue().size()]));\n      }\n      this.solrParams = new MultiMapSolrParams(tmp);\n      validateArguments();\n    }\n\n","sourceOld":"    public SolrCell(CommandBuilder builder, Config config, Command parent, Command child, MorphlineContext context) {\n      super(builder, config, parent, child, context);\n      \n      Config solrLocatorConfig = getConfigs().getConfig(config, \"solrLocator\");\n      SolrLocator locator = new SolrLocator(solrLocatorConfig, context);\n      LOG.debug(\"solrLocator: {}\", locator);\n      this.schema = locator.getIndexSchema();\n      Preconditions.checkNotNull(schema);\n      LOG.trace(\"Solr schema: \\n{}\", Joiner.on(\"\\n\").join(new TreeMap<>(schema.getFields()).values()));\n\n      ListMultimap<String, String> cellParams = ArrayListMultimap.create();\n      String uprefix = getConfigs().getString(config, ExtractingParams.UNKNOWN_FIELD_PREFIX, null);\n      if (uprefix != null) {\n        cellParams.put(ExtractingParams.UNKNOWN_FIELD_PREFIX, uprefix);\n      }\n      for (String capture : getConfigs().getStringList(config, ExtractingParams.CAPTURE_ELEMENTS, Collections.<String>emptyList())) {\n        cellParams.put(ExtractingParams.CAPTURE_ELEMENTS, capture);\n      }\n      Config fmapConfig = getConfigs().getConfig(config, \"fmap\", null);\n      if (fmapConfig != null) {\n        for (Map.Entry<String, Object> entry : new Configs().getEntrySet(fmapConfig)) {\n          cellParams.put(ExtractingParams.MAP_PREFIX + entry.getKey(), entry.getValue().toString());\n        }\n      }\n      String captureAttributes = getConfigs().getString(config, ExtractingParams.CAPTURE_ATTRIBUTES, null);\n      if (captureAttributes != null) {\n        cellParams.put(ExtractingParams.CAPTURE_ATTRIBUTES, captureAttributes);\n      }\n      String lowerNames = getConfigs().getString(config, ExtractingParams.LOWERNAMES, null);\n      if (lowerNames != null) {\n        cellParams.put(ExtractingParams.LOWERNAMES, lowerNames);\n      }\n      String defaultField = getConfigs().getString(config, ExtractingParams.DEFAULT_FIELD, null);\n      if (defaultField != null) {\n        cellParams.put(ExtractingParams.DEFAULT_FIELD, defaultField);\n      }\n      xpathExpr = getConfigs().getString(config, ExtractingParams.XPATH_EXPRESSION, null);\n      if (xpathExpr != null) {\n        cellParams.put(ExtractingParams.XPATH_EXPRESSION, xpathExpr);\n      }\n      \n      this.dateFormats = getConfigs().getStringList(config, \"dateFormats\", new ArrayList<>(DateUtil.DEFAULT_DATE_FORMATS));\n      \n      String handlerStr = getConfigs().getString(config, \"solrContentHandlerFactory\", TrimSolrContentHandlerFactory.class.getName());\n      Class<? extends SolrContentHandlerFactory> factoryClass;\n      try {\n        factoryClass = Class.forName(handlerStr).asSubclass(SolrContentHandlerFactory.class);\n      } catch (ClassNotFoundException cnfe) {\n        throw new MorphlineCompilationException(\"Could not find class \"\n          + handlerStr + \" to use for \" + \"solrContentHandlerFactory\", config, cnfe);\n      }\n      this.solrContentHandlerFactory = getSolrContentHandlerFactory(factoryClass, dateFormats, config);\n\n      this.locale = getLocale(getConfigs().getString(config, \"locale\", null));\n      \n      this.mediaTypeToParserMap = new HashMap<>();\n      //MimeTypes mimeTypes = MimeTypes.getDefaultMimeTypes(); // FIXME getMediaTypeRegistry.normalize() \n\n      List<? extends Config> parserConfigs = getConfigs().getConfigList(config, \"parsers\");\n      for (Config parserConfig : parserConfigs) {\n        String parserClassName = getConfigs().getString(parserConfig, \"parser\");\n        \n        Object obj;\n        try {\n          obj = Class.forName(parserClassName).newInstance();\n        } catch (Throwable e) {\n          throw new MorphlineCompilationException(\"Cannot instantiate Tika parser: \" + parserClassName, config, e);\n        }\n        if (!(obj instanceof Parser)) {\n          throw new MorphlineCompilationException(\"Tika parser \" + obj.getClass().getName()\n              + \" must be an instance of class \" + Parser.class.getName(), config);\n        }\n        Parser parser = (Parser) obj;\n        this.parsers.add(parser);\n\n        List<String> mediaTypes = getConfigs().getStringList(parserConfig, SUPPORTED_MIME_TYPES, Collections.<String>emptyList());\n        for (String mediaTypeStr : mediaTypes) {\n          MediaType mediaType = parseMediaType(mediaTypeStr);\n          addSupportedMimeType(mediaTypeStr);\n          this.mediaTypeToParserMap.put(mediaType, parser);\n        }\n        \n        if (!parserConfig.hasPath(SUPPORTED_MIME_TYPES)) {\n          for (MediaType mediaType : parser.getSupportedTypes(new ParseContext())) {\n            mediaType = mediaType.getBaseType();\n            addSupportedMimeType(mediaType.toString());\n            this.mediaTypeToParserMap.put(mediaType, parser);\n          }        \n          List<String> extras = getConfigs().getStringList(parserConfig, ADDITIONAL_SUPPORTED_MIME_TYPES, Collections.<String>emptyList());\n          for (String mediaTypeStr : extras) {\n            MediaType mediaType = parseMediaType(mediaTypeStr);\n            addSupportedMimeType(mediaTypeStr);\n            this.mediaTypeToParserMap.put(mediaType, parser);            \n          }\n        }\n      }\n      //LOG.info(\"mediaTypeToParserMap=\"+mediaTypeToParserMap);\n\n      Map<String, String[]> tmp = new HashMap<>();\n      for (Map.Entry<String,Collection<String>> entry : cellParams.asMap().entrySet()) {\n        tmp.put(entry.getKey(), entry.getValue().toArray(new String[entry.getValue().size()]));\n      }\n      this.solrParams = new MultiMapSolrParams(tmp);\n      validateArguments();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c609c76a49c17e5c1c8a5d5cd2d685be9f306a47","date":1477689538,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/contrib/morphlines-cell/src/java/org/apache/solr/morphlines/cell/SolrCellBuilder.SolrCell#SolrCell(CommandBuilder,Config,Command,Command,MorphlineContext).mjava","pathOld":"solr/contrib/morphlines-cell/src/java/org/apache/solr/morphlines/cell/SolrCellBuilder.SolrCell#SolrCell(CommandBuilder,Config,Command,Command,MorphlineContext).mjava","sourceNew":"    public SolrCell(CommandBuilder builder, Config config, Command parent, Command child, MorphlineContext context) {\n      super(builder, config, parent, child, context);\n      \n      Config solrLocatorConfig = getConfigs().getConfig(config, \"solrLocator\");\n      SolrLocator locator = new SolrLocator(solrLocatorConfig, context);\n      LOG.debug(\"solrLocator: {}\", locator);\n      this.schema = Objects.requireNonNull(locator.getIndexSchema());\n      if (LOG.isTraceEnabled()) {\n        LOG.trace(\"Solr schema: \\n\" + schema.getFields().entrySet().stream()\n                .sorted(Map.Entry.comparingByKey()).map(Map.Entry::getValue).map(Object::toString)\n                .collect(Collectors.joining(\"\\n\")));\n      }\n\n      ListMultimap<String, String> cellParams = ArrayListMultimap.create();\n      String uprefix = getConfigs().getString(config, ExtractingParams.UNKNOWN_FIELD_PREFIX, null);\n      if (uprefix != null) {\n        cellParams.put(ExtractingParams.UNKNOWN_FIELD_PREFIX, uprefix);\n      }\n      for (String capture : getConfigs().getStringList(config, ExtractingParams.CAPTURE_ELEMENTS, Collections.<String>emptyList())) {\n        cellParams.put(ExtractingParams.CAPTURE_ELEMENTS, capture);\n      }\n      Config fmapConfig = getConfigs().getConfig(config, \"fmap\", null);\n      if (fmapConfig != null) {\n        for (Map.Entry<String, Object> entry : new Configs().getEntrySet(fmapConfig)) {\n          cellParams.put(ExtractingParams.MAP_PREFIX + entry.getKey(), entry.getValue().toString());\n        }\n      }\n      String captureAttributes = getConfigs().getString(config, ExtractingParams.CAPTURE_ATTRIBUTES, null);\n      if (captureAttributes != null) {\n        cellParams.put(ExtractingParams.CAPTURE_ATTRIBUTES, captureAttributes);\n      }\n      String lowerNames = getConfigs().getString(config, ExtractingParams.LOWERNAMES, null);\n      if (lowerNames != null) {\n        cellParams.put(ExtractingParams.LOWERNAMES, lowerNames);\n      }\n      String defaultField = getConfigs().getString(config, ExtractingParams.DEFAULT_FIELD, null);\n      if (defaultField != null) {\n        cellParams.put(ExtractingParams.DEFAULT_FIELD, defaultField);\n      }\n      xpathExpr = getConfigs().getString(config, ExtractingParams.XPATH_EXPRESSION, null);\n      if (xpathExpr != null) {\n        cellParams.put(ExtractingParams.XPATH_EXPRESSION, xpathExpr);\n      }\n      \n      this.dateFormats = getConfigs().getStringList(config, \"dateFormats\", new ArrayList<>(ExtractionDateUtil.DEFAULT_DATE_FORMATS));\n      \n      String handlerStr = getConfigs().getString(config, \"solrContentHandlerFactory\", TrimSolrContentHandlerFactory.class.getName());\n      Class<? extends SolrContentHandlerFactory> factoryClass;\n      try {\n        factoryClass = Class.forName(handlerStr).asSubclass(SolrContentHandlerFactory.class);\n      } catch (ClassNotFoundException cnfe) {\n        throw new MorphlineCompilationException(\"Could not find class \"\n          + handlerStr + \" to use for \" + \"solrContentHandlerFactory\", config, cnfe);\n      }\n      this.solrContentHandlerFactory = getSolrContentHandlerFactory(factoryClass, dateFormats, config);\n\n      this.locale = getLocale(getConfigs().getString(config, \"locale\", null));\n      \n      this.mediaTypeToParserMap = new HashMap<>();\n      //MimeTypes mimeTypes = MimeTypes.getDefaultMimeTypes(); // FIXME getMediaTypeRegistry.normalize() \n\n      List<? extends Config> parserConfigs = getConfigs().getConfigList(config, \"parsers\");\n      for (Config parserConfig : parserConfigs) {\n        String parserClassName = getConfigs().getString(parserConfig, \"parser\");\n        \n        Object obj;\n        try {\n          obj = Class.forName(parserClassName).newInstance();\n        } catch (Throwable e) {\n          throw new MorphlineCompilationException(\"Cannot instantiate Tika parser: \" + parserClassName, config, e);\n        }\n        if (!(obj instanceof Parser)) {\n          throw new MorphlineCompilationException(\"Tika parser \" + obj.getClass().getName()\n              + \" must be an instance of class \" + Parser.class.getName(), config);\n        }\n        Parser parser = (Parser) obj;\n        this.parsers.add(parser);\n\n        List<String> mediaTypes = getConfigs().getStringList(parserConfig, SUPPORTED_MIME_TYPES, Collections.<String>emptyList());\n        for (String mediaTypeStr : mediaTypes) {\n          MediaType mediaType = parseMediaType(mediaTypeStr);\n          addSupportedMimeType(mediaTypeStr);\n          this.mediaTypeToParserMap.put(mediaType, parser);\n        }\n        \n        if (!parserConfig.hasPath(SUPPORTED_MIME_TYPES)) {\n          for (MediaType mediaType : parser.getSupportedTypes(new ParseContext())) {\n            mediaType = mediaType.getBaseType();\n            addSupportedMimeType(mediaType.toString());\n            this.mediaTypeToParserMap.put(mediaType, parser);\n          }        \n          List<String> extras = getConfigs().getStringList(parserConfig, ADDITIONAL_SUPPORTED_MIME_TYPES, Collections.<String>emptyList());\n          for (String mediaTypeStr : extras) {\n            MediaType mediaType = parseMediaType(mediaTypeStr);\n            addSupportedMimeType(mediaTypeStr);\n            this.mediaTypeToParserMap.put(mediaType, parser);            \n          }\n        }\n      }\n      //LOG.info(\"mediaTypeToParserMap=\"+mediaTypeToParserMap);\n\n      Map<String, String[]> tmp = new HashMap<>();\n      for (Map.Entry<String,Collection<String>> entry : cellParams.asMap().entrySet()) {\n        tmp.put(entry.getKey(), entry.getValue().toArray(new String[entry.getValue().size()]));\n      }\n      this.solrParams = new MultiMapSolrParams(tmp);\n      validateArguments();\n    }\n\n","sourceOld":"    public SolrCell(CommandBuilder builder, Config config, Command parent, Command child, MorphlineContext context) {\n      super(builder, config, parent, child, context);\n      \n      Config solrLocatorConfig = getConfigs().getConfig(config, \"solrLocator\");\n      SolrLocator locator = new SolrLocator(solrLocatorConfig, context);\n      LOG.debug(\"solrLocator: {}\", locator);\n      this.schema = locator.getIndexSchema();\n      Preconditions.checkNotNull(schema);\n      LOG.trace(\"Solr schema: \\n{}\", Joiner.on(\"\\n\").join(new TreeMap<>(schema.getFields()).values()));\n\n      ListMultimap<String, String> cellParams = ArrayListMultimap.create();\n      String uprefix = getConfigs().getString(config, ExtractingParams.UNKNOWN_FIELD_PREFIX, null);\n      if (uprefix != null) {\n        cellParams.put(ExtractingParams.UNKNOWN_FIELD_PREFIX, uprefix);\n      }\n      for (String capture : getConfigs().getStringList(config, ExtractingParams.CAPTURE_ELEMENTS, Collections.<String>emptyList())) {\n        cellParams.put(ExtractingParams.CAPTURE_ELEMENTS, capture);\n      }\n      Config fmapConfig = getConfigs().getConfig(config, \"fmap\", null);\n      if (fmapConfig != null) {\n        for (Map.Entry<String, Object> entry : new Configs().getEntrySet(fmapConfig)) {\n          cellParams.put(ExtractingParams.MAP_PREFIX + entry.getKey(), entry.getValue().toString());\n        }\n      }\n      String captureAttributes = getConfigs().getString(config, ExtractingParams.CAPTURE_ATTRIBUTES, null);\n      if (captureAttributes != null) {\n        cellParams.put(ExtractingParams.CAPTURE_ATTRIBUTES, captureAttributes);\n      }\n      String lowerNames = getConfigs().getString(config, ExtractingParams.LOWERNAMES, null);\n      if (lowerNames != null) {\n        cellParams.put(ExtractingParams.LOWERNAMES, lowerNames);\n      }\n      String defaultField = getConfigs().getString(config, ExtractingParams.DEFAULT_FIELD, null);\n      if (defaultField != null) {\n        cellParams.put(ExtractingParams.DEFAULT_FIELD, defaultField);\n      }\n      xpathExpr = getConfigs().getString(config, ExtractingParams.XPATH_EXPRESSION, null);\n      if (xpathExpr != null) {\n        cellParams.put(ExtractingParams.XPATH_EXPRESSION, xpathExpr);\n      }\n      \n      this.dateFormats = getConfigs().getStringList(config, \"dateFormats\", new ArrayList<>(ExtractionDateUtil.DEFAULT_DATE_FORMATS));\n      \n      String handlerStr = getConfigs().getString(config, \"solrContentHandlerFactory\", TrimSolrContentHandlerFactory.class.getName());\n      Class<? extends SolrContentHandlerFactory> factoryClass;\n      try {\n        factoryClass = Class.forName(handlerStr).asSubclass(SolrContentHandlerFactory.class);\n      } catch (ClassNotFoundException cnfe) {\n        throw new MorphlineCompilationException(\"Could not find class \"\n          + handlerStr + \" to use for \" + \"solrContentHandlerFactory\", config, cnfe);\n      }\n      this.solrContentHandlerFactory = getSolrContentHandlerFactory(factoryClass, dateFormats, config);\n\n      this.locale = getLocale(getConfigs().getString(config, \"locale\", null));\n      \n      this.mediaTypeToParserMap = new HashMap<>();\n      //MimeTypes mimeTypes = MimeTypes.getDefaultMimeTypes(); // FIXME getMediaTypeRegistry.normalize() \n\n      List<? extends Config> parserConfigs = getConfigs().getConfigList(config, \"parsers\");\n      for (Config parserConfig : parserConfigs) {\n        String parserClassName = getConfigs().getString(parserConfig, \"parser\");\n        \n        Object obj;\n        try {\n          obj = Class.forName(parserClassName).newInstance();\n        } catch (Throwable e) {\n          throw new MorphlineCompilationException(\"Cannot instantiate Tika parser: \" + parserClassName, config, e);\n        }\n        if (!(obj instanceof Parser)) {\n          throw new MorphlineCompilationException(\"Tika parser \" + obj.getClass().getName()\n              + \" must be an instance of class \" + Parser.class.getName(), config);\n        }\n        Parser parser = (Parser) obj;\n        this.parsers.add(parser);\n\n        List<String> mediaTypes = getConfigs().getStringList(parserConfig, SUPPORTED_MIME_TYPES, Collections.<String>emptyList());\n        for (String mediaTypeStr : mediaTypes) {\n          MediaType mediaType = parseMediaType(mediaTypeStr);\n          addSupportedMimeType(mediaTypeStr);\n          this.mediaTypeToParserMap.put(mediaType, parser);\n        }\n        \n        if (!parserConfig.hasPath(SUPPORTED_MIME_TYPES)) {\n          for (MediaType mediaType : parser.getSupportedTypes(new ParseContext())) {\n            mediaType = mediaType.getBaseType();\n            addSupportedMimeType(mediaType.toString());\n            this.mediaTypeToParserMap.put(mediaType, parser);\n          }        \n          List<String> extras = getConfigs().getStringList(parserConfig, ADDITIONAL_SUPPORTED_MIME_TYPES, Collections.<String>emptyList());\n          for (String mediaTypeStr : extras) {\n            MediaType mediaType = parseMediaType(mediaTypeStr);\n            addSupportedMimeType(mediaTypeStr);\n            this.mediaTypeToParserMap.put(mediaType, parser);            \n          }\n        }\n      }\n      //LOG.info(\"mediaTypeToParserMap=\"+mediaTypeToParserMap);\n\n      Map<String, String[]> tmp = new HashMap<>();\n      for (Map.Entry<String,Collection<String>> entry : cellParams.asMap().entrySet()) {\n        tmp.put(entry.getKey(), entry.getValue().toArray(new String[entry.getValue().size()]));\n      }\n      this.solrParams = new MultiMapSolrParams(tmp);\n      validateArguments();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"320888923ec13b91f53082558f01f4c9960dd226","date":1477926871,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/contrib/morphlines-cell/src/java/org/apache/solr/morphlines/cell/SolrCellBuilder.SolrCell#SolrCell(CommandBuilder,Config,Command,Command,MorphlineContext).mjava","pathOld":"solr/contrib/morphlines-cell/src/java/org/apache/solr/morphlines/cell/SolrCellBuilder.SolrCell#SolrCell(CommandBuilder,Config,Command,Command,MorphlineContext).mjava","sourceNew":"    public SolrCell(CommandBuilder builder, Config config, Command parent, Command child, MorphlineContext context) {\n      super(builder, config, parent, child, context);\n      \n      Config solrLocatorConfig = getConfigs().getConfig(config, \"solrLocator\");\n      SolrLocator locator = new SolrLocator(solrLocatorConfig, context);\n      LOG.debug(\"solrLocator: {}\", locator);\n      this.schema = Objects.requireNonNull(locator.getIndexSchema());\n      if (LOG.isTraceEnabled()) {\n        LOG.trace(\"Solr schema: \\n\" + schema.getFields().entrySet().stream()\n                .sorted(Map.Entry.comparingByKey()).map(Map.Entry::getValue).map(Object::toString)\n                .collect(Collectors.joining(\"\\n\")));\n      }\n\n      ListMultimap<String, String> cellParams = ArrayListMultimap.create();\n      String uprefix = getConfigs().getString(config, ExtractingParams.UNKNOWN_FIELD_PREFIX, null);\n      if (uprefix != null) {\n        cellParams.put(ExtractingParams.UNKNOWN_FIELD_PREFIX, uprefix);\n      }\n      for (String capture : getConfigs().getStringList(config, ExtractingParams.CAPTURE_ELEMENTS, Collections.<String>emptyList())) {\n        cellParams.put(ExtractingParams.CAPTURE_ELEMENTS, capture);\n      }\n      Config fmapConfig = getConfigs().getConfig(config, \"fmap\", null);\n      if (fmapConfig != null) {\n        for (Map.Entry<String, Object> entry : new Configs().getEntrySet(fmapConfig)) {\n          cellParams.put(ExtractingParams.MAP_PREFIX + entry.getKey(), entry.getValue().toString());\n        }\n      }\n      String captureAttributes = getConfigs().getString(config, ExtractingParams.CAPTURE_ATTRIBUTES, null);\n      if (captureAttributes != null) {\n        cellParams.put(ExtractingParams.CAPTURE_ATTRIBUTES, captureAttributes);\n      }\n      String lowerNames = getConfigs().getString(config, ExtractingParams.LOWERNAMES, null);\n      if (lowerNames != null) {\n        cellParams.put(ExtractingParams.LOWERNAMES, lowerNames);\n      }\n      String defaultField = getConfigs().getString(config, ExtractingParams.DEFAULT_FIELD, null);\n      if (defaultField != null) {\n        cellParams.put(ExtractingParams.DEFAULT_FIELD, defaultField);\n      }\n      xpathExpr = getConfigs().getString(config, ExtractingParams.XPATH_EXPRESSION, null);\n      if (xpathExpr != null) {\n        cellParams.put(ExtractingParams.XPATH_EXPRESSION, xpathExpr);\n      }\n      \n      this.dateFormats = getConfigs().getStringList(config, \"dateFormats\", new ArrayList<>(ExtractionDateUtil.DEFAULT_DATE_FORMATS));\n      \n      String handlerStr = getConfigs().getString(config, \"solrContentHandlerFactory\", TrimSolrContentHandlerFactory.class.getName());\n      Class<? extends SolrContentHandlerFactory> factoryClass;\n      try {\n        factoryClass = Class.forName(handlerStr).asSubclass(SolrContentHandlerFactory.class);\n      } catch (ClassNotFoundException cnfe) {\n        throw new MorphlineCompilationException(\"Could not find class \"\n          + handlerStr + \" to use for \" + \"solrContentHandlerFactory\", config, cnfe);\n      }\n      this.solrContentHandlerFactory = getSolrContentHandlerFactory(factoryClass, dateFormats, config);\n\n      this.locale = getLocale(getConfigs().getString(config, \"locale\", null));\n      \n      this.mediaTypeToParserMap = new HashMap<>();\n      //MimeTypes mimeTypes = MimeTypes.getDefaultMimeTypes(); // FIXME getMediaTypeRegistry.normalize() \n\n      List<? extends Config> parserConfigs = getConfigs().getConfigList(config, \"parsers\");\n      for (Config parserConfig : parserConfigs) {\n        String parserClassName = getConfigs().getString(parserConfig, \"parser\");\n        \n        Object obj;\n        try {\n          obj = Class.forName(parserClassName).newInstance();\n        } catch (Throwable e) {\n          throw new MorphlineCompilationException(\"Cannot instantiate Tika parser: \" + parserClassName, config, e);\n        }\n        if (!(obj instanceof Parser)) {\n          throw new MorphlineCompilationException(\"Tika parser \" + obj.getClass().getName()\n              + \" must be an instance of class \" + Parser.class.getName(), config);\n        }\n        Parser parser = (Parser) obj;\n        this.parsers.add(parser);\n\n        List<String> mediaTypes = getConfigs().getStringList(parserConfig, SUPPORTED_MIME_TYPES, Collections.<String>emptyList());\n        for (String mediaTypeStr : mediaTypes) {\n          MediaType mediaType = parseMediaType(mediaTypeStr);\n          addSupportedMimeType(mediaTypeStr);\n          this.mediaTypeToParserMap.put(mediaType, parser);\n        }\n        \n        if (!parserConfig.hasPath(SUPPORTED_MIME_TYPES)) {\n          for (MediaType mediaType : parser.getSupportedTypes(new ParseContext())) {\n            mediaType = mediaType.getBaseType();\n            addSupportedMimeType(mediaType.toString());\n            this.mediaTypeToParserMap.put(mediaType, parser);\n          }        \n          List<String> extras = getConfigs().getStringList(parserConfig, ADDITIONAL_SUPPORTED_MIME_TYPES, Collections.<String>emptyList());\n          for (String mediaTypeStr : extras) {\n            MediaType mediaType = parseMediaType(mediaTypeStr);\n            addSupportedMimeType(mediaTypeStr);\n            this.mediaTypeToParserMap.put(mediaType, parser);            \n          }\n        }\n      }\n      //LOG.info(\"mediaTypeToParserMap=\"+mediaTypeToParserMap);\n\n      Map<String, String[]> tmp = new HashMap<>();\n      for (Map.Entry<String,Collection<String>> entry : cellParams.asMap().entrySet()) {\n        tmp.put(entry.getKey(), entry.getValue().toArray(new String[entry.getValue().size()]));\n      }\n      this.solrParams = new MultiMapSolrParams(tmp);\n      validateArguments();\n    }\n\n","sourceOld":"    public SolrCell(CommandBuilder builder, Config config, Command parent, Command child, MorphlineContext context) {\n      super(builder, config, parent, child, context);\n      \n      Config solrLocatorConfig = getConfigs().getConfig(config, \"solrLocator\");\n      SolrLocator locator = new SolrLocator(solrLocatorConfig, context);\n      LOG.debug(\"solrLocator: {}\", locator);\n      this.schema = locator.getIndexSchema();\n      Preconditions.checkNotNull(schema);\n      LOG.trace(\"Solr schema: \\n{}\", Joiner.on(\"\\n\").join(new TreeMap<>(schema.getFields()).values()));\n\n      ListMultimap<String, String> cellParams = ArrayListMultimap.create();\n      String uprefix = getConfigs().getString(config, ExtractingParams.UNKNOWN_FIELD_PREFIX, null);\n      if (uprefix != null) {\n        cellParams.put(ExtractingParams.UNKNOWN_FIELD_PREFIX, uprefix);\n      }\n      for (String capture : getConfigs().getStringList(config, ExtractingParams.CAPTURE_ELEMENTS, Collections.<String>emptyList())) {\n        cellParams.put(ExtractingParams.CAPTURE_ELEMENTS, capture);\n      }\n      Config fmapConfig = getConfigs().getConfig(config, \"fmap\", null);\n      if (fmapConfig != null) {\n        for (Map.Entry<String, Object> entry : new Configs().getEntrySet(fmapConfig)) {\n          cellParams.put(ExtractingParams.MAP_PREFIX + entry.getKey(), entry.getValue().toString());\n        }\n      }\n      String captureAttributes = getConfigs().getString(config, ExtractingParams.CAPTURE_ATTRIBUTES, null);\n      if (captureAttributes != null) {\n        cellParams.put(ExtractingParams.CAPTURE_ATTRIBUTES, captureAttributes);\n      }\n      String lowerNames = getConfigs().getString(config, ExtractingParams.LOWERNAMES, null);\n      if (lowerNames != null) {\n        cellParams.put(ExtractingParams.LOWERNAMES, lowerNames);\n      }\n      String defaultField = getConfigs().getString(config, ExtractingParams.DEFAULT_FIELD, null);\n      if (defaultField != null) {\n        cellParams.put(ExtractingParams.DEFAULT_FIELD, defaultField);\n      }\n      xpathExpr = getConfigs().getString(config, ExtractingParams.XPATH_EXPRESSION, null);\n      if (xpathExpr != null) {\n        cellParams.put(ExtractingParams.XPATH_EXPRESSION, xpathExpr);\n      }\n      \n      this.dateFormats = getConfigs().getStringList(config, \"dateFormats\", new ArrayList<>(ExtractionDateUtil.DEFAULT_DATE_FORMATS));\n      \n      String handlerStr = getConfigs().getString(config, \"solrContentHandlerFactory\", TrimSolrContentHandlerFactory.class.getName());\n      Class<? extends SolrContentHandlerFactory> factoryClass;\n      try {\n        factoryClass = Class.forName(handlerStr).asSubclass(SolrContentHandlerFactory.class);\n      } catch (ClassNotFoundException cnfe) {\n        throw new MorphlineCompilationException(\"Could not find class \"\n          + handlerStr + \" to use for \" + \"solrContentHandlerFactory\", config, cnfe);\n      }\n      this.solrContentHandlerFactory = getSolrContentHandlerFactory(factoryClass, dateFormats, config);\n\n      this.locale = getLocale(getConfigs().getString(config, \"locale\", null));\n      \n      this.mediaTypeToParserMap = new HashMap<>();\n      //MimeTypes mimeTypes = MimeTypes.getDefaultMimeTypes(); // FIXME getMediaTypeRegistry.normalize() \n\n      List<? extends Config> parserConfigs = getConfigs().getConfigList(config, \"parsers\");\n      for (Config parserConfig : parserConfigs) {\n        String parserClassName = getConfigs().getString(parserConfig, \"parser\");\n        \n        Object obj;\n        try {\n          obj = Class.forName(parserClassName).newInstance();\n        } catch (Throwable e) {\n          throw new MorphlineCompilationException(\"Cannot instantiate Tika parser: \" + parserClassName, config, e);\n        }\n        if (!(obj instanceof Parser)) {\n          throw new MorphlineCompilationException(\"Tika parser \" + obj.getClass().getName()\n              + \" must be an instance of class \" + Parser.class.getName(), config);\n        }\n        Parser parser = (Parser) obj;\n        this.parsers.add(parser);\n\n        List<String> mediaTypes = getConfigs().getStringList(parserConfig, SUPPORTED_MIME_TYPES, Collections.<String>emptyList());\n        for (String mediaTypeStr : mediaTypes) {\n          MediaType mediaType = parseMediaType(mediaTypeStr);\n          addSupportedMimeType(mediaTypeStr);\n          this.mediaTypeToParserMap.put(mediaType, parser);\n        }\n        \n        if (!parserConfig.hasPath(SUPPORTED_MIME_TYPES)) {\n          for (MediaType mediaType : parser.getSupportedTypes(new ParseContext())) {\n            mediaType = mediaType.getBaseType();\n            addSupportedMimeType(mediaType.toString());\n            this.mediaTypeToParserMap.put(mediaType, parser);\n          }        \n          List<String> extras = getConfigs().getStringList(parserConfig, ADDITIONAL_SUPPORTED_MIME_TYPES, Collections.<String>emptyList());\n          for (String mediaTypeStr : extras) {\n            MediaType mediaType = parseMediaType(mediaTypeStr);\n            addSupportedMimeType(mediaTypeStr);\n            this.mediaTypeToParserMap.put(mediaType, parser);            \n          }\n        }\n      }\n      //LOG.info(\"mediaTypeToParserMap=\"+mediaTypeToParserMap);\n\n      Map<String, String[]> tmp = new HashMap<>();\n      for (Map.Entry<String,Collection<String>> entry : cellParams.asMap().entrySet()) {\n        tmp.put(entry.getKey(), entry.getValue().toArray(new String[entry.getValue().size()]));\n      }\n      this.solrParams = new MultiMapSolrParams(tmp);\n      validateArguments();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"12109b652e9210b8d58fca47f6c4a725d058a58e","date":1490373076,"type":4,"author":"Steve Rowe","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/morphlines-cell/src/java/org/apache/solr/morphlines/cell/SolrCellBuilder.SolrCell#SolrCell(CommandBuilder,Config,Command,Command,MorphlineContext).mjava","sourceNew":null,"sourceOld":"    public SolrCell(CommandBuilder builder, Config config, Command parent, Command child, MorphlineContext context) {\n      super(builder, config, parent, child, context);\n      \n      Config solrLocatorConfig = getConfigs().getConfig(config, \"solrLocator\");\n      SolrLocator locator = new SolrLocator(solrLocatorConfig, context);\n      LOG.debug(\"solrLocator: {}\", locator);\n      this.schema = Objects.requireNonNull(locator.getIndexSchema());\n      if (LOG.isTraceEnabled()) {\n        LOG.trace(\"Solr schema: \\n\" + schema.getFields().entrySet().stream()\n                .sorted(Map.Entry.comparingByKey()).map(Map.Entry::getValue).map(Object::toString)\n                .collect(Collectors.joining(\"\\n\")));\n      }\n\n      ListMultimap<String, String> cellParams = ArrayListMultimap.create();\n      String uprefix = getConfigs().getString(config, ExtractingParams.UNKNOWN_FIELD_PREFIX, null);\n      if (uprefix != null) {\n        cellParams.put(ExtractingParams.UNKNOWN_FIELD_PREFIX, uprefix);\n      }\n      for (String capture : getConfigs().getStringList(config, ExtractingParams.CAPTURE_ELEMENTS, Collections.<String>emptyList())) {\n        cellParams.put(ExtractingParams.CAPTURE_ELEMENTS, capture);\n      }\n      Config fmapConfig = getConfigs().getConfig(config, \"fmap\", null);\n      if (fmapConfig != null) {\n        for (Map.Entry<String, Object> entry : new Configs().getEntrySet(fmapConfig)) {\n          cellParams.put(ExtractingParams.MAP_PREFIX + entry.getKey(), entry.getValue().toString());\n        }\n      }\n      String captureAttributes = getConfigs().getString(config, ExtractingParams.CAPTURE_ATTRIBUTES, null);\n      if (captureAttributes != null) {\n        cellParams.put(ExtractingParams.CAPTURE_ATTRIBUTES, captureAttributes);\n      }\n      String lowerNames = getConfigs().getString(config, ExtractingParams.LOWERNAMES, null);\n      if (lowerNames != null) {\n        cellParams.put(ExtractingParams.LOWERNAMES, lowerNames);\n      }\n      String defaultField = getConfigs().getString(config, ExtractingParams.DEFAULT_FIELD, null);\n      if (defaultField != null) {\n        cellParams.put(ExtractingParams.DEFAULT_FIELD, defaultField);\n      }\n      xpathExpr = getConfigs().getString(config, ExtractingParams.XPATH_EXPRESSION, null);\n      if (xpathExpr != null) {\n        cellParams.put(ExtractingParams.XPATH_EXPRESSION, xpathExpr);\n      }\n      \n      this.dateFormats = getConfigs().getStringList(config, \"dateFormats\", new ArrayList<>(ExtractionDateUtil.DEFAULT_DATE_FORMATS));\n      \n      String handlerStr = getConfigs().getString(config, \"solrContentHandlerFactory\", TrimSolrContentHandlerFactory.class.getName());\n      Class<? extends SolrContentHandlerFactory> factoryClass;\n      try {\n        factoryClass = Class.forName(handlerStr).asSubclass(SolrContentHandlerFactory.class);\n      } catch (ClassNotFoundException cnfe) {\n        throw new MorphlineCompilationException(\"Could not find class \"\n          + handlerStr + \" to use for \" + \"solrContentHandlerFactory\", config, cnfe);\n      }\n      this.solrContentHandlerFactory = getSolrContentHandlerFactory(factoryClass, dateFormats, config);\n\n      this.locale = getLocale(getConfigs().getString(config, \"locale\", null));\n      \n      this.mediaTypeToParserMap = new HashMap<>();\n      //MimeTypes mimeTypes = MimeTypes.getDefaultMimeTypes(); // FIXME getMediaTypeRegistry.normalize() \n\n      List<? extends Config> parserConfigs = getConfigs().getConfigList(config, \"parsers\");\n      for (Config parserConfig : parserConfigs) {\n        String parserClassName = getConfigs().getString(parserConfig, \"parser\");\n        \n        Object obj;\n        try {\n          obj = Class.forName(parserClassName).newInstance();\n        } catch (Throwable e) {\n          throw new MorphlineCompilationException(\"Cannot instantiate Tika parser: \" + parserClassName, config, e);\n        }\n        if (!(obj instanceof Parser)) {\n          throw new MorphlineCompilationException(\"Tika parser \" + obj.getClass().getName()\n              + \" must be an instance of class \" + Parser.class.getName(), config);\n        }\n        Parser parser = (Parser) obj;\n        this.parsers.add(parser);\n\n        List<String> mediaTypes = getConfigs().getStringList(parserConfig, SUPPORTED_MIME_TYPES, Collections.<String>emptyList());\n        for (String mediaTypeStr : mediaTypes) {\n          MediaType mediaType = parseMediaType(mediaTypeStr);\n          addSupportedMimeType(mediaTypeStr);\n          this.mediaTypeToParserMap.put(mediaType, parser);\n        }\n        \n        if (!parserConfig.hasPath(SUPPORTED_MIME_TYPES)) {\n          for (MediaType mediaType : parser.getSupportedTypes(new ParseContext())) {\n            mediaType = mediaType.getBaseType();\n            addSupportedMimeType(mediaType.toString());\n            this.mediaTypeToParserMap.put(mediaType, parser);\n          }        \n          List<String> extras = getConfigs().getStringList(parserConfig, ADDITIONAL_SUPPORTED_MIME_TYPES, Collections.<String>emptyList());\n          for (String mediaTypeStr : extras) {\n            MediaType mediaType = parseMediaType(mediaTypeStr);\n            addSupportedMimeType(mediaTypeStr);\n            this.mediaTypeToParserMap.put(mediaType, parser);            \n          }\n        }\n      }\n      //LOG.info(\"mediaTypeToParserMap=\"+mediaTypeToParserMap);\n\n      Map<String, String[]> tmp = new HashMap<>();\n      for (Map.Entry<String,Collection<String>> entry : cellParams.asMap().entrySet()) {\n        tmp.put(entry.getKey(), entry.getValue().toArray(new String[entry.getValue().size()]));\n      }\n      this.solrParams = new MultiMapSolrParams(tmp);\n      validateArguments();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe1c4aa9af769a38e878f608070f672efbeac27f","date":1490594650,"type":4,"author":"Steve Rowe","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/morphlines-cell/src/java/org/apache/solr/morphlines/cell/SolrCellBuilder.SolrCell#SolrCell(CommandBuilder,Config,Command,Command,MorphlineContext).mjava","sourceNew":null,"sourceOld":"    public SolrCell(CommandBuilder builder, Config config, Command parent, Command child, MorphlineContext context) {\n      super(builder, config, parent, child, context);\n      \n      Config solrLocatorConfig = getConfigs().getConfig(config, \"solrLocator\");\n      SolrLocator locator = new SolrLocator(solrLocatorConfig, context);\n      LOG.debug(\"solrLocator: {}\", locator);\n      this.schema = Objects.requireNonNull(locator.getIndexSchema());\n      if (LOG.isTraceEnabled()) {\n        LOG.trace(\"Solr schema: \\n\" + schema.getFields().entrySet().stream()\n                .sorted(Map.Entry.comparingByKey()).map(Map.Entry::getValue).map(Object::toString)\n                .collect(Collectors.joining(\"\\n\")));\n      }\n\n      ListMultimap<String, String> cellParams = ArrayListMultimap.create();\n      String uprefix = getConfigs().getString(config, ExtractingParams.UNKNOWN_FIELD_PREFIX, null);\n      if (uprefix != null) {\n        cellParams.put(ExtractingParams.UNKNOWN_FIELD_PREFIX, uprefix);\n      }\n      for (String capture : getConfigs().getStringList(config, ExtractingParams.CAPTURE_ELEMENTS, Collections.<String>emptyList())) {\n        cellParams.put(ExtractingParams.CAPTURE_ELEMENTS, capture);\n      }\n      Config fmapConfig = getConfigs().getConfig(config, \"fmap\", null);\n      if (fmapConfig != null) {\n        for (Map.Entry<String, Object> entry : new Configs().getEntrySet(fmapConfig)) {\n          cellParams.put(ExtractingParams.MAP_PREFIX + entry.getKey(), entry.getValue().toString());\n        }\n      }\n      String captureAttributes = getConfigs().getString(config, ExtractingParams.CAPTURE_ATTRIBUTES, null);\n      if (captureAttributes != null) {\n        cellParams.put(ExtractingParams.CAPTURE_ATTRIBUTES, captureAttributes);\n      }\n      String lowerNames = getConfigs().getString(config, ExtractingParams.LOWERNAMES, null);\n      if (lowerNames != null) {\n        cellParams.put(ExtractingParams.LOWERNAMES, lowerNames);\n      }\n      String defaultField = getConfigs().getString(config, ExtractingParams.DEFAULT_FIELD, null);\n      if (defaultField != null) {\n        cellParams.put(ExtractingParams.DEFAULT_FIELD, defaultField);\n      }\n      xpathExpr = getConfigs().getString(config, ExtractingParams.XPATH_EXPRESSION, null);\n      if (xpathExpr != null) {\n        cellParams.put(ExtractingParams.XPATH_EXPRESSION, xpathExpr);\n      }\n      \n      this.dateFormats = getConfigs().getStringList(config, \"dateFormats\", new ArrayList<>(ExtractionDateUtil.DEFAULT_DATE_FORMATS));\n      \n      String handlerStr = getConfigs().getString(config, \"solrContentHandlerFactory\", TrimSolrContentHandlerFactory.class.getName());\n      Class<? extends SolrContentHandlerFactory> factoryClass;\n      try {\n        factoryClass = Class.forName(handlerStr).asSubclass(SolrContentHandlerFactory.class);\n      } catch (ClassNotFoundException cnfe) {\n        throw new MorphlineCompilationException(\"Could not find class \"\n          + handlerStr + \" to use for \" + \"solrContentHandlerFactory\", config, cnfe);\n      }\n      this.solrContentHandlerFactory = getSolrContentHandlerFactory(factoryClass, dateFormats, config);\n\n      this.locale = getLocale(getConfigs().getString(config, \"locale\", null));\n      \n      this.mediaTypeToParserMap = new HashMap<>();\n      //MimeTypes mimeTypes = MimeTypes.getDefaultMimeTypes(); // FIXME getMediaTypeRegistry.normalize() \n\n      List<? extends Config> parserConfigs = getConfigs().getConfigList(config, \"parsers\");\n      for (Config parserConfig : parserConfigs) {\n        String parserClassName = getConfigs().getString(parserConfig, \"parser\");\n        \n        Object obj;\n        try {\n          obj = Class.forName(parserClassName).newInstance();\n        } catch (Throwable e) {\n          throw new MorphlineCompilationException(\"Cannot instantiate Tika parser: \" + parserClassName, config, e);\n        }\n        if (!(obj instanceof Parser)) {\n          throw new MorphlineCompilationException(\"Tika parser \" + obj.getClass().getName()\n              + \" must be an instance of class \" + Parser.class.getName(), config);\n        }\n        Parser parser = (Parser) obj;\n        this.parsers.add(parser);\n\n        List<String> mediaTypes = getConfigs().getStringList(parserConfig, SUPPORTED_MIME_TYPES, Collections.<String>emptyList());\n        for (String mediaTypeStr : mediaTypes) {\n          MediaType mediaType = parseMediaType(mediaTypeStr);\n          addSupportedMimeType(mediaTypeStr);\n          this.mediaTypeToParserMap.put(mediaType, parser);\n        }\n        \n        if (!parserConfig.hasPath(SUPPORTED_MIME_TYPES)) {\n          for (MediaType mediaType : parser.getSupportedTypes(new ParseContext())) {\n            mediaType = mediaType.getBaseType();\n            addSupportedMimeType(mediaType.toString());\n            this.mediaTypeToParserMap.put(mediaType, parser);\n          }        \n          List<String> extras = getConfigs().getStringList(parserConfig, ADDITIONAL_SUPPORTED_MIME_TYPES, Collections.<String>emptyList());\n          for (String mediaTypeStr : extras) {\n            MediaType mediaType = parseMediaType(mediaTypeStr);\n            addSupportedMimeType(mediaTypeStr);\n            this.mediaTypeToParserMap.put(mediaType, parser);            \n          }\n        }\n      }\n      //LOG.info(\"mediaTypeToParserMap=\"+mediaTypeToParserMap);\n\n      Map<String, String[]> tmp = new HashMap<>();\n      for (Map.Entry<String,Collection<String>> entry : cellParams.asMap().entrySet()) {\n        tmp.put(entry.getKey(), entry.getValue().toArray(new String[entry.getValue().size()]));\n      }\n      this.solrParams = new MultiMapSolrParams(tmp);\n      validateArguments();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b291fa953aeb2a135ed14740cb774eb76bfc64b0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["c170e9d4c93c47801b611c5f124a91c5d27e0d73"],"c170e9d4c93c47801b611c5f124a91c5d27e0d73":["b291fa953aeb2a135ed14740cb774eb76bfc64b0"],"12109b652e9210b8d58fca47f6c4a725d058a58e":["c609c76a49c17e5c1c8a5d5cd2d685be9f306a47"],"7d60e61c65a1b9de0ec7baf2c94de9f228a9ba69":["982acea6b1fe5ee8319e43789b99c5cfa04e6a36"],"c609c76a49c17e5c1c8a5d5cd2d685be9f306a47":["7d60e61c65a1b9de0ec7baf2c94de9f228a9ba69"],"982acea6b1fe5ee8319e43789b99c5cfa04e6a36":["1a72cdac51dd6e3756b9d267dd995bf7b0718d90"],"320888923ec13b91f53082558f01f4c9960dd226":["7d60e61c65a1b9de0ec7baf2c94de9f228a9ba69","c609c76a49c17e5c1c8a5d5cd2d685be9f306a47"],"1a72cdac51dd6e3756b9d267dd995bf7b0718d90":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"fe1c4aa9af769a38e878f608070f672efbeac27f":["c609c76a49c17e5c1c8a5d5cd2d685be9f306a47"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b291fa953aeb2a135ed14740cb774eb76bfc64b0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["12109b652e9210b8d58fca47f6c4a725d058a58e"]},"commit2Childs":{"b291fa953aeb2a135ed14740cb774eb76bfc64b0":["c170e9d4c93c47801b611c5f124a91c5d27e0d73","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["1a72cdac51dd6e3756b9d267dd995bf7b0718d90"],"c170e9d4c93c47801b611c5f124a91c5d27e0d73":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"12109b652e9210b8d58fca47f6c4a725d058a58e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7d60e61c65a1b9de0ec7baf2c94de9f228a9ba69":["c609c76a49c17e5c1c8a5d5cd2d685be9f306a47","320888923ec13b91f53082558f01f4c9960dd226"],"c609c76a49c17e5c1c8a5d5cd2d685be9f306a47":["12109b652e9210b8d58fca47f6c4a725d058a58e","320888923ec13b91f53082558f01f4c9960dd226","fe1c4aa9af769a38e878f608070f672efbeac27f"],"982acea6b1fe5ee8319e43789b99c5cfa04e6a36":["7d60e61c65a1b9de0ec7baf2c94de9f228a9ba69"],"320888923ec13b91f53082558f01f4c9960dd226":[],"1a72cdac51dd6e3756b9d267dd995bf7b0718d90":["982acea6b1fe5ee8319e43789b99c5cfa04e6a36"],"fe1c4aa9af769a38e878f608070f672efbeac27f":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b291fa953aeb2a135ed14740cb774eb76bfc64b0","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["320888923ec13b91f53082558f01f4c9960dd226","fe1c4aa9af769a38e878f608070f672efbeac27f","74f45af4339b0daf7a95c820ab88c1aea74fbce0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}