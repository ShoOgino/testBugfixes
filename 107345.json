{"path":"src/java/org/apache/lucene/index/IndexReader#clone().mjava","commits":[{"id":"6db660b56f04fdb2853d25cdee8ee0d36559a521","date":1233313968,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#clone().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Efficiently clones the IndexReader (sharing most\n   * internal state).\n   * <p>\n   * On cloning a reader with pending changes (deletions,\n   * norms), the original reader transfers its write lock to\n   * the cloned reader.  This means only the cloned reader\n   * may make further changes to the index, and commit the\n   * changes to the index on close, but the old reader still\n   * reflects all changes made up until it was cloned.\n   * <p>\n   * Like {@link #reopen()}, it's safe to make changes to\n   * either the original or the cloned reader: all shared\n   * mutable state obeys \"copy on write\" semantics to ensure\n   * the changes are not seen by other readers.\n   * <p>\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public synchronized Object clone() {\n    throw new UnsupportedOperationException(\"This reader does not implement clone()\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8a9e385641d717e641408d8fbbc62be8fc766357","date":1256746606,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#clone().mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#clone().mjava","sourceNew":"  /**\n   * Efficiently clones the IndexReader (sharing most\n   * internal state).\n   * <p>\n   * On cloning a reader with pending changes (deletions,\n   * norms), the original reader transfers its write lock to\n   * the cloned reader.  This means only the cloned reader\n   * may make further changes to the index, and commit the\n   * changes to the index on close, but the old reader still\n   * reflects all changes made up until it was cloned.\n   * <p>\n   * Like {@link #reopen()}, it's safe to make changes to\n   * either the original or the cloned reader: all shared\n   * mutable state obeys \"copy on write\" semantics to ensure\n   * the changes are not seen by other readers.\n   * <p>\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  @Override\n  public synchronized Object clone() {\n    throw new UnsupportedOperationException(\"This reader does not implement clone()\");\n  }\n\n","sourceOld":"  /**\n   * Efficiently clones the IndexReader (sharing most\n   * internal state).\n   * <p>\n   * On cloning a reader with pending changes (deletions,\n   * norms), the original reader transfers its write lock to\n   * the cloned reader.  This means only the cloned reader\n   * may make further changes to the index, and commit the\n   * changes to the index on close, but the old reader still\n   * reflects all changes made up until it was cloned.\n   * <p>\n   * Like {@link #reopen()}, it's safe to make changes to\n   * either the original or the cloned reader: all shared\n   * mutable state obeys \"copy on write\" semantics to ensure\n   * the changes are not seen by other readers.\n   * <p>\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public synchronized Object clone() {\n    throw new UnsupportedOperationException(\"This reader does not implement clone()\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a","date":1267298041,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#clone().mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#clone().mjava","sourceNew":"  /**\n   * Efficiently clones the IndexReader (sharing most\n   * internal state).\n   * <p>\n   * On cloning a reader with pending changes (deletions,\n   * norms), the original reader transfers its write lock to\n   * the cloned reader.  This means only the cloned reader\n   * may make further changes to the index, and commit the\n   * changes to the index on close, but the old reader still\n   * reflects all changes made up until it was cloned.\n   * <p>\n   * Like {@link #reopen()}, it's safe to make changes to\n   * either the original or the cloned reader: all shared\n   * mutable state obeys \"copy on write\" semantics to ensure\n   * the changes are not seen by other readers.\n   * <p>\n   */\n  @Override\n  public synchronized Object clone() {\n    throw new UnsupportedOperationException(\"This reader does not implement clone()\");\n  }\n\n","sourceOld":"  /**\n   * Efficiently clones the IndexReader (sharing most\n   * internal state).\n   * <p>\n   * On cloning a reader with pending changes (deletions,\n   * norms), the original reader transfers its write lock to\n   * the cloned reader.  This means only the cloned reader\n   * may make further changes to the index, and commit the\n   * changes to the index on close, but the old reader still\n   * reflects all changes made up until it was cloned.\n   * <p>\n   * Like {@link #reopen()}, it's safe to make changes to\n   * either the original or the cloned reader: all shared\n   * mutable state obeys \"copy on write\" semantics to ensure\n   * the changes are not seen by other readers.\n   * <p>\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  @Override\n  public synchronized Object clone() {\n    throw new UnsupportedOperationException(\"This reader does not implement clone()\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#clone().mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#clone().mjava","sourceNew":"  /**\n   * Efficiently clones the IndexReader (sharing most\n   * internal state).\n   * <p>\n   * On cloning a reader with pending changes (deletions,\n   * norms), the original reader transfers its write lock to\n   * the cloned reader.  This means only the cloned reader\n   * may make further changes to the index, and commit the\n   * changes to the index on close, but the old reader still\n   * reflects all changes made up until it was cloned.\n   * <p>\n   * Like {@link #reopen()}, it's safe to make changes to\n   * either the original or the cloned reader: all shared\n   * mutable state obeys \"copy on write\" semantics to ensure\n   * the changes are not seen by other readers.\n   * <p>\n   */\n  @Override\n  public synchronized Object clone() {\n    throw new UnsupportedOperationException(\"This reader does not implement clone()\");\n  }\n\n","sourceOld":"  /**\n   * Efficiently clones the IndexReader (sharing most\n   * internal state).\n   * <p>\n   * On cloning a reader with pending changes (deletions,\n   * norms), the original reader transfers its write lock to\n   * the cloned reader.  This means only the cloned reader\n   * may make further changes to the index, and commit the\n   * changes to the index on close, but the old reader still\n   * reflects all changes made up until it was cloned.\n   * <p>\n   * Like {@link #reopen()}, it's safe to make changes to\n   * either the original or the cloned reader: all shared\n   * mutable state obeys \"copy on write\" semantics to ensure\n   * the changes are not seen by other readers.\n   * <p>\n   */\n  @Override\n  public synchronized Object clone() {\n    throw new UnsupportedOperationException(\"This reader does not implement clone()\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6db660b56f04fdb2853d25cdee8ee0d36559a521":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8a9e385641d717e641408d8fbbc62be8fc766357":["6db660b56f04fdb2853d25cdee8ee0d36559a521"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["8a9e385641d717e641408d8fbbc62be8fc766357"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"]},"commit2Childs":{"6db660b56f04fdb2853d25cdee8ee0d36559a521":["8a9e385641d717e641408d8fbbc62be8fc766357"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6db660b56f04fdb2853d25cdee8ee0d36559a521"],"8a9e385641d717e641408d8fbbc62be8fc766357":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}