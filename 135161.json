{"path":"solr/core/src/test/org/apache/solr/cloud/TestConfigSetsAPIZkFailure#testCreateZkFailure().mjava","commits":[{"id":"2209af2c265d2258ec4b29c8cc78622d36994a15","date":1440641916,"type":0,"author":"Gregory Chanan","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestConfigSetsAPIZkFailure#testCreateZkFailure().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testCreateZkFailure() throws Exception {\n    final SolrClient solrClient =\n        new HttpSolrClient(solrCluster.getJettySolrRunners().get(0).getBaseUrl().toString());\n\n    final Map<String, String> oldProps = ImmutableMap.of(\"immutable\", \"true\");\n    setupBaseConfigSet(BASE_CONFIGSET_NAME, oldProps);\n\n    SolrZkClient zkClient = new SolrZkClient(solrCluster.getZkServer().getZkAddress(),\n        AbstractZkTestCase.TIMEOUT, 45000, null);\n    try {\n      ZkConfigManager configManager = new ZkConfigManager(zkClient);\n      assertFalse(configManager.configExists(CONFIGSET_NAME));\n\n      Create create = new Create();\n      create.setBaseConfigSetName(BASE_CONFIGSET_NAME).setConfigSetName(CONFIGSET_NAME);\n      try {\n        ConfigSetAdminResponse response = create.process(solrClient);\n        Assert.fail(\"Expected solr exception\");\n      } catch (RemoteSolrException se) {\n        // partial creation should have been cleaned up\n        assertFalse(configManager.configExists(CONFIGSET_NAME));\n        assertEquals(SolrException.ErrorCode.SERVER_ERROR.code, se.code());\n      }\n    } finally {\n      zkClient.close();\n    }\n\n    solrClient.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9f1a5871b8ff5e2e0c0bf62340337c7f3801cffe","date":1452379366,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestConfigSetsAPIZkFailure#testCreateZkFailure().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestConfigSetsAPIZkFailure#testCreateZkFailure().mjava","sourceNew":"  @Test\n  public void testCreateZkFailure() throws Exception {\n    final SolrClient solrClient =\n        new HttpSolrClient(solrCluster.getJettySolrRunners().get(0).getBaseUrl().toString());\n\n    final Map<String, String> oldProps = ImmutableMap.of(\"immutable\", \"true\");\n    setupBaseConfigSet(BASE_CONFIGSET_NAME, oldProps);\n\n    SolrZkClient zkClient = new SolrZkClient(solrCluster.getZkServer().getZkAddress(),\n        AbstractZkTestCase.TIMEOUT, AbstractZkTestCase.TIMEOUT, null);\n    try {\n      ZkConfigManager configManager = new ZkConfigManager(zkClient);\n      assertFalse(configManager.configExists(CONFIGSET_NAME));\n\n      Create create = new Create();\n      create.setBaseConfigSetName(BASE_CONFIGSET_NAME).setConfigSetName(CONFIGSET_NAME);\n      try {\n        ConfigSetAdminResponse response = create.process(solrClient);\n        Assert.fail(\"Expected solr exception\");\n      } catch (RemoteSolrException se) {\n        // partial creation should have been cleaned up\n        assertFalse(configManager.configExists(CONFIGSET_NAME));\n        assertEquals(SolrException.ErrorCode.SERVER_ERROR.code, se.code());\n      }\n    } finally {\n      zkClient.close();\n    }\n\n    solrClient.close();\n  }\n\n","sourceOld":"  @Test\n  public void testCreateZkFailure() throws Exception {\n    final SolrClient solrClient =\n        new HttpSolrClient(solrCluster.getJettySolrRunners().get(0).getBaseUrl().toString());\n\n    final Map<String, String> oldProps = ImmutableMap.of(\"immutable\", \"true\");\n    setupBaseConfigSet(BASE_CONFIGSET_NAME, oldProps);\n\n    SolrZkClient zkClient = new SolrZkClient(solrCluster.getZkServer().getZkAddress(),\n        AbstractZkTestCase.TIMEOUT, 45000, null);\n    try {\n      ZkConfigManager configManager = new ZkConfigManager(zkClient);\n      assertFalse(configManager.configExists(CONFIGSET_NAME));\n\n      Create create = new Create();\n      create.setBaseConfigSetName(BASE_CONFIGSET_NAME).setConfigSetName(CONFIGSET_NAME);\n      try {\n        ConfigSetAdminResponse response = create.process(solrClient);\n        Assert.fail(\"Expected solr exception\");\n      } catch (RemoteSolrException se) {\n        // partial creation should have been cleaned up\n        assertFalse(configManager.configExists(CONFIGSET_NAME));\n        assertEquals(SolrException.ErrorCode.SERVER_ERROR.code, se.code());\n      }\n    } finally {\n      zkClient.close();\n    }\n\n    solrClient.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088","date":1460069869,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestConfigSetsAPIZkFailure#testCreateZkFailure().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestConfigSetsAPIZkFailure#testCreateZkFailure().mjava","sourceNew":"  @Test\n  public void testCreateZkFailure() throws Exception {\n    final String baseUrl = solrCluster.getJettySolrRunners().get(0).getBaseUrl().toString();\n    final SolrClient solrClient = getHttpSolrClient(baseUrl);\n\n    final Map<String, String> oldProps = ImmutableMap.of(\"immutable\", \"true\");\n    setupBaseConfigSet(BASE_CONFIGSET_NAME, oldProps);\n\n    SolrZkClient zkClient = new SolrZkClient(solrCluster.getZkServer().getZkAddress(),\n        AbstractZkTestCase.TIMEOUT, AbstractZkTestCase.TIMEOUT, null);\n    try {\n      ZkConfigManager configManager = new ZkConfigManager(zkClient);\n      assertFalse(configManager.configExists(CONFIGSET_NAME));\n\n      Create create = new Create();\n      create.setBaseConfigSetName(BASE_CONFIGSET_NAME).setConfigSetName(CONFIGSET_NAME);\n      try {\n        ConfigSetAdminResponse response = create.process(solrClient);\n        Assert.fail(\"Expected solr exception\");\n      } catch (RemoteSolrException se) {\n        // partial creation should have been cleaned up\n        assertFalse(configManager.configExists(CONFIGSET_NAME));\n        assertEquals(SolrException.ErrorCode.SERVER_ERROR.code, se.code());\n      }\n    } finally {\n      zkClient.close();\n    }\n\n    solrClient.close();\n  }\n\n","sourceOld":"  @Test\n  public void testCreateZkFailure() throws Exception {\n    final SolrClient solrClient =\n        new HttpSolrClient(solrCluster.getJettySolrRunners().get(0).getBaseUrl().toString());\n\n    final Map<String, String> oldProps = ImmutableMap.of(\"immutable\", \"true\");\n    setupBaseConfigSet(BASE_CONFIGSET_NAME, oldProps);\n\n    SolrZkClient zkClient = new SolrZkClient(solrCluster.getZkServer().getZkAddress(),\n        AbstractZkTestCase.TIMEOUT, AbstractZkTestCase.TIMEOUT, null);\n    try {\n      ZkConfigManager configManager = new ZkConfigManager(zkClient);\n      assertFalse(configManager.configExists(CONFIGSET_NAME));\n\n      Create create = new Create();\n      create.setBaseConfigSetName(BASE_CONFIGSET_NAME).setConfigSetName(CONFIGSET_NAME);\n      try {\n        ConfigSetAdminResponse response = create.process(solrClient);\n        Assert.fail(\"Expected solr exception\");\n      } catch (RemoteSolrException se) {\n        // partial creation should have been cleaned up\n        assertFalse(configManager.configExists(CONFIGSET_NAME));\n        assertEquals(SolrException.ErrorCode.SERVER_ERROR.code, se.code());\n      }\n    } finally {\n      zkClient.close();\n    }\n\n    solrClient.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","date":1460110033,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestConfigSetsAPIZkFailure#testCreateZkFailure().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestConfigSetsAPIZkFailure#testCreateZkFailure().mjava","sourceNew":"  @Test\n  public void testCreateZkFailure() throws Exception {\n    final String baseUrl = solrCluster.getJettySolrRunners().get(0).getBaseUrl().toString();\n    final SolrClient solrClient = getHttpSolrClient(baseUrl);\n\n    final Map<String, String> oldProps = ImmutableMap.of(\"immutable\", \"true\");\n    setupBaseConfigSet(BASE_CONFIGSET_NAME, oldProps);\n\n    SolrZkClient zkClient = new SolrZkClient(solrCluster.getZkServer().getZkAddress(),\n        AbstractZkTestCase.TIMEOUT, AbstractZkTestCase.TIMEOUT, null);\n    try {\n      ZkConfigManager configManager = new ZkConfigManager(zkClient);\n      assertFalse(configManager.configExists(CONFIGSET_NAME));\n\n      Create create = new Create();\n      create.setBaseConfigSetName(BASE_CONFIGSET_NAME).setConfigSetName(CONFIGSET_NAME);\n      try {\n        ConfigSetAdminResponse response = create.process(solrClient);\n        Assert.fail(\"Expected solr exception\");\n      } catch (RemoteSolrException se) {\n        // partial creation should have been cleaned up\n        assertFalse(configManager.configExists(CONFIGSET_NAME));\n        assertEquals(SolrException.ErrorCode.SERVER_ERROR.code, se.code());\n      }\n    } finally {\n      zkClient.close();\n    }\n\n    solrClient.close();\n  }\n\n","sourceOld":"  @Test\n  public void testCreateZkFailure() throws Exception {\n    final SolrClient solrClient =\n        new HttpSolrClient(solrCluster.getJettySolrRunners().get(0).getBaseUrl().toString());\n\n    final Map<String, String> oldProps = ImmutableMap.of(\"immutable\", \"true\");\n    setupBaseConfigSet(BASE_CONFIGSET_NAME, oldProps);\n\n    SolrZkClient zkClient = new SolrZkClient(solrCluster.getZkServer().getZkAddress(),\n        AbstractZkTestCase.TIMEOUT, AbstractZkTestCase.TIMEOUT, null);\n    try {\n      ZkConfigManager configManager = new ZkConfigManager(zkClient);\n      assertFalse(configManager.configExists(CONFIGSET_NAME));\n\n      Create create = new Create();\n      create.setBaseConfigSetName(BASE_CONFIGSET_NAME).setConfigSetName(CONFIGSET_NAME);\n      try {\n        ConfigSetAdminResponse response = create.process(solrClient);\n        Assert.fail(\"Expected solr exception\");\n      } catch (RemoteSolrException se) {\n        // partial creation should have been cleaned up\n        assertFalse(configManager.configExists(CONFIGSET_NAME));\n        assertEquals(SolrException.ErrorCode.SERVER_ERROR.code, se.code());\n      }\n    } finally {\n      zkClient.close();\n    }\n\n    solrClient.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"92f789dbd1886e4b468e61b0def88b29a3f55228","date":1533844010,"type":3,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestConfigSetsAPIZkFailure#testCreateZkFailure().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestConfigSetsAPIZkFailure#testCreateZkFailure().mjava","sourceNew":"  @Test\n  public void testCreateZkFailure() throws Exception {\n    final String baseUrl = solrCluster.getJettySolrRunners().get(0).getBaseUrl().toString();\n    final SolrClient solrClient = getHttpSolrClient(baseUrl);\n\n    final Map<String, String> oldProps = ImmutableMap.of(\"immutable\", \"true\");\n    setupBaseConfigSet(BASE_CONFIGSET_NAME, oldProps);\n\n    SolrZkClient zkClient = new SolrZkClient(solrCluster.getZkServer().getZkAddress(),\n        AbstractZkTestCase.TIMEOUT, AbstractZkTestCase.TIMEOUT, null);\n    try {\n      ZkConfigManager configManager = new ZkConfigManager(zkClient);\n      assertFalse(configManager.configExists(CONFIGSET_NAME));\n\n      Create create = new Create();\n      create.setBaseConfigSetName(BASE_CONFIGSET_NAME).setConfigSetName(CONFIGSET_NAME);\n      RemoteSolrException se = expectThrows(RemoteSolrException.class, () -> create.process(solrClient));\n      // partial creation should have been cleaned up\n      assertFalse(configManager.configExists(CONFIGSET_NAME));\n      assertEquals(SolrException.ErrorCode.SERVER_ERROR.code, se.code());\n    } finally {\n      zkClient.close();\n    }\n\n    solrClient.close();\n  }\n\n","sourceOld":"  @Test\n  public void testCreateZkFailure() throws Exception {\n    final String baseUrl = solrCluster.getJettySolrRunners().get(0).getBaseUrl().toString();\n    final SolrClient solrClient = getHttpSolrClient(baseUrl);\n\n    final Map<String, String> oldProps = ImmutableMap.of(\"immutable\", \"true\");\n    setupBaseConfigSet(BASE_CONFIGSET_NAME, oldProps);\n\n    SolrZkClient zkClient = new SolrZkClient(solrCluster.getZkServer().getZkAddress(),\n        AbstractZkTestCase.TIMEOUT, AbstractZkTestCase.TIMEOUT, null);\n    try {\n      ZkConfigManager configManager = new ZkConfigManager(zkClient);\n      assertFalse(configManager.configExists(CONFIGSET_NAME));\n\n      Create create = new Create();\n      create.setBaseConfigSetName(BASE_CONFIGSET_NAME).setConfigSetName(CONFIGSET_NAME);\n      try {\n        ConfigSetAdminResponse response = create.process(solrClient);\n        Assert.fail(\"Expected solr exception\");\n      } catch (RemoteSolrException se) {\n        // partial creation should have been cleaned up\n        assertFalse(configManager.configExists(CONFIGSET_NAME));\n        assertEquals(SolrException.ErrorCode.SERVER_ERROR.code, se.code());\n      }\n    } finally {\n      zkClient.close();\n    }\n\n    solrClient.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2209af2c265d2258ec4b29c8cc78622d36994a15":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088":["9f1a5871b8ff5e2e0c0bf62340337c7f3801cffe"],"9f1a5871b8ff5e2e0c0bf62340337c7f3801cffe":["2209af2c265d2258ec4b29c8cc78622d36994a15"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"92f789dbd1886e4b468e61b0def88b29a3f55228":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b":["9f1a5871b8ff5e2e0c0bf62340337c7f3801cffe","e3c94a8b8bf47db4f968d9ae510ec8bbe1372088"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["92f789dbd1886e4b468e61b0def88b29a3f55228"]},"commit2Childs":{"2209af2c265d2258ec4b29c8cc78622d36994a15":["9f1a5871b8ff5e2e0c0bf62340337c7f3801cffe"],"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2209af2c265d2258ec4b29c8cc78622d36994a15"],"9f1a5871b8ff5e2e0c0bf62340337c7f3801cffe":["e3c94a8b8bf47db4f968d9ae510ec8bbe1372088","5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"92f789dbd1886e4b468e61b0def88b29a3f55228":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b":["92f789dbd1886e4b468e61b0def88b29a3f55228"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}