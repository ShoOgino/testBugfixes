{"path":"solr/src/java/org/apache/solr/handler/XMLLoader#processUpdate(SolrQueryRequest,UpdateRequestProcessor,XMLStreamReader).mjava","commits":[{"id":"5ae62bcdfd4a0689a745ab1d38c6bd1c7c390cfa","date":1293733647,"type":1,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/XMLLoader#processUpdate(SolrQueryRequest,UpdateRequestProcessor,XMLStreamReader).mjava","pathOld":"solr/src/java/org/apache/solr/handler/XMLLoader#processUpdate(UpdateRequestProcessor,XMLStreamReader).mjava","sourceNew":"  /**\n   * @since solr 1.2\n   */\n  void processUpdate(SolrQueryRequest req, UpdateRequestProcessor processor, XMLStreamReader parser)\n          throws XMLStreamException, IOException, FactoryConfigurationError,\n          InstantiationException, IllegalAccessException,\n          TransformerConfigurationException {\n    AddUpdateCommand addCmd = null;\n    while (true) {\n      int event = parser.next();\n      switch (event) {\n        case XMLStreamConstants.END_DOCUMENT:\n          parser.close();\n          return;\n\n        case XMLStreamConstants.START_ELEMENT:\n          String currTag = parser.getLocalName();\n          if (currTag.equals(XmlUpdateRequestHandler.ADD)) {\n            XmlUpdateRequestHandler.log.trace(\"SolrCore.update(add)\");\n\n            addCmd = new AddUpdateCommand(req);\n\n            for (int i = 0; i < parser.getAttributeCount(); i++) {\n              String attrName = parser.getAttributeLocalName(i);\n              String attrVal = parser.getAttributeValue(i);\n              if (XmlUpdateRequestHandler.OVERWRITE.equals(attrName)) {\n                addCmd.overwrite = StrUtils.parseBoolean(attrVal);\n              } else if (XmlUpdateRequestHandler.COMMIT_WITHIN.equals(attrName)) {\n                addCmd.commitWithin = Integer.parseInt(attrVal);\n              } else {\n                XmlUpdateRequestHandler.log.warn(\"Unknown attribute id in add:\" + attrName);\n              }\n            }\n\n          } else if (\"doc\".equals(currTag)) {\n            XmlUpdateRequestHandler.log.trace(\"adding doc...\");\n            addCmd.clear();\n            addCmd.solrDoc = readDoc(parser);\n            processor.processAdd(addCmd);\n          } else if (XmlUpdateRequestHandler.COMMIT.equals(currTag) || XmlUpdateRequestHandler.OPTIMIZE.equals(currTag)) {\n            XmlUpdateRequestHandler.log.trace(\"parsing \" + currTag);\n\n            CommitUpdateCommand cmd = new CommitUpdateCommand(req, XmlUpdateRequestHandler.OPTIMIZE.equals(currTag));\n\n            boolean sawWaitSearcher = false, sawWaitFlush = false;\n            for (int i = 0; i < parser.getAttributeCount(); i++) {\n              String attrName = parser.getAttributeLocalName(i);\n              String attrVal = parser.getAttributeValue(i);\n              if (XmlUpdateRequestHandler.WAIT_FLUSH.equals(attrName)) {\n                cmd.waitFlush = StrUtils.parseBoolean(attrVal);\n                sawWaitFlush = true;\n              } else if (XmlUpdateRequestHandler.WAIT_SEARCHER.equals(attrName)) {\n                cmd.waitSearcher = StrUtils.parseBoolean(attrVal);\n                sawWaitSearcher = true;\n              } else if (UpdateParams.MAX_OPTIMIZE_SEGMENTS.equals(attrName)) {\n                cmd.maxOptimizeSegments = Integer.parseInt(attrVal);\n              } else if (UpdateParams.EXPUNGE_DELETES.equals(attrName)) {\n                cmd.expungeDeletes = StrUtils.parseBoolean(attrVal);\n              } else {\n                XmlUpdateRequestHandler.log.warn(\"unexpected attribute commit/@\" + attrName);\n              }\n            }\n\n            // If waitFlush is specified and waitSearcher wasn't, then\n            // clear waitSearcher.\n            if (sawWaitFlush && !sawWaitSearcher) {\n              cmd.waitSearcher = false;\n            }\n            processor.processCommit(cmd);\n          } // end commit\n          else if (XmlUpdateRequestHandler.ROLLBACK.equals(currTag)) {\n            XmlUpdateRequestHandler.log.trace(\"parsing \" + currTag);\n\n            RollbackUpdateCommand cmd = new RollbackUpdateCommand(req);\n\n            processor.processRollback(cmd);\n          } // end rollback\n          else if (XmlUpdateRequestHandler.DELETE.equals(currTag)) {\n            XmlUpdateRequestHandler.log.trace(\"parsing delete\");\n            processDelete(req, processor, parser);\n          } // end delete\n          break;\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * @since solr 1.2\n   */\n  void processUpdate(UpdateRequestProcessor processor, XMLStreamReader parser)\n          throws XMLStreamException, IOException, FactoryConfigurationError,\n          InstantiationException, IllegalAccessException,\n          TransformerConfigurationException {\n    AddUpdateCommand addCmd = null;\n    while (true) {\n      int event = parser.next();\n      switch (event) {\n        case XMLStreamConstants.END_DOCUMENT:\n          parser.close();\n          return;\n\n        case XMLStreamConstants.START_ELEMENT:\n          String currTag = parser.getLocalName();\n          if (currTag.equals(XmlUpdateRequestHandler.ADD)) {\n            XmlUpdateRequestHandler.log.trace(\"SolrCore.update(add)\");\n\n            addCmd = new AddUpdateCommand();\n\n            for (int i = 0; i < parser.getAttributeCount(); i++) {\n              String attrName = parser.getAttributeLocalName(i);\n              String attrVal = parser.getAttributeValue(i);\n              if (XmlUpdateRequestHandler.OVERWRITE.equals(attrName)) {\n                addCmd.overwrite = StrUtils.parseBoolean(attrVal);\n              } else if (XmlUpdateRequestHandler.COMMIT_WITHIN.equals(attrName)) {\n                addCmd.commitWithin = Integer.parseInt(attrVal);\n              } else {\n                XmlUpdateRequestHandler.log.warn(\"Unknown attribute id in add:\" + attrName);\n              }\n            }\n\n          } else if (\"doc\".equals(currTag)) {\n            XmlUpdateRequestHandler.log.trace(\"adding doc...\");\n            addCmd.clear();\n            addCmd.solrDoc = readDoc(parser);\n            processor.processAdd(addCmd);\n          } else if (XmlUpdateRequestHandler.COMMIT.equals(currTag) || XmlUpdateRequestHandler.OPTIMIZE.equals(currTag)) {\n            XmlUpdateRequestHandler.log.trace(\"parsing \" + currTag);\n\n            CommitUpdateCommand cmd = new CommitUpdateCommand(XmlUpdateRequestHandler.OPTIMIZE.equals(currTag));\n\n            boolean sawWaitSearcher = false, sawWaitFlush = false;\n            for (int i = 0; i < parser.getAttributeCount(); i++) {\n              String attrName = parser.getAttributeLocalName(i);\n              String attrVal = parser.getAttributeValue(i);\n              if (XmlUpdateRequestHandler.WAIT_FLUSH.equals(attrName)) {\n                cmd.waitFlush = StrUtils.parseBoolean(attrVal);\n                sawWaitFlush = true;\n              } else if (XmlUpdateRequestHandler.WAIT_SEARCHER.equals(attrName)) {\n                cmd.waitSearcher = StrUtils.parseBoolean(attrVal);\n                sawWaitSearcher = true;\n              } else if (UpdateParams.MAX_OPTIMIZE_SEGMENTS.equals(attrName)) {\n                cmd.maxOptimizeSegments = Integer.parseInt(attrVal);\n              } else if (UpdateParams.EXPUNGE_DELETES.equals(attrName)) {\n                cmd.expungeDeletes = StrUtils.parseBoolean(attrVal);\n              } else {\n                XmlUpdateRequestHandler.log.warn(\"unexpected attribute commit/@\" + attrName);\n              }\n            }\n\n            // If waitFlush is specified and waitSearcher wasn't, then\n            // clear waitSearcher.\n            if (sawWaitFlush && !sawWaitSearcher) {\n              cmd.waitSearcher = false;\n            }\n            processor.processCommit(cmd);\n          } // end commit\n          else if (XmlUpdateRequestHandler.ROLLBACK.equals(currTag)) {\n            XmlUpdateRequestHandler.log.trace(\"parsing \" + currTag);\n\n            RollbackUpdateCommand cmd = new RollbackUpdateCommand();\n\n            processor.processRollback(cmd);\n          } // end rollback\n          else if (XmlUpdateRequestHandler.DELETE.equals(currTag)) {\n            XmlUpdateRequestHandler.log.trace(\"parsing delete\");\n            processDelete(processor, parser);\n          } // end delete\n          break;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c","date":1294014627,"type":1,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/XMLLoader#processUpdate(SolrQueryRequest,UpdateRequestProcessor,XMLStreamReader).mjava","pathOld":"solr/src/java/org/apache/solr/handler/XMLLoader#processUpdate(UpdateRequestProcessor,XMLStreamReader).mjava","sourceNew":"  /**\n   * @since solr 1.2\n   */\n  void processUpdate(SolrQueryRequest req, UpdateRequestProcessor processor, XMLStreamReader parser)\n          throws XMLStreamException, IOException, FactoryConfigurationError,\n          InstantiationException, IllegalAccessException,\n          TransformerConfigurationException {\n    AddUpdateCommand addCmd = null;\n    while (true) {\n      int event = parser.next();\n      switch (event) {\n        case XMLStreamConstants.END_DOCUMENT:\n          parser.close();\n          return;\n\n        case XMLStreamConstants.START_ELEMENT:\n          String currTag = parser.getLocalName();\n          if (currTag.equals(XmlUpdateRequestHandler.ADD)) {\n            XmlUpdateRequestHandler.log.trace(\"SolrCore.update(add)\");\n\n            addCmd = new AddUpdateCommand(req);\n\n            for (int i = 0; i < parser.getAttributeCount(); i++) {\n              String attrName = parser.getAttributeLocalName(i);\n              String attrVal = parser.getAttributeValue(i);\n              if (XmlUpdateRequestHandler.OVERWRITE.equals(attrName)) {\n                addCmd.overwrite = StrUtils.parseBoolean(attrVal);\n              } else if (XmlUpdateRequestHandler.COMMIT_WITHIN.equals(attrName)) {\n                addCmd.commitWithin = Integer.parseInt(attrVal);\n              } else {\n                XmlUpdateRequestHandler.log.warn(\"Unknown attribute id in add:\" + attrName);\n              }\n            }\n\n          } else if (\"doc\".equals(currTag)) {\n            XmlUpdateRequestHandler.log.trace(\"adding doc...\");\n            addCmd.clear();\n            addCmd.solrDoc = readDoc(parser);\n            processor.processAdd(addCmd);\n          } else if (XmlUpdateRequestHandler.COMMIT.equals(currTag) || XmlUpdateRequestHandler.OPTIMIZE.equals(currTag)) {\n            XmlUpdateRequestHandler.log.trace(\"parsing \" + currTag);\n\n            CommitUpdateCommand cmd = new CommitUpdateCommand(req, XmlUpdateRequestHandler.OPTIMIZE.equals(currTag));\n\n            boolean sawWaitSearcher = false, sawWaitFlush = false;\n            for (int i = 0; i < parser.getAttributeCount(); i++) {\n              String attrName = parser.getAttributeLocalName(i);\n              String attrVal = parser.getAttributeValue(i);\n              if (XmlUpdateRequestHandler.WAIT_FLUSH.equals(attrName)) {\n                cmd.waitFlush = StrUtils.parseBoolean(attrVal);\n                sawWaitFlush = true;\n              } else if (XmlUpdateRequestHandler.WAIT_SEARCHER.equals(attrName)) {\n                cmd.waitSearcher = StrUtils.parseBoolean(attrVal);\n                sawWaitSearcher = true;\n              } else if (UpdateParams.MAX_OPTIMIZE_SEGMENTS.equals(attrName)) {\n                cmd.maxOptimizeSegments = Integer.parseInt(attrVal);\n              } else if (UpdateParams.EXPUNGE_DELETES.equals(attrName)) {\n                cmd.expungeDeletes = StrUtils.parseBoolean(attrVal);\n              } else {\n                XmlUpdateRequestHandler.log.warn(\"unexpected attribute commit/@\" + attrName);\n              }\n            }\n\n            // If waitFlush is specified and waitSearcher wasn't, then\n            // clear waitSearcher.\n            if (sawWaitFlush && !sawWaitSearcher) {\n              cmd.waitSearcher = false;\n            }\n            processor.processCommit(cmd);\n          } // end commit\n          else if (XmlUpdateRequestHandler.ROLLBACK.equals(currTag)) {\n            XmlUpdateRequestHandler.log.trace(\"parsing \" + currTag);\n\n            RollbackUpdateCommand cmd = new RollbackUpdateCommand(req);\n\n            processor.processRollback(cmd);\n          } // end rollback\n          else if (XmlUpdateRequestHandler.DELETE.equals(currTag)) {\n            XmlUpdateRequestHandler.log.trace(\"parsing delete\");\n            processDelete(req, processor, parser);\n          } // end delete\n          break;\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * @since solr 1.2\n   */\n  void processUpdate(UpdateRequestProcessor processor, XMLStreamReader parser)\n          throws XMLStreamException, IOException, FactoryConfigurationError,\n          InstantiationException, IllegalAccessException,\n          TransformerConfigurationException {\n    AddUpdateCommand addCmd = null;\n    while (true) {\n      int event = parser.next();\n      switch (event) {\n        case XMLStreamConstants.END_DOCUMENT:\n          parser.close();\n          return;\n\n        case XMLStreamConstants.START_ELEMENT:\n          String currTag = parser.getLocalName();\n          if (currTag.equals(XmlUpdateRequestHandler.ADD)) {\n            XmlUpdateRequestHandler.log.trace(\"SolrCore.update(add)\");\n\n            addCmd = new AddUpdateCommand();\n            boolean overwrite = true;  // the default\n\n            Boolean overwritePending = null;\n            Boolean overwriteCommitted = null;\n            for (int i = 0; i < parser.getAttributeCount(); i++) {\n              String attrName = parser.getAttributeLocalName(i);\n              String attrVal = parser.getAttributeValue(i);\n              if (XmlUpdateRequestHandler.OVERWRITE.equals(attrName)) {\n                overwrite = StrUtils.parseBoolean(attrVal);\n              } else if (XmlUpdateRequestHandler.ALLOW_DUPS.equals(attrName)) {\n                overwrite = !StrUtils.parseBoolean(attrVal);\n              } else if (XmlUpdateRequestHandler.COMMIT_WITHIN.equals(attrName)) {\n                addCmd.commitWithin = Integer.parseInt(attrVal);\n              } else if (XmlUpdateRequestHandler.OVERWRITE_PENDING.equals(attrName)) {\n                overwritePending = StrUtils.parseBoolean(attrVal);\n              } else if (XmlUpdateRequestHandler.OVERWRITE_COMMITTED.equals(attrName)) {\n                overwriteCommitted = StrUtils.parseBoolean(attrVal);\n              } else {\n                XmlUpdateRequestHandler.log.warn(\"Unknown attribute id in add:\" + attrName);\n              }\n            }\n\n            // check if these flags are set\n            if (overwritePending != null && overwriteCommitted != null) {\n              if (overwritePending != overwriteCommitted) {\n                throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                        \"can't have different values for 'overwritePending' and 'overwriteCommitted'\");\n              }\n              overwrite = overwritePending;\n            }\n            addCmd.overwriteCommitted = overwrite;\n            addCmd.overwritePending = overwrite;\n            addCmd.allowDups = !overwrite;\n          } else if (\"doc\".equals(currTag)) {\n            XmlUpdateRequestHandler.log.trace(\"adding doc...\");\n            addCmd.clear();\n            addCmd.solrDoc = readDoc(parser);\n            processor.processAdd(addCmd);\n          } else if (XmlUpdateRequestHandler.COMMIT.equals(currTag) || XmlUpdateRequestHandler.OPTIMIZE.equals(currTag)) {\n            XmlUpdateRequestHandler.log.trace(\"parsing \" + currTag);\n\n            CommitUpdateCommand cmd = new CommitUpdateCommand(XmlUpdateRequestHandler.OPTIMIZE.equals(currTag));\n\n            boolean sawWaitSearcher = false, sawWaitFlush = false;\n            for (int i = 0; i < parser.getAttributeCount(); i++) {\n              String attrName = parser.getAttributeLocalName(i);\n              String attrVal = parser.getAttributeValue(i);\n              if (XmlUpdateRequestHandler.WAIT_FLUSH.equals(attrName)) {\n                cmd.waitFlush = StrUtils.parseBoolean(attrVal);\n                sawWaitFlush = true;\n              } else if (XmlUpdateRequestHandler.WAIT_SEARCHER.equals(attrName)) {\n                cmd.waitSearcher = StrUtils.parseBoolean(attrVal);\n                sawWaitSearcher = true;\n              } else if (UpdateParams.MAX_OPTIMIZE_SEGMENTS.equals(attrName)) {\n                cmd.maxOptimizeSegments = Integer.parseInt(attrVal);\n              } else if (UpdateParams.EXPUNGE_DELETES.equals(attrName)) {\n                cmd.expungeDeletes = StrUtils.parseBoolean(attrVal);\n              } else {\n                XmlUpdateRequestHandler.log.warn(\"unexpected attribute commit/@\" + attrName);\n              }\n            }\n\n            // If waitFlush is specified and waitSearcher wasn't, then\n            // clear waitSearcher.\n            if (sawWaitFlush && !sawWaitSearcher) {\n              cmd.waitSearcher = false;\n            }\n            processor.processCommit(cmd);\n          } // end commit\n          else if (XmlUpdateRequestHandler.ROLLBACK.equals(currTag)) {\n            XmlUpdateRequestHandler.log.trace(\"parsing \" + currTag);\n\n            RollbackUpdateCommand cmd = new RollbackUpdateCommand();\n\n            processor.processRollback(cmd);\n          } // end rollback\n          else if (XmlUpdateRequestHandler.DELETE.equals(currTag)) {\n            XmlUpdateRequestHandler.log.trace(\"parsing delete\");\n            processDelete(processor, parser);\n          } // end delete\n          break;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/XMLLoader#processUpdate(SolrQueryRequest,UpdateRequestProcessor,XMLStreamReader).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * @since solr 1.2\n   */\n  void processUpdate(SolrQueryRequest req, UpdateRequestProcessor processor, XMLStreamReader parser)\n          throws XMLStreamException, IOException, FactoryConfigurationError,\n          InstantiationException, IllegalAccessException,\n          TransformerConfigurationException {\n    AddUpdateCommand addCmd = null;\n    while (true) {\n      int event = parser.next();\n      switch (event) {\n        case XMLStreamConstants.END_DOCUMENT:\n          parser.close();\n          return;\n\n        case XMLStreamConstants.START_ELEMENT:\n          String currTag = parser.getLocalName();\n          if (currTag.equals(XmlUpdateRequestHandler.ADD)) {\n            XmlUpdateRequestHandler.log.trace(\"SolrCore.update(add)\");\n\n            addCmd = new AddUpdateCommand(req);\n\n            for (int i = 0; i < parser.getAttributeCount(); i++) {\n              String attrName = parser.getAttributeLocalName(i);\n              String attrVal = parser.getAttributeValue(i);\n              if (XmlUpdateRequestHandler.OVERWRITE.equals(attrName)) {\n                addCmd.overwrite = StrUtils.parseBoolean(attrVal);\n              } else if (XmlUpdateRequestHandler.COMMIT_WITHIN.equals(attrName)) {\n                addCmd.commitWithin = Integer.parseInt(attrVal);\n              } else {\n                XmlUpdateRequestHandler.log.warn(\"Unknown attribute id in add:\" + attrName);\n              }\n            }\n\n          } else if (\"doc\".equals(currTag)) {\n            XmlUpdateRequestHandler.log.trace(\"adding doc...\");\n            addCmd.clear();\n            addCmd.solrDoc = readDoc(parser);\n            processor.processAdd(addCmd);\n          } else if (XmlUpdateRequestHandler.COMMIT.equals(currTag) || XmlUpdateRequestHandler.OPTIMIZE.equals(currTag)) {\n            XmlUpdateRequestHandler.log.trace(\"parsing \" + currTag);\n\n            CommitUpdateCommand cmd = new CommitUpdateCommand(req, XmlUpdateRequestHandler.OPTIMIZE.equals(currTag));\n\n            boolean sawWaitSearcher = false, sawWaitFlush = false;\n            for (int i = 0; i < parser.getAttributeCount(); i++) {\n              String attrName = parser.getAttributeLocalName(i);\n              String attrVal = parser.getAttributeValue(i);\n              if (XmlUpdateRequestHandler.WAIT_FLUSH.equals(attrName)) {\n                cmd.waitFlush = StrUtils.parseBoolean(attrVal);\n                sawWaitFlush = true;\n              } else if (XmlUpdateRequestHandler.WAIT_SEARCHER.equals(attrName)) {\n                cmd.waitSearcher = StrUtils.parseBoolean(attrVal);\n                sawWaitSearcher = true;\n              } else if (UpdateParams.MAX_OPTIMIZE_SEGMENTS.equals(attrName)) {\n                cmd.maxOptimizeSegments = Integer.parseInt(attrVal);\n              } else if (UpdateParams.EXPUNGE_DELETES.equals(attrName)) {\n                cmd.expungeDeletes = StrUtils.parseBoolean(attrVal);\n              } else {\n                XmlUpdateRequestHandler.log.warn(\"unexpected attribute commit/@\" + attrName);\n              }\n            }\n\n            // If waitFlush is specified and waitSearcher wasn't, then\n            // clear waitSearcher.\n            if (sawWaitFlush && !sawWaitSearcher) {\n              cmd.waitSearcher = false;\n            }\n            processor.processCommit(cmd);\n          } // end commit\n          else if (XmlUpdateRequestHandler.ROLLBACK.equals(currTag)) {\n            XmlUpdateRequestHandler.log.trace(\"parsing \" + currTag);\n\n            RollbackUpdateCommand cmd = new RollbackUpdateCommand(req);\n\n            processor.processRollback(cmd);\n          } // end rollback\n          else if (XmlUpdateRequestHandler.DELETE.equals(currTag)) {\n            XmlUpdateRequestHandler.log.trace(\"parsing delete\");\n            processDelete(req, processor, parser);\n          } // end delete\n          break;\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a71a0b2d4be2299a163f60626729852d81a8e02","date":1309442399,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/XMLLoader#processUpdate(SolrQueryRequest,UpdateRequestProcessor,XMLStreamReader).mjava","pathOld":"solr/src/java/org/apache/solr/handler/XMLLoader#processUpdate(SolrQueryRequest,UpdateRequestProcessor,XMLStreamReader).mjava","sourceNew":"  /**\n   * @since solr 1.2\n   */\n  void processUpdate(SolrQueryRequest req, UpdateRequestProcessor processor, XMLStreamReader parser)\n          throws XMLStreamException, IOException, FactoryConfigurationError,\n          InstantiationException, IllegalAccessException,\n          TransformerConfigurationException {\n    AddUpdateCommand addCmd = null;\n    while (true) {\n      int event = parser.next();\n      switch (event) {\n        case XMLStreamConstants.END_DOCUMENT:\n          parser.close();\n          return;\n\n        case XMLStreamConstants.START_ELEMENT:\n          String currTag = parser.getLocalName();\n          if (currTag.equals(XmlUpdateRequestHandler.ADD)) {\n            XmlUpdateRequestHandler.log.trace(\"SolrCore.update(add)\");\n\n            addCmd = new AddUpdateCommand(req);\n\n            for (int i = 0; i < parser.getAttributeCount(); i++) {\n              String attrName = parser.getAttributeLocalName(i);\n              String attrVal = parser.getAttributeValue(i);\n              if (XmlUpdateRequestHandler.OVERWRITE.equals(attrName)) {\n                addCmd.overwrite = StrUtils.parseBoolean(attrVal);\n              } else if (XmlUpdateRequestHandler.COMMIT_WITHIN.equals(attrName)) {\n                addCmd.commitWithin = Integer.parseInt(attrVal);\n              } else {\n                XmlUpdateRequestHandler.log.warn(\"Unknown attribute id in add:\" + attrName);\n              }\n            }\n\n          } else if (\"doc\".equals(currTag)) {\n            XmlUpdateRequestHandler.log.trace(\"adding doc...\");\n            addCmd.clear();\n            addCmd.solrDoc = readDoc(parser);\n            processor.processAdd(addCmd);\n          } else if (XmlUpdateRequestHandler.COMMIT.equals(currTag) || XmlUpdateRequestHandler.OPTIMIZE.equals(currTag)) {\n            XmlUpdateRequestHandler.log.trace(\"parsing \" + currTag);\n\n            CommitUpdateCommand cmd = new CommitUpdateCommand(req, XmlUpdateRequestHandler.OPTIMIZE.equals(currTag));\n\n            for (int i = 0; i < parser.getAttributeCount(); i++) {\n              String attrName = parser.getAttributeLocalName(i);\n              String attrVal = parser.getAttributeValue(i);\n              if (XmlUpdateRequestHandler.WAIT_SEARCHER.equals(attrName)) {\n                cmd.waitSearcher = StrUtils.parseBoolean(attrVal);\n              } else if (XmlUpdateRequestHandler.SOFT_COMMIT.equals(attrName)) {\n                cmd.softCommit = StrUtils.parseBoolean(attrVal);\n              } else if (UpdateParams.MAX_OPTIMIZE_SEGMENTS.equals(attrName)) {\n                cmd.maxOptimizeSegments = Integer.parseInt(attrVal);\n              } else if (UpdateParams.EXPUNGE_DELETES.equals(attrName)) {\n                cmd.expungeDeletes = StrUtils.parseBoolean(attrVal);\n              } else {\n                XmlUpdateRequestHandler.log.warn(\"unexpected attribute commit/@\" + attrName);\n              }\n            }\n\n            processor.processCommit(cmd);\n          } // end commit\n          else if (XmlUpdateRequestHandler.ROLLBACK.equals(currTag)) {\n            XmlUpdateRequestHandler.log.trace(\"parsing \" + currTag);\n\n            RollbackUpdateCommand cmd = new RollbackUpdateCommand(req);\n\n            processor.processRollback(cmd);\n          } // end rollback\n          else if (XmlUpdateRequestHandler.DELETE.equals(currTag)) {\n            XmlUpdateRequestHandler.log.trace(\"parsing delete\");\n            processDelete(req, processor, parser);\n          } // end delete\n          break;\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * @since solr 1.2\n   */\n  void processUpdate(SolrQueryRequest req, UpdateRequestProcessor processor, XMLStreamReader parser)\n          throws XMLStreamException, IOException, FactoryConfigurationError,\n          InstantiationException, IllegalAccessException,\n          TransformerConfigurationException {\n    AddUpdateCommand addCmd = null;\n    while (true) {\n      int event = parser.next();\n      switch (event) {\n        case XMLStreamConstants.END_DOCUMENT:\n          parser.close();\n          return;\n\n        case XMLStreamConstants.START_ELEMENT:\n          String currTag = parser.getLocalName();\n          if (currTag.equals(XmlUpdateRequestHandler.ADD)) {\n            XmlUpdateRequestHandler.log.trace(\"SolrCore.update(add)\");\n\n            addCmd = new AddUpdateCommand(req);\n\n            for (int i = 0; i < parser.getAttributeCount(); i++) {\n              String attrName = parser.getAttributeLocalName(i);\n              String attrVal = parser.getAttributeValue(i);\n              if (XmlUpdateRequestHandler.OVERWRITE.equals(attrName)) {\n                addCmd.overwrite = StrUtils.parseBoolean(attrVal);\n              } else if (XmlUpdateRequestHandler.COMMIT_WITHIN.equals(attrName)) {\n                addCmd.commitWithin = Integer.parseInt(attrVal);\n              } else {\n                XmlUpdateRequestHandler.log.warn(\"Unknown attribute id in add:\" + attrName);\n              }\n            }\n\n          } else if (\"doc\".equals(currTag)) {\n            XmlUpdateRequestHandler.log.trace(\"adding doc...\");\n            addCmd.clear();\n            addCmd.solrDoc = readDoc(parser);\n            processor.processAdd(addCmd);\n          } else if (XmlUpdateRequestHandler.COMMIT.equals(currTag) || XmlUpdateRequestHandler.OPTIMIZE.equals(currTag)) {\n            XmlUpdateRequestHandler.log.trace(\"parsing \" + currTag);\n\n            CommitUpdateCommand cmd = new CommitUpdateCommand(req, XmlUpdateRequestHandler.OPTIMIZE.equals(currTag));\n\n            boolean sawWaitSearcher = false, sawWaitFlush = false;\n            for (int i = 0; i < parser.getAttributeCount(); i++) {\n              String attrName = parser.getAttributeLocalName(i);\n              String attrVal = parser.getAttributeValue(i);\n              if (XmlUpdateRequestHandler.WAIT_FLUSH.equals(attrName)) {\n                cmd.waitFlush = StrUtils.parseBoolean(attrVal);\n                sawWaitFlush = true;\n              } else if (XmlUpdateRequestHandler.WAIT_SEARCHER.equals(attrName)) {\n                cmd.waitSearcher = StrUtils.parseBoolean(attrVal);\n                sawWaitSearcher = true;\n              } else if (UpdateParams.MAX_OPTIMIZE_SEGMENTS.equals(attrName)) {\n                cmd.maxOptimizeSegments = Integer.parseInt(attrVal);\n              } else if (UpdateParams.EXPUNGE_DELETES.equals(attrName)) {\n                cmd.expungeDeletes = StrUtils.parseBoolean(attrVal);\n              } else {\n                XmlUpdateRequestHandler.log.warn(\"unexpected attribute commit/@\" + attrName);\n              }\n            }\n\n            // If waitFlush is specified and waitSearcher wasn't, then\n            // clear waitSearcher.\n            if (sawWaitFlush && !sawWaitSearcher) {\n              cmd.waitSearcher = false;\n            }\n            processor.processCommit(cmd);\n          } // end commit\n          else if (XmlUpdateRequestHandler.ROLLBACK.equals(currTag)) {\n            XmlUpdateRequestHandler.log.trace(\"parsing \" + currTag);\n\n            RollbackUpdateCommand cmd = new RollbackUpdateCommand(req);\n\n            processor.processRollback(cmd);\n          } // end rollback\n          else if (XmlUpdateRequestHandler.DELETE.equals(currTag)) {\n            XmlUpdateRequestHandler.log.trace(\"parsing delete\");\n            processDelete(req, processor, parser);\n          } // end delete\n          break;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/XMLLoader#processUpdate(SolrQueryRequest,UpdateRequestProcessor,XMLStreamReader).mjava","pathOld":"solr/src/java/org/apache/solr/handler/XMLLoader#processUpdate(SolrQueryRequest,UpdateRequestProcessor,XMLStreamReader).mjava","sourceNew":"  /**\n   * @since solr 1.2\n   */\n  void processUpdate(SolrQueryRequest req, UpdateRequestProcessor processor, XMLStreamReader parser)\n          throws XMLStreamException, IOException, FactoryConfigurationError,\n          InstantiationException, IllegalAccessException,\n          TransformerConfigurationException {\n    AddUpdateCommand addCmd = null;\n    while (true) {\n      int event = parser.next();\n      switch (event) {\n        case XMLStreamConstants.END_DOCUMENT:\n          parser.close();\n          return;\n\n        case XMLStreamConstants.START_ELEMENT:\n          String currTag = parser.getLocalName();\n          if (currTag.equals(XmlUpdateRequestHandler.ADD)) {\n            XmlUpdateRequestHandler.log.trace(\"SolrCore.update(add)\");\n\n            addCmd = new AddUpdateCommand(req);\n\n            for (int i = 0; i < parser.getAttributeCount(); i++) {\n              String attrName = parser.getAttributeLocalName(i);\n              String attrVal = parser.getAttributeValue(i);\n              if (XmlUpdateRequestHandler.OVERWRITE.equals(attrName)) {\n                addCmd.overwrite = StrUtils.parseBoolean(attrVal);\n              } else if (XmlUpdateRequestHandler.COMMIT_WITHIN.equals(attrName)) {\n                addCmd.commitWithin = Integer.parseInt(attrVal);\n              } else {\n                XmlUpdateRequestHandler.log.warn(\"Unknown attribute id in add:\" + attrName);\n              }\n            }\n\n          } else if (\"doc\".equals(currTag)) {\n            XmlUpdateRequestHandler.log.trace(\"adding doc...\");\n            addCmd.clear();\n            addCmd.solrDoc = readDoc(parser);\n            processor.processAdd(addCmd);\n          } else if (XmlUpdateRequestHandler.COMMIT.equals(currTag) || XmlUpdateRequestHandler.OPTIMIZE.equals(currTag)) {\n            XmlUpdateRequestHandler.log.trace(\"parsing \" + currTag);\n\n            CommitUpdateCommand cmd = new CommitUpdateCommand(req, XmlUpdateRequestHandler.OPTIMIZE.equals(currTag));\n\n            for (int i = 0; i < parser.getAttributeCount(); i++) {\n              String attrName = parser.getAttributeLocalName(i);\n              String attrVal = parser.getAttributeValue(i);\n              if (XmlUpdateRequestHandler.WAIT_SEARCHER.equals(attrName)) {\n                cmd.waitSearcher = StrUtils.parseBoolean(attrVal);\n              } else if (XmlUpdateRequestHandler.SOFT_COMMIT.equals(attrName)) {\n                cmd.softCommit = StrUtils.parseBoolean(attrVal);\n              } else if (UpdateParams.MAX_OPTIMIZE_SEGMENTS.equals(attrName)) {\n                cmd.maxOptimizeSegments = Integer.parseInt(attrVal);\n              } else if (UpdateParams.EXPUNGE_DELETES.equals(attrName)) {\n                cmd.expungeDeletes = StrUtils.parseBoolean(attrVal);\n              } else {\n                XmlUpdateRequestHandler.log.warn(\"unexpected attribute commit/@\" + attrName);\n              }\n            }\n\n            processor.processCommit(cmd);\n          } // end commit\n          else if (XmlUpdateRequestHandler.ROLLBACK.equals(currTag)) {\n            XmlUpdateRequestHandler.log.trace(\"parsing \" + currTag);\n\n            RollbackUpdateCommand cmd = new RollbackUpdateCommand(req);\n\n            processor.processRollback(cmd);\n          } // end rollback\n          else if (XmlUpdateRequestHandler.DELETE.equals(currTag)) {\n            XmlUpdateRequestHandler.log.trace(\"parsing delete\");\n            processDelete(req, processor, parser);\n          } // end delete\n          break;\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * @since solr 1.2\n   */\n  void processUpdate(SolrQueryRequest req, UpdateRequestProcessor processor, XMLStreamReader parser)\n          throws XMLStreamException, IOException, FactoryConfigurationError,\n          InstantiationException, IllegalAccessException,\n          TransformerConfigurationException {\n    AddUpdateCommand addCmd = null;\n    while (true) {\n      int event = parser.next();\n      switch (event) {\n        case XMLStreamConstants.END_DOCUMENT:\n          parser.close();\n          return;\n\n        case XMLStreamConstants.START_ELEMENT:\n          String currTag = parser.getLocalName();\n          if (currTag.equals(XmlUpdateRequestHandler.ADD)) {\n            XmlUpdateRequestHandler.log.trace(\"SolrCore.update(add)\");\n\n            addCmd = new AddUpdateCommand(req);\n\n            for (int i = 0; i < parser.getAttributeCount(); i++) {\n              String attrName = parser.getAttributeLocalName(i);\n              String attrVal = parser.getAttributeValue(i);\n              if (XmlUpdateRequestHandler.OVERWRITE.equals(attrName)) {\n                addCmd.overwrite = StrUtils.parseBoolean(attrVal);\n              } else if (XmlUpdateRequestHandler.COMMIT_WITHIN.equals(attrName)) {\n                addCmd.commitWithin = Integer.parseInt(attrVal);\n              } else {\n                XmlUpdateRequestHandler.log.warn(\"Unknown attribute id in add:\" + attrName);\n              }\n            }\n\n          } else if (\"doc\".equals(currTag)) {\n            XmlUpdateRequestHandler.log.trace(\"adding doc...\");\n            addCmd.clear();\n            addCmd.solrDoc = readDoc(parser);\n            processor.processAdd(addCmd);\n          } else if (XmlUpdateRequestHandler.COMMIT.equals(currTag) || XmlUpdateRequestHandler.OPTIMIZE.equals(currTag)) {\n            XmlUpdateRequestHandler.log.trace(\"parsing \" + currTag);\n\n            CommitUpdateCommand cmd = new CommitUpdateCommand(req, XmlUpdateRequestHandler.OPTIMIZE.equals(currTag));\n\n            boolean sawWaitSearcher = false, sawWaitFlush = false;\n            for (int i = 0; i < parser.getAttributeCount(); i++) {\n              String attrName = parser.getAttributeLocalName(i);\n              String attrVal = parser.getAttributeValue(i);\n              if (XmlUpdateRequestHandler.WAIT_FLUSH.equals(attrName)) {\n                cmd.waitFlush = StrUtils.parseBoolean(attrVal);\n                sawWaitFlush = true;\n              } else if (XmlUpdateRequestHandler.WAIT_SEARCHER.equals(attrName)) {\n                cmd.waitSearcher = StrUtils.parseBoolean(attrVal);\n                sawWaitSearcher = true;\n              } else if (UpdateParams.MAX_OPTIMIZE_SEGMENTS.equals(attrName)) {\n                cmd.maxOptimizeSegments = Integer.parseInt(attrVal);\n              } else if (UpdateParams.EXPUNGE_DELETES.equals(attrName)) {\n                cmd.expungeDeletes = StrUtils.parseBoolean(attrVal);\n              } else {\n                XmlUpdateRequestHandler.log.warn(\"unexpected attribute commit/@\" + attrName);\n              }\n            }\n\n            // If waitFlush is specified and waitSearcher wasn't, then\n            // clear waitSearcher.\n            if (sawWaitFlush && !sawWaitSearcher) {\n              cmd.waitSearcher = false;\n            }\n            processor.processCommit(cmd);\n          } // end commit\n          else if (XmlUpdateRequestHandler.ROLLBACK.equals(currTag)) {\n            XmlUpdateRequestHandler.log.trace(\"parsing \" + currTag);\n\n            RollbackUpdateCommand cmd = new RollbackUpdateCommand(req);\n\n            processor.processRollback(cmd);\n          } // end rollback\n          else if (XmlUpdateRequestHandler.DELETE.equals(currTag)) {\n            XmlUpdateRequestHandler.log.trace(\"parsing delete\");\n            processDelete(req, processor, parser);\n          } // end delete\n          break;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/XMLLoader#processUpdate(SolrQueryRequest,UpdateRequestProcessor,XMLStreamReader).mjava","pathOld":"solr/src/java/org/apache/solr/handler/XMLLoader#processUpdate(SolrQueryRequest,UpdateRequestProcessor,XMLStreamReader).mjava","sourceNew":"  /**\n   * @since solr 1.2\n   */\n  void processUpdate(SolrQueryRequest req, UpdateRequestProcessor processor, XMLStreamReader parser)\n          throws XMLStreamException, IOException, FactoryConfigurationError,\n          InstantiationException, IllegalAccessException,\n          TransformerConfigurationException {\n    AddUpdateCommand addCmd = null;\n    while (true) {\n      int event = parser.next();\n      switch (event) {\n        case XMLStreamConstants.END_DOCUMENT:\n          parser.close();\n          return;\n\n        case XMLStreamConstants.START_ELEMENT:\n          String currTag = parser.getLocalName();\n          if (currTag.equals(XmlUpdateRequestHandler.ADD)) {\n            XmlUpdateRequestHandler.log.trace(\"SolrCore.update(add)\");\n\n            addCmd = new AddUpdateCommand(req);\n\n            for (int i = 0; i < parser.getAttributeCount(); i++) {\n              String attrName = parser.getAttributeLocalName(i);\n              String attrVal = parser.getAttributeValue(i);\n              if (XmlUpdateRequestHandler.OVERWRITE.equals(attrName)) {\n                addCmd.overwrite = StrUtils.parseBoolean(attrVal);\n              } else if (XmlUpdateRequestHandler.COMMIT_WITHIN.equals(attrName)) {\n                addCmd.commitWithin = Integer.parseInt(attrVal);\n              } else {\n                XmlUpdateRequestHandler.log.warn(\"Unknown attribute id in add:\" + attrName);\n              }\n            }\n\n          } else if (\"doc\".equals(currTag)) {\n            XmlUpdateRequestHandler.log.trace(\"adding doc...\");\n            addCmd.clear();\n            addCmd.solrDoc = readDoc(parser);\n            processor.processAdd(addCmd);\n          } else if (XmlUpdateRequestHandler.COMMIT.equals(currTag) || XmlUpdateRequestHandler.OPTIMIZE.equals(currTag)) {\n            XmlUpdateRequestHandler.log.trace(\"parsing \" + currTag);\n\n            CommitUpdateCommand cmd = new CommitUpdateCommand(req, XmlUpdateRequestHandler.OPTIMIZE.equals(currTag));\n\n            for (int i = 0; i < parser.getAttributeCount(); i++) {\n              String attrName = parser.getAttributeLocalName(i);\n              String attrVal = parser.getAttributeValue(i);\n              if (XmlUpdateRequestHandler.WAIT_SEARCHER.equals(attrName)) {\n                cmd.waitSearcher = StrUtils.parseBoolean(attrVal);\n              } else if (XmlUpdateRequestHandler.SOFT_COMMIT.equals(attrName)) {\n                cmd.softCommit = StrUtils.parseBoolean(attrVal);\n              } else if (UpdateParams.MAX_OPTIMIZE_SEGMENTS.equals(attrName)) {\n                cmd.maxOptimizeSegments = Integer.parseInt(attrVal);\n              } else if (UpdateParams.EXPUNGE_DELETES.equals(attrName)) {\n                cmd.expungeDeletes = StrUtils.parseBoolean(attrVal);\n              } else {\n                XmlUpdateRequestHandler.log.warn(\"unexpected attribute commit/@\" + attrName);\n              }\n            }\n\n            processor.processCommit(cmd);\n          } // end commit\n          else if (XmlUpdateRequestHandler.ROLLBACK.equals(currTag)) {\n            XmlUpdateRequestHandler.log.trace(\"parsing \" + currTag);\n\n            RollbackUpdateCommand cmd = new RollbackUpdateCommand(req);\n\n            processor.processRollback(cmd);\n          } // end rollback\n          else if (XmlUpdateRequestHandler.DELETE.equals(currTag)) {\n            XmlUpdateRequestHandler.log.trace(\"parsing delete\");\n            processDelete(req, processor, parser);\n          } // end delete\n          break;\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * @since solr 1.2\n   */\n  void processUpdate(SolrQueryRequest req, UpdateRequestProcessor processor, XMLStreamReader parser)\n          throws XMLStreamException, IOException, FactoryConfigurationError,\n          InstantiationException, IllegalAccessException,\n          TransformerConfigurationException {\n    AddUpdateCommand addCmd = null;\n    while (true) {\n      int event = parser.next();\n      switch (event) {\n        case XMLStreamConstants.END_DOCUMENT:\n          parser.close();\n          return;\n\n        case XMLStreamConstants.START_ELEMENT:\n          String currTag = parser.getLocalName();\n          if (currTag.equals(XmlUpdateRequestHandler.ADD)) {\n            XmlUpdateRequestHandler.log.trace(\"SolrCore.update(add)\");\n\n            addCmd = new AddUpdateCommand(req);\n\n            for (int i = 0; i < parser.getAttributeCount(); i++) {\n              String attrName = parser.getAttributeLocalName(i);\n              String attrVal = parser.getAttributeValue(i);\n              if (XmlUpdateRequestHandler.OVERWRITE.equals(attrName)) {\n                addCmd.overwrite = StrUtils.parseBoolean(attrVal);\n              } else if (XmlUpdateRequestHandler.COMMIT_WITHIN.equals(attrName)) {\n                addCmd.commitWithin = Integer.parseInt(attrVal);\n              } else {\n                XmlUpdateRequestHandler.log.warn(\"Unknown attribute id in add:\" + attrName);\n              }\n            }\n\n          } else if (\"doc\".equals(currTag)) {\n            XmlUpdateRequestHandler.log.trace(\"adding doc...\");\n            addCmd.clear();\n            addCmd.solrDoc = readDoc(parser);\n            processor.processAdd(addCmd);\n          } else if (XmlUpdateRequestHandler.COMMIT.equals(currTag) || XmlUpdateRequestHandler.OPTIMIZE.equals(currTag)) {\n            XmlUpdateRequestHandler.log.trace(\"parsing \" + currTag);\n\n            CommitUpdateCommand cmd = new CommitUpdateCommand(req, XmlUpdateRequestHandler.OPTIMIZE.equals(currTag));\n\n            boolean sawWaitSearcher = false, sawWaitFlush = false;\n            for (int i = 0; i < parser.getAttributeCount(); i++) {\n              String attrName = parser.getAttributeLocalName(i);\n              String attrVal = parser.getAttributeValue(i);\n              if (XmlUpdateRequestHandler.WAIT_FLUSH.equals(attrName)) {\n                cmd.waitFlush = StrUtils.parseBoolean(attrVal);\n                sawWaitFlush = true;\n              } else if (XmlUpdateRequestHandler.WAIT_SEARCHER.equals(attrName)) {\n                cmd.waitSearcher = StrUtils.parseBoolean(attrVal);\n                sawWaitSearcher = true;\n              } else if (UpdateParams.MAX_OPTIMIZE_SEGMENTS.equals(attrName)) {\n                cmd.maxOptimizeSegments = Integer.parseInt(attrVal);\n              } else if (UpdateParams.EXPUNGE_DELETES.equals(attrName)) {\n                cmd.expungeDeletes = StrUtils.parseBoolean(attrVal);\n              } else {\n                XmlUpdateRequestHandler.log.warn(\"unexpected attribute commit/@\" + attrName);\n              }\n            }\n\n            // If waitFlush is specified and waitSearcher wasn't, then\n            // clear waitSearcher.\n            if (sawWaitFlush && !sawWaitSearcher) {\n              cmd.waitSearcher = false;\n            }\n            processor.processCommit(cmd);\n          } // end commit\n          else if (XmlUpdateRequestHandler.ROLLBACK.equals(currTag)) {\n            XmlUpdateRequestHandler.log.trace(\"parsing \" + currTag);\n\n            RollbackUpdateCommand cmd = new RollbackUpdateCommand(req);\n\n            processor.processRollback(cmd);\n          } // end rollback\n          else if (XmlUpdateRequestHandler.DELETE.equals(currTag)) {\n            XmlUpdateRequestHandler.log.trace(\"parsing delete\");\n            processDelete(req, processor, parser);\n          } // end delete\n          break;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/XMLLoader#processUpdate(SolrQueryRequest,UpdateRequestProcessor,XMLStreamReader).mjava","pathOld":"solr/src/java/org/apache/solr/handler/XMLLoader#processUpdate(SolrQueryRequest,UpdateRequestProcessor,XMLStreamReader).mjava","sourceNew":"  /**\n   * @since solr 1.2\n   */\n  void processUpdate(SolrQueryRequest req, UpdateRequestProcessor processor, XMLStreamReader parser)\n          throws XMLStreamException, IOException, FactoryConfigurationError,\n          InstantiationException, IllegalAccessException,\n          TransformerConfigurationException {\n    AddUpdateCommand addCmd = null;\n    while (true) {\n      int event = parser.next();\n      switch (event) {\n        case XMLStreamConstants.END_DOCUMENT:\n          parser.close();\n          return;\n\n        case XMLStreamConstants.START_ELEMENT:\n          String currTag = parser.getLocalName();\n          if (currTag.equals(XmlUpdateRequestHandler.ADD)) {\n            XmlUpdateRequestHandler.log.trace(\"SolrCore.update(add)\");\n\n            addCmd = new AddUpdateCommand(req);\n\n            for (int i = 0; i < parser.getAttributeCount(); i++) {\n              String attrName = parser.getAttributeLocalName(i);\n              String attrVal = parser.getAttributeValue(i);\n              if (XmlUpdateRequestHandler.OVERWRITE.equals(attrName)) {\n                addCmd.overwrite = StrUtils.parseBoolean(attrVal);\n              } else if (XmlUpdateRequestHandler.COMMIT_WITHIN.equals(attrName)) {\n                addCmd.commitWithin = Integer.parseInt(attrVal);\n              } else {\n                XmlUpdateRequestHandler.log.warn(\"Unknown attribute id in add:\" + attrName);\n              }\n            }\n\n          } else if (\"doc\".equals(currTag)) {\n            XmlUpdateRequestHandler.log.trace(\"adding doc...\");\n            addCmd.clear();\n            addCmd.solrDoc = readDoc(parser);\n            processor.processAdd(addCmd);\n          } else if (XmlUpdateRequestHandler.COMMIT.equals(currTag) || XmlUpdateRequestHandler.OPTIMIZE.equals(currTag)) {\n            XmlUpdateRequestHandler.log.trace(\"parsing \" + currTag);\n\n            CommitUpdateCommand cmd = new CommitUpdateCommand(req, XmlUpdateRequestHandler.OPTIMIZE.equals(currTag));\n\n            for (int i = 0; i < parser.getAttributeCount(); i++) {\n              String attrName = parser.getAttributeLocalName(i);\n              String attrVal = parser.getAttributeValue(i);\n              if (XmlUpdateRequestHandler.WAIT_SEARCHER.equals(attrName)) {\n                cmd.waitSearcher = StrUtils.parseBoolean(attrVal);\n              } else if (XmlUpdateRequestHandler.SOFT_COMMIT.equals(attrName)) {\n                cmd.softCommit = StrUtils.parseBoolean(attrVal);\n              } else if (UpdateParams.MAX_OPTIMIZE_SEGMENTS.equals(attrName)) {\n                cmd.maxOptimizeSegments = Integer.parseInt(attrVal);\n              } else if (UpdateParams.EXPUNGE_DELETES.equals(attrName)) {\n                cmd.expungeDeletes = StrUtils.parseBoolean(attrVal);\n              } else {\n                XmlUpdateRequestHandler.log.warn(\"unexpected attribute commit/@\" + attrName);\n              }\n            }\n\n            processor.processCommit(cmd);\n          } // end commit\n          else if (XmlUpdateRequestHandler.ROLLBACK.equals(currTag)) {\n            XmlUpdateRequestHandler.log.trace(\"parsing \" + currTag);\n\n            RollbackUpdateCommand cmd = new RollbackUpdateCommand(req);\n\n            processor.processRollback(cmd);\n          } // end rollback\n          else if (XmlUpdateRequestHandler.DELETE.equals(currTag)) {\n            XmlUpdateRequestHandler.log.trace(\"parsing delete\");\n            processDelete(req, processor, parser);\n          } // end delete\n          break;\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * @since solr 1.2\n   */\n  void processUpdate(SolrQueryRequest req, UpdateRequestProcessor processor, XMLStreamReader parser)\n          throws XMLStreamException, IOException, FactoryConfigurationError,\n          InstantiationException, IllegalAccessException,\n          TransformerConfigurationException {\n    AddUpdateCommand addCmd = null;\n    while (true) {\n      int event = parser.next();\n      switch (event) {\n        case XMLStreamConstants.END_DOCUMENT:\n          parser.close();\n          return;\n\n        case XMLStreamConstants.START_ELEMENT:\n          String currTag = parser.getLocalName();\n          if (currTag.equals(XmlUpdateRequestHandler.ADD)) {\n            XmlUpdateRequestHandler.log.trace(\"SolrCore.update(add)\");\n\n            addCmd = new AddUpdateCommand(req);\n\n            for (int i = 0; i < parser.getAttributeCount(); i++) {\n              String attrName = parser.getAttributeLocalName(i);\n              String attrVal = parser.getAttributeValue(i);\n              if (XmlUpdateRequestHandler.OVERWRITE.equals(attrName)) {\n                addCmd.overwrite = StrUtils.parseBoolean(attrVal);\n              } else if (XmlUpdateRequestHandler.COMMIT_WITHIN.equals(attrName)) {\n                addCmd.commitWithin = Integer.parseInt(attrVal);\n              } else {\n                XmlUpdateRequestHandler.log.warn(\"Unknown attribute id in add:\" + attrName);\n              }\n            }\n\n          } else if (\"doc\".equals(currTag)) {\n            XmlUpdateRequestHandler.log.trace(\"adding doc...\");\n            addCmd.clear();\n            addCmd.solrDoc = readDoc(parser);\n            processor.processAdd(addCmd);\n          } else if (XmlUpdateRequestHandler.COMMIT.equals(currTag) || XmlUpdateRequestHandler.OPTIMIZE.equals(currTag)) {\n            XmlUpdateRequestHandler.log.trace(\"parsing \" + currTag);\n\n            CommitUpdateCommand cmd = new CommitUpdateCommand(req, XmlUpdateRequestHandler.OPTIMIZE.equals(currTag));\n\n            for (int i = 0; i < parser.getAttributeCount(); i++) {\n              String attrName = parser.getAttributeLocalName(i);\n              String attrVal = parser.getAttributeValue(i);\n              if (XmlUpdateRequestHandler.WAIT_SEARCHER.equals(attrName)) {\n                cmd.waitSearcher = StrUtils.parseBoolean(attrVal);\n              } else if (XmlUpdateRequestHandler.SOFT_COMMIT.equals(attrName)) {\n                cmd.softCommit = StrUtils.parseBoolean(attrVal);\n              } else if (UpdateParams.MAX_OPTIMIZE_SEGMENTS.equals(attrName)) {\n                cmd.maxOptimizeSegments = Integer.parseInt(attrVal);\n              } else if (UpdateParams.EXPUNGE_DELETES.equals(attrName)) {\n                cmd.expungeDeletes = StrUtils.parseBoolean(attrVal);\n              } else {\n                XmlUpdateRequestHandler.log.warn(\"unexpected attribute commit/@\" + attrName);\n              }\n            }\n\n            processor.processCommit(cmd);\n          } // end commit\n          else if (XmlUpdateRequestHandler.ROLLBACK.equals(currTag)) {\n            XmlUpdateRequestHandler.log.trace(\"parsing \" + currTag);\n\n            RollbackUpdateCommand cmd = new RollbackUpdateCommand(req);\n\n            processor.processRollback(cmd);\n          } // end rollback\n          else if (XmlUpdateRequestHandler.DELETE.equals(currTag)) {\n            XmlUpdateRequestHandler.log.trace(\"parsing delete\");\n            processDelete(req, processor, parser);\n          } // end delete\n          break;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/XMLLoader#processUpdate(SolrQueryRequest,UpdateRequestProcessor,XMLStreamReader).mjava","pathOld":"solr/src/java/org/apache/solr/handler/XMLLoader#processUpdate(SolrQueryRequest,UpdateRequestProcessor,XMLStreamReader).mjava","sourceNew":"  /**\n   * @since solr 1.2\n   */\n  void processUpdate(SolrQueryRequest req, UpdateRequestProcessor processor, XMLStreamReader parser)\n          throws XMLStreamException, IOException, FactoryConfigurationError,\n          InstantiationException, IllegalAccessException,\n          TransformerConfigurationException {\n    AddUpdateCommand addCmd = null;\n    while (true) {\n      int event = parser.next();\n      switch (event) {\n        case XMLStreamConstants.END_DOCUMENT:\n          parser.close();\n          return;\n\n        case XMLStreamConstants.START_ELEMENT:\n          String currTag = parser.getLocalName();\n          if (currTag.equals(XmlUpdateRequestHandler.ADD)) {\n            XmlUpdateRequestHandler.log.trace(\"SolrCore.update(add)\");\n\n            addCmd = new AddUpdateCommand(req);\n\n            for (int i = 0; i < parser.getAttributeCount(); i++) {\n              String attrName = parser.getAttributeLocalName(i);\n              String attrVal = parser.getAttributeValue(i);\n              if (XmlUpdateRequestHandler.OVERWRITE.equals(attrName)) {\n                addCmd.overwrite = StrUtils.parseBoolean(attrVal);\n              } else if (XmlUpdateRequestHandler.COMMIT_WITHIN.equals(attrName)) {\n                addCmd.commitWithin = Integer.parseInt(attrVal);\n              } else {\n                XmlUpdateRequestHandler.log.warn(\"Unknown attribute id in add:\" + attrName);\n              }\n            }\n\n          } else if (\"doc\".equals(currTag)) {\n            XmlUpdateRequestHandler.log.trace(\"adding doc...\");\n            addCmd.clear();\n            addCmd.solrDoc = readDoc(parser);\n            processor.processAdd(addCmd);\n          } else if (XmlUpdateRequestHandler.COMMIT.equals(currTag) || XmlUpdateRequestHandler.OPTIMIZE.equals(currTag)) {\n            XmlUpdateRequestHandler.log.trace(\"parsing \" + currTag);\n\n            CommitUpdateCommand cmd = new CommitUpdateCommand(req, XmlUpdateRequestHandler.OPTIMIZE.equals(currTag));\n\n            for (int i = 0; i < parser.getAttributeCount(); i++) {\n              String attrName = parser.getAttributeLocalName(i);\n              String attrVal = parser.getAttributeValue(i);\n              if (XmlUpdateRequestHandler.WAIT_SEARCHER.equals(attrName)) {\n                cmd.waitSearcher = StrUtils.parseBoolean(attrVal);\n              } else if (XmlUpdateRequestHandler.SOFT_COMMIT.equals(attrName)) {\n                cmd.softCommit = StrUtils.parseBoolean(attrVal);\n              } else if (UpdateParams.MAX_OPTIMIZE_SEGMENTS.equals(attrName)) {\n                cmd.maxOptimizeSegments = Integer.parseInt(attrVal);\n              } else if (UpdateParams.EXPUNGE_DELETES.equals(attrName)) {\n                cmd.expungeDeletes = StrUtils.parseBoolean(attrVal);\n              } else {\n                XmlUpdateRequestHandler.log.warn(\"unexpected attribute commit/@\" + attrName);\n              }\n            }\n\n            processor.processCommit(cmd);\n          } // end commit\n          else if (XmlUpdateRequestHandler.ROLLBACK.equals(currTag)) {\n            XmlUpdateRequestHandler.log.trace(\"parsing \" + currTag);\n\n            RollbackUpdateCommand cmd = new RollbackUpdateCommand(req);\n\n            processor.processRollback(cmd);\n          } // end rollback\n          else if (XmlUpdateRequestHandler.DELETE.equals(currTag)) {\n            XmlUpdateRequestHandler.log.trace(\"parsing delete\");\n            processDelete(req, processor, parser);\n          } // end delete\n          break;\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * @since solr 1.2\n   */\n  void processUpdate(SolrQueryRequest req, UpdateRequestProcessor processor, XMLStreamReader parser)\n          throws XMLStreamException, IOException, FactoryConfigurationError,\n          InstantiationException, IllegalAccessException,\n          TransformerConfigurationException {\n    AddUpdateCommand addCmd = null;\n    while (true) {\n      int event = parser.next();\n      switch (event) {\n        case XMLStreamConstants.END_DOCUMENT:\n          parser.close();\n          return;\n\n        case XMLStreamConstants.START_ELEMENT:\n          String currTag = parser.getLocalName();\n          if (currTag.equals(XmlUpdateRequestHandler.ADD)) {\n            XmlUpdateRequestHandler.log.trace(\"SolrCore.update(add)\");\n\n            addCmd = new AddUpdateCommand(req);\n\n            for (int i = 0; i < parser.getAttributeCount(); i++) {\n              String attrName = parser.getAttributeLocalName(i);\n              String attrVal = parser.getAttributeValue(i);\n              if (XmlUpdateRequestHandler.OVERWRITE.equals(attrName)) {\n                addCmd.overwrite = StrUtils.parseBoolean(attrVal);\n              } else if (XmlUpdateRequestHandler.COMMIT_WITHIN.equals(attrName)) {\n                addCmd.commitWithin = Integer.parseInt(attrVal);\n              } else {\n                XmlUpdateRequestHandler.log.warn(\"Unknown attribute id in add:\" + attrName);\n              }\n            }\n\n          } else if (\"doc\".equals(currTag)) {\n            XmlUpdateRequestHandler.log.trace(\"adding doc...\");\n            addCmd.clear();\n            addCmd.solrDoc = readDoc(parser);\n            processor.processAdd(addCmd);\n          } else if (XmlUpdateRequestHandler.COMMIT.equals(currTag) || XmlUpdateRequestHandler.OPTIMIZE.equals(currTag)) {\n            XmlUpdateRequestHandler.log.trace(\"parsing \" + currTag);\n\n            CommitUpdateCommand cmd = new CommitUpdateCommand(req, XmlUpdateRequestHandler.OPTIMIZE.equals(currTag));\n\n            for (int i = 0; i < parser.getAttributeCount(); i++) {\n              String attrName = parser.getAttributeLocalName(i);\n              String attrVal = parser.getAttributeValue(i);\n              if (XmlUpdateRequestHandler.WAIT_SEARCHER.equals(attrName)) {\n                cmd.waitSearcher = StrUtils.parseBoolean(attrVal);\n              } else if (XmlUpdateRequestHandler.SOFT_COMMIT.equals(attrName)) {\n                cmd.softCommit = StrUtils.parseBoolean(attrVal);\n              } else if (UpdateParams.MAX_OPTIMIZE_SEGMENTS.equals(attrName)) {\n                cmd.maxOptimizeSegments = Integer.parseInt(attrVal);\n              } else if (UpdateParams.EXPUNGE_DELETES.equals(attrName)) {\n                cmd.expungeDeletes = StrUtils.parseBoolean(attrVal);\n              } else {\n                XmlUpdateRequestHandler.log.warn(\"unexpected attribute commit/@\" + attrName);\n              }\n            }\n\n            processor.processCommit(cmd);\n          } // end commit\n          else if (XmlUpdateRequestHandler.ROLLBACK.equals(currTag)) {\n            XmlUpdateRequestHandler.log.trace(\"parsing \" + currTag);\n\n            RollbackUpdateCommand cmd = new RollbackUpdateCommand(req);\n\n            processor.processRollback(cmd);\n          } // end rollback\n          else if (XmlUpdateRequestHandler.DELETE.equals(currTag)) {\n            XmlUpdateRequestHandler.log.trace(\"parsing delete\");\n            processDelete(req, processor, parser);\n          } // end delete\n          break;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/XMLLoader#processUpdate(SolrQueryRequest,UpdateRequestProcessor,XMLStreamReader).mjava","pathOld":"solr/src/java/org/apache/solr/handler/XMLLoader#processUpdate(SolrQueryRequest,UpdateRequestProcessor,XMLStreamReader).mjava","sourceNew":"  /**\n   * @since solr 1.2\n   */\n  void processUpdate(SolrQueryRequest req, UpdateRequestProcessor processor, XMLStreamReader parser)\n          throws XMLStreamException, IOException, FactoryConfigurationError,\n          InstantiationException, IllegalAccessException,\n          TransformerConfigurationException {\n    AddUpdateCommand addCmd = null;\n    while (true) {\n      int event = parser.next();\n      switch (event) {\n        case XMLStreamConstants.END_DOCUMENT:\n          parser.close();\n          return;\n\n        case XMLStreamConstants.START_ELEMENT:\n          String currTag = parser.getLocalName();\n          if (currTag.equals(XmlUpdateRequestHandler.ADD)) {\n            XmlUpdateRequestHandler.log.trace(\"SolrCore.update(add)\");\n\n            addCmd = new AddUpdateCommand(req);\n\n            for (int i = 0; i < parser.getAttributeCount(); i++) {\n              String attrName = parser.getAttributeLocalName(i);\n              String attrVal = parser.getAttributeValue(i);\n              if (XmlUpdateRequestHandler.OVERWRITE.equals(attrName)) {\n                addCmd.overwrite = StrUtils.parseBoolean(attrVal);\n              } else if (XmlUpdateRequestHandler.COMMIT_WITHIN.equals(attrName)) {\n                addCmd.commitWithin = Integer.parseInt(attrVal);\n              } else {\n                XmlUpdateRequestHandler.log.warn(\"Unknown attribute id in add:\" + attrName);\n              }\n            }\n\n          } else if (\"doc\".equals(currTag)) {\n            XmlUpdateRequestHandler.log.trace(\"adding doc...\");\n            addCmd.clear();\n            addCmd.solrDoc = readDoc(parser);\n            processor.processAdd(addCmd);\n          } else if (XmlUpdateRequestHandler.COMMIT.equals(currTag) || XmlUpdateRequestHandler.OPTIMIZE.equals(currTag)) {\n            XmlUpdateRequestHandler.log.trace(\"parsing \" + currTag);\n\n            CommitUpdateCommand cmd = new CommitUpdateCommand(req, XmlUpdateRequestHandler.OPTIMIZE.equals(currTag));\n\n            for (int i = 0; i < parser.getAttributeCount(); i++) {\n              String attrName = parser.getAttributeLocalName(i);\n              String attrVal = parser.getAttributeValue(i);\n              if (XmlUpdateRequestHandler.WAIT_SEARCHER.equals(attrName)) {\n                cmd.waitSearcher = StrUtils.parseBoolean(attrVal);\n              } else if (XmlUpdateRequestHandler.SOFT_COMMIT.equals(attrName)) {\n                cmd.softCommit = StrUtils.parseBoolean(attrVal);\n              } else if (UpdateParams.MAX_OPTIMIZE_SEGMENTS.equals(attrName)) {\n                cmd.maxOptimizeSegments = Integer.parseInt(attrVal);\n              } else if (UpdateParams.EXPUNGE_DELETES.equals(attrName)) {\n                cmd.expungeDeletes = StrUtils.parseBoolean(attrVal);\n              } else {\n                XmlUpdateRequestHandler.log.warn(\"unexpected attribute commit/@\" + attrName);\n              }\n            }\n\n            processor.processCommit(cmd);\n          } // end commit\n          else if (XmlUpdateRequestHandler.ROLLBACK.equals(currTag)) {\n            XmlUpdateRequestHandler.log.trace(\"parsing \" + currTag);\n\n            RollbackUpdateCommand cmd = new RollbackUpdateCommand(req);\n\n            processor.processRollback(cmd);\n          } // end rollback\n          else if (XmlUpdateRequestHandler.DELETE.equals(currTag)) {\n            XmlUpdateRequestHandler.log.trace(\"parsing delete\");\n            processDelete(req, processor, parser);\n          } // end delete\n          break;\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * @since solr 1.2\n   */\n  void processUpdate(SolrQueryRequest req, UpdateRequestProcessor processor, XMLStreamReader parser)\n          throws XMLStreamException, IOException, FactoryConfigurationError,\n          InstantiationException, IllegalAccessException,\n          TransformerConfigurationException {\n    AddUpdateCommand addCmd = null;\n    while (true) {\n      int event = parser.next();\n      switch (event) {\n        case XMLStreamConstants.END_DOCUMENT:\n          parser.close();\n          return;\n\n        case XMLStreamConstants.START_ELEMENT:\n          String currTag = parser.getLocalName();\n          if (currTag.equals(XmlUpdateRequestHandler.ADD)) {\n            XmlUpdateRequestHandler.log.trace(\"SolrCore.update(add)\");\n\n            addCmd = new AddUpdateCommand(req);\n\n            for (int i = 0; i < parser.getAttributeCount(); i++) {\n              String attrName = parser.getAttributeLocalName(i);\n              String attrVal = parser.getAttributeValue(i);\n              if (XmlUpdateRequestHandler.OVERWRITE.equals(attrName)) {\n                addCmd.overwrite = StrUtils.parseBoolean(attrVal);\n              } else if (XmlUpdateRequestHandler.COMMIT_WITHIN.equals(attrName)) {\n                addCmd.commitWithin = Integer.parseInt(attrVal);\n              } else {\n                XmlUpdateRequestHandler.log.warn(\"Unknown attribute id in add:\" + attrName);\n              }\n            }\n\n          } else if (\"doc\".equals(currTag)) {\n            XmlUpdateRequestHandler.log.trace(\"adding doc...\");\n            addCmd.clear();\n            addCmd.solrDoc = readDoc(parser);\n            processor.processAdd(addCmd);\n          } else if (XmlUpdateRequestHandler.COMMIT.equals(currTag) || XmlUpdateRequestHandler.OPTIMIZE.equals(currTag)) {\n            XmlUpdateRequestHandler.log.trace(\"parsing \" + currTag);\n\n            CommitUpdateCommand cmd = new CommitUpdateCommand(req, XmlUpdateRequestHandler.OPTIMIZE.equals(currTag));\n\n            for (int i = 0; i < parser.getAttributeCount(); i++) {\n              String attrName = parser.getAttributeLocalName(i);\n              String attrVal = parser.getAttributeValue(i);\n              if (XmlUpdateRequestHandler.WAIT_SEARCHER.equals(attrName)) {\n                cmd.waitSearcher = StrUtils.parseBoolean(attrVal);\n              } else if (XmlUpdateRequestHandler.SOFT_COMMIT.equals(attrName)) {\n                cmd.softCommit = StrUtils.parseBoolean(attrVal);\n              } else if (UpdateParams.MAX_OPTIMIZE_SEGMENTS.equals(attrName)) {\n                cmd.maxOptimizeSegments = Integer.parseInt(attrVal);\n              } else if (UpdateParams.EXPUNGE_DELETES.equals(attrName)) {\n                cmd.expungeDeletes = StrUtils.parseBoolean(attrVal);\n              } else {\n                XmlUpdateRequestHandler.log.warn(\"unexpected attribute commit/@\" + attrName);\n              }\n            }\n\n            processor.processCommit(cmd);\n          } // end commit\n          else if (XmlUpdateRequestHandler.ROLLBACK.equals(currTag)) {\n            XmlUpdateRequestHandler.log.trace(\"parsing \" + currTag);\n\n            RollbackUpdateCommand cmd = new RollbackUpdateCommand(req);\n\n            processor.processRollback(cmd);\n          } // end rollback\n          else if (XmlUpdateRequestHandler.DELETE.equals(currTag)) {\n            XmlUpdateRequestHandler.log.trace(\"parsing delete\");\n            processDelete(req, processor, parser);\n          } // end delete\n          break;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5ae62bcdfd4a0689a745ab1d38c6bd1c7c390cfa"],"ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5ae62bcdfd4a0689a745ab1d38c6bd1c7c390cfa"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["817d8435e9135b756f08ce6710ab0baac51bdf88"],"c26f00b574427b55127e869b935845554afde1fa":["7a71a0b2d4be2299a163f60626729852d81a8e02","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["7a71a0b2d4be2299a163f60626729852d81a8e02"],"5ae62bcdfd4a0689a745ab1d38c6bd1c7c390cfa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["5ae62bcdfd4a0689a745ab1d38c6bd1c7c390cfa","7a71a0b2d4be2299a163f60626729852d81a8e02"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["5ae62bcdfd4a0689a745ab1d38c6bd1c7c390cfa","7a71a0b2d4be2299a163f60626729852d81a8e02"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"],"7a71a0b2d4be2299a163f60626729852d81a8e02":["5ae62bcdfd4a0689a745ab1d38c6bd1c7c390cfa"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":[],"ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["70ad682703b8585f5d0a637efec044d57ec05efb","ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c","5ae62bcdfd4a0689a745ab1d38c6bd1c7c390cfa"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"5ae62bcdfd4a0689a745ab1d38c6bd1c7c390cfa":["70ad682703b8585f5d0a637efec044d57ec05efb","ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","7a71a0b2d4be2299a163f60626729852d81a8e02"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"817d8435e9135b756f08ce6710ab0baac51bdf88":["c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"7a71a0b2d4be2299a163f60626729852d81a8e02":["c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["70ad682703b8585f5d0a637efec044d57ec05efb","ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c","a258fbb26824fd104ed795e5d9033d2d040049ee","d083e83f225b11e5fdd900e83d26ddb385b6955c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}