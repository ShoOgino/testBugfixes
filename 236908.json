{"path":"solr/core/src/test/org/apache/solr/search/function/TestMinMaxOnMultiValuedField#testSortMissingMinMax(String,Object...).mjava","commits":[{"id":"4cf2282b6a7c3f113e7a233b785b80527c03d590","date":1516129064,"type":0,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/function/TestMinMaxOnMultiValuedField#testSortMissingMinMax(String,Object...).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Given a <code>fieldPrefix</code> and a list of sorted values which may <em>not</em> contain null, this method tests that sortMissingLast and sortMissingFirst fields using those prefixes sort correctly when {@link #buildMultiValueSortedDocuments} is used to generate documents containing these values <em>and</em> an additional document with no values in the field.\n   *\n   * <p>\n   * Permutations tested:\n   * </p>\n   * <ul>\n   *  <li><code>fieldPrefix</code> + <code>\"_missf_s_dv\"</code> asc</li>\n   *  <li><code>fieldPrefix</code> + <code>\"_missf_s_dv\"</code> desc</li>\n   *  <li><code>fieldPrefix</code> + <code>\"_missl_s_dv\"</code> asc</li>\n   *  <li><code>fieldPrefix</code> + <code>\"_missl_s_dv\"</code> desc</li>\n   * </ul>\n   *\n   * @see #buildMultiValueSortedDocuments\n   * @see #testExpectedSortOrdering(String,List)\n   */\n  private void testSortMissingMinMax(final String fieldPrefix,\n                                     Object... sortedValues) {\n\n    for (Object obj : sortedValues) { // sanity check\n      assertNotNull(\"this helper method can't be used with 'null' values\", obj);\n    }\n    \n    for (String suffix : Arrays.asList(\"_missf_s_dv\", \"_missl_s_dv\")) {\n\n      final String f = fieldPrefix + suffix;\n      final boolean first = f.contains(\"missf\");\n    \n      final List<Object> asc_vals = new ArrayList<>(sortedValues.length + 1);\n      Collections.addAll(asc_vals, sortedValues);\n      final List<Object> desc_vals = new ArrayList<>(sortedValues.length + 1);\n      Collections.addAll(desc_vals, sortedValues);\n      Collections.reverse(desc_vals);\n      \n      asc_vals.add(first ? 0 : sortedValues.length, null);\n      desc_vals.add(first ? 0 : sortedValues.length, null);\n      \n      testExpectedSortOrdering(f + \" asc\", buildMultiValueSortedDocuments(f, asc_vals));\n      testExpectedSortOrdering(f + \" desc\", buildMultiValueSortedDocuments(f, desc_vals));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/function/TestMinMaxOnMultiValuedField#testSortMissingMinMax(String,Object...).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Given a <code>fieldPrefix</code> and a list of sorted values which may <em>not</em> contain null, this method tests that sortMissingLast and sortMissingFirst fields using those prefixes sort correctly when {@link #buildMultiValueSortedDocuments} is used to generate documents containing these values <em>and</em> an additional document with no values in the field.\n   *\n   * <p>\n   * Permutations tested:\n   * </p>\n   * <ul>\n   *  <li><code>fieldPrefix</code> + <code>\"_missf_s_dv\"</code> asc</li>\n   *  <li><code>fieldPrefix</code> + <code>\"_missf_s_dv\"</code> desc</li>\n   *  <li><code>fieldPrefix</code> + <code>\"_missl_s_dv\"</code> asc</li>\n   *  <li><code>fieldPrefix</code> + <code>\"_missl_s_dv\"</code> desc</li>\n   * </ul>\n   *\n   * @see #buildMultiValueSortedDocuments\n   * @see #testExpectedSortOrdering(String,List)\n   */\n  private void testSortMissingMinMax(final String fieldPrefix,\n                                     Object... sortedValues) {\n\n    for (Object obj : sortedValues) { // sanity check\n      assertNotNull(\"this helper method can't be used with 'null' values\", obj);\n    }\n    \n    for (String suffix : Arrays.asList(\"_missf_s_dv\", \"_missl_s_dv\")) {\n\n      final String f = fieldPrefix + suffix;\n      final boolean first = f.contains(\"missf\");\n    \n      final List<Object> asc_vals = new ArrayList<>(sortedValues.length + 1);\n      Collections.addAll(asc_vals, sortedValues);\n      final List<Object> desc_vals = new ArrayList<>(sortedValues.length + 1);\n      Collections.addAll(desc_vals, sortedValues);\n      Collections.reverse(desc_vals);\n      \n      asc_vals.add(first ? 0 : sortedValues.length, null);\n      desc_vals.add(first ? 0 : sortedValues.length, null);\n      \n      testExpectedSortOrdering(f + \" asc\", buildMultiValueSortedDocuments(f, asc_vals));\n      testExpectedSortOrdering(f + \" desc\", buildMultiValueSortedDocuments(f, desc_vals));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4cf2282b6a7c3f113e7a233b785b80527c03d590"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cf2282b6a7c3f113e7a233b785b80527c03d590":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b94236357aaa22b76c10629851fe4e376e0cea82"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b94236357aaa22b76c10629851fe4e376e0cea82","4cf2282b6a7c3f113e7a233b785b80527c03d590"],"4cf2282b6a7c3f113e7a233b785b80527c03d590":["b94236357aaa22b76c10629851fe4e376e0cea82"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}