{"path":"lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader#normValues(String).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader#normValues(String).mjava","pathOld":"lucene/contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader#normValues(String).mjava","sourceNew":"    @Override\n    public DocValues normValues(String field) throws IOException {\n      DocValues norms = cachedNormValues;\n      Similarity sim = getSimilarity();\n      if (!field.equals(cachedFieldName) || sim != cachedSimilarity) { // not cached?\n        Info info = getInfo(field);\n        int numTokens = info != null ? info.numTokens : 0;\n        int numOverlapTokens = info != null ? info.numOverlapTokens : 0;\n        float boost = info != null ? info.getBoost() : 1.0f; \n        FieldInvertState invertState = new FieldInvertState(field, 0, numTokens, numOverlapTokens, 0, boost);\n        Norm norm = new Norm();\n        sim.computeNorm(invertState, norm);\n        SingleValueSource singleByteSource = new SingleValueSource(norm);\n        norms = new MemoryIndexNormDocValues(singleByteSource);\n        // cache it for future reuse\n        cachedNormValues = norms;\n        cachedFieldName = field;\n        cachedSimilarity = sim;\n        if (DEBUG) System.err.println(\"MemoryIndexReader.norms: \" + field + \":\" + norm + \":\" + numTokens);\n      }\n      return norms;\n    }\n\n","sourceOld":"    @Override\n    public DocValues normValues(String field) throws IOException {\n      DocValues norms = cachedNormValues;\n      Similarity sim = getSimilarity();\n      if (!field.equals(cachedFieldName) || sim != cachedSimilarity) { // not cached?\n        Info info = getInfo(field);\n        int numTokens = info != null ? info.numTokens : 0;\n        int numOverlapTokens = info != null ? info.numOverlapTokens : 0;\n        float boost = info != null ? info.getBoost() : 1.0f; \n        FieldInvertState invertState = new FieldInvertState(field, 0, numTokens, numOverlapTokens, 0, boost);\n        Norm norm = new Norm();\n        sim.computeNorm(invertState, norm);\n        SingleValueSource singleByteSource = new SingleValueSource(norm);\n        norms = new MemoryIndexNormDocValues(singleByteSource);\n        // cache it for future reuse\n        cachedNormValues = norms;\n        cachedFieldName = field;\n        cachedSimilarity = sim;\n        if (DEBUG) System.err.println(\"MemoryIndexReader.norms: \" + field + \":\" + norm + \":\" + numTokens);\n      }\n      return norms;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader#normValues(String).mjava","pathOld":"lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader#normValues(String).mjava","sourceNew":"    @Override\n    public DocValues normValues(String field) {\n      DocValues norms = cachedNormValues;\n      Similarity sim = getSimilarity();\n      if (!field.equals(cachedFieldName) || sim != cachedSimilarity) { // not cached?\n        Info info = getInfo(field);\n        int numTokens = info != null ? info.numTokens : 0;\n        int numOverlapTokens = info != null ? info.numOverlapTokens : 0;\n        float boost = info != null ? info.getBoost() : 1.0f; \n        FieldInvertState invertState = new FieldInvertState(field, 0, numTokens, numOverlapTokens, 0, boost);\n        Norm norm = new Norm();\n        sim.computeNorm(invertState, norm);\n        SingleValueSource singleByteSource = new SingleValueSource(norm);\n        norms = new MemoryIndexNormDocValues(singleByteSource);\n        // cache it for future reuse\n        cachedNormValues = norms;\n        cachedFieldName = field;\n        cachedSimilarity = sim;\n        if (DEBUG) System.err.println(\"MemoryIndexReader.norms: \" + field + \":\" + norm + \":\" + numTokens);\n      }\n      return norms;\n    }\n\n","sourceOld":"    @Override\n    public DocValues normValues(String field) throws IOException {\n      DocValues norms = cachedNormValues;\n      Similarity sim = getSimilarity();\n      if (!field.equals(cachedFieldName) || sim != cachedSimilarity) { // not cached?\n        Info info = getInfo(field);\n        int numTokens = info != null ? info.numTokens : 0;\n        int numOverlapTokens = info != null ? info.numOverlapTokens : 0;\n        float boost = info != null ? info.getBoost() : 1.0f; \n        FieldInvertState invertState = new FieldInvertState(field, 0, numTokens, numOverlapTokens, 0, boost);\n        Norm norm = new Norm();\n        sim.computeNorm(invertState, norm);\n        SingleValueSource singleByteSource = new SingleValueSource(norm);\n        norms = new MemoryIndexNormDocValues(singleByteSource);\n        // cache it for future reuse\n        cachedNormValues = norms;\n        cachedFieldName = field;\n        cachedSimilarity = sim;\n        if (DEBUG) System.err.println(\"MemoryIndexReader.norms: \" + field + \":\" + norm + \":\" + numTokens);\n      }\n      return norms;\n    }\n\n","bugFix":["f6e3376a314fcc2b31bc46d399c2ff23552b78d6"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader#normValues(String).mjava","pathOld":"lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader#normValues(String).mjava","sourceNew":"    @Override\n    public DocValues normValues(String field) {\n      DocValues norms = cachedNormValues;\n      Similarity sim = getSimilarity();\n      if (!field.equals(cachedFieldName) || sim != cachedSimilarity) { // not cached?\n        Info info = getInfo(field);\n        int numTokens = info != null ? info.numTokens : 0;\n        int numOverlapTokens = info != null ? info.numOverlapTokens : 0;\n        float boost = info != null ? info.getBoost() : 1.0f; \n        FieldInvertState invertState = new FieldInvertState(field, 0, numTokens, numOverlapTokens, 0, boost);\n        Norm norm = new Norm();\n        sim.computeNorm(invertState, norm);\n        SingleValueSource singleByteSource = new SingleValueSource(norm);\n        norms = new MemoryIndexNormDocValues(singleByteSource);\n        // cache it for future reuse\n        cachedNormValues = norms;\n        cachedFieldName = field;\n        cachedSimilarity = sim;\n        if (DEBUG) System.err.println(\"MemoryIndexReader.norms: \" + field + \":\" + norm + \":\" + numTokens);\n      }\n      return norms;\n    }\n\n","sourceOld":"    @Override\n    public DocValues normValues(String field) throws IOException {\n      DocValues norms = cachedNormValues;\n      Similarity sim = getSimilarity();\n      if (!field.equals(cachedFieldName) || sim != cachedSimilarity) { // not cached?\n        Info info = getInfo(field);\n        int numTokens = info != null ? info.numTokens : 0;\n        int numOverlapTokens = info != null ? info.numOverlapTokens : 0;\n        float boost = info != null ? info.getBoost() : 1.0f; \n        FieldInvertState invertState = new FieldInvertState(field, 0, numTokens, numOverlapTokens, 0, boost);\n        Norm norm = new Norm();\n        sim.computeNorm(invertState, norm);\n        SingleValueSource singleByteSource = new SingleValueSource(norm);\n        norms = new MemoryIndexNormDocValues(singleByteSource);\n        // cache it for future reuse\n        cachedNormValues = norms;\n        cachedFieldName = field;\n        cachedSimilarity = sim;\n        if (DEBUG) System.err.println(\"MemoryIndexReader.norms: \" + field + \":\" + norm + \":\" + numTokens);\n      }\n      return norms;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30fd30bfbfa6b9e036bcd99c8339712e965d4a63","date":1351859294,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader#normValues(String).mjava","pathOld":"lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader#normValues(String).mjava","sourceNew":"    @Override\n    public DocValues normValues(String field) {\n      if (fieldInfos.get(field).omitsNorms())\n        return null;\n      DocValues norms = cachedNormValues;\n      Similarity sim = getSimilarity();\n      if (!field.equals(cachedFieldName) || sim != cachedSimilarity) { // not cached?\n        Info info = getInfo(field);\n        int numTokens = info != null ? info.numTokens : 0;\n        int numOverlapTokens = info != null ? info.numOverlapTokens : 0;\n        float boost = info != null ? info.getBoost() : 1.0f; \n        FieldInvertState invertState = new FieldInvertState(field, 0, numTokens, numOverlapTokens, 0, boost);\n        Norm norm = new Norm();\n        sim.computeNorm(invertState, norm);\n        SingleValueSource singleByteSource = new SingleValueSource(norm);\n        norms = new MemoryIndexNormDocValues(singleByteSource);\n        // cache it for future reuse\n        cachedNormValues = norms;\n        cachedFieldName = field;\n        cachedSimilarity = sim;\n        if (DEBUG) System.err.println(\"MemoryIndexReader.norms: \" + field + \":\" + norm + \":\" + numTokens);\n      }\n      return norms;\n    }\n\n","sourceOld":"    @Override\n    public DocValues normValues(String field) {\n      DocValues norms = cachedNormValues;\n      Similarity sim = getSimilarity();\n      if (!field.equals(cachedFieldName) || sim != cachedSimilarity) { // not cached?\n        Info info = getInfo(field);\n        int numTokens = info != null ? info.numTokens : 0;\n        int numOverlapTokens = info != null ? info.numOverlapTokens : 0;\n        float boost = info != null ? info.getBoost() : 1.0f; \n        FieldInvertState invertState = new FieldInvertState(field, 0, numTokens, numOverlapTokens, 0, boost);\n        Norm norm = new Norm();\n        sim.computeNorm(invertState, norm);\n        SingleValueSource singleByteSource = new SingleValueSource(norm);\n        norms = new MemoryIndexNormDocValues(singleByteSource);\n        // cache it for future reuse\n        cachedNormValues = norms;\n        cachedFieldName = field;\n        cachedSimilarity = sim;\n        if (DEBUG) System.err.println(\"MemoryIndexReader.norms: \" + field + \":\" + norm + \":\" + numTokens);\n      }\n      return norms;\n    }\n\n","bugFix":null,"bugIntro":["c683d1a97ecbc7aaa30ce150eeaef9a3fb38a123"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0837ab0472feecb3a54260729d845f839e1cbd72","date":1358283639,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader#normValues(String).mjava","sourceNew":null,"sourceOld":"    @Override\n    public DocValues normValues(String field) {\n      if (fieldInfos.get(field).omitsNorms())\n        return null;\n      DocValues norms = cachedNormValues;\n      Similarity sim = getSimilarity();\n      if (!field.equals(cachedFieldName) || sim != cachedSimilarity) { // not cached?\n        Info info = getInfo(field);\n        int numTokens = info != null ? info.numTokens : 0;\n        int numOverlapTokens = info != null ? info.numOverlapTokens : 0;\n        float boost = info != null ? info.getBoost() : 1.0f; \n        FieldInvertState invertState = new FieldInvertState(field, 0, numTokens, numOverlapTokens, 0, boost);\n        Norm norm = new Norm();\n        sim.computeNorm(invertState, norm);\n        SingleValueSource singleByteSource = new SingleValueSource(norm);\n        norms = new MemoryIndexNormDocValues(singleByteSource);\n        // cache it for future reuse\n        cachedNormValues = norms;\n        cachedFieldName = field;\n        cachedSimilarity = sim;\n        if (DEBUG) System.err.println(\"MemoryIndexReader.norms: \" + field + \":\" + norm + \":\" + numTokens);\n      }\n      return norms;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c683d1a97ecbc7aaa30ce150eeaef9a3fb38a123","date":1358964301,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader#normValues(String).mjava","pathOld":"lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader#normValues(String).mjava","sourceNew":"    @Override\n    public DocValues normValues(String field) {\n      FieldInfo fieldInfo = fieldInfos.get(field);\n      if (fieldInfo == null || fieldInfo.omitsNorms())\n        return null;\n      DocValues norms = cachedNormValues;\n      Similarity sim = getSimilarity();\n      if (!field.equals(cachedFieldName) || sim != cachedSimilarity) { // not cached?\n        Info info = getInfo(field);\n        int numTokens = info != null ? info.numTokens : 0;\n        int numOverlapTokens = info != null ? info.numOverlapTokens : 0;\n        float boost = info != null ? info.getBoost() : 1.0f; \n        FieldInvertState invertState = new FieldInvertState(field, 0, numTokens, numOverlapTokens, 0, boost);\n        Norm norm = new Norm();\n        sim.computeNorm(invertState, norm);\n        SingleValueSource singleByteSource = new SingleValueSource(norm);\n        norms = new MemoryIndexNormDocValues(singleByteSource);\n        // cache it for future reuse\n        cachedNormValues = norms;\n        cachedFieldName = field;\n        cachedSimilarity = sim;\n        if (DEBUG) System.err.println(\"MemoryIndexReader.norms: \" + field + \":\" + norm + \":\" + numTokens);\n      }\n      return norms;\n    }\n\n","sourceOld":"    @Override\n    public DocValues normValues(String field) {\n      if (fieldInfos.get(field).omitsNorms())\n        return null;\n      DocValues norms = cachedNormValues;\n      Similarity sim = getSimilarity();\n      if (!field.equals(cachedFieldName) || sim != cachedSimilarity) { // not cached?\n        Info info = getInfo(field);\n        int numTokens = info != null ? info.numTokens : 0;\n        int numOverlapTokens = info != null ? info.numOverlapTokens : 0;\n        float boost = info != null ? info.getBoost() : 1.0f; \n        FieldInvertState invertState = new FieldInvertState(field, 0, numTokens, numOverlapTokens, 0, boost);\n        Norm norm = new Norm();\n        sim.computeNorm(invertState, norm);\n        SingleValueSource singleByteSource = new SingleValueSource(norm);\n        norms = new MemoryIndexNormDocValues(singleByteSource);\n        // cache it for future reuse\n        cachedNormValues = norms;\n        cachedFieldName = field;\n        cachedSimilarity = sim;\n        if (DEBUG) System.err.println(\"MemoryIndexReader.norms: \" + field + \":\" + norm + \":\" + numTokens);\n      }\n      return norms;\n    }\n\n","bugFix":["30fd30bfbfa6b9e036bcd99c8339712e965d4a63"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader#normValues(String).mjava","sourceNew":null,"sourceOld":"    @Override\n    public DocValues normValues(String field) {\n      FieldInfo fieldInfo = fieldInfos.get(field);\n      if (fieldInfo == null || fieldInfo.omitsNorms())\n        return null;\n      DocValues norms = cachedNormValues;\n      Similarity sim = getSimilarity();\n      if (!field.equals(cachedFieldName) || sim != cachedSimilarity) { // not cached?\n        Info info = getInfo(field);\n        int numTokens = info != null ? info.numTokens : 0;\n        int numOverlapTokens = info != null ? info.numOverlapTokens : 0;\n        float boost = info != null ? info.getBoost() : 1.0f; \n        FieldInvertState invertState = new FieldInvertState(field, 0, numTokens, numOverlapTokens, 0, boost);\n        Norm norm = new Norm();\n        sim.computeNorm(invertState, norm);\n        SingleValueSource singleByteSource = new SingleValueSource(norm);\n        norms = new MemoryIndexNormDocValues(singleByteSource);\n        // cache it for future reuse\n        cachedNormValues = norms;\n        cachedFieldName = field;\n        cachedSimilarity = sim;\n        if (DEBUG) System.err.println(\"MemoryIndexReader.norms: \" + field + \":\" + norm + \":\" + numTokens);\n      }\n      return norms;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["c683d1a97ecbc7aaa30ce150eeaef9a3fb38a123","0837ab0472feecb3a54260729d845f839e1cbd72"],"c683d1a97ecbc7aaa30ce150eeaef9a3fb38a123":["30fd30bfbfa6b9e036bcd99c8339712e965d4a63"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["b89678825b68eccaf09e6ab71675fc0b0af1e099","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"30fd30bfbfa6b9e036bcd99c8339712e965d4a63":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0837ab0472feecb3a54260729d845f839e1cbd72":["30fd30bfbfa6b9e036bcd99c8339712e965d4a63"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d4d69c535930b5cce125cff868d40f6373dc27d4"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["fe33227f6805edab2036cbb80645cc4e2d1fa424","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c683d1a97ecbc7aaa30ce150eeaef9a3fb38a123":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"30fd30bfbfa6b9e036bcd99c8339712e965d4a63":["c683d1a97ecbc7aaa30ce150eeaef9a3fb38a123","0837ab0472feecb3a54260729d845f839e1cbd72"],"0837ab0472feecb3a54260729d845f839e1cbd72":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["fe33227f6805edab2036cbb80645cc4e2d1fa424","30fd30bfbfa6b9e036bcd99c8339712e965d4a63"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}