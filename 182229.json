{"path":"lucene/core/src/java/org/apache/lucene/util/LegacyNumericUtils#longToPrefixCodedBytes(long,int,BytesRefBuilder).mjava","commits":[{"id":"770342641f7b505eaa8dccdc666158bff2419109","date":1449868421,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/LegacyNumericUtils#longToPrefixCodedBytes(long,int,BytesRefBuilder).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/NumericUtils#longToPrefixCodedBytes(long,int,BytesRefBuilder).mjava","sourceNew":"  /**\n   * Returns prefix coded bits after reducing the precision by <code>shift</code> bits.\n   * This is method is used by {@link org.apache.lucene.analysis.LegacyNumericTokenStream}.\n   * After encoding, {@code bytes.offset} will always be 0.\n   * @param val the numeric value\n   * @param shift how many bits to strip from the right\n   * @param bytes will contain the encoded value\n   */\n  public static void longToPrefixCodedBytes(final long val, final int shift, final BytesRefBuilder bytes) {\n    // ensure shift is 0..63\n    if ((shift & ~0x3f) != 0) {\n      throw new IllegalArgumentException(\"Illegal shift value, must be 0..63; got shift=\" + shift);\n    }\n    int nChars = (((63-shift)*37)>>8) + 1;    // i/7 is the same as (i*37)>>8 for i in 0..63\n    bytes.setLength(nChars+1);   // one extra for the byte that contains the shift info\n    bytes.grow(BUF_SIZE_LONG);\n    bytes.setByteAt(0, (byte)(SHIFT_START_LONG + shift));\n    long sortableBits = val ^ 0x8000000000000000L;\n    sortableBits >>>= shift;\n    while (nChars > 0) {\n      // Store 7 bits per byte for compatibility\n      // with UTF-8 encoding of terms\n      bytes.setByteAt(nChars--, (byte)(sortableBits & 0x7f));\n      sortableBits >>>= 7;\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns prefix coded bits after reducing the precision by <code>shift</code> bits.\n   * This is method is used by {@link NumericTokenStream}.\n   * After encoding, {@code bytes.offset} will always be 0.\n   * @param val the numeric value\n   * @param shift how many bits to strip from the right\n   * @param bytes will contain the encoded value\n   */\n  public static void longToPrefixCodedBytes(final long val, final int shift, final BytesRefBuilder bytes) {\n    // ensure shift is 0..63\n    if ((shift & ~0x3f) != 0) {\n      throw new IllegalArgumentException(\"Illegal shift value, must be 0..63; got shift=\" + shift);\n    }\n    int nChars = (((63-shift)*37)>>8) + 1;    // i/7 is the same as (i*37)>>8 for i in 0..63\n    bytes.setLength(nChars+1);   // one extra for the byte that contains the shift info\n    bytes.grow(BUF_SIZE_LONG);\n    bytes.setByteAt(0, (byte)(SHIFT_START_LONG + shift));\n    long sortableBits = val ^ 0x8000000000000000L;\n    sortableBits >>>= shift;\n    while (nChars > 0) {\n      // Store 7 bits per byte for compatibility\n      // with UTF-8 encoding of terms\n      bytes.setByteAt(nChars--, (byte)(sortableBits & 0x7f));\n      sortableBits >>>= 7;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"651ed0c260e4184c8a85ae7e1c155a4415f2e6e2","date":1455407361,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/LegacyNumericUtils#longToPrefixCodedBytes(long,int,BytesRefBuilder).mjava","sourceNew":null,"sourceOld":"  /**\n   * Returns prefix coded bits after reducing the precision by <code>shift</code> bits.\n   * This is method is used by {@link org.apache.lucene.analysis.LegacyNumericTokenStream}.\n   * After encoding, {@code bytes.offset} will always be 0.\n   * @param val the numeric value\n   * @param shift how many bits to strip from the right\n   * @param bytes will contain the encoded value\n   */\n  public static void longToPrefixCodedBytes(final long val, final int shift, final BytesRefBuilder bytes) {\n    // ensure shift is 0..63\n    if ((shift & ~0x3f) != 0) {\n      throw new IllegalArgumentException(\"Illegal shift value, must be 0..63; got shift=\" + shift);\n    }\n    int nChars = (((63-shift)*37)>>8) + 1;    // i/7 is the same as (i*37)>>8 for i in 0..63\n    bytes.setLength(nChars+1);   // one extra for the byte that contains the shift info\n    bytes.grow(BUF_SIZE_LONG);\n    bytes.setByteAt(0, (byte)(SHIFT_START_LONG + shift));\n    long sortableBits = val ^ 0x8000000000000000L;\n    sortableBits >>>= shift;\n    while (nChars > 0) {\n      // Store 7 bits per byte for compatibility\n      // with UTF-8 encoding of terms\n      bytes.setByteAt(nChars--, (byte)(sortableBits & 0x7f));\n      sortableBits >>>= 7;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"770342641f7b505eaa8dccdc666158bff2419109":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["651ed0c260e4184c8a85ae7e1c155a4415f2e6e2"],"651ed0c260e4184c8a85ae7e1c155a4415f2e6e2":["770342641f7b505eaa8dccdc666158bff2419109"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["770342641f7b505eaa8dccdc666158bff2419109"],"770342641f7b505eaa8dccdc666158bff2419109":["651ed0c260e4184c8a85ae7e1c155a4415f2e6e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"651ed0c260e4184c8a85ae7e1c155a4415f2e6e2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}