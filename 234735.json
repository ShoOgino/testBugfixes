{"path":"solr/solrj/src/java/org/apache/solr/common/cloud/DefaultConnectionStrategy#connect(String,int,Watcher,ZkUpdate).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/DefaultConnectionStrategy#connect(String,int,Watcher,ZkUpdate).mjava","pathOld":"solr/src/common/org/apache/solr/common/cloud/DefaultConnectionStrategy#connect(String,int,Watcher,ZkUpdate).mjava","sourceNew":"  @Override\n  public void connect(String serverAddress, int timeout, Watcher watcher, ZkUpdate updater) throws IOException, InterruptedException, TimeoutException {\n    updater.update(new SolrZooKeeper(serverAddress, timeout, watcher));\n  }\n\n","sourceOld":"  @Override\n  public void connect(String serverAddress, int timeout, Watcher watcher, ZkUpdate updater) throws IOException, InterruptedException, TimeoutException {\n    updater.update(new SolrZooKeeper(serverAddress, timeout, watcher));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/DefaultConnectionStrategy#connect(String,int,Watcher,ZkUpdate).mjava","pathOld":"solr/src/common/org/apache/solr/common/cloud/DefaultConnectionStrategy#connect(String,int,Watcher,ZkUpdate).mjava","sourceNew":"  @Override\n  public void connect(String serverAddress, int timeout, Watcher watcher, ZkUpdate updater) throws IOException, InterruptedException, TimeoutException {\n    updater.update(new SolrZooKeeper(serverAddress, timeout, watcher));\n  }\n\n","sourceOld":"  @Override\n  public void connect(String serverAddress, int timeout, Watcher watcher, ZkUpdate updater) throws IOException, InterruptedException, TimeoutException {\n    updater.update(new SolrZooKeeper(serverAddress, timeout, watcher));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/DefaultConnectionStrategy#connect(String,int,Watcher,ZkUpdate).mjava","pathOld":"solr/src/common/org/apache/solr/common/cloud/DefaultConnectionStrategy#connect(String,int,Watcher,ZkUpdate).mjava","sourceNew":"  @Override\n  public void connect(String serverAddress, int timeout, Watcher watcher, ZkUpdate updater) throws IOException, InterruptedException, TimeoutException {\n    updater.update(new SolrZooKeeper(serverAddress, timeout, watcher));\n  }\n\n","sourceOld":"  @Override\n  public void connect(String serverAddress, int timeout, Watcher watcher, ZkUpdate updater) throws IOException, InterruptedException, TimeoutException {\n    updater.update(new SolrZooKeeper(serverAddress, timeout, watcher));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7f3712a3e82b6f849bec5eb4eea89be0463f611","date":1382202596,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/DefaultConnectionStrategy#connect(String,int,Watcher,ZkUpdate).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/DefaultConnectionStrategy#connect(String,int,Watcher,ZkUpdate).mjava","sourceNew":"  @Override\n  public void connect(String serverAddress, int timeout, Watcher watcher, ZkUpdate updater) throws IOException, InterruptedException, TimeoutException {\n    SolrZooKeeper zk = new SolrZooKeeper(serverAddress, timeout, watcher);\n    boolean success = false;\n    try {\n      updater.update(zk);\n      success = true;\n    } finally {\n      if (!success) {\n        zk.close();\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void connect(String serverAddress, int timeout, Watcher watcher, ZkUpdate updater) throws IOException, InterruptedException, TimeoutException {\n    updater.update(new SolrZooKeeper(serverAddress, timeout, watcher));\n  }\n\n","bugFix":["43adc163640856c8b07e4cf1b2046c9af56d3ae7"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c83f985d9828d30801541f1eed26aa3169646baf","date":1409315453,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/DefaultConnectionStrategy#connect(String,int,Watcher,ZkUpdate).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/DefaultConnectionStrategy#connect(String,int,Watcher,ZkUpdate).mjava","sourceNew":"  @Override\n  public void connect(String serverAddress, int timeout, Watcher watcher, ZkUpdate updater) throws IOException, InterruptedException, TimeoutException {\n    SolrZooKeeper zk = createSolrZooKeeper(serverAddress, timeout, watcher);\n    boolean success = false;\n    try {\n      updater.update(zk);\n      success = true;\n    } finally {\n      if (!success) {\n        zk.close();\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void connect(String serverAddress, int timeout, Watcher watcher, ZkUpdate updater) throws IOException, InterruptedException, TimeoutException {\n    SolrZooKeeper zk = new SolrZooKeeper(serverAddress, timeout, watcher);\n    boolean success = false;\n    try {\n      updater.update(zk);\n      success = true;\n    } finally {\n      if (!success) {\n        zk.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7f3712a3e82b6f849bec5eb4eea89be0463f611":["c26f00b574427b55127e869b935845554afde1fa"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c83f985d9828d30801541f1eed26aa3169646baf":["c7f3712a3e82b6f849bec5eb4eea89be0463f611"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c83f985d9828d30801541f1eed26aa3169646baf"]},"commit2Childs":{"c7f3712a3e82b6f849bec5eb4eea89be0463f611":["c83f985d9828d30801541f1eed26aa3169646baf"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["c7f3712a3e82b6f849bec5eb4eea89be0463f611"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"c83f985d9828d30801541f1eed26aa3169646baf":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}