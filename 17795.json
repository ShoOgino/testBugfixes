{"path":"solr/core/src/java/org/apache/solr/util/SolrCLI.ConfigTool#runImpl(CommandLine).mjava","commits":[{"id":"4ca20be81c9284c840498143264e583ccbb8525a","date":1438705932,"type":1,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.ConfigTool#runImpl(CommandLine).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.ConfigTool#runTool(CommandLine).mjava","sourceNew":"    protected void runImpl(CommandLine cli) throws Exception {\n      String solrUrl = resolveSolrUrl(cli);\n      String action = cli.getOptionValue(\"action\", \"set-property\");\n      String collection = cli.getOptionValue(\"collection\", \"gettingstarted\");\n      String property = cli.getOptionValue(\"property\");\n      String value = cli.getOptionValue(\"value\");\n\n      Map<String,Object> jsonObj = new HashMap<>();\n      if (value != null) {\n        Map<String,String> setMap = new HashMap<>();\n        setMap.put(property, value);\n        jsonObj.put(action, setMap);\n      } else {\n        jsonObj.put(action, property);\n      }\n\n      CharArr arr = new CharArr();\n      (new JSONWriter(arr, 0)).write(jsonObj);\n      String jsonBody = arr.toString();\n\n      String updatePath = \"/\"+collection+\"/config\";\n\n      echo(\"\\nPOSTing request to Config API: \" + solrUrl + updatePath);\n      echo(jsonBody);\n\n      try (SolrClient solrClient = new HttpSolrClient(solrUrl)) {\n        NamedList<Object> result = postJsonToSolr(solrClient, updatePath, jsonBody);\n        Integer statusCode = (Integer)((NamedList)result.get(\"responseHeader\")).get(\"status\");\n        if (statusCode == 0) {\n          if (value != null) {\n            echo(\"Successfully \" + action + \" \" + property + \" to \" + value);\n          } else {\n            echo(\"Successfully \" + action + \" \" + property);\n          }\n        } else {\n          throw new Exception(\"Failed to \"+action+\" property due to:\\n\"+result);\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public int runTool(CommandLine cli) throws Exception {\n      String solrUrl = resolveSolrUrl(cli);\n      String action = cli.getOptionValue(\"action\", \"set-property\");\n      String collection = cli.getOptionValue(\"collection\", \"gettingstarted\");\n      String property = cli.getOptionValue(\"property\");\n      String value = cli.getOptionValue(\"value\");\n\n      Map<String,Object> jsonObj = new HashMap<>();\n      if (value != null) {\n        Map<String,String> setMap = new HashMap<>();\n        setMap.put(property, value);\n        jsonObj.put(action, setMap);\n      } else {\n        jsonObj.put(action, property);\n      }\n\n      CharArr arr = new CharArr();\n      (new JSONWriter(arr, 0)).write(jsonObj);\n      String jsonBody = arr.toString();\n\n      String updatePath = \"/\"+collection+\"/config\";\n\n      System.out.println(\"\\nPOSTing request to Config API: \"+solrUrl+updatePath);\n      System.out.println(jsonBody);\n      System.out.println();\n\n      int exitStatus = 0;\n      try (SolrClient solrClient = new HttpSolrClient(solrUrl)) {\n        NamedList<Object> result = postJsonToSolr(solrClient, updatePath, jsonBody);\n        Integer statusCode = (Integer)((NamedList)result.get(\"responseHeader\")).get(\"status\");\n        if (statusCode == 0) {\n          if (value != null) {\n            System.out.println(\"Successfully \"+action+\" \"+property+\" to \"+value);\n          } else {\n            System.out.println(\"Successfully \"+action+\" \"+property);\n          }\n        } else {\n          String errMsg = \"Failed to \"+action+\" property due to:\\n\"+result;\n          System.err.println(\"\\nERROR: \"+errMsg+\"\\n\");\n          exitStatus = 1;\n        }\n      }\n      return exitStatus;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088","date":1460069869,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.ConfigTool#runImpl(CommandLine).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.ConfigTool#runImpl(CommandLine).mjava","sourceNew":"    protected void runImpl(CommandLine cli) throws Exception {\n      String solrUrl = resolveSolrUrl(cli);\n      String action = cli.getOptionValue(\"action\", \"set-property\");\n      String collection = cli.getOptionValue(\"collection\", \"gettingstarted\");\n      String property = cli.getOptionValue(\"property\");\n      String value = cli.getOptionValue(\"value\");\n\n      Map<String,Object> jsonObj = new HashMap<>();\n      if (value != null) {\n        Map<String,String> setMap = new HashMap<>();\n        setMap.put(property, value);\n        jsonObj.put(action, setMap);\n      } else {\n        jsonObj.put(action, property);\n      }\n\n      CharArr arr = new CharArr();\n      (new JSONWriter(arr, 0)).write(jsonObj);\n      String jsonBody = arr.toString();\n\n      String updatePath = \"/\"+collection+\"/config\";\n\n      echo(\"\\nPOSTing request to Config API: \" + solrUrl + updatePath);\n      echo(jsonBody);\n\n      try (SolrClient solrClient = new Builder(solrUrl).build()) {\n        NamedList<Object> result = postJsonToSolr(solrClient, updatePath, jsonBody);\n        Integer statusCode = (Integer)((NamedList)result.get(\"responseHeader\")).get(\"status\");\n        if (statusCode == 0) {\n          if (value != null) {\n            echo(\"Successfully \" + action + \" \" + property + \" to \" + value);\n          } else {\n            echo(\"Successfully \" + action + \" \" + property);\n          }\n        } else {\n          throw new Exception(\"Failed to \"+action+\" property due to:\\n\"+result);\n        }\n      }\n    }\n\n","sourceOld":"    protected void runImpl(CommandLine cli) throws Exception {\n      String solrUrl = resolveSolrUrl(cli);\n      String action = cli.getOptionValue(\"action\", \"set-property\");\n      String collection = cli.getOptionValue(\"collection\", \"gettingstarted\");\n      String property = cli.getOptionValue(\"property\");\n      String value = cli.getOptionValue(\"value\");\n\n      Map<String,Object> jsonObj = new HashMap<>();\n      if (value != null) {\n        Map<String,String> setMap = new HashMap<>();\n        setMap.put(property, value);\n        jsonObj.put(action, setMap);\n      } else {\n        jsonObj.put(action, property);\n      }\n\n      CharArr arr = new CharArr();\n      (new JSONWriter(arr, 0)).write(jsonObj);\n      String jsonBody = arr.toString();\n\n      String updatePath = \"/\"+collection+\"/config\";\n\n      echo(\"\\nPOSTing request to Config API: \" + solrUrl + updatePath);\n      echo(jsonBody);\n\n      try (SolrClient solrClient = new HttpSolrClient(solrUrl)) {\n        NamedList<Object> result = postJsonToSolr(solrClient, updatePath, jsonBody);\n        Integer statusCode = (Integer)((NamedList)result.get(\"responseHeader\")).get(\"status\");\n        if (statusCode == 0) {\n          if (value != null) {\n            echo(\"Successfully \" + action + \" \" + property + \" to \" + value);\n          } else {\n            echo(\"Successfully \" + action + \" \" + property);\n          }\n        } else {\n          throw new Exception(\"Failed to \"+action+\" property due to:\\n\"+result);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":["ee8fbffa595c312bc0437f2c9bb6376a29c1b427"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","date":1460110033,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.ConfigTool#runImpl(CommandLine).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.ConfigTool#runImpl(CommandLine).mjava","sourceNew":"    protected void runImpl(CommandLine cli) throws Exception {\n      String solrUrl = resolveSolrUrl(cli);\n      String action = cli.getOptionValue(\"action\", \"set-property\");\n      String collection = cli.getOptionValue(\"collection\", \"gettingstarted\");\n      String property = cli.getOptionValue(\"property\");\n      String value = cli.getOptionValue(\"value\");\n\n      Map<String,Object> jsonObj = new HashMap<>();\n      if (value != null) {\n        Map<String,String> setMap = new HashMap<>();\n        setMap.put(property, value);\n        jsonObj.put(action, setMap);\n      } else {\n        jsonObj.put(action, property);\n      }\n\n      CharArr arr = new CharArr();\n      (new JSONWriter(arr, 0)).write(jsonObj);\n      String jsonBody = arr.toString();\n\n      String updatePath = \"/\"+collection+\"/config\";\n\n      echo(\"\\nPOSTing request to Config API: \" + solrUrl + updatePath);\n      echo(jsonBody);\n\n      try (SolrClient solrClient = new Builder(solrUrl).build()) {\n        NamedList<Object> result = postJsonToSolr(solrClient, updatePath, jsonBody);\n        Integer statusCode = (Integer)((NamedList)result.get(\"responseHeader\")).get(\"status\");\n        if (statusCode == 0) {\n          if (value != null) {\n            echo(\"Successfully \" + action + \" \" + property + \" to \" + value);\n          } else {\n            echo(\"Successfully \" + action + \" \" + property);\n          }\n        } else {\n          throw new Exception(\"Failed to \"+action+\" property due to:\\n\"+result);\n        }\n      }\n    }\n\n","sourceOld":"    protected void runImpl(CommandLine cli) throws Exception {\n      String solrUrl = resolveSolrUrl(cli);\n      String action = cli.getOptionValue(\"action\", \"set-property\");\n      String collection = cli.getOptionValue(\"collection\", \"gettingstarted\");\n      String property = cli.getOptionValue(\"property\");\n      String value = cli.getOptionValue(\"value\");\n\n      Map<String,Object> jsonObj = new HashMap<>();\n      if (value != null) {\n        Map<String,String> setMap = new HashMap<>();\n        setMap.put(property, value);\n        jsonObj.put(action, setMap);\n      } else {\n        jsonObj.put(action, property);\n      }\n\n      CharArr arr = new CharArr();\n      (new JSONWriter(arr, 0)).write(jsonObj);\n      String jsonBody = arr.toString();\n\n      String updatePath = \"/\"+collection+\"/config\";\n\n      echo(\"\\nPOSTing request to Config API: \" + solrUrl + updatePath);\n      echo(jsonBody);\n\n      try (SolrClient solrClient = new HttpSolrClient(solrUrl)) {\n        NamedList<Object> result = postJsonToSolr(solrClient, updatePath, jsonBody);\n        Integer statusCode = (Integer)((NamedList)result.get(\"responseHeader\")).get(\"status\");\n        if (statusCode == 0) {\n          if (value != null) {\n            echo(\"Successfully \" + action + \" \" + property + \" to \" + value);\n          } else {\n            echo(\"Successfully \" + action + \" \" + property);\n          }\n        } else {\n          throw new Exception(\"Failed to \"+action+\" property due to:\\n\"+result);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3021d8a7123d1812a48c0754dca068170c5645e3","date":1518912506,"type":3,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.ConfigTool#runImpl(CommandLine).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.ConfigTool#runImpl(CommandLine).mjava","sourceNew":"    protected void runImpl(CommandLine cli) throws Exception {\n      String solrUrl;\n      try {\n        solrUrl = resolveSolrUrl(cli);\n      } catch (IllegalStateException e) {\n        // Fallback to using the provided scheme and port\n        final String scheme = cli.getOptionValue(\"scheme\", \"http\");\n        if (cli.hasOption(\"port\")) {\n          solrUrl = scheme + \"://localhost:\" + cli.getOptionValue(\"port\", \"8983\") + \"/solr\";\n        } else {\n          throw e;\n        }\n      }\n\n      String action = cli.getOptionValue(\"action\", \"set-property\");\n      String collection = cli.getOptionValue(\"collection\", \"gettingstarted\");\n      String property = cli.getOptionValue(\"property\");\n      String value = cli.getOptionValue(\"value\");\n\n      Map<String,Object> jsonObj = new HashMap<>();\n      if (value != null) {\n        Map<String,String> setMap = new HashMap<>();\n        setMap.put(property, value);\n        jsonObj.put(action, setMap);\n      } else {\n        jsonObj.put(action, property);\n      }\n\n      CharArr arr = new CharArr();\n      (new JSONWriter(arr, 0)).write(jsonObj);\n      String jsonBody = arr.toString();\n\n      String updatePath = \"/\"+collection+\"/config\";\n\n      echo(\"\\nPOSTing request to Config API: \" + solrUrl + updatePath);\n      echo(jsonBody);\n\n      try (SolrClient solrClient = new Builder(solrUrl).build()) {\n        NamedList<Object> result = postJsonToSolr(solrClient, updatePath, jsonBody);\n        Integer statusCode = (Integer)((NamedList)result.get(\"responseHeader\")).get(\"status\");\n        if (statusCode == 0) {\n          if (value != null) {\n            echo(\"Successfully \" + action + \" \" + property + \" to \" + value);\n          } else {\n            echo(\"Successfully \" + action + \" \" + property);\n          }\n        } else {\n          throw new Exception(\"Failed to \"+action+\" property due to:\\n\"+result);\n        }\n      }\n    }\n\n","sourceOld":"    protected void runImpl(CommandLine cli) throws Exception {\n      String solrUrl = resolveSolrUrl(cli);\n      String action = cli.getOptionValue(\"action\", \"set-property\");\n      String collection = cli.getOptionValue(\"collection\", \"gettingstarted\");\n      String property = cli.getOptionValue(\"property\");\n      String value = cli.getOptionValue(\"value\");\n\n      Map<String,Object> jsonObj = new HashMap<>();\n      if (value != null) {\n        Map<String,String> setMap = new HashMap<>();\n        setMap.put(property, value);\n        jsonObj.put(action, setMap);\n      } else {\n        jsonObj.put(action, property);\n      }\n\n      CharArr arr = new CharArr();\n      (new JSONWriter(arr, 0)).write(jsonObj);\n      String jsonBody = arr.toString();\n\n      String updatePath = \"/\"+collection+\"/config\";\n\n      echo(\"\\nPOSTing request to Config API: \" + solrUrl + updatePath);\n      echo(jsonBody);\n\n      try (SolrClient solrClient = new Builder(solrUrl).build()) {\n        NamedList<Object> result = postJsonToSolr(solrClient, updatePath, jsonBody);\n        Integer statusCode = (Integer)((NamedList)result.get(\"responseHeader\")).get(\"status\");\n        if (statusCode == 0) {\n          if (value != null) {\n            echo(\"Successfully \" + action + \" \" + property + \" to \" + value);\n          } else {\n            echo(\"Successfully \" + action + \" \" + property);\n          }\n        } else {\n          throw new Exception(\"Failed to \"+action+\" property due to:\\n\"+result);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b79a5db147a1c6f95d1625ddbc3561ef56955225","date":1528848080,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.ConfigTool#runImpl(CommandLine).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.ConfigTool#runImpl(CommandLine).mjava","sourceNew":"    protected void runImpl(CommandLine cli) throws Exception {\n      String solrUrl;\n      try {\n        solrUrl = resolveSolrUrl(cli);\n      } catch (IllegalStateException e) {\n        // Fallback to using the provided scheme and port\n        final String scheme = cli.getOptionValue(\"scheme\", \"http\");\n        if (cli.hasOption(\"port\")) {\n          solrUrl = scheme + \"://localhost:\" + cli.getOptionValue(\"port\", \"8983\") + \"/solr\";\n        } else {\n          throw e;\n        }\n      }\n\n      String action = cli.getOptionValue(\"action\", \"set-property\");\n      String collection = cli.getOptionValue(\"collection\", \"gettingstarted\");\n      String property = cli.getOptionValue(\"property\");\n      String value = cli.getOptionValue(\"value\");\n\n      Map<String,Object> jsonObj = new HashMap<>();\n      if (value != null) {\n        Map<String,String> setMap = new HashMap<>();\n        setMap.put(property, value);\n        jsonObj.put(action, setMap);\n      } else {\n        jsonObj.put(action, property);\n      }\n\n      CharArr arr = new CharArr();\n      (new JSONWriter(arr, 0)).write(jsonObj);\n      String jsonBody = arr.toString();\n\n      String updatePath = \"/\"+collection+\"/config\";\n\n      echo(\"\\nPOSTing request to Config API: \" + solrUrl + updatePath);\n      echo(jsonBody);\n\n      try (SolrClient solrClient = new Builder(solrUrl).build()) {\n        NamedList<Object> result = postJsonToSolr(solrClient, updatePath, jsonBody);\n        Integer statusCode = (Integer)((NamedList)result.get(\"responseHeader\")).get(\"status\");\n        if (statusCode == 0) {\n          if (value != null) {\n            echo(\"Successfully \" + action + \" \" + property + \" to \" + value);\n          } else {\n            echo(\"Successfully \" + action + \" \" + property);\n          }\n        } else {\n          throw new Exception(\"Failed to \"+action+\" property due to:\\n\"+result);\n        }\n      }\n    }\n\n","sourceOld":"    protected void runImpl(CommandLine cli) throws Exception {\n      String solrUrl;\n      try {\n        solrUrl = resolveSolrUrl(cli);\n      } catch (IllegalStateException e) {\n        // Fallback to using the provided scheme and port\n        final String scheme = cli.getOptionValue(\"scheme\", \"http\");\n        if (cli.hasOption(\"port\")) {\n          solrUrl = scheme + \"://localhost:\" + cli.getOptionValue(\"port\", \"8983\") + \"/solr\";\n        } else {\n          throw e;\n        }\n      }\n\n      String action = cli.getOptionValue(\"action\", \"set-property\");\n      String collection = cli.getOptionValue(\"collection\", \"gettingstarted\");\n      String property = cli.getOptionValue(\"property\");\n      String value = cli.getOptionValue(\"value\");\n\n      Map<String,Object> jsonObj = new HashMap<>();\n      if (value != null) {\n        Map<String,String> setMap = new HashMap<>();\n        setMap.put(property, value);\n        jsonObj.put(action, setMap);\n      } else {\n        jsonObj.put(action, property);\n      }\n\n      CharArr arr = new CharArr();\n      (new JSONWriter(arr, 0)).write(jsonObj);\n      String jsonBody = arr.toString();\n\n      String updatePath = \"/\"+collection+\"/config\";\n\n      echo(\"\\nPOSTing request to Config API: \" + solrUrl + updatePath);\n      echo(jsonBody);\n\n      try (SolrClient solrClient = new Builder(solrUrl).build()) {\n        NamedList<Object> result = postJsonToSolr(solrClient, updatePath, jsonBody);\n        Integer statusCode = (Integer)((NamedList)result.get(\"responseHeader\")).get(\"status\");\n        if (statusCode == 0) {\n          if (value != null) {\n            echo(\"Successfully \" + action + \" \" + property + \" to \" + value);\n          } else {\n            echo(\"Successfully \" + action + \" \" + property);\n          }\n        } else {\n          throw new Exception(\"Failed to \"+action+\" property due to:\\n\"+result);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.ConfigTool#runImpl(CommandLine).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.ConfigTool#runImpl(CommandLine).mjava","sourceNew":"    protected void runImpl(CommandLine cli) throws Exception {\n      String solrUrl;\n      try {\n        solrUrl = resolveSolrUrl(cli);\n      } catch (IllegalStateException e) {\n        // Fallback to using the provided scheme and port\n        final String scheme = cli.getOptionValue(\"scheme\", \"http\");\n        if (cli.hasOption(\"port\")) {\n          solrUrl = scheme + \"://localhost:\" + cli.getOptionValue(\"port\", \"8983\") + \"/solr\";\n        } else {\n          throw e;\n        }\n      }\n\n      String action = cli.getOptionValue(\"action\", \"set-property\");\n      String collection = cli.getOptionValue(\"collection\", \"gettingstarted\");\n      String property = cli.getOptionValue(\"property\");\n      String value = cli.getOptionValue(\"value\");\n\n      Map<String,Object> jsonObj = new HashMap<>();\n      if (value != null) {\n        Map<String,String> setMap = new HashMap<>();\n        setMap.put(property, value);\n        jsonObj.put(action, setMap);\n      } else {\n        jsonObj.put(action, property);\n      }\n\n      CharArr arr = new CharArr();\n      (new JSONWriter(arr, 0)).write(jsonObj);\n      String jsonBody = arr.toString();\n\n      String updatePath = \"/\"+collection+\"/config\";\n\n      echo(\"\\nPOSTing request to Config API: \" + solrUrl + updatePath);\n      echo(jsonBody);\n\n      try (SolrClient solrClient = new Builder(solrUrl).build()) {\n        NamedList<Object> result = postJsonToSolr(solrClient, updatePath, jsonBody);\n        Integer statusCode = (Integer)((NamedList)result.get(\"responseHeader\")).get(\"status\");\n        if (statusCode == 0) {\n          if (value != null) {\n            echo(\"Successfully \" + action + \" \" + property + \" to \" + value);\n          } else {\n            echo(\"Successfully \" + action + \" \" + property);\n          }\n        } else {\n          throw new Exception(\"Failed to \"+action+\" property due to:\\n\"+result);\n        }\n      }\n    }\n\n","sourceOld":"    protected void runImpl(CommandLine cli) throws Exception {\n      String solrUrl;\n      try {\n        solrUrl = resolveSolrUrl(cli);\n      } catch (IllegalStateException e) {\n        // Fallback to using the provided scheme and port\n        final String scheme = cli.getOptionValue(\"scheme\", \"http\");\n        if (cli.hasOption(\"port\")) {\n          solrUrl = scheme + \"://localhost:\" + cli.getOptionValue(\"port\", \"8983\") + \"/solr\";\n        } else {\n          throw e;\n        }\n      }\n\n      String action = cli.getOptionValue(\"action\", \"set-property\");\n      String collection = cli.getOptionValue(\"collection\", \"gettingstarted\");\n      String property = cli.getOptionValue(\"property\");\n      String value = cli.getOptionValue(\"value\");\n\n      Map<String,Object> jsonObj = new HashMap<>();\n      if (value != null) {\n        Map<String,String> setMap = new HashMap<>();\n        setMap.put(property, value);\n        jsonObj.put(action, setMap);\n      } else {\n        jsonObj.put(action, property);\n      }\n\n      CharArr arr = new CharArr();\n      (new JSONWriter(arr, 0)).write(jsonObj);\n      String jsonBody = arr.toString();\n\n      String updatePath = \"/\"+collection+\"/config\";\n\n      echo(\"\\nPOSTing request to Config API: \" + solrUrl + updatePath);\n      echo(jsonBody);\n\n      try (SolrClient solrClient = new Builder(solrUrl).build()) {\n        NamedList<Object> result = postJsonToSolr(solrClient, updatePath, jsonBody);\n        Integer statusCode = (Integer)((NamedList)result.get(\"responseHeader\")).get(\"status\");\n        if (statusCode == 0) {\n          if (value != null) {\n            echo(\"Successfully \" + action + \" \" + property + \" to \" + value);\n          } else {\n            echo(\"Successfully \" + action + \" \" + property);\n          }\n        } else {\n          throw new Exception(\"Failed to \"+action+\" property due to:\\n\"+result);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.ConfigTool#runImpl(CommandLine).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.ConfigTool#runImpl(CommandLine).mjava","sourceNew":"    protected void runImpl(CommandLine cli) throws Exception {\n      String solrUrl;\n      try {\n        solrUrl = resolveSolrUrl(cli);\n      } catch (IllegalStateException e) {\n        // Fallback to using the provided scheme and port\n        final String scheme = cli.getOptionValue(\"scheme\", \"http\");\n        if (cli.hasOption(\"port\")) {\n          solrUrl = scheme + \"://localhost:\" + cli.getOptionValue(\"port\", \"8983\") + \"/solr\";\n        } else {\n          throw e;\n        }\n      }\n\n      String action = cli.getOptionValue(\"action\", \"set-property\");\n      String collection = cli.getOptionValue(\"collection\", \"gettingstarted\");\n      String property = cli.getOptionValue(\"property\");\n      String value = cli.getOptionValue(\"value\");\n\n      Map<String,Object> jsonObj = new HashMap<>();\n      if (value != null) {\n        Map<String,String> setMap = new HashMap<>();\n        setMap.put(property, value);\n        jsonObj.put(action, setMap);\n      } else {\n        jsonObj.put(action, property);\n      }\n\n      CharArr arr = new CharArr();\n      (new JSONWriter(arr, 0)).write(jsonObj);\n      String jsonBody = arr.toString();\n\n      String updatePath = \"/\"+collection+\"/config\";\n\n      echo(\"\\nPOSTing request to Config API: \" + solrUrl + updatePath);\n      echo(jsonBody);\n\n      try (SolrClient solrClient = new Builder(solrUrl).build()) {\n        NamedList<Object> result = postJsonToSolr(solrClient, updatePath, jsonBody);\n        Integer statusCode = (Integer)((NamedList)result.get(\"responseHeader\")).get(\"status\");\n        if (statusCode == 0) {\n          if (value != null) {\n            echo(\"Successfully \" + action + \" \" + property + \" to \" + value);\n          } else {\n            echo(\"Successfully \" + action + \" \" + property);\n          }\n        } else {\n          throw new Exception(\"Failed to \"+action+\" property due to:\\n\"+result);\n        }\n      }\n    }\n\n","sourceOld":"    protected void runImpl(CommandLine cli) throws Exception {\n      String solrUrl;\n      try {\n        solrUrl = resolveSolrUrl(cli);\n      } catch (IllegalStateException e) {\n        // Fallback to using the provided scheme and port\n        final String scheme = cli.getOptionValue(\"scheme\", \"http\");\n        if (cli.hasOption(\"port\")) {\n          solrUrl = scheme + \"://localhost:\" + cli.getOptionValue(\"port\", \"8983\") + \"/solr\";\n        } else {\n          throw e;\n        }\n      }\n\n      String action = cli.getOptionValue(\"action\", \"set-property\");\n      String collection = cli.getOptionValue(\"collection\", \"gettingstarted\");\n      String property = cli.getOptionValue(\"property\");\n      String value = cli.getOptionValue(\"value\");\n\n      Map<String,Object> jsonObj = new HashMap<>();\n      if (value != null) {\n        Map<String,String> setMap = new HashMap<>();\n        setMap.put(property, value);\n        jsonObj.put(action, setMap);\n      } else {\n        jsonObj.put(action, property);\n      }\n\n      CharArr arr = new CharArr();\n      (new JSONWriter(arr, 0)).write(jsonObj);\n      String jsonBody = arr.toString();\n\n      String updatePath = \"/\"+collection+\"/config\";\n\n      echo(\"\\nPOSTing request to Config API: \" + solrUrl + updatePath);\n      echo(jsonBody);\n\n      try (SolrClient solrClient = new Builder(solrUrl).build()) {\n        NamedList<Object> result = postJsonToSolr(solrClient, updatePath, jsonBody);\n        Integer statusCode = (Integer)((NamedList)result.get(\"responseHeader\")).get(\"status\");\n        if (statusCode == 0) {\n          if (value != null) {\n            echo(\"Successfully \" + action + \" \" + property + \" to \" + value);\n          } else {\n            echo(\"Successfully \" + action + \" \" + property);\n          }\n        } else {\n          throw new Exception(\"Failed to \"+action+\" property due to:\\n\"+result);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ee8fbffa595c312bc0437f2c9bb6376a29c1b427","date":1589412657,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.ConfigTool#runImpl(CommandLine).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.ConfigTool#runImpl(CommandLine).mjava","sourceNew":"    protected void runImpl(CommandLine cli) throws Exception {\n      String solrUrl;\n      try {\n        solrUrl = resolveSolrUrl(cli);\n      } catch (IllegalStateException e) {\n        // Fallback to using the provided scheme and port\n        final String scheme = cli.getOptionValue(\"scheme\", \"http\");\n        if (cli.hasOption(\"port\")) {\n          solrUrl = scheme + \"://localhost:\" + cli.getOptionValue(\"port\", \"8983\") + \"/solr\";\n        } else {\n          throw e;\n        }\n      }\n\n      String action = cli.getOptionValue(\"action\", \"set-property\");\n      String collection = cli.getOptionValue(\"collection\", \"gettingstarted\");\n      String property = cli.getOptionValue(\"property\");\n      String value = cli.getOptionValue(\"value\");\n\n      Map<String,Object> jsonObj = new HashMap<>();\n      if (value != null) {\n        Map<String,String> setMap = new HashMap<>();\n        setMap.put(property, value);\n        jsonObj.put(action, setMap);\n      } else {\n        jsonObj.put(action, property);\n      }\n\n      CharArr arr = new CharArr();\n      (new JSONWriter(arr, 0)).write(jsonObj);\n      String jsonBody = arr.toString();\n\n      String updatePath = \"/\"+collection+\"/config\";\n\n      echo(\"\\nPOSTing request to Config API: \" + solrUrl + updatePath);\n      echo(jsonBody);\n\n      try (SolrClient solrClient = new HttpSolrClient.Builder(solrUrl).build()) {\n        NamedList<Object> result = postJsonToSolr(solrClient, updatePath, jsonBody);\n        Integer statusCode = (Integer)((NamedList)result.get(\"responseHeader\")).get(\"status\");\n        if (statusCode == 0) {\n          if (value != null) {\n            echo(\"Successfully \" + action + \" \" + property + \" to \" + value);\n          } else {\n            echo(\"Successfully \" + action + \" \" + property);\n          }\n        } else {\n          throw new Exception(\"Failed to \"+action+\" property due to:\\n\"+result);\n        }\n      }\n    }\n\n","sourceOld":"    protected void runImpl(CommandLine cli) throws Exception {\n      String solrUrl;\n      try {\n        solrUrl = resolveSolrUrl(cli);\n      } catch (IllegalStateException e) {\n        // Fallback to using the provided scheme and port\n        final String scheme = cli.getOptionValue(\"scheme\", \"http\");\n        if (cli.hasOption(\"port\")) {\n          solrUrl = scheme + \"://localhost:\" + cli.getOptionValue(\"port\", \"8983\") + \"/solr\";\n        } else {\n          throw e;\n        }\n      }\n\n      String action = cli.getOptionValue(\"action\", \"set-property\");\n      String collection = cli.getOptionValue(\"collection\", \"gettingstarted\");\n      String property = cli.getOptionValue(\"property\");\n      String value = cli.getOptionValue(\"value\");\n\n      Map<String,Object> jsonObj = new HashMap<>();\n      if (value != null) {\n        Map<String,String> setMap = new HashMap<>();\n        setMap.put(property, value);\n        jsonObj.put(action, setMap);\n      } else {\n        jsonObj.put(action, property);\n      }\n\n      CharArr arr = new CharArr();\n      (new JSONWriter(arr, 0)).write(jsonObj);\n      String jsonBody = arr.toString();\n\n      String updatePath = \"/\"+collection+\"/config\";\n\n      echo(\"\\nPOSTing request to Config API: \" + solrUrl + updatePath);\n      echo(jsonBody);\n\n      try (SolrClient solrClient = new Builder(solrUrl).build()) {\n        NamedList<Object> result = postJsonToSolr(solrClient, updatePath, jsonBody);\n        Integer statusCode = (Integer)((NamedList)result.get(\"responseHeader\")).get(\"status\");\n        if (statusCode == 0) {\n          if (value != null) {\n            echo(\"Successfully \" + action + \" \" + property + \" to \" + value);\n          } else {\n            echo(\"Successfully \" + action + \" \" + property);\n          }\n        } else {\n          throw new Exception(\"Failed to \"+action+\" property due to:\\n\"+result);\n        }\n      }\n    }\n\n","bugFix":["e3c94a8b8bf47db4f968d9ae510ec8bbe1372088"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4ca20be81c9284c840498143264e583ccbb8525a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["3021d8a7123d1812a48c0754dca068170c5645e3","b79a5db147a1c6f95d1625ddbc3561ef56955225"],"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088":["4ca20be81c9284c840498143264e583ccbb8525a"],"3021d8a7123d1812a48c0754dca068170c5645e3":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b":["4ca20be81c9284c840498143264e583ccbb8525a","e3c94a8b8bf47db4f968d9ae510ec8bbe1372088"],"ee8fbffa595c312bc0437f2c9bb6376a29c1b427":["b79a5db147a1c6f95d1625ddbc3561ef56955225"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ee8fbffa595c312bc0437f2c9bb6376a29c1b427"],"b79a5db147a1c6f95d1625ddbc3561ef56955225":["3021d8a7123d1812a48c0754dca068170c5645e3"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["3021d8a7123d1812a48c0754dca068170c5645e3","b79a5db147a1c6f95d1625ddbc3561ef56955225"]},"commit2Childs":{"4ca20be81c9284c840498143264e583ccbb8525a":["e3c94a8b8bf47db4f968d9ae510ec8bbe1372088","5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4ca20be81c9284c840498143264e583ccbb8525a"],"3021d8a7123d1812a48c0754dca068170c5645e3":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","b79a5db147a1c6f95d1625ddbc3561ef56955225","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b":["3021d8a7123d1812a48c0754dca068170c5645e3"],"ee8fbffa595c312bc0437f2c9bb6376a29c1b427":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b79a5db147a1c6f95d1625ddbc3561ef56955225":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","ee8fbffa595c312bc0437f2c9bb6376a29c1b427","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}