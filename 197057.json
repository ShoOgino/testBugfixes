{"path":"src/java/org/apache/lucene/document/Document#removeField(String).mjava","commits":[{"id":"4ed953963a1f948b2790a5aae0df9fad57dec5fb","date":1082481976,"type":0,"author":"Christoph Goller","isMerge":false,"pathNew":"src/java/org/apache/lucene/document/Document#removeField(String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Removes field with the given name from the document.\n   * If multiple fields exist with this name, this method returns the first value added.\n   * If there is no field with the specified name, the document remains unchanged.\n   */\n  public final void removeField(String name) {\n    Iterator it = fields.iterator();\n    while (it.hasNext()) {\n      Field field = (Field)it.next();\n      if (field.name().equals(name)) {\n        it.remove();\n        return;\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0c6b61338063e3c00ec0352a388466ce24b1441c","date":1082483716,"type":3,"author":"Christoph Goller","isMerge":false,"pathNew":"src/java/org/apache/lucene/document/Document#removeField(String).mjava","pathOld":"src/java/org/apache/lucene/document/Document#removeField(String).mjava","sourceNew":"  /**\n   * <p>Removes field with the given name from the document.\n   * If multiple fields exist with this name, this method returns the first value added.\n   * If there is no field with the specified name, the document remains unchanged.</p>\n   * <p> Note that the removeField(s) methods like the add method only make sense \n   * prior to adding a document to an index. These methods cannot\n   * be used to change the content of an existing index! In order to achieve this,\n   * a document has to be deleted from an index and a new changed version of that\n   * document has to be added.</p>\n   */\n  public final void removeField(String name) {\n    Iterator it = fields.iterator();\n    while (it.hasNext()) {\n      Field field = (Field)it.next();\n      if (field.name().equals(name)) {\n        it.remove();\n        return;\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Removes field with the given name from the document.\n   * If multiple fields exist with this name, this method returns the first value added.\n   * If there is no field with the specified name, the document remains unchanged.\n   */\n  public final void removeField(String name) {\n    Iterator it = fields.iterator();\n    while (it.hasNext()) {\n      Field field = (Field)it.next();\n      if (field.name().equals(name)) {\n        it.remove();\n        return;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1162050e592c7a6b2b6b8a9ebdf780c0c77c0688","date":1082567284,"type":3,"author":"Christoph Goller","isMerge":false,"pathNew":"src/java/org/apache/lucene/document/Document#removeField(String).mjava","pathOld":"src/java/org/apache/lucene/document/Document#removeField(String).mjava","sourceNew":"  /**\n   * <p>Removes field with the specified name from the document.\n   * If multiple fields exist with this name, this method removes the first field that has been added.\n   * If there is no field with the specified name, the document remains unchanged.</p>\n   * <p> Note that the removeField(s) methods like the add method only make sense \n   * prior to adding a document to an index. These methods cannot\n   * be used to change the content of an existing index! In order to achieve this,\n   * a document has to be deleted from an index and a new changed version of that\n   * document has to be added.</p>\n   */\n  public final void removeField(String name) {\n    Iterator it = fields.iterator();\n    while (it.hasNext()) {\n      Field field = (Field)it.next();\n      if (field.name().equals(name)) {\n        it.remove();\n        return;\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * <p>Removes field with the given name from the document.\n   * If multiple fields exist with this name, this method returns the first value added.\n   * If there is no field with the specified name, the document remains unchanged.</p>\n   * <p> Note that the removeField(s) methods like the add method only make sense \n   * prior to adding a document to an index. These methods cannot\n   * be used to change the content of an existing index! In order to achieve this,\n   * a document has to be deleted from an index and a new changed version of that\n   * document has to be added.</p>\n   */\n  public final void removeField(String name) {\n    Iterator it = fields.iterator();\n    while (it.hasNext()) {\n      Field field = (Field)it.next();\n      if (field.name().equals(name)) {\n        it.remove();\n        return;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"12d40284fd9481f79444bc63bc5d13847caddd3d","date":1149902602,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/java/org/apache/lucene/document/Document#removeField(String).mjava","pathOld":"src/java/org/apache/lucene/document/Document#removeField(String).mjava","sourceNew":"  /**\n   * <p>Removes field with the specified name from the document.\n   * If multiple fields exist with this name, this method removes the first field that has been added.\n   * If there is no field with the specified name, the document remains unchanged.</p>\n   * <p> Note that the removeField(s) methods like the add method only make sense \n   * prior to adding a document to an index. These methods cannot\n   * be used to change the content of an existing index! In order to achieve this,\n   * a document has to be deleted from an index and a new changed version of that\n   * document has to be added.</p>\n   */\n  public final void removeField(String name) {\n    Iterator it = fields.iterator();\n    while (it.hasNext()) {\n      Fieldable field = (Fieldable)it.next();\n      if (field.name().equals(name)) {\n        it.remove();\n        return;\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * <p>Removes field with the specified name from the document.\n   * If multiple fields exist with this name, this method removes the first field that has been added.\n   * If there is no field with the specified name, the document remains unchanged.</p>\n   * <p> Note that the removeField(s) methods like the add method only make sense \n   * prior to adding a document to an index. These methods cannot\n   * be used to change the content of an existing index! In order to achieve this,\n   * a document has to be deleted from an index and a new changed version of that\n   * document has to be added.</p>\n   */\n  public final void removeField(String name) {\n    Iterator it = fields.iterator();\n    while (it.hasNext()) {\n      Field field = (Field)it.next();\n      if (field.name().equals(name)) {\n        it.remove();\n        return;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a70c362dc47e16ef90835bd9d78415bdceefbd7e","date":1254561360,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/document/Document#removeField(String).mjava","pathOld":"src/java/org/apache/lucene/document/Document#removeField(String).mjava","sourceNew":"  /**\n   * <p>Removes field with the specified name from the document.\n   * If multiple fields exist with this name, this method removes the first field that has been added.\n   * If there is no field with the specified name, the document remains unchanged.</p>\n   * <p> Note that the removeField(s) methods like the add method only make sense \n   * prior to adding a document to an index. These methods cannot\n   * be used to change the content of an existing index! In order to achieve this,\n   * a document has to be deleted from an index and a new changed version of that\n   * document has to be added.</p>\n   */\n  public final void removeField(String name) {\n    Iterator<Fieldable> it = fields.iterator();\n    while (it.hasNext()) {\n      Fieldable field = (Fieldable)it.next();\n      if (field.name().equals(name)) {\n        it.remove();\n        return;\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * <p>Removes field with the specified name from the document.\n   * If multiple fields exist with this name, this method removes the first field that has been added.\n   * If there is no field with the specified name, the document remains unchanged.</p>\n   * <p> Note that the removeField(s) methods like the add method only make sense \n   * prior to adding a document to an index. These methods cannot\n   * be used to change the content of an existing index! In order to achieve this,\n   * a document has to be deleted from an index and a new changed version of that\n   * document has to be added.</p>\n   */\n  public final void removeField(String name) {\n    Iterator it = fields.iterator();\n    while (it.hasNext()) {\n      Fieldable field = (Fieldable)it.next();\n      if (field.name().equals(name)) {\n        it.remove();\n        return;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f63c5771d883c45d43e7d5ac11344582906f7d17","date":1256132259,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/document/Document#removeField(String).mjava","pathOld":"src/java/org/apache/lucene/document/Document#removeField(String).mjava","sourceNew":"  /**\n   * <p>Removes field with the specified name from the document.\n   * If multiple fields exist with this name, this method removes the first field that has been added.\n   * If there is no field with the specified name, the document remains unchanged.</p>\n   * <p> Note that the removeField(s) methods like the add method only make sense \n   * prior to adding a document to an index. These methods cannot\n   * be used to change the content of an existing index! In order to achieve this,\n   * a document has to be deleted from an index and a new changed version of that\n   * document has to be added.</p>\n   */\n  public final void removeField(String name) {\n    Iterator<Fieldable> it = fields.iterator();\n    while (it.hasNext()) {\n      Fieldable field = it.next();\n      if (field.name().equals(name)) {\n        it.remove();\n        return;\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * <p>Removes field with the specified name from the document.\n   * If multiple fields exist with this name, this method removes the first field that has been added.\n   * If there is no field with the specified name, the document remains unchanged.</p>\n   * <p> Note that the removeField(s) methods like the add method only make sense \n   * prior to adding a document to an index. These methods cannot\n   * be used to change the content of an existing index! In order to achieve this,\n   * a document has to be deleted from an index and a new changed version of that\n   * document has to be added.</p>\n   */\n  public final void removeField(String name) {\n    Iterator<Fieldable> it = fields.iterator();\n    while (it.hasNext()) {\n      Fieldable field = (Fieldable)it.next();\n      if (field.name().equals(name)) {\n        it.remove();\n        return;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":4,"author":"Dawid Weiss","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/document/Document#removeField(String).mjava","sourceNew":null,"sourceOld":"  /**\n   * <p>Removes field with the specified name from the document.\n   * If multiple fields exist with this name, this method removes the first field that has been added.\n   * If there is no field with the specified name, the document remains unchanged.</p>\n   * <p> Note that the removeField(s) methods like the add method only make sense \n   * prior to adding a document to an index. These methods cannot\n   * be used to change the content of an existing index! In order to achieve this,\n   * a document has to be deleted from an index and a new changed version of that\n   * document has to be added.</p>\n   */\n  public final void removeField(String name) {\n    Iterator<Fieldable> it = fields.iterator();\n    while (it.hasNext()) {\n      Fieldable field = it.next();\n      if (field.name().equals(name)) {\n        it.remove();\n        return;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a70c362dc47e16ef90835bd9d78415bdceefbd7e":["12d40284fd9481f79444bc63bc5d13847caddd3d"],"4ed953963a1f948b2790a5aae0df9fad57dec5fb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f63c5771d883c45d43e7d5ac11344582906f7d17":["a70c362dc47e16ef90835bd9d78415bdceefbd7e"],"12d40284fd9481f79444bc63bc5d13847caddd3d":["1162050e592c7a6b2b6b8a9ebdf780c0c77c0688"],"0c6b61338063e3c00ec0352a388466ce24b1441c":["4ed953963a1f948b2790a5aae0df9fad57dec5fb"],"1162050e592c7a6b2b6b8a9ebdf780c0c77c0688":["0c6b61338063e3c00ec0352a388466ce24b1441c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["f63c5771d883c45d43e7d5ac11344582906f7d17"]},"commit2Childs":{"a70c362dc47e16ef90835bd9d78415bdceefbd7e":["f63c5771d883c45d43e7d5ac11344582906f7d17"],"4ed953963a1f948b2790a5aae0df9fad57dec5fb":["0c6b61338063e3c00ec0352a388466ce24b1441c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4ed953963a1f948b2790a5aae0df9fad57dec5fb"],"f63c5771d883c45d43e7d5ac11344582906f7d17":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"12d40284fd9481f79444bc63bc5d13847caddd3d":["a70c362dc47e16ef90835bd9d78415bdceefbd7e"],"0c6b61338063e3c00ec0352a388466ce24b1441c":["1162050e592c7a6b2b6b8a9ebdf780c0c77c0688"],"1162050e592c7a6b2b6b8a9ebdf780c0c77c0688":["12d40284fd9481f79444bc63bc5d13847caddd3d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}