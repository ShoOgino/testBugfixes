{"path":"lucene/core/src/java/org/apache/lucene/codecs/block/BlockPostingsReader.EverythingEnum#nextDoc().mjava","commits":[{"id":"e885d2b1e112b1d9db6a2dae82b3b493dfba1df1","date":1342716838,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/block/BlockPostingsReader.EverythingEnum#nextDoc().mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public int nextDoc() throws IOException {\n\n      if (DEBUG) {\n        System.out.println(\"  FPR.nextDoc\");\n      }\n\n      if (indexHasPayloads) {\n        payloadByteUpto += payloadLength;\n        payloadLength = 0;\n      }\n\n      while (true) {\n        if (DEBUG) {\n          System.out.println(\"    docUpto=\" + docUpto + \" (of df=\" + docFreq + \") docBufferUpto=\" + docBufferUpto);\n        }\n\n        if (docUpto == docFreq) {\n          return doc = NO_MORE_DOCS;\n        }\n\n        if (docBufferUpto == blockSize) {\n          refillDocs();\n        }\n\n        if (DEBUG) {\n          System.out.println(\"    accum=\" + accum + \" docDeltaBuffer[\" + docBufferUpto + \"]=\" + docDeltaBuffer[docBufferUpto]);\n        }\n        accum += docDeltaBuffer[docBufferUpto];\n        freq = freqBuffer[docBufferUpto];\n        posPendingCount += freq;\n        docBufferUpto++;\n        docUpto++;\n\n        if (liveDocs == null || liveDocs.get(accum)) {\n          doc = accum;\n          if (DEBUG) {\n            System.out.println(\"    return doc=\" + doc + \" freq=\" + freq + \" posPendingCount=\" + posPendingCount);\n          }\n          position = 0;\n          payloadLength = 0;\n          lastEndOffset = 0;\n          return doc;\n        }\n\n        if (DEBUG) {\n          System.out.println(\"    doc=\" + accum + \" is deleted; try next doc\");\n        }\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["f81e20fb7784c464473faba4f1fdd4f775e8ee87"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f81e20fb7784c464473faba4f1fdd4f775e8ee87","date":1343937502,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/block/BlockPostingsReader.EverythingEnum#nextDoc().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/block/BlockPostingsReader.EverythingEnum#nextDoc().mjava","sourceNew":"    @Override\n    public int nextDoc() throws IOException {\n\n      if (DEBUG) {\n        System.out.println(\"  FPR.nextDoc\");\n      }\n\n      if (indexHasPayloads) {\n        payloadByteUpto += payloadLength;\n        payloadLength = 0;\n      }\n\n      while (true) {\n        if (DEBUG) {\n          System.out.println(\"    docUpto=\" + docUpto + \" (of df=\" + docFreq + \") docBufferUpto=\" + docBufferUpto);\n        }\n\n        if (docUpto == docFreq) {\n          return doc = NO_MORE_DOCS;\n        }\n\n        if (docBufferUpto == blockSize) {\n          refillDocs();\n        }\n\n        if (DEBUG) {\n          System.out.println(\"    accum=\" + accum + \" docDeltaBuffer[\" + docBufferUpto + \"]=\" + docDeltaBuffer[docBufferUpto]);\n        }\n        accum += docDeltaBuffer[docBufferUpto];\n        freq = freqBuffer[docBufferUpto];\n        posPendingCount += freq;\n        docBufferUpto++;\n        docUpto++;\n\n        if (liveDocs == null || liveDocs.get(accum)) {\n          doc = accum;\n          if (DEBUG) {\n            System.out.println(\"    return doc=\" + doc + \" freq=\" + freq + \" posPendingCount=\" + posPendingCount);\n          }\n          position = 0;\n          payloadLength = 0;\n          lastStartOffset = 0;\n          return doc;\n        }\n\n        if (DEBUG) {\n          System.out.println(\"    doc=\" + accum + \" is deleted; try next doc\");\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public int nextDoc() throws IOException {\n\n      if (DEBUG) {\n        System.out.println(\"  FPR.nextDoc\");\n      }\n\n      if (indexHasPayloads) {\n        payloadByteUpto += payloadLength;\n        payloadLength = 0;\n      }\n\n      while (true) {\n        if (DEBUG) {\n          System.out.println(\"    docUpto=\" + docUpto + \" (of df=\" + docFreq + \") docBufferUpto=\" + docBufferUpto);\n        }\n\n        if (docUpto == docFreq) {\n          return doc = NO_MORE_DOCS;\n        }\n\n        if (docBufferUpto == blockSize) {\n          refillDocs();\n        }\n\n        if (DEBUG) {\n          System.out.println(\"    accum=\" + accum + \" docDeltaBuffer[\" + docBufferUpto + \"]=\" + docDeltaBuffer[docBufferUpto]);\n        }\n        accum += docDeltaBuffer[docBufferUpto];\n        freq = freqBuffer[docBufferUpto];\n        posPendingCount += freq;\n        docBufferUpto++;\n        docUpto++;\n\n        if (liveDocs == null || liveDocs.get(accum)) {\n          doc = accum;\n          if (DEBUG) {\n            System.out.println(\"    return doc=\" + doc + \" freq=\" + freq + \" posPendingCount=\" + posPendingCount);\n          }\n          position = 0;\n          payloadLength = 0;\n          lastEndOffset = 0;\n          return doc;\n        }\n\n        if (DEBUG) {\n          System.out.println(\"    doc=\" + accum + \" is deleted; try next doc\");\n        }\n      }\n    }\n\n","bugFix":["e885d2b1e112b1d9db6a2dae82b3b493dfba1df1"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8081d5018e8846bf4080f2809432c759996e749f","date":1344206372,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/block/BlockPostingsReader.EverythingEnum#nextDoc().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/block/BlockPostingsReader.EverythingEnum#nextDoc().mjava","sourceNew":"    @Override\n    public int nextDoc() throws IOException {\n      if (DEBUG) {\n        System.out.println(\"  FPR.nextDoc\");\n      }\n      if (indexHasPayloads) {\n        payloadByteUpto += payloadLength;\n        payloadLength = 0;\n      }\n      while (true) {\n        if (DEBUG) {\n          System.out.println(\"    docUpto=\" + docUpto + \" (of df=\" + docFreq + \") docBufferUpto=\" + docBufferUpto);\n        }\n        if (docUpto == docFreq) {\n          return doc = NO_MORE_DOCS;\n        }\n        //System.out.println(\"[\"+docFreq+\"]\"+\" nextDoc\");\n        if (docBufferUpto == blockSize) {\n          refillDocs();\n        }\n        if (DEBUG) {\n          System.out.println(\"    accum=\" + accum + \" docDeltaBuffer[\" + docBufferUpto + \"]=\" + docDeltaBuffer[docBufferUpto]);\n        }\n        accum += docDeltaBuffer[docBufferUpto];\n        freq = freqBuffer[docBufferUpto];\n        posPendingCount += freq;\n        docBufferUpto++;\n        docUpto++;\n\n        if (liveDocs == null || liveDocs.get(accum)) {\n          doc = accum;\n          if (DEBUG) {\n            System.out.println(\"    return doc=\" + doc + \" freq=\" + freq + \" posPendingCount=\" + posPendingCount);\n          }\n          position = 0;\n          payloadLength = 0;\n          lastStartOffset = 0;\n          return doc;\n        }\n        if (DEBUG) {\n          System.out.println(\"    doc=\" + accum + \" is deleted; try next doc\");\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public int nextDoc() throws IOException {\n\n      if (DEBUG) {\n        System.out.println(\"  FPR.nextDoc\");\n      }\n\n      if (indexHasPayloads) {\n        payloadByteUpto += payloadLength;\n        payloadLength = 0;\n      }\n\n      while (true) {\n        if (DEBUG) {\n          System.out.println(\"    docUpto=\" + docUpto + \" (of df=\" + docFreq + \") docBufferUpto=\" + docBufferUpto);\n        }\n\n        if (docUpto == docFreq) {\n          return doc = NO_MORE_DOCS;\n        }\n\n        if (docBufferUpto == blockSize) {\n          refillDocs();\n        }\n\n        if (DEBUG) {\n          System.out.println(\"    accum=\" + accum + \" docDeltaBuffer[\" + docBufferUpto + \"]=\" + docDeltaBuffer[docBufferUpto]);\n        }\n        accum += docDeltaBuffer[docBufferUpto];\n        freq = freqBuffer[docBufferUpto];\n        posPendingCount += freq;\n        docBufferUpto++;\n        docUpto++;\n\n        if (liveDocs == null || liveDocs.get(accum)) {\n          doc = accum;\n          if (DEBUG) {\n            System.out.println(\"    return doc=\" + doc + \" freq=\" + freq + \" posPendingCount=\" + posPendingCount);\n          }\n          position = 0;\n          payloadLength = 0;\n          lastStartOffset = 0;\n          return doc;\n        }\n\n        if (DEBUG) {\n          System.out.println(\"    doc=\" + accum + \" is deleted; try next doc\");\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2f8624b27ae4159f0d53a55e5c9c5c6f6fa8f51","date":1344355078,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/block/BlockPostingsReader.EverythingEnum#nextDoc().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/block/BlockPostingsReader.EverythingEnum#nextDoc().mjava","sourceNew":"    @Override\n    public int nextDoc() throws IOException {\n      if (DEBUG) {\n        System.out.println(\"  FPR.nextDoc\");\n      }\n      if (indexHasPayloads) {\n        payloadByteUpto += payloadLength;\n        payloadLength = 0;\n      }\n      while (true) {\n        if (DEBUG) {\n          System.out.println(\"    docUpto=\" + docUpto + \" (of df=\" + docFreq + \") docBufferUpto=\" + docBufferUpto);\n        }\n        if (docUpto == docFreq) {\n          return doc = NO_MORE_DOCS;\n        }\n        //System.out.println(\"[\"+docFreq+\"]\"+\" nextDoc\");\n        if (docBufferUpto == BLOCK_SIZE) {\n          refillDocs();\n        }\n        if (DEBUG) {\n          System.out.println(\"    accum=\" + accum + \" docDeltaBuffer[\" + docBufferUpto + \"]=\" + docDeltaBuffer[docBufferUpto]);\n        }\n        accum += docDeltaBuffer[docBufferUpto];\n        freq = freqBuffer[docBufferUpto];\n        posPendingCount += freq;\n        docBufferUpto++;\n        docUpto++;\n\n        if (liveDocs == null || liveDocs.get(accum)) {\n          doc = accum;\n          if (DEBUG) {\n            System.out.println(\"    return doc=\" + doc + \" freq=\" + freq + \" posPendingCount=\" + posPendingCount);\n          }\n          position = 0;\n          payloadLength = 0;\n          lastStartOffset = 0;\n          return doc;\n        }\n        if (DEBUG) {\n          System.out.println(\"    doc=\" + accum + \" is deleted; try next doc\");\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public int nextDoc() throws IOException {\n      if (DEBUG) {\n        System.out.println(\"  FPR.nextDoc\");\n      }\n      if (indexHasPayloads) {\n        payloadByteUpto += payloadLength;\n        payloadLength = 0;\n      }\n      while (true) {\n        if (DEBUG) {\n          System.out.println(\"    docUpto=\" + docUpto + \" (of df=\" + docFreq + \") docBufferUpto=\" + docBufferUpto);\n        }\n        if (docUpto == docFreq) {\n          return doc = NO_MORE_DOCS;\n        }\n        //System.out.println(\"[\"+docFreq+\"]\"+\" nextDoc\");\n        if (docBufferUpto == blockSize) {\n          refillDocs();\n        }\n        if (DEBUG) {\n          System.out.println(\"    accum=\" + accum + \" docDeltaBuffer[\" + docBufferUpto + \"]=\" + docDeltaBuffer[docBufferUpto]);\n        }\n        accum += docDeltaBuffer[docBufferUpto];\n        freq = freqBuffer[docBufferUpto];\n        posPendingCount += freq;\n        docBufferUpto++;\n        docUpto++;\n\n        if (liveDocs == null || liveDocs.get(accum)) {\n          doc = accum;\n          if (DEBUG) {\n            System.out.println(\"    return doc=\" + doc + \" freq=\" + freq + \" posPendingCount=\" + posPendingCount);\n          }\n          position = 0;\n          payloadLength = 0;\n          lastStartOffset = 0;\n          return doc;\n        }\n        if (DEBUG) {\n          System.out.println(\"    doc=\" + accum + \" is deleted; try next doc\");\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74bd7635df51d421ac314f25514733c8f4c69981","date":1344466925,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/block/BlockPostingsReader.EverythingEnum#nextDoc().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/block/BlockPostingsReader.EverythingEnum#nextDoc().mjava","sourceNew":"    @Override\n    public int nextDoc() throws IOException {\n      if (DEBUG) {\n        System.out.println(\"  FPR.nextDoc\");\n      }\n      if (indexHasPayloads) {\n        payloadByteUpto += payloadLength;\n        payloadLength = 0;\n      }\n      while (true) {\n        if (DEBUG) {\n          System.out.println(\"    docUpto=\" + docUpto + \" (of df=\" + docFreq + \") docBufferUpto=\" + docBufferUpto);\n        }\n        if (docUpto == docFreq) {\n          return doc = NO_MORE_DOCS;\n        }\n        if (docBufferUpto == BLOCK_SIZE) {\n          refillDocs();\n        }\n        if (DEBUG) {\n          System.out.println(\"    accum=\" + accum + \" docDeltaBuffer[\" + docBufferUpto + \"]=\" + docDeltaBuffer[docBufferUpto]);\n        }\n        accum += docDeltaBuffer[docBufferUpto];\n        freq = freqBuffer[docBufferUpto];\n        posPendingCount += freq;\n        docBufferUpto++;\n        docUpto++;\n\n        if (liveDocs == null || liveDocs.get(accum)) {\n          doc = accum;\n          if (DEBUG) {\n            System.out.println(\"    return doc=\" + doc + \" freq=\" + freq + \" posPendingCount=\" + posPendingCount);\n          }\n          position = 0;\n          payloadLength = 0;\n          lastStartOffset = 0;\n          return doc;\n        }\n        if (DEBUG) {\n          System.out.println(\"    doc=\" + accum + \" is deleted; try next doc\");\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public int nextDoc() throws IOException {\n      if (DEBUG) {\n        System.out.println(\"  FPR.nextDoc\");\n      }\n      if (indexHasPayloads) {\n        payloadByteUpto += payloadLength;\n        payloadLength = 0;\n      }\n      while (true) {\n        if (DEBUG) {\n          System.out.println(\"    docUpto=\" + docUpto + \" (of df=\" + docFreq + \") docBufferUpto=\" + docBufferUpto);\n        }\n        if (docUpto == docFreq) {\n          return doc = NO_MORE_DOCS;\n        }\n        //System.out.println(\"[\"+docFreq+\"]\"+\" nextDoc\");\n        if (docBufferUpto == BLOCK_SIZE) {\n          refillDocs();\n        }\n        if (DEBUG) {\n          System.out.println(\"    accum=\" + accum + \" docDeltaBuffer[\" + docBufferUpto + \"]=\" + docDeltaBuffer[docBufferUpto]);\n        }\n        accum += docDeltaBuffer[docBufferUpto];\n        freq = freqBuffer[docBufferUpto];\n        posPendingCount += freq;\n        docBufferUpto++;\n        docUpto++;\n\n        if (liveDocs == null || liveDocs.get(accum)) {\n          doc = accum;\n          if (DEBUG) {\n            System.out.println(\"    return doc=\" + doc + \" freq=\" + freq + \" posPendingCount=\" + posPendingCount);\n          }\n          position = 0;\n          payloadLength = 0;\n          lastStartOffset = 0;\n          return doc;\n        }\n        if (DEBUG) {\n          System.out.println(\"    doc=\" + accum + \" is deleted; try next doc\");\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e6b41208259e8566cba0ecac7da6a331ea9732dd","date":1344551376,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/block/BlockPostingsReader.EverythingEnum#nextDoc().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/block/BlockPostingsReader.EverythingEnum#nextDoc().mjava","sourceNew":"    @Override\n    public int nextDoc() throws IOException {\n      if (DEBUG) {\n        System.out.println(\"  FPR.nextDoc\");\n      }\n      if (indexHasPayloads) {\n        payloadByteUpto += payloadLength;\n        payloadLength = 0;\n      }\n      while (true) {\n        if (DEBUG) {\n          System.out.println(\"    docUpto=\" + docUpto + \" (of df=\" + docFreq + \") docBufferUpto=\" + docBufferUpto);\n        }\n        if (docUpto == docFreq) {\n          return doc = NO_MORE_DOCS;\n        }\n        if (docBufferUpto == BLOCK_SIZE) {\n          refillDocs();\n        }\n        if (DEBUG) {\n          System.out.println(\"    accum=\" + accum + \" docDeltaBuffer[\" + docBufferUpto + \"]=\" + docDeltaBuffer[docBufferUpto]);\n        }\n        accum += docDeltaBuffer[docBufferUpto];\n        freq = freqBuffer[docBufferUpto];\n        posPendingCount += freq;\n        docBufferUpto++;\n        docUpto++;\n\n        if (liveDocs == null || liveDocs.get(accum)) {\n          doc = accum;\n          if (DEBUG) {\n            System.out.println(\"    return doc=\" + doc + \" freq=\" + freq + \" posPendingCount=\" + posPendingCount);\n          }\n          position = 0;\n          payloadLength = 0;\n          lastStartOffset = 0;\n          return doc;\n        }\n\n        if (DEBUG) {\n          System.out.println(\"    doc=\" + accum + \" is deleted; try next doc\");\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public int nextDoc() throws IOException {\n      if (DEBUG) {\n        System.out.println(\"  FPR.nextDoc\");\n      }\n      if (indexHasPayloads) {\n        payloadByteUpto += payloadLength;\n        payloadLength = 0;\n      }\n      while (true) {\n        if (DEBUG) {\n          System.out.println(\"    docUpto=\" + docUpto + \" (of df=\" + docFreq + \") docBufferUpto=\" + docBufferUpto);\n        }\n        if (docUpto == docFreq) {\n          return doc = NO_MORE_DOCS;\n        }\n        if (docBufferUpto == BLOCK_SIZE) {\n          refillDocs();\n        }\n        if (DEBUG) {\n          System.out.println(\"    accum=\" + accum + \" docDeltaBuffer[\" + docBufferUpto + \"]=\" + docDeltaBuffer[docBufferUpto]);\n        }\n        accum += docDeltaBuffer[docBufferUpto];\n        freq = freqBuffer[docBufferUpto];\n        posPendingCount += freq;\n        docBufferUpto++;\n        docUpto++;\n\n        if (liveDocs == null || liveDocs.get(accum)) {\n          doc = accum;\n          if (DEBUG) {\n            System.out.println(\"    return doc=\" + doc + \" freq=\" + freq + \" posPendingCount=\" + posPendingCount);\n          }\n          position = 0;\n          payloadLength = 0;\n          lastStartOffset = 0;\n          return doc;\n        }\n        if (DEBUG) {\n          System.out.println(\"    doc=\" + accum + \" is deleted; try next doc\");\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7869f64c874ebf7f317d22c00baf2b6857797a6","date":1344856617,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/block/BlockPostingsReader.EverythingEnum#nextDoc().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/block/BlockPostingsReader.EverythingEnum#nextDoc().mjava","sourceNew":"    @Override\n    public int nextDoc() throws IOException {\n      if (DEBUG) {\n        System.out.println(\"  FPR.nextDoc\");\n      }\n      while (true) {\n        if (DEBUG) {\n          System.out.println(\"    docUpto=\" + docUpto + \" (of df=\" + docFreq + \") docBufferUpto=\" + docBufferUpto);\n        }\n        if (docUpto == docFreq) {\n          return doc = NO_MORE_DOCS;\n        }\n        if (docBufferUpto == BLOCK_SIZE) {\n          refillDocs();\n        }\n        if (DEBUG) {\n          System.out.println(\"    accum=\" + accum + \" docDeltaBuffer[\" + docBufferUpto + \"]=\" + docDeltaBuffer[docBufferUpto]);\n        }\n        accum += docDeltaBuffer[docBufferUpto];\n        freq = freqBuffer[docBufferUpto];\n        posPendingCount += freq;\n        docBufferUpto++;\n        docUpto++;\n\n        if (liveDocs == null || liveDocs.get(accum)) {\n          doc = accum;\n          if (DEBUG) {\n            System.out.println(\"    return doc=\" + doc + \" freq=\" + freq + \" posPendingCount=\" + posPendingCount);\n          }\n          position = 0;\n          lastStartOffset = 0;\n          return doc;\n        }\n\n        if (DEBUG) {\n          System.out.println(\"    doc=\" + accum + \" is deleted; try next doc\");\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public int nextDoc() throws IOException {\n      if (DEBUG) {\n        System.out.println(\"  FPR.nextDoc\");\n      }\n      if (indexHasPayloads) {\n        payloadByteUpto += payloadLength;\n        payloadLength = 0;\n      }\n      while (true) {\n        if (DEBUG) {\n          System.out.println(\"    docUpto=\" + docUpto + \" (of df=\" + docFreq + \") docBufferUpto=\" + docBufferUpto);\n        }\n        if (docUpto == docFreq) {\n          return doc = NO_MORE_DOCS;\n        }\n        if (docBufferUpto == BLOCK_SIZE) {\n          refillDocs();\n        }\n        if (DEBUG) {\n          System.out.println(\"    accum=\" + accum + \" docDeltaBuffer[\" + docBufferUpto + \"]=\" + docDeltaBuffer[docBufferUpto]);\n        }\n        accum += docDeltaBuffer[docBufferUpto];\n        freq = freqBuffer[docBufferUpto];\n        posPendingCount += freq;\n        docBufferUpto++;\n        docUpto++;\n\n        if (liveDocs == null || liveDocs.get(accum)) {\n          doc = accum;\n          if (DEBUG) {\n            System.out.println(\"    return doc=\" + doc + \" freq=\" + freq + \" posPendingCount=\" + posPendingCount);\n          }\n          position = 0;\n          payloadLength = 0;\n          lastStartOffset = 0;\n          return doc;\n        }\n\n        if (DEBUG) {\n          System.out.println(\"    doc=\" + accum + \" is deleted; try next doc\");\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fcc6cbc7e8693270112e8d40ca98226199c0288e","date":1345039720,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/block/BlockPostingsReader.EverythingEnum#nextDoc().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/block/BlockPostingsReader.EverythingEnum#nextDoc().mjava","sourceNew":"    @Override\n    public int nextDoc() throws IOException {\n      // if (DEBUG) {\n      //   System.out.println(\"  FPR.nextDoc\");\n      // }\n      while (true) {\n        // if (DEBUG) {\n        //   System.out.println(\"    docUpto=\" + docUpto + \" (of df=\" + docFreq + \") docBufferUpto=\" + docBufferUpto);\n        // }\n        if (docUpto == docFreq) {\n          return doc = NO_MORE_DOCS;\n        }\n        if (docBufferUpto == BLOCK_SIZE) {\n          refillDocs();\n        }\n        // if (DEBUG) {\n        //   System.out.println(\"    accum=\" + accum + \" docDeltaBuffer[\" + docBufferUpto + \"]=\" + docDeltaBuffer[docBufferUpto]);\n        // }\n        accum += docDeltaBuffer[docBufferUpto];\n        freq = freqBuffer[docBufferUpto];\n        posPendingCount += freq;\n        docBufferUpto++;\n        docUpto++;\n\n        if (liveDocs == null || liveDocs.get(accum)) {\n          doc = accum;\n          // if (DEBUG) {\n          //   System.out.println(\"    return doc=\" + doc + \" freq=\" + freq + \" posPendingCount=\" + posPendingCount);\n          // }\n          position = 0;\n          lastStartOffset = 0;\n          return doc;\n        }\n\n        // if (DEBUG) {\n        //   System.out.println(\"    doc=\" + accum + \" is deleted; try next doc\");\n        // }\n      }\n    }\n\n","sourceOld":"    @Override\n    public int nextDoc() throws IOException {\n      if (DEBUG) {\n        System.out.println(\"  FPR.nextDoc\");\n      }\n      while (true) {\n        if (DEBUG) {\n          System.out.println(\"    docUpto=\" + docUpto + \" (of df=\" + docFreq + \") docBufferUpto=\" + docBufferUpto);\n        }\n        if (docUpto == docFreq) {\n          return doc = NO_MORE_DOCS;\n        }\n        if (docBufferUpto == BLOCK_SIZE) {\n          refillDocs();\n        }\n        if (DEBUG) {\n          System.out.println(\"    accum=\" + accum + \" docDeltaBuffer[\" + docBufferUpto + \"]=\" + docDeltaBuffer[docBufferUpto]);\n        }\n        accum += docDeltaBuffer[docBufferUpto];\n        freq = freqBuffer[docBufferUpto];\n        posPendingCount += freq;\n        docBufferUpto++;\n        docUpto++;\n\n        if (liveDocs == null || liveDocs.get(accum)) {\n          doc = accum;\n          if (DEBUG) {\n            System.out.println(\"    return doc=\" + doc + \" freq=\" + freq + \" posPendingCount=\" + posPendingCount);\n          }\n          position = 0;\n          lastStartOffset = 0;\n          return doc;\n        }\n\n        if (DEBUG) {\n          System.out.println(\"    doc=\" + accum + \" is deleted; try next doc\");\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8615860cb50aefb8eebca1d1b3893dbe21cf126","date":1345550448,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/block/BlockPostingsReader.EverythingEnum#nextDoc().mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public int nextDoc() throws IOException {\n      // if (DEBUG) {\n      //   System.out.println(\"  FPR.nextDoc\");\n      // }\n      while (true) {\n        // if (DEBUG) {\n        //   System.out.println(\"    docUpto=\" + docUpto + \" (of df=\" + docFreq + \") docBufferUpto=\" + docBufferUpto);\n        // }\n        if (docUpto == docFreq) {\n          return doc = NO_MORE_DOCS;\n        }\n        if (docBufferUpto == BLOCK_SIZE) {\n          refillDocs();\n        }\n        // if (DEBUG) {\n        //   System.out.println(\"    accum=\" + accum + \" docDeltaBuffer[\" + docBufferUpto + \"]=\" + docDeltaBuffer[docBufferUpto]);\n        // }\n        accum += docDeltaBuffer[docBufferUpto];\n        freq = freqBuffer[docBufferUpto];\n        posPendingCount += freq;\n        docBufferUpto++;\n        docUpto++;\n\n        if (liveDocs == null || liveDocs.get(accum)) {\n          doc = accum;\n          // if (DEBUG) {\n          //   System.out.println(\"    return doc=\" + doc + \" freq=\" + freq + \" posPendingCount=\" + posPendingCount);\n          // }\n          position = 0;\n          lastStartOffset = 0;\n          return doc;\n        }\n\n        // if (DEBUG) {\n        //   System.out.println(\"    doc=\" + accum + \" is deleted; try next doc\");\n        // }\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"001b25b42373b22a52f399dbf072f1224632e8e6","date":1345889167,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/block/BlockPostingsReader.EverythingEnum#nextDoc().mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public int nextDoc() throws IOException {\n      // if (DEBUG) {\n      //   System.out.println(\"  FPR.nextDoc\");\n      // }\n      while (true) {\n        // if (DEBUG) {\n        //   System.out.println(\"    docUpto=\" + docUpto + \" (of df=\" + docFreq + \") docBufferUpto=\" + docBufferUpto);\n        // }\n        if (docUpto == docFreq) {\n          return doc = NO_MORE_DOCS;\n        }\n        if (docBufferUpto == BLOCK_SIZE) {\n          refillDocs();\n        }\n        // if (DEBUG) {\n        //   System.out.println(\"    accum=\" + accum + \" docDeltaBuffer[\" + docBufferUpto + \"]=\" + docDeltaBuffer[docBufferUpto]);\n        // }\n        accum += docDeltaBuffer[docBufferUpto];\n        freq = freqBuffer[docBufferUpto];\n        posPendingCount += freq;\n        docBufferUpto++;\n        docUpto++;\n\n        if (liveDocs == null || liveDocs.get(accum)) {\n          doc = accum;\n          // if (DEBUG) {\n          //   System.out.println(\"    return doc=\" + doc + \" freq=\" + freq + \" posPendingCount=\" + posPendingCount);\n          // }\n          position = 0;\n          lastStartOffset = 0;\n          return doc;\n        }\n\n        // if (DEBUG) {\n        //   System.out.println(\"    doc=\" + accum + \" is deleted; try next doc\");\n        // }\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2","date":1346834651,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/block/BlockPostingsReader.EverythingEnum#nextDoc().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/block/BlockPostingsReader.EverythingEnum#nextDoc().mjava","sourceNew":"    @Override\n    public int nextDoc() throws IOException {\n      // if (DEBUG) {\n      //   System.out.println(\"  FPR.nextDoc\");\n      // }\n      while (true) {\n        // if (DEBUG) {\n        //   System.out.println(\"    docUpto=\" + docUpto + \" (of df=\" + docFreq + \") docBufferUpto=\" + docBufferUpto);\n        // }\n        if (docUpto == docFreq) {\n          return doc = NO_MORE_DOCS;\n        }\n        if (docBufferUpto == BLOCK_SIZE) {\n          refillDocs();\n        }\n        // if (DEBUG) {\n        //   System.out.println(\"    accum=\" + accum + \" docDeltaBuffer[\" + docBufferUpto + \"]=\" + docDeltaBuffer[docBufferUpto]);\n        // }\n        accum += docDeltaBuffer[docBufferUpto];\n        freq = freqBuffer[docBufferUpto];\n        posPendingCount += freq;\n        docBufferUpto++;\n        docUpto++;\n\n        if (liveDocs == null || liveDocs.get(accum)) {\n          doc = accum;\n          // if (DEBUG) {\n          //   System.out.println(\"    return doc=\" + doc + \" freq=\" + freq + \" posPendingCount=\" + posPendingCount);\n          // }\n          position = 0;\n          lastStartOffset = 0;\n          return doc;\n        }\n\n        // if (DEBUG) {\n        //   System.out.println(\"    doc=\" + accum + \" is deleted; try next doc\");\n        // }\n      }\n    }\n\n","sourceOld":"    @Override\n    public int nextDoc() throws IOException {\n      // if (DEBUG) {\n      //   System.out.println(\"  FPR.nextDoc\");\n      // }\n      while (true) {\n        // if (DEBUG) {\n        //   System.out.println(\"    docUpto=\" + docUpto + \" (of df=\" + docFreq + \") docBufferUpto=\" + docBufferUpto);\n        // }\n        if (docUpto == docFreq) {\n          return doc = NO_MORE_DOCS;\n        }\n        if (docBufferUpto == BLOCK_SIZE) {\n          refillDocs();\n        }\n        // if (DEBUG) {\n        //   System.out.println(\"    accum=\" + accum + \" docDeltaBuffer[\" + docBufferUpto + \"]=\" + docDeltaBuffer[docBufferUpto]);\n        // }\n        accum += docDeltaBuffer[docBufferUpto];\n        freq = freqBuffer[docBufferUpto];\n        posPendingCount += freq;\n        docBufferUpto++;\n        docUpto++;\n\n        if (liveDocs == null || liveDocs.get(accum)) {\n          doc = accum;\n          // if (DEBUG) {\n          //   System.out.println(\"    return doc=\" + doc + \" freq=\" + freq + \" posPendingCount=\" + posPendingCount);\n          // }\n          position = 0;\n          lastStartOffset = 0;\n          return doc;\n        }\n\n        // if (DEBUG) {\n        //   System.out.println(\"    doc=\" + accum + \" is deleted; try next doc\");\n        // }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"001b25b42373b22a52f399dbf072f1224632e8e6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f8615860cb50aefb8eebca1d1b3893dbe21cf126"],"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["f8615860cb50aefb8eebca1d1b3893dbe21cf126"],"f8615860cb50aefb8eebca1d1b3893dbe21cf126":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","fcc6cbc7e8693270112e8d40ca98226199c0288e"],"fcc6cbc7e8693270112e8d40ca98226199c0288e":["c7869f64c874ebf7f317d22c00baf2b6857797a6"],"e6b41208259e8566cba0ecac7da6a331ea9732dd":["74bd7635df51d421ac314f25514733c8f4c69981"],"f81e20fb7784c464473faba4f1fdd4f775e8ee87":["e885d2b1e112b1d9db6a2dae82b3b493dfba1df1"],"74bd7635df51d421ac314f25514733c8f4c69981":["d2f8624b27ae4159f0d53a55e5c9c5c6f6fa8f51"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":["e6b41208259e8566cba0ecac7da6a331ea9732dd","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d2f8624b27ae4159f0d53a55e5c9c5c6f6fa8f51":["8081d5018e8846bf4080f2809432c759996e749f"],"e885d2b1e112b1d9db6a2dae82b3b493dfba1df1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8081d5018e8846bf4080f2809432c759996e749f":["f81e20fb7784c464473faba4f1fdd4f775e8ee87"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"]},"commit2Childs":{"001b25b42373b22a52f399dbf072f1224632e8e6":[],"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f8615860cb50aefb8eebca1d1b3893dbe21cf126":["001b25b42373b22a52f399dbf072f1224632e8e6","3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"],"fcc6cbc7e8693270112e8d40ca98226199c0288e":["f8615860cb50aefb8eebca1d1b3893dbe21cf126"],"e6b41208259e8566cba0ecac7da6a331ea9732dd":["c7869f64c874ebf7f317d22c00baf2b6857797a6"],"f81e20fb7784c464473faba4f1fdd4f775e8ee87":["8081d5018e8846bf4080f2809432c759996e749f"],"74bd7635df51d421ac314f25514733c8f4c69981":["e6b41208259e8566cba0ecac7da6a331ea9732dd"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":["fcc6cbc7e8693270112e8d40ca98226199c0288e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["001b25b42373b22a52f399dbf072f1224632e8e6","f8615860cb50aefb8eebca1d1b3893dbe21cf126","c7869f64c874ebf7f317d22c00baf2b6857797a6","e885d2b1e112b1d9db6a2dae82b3b493dfba1df1"],"e885d2b1e112b1d9db6a2dae82b3b493dfba1df1":["f81e20fb7784c464473faba4f1fdd4f775e8ee87"],"d2f8624b27ae4159f0d53a55e5c9c5c6f6fa8f51":["74bd7635df51d421ac314f25514733c8f4c69981"],"8081d5018e8846bf4080f2809432c759996e749f":["d2f8624b27ae4159f0d53a55e5c9c5c6f6fa8f51"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["001b25b42373b22a52f399dbf072f1224632e8e6","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}