{"path":"solr/contrib/analytics/src/java/org/apache/solr/analytics/facet/PivotNode#exportPivot(DataOutput,Map[String,T]).mjava","commits":[{"id":"c495edcca4d0bc51bf62d9be3527c87bf9b44ded","date":1498673617,"type":0,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/analytics/facet/PivotNode#exportPivot(DataOutput,Map[String,T]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Export the shard data through a bit-stream for the given pivot, \n   * to be imported by the {@link #importPivot} method in the originating shard.\n   * \n   * @param output The bit-stream to output the data through\n   * @param pivot the values for this pivot node and the pivot children (if they exist)\n   * @throws IOException if an exception occurs while writing to the {@link DataOutput}\n   */\n  public void exportPivot(DataOutput output, Map<String,T> pivot) throws IOException {\n    output.writeInt(pivot.size());\n    for (String pivotValue : pivot.keySet()) {\n      output.writeUTF(pivotValue);\n      exportPivotValue(output, pivot.get(pivotValue));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/analytics/facet/PivotNode#exportPivot(DataOutput,Map[String,T]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Export the shard data through a bit-stream for the given pivot, \n   * to be imported by the {@link #importPivot} method in the originating shard.\n   * \n   * @param output The bit-stream to output the data through\n   * @param pivot the values for this pivot node and the pivot children (if they exist)\n   * @throws IOException if an exception occurs while writing to the {@link DataOutput}\n   */\n  public void exportPivot(DataOutput output, Map<String,T> pivot) throws IOException {\n    output.writeInt(pivot.size());\n    for (String pivotValue : pivot.keySet()) {\n      output.writeUTF(pivotValue);\n      exportPivotValue(output, pivot.get(pivotValue));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30c8e5574b55d57947e989443dfde611646530ee","date":1499131153,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/analytics/facet/PivotNode#exportPivot(DataOutput,Map[String,T]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Export the shard data through a bit-stream for the given pivot, \n   * to be imported by the {@link #importPivot} method in the originating shard.\n   * \n   * @param output The bit-stream to output the data through\n   * @param pivot the values for this pivot node and the pivot children (if they exist)\n   * @throws IOException if an exception occurs while writing to the {@link DataOutput}\n   */\n  public void exportPivot(DataOutput output, Map<String,T> pivot) throws IOException {\n    output.writeInt(pivot.size());\n    for (String pivotValue : pivot.keySet()) {\n      output.writeUTF(pivotValue);\n      exportPivotValue(output, pivot.get(pivotValue));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e4e64b7199d2f2a17be7f3926c7532553910dce","date":1564342581,"type":3,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/analytics/facet/PivotNode#exportPivot(DataOutput,Map[String,T]).mjava","pathOld":"solr/contrib/analytics/src/java/org/apache/solr/analytics/facet/PivotNode#exportPivot(DataOutput,Map[String,T]).mjava","sourceNew":"  /**\n   * Export the shard data through a bit-stream for the given pivot,\n   * to be imported by the {@link #importPivot} method in the originating shard.\n   *\n   * @param output The bit-stream to output the data through\n   * @param pivot the values for this pivot node and the pivot children (if they exist)\n   * @throws IOException if an exception occurs while writing to the {@link DataOutput}\n   */\n  public void exportPivot(DataOutput output, Map<String,T> pivot) throws IOException {\n    output.writeInt(pivot.size());\n    for (String pivotValue : pivot.keySet()) {\n      output.writeUTF(pivotValue);\n      exportPivotValue(output, pivot.get(pivotValue));\n    }\n  }\n\n","sourceOld":"  /**\n   * Export the shard data through a bit-stream for the given pivot, \n   * to be imported by the {@link #importPivot} method in the originating shard.\n   * \n   * @param output The bit-stream to output the data through\n   * @param pivot the values for this pivot node and the pivot children (if they exist)\n   * @throws IOException if an exception occurs while writing to the {@link DataOutput}\n   */\n  public void exportPivot(DataOutput output, Map<String,T> pivot) throws IOException {\n    output.writeInt(pivot.size());\n    for (String pivotValue : pivot.keySet()) {\n      output.writeUTF(pivotValue);\n      exportPivotValue(output, pivot.get(pivotValue));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":3,"author":"Atri Sharma","isMerge":true,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/analytics/facet/PivotNode#exportPivot(DataOutput,Map[String,T]).mjava","pathOld":"solr/contrib/analytics/src/java/org/apache/solr/analytics/facet/PivotNode#exportPivot(DataOutput,Map[String,T]).mjava","sourceNew":"  /**\n   * Export the shard data through a bit-stream for the given pivot,\n   * to be imported by the {@link #importPivot} method in the originating shard.\n   *\n   * @param output The bit-stream to output the data through\n   * @param pivot the values for this pivot node and the pivot children (if they exist)\n   * @throws IOException if an exception occurs while writing to the {@link DataOutput}\n   */\n  public void exportPivot(DataOutput output, Map<String,T> pivot) throws IOException {\n    output.writeInt(pivot.size());\n    for (String pivotValue : pivot.keySet()) {\n      output.writeUTF(pivotValue);\n      exportPivotValue(output, pivot.get(pivotValue));\n    }\n  }\n\n","sourceOld":"  /**\n   * Export the shard data through a bit-stream for the given pivot, \n   * to be imported by the {@link #importPivot} method in the originating shard.\n   * \n   * @param output The bit-stream to output the data through\n   * @param pivot the values for this pivot node and the pivot children (if they exist)\n   * @throws IOException if an exception occurs while writing to the {@link DataOutput}\n   */\n  public void exportPivot(DataOutput output, Map<String,T> pivot) throws IOException {\n    output.writeInt(pivot.size());\n    for (String pivotValue : pivot.keySet()) {\n      output.writeUTF(pivotValue);\n      exportPivotValue(output, pivot.get(pivotValue));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f97fc3d287be2a8d7f513f0de3249b50dda47299","date":1568378558,"type":3,"author":"Koen De Groote","isMerge":false,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/analytics/facet/PivotNode#exportPivot(DataOutput,Map[String,T]).mjava","pathOld":"solr/contrib/analytics/src/java/org/apache/solr/analytics/facet/PivotNode#exportPivot(DataOutput,Map[String,T]).mjava","sourceNew":"  /**\n   * Export the shard data through a bit-stream for the given pivot,\n   * to be imported by the {@link #importPivot} method in the originating shard.\n   *\n   * @param output The bit-stream to output the data through\n   * @param pivot the values for this pivot node and the pivot children (if they exist)\n   * @throws IOException if an exception occurs while writing to the {@link DataOutput}\n   */\n  public void exportPivot(DataOutput output, Map<String,T> pivot) throws IOException {\n    output.writeInt(pivot.size());\n    for (Map.Entry<String, T> entry : pivot.entrySet()) {\n      output.writeUTF(entry.getKey());\n      exportPivotValue(output, entry.getValue());\n    }\n  }\n\n","sourceOld":"  /**\n   * Export the shard data through a bit-stream for the given pivot,\n   * to be imported by the {@link #importPivot} method in the originating shard.\n   *\n   * @param output The bit-stream to output the data through\n   * @param pivot the values for this pivot node and the pivot children (if they exist)\n   * @throws IOException if an exception occurs while writing to the {@link DataOutput}\n   */\n  public void exportPivot(DataOutput output, Map<String,T> pivot) throws IOException {\n    output.writeInt(pivot.size());\n    for (String pivotValue : pivot.keySet()) {\n      output.writeUTF(pivotValue);\n      exportPivotValue(output, pivot.get(pivotValue));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1e4e64b7199d2f2a17be7f3926c7532553910dce":["28288370235ed02234a64753cdbf0c6ec096304a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"30c8e5574b55d57947e989443dfde611646530ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","28288370235ed02234a64753cdbf0c6ec096304a"],"c495edcca4d0bc51bf62d9be3527c87bf9b44ded":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f97fc3d287be2a8d7f513f0de3249b50dda47299":["1e4e64b7199d2f2a17be7f3926c7532553910dce"],"28288370235ed02234a64753cdbf0c6ec096304a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c495edcca4d0bc51bf62d9be3527c87bf9b44ded"],"f8061ddd97f3352007d927dae445884a6f3d857b":["28288370235ed02234a64753cdbf0c6ec096304a","1e4e64b7199d2f2a17be7f3926c7532553910dce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f97fc3d287be2a8d7f513f0de3249b50dda47299"]},"commit2Childs":{"1e4e64b7199d2f2a17be7f3926c7532553910dce":["f97fc3d287be2a8d7f513f0de3249b50dda47299","f8061ddd97f3352007d927dae445884a6f3d857b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["30c8e5574b55d57947e989443dfde611646530ee","c495edcca4d0bc51bf62d9be3527c87bf9b44ded","28288370235ed02234a64753cdbf0c6ec096304a"],"30c8e5574b55d57947e989443dfde611646530ee":[],"c495edcca4d0bc51bf62d9be3527c87bf9b44ded":["28288370235ed02234a64753cdbf0c6ec096304a"],"f97fc3d287be2a8d7f513f0de3249b50dda47299":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"28288370235ed02234a64753cdbf0c6ec096304a":["1e4e64b7199d2f2a17be7f3926c7532553910dce","30c8e5574b55d57947e989443dfde611646530ee","f8061ddd97f3352007d927dae445884a6f3d857b"],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["30c8e5574b55d57947e989443dfde611646530ee","f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}