{"path":"lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/LegacyNumericRangeQueryBuilder#getQuery(Element).mjava","commits":[{"id":"770342641f7b505eaa8dccdc666158bff2419109","date":1449868421,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/LegacyNumericRangeQueryBuilder#getQuery(Element).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/NumericRangeQueryBuilder#getQuery(Element).mjava","sourceNew":"  @Override\n  public Query getQuery(Element e) throws ParserException {\n    String field = DOMUtils.getAttributeWithInheritanceOrFail(e, \"fieldName\");\n    String lowerTerm = DOMUtils.getAttributeOrFail(e, \"lowerTerm\");\n    String upperTerm = DOMUtils.getAttributeOrFail(e, \"upperTerm\");\n    boolean lowerInclusive = DOMUtils.getAttribute(e, \"includeLower\", true);\n    boolean upperInclusive = DOMUtils.getAttribute(e, \"includeUpper\", true);\n    int precisionStep = DOMUtils.getAttribute(e, \"precisionStep\", LegacyNumericUtils.PRECISION_STEP_DEFAULT);\n\n    String type = DOMUtils.getAttribute(e, \"type\", \"int\");\n    try {\n      Query filter;\n      if (type.equalsIgnoreCase(\"int\")) {\n        filter = LegacyNumericRangeQuery.newIntRange(field, precisionStep, Integer\n                .valueOf(lowerTerm), Integer.valueOf(upperTerm), lowerInclusive,\n            upperInclusive);\n      } else if (type.equalsIgnoreCase(\"long\")) {\n        filter = LegacyNumericRangeQuery.newLongRange(field, precisionStep, Long\n                .valueOf(lowerTerm), Long.valueOf(upperTerm), lowerInclusive,\n            upperInclusive);\n      } else if (type.equalsIgnoreCase(\"double\")) {\n        filter = LegacyNumericRangeQuery.newDoubleRange(field, precisionStep, Double\n                .valueOf(lowerTerm), Double.valueOf(upperTerm), lowerInclusive,\n            upperInclusive);\n      } else if (type.equalsIgnoreCase(\"float\")) {\n        filter = LegacyNumericRangeQuery.newFloatRange(field, precisionStep, Float\n                .valueOf(lowerTerm), Float.valueOf(upperTerm), lowerInclusive,\n            upperInclusive);\n      } else {\n        throw new ParserException(\"type attribute must be one of: [long, int, double, float]\");\n      }\n      return filter;\n    } catch (NumberFormatException nfe) {\n      throw new ParserException(\"Could not parse lowerTerm or upperTerm into a number\", nfe);\n    }\n  }\n\n","sourceOld":"  @Override\n  public Query getQuery(Element e) throws ParserException {\n    String field = DOMUtils.getAttributeWithInheritanceOrFail(e, \"fieldName\");\n    String lowerTerm = DOMUtils.getAttributeOrFail(e, \"lowerTerm\");\n    String upperTerm = DOMUtils.getAttributeOrFail(e, \"upperTerm\");\n    boolean lowerInclusive = DOMUtils.getAttribute(e, \"includeLower\", true);\n    boolean upperInclusive = DOMUtils.getAttribute(e, \"includeUpper\", true);\n    int precisionStep = DOMUtils.getAttribute(e, \"precisionStep\", NumericUtils.PRECISION_STEP_DEFAULT);\n\n    String type = DOMUtils.getAttribute(e, \"type\", \"int\");\n    try {\n      Query filter;\n      if (type.equalsIgnoreCase(\"int\")) {\n        filter = NumericRangeQuery.newIntRange(field, precisionStep, Integer\n            .valueOf(lowerTerm), Integer.valueOf(upperTerm), lowerInclusive,\n            upperInclusive);\n      } else if (type.equalsIgnoreCase(\"long\")) {\n        filter = NumericRangeQuery.newLongRange(field, precisionStep, Long\n            .valueOf(lowerTerm), Long.valueOf(upperTerm), lowerInclusive,\n            upperInclusive);\n      } else if (type.equalsIgnoreCase(\"double\")) {\n        filter = NumericRangeQuery.newDoubleRange(field, precisionStep, Double\n            .valueOf(lowerTerm), Double.valueOf(upperTerm), lowerInclusive,\n            upperInclusive);\n      } else if (type.equalsIgnoreCase(\"float\")) {\n        filter = NumericRangeQuery.newFloatRange(field, precisionStep, Float\n            .valueOf(lowerTerm), Float.valueOf(upperTerm), lowerInclusive,\n            upperInclusive);\n      } else {\n        throw new ParserException(\"type attribute must be one of: [long, int, double, float]\");\n      }\n      return filter;\n    } catch (NumberFormatException nfe) {\n      throw new ParserException(\"Could not parse lowerTerm or upperTerm into a number\", nfe);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"69674a7cf22e2b0f6f89e17cb6f74e7484ae4b19","date":1460977771,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/LegacyNumericRangeQueryBuilder#getQuery(Element).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/LegacyNumericRangeQueryBuilder#getQuery(Element).mjava","sourceNew":"  @Override\n  public Query getQuery(Element e) throws ParserException {\n    String field = DOMUtils.getAttributeWithInheritanceOrFail(e, \"fieldName\");\n    final String lowerTerm = DOMUtils.getAttribute(e, \"lowerTerm\", null);\n    final String upperTerm = DOMUtils.getAttribute(e, \"upperTerm\", null);\n    boolean lowerInclusive = DOMUtils.getAttribute(e, \"includeLower\", true);\n    boolean upperInclusive = DOMUtils.getAttribute(e, \"includeUpper\", true);\n    int precisionStep = DOMUtils.getAttribute(e, \"precisionStep\", LegacyNumericUtils.PRECISION_STEP_DEFAULT);\n\n    String type = DOMUtils.getAttribute(e, \"type\", \"int\");\n    try {\n      Query filter;\n      if (type.equalsIgnoreCase(\"int\")) {\n        filter = LegacyNumericRangeQuery.newIntRange(field, precisionStep,\n            (lowerTerm == null ? null : Integer.valueOf(lowerTerm)),\n            (upperTerm == null ? null : Integer.valueOf(upperTerm)),\n            lowerInclusive,\n            upperInclusive);\n      } else if (type.equalsIgnoreCase(\"long\")) {\n        filter = LegacyNumericRangeQuery.newLongRange(field, precisionStep,\n            (lowerTerm == null ? null : Long.valueOf(lowerTerm)),\n            (upperTerm == null ? null : Long.valueOf(upperTerm)),\n            lowerInclusive,\n            upperInclusive);\n      } else if (type.equalsIgnoreCase(\"double\")) {\n        filter = LegacyNumericRangeQuery.newDoubleRange(field, precisionStep,\n            (lowerTerm == null ? null : Double.valueOf(lowerTerm)),\n            (upperTerm == null ? null : Double.valueOf(upperTerm)),\n            lowerInclusive,\n            upperInclusive);\n      } else if (type.equalsIgnoreCase(\"float\")) {\n        filter = LegacyNumericRangeQuery.newFloatRange(field, precisionStep,\n            (lowerTerm == null ? null : Float.valueOf(lowerTerm)),\n            (upperTerm == null ? null : Float.valueOf(upperTerm)),\n            lowerInclusive,\n            upperInclusive);\n      } else {\n        throw new ParserException(\"type attribute must be one of: [long, int, double, float]\");\n      }\n      return filter;\n    } catch (NumberFormatException nfe) {\n      throw new ParserException(\"Could not parse lowerTerm or upperTerm into a number\", nfe);\n    }\n  }\n\n","sourceOld":"  @Override\n  public Query getQuery(Element e) throws ParserException {\n    String field = DOMUtils.getAttributeWithInheritanceOrFail(e, \"fieldName\");\n    String lowerTerm = DOMUtils.getAttributeOrFail(e, \"lowerTerm\");\n    String upperTerm = DOMUtils.getAttributeOrFail(e, \"upperTerm\");\n    boolean lowerInclusive = DOMUtils.getAttribute(e, \"includeLower\", true);\n    boolean upperInclusive = DOMUtils.getAttribute(e, \"includeUpper\", true);\n    int precisionStep = DOMUtils.getAttribute(e, \"precisionStep\", LegacyNumericUtils.PRECISION_STEP_DEFAULT);\n\n    String type = DOMUtils.getAttribute(e, \"type\", \"int\");\n    try {\n      Query filter;\n      if (type.equalsIgnoreCase(\"int\")) {\n        filter = LegacyNumericRangeQuery.newIntRange(field, precisionStep, Integer\n                .valueOf(lowerTerm), Integer.valueOf(upperTerm), lowerInclusive,\n            upperInclusive);\n      } else if (type.equalsIgnoreCase(\"long\")) {\n        filter = LegacyNumericRangeQuery.newLongRange(field, precisionStep, Long\n                .valueOf(lowerTerm), Long.valueOf(upperTerm), lowerInclusive,\n            upperInclusive);\n      } else if (type.equalsIgnoreCase(\"double\")) {\n        filter = LegacyNumericRangeQuery.newDoubleRange(field, precisionStep, Double\n                .valueOf(lowerTerm), Double.valueOf(upperTerm), lowerInclusive,\n            upperInclusive);\n      } else if (type.equalsIgnoreCase(\"float\")) {\n        filter = LegacyNumericRangeQuery.newFloatRange(field, precisionStep, Float\n                .valueOf(lowerTerm), Float.valueOf(upperTerm), lowerInclusive,\n            upperInclusive);\n      } else {\n        throw new ParserException(\"type attribute must be one of: [long, int, double, float]\");\n      }\n      return filter;\n    } catch (NumberFormatException nfe) {\n      throw new ParserException(\"Could not parse lowerTerm or upperTerm into a number\", nfe);\n    }\n  }\n\n","bugFix":["770342641f7b505eaa8dccdc666158bff2419109","b68b0aeb05de4dd5b24fc5ffd51e2fbd5d571df2"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"76b27bc4e241a6dd8c185cdb62b458a0562564f0","date":1460988862,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/LegacyNumericRangeQueryBuilder#getQuery(Element).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/LegacyNumericRangeQueryBuilder#getQuery(Element).mjava","sourceNew":"  @Override\n  public Query getQuery(Element e) throws ParserException {\n    String field = DOMUtils.getAttributeWithInheritanceOrFail(e, \"fieldName\");\n    final String lowerTerm = DOMUtils.getAttribute(e, \"lowerTerm\", null);\n    final String upperTerm = DOMUtils.getAttribute(e, \"upperTerm\", null);\n    boolean lowerInclusive = DOMUtils.getAttribute(e, \"includeLower\", true);\n    boolean upperInclusive = DOMUtils.getAttribute(e, \"includeUpper\", true);\n    int precisionStep = DOMUtils.getAttribute(e, \"precisionStep\", LegacyNumericUtils.PRECISION_STEP_DEFAULT);\n\n    String type = DOMUtils.getAttribute(e, \"type\", \"int\");\n    try {\n      Query filter;\n      if (type.equalsIgnoreCase(\"int\")) {\n        filter = LegacyNumericRangeQuery.newIntRange(field, precisionStep,\n            (lowerTerm == null ? null : Integer.valueOf(lowerTerm)),\n            (upperTerm == null ? null : Integer.valueOf(upperTerm)),\n            lowerInclusive,\n            upperInclusive);\n      } else if (type.equalsIgnoreCase(\"long\")) {\n        filter = LegacyNumericRangeQuery.newLongRange(field, precisionStep,\n            (lowerTerm == null ? null : Long.valueOf(lowerTerm)),\n            (upperTerm == null ? null : Long.valueOf(upperTerm)),\n            lowerInclusive,\n            upperInclusive);\n      } else if (type.equalsIgnoreCase(\"double\")) {\n        filter = LegacyNumericRangeQuery.newDoubleRange(field, precisionStep,\n            (lowerTerm == null ? null : Double.valueOf(lowerTerm)),\n            (upperTerm == null ? null : Double.valueOf(upperTerm)),\n            lowerInclusive,\n            upperInclusive);\n      } else if (type.equalsIgnoreCase(\"float\")) {\n        filter = LegacyNumericRangeQuery.newFloatRange(field, precisionStep,\n            (lowerTerm == null ? null : Float.valueOf(lowerTerm)),\n            (upperTerm == null ? null : Float.valueOf(upperTerm)),\n            lowerInclusive,\n            upperInclusive);\n      } else {\n        throw new ParserException(\"type attribute must be one of: [long, int, double, float]\");\n      }\n      return filter;\n    } catch (NumberFormatException nfe) {\n      throw new ParserException(\"Could not parse lowerTerm or upperTerm into a number\", nfe);\n    }\n  }\n\n","sourceOld":"  @Override\n  public Query getQuery(Element e) throws ParserException {\n    String field = DOMUtils.getAttributeWithInheritanceOrFail(e, \"fieldName\");\n    String lowerTerm = DOMUtils.getAttributeOrFail(e, \"lowerTerm\");\n    String upperTerm = DOMUtils.getAttributeOrFail(e, \"upperTerm\");\n    boolean lowerInclusive = DOMUtils.getAttribute(e, \"includeLower\", true);\n    boolean upperInclusive = DOMUtils.getAttribute(e, \"includeUpper\", true);\n    int precisionStep = DOMUtils.getAttribute(e, \"precisionStep\", LegacyNumericUtils.PRECISION_STEP_DEFAULT);\n\n    String type = DOMUtils.getAttribute(e, \"type\", \"int\");\n    try {\n      Query filter;\n      if (type.equalsIgnoreCase(\"int\")) {\n        filter = LegacyNumericRangeQuery.newIntRange(field, precisionStep, Integer\n                .valueOf(lowerTerm), Integer.valueOf(upperTerm), lowerInclusive,\n            upperInclusive);\n      } else if (type.equalsIgnoreCase(\"long\")) {\n        filter = LegacyNumericRangeQuery.newLongRange(field, precisionStep, Long\n                .valueOf(lowerTerm), Long.valueOf(upperTerm), lowerInclusive,\n            upperInclusive);\n      } else if (type.equalsIgnoreCase(\"double\")) {\n        filter = LegacyNumericRangeQuery.newDoubleRange(field, precisionStep, Double\n                .valueOf(lowerTerm), Double.valueOf(upperTerm), lowerInclusive,\n            upperInclusive);\n      } else if (type.equalsIgnoreCase(\"float\")) {\n        filter = LegacyNumericRangeQuery.newFloatRange(field, precisionStep, Float\n                .valueOf(lowerTerm), Float.valueOf(upperTerm), lowerInclusive,\n            upperInclusive);\n      } else {\n        throw new ParserException(\"type attribute must be one of: [long, int, double, float]\");\n      }\n      return filter;\n    } catch (NumberFormatException nfe) {\n      throw new ParserException(\"Could not parse lowerTerm or upperTerm into a number\", nfe);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"713122036535651642e6d4fe57ce12b449e18473","date":1461000510,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/LegacyNumericRangeQueryBuilder#getQuery(Element).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/LegacyNumericRangeQueryBuilder#getQuery(Element).mjava","sourceNew":"  @Override\n  public Query getQuery(Element e) throws ParserException {\n    String field = DOMUtils.getAttributeWithInheritanceOrFail(e, \"fieldName\");\n    final String lowerTerm = DOMUtils.getAttribute(e, \"lowerTerm\", null);\n    final String upperTerm = DOMUtils.getAttribute(e, \"upperTerm\", null);\n    boolean lowerInclusive = DOMUtils.getAttribute(e, \"includeLower\", true);\n    boolean upperInclusive = DOMUtils.getAttribute(e, \"includeUpper\", true);\n    int precisionStep = DOMUtils.getAttribute(e, \"precisionStep\", LegacyNumericUtils.PRECISION_STEP_DEFAULT);\n\n    String type = DOMUtils.getAttribute(e, \"type\", \"int\");\n    try {\n      Query filter;\n      if (type.equalsIgnoreCase(\"int\")) {\n        filter = LegacyNumericRangeQuery.newIntRange(field, precisionStep,\n            (lowerTerm == null ? null : Integer.valueOf(lowerTerm)),\n            (upperTerm == null ? null : Integer.valueOf(upperTerm)),\n            lowerInclusive,\n            upperInclusive);\n      } else if (type.equalsIgnoreCase(\"long\")) {\n        filter = LegacyNumericRangeQuery.newLongRange(field, precisionStep,\n            (lowerTerm == null ? null : Long.valueOf(lowerTerm)),\n            (upperTerm == null ? null : Long.valueOf(upperTerm)),\n            lowerInclusive,\n            upperInclusive);\n      } else if (type.equalsIgnoreCase(\"double\")) {\n        filter = LegacyNumericRangeQuery.newDoubleRange(field, precisionStep,\n            (lowerTerm == null ? null : Double.valueOf(lowerTerm)),\n            (upperTerm == null ? null : Double.valueOf(upperTerm)),\n            lowerInclusive,\n            upperInclusive);\n      } else if (type.equalsIgnoreCase(\"float\")) {\n        filter = LegacyNumericRangeQuery.newFloatRange(field, precisionStep,\n            (lowerTerm == null ? null : Float.valueOf(lowerTerm)),\n            (upperTerm == null ? null : Float.valueOf(upperTerm)),\n            lowerInclusive,\n            upperInclusive);\n      } else {\n        throw new ParserException(\"type attribute must be one of: [long, int, double, float]\");\n      }\n      return filter;\n    } catch (NumberFormatException nfe) {\n      throw new ParserException(\"Could not parse lowerTerm or upperTerm into a number\", nfe);\n    }\n  }\n\n","sourceOld":"  @Override\n  public Query getQuery(Element e) throws ParserException {\n    String field = DOMUtils.getAttributeWithInheritanceOrFail(e, \"fieldName\");\n    String lowerTerm = DOMUtils.getAttributeOrFail(e, \"lowerTerm\");\n    String upperTerm = DOMUtils.getAttributeOrFail(e, \"upperTerm\");\n    boolean lowerInclusive = DOMUtils.getAttribute(e, \"includeLower\", true);\n    boolean upperInclusive = DOMUtils.getAttribute(e, \"includeUpper\", true);\n    int precisionStep = DOMUtils.getAttribute(e, \"precisionStep\", LegacyNumericUtils.PRECISION_STEP_DEFAULT);\n\n    String type = DOMUtils.getAttribute(e, \"type\", \"int\");\n    try {\n      Query filter;\n      if (type.equalsIgnoreCase(\"int\")) {\n        filter = LegacyNumericRangeQuery.newIntRange(field, precisionStep, Integer\n                .valueOf(lowerTerm), Integer.valueOf(upperTerm), lowerInclusive,\n            upperInclusive);\n      } else if (type.equalsIgnoreCase(\"long\")) {\n        filter = LegacyNumericRangeQuery.newLongRange(field, precisionStep, Long\n                .valueOf(lowerTerm), Long.valueOf(upperTerm), lowerInclusive,\n            upperInclusive);\n      } else if (type.equalsIgnoreCase(\"double\")) {\n        filter = LegacyNumericRangeQuery.newDoubleRange(field, precisionStep, Double\n                .valueOf(lowerTerm), Double.valueOf(upperTerm), lowerInclusive,\n            upperInclusive);\n      } else if (type.equalsIgnoreCase(\"float\")) {\n        filter = LegacyNumericRangeQuery.newFloatRange(field, precisionStep, Float\n                .valueOf(lowerTerm), Float.valueOf(upperTerm), lowerInclusive,\n            upperInclusive);\n      } else {\n        throw new ParserException(\"type attribute must be one of: [long, int, double, float]\");\n      }\n      return filter;\n    } catch (NumberFormatException nfe) {\n      throw new ParserException(\"Could not parse lowerTerm or upperTerm into a number\", nfe);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"50b8410419cbbe9d8e1a96c918a951976bffe680","date":1471869553,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/LegacyNumericRangeQueryBuilder#getQuery(Element).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/LegacyNumericRangeQueryBuilder#getQuery(Element).mjava","sourceNew":"  @Override\n  public Query getQuery(Element e) throws ParserException {\n    String field = DOMUtils.getAttributeWithInheritanceOrFail(e, \"fieldName\");\n    final String lowerTerm = DOMUtils.getAttribute(e, \"lowerTerm\", null);\n    final String upperTerm = DOMUtils.getAttribute(e, \"upperTerm\", null);\n    boolean lowerInclusive = DOMUtils.getAttribute(e, \"includeLower\", true);\n    boolean upperInclusive = DOMUtils.getAttribute(e, \"includeUpper\", true);\n    int precisionStep = DOMUtils.getAttribute(e, \"precisionStep\", LegacyNumericUtils.PRECISION_STEP_DEFAULT);\n\n    String type = DOMUtils.getAttribute(e, \"type\", \"int\");\n    try {\n      Query filter;\n      if (type.equalsIgnoreCase(\"int\")) {\n        filter = LegacyNumericRangeQuery.newIntRange(field, precisionStep,\n            (lowerTerm == null ? null : Integer.valueOf(lowerTerm)),\n            (upperTerm == null ? null : Integer.valueOf(upperTerm)),\n            lowerInclusive,\n            upperInclusive);\n      } else if (type.equalsIgnoreCase(\"long\")) {\n        filter = LegacyNumericRangeQuery.newLongRange(field, precisionStep,\n            (lowerTerm == null ? null : Long.valueOf(lowerTerm)),\n            (upperTerm == null ? null : Long.valueOf(upperTerm)),\n            lowerInclusive,\n            upperInclusive);\n      } else if (type.equalsIgnoreCase(\"double\")) {\n        filter = LegacyNumericRangeQuery.newDoubleRange(field, precisionStep,\n            (lowerTerm == null ? null : Double.valueOf(lowerTerm)),\n            (upperTerm == null ? null : Double.valueOf(upperTerm)),\n            lowerInclusive,\n            upperInclusive);\n      } else if (type.equalsIgnoreCase(\"float\")) {\n        filter = LegacyNumericRangeQuery.newFloatRange(field, precisionStep,\n            (lowerTerm == null ? null : Float.valueOf(lowerTerm)),\n            (upperTerm == null ? null : Float.valueOf(upperTerm)),\n            lowerInclusive,\n            upperInclusive);\n      } else {\n        throw new ParserException(\"type attribute must be one of: [long, int, double, float]\");\n      }\n      return filter;\n    } catch (NumberFormatException nfe) {\n      throw new ParserException(\"Could not parse lowerTerm or upperTerm into a number\", nfe);\n    }\n  }\n\n","sourceOld":"  @Override\n  public Query getQuery(Element e) throws ParserException {\n    String field = DOMUtils.getAttributeWithInheritanceOrFail(e, \"fieldName\");\n    final String lowerTerm = DOMUtils.getAttribute(e, \"lowerTerm\", null);\n    final String upperTerm = DOMUtils.getAttribute(e, \"upperTerm\", null);\n    boolean lowerInclusive = DOMUtils.getAttribute(e, \"includeLower\", true);\n    boolean upperInclusive = DOMUtils.getAttribute(e, \"includeUpper\", true);\n    int precisionStep = DOMUtils.getAttribute(e, \"precisionStep\", LegacyNumericUtils.PRECISION_STEP_DEFAULT);\n\n    String type = DOMUtils.getAttribute(e, \"type\", \"int\");\n    try {\n      Query filter;\n      if (type.equalsIgnoreCase(\"int\")) {\n        filter = LegacyNumericRangeQuery.newIntRange(field, precisionStep,\n            (lowerTerm == null ? null : Integer.valueOf(lowerTerm)),\n            (upperTerm == null ? null : Integer.valueOf(upperTerm)),\n            lowerInclusive,\n            upperInclusive);\n      } else if (type.equalsIgnoreCase(\"long\")) {\n        filter = LegacyNumericRangeQuery.newLongRange(field, precisionStep,\n            (lowerTerm == null ? null : Long.valueOf(lowerTerm)),\n            (upperTerm == null ? null : Long.valueOf(upperTerm)),\n            lowerInclusive,\n            upperInclusive);\n      } else if (type.equalsIgnoreCase(\"double\")) {\n        filter = LegacyNumericRangeQuery.newDoubleRange(field, precisionStep,\n            (lowerTerm == null ? null : Double.valueOf(lowerTerm)),\n            (upperTerm == null ? null : Double.valueOf(upperTerm)),\n            lowerInclusive,\n            upperInclusive);\n      } else if (type.equalsIgnoreCase(\"float\")) {\n        filter = LegacyNumericRangeQuery.newFloatRange(field, precisionStep,\n            (lowerTerm == null ? null : Float.valueOf(lowerTerm)),\n            (upperTerm == null ? null : Float.valueOf(upperTerm)),\n            lowerInclusive,\n            upperInclusive);\n      } else {\n        throw new ParserException(\"type attribute must be one of: [long, int, double, float]\");\n      }\n      return filter;\n    } catch (NumberFormatException nfe) {\n      throw new ParserException(\"Could not parse lowerTerm or upperTerm into a number\", nfe);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0c82557b0a8c9d4012f208e5de912ae7500ea351","date":1471888093,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/LegacyNumericRangeQueryBuilder#getQuery(Element).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/LegacyNumericRangeQueryBuilder#getQuery(Element).mjava","sourceNew":"  @Override\n  public Query getQuery(Element e) throws ParserException {\n    String field = DOMUtils.getAttributeWithInheritanceOrFail(e, \"fieldName\");\n    final String lowerTerm = DOMUtils.getAttribute(e, \"lowerTerm\", null);\n    final String upperTerm = DOMUtils.getAttribute(e, \"upperTerm\", null);\n    boolean lowerInclusive = DOMUtils.getAttribute(e, \"includeLower\", true);\n    boolean upperInclusive = DOMUtils.getAttribute(e, \"includeUpper\", true);\n    int precisionStep = DOMUtils.getAttribute(e, \"precisionStep\", LegacyNumericUtils.PRECISION_STEP_DEFAULT);\n\n    String type = DOMUtils.getAttribute(e, \"type\", \"int\");\n    try {\n      Query filter;\n      if (type.equalsIgnoreCase(\"int\")) {\n        filter = LegacyNumericRangeQuery.newIntRange(field, precisionStep,\n            (lowerTerm == null ? null : Integer.valueOf(lowerTerm)),\n            (upperTerm == null ? null : Integer.valueOf(upperTerm)),\n            lowerInclusive,\n            upperInclusive);\n      } else if (type.equalsIgnoreCase(\"long\")) {\n        filter = LegacyNumericRangeQuery.newLongRange(field, precisionStep,\n            (lowerTerm == null ? null : Long.valueOf(lowerTerm)),\n            (upperTerm == null ? null : Long.valueOf(upperTerm)),\n            lowerInclusive,\n            upperInclusive);\n      } else if (type.equalsIgnoreCase(\"double\")) {\n        filter = LegacyNumericRangeQuery.newDoubleRange(field, precisionStep,\n            (lowerTerm == null ? null : Double.valueOf(lowerTerm)),\n            (upperTerm == null ? null : Double.valueOf(upperTerm)),\n            lowerInclusive,\n            upperInclusive);\n      } else if (type.equalsIgnoreCase(\"float\")) {\n        filter = LegacyNumericRangeQuery.newFloatRange(field, precisionStep,\n            (lowerTerm == null ? null : Float.valueOf(lowerTerm)),\n            (upperTerm == null ? null : Float.valueOf(upperTerm)),\n            lowerInclusive,\n            upperInclusive);\n      } else {\n        throw new ParserException(\"type attribute must be one of: [long, int, double, float]\");\n      }\n      return filter;\n    } catch (NumberFormatException nfe) {\n      throw new ParserException(\"Could not parse lowerTerm or upperTerm into a number\", nfe);\n    }\n  }\n\n","sourceOld":"  @Override\n  public Query getQuery(Element e) throws ParserException {\n    String field = DOMUtils.getAttributeWithInheritanceOrFail(e, \"fieldName\");\n    final String lowerTerm = DOMUtils.getAttribute(e, \"lowerTerm\", null);\n    final String upperTerm = DOMUtils.getAttribute(e, \"upperTerm\", null);\n    boolean lowerInclusive = DOMUtils.getAttribute(e, \"includeLower\", true);\n    boolean upperInclusive = DOMUtils.getAttribute(e, \"includeUpper\", true);\n    int precisionStep = DOMUtils.getAttribute(e, \"precisionStep\", LegacyNumericUtils.PRECISION_STEP_DEFAULT);\n\n    String type = DOMUtils.getAttribute(e, \"type\", \"int\");\n    try {\n      Query filter;\n      if (type.equalsIgnoreCase(\"int\")) {\n        filter = LegacyNumericRangeQuery.newIntRange(field, precisionStep,\n            (lowerTerm == null ? null : Integer.valueOf(lowerTerm)),\n            (upperTerm == null ? null : Integer.valueOf(upperTerm)),\n            lowerInclusive,\n            upperInclusive);\n      } else if (type.equalsIgnoreCase(\"long\")) {\n        filter = LegacyNumericRangeQuery.newLongRange(field, precisionStep,\n            (lowerTerm == null ? null : Long.valueOf(lowerTerm)),\n            (upperTerm == null ? null : Long.valueOf(upperTerm)),\n            lowerInclusive,\n            upperInclusive);\n      } else if (type.equalsIgnoreCase(\"double\")) {\n        filter = LegacyNumericRangeQuery.newDoubleRange(field, precisionStep,\n            (lowerTerm == null ? null : Double.valueOf(lowerTerm)),\n            (upperTerm == null ? null : Double.valueOf(upperTerm)),\n            lowerInclusive,\n            upperInclusive);\n      } else if (type.equalsIgnoreCase(\"float\")) {\n        filter = LegacyNumericRangeQuery.newFloatRange(field, precisionStep,\n            (lowerTerm == null ? null : Float.valueOf(lowerTerm)),\n            (upperTerm == null ? null : Float.valueOf(upperTerm)),\n            lowerInclusive,\n            upperInclusive);\n      } else {\n        throw new ParserException(\"type attribute must be one of: [long, int, double, float]\");\n      }\n      return filter;\n    } catch (NumberFormatException nfe) {\n      throw new ParserException(\"Could not parse lowerTerm or upperTerm into a number\", nfe);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a","date":1472163016,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/LegacyNumericRangeQueryBuilder#getQuery(Element).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/LegacyNumericRangeQueryBuilder#getQuery(Element).mjava","sourceNew":"  @Override\n  public Query getQuery(Element e) throws ParserException {\n    String field = DOMUtils.getAttributeWithInheritanceOrFail(e, \"fieldName\");\n    final String lowerTerm = DOMUtils.getAttribute(e, \"lowerTerm\", null);\n    final String upperTerm = DOMUtils.getAttribute(e, \"upperTerm\", null);\n    boolean lowerInclusive = DOMUtils.getAttribute(e, \"includeLower\", true);\n    boolean upperInclusive = DOMUtils.getAttribute(e, \"includeUpper\", true);\n    int precisionStep = DOMUtils.getAttribute(e, \"precisionStep\", LegacyNumericUtils.PRECISION_STEP_DEFAULT);\n\n    String type = DOMUtils.getAttribute(e, \"type\", \"int\");\n    try {\n      Query filter;\n      if (type.equalsIgnoreCase(\"int\")) {\n        filter = LegacyNumericRangeQuery.newIntRange(field, precisionStep,\n            (lowerTerm == null ? null : Integer.valueOf(lowerTerm)),\n            (upperTerm == null ? null : Integer.valueOf(upperTerm)),\n            lowerInclusive,\n            upperInclusive);\n      } else if (type.equalsIgnoreCase(\"long\")) {\n        filter = LegacyNumericRangeQuery.newLongRange(field, precisionStep,\n            (lowerTerm == null ? null : Long.valueOf(lowerTerm)),\n            (upperTerm == null ? null : Long.valueOf(upperTerm)),\n            lowerInclusive,\n            upperInclusive);\n      } else if (type.equalsIgnoreCase(\"double\")) {\n        filter = LegacyNumericRangeQuery.newDoubleRange(field, precisionStep,\n            (lowerTerm == null ? null : Double.valueOf(lowerTerm)),\n            (upperTerm == null ? null : Double.valueOf(upperTerm)),\n            lowerInclusive,\n            upperInclusive);\n      } else if (type.equalsIgnoreCase(\"float\")) {\n        filter = LegacyNumericRangeQuery.newFloatRange(field, precisionStep,\n            (lowerTerm == null ? null : Float.valueOf(lowerTerm)),\n            (upperTerm == null ? null : Float.valueOf(upperTerm)),\n            lowerInclusive,\n            upperInclusive);\n      } else {\n        throw new ParserException(\"type attribute must be one of: [long, int, double, float]\");\n      }\n      return filter;\n    } catch (NumberFormatException nfe) {\n      throw new ParserException(\"Could not parse lowerTerm or upperTerm into a number\", nfe);\n    }\n  }\n\n","sourceOld":"  @Override\n  public Query getQuery(Element e) throws ParserException {\n    String field = DOMUtils.getAttributeWithInheritanceOrFail(e, \"fieldName\");\n    final String lowerTerm = DOMUtils.getAttribute(e, \"lowerTerm\", null);\n    final String upperTerm = DOMUtils.getAttribute(e, \"upperTerm\", null);\n    boolean lowerInclusive = DOMUtils.getAttribute(e, \"includeLower\", true);\n    boolean upperInclusive = DOMUtils.getAttribute(e, \"includeUpper\", true);\n    int precisionStep = DOMUtils.getAttribute(e, \"precisionStep\", LegacyNumericUtils.PRECISION_STEP_DEFAULT);\n\n    String type = DOMUtils.getAttribute(e, \"type\", \"int\");\n    try {\n      Query filter;\n      if (type.equalsIgnoreCase(\"int\")) {\n        filter = LegacyNumericRangeQuery.newIntRange(field, precisionStep,\n            (lowerTerm == null ? null : Integer.valueOf(lowerTerm)),\n            (upperTerm == null ? null : Integer.valueOf(upperTerm)),\n            lowerInclusive,\n            upperInclusive);\n      } else if (type.equalsIgnoreCase(\"long\")) {\n        filter = LegacyNumericRangeQuery.newLongRange(field, precisionStep,\n            (lowerTerm == null ? null : Long.valueOf(lowerTerm)),\n            (upperTerm == null ? null : Long.valueOf(upperTerm)),\n            lowerInclusive,\n            upperInclusive);\n      } else if (type.equalsIgnoreCase(\"double\")) {\n        filter = LegacyNumericRangeQuery.newDoubleRange(field, precisionStep,\n            (lowerTerm == null ? null : Double.valueOf(lowerTerm)),\n            (upperTerm == null ? null : Double.valueOf(upperTerm)),\n            lowerInclusive,\n            upperInclusive);\n      } else if (type.equalsIgnoreCase(\"float\")) {\n        filter = LegacyNumericRangeQuery.newFloatRange(field, precisionStep,\n            (lowerTerm == null ? null : Float.valueOf(lowerTerm)),\n            (upperTerm == null ? null : Float.valueOf(upperTerm)),\n            lowerInclusive,\n            upperInclusive);\n      } else {\n        throw new ParserException(\"type attribute must be one of: [long, int, double, float]\");\n      }\n      return filter;\n    } catch (NumberFormatException nfe) {\n      throw new ParserException(\"Could not parse lowerTerm or upperTerm into a number\", nfe);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":5,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/LegacyNumericRangeQueryBuilder#getQuery(Element).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/LegacyNumericRangeQueryBuilder#getQuery(Element).mjava","sourceNew":"  @Override\n  public Query getQuery(Element e) throws ParserException {\n    String field = DOMUtils.getAttributeWithInheritanceOrFail(e, \"fieldName\");\n    final String lowerTerm = DOMUtils.getAttribute(e, \"lowerTerm\", null);\n    final String upperTerm = DOMUtils.getAttribute(e, \"upperTerm\", null);\n    boolean lowerInclusive = DOMUtils.getAttribute(e, \"includeLower\", true);\n    boolean upperInclusive = DOMUtils.getAttribute(e, \"includeUpper\", true);\n    int precisionStep = DOMUtils.getAttribute(e, \"precisionStep\", LegacyNumericUtils.PRECISION_STEP_DEFAULT);\n\n    String type = DOMUtils.getAttribute(e, \"type\", \"int\");\n    try {\n      Query filter;\n      if (type.equalsIgnoreCase(\"int\")) {\n        filter = LegacyNumericRangeQuery.newIntRange(field, precisionStep,\n            (lowerTerm == null ? null : Integer.valueOf(lowerTerm)),\n            (upperTerm == null ? null : Integer.valueOf(upperTerm)),\n            lowerInclusive,\n            upperInclusive);\n      } else if (type.equalsIgnoreCase(\"long\")) {\n        filter = LegacyNumericRangeQuery.newLongRange(field, precisionStep,\n            (lowerTerm == null ? null : Long.valueOf(lowerTerm)),\n            (upperTerm == null ? null : Long.valueOf(upperTerm)),\n            lowerInclusive,\n            upperInclusive);\n      } else if (type.equalsIgnoreCase(\"double\")) {\n        filter = LegacyNumericRangeQuery.newDoubleRange(field, precisionStep,\n            (lowerTerm == null ? null : Double.valueOf(lowerTerm)),\n            (upperTerm == null ? null : Double.valueOf(upperTerm)),\n            lowerInclusive,\n            upperInclusive);\n      } else if (type.equalsIgnoreCase(\"float\")) {\n        filter = LegacyNumericRangeQuery.newFloatRange(field, precisionStep,\n            (lowerTerm == null ? null : Float.valueOf(lowerTerm)),\n            (upperTerm == null ? null : Float.valueOf(upperTerm)),\n            lowerInclusive,\n            upperInclusive);\n      } else {\n        throw new ParserException(\"type attribute must be one of: [long, int, double, float]\");\n      }\n      return filter;\n    } catch (NumberFormatException nfe) {\n      throw new ParserException(\"Could not parse lowerTerm or upperTerm into a number\", nfe);\n    }\n  }\n\n","sourceOld":"  @Override\n  public Query getQuery(Element e) throws ParserException {\n    String field = DOMUtils.getAttributeWithInheritanceOrFail(e, \"fieldName\");\n    final String lowerTerm = DOMUtils.getAttribute(e, \"lowerTerm\", null);\n    final String upperTerm = DOMUtils.getAttribute(e, \"upperTerm\", null);\n    boolean lowerInclusive = DOMUtils.getAttribute(e, \"includeLower\", true);\n    boolean upperInclusive = DOMUtils.getAttribute(e, \"includeUpper\", true);\n    int precisionStep = DOMUtils.getAttribute(e, \"precisionStep\", LegacyNumericUtils.PRECISION_STEP_DEFAULT);\n\n    String type = DOMUtils.getAttribute(e, \"type\", \"int\");\n    try {\n      Query filter;\n      if (type.equalsIgnoreCase(\"int\")) {\n        filter = LegacyNumericRangeQuery.newIntRange(field, precisionStep,\n            (lowerTerm == null ? null : Integer.valueOf(lowerTerm)),\n            (upperTerm == null ? null : Integer.valueOf(upperTerm)),\n            lowerInclusive,\n            upperInclusive);\n      } else if (type.equalsIgnoreCase(\"long\")) {\n        filter = LegacyNumericRangeQuery.newLongRange(field, precisionStep,\n            (lowerTerm == null ? null : Long.valueOf(lowerTerm)),\n            (upperTerm == null ? null : Long.valueOf(upperTerm)),\n            lowerInclusive,\n            upperInclusive);\n      } else if (type.equalsIgnoreCase(\"double\")) {\n        filter = LegacyNumericRangeQuery.newDoubleRange(field, precisionStep,\n            (lowerTerm == null ? null : Double.valueOf(lowerTerm)),\n            (upperTerm == null ? null : Double.valueOf(upperTerm)),\n            lowerInclusive,\n            upperInclusive);\n      } else if (type.equalsIgnoreCase(\"float\")) {\n        filter = LegacyNumericRangeQuery.newFloatRange(field, precisionStep,\n            (lowerTerm == null ? null : Float.valueOf(lowerTerm)),\n            (upperTerm == null ? null : Float.valueOf(upperTerm)),\n            lowerInclusive,\n            upperInclusive);\n      } else {\n        throw new ParserException(\"type attribute must be one of: [long, int, double, float]\");\n      }\n      return filter;\n    } catch (NumberFormatException nfe) {\n      throw new ParserException(\"Could not parse lowerTerm or upperTerm into a number\", nfe);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0c82557b0a8c9d4012f208e5de912ae7500ea351":["713122036535651642e6d4fe57ce12b449e18473","50b8410419cbbe9d8e1a96c918a951976bffe680"],"50b8410419cbbe9d8e1a96c918a951976bffe680":["713122036535651642e6d4fe57ce12b449e18473"],"713122036535651642e6d4fe57ce12b449e18473":["770342641f7b505eaa8dccdc666158bff2419109","76b27bc4e241a6dd8c185cdb62b458a0562564f0"],"69674a7cf22e2b0f6f89e17cb6f74e7484ae4b19":["770342641f7b505eaa8dccdc666158bff2419109"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"76b27bc4e241a6dd8c185cdb62b458a0562564f0":["770342641f7b505eaa8dccdc666158bff2419109","69674a7cf22e2b0f6f89e17cb6f74e7484ae4b19"],"770342641f7b505eaa8dccdc666158bff2419109":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a":["713122036535651642e6d4fe57ce12b449e18473","0c82557b0a8c9d4012f208e5de912ae7500ea351"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["713122036535651642e6d4fe57ce12b449e18473","e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a"]},"commit2Childs":{"0c82557b0a8c9d4012f208e5de912ae7500ea351":["e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a"],"50b8410419cbbe9d8e1a96c918a951976bffe680":["0c82557b0a8c9d4012f208e5de912ae7500ea351"],"713122036535651642e6d4fe57ce12b449e18473":["0c82557b0a8c9d4012f208e5de912ae7500ea351","50b8410419cbbe9d8e1a96c918a951976bffe680","e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"69674a7cf22e2b0f6f89e17cb6f74e7484ae4b19":["76b27bc4e241a6dd8c185cdb62b458a0562564f0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["770342641f7b505eaa8dccdc666158bff2419109"],"76b27bc4e241a6dd8c185cdb62b458a0562564f0":["713122036535651642e6d4fe57ce12b449e18473"],"770342641f7b505eaa8dccdc666158bff2419109":["713122036535651642e6d4fe57ce12b449e18473","69674a7cf22e2b0f6f89e17cb6f74e7484ae4b19","76b27bc4e241a6dd8c185cdb62b458a0562564f0"],"e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}