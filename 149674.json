{"path":"lucene/core/src/java/org/apache/lucene/index/ReadersAndUpdates#handleDVUpdates(FieldInfos,Directory,DocValuesFormat,SegmentReader,Map[Integer,Set[String]],long,InfoStream).mjava","commits":[{"id":"4c088100f7646827db17ea080925f7a0a916b1cd","date":1524662254,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/ReadersAndUpdates#handleDVUpdates(FieldInfos,Directory,DocValuesFormat,SegmentReader,Map[Integer,Set[String]],long,InfoStream).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/ReadersAndUpdates#handleNumericDVUpdates(FieldInfos,Directory,DocValuesFormat,SegmentReader,Map[Integer,Set[String]],long,InfoStream).mjava","sourceNew":"  private synchronized void handleDVUpdates(FieldInfos infos,\n                                            Directory dir, DocValuesFormat dvFormat, final SegmentReader reader,\n                                            Map<Integer,Set<String>> fieldFiles, long maxDelGen, InfoStream infoStream) throws IOException {\n    for (Entry<String,List<DocValuesFieldUpdates>> ent : pendingDVUpdates.entrySet()) {\n      final String field = ent.getKey();\n      final List<DocValuesFieldUpdates> updates = ent.getValue();\n      DocValuesType type = updates.get(0).type;\n      assert type == DocValuesType.NUMERIC || type == DocValuesType.BINARY : \"unsupported type: \" + type;\n      final List<DocValuesFieldUpdates> updatesToApply = new ArrayList<>();\n      long bytes = 0;\n      for(DocValuesFieldUpdates update : updates) {\n        if (update.delGen <= maxDelGen) {\n          // safe to apply this one\n          bytes += update.ramBytesUsed();\n          updatesToApply.add(update);\n        }\n      }\n      if (updatesToApply.isEmpty()) {\n        // nothing to apply yet\n        continue;\n      }\n      if (infoStream.isEnabled(\"BD\")) {\n        infoStream.message(\"BD\", String.format(Locale.ROOT,\n                                               \"now write %d pending numeric DV updates for field=%s, seg=%s, bytes=%.3f MB\",\n                                               updatesToApply.size(),\n                                               field,\n                                               info,\n                                               bytes/1024./1024.));\n      }\n      final long nextDocValuesGen = info.getNextDocValuesGen();\n      final String segmentSuffix = Long.toString(nextDocValuesGen, Character.MAX_RADIX);\n      final IOContext updatesContext = new IOContext(new FlushInfo(info.info.maxDoc(), bytes));\n      final FieldInfo fieldInfo = infos.fieldInfo(field);\n      assert fieldInfo != null;\n      fieldInfo.setDocValuesGen(nextDocValuesGen);\n      final FieldInfos fieldInfos = new FieldInfos(new FieldInfo[] { fieldInfo });\n      // separately also track which files were created for this gen\n      final TrackingDirectoryWrapper trackingDir = new TrackingDirectoryWrapper(dir);\n      final SegmentWriteState state = new SegmentWriteState(null, trackingDir, info.info, fieldInfos, null, updatesContext, segmentSuffix);\n      try (final DocValuesConsumer fieldsConsumer = dvFormat.fieldsConsumer(state)) {\n        pendingDeletes.onDocValuesUpdate(fieldInfo);\n        Function<FieldInfo, DocValuesFieldUpdates.Iterator> updateSupplier = (info) -> {\n          if (info != fieldInfo) {\n            throw new IllegalArgumentException(\"expected field info for field: \" + fieldInfo.name + \" but got: \" + info.name);\n          }\n          DocValuesFieldUpdates.Iterator[] subs = new DocValuesFieldUpdates.Iterator[updatesToApply.size()];\n          for(int i=0;i<subs.length;i++) {\n            subs[i] = updatesToApply.get(i).iterator();\n          }\n          return  DocValuesFieldUpdates.mergedIterator(subs);\n        };\n        if (type == DocValuesType.BINARY) {\n          fieldsConsumer.addBinaryField(fieldInfo, new EmptyDocValuesProducer() {\n            @Override\n            public BinaryDocValues getBinary(FieldInfo fieldInfoIn) throws IOException {\n              final MergedDocValues<BinaryDocValues> mergedDocValues = new MergedDocValues<>(\n                  reader.getBinaryDocValues(field),\n                  DocValuesFieldUpdates.Iterator.asBinaryDocValues(updateSupplier.apply(fieldInfo)));\n              // Merge sort of the original doc values with updated doc values:\n              return new BinaryDocValues() {\n                @Override\n                public BytesRef binaryValue() throws IOException {\n                  return mergedDocValues.currentValuesSupplier.binaryValue();\n                }\n                @Override\n                public boolean advanceExact(int target) {\n                  return mergedDocValues.advanceExact(target);\n                }\n                @Override\n                public int docID() {\n                  return mergedDocValues.docID();\n                }\n                @Override\n                public int nextDoc() throws IOException {\n                  return mergedDocValues.nextDoc();\n                }\n                @Override\n                public int advance(int target) {\n                  return mergedDocValues.advance(target);\n                }\n                @Override\n                public long cost() {\n                  return mergedDocValues.cost();\n                }\n              };\n            }\n          });\n        } else {\n          // write the numeric updates to a new gen'd docvalues file\n          fieldsConsumer.addNumericField(fieldInfo, new EmptyDocValuesProducer() {\n            @Override\n            public NumericDocValues getNumeric(FieldInfo fieldInfoIn) throws IOException {\n              final MergedDocValues<NumericDocValues> mergedDocValues = new MergedDocValues<>(\n                  reader.getNumericDocValues(field),\n                  DocValuesFieldUpdates.Iterator.asNumericDocValues(updateSupplier.apply(fieldInfo)));\n              // Merge sort of the original doc values with updated doc values:\n              return new NumericDocValues() {\n                @Override\n                public long longValue() throws IOException {\n                  return mergedDocValues.currentValuesSupplier.longValue();\n                }\n                @Override\n                public boolean advanceExact(int target) {\n                  return mergedDocValues.advanceExact(target);\n                }\n                @Override\n                public int docID() {\n                  return mergedDocValues.docID();\n                }\n                @Override\n                public int nextDoc() throws IOException {\n                  return mergedDocValues.nextDoc();\n                }\n                @Override\n                public int advance(int target) {\n                  return mergedDocValues.advance(target);\n                }\n                @Override\n                public long cost() {\n                  return mergedDocValues.cost();\n                }\n              };\n            }\n          });\n        }\n      }\n      info.advanceDocValuesGen();\n      assert !fieldFiles.containsKey(fieldInfo.number);\n      fieldFiles.put(fieldInfo.number, trackingDir.getCreatedFiles());\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"synthetic-access\")\n  private synchronized void handleNumericDVUpdates(FieldInfos infos,\n                                                   Directory dir, DocValuesFormat dvFormat, final SegmentReader reader,\n                                                   Map<Integer,Set<String>> fieldFiles, long maxDelGen, InfoStream infoStream) throws IOException {\n\n    for (Entry<String,List<DocValuesFieldUpdates>> ent : pendingDVUpdates.entrySet()) {\n      final String field = ent.getKey();\n      final List<DocValuesFieldUpdates> updates = ent.getValue();\n      if (updates.get(0).type != DocValuesType.NUMERIC) {\n        continue;\n      }\n\n      final List<DocValuesFieldUpdates> updatesToApply = new ArrayList<>();\n      long bytes = 0;\n      for(DocValuesFieldUpdates update : updates) {\n        if (update.delGen <= maxDelGen) {\n          // safe to apply this one\n          bytes += update.ramBytesUsed();\n          updatesToApply.add(update);\n        }\n      }\n      if (updatesToApply.isEmpty()) {\n        // nothing to apply yet\n        continue;\n      }\n\n      if (infoStream.isEnabled(\"BD\")) {\n        infoStream.message(\"BD\", String.format(Locale.ROOT,\n                                               \"now write %d pending numeric DV updates for field=%s, seg=%s, bytes=%.3f MB\",\n                                               updatesToApply.size(),\n                                               field,\n                                               info,\n                                               bytes/1024./1024.));\n      }\n\n      final long nextDocValuesGen = info.getNextDocValuesGen();\n      final String segmentSuffix = Long.toString(nextDocValuesGen, Character.MAX_RADIX);\n      final IOContext updatesContext = new IOContext(new FlushInfo(info.info.maxDoc(), bytes));\n      final FieldInfo fieldInfo = infos.fieldInfo(field);\n      assert fieldInfo != null;\n      fieldInfo.setDocValuesGen(nextDocValuesGen);\n      final FieldInfos fieldInfos = new FieldInfos(new FieldInfo[] { fieldInfo });\n      // separately also track which files were created for this gen\n      final TrackingDirectoryWrapper trackingDir = new TrackingDirectoryWrapper(dir);\n      final SegmentWriteState state = new SegmentWriteState(null, trackingDir, info.info, fieldInfos, null, updatesContext, segmentSuffix);\n      try (final DocValuesConsumer fieldsConsumer = dvFormat.fieldsConsumer(state)) {\n        pendingDeletes.onDocValuesUpdate(fieldInfo);\n        // write the numeric updates to a new gen'd docvalues file\n        fieldsConsumer.addNumericField(fieldInfo, new EmptyDocValuesProducer() {\n            @Override\n            public NumericDocValues getNumeric(FieldInfo fieldInfoIn) throws IOException {\n              if (fieldInfoIn != fieldInfo) {\n                throw new IllegalArgumentException(\"wrong fieldInfo\");\n              }\n              DocValuesFieldUpdates.Iterator[] subs = new DocValuesFieldUpdates.Iterator[updatesToApply.size()];\n              for(int i=0;i<subs.length;i++) {\n                subs[i] = updatesToApply.get(i).iterator();\n              }\n\n              final DocValuesFieldUpdates.Iterator updatesIter = DocValuesFieldUpdates.mergedIterator(subs);\n\n              final NumericDocValues currentValues = reader.getNumericDocValues(field);\n\n              // Merge sort of the original doc values with updated doc values:\n              return new NumericDocValues() {\n                // merged docID\n                private int docIDOut = -1;\n\n                // docID from our original doc values\n                private int docIDIn = -1;\n\n                // docID from our updates\n                private int updateDocID = -1;\n\n                private long value;\n\n                @Override\n                public int docID() {\n                  return docIDOut;\n                }\n\n                @Override\n                public int advance(int target) {\n                  throw new UnsupportedOperationException();\n                }\n\n                @Override\n                public boolean advanceExact(int target) throws IOException {\n                  throw new UnsupportedOperationException();\n                }\n\n                @Override\n                public long cost() {\n                  // TODO\n                  return 0;\n                }\n\n                @Override\n                public long longValue() {\n                  return value;\n                }\n\n                @Override\n                public int nextDoc() throws IOException {\n                  if (docIDIn == docIDOut) {\n                    if (currentValues == null) {\n                      docIDIn = NO_MORE_DOCS;\n                    } else {\n                      docIDIn = currentValues.nextDoc();\n                    }\n                  }\n                  if (updateDocID == docIDOut) {\n                    updateDocID = updatesIter.nextDoc();\n                  }\n                  if (docIDIn < updateDocID) {\n                    // no update to this doc\n                    docIDOut = docIDIn;\n                    value = currentValues.longValue();\n                  } else {\n                    docIDOut = updateDocID;\n                    if (docIDOut != NO_MORE_DOCS) {\n                      value = (Long) updatesIter.value();\n                    }\n                  }\n                  return docIDOut;\n                }\n              };\n            }\n          });\n      }\n      info.advanceDocValuesGen();\n      assert !fieldFiles.containsKey(fieldInfo.number);\n      fieldFiles.put(fieldInfo.number, trackingDir.getCreatedFiles());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f372764a5bd3ebacde5b99ee3303153eb5ec0d2f","date":1525347515,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/ReadersAndUpdates#handleDVUpdates(FieldInfos,Directory,DocValuesFormat,SegmentReader,Map[Integer,Set[String]],long,InfoStream).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/ReadersAndUpdates#handleDVUpdates(FieldInfos,Directory,DocValuesFormat,SegmentReader,Map[Integer,Set[String]],long,InfoStream).mjava","sourceNew":"  private synchronized void handleDVUpdates(FieldInfos infos,\n                                            Directory dir, DocValuesFormat dvFormat, final SegmentReader reader,\n                                            Map<Integer,Set<String>> fieldFiles, long maxDelGen, InfoStream infoStream) throws IOException {\n    for (Entry<String,List<DocValuesFieldUpdates>> ent : pendingDVUpdates.entrySet()) {\n      final String field = ent.getKey();\n      final List<DocValuesFieldUpdates> updates = ent.getValue();\n      DocValuesType type = updates.get(0).type;\n      assert type == DocValuesType.NUMERIC || type == DocValuesType.BINARY : \"unsupported type: \" + type;\n      final List<DocValuesFieldUpdates> updatesToApply = new ArrayList<>();\n      long bytes = 0;\n      for(DocValuesFieldUpdates update : updates) {\n        if (update.delGen <= maxDelGen) {\n          // safe to apply this one\n          bytes += update.ramBytesUsed();\n          updatesToApply.add(update);\n        }\n      }\n      if (updatesToApply.isEmpty()) {\n        // nothing to apply yet\n        continue;\n      }\n      if (infoStream.isEnabled(\"BD\")) {\n        infoStream.message(\"BD\", String.format(Locale.ROOT,\n                                               \"now write %d pending numeric DV updates for field=%s, seg=%s, bytes=%.3f MB\",\n                                               updatesToApply.size(),\n                                               field,\n                                               info,\n                                               bytes/1024./1024.));\n      }\n      final long nextDocValuesGen = info.getNextDocValuesGen();\n      final String segmentSuffix = Long.toString(nextDocValuesGen, Character.MAX_RADIX);\n      final IOContext updatesContext = new IOContext(new FlushInfo(info.info.maxDoc(), bytes));\n      final FieldInfo fieldInfo = infos.fieldInfo(field);\n      assert fieldInfo != null;\n      fieldInfo.setDocValuesGen(nextDocValuesGen);\n      final FieldInfos fieldInfos = new FieldInfos(new FieldInfo[] { fieldInfo });\n      // separately also track which files were created for this gen\n      final TrackingDirectoryWrapper trackingDir = new TrackingDirectoryWrapper(dir);\n      final SegmentWriteState state = new SegmentWriteState(null, trackingDir, info.info, fieldInfos, null, updatesContext, segmentSuffix);\n      try (final DocValuesConsumer fieldsConsumer = dvFormat.fieldsConsumer(state)) {\n        Function<FieldInfo, DocValuesFieldUpdates.Iterator> updateSupplier = (info) -> {\n          if (info != fieldInfo) {\n            throw new IllegalArgumentException(\"expected field info for field: \" + fieldInfo.name + \" but got: \" + info.name);\n          }\n          DocValuesFieldUpdates.Iterator[] subs = new DocValuesFieldUpdates.Iterator[updatesToApply.size()];\n          for(int i=0;i<subs.length;i++) {\n            subs[i] = updatesToApply.get(i).iterator();\n          }\n          return  DocValuesFieldUpdates.mergedIterator(subs);\n        };\n        pendingDeletes.onDocValuesUpdate(fieldInfo, updateSupplier.apply(fieldInfo));\n        if (type == DocValuesType.BINARY) {\n          fieldsConsumer.addBinaryField(fieldInfo, new EmptyDocValuesProducer() {\n            @Override\n            public BinaryDocValues getBinary(FieldInfo fieldInfoIn) throws IOException {\n              final MergedDocValues<BinaryDocValues> mergedDocValues = new MergedDocValues<>(\n                  reader.getBinaryDocValues(field),\n                  DocValuesFieldUpdates.Iterator.asBinaryDocValues(updateSupplier.apply(fieldInfo)));\n              // Merge sort of the original doc values with updated doc values:\n              return new BinaryDocValues() {\n                @Override\n                public BytesRef binaryValue() throws IOException {\n                  return mergedDocValues.currentValuesSupplier.binaryValue();\n                }\n                @Override\n                public boolean advanceExact(int target) {\n                  return mergedDocValues.advanceExact(target);\n                }\n                @Override\n                public int docID() {\n                  return mergedDocValues.docID();\n                }\n                @Override\n                public int nextDoc() throws IOException {\n                  return mergedDocValues.nextDoc();\n                }\n                @Override\n                public int advance(int target) {\n                  return mergedDocValues.advance(target);\n                }\n                @Override\n                public long cost() {\n                  return mergedDocValues.cost();\n                }\n              };\n            }\n          });\n        } else {\n          // write the numeric updates to a new gen'd docvalues file\n          fieldsConsumer.addNumericField(fieldInfo, new EmptyDocValuesProducer() {\n            @Override\n            public NumericDocValues getNumeric(FieldInfo fieldInfoIn) throws IOException {\n              final MergedDocValues<NumericDocValues> mergedDocValues = new MergedDocValues<>(\n                  reader.getNumericDocValues(field),\n                  DocValuesFieldUpdates.Iterator.asNumericDocValues(updateSupplier.apply(fieldInfo)));\n              // Merge sort of the original doc values with updated doc values:\n              return new NumericDocValues() {\n                @Override\n                public long longValue() throws IOException {\n                  return mergedDocValues.currentValuesSupplier.longValue();\n                }\n                @Override\n                public boolean advanceExact(int target) {\n                  return mergedDocValues.advanceExact(target);\n                }\n                @Override\n                public int docID() {\n                  return mergedDocValues.docID();\n                }\n                @Override\n                public int nextDoc() throws IOException {\n                  return mergedDocValues.nextDoc();\n                }\n                @Override\n                public int advance(int target) {\n                  return mergedDocValues.advance(target);\n                }\n                @Override\n                public long cost() {\n                  return mergedDocValues.cost();\n                }\n              };\n            }\n          });\n        }\n      }\n      info.advanceDocValuesGen();\n      assert !fieldFiles.containsKey(fieldInfo.number);\n      fieldFiles.put(fieldInfo.number, trackingDir.getCreatedFiles());\n    }\n  }\n\n","sourceOld":"  private synchronized void handleDVUpdates(FieldInfos infos,\n                                            Directory dir, DocValuesFormat dvFormat, final SegmentReader reader,\n                                            Map<Integer,Set<String>> fieldFiles, long maxDelGen, InfoStream infoStream) throws IOException {\n    for (Entry<String,List<DocValuesFieldUpdates>> ent : pendingDVUpdates.entrySet()) {\n      final String field = ent.getKey();\n      final List<DocValuesFieldUpdates> updates = ent.getValue();\n      DocValuesType type = updates.get(0).type;\n      assert type == DocValuesType.NUMERIC || type == DocValuesType.BINARY : \"unsupported type: \" + type;\n      final List<DocValuesFieldUpdates> updatesToApply = new ArrayList<>();\n      long bytes = 0;\n      for(DocValuesFieldUpdates update : updates) {\n        if (update.delGen <= maxDelGen) {\n          // safe to apply this one\n          bytes += update.ramBytesUsed();\n          updatesToApply.add(update);\n        }\n      }\n      if (updatesToApply.isEmpty()) {\n        // nothing to apply yet\n        continue;\n      }\n      if (infoStream.isEnabled(\"BD\")) {\n        infoStream.message(\"BD\", String.format(Locale.ROOT,\n                                               \"now write %d pending numeric DV updates for field=%s, seg=%s, bytes=%.3f MB\",\n                                               updatesToApply.size(),\n                                               field,\n                                               info,\n                                               bytes/1024./1024.));\n      }\n      final long nextDocValuesGen = info.getNextDocValuesGen();\n      final String segmentSuffix = Long.toString(nextDocValuesGen, Character.MAX_RADIX);\n      final IOContext updatesContext = new IOContext(new FlushInfo(info.info.maxDoc(), bytes));\n      final FieldInfo fieldInfo = infos.fieldInfo(field);\n      assert fieldInfo != null;\n      fieldInfo.setDocValuesGen(nextDocValuesGen);\n      final FieldInfos fieldInfos = new FieldInfos(new FieldInfo[] { fieldInfo });\n      // separately also track which files were created for this gen\n      final TrackingDirectoryWrapper trackingDir = new TrackingDirectoryWrapper(dir);\n      final SegmentWriteState state = new SegmentWriteState(null, trackingDir, info.info, fieldInfos, null, updatesContext, segmentSuffix);\n      try (final DocValuesConsumer fieldsConsumer = dvFormat.fieldsConsumer(state)) {\n        pendingDeletes.onDocValuesUpdate(fieldInfo);\n        Function<FieldInfo, DocValuesFieldUpdates.Iterator> updateSupplier = (info) -> {\n          if (info != fieldInfo) {\n            throw new IllegalArgumentException(\"expected field info for field: \" + fieldInfo.name + \" but got: \" + info.name);\n          }\n          DocValuesFieldUpdates.Iterator[] subs = new DocValuesFieldUpdates.Iterator[updatesToApply.size()];\n          for(int i=0;i<subs.length;i++) {\n            subs[i] = updatesToApply.get(i).iterator();\n          }\n          return  DocValuesFieldUpdates.mergedIterator(subs);\n        };\n        if (type == DocValuesType.BINARY) {\n          fieldsConsumer.addBinaryField(fieldInfo, new EmptyDocValuesProducer() {\n            @Override\n            public BinaryDocValues getBinary(FieldInfo fieldInfoIn) throws IOException {\n              final MergedDocValues<BinaryDocValues> mergedDocValues = new MergedDocValues<>(\n                  reader.getBinaryDocValues(field),\n                  DocValuesFieldUpdates.Iterator.asBinaryDocValues(updateSupplier.apply(fieldInfo)));\n              // Merge sort of the original doc values with updated doc values:\n              return new BinaryDocValues() {\n                @Override\n                public BytesRef binaryValue() throws IOException {\n                  return mergedDocValues.currentValuesSupplier.binaryValue();\n                }\n                @Override\n                public boolean advanceExact(int target) {\n                  return mergedDocValues.advanceExact(target);\n                }\n                @Override\n                public int docID() {\n                  return mergedDocValues.docID();\n                }\n                @Override\n                public int nextDoc() throws IOException {\n                  return mergedDocValues.nextDoc();\n                }\n                @Override\n                public int advance(int target) {\n                  return mergedDocValues.advance(target);\n                }\n                @Override\n                public long cost() {\n                  return mergedDocValues.cost();\n                }\n              };\n            }\n          });\n        } else {\n          // write the numeric updates to a new gen'd docvalues file\n          fieldsConsumer.addNumericField(fieldInfo, new EmptyDocValuesProducer() {\n            @Override\n            public NumericDocValues getNumeric(FieldInfo fieldInfoIn) throws IOException {\n              final MergedDocValues<NumericDocValues> mergedDocValues = new MergedDocValues<>(\n                  reader.getNumericDocValues(field),\n                  DocValuesFieldUpdates.Iterator.asNumericDocValues(updateSupplier.apply(fieldInfo)));\n              // Merge sort of the original doc values with updated doc values:\n              return new NumericDocValues() {\n                @Override\n                public long longValue() throws IOException {\n                  return mergedDocValues.currentValuesSupplier.longValue();\n                }\n                @Override\n                public boolean advanceExact(int target) {\n                  return mergedDocValues.advanceExact(target);\n                }\n                @Override\n                public int docID() {\n                  return mergedDocValues.docID();\n                }\n                @Override\n                public int nextDoc() throws IOException {\n                  return mergedDocValues.nextDoc();\n                }\n                @Override\n                public int advance(int target) {\n                  return mergedDocValues.advance(target);\n                }\n                @Override\n                public long cost() {\n                  return mergedDocValues.cost();\n                }\n              };\n            }\n          });\n        }\n      }\n      info.advanceDocValuesGen();\n      assert !fieldFiles.containsKey(fieldInfo.number);\n      fieldFiles.put(fieldInfo.number, trackingDir.getCreatedFiles());\n    }\n  }\n\n","bugFix":["4c088100f7646827db17ea080925f7a0a916b1cd"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"33adea025f43af3243278587a46b8d9fd2e8ccf9","date":1525885077,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/ReadersAndUpdates#handleDVUpdates(FieldInfos,Directory,DocValuesFormat,SegmentReader,Map[Integer,Set[String]],long,InfoStream).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/ReadersAndUpdates#handleDVUpdates(FieldInfos,Directory,DocValuesFormat,SegmentReader,Map[Integer,Set[String]],long,InfoStream).mjava","sourceNew":"  private synchronized void handleDVUpdates(FieldInfos infos,\n                                            Directory dir, DocValuesFormat dvFormat, final SegmentReader reader,\n                                            Map<Integer,Set<String>> fieldFiles, long maxDelGen, InfoStream infoStream) throws IOException {\n    for (Entry<String,List<DocValuesFieldUpdates>> ent : pendingDVUpdates.entrySet()) {\n      final String field = ent.getKey();\n      final List<DocValuesFieldUpdates> updates = ent.getValue();\n      DocValuesType type = updates.get(0).type;\n      assert type == DocValuesType.NUMERIC || type == DocValuesType.BINARY : \"unsupported type: \" + type;\n      final List<DocValuesFieldUpdates> updatesToApply = new ArrayList<>();\n      long bytes = 0;\n      for(DocValuesFieldUpdates update : updates) {\n        if (update.delGen <= maxDelGen) {\n          // safe to apply this one\n          bytes += update.ramBytesUsed();\n          updatesToApply.add(update);\n        }\n      }\n      if (updatesToApply.isEmpty()) {\n        // nothing to apply yet\n        continue;\n      }\n      if (infoStream.isEnabled(\"BD\")) {\n        infoStream.message(\"BD\", String.format(Locale.ROOT,\n                                               \"now write %d pending numeric DV updates for field=%s, seg=%s, bytes=%.3f MB\",\n                                               updatesToApply.size(),\n                                               field,\n                                               info,\n                                               bytes/1024./1024.));\n      }\n      final long nextDocValuesGen = info.getNextDocValuesGen();\n      final String segmentSuffix = Long.toString(nextDocValuesGen, Character.MAX_RADIX);\n      final IOContext updatesContext = new IOContext(new FlushInfo(info.info.maxDoc(), bytes));\n      final FieldInfo fieldInfo = infos.fieldInfo(field);\n      assert fieldInfo != null;\n      fieldInfo.setDocValuesGen(nextDocValuesGen);\n      final FieldInfos fieldInfos = new FieldInfos(new FieldInfo[] { fieldInfo });\n      // separately also track which files were created for this gen\n      final TrackingDirectoryWrapper trackingDir = new TrackingDirectoryWrapper(dir);\n      final SegmentWriteState state = new SegmentWriteState(null, trackingDir, info.info, fieldInfos, null, updatesContext, segmentSuffix);\n      try (final DocValuesConsumer fieldsConsumer = dvFormat.fieldsConsumer(state)) {\n        Function<FieldInfo, DocValuesFieldUpdates.Iterator> updateSupplier = (info) -> {\n          if (info != fieldInfo) {\n            throw new IllegalArgumentException(\"expected field info for field: \" + fieldInfo.name + \" but got: \" + info.name);\n          }\n          DocValuesFieldUpdates.Iterator[] subs = new DocValuesFieldUpdates.Iterator[updatesToApply.size()];\n          for(int i=0;i<subs.length;i++) {\n            subs[i] = updatesToApply.get(i).iterator();\n          }\n          return  DocValuesFieldUpdates.mergedIterator(subs);\n        };\n        pendingDeletes.onDocValuesUpdate(fieldInfo, updateSupplier.apply(fieldInfo));\n        if (type == DocValuesType.BINARY) {\n          fieldsConsumer.addBinaryField(fieldInfo, new EmptyDocValuesProducer() {\n            @Override\n            public BinaryDocValues getBinary(FieldInfo fieldInfoIn) throws IOException {\n              DocValuesFieldUpdates.Iterator iterator = updateSupplier.apply(fieldInfo);\n              final MergedDocValues<BinaryDocValues> mergedDocValues = new MergedDocValues<>(\n                  reader.getBinaryDocValues(field),\n                  DocValuesFieldUpdates.Iterator.asBinaryDocValues(iterator), iterator);\n              // Merge sort of the original doc values with updated doc values:\n              return new BinaryDocValues() {\n                @Override\n                public BytesRef binaryValue() throws IOException {\n                  return mergedDocValues.currentValuesSupplier.binaryValue();\n                }\n                @Override\n                public boolean advanceExact(int target) {\n                  return mergedDocValues.advanceExact(target);\n                }\n                @Override\n                public int docID() {\n                  return mergedDocValues.docID();\n                }\n                @Override\n                public int nextDoc() throws IOException {\n                  return mergedDocValues.nextDoc();\n                }\n                @Override\n                public int advance(int target) {\n                  return mergedDocValues.advance(target);\n                }\n                @Override\n                public long cost() {\n                  return mergedDocValues.cost();\n                }\n              };\n            }\n          });\n        } else {\n          // write the numeric updates to a new gen'd docvalues file\n          fieldsConsumer.addNumericField(fieldInfo, new EmptyDocValuesProducer() {\n            @Override\n            public NumericDocValues getNumeric(FieldInfo fieldInfoIn) throws IOException {\n              DocValuesFieldUpdates.Iterator iterator = updateSupplier.apply(fieldInfo);\n              final MergedDocValues<NumericDocValues> mergedDocValues = new MergedDocValues<>(\n                  reader.getNumericDocValues(field),\n                  DocValuesFieldUpdates.Iterator.asNumericDocValues(iterator), iterator);\n              // Merge sort of the original doc values with updated doc values:\n              return new NumericDocValues() {\n                @Override\n                public long longValue() throws IOException {\n                  return mergedDocValues.currentValuesSupplier.longValue();\n                }\n                @Override\n                public boolean advanceExact(int target) {\n                  return mergedDocValues.advanceExact(target);\n                }\n                @Override\n                public int docID() {\n                  return mergedDocValues.docID();\n                }\n                @Override\n                public int nextDoc() throws IOException {\n                  return mergedDocValues.nextDoc();\n                }\n                @Override\n                public int advance(int target) {\n                  return mergedDocValues.advance(target);\n                }\n                @Override\n                public long cost() {\n                  return mergedDocValues.cost();\n                }\n              };\n            }\n          });\n        }\n      }\n      info.advanceDocValuesGen();\n      assert !fieldFiles.containsKey(fieldInfo.number);\n      fieldFiles.put(fieldInfo.number, trackingDir.getCreatedFiles());\n    }\n  }\n\n","sourceOld":"  private synchronized void handleDVUpdates(FieldInfos infos,\n                                            Directory dir, DocValuesFormat dvFormat, final SegmentReader reader,\n                                            Map<Integer,Set<String>> fieldFiles, long maxDelGen, InfoStream infoStream) throws IOException {\n    for (Entry<String,List<DocValuesFieldUpdates>> ent : pendingDVUpdates.entrySet()) {\n      final String field = ent.getKey();\n      final List<DocValuesFieldUpdates> updates = ent.getValue();\n      DocValuesType type = updates.get(0).type;\n      assert type == DocValuesType.NUMERIC || type == DocValuesType.BINARY : \"unsupported type: \" + type;\n      final List<DocValuesFieldUpdates> updatesToApply = new ArrayList<>();\n      long bytes = 0;\n      for(DocValuesFieldUpdates update : updates) {\n        if (update.delGen <= maxDelGen) {\n          // safe to apply this one\n          bytes += update.ramBytesUsed();\n          updatesToApply.add(update);\n        }\n      }\n      if (updatesToApply.isEmpty()) {\n        // nothing to apply yet\n        continue;\n      }\n      if (infoStream.isEnabled(\"BD\")) {\n        infoStream.message(\"BD\", String.format(Locale.ROOT,\n                                               \"now write %d pending numeric DV updates for field=%s, seg=%s, bytes=%.3f MB\",\n                                               updatesToApply.size(),\n                                               field,\n                                               info,\n                                               bytes/1024./1024.));\n      }\n      final long nextDocValuesGen = info.getNextDocValuesGen();\n      final String segmentSuffix = Long.toString(nextDocValuesGen, Character.MAX_RADIX);\n      final IOContext updatesContext = new IOContext(new FlushInfo(info.info.maxDoc(), bytes));\n      final FieldInfo fieldInfo = infos.fieldInfo(field);\n      assert fieldInfo != null;\n      fieldInfo.setDocValuesGen(nextDocValuesGen);\n      final FieldInfos fieldInfos = new FieldInfos(new FieldInfo[] { fieldInfo });\n      // separately also track which files were created for this gen\n      final TrackingDirectoryWrapper trackingDir = new TrackingDirectoryWrapper(dir);\n      final SegmentWriteState state = new SegmentWriteState(null, trackingDir, info.info, fieldInfos, null, updatesContext, segmentSuffix);\n      try (final DocValuesConsumer fieldsConsumer = dvFormat.fieldsConsumer(state)) {\n        Function<FieldInfo, DocValuesFieldUpdates.Iterator> updateSupplier = (info) -> {\n          if (info != fieldInfo) {\n            throw new IllegalArgumentException(\"expected field info for field: \" + fieldInfo.name + \" but got: \" + info.name);\n          }\n          DocValuesFieldUpdates.Iterator[] subs = new DocValuesFieldUpdates.Iterator[updatesToApply.size()];\n          for(int i=0;i<subs.length;i++) {\n            subs[i] = updatesToApply.get(i).iterator();\n          }\n          return  DocValuesFieldUpdates.mergedIterator(subs);\n        };\n        pendingDeletes.onDocValuesUpdate(fieldInfo, updateSupplier.apply(fieldInfo));\n        if (type == DocValuesType.BINARY) {\n          fieldsConsumer.addBinaryField(fieldInfo, new EmptyDocValuesProducer() {\n            @Override\n            public BinaryDocValues getBinary(FieldInfo fieldInfoIn) throws IOException {\n              final MergedDocValues<BinaryDocValues> mergedDocValues = new MergedDocValues<>(\n                  reader.getBinaryDocValues(field),\n                  DocValuesFieldUpdates.Iterator.asBinaryDocValues(updateSupplier.apply(fieldInfo)));\n              // Merge sort of the original doc values with updated doc values:\n              return new BinaryDocValues() {\n                @Override\n                public BytesRef binaryValue() throws IOException {\n                  return mergedDocValues.currentValuesSupplier.binaryValue();\n                }\n                @Override\n                public boolean advanceExact(int target) {\n                  return mergedDocValues.advanceExact(target);\n                }\n                @Override\n                public int docID() {\n                  return mergedDocValues.docID();\n                }\n                @Override\n                public int nextDoc() throws IOException {\n                  return mergedDocValues.nextDoc();\n                }\n                @Override\n                public int advance(int target) {\n                  return mergedDocValues.advance(target);\n                }\n                @Override\n                public long cost() {\n                  return mergedDocValues.cost();\n                }\n              };\n            }\n          });\n        } else {\n          // write the numeric updates to a new gen'd docvalues file\n          fieldsConsumer.addNumericField(fieldInfo, new EmptyDocValuesProducer() {\n            @Override\n            public NumericDocValues getNumeric(FieldInfo fieldInfoIn) throws IOException {\n              final MergedDocValues<NumericDocValues> mergedDocValues = new MergedDocValues<>(\n                  reader.getNumericDocValues(field),\n                  DocValuesFieldUpdates.Iterator.asNumericDocValues(updateSupplier.apply(fieldInfo)));\n              // Merge sort of the original doc values with updated doc values:\n              return new NumericDocValues() {\n                @Override\n                public long longValue() throws IOException {\n                  return mergedDocValues.currentValuesSupplier.longValue();\n                }\n                @Override\n                public boolean advanceExact(int target) {\n                  return mergedDocValues.advanceExact(target);\n                }\n                @Override\n                public int docID() {\n                  return mergedDocValues.docID();\n                }\n                @Override\n                public int nextDoc() throws IOException {\n                  return mergedDocValues.nextDoc();\n                }\n                @Override\n                public int advance(int target) {\n                  return mergedDocValues.advance(target);\n                }\n                @Override\n                public long cost() {\n                  return mergedDocValues.cost();\n                }\n              };\n            }\n          });\n        }\n      }\n      info.advanceDocValuesGen();\n      assert !fieldFiles.containsKey(fieldInfo.number);\n      fieldFiles.put(fieldInfo.number, trackingDir.getCreatedFiles());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4c088100f7646827db17ea080925f7a0a916b1cd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f372764a5bd3ebacde5b99ee3303153eb5ec0d2f":["4c088100f7646827db17ea080925f7a0a916b1cd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"33adea025f43af3243278587a46b8d9fd2e8ccf9":["f372764a5bd3ebacde5b99ee3303153eb5ec0d2f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["33adea025f43af3243278587a46b8d9fd2e8ccf9"]},"commit2Childs":{"4c088100f7646827db17ea080925f7a0a916b1cd":["f372764a5bd3ebacde5b99ee3303153eb5ec0d2f"],"f372764a5bd3ebacde5b99ee3303153eb5ec0d2f":["33adea025f43af3243278587a46b8d9fd2e8ccf9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4c088100f7646827db17ea080925f7a0a916b1cd"],"33adea025f43af3243278587a46b8d9fd2e8ccf9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}