{"path":"lucene/src/java/org/apache/lucene/codecs/PerDocConsumer#merge(MergeState).mjava","commits":[{"id":"a0ae5e3ed1232483b7b8a014f175a5fe43595982","date":1324062192,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/PerDocConsumer#merge(MergeState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/PerDocConsumer#merge(MergeState).mjava","sourceNew":"  /**\n   * Consumes and merges the given {@link PerDocProducer} producer\n   * into this consumers format.   \n   */\n  public void merge(MergeState mergeState) throws IOException {\n    final DocValues[] docValues = new DocValues[mergeState.readers.size()];\n\n    for (FieldInfo fieldInfo : mergeState.fieldInfos) {\n      mergeState.fieldInfo = fieldInfo; // set the field we are merging\n      if (fieldInfo.hasDocValues()) {\n        for (int i = 0; i < docValues.length; i++) {\n          docValues[i] = mergeState.readers.get(i).reader.docValues(fieldInfo.name);\n        }\n        final DocValuesConsumer docValuesConsumer = addValuesField(fieldInfo.getDocValuesType(), fieldInfo);\n        assert docValuesConsumer != null;\n        docValuesConsumer.merge(mergeState, docValues);\n      }\n    }\n  }  \n\n","sourceOld":"  /**\n   * Consumes and merges the given {@link PerDocProducer} producer\n   * into this consumers format.   \n   */\n  public void merge(MergeState mergeState) throws IOException {\n    final DocValues[] docValues = new DocValues[mergeState.readers.size()];\n\n    for (FieldInfo fieldInfo : mergeState.fieldInfos) {\n      mergeState.fieldInfo = fieldInfo; // set the field we are merging\n      if (fieldInfo.hasDocValues()) {\n        for (int i = 0; i < docValues.length; i++) {\n          docValues[i] = mergeState.readers.get(i).reader.docValues(fieldInfo.name);\n        }\n        final DocValuesConsumer docValuesConsumer = addValuesField(fieldInfo.getDocValuesType(), fieldInfo);\n        assert docValuesConsumer != null;\n        docValuesConsumer.merge(mergeState, docValues);\n      }\n    }\n  }  \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f6e3376a314fcc2b31bc46d399c2ff23552b78d6","date":1325780477,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/PerDocConsumer#merge(MergeState).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/PerDocConsumer#merge(MergeState).mjava","sourceNew":"  /**\n   * Consumes and merges the given {@link PerDocProducer} producer\n   * into this consumers format.   \n   */\n  public void merge(MergeState mergeState) throws IOException {\n    final DocValues[] docValues = new DocValues[mergeState.readers.size()];\n\n    for (FieldInfo fieldInfo : mergeState.fieldInfos) {\n      mergeState.fieldInfo = fieldInfo; // set the field we are merging\n      if (canMerge(fieldInfo)) {\n        for (int i = 0; i < docValues.length; i++) {\n          docValues[i] = getDocValuesForMerge(mergeState.readers.get(i).reader, fieldInfo);\n        }\n        final DocValuesConsumer docValuesConsumer = addValuesField(getDocValuesType(fieldInfo), fieldInfo);\n        assert docValuesConsumer != null;\n        docValuesConsumer.merge(mergeState, docValues);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Consumes and merges the given {@link PerDocProducer} producer\n   * into this consumers format.   \n   */\n  public void merge(MergeState mergeState) throws IOException {\n    final DocValues[] docValues = new DocValues[mergeState.readers.size()];\n\n    for (FieldInfo fieldInfo : mergeState.fieldInfos) {\n      mergeState.fieldInfo = fieldInfo; // set the field we are merging\n      if (fieldInfo.hasDocValues()) {\n        for (int i = 0; i < docValues.length; i++) {\n          docValues[i] = mergeState.readers.get(i).reader.docValues(fieldInfo.name);\n        }\n        final DocValuesConsumer docValuesConsumer = addValuesField(fieldInfo.getDocValuesType(), fieldInfo);\n        assert docValuesConsumer != null;\n        docValuesConsumer.merge(mergeState, docValues);\n      }\n    }\n  }  \n\n","bugFix":null,"bugIntro":["c95a819869502635864dac0a788f874787e3395b"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9e8d5a6ffbfa3405d234a87c833741eabed98d13","date":1326725835,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/PerDocConsumer#merge(MergeState).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/PerDocConsumer#merge(MergeState).mjava","sourceNew":"  /**\n   * Consumes and merges the given {@link PerDocProducer} producer\n   * into this consumers format.   \n   */\n  public void merge(MergeState mergeState) throws IOException {\n    final DocValues[] docValues = new DocValues[mergeState.readers.size()];\n\n    for (FieldInfo fieldInfo : mergeState.fieldInfos) {\n      mergeState.fieldInfo = fieldInfo; // set the field we are merging\n      if (canMerge(fieldInfo)) {\n        for (int i = 0; i < docValues.length; i++) {\n          docValues[i] = getDocValuesForMerge(mergeState.readers.get(i).reader, fieldInfo);\n        }\n        Type docValuesType = getDocValuesType(fieldInfo);\n        assert docValuesType != null;\n        \n        final DocValuesConsumer docValuesConsumer = addValuesField(docValuesType, fieldInfo);\n        assert docValuesConsumer != null;\n        docValuesConsumer.merge(mergeState, docValues);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Consumes and merges the given {@link PerDocProducer} producer\n   * into this consumers format.   \n   */\n  public void merge(MergeState mergeState) throws IOException {\n    final DocValues[] docValues = new DocValues[mergeState.readers.size()];\n\n    for (FieldInfo fieldInfo : mergeState.fieldInfos) {\n      mergeState.fieldInfo = fieldInfo; // set the field we are merging\n      if (canMerge(fieldInfo)) {\n        for (int i = 0; i < docValues.length; i++) {\n          docValues[i] = getDocValuesForMerge(mergeState.readers.get(i).reader, fieldInfo);\n        }\n        final DocValuesConsumer docValuesConsumer = addValuesField(getDocValuesType(fieldInfo), fieldInfo);\n        assert docValuesConsumer != null;\n        docValuesConsumer.merge(mergeState, docValues);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/PerDocConsumer#merge(MergeState).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/PerDocConsumer#merge(MergeState).mjava","sourceNew":"  /**\n   * Consumes and merges the given {@link PerDocProducer} producer\n   * into this consumers format.   \n   */\n  public void merge(MergeState mergeState) throws IOException {\n    final DocValues[] docValues = new DocValues[mergeState.readers.size()];\n\n    for (FieldInfo fieldInfo : mergeState.fieldInfos) {\n      mergeState.fieldInfo = fieldInfo; // set the field we are merging\n      if (canMerge(fieldInfo)) {\n        for (int i = 0; i < docValues.length; i++) {\n          docValues[i] = getDocValuesForMerge(mergeState.readers.get(i).reader, fieldInfo);\n        }\n        Type docValuesType = getDocValuesType(fieldInfo);\n        assert docValuesType != null;\n        \n        final DocValuesConsumer docValuesConsumer = addValuesField(docValuesType, fieldInfo);\n        assert docValuesConsumer != null;\n        docValuesConsumer.merge(mergeState, docValues);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Consumes and merges the given {@link PerDocProducer} producer\n   * into this consumers format.   \n   */\n  public void merge(MergeState mergeState) throws IOException {\n    final DocValues[] docValues = new DocValues[mergeState.readers.size()];\n\n    for (FieldInfo fieldInfo : mergeState.fieldInfos) {\n      mergeState.fieldInfo = fieldInfo; // set the field we are merging\n      if (canMerge(fieldInfo)) {\n        for (int i = 0; i < docValues.length; i++) {\n          docValues[i] = getDocValuesForMerge(mergeState.readers.get(i).reader, fieldInfo);\n        }\n        Type docValuesType = getDocValuesType(fieldInfo);\n        assert docValuesType != null;\n        \n        final DocValuesConsumer docValuesConsumer = addValuesField(docValuesType, fieldInfo);\n        assert docValuesConsumer != null;\n        docValuesConsumer.merge(mergeState, docValues);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"9e8d5a6ffbfa3405d234a87c833741eabed98d13":["f6e3376a314fcc2b31bc46d399c2ff23552b78d6"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["9e8d5a6ffbfa3405d234a87c833741eabed98d13"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f6e3376a314fcc2b31bc46d399c2ff23552b78d6":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"9e8d5a6ffbfa3405d234a87c833741eabed98d13":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"f6e3376a314fcc2b31bc46d399c2ff23552b78d6":["9e8d5a6ffbfa3405d234a87c833741eabed98d13"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["f6e3376a314fcc2b31bc46d399c2ff23552b78d6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}