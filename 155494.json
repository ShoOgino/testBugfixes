{"path":"solr/core/src/java/org/apache/solr/handler/admin/MetricsHistoryHandler#checkSystemCollection().mjava","commits":[{"id":"4181b4cf0450ea3c6d1aff8dc3ad4ed9cd3eeb6a","date":1527582939,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/MetricsHistoryHandler#checkSystemCollection().mjava","pathOld":"/dev/null","sourceNew":"  public void checkSystemCollection() {\n    // check that .system exists\n    try {\n      if (cloudManager.isClosed() || Thread.interrupted()) {\n        factory.setPersistent(false);\n        return;\n      }\n      ClusterState clusterState = cloudManager.getClusterStateProvider().getClusterState();\n      DocCollection systemColl = clusterState.getCollectionOrNull(CollectionAdminParams.SYSTEM_COLL);\n      if (systemColl == null) {\n        if (logMissingCollection) {\n          log.warn(\"Missing \" + CollectionAdminParams.SYSTEM_COLL + \", keeping metrics history in memory\");\n          logMissingCollection = false;\n        }\n        factory.setPersistent(false);\n        return;\n      } else {\n        boolean ready = false;\n        for (Replica r : systemColl.getReplicas()) {\n          if (r.isActive(clusterState.getLiveNodes())) {\n            ready = true;\n            break;\n          }\n        }\n        if (!ready) {\n          log.debug(CollectionAdminParams.SYSTEM_COLL + \" not ready yet, keeping metrics history in memory\");\n          factory.setPersistent(false);\n          return;\n        }\n      }\n    } catch (Exception e) {\n      log.warn(\"Error getting cluster state, keeping metrics history in memory\", e);\n      factory.setPersistent(false);\n      return;\n    }\n    logMissingCollection = true;\n    factory.setPersistent(true);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["f8f0f2472d437d44ec2144932e1d13fb494e82a3"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f8f0f2472d437d44ec2144932e1d13fb494e82a3","date":1528403207,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/MetricsHistoryHandler#checkSystemCollection().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/MetricsHistoryHandler#checkSystemCollection().mjava","sourceNew":"  // check that .system exists\n  public void checkSystemCollection() {\n    if (cloudManager != null) {\n      try {\n        if (cloudManager.isClosed() || Thread.interrupted()) {\n          factory.setPersistent(false);\n          return;\n        }\n        ClusterState clusterState = cloudManager.getClusterStateProvider().getClusterState();\n        DocCollection systemColl = clusterState.getCollectionOrNull(CollectionAdminParams.SYSTEM_COLL);\n        if (systemColl == null) {\n          if (logMissingCollection) {\n            log.warn(\"Missing \" + CollectionAdminParams.SYSTEM_COLL + \", keeping metrics history in memory\");\n            logMissingCollection = false;\n          }\n          factory.setPersistent(false);\n          return;\n        } else {\n          boolean ready = false;\n          for (Replica r : systemColl.getReplicas()) {\n            if (r.isActive(clusterState.getLiveNodes())) {\n              ready = true;\n              break;\n            }\n          }\n          if (!ready) {\n            log.debug(CollectionAdminParams.SYSTEM_COLL + \" not ready yet, keeping metrics history in memory\");\n            factory.setPersistent(false);\n            return;\n          }\n        }\n      } catch (Exception e) {\n        if (logMissingCollection) {\n          log.warn(\"Error getting cluster state, keeping metrics history in memory\", e);\n        }\n        logMissingCollection = false;\n        factory.setPersistent(false);\n        return;\n      }\n      logMissingCollection = true;\n      factory.setPersistent(true);\n    } else {\n      try {\n        solrClient.query(CollectionAdminParams.SYSTEM_COLL, new SolrQuery(CommonParams.Q, \"*:*\", CommonParams.ROWS, \"0\"));\n        factory.setPersistent(true);\n        logMissingCollection = true;\n      } catch (Exception e) {\n        if (logMissingCollection) {\n          log.warn(\"Error querying .system collection, keeping metrics history in memory\", e);\n        }\n        logMissingCollection = false;\n        factory.setPersistent(false);\n      }\n    }\n  }\n\n","sourceOld":"  public void checkSystemCollection() {\n    // check that .system exists\n    try {\n      if (cloudManager.isClosed() || Thread.interrupted()) {\n        factory.setPersistent(false);\n        return;\n      }\n      ClusterState clusterState = cloudManager.getClusterStateProvider().getClusterState();\n      DocCollection systemColl = clusterState.getCollectionOrNull(CollectionAdminParams.SYSTEM_COLL);\n      if (systemColl == null) {\n        if (logMissingCollection) {\n          log.warn(\"Missing \" + CollectionAdminParams.SYSTEM_COLL + \", keeping metrics history in memory\");\n          logMissingCollection = false;\n        }\n        factory.setPersistent(false);\n        return;\n      } else {\n        boolean ready = false;\n        for (Replica r : systemColl.getReplicas()) {\n          if (r.isActive(clusterState.getLiveNodes())) {\n            ready = true;\n            break;\n          }\n        }\n        if (!ready) {\n          log.debug(CollectionAdminParams.SYSTEM_COLL + \" not ready yet, keeping metrics history in memory\");\n          factory.setPersistent(false);\n          return;\n        }\n      }\n    } catch (Exception e) {\n      log.warn(\"Error getting cluster state, keeping metrics history in memory\", e);\n      factory.setPersistent(false);\n      return;\n    }\n    logMissingCollection = true;\n    factory.setPersistent(true);\n  }\n\n","bugFix":["4181b4cf0450ea3c6d1aff8dc3ad4ed9cd3eeb6a"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dcfa8a1a5da4cfdac38e256c38e4b631637aa157","date":1528911895,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/MetricsHistoryHandler#checkSystemCollection().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/MetricsHistoryHandler#checkSystemCollection().mjava","sourceNew":"  // check that .system exists\n  public void checkSystemCollection() {\n    if (cloudManager != null) {\n      try {\n        if (cloudManager.isClosed() || Thread.interrupted()) {\n          factory.setPersistent(false);\n          return;\n        }\n        ClusterState clusterState = cloudManager.getClusterStateProvider().getClusterState();\n        DocCollection systemColl = clusterState.getCollectionOrNull(CollectionAdminParams.SYSTEM_COLL);\n        if (systemColl == null) {\n          if (logMissingCollection) {\n            log.info(\"No \" + CollectionAdminParams.SYSTEM_COLL + \" collection, keeping metrics history in memory.\");\n            logMissingCollection = false;\n          }\n          factory.setPersistent(false);\n          return;\n        } else {\n          boolean ready = false;\n          for (Replica r : systemColl.getReplicas()) {\n            if (r.isActive(clusterState.getLiveNodes())) {\n              ready = true;\n              break;\n            }\n          }\n          if (!ready) {\n            log.debug(CollectionAdminParams.SYSTEM_COLL + \"collection not ready yet, keeping metrics history in memory\");\n            factory.setPersistent(false);\n            return;\n          }\n        }\n      } catch (Exception e) {\n        if (logMissingCollection) {\n          log.warn(\"Error getting cluster state, keeping metrics history in memory\", e);\n        }\n        logMissingCollection = false;\n        factory.setPersistent(false);\n        return;\n      }\n      logMissingCollection = true;\n      factory.setPersistent(true);\n    } else {\n      try {\n        solrClient.query(CollectionAdminParams.SYSTEM_COLL, new SolrQuery(CommonParams.Q, \"*:*\", CommonParams.ROWS, \"0\"));\n        factory.setPersistent(true);\n        logMissingCollection = true;\n      } catch (Exception e) {\n        if (logMissingCollection) {\n          log.info(\"No \" + CollectionAdminParams.SYSTEM_COLL + \" collection, keeping metrics history in memory.\");\n        }\n        logMissingCollection = false;\n        factory.setPersistent(false);\n      }\n    }\n  }\n\n","sourceOld":"  // check that .system exists\n  public void checkSystemCollection() {\n    if (cloudManager != null) {\n      try {\n        if (cloudManager.isClosed() || Thread.interrupted()) {\n          factory.setPersistent(false);\n          return;\n        }\n        ClusterState clusterState = cloudManager.getClusterStateProvider().getClusterState();\n        DocCollection systemColl = clusterState.getCollectionOrNull(CollectionAdminParams.SYSTEM_COLL);\n        if (systemColl == null) {\n          if (logMissingCollection) {\n            log.warn(\"Missing \" + CollectionAdminParams.SYSTEM_COLL + \", keeping metrics history in memory\");\n            logMissingCollection = false;\n          }\n          factory.setPersistent(false);\n          return;\n        } else {\n          boolean ready = false;\n          for (Replica r : systemColl.getReplicas()) {\n            if (r.isActive(clusterState.getLiveNodes())) {\n              ready = true;\n              break;\n            }\n          }\n          if (!ready) {\n            log.debug(CollectionAdminParams.SYSTEM_COLL + \" not ready yet, keeping metrics history in memory\");\n            factory.setPersistent(false);\n            return;\n          }\n        }\n      } catch (Exception e) {\n        if (logMissingCollection) {\n          log.warn(\"Error getting cluster state, keeping metrics history in memory\", e);\n        }\n        logMissingCollection = false;\n        factory.setPersistent(false);\n        return;\n      }\n      logMissingCollection = true;\n      factory.setPersistent(true);\n    } else {\n      try {\n        solrClient.query(CollectionAdminParams.SYSTEM_COLL, new SolrQuery(CommonParams.Q, \"*:*\", CommonParams.ROWS, \"0\"));\n        factory.setPersistent(true);\n        logMissingCollection = true;\n      } catch (Exception e) {\n        if (logMissingCollection) {\n          log.warn(\"Error querying .system collection, keeping metrics history in memory\", e);\n        }\n        logMissingCollection = false;\n        factory.setPersistent(false);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/MetricsHistoryHandler#checkSystemCollection().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/MetricsHistoryHandler#checkSystemCollection().mjava","sourceNew":"  // check that .system exists\n  public void checkSystemCollection() {\n    if (cloudManager != null) {\n      try {\n        if (cloudManager.isClosed() || Thread.interrupted()) {\n          factory.setPersistent(false);\n          return;\n        }\n        ClusterState clusterState = cloudManager.getClusterStateProvider().getClusterState();\n        DocCollection systemColl = clusterState.getCollectionOrNull(CollectionAdminParams.SYSTEM_COLL);\n        if (systemColl == null) {\n          if (logMissingCollection) {\n            log.info(\"No \" + CollectionAdminParams.SYSTEM_COLL + \" collection, keeping metrics history in memory.\");\n            logMissingCollection = false;\n          }\n          factory.setPersistent(false);\n          return;\n        } else {\n          boolean ready = false;\n          for (Replica r : systemColl.getReplicas()) {\n            if (r.isActive(clusterState.getLiveNodes())) {\n              ready = true;\n              break;\n            }\n          }\n          if (!ready) {\n            log.debug(CollectionAdminParams.SYSTEM_COLL + \"collection not ready yet, keeping metrics history in memory\");\n            factory.setPersistent(false);\n            return;\n          }\n        }\n      } catch (Exception e) {\n        if (logMissingCollection) {\n          log.warn(\"Error getting cluster state, keeping metrics history in memory\", e);\n        }\n        logMissingCollection = false;\n        factory.setPersistent(false);\n        return;\n      }\n      logMissingCollection = true;\n      factory.setPersistent(true);\n    } else {\n      try {\n        solrClient.query(CollectionAdminParams.SYSTEM_COLL, new SolrQuery(CommonParams.Q, \"*:*\", CommonParams.ROWS, \"0\"));\n        factory.setPersistent(true);\n        logMissingCollection = true;\n      } catch (Exception e) {\n        if (logMissingCollection) {\n          log.info(\"No \" + CollectionAdminParams.SYSTEM_COLL + \" collection, keeping metrics history in memory.\");\n        }\n        logMissingCollection = false;\n        factory.setPersistent(false);\n      }\n    }\n  }\n\n","sourceOld":"  public void checkSystemCollection() {\n    // check that .system exists\n    try {\n      if (cloudManager.isClosed() || Thread.interrupted()) {\n        factory.setPersistent(false);\n        return;\n      }\n      ClusterState clusterState = cloudManager.getClusterStateProvider().getClusterState();\n      DocCollection systemColl = clusterState.getCollectionOrNull(CollectionAdminParams.SYSTEM_COLL);\n      if (systemColl == null) {\n        if (logMissingCollection) {\n          log.warn(\"Missing \" + CollectionAdminParams.SYSTEM_COLL + \", keeping metrics history in memory\");\n          logMissingCollection = false;\n        }\n        factory.setPersistent(false);\n        return;\n      } else {\n        boolean ready = false;\n        for (Replica r : systemColl.getReplicas()) {\n          if (r.isActive(clusterState.getLiveNodes())) {\n            ready = true;\n            break;\n          }\n        }\n        if (!ready) {\n          log.debug(CollectionAdminParams.SYSTEM_COLL + \" not ready yet, keeping metrics history in memory\");\n          factory.setPersistent(false);\n          return;\n        }\n      }\n    } catch (Exception e) {\n      log.warn(\"Error getting cluster state, keeping metrics history in memory\", e);\n      factory.setPersistent(false);\n      return;\n    }\n    logMissingCollection = true;\n    factory.setPersistent(true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/MetricsHistoryHandler#checkSystemCollection().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/MetricsHistoryHandler#checkSystemCollection().mjava","sourceNew":"  // check that .system exists\n  public void checkSystemCollection() {\n    if (cloudManager != null) {\n      try {\n        if (cloudManager.isClosed() || Thread.interrupted()) {\n          factory.setPersistent(false);\n          return;\n        }\n        ClusterState clusterState = cloudManager.getClusterStateProvider().getClusterState();\n        DocCollection systemColl = clusterState.getCollectionOrNull(CollectionAdminParams.SYSTEM_COLL);\n        if (systemColl == null) {\n          if (logMissingCollection) {\n            log.info(\"No \" + CollectionAdminParams.SYSTEM_COLL + \" collection, keeping metrics history in memory.\");\n            logMissingCollection = false;\n          }\n          factory.setPersistent(false);\n          return;\n        } else {\n          boolean ready = false;\n          for (Replica r : systemColl.getReplicas()) {\n            if (r.isActive(clusterState.getLiveNodes())) {\n              ready = true;\n              break;\n            }\n          }\n          if (!ready) {\n            log.debug(CollectionAdminParams.SYSTEM_COLL + \"collection not ready yet, keeping metrics history in memory\");\n            factory.setPersistent(false);\n            return;\n          }\n        }\n      } catch (Exception e) {\n        if (logMissingCollection) {\n          log.warn(\"Error getting cluster state, keeping metrics history in memory\", e);\n        }\n        logMissingCollection = false;\n        factory.setPersistent(false);\n        return;\n      }\n      logMissingCollection = true;\n      factory.setPersistent(true);\n    } else {\n      try {\n        solrClient.query(CollectionAdminParams.SYSTEM_COLL, new SolrQuery(CommonParams.Q, \"*:*\", CommonParams.ROWS, \"0\"));\n        factory.setPersistent(true);\n        logMissingCollection = true;\n      } catch (Exception e) {\n        if (logMissingCollection) {\n          log.info(\"No \" + CollectionAdminParams.SYSTEM_COLL + \" collection, keeping metrics history in memory.\");\n        }\n        logMissingCollection = false;\n        factory.setPersistent(false);\n      }\n    }\n  }\n\n","sourceOld":"  public void checkSystemCollection() {\n    // check that .system exists\n    try {\n      if (cloudManager.isClosed() || Thread.interrupted()) {\n        factory.setPersistent(false);\n        return;\n      }\n      ClusterState clusterState = cloudManager.getClusterStateProvider().getClusterState();\n      DocCollection systemColl = clusterState.getCollectionOrNull(CollectionAdminParams.SYSTEM_COLL);\n      if (systemColl == null) {\n        if (logMissingCollection) {\n          log.warn(\"Missing \" + CollectionAdminParams.SYSTEM_COLL + \", keeping metrics history in memory\");\n          logMissingCollection = false;\n        }\n        factory.setPersistent(false);\n        return;\n      } else {\n        boolean ready = false;\n        for (Replica r : systemColl.getReplicas()) {\n          if (r.isActive(clusterState.getLiveNodes())) {\n            ready = true;\n            break;\n          }\n        }\n        if (!ready) {\n          log.debug(CollectionAdminParams.SYSTEM_COLL + \" not ready yet, keeping metrics history in memory\");\n          factory.setPersistent(false);\n          return;\n        }\n      }\n    } catch (Exception e) {\n      log.warn(\"Error getting cluster state, keeping metrics history in memory\", e);\n      factory.setPersistent(false);\n      return;\n    }\n    logMissingCollection = true;\n    factory.setPersistent(true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"575e66bd4b2349209027f6801184da7fc3cba13f","date":1587609169,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/MetricsHistoryHandler#checkSystemCollection().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/MetricsHistoryHandler#checkSystemCollection().mjava","sourceNew":"  // check that .system exists\n  public void checkSystemCollection() {\n    if (cloudManager != null) {\n      try {\n        if (cloudManager.isClosed() || Thread.interrupted()) {\n          factory.setPersistent(false);\n          return;\n        }\n        ClusterState clusterState = cloudManager.getClusterStateProvider().getClusterState();\n        DocCollection systemColl = clusterState.getCollectionOrNull(CollectionAdminParams.SYSTEM_COLL);\n        if (systemColl == null) {\n          if (logMissingCollection) {\n            log.info(\"No {} collection, keeping metrics history in memory.\", CollectionAdminParams.SYSTEM_COLL);\n            logMissingCollection = false;\n          }\n          factory.setPersistent(false);\n          return;\n        } else {\n          boolean ready = false;\n          for (Replica r : systemColl.getReplicas()) {\n            if (r.isActive(clusterState.getLiveNodes())) {\n              ready = true;\n              break;\n            }\n          }\n          if (!ready) {\n            log.debug(\"{} collection not ready yet, keeping metrics history in memory\", CollectionAdminParams.SYSTEM_COLL);\n            factory.setPersistent(false);\n            return;\n          }\n        }\n      } catch (Exception e) {\n        if (logMissingCollection) {\n          log.warn(\"Error getting cluster state, keeping metrics history in memory\", e);\n        }\n        logMissingCollection = false;\n        factory.setPersistent(false);\n        return;\n      }\n      logMissingCollection = true;\n      factory.setPersistent(true);\n    } else {\n      try {\n        solrClient.query(CollectionAdminParams.SYSTEM_COLL, new SolrQuery(CommonParams.Q, \"*:*\", CommonParams.ROWS, \"0\"));\n        factory.setPersistent(true);\n        logMissingCollection = true;\n      } catch (Exception e) {\n        if (logMissingCollection) {\n          log.info(\"No {} collection, keeping metrics history in memory.\", CollectionAdminParams.SYSTEM_COLL);\n        }\n        logMissingCollection = false;\n        factory.setPersistent(false);\n      }\n    }\n  }\n\n","sourceOld":"  // check that .system exists\n  public void checkSystemCollection() {\n    if (cloudManager != null) {\n      try {\n        if (cloudManager.isClosed() || Thread.interrupted()) {\n          factory.setPersistent(false);\n          return;\n        }\n        ClusterState clusterState = cloudManager.getClusterStateProvider().getClusterState();\n        DocCollection systemColl = clusterState.getCollectionOrNull(CollectionAdminParams.SYSTEM_COLL);\n        if (systemColl == null) {\n          if (logMissingCollection) {\n            log.info(\"No \" + CollectionAdminParams.SYSTEM_COLL + \" collection, keeping metrics history in memory.\");\n            logMissingCollection = false;\n          }\n          factory.setPersistent(false);\n          return;\n        } else {\n          boolean ready = false;\n          for (Replica r : systemColl.getReplicas()) {\n            if (r.isActive(clusterState.getLiveNodes())) {\n              ready = true;\n              break;\n            }\n          }\n          if (!ready) {\n            log.debug(CollectionAdminParams.SYSTEM_COLL + \"collection not ready yet, keeping metrics history in memory\");\n            factory.setPersistent(false);\n            return;\n          }\n        }\n      } catch (Exception e) {\n        if (logMissingCollection) {\n          log.warn(\"Error getting cluster state, keeping metrics history in memory\", e);\n        }\n        logMissingCollection = false;\n        factory.setPersistent(false);\n        return;\n      }\n      logMissingCollection = true;\n      factory.setPersistent(true);\n    } else {\n      try {\n        solrClient.query(CollectionAdminParams.SYSTEM_COLL, new SolrQuery(CommonParams.Q, \"*:*\", CommonParams.ROWS, \"0\"));\n        factory.setPersistent(true);\n        logMissingCollection = true;\n      } catch (Exception e) {\n        if (logMissingCollection) {\n          log.info(\"No \" + CollectionAdminParams.SYSTEM_COLL + \" collection, keeping metrics history in memory.\");\n        }\n        logMissingCollection = false;\n        factory.setPersistent(false);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"dcfa8a1a5da4cfdac38e256c38e4b631637aa157":["f8f0f2472d437d44ec2144932e1d13fb494e82a3"],"f8f0f2472d437d44ec2144932e1d13fb494e82a3":["4181b4cf0450ea3c6d1aff8dc3ad4ed9cd3eeb6a"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["4181b4cf0450ea3c6d1aff8dc3ad4ed9cd3eeb6a","dcfa8a1a5da4cfdac38e256c38e4b631637aa157"],"4181b4cf0450ea3c6d1aff8dc3ad4ed9cd3eeb6a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"575e66bd4b2349209027f6801184da7fc3cba13f":["dcfa8a1a5da4cfdac38e256c38e4b631637aa157"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["575e66bd4b2349209027f6801184da7fc3cba13f"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["4181b4cf0450ea3c6d1aff8dc3ad4ed9cd3eeb6a","dcfa8a1a5da4cfdac38e256c38e4b631637aa157"]},"commit2Childs":{"dcfa8a1a5da4cfdac38e256c38e4b631637aa157":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","575e66bd4b2349209027f6801184da7fc3cba13f","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"f8f0f2472d437d44ec2144932e1d13fb494e82a3":["dcfa8a1a5da4cfdac38e256c38e4b631637aa157"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"4181b4cf0450ea3c6d1aff8dc3ad4ed9cd3eeb6a":["f8f0f2472d437d44ec2144932e1d13fb494e82a3","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4181b4cf0450ea3c6d1aff8dc3ad4ed9cd3eeb6a"],"575e66bd4b2349209027f6801184da7fc3cba13f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}