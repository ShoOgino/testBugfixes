{"path":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimScenario.SetOpDelays#execute(SimScenario).mjava","commits":[{"id":"a7aeb53916301ea6a5fedff4fdc9617b257cbc7d","date":1571856490,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimScenario.SetOpDelays#execute(SimScenario).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public void execute(SimScenario scenario) throws Exception {\n      String[] collections = params.remove(\"collection\");\n      if (collections == null || collections.length == 0) {\n        throw new IOException(\"'collection' param is required but missing: \" + params);\n      }\n      Map<String, Long> delays = new HashMap<>();\n      params.forEach(e -> {\n        String key = e.getKey();\n        CollectionParams.CollectionAction a = CollectionParams.CollectionAction.get(key);\n        if (a == null) {\n          log.warn(\"Invalid collection action \" + key + \", skipping...\");\n          return;\n        }\n        String[] values = e.getValue();\n        if (values == null || values[0].isBlank()) {\n          delays.put(a.name(), null);\n        } else {\n          Long value = Long.parseLong(values[0]);\n          delays.put(a.name(), value);\n        }\n      });\n      for (String collection : collections) {\n        scenario.cluster.getSimClusterStateProvider().simSetOpDelays(collection, delays);\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e35f2dde06b35aa9904949a3a93fabd090371077","date":1587906921,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimScenario.SetOpDelays#execute(SimScenario).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimScenario.SetOpDelays#execute(SimScenario).mjava","sourceNew":"    @Override\n    public void execute(SimScenario scenario) throws Exception {\n      String[] collections = params.remove(\"collection\");\n      if (collections == null || collections.length == 0) {\n        throw new IOException(\"'collection' param is required but missing: \" + params);\n      }\n      Map<String, Long> delays = new HashMap<>();\n      params.forEach(e -> {\n        String key = e.getKey();\n        CollectionParams.CollectionAction a = CollectionParams.CollectionAction.get(key);\n        if (a == null) {\n          log.warn(\"Invalid collection action {}, skipping...\", key);\n          return;\n        }\n        String[] values = e.getValue();\n        if (values == null || values[0].isBlank()) {\n          delays.put(a.name(), null);\n        } else {\n          Long value = Long.parseLong(values[0]);\n          delays.put(a.name(), value);\n        }\n      });\n      for (String collection : collections) {\n        scenario.cluster.getSimClusterStateProvider().simSetOpDelays(collection, delays);\n      }\n    }\n\n","sourceOld":"    @Override\n    public void execute(SimScenario scenario) throws Exception {\n      String[] collections = params.remove(\"collection\");\n      if (collections == null || collections.length == 0) {\n        throw new IOException(\"'collection' param is required but missing: \" + params);\n      }\n      Map<String, Long> delays = new HashMap<>();\n      params.forEach(e -> {\n        String key = e.getKey();\n        CollectionParams.CollectionAction a = CollectionParams.CollectionAction.get(key);\n        if (a == null) {\n          log.warn(\"Invalid collection action \" + key + \", skipping...\");\n          return;\n        }\n        String[] values = e.getValue();\n        if (values == null || values[0].isBlank()) {\n          delays.put(a.name(), null);\n        } else {\n          Long value = Long.parseLong(values[0]);\n          delays.put(a.name(), value);\n        }\n      });\n      for (String collection : collections) {\n        scenario.cluster.getSimClusterStateProvider().simSetOpDelays(collection, delays);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimScenario.SetOpDelays#execute(SimScenario).mjava","sourceNew":null,"sourceOld":"    @Override\n    public void execute(SimScenario scenario) throws Exception {\n      String[] collections = params.remove(\"collection\");\n      if (collections == null || collections.length == 0) {\n        throw new IOException(\"'collection' param is required but missing: \" + params);\n      }\n      Map<String, Long> delays = new HashMap<>();\n      params.forEach(e -> {\n        String key = e.getKey();\n        CollectionParams.CollectionAction a = CollectionParams.CollectionAction.get(key);\n        if (a == null) {\n          log.warn(\"Invalid collection action {}, skipping...\", key);\n          return;\n        }\n        String[] values = e.getValue();\n        if (values == null || values[0].isBlank()) {\n          delays.put(a.name(), null);\n        } else {\n          Long value = Long.parseLong(values[0]);\n          delays.put(a.name(), value);\n        }\n      });\n      for (String collection : collections) {\n        scenario.cluster.getSimClusterStateProvider().simSetOpDelays(collection, delays);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f504512a03d978990cbff30db0522b354e846db":["e35f2dde06b35aa9904949a3a93fabd090371077"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e35f2dde06b35aa9904949a3a93fabd090371077":["a7aeb53916301ea6a5fedff4fdc9617b257cbc7d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"],"a7aeb53916301ea6a5fedff4fdc9617b257cbc7d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a7aeb53916301ea6a5fedff4fdc9617b257cbc7d"],"e35f2dde06b35aa9904949a3a93fabd090371077":["3f504512a03d978990cbff30db0522b354e846db"],"a7aeb53916301ea6a5fedff4fdc9617b257cbc7d":["e35f2dde06b35aa9904949a3a93fabd090371077"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}