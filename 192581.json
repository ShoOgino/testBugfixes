{"path":"solr/core/src/test/org/apache/solr/cloud/ForceLeaderTest#testZombieLeader().mjava","commits":[{"id":"23899910c6ea46c4aff96056cfae91d3e31b262a","date":1522788117,"type":0,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ForceLeaderTest#testZombieLeader().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Tests that FORCELEADER can get an active leader even in the case there are a replica won the election but not present in clusterstate\n   */\n  @Test\n  @Slow\n  public void testZombieLeader() throws Exception {\n    String testCollectionName = \"forceleader_zombie_leader_collection\";\n    createCollection(testCollectionName, \"conf1\", 1, 3, 1);\n    cloudClient.setDefaultCollection(testCollectionName);\n    try {\n      List<Replica> notLeaders = ensureAllReplicasAreActive(testCollectionName, SHARD1, 1, 3, maxWaitSecsToSeeAllActive);\n      assertEquals(\"Expected 2 replicas for collection \" + testCollectionName\n          + \" but found \" + notLeaders.size() + \"; clusterState: \"\n          + printClusterStateInfo(testCollectionName), 2, notLeaders.size());\n      List<JettySolrRunner> notLeaderJetties = notLeaders.stream().map(rep -> getJettyOnPort(getReplicaPort(rep)))\n          .collect(Collectors.toList());\n\n      Replica leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, SHARD1);\n      JettySolrRunner leaderJetty = getJettyOnPort(getReplicaPort(leader));\n\n      // remove leader from clusterstate\n      ZkNodeProps m = new ZkNodeProps(\n          Overseer.QUEUE_OPERATION, OverseerAction.DELETECORE.toLower(),\n          ZkStateReader.CORE_NAME_PROP, leader.getCoreName(),\n          ZkStateReader.NODE_NAME_PROP, leader.getNodeName(),\n          ZkStateReader.COLLECTION_PROP, testCollectionName,\n          ZkStateReader.CORE_NODE_NAME_PROP, leader.getName(),\n          ZkStateReader.BASE_URL_PROP, leader.getBaseUrl());\n      Overseer.getStateUpdateQueue(cloudClient.getZkStateReader().getZkClient()).offer(Utils.toJSON(m));\n\n      boolean restartOtherReplicas = random().nextBoolean();\n      log.info(\"Starting test with restartOtherReplicas:{}\", restartOtherReplicas);\n      if (restartOtherReplicas) {\n        for (JettySolrRunner notLeaderJetty : notLeaderJetties) {\n          notLeaderJetty.stop();\n        }\n      }\n      cloudClient.waitForState(testCollectionName, 30, TimeUnit.SECONDS,\n          (liveNodes, collectionState) -> collectionState.getReplicas().size() == 2);\n\n      if (restartOtherReplicas) {\n        for (JettySolrRunner notLeaderJetty : notLeaderJetties) {\n          notLeaderJetty.start();\n        }\n      }\n\n      log.info(\"Before forcing leader: \" + cloudClient.getZkStateReader().getClusterState()\n          .getCollection(testCollectionName).getSlice(SHARD1));\n      doForceLeader(cloudClient, testCollectionName, SHARD1);\n\n      // By now we have an active leader. Wait for recoveries to begin\n      waitForRecoveriesToFinish(testCollectionName, cloudClient.getZkStateReader(), true);\n      ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n      log.info(\"After forcing leader: \" + clusterState.getCollection(testCollectionName).getSlice(SHARD1));\n\n      assertNull(\"Expected zombie leader get deleted\", leaderJetty.getCoreContainer().getCore(leader.getCoreName()));\n      Replica newLeader = clusterState.getCollectionOrNull(testCollectionName).getSlice(SHARD1).getLeader();\n      assertNotNull(newLeader);\n      assertEquals(State.ACTIVE, newLeader.getState());\n\n      int numActiveReplicas = getNumberOfActiveReplicas(clusterState, testCollectionName, SHARD1);\n      assertEquals(2, numActiveReplicas);\n\n      // Assert that indexing works again\n      sendDoc(1);\n      cloudClient.commit();\n\n      assertDocsExistInAllReplicas(notLeaders, testCollectionName, 1, 1);\n    } finally {\n      log.info(\"Cleaning up after the test.\");\n      // try to clean up\n      attemptCollectionDelete(cloudClient, testCollectionName);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28ba172425e443e0f08a49de6d73586c418d7251","date":1523970991,"type":4,"author":"Cao Manh Dat","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/ForceLeaderTest#testZombieLeader().mjava","sourceNew":null,"sourceOld":"  /**\n   * Tests that FORCELEADER can get an active leader even in the case there are a replica won the election but not present in clusterstate\n   */\n  @Test\n  @Slow\n  public void testZombieLeader() throws Exception {\n    String testCollectionName = \"forceleader_zombie_leader_collection\";\n    createCollection(testCollectionName, \"conf1\", 1, 3, 1);\n    cloudClient.setDefaultCollection(testCollectionName);\n    try {\n      List<Replica> notLeaders = ensureAllReplicasAreActive(testCollectionName, SHARD1, 1, 3, maxWaitSecsToSeeAllActive);\n      assertEquals(\"Expected 2 replicas for collection \" + testCollectionName\n          + \" but found \" + notLeaders.size() + \"; clusterState: \"\n          + printClusterStateInfo(testCollectionName), 2, notLeaders.size());\n      List<JettySolrRunner> notLeaderJetties = notLeaders.stream().map(rep -> getJettyOnPort(getReplicaPort(rep)))\n          .collect(Collectors.toList());\n\n      Replica leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, SHARD1);\n      JettySolrRunner leaderJetty = getJettyOnPort(getReplicaPort(leader));\n\n      // remove leader from clusterstate\n      ZkNodeProps m = new ZkNodeProps(\n          Overseer.QUEUE_OPERATION, OverseerAction.DELETECORE.toLower(),\n          ZkStateReader.CORE_NAME_PROP, leader.getCoreName(),\n          ZkStateReader.NODE_NAME_PROP, leader.getNodeName(),\n          ZkStateReader.COLLECTION_PROP, testCollectionName,\n          ZkStateReader.CORE_NODE_NAME_PROP, leader.getName(),\n          ZkStateReader.BASE_URL_PROP, leader.getBaseUrl());\n      Overseer.getStateUpdateQueue(cloudClient.getZkStateReader().getZkClient()).offer(Utils.toJSON(m));\n\n      boolean restartOtherReplicas = random().nextBoolean();\n      log.info(\"Starting test with restartOtherReplicas:{}\", restartOtherReplicas);\n      if (restartOtherReplicas) {\n        for (JettySolrRunner notLeaderJetty : notLeaderJetties) {\n          notLeaderJetty.stop();\n        }\n      }\n      cloudClient.waitForState(testCollectionName, 30, TimeUnit.SECONDS,\n          (liveNodes, collectionState) -> collectionState.getReplicas().size() == 2);\n\n      if (restartOtherReplicas) {\n        for (JettySolrRunner notLeaderJetty : notLeaderJetties) {\n          notLeaderJetty.start();\n        }\n      }\n\n      log.info(\"Before forcing leader: \" + cloudClient.getZkStateReader().getClusterState()\n          .getCollection(testCollectionName).getSlice(SHARD1));\n      doForceLeader(cloudClient, testCollectionName, SHARD1);\n\n      // By now we have an active leader. Wait for recoveries to begin\n      waitForRecoveriesToFinish(testCollectionName, cloudClient.getZkStateReader(), true);\n      ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n      log.info(\"After forcing leader: \" + clusterState.getCollection(testCollectionName).getSlice(SHARD1));\n\n      assertNull(\"Expected zombie leader get deleted\", leaderJetty.getCoreContainer().getCore(leader.getCoreName()));\n      Replica newLeader = clusterState.getCollectionOrNull(testCollectionName).getSlice(SHARD1).getLeader();\n      assertNotNull(newLeader);\n      assertEquals(State.ACTIVE, newLeader.getState());\n\n      int numActiveReplicas = getNumberOfActiveReplicas(clusterState, testCollectionName, SHARD1);\n      assertEquals(2, numActiveReplicas);\n\n      // Assert that indexing works again\n      sendDoc(1);\n      cloudClient.commit();\n\n      assertDocsExistInAllReplicas(notLeaders, testCollectionName, 1, 1);\n    } finally {\n      log.info(\"Cleaning up after the test.\");\n      // try to clean up\n      attemptCollectionDelete(cloudClient, testCollectionName);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"23899910c6ea46c4aff96056cfae91d3e31b262a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"28ba172425e443e0f08a49de6d73586c418d7251":["23899910c6ea46c4aff96056cfae91d3e31b262a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28ba172425e443e0f08a49de6d73586c418d7251"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["23899910c6ea46c4aff96056cfae91d3e31b262a"],"23899910c6ea46c4aff96056cfae91d3e31b262a":["28ba172425e443e0f08a49de6d73586c418d7251"],"28ba172425e443e0f08a49de6d73586c418d7251":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}