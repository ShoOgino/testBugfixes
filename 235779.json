{"path":"lucene/core/src/test/org/apache/lucene/search/TestSort2#testLUCENE2142().mjava","commits":[{"id":"e4d968497a1e5d9b3a36621b61b75486ec05ae49","date":1360852942,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSort2#testLUCENE2142().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSort#testLUCENE2142().mjava","sourceNew":"  public void testLUCENE2142() throws IOException {\n    Directory indexStore = newDirectory();\n    IndexWriter writer = new IndexWriter(indexStore, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    for(int i=0; i<5; i++) {\n        Document doc = new Document();\n        doc.add(new StringField(\"string\", \"a\"+i, Field.Store.NO));\n        doc.add(new StringField(\"string\", \"b\"+i, Field.Store.NO));\n        writer.addDocument(doc);\n    }\n    writer.forceMerge(1); // enforce one segment to have a higher unique term count in all cases\n    writer.close();\n    Sort sort = new Sort(\n        new SortField(\"string\", SortField.Type.STRING),\n        SortField.FIELD_DOC);\n    // this should not throw AIOOBE or RuntimeEx\n    IndexReader reader = DirectoryReader.open(indexStore);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    searcher.search(new MatchAllDocsQuery(), null, 500, sort);\n    reader.close();\n    indexStore.close();\n  }\n\n","sourceOld":"  public void testLUCENE2142() throws IOException {\n    Directory indexStore = newDirectory();\n    IndexWriter writer = new IndexWriter(indexStore, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    for(int i=0; i<5; i++) {\n        Document doc = new Document();\n        doc.add(new StringField(\"string\", \"a\"+i, Field.Store.NO));\n        doc.add(new StringField(\"string\", \"b\"+i, Field.Store.NO));\n        writer.addDocument(doc);\n    }\n    writer.forceMerge(1); // enforce one segment to have a higher unique term count in all cases\n    writer.close();\n    sort.setSort(\n        new SortField(\"string\", SortField.Type.STRING),\n        SortField.FIELD_DOC);\n    // this should not throw AIOOBE or RuntimeEx\n    IndexReader reader = DirectoryReader.open(indexStore);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    searcher.search(new MatchAllDocsQuery(), null, 500, sort);\n    reader.close();\n    indexStore.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3990ef6ed195a54c0e22c12fcf0103c2a729596e","date":1360961934,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSort2#testMultiValuedField().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSort2#testLUCENE2142().mjava","sourceNew":"  /** test that we don't throw exception on multi-valued field (LUCENE-2142) */\n  public void testMultiValuedField() throws IOException {\n    Directory indexStore = newDirectory();\n    IndexWriter writer = new IndexWriter(indexStore, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    for(int i=0; i<5; i++) {\n        Document doc = new Document();\n        doc.add(new StringField(\"string\", \"a\"+i, Field.Store.NO));\n        doc.add(new StringField(\"string\", \"b\"+i, Field.Store.NO));\n        writer.addDocument(doc);\n    }\n    writer.forceMerge(1); // enforce one segment to have a higher unique term count in all cases\n    writer.close();\n    Sort sort = new Sort(\n        new SortField(\"string\", SortField.Type.STRING),\n        SortField.FIELD_DOC);\n    // this should not throw AIOOBE or RuntimeEx\n    IndexReader reader = DirectoryReader.open(indexStore);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    searcher.search(new MatchAllDocsQuery(), null, 500, sort);\n    reader.close();\n    indexStore.close();\n  }\n\n","sourceOld":"  public void testLUCENE2142() throws IOException {\n    Directory indexStore = newDirectory();\n    IndexWriter writer = new IndexWriter(indexStore, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    for(int i=0; i<5; i++) {\n        Document doc = new Document();\n        doc.add(new StringField(\"string\", \"a\"+i, Field.Store.NO));\n        doc.add(new StringField(\"string\", \"b\"+i, Field.Store.NO));\n        writer.addDocument(doc);\n    }\n    writer.forceMerge(1); // enforce one segment to have a higher unique term count in all cases\n    writer.close();\n    Sort sort = new Sort(\n        new SortField(\"string\", SortField.Type.STRING),\n        SortField.FIELD_DOC);\n    // this should not throw AIOOBE or RuntimeEx\n    IndexReader reader = DirectoryReader.open(indexStore);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    searcher.search(new MatchAllDocsQuery(), null, 500, sort);\n    reader.close();\n    indexStore.close();\n  }\n\n","bugFix":null,"bugIntro":["b0b3768e97375c7a745c68f0b54710e8bedccc11","b0b3768e97375c7a745c68f0b54710e8bedccc11","b0b3768e97375c7a745c68f0b54710e8bedccc11","b0b3768e97375c7a745c68f0b54710e8bedccc11","b0b3768e97375c7a745c68f0b54710e8bedccc11","b0b3768e97375c7a745c68f0b54710e8bedccc11"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3b41f996b22bd5518650f897d050088ff808ec03","date":1360969107,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSort2#testLUCENE2142().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSort#testLUCENE2142().mjava","sourceNew":"  public void testLUCENE2142() throws IOException {\n    Directory indexStore = newDirectory();\n    IndexWriter writer = new IndexWriter(indexStore, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    for(int i=0; i<5; i++) {\n        Document doc = new Document();\n        doc.add(new StringField(\"string\", \"a\"+i, Field.Store.NO));\n        doc.add(new StringField(\"string\", \"b\"+i, Field.Store.NO));\n        writer.addDocument(doc);\n    }\n    writer.forceMerge(1); // enforce one segment to have a higher unique term count in all cases\n    writer.close();\n    Sort sort = new Sort(\n        new SortField(\"string\", SortField.Type.STRING),\n        SortField.FIELD_DOC);\n    // this should not throw AIOOBE or RuntimeEx\n    IndexReader reader = DirectoryReader.open(indexStore);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    searcher.search(new MatchAllDocsQuery(), null, 500, sort);\n    reader.close();\n    indexStore.close();\n  }\n\n","sourceOld":"  public void testLUCENE2142() throws IOException {\n    Directory indexStore = newDirectory();\n    IndexWriter writer = new IndexWriter(indexStore, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    for(int i=0; i<5; i++) {\n        Document doc = new Document();\n        doc.add(new StringField(\"string\", \"a\"+i, Field.Store.NO));\n        doc.add(new StringField(\"string\", \"b\"+i, Field.Store.NO));\n        writer.addDocument(doc);\n    }\n    writer.forceMerge(1); // enforce one segment to have a higher unique term count in all cases\n    writer.close();\n    sort.setSort(\n        new SortField(\"string\", SortField.Type.STRING),\n        SortField.FIELD_DOC);\n    // this should not throw AIOOBE or RuntimeEx\n    IndexReader reader = DirectoryReader.open(indexStore);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    searcher.search(new MatchAllDocsQuery(), null, 500, sort);\n    reader.close();\n    indexStore.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"95303ff3749680c743b9425f9cf99e6e4065e8a8","date":1361061922,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSort#testMultiValuedField().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSort2#testLUCENE2142().mjava","sourceNew":"  /** test that we don't throw exception on multi-valued field (LUCENE-2142) */\n  public void testMultiValuedField() throws IOException {\n    Directory indexStore = newDirectory();\n    IndexWriter writer = new IndexWriter(indexStore, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    for(int i=0; i<5; i++) {\n        Document doc = new Document();\n        doc.add(new StringField(\"string\", \"a\"+i, Field.Store.NO));\n        doc.add(new StringField(\"string\", \"b\"+i, Field.Store.NO));\n        writer.addDocument(doc);\n    }\n    writer.forceMerge(1); // enforce one segment to have a higher unique term count in all cases\n    writer.close();\n    Sort sort = new Sort(\n        new SortField(\"string\", SortField.Type.STRING),\n        SortField.FIELD_DOC);\n    // this should not throw AIOOBE or RuntimeEx\n    IndexReader reader = DirectoryReader.open(indexStore);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    searcher.search(new MatchAllDocsQuery(), null, 500, sort);\n    reader.close();\n    indexStore.close();\n  }\n\n","sourceOld":"  public void testLUCENE2142() throws IOException {\n    Directory indexStore = newDirectory();\n    IndexWriter writer = new IndexWriter(indexStore, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    for(int i=0; i<5; i++) {\n        Document doc = new Document();\n        doc.add(new StringField(\"string\", \"a\"+i, Field.Store.NO));\n        doc.add(new StringField(\"string\", \"b\"+i, Field.Store.NO));\n        writer.addDocument(doc);\n    }\n    writer.forceMerge(1); // enforce one segment to have a higher unique term count in all cases\n    writer.close();\n    Sort sort = new Sort(\n        new SortField(\"string\", SortField.Type.STRING),\n        SortField.FIELD_DOC);\n    // this should not throw AIOOBE or RuntimeEx\n    IndexReader reader = DirectoryReader.open(indexStore);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    searcher.search(new MatchAllDocsQuery(), null, 500, sort);\n    reader.close();\n    indexStore.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"95303ff3749680c743b9425f9cf99e6e4065e8a8":["3b41f996b22bd5518650f897d050088ff808ec03","3990ef6ed195a54c0e22c12fcf0103c2a729596e"],"3b41f996b22bd5518650f897d050088ff808ec03":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e4d968497a1e5d9b3a36621b61b75486ec05ae49"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3990ef6ed195a54c0e22c12fcf0103c2a729596e":["e4d968497a1e5d9b3a36621b61b75486ec05ae49"],"e4d968497a1e5d9b3a36621b61b75486ec05ae49":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3990ef6ed195a54c0e22c12fcf0103c2a729596e"]},"commit2Childs":{"95303ff3749680c743b9425f9cf99e6e4065e8a8":[],"3b41f996b22bd5518650f897d050088ff808ec03":["95303ff3749680c743b9425f9cf99e6e4065e8a8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3b41f996b22bd5518650f897d050088ff808ec03","e4d968497a1e5d9b3a36621b61b75486ec05ae49"],"3990ef6ed195a54c0e22c12fcf0103c2a729596e":["95303ff3749680c743b9425f9cf99e6e4065e8a8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e4d968497a1e5d9b3a36621b61b75486ec05ae49":["3b41f996b22bd5518650f897d050088ff808ec03","3990ef6ed195a54c0e22c12fcf0103c2a729596e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["95303ff3749680c743b9425f9cf99e6e4065e8a8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}