{"path":"lucene/src/java/org/apache/lucene/util/automaton/BasicOperations#concatenate(Automaton,Automaton).mjava","commits":[{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/BasicOperations#concatenate(Automaton,Automaton).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns an automaton that accepts the concatenation of the languages of the\n   * given automata.\n   * <p>\n   * Complexity: linear in number of states.\n   */\n  static public Automaton concatenate(Automaton a1, Automaton a2) {\n    if (a1.isSingleton() && a2.isSingleton()) return BasicAutomata\n        .makeString(a1.singleton + a2.singleton);\n    // adding epsilon transitions with the NFA concatenation algorithm\n    // in this case always produces a resulting DFA, preventing expensive\n    // redundant determinize() calls for this common case.\n    boolean deterministic = a1.isSingleton() && a2.isDeterministic();\n    if (a1 == a2) {\n      a1 = a1.cloneExpanded();\n      a2 = a2.cloneExpanded();\n    } else {\n      a1 = a1.cloneExpandedIfRequired();\n      a2 = a2.cloneExpandedIfRequired();\n    }\n    for (State s : a1.getAcceptStates()) {\n      s.accept = false;\n      s.addEpsilon(a2.initial);\n    }\n    a1.deterministic = deterministic;\n    a1.clearHashCode();\n    a1.checkMinimizeAlways();\n    return a1;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5acb0ee59cc50caf85402e92d148fdb2af61bc19","date":1272929037,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/BasicOperations#concatenate(Automaton,Automaton).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/BasicOperations#concatenate(Automaton,Automaton).mjava","sourceNew":"  /**\n   * Returns an automaton that accepts the concatenation of the languages of the\n   * given automata.\n   * <p>\n   * Complexity: linear in number of states.\n   */\n  static public Automaton concatenate(Automaton a1, Automaton a2) {\n    if (a1.isSingleton() && a2.isSingleton()) return BasicAutomata\n        .makeString(a1.singleton + a2.singleton);\n    // adding epsilon transitions with the NFA concatenation algorithm\n    // in this case always produces a resulting DFA, preventing expensive\n    // redundant determinize() calls for this common case.\n    boolean deterministic = a1.isSingleton() && a2.isDeterministic();\n    if (a1 == a2) {\n      a1 = a1.cloneExpanded();\n      a2 = a2.cloneExpanded();\n    } else {\n      a1 = a1.cloneExpandedIfRequired();\n      a2 = a2.cloneExpandedIfRequired();\n    }\n    for (State s : a1.getAcceptStates()) {\n      s.accept = false;\n      s.addEpsilon(a2.initial);\n    }\n    a1.deterministic = deterministic;\n    //a1.clearHashCode();\n    a1.clearNumberedStates();\n    a1.checkMinimizeAlways();\n    return a1;\n  }\n\n","sourceOld":"  /**\n   * Returns an automaton that accepts the concatenation of the languages of the\n   * given automata.\n   * <p>\n   * Complexity: linear in number of states.\n   */\n  static public Automaton concatenate(Automaton a1, Automaton a2) {\n    if (a1.isSingleton() && a2.isSingleton()) return BasicAutomata\n        .makeString(a1.singleton + a2.singleton);\n    // adding epsilon transitions with the NFA concatenation algorithm\n    // in this case always produces a resulting DFA, preventing expensive\n    // redundant determinize() calls for this common case.\n    boolean deterministic = a1.isSingleton() && a2.isDeterministic();\n    if (a1 == a2) {\n      a1 = a1.cloneExpanded();\n      a2 = a2.cloneExpanded();\n    } else {\n      a1 = a1.cloneExpandedIfRequired();\n      a2 = a2.cloneExpandedIfRequired();\n    }\n    for (State s : a1.getAcceptStates()) {\n      s.accept = false;\n      s.addEpsilon(a2.initial);\n    }\n    a1.deterministic = deterministic;\n    a1.clearHashCode();\n    a1.checkMinimizeAlways();\n    return a1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d014891c148c6c65e1277971434bc45a62ced7aa","date":1287688005,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/BasicOperations#concatenate(Automaton,Automaton).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/BasicOperations#concatenate(Automaton,Automaton).mjava","sourceNew":"  /**\n   * Returns an automaton that accepts the concatenation of the languages of the\n   * given automata.\n   * <p>\n   * Complexity: linear in number of states.\n   */\n  static public Automaton concatenate(Automaton a1, Automaton a2) {\n    if (a1.isSingleton() && a2.isSingleton()) return BasicAutomata\n        .makeString(a1.singleton + a2.singleton);\n    if (isEmpty(a1) || isEmpty(a2))\n      return BasicAutomata.makeEmpty();\n    // adding epsilon transitions with the NFA concatenation algorithm\n    // in this case always produces a resulting DFA, preventing expensive\n    // redundant determinize() calls for this common case.\n    boolean deterministic = a1.isSingleton() && a2.isDeterministic();\n    if (a1 == a2) {\n      a1 = a1.cloneExpanded();\n      a2 = a2.cloneExpanded();\n    } else {\n      a1 = a1.cloneExpandedIfRequired();\n      a2 = a2.cloneExpandedIfRequired();\n    }\n    for (State s : a1.getAcceptStates()) {\n      s.accept = false;\n      s.addEpsilon(a2.initial);\n    }\n    a1.deterministic = deterministic;\n    //a1.clearHashCode();\n    a1.clearNumberedStates();\n    a1.checkMinimizeAlways();\n    return a1;\n  }\n\n","sourceOld":"  /**\n   * Returns an automaton that accepts the concatenation of the languages of the\n   * given automata.\n   * <p>\n   * Complexity: linear in number of states.\n   */\n  static public Automaton concatenate(Automaton a1, Automaton a2) {\n    if (a1.isSingleton() && a2.isSingleton()) return BasicAutomata\n        .makeString(a1.singleton + a2.singleton);\n    // adding epsilon transitions with the NFA concatenation algorithm\n    // in this case always produces a resulting DFA, preventing expensive\n    // redundant determinize() calls for this common case.\n    boolean deterministic = a1.isSingleton() && a2.isDeterministic();\n    if (a1 == a2) {\n      a1 = a1.cloneExpanded();\n      a2 = a2.cloneExpanded();\n    } else {\n      a1 = a1.cloneExpandedIfRequired();\n      a2 = a2.cloneExpandedIfRequired();\n    }\n    for (State s : a1.getAcceptStates()) {\n      s.accept = false;\n      s.addEpsilon(a2.initial);\n    }\n    a1.deterministic = deterministic;\n    //a1.clearHashCode();\n    a1.clearNumberedStates();\n    a1.checkMinimizeAlways();\n    return a1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b12d3e81e0f95a4527b5703953c503f71120ffcc","date":1288080933,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/BasicOperations#concatenate(Automaton,Automaton).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/BasicOperations#concatenate(Automaton,Automaton).mjava","sourceNew":"  /**\n   * Returns an automaton that accepts the concatenation of the languages of the\n   * given automata.\n   * <p>\n   * Complexity: linear in number of states.\n   */\n  static public Automaton concatenate(Automaton a1, Automaton a2) {\n    if (a1.isSingleton() && a2.isSingleton()) return BasicAutomata\n        .makeString(a1.singleton + a2.singleton);\n    if (isEmpty(a1) || isEmpty(a2))\n      return BasicAutomata.makeEmpty();\n    // adding epsilon transitions with the NFA concatenation algorithm\n    // in this case always produces a resulting DFA, preventing expensive\n    // redundant determinize() calls for this common case.\n    boolean deterministic = a1.isSingleton() && a2.isDeterministic();\n    if (a1 == a2) {\n      a1 = a1.cloneExpanded();\n      a2 = a2.cloneExpanded();\n    } else {\n      a1 = a1.cloneExpandedIfRequired();\n      a2 = a2.cloneExpandedIfRequired();\n    }\n    for (State s : a1.getAcceptStates()) {\n      s.accept = false;\n      s.addEpsilon(a2.initial);\n    }\n    a1.deterministic = deterministic;\n    //a1.clearHashCode();\n    a1.clearNumberedStates();\n    a1.checkMinimizeAlways();\n    return a1;\n  }\n\n","sourceOld":"  /**\n   * Returns an automaton that accepts the concatenation of the languages of the\n   * given automata.\n   * <p>\n   * Complexity: linear in number of states.\n   */\n  static public Automaton concatenate(Automaton a1, Automaton a2) {\n    if (a1.isSingleton() && a2.isSingleton()) return BasicAutomata\n        .makeString(a1.singleton + a2.singleton);\n    // adding epsilon transitions with the NFA concatenation algorithm\n    // in this case always produces a resulting DFA, preventing expensive\n    // redundant determinize() calls for this common case.\n    boolean deterministic = a1.isSingleton() && a2.isDeterministic();\n    if (a1 == a2) {\n      a1 = a1.cloneExpanded();\n      a2 = a2.cloneExpanded();\n    } else {\n      a1 = a1.cloneExpandedIfRequired();\n      a2 = a2.cloneExpandedIfRequired();\n    }\n    for (State s : a1.getAcceptStates()) {\n      s.accept = false;\n      s.addEpsilon(a2.initial);\n    }\n    a1.deterministic = deterministic;\n    //a1.clearHashCode();\n    a1.clearNumberedStates();\n    a1.checkMinimizeAlways();\n    return a1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/BasicOperations#concatenate(Automaton,Automaton).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/BasicOperations#concatenate(Automaton,Automaton).mjava","sourceNew":"  /**\n   * Returns an automaton that accepts the concatenation of the languages of the\n   * given automata.\n   * <p>\n   * Complexity: linear in number of states.\n   */\n  static public Automaton concatenate(Automaton a1, Automaton a2) {\n    if (a1.isSingleton() && a2.isSingleton()) return BasicAutomata\n        .makeString(a1.singleton + a2.singleton);\n    if (isEmpty(a1) || isEmpty(a2))\n      return BasicAutomata.makeEmpty();\n    // adding epsilon transitions with the NFA concatenation algorithm\n    // in this case always produces a resulting DFA, preventing expensive\n    // redundant determinize() calls for this common case.\n    boolean deterministic = a1.isSingleton() && a2.isDeterministic();\n    if (a1 == a2) {\n      a1 = a1.cloneExpanded();\n      a2 = a2.cloneExpanded();\n    } else {\n      a1 = a1.cloneExpandedIfRequired();\n      a2 = a2.cloneExpandedIfRequired();\n    }\n    for (State s : a1.getAcceptStates()) {\n      s.accept = false;\n      s.addEpsilon(a2.initial);\n    }\n    a1.deterministic = deterministic;\n    //a1.clearHashCode();\n    a1.clearNumberedStates();\n    a1.checkMinimizeAlways();\n    return a1;\n  }\n\n","sourceOld":"  /**\n   * Returns an automaton that accepts the concatenation of the languages of the\n   * given automata.\n   * <p>\n   * Complexity: linear in number of states.\n   */\n  static public Automaton concatenate(Automaton a1, Automaton a2) {\n    if (a1.isSingleton() && a2.isSingleton()) return BasicAutomata\n        .makeString(a1.singleton + a2.singleton);\n    // adding epsilon transitions with the NFA concatenation algorithm\n    // in this case always produces a resulting DFA, preventing expensive\n    // redundant determinize() calls for this common case.\n    boolean deterministic = a1.isSingleton() && a2.isDeterministic();\n    if (a1 == a2) {\n      a1 = a1.cloneExpanded();\n      a2 = a2.cloneExpanded();\n    } else {\n      a1 = a1.cloneExpandedIfRequired();\n      a2 = a2.cloneExpandedIfRequired();\n    }\n    for (State s : a1.getAcceptStates()) {\n      s.accept = false;\n      s.addEpsilon(a2.initial);\n    }\n    a1.deterministic = deterministic;\n    //a1.clearHashCode();\n    a1.clearNumberedStates();\n    a1.checkMinimizeAlways();\n    return a1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/BasicOperations#concatenate(Automaton,Automaton).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/BasicOperations#concatenate(Automaton,Automaton).mjava","sourceNew":"  /**\n   * Returns an automaton that accepts the concatenation of the languages of the\n   * given automata.\n   * <p>\n   * Complexity: linear in number of states.\n   */\n  static public Automaton concatenate(Automaton a1, Automaton a2) {\n    if (a1.isSingleton() && a2.isSingleton()) return BasicAutomata\n        .makeString(a1.singleton + a2.singleton);\n    if (isEmpty(a1) || isEmpty(a2))\n      return BasicAutomata.makeEmpty();\n    // adding epsilon transitions with the NFA concatenation algorithm\n    // in this case always produces a resulting DFA, preventing expensive\n    // redundant determinize() calls for this common case.\n    boolean deterministic = a1.isSingleton() && a2.isDeterministic();\n    if (a1 == a2) {\n      a1 = a1.cloneExpanded();\n      a2 = a2.cloneExpanded();\n    } else {\n      a1 = a1.cloneExpandedIfRequired();\n      a2 = a2.cloneExpandedIfRequired();\n    }\n    for (State s : a1.getAcceptStates()) {\n      s.accept = false;\n      s.addEpsilon(a2.initial);\n    }\n    a1.deterministic = deterministic;\n    //a1.clearHashCode();\n    a1.clearNumberedStates();\n    a1.checkMinimizeAlways();\n    return a1;\n  }\n\n","sourceOld":"  /**\n   * Returns an automaton that accepts the concatenation of the languages of the\n   * given automata.\n   * <p>\n   * Complexity: linear in number of states.\n   */\n  static public Automaton concatenate(Automaton a1, Automaton a2) {\n    if (a1.isSingleton() && a2.isSingleton()) return BasicAutomata\n        .makeString(a1.singleton + a2.singleton);\n    if (isEmpty(a1) || isEmpty(a2))\n      return BasicAutomata.makeEmpty();\n    // adding epsilon transitions with the NFA concatenation algorithm\n    // in this case always produces a resulting DFA, preventing expensive\n    // redundant determinize() calls for this common case.\n    boolean deterministic = a1.isSingleton() && a2.isDeterministic();\n    if (a1 == a2) {\n      a1 = a1.cloneExpanded();\n      a2 = a2.cloneExpanded();\n    } else {\n      a1 = a1.cloneExpandedIfRequired();\n      a2 = a2.cloneExpandedIfRequired();\n    }\n    for (State s : a1.getAcceptStates()) {\n      s.accept = false;\n      s.addEpsilon(a2.initial);\n    }\n    a1.deterministic = deterministic;\n    //a1.clearHashCode();\n    a1.clearNumberedStates();\n    a1.checkMinimizeAlways();\n    return a1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["d014891c148c6c65e1277971434bc45a62ced7aa"],"5acb0ee59cc50caf85402e92d148fdb2af61bc19":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b12d3e81e0f95a4527b5703953c503f71120ffcc":["5acb0ee59cc50caf85402e92d148fdb2af61bc19","d014891c148c6c65e1277971434bc45a62ced7aa"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["5acb0ee59cc50caf85402e92d148fdb2af61bc19","d014891c148c6c65e1277971434bc45a62ced7aa"],"d014891c148c6c65e1277971434bc45a62ced7aa":["5acb0ee59cc50caf85402e92d148fdb2af61bc19"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5acb0ee59cc50caf85402e92d148fdb2af61bc19":["b12d3e81e0f95a4527b5703953c503f71120ffcc","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","d014891c148c6c65e1277971434bc45a62ced7aa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["5acb0ee59cc50caf85402e92d148fdb2af61bc19"],"b12d3e81e0f95a4527b5703953c503f71120ffcc":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"d014891c148c6c65e1277971434bc45a62ced7aa":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","b12d3e81e0f95a4527b5703953c503f71120ffcc","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b12d3e81e0f95a4527b5703953c503f71120ffcc","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}