{"path":"solr/core/src/java/org/apache/solr/cloud/ZkController#register(String,CloudDescriptor,boolean).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#register(String,CloudDescriptor,boolean).mjava","pathOld":"solr/src/java/org/apache/solr/cloud/ZkController#register(String,CloudDescriptor,boolean).mjava","sourceNew":"  /**\n   * Register shard with ZooKeeper.\n   * \n   * @param coreName\n   * @param cloudDesc\n   * @param forcePropsUpdate update solr.xml core props even if the shard is already registered\n   * @throws IOException\n   * @throws KeeperException\n   * @throws InterruptedException\n   */\n  public void register(String coreName, CloudDescriptor cloudDesc, boolean forcePropsUpdate) throws IOException,\n      KeeperException, InterruptedException {\n    String shardUrl = localHostName + \":\" + localHostPort + \"/\" + localHostContext\n        + \"/\" + coreName;\n    \n    String collection = cloudDesc.getCollectionName();\n    \n    String shardsZkPath = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection + ZkStateReader.SHARDS_ZKNODE + \"/\" + cloudDesc.getShardId();\n\n    boolean shardZkNodeAlreadyExists = zkClient.exists(shardsZkPath);\n    \n    if(shardZkNodeAlreadyExists && !forcePropsUpdate) {\n      return;\n    }\n    \n    if (log.isInfoEnabled()) {\n      log.info(\"Register shard - core:\" + coreName + \" address:\"\n          + shardUrl);\n    }\n\n    ZkNodeProps props = new ZkNodeProps();\n    props.put(ZkStateReader.URL_PROP, shardUrl);\n    \n    props.put(ZkStateReader.NODE_NAME, getNodeName());\n\n    byte[] bytes = props.store();\n    \n    String shardZkNodeName = getNodeName() + \"_\" + coreName;\n\n    if(shardZkNodeAlreadyExists && forcePropsUpdate) {\n      zkClient.setData(shardsZkPath + \"/\" + shardZkNodeName, bytes);\n      // tell everyone to update cloud info\n      zkClient.setData(ZkStateReader.COLLECTIONS_ZKNODE, (byte[])null);\n    } else {\n      addZkShardsNode(cloudDesc.getShardId(), collection);\n      try {\n        zkClient.create(shardsZkPath + \"/\" + shardZkNodeName, bytes,\n            CreateMode.PERSISTENT);\n        // tell everyone to update cloud info\n        zkClient.setData(ZkStateReader.COLLECTIONS_ZKNODE, (byte[])null);\n      } catch (KeeperException e) {\n        // its okay if the node already exists\n        if (e.code() != KeeperException.Code.NODEEXISTS) {\n          throw e;\n        }\n        // for some reason the shard already exists, though it didn't when we\n        // started registration - just return\n        return;\n      }\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Register shard with ZooKeeper.\n   * \n   * @param coreName\n   * @param cloudDesc\n   * @param forcePropsUpdate update solr.xml core props even if the shard is already registered\n   * @throws IOException\n   * @throws KeeperException\n   * @throws InterruptedException\n   */\n  public void register(String coreName, CloudDescriptor cloudDesc, boolean forcePropsUpdate) throws IOException,\n      KeeperException, InterruptedException {\n    String shardUrl = localHostName + \":\" + localHostPort + \"/\" + localHostContext\n        + \"/\" + coreName;\n    \n    String collection = cloudDesc.getCollectionName();\n    \n    String shardsZkPath = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection + ZkStateReader.SHARDS_ZKNODE + \"/\" + cloudDesc.getShardId();\n\n    boolean shardZkNodeAlreadyExists = zkClient.exists(shardsZkPath);\n    \n    if(shardZkNodeAlreadyExists && !forcePropsUpdate) {\n      return;\n    }\n    \n    if (log.isInfoEnabled()) {\n      log.info(\"Register shard - core:\" + coreName + \" address:\"\n          + shardUrl);\n    }\n\n    ZkNodeProps props = new ZkNodeProps();\n    props.put(ZkStateReader.URL_PROP, shardUrl);\n    \n    props.put(ZkStateReader.NODE_NAME, getNodeName());\n\n    byte[] bytes = props.store();\n    \n    String shardZkNodeName = getNodeName() + \"_\" + coreName;\n\n    if(shardZkNodeAlreadyExists && forcePropsUpdate) {\n      zkClient.setData(shardsZkPath + \"/\" + shardZkNodeName, bytes);\n      // tell everyone to update cloud info\n      zkClient.setData(ZkStateReader.COLLECTIONS_ZKNODE, (byte[])null);\n    } else {\n      addZkShardsNode(cloudDesc.getShardId(), collection);\n      try {\n        zkClient.create(shardsZkPath + \"/\" + shardZkNodeName, bytes,\n            CreateMode.PERSISTENT);\n        // tell everyone to update cloud info\n        zkClient.setData(ZkStateReader.COLLECTIONS_ZKNODE, (byte[])null);\n      } catch (KeeperException e) {\n        // its okay if the node already exists\n        if (e.code() != KeeperException.Code.NODEEXISTS) {\n          throw e;\n        }\n        // for some reason the shard already exists, though it didn't when we\n        // started registration - just return\n        return;\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#register(String,CloudDescriptor,boolean).mjava","pathOld":"solr/src/java/org/apache/solr/cloud/ZkController#register(String,CloudDescriptor,boolean).mjava","sourceNew":"  /**\n   * Register shard with ZooKeeper.\n   * \n   * @param coreName\n   * @param cloudDesc\n   * @param forcePropsUpdate update solr.xml core props even if the shard is already registered\n   * @throws IOException\n   * @throws KeeperException\n   * @throws InterruptedException\n   */\n  public void register(String coreName, CloudDescriptor cloudDesc, boolean forcePropsUpdate) throws IOException,\n      KeeperException, InterruptedException {\n    String shardUrl = localHostName + \":\" + localHostPort + \"/\" + localHostContext\n        + \"/\" + coreName;\n    \n    String collection = cloudDesc.getCollectionName();\n    \n    String shardsZkPath = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection + ZkStateReader.SHARDS_ZKNODE + \"/\" + cloudDesc.getShardId();\n\n    boolean shardZkNodeAlreadyExists = zkClient.exists(shardsZkPath);\n    \n    if(shardZkNodeAlreadyExists && !forcePropsUpdate) {\n      return;\n    }\n    \n    if (log.isInfoEnabled()) {\n      log.info(\"Register shard - core:\" + coreName + \" address:\"\n          + shardUrl);\n    }\n\n    ZkNodeProps props = new ZkNodeProps();\n    props.put(ZkStateReader.URL_PROP, shardUrl);\n    \n    props.put(ZkStateReader.NODE_NAME, getNodeName());\n\n    byte[] bytes = props.store();\n    \n    String shardZkNodeName = getNodeName() + \"_\" + coreName;\n\n    if(shardZkNodeAlreadyExists && forcePropsUpdate) {\n      zkClient.setData(shardsZkPath + \"/\" + shardZkNodeName, bytes);\n      // tell everyone to update cloud info\n      zkClient.setData(ZkStateReader.COLLECTIONS_ZKNODE, (byte[])null);\n    } else {\n      addZkShardsNode(cloudDesc.getShardId(), collection);\n      try {\n        zkClient.create(shardsZkPath + \"/\" + shardZkNodeName, bytes,\n            CreateMode.PERSISTENT);\n        // tell everyone to update cloud info\n        zkClient.setData(ZkStateReader.COLLECTIONS_ZKNODE, (byte[])null);\n      } catch (KeeperException e) {\n        // its okay if the node already exists\n        if (e.code() != KeeperException.Code.NODEEXISTS) {\n          throw e;\n        }\n        // for some reason the shard already exists, though it didn't when we\n        // started registration - just return\n        return;\n      }\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Register shard with ZooKeeper.\n   * \n   * @param coreName\n   * @param cloudDesc\n   * @param forcePropsUpdate update solr.xml core props even if the shard is already registered\n   * @throws IOException\n   * @throws KeeperException\n   * @throws InterruptedException\n   */\n  public void register(String coreName, CloudDescriptor cloudDesc, boolean forcePropsUpdate) throws IOException,\n      KeeperException, InterruptedException {\n    String shardUrl = localHostName + \":\" + localHostPort + \"/\" + localHostContext\n        + \"/\" + coreName;\n    \n    String collection = cloudDesc.getCollectionName();\n    \n    String shardsZkPath = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection + ZkStateReader.SHARDS_ZKNODE + \"/\" + cloudDesc.getShardId();\n\n    boolean shardZkNodeAlreadyExists = zkClient.exists(shardsZkPath);\n    \n    if(shardZkNodeAlreadyExists && !forcePropsUpdate) {\n      return;\n    }\n    \n    if (log.isInfoEnabled()) {\n      log.info(\"Register shard - core:\" + coreName + \" address:\"\n          + shardUrl);\n    }\n\n    ZkNodeProps props = new ZkNodeProps();\n    props.put(ZkStateReader.URL_PROP, shardUrl);\n    \n    props.put(ZkStateReader.NODE_NAME, getNodeName());\n\n    byte[] bytes = props.store();\n    \n    String shardZkNodeName = getNodeName() + \"_\" + coreName;\n\n    if(shardZkNodeAlreadyExists && forcePropsUpdate) {\n      zkClient.setData(shardsZkPath + \"/\" + shardZkNodeName, bytes);\n      // tell everyone to update cloud info\n      zkClient.setData(ZkStateReader.COLLECTIONS_ZKNODE, (byte[])null);\n    } else {\n      addZkShardsNode(cloudDesc.getShardId(), collection);\n      try {\n        zkClient.create(shardsZkPath + \"/\" + shardZkNodeName, bytes,\n            CreateMode.PERSISTENT);\n        // tell everyone to update cloud info\n        zkClient.setData(ZkStateReader.COLLECTIONS_ZKNODE, (byte[])null);\n      } catch (KeeperException e) {\n        // its okay if the node already exists\n        if (e.code() != KeeperException.Code.NODEEXISTS) {\n          throw e;\n        }\n        // for some reason the shard already exists, though it didn't when we\n        // started registration - just return\n        return;\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#register(String,CloudDescriptor,boolean).mjava","pathOld":"solr/src/java/org/apache/solr/cloud/ZkController#register(String,CloudDescriptor,boolean).mjava","sourceNew":"  /**\n   * Register shard with ZooKeeper.\n   * \n   * @param coreName\n   * @param cloudDesc\n   * @param forcePropsUpdate update solr.xml core props even if the shard is already registered\n   * @throws IOException\n   * @throws KeeperException\n   * @throws InterruptedException\n   */\n  public void register(String coreName, CloudDescriptor cloudDesc, boolean forcePropsUpdate) throws IOException,\n      KeeperException, InterruptedException {\n    String shardUrl = localHostName + \":\" + localHostPort + \"/\" + localHostContext\n        + \"/\" + coreName;\n    \n    String collection = cloudDesc.getCollectionName();\n    \n    String shardsZkPath = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection + ZkStateReader.SHARDS_ZKNODE + \"/\" + cloudDesc.getShardId();\n\n    boolean shardZkNodeAlreadyExists = zkClient.exists(shardsZkPath);\n    \n    if(shardZkNodeAlreadyExists && !forcePropsUpdate) {\n      return;\n    }\n    \n    if (log.isInfoEnabled()) {\n      log.info(\"Register shard - core:\" + coreName + \" address:\"\n          + shardUrl);\n    }\n\n    ZkNodeProps props = new ZkNodeProps();\n    props.put(ZkStateReader.URL_PROP, shardUrl);\n    \n    props.put(ZkStateReader.NODE_NAME, getNodeName());\n\n    byte[] bytes = props.store();\n    \n    String shardZkNodeName = getNodeName() + \"_\" + coreName;\n\n    if(shardZkNodeAlreadyExists && forcePropsUpdate) {\n      zkClient.setData(shardsZkPath + \"/\" + shardZkNodeName, bytes);\n      // tell everyone to update cloud info\n      zkClient.setData(ZkStateReader.COLLECTIONS_ZKNODE, (byte[])null);\n    } else {\n      addZkShardsNode(cloudDesc.getShardId(), collection);\n      try {\n        zkClient.create(shardsZkPath + \"/\" + shardZkNodeName, bytes,\n            CreateMode.PERSISTENT);\n        // tell everyone to update cloud info\n        zkClient.setData(ZkStateReader.COLLECTIONS_ZKNODE, (byte[])null);\n      } catch (KeeperException e) {\n        // its okay if the node already exists\n        if (e.code() != KeeperException.Code.NODEEXISTS) {\n          throw e;\n        }\n        // for some reason the shard already exists, though it didn't when we\n        // started registration - just return\n        return;\n      }\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Register shard with ZooKeeper.\n   * \n   * @param coreName\n   * @param cloudDesc\n   * @param forcePropsUpdate update solr.xml core props even if the shard is already registered\n   * @throws IOException\n   * @throws KeeperException\n   * @throws InterruptedException\n   */\n  public void register(String coreName, CloudDescriptor cloudDesc, boolean forcePropsUpdate) throws IOException,\n      KeeperException, InterruptedException {\n    String shardUrl = localHostName + \":\" + localHostPort + \"/\" + localHostContext\n        + \"/\" + coreName;\n    \n    String collection = cloudDesc.getCollectionName();\n    \n    String shardsZkPath = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection + ZkStateReader.SHARDS_ZKNODE + \"/\" + cloudDesc.getShardId();\n\n    boolean shardZkNodeAlreadyExists = zkClient.exists(shardsZkPath);\n    \n    if(shardZkNodeAlreadyExists && !forcePropsUpdate) {\n      return;\n    }\n    \n    if (log.isInfoEnabled()) {\n      log.info(\"Register shard - core:\" + coreName + \" address:\"\n          + shardUrl);\n    }\n\n    ZkNodeProps props = new ZkNodeProps();\n    props.put(ZkStateReader.URL_PROP, shardUrl);\n    \n    props.put(ZkStateReader.NODE_NAME, getNodeName());\n\n    byte[] bytes = props.store();\n    \n    String shardZkNodeName = getNodeName() + \"_\" + coreName;\n\n    if(shardZkNodeAlreadyExists && forcePropsUpdate) {\n      zkClient.setData(shardsZkPath + \"/\" + shardZkNodeName, bytes);\n      // tell everyone to update cloud info\n      zkClient.setData(ZkStateReader.COLLECTIONS_ZKNODE, (byte[])null);\n    } else {\n      addZkShardsNode(cloudDesc.getShardId(), collection);\n      try {\n        zkClient.create(shardsZkPath + \"/\" + shardZkNodeName, bytes,\n            CreateMode.PERSISTENT);\n        // tell everyone to update cloud info\n        zkClient.setData(ZkStateReader.COLLECTIONS_ZKNODE, (byte[])null);\n      } catch (KeeperException e) {\n        // its okay if the node already exists\n        if (e.code() != KeeperException.Code.NODEEXISTS) {\n          throw e;\n        }\n        // for some reason the shard already exists, though it didn't when we\n        // started registration - just return\n        return;\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c007e7c4cf8c55bc2a5884e315123afaaeec87f","date":1327520966,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#register(String,CloudDescriptor,boolean).mjava","sourceNew":null,"sourceOld":"  /**\n   * Register shard with ZooKeeper.\n   * \n   * @param coreName\n   * @param cloudDesc\n   * @param forcePropsUpdate update solr.xml core props even if the shard is already registered\n   * @throws IOException\n   * @throws KeeperException\n   * @throws InterruptedException\n   */\n  public void register(String coreName, CloudDescriptor cloudDesc, boolean forcePropsUpdate) throws IOException,\n      KeeperException, InterruptedException {\n    String shardUrl = localHostName + \":\" + localHostPort + \"/\" + localHostContext\n        + \"/\" + coreName;\n    \n    String collection = cloudDesc.getCollectionName();\n    \n    String shardsZkPath = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection + ZkStateReader.SHARDS_ZKNODE + \"/\" + cloudDesc.getShardId();\n\n    boolean shardZkNodeAlreadyExists = zkClient.exists(shardsZkPath);\n    \n    if(shardZkNodeAlreadyExists && !forcePropsUpdate) {\n      return;\n    }\n    \n    if (log.isInfoEnabled()) {\n      log.info(\"Register shard - core:\" + coreName + \" address:\"\n          + shardUrl);\n    }\n\n    ZkNodeProps props = new ZkNodeProps();\n    props.put(ZkStateReader.URL_PROP, shardUrl);\n    \n    props.put(ZkStateReader.NODE_NAME, getNodeName());\n\n    byte[] bytes = props.store();\n    \n    String shardZkNodeName = getNodeName() + \"_\" + coreName;\n\n    if(shardZkNodeAlreadyExists && forcePropsUpdate) {\n      zkClient.setData(shardsZkPath + \"/\" + shardZkNodeName, bytes);\n      // tell everyone to update cloud info\n      zkClient.setData(ZkStateReader.COLLECTIONS_ZKNODE, (byte[])null);\n    } else {\n      addZkShardsNode(cloudDesc.getShardId(), collection);\n      try {\n        zkClient.create(shardsZkPath + \"/\" + shardZkNodeName, bytes,\n            CreateMode.PERSISTENT);\n        // tell everyone to update cloud info\n        zkClient.setData(ZkStateReader.COLLECTIONS_ZKNODE, (byte[])null);\n      } catch (KeeperException e) {\n        // its okay if the node already exists\n        if (e.code() != KeeperException.Code.NODEEXISTS) {\n          throw e;\n        }\n        // for some reason the shard already exists, though it didn't when we\n        // started registration - just return\n        return;\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#register(String,CloudDescriptor,boolean).mjava","sourceNew":null,"sourceOld":"  /**\n   * Register shard with ZooKeeper.\n   * \n   * @param coreName\n   * @param cloudDesc\n   * @param forcePropsUpdate update solr.xml core props even if the shard is already registered\n   * @throws IOException\n   * @throws KeeperException\n   * @throws InterruptedException\n   */\n  public void register(String coreName, CloudDescriptor cloudDesc, boolean forcePropsUpdate) throws IOException,\n      KeeperException, InterruptedException {\n    String shardUrl = localHostName + \":\" + localHostPort + \"/\" + localHostContext\n        + \"/\" + coreName;\n    \n    String collection = cloudDesc.getCollectionName();\n    \n    String shardsZkPath = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection + ZkStateReader.SHARDS_ZKNODE + \"/\" + cloudDesc.getShardId();\n\n    boolean shardZkNodeAlreadyExists = zkClient.exists(shardsZkPath);\n    \n    if(shardZkNodeAlreadyExists && !forcePropsUpdate) {\n      return;\n    }\n    \n    if (log.isInfoEnabled()) {\n      log.info(\"Register shard - core:\" + coreName + \" address:\"\n          + shardUrl);\n    }\n\n    ZkNodeProps props = new ZkNodeProps();\n    props.put(ZkStateReader.URL_PROP, shardUrl);\n    \n    props.put(ZkStateReader.NODE_NAME, getNodeName());\n\n    byte[] bytes = props.store();\n    \n    String shardZkNodeName = getNodeName() + \"_\" + coreName;\n\n    if(shardZkNodeAlreadyExists && forcePropsUpdate) {\n      zkClient.setData(shardsZkPath + \"/\" + shardZkNodeName, bytes);\n      // tell everyone to update cloud info\n      zkClient.setData(ZkStateReader.COLLECTIONS_ZKNODE, (byte[])null);\n    } else {\n      addZkShardsNode(cloudDesc.getShardId(), collection);\n      try {\n        zkClient.create(shardsZkPath + \"/\" + shardZkNodeName, bytes,\n            CreateMode.PERSISTENT);\n        // tell everyone to update cloud info\n        zkClient.setData(ZkStateReader.COLLECTIONS_ZKNODE, (byte[])null);\n      } catch (KeeperException e) {\n        // its okay if the node already exists\n        if (e.code() != KeeperException.Code.NODEEXISTS) {\n          throw e;\n        }\n        // for some reason the shard already exists, though it didn't when we\n        // started registration - just return\n        return;\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":4,"author":"Uwe Schindler","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#register(String,CloudDescriptor,boolean).mjava","sourceNew":null,"sourceOld":"  /**\n   * Register shard with ZooKeeper.\n   * \n   * @param coreName\n   * @param cloudDesc\n   * @param forcePropsUpdate update solr.xml core props even if the shard is already registered\n   * @throws IOException\n   * @throws KeeperException\n   * @throws InterruptedException\n   */\n  public void register(String coreName, CloudDescriptor cloudDesc, boolean forcePropsUpdate) throws IOException,\n      KeeperException, InterruptedException {\n    String shardUrl = localHostName + \":\" + localHostPort + \"/\" + localHostContext\n        + \"/\" + coreName;\n    \n    String collection = cloudDesc.getCollectionName();\n    \n    String shardsZkPath = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection + ZkStateReader.SHARDS_ZKNODE + \"/\" + cloudDesc.getShardId();\n\n    boolean shardZkNodeAlreadyExists = zkClient.exists(shardsZkPath);\n    \n    if(shardZkNodeAlreadyExists && !forcePropsUpdate) {\n      return;\n    }\n    \n    if (log.isInfoEnabled()) {\n      log.info(\"Register shard - core:\" + coreName + \" address:\"\n          + shardUrl);\n    }\n\n    ZkNodeProps props = new ZkNodeProps();\n    props.put(ZkStateReader.URL_PROP, shardUrl);\n    \n    props.put(ZkStateReader.NODE_NAME, getNodeName());\n\n    byte[] bytes = props.store();\n    \n    String shardZkNodeName = getNodeName() + \"_\" + coreName;\n\n    if(shardZkNodeAlreadyExists && forcePropsUpdate) {\n      zkClient.setData(shardsZkPath + \"/\" + shardZkNodeName, bytes);\n      // tell everyone to update cloud info\n      zkClient.setData(ZkStateReader.COLLECTIONS_ZKNODE, (byte[])null);\n    } else {\n      addZkShardsNode(cloudDesc.getShardId(), collection);\n      try {\n        zkClient.create(shardsZkPath + \"/\" + shardZkNodeName, bytes,\n            CreateMode.PERSISTENT);\n        // tell everyone to update cloud info\n        zkClient.setData(ZkStateReader.COLLECTIONS_ZKNODE, (byte[])null);\n      } catch (KeeperException e) {\n        // its okay if the node already exists\n        if (e.code() != KeeperException.Code.NODEEXISTS) {\n          throw e;\n        }\n        // for some reason the shard already exists, though it didn't when we\n        // started registration - just return\n        return;\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0d22ac6a4146774c1bc8400160fc0b6150294e92":["c26f00b574427b55127e869b935845554afde1fa","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["c26f00b574427b55127e869b935845554afde1fa","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["c26f00b574427b55127e869b935845554afde1fa"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"]},"commit2Childs":{"0d22ac6a4146774c1bc8400160fc0b6150294e92":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}