{"path":"lucene/facet/src/test/org/apache/lucene/facet/TestTaxonomyFacetCounts#testSegmentsWithoutCategoriesOrResults().mjava","commits":[{"id":"21d36d0db865f7b84026b447bec653469a6e66df","date":1385495602,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/TestTaxonomyFacetCounts#testSegmentsWithoutCategoriesOrResults().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/simple/TestTaxonomyFacetCounts#testSegmentsWithoutCategoriesOrResults().mjava","sourceNew":"  public void testSegmentsWithoutCategoriesOrResults() throws Exception {\n    // tests the accumulator when there are segments with no results\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n    \n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    iwc.setMergePolicy(NoMergePolicy.COMPOUND_FILES); // prevent merges\n    IndexWriter indexWriter = new IndexWriter(indexDir, iwc);\n\n    TaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir);\n    FacetsConfig config = new FacetsConfig(taxoWriter);\n    indexTwoDocs(indexWriter, config, false); // 1st segment, no content, with categories\n    indexTwoDocs(indexWriter, null, true);         // 2nd segment, with content, no categories\n    indexTwoDocs(indexWriter, config, true);  // 3rd segment ok\n    indexTwoDocs(indexWriter, null, false);        // 4th segment, no content, or categories\n    indexTwoDocs(indexWriter, null, true);         // 5th segment, with content, no categories\n    indexTwoDocs(indexWriter, config, true);  // 6th segment, with content, with categories\n    indexTwoDocs(indexWriter, null, true);         // 7th segment, with content, no categories\n    IOUtils.close(indexWriter, taxoWriter);\n\n    DirectoryReader indexReader = DirectoryReader.open(indexDir);\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoDir);\n    IndexSearcher indexSearcher = newSearcher(indexReader);\n    \n    // search for \"f:a\", only segments 1 and 3 should match results\n    Query q = new TermQuery(new Term(\"f\", \"a\"));\n    FacetsCollector sfc = new FacetsCollector();\n    indexSearcher.search(q, sfc);\n    Facets facets = getTaxonomyFacetCounts(taxoReader, config, sfc);\n    FacetResult result = facets.getTopChildren(10, \"A\");\n    assertEquals(\"wrong number of children\", 2, result.labelValues.length);\n    for (LabelAndValue labelValue : result.labelValues) {\n      assertEquals(\"wrong weight for child \" + labelValue.label, 2, labelValue.value.intValue());\n    }\n\n    IOUtils.close(indexReader, taxoReader, indexDir, taxoDir);\n  }\n\n","sourceOld":"  public void testSegmentsWithoutCategoriesOrResults() throws Exception {\n    // tests the accumulator when there are segments with no results\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n    \n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    iwc.setMergePolicy(NoMergePolicy.COMPOUND_FILES); // prevent merges\n    IndexWriter indexWriter = new IndexWriter(indexDir, iwc);\n\n    TaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir);\n    FacetsConfig config = new FacetsConfig(taxoWriter);\n    indexTwoDocs(indexWriter, config, false); // 1st segment, no content, with categories\n    indexTwoDocs(indexWriter, null, true);         // 2nd segment, with content, no categories\n    indexTwoDocs(indexWriter, config, true);  // 3rd segment ok\n    indexTwoDocs(indexWriter, null, false);        // 4th segment, no content, or categories\n    indexTwoDocs(indexWriter, null, true);         // 5th segment, with content, no categories\n    indexTwoDocs(indexWriter, config, true);  // 6th segment, with content, with categories\n    indexTwoDocs(indexWriter, null, true);         // 7th segment, with content, no categories\n    IOUtils.close(indexWriter, taxoWriter);\n\n    DirectoryReader indexReader = DirectoryReader.open(indexDir);\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoDir);\n    IndexSearcher indexSearcher = newSearcher(indexReader);\n    \n    // search for \"f:a\", only segments 1 and 3 should match results\n    Query q = new TermQuery(new Term(\"f\", \"a\"));\n    SimpleFacetsCollector sfc = new SimpleFacetsCollector();\n    indexSearcher.search(q, sfc);\n    Facets facets = getTaxonomyFacetCounts(taxoReader, config, sfc);\n    SimpleFacetResult result = facets.getTopChildren(10, \"A\");\n    assertEquals(\"wrong number of children\", 2, result.labelValues.length);\n    for (LabelAndValue labelValue : result.labelValues) {\n      assertEquals(\"wrong weight for child \" + labelValue.label, 2, labelValue.value.intValue());\n    }\n\n    IOUtils.close(indexReader, taxoReader, indexDir, taxoDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd83550e4b0bdd36e7d9dca9273264100782440b","date":1385761753,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/TestTaxonomyFacetCounts#testSegmentsWithoutCategoriesOrResults().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/TestTaxonomyFacetCounts#testSegmentsWithoutCategoriesOrResults().mjava","sourceNew":"  public void testSegmentsWithoutCategoriesOrResults() throws Exception {\n    // tests the accumulator when there are segments with no results\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n    \n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    iwc.setMergePolicy(NoMergePolicy.COMPOUND_FILES); // prevent merges\n    IndexWriter indexWriter = new IndexWriter(indexDir, iwc);\n\n    TaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir);\n    FacetsConfig config = new FacetsConfig();\n    indexTwoDocs(taxoWriter, indexWriter, config, false); // 1st segment, no content, with categories\n    indexTwoDocs(taxoWriter, indexWriter, null, true);         // 2nd segment, with content, no categories\n    indexTwoDocs(taxoWriter, indexWriter, config, true);  // 3rd segment ok\n    indexTwoDocs(taxoWriter, indexWriter, null, false);        // 4th segment, no content, or categories\n    indexTwoDocs(taxoWriter, indexWriter, null, true);         // 5th segment, with content, no categories\n    indexTwoDocs(taxoWriter, indexWriter, config, true);  // 6th segment, with content, with categories\n    indexTwoDocs(taxoWriter, indexWriter, null, true);         // 7th segment, with content, no categories\n    IOUtils.close(indexWriter, taxoWriter);\n\n    DirectoryReader indexReader = DirectoryReader.open(indexDir);\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoDir);\n    IndexSearcher indexSearcher = newSearcher(indexReader);\n    \n    // search for \"f:a\", only segments 1 and 3 should match results\n    Query q = new TermQuery(new Term(\"f\", \"a\"));\n    FacetsCollector sfc = new FacetsCollector();\n    indexSearcher.search(q, sfc);\n    Facets facets = getTaxonomyFacetCounts(taxoReader, config, sfc);\n    FacetResult result = facets.getTopChildren(10, \"A\");\n    assertEquals(\"wrong number of children\", 2, result.labelValues.length);\n    for (LabelAndValue labelValue : result.labelValues) {\n      assertEquals(\"wrong weight for child \" + labelValue.label, 2, labelValue.value.intValue());\n    }\n\n    IOUtils.close(indexReader, taxoReader, indexDir, taxoDir);\n  }\n\n","sourceOld":"  public void testSegmentsWithoutCategoriesOrResults() throws Exception {\n    // tests the accumulator when there are segments with no results\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n    \n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    iwc.setMergePolicy(NoMergePolicy.COMPOUND_FILES); // prevent merges\n    IndexWriter indexWriter = new IndexWriter(indexDir, iwc);\n\n    TaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir);\n    FacetsConfig config = new FacetsConfig(taxoWriter);\n    indexTwoDocs(indexWriter, config, false); // 1st segment, no content, with categories\n    indexTwoDocs(indexWriter, null, true);         // 2nd segment, with content, no categories\n    indexTwoDocs(indexWriter, config, true);  // 3rd segment ok\n    indexTwoDocs(indexWriter, null, false);        // 4th segment, no content, or categories\n    indexTwoDocs(indexWriter, null, true);         // 5th segment, with content, no categories\n    indexTwoDocs(indexWriter, config, true);  // 6th segment, with content, with categories\n    indexTwoDocs(indexWriter, null, true);         // 7th segment, with content, no categories\n    IOUtils.close(indexWriter, taxoWriter);\n\n    DirectoryReader indexReader = DirectoryReader.open(indexDir);\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoDir);\n    IndexSearcher indexSearcher = newSearcher(indexReader);\n    \n    // search for \"f:a\", only segments 1 and 3 should match results\n    Query q = new TermQuery(new Term(\"f\", \"a\"));\n    FacetsCollector sfc = new FacetsCollector();\n    indexSearcher.search(q, sfc);\n    Facets facets = getTaxonomyFacetCounts(taxoReader, config, sfc);\n    FacetResult result = facets.getTopChildren(10, \"A\");\n    assertEquals(\"wrong number of children\", 2, result.labelValues.length);\n    for (LabelAndValue labelValue : result.labelValues) {\n      assertEquals(\"wrong weight for child \" + labelValue.label, 2, labelValue.value.intValue());\n    }\n\n    IOUtils.close(indexReader, taxoReader, indexDir, taxoDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4edc984f0f4ac77c37e48ace2932f780f888453c","date":1388475218,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyFacetCounts#testSegmentsWithoutCategoriesOrResults().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/TestTaxonomyFacetCounts#testSegmentsWithoutCategoriesOrResults().mjava","sourceNew":"  public void testSegmentsWithoutCategoriesOrResults() throws Exception {\n    // tests the accumulator when there are segments with no results\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n    \n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    iwc.setMergePolicy(NoMergePolicy.COMPOUND_FILES); // prevent merges\n    IndexWriter indexWriter = new IndexWriter(indexDir, iwc);\n\n    TaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir);\n    FacetsConfig config = new FacetsConfig();\n    indexTwoDocs(taxoWriter, indexWriter, config, false); // 1st segment, no content, with categories\n    indexTwoDocs(taxoWriter, indexWriter, null, true);         // 2nd segment, with content, no categories\n    indexTwoDocs(taxoWriter, indexWriter, config, true);  // 3rd segment ok\n    indexTwoDocs(taxoWriter, indexWriter, null, false);        // 4th segment, no content, or categories\n    indexTwoDocs(taxoWriter, indexWriter, null, true);         // 5th segment, with content, no categories\n    indexTwoDocs(taxoWriter, indexWriter, config, true);  // 6th segment, with content, with categories\n    indexTwoDocs(taxoWriter, indexWriter, null, true);         // 7th segment, with content, no categories\n    IOUtils.close(indexWriter, taxoWriter);\n\n    DirectoryReader indexReader = DirectoryReader.open(indexDir);\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoDir);\n    IndexSearcher indexSearcher = newSearcher(indexReader);\n    \n    // search for \"f:a\", only segments 1 and 3 should match results\n    Query q = new TermQuery(new Term(\"f\", \"a\"));\n    FacetsCollector sfc = new FacetsCollector();\n    indexSearcher.search(q, sfc);\n    Facets facets = getTaxonomyFacetCounts(taxoReader, config, sfc);\n    FacetResult result = facets.getTopChildren(10, \"A\");\n    assertEquals(\"wrong number of children\", 2, result.labelValues.length);\n    for (LabelAndValue labelValue : result.labelValues) {\n      assertEquals(\"wrong weight for child \" + labelValue.label, 2, labelValue.value.intValue());\n    }\n\n    IOUtils.close(indexReader, taxoReader, indexDir, taxoDir);\n  }\n\n","sourceOld":"  public void testSegmentsWithoutCategoriesOrResults() throws Exception {\n    // tests the accumulator when there are segments with no results\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n    \n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    iwc.setMergePolicy(NoMergePolicy.COMPOUND_FILES); // prevent merges\n    IndexWriter indexWriter = new IndexWriter(indexDir, iwc);\n\n    TaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir);\n    FacetsConfig config = new FacetsConfig();\n    indexTwoDocs(taxoWriter, indexWriter, config, false); // 1st segment, no content, with categories\n    indexTwoDocs(taxoWriter, indexWriter, null, true);         // 2nd segment, with content, no categories\n    indexTwoDocs(taxoWriter, indexWriter, config, true);  // 3rd segment ok\n    indexTwoDocs(taxoWriter, indexWriter, null, false);        // 4th segment, no content, or categories\n    indexTwoDocs(taxoWriter, indexWriter, null, true);         // 5th segment, with content, no categories\n    indexTwoDocs(taxoWriter, indexWriter, config, true);  // 6th segment, with content, with categories\n    indexTwoDocs(taxoWriter, indexWriter, null, true);         // 7th segment, with content, no categories\n    IOUtils.close(indexWriter, taxoWriter);\n\n    DirectoryReader indexReader = DirectoryReader.open(indexDir);\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoDir);\n    IndexSearcher indexSearcher = newSearcher(indexReader);\n    \n    // search for \"f:a\", only segments 1 and 3 should match results\n    Query q = new TermQuery(new Term(\"f\", \"a\"));\n    FacetsCollector sfc = new FacetsCollector();\n    indexSearcher.search(q, sfc);\n    Facets facets = getTaxonomyFacetCounts(taxoReader, config, sfc);\n    FacetResult result = facets.getTopChildren(10, \"A\");\n    assertEquals(\"wrong number of children\", 2, result.labelValues.length);\n    for (LabelAndValue labelValue : result.labelValues) {\n      assertEquals(\"wrong weight for child \" + labelValue.label, 2, labelValue.value.intValue());\n    }\n\n    IOUtils.close(indexReader, taxoReader, indexDir, taxoDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4edc984f0f4ac77c37e48ace2932f780f888453c":["fd83550e4b0bdd36e7d9dca9273264100782440b"],"21d36d0db865f7b84026b447bec653469a6e66df":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fd83550e4b0bdd36e7d9dca9273264100782440b":["21d36d0db865f7b84026b447bec653469a6e66df"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["21d36d0db865f7b84026b447bec653469a6e66df","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4edc984f0f4ac77c37e48ace2932f780f888453c":[],"21d36d0db865f7b84026b447bec653469a6e66df":["fd83550e4b0bdd36e7d9dca9273264100782440b"],"fd83550e4b0bdd36e7d9dca9273264100782440b":["4edc984f0f4ac77c37e48ace2932f780f888453c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4edc984f0f4ac77c37e48ace2932f780f888453c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}