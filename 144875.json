{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/embedded/SSLConfig#createContextFactory().mjava","commits":[{"id":"1a77e5e21cbd575a8240b0e3926164f15295f4e8","date":1544979500,"type":1,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/embedded/SSLConfig#createContextFactory().mjava","pathOld":"solr/core/src/java/org/apache/solr/client/solrj/embedded/SSLConfig#createContextFactory().mjava","sourceNew":"  /**\n   * Returns an SslContextFactory that should be used by a jetty server based on this SSLConfig instance, \n   * or null if SSL should not be used.\n   *\n   * The default implementation generates a simple factory according to the keystore, truststore, \n   * and clientAuth properties of this object.\n   *\n   * @see #getKeyStore\n   * @see #getKeyStorePassword\n   * @see #isClientAuthMode\n   * @see #getTrustStore\n   * @see #getTrustStorePassword\n   */\n  public SslContextFactory createContextFactory() {\n\n    if (! isSSLMode()) {\n      return null;\n    }\n    // else...\n    \n    SslContextFactory factory = new SslContextFactory(false);\n    if (getKeyStore() != null)\n      factory.setKeyStorePath(getKeyStore());\n    if (getKeyStorePassword() != null)\n      factory.setKeyStorePassword(getKeyStorePassword());\n    \n    factory.setNeedClientAuth(isClientAuthMode());\n    \n    if (isClientAuthMode()) {\n      if (getTrustStore() != null)\n        factory.setTrustStorePath(getTrustStore());\n      if (getTrustStorePassword() != null)\n        factory.setTrustStorePassword(getTrustStorePassword());\n    }\n    return factory;\n\n  }\n\n","sourceOld":"  /**\n   * Returns an SslContextFactory that should be used by a jetty server based on this SSLConfig instance, \n   * or null if SSL should not be used.\n   *\n   * The default implementation generates a simple factory according to the keystore, truststore, \n   * and clientAuth properties of this object.\n   *\n   * @see #getKeyStore\n   * @see #getKeyStorePassword\n   * @see #isClientAuthMode\n   * @see #getTrustStore\n   * @see #getTrustStorePassword\n   */\n  public SslContextFactory createContextFactory() {\n\n    if (! isSSLMode()) {\n      return null;\n    }\n    // else...\n    \n    SslContextFactory factory = new SslContextFactory(false);\n    if (getKeyStore() != null)\n      factory.setKeyStorePath(getKeyStore());\n    if (getKeyStorePassword() != null)\n      factory.setKeyStorePassword(getKeyStorePassword());\n    \n    factory.setNeedClientAuth(isClientAuthMode());\n    \n    if (isClientAuthMode()) {\n      if (getTrustStore() != null)\n        factory.setTrustStorePath(getTrustStore());\n      if (getTrustStorePassword() != null)\n        factory.setTrustStorePassword(getTrustStorePassword());\n    }\n    return factory;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ea0f43f20834b3c8930e074b144aba27a935fee8","date":1576814747,"type":3,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/embedded/SSLConfig#createContextFactory().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/embedded/SSLConfig#createContextFactory().mjava","sourceNew":"  /**\n   * Returns an SslContextFactory.Server that should be used by a jetty server based on this SSLConfig instance,\n   * or null if SSL should not be used.\n   *\n   * The default implementation generates a simple factory according to the keystore, truststore, \n   * and clientAuth properties of this object.\n   *\n   * @see #getKeyStore\n   * @see #getKeyStorePassword\n   * @see #isClientAuthMode\n   * @see #getTrustStore\n   * @see #getTrustStorePassword\n   */\n  public SslContextFactory.Server createContextFactory() {\n    if (! isSSLMode()) {\n      return null;\n    }\n    // else...\n    \n    SslContextFactory.Server factory = new SslContextFactory.Server();\n    if (getKeyStore() != null)\n      factory.setKeyStorePath(getKeyStore());\n    if (getKeyStorePassword() != null)\n      factory.setKeyStorePassword(getKeyStorePassword());\n    \n    factory.setNeedClientAuth(isClientAuthMode());\n    \n    if (isClientAuthMode()) {\n      if (getTrustStore() != null)\n        factory.setTrustStorePath(getTrustStore());\n      if (getTrustStorePassword() != null)\n        factory.setTrustStorePassword(getTrustStorePassword());\n    }\n    return factory;\n  }\n\n","sourceOld":"  /**\n   * Returns an SslContextFactory that should be used by a jetty server based on this SSLConfig instance, \n   * or null if SSL should not be used.\n   *\n   * The default implementation generates a simple factory according to the keystore, truststore, \n   * and clientAuth properties of this object.\n   *\n   * @see #getKeyStore\n   * @see #getKeyStorePassword\n   * @see #isClientAuthMode\n   * @see #getTrustStore\n   * @see #getTrustStorePassword\n   */\n  public SslContextFactory createContextFactory() {\n\n    if (! isSSLMode()) {\n      return null;\n    }\n    // else...\n    \n    SslContextFactory factory = new SslContextFactory(false);\n    if (getKeyStore() != null)\n      factory.setKeyStorePath(getKeyStore());\n    if (getKeyStorePassword() != null)\n      factory.setKeyStorePassword(getKeyStorePassword());\n    \n    factory.setNeedClientAuth(isClientAuthMode());\n    \n    if (isClientAuthMode()) {\n      if (getTrustStore() != null)\n        factory.setTrustStorePath(getTrustStore());\n      if (getTrustStorePassword() != null)\n        factory.setTrustStorePassword(getTrustStorePassword());\n    }\n    return factory;\n\n  }\n\n","bugFix":["cb28d79732042ac28cd68a04bcb1b6584c18d8c9"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4c66470e527299cc148ad0b3441d08dfb7cb9e03","date":1576859740,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/embedded/SSLConfig#createContextFactory().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/embedded/SSLConfig#createContextFactory().mjava","sourceNew":"  /**\n   * Returns an SslContextFactory.Server that should be used by a jetty server based on this SSLConfig instance,\n   * or null if SSL should not be used.\n   *\n   * The default implementation generates a simple factory according to the keystore, truststore, \n   * and clientAuth properties of this object.\n   *\n   * @see #getKeyStore\n   * @see #getKeyStorePassword\n   * @see #isClientAuthMode\n   * @see #getTrustStore\n   * @see #getTrustStorePassword\n   */\n  public SslContextFactory.Server createContextFactory() {\n    if (! isSSLMode()) {\n      return null;\n    }\n    // else...\n    \n    SslContextFactory.Server factory = new SslContextFactory.Server();\n    if (getKeyStore() != null)\n      factory.setKeyStorePath(getKeyStore());\n    if (getKeyStorePassword() != null)\n      factory.setKeyStorePassword(getKeyStorePassword());\n    \n    factory.setNeedClientAuth(isClientAuthMode());\n    \n    if (isClientAuthMode()) {\n      if (getTrustStore() != null)\n        factory.setTrustStorePath(getTrustStore());\n      if (getTrustStorePassword() != null)\n        factory.setTrustStorePassword(getTrustStorePassword());\n    }\n    return factory;\n  }\n\n","sourceOld":"  /**\n   * Returns an SslContextFactory that should be used by a jetty server based on this SSLConfig instance, \n   * or null if SSL should not be used.\n   *\n   * The default implementation generates a simple factory according to the keystore, truststore, \n   * and clientAuth properties of this object.\n   *\n   * @see #getKeyStore\n   * @see #getKeyStorePassword\n   * @see #isClientAuthMode\n   * @see #getTrustStore\n   * @see #getTrustStorePassword\n   */\n  public SslContextFactory createContextFactory() {\n\n    if (! isSSLMode()) {\n      return null;\n    }\n    // else...\n    \n    SslContextFactory factory = new SslContextFactory(false);\n    if (getKeyStore() != null)\n      factory.setKeyStorePath(getKeyStore());\n    if (getKeyStorePassword() != null)\n      factory.setKeyStorePassword(getKeyStorePassword());\n    \n    factory.setNeedClientAuth(isClientAuthMode());\n    \n    if (isClientAuthMode()) {\n      if (getTrustStore() != null)\n        factory.setTrustStorePath(getTrustStore());\n      if (getTrustStorePassword() != null)\n        factory.setTrustStorePassword(getTrustStorePassword());\n    }\n    return factory;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1a77e5e21cbd575a8240b0e3926164f15295f4e8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ea0f43f20834b3c8930e074b144aba27a935fee8":["1a77e5e21cbd575a8240b0e3926164f15295f4e8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4c66470e527299cc148ad0b3441d08dfb7cb9e03":["1a77e5e21cbd575a8240b0e3926164f15295f4e8","ea0f43f20834b3c8930e074b144aba27a935fee8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ea0f43f20834b3c8930e074b144aba27a935fee8"]},"commit2Childs":{"1a77e5e21cbd575a8240b0e3926164f15295f4e8":["ea0f43f20834b3c8930e074b144aba27a935fee8","4c66470e527299cc148ad0b3441d08dfb7cb9e03"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1a77e5e21cbd575a8240b0e3926164f15295f4e8"],"ea0f43f20834b3c8930e074b144aba27a935fee8":["4c66470e527299cc148ad0b3441d08dfb7cb9e03","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4c66470e527299cc148ad0b3441d08dfb7cb9e03":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4c66470e527299cc148ad0b3441d08dfb7cb9e03","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}