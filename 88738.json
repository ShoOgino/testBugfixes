{"path":"lucene/contrib/misc/src/java/org/apache/lucene/search/SearcherManager#SearcherManager(Directory,SearcherWarmer,ExecutorService).mjava","commits":[{"id":"edcc2c2cbab6bf89ea584169ffb3ca83a31827f9","date":1316963893,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/search/SearcherManager#SearcherManager(Directory,SearcherWarmer,ExecutorService).mjava","pathOld":"/dev/null","sourceNew":"  /** Opens an initial searcher from the Directory.\n   *\n   * @param dir Directory to open the searcher from\n   *\n   * @param warmer optional {@link SearcherWarmer}.  Pass\n   *        null if you don't require the searcher to warmed\n   *        before going live.\n   *\n   * @param es optional ExecutorService so different segments can\n   *        be searched concurrently (see {@link\n   *        IndexSearcher#IndexSearcher(IndexReader,ExecutorService)}.  Pass null\n   *        to search segments sequentially.\n   *\n   *  <p><b>NOTE</b>: the provided {@link SearcherWarmer} is\n   *  not invoked for the initial searcher; you should\n   *  warm it yourself if necessary.\n   */\n  public SearcherManager(Directory dir, SearcherWarmer warmer, ExecutorService es) throws IOException {\n    this.es = es;\n    currentSearcher = new IndexSearcher(IndexReader.open(dir), this.es);\n    this.warmer = warmer;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"606baff722a317c76a92b111d183b54b6e6e5741","date":1317974711,"type":4,"author":"Simon Willnauer","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/search/SearcherManager#SearcherManager(Directory,SearcherWarmer,ExecutorService).mjava","sourceNew":null,"sourceOld":"  /** Opens an initial searcher from the Directory.\n   *\n   * @param dir Directory to open the searcher from\n   *\n   * @param warmer optional {@link SearcherWarmer}.  Pass\n   *        null if you don't require the searcher to warmed\n   *        before going live.\n   *\n   * @param es optional ExecutorService so different segments can\n   *        be searched concurrently (see {@link\n   *        IndexSearcher#IndexSearcher(IndexReader,ExecutorService)}.  Pass null\n   *        to search segments sequentially.\n   *\n   *  <p><b>NOTE</b>: the provided {@link SearcherWarmer} is\n   *  not invoked for the initial searcher; you should\n   *  warm it yourself if necessary.\n   */\n  public SearcherManager(Directory dir, SearcherWarmer warmer, ExecutorService es) throws IOException {\n    this.es = es;\n    currentSearcher = new IndexSearcher(IndexReader.open(dir), this.es);\n    this.warmer = warmer;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43369d257d14f61a881aa609962ef95e8a334d3a","date":1318786064,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/search/SearcherManager#SearcherManager(Directory,SearcherWarmer,ExecutorService).mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/search/SearcherManager#open(Directory,SearcherWarmer,ExecutorService).mjava","sourceNew":"  /**\n   * Creates and returns a new SearcherManager from the given {@link Directory}. \n   * @param dir the directory to open the IndexReader on.\n   * @param warmer An optional {@link SearcherWarmer}.  Pass\n   *        <code>null</code> if you don't require the searcher to warmed\n   *        before going live.  If this is  <code>non-null</code> then a\n   *        merged segment warmer is installed on the\n   *        provided IndexWriter's config.\n   * @param es And optional {@link ExecutorService} so different segments can\n   *        be searched concurrently (see {@link\n   *        IndexSearcher#IndexSearcher(IndexReader,ExecutorService)}.  Pass <code>null</code>\n   *        to search segments sequentially.\n   *        \n   * @throws IOException\n   */\n  public SearcherManager(Directory dir, SearcherWarmer warmer,\n      ExecutorService es) throws IOException {\n    this.es = es;\n    this.warmer = warmer;\n    currentSearcher = new IndexSearcher(IndexReader.open(dir, true), es);\n  }\n\n","sourceOld":"  /**\n   * Creates and returns a new SearcherManager from the given {@link Directory}. \n   * @param dir the directory to open the IndexReader on.\n   * @param warmer An optional {@link SearcherWarmer}.  Pass\n   *        <code>null</code> if you don't require the searcher to warmed\n   *        before going live.  If this is  <code>non-null</code> then a\n   *        merged segment warmer is installed on the\n   *        provided IndexWriter's config.\n   * @param es And optional {@link ExecutorService} so different segments can\n   *        be searched concurrently (see {@link\n   *        IndexSearcher#IndexSearcher(IndexReader,ExecutorService)}.  Pass <code>null</code>\n   *        to search segments sequentially.\n   *        \n   * @throws IOException\n   */\n  public static SearcherManager open(Directory dir, SearcherWarmer warmer,\n      ExecutorService es) throws IOException {\n    final IndexReader open = IndexReader.open(dir, true);\n    boolean success = false;\n    try {\n      SearcherManager manager = new DirectorySearchManager(open, warmer, es);\n      success = true;\n      return manager;\n    } finally {\n      if (!success) {\n        open.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"df16fc2e9b615e0138edac46655ae628f5d098ad","date":1320876869,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/SearcherManager#SearcherManager(Directory,SearcherWarmer,ExecutorService).mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/search/SearcherManager#SearcherManager(Directory,SearcherWarmer,ExecutorService).mjava","sourceNew":"  /**\n   * Creates and returns a new SearcherManager from the given {@link Directory}. \n   * @param dir the directory to open the IndexReader on.\n   * @param warmer An optional {@link SearcherWarmer}.  Pass\n   *        <code>null</code> if you don't require the searcher to warmed\n   *        before going live.  If this is  <code>non-null</code> then a\n   *        merged segment warmer is installed on the\n   *        provided IndexWriter's config.\n   * @param es And optional {@link ExecutorService} so different segments can\n   *        be searched concurrently (see {@link\n   *        IndexSearcher#IndexSearcher(IndexReader,ExecutorService)}.  Pass <code>null</code>\n   *        to search segments sequentially.\n   *        \n   * @throws IOException\n   */\n  public SearcherManager(Directory dir, SearcherWarmer warmer,\n      ExecutorService es) throws IOException {\n    this.es = es;\n    this.warmer = warmer;\n    currentSearcher = new IndexSearcher(IndexReader.open(dir, true), es);\n  }\n\n","sourceOld":"  /**\n   * Creates and returns a new SearcherManager from the given {@link Directory}. \n   * @param dir the directory to open the IndexReader on.\n   * @param warmer An optional {@link SearcherWarmer}.  Pass\n   *        <code>null</code> if you don't require the searcher to warmed\n   *        before going live.  If this is  <code>non-null</code> then a\n   *        merged segment warmer is installed on the\n   *        provided IndexWriter's config.\n   * @param es And optional {@link ExecutorService} so different segments can\n   *        be searched concurrently (see {@link\n   *        IndexSearcher#IndexSearcher(IndexReader,ExecutorService)}.  Pass <code>null</code>\n   *        to search segments sequentially.\n   *        \n   * @throws IOException\n   */\n  public SearcherManager(Directory dir, SearcherWarmer warmer,\n      ExecutorService es) throws IOException {\n    this.es = es;\n    this.warmer = warmer;\n    currentSearcher = new IndexSearcher(IndexReader.open(dir, true), es);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"df16fc2e9b615e0138edac46655ae628f5d098ad":["43369d257d14f61a881aa609962ef95e8a334d3a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"edcc2c2cbab6bf89ea584169ffb3ca83a31827f9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"43369d257d14f61a881aa609962ef95e8a334d3a":["606baff722a317c76a92b111d183b54b6e6e5741"],"606baff722a317c76a92b111d183b54b6e6e5741":["edcc2c2cbab6bf89ea584169ffb3ca83a31827f9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["df16fc2e9b615e0138edac46655ae628f5d098ad"]},"commit2Childs":{"df16fc2e9b615e0138edac46655ae628f5d098ad":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["edcc2c2cbab6bf89ea584169ffb3ca83a31827f9"],"edcc2c2cbab6bf89ea584169ffb3ca83a31827f9":["606baff722a317c76a92b111d183b54b6e6e5741"],"43369d257d14f61a881aa609962ef95e8a334d3a":["df16fc2e9b615e0138edac46655ae628f5d098ad"],"606baff722a317c76a92b111d183b54b6e6e5741":["43369d257d14f61a881aa609962ef95e8a334d3a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}