{"path":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoCircleFactory#makeGeoCircle(PlanetModel,double,double,double).mjava","commits":[{"id":"b4e444678504caf66a8060b1d514383aa4feac0c","date":1457399659,"type":1,"author":"David Smiley","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoCircleFactory#makeGeoCircle(PlanetModel,double,double,double).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/geo3d/GeoCircleFactory#makeGeoCircle(PlanetModel,double,double,double).mjava","sourceNew":"  /**\n   * Create a GeoCircle of the right kind given the specified bounds.\n   * @param planetModel is the planet model.\n   * @param latitude is the center latitude.\n   * @param longitude is the center longitude.\n   * @param radius is the radius angle.\n   * @return a GeoCircle corresponding to what was specified.\n   */\n  public static GeoCircle makeGeoCircle(final PlanetModel planetModel, final double latitude, final double longitude, final double radius) {\n    if (radius < Vector.MINIMUM_RESOLUTION) {\n      return new GeoDegeneratePoint(planetModel, latitude, longitude);\n    }\n    return new GeoStandardCircle(planetModel, latitude, longitude, radius);\n  }\n\n","sourceOld":"  /**\n   * Create a GeoCircle of the right kind given the specified bounds.\n   * @param planetModel is the planet model.\n   * @param latitude is the center latitude.\n   * @param longitude is the center longitude.\n   * @param radius is the radius angle.\n   * @return a GeoCircle corresponding to what was specified.\n   */\n  public static GeoCircle makeGeoCircle(final PlanetModel planetModel, final double latitude, final double longitude, final double radius) {\n    if (radius < Vector.MINIMUM_RESOLUTION) {\n      return new GeoDegeneratePoint(planetModel, latitude, longitude);\n    }\n    return new GeoStandardCircle(planetModel, latitude, longitude, radius);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"098b5036c89446805f69a16e53f6d22f10ae5766","date":1482885715,"type":3,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoCircleFactory#makeGeoCircle(PlanetModel,double,double,double).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoCircleFactory#makeGeoCircle(PlanetModel,double,double,double).mjava","sourceNew":"  /**\n   * Create a GeoCircle of the right kind given the specified bounds.\n   * @param planetModel is the planet model.\n   * @param latitude is the center latitude.\n   * @param longitude is the center longitude.\n   * @param radius is the radius angle.\n   * @return a GeoCircle corresponding to what was specified.\n   */\n  public static GeoCircle makeGeoCircle(final PlanetModel planetModel, final double latitude, final double longitude, final double radius) {\n    if (radius < Vector.MINIMUM_ANGULAR_RESOLUTION) {\n      return new GeoDegeneratePoint(planetModel, latitude, longitude);\n    }\n    return new GeoStandardCircle(planetModel, latitude, longitude, radius);\n  }\n\n","sourceOld":"  /**\n   * Create a GeoCircle of the right kind given the specified bounds.\n   * @param planetModel is the planet model.\n   * @param latitude is the center latitude.\n   * @param longitude is the center longitude.\n   * @param radius is the radius angle.\n   * @return a GeoCircle corresponding to what was specified.\n   */\n  public static GeoCircle makeGeoCircle(final PlanetModel planetModel, final double latitude, final double longitude, final double radius) {\n    if (radius < Vector.MINIMUM_RESOLUTION) {\n      return new GeoDegeneratePoint(planetModel, latitude, longitude);\n    }\n    return new GeoStandardCircle(planetModel, latitude, longitude, radius);\n  }\n\n","bugFix":["ae6b82f3eeb00bd6696223fc1aaf31128810162a"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f03e4bed5023ec3ef93a771b8888cae991cf448d","date":1483469262,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoCircleFactory#makeGeoCircle(PlanetModel,double,double,double).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoCircleFactory#makeGeoCircle(PlanetModel,double,double,double).mjava","sourceNew":"  /**\n   * Create a GeoCircle of the right kind given the specified bounds.\n   * @param planetModel is the planet model.\n   * @param latitude is the center latitude.\n   * @param longitude is the center longitude.\n   * @param radius is the radius angle.\n   * @return a GeoCircle corresponding to what was specified.\n   */\n  public static GeoCircle makeGeoCircle(final PlanetModel planetModel, final double latitude, final double longitude, final double radius) {\n    if (radius < Vector.MINIMUM_ANGULAR_RESOLUTION) {\n      return new GeoDegeneratePoint(planetModel, latitude, longitude);\n    }\n    return new GeoStandardCircle(planetModel, latitude, longitude, radius);\n  }\n\n","sourceOld":"  /**\n   * Create a GeoCircle of the right kind given the specified bounds.\n   * @param planetModel is the planet model.\n   * @param latitude is the center latitude.\n   * @param longitude is the center longitude.\n   * @param radius is the radius angle.\n   * @return a GeoCircle corresponding to what was specified.\n   */\n  public static GeoCircle makeGeoCircle(final PlanetModel planetModel, final double latitude, final double longitude, final double radius) {\n    if (radius < Vector.MINIMUM_RESOLUTION) {\n      return new GeoDegeneratePoint(planetModel, latitude, longitude);\n    }\n    return new GeoStandardCircle(planetModel, latitude, longitude, radius);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4eeea55acc3d6772f83fea40b1187f8ce6c20d04","date":1513166986,"type":3,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoCircleFactory#makeGeoCircle(PlanetModel,double,double,double).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoCircleFactory#makeGeoCircle(PlanetModel,double,double,double).mjava","sourceNew":"  /**\n   * Create a GeoCircle from a center and a cutoff angle. The resulting shape is a circle in spherical\n   * planets, otherwise is an ellipse. It is the most efficient shape to represent a circle on a sphere.\n   *\n   * @param planetModel is the planet model.\n   * @param latitude is the center latitude.\n   * @param longitude is the center longitude.\n   * @param cutoffAngle is the cutoff angle.\n   * @return a GeoCircle corresponding to what was specified.\n   */\n  public static GeoCircle makeGeoCircle(final PlanetModel planetModel, final double latitude, final double longitude, final double cutoffAngle) {\n    if (cutoffAngle < Vector.MINIMUM_ANGULAR_RESOLUTION) {\n      return new GeoDegeneratePoint(planetModel, latitude, longitude);\n    }\n    return new GeoStandardCircle(planetModel, latitude, longitude, cutoffAngle);\n  }\n\n","sourceOld":"  /**\n   * Create a GeoCircle of the right kind given the specified bounds.\n   * @param planetModel is the planet model.\n   * @param latitude is the center latitude.\n   * @param longitude is the center longitude.\n   * @param radius is the radius angle.\n   * @return a GeoCircle corresponding to what was specified.\n   */\n  public static GeoCircle makeGeoCircle(final PlanetModel planetModel, final double latitude, final double longitude, final double radius) {\n    if (radius < Vector.MINIMUM_ANGULAR_RESOLUTION) {\n      return new GeoDegeneratePoint(planetModel, latitude, longitude);\n    }\n    return new GeoStandardCircle(planetModel, latitude, longitude, radius);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"098b5036c89446805f69a16e53f6d22f10ae5766":["b4e444678504caf66a8060b1d514383aa4feac0c"],"b4e444678504caf66a8060b1d514383aa4feac0c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4eeea55acc3d6772f83fea40b1187f8ce6c20d04"],"4eeea55acc3d6772f83fea40b1187f8ce6c20d04":["098b5036c89446805f69a16e53f6d22f10ae5766"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":["b4e444678504caf66a8060b1d514383aa4feac0c","098b5036c89446805f69a16e53f6d22f10ae5766"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b4e444678504caf66a8060b1d514383aa4feac0c"],"098b5036c89446805f69a16e53f6d22f10ae5766":["4eeea55acc3d6772f83fea40b1187f8ce6c20d04","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"b4e444678504caf66a8060b1d514383aa4feac0c":["098b5036c89446805f69a16e53f6d22f10ae5766","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"4eeea55acc3d6772f83fea40b1187f8ce6c20d04":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}