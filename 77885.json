{"path":"lucene/contrib/instantiated/src/java/org/apache/lucene/store/instantiated/InstantiatedIndexReader#fields().mjava","commits":[{"id":"20cf910d1892b0a0ff8543ec4551b6df2dc3de40","date":1275769896,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/contrib/instantiated/src/java/org/apache/lucene/store/instantiated/InstantiatedIndexReader#fields().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Fields fields() {\n\n    return new Fields() {\n      @Override\n      public FieldsEnum iterator() {\n        final InstantiatedTerm[] orderedTerms = getIndex().getOrderedTerms();\n\n        return new FieldsEnum() {\n          int upto = -1;\n          String currentField;\n\n          @Override\n          public String next() {\n            do {\n              upto++;\n              if (upto >= orderedTerms.length) {\n                return null;\n              }\n            } while(orderedTerms[upto].field() == currentField);\n            \n            currentField = orderedTerms[upto].field();\n            return currentField;\n          }\n\n          @Override\n          public TermsEnum terms() {\n            return new InstantiatedTermsEnum(orderedTerms, upto, currentField);\n          }\n        };\n      }\n\n      @Override\n      public Terms terms(final String field) {\n        final InstantiatedTerm[] orderedTerms = getIndex().getOrderedTerms();\n        int i = Arrays.binarySearch(orderedTerms, new Term(field), InstantiatedTerm.termComparator);\n        if (i < 0) {\n          i = -i - 1;\n        }\n        if (i >= orderedTerms.length || !orderedTerms[i].field().equals(field)) {\n          // field does not exist\n          return null;\n        }\n        final int startLoc = i;\n\n        return new Terms() {\n          @Override \n          public TermsEnum iterator() {\n            return new InstantiatedTermsEnum(orderedTerms, startLoc, field);\n          }\n\n          @Override\n          public Comparator<BytesRef> getComparator() {\n            return BytesRef.getUTF8SortedAsUTF16Comparator();\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["72b952811367f6e21added5f7306dc6bf2aa1e9c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"28427ef110c4c5bf5b4057731b83110bd1e13724","date":1276701452,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/contrib/instantiated/src/java/org/apache/lucene/store/instantiated/InstantiatedIndexReader#fields().mjava","pathOld":"lucene/contrib/instantiated/src/java/org/apache/lucene/store/instantiated/InstantiatedIndexReader#fields().mjava","sourceNew":"  @Override\n  public Fields fields() {\n    if (getIndex().getOrderedTerms().length == 0) {\n      return null;\n    }\n\n    return new Fields() {\n      @Override\n      public FieldsEnum iterator() {\n        final InstantiatedTerm[] orderedTerms = getIndex().getOrderedTerms();\n\n        return new FieldsEnum() {\n          int upto = -1;\n          String currentField;\n\n          @Override\n          public String next() {\n            do {\n              upto++;\n              if (upto >= orderedTerms.length) {\n                return null;\n              }\n            } while(orderedTerms[upto].field() == currentField);\n            \n            currentField = orderedTerms[upto].field();\n            return currentField;\n          }\n\n          @Override\n          public TermsEnum terms() {\n            return new InstantiatedTermsEnum(orderedTerms, upto, currentField);\n          }\n        };\n      }\n\n      @Override\n      public Terms terms(final String field) {\n        final InstantiatedTerm[] orderedTerms = getIndex().getOrderedTerms();\n        int i = Arrays.binarySearch(orderedTerms, new Term(field), InstantiatedTerm.termComparator);\n        if (i < 0) {\n          i = -i - 1;\n        }\n        if (i >= orderedTerms.length || !orderedTerms[i].field().equals(field)) {\n          // field does not exist\n          return null;\n        }\n        final int startLoc = i;\n\n        return new Terms() {\n          @Override \n          public TermsEnum iterator() {\n            return new InstantiatedTermsEnum(orderedTerms, startLoc, field);\n          }\n\n          @Override\n          public Comparator<BytesRef> getComparator() {\n            return BytesRef.getUTF8SortedAsUTF16Comparator();\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Fields fields() {\n\n    return new Fields() {\n      @Override\n      public FieldsEnum iterator() {\n        final InstantiatedTerm[] orderedTerms = getIndex().getOrderedTerms();\n\n        return new FieldsEnum() {\n          int upto = -1;\n          String currentField;\n\n          @Override\n          public String next() {\n            do {\n              upto++;\n              if (upto >= orderedTerms.length) {\n                return null;\n              }\n            } while(orderedTerms[upto].field() == currentField);\n            \n            currentField = orderedTerms[upto].field();\n            return currentField;\n          }\n\n          @Override\n          public TermsEnum terms() {\n            return new InstantiatedTermsEnum(orderedTerms, upto, currentField);\n          }\n        };\n      }\n\n      @Override\n      public Terms terms(final String field) {\n        final InstantiatedTerm[] orderedTerms = getIndex().getOrderedTerms();\n        int i = Arrays.binarySearch(orderedTerms, new Term(field), InstantiatedTerm.termComparator);\n        if (i < 0) {\n          i = -i - 1;\n        }\n        if (i >= orderedTerms.length || !orderedTerms[i].field().equals(field)) {\n          // field does not exist\n          return null;\n        }\n        final int startLoc = i;\n\n        return new Terms() {\n          @Override \n          public TermsEnum iterator() {\n            return new InstantiatedTermsEnum(orderedTerms, startLoc, field);\n          }\n\n          @Override\n          public Comparator<BytesRef> getComparator() {\n            return BytesRef.getUTF8SortedAsUTF16Comparator();\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"08932c793647a36953d1816b1060121f48820d3f","date":1277386540,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/contrib/instantiated/src/java/org/apache/lucene/store/instantiated/InstantiatedIndexReader#fields().mjava","pathOld":"lucene/contrib/instantiated/src/java/org/apache/lucene/store/instantiated/InstantiatedIndexReader#fields().mjava","sourceNew":"  @Override\n  public Fields fields() {\n    if (getIndex().getOrderedTerms().length == 0) {\n      return null;\n    }\n\n    return new Fields() {\n      @Override\n      public FieldsEnum iterator() {\n        final InstantiatedTerm[] orderedTerms = getIndex().getOrderedTerms();\n\n        return new FieldsEnum() {\n          int upto = -1;\n          String currentField;\n\n          @Override\n          public String next() {\n            do {\n              upto++;\n              if (upto >= orderedTerms.length) {\n                return null;\n              }\n            } while(orderedTerms[upto].field() == currentField);\n            \n            currentField = orderedTerms[upto].field();\n            return currentField;\n          }\n\n          @Override\n          public TermsEnum terms() {\n            return new InstantiatedTermsEnum(orderedTerms, upto, currentField);\n          }\n        };\n      }\n\n      @Override\n      public Terms terms(final String field) {\n        final InstantiatedTerm[] orderedTerms = getIndex().getOrderedTerms();\n        int i = Arrays.binarySearch(orderedTerms, new Term(field), InstantiatedTerm.termComparator);\n        if (i < 0) {\n          i = -i - 1;\n        }\n        if (i >= orderedTerms.length || !orderedTerms[i].field().equals(field)) {\n          // field does not exist\n          return null;\n        }\n        final int startLoc = i;\n\n        return new Terms() {\n          @Override \n          public TermsEnum iterator() {\n            return new InstantiatedTermsEnum(orderedTerms, startLoc, field);\n          }\n\n          @Override\n          public Comparator<BytesRef> getComparator() {\n            return BytesRef.getUTF8SortedAsUnicodeComparator();\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Fields fields() {\n    if (getIndex().getOrderedTerms().length == 0) {\n      return null;\n    }\n\n    return new Fields() {\n      @Override\n      public FieldsEnum iterator() {\n        final InstantiatedTerm[] orderedTerms = getIndex().getOrderedTerms();\n\n        return new FieldsEnum() {\n          int upto = -1;\n          String currentField;\n\n          @Override\n          public String next() {\n            do {\n              upto++;\n              if (upto >= orderedTerms.length) {\n                return null;\n              }\n            } while(orderedTerms[upto].field() == currentField);\n            \n            currentField = orderedTerms[upto].field();\n            return currentField;\n          }\n\n          @Override\n          public TermsEnum terms() {\n            return new InstantiatedTermsEnum(orderedTerms, upto, currentField);\n          }\n        };\n      }\n\n      @Override\n      public Terms terms(final String field) {\n        final InstantiatedTerm[] orderedTerms = getIndex().getOrderedTerms();\n        int i = Arrays.binarySearch(orderedTerms, new Term(field), InstantiatedTerm.termComparator);\n        if (i < 0) {\n          i = -i - 1;\n        }\n        if (i >= orderedTerms.length || !orderedTerms[i].field().equals(field)) {\n          // field does not exist\n          return null;\n        }\n        final int startLoc = i;\n\n        return new Terms() {\n          @Override \n          public TermsEnum iterator() {\n            return new InstantiatedTermsEnum(orderedTerms, startLoc, field);\n          }\n\n          @Override\n          public Comparator<BytesRef> getComparator() {\n            return BytesRef.getUTF8SortedAsUTF16Comparator();\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/contrib/instantiated/src/java/org/apache/lucene/store/instantiated/InstantiatedIndexReader#fields().mjava","pathOld":"lucene/contrib/instantiated/src/java/org/apache/lucene/store/instantiated/InstantiatedIndexReader#fields().mjava","sourceNew":"  @Override\n  public Fields fields() {\n    if (getIndex().getOrderedTerms().length == 0) {\n      return null;\n    }\n\n    return new Fields() {\n      @Override\n      public FieldsEnum iterator() {\n        final InstantiatedTerm[] orderedTerms = getIndex().getOrderedTerms();\n\n        return new FieldsEnum() {\n          int upto = -1;\n          String currentField;\n\n          @Override\n          public String next() {\n            do {\n              upto++;\n              if (upto >= orderedTerms.length) {\n                return null;\n              }\n            } while(orderedTerms[upto].field() == currentField);\n            \n            currentField = orderedTerms[upto].field();\n            return currentField;\n          }\n\n          @Override\n          public TermsEnum terms() {\n            return new InstantiatedTermsEnum(orderedTerms, upto, currentField);\n          }\n        };\n      }\n\n      @Override\n      public Terms terms(final String field) {\n        final InstantiatedTerm[] orderedTerms = getIndex().getOrderedTerms();\n        int i = Arrays.binarySearch(orderedTerms, new Term(field), InstantiatedTerm.termComparator);\n        if (i < 0) {\n          i = -i - 1;\n        }\n        if (i >= orderedTerms.length || !orderedTerms[i].field().equals(field)) {\n          // field does not exist\n          return null;\n        }\n        final int startLoc = i;\n\n        return new Terms() {\n          @Override \n          public TermsEnum iterator() {\n            return new InstantiatedTermsEnum(orderedTerms, startLoc, field);\n          }\n\n          @Override\n          public Comparator<BytesRef> getComparator() {\n            return BytesRef.getUTF8SortedAsUnicodeComparator();\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Fields fields() {\n\n    return new Fields() {\n      @Override\n      public FieldsEnum iterator() {\n        final InstantiatedTerm[] orderedTerms = getIndex().getOrderedTerms();\n\n        return new FieldsEnum() {\n          int upto = -1;\n          String currentField;\n\n          @Override\n          public String next() {\n            do {\n              upto++;\n              if (upto >= orderedTerms.length) {\n                return null;\n              }\n            } while(orderedTerms[upto].field() == currentField);\n            \n            currentField = orderedTerms[upto].field();\n            return currentField;\n          }\n\n          @Override\n          public TermsEnum terms() {\n            return new InstantiatedTermsEnum(orderedTerms, upto, currentField);\n          }\n        };\n      }\n\n      @Override\n      public Terms terms(final String field) {\n        final InstantiatedTerm[] orderedTerms = getIndex().getOrderedTerms();\n        int i = Arrays.binarySearch(orderedTerms, new Term(field), InstantiatedTerm.termComparator);\n        if (i < 0) {\n          i = -i - 1;\n        }\n        if (i >= orderedTerms.length || !orderedTerms[i].field().equals(field)) {\n          // field does not exist\n          return null;\n        }\n        final int startLoc = i;\n\n        return new Terms() {\n          @Override \n          public TermsEnum iterator() {\n            return new InstantiatedTermsEnum(orderedTerms, startLoc, field);\n          }\n\n          @Override\n          public Comparator<BytesRef> getComparator() {\n            return BytesRef.getUTF8SortedAsUTF16Comparator();\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e28c49f1fb6215a550fdadcf3805aa629b63ec0","date":1288081775,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/contrib/instantiated/src/java/org/apache/lucene/store/instantiated/InstantiatedIndexReader#fields().mjava","pathOld":"lucene/contrib/instantiated/src/java/org/apache/lucene/store/instantiated/InstantiatedIndexReader#fields().mjava","sourceNew":"  @Override\n  public Fields fields() {\n    if (getIndex().getOrderedTerms().length == 0) {\n      return null;\n    }\n\n    return new Fields() {\n      @Override\n      public FieldsEnum iterator() {\n        final InstantiatedTerm[] orderedTerms = getIndex().getOrderedTerms();\n\n        return new FieldsEnum() {\n          int upto = -1;\n          String currentField;\n\n          @Override\n          public String next() {\n            do {\n              upto++;\n              if (upto >= orderedTerms.length) {\n                return null;\n              }\n            } while(orderedTerms[upto].field() == currentField);\n            \n            currentField = orderedTerms[upto].field();\n            return currentField;\n          }\n\n          @Override\n          public TermsEnum terms() {\n            return new InstantiatedTermsEnum(orderedTerms, upto, currentField);\n          }\n\n          @Override\n          public DocValues docValues() throws IOException {\n            return null;\n          }\n        };\n      }\n\n      @Override\n      public Terms terms(final String field) {\n        final InstantiatedTerm[] orderedTerms = getIndex().getOrderedTerms();\n        int i = Arrays.binarySearch(orderedTerms, new Term(field), InstantiatedTerm.termComparator);\n        if (i < 0) {\n          i = -i - 1;\n        }\n        if (i >= orderedTerms.length || !orderedTerms[i].field().equals(field)) {\n          // field does not exist\n          return null;\n        }\n        final int startLoc = i;\n\n        return new Terms() {\n          @Override \n          public TermsEnum iterator() {\n            return new InstantiatedTermsEnum(orderedTerms, startLoc, field);\n          }\n\n          @Override\n          public Comparator<BytesRef> getComparator() {\n            return BytesRef.getUTF8SortedAsUnicodeComparator();\n          }\n        };\n      }\n\n      @Override\n      public DocValues docValues(String field) throws IOException {\n        return null;\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Fields fields() {\n    if (getIndex().getOrderedTerms().length == 0) {\n      return null;\n    }\n\n    return new Fields() {\n      @Override\n      public FieldsEnum iterator() {\n        final InstantiatedTerm[] orderedTerms = getIndex().getOrderedTerms();\n\n        return new FieldsEnum() {\n          int upto = -1;\n          String currentField;\n\n          @Override\n          public String next() {\n            do {\n              upto++;\n              if (upto >= orderedTerms.length) {\n                return null;\n              }\n            } while(orderedTerms[upto].field() == currentField);\n            \n            currentField = orderedTerms[upto].field();\n            return currentField;\n          }\n\n          @Override\n          public TermsEnum terms() {\n            return new InstantiatedTermsEnum(orderedTerms, upto, currentField);\n          }\n        };\n      }\n\n      @Override\n      public Terms terms(final String field) {\n        final InstantiatedTerm[] orderedTerms = getIndex().getOrderedTerms();\n        int i = Arrays.binarySearch(orderedTerms, new Term(field), InstantiatedTerm.termComparator);\n        if (i < 0) {\n          i = -i - 1;\n        }\n        if (i >= orderedTerms.length || !orderedTerms[i].field().equals(field)) {\n          // field does not exist\n          return null;\n        }\n        final int startLoc = i;\n\n        return new Terms() {\n          @Override \n          public TermsEnum iterator() {\n            return new InstantiatedTermsEnum(orderedTerms, startLoc, field);\n          }\n\n          @Override\n          public Comparator<BytesRef> getComparator() {\n            return BytesRef.getUTF8SortedAsUnicodeComparator();\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6ecd298fdc085e7eba27afa7fae58df1ba1a2808","date":1295102557,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/contrib/instantiated/src/java/org/apache/lucene/store/instantiated/InstantiatedIndexReader#fields().mjava","pathOld":"lucene/contrib/instantiated/src/java/org/apache/lucene/store/instantiated/InstantiatedIndexReader#fields().mjava","sourceNew":"  @Override\n  public Fields fields() {\n    if (getIndex().getOrderedTerms().length == 0) {\n      return null;\n    }\n\n    return new Fields() {\n      @Override\n      public FieldsEnum iterator() {\n        final InstantiatedTerm[] orderedTerms = getIndex().getOrderedTerms();\n\n        return new FieldsEnum() {\n          int upto = -1;\n          String currentField;\n\n          @Override\n          public String next() {\n            do {\n              upto++;\n              if (upto >= orderedTerms.length) {\n                return null;\n              }\n            } while(orderedTerms[upto].field() == currentField);\n            \n            currentField = orderedTerms[upto].field();\n            return currentField;\n          }\n\n          @Override\n          public TermsEnum terms() {\n            return new InstantiatedTermsEnum(orderedTerms, upto, currentField);\n          }\n        };\n      }\n\n      @Override\n      public Terms terms(final String field) {\n        final InstantiatedTerm[] orderedTerms = getIndex().getOrderedTerms();\n        int i = Arrays.binarySearch(orderedTerms, new Term(field), InstantiatedTerm.termComparator);\n        if (i < 0) {\n          i = -i - 1;\n        }\n        if (i >= orderedTerms.length || orderedTerms[i].field() != field) {\n          // field does not exist\n          return null;\n        }\n        final int startLoc = i;\n\n        // TODO: heavy to do this here; would be better to\n        // do it up front & cache\n        long sum = 0;\n        int upto = i;\n        while(upto < orderedTerms.length && orderedTerms[i].field() == field) {\n          sum += orderedTerms[i].getTotalTermFreq();\n          upto++;\n        }\n        final long sumTotalTermFreq = sum;\n\n        return new Terms() {\n          @Override \n          public TermsEnum iterator() {\n            return new InstantiatedTermsEnum(orderedTerms, startLoc, field);\n          }\n\n          @Override\n          public long getSumTotalTermFreq() {\n            return sumTotalTermFreq;\n          }\n\n          @Override\n          public Comparator<BytesRef> getComparator() {\n            return BytesRef.getUTF8SortedAsUnicodeComparator();\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Fields fields() {\n    if (getIndex().getOrderedTerms().length == 0) {\n      return null;\n    }\n\n    return new Fields() {\n      @Override\n      public FieldsEnum iterator() {\n        final InstantiatedTerm[] orderedTerms = getIndex().getOrderedTerms();\n\n        return new FieldsEnum() {\n          int upto = -1;\n          String currentField;\n\n          @Override\n          public String next() {\n            do {\n              upto++;\n              if (upto >= orderedTerms.length) {\n                return null;\n              }\n            } while(orderedTerms[upto].field() == currentField);\n            \n            currentField = orderedTerms[upto].field();\n            return currentField;\n          }\n\n          @Override\n          public TermsEnum terms() {\n            return new InstantiatedTermsEnum(orderedTerms, upto, currentField);\n          }\n        };\n      }\n\n      @Override\n      public Terms terms(final String field) {\n        final InstantiatedTerm[] orderedTerms = getIndex().getOrderedTerms();\n        int i = Arrays.binarySearch(orderedTerms, new Term(field), InstantiatedTerm.termComparator);\n        if (i < 0) {\n          i = -i - 1;\n        }\n        if (i >= orderedTerms.length || !orderedTerms[i].field().equals(field)) {\n          // field does not exist\n          return null;\n        }\n        final int startLoc = i;\n\n        return new Terms() {\n          @Override \n          public TermsEnum iterator() {\n            return new InstantiatedTermsEnum(orderedTerms, startLoc, field);\n          }\n\n          @Override\n          public Comparator<BytesRef> getComparator() {\n            return BytesRef.getUTF8SortedAsUnicodeComparator();\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":["72b952811367f6e21added5f7306dc6bf2aa1e9c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"16843358872ed92ba92888ab99df297550b9a36a","date":1295144724,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/contrib/instantiated/src/java/org/apache/lucene/store/instantiated/InstantiatedIndexReader#fields().mjava","pathOld":"lucene/contrib/instantiated/src/java/org/apache/lucene/store/instantiated/InstantiatedIndexReader#fields().mjava","sourceNew":"  @Override\n  public Fields fields() {\n    if (getIndex().getOrderedTerms().length == 0) {\n      return null;\n    }\n\n    return new Fields() {\n      @Override\n      public FieldsEnum iterator() {\n        final InstantiatedTerm[] orderedTerms = getIndex().getOrderedTerms();\n\n        return new FieldsEnum() {\n          int upto = -1;\n          String currentField;\n\n          @Override\n          public String next() {\n            do {\n              upto++;\n              if (upto >= orderedTerms.length) {\n                return null;\n              }\n            } while(orderedTerms[upto].field() == currentField);\n            \n            currentField = orderedTerms[upto].field();\n            return currentField;\n          }\n\n          @Override\n          public TermsEnum terms() {\n            return new InstantiatedTermsEnum(orderedTerms, upto, currentField);\n          }\n        };\n      }\n\n      @Override\n      public Terms terms(final String field) {\n        final InstantiatedTerm[] orderedTerms = getIndex().getOrderedTerms();\n        int i = Arrays.binarySearch(orderedTerms, new Term(field), InstantiatedTerm.termComparator);\n        if (i < 0) {\n          i = -i - 1;\n        }\n        if (i >= orderedTerms.length || orderedTerms[i].field() != field) {\n          // field does not exist\n          return null;\n        }\n        final int startLoc = i;\n\n        // TODO: heavy to do this here; would be better to\n        // do it up front & cache\n        long sum = 0;\n        int upto = i;\n        while(upto < orderedTerms.length && orderedTerms[i].field() == field) {\n          sum += orderedTerms[i].getTotalTermFreq();\n          upto++;\n        }\n        final long sumTotalTermFreq = sum;\n\n        return new Terms() {\n          @Override \n          public TermsEnum iterator() {\n            return new InstantiatedTermsEnum(orderedTerms, startLoc, field);\n          }\n\n          @Override\n          public long getSumTotalTermFreq() {\n            return sumTotalTermFreq;\n          }\n\n          @Override\n          public Comparator<BytesRef> getComparator() {\n            return BytesRef.getUTF8SortedAsUnicodeComparator();\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Fields fields() {\n    if (getIndex().getOrderedTerms().length == 0) {\n      return null;\n    }\n\n    return new Fields() {\n      @Override\n      public FieldsEnum iterator() {\n        final InstantiatedTerm[] orderedTerms = getIndex().getOrderedTerms();\n\n        return new FieldsEnum() {\n          int upto = -1;\n          String currentField;\n\n          @Override\n          public String next() {\n            do {\n              upto++;\n              if (upto >= orderedTerms.length) {\n                return null;\n              }\n            } while(orderedTerms[upto].field() == currentField);\n            \n            currentField = orderedTerms[upto].field();\n            return currentField;\n          }\n\n          @Override\n          public TermsEnum terms() {\n            return new InstantiatedTermsEnum(orderedTerms, upto, currentField);\n          }\n        };\n      }\n\n      @Override\n      public Terms terms(final String field) {\n        final InstantiatedTerm[] orderedTerms = getIndex().getOrderedTerms();\n        int i = Arrays.binarySearch(orderedTerms, new Term(field), InstantiatedTerm.termComparator);\n        if (i < 0) {\n          i = -i - 1;\n        }\n        if (i >= orderedTerms.length || !orderedTerms[i].field().equals(field)) {\n          // field does not exist\n          return null;\n        }\n        final int startLoc = i;\n\n        return new Terms() {\n          @Override \n          public TermsEnum iterator() {\n            return new InstantiatedTermsEnum(orderedTerms, startLoc, field);\n          }\n\n          @Override\n          public Comparator<BytesRef> getComparator() {\n            return BytesRef.getUTF8SortedAsUnicodeComparator();\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/instantiated/src/java/org/apache/lucene/store/instantiated/InstantiatedIndexReader#fields().mjava","pathOld":"lucene/contrib/instantiated/src/java/org/apache/lucene/store/instantiated/InstantiatedIndexReader#fields().mjava","sourceNew":"  @Override\n  public Fields fields() {\n    if (getIndex().getOrderedTerms().length == 0) {\n      return null;\n    }\n\n    return new Fields() {\n      @Override\n      public FieldsEnum iterator() {\n        final InstantiatedTerm[] orderedTerms = getIndex().getOrderedTerms();\n\n        return new FieldsEnum() {\n          int upto = -1;\n          String currentField;\n\n          @Override\n          public String next() {\n            do {\n              upto++;\n              if (upto >= orderedTerms.length) {\n                return null;\n              }\n            } while(orderedTerms[upto].field() == currentField);\n            \n            currentField = orderedTerms[upto].field();\n            return currentField;\n          }\n\n          @Override\n          public TermsEnum terms() {\n            return new InstantiatedTermsEnum(orderedTerms, upto, currentField);\n          }\n\n          @Override\n          public DocValues docValues() throws IOException {\n            return null;\n          }\n        };\n      }\n\n      @Override\n      public Terms terms(final String field) {\n        final InstantiatedTerm[] orderedTerms = getIndex().getOrderedTerms();\n        int i = Arrays.binarySearch(orderedTerms, new Term(field), InstantiatedTerm.termComparator);\n        if (i < 0) {\n          i = -i - 1;\n        }\n        if (i >= orderedTerms.length || orderedTerms[i].field() != field) {\n          // field does not exist\n          return null;\n        }\n        final int startLoc = i;\n\n        // TODO: heavy to do this here; would be better to\n        // do it up front & cache\n        long sum = 0;\n        int upto = i;\n        while(upto < orderedTerms.length && orderedTerms[i].field() == field) {\n          sum += orderedTerms[i].getTotalTermFreq();\n          upto++;\n        }\n        final long sumTotalTermFreq = sum;\n\n        return new Terms() {\n          @Override \n          public TermsEnum iterator() {\n            return new InstantiatedTermsEnum(orderedTerms, startLoc, field);\n          }\n\n          @Override\n          public long getSumTotalTermFreq() {\n            return sumTotalTermFreq;\n          }\n\n          @Override\n          public Comparator<BytesRef> getComparator() {\n            return BytesRef.getUTF8SortedAsUnicodeComparator();\n          }\n        };\n      }\n\n      @Override\n      public DocValues docValues(String field) throws IOException {\n        return null;\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Fields fields() {\n    if (getIndex().getOrderedTerms().length == 0) {\n      return null;\n    }\n\n    return new Fields() {\n      @Override\n      public FieldsEnum iterator() {\n        final InstantiatedTerm[] orderedTerms = getIndex().getOrderedTerms();\n\n        return new FieldsEnum() {\n          int upto = -1;\n          String currentField;\n\n          @Override\n          public String next() {\n            do {\n              upto++;\n              if (upto >= orderedTerms.length) {\n                return null;\n              }\n            } while(orderedTerms[upto].field() == currentField);\n            \n            currentField = orderedTerms[upto].field();\n            return currentField;\n          }\n\n          @Override\n          public TermsEnum terms() {\n            return new InstantiatedTermsEnum(orderedTerms, upto, currentField);\n          }\n\n          @Override\n          public DocValues docValues() throws IOException {\n            return null;\n          }\n        };\n      }\n\n      @Override\n      public Terms terms(final String field) {\n        final InstantiatedTerm[] orderedTerms = getIndex().getOrderedTerms();\n        int i = Arrays.binarySearch(orderedTerms, new Term(field), InstantiatedTerm.termComparator);\n        if (i < 0) {\n          i = -i - 1;\n        }\n        if (i >= orderedTerms.length || !orderedTerms[i].field().equals(field)) {\n          // field does not exist\n          return null;\n        }\n        final int startLoc = i;\n\n        return new Terms() {\n          @Override \n          public TermsEnum iterator() {\n            return new InstantiatedTermsEnum(orderedTerms, startLoc, field);\n          }\n\n          @Override\n          public Comparator<BytesRef> getComparator() {\n            return BytesRef.getUTF8SortedAsUnicodeComparator();\n          }\n        };\n      }\n\n      @Override\n      public DocValues docValues(String field) throws IOException {\n        return null;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/instantiated/src/java/org/apache/lucene/store/instantiated/InstantiatedIndexReader#fields().mjava","pathOld":"lucene/contrib/instantiated/src/java/org/apache/lucene/store/instantiated/InstantiatedIndexReader#fields().mjava","sourceNew":"  @Override\n  public Fields fields() {\n    if (getIndex().getOrderedTerms().length == 0) {\n      return null;\n    }\n\n    return new Fields() {\n      @Override\n      public FieldsEnum iterator() {\n        final InstantiatedTerm[] orderedTerms = getIndex().getOrderedTerms();\n\n        return new FieldsEnum() {\n          int upto = -1;\n          String currentField;\n\n          @Override\n          public String next() {\n            do {\n              upto++;\n              if (upto >= orderedTerms.length) {\n                return null;\n              }\n            } while(orderedTerms[upto].field() == currentField);\n            \n            currentField = orderedTerms[upto].field();\n            return currentField;\n          }\n\n          @Override\n          public TermsEnum terms() {\n            return new InstantiatedTermsEnum(orderedTerms, upto, currentField);\n          }\n        };\n      }\n\n      @Override\n      public Terms terms(final String field) {\n        final InstantiatedTerm[] orderedTerms = getIndex().getOrderedTerms();\n        int i = Arrays.binarySearch(orderedTerms, new Term(field), InstantiatedTerm.termComparator);\n        if (i < 0) {\n          i = -i - 1;\n        }\n        if (i >= orderedTerms.length || orderedTerms[i].field() != field) {\n          // field does not exist\n          return null;\n        }\n        final int startLoc = i;\n\n        // TODO: heavy to do this here; would be better to\n        // do it up front & cache\n        long sum = 0;\n        int upto = i;\n        while(upto < orderedTerms.length && orderedTerms[i].field() == field) {\n          sum += orderedTerms[i].getTotalTermFreq();\n          upto++;\n        }\n        final long sumTotalTermFreq = sum;\n\n        return new Terms() {\n          @Override \n          public TermsEnum iterator() {\n            return new InstantiatedTermsEnum(orderedTerms, startLoc, field);\n          }\n\n          @Override\n          public long getSumTotalTermFreq() {\n            return sumTotalTermFreq;\n          }\n\n          @Override\n          public Comparator<BytesRef> getComparator() {\n            return BytesRef.getUTF8SortedAsUnicodeComparator();\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Fields fields() {\n    if (getIndex().getOrderedTerms().length == 0) {\n      return null;\n    }\n\n    return new Fields() {\n      @Override\n      public FieldsEnum iterator() {\n        final InstantiatedTerm[] orderedTerms = getIndex().getOrderedTerms();\n\n        return new FieldsEnum() {\n          int upto = -1;\n          String currentField;\n\n          @Override\n          public String next() {\n            do {\n              upto++;\n              if (upto >= orderedTerms.length) {\n                return null;\n              }\n            } while(orderedTerms[upto].field() == currentField);\n            \n            currentField = orderedTerms[upto].field();\n            return currentField;\n          }\n\n          @Override\n          public TermsEnum terms() {\n            return new InstantiatedTermsEnum(orderedTerms, upto, currentField);\n          }\n\n          @Override\n          public DocValues docValues() throws IOException {\n            return null;\n          }\n        };\n      }\n\n      @Override\n      public Terms terms(final String field) {\n        final InstantiatedTerm[] orderedTerms = getIndex().getOrderedTerms();\n        int i = Arrays.binarySearch(orderedTerms, new Term(field), InstantiatedTerm.termComparator);\n        if (i < 0) {\n          i = -i - 1;\n        }\n        if (i >= orderedTerms.length || orderedTerms[i].field() != field) {\n          // field does not exist\n          return null;\n        }\n        final int startLoc = i;\n\n        // TODO: heavy to do this here; would be better to\n        // do it up front & cache\n        long sum = 0;\n        int upto = i;\n        while(upto < orderedTerms.length && orderedTerms[i].field() == field) {\n          sum += orderedTerms[i].getTotalTermFreq();\n          upto++;\n        }\n        final long sumTotalTermFreq = sum;\n\n        return new Terms() {\n          @Override \n          public TermsEnum iterator() {\n            return new InstantiatedTermsEnum(orderedTerms, startLoc, field);\n          }\n\n          @Override\n          public long getSumTotalTermFreq() {\n            return sumTotalTermFreq;\n          }\n\n          @Override\n          public Comparator<BytesRef> getComparator() {\n            return BytesRef.getUTF8SortedAsUnicodeComparator();\n          }\n        };\n      }\n\n      @Override\n      public DocValues docValues(String field) throws IOException {\n        return null;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fafef7c83fe8e0b3ca9298d5d75d6b943dc28153","date":1308670974,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/contrib/instantiated/src/java/org/apache/lucene/store/instantiated/InstantiatedIndexReader#fields().mjava","pathOld":"lucene/contrib/instantiated/src/java/org/apache/lucene/store/instantiated/InstantiatedIndexReader#fields().mjava","sourceNew":"  @Override\n  public Fields fields() {\n    if (getIndex().getOrderedTerms().length == 0) {\n      return null;\n    }\n\n    return new Fields() {\n      @Override\n      public FieldsEnum iterator() {\n        final InstantiatedTerm[] orderedTerms = getIndex().getOrderedTerms();\n\n        return new FieldsEnum() {\n          int upto = -1;\n          String currentField;\n\n          @Override\n          public String next() {\n            do {\n              upto++;\n              if (upto >= orderedTerms.length) {\n                return null;\n              }\n            } while(orderedTerms[upto].field() == currentField);\n            \n            currentField = orderedTerms[upto].field();\n            return currentField;\n          }\n\n          @Override\n          public TermsEnum terms() {\n            return new InstantiatedTermsEnum(orderedTerms, upto, currentField);\n          }\n        };\n      }\n\n      @Override\n      public Terms terms(final String field) {\n        final InstantiatedTerm[] orderedTerms = getIndex().getOrderedTerms();\n        int i = Arrays.binarySearch(orderedTerms, new Term(field), InstantiatedTerm.termComparator);\n        if (i < 0) {\n          i = -i - 1;\n        }\n        if (i >= orderedTerms.length || !orderedTerms[i].field().equals(field)) {\n          // field does not exist\n          return null;\n        }\n        final int startLoc = i;\n\n        // TODO: heavy to do this here; would be better to\n        // do it up front & cache\n        long sum = 0;\n        int upto = i;\n        while(upto < orderedTerms.length && orderedTerms[i].field() == field) {\n          sum += orderedTerms[i].getTotalTermFreq();\n          upto++;\n        }\n        final long sumTotalTermFreq = sum;\n\n        return new Terms() {\n          @Override \n          public TermsEnum iterator() {\n            return new InstantiatedTermsEnum(orderedTerms, startLoc, field);\n          }\n\n          @Override\n          public long getSumTotalTermFreq() {\n            return sumTotalTermFreq;\n          }\n\n          @Override\n          public Comparator<BytesRef> getComparator() {\n            return BytesRef.getUTF8SortedAsUnicodeComparator();\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Fields fields() {\n    if (getIndex().getOrderedTerms().length == 0) {\n      return null;\n    }\n\n    return new Fields() {\n      @Override\n      public FieldsEnum iterator() {\n        final InstantiatedTerm[] orderedTerms = getIndex().getOrderedTerms();\n\n        return new FieldsEnum() {\n          int upto = -1;\n          String currentField;\n\n          @Override\n          public String next() {\n            do {\n              upto++;\n              if (upto >= orderedTerms.length) {\n                return null;\n              }\n            } while(orderedTerms[upto].field() == currentField);\n            \n            currentField = orderedTerms[upto].field();\n            return currentField;\n          }\n\n          @Override\n          public TermsEnum terms() {\n            return new InstantiatedTermsEnum(orderedTerms, upto, currentField);\n          }\n        };\n      }\n\n      @Override\n      public Terms terms(final String field) {\n        final InstantiatedTerm[] orderedTerms = getIndex().getOrderedTerms();\n        int i = Arrays.binarySearch(orderedTerms, new Term(field), InstantiatedTerm.termComparator);\n        if (i < 0) {\n          i = -i - 1;\n        }\n        if (i >= orderedTerms.length || orderedTerms[i].field() != field) {\n          // field does not exist\n          return null;\n        }\n        final int startLoc = i;\n\n        // TODO: heavy to do this here; would be better to\n        // do it up front & cache\n        long sum = 0;\n        int upto = i;\n        while(upto < orderedTerms.length && orderedTerms[i].field() == field) {\n          sum += orderedTerms[i].getTotalTermFreq();\n          upto++;\n        }\n        final long sumTotalTermFreq = sum;\n\n        return new Terms() {\n          @Override \n          public TermsEnum iterator() {\n            return new InstantiatedTermsEnum(orderedTerms, startLoc, field);\n          }\n\n          @Override\n          public long getSumTotalTermFreq() {\n            return sumTotalTermFreq;\n          }\n\n          @Override\n          public Comparator<BytesRef> getComparator() {\n            return BytesRef.getUTF8SortedAsUnicodeComparator();\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2553b00f699380c64959ccb27991289aae87be2e","date":1309290151,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/contrib/instantiated/src/java/org/apache/lucene/store/instantiated/InstantiatedIndexReader#fields().mjava","pathOld":"lucene/contrib/instantiated/src/java/org/apache/lucene/store/instantiated/InstantiatedIndexReader#fields().mjava","sourceNew":"  @Override\n  public Fields fields() {\n    if (getIndex().getOrderedTerms().length == 0) {\n      return null;\n    }\n\n    return new Fields() {\n      @Override\n      public FieldsEnum iterator() {\n        final InstantiatedTerm[] orderedTerms = getIndex().getOrderedTerms();\n\n        return new FieldsEnum() {\n          int upto = -1;\n          String currentField;\n\n          @Override\n          public String next() {\n            do {\n              upto++;\n              if (upto >= orderedTerms.length) {\n                return null;\n              }\n            } while(orderedTerms[upto].field() == currentField);\n            \n            currentField = orderedTerms[upto].field();\n            return currentField;\n          }\n\n          @Override\n          public TermsEnum terms() {\n            return new InstantiatedTermsEnum(orderedTerms, upto, currentField);\n          }\n        };\n      }\n\n      @Override\n      public Terms terms(final String field) {\n        final InstantiatedTerm[] orderedTerms = getIndex().getOrderedTerms();\n        int i = Arrays.binarySearch(orderedTerms, new Term(field), InstantiatedTerm.termComparator);\n        if (i < 0) {\n          i = -i - 1;\n        }\n        if (i >= orderedTerms.length || !orderedTerms[i].field().equals(field)) {\n          // field does not exist\n          return null;\n        }\n        final int startLoc = i;\n\n        // TODO: heavy to do this here; would be better to\n        // do it up front & cache\n        long sum = 0;\n        int upto = i;\n        while(upto < orderedTerms.length && orderedTerms[i].field() == field) {\n          sum += orderedTerms[i].getTotalTermFreq();\n          upto++;\n        }\n        final long sumTotalTermFreq = sum;\n\n        return new Terms() {\n          @Override \n          public TermsEnum iterator() {\n            return new InstantiatedTermsEnum(orderedTerms, startLoc, field);\n          }\n\n          @Override\n          public long getSumTotalTermFreq() {\n            return sumTotalTermFreq;\n          }\n\n          @Override\n          public Comparator<BytesRef> getComparator() {\n            return BytesRef.getUTF8SortedAsUnicodeComparator();\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Fields fields() {\n    if (getIndex().getOrderedTerms().length == 0) {\n      return null;\n    }\n\n    return new Fields() {\n      @Override\n      public FieldsEnum iterator() {\n        final InstantiatedTerm[] orderedTerms = getIndex().getOrderedTerms();\n\n        return new FieldsEnum() {\n          int upto = -1;\n          String currentField;\n\n          @Override\n          public String next() {\n            do {\n              upto++;\n              if (upto >= orderedTerms.length) {\n                return null;\n              }\n            } while(orderedTerms[upto].field() == currentField);\n            \n            currentField = orderedTerms[upto].field();\n            return currentField;\n          }\n\n          @Override\n          public TermsEnum terms() {\n            return new InstantiatedTermsEnum(orderedTerms, upto, currentField);\n          }\n        };\n      }\n\n      @Override\n      public Terms terms(final String field) {\n        final InstantiatedTerm[] orderedTerms = getIndex().getOrderedTerms();\n        int i = Arrays.binarySearch(orderedTerms, new Term(field), InstantiatedTerm.termComparator);\n        if (i < 0) {\n          i = -i - 1;\n        }\n        if (i >= orderedTerms.length || orderedTerms[i].field() != field) {\n          // field does not exist\n          return null;\n        }\n        final int startLoc = i;\n\n        // TODO: heavy to do this here; would be better to\n        // do it up front & cache\n        long sum = 0;\n        int upto = i;\n        while(upto < orderedTerms.length && orderedTerms[i].field() == field) {\n          sum += orderedTerms[i].getTotalTermFreq();\n          upto++;\n        }\n        final long sumTotalTermFreq = sum;\n\n        return new Terms() {\n          @Override \n          public TermsEnum iterator() {\n            return new InstantiatedTermsEnum(orderedTerms, startLoc, field);\n          }\n\n          @Override\n          public long getSumTotalTermFreq() {\n            return sumTotalTermFreq;\n          }\n\n          @Override\n          public Comparator<BytesRef> getComparator() {\n            return BytesRef.getUTF8SortedAsUnicodeComparator();\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/instantiated/src/java/org/apache/lucene/store/instantiated/InstantiatedIndexReader#fields().mjava","pathOld":"lucene/contrib/instantiated/src/java/org/apache/lucene/store/instantiated/InstantiatedIndexReader#fields().mjava","sourceNew":"  @Override\n  public Fields fields() {\n    if (getIndex().getOrderedTerms().length == 0) {\n      return null;\n    }\n\n    return new Fields() {\n      @Override\n      public FieldsEnum iterator() {\n        final InstantiatedTerm[] orderedTerms = getIndex().getOrderedTerms();\n\n        return new FieldsEnum() {\n          int upto = -1;\n          String currentField;\n\n          @Override\n          public String next() {\n            do {\n              upto++;\n              if (upto >= orderedTerms.length) {\n                return null;\n              }\n            } while(orderedTerms[upto].field() == currentField);\n            \n            currentField = orderedTerms[upto].field();\n            return currentField;\n          }\n\n          @Override\n          public TermsEnum terms() {\n            return new InstantiatedTermsEnum(orderedTerms, upto, currentField);\n          }\n        };\n      }\n\n      @Override\n      public Terms terms(final String field) {\n        final InstantiatedTerm[] orderedTerms = getIndex().getOrderedTerms();\n        int i = Arrays.binarySearch(orderedTerms, new Term(field), InstantiatedTerm.termComparator);\n        if (i < 0) {\n          i = -i - 1;\n        }\n        if (i >= orderedTerms.length || !orderedTerms[i].field().equals(field)) {\n          // field does not exist\n          return null;\n        }\n        final int startLoc = i;\n\n        // TODO: heavy to do this here; would be better to\n        // do it up front & cache\n        long sum = 0;\n        int upto = i;\n        while(upto < orderedTerms.length && orderedTerms[i].field() == field) {\n          sum += orderedTerms[i].getTotalTermFreq();\n          upto++;\n        }\n        final long sumTotalTermFreq = sum;\n\n        return new Terms() {\n          @Override \n          public TermsEnum iterator() {\n            return new InstantiatedTermsEnum(orderedTerms, startLoc, field);\n          }\n\n          @Override\n          public long getSumTotalTermFreq() {\n            return sumTotalTermFreq;\n          }\n\n          @Override\n          public Comparator<BytesRef> getComparator() {\n            return BytesRef.getUTF8SortedAsUnicodeComparator();\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Fields fields() {\n    if (getIndex().getOrderedTerms().length == 0) {\n      return null;\n    }\n\n    return new Fields() {\n      @Override\n      public FieldsEnum iterator() {\n        final InstantiatedTerm[] orderedTerms = getIndex().getOrderedTerms();\n\n        return new FieldsEnum() {\n          int upto = -1;\n          String currentField;\n\n          @Override\n          public String next() {\n            do {\n              upto++;\n              if (upto >= orderedTerms.length) {\n                return null;\n              }\n            } while(orderedTerms[upto].field() == currentField);\n            \n            currentField = orderedTerms[upto].field();\n            return currentField;\n          }\n\n          @Override\n          public TermsEnum terms() {\n            return new InstantiatedTermsEnum(orderedTerms, upto, currentField);\n          }\n        };\n      }\n\n      @Override\n      public Terms terms(final String field) {\n        final InstantiatedTerm[] orderedTerms = getIndex().getOrderedTerms();\n        int i = Arrays.binarySearch(orderedTerms, new Term(field), InstantiatedTerm.termComparator);\n        if (i < 0) {\n          i = -i - 1;\n        }\n        if (i >= orderedTerms.length || orderedTerms[i].field() != field) {\n          // field does not exist\n          return null;\n        }\n        final int startLoc = i;\n\n        // TODO: heavy to do this here; would be better to\n        // do it up front & cache\n        long sum = 0;\n        int upto = i;\n        while(upto < orderedTerms.length && orderedTerms[i].field() == field) {\n          sum += orderedTerms[i].getTotalTermFreq();\n          upto++;\n        }\n        final long sumTotalTermFreq = sum;\n\n        return new Terms() {\n          @Override \n          public TermsEnum iterator() {\n            return new InstantiatedTermsEnum(orderedTerms, startLoc, field);\n          }\n\n          @Override\n          public long getSumTotalTermFreq() {\n            return sumTotalTermFreq;\n          }\n\n          @Override\n          public Comparator<BytesRef> getComparator() {\n            return BytesRef.getUTF8SortedAsUnicodeComparator();\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"72b952811367f6e21added5f7306dc6bf2aa1e9c","date":1310127304,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/contrib/instantiated/src/java/org/apache/lucene/store/instantiated/InstantiatedIndexReader#fields().mjava","pathOld":"lucene/contrib/instantiated/src/java/org/apache/lucene/store/instantiated/InstantiatedIndexReader#fields().mjava","sourceNew":"  @Override\n  public Fields fields() {\n    if (getIndex().getOrderedTerms().length == 0) {\n      return null;\n    }\n\n    return new Fields() {\n      @Override\n      public FieldsEnum iterator() {\n        final InstantiatedTerm[] orderedTerms = getIndex().getOrderedTerms();\n\n        return new FieldsEnum() {\n          int upto = -1;\n          String currentField;\n\n          @Override\n          public String next() {\n            do {\n              upto++;\n              if (upto >= orderedTerms.length) {\n                return null;\n              }\n            } while(orderedTerms[upto].field().equals(currentField));\n            \n            currentField = orderedTerms[upto].field();\n            return currentField;\n          }\n\n          @Override\n          public TermsEnum terms() {\n            return new InstantiatedTermsEnum(orderedTerms, upto, currentField);\n          }\n        };\n      }\n\n      @Override\n      public Terms terms(final String field) {\n        final InstantiatedTerm[] orderedTerms = getIndex().getOrderedTerms();\n        int i = Arrays.binarySearch(orderedTerms, new Term(field), InstantiatedTerm.termComparator);\n        if (i < 0) {\n          i = -i - 1;\n        }\n        if (i >= orderedTerms.length || !orderedTerms[i].field().equals(field)) {\n          // field does not exist\n          return null;\n        }\n        final int startLoc = i;\n\n        // TODO: heavy to do this here; would be better to\n        // do it up front & cache\n        long sum = 0;\n        int upto = i;\n        while(upto < orderedTerms.length && orderedTerms[i].equals(field)) {\n          sum += orderedTerms[i].getTotalTermFreq();\n          upto++;\n        }\n        final long sumTotalTermFreq = sum;\n\n        return new Terms() {\n          @Override \n          public TermsEnum iterator() {\n            return new InstantiatedTermsEnum(orderedTerms, startLoc, field);\n          }\n\n          @Override\n          public long getSumTotalTermFreq() {\n            return sumTotalTermFreq;\n          }\n\n          @Override\n          public Comparator<BytesRef> getComparator() {\n            return BytesRef.getUTF8SortedAsUnicodeComparator();\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Fields fields() {\n    if (getIndex().getOrderedTerms().length == 0) {\n      return null;\n    }\n\n    return new Fields() {\n      @Override\n      public FieldsEnum iterator() {\n        final InstantiatedTerm[] orderedTerms = getIndex().getOrderedTerms();\n\n        return new FieldsEnum() {\n          int upto = -1;\n          String currentField;\n\n          @Override\n          public String next() {\n            do {\n              upto++;\n              if (upto >= orderedTerms.length) {\n                return null;\n              }\n            } while(orderedTerms[upto].field() == currentField);\n            \n            currentField = orderedTerms[upto].field();\n            return currentField;\n          }\n\n          @Override\n          public TermsEnum terms() {\n            return new InstantiatedTermsEnum(orderedTerms, upto, currentField);\n          }\n        };\n      }\n\n      @Override\n      public Terms terms(final String field) {\n        final InstantiatedTerm[] orderedTerms = getIndex().getOrderedTerms();\n        int i = Arrays.binarySearch(orderedTerms, new Term(field), InstantiatedTerm.termComparator);\n        if (i < 0) {\n          i = -i - 1;\n        }\n        if (i >= orderedTerms.length || !orderedTerms[i].field().equals(field)) {\n          // field does not exist\n          return null;\n        }\n        final int startLoc = i;\n\n        // TODO: heavy to do this here; would be better to\n        // do it up front & cache\n        long sum = 0;\n        int upto = i;\n        while(upto < orderedTerms.length && orderedTerms[i].field() == field) {\n          sum += orderedTerms[i].getTotalTermFreq();\n          upto++;\n        }\n        final long sumTotalTermFreq = sum;\n\n        return new Terms() {\n          @Override \n          public TermsEnum iterator() {\n            return new InstantiatedTermsEnum(orderedTerms, startLoc, field);\n          }\n\n          @Override\n          public long getSumTotalTermFreq() {\n            return sumTotalTermFreq;\n          }\n\n          @Override\n          public Comparator<BytesRef> getComparator() {\n            return BytesRef.getUTF8SortedAsUnicodeComparator();\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":["20cf910d1892b0a0ff8543ec4551b6df2dc3de40","6ecd298fdc085e7eba27afa7fae58df1ba1a2808"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c5181bf32467b2f48e217b5f93a3f44f6b0e868d","date":1310131136,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/contrib/instantiated/src/java/org/apache/lucene/store/instantiated/InstantiatedIndexReader#fields().mjava","pathOld":"lucene/contrib/instantiated/src/java/org/apache/lucene/store/instantiated/InstantiatedIndexReader#fields().mjava","sourceNew":"  @Override\n  public Fields fields() {\n    if (getIndex().getOrderedTerms().length == 0) {\n      return null;\n    }\n\n    return new Fields() {\n      @Override\n      public FieldsEnum iterator() {\n        final InstantiatedTerm[] orderedTerms = getIndex().getOrderedTerms();\n\n        return new FieldsEnum() {\n          int upto = -1;\n          String currentField;\n\n          @Override\n          public String next() {\n            do {\n              upto++;\n              if (upto >= orderedTerms.length) {\n                return null;\n              }\n            } while(orderedTerms[upto].field().equals(currentField));\n            \n            currentField = orderedTerms[upto].field();\n            return currentField;\n          }\n\n          @Override\n          public TermsEnum terms() {\n            return new InstantiatedTermsEnum(orderedTerms, upto, currentField);\n          }\n        };\n      }\n\n      @Override\n      public Terms terms(final String field) {\n        final InstantiatedTerm[] orderedTerms = getIndex().getOrderedTerms();\n        int i = Arrays.binarySearch(orderedTerms, new Term(field), InstantiatedTerm.termComparator);\n        if (i < 0) {\n          i = -i - 1;\n        }\n        if (i >= orderedTerms.length || !orderedTerms[i].field().equals(field)) {\n          // field does not exist\n          return null;\n        }\n        final int startLoc = i;\n\n        // TODO: heavy to do this here; would be better to\n        // do it up front & cache\n        long sum = 0;\n        int upto = i;\n        while(upto < orderedTerms.length && orderedTerms[i].field().equals(field)) {\n          sum += orderedTerms[i].getTotalTermFreq();\n          upto++;\n        }\n        final long sumTotalTermFreq = sum;\n\n        return new Terms() {\n          @Override \n          public TermsEnum iterator() {\n            return new InstantiatedTermsEnum(orderedTerms, startLoc, field);\n          }\n\n          @Override\n          public long getSumTotalTermFreq() {\n            return sumTotalTermFreq;\n          }\n\n          @Override\n          public Comparator<BytesRef> getComparator() {\n            return BytesRef.getUTF8SortedAsUnicodeComparator();\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Fields fields() {\n    if (getIndex().getOrderedTerms().length == 0) {\n      return null;\n    }\n\n    return new Fields() {\n      @Override\n      public FieldsEnum iterator() {\n        final InstantiatedTerm[] orderedTerms = getIndex().getOrderedTerms();\n\n        return new FieldsEnum() {\n          int upto = -1;\n          String currentField;\n\n          @Override\n          public String next() {\n            do {\n              upto++;\n              if (upto >= orderedTerms.length) {\n                return null;\n              }\n            } while(orderedTerms[upto].field().equals(currentField));\n            \n            currentField = orderedTerms[upto].field();\n            return currentField;\n          }\n\n          @Override\n          public TermsEnum terms() {\n            return new InstantiatedTermsEnum(orderedTerms, upto, currentField);\n          }\n        };\n      }\n\n      @Override\n      public Terms terms(final String field) {\n        final InstantiatedTerm[] orderedTerms = getIndex().getOrderedTerms();\n        int i = Arrays.binarySearch(orderedTerms, new Term(field), InstantiatedTerm.termComparator);\n        if (i < 0) {\n          i = -i - 1;\n        }\n        if (i >= orderedTerms.length || !orderedTerms[i].field().equals(field)) {\n          // field does not exist\n          return null;\n        }\n        final int startLoc = i;\n\n        // TODO: heavy to do this here; would be better to\n        // do it up front & cache\n        long sum = 0;\n        int upto = i;\n        while(upto < orderedTerms.length && orderedTerms[i].equals(field)) {\n          sum += orderedTerms[i].getTotalTermFreq();\n          upto++;\n        }\n        final long sumTotalTermFreq = sum;\n\n        return new Terms() {\n          @Override \n          public TermsEnum iterator() {\n            return new InstantiatedTermsEnum(orderedTerms, startLoc, field);\n          }\n\n          @Override\n          public long getSumTotalTermFreq() {\n            return sumTotalTermFreq;\n          }\n\n          @Override\n          public Comparator<BytesRef> getComparator() {\n            return BytesRef.getUTF8SortedAsUnicodeComparator();\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5d004d0e0b3f65bb40da76d476d659d7888270e8","date":1310158940,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/contrib/instantiated/src/java/org/apache/lucene/store/instantiated/InstantiatedIndexReader#fields().mjava","pathOld":"lucene/contrib/instantiated/src/java/org/apache/lucene/store/instantiated/InstantiatedIndexReader#fields().mjava","sourceNew":"  @Override\n  public Fields fields() {\n    if (getIndex().getOrderedTerms().length == 0) {\n      return null;\n    }\n\n    return new Fields() {\n      @Override\n      public FieldsEnum iterator() {\n        final InstantiatedTerm[] orderedTerms = getIndex().getOrderedTerms();\n\n        return new FieldsEnum() {\n          int upto = -1;\n          String currentField;\n\n          @Override\n          public String next() {\n            do {\n              upto++;\n              if (upto >= orderedTerms.length) {\n                return null;\n              }\n            } while(orderedTerms[upto].field().equals(currentField));\n            \n            currentField = orderedTerms[upto].field();\n            return currentField;\n          }\n\n          @Override\n          public TermsEnum terms() {\n            return new InstantiatedTermsEnum(orderedTerms, upto, currentField);\n          }\n        };\n      }\n\n      @Override\n      public Terms terms(final String field) {\n        final InstantiatedTerm[] orderedTerms = getIndex().getOrderedTerms();\n        int i = Arrays.binarySearch(orderedTerms, new Term(field), InstantiatedTerm.termComparator);\n        if (i < 0) {\n          i = -i - 1;\n        }\n        if (i >= orderedTerms.length || !orderedTerms[i].field().equals(field)) {\n          // field does not exist\n          return null;\n        }\n        final int startLoc = i;\n\n        // TODO: heavy to do this here; would be better to\n        // do it up front & cache\n        long sum = 0;\n        int upto = i;\n        while(upto < orderedTerms.length && orderedTerms[i].field().equals(field)) {\n          sum += orderedTerms[i].getTotalTermFreq();\n          upto++;\n        }\n        final long sumTotalTermFreq = sum;\n\n        return new Terms() {\n          @Override \n          public TermsEnum iterator() {\n            return new InstantiatedTermsEnum(orderedTerms, startLoc, field);\n          }\n\n          @Override\n          public long getSumTotalTermFreq() {\n            return sumTotalTermFreq;\n          }\n\n          @Override\n          public Comparator<BytesRef> getComparator() {\n            return BytesRef.getUTF8SortedAsUnicodeComparator();\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Fields fields() {\n    if (getIndex().getOrderedTerms().length == 0) {\n      return null;\n    }\n\n    return new Fields() {\n      @Override\n      public FieldsEnum iterator() {\n        final InstantiatedTerm[] orderedTerms = getIndex().getOrderedTerms();\n\n        return new FieldsEnum() {\n          int upto = -1;\n          String currentField;\n\n          @Override\n          public String next() {\n            do {\n              upto++;\n              if (upto >= orderedTerms.length) {\n                return null;\n              }\n            } while(orderedTerms[upto].field() == currentField);\n            \n            currentField = orderedTerms[upto].field();\n            return currentField;\n          }\n\n          @Override\n          public TermsEnum terms() {\n            return new InstantiatedTermsEnum(orderedTerms, upto, currentField);\n          }\n        };\n      }\n\n      @Override\n      public Terms terms(final String field) {\n        final InstantiatedTerm[] orderedTerms = getIndex().getOrderedTerms();\n        int i = Arrays.binarySearch(orderedTerms, new Term(field), InstantiatedTerm.termComparator);\n        if (i < 0) {\n          i = -i - 1;\n        }\n        if (i >= orderedTerms.length || !orderedTerms[i].field().equals(field)) {\n          // field does not exist\n          return null;\n        }\n        final int startLoc = i;\n\n        // TODO: heavy to do this here; would be better to\n        // do it up front & cache\n        long sum = 0;\n        int upto = i;\n        while(upto < orderedTerms.length && orderedTerms[i].field() == field) {\n          sum += orderedTerms[i].getTotalTermFreq();\n          upto++;\n        }\n        final long sumTotalTermFreq = sum;\n\n        return new Terms() {\n          @Override \n          public TermsEnum iterator() {\n            return new InstantiatedTermsEnum(orderedTerms, startLoc, field);\n          }\n\n          @Override\n          public long getSumTotalTermFreq() {\n            return sumTotalTermFreq;\n          }\n\n          @Override\n          public Comparator<BytesRef> getComparator() {\n            return BytesRef.getUTF8SortedAsUnicodeComparator();\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4f2f9fd0a641ccc0cc6a4fb4e53d7ec1ab14a94","date":1310159023,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/instantiated/src/java/org/apache/lucene/store/instantiated/InstantiatedIndexReader#fields().mjava","pathOld":"lucene/contrib/instantiated/src/java/org/apache/lucene/store/instantiated/InstantiatedIndexReader#fields().mjava","sourceNew":"  @Override\n  public Fields fields() {\n    if (getIndex().getOrderedTerms().length == 0) {\n      return null;\n    }\n\n    return new Fields() {\n      @Override\n      public FieldsEnum iterator() {\n        final InstantiatedTerm[] orderedTerms = getIndex().getOrderedTerms();\n\n        return new FieldsEnum() {\n          int upto = -1;\n          String currentField;\n\n          @Override\n          public String next() {\n            do {\n              upto++;\n              if (upto >= orderedTerms.length) {\n                return null;\n              }\n            } while(orderedTerms[upto].field().equals(currentField));\n            \n            currentField = orderedTerms[upto].field();\n            return currentField;\n          }\n\n          @Override\n          public TermsEnum terms() {\n            return new InstantiatedTermsEnum(orderedTerms, upto, currentField);\n          }\n        };\n      }\n\n      @Override\n      public Terms terms(final String field) {\n        final InstantiatedTerm[] orderedTerms = getIndex().getOrderedTerms();\n        int i = Arrays.binarySearch(orderedTerms, new Term(field), InstantiatedTerm.termComparator);\n        if (i < 0) {\n          i = -i - 1;\n        }\n        if (i >= orderedTerms.length || !orderedTerms[i].field().equals(field)) {\n          // field does not exist\n          return null;\n        }\n        final int startLoc = i;\n\n        // TODO: heavy to do this here; would be better to\n        // do it up front & cache\n        long sum = 0;\n        int upto = i;\n        while(upto < orderedTerms.length && orderedTerms[i].field().equals(field)) {\n          sum += orderedTerms[i].getTotalTermFreq();\n          upto++;\n        }\n        final long sumTotalTermFreq = sum;\n\n        return new Terms() {\n          @Override \n          public TermsEnum iterator() {\n            return new InstantiatedTermsEnum(orderedTerms, startLoc, field);\n          }\n\n          @Override\n          public long getSumTotalTermFreq() {\n            return sumTotalTermFreq;\n          }\n          \n          // TODO: support this?\n          @Override\n          public long getSumDocFreq() {\n            return -1;\n          }\n\n          @Override\n          public Comparator<BytesRef> getComparator() {\n            return BytesRef.getUTF8SortedAsUnicodeComparator();\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Fields fields() {\n    if (getIndex().getOrderedTerms().length == 0) {\n      return null;\n    }\n\n    return new Fields() {\n      @Override\n      public FieldsEnum iterator() {\n        final InstantiatedTerm[] orderedTerms = getIndex().getOrderedTerms();\n\n        return new FieldsEnum() {\n          int upto = -1;\n          String currentField;\n\n          @Override\n          public String next() {\n            do {\n              upto++;\n              if (upto >= orderedTerms.length) {\n                return null;\n              }\n            } while(orderedTerms[upto].field().equals(currentField));\n            \n            currentField = orderedTerms[upto].field();\n            return currentField;\n          }\n\n          @Override\n          public TermsEnum terms() {\n            return new InstantiatedTermsEnum(orderedTerms, upto, currentField);\n          }\n        };\n      }\n\n      @Override\n      public Terms terms(final String field) {\n        final InstantiatedTerm[] orderedTerms = getIndex().getOrderedTerms();\n        int i = Arrays.binarySearch(orderedTerms, new Term(field), InstantiatedTerm.termComparator);\n        if (i < 0) {\n          i = -i - 1;\n        }\n        if (i >= orderedTerms.length || !orderedTerms[i].field().equals(field)) {\n          // field does not exist\n          return null;\n        }\n        final int startLoc = i;\n\n        // TODO: heavy to do this here; would be better to\n        // do it up front & cache\n        long sum = 0;\n        int upto = i;\n        while(upto < orderedTerms.length && orderedTerms[i].field().equals(field)) {\n          sum += orderedTerms[i].getTotalTermFreq();\n          upto++;\n        }\n        final long sumTotalTermFreq = sum;\n\n        return new Terms() {\n          @Override \n          public TermsEnum iterator() {\n            return new InstantiatedTermsEnum(orderedTerms, startLoc, field);\n          }\n\n          @Override\n          public long getSumTotalTermFreq() {\n            return sumTotalTermFreq;\n          }\n\n          @Override\n          public Comparator<BytesRef> getComparator() {\n            return BytesRef.getUTF8SortedAsUnicodeComparator();\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"63639dd66fd5bd9b90bc24dd596ae01575f27cc4","date":1310237454,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/contrib/instantiated/src/java/org/apache/lucene/store/instantiated/InstantiatedIndexReader#fields().mjava","pathOld":"lucene/contrib/instantiated/src/java/org/apache/lucene/store/instantiated/InstantiatedIndexReader#fields().mjava","sourceNew":"  @Override\n  public Fields fields() {\n    if (getIndex().getOrderedTerms().length == 0) {\n      return null;\n    }\n\n    return new Fields() {\n      @Override\n      public FieldsEnum iterator() {\n        final InstantiatedTerm[] orderedTerms = getIndex().getOrderedTerms();\n\n        return new FieldsEnum() {\n          int upto = -1;\n          String currentField;\n\n          @Override\n          public String next() {\n            do {\n              upto++;\n              if (upto >= orderedTerms.length) {\n                return null;\n              }\n            } while(orderedTerms[upto].field().equals(currentField));\n            \n            currentField = orderedTerms[upto].field();\n            return currentField;\n          }\n\n          @Override\n          public TermsEnum terms() {\n            return new InstantiatedTermsEnum(orderedTerms, upto, currentField);\n          }\n        };\n      }\n\n      @Override\n      public Terms terms(final String field) {\n        final InstantiatedTerm[] orderedTerms = getIndex().getOrderedTerms();\n        int i = Arrays.binarySearch(orderedTerms, new Term(field), InstantiatedTerm.termComparator);\n        if (i < 0) {\n          i = -i - 1;\n        }\n        if (i >= orderedTerms.length || !orderedTerms[i].field().equals(field)) {\n          // field does not exist\n          return null;\n        }\n        final int startLoc = i;\n\n        // TODO: heavy to do this here; would be better to\n        // do it up front & cache\n        long sum = 0;\n        int upto = i;\n        while(upto < orderedTerms.length && orderedTerms[i].field().equals(field)) {\n          sum += orderedTerms[i].getTotalTermFreq();\n          upto++;\n        }\n        final long sumTotalTermFreq = sum;\n\n        return new Terms() {\n          @Override \n          public TermsEnum iterator() {\n            return new InstantiatedTermsEnum(orderedTerms, startLoc, field);\n          }\n\n          @Override\n          public long getSumTotalTermFreq() {\n            return sumTotalTermFreq;\n          }\n          \n          // TODO: support this?\n          @Override\n          public long getSumDocFreq() {\n            return -1;\n          }\n\n          @Override\n          public Comparator<BytesRef> getComparator() {\n            return BytesRef.getUTF8SortedAsUnicodeComparator();\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Fields fields() {\n    if (getIndex().getOrderedTerms().length == 0) {\n      return null;\n    }\n\n    return new Fields() {\n      @Override\n      public FieldsEnum iterator() {\n        final InstantiatedTerm[] orderedTerms = getIndex().getOrderedTerms();\n\n        return new FieldsEnum() {\n          int upto = -1;\n          String currentField;\n\n          @Override\n          public String next() {\n            do {\n              upto++;\n              if (upto >= orderedTerms.length) {\n                return null;\n              }\n            } while(orderedTerms[upto].field().equals(currentField));\n            \n            currentField = orderedTerms[upto].field();\n            return currentField;\n          }\n\n          @Override\n          public TermsEnum terms() {\n            return new InstantiatedTermsEnum(orderedTerms, upto, currentField);\n          }\n        };\n      }\n\n      @Override\n      public Terms terms(final String field) {\n        final InstantiatedTerm[] orderedTerms = getIndex().getOrderedTerms();\n        int i = Arrays.binarySearch(orderedTerms, new Term(field), InstantiatedTerm.termComparator);\n        if (i < 0) {\n          i = -i - 1;\n        }\n        if (i >= orderedTerms.length || !orderedTerms[i].field().equals(field)) {\n          // field does not exist\n          return null;\n        }\n        final int startLoc = i;\n\n        // TODO: heavy to do this here; would be better to\n        // do it up front & cache\n        long sum = 0;\n        int upto = i;\n        while(upto < orderedTerms.length && orderedTerms[i].field().equals(field)) {\n          sum += orderedTerms[i].getTotalTermFreq();\n          upto++;\n        }\n        final long sumTotalTermFreq = sum;\n\n        return new Terms() {\n          @Override \n          public TermsEnum iterator() {\n            return new InstantiatedTermsEnum(orderedTerms, startLoc, field);\n          }\n\n          @Override\n          public long getSumTotalTermFreq() {\n            return sumTotalTermFreq;\n          }\n\n          @Override\n          public Comparator<BytesRef> getComparator() {\n            return BytesRef.getUTF8SortedAsUnicodeComparator();\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"25433c5cacacb7a2055d62d4d36b0daf210e0a10","date":1315747522,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/instantiated/src/java/org/apache/lucene/store/instantiated/InstantiatedIndexReader#fields().mjava","pathOld":"lucene/contrib/instantiated/src/java/org/apache/lucene/store/instantiated/InstantiatedIndexReader#fields().mjava","sourceNew":"  @Override\n  public Fields fields() {\n    if (getIndex().getOrderedTerms().length == 0) {\n      return null;\n    }\n\n    return new Fields() {\n      @Override\n      public FieldsEnum iterator() {\n        final InstantiatedTerm[] orderedTerms = getIndex().getOrderedTerms();\n\n        return new FieldsEnum() {\n          int upto = -1;\n          String currentField;\n\n          @Override\n          public String next() {\n            do {\n              upto++;\n              if (upto >= orderedTerms.length) {\n                return null;\n              }\n            } while(orderedTerms[upto].field().equals(currentField));\n            \n            currentField = orderedTerms[upto].field();\n            return currentField;\n          }\n\n          @Override\n          public TermsEnum terms() {\n            return new InstantiatedTermsEnum(orderedTerms, upto, currentField);\n          }\n        };\n      }\n\n      @Override\n      public Terms terms(final String field) {\n        final InstantiatedTerm[] orderedTerms = getIndex().getOrderedTerms();\n        int i = Arrays.binarySearch(orderedTerms, new Term(field), InstantiatedTerm.termComparator);\n        if (i < 0) {\n          i = -i - 1;\n        }\n        if (i >= orderedTerms.length || !orderedTerms[i].field().equals(field)) {\n          // field does not exist\n          return null;\n        }\n        final int startLoc = i;\n\n        // TODO: heavy to do this here; would be better to\n        // do it up front & cache\n        long sum = 0;\n        int upto = i;\n        while(upto < orderedTerms.length && orderedTerms[i].field().equals(field)) {\n          sum += orderedTerms[i].getTotalTermFreq();\n          upto++;\n        }\n        final long sumTotalTermFreq = sum;\n\n        return new Terms() {\n          @Override \n          public TermsEnum iterator() {\n            return new InstantiatedTermsEnum(orderedTerms, startLoc, field);\n          }\n\n          @Override\n          public long getSumTotalTermFreq() {\n            return sumTotalTermFreq;\n          }\n          \n          // TODO: support this?\n          @Override\n          public long getSumDocFreq() {\n            return -1;\n          }\n\n          // TODO: support this?\n          @Override\n          public int getDocCount() throws IOException {\n            return -1;\n          }\n\n          @Override\n          public Comparator<BytesRef> getComparator() {\n            return BytesRef.getUTF8SortedAsUnicodeComparator();\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Fields fields() {\n    if (getIndex().getOrderedTerms().length == 0) {\n      return null;\n    }\n\n    return new Fields() {\n      @Override\n      public FieldsEnum iterator() {\n        final InstantiatedTerm[] orderedTerms = getIndex().getOrderedTerms();\n\n        return new FieldsEnum() {\n          int upto = -1;\n          String currentField;\n\n          @Override\n          public String next() {\n            do {\n              upto++;\n              if (upto >= orderedTerms.length) {\n                return null;\n              }\n            } while(orderedTerms[upto].field().equals(currentField));\n            \n            currentField = orderedTerms[upto].field();\n            return currentField;\n          }\n\n          @Override\n          public TermsEnum terms() {\n            return new InstantiatedTermsEnum(orderedTerms, upto, currentField);\n          }\n        };\n      }\n\n      @Override\n      public Terms terms(final String field) {\n        final InstantiatedTerm[] orderedTerms = getIndex().getOrderedTerms();\n        int i = Arrays.binarySearch(orderedTerms, new Term(field), InstantiatedTerm.termComparator);\n        if (i < 0) {\n          i = -i - 1;\n        }\n        if (i >= orderedTerms.length || !orderedTerms[i].field().equals(field)) {\n          // field does not exist\n          return null;\n        }\n        final int startLoc = i;\n\n        // TODO: heavy to do this here; would be better to\n        // do it up front & cache\n        long sum = 0;\n        int upto = i;\n        while(upto < orderedTerms.length && orderedTerms[i].field().equals(field)) {\n          sum += orderedTerms[i].getTotalTermFreq();\n          upto++;\n        }\n        final long sumTotalTermFreq = sum;\n\n        return new Terms() {\n          @Override \n          public TermsEnum iterator() {\n            return new InstantiatedTermsEnum(orderedTerms, startLoc, field);\n          }\n\n          @Override\n          public long getSumTotalTermFreq() {\n            return sumTotalTermFreq;\n          }\n          \n          // TODO: support this?\n          @Override\n          public long getSumDocFreq() {\n            return -1;\n          }\n\n          @Override\n          public Comparator<BytesRef> getComparator() {\n            return BytesRef.getUTF8SortedAsUnicodeComparator();\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f458fcb817a740e7906774b7ca2c54d37b34f24f","date":1319501743,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/instantiated/src/java/org/apache/lucene/store/instantiated/InstantiatedIndexReader#fields().mjava","pathOld":"lucene/contrib/instantiated/src/java/org/apache/lucene/store/instantiated/InstantiatedIndexReader#fields().mjava","sourceNew":"  @Override\n  public Fields fields() {\n    if (getIndex().getOrderedTerms().length == 0) {\n      return null;\n    }\n\n    return new Fields() {\n      @Override\n      public FieldsEnum iterator() {\n        final InstantiatedTerm[] orderedTerms = getIndex().getOrderedTerms();\n\n        return new FieldsEnum() {\n          int upto = -1;\n          String currentField;\n\n          @Override\n          public String next() {\n            do {\n              upto++;\n              if (upto >= orderedTerms.length) {\n                return null;\n              }\n            } while(orderedTerms[upto].field().equals(currentField));\n            \n            currentField = orderedTerms[upto].field();\n            return currentField;\n          }\n\n          @Override\n          public TermsEnum terms() {\n            return new InstantiatedTermsEnum(orderedTerms, upto, currentField);\n          }\n        };\n      }\n\n      @Override\n      public Terms terms(final String field) {\n        final InstantiatedTerm[] orderedTerms = getIndex().getOrderedTerms();\n        int i = Arrays.binarySearch(orderedTerms, new Term(field), InstantiatedTerm.termComparator);\n        if (i < 0) {\n          i = -i - 1;\n        }\n        if (i >= orderedTerms.length || !orderedTerms[i].field().equals(field)) {\n          // field does not exist\n          return null;\n        }\n        final int startLoc = i;\n\n        // TODO: heavy to do this here; would be better to\n        // do it up front & cache\n        long sum = 0;\n        int upto = i;\n        while(upto < orderedTerms.length && orderedTerms[i].field().equals(field)) {\n          sum += orderedTerms[i].getTotalTermFreq();\n          upto++;\n        }\n        final long sumTotalTermFreq = sum;\n\n        return new Terms() {\n          @Override \n          public TermsEnum iterator() {\n            return new InstantiatedTermsEnum(orderedTerms, startLoc, field);\n          }\n\n          @Override\n          public long getSumTotalTermFreq() {\n            return sumTotalTermFreq;\n          }\n          \n          // TODO: support this?\n          @Override\n          public long getSumDocFreq() {\n            return -1;\n          }\n\n          // TODO: support this?\n          @Override\n          public int getDocCount() throws IOException {\n            return -1;\n          }\n\n          @Override\n          public long getUniqueTermCount() throws IOException {\n            return -1;\n          }\n\n          @Override\n          public Comparator<BytesRef> getComparator() {\n            return BytesRef.getUTF8SortedAsUnicodeComparator();\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Fields fields() {\n    if (getIndex().getOrderedTerms().length == 0) {\n      return null;\n    }\n\n    return new Fields() {\n      @Override\n      public FieldsEnum iterator() {\n        final InstantiatedTerm[] orderedTerms = getIndex().getOrderedTerms();\n\n        return new FieldsEnum() {\n          int upto = -1;\n          String currentField;\n\n          @Override\n          public String next() {\n            do {\n              upto++;\n              if (upto >= orderedTerms.length) {\n                return null;\n              }\n            } while(orderedTerms[upto].field().equals(currentField));\n            \n            currentField = orderedTerms[upto].field();\n            return currentField;\n          }\n\n          @Override\n          public TermsEnum terms() {\n            return new InstantiatedTermsEnum(orderedTerms, upto, currentField);\n          }\n        };\n      }\n\n      @Override\n      public Terms terms(final String field) {\n        final InstantiatedTerm[] orderedTerms = getIndex().getOrderedTerms();\n        int i = Arrays.binarySearch(orderedTerms, new Term(field), InstantiatedTerm.termComparator);\n        if (i < 0) {\n          i = -i - 1;\n        }\n        if (i >= orderedTerms.length || !orderedTerms[i].field().equals(field)) {\n          // field does not exist\n          return null;\n        }\n        final int startLoc = i;\n\n        // TODO: heavy to do this here; would be better to\n        // do it up front & cache\n        long sum = 0;\n        int upto = i;\n        while(upto < orderedTerms.length && orderedTerms[i].field().equals(field)) {\n          sum += orderedTerms[i].getTotalTermFreq();\n          upto++;\n        }\n        final long sumTotalTermFreq = sum;\n\n        return new Terms() {\n          @Override \n          public TermsEnum iterator() {\n            return new InstantiatedTermsEnum(orderedTerms, startLoc, field);\n          }\n\n          @Override\n          public long getSumTotalTermFreq() {\n            return sumTotalTermFreq;\n          }\n          \n          // TODO: support this?\n          @Override\n          public long getSumDocFreq() {\n            return -1;\n          }\n\n          // TODO: support this?\n          @Override\n          public int getDocCount() throws IOException {\n            return -1;\n          }\n\n          @Override\n          public Comparator<BytesRef> getComparator() {\n            return BytesRef.getUTF8SortedAsUnicodeComparator();\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc749c053615f5871f3b95715fe292f34e70a53","date":1321470575,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/contrib/instantiated/src/java/org/apache/lucene/store/instantiated/InstantiatedIndexReader#fields().mjava","sourceNew":null,"sourceOld":"  @Override\n  public Fields fields() {\n    if (getIndex().getOrderedTerms().length == 0) {\n      return null;\n    }\n\n    return new Fields() {\n      @Override\n      public FieldsEnum iterator() {\n        final InstantiatedTerm[] orderedTerms = getIndex().getOrderedTerms();\n\n        return new FieldsEnum() {\n          int upto = -1;\n          String currentField;\n\n          @Override\n          public String next() {\n            do {\n              upto++;\n              if (upto >= orderedTerms.length) {\n                return null;\n              }\n            } while(orderedTerms[upto].field().equals(currentField));\n            \n            currentField = orderedTerms[upto].field();\n            return currentField;\n          }\n\n          @Override\n          public TermsEnum terms() {\n            return new InstantiatedTermsEnum(orderedTerms, upto, currentField);\n          }\n        };\n      }\n\n      @Override\n      public Terms terms(final String field) {\n        final InstantiatedTerm[] orderedTerms = getIndex().getOrderedTerms();\n        int i = Arrays.binarySearch(orderedTerms, new Term(field), InstantiatedTerm.termComparator);\n        if (i < 0) {\n          i = -i - 1;\n        }\n        if (i >= orderedTerms.length || !orderedTerms[i].field().equals(field)) {\n          // field does not exist\n          return null;\n        }\n        final int startLoc = i;\n\n        // TODO: heavy to do this here; would be better to\n        // do it up front & cache\n        long sum = 0;\n        int upto = i;\n        while(upto < orderedTerms.length && orderedTerms[i].field().equals(field)) {\n          sum += orderedTerms[i].getTotalTermFreq();\n          upto++;\n        }\n        final long sumTotalTermFreq = sum;\n\n        return new Terms() {\n          @Override \n          public TermsEnum iterator() {\n            return new InstantiatedTermsEnum(orderedTerms, startLoc, field);\n          }\n\n          @Override\n          public long getSumTotalTermFreq() {\n            return sumTotalTermFreq;\n          }\n          \n          // TODO: support this?\n          @Override\n          public long getSumDocFreq() {\n            return -1;\n          }\n\n          // TODO: support this?\n          @Override\n          public int getDocCount() throws IOException {\n            return -1;\n          }\n\n          @Override\n          public long getUniqueTermCount() throws IOException {\n            return -1;\n          }\n\n          @Override\n          public Comparator<BytesRef> getComparator() {\n            return BytesRef.getUTF8SortedAsUnicodeComparator();\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"25433c5cacacb7a2055d62d4d36b0daf210e0a10":["f4f2f9fd0a641ccc0cc6a4fb4e53d7ec1ab14a94"],"c5181bf32467b2f48e217b5f93a3f44f6b0e868d":["72b952811367f6e21added5f7306dc6bf2aa1e9c"],"fafef7c83fe8e0b3ca9298d5d75d6b943dc28153":["6ecd298fdc085e7eba27afa7fae58df1ba1a2808"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["29ef99d61cda9641b6250bf9567329a6e65f901d","6ecd298fdc085e7eba27afa7fae58df1ba1a2808"],"72b952811367f6e21added5f7306dc6bf2aa1e9c":["fafef7c83fe8e0b3ca9298d5d75d6b943dc28153"],"16843358872ed92ba92888ab99df297550b9a36a":["5f4e87790277826a2aea119328600dfb07761f32","6ecd298fdc085e7eba27afa7fae58df1ba1a2808"],"3cc749c053615f5871f3b95715fe292f34e70a53":["f458fcb817a740e7906774b7ca2c54d37b34f24f"],"f4f2f9fd0a641ccc0cc6a4fb4e53d7ec1ab14a94":["c5181bf32467b2f48e217b5f93a3f44f6b0e868d"],"5f4e87790277826a2aea119328600dfb07761f32":["20cf910d1892b0a0ff8543ec4551b6df2dc3de40","08932c793647a36953d1816b1060121f48820d3f"],"2553b00f699380c64959ccb27991289aae87be2e":["6ecd298fdc085e7eba27afa7fae58df1ba1a2808","fafef7c83fe8e0b3ca9298d5d75d6b943dc28153"],"63639dd66fd5bd9b90bc24dd596ae01575f27cc4":["5d004d0e0b3f65bb40da76d476d659d7888270e8","f4f2f9fd0a641ccc0cc6a4fb4e53d7ec1ab14a94"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["6ecd298fdc085e7eba27afa7fae58df1ba1a2808","fafef7c83fe8e0b3ca9298d5d75d6b943dc28153"],"08932c793647a36953d1816b1060121f48820d3f":["28427ef110c4c5bf5b4057731b83110bd1e13724"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["0e28c49f1fb6215a550fdadcf3805aa629b63ec0","6ecd298fdc085e7eba27afa7fae58df1ba1a2808"],"f458fcb817a740e7906774b7ca2c54d37b34f24f":["25433c5cacacb7a2055d62d4d36b0daf210e0a10"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"28427ef110c4c5bf5b4057731b83110bd1e13724":["20cf910d1892b0a0ff8543ec4551b6df2dc3de40"],"5d004d0e0b3f65bb40da76d476d659d7888270e8":["2553b00f699380c64959ccb27991289aae87be2e","c5181bf32467b2f48e217b5f93a3f44f6b0e868d"],"20cf910d1892b0a0ff8543ec4551b6df2dc3de40":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0e28c49f1fb6215a550fdadcf3805aa629b63ec0":["08932c793647a36953d1816b1060121f48820d3f"],"6ecd298fdc085e7eba27afa7fae58df1ba1a2808":["08932c793647a36953d1816b1060121f48820d3f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3cc749c053615f5871f3b95715fe292f34e70a53"]},"commit2Childs":{"25433c5cacacb7a2055d62d4d36b0daf210e0a10":["f458fcb817a740e7906774b7ca2c54d37b34f24f"],"c5181bf32467b2f48e217b5f93a3f44f6b0e868d":["f4f2f9fd0a641ccc0cc6a4fb4e53d7ec1ab14a94","5d004d0e0b3f65bb40da76d476d659d7888270e8"],"fafef7c83fe8e0b3ca9298d5d75d6b943dc28153":["72b952811367f6e21added5f7306dc6bf2aa1e9c","2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"72b952811367f6e21added5f7306dc6bf2aa1e9c":["c5181bf32467b2f48e217b5f93a3f44f6b0e868d"],"16843358872ed92ba92888ab99df297550b9a36a":[],"3cc749c053615f5871f3b95715fe292f34e70a53":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f4f2f9fd0a641ccc0cc6a4fb4e53d7ec1ab14a94":["25433c5cacacb7a2055d62d4d36b0daf210e0a10","63639dd66fd5bd9b90bc24dd596ae01575f27cc4"],"5f4e87790277826a2aea119328600dfb07761f32":["16843358872ed92ba92888ab99df297550b9a36a"],"2553b00f699380c64959ccb27991289aae87be2e":["5d004d0e0b3f65bb40da76d476d659d7888270e8"],"63639dd66fd5bd9b90bc24dd596ae01575f27cc4":[],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"08932c793647a36953d1816b1060121f48820d3f":["5f4e87790277826a2aea119328600dfb07761f32","0e28c49f1fb6215a550fdadcf3805aa629b63ec0","6ecd298fdc085e7eba27afa7fae58df1ba1a2808"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"f458fcb817a740e7906774b7ca2c54d37b34f24f":["3cc749c053615f5871f3b95715fe292f34e70a53"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["20cf910d1892b0a0ff8543ec4551b6df2dc3de40"],"28427ef110c4c5bf5b4057731b83110bd1e13724":["08932c793647a36953d1816b1060121f48820d3f"],"5d004d0e0b3f65bb40da76d476d659d7888270e8":["63639dd66fd5bd9b90bc24dd596ae01575f27cc4"],"20cf910d1892b0a0ff8543ec4551b6df2dc3de40":["5f4e87790277826a2aea119328600dfb07761f32","28427ef110c4c5bf5b4057731b83110bd1e13724"],"0e28c49f1fb6215a550fdadcf3805aa629b63ec0":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"6ecd298fdc085e7eba27afa7fae58df1ba1a2808":["fafef7c83fe8e0b3ca9298d5d75d6b943dc28153","135621f3a0670a9394eb563224a3b76cc4dddc0f","16843358872ed92ba92888ab99df297550b9a36a","2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c","29ef99d61cda9641b6250bf9567329a6e65f901d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["135621f3a0670a9394eb563224a3b76cc4dddc0f","16843358872ed92ba92888ab99df297550b9a36a","63639dd66fd5bd9b90bc24dd596ae01575f27cc4","d083e83f225b11e5fdd900e83d26ddb385b6955c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}