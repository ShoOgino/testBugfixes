{"path":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#preUpdate().mjava","commits":[{"id":"2c6dc1a64ac36088ccb8d5e20b74c48c8d3bba27","date":1306166545,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#preUpdate().mjava","pathOld":"/dev/null","sourceNew":"  private boolean preUpdate() throws CorruptIndexException, IOException {\n    ensureOpen();\n    boolean maybeMerge = false;\n    if (flushControl.anyStalledThreads() || flushControl.numQueuedFlushes() > 0) {\n      // Help out flushing any queued DWPTs so we can un-stall:\n      if (infoStream != null) {\n        message(\"DocumentsWriter has queued dwpt; will hijack this thread to flush pending segment(s)\");\n      }\n      do {\n        // Try pick up pending threads here if possible\n        DocumentsWriterPerThread flushingDWPT;\n        while ((flushingDWPT = flushControl.nextPendingFlush()) != null) {\n          // Don't push the delete here since the update could fail!\n          maybeMerge |= doFlush(flushingDWPT);\n        }\n  \n        if (infoStream != null && flushControl.anyStalledThreads()) {\n          message(\"WARNING DocumentsWriter has stalled threads; waiting\");\n        }\n        \n        flushControl.waitIfStalled(); // block if stalled\n      } while (flushControl.numQueuedFlushes() != 0); // still queued DWPTs try help flushing\n\n      if (infoStream != null) {\n        message(\"continue indexing after helpling out flushing DocumentsWriter is healthy\");\n      }\n    }\n    return maybeMerge;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["a1c3710e755dc60691ac0d7fe23c9fcba0537bdc","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#preUpdate().mjava","pathOld":"/dev/null","sourceNew":"  private boolean preUpdate() throws CorruptIndexException, IOException {\n    ensureOpen();\n    boolean maybeMerge = false;\n    if (flushControl.anyStalledThreads() || flushControl.numQueuedFlushes() > 0) {\n      // Help out flushing any queued DWPTs so we can un-stall:\n      if (infoStream != null) {\n        message(\"DocumentsWriter has queued dwpt; will hijack this thread to flush pending segment(s)\");\n      }\n      do {\n        // Try pick up pending threads here if possible\n        DocumentsWriterPerThread flushingDWPT;\n        while ((flushingDWPT = flushControl.nextPendingFlush()) != null) {\n          // Don't push the delete here since the update could fail!\n          maybeMerge |= doFlush(flushingDWPT);\n        }\n  \n        if (infoStream != null && flushControl.anyStalledThreads()) {\n          message(\"WARNING DocumentsWriter has stalled threads; waiting\");\n        }\n        \n        flushControl.waitIfStalled(); // block if stalled\n      } while (flushControl.numQueuedFlushes() != 0); // still queued DWPTs try help flushing\n\n      if (infoStream != null) {\n        message(\"continue indexing after helpling out flushing DocumentsWriter is healthy\");\n      }\n    }\n    return maybeMerge;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e10cb22a8bdb44339e282925a29182bb2f3174d","date":1306841137,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#preUpdate().mjava","pathOld":"/dev/null","sourceNew":"  private boolean preUpdate() throws CorruptIndexException, IOException {\n    ensureOpen();\n    boolean maybeMerge = false;\n    if (flushControl.anyStalledThreads() || flushControl.numQueuedFlushes() > 0) {\n      // Help out flushing any queued DWPTs so we can un-stall:\n      if (infoStream != null) {\n        message(\"DocumentsWriter has queued dwpt; will hijack this thread to flush pending segment(s)\");\n      }\n      do {\n        // Try pick up pending threads here if possible\n        DocumentsWriterPerThread flushingDWPT;\n        while ((flushingDWPT = flushControl.nextPendingFlush()) != null) {\n          // Don't push the delete here since the update could fail!\n          maybeMerge |= doFlush(flushingDWPT);\n        }\n  \n        if (infoStream != null && flushControl.anyStalledThreads()) {\n          message(\"WARNING DocumentsWriter has stalled threads; waiting\");\n        }\n        \n        flushControl.waitIfStalled(); // block if stalled\n      } while (flushControl.numQueuedFlushes() != 0); // still queued DWPTs try help flushing\n\n      if (infoStream != null) {\n        message(\"continue indexing after helpling out flushing DocumentsWriter is healthy\");\n      }\n    }\n    return maybeMerge;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a1c3710e755dc60691ac0d7fe23c9fcba0537bdc","date":1320437768,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#preUpdate().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#preUpdate().mjava","sourceNew":"  private boolean preUpdate() throws CorruptIndexException, IOException {\n    ensureOpen();\n    boolean maybeMerge = false;\n    if (flushControl.anyStalledThreads() || flushControl.numQueuedFlushes() > 0) {\n      // Help out flushing any queued DWPTs so we can un-stall:\n      if (infoStream != null) {\n        message(\"docWriter: DocumentsWriter has queued dwpt; will hijack this thread to flush pending segment(s)\");\n      }\n      do {\n        // Try pick up pending threads here if possible\n        DocumentsWriterPerThread flushingDWPT;\n        while ((flushingDWPT = flushControl.nextPendingFlush()) != null) {\n          // Don't push the delete here since the update could fail!\n          maybeMerge |= doFlush(flushingDWPT);\n        }\n  \n        if (infoStream != null && flushControl.anyStalledThreads()) {\n          message(\"WARNING DocumentsWriter has stalled threads; waiting\");\n        }\n        \n        flushControl.waitIfStalled(); // block if stalled\n      } while (flushControl.numQueuedFlushes() != 0); // still queued DWPTs try help flushing\n\n      if (infoStream != null) {\n        message(\"continue indexing after helpling out flushing DocumentsWriter is healthy\");\n      }\n    }\n    return maybeMerge;\n  }\n\n","sourceOld":"  private boolean preUpdate() throws CorruptIndexException, IOException {\n    ensureOpen();\n    boolean maybeMerge = false;\n    if (flushControl.anyStalledThreads() || flushControl.numQueuedFlushes() > 0) {\n      // Help out flushing any queued DWPTs so we can un-stall:\n      if (infoStream != null) {\n        message(\"DocumentsWriter has queued dwpt; will hijack this thread to flush pending segment(s)\");\n      }\n      do {\n        // Try pick up pending threads here if possible\n        DocumentsWriterPerThread flushingDWPT;\n        while ((flushingDWPT = flushControl.nextPendingFlush()) != null) {\n          // Don't push the delete here since the update could fail!\n          maybeMerge |= doFlush(flushingDWPT);\n        }\n  \n        if (infoStream != null && flushControl.anyStalledThreads()) {\n          message(\"WARNING DocumentsWriter has stalled threads; waiting\");\n        }\n        \n        flushControl.waitIfStalled(); // block if stalled\n      } while (flushControl.numQueuedFlushes() != 0); // still queued DWPTs try help flushing\n\n      if (infoStream != null) {\n        message(\"continue indexing after helpling out flushing DocumentsWriter is healthy\");\n      }\n    }\n    return maybeMerge;\n  }\n\n","bugFix":["2c6dc1a64ac36088ccb8d5e20b74c48c8d3bba27"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"06584e6e98d592b34e1329b384182f368d2025e8","date":1320850353,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#preUpdate().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#preUpdate().mjava","sourceNew":"  private boolean preUpdate() throws CorruptIndexException, IOException {\n    ensureOpen();\n    boolean maybeMerge = false;\n    if (flushControl.anyStalledThreads() || flushControl.numQueuedFlushes() > 0) {\n      // Help out flushing any queued DWPTs so we can un-stall:\n      if (infoStream != null) {\n        infoStream.message(\"DW\", \"DocumentsWriter has queued dwpt; will hijack this thread to flush pending segment(s)\");\n      }\n      do {\n        // Try pick up pending threads here if possible\n        DocumentsWriterPerThread flushingDWPT;\n        while ((flushingDWPT = flushControl.nextPendingFlush()) != null) {\n          // Don't push the delete here since the update could fail!\n          maybeMerge |= doFlush(flushingDWPT);\n        }\n  \n        if (infoStream != null && flushControl.anyStalledThreads()) {\n          infoStream.message(\"DW\", \"WARNING DocumentsWriter has stalled threads; waiting\");\n        }\n        \n        flushControl.waitIfStalled(); // block if stalled\n      } while (flushControl.numQueuedFlushes() != 0); // still queued DWPTs try help flushing\n\n      if (infoStream != null) {\n        infoStream.message(\"DW\", \"continue indexing after helping out flushing DocumentsWriter is healthy\");\n      }\n    }\n    return maybeMerge;\n  }\n\n","sourceOld":"  private boolean preUpdate() throws CorruptIndexException, IOException {\n    ensureOpen();\n    boolean maybeMerge = false;\n    if (flushControl.anyStalledThreads() || flushControl.numQueuedFlushes() > 0) {\n      // Help out flushing any queued DWPTs so we can un-stall:\n      if (infoStream != null) {\n        message(\"docWriter: DocumentsWriter has queued dwpt; will hijack this thread to flush pending segment(s)\");\n      }\n      do {\n        // Try pick up pending threads here if possible\n        DocumentsWriterPerThread flushingDWPT;\n        while ((flushingDWPT = flushControl.nextPendingFlush()) != null) {\n          // Don't push the delete here since the update could fail!\n          maybeMerge |= doFlush(flushingDWPT);\n        }\n  \n        if (infoStream != null && flushControl.anyStalledThreads()) {\n          message(\"WARNING DocumentsWriter has stalled threads; waiting\");\n        }\n        \n        flushControl.waitIfStalled(); // block if stalled\n      } while (flushControl.numQueuedFlushes() != 0); // still queued DWPTs try help flushing\n\n      if (infoStream != null) {\n        message(\"continue indexing after helpling out flushing DocumentsWriter is healthy\");\n      }\n    }\n    return maybeMerge;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"58c6bbc222f074c844e736e6fb23647e3db9cfe3","date":1322743940,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#preUpdate().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#preUpdate().mjava","sourceNew":"  private boolean preUpdate() throws CorruptIndexException, IOException {\n    ensureOpen();\n    boolean maybeMerge = false;\n    if (flushControl.anyStalledThreads() || flushControl.numQueuedFlushes() > 0) {\n      // Help out flushing any queued DWPTs so we can un-stall:\n      if (infoStream.isEnabled(\"DW\")) {\n        infoStream.message(\"DW\", \"DocumentsWriter has queued dwpt; will hijack this thread to flush pending segment(s)\");\n      }\n      do {\n        // Try pick up pending threads here if possible\n        DocumentsWriterPerThread flushingDWPT;\n        while ((flushingDWPT = flushControl.nextPendingFlush()) != null) {\n          // Don't push the delete here since the update could fail!\n          maybeMerge |= doFlush(flushingDWPT);\n        }\n  \n        if (infoStream.isEnabled(\"DW\") && flushControl.anyStalledThreads()) {\n          infoStream.message(\"DW\", \"WARNING DocumentsWriter has stalled threads; waiting\");\n        }\n        \n        flushControl.waitIfStalled(); // block if stalled\n      } while (flushControl.numQueuedFlushes() != 0); // still queued DWPTs try help flushing\n\n      if (infoStream.isEnabled(\"DW\")) {\n        infoStream.message(\"DW\", \"continue indexing after helping out flushing DocumentsWriter is healthy\");\n      }\n    }\n    return maybeMerge;\n  }\n\n","sourceOld":"  private boolean preUpdate() throws CorruptIndexException, IOException {\n    ensureOpen();\n    boolean maybeMerge = false;\n    if (flushControl.anyStalledThreads() || flushControl.numQueuedFlushes() > 0) {\n      // Help out flushing any queued DWPTs so we can un-stall:\n      if (infoStream != null) {\n        infoStream.message(\"DW\", \"DocumentsWriter has queued dwpt; will hijack this thread to flush pending segment(s)\");\n      }\n      do {\n        // Try pick up pending threads here if possible\n        DocumentsWriterPerThread flushingDWPT;\n        while ((flushingDWPT = flushControl.nextPendingFlush()) != null) {\n          // Don't push the delete here since the update could fail!\n          maybeMerge |= doFlush(flushingDWPT);\n        }\n  \n        if (infoStream != null && flushControl.anyStalledThreads()) {\n          infoStream.message(\"DW\", \"WARNING DocumentsWriter has stalled threads; waiting\");\n        }\n        \n        flushControl.waitIfStalled(); // block if stalled\n      } while (flushControl.numQueuedFlushes() != 0); // still queued DWPTs try help flushing\n\n      if (infoStream != null) {\n        infoStream.message(\"DW\", \"continue indexing after helping out flushing DocumentsWriter is healthy\");\n      }\n    }\n    return maybeMerge;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c5df35ab57c223ea11aec64b53bf611904f3dced","date":1323640545,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#preUpdate().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#preUpdate().mjava","sourceNew":"  private boolean preUpdate() throws CorruptIndexException, IOException {\n    ensureOpen();\n    boolean maybeMerge = false;\n    if (flushControl.anyStalledThreads() || flushControl.numQueuedFlushes() > 0) {\n      // Help out flushing any queued DWPTs so we can un-stall:\n      if (infoStream.isEnabled(\"DW\")) {\n        infoStream.message(\"DW\", \"DocumentsWriter has queued dwpt; will hijack this thread to flush pending segment(s)\");\n      }\n      do {\n        // Try pick up pending threads here if possible\n        DocumentsWriterPerThread flushingDWPT;\n        while ((flushingDWPT = flushControl.nextPendingFlush()) != null) {\n          // Don't push the delete here since the update could fail!\n          maybeMerge |= doFlush(flushingDWPT);\n        }\n  \n        if (infoStream.isEnabled(\"DW\")) {\n          if (flushControl.anyStalledThreads()) {\n            infoStream.message(\"DW\", \"WARNING DocumentsWriter has stalled threads; waiting\");\n          }\n        }\n        \n        flushControl.waitIfStalled(); // block if stalled\n      } while (flushControl.numQueuedFlushes() != 0); // still queued DWPTs try help flushing\n\n      if (infoStream.isEnabled(\"DW\")) {\n        infoStream.message(\"DW\", \"continue indexing after helping out flushing DocumentsWriter is healthy\");\n      }\n    }\n    return maybeMerge;\n  }\n\n","sourceOld":"  private boolean preUpdate() throws CorruptIndexException, IOException {\n    ensureOpen();\n    boolean maybeMerge = false;\n    if (flushControl.anyStalledThreads() || flushControl.numQueuedFlushes() > 0) {\n      // Help out flushing any queued DWPTs so we can un-stall:\n      if (infoStream.isEnabled(\"DW\")) {\n        infoStream.message(\"DW\", \"DocumentsWriter has queued dwpt; will hijack this thread to flush pending segment(s)\");\n      }\n      do {\n        // Try pick up pending threads here if possible\n        DocumentsWriterPerThread flushingDWPT;\n        while ((flushingDWPT = flushControl.nextPendingFlush()) != null) {\n          // Don't push the delete here since the update could fail!\n          maybeMerge |= doFlush(flushingDWPT);\n        }\n  \n        if (infoStream.isEnabled(\"DW\") && flushControl.anyStalledThreads()) {\n          infoStream.message(\"DW\", \"WARNING DocumentsWriter has stalled threads; waiting\");\n        }\n        \n        flushControl.waitIfStalled(); // block if stalled\n      } while (flushControl.numQueuedFlushes() != 0); // still queued DWPTs try help flushing\n\n      if (infoStream.isEnabled(\"DW\")) {\n        infoStream.message(\"DW\", \"continue indexing after helping out flushing DocumentsWriter is healthy\");\n      }\n    }\n    return maybeMerge;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","date":1323720782,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#preUpdate().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#preUpdate().mjava","sourceNew":"  private boolean preUpdate() throws CorruptIndexException, IOException {\n    ensureOpen();\n    boolean maybeMerge = false;\n    if (flushControl.anyStalledThreads() || flushControl.numQueuedFlushes() > 0) {\n      // Help out flushing any queued DWPTs so we can un-stall:\n      if (infoStream.isEnabled(\"DW\")) {\n        infoStream.message(\"DW\", \"DocumentsWriter has queued dwpt; will hijack this thread to flush pending segment(s)\");\n      }\n      do {\n        // Try pick up pending threads here if possible\n        DocumentsWriterPerThread flushingDWPT;\n        while ((flushingDWPT = flushControl.nextPendingFlush()) != null) {\n          // Don't push the delete here since the update could fail!\n          maybeMerge |= doFlush(flushingDWPT);\n        }\n  \n        if (infoStream.isEnabled(\"DW\")) {\n          if (flushControl.anyStalledThreads()) {\n            infoStream.message(\"DW\", \"WARNING DocumentsWriter has stalled threads; waiting\");\n          }\n        }\n        \n        flushControl.waitIfStalled(); // block if stalled\n      } while (flushControl.numQueuedFlushes() != 0); // still queued DWPTs try help flushing\n\n      if (infoStream.isEnabled(\"DW\")) {\n        infoStream.message(\"DW\", \"continue indexing after helping out flushing DocumentsWriter is healthy\");\n      }\n    }\n    return maybeMerge;\n  }\n\n","sourceOld":"  private boolean preUpdate() throws CorruptIndexException, IOException {\n    ensureOpen();\n    boolean maybeMerge = false;\n    if (flushControl.anyStalledThreads() || flushControl.numQueuedFlushes() > 0) {\n      // Help out flushing any queued DWPTs so we can un-stall:\n      if (infoStream.isEnabled(\"DW\")) {\n        infoStream.message(\"DW\", \"DocumentsWriter has queued dwpt; will hijack this thread to flush pending segment(s)\");\n      }\n      do {\n        // Try pick up pending threads here if possible\n        DocumentsWriterPerThread flushingDWPT;\n        while ((flushingDWPT = flushControl.nextPendingFlush()) != null) {\n          // Don't push the delete here since the update could fail!\n          maybeMerge |= doFlush(flushingDWPT);\n        }\n  \n        if (infoStream.isEnabled(\"DW\") && flushControl.anyStalledThreads()) {\n          infoStream.message(\"DW\", \"WARNING DocumentsWriter has stalled threads; waiting\");\n        }\n        \n        flushControl.waitIfStalled(); // block if stalled\n      } while (flushControl.numQueuedFlushes() != 0); // still queued DWPTs try help flushing\n\n      if (infoStream.isEnabled(\"DW\")) {\n        infoStream.message(\"DW\", \"continue indexing after helping out flushing DocumentsWriter is healthy\");\n      }\n    }\n    return maybeMerge;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriter#preUpdate().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#preUpdate().mjava","sourceNew":"  private boolean preUpdate() throws CorruptIndexException, IOException {\n    ensureOpen();\n    boolean maybeMerge = false;\n    if (flushControl.anyStalledThreads() || flushControl.numQueuedFlushes() > 0) {\n      // Help out flushing any queued DWPTs so we can un-stall:\n      if (infoStream.isEnabled(\"DW\")) {\n        infoStream.message(\"DW\", \"DocumentsWriter has queued dwpt; will hijack this thread to flush pending segment(s)\");\n      }\n      do {\n        // Try pick up pending threads here if possible\n        DocumentsWriterPerThread flushingDWPT;\n        while ((flushingDWPT = flushControl.nextPendingFlush()) != null) {\n          // Don't push the delete here since the update could fail!\n          maybeMerge |= doFlush(flushingDWPT);\n        }\n  \n        if (infoStream.isEnabled(\"DW\")) {\n          if (flushControl.anyStalledThreads()) {\n            infoStream.message(\"DW\", \"WARNING DocumentsWriter has stalled threads; waiting\");\n          }\n        }\n        \n        flushControl.waitIfStalled(); // block if stalled\n      } while (flushControl.numQueuedFlushes() != 0); // still queued DWPTs try help flushing\n\n      if (infoStream.isEnabled(\"DW\")) {\n        infoStream.message(\"DW\", \"continue indexing after helping out flushing DocumentsWriter is healthy\");\n      }\n    }\n    return maybeMerge;\n  }\n\n","sourceOld":"  private boolean preUpdate() throws CorruptIndexException, IOException {\n    ensureOpen();\n    boolean maybeMerge = false;\n    if (flushControl.anyStalledThreads() || flushControl.numQueuedFlushes() > 0) {\n      // Help out flushing any queued DWPTs so we can un-stall:\n      if (infoStream.isEnabled(\"DW\")) {\n        infoStream.message(\"DW\", \"DocumentsWriter has queued dwpt; will hijack this thread to flush pending segment(s)\");\n      }\n      do {\n        // Try pick up pending threads here if possible\n        DocumentsWriterPerThread flushingDWPT;\n        while ((flushingDWPT = flushControl.nextPendingFlush()) != null) {\n          // Don't push the delete here since the update could fail!\n          maybeMerge |= doFlush(flushingDWPT);\n        }\n  \n        if (infoStream.isEnabled(\"DW\")) {\n          if (flushControl.anyStalledThreads()) {\n            infoStream.message(\"DW\", \"WARNING DocumentsWriter has stalled threads; waiting\");\n          }\n        }\n        \n        flushControl.waitIfStalled(); // block if stalled\n      } while (flushControl.numQueuedFlushes() != 0); // still queued DWPTs try help flushing\n\n      if (infoStream.isEnabled(\"DW\")) {\n        infoStream.message(\"DW\", \"continue indexing after helping out flushing DocumentsWriter is healthy\");\n      }\n    }\n    return maybeMerge;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"c5df35ab57c223ea11aec64b53bf611904f3dced":["58c6bbc222f074c844e736e6fb23647e3db9cfe3"],"58c6bbc222f074c844e736e6fb23647e3db9cfe3":["06584e6e98d592b34e1329b384182f368d2025e8"],"2c6dc1a64ac36088ccb8d5e20b74c48c8d3bba27":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c6dc1a64ac36088ccb8d5e20b74c48c8d3bba27"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["c5df35ab57c223ea11aec64b53bf611904f3dced"],"06584e6e98d592b34e1329b384182f368d2025e8":["a1c3710e755dc60691ac0d7fe23c9fcba0537bdc"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":["58c6bbc222f074c844e736e6fb23647e3db9cfe3","c5df35ab57c223ea11aec64b53bf611904f3dced"],"a1c3710e755dc60691ac0d7fe23c9fcba0537bdc":["2c6dc1a64ac36088ccb8d5e20b74c48c8d3bba27"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"2e10cb22a8bdb44339e282925a29182bb2f3174d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c6dc1a64ac36088ccb8d5e20b74c48c8d3bba27"]},"commit2Childs":{"c5df35ab57c223ea11aec64b53bf611904f3dced":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","93ccd971aca7fb61b7f1b946e44714cfc80bfc7c"],"58c6bbc222f074c844e736e6fb23647e3db9cfe3":["c5df35ab57c223ea11aec64b53bf611904f3dced","93ccd971aca7fb61b7f1b946e44714cfc80bfc7c"],"2c6dc1a64ac36088ccb8d5e20b74c48c8d3bba27":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","a1c3710e755dc60691ac0d7fe23c9fcba0537bdc","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":[],"06584e6e98d592b34e1329b384182f368d2025e8":["58c6bbc222f074c844e736e6fb23647e3db9cfe3"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2c6dc1a64ac36088ccb8d5e20b74c48c8d3bba27","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"a1c3710e755dc60691ac0d7fe23c9fcba0537bdc":["06584e6e98d592b34e1329b384182f368d2025e8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2e10cb22a8bdb44339e282925a29182bb2f3174d":[]},"heads":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","cd5edd1f2b162a5cfa08efd17851a07373a96817","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}