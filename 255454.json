{"path":"src/test/org/apache/lucene/index/TestTermdocPerf#addDocs(Directory,int,String,String,int,float).mjava","commits":[{"id":"344337c95aa4df281489f22ffdc39f02bddff145","date":1154633208,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestTermdocPerf#addDocs(Directory,int,String,String,int,float).mjava","pathOld":"/dev/null","sourceNew":"  void addDocs(Directory dir, final int ndocs, String field, final String val, final int maxTF, final float percentDocs) throws IOException {\r\n    final Random random = new Random(0);\r\n    final RepeatingTokenStream ts = new RepeatingTokenStream(val);\r\n\r\n    Analyzer analyzer = new Analyzer() {\r\n      public TokenStream tokenStream(String fieldName, Reader reader) {\r\n        if (random.nextFloat() < percentDocs) ts.num = random.nextInt(maxTF)+1;\r\n        else ts.num=0;\r\n        return ts;\r\n      }\r\n    };\r\n\r\n    Document doc = new Document();\r\n    doc.add(new Field(field,val, Field.Store.NO, Field.Index.NO_NORMS));\r\n    IndexWriter writer = new IndexWriter(dir, analyzer, true);\r\n    writer.setMaxBufferedDocs(100);\r\n    writer.setMergeFactor(100);\r\n\r\n    for (int i=0; i<ndocs; i++) {\r\n      writer.addDocument(doc);\r\n    }\r\n\r\n    writer.optimize();\r\n    writer.close();\r\n  }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0018e7a0579df5d3de71d0bd878322a7abef04d9","date":1202242049,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestTermdocPerf#addDocs(Directory,int,String,String,int,float).mjava","pathOld":"src/test/org/apache/lucene/index/TestTermdocPerf#addDocs(Directory,int,String,String,int,float).mjava","sourceNew":"  void addDocs(Directory dir, final int ndocs, String field, final String val, final int maxTF, final float percentDocs) throws IOException {\r\n    final Random random = new Random(0);\r\n    final RepeatingTokenStream ts = new RepeatingTokenStream(val);\r\n\r\n    Analyzer analyzer = new Analyzer() {\r\n      public TokenStream tokenStream(String fieldName, Reader reader) {\r\n        if (random.nextFloat() < percentDocs) ts.num = random.nextInt(maxTF)+1;\r\n        else ts.num=0;\r\n        return ts;\r\n      }\r\n    };\r\n\r\n    Document doc = new Document();\r\n    doc.add(new Field(field,val, Field.Store.NO, Field.Index.NO_NORMS));\r\n    IndexWriter writer = new IndexWriter(dir, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\r\n    writer.setMaxBufferedDocs(100);\r\n    writer.setMergeFactor(100);\r\n\r\n    for (int i=0; i<ndocs; i++) {\r\n      writer.addDocument(doc);\r\n    }\r\n\r\n    writer.optimize();\r\n    writer.close();\r\n  }\r\n\n","sourceOld":"  void addDocs(Directory dir, final int ndocs, String field, final String val, final int maxTF, final float percentDocs) throws IOException {\r\n    final Random random = new Random(0);\r\n    final RepeatingTokenStream ts = new RepeatingTokenStream(val);\r\n\r\n    Analyzer analyzer = new Analyzer() {\r\n      public TokenStream tokenStream(String fieldName, Reader reader) {\r\n        if (random.nextFloat() < percentDocs) ts.num = random.nextInt(maxTF)+1;\r\n        else ts.num=0;\r\n        return ts;\r\n      }\r\n    };\r\n\r\n    Document doc = new Document();\r\n    doc.add(new Field(field,val, Field.Store.NO, Field.Index.NO_NORMS));\r\n    IndexWriter writer = new IndexWriter(dir, analyzer, true);\r\n    writer.setMaxBufferedDocs(100);\r\n    writer.setMergeFactor(100);\r\n\r\n    for (int i=0; i<ndocs; i++) {\r\n      writer.addDocument(doc);\r\n    }\r\n\r\n    writer.optimize();\r\n    writer.close();\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2123bddbd65dea198cac380540636ce43a880403","date":1211269254,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestTermdocPerf#addDocs(Directory,int,String,String,int,float).mjava","pathOld":"src/test/org/apache/lucene/index/TestTermdocPerf#addDocs(Directory,int,String,String,int,float).mjava","sourceNew":"  void addDocs(Directory dir, final int ndocs, String field, final String val, final int maxTF, final float percentDocs) throws IOException {\n    final Random random = new Random(0);\n    final RepeatingTokenStream ts = new RepeatingTokenStream(val);\n\n    Analyzer analyzer = new Analyzer() {\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        if (random.nextFloat() < percentDocs) ts.num = random.nextInt(maxTF)+1;\n        else ts.num=0;\n        return ts;\n      }\n    };\n\n    Document doc = new Document();\n    doc.add(new Field(field,val, Field.Store.NO, Field.Index.NO_NORMS));\n    IndexWriter writer = new IndexWriter(dir, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMaxBufferedDocs(100);\n    writer.setMergeFactor(100);\n\n    for (int i=0; i<ndocs; i++) {\n      writer.addDocument(doc);\n    }\n\n    writer.optimize();\n    writer.close();\n  }\n\n","sourceOld":"  void addDocs(Directory dir, final int ndocs, String field, final String val, final int maxTF, final float percentDocs) throws IOException {\r\n    final Random random = new Random(0);\r\n    final RepeatingTokenStream ts = new RepeatingTokenStream(val);\r\n\r\n    Analyzer analyzer = new Analyzer() {\r\n      public TokenStream tokenStream(String fieldName, Reader reader) {\r\n        if (random.nextFloat() < percentDocs) ts.num = random.nextInt(maxTF)+1;\r\n        else ts.num=0;\r\n        return ts;\r\n      }\r\n    };\r\n\r\n    Document doc = new Document();\r\n    doc.add(new Field(field,val, Field.Store.NO, Field.Index.NO_NORMS));\r\n    IndexWriter writer = new IndexWriter(dir, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\r\n    writer.setMaxBufferedDocs(100);\r\n    writer.setMergeFactor(100);\r\n\r\n    for (int i=0; i<ndocs; i++) {\r\n      writer.addDocument(doc);\r\n    }\r\n\r\n    writer.optimize();\r\n    writer.close();\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a","date":1221082732,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestTermdocPerf#addDocs(Directory,int,String,String,int,float).mjava","pathOld":"src/test/org/apache/lucene/index/TestTermdocPerf#addDocs(Directory,int,String,String,int,float).mjava","sourceNew":"  void addDocs(Directory dir, final int ndocs, String field, final String val, final int maxTF, final float percentDocs) throws IOException {\n    final Random random = new Random(0);\n    final RepeatingTokenStream ts = new RepeatingTokenStream(val);\n\n    Analyzer analyzer = new Analyzer() {\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        if (random.nextFloat() < percentDocs) ts.num = random.nextInt(maxTF)+1;\n        else ts.num=0;\n        return ts;\n      }\n    };\n\n    Document doc = new Document();\n    doc.add(new Field(field,val, Field.Store.NO, Field.Index.NOT_ANALYZED_NO_NORMS));\n    IndexWriter writer = new IndexWriter(dir, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMaxBufferedDocs(100);\n    writer.setMergeFactor(100);\n\n    for (int i=0; i<ndocs; i++) {\n      writer.addDocument(doc);\n    }\n\n    writer.optimize();\n    writer.close();\n  }\n\n","sourceOld":"  void addDocs(Directory dir, final int ndocs, String field, final String val, final int maxTF, final float percentDocs) throws IOException {\n    final Random random = new Random(0);\n    final RepeatingTokenStream ts = new RepeatingTokenStream(val);\n\n    Analyzer analyzer = new Analyzer() {\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        if (random.nextFloat() < percentDocs) ts.num = random.nextInt(maxTF)+1;\n        else ts.num=0;\n        return ts;\n      }\n    };\n\n    Document doc = new Document();\n    doc.add(new Field(field,val, Field.Store.NO, Field.Index.NO_NORMS));\n    IndexWriter writer = new IndexWriter(dir, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMaxBufferedDocs(100);\n    writer.setMergeFactor(100);\n\n    for (int i=0; i<ndocs; i++) {\n      writer.addDocument(doc);\n    }\n\n    writer.optimize();\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cb1066f2afe9450585d0d10063ea4450085236f1","date":1233870820,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestTermdocPerf#addDocs(Directory,int,String,String,int,float).mjava","pathOld":"src/test/org/apache/lucene/index/TestTermdocPerf#addDocs(Directory,int,String,String,int,float).mjava","sourceNew":"  void addDocs(Directory dir, final int ndocs, String field, final String val, final int maxTF, final float percentDocs) throws IOException {\n    final Random random = newRandom();\n    final RepeatingTokenStream ts = new RepeatingTokenStream(val);\n\n    Analyzer analyzer = new Analyzer() {\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        if (random.nextFloat() < percentDocs) ts.num = random.nextInt(maxTF)+1;\n        else ts.num=0;\n        return ts;\n      }\n    };\n\n    Document doc = new Document();\n    doc.add(new Field(field,val, Field.Store.NO, Field.Index.NOT_ANALYZED_NO_NORMS));\n    IndexWriter writer = new IndexWriter(dir, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMaxBufferedDocs(100);\n    writer.setMergeFactor(100);\n\n    for (int i=0; i<ndocs; i++) {\n      writer.addDocument(doc);\n    }\n\n    writer.optimize();\n    writer.close();\n  }\n\n","sourceOld":"  void addDocs(Directory dir, final int ndocs, String field, final String val, final int maxTF, final float percentDocs) throws IOException {\n    final Random random = new Random(0);\n    final RepeatingTokenStream ts = new RepeatingTokenStream(val);\n\n    Analyzer analyzer = new Analyzer() {\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        if (random.nextFloat() < percentDocs) ts.num = random.nextInt(maxTF)+1;\n        else ts.num=0;\n        return ts;\n      }\n    };\n\n    Document doc = new Document();\n    doc.add(new Field(field,val, Field.Store.NO, Field.Index.NOT_ANALYZED_NO_NORMS));\n    IndexWriter writer = new IndexWriter(dir, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMaxBufferedDocs(100);\n    writer.setMergeFactor(100);\n\n    for (int i=0; i<ndocs; i++) {\n      writer.addDocument(doc);\n    }\n\n    writer.optimize();\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1326054a8d3aa66382d49decc7f330955c9c6f71","date":1257386139,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestTermdocPerf#addDocs(Directory,int,String,String,int,float).mjava","pathOld":"src/test/org/apache/lucene/index/TestTermdocPerf#addDocs(Directory,int,String,String,int,float).mjava","sourceNew":"  void addDocs(Directory dir, final int ndocs, String field, final String val, final int maxTF, final float percentDocs) throws IOException {\n    final Random random = newRandom();\n    final RepeatingTokenStream ts = new RepeatingTokenStream(val);\n\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        if (random.nextFloat() < percentDocs) ts.num = random.nextInt(maxTF)+1;\n        else ts.num=0;\n        return ts;\n      }\n    };\n\n    Document doc = new Document();\n    doc.add(new Field(field,val, Field.Store.NO, Field.Index.NOT_ANALYZED_NO_NORMS));\n    IndexWriter writer = new IndexWriter(dir, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMaxBufferedDocs(100);\n    writer.setMergeFactor(100);\n\n    for (int i=0; i<ndocs; i++) {\n      writer.addDocument(doc);\n    }\n\n    writer.optimize();\n    writer.close();\n  }\n\n","sourceOld":"  void addDocs(Directory dir, final int ndocs, String field, final String val, final int maxTF, final float percentDocs) throws IOException {\n    final Random random = newRandom();\n    final RepeatingTokenStream ts = new RepeatingTokenStream(val);\n\n    Analyzer analyzer = new Analyzer() {\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        if (random.nextFloat() < percentDocs) ts.num = random.nextInt(maxTF)+1;\n        else ts.num=0;\n        return ts;\n      }\n    };\n\n    Document doc = new Document();\n    doc.add(new Field(field,val, Field.Store.NO, Field.Index.NOT_ANALYZED_NO_NORMS));\n    IndexWriter writer = new IndexWriter(dir, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMaxBufferedDocs(100);\n    writer.setMergeFactor(100);\n\n    for (int i=0; i<ndocs; i++) {\n      writer.addDocument(doc);\n    }\n\n    writer.optimize();\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestTermdocPerf#addDocs(Directory,int,String,String,int,float).mjava","pathOld":"src/test/org/apache/lucene/index/TestTermdocPerf#addDocs(Directory,int,String,String,int,float).mjava","sourceNew":"  void addDocs(Directory dir, final int ndocs, String field, final String val, final int maxTF, final float percentDocs) throws IOException {\n    final Random random = newRandom();\n    final RepeatingTokenStream ts = new RepeatingTokenStream(val);\n\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        if (random.nextFloat() < percentDocs) ts.num = random.nextInt(maxTF)+1;\n        else ts.num=0;\n        return ts;\n      }\n    };\n\n    Document doc = new Document();\n    doc.add(new Field(field,val, Field.Store.NO, Field.Index.NOT_ANALYZED_NO_NORMS));\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT).setAnalyzer(analyzer)\n        .setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(100));\n    ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(100);\n\n    for (int i=0; i<ndocs; i++) {\n      writer.addDocument(doc);\n    }\n\n    writer.optimize();\n    writer.close();\n  }\n\n","sourceOld":"  void addDocs(Directory dir, final int ndocs, String field, final String val, final int maxTF, final float percentDocs) throws IOException {\n    final Random random = newRandom();\n    final RepeatingTokenStream ts = new RepeatingTokenStream(val);\n\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        if (random.nextFloat() < percentDocs) ts.num = random.nextInt(maxTF)+1;\n        else ts.num=0;\n        return ts;\n      }\n    };\n\n    Document doc = new Document();\n    doc.add(new Field(field,val, Field.Store.NO, Field.Index.NOT_ANALYZED_NO_NORMS));\n    IndexWriter writer = new IndexWriter(dir, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMaxBufferedDocs(100);\n    writer.setMergeFactor(100);\n\n    for (int i=0; i<ndocs; i++) {\n      writer.addDocument(doc);\n    }\n\n    writer.optimize();\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestTermdocPerf#addDocs(Directory,int,String,String,int,float).mjava","pathOld":"src/test/org/apache/lucene/index/TestTermdocPerf#addDocs(Directory,int,String,String,int,float).mjava","sourceNew":"  void addDocs(Directory dir, final int ndocs, String field, final String val, final int maxTF, final float percentDocs) throws IOException {\n    final Random random = newRandom();\n    final RepeatingTokenStream ts = new RepeatingTokenStream(val);\n\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        if (random.nextFloat() < percentDocs) ts.num = random.nextInt(maxTF)+1;\n        else ts.num=0;\n        return ts;\n      }\n    };\n\n    Document doc = new Document();\n    doc.add(new Field(field,val, Field.Store.NO, Field.Index.NOT_ANALYZED_NO_NORMS));\n    IndexWriter writer = new IndexWriter(dir, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMaxBufferedDocs(100);\n    writer.setMergeFactor(100);\n\n    for (int i=0; i<ndocs; i++) {\n      writer.addDocument(doc);\n    }\n\n    writer.optimize();\n    writer.close();\n  }\n\n","sourceOld":"  void addDocs(Directory dir, final int ndocs, String field, final String val, final int maxTF, final float percentDocs) throws IOException {\n    final Random random = newRandom();\n    final RepeatingTokenStream ts = new RepeatingTokenStream(val);\n\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        if (random.nextFloat() < percentDocs) ts.num = random.nextInt(maxTF)+1;\n        else ts.num=0;\n        return ts;\n      }\n    };\n\n    Document doc = new Document();\n    doc.add(new Field(field,val, Field.Store.NO, Field.Index.NOT_ANALYZED_NO_NORMS));\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT).setAnalyzer(analyzer)\n        .setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(100));\n    ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(100);\n\n    for (int i=0; i<ndocs; i++) {\n      writer.addDocument(doc);\n    }\n\n    writer.optimize();\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestTermdocPerf#addDocs(Directory,int,String,String,int,float).mjava","pathOld":"src/test/org/apache/lucene/index/TestTermdocPerf#addDocs(Directory,int,String,String,int,float).mjava","sourceNew":"  void addDocs(Directory dir, final int ndocs, String field, final String val, final int maxTF, final float percentDocs) throws IOException {\n    final Random random = newRandom();\n    final RepeatingTokenStream ts = new RepeatingTokenStream(val);\n\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        if (random.nextFloat() < percentDocs) ts.num = random.nextInt(maxTF)+1;\n        else ts.num=0;\n        return ts;\n      }\n    };\n\n    Document doc = new Document();\n    doc.add(new Field(field,val, Field.Store.NO, Field.Index.NOT_ANALYZED_NO_NORMS));\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer)\n        .setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(100));\n    ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(100);\n\n    for (int i=0; i<ndocs; i++) {\n      writer.addDocument(doc);\n    }\n\n    writer.optimize();\n    writer.close();\n  }\n\n","sourceOld":"  void addDocs(Directory dir, final int ndocs, String field, final String val, final int maxTF, final float percentDocs) throws IOException {\n    final Random random = newRandom();\n    final RepeatingTokenStream ts = new RepeatingTokenStream(val);\n\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        if (random.nextFloat() < percentDocs) ts.num = random.nextInt(maxTF)+1;\n        else ts.num=0;\n        return ts;\n      }\n    };\n\n    Document doc = new Document();\n    doc.add(new Field(field,val, Field.Store.NO, Field.Index.NOT_ANALYZED_NO_NORMS));\n    IndexWriter writer = new IndexWriter(dir, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMaxBufferedDocs(100);\n    writer.setMergeFactor(100);\n\n    for (int i=0; i<ndocs; i++) {\n      writer.addDocument(doc);\n    }\n\n    writer.optimize();\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestTermdocPerf#addDocs(Directory,int,String,String,int,float).mjava","pathOld":"src/test/org/apache/lucene/index/TestTermdocPerf#addDocs(Directory,int,String,String,int,float).mjava","sourceNew":"  void addDocs(Directory dir, final int ndocs, String field, final String val, final int maxTF, final float percentDocs) throws IOException {\n    final Random random = newRandom();\n    final RepeatingTokenStream ts = new RepeatingTokenStream(val);\n\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        if (random.nextFloat() < percentDocs) ts.num = random.nextInt(maxTF)+1;\n        else ts.num=0;\n        return ts;\n      }\n    };\n\n    Document doc = new Document();\n    doc.add(new Field(field,val, Field.Store.NO, Field.Index.NOT_ANALYZED_NO_NORMS));\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer)\n        .setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(100));\n    ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(100);\n\n    for (int i=0; i<ndocs; i++) {\n      writer.addDocument(doc);\n    }\n\n    writer.optimize();\n    writer.close();\n  }\n\n","sourceOld":"  void addDocs(Directory dir, final int ndocs, String field, final String val, final int maxTF, final float percentDocs) throws IOException {\n    final Random random = newRandom();\n    final RepeatingTokenStream ts = new RepeatingTokenStream(val);\n\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        if (random.nextFloat() < percentDocs) ts.num = random.nextInt(maxTF)+1;\n        else ts.num=0;\n        return ts;\n      }\n    };\n\n    Document doc = new Document();\n    doc.add(new Field(field,val, Field.Store.NO, Field.Index.NOT_ANALYZED_NO_NORMS));\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer)\n        .setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(100));\n    ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(100);\n\n    for (int i=0; i<ndocs; i++) {\n      writer.addDocument(doc);\n    }\n\n    writer.optimize();\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1326054a8d3aa66382d49decc7f330955c9c6f71":["cb1066f2afe9450585d0d10063ea4450085236f1"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"cb1066f2afe9450585d0d10063ea4450085236f1":["b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2123bddbd65dea198cac380540636ce43a880403":["0018e7a0579df5d3de71d0bd878322a7abef04d9"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["1326054a8d3aa66382d49decc7f330955c9c6f71"],"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a":["2123bddbd65dea198cac380540636ce43a880403"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"0018e7a0579df5d3de71d0bd878322a7abef04d9":["344337c95aa4df281489f22ffdc39f02bddff145"],"344337c95aa4df281489f22ffdc39f02bddff145":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"]},"commit2Childs":{"1326054a8d3aa66382d49decc7f330955c9c6f71":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"cb1066f2afe9450585d0d10063ea4450085236f1":["1326054a8d3aa66382d49decc7f330955c9c6f71"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["344337c95aa4df281489f22ffdc39f02bddff145"],"2123bddbd65dea198cac380540636ce43a880403":["b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a":["cb1066f2afe9450585d0d10063ea4450085236f1"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"0018e7a0579df5d3de71d0bd878322a7abef04d9":["2123bddbd65dea198cac380540636ce43a880403"],"344337c95aa4df281489f22ffdc39f02bddff145":["0018e7a0579df5d3de71d0bd878322a7abef04d9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}