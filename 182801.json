{"path":"src/test/org/apache/lucene/analysis/TestStopFilter#doTestStopPositons(StopFilter,boolean).mjava","commits":[{"id":"693d6573b6621fc1265316fc6b042c24235c81d8","date":1199049557,"type":0,"author":"Doron Cohen","isMerge":false,"pathNew":"src/test/org/apache/lucene/analysis/TestStopFilter#doTestStopPositons(StopFilter,boolean).mjava","pathOld":"/dev/null","sourceNew":"  private void doTestStopPositons(StopFilter stpf, boolean enableIcrements) throws IOException {\r\n    log(\"---> test with enable-increments-\"+(enableIcrements?\"enabled\":\"disabled\"));\r\n    stpf.setEnablePositionIncrements(enableIcrements);\r\n    for (int i=0; i<20; i+=3) {\r\n      Token t = stpf.next();\r\n      log(\"Token \"+i+\": \"+t);\r\n      String w = English.intToEnglish(i).trim();\r\n      assertEquals(\"expecting token \"+i+\" to be \"+w,w,t.termText());\r\n      assertEquals(\"all but first token must have position increment of 3\",enableIcrements?(i==0?1:3):1,t.getPositionIncrement());\r\n    }\r\n    assertNull(stpf.next());\r\n  }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2123bddbd65dea198cac380540636ce43a880403","date":1211269254,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/test/org/apache/lucene/analysis/TestStopFilter#doTestStopPositons(StopFilter,boolean).mjava","pathOld":"src/test/org/apache/lucene/analysis/TestStopFilter#doTestStopPositons(StopFilter,boolean).mjava","sourceNew":"  private void doTestStopPositons(StopFilter stpf, boolean enableIcrements) throws IOException {\n    log(\"---> test with enable-increments-\"+(enableIcrements?\"enabled\":\"disabled\"));\n    stpf.setEnablePositionIncrements(enableIcrements);\n    for (int i=0; i<20; i+=3) {\n      Token t = stpf.next();\n      log(\"Token \"+i+\": \"+t);\n      String w = English.intToEnglish(i).trim();\n      assertEquals(\"expecting token \"+i+\" to be \"+w,w,t.termText());\n      assertEquals(\"all but first token must have position increment of 3\",enableIcrements?(i==0?1:3):1,t.getPositionIncrement());\n    }\n    assertNull(stpf.next());\n  }\n\n","sourceOld":"  private void doTestStopPositons(StopFilter stpf, boolean enableIcrements) throws IOException {\r\n    log(\"---> test with enable-increments-\"+(enableIcrements?\"enabled\":\"disabled\"));\r\n    stpf.setEnablePositionIncrements(enableIcrements);\r\n    for (int i=0; i<20; i+=3) {\r\n      Token t = stpf.next();\r\n      log(\"Token \"+i+\": \"+t);\r\n      String w = English.intToEnglish(i).trim();\r\n      assertEquals(\"expecting token \"+i+\" to be \"+w,w,t.termText());\r\n      assertEquals(\"all but first token must have position increment of 3\",enableIcrements?(i==0?1:3):1,t.getPositionIncrement());\r\n    }\r\n    assertNull(stpf.next());\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e2cb543b41c145f33390f460ee743d6693c9c6c","date":1219243087,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/analysis/TestStopFilter#doTestStopPositons(StopFilter,boolean).mjava","pathOld":"src/test/org/apache/lucene/analysis/TestStopFilter#doTestStopPositons(StopFilter,boolean).mjava","sourceNew":"  private void doTestStopPositons(StopFilter stpf, boolean enableIcrements) throws IOException {\n    log(\"---> test with enable-increments-\"+(enableIcrements?\"enabled\":\"disabled\"));\n    stpf.setEnablePositionIncrements(enableIcrements);\n    final Token reusableToken = new Token();\n    for (int i=0; i<20; i+=3) {\n      Token nextToken = stpf.next(reusableToken);\n      log(\"Token \"+i+\": \"+nextToken);\n      String w = English.intToEnglish(i).trim();\n      assertEquals(\"expecting token \"+i+\" to be \"+w,w,nextToken.term());\n      assertEquals(\"all but first token must have position increment of 3\",enableIcrements?(i==0?1:3):1,nextToken.getPositionIncrement());\n    }\n    assertNull(stpf.next(reusableToken));\n  }\n\n","sourceOld":"  private void doTestStopPositons(StopFilter stpf, boolean enableIcrements) throws IOException {\n    log(\"---> test with enable-increments-\"+(enableIcrements?\"enabled\":\"disabled\"));\n    stpf.setEnablePositionIncrements(enableIcrements);\n    for (int i=0; i<20; i+=3) {\n      Token t = stpf.next();\n      log(\"Token \"+i+\": \"+t);\n      String w = English.intToEnglish(i).trim();\n      assertEquals(\"expecting token \"+i+\" to be \"+w,w,t.termText());\n      assertEquals(\"all but first token must have position increment of 3\",enableIcrements?(i==0?1:3):1,t.getPositionIncrement());\n    }\n    assertNull(stpf.next());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74a5e7f20b4a444da9df3b2c0f331fa7a1f64223","date":1227051709,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/test/org/apache/lucene/analysis/TestStopFilter#doTestStopPositons(StopFilter,boolean).mjava","pathOld":"src/test/org/apache/lucene/analysis/TestStopFilter#doTestStopPositons(StopFilter,boolean).mjava","sourceNew":"  private void doTestStopPositons(StopFilter stpf, boolean enableIcrements) throws IOException {\n    log(\"---> test with enable-increments-\"+(enableIcrements?\"enabled\":\"disabled\"));\n    stpf.setEnablePositionIncrements(enableIcrements);\n    TermAttribute termAtt = (TermAttribute) stpf.getAttribute(TermAttribute.class);\n    PositionIncrementAttribute posIncrAtt = (PositionIncrementAttribute) stpf.getAttribute(PositionIncrementAttribute.class);\n    for (int i=0; i<20; i+=3) {\n      assertTrue(stpf.incrementToken());\n      log(\"Token \"+i+\": \"+stpf);\n      String w = English.intToEnglish(i).trim();\n      assertEquals(\"expecting token \"+i+\" to be \"+w,w,termAtt.term());\n      assertEquals(\"all but first token must have position increment of 3\",enableIcrements?(i==0?1:3):1,posIncrAtt.getPositionIncrement());\n    }\n    assertFalse(stpf.incrementToken());\n  }\n\n","sourceOld":"  private void doTestStopPositons(StopFilter stpf, boolean enableIcrements) throws IOException {\n    log(\"---> test with enable-increments-\"+(enableIcrements?\"enabled\":\"disabled\"));\n    stpf.setEnablePositionIncrements(enableIcrements);\n    final Token reusableToken = new Token();\n    for (int i=0; i<20; i+=3) {\n      Token nextToken = stpf.next(reusableToken);\n      log(\"Token \"+i+\": \"+nextToken);\n      String w = English.intToEnglish(i).trim();\n      assertEquals(\"expecting token \"+i+\" to be \"+w,w,nextToken.term());\n      assertEquals(\"all but first token must have position increment of 3\",enableIcrements?(i==0?1:3):1,nextToken.getPositionIncrement());\n    }\n    assertNull(stpf.next(reusableToken));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8d78f014fded44fbde905f4f84cdc21907b371e8","date":1254383623,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/analysis/TestStopFilter#doTestStopPositons(StopFilter,boolean).mjava","pathOld":"src/test/org/apache/lucene/analysis/TestStopFilter#doTestStopPositons(StopFilter,boolean).mjava","sourceNew":"  private void doTestStopPositons(StopFilter stpf, boolean enableIcrements) throws IOException {\n    log(\"---> test with enable-increments-\"+(enableIcrements?\"enabled\":\"disabled\"));\n    stpf.setEnablePositionIncrements(enableIcrements);\n    TermAttribute termAtt = stpf.getAttribute(TermAttribute.class);\n    PositionIncrementAttribute posIncrAtt = stpf.getAttribute(PositionIncrementAttribute.class);\n    for (int i=0; i<20; i+=3) {\n      assertTrue(stpf.incrementToken());\n      log(\"Token \"+i+\": \"+stpf);\n      String w = English.intToEnglish(i).trim();\n      assertEquals(\"expecting token \"+i+\" to be \"+w,w,termAtt.term());\n      assertEquals(\"all but first token must have position increment of 3\",enableIcrements?(i==0?1:3):1,posIncrAtt.getPositionIncrement());\n    }\n    assertFalse(stpf.incrementToken());\n  }\n\n","sourceOld":"  private void doTestStopPositons(StopFilter stpf, boolean enableIcrements) throws IOException {\n    log(\"---> test with enable-increments-\"+(enableIcrements?\"enabled\":\"disabled\"));\n    stpf.setEnablePositionIncrements(enableIcrements);\n    TermAttribute termAtt = (TermAttribute) stpf.getAttribute(TermAttribute.class);\n    PositionIncrementAttribute posIncrAtt = (PositionIncrementAttribute) stpf.getAttribute(PositionIncrementAttribute.class);\n    for (int i=0; i<20; i+=3) {\n      assertTrue(stpf.incrementToken());\n      log(\"Token \"+i+\": \"+stpf);\n      String w = English.intToEnglish(i).trim();\n      assertEquals(\"expecting token \"+i+\" to be \"+w,w,termAtt.term());\n      assertEquals(\"all but first token must have position increment of 3\",enableIcrements?(i==0?1:3):1,posIncrAtt.getPositionIncrement());\n    }\n    assertFalse(stpf.incrementToken());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":4,"author":"Dawid Weiss","isMerge":false,"pathNew":"/dev/null","pathOld":"src/test/org/apache/lucene/analysis/TestStopFilter#doTestStopPositons(StopFilter,boolean).mjava","sourceNew":null,"sourceOld":"  private void doTestStopPositons(StopFilter stpf, boolean enableIcrements) throws IOException {\n    log(\"---> test with enable-increments-\"+(enableIcrements?\"enabled\":\"disabled\"));\n    stpf.setEnablePositionIncrements(enableIcrements);\n    TermAttribute termAtt = stpf.getAttribute(TermAttribute.class);\n    PositionIncrementAttribute posIncrAtt = stpf.getAttribute(PositionIncrementAttribute.class);\n    for (int i=0; i<20; i+=3) {\n      assertTrue(stpf.incrementToken());\n      log(\"Token \"+i+\": \"+stpf);\n      String w = English.intToEnglish(i).trim();\n      assertEquals(\"expecting token \"+i+\" to be \"+w,w,termAtt.term());\n      assertEquals(\"all but first token must have position increment of 3\",enableIcrements?(i==0?1:3):1,posIncrAtt.getPositionIncrement());\n    }\n    assertFalse(stpf.incrementToken());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7e2cb543b41c145f33390f460ee743d6693c9c6c":["2123bddbd65dea198cac380540636ce43a880403"],"74a5e7f20b4a444da9df3b2c0f331fa7a1f64223":["7e2cb543b41c145f33390f460ee743d6693c9c6c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2123bddbd65dea198cac380540636ce43a880403":["693d6573b6621fc1265316fc6b042c24235c81d8"],"8d78f014fded44fbde905f4f84cdc21907b371e8":["74a5e7f20b4a444da9df3b2c0f331fa7a1f64223"],"693d6573b6621fc1265316fc6b042c24235c81d8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["8d78f014fded44fbde905f4f84cdc21907b371e8"]},"commit2Childs":{"7e2cb543b41c145f33390f460ee743d6693c9c6c":["74a5e7f20b4a444da9df3b2c0f331fa7a1f64223"],"74a5e7f20b4a444da9df3b2c0f331fa7a1f64223":["8d78f014fded44fbde905f4f84cdc21907b371e8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["693d6573b6621fc1265316fc6b042c24235c81d8"],"2123bddbd65dea198cac380540636ce43a880403":["7e2cb543b41c145f33390f460ee743d6693c9c6c"],"8d78f014fded44fbde905f4f84cdc21907b371e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"693d6573b6621fc1265316fc6b042c24235c81d8":["2123bddbd65dea198cac380540636ce43a880403"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}