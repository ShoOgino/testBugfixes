{"path":"contrib/spatial/src/java/org/apache/lucene/spatial/tier/projections/CartesianTierPlotter#bestFit(double).mjava","commits":[{"id":"d41c10b9c61bc826acd344f499e062fb46bc42ae","date":1249408917,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/spatial/src/java/org/apache/lucene/spatial/tier/projections/CartesianTierPlotter#bestFit(double).mjava","pathOld":"contrib/spatial/src/java/org/apache/lucene/spatial/tier/projections/CartesianTierPlotter#bestFit(int).mjava","sourceNew":"  /**\n   * Find the tier with the best fit for a bounding box\n   * Best fit is defined as the ceiling of\n   *  log2 (circumference of earth / distance) \n   *  distance is defined as the smallest box fitting\n   *  the corner between a radius and a bounding box.\n   *  \n   *  Distances less than a mile return 15, finer granularity is\n   *  in accurate\n   */\n  public int bestFit(double miles){\n    \n    //28,892 a rough circumference of the earth\n    int circ = 28892;\n    \n    double r = miles / 2.0;\n    \n    double corner = r - Math.sqrt(Math.pow(r, 2) / 2.0d);\n    double times = circ / corner;\n    int bestFit =  (int)Math.ceil(log2(times)) + 1;\n    \n    if (bestFit > 15) {\n      // 15 is the granularity of about 1 mile\n      // finer granularity isn't accurate with standard java math\n      return 15;\n    }\n    return bestFit;\n  }\n\n","sourceOld":"  /**\n   * Find the tier with the best fit for a bounding box\n   * Best fit is defined as the ceiling of\n   *  log2 (circumference of earth / distance) \n   *  distance is defined as the smallest box fitting\n   *  the corner between a radius and a bounding box.\n   *  \n   *  Distances less than a mile return 15, finer granularity is\n   *  in accurate\n   * \n   * @param latitude\n   * @param longitude\n   * @return\n   */\n  public int bestFit(int miles){\n    \n    //28,892 a rough circumference of the earth\n    int circ = 28892;\n    \n    double r = miles / 2.0;\n    \n    double corner = r - Math.sqrt(Math.pow(r, 2) / 2.0d);\n    System.out.println(\"corner \"+ corner);\n    double times = circ / corner;\n    int bestFit =  (int)Math.ceil(log2(times)) + 1;\n    \n    if (bestFit > 15) {\n      // 15 is the granularity of about 1 mile\n      // finer granularity isn't accurate with standard java math\n      return 15;\n    }\n    return bestFit;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/spatial/src/java/org/apache/lucene/spatial/tier/projections/CartesianTierPlotter#bestFit(double).mjava","pathOld":"contrib/spatial/src/java/org/apache/lucene/spatial/tier/projections/CartesianTierPlotter#bestFit(double).mjava","sourceNew":"  /**\n   * Find the tier with the best fit for a bounding box\n   * Best fit is defined as the ceiling of\n   *  log2 (circumference of earth / distance) \n   *  distance is defined as the smallest box fitting\n   *  the corner between a radius and a bounding box.\n   *  \n   *  Distances less than a mile return 15, finer granularity is\n   *  in accurate\n   */\n  public int bestFit(double miles){\n    \n    //28,892 a rough circumference of the earth\n    int circ = 28892;\n    \n    double r = miles / 2.0;\n    \n    double corner = r - Math.sqrt(Math.pow(r, 2) / 2.0d);\n    double times = circ / corner;\n    int bestFit =  (int)Math.ceil(log2(times)) + 1;\n    \n    if (bestFit > 15) {\n      // 15 is the granularity of about 1 mile\n      // finer granularity isn't accurate with standard java math\n      return 15;\n    }\n    return bestFit;\n  }\n\n","sourceOld":"  /**\n   * Find the tier with the best fit for a bounding box\n   * Best fit is defined as the ceiling of\n   *  log2 (circumference of earth / distance) \n   *  distance is defined as the smallest box fitting\n   *  the corner between a radius and a bounding box.\n   *  \n   *  Distances less than a mile return 15, finer granularity is\n   *  in accurate\n   */\n  public int bestFit(double miles){\n    \n    //28,892 a rough circumference of the earth\n    int circ = 28892;\n    \n    double r = miles / 2.0;\n    \n    double corner = r - Math.sqrt(Math.pow(r, 2) / 2.0d);\n    double times = circ / corner;\n    int bestFit =  (int)Math.ceil(log2(times)) + 1;\n    \n    if (bestFit > 15) {\n      // 15 is the granularity of about 1 mile\n      // finer granularity isn't accurate with standard java math\n      return 15;\n    }\n    return bestFit;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d41c10b9c61bc826acd344f499e062fb46bc42ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["d41c10b9c61bc826acd344f499e062fb46bc42ae"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d41c10b9c61bc826acd344f499e062fb46bc42ae"],"d41c10b9c61bc826acd344f499e062fb46bc42ae":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}