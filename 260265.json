{"path":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createJettys(int,boolean).mjava","commits":[{"id":"2c30e4c1cee08b3b229a77991882594fe7250b66","date":1344448871,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createJettys(int,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#createJettys(int,boolean).mjava","sourceNew":"  /**\n   * @param numJettys\n   * @param checkCreatedVsState\n   *          if true, make sure the number created (numJettys) matches the\n   *          number in the cluster state - if you add more jetties this may not\n   *          be the case\n   * @return\n   * @throws Exception\n   */\n  protected List<JettySolrRunner> createJettys(int numJettys, boolean checkCreatedVsState) throws Exception {\n    List<JettySolrRunner> jettys = new ArrayList<JettySolrRunner>();\n    List<SolrServer> clients = new ArrayList<SolrServer>();\n    StringBuilder sb = new StringBuilder();\n    for (int i = 1; i <= numJettys; i++) {\n      if (sb.length() > 0) sb.append(',');\n      JettySolrRunner j = createJetty(new File(getSolrHome()), testDir + \"/jetty\"\n          + this.jettyIntCntr.incrementAndGet(), null, \"solrconfig.xml\", null);\n      jettys.add(j);\n      SolrServer client = createNewSolrServer(j.getLocalPort());\n      clients.add(client);\n    }\n    \n    initCloud();\n    \n    this.jettys.addAll(jettys);\n    this.clients.addAll(clients);\n    \n    if (checkCreatedVsState) {\n      // now wait until we see that the number of shards in the cluster state\n      // matches what we expect\n      int numShards = getNumShards(DEFAULT_COLLECTION);\n      int retries = 0;\n      while (numShards != shardCount) {\n        numShards = getNumShards(DEFAULT_COLLECTION);\n        if (numShards == shardCount) break;\n        if (retries++ == 60) {\n          printLayoutOnTearDown = true;\n          fail(\"Shards in the state does not match what we set:\" + numShards\n              + \" vs \" + shardCount);\n        }\n        Thread.sleep(500);\n      }\n\n      // also make sure we have a leader for each shard\n      for (int i = 1; i <= sliceCount; i++) {\n        zkStateReader.getLeaderProps(DEFAULT_COLLECTION, \"shard\" + i, 10000);\n      }\n    }\n\n    updateMappingsFromZk(this.jettys, this.clients);\n    \n    // build the shard string\n    for (int i = 1; i <= numJettys / 2; i++) {\n      JettySolrRunner j = this.jettys.get(i);\n      JettySolrRunner j2 = this.jettys.get(i + (numJettys / 2 - 1));\n      if (sb.length() > 0) sb.append(',');\n      sb.append(\"localhost:\").append(j.getLocalPort()).append(context);\n      sb.append(\"|localhost:\").append(j2.getLocalPort()).append(context);\n    }\n    shards = sb.toString();\n    \n    return jettys;\n  }\n\n","sourceOld":"  /**\n   * @param numJettys\n   * @param checkCreatedVsState\n   *          if true, make sure the number created (numJettys) matches the\n   *          number in the cluster state - if you add more jetties this may not\n   *          be the case\n   * @return\n   * @throws Exception\n   */\n  private List<JettySolrRunner> createJettys(int numJettys, boolean checkCreatedVsState) throws Exception {\n    List<JettySolrRunner> jettys = new ArrayList<JettySolrRunner>();\n    List<SolrServer> clients = new ArrayList<SolrServer>();\n    StringBuilder sb = new StringBuilder();\n    for (int i = 1; i <= numJettys; i++) {\n      if (sb.length() > 0) sb.append(',');\n      JettySolrRunner j = createJetty(new File(getSolrHome()), testDir + \"/jetty\"\n          + this.jettyIntCntr.incrementAndGet(), null, \"solrconfig.xml\", null);\n      jettys.add(j);\n      SolrServer client = createNewSolrServer(j.getLocalPort());\n      clients.add(client);\n    }\n    \n    initCloud();\n    \n    this.jettys.addAll(jettys);\n    this.clients.addAll(clients);\n    \n    if (checkCreatedVsState) {\n      // now wait until we see that the number of shards in the cluster state\n      // matches what we expect\n      int numShards = getNumShards(DEFAULT_COLLECTION);\n      int retries = 0;\n      while (numShards != shardCount) {\n        numShards = getNumShards(DEFAULT_COLLECTION);\n        if (numShards == shardCount) break;\n        if (retries++ == 60) {\n          printLayoutOnTearDown = true;\n          fail(\"Shards in the state does not match what we set:\" + numShards\n              + \" vs \" + shardCount);\n        }\n        Thread.sleep(500);\n      }\n\n      // also make sure we have a leader for each shard\n      for (int i = 1; i <= sliceCount; i++) {\n        zkStateReader.getLeaderProps(DEFAULT_COLLECTION, \"shard\" + i, 10000);\n      }\n    }\n\n    updateMappingsFromZk(this.jettys, this.clients);\n    \n    // build the shard string\n    for (int i = 1; i <= numJettys / 2; i++) {\n      JettySolrRunner j = this.jettys.get(i);\n      JettySolrRunner j2 = this.jettys.get(i + (numJettys / 2 - 1));\n      if (sb.length() > 0) sb.append(',');\n      sb.append(\"localhost:\").append(j.getLocalPort()).append(context);\n      sb.append(\"|localhost:\").append(j2.getLocalPort()).append(context);\n    }\n    shards = sb.toString();\n    \n    return jettys;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e1de2017537ab5538f357ae8307a1113a0cc8ee3","date":1344454581,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createJettys(int,boolean).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createJettys(int,boolean).mjava","sourceNew":"  /**\n   * @param numJettys\n   * @param checkCreatedVsState\n   *          if true, make sure the number created (numJettys) matches the\n   *          number in the cluster state - if you add more jetties this may not\n   *          be the case\n   * @throws Exception\n   */\n  protected List<JettySolrRunner> createJettys(int numJettys, boolean checkCreatedVsState) throws Exception {\n    List<JettySolrRunner> jettys = new ArrayList<JettySolrRunner>();\n    List<SolrServer> clients = new ArrayList<SolrServer>();\n    StringBuilder sb = new StringBuilder();\n    for (int i = 1; i <= numJettys; i++) {\n      if (sb.length() > 0) sb.append(',');\n      JettySolrRunner j = createJetty(new File(getSolrHome()), testDir + \"/jetty\"\n          + this.jettyIntCntr.incrementAndGet(), null, \"solrconfig.xml\", null);\n      jettys.add(j);\n      SolrServer client = createNewSolrServer(j.getLocalPort());\n      clients.add(client);\n    }\n    \n    initCloud();\n    \n    this.jettys.addAll(jettys);\n    this.clients.addAll(clients);\n    \n    if (checkCreatedVsState) {\n      // now wait until we see that the number of shards in the cluster state\n      // matches what we expect\n      int numShards = getNumShards(DEFAULT_COLLECTION);\n      int retries = 0;\n      while (numShards != shardCount) {\n        numShards = getNumShards(DEFAULT_COLLECTION);\n        if (numShards == shardCount) break;\n        if (retries++ == 60) {\n          printLayoutOnTearDown = true;\n          fail(\"Shards in the state does not match what we set:\" + numShards\n              + \" vs \" + shardCount);\n        }\n        Thread.sleep(500);\n      }\n\n      // also make sure we have a leader for each shard\n      for (int i = 1; i <= sliceCount; i++) {\n        zkStateReader.getLeaderProps(DEFAULT_COLLECTION, \"shard\" + i, 10000);\n      }\n    }\n\n    updateMappingsFromZk(this.jettys, this.clients);\n    \n    // build the shard string\n    for (int i = 1; i <= numJettys / 2; i++) {\n      JettySolrRunner j = this.jettys.get(i);\n      JettySolrRunner j2 = this.jettys.get(i + (numJettys / 2 - 1));\n      if (sb.length() > 0) sb.append(',');\n      sb.append(\"localhost:\").append(j.getLocalPort()).append(context);\n      sb.append(\"|localhost:\").append(j2.getLocalPort()).append(context);\n    }\n    shards = sb.toString();\n    \n    return jettys;\n  }\n\n","sourceOld":"  /**\n   * @param numJettys\n   * @param checkCreatedVsState\n   *          if true, make sure the number created (numJettys) matches the\n   *          number in the cluster state - if you add more jetties this may not\n   *          be the case\n   * @return\n   * @throws Exception\n   */\n  protected List<JettySolrRunner> createJettys(int numJettys, boolean checkCreatedVsState) throws Exception {\n    List<JettySolrRunner> jettys = new ArrayList<JettySolrRunner>();\n    List<SolrServer> clients = new ArrayList<SolrServer>();\n    StringBuilder sb = new StringBuilder();\n    for (int i = 1; i <= numJettys; i++) {\n      if (sb.length() > 0) sb.append(',');\n      JettySolrRunner j = createJetty(new File(getSolrHome()), testDir + \"/jetty\"\n          + this.jettyIntCntr.incrementAndGet(), null, \"solrconfig.xml\", null);\n      jettys.add(j);\n      SolrServer client = createNewSolrServer(j.getLocalPort());\n      clients.add(client);\n    }\n    \n    initCloud();\n    \n    this.jettys.addAll(jettys);\n    this.clients.addAll(clients);\n    \n    if (checkCreatedVsState) {\n      // now wait until we see that the number of shards in the cluster state\n      // matches what we expect\n      int numShards = getNumShards(DEFAULT_COLLECTION);\n      int retries = 0;\n      while (numShards != shardCount) {\n        numShards = getNumShards(DEFAULT_COLLECTION);\n        if (numShards == shardCount) break;\n        if (retries++ == 60) {\n          printLayoutOnTearDown = true;\n          fail(\"Shards in the state does not match what we set:\" + numShards\n              + \" vs \" + shardCount);\n        }\n        Thread.sleep(500);\n      }\n\n      // also make sure we have a leader for each shard\n      for (int i = 1; i <= sliceCount; i++) {\n        zkStateReader.getLeaderProps(DEFAULT_COLLECTION, \"shard\" + i, 10000);\n      }\n    }\n\n    updateMappingsFromZk(this.jettys, this.clients);\n    \n    // build the shard string\n    for (int i = 1; i <= numJettys / 2; i++) {\n      JettySolrRunner j = this.jettys.get(i);\n      JettySolrRunner j2 = this.jettys.get(i + (numJettys / 2 - 1));\n      if (sb.length() > 0) sb.append(',');\n      sb.append(\"localhost:\").append(j.getLocalPort()).append(context);\n      sb.append(\"|localhost:\").append(j2.getLocalPort()).append(context);\n    }\n    shards = sb.toString();\n    \n    return jettys;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createJettys(int,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * @param numJettys\n   * @param checkCreatedVsState\n   *          if true, make sure the number created (numJettys) matches the\n   *          number in the cluster state - if you add more jetties this may not\n   *          be the case\n   * @throws Exception\n   */\n  protected List<JettySolrRunner> createJettys(int numJettys, boolean checkCreatedVsState) throws Exception {\n    List<JettySolrRunner> jettys = new ArrayList<JettySolrRunner>();\n    List<SolrServer> clients = new ArrayList<SolrServer>();\n    StringBuilder sb = new StringBuilder();\n    for (int i = 1; i <= numJettys; i++) {\n      if (sb.length() > 0) sb.append(',');\n      JettySolrRunner j = createJetty(new File(getSolrHome()), testDir + \"/jetty\"\n          + this.jettyIntCntr.incrementAndGet(), null, \"solrconfig.xml\", null);\n      jettys.add(j);\n      SolrServer client = createNewSolrServer(j.getLocalPort());\n      clients.add(client);\n    }\n    \n    initCloud();\n    \n    this.jettys.addAll(jettys);\n    this.clients.addAll(clients);\n    \n    if (checkCreatedVsState) {\n      // now wait until we see that the number of shards in the cluster state\n      // matches what we expect\n      int numShards = getNumShards(DEFAULT_COLLECTION);\n      int retries = 0;\n      while (numShards != shardCount) {\n        numShards = getNumShards(DEFAULT_COLLECTION);\n        if (numShards == shardCount) break;\n        if (retries++ == 60) {\n          printLayoutOnTearDown = true;\n          fail(\"Shards in the state does not match what we set:\" + numShards\n              + \" vs \" + shardCount);\n        }\n        Thread.sleep(500);\n      }\n\n      // also make sure we have a leader for each shard\n      for (int i = 1; i <= sliceCount; i++) {\n        zkStateReader.getLeaderProps(DEFAULT_COLLECTION, \"shard\" + i, 10000);\n      }\n    }\n\n    updateMappingsFromZk(this.jettys, this.clients);\n    \n    // build the shard string\n    for (int i = 1; i <= numJettys / 2; i++) {\n      JettySolrRunner j = this.jettys.get(i);\n      JettySolrRunner j2 = this.jettys.get(i + (numJettys / 2 - 1));\n      if (sb.length() > 0) sb.append(',');\n      sb.append(\"localhost:\").append(j.getLocalPort()).append(context);\n      sb.append(\"|localhost:\").append(j2.getLocalPort()).append(context);\n    }\n    shards = sb.toString();\n    \n    return jettys;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7869f64c874ebf7f317d22c00baf2b6857797a6","date":1344856617,"type":1,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createJettys(int,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#createJettys(int,boolean).mjava","sourceNew":"  /**\n   * @param numJettys\n   * @param checkCreatedVsState\n   *          if true, make sure the number created (numJettys) matches the\n   *          number in the cluster state - if you add more jetties this may not\n   *          be the case\n   * @throws Exception\n   */\n  protected List<JettySolrRunner> createJettys(int numJettys, boolean checkCreatedVsState) throws Exception {\n    List<JettySolrRunner> jettys = new ArrayList<JettySolrRunner>();\n    List<SolrServer> clients = new ArrayList<SolrServer>();\n    StringBuilder sb = new StringBuilder();\n    for (int i = 1; i <= numJettys; i++) {\n      if (sb.length() > 0) sb.append(',');\n      JettySolrRunner j = createJetty(new File(getSolrHome()), testDir + \"/jetty\"\n          + this.jettyIntCntr.incrementAndGet(), null, \"solrconfig.xml\", null);\n      jettys.add(j);\n      SolrServer client = createNewSolrServer(j.getLocalPort());\n      clients.add(client);\n    }\n    \n    initCloud();\n    \n    this.jettys.addAll(jettys);\n    this.clients.addAll(clients);\n    \n    if (checkCreatedVsState) {\n      // now wait until we see that the number of shards in the cluster state\n      // matches what we expect\n      int numShards = getNumShards(DEFAULT_COLLECTION);\n      int retries = 0;\n      while (numShards != shardCount) {\n        numShards = getNumShards(DEFAULT_COLLECTION);\n        if (numShards == shardCount) break;\n        if (retries++ == 60) {\n          printLayoutOnTearDown = true;\n          fail(\"Shards in the state does not match what we set:\" + numShards\n              + \" vs \" + shardCount);\n        }\n        Thread.sleep(500);\n      }\n\n      // also make sure we have a leader for each shard\n      for (int i = 1; i <= sliceCount; i++) {\n        zkStateReader.getLeaderProps(DEFAULT_COLLECTION, \"shard\" + i, 10000);\n      }\n    }\n\n    updateMappingsFromZk(this.jettys, this.clients);\n    \n    // build the shard string\n    for (int i = 1; i <= numJettys / 2; i++) {\n      JettySolrRunner j = this.jettys.get(i);\n      JettySolrRunner j2 = this.jettys.get(i + (numJettys / 2 - 1));\n      if (sb.length() > 0) sb.append(',');\n      sb.append(\"localhost:\").append(j.getLocalPort()).append(context);\n      sb.append(\"|localhost:\").append(j2.getLocalPort()).append(context);\n    }\n    shards = sb.toString();\n    \n    return jettys;\n  }\n\n","sourceOld":"  /**\n   * @param numJettys\n   * @param checkCreatedVsState\n   *          if true, make sure the number created (numJettys) matches the\n   *          number in the cluster state - if you add more jetties this may not\n   *          be the case\n   * @return\n   * @throws Exception\n   */\n  private List<JettySolrRunner> createJettys(int numJettys, boolean checkCreatedVsState) throws Exception {\n    List<JettySolrRunner> jettys = new ArrayList<JettySolrRunner>();\n    List<SolrServer> clients = new ArrayList<SolrServer>();\n    StringBuilder sb = new StringBuilder();\n    for (int i = 1; i <= numJettys; i++) {\n      if (sb.length() > 0) sb.append(',');\n      JettySolrRunner j = createJetty(new File(getSolrHome()), testDir + \"/jetty\"\n          + this.jettyIntCntr.incrementAndGet(), null, \"solrconfig.xml\", null);\n      jettys.add(j);\n      SolrServer client = createNewSolrServer(j.getLocalPort());\n      clients.add(client);\n    }\n    \n    initCloud();\n    \n    this.jettys.addAll(jettys);\n    this.clients.addAll(clients);\n    \n    if (checkCreatedVsState) {\n      // now wait until we see that the number of shards in the cluster state\n      // matches what we expect\n      int numShards = getNumShards(DEFAULT_COLLECTION);\n      int retries = 0;\n      while (numShards != shardCount) {\n        numShards = getNumShards(DEFAULT_COLLECTION);\n        if (numShards == shardCount) break;\n        if (retries++ == 60) {\n          printLayoutOnTearDown = true;\n          fail(\"Shards in the state does not match what we set:\" + numShards\n              + \" vs \" + shardCount);\n        }\n        Thread.sleep(500);\n      }\n\n      // also make sure we have a leader for each shard\n      for (int i = 1; i <= sliceCount; i++) {\n        zkStateReader.getLeaderProps(DEFAULT_COLLECTION, \"shard\" + i, 10000);\n      }\n    }\n\n    updateMappingsFromZk(this.jettys, this.clients);\n    \n    // build the shard string\n    for (int i = 1; i <= numJettys / 2; i++) {\n      JettySolrRunner j = this.jettys.get(i);\n      JettySolrRunner j2 = this.jettys.get(i + (numJettys / 2 - 1));\n      if (sb.length() > 0) sb.append(',');\n      sb.append(\"localhost:\").append(j.getLocalPort()).append(context);\n      sb.append(\"|localhost:\").append(j2.getLocalPort()).append(context);\n    }\n    shards = sb.toString();\n    \n    return jettys;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e19067e820b148e8dc0b240da4f2771cf7b68252","date":1347730768,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createJettys(int,boolean).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createJettys(int,boolean).mjava","sourceNew":"  /**\n   * @param numJettys\n   * @param checkCreatedVsState\n   *          if true, make sure the number created (numJettys) matches the\n   *          number in the cluster state - if you add more jetties this may not\n   *          be the case\n   * @throws Exception\n   */\n  protected List<JettySolrRunner> createJettys(int numJettys, boolean checkCreatedVsState) throws Exception {\n    List<JettySolrRunner> jettys = new ArrayList<JettySolrRunner>();\n    List<SolrServer> clients = new ArrayList<SolrServer>();\n    StringBuilder sb = new StringBuilder();\n    for (int i = 1; i <= numJettys; i++) {\n      if (sb.length() > 0) sb.append(',');\n      int cnt = this.jettyIntCntr.incrementAndGet();\n      File jettyDir = new File(TEMP_DIR,\n          \"solrtest-\" + \"jetty\" + cnt + \"-\" + System.currentTimeMillis());\n      jettyDir.mkdirs();\n      org.apache.commons.io.FileUtils.copyDirectory(new File(getSolrHome()), jettyDir);\n      JettySolrRunner j = createJetty(jettyDir, testDir + \"/jetty\"\n          + cnt, null, \"solrconfig.xml\", null);\n      jettys.add(j);\n      SolrServer client = createNewSolrServer(j.getLocalPort());\n      clients.add(client);\n    }\n    \n    initCloud();\n    \n    this.jettys.addAll(jettys);\n    this.clients.addAll(clients);\n    \n    if (checkCreatedVsState) {\n      // now wait until we see that the number of shards in the cluster state\n      // matches what we expect\n      int numShards = getNumShards(DEFAULT_COLLECTION);\n      int retries = 0;\n      while (numShards != shardCount) {\n        numShards = getNumShards(DEFAULT_COLLECTION);\n        if (numShards == shardCount) break;\n        if (retries++ == 60) {\n          printLayoutOnTearDown = true;\n          fail(\"Shards in the state does not match what we set:\" + numShards\n              + \" vs \" + shardCount);\n        }\n        Thread.sleep(500);\n      }\n\n      // also make sure we have a leader for each shard\n      for (int i = 1; i <= sliceCount; i++) {\n        zkStateReader.getLeaderProps(DEFAULT_COLLECTION, \"shard\" + i, 10000);\n      }\n    }\n\n    updateMappingsFromZk(this.jettys, this.clients);\n    \n    // build the shard string\n    for (int i = 1; i <= numJettys / 2; i++) {\n      JettySolrRunner j = this.jettys.get(i);\n      JettySolrRunner j2 = this.jettys.get(i + (numJettys / 2 - 1));\n      if (sb.length() > 0) sb.append(',');\n      sb.append(\"localhost:\").append(j.getLocalPort()).append(context);\n      sb.append(\"|localhost:\").append(j2.getLocalPort()).append(context);\n    }\n    shards = sb.toString();\n    \n    return jettys;\n  }\n\n","sourceOld":"  /**\n   * @param numJettys\n   * @param checkCreatedVsState\n   *          if true, make sure the number created (numJettys) matches the\n   *          number in the cluster state - if you add more jetties this may not\n   *          be the case\n   * @throws Exception\n   */\n  protected List<JettySolrRunner> createJettys(int numJettys, boolean checkCreatedVsState) throws Exception {\n    List<JettySolrRunner> jettys = new ArrayList<JettySolrRunner>();\n    List<SolrServer> clients = new ArrayList<SolrServer>();\n    StringBuilder sb = new StringBuilder();\n    for (int i = 1; i <= numJettys; i++) {\n      if (sb.length() > 0) sb.append(',');\n      JettySolrRunner j = createJetty(new File(getSolrHome()), testDir + \"/jetty\"\n          + this.jettyIntCntr.incrementAndGet(), null, \"solrconfig.xml\", null);\n      jettys.add(j);\n      SolrServer client = createNewSolrServer(j.getLocalPort());\n      clients.add(client);\n    }\n    \n    initCloud();\n    \n    this.jettys.addAll(jettys);\n    this.clients.addAll(clients);\n    \n    if (checkCreatedVsState) {\n      // now wait until we see that the number of shards in the cluster state\n      // matches what we expect\n      int numShards = getNumShards(DEFAULT_COLLECTION);\n      int retries = 0;\n      while (numShards != shardCount) {\n        numShards = getNumShards(DEFAULT_COLLECTION);\n        if (numShards == shardCount) break;\n        if (retries++ == 60) {\n          printLayoutOnTearDown = true;\n          fail(\"Shards in the state does not match what we set:\" + numShards\n              + \" vs \" + shardCount);\n        }\n        Thread.sleep(500);\n      }\n\n      // also make sure we have a leader for each shard\n      for (int i = 1; i <= sliceCount; i++) {\n        zkStateReader.getLeaderProps(DEFAULT_COLLECTION, \"shard\" + i, 10000);\n      }\n    }\n\n    updateMappingsFromZk(this.jettys, this.clients);\n    \n    // build the shard string\n    for (int i = 1; i <= numJettys / 2; i++) {\n      JettySolrRunner j = this.jettys.get(i);\n      JettySolrRunner j2 = this.jettys.get(i + (numJettys / 2 - 1));\n      if (sb.length() > 0) sb.append(',');\n      sb.append(\"localhost:\").append(j.getLocalPort()).append(context);\n      sb.append(\"|localhost:\").append(j2.getLocalPort()).append(context);\n    }\n    shards = sb.toString();\n    \n    return jettys;\n  }\n\n","bugFix":["33d0ed80b7b47e34ad3ff033a77544563aba3085","7cf464adc9721589a2872247d15442e59766e791"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"47c952a4f0f0e9b74763a0609a3726dbb217164a","date":1347968413,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createJettys(int,boolean).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createJettys(int,boolean).mjava","sourceNew":"  /**\n   * @param numJettys\n   * @param checkCreatedVsState\n   *          if true, make sure the number created (numJettys) matches the\n   *          number in the cluster state - if you add more jetties this may not\n   *          be the case\n   * @throws Exception\n   */\n  protected List<JettySolrRunner> createJettys(int numJettys, boolean checkCreatedVsState) throws Exception {\n    List<JettySolrRunner> jettys = new ArrayList<JettySolrRunner>();\n    List<SolrServer> clients = new ArrayList<SolrServer>();\n    StringBuilder sb = new StringBuilder();\n    for (int i = 1; i <= numJettys; i++) {\n      if (sb.length() > 0) sb.append(',');\n      int cnt = this.jettyIntCntr.incrementAndGet();\n      File jettyDir = new File(TEMP_DIR,\n          \"solrtest-\" + \"jetty\" + cnt + \"-\" + System.currentTimeMillis());\n      jettyDir.mkdirs();\n      org.apache.commons.io.FileUtils.copyDirectory(new File(getSolrHome()), jettyDir);\n      JettySolrRunner j = createJetty(jettyDir, testDir + \"/jetty\"\n          + cnt, null, \"solrconfig.xml\", null);\n      jettys.add(j);\n      SolrServer client = createNewSolrServer(j.getLocalPort());\n      clients.add(client);\n    }\n    \n    initCloud();\n    \n    this.jettys.addAll(jettys);\n    this.clients.addAll(clients);\n    \n    if (checkCreatedVsState) {\n      // now wait until we see that the number of shards in the cluster state\n      // matches what we expect\n      int numShards = getNumShards(DEFAULT_COLLECTION);\n      int retries = 0;\n      while (numShards != shardCount) {\n        numShards = getNumShards(DEFAULT_COLLECTION);\n        if (numShards == shardCount) break;\n        if (retries++ == 60) {\n          printLayoutOnTearDown = true;\n          fail(\"Shards in the state does not match what we set:\" + numShards\n              + \" vs \" + shardCount);\n        }\n        Thread.sleep(500);\n      }\n\n      // also make sure we have a leader for each shard\n      for (int i = 1; i <= sliceCount; i++) {\n        zkStateReader.getLeaderProps(DEFAULT_COLLECTION, \"shard\" + i, 10000);\n      }\n    }\n\n    updateMappingsFromZk(this.jettys, this.clients);\n    \n    // build the shard string\n    for (int i = 1; i <= numJettys / 2; i++) {\n      JettySolrRunner j = this.jettys.get(i);\n      JettySolrRunner j2 = this.jettys.get(i + (numJettys / 2 - 1));\n      if (sb.length() > 0) sb.append(',');\n      sb.append(\"127.0.0.1:\").append(j.getLocalPort()).append(context);\n      sb.append(\"|127.0.0.1:\").append(j2.getLocalPort()).append(context);\n    }\n    shards = sb.toString();\n    \n    return jettys;\n  }\n\n","sourceOld":"  /**\n   * @param numJettys\n   * @param checkCreatedVsState\n   *          if true, make sure the number created (numJettys) matches the\n   *          number in the cluster state - if you add more jetties this may not\n   *          be the case\n   * @throws Exception\n   */\n  protected List<JettySolrRunner> createJettys(int numJettys, boolean checkCreatedVsState) throws Exception {\n    List<JettySolrRunner> jettys = new ArrayList<JettySolrRunner>();\n    List<SolrServer> clients = new ArrayList<SolrServer>();\n    StringBuilder sb = new StringBuilder();\n    for (int i = 1; i <= numJettys; i++) {\n      if (sb.length() > 0) sb.append(',');\n      int cnt = this.jettyIntCntr.incrementAndGet();\n      File jettyDir = new File(TEMP_DIR,\n          \"solrtest-\" + \"jetty\" + cnt + \"-\" + System.currentTimeMillis());\n      jettyDir.mkdirs();\n      org.apache.commons.io.FileUtils.copyDirectory(new File(getSolrHome()), jettyDir);\n      JettySolrRunner j = createJetty(jettyDir, testDir + \"/jetty\"\n          + cnt, null, \"solrconfig.xml\", null);\n      jettys.add(j);\n      SolrServer client = createNewSolrServer(j.getLocalPort());\n      clients.add(client);\n    }\n    \n    initCloud();\n    \n    this.jettys.addAll(jettys);\n    this.clients.addAll(clients);\n    \n    if (checkCreatedVsState) {\n      // now wait until we see that the number of shards in the cluster state\n      // matches what we expect\n      int numShards = getNumShards(DEFAULT_COLLECTION);\n      int retries = 0;\n      while (numShards != shardCount) {\n        numShards = getNumShards(DEFAULT_COLLECTION);\n        if (numShards == shardCount) break;\n        if (retries++ == 60) {\n          printLayoutOnTearDown = true;\n          fail(\"Shards in the state does not match what we set:\" + numShards\n              + \" vs \" + shardCount);\n        }\n        Thread.sleep(500);\n      }\n\n      // also make sure we have a leader for each shard\n      for (int i = 1; i <= sliceCount; i++) {\n        zkStateReader.getLeaderProps(DEFAULT_COLLECTION, \"shard\" + i, 10000);\n      }\n    }\n\n    updateMappingsFromZk(this.jettys, this.clients);\n    \n    // build the shard string\n    for (int i = 1; i <= numJettys / 2; i++) {\n      JettySolrRunner j = this.jettys.get(i);\n      JettySolrRunner j2 = this.jettys.get(i + (numJettys / 2 - 1));\n      if (sb.length() > 0) sb.append(',');\n      sb.append(\"localhost:\").append(j.getLocalPort()).append(context);\n      sb.append(\"|localhost:\").append(j2.getLocalPort()).append(context);\n    }\n    shards = sb.toString();\n    \n    return jettys;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"69c0b7c6f9804817f14bd78c3795cdd9f6ddae5c","date":1348235008,"type":3,"author":"Sami Siren","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createJettys(int,boolean).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createJettys(int,boolean).mjava","sourceNew":"  /**\n   * @param numJettys\n   * @param checkCreatedVsState\n   *          if true, make sure the number created (numJettys) matches the\n   *          number in the cluster state - if you add more jetties this may not\n   *          be the case\n   * @throws Exception\n   */\n  protected List<JettySolrRunner> createJettys(int numJettys, boolean checkCreatedVsState) throws Exception {\n    List<JettySolrRunner> jettys = new ArrayList<JettySolrRunner>();\n    List<SolrServer> clients = new ArrayList<SolrServer>();\n    StringBuilder sb = new StringBuilder();\n    for (int i = 1; i <= numJettys; i++) {\n      if (sb.length() > 0) sb.append(',');\n      int cnt = this.jettyIntCntr.incrementAndGet();\n      File jettyDir = new File(TEMP_DIR,\n          getClass().getName() + \"-jetty\" + cnt + \"-\" + System.currentTimeMillis());\n      jettyDir.mkdirs();\n      org.apache.commons.io.FileUtils.copyDirectory(new File(getSolrHome()), jettyDir);\n      JettySolrRunner j = createJetty(jettyDir, testDir + \"/jetty\"\n          + cnt, null, \"solrconfig.xml\", null);\n      jettys.add(j);\n      SolrServer client = createNewSolrServer(j.getLocalPort());\n      clients.add(client);\n    }\n    \n    initCloud();\n    \n    this.jettys.addAll(jettys);\n    this.clients.addAll(clients);\n    \n    if (checkCreatedVsState) {\n      // now wait until we see that the number of shards in the cluster state\n      // matches what we expect\n      int numShards = getNumShards(DEFAULT_COLLECTION);\n      int retries = 0;\n      while (numShards != shardCount) {\n        numShards = getNumShards(DEFAULT_COLLECTION);\n        if (numShards == shardCount) break;\n        if (retries++ == 60) {\n          printLayoutOnTearDown = true;\n          fail(\"Shards in the state does not match what we set:\" + numShards\n              + \" vs \" + shardCount);\n        }\n        Thread.sleep(500);\n      }\n\n      // also make sure we have a leader for each shard\n      for (int i = 1; i <= sliceCount; i++) {\n        zkStateReader.getLeaderProps(DEFAULT_COLLECTION, \"shard\" + i, 10000);\n      }\n    }\n\n    updateMappingsFromZk(this.jettys, this.clients);\n    \n    // build the shard string\n    for (int i = 1; i <= numJettys / 2; i++) {\n      JettySolrRunner j = this.jettys.get(i);\n      JettySolrRunner j2 = this.jettys.get(i + (numJettys / 2 - 1));\n      if (sb.length() > 0) sb.append(',');\n      sb.append(\"127.0.0.1:\").append(j.getLocalPort()).append(context);\n      sb.append(\"|127.0.0.1:\").append(j2.getLocalPort()).append(context);\n    }\n    shards = sb.toString();\n    \n    return jettys;\n  }\n\n","sourceOld":"  /**\n   * @param numJettys\n   * @param checkCreatedVsState\n   *          if true, make sure the number created (numJettys) matches the\n   *          number in the cluster state - if you add more jetties this may not\n   *          be the case\n   * @throws Exception\n   */\n  protected List<JettySolrRunner> createJettys(int numJettys, boolean checkCreatedVsState) throws Exception {\n    List<JettySolrRunner> jettys = new ArrayList<JettySolrRunner>();\n    List<SolrServer> clients = new ArrayList<SolrServer>();\n    StringBuilder sb = new StringBuilder();\n    for (int i = 1; i <= numJettys; i++) {\n      if (sb.length() > 0) sb.append(',');\n      int cnt = this.jettyIntCntr.incrementAndGet();\n      File jettyDir = new File(TEMP_DIR,\n          \"solrtest-\" + \"jetty\" + cnt + \"-\" + System.currentTimeMillis());\n      jettyDir.mkdirs();\n      org.apache.commons.io.FileUtils.copyDirectory(new File(getSolrHome()), jettyDir);\n      JettySolrRunner j = createJetty(jettyDir, testDir + \"/jetty\"\n          + cnt, null, \"solrconfig.xml\", null);\n      jettys.add(j);\n      SolrServer client = createNewSolrServer(j.getLocalPort());\n      clients.add(client);\n    }\n    \n    initCloud();\n    \n    this.jettys.addAll(jettys);\n    this.clients.addAll(clients);\n    \n    if (checkCreatedVsState) {\n      // now wait until we see that the number of shards in the cluster state\n      // matches what we expect\n      int numShards = getNumShards(DEFAULT_COLLECTION);\n      int retries = 0;\n      while (numShards != shardCount) {\n        numShards = getNumShards(DEFAULT_COLLECTION);\n        if (numShards == shardCount) break;\n        if (retries++ == 60) {\n          printLayoutOnTearDown = true;\n          fail(\"Shards in the state does not match what we set:\" + numShards\n              + \" vs \" + shardCount);\n        }\n        Thread.sleep(500);\n      }\n\n      // also make sure we have a leader for each shard\n      for (int i = 1; i <= sliceCount; i++) {\n        zkStateReader.getLeaderProps(DEFAULT_COLLECTION, \"shard\" + i, 10000);\n      }\n    }\n\n    updateMappingsFromZk(this.jettys, this.clients);\n    \n    // build the shard string\n    for (int i = 1; i <= numJettys / 2; i++) {\n      JettySolrRunner j = this.jettys.get(i);\n      JettySolrRunner j2 = this.jettys.get(i + (numJettys / 2 - 1));\n      if (sb.length() > 0) sb.append(',');\n      sb.append(\"127.0.0.1:\").append(j.getLocalPort()).append(context);\n      sb.append(\"|127.0.0.1:\").append(j2.getLocalPort()).append(context);\n    }\n    shards = sb.toString();\n    \n    return jettys;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","date":1348430063,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createJettys(int,boolean).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createJettys(int,boolean).mjava","sourceNew":"  /**\n   * @param checkCreatedVsState\n   *          if true, make sure the number created (numJettys) matches the\n   *          number in the cluster state - if you add more jetties this may not\n   *          be the case\n   */\n  protected List<JettySolrRunner> createJettys(int numJettys, boolean checkCreatedVsState) throws Exception {\n    List<JettySolrRunner> jettys = new ArrayList<JettySolrRunner>();\n    List<SolrServer> clients = new ArrayList<SolrServer>();\n    StringBuilder sb = new StringBuilder();\n    for (int i = 1; i <= numJettys; i++) {\n      if (sb.length() > 0) sb.append(',');\n      int cnt = this.jettyIntCntr.incrementAndGet();\n      File jettyDir = new File(TEMP_DIR,\n          getClass().getName() + \"-jetty\" + cnt + \"-\" + System.currentTimeMillis());\n      jettyDir.mkdirs();\n      org.apache.commons.io.FileUtils.copyDirectory(new File(getSolrHome()), jettyDir);\n      JettySolrRunner j = createJetty(jettyDir, testDir + \"/jetty\"\n          + cnt, null, \"solrconfig.xml\", null);\n      jettys.add(j);\n      SolrServer client = createNewSolrServer(j.getLocalPort());\n      clients.add(client);\n    }\n    \n    initCloud();\n    \n    this.jettys.addAll(jettys);\n    this.clients.addAll(clients);\n    \n    if (checkCreatedVsState) {\n      // now wait until we see that the number of shards in the cluster state\n      // matches what we expect\n      int numShards = getNumShards(DEFAULT_COLLECTION);\n      int retries = 0;\n      while (numShards != shardCount) {\n        numShards = getNumShards(DEFAULT_COLLECTION);\n        if (numShards == shardCount) break;\n        if (retries++ == 60) {\n          printLayoutOnTearDown = true;\n          fail(\"Shards in the state does not match what we set:\" + numShards\n              + \" vs \" + shardCount);\n        }\n        Thread.sleep(500);\n      }\n\n      // also make sure we have a leader for each shard\n      for (int i = 1; i <= sliceCount; i++) {\n        zkStateReader.getLeaderProps(DEFAULT_COLLECTION, \"shard\" + i, 10000);\n      }\n    }\n\n    updateMappingsFromZk(this.jettys, this.clients);\n    \n    // build the shard string\n    for (int i = 1; i <= numJettys / 2; i++) {\n      JettySolrRunner j = this.jettys.get(i);\n      JettySolrRunner j2 = this.jettys.get(i + (numJettys / 2 - 1));\n      if (sb.length() > 0) sb.append(',');\n      sb.append(\"127.0.0.1:\").append(j.getLocalPort()).append(context);\n      sb.append(\"|127.0.0.1:\").append(j2.getLocalPort()).append(context);\n    }\n    shards = sb.toString();\n    \n    return jettys;\n  }\n\n","sourceOld":"  /**\n   * @param numJettys\n   * @param checkCreatedVsState\n   *          if true, make sure the number created (numJettys) matches the\n   *          number in the cluster state - if you add more jetties this may not\n   *          be the case\n   * @throws Exception\n   */\n  protected List<JettySolrRunner> createJettys(int numJettys, boolean checkCreatedVsState) throws Exception {\n    List<JettySolrRunner> jettys = new ArrayList<JettySolrRunner>();\n    List<SolrServer> clients = new ArrayList<SolrServer>();\n    StringBuilder sb = new StringBuilder();\n    for (int i = 1; i <= numJettys; i++) {\n      if (sb.length() > 0) sb.append(',');\n      int cnt = this.jettyIntCntr.incrementAndGet();\n      File jettyDir = new File(TEMP_DIR,\n          getClass().getName() + \"-jetty\" + cnt + \"-\" + System.currentTimeMillis());\n      jettyDir.mkdirs();\n      org.apache.commons.io.FileUtils.copyDirectory(new File(getSolrHome()), jettyDir);\n      JettySolrRunner j = createJetty(jettyDir, testDir + \"/jetty\"\n          + cnt, null, \"solrconfig.xml\", null);\n      jettys.add(j);\n      SolrServer client = createNewSolrServer(j.getLocalPort());\n      clients.add(client);\n    }\n    \n    initCloud();\n    \n    this.jettys.addAll(jettys);\n    this.clients.addAll(clients);\n    \n    if (checkCreatedVsState) {\n      // now wait until we see that the number of shards in the cluster state\n      // matches what we expect\n      int numShards = getNumShards(DEFAULT_COLLECTION);\n      int retries = 0;\n      while (numShards != shardCount) {\n        numShards = getNumShards(DEFAULT_COLLECTION);\n        if (numShards == shardCount) break;\n        if (retries++ == 60) {\n          printLayoutOnTearDown = true;\n          fail(\"Shards in the state does not match what we set:\" + numShards\n              + \" vs \" + shardCount);\n        }\n        Thread.sleep(500);\n      }\n\n      // also make sure we have a leader for each shard\n      for (int i = 1; i <= sliceCount; i++) {\n        zkStateReader.getLeaderProps(DEFAULT_COLLECTION, \"shard\" + i, 10000);\n      }\n    }\n\n    updateMappingsFromZk(this.jettys, this.clients);\n    \n    // build the shard string\n    for (int i = 1; i <= numJettys / 2; i++) {\n      JettySolrRunner j = this.jettys.get(i);\n      JettySolrRunner j2 = this.jettys.get(i + (numJettys / 2 - 1));\n      if (sb.length() > 0) sb.append(',');\n      sb.append(\"127.0.0.1:\").append(j.getLocalPort()).append(context);\n      sb.append(\"|127.0.0.1:\").append(j2.getLocalPort()).append(context);\n    }\n    shards = sb.toString();\n    \n    return jettys;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d9405f486872f1e416304dfe389741f4ee2f8a4d","date":1351276739,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createJettys(int,boolean).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createJettys(int,boolean).mjava","sourceNew":"  /**\n   * @param checkCreatedVsState\n   *          if true, make sure the number created (numJettys) matches the\n   *          number in the cluster state - if you add more jetties this may not\n   *          be the case\n   */\n  protected List<JettySolrRunner> createJettys(int numJettys, boolean checkCreatedVsState) throws Exception {\n    List<JettySolrRunner> jettys = new ArrayList<JettySolrRunner>();\n    List<SolrServer> clients = new ArrayList<SolrServer>();\n    StringBuilder sb = new StringBuilder();\n    for (int i = 1; i <= numJettys; i++) {\n      if (sb.length() > 0) sb.append(',');\n      int cnt = this.jettyIntCntr.incrementAndGet();\n      File jettyDir = new File(TEMP_DIR,\n          getClass().getName() + \"-jetty\" + cnt + \"-\" + System.currentTimeMillis());\n      jettyDir.mkdirs();\n      org.apache.commons.io.FileUtils.copyDirectory(new File(getSolrHome()), jettyDir);\n      JettySolrRunner j = createJetty(jettyDir, testDir + \"/jetty\"\n          + cnt, null, \"solrconfig.xml\", null);\n      jettys.add(j);\n      SolrServer client = createNewSolrServer(j.getLocalPort());\n      clients.add(client);\n    }\n  \n    this.jettys.addAll(jettys);\n    this.clients.addAll(clients);\n    \n    if (checkCreatedVsState) {\n      // now wait until we see that the number of shards in the cluster state\n      // matches what we expect\n      int numShards = getNumShards(DEFAULT_COLLECTION);\n      int retries = 0;\n      while (numShards != shardCount) {\n        numShards = getNumShards(DEFAULT_COLLECTION);\n        if (numShards == shardCount) break;\n        if (retries++ == 60) {\n          printLayoutOnTearDown = true;\n          fail(\"Shards in the state does not match what we set:\" + numShards\n              + \" vs \" + shardCount);\n        }\n        Thread.sleep(500);\n      }\n\n      ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n      // also make sure we have a leader for each shard\n      for (int i = 1; i <= sliceCount; i++) {\n        zkStateReader.getLeaderProps(DEFAULT_COLLECTION, \"shard\" + i, 10000);\n      }\n    }\n\n    updateMappingsFromZk(this.jettys, this.clients);\n    \n    // build the shard string\n    for (int i = 1; i <= numJettys / 2; i++) {\n      JettySolrRunner j = this.jettys.get(i);\n      JettySolrRunner j2 = this.jettys.get(i + (numJettys / 2 - 1));\n      if (sb.length() > 0) sb.append(',');\n      sb.append(\"127.0.0.1:\").append(j.getLocalPort()).append(context);\n      sb.append(\"|127.0.0.1:\").append(j2.getLocalPort()).append(context);\n    }\n    shards = sb.toString();\n    \n    return jettys;\n  }\n\n","sourceOld":"  /**\n   * @param checkCreatedVsState\n   *          if true, make sure the number created (numJettys) matches the\n   *          number in the cluster state - if you add more jetties this may not\n   *          be the case\n   */\n  protected List<JettySolrRunner> createJettys(int numJettys, boolean checkCreatedVsState) throws Exception {\n    List<JettySolrRunner> jettys = new ArrayList<JettySolrRunner>();\n    List<SolrServer> clients = new ArrayList<SolrServer>();\n    StringBuilder sb = new StringBuilder();\n    for (int i = 1; i <= numJettys; i++) {\n      if (sb.length() > 0) sb.append(',');\n      int cnt = this.jettyIntCntr.incrementAndGet();\n      File jettyDir = new File(TEMP_DIR,\n          getClass().getName() + \"-jetty\" + cnt + \"-\" + System.currentTimeMillis());\n      jettyDir.mkdirs();\n      org.apache.commons.io.FileUtils.copyDirectory(new File(getSolrHome()), jettyDir);\n      JettySolrRunner j = createJetty(jettyDir, testDir + \"/jetty\"\n          + cnt, null, \"solrconfig.xml\", null);\n      jettys.add(j);\n      SolrServer client = createNewSolrServer(j.getLocalPort());\n      clients.add(client);\n    }\n    \n    initCloud();\n    \n    this.jettys.addAll(jettys);\n    this.clients.addAll(clients);\n    \n    if (checkCreatedVsState) {\n      // now wait until we see that the number of shards in the cluster state\n      // matches what we expect\n      int numShards = getNumShards(DEFAULT_COLLECTION);\n      int retries = 0;\n      while (numShards != shardCount) {\n        numShards = getNumShards(DEFAULT_COLLECTION);\n        if (numShards == shardCount) break;\n        if (retries++ == 60) {\n          printLayoutOnTearDown = true;\n          fail(\"Shards in the state does not match what we set:\" + numShards\n              + \" vs \" + shardCount);\n        }\n        Thread.sleep(500);\n      }\n\n      // also make sure we have a leader for each shard\n      for (int i = 1; i <= sliceCount; i++) {\n        zkStateReader.getLeaderProps(DEFAULT_COLLECTION, \"shard\" + i, 10000);\n      }\n    }\n\n    updateMappingsFromZk(this.jettys, this.clients);\n    \n    // build the shard string\n    for (int i = 1; i <= numJettys / 2; i++) {\n      JettySolrRunner j = this.jettys.get(i);\n      JettySolrRunner j2 = this.jettys.get(i + (numJettys / 2 - 1));\n      if (sb.length() > 0) sb.append(',');\n      sb.append(\"127.0.0.1:\").append(j.getLocalPort()).append(context);\n      sb.append(\"|127.0.0.1:\").append(j2.getLocalPort()).append(context);\n    }\n    shards = sb.toString();\n    \n    return jettys;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2126b84bd093fa3d921582a109a0ee578c28126","date":1351522501,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createJettys(int,boolean).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createJettys(int,boolean).mjava","sourceNew":"  /**\n   * @param checkCreatedVsState\n   *          if true, make sure the number created (numJettys) matches the\n   *          number in the cluster state - if you add more jetties this may not\n   *          be the case\n   */\n  protected List<JettySolrRunner> createJettys(int numJettys, boolean checkCreatedVsState) throws Exception {\n    List<JettySolrRunner> jettys = new ArrayList<JettySolrRunner>();\n    List<SolrServer> clients = new ArrayList<SolrServer>();\n    StringBuilder sb = new StringBuilder();\n    for (int i = 1; i <= numJettys; i++) {\n      if (sb.length() > 0) sb.append(',');\n      int cnt = this.jettyIntCntr.incrementAndGet();\n      File jettyDir = new File(TEMP_DIR,\n          getClass().getName() + \"-jetty\" + cnt + \"-\" + System.currentTimeMillis());\n      jettyDir.mkdirs();\n      org.apache.commons.io.FileUtils.copyDirectory(new File(getSolrHome()), jettyDir);\n      JettySolrRunner j = createJetty(jettyDir, testDir + \"/jetty\"\n          + cnt, null, \"solrconfig.xml\", null);\n      jettys.add(j);\n      SolrServer client = createNewSolrServer(j.getLocalPort());\n      clients.add(client);\n    }\n  \n    this.jettys.addAll(jettys);\n    this.clients.addAll(clients);\n    \n    if (checkCreatedVsState) {\n      // now wait until we see that the number of shards in the cluster state\n      // matches what we expect\n      int numShards = getNumShards(DEFAULT_COLLECTION);\n      int retries = 0;\n      while (numShards != shardCount) {\n        numShards = getNumShards(DEFAULT_COLLECTION);\n        if (numShards == shardCount) break;\n        if (retries++ == 60) {\n          printLayoutOnTearDown = true;\n          fail(\"Shards in the state does not match what we set:\" + numShards\n              + \" vs \" + shardCount);\n        }\n        Thread.sleep(500);\n      }\n\n      ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n      // also make sure we have a leader for each shard\n      for (int i = 1; i <= sliceCount; i++) {\n        zkStateReader.getLeaderProps(DEFAULT_COLLECTION, \"shard\" + i, 10000);\n      }\n    }\n\n    updateMappingsFromZk(this.jettys, this.clients);\n    \n    // build the shard string\n    for (int i = 1; i <= numJettys / 2; i++) {\n      JettySolrRunner j = this.jettys.get(i);\n      JettySolrRunner j2 = this.jettys.get(i + (numJettys / 2 - 1));\n      if (sb.length() > 0) sb.append(',');\n      sb.append(\"127.0.0.1:\").append(j.getLocalPort()).append(context);\n      sb.append(\"|127.0.0.1:\").append(j2.getLocalPort()).append(context);\n    }\n    shards = sb.toString();\n    \n    return jettys;\n  }\n\n","sourceOld":"  /**\n   * @param checkCreatedVsState\n   *          if true, make sure the number created (numJettys) matches the\n   *          number in the cluster state - if you add more jetties this may not\n   *          be the case\n   */\n  protected List<JettySolrRunner> createJettys(int numJettys, boolean checkCreatedVsState) throws Exception {\n    List<JettySolrRunner> jettys = new ArrayList<JettySolrRunner>();\n    List<SolrServer> clients = new ArrayList<SolrServer>();\n    StringBuilder sb = new StringBuilder();\n    for (int i = 1; i <= numJettys; i++) {\n      if (sb.length() > 0) sb.append(',');\n      int cnt = this.jettyIntCntr.incrementAndGet();\n      File jettyDir = new File(TEMP_DIR,\n          getClass().getName() + \"-jetty\" + cnt + \"-\" + System.currentTimeMillis());\n      jettyDir.mkdirs();\n      org.apache.commons.io.FileUtils.copyDirectory(new File(getSolrHome()), jettyDir);\n      JettySolrRunner j = createJetty(jettyDir, testDir + \"/jetty\"\n          + cnt, null, \"solrconfig.xml\", null);\n      jettys.add(j);\n      SolrServer client = createNewSolrServer(j.getLocalPort());\n      clients.add(client);\n    }\n    \n    initCloud();\n    \n    this.jettys.addAll(jettys);\n    this.clients.addAll(clients);\n    \n    if (checkCreatedVsState) {\n      // now wait until we see that the number of shards in the cluster state\n      // matches what we expect\n      int numShards = getNumShards(DEFAULT_COLLECTION);\n      int retries = 0;\n      while (numShards != shardCount) {\n        numShards = getNumShards(DEFAULT_COLLECTION);\n        if (numShards == shardCount) break;\n        if (retries++ == 60) {\n          printLayoutOnTearDown = true;\n          fail(\"Shards in the state does not match what we set:\" + numShards\n              + \" vs \" + shardCount);\n        }\n        Thread.sleep(500);\n      }\n\n      // also make sure we have a leader for each shard\n      for (int i = 1; i <= sliceCount; i++) {\n        zkStateReader.getLeaderProps(DEFAULT_COLLECTION, \"shard\" + i, 10000);\n      }\n    }\n\n    updateMappingsFromZk(this.jettys, this.clients);\n    \n    // build the shard string\n    for (int i = 1; i <= numJettys / 2; i++) {\n      JettySolrRunner j = this.jettys.get(i);\n      JettySolrRunner j2 = this.jettys.get(i + (numJettys / 2 - 1));\n      if (sb.length() > 0) sb.append(',');\n      sb.append(\"127.0.0.1:\").append(j.getLocalPort()).append(context);\n      sb.append(\"|127.0.0.1:\").append(j2.getLocalPort()).append(context);\n    }\n    shards = sb.toString();\n    \n    return jettys;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56a558aa5aadd60ae850d1ab090098bc63bdfaf9","date":1355245333,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createJettys(int,boolean).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createJettys(int,boolean).mjava","sourceNew":"  /**\n   * @param checkCreatedVsState\n   *          if true, make sure the number created (numJettys) matches the\n   *          number in the cluster state - if you add more jetties this may not\n   *          be the case\n   */\n  protected List<JettySolrRunner> createJettys(int numJettys, boolean checkCreatedVsState) throws Exception {\n    List<JettySolrRunner> jettys = new ArrayList<JettySolrRunner>();\n    List<SolrServer> clients = new ArrayList<SolrServer>();\n    StringBuilder sb = new StringBuilder();\n    for (int i = 1; i <= numJettys; i++) {\n      if (sb.length() > 0) sb.append(',');\n      int cnt = this.jettyIntCntr.incrementAndGet();\n      File jettyDir = new File(TEMP_DIR,\n          getClass().getName() + \"-jetty\" + cnt + \"-\" + System.currentTimeMillis());\n      jettyDir.mkdirs();\n      org.apache.commons.io.FileUtils.copyDirectory(new File(getSolrHome()), jettyDir);\n      JettySolrRunner j = createJetty(jettyDir, testDir + \"/jetty\"\n          + cnt, null, \"solrconfig.xml\", null);\n      jettys.add(j);\n      SolrServer client = createNewSolrServer(j.getLocalPort());\n      clients.add(client);\n    }\n  \n    this.jettys.addAll(jettys);\n    this.clients.addAll(clients);\n    \n    if (checkCreatedVsState) {\n      // now wait until we see that the number of shards in the cluster state\n      // matches what we expect\n      int numShards = getNumShards(DEFAULT_COLLECTION);\n      int retries = 0;\n      while (numShards != shardCount) {\n        numShards = getNumShards(DEFAULT_COLLECTION);\n        if (numShards == shardCount) break;\n        if (retries++ == 60) {\n          printLayoutOnTearDown = true;\n          fail(\"Shards in the state does not match what we set:\" + numShards\n              + \" vs \" + shardCount);\n        }\n        Thread.sleep(500);\n      }\n\n      ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n      // also make sure we have a leader for each shard\n      for (int i = 1; i <= sliceCount; i++) {\n        zkStateReader.getLeaderRetry(DEFAULT_COLLECTION, \"shard\" + i, 10000);\n      }\n    }\n\n    updateMappingsFromZk(this.jettys, this.clients);\n    \n    // build the shard string\n    for (int i = 1; i <= numJettys / 2; i++) {\n      JettySolrRunner j = this.jettys.get(i);\n      JettySolrRunner j2 = this.jettys.get(i + (numJettys / 2 - 1));\n      if (sb.length() > 0) sb.append(',');\n      sb.append(\"127.0.0.1:\").append(j.getLocalPort()).append(context);\n      sb.append(\"|127.0.0.1:\").append(j2.getLocalPort()).append(context);\n    }\n    shards = sb.toString();\n    \n    return jettys;\n  }\n\n","sourceOld":"  /**\n   * @param checkCreatedVsState\n   *          if true, make sure the number created (numJettys) matches the\n   *          number in the cluster state - if you add more jetties this may not\n   *          be the case\n   */\n  protected List<JettySolrRunner> createJettys(int numJettys, boolean checkCreatedVsState) throws Exception {\n    List<JettySolrRunner> jettys = new ArrayList<JettySolrRunner>();\n    List<SolrServer> clients = new ArrayList<SolrServer>();\n    StringBuilder sb = new StringBuilder();\n    for (int i = 1; i <= numJettys; i++) {\n      if (sb.length() > 0) sb.append(',');\n      int cnt = this.jettyIntCntr.incrementAndGet();\n      File jettyDir = new File(TEMP_DIR,\n          getClass().getName() + \"-jetty\" + cnt + \"-\" + System.currentTimeMillis());\n      jettyDir.mkdirs();\n      org.apache.commons.io.FileUtils.copyDirectory(new File(getSolrHome()), jettyDir);\n      JettySolrRunner j = createJetty(jettyDir, testDir + \"/jetty\"\n          + cnt, null, \"solrconfig.xml\", null);\n      jettys.add(j);\n      SolrServer client = createNewSolrServer(j.getLocalPort());\n      clients.add(client);\n    }\n  \n    this.jettys.addAll(jettys);\n    this.clients.addAll(clients);\n    \n    if (checkCreatedVsState) {\n      // now wait until we see that the number of shards in the cluster state\n      // matches what we expect\n      int numShards = getNumShards(DEFAULT_COLLECTION);\n      int retries = 0;\n      while (numShards != shardCount) {\n        numShards = getNumShards(DEFAULT_COLLECTION);\n        if (numShards == shardCount) break;\n        if (retries++ == 60) {\n          printLayoutOnTearDown = true;\n          fail(\"Shards in the state does not match what we set:\" + numShards\n              + \" vs \" + shardCount);\n        }\n        Thread.sleep(500);\n      }\n\n      ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n      // also make sure we have a leader for each shard\n      for (int i = 1; i <= sliceCount; i++) {\n        zkStateReader.getLeaderProps(DEFAULT_COLLECTION, \"shard\" + i, 10000);\n      }\n    }\n\n    updateMappingsFromZk(this.jettys, this.clients);\n    \n    // build the shard string\n    for (int i = 1; i <= numJettys / 2; i++) {\n      JettySolrRunner j = this.jettys.get(i);\n      JettySolrRunner j2 = this.jettys.get(i + (numJettys / 2 - 1));\n      if (sb.length() > 0) sb.append(',');\n      sb.append(\"127.0.0.1:\").append(j.getLocalPort()).append(context);\n      sb.append(\"|127.0.0.1:\").append(j2.getLocalPort()).append(context);\n    }\n    shards = sb.toString();\n    \n    return jettys;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c3fd765dc8fa1dd67f45e1ef91c28a2c147ea39","date":1355888669,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createJettys(int,boolean).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createJettys(int,boolean).mjava","sourceNew":"  /**\n   * @param checkCreatedVsState\n   *          if true, make sure the number created (numJettys) matches the\n   *          number in the cluster state - if you add more jetties this may not\n   *          be the case\n   */\n  protected List<JettySolrRunner> createJettys(int numJettys, boolean checkCreatedVsState) throws Exception {\n    List<JettySolrRunner> jettys = new ArrayList<JettySolrRunner>();\n    List<SolrServer> clients = new ArrayList<SolrServer>();\n    StringBuilder sb = new StringBuilder();\n    for (int i = 1; i <= numJettys; i++) {\n      if (sb.length() > 0) sb.append(',');\n      int cnt = this.jettyIntCntr.incrementAndGet();\n      File jettyDir = new File(TEMP_DIR,\n          getClass().getName() + \"-jetty\" + cnt + \"-\" + System.currentTimeMillis());\n      jettyDir.mkdirs();\n      org.apache.commons.io.FileUtils.copyDirectory(new File(getSolrHome()), jettyDir);\n      JettySolrRunner j = createJetty(jettyDir, testDir + \"/jetty\"\n          + cnt, null, \"solrconfig.xml\", null);\n      jettys.add(j);\n      SolrServer client = createNewSolrServer(j.getLocalPort());\n      clients.add(client);\n    }\n  \n    this.jettys.addAll(jettys);\n    this.clients.addAll(clients);\n    \n    if (checkCreatedVsState) {\n      // now wait until we see that the number of shards in the cluster state\n      // matches what we expect\n      int numShards = getTotalReplicas(DEFAULT_COLLECTION);\n      int retries = 0;\n      while (numShards != shardCount) {\n        numShards = getTotalReplicas(DEFAULT_COLLECTION);\n        if (numShards == shardCount) break;\n        if (retries++ == 60) {\n          printLayoutOnTearDown = true;\n          fail(\"Shards in the state does not match what we set:\" + numShards\n              + \" vs \" + shardCount);\n        }\n        Thread.sleep(500);\n      }\n\n      ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n      // also make sure we have a leader for each shard\n      for (int i = 1; i <= sliceCount; i++) {\n        zkStateReader.getLeaderRetry(DEFAULT_COLLECTION, \"shard\" + i, 10000);\n      }\n    }\n\n    updateMappingsFromZk(this.jettys, this.clients);\n    \n    // build the shard string\n    for (int i = 1; i <= numJettys / 2; i++) {\n      JettySolrRunner j = this.jettys.get(i);\n      JettySolrRunner j2 = this.jettys.get(i + (numJettys / 2 - 1));\n      if (sb.length() > 0) sb.append(',');\n      sb.append(\"127.0.0.1:\").append(j.getLocalPort()).append(context);\n      sb.append(\"|127.0.0.1:\").append(j2.getLocalPort()).append(context);\n    }\n    shards = sb.toString();\n    \n    return jettys;\n  }\n\n","sourceOld":"  /**\n   * @param checkCreatedVsState\n   *          if true, make sure the number created (numJettys) matches the\n   *          number in the cluster state - if you add more jetties this may not\n   *          be the case\n   */\n  protected List<JettySolrRunner> createJettys(int numJettys, boolean checkCreatedVsState) throws Exception {\n    List<JettySolrRunner> jettys = new ArrayList<JettySolrRunner>();\n    List<SolrServer> clients = new ArrayList<SolrServer>();\n    StringBuilder sb = new StringBuilder();\n    for (int i = 1; i <= numJettys; i++) {\n      if (sb.length() > 0) sb.append(',');\n      int cnt = this.jettyIntCntr.incrementAndGet();\n      File jettyDir = new File(TEMP_DIR,\n          getClass().getName() + \"-jetty\" + cnt + \"-\" + System.currentTimeMillis());\n      jettyDir.mkdirs();\n      org.apache.commons.io.FileUtils.copyDirectory(new File(getSolrHome()), jettyDir);\n      JettySolrRunner j = createJetty(jettyDir, testDir + \"/jetty\"\n          + cnt, null, \"solrconfig.xml\", null);\n      jettys.add(j);\n      SolrServer client = createNewSolrServer(j.getLocalPort());\n      clients.add(client);\n    }\n  \n    this.jettys.addAll(jettys);\n    this.clients.addAll(clients);\n    \n    if (checkCreatedVsState) {\n      // now wait until we see that the number of shards in the cluster state\n      // matches what we expect\n      int numShards = getNumShards(DEFAULT_COLLECTION);\n      int retries = 0;\n      while (numShards != shardCount) {\n        numShards = getNumShards(DEFAULT_COLLECTION);\n        if (numShards == shardCount) break;\n        if (retries++ == 60) {\n          printLayoutOnTearDown = true;\n          fail(\"Shards in the state does not match what we set:\" + numShards\n              + \" vs \" + shardCount);\n        }\n        Thread.sleep(500);\n      }\n\n      ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n      // also make sure we have a leader for each shard\n      for (int i = 1; i <= sliceCount; i++) {\n        zkStateReader.getLeaderRetry(DEFAULT_COLLECTION, \"shard\" + i, 10000);\n      }\n    }\n\n    updateMappingsFromZk(this.jettys, this.clients);\n    \n    // build the shard string\n    for (int i = 1; i <= numJettys / 2; i++) {\n      JettySolrRunner j = this.jettys.get(i);\n      JettySolrRunner j2 = this.jettys.get(i + (numJettys / 2 - 1));\n      if (sb.length() > 0) sb.append(',');\n      sb.append(\"127.0.0.1:\").append(j.getLocalPort()).append(context);\n      sb.append(\"|127.0.0.1:\").append(j2.getLocalPort()).append(context);\n    }\n    shards = sb.toString();\n    \n    return jettys;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createJettys(int,boolean).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createJettys(int,boolean).mjava","sourceNew":"  /**\n   * @param checkCreatedVsState\n   *          if true, make sure the number created (numJettys) matches the\n   *          number in the cluster state - if you add more jetties this may not\n   *          be the case\n   */\n  protected List<JettySolrRunner> createJettys(int numJettys, boolean checkCreatedVsState) throws Exception {\n    List<JettySolrRunner> jettys = new ArrayList<JettySolrRunner>();\n    List<SolrServer> clients = new ArrayList<SolrServer>();\n    StringBuilder sb = new StringBuilder();\n    for (int i = 1; i <= numJettys; i++) {\n      if (sb.length() > 0) sb.append(',');\n      int cnt = this.jettyIntCntr.incrementAndGet();\n      File jettyDir = new File(TEMP_DIR,\n          getClass().getName() + \"-jetty\" + cnt + \"-\" + System.currentTimeMillis());\n      jettyDir.mkdirs();\n      org.apache.commons.io.FileUtils.copyDirectory(new File(getSolrHome()), jettyDir);\n      JettySolrRunner j = createJetty(jettyDir, testDir + \"/jetty\"\n          + cnt, null, \"solrconfig.xml\", null);\n      jettys.add(j);\n      SolrServer client = createNewSolrServer(j.getLocalPort());\n      clients.add(client);\n    }\n  \n    this.jettys.addAll(jettys);\n    this.clients.addAll(clients);\n    \n    if (checkCreatedVsState) {\n      // now wait until we see that the number of shards in the cluster state\n      // matches what we expect\n      int numShards = getTotalReplicas(DEFAULT_COLLECTION);\n      int retries = 0;\n      while (numShards != shardCount) {\n        numShards = getTotalReplicas(DEFAULT_COLLECTION);\n        if (numShards == shardCount) break;\n        if (retries++ == 60) {\n          printLayoutOnTearDown = true;\n          fail(\"Shards in the state does not match what we set:\" + numShards\n              + \" vs \" + shardCount);\n        }\n        Thread.sleep(500);\n      }\n\n      ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n      // also make sure we have a leader for each shard\n      for (int i = 1; i <= sliceCount; i++) {\n        zkStateReader.getLeaderRetry(DEFAULT_COLLECTION, \"shard\" + i, 10000);\n      }\n    }\n\n    updateMappingsFromZk(this.jettys, this.clients);\n    \n    // build the shard string\n    for (int i = 1; i <= numJettys / 2; i++) {\n      JettySolrRunner j = this.jettys.get(i);\n      JettySolrRunner j2 = this.jettys.get(i + (numJettys / 2 - 1));\n      if (sb.length() > 0) sb.append(',');\n      sb.append(\"127.0.0.1:\").append(j.getLocalPort()).append(context);\n      sb.append(\"|127.0.0.1:\").append(j2.getLocalPort()).append(context);\n    }\n    shards = sb.toString();\n    \n    return jettys;\n  }\n\n","sourceOld":"  /**\n   * @param checkCreatedVsState\n   *          if true, make sure the number created (numJettys) matches the\n   *          number in the cluster state - if you add more jetties this may not\n   *          be the case\n   */\n  protected List<JettySolrRunner> createJettys(int numJettys, boolean checkCreatedVsState) throws Exception {\n    List<JettySolrRunner> jettys = new ArrayList<JettySolrRunner>();\n    List<SolrServer> clients = new ArrayList<SolrServer>();\n    StringBuilder sb = new StringBuilder();\n    for (int i = 1; i <= numJettys; i++) {\n      if (sb.length() > 0) sb.append(',');\n      int cnt = this.jettyIntCntr.incrementAndGet();\n      File jettyDir = new File(TEMP_DIR,\n          getClass().getName() + \"-jetty\" + cnt + \"-\" + System.currentTimeMillis());\n      jettyDir.mkdirs();\n      org.apache.commons.io.FileUtils.copyDirectory(new File(getSolrHome()), jettyDir);\n      JettySolrRunner j = createJetty(jettyDir, testDir + \"/jetty\"\n          + cnt, null, \"solrconfig.xml\", null);\n      jettys.add(j);\n      SolrServer client = createNewSolrServer(j.getLocalPort());\n      clients.add(client);\n    }\n  \n    this.jettys.addAll(jettys);\n    this.clients.addAll(clients);\n    \n    if (checkCreatedVsState) {\n      // now wait until we see that the number of shards in the cluster state\n      // matches what we expect\n      int numShards = getNumShards(DEFAULT_COLLECTION);\n      int retries = 0;\n      while (numShards != shardCount) {\n        numShards = getNumShards(DEFAULT_COLLECTION);\n        if (numShards == shardCount) break;\n        if (retries++ == 60) {\n          printLayoutOnTearDown = true;\n          fail(\"Shards in the state does not match what we set:\" + numShards\n              + \" vs \" + shardCount);\n        }\n        Thread.sleep(500);\n      }\n\n      ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n      // also make sure we have a leader for each shard\n      for (int i = 1; i <= sliceCount; i++) {\n        zkStateReader.getLeaderProps(DEFAULT_COLLECTION, \"shard\" + i, 10000);\n      }\n    }\n\n    updateMappingsFromZk(this.jettys, this.clients);\n    \n    // build the shard string\n    for (int i = 1; i <= numJettys / 2; i++) {\n      JettySolrRunner j = this.jettys.get(i);\n      JettySolrRunner j2 = this.jettys.get(i + (numJettys / 2 - 1));\n      if (sb.length() > 0) sb.append(',');\n      sb.append(\"127.0.0.1:\").append(j.getLocalPort()).append(context);\n      sb.append(\"|127.0.0.1:\").append(j2.getLocalPort()).append(context);\n    }\n    shards = sb.toString();\n    \n    return jettys;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4bc0d7d47c55a6d5319ba7d7ad8a9ae9c7a4d9dd","date":1362061830,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createJettys(int,boolean).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createJettys(int,boolean).mjava","sourceNew":"  /**\n   * @param checkCreatedVsState\n   *          if true, make sure the number created (numJettys) matches the\n   *          number in the cluster state - if you add more jetties this may not\n   *          be the case\n   */\n  protected List<JettySolrRunner> createJettys(int numJettys, boolean checkCreatedVsState) throws Exception {\n    List<JettySolrRunner> jettys = new ArrayList<JettySolrRunner>();\n    List<SolrServer> clients = new ArrayList<SolrServer>();\n    StringBuilder sb = new StringBuilder();\n    for (int i = 1; i <= numJettys; i++) {\n      if (sb.length() > 0) sb.append(',');\n      int cnt = this.jettyIntCntr.incrementAndGet();\n      File jettyDir = new File(TEMP_DIR,\n          getClass().getName() + \"-jetty\" + cnt + \"-\" + System.currentTimeMillis());\n      jettyDir.mkdirs();\n      setupJettySolrHome(jettyDir);\n      JettySolrRunner j = createJetty(jettyDir, testDir + \"/jetty\"\n          + cnt, null, \"solrconfig.xml\", null);\n      jettys.add(j);\n      SolrServer client = createNewSolrServer(j.getLocalPort());\n      clients.add(client);\n    }\n  \n    this.jettys.addAll(jettys);\n    this.clients.addAll(clients);\n    \n    int numShards = getTotalReplicas(DEFAULT_COLLECTION);\n    if (checkCreatedVsState) {\n      // now wait until we see that the number of shards in the cluster state\n      // matches what we expect\n      int retries = 0;\n      while (numShards != shardCount) {\n        numShards = getTotalReplicas(DEFAULT_COLLECTION);\n        if (numShards == shardCount) break;\n        if (retries++ == 60) {\n          printLayoutOnTearDown = true;\n          fail(\"Shards in the state does not match what we set:\" + numShards\n              + \" vs \" + shardCount);\n        }\n        Thread.sleep(500);\n      }\n\n      ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n      // also make sure we have a leader for each shard\n      for (int i = 1; i <= sliceCount; i++) {\n        zkStateReader.getLeaderRetry(DEFAULT_COLLECTION, \"shard\" + i, 10000);\n      }\n    }\n\n    if (numShards > 0) {\n      updateMappingsFromZk(this.jettys, this.clients);\n    }\n    \n    // build the shard string\n    for (int i = 1; i <= numJettys / 2; i++) {\n      JettySolrRunner j = this.jettys.get(i);\n      JettySolrRunner j2 = this.jettys.get(i + (numJettys / 2 - 1));\n      if (sb.length() > 0) sb.append(',');\n      sb.append(\"127.0.0.1:\").append(j.getLocalPort()).append(context);\n      sb.append(\"|127.0.0.1:\").append(j2.getLocalPort()).append(context);\n    }\n    shards = sb.toString();\n    \n    return jettys;\n  }\n\n","sourceOld":"  /**\n   * @param checkCreatedVsState\n   *          if true, make sure the number created (numJettys) matches the\n   *          number in the cluster state - if you add more jetties this may not\n   *          be the case\n   */\n  protected List<JettySolrRunner> createJettys(int numJettys, boolean checkCreatedVsState) throws Exception {\n    List<JettySolrRunner> jettys = new ArrayList<JettySolrRunner>();\n    List<SolrServer> clients = new ArrayList<SolrServer>();\n    StringBuilder sb = new StringBuilder();\n    for (int i = 1; i <= numJettys; i++) {\n      if (sb.length() > 0) sb.append(',');\n      int cnt = this.jettyIntCntr.incrementAndGet();\n      File jettyDir = new File(TEMP_DIR,\n          getClass().getName() + \"-jetty\" + cnt + \"-\" + System.currentTimeMillis());\n      jettyDir.mkdirs();\n      org.apache.commons.io.FileUtils.copyDirectory(new File(getSolrHome()), jettyDir);\n      JettySolrRunner j = createJetty(jettyDir, testDir + \"/jetty\"\n          + cnt, null, \"solrconfig.xml\", null);\n      jettys.add(j);\n      SolrServer client = createNewSolrServer(j.getLocalPort());\n      clients.add(client);\n    }\n  \n    this.jettys.addAll(jettys);\n    this.clients.addAll(clients);\n    \n    if (checkCreatedVsState) {\n      // now wait until we see that the number of shards in the cluster state\n      // matches what we expect\n      int numShards = getTotalReplicas(DEFAULT_COLLECTION);\n      int retries = 0;\n      while (numShards != shardCount) {\n        numShards = getTotalReplicas(DEFAULT_COLLECTION);\n        if (numShards == shardCount) break;\n        if (retries++ == 60) {\n          printLayoutOnTearDown = true;\n          fail(\"Shards in the state does not match what we set:\" + numShards\n              + \" vs \" + shardCount);\n        }\n        Thread.sleep(500);\n      }\n\n      ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n      // also make sure we have a leader for each shard\n      for (int i = 1; i <= sliceCount; i++) {\n        zkStateReader.getLeaderRetry(DEFAULT_COLLECTION, \"shard\" + i, 10000);\n      }\n    }\n\n    updateMappingsFromZk(this.jettys, this.clients);\n    \n    // build the shard string\n    for (int i = 1; i <= numJettys / 2; i++) {\n      JettySolrRunner j = this.jettys.get(i);\n      JettySolrRunner j2 = this.jettys.get(i + (numJettys / 2 - 1));\n      if (sb.length() > 0) sb.append(',');\n      sb.append(\"127.0.0.1:\").append(j.getLocalPort()).append(context);\n      sb.append(\"|127.0.0.1:\").append(j2.getLocalPort()).append(context);\n    }\n    shards = sb.toString();\n    \n    return jettys;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"849494cf2f3a96af5c8c84995108ddd8456fcd04","date":1372277913,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createJettys(int,boolean).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createJettys(int,boolean).mjava","sourceNew":"  /**\n   * @param checkCreatedVsState\n   *          if true, make sure the number created (numJettys) matches the\n   *          number in the cluster state - if you add more jetties this may not\n   *          be the case\n   */\n  protected List<JettySolrRunner> createJettys(int numJettys, boolean checkCreatedVsState) throws Exception {\n    List<JettySolrRunner> jettys = new ArrayList<JettySolrRunner>();\n    List<SolrServer> clients = new ArrayList<SolrServer>();\n    StringBuilder sb = new StringBuilder();\n    for (int i = 1; i <= numJettys; i++) {\n      if (sb.length() > 0) sb.append(',');\n      int cnt = this.jettyIntCntr.incrementAndGet();\n      File jettyDir = new File(TEMP_DIR,\n          getClass().getName() + \"-jetty\" + cnt + \"-\" + System.currentTimeMillis());\n      jettyDir.mkdirs();\n      setupJettySolrHome(jettyDir);\n      JettySolrRunner j = createJetty(jettyDir, getDataDir(testDir + \"/jetty\"\n          + cnt), null, \"solrconfig.xml\", null);\n      jettys.add(j);\n      SolrServer client = createNewSolrServer(j.getLocalPort());\n      clients.add(client);\n    }\n  \n    this.jettys.addAll(jettys);\n    this.clients.addAll(clients);\n    \n    int numShards = getTotalReplicas(DEFAULT_COLLECTION);\n    if (checkCreatedVsState) {\n      // now wait until we see that the number of shards in the cluster state\n      // matches what we expect\n      int retries = 0;\n      while (numShards != shardCount) {\n        numShards = getTotalReplicas(DEFAULT_COLLECTION);\n        if (numShards == shardCount) break;\n        if (retries++ == 60) {\n          printLayoutOnTearDown = true;\n          fail(\"Shards in the state does not match what we set:\" + numShards\n              + \" vs \" + shardCount);\n        }\n        Thread.sleep(500);\n      }\n\n      ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n      // also make sure we have a leader for each shard\n      for (int i = 1; i <= sliceCount; i++) {\n        zkStateReader.getLeaderRetry(DEFAULT_COLLECTION, \"shard\" + i, 10000);\n      }\n    }\n\n    if (numShards > 0) {\n      updateMappingsFromZk(this.jettys, this.clients);\n    }\n    \n    // build the shard string\n    for (int i = 1; i <= numJettys / 2; i++) {\n      JettySolrRunner j = this.jettys.get(i);\n      JettySolrRunner j2 = this.jettys.get(i + (numJettys / 2 - 1));\n      if (sb.length() > 0) sb.append(',');\n      sb.append(\"127.0.0.1:\").append(j.getLocalPort()).append(context);\n      sb.append(\"|127.0.0.1:\").append(j2.getLocalPort()).append(context);\n    }\n    shards = sb.toString();\n    \n    return jettys;\n  }\n\n","sourceOld":"  /**\n   * @param checkCreatedVsState\n   *          if true, make sure the number created (numJettys) matches the\n   *          number in the cluster state - if you add more jetties this may not\n   *          be the case\n   */\n  protected List<JettySolrRunner> createJettys(int numJettys, boolean checkCreatedVsState) throws Exception {\n    List<JettySolrRunner> jettys = new ArrayList<JettySolrRunner>();\n    List<SolrServer> clients = new ArrayList<SolrServer>();\n    StringBuilder sb = new StringBuilder();\n    for (int i = 1; i <= numJettys; i++) {\n      if (sb.length() > 0) sb.append(',');\n      int cnt = this.jettyIntCntr.incrementAndGet();\n      File jettyDir = new File(TEMP_DIR,\n          getClass().getName() + \"-jetty\" + cnt + \"-\" + System.currentTimeMillis());\n      jettyDir.mkdirs();\n      setupJettySolrHome(jettyDir);\n      JettySolrRunner j = createJetty(jettyDir, testDir + \"/jetty\"\n          + cnt, null, \"solrconfig.xml\", null);\n      jettys.add(j);\n      SolrServer client = createNewSolrServer(j.getLocalPort());\n      clients.add(client);\n    }\n  \n    this.jettys.addAll(jettys);\n    this.clients.addAll(clients);\n    \n    int numShards = getTotalReplicas(DEFAULT_COLLECTION);\n    if (checkCreatedVsState) {\n      // now wait until we see that the number of shards in the cluster state\n      // matches what we expect\n      int retries = 0;\n      while (numShards != shardCount) {\n        numShards = getTotalReplicas(DEFAULT_COLLECTION);\n        if (numShards == shardCount) break;\n        if (retries++ == 60) {\n          printLayoutOnTearDown = true;\n          fail(\"Shards in the state does not match what we set:\" + numShards\n              + \" vs \" + shardCount);\n        }\n        Thread.sleep(500);\n      }\n\n      ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n      // also make sure we have a leader for each shard\n      for (int i = 1; i <= sliceCount; i++) {\n        zkStateReader.getLeaderRetry(DEFAULT_COLLECTION, \"shard\" + i, 10000);\n      }\n    }\n\n    if (numShards > 0) {\n      updateMappingsFromZk(this.jettys, this.clients);\n    }\n    \n    // build the shard string\n    for (int i = 1; i <= numJettys / 2; i++) {\n      JettySolrRunner j = this.jettys.get(i);\n      JettySolrRunner j2 = this.jettys.get(i + (numJettys / 2 - 1));\n      if (sb.length() > 0) sb.append(',');\n      sb.append(\"127.0.0.1:\").append(j.getLocalPort()).append(context);\n      sb.append(\"|127.0.0.1:\").append(j2.getLocalPort()).append(context);\n    }\n    shards = sb.toString();\n    \n    return jettys;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createJettys(int,boolean).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createJettys(int,boolean).mjava","sourceNew":"  /**\n   * @param checkCreatedVsState\n   *          if true, make sure the number created (numJettys) matches the\n   *          number in the cluster state - if you add more jetties this may not\n   *          be the case\n   */\n  protected List<JettySolrRunner> createJettys(int numJettys, boolean checkCreatedVsState) throws Exception {\n    List<JettySolrRunner> jettys = new ArrayList<JettySolrRunner>();\n    List<SolrServer> clients = new ArrayList<SolrServer>();\n    StringBuilder sb = new StringBuilder();\n    for (int i = 1; i <= numJettys; i++) {\n      if (sb.length() > 0) sb.append(',');\n      int cnt = this.jettyIntCntr.incrementAndGet();\n      File jettyDir = new File(TEMP_DIR,\n          getClass().getName() + \"-jetty\" + cnt + \"-\" + System.currentTimeMillis());\n      jettyDir.mkdirs();\n      setupJettySolrHome(jettyDir);\n      JettySolrRunner j = createJetty(jettyDir, getDataDir(testDir + \"/jetty\"\n          + cnt), null, \"solrconfig.xml\", null);\n      jettys.add(j);\n      SolrServer client = createNewSolrServer(j.getLocalPort());\n      clients.add(client);\n    }\n  \n    this.jettys.addAll(jettys);\n    this.clients.addAll(clients);\n    \n    int numShards = getTotalReplicas(DEFAULT_COLLECTION);\n    if (checkCreatedVsState) {\n      // now wait until we see that the number of shards in the cluster state\n      // matches what we expect\n      int retries = 0;\n      while (numShards != shardCount) {\n        numShards = getTotalReplicas(DEFAULT_COLLECTION);\n        if (numShards == shardCount) break;\n        if (retries++ == 60) {\n          printLayoutOnTearDown = true;\n          fail(\"Shards in the state does not match what we set:\" + numShards\n              + \" vs \" + shardCount);\n        }\n        Thread.sleep(500);\n      }\n\n      ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n      // also make sure we have a leader for each shard\n      for (int i = 1; i <= sliceCount; i++) {\n        zkStateReader.getLeaderRetry(DEFAULT_COLLECTION, \"shard\" + i, 10000);\n      }\n    }\n\n    if (numShards > 0) {\n      updateMappingsFromZk(this.jettys, this.clients);\n    }\n    \n    // build the shard string\n    for (int i = 1; i <= numJettys / 2; i++) {\n      JettySolrRunner j = this.jettys.get(i);\n      JettySolrRunner j2 = this.jettys.get(i + (numJettys / 2 - 1));\n      if (sb.length() > 0) sb.append(',');\n      sb.append(\"127.0.0.1:\").append(j.getLocalPort()).append(context);\n      sb.append(\"|127.0.0.1:\").append(j2.getLocalPort()).append(context);\n    }\n    shards = sb.toString();\n    \n    return jettys;\n  }\n\n","sourceOld":"  /**\n   * @param checkCreatedVsState\n   *          if true, make sure the number created (numJettys) matches the\n   *          number in the cluster state - if you add more jetties this may not\n   *          be the case\n   */\n  protected List<JettySolrRunner> createJettys(int numJettys, boolean checkCreatedVsState) throws Exception {\n    List<JettySolrRunner> jettys = new ArrayList<JettySolrRunner>();\n    List<SolrServer> clients = new ArrayList<SolrServer>();\n    StringBuilder sb = new StringBuilder();\n    for (int i = 1; i <= numJettys; i++) {\n      if (sb.length() > 0) sb.append(',');\n      int cnt = this.jettyIntCntr.incrementAndGet();\n      File jettyDir = new File(TEMP_DIR,\n          getClass().getName() + \"-jetty\" + cnt + \"-\" + System.currentTimeMillis());\n      jettyDir.mkdirs();\n      setupJettySolrHome(jettyDir);\n      JettySolrRunner j = createJetty(jettyDir, testDir + \"/jetty\"\n          + cnt, null, \"solrconfig.xml\", null);\n      jettys.add(j);\n      SolrServer client = createNewSolrServer(j.getLocalPort());\n      clients.add(client);\n    }\n  \n    this.jettys.addAll(jettys);\n    this.clients.addAll(clients);\n    \n    int numShards = getTotalReplicas(DEFAULT_COLLECTION);\n    if (checkCreatedVsState) {\n      // now wait until we see that the number of shards in the cluster state\n      // matches what we expect\n      int retries = 0;\n      while (numShards != shardCount) {\n        numShards = getTotalReplicas(DEFAULT_COLLECTION);\n        if (numShards == shardCount) break;\n        if (retries++ == 60) {\n          printLayoutOnTearDown = true;\n          fail(\"Shards in the state does not match what we set:\" + numShards\n              + \" vs \" + shardCount);\n        }\n        Thread.sleep(500);\n      }\n\n      ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n      // also make sure we have a leader for each shard\n      for (int i = 1; i <= sliceCount; i++) {\n        zkStateReader.getLeaderRetry(DEFAULT_COLLECTION, \"shard\" + i, 10000);\n      }\n    }\n\n    if (numShards > 0) {\n      updateMappingsFromZk(this.jettys, this.clients);\n    }\n    \n    // build the shard string\n    for (int i = 1; i <= numJettys / 2; i++) {\n      JettySolrRunner j = this.jettys.get(i);\n      JettySolrRunner j2 = this.jettys.get(i + (numJettys / 2 - 1));\n      if (sb.length() > 0) sb.append(',');\n      sb.append(\"127.0.0.1:\").append(j.getLocalPort()).append(context);\n      sb.append(\"|127.0.0.1:\").append(j2.getLocalPort()).append(context);\n    }\n    shards = sb.toString();\n    \n    return jettys;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dcb5de84d260a8919bf0f2d4d180df543a2ad07a","date":1381378233,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createJettys(int,boolean).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createJettys(int,boolean).mjava","sourceNew":"  /**\n   * @param checkCreatedVsState\n   *          if true, make sure the number created (numJettys) matches the\n   *          number in the cluster state - if you add more jetties this may not\n   *          be the case\n   */\n  protected List<JettySolrRunner> createJettys(int numJettys, boolean checkCreatedVsState) throws Exception {\n    List<JettySolrRunner> jettys = new ArrayList<JettySolrRunner>();\n    List<SolrServer> clients = new ArrayList<SolrServer>();\n    StringBuilder sb = new StringBuilder();\n    for (int i = 1; i <= numJettys; i++) {\n      if (sb.length() > 0) sb.append(',');\n      int cnt = this.jettyIntCntr.incrementAndGet();\n      File jettyDir = new File(TEMP_DIR,\n          getClass().getName() + \"-jetty\" + cnt + \"-\" + System.currentTimeMillis());\n      jettyDir.mkdirs();\n      setupJettySolrHome(jettyDir);\n      JettySolrRunner j = createJetty(jettyDir, useJettyDataDir ? getDataDir(testDir + \"/jetty\"\n          + cnt) : null, null, \"solrconfig.xml\", null);\n      jettys.add(j);\n      SolrServer client = createNewSolrServer(j.getLocalPort());\n      clients.add(client);\n    }\n  \n    this.jettys.addAll(jettys);\n    this.clients.addAll(clients);\n    \n    int numShards = getTotalReplicas(DEFAULT_COLLECTION);\n    if (checkCreatedVsState) {\n      // now wait until we see that the number of shards in the cluster state\n      // matches what we expect\n      int retries = 0;\n      while (numShards != shardCount) {\n        numShards = getTotalReplicas(DEFAULT_COLLECTION);\n        if (numShards == shardCount) break;\n        if (retries++ == 60) {\n          printLayoutOnTearDown = true;\n          fail(\"Shards in the state does not match what we set:\" + numShards\n              + \" vs \" + shardCount);\n        }\n        Thread.sleep(500);\n      }\n\n      ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n      // also make sure we have a leader for each shard\n      for (int i = 1; i <= sliceCount; i++) {\n        zkStateReader.getLeaderRetry(DEFAULT_COLLECTION, \"shard\" + i, 10000);\n      }\n    }\n\n    if (numShards > 0) {\n      updateMappingsFromZk(this.jettys, this.clients);\n    }\n    \n    // build the shard string\n    for (int i = 1; i <= numJettys / 2; i++) {\n      JettySolrRunner j = this.jettys.get(i);\n      JettySolrRunner j2 = this.jettys.get(i + (numJettys / 2 - 1));\n      if (sb.length() > 0) sb.append(',');\n      sb.append(\"127.0.0.1:\").append(j.getLocalPort()).append(context);\n      sb.append(\"|127.0.0.1:\").append(j2.getLocalPort()).append(context);\n    }\n    shards = sb.toString();\n    \n    return jettys;\n  }\n\n","sourceOld":"  /**\n   * @param checkCreatedVsState\n   *          if true, make sure the number created (numJettys) matches the\n   *          number in the cluster state - if you add more jetties this may not\n   *          be the case\n   */\n  protected List<JettySolrRunner> createJettys(int numJettys, boolean checkCreatedVsState) throws Exception {\n    List<JettySolrRunner> jettys = new ArrayList<JettySolrRunner>();\n    List<SolrServer> clients = new ArrayList<SolrServer>();\n    StringBuilder sb = new StringBuilder();\n    for (int i = 1; i <= numJettys; i++) {\n      if (sb.length() > 0) sb.append(',');\n      int cnt = this.jettyIntCntr.incrementAndGet();\n      File jettyDir = new File(TEMP_DIR,\n          getClass().getName() + \"-jetty\" + cnt + \"-\" + System.currentTimeMillis());\n      jettyDir.mkdirs();\n      setupJettySolrHome(jettyDir);\n      JettySolrRunner j = createJetty(jettyDir, getDataDir(testDir + \"/jetty\"\n          + cnt), null, \"solrconfig.xml\", null);\n      jettys.add(j);\n      SolrServer client = createNewSolrServer(j.getLocalPort());\n      clients.add(client);\n    }\n  \n    this.jettys.addAll(jettys);\n    this.clients.addAll(clients);\n    \n    int numShards = getTotalReplicas(DEFAULT_COLLECTION);\n    if (checkCreatedVsState) {\n      // now wait until we see that the number of shards in the cluster state\n      // matches what we expect\n      int retries = 0;\n      while (numShards != shardCount) {\n        numShards = getTotalReplicas(DEFAULT_COLLECTION);\n        if (numShards == shardCount) break;\n        if (retries++ == 60) {\n          printLayoutOnTearDown = true;\n          fail(\"Shards in the state does not match what we set:\" + numShards\n              + \" vs \" + shardCount);\n        }\n        Thread.sleep(500);\n      }\n\n      ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n      // also make sure we have a leader for each shard\n      for (int i = 1; i <= sliceCount; i++) {\n        zkStateReader.getLeaderRetry(DEFAULT_COLLECTION, \"shard\" + i, 10000);\n      }\n    }\n\n    if (numShards > 0) {\n      updateMappingsFromZk(this.jettys, this.clients);\n    }\n    \n    // build the shard string\n    for (int i = 1; i <= numJettys / 2; i++) {\n      JettySolrRunner j = this.jettys.get(i);\n      JettySolrRunner j2 = this.jettys.get(i + (numJettys / 2 - 1));\n      if (sb.length() > 0) sb.append(',');\n      sb.append(\"127.0.0.1:\").append(j.getLocalPort()).append(context);\n      sb.append(\"|127.0.0.1:\").append(j2.getLocalPort()).append(context);\n    }\n    shards = sb.toString();\n    \n    return jettys;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29372a57b7e46d222a80429ad6b96413b7319eea","date":1390584196,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createJettys(int,boolean).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createJettys(int,boolean).mjava","sourceNew":"  /**\n   * @param checkCreatedVsState\n   *          if true, make sure the number created (numJettys) matches the\n   *          number in the cluster state - if you add more jetties this may not\n   *          be the case\n   */\n  protected List<JettySolrRunner> createJettys(int numJettys, boolean checkCreatedVsState) throws Exception {\n    List<JettySolrRunner> jettys = new ArrayList<JettySolrRunner>();\n    List<SolrServer> clients = new ArrayList<SolrServer>();\n    StringBuilder sb = new StringBuilder();\n    for (int i = 1; i <= numJettys; i++) {\n      if (sb.length() > 0) sb.append(',');\n      int cnt = this.jettyIntCntr.incrementAndGet();\n      File jettyDir = new File(TEMP_DIR,\n          getClass().getName() + \"-jetty\" + cnt + \"-\" + System.currentTimeMillis());\n      jettyDir.mkdirs();\n      setupJettySolrHome(jettyDir);\n      log.info(\"create jetty \" + i); \n      JettySolrRunner j = createJetty(jettyDir, useJettyDataDir ? getDataDir(testDir + \"/jetty\"\n          + cnt) : null, null, \"solrconfig.xml\", null);\n      jettys.add(j);\n      SolrServer client = createNewSolrServer(j.getLocalPort());\n      clients.add(client);\n    }\n  \n    this.jettys.addAll(jettys);\n    this.clients.addAll(clients);\n    \n    int numShards = getTotalReplicas(DEFAULT_COLLECTION);\n    if (checkCreatedVsState) {\n      // now wait until we see that the number of shards in the cluster state\n      // matches what we expect\n      int retries = 0;\n      while (numShards != shardCount) {\n        numShards = getTotalReplicas(DEFAULT_COLLECTION);\n        if (numShards == shardCount) break;\n        if (retries++ == 60) {\n          printLayoutOnTearDown = true;\n          fail(\"Shards in the state does not match what we set:\" + numShards\n              + \" vs \" + shardCount);\n        }\n        Thread.sleep(500);\n      }\n\n      ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n      // also make sure we have a leader for each shard\n      for (int i = 1; i <= sliceCount; i++) {\n        zkStateReader.getLeaderRetry(DEFAULT_COLLECTION, \"shard\" + i, 10000);\n      }\n    }\n\n    if (numShards > 0) {\n      updateMappingsFromZk(this.jettys, this.clients);\n    }\n    \n    // build the shard string\n    for (int i = 1; i <= numJettys / 2; i++) {\n      JettySolrRunner j = this.jettys.get(i);\n      JettySolrRunner j2 = this.jettys.get(i + (numJettys / 2 - 1));\n      if (sb.length() > 0) sb.append(',');\n      sb.append(\"127.0.0.1:\").append(j.getLocalPort()).append(context);\n      sb.append(\"|127.0.0.1:\").append(j2.getLocalPort()).append(context);\n    }\n    shards = sb.toString();\n    \n    return jettys;\n  }\n\n","sourceOld":"  /**\n   * @param checkCreatedVsState\n   *          if true, make sure the number created (numJettys) matches the\n   *          number in the cluster state - if you add more jetties this may not\n   *          be the case\n   */\n  protected List<JettySolrRunner> createJettys(int numJettys, boolean checkCreatedVsState) throws Exception {\n    List<JettySolrRunner> jettys = new ArrayList<JettySolrRunner>();\n    List<SolrServer> clients = new ArrayList<SolrServer>();\n    StringBuilder sb = new StringBuilder();\n    for (int i = 1; i <= numJettys; i++) {\n      if (sb.length() > 0) sb.append(',');\n      int cnt = this.jettyIntCntr.incrementAndGet();\n      File jettyDir = new File(TEMP_DIR,\n          getClass().getName() + \"-jetty\" + cnt + \"-\" + System.currentTimeMillis());\n      jettyDir.mkdirs();\n      setupJettySolrHome(jettyDir);\n      JettySolrRunner j = createJetty(jettyDir, useJettyDataDir ? getDataDir(testDir + \"/jetty\"\n          + cnt) : null, null, \"solrconfig.xml\", null);\n      jettys.add(j);\n      SolrServer client = createNewSolrServer(j.getLocalPort());\n      clients.add(client);\n    }\n  \n    this.jettys.addAll(jettys);\n    this.clients.addAll(clients);\n    \n    int numShards = getTotalReplicas(DEFAULT_COLLECTION);\n    if (checkCreatedVsState) {\n      // now wait until we see that the number of shards in the cluster state\n      // matches what we expect\n      int retries = 0;\n      while (numShards != shardCount) {\n        numShards = getTotalReplicas(DEFAULT_COLLECTION);\n        if (numShards == shardCount) break;\n        if (retries++ == 60) {\n          printLayoutOnTearDown = true;\n          fail(\"Shards in the state does not match what we set:\" + numShards\n              + \" vs \" + shardCount);\n        }\n        Thread.sleep(500);\n      }\n\n      ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n      // also make sure we have a leader for each shard\n      for (int i = 1; i <= sliceCount; i++) {\n        zkStateReader.getLeaderRetry(DEFAULT_COLLECTION, \"shard\" + i, 10000);\n      }\n    }\n\n    if (numShards > 0) {\n      updateMappingsFromZk(this.jettys, this.clients);\n    }\n    \n    // build the shard string\n    for (int i = 1; i <= numJettys / 2; i++) {\n      JettySolrRunner j = this.jettys.get(i);\n      JettySolrRunner j2 = this.jettys.get(i + (numJettys / 2 - 1));\n      if (sb.length() > 0) sb.append(',');\n      sb.append(\"127.0.0.1:\").append(j.getLocalPort()).append(context);\n      sb.append(\"|127.0.0.1:\").append(j2.getLocalPort()).append(context);\n    }\n    shards = sb.toString();\n    \n    return jettys;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"81ec897f0eb789ef9536a8130d1cdb9337ef108a","date":1392217884,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createJettys(int,boolean).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createJettys(int,boolean).mjava","sourceNew":"  /**\n   * @param checkCreatedVsState\n   *          if true, make sure the number created (numJettys) matches the\n   *          number in the cluster state - if you add more jetties this may not\n   *          be the case\n   */\n  protected List<JettySolrRunner> createJettys(int numJettys, boolean checkCreatedVsState) throws Exception {\n    List<JettySolrRunner> jettys = new ArrayList<JettySolrRunner>();\n    List<SolrServer> clients = new ArrayList<SolrServer>();\n    StringBuilder sb = new StringBuilder();\n    for (int i = 1; i <= numJettys; i++) {\n      if (sb.length() > 0) sb.append(',');\n      int cnt = this.jettyIntCntr.incrementAndGet();\n      File jettyDir = new File(TEMP_DIR,\n          getClass().getName() + \"-jetty\" + cnt + \"-\" + System.currentTimeMillis());\n      jettyDir.mkdirs();\n      setupJettySolrHome(jettyDir);\n      log.info(\"create jetty \" + i); \n      JettySolrRunner j = createJetty(jettyDir, useJettyDataDir ? getDataDir(testDir + \"/jetty\"\n          + cnt) : null, null, \"solrconfig.xml\", null);\n      jettys.add(j);\n      SolrServer client = createNewSolrServer(j.getLocalPort());\n      clients.add(client);\n    }\n  \n    this.jettys.addAll(jettys);\n    this.clients.addAll(clients);\n    \n    int numShards = getTotalReplicas(DEFAULT_COLLECTION);\n    if (checkCreatedVsState) {\n      // now wait until we see that the number of shards in the cluster state\n      // matches what we expect\n      int retries = 0;\n      while (numShards != shardCount) {\n        numShards = getTotalReplicas(DEFAULT_COLLECTION);\n        if (numShards == shardCount) break;\n        if (retries++ == 60) {\n          printLayoutOnTearDown = true;\n          fail(\"Shards in the state does not match what we set:\" + numShards\n              + \" vs \" + shardCount);\n        }\n        Thread.sleep(500);\n      }\n\n      ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n      // also make sure we have a leader for each shard\n      for (int i = 1; i <= sliceCount; i++) {\n        zkStateReader.getLeaderRetry(DEFAULT_COLLECTION, \"shard\" + i, 10000);\n      }\n    }\n\n    if (numShards > 0) {\n      updateMappingsFromZk(this.jettys, this.clients);\n    }\n    \n    // build the shard string\n    for (int i = 1; i <= numJettys / 2; i++) {\n      JettySolrRunner j = this.jettys.get(i);\n      JettySolrRunner j2 = this.jettys.get(i + (numJettys / 2 - 1));\n      if (sb.length() > 0) sb.append(',');\n      sb.append(buildUrl(j.getLocalPort()));\n      sb.append(\"|\").append(buildUrl(j2.getLocalPort()));\n    }\n    shards = sb.toString();\n    \n    return jettys;\n  }\n\n","sourceOld":"  /**\n   * @param checkCreatedVsState\n   *          if true, make sure the number created (numJettys) matches the\n   *          number in the cluster state - if you add more jetties this may not\n   *          be the case\n   */\n  protected List<JettySolrRunner> createJettys(int numJettys, boolean checkCreatedVsState) throws Exception {\n    List<JettySolrRunner> jettys = new ArrayList<JettySolrRunner>();\n    List<SolrServer> clients = new ArrayList<SolrServer>();\n    StringBuilder sb = new StringBuilder();\n    for (int i = 1; i <= numJettys; i++) {\n      if (sb.length() > 0) sb.append(',');\n      int cnt = this.jettyIntCntr.incrementAndGet();\n      File jettyDir = new File(TEMP_DIR,\n          getClass().getName() + \"-jetty\" + cnt + \"-\" + System.currentTimeMillis());\n      jettyDir.mkdirs();\n      setupJettySolrHome(jettyDir);\n      log.info(\"create jetty \" + i); \n      JettySolrRunner j = createJetty(jettyDir, useJettyDataDir ? getDataDir(testDir + \"/jetty\"\n          + cnt) : null, null, \"solrconfig.xml\", null);\n      jettys.add(j);\n      SolrServer client = createNewSolrServer(j.getLocalPort());\n      clients.add(client);\n    }\n  \n    this.jettys.addAll(jettys);\n    this.clients.addAll(clients);\n    \n    int numShards = getTotalReplicas(DEFAULT_COLLECTION);\n    if (checkCreatedVsState) {\n      // now wait until we see that the number of shards in the cluster state\n      // matches what we expect\n      int retries = 0;\n      while (numShards != shardCount) {\n        numShards = getTotalReplicas(DEFAULT_COLLECTION);\n        if (numShards == shardCount) break;\n        if (retries++ == 60) {\n          printLayoutOnTearDown = true;\n          fail(\"Shards in the state does not match what we set:\" + numShards\n              + \" vs \" + shardCount);\n        }\n        Thread.sleep(500);\n      }\n\n      ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n      // also make sure we have a leader for each shard\n      for (int i = 1; i <= sliceCount; i++) {\n        zkStateReader.getLeaderRetry(DEFAULT_COLLECTION, \"shard\" + i, 10000);\n      }\n    }\n\n    if (numShards > 0) {\n      updateMappingsFromZk(this.jettys, this.clients);\n    }\n    \n    // build the shard string\n    for (int i = 1; i <= numJettys / 2; i++) {\n      JettySolrRunner j = this.jettys.get(i);\n      JettySolrRunner j2 = this.jettys.get(i + (numJettys / 2 - 1));\n      if (sb.length() > 0) sb.append(',');\n      sb.append(\"127.0.0.1:\").append(j.getLocalPort()).append(context);\n      sb.append(\"|127.0.0.1:\").append(j2.getLocalPort()).append(context);\n    }\n    shards = sb.toString();\n    \n    return jettys;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createJettys(int,boolean).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createJettys(int,boolean).mjava","sourceNew":"  /**\n   * @param checkCreatedVsState\n   *          if true, make sure the number created (numJettys) matches the\n   *          number in the cluster state - if you add more jetties this may not\n   *          be the case\n   */\n  protected List<JettySolrRunner> createJettys(int numJettys, boolean checkCreatedVsState) throws Exception {\n    List<JettySolrRunner> jettys = new ArrayList<>();\n    List<SolrServer> clients = new ArrayList<>();\n    StringBuilder sb = new StringBuilder();\n    for (int i = 1; i <= numJettys; i++) {\n      if (sb.length() > 0) sb.append(',');\n      int cnt = this.jettyIntCntr.incrementAndGet();\n      File jettyDir = new File(TEMP_DIR,\n          getClass().getName() + \"-jetty\" + cnt + \"-\" + System.currentTimeMillis());\n      jettyDir.mkdirs();\n      setupJettySolrHome(jettyDir);\n      log.info(\"create jetty \" + i); \n      JettySolrRunner j = createJetty(jettyDir, useJettyDataDir ? getDataDir(testDir + \"/jetty\"\n          + cnt) : null, null, \"solrconfig.xml\", null);\n      jettys.add(j);\n      SolrServer client = createNewSolrServer(j.getLocalPort());\n      clients.add(client);\n    }\n  \n    this.jettys.addAll(jettys);\n    this.clients.addAll(clients);\n    \n    int numShards = getTotalReplicas(DEFAULT_COLLECTION);\n    if (checkCreatedVsState) {\n      // now wait until we see that the number of shards in the cluster state\n      // matches what we expect\n      int retries = 0;\n      while (numShards != shardCount) {\n        numShards = getTotalReplicas(DEFAULT_COLLECTION);\n        if (numShards == shardCount) break;\n        if (retries++ == 60) {\n          printLayoutOnTearDown = true;\n          fail(\"Shards in the state does not match what we set:\" + numShards\n              + \" vs \" + shardCount);\n        }\n        Thread.sleep(500);\n      }\n\n      ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n      // also make sure we have a leader for each shard\n      for (int i = 1; i <= sliceCount; i++) {\n        zkStateReader.getLeaderRetry(DEFAULT_COLLECTION, \"shard\" + i, 10000);\n      }\n    }\n\n    if (numShards > 0) {\n      updateMappingsFromZk(this.jettys, this.clients);\n    }\n    \n    // build the shard string\n    for (int i = 1; i <= numJettys / 2; i++) {\n      JettySolrRunner j = this.jettys.get(i);\n      JettySolrRunner j2 = this.jettys.get(i + (numJettys / 2 - 1));\n      if (sb.length() > 0) sb.append(',');\n      sb.append(buildUrl(j.getLocalPort()));\n      sb.append(\"|\").append(buildUrl(j2.getLocalPort()));\n    }\n    shards = sb.toString();\n    \n    return jettys;\n  }\n\n","sourceOld":"  /**\n   * @param checkCreatedVsState\n   *          if true, make sure the number created (numJettys) matches the\n   *          number in the cluster state - if you add more jetties this may not\n   *          be the case\n   */\n  protected List<JettySolrRunner> createJettys(int numJettys, boolean checkCreatedVsState) throws Exception {\n    List<JettySolrRunner> jettys = new ArrayList<JettySolrRunner>();\n    List<SolrServer> clients = new ArrayList<SolrServer>();\n    StringBuilder sb = new StringBuilder();\n    for (int i = 1; i <= numJettys; i++) {\n      if (sb.length() > 0) sb.append(',');\n      int cnt = this.jettyIntCntr.incrementAndGet();\n      File jettyDir = new File(TEMP_DIR,\n          getClass().getName() + \"-jetty\" + cnt + \"-\" + System.currentTimeMillis());\n      jettyDir.mkdirs();\n      setupJettySolrHome(jettyDir);\n      log.info(\"create jetty \" + i); \n      JettySolrRunner j = createJetty(jettyDir, useJettyDataDir ? getDataDir(testDir + \"/jetty\"\n          + cnt) : null, null, \"solrconfig.xml\", null);\n      jettys.add(j);\n      SolrServer client = createNewSolrServer(j.getLocalPort());\n      clients.add(client);\n    }\n  \n    this.jettys.addAll(jettys);\n    this.clients.addAll(clients);\n    \n    int numShards = getTotalReplicas(DEFAULT_COLLECTION);\n    if (checkCreatedVsState) {\n      // now wait until we see that the number of shards in the cluster state\n      // matches what we expect\n      int retries = 0;\n      while (numShards != shardCount) {\n        numShards = getTotalReplicas(DEFAULT_COLLECTION);\n        if (numShards == shardCount) break;\n        if (retries++ == 60) {\n          printLayoutOnTearDown = true;\n          fail(\"Shards in the state does not match what we set:\" + numShards\n              + \" vs \" + shardCount);\n        }\n        Thread.sleep(500);\n      }\n\n      ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n      // also make sure we have a leader for each shard\n      for (int i = 1; i <= sliceCount; i++) {\n        zkStateReader.getLeaderRetry(DEFAULT_COLLECTION, \"shard\" + i, 10000);\n      }\n    }\n\n    if (numShards > 0) {\n      updateMappingsFromZk(this.jettys, this.clients);\n    }\n    \n    // build the shard string\n    for (int i = 1; i <= numJettys / 2; i++) {\n      JettySolrRunner j = this.jettys.get(i);\n      JettySolrRunner j2 = this.jettys.get(i + (numJettys / 2 - 1));\n      if (sb.length() > 0) sb.append(',');\n      sb.append(buildUrl(j.getLocalPort()));\n      sb.append(\"|\").append(buildUrl(j2.getLocalPort()));\n    }\n    shards = sb.toString();\n    \n    return jettys;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0d579490a72f2e6297eaa648940611234c57cf1","date":1395917140,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createJettys(int,boolean).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createJettys(int,boolean).mjava","sourceNew":"  /**\n   * @param checkCreatedVsState\n   *          if true, make sure the number created (numJettys) matches the\n   *          number in the cluster state - if you add more jetties this may not\n   *          be the case\n   */\n  protected List<JettySolrRunner> createJettys(int numJettys, boolean checkCreatedVsState) throws Exception {\n    List<JettySolrRunner> jettys = new ArrayList<>();\n    List<SolrServer> clients = new ArrayList<>();\n    StringBuilder sb = new StringBuilder();\n    for (int i = 1; i <= numJettys; i++) {\n      if (sb.length() > 0) sb.append(',');\n      int cnt = this.jettyIntCntr.incrementAndGet();\n      File jettyDir = TestUtil.createTempDir(getClass().getSimpleName() + \"-jetty\" + cnt);\n      jettyDir.mkdirs();\n      setupJettySolrHome(jettyDir);\n      log.info(\"create jetty \" + i); \n      JettySolrRunner j = createJetty(jettyDir, useJettyDataDir ? getDataDir(testDir + \"/jetty\"\n          + cnt) : null, null, \"solrconfig.xml\", null);\n      jettys.add(j);\n      SolrServer client = createNewSolrServer(j.getLocalPort());\n      clients.add(client);\n    }\n  \n    this.jettys.addAll(jettys);\n    this.clients.addAll(clients);\n    \n    int numShards = getTotalReplicas(DEFAULT_COLLECTION);\n    if (checkCreatedVsState) {\n      // now wait until we see that the number of shards in the cluster state\n      // matches what we expect\n      int retries = 0;\n      while (numShards != shardCount) {\n        numShards = getTotalReplicas(DEFAULT_COLLECTION);\n        if (numShards == shardCount) break;\n        if (retries++ == 60) {\n          printLayoutOnTearDown = true;\n          fail(\"Shards in the state does not match what we set:\" + numShards\n              + \" vs \" + shardCount);\n        }\n        Thread.sleep(500);\n      }\n\n      ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n      // also make sure we have a leader for each shard\n      for (int i = 1; i <= sliceCount; i++) {\n        zkStateReader.getLeaderRetry(DEFAULT_COLLECTION, \"shard\" + i, 10000);\n      }\n    }\n\n    if (numShards > 0) {\n      updateMappingsFromZk(this.jettys, this.clients);\n    }\n    \n    // build the shard string\n    for (int i = 1; i <= numJettys / 2; i++) {\n      JettySolrRunner j = this.jettys.get(i);\n      JettySolrRunner j2 = this.jettys.get(i + (numJettys / 2 - 1));\n      if (sb.length() > 0) sb.append(',');\n      sb.append(buildUrl(j.getLocalPort()));\n      sb.append(\"|\").append(buildUrl(j2.getLocalPort()));\n    }\n    shards = sb.toString();\n    \n    return jettys;\n  }\n\n","sourceOld":"  /**\n   * @param checkCreatedVsState\n   *          if true, make sure the number created (numJettys) matches the\n   *          number in the cluster state - if you add more jetties this may not\n   *          be the case\n   */\n  protected List<JettySolrRunner> createJettys(int numJettys, boolean checkCreatedVsState) throws Exception {\n    List<JettySolrRunner> jettys = new ArrayList<>();\n    List<SolrServer> clients = new ArrayList<>();\n    StringBuilder sb = new StringBuilder();\n    for (int i = 1; i <= numJettys; i++) {\n      if (sb.length() > 0) sb.append(',');\n      int cnt = this.jettyIntCntr.incrementAndGet();\n      File jettyDir = new File(TEMP_DIR,\n          getClass().getName() + \"-jetty\" + cnt + \"-\" + System.currentTimeMillis());\n      jettyDir.mkdirs();\n      setupJettySolrHome(jettyDir);\n      log.info(\"create jetty \" + i); \n      JettySolrRunner j = createJetty(jettyDir, useJettyDataDir ? getDataDir(testDir + \"/jetty\"\n          + cnt) : null, null, \"solrconfig.xml\", null);\n      jettys.add(j);\n      SolrServer client = createNewSolrServer(j.getLocalPort());\n      clients.add(client);\n    }\n  \n    this.jettys.addAll(jettys);\n    this.clients.addAll(clients);\n    \n    int numShards = getTotalReplicas(DEFAULT_COLLECTION);\n    if (checkCreatedVsState) {\n      // now wait until we see that the number of shards in the cluster state\n      // matches what we expect\n      int retries = 0;\n      while (numShards != shardCount) {\n        numShards = getTotalReplicas(DEFAULT_COLLECTION);\n        if (numShards == shardCount) break;\n        if (retries++ == 60) {\n          printLayoutOnTearDown = true;\n          fail(\"Shards in the state does not match what we set:\" + numShards\n              + \" vs \" + shardCount);\n        }\n        Thread.sleep(500);\n      }\n\n      ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n      // also make sure we have a leader for each shard\n      for (int i = 1; i <= sliceCount; i++) {\n        zkStateReader.getLeaderRetry(DEFAULT_COLLECTION, \"shard\" + i, 10000);\n      }\n    }\n\n    if (numShards > 0) {\n      updateMappingsFromZk(this.jettys, this.clients);\n    }\n    \n    // build the shard string\n    for (int i = 1; i <= numJettys / 2; i++) {\n      JettySolrRunner j = this.jettys.get(i);\n      JettySolrRunner j2 = this.jettys.get(i + (numJettys / 2 - 1));\n      if (sb.length() > 0) sb.append(',');\n      sb.append(buildUrl(j.getLocalPort()));\n      sb.append(\"|\").append(buildUrl(j2.getLocalPort()));\n    }\n    shards = sb.toString();\n    \n    return jettys;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1416f9d09d016a6894cd17e1caac137dad2bba59","date":1395941020,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createJettys(int,boolean).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createJettys(int,boolean).mjava","sourceNew":"  /**\n   * @param checkCreatedVsState\n   *          if true, make sure the number created (numJettys) matches the\n   *          number in the cluster state - if you add more jetties this may not\n   *          be the case\n   */\n  protected List<JettySolrRunner> createJettys(int numJettys, boolean checkCreatedVsState) throws Exception {\n    List<JettySolrRunner> jettys = new ArrayList<>();\n    List<SolrServer> clients = new ArrayList<>();\n    StringBuilder sb = new StringBuilder();\n    for (int i = 1; i <= numJettys; i++) {\n      if (sb.length() > 0) sb.append(',');\n      int cnt = this.jettyIntCntr.incrementAndGet();\n      File jettyDir = new File(dataDir,\n          getClass().getName() + \"-jetty\" + cnt + \"-\" + System.currentTimeMillis());\n      jettyDir.mkdirs();\n      setupJettySolrHome(jettyDir);\n      log.info(\"create jetty \" + i); \n      JettySolrRunner j = createJetty(jettyDir, useJettyDataDir ? getDataDir(testDir + \"/jetty\"\n          + cnt) : null, null, \"solrconfig.xml\", null);\n      jettys.add(j);\n      SolrServer client = createNewSolrServer(j.getLocalPort());\n      clients.add(client);\n    }\n  \n    this.jettys.addAll(jettys);\n    this.clients.addAll(clients);\n    \n    int numShards = getTotalReplicas(DEFAULT_COLLECTION);\n    if (checkCreatedVsState) {\n      // now wait until we see that the number of shards in the cluster state\n      // matches what we expect\n      int retries = 0;\n      while (numShards != shardCount) {\n        numShards = getTotalReplicas(DEFAULT_COLLECTION);\n        if (numShards == shardCount) break;\n        if (retries++ == 60) {\n          printLayoutOnTearDown = true;\n          fail(\"Shards in the state does not match what we set:\" + numShards\n              + \" vs \" + shardCount);\n        }\n        Thread.sleep(500);\n      }\n\n      ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n      // also make sure we have a leader for each shard\n      for (int i = 1; i <= sliceCount; i++) {\n        zkStateReader.getLeaderRetry(DEFAULT_COLLECTION, \"shard\" + i, 10000);\n      }\n    }\n\n    if (numShards > 0) {\n      updateMappingsFromZk(this.jettys, this.clients);\n    }\n    \n    // build the shard string\n    for (int i = 1; i <= numJettys / 2; i++) {\n      JettySolrRunner j = this.jettys.get(i);\n      JettySolrRunner j2 = this.jettys.get(i + (numJettys / 2 - 1));\n      if (sb.length() > 0) sb.append(',');\n      sb.append(buildUrl(j.getLocalPort()));\n      sb.append(\"|\").append(buildUrl(j2.getLocalPort()));\n    }\n    shards = sb.toString();\n    \n    return jettys;\n  }\n\n","sourceOld":"  /**\n   * @param checkCreatedVsState\n   *          if true, make sure the number created (numJettys) matches the\n   *          number in the cluster state - if you add more jetties this may not\n   *          be the case\n   */\n  protected List<JettySolrRunner> createJettys(int numJettys, boolean checkCreatedVsState) throws Exception {\n    List<JettySolrRunner> jettys = new ArrayList<>();\n    List<SolrServer> clients = new ArrayList<>();\n    StringBuilder sb = new StringBuilder();\n    for (int i = 1; i <= numJettys; i++) {\n      if (sb.length() > 0) sb.append(',');\n      int cnt = this.jettyIntCntr.incrementAndGet();\n      File jettyDir = new File(TEMP_DIR,\n          getClass().getName() + \"-jetty\" + cnt + \"-\" + System.currentTimeMillis());\n      jettyDir.mkdirs();\n      setupJettySolrHome(jettyDir);\n      log.info(\"create jetty \" + i); \n      JettySolrRunner j = createJetty(jettyDir, useJettyDataDir ? getDataDir(testDir + \"/jetty\"\n          + cnt) : null, null, \"solrconfig.xml\", null);\n      jettys.add(j);\n      SolrServer client = createNewSolrServer(j.getLocalPort());\n      clients.add(client);\n    }\n  \n    this.jettys.addAll(jettys);\n    this.clients.addAll(clients);\n    \n    int numShards = getTotalReplicas(DEFAULT_COLLECTION);\n    if (checkCreatedVsState) {\n      // now wait until we see that the number of shards in the cluster state\n      // matches what we expect\n      int retries = 0;\n      while (numShards != shardCount) {\n        numShards = getTotalReplicas(DEFAULT_COLLECTION);\n        if (numShards == shardCount) break;\n        if (retries++ == 60) {\n          printLayoutOnTearDown = true;\n          fail(\"Shards in the state does not match what we set:\" + numShards\n              + \" vs \" + shardCount);\n        }\n        Thread.sleep(500);\n      }\n\n      ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n      // also make sure we have a leader for each shard\n      for (int i = 1; i <= sliceCount; i++) {\n        zkStateReader.getLeaderRetry(DEFAULT_COLLECTION, \"shard\" + i, 10000);\n      }\n    }\n\n    if (numShards > 0) {\n      updateMappingsFromZk(this.jettys, this.clients);\n    }\n    \n    // build the shard string\n    for (int i = 1; i <= numJettys / 2; i++) {\n      JettySolrRunner j = this.jettys.get(i);\n      JettySolrRunner j2 = this.jettys.get(i + (numJettys / 2 - 1));\n      if (sb.length() > 0) sb.append(',');\n      sb.append(buildUrl(j.getLocalPort()));\n      sb.append(\"|\").append(buildUrl(j2.getLocalPort()));\n    }\n    shards = sb.toString();\n    \n    return jettys;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb1f22cfa77230b5f05b7784feae5367f6bbb488","date":1395968145,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createJettys(int,boolean).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createJettys(int,boolean).mjava","sourceNew":"  /**\n   * @param checkCreatedVsState\n   *          if true, make sure the number created (numJettys) matches the\n   *          number in the cluster state - if you add more jetties this may not\n   *          be the case\n   */\n  protected List<JettySolrRunner> createJettys(int numJettys, boolean checkCreatedVsState) throws Exception {\n    List<JettySolrRunner> jettys = new ArrayList<>();\n    List<SolrServer> clients = new ArrayList<>();\n    StringBuilder sb = new StringBuilder();\n    for (int i = 1; i <= numJettys; i++) {\n      if (sb.length() > 0) sb.append(',');\n      int cnt = this.jettyIntCntr.incrementAndGet();\n\n      File jettyDir = createTempDir();\n\n      jettyDir.mkdirs();\n      setupJettySolrHome(jettyDir);\n      log.info(\"create jetty \" + i); \n      JettySolrRunner j = createJetty(jettyDir, useJettyDataDir ? getDataDir(testDir + \"/jetty\"\n          + cnt) : null, null, \"solrconfig.xml\", null);\n      jettys.add(j);\n      SolrServer client = createNewSolrServer(j.getLocalPort());\n      clients.add(client);\n    }\n  \n    this.jettys.addAll(jettys);\n    this.clients.addAll(clients);\n    \n    int numShards = getTotalReplicas(DEFAULT_COLLECTION);\n    if (checkCreatedVsState) {\n      // now wait until we see that the number of shards in the cluster state\n      // matches what we expect\n      int retries = 0;\n      while (numShards != shardCount) {\n        numShards = getTotalReplicas(DEFAULT_COLLECTION);\n        if (numShards == shardCount) break;\n        if (retries++ == 60) {\n          printLayoutOnTearDown = true;\n          fail(\"Shards in the state does not match what we set:\" + numShards\n              + \" vs \" + shardCount);\n        }\n        Thread.sleep(500);\n      }\n\n      ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n      // also make sure we have a leader for each shard\n      for (int i = 1; i <= sliceCount; i++) {\n        zkStateReader.getLeaderRetry(DEFAULT_COLLECTION, \"shard\" + i, 10000);\n      }\n    }\n\n    if (numShards > 0) {\n      updateMappingsFromZk(this.jettys, this.clients);\n    }\n    \n    // build the shard string\n    for (int i = 1; i <= numJettys / 2; i++) {\n      JettySolrRunner j = this.jettys.get(i);\n      JettySolrRunner j2 = this.jettys.get(i + (numJettys / 2 - 1));\n      if (sb.length() > 0) sb.append(',');\n      sb.append(buildUrl(j.getLocalPort()));\n      sb.append(\"|\").append(buildUrl(j2.getLocalPort()));\n    }\n    shards = sb.toString();\n    \n    return jettys;\n  }\n\n","sourceOld":"  /**\n   * @param checkCreatedVsState\n   *          if true, make sure the number created (numJettys) matches the\n   *          number in the cluster state - if you add more jetties this may not\n   *          be the case\n   */\n  protected List<JettySolrRunner> createJettys(int numJettys, boolean checkCreatedVsState) throws Exception {\n    List<JettySolrRunner> jettys = new ArrayList<>();\n    List<SolrServer> clients = new ArrayList<>();\n    StringBuilder sb = new StringBuilder();\n    for (int i = 1; i <= numJettys; i++) {\n      if (sb.length() > 0) sb.append(',');\n      int cnt = this.jettyIntCntr.incrementAndGet();\n      File jettyDir = TestUtil.createTempDir(getClass().getSimpleName() + \"-jetty\" + cnt);\n      jettyDir.mkdirs();\n      setupJettySolrHome(jettyDir);\n      log.info(\"create jetty \" + i); \n      JettySolrRunner j = createJetty(jettyDir, useJettyDataDir ? getDataDir(testDir + \"/jetty\"\n          + cnt) : null, null, \"solrconfig.xml\", null);\n      jettys.add(j);\n      SolrServer client = createNewSolrServer(j.getLocalPort());\n      clients.add(client);\n    }\n  \n    this.jettys.addAll(jettys);\n    this.clients.addAll(clients);\n    \n    int numShards = getTotalReplicas(DEFAULT_COLLECTION);\n    if (checkCreatedVsState) {\n      // now wait until we see that the number of shards in the cluster state\n      // matches what we expect\n      int retries = 0;\n      while (numShards != shardCount) {\n        numShards = getTotalReplicas(DEFAULT_COLLECTION);\n        if (numShards == shardCount) break;\n        if (retries++ == 60) {\n          printLayoutOnTearDown = true;\n          fail(\"Shards in the state does not match what we set:\" + numShards\n              + \" vs \" + shardCount);\n        }\n        Thread.sleep(500);\n      }\n\n      ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n      // also make sure we have a leader for each shard\n      for (int i = 1; i <= sliceCount; i++) {\n        zkStateReader.getLeaderRetry(DEFAULT_COLLECTION, \"shard\" + i, 10000);\n      }\n    }\n\n    if (numShards > 0) {\n      updateMappingsFromZk(this.jettys, this.clients);\n    }\n    \n    // build the shard string\n    for (int i = 1; i <= numJettys / 2; i++) {\n      JettySolrRunner j = this.jettys.get(i);\n      JettySolrRunner j2 = this.jettys.get(i + (numJettys / 2 - 1));\n      if (sb.length() > 0) sb.append(',');\n      sb.append(buildUrl(j.getLocalPort()));\n      sb.append(\"|\").append(buildUrl(j2.getLocalPort()));\n    }\n    shards = sb.toString();\n    \n    return jettys;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a0f5bb79c600763ffe7b8141df59a3169d31e48","date":1396689440,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createJettys(int,boolean).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createJettys(int,boolean).mjava","sourceNew":"  /**\n   * @param checkCreatedVsState\n   *          if true, make sure the number created (numJettys) matches the\n   *          number in the cluster state - if you add more jetties this may not\n   *          be the case\n   */\n  protected List<JettySolrRunner> createJettys(int numJettys, boolean checkCreatedVsState) throws Exception {\n    List<JettySolrRunner> jettys = new ArrayList<>();\n    List<SolrServer> clients = new ArrayList<>();\n    StringBuilder sb = new StringBuilder();\n    for (int i = 1; i <= numJettys; i++) {\n      if (sb.length() > 0) sb.append(',');\n      int cnt = this.jettyIntCntr.incrementAndGet();\n\n      File jettyDir = createTempDir();\n\n      jettyDir.mkdirs();\n      setupJettySolrHome(jettyDir);\n      log.info(\"create jetty \" + i); \n      JettySolrRunner j = createJetty(jettyDir, useJettyDataDir ? getDataDir(testDir + \"/jetty\"\n          + cnt) : null, null, \"solrconfig.xml\", null);\n      jettys.add(j);\n      SolrServer client = createNewSolrServer(j.getLocalPort());\n      clients.add(client);\n    }\n  \n    this.jettys.addAll(jettys);\n    this.clients.addAll(clients);\n    \n    int numShards = getTotalReplicas(DEFAULT_COLLECTION);\n    if (checkCreatedVsState) {\n      // now wait until we see that the number of shards in the cluster state\n      // matches what we expect\n      int retries = 0;\n      while (numShards != shardCount) {\n        numShards = getTotalReplicas(DEFAULT_COLLECTION);\n        if (numShards == shardCount) break;\n        if (retries++ == 60) {\n          printLayoutOnTearDown = true;\n          fail(\"Shards in the state does not match what we set:\" + numShards\n              + \" vs \" + shardCount);\n        }\n        Thread.sleep(500);\n      }\n\n      ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n      // also make sure we have a leader for each shard\n      for (int i = 1; i <= sliceCount; i++) {\n        zkStateReader.getLeaderRetry(DEFAULT_COLLECTION, \"shard\" + i, 10000);\n      }\n    }\n\n    if (numShards > 0) {\n      updateMappingsFromZk(this.jettys, this.clients);\n    }\n    \n    // build the shard string\n    for (int i = 1; i <= numJettys / 2; i++) {\n      JettySolrRunner j = this.jettys.get(i);\n      JettySolrRunner j2 = this.jettys.get(i + (numJettys / 2 - 1));\n      if (sb.length() > 0) sb.append(',');\n      sb.append(buildUrl(j.getLocalPort()));\n      sb.append(\"|\").append(buildUrl(j2.getLocalPort()));\n    }\n    shards = sb.toString();\n    \n    return jettys;\n  }\n\n","sourceOld":"  /**\n   * @param checkCreatedVsState\n   *          if true, make sure the number created (numJettys) matches the\n   *          number in the cluster state - if you add more jetties this may not\n   *          be the case\n   */\n  protected List<JettySolrRunner> createJettys(int numJettys, boolean checkCreatedVsState) throws Exception {\n    List<JettySolrRunner> jettys = new ArrayList<>();\n    List<SolrServer> clients = new ArrayList<>();\n    StringBuilder sb = new StringBuilder();\n    for (int i = 1; i <= numJettys; i++) {\n      if (sb.length() > 0) sb.append(',');\n      int cnt = this.jettyIntCntr.incrementAndGet();\n      File jettyDir = new File(dataDir,\n          getClass().getName() + \"-jetty\" + cnt + \"-\" + System.currentTimeMillis());\n      jettyDir.mkdirs();\n      setupJettySolrHome(jettyDir);\n      log.info(\"create jetty \" + i); \n      JettySolrRunner j = createJetty(jettyDir, useJettyDataDir ? getDataDir(testDir + \"/jetty\"\n          + cnt) : null, null, \"solrconfig.xml\", null);\n      jettys.add(j);\n      SolrServer client = createNewSolrServer(j.getLocalPort());\n      clients.add(client);\n    }\n  \n    this.jettys.addAll(jettys);\n    this.clients.addAll(clients);\n    \n    int numShards = getTotalReplicas(DEFAULT_COLLECTION);\n    if (checkCreatedVsState) {\n      // now wait until we see that the number of shards in the cluster state\n      // matches what we expect\n      int retries = 0;\n      while (numShards != shardCount) {\n        numShards = getTotalReplicas(DEFAULT_COLLECTION);\n        if (numShards == shardCount) break;\n        if (retries++ == 60) {\n          printLayoutOnTearDown = true;\n          fail(\"Shards in the state does not match what we set:\" + numShards\n              + \" vs \" + shardCount);\n        }\n        Thread.sleep(500);\n      }\n\n      ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n      // also make sure we have a leader for each shard\n      for (int i = 1; i <= sliceCount; i++) {\n        zkStateReader.getLeaderRetry(DEFAULT_COLLECTION, \"shard\" + i, 10000);\n      }\n    }\n\n    if (numShards > 0) {\n      updateMappingsFromZk(this.jettys, this.clients);\n    }\n    \n    // build the shard string\n    for (int i = 1; i <= numJettys / 2; i++) {\n      JettySolrRunner j = this.jettys.get(i);\n      JettySolrRunner j2 = this.jettys.get(i + (numJettys / 2 - 1));\n      if (sb.length() > 0) sb.append(',');\n      sb.append(buildUrl(j.getLocalPort()));\n      sb.append(\"|\").append(buildUrl(j2.getLocalPort()));\n    }\n    shards = sb.toString();\n    \n    return jettys;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0622fbd990643ae4cacb693db6a0c82cf8916ae2","date":1397637446,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createJettys(int,boolean).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createJettys(int,boolean).mjava","sourceNew":"  /**\n   * @param checkCreatedVsState\n   *          if true, make sure the number created (numJettys) matches the\n   *          number in the cluster state - if you add more jetties this may not\n   *          be the case\n   */\n  protected List<JettySolrRunner> createJettys(int numJettys, boolean checkCreatedVsState) throws Exception {\n    List<JettySolrRunner> jettys = new ArrayList<>();\n    List<SolrServer> clients = new ArrayList<>();\n    StringBuilder sb = new StringBuilder();\n\n    if(getStateFormat() == 2) {\n      log.info(\"Creating collection1 with stateFormat=2\");\n      SolrZkClient zkClient = new SolrZkClient(zkServer.getZkAddress(), AbstractZkTestCase.TIMEOUT, AbstractZkTestCase.TIMEOUT);\n      Overseer.getInQueue(zkClient).offer(ZkStateReader.toJSON(ZkNodeProps.makeMap(\n          Overseer.QUEUE_OPERATION, OverseerCollectionProcessor.CREATECOLLECTION,\n          \"name\", DEFAULT_COLLECTION,\n          \"numShards\", String.valueOf(sliceCount),\n          DocCollection.STATE_FORMAT, getStateFormat())));\n      zkClient.close();\n    }\n\n    for (int i = 1; i <= numJettys; i++) {\n      if (sb.length() > 0) sb.append(',');\n      int cnt = this.jettyIntCntr.incrementAndGet();\n\n      File jettyDir = createTempDir();\n\n      jettyDir.mkdirs();\n      setupJettySolrHome(jettyDir);\n      log.info(\"create jetty \" + i);\n      JettySolrRunner j = createJetty(jettyDir, useJettyDataDir ? getDataDir(testDir + \"/jetty\"\n          + cnt) : null, null, \"solrconfig.xml\", null);\n      jettys.add(j);\n      SolrServer client = createNewSolrServer(j.getLocalPort());\n      clients.add(client);\n    }\n  \n    this.jettys.addAll(jettys);\n    this.clients.addAll(clients);\n    \n    int numShards = getTotalReplicas(DEFAULT_COLLECTION);\n    if (checkCreatedVsState) {\n      // now wait until we see that the number of shards in the cluster state\n      // matches what we expect\n      int retries = 0;\n      while (numShards != shardCount) {\n        numShards = getTotalReplicas(DEFAULT_COLLECTION);\n        if (numShards == shardCount) break;\n        if (retries++ == 60) {\n          printLayoutOnTearDown = true;\n          fail(\"Shards in the state does not match what we set:\" + numShards\n              + \" vs \" + shardCount);\n        }\n        Thread.sleep(500);\n      }\n\n      ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n      // also make sure we have a leader for each shard\n      for (int i = 1; i <= sliceCount; i++) {\n        zkStateReader.getLeaderRetry(DEFAULT_COLLECTION, \"shard\" + i, 10000);\n      }\n    }\n\n    if (numShards > 0) {\n      updateMappingsFromZk(this.jettys, this.clients);\n    }\n    \n    // build the shard string\n    for (int i = 1; i <= numJettys / 2; i++) {\n      JettySolrRunner j = this.jettys.get(i);\n      JettySolrRunner j2 = this.jettys.get(i + (numJettys / 2 - 1));\n      if (sb.length() > 0) sb.append(',');\n      sb.append(buildUrl(j.getLocalPort()));\n      sb.append(\"|\").append(buildUrl(j2.getLocalPort()));\n    }\n    shards = sb.toString();\n    \n    return jettys;\n  }\n\n","sourceOld":"  /**\n   * @param checkCreatedVsState\n   *          if true, make sure the number created (numJettys) matches the\n   *          number in the cluster state - if you add more jetties this may not\n   *          be the case\n   */\n  protected List<JettySolrRunner> createJettys(int numJettys, boolean checkCreatedVsState) throws Exception {\n    List<JettySolrRunner> jettys = new ArrayList<>();\n    List<SolrServer> clients = new ArrayList<>();\n    StringBuilder sb = new StringBuilder();\n    for (int i = 1; i <= numJettys; i++) {\n      if (sb.length() > 0) sb.append(',');\n      int cnt = this.jettyIntCntr.incrementAndGet();\n\n      File jettyDir = createTempDir();\n\n      jettyDir.mkdirs();\n      setupJettySolrHome(jettyDir);\n      log.info(\"create jetty \" + i); \n      JettySolrRunner j = createJetty(jettyDir, useJettyDataDir ? getDataDir(testDir + \"/jetty\"\n          + cnt) : null, null, \"solrconfig.xml\", null);\n      jettys.add(j);\n      SolrServer client = createNewSolrServer(j.getLocalPort());\n      clients.add(client);\n    }\n  \n    this.jettys.addAll(jettys);\n    this.clients.addAll(clients);\n    \n    int numShards = getTotalReplicas(DEFAULT_COLLECTION);\n    if (checkCreatedVsState) {\n      // now wait until we see that the number of shards in the cluster state\n      // matches what we expect\n      int retries = 0;\n      while (numShards != shardCount) {\n        numShards = getTotalReplicas(DEFAULT_COLLECTION);\n        if (numShards == shardCount) break;\n        if (retries++ == 60) {\n          printLayoutOnTearDown = true;\n          fail(\"Shards in the state does not match what we set:\" + numShards\n              + \" vs \" + shardCount);\n        }\n        Thread.sleep(500);\n      }\n\n      ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n      // also make sure we have a leader for each shard\n      for (int i = 1; i <= sliceCount; i++) {\n        zkStateReader.getLeaderRetry(DEFAULT_COLLECTION, \"shard\" + i, 10000);\n      }\n    }\n\n    if (numShards > 0) {\n      updateMappingsFromZk(this.jettys, this.clients);\n    }\n    \n    // build the shard string\n    for (int i = 1; i <= numJettys / 2; i++) {\n      JettySolrRunner j = this.jettys.get(i);\n      JettySolrRunner j2 = this.jettys.get(i + (numJettys / 2 - 1));\n      if (sb.length() > 0) sb.append(',');\n      sb.append(buildUrl(j.getLocalPort()));\n      sb.append(\"|\").append(buildUrl(j2.getLocalPort()));\n    }\n    shards = sb.toString();\n    \n    return jettys;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5a233896b7f16ac9b4ed601ef8207d98f1f0500","date":1398857046,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createJettys(int,boolean).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createJettys(int,boolean).mjava","sourceNew":"  /**\n   * @param checkCreatedVsState\n   *          if true, make sure the number created (numJettys) matches the\n   *          number in the cluster state - if you add more jetties this may not\n   *          be the case\n   */\n  protected List<JettySolrRunner> createJettys(int numJettys, boolean checkCreatedVsState) throws Exception {\n    List<JettySolrRunner> jettys = new ArrayList<>();\n    List<SolrServer> clients = new ArrayList<>();\n    StringBuilder sb = new StringBuilder();\n\n    for (int i = 1; i <= numJettys; i++) {\n      if (sb.length() > 0) sb.append(',');\n      int cnt = this.jettyIntCntr.incrementAndGet();\n\n      File jettyDir = createTempDir();\n\n      jettyDir.mkdirs();\n      setupJettySolrHome(jettyDir);\n      log.info(\"create jetty \" + i);\n      JettySolrRunner j = createJetty(jettyDir, useJettyDataDir ? getDataDir(testDir + \"/jetty\"\n          + cnt) : null, null, \"solrconfig.xml\", null);\n      jettys.add(j);\n      SolrServer client = createNewSolrServer(j.getLocalPort());\n      clients.add(client);\n    }\n  \n    this.jettys.addAll(jettys);\n    this.clients.addAll(clients);\n    \n    int numShards = getTotalReplicas(DEFAULT_COLLECTION);\n    if (checkCreatedVsState) {\n      // now wait until we see that the number of shards in the cluster state\n      // matches what we expect\n      int retries = 0;\n      while (numShards != shardCount) {\n        numShards = getTotalReplicas(DEFAULT_COLLECTION);\n        if (numShards == shardCount) break;\n        if (retries++ == 60) {\n          printLayoutOnTearDown = true;\n          fail(\"Shards in the state does not match what we set:\" + numShards\n              + \" vs \" + shardCount);\n        }\n        Thread.sleep(500);\n      }\n\n      ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n      // also make sure we have a leader for each shard\n      for (int i = 1; i <= sliceCount; i++) {\n        zkStateReader.getLeaderRetry(DEFAULT_COLLECTION, \"shard\" + i, 10000);\n      }\n    }\n\n    if (numShards > 0) {\n      updateMappingsFromZk(this.jettys, this.clients);\n    }\n    \n    // build the shard string\n    for (int i = 1; i <= numJettys / 2; i++) {\n      JettySolrRunner j = this.jettys.get(i);\n      JettySolrRunner j2 = this.jettys.get(i + (numJettys / 2 - 1));\n      if (sb.length() > 0) sb.append(',');\n      sb.append(buildUrl(j.getLocalPort()));\n      sb.append(\"|\").append(buildUrl(j2.getLocalPort()));\n    }\n    shards = sb.toString();\n    \n    return jettys;\n  }\n\n","sourceOld":"  /**\n   * @param checkCreatedVsState\n   *          if true, make sure the number created (numJettys) matches the\n   *          number in the cluster state - if you add more jetties this may not\n   *          be the case\n   */\n  protected List<JettySolrRunner> createJettys(int numJettys, boolean checkCreatedVsState) throws Exception {\n    List<JettySolrRunner> jettys = new ArrayList<>();\n    List<SolrServer> clients = new ArrayList<>();\n    StringBuilder sb = new StringBuilder();\n\n    if(getStateFormat() == 2) {\n      log.info(\"Creating collection1 with stateFormat=2\");\n      SolrZkClient zkClient = new SolrZkClient(zkServer.getZkAddress(), AbstractZkTestCase.TIMEOUT, AbstractZkTestCase.TIMEOUT);\n      Overseer.getInQueue(zkClient).offer(ZkStateReader.toJSON(ZkNodeProps.makeMap(\n          Overseer.QUEUE_OPERATION, OverseerCollectionProcessor.CREATECOLLECTION,\n          \"name\", DEFAULT_COLLECTION,\n          \"numShards\", String.valueOf(sliceCount),\n          DocCollection.STATE_FORMAT, getStateFormat())));\n      zkClient.close();\n    }\n\n    for (int i = 1; i <= numJettys; i++) {\n      if (sb.length() > 0) sb.append(',');\n      int cnt = this.jettyIntCntr.incrementAndGet();\n\n      File jettyDir = createTempDir();\n\n      jettyDir.mkdirs();\n      setupJettySolrHome(jettyDir);\n      log.info(\"create jetty \" + i);\n      JettySolrRunner j = createJetty(jettyDir, useJettyDataDir ? getDataDir(testDir + \"/jetty\"\n          + cnt) : null, null, \"solrconfig.xml\", null);\n      jettys.add(j);\n      SolrServer client = createNewSolrServer(j.getLocalPort());\n      clients.add(client);\n    }\n  \n    this.jettys.addAll(jettys);\n    this.clients.addAll(clients);\n    \n    int numShards = getTotalReplicas(DEFAULT_COLLECTION);\n    if (checkCreatedVsState) {\n      // now wait until we see that the number of shards in the cluster state\n      // matches what we expect\n      int retries = 0;\n      while (numShards != shardCount) {\n        numShards = getTotalReplicas(DEFAULT_COLLECTION);\n        if (numShards == shardCount) break;\n        if (retries++ == 60) {\n          printLayoutOnTearDown = true;\n          fail(\"Shards in the state does not match what we set:\" + numShards\n              + \" vs \" + shardCount);\n        }\n        Thread.sleep(500);\n      }\n\n      ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n      // also make sure we have a leader for each shard\n      for (int i = 1; i <= sliceCount; i++) {\n        zkStateReader.getLeaderRetry(DEFAULT_COLLECTION, \"shard\" + i, 10000);\n      }\n    }\n\n    if (numShards > 0) {\n      updateMappingsFromZk(this.jettys, this.clients);\n    }\n    \n    // build the shard string\n    for (int i = 1; i <= numJettys / 2; i++) {\n      JettySolrRunner j = this.jettys.get(i);\n      JettySolrRunner j2 = this.jettys.get(i + (numJettys / 2 - 1));\n      if (sb.length() > 0) sb.append(',');\n      sb.append(buildUrl(j.getLocalPort()));\n      sb.append(\"|\").append(buildUrl(j2.getLocalPort()));\n    }\n    shards = sb.toString();\n    \n    return jettys;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a6f693ed86f289b2e42b46684409b3997f2c264a","date":1404319832,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createJettys(int,boolean).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createJettys(int,boolean).mjava","sourceNew":"  /**\n   * @param checkCreatedVsState\n   *          if true, make sure the number created (numJettys) matches the\n   *          number in the cluster state - if you add more jetties this may not\n   *          be the case\n   */\n  protected List<JettySolrRunner> createJettys(int numJettys, boolean checkCreatedVsState) throws Exception {\n    List<JettySolrRunner> jettys = new ArrayList<>();\n    List<SolrServer> clients = new ArrayList<>();\n    StringBuilder sb = new StringBuilder();\n\n    if(getStateFormat() == 2) {\n      log.info(\"Creating collection1 with stateFormat=2\");\n      SolrZkClient zkClient = new SolrZkClient(zkServer.getZkAddress(), AbstractZkTestCase.TIMEOUT, AbstractZkTestCase.TIMEOUT);\n      Overseer.getInQueue(zkClient).offer(ZkStateReader.toJSON(ZkNodeProps.makeMap(\n          Overseer.QUEUE_OPERATION, OverseerCollectionProcessor.CREATECOLLECTION,\n          \"name\", DEFAULT_COLLECTION,\n          \"numShards\", String.valueOf(sliceCount),\n          DocCollection.STATE_FORMAT, getStateFormat())));\n      zkClient.close();\n    }\n\n    for (int i = 1; i <= numJettys; i++) {\n      if (sb.length() > 0) sb.append(',');\n      int cnt = this.jettyIntCntr.incrementAndGet();\n\n      File jettyDir = createTempDir();\n\n      jettyDir.mkdirs();\n      setupJettySolrHome(jettyDir);\n      log.info(\"create jetty \" + i);\n      JettySolrRunner j = createJetty(jettyDir, useJettyDataDir ? getDataDir(testDir + \"/jetty\"\n          + cnt) : null, null, \"solrconfig.xml\", null);\n      jettys.add(j);\n      SolrServer client = createNewSolrServer(j.getLocalPort());\n      clients.add(client);\n    }\n  \n    this.jettys.addAll(jettys);\n    this.clients.addAll(clients);\n    \n    int numShards = getTotalReplicas(DEFAULT_COLLECTION);\n    if (checkCreatedVsState) {\n      // now wait until we see that the number of shards in the cluster state\n      // matches what we expect\n      int retries = 0;\n      while (numShards != shardCount) {\n        numShards = getTotalReplicas(DEFAULT_COLLECTION);\n        if (numShards == shardCount) break;\n        if (retries++ == 60) {\n          printLayoutOnTearDown = true;\n          fail(\"Shards in the state does not match what we set:\" + numShards\n              + \" vs \" + shardCount);\n        }\n        Thread.sleep(500);\n      }\n\n      ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n      // also make sure we have a leader for each shard\n      for (int i = 1; i <= sliceCount; i++) {\n        zkStateReader.getLeaderRetry(DEFAULT_COLLECTION, \"shard\" + i, 10000);\n      }\n    }\n\n    if (numShards > 0) {\n      updateMappingsFromZk(this.jettys, this.clients);\n    }\n    \n    // build the shard string\n    for (int i = 1; i <= numJettys / 2; i++) {\n      JettySolrRunner j = this.jettys.get(i);\n      JettySolrRunner j2 = this.jettys.get(i + (numJettys / 2 - 1));\n      if (sb.length() > 0) sb.append(',');\n      sb.append(buildUrl(j.getLocalPort()));\n      sb.append(\"|\").append(buildUrl(j2.getLocalPort()));\n    }\n    shards = sb.toString();\n    \n    return jettys;\n  }\n\n","sourceOld":"  /**\n   * @param checkCreatedVsState\n   *          if true, make sure the number created (numJettys) matches the\n   *          number in the cluster state - if you add more jetties this may not\n   *          be the case\n   */\n  protected List<JettySolrRunner> createJettys(int numJettys, boolean checkCreatedVsState) throws Exception {\n    List<JettySolrRunner> jettys = new ArrayList<>();\n    List<SolrServer> clients = new ArrayList<>();\n    StringBuilder sb = new StringBuilder();\n\n    for (int i = 1; i <= numJettys; i++) {\n      if (sb.length() > 0) sb.append(',');\n      int cnt = this.jettyIntCntr.incrementAndGet();\n\n      File jettyDir = createTempDir();\n\n      jettyDir.mkdirs();\n      setupJettySolrHome(jettyDir);\n      log.info(\"create jetty \" + i);\n      JettySolrRunner j = createJetty(jettyDir, useJettyDataDir ? getDataDir(testDir + \"/jetty\"\n          + cnt) : null, null, \"solrconfig.xml\", null);\n      jettys.add(j);\n      SolrServer client = createNewSolrServer(j.getLocalPort());\n      clients.add(client);\n    }\n  \n    this.jettys.addAll(jettys);\n    this.clients.addAll(clients);\n    \n    int numShards = getTotalReplicas(DEFAULT_COLLECTION);\n    if (checkCreatedVsState) {\n      // now wait until we see that the number of shards in the cluster state\n      // matches what we expect\n      int retries = 0;\n      while (numShards != shardCount) {\n        numShards = getTotalReplicas(DEFAULT_COLLECTION);\n        if (numShards == shardCount) break;\n        if (retries++ == 60) {\n          printLayoutOnTearDown = true;\n          fail(\"Shards in the state does not match what we set:\" + numShards\n              + \" vs \" + shardCount);\n        }\n        Thread.sleep(500);\n      }\n\n      ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n      // also make sure we have a leader for each shard\n      for (int i = 1; i <= sliceCount; i++) {\n        zkStateReader.getLeaderRetry(DEFAULT_COLLECTION, \"shard\" + i, 10000);\n      }\n    }\n\n    if (numShards > 0) {\n      updateMappingsFromZk(this.jettys, this.clients);\n    }\n    \n    // build the shard string\n    for (int i = 1; i <= numJettys / 2; i++) {\n      JettySolrRunner j = this.jettys.get(i);\n      JettySolrRunner j2 = this.jettys.get(i + (numJettys / 2 - 1));\n      if (sb.length() > 0) sb.append(',');\n      sb.append(buildUrl(j.getLocalPort()));\n      sb.append(\"|\").append(buildUrl(j2.getLocalPort()));\n    }\n    shards = sb.toString();\n    \n    return jettys;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4c07fa58a256dccf8b95364855fd5e9ad4d1401","date":1404386015,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createJettys(int,boolean).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createJettys(int,boolean).mjava","sourceNew":"  /**\n   * @param checkCreatedVsState\n   *          if true, make sure the number created (numJettys) matches the\n   *          number in the cluster state - if you add more jetties this may not\n   *          be the case\n   */\n  protected List<JettySolrRunner> createJettys(int numJettys, boolean checkCreatedVsState) throws Exception {\n    List<JettySolrRunner> jettys = new ArrayList<>();\n    List<SolrServer> clients = new ArrayList<>();\n    StringBuilder sb = new StringBuilder();\n\n    for (int i = 1; i <= numJettys; i++) {\n      if (sb.length() > 0) sb.append(',');\n      int cnt = this.jettyIntCntr.incrementAndGet();\n\n      File jettyDir = createTempDir();\n\n      jettyDir.mkdirs();\n      setupJettySolrHome(jettyDir);\n      log.info(\"create jetty \" + i);\n      JettySolrRunner j = createJetty(jettyDir, useJettyDataDir ? getDataDir(testDir + \"/jetty\"\n          + cnt) : null, null, \"solrconfig.xml\", null);\n      jettys.add(j);\n      SolrServer client = createNewSolrServer(j.getLocalPort());\n      clients.add(client);\n    }\n  \n    this.jettys.addAll(jettys);\n    this.clients.addAll(clients);\n    \n    int numShards = getTotalReplicas(DEFAULT_COLLECTION);\n    if (checkCreatedVsState) {\n      // now wait until we see that the number of shards in the cluster state\n      // matches what we expect\n      int retries = 0;\n      while (numShards != shardCount) {\n        numShards = getTotalReplicas(DEFAULT_COLLECTION);\n        if (numShards == shardCount) break;\n        if (retries++ == 60) {\n          printLayoutOnTearDown = true;\n          fail(\"Shards in the state does not match what we set:\" + numShards\n              + \" vs \" + shardCount);\n        }\n        Thread.sleep(500);\n      }\n\n      ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n      // also make sure we have a leader for each shard\n      for (int i = 1; i <= sliceCount; i++) {\n        zkStateReader.getLeaderRetry(DEFAULT_COLLECTION, \"shard\" + i, 10000);\n      }\n    }\n\n    if (numShards > 0) {\n      updateMappingsFromZk(this.jettys, this.clients);\n    }\n    \n    // build the shard string\n    for (int i = 1; i <= numJettys / 2; i++) {\n      JettySolrRunner j = this.jettys.get(i);\n      JettySolrRunner j2 = this.jettys.get(i + (numJettys / 2 - 1));\n      if (sb.length() > 0) sb.append(',');\n      sb.append(buildUrl(j.getLocalPort()));\n      sb.append(\"|\").append(buildUrl(j2.getLocalPort()));\n    }\n    shards = sb.toString();\n    \n    return jettys;\n  }\n\n","sourceOld":"  /**\n   * @param checkCreatedVsState\n   *          if true, make sure the number created (numJettys) matches the\n   *          number in the cluster state - if you add more jetties this may not\n   *          be the case\n   */\n  protected List<JettySolrRunner> createJettys(int numJettys, boolean checkCreatedVsState) throws Exception {\n    List<JettySolrRunner> jettys = new ArrayList<>();\n    List<SolrServer> clients = new ArrayList<>();\n    StringBuilder sb = new StringBuilder();\n\n    if(getStateFormat() == 2) {\n      log.info(\"Creating collection1 with stateFormat=2\");\n      SolrZkClient zkClient = new SolrZkClient(zkServer.getZkAddress(), AbstractZkTestCase.TIMEOUT, AbstractZkTestCase.TIMEOUT);\n      Overseer.getInQueue(zkClient).offer(ZkStateReader.toJSON(ZkNodeProps.makeMap(\n          Overseer.QUEUE_OPERATION, OverseerCollectionProcessor.CREATECOLLECTION,\n          \"name\", DEFAULT_COLLECTION,\n          \"numShards\", String.valueOf(sliceCount),\n          DocCollection.STATE_FORMAT, getStateFormat())));\n      zkClient.close();\n    }\n\n    for (int i = 1; i <= numJettys; i++) {\n      if (sb.length() > 0) sb.append(',');\n      int cnt = this.jettyIntCntr.incrementAndGet();\n\n      File jettyDir = createTempDir();\n\n      jettyDir.mkdirs();\n      setupJettySolrHome(jettyDir);\n      log.info(\"create jetty \" + i);\n      JettySolrRunner j = createJetty(jettyDir, useJettyDataDir ? getDataDir(testDir + \"/jetty\"\n          + cnt) : null, null, \"solrconfig.xml\", null);\n      jettys.add(j);\n      SolrServer client = createNewSolrServer(j.getLocalPort());\n      clients.add(client);\n    }\n  \n    this.jettys.addAll(jettys);\n    this.clients.addAll(clients);\n    \n    int numShards = getTotalReplicas(DEFAULT_COLLECTION);\n    if (checkCreatedVsState) {\n      // now wait until we see that the number of shards in the cluster state\n      // matches what we expect\n      int retries = 0;\n      while (numShards != shardCount) {\n        numShards = getTotalReplicas(DEFAULT_COLLECTION);\n        if (numShards == shardCount) break;\n        if (retries++ == 60) {\n          printLayoutOnTearDown = true;\n          fail(\"Shards in the state does not match what we set:\" + numShards\n              + \" vs \" + shardCount);\n        }\n        Thread.sleep(500);\n      }\n\n      ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n      // also make sure we have a leader for each shard\n      for (int i = 1; i <= sliceCount; i++) {\n        zkStateReader.getLeaderRetry(DEFAULT_COLLECTION, \"shard\" + i, 10000);\n      }\n    }\n\n    if (numShards > 0) {\n      updateMappingsFromZk(this.jettys, this.clients);\n    }\n    \n    // build the shard string\n    for (int i = 1; i <= numJettys / 2; i++) {\n      JettySolrRunner j = this.jettys.get(i);\n      JettySolrRunner j2 = this.jettys.get(i + (numJettys / 2 - 1));\n      if (sb.length() > 0) sb.append(',');\n      sb.append(buildUrl(j.getLocalPort()));\n      sb.append(\"|\").append(buildUrl(j2.getLocalPort()));\n    }\n    shards = sb.toString();\n    \n    return jettys;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9279b175e5e66258442d2123a50f052219a9cc1b","date":1410531077,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createJettys(int,boolean).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createJettys(int,boolean).mjava","sourceNew":"  /**\n   * @param checkCreatedVsState\n   *          if true, make sure the number created (numJettys) matches the\n   *          number in the cluster state - if you add more jetties this may not\n   *          be the case\n   */\n  protected List<JettySolrRunner> createJettys(int numJettys, boolean checkCreatedVsState) throws Exception {\n    List<JettySolrRunner> jettys = new ArrayList<>();\n    List<SolrServer> clients = new ArrayList<>();\n    StringBuilder sb = new StringBuilder();\n\n    if (getStateFormat() == 2) {\n      log.info(\"Creating collection1 with stateFormat=2\");\n      SolrZkClient zkClient = new SolrZkClient(zkServer.getZkAddress(),\n          AbstractZkTestCase.TIMEOUT, AbstractZkTestCase.TIMEOUT);\n      Overseer.getInQueue(zkClient).offer(\n          ZkStateReader.toJSON(ZkNodeProps.makeMap(Overseer.QUEUE_OPERATION,\n              OverseerCollectionProcessor.CREATECOLLECTION, \"name\",\n              DEFAULT_COLLECTION, \"numShards\", String.valueOf(sliceCount),\n              DocCollection.STATE_FORMAT, getStateFormat())));\n      zkClient.close();\n    }\n\n    for (int i = 1; i <= numJettys; i++) {\n      if (sb.length() > 0) sb.append(',');\n      int cnt = this.jettyIntCntr.incrementAndGet();\n\n      File jettyDir = createTempDir();\n\n      jettyDir.mkdirs();\n      setupJettySolrHome(jettyDir);\n      log.info(\"create jetty \" + i);\n      JettySolrRunner j = createJetty(jettyDir, useJettyDataDir ? getDataDir(testDir + \"/jetty\"\n          + cnt) : null, null, \"solrconfig.xml\", null);\n      jettys.add(j);\n      SolrServer client = createNewSolrServer(j.getLocalPort());\n      clients.add(client);\n    }\n  \n    this.jettys.addAll(jettys);\n    this.clients.addAll(clients);\n    \n    int numShards = getTotalReplicas(DEFAULT_COLLECTION);\n    if (checkCreatedVsState) {\n      // now wait until we see that the number of shards in the cluster state\n      // matches what we expect\n      int retries = 0;\n      while (numShards != shardCount) {\n        numShards = getTotalReplicas(DEFAULT_COLLECTION);\n        if (numShards == shardCount) break;\n        if (retries++ == 60) {\n          printLayoutOnTearDown = true;\n          fail(\"Shards in the state does not match what we set:\" + numShards\n              + \" vs \" + shardCount);\n        }\n        Thread.sleep(500);\n      }\n\n      ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n      // also make sure we have a leader for each shard\n      for (int i = 1; i <= sliceCount; i++) {\n        zkStateReader.getLeaderRetry(DEFAULT_COLLECTION, \"shard\" + i, 10000);\n      }\n    }\n\n    if (numShards > 0) {\n      updateMappingsFromZk(this.jettys, this.clients);\n    }\n    \n    // build the shard string\n    for (int i = 1; i <= numJettys / 2; i++) {\n      JettySolrRunner j = this.jettys.get(i);\n      JettySolrRunner j2 = this.jettys.get(i + (numJettys / 2 - 1));\n      if (sb.length() > 0) sb.append(',');\n      sb.append(buildUrl(j.getLocalPort()));\n      sb.append(\"|\").append(buildUrl(j2.getLocalPort()));\n    }\n    shards = sb.toString();\n    \n    return jettys;\n  }\n\n","sourceOld":"  /**\n   * @param checkCreatedVsState\n   *          if true, make sure the number created (numJettys) matches the\n   *          number in the cluster state - if you add more jetties this may not\n   *          be the case\n   */\n  protected List<JettySolrRunner> createJettys(int numJettys, boolean checkCreatedVsState) throws Exception {\n    List<JettySolrRunner> jettys = new ArrayList<>();\n    List<SolrServer> clients = new ArrayList<>();\n    StringBuilder sb = new StringBuilder();\n\n    for (int i = 1; i <= numJettys; i++) {\n      if (sb.length() > 0) sb.append(',');\n      int cnt = this.jettyIntCntr.incrementAndGet();\n\n      File jettyDir = createTempDir();\n\n      jettyDir.mkdirs();\n      setupJettySolrHome(jettyDir);\n      log.info(\"create jetty \" + i);\n      JettySolrRunner j = createJetty(jettyDir, useJettyDataDir ? getDataDir(testDir + \"/jetty\"\n          + cnt) : null, null, \"solrconfig.xml\", null);\n      jettys.add(j);\n      SolrServer client = createNewSolrServer(j.getLocalPort());\n      clients.add(client);\n    }\n  \n    this.jettys.addAll(jettys);\n    this.clients.addAll(clients);\n    \n    int numShards = getTotalReplicas(DEFAULT_COLLECTION);\n    if (checkCreatedVsState) {\n      // now wait until we see that the number of shards in the cluster state\n      // matches what we expect\n      int retries = 0;\n      while (numShards != shardCount) {\n        numShards = getTotalReplicas(DEFAULT_COLLECTION);\n        if (numShards == shardCount) break;\n        if (retries++ == 60) {\n          printLayoutOnTearDown = true;\n          fail(\"Shards in the state does not match what we set:\" + numShards\n              + \" vs \" + shardCount);\n        }\n        Thread.sleep(500);\n      }\n\n      ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n      // also make sure we have a leader for each shard\n      for (int i = 1; i <= sliceCount; i++) {\n        zkStateReader.getLeaderRetry(DEFAULT_COLLECTION, \"shard\" + i, 10000);\n      }\n    }\n\n    if (numShards > 0) {\n      updateMappingsFromZk(this.jettys, this.clients);\n    }\n    \n    // build the shard string\n    for (int i = 1; i <= numJettys / 2; i++) {\n      JettySolrRunner j = this.jettys.get(i);\n      JettySolrRunner j2 = this.jettys.get(i + (numJettys / 2 - 1));\n      if (sb.length() > 0) sb.append(',');\n      sb.append(buildUrl(j.getLocalPort()));\n      sb.append(\"|\").append(buildUrl(j2.getLocalPort()));\n    }\n    shards = sb.toString();\n    \n    return jettys;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4abec28b874149a7223e32cc7a01704c27790de","date":1410644789,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createJettys(int,boolean).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createJettys(int,boolean).mjava","sourceNew":"  /**\n   * @param checkCreatedVsState\n   *          if true, make sure the number created (numJettys) matches the\n   *          number in the cluster state - if you add more jetties this may not\n   *          be the case\n   */\n  protected List<JettySolrRunner> createJettys(int numJettys, boolean checkCreatedVsState) throws Exception {\n    List<JettySolrRunner> jettys = new ArrayList<>();\n    List<SolrServer> clients = new ArrayList<>();\n    StringBuilder sb = new StringBuilder();\n\n    if (getStateFormat() == 2) {\n      log.info(\"Creating collection1 with stateFormat=2\");\n      SolrZkClient zkClient = new SolrZkClient(zkServer.getZkAddress(),\n          AbstractZkTestCase.TIMEOUT, AbstractZkTestCase.TIMEOUT);\n      Overseer.getInQueue(zkClient).offer(\n          ZkStateReader.toJSON(ZkNodeProps.makeMap(Overseer.QUEUE_OPERATION,\n              OverseerCollectionProcessor.CREATECOLLECTION, \"name\",\n              DEFAULT_COLLECTION, \"numShards\", String.valueOf(sliceCount),\n              DocCollection.STATE_FORMAT, getStateFormat())));\n      zkClient.close();\n    }\n\n    for (int i = 1; i <= numJettys; i++) {\n      if (sb.length() > 0) sb.append(',');\n      int cnt = this.jettyIntCntr.incrementAndGet();\n\n      File jettyDir = createTempDir().toFile();\n\n      jettyDir.mkdirs();\n      setupJettySolrHome(jettyDir);\n      log.info(\"create jetty \" + i);\n      JettySolrRunner j = createJetty(jettyDir, useJettyDataDir ? getDataDir(testDir + \"/jetty\"\n          + cnt) : null, null, \"solrconfig.xml\", null);\n      jettys.add(j);\n      SolrServer client = createNewSolrServer(j.getLocalPort());\n      clients.add(client);\n    }\n  \n    this.jettys.addAll(jettys);\n    this.clients.addAll(clients);\n    \n    int numShards = getTotalReplicas(DEFAULT_COLLECTION);\n    if (checkCreatedVsState) {\n      // now wait until we see that the number of shards in the cluster state\n      // matches what we expect\n      int retries = 0;\n      while (numShards != shardCount) {\n        numShards = getTotalReplicas(DEFAULT_COLLECTION);\n        if (numShards == shardCount) break;\n        if (retries++ == 60) {\n          printLayoutOnTearDown = true;\n          fail(\"Shards in the state does not match what we set:\" + numShards\n              + \" vs \" + shardCount);\n        }\n        Thread.sleep(500);\n      }\n\n      ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n      // also make sure we have a leader for each shard\n      for (int i = 1; i <= sliceCount; i++) {\n        zkStateReader.getLeaderRetry(DEFAULT_COLLECTION, \"shard\" + i, 10000);\n      }\n    }\n\n    if (numShards > 0) {\n      updateMappingsFromZk(this.jettys, this.clients);\n    }\n    \n    // build the shard string\n    for (int i = 1; i <= numJettys / 2; i++) {\n      JettySolrRunner j = this.jettys.get(i);\n      JettySolrRunner j2 = this.jettys.get(i + (numJettys / 2 - 1));\n      if (sb.length() > 0) sb.append(',');\n      sb.append(buildUrl(j.getLocalPort()));\n      sb.append(\"|\").append(buildUrl(j2.getLocalPort()));\n    }\n    shards = sb.toString();\n    \n    return jettys;\n  }\n\n","sourceOld":"  /**\n   * @param checkCreatedVsState\n   *          if true, make sure the number created (numJettys) matches the\n   *          number in the cluster state - if you add more jetties this may not\n   *          be the case\n   */\n  protected List<JettySolrRunner> createJettys(int numJettys, boolean checkCreatedVsState) throws Exception {\n    List<JettySolrRunner> jettys = new ArrayList<>();\n    List<SolrServer> clients = new ArrayList<>();\n    StringBuilder sb = new StringBuilder();\n\n    if (getStateFormat() == 2) {\n      log.info(\"Creating collection1 with stateFormat=2\");\n      SolrZkClient zkClient = new SolrZkClient(zkServer.getZkAddress(),\n          AbstractZkTestCase.TIMEOUT, AbstractZkTestCase.TIMEOUT);\n      Overseer.getInQueue(zkClient).offer(\n          ZkStateReader.toJSON(ZkNodeProps.makeMap(Overseer.QUEUE_OPERATION,\n              OverseerCollectionProcessor.CREATECOLLECTION, \"name\",\n              DEFAULT_COLLECTION, \"numShards\", String.valueOf(sliceCount),\n              DocCollection.STATE_FORMAT, getStateFormat())));\n      zkClient.close();\n    }\n\n    for (int i = 1; i <= numJettys; i++) {\n      if (sb.length() > 0) sb.append(',');\n      int cnt = this.jettyIntCntr.incrementAndGet();\n\n      File jettyDir = createTempDir();\n\n      jettyDir.mkdirs();\n      setupJettySolrHome(jettyDir);\n      log.info(\"create jetty \" + i);\n      JettySolrRunner j = createJetty(jettyDir, useJettyDataDir ? getDataDir(testDir + \"/jetty\"\n          + cnt) : null, null, \"solrconfig.xml\", null);\n      jettys.add(j);\n      SolrServer client = createNewSolrServer(j.getLocalPort());\n      clients.add(client);\n    }\n  \n    this.jettys.addAll(jettys);\n    this.clients.addAll(clients);\n    \n    int numShards = getTotalReplicas(DEFAULT_COLLECTION);\n    if (checkCreatedVsState) {\n      // now wait until we see that the number of shards in the cluster state\n      // matches what we expect\n      int retries = 0;\n      while (numShards != shardCount) {\n        numShards = getTotalReplicas(DEFAULT_COLLECTION);\n        if (numShards == shardCount) break;\n        if (retries++ == 60) {\n          printLayoutOnTearDown = true;\n          fail(\"Shards in the state does not match what we set:\" + numShards\n              + \" vs \" + shardCount);\n        }\n        Thread.sleep(500);\n      }\n\n      ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n      // also make sure we have a leader for each shard\n      for (int i = 1; i <= sliceCount; i++) {\n        zkStateReader.getLeaderRetry(DEFAULT_COLLECTION, \"shard\" + i, 10000);\n      }\n    }\n\n    if (numShards > 0) {\n      updateMappingsFromZk(this.jettys, this.clients);\n    }\n    \n    // build the shard string\n    for (int i = 1; i <= numJettys / 2; i++) {\n      JettySolrRunner j = this.jettys.get(i);\n      JettySolrRunner j2 = this.jettys.get(i + (numJettys / 2 - 1));\n      if (sb.length() > 0) sb.append(',');\n      sb.append(buildUrl(j.getLocalPort()));\n      sb.append(\"|\").append(buildUrl(j2.getLocalPort()));\n    }\n    shards = sb.toString();\n    \n    return jettys;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30c688f7052130cef7bd419c85e3c5be214f7b9e","date":1411018984,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createJettys(int,boolean).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createJettys(int,boolean).mjava","sourceNew":"  /**\n   * @param checkCreatedVsState\n   *          if true, make sure the number created (numJettys) matches the\n   *          number in the cluster state - if you add more jetties this may not\n   *          be the case\n   */\n  protected List<JettySolrRunner> createJettys(int numJettys, boolean checkCreatedVsState) throws Exception {\n    List<JettySolrRunner> jettys = new ArrayList<>();\n    List<SolrServer> clients = new ArrayList<>();\n    StringBuilder sb = new StringBuilder();\n\n    if (getStateFormat() == 2) {\n      log.info(\"Creating collection1 with stateFormat=2\");\n      SolrZkClient zkClient = new SolrZkClient(zkServer.getZkAddress(),\n          AbstractZkTestCase.TIMEOUT, AbstractZkTestCase.TIMEOUT);\n      Overseer.getInQueue(zkClient).offer(\n          ZkStateReader.toJSON(ZkNodeProps.makeMap(Overseer.QUEUE_OPERATION,\n              CollectionParams.CollectionAction.CREATE.toLower(), \"name\",\n              DEFAULT_COLLECTION, \"numShards\", String.valueOf(sliceCount),\n              DocCollection.STATE_FORMAT, getStateFormat())));\n      zkClient.close();\n    }\n\n    for (int i = 1; i <= numJettys; i++) {\n      if (sb.length() > 0) sb.append(',');\n      int cnt = this.jettyIntCntr.incrementAndGet();\n\n      File jettyDir = createTempDir().toFile();\n\n      jettyDir.mkdirs();\n      setupJettySolrHome(jettyDir);\n      log.info(\"create jetty \" + i);\n      JettySolrRunner j = createJetty(jettyDir, useJettyDataDir ? getDataDir(testDir + \"/jetty\"\n          + cnt) : null, null, \"solrconfig.xml\", null);\n      jettys.add(j);\n      SolrServer client = createNewSolrServer(j.getLocalPort());\n      clients.add(client);\n    }\n  \n    this.jettys.addAll(jettys);\n    this.clients.addAll(clients);\n    \n    int numShards = getTotalReplicas(DEFAULT_COLLECTION);\n    if (checkCreatedVsState) {\n      // now wait until we see that the number of shards in the cluster state\n      // matches what we expect\n      int retries = 0;\n      while (numShards != shardCount) {\n        numShards = getTotalReplicas(DEFAULT_COLLECTION);\n        if (numShards == shardCount) break;\n        if (retries++ == 60) {\n          printLayoutOnTearDown = true;\n          fail(\"Shards in the state does not match what we set:\" + numShards\n              + \" vs \" + shardCount);\n        }\n        Thread.sleep(500);\n      }\n\n      ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n      // also make sure we have a leader for each shard\n      for (int i = 1; i <= sliceCount; i++) {\n        zkStateReader.getLeaderRetry(DEFAULT_COLLECTION, \"shard\" + i, 10000);\n      }\n    }\n\n    if (numShards > 0) {\n      updateMappingsFromZk(this.jettys, this.clients);\n    }\n    \n    // build the shard string\n    for (int i = 1; i <= numJettys / 2; i++) {\n      JettySolrRunner j = this.jettys.get(i);\n      JettySolrRunner j2 = this.jettys.get(i + (numJettys / 2 - 1));\n      if (sb.length() > 0) sb.append(',');\n      sb.append(buildUrl(j.getLocalPort()));\n      sb.append(\"|\").append(buildUrl(j2.getLocalPort()));\n    }\n    shards = sb.toString();\n    \n    return jettys;\n  }\n\n","sourceOld":"  /**\n   * @param checkCreatedVsState\n   *          if true, make sure the number created (numJettys) matches the\n   *          number in the cluster state - if you add more jetties this may not\n   *          be the case\n   */\n  protected List<JettySolrRunner> createJettys(int numJettys, boolean checkCreatedVsState) throws Exception {\n    List<JettySolrRunner> jettys = new ArrayList<>();\n    List<SolrServer> clients = new ArrayList<>();\n    StringBuilder sb = new StringBuilder();\n\n    if (getStateFormat() == 2) {\n      log.info(\"Creating collection1 with stateFormat=2\");\n      SolrZkClient zkClient = new SolrZkClient(zkServer.getZkAddress(),\n          AbstractZkTestCase.TIMEOUT, AbstractZkTestCase.TIMEOUT);\n      Overseer.getInQueue(zkClient).offer(\n          ZkStateReader.toJSON(ZkNodeProps.makeMap(Overseer.QUEUE_OPERATION,\n              OverseerCollectionProcessor.CREATECOLLECTION, \"name\",\n              DEFAULT_COLLECTION, \"numShards\", String.valueOf(sliceCount),\n              DocCollection.STATE_FORMAT, getStateFormat())));\n      zkClient.close();\n    }\n\n    for (int i = 1; i <= numJettys; i++) {\n      if (sb.length() > 0) sb.append(',');\n      int cnt = this.jettyIntCntr.incrementAndGet();\n\n      File jettyDir = createTempDir().toFile();\n\n      jettyDir.mkdirs();\n      setupJettySolrHome(jettyDir);\n      log.info(\"create jetty \" + i);\n      JettySolrRunner j = createJetty(jettyDir, useJettyDataDir ? getDataDir(testDir + \"/jetty\"\n          + cnt) : null, null, \"solrconfig.xml\", null);\n      jettys.add(j);\n      SolrServer client = createNewSolrServer(j.getLocalPort());\n      clients.add(client);\n    }\n  \n    this.jettys.addAll(jettys);\n    this.clients.addAll(clients);\n    \n    int numShards = getTotalReplicas(DEFAULT_COLLECTION);\n    if (checkCreatedVsState) {\n      // now wait until we see that the number of shards in the cluster state\n      // matches what we expect\n      int retries = 0;\n      while (numShards != shardCount) {\n        numShards = getTotalReplicas(DEFAULT_COLLECTION);\n        if (numShards == shardCount) break;\n        if (retries++ == 60) {\n          printLayoutOnTearDown = true;\n          fail(\"Shards in the state does not match what we set:\" + numShards\n              + \" vs \" + shardCount);\n        }\n        Thread.sleep(500);\n      }\n\n      ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n      // also make sure we have a leader for each shard\n      for (int i = 1; i <= sliceCount; i++) {\n        zkStateReader.getLeaderRetry(DEFAULT_COLLECTION, \"shard\" + i, 10000);\n      }\n    }\n\n    if (numShards > 0) {\n      updateMappingsFromZk(this.jettys, this.clients);\n    }\n    \n    // build the shard string\n    for (int i = 1; i <= numJettys / 2; i++) {\n      JettySolrRunner j = this.jettys.get(i);\n      JettySolrRunner j2 = this.jettys.get(i + (numJettys / 2 - 1));\n      if (sb.length() > 0) sb.append(',');\n      sb.append(buildUrl(j.getLocalPort()));\n      sb.append(\"|\").append(buildUrl(j2.getLocalPort()));\n    }\n    shards = sb.toString();\n    \n    return jettys;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createJettys(int,boolean).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createJettys(int,boolean).mjava","sourceNew":"  /**\n   * @param checkCreatedVsState\n   *          if true, make sure the number created (numJettys) matches the\n   *          number in the cluster state - if you add more jetties this may not\n   *          be the case\n   */\n  protected List<JettySolrRunner> createJettys(int numJettys, boolean checkCreatedVsState) throws Exception {\n    List<JettySolrRunner> jettys = new ArrayList<>();\n    List<SolrClient> clients = new ArrayList<>();\n    StringBuilder sb = new StringBuilder();\n\n    if (getStateFormat() == 2) {\n      log.info(\"Creating collection1 with stateFormat=2\");\n      SolrZkClient zkClient = new SolrZkClient(zkServer.getZkAddress(),\n          AbstractZkTestCase.TIMEOUT, AbstractZkTestCase.TIMEOUT);\n      Overseer.getInQueue(zkClient).offer(\n          ZkStateReader.toJSON(ZkNodeProps.makeMap(Overseer.QUEUE_OPERATION,\n              CollectionParams.CollectionAction.CREATE.toLower(), \"name\",\n              DEFAULT_COLLECTION, \"numShards\", String.valueOf(sliceCount),\n              DocCollection.STATE_FORMAT, getStateFormat())));\n      zkClient.close();\n    }\n\n    for (int i = 1; i <= numJettys; i++) {\n      if (sb.length() > 0) sb.append(',');\n      int cnt = this.jettyIntCntr.incrementAndGet();\n\n      File jettyDir = createTempDir().toFile();\n\n      jettyDir.mkdirs();\n      setupJettySolrHome(jettyDir);\n      log.info(\"create jetty \" + i);\n      JettySolrRunner j = createJetty(jettyDir, useJettyDataDir ? getDataDir(testDir + \"/jetty\"\n          + cnt) : null, null, \"solrconfig.xml\", null);\n      jettys.add(j);\n      SolrClient client = createNewSolrClient(j.getLocalPort());\n      clients.add(client);\n    }\n  \n    this.jettys.addAll(jettys);\n    this.clients.addAll(clients);\n    \n    int numShards = getTotalReplicas(DEFAULT_COLLECTION);\n    if (checkCreatedVsState) {\n      // now wait until we see that the number of shards in the cluster state\n      // matches what we expect\n      int retries = 0;\n      while (numShards != shardCount) {\n        numShards = getTotalReplicas(DEFAULT_COLLECTION);\n        if (numShards == shardCount) break;\n        if (retries++ == 60) {\n          printLayoutOnTearDown = true;\n          fail(\"Shards in the state does not match what we set:\" + numShards\n              + \" vs \" + shardCount);\n        }\n        Thread.sleep(500);\n      }\n\n      ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n      // also make sure we have a leader for each shard\n      for (int i = 1; i <= sliceCount; i++) {\n        zkStateReader.getLeaderRetry(DEFAULT_COLLECTION, \"shard\" + i, 10000);\n      }\n    }\n\n    if (numShards > 0) {\n      updateMappingsFromZk(this.jettys, this.clients);\n    }\n    \n    // build the shard string\n    for (int i = 1; i <= numJettys / 2; i++) {\n      JettySolrRunner j = this.jettys.get(i);\n      JettySolrRunner j2 = this.jettys.get(i + (numJettys / 2 - 1));\n      if (sb.length() > 0) sb.append(',');\n      sb.append(buildUrl(j.getLocalPort()));\n      sb.append(\"|\").append(buildUrl(j2.getLocalPort()));\n    }\n    shards = sb.toString();\n    \n    return jettys;\n  }\n\n","sourceOld":"  /**\n   * @param checkCreatedVsState\n   *          if true, make sure the number created (numJettys) matches the\n   *          number in the cluster state - if you add more jetties this may not\n   *          be the case\n   */\n  protected List<JettySolrRunner> createJettys(int numJettys, boolean checkCreatedVsState) throws Exception {\n    List<JettySolrRunner> jettys = new ArrayList<>();\n    List<SolrServer> clients = new ArrayList<>();\n    StringBuilder sb = new StringBuilder();\n\n    if (getStateFormat() == 2) {\n      log.info(\"Creating collection1 with stateFormat=2\");\n      SolrZkClient zkClient = new SolrZkClient(zkServer.getZkAddress(),\n          AbstractZkTestCase.TIMEOUT, AbstractZkTestCase.TIMEOUT);\n      Overseer.getInQueue(zkClient).offer(\n          ZkStateReader.toJSON(ZkNodeProps.makeMap(Overseer.QUEUE_OPERATION,\n              CollectionParams.CollectionAction.CREATE.toLower(), \"name\",\n              DEFAULT_COLLECTION, \"numShards\", String.valueOf(sliceCount),\n              DocCollection.STATE_FORMAT, getStateFormat())));\n      zkClient.close();\n    }\n\n    for (int i = 1; i <= numJettys; i++) {\n      if (sb.length() > 0) sb.append(',');\n      int cnt = this.jettyIntCntr.incrementAndGet();\n\n      File jettyDir = createTempDir().toFile();\n\n      jettyDir.mkdirs();\n      setupJettySolrHome(jettyDir);\n      log.info(\"create jetty \" + i);\n      JettySolrRunner j = createJetty(jettyDir, useJettyDataDir ? getDataDir(testDir + \"/jetty\"\n          + cnt) : null, null, \"solrconfig.xml\", null);\n      jettys.add(j);\n      SolrServer client = createNewSolrServer(j.getLocalPort());\n      clients.add(client);\n    }\n  \n    this.jettys.addAll(jettys);\n    this.clients.addAll(clients);\n    \n    int numShards = getTotalReplicas(DEFAULT_COLLECTION);\n    if (checkCreatedVsState) {\n      // now wait until we see that the number of shards in the cluster state\n      // matches what we expect\n      int retries = 0;\n      while (numShards != shardCount) {\n        numShards = getTotalReplicas(DEFAULT_COLLECTION);\n        if (numShards == shardCount) break;\n        if (retries++ == 60) {\n          printLayoutOnTearDown = true;\n          fail(\"Shards in the state does not match what we set:\" + numShards\n              + \" vs \" + shardCount);\n        }\n        Thread.sleep(500);\n      }\n\n      ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n      // also make sure we have a leader for each shard\n      for (int i = 1; i <= sliceCount; i++) {\n        zkStateReader.getLeaderRetry(DEFAULT_COLLECTION, \"shard\" + i, 10000);\n      }\n    }\n\n    if (numShards > 0) {\n      updateMappingsFromZk(this.jettys, this.clients);\n    }\n    \n    // build the shard string\n    for (int i = 1; i <= numJettys / 2; i++) {\n      JettySolrRunner j = this.jettys.get(i);\n      JettySolrRunner j2 = this.jettys.get(i + (numJettys / 2 - 1));\n      if (sb.length() > 0) sb.append(',');\n      sb.append(buildUrl(j.getLocalPort()));\n      sb.append(\"|\").append(buildUrl(j2.getLocalPort()));\n    }\n    shards = sb.toString();\n    \n    return jettys;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd44bec977a26a118d9e809e2de6f7edb5ca0f39","date":1421673929,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createJettys(int,boolean).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createJettys(int,boolean).mjava","sourceNew":"  /**\n   * @param checkCreatedVsState\n   *          if true, make sure the number created (numJettys) matches the\n   *          number in the cluster state - if you add more jetties this may not\n   *          be the case\n   */\n  protected List<JettySolrRunner> createJettys(int numJettys, boolean checkCreatedVsState) throws Exception {\n    List<JettySolrRunner> jettys = new ArrayList<>();\n    List<SolrClient> clients = new ArrayList<>();\n    StringBuilder sb = new StringBuilder();\n\n    if (getStateFormat() == 2) {\n      log.info(\"Creating collection1 with stateFormat=2\");\n      SolrZkClient zkClient = new SolrZkClient(zkServer.getZkAddress(),\n          AbstractZkTestCase.TIMEOUT, AbstractZkTestCase.TIMEOUT);\n      Overseer.getInQueue(zkClient).offer(\n          ZkStateReader.toJSON(ZkNodeProps.makeMap(Overseer.QUEUE_OPERATION,\n              CollectionParams.CollectionAction.CREATE.toLower(), \"name\",\n              DEFAULT_COLLECTION, \"numShards\", String.valueOf(sliceCount),\n              DocCollection.STATE_FORMAT, getStateFormat())));\n      zkClient.close();\n    }\n\n    for (int i = 1; i <= numJettys; i++) {\n      if (sb.length() > 0) sb.append(',');\n      int cnt = this.jettyIntCntr.incrementAndGet();\n\n      File jettyDir = createTempDir(\"shard-\" + i).toFile();\n\n      jettyDir.mkdirs();\n      setupJettySolrHome(jettyDir);\n      log.info(\"create jetty \" + i);\n      System.setProperty(\"coreRootDirectory\", jettyDir.toPath().resolve(\"cores\").toString());\n      JettySolrRunner j = createJetty(jettyDir, useJettyDataDir ? getDataDir(testDir + \"/jetty\"\n          + cnt) : null, null, \"solrconfig.xml\", null);\n      jettys.add(j);\n      SolrClient client = createNewSolrClient(j.getLocalPort());\n      clients.add(client);\n    }\n  \n    this.jettys.addAll(jettys);\n    this.clients.addAll(clients);\n    \n    int numShards = getTotalReplicas(DEFAULT_COLLECTION);\n    if (checkCreatedVsState) {\n      // now wait until we see that the number of shards in the cluster state\n      // matches what we expect\n      int retries = 0;\n      while (numShards != shardCount) {\n        numShards = getTotalReplicas(DEFAULT_COLLECTION);\n        if (numShards == shardCount) break;\n        if (retries++ == 60) {\n          printLayoutOnTearDown = true;\n          fail(\"Shards in the state does not match what we set:\" + numShards\n              + \" vs \" + shardCount);\n        }\n        Thread.sleep(500);\n      }\n\n      ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n      // also make sure we have a leader for each shard\n      for (int i = 1; i <= sliceCount; i++) {\n        zkStateReader.getLeaderRetry(DEFAULT_COLLECTION, \"shard\" + i, 10000);\n      }\n    }\n\n    if (numShards > 0) {\n      updateMappingsFromZk(this.jettys, this.clients);\n    }\n    \n    // build the shard string\n    for (int i = 1; i <= numJettys / 2; i++) {\n      JettySolrRunner j = this.jettys.get(i);\n      JettySolrRunner j2 = this.jettys.get(i + (numJettys / 2 - 1));\n      if (sb.length() > 0) sb.append(',');\n      sb.append(buildUrl(j.getLocalPort()));\n      sb.append(\"|\").append(buildUrl(j2.getLocalPort()));\n    }\n    shards = sb.toString();\n    \n    return jettys;\n  }\n\n","sourceOld":"  /**\n   * @param checkCreatedVsState\n   *          if true, make sure the number created (numJettys) matches the\n   *          number in the cluster state - if you add more jetties this may not\n   *          be the case\n   */\n  protected List<JettySolrRunner> createJettys(int numJettys, boolean checkCreatedVsState) throws Exception {\n    List<JettySolrRunner> jettys = new ArrayList<>();\n    List<SolrClient> clients = new ArrayList<>();\n    StringBuilder sb = new StringBuilder();\n\n    if (getStateFormat() == 2) {\n      log.info(\"Creating collection1 with stateFormat=2\");\n      SolrZkClient zkClient = new SolrZkClient(zkServer.getZkAddress(),\n          AbstractZkTestCase.TIMEOUT, AbstractZkTestCase.TIMEOUT);\n      Overseer.getInQueue(zkClient).offer(\n          ZkStateReader.toJSON(ZkNodeProps.makeMap(Overseer.QUEUE_OPERATION,\n              CollectionParams.CollectionAction.CREATE.toLower(), \"name\",\n              DEFAULT_COLLECTION, \"numShards\", String.valueOf(sliceCount),\n              DocCollection.STATE_FORMAT, getStateFormat())));\n      zkClient.close();\n    }\n\n    for (int i = 1; i <= numJettys; i++) {\n      if (sb.length() > 0) sb.append(',');\n      int cnt = this.jettyIntCntr.incrementAndGet();\n\n      File jettyDir = createTempDir().toFile();\n\n      jettyDir.mkdirs();\n      setupJettySolrHome(jettyDir);\n      log.info(\"create jetty \" + i);\n      JettySolrRunner j = createJetty(jettyDir, useJettyDataDir ? getDataDir(testDir + \"/jetty\"\n          + cnt) : null, null, \"solrconfig.xml\", null);\n      jettys.add(j);\n      SolrClient client = createNewSolrClient(j.getLocalPort());\n      clients.add(client);\n    }\n  \n    this.jettys.addAll(jettys);\n    this.clients.addAll(clients);\n    \n    int numShards = getTotalReplicas(DEFAULT_COLLECTION);\n    if (checkCreatedVsState) {\n      // now wait until we see that the number of shards in the cluster state\n      // matches what we expect\n      int retries = 0;\n      while (numShards != shardCount) {\n        numShards = getTotalReplicas(DEFAULT_COLLECTION);\n        if (numShards == shardCount) break;\n        if (retries++ == 60) {\n          printLayoutOnTearDown = true;\n          fail(\"Shards in the state does not match what we set:\" + numShards\n              + \" vs \" + shardCount);\n        }\n        Thread.sleep(500);\n      }\n\n      ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n      // also make sure we have a leader for each shard\n      for (int i = 1; i <= sliceCount; i++) {\n        zkStateReader.getLeaderRetry(DEFAULT_COLLECTION, \"shard\" + i, 10000);\n      }\n    }\n\n    if (numShards > 0) {\n      updateMappingsFromZk(this.jettys, this.clients);\n    }\n    \n    // build the shard string\n    for (int i = 1; i <= numJettys / 2; i++) {\n      JettySolrRunner j = this.jettys.get(i);\n      JettySolrRunner j2 = this.jettys.get(i + (numJettys / 2 - 1));\n      if (sb.length() > 0) sb.append(',');\n      sb.append(buildUrl(j.getLocalPort()));\n      sb.append(\"|\").append(buildUrl(j2.getLocalPort()));\n    }\n    shards = sb.toString();\n    \n    return jettys;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ed5e858eb62a97f2c8f311bbc560d03fe017d119","date":1421935972,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createJettys(int,boolean).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createJettys(int,boolean).mjava","sourceNew":"  /**\n   * @param checkCreatedVsState\n   *          if true, make sure the number created (numJettys) matches the\n   *          number in the cluster state - if you add more jetties this may not\n   *          be the case\n   */\n  protected List<JettySolrRunner> createJettys(int numJettys, boolean checkCreatedVsState) throws Exception {\n    List<JettySolrRunner> jettys = new ArrayList<>();\n    List<SolrClient> clients = new ArrayList<>();\n    StringBuilder sb = new StringBuilder();\n\n    if (\"2\".equals(getStateFormat())) {\n      log.info(\"Creating collection1 with stateFormat=2\");\n      SolrZkClient zkClient = new SolrZkClient(zkServer.getZkAddress(),\n          AbstractZkTestCase.TIMEOUT, AbstractZkTestCase.TIMEOUT);\n      Overseer.getInQueue(zkClient).offer(\n          ZkStateReader.toJSON(ZkNodeProps.makeMap(Overseer.QUEUE_OPERATION,\n              CollectionParams.CollectionAction.CREATE.toLower(), \"name\",\n              DEFAULT_COLLECTION, \"numShards\", String.valueOf(sliceCount),\n              DocCollection.STATE_FORMAT, getStateFormat())));\n      zkClient.close();\n    }\n\n    for (int i = 1; i <= numJettys; i++) {\n      if (sb.length() > 0) sb.append(',');\n      int cnt = this.jettyIntCntr.incrementAndGet();\n\n      File jettyDir = createTempDir(\"shard-\" + i).toFile();\n\n      jettyDir.mkdirs();\n      setupJettySolrHome(jettyDir);\n      log.info(\"create jetty \" + i);\n      System.setProperty(\"coreRootDirectory\", jettyDir.toPath().resolve(\"cores\").toString());\n      JettySolrRunner j = createJetty(jettyDir, useJettyDataDir ? getDataDir(testDir + \"/jetty\"\n          + cnt) : null, null, \"solrconfig.xml\", null);\n      jettys.add(j);\n      SolrClient client = createNewSolrClient(j.getLocalPort());\n      clients.add(client);\n    }\n  \n    this.jettys.addAll(jettys);\n    this.clients.addAll(clients);\n    \n    int numShards = getTotalReplicas(DEFAULT_COLLECTION);\n    if (checkCreatedVsState) {\n      // now wait until we see that the number of shards in the cluster state\n      // matches what we expect\n      int retries = 0;\n      while (numShards != shardCount) {\n        numShards = getTotalReplicas(DEFAULT_COLLECTION);\n        if (numShards == shardCount) break;\n        if (retries++ == 60) {\n          printLayoutOnTearDown = true;\n          fail(\"Shards in the state does not match what we set:\" + numShards\n              + \" vs \" + shardCount);\n        }\n        Thread.sleep(500);\n      }\n\n      ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n      // also make sure we have a leader for each shard\n      for (int i = 1; i <= sliceCount; i++) {\n        zkStateReader.getLeaderRetry(DEFAULT_COLLECTION, \"shard\" + i, 10000);\n      }\n    }\n\n    if (numShards > 0) {\n      updateMappingsFromZk(this.jettys, this.clients);\n    }\n    \n    // build the shard string\n    for (int i = 1; i <= numJettys / 2; i++) {\n      JettySolrRunner j = this.jettys.get(i);\n      JettySolrRunner j2 = this.jettys.get(i + (numJettys / 2 - 1));\n      if (sb.length() > 0) sb.append(',');\n      sb.append(buildUrl(j.getLocalPort()));\n      sb.append(\"|\").append(buildUrl(j2.getLocalPort()));\n    }\n    shards = sb.toString();\n    \n    return jettys;\n  }\n\n","sourceOld":"  /**\n   * @param checkCreatedVsState\n   *          if true, make sure the number created (numJettys) matches the\n   *          number in the cluster state - if you add more jetties this may not\n   *          be the case\n   */\n  protected List<JettySolrRunner> createJettys(int numJettys, boolean checkCreatedVsState) throws Exception {\n    List<JettySolrRunner> jettys = new ArrayList<>();\n    List<SolrClient> clients = new ArrayList<>();\n    StringBuilder sb = new StringBuilder();\n\n    if (getStateFormat() == 2) {\n      log.info(\"Creating collection1 with stateFormat=2\");\n      SolrZkClient zkClient = new SolrZkClient(zkServer.getZkAddress(),\n          AbstractZkTestCase.TIMEOUT, AbstractZkTestCase.TIMEOUT);\n      Overseer.getInQueue(zkClient).offer(\n          ZkStateReader.toJSON(ZkNodeProps.makeMap(Overseer.QUEUE_OPERATION,\n              CollectionParams.CollectionAction.CREATE.toLower(), \"name\",\n              DEFAULT_COLLECTION, \"numShards\", String.valueOf(sliceCount),\n              DocCollection.STATE_FORMAT, getStateFormat())));\n      zkClient.close();\n    }\n\n    for (int i = 1; i <= numJettys; i++) {\n      if (sb.length() > 0) sb.append(',');\n      int cnt = this.jettyIntCntr.incrementAndGet();\n\n      File jettyDir = createTempDir(\"shard-\" + i).toFile();\n\n      jettyDir.mkdirs();\n      setupJettySolrHome(jettyDir);\n      log.info(\"create jetty \" + i);\n      System.setProperty(\"coreRootDirectory\", jettyDir.toPath().resolve(\"cores\").toString());\n      JettySolrRunner j = createJetty(jettyDir, useJettyDataDir ? getDataDir(testDir + \"/jetty\"\n          + cnt) : null, null, \"solrconfig.xml\", null);\n      jettys.add(j);\n      SolrClient client = createNewSolrClient(j.getLocalPort());\n      clients.add(client);\n    }\n  \n    this.jettys.addAll(jettys);\n    this.clients.addAll(clients);\n    \n    int numShards = getTotalReplicas(DEFAULT_COLLECTION);\n    if (checkCreatedVsState) {\n      // now wait until we see that the number of shards in the cluster state\n      // matches what we expect\n      int retries = 0;\n      while (numShards != shardCount) {\n        numShards = getTotalReplicas(DEFAULT_COLLECTION);\n        if (numShards == shardCount) break;\n        if (retries++ == 60) {\n          printLayoutOnTearDown = true;\n          fail(\"Shards in the state does not match what we set:\" + numShards\n              + \" vs \" + shardCount);\n        }\n        Thread.sleep(500);\n      }\n\n      ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n      // also make sure we have a leader for each shard\n      for (int i = 1; i <= sliceCount; i++) {\n        zkStateReader.getLeaderRetry(DEFAULT_COLLECTION, \"shard\" + i, 10000);\n      }\n    }\n\n    if (numShards > 0) {\n      updateMappingsFromZk(this.jettys, this.clients);\n    }\n    \n    // build the shard string\n    for (int i = 1; i <= numJettys / 2; i++) {\n      JettySolrRunner j = this.jettys.get(i);\n      JettySolrRunner j2 = this.jettys.get(i + (numJettys / 2 - 1));\n      if (sb.length() > 0) sb.append(',');\n      sb.append(buildUrl(j.getLocalPort()));\n      sb.append(\"|\").append(buildUrl(j2.getLocalPort()));\n    }\n    shards = sb.toString();\n    \n    return jettys;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"abb23fcc2461782ab204e61213240feb77d355aa","date":1422029612,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createJettys(int,boolean).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createJettys(int,boolean).mjava","sourceNew":"  /**\n   * @param checkCreatedVsState\n   *          if true, make sure the number created (numJettys) matches the\n   *          number in the cluster state - if you add more jetties this may not\n   *          be the case\n   */\n  protected List<JettySolrRunner> createJettys(int numJettys, boolean checkCreatedVsState) throws Exception {\n    List<JettySolrRunner> jettys = new ArrayList<>();\n    List<SolrClient> clients = new ArrayList<>();\n    StringBuilder sb = new StringBuilder();\n\n    if (\"2\".equals(getStateFormat())) {\n      log.info(\"Creating collection1 with stateFormat=2\");\n      SolrZkClient zkClient = new SolrZkClient(zkServer.getZkAddress(),\n          AbstractZkTestCase.TIMEOUT, AbstractZkTestCase.TIMEOUT);\n      Overseer.getInQueue(zkClient).offer(\n          ZkStateReader.toJSON(ZkNodeProps.makeMap(Overseer.QUEUE_OPERATION,\n              CollectionParams.CollectionAction.CREATE.toLower(), \"name\",\n              DEFAULT_COLLECTION, \"numShards\", String.valueOf(sliceCount),\n              DocCollection.STATE_FORMAT, getStateFormat())));\n      zkClient.close();\n    }\n\n    for (int i = 1; i <= numJettys; i++) {\n      if (sb.length() > 0) sb.append(',');\n      int cnt = this.jettyIntCntr.incrementAndGet();\n\n      File jettyDir = createTempDir(\"shard-\" + i).toFile();\n\n      jettyDir.mkdirs();\n      setupJettySolrHome(jettyDir);\n      log.info(\"create jetty \" + i);\n      System.setProperty(\"coreRootDirectory\", jettyDir.toPath().resolve(\"cores\").toString());\n      JettySolrRunner j = createJetty(jettyDir, useJettyDataDir ? getDataDir(testDir + \"/jetty\"\n          + cnt) : null, null, \"solrconfig.xml\", null);\n      jettys.add(j);\n      SolrClient client = createNewSolrClient(j.getLocalPort());\n      clients.add(client);\n    }\n\n    this.jettys.addAll(jettys);\n    this.clients.addAll(clients);\n\n    int numShards = getTotalReplicas(DEFAULT_COLLECTION);\n    if (checkCreatedVsState) {\n      // now wait until we see that the number of shards in the cluster state\n      // matches what we expect\n      int retries = 0;\n      while (numShards != getShardCount()) {\n        numShards = getTotalReplicas(DEFAULT_COLLECTION);\n        if (numShards == getShardCount()) break;\n        if (retries++ == 60) {\n          printLayoutOnTearDown = true;\n          fail(\"Shards in the state does not match what we set:\" + numShards\n              + \" vs \" + getShardCount());\n        }\n        Thread.sleep(500);\n      }\n\n      ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n      // also make sure we have a leader for each shard\n      for (int i = 1; i <= sliceCount; i++) {\n        zkStateReader.getLeaderRetry(DEFAULT_COLLECTION, \"shard\" + i, 10000);\n      }\n    }\n\n    if (numShards > 0) {\n      updateMappingsFromZk(this.jettys, this.clients);\n    }\n\n    // build the shard string\n    for (int i = 1; i <= numJettys / 2; i++) {\n      JettySolrRunner j = this.jettys.get(i);\n      JettySolrRunner j2 = this.jettys.get(i + (numJettys / 2 - 1));\n      if (sb.length() > 0) sb.append(',');\n      sb.append(buildUrl(j.getLocalPort()));\n      sb.append(\"|\").append(buildUrl(j2.getLocalPort()));\n    }\n    shards = sb.toString();\n\n    return jettys;\n  }\n\n","sourceOld":"  /**\n   * @param checkCreatedVsState\n   *          if true, make sure the number created (numJettys) matches the\n   *          number in the cluster state - if you add more jetties this may not\n   *          be the case\n   */\n  protected List<JettySolrRunner> createJettys(int numJettys, boolean checkCreatedVsState) throws Exception {\n    List<JettySolrRunner> jettys = new ArrayList<>();\n    List<SolrClient> clients = new ArrayList<>();\n    StringBuilder sb = new StringBuilder();\n\n    if (\"2\".equals(getStateFormat())) {\n      log.info(\"Creating collection1 with stateFormat=2\");\n      SolrZkClient zkClient = new SolrZkClient(zkServer.getZkAddress(),\n          AbstractZkTestCase.TIMEOUT, AbstractZkTestCase.TIMEOUT);\n      Overseer.getInQueue(zkClient).offer(\n          ZkStateReader.toJSON(ZkNodeProps.makeMap(Overseer.QUEUE_OPERATION,\n              CollectionParams.CollectionAction.CREATE.toLower(), \"name\",\n              DEFAULT_COLLECTION, \"numShards\", String.valueOf(sliceCount),\n              DocCollection.STATE_FORMAT, getStateFormat())));\n      zkClient.close();\n    }\n\n    for (int i = 1; i <= numJettys; i++) {\n      if (sb.length() > 0) sb.append(',');\n      int cnt = this.jettyIntCntr.incrementAndGet();\n\n      File jettyDir = createTempDir(\"shard-\" + i).toFile();\n\n      jettyDir.mkdirs();\n      setupJettySolrHome(jettyDir);\n      log.info(\"create jetty \" + i);\n      System.setProperty(\"coreRootDirectory\", jettyDir.toPath().resolve(\"cores\").toString());\n      JettySolrRunner j = createJetty(jettyDir, useJettyDataDir ? getDataDir(testDir + \"/jetty\"\n          + cnt) : null, null, \"solrconfig.xml\", null);\n      jettys.add(j);\n      SolrClient client = createNewSolrClient(j.getLocalPort());\n      clients.add(client);\n    }\n  \n    this.jettys.addAll(jettys);\n    this.clients.addAll(clients);\n    \n    int numShards = getTotalReplicas(DEFAULT_COLLECTION);\n    if (checkCreatedVsState) {\n      // now wait until we see that the number of shards in the cluster state\n      // matches what we expect\n      int retries = 0;\n      while (numShards != shardCount) {\n        numShards = getTotalReplicas(DEFAULT_COLLECTION);\n        if (numShards == shardCount) break;\n        if (retries++ == 60) {\n          printLayoutOnTearDown = true;\n          fail(\"Shards in the state does not match what we set:\" + numShards\n              + \" vs \" + shardCount);\n        }\n        Thread.sleep(500);\n      }\n\n      ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n      // also make sure we have a leader for each shard\n      for (int i = 1; i <= sliceCount; i++) {\n        zkStateReader.getLeaderRetry(DEFAULT_COLLECTION, \"shard\" + i, 10000);\n      }\n    }\n\n    if (numShards > 0) {\n      updateMappingsFromZk(this.jettys, this.clients);\n    }\n    \n    // build the shard string\n    for (int i = 1; i <= numJettys / 2; i++) {\n      JettySolrRunner j = this.jettys.get(i);\n      JettySolrRunner j2 = this.jettys.get(i + (numJettys / 2 - 1));\n      if (sb.length() > 0) sb.append(',');\n      sb.append(buildUrl(j.getLocalPort()));\n      sb.append(\"|\").append(buildUrl(j2.getLocalPort()));\n    }\n    shards = sb.toString();\n    \n    return jettys;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9bc766d645fa848f86c381c7f6acf2c881c99399","date":1425549246,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createJettys(int,boolean).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createJettys(int,boolean).mjava","sourceNew":"  /**\n   * @param checkCreatedVsState\n   *          if true, make sure the number created (numJettys) matches the\n   *          number in the cluster state - if you add more jetties this may not\n   *          be the case\n   */\n  protected List<JettySolrRunner> createJettys(int numJettys, boolean checkCreatedVsState) throws Exception {\n    List<JettySolrRunner> jettys = new ArrayList<>();\n    List<SolrClient> clients = new ArrayList<>();\n    StringBuilder sb = new StringBuilder();\n\n    if (\"2\".equals(getStateFormat())) {\n      log.info(\"Creating collection1 with stateFormat=2\");\n      SolrZkClient zkClient = new SolrZkClient(zkServer.getZkAddress(),\n          AbstractZkTestCase.TIMEOUT, AbstractZkTestCase.TIMEOUT);\n      Overseer.getInQueue(zkClient).offer(\n          ZkStateReader.toJSON(ZkNodeProps.makeMap(Overseer.QUEUE_OPERATION,\n              CollectionParams.CollectionAction.CREATE.toLower(), \"name\",\n              DEFAULT_COLLECTION, \"numShards\", String.valueOf(sliceCount),\n              DocCollection.STATE_FORMAT, getStateFormat())));\n      zkClient.close();\n    }\n\n    for (int i = 1; i <= numJettys; i++) {\n      if (sb.length() > 0) sb.append(',');\n      int cnt = this.jettyIntCntr.incrementAndGet();\n\n      File jettyDir = createTempDir(\"shard-\" + i).toFile();\n\n      jettyDir.mkdirs();\n      setupJettySolrHome(jettyDir);\n      log.info(\"create jetty {} in directory {}\", i, jettyDir);\n      JettySolrRunner j = createJetty(jettyDir, useJettyDataDir ? getDataDir(testDir + \"/jetty\"\n          + cnt) : null, null, \"solrconfig.xml\", null);\n      jettys.add(j);\n      SolrClient client = createNewSolrClient(j.getLocalPort());\n      clients.add(client);\n    }\n\n    this.jettys.addAll(jettys);\n    this.clients.addAll(clients);\n\n    int numShards = getTotalReplicas(DEFAULT_COLLECTION);\n    if (checkCreatedVsState) {\n      // now wait until we see that the number of shards in the cluster state\n      // matches what we expect\n      int retries = 0;\n      while (numShards != getShardCount()) {\n        numShards = getTotalReplicas(DEFAULT_COLLECTION);\n        if (numShards == getShardCount()) break;\n        if (retries++ == 60) {\n          printLayoutOnTearDown = true;\n          fail(\"Shards in the state does not match what we set:\" + numShards\n              + \" vs \" + getShardCount());\n        }\n        Thread.sleep(500);\n      }\n\n      ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n      // also make sure we have a leader for each shard\n      for (int i = 1; i <= sliceCount; i++) {\n        zkStateReader.getLeaderRetry(DEFAULT_COLLECTION, \"shard\" + i, 10000);\n      }\n    }\n\n    if (numShards > 0) {\n      updateMappingsFromZk(this.jettys, this.clients);\n    }\n\n    // build the shard string\n    for (int i = 1; i <= numJettys / 2; i++) {\n      JettySolrRunner j = this.jettys.get(i);\n      JettySolrRunner j2 = this.jettys.get(i + (numJettys / 2 - 1));\n      if (sb.length() > 0) sb.append(',');\n      sb.append(buildUrl(j.getLocalPort()));\n      sb.append(\"|\").append(buildUrl(j2.getLocalPort()));\n    }\n    shards = sb.toString();\n\n    return jettys;\n  }\n\n","sourceOld":"  /**\n   * @param checkCreatedVsState\n   *          if true, make sure the number created (numJettys) matches the\n   *          number in the cluster state - if you add more jetties this may not\n   *          be the case\n   */\n  protected List<JettySolrRunner> createJettys(int numJettys, boolean checkCreatedVsState) throws Exception {\n    List<JettySolrRunner> jettys = new ArrayList<>();\n    List<SolrClient> clients = new ArrayList<>();\n    StringBuilder sb = new StringBuilder();\n\n    if (\"2\".equals(getStateFormat())) {\n      log.info(\"Creating collection1 with stateFormat=2\");\n      SolrZkClient zkClient = new SolrZkClient(zkServer.getZkAddress(),\n          AbstractZkTestCase.TIMEOUT, AbstractZkTestCase.TIMEOUT);\n      Overseer.getInQueue(zkClient).offer(\n          ZkStateReader.toJSON(ZkNodeProps.makeMap(Overseer.QUEUE_OPERATION,\n              CollectionParams.CollectionAction.CREATE.toLower(), \"name\",\n              DEFAULT_COLLECTION, \"numShards\", String.valueOf(sliceCount),\n              DocCollection.STATE_FORMAT, getStateFormat())));\n      zkClient.close();\n    }\n\n    for (int i = 1; i <= numJettys; i++) {\n      if (sb.length() > 0) sb.append(',');\n      int cnt = this.jettyIntCntr.incrementAndGet();\n\n      File jettyDir = createTempDir(\"shard-\" + i).toFile();\n\n      jettyDir.mkdirs();\n      setupJettySolrHome(jettyDir);\n      log.info(\"create jetty \" + i);\n      System.setProperty(\"coreRootDirectory\", jettyDir.toPath().resolve(\"cores\").toString());\n      JettySolrRunner j = createJetty(jettyDir, useJettyDataDir ? getDataDir(testDir + \"/jetty\"\n          + cnt) : null, null, \"solrconfig.xml\", null);\n      jettys.add(j);\n      SolrClient client = createNewSolrClient(j.getLocalPort());\n      clients.add(client);\n    }\n\n    this.jettys.addAll(jettys);\n    this.clients.addAll(clients);\n\n    int numShards = getTotalReplicas(DEFAULT_COLLECTION);\n    if (checkCreatedVsState) {\n      // now wait until we see that the number of shards in the cluster state\n      // matches what we expect\n      int retries = 0;\n      while (numShards != getShardCount()) {\n        numShards = getTotalReplicas(DEFAULT_COLLECTION);\n        if (numShards == getShardCount()) break;\n        if (retries++ == 60) {\n          printLayoutOnTearDown = true;\n          fail(\"Shards in the state does not match what we set:\" + numShards\n              + \" vs \" + getShardCount());\n        }\n        Thread.sleep(500);\n      }\n\n      ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n      // also make sure we have a leader for each shard\n      for (int i = 1; i <= sliceCount; i++) {\n        zkStateReader.getLeaderRetry(DEFAULT_COLLECTION, \"shard\" + i, 10000);\n      }\n    }\n\n    if (numShards > 0) {\n      updateMappingsFromZk(this.jettys, this.clients);\n    }\n\n    // build the shard string\n    for (int i = 1; i <= numJettys / 2; i++) {\n      JettySolrRunner j = this.jettys.get(i);\n      JettySolrRunner j2 = this.jettys.get(i + (numJettys / 2 - 1));\n      if (sb.length() > 0) sb.append(',');\n      sb.append(buildUrl(j.getLocalPort()));\n      sb.append(\"|\").append(buildUrl(j2.getLocalPort()));\n    }\n    shards = sb.toString();\n\n    return jettys;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createJettys(int,boolean).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createJettys(int,boolean).mjava","sourceNew":"  /**\n   * @param checkCreatedVsState\n   *          if true, make sure the number created (numJettys) matches the\n   *          number in the cluster state - if you add more jetties this may not\n   *          be the case\n   */\n  protected List<JettySolrRunner> createJettys(int numJettys, boolean checkCreatedVsState) throws Exception {\n    List<JettySolrRunner> jettys = new ArrayList<>();\n    List<SolrClient> clients = new ArrayList<>();\n    StringBuilder sb = new StringBuilder();\n\n    if (\"2\".equals(getStateFormat())) {\n      log.info(\"Creating collection1 with stateFormat=2\");\n      SolrZkClient zkClient = new SolrZkClient(zkServer.getZkAddress(),\n          AbstractZkTestCase.TIMEOUT, AbstractZkTestCase.TIMEOUT);\n      Overseer.getInQueue(zkClient).offer(\n          ZkStateReader.toJSON(ZkNodeProps.makeMap(Overseer.QUEUE_OPERATION,\n              CollectionParams.CollectionAction.CREATE.toLower(), \"name\",\n              DEFAULT_COLLECTION, \"numShards\", String.valueOf(sliceCount),\n              DocCollection.STATE_FORMAT, getStateFormat())));\n      zkClient.close();\n    }\n\n    for (int i = 1; i <= numJettys; i++) {\n      if (sb.length() > 0) sb.append(',');\n      int cnt = this.jettyIntCntr.incrementAndGet();\n\n      File jettyDir = createTempDir(\"shard-\" + i).toFile();\n\n      jettyDir.mkdirs();\n      setupJettySolrHome(jettyDir);\n      log.info(\"create jetty {} in directory {}\", i, jettyDir);\n      JettySolrRunner j = createJetty(jettyDir, useJettyDataDir ? getDataDir(testDir + \"/jetty\"\n          + cnt) : null, null, \"solrconfig.xml\", null);\n      jettys.add(j);\n      SolrClient client = createNewSolrClient(j.getLocalPort());\n      clients.add(client);\n    }\n\n    this.jettys.addAll(jettys);\n    this.clients.addAll(clients);\n\n    int numShards = getTotalReplicas(DEFAULT_COLLECTION);\n    if (checkCreatedVsState) {\n      // now wait until we see that the number of shards in the cluster state\n      // matches what we expect\n      int retries = 0;\n      while (numShards != getShardCount()) {\n        numShards = getTotalReplicas(DEFAULT_COLLECTION);\n        if (numShards == getShardCount()) break;\n        if (retries++ == 60) {\n          printLayoutOnTearDown = true;\n          fail(\"Shards in the state does not match what we set:\" + numShards\n              + \" vs \" + getShardCount());\n        }\n        Thread.sleep(500);\n      }\n\n      ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n      // also make sure we have a leader for each shard\n      for (int i = 1; i <= sliceCount; i++) {\n        zkStateReader.getLeaderRetry(DEFAULT_COLLECTION, \"shard\" + i, 10000);\n      }\n    }\n\n    if (numShards > 0) {\n      updateMappingsFromZk(this.jettys, this.clients);\n    }\n\n    // build the shard string\n    for (int i = 1; i <= numJettys / 2; i++) {\n      JettySolrRunner j = this.jettys.get(i);\n      JettySolrRunner j2 = this.jettys.get(i + (numJettys / 2 - 1));\n      if (sb.length() > 0) sb.append(',');\n      sb.append(buildUrl(j.getLocalPort()));\n      sb.append(\"|\").append(buildUrl(j2.getLocalPort()));\n    }\n    shards = sb.toString();\n\n    return jettys;\n  }\n\n","sourceOld":"  /**\n   * @param checkCreatedVsState\n   *          if true, make sure the number created (numJettys) matches the\n   *          number in the cluster state - if you add more jetties this may not\n   *          be the case\n   */\n  protected List<JettySolrRunner> createJettys(int numJettys, boolean checkCreatedVsState) throws Exception {\n    List<JettySolrRunner> jettys = new ArrayList<>();\n    List<SolrClient> clients = new ArrayList<>();\n    StringBuilder sb = new StringBuilder();\n\n    if (\"2\".equals(getStateFormat())) {\n      log.info(\"Creating collection1 with stateFormat=2\");\n      SolrZkClient zkClient = new SolrZkClient(zkServer.getZkAddress(),\n          AbstractZkTestCase.TIMEOUT, AbstractZkTestCase.TIMEOUT);\n      Overseer.getInQueue(zkClient).offer(\n          ZkStateReader.toJSON(ZkNodeProps.makeMap(Overseer.QUEUE_OPERATION,\n              CollectionParams.CollectionAction.CREATE.toLower(), \"name\",\n              DEFAULT_COLLECTION, \"numShards\", String.valueOf(sliceCount),\n              DocCollection.STATE_FORMAT, getStateFormat())));\n      zkClient.close();\n    }\n\n    for (int i = 1; i <= numJettys; i++) {\n      if (sb.length() > 0) sb.append(',');\n      int cnt = this.jettyIntCntr.incrementAndGet();\n\n      File jettyDir = createTempDir(\"shard-\" + i).toFile();\n\n      jettyDir.mkdirs();\n      setupJettySolrHome(jettyDir);\n      log.info(\"create jetty \" + i);\n      System.setProperty(\"coreRootDirectory\", jettyDir.toPath().resolve(\"cores\").toString());\n      JettySolrRunner j = createJetty(jettyDir, useJettyDataDir ? getDataDir(testDir + \"/jetty\"\n          + cnt) : null, null, \"solrconfig.xml\", null);\n      jettys.add(j);\n      SolrClient client = createNewSolrClient(j.getLocalPort());\n      clients.add(client);\n    }\n\n    this.jettys.addAll(jettys);\n    this.clients.addAll(clients);\n\n    int numShards = getTotalReplicas(DEFAULT_COLLECTION);\n    if (checkCreatedVsState) {\n      // now wait until we see that the number of shards in the cluster state\n      // matches what we expect\n      int retries = 0;\n      while (numShards != getShardCount()) {\n        numShards = getTotalReplicas(DEFAULT_COLLECTION);\n        if (numShards == getShardCount()) break;\n        if (retries++ == 60) {\n          printLayoutOnTearDown = true;\n          fail(\"Shards in the state does not match what we set:\" + numShards\n              + \" vs \" + getShardCount());\n        }\n        Thread.sleep(500);\n      }\n\n      ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n      // also make sure we have a leader for each shard\n      for (int i = 1; i <= sliceCount; i++) {\n        zkStateReader.getLeaderRetry(DEFAULT_COLLECTION, \"shard\" + i, 10000);\n      }\n    }\n\n    if (numShards > 0) {\n      updateMappingsFromZk(this.jettys, this.clients);\n    }\n\n    // build the shard string\n    for (int i = 1; i <= numJettys / 2; i++) {\n      JettySolrRunner j = this.jettys.get(i);\n      JettySolrRunner j2 = this.jettys.get(i + (numJettys / 2 - 1));\n      if (sb.length() > 0) sb.append(',');\n      sb.append(buildUrl(j.getLocalPort()));\n      sb.append(\"|\").append(buildUrl(j2.getLocalPort()));\n    }\n    shards = sb.toString();\n\n    return jettys;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"275019a81d0883a1db4560391b072d1fbe272ec4","date":1432741049,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createJettys(int,boolean).mjava","sourceNew":null,"sourceOld":"  /**\n   * @param checkCreatedVsState\n   *          if true, make sure the number created (numJettys) matches the\n   *          number in the cluster state - if you add more jetties this may not\n   *          be the case\n   */\n  protected List<JettySolrRunner> createJettys(int numJettys, boolean checkCreatedVsState) throws Exception {\n    List<JettySolrRunner> jettys = new ArrayList<>();\n    List<SolrClient> clients = new ArrayList<>();\n    StringBuilder sb = new StringBuilder();\n\n    if (\"2\".equals(getStateFormat())) {\n      log.info(\"Creating collection1 with stateFormat=2\");\n      SolrZkClient zkClient = new SolrZkClient(zkServer.getZkAddress(),\n          AbstractZkTestCase.TIMEOUT, AbstractZkTestCase.TIMEOUT);\n      Overseer.getInQueue(zkClient).offer(\n          ZkStateReader.toJSON(ZkNodeProps.makeMap(Overseer.QUEUE_OPERATION,\n              CollectionParams.CollectionAction.CREATE.toLower(), \"name\",\n              DEFAULT_COLLECTION, \"numShards\", String.valueOf(sliceCount),\n              DocCollection.STATE_FORMAT, getStateFormat())));\n      zkClient.close();\n    }\n\n    for (int i = 1; i <= numJettys; i++) {\n      if (sb.length() > 0) sb.append(',');\n      int cnt = this.jettyIntCntr.incrementAndGet();\n\n      File jettyDir = createTempDir(\"shard-\" + i).toFile();\n\n      jettyDir.mkdirs();\n      setupJettySolrHome(jettyDir);\n      log.info(\"create jetty {} in directory {}\", i, jettyDir);\n      JettySolrRunner j = createJetty(jettyDir, useJettyDataDir ? getDataDir(testDir + \"/jetty\"\n          + cnt) : null, null, \"solrconfig.xml\", null);\n      jettys.add(j);\n      SolrClient client = createNewSolrClient(j.getLocalPort());\n      clients.add(client);\n    }\n\n    this.jettys.addAll(jettys);\n    this.clients.addAll(clients);\n\n    int numShards = getTotalReplicas(DEFAULT_COLLECTION);\n    if (checkCreatedVsState) {\n      // now wait until we see that the number of shards in the cluster state\n      // matches what we expect\n      int retries = 0;\n      while (numShards != getShardCount()) {\n        numShards = getTotalReplicas(DEFAULT_COLLECTION);\n        if (numShards == getShardCount()) break;\n        if (retries++ == 60) {\n          printLayoutOnTearDown = true;\n          fail(\"Shards in the state does not match what we set:\" + numShards\n              + \" vs \" + getShardCount());\n        }\n        Thread.sleep(500);\n      }\n\n      ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n      // also make sure we have a leader for each shard\n      for (int i = 1; i <= sliceCount; i++) {\n        zkStateReader.getLeaderRetry(DEFAULT_COLLECTION, \"shard\" + i, 10000);\n      }\n    }\n\n    if (numShards > 0) {\n      updateMappingsFromZk(this.jettys, this.clients);\n    }\n\n    // build the shard string\n    for (int i = 1; i <= numJettys / 2; i++) {\n      JettySolrRunner j = this.jettys.get(i);\n      JettySolrRunner j2 = this.jettys.get(i + (numJettys / 2 - 1));\n      if (sb.length() > 0) sb.append(',');\n      sb.append(buildUrl(j.getLocalPort()));\n      sb.append(\"|\").append(buildUrl(j2.getLocalPort()));\n    }\n    shards = sb.toString();\n\n    return jettys;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["d9405f486872f1e416304dfe389741f4ee2f8a4d","7c3fd765dc8fa1dd67f45e1ef91c28a2c147ea39"],"7c3fd765dc8fa1dd67f45e1ef91c28a2c147ea39":["56a558aa5aadd60ae850d1ab090098bc63bdfaf9"],"2a0f5bb79c600763ffe7b8141df59a3169d31e48":["1416f9d09d016a6894cd17e1caac137dad2bba59","bb1f22cfa77230b5f05b7784feae5367f6bbb488"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["4bc0d7d47c55a6d5319ba7d7ad8a9ae9c7a4d9dd","849494cf2f3a96af5c8c84995108ddd8456fcd04"],"abb23fcc2461782ab204e61213240feb77d355aa":["ed5e858eb62a97f2c8f311bbc560d03fe017d119"],"a5a233896b7f16ac9b4ed601ef8207d98f1f0500":["0622fbd990643ae4cacb693db6a0c82cf8916ae2"],"9bc766d645fa848f86c381c7f6acf2c881c99399":["abb23fcc2461782ab204e61213240feb77d355aa"],"fd44bec977a26a118d9e809e2de6f7edb5ca0f39":["bafca15d8e408346a67f4282ad1143b88023893b"],"81ec897f0eb789ef9536a8130d1cdb9337ef108a":["29372a57b7e46d222a80429ad6b96413b7319eea"],"bafca15d8e408346a67f4282ad1143b88023893b":["30c688f7052130cef7bd419c85e3c5be214f7b9e"],"d9405f486872f1e416304dfe389741f4ee2f8a4d":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"30c688f7052130cef7bd419c85e3c5be214f7b9e":["f4abec28b874149a7223e32cc7a01704c27790de"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["abb23fcc2461782ab204e61213240feb77d355aa","9bc766d645fa848f86c381c7f6acf2c881c99399"],"29372a57b7e46d222a80429ad6b96413b7319eea":["dcb5de84d260a8919bf0f2d4d180df543a2ad07a"],"dcb5de84d260a8919bf0f2d4d180df543a2ad07a":["849494cf2f3a96af5c8c84995108ddd8456fcd04"],"47c952a4f0f0e9b74763a0609a3726dbb217164a":["e19067e820b148e8dc0b240da4f2771cf7b68252"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e1de2017537ab5538f357ae8307a1113a0cc8ee3"],"4bc0d7d47c55a6d5319ba7d7ad8a9ae9c7a4d9dd":["7c3fd765dc8fa1dd67f45e1ef91c28a2c147ea39"],"1416f9d09d016a6894cd17e1caac137dad2bba59":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"ed5e858eb62a97f2c8f311bbc560d03fe017d119":["fd44bec977a26a118d9e809e2de6f7edb5ca0f39"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f2126b84bd093fa3d921582a109a0ee578c28126":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","d9405f486872f1e416304dfe389741f4ee2f8a4d"],"56a558aa5aadd60ae850d1ab090098bc63bdfaf9":["d9405f486872f1e416304dfe389741f4ee2f8a4d"],"69c0b7c6f9804817f14bd78c3795cdd9f6ddae5c":["47c952a4f0f0e9b74763a0609a3726dbb217164a"],"2c30e4c1cee08b3b229a77991882594fe7250b66":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["69c0b7c6f9804817f14bd78c3795cdd9f6ddae5c"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["81ec897f0eb789ef9536a8130d1cdb9337ef108a"],"bb1f22cfa77230b5f05b7784feae5367f6bbb488":["d0d579490a72f2e6297eaa648940611234c57cf1"],"f4c07fa58a256dccf8b95364855fd5e9ad4d1401":["a6f693ed86f289b2e42b46684409b3997f2c264a"],"e19067e820b148e8dc0b240da4f2771cf7b68252":["e1de2017537ab5538f357ae8307a1113a0cc8ee3"],"f4abec28b874149a7223e32cc7a01704c27790de":["9279b175e5e66258442d2123a50f052219a9cc1b"],"d0d579490a72f2e6297eaa648940611234c57cf1":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"9279b175e5e66258442d2123a50f052219a9cc1b":["f4c07fa58a256dccf8b95364855fd5e9ad4d1401"],"849494cf2f3a96af5c8c84995108ddd8456fcd04":["4bc0d7d47c55a6d5319ba7d7ad8a9ae9c7a4d9dd"],"a6f693ed86f289b2e42b46684409b3997f2c264a":["a5a233896b7f16ac9b4ed601ef8207d98f1f0500"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e1de2017537ab5538f357ae8307a1113a0cc8ee3"],"e1de2017537ab5538f357ae8307a1113a0cc8ee3":["2c30e4c1cee08b3b229a77991882594fe7250b66"],"275019a81d0883a1db4560391b072d1fbe272ec4":["9bc766d645fa848f86c381c7f6acf2c881c99399"],"0622fbd990643ae4cacb693db6a0c82cf8916ae2":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["275019a81d0883a1db4560391b072d1fbe272ec4"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"7c3fd765dc8fa1dd67f45e1ef91c28a2c147ea39":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","4bc0d7d47c55a6d5319ba7d7ad8a9ae9c7a4d9dd"],"2a0f5bb79c600763ffe7b8141df59a3169d31e48":["0622fbd990643ae4cacb693db6a0c82cf8916ae2"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"abb23fcc2461782ab204e61213240feb77d355aa":["9bc766d645fa848f86c381c7f6acf2c881c99399","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"a5a233896b7f16ac9b4ed601ef8207d98f1f0500":["a6f693ed86f289b2e42b46684409b3997f2c264a"],"9bc766d645fa848f86c381c7f6acf2c881c99399":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","275019a81d0883a1db4560391b072d1fbe272ec4"],"fd44bec977a26a118d9e809e2de6f7edb5ca0f39":["ed5e858eb62a97f2c8f311bbc560d03fe017d119"],"81ec897f0eb789ef9536a8130d1cdb9337ef108a":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"bafca15d8e408346a67f4282ad1143b88023893b":["fd44bec977a26a118d9e809e2de6f7edb5ca0f39"],"d9405f486872f1e416304dfe389741f4ee2f8a4d":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","f2126b84bd093fa3d921582a109a0ee578c28126","56a558aa5aadd60ae850d1ab090098bc63bdfaf9"],"30c688f7052130cef7bd419c85e3c5be214f7b9e":["bafca15d8e408346a67f4282ad1143b88023893b"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"29372a57b7e46d222a80429ad6b96413b7319eea":["81ec897f0eb789ef9536a8130d1cdb9337ef108a"],"dcb5de84d260a8919bf0f2d4d180df543a2ad07a":["29372a57b7e46d222a80429ad6b96413b7319eea"],"47c952a4f0f0e9b74763a0609a3726dbb217164a":["69c0b7c6f9804817f14bd78c3795cdd9f6ddae5c"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":[],"4bc0d7d47c55a6d5319ba7d7ad8a9ae9c7a4d9dd":["37a0f60745e53927c4c876cfe5b5a58170f0646c","849494cf2f3a96af5c8c84995108ddd8456fcd04"],"1416f9d09d016a6894cd17e1caac137dad2bba59":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"ed5e858eb62a97f2c8f311bbc560d03fe017d119":["abb23fcc2461782ab204e61213240feb77d355aa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c7869f64c874ebf7f317d22c00baf2b6857797a6","2c30e4c1cee08b3b229a77991882594fe7250b66","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"f2126b84bd093fa3d921582a109a0ee578c28126":[],"56a558aa5aadd60ae850d1ab090098bc63bdfaf9":["7c3fd765dc8fa1dd67f45e1ef91c28a2c147ea39"],"69c0b7c6f9804817f14bd78c3795cdd9f6ddae5c":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"2c30e4c1cee08b3b229a77991882594fe7250b66":["e1de2017537ab5538f357ae8307a1113a0cc8ee3"],"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["d9405f486872f1e416304dfe389741f4ee2f8a4d","f2126b84bd093fa3d921582a109a0ee578c28126"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["1416f9d09d016a6894cd17e1caac137dad2bba59","d0d579490a72f2e6297eaa648940611234c57cf1"],"bb1f22cfa77230b5f05b7784feae5367f6bbb488":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"f4c07fa58a256dccf8b95364855fd5e9ad4d1401":["9279b175e5e66258442d2123a50f052219a9cc1b"],"e19067e820b148e8dc0b240da4f2771cf7b68252":["47c952a4f0f0e9b74763a0609a3726dbb217164a"],"f4abec28b874149a7223e32cc7a01704c27790de":["30c688f7052130cef7bd419c85e3c5be214f7b9e"],"d0d579490a72f2e6297eaa648940611234c57cf1":["bb1f22cfa77230b5f05b7784feae5367f6bbb488"],"9279b175e5e66258442d2123a50f052219a9cc1b":["f4abec28b874149a7223e32cc7a01704c27790de"],"849494cf2f3a96af5c8c84995108ddd8456fcd04":["37a0f60745e53927c4c876cfe5b5a58170f0646c","dcb5de84d260a8919bf0f2d4d180df543a2ad07a"],"a6f693ed86f289b2e42b46684409b3997f2c264a":["f4c07fa58a256dccf8b95364855fd5e9ad4d1401"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"e1de2017537ab5538f357ae8307a1113a0cc8ee3":["c7869f64c874ebf7f317d22c00baf2b6857797a6","e19067e820b148e8dc0b240da4f2771cf7b68252","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"275019a81d0883a1db4560391b072d1fbe272ec4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0622fbd990643ae4cacb693db6a0c82cf8916ae2":["a5a233896b7f16ac9b4ed601ef8207d98f1f0500"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","37a0f60745e53927c4c876cfe5b5a58170f0646c","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","c7869f64c874ebf7f317d22c00baf2b6857797a6","f2126b84bd093fa3d921582a109a0ee578c28126","d6f074e73200c07d54f242d3880a8da5a35ff97b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}