{"path":"lucene/src/java/org/apache/lucene/search/FieldCacheImpl.Cache#put(IndexReader,Entry,Object).mjava","commits":[{"id":"382fe3a6ca9745891afebda9b9a57cc158305545","date":1320952430,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/FieldCacheImpl.Cache#put(IndexReader,Entry,Object).mjava","pathOld":"/dev/null","sourceNew":"    /** Sets the key to the value for the provided reader;\n     *  if the key is already set then this doesn't change it. */\n    public void put(IndexReader reader, Entry key, Object value) {\n      final Object readerKey = reader.getCoreCacheKey();\n      synchronized (readerCache) {\n        Map<Entry,Object> innerCache = readerCache.get(readerKey);\n        if (innerCache == null) {\n          // First time this reader is using FieldCache\n          innerCache = new HashMap<Entry,Object>();\n          readerCache.put(readerKey, innerCache);\n          reader.addReaderFinishedListener(purgeReader);\n        }\n        if (innerCache.get(key) == null) {\n          innerCache.put(key, value);\n        } else {\n          // Another thread beat us to it; leave the current\n          // value\n        }\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eeb24fe119d55091148e2a3d94e80c9e349d886c","date":1323807643,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/FieldCacheImpl.Cache#put(IndexReader,Entry,Object).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FieldCacheImpl.Cache#put(IndexReader,Entry,Object).mjava","sourceNew":"    /** Sets the key to the value for the provided reader;\n     *  if the key is already set then this doesn't change it. */\n    public void put(IndexReader reader, Entry key, Object value) {\n      final Object readerKey = reader.getCoreCacheKey();\n      synchronized (readerCache) {\n        Map<Entry,Object> innerCache = readerCache.get(readerKey);\n        if (innerCache == null) {\n          // First time this reader is using FieldCache\n          innerCache = new HashMap<Entry,Object>();\n          readerCache.put(readerKey, innerCache);\n          if (reader instanceof SegmentReader) {\n            ((SegmentReader) reader).addCoreClosedListener(purgeCore);\n          } else {\n            reader.addReaderClosedListener(new IndexReader.ReaderClosedListener() {\n              @Override\n              public void onClose(IndexReader reader) {\n                FieldCache.DEFAULT.purge(reader);\n              }\n            });\n          }\n        }\n        if (innerCache.get(key) == null) {\n          innerCache.put(key, value);\n        } else {\n          // Another thread beat us to it; leave the current\n          // value\n        }\n      }\n    }\n\n","sourceOld":"    /** Sets the key to the value for the provided reader;\n     *  if the key is already set then this doesn't change it. */\n    public void put(IndexReader reader, Entry key, Object value) {\n      final Object readerKey = reader.getCoreCacheKey();\n      synchronized (readerCache) {\n        Map<Entry,Object> innerCache = readerCache.get(readerKey);\n        if (innerCache == null) {\n          // First time this reader is using FieldCache\n          innerCache = new HashMap<Entry,Object>();\n          readerCache.put(readerKey, innerCache);\n          reader.addReaderFinishedListener(purgeReader);\n        }\n        if (innerCache.get(key) == null) {\n          innerCache.put(key, value);\n        } else {\n          // Another thread beat us to it; leave the current\n          // value\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":["f1f6a29a174ff37723be36b133c4237e0ea52dc7"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f1f6a29a174ff37723be36b133c4237e0ea52dc7","date":1323884478,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/FieldCacheImpl.Cache#put(IndexReader,Entry,Object).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FieldCacheImpl.Cache#put(IndexReader,Entry,Object).mjava","sourceNew":"    /** Sets the key to the value for the provided reader;\n     *  if the key is already set then this doesn't change it. */\n    public void put(IndexReader reader, Entry key, Object value) {\n      final Object readerKey = reader.getCoreCacheKey();\n      synchronized (readerCache) {\n        Map<Entry,Object> innerCache = readerCache.get(readerKey);\n        if (innerCache == null) {\n          // First time this reader is using FieldCache\n          innerCache = new HashMap<Entry,Object>();\n          readerCache.put(readerKey, innerCache);\n          if (reader instanceof SegmentReader) {\n            ((SegmentReader) reader).addCoreClosedListener(wrapper.purgeCore);\n          } else {\n            reader.addReaderClosedListener(wrapper.purgeReader);\n          }\n        }\n        if (innerCache.get(key) == null) {\n          innerCache.put(key, value);\n        } else {\n          // Another thread beat us to it; leave the current\n          // value\n        }\n      }\n    }\n\n","sourceOld":"    /** Sets the key to the value for the provided reader;\n     *  if the key is already set then this doesn't change it. */\n    public void put(IndexReader reader, Entry key, Object value) {\n      final Object readerKey = reader.getCoreCacheKey();\n      synchronized (readerCache) {\n        Map<Entry,Object> innerCache = readerCache.get(readerKey);\n        if (innerCache == null) {\n          // First time this reader is using FieldCache\n          innerCache = new HashMap<Entry,Object>();\n          readerCache.put(readerKey, innerCache);\n          if (reader instanceof SegmentReader) {\n            ((SegmentReader) reader).addCoreClosedListener(purgeCore);\n          } else {\n            reader.addReaderClosedListener(new IndexReader.ReaderClosedListener() {\n              @Override\n              public void onClose(IndexReader reader) {\n                FieldCache.DEFAULT.purge(reader);\n              }\n            });\n          }\n        }\n        if (innerCache.get(key) == null) {\n          innerCache.put(key, value);\n        } else {\n          // Another thread beat us to it; leave the current\n          // value\n        }\n      }\n    }\n\n","bugFix":["eeb24fe119d55091148e2a3d94e80c9e349d886c"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2dd6ecb8250c497ed227653279d6a4f470bfbb31","date":1326814483,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/FieldCacheImpl.Cache#put(IndexReader,Entry,Object).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FieldCacheImpl.Cache#put(IndexReader,Entry,Object).mjava","sourceNew":"    /** Sets the key to the value for the provided reader;\n     *  if the key is already set then this doesn't change it. */\n    public void put(IndexReader reader, Entry key, Object value) {\n      final Object readerKey = reader.getCoreCacheKey();\n      synchronized (readerCache) {\n        Map<Entry,Object> innerCache = readerCache.get(readerKey);\n        if (innerCache == null) {\n          // First time this reader is using FieldCache\n          innerCache = new HashMap<Entry,Object>();\n          readerCache.put(readerKey, innerCache);\n          wrapper.initReader(reader);\n        }\n        if (innerCache.get(key) == null) {\n          innerCache.put(key, value);\n        } else {\n          // Another thread beat us to it; leave the current\n          // value\n        }\n      }\n    }\n\n","sourceOld":"    /** Sets the key to the value for the provided reader;\n     *  if the key is already set then this doesn't change it. */\n    public void put(IndexReader reader, Entry key, Object value) {\n      final Object readerKey = reader.getCoreCacheKey();\n      synchronized (readerCache) {\n        Map<Entry,Object> innerCache = readerCache.get(readerKey);\n        if (innerCache == null) {\n          // First time this reader is using FieldCache\n          innerCache = new HashMap<Entry,Object>();\n          readerCache.put(readerKey, innerCache);\n          if (reader instanceof SegmentReader) {\n            ((SegmentReader) reader).addCoreClosedListener(wrapper.purgeCore);\n          } else {\n            reader.addReaderClosedListener(wrapper.purgeReader);\n          }\n        }\n        if (innerCache.get(key) == null) {\n          innerCache.put(key, value);\n        } else {\n          // Another thread beat us to it; leave the current\n          // value\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2725b2d479964ea5aaea0ba4ae2634716f3ec26c","date":1327188170,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/FieldCacheImpl.Cache#put(AtomicIndexReader,Entry,Object).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FieldCacheImpl.Cache#put(IndexReader,Entry,Object).mjava","sourceNew":"    /** Sets the key to the value for the provided reader;\n     *  if the key is already set then this doesn't change it. */\n    public void put(AtomicIndexReader reader, Entry key, Object value) {\n      final Object readerKey = reader.getCoreCacheKey();\n      synchronized (readerCache) {\n        Map<Entry,Object> innerCache = readerCache.get(readerKey);\n        if (innerCache == null) {\n          // First time this reader is using FieldCache\n          innerCache = new HashMap<Entry,Object>();\n          readerCache.put(readerKey, innerCache);\n          wrapper.initReader(reader);\n        }\n        if (innerCache.get(key) == null) {\n          innerCache.put(key, value);\n        } else {\n          // Another thread beat us to it; leave the current\n          // value\n        }\n      }\n    }\n\n","sourceOld":"    /** Sets the key to the value for the provided reader;\n     *  if the key is already set then this doesn't change it. */\n    public void put(IndexReader reader, Entry key, Object value) {\n      final Object readerKey = reader.getCoreCacheKey();\n      synchronized (readerCache) {\n        Map<Entry,Object> innerCache = readerCache.get(readerKey);\n        if (innerCache == null) {\n          // First time this reader is using FieldCache\n          innerCache = new HashMap<Entry,Object>();\n          readerCache.put(readerKey, innerCache);\n          wrapper.initReader(reader);\n        }\n        if (innerCache.get(key) == null) {\n          innerCache.put(key, value);\n        } else {\n          // Another thread beat us to it; leave the current\n          // value\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":5,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/FieldCacheImpl.Cache#put(AtomicReader,Entry,Object).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FieldCacheImpl.Cache#put(IndexReader,Entry,Object).mjava","sourceNew":"    /** Sets the key to the value for the provided reader;\n     *  if the key is already set then this doesn't change it. */\n    public void put(AtomicReader reader, Entry key, Object value) {\n      final Object readerKey = reader.getCoreCacheKey();\n      synchronized (readerCache) {\n        Map<Entry,Object> innerCache = readerCache.get(readerKey);\n        if (innerCache == null) {\n          // First time this reader is using FieldCache\n          innerCache = new HashMap<Entry,Object>();\n          readerCache.put(readerKey, innerCache);\n          wrapper.initReader(reader);\n        }\n        if (innerCache.get(key) == null) {\n          innerCache.put(key, value);\n        } else {\n          // Another thread beat us to it; leave the current\n          // value\n        }\n      }\n    }\n\n","sourceOld":"    /** Sets the key to the value for the provided reader;\n     *  if the key is already set then this doesn't change it. */\n    public void put(IndexReader reader, Entry key, Object value) {\n      final Object readerKey = reader.getCoreCacheKey();\n      synchronized (readerCache) {\n        Map<Entry,Object> innerCache = readerCache.get(readerKey);\n        if (innerCache == null) {\n          // First time this reader is using FieldCache\n          innerCache = new HashMap<Entry,Object>();\n          readerCache.put(readerKey, innerCache);\n          wrapper.initReader(reader);\n        }\n        if (innerCache.get(key) == null) {\n          innerCache.put(key, value);\n        } else {\n          // Another thread beat us to it; leave the current\n          // value\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f1f6a29a174ff37723be36b133c4237e0ea52dc7":["eeb24fe119d55091148e2a3d94e80c9e349d886c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"eeb24fe119d55091148e2a3d94e80c9e349d886c":["382fe3a6ca9745891afebda9b9a57cc158305545"],"382fe3a6ca9745891afebda9b9a57cc158305545":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2dd6ecb8250c497ed227653279d6a4f470bfbb31":["f1f6a29a174ff37723be36b133c4237e0ea52dc7"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["2dd6ecb8250c497ed227653279d6a4f470bfbb31","2725b2d479964ea5aaea0ba4ae2634716f3ec26c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"2725b2d479964ea5aaea0ba4ae2634716f3ec26c":["2dd6ecb8250c497ed227653279d6a4f470bfbb31"]},"commit2Childs":{"f1f6a29a174ff37723be36b133c4237e0ea52dc7":["2dd6ecb8250c497ed227653279d6a4f470bfbb31"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["382fe3a6ca9745891afebda9b9a57cc158305545"],"eeb24fe119d55091148e2a3d94e80c9e349d886c":["f1f6a29a174ff37723be36b133c4237e0ea52dc7"],"382fe3a6ca9745891afebda9b9a57cc158305545":["eeb24fe119d55091148e2a3d94e80c9e349d886c"],"2dd6ecb8250c497ed227653279d6a4f470bfbb31":["5cab9a86bd67202d20b6adc463008c8e982b070a","2725b2d479964ea5aaea0ba4ae2634716f3ec26c"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2725b2d479964ea5aaea0ba4ae2634716f3ec26c":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}