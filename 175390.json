{"path":"lucene/core/src/java/org/apache/lucene/search/UsageTrackingQueryCachingPolicy#shouldCache(Query,LeafReaderContext).mjava","commits":[{"id":"60596f28be69b10c37a56a303c2dbea07b2ca4ba","date":1425060541,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/UsageTrackingQueryCachingPolicy#shouldCache(Query,LeafReaderContext).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public boolean shouldCache(Query query, LeafReaderContext context) throws IOException {\n    if (segmentPolicy.shouldCache(query, context) == false) {\n      return false;\n    }\n    final int frequency = frequency(query);\n    final int minFrequency = minFrequencyToCache(query);\n    return frequency >= minFrequency;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/UsageTrackingQueryCachingPolicy#shouldCache(Query,LeafReaderContext).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public boolean shouldCache(Query query, LeafReaderContext context) throws IOException {\n    if (segmentPolicy.shouldCache(query, context) == false) {\n      return false;\n    }\n    final int frequency = frequency(query);\n    final int minFrequency = minFrequencyToCache(query);\n    return frequency >= minFrequency;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"942839ff613292359ccf70fd3858a350a7240b52","date":1440141421,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/UsageTrackingQueryCachingPolicy#shouldCache(Query,LeafReaderContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/UsageTrackingQueryCachingPolicy#shouldCache(Query,LeafReaderContext).mjava","sourceNew":"  @Override\n  public boolean shouldCache(Query query, LeafReaderContext context) throws IOException {\n    if (query instanceof MatchAllDocsQuery\n        // MatchNoDocsQuery currently rewrites to a BooleanQuery,\n        // but who knows, it might get its own Weight one day\n        || query instanceof MatchNoDocsQuery) {\n      return false;\n    }\n    if (query instanceof BooleanQuery) {\n      BooleanQuery bq = (BooleanQuery) query;\n      if (bq.clauses().isEmpty()) {\n        return false;\n      }\n    }\n    if (query instanceof DisjunctionMaxQuery) {\n      DisjunctionMaxQuery dmq = (DisjunctionMaxQuery) query;\n      if (dmq.getDisjuncts().isEmpty()) {\n        return false;\n      }\n    }\n    if (segmentPolicy.shouldCache(query, context) == false) {\n      return false;\n    }\n    final int frequency = frequency(query);\n    final int minFrequency = minFrequencyToCache(query);\n    return frequency >= minFrequency;\n  }\n\n","sourceOld":"  @Override\n  public boolean shouldCache(Query query, LeafReaderContext context) throws IOException {\n    if (segmentPolicy.shouldCache(query, context) == false) {\n      return false;\n    }\n    final int frequency = frequency(query);\n    final int minFrequency = minFrequencyToCache(query);\n    return frequency >= minFrequency;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aac61ee5b4492f174e60bd54939aba9539906edf","date":1461245473,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/UsageTrackingQueryCachingPolicy#shouldCache(Query,LeafReaderContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/UsageTrackingQueryCachingPolicy#shouldCache(Query,LeafReaderContext).mjava","sourceNew":"  @Override\n  public boolean shouldCache(Query query, LeafReaderContext context) throws IOException {\n    if (query instanceof MatchAllDocsQuery\n        // MatchNoDocsQuery currently rewrites to a BooleanQuery,\n        // but who knows, it might get its own Weight one day\n        || query instanceof MatchNoDocsQuery) {\n      return false;\n    }\n    if (query instanceof BooleanQuery) {\n      BooleanQuery bq = (BooleanQuery) query;\n      if (bq.clauses().isEmpty()) {\n        return false;\n      }\n    }\n    if (query instanceof DisjunctionMaxQuery) {\n      DisjunctionMaxQuery dmq = (DisjunctionMaxQuery) query;\n      if (dmq.getDisjuncts().isEmpty()) {\n        return false;\n      }\n    }\n    final int frequency = frequency(query);\n    final int minFrequency = minFrequencyToCache(query);\n    return frequency >= minFrequency;\n  }\n\n","sourceOld":"  @Override\n  public boolean shouldCache(Query query, LeafReaderContext context) throws IOException {\n    if (query instanceof MatchAllDocsQuery\n        // MatchNoDocsQuery currently rewrites to a BooleanQuery,\n        // but who knows, it might get its own Weight one day\n        || query instanceof MatchNoDocsQuery) {\n      return false;\n    }\n    if (query instanceof BooleanQuery) {\n      BooleanQuery bq = (BooleanQuery) query;\n      if (bq.clauses().isEmpty()) {\n        return false;\n      }\n    }\n    if (query instanceof DisjunctionMaxQuery) {\n      DisjunctionMaxQuery dmq = (DisjunctionMaxQuery) query;\n      if (dmq.getDisjuncts().isEmpty()) {\n        return false;\n      }\n    }\n    if (segmentPolicy.shouldCache(query, context) == false) {\n      return false;\n    }\n    final int frequency = frequency(query);\n    final int minFrequency = minFrequencyToCache(query);\n    return frequency >= minFrequency;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"25f40dbcd244dc82447a23719db34376cdcc9cfe","date":1461323366,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/UsageTrackingQueryCachingPolicy#shouldCache(Query).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/UsageTrackingQueryCachingPolicy#shouldCache(Query,LeafReaderContext).mjava","sourceNew":"  @Override\n  public boolean shouldCache(Query query) throws IOException {\n    if (query instanceof MatchAllDocsQuery\n        // MatchNoDocsQuery currently rewrites to a BooleanQuery,\n        // but who knows, it might get its own Weight one day\n        || query instanceof MatchNoDocsQuery) {\n      return false;\n    }\n    if (query instanceof BooleanQuery) {\n      BooleanQuery bq = (BooleanQuery) query;\n      if (bq.clauses().isEmpty()) {\n        return false;\n      }\n    }\n    if (query instanceof DisjunctionMaxQuery) {\n      DisjunctionMaxQuery dmq = (DisjunctionMaxQuery) query;\n      if (dmq.getDisjuncts().isEmpty()) {\n        return false;\n      }\n    }\n    final int frequency = frequency(query);\n    final int minFrequency = minFrequencyToCache(query);\n    return frequency >= minFrequency;\n  }\n\n","sourceOld":"  @Override\n  public boolean shouldCache(Query query, LeafReaderContext context) throws IOException {\n    if (query instanceof MatchAllDocsQuery\n        // MatchNoDocsQuery currently rewrites to a BooleanQuery,\n        // but who knows, it might get its own Weight one day\n        || query instanceof MatchNoDocsQuery) {\n      return false;\n    }\n    if (query instanceof BooleanQuery) {\n      BooleanQuery bq = (BooleanQuery) query;\n      if (bq.clauses().isEmpty()) {\n        return false;\n      }\n    }\n    if (query instanceof DisjunctionMaxQuery) {\n      DisjunctionMaxQuery dmq = (DisjunctionMaxQuery) query;\n      if (dmq.getDisjuncts().isEmpty()) {\n        return false;\n      }\n    }\n    final int frequency = frequency(query);\n    final int minFrequency = minFrequencyToCache(query);\n    return frequency >= minFrequency;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f7f901826e47f75f810d7aae24b0455d21ea1fe2","date":1461678892,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/UsageTrackingQueryCachingPolicy#shouldCache(Query).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/UsageTrackingQueryCachingPolicy#shouldCache(Query,LeafReaderContext).mjava","sourceNew":"  @Override\n  public boolean shouldCache(Query query) throws IOException {\n    if (query instanceof MatchAllDocsQuery\n        // MatchNoDocsQuery currently rewrites to a BooleanQuery,\n        // but who knows, it might get its own Weight one day\n        || query instanceof MatchNoDocsQuery) {\n      return false;\n    }\n    if (query instanceof BooleanQuery) {\n      BooleanQuery bq = (BooleanQuery) query;\n      if (bq.clauses().isEmpty()) {\n        return false;\n      }\n    }\n    if (query instanceof DisjunctionMaxQuery) {\n      DisjunctionMaxQuery dmq = (DisjunctionMaxQuery) query;\n      if (dmq.getDisjuncts().isEmpty()) {\n        return false;\n      }\n    }\n    final int frequency = frequency(query);\n    final int minFrequency = minFrequencyToCache(query);\n    return frequency >= minFrequency;\n  }\n\n","sourceOld":"  @Override\n  public boolean shouldCache(Query query, LeafReaderContext context) throws IOException {\n    if (query instanceof MatchAllDocsQuery\n        // MatchNoDocsQuery currently rewrites to a BooleanQuery,\n        // but who knows, it might get its own Weight one day\n        || query instanceof MatchNoDocsQuery) {\n      return false;\n    }\n    if (query instanceof BooleanQuery) {\n      BooleanQuery bq = (BooleanQuery) query;\n      if (bq.clauses().isEmpty()) {\n        return false;\n      }\n    }\n    if (query instanceof DisjunctionMaxQuery) {\n      DisjunctionMaxQuery dmq = (DisjunctionMaxQuery) query;\n      if (dmq.getDisjuncts().isEmpty()) {\n        return false;\n      }\n    }\n    final int frequency = frequency(query);\n    final int minFrequency = minFrequencyToCache(query);\n    return frequency >= minFrequency;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","60596f28be69b10c37a56a303c2dbea07b2ca4ba"],"aac61ee5b4492f174e60bd54939aba9539906edf":["942839ff613292359ccf70fd3858a350a7240b52"],"60596f28be69b10c37a56a303c2dbea07b2ca4ba":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f7f901826e47f75f810d7aae24b0455d21ea1fe2":["aac61ee5b4492f174e60bd54939aba9539906edf","25f40dbcd244dc82447a23719db34376cdcc9cfe"],"25f40dbcd244dc82447a23719db34376cdcc9cfe":["aac61ee5b4492f174e60bd54939aba9539906edf"],"942839ff613292359ccf70fd3858a350a7240b52":["60596f28be69b10c37a56a303c2dbea07b2ca4ba"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f7f901826e47f75f810d7aae24b0455d21ea1fe2"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"aac61ee5b4492f174e60bd54939aba9539906edf":["f7f901826e47f75f810d7aae24b0455d21ea1fe2","25f40dbcd244dc82447a23719db34376cdcc9cfe"],"60596f28be69b10c37a56a303c2dbea07b2ca4ba":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","942839ff613292359ccf70fd3858a350a7240b52"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","60596f28be69b10c37a56a303c2dbea07b2ca4ba"],"f7f901826e47f75f810d7aae24b0455d21ea1fe2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"25f40dbcd244dc82447a23719db34376cdcc9cfe":["f7f901826e47f75f810d7aae24b0455d21ea1fe2"],"942839ff613292359ccf70fd3858a350a7240b52":["aac61ee5b4492f174e60bd54939aba9539906edf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}