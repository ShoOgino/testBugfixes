{"path":"lucene/src/test/org/apache/lucene/search/TestTopDocsCollector#setUp().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestTopDocsCollector#setUp().mjava","pathOld":"src/test/org/apache/lucene/search/TestTopDocsCollector#setUp().mjava","sourceNew":"  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    \n    // populate an index with 30 documents, this should be enough for the test.\n    // The documents have no content - the test uses MatchAllDocsQuery().\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new KeywordAnalyzer()));\n    for (int i = 0; i < 30; i++) {\n      writer.addDocument(new Document());\n    }\n    writer.close();\n  }\n\n","sourceOld":"  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    \n    // populate an index with 30 documents, this should be enough for the test.\n    // The documents have no content - the test uses MatchAllDocsQuery().\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new KeywordAnalyzer()));\n    for (int i = 0; i < 30; i++) {\n      writer.addDocument(new Document());\n    }\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7edb20114e86ec883b0b08bd624eee852c565c06","date":1273941247,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestTopDocsCollector#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestTopDocsCollector#setUp().mjava","sourceNew":"  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    \n    // populate an index with 30 documents, this should be enough for the test.\n    // The documents have no content - the test uses MatchAllDocsQuery().\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    for (int i = 0; i < 30; i++) {\n      writer.addDocument(new Document());\n    }\n    writer.close();\n  }\n\n","sourceOld":"  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    \n    // populate an index with 30 documents, this should be enough for the test.\n    // The documents have no content - the test uses MatchAllDocsQuery().\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new KeywordAnalyzer()));\n    for (int i = 0; i < 30; i++) {\n      writer.addDocument(new Document());\n    }\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c084e47df29de3330311d69dabf515ceaa989512","date":1279030906,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestTopDocsCollector#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestTopDocsCollector#setUp().mjava","sourceNew":"  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    \n    // populate an index with 30 documents, this should be enough for the test.\n    // The documents have no content - the test uses MatchAllDocsQuery().\n    RandomIndexWriter writer = new RandomIndexWriter(newRandom(), dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    for (int i = 0; i < 30; i++) {\n      writer.addDocument(new Document());\n    }\n    reader = writer.getReader();\n    writer.close();\n  }\n\n","sourceOld":"  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    \n    // populate an index with 30 documents, this should be enough for the test.\n    // The documents have no content - the test uses MatchAllDocsQuery().\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    for (int i = 0; i < 30; i++) {\n      writer.addDocument(new Document());\n    }\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestTopDocsCollector#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestTopDocsCollector#setUp().mjava","sourceNew":"  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    \n    // populate an index with 30 documents, this should be enough for the test.\n    // The documents have no content - the test uses MatchAllDocsQuery().\n    RandomIndexWriter writer = new RandomIndexWriter(newRandom(), dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    for (int i = 0; i < 30; i++) {\n      writer.addDocument(new Document());\n    }\n    reader = writer.getReader();\n    writer.close();\n  }\n\n","sourceOld":"  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    \n    // populate an index with 30 documents, this should be enough for the test.\n    // The documents have no content - the test uses MatchAllDocsQuery().\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    for (int i = 0; i < 30; i++) {\n      writer.addDocument(new Document());\n    }\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"15bbd254c1506df5299c4df8c148262c7bd6301e","date":1279913113,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestTopDocsCollector#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestTopDocsCollector#setUp().mjava","sourceNew":"  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    \n    // populate an index with 30 documents, this should be enough for the test.\n    // The documents have no content - the test uses MatchAllDocsQuery().\n    RandomIndexWriter writer = new RandomIndexWriter(newRandom(), dir);\n    for (int i = 0; i < 30; i++) {\n      writer.addDocument(new Document());\n    }\n    reader = writer.getReader();\n    writer.close();\n  }\n\n","sourceOld":"  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    \n    // populate an index with 30 documents, this should be enough for the test.\n    // The documents have no content - the test uses MatchAllDocsQuery().\n    RandomIndexWriter writer = new RandomIndexWriter(newRandom(), dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    for (int i = 0; i < 30; i++) {\n      writer.addDocument(new Document());\n    }\n    reader = writer.getReader();\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b103252dee6afa1b6d7a622c773d178788eb85a","date":1280180143,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestTopDocsCollector#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestTopDocsCollector#setUp().mjava","sourceNew":"  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    \n    // populate an index with 30 documents, this should be enough for the test.\n    // The documents have no content - the test uses MatchAllDocsQuery().\n    RandomIndexWriter writer = new RandomIndexWriter(newRandom(), dir);\n    for (int i = 0; i < 30; i++) {\n      writer.addDocument(new Document());\n    }\n    reader = writer.getReader();\n    writer.close();\n  }\n\n","sourceOld":"  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    \n    // populate an index with 30 documents, this should be enough for the test.\n    // The documents have no content - the test uses MatchAllDocsQuery().\n    RandomIndexWriter writer = new RandomIndexWriter(newRandom(), dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    for (int i = 0; i < 30; i++) {\n      writer.addDocument(new Document());\n    }\n    reader = writer.getReader();\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3242a09f703274d3b9283f2064a1a33064b53a1b","date":1280263474,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestTopDocsCollector#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestTopDocsCollector#setUp().mjava","sourceNew":"  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    \n    // populate an index with 30 documents, this should be enough for the test.\n    // The documents have no content - the test uses MatchAllDocsQuery().\n    RandomIndexWriter writer = new RandomIndexWriter(newRandom(), dir);\n    for (int i = 0; i < 30; i++) {\n      writer.addDocument(new Document());\n    }\n    reader = writer.getReader();\n    writer.close();\n  }\n\n","sourceOld":"  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    \n    // populate an index with 30 documents, this should be enough for the test.\n    // The documents have no content - the test uses MatchAllDocsQuery().\n    RandomIndexWriter writer = new RandomIndexWriter(newRandom(), dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    for (int i = 0; i < 30; i++) {\n      writer.addDocument(new Document());\n    }\n    reader = writer.getReader();\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","date":1281646583,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestTopDocsCollector#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestTopDocsCollector#setUp().mjava","sourceNew":"  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    \n    // populate an index with 30 documents, this should be enough for the test.\n    // The documents have no content - the test uses MatchAllDocsQuery().\n    Random random = newRandom();\n    dir = newDirectory(random);\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    for (int i = 0; i < 30; i++) {\n      writer.addDocument(new Document());\n    }\n    reader = writer.getReader();\n    writer.close();\n  }\n\n","sourceOld":"  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    \n    // populate an index with 30 documents, this should be enough for the test.\n    // The documents have no content - the test uses MatchAllDocsQuery().\n    RandomIndexWriter writer = new RandomIndexWriter(newRandom(), dir);\n    for (int i = 0; i < 30; i++) {\n      writer.addDocument(new Document());\n    }\n    reader = writer.getReader();\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestTopDocsCollector#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestTopDocsCollector#setUp().mjava","sourceNew":"  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    \n    // populate an index with 30 documents, this should be enough for the test.\n    // The documents have no content - the test uses MatchAllDocsQuery().\n    dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    for (int i = 0; i < 30; i++) {\n      writer.addDocument(new Document());\n    }\n    reader = writer.getReader();\n    writer.close();\n  }\n\n","sourceOld":"  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    \n    // populate an index with 30 documents, this should be enough for the test.\n    // The documents have no content - the test uses MatchAllDocsQuery().\n    Random random = newRandom();\n    dir = newDirectory(random);\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    for (int i = 0; i < 30; i++) {\n      writer.addDocument(new Document());\n    }\n    reader = writer.getReader();\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43b04c27924fe393e38e9f0986e32c634f261859","date":1284399440,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestTopDocsCollector#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestTopDocsCollector#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    \n    // populate an index with 30 documents, this should be enough for the test.\n    // The documents have no content - the test uses MatchAllDocsQuery().\n    dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    for (int i = 0; i < 30; i++) {\n      writer.addDocument(new Document());\n    }\n    reader = writer.getReader();\n    writer.close();\n  }\n\n","sourceOld":"  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    \n    // populate an index with 30 documents, this should be enough for the test.\n    // The documents have no content - the test uses MatchAllDocsQuery().\n    dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    for (int i = 0; i < 30; i++) {\n      writer.addDocument(new Document());\n    }\n    reader = writer.getReader();\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestTopDocsCollector#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestTopDocsCollector#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    \n    // populate an index with 30 documents, this should be enough for the test.\n    // The documents have no content - the test uses MatchAllDocsQuery().\n    dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    for (int i = 0; i < 30; i++) {\n      writer.addDocument(new Document());\n    }\n    reader = writer.getReader();\n    writer.close();\n  }\n\n","sourceOld":"  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    \n    // populate an index with 30 documents, this should be enough for the test.\n    // The documents have no content - the test uses MatchAllDocsQuery().\n    RandomIndexWriter writer = new RandomIndexWriter(newRandom(), dir);\n    for (int i = 0; i < 30; i++) {\n      writer.addDocument(new Document());\n    }\n    reader = writer.getReader();\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestTopDocsCollector#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestTopDocsCollector#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    \n    // populate an index with 30 documents, this should be enough for the test.\n    // The documents have no content - the test uses MatchAllDocsQuery().\n    dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    for (int i = 0; i < 30; i++) {\n      writer.addDocument(new Document());\n    }\n    reader = writer.getReader();\n    writer.close();\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    \n    // populate an index with 30 documents, this should be enough for the test.\n    // The documents have no content - the test uses MatchAllDocsQuery().\n    dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    for (int i = 0; i < 30; i++) {\n      writer.addDocument(new Document());\n    }\n    reader = writer.getReader();\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7edb20114e86ec883b0b08bd624eee852c565c06":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"3242a09f703274d3b9283f2064a1a33064b53a1b":["5f4e87790277826a2aea119328600dfb07761f32","4b103252dee6afa1b6d7a622c773d178788eb85a"],"4b103252dee6afa1b6d7a622c773d178788eb85a":["c084e47df29de3330311d69dabf515ceaa989512","15bbd254c1506df5299c4df8c148262c7bd6301e"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["4b103252dee6afa1b6d7a622c773d178788eb85a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["43b04c27924fe393e38e9f0986e32c634f261859"],"15bbd254c1506df5299c4df8c148262c7bd6301e":["c084e47df29de3330311d69dabf515ceaa989512"],"5f4e87790277826a2aea119328600dfb07761f32":["7edb20114e86ec883b0b08bd624eee852c565c06","c084e47df29de3330311d69dabf515ceaa989512"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["3242a09f703274d3b9283f2064a1a33064b53a1b","43b04c27924fe393e38e9f0986e32c634f261859"],"43b04c27924fe393e38e9f0986e32c634f261859":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"c084e47df29de3330311d69dabf515ceaa989512":["7edb20114e86ec883b0b08bd624eee852c565c06"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"7edb20114e86ec883b0b08bd624eee852c565c06":["5f4e87790277826a2aea119328600dfb07761f32","c084e47df29de3330311d69dabf515ceaa989512"],"3242a09f703274d3b9283f2064a1a33064b53a1b":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"4b103252dee6afa1b6d7a622c773d178788eb85a":["3242a09f703274d3b9283f2064a1a33064b53a1b","ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"15bbd254c1506df5299c4df8c148262c7bd6301e":["4b103252dee6afa1b6d7a622c773d178788eb85a"],"5f4e87790277826a2aea119328600dfb07761f32":["3242a09f703274d3b9283f2064a1a33064b53a1b"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"43b04c27924fe393e38e9f0986e32c634f261859":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"c084e47df29de3330311d69dabf515ceaa989512":["4b103252dee6afa1b6d7a622c773d178788eb85a","15bbd254c1506df5299c4df8c148262c7bd6301e","5f4e87790277826a2aea119328600dfb07761f32"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["43b04c27924fe393e38e9f0986e32c634f261859"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["7edb20114e86ec883b0b08bd624eee852c565c06"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}