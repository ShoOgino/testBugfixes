{"path":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempPostingsReader#decodeTerm(long[],DataInput,FieldInfo,TempTermState).mjava","commits":[{"id":"8f9e2db1c8ec255bc436c6cf0a92979efdfe2f90","date":1371385497,"type":1,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempPostingsReader#decodeTerm(long[],DataInput,FieldInfo,TempTermState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempPostingsReader#nextTerm(long[],DataInput,FieldInfo,TempTermState).mjava","sourceNew":"  @Override\n  public void decodeTerm(long[] longs, DataInput in, FieldInfo fieldInfo, TempTermState _termState)\n    throws IOException {\n    final IntBlockTermState termState = (IntBlockTermState) _termState;\n    final boolean fieldHasPositions = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0;\n    final boolean fieldHasOffsets = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n    final boolean fieldHasPayloads = fieldInfo.hasPayloads();\n    \n    termState.docStartFP = longs[0];\n    if (fieldHasPositions) {\n      termState.posStartFP = longs[1];\n      termState.payStartFP = longs[2];\n    }\n\n    if (termState.docFreq == 1) {\n      termState.singletonDocID = in.readVInt();\n    } else {\n      termState.singletonDocID = -1;\n    }\n    if (fieldHasPositions) {\n      if (termState.totalTermFreq > BLOCK_SIZE) {\n        termState.lastPosBlockOffset = in.readVLong();\n      } else {\n        termState.lastPosBlockOffset = -1;\n      }\n    }\n\n    if (termState.docFreq > BLOCK_SIZE) {\n      termState.skipOffset = in.readVLong();\n    } else {\n      termState.skipOffset = -1;\n    }\n  }\n\n","sourceOld":"  @Override\n  public void nextTerm(long[] longs, DataInput in, FieldInfo fieldInfo, TempTermState _termState)\n    throws IOException {\n    final IntBlockTermState termState = (IntBlockTermState) _termState;\n    final boolean fieldHasPositions = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0;\n    final boolean fieldHasOffsets = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n    final boolean fieldHasPayloads = fieldInfo.hasPayloads();\n    \n    termState.docStartFP = longs[0];\n    if (fieldHasPositions) {\n      termState.posStartFP = longs[1];\n      termState.payStartFP = longs[2];\n    }\n\n    if (termState.docFreq == 1) {\n      termState.singletonDocID = in.readVInt();\n    } else {\n      termState.singletonDocID = -1;\n    }\n    if (fieldHasPositions) {\n      if (termState.totalTermFreq > BLOCK_SIZE) {\n        termState.lastPosBlockOffset = in.readVLong();\n      } else {\n        termState.lastPosBlockOffset = -1;\n      }\n    }\n\n    if (termState.docFreq > BLOCK_SIZE) {\n      termState.skipOffset = in.readVLong();\n    } else {\n      termState.skipOffset = -1;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"000562a7f460954af0deb210cd0c89e4bb72bb40","date":1373819460,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempPostingsReader#decodeTerm(long[],DataInput,FieldInfo,TempTermState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempPostingsReader#decodeTerm(long[],DataInput,FieldInfo,TempTermState).mjava","sourceNew":"  @Override\n  public void decodeTerm(long[] longs, DataInput in, FieldInfo fieldInfo, TempTermState _termState)\n    throws IOException {\n    final IntBlockTermState termState = (IntBlockTermState) _termState;\n    final boolean fieldHasPositions = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0;\n    final boolean fieldHasOffsets = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n    final boolean fieldHasPayloads = fieldInfo.hasPayloads();\n    \n    termState.docStartFP = longs[0];\n    if (fieldHasPositions) {\n      termState.posStartFP = longs[1];\n      if (fieldHasOffsets || fieldHasPayloads) {\n        termState.payStartFP = longs[2];\n      }\n    }\n\n    if (termState.docFreq == 1) {\n      termState.singletonDocID = in.readVInt();\n    } else {\n      termState.singletonDocID = -1;\n    }\n    if (fieldHasPositions) {\n      if (termState.totalTermFreq > BLOCK_SIZE) {\n        termState.lastPosBlockOffset = in.readVLong();\n      } else {\n        termState.lastPosBlockOffset = -1;\n      }\n    }\n\n    if (termState.docFreq > BLOCK_SIZE) {\n      termState.skipOffset = in.readVLong();\n    } else {\n      termState.skipOffset = -1;\n    }\n  }\n\n","sourceOld":"  @Override\n  public void decodeTerm(long[] longs, DataInput in, FieldInfo fieldInfo, TempTermState _termState)\n    throws IOException {\n    final IntBlockTermState termState = (IntBlockTermState) _termState;\n    final boolean fieldHasPositions = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0;\n    final boolean fieldHasOffsets = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n    final boolean fieldHasPayloads = fieldInfo.hasPayloads();\n    \n    termState.docStartFP = longs[0];\n    if (fieldHasPositions) {\n      termState.posStartFP = longs[1];\n      termState.payStartFP = longs[2];\n    }\n\n    if (termState.docFreq == 1) {\n      termState.singletonDocID = in.readVInt();\n    } else {\n      termState.singletonDocID = -1;\n    }\n    if (fieldHasPositions) {\n      if (termState.totalTermFreq > BLOCK_SIZE) {\n        termState.lastPosBlockOffset = in.readVLong();\n      } else {\n        termState.lastPosBlockOffset = -1;\n      }\n    }\n\n    if (termState.docFreq > BLOCK_SIZE) {\n      termState.skipOffset = in.readVLong();\n    } else {\n      termState.skipOffset = -1;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a02833f6a58f0cce6c4ee5547ff3e72773d259e3","date":1376754895,"type":5,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempPostingsReader#decodeTerm(long[],DataInput,FieldInfo,BlockTermState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempPostingsReader#decodeTerm(long[],DataInput,FieldInfo,TempTermState).mjava","sourceNew":"  @Override\n  public void decodeTerm(long[] longs, DataInput in, FieldInfo fieldInfo, BlockTermState _termState)\n    throws IOException {\n    final IntBlockTermState termState = (IntBlockTermState) _termState;\n    final boolean fieldHasPositions = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0;\n    final boolean fieldHasOffsets = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n    final boolean fieldHasPayloads = fieldInfo.hasPayloads();\n    \n    termState.docStartFP = longs[0];\n    if (fieldHasPositions) {\n      termState.posStartFP = longs[1];\n      if (fieldHasOffsets || fieldHasPayloads) {\n        termState.payStartFP = longs[2];\n      }\n    }\n\n    if (termState.docFreq == 1) {\n      termState.singletonDocID = in.readVInt();\n    } else {\n      termState.singletonDocID = -1;\n    }\n    if (fieldHasPositions) {\n      if (termState.totalTermFreq > BLOCK_SIZE) {\n        termState.lastPosBlockOffset = in.readVLong();\n      } else {\n        termState.lastPosBlockOffset = -1;\n      }\n    }\n\n    if (termState.docFreq > BLOCK_SIZE) {\n      termState.skipOffset = in.readVLong();\n    } else {\n      termState.skipOffset = -1;\n    }\n  }\n\n","sourceOld":"  @Override\n  public void decodeTerm(long[] longs, DataInput in, FieldInfo fieldInfo, TempTermState _termState)\n    throws IOException {\n    final IntBlockTermState termState = (IntBlockTermState) _termState;\n    final boolean fieldHasPositions = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0;\n    final boolean fieldHasOffsets = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n    final boolean fieldHasPayloads = fieldInfo.hasPayloads();\n    \n    termState.docStartFP = longs[0];\n    if (fieldHasPositions) {\n      termState.posStartFP = longs[1];\n      if (fieldHasOffsets || fieldHasPayloads) {\n        termState.payStartFP = longs[2];\n      }\n    }\n\n    if (termState.docFreq == 1) {\n      termState.singletonDocID = in.readVInt();\n    } else {\n      termState.singletonDocID = -1;\n    }\n    if (fieldHasPositions) {\n      if (termState.totalTermFreq > BLOCK_SIZE) {\n        termState.lastPosBlockOffset = in.readVLong();\n      } else {\n        termState.lastPosBlockOffset = -1;\n      }\n    }\n\n    if (termState.docFreq > BLOCK_SIZE) {\n      termState.skipOffset = in.readVLong();\n    } else {\n      termState.skipOffset = -1;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"000562a7f460954af0deb210cd0c89e4bb72bb40":["8f9e2db1c8ec255bc436c6cf0a92979efdfe2f90"],"8f9e2db1c8ec255bc436c6cf0a92979efdfe2f90":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a02833f6a58f0cce6c4ee5547ff3e72773d259e3":["000562a7f460954af0deb210cd0c89e4bb72bb40"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"000562a7f460954af0deb210cd0c89e4bb72bb40":["a02833f6a58f0cce6c4ee5547ff3e72773d259e3"],"8f9e2db1c8ec255bc436c6cf0a92979efdfe2f90":["000562a7f460954af0deb210cd0c89e4bb72bb40"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8f9e2db1c8ec255bc436c6cf0a92979efdfe2f90","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a02833f6a58f0cce6c4ee5547ff3e72773d259e3":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a02833f6a58f0cce6c4ee5547ff3e72773d259e3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}