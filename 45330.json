{"path":"src/java/org/apache/solr/analysis/PhoneticFilter#incrementToken().mjava","commits":[{"id":"960e0dae888f682751b2c173774ae77a8da7e68d","date":1250187502,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/analysis/PhoneticFilter#incrementToken().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public boolean incrementToken() throws IOException {\n    if( save != null ) {\n      clearAttributes(); restoreState(save);\n      save = null;\n      return true;\n    }\n\n    if (!input.incrementToken()) return false;\n\n    // pass through zero-length terms\n    if (termAtt.termLength()==0) return true;\n\n    String value = termAtt.term();\n    String phonetic = null;\n    try {\n     String v = encoder.encode(value).toString();\n     if (v.length() > 0 && !value.equals(v)) phonetic = v;\n    } catch (Exception ignored) {} // just use the direct text\n\n    if (phonetic == null) return true;\n\n    if (!inject) {\n      // just modify this token\n      termAtt.setTermBuffer(phonetic);\n      return true;\n    }\n\n    // We need to return both the original and the phonetic tokens.\n    // to avoid a orig=captureState() change_to_phonetic() saved=captureState()  restoreState(orig)\n    // we return the phonetic alternative first\n\n    int origOffset = posAtt.getPositionIncrement();\n    posAtt.setPositionIncrement(0);\n    save = captureState();\n\n    posAtt.setPositionIncrement(origOffset);\n    termAtt.setTermBuffer(phonetic);\n    return true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["be29e0e2cef1fd569147732e48caf8538790339b"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"be29e0e2cef1fd569147732e48caf8538790339b","date":1250443738,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/analysis/PhoneticFilter#incrementToken().mjava","pathOld":"src/java/org/apache/solr/analysis/PhoneticFilter#incrementToken().mjava","sourceNew":"  @Override\n  public boolean incrementToken() throws IOException {\n    if( save != null ) {\n      // clearAttributes();  // not currently necessary\n      restoreState(save);\n      save = null;\n      return true;\n    }\n\n    if (!input.incrementToken()) return false;\n\n    // pass through zero-length terms\n    if (termAtt.termLength()==0) return true;\n\n    String value = termAtt.term();\n    String phonetic = null;\n    try {\n     String v = encoder.encode(value).toString();\n     if (v.length() > 0 && !value.equals(v)) phonetic = v;\n    } catch (Exception ignored) {} // just use the direct text\n\n    if (phonetic == null) return true;\n\n    if (!inject) {\n      // just modify this token\n      termAtt.setTermBuffer(phonetic);\n      return true;\n    }\n\n    // We need to return both the original and the phonetic tokens.\n    // to avoid a orig=captureState() change_to_phonetic() saved=captureState()  restoreState(orig)\n    // we return the phonetic alternative first\n\n    int origOffset = posAtt.getPositionIncrement();\n    posAtt.setPositionIncrement(0);\n    save = captureState();\n\n    posAtt.setPositionIncrement(origOffset);\n    termAtt.setTermBuffer(phonetic);\n    return true;\n  }\n\n","sourceOld":"  @Override\n  public boolean incrementToken() throws IOException {\n    if( save != null ) {\n      clearAttributes(); restoreState(save);\n      save = null;\n      return true;\n    }\n\n    if (!input.incrementToken()) return false;\n\n    // pass through zero-length terms\n    if (termAtt.termLength()==0) return true;\n\n    String value = termAtt.term();\n    String phonetic = null;\n    try {\n     String v = encoder.encode(value).toString();\n     if (v.length() > 0 && !value.equals(v)) phonetic = v;\n    } catch (Exception ignored) {} // just use the direct text\n\n    if (phonetic == null) return true;\n\n    if (!inject) {\n      // just modify this token\n      termAtt.setTermBuffer(phonetic);\n      return true;\n    }\n\n    // We need to return both the original and the phonetic tokens.\n    // to avoid a orig=captureState() change_to_phonetic() saved=captureState()  restoreState(orig)\n    // we return the phonetic alternative first\n\n    int origOffset = posAtt.getPositionIncrement();\n    posAtt.setPositionIncrement(0);\n    save = captureState();\n\n    posAtt.setPositionIncrement(origOffset);\n    termAtt.setTermBuffer(phonetic);\n    return true;\n  }\n\n","bugFix":["960e0dae888f682751b2c173774ae77a8da7e68d"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/analysis/PhoneticFilter#incrementToken().mjava","pathOld":"src/java/org/apache/solr/analysis/PhoneticFilter#incrementToken().mjava","sourceNew":"  @Override\n  public boolean incrementToken() throws IOException {\n    if( save != null ) {\n      // clearAttributes();  // not currently necessary\n      restoreState(save);\n      save = null;\n      return true;\n    }\n\n    if (!input.incrementToken()) return false;\n\n    // pass through zero-length terms\n    if (termAtt.termLength()==0) return true;\n\n    String value = termAtt.term();\n    String phonetic = null;\n    try {\n     String v = encoder.encode(value).toString();\n     if (v.length() > 0 && !value.equals(v)) phonetic = v;\n    } catch (Exception ignored) {} // just use the direct text\n\n    if (phonetic == null) return true;\n\n    if (!inject) {\n      // just modify this token\n      termAtt.setTermBuffer(phonetic);\n      return true;\n    }\n\n    // We need to return both the original and the phonetic tokens.\n    // to avoid a orig=captureState() change_to_phonetic() saved=captureState()  restoreState(orig)\n    // we return the phonetic alternative first\n\n    int origOffset = posAtt.getPositionIncrement();\n    posAtt.setPositionIncrement(0);\n    save = captureState();\n\n    posAtt.setPositionIncrement(origOffset);\n    termAtt.setTermBuffer(phonetic);\n    return true;\n  }\n\n","sourceOld":"  @Override\n  public boolean incrementToken() throws IOException {\n    if( save != null ) {\n      // clearAttributes();  // not currently necessary\n      restoreState(save);\n      save = null;\n      return true;\n    }\n\n    if (!input.incrementToken()) return false;\n\n    // pass through zero-length terms\n    if (termAtt.termLength()==0) return true;\n\n    String value = termAtt.term();\n    String phonetic = null;\n    try {\n     String v = encoder.encode(value).toString();\n     if (v.length() > 0 && !value.equals(v)) phonetic = v;\n    } catch (Exception ignored) {} // just use the direct text\n\n    if (phonetic == null) return true;\n\n    if (!inject) {\n      // just modify this token\n      termAtt.setTermBuffer(phonetic);\n      return true;\n    }\n\n    // We need to return both the original and the phonetic tokens.\n    // to avoid a orig=captureState() change_to_phonetic() saved=captureState()  restoreState(orig)\n    // we return the phonetic alternative first\n\n    int origOffset = posAtt.getPositionIncrement();\n    posAtt.setPositionIncrement(0);\n    save = captureState();\n\n    posAtt.setPositionIncrement(origOffset);\n    termAtt.setTermBuffer(phonetic);\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"be29e0e2cef1fd569147732e48caf8538790339b":["960e0dae888f682751b2c173774ae77a8da7e68d"],"960e0dae888f682751b2c173774ae77a8da7e68d":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"ad94625fb8d088209f46650c8097196fec67f00c":["be29e0e2cef1fd569147732e48caf8538790339b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["960e0dae888f682751b2c173774ae77a8da7e68d"],"be29e0e2cef1fd569147732e48caf8538790339b":["ad94625fb8d088209f46650c8097196fec67f00c"],"960e0dae888f682751b2c173774ae77a8da7e68d":["be29e0e2cef1fd569147732e48caf8538790339b"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}