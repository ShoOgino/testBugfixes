{"path":"lucene/src/java/org/apache/lucene/search/DisjunctionMaxQuery.DisjunctionMaxWeight#scorer(ReaderContext,boolean,boolean).mjava","commits":[{"id":"2dadf0f3286a34a0fee6e788ffce88624bf2984e","date":1294260428,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/DisjunctionMaxQuery.DisjunctionMaxWeight#scorer(ReaderContext,boolean,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/DisjunctionMaxQuery.DisjunctionMaxWeight#scorer(IndexReader,boolean,boolean).mjava","sourceNew":"    /* Create the scorer used to score our associated DisjunctionMaxQuery */\n    @Override\n    public Scorer scorer(ReaderContext context, boolean scoreDocsInOrder,\n        boolean topScorer) throws IOException {\n      Scorer[] scorers = new Scorer[weights.size()];\n      int idx = 0;\n      for (Weight w : weights) {\n        Scorer subScorer = w.scorer(context, true, false);\n        if (subScorer != null && subScorer.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          scorers[idx++] = subScorer;\n        }\n      }\n      if (idx == 0) return null; // all scorers did not have documents\n      DisjunctionMaxScorer result = new DisjunctionMaxScorer(tieBreakerMultiplier, similarity, scorers, idx);\n      return result;\n    }\n\n","sourceOld":"    /* Create the scorer used to score our associated DisjunctionMaxQuery */\n    @Override\n    public Scorer scorer(IndexReader reader, boolean scoreDocsInOrder,\n        boolean topScorer) throws IOException {\n      Scorer[] scorers = new Scorer[weights.size()];\n      int idx = 0;\n      for (Weight w : weights) {\n        Scorer subScorer = w.scorer(reader, true, false);\n        if (subScorer != null && subScorer.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          scorers[idx++] = subScorer;\n        }\n      }\n      if (idx == 0) return null; // all scorers did not have documents\n      DisjunctionMaxScorer result = new DisjunctionMaxScorer(tieBreakerMultiplier, similarity, scorers, idx);\n      return result;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a10b98ef1ef4bf9e38d2e07a9e425a916afa8705","date":1294747166,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/DisjunctionMaxQuery.DisjunctionMaxWeight#scorer(AtomicReaderContext,boolean,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/DisjunctionMaxQuery.DisjunctionMaxWeight#scorer(ReaderContext,boolean,boolean).mjava","sourceNew":"    /* Create the scorer used to score our associated DisjunctionMaxQuery */\n    @Override\n    public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n        boolean topScorer) throws IOException {\n      Scorer[] scorers = new Scorer[weights.size()];\n      int idx = 0;\n      for (Weight w : weights) {\n        Scorer subScorer = w.scorer(context, true, false);\n        if (subScorer != null && subScorer.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          scorers[idx++] = subScorer;\n        }\n      }\n      if (idx == 0) return null; // all scorers did not have documents\n      DisjunctionMaxScorer result = new DisjunctionMaxScorer(tieBreakerMultiplier, similarity, scorers, idx);\n      return result;\n    }\n\n","sourceOld":"    /* Create the scorer used to score our associated DisjunctionMaxQuery */\n    @Override\n    public Scorer scorer(ReaderContext context, boolean scoreDocsInOrder,\n        boolean topScorer) throws IOException {\n      Scorer[] scorers = new Scorer[weights.size()];\n      int idx = 0;\n      for (Weight w : weights) {\n        Scorer subScorer = w.scorer(context, true, false);\n        if (subScorer != null && subScorer.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          scorers[idx++] = subScorer;\n        }\n      }\n      if (idx == 0) return null; // all scorers did not have documents\n      DisjunctionMaxScorer result = new DisjunctionMaxScorer(tieBreakerMultiplier, similarity, scorers, idx);\n      return result;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"2dadf0f3286a34a0fee6e788ffce88624bf2984e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a10b98ef1ef4bf9e38d2e07a9e425a916afa8705":["2dadf0f3286a34a0fee6e788ffce88624bf2984e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a10b98ef1ef4bf9e38d2e07a9e425a916afa8705"]},"commit2Childs":{"2dadf0f3286a34a0fee6e788ffce88624bf2984e":["a10b98ef1ef4bf9e38d2e07a9e425a916afa8705"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2dadf0f3286a34a0fee6e788ffce88624bf2984e"],"a10b98ef1ef4bf9e38d2e07a9e425a916afa8705":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}