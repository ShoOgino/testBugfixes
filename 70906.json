{"path":"lucene/src/java/org/apache/lucene/index/IndexWriter#handleMergeException(Throwable,MergePolicy.OneMerge).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#handleMergeException(Throwable,MergePolicy.OneMerge).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#handleMergeException(Throwable,MergePolicy.OneMerge).mjava","sourceNew":"  final private void handleMergeException(Throwable t, MergePolicy.OneMerge merge) throws IOException {\n\n    if (infoStream != null) {\n      message(\"handleMergeException: merge=\" + merge.segString(directory) + \" exc=\" + t);\n    }\n\n    // Set the exception on the merge, so if\n    // optimize() is waiting on us it sees the root\n    // cause exception:\n    merge.setException(t);\n    addMergeException(merge);\n\n    if (t instanceof MergePolicy.MergeAbortedException) {\n      // We can ignore this exception (it happens when\n      // close(false) or rollback is called), unless the\n      // merge involves segments from external directories,\n      // in which case we must throw it so, for example, the\n      // rollbackTransaction code in addIndexes* is\n      // executed.\n      if (merge.isExternal)\n        throw (MergePolicy.MergeAbortedException) t;\n    } else if (t instanceof IOException)\n      throw (IOException) t;\n    else if (t instanceof RuntimeException)\n      throw (RuntimeException) t;\n    else if (t instanceof Error)\n      throw (Error) t;\n    else\n      // Should not get here\n      throw new RuntimeException(t);\n  }\n\n","sourceOld":"  final private void handleMergeException(Throwable t, MergePolicy.OneMerge merge) throws IOException {\n\n    if (infoStream != null) {\n      message(\"handleMergeException: merge=\" + merge.segString(directory) + \" exc=\" + t);\n    }\n\n    // Set the exception on the merge, so if\n    // optimize() is waiting on us it sees the root\n    // cause exception:\n    merge.setException(t);\n    addMergeException(merge);\n\n    if (t instanceof MergePolicy.MergeAbortedException) {\n      // We can ignore this exception (it happens when\n      // close(false) or rollback is called), unless the\n      // merge involves segments from external directories,\n      // in which case we must throw it so, for example, the\n      // rollbackTransaction code in addIndexes* is\n      // executed.\n      if (merge.isExternal)\n        throw (MergePolicy.MergeAbortedException) t;\n    } else if (t instanceof IOException)\n      throw (IOException) t;\n    else if (t instanceof RuntimeException)\n      throw (RuntimeException) t;\n    else if (t instanceof Error)\n      throw (Error) t;\n    else\n      // Should not get here\n      throw new RuntimeException(t);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06584e6e98d592b34e1329b384182f368d2025e8","date":1320850353,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#handleMergeException(Throwable,MergePolicy.OneMerge).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#handleMergeException(Throwable,MergePolicy.OneMerge).mjava","sourceNew":"  final private void handleMergeException(Throwable t, MergePolicy.OneMerge merge) throws IOException {\n\n    if (infoStream != null) {\n      infoStream.message(\"IW\", \"handleMergeException: merge=\" + merge.segString(directory) + \" exc=\" + t);\n    }\n\n    // Set the exception on the merge, so if\n    // optimize() is waiting on us it sees the root\n    // cause exception:\n    merge.setException(t);\n    addMergeException(merge);\n\n    if (t instanceof MergePolicy.MergeAbortedException) {\n      // We can ignore this exception (it happens when\n      // close(false) or rollback is called), unless the\n      // merge involves segments from external directories,\n      // in which case we must throw it so, for example, the\n      // rollbackTransaction code in addIndexes* is\n      // executed.\n      if (merge.isExternal)\n        throw (MergePolicy.MergeAbortedException) t;\n    } else if (t instanceof IOException)\n      throw (IOException) t;\n    else if (t instanceof RuntimeException)\n      throw (RuntimeException) t;\n    else if (t instanceof Error)\n      throw (Error) t;\n    else\n      // Should not get here\n      throw new RuntimeException(t);\n  }\n\n","sourceOld":"  final private void handleMergeException(Throwable t, MergePolicy.OneMerge merge) throws IOException {\n\n    if (infoStream != null) {\n      message(\"handleMergeException: merge=\" + merge.segString(directory) + \" exc=\" + t);\n    }\n\n    // Set the exception on the merge, so if\n    // optimize() is waiting on us it sees the root\n    // cause exception:\n    merge.setException(t);\n    addMergeException(merge);\n\n    if (t instanceof MergePolicy.MergeAbortedException) {\n      // We can ignore this exception (it happens when\n      // close(false) or rollback is called), unless the\n      // merge involves segments from external directories,\n      // in which case we must throw it so, for example, the\n      // rollbackTransaction code in addIndexes* is\n      // executed.\n      if (merge.isExternal)\n        throw (MergePolicy.MergeAbortedException) t;\n    } else if (t instanceof IOException)\n      throw (IOException) t;\n    else if (t instanceof RuntimeException)\n      throw (RuntimeException) t;\n    else if (t instanceof Error)\n      throw (Error) t;\n    else\n      // Should not get here\n      throw new RuntimeException(t);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d14e8d18c0e3970c20354dbeeb49da11bd587fbd","date":1321041051,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#handleMergeException(Throwable,MergePolicy.OneMerge).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#handleMergeException(Throwable,MergePolicy.OneMerge).mjava","sourceNew":"  final private void handleMergeException(Throwable t, MergePolicy.OneMerge merge) throws IOException {\n\n    if (infoStream != null) {\n      infoStream.message(\"IW\", \"handleMergeException: merge=\" + merge.segString(directory) + \" exc=\" + t);\n    }\n\n    // Set the exception on the merge, so if\n    // forceMerge is waiting on us it sees the root\n    // cause exception:\n    merge.setException(t);\n    addMergeException(merge);\n\n    if (t instanceof MergePolicy.MergeAbortedException) {\n      // We can ignore this exception (it happens when\n      // close(false) or rollback is called), unless the\n      // merge involves segments from external directories,\n      // in which case we must throw it so, for example, the\n      // rollbackTransaction code in addIndexes* is\n      // executed.\n      if (merge.isExternal)\n        throw (MergePolicy.MergeAbortedException) t;\n    } else if (t instanceof IOException)\n      throw (IOException) t;\n    else if (t instanceof RuntimeException)\n      throw (RuntimeException) t;\n    else if (t instanceof Error)\n      throw (Error) t;\n    else\n      // Should not get here\n      throw new RuntimeException(t);\n  }\n\n","sourceOld":"  final private void handleMergeException(Throwable t, MergePolicy.OneMerge merge) throws IOException {\n\n    if (infoStream != null) {\n      infoStream.message(\"IW\", \"handleMergeException: merge=\" + merge.segString(directory) + \" exc=\" + t);\n    }\n\n    // Set the exception on the merge, so if\n    // optimize() is waiting on us it sees the root\n    // cause exception:\n    merge.setException(t);\n    addMergeException(merge);\n\n    if (t instanceof MergePolicy.MergeAbortedException) {\n      // We can ignore this exception (it happens when\n      // close(false) or rollback is called), unless the\n      // merge involves segments from external directories,\n      // in which case we must throw it so, for example, the\n      // rollbackTransaction code in addIndexes* is\n      // executed.\n      if (merge.isExternal)\n        throw (MergePolicy.MergeAbortedException) t;\n    } else if (t instanceof IOException)\n      throw (IOException) t;\n    else if (t instanceof RuntimeException)\n      throw (RuntimeException) t;\n    else if (t instanceof Error)\n      throw (Error) t;\n    else\n      // Should not get here\n      throw new RuntimeException(t);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"58c6bbc222f074c844e736e6fb23647e3db9cfe3","date":1322743940,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#handleMergeException(Throwable,MergePolicy.OneMerge).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#handleMergeException(Throwable,MergePolicy.OneMerge).mjava","sourceNew":"  final private void handleMergeException(Throwable t, MergePolicy.OneMerge merge) throws IOException {\n\n    if (infoStream.isEnabled(\"IW\")) {\n      infoStream.message(\"IW\", \"handleMergeException: merge=\" + merge.segString(directory) + \" exc=\" + t);\n    }\n\n    // Set the exception on the merge, so if\n    // forceMerge is waiting on us it sees the root\n    // cause exception:\n    merge.setException(t);\n    addMergeException(merge);\n\n    if (t instanceof MergePolicy.MergeAbortedException) {\n      // We can ignore this exception (it happens when\n      // close(false) or rollback is called), unless the\n      // merge involves segments from external directories,\n      // in which case we must throw it so, for example, the\n      // rollbackTransaction code in addIndexes* is\n      // executed.\n      if (merge.isExternal)\n        throw (MergePolicy.MergeAbortedException) t;\n    } else if (t instanceof IOException)\n      throw (IOException) t;\n    else if (t instanceof RuntimeException)\n      throw (RuntimeException) t;\n    else if (t instanceof Error)\n      throw (Error) t;\n    else\n      // Should not get here\n      throw new RuntimeException(t);\n  }\n\n","sourceOld":"  final private void handleMergeException(Throwable t, MergePolicy.OneMerge merge) throws IOException {\n\n    if (infoStream != null) {\n      infoStream.message(\"IW\", \"handleMergeException: merge=\" + merge.segString(directory) + \" exc=\" + t);\n    }\n\n    // Set the exception on the merge, so if\n    // forceMerge is waiting on us it sees the root\n    // cause exception:\n    merge.setException(t);\n    addMergeException(merge);\n\n    if (t instanceof MergePolicy.MergeAbortedException) {\n      // We can ignore this exception (it happens when\n      // close(false) or rollback is called), unless the\n      // merge involves segments from external directories,\n      // in which case we must throw it so, for example, the\n      // rollbackTransaction code in addIndexes* is\n      // executed.\n      if (merge.isExternal)\n        throw (MergePolicy.MergeAbortedException) t;\n    } else if (t instanceof IOException)\n      throw (IOException) t;\n    else if (t instanceof RuntimeException)\n      throw (RuntimeException) t;\n    else if (t instanceof Error)\n      throw (Error) t;\n    else\n      // Should not get here\n      throw new RuntimeException(t);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ce667c6d3400b22523701c549c0d35e26da8b46","date":1324405053,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#handleMergeException(Throwable,MergePolicy.OneMerge).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#handleMergeException(Throwable,MergePolicy.OneMerge).mjava","sourceNew":"  final private void handleMergeException(Throwable t, MergePolicy.OneMerge merge) throws IOException {\n\n    if (infoStream.isEnabled(\"IW\")) {\n      infoStream.message(\"IW\", \"handleMergeException: merge=\" + segString(merge.segments) + \" exc=\" + t);\n    }\n\n    // Set the exception on the merge, so if\n    // forceMerge is waiting on us it sees the root\n    // cause exception:\n    merge.setException(t);\n    addMergeException(merge);\n\n    if (t instanceof MergePolicy.MergeAbortedException) {\n      // We can ignore this exception (it happens when\n      // close(false) or rollback is called), unless the\n      // merge involves segments from external directories,\n      // in which case we must throw it so, for example, the\n      // rollbackTransaction code in addIndexes* is\n      // executed.\n      if (merge.isExternal)\n        throw (MergePolicy.MergeAbortedException) t;\n    } else if (t instanceof IOException)\n      throw (IOException) t;\n    else if (t instanceof RuntimeException)\n      throw (RuntimeException) t;\n    else if (t instanceof Error)\n      throw (Error) t;\n    else\n      // Should not get here\n      throw new RuntimeException(t);\n  }\n\n","sourceOld":"  final private void handleMergeException(Throwable t, MergePolicy.OneMerge merge) throws IOException {\n\n    if (infoStream.isEnabled(\"IW\")) {\n      infoStream.message(\"IW\", \"handleMergeException: merge=\" + merge.segString(directory) + \" exc=\" + t);\n    }\n\n    // Set the exception on the merge, so if\n    // forceMerge is waiting on us it sees the root\n    // cause exception:\n    merge.setException(t);\n    addMergeException(merge);\n\n    if (t instanceof MergePolicy.MergeAbortedException) {\n      // We can ignore this exception (it happens when\n      // close(false) or rollback is called), unless the\n      // merge involves segments from external directories,\n      // in which case we must throw it so, for example, the\n      // rollbackTransaction code in addIndexes* is\n      // executed.\n      if (merge.isExternal)\n        throw (MergePolicy.MergeAbortedException) t;\n    } else if (t instanceof IOException)\n      throw (IOException) t;\n    else if (t instanceof RuntimeException)\n      throw (RuntimeException) t;\n    else if (t instanceof Error)\n      throw (Error) t;\n    else\n      // Should not get here\n      throw new RuntimeException(t);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#handleMergeException(Throwable,MergePolicy.OneMerge).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#handleMergeException(Throwable,MergePolicy.OneMerge).mjava","sourceNew":"  final private void handleMergeException(Throwable t, MergePolicy.OneMerge merge) throws IOException {\n\n    if (infoStream.isEnabled(\"IW\")) {\n      infoStream.message(\"IW\", \"handleMergeException: merge=\" + segString(merge.segments) + \" exc=\" + t);\n    }\n\n    // Set the exception on the merge, so if\n    // forceMerge is waiting on us it sees the root\n    // cause exception:\n    merge.setException(t);\n    addMergeException(merge);\n\n    if (t instanceof MergePolicy.MergeAbortedException) {\n      // We can ignore this exception (it happens when\n      // close(false) or rollback is called), unless the\n      // merge involves segments from external directories,\n      // in which case we must throw it so, for example, the\n      // rollbackTransaction code in addIndexes* is\n      // executed.\n      if (merge.isExternal)\n        throw (MergePolicy.MergeAbortedException) t;\n    } else if (t instanceof IOException)\n      throw (IOException) t;\n    else if (t instanceof RuntimeException)\n      throw (RuntimeException) t;\n    else if (t instanceof Error)\n      throw (Error) t;\n    else\n      // Should not get here\n      throw new RuntimeException(t);\n  }\n\n","sourceOld":"  final private void handleMergeException(Throwable t, MergePolicy.OneMerge merge) throws IOException {\n\n    if (infoStream.isEnabled(\"IW\")) {\n      infoStream.message(\"IW\", \"handleMergeException: merge=\" + segString(merge.segments) + \" exc=\" + t);\n    }\n\n    // Set the exception on the merge, so if\n    // forceMerge is waiting on us it sees the root\n    // cause exception:\n    merge.setException(t);\n    addMergeException(merge);\n\n    if (t instanceof MergePolicy.MergeAbortedException) {\n      // We can ignore this exception (it happens when\n      // close(false) or rollback is called), unless the\n      // merge involves segments from external directories,\n      // in which case we must throw it so, for example, the\n      // rollbackTransaction code in addIndexes* is\n      // executed.\n      if (merge.isExternal)\n        throw (MergePolicy.MergeAbortedException) t;\n    } else if (t instanceof IOException)\n      throw (IOException) t;\n    else if (t instanceof RuntimeException)\n      throw (RuntimeException) t;\n    else if (t instanceof Error)\n      throw (Error) t;\n    else\n      // Should not get here\n      throw new RuntimeException(t);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"58c6bbc222f074c844e736e6fb23647e3db9cfe3":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["9ce667c6d3400b22523701c549c0d35e26da8b46"],"06584e6e98d592b34e1329b384182f368d2025e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["06584e6e98d592b34e1329b384182f368d2025e8"],"9ce667c6d3400b22523701c549c0d35e26da8b46":["58c6bbc222f074c844e736e6fb23647e3db9cfe3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"58c6bbc222f074c844e736e6fb23647e3db9cfe3":["9ce667c6d3400b22523701c549c0d35e26da8b46"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"06584e6e98d592b34e1329b384182f368d2025e8":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["58c6bbc222f074c844e736e6fb23647e3db9cfe3"],"9ce667c6d3400b22523701c549c0d35e26da8b46":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["06584e6e98d592b34e1329b384182f368d2025e8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}