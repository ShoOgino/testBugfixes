{"path":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/FacetLabel#copyFullPath(char[],int,char).mjava","commits":[{"id":"c190847801a50f4dd20fd639bdc29b54ea3b288b","date":1384461522,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/FacetLabel#copyFullPath(char[],int,char).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/CategoryPath#copyFullPath(char[],int,char).mjava","sourceNew":"  /**\n   * Copies the path components to the given {@code char[]}, starting at index\n   * {@code start}. {@code delimiter} is copied between the path components.\n   * Returns the number of chars copied.\n   * \n   * <p>\n   * <b>NOTE:</b> this method relies on the array being large enough to hold the\n   * components and separators - the amount of needed space can be calculated\n   * with {@link #fullPathLength()}.\n   */\n  public int copyFullPath(char[] buf, int start, char delimiter) {\n    if (length == 0) {\n      return 0;\n    }\n\n    int idx = start;\n    int upto = length - 1;\n    for (int i = 0; i < upto; i++) {\n      int len = components[i].length();\n      components[i].getChars(0, len, buf, idx);\n      noDelimiter(buf, idx, len, delimiter);\n      idx += len;\n      buf[idx++] = delimiter;\n    }\n    components[upto].getChars(0, components[upto].length(), buf, idx);\n    noDelimiter(buf, idx, components[upto].length(), delimiter);\n    \n    return idx + components[upto].length() - start;\n  }\n\n","sourceOld":"  /**\n   * Copies the path components to the given {@code char[]}, starting at index\n   * {@code start}. {@code delimiter} is copied between the path components.\n   * Returns the number of chars copied.\n   * \n   * <p>\n   * <b>NOTE:</b> this method relies on the array being large enough to hold the\n   * components and separators - the amount of needed space can be calculated\n   * with {@link #fullPathLength()}.\n   */\n  public int copyFullPath(char[] buf, int start, char delimiter) {\n    if (length == 0) {\n      return 0;\n    }\n\n    int idx = start;\n    int upto = length - 1;\n    for (int i = 0; i < upto; i++) {\n      int len = components[i].length();\n      components[i].getChars(0, len, buf, idx);\n      noDelimiter(buf, idx, len, delimiter);\n      idx += len;\n      buf[idx++] = delimiter;\n    }\n    components[upto].getChars(0, components[upto].length(), buf, idx);\n    noDelimiter(buf, idx, components[upto].length(), delimiter);\n    \n    return idx + components[upto].length() - start;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bbe9946d3cd818d329255e4c325597ac3480503e","date":1385580921,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/FacetLabel#copyFullPath(char[],int,char).mjava","sourceNew":null,"sourceOld":"  /**\n   * Copies the path components to the given {@code char[]}, starting at index\n   * {@code start}. {@code delimiter} is copied between the path components.\n   * Returns the number of chars copied.\n   * \n   * <p>\n   * <b>NOTE:</b> this method relies on the array being large enough to hold the\n   * components and separators - the amount of needed space can be calculated\n   * with {@link #fullPathLength()}.\n   */\n  public int copyFullPath(char[] buf, int start, char delimiter) {\n    if (length == 0) {\n      return 0;\n    }\n\n    int idx = start;\n    int upto = length - 1;\n    for (int i = 0; i < upto; i++) {\n      int len = components[i].length();\n      components[i].getChars(0, len, buf, idx);\n      noDelimiter(buf, idx, len, delimiter);\n      idx += len;\n      buf[idx++] = delimiter;\n    }\n    components[upto].getChars(0, components[upto].length(), buf, idx);\n    noDelimiter(buf, idx, components[upto].length(), delimiter);\n    \n    return idx + components[upto].length() - start;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bbe9946d3cd818d329255e4c325597ac3480503e":["c190847801a50f4dd20fd639bdc29b54ea3b288b"],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817","c190847801a50f4dd20fd639bdc29b54ea3b288b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"bbe9946d3cd818d329255e4c325597ac3480503e":[],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["bbe9946d3cd818d329255e4c325597ac3480503e"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","bbe9946d3cd818d329255e4c325597ac3480503e"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}