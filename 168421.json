{"path":"lucene/src/test/org/apache/lucene/search/payloads/TestPayloadNearQuery#newPhraseQuery(String,String,boolean,PayloadFunction).mjava","commits":[{"id":"63962b8b453f75ca481172689753cdb3ca868d4c","date":1283201927,"type":1,"author":"Grant Ingersoll","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/payloads/TestPayloadNearQuery#newPhraseQuery(String,String,boolean,PayloadFunction).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/payloads/TestPayloadNearQuery#newPhraseQuery(String,String,boolean).mjava","sourceNew":"  private PayloadNearQuery newPhraseQuery (String fieldName, String phrase, boolean inOrder, PayloadFunction function ) {\n    String[] words = phrase.split(\"[\\\\s]+\");\n    SpanQuery clauses[] = new SpanQuery[words.length];\n    for (int i=0;i<clauses.length;i++) {\n      clauses[i] = new SpanTermQuery(new Term(fieldName, words[i]));  \n    } \n    return new PayloadNearQuery(clauses, 0, inOrder, function);\n  }\n\n","sourceOld":"  private PayloadNearQuery newPhraseQuery (String fieldName, String phrase, boolean inOrder) {\n    String[] words = phrase.split(\"[\\\\s]+\");\n    SpanQuery clauses[] = new SpanQuery[words.length];\n    for (int i=0;i<clauses.length;i++) {\n      clauses[i] = new SpanTermQuery(new Term(fieldName, words[i]));  \n    } \n    return new PayloadNearQuery(clauses, 0, inOrder);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/payloads/TestPayloadNearQuery#newPhraseQuery(String,String,boolean,PayloadFunction).mjava","pathOld":"/dev/null","sourceNew":"  private PayloadNearQuery newPhraseQuery (String fieldName, String phrase, boolean inOrder, PayloadFunction function ) {\n    String[] words = phrase.split(\"[\\\\s]+\");\n    SpanQuery clauses[] = new SpanQuery[words.length];\n    for (int i=0;i<clauses.length;i++) {\n      clauses[i] = new SpanTermQuery(new Term(fieldName, words[i]));  \n    } \n    return new PayloadNearQuery(clauses, 0, inOrder, function);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/payloads/TestPayloadNearQuery#newPhraseQuery(String,String,boolean,PayloadFunction).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/payloads/TestPayloadNearQuery#newPhraseQuery(String,String,boolean,PayloadFunction).mjava","sourceNew":"  private PayloadNearQuery newPhraseQuery (String fieldName, String phrase, boolean inOrder, PayloadFunction function ) {\n    String[] words = phrase.split(\"[\\\\s]+\");\n    SpanQuery clauses[] = new SpanQuery[words.length];\n    for (int i=0;i<clauses.length;i++) {\n      clauses[i] = new SpanTermQuery(new Term(fieldName, words[i]));  \n    } \n    return new PayloadNearQuery(clauses, 0, inOrder, function);\n  }\n\n","sourceOld":"  private PayloadNearQuery newPhraseQuery (String fieldName, String phrase, boolean inOrder, PayloadFunction function ) {\n    String[] words = phrase.split(\"[\\\\s]+\");\n    SpanQuery clauses[] = new SpanQuery[words.length];\n    for (int i=0;i<clauses.length;i++) {\n      clauses[i] = new SpanTermQuery(new Term(fieldName, words[i]));  \n    } \n    return new PayloadNearQuery(clauses, 0, inOrder, function);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["63962b8b453f75ca481172689753cdb3ca868d4c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"63962b8b453f75ca481172689753cdb3ca868d4c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","63962b8b453f75ca481172689753cdb3ca868d4c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["63962b8b453f75ca481172689753cdb3ca868d4c","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"63962b8b453f75ca481172689753cdb3ca868d4c":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}