{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/bloom/FuzzySet#addValue(BytesRef).mjava","commits":[{"id":"3f1361ca6e7d39bfd5cf15485d8843ea798bdd30","date":1346918556,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/bloom/FuzzySet#addValue(BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/FuzzySet#addValue(BytesRef).mjava","sourceNew":"  /**\n   * Records a value in the set. The referenced bytes are hashed and then modulo n'd where n is the\n   * chosen size of the internal bitset.\n   * @param value the key value to be hashed\n   * @throws IOException\n   */\n  public void addValue(BytesRef value) throws IOException {    \n      int hash = hashFunction.hash(value);\n      if (hash < 0) {\n        hash = hash * -1;\n      }\n      // Bitmasking using bloomSize is effectively a modulo operation.\n      int bloomPos = hash & bloomSize;\n      filter.set(bloomPos);\n  }  \n\n","sourceOld":"  /**\n   * Records a value in the set. The referenced bytes are hashed and then modulo n'd where n is the\n   * chosen size of the internal bitset.\n   * @param value the key value to be hashed\n   * @throws IOException\n   */\n  public void addValue(BytesRef value) throws IOException {    \n      int hash = hashFunction.hash(value);\n      if (hash < 0) {\n        hash = hash * -1;\n      }\n      // Bitmasking using bloomSize is effectively a modulo operation.\n      int bloomPos = hash & bloomSize;\n      filter.set(bloomPos);\n  }  \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","date":1348430063,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/bloom/FuzzySet#addValue(BytesRef).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/bloom/FuzzySet#addValue(BytesRef).mjava","sourceNew":"  /**\n   * Records a value in the set. The referenced bytes are hashed and then modulo n'd where n is the\n   * chosen size of the internal bitset.\n   * @param value the key value to be hashed\n   * @throws IOException If there is a low-level I/O error\n   */\n  public void addValue(BytesRef value) throws IOException {    \n      int hash = hashFunction.hash(value);\n      if (hash < 0) {\n        hash = hash * -1;\n      }\n      // Bitmasking using bloomSize is effectively a modulo operation.\n      int bloomPos = hash & bloomSize;\n      filter.set(bloomPos);\n  }  \n\n","sourceOld":"  /**\n   * Records a value in the set. The referenced bytes are hashed and then modulo n'd where n is the\n   * chosen size of the internal bitset.\n   * @param value the key value to be hashed\n   * @throws IOException\n   */\n  public void addValue(BytesRef value) throws IOException {    \n      int hash = hashFunction.hash(value);\n      if (hash < 0) {\n        hash = hash * -1;\n      }\n      // Bitmasking using bloomSize is effectively a modulo operation.\n      int bloomPos = hash & bloomSize;\n      filter.set(bloomPos);\n  }  \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["3f1361ca6e7d39bfd5cf15485d8843ea798bdd30"],"3f1361ca6e7d39bfd5cf15485d8843ea798bdd30":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"]},"commit2Childs":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3f1361ca6e7d39bfd5cf15485d8843ea798bdd30":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3f1361ca6e7d39bfd5cf15485d8843ea798bdd30"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}