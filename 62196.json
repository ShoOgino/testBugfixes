{"path":"contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/feeds/LineDocSourceTest#testInvalidFormat().mjava","commits":[{"id":"1bc1076e669ef72f6939198a862b40a0ffd1fc70","date":1248689703,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/feeds/LineDocSourceTest#testInvalidFormat().mjava","pathOld":"contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/feeds/LineDocMakerTest#testInvalidFormat().mjava","sourceNew":"  public void testInvalidFormat() throws Exception {\n    String[] testCases = new String[] {\n      \"\", // empty line\n      \"title\", // just title\n      \"title\" + WriteLineDocTask.SEP, // title + SEP\n      \"title\" + WriteLineDocTask.SEP + \"body\", // title + SEP + body\n      // note that title + SEP + body + SEP is a valid line, which results in an\n      // empty body\n    };\n    \n    for (int i = 0; i < testCases.length; i++) {\n      File file = new File(getWorkDir(), \"one-line\");\n      BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(file), \"utf-8\"));\n      writer.write(testCases[i]);\n      writer.newLine();\n      writer.close();\n      try {\n        doIndexAndSearchTest(file, false, null);\n        fail(\"Some exception should have been thrown for: [\" + testCases[i] + \"]\");\n      } catch (Exception e) {\n        // expected.\n      }\n    }\n  }\n\n","sourceOld":"  public void testInvalidFormat() throws Exception {\n    String[] testCases = new String[] {\n      \"\", // empty line\n      \"title\", // just title\n      \"title\" + WriteLineDocTask.SEP, // title + SEP\n      \"title\" + WriteLineDocTask.SEP + \"body\", // title + SEP + body\n      // note that title + SEP + body + SEP is a valid line, which results in an\n      // empty body\n    };\n    \n    for (int i = 0; i < testCases.length; i++) {\n      File file = new File(getWorkDir(), \"one-line\");\n      BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(file), \"utf-8\"));\n      writer.write(testCases[i]);\n      writer.newLine();\n      writer.close();\n      try {\n        doIndexAndSearchTest(file, false, null);\n        fail(\"Some exception should have been thrown for: [\" + testCases[i] + \"]\");\n      } catch (Exception e) {\n        // expected.\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/feeds/LineDocSourceTest#testInvalidFormat().mjava","pathOld":"contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/feeds/LineDocSourceTest#testInvalidFormat().mjava","sourceNew":"  public void testInvalidFormat() throws Exception {\n    String[] testCases = new String[] {\n      \"\", // empty line\n      \"title\", // just title\n      \"title\" + WriteLineDocTask.SEP, // title + SEP\n      \"title\" + WriteLineDocTask.SEP + \"body\", // title + SEP + body\n      // note that title + SEP + body + SEP is a valid line, which results in an\n      // empty body\n    };\n    \n    for (int i = 0; i < testCases.length; i++) {\n      File file = new File(getWorkDir(), \"one-line\");\n      BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(file), \"utf-8\"));\n      writer.write(testCases[i]);\n      writer.newLine();\n      writer.close();\n      try {\n        doIndexAndSearchTest(file, false, null);\n        fail(\"Some exception should have been thrown for: [\" + testCases[i] + \"]\");\n      } catch (Exception e) {\n        // expected.\n      }\n    }\n  }\n\n","sourceOld":"  public void testInvalidFormat() throws Exception {\n    String[] testCases = new String[] {\n      \"\", // empty line\n      \"title\", // just title\n      \"title\" + WriteLineDocTask.SEP, // title + SEP\n      \"title\" + WriteLineDocTask.SEP + \"body\", // title + SEP + body\n      // note that title + SEP + body + SEP is a valid line, which results in an\n      // empty body\n    };\n    \n    for (int i = 0; i < testCases.length; i++) {\n      File file = new File(getWorkDir(), \"one-line\");\n      BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(file), \"utf-8\"));\n      writer.write(testCases[i]);\n      writer.newLine();\n      writer.close();\n      try {\n        doIndexAndSearchTest(file, false, null);\n        fail(\"Some exception should have been thrown for: [\" + testCases[i] + \"]\");\n      } catch (Exception e) {\n        // expected.\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["1bc1076e669ef72f6939198a862b40a0ffd1fc70"],"1bc1076e669ef72f6939198a862b40a0ffd1fc70":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1bc1076e669ef72f6939198a862b40a0ffd1fc70"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1bc1076e669ef72f6939198a862b40a0ffd1fc70":["9454a6510e2db155fb01faa5c049b06ece95fab9"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}