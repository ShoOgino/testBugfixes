{"path":"lucene/core/src/java/org/apache/lucene/codecs/CodecUtil#verifyAndCopyIndexHeader(IndexInput,DataOutput,byte[]).mjava","commits":[{"id":"71488d7f5786ae87541276121ecb69705a11a295","date":1465498138,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/CodecUtil#verifyAndCopyIndexHeader(IndexInput,DataOutput,byte[]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Expert: verifies the incoming {@link IndexInput} has an index header\n   * and that its segment ID matches the expected one, and then copies\n   * that index header into the provided {@link DataOutput}.  This is\n   * useful when building compound files.\n   *\n   * @param in Input stream, positioned at the point where the\n   *        index header was previously written. Typically this is located\n   *        at the beginning of the file.\n   * @param out Output stream, where the header will be copied to.\n   * @param expectedID Expected segment ID\n   * @throws CorruptIndexException If the first four bytes are not\n   *         {@link #CODEC_MAGIC}, or if the <code>expectedID</code>\n   *         does not match.\n   * @throws IOException If there is an I/O error reading from the underlying medium.\n   *\n   * @lucene.internal \n   */\n  public static void verifyAndCopyIndexHeader(IndexInput in, DataOutput out, byte[] expectedID) throws IOException {\n    // make sure it's large enough to have a header and footer\n    if (in.length() < footerLength() + headerLength(\"\")) {\n      throw new CorruptIndexException(\"compound sub-files must have a valid codec header and footer: file is too small (\" + in.length() + \" bytes)\", in);\n    }\n\n    int actualHeader = in.readInt();\n    if (actualHeader != CODEC_MAGIC) {\n      throw new CorruptIndexException(\"compound sub-files must have a valid codec header and footer: codec header mismatch: actual header=\" + actualHeader + \" vs expected header=\" + CodecUtil.CODEC_MAGIC, in);\n    }\n\n    // we can't verify these, so we pass-through:\n    String codec = in.readString();\n    int version = in.readInt();\n\n    // verify id:\n    checkIndexHeaderID(in, expectedID);\n\n    // we can't verify extension either, so we pass-through:\n    int suffixLength = in.readByte() & 0xFF;\n    byte[] suffixBytes = new byte[suffixLength];\n    in.readBytes(suffixBytes, 0, suffixLength);\n\n    // now write the header we just verified\n    out.writeInt(CodecUtil.CODEC_MAGIC);\n    out.writeString(codec);\n    out.writeInt(version);\n    out.writeBytes(expectedID, 0, expectedID.length);\n    out.writeByte((byte) suffixLength);\n    out.writeBytes(suffixBytes, 0, suffixLength);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/CodecUtil#verifyAndCopyIndexHeader(IndexInput,DataOutput,byte[]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Expert: verifies the incoming {@link IndexInput} has an index header\n   * and that its segment ID matches the expected one, and then copies\n   * that index header into the provided {@link DataOutput}.  This is\n   * useful when building compound files.\n   *\n   * @param in Input stream, positioned at the point where the\n   *        index header was previously written. Typically this is located\n   *        at the beginning of the file.\n   * @param out Output stream, where the header will be copied to.\n   * @param expectedID Expected segment ID\n   * @throws CorruptIndexException If the first four bytes are not\n   *         {@link #CODEC_MAGIC}, or if the <code>expectedID</code>\n   *         does not match.\n   * @throws IOException If there is an I/O error reading from the underlying medium.\n   *\n   * @lucene.internal \n   */\n  public static void verifyAndCopyIndexHeader(IndexInput in, DataOutput out, byte[] expectedID) throws IOException {\n    // make sure it's large enough to have a header and footer\n    if (in.length() < footerLength() + headerLength(\"\")) {\n      throw new CorruptIndexException(\"compound sub-files must have a valid codec header and footer: file is too small (\" + in.length() + \" bytes)\", in);\n    }\n\n    int actualHeader = in.readInt();\n    if (actualHeader != CODEC_MAGIC) {\n      throw new CorruptIndexException(\"compound sub-files must have a valid codec header and footer: codec header mismatch: actual header=\" + actualHeader + \" vs expected header=\" + CodecUtil.CODEC_MAGIC, in);\n    }\n\n    // we can't verify these, so we pass-through:\n    String codec = in.readString();\n    int version = in.readInt();\n\n    // verify id:\n    checkIndexHeaderID(in, expectedID);\n\n    // we can't verify extension either, so we pass-through:\n    int suffixLength = in.readByte() & 0xFF;\n    byte[] suffixBytes = new byte[suffixLength];\n    in.readBytes(suffixBytes, 0, suffixLength);\n\n    // now write the header we just verified\n    out.writeInt(CodecUtil.CODEC_MAGIC);\n    out.writeString(codec);\n    out.writeInt(version);\n    out.writeBytes(expectedID, 0, expectedID.length);\n    out.writeByte((byte) suffixLength);\n    out.writeBytes(suffixBytes, 0, suffixLength);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"71488d7f5786ae87541276121ecb69705a11a295":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","71488d7f5786ae87541276121ecb69705a11a295"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["71488d7f5786ae87541276121ecb69705a11a295"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["71488d7f5786ae87541276121ecb69705a11a295","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"71488d7f5786ae87541276121ecb69705a11a295":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}