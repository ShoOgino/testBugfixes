{"path":"src/test/org/apache/lucene/search/TestBooleanPrefixQuery#testMethod().mjava","commits":[{"id":"c964249f3bde77675cca03c33360c076896b9e90","date":1069719680,"type":0,"author":"Doug Cutting","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestBooleanPrefixQuery#testMethod().mjava","pathOld":"/dev/null","sourceNew":"  public void testMethod() {\n    RAMDirectory directory = new RAMDirectory();\n\n    String[] categories = new String[]{\"food\",\n                                       \"foodanddrink\",\n                                       \"foodanddrinkandgoodtimes\",\n                                       \"food and drink\"};\n\n    Query rw1 = null;\n    Query rw2 = null;\n    try {\n      IndexWriter writer = new IndexWriter(directory, new\n                                           WhitespaceAnalyzer(), true);\n      for (int i = 0; i < categories.length; i++) {\n        Document doc = new Document();\n        doc.add(Field.Keyword(\"category\", categories[i]));\n        writer.addDocument(doc);\n      }\n      writer.close();\n      \n      IndexReader reader = IndexReader.open(directory);\n      PrefixQuery query = new PrefixQuery(new Term(\"category\", \"foo\"));\n      \n      rw1 = query.rewrite(reader);\n      \n      BooleanQuery bq = new BooleanQuery();\n      bq.add(query, true, false);\n      \n      rw2 = bq.rewrite(reader);\n    } catch (IOException e) {\n      fail(e.getMessage());\n    }\n\n    BooleanQuery bq1 = null;\n    if (rw1 instanceof BooleanQuery) {\n      bq1 = (BooleanQuery) rw1;\n    }\n\n    BooleanQuery bq2 = null;\n    if (rw2 instanceof BooleanQuery) {\n        bq2 = (BooleanQuery) rw2;\n    } else {\n      fail(\"Rewrite\");\n    }\n\n    assertEquals(\"Number of Clauses Mismatch\", bq1.getClauses().length,\n                 bq2.getClauses().length);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8d5d5d01971db56e42e46bab598333d06971616c","date":1093898974,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestBooleanPrefixQuery#testMethod().mjava","pathOld":"src/test/org/apache/lucene/search/TestBooleanPrefixQuery#testMethod().mjava","sourceNew":"  public void testMethod() {\n    RAMDirectory directory = new RAMDirectory();\n\n    String[] categories = new String[]{\"food\",\n                                       \"foodanddrink\",\n                                       \"foodanddrinkandgoodtimes\",\n                                       \"food and drink\"};\n\n    Query rw1 = null;\n    Query rw2 = null;\n    try {\n      IndexWriter writer = new IndexWriter(directory, new\n                                           WhitespaceAnalyzer(), true);\n      for (int i = 0; i < categories.length; i++) {\n        Document doc = new Document();\n        doc.add(Field.Keyword(\"category\", categories[i]));\n        writer.addDocument(doc);\n      }\n      writer.close();\n      \n      IndexReader reader = IndexReader.open(directory);\n      PrefixQuery query = new PrefixQuery(new Term(\"category\", \"foo\"));\n      \n      rw1 = query.rewrite(reader);\n      \n      BooleanQuery bq = new BooleanQuery();\n      bq.add(query, BooleanClause.Occur.MUST);\n      \n      rw2 = bq.rewrite(reader);\n    } catch (IOException e) {\n      fail(e.getMessage());\n    }\n\n    BooleanQuery bq1 = null;\n    if (rw1 instanceof BooleanQuery) {\n      bq1 = (BooleanQuery) rw1;\n    }\n\n    BooleanQuery bq2 = null;\n    if (rw2 instanceof BooleanQuery) {\n        bq2 = (BooleanQuery) rw2;\n    } else {\n      fail(\"Rewrite\");\n    }\n\n    assertEquals(\"Number of Clauses Mismatch\", bq1.getClauses().length,\n                 bq2.getClauses().length);\n  }\n\n","sourceOld":"  public void testMethod() {\n    RAMDirectory directory = new RAMDirectory();\n\n    String[] categories = new String[]{\"food\",\n                                       \"foodanddrink\",\n                                       \"foodanddrinkandgoodtimes\",\n                                       \"food and drink\"};\n\n    Query rw1 = null;\n    Query rw2 = null;\n    try {\n      IndexWriter writer = new IndexWriter(directory, new\n                                           WhitespaceAnalyzer(), true);\n      for (int i = 0; i < categories.length; i++) {\n        Document doc = new Document();\n        doc.add(Field.Keyword(\"category\", categories[i]));\n        writer.addDocument(doc);\n      }\n      writer.close();\n      \n      IndexReader reader = IndexReader.open(directory);\n      PrefixQuery query = new PrefixQuery(new Term(\"category\", \"foo\"));\n      \n      rw1 = query.rewrite(reader);\n      \n      BooleanQuery bq = new BooleanQuery();\n      bq.add(query, true, false);\n      \n      rw2 = bq.rewrite(reader);\n    } catch (IOException e) {\n      fail(e.getMessage());\n    }\n\n    BooleanQuery bq1 = null;\n    if (rw1 instanceof BooleanQuery) {\n      bq1 = (BooleanQuery) rw1;\n    }\n\n    BooleanQuery bq2 = null;\n    if (rw2 instanceof BooleanQuery) {\n        bq2 = (BooleanQuery) rw2;\n    } else {\n      fail(\"Rewrite\");\n    }\n\n    assertEquals(\"Number of Clauses Mismatch\", bq1.getClauses().length,\n                 bq2.getClauses().length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"408d26dbf1cc3cfec92adb60cca54f91d3838b92","date":1094508109,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestBooleanPrefixQuery#testMethod().mjava","pathOld":"src/test/org/apache/lucene/search/TestBooleanPrefixQuery#testMethod().mjava","sourceNew":"  public void testMethod() {\n    RAMDirectory directory = new RAMDirectory();\n\n    String[] categories = new String[]{\"food\",\n                                       \"foodanddrink\",\n                                       \"foodanddrinkandgoodtimes\",\n                                       \"food and drink\"};\n\n    Query rw1 = null;\n    Query rw2 = null;\n    try {\n      IndexWriter writer = new IndexWriter(directory, new\n                                           WhitespaceAnalyzer(), true);\n      for (int i = 0; i < categories.length; i++) {\n        Document doc = new Document();\n        doc.add(new Field(\"category\", categories[i], Field.Store.YES, Field.Index.UN_TOKENIZED));\n        writer.addDocument(doc);\n      }\n      writer.close();\n      \n      IndexReader reader = IndexReader.open(directory);\n      PrefixQuery query = new PrefixQuery(new Term(\"category\", \"foo\"));\n      \n      rw1 = query.rewrite(reader);\n      \n      BooleanQuery bq = new BooleanQuery();\n      bq.add(query, BooleanClause.Occur.MUST);\n      \n      rw2 = bq.rewrite(reader);\n    } catch (IOException e) {\n      fail(e.getMessage());\n    }\n\n    BooleanQuery bq1 = null;\n    if (rw1 instanceof BooleanQuery) {\n      bq1 = (BooleanQuery) rw1;\n    }\n\n    BooleanQuery bq2 = null;\n    if (rw2 instanceof BooleanQuery) {\n        bq2 = (BooleanQuery) rw2;\n    } else {\n      fail(\"Rewrite\");\n    }\n\n    assertEquals(\"Number of Clauses Mismatch\", bq1.getClauses().length,\n                 bq2.getClauses().length);\n  }\n\n","sourceOld":"  public void testMethod() {\n    RAMDirectory directory = new RAMDirectory();\n\n    String[] categories = new String[]{\"food\",\n                                       \"foodanddrink\",\n                                       \"foodanddrinkandgoodtimes\",\n                                       \"food and drink\"};\n\n    Query rw1 = null;\n    Query rw2 = null;\n    try {\n      IndexWriter writer = new IndexWriter(directory, new\n                                           WhitespaceAnalyzer(), true);\n      for (int i = 0; i < categories.length; i++) {\n        Document doc = new Document();\n        doc.add(Field.Keyword(\"category\", categories[i]));\n        writer.addDocument(doc);\n      }\n      writer.close();\n      \n      IndexReader reader = IndexReader.open(directory);\n      PrefixQuery query = new PrefixQuery(new Term(\"category\", \"foo\"));\n      \n      rw1 = query.rewrite(reader);\n      \n      BooleanQuery bq = new BooleanQuery();\n      bq.add(query, BooleanClause.Occur.MUST);\n      \n      rw2 = bq.rewrite(reader);\n    } catch (IOException e) {\n      fail(e.getMessage());\n    }\n\n    BooleanQuery bq1 = null;\n    if (rw1 instanceof BooleanQuery) {\n      bq1 = (BooleanQuery) rw1;\n    }\n\n    BooleanQuery bq2 = null;\n    if (rw2 instanceof BooleanQuery) {\n        bq2 = (BooleanQuery) rw2;\n    } else {\n      fail(\"Rewrite\");\n    }\n\n    assertEquals(\"Number of Clauses Mismatch\", bq1.getClauses().length,\n                 bq2.getClauses().length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0018e7a0579df5d3de71d0bd878322a7abef04d9","date":1202242049,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestBooleanPrefixQuery#testMethod().mjava","pathOld":"src/test/org/apache/lucene/search/TestBooleanPrefixQuery#testMethod().mjava","sourceNew":"  public void testMethod() {\n    RAMDirectory directory = new RAMDirectory();\n\n    String[] categories = new String[]{\"food\",\n                                       \"foodanddrink\",\n                                       \"foodanddrinkandgoodtimes\",\n                                       \"food and drink\"};\n\n    Query rw1 = null;\n    Query rw2 = null;\n    try {\n      IndexWriter writer = new IndexWriter(directory, new\n                                           WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      for (int i = 0; i < categories.length; i++) {\n        Document doc = new Document();\n        doc.add(new Field(\"category\", categories[i], Field.Store.YES, Field.Index.UN_TOKENIZED));\n        writer.addDocument(doc);\n      }\n      writer.close();\n      \n      IndexReader reader = IndexReader.open(directory);\n      PrefixQuery query = new PrefixQuery(new Term(\"category\", \"foo\"));\n      \n      rw1 = query.rewrite(reader);\n      \n      BooleanQuery bq = new BooleanQuery();\n      bq.add(query, BooleanClause.Occur.MUST);\n      \n      rw2 = bq.rewrite(reader);\n    } catch (IOException e) {\n      fail(e.getMessage());\n    }\n\n    BooleanQuery bq1 = null;\n    if (rw1 instanceof BooleanQuery) {\n      bq1 = (BooleanQuery) rw1;\n    }\n\n    BooleanQuery bq2 = null;\n    if (rw2 instanceof BooleanQuery) {\n        bq2 = (BooleanQuery) rw2;\n    } else {\n      fail(\"Rewrite\");\n    }\n\n    assertEquals(\"Number of Clauses Mismatch\", bq1.getClauses().length,\n                 bq2.getClauses().length);\n  }\n\n","sourceOld":"  public void testMethod() {\n    RAMDirectory directory = new RAMDirectory();\n\n    String[] categories = new String[]{\"food\",\n                                       \"foodanddrink\",\n                                       \"foodanddrinkandgoodtimes\",\n                                       \"food and drink\"};\n\n    Query rw1 = null;\n    Query rw2 = null;\n    try {\n      IndexWriter writer = new IndexWriter(directory, new\n                                           WhitespaceAnalyzer(), true);\n      for (int i = 0; i < categories.length; i++) {\n        Document doc = new Document();\n        doc.add(new Field(\"category\", categories[i], Field.Store.YES, Field.Index.UN_TOKENIZED));\n        writer.addDocument(doc);\n      }\n      writer.close();\n      \n      IndexReader reader = IndexReader.open(directory);\n      PrefixQuery query = new PrefixQuery(new Term(\"category\", \"foo\"));\n      \n      rw1 = query.rewrite(reader);\n      \n      BooleanQuery bq = new BooleanQuery();\n      bq.add(query, BooleanClause.Occur.MUST);\n      \n      rw2 = bq.rewrite(reader);\n    } catch (IOException e) {\n      fail(e.getMessage());\n    }\n\n    BooleanQuery bq1 = null;\n    if (rw1 instanceof BooleanQuery) {\n      bq1 = (BooleanQuery) rw1;\n    }\n\n    BooleanQuery bq2 = null;\n    if (rw2 instanceof BooleanQuery) {\n        bq2 = (BooleanQuery) rw2;\n    } else {\n      fail(\"Rewrite\");\n    }\n\n    assertEquals(\"Number of Clauses Mismatch\", bq1.getClauses().length,\n                 bq2.getClauses().length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a","date":1221082732,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestBooleanPrefixQuery#testMethod().mjava","pathOld":"src/test/org/apache/lucene/search/TestBooleanPrefixQuery#testMethod().mjava","sourceNew":"  public void testMethod() {\n    RAMDirectory directory = new RAMDirectory();\n\n    String[] categories = new String[]{\"food\",\n                                       \"foodanddrink\",\n                                       \"foodanddrinkandgoodtimes\",\n                                       \"food and drink\"};\n\n    Query rw1 = null;\n    Query rw2 = null;\n    try {\n      IndexWriter writer = new IndexWriter(directory, new\n                                           WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      for (int i = 0; i < categories.length; i++) {\n        Document doc = new Document();\n        doc.add(new Field(\"category\", categories[i], Field.Store.YES, Field.Index.NOT_ANALYZED));\n        writer.addDocument(doc);\n      }\n      writer.close();\n      \n      IndexReader reader = IndexReader.open(directory);\n      PrefixQuery query = new PrefixQuery(new Term(\"category\", \"foo\"));\n      \n      rw1 = query.rewrite(reader);\n      \n      BooleanQuery bq = new BooleanQuery();\n      bq.add(query, BooleanClause.Occur.MUST);\n      \n      rw2 = bq.rewrite(reader);\n    } catch (IOException e) {\n      fail(e.getMessage());\n    }\n\n    BooleanQuery bq1 = null;\n    if (rw1 instanceof BooleanQuery) {\n      bq1 = (BooleanQuery) rw1;\n    }\n\n    BooleanQuery bq2 = null;\n    if (rw2 instanceof BooleanQuery) {\n        bq2 = (BooleanQuery) rw2;\n    } else {\n      fail(\"Rewrite\");\n    }\n\n    assertEquals(\"Number of Clauses Mismatch\", bq1.getClauses().length,\n                 bq2.getClauses().length);\n  }\n\n","sourceOld":"  public void testMethod() {\n    RAMDirectory directory = new RAMDirectory();\n\n    String[] categories = new String[]{\"food\",\n                                       \"foodanddrink\",\n                                       \"foodanddrinkandgoodtimes\",\n                                       \"food and drink\"};\n\n    Query rw1 = null;\n    Query rw2 = null;\n    try {\n      IndexWriter writer = new IndexWriter(directory, new\n                                           WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      for (int i = 0; i < categories.length; i++) {\n        Document doc = new Document();\n        doc.add(new Field(\"category\", categories[i], Field.Store.YES, Field.Index.UN_TOKENIZED));\n        writer.addDocument(doc);\n      }\n      writer.close();\n      \n      IndexReader reader = IndexReader.open(directory);\n      PrefixQuery query = new PrefixQuery(new Term(\"category\", \"foo\"));\n      \n      rw1 = query.rewrite(reader);\n      \n      BooleanQuery bq = new BooleanQuery();\n      bq.add(query, BooleanClause.Occur.MUST);\n      \n      rw2 = bq.rewrite(reader);\n    } catch (IOException e) {\n      fail(e.getMessage());\n    }\n\n    BooleanQuery bq1 = null;\n    if (rw1 instanceof BooleanQuery) {\n      bq1 = (BooleanQuery) rw1;\n    }\n\n    BooleanQuery bq2 = null;\n    if (rw2 instanceof BooleanQuery) {\n        bq2 = (BooleanQuery) rw2;\n    } else {\n      fail(\"Rewrite\");\n    }\n\n    assertEquals(\"Number of Clauses Mismatch\", bq1.getClauses().length,\n                 bq2.getClauses().length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1cb8eb5689f8bf390467364fa504dd74603fdeb4","date":1251392247,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestBooleanPrefixQuery#testMethod().mjava","pathOld":"src/test/org/apache/lucene/search/TestBooleanPrefixQuery#testMethod().mjava","sourceNew":"  public void testMethod() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n\n    String[] categories = new String[]{\"food\",\n                                       \"foodanddrink\",\n                                       \"foodanddrinkandgoodtimes\",\n                                       \"food and drink\"};\n\n    Query rw1 = null;\n    Query rw2 = null;\n    IndexReader reader = null;\n    try {\n      IndexWriter writer = new IndexWriter(directory, new\n                                           WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      for (int i = 0; i < categories.length; i++) {\n        Document doc = new Document();\n        doc.add(new Field(\"category\", categories[i], Field.Store.YES, Field.Index.NOT_ANALYZED));\n        writer.addDocument(doc);\n      }\n      writer.close();\n      \n      reader = IndexReader.open(directory);\n      PrefixQuery query = new PrefixQuery(new Term(\"category\", \"foo\"));\n      rw1 = query.rewrite(reader);\n      \n      BooleanQuery bq = new BooleanQuery();\n      bq.add(query, BooleanClause.Occur.MUST);\n      \n      rw2 = bq.rewrite(reader);\n    } catch (IOException e) {\n      fail(e.getMessage());\n    }\n\n    assertEquals(\"Number of Clauses Mismatch\", getCount(reader, rw1), getCount(reader, rw2));\n  }\n\n","sourceOld":"  public void testMethod() {\n    RAMDirectory directory = new RAMDirectory();\n\n    String[] categories = new String[]{\"food\",\n                                       \"foodanddrink\",\n                                       \"foodanddrinkandgoodtimes\",\n                                       \"food and drink\"};\n\n    Query rw1 = null;\n    Query rw2 = null;\n    try {\n      IndexWriter writer = new IndexWriter(directory, new\n                                           WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      for (int i = 0; i < categories.length; i++) {\n        Document doc = new Document();\n        doc.add(new Field(\"category\", categories[i], Field.Store.YES, Field.Index.NOT_ANALYZED));\n        writer.addDocument(doc);\n      }\n      writer.close();\n      \n      IndexReader reader = IndexReader.open(directory);\n      PrefixQuery query = new PrefixQuery(new Term(\"category\", \"foo\"));\n      \n      rw1 = query.rewrite(reader);\n      \n      BooleanQuery bq = new BooleanQuery();\n      bq.add(query, BooleanClause.Occur.MUST);\n      \n      rw2 = bq.rewrite(reader);\n    } catch (IOException e) {\n      fail(e.getMessage());\n    }\n\n    BooleanQuery bq1 = null;\n    if (rw1 instanceof BooleanQuery) {\n      bq1 = (BooleanQuery) rw1;\n    }\n\n    BooleanQuery bq2 = null;\n    if (rw2 instanceof BooleanQuery) {\n        bq2 = (BooleanQuery) rw2;\n    } else {\n      fail(\"Rewrite\");\n    }\n\n    assertEquals(\"Number of Clauses Mismatch\", bq1.getClauses().length,\n                 bq2.getClauses().length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e8d1458a2543cbd30cbfe7929be4dcb5c5251659","date":1254582241,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestBooleanPrefixQuery#testMethod().mjava","pathOld":"src/test/org/apache/lucene/search/TestBooleanPrefixQuery#testMethod().mjava","sourceNew":"  public void testMethod() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n\n    String[] categories = new String[]{\"food\",\n                                       \"foodanddrink\",\n                                       \"foodanddrinkandgoodtimes\",\n                                       \"food and drink\"};\n\n    Query rw1 = null;\n    Query rw2 = null;\n    IndexReader reader = null;\n    try {\n      IndexWriter writer = new IndexWriter(directory, new\n                                           WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      for (int i = 0; i < categories.length; i++) {\n        Document doc = new Document();\n        doc.add(new Field(\"category\", categories[i], Field.Store.YES, Field.Index.NOT_ANALYZED));\n        writer.addDocument(doc);\n      }\n      writer.close();\n      \n      reader = IndexReader.open(directory, true);\n      PrefixQuery query = new PrefixQuery(new Term(\"category\", \"foo\"));\n      rw1 = query.rewrite(reader);\n      \n      BooleanQuery bq = new BooleanQuery();\n      bq.add(query, BooleanClause.Occur.MUST);\n      \n      rw2 = bq.rewrite(reader);\n    } catch (IOException e) {\n      fail(e.getMessage());\n    }\n\n    assertEquals(\"Number of Clauses Mismatch\", getCount(reader, rw1), getCount(reader, rw2));\n  }\n\n","sourceOld":"  public void testMethod() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n\n    String[] categories = new String[]{\"food\",\n                                       \"foodanddrink\",\n                                       \"foodanddrinkandgoodtimes\",\n                                       \"food and drink\"};\n\n    Query rw1 = null;\n    Query rw2 = null;\n    IndexReader reader = null;\n    try {\n      IndexWriter writer = new IndexWriter(directory, new\n                                           WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      for (int i = 0; i < categories.length; i++) {\n        Document doc = new Document();\n        doc.add(new Field(\"category\", categories[i], Field.Store.YES, Field.Index.NOT_ANALYZED));\n        writer.addDocument(doc);\n      }\n      writer.close();\n      \n      reader = IndexReader.open(directory);\n      PrefixQuery query = new PrefixQuery(new Term(\"category\", \"foo\"));\n      rw1 = query.rewrite(reader);\n      \n      BooleanQuery bq = new BooleanQuery();\n      bq.add(query, BooleanClause.Occur.MUST);\n      \n      rw2 = bq.rewrite(reader);\n    } catch (IOException e) {\n      fail(e.getMessage());\n    }\n\n    assertEquals(\"Number of Clauses Mismatch\", getCount(reader, rw1), getCount(reader, rw2));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a046c0c310bc77931fc8441bd920053b607dd14","date":1254584734,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"src/test/org/apache/lucene/search/TestBooleanPrefixQuery#testMethod().mjava","pathOld":"src/test/org/apache/lucene/search/TestBooleanPrefixQuery#testMethod().mjava","sourceNew":"  public void testMethod() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n\n    String[] categories = new String[]{\"food\",\n                                       \"foodanddrink\",\n                                       \"foodanddrinkandgoodtimes\",\n                                       \"food and drink\"};\n\n    Query rw1 = null;\n    Query rw2 = null;\n    IndexReader reader = null;\n    try {\n      IndexWriter writer = new IndexWriter(directory, new\n                                           WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      for (int i = 0; i < categories.length; i++) {\n        Document doc = new Document();\n        doc.add(new Field(\"category\", categories[i], Field.Store.YES, Field.Index.NOT_ANALYZED));\n        writer.addDocument(doc);\n      }\n      writer.close();\n      \n      reader = IndexReader.open(directory, true);\n      PrefixQuery query = new PrefixQuery(new Term(\"category\", \"foo\"));\n      rw1 = query.rewrite(reader);\n      \n      BooleanQuery bq = new BooleanQuery();\n      bq.add(query, BooleanClause.Occur.MUST);\n      \n      rw2 = bq.rewrite(reader);\n    } catch (IOException e) {\n      fail(e.getMessage());\n    }\n\n    assertEquals(\"Number of Clauses Mismatch\", getCount(reader, rw1), getCount(reader, rw2));\n  }\n\n","sourceOld":"  public void testMethod() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n\n    String[] categories = new String[]{\"food\",\n                                       \"foodanddrink\",\n                                       \"foodanddrinkandgoodtimes\",\n                                       \"food and drink\"};\n\n    Query rw1 = null;\n    Query rw2 = null;\n    IndexReader reader = null;\n    try {\n      IndexWriter writer = new IndexWriter(directory, new\n                                           WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      for (int i = 0; i < categories.length; i++) {\n        Document doc = new Document();\n        doc.add(new Field(\"category\", categories[i], Field.Store.YES, Field.Index.NOT_ANALYZED));\n        writer.addDocument(doc);\n      }\n      writer.close();\n      \n      reader = IndexReader.open(directory);\n      PrefixQuery query = new PrefixQuery(new Term(\"category\", \"foo\"));\n      rw1 = query.rewrite(reader);\n      \n      BooleanQuery bq = new BooleanQuery();\n      bq.add(query, BooleanClause.Occur.MUST);\n      \n      rw2 = bq.rewrite(reader);\n    } catch (IOException e) {\n      fail(e.getMessage());\n    }\n\n    assertEquals(\"Number of Clauses Mismatch\", getCount(reader, rw1), getCount(reader, rw2));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe0932c1d340f83fb0a611e5829b3046a1cc1152","date":1264946739,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestBooleanPrefixQuery#testMethod().mjava","pathOld":"src/test/org/apache/lucene/search/TestBooleanPrefixQuery#testMethod().mjava","sourceNew":"  public void testMethod() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n\n    String[] categories = new String[]{\"food\",\n                                       \"foodanddrink\",\n                                       \"foodanddrinkandgoodtimes\",\n                                       \"food and drink\"};\n\n    Query rw1 = null;\n    Query rw2 = null;\n    IndexReader reader = null;\n    try {\n      IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n      for (int i = 0; i < categories.length; i++) {\n        Document doc = new Document();\n        doc.add(new Field(\"category\", categories[i], Field.Store.YES, Field.Index.NOT_ANALYZED));\n        writer.addDocument(doc);\n      }\n      writer.close();\n      \n      reader = IndexReader.open(directory, true);\n      PrefixQuery query = new PrefixQuery(new Term(\"category\", \"foo\"));\n      rw1 = query.rewrite(reader);\n      \n      BooleanQuery bq = new BooleanQuery();\n      bq.add(query, BooleanClause.Occur.MUST);\n      \n      rw2 = bq.rewrite(reader);\n    } catch (IOException e) {\n      fail(e.getMessage());\n    }\n\n    assertEquals(\"Number of Clauses Mismatch\", getCount(reader, rw1), getCount(reader, rw2));\n  }\n\n","sourceOld":"  public void testMethod() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n\n    String[] categories = new String[]{\"food\",\n                                       \"foodanddrink\",\n                                       \"foodanddrinkandgoodtimes\",\n                                       \"food and drink\"};\n\n    Query rw1 = null;\n    Query rw2 = null;\n    IndexReader reader = null;\n    try {\n      IndexWriter writer = new IndexWriter(directory, new\n                                           WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      for (int i = 0; i < categories.length; i++) {\n        Document doc = new Document();\n        doc.add(new Field(\"category\", categories[i], Field.Store.YES, Field.Index.NOT_ANALYZED));\n        writer.addDocument(doc);\n      }\n      writer.close();\n      \n      reader = IndexReader.open(directory, true);\n      PrefixQuery query = new PrefixQuery(new Term(\"category\", \"foo\"));\n      rw1 = query.rewrite(reader);\n      \n      BooleanQuery bq = new BooleanQuery();\n      bq.add(query, BooleanClause.Occur.MUST);\n      \n      rw2 = bq.rewrite(reader);\n    } catch (IOException e) {\n      fail(e.getMessage());\n    }\n\n    assertEquals(\"Number of Clauses Mismatch\", getCount(reader, rw1), getCount(reader, rw2));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6","date":1265808957,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestBooleanPrefixQuery#testMethod().mjava","pathOld":"src/test/org/apache/lucene/search/TestBooleanPrefixQuery#testMethod().mjava","sourceNew":"  public void testMethod() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n\n    String[] categories = new String[]{\"food\",\n                                       \"foodanddrink\",\n                                       \"foodanddrinkandgoodtimes\",\n                                       \"food and drink\"};\n\n    Query rw1 = null;\n    Query rw2 = null;\n    IndexReader reader = null;\n    try {\n      IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n      for (int i = 0; i < categories.length; i++) {\n        Document doc = new Document();\n        doc.add(new Field(\"category\", categories[i], Field.Store.YES, Field.Index.NOT_ANALYZED));\n        writer.addDocument(doc);\n      }\n      writer.close();\n      \n      reader = IndexReader.open(directory, true);\n      PrefixQuery query = new PrefixQuery(new Term(\"category\", \"foo\"));\n      rw1 = query.rewrite(reader);\n      \n      BooleanQuery bq = new BooleanQuery();\n      bq.add(query, BooleanClause.Occur.MUST);\n      \n      rw2 = bq.rewrite(reader);\n    } catch (IOException e) {\n      fail(e.getMessage());\n    }\n\n    assertEquals(\"Number of Clauses Mismatch\", getCount(reader, rw1), getCount(reader, rw2));\n  }\n\n","sourceOld":"  public void testMethod() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n\n    String[] categories = new String[]{\"food\",\n                                       \"foodanddrink\",\n                                       \"foodanddrinkandgoodtimes\",\n                                       \"food and drink\"};\n\n    Query rw1 = null;\n    Query rw2 = null;\n    IndexReader reader = null;\n    try {\n      IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n      for (int i = 0; i < categories.length; i++) {\n        Document doc = new Document();\n        doc.add(new Field(\"category\", categories[i], Field.Store.YES, Field.Index.NOT_ANALYZED));\n        writer.addDocument(doc);\n      }\n      writer.close();\n      \n      reader = IndexReader.open(directory, true);\n      PrefixQuery query = new PrefixQuery(new Term(\"category\", \"foo\"));\n      rw1 = query.rewrite(reader);\n      \n      BooleanQuery bq = new BooleanQuery();\n      bq.add(query, BooleanClause.Occur.MUST);\n      \n      rw2 = bq.rewrite(reader);\n    } catch (IOException e) {\n      fail(e.getMessage());\n    }\n\n    assertEquals(\"Number of Clauses Mismatch\", getCount(reader, rw1), getCount(reader, rw2));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestBooleanPrefixQuery#testMethod().mjava","pathOld":"src/test/org/apache/lucene/search/TestBooleanPrefixQuery#testMethod().mjava","sourceNew":"  public void testMethod() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n\n    String[] categories = new String[]{\"food\",\n                                       \"foodanddrink\",\n                                       \"foodanddrinkandgoodtimes\",\n                                       \"food and drink\"};\n\n    Query rw1 = null;\n    Query rw2 = null;\n    IndexReader reader = null;\n    try {\n      IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT));\n      for (int i = 0; i < categories.length; i++) {\n        Document doc = new Document();\n        doc.add(new Field(\"category\", categories[i], Field.Store.YES, Field.Index.NOT_ANALYZED));\n        writer.addDocument(doc);\n      }\n      writer.close();\n      \n      reader = IndexReader.open(directory, true);\n      PrefixQuery query = new PrefixQuery(new Term(\"category\", \"foo\"));\n      rw1 = query.rewrite(reader);\n      \n      BooleanQuery bq = new BooleanQuery();\n      bq.add(query, BooleanClause.Occur.MUST);\n      \n      rw2 = bq.rewrite(reader);\n    } catch (IOException e) {\n      fail(e.getMessage());\n    }\n\n    assertEquals(\"Number of Clauses Mismatch\", getCount(reader, rw1), getCount(reader, rw2));\n  }\n\n","sourceOld":"  public void testMethod() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n\n    String[] categories = new String[]{\"food\",\n                                       \"foodanddrink\",\n                                       \"foodanddrinkandgoodtimes\",\n                                       \"food and drink\"};\n\n    Query rw1 = null;\n    Query rw2 = null;\n    IndexReader reader = null;\n    try {\n      IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n      for (int i = 0; i < categories.length; i++) {\n        Document doc = new Document();\n        doc.add(new Field(\"category\", categories[i], Field.Store.YES, Field.Index.NOT_ANALYZED));\n        writer.addDocument(doc);\n      }\n      writer.close();\n      \n      reader = IndexReader.open(directory, true);\n      PrefixQuery query = new PrefixQuery(new Term(\"category\", \"foo\"));\n      rw1 = query.rewrite(reader);\n      \n      BooleanQuery bq = new BooleanQuery();\n      bq.add(query, BooleanClause.Occur.MUST);\n      \n      rw2 = bq.rewrite(reader);\n    } catch (IOException e) {\n      fail(e.getMessage());\n    }\n\n    assertEquals(\"Number of Clauses Mismatch\", getCount(reader, rw1), getCount(reader, rw2));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestBooleanPrefixQuery#testMethod().mjava","pathOld":"src/test/org/apache/lucene/search/TestBooleanPrefixQuery#testMethod().mjava","sourceNew":"  public void testMethod() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n\n    String[] categories = new String[]{\"food\",\n                                       \"foodanddrink\",\n                                       \"foodanddrinkandgoodtimes\",\n                                       \"food and drink\"};\n\n    Query rw1 = null;\n    Query rw2 = null;\n    IndexReader reader = null;\n    try {\n      IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n      for (int i = 0; i < categories.length; i++) {\n        Document doc = new Document();\n        doc.add(new Field(\"category\", categories[i], Field.Store.YES, Field.Index.NOT_ANALYZED));\n        writer.addDocument(doc);\n      }\n      writer.close();\n      \n      reader = IndexReader.open(directory, true);\n      PrefixQuery query = new PrefixQuery(new Term(\"category\", \"foo\"));\n      rw1 = query.rewrite(reader);\n      \n      BooleanQuery bq = new BooleanQuery();\n      bq.add(query, BooleanClause.Occur.MUST);\n      \n      rw2 = bq.rewrite(reader);\n    } catch (IOException e) {\n      fail(e.getMessage());\n    }\n\n    assertEquals(\"Number of Clauses Mismatch\", getCount(reader, rw1), getCount(reader, rw2));\n  }\n\n","sourceOld":"  public void testMethod() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n\n    String[] categories = new String[]{\"food\",\n                                       \"foodanddrink\",\n                                       \"foodanddrinkandgoodtimes\",\n                                       \"food and drink\"};\n\n    Query rw1 = null;\n    Query rw2 = null;\n    IndexReader reader = null;\n    try {\n      IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT));\n      for (int i = 0; i < categories.length; i++) {\n        Document doc = new Document();\n        doc.add(new Field(\"category\", categories[i], Field.Store.YES, Field.Index.NOT_ANALYZED));\n        writer.addDocument(doc);\n      }\n      writer.close();\n      \n      reader = IndexReader.open(directory, true);\n      PrefixQuery query = new PrefixQuery(new Term(\"category\", \"foo\"));\n      rw1 = query.rewrite(reader);\n      \n      BooleanQuery bq = new BooleanQuery();\n      bq.add(query, BooleanClause.Occur.MUST);\n      \n      rw2 = bq.rewrite(reader);\n    } catch (IOException e) {\n      fail(e.getMessage());\n    }\n\n    assertEquals(\"Number of Clauses Mismatch\", getCount(reader, rw1), getCount(reader, rw2));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestBooleanPrefixQuery#testMethod().mjava","pathOld":"src/test/org/apache/lucene/search/TestBooleanPrefixQuery#testMethod().mjava","sourceNew":"  public void testMethod() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n\n    String[] categories = new String[]{\"food\",\n                                       \"foodanddrink\",\n                                       \"foodanddrinkandgoodtimes\",\n                                       \"food and drink\"};\n\n    Query rw1 = null;\n    Query rw2 = null;\n    IndexReader reader = null;\n    try {\n      IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n      for (int i = 0; i < categories.length; i++) {\n        Document doc = new Document();\n        doc.add(new Field(\"category\", categories[i], Field.Store.YES, Field.Index.NOT_ANALYZED));\n        writer.addDocument(doc);\n      }\n      writer.close();\n      \n      reader = IndexReader.open(directory, true);\n      PrefixQuery query = new PrefixQuery(new Term(\"category\", \"foo\"));\n      rw1 = query.rewrite(reader);\n      \n      BooleanQuery bq = new BooleanQuery();\n      bq.add(query, BooleanClause.Occur.MUST);\n      \n      rw2 = bq.rewrite(reader);\n    } catch (IOException e) {\n      fail(e.getMessage());\n    }\n\n    assertEquals(\"Number of Clauses Mismatch\", getCount(reader, rw1), getCount(reader, rw2));\n  }\n\n","sourceOld":"  public void testMethod() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n\n    String[] categories = new String[]{\"food\",\n                                       \"foodanddrink\",\n                                       \"foodanddrinkandgoodtimes\",\n                                       \"food and drink\"};\n\n    Query rw1 = null;\n    Query rw2 = null;\n    IndexReader reader = null;\n    try {\n      IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n      for (int i = 0; i < categories.length; i++) {\n        Document doc = new Document();\n        doc.add(new Field(\"category\", categories[i], Field.Store.YES, Field.Index.NOT_ANALYZED));\n        writer.addDocument(doc);\n      }\n      writer.close();\n      \n      reader = IndexReader.open(directory, true);\n      PrefixQuery query = new PrefixQuery(new Term(\"category\", \"foo\"));\n      rw1 = query.rewrite(reader);\n      \n      BooleanQuery bq = new BooleanQuery();\n      bq.add(query, BooleanClause.Occur.MUST);\n      \n      rw2 = bq.rewrite(reader);\n    } catch (IOException e) {\n      fail(e.getMessage());\n    }\n\n    assertEquals(\"Number of Clauses Mismatch\", getCount(reader, rw1), getCount(reader, rw2));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestBooleanPrefixQuery#testMethod().mjava","pathOld":"src/test/org/apache/lucene/search/TestBooleanPrefixQuery#testMethod().mjava","sourceNew":"  public void testMethod() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n\n    String[] categories = new String[]{\"food\",\n                                       \"foodanddrink\",\n                                       \"foodanddrinkandgoodtimes\",\n                                       \"food and drink\"};\n\n    Query rw1 = null;\n    Query rw2 = null;\n    IndexReader reader = null;\n    try {\n      IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n      for (int i = 0; i < categories.length; i++) {\n        Document doc = new Document();\n        doc.add(new Field(\"category\", categories[i], Field.Store.YES, Field.Index.NOT_ANALYZED));\n        writer.addDocument(doc);\n      }\n      writer.close();\n      \n      reader = IndexReader.open(directory, true);\n      PrefixQuery query = new PrefixQuery(new Term(\"category\", \"foo\"));\n      rw1 = query.rewrite(reader);\n      \n      BooleanQuery bq = new BooleanQuery();\n      bq.add(query, BooleanClause.Occur.MUST);\n      \n      rw2 = bq.rewrite(reader);\n    } catch (IOException e) {\n      fail(e.getMessage());\n    }\n\n    assertEquals(\"Number of Clauses Mismatch\", getCount(reader, rw1), getCount(reader, rw2));\n  }\n\n","sourceOld":"  public void testMethod() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n\n    String[] categories = new String[]{\"food\",\n                                       \"foodanddrink\",\n                                       \"foodanddrinkandgoodtimes\",\n                                       \"food and drink\"};\n\n    Query rw1 = null;\n    Query rw2 = null;\n    IndexReader reader = null;\n    try {\n      IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n      for (int i = 0; i < categories.length; i++) {\n        Document doc = new Document();\n        doc.add(new Field(\"category\", categories[i], Field.Store.YES, Field.Index.NOT_ANALYZED));\n        writer.addDocument(doc);\n      }\n      writer.close();\n      \n      reader = IndexReader.open(directory, true);\n      PrefixQuery query = new PrefixQuery(new Term(\"category\", \"foo\"));\n      rw1 = query.rewrite(reader);\n      \n      BooleanQuery bq = new BooleanQuery();\n      bq.add(query, BooleanClause.Occur.MUST);\n      \n      rw2 = bq.rewrite(reader);\n    } catch (IOException e) {\n      fail(e.getMessage());\n    }\n\n    assertEquals(\"Number of Clauses Mismatch\", getCount(reader, rw1), getCount(reader, rw2));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1cb8eb5689f8bf390467364fa504dd74603fdeb4":["b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"0a046c0c310bc77931fc8441bd920053b607dd14":["1cb8eb5689f8bf390467364fa504dd74603fdeb4","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"c964249f3bde77675cca03c33360c076896b9e90":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a":["0018e7a0579df5d3de71d0bd878322a7abef04d9"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"0018e7a0579df5d3de71d0bd878322a7abef04d9":["408d26dbf1cc3cfec92adb60cca54f91d3838b92"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"8d5d5d01971db56e42e46bab598333d06971616c":["c964249f3bde77675cca03c33360c076896b9e90"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["1cb8eb5689f8bf390467364fa504dd74603fdeb4"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["0a046c0c310bc77931fc8441bd920053b607dd14"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"408d26dbf1cc3cfec92adb60cca54f91d3838b92":["8d5d5d01971db56e42e46bab598333d06971616c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"]},"commit2Childs":{"1cb8eb5689f8bf390467364fa504dd74603fdeb4":["0a046c0c310bc77931fc8441bd920053b607dd14","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"0a046c0c310bc77931fc8441bd920053b607dd14":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"c964249f3bde77675cca03c33360c076896b9e90":["8d5d5d01971db56e42e46bab598333d06971616c"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a":["1cb8eb5689f8bf390467364fa504dd74603fdeb4"],"0018e7a0579df5d3de71d0bd878322a7abef04d9":["b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"8d5d5d01971db56e42e46bab598333d06971616c":["408d26dbf1cc3cfec92adb60cca54f91d3838b92"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["0a046c0c310bc77931fc8441bd920053b607dd14"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c964249f3bde77675cca03c33360c076896b9e90"],"408d26dbf1cc3cfec92adb60cca54f91d3838b92":["0018e7a0579df5d3de71d0bd878322a7abef04d9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}