{"path":"solr/core/src/test/org/apache/solr/handler/component/TestHttpShardHandlerFactory#testLoadBalancerRequestsMinMax().mjava","commits":[{"id":"ec1fd3cd1aa9782d426f1d542ff0a618ce9bbe10","date":1495727205,"type":0,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/TestHttpShardHandlerFactory#testLoadBalancerRequestsMinMax().mjava","pathOld":"/dev/null","sourceNew":"  public void testLoadBalancerRequestsMinMax() throws Exception {\n    final Path home = Paths.get(TEST_HOME());\n    CoreContainer cc = null;\n    ShardHandlerFactory factory = null;\n    try {\n      cc = CoreContainer.createAndLoad(home, home.resolve(\"solr-shardhandler-loadBalancerRequests.xml\"));\n      factory = cc.getShardHandlerFactory();\n\n      // test that factory is HttpShardHandlerFactory with expected url reserve fraction\n      assertTrue(factory instanceof HttpShardHandlerFactory);\n      final HttpShardHandlerFactory httpShardHandlerFactory = ((HttpShardHandlerFactory)factory);\n      assertEquals(expectedLoadBalancerRequestsMinimumAbsolute, httpShardHandlerFactory.permittedLoadBalancerRequestsMinimumAbsolute, 0.0);\n      assertEquals(expectedLoadBalancerRequestsMaximumFraction, httpShardHandlerFactory.permittedLoadBalancerRequestsMaximumFraction, 0.0);\n\n      // create a dummy request and dummy url list\n      final QueryRequest queryRequest = null;\n      final List<String> urls = new ArrayList<>();\n      for (int ii=0; ii<10; ++ii) {\n        urls.add(null);\n      }\n\n      // create LBHttpSolrClient request\n      final LBHttpSolrClient.Req req = httpShardHandlerFactory.newLBHttpSolrClientReq(queryRequest, urls);\n\n      // actual vs. expected test\n      final int actualNumServersToTry = req.getNumServersToTry().intValue();\n      int expectedNumServersToTry = (int)Math.floor(urls.size() * expectedLoadBalancerRequestsMaximumFraction);\n      if (expectedNumServersToTry < expectedLoadBalancerRequestsMinimumAbsolute) {\n        expectedNumServersToTry = expectedLoadBalancerRequestsMinimumAbsolute;\n      }\n      assertEquals(\"wrong numServersToTry for\"\n          + \" urls.size=\"+urls.size()\n          + \" expectedLoadBalancerRequestsMinimumAbsolute=\"+expectedLoadBalancerRequestsMinimumAbsolute\n          + \" expectedLoadBalancerRequestsMaximumFraction=\"+expectedLoadBalancerRequestsMaximumFraction,\n          expectedNumServersToTry,\n          actualNumServersToTry);\n\n    } finally {\n      if (factory != null) factory.close();\n      if (cc != null) cc.shutdown();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d1f5728f32a4a256b36cfabd7a2636452f599bb9","date":1496231774,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/TestHttpShardHandlerFactory#testLoadBalancerRequestsMinMax().mjava","pathOld":"/dev/null","sourceNew":"  public void testLoadBalancerRequestsMinMax() throws Exception {\n    final Path home = Paths.get(TEST_HOME());\n    CoreContainer cc = null;\n    ShardHandlerFactory factory = null;\n    try {\n      cc = CoreContainer.createAndLoad(home, home.resolve(\"solr-shardhandler-loadBalancerRequests.xml\"));\n      factory = cc.getShardHandlerFactory();\n\n      // test that factory is HttpShardHandlerFactory with expected url reserve fraction\n      assertTrue(factory instanceof HttpShardHandlerFactory);\n      final HttpShardHandlerFactory httpShardHandlerFactory = ((HttpShardHandlerFactory)factory);\n      assertEquals(expectedLoadBalancerRequestsMinimumAbsolute, httpShardHandlerFactory.permittedLoadBalancerRequestsMinimumAbsolute, 0.0);\n      assertEquals(expectedLoadBalancerRequestsMaximumFraction, httpShardHandlerFactory.permittedLoadBalancerRequestsMaximumFraction, 0.0);\n\n      // create a dummy request and dummy url list\n      final QueryRequest queryRequest = null;\n      final List<String> urls = new ArrayList<>();\n      for (int ii=0; ii<10; ++ii) {\n        urls.add(null);\n      }\n\n      // create LBHttpSolrClient request\n      final LBHttpSolrClient.Req req = httpShardHandlerFactory.newLBHttpSolrClientReq(queryRequest, urls);\n\n      // actual vs. expected test\n      final int actualNumServersToTry = req.getNumServersToTry().intValue();\n      int expectedNumServersToTry = (int)Math.floor(urls.size() * expectedLoadBalancerRequestsMaximumFraction);\n      if (expectedNumServersToTry < expectedLoadBalancerRequestsMinimumAbsolute) {\n        expectedNumServersToTry = expectedLoadBalancerRequestsMinimumAbsolute;\n      }\n      assertEquals(\"wrong numServersToTry for\"\n          + \" urls.size=\"+urls.size()\n          + \" expectedLoadBalancerRequestsMinimumAbsolute=\"+expectedLoadBalancerRequestsMinimumAbsolute\n          + \" expectedLoadBalancerRequestsMaximumFraction=\"+expectedLoadBalancerRequestsMaximumFraction,\n          expectedNumServersToTry,\n          actualNumServersToTry);\n\n    } finally {\n      if (factory != null) factory.close();\n      if (cc != null) cc.shutdown();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/TestHttpShardHandlerFactory#testLoadBalancerRequestsMinMax().mjava","pathOld":"/dev/null","sourceNew":"  public void testLoadBalancerRequestsMinMax() throws Exception {\n    final Path home = Paths.get(TEST_HOME());\n    CoreContainer cc = null;\n    ShardHandlerFactory factory = null;\n    try {\n      cc = CoreContainer.createAndLoad(home, home.resolve(\"solr-shardhandler-loadBalancerRequests.xml\"));\n      factory = cc.getShardHandlerFactory();\n\n      // test that factory is HttpShardHandlerFactory with expected url reserve fraction\n      assertTrue(factory instanceof HttpShardHandlerFactory);\n      final HttpShardHandlerFactory httpShardHandlerFactory = ((HttpShardHandlerFactory)factory);\n      assertEquals(expectedLoadBalancerRequestsMinimumAbsolute, httpShardHandlerFactory.permittedLoadBalancerRequestsMinimumAbsolute, 0.0);\n      assertEquals(expectedLoadBalancerRequestsMaximumFraction, httpShardHandlerFactory.permittedLoadBalancerRequestsMaximumFraction, 0.0);\n\n      // create a dummy request and dummy url list\n      final QueryRequest queryRequest = null;\n      final List<String> urls = new ArrayList<>();\n      for (int ii=0; ii<10; ++ii) {\n        urls.add(null);\n      }\n\n      // create LBHttpSolrClient request\n      final LBHttpSolrClient.Req req = httpShardHandlerFactory.newLBHttpSolrClientReq(queryRequest, urls);\n\n      // actual vs. expected test\n      final int actualNumServersToTry = req.getNumServersToTry().intValue();\n      int expectedNumServersToTry = (int)Math.floor(urls.size() * expectedLoadBalancerRequestsMaximumFraction);\n      if (expectedNumServersToTry < expectedLoadBalancerRequestsMinimumAbsolute) {\n        expectedNumServersToTry = expectedLoadBalancerRequestsMinimumAbsolute;\n      }\n      assertEquals(\"wrong numServersToTry for\"\n          + \" urls.size=\"+urls.size()\n          + \" expectedLoadBalancerRequestsMinimumAbsolute=\"+expectedLoadBalancerRequestsMinimumAbsolute\n          + \" expectedLoadBalancerRequestsMaximumFraction=\"+expectedLoadBalancerRequestsMaximumFraction,\n          expectedNumServersToTry,\n          actualNumServersToTry);\n\n    } finally {\n      if (factory != null) factory.close();\n      if (cc != null) cc.shutdown();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1a77e5e21cbd575a8240b0e3926164f15295f4e8","date":1544979500,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/TestHttpShardHandlerFactory#testLoadBalancerRequestsMinMax().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/TestHttpShardHandlerFactory#testLoadBalancerRequestsMinMax().mjava","sourceNew":"  public void testLoadBalancerRequestsMinMax() throws Exception {\n    final Path home = Paths.get(TEST_HOME());\n    CoreContainer cc = null;\n    ShardHandlerFactory factory = null;\n    try {\n      cc = CoreContainer.createAndLoad(home, home.resolve(\"solr-shardhandler-loadBalancerRequests.xml\"));\n      factory = cc.getShardHandlerFactory();\n\n      // test that factory is HttpShardHandlerFactory with expected url reserve fraction\n      assertTrue(factory instanceof HttpShardHandlerFactory);\n      final HttpShardHandlerFactory httpShardHandlerFactory = ((HttpShardHandlerFactory)factory);\n      assertEquals(expectedLoadBalancerRequestsMinimumAbsolute, httpShardHandlerFactory.permittedLoadBalancerRequestsMinimumAbsolute, 0.0);\n      assertEquals(expectedLoadBalancerRequestsMaximumFraction, httpShardHandlerFactory.permittedLoadBalancerRequestsMaximumFraction, 0.0);\n\n      // create a dummy request and dummy url list\n      final QueryRequest queryRequest = null;\n      final List<String> urls = new ArrayList<>();\n      for (int ii=0; ii<10; ++ii) {\n        urls.add(null);\n      }\n\n      // create LBHttpSolrClient request\n      final LBSolrClient.Req req = httpShardHandlerFactory.newLBHttpSolrClientReq(queryRequest, urls);\n\n      // actual vs. expected test\n      final int actualNumServersToTry = req.getNumServersToTry().intValue();\n      int expectedNumServersToTry = (int)Math.floor(urls.size() * expectedLoadBalancerRequestsMaximumFraction);\n      if (expectedNumServersToTry < expectedLoadBalancerRequestsMinimumAbsolute) {\n        expectedNumServersToTry = expectedLoadBalancerRequestsMinimumAbsolute;\n      }\n      assertEquals(\"wrong numServersToTry for\"\n          + \" urls.size=\"+urls.size()\n          + \" expectedLoadBalancerRequestsMinimumAbsolute=\"+expectedLoadBalancerRequestsMinimumAbsolute\n          + \" expectedLoadBalancerRequestsMaximumFraction=\"+expectedLoadBalancerRequestsMaximumFraction,\n          expectedNumServersToTry,\n          actualNumServersToTry);\n\n    } finally {\n      if (factory != null) factory.close();\n      if (cc != null) cc.shutdown();\n    }\n  }\n\n","sourceOld":"  public void testLoadBalancerRequestsMinMax() throws Exception {\n    final Path home = Paths.get(TEST_HOME());\n    CoreContainer cc = null;\n    ShardHandlerFactory factory = null;\n    try {\n      cc = CoreContainer.createAndLoad(home, home.resolve(\"solr-shardhandler-loadBalancerRequests.xml\"));\n      factory = cc.getShardHandlerFactory();\n\n      // test that factory is HttpShardHandlerFactory with expected url reserve fraction\n      assertTrue(factory instanceof HttpShardHandlerFactory);\n      final HttpShardHandlerFactory httpShardHandlerFactory = ((HttpShardHandlerFactory)factory);\n      assertEquals(expectedLoadBalancerRequestsMinimumAbsolute, httpShardHandlerFactory.permittedLoadBalancerRequestsMinimumAbsolute, 0.0);\n      assertEquals(expectedLoadBalancerRequestsMaximumFraction, httpShardHandlerFactory.permittedLoadBalancerRequestsMaximumFraction, 0.0);\n\n      // create a dummy request and dummy url list\n      final QueryRequest queryRequest = null;\n      final List<String> urls = new ArrayList<>();\n      for (int ii=0; ii<10; ++ii) {\n        urls.add(null);\n      }\n\n      // create LBHttpSolrClient request\n      final LBHttpSolrClient.Req req = httpShardHandlerFactory.newLBHttpSolrClientReq(queryRequest, urls);\n\n      // actual vs. expected test\n      final int actualNumServersToTry = req.getNumServersToTry().intValue();\n      int expectedNumServersToTry = (int)Math.floor(urls.size() * expectedLoadBalancerRequestsMaximumFraction);\n      if (expectedNumServersToTry < expectedLoadBalancerRequestsMinimumAbsolute) {\n        expectedNumServersToTry = expectedLoadBalancerRequestsMinimumAbsolute;\n      }\n      assertEquals(\"wrong numServersToTry for\"\n          + \" urls.size=\"+urls.size()\n          + \" expectedLoadBalancerRequestsMinimumAbsolute=\"+expectedLoadBalancerRequestsMinimumAbsolute\n          + \" expectedLoadBalancerRequestsMaximumFraction=\"+expectedLoadBalancerRequestsMaximumFraction,\n          expectedNumServersToTry,\n          actualNumServersToTry);\n\n    } finally {\n      if (factory != null) factory.close();\n      if (cc != null) cc.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba055e19afc289adcb5bedaf68513793a7254012","date":1591268575,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/TestHttpShardHandlerFactory#testLoadBalancerRequestsMinMax().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/TestHttpShardHandlerFactory#testLoadBalancerRequestsMinMax().mjava","sourceNew":"  public void testLoadBalancerRequestsMinMax() throws Exception {\n    final Path home = Paths.get(TEST_HOME());\n    CoreContainer cc = null;\n    ShardHandlerFactory factory = null;\n    try {\n      cc = CoreContainer.createAndLoad(home, home.resolve(\"solr-shardhandler-loadBalancerRequests.xml\"));\n      factory = cc.getShardHandlerFactory();\n\n      // test that factory is HttpShardHandlerFactory with expected url reserve fraction\n      assertTrue(factory instanceof HttpShardHandlerFactory);\n      @SuppressWarnings(\"resource\")\n      final HttpShardHandlerFactory httpShardHandlerFactory = ((HttpShardHandlerFactory)factory);\n      assertEquals(expectedLoadBalancerRequestsMinimumAbsolute, httpShardHandlerFactory.permittedLoadBalancerRequestsMinimumAbsolute, 0.0);\n      assertEquals(expectedLoadBalancerRequestsMaximumFraction, httpShardHandlerFactory.permittedLoadBalancerRequestsMaximumFraction, 0.0);\n\n      // create a dummy request and dummy url list\n      final QueryRequest queryRequest = null;\n      final List<String> urls = new ArrayList<>();\n      for (int ii=0; ii<10; ++ii) {\n        urls.add(null);\n      }\n\n      // create LBHttpSolrClient request\n      final LBSolrClient.Req req = httpShardHandlerFactory.newLBHttpSolrClientReq(queryRequest, urls);\n\n      // actual vs. expected test\n      final int actualNumServersToTry = req.getNumServersToTry().intValue();\n      int expectedNumServersToTry = (int)Math.floor(urls.size() * expectedLoadBalancerRequestsMaximumFraction);\n      if (expectedNumServersToTry < expectedLoadBalancerRequestsMinimumAbsolute) {\n        expectedNumServersToTry = expectedLoadBalancerRequestsMinimumAbsolute;\n      }\n      assertEquals(\"wrong numServersToTry for\"\n          + \" urls.size=\"+urls.size()\n          + \" expectedLoadBalancerRequestsMinimumAbsolute=\"+expectedLoadBalancerRequestsMinimumAbsolute\n          + \" expectedLoadBalancerRequestsMaximumFraction=\"+expectedLoadBalancerRequestsMaximumFraction,\n          expectedNumServersToTry,\n          actualNumServersToTry);\n\n    } finally {\n      if (factory != null) factory.close();\n      if (cc != null) cc.shutdown();\n    }\n  }\n\n","sourceOld":"  public void testLoadBalancerRequestsMinMax() throws Exception {\n    final Path home = Paths.get(TEST_HOME());\n    CoreContainer cc = null;\n    ShardHandlerFactory factory = null;\n    try {\n      cc = CoreContainer.createAndLoad(home, home.resolve(\"solr-shardhandler-loadBalancerRequests.xml\"));\n      factory = cc.getShardHandlerFactory();\n\n      // test that factory is HttpShardHandlerFactory with expected url reserve fraction\n      assertTrue(factory instanceof HttpShardHandlerFactory);\n      final HttpShardHandlerFactory httpShardHandlerFactory = ((HttpShardHandlerFactory)factory);\n      assertEquals(expectedLoadBalancerRequestsMinimumAbsolute, httpShardHandlerFactory.permittedLoadBalancerRequestsMinimumAbsolute, 0.0);\n      assertEquals(expectedLoadBalancerRequestsMaximumFraction, httpShardHandlerFactory.permittedLoadBalancerRequestsMaximumFraction, 0.0);\n\n      // create a dummy request and dummy url list\n      final QueryRequest queryRequest = null;\n      final List<String> urls = new ArrayList<>();\n      for (int ii=0; ii<10; ++ii) {\n        urls.add(null);\n      }\n\n      // create LBHttpSolrClient request\n      final LBSolrClient.Req req = httpShardHandlerFactory.newLBHttpSolrClientReq(queryRequest, urls);\n\n      // actual vs. expected test\n      final int actualNumServersToTry = req.getNumServersToTry().intValue();\n      int expectedNumServersToTry = (int)Math.floor(urls.size() * expectedLoadBalancerRequestsMaximumFraction);\n      if (expectedNumServersToTry < expectedLoadBalancerRequestsMinimumAbsolute) {\n        expectedNumServersToTry = expectedLoadBalancerRequestsMinimumAbsolute;\n      }\n      assertEquals(\"wrong numServersToTry for\"\n          + \" urls.size=\"+urls.size()\n          + \" expectedLoadBalancerRequestsMinimumAbsolute=\"+expectedLoadBalancerRequestsMinimumAbsolute\n          + \" expectedLoadBalancerRequestsMaximumFraction=\"+expectedLoadBalancerRequestsMaximumFraction,\n          expectedNumServersToTry,\n          actualNumServersToTry);\n\n    } finally {\n      if (factory != null) factory.close();\n      if (cc != null) cc.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ec1fd3cd1aa9782d426f1d542ff0a618ce9bbe10"],"1a77e5e21cbd575a8240b0e3926164f15295f4e8":["d1f5728f32a4a256b36cfabd7a2636452f599bb9"],"ba055e19afc289adcb5bedaf68513793a7254012":["1a77e5e21cbd575a8240b0e3926164f15295f4e8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d1f5728f32a4a256b36cfabd7a2636452f599bb9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ec1fd3cd1aa9782d426f1d542ff0a618ce9bbe10"],"ec1fd3cd1aa9782d426f1d542ff0a618ce9bbe10":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ba055e19afc289adcb5bedaf68513793a7254012"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"1a77e5e21cbd575a8240b0e3926164f15295f4e8":["ba055e19afc289adcb5bedaf68513793a7254012"],"ba055e19afc289adcb5bedaf68513793a7254012":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e9017cf144952056066919f1ebc7897ff9bd71b1","d1f5728f32a4a256b36cfabd7a2636452f599bb9","ec1fd3cd1aa9782d426f1d542ff0a618ce9bbe10"],"ec1fd3cd1aa9782d426f1d542ff0a618ce9bbe10":["e9017cf144952056066919f1ebc7897ff9bd71b1","d1f5728f32a4a256b36cfabd7a2636452f599bb9"],"d1f5728f32a4a256b36cfabd7a2636452f599bb9":["1a77e5e21cbd575a8240b0e3926164f15295f4e8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}