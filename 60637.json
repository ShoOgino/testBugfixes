{"path":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#release(SegmentReader,boolean,IOContext.Context).mjava","commits":[{"id":"0061262413ecc163d6eebba1b5c43ab91a0c2dc5","date":1311195279,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#release(SegmentReader,boolean,IOContext.Context).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Release the segment reader (i.e. decRef it and close if there\n     * are no more references.\n     * @return true if this release altered the index (eg\n     * the SegmentReader had pending changes to del docs and\n     * was closed).  Caller must call checkpoint() if so.\n     * @param sr\n     * @throws IOException\n     */\n    public synchronized boolean release(SegmentReader sr, boolean drop, IOContext.Context context) throws IOException {\n\n      SegmentCacheKey cacheKey = new SegmentCacheKey(sr.getSegmentInfo(), context);\n      \n      final boolean pooled = readerMap.containsKey(cacheKey);\n\n      assert !pooled || readerMap.get(cacheKey) == sr;\n\n      // Drop caller's ref; for an external reader (not\n      // pooled), this decRef will close it\n      sr.decRef();\n\n      if (pooled && (drop || (!poolReaders && sr.getRefCount() == 1))) {\n\n        // We invoke deleter.checkpoint below, so we must be\n        // sync'd on IW if there are changes:\n        assert !sr.hasChanges || Thread.holdsLock(IndexWriter.this);\n\n        // Discard (don't save) changes when we are dropping\n        // the reader; this is used only on the sub-readers\n        // after a successful merge.\n        final boolean hasChanges;\n        if (drop) {\n          hasChanges = sr.hasChanges = false;\n        } else {\n          hasChanges = sr.hasChanges;\n        }\n\n        // Drop our ref -- this will commit any pending\n        // changes to the dir\n        sr.close();\n\n        // We are the last ref to this reader; since we're\n        // not pooling readers, we release it:\n        readerMap.remove(cacheKey);\n\n        if (drop && context == IOContext.Context.MERGE) {\n          // Also drop the READ reader if present: we don't\n          // need its deletes since they've been carried\n          // over to the merged segment\n          cacheKey = new SegmentCacheKey(sr.getSegmentInfo(), IOContext.Context.READ);\n          SegmentReader sr2 = readerMap.get(cacheKey);\n          if (sr2 != null) {\n            readerMap.remove(cacheKey);\n            sr2.hasChanges = false;\n            sr2.close();\n          }\n        }\n\n        return hasChanges;\n      }\n\n      return false;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ce667c6d3400b22523701c549c0d35e26da8b46","date":1324405053,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#release(SegmentReader,boolean,IOContext.Context).mjava","sourceNew":null,"sourceOld":"    /**\n     * Release the segment reader (i.e. decRef it and close if there\n     * are no more references.\n     * @return true if this release altered the index (eg\n     * the SegmentReader had pending changes to del docs and\n     * was closed).  Caller must call checkpoint() if so.\n     * @param sr\n     * @throws IOException\n     */\n    public synchronized boolean release(SegmentReader sr, boolean drop, IOContext.Context context) throws IOException {\n\n      SegmentCacheKey cacheKey = new SegmentCacheKey(sr.getSegmentInfo(), context);\n      \n      final boolean pooled = readerMap.containsKey(cacheKey);\n\n      assert !pooled || readerMap.get(cacheKey) == sr;\n\n      // Drop caller's ref; for an external reader (not\n      // pooled), this decRef will close it\n      sr.decRef();\n\n      if (pooled && (drop || (!poolReaders && sr.getRefCount() == 1))) {\n\n        // We invoke deleter.checkpoint below, so we must be\n        // sync'd on IW if there are changes:\n        assert !sr.hasChanges || Thread.holdsLock(IndexWriter.this);\n\n        // Discard (don't save) changes when we are dropping\n        // the reader; this is used only on the sub-readers\n        // after a successful merge.\n        final boolean hasChanges;\n        if (drop) {\n          hasChanges = sr.hasChanges = false;\n        } else {\n          hasChanges = sr.hasChanges;\n        }\n\n        // Drop our ref -- this will commit any pending\n        // changes to the dir\n        sr.close();\n\n        // We are the last ref to this reader; since we're\n        // not pooling readers, we release it:\n        readerMap.remove(cacheKey);\n\n        if (drop && context == IOContext.Context.MERGE) {\n          // Also drop the READ reader if present: we don't\n          // need its deletes since they've been carried\n          // over to the merged segment\n          cacheKey = new SegmentCacheKey(sr.getSegmentInfo(), IOContext.Context.READ);\n          SegmentReader sr2 = readerMap.get(cacheKey);\n          if (sr2 != null) {\n            readerMap.remove(cacheKey);\n            sr2.hasChanges = false;\n            sr2.close();\n          }\n        }\n\n        return hasChanges;\n      }\n\n      return false;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0061262413ecc163d6eebba1b5c43ab91a0c2dc5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9ce667c6d3400b22523701c549c0d35e26da8b46":["0061262413ecc163d6eebba1b5c43ab91a0c2dc5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9ce667c6d3400b22523701c549c0d35e26da8b46"]},"commit2Childs":{"0061262413ecc163d6eebba1b5c43ab91a0c2dc5":["9ce667c6d3400b22523701c549c0d35e26da8b46"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0061262413ecc163d6eebba1b5c43ab91a0c2dc5"],"9ce667c6d3400b22523701c549c0d35e26da8b46":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}