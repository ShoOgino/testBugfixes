{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Variable.Type#Type().mjava","commits":[{"id":"427edb17549d4bb82462a16eec4ee0533d12d5b7","date":1533006754,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Variable.Type#Type().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Suggestion.ConditionType#ConditionType().mjava","sourceNew":"    Type() {\n      try {\n        meta = Type.class.getField(name()).getAnnotation(Meta.class);\n        if (meta == null) {\n          throw new RuntimeException(\"Invalid type, should have a @Meta annotation \" + name());\n        }\n      } catch (NoSuchFieldException e) {\n        //cannot happen\n      }\n      impl= VariableBase.loadImpl(meta, this);\n\n      this.tagName = meta.name();\n      this.type = meta.type();\n\n      this.vals = readSet(meta.enumVals());\n      this.max = readNum(meta.max());\n      this.min = readNum(meta.min());\n      this.perReplicaValue = readStr(meta.associatedPerReplicaValue());\n      this.associatedPerNodeValues = readSet(meta.associatedPerNodeValue());\n      this.additive = meta.isAdditive();\n      this.metricsAttribute = readStr(meta.metricsKey());\n      this.supportedComputedTypes = meta.computedValues()[0] == Clause.ComputedType.NULL ?\n          emptySet() :\n          unmodifiableSet(new HashSet(Arrays.asList(meta.computedValues())));\n      this.wildCards = readSet(meta.wildCards());\n\n    }\n\n","sourceOld":"    ConditionType() {\n      try {\n        meta = ConditionType.class.getField(name()).getAnnotation(Meta.class);\n        if (meta == null) {\n          throw new RuntimeException(\"Invalid type, should have a @Meta annotation \" + name());\n        }\n      } catch (NoSuchFieldException e) {\n        //cannot happen\n      }\n      if (meta.implementation() != void.class) {\n        try {\n          impl = (VarType) meta.implementation().newInstance();\n        } catch (Exception e) {\n          throw new RuntimeException(\"Unable to instantiate: \" + meta.implementation().getName());\n        }\n      } else {\n        impl = null;\n      }\n      this.tagName = meta.name();\n      this.type = meta.type();\n\n      this.vals = readSet(meta.enumVals());\n      this.max = readNum(meta.max());\n      this.min = readNum(meta.min());\n      this.perReplicaValue = readStr(meta.associatedPerReplicaValue());\n      this.associatedPerNodeValues = readSet(meta.associatedPerNodeValue());\n      this.additive = meta.isAdditive();\n      this.metricsAttribute = readStr(meta.metricsKey());\n      this.supportedComputedTypes = meta.computedValues()[0] == ComputedType.NULL ?\n          emptySet() :\n          unmodifiableSet(new HashSet(Arrays.asList(meta.computedValues())));\n      this.wildCards = readSet(meta.wildCards());\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cb4df98176b6dd0ae6ceba71eaa59c9bcb8fe2eb","date":1533364463,"type":3,"author":"noble","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Variable.Type#Type().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Variable.Type#Type().mjava","sourceNew":"    Type() {\n      try {\n        meta = Type.class.getField(name()).getAnnotation(Meta.class);\n        if (meta == null) {\n          throw new RuntimeException(\"Invalid type, should have a @Meta annotation \" + name());\n        }\n      } catch (NoSuchFieldException e) {\n        //cannot happen\n      }\n      impl = VariableBase.loadImpl(meta, this);\n\n      this.tagName = meta.name();\n      this.type = meta.type();\n\n      this.vals = readSet(meta.enumVals());\n      this.max = readNum(meta.max());\n      this.min = readNum(meta.min());\n      this.perReplicaValue = readStr(meta.associatedPerReplicaValue());\n      this.associatedPerNodeValues = readSet(meta.associatedPerNodeValue());\n      this.additive = meta.isAdditive();\n      this.metricsAttribute = readStr(meta.metricsKey());\n      this.supportedComputedTypes = meta.computedValues()[0] == ComputedType.NULL ?\n          emptySet() :\n          unmodifiableSet(new HashSet(Arrays.asList(meta.computedValues())));\n      this.wildCards = readSet(meta.wildCards());\n\n    }\n\n","sourceOld":"    Type() {\n      try {\n        meta = Type.class.getField(name()).getAnnotation(Meta.class);\n        if (meta == null) {\n          throw new RuntimeException(\"Invalid type, should have a @Meta annotation \" + name());\n        }\n      } catch (NoSuchFieldException e) {\n        //cannot happen\n      }\n      impl= VariableBase.loadImpl(meta, this);\n\n      this.tagName = meta.name();\n      this.type = meta.type();\n\n      this.vals = readSet(meta.enumVals());\n      this.max = readNum(meta.max());\n      this.min = readNum(meta.min());\n      this.perReplicaValue = readStr(meta.associatedPerReplicaValue());\n      this.associatedPerNodeValues = readSet(meta.associatedPerNodeValue());\n      this.additive = meta.isAdditive();\n      this.metricsAttribute = readStr(meta.metricsKey());\n      this.supportedComputedTypes = meta.computedValues()[0] == Clause.ComputedType.NULL ?\n          emptySet() :\n          unmodifiableSet(new HashSet(Arrays.asList(meta.computedValues())));\n      this.wildCards = readSet(meta.wildCards());\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7211cffa9ca30fcd9ff33fb1059543d95773b8b1","date":1566595888,"type":3,"author":"Atri Sharma","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Variable.Type#Type().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Variable.Type#Type().mjava","sourceNew":"    Type() {\n      try {\n        meta = Type.class.getField(name()).getAnnotation(Meta.class);\n        if (meta == null) {\n          throw new RuntimeException(\"Invalid type, should have a @Meta annotation \" + name());\n        }\n      } catch (NoSuchFieldException e) {\n        //cannot happen\n      }\n      impl = VariableBase.loadImpl(meta, this);\n\n      this.tagName = meta.name();\n      this.type = meta.type();\n\n      this.vals = readSet(meta.enumVals());\n      this.max = readNum(meta.max());\n      this.min = readNum(meta.min());\n      this.perReplicaValue = readStr(meta.associatedPerReplicaValue());\n      this.associatedPerNodeValues = readSet(meta.associatedPerNodeValue());\n      this.additive = meta.isAdditive();\n      this.metricsAttribute = readStr(meta.metricsKey());\n      this.supportedComputedTypes = meta.computedValues()[0] == ComputedType.NULL ?\n          emptySet() :\n          Set.of(meta.computedValues());\n      this.wildCards = readSet(meta.wildCards());\n\n    }\n\n","sourceOld":"    Type() {\n      try {\n        meta = Type.class.getField(name()).getAnnotation(Meta.class);\n        if (meta == null) {\n          throw new RuntimeException(\"Invalid type, should have a @Meta annotation \" + name());\n        }\n      } catch (NoSuchFieldException e) {\n        //cannot happen\n      }\n      impl = VariableBase.loadImpl(meta, this);\n\n      this.tagName = meta.name();\n      this.type = meta.type();\n\n      this.vals = readSet(meta.enumVals());\n      this.max = readNum(meta.max());\n      this.min = readNum(meta.min());\n      this.perReplicaValue = readStr(meta.associatedPerReplicaValue());\n      this.associatedPerNodeValues = readSet(meta.associatedPerNodeValue());\n      this.additive = meta.isAdditive();\n      this.metricsAttribute = readStr(meta.metricsKey());\n      this.supportedComputedTypes = meta.computedValues()[0] == ComputedType.NULL ?\n          emptySet() :\n          unmodifiableSet(new HashSet(Arrays.asList(meta.computedValues())));\n      this.wildCards = readSet(meta.wildCards());\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9","date":1574619880,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Variable.Type#Type().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Variable.Type#Type().mjava","sourceNew":"    @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n    Type() {\n      try {\n        meta = Type.class.getField(name()).getAnnotation(Meta.class);\n        if (meta == null) {\n          throw new RuntimeException(\"Invalid type, should have a @Meta annotation \" + name());\n        }\n      } catch (NoSuchFieldException e) {\n        //cannot happen\n      }\n      impl = VariableBase.loadImpl(meta, this);\n\n      this.tagName = meta.name();\n      this.type = meta.type();\n\n      this.vals = readSet(meta.enumVals());\n      this.max = readNum(meta.max());\n      this.min = readNum(meta.min());\n      this.perReplicaValue = readStr(meta.associatedPerReplicaValue());\n      this.associatedPerNodeValues = readSet(meta.associatedPerNodeValue());\n      this.additive = meta.isAdditive();\n      this.metricsAttribute = readStr(meta.metricsKey());\n      this.supportedComputedTypes = meta.computedValues()[0] == ComputedType.NULL ?\n          emptySet() :\n          Set.of(meta.computedValues());\n      this.wildCards = readSet(meta.wildCards());\n\n    }\n\n","sourceOld":"    Type() {\n      try {\n        meta = Type.class.getField(name()).getAnnotation(Meta.class);\n        if (meta == null) {\n          throw new RuntimeException(\"Invalid type, should have a @Meta annotation \" + name());\n        }\n      } catch (NoSuchFieldException e) {\n        //cannot happen\n      }\n      impl = VariableBase.loadImpl(meta, this);\n\n      this.tagName = meta.name();\n      this.type = meta.type();\n\n      this.vals = readSet(meta.enumVals());\n      this.max = readNum(meta.max());\n      this.min = readNum(meta.min());\n      this.perReplicaValue = readStr(meta.associatedPerReplicaValue());\n      this.associatedPerNodeValues = readSet(meta.associatedPerNodeValue());\n      this.additive = meta.isAdditive();\n      this.metricsAttribute = readStr(meta.metricsKey());\n      this.supportedComputedTypes = meta.computedValues()[0] == ComputedType.NULL ?\n          emptySet() :\n          Set.of(meta.computedValues());\n      this.wildCards = readSet(meta.wildCards());\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb9c3baacabd473e8ecd6c4948aabacead49b88e","date":1574700980,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Variable.Type#Type().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Variable.Type#Type().mjava","sourceNew":"    Type() {\n      try {\n        meta = Type.class.getField(name()).getAnnotation(Meta.class);\n        if (meta == null) {\n          throw new RuntimeException(\"Invalid type, should have a @Meta annotation \" + name());\n        }\n      } catch (NoSuchFieldException e) {\n        //cannot happen\n      }\n      impl = VariableBase.loadImpl(meta, this);\n\n      this.tagName = meta.name();\n      this.type = meta.type();\n\n      this.vals = readSet(meta.enumVals());\n      this.max = readNum(meta.max());\n      this.min = readNum(meta.min());\n      this.perReplicaValue = readStr(meta.associatedPerReplicaValue());\n      this.associatedPerNodeValues = readSet(meta.associatedPerNodeValue());\n      this.additive = meta.isAdditive();\n      this.metricsAttribute = readStr(meta.metricsKey());\n      this.supportedComputedTypes = meta.computedValues()[0] == ComputedType.NULL ?\n          emptySet() :\n          Set.of(meta.computedValues());\n      this.wildCards = readSet(meta.wildCards());\n\n    }\n\n","sourceOld":"    @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n    Type() {\n      try {\n        meta = Type.class.getField(name()).getAnnotation(Meta.class);\n        if (meta == null) {\n          throw new RuntimeException(\"Invalid type, should have a @Meta annotation \" + name());\n        }\n      } catch (NoSuchFieldException e) {\n        //cannot happen\n      }\n      impl = VariableBase.loadImpl(meta, this);\n\n      this.tagName = meta.name();\n      this.type = meta.type();\n\n      this.vals = readSet(meta.enumVals());\n      this.max = readNum(meta.max());\n      this.min = readNum(meta.min());\n      this.perReplicaValue = readStr(meta.associatedPerReplicaValue());\n      this.associatedPerNodeValues = readSet(meta.associatedPerNodeValue());\n      this.additive = meta.isAdditive();\n      this.metricsAttribute = readStr(meta.metricsKey());\n      this.supportedComputedTypes = meta.computedValues()[0] == ComputedType.NULL ?\n          emptySet() :\n          Set.of(meta.computedValues());\n      this.wildCards = readSet(meta.wildCards());\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Variable.Type#Type().mjava","sourceNew":null,"sourceOld":"    Type() {\n      try {\n        meta = Type.class.getField(name()).getAnnotation(Meta.class);\n        if (meta == null) {\n          throw new RuntimeException(\"Invalid type, should have a @Meta annotation \" + name());\n        }\n      } catch (NoSuchFieldException e) {\n        //cannot happen\n      }\n      impl = VariableBase.loadImpl(meta, this);\n\n      this.tagName = meta.name();\n      this.type = meta.type();\n\n      this.vals = readSet(meta.enumVals());\n      this.max = readNum(meta.max());\n      this.min = readNum(meta.min());\n      this.perReplicaValue = readStr(meta.associatedPerReplicaValue());\n      this.associatedPerNodeValues = readSet(meta.associatedPerNodeValue());\n      this.additive = meta.isAdditive();\n      this.metricsAttribute = readStr(meta.metricsKey());\n      this.supportedComputedTypes = meta.computedValues()[0] == ComputedType.NULL ?\n          emptySet() :\n          Set.of(meta.computedValues());\n      this.wildCards = readSet(meta.wildCards());\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9":["7211cffa9ca30fcd9ff33fb1059543d95773b8b1"],"3f504512a03d978990cbff30db0522b354e846db":["bb9c3baacabd473e8ecd6c4948aabacead49b88e"],"427edb17549d4bb82462a16eec4ee0533d12d5b7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7211cffa9ca30fcd9ff33fb1059543d95773b8b1":["cb4df98176b6dd0ae6ceba71eaa59c9bcb8fe2eb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bb9c3baacabd473e8ecd6c4948aabacead49b88e":["a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9"],"cb4df98176b6dd0ae6ceba71eaa59c9bcb8fe2eb":["427edb17549d4bb82462a16eec4ee0533d12d5b7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9":["bb9c3baacabd473e8ecd6c4948aabacead49b88e"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"427edb17549d4bb82462a16eec4ee0533d12d5b7":["cb4df98176b6dd0ae6ceba71eaa59c9bcb8fe2eb"],"7211cffa9ca30fcd9ff33fb1059543d95773b8b1":["a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["427edb17549d4bb82462a16eec4ee0533d12d5b7"],"bb9c3baacabd473e8ecd6c4948aabacead49b88e":["3f504512a03d978990cbff30db0522b354e846db"],"cb4df98176b6dd0ae6ceba71eaa59c9bcb8fe2eb":["7211cffa9ca30fcd9ff33fb1059543d95773b8b1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}