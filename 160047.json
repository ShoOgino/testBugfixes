{"path":"solr/core/src/test/org/apache/solr/cloud/TestConfigSetsAPI#verifyCreate(String,String,Map[String,String],Map[String,String]).mjava","commits":[{"id":"2209af2c265d2258ec4b29c8cc78622d36994a15","date":1440641916,"type":0,"author":"Gregory Chanan","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestConfigSetsAPI#verifyCreate(String,String,Map[String,String],Map[String,String]).mjava","pathOld":"/dev/null","sourceNew":"  private void verifyCreate(String baseConfigSetName, String configSetName,\n      Map<String, String> oldProps, Map<String, String> newProps) throws Exception {\n    final SolrClient solrClient =\n        new HttpSolrClient(solrCluster.getJettySolrRunners().get(0).getBaseUrl().toString());\n    setupBaseConfigSet(baseConfigSetName, oldProps);\n\n    SolrZkClient zkClient = new SolrZkClient(solrCluster.getZkServer().getZkAddress(),\n        AbstractZkTestCase.TIMEOUT, 45000, null);\n    try {\n      ZkConfigManager configManager = new ZkConfigManager(zkClient);\n      assertFalse(configManager.configExists(configSetName));\n\n      Create create = new Create();\n      create.setBaseConfigSetName(baseConfigSetName).setConfigSetName(configSetName);\n      if (newProps != null) {\n        Properties p = new Properties();\n        p.putAll(newProps);\n        create.setNewConfigSetProperties(p);\n      }\n      ConfigSetAdminResponse response = create.process(solrClient);\n      assertNotNull(response.getResponse());\n      assertTrue(configManager.configExists(configSetName));\n\n      verifyProperties(configSetName, oldProps, newProps, zkClient);\n    } finally {\n      zkClient.close();\n    }\n    solrClient.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9f1a5871b8ff5e2e0c0bf62340337c7f3801cffe","date":1452379366,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestConfigSetsAPI#verifyCreate(String,String,Map[String,String],Map[String,String]).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestConfigSetsAPI#verifyCreate(String,String,Map[String,String],Map[String,String]).mjava","sourceNew":"  private void verifyCreate(String baseConfigSetName, String configSetName,\n      Map<String, String> oldProps, Map<String, String> newProps) throws Exception {\n    final SolrClient solrClient =\n        new HttpSolrClient(solrCluster.getJettySolrRunners().get(0).getBaseUrl().toString());\n    setupBaseConfigSet(baseConfigSetName, oldProps);\n\n    SolrZkClient zkClient = new SolrZkClient(solrCluster.getZkServer().getZkAddress(),\n        AbstractZkTestCase.TIMEOUT, AbstractZkTestCase.TIMEOUT, null);\n    try {\n      ZkConfigManager configManager = new ZkConfigManager(zkClient);\n      assertFalse(configManager.configExists(configSetName));\n\n      Create create = new Create();\n      create.setBaseConfigSetName(baseConfigSetName).setConfigSetName(configSetName);\n      if (newProps != null) {\n        Properties p = new Properties();\n        p.putAll(newProps);\n        create.setNewConfigSetProperties(p);\n      }\n      ConfigSetAdminResponse response = create.process(solrClient);\n      assertNotNull(response.getResponse());\n      assertTrue(configManager.configExists(configSetName));\n\n      verifyProperties(configSetName, oldProps, newProps, zkClient);\n    } finally {\n      zkClient.close();\n    }\n    solrClient.close();\n  }\n\n","sourceOld":"  private void verifyCreate(String baseConfigSetName, String configSetName,\n      Map<String, String> oldProps, Map<String, String> newProps) throws Exception {\n    final SolrClient solrClient =\n        new HttpSolrClient(solrCluster.getJettySolrRunners().get(0).getBaseUrl().toString());\n    setupBaseConfigSet(baseConfigSetName, oldProps);\n\n    SolrZkClient zkClient = new SolrZkClient(solrCluster.getZkServer().getZkAddress(),\n        AbstractZkTestCase.TIMEOUT, 45000, null);\n    try {\n      ZkConfigManager configManager = new ZkConfigManager(zkClient);\n      assertFalse(configManager.configExists(configSetName));\n\n      Create create = new Create();\n      create.setBaseConfigSetName(baseConfigSetName).setConfigSetName(configSetName);\n      if (newProps != null) {\n        Properties p = new Properties();\n        p.putAll(newProps);\n        create.setNewConfigSetProperties(p);\n      }\n      ConfigSetAdminResponse response = create.process(solrClient);\n      assertNotNull(response.getResponse());\n      assertTrue(configManager.configExists(configSetName));\n\n      verifyProperties(configSetName, oldProps, newProps, zkClient);\n    } finally {\n      zkClient.close();\n    }\n    solrClient.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088","date":1460069869,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestConfigSetsAPI#verifyCreate(String,String,Map[String,String],Map[String,String]).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestConfigSetsAPI#verifyCreate(String,String,Map[String,String],Map[String,String]).mjava","sourceNew":"  private void verifyCreate(String baseConfigSetName, String configSetName,\n      Map<String, String> oldProps, Map<String, String> newProps) throws Exception {\n    final String baseUrl = solrCluster.getJettySolrRunners().get(0).getBaseUrl().toString();\n    final SolrClient solrClient = getHttpSolrClient(baseUrl);\n    setupBaseConfigSet(baseConfigSetName, oldProps);\n\n    SolrZkClient zkClient = new SolrZkClient(solrCluster.getZkServer().getZkAddress(),\n        AbstractZkTestCase.TIMEOUT, AbstractZkTestCase.TIMEOUT, null);\n    try {\n      ZkConfigManager configManager = new ZkConfigManager(zkClient);\n      assertFalse(configManager.configExists(configSetName));\n\n      Create create = new Create();\n      create.setBaseConfigSetName(baseConfigSetName).setConfigSetName(configSetName);\n      if (newProps != null) {\n        Properties p = new Properties();\n        p.putAll(newProps);\n        create.setNewConfigSetProperties(p);\n      }\n      ConfigSetAdminResponse response = create.process(solrClient);\n      assertNotNull(response.getResponse());\n      assertTrue(configManager.configExists(configSetName));\n\n      verifyProperties(configSetName, oldProps, newProps, zkClient);\n    } finally {\n      zkClient.close();\n    }\n    solrClient.close();\n  }\n\n","sourceOld":"  private void verifyCreate(String baseConfigSetName, String configSetName,\n      Map<String, String> oldProps, Map<String, String> newProps) throws Exception {\n    final SolrClient solrClient =\n        new HttpSolrClient(solrCluster.getJettySolrRunners().get(0).getBaseUrl().toString());\n    setupBaseConfigSet(baseConfigSetName, oldProps);\n\n    SolrZkClient zkClient = new SolrZkClient(solrCluster.getZkServer().getZkAddress(),\n        AbstractZkTestCase.TIMEOUT, AbstractZkTestCase.TIMEOUT, null);\n    try {\n      ZkConfigManager configManager = new ZkConfigManager(zkClient);\n      assertFalse(configManager.configExists(configSetName));\n\n      Create create = new Create();\n      create.setBaseConfigSetName(baseConfigSetName).setConfigSetName(configSetName);\n      if (newProps != null) {\n        Properties p = new Properties();\n        p.putAll(newProps);\n        create.setNewConfigSetProperties(p);\n      }\n      ConfigSetAdminResponse response = create.process(solrClient);\n      assertNotNull(response.getResponse());\n      assertTrue(configManager.configExists(configSetName));\n\n      verifyProperties(configSetName, oldProps, newProps, zkClient);\n    } finally {\n      zkClient.close();\n    }\n    solrClient.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","date":1460110033,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestConfigSetsAPI#verifyCreate(String,String,Map[String,String],Map[String,String]).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestConfigSetsAPI#verifyCreate(String,String,Map[String,String],Map[String,String]).mjava","sourceNew":"  private void verifyCreate(String baseConfigSetName, String configSetName,\n      Map<String, String> oldProps, Map<String, String> newProps) throws Exception {\n    final String baseUrl = solrCluster.getJettySolrRunners().get(0).getBaseUrl().toString();\n    final SolrClient solrClient = getHttpSolrClient(baseUrl);\n    setupBaseConfigSet(baseConfigSetName, oldProps);\n\n    SolrZkClient zkClient = new SolrZkClient(solrCluster.getZkServer().getZkAddress(),\n        AbstractZkTestCase.TIMEOUT, AbstractZkTestCase.TIMEOUT, null);\n    try {\n      ZkConfigManager configManager = new ZkConfigManager(zkClient);\n      assertFalse(configManager.configExists(configSetName));\n\n      Create create = new Create();\n      create.setBaseConfigSetName(baseConfigSetName).setConfigSetName(configSetName);\n      if (newProps != null) {\n        Properties p = new Properties();\n        p.putAll(newProps);\n        create.setNewConfigSetProperties(p);\n      }\n      ConfigSetAdminResponse response = create.process(solrClient);\n      assertNotNull(response.getResponse());\n      assertTrue(configManager.configExists(configSetName));\n\n      verifyProperties(configSetName, oldProps, newProps, zkClient);\n    } finally {\n      zkClient.close();\n    }\n    solrClient.close();\n  }\n\n","sourceOld":"  private void verifyCreate(String baseConfigSetName, String configSetName,\n      Map<String, String> oldProps, Map<String, String> newProps) throws Exception {\n    final SolrClient solrClient =\n        new HttpSolrClient(solrCluster.getJettySolrRunners().get(0).getBaseUrl().toString());\n    setupBaseConfigSet(baseConfigSetName, oldProps);\n\n    SolrZkClient zkClient = new SolrZkClient(solrCluster.getZkServer().getZkAddress(),\n        AbstractZkTestCase.TIMEOUT, AbstractZkTestCase.TIMEOUT, null);\n    try {\n      ZkConfigManager configManager = new ZkConfigManager(zkClient);\n      assertFalse(configManager.configExists(configSetName));\n\n      Create create = new Create();\n      create.setBaseConfigSetName(baseConfigSetName).setConfigSetName(configSetName);\n      if (newProps != null) {\n        Properties p = new Properties();\n        p.putAll(newProps);\n        create.setNewConfigSetProperties(p);\n      }\n      ConfigSetAdminResponse response = create.process(solrClient);\n      assertNotNull(response.getResponse());\n      assertTrue(configManager.configExists(configSetName));\n\n      verifyProperties(configSetName, oldProps, newProps, zkClient);\n    } finally {\n      zkClient.close();\n    }\n    solrClient.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7612891097d4751617c396cdd7a092833799147","date":1600707827,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestConfigSetsAPI#verifyCreate(String,String,Map[String,String],Map[String,String]).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestConfigSetsAPI#verifyCreate(String,String,Map[String,String],Map[String,String]).mjava","sourceNew":"  private void verifyCreate(String baseConfigSetName, String configSetName,\n      Map<String, String> oldProps, Map<String, String> newProps) throws Exception {\n    final String baseUrl = cluster.getJettySolrRunners().get(0).getBaseUrl().toString();\n    final SolrClient solrClient = getHttpSolrClient(baseUrl);\n    setupBaseConfigSet(baseConfigSetName, oldProps);\n\n    SolrZkClient zkClient = new SolrZkClient(cluster.getZkServer().getZkAddress(),\n        AbstractZkTestCase.TIMEOUT, AbstractZkTestCase.TIMEOUT, null);\n    try {\n      ZkConfigManager configManager = new ZkConfigManager(zkClient);\n      assertFalse(configManager.configExists(configSetName));\n\n      Create create = new Create();\n      create.setBaseConfigSetName(baseConfigSetName).setConfigSetName(configSetName);\n      if (newProps != null) {\n        Properties p = new Properties();\n        p.putAll(newProps);\n        create.setNewConfigSetProperties(p);\n      }\n      ConfigSetAdminResponse response = create.process(solrClient);\n      assertNotNull(response.getResponse());\n      assertTrue(configManager.configExists(configSetName));\n\n      verifyProperties(configSetName, oldProps, newProps, zkClient);\n    } finally {\n      zkClient.close();\n    }\n    solrClient.close();\n  }\n\n","sourceOld":"  private void verifyCreate(String baseConfigSetName, String configSetName,\n      Map<String, String> oldProps, Map<String, String> newProps) throws Exception {\n    final String baseUrl = solrCluster.getJettySolrRunners().get(0).getBaseUrl().toString();\n    final SolrClient solrClient = getHttpSolrClient(baseUrl);\n    setupBaseConfigSet(baseConfigSetName, oldProps);\n\n    SolrZkClient zkClient = new SolrZkClient(solrCluster.getZkServer().getZkAddress(),\n        AbstractZkTestCase.TIMEOUT, AbstractZkTestCase.TIMEOUT, null);\n    try {\n      ZkConfigManager configManager = new ZkConfigManager(zkClient);\n      assertFalse(configManager.configExists(configSetName));\n\n      Create create = new Create();\n      create.setBaseConfigSetName(baseConfigSetName).setConfigSetName(configSetName);\n      if (newProps != null) {\n        Properties p = new Properties();\n        p.putAll(newProps);\n        create.setNewConfigSetProperties(p);\n      }\n      ConfigSetAdminResponse response = create.process(solrClient);\n      assertNotNull(response.getResponse());\n      assertTrue(configManager.configExists(configSetName));\n\n      verifyProperties(configSetName, oldProps, newProps, zkClient);\n    } finally {\n      zkClient.close();\n    }\n    solrClient.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c01ee5edcdd3cffaab03842feda0c26516290698","date":1601586820,"type":4,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestConfigSetsAPI#verifyCreate(String,String,Map[String,String],Map[String,String]).mjava","sourceNew":null,"sourceOld":"  private void verifyCreate(String baseConfigSetName, String configSetName,\n      Map<String, String> oldProps, Map<String, String> newProps) throws Exception {\n    final String baseUrl = cluster.getJettySolrRunners().get(0).getBaseUrl().toString();\n    final SolrClient solrClient = getHttpSolrClient(baseUrl);\n    setupBaseConfigSet(baseConfigSetName, oldProps);\n\n    SolrZkClient zkClient = new SolrZkClient(cluster.getZkServer().getZkAddress(),\n        AbstractZkTestCase.TIMEOUT, AbstractZkTestCase.TIMEOUT, null);\n    try {\n      ZkConfigManager configManager = new ZkConfigManager(zkClient);\n      assertFalse(configManager.configExists(configSetName));\n\n      Create create = new Create();\n      create.setBaseConfigSetName(baseConfigSetName).setConfigSetName(configSetName);\n      if (newProps != null) {\n        Properties p = new Properties();\n        p.putAll(newProps);\n        create.setNewConfigSetProperties(p);\n      }\n      ConfigSetAdminResponse response = create.process(solrClient);\n      assertNotNull(response.getResponse());\n      assertTrue(configManager.configExists(configSetName));\n\n      verifyProperties(configSetName, oldProps, newProps, zkClient);\n    } finally {\n      zkClient.close();\n    }\n    solrClient.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7612891097d4751617c396cdd7a092833799147":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"2209af2c265d2258ec4b29c8cc78622d36994a15":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c01ee5edcdd3cffaab03842feda0c26516290698":["c7612891097d4751617c396cdd7a092833799147"],"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088":["9f1a5871b8ff5e2e0c0bf62340337c7f3801cffe"],"9f1a5871b8ff5e2e0c0bf62340337c7f3801cffe":["2209af2c265d2258ec4b29c8cc78622d36994a15"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b":["9f1a5871b8ff5e2e0c0bf62340337c7f3801cffe","e3c94a8b8bf47db4f968d9ae510ec8bbe1372088"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c01ee5edcdd3cffaab03842feda0c26516290698"]},"commit2Childs":{"c7612891097d4751617c396cdd7a092833799147":["c01ee5edcdd3cffaab03842feda0c26516290698"],"2209af2c265d2258ec4b29c8cc78622d36994a15":["9f1a5871b8ff5e2e0c0bf62340337c7f3801cffe"],"c01ee5edcdd3cffaab03842feda0c26516290698":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2209af2c265d2258ec4b29c8cc78622d36994a15"],"9f1a5871b8ff5e2e0c0bf62340337c7f3801cffe":["e3c94a8b8bf47db4f968d9ae510ec8bbe1372088","5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b":["c7612891097d4751617c396cdd7a092833799147"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}