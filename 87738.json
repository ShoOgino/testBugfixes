{"path":"solr/src/java/org/apache/solr/core/CoreContainer#initZooKeeper(String,int).mjava","commits":[{"id":"43adc163640856c8b07e4cf1b2046c9af56d3ae7","date":1286989273,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/core/CoreContainer#initZooKeeper(String,int).mjava","pathOld":"/dev/null","sourceNew":"  private void initZooKeeper(String zkHost, int zkClientTimeout) {\n    // if zkHost sys property is not set, we are not using ZooKeeper\n    String zookeeperHost;\n    if(zkHost == null) {\n      zookeeperHost = System.getProperty(\"zkHost\");\n    } else {\n      zookeeperHost = zkHost;\n    }\n\n    String zkRun = System.getProperty(\"zkRun\");\n\n    if (zkRun == null && zookeeperHost == null)\n        return;  // not in zk mode\n\n    zkServer = new SolrZkServer(zkRun, zookeeperHost, solrHome, hostPort);\n    zkServer.parseConfig();\n    zkServer.start();\n\n    // set client from server config if not already set\n    if (zookeeperHost == null) {\n      zookeeperHost = zkServer.getClientString();\n    }\n\n    int zkClientConnectTimeout = 5000;\n\n    if (zookeeperHost != null) {\n      // we are ZooKeeper enabled\n      try {\n        // If this is an ensemble, allow for a long connect time for other servers to come up\n        if (zkRun != null && zkServer.getServers().size() > 1) {\n          zkClientConnectTimeout = 24 * 60 * 60 * 1000;  // 1 day for embedded ensemble\n          log.info(\"Zookeeper client=\" + zookeeperHost + \"  Waiting for a quorum.\");\n        } else {\n          log.info(\"Zookeeper client=\" + zookeeperHost);          \n        }\n        zkController = new ZkController(zookeeperHost, zkClientTimeout, zkClientConnectTimeout, host, hostPort, hostContext);\n        \n        String confDir = System.getProperty(\"bootstrap_confdir\");\n        if(confDir != null) {\n          File dir = new File(confDir);\n          if(!dir.isDirectory()) {\n            throw new IllegalArgumentException(\"bootstrap_confdir must be a directory of configuration files\");\n          }\n          String confName = System.getProperty(ZkController.COLLECTION_PARAM_PREFIX+ZkController.CONFIGNAME_PROP, \"configuration1\");\n          zkController.uploadConfigDir(dir, confName);\n        }\n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (TimeoutException e) {\n        log.error(\"Could not connect to ZooKeeper\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (IOException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n    }\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["629e17cda15d021320b6a1081fac6d0cf2d0150b","629e17cda15d021320b6a1081fac6d0cf2d0150b","629e17cda15d021320b6a1081fac6d0cf2d0150b","20e199cd9e20ed60d620e613664778cd617da489","20e199cd9e20ed60d620e613664778cd617da489","20e199cd9e20ed60d620e613664778cd617da489"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3d27fdb664de1d2da1efdddf2ccf6973dd072c69","date":1287419521,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/core/CoreContainer#initZooKeeper(String,int).mjava","pathOld":"solr/src/java/org/apache/solr/core/CoreContainer#initZooKeeper(String,int).mjava","sourceNew":"  protected void initZooKeeper(String zkHost, int zkClientTimeout) {\n    // if zkHost sys property is not set, we are not using ZooKeeper\n    String zookeeperHost;\n    if(zkHost == null) {\n      zookeeperHost = System.getProperty(\"zkHost\");\n    } else {\n      zookeeperHost = zkHost;\n    }\n\n    String zkRun = System.getProperty(\"zkRun\");\n\n    if (zkRun == null && zookeeperHost == null)\n        return;  // not in zk mode\n\n    zkServer = new SolrZkServer(zkRun, zookeeperHost, solrHome, hostPort);\n    zkServer.parseConfig();\n    zkServer.start();\n\n    // set client from server config if not already set\n    if (zookeeperHost == null) {\n      zookeeperHost = zkServer.getClientString();\n    }\n\n    int zkClientConnectTimeout = 5000;\n\n    if (zookeeperHost != null) {\n      // we are ZooKeeper enabled\n      try {\n        // If this is an ensemble, allow for a long connect time for other servers to come up\n        if (zkRun != null && zkServer.getServers().size() > 1) {\n          zkClientConnectTimeout = 24 * 60 * 60 * 1000;  // 1 day for embedded ensemble\n          log.info(\"Zookeeper client=\" + zookeeperHost + \"  Waiting for a quorum.\");\n        } else {\n          log.info(\"Zookeeper client=\" + zookeeperHost);          \n        }\n        zkController = new ZkController(zookeeperHost, zkClientTimeout, zkClientConnectTimeout, host, hostPort, hostContext);\n        \n        String confDir = System.getProperty(\"bootstrap_confdir\");\n        if(confDir != null) {\n          File dir = new File(confDir);\n          if(!dir.isDirectory()) {\n            throw new IllegalArgumentException(\"bootstrap_confdir must be a directory of configuration files\");\n          }\n          String confName = System.getProperty(ZkController.COLLECTION_PARAM_PREFIX+ZkController.CONFIGNAME_PROP, \"configuration1\");\n          zkController.uploadConfigDir(dir, confName);\n        }\n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (TimeoutException e) {\n        log.error(\"Could not connect to ZooKeeper\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (IOException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n    }\n    \n  }\n\n","sourceOld":"  private void initZooKeeper(String zkHost, int zkClientTimeout) {\n    // if zkHost sys property is not set, we are not using ZooKeeper\n    String zookeeperHost;\n    if(zkHost == null) {\n      zookeeperHost = System.getProperty(\"zkHost\");\n    } else {\n      zookeeperHost = zkHost;\n    }\n\n    String zkRun = System.getProperty(\"zkRun\");\n\n    if (zkRun == null && zookeeperHost == null)\n        return;  // not in zk mode\n\n    zkServer = new SolrZkServer(zkRun, zookeeperHost, solrHome, hostPort);\n    zkServer.parseConfig();\n    zkServer.start();\n\n    // set client from server config if not already set\n    if (zookeeperHost == null) {\n      zookeeperHost = zkServer.getClientString();\n    }\n\n    int zkClientConnectTimeout = 5000;\n\n    if (zookeeperHost != null) {\n      // we are ZooKeeper enabled\n      try {\n        // If this is an ensemble, allow for a long connect time for other servers to come up\n        if (zkRun != null && zkServer.getServers().size() > 1) {\n          zkClientConnectTimeout = 24 * 60 * 60 * 1000;  // 1 day for embedded ensemble\n          log.info(\"Zookeeper client=\" + zookeeperHost + \"  Waiting for a quorum.\");\n        } else {\n          log.info(\"Zookeeper client=\" + zookeeperHost);          \n        }\n        zkController = new ZkController(zookeeperHost, zkClientTimeout, zkClientConnectTimeout, host, hostPort, hostContext);\n        \n        String confDir = System.getProperty(\"bootstrap_confdir\");\n        if(confDir != null) {\n          File dir = new File(confDir);\n          if(!dir.isDirectory()) {\n            throw new IllegalArgumentException(\"bootstrap_confdir must be a directory of configuration files\");\n          }\n          String confName = System.getProperty(ZkController.COLLECTION_PARAM_PREFIX+ZkController.CONFIGNAME_PROP, \"configuration1\");\n          zkController.uploadConfigDir(dir, confName);\n        }\n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (TimeoutException e) {\n        log.error(\"Could not connect to ZooKeeper\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (IOException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4ecea1664e8617d82eca3b8055a3c37cb4da8511","date":1287578668,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/core/CoreContainer#initZooKeeper(String,int).mjava","pathOld":"/dev/null","sourceNew":"  protected void initZooKeeper(String zkHost, int zkClientTimeout) {\n    // if zkHost sys property is not set, we are not using ZooKeeper\n    String zookeeperHost;\n    if(zkHost == null) {\n      zookeeperHost = System.getProperty(\"zkHost\");\n    } else {\n      zookeeperHost = zkHost;\n    }\n\n    String zkRun = System.getProperty(\"zkRun\");\n\n    if (zkRun == null && zookeeperHost == null)\n        return;  // not in zk mode\n\n    zkServer = new SolrZkServer(zkRun, zookeeperHost, solrHome, hostPort);\n    zkServer.parseConfig();\n    zkServer.start();\n\n    // set client from server config if not already set\n    if (zookeeperHost == null) {\n      zookeeperHost = zkServer.getClientString();\n    }\n\n    int zkClientConnectTimeout = 5000;\n\n    if (zookeeperHost != null) {\n      // we are ZooKeeper enabled\n      try {\n        // If this is an ensemble, allow for a long connect time for other servers to come up\n        if (zkRun != null && zkServer.getServers().size() > 1) {\n          zkClientConnectTimeout = 24 * 60 * 60 * 1000;  // 1 day for embedded ensemble\n          log.info(\"Zookeeper client=\" + zookeeperHost + \"  Waiting for a quorum.\");\n        } else {\n          log.info(\"Zookeeper client=\" + zookeeperHost);          \n        }\n        zkController = new ZkController(zookeeperHost, zkClientTimeout, zkClientConnectTimeout, host, hostPort, hostContext);\n        \n        String confDir = System.getProperty(\"bootstrap_confdir\");\n        if(confDir != null) {\n          File dir = new File(confDir);\n          if(!dir.isDirectory()) {\n            throw new IllegalArgumentException(\"bootstrap_confdir must be a directory of configuration files\");\n          }\n          String confName = System.getProperty(ZkController.COLLECTION_PARAM_PREFIX+ZkController.CONFIGNAME_PROP, \"configuration1\");\n          zkController.uploadConfigDir(dir, confName);\n        }\n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (TimeoutException e) {\n        log.error(\"Could not connect to ZooKeeper\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (IOException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n    }\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/core/CoreContainer#initZooKeeper(String,int).mjava","pathOld":"/dev/null","sourceNew":"  protected void initZooKeeper(String zkHost, int zkClientTimeout) {\n    // if zkHost sys property is not set, we are not using ZooKeeper\n    String zookeeperHost;\n    if(zkHost == null) {\n      zookeeperHost = System.getProperty(\"zkHost\");\n    } else {\n      zookeeperHost = zkHost;\n    }\n\n    String zkRun = System.getProperty(\"zkRun\");\n\n    if (zkRun == null && zookeeperHost == null)\n        return;  // not in zk mode\n\n    zkServer = new SolrZkServer(zkRun, zookeeperHost, solrHome, hostPort);\n    zkServer.parseConfig();\n    zkServer.start();\n\n    // set client from server config if not already set\n    if (zookeeperHost == null) {\n      zookeeperHost = zkServer.getClientString();\n    }\n\n    int zkClientConnectTimeout = 5000;\n\n    if (zookeeperHost != null) {\n      // we are ZooKeeper enabled\n      try {\n        // If this is an ensemble, allow for a long connect time for other servers to come up\n        if (zkRun != null && zkServer.getServers().size() > 1) {\n          zkClientConnectTimeout = 24 * 60 * 60 * 1000;  // 1 day for embedded ensemble\n          log.info(\"Zookeeper client=\" + zookeeperHost + \"  Waiting for a quorum.\");\n        } else {\n          log.info(\"Zookeeper client=\" + zookeeperHost);          \n        }\n        zkController = new ZkController(zookeeperHost, zkClientTimeout, zkClientConnectTimeout, host, hostPort, hostContext);\n        \n        String confDir = System.getProperty(\"bootstrap_confdir\");\n        if(confDir != null) {\n          File dir = new File(confDir);\n          if(!dir.isDirectory()) {\n            throw new IllegalArgumentException(\"bootstrap_confdir must be a directory of configuration files\");\n          }\n          String confName = System.getProperty(ZkController.COLLECTION_PARAM_PREFIX+ZkController.CONFIGNAME_PROP, \"configuration1\");\n          zkController.uploadConfigDir(dir, confName);\n        }\n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (TimeoutException e) {\n        log.error(\"Could not connect to ZooKeeper\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (IOException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n    }\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"685a6cc5a1ec4f67026d628051c8d25971f6ca31","date":1297984183,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/core/CoreContainer#initZooKeeper(String,int).mjava","pathOld":"solr/src/java/org/apache/solr/core/CoreContainer#initZooKeeper(String,int).mjava","sourceNew":"  protected void initZooKeeper(String zkHost, int zkClientTimeout) {\n    // if zkHost sys property is not set, we are not using ZooKeeper\n    String zookeeperHost;\n    if(zkHost == null) {\n      zookeeperHost = System.getProperty(\"zkHost\");\n    } else {\n      zookeeperHost = zkHost;\n    }\n\n    String zkRun = System.getProperty(\"zkRun\");\n\n    if (zkRun == null && zookeeperHost == null)\n        return;  // not in zk mode\n\n    // zookeeper in quorum mode currently causes a failure when trying to\n    // register log4j mbeans.  See SOLR-2369\n    // TODO: remove after updating to an slf4j based zookeeper\n    System.setProperty(\"zookeeper.jmx.log4j.disable\", \"true\");\n\n    zkServer = new SolrZkServer(zkRun, zookeeperHost, solrHome, hostPort);\n    zkServer.parseConfig();\n    zkServer.start();\n\n    // set client from server config if not already set\n    if (zookeeperHost == null) {\n      zookeeperHost = zkServer.getClientString();\n    }\n\n    int zkClientConnectTimeout = 5000;\n\n    if (zookeeperHost != null) {\n      // we are ZooKeeper enabled\n      try {\n        // If this is an ensemble, allow for a long connect time for other servers to come up\n        if (zkRun != null && zkServer.getServers().size() > 1) {\n          zkClientConnectTimeout = 24 * 60 * 60 * 1000;  // 1 day for embedded ensemble\n          log.info(\"Zookeeper client=\" + zookeeperHost + \"  Waiting for a quorum.\");\n        } else {\n          log.info(\"Zookeeper client=\" + zookeeperHost);          \n        }\n        zkController = new ZkController(zookeeperHost, zkClientTimeout, zkClientConnectTimeout, host, hostPort, hostContext);\n        \n        String confDir = System.getProperty(\"bootstrap_confdir\");\n        if(confDir != null) {\n          File dir = new File(confDir);\n          if(!dir.isDirectory()) {\n            throw new IllegalArgumentException(\"bootstrap_confdir must be a directory of configuration files\");\n          }\n          String confName = System.getProperty(ZkController.COLLECTION_PARAM_PREFIX+ZkController.CONFIGNAME_PROP, \"configuration1\");\n          zkController.uploadConfigDir(dir, confName);\n        }\n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (TimeoutException e) {\n        log.error(\"Could not connect to ZooKeeper\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (IOException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n    }\n    \n  }\n\n","sourceOld":"  protected void initZooKeeper(String zkHost, int zkClientTimeout) {\n    // if zkHost sys property is not set, we are not using ZooKeeper\n    String zookeeperHost;\n    if(zkHost == null) {\n      zookeeperHost = System.getProperty(\"zkHost\");\n    } else {\n      zookeeperHost = zkHost;\n    }\n\n    String zkRun = System.getProperty(\"zkRun\");\n\n    if (zkRun == null && zookeeperHost == null)\n        return;  // not in zk mode\n\n    zkServer = new SolrZkServer(zkRun, zookeeperHost, solrHome, hostPort);\n    zkServer.parseConfig();\n    zkServer.start();\n\n    // set client from server config if not already set\n    if (zookeeperHost == null) {\n      zookeeperHost = zkServer.getClientString();\n    }\n\n    int zkClientConnectTimeout = 5000;\n\n    if (zookeeperHost != null) {\n      // we are ZooKeeper enabled\n      try {\n        // If this is an ensemble, allow for a long connect time for other servers to come up\n        if (zkRun != null && zkServer.getServers().size() > 1) {\n          zkClientConnectTimeout = 24 * 60 * 60 * 1000;  // 1 day for embedded ensemble\n          log.info(\"Zookeeper client=\" + zookeeperHost + \"  Waiting for a quorum.\");\n        } else {\n          log.info(\"Zookeeper client=\" + zookeeperHost);          \n        }\n        zkController = new ZkController(zookeeperHost, zkClientTimeout, zkClientConnectTimeout, host, hostPort, hostContext);\n        \n        String confDir = System.getProperty(\"bootstrap_confdir\");\n        if(confDir != null) {\n          File dir = new File(confDir);\n          if(!dir.isDirectory()) {\n            throw new IllegalArgumentException(\"bootstrap_confdir must be a directory of configuration files\");\n          }\n          String confName = System.getProperty(ZkController.COLLECTION_PARAM_PREFIX+ZkController.CONFIGNAME_PROP, \"configuration1\");\n          zkController.uploadConfigDir(dir, confName);\n        }\n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (TimeoutException e) {\n        log.error(\"Could not connect to ZooKeeper\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (IOException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f1bdbf92da222965b46c0a942c3857ba56e5c638","date":1298297608,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/core/CoreContainer#initZooKeeper(String,int).mjava","pathOld":"solr/src/java/org/apache/solr/core/CoreContainer#initZooKeeper(String,int).mjava","sourceNew":"  protected void initZooKeeper(String zkHost, int zkClientTimeout) {\n    // if zkHost sys property is not set, we are not using ZooKeeper\n    String zookeeperHost;\n    if(zkHost == null) {\n      zookeeperHost = System.getProperty(\"zkHost\");\n    } else {\n      zookeeperHost = zkHost;\n    }\n\n    String zkRun = System.getProperty(\"zkRun\");\n\n    if (zkRun == null && zookeeperHost == null)\n        return;  // not in zk mode\n\n    // zookeeper in quorum mode currently causes a failure when trying to\n    // register log4j mbeans.  See SOLR-2369\n    // TODO: remove after updating to an slf4j based zookeeper\n    System.setProperty(\"zookeeper.jmx.log4j.disable\", \"true\");\n\n    zkServer = new SolrZkServer(zkRun, zookeeperHost, solrHome, hostPort);\n    zkServer.parseConfig();\n    zkServer.start();\n\n    // set client from server config if not already set\n    if (zookeeperHost == null) {\n      zookeeperHost = zkServer.getClientString();\n    }\n\n    int zkClientConnectTimeout = 5000;\n\n    if (zookeeperHost != null) {\n      // we are ZooKeeper enabled\n      try {\n        // If this is an ensemble, allow for a long connect time for other servers to come up\n        if (zkRun != null && zkServer.getServers().size() > 1) {\n          zkClientConnectTimeout = 24 * 60 * 60 * 1000;  // 1 day for embedded ensemble\n          log.info(\"Zookeeper client=\" + zookeeperHost + \"  Waiting for a quorum.\");\n        } else {\n          log.info(\"Zookeeper client=\" + zookeeperHost);          \n        }\n        zkController = new ZkController(zookeeperHost, zkClientTimeout, zkClientConnectTimeout, host, hostPort, hostContext);\n        \n        String confDir = System.getProperty(\"bootstrap_confdir\");\n        if(confDir != null) {\n          File dir = new File(confDir);\n          if(!dir.isDirectory()) {\n            throw new IllegalArgumentException(\"bootstrap_confdir must be a directory of configuration files\");\n          }\n          String confName = System.getProperty(ZkController.COLLECTION_PARAM_PREFIX+ZkController.CONFIGNAME_PROP, \"configuration1\");\n          zkController.uploadConfigDir(dir, confName);\n        }\n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (TimeoutException e) {\n        log.error(\"Could not connect to ZooKeeper\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (IOException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n    }\n    \n  }\n\n","sourceOld":"  protected void initZooKeeper(String zkHost, int zkClientTimeout) {\n    // if zkHost sys property is not set, we are not using ZooKeeper\n    String zookeeperHost;\n    if(zkHost == null) {\n      zookeeperHost = System.getProperty(\"zkHost\");\n    } else {\n      zookeeperHost = zkHost;\n    }\n\n    String zkRun = System.getProperty(\"zkRun\");\n\n    if (zkRun == null && zookeeperHost == null)\n        return;  // not in zk mode\n\n    zkServer = new SolrZkServer(zkRun, zookeeperHost, solrHome, hostPort);\n    zkServer.parseConfig();\n    zkServer.start();\n\n    // set client from server config if not already set\n    if (zookeeperHost == null) {\n      zookeeperHost = zkServer.getClientString();\n    }\n\n    int zkClientConnectTimeout = 5000;\n\n    if (zookeeperHost != null) {\n      // we are ZooKeeper enabled\n      try {\n        // If this is an ensemble, allow for a long connect time for other servers to come up\n        if (zkRun != null && zkServer.getServers().size() > 1) {\n          zkClientConnectTimeout = 24 * 60 * 60 * 1000;  // 1 day for embedded ensemble\n          log.info(\"Zookeeper client=\" + zookeeperHost + \"  Waiting for a quorum.\");\n        } else {\n          log.info(\"Zookeeper client=\" + zookeeperHost);          \n        }\n        zkController = new ZkController(zookeeperHost, zkClientTimeout, zkClientConnectTimeout, host, hostPort, hostContext);\n        \n        String confDir = System.getProperty(\"bootstrap_confdir\");\n        if(confDir != null) {\n          File dir = new File(confDir);\n          if(!dir.isDirectory()) {\n            throw new IllegalArgumentException(\"bootstrap_confdir must be a directory of configuration files\");\n          }\n          String confName = System.getProperty(ZkController.COLLECTION_PARAM_PREFIX+ZkController.CONFIGNAME_PROP, \"configuration1\");\n          zkController.uploadConfigDir(dir, confName);\n        }\n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (TimeoutException e) {\n        log.error(\"Could not connect to ZooKeeper\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (IOException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/core/CoreContainer#initZooKeeper(String,int).mjava","pathOld":"solr/src/java/org/apache/solr/core/CoreContainer#initZooKeeper(String,int).mjava","sourceNew":"  protected void initZooKeeper(String zkHost, int zkClientTimeout) {\n    // if zkHost sys property is not set, we are not using ZooKeeper\n    String zookeeperHost;\n    if(zkHost == null) {\n      zookeeperHost = System.getProperty(\"zkHost\");\n    } else {\n      zookeeperHost = zkHost;\n    }\n\n    String zkRun = System.getProperty(\"zkRun\");\n\n    if (zkRun == null && zookeeperHost == null)\n        return;  // not in zk mode\n\n    // zookeeper in quorum mode currently causes a failure when trying to\n    // register log4j mbeans.  See SOLR-2369\n    // TODO: remove after updating to an slf4j based zookeeper\n    System.setProperty(\"zookeeper.jmx.log4j.disable\", \"true\");\n\n    zkServer = new SolrZkServer(zkRun, zookeeperHost, solrHome, hostPort);\n    zkServer.parseConfig();\n    zkServer.start();\n\n    // set client from server config if not already set\n    if (zookeeperHost == null) {\n      zookeeperHost = zkServer.getClientString();\n    }\n\n    int zkClientConnectTimeout = 5000;\n\n    if (zookeeperHost != null) {\n      // we are ZooKeeper enabled\n      try {\n        // If this is an ensemble, allow for a long connect time for other servers to come up\n        if (zkRun != null && zkServer.getServers().size() > 1) {\n          zkClientConnectTimeout = 24 * 60 * 60 * 1000;  // 1 day for embedded ensemble\n          log.info(\"Zookeeper client=\" + zookeeperHost + \"  Waiting for a quorum.\");\n        } else {\n          log.info(\"Zookeeper client=\" + zookeeperHost);          \n        }\n        zkController = new ZkController(zookeeperHost, zkClientTimeout, zkClientConnectTimeout, host, hostPort, hostContext);\n        \n        String confDir = System.getProperty(\"bootstrap_confdir\");\n        if(confDir != null) {\n          File dir = new File(confDir);\n          if(!dir.isDirectory()) {\n            throw new IllegalArgumentException(\"bootstrap_confdir must be a directory of configuration files\");\n          }\n          String confName = System.getProperty(ZkController.COLLECTION_PARAM_PREFIX+ZkController.CONFIGNAME_PROP, \"configuration1\");\n          zkController.uploadConfigDir(dir, confName);\n        }\n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (TimeoutException e) {\n        log.error(\"Could not connect to ZooKeeper\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (IOException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n    }\n    \n  }\n\n","sourceOld":"  protected void initZooKeeper(String zkHost, int zkClientTimeout) {\n    // if zkHost sys property is not set, we are not using ZooKeeper\n    String zookeeperHost;\n    if(zkHost == null) {\n      zookeeperHost = System.getProperty(\"zkHost\");\n    } else {\n      zookeeperHost = zkHost;\n    }\n\n    String zkRun = System.getProperty(\"zkRun\");\n\n    if (zkRun == null && zookeeperHost == null)\n        return;  // not in zk mode\n\n    zkServer = new SolrZkServer(zkRun, zookeeperHost, solrHome, hostPort);\n    zkServer.parseConfig();\n    zkServer.start();\n\n    // set client from server config if not already set\n    if (zookeeperHost == null) {\n      zookeeperHost = zkServer.getClientString();\n    }\n\n    int zkClientConnectTimeout = 5000;\n\n    if (zookeeperHost != null) {\n      // we are ZooKeeper enabled\n      try {\n        // If this is an ensemble, allow for a long connect time for other servers to come up\n        if (zkRun != null && zkServer.getServers().size() > 1) {\n          zkClientConnectTimeout = 24 * 60 * 60 * 1000;  // 1 day for embedded ensemble\n          log.info(\"Zookeeper client=\" + zookeeperHost + \"  Waiting for a quorum.\");\n        } else {\n          log.info(\"Zookeeper client=\" + zookeeperHost);          \n        }\n        zkController = new ZkController(zookeeperHost, zkClientTimeout, zkClientConnectTimeout, host, hostPort, hostContext);\n        \n        String confDir = System.getProperty(\"bootstrap_confdir\");\n        if(confDir != null) {\n          File dir = new File(confDir);\n          if(!dir.isDirectory()) {\n            throw new IllegalArgumentException(\"bootstrap_confdir must be a directory of configuration files\");\n          }\n          String confName = System.getProperty(ZkController.COLLECTION_PARAM_PREFIX+ZkController.CONFIGNAME_PROP, \"configuration1\");\n          zkController.uploadConfigDir(dir, confName);\n        }\n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (TimeoutException e) {\n        log.error(\"Could not connect to ZooKeeper\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (IOException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#initZooKeeper(String,int).mjava","pathOld":"solr/src/java/org/apache/solr/core/CoreContainer#initZooKeeper(String,int).mjava","sourceNew":"  protected void initZooKeeper(String zkHost, int zkClientTimeout) {\n    // if zkHost sys property is not set, we are not using ZooKeeper\n    String zookeeperHost;\n    if(zkHost == null) {\n      zookeeperHost = System.getProperty(\"zkHost\");\n    } else {\n      zookeeperHost = zkHost;\n    }\n\n    String zkRun = System.getProperty(\"zkRun\");\n\n    if (zkRun == null && zookeeperHost == null)\n        return;  // not in zk mode\n\n    // zookeeper in quorum mode currently causes a failure when trying to\n    // register log4j mbeans.  See SOLR-2369\n    // TODO: remove after updating to an slf4j based zookeeper\n    System.setProperty(\"zookeeper.jmx.log4j.disable\", \"true\");\n\n    zkServer = new SolrZkServer(zkRun, zookeeperHost, solrHome, hostPort);\n    zkServer.parseConfig();\n    zkServer.start();\n\n    // set client from server config if not already set\n    if (zookeeperHost == null) {\n      zookeeperHost = zkServer.getClientString();\n    }\n\n    int zkClientConnectTimeout = 5000;\n\n    if (zookeeperHost != null) {\n      // we are ZooKeeper enabled\n      try {\n        // If this is an ensemble, allow for a long connect time for other servers to come up\n        if (zkRun != null && zkServer.getServers().size() > 1) {\n          zkClientConnectTimeout = 24 * 60 * 60 * 1000;  // 1 day for embedded ensemble\n          log.info(\"Zookeeper client=\" + zookeeperHost + \"  Waiting for a quorum.\");\n        } else {\n          log.info(\"Zookeeper client=\" + zookeeperHost);          \n        }\n        zkController = new ZkController(zookeeperHost, zkClientTimeout, zkClientConnectTimeout, host, hostPort, hostContext);\n        \n        String confDir = System.getProperty(\"bootstrap_confdir\");\n        if(confDir != null) {\n          File dir = new File(confDir);\n          if(!dir.isDirectory()) {\n            throw new IllegalArgumentException(\"bootstrap_confdir must be a directory of configuration files\");\n          }\n          String confName = System.getProperty(ZkController.COLLECTION_PARAM_PREFIX+ZkController.CONFIGNAME_PROP, \"configuration1\");\n          zkController.uploadConfigDir(dir, confName);\n        }\n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (TimeoutException e) {\n        log.error(\"Could not connect to ZooKeeper\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (IOException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n    }\n    \n  }\n\n","sourceOld":"  protected void initZooKeeper(String zkHost, int zkClientTimeout) {\n    // if zkHost sys property is not set, we are not using ZooKeeper\n    String zookeeperHost;\n    if(zkHost == null) {\n      zookeeperHost = System.getProperty(\"zkHost\");\n    } else {\n      zookeeperHost = zkHost;\n    }\n\n    String zkRun = System.getProperty(\"zkRun\");\n\n    if (zkRun == null && zookeeperHost == null)\n        return;  // not in zk mode\n\n    // zookeeper in quorum mode currently causes a failure when trying to\n    // register log4j mbeans.  See SOLR-2369\n    // TODO: remove after updating to an slf4j based zookeeper\n    System.setProperty(\"zookeeper.jmx.log4j.disable\", \"true\");\n\n    zkServer = new SolrZkServer(zkRun, zookeeperHost, solrHome, hostPort);\n    zkServer.parseConfig();\n    zkServer.start();\n\n    // set client from server config if not already set\n    if (zookeeperHost == null) {\n      zookeeperHost = zkServer.getClientString();\n    }\n\n    int zkClientConnectTimeout = 5000;\n\n    if (zookeeperHost != null) {\n      // we are ZooKeeper enabled\n      try {\n        // If this is an ensemble, allow for a long connect time for other servers to come up\n        if (zkRun != null && zkServer.getServers().size() > 1) {\n          zkClientConnectTimeout = 24 * 60 * 60 * 1000;  // 1 day for embedded ensemble\n          log.info(\"Zookeeper client=\" + zookeeperHost + \"  Waiting for a quorum.\");\n        } else {\n          log.info(\"Zookeeper client=\" + zookeeperHost);          \n        }\n        zkController = new ZkController(zookeeperHost, zkClientTimeout, zkClientConnectTimeout, host, hostPort, hostContext);\n        \n        String confDir = System.getProperty(\"bootstrap_confdir\");\n        if(confDir != null) {\n          File dir = new File(confDir);\n          if(!dir.isDirectory()) {\n            throw new IllegalArgumentException(\"bootstrap_confdir must be a directory of configuration files\");\n          }\n          String confName = System.getProperty(ZkController.COLLECTION_PARAM_PREFIX+ZkController.CONFIGNAME_PROP, \"configuration1\");\n          zkController.uploadConfigDir(dir, confName);\n        }\n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (TimeoutException e) {\n        log.error(\"Could not connect to ZooKeeper\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (IOException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#initZooKeeper(String,int).mjava","pathOld":"solr/src/java/org/apache/solr/core/CoreContainer#initZooKeeper(String,int).mjava","sourceNew":"  protected void initZooKeeper(String zkHost, int zkClientTimeout) {\n    // if zkHost sys property is not set, we are not using ZooKeeper\n    String zookeeperHost;\n    if(zkHost == null) {\n      zookeeperHost = System.getProperty(\"zkHost\");\n    } else {\n      zookeeperHost = zkHost;\n    }\n\n    String zkRun = System.getProperty(\"zkRun\");\n\n    if (zkRun == null && zookeeperHost == null)\n        return;  // not in zk mode\n\n    // zookeeper in quorum mode currently causes a failure when trying to\n    // register log4j mbeans.  See SOLR-2369\n    // TODO: remove after updating to an slf4j based zookeeper\n    System.setProperty(\"zookeeper.jmx.log4j.disable\", \"true\");\n\n    zkServer = new SolrZkServer(zkRun, zookeeperHost, solrHome, hostPort);\n    zkServer.parseConfig();\n    zkServer.start();\n\n    // set client from server config if not already set\n    if (zookeeperHost == null) {\n      zookeeperHost = zkServer.getClientString();\n    }\n\n    int zkClientConnectTimeout = 5000;\n\n    if (zookeeperHost != null) {\n      // we are ZooKeeper enabled\n      try {\n        // If this is an ensemble, allow for a long connect time for other servers to come up\n        if (zkRun != null && zkServer.getServers().size() > 1) {\n          zkClientConnectTimeout = 24 * 60 * 60 * 1000;  // 1 day for embedded ensemble\n          log.info(\"Zookeeper client=\" + zookeeperHost + \"  Waiting for a quorum.\");\n        } else {\n          log.info(\"Zookeeper client=\" + zookeeperHost);          \n        }\n        zkController = new ZkController(zookeeperHost, zkClientTimeout, zkClientConnectTimeout, host, hostPort, hostContext);\n        \n        String confDir = System.getProperty(\"bootstrap_confdir\");\n        if(confDir != null) {\n          File dir = new File(confDir);\n          if(!dir.isDirectory()) {\n            throw new IllegalArgumentException(\"bootstrap_confdir must be a directory of configuration files\");\n          }\n          String confName = System.getProperty(ZkController.COLLECTION_PARAM_PREFIX+ZkController.CONFIGNAME_PROP, \"configuration1\");\n          zkController.uploadConfigDir(dir, confName);\n        }\n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (TimeoutException e) {\n        log.error(\"Could not connect to ZooKeeper\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (IOException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n    }\n    \n  }\n\n","sourceOld":"  protected void initZooKeeper(String zkHost, int zkClientTimeout) {\n    // if zkHost sys property is not set, we are not using ZooKeeper\n    String zookeeperHost;\n    if(zkHost == null) {\n      zookeeperHost = System.getProperty(\"zkHost\");\n    } else {\n      zookeeperHost = zkHost;\n    }\n\n    String zkRun = System.getProperty(\"zkRun\");\n\n    if (zkRun == null && zookeeperHost == null)\n        return;  // not in zk mode\n\n    // zookeeper in quorum mode currently causes a failure when trying to\n    // register log4j mbeans.  See SOLR-2369\n    // TODO: remove after updating to an slf4j based zookeeper\n    System.setProperty(\"zookeeper.jmx.log4j.disable\", \"true\");\n\n    zkServer = new SolrZkServer(zkRun, zookeeperHost, solrHome, hostPort);\n    zkServer.parseConfig();\n    zkServer.start();\n\n    // set client from server config if not already set\n    if (zookeeperHost == null) {\n      zookeeperHost = zkServer.getClientString();\n    }\n\n    int zkClientConnectTimeout = 5000;\n\n    if (zookeeperHost != null) {\n      // we are ZooKeeper enabled\n      try {\n        // If this is an ensemble, allow for a long connect time for other servers to come up\n        if (zkRun != null && zkServer.getServers().size() > 1) {\n          zkClientConnectTimeout = 24 * 60 * 60 * 1000;  // 1 day for embedded ensemble\n          log.info(\"Zookeeper client=\" + zookeeperHost + \"  Waiting for a quorum.\");\n        } else {\n          log.info(\"Zookeeper client=\" + zookeeperHost);          \n        }\n        zkController = new ZkController(zookeeperHost, zkClientTimeout, zkClientConnectTimeout, host, hostPort, hostContext);\n        \n        String confDir = System.getProperty(\"bootstrap_confdir\");\n        if(confDir != null) {\n          File dir = new File(confDir);\n          if(!dir.isDirectory()) {\n            throw new IllegalArgumentException(\"bootstrap_confdir must be a directory of configuration files\");\n          }\n          String confName = System.getProperty(ZkController.COLLECTION_PARAM_PREFIX+ZkController.CONFIGNAME_PROP, \"configuration1\");\n          zkController.uploadConfigDir(dir, confName);\n        }\n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (TimeoutException e) {\n        log.error(\"Could not connect to ZooKeeper\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (IOException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#initZooKeeper(String,int).mjava","pathOld":"solr/src/java/org/apache/solr/core/CoreContainer#initZooKeeper(String,int).mjava","sourceNew":"  protected void initZooKeeper(String zkHost, int zkClientTimeout) {\n    // if zkHost sys property is not set, we are not using ZooKeeper\n    String zookeeperHost;\n    if(zkHost == null) {\n      zookeeperHost = System.getProperty(\"zkHost\");\n    } else {\n      zookeeperHost = zkHost;\n    }\n\n    String zkRun = System.getProperty(\"zkRun\");\n\n    if (zkRun == null && zookeeperHost == null)\n        return;  // not in zk mode\n\n    // zookeeper in quorum mode currently causes a failure when trying to\n    // register log4j mbeans.  See SOLR-2369\n    // TODO: remove after updating to an slf4j based zookeeper\n    System.setProperty(\"zookeeper.jmx.log4j.disable\", \"true\");\n\n    zkServer = new SolrZkServer(zkRun, zookeeperHost, solrHome, hostPort);\n    zkServer.parseConfig();\n    zkServer.start();\n\n    // set client from server config if not already set\n    if (zookeeperHost == null) {\n      zookeeperHost = zkServer.getClientString();\n    }\n\n    int zkClientConnectTimeout = 5000;\n\n    if (zookeeperHost != null) {\n      // we are ZooKeeper enabled\n      try {\n        // If this is an ensemble, allow for a long connect time for other servers to come up\n        if (zkRun != null && zkServer.getServers().size() > 1) {\n          zkClientConnectTimeout = 24 * 60 * 60 * 1000;  // 1 day for embedded ensemble\n          log.info(\"Zookeeper client=\" + zookeeperHost + \"  Waiting for a quorum.\");\n        } else {\n          log.info(\"Zookeeper client=\" + zookeeperHost);          \n        }\n        zkController = new ZkController(zookeeperHost, zkClientTimeout, zkClientConnectTimeout, host, hostPort, hostContext);\n        \n        String confDir = System.getProperty(\"bootstrap_confdir\");\n        if(confDir != null) {\n          File dir = new File(confDir);\n          if(!dir.isDirectory()) {\n            throw new IllegalArgumentException(\"bootstrap_confdir must be a directory of configuration files\");\n          }\n          String confName = System.getProperty(ZkController.COLLECTION_PARAM_PREFIX+ZkController.CONFIGNAME_PROP, \"configuration1\");\n          zkController.uploadConfigDir(dir, confName);\n        }\n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (TimeoutException e) {\n        log.error(\"Could not connect to ZooKeeper\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (IOException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n    }\n    \n  }\n\n","sourceOld":"  protected void initZooKeeper(String zkHost, int zkClientTimeout) {\n    // if zkHost sys property is not set, we are not using ZooKeeper\n    String zookeeperHost;\n    if(zkHost == null) {\n      zookeeperHost = System.getProperty(\"zkHost\");\n    } else {\n      zookeeperHost = zkHost;\n    }\n\n    String zkRun = System.getProperty(\"zkRun\");\n\n    if (zkRun == null && zookeeperHost == null)\n        return;  // not in zk mode\n\n    // zookeeper in quorum mode currently causes a failure when trying to\n    // register log4j mbeans.  See SOLR-2369\n    // TODO: remove after updating to an slf4j based zookeeper\n    System.setProperty(\"zookeeper.jmx.log4j.disable\", \"true\");\n\n    zkServer = new SolrZkServer(zkRun, zookeeperHost, solrHome, hostPort);\n    zkServer.parseConfig();\n    zkServer.start();\n\n    // set client from server config if not already set\n    if (zookeeperHost == null) {\n      zookeeperHost = zkServer.getClientString();\n    }\n\n    int zkClientConnectTimeout = 5000;\n\n    if (zookeeperHost != null) {\n      // we are ZooKeeper enabled\n      try {\n        // If this is an ensemble, allow for a long connect time for other servers to come up\n        if (zkRun != null && zkServer.getServers().size() > 1) {\n          zkClientConnectTimeout = 24 * 60 * 60 * 1000;  // 1 day for embedded ensemble\n          log.info(\"Zookeeper client=\" + zookeeperHost + \"  Waiting for a quorum.\");\n        } else {\n          log.info(\"Zookeeper client=\" + zookeeperHost);          \n        }\n        zkController = new ZkController(zookeeperHost, zkClientTimeout, zkClientConnectTimeout, host, hostPort, hostContext);\n        \n        String confDir = System.getProperty(\"bootstrap_confdir\");\n        if(confDir != null) {\n          File dir = new File(confDir);\n          if(!dir.isDirectory()) {\n            throw new IllegalArgumentException(\"bootstrap_confdir must be a directory of configuration files\");\n          }\n          String confName = System.getProperty(ZkController.COLLECTION_PARAM_PREFIX+ZkController.CONFIGNAME_PROP, \"configuration1\");\n          zkController.uploadConfigDir(dir, confName);\n        }\n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (TimeoutException e) {\n        log.error(\"Could not connect to ZooKeeper\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (IOException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"43adc163640856c8b07e4cf1b2046c9af56d3ae7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f1bdbf92da222965b46c0a942c3857ba56e5c638":["4ecea1664e8617d82eca3b8055a3c37cb4da8511","685a6cc5a1ec4f67026d628051c8d25971f6ca31"],"685a6cc5a1ec4f67026d628051c8d25971f6ca31":["3d27fdb664de1d2da1efdddf2ccf6973dd072c69"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["685a6cc5a1ec4f67026d628051c8d25971f6ca31"],"c26f00b574427b55127e869b935845554afde1fa":["685a6cc5a1ec4f67026d628051c8d25971f6ca31","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["685a6cc5a1ec4f67026d628051c8d25971f6ca31"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3d27fdb664de1d2da1efdddf2ccf6973dd072c69"],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3d27fdb664de1d2da1efdddf2ccf6973dd072c69"],"3d27fdb664de1d2da1efdddf2ccf6973dd072c69":["43adc163640856c8b07e4cf1b2046c9af56d3ae7"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","685a6cc5a1ec4f67026d628051c8d25971f6ca31"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"43adc163640856c8b07e4cf1b2046c9af56d3ae7":["3d27fdb664de1d2da1efdddf2ccf6973dd072c69"],"f1bdbf92da222965b46c0a942c3857ba56e5c638":[],"685a6cc5a1ec4f67026d628051c8d25971f6ca31":["f1bdbf92da222965b46c0a942c3857ba56e5c638","c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["43adc163640856c8b07e4cf1b2046c9af56d3ae7","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","4ecea1664e8617d82eca3b8055a3c37cb4da8511"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":["f1bdbf92da222965b46c0a942c3857ba56e5c638"],"3d27fdb664de1d2da1efdddf2ccf6973dd072c69":["685a6cc5a1ec4f67026d628051c8d25971f6ca31","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","4ecea1664e8617d82eca3b8055a3c37cb4da8511"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["f1bdbf92da222965b46c0a942c3857ba56e5c638","a258fbb26824fd104ed795e5d9033d2d040049ee","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}