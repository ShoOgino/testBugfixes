{"path":"lucene/core/src/java/org/apache/lucene/index/FreqProxFields.FreqProxTermsEnum#postings(Bits,PostingsEnum,int).mjava","commits":[{"id":"51f5280f31484820499077f41fcdfe92d527d9dc","date":1423229122,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/FreqProxFields.FreqProxTermsEnum#postings(Bits,PostingsEnum,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/FreqProxFields.FreqProxTermsEnum#docs(Bits,DocsEnum,int).mjava","sourceNew":"    @Override\n    public PostingsEnum postings(Bits liveDocs, PostingsEnum reuse, int flags) {\n      if (liveDocs != null) {\n        throw new IllegalArgumentException(\"liveDocs must be null\");\n      }\n\n      if ((flags & PostingsEnum.FLAG_POSITIONS) >= PostingsEnum.FLAG_POSITIONS) {\n        FreqProxPostingsEnum posEnum;\n\n        if (!terms.hasProx) {\n          // Caller wants positions but we didn't index them;\n          // don't lie:\n          throw new IllegalArgumentException(\"did not index positions\");\n        }\n\n        if (!terms.hasOffsets && (flags & PostingsEnum.FLAG_OFFSETS) == PostingsEnum.FLAG_OFFSETS) {\n          // Caller wants offsets but we didn't index them;\n          // don't lie:\n          throw new IllegalArgumentException(\"did not index offsets\");\n        }\n\n        if (reuse instanceof FreqProxPostingsEnum) {\n          posEnum = (FreqProxPostingsEnum) reuse;\n          if (posEnum.postingsArray != postingsArray) {\n            posEnum = new FreqProxPostingsEnum(terms, postingsArray);\n          }\n        } else {\n          posEnum = new FreqProxPostingsEnum(terms, postingsArray);\n        }\n        posEnum.reset(sortedTermIDs[ord]);\n        return posEnum;\n      }\n\n      FreqProxDocsEnum docsEnum;\n\n      if (!terms.hasFreq && (flags & PostingsEnum.FLAG_FREQS) != 0) {\n        // Caller wants freqs but we didn't index them;\n        // don't lie:\n        throw new IllegalArgumentException(\"did not index freq\");\n      }\n\n      if (reuse instanceof FreqProxDocsEnum) {\n        docsEnum = (FreqProxDocsEnum) reuse;\n        if (docsEnum.postingsArray != postingsArray) {\n          docsEnum = new FreqProxDocsEnum(terms, postingsArray);\n        }\n      } else {\n        docsEnum = new FreqProxDocsEnum(terms, postingsArray);\n      }\n      docsEnum.reset(sortedTermIDs[ord]);\n      return docsEnum;\n    }\n\n","sourceOld":"    @Override\n    public DocsEnum docs(Bits liveDocs, DocsEnum reuse, int flags) {\n      if (liveDocs != null) {\n        throw new IllegalArgumentException(\"liveDocs must be null\");\n      }\n\n      FreqProxDocsEnum docsEnum;\n\n      if (!terms.hasFreq && (flags & DocsEnum.FLAG_FREQS) != 0) {\n        // Caller wants freqs but we didn't index them;\n        // don't lie:\n        throw new IllegalArgumentException(\"did not index freq\");\n      }\n\n      if (reuse instanceof FreqProxDocsEnum) {\n        docsEnum = (FreqProxDocsEnum) reuse;\n        if (docsEnum.postingsArray != postingsArray) {\n          docsEnum = new FreqProxDocsEnum(terms, postingsArray);\n        }\n      } else {\n        docsEnum = new FreqProxDocsEnum(terms, postingsArray);\n      }\n      docsEnum.reset(sortedTermIDs[ord]);\n      return docsEnum;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e73063b92d958076ef4ae8beb5f493e8ccdcecb4","date":1424177215,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/FreqProxFields.FreqProxTermsEnum#postings(Bits,PostingsEnum,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/FreqProxFields.FreqProxTermsEnum#postings(Bits,PostingsEnum,int).mjava","sourceNew":"    @Override\n    public PostingsEnum postings(Bits liveDocs, PostingsEnum reuse, int flags) {\n      if (liveDocs != null) {\n        throw new IllegalArgumentException(\"liveDocs must be null\");\n      }\n\n      if ((flags & PostingsEnum.POSITIONS) >= PostingsEnum.POSITIONS) {\n        FreqProxPostingsEnum posEnum;\n\n        if (!terms.hasProx) {\n          // Caller wants positions but we didn't index them;\n          // don't lie:\n          throw new IllegalArgumentException(\"did not index positions\");\n        }\n\n        if (!terms.hasOffsets && (flags & PostingsEnum.OFFSETS) == PostingsEnum.OFFSETS) {\n          // Caller wants offsets but we didn't index them;\n          // don't lie:\n          throw new IllegalArgumentException(\"did not index offsets\");\n        }\n\n        if (reuse instanceof FreqProxPostingsEnum) {\n          posEnum = (FreqProxPostingsEnum) reuse;\n          if (posEnum.postingsArray != postingsArray) {\n            posEnum = new FreqProxPostingsEnum(terms, postingsArray);\n          }\n        } else {\n          posEnum = new FreqProxPostingsEnum(terms, postingsArray);\n        }\n        posEnum.reset(sortedTermIDs[ord]);\n        return posEnum;\n      }\n\n      FreqProxDocsEnum docsEnum;\n\n      if (!terms.hasFreq && (flags & PostingsEnum.FREQS) != 0) {\n        // Caller wants freqs but we didn't index them;\n        // don't lie:\n        throw new IllegalArgumentException(\"did not index freq\");\n      }\n\n      if (reuse instanceof FreqProxDocsEnum) {\n        docsEnum = (FreqProxDocsEnum) reuse;\n        if (docsEnum.postingsArray != postingsArray) {\n          docsEnum = new FreqProxDocsEnum(terms, postingsArray);\n        }\n      } else {\n        docsEnum = new FreqProxDocsEnum(terms, postingsArray);\n      }\n      docsEnum.reset(sortedTermIDs[ord]);\n      return docsEnum;\n    }\n\n","sourceOld":"    @Override\n    public PostingsEnum postings(Bits liveDocs, PostingsEnum reuse, int flags) {\n      if (liveDocs != null) {\n        throw new IllegalArgumentException(\"liveDocs must be null\");\n      }\n\n      if ((flags & PostingsEnum.FLAG_POSITIONS) >= PostingsEnum.FLAG_POSITIONS) {\n        FreqProxPostingsEnum posEnum;\n\n        if (!terms.hasProx) {\n          // Caller wants positions but we didn't index them;\n          // don't lie:\n          throw new IllegalArgumentException(\"did not index positions\");\n        }\n\n        if (!terms.hasOffsets && (flags & PostingsEnum.FLAG_OFFSETS) == PostingsEnum.FLAG_OFFSETS) {\n          // Caller wants offsets but we didn't index them;\n          // don't lie:\n          throw new IllegalArgumentException(\"did not index offsets\");\n        }\n\n        if (reuse instanceof FreqProxPostingsEnum) {\n          posEnum = (FreqProxPostingsEnum) reuse;\n          if (posEnum.postingsArray != postingsArray) {\n            posEnum = new FreqProxPostingsEnum(terms, postingsArray);\n          }\n        } else {\n          posEnum = new FreqProxPostingsEnum(terms, postingsArray);\n        }\n        posEnum.reset(sortedTermIDs[ord]);\n        return posEnum;\n      }\n\n      FreqProxDocsEnum docsEnum;\n\n      if (!terms.hasFreq && (flags & PostingsEnum.FLAG_FREQS) != 0) {\n        // Caller wants freqs but we didn't index them;\n        // don't lie:\n        throw new IllegalArgumentException(\"did not index freq\");\n      }\n\n      if (reuse instanceof FreqProxDocsEnum) {\n        docsEnum = (FreqProxDocsEnum) reuse;\n        if (docsEnum.postingsArray != postingsArray) {\n          docsEnum = new FreqProxDocsEnum(terms, postingsArray);\n        }\n      } else {\n        docsEnum = new FreqProxDocsEnum(terms, postingsArray);\n      }\n      docsEnum.reset(sortedTermIDs[ord]);\n      return docsEnum;\n    }\n\n","bugFix":null,"bugIntro":["6bded7e784a0edc186af47e44fc86f73b8288791"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a9023c2bf8056230665bace786651c0716d78d31","date":1424736578,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/FreqProxFields.FreqProxTermsEnum#postings(Bits,PostingsEnum,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/FreqProxFields.FreqProxTermsEnum#postings(Bits,PostingsEnum,int).mjava","sourceNew":"    @Override\n    public PostingsEnum postings(Bits liveDocs, PostingsEnum reuse, int flags) {\n      if (liveDocs != null) {\n        throw new IllegalArgumentException(\"liveDocs must be null\");\n      }\n\n      if ((flags & PostingsEnum.POSITIONS) >= PostingsEnum.POSITIONS) {\n        FreqProxPostingsEnum posEnum;\n\n        if (!terms.hasProx) {\n          // Caller wants positions but we didn't index them;\n          // don't lie:\n          throw new IllegalArgumentException(\"did not index positions\");\n        }\n\n        if (!terms.hasOffsets && PostingsEnum.featureRequested(flags, PostingsEnum.OFFSETS)) {\n          // Caller wants offsets but we didn't index them;\n          // don't lie:\n          throw new IllegalArgumentException(\"did not index offsets\");\n        }\n\n        if (reuse instanceof FreqProxPostingsEnum) {\n          posEnum = (FreqProxPostingsEnum) reuse;\n          if (posEnum.postingsArray != postingsArray) {\n            posEnum = new FreqProxPostingsEnum(terms, postingsArray);\n          }\n        } else {\n          posEnum = new FreqProxPostingsEnum(terms, postingsArray);\n        }\n        posEnum.reset(sortedTermIDs[ord]);\n        return posEnum;\n      }\n\n      FreqProxDocsEnum docsEnum;\n\n      if (!terms.hasFreq && PostingsEnum.featureRequested(flags, PostingsEnum.FREQS)) {\n        // Caller wants freqs but we didn't index them;\n        // don't lie:\n        throw new IllegalArgumentException(\"did not index freq\");\n      }\n\n      if (reuse instanceof FreqProxDocsEnum) {\n        docsEnum = (FreqProxDocsEnum) reuse;\n        if (docsEnum.postingsArray != postingsArray) {\n          docsEnum = new FreqProxDocsEnum(terms, postingsArray);\n        }\n      } else {\n        docsEnum = new FreqProxDocsEnum(terms, postingsArray);\n      }\n      docsEnum.reset(sortedTermIDs[ord]);\n      return docsEnum;\n    }\n\n","sourceOld":"    @Override\n    public PostingsEnum postings(Bits liveDocs, PostingsEnum reuse, int flags) {\n      if (liveDocs != null) {\n        throw new IllegalArgumentException(\"liveDocs must be null\");\n      }\n\n      if ((flags & PostingsEnum.POSITIONS) >= PostingsEnum.POSITIONS) {\n        FreqProxPostingsEnum posEnum;\n\n        if (!terms.hasProx) {\n          // Caller wants positions but we didn't index them;\n          // don't lie:\n          throw new IllegalArgumentException(\"did not index positions\");\n        }\n\n        if (!terms.hasOffsets && (flags & PostingsEnum.OFFSETS) == PostingsEnum.OFFSETS) {\n          // Caller wants offsets but we didn't index them;\n          // don't lie:\n          throw new IllegalArgumentException(\"did not index offsets\");\n        }\n\n        if (reuse instanceof FreqProxPostingsEnum) {\n          posEnum = (FreqProxPostingsEnum) reuse;\n          if (posEnum.postingsArray != postingsArray) {\n            posEnum = new FreqProxPostingsEnum(terms, postingsArray);\n          }\n        } else {\n          posEnum = new FreqProxPostingsEnum(terms, postingsArray);\n        }\n        posEnum.reset(sortedTermIDs[ord]);\n        return posEnum;\n      }\n\n      FreqProxDocsEnum docsEnum;\n\n      if (!terms.hasFreq && (flags & PostingsEnum.FREQS) != 0) {\n        // Caller wants freqs but we didn't index them;\n        // don't lie:\n        throw new IllegalArgumentException(\"did not index freq\");\n      }\n\n      if (reuse instanceof FreqProxDocsEnum) {\n        docsEnum = (FreqProxDocsEnum) reuse;\n        if (docsEnum.postingsArray != postingsArray) {\n          docsEnum = new FreqProxDocsEnum(terms, postingsArray);\n        }\n      } else {\n        docsEnum = new FreqProxDocsEnum(terms, postingsArray);\n      }\n      docsEnum.reset(sortedTermIDs[ord]);\n      return docsEnum;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6bded7e784a0edc186af47e44fc86f73b8288791","date":1424816170,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/FreqProxFields.FreqProxTermsEnum#postings(Bits,PostingsEnum,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/FreqProxFields.FreqProxTermsEnum#postings(Bits,PostingsEnum,int).mjava","sourceNew":"    @Override\n    public PostingsEnum postings(Bits liveDocs, PostingsEnum reuse, int flags) {\n      if (liveDocs != null) {\n        throw new IllegalArgumentException(\"liveDocs must be null\");\n      }\n\n      if (PostingsEnum.featureRequested(flags, PostingsEnum.POSITIONS)) {\n        FreqProxPostingsEnum posEnum;\n\n        if (!terms.hasProx) {\n          // Caller wants positions but we didn't index them;\n          // don't lie:\n          throw new IllegalArgumentException(\"did not index positions\");\n        }\n\n        if (!terms.hasOffsets && PostingsEnum.featureRequested(flags, PostingsEnum.OFFSETS)) {\n          // Caller wants offsets but we didn't index them;\n          // don't lie:\n          throw new IllegalArgumentException(\"did not index offsets\");\n        }\n\n        if (reuse instanceof FreqProxPostingsEnum) {\n          posEnum = (FreqProxPostingsEnum) reuse;\n          if (posEnum.postingsArray != postingsArray) {\n            posEnum = new FreqProxPostingsEnum(terms, postingsArray);\n          }\n        } else {\n          posEnum = new FreqProxPostingsEnum(terms, postingsArray);\n        }\n        posEnum.reset(sortedTermIDs[ord]);\n        return posEnum;\n      }\n\n      FreqProxDocsEnum docsEnum;\n\n      if (!terms.hasFreq && PostingsEnum.featureRequested(flags, PostingsEnum.FREQS)) {\n        // Caller wants freqs but we didn't index them;\n        // don't lie:\n        throw new IllegalArgumentException(\"did not index freq\");\n      }\n\n      if (reuse instanceof FreqProxDocsEnum) {\n        docsEnum = (FreqProxDocsEnum) reuse;\n        if (docsEnum.postingsArray != postingsArray) {\n          docsEnum = new FreqProxDocsEnum(terms, postingsArray);\n        }\n      } else {\n        docsEnum = new FreqProxDocsEnum(terms, postingsArray);\n      }\n      docsEnum.reset(sortedTermIDs[ord]);\n      return docsEnum;\n    }\n\n","sourceOld":"    @Override\n    public PostingsEnum postings(Bits liveDocs, PostingsEnum reuse, int flags) {\n      if (liveDocs != null) {\n        throw new IllegalArgumentException(\"liveDocs must be null\");\n      }\n\n      if ((flags & PostingsEnum.POSITIONS) >= PostingsEnum.POSITIONS) {\n        FreqProxPostingsEnum posEnum;\n\n        if (!terms.hasProx) {\n          // Caller wants positions but we didn't index them;\n          // don't lie:\n          throw new IllegalArgumentException(\"did not index positions\");\n        }\n\n        if (!terms.hasOffsets && PostingsEnum.featureRequested(flags, PostingsEnum.OFFSETS)) {\n          // Caller wants offsets but we didn't index them;\n          // don't lie:\n          throw new IllegalArgumentException(\"did not index offsets\");\n        }\n\n        if (reuse instanceof FreqProxPostingsEnum) {\n          posEnum = (FreqProxPostingsEnum) reuse;\n          if (posEnum.postingsArray != postingsArray) {\n            posEnum = new FreqProxPostingsEnum(terms, postingsArray);\n          }\n        } else {\n          posEnum = new FreqProxPostingsEnum(terms, postingsArray);\n        }\n        posEnum.reset(sortedTermIDs[ord]);\n        return posEnum;\n      }\n\n      FreqProxDocsEnum docsEnum;\n\n      if (!terms.hasFreq && PostingsEnum.featureRequested(flags, PostingsEnum.FREQS)) {\n        // Caller wants freqs but we didn't index them;\n        // don't lie:\n        throw new IllegalArgumentException(\"did not index freq\");\n      }\n\n      if (reuse instanceof FreqProxDocsEnum) {\n        docsEnum = (FreqProxDocsEnum) reuse;\n        if (docsEnum.postingsArray != postingsArray) {\n          docsEnum = new FreqProxDocsEnum(terms, postingsArray);\n        }\n      } else {\n        docsEnum = new FreqProxDocsEnum(terms, postingsArray);\n      }\n      docsEnum.reset(sortedTermIDs[ord]);\n      return docsEnum;\n    }\n\n","bugFix":["e73063b92d958076ef4ae8beb5f493e8ccdcecb4"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f4464508ee83288c8c4585b533f9faaa93aa314","date":1435240759,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/FreqProxFields.FreqProxTermsEnum#postings(PostingsEnum,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/FreqProxFields.FreqProxTermsEnum#postings(Bits,PostingsEnum,int).mjava","sourceNew":"    @Override\n    public PostingsEnum postings(PostingsEnum reuse, int flags) {\n      if (PostingsEnum.featureRequested(flags, PostingsEnum.POSITIONS)) {\n        FreqProxPostingsEnum posEnum;\n\n        if (!terms.hasProx) {\n          // Caller wants positions but we didn't index them;\n          // don't lie:\n          throw new IllegalArgumentException(\"did not index positions\");\n        }\n\n        if (!terms.hasOffsets && PostingsEnum.featureRequested(flags, PostingsEnum.OFFSETS)) {\n          // Caller wants offsets but we didn't index them;\n          // don't lie:\n          throw new IllegalArgumentException(\"did not index offsets\");\n        }\n\n        if (reuse instanceof FreqProxPostingsEnum) {\n          posEnum = (FreqProxPostingsEnum) reuse;\n          if (posEnum.postingsArray != postingsArray) {\n            posEnum = new FreqProxPostingsEnum(terms, postingsArray);\n          }\n        } else {\n          posEnum = new FreqProxPostingsEnum(terms, postingsArray);\n        }\n        posEnum.reset(sortedTermIDs[ord]);\n        return posEnum;\n      }\n\n      FreqProxDocsEnum docsEnum;\n\n      if (!terms.hasFreq && PostingsEnum.featureRequested(flags, PostingsEnum.FREQS)) {\n        // Caller wants freqs but we didn't index them;\n        // don't lie:\n        throw new IllegalArgumentException(\"did not index freq\");\n      }\n\n      if (reuse instanceof FreqProxDocsEnum) {\n        docsEnum = (FreqProxDocsEnum) reuse;\n        if (docsEnum.postingsArray != postingsArray) {\n          docsEnum = new FreqProxDocsEnum(terms, postingsArray);\n        }\n      } else {\n        docsEnum = new FreqProxDocsEnum(terms, postingsArray);\n      }\n      docsEnum.reset(sortedTermIDs[ord]);\n      return docsEnum;\n    }\n\n","sourceOld":"    @Override\n    public PostingsEnum postings(Bits liveDocs, PostingsEnum reuse, int flags) {\n      if (liveDocs != null) {\n        throw new IllegalArgumentException(\"liveDocs must be null\");\n      }\n\n      if (PostingsEnum.featureRequested(flags, PostingsEnum.POSITIONS)) {\n        FreqProxPostingsEnum posEnum;\n\n        if (!terms.hasProx) {\n          // Caller wants positions but we didn't index them;\n          // don't lie:\n          throw new IllegalArgumentException(\"did not index positions\");\n        }\n\n        if (!terms.hasOffsets && PostingsEnum.featureRequested(flags, PostingsEnum.OFFSETS)) {\n          // Caller wants offsets but we didn't index them;\n          // don't lie:\n          throw new IllegalArgumentException(\"did not index offsets\");\n        }\n\n        if (reuse instanceof FreqProxPostingsEnum) {\n          posEnum = (FreqProxPostingsEnum) reuse;\n          if (posEnum.postingsArray != postingsArray) {\n            posEnum = new FreqProxPostingsEnum(terms, postingsArray);\n          }\n        } else {\n          posEnum = new FreqProxPostingsEnum(terms, postingsArray);\n        }\n        posEnum.reset(sortedTermIDs[ord]);\n        return posEnum;\n      }\n\n      FreqProxDocsEnum docsEnum;\n\n      if (!terms.hasFreq && PostingsEnum.featureRequested(flags, PostingsEnum.FREQS)) {\n        // Caller wants freqs but we didn't index them;\n        // don't lie:\n        throw new IllegalArgumentException(\"did not index freq\");\n      }\n\n      if (reuse instanceof FreqProxDocsEnum) {\n        docsEnum = (FreqProxDocsEnum) reuse;\n        if (docsEnum.postingsArray != postingsArray) {\n          docsEnum = new FreqProxDocsEnum(terms, postingsArray);\n        }\n      } else {\n        docsEnum = new FreqProxDocsEnum(terms, postingsArray);\n      }\n      docsEnum.reset(sortedTermIDs[ord]);\n      return docsEnum;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0f4464508ee83288c8c4585b533f9faaa93aa314":["6bded7e784a0edc186af47e44fc86f73b8288791"],"e73063b92d958076ef4ae8beb5f493e8ccdcecb4":["51f5280f31484820499077f41fcdfe92d527d9dc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6bded7e784a0edc186af47e44fc86f73b8288791":["a9023c2bf8056230665bace786651c0716d78d31"],"a9023c2bf8056230665bace786651c0716d78d31":["e73063b92d958076ef4ae8beb5f493e8ccdcecb4"],"51f5280f31484820499077f41fcdfe92d527d9dc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f4464508ee83288c8c4585b533f9faaa93aa314"]},"commit2Childs":{"0f4464508ee83288c8c4585b533f9faaa93aa314":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e73063b92d958076ef4ae8beb5f493e8ccdcecb4":["a9023c2bf8056230665bace786651c0716d78d31"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["51f5280f31484820499077f41fcdfe92d527d9dc"],"6bded7e784a0edc186af47e44fc86f73b8288791":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"a9023c2bf8056230665bace786651c0716d78d31":["6bded7e784a0edc186af47e44fc86f73b8288791"],"51f5280f31484820499077f41fcdfe92d527d9dc":["e73063b92d958076ef4ae8beb5f493e8ccdcecb4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}