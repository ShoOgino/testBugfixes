{"path":"lucene/src/java/org/apache/lucene/document/NumericField#tokenStream(Analyzer).mjava","commits":[{"id":"8b3bdb938a073ccc28d7ed813f6e8c4cb58e04c5","date":1316747797,"type":1,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/document/NumericField#tokenStream(Analyzer).mjava","pathOld":"lucene/src/java/org/apache/lucene/document/NumericField#tokenStreamValue().mjava","sourceNew":"  /** Returns a {@link NumericTokenStream} for indexing the numeric value. */\n  public TokenStream tokenStream(Analyzer analyzer) {\n    if (!type.indexed()) return null;\n    if (numericTS == null) {\n      // lazy init the TokenStream as it is heavy to instantiate\n      // (attributes,...),\n      // if not needed (stored field loading)\n      numericTS = new NumericTokenStream(precisionStep);\n      // initialize value in TokenStream\n      if (fieldsData != null) {\n        assert dataType != null;\n        final Number val = (Number) fieldsData;\n        switch (dataType) {\n          case INT:\n            numericTS.setIntValue(val.intValue());\n            break;\n          case LONG:\n            numericTS.setLongValue(val.longValue());\n            break;\n          case FLOAT:\n            numericTS.setFloatValue(val.floatValue());\n            break;\n          case DOUBLE:\n            numericTS.setDoubleValue(val.doubleValue());\n            break;\n          default:\n            assert false : \"Should never get here\";\n        }\n      }\n    }\n    return numericTS;\n  }\n\n","sourceOld":"  /** Returns a {@link NumericTokenStream} for indexing the numeric value. */\n  public TokenStream tokenStreamValue() {\n    if (!type.indexed()) return null;\n    if (numericTS == null) {\n      // lazy init the TokenStream as it is heavy to instantiate\n      // (attributes,...),\n      // if not needed (stored field loading)\n      numericTS = new NumericTokenStream(precisionStep);\n      // initialize value in TokenStream\n      if (fieldsData != null) {\n        assert dataType != null;\n        final Number val = (Number) fieldsData;\n        switch (dataType) {\n          case INT:\n            numericTS.setIntValue(val.intValue());\n            break;\n          case LONG:\n            numericTS.setLongValue(val.longValue());\n            break;\n          case FLOAT:\n            numericTS.setFloatValue(val.floatValue());\n            break;\n          case DOUBLE:\n            numericTS.setDoubleValue(val.doubleValue());\n            break;\n          default:\n            assert false : \"Should never get here\";\n        }\n      }\n    }\n    return numericTS;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fa0f44f887719e97183771e977cfc4bfb485b766","date":1326668713,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/document/NumericField#tokenStream(Analyzer).mjava","sourceNew":null,"sourceOld":"  /** Returns a {@link NumericTokenStream} for indexing the numeric value. */\n  public TokenStream tokenStream(Analyzer analyzer) {\n    if (!type.indexed()) return null;\n    if (numericTS == null) {\n      // lazy init the TokenStream as it is heavy to instantiate\n      // (attributes,...),\n      // if not needed (stored field loading)\n      numericTS = new NumericTokenStream(precisionStep);\n      // initialize value in TokenStream\n      if (fieldsData != null) {\n        assert dataType != null;\n        final Number val = (Number) fieldsData;\n        switch (dataType) {\n          case INT:\n            numericTS.setIntValue(val.intValue());\n            break;\n          case LONG:\n            numericTS.setLongValue(val.longValue());\n            break;\n          case FLOAT:\n            numericTS.setFloatValue(val.floatValue());\n            break;\n          case DOUBLE:\n            numericTS.setDoubleValue(val.doubleValue());\n            break;\n          default:\n            assert false : \"Should never get here\";\n        }\n      }\n    }\n    return numericTS;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fa0f44f887719e97183771e977cfc4bfb485b766":["8b3bdb938a073ccc28d7ed813f6e8c4cb58e04c5"],"8b3bdb938a073ccc28d7ed813f6e8c4cb58e04c5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fa0f44f887719e97183771e977cfc4bfb485b766"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8b3bdb938a073ccc28d7ed813f6e8c4cb58e04c5"],"fa0f44f887719e97183771e977cfc4bfb485b766":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"8b3bdb938a073ccc28d7ed813f6e8c4cb58e04c5":["fa0f44f887719e97183771e977cfc4bfb485b766"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}