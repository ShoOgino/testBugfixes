{"path":"src/java/org/apache/lucene/search/TermRangeTermEnum#TermRangeTermEnum(IndexReader,String,String,String,boolean,boolean,Collator).mjava","commits":[{"id":"45ede1fd11bf564bb5c8c195d421782675d1e61c","date":1246809712,"type":1,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/TermRangeTermEnum#TermRangeTermEnum(IndexReader,String,String,String,boolean,boolean,Collator).mjava","pathOld":"src/java/org/apache/lucene/search/TermRangeTermEnum#TermRangeTermEnum(IndexReader,Collator,String,String,String,boolean,boolean).mjava","sourceNew":"  /**\n   * Enumerates all terms greater/equal than <code>lowerTerm</code>\n   * but less/equal than <code>upperTerm</code>. \n   * \n   * If an endpoint is null, it is said to be \"open\". Either or both \n   * endpoints may be open.  Open endpoints may not be exclusive \n   * (you can't select all but the first or last term without \n   * explicitly specifying the term to exclude.)\n   * \n   * @param reader\n   * @param field\n   *          An interned field that holds both lower and upper terms.\n   * @param lowerTermText\n   *          The term text at the lower end of the range\n   * @param upperTermText\n   *          The term text at the upper end of the range\n   * @param includeLower\n   *          If true, the <code>lowerTerm</code> is included in the range.\n   * @param includeUpper\n   *          If true, the <code>upperTerm</code> is included in the range.\n   * @param collator\n   *          The collator to use to collate index Terms, to determine their\n   *          membership in the range bounded by <code>lowerTerm</code> and\n   *          <code>upperTerm</code>.\n   * \n   * @throws IOException\n   */\n  public TermRangeTermEnum(IndexReader reader, String field, String lowerTermText, String upperTermText, \n    boolean includeLower, boolean includeUpper, Collator collator) throws IOException {\n    this.collator = collator;\n    this.upperTermText = upperTermText;\n    this.lowerTermText = lowerTermText;\n    this.includeLower = includeLower;\n    this.includeUpper = includeUpper;\n    this.field = field.intern();\n    \n    // do a little bit of normalization...\n    // open ended range queries should always be inclusive.\n    if (this.lowerTermText == null) {\n      this.lowerTermText = \"\";\n      this.includeLower = true;\n    }\n    \n    if (this.upperTermText == null) {\n      this.includeUpper = true;\n    }\n\n    String startTermText = collator == null ? this.lowerTermText : \"\";\n    setEnum(reader.terms(new Term(this.field, startTermText)));\n  }\n\n","sourceOld":"  /**\n   * Enumerates all terms greater/equal than <code>lowerTerm</code>\n   * but less/equal than <code>upperTerm</code>. \n   * \n   * If an endpoint is null, it is said to be \"open\". Either or both \n   * endpoints may be open.  Open endpoints may not be exclusive \n   * (you can't select all but the first or last term without \n   * explicitly specifying the term to exclude.)\n   * \n   * @param reader\n   * @param collator\n   *          The collator to use to collate index Terms, to determine their\n   *          membership in the range bounded by <code>lowerTerm</code> and\n   *          <code>upperTerm</code>.\n   * @param field\n   *          An interned field that holds both lower and upper terms.\n   * @param lowerTermText\n   *          The term text at the lower end of the range\n   * @param upperTermText\n   *          The term text at the upper end of the range\n   * @param includeLower\n   *          If true, the <code>lowerTerm</code> is included in the range.\n   * @param includeUpper\n   *          If true, the <code>upperTerm</code> is included in the range.\n   * \n   * @throws IOException\n   */\n  public TermRangeTermEnum(IndexReader reader, Collator collator, String field,\n      String lowerTermText, String upperTermText, boolean includeLower, boolean includeUpper) throws IOException {\n    this.collator = collator;\n    this.upperTermText = upperTermText;\n    this.lowerTermText = lowerTermText;\n    this.includeLower = includeLower;\n    this.includeUpper = includeUpper;\n    this.field = field.intern();\n    \n    // do a little bit of normalization...\n    // open ended range queries should always be inclusive.\n    if (this.lowerTermText == null) {\n      this.lowerTermText = \"\";\n      this.includeLower = true;\n    }\n    \n    if (this.upperTermText == null) {\n      this.includeUpper = true;\n    }\n\n    String startTermText = collator == null ? this.lowerTermText : \"\";\n    setEnum(reader.terms(new Term(this.field, startTermText)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf93f7a278746d4746fa3ebb3d53267b22fd040f","date":1249495506,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/TermRangeTermEnum#TermRangeTermEnum(IndexReader,String,String,String,boolean,boolean,Collator).mjava","pathOld":"src/java/org/apache/lucene/search/TermRangeTermEnum#TermRangeTermEnum(IndexReader,String,String,String,boolean,boolean,Collator).mjava","sourceNew":"  /**\n   * Enumerates all terms greater/equal than <code>lowerTerm</code>\n   * but less/equal than <code>upperTerm</code>. \n   * \n   * If an endpoint is null, it is said to be \"open\". Either or both \n   * endpoints may be open.  Open endpoints may not be exclusive \n   * (you can't select all but the first or last term without \n   * explicitly specifying the term to exclude.)\n   * \n   * @param reader\n   * @param field\n   *          An interned field that holds both lower and upper terms.\n   * @param lowerTermText\n   *          The term text at the lower end of the range\n   * @param upperTermText\n   *          The term text at the upper end of the range\n   * @param includeLower\n   *          If true, the <code>lowerTerm</code> is included in the range.\n   * @param includeUpper\n   *          If true, the <code>upperTerm</code> is included in the range.\n   * @param collator\n   *          The collator to use to collate index Terms, to determine their\n   *          membership in the range bounded by <code>lowerTerm</code> and\n   *          <code>upperTerm</code>.\n   * \n   * @throws IOException\n   */\n  public TermRangeTermEnum(IndexReader reader, String field, String lowerTermText, String upperTermText, \n    boolean includeLower, boolean includeUpper, Collator collator) throws IOException {\n    this.collator = collator;\n    this.upperTermText = upperTermText;\n    this.lowerTermText = lowerTermText;\n    this.includeLower = includeLower;\n    this.includeUpper = includeUpper;\n    this.field = StringHelper.intern(field);\n    \n    // do a little bit of normalization...\n    // open ended range queries should always be inclusive.\n    if (this.lowerTermText == null) {\n      this.lowerTermText = \"\";\n      this.includeLower = true;\n    }\n    \n    if (this.upperTermText == null) {\n      this.includeUpper = true;\n    }\n\n    String startTermText = collator == null ? this.lowerTermText : \"\";\n    setEnum(reader.terms(new Term(this.field, startTermText)));\n  }\n\n","sourceOld":"  /**\n   * Enumerates all terms greater/equal than <code>lowerTerm</code>\n   * but less/equal than <code>upperTerm</code>. \n   * \n   * If an endpoint is null, it is said to be \"open\". Either or both \n   * endpoints may be open.  Open endpoints may not be exclusive \n   * (you can't select all but the first or last term without \n   * explicitly specifying the term to exclude.)\n   * \n   * @param reader\n   * @param field\n   *          An interned field that holds both lower and upper terms.\n   * @param lowerTermText\n   *          The term text at the lower end of the range\n   * @param upperTermText\n   *          The term text at the upper end of the range\n   * @param includeLower\n   *          If true, the <code>lowerTerm</code> is included in the range.\n   * @param includeUpper\n   *          If true, the <code>upperTerm</code> is included in the range.\n   * @param collator\n   *          The collator to use to collate index Terms, to determine their\n   *          membership in the range bounded by <code>lowerTerm</code> and\n   *          <code>upperTerm</code>.\n   * \n   * @throws IOException\n   */\n  public TermRangeTermEnum(IndexReader reader, String field, String lowerTermText, String upperTermText, \n    boolean includeLower, boolean includeUpper, Collator collator) throws IOException {\n    this.collator = collator;\n    this.upperTermText = upperTermText;\n    this.lowerTermText = lowerTermText;\n    this.includeLower = includeLower;\n    this.includeUpper = includeUpper;\n    this.field = field.intern();\n    \n    // do a little bit of normalization...\n    // open ended range queries should always be inclusive.\n    if (this.lowerTermText == null) {\n      this.lowerTermText = \"\";\n      this.includeLower = true;\n    }\n    \n    if (this.upperTermText == null) {\n      this.includeUpper = true;\n    }\n\n    String startTermText = collator == null ? this.lowerTermText : \"\";\n    setEnum(reader.terms(new Term(this.field, startTermText)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/TermRangeTermEnum#TermRangeTermEnum(IndexReader,String,String,String,boolean,boolean,Collator).mjava","pathOld":"src/java/org/apache/lucene/search/TermRangeTermEnum#TermRangeTermEnum(IndexReader,String,String,String,boolean,boolean,Collator).mjava","sourceNew":"  /**\n   * Enumerates all terms greater/equal than <code>lowerTerm</code>\n   * but less/equal than <code>upperTerm</code>. \n   * \n   * If an endpoint is null, it is said to be \"open\". Either or both \n   * endpoints may be open.  Open endpoints may not be exclusive \n   * (you can't select all but the first or last term without \n   * explicitly specifying the term to exclude.)\n   * \n   * @param reader\n   * @param field\n   *          An interned field that holds both lower and upper terms.\n   * @param lowerTermText\n   *          The term text at the lower end of the range\n   * @param upperTermText\n   *          The term text at the upper end of the range\n   * @param includeLower\n   *          If true, the <code>lowerTerm</code> is included in the range.\n   * @param includeUpper\n   *          If true, the <code>upperTerm</code> is included in the range.\n   * @param collator\n   *          The collator to use to collate index Terms, to determine their\n   *          membership in the range bounded by <code>lowerTerm</code> and\n   *          <code>upperTerm</code>.\n   * \n   * @throws IOException\n   */\n  public TermRangeTermEnum(IndexReader reader, String field, String lowerTermText, String upperTermText, \n    boolean includeLower, boolean includeUpper, Collator collator) throws IOException {\n    this.collator = collator;\n    this.upperTermText = upperTermText;\n    this.lowerTermText = lowerTermText;\n    this.includeLower = includeLower;\n    this.includeUpper = includeUpper;\n    this.field = StringHelper.intern(field);\n    \n    // do a little bit of normalization...\n    // open ended range queries should always be inclusive.\n    if (this.lowerTermText == null) {\n      this.lowerTermText = \"\";\n      this.includeLower = true;\n    }\n    \n    if (this.upperTermText == null) {\n      this.includeUpper = true;\n    }\n\n    String startTermText = collator == null ? this.lowerTermText : \"\";\n    setEnum(reader.terms(new Term(this.field, startTermText)));\n  }\n\n","sourceOld":"  /**\n   * Enumerates all terms greater/equal than <code>lowerTerm</code>\n   * but less/equal than <code>upperTerm</code>. \n   * \n   * If an endpoint is null, it is said to be \"open\". Either or both \n   * endpoints may be open.  Open endpoints may not be exclusive \n   * (you can't select all but the first or last term without \n   * explicitly specifying the term to exclude.)\n   * \n   * @param reader\n   * @param field\n   *          An interned field that holds both lower and upper terms.\n   * @param lowerTermText\n   *          The term text at the lower end of the range\n   * @param upperTermText\n   *          The term text at the upper end of the range\n   * @param includeLower\n   *          If true, the <code>lowerTerm</code> is included in the range.\n   * @param includeUpper\n   *          If true, the <code>upperTerm</code> is included in the range.\n   * @param collator\n   *          The collator to use to collate index Terms, to determine their\n   *          membership in the range bounded by <code>lowerTerm</code> and\n   *          <code>upperTerm</code>.\n   * \n   * @throws IOException\n   */\n  public TermRangeTermEnum(IndexReader reader, String field, String lowerTermText, String upperTermText, \n    boolean includeLower, boolean includeUpper, Collator collator) throws IOException {\n    this.collator = collator;\n    this.upperTermText = upperTermText;\n    this.lowerTermText = lowerTermText;\n    this.includeLower = includeLower;\n    this.includeUpper = includeUpper;\n    this.field = StringHelper.intern(field);\n    \n    // do a little bit of normalization...\n    // open ended range queries should always be inclusive.\n    if (this.lowerTermText == null) {\n      this.lowerTermText = \"\";\n      this.includeLower = true;\n    }\n    \n    if (this.upperTermText == null) {\n      this.includeUpper = true;\n    }\n\n    String startTermText = collator == null ? this.lowerTermText : \"\";\n    setEnum(reader.terms(new Term(this.field, startTermText)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"cf93f7a278746d4746fa3ebb3d53267b22fd040f":["45ede1fd11bf564bb5c8c195d421782675d1e61c"],"45ede1fd11bf564bb5c8c195d421782675d1e61c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cf93f7a278746d4746fa3ebb3d53267b22fd040f"]},"commit2Childs":{"cf93f7a278746d4746fa3ebb3d53267b22fd040f":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"45ede1fd11bf564bb5c8c195d421782675d1e61c":["cf93f7a278746d4746fa3ebb3d53267b22fd040f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["45ede1fd11bf564bb5c8c195d421782675d1e61c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}