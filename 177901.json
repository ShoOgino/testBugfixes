{"path":"solr/core/src/test/org/apache/solr/metrics/SolrMetricReporterTest#testInit().mjava","commits":[{"id":"0265144286422ad99682a00904cc2536b79c8535","date":1482222684,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/metrics/SolrMetricReporterTest#testInit().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testInit() throws Exception {\n    Random random = random();\n\n    SolrMetricManager metricManager = new SolrMetricManager();\n\n    final String registryName = TestUtil.randomSimpleString(random);\n    final MockMetricReporter reporter = new MockMetricReporter(metricManager, registryName);\n\n    Map<String, Object> attrs = new HashMap<>();\n    attrs.put(FieldType.CLASS_NAME, MockMetricReporter.class.getName());\n    attrs.put(CoreAdminParams.NAME, TestUtil.randomUnicodeString(random));\n\n    boolean shouldDefineConfigurable = random.nextBoolean();\n    String configurable = TestUtil.randomUnicodeString(random);\n    if (shouldDefineConfigurable) attrs.put(\"configurable\", configurable);\n\n    boolean shouldDefinePlugin = random.nextBoolean();\n    String type = TestUtil.randomUnicodeString(random);\n    PluginInfo pluginInfo = shouldDefinePlugin ? new PluginInfo(type, attrs) : null;\n\n    try {\n      reporter.init(pluginInfo);\n      assertNotNull(pluginInfo);\n      assertEquals(configurable, attrs.get(\"configurable\"));\n      assertTrue(reporter.didValidate);\n      assertNotNull(reporter.configurable);\n      assertEquals(configurable, reporter.configurable);\n    } catch (IllegalStateException e) {\n      assertTrue(pluginInfo == null || attrs.get(\"configurable\") == null);\n      assertTrue(reporter.didValidate);\n      assertNull(reporter.configurable);\n    } finally {\n      reporter.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","date":1482251961,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/metrics/SolrMetricReporterTest#testInit().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testInit() throws Exception {\n    Random random = random();\n\n    SolrMetricManager metricManager = new SolrMetricManager();\n\n    final String registryName = TestUtil.randomSimpleString(random);\n    final MockMetricReporter reporter = new MockMetricReporter(metricManager, registryName);\n\n    Map<String, Object> attrs = new HashMap<>();\n    attrs.put(FieldType.CLASS_NAME, MockMetricReporter.class.getName());\n    attrs.put(CoreAdminParams.NAME, TestUtil.randomUnicodeString(random));\n\n    boolean shouldDefineConfigurable = random.nextBoolean();\n    String configurable = TestUtil.randomUnicodeString(random);\n    if (shouldDefineConfigurable) attrs.put(\"configurable\", configurable);\n\n    boolean shouldDefinePlugin = random.nextBoolean();\n    String type = TestUtil.randomUnicodeString(random);\n    PluginInfo pluginInfo = shouldDefinePlugin ? new PluginInfo(type, attrs) : null;\n\n    try {\n      reporter.init(pluginInfo);\n      assertNotNull(pluginInfo);\n      assertEquals(configurable, attrs.get(\"configurable\"));\n      assertTrue(reporter.didValidate);\n      assertNotNull(reporter.configurable);\n      assertEquals(configurable, reporter.configurable);\n    } catch (IllegalStateException e) {\n      assertTrue(pluginInfo == null || attrs.get(\"configurable\") == null);\n      assertTrue(reporter.didValidate);\n      assertNull(reporter.configurable);\n    } finally {\n      reporter.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"816521ebaad5add9cb96bb88c577394e2938c40b","date":1491931343,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/metrics/SolrMetricReporterTest#testInit().mjava","pathOld":"solr/core/src/test/org/apache/solr/metrics/SolrMetricReporterTest#testInit().mjava","sourceNew":"  @Test\n  public void testInit() throws Exception {\n    Random random = random();\n\n    SolrMetricManager metricManager = new SolrMetricManager();\n\n    final String registryName = TestUtil.randomSimpleString(random);\n    final MockMetricReporter reporter = new MockMetricReporter(metricManager, registryName);\n\n    Map<String, Object> attrs = new HashMap<>();\n    attrs.put(FieldType.CLASS_NAME, MockMetricReporter.class.getName());\n    attrs.put(CoreAdminParams.NAME, TestUtil.randomUnicodeString(random));\n    attrs.put(\"enabled\", random.nextBoolean());\n\n    boolean shouldDefineConfigurable = random.nextBoolean();\n    String configurable = TestUtil.randomUnicodeString(random);\n    if (shouldDefineConfigurable) attrs.put(\"configurable\", configurable);\n\n    boolean shouldDefinePlugin = random.nextBoolean();\n    String type = TestUtil.randomUnicodeString(random);\n    PluginInfo pluginInfo = shouldDefinePlugin ? new PluginInfo(type, attrs) : null;\n\n    try {\n      reporter.init(pluginInfo);\n      assertNotNull(pluginInfo);\n      assertEquals(configurable, attrs.get(\"configurable\"));\n      assertTrue(reporter.didValidate);\n      assertNotNull(reporter.configurable);\n      assertEquals(configurable, reporter.configurable);\n    } catch (IllegalStateException e) {\n      assertTrue(pluginInfo == null || attrs.get(\"configurable\") == null);\n      assertTrue(reporter.didValidate);\n      assertNull(reporter.configurable);\n    } finally {\n      reporter.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testInit() throws Exception {\n    Random random = random();\n\n    SolrMetricManager metricManager = new SolrMetricManager();\n\n    final String registryName = TestUtil.randomSimpleString(random);\n    final MockMetricReporter reporter = new MockMetricReporter(metricManager, registryName);\n\n    Map<String, Object> attrs = new HashMap<>();\n    attrs.put(FieldType.CLASS_NAME, MockMetricReporter.class.getName());\n    attrs.put(CoreAdminParams.NAME, TestUtil.randomUnicodeString(random));\n\n    boolean shouldDefineConfigurable = random.nextBoolean();\n    String configurable = TestUtil.randomUnicodeString(random);\n    if (shouldDefineConfigurable) attrs.put(\"configurable\", configurable);\n\n    boolean shouldDefinePlugin = random.nextBoolean();\n    String type = TestUtil.randomUnicodeString(random);\n    PluginInfo pluginInfo = shouldDefinePlugin ? new PluginInfo(type, attrs) : null;\n\n    try {\n      reporter.init(pluginInfo);\n      assertNotNull(pluginInfo);\n      assertEquals(configurable, attrs.get(\"configurable\"));\n      assertTrue(reporter.didValidate);\n      assertNotNull(reporter.configurable);\n      assertEquals(configurable, reporter.configurable);\n    } catch (IllegalStateException e) {\n      assertTrue(pluginInfo == null || attrs.get(\"configurable\") == null);\n      assertTrue(reporter.didValidate);\n      assertNull(reporter.configurable);\n    } finally {\n      reporter.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/metrics/SolrMetricReporterTest#testInit().mjava","pathOld":"solr/core/src/test/org/apache/solr/metrics/SolrMetricReporterTest#testInit().mjava","sourceNew":"  @Test\n  public void testInit() throws Exception {\n    Random random = random();\n\n    SolrMetricManager metricManager = new SolrMetricManager();\n\n    final String registryName = TestUtil.randomSimpleString(random);\n    final MockMetricReporter reporter = new MockMetricReporter(metricManager, registryName);\n\n    Map<String, Object> attrs = new HashMap<>();\n    attrs.put(FieldType.CLASS_NAME, MockMetricReporter.class.getName());\n    attrs.put(CoreAdminParams.NAME, TestUtil.randomUnicodeString(random));\n    attrs.put(\"enabled\", random.nextBoolean());\n\n    boolean shouldDefineConfigurable = random.nextBoolean();\n    String configurable = TestUtil.randomUnicodeString(random);\n    if (shouldDefineConfigurable) attrs.put(\"configurable\", configurable);\n\n    boolean shouldDefinePlugin = random.nextBoolean();\n    String type = TestUtil.randomUnicodeString(random);\n    PluginInfo pluginInfo = shouldDefinePlugin ? new PluginInfo(type, attrs) : null;\n\n    try {\n      reporter.init(pluginInfo);\n      assertNotNull(pluginInfo);\n      assertEquals(configurable, attrs.get(\"configurable\"));\n      assertTrue(reporter.didValidate);\n      assertNotNull(reporter.configurable);\n      assertEquals(configurable, reporter.configurable);\n    } catch (IllegalStateException e) {\n      assertTrue(pluginInfo == null || attrs.get(\"configurable\") == null);\n      assertTrue(reporter.didValidate);\n      assertNull(reporter.configurable);\n    } finally {\n      reporter.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testInit() throws Exception {\n    Random random = random();\n\n    SolrMetricManager metricManager = new SolrMetricManager();\n\n    final String registryName = TestUtil.randomSimpleString(random);\n    final MockMetricReporter reporter = new MockMetricReporter(metricManager, registryName);\n\n    Map<String, Object> attrs = new HashMap<>();\n    attrs.put(FieldType.CLASS_NAME, MockMetricReporter.class.getName());\n    attrs.put(CoreAdminParams.NAME, TestUtil.randomUnicodeString(random));\n\n    boolean shouldDefineConfigurable = random.nextBoolean();\n    String configurable = TestUtil.randomUnicodeString(random);\n    if (shouldDefineConfigurable) attrs.put(\"configurable\", configurable);\n\n    boolean shouldDefinePlugin = random.nextBoolean();\n    String type = TestUtil.randomUnicodeString(random);\n    PluginInfo pluginInfo = shouldDefinePlugin ? new PluginInfo(type, attrs) : null;\n\n    try {\n      reporter.init(pluginInfo);\n      assertNotNull(pluginInfo);\n      assertEquals(configurable, attrs.get(\"configurable\"));\n      assertTrue(reporter.didValidate);\n      assertNotNull(reporter.configurable);\n      assertEquals(configurable, reporter.configurable);\n    } catch (IllegalStateException e) {\n      assertTrue(pluginInfo == null || attrs.get(\"configurable\") == null);\n      assertTrue(reporter.didValidate);\n      assertNull(reporter.configurable);\n    } finally {\n      reporter.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["0265144286422ad99682a00904cc2536b79c8535"],"0265144286422ad99682a00904cc2536b79c8535":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0265144286422ad99682a00904cc2536b79c8535"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"816521ebaad5add9cb96bb88c577394e2938c40b":["0265144286422ad99682a00904cc2536b79c8535"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["816521ebaad5add9cb96bb88c577394e2938c40b"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"0265144286422ad99682a00904cc2536b79c8535":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","816521ebaad5add9cb96bb88c577394e2938c40b"],"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0265144286422ad99682a00904cc2536b79c8535","5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf"],"816521ebaad5add9cb96bb88c577394e2938c40b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}