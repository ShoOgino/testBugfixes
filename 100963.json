{"path":"contrib/memory/src/java/org/apache/lucene/index/memory/PatternAnalyzer#PatternAnalyzer(Pattern,boolean,Set).mjava","commits":[{"id":"50e7972fe4865715af8951d4ba15555e3426fc5d","date":1115024647,"type":0,"author":"Erik Hatcher","isMerge":false,"pathNew":"contrib/memory/src/java/org/apache/lucene/index/memory/PatternAnalyzer#PatternAnalyzer(Pattern,boolean,Set).mjava","pathOld":"/dev/null","sourceNew":"\t/**\n\t * Constructs a new instance with the given parameters.\n\t * \n\t * @param pattern\n\t *            a regular expression delimiting tokens\n\t * @param toLowerCase\n\t *            if <code>true</code> returns tokens after applying\n\t *            String.toLowerCase()\n\t * @param stopWords\n\t *            if non-null, ignores all tokens that are contained in the\n\t *            given stop set (after previously having applied toLowerCase()\n\t *            if applicable). For example, created via\n\t *            {@link StopFilter#makeStopSet(String[])}and/or\n\t *            {@link org.apache.lucene.analysis.WordlistLoader}.\n\t */\n\tpublic PatternAnalyzer(Pattern pattern, boolean toLowerCase, Set stopWords) {\n\t\tif (pattern == null) \n\t\t\tthrow new IllegalArgumentException(\"pattern must not be null\");\n\t\t\n\t\tif (eqPattern(NON_WORD_PATTERN, pattern)) pattern = NON_WORD_PATTERN;\n\t\telse if (eqPattern(WHITESPACE_PATTERN, pattern)) pattern = WHITESPACE_PATTERN;\n\t\t\n\t\tthis.pattern = pattern;\n\t\tthis.toLowerCase = toLowerCase;\n\t\tthis.stopWords = stopWords;\n\t}\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c8f14489323057ef6de92ba5ea2d0cfe6e34755f","date":1120167605,"type":3,"author":"Mark Harwood","isMerge":false,"pathNew":"contrib/memory/src/java/org/apache/lucene/index/memory/PatternAnalyzer#PatternAnalyzer(Pattern,boolean,Set).mjava","pathOld":"contrib/memory/src/java/org/apache/lucene/index/memory/PatternAnalyzer#PatternAnalyzer(Pattern,boolean,Set).mjava","sourceNew":"\t/**\r\n\t * Constructs a new instance with the given parameters.\r\n\t * \r\n\t * @param pattern\r\n\t *            a regular expression delimiting tokens\r\n\t * @param toLowerCase\r\n\t *            if <code>true</code> returns tokens after applying\r\n\t *            String.toLowerCase()\r\n\t * @param stopWords\r\n\t *            if non-null, ignores all tokens that are contained in the\r\n\t *            given stop set (after previously having applied toLowerCase()\r\n\t *            if applicable). For example, created via\r\n\t *            {@link StopFilter#makeStopSet(String[])}and/or\r\n\t *            {@link org.apache.lucene.analysis.WordlistLoader}as in\r\n\t *            <code>WordlistLoader.getWordSet(new File(\"samples/fulltext/stopwords.txt\")</code>\r\n\t *            or <a href=\"http://www.unine.ch/info/clef/\">other stop words\r\n\t *            lists </a>.\r\n\t */\r\n\tpublic PatternAnalyzer(Pattern pattern, boolean toLowerCase, Set stopWords) {\r\n\t\tif (pattern == null) \r\n\t\t\tthrow new IllegalArgumentException(\"pattern must not be null\");\r\n\t\t\r\n\t\tif (eqPattern(NON_WORD_PATTERN, pattern)) pattern = NON_WORD_PATTERN;\r\n\t\telse if (eqPattern(WHITESPACE_PATTERN, pattern)) pattern = WHITESPACE_PATTERN;\r\n\t\t\r\n\t\tif (stopWords != null && stopWords.size() == 0) stopWords = null;\r\n\t\t\r\n\t\tthis.pattern = pattern;\r\n\t\tthis.toLowerCase = toLowerCase;\r\n\t\tthis.stopWords = stopWords;\r\n\t}\r\n\n","sourceOld":"\t/**\n\t * Constructs a new instance with the given parameters.\n\t * \n\t * @param pattern\n\t *            a regular expression delimiting tokens\n\t * @param toLowerCase\n\t *            if <code>true</code> returns tokens after applying\n\t *            String.toLowerCase()\n\t * @param stopWords\n\t *            if non-null, ignores all tokens that are contained in the\n\t *            given stop set (after previously having applied toLowerCase()\n\t *            if applicable). For example, created via\n\t *            {@link StopFilter#makeStopSet(String[])}and/or\n\t *            {@link org.apache.lucene.analysis.WordlistLoader}.\n\t */\n\tpublic PatternAnalyzer(Pattern pattern, boolean toLowerCase, Set stopWords) {\n\t\tif (pattern == null) \n\t\t\tthrow new IllegalArgumentException(\"pattern must not be null\");\n\t\t\n\t\tif (eqPattern(NON_WORD_PATTERN, pattern)) pattern = NON_WORD_PATTERN;\n\t\telse if (eqPattern(WHITESPACE_PATTERN, pattern)) pattern = WHITESPACE_PATTERN;\n\t\t\n\t\tthis.pattern = pattern;\n\t\tthis.toLowerCase = toLowerCase;\n\t\tthis.stopWords = stopWords;\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2542e236e1661f6d0e8e4aa8f09dd1495e58e35a","date":1133587576,"type":4,"author":"Wolfgang Hoschek","isMerge":false,"pathNew":"/dev/null","pathOld":"contrib/memory/src/java/org/apache/lucene/index/memory/PatternAnalyzer#PatternAnalyzer(Pattern,boolean,Set).mjava","sourceNew":null,"sourceOld":"\t/**\r\n\t * Constructs a new instance with the given parameters.\r\n\t * \r\n\t * @param pattern\r\n\t *            a regular expression delimiting tokens\r\n\t * @param toLowerCase\r\n\t *            if <code>true</code> returns tokens after applying\r\n\t *            String.toLowerCase()\r\n\t * @param stopWords\r\n\t *            if non-null, ignores all tokens that are contained in the\r\n\t *            given stop set (after previously having applied toLowerCase()\r\n\t *            if applicable). For example, created via\r\n\t *            {@link StopFilter#makeStopSet(String[])}and/or\r\n\t *            {@link org.apache.lucene.analysis.WordlistLoader}as in\r\n\t *            <code>WordlistLoader.getWordSet(new File(\"samples/fulltext/stopwords.txt\")</code>\r\n\t *            or <a href=\"http://www.unine.ch/info/clef/\">other stop words\r\n\t *            lists </a>.\r\n\t */\r\n\tpublic PatternAnalyzer(Pattern pattern, boolean toLowerCase, Set stopWords) {\r\n\t\tif (pattern == null) \r\n\t\t\tthrow new IllegalArgumentException(\"pattern must not be null\");\r\n\t\t\r\n\t\tif (eqPattern(NON_WORD_PATTERN, pattern)) pattern = NON_WORD_PATTERN;\r\n\t\telse if (eqPattern(WHITESPACE_PATTERN, pattern)) pattern = WHITESPACE_PATTERN;\r\n\t\t\r\n\t\tif (stopWords != null && stopWords.size() == 0) stopWords = null;\r\n\t\t\r\n\t\tthis.pattern = pattern;\r\n\t\tthis.toLowerCase = toLowerCase;\r\n\t\tthis.stopWords = stopWords;\r\n\t}\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29bb5af2486a9a013c0a0daffdb51dce2a3adb8e","date":1133587670,"type":0,"author":"Wolfgang Hoschek","isMerge":false,"pathNew":"contrib/memory/src/java/org/apache/lucene/index/memory/PatternAnalyzer#PatternAnalyzer(Pattern,boolean,Set).mjava","pathOld":"/dev/null","sourceNew":"\t/**\n\t * Constructs a new instance with the given parameters.\n\t * \n\t * @param pattern\n\t *            a regular expression delimiting tokens\n\t * @param toLowerCase\n\t *            if <code>true</code> returns tokens after applying\n\t *            String.toLowerCase()\n\t * @param stopWords\n\t *            if non-null, ignores all tokens that are contained in the\n\t *            given stop set (after previously having applied toLowerCase()\n\t *            if applicable). For example, created via\n\t *            {@link StopFilter#makeStopSet(String[])}and/or\n\t *            {@link org.apache.lucene.analysis.WordlistLoader}as in\n\t *            <code>WordlistLoader.getWordSet(new File(\"samples/fulltext/stopwords.txt\")</code>\n\t *            or <a href=\"http://www.unine.ch/info/clef/\">other stop words\n\t *            lists </a>.\n\t */\n\tpublic PatternAnalyzer(Pattern pattern, boolean toLowerCase, Set stopWords) {\n\t\tif (pattern == null) \n\t\t\tthrow new IllegalArgumentException(\"pattern must not be null\");\n\t\t\n\t\tif (eqPattern(NON_WORD_PATTERN, pattern)) pattern = NON_WORD_PATTERN;\n\t\telse if (eqPattern(WHITESPACE_PATTERN, pattern)) pattern = WHITESPACE_PATTERN;\n\t\t\n\t\tif (stopWords != null && stopWords.size() == 0) stopWords = null;\n\t\t\n\t\tthis.pattern = pattern;\n\t\tthis.toLowerCase = toLowerCase;\n\t\tthis.stopWords = stopWords;\n\t}\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7f68e24227d5556d33ee6d586fd9010cd9ff8bec","date":1150091176,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"contrib/memory/src/java/org/apache/lucene/index/memory/PatternAnalyzer#PatternAnalyzer(Pattern,boolean,Set).mjava","pathOld":"contrib/memory/src/java/org/apache/lucene/index/memory/PatternAnalyzer#PatternAnalyzer(Pattern,boolean,Set).mjava","sourceNew":"  /**\n   * Constructs a new instance with the given parameters.\n   * \n   * @param pattern\n   *            a regular expression delimiting tokens\n   * @param toLowerCase\n   *            if <code>true</code> returns tokens after applying\n   *            String.toLowerCase()\n   * @param stopWords\n   *            if non-null, ignores all tokens that are contained in the\n   *            given stop set (after previously having applied toLowerCase()\n   *            if applicable). For example, created via\n   *            {@link StopFilter#makeStopSet(String[])}and/or\n   *            {@link org.apache.lucene.analysis.WordlistLoader}as in\n   *            <code>WordlistLoader.getWordSet(new File(\"samples/fulltext/stopwords.txt\")</code>\n   *            or <a href=\"http://www.unine.ch/info/clef/\">other stop words\n   *            lists </a>.\n   */\n  public PatternAnalyzer(Pattern pattern, boolean toLowerCase, Set stopWords) {\n    if (pattern == null) \n      throw new IllegalArgumentException(\"pattern must not be null\");\n    \n    if (eqPattern(NON_WORD_PATTERN, pattern)) pattern = NON_WORD_PATTERN;\n    else if (eqPattern(WHITESPACE_PATTERN, pattern)) pattern = WHITESPACE_PATTERN;\n    \n    if (stopWords != null && stopWords.size() == 0) stopWords = null;\n    \n    this.pattern = pattern;\n    this.toLowerCase = toLowerCase;\n    this.stopWords = stopWords;\n  }\n\n","sourceOld":"\t/**\n\t * Constructs a new instance with the given parameters.\n\t * \n\t * @param pattern\n\t *            a regular expression delimiting tokens\n\t * @param toLowerCase\n\t *            if <code>true</code> returns tokens after applying\n\t *            String.toLowerCase()\n\t * @param stopWords\n\t *            if non-null, ignores all tokens that are contained in the\n\t *            given stop set (after previously having applied toLowerCase()\n\t *            if applicable). For example, created via\n\t *            {@link StopFilter#makeStopSet(String[])}and/or\n\t *            {@link org.apache.lucene.analysis.WordlistLoader}as in\n\t *            <code>WordlistLoader.getWordSet(new File(\"samples/fulltext/stopwords.txt\")</code>\n\t *            or <a href=\"http://www.unine.ch/info/clef/\">other stop words\n\t *            lists </a>.\n\t */\n\tpublic PatternAnalyzer(Pattern pattern, boolean toLowerCase, Set stopWords) {\n\t\tif (pattern == null) \n\t\t\tthrow new IllegalArgumentException(\"pattern must not be null\");\n\t\t\n\t\tif (eqPattern(NON_WORD_PATTERN, pattern)) pattern = NON_WORD_PATTERN;\n\t\telse if (eqPattern(WHITESPACE_PATTERN, pattern)) pattern = WHITESPACE_PATTERN;\n\t\t\n\t\tif (stopWords != null && stopWords.size() == 0) stopWords = null;\n\t\t\n\t\tthis.pattern = pattern;\n\t\tthis.toLowerCase = toLowerCase;\n\t\tthis.stopWords = stopWords;\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba1116b3450a9c1642c89445d131b37344055245","date":1256329517,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/memory/src/java/org/apache/lucene/index/memory/PatternAnalyzer#PatternAnalyzer(Version,Pattern,boolean,Set).mjava","pathOld":"contrib/memory/src/java/org/apache/lucene/index/memory/PatternAnalyzer#PatternAnalyzer(Pattern,boolean,Set).mjava","sourceNew":"  /**\n   * Constructs a new instance with the given parameters.\n   * \n   * @param matchVersion If >= {@link Version#LUCENE_29}, StopFilter.enablePositionIncrement is set to true\n   * @param pattern\n   *            a regular expression delimiting tokens\n   * @param toLowerCase\n   *            if <code>true</code> returns tokens after applying\n   *            String.toLowerCase()\n   * @param stopWords\n   *            if non-null, ignores all tokens that are contained in the\n   *            given stop set (after previously having applied toLowerCase()\n   *            if applicable). For example, created via\n   *            {@link StopFilter#makeStopSet(String[])}and/or\n   *            {@link org.apache.lucene.analysis.WordlistLoader}as in\n   *            <code>WordlistLoader.getWordSet(new File(\"samples/fulltext/stopwords.txt\")</code>\n   *            or <a href=\"http://www.unine.ch/info/clef/\">other stop words\n   *            lists </a>.\n   */\n  public PatternAnalyzer(Version matchVersion, Pattern pattern, boolean toLowerCase, Set stopWords) {\n    if (pattern == null) \n      throw new IllegalArgumentException(\"pattern must not be null\");\n    \n    if (eqPattern(NON_WORD_PATTERN, pattern)) pattern = NON_WORD_PATTERN;\n    else if (eqPattern(WHITESPACE_PATTERN, pattern)) pattern = WHITESPACE_PATTERN;\n    \n    if (stopWords != null && stopWords.size() == 0) stopWords = null;\n    \n    this.pattern = pattern;\n    this.toLowerCase = toLowerCase;\n    this.stopWords = stopWords;\n    this.matchVersion = matchVersion;\n  }\n\n","sourceOld":"  /**\n   * Constructs a new instance with the given parameters.\n   * \n   * @param pattern\n   *            a regular expression delimiting tokens\n   * @param toLowerCase\n   *            if <code>true</code> returns tokens after applying\n   *            String.toLowerCase()\n   * @param stopWords\n   *            if non-null, ignores all tokens that are contained in the\n   *            given stop set (after previously having applied toLowerCase()\n   *            if applicable). For example, created via\n   *            {@link StopFilter#makeStopSet(String[])}and/or\n   *            {@link org.apache.lucene.analysis.WordlistLoader}as in\n   *            <code>WordlistLoader.getWordSet(new File(\"samples/fulltext/stopwords.txt\")</code>\n   *            or <a href=\"http://www.unine.ch/info/clef/\">other stop words\n   *            lists </a>.\n   */\n  public PatternAnalyzer(Pattern pattern, boolean toLowerCase, Set stopWords) {\n    if (pattern == null) \n      throw new IllegalArgumentException(\"pattern must not be null\");\n    \n    if (eqPattern(NON_WORD_PATTERN, pattern)) pattern = NON_WORD_PATTERN;\n    else if (eqPattern(WHITESPACE_PATTERN, pattern)) pattern = WHITESPACE_PATTERN;\n    \n    if (stopWords != null && stopWords.size() == 0) stopWords = null;\n    \n    this.pattern = pattern;\n    this.toLowerCase = toLowerCase;\n    this.stopWords = stopWords;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2542e236e1661f6d0e8e4aa8f09dd1495e58e35a":["c8f14489323057ef6de92ba5ea2d0cfe6e34755f"],"29bb5af2486a9a013c0a0daffdb51dce2a3adb8e":["2542e236e1661f6d0e8e4aa8f09dd1495e58e35a"],"c8f14489323057ef6de92ba5ea2d0cfe6e34755f":["50e7972fe4865715af8951d4ba15555e3426fc5d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7f68e24227d5556d33ee6d586fd9010cd9ff8bec":["29bb5af2486a9a013c0a0daffdb51dce2a3adb8e"],"50e7972fe4865715af8951d4ba15555e3426fc5d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ba1116b3450a9c1642c89445d131b37344055245"],"ba1116b3450a9c1642c89445d131b37344055245":["7f68e24227d5556d33ee6d586fd9010cd9ff8bec"]},"commit2Childs":{"2542e236e1661f6d0e8e4aa8f09dd1495e58e35a":["29bb5af2486a9a013c0a0daffdb51dce2a3adb8e"],"29bb5af2486a9a013c0a0daffdb51dce2a3adb8e":["7f68e24227d5556d33ee6d586fd9010cd9ff8bec"],"c8f14489323057ef6de92ba5ea2d0cfe6e34755f":["2542e236e1661f6d0e8e4aa8f09dd1495e58e35a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["50e7972fe4865715af8951d4ba15555e3426fc5d"],"7f68e24227d5556d33ee6d586fd9010cd9ff8bec":["ba1116b3450a9c1642c89445d131b37344055245"],"50e7972fe4865715af8951d4ba15555e3426fc5d":["c8f14489323057ef6de92ba5ea2d0cfe6e34755f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"ba1116b3450a9c1642c89445d131b37344055245":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}