{"path":"src/java/org/apache/solr/search/QueryParsing.StrParser#getQuotedString().mjava","commits":[{"id":"66ab3886c1d845c59c9e5b23b2fb247b927db498","date":1193060587,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/search/QueryParsing.StrParser#getQuotedString().mjava","pathOld":"/dev/null","sourceNew":"    // return null if not a string\n    String getQuotedString() throws ParseException {\n      eatws();\n      char delim = peekChar();\n      if (!(delim=='\\\"' || delim=='\\'')) {\n        return null;\n      }\n      int val_start = ++pos;\n      StringBuilder sb = new StringBuilder(); // needed for escaping\n      for(;;) {\n        if (pos>=end) {\n          throw new ParseException(\"Missing end quote for string at pos \" + (val_start-1) + \" str='\"+val+\"'\");\n        }\n        char ch = val.charAt(pos);\n        if (ch=='\\\\') {\n          ch = pos<end ? val.charAt(pos++) : 0;\n        } else if (ch==delim) {\n          pos++;\n          return sb.toString();\n        }\n        sb.append(ch);\n        pos++;\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["749d75d8059027e0ea8aecc15b7016867347dacb"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"749d75d8059027e0ea8aecc15b7016867347dacb","date":1259764118,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/search/QueryParsing.StrParser#getQuotedString().mjava","pathOld":"src/java/org/apache/solr/search/QueryParsing.StrParser#getQuotedString().mjava","sourceNew":"    // return null if not a string\n    String getQuotedString() throws ParseException {\n      eatws();\n      char delim = peekChar();\n      if (!(delim=='\\\"' || delim=='\\'')) {\n        return null;\n      }\n      int val_start = ++pos;\n      StringBuilder sb = new StringBuilder(); // needed for escaping\n      for(;;) {\n        if (pos>=end) {\n          throw new ParseException(\"Missing end quote for string at pos \" + (val_start-1) + \" str='\"+val+\"'\");\n        }\n        char ch = val.charAt(pos);\n        if (ch=='\\\\') {\n          pos++;\n          if (pos>=end) break; \n          ch = val.charAt(pos);\n          switch(ch) {\n            case 'n' : ch='\\n'; break;\n            case 't' : ch='\\t'; break;\n            case 'r' : ch='\\r'; break;\n            case 'b' : ch='\\b'; break;\n            case 'f' : ch='\\f'; break;\n            case 'u' :\n              if (pos+4 >= end) {\n                throw new ParseException(\"bad unicode escape \\\\uxxxx at pos\" + (val_start-1) + \" str='\"+val+\"'\");                \n              }\n              ch = (char)Integer.parseInt(val.substring(pos+1, pos+5), 16);\n              pos += 4;\n              break;\n          }\n        } else if (ch==delim) {\n          pos++;  // skip over the quote\n          break;\n        }\n        sb.append(ch);\n        pos++;\n      }\n\n      return sb.toString();\n    }\n\n","sourceOld":"    // return null if not a string\n    String getQuotedString() throws ParseException {\n      eatws();\n      char delim = peekChar();\n      if (!(delim=='\\\"' || delim=='\\'')) {\n        return null;\n      }\n      int val_start = ++pos;\n      StringBuilder sb = new StringBuilder(); // needed for escaping\n      for(;;) {\n        if (pos>=end) {\n          throw new ParseException(\"Missing end quote for string at pos \" + (val_start-1) + \" str='\"+val+\"'\");\n        }\n        char ch = val.charAt(pos);\n        if (ch=='\\\\') {\n          ch = pos<end ? val.charAt(pos++) : 0;\n        } else if (ch==delim) {\n          pos++;\n          return sb.toString();\n        }\n        sb.append(ch);\n        pos++;\n      }\n    }\n\n","bugFix":["66ab3886c1d845c59c9e5b23b2fb247b927db498"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"32ef722831135736529762b4b97a13dd58b06f66","date":1260567610,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/java/org/apache/solr/search/QueryParsing.StrParser#getQuotedString().mjava","pathOld":"src/java/org/apache/solr/search/QueryParsing.StrParser#getQuotedString().mjava","sourceNew":"    // return null if not a string\n    String getQuotedString() throws ParseException {\n      eatws();\n      char delim = peekChar();\n      if (!(delim == '\\\"' || delim == '\\'')) {\n        return null;\n      }\n      int val_start = ++pos;\n      StringBuilder sb = new StringBuilder(); // needed for escaping\n      for (; ;) {\n        if (pos >= end) {\n          throw new ParseException(\"Missing end quote for string at pos \" + (val_start - 1) + \" str='\" + val + \"'\");\n        }\n        char ch = val.charAt(pos);\n        if (ch == '\\\\') {\n          pos++;\n          if (pos >= end) break;\n          ch = val.charAt(pos);\n          switch (ch) {\n            case 'n':\n              ch = '\\n';\n              break;\n            case 't':\n              ch = '\\t';\n              break;\n            case 'r':\n              ch = '\\r';\n              break;\n            case 'b':\n              ch = '\\b';\n              break;\n            case 'f':\n              ch = '\\f';\n              break;\n            case 'u':\n              if (pos + 4 >= end) {\n                throw new ParseException(\"bad unicode escape \\\\uxxxx at pos\" + (val_start - 1) + \" str='\" + val + \"'\");\n              }\n              ch = (char) Integer.parseInt(val.substring(pos + 1, pos + 5), 16);\n              pos += 4;\n              break;\n          }\n        } else if (ch == delim) {\n          pos++;  // skip over the quote\n          break;\n        }\n        sb.append(ch);\n        pos++;\n      }\n\n      return sb.toString();\n    }\n\n","sourceOld":"    // return null if not a string\n    String getQuotedString() throws ParseException {\n      eatws();\n      char delim = peekChar();\n      if (!(delim=='\\\"' || delim=='\\'')) {\n        return null;\n      }\n      int val_start = ++pos;\n      StringBuilder sb = new StringBuilder(); // needed for escaping\n      for(;;) {\n        if (pos>=end) {\n          throw new ParseException(\"Missing end quote for string at pos \" + (val_start-1) + \" str='\"+val+\"'\");\n        }\n        char ch = val.charAt(pos);\n        if (ch=='\\\\') {\n          pos++;\n          if (pos>=end) break; \n          ch = val.charAt(pos);\n          switch(ch) {\n            case 'n' : ch='\\n'; break;\n            case 't' : ch='\\t'; break;\n            case 'r' : ch='\\r'; break;\n            case 'b' : ch='\\b'; break;\n            case 'f' : ch='\\f'; break;\n            case 'u' :\n              if (pos+4 >= end) {\n                throw new ParseException(\"bad unicode escape \\\\uxxxx at pos\" + (val_start-1) + \" str='\"+val+\"'\");                \n              }\n              ch = (char)Integer.parseInt(val.substring(pos+1, pos+5), 16);\n              pos += 4;\n              break;\n          }\n        } else if (ch==delim) {\n          pos++;  // skip over the quote\n          break;\n        }\n        sb.append(ch);\n        pos++;\n      }\n\n      return sb.toString();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/QueryParsing.StrParser#getQuotedString().mjava","pathOld":"src/java/org/apache/solr/search/QueryParsing.StrParser#getQuotedString().mjava","sourceNew":"    // return null if not a string\n    String getQuotedString() throws ParseException {\n      eatws();\n      char delim = peekChar();\n      if (!(delim == '\\\"' || delim == '\\'')) {\n        return null;\n      }\n      int val_start = ++pos;\n      StringBuilder sb = new StringBuilder(); // needed for escaping\n      for (; ;) {\n        if (pos >= end) {\n          throw new ParseException(\"Missing end quote for string at pos \" + (val_start - 1) + \" str='\" + val + \"'\");\n        }\n        char ch = val.charAt(pos);\n        if (ch == '\\\\') {\n          pos++;\n          if (pos >= end) break;\n          ch = val.charAt(pos);\n          switch (ch) {\n            case 'n':\n              ch = '\\n';\n              break;\n            case 't':\n              ch = '\\t';\n              break;\n            case 'r':\n              ch = '\\r';\n              break;\n            case 'b':\n              ch = '\\b';\n              break;\n            case 'f':\n              ch = '\\f';\n              break;\n            case 'u':\n              if (pos + 4 >= end) {\n                throw new ParseException(\"bad unicode escape \\\\uxxxx at pos\" + (val_start - 1) + \" str='\" + val + \"'\");\n              }\n              ch = (char) Integer.parseInt(val.substring(pos + 1, pos + 5), 16);\n              pos += 4;\n              break;\n          }\n        } else if (ch == delim) {\n          pos++;  // skip over the quote\n          break;\n        }\n        sb.append(ch);\n        pos++;\n      }\n\n      return sb.toString();\n    }\n\n","sourceOld":"    // return null if not a string\n    String getQuotedString() throws ParseException {\n      eatws();\n      char delim = peekChar();\n      if (!(delim == '\\\"' || delim == '\\'')) {\n        return null;\n      }\n      int val_start = ++pos;\n      StringBuilder sb = new StringBuilder(); // needed for escaping\n      for (; ;) {\n        if (pos >= end) {\n          throw new ParseException(\"Missing end quote for string at pos \" + (val_start - 1) + \" str='\" + val + \"'\");\n        }\n        char ch = val.charAt(pos);\n        if (ch == '\\\\') {\n          pos++;\n          if (pos >= end) break;\n          ch = val.charAt(pos);\n          switch (ch) {\n            case 'n':\n              ch = '\\n';\n              break;\n            case 't':\n              ch = '\\t';\n              break;\n            case 'r':\n              ch = '\\r';\n              break;\n            case 'b':\n              ch = '\\b';\n              break;\n            case 'f':\n              ch = '\\f';\n              break;\n            case 'u':\n              if (pos + 4 >= end) {\n                throw new ParseException(\"bad unicode escape \\\\uxxxx at pos\" + (val_start - 1) + \" str='\" + val + \"'\");\n              }\n              ch = (char) Integer.parseInt(val.substring(pos + 1, pos + 5), 16);\n              pos += 4;\n              break;\n          }\n        } else if (ch == delim) {\n          pos++;  // skip over the quote\n          break;\n        }\n        sb.append(ch);\n        pos++;\n      }\n\n      return sb.toString();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"749d75d8059027e0ea8aecc15b7016867347dacb":["66ab3886c1d845c59c9e5b23b2fb247b927db498"],"66ab3886c1d845c59c9e5b23b2fb247b927db498":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"32ef722831135736529762b4b97a13dd58b06f66":["749d75d8059027e0ea8aecc15b7016867347dacb"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["32ef722831135736529762b4b97a13dd58b06f66"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"749d75d8059027e0ea8aecc15b7016867347dacb":["32ef722831135736529762b4b97a13dd58b06f66"],"66ab3886c1d845c59c9e5b23b2fb247b927db498":["749d75d8059027e0ea8aecc15b7016867347dacb"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["66ab3886c1d845c59c9e5b23b2fb247b927db498"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"32ef722831135736529762b4b97a13dd58b06f66":["ad94625fb8d088209f46650c8097196fec67f00c"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}