{"path":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testFILTERClauseBehavesLikeMUST().mjava","commits":[{"id":"25f698887111a682424e759ba36083180899a1fd","date":1423588899,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testFILTERClauseBehavesLikeMUST().mjava","pathOld":"/dev/null","sourceNew":"  public void testFILTERClauseBehavesLikeMUST() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    Field f = newTextField(\"field\", \"a b c d\", Field.Store.NO);\n    doc.add(f);\n    w.addDocument(doc);\n    f.setStringValue(\"b d\");\n    w.addDocument(doc);\n    f.setStringValue(\"d\");\n    w.addDocument(doc);\n    w.commit();\n\n    DirectoryReader reader = w.getReader();\n    final IndexSearcher searcher = new IndexSearcher(reader);\n\n    for (List<String> requiredTerms : Arrays.<List<String>>asList(\n        Arrays.asList(\"a\", \"d\"),\n        Arrays.asList(\"a\", \"b\", \"d\"),\n        Arrays.asList(\"d\"),\n        Arrays.asList(\"e\"),\n        Arrays.asList())) {\n      final BooleanQuery bq1 = new BooleanQuery();\n      final BooleanQuery bq2 = new BooleanQuery();\n      for (String term : requiredTerms) {\n        final Query q = new TermQuery(new Term(\"field\", term));\n        bq1.add(q, Occur.MUST);\n        bq2.add(q, Occur.FILTER);\n      }\n\n      final BitSet matches1 = getMatches(searcher, bq1);\n      final BitSet matches2 = getMatches(searcher, bq2);\n      assertEquals(matches1, matches2);\n    }\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f68d01cf19df971dcdcb05e30247f4ad7ec9747","date":1434611645,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testFILTERClauseBehavesLikeMUST().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testFILTERClauseBehavesLikeMUST().mjava","sourceNew":"  public void testFILTERClauseBehavesLikeMUST() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    Field f = newTextField(\"field\", \"a b c d\", Field.Store.NO);\n    doc.add(f);\n    w.addDocument(doc);\n    f.setStringValue(\"b d\");\n    w.addDocument(doc);\n    f.setStringValue(\"d\");\n    w.addDocument(doc);\n    w.commit();\n\n    DirectoryReader reader = w.getReader();\n    final IndexSearcher searcher = new IndexSearcher(reader);\n\n    for (List<String> requiredTerms : Arrays.<List<String>>asList(\n        Arrays.asList(\"a\", \"d\"),\n        Arrays.asList(\"a\", \"b\", \"d\"),\n        Arrays.asList(\"d\"),\n        Arrays.asList(\"e\"),\n        Arrays.asList())) {\n      final BooleanQuery.Builder bq1 = new BooleanQuery.Builder();\n      final BooleanQuery.Builder bq2 = new BooleanQuery.Builder();\n      for (String term : requiredTerms) {\n        final Query q = new TermQuery(new Term(\"field\", term));\n        bq1.add(q, Occur.MUST);\n        bq2.add(q, Occur.FILTER);\n      }\n\n      final BitSet matches1 = getMatches(searcher, bq1.build());\n      final BitSet matches2 = getMatches(searcher, bq2.build());\n      assertEquals(matches1, matches2);\n    }\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testFILTERClauseBehavesLikeMUST() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    Field f = newTextField(\"field\", \"a b c d\", Field.Store.NO);\n    doc.add(f);\n    w.addDocument(doc);\n    f.setStringValue(\"b d\");\n    w.addDocument(doc);\n    f.setStringValue(\"d\");\n    w.addDocument(doc);\n    w.commit();\n\n    DirectoryReader reader = w.getReader();\n    final IndexSearcher searcher = new IndexSearcher(reader);\n\n    for (List<String> requiredTerms : Arrays.<List<String>>asList(\n        Arrays.asList(\"a\", \"d\"),\n        Arrays.asList(\"a\", \"b\", \"d\"),\n        Arrays.asList(\"d\"),\n        Arrays.asList(\"e\"),\n        Arrays.asList())) {\n      final BooleanQuery bq1 = new BooleanQuery();\n      final BooleanQuery bq2 = new BooleanQuery();\n      for (String term : requiredTerms) {\n        final Query q = new TermQuery(new Term(\"field\", term));\n        bq1.add(q, Occur.MUST);\n        bq2.add(q, Occur.FILTER);\n      }\n\n      final BitSet matches1 = getMatches(searcher, bq1);\n      final BitSet matches2 = getMatches(searcher, bq2);\n      assertEquals(matches1, matches2);\n    }\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["25f698887111a682424e759ba36083180899a1fd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"25f698887111a682424e759ba36083180899a1fd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"]},"commit2Childs":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["25f698887111a682424e759ba36083180899a1fd"],"25f698887111a682424e759ba36083180899a1fd":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}