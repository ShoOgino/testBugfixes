{"path":"lucene/core/src/test/org/apache/lucene/util/TestNumericUtils#testBigIntConversionAndOrdering().mjava","commits":[{"id":"a0e7cdd0facd912df00ec53365f98e7c54d6c9bb","date":1457059932,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestNumericUtils#testBigIntConversionAndOrdering().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * generate a series of encoded BigIntegers, each numerical one bigger than the one before.\n   * check for correct ordering of the encoded bytes and that values round-trip.\n   */\n  public void testBigIntConversionAndOrdering() throws Exception {\n    // we need at least 3 bytes of storage.\n    int size = TestUtil.nextInt(random(), 3, 16);\n    BytesRef previous = null;\n    BytesRef current = new BytesRef(new byte[size]);\n    for (long value = -100000L; value < 100000L; value++) {\n      NumericUtils.bigIntToSortableBytes(BigInteger.valueOf(value), size, current.bytes, current.offset);\n      if (previous == null) {\n        previous = new BytesRef(new byte[size]);\n      } else {\n        // test if smaller\n        assertTrue(\"current bigger than previous: \", previous.compareTo(current) < 0);\n      }\n      // test is back and forward conversion works\n      assertEquals(\"forward and back conversion should generate same BigInteger\", \n                   BigInteger.valueOf(value), \n                   NumericUtils.sortableBytesToBigInt(current.bytes, current.offset, current.length));\n      // next step\n      System.arraycopy(current.bytes, current.offset, previous.bytes, previous.offset, current.length);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf1a614098b46c9c22afebd7b898ae4d1d2fc273","date":1457088850,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestNumericUtils#testBigIntConversionAndOrdering().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * generate a series of encoded BigIntegers, each numerical one bigger than the one before.\n   * check for correct ordering of the encoded bytes and that values round-trip.\n   */\n  public void testBigIntConversionAndOrdering() throws Exception {\n    // we need at least 3 bytes of storage.\n    int size = TestUtil.nextInt(random(), 3, 16);\n    BytesRef previous = null;\n    BytesRef current = new BytesRef(new byte[size]);\n    for (long value = -100000L; value < 100000L; value++) {\n      NumericUtils.bigIntToSortableBytes(BigInteger.valueOf(value), size, current.bytes, current.offset);\n      if (previous == null) {\n        previous = new BytesRef(new byte[size]);\n      } else {\n        // test if smaller\n        assertTrue(\"current bigger than previous: \", previous.compareTo(current) < 0);\n      }\n      // test is back and forward conversion works\n      assertEquals(\"forward and back conversion should generate same BigInteger\", \n                   BigInteger.valueOf(value), \n                   NumericUtils.sortableBytesToBigInt(current.bytes, current.offset, current.length));\n      // next step\n      System.arraycopy(current.bytes, current.offset, previous.bytes, previous.offset, current.length);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a0e7cdd0facd912df00ec53365f98e7c54d6c9bb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"a0e7cdd0facd912df00ec53365f98e7c54d6c9bb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273","a0e7cdd0facd912df00ec53365f98e7c54d6c9bb"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7cdd0facd912df00ec53365f98e7c54d6c9bb":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}