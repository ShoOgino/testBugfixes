{"path":"lucene/backwards/src/test/org/apache/lucene/index/TestStressIndexing2#indexRandom(int,int,int,Directory).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/index/TestStressIndexing2#indexRandom(int,int,int,Directory).mjava","pathOld":"backwards/src/test/org/apache/lucene/index/TestStressIndexing2#indexRandom(int,int,int,Directory).mjava","sourceNew":"  public Map indexRandom(int nThreads, int iterations, int range, Directory dir) throws IOException, InterruptedException {\n    Map docs = new HashMap();\n    for(int iter=0;iter<3;iter++) {\n      IndexWriter w = new MockIndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.UNLIMITED);\n      w.setUseCompoundFile(false);\n\n      // force many merges\n      w.setMergeFactor(mergeFactor);\n      w.setRAMBufferSizeMB(.1);\n      w.setMaxBufferedDocs(maxBufferedDocs);\n\n      threads = new IndexingThread[nThreads];\n      for (int i=0; i<threads.length; i++) {\n        IndexingThread th = new IndexingThread();\n        th.w = w;\n        th.base = 1000000*i;\n        th.range = range;\n        th.iterations = iterations;\n        threads[i] = th;\n      }\n\n      for (int i=0; i<threads.length; i++) {\n        threads[i].start();\n      }\n      for (int i=0; i<threads.length; i++) {\n        threads[i].join();\n      }\n\n      // w.optimize();\n      w.close();    \n\n      for (int i=0; i<threads.length; i++) {\n        IndexingThread th = threads[i];\n        synchronized(th) {\n          docs.putAll(th.docs);\n        }\n      }\n    }\n\n    _TestUtil.checkIndex(dir);\n\n    return docs;\n  }\n\n","sourceOld":"  public Map indexRandom(int nThreads, int iterations, int range, Directory dir) throws IOException, InterruptedException {\n    Map docs = new HashMap();\n    for(int iter=0;iter<3;iter++) {\n      IndexWriter w = new MockIndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.UNLIMITED);\n      w.setUseCompoundFile(false);\n\n      // force many merges\n      w.setMergeFactor(mergeFactor);\n      w.setRAMBufferSizeMB(.1);\n      w.setMaxBufferedDocs(maxBufferedDocs);\n\n      threads = new IndexingThread[nThreads];\n      for (int i=0; i<threads.length; i++) {\n        IndexingThread th = new IndexingThread();\n        th.w = w;\n        th.base = 1000000*i;\n        th.range = range;\n        th.iterations = iterations;\n        threads[i] = th;\n      }\n\n      for (int i=0; i<threads.length; i++) {\n        threads[i].start();\n      }\n      for (int i=0; i<threads.length; i++) {\n        threads[i].join();\n      }\n\n      // w.optimize();\n      w.close();    \n\n      for (int i=0; i<threads.length; i++) {\n        IndexingThread th = threads[i];\n        synchronized(th) {\n          docs.putAll(th.docs);\n        }\n      }\n    }\n\n    _TestUtil.checkIndex(dir);\n\n    return docs;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/test/org/apache/lucene/index/TestStressIndexing2#indexRandom(int,int,int,Directory).mjava","sourceNew":null,"sourceOld":"  public Map indexRandom(int nThreads, int iterations, int range, Directory dir) throws IOException, InterruptedException {\n    Map docs = new HashMap();\n    for(int iter=0;iter<3;iter++) {\n      IndexWriter w = new MockIndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.UNLIMITED);\n      w.setUseCompoundFile(false);\n\n      // force many merges\n      w.setMergeFactor(mergeFactor);\n      w.setRAMBufferSizeMB(.1);\n      w.setMaxBufferedDocs(maxBufferedDocs);\n\n      threads = new IndexingThread[nThreads];\n      for (int i=0; i<threads.length; i++) {\n        IndexingThread th = new IndexingThread();\n        th.w = w;\n        th.base = 1000000*i;\n        th.range = range;\n        th.iterations = iterations;\n        threads[i] = th;\n      }\n\n      for (int i=0; i<threads.length; i++) {\n        threads[i].start();\n      }\n      for (int i=0; i<threads.length; i++) {\n        threads[i].join();\n      }\n\n      // w.optimize();\n      w.close();    \n\n      for (int i=0; i<threads.length; i++) {\n        IndexingThread th = threads[i];\n        synchronized(th) {\n          docs.putAll(th.docs);\n        }\n      }\n    }\n\n    _TestUtil.checkIndex(dir);\n\n    return docs;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}