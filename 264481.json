{"path":"lucene/core/src/java/org/apache/lucene/search/ConjunctionDISI#addTwoPhaseIterator(TwoPhaseIterator,List[DocIdSetIterator],List[TwoPhaseIterator]).mjava","commits":[{"id":"7dd748bb245633a8195281556bb0e68a6ea97d18","date":1449755030,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ConjunctionDISI#addTwoPhaseIterator(TwoPhaseIterator,List[DocIdSetIterator],List[TwoPhaseIterator]).mjava","pathOld":"/dev/null","sourceNew":"  private static void addTwoPhaseIterator(TwoPhaseIterator twoPhaseIter, List<DocIdSetIterator> allIterators, List<TwoPhaseIterator> twoPhaseIterators) {\n    addIterator(twoPhaseIter.approximation(), allIterators, twoPhaseIterators);\n    twoPhaseIterators.add(twoPhaseIter);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a8d33e6fc46a3a39568a7ff52b52c3b6bd4e9b83","date":1465831664,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ConjunctionDISI#addTwoPhaseIterator(TwoPhaseIterator,List[DocIdSetIterator],List[TwoPhaseIterator]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/ConjunctionDISI#addTwoPhaseIterator(TwoPhaseIterator,List[DocIdSetIterator],List[TwoPhaseIterator]).mjava","sourceNew":"  private static void addTwoPhaseIterator(TwoPhaseIterator twoPhaseIter, List<DocIdSetIterator> allIterators, List<TwoPhaseIterator> twoPhaseIterators) {\n    addIterator(twoPhaseIter.approximation(), allIterators, twoPhaseIterators);\n    if (twoPhaseIter.getClass() == ConjunctionTwoPhaseIterator.class) { // Check for exactly this class for collapsing\n      Collections.addAll(twoPhaseIterators, ((ConjunctionTwoPhaseIterator) twoPhaseIter).twoPhaseIterators);\n    } else {\n      twoPhaseIterators.add(twoPhaseIter);\n    }\n  }\n\n","sourceOld":"  private static void addTwoPhaseIterator(TwoPhaseIterator twoPhaseIter, List<DocIdSetIterator> allIterators, List<TwoPhaseIterator> twoPhaseIterators) {\n    addIterator(twoPhaseIter.approximation(), allIterators, twoPhaseIterators);\n    twoPhaseIterators.add(twoPhaseIter);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57dc82c7b33cd580e7ab5179019bc78f3d7f8e79","date":1465913303,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ConjunctionDISI#addTwoPhaseIterator(TwoPhaseIterator,List[DocIdSetIterator],List[TwoPhaseIterator]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/ConjunctionDISI#addTwoPhaseIterator(TwoPhaseIterator,List[DocIdSetIterator],List[TwoPhaseIterator]).mjava","sourceNew":"  private static void addTwoPhaseIterator(TwoPhaseIterator twoPhaseIter, List<DocIdSetIterator> allIterators, List<TwoPhaseIterator> twoPhaseIterators) {\n    addIterator(twoPhaseIter.approximation(), allIterators, twoPhaseIterators);\n    if (twoPhaseIter.getClass() == ConjunctionTwoPhaseIterator.class) { // Check for exactly this class for collapsing\n      Collections.addAll(twoPhaseIterators, ((ConjunctionTwoPhaseIterator) twoPhaseIter).twoPhaseIterators);\n    } else {\n      twoPhaseIterators.add(twoPhaseIter);\n    }\n  }\n\n","sourceOld":"  private static void addTwoPhaseIterator(TwoPhaseIterator twoPhaseIter, List<DocIdSetIterator> allIterators, List<TwoPhaseIterator> twoPhaseIterators) {\n    addIterator(twoPhaseIter.approximation(), allIterators, twoPhaseIterators);\n    twoPhaseIterators.add(twoPhaseIter);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ConjunctionDISI#addTwoPhaseIterator(TwoPhaseIterator,List[DocIdSetIterator],List[TwoPhaseIterator]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/ConjunctionDISI#addTwoPhaseIterator(TwoPhaseIterator,List[DocIdSetIterator],List[TwoPhaseIterator]).mjava","sourceNew":"  private static void addTwoPhaseIterator(TwoPhaseIterator twoPhaseIter, List<DocIdSetIterator> allIterators, List<TwoPhaseIterator> twoPhaseIterators) {\n    addIterator(twoPhaseIter.approximation(), allIterators, twoPhaseIterators);\n    if (twoPhaseIter.getClass() == ConjunctionTwoPhaseIterator.class) { // Check for exactly this class for collapsing\n      Collections.addAll(twoPhaseIterators, ((ConjunctionTwoPhaseIterator) twoPhaseIter).twoPhaseIterators);\n    } else {\n      twoPhaseIterators.add(twoPhaseIter);\n    }\n  }\n\n","sourceOld":"  private static void addTwoPhaseIterator(TwoPhaseIterator twoPhaseIter, List<DocIdSetIterator> allIterators, List<TwoPhaseIterator> twoPhaseIterators) {\n    addIterator(twoPhaseIter.approximation(), allIterators, twoPhaseIterators);\n    twoPhaseIterators.add(twoPhaseIter);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a8d33e6fc46a3a39568a7ff52b52c3b6bd4e9b83":["7dd748bb245633a8195281556bb0e68a6ea97d18"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"57dc82c7b33cd580e7ab5179019bc78f3d7f8e79":["7dd748bb245633a8195281556bb0e68a6ea97d18","a8d33e6fc46a3a39568a7ff52b52c3b6bd4e9b83"],"7dd748bb245633a8195281556bb0e68a6ea97d18":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["7dd748bb245633a8195281556bb0e68a6ea97d18","57dc82c7b33cd580e7ab5179019bc78f3d7f8e79"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["57dc82c7b33cd580e7ab5179019bc78f3d7f8e79"]},"commit2Childs":{"a8d33e6fc46a3a39568a7ff52b52c3b6bd4e9b83":["57dc82c7b33cd580e7ab5179019bc78f3d7f8e79"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7dd748bb245633a8195281556bb0e68a6ea97d18"],"57dc82c7b33cd580e7ab5179019bc78f3d7f8e79":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7dd748bb245633a8195281556bb0e68a6ea97d18":["a8d33e6fc46a3a39568a7ff52b52c3b6bd4e9b83","57dc82c7b33cd580e7ab5179019bc78f3d7f8e79","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}