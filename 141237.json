{"path":"lucene/core/src/java/org/apache/lucene/geo/Tessellator#tathamSort(Node).mjava","commits":[{"id":"09c1e6d465800c73af60624bf9d4459a19f7940c","date":1579293280,"type":1,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/geo/Tessellator#tathamSort(Node).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/geo/Tessellator#tathamSort(Node).mjava","sourceNew":"  /**\n   * Simon Tatham's doubly-linked list O(n log n) mergesort\n   * see: http://www.chiark.greenend.org.uk/~sgtatham/algorithms/listsort.html\n   **/\n  private static final void tathamSort(Node list) {\n    Node p, q, e, tail;\n    int i, numMerges, pSize, qSize;\n    int inSize = 1;\n\n    if (list == null) {\n      return;\n    }\n\n    do {\n      p = list;\n      list = null;\n      tail = null;\n      // count number of merges in this pass\n      numMerges = 0;\n\n      while(p != null) {\n        ++numMerges;\n        // step 'insize' places along from p\n        q = p;\n        for (i = 0, pSize = 0; i < inSize && q != null; ++i, ++pSize, q = q.nextZ);\n        // if q hasn't fallen off end, we have two lists to merge\n        qSize = inSize;\n\n        // now we have two lists; merge\n        while (pSize > 0 || (qSize > 0 && q != null)) {\n          if (pSize != 0 && (qSize == 0 || q == null || Long.compareUnsigned(p.morton, q.morton) <= 0)) {\n            e = p;\n            p = p.nextZ;\n            --pSize;\n          } else {\n            e = q;\n            q = q.nextZ;\n            --qSize;\n          }\n\n          if (tail != null) {\n            tail.nextZ = e;\n          } else {\n            list = e;\n          }\n          // maintain reverse pointers\n          e.previousZ = tail;\n          tail = e;\n        }\n        // now p has stepped 'insize' places along, and q has too\n        p = q;\n      }\n\n      tail.nextZ = null;\n      inSize *= 2;\n    } while (numMerges > 1);\n  }\n\n","sourceOld":"  /**\n   * Simon Tatham's doubly-linked list O(n log n) mergesort\n   * see: http://www.chiark.greenend.org.uk/~sgtatham/algorithms/listsort.html\n   **/\n  private static final void tathamSort(Node list) {\n    Node p, q, e, tail;\n    int i, numMerges, pSize, qSize;\n    int inSize = 1;\n\n    if (list == null) {\n      return;\n    }\n\n    do {\n      p = list;\n      list = null;\n      tail = null;\n      // count number of merges in this pass\n      numMerges = 0;\n\n      while(p != null) {\n        ++numMerges;\n        // step 'insize' places along from p\n        q = p;\n        for (i = 0, pSize = 0; i < inSize && q != null; ++i, ++pSize, q = q.nextZ);\n        // if q hasn't fallen off end, we have two lists to merge\n        qSize = inSize;\n\n        // now we have two lists; merge\n        while (pSize > 0 || (qSize > 0 && q != null)) {\n          if (pSize != 0 && (qSize == 0 || q == null || Long.compareUnsigned(p.morton, q.morton) <= 0)) {\n            e = p;\n            p = p.nextZ;\n            --pSize;\n          } else {\n            e = q;\n            q = q.nextZ;\n            --qSize;\n          }\n\n          if (tail != null) {\n            tail.nextZ = e;\n          } else {\n            list = e;\n          }\n          // maintain reverse pointers\n          e.previousZ = tail;\n          tail = e;\n        }\n        // now p has stepped 'insize' places along, and q has too\n        p = q;\n      }\n\n      tail.nextZ = null;\n      inSize *= 2;\n    } while (numMerges > 1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"09c1e6d465800c73af60624bf9d4459a19f7940c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["09c1e6d465800c73af60624bf9d4459a19f7940c"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["09c1e6d465800c73af60624bf9d4459a19f7940c"],"09c1e6d465800c73af60624bf9d4459a19f7940c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}