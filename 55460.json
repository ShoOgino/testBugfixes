{"path":"lucene/core/src/java/org/apache/lucene/index/FieldInfos.FieldNumbers#verifyConsistent(Integer,String,IndexOptions).mjava","commits":[{"id":"165c905a42bedc7c7d1acb37b177498306b7e866","date":1518704038,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/FieldInfos.FieldNumbers#verifyConsistent(Integer,String,IndexOptions).mjava","pathOld":"/dev/null","sourceNew":"    synchronized void verifyConsistent(Integer number, String name, IndexOptions indexOptions) {\n      if (name.equals(numberToName.get(number)) == false) {\n        throw new IllegalArgumentException(\"field number \" + number + \" is already mapped to field name \\\"\" + numberToName.get(number) + \"\\\", not \\\"\" + name + \"\\\"\");\n      }\n      if (number.equals(nameToNumber.get(name)) == false) {\n        throw new IllegalArgumentException(\"field name \\\"\" + name + \"\\\" is already mapped to field number \\\"\" + nameToNumber.get(name) + \"\\\", not \\\"\" + number + \"\\\"\");\n      }\n      IndexOptions currentIndexOptions = this.indexOptions.get(name);\n      if (indexOptions != IndexOptions.NONE && currentIndexOptions != null && currentIndexOptions != IndexOptions.NONE && indexOptions != currentIndexOptions) {\n        throw new IllegalArgumentException(\"cannot change index options from \" + currentIndexOptions + \" to \" + indexOptions + \" for field \\\"\" + name + \"\\\"\");\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["21ef7a2296a649922c9906e94b1bd3553bbbd5e6"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"21ef7a2296a649922c9906e94b1bd3553bbbd5e6","date":1519032476,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/FieldInfos.FieldNumbers#verifyConsistent(Integer,String,IndexOptions).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/FieldInfos.FieldNumbers#verifyConsistent(Integer,String,IndexOptions).mjava","sourceNew":"    synchronized void verifyConsistent(Integer number, String name, IndexOptions indexOptions) {\n      if (name.equals(numberToName.get(number)) == false) {\n        throw new IllegalArgumentException(\"field number \" + number + \" is already mapped to field name \\\"\" + numberToName.get(number) + \"\\\", not \\\"\" + name + \"\\\"\");\n      }\n      if (number.equals(nameToNumber.get(name)) == false) {\n        throw new IllegalArgumentException(\"field name \\\"\" + name + \"\\\" is already mapped to field number \\\"\" + nameToNumber.get(name) + \"\\\", not \\\"\" + number + \"\\\"\");\n      }\n      IndexOptions currentIndexOptions = this.indexOptions.get(name);\n      if (indexOptions != IndexOptions.NONE && currentIndexOptions != null && currentIndexOptions != IndexOptions.NONE && indexOptions != currentIndexOptions) {\n        throw new IllegalArgumentException(\"cannot change field \\\"\" + name + \"\\\" from index options=\" + currentIndexOptions + \" to inconsistent index options=\" + indexOptions);\n      }\n    }\n\n","sourceOld":"    synchronized void verifyConsistent(Integer number, String name, IndexOptions indexOptions) {\n      if (name.equals(numberToName.get(number)) == false) {\n        throw new IllegalArgumentException(\"field number \" + number + \" is already mapped to field name \\\"\" + numberToName.get(number) + \"\\\", not \\\"\" + name + \"\\\"\");\n      }\n      if (number.equals(nameToNumber.get(name)) == false) {\n        throw new IllegalArgumentException(\"field name \\\"\" + name + \"\\\" is already mapped to field number \\\"\" + nameToNumber.get(name) + \"\\\", not \\\"\" + number + \"\\\"\");\n      }\n      IndexOptions currentIndexOptions = this.indexOptions.get(name);\n      if (indexOptions != IndexOptions.NONE && currentIndexOptions != null && currentIndexOptions != IndexOptions.NONE && indexOptions != currentIndexOptions) {\n        throw new IllegalArgumentException(\"cannot change index options from \" + currentIndexOptions + \" to \" + indexOptions + \" for field \\\"\" + name + \"\\\"\");\n      }\n    }\n\n","bugFix":["165c905a42bedc7c7d1acb37b177498306b7e866"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"165c905a42bedc7c7d1acb37b177498306b7e866":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"21ef7a2296a649922c9906e94b1bd3553bbbd5e6":["165c905a42bedc7c7d1acb37b177498306b7e866"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["21ef7a2296a649922c9906e94b1bd3553bbbd5e6"]},"commit2Childs":{"165c905a42bedc7c7d1acb37b177498306b7e866":["21ef7a2296a649922c9906e94b1bd3553bbbd5e6"],"21ef7a2296a649922c9906e94b1bd3553bbbd5e6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["165c905a42bedc7c7d1acb37b177498306b7e866"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}