{"path":"lucene/src/java/org/apache/lucene/search/ConstantScoreQuery.ConstantScorer#wrapCollector(Collector).mjava","commits":[{"id":"3e37a877cbb3c0d736bdc1fcb3aea4c24015799f","date":1293976079,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/ConstantScoreQuery.ConstantScorer#wrapCollector(Collector).mjava","pathOld":"/dev/null","sourceNew":"    private Collector wrapCollector(final Collector collector) {\n      return new Collector() {\n        @Override\n        public void setScorer(Scorer scorer) throws IOException {\n          // we must wrap again here, but using the scorer passed in as parameter:\n          collector.setScorer(new ConstantScorer(ConstantScorer.this.getSimilarity(),\n            scorer, ConstantScorer.this.weight));\n        }\n        \n        @Override\n        public void collect(int doc) throws IOException {\n          collector.collect(doc);\n        }\n        \n        @Override\n        public void setNextReader(IndexReader reader, int docBase) throws IOException {\n          collector.setNextReader(reader, docBase);\n        }\n        \n        @Override\n        public boolean acceptsDocsOutOfOrder() {\n          return collector.acceptsDocsOutOfOrder();\n        }\n      };\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c","date":1294014627,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/ConstantScoreQuery.ConstantScorer#wrapCollector(Collector).mjava","pathOld":"/dev/null","sourceNew":"    private Collector wrapCollector(final Collector collector) {\n      return new Collector() {\n        @Override\n        public void setScorer(Scorer scorer) throws IOException {\n          // we must wrap again here, but using the scorer passed in as parameter:\n          collector.setScorer(new ConstantScorer(ConstantScorer.this.getSimilarity(),\n            scorer, ConstantScorer.this.weight));\n        }\n        \n        @Override\n        public void collect(int doc) throws IOException {\n          collector.collect(doc);\n        }\n        \n        @Override\n        public void setNextReader(IndexReader reader, int docBase) throws IOException {\n          collector.setNextReader(reader, docBase);\n        }\n        \n        @Override\n        public boolean acceptsDocsOutOfOrder() {\n          return collector.acceptsDocsOutOfOrder();\n        }\n      };\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/ConstantScoreQuery.ConstantScorer#wrapCollector(Collector).mjava","pathOld":"/dev/null","sourceNew":"    private Collector wrapCollector(final Collector collector) {\n      return new Collector() {\n        @Override\n        public void setScorer(Scorer scorer) throws IOException {\n          // we must wrap again here, but using the scorer passed in as parameter:\n          collector.setScorer(new ConstantScorer(ConstantScorer.this.getSimilarity(),\n            scorer, ConstantScorer.this.weight));\n        }\n        \n        @Override\n        public void collect(int doc) throws IOException {\n          collector.collect(doc);\n        }\n        \n        @Override\n        public void setNextReader(IndexReader reader, int docBase) throws IOException {\n          collector.setNextReader(reader, docBase);\n        }\n        \n        @Override\n        public boolean acceptsDocsOutOfOrder() {\n          return collector.acceptsDocsOutOfOrder();\n        }\n      };\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"323f871ffe96b871d8c534a614be60751bb023c2","date":1294820532,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/ConstantScoreQuery.ConstantScorer#wrapCollector(Collector).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/ConstantScoreQuery.ConstantScorer#wrapCollector(Collector).mjava","sourceNew":"    private Collector wrapCollector(final Collector collector) {\n      return new Collector() {\n        @Override\n        public void setScorer(Scorer scorer) throws IOException {\n          // we must wrap again here, but using the scorer passed in as parameter:\n          collector.setScorer(new ConstantScorer(ConstantScorer.this.getSimilarity(),\n            scorer, ConstantScorer.this.weight));\n        }\n        \n        @Override\n        public void collect(int doc) throws IOException {\n          collector.collect(doc);\n        }\n        \n        @Override\n        public void setNextReader(AtomicReaderContext context) throws IOException {\n          collector.setNextReader(context);\n        }\n        \n        @Override\n        public boolean acceptsDocsOutOfOrder() {\n          return collector.acceptsDocsOutOfOrder();\n        }\n      };\n    }\n\n","sourceOld":"    private Collector wrapCollector(final Collector collector) {\n      return new Collector() {\n        @Override\n        public void setScorer(Scorer scorer) throws IOException {\n          // we must wrap again here, but using the scorer passed in as parameter:\n          collector.setScorer(new ConstantScorer(ConstantScorer.this.getSimilarity(),\n            scorer, ConstantScorer.this.weight));\n        }\n        \n        @Override\n        public void collect(int doc) throws IOException {\n          collector.collect(doc);\n        }\n        \n        @Override\n        public void setNextReader(IndexReader reader, int docBase) throws IOException {\n          collector.setNextReader(reader, docBase);\n        }\n        \n        @Override\n        public boolean acceptsDocsOutOfOrder() {\n          return collector.acceptsDocsOutOfOrder();\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/ConstantScoreQuery.ConstantScorer#wrapCollector(Collector).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/ConstantScoreQuery.ConstantScorer#wrapCollector(Collector).mjava","sourceNew":"    private Collector wrapCollector(final Collector collector) {\n      return new Collector() {\n        @Override\n        public void setScorer(Scorer scorer) throws IOException {\n          // we must wrap again here, but using the scorer passed in as parameter:\n          collector.setScorer(new ConstantScorer(ConstantScorer.this.getSimilarity(),\n            scorer, ConstantScorer.this.weight));\n        }\n        \n        @Override\n        public void collect(int doc) throws IOException {\n          collector.collect(doc);\n        }\n        \n        @Override\n        public void setNextReader(AtomicReaderContext context) throws IOException {\n          collector.setNextReader(context);\n        }\n        \n        @Override\n        public boolean acceptsDocsOutOfOrder() {\n          return collector.acceptsDocsOutOfOrder();\n        }\n      };\n    }\n\n","sourceOld":"    private Collector wrapCollector(final Collector collector) {\n      return new Collector() {\n        @Override\n        public void setScorer(Scorer scorer) throws IOException {\n          // we must wrap again here, but using the scorer passed in as parameter:\n          collector.setScorer(new ConstantScorer(ConstantScorer.this.getSimilarity(),\n            scorer, ConstantScorer.this.weight));\n        }\n        \n        @Override\n        public void collect(int doc) throws IOException {\n          collector.collect(doc);\n        }\n        \n        @Override\n        public void setNextReader(IndexReader reader, int docBase) throws IOException {\n          collector.setNextReader(reader, docBase);\n        }\n        \n        @Override\n        public boolean acceptsDocsOutOfOrder() {\n          return collector.acceptsDocsOutOfOrder();\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e5e679b9c5f68f1f331de920ae8366af75b44060","date":1295555804,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/ConstantScoreQuery.ConstantScorer#wrapCollector(Collector).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/ConstantScoreQuery.ConstantScorer#wrapCollector(Collector).mjava","sourceNew":"    private Collector wrapCollector(final Collector collector) {\n      return new Collector() {\n        @Override\n        public void setScorer(Scorer scorer) throws IOException {\n          // we must wrap again here, but using the scorer passed in as parameter:\n          collector.setScorer(new ConstantScorer(scorer, ConstantScorer.this.weight));\n        }\n        \n        @Override\n        public void collect(int doc) throws IOException {\n          collector.collect(doc);\n        }\n        \n        @Override\n        public void setNextReader(AtomicReaderContext context) throws IOException {\n          collector.setNextReader(context);\n        }\n        \n        @Override\n        public boolean acceptsDocsOutOfOrder() {\n          return collector.acceptsDocsOutOfOrder();\n        }\n      };\n    }\n\n","sourceOld":"    private Collector wrapCollector(final Collector collector) {\n      return new Collector() {\n        @Override\n        public void setScorer(Scorer scorer) throws IOException {\n          // we must wrap again here, but using the scorer passed in as parameter:\n          collector.setScorer(new ConstantScorer(ConstantScorer.this.getSimilarity(),\n            scorer, ConstantScorer.this.weight));\n        }\n        \n        @Override\n        public void collect(int doc) throws IOException {\n          collector.collect(doc);\n        }\n        \n        @Override\n        public void setNextReader(AtomicReaderContext context) throws IOException {\n          collector.setNextReader(context);\n        }\n        \n        @Override\n        public boolean acceptsDocsOutOfOrder() {\n          return collector.acceptsDocsOutOfOrder();\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e79a6d080bdd5b2a8f56342cf571b5476de04180","date":1295638686,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/ConstantScoreQuery.ConstantScorer#wrapCollector(Collector).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/ConstantScoreQuery.ConstantScorer#wrapCollector(Collector).mjava","sourceNew":"    private Collector wrapCollector(final Collector collector) {\n      return new Collector() {\n        @Override\n        public void setScorer(Scorer scorer) throws IOException {\n          // we must wrap again here, but using the scorer passed in as parameter:\n          collector.setScorer(new ConstantScorer(scorer, ConstantScorer.this.weight));\n        }\n        \n        @Override\n        public void collect(int doc) throws IOException {\n          collector.collect(doc);\n        }\n        \n        @Override\n        public void setNextReader(AtomicReaderContext context) throws IOException {\n          collector.setNextReader(context);\n        }\n        \n        @Override\n        public boolean acceptsDocsOutOfOrder() {\n          return collector.acceptsDocsOutOfOrder();\n        }\n      };\n    }\n\n","sourceOld":"    private Collector wrapCollector(final Collector collector) {\n      return new Collector() {\n        @Override\n        public void setScorer(Scorer scorer) throws IOException {\n          // we must wrap again here, but using the scorer passed in as parameter:\n          collector.setScorer(new ConstantScorer(ConstantScorer.this.getSimilarity(),\n            scorer, ConstantScorer.this.weight));\n        }\n        \n        @Override\n        public void collect(int doc) throws IOException {\n          collector.collect(doc);\n        }\n        \n        @Override\n        public void setNextReader(AtomicReaderContext context) throws IOException {\n          collector.setNextReader(context);\n        }\n        \n        @Override\n        public boolean acceptsDocsOutOfOrder() {\n          return collector.acceptsDocsOutOfOrder();\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/ConstantScoreQuery.ConstantScorer#wrapCollector(Collector).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/ConstantScoreQuery.ConstantScorer#wrapCollector(Collector).mjava","sourceNew":"    private Collector wrapCollector(final Collector collector) {\n      return new Collector() {\n        @Override\n        public void setScorer(Scorer scorer) throws IOException {\n          // we must wrap again here, but using the scorer passed in as parameter:\n          collector.setScorer(new ConstantScorer(scorer, ConstantScorer.this.weight));\n        }\n        \n        @Override\n        public void collect(int doc) throws IOException {\n          collector.collect(doc);\n        }\n        \n        @Override\n        public void setNextReader(AtomicReaderContext context) throws IOException {\n          collector.setNextReader(context);\n        }\n        \n        @Override\n        public boolean acceptsDocsOutOfOrder() {\n          return collector.acceptsDocsOutOfOrder();\n        }\n      };\n    }\n\n","sourceOld":"    private Collector wrapCollector(final Collector collector) {\n      return new Collector() {\n        @Override\n        public void setScorer(Scorer scorer) throws IOException {\n          // we must wrap again here, but using the scorer passed in as parameter:\n          collector.setScorer(new ConstantScorer(ConstantScorer.this.getSimilarity(),\n            scorer, ConstantScorer.this.weight));\n        }\n        \n        @Override\n        public void collect(int doc) throws IOException {\n          collector.collect(doc);\n        }\n        \n        @Override\n        public void setNextReader(IndexReader reader, int docBase) throws IOException {\n          collector.setNextReader(reader, docBase);\n        }\n        \n        @Override\n        public boolean acceptsDocsOutOfOrder() {\n          return collector.acceptsDocsOutOfOrder();\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f3cee3d20b0c786e6fca20539454262e29edcab","date":1310101685,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/ConstantScoreQuery.ConstantScorer#wrapCollector(Collector).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/ConstantScoreQuery.ConstantScorer#wrapCollector(Collector).mjava","sourceNew":"    private Collector wrapCollector(final Collector collector) {\n      return new Collector() {\n        @Override\n        public void setScorer(Scorer scorer) throws IOException {\n          // we must wrap again here, but using the scorer passed in as parameter:\n          collector.setScorer(new ConstantScorer(scorer, ConstantScorer.this.weight, ConstantScorer.this.theScore));\n        }\n        \n        @Override\n        public void collect(int doc) throws IOException {\n          collector.collect(doc);\n        }\n        \n        @Override\n        public void setNextReader(AtomicReaderContext context) throws IOException {\n          collector.setNextReader(context);\n        }\n        \n        @Override\n        public boolean acceptsDocsOutOfOrder() {\n          return collector.acceptsDocsOutOfOrder();\n        }\n      };\n    }\n\n","sourceOld":"    private Collector wrapCollector(final Collector collector) {\n      return new Collector() {\n        @Override\n        public void setScorer(Scorer scorer) throws IOException {\n          // we must wrap again here, but using the scorer passed in as parameter:\n          collector.setScorer(new ConstantScorer(scorer, ConstantScorer.this.weight));\n        }\n        \n        @Override\n        public void collect(int doc) throws IOException {\n          collector.collect(doc);\n        }\n        \n        @Override\n        public void setNextReader(AtomicReaderContext context) throws IOException {\n          collector.setNextReader(context);\n        }\n        \n        @Override\n        public boolean acceptsDocsOutOfOrder() {\n          return collector.acceptsDocsOutOfOrder();\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f0b9507caf22f292ac0e5e59f62db4275adf4511","date":1310107283,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/ConstantScoreQuery.ConstantScorer#wrapCollector(Collector).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/ConstantScoreQuery.ConstantScorer#wrapCollector(Collector).mjava","sourceNew":"    private Collector wrapCollector(final Collector collector) {\n      return new Collector() {\n        @Override\n        public void setScorer(Scorer scorer) throws IOException {\n          // we must wrap again here, but using the scorer passed in as parameter:\n          collector.setScorer(new ConstantScorer(scorer, ConstantScorer.this.weight, ConstantScorer.this.theScore));\n        }\n        \n        @Override\n        public void collect(int doc) throws IOException {\n          collector.collect(doc);\n        }\n        \n        @Override\n        public void setNextReader(AtomicReaderContext context) throws IOException {\n          collector.setNextReader(context);\n        }\n        \n        @Override\n        public boolean acceptsDocsOutOfOrder() {\n          return collector.acceptsDocsOutOfOrder();\n        }\n      };\n    }\n\n","sourceOld":"    private Collector wrapCollector(final Collector collector) {\n      return new Collector() {\n        @Override\n        public void setScorer(Scorer scorer) throws IOException {\n          // we must wrap again here, but using the scorer passed in as parameter:\n          collector.setScorer(new ConstantScorer(scorer, ConstantScorer.this.weight));\n        }\n        \n        @Override\n        public void collect(int doc) throws IOException {\n          collector.collect(doc);\n        }\n        \n        @Override\n        public void setNextReader(AtomicReaderContext context) throws IOException {\n          collector.setNextReader(context);\n        }\n        \n        @Override\n        public boolean acceptsDocsOutOfOrder() {\n          return collector.acceptsDocsOutOfOrder();\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1291e4568eb7d9463d751627596ef14baf4c1603","date":1310112572,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/ConstantScoreQuery.ConstantScorer#wrapCollector(Collector).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/ConstantScoreQuery.ConstantScorer#wrapCollector(Collector).mjava","sourceNew":"    private Collector wrapCollector(final Collector collector) {\n      return new Collector() {\n        @Override\n        public void setScorer(Scorer scorer) throws IOException {\n          // we must wrap again here, but using the scorer passed in as parameter:\n          collector.setScorer(new ConstantScorer(scorer, ConstantScorer.this.weight, ConstantScorer.this.theScore));\n        }\n        \n        @Override\n        public void collect(int doc) throws IOException {\n          collector.collect(doc);\n        }\n        \n        @Override\n        public void setNextReader(AtomicReaderContext context) throws IOException {\n          collector.setNextReader(context);\n        }\n        \n        @Override\n        public boolean acceptsDocsOutOfOrder() {\n          return collector.acceptsDocsOutOfOrder();\n        }\n      };\n    }\n\n","sourceOld":"    private Collector wrapCollector(final Collector collector) {\n      return new Collector() {\n        @Override\n        public void setScorer(Scorer scorer) throws IOException {\n          // we must wrap again here, but using the scorer passed in as parameter:\n          collector.setScorer(new ConstantScorer(scorer, ConstantScorer.this.weight));\n        }\n        \n        @Override\n        public void collect(int doc) throws IOException {\n          collector.collect(doc);\n        }\n        \n        @Override\n        public void setNextReader(AtomicReaderContext context) throws IOException {\n          collector.setNextReader(context);\n        }\n        \n        @Override\n        public boolean acceptsDocsOutOfOrder() {\n          return collector.acceptsDocsOutOfOrder();\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ConstantScoreQuery.ConstantScorer#wrapCollector(Collector).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/ConstantScoreQuery.ConstantScorer#wrapCollector(Collector).mjava","sourceNew":"    private Collector wrapCollector(final Collector collector) {\n      return new Collector() {\n        @Override\n        public void setScorer(Scorer scorer) throws IOException {\n          // we must wrap again here, but using the scorer passed in as parameter:\n          collector.setScorer(new ConstantScorer(scorer, ConstantScorer.this.weight, ConstantScorer.this.theScore));\n        }\n        \n        @Override\n        public void collect(int doc) throws IOException {\n          collector.collect(doc);\n        }\n        \n        @Override\n        public void setNextReader(AtomicReaderContext context) throws IOException {\n          collector.setNextReader(context);\n        }\n        \n        @Override\n        public boolean acceptsDocsOutOfOrder() {\n          return collector.acceptsDocsOutOfOrder();\n        }\n      };\n    }\n\n","sourceOld":"    private Collector wrapCollector(final Collector collector) {\n      return new Collector() {\n        @Override\n        public void setScorer(Scorer scorer) throws IOException {\n          // we must wrap again here, but using the scorer passed in as parameter:\n          collector.setScorer(new ConstantScorer(scorer, ConstantScorer.this.weight, ConstantScorer.this.theScore));\n        }\n        \n        @Override\n        public void collect(int doc) throws IOException {\n          collector.collect(doc);\n        }\n        \n        @Override\n        public void setNextReader(AtomicReaderContext context) throws IOException {\n          collector.setNextReader(context);\n        }\n        \n        @Override\n        public boolean acceptsDocsOutOfOrder() {\n          return collector.acceptsDocsOutOfOrder();\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3e37a877cbb3c0d736bdc1fcb3aea4c24015799f"],"0f3cee3d20b0c786e6fca20539454262e29edcab":["e5e679b9c5f68f1f331de920ae8366af75b44060"],"323f871ffe96b871d8c534a614be60751bb023c2":["3e37a877cbb3c0d736bdc1fcb3aea4c24015799f"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["0f3cee3d20b0c786e6fca20539454262e29edcab"],"3e37a877cbb3c0d736bdc1fcb3aea4c24015799f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e79a6d080bdd5b2a8f56342cf571b5476de04180":["868da859b43505d9d2a023bfeae6dd0c795f5295","e5e679b9c5f68f1f331de920ae8366af75b44060"],"1291e4568eb7d9463d751627596ef14baf4c1603":["e5e679b9c5f68f1f331de920ae8366af75b44060","0f3cee3d20b0c786e6fca20539454262e29edcab"],"ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3e37a877cbb3c0d736bdc1fcb3aea4c24015799f"],"f0b9507caf22f292ac0e5e59f62db4275adf4511":["e5e679b9c5f68f1f331de920ae8366af75b44060","0f3cee3d20b0c786e6fca20539454262e29edcab"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["70ad682703b8585f5d0a637efec044d57ec05efb","e5e679b9c5f68f1f331de920ae8366af75b44060"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e5e679b9c5f68f1f331de920ae8366af75b44060":["323f871ffe96b871d8c534a614be60751bb023c2"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c","323f871ffe96b871d8c534a614be60751bb023c2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"0f3cee3d20b0c786e6fca20539454262e29edcab":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","1291e4568eb7d9463d751627596ef14baf4c1603","f0b9507caf22f292ac0e5e59f62db4275adf4511"],"323f871ffe96b871d8c534a614be60751bb023c2":["e5e679b9c5f68f1f331de920ae8366af75b44060","868da859b43505d9d2a023bfeae6dd0c795f5295"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3e37a877cbb3c0d736bdc1fcb3aea4c24015799f":["70ad682703b8585f5d0a637efec044d57ec05efb","323f871ffe96b871d8c534a614be60751bb023c2","ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c"],"e79a6d080bdd5b2a8f56342cf571b5476de04180":[],"1291e4568eb7d9463d751627596ef14baf4c1603":[],"ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c":["868da859b43505d9d2a023bfeae6dd0c795f5295"],"f0b9507caf22f292ac0e5e59f62db4275adf4511":[],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["70ad682703b8585f5d0a637efec044d57ec05efb","3e37a877cbb3c0d736bdc1fcb3aea4c24015799f","ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c"],"e5e679b9c5f68f1f331de920ae8366af75b44060":["0f3cee3d20b0c786e6fca20539454262e29edcab","e79a6d080bdd5b2a8f56342cf571b5476de04180","1291e4568eb7d9463d751627596ef14baf4c1603","f0b9507caf22f292ac0e5e59f62db4275adf4511","29ef99d61cda9641b6250bf9567329a6e65f901d"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["e79a6d080bdd5b2a8f56342cf571b5476de04180"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e79a6d080bdd5b2a8f56342cf571b5476de04180","1291e4568eb7d9463d751627596ef14baf4c1603","f0b9507caf22f292ac0e5e59f62db4275adf4511","29ef99d61cda9641b6250bf9567329a6e65f901d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}