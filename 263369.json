{"path":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#getRequestPurpose(Integer).mjava","commits":[{"id":"d9d424bd039937b4125152b454b3a32754b06f6c","date":1384391321,"type":0,"author":"Ryan Ernst","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#getRequestPurpose(Integer).mjava","pathOld":"/dev/null","sourceNew":"   /**\n   * Given the integer purpose of a request generates a readable value corresponding \n   * the request purposes (there can be more than one on a single request). If \n   * there is a purpose parameter present that's not known this method will \n   * return {@value #UNKNOWN_VALUE}\n   * @param reqPurpose Numeric request purpose\n   * @return a comma separated list of purposes or {@value #UNKNOWN_VALUE}\n   */\n  public static String getRequestPurpose(Integer reqPurpose) {\n      if (reqPurpose != null) {\n          StringBuilder builder = new StringBuilder();\n          for (Map.Entry<Integer, String>entry : purposes.entrySet()) {\n              if ((reqPurpose & entry.getKey()) != 0) {\n                  builder.append(entry.getValue() + \",\");\n              }\n          }\n          if (builder.length() == 0) {\n              return UNKNOWN_VALUE;\n          }\n          builder.setLength(builder.length() - 1);\n          return builder.toString();\n      }\n      return UNKNOWN_VALUE;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b5991832ae4bac45cecfff0fc33125aeac823d3d","date":1456229449,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#getRequestPurpose(Integer).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#getRequestPurpose(Integer).mjava","sourceNew":"   /**\n   * Given the integer purpose of a request generates a readable value corresponding\n   * the request purposes (there can be more than one on a single request). If\n   * there is a purpose parameter present that's not known this method will\n   * return {@value #UNKNOWN_VALUE}\n   * @param reqPurpose Numeric request purpose\n   * @return a comma separated list of purposes or {@value #UNKNOWN_VALUE}\n   */\n  public static String getRequestPurpose(Integer reqPurpose) {\n      if (reqPurpose != null) {\n          StringBuilder builder = new StringBuilder();\n          for (Map.Entry<Integer, String>entry : purposes.entrySet()) {\n              if ((reqPurpose & entry.getKey()) != 0) {\n                  builder.append(entry.getValue() + \",\");\n              }\n          }\n          if (builder.length() == 0) {\n              return UNKNOWN_VALUE;\n          }\n          builder.setLength(builder.length() - 1);\n          return builder.toString();\n      }\n      return UNKNOWN_VALUE;\n  }\n\n","sourceOld":"   /**\n   * Given the integer purpose of a request generates a readable value corresponding \n   * the request purposes (there can be more than one on a single request). If \n   * there is a purpose parameter present that's not known this method will \n   * return {@value #UNKNOWN_VALUE}\n   * @param reqPurpose Numeric request purpose\n   * @return a comma separated list of purposes or {@value #UNKNOWN_VALUE}\n   */\n  public static String getRequestPurpose(Integer reqPurpose) {\n      if (reqPurpose != null) {\n          StringBuilder builder = new StringBuilder();\n          for (Map.Entry<Integer, String>entry : purposes.entrySet()) {\n              if ((reqPurpose & entry.getKey()) != 0) {\n                  builder.append(entry.getValue() + \",\");\n              }\n          }\n          if (builder.length() == 0) {\n              return UNKNOWN_VALUE;\n          }\n          builder.setLength(builder.length() - 1);\n          return builder.toString();\n      }\n      return UNKNOWN_VALUE;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5296efc4b319f5647b606629c093a94b23692c6","date":1456267155,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#getRequestPurpose(Integer).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#getRequestPurpose(Integer).mjava","sourceNew":"   /**\n   * Given the integer purpose of a request generates a readable value corresponding\n   * the request purposes (there can be more than one on a single request). If\n   * there is a purpose parameter present that's not known this method will\n   * return {@value #UNKNOWN_VALUE}\n   * @param reqPurpose Numeric request purpose\n   * @return a comma separated list of purposes or {@value #UNKNOWN_VALUE}\n   */\n  public static String getRequestPurpose(Integer reqPurpose) {\n      if (reqPurpose != null) {\n          StringBuilder builder = new StringBuilder();\n          for (Map.Entry<Integer, String>entry : purposes.entrySet()) {\n              if ((reqPurpose & entry.getKey()) != 0) {\n                  builder.append(entry.getValue() + \",\");\n              }\n          }\n          if (builder.length() == 0) {\n              return UNKNOWN_VALUE;\n          }\n          builder.setLength(builder.length() - 1);\n          return builder.toString();\n      }\n      return UNKNOWN_VALUE;\n  }\n\n","sourceOld":"   /**\n   * Given the integer purpose of a request generates a readable value corresponding \n   * the request purposes (there can be more than one on a single request). If \n   * there is a purpose parameter present that's not known this method will \n   * return {@value #UNKNOWN_VALUE}\n   * @param reqPurpose Numeric request purpose\n   * @return a comma separated list of purposes or {@value #UNKNOWN_VALUE}\n   */\n  public static String getRequestPurpose(Integer reqPurpose) {\n      if (reqPurpose != null) {\n          StringBuilder builder = new StringBuilder();\n          for (Map.Entry<Integer, String>entry : purposes.entrySet()) {\n              if ((reqPurpose & entry.getKey()) != 0) {\n                  builder.append(entry.getValue() + \",\");\n              }\n          }\n          if (builder.length() == 0) {\n              return UNKNOWN_VALUE;\n          }\n          builder.setLength(builder.length() - 1);\n          return builder.toString();\n      }\n      return UNKNOWN_VALUE;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2ffe681f212e5073c69955b4ad22946794c84940","date":1560182863,"type":3,"author":"Koen De Groote","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#getRequestPurpose(Integer).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#getRequestPurpose(Integer).mjava","sourceNew":"   /**\n   * Given the integer purpose of a request generates a readable value corresponding\n   * the request purposes (there can be more than one on a single request). If\n   * there is a purpose parameter present that's not known this method will\n   * return {@value #UNKNOWN_VALUE}\n   * @param reqPurpose Numeric request purpose\n   * @return a comma separated list of purposes or {@value #UNKNOWN_VALUE}\n   */\n  public static String getRequestPurpose(Integer reqPurpose) {\n      if (reqPurpose != null) {\n          StringBuilder builder = new StringBuilder();\n          for (Map.Entry<Integer, String>entry : purposes.entrySet()) {\n              if ((reqPurpose & entry.getKey()) != 0) {\n                  builder.append(entry.getValue()).append(',');\n              }\n          }\n          if (builder.length() == 0) {\n              return UNKNOWN_VALUE;\n          }\n          builder.setLength(builder.length() - 1);\n          return builder.toString();\n      }\n      return UNKNOWN_VALUE;\n  }\n\n","sourceOld":"   /**\n   * Given the integer purpose of a request generates a readable value corresponding\n   * the request purposes (there can be more than one on a single request). If\n   * there is a purpose parameter present that's not known this method will\n   * return {@value #UNKNOWN_VALUE}\n   * @param reqPurpose Numeric request purpose\n   * @return a comma separated list of purposes or {@value #UNKNOWN_VALUE}\n   */\n  public static String getRequestPurpose(Integer reqPurpose) {\n      if (reqPurpose != null) {\n          StringBuilder builder = new StringBuilder();\n          for (Map.Entry<Integer, String>entry : purposes.entrySet()) {\n              if ((reqPurpose & entry.getKey()) != 0) {\n                  builder.append(entry.getValue() + \",\");\n              }\n          }\n          if (builder.length() == 0) {\n              return UNKNOWN_VALUE;\n          }\n          builder.setLength(builder.length() - 1);\n          return builder.toString();\n      }\n      return UNKNOWN_VALUE;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d9d424bd039937b4125152b454b3a32754b06f6c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2ffe681f212e5073c69955b4ad22946794c84940":["b5991832ae4bac45cecfff0fc33125aeac823d3d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a5296efc4b319f5647b606629c093a94b23692c6":["d9d424bd039937b4125152b454b3a32754b06f6c","b5991832ae4bac45cecfff0fc33125aeac823d3d"],"b5991832ae4bac45cecfff0fc33125aeac823d3d":["d9d424bd039937b4125152b454b3a32754b06f6c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2ffe681f212e5073c69955b4ad22946794c84940"]},"commit2Childs":{"d9d424bd039937b4125152b454b3a32754b06f6c":["a5296efc4b319f5647b606629c093a94b23692c6","b5991832ae4bac45cecfff0fc33125aeac823d3d"],"2ffe681f212e5073c69955b4ad22946794c84940":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d9d424bd039937b4125152b454b3a32754b06f6c"],"a5296efc4b319f5647b606629c093a94b23692c6":[],"b5991832ae4bac45cecfff0fc33125aeac823d3d":["2ffe681f212e5073c69955b4ad22946794c84940","a5296efc4b319f5647b606629c093a94b23692c6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a5296efc4b319f5647b606629c093a94b23692c6","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}