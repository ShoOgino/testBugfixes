{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoAddReplicasIntegrationTest#waitForNodeLive(JettySolrRunner).mjava","commits":[{"id":"8a7f628d78d532de820bc8af06bb870f1cb5eafb","date":1570036413,"type":0,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoAddReplicasIntegrationTest#waitForNodeLive(JettySolrRunner).mjava","pathOld":"/dev/null","sourceNew":"  /** \n   * {@link MiniSolrCloudCluster#waitForNode} Doesn't check isRunning first, and we don't want to \n   * use {@link MiniSolrCloudCluster#waitForAllNodes} because we don't want to waste cycles checking \n   * nodes we aren't messing with  \n   */\n  private void waitForNodeLive(final JettySolrRunner jetty)\n    throws InterruptedException, TimeoutException, IOException {\n    log.info(\"waitForNodeLive: {}/{}\", jetty.getNodeName(), jetty.getLocalPort());\n    \n    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n    while(!timeout.hasTimedOut()) {\n      if (jetty.isRunning()) {\n        break;\n      }\n      try {\n        Thread.sleep(100);\n      } catch (InterruptedException e) {\n        // ignore\n      }\n    }\n    if (timeout.hasTimedOut()) {\n      throw new TimeoutException(\"Waiting for Jetty to stop timed out\");\n    }\n    cluster.waitForNode(jetty, 30);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":0,"author":"jimczi","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoAddReplicasIntegrationTest#waitForNodeLive(JettySolrRunner).mjava","pathOld":"/dev/null","sourceNew":"  /** \n   * {@link MiniSolrCloudCluster#waitForNode} Doesn't check isRunning first, and we don't want to \n   * use {@link MiniSolrCloudCluster#waitForAllNodes} because we don't want to waste cycles checking \n   * nodes we aren't messing with  \n   */\n  private void waitForNodeLive(final JettySolrRunner jetty)\n    throws InterruptedException, TimeoutException, IOException {\n    log.info(\"waitForNodeLive: {}/{}\", jetty.getNodeName(), jetty.getLocalPort());\n    \n    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n    while(!timeout.hasTimedOut()) {\n      if (jetty.isRunning()) {\n        break;\n      }\n      try {\n        Thread.sleep(100);\n      } catch (InterruptedException e) {\n        // ignore\n      }\n    }\n    if (timeout.hasTimedOut()) {\n      throw new TimeoutException(\"Waiting for Jetty to stop timed out\");\n    }\n    cluster.waitForNode(jetty, 30);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4","date":1588172214,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoAddReplicasIntegrationTest#waitForNodeLive(JettySolrRunner).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoAddReplicasIntegrationTest#waitForNodeLive(JettySolrRunner).mjava","sourceNew":"  /** \n   * {@link MiniSolrCloudCluster#waitForNode} Doesn't check isRunning first, and we don't want to \n   * use {@link MiniSolrCloudCluster#waitForAllNodes} because we don't want to waste cycles checking \n   * nodes we aren't messing with  \n   */\n  private void waitForNodeLive(final JettySolrRunner jetty)\n    throws InterruptedException, TimeoutException, IOException {\n    if (log.isInfoEnabled()) {\n      log.info(\"waitForNodeLive: {}/{}\", jetty.getNodeName(), jetty.getLocalPort());\n    }\n    \n    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n    while(!timeout.hasTimedOut()) {\n      if (jetty.isRunning()) {\n        break;\n      }\n      try {\n        Thread.sleep(100);\n      } catch (InterruptedException e) {\n        // ignore\n      }\n    }\n    if (timeout.hasTimedOut()) {\n      throw new TimeoutException(\"Waiting for Jetty to stop timed out\");\n    }\n    cluster.waitForNode(jetty, 30);\n  }\n\n","sourceOld":"  /** \n   * {@link MiniSolrCloudCluster#waitForNode} Doesn't check isRunning first, and we don't want to \n   * use {@link MiniSolrCloudCluster#waitForAllNodes} because we don't want to waste cycles checking \n   * nodes we aren't messing with  \n   */\n  private void waitForNodeLive(final JettySolrRunner jetty)\n    throws InterruptedException, TimeoutException, IOException {\n    log.info(\"waitForNodeLive: {}/{}\", jetty.getNodeName(), jetty.getLocalPort());\n    \n    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n    while(!timeout.hasTimedOut()) {\n      if (jetty.isRunning()) {\n        break;\n      }\n      try {\n        Thread.sleep(100);\n      } catch (InterruptedException e) {\n        // ignore\n      }\n    }\n    if (timeout.hasTimedOut()) {\n      throw new TimeoutException(\"Waiting for Jetty to stop timed out\");\n    }\n    cluster.waitForNode(jetty, 30);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoAddReplicasIntegrationTest#waitForNodeLive(JettySolrRunner).mjava","sourceNew":null,"sourceOld":"  /** \n   * {@link MiniSolrCloudCluster#waitForNode} Doesn't check isRunning first, and we don't want to \n   * use {@link MiniSolrCloudCluster#waitForAllNodes} because we don't want to waste cycles checking \n   * nodes we aren't messing with  \n   */\n  private void waitForNodeLive(final JettySolrRunner jetty)\n    throws InterruptedException, TimeoutException, IOException {\n    if (log.isInfoEnabled()) {\n      log.info(\"waitForNodeLive: {}/{}\", jetty.getNodeName(), jetty.getLocalPort());\n    }\n    \n    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n    while(!timeout.hasTimedOut()) {\n      if (jetty.isRunning()) {\n        break;\n      }\n      try {\n        Thread.sleep(100);\n      } catch (InterruptedException e) {\n        // ignore\n      }\n    }\n    if (timeout.hasTimedOut()) {\n      throw new TimeoutException(\"Waiting for Jetty to stop timed out\");\n    }\n    cluster.waitForNode(jetty, 30);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f504512a03d978990cbff30db0522b354e846db":["fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4"],"fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4":["8a7f628d78d532de820bc8af06bb870f1cb5eafb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8a7f628d78d532de820bc8af06bb870f1cb5eafb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"],"b0b597c65628ca9e73913a07e81691f8229bae35":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8a7f628d78d532de820bc8af06bb870f1cb5eafb"]},"commit2Childs":{"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4":["3f504512a03d978990cbff30db0522b354e846db"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8a7f628d78d532de820bc8af06bb870f1cb5eafb","b0b597c65628ca9e73913a07e81691f8229bae35"],"8a7f628d78d532de820bc8af06bb870f1cb5eafb":["fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4","b0b597c65628ca9e73913a07e81691f8229bae35"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}