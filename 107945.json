{"path":"lucene/sandbox/src/java/org/apache/lucene/search/TermAutomatonQuery#hashCode().mjava","commits":[{"id":"06a4493f0c732d2928d1a4f773f15d19434aa8ba","date":1405856163,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/search/TermAutomatonQuery#hashCode().mjava","pathOld":"/dev/null","sourceNew":"  /** Returns a hash code value for this object.  This is very costly! */\n  @Override\n  public int hashCode() {\n    if (det == null) {\n      throw new IllegalStateException(\"please call finish first\");\n    }\n    return Float.floatToIntBits(getBoost()) ^ termToID.hashCode() + det.toDot().hashCode();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fdd0e99daabe8cd52cd4d7755679337bede8abe0","date":1425571318,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/search/TermAutomatonQuery#hashCode().mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/search/TermAutomatonQuery#hashCode().mjava","sourceNew":"  /** Returns a hash code value for this object.  This is very costly! */\n  @Override\n  public int hashCode() {\n    if (det == null) {\n      throw new IllegalStateException(\"please call finish first\");\n    }\n    return super.hashCode() ^ termToID.hashCode() + det.toDot().hashCode();\n  }\n\n","sourceOld":"  /** Returns a hash code value for this object.  This is very costly! */\n  @Override\n  public int hashCode() {\n    if (det == null) {\n      throw new IllegalStateException(\"please call finish first\");\n    }\n    return Float.floatToIntBits(getBoost()) ^ termToID.hashCode() + det.toDot().hashCode();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/search/TermAutomatonQuery#hashCode().mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/search/TermAutomatonQuery#hashCode().mjava","sourceNew":"  /** Returns a hash code value for this object.  This is very costly! */\n  @Override\n  public int hashCode() {\n    if (det == null) {\n      throw new IllegalStateException(\"please call finish first\");\n    }\n    return super.hashCode() ^ termToID.hashCode() + det.toDot().hashCode();\n  }\n\n","sourceOld":"  /** Returns a hash code value for this object.  This is very costly! */\n  @Override\n  public int hashCode() {\n    if (det == null) {\n      throw new IllegalStateException(\"please call finish first\");\n    }\n    return Float.floatToIntBits(getBoost()) ^ termToID.hashCode() + det.toDot().hashCode();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e7bc21595222ae4f75509300fbb7726691f387f","date":1464078795,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/search/TermAutomatonQuery#hashCode().mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/search/TermAutomatonQuery#hashCode().mjava","sourceNew":"  @Override\n  public int hashCode() {\n    checkFinished(this);\n    // TODO: LUCENE-7295: Automaton.toDot() is very costly!\n    return classHash() ^ termToID.hashCode() + det.toDot().hashCode();\n  }\n\n","sourceOld":"  /** Returns a hash code value for this object.  This is very costly! */\n  @Override\n  public int hashCode() {\n    if (det == null) {\n      throw new IllegalStateException(\"please call finish first\");\n    }\n    return super.hashCode() ^ termToID.hashCode() + det.toDot().hashCode();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f5f75e6b69ef96475154139e5b8a9c3f330ab14d","date":1464117905,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/search/TermAutomatonQuery#hashCode().mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/search/TermAutomatonQuery#hashCode().mjava","sourceNew":"  @Override\n  public int hashCode() {\n    checkFinished(this);\n    // LUCENE-7295: this used to be very awkward toDot() call; it is safer to assume\n    // that no two instances are equivalent instead (until somebody finds a better way to check\n    // on automaton equivalence quickly).\n    return System.identityHashCode(this);\n  }\n\n","sourceOld":"  @Override\n  public int hashCode() {\n    checkFinished(this);\n    // TODO: LUCENE-7295: Automaton.toDot() is very costly!\n    return classHash() ^ termToID.hashCode() + det.toDot().hashCode();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e121d43b5a10f2df530f406f935102656e9c4e8","date":1464198131,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/search/TermAutomatonQuery#hashCode().mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/search/TermAutomatonQuery#hashCode().mjava","sourceNew":"  @Override\n  public int hashCode() {\n    checkFinished(this);\n    // LUCENE-7295: this used to be very awkward toDot() call; it is safer to assume\n    // that no two instances are equivalent instead (until somebody finds a better way to check\n    // on automaton equivalence quickly).\n    return System.identityHashCode(this);\n  }\n\n","sourceOld":"  @Override\n  public int hashCode() {\n    checkFinished(this);\n    // TODO: LUCENE-7295: Automaton.toDot() is very costly!\n    return classHash() ^ termToID.hashCode() + det.toDot().hashCode();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83870855d82aba6819217abeff5a40779dbb28b4","date":1464291012,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/search/TermAutomatonQuery#hashCode().mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/search/TermAutomatonQuery#hashCode().mjava","sourceNew":"  @Override\n  public int hashCode() {\n    checkFinished(this);\n    // LUCENE-7295: this used to be very awkward toDot() call; it is safer to assume\n    // that no two instances are equivalent instead (until somebody finds a better way to check\n    // on automaton equivalence quickly).\n    return System.identityHashCode(this);\n  }\n\n","sourceOld":"  @Override\n  public int hashCode() {\n    checkFinished(this);\n    // TODO: LUCENE-7295: Automaton.toDot() is very costly!\n    return classHash() ^ termToID.hashCode() + det.toDot().hashCode();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/search/TermAutomatonQuery#hashCode().mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/search/TermAutomatonQuery#hashCode().mjava","sourceNew":"  @Override\n  public int hashCode() {\n    checkFinished(this);\n    // LUCENE-7295: this used to be very awkward toDot() call; it is safer to assume\n    // that no two instances are equivalent instead (until somebody finds a better way to check\n    // on automaton equivalence quickly).\n    return System.identityHashCode(this);\n  }\n\n","sourceOld":"  /** Returns a hash code value for this object.  This is very costly! */\n  @Override\n  public int hashCode() {\n    if (det == null) {\n      throw new IllegalStateException(\"please call finish first\");\n    }\n    return super.hashCode() ^ termToID.hashCode() + det.toDot().hashCode();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fdd0e99daabe8cd52cd4d7755679337bede8abe0":["06a4493f0c732d2928d1a4f773f15d19434aa8ba"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["06a4493f0c732d2928d1a4f773f15d19434aa8ba","fdd0e99daabe8cd52cd4d7755679337bede8abe0"],"0e121d43b5a10f2df530f406f935102656e9c4e8":["0e7bc21595222ae4f75509300fbb7726691f387f","f5f75e6b69ef96475154139e5b8a9c3f330ab14d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0e7bc21595222ae4f75509300fbb7726691f387f":["fdd0e99daabe8cd52cd4d7755679337bede8abe0"],"06a4493f0c732d2928d1a4f773f15d19434aa8ba":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"83870855d82aba6819217abeff5a40779dbb28b4":["0e7bc21595222ae4f75509300fbb7726691f387f","0e121d43b5a10f2df530f406f935102656e9c4e8"],"f5f75e6b69ef96475154139e5b8a9c3f330ab14d":["0e7bc21595222ae4f75509300fbb7726691f387f"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["fdd0e99daabe8cd52cd4d7755679337bede8abe0","0e121d43b5a10f2df530f406f935102656e9c4e8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0e121d43b5a10f2df530f406f935102656e9c4e8"]},"commit2Childs":{"fdd0e99daabe8cd52cd4d7755679337bede8abe0":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","0e7bc21595222ae4f75509300fbb7726691f387f","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"0e121d43b5a10f2df530f406f935102656e9c4e8":["83870855d82aba6819217abeff5a40779dbb28b4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["06a4493f0c732d2928d1a4f773f15d19434aa8ba"],"0e7bc21595222ae4f75509300fbb7726691f387f":["0e121d43b5a10f2df530f406f935102656e9c4e8","83870855d82aba6819217abeff5a40779dbb28b4","f5f75e6b69ef96475154139e5b8a9c3f330ab14d"],"06a4493f0c732d2928d1a4f773f15d19434aa8ba":["fdd0e99daabe8cd52cd4d7755679337bede8abe0","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"83870855d82aba6819217abeff5a40779dbb28b4":[],"f5f75e6b69ef96475154139e5b8a9c3f330ab14d":["0e121d43b5a10f2df530f406f935102656e9c4e8"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","83870855d82aba6819217abeff5a40779dbb28b4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}