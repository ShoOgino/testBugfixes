{"path":"lucene/core/src/test/org/apache/lucene/index/TestDocTermOrds#testBackToTheFuture().mjava","commits":[{"id":"60daad1187870cb8dea2344dcd50c29136546f18","date":1361389468,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocTermOrds#testBackToTheFuture().mjava","pathOld":"/dev/null","sourceNew":"  public void testBackToTheFuture() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, null));\n    \n    Document doc = new Document();\n    doc.add(newStringField(\"foo\", \"bar\", Field.Store.NO));\n    iw.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(newStringField(\"foo\", \"baz\", Field.Store.NO));\n    iw.addDocument(doc);\n    \n    DirectoryReader r1 = DirectoryReader.open(iw, true);\n    \n    iw.deleteDocuments(new Term(\"foo\", \"baz\"));\n    DirectoryReader r2 = DirectoryReader.open(iw, true);\n    \n    FieldCache.DEFAULT.getDocTermOrds(getOnlySegmentReader(r2), \"foo\");\n    \n    SortedSetDocValues v = FieldCache.DEFAULT.getDocTermOrds(getOnlySegmentReader(r1), \"foo\");\n    assertEquals(2, v.getValueCount());\n    v.setDocument(1);\n    assertEquals(1, v.nextOrd());\n    \n    iw.close();\n    r1.close();\n    r2.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocTermOrds#testBackToTheFuture().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocTermOrds#testBackToTheFuture().mjava","sourceNew":"  public void testBackToTheFuture() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, null));\n    \n    Document doc = new Document();\n    doc.add(newStringField(\"foo\", \"bar\", Field.Store.NO));\n    iw.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(newStringField(\"foo\", \"baz\", Field.Store.NO));\n    iw.addDocument(doc);\n    \n    DirectoryReader r1 = DirectoryReader.open(iw, true);\n    \n    iw.deleteDocuments(new Term(\"foo\", \"baz\"));\n    DirectoryReader r2 = DirectoryReader.open(iw, true);\n    \n    FieldCache.DEFAULT.getDocTermOrds(getOnlySegmentReader(r2), \"foo\");\n    \n    SortedSetDocValues v = FieldCache.DEFAULT.getDocTermOrds(getOnlySegmentReader(r1), \"foo\");\n    assertEquals(2, v.getValueCount());\n    v.setDocument(1);\n    assertEquals(1, v.nextOrd());\n    \n    iw.shutdown();\n    r1.close();\n    r2.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBackToTheFuture() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, null));\n    \n    Document doc = new Document();\n    doc.add(newStringField(\"foo\", \"bar\", Field.Store.NO));\n    iw.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(newStringField(\"foo\", \"baz\", Field.Store.NO));\n    iw.addDocument(doc);\n    \n    DirectoryReader r1 = DirectoryReader.open(iw, true);\n    \n    iw.deleteDocuments(new Term(\"foo\", \"baz\"));\n    DirectoryReader r2 = DirectoryReader.open(iw, true);\n    \n    FieldCache.DEFAULT.getDocTermOrds(getOnlySegmentReader(r2), \"foo\");\n    \n    SortedSetDocValues v = FieldCache.DEFAULT.getDocTermOrds(getOnlySegmentReader(r1), \"foo\");\n    assertEquals(2, v.getValueCount());\n    v.setDocument(1);\n    assertEquals(1, v.nextOrd());\n    \n    iw.close();\n    r1.close();\n    r2.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c","date":1399816179,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestDocTermOrds#testBackToTheFuture().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocTermOrds#testBackToTheFuture().mjava","sourceNew":"  public void testBackToTheFuture() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, null));\n    \n    Document doc = new Document();\n    doc.add(newStringField(\"foo\", \"bar\", Field.Store.NO));\n    iw.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(newStringField(\"foo\", \"baz\", Field.Store.NO));\n    iw.addDocument(doc);\n    \n    DirectoryReader r1 = DirectoryReader.open(iw, true);\n    \n    iw.deleteDocuments(new Term(\"foo\", \"baz\"));\n    DirectoryReader r2 = DirectoryReader.open(iw, true);\n    \n    FieldCache.DEFAULT.getDocTermOrds(getOnlySegmentReader(r2), \"foo\");\n    \n    SortedSetDocValues v = FieldCache.DEFAULT.getDocTermOrds(getOnlySegmentReader(r1), \"foo\");\n    assertEquals(2, v.getValueCount());\n    v.setDocument(1);\n    assertEquals(1, v.nextOrd());\n    \n    iw.shutdown();\n    r1.close();\n    r2.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBackToTheFuture() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, null));\n    \n    Document doc = new Document();\n    doc.add(newStringField(\"foo\", \"bar\", Field.Store.NO));\n    iw.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(newStringField(\"foo\", \"baz\", Field.Store.NO));\n    iw.addDocument(doc);\n    \n    DirectoryReader r1 = DirectoryReader.open(iw, true);\n    \n    iw.deleteDocuments(new Term(\"foo\", \"baz\"));\n    DirectoryReader r2 = DirectoryReader.open(iw, true);\n    \n    FieldCache.DEFAULT.getDocTermOrds(getOnlySegmentReader(r2), \"foo\");\n    \n    SortedSetDocValues v = FieldCache.DEFAULT.getDocTermOrds(getOnlySegmentReader(r1), \"foo\");\n    assertEquals(2, v.getValueCount());\n    v.setDocument(1);\n    assertEquals(1, v.nextOrd());\n    \n    iw.shutdown();\n    r1.close();\n    r2.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93dd449115a9247533e44bab47e8429e5dccbc6d","date":1400258396,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestDocTermOrds#testBackToTheFuture().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocTermOrds#testBackToTheFuture().mjava","sourceNew":"  public void testBackToTheFuture() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, null));\n    \n    Document doc = new Document();\n    doc.add(newStringField(\"foo\", \"bar\", Field.Store.NO));\n    iw.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(newStringField(\"foo\", \"baz\", Field.Store.NO));\n    // we need a second value for a doc, or we don't actually test DocTermOrds!\n    doc.add(newStringField(\"foo\", \"car\", Field.Store.NO));\n    iw.addDocument(doc);\n    \n    DirectoryReader r1 = DirectoryReader.open(iw, true);\n    \n    iw.deleteDocuments(new Term(\"foo\", \"baz\"));\n    DirectoryReader r2 = DirectoryReader.open(iw, true);\n    \n    FieldCache.DEFAULT.getDocTermOrds(getOnlySegmentReader(r2), \"foo\", null);\n    \n    SortedSetDocValues v = FieldCache.DEFAULT.getDocTermOrds(getOnlySegmentReader(r1), \"foo\", null);\n    assertEquals(3, v.getValueCount());\n    v.setDocument(1);\n    assertEquals(1, v.nextOrd());\n    \n    iw.shutdown();\n    r1.close();\n    r2.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBackToTheFuture() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, null));\n    \n    Document doc = new Document();\n    doc.add(newStringField(\"foo\", \"bar\", Field.Store.NO));\n    iw.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(newStringField(\"foo\", \"baz\", Field.Store.NO));\n    iw.addDocument(doc);\n    \n    DirectoryReader r1 = DirectoryReader.open(iw, true);\n    \n    iw.deleteDocuments(new Term(\"foo\", \"baz\"));\n    DirectoryReader r2 = DirectoryReader.open(iw, true);\n    \n    FieldCache.DEFAULT.getDocTermOrds(getOnlySegmentReader(r2), \"foo\");\n    \n    SortedSetDocValues v = FieldCache.DEFAULT.getDocTermOrds(getOnlySegmentReader(r1), \"foo\");\n    assertEquals(2, v.getValueCount());\n    v.setDocument(1);\n    assertEquals(1, v.nextOrd());\n    \n    iw.shutdown();\n    r1.close();\n    r2.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"56572ec06f1407c066d6b7399413178b33176cd8","date":1400495675,"type":5,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestDocTermOrds#testBackToTheFuture().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocTermOrds#testBackToTheFuture().mjava","sourceNew":"  public void testBackToTheFuture() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, null));\n    \n    Document doc = new Document();\n    doc.add(newStringField(\"foo\", \"bar\", Field.Store.NO));\n    iw.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(newStringField(\"foo\", \"baz\", Field.Store.NO));\n    // we need a second value for a doc, or we don't actually test DocTermOrds!\n    doc.add(newStringField(\"foo\", \"car\", Field.Store.NO));\n    iw.addDocument(doc);\n    \n    DirectoryReader r1 = DirectoryReader.open(iw, true);\n    \n    iw.deleteDocuments(new Term(\"foo\", \"baz\"));\n    DirectoryReader r2 = DirectoryReader.open(iw, true);\n    \n    FieldCache.DEFAULT.getDocTermOrds(getOnlySegmentReader(r2), \"foo\", null);\n    \n    SortedSetDocValues v = FieldCache.DEFAULT.getDocTermOrds(getOnlySegmentReader(r1), \"foo\", null);\n    assertEquals(3, v.getValueCount());\n    v.setDocument(1);\n    assertEquals(1, v.nextOrd());\n    \n    iw.shutdown();\n    r1.close();\n    r2.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBackToTheFuture() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, null));\n    \n    Document doc = new Document();\n    doc.add(newStringField(\"foo\", \"bar\", Field.Store.NO));\n    iw.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(newStringField(\"foo\", \"baz\", Field.Store.NO));\n    iw.addDocument(doc);\n    \n    DirectoryReader r1 = DirectoryReader.open(iw, true);\n    \n    iw.deleteDocuments(new Term(\"foo\", \"baz\"));\n    DirectoryReader r2 = DirectoryReader.open(iw, true);\n    \n    FieldCache.DEFAULT.getDocTermOrds(getOnlySegmentReader(r2), \"foo\");\n    \n    SortedSetDocValues v = FieldCache.DEFAULT.getDocTermOrds(getOnlySegmentReader(r1), \"foo\");\n    assertEquals(2, v.getValueCount());\n    v.setDocument(1);\n    assertEquals(1, v.nextOrd());\n    \n    iw.shutdown();\n    r1.close();\n    r2.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"93dd449115a9247533e44bab47e8429e5dccbc6d":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a","b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c"],"60daad1187870cb8dea2344dcd50c29136546f18":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["60daad1187870cb8dea2344dcd50c29136546f18"],"56572ec06f1407c066d6b7399413178b33176cd8":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a","93dd449115a9247533e44bab47e8429e5dccbc6d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["93dd449115a9247533e44bab47e8429e5dccbc6d"]},"commit2Childs":{"93dd449115a9247533e44bab47e8429e5dccbc6d":["56572ec06f1407c066d6b7399413178b33176cd8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"60daad1187870cb8dea2344dcd50c29136546f18":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["60daad1187870cb8dea2344dcd50c29136546f18"],"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["93dd449115a9247533e44bab47e8429e5dccbc6d","b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c","56572ec06f1407c066d6b7399413178b33176cd8"],"56572ec06f1407c066d6b7399413178b33176cd8":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["56572ec06f1407c066d6b7399413178b33176cd8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}