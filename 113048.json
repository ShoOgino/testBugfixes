{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/uniformsplit/FieldMetadata.Serializer#read(DataInput,FieldInfos,int).mjava","commits":[{"id":"d28da8a459f5f0c930da7185c56d0c25edd3fbd1","date":1577783695,"type":0,"author":"Bruno Roustant","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/uniformsplit/FieldMetadata.Serializer#read(DataInput,FieldInfos,int).mjava","pathOld":"/dev/null","sourceNew":"    public FieldMetadata read(DataInput input, FieldInfos fieldInfos, int maxNumDocs) throws IOException {\n      int fieldId = input.readVInt();\n      FieldInfo fieldInfo = fieldInfos.fieldInfo(fieldId);\n      if (fieldInfo == null) {\n        throw new CorruptIndexException(\"Illegal field id= \" + fieldId, input);\n      }\n      FieldMetadata fieldMetadata = new FieldMetadata(fieldInfo, 0, false);\n\n      fieldMetadata.numTerms = input.readVInt();\n      if (fieldMetadata.numTerms <= 0) {\n        throw new CorruptIndexException(\"Illegal number of terms= \" + fieldMetadata.numTerms + \" for field= \" + fieldId, input);\n      }\n\n      fieldMetadata.sumDocFreq = input.readVInt();\n      fieldMetadata.sumTotalTermFreq = fieldMetadata.sumDocFreq;\n      if (fieldMetadata.fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS) >= 0) {\n        fieldMetadata.sumTotalTermFreq += input.readVInt();\n        if (fieldMetadata.sumTotalTermFreq < fieldMetadata.sumDocFreq) {\n          // #positions must be >= #postings.\n          throw new CorruptIndexException(\"Illegal sumTotalTermFreq= \" + fieldMetadata.sumTotalTermFreq\n              + \" sumDocFreq= \" + fieldMetadata.sumDocFreq + \" for field= \" + fieldId, input);\n        }\n      }\n\n      fieldMetadata.docCount = input.readVInt();\n      if (fieldMetadata.docCount < 0 || fieldMetadata.docCount > maxNumDocs) {\n        // #docs with field must be <= #docs.\n        throw new CorruptIndexException(\"Illegal number of docs= \" + fieldMetadata.docCount\n            + \" maxNumDocs= \" + maxNumDocs + \" for field=\" + fieldId, input);\n      }\n      if (fieldMetadata.sumDocFreq < fieldMetadata.docCount) {\n        // #postings must be >= #docs with field.\n        throw new CorruptIndexException(\"Illegal sumDocFreq= \" + fieldMetadata.sumDocFreq\n            + \" docCount= \" + fieldMetadata.docCount + \" for field= \" + fieldId, input);\n      }\n\n      fieldMetadata.dictionaryStartFP = input.readVLong();\n      fieldMetadata.firstBlockStartFP = input.readVLong();\n      fieldMetadata.lastBlockStartFP = input.readVLong();\n\n      int lastTermLength = input.readVInt();\n      BytesRef lastTerm = new BytesRef(lastTermLength);\n      if (lastTermLength > 0) {\n        input.readBytes(lastTerm.bytes, 0, lastTermLength);\n        lastTerm.length = lastTermLength;\n      } else if (lastTermLength < 0) {\n        throw new CorruptIndexException(\"Illegal last term length= \" + lastTermLength + \" for field= \" + fieldId, input);\n      }\n      fieldMetadata.setLastTerm(lastTerm);\n\n      return fieldMetadata;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["d76926779561e53915c3a2b25a6e15831db638aa"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c606b777c4250f3f3f6f66d659c7c4c403679b71","date":1577958559,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/uniformsplit/FieldMetadata.Serializer#read(DataInput,FieldInfos,int).mjava","pathOld":"/dev/null","sourceNew":"    public FieldMetadata read(DataInput input, FieldInfos fieldInfos, int maxNumDocs) throws IOException {\n      int fieldId = input.readVInt();\n      FieldInfo fieldInfo = fieldInfos.fieldInfo(fieldId);\n      if (fieldInfo == null) {\n        throw new CorruptIndexException(\"Illegal field id= \" + fieldId, input);\n      }\n      FieldMetadata fieldMetadata = new FieldMetadata(fieldInfo, 0, false);\n\n      fieldMetadata.numTerms = input.readVInt();\n      if (fieldMetadata.numTerms <= 0) {\n        throw new CorruptIndexException(\"Illegal number of terms= \" + fieldMetadata.numTerms + \" for field= \" + fieldId, input);\n      }\n\n      fieldMetadata.sumDocFreq = input.readVInt();\n      fieldMetadata.sumTotalTermFreq = fieldMetadata.sumDocFreq;\n      if (fieldMetadata.fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS) >= 0) {\n        fieldMetadata.sumTotalTermFreq += input.readVInt();\n        if (fieldMetadata.sumTotalTermFreq < fieldMetadata.sumDocFreq) {\n          // #positions must be >= #postings.\n          throw new CorruptIndexException(\"Illegal sumTotalTermFreq= \" + fieldMetadata.sumTotalTermFreq\n              + \" sumDocFreq= \" + fieldMetadata.sumDocFreq + \" for field= \" + fieldId, input);\n        }\n      }\n\n      fieldMetadata.docCount = input.readVInt();\n      if (fieldMetadata.docCount < 0 || fieldMetadata.docCount > maxNumDocs) {\n        // #docs with field must be <= #docs.\n        throw new CorruptIndexException(\"Illegal number of docs= \" + fieldMetadata.docCount\n            + \" maxNumDocs= \" + maxNumDocs + \" for field=\" + fieldId, input);\n      }\n      if (fieldMetadata.sumDocFreq < fieldMetadata.docCount) {\n        // #postings must be >= #docs with field.\n        throw new CorruptIndexException(\"Illegal sumDocFreq= \" + fieldMetadata.sumDocFreq\n            + \" docCount= \" + fieldMetadata.docCount + \" for field= \" + fieldId, input);\n      }\n\n      fieldMetadata.dictionaryStartFP = input.readVLong();\n      fieldMetadata.firstBlockStartFP = input.readVLong();\n      fieldMetadata.lastBlockStartFP = input.readVLong();\n\n      int lastTermLength = input.readVInt();\n      BytesRef lastTerm = new BytesRef(lastTermLength);\n      if (lastTermLength > 0) {\n        input.readBytes(lastTerm.bytes, 0, lastTermLength);\n        lastTerm.length = lastTermLength;\n      } else if (lastTermLength < 0) {\n        throw new CorruptIndexException(\"Illegal last term length= \" + lastTermLength + \" for field= \" + fieldId, input);\n      }\n      fieldMetadata.setLastTerm(lastTerm);\n\n      return fieldMetadata;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d76926779561e53915c3a2b25a6e15831db638aa","date":1579602266,"type":3,"author":"Bruno Roustant","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/uniformsplit/FieldMetadata.Serializer#read(DataInput,FieldInfos,int).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/uniformsplit/FieldMetadata.Serializer#read(DataInput,FieldInfos,int).mjava","sourceNew":"    public FieldMetadata read(DataInput input, FieldInfos fieldInfos, int maxNumDocs) throws IOException {\n      int fieldId = input.readVInt();\n      FieldInfo fieldInfo = fieldInfos.fieldInfo(fieldId);\n      if (fieldInfo == null) {\n        throw new CorruptIndexException(\"Illegal field id= \" + fieldId, input);\n      }\n      FieldMetadata fieldMetadata = new FieldMetadata(fieldInfo, 0, false);\n\n      fieldMetadata.numTerms = input.readVLong();\n      if (fieldMetadata.numTerms <= 0) {\n        throw new CorruptIndexException(\"Illegal number of terms= \" + fieldMetadata.numTerms + \" for field= \" + fieldId, input);\n      }\n\n      fieldMetadata.sumDocFreq = input.readVLong();\n      fieldMetadata.sumTotalTermFreq = fieldMetadata.sumDocFreq;\n      if (fieldMetadata.fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS) >= 0) {\n        fieldMetadata.sumTotalTermFreq += input.readVLong();\n        if (fieldMetadata.sumTotalTermFreq < fieldMetadata.sumDocFreq) {\n          // #positions must be >= #postings.\n          throw new CorruptIndexException(\"Illegal sumTotalTermFreq= \" + fieldMetadata.sumTotalTermFreq\n              + \" sumDocFreq= \" + fieldMetadata.sumDocFreq + \" for field= \" + fieldId, input);\n        }\n      }\n\n      fieldMetadata.docCount = input.readVInt();\n      if (fieldMetadata.docCount < 0 || fieldMetadata.docCount > maxNumDocs) {\n        // #docs with field must be <= #docs.\n        throw new CorruptIndexException(\"Illegal number of docs= \" + fieldMetadata.docCount\n            + \" maxNumDocs= \" + maxNumDocs + \" for field=\" + fieldId, input);\n      }\n      if (fieldMetadata.sumDocFreq < fieldMetadata.docCount) {\n        // #postings must be >= #docs with field.\n        throw new CorruptIndexException(\"Illegal sumDocFreq= \" + fieldMetadata.sumDocFreq\n            + \" docCount= \" + fieldMetadata.docCount + \" for field= \" + fieldId, input);\n      }\n\n      fieldMetadata.dictionaryStartFP = input.readVLong();\n      fieldMetadata.firstBlockStartFP = input.readVLong();\n      fieldMetadata.lastBlockStartFP = input.readVLong();\n\n      int lastTermLength = input.readVInt();\n      BytesRef lastTerm = new BytesRef(lastTermLength);\n      if (lastTermLength > 0) {\n        input.readBytes(lastTerm.bytes, 0, lastTermLength);\n        lastTerm.length = lastTermLength;\n      } else if (lastTermLength < 0) {\n        throw new CorruptIndexException(\"Illegal last term length= \" + lastTermLength + \" for field= \" + fieldId, input);\n      }\n      fieldMetadata.setLastTerm(lastTerm);\n\n      return fieldMetadata;\n    }\n\n","sourceOld":"    public FieldMetadata read(DataInput input, FieldInfos fieldInfos, int maxNumDocs) throws IOException {\n      int fieldId = input.readVInt();\n      FieldInfo fieldInfo = fieldInfos.fieldInfo(fieldId);\n      if (fieldInfo == null) {\n        throw new CorruptIndexException(\"Illegal field id= \" + fieldId, input);\n      }\n      FieldMetadata fieldMetadata = new FieldMetadata(fieldInfo, 0, false);\n\n      fieldMetadata.numTerms = input.readVInt();\n      if (fieldMetadata.numTerms <= 0) {\n        throw new CorruptIndexException(\"Illegal number of terms= \" + fieldMetadata.numTerms + \" for field= \" + fieldId, input);\n      }\n\n      fieldMetadata.sumDocFreq = input.readVInt();\n      fieldMetadata.sumTotalTermFreq = fieldMetadata.sumDocFreq;\n      if (fieldMetadata.fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS) >= 0) {\n        fieldMetadata.sumTotalTermFreq += input.readVInt();\n        if (fieldMetadata.sumTotalTermFreq < fieldMetadata.sumDocFreq) {\n          // #positions must be >= #postings.\n          throw new CorruptIndexException(\"Illegal sumTotalTermFreq= \" + fieldMetadata.sumTotalTermFreq\n              + \" sumDocFreq= \" + fieldMetadata.sumDocFreq + \" for field= \" + fieldId, input);\n        }\n      }\n\n      fieldMetadata.docCount = input.readVInt();\n      if (fieldMetadata.docCount < 0 || fieldMetadata.docCount > maxNumDocs) {\n        // #docs with field must be <= #docs.\n        throw new CorruptIndexException(\"Illegal number of docs= \" + fieldMetadata.docCount\n            + \" maxNumDocs= \" + maxNumDocs + \" for field=\" + fieldId, input);\n      }\n      if (fieldMetadata.sumDocFreq < fieldMetadata.docCount) {\n        // #postings must be >= #docs with field.\n        throw new CorruptIndexException(\"Illegal sumDocFreq= \" + fieldMetadata.sumDocFreq\n            + \" docCount= \" + fieldMetadata.docCount + \" for field= \" + fieldId, input);\n      }\n\n      fieldMetadata.dictionaryStartFP = input.readVLong();\n      fieldMetadata.firstBlockStartFP = input.readVLong();\n      fieldMetadata.lastBlockStartFP = input.readVLong();\n\n      int lastTermLength = input.readVInt();\n      BytesRef lastTerm = new BytesRef(lastTermLength);\n      if (lastTermLength > 0) {\n        input.readBytes(lastTerm.bytes, 0, lastTermLength);\n        lastTerm.length = lastTermLength;\n      } else if (lastTermLength < 0) {\n        throw new CorruptIndexException(\"Illegal last term length= \" + lastTermLength + \" for field= \" + fieldId, input);\n      }\n      fieldMetadata.setLastTerm(lastTerm);\n\n      return fieldMetadata;\n    }\n\n","bugFix":["d28da8a459f5f0c930da7185c56d0c25edd3fbd1"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c606b777c4250f3f3f6f66d659c7c4c403679b71":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d28da8a459f5f0c930da7185c56d0c25edd3fbd1"],"d76926779561e53915c3a2b25a6e15831db638aa":["d28da8a459f5f0c930da7185c56d0c25edd3fbd1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d28da8a459f5f0c930da7185c56d0c25edd3fbd1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d76926779561e53915c3a2b25a6e15831db638aa"]},"commit2Childs":{"c606b777c4250f3f3f6f66d659c7c4c403679b71":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c606b777c4250f3f3f6f66d659c7c4c403679b71","d28da8a459f5f0c930da7185c56d0c25edd3fbd1"],"d76926779561e53915c3a2b25a6e15831db638aa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d28da8a459f5f0c930da7185c56d0c25edd3fbd1":["c606b777c4250f3f3f6f66d659c7c4c403679b71","d76926779561e53915c3a2b25a6e15831db638aa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c606b777c4250f3f3f6f66d659c7c4c403679b71","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}