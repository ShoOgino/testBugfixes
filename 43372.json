{"path":"solr/core/src/java/org/apache/solr/cloud/BackupCmd#copyIndexFiles(URI,ZkNodeProps,NamedList).mjava","commits":[{"id":"b2ad92550399520cc0148c3ee5ca087706f12da4","date":1478270512,"type":0,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/BackupCmd#copyIndexFiles(URI,ZkNodeProps,NamedList).mjava","pathOld":"/dev/null","sourceNew":"  private void copyIndexFiles(URI backupPath, ZkNodeProps request, NamedList results) throws Exception {\n    String collectionName = request.getStr(COLLECTION_PROP);\n    String backupName = request.getStr(NAME);\n    String asyncId = request.getStr(ASYNC);\n    String repoName = request.getStr(CoreAdminParams.BACKUP_REPOSITORY);\n    ShardHandler shardHandler = ocmh.shardHandlerFactory.getShardHandler();\n    Map<String, String> requestMap = new HashMap<>();\n\n    String commitName = request.getStr(CoreAdminParams.COMMIT_NAME);\n    Optional<CollectionSnapshotMetaData> snapshotMeta = Optional.empty();\n    if (commitName != null) {\n      SolrZkClient zkClient = ocmh.overseer.getZkController().getZkClient();\n      snapshotMeta = SolrSnapshotManager.getCollectionLevelSnapshot(zkClient, collectionName, commitName);\n      if (!snapshotMeta.isPresent()) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Snapshot with name \" + commitName\n            + \" does not exist for collection \" + collectionName);\n      }\n      if (snapshotMeta.get().getStatus() != SnapshotStatus.Successful) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Snapshot with name \" + commitName + \" for collection \" + collectionName\n            + \" has not completed successfully. The status is \" + snapshotMeta.get().getStatus());\n      }\n    }\n\n    log.info(\"Starting backup of collection={} with backupName={} at location={}\", collectionName, backupName,\n        backupPath);\n\n    Collection<String> shardsToConsider = Collections.emptySet();\n    if (snapshotMeta.isPresent()) {\n      shardsToConsider = snapshotMeta.get().getShards();\n    }\n\n    for (Slice slice : ocmh.zkStateReader.getClusterState().getCollection(collectionName).getActiveSlices()) {\n      Replica replica = null;\n\n      if (snapshotMeta.isPresent()) {\n        if (!shardsToConsider.contains(slice.getName())) {\n          log.warn(\"Skipping the backup for shard {} since it wasn't part of the collection {} when snapshot {} was created.\",\n              slice.getName(), collectionName, snapshotMeta.get().getName());\n          continue;\n        }\n        replica = selectReplicaWithSnapshot(snapshotMeta.get(), slice);\n      } else {\n        // Note - Actually this can return a null value when there is no leader for this shard.\n        replica = slice.getLeader();\n        if (replica == null) {\n          throw new SolrException(ErrorCode.SERVER_ERROR, \"No 'leader' replica available for shard \" + slice.getName() + \" of collection \" + collectionName);\n        }\n      }\n\n      String coreName = replica.getStr(CORE_NAME_PROP);\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.BACKUPCORE.toString());\n      params.set(NAME, slice.getName());\n      params.set(CoreAdminParams.BACKUP_REPOSITORY, repoName);\n      params.set(CoreAdminParams.BACKUP_LOCATION, backupPath.toASCIIString()); // note: index dir will be here then the \"snapshot.\" + slice name\n      params.set(CORE_NAME_PROP, coreName);\n      if (snapshotMeta.isPresent()) {\n        params.set(CoreAdminParams.COMMIT_NAME, snapshotMeta.get().getName());\n      }\n\n      ocmh.sendShardRequest(replica.getNodeName(), params, shardHandler, asyncId, requestMap);\n      log.debug(\"Sent backup request to core={} for backupName={}\", coreName, backupName);\n    }\n    log.debug(\"Sent backup requests to all shard leaders for backupName={}\", backupName);\n\n    ocmh.processResponses(results, shardHandler, true, \"Could not backup all replicas\", asyncId, requestMap);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f","fae84bbf6b9010357c7cbc15871b8df9a785f330","69e6520a21709190413a63084ed135271aab1a7c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"199dfa410f1fdbfd3294106b04096cce5ed34b21","date":1478812506,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/BackupCmd#copyIndexFiles(URI,ZkNodeProps,NamedList).mjava","pathOld":"/dev/null","sourceNew":"  private void copyIndexFiles(URI backupPath, ZkNodeProps request, NamedList results) throws Exception {\n    String collectionName = request.getStr(COLLECTION_PROP);\n    String backupName = request.getStr(NAME);\n    String asyncId = request.getStr(ASYNC);\n    String repoName = request.getStr(CoreAdminParams.BACKUP_REPOSITORY);\n    ShardHandler shardHandler = ocmh.shardHandlerFactory.getShardHandler();\n    Map<String, String> requestMap = new HashMap<>();\n\n    String commitName = request.getStr(CoreAdminParams.COMMIT_NAME);\n    Optional<CollectionSnapshotMetaData> snapshotMeta = Optional.empty();\n    if (commitName != null) {\n      SolrZkClient zkClient = ocmh.overseer.getZkController().getZkClient();\n      snapshotMeta = SolrSnapshotManager.getCollectionLevelSnapshot(zkClient, collectionName, commitName);\n      if (!snapshotMeta.isPresent()) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Snapshot with name \" + commitName\n            + \" does not exist for collection \" + collectionName);\n      }\n      if (snapshotMeta.get().getStatus() != SnapshotStatus.Successful) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Snapshot with name \" + commitName + \" for collection \" + collectionName\n            + \" has not completed successfully. The status is \" + snapshotMeta.get().getStatus());\n      }\n    }\n\n    log.info(\"Starting backup of collection={} with backupName={} at location={}\", collectionName, backupName,\n        backupPath);\n\n    Collection<String> shardsToConsider = Collections.emptySet();\n    if (snapshotMeta.isPresent()) {\n      shardsToConsider = snapshotMeta.get().getShards();\n    }\n\n    for (Slice slice : ocmh.zkStateReader.getClusterState().getCollection(collectionName).getActiveSlices()) {\n      Replica replica = null;\n\n      if (snapshotMeta.isPresent()) {\n        if (!shardsToConsider.contains(slice.getName())) {\n          log.warn(\"Skipping the backup for shard {} since it wasn't part of the collection {} when snapshot {} was created.\",\n              slice.getName(), collectionName, snapshotMeta.get().getName());\n          continue;\n        }\n        replica = selectReplicaWithSnapshot(snapshotMeta.get(), slice);\n      } else {\n        // Note - Actually this can return a null value when there is no leader for this shard.\n        replica = slice.getLeader();\n        if (replica == null) {\n          throw new SolrException(ErrorCode.SERVER_ERROR, \"No 'leader' replica available for shard \" + slice.getName() + \" of collection \" + collectionName);\n        }\n      }\n\n      String coreName = replica.getStr(CORE_NAME_PROP);\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.BACKUPCORE.toString());\n      params.set(NAME, slice.getName());\n      params.set(CoreAdminParams.BACKUP_REPOSITORY, repoName);\n      params.set(CoreAdminParams.BACKUP_LOCATION, backupPath.toASCIIString()); // note: index dir will be here then the \"snapshot.\" + slice name\n      params.set(CORE_NAME_PROP, coreName);\n      if (snapshotMeta.isPresent()) {\n        params.set(CoreAdminParams.COMMIT_NAME, snapshotMeta.get().getName());\n      }\n\n      ocmh.sendShardRequest(replica.getNodeName(), params, shardHandler, asyncId, requestMap);\n      log.debug(\"Sent backup request to core={} for backupName={}\", coreName, backupName);\n    }\n    log.debug(\"Sent backup requests to all shard leaders for backupName={}\", backupName);\n\n    ocmh.processResponses(results, shardHandler, true, \"Could not backup all replicas\", asyncId, requestMap);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6146c07c0dee1ae1e42926167acd127fed5ef59d","date":1516129420,"type":5,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/BackupCmd#copyIndexFiles(URI,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/BackupCmd#copyIndexFiles(URI,ZkNodeProps,NamedList).mjava","sourceNew":"  private void copyIndexFiles(URI backupPath, ZkNodeProps request, NamedList results) throws Exception {\n    String collectionName = request.getStr(COLLECTION_PROP);\n    String backupName = request.getStr(NAME);\n    String asyncId = request.getStr(ASYNC);\n    String repoName = request.getStr(CoreAdminParams.BACKUP_REPOSITORY);\n    ShardHandler shardHandler = ocmh.shardHandlerFactory.getShardHandler();\n    Map<String, String> requestMap = new HashMap<>();\n\n    String commitName = request.getStr(CoreAdminParams.COMMIT_NAME);\n    Optional<CollectionSnapshotMetaData> snapshotMeta = Optional.empty();\n    if (commitName != null) {\n      SolrZkClient zkClient = ocmh.zkStateReader.getZkClient();\n      snapshotMeta = SolrSnapshotManager.getCollectionLevelSnapshot(zkClient, collectionName, commitName);\n      if (!snapshotMeta.isPresent()) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Snapshot with name \" + commitName\n            + \" does not exist for collection \" + collectionName);\n      }\n      if (snapshotMeta.get().getStatus() != SnapshotStatus.Successful) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Snapshot with name \" + commitName + \" for collection \" + collectionName\n            + \" has not completed successfully. The status is \" + snapshotMeta.get().getStatus());\n      }\n    }\n\n    log.info(\"Starting backup of collection={} with backupName={} at location={}\", collectionName, backupName,\n        backupPath);\n\n    Collection<String> shardsToConsider = Collections.emptySet();\n    if (snapshotMeta.isPresent()) {\n      shardsToConsider = snapshotMeta.get().getShards();\n    }\n\n    for (Slice slice : ocmh.zkStateReader.getClusterState().getCollection(collectionName).getActiveSlices()) {\n      Replica replica = null;\n\n      if (snapshotMeta.isPresent()) {\n        if (!shardsToConsider.contains(slice.getName())) {\n          log.warn(\"Skipping the backup for shard {} since it wasn't part of the collection {} when snapshot {} was created.\",\n              slice.getName(), collectionName, snapshotMeta.get().getName());\n          continue;\n        }\n        replica = selectReplicaWithSnapshot(snapshotMeta.get(), slice);\n      } else {\n        // Note - Actually this can return a null value when there is no leader for this shard.\n        replica = slice.getLeader();\n        if (replica == null) {\n          throw new SolrException(ErrorCode.SERVER_ERROR, \"No 'leader' replica available for shard \" + slice.getName() + \" of collection \" + collectionName);\n        }\n      }\n\n      String coreName = replica.getStr(CORE_NAME_PROP);\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.BACKUPCORE.toString());\n      params.set(NAME, slice.getName());\n      params.set(CoreAdminParams.BACKUP_REPOSITORY, repoName);\n      params.set(CoreAdminParams.BACKUP_LOCATION, backupPath.toASCIIString()); // note: index dir will be here then the \"snapshot.\" + slice name\n      params.set(CORE_NAME_PROP, coreName);\n      if (snapshotMeta.isPresent()) {\n        params.set(CoreAdminParams.COMMIT_NAME, snapshotMeta.get().getName());\n      }\n\n      ocmh.sendShardRequest(replica.getNodeName(), params, shardHandler, asyncId, requestMap);\n      log.debug(\"Sent backup request to core={} for backupName={}\", coreName, backupName);\n    }\n    log.debug(\"Sent backup requests to all shard leaders for backupName={}\", backupName);\n\n    ocmh.processResponses(results, shardHandler, true, \"Could not backup all replicas\", asyncId, requestMap);\n  }\n\n","sourceOld":"  private void copyIndexFiles(URI backupPath, ZkNodeProps request, NamedList results) throws Exception {\n    String collectionName = request.getStr(COLLECTION_PROP);\n    String backupName = request.getStr(NAME);\n    String asyncId = request.getStr(ASYNC);\n    String repoName = request.getStr(CoreAdminParams.BACKUP_REPOSITORY);\n    ShardHandler shardHandler = ocmh.shardHandlerFactory.getShardHandler();\n    Map<String, String> requestMap = new HashMap<>();\n\n    String commitName = request.getStr(CoreAdminParams.COMMIT_NAME);\n    Optional<CollectionSnapshotMetaData> snapshotMeta = Optional.empty();\n    if (commitName != null) {\n      SolrZkClient zkClient = ocmh.overseer.getZkController().getZkClient();\n      snapshotMeta = SolrSnapshotManager.getCollectionLevelSnapshot(zkClient, collectionName, commitName);\n      if (!snapshotMeta.isPresent()) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Snapshot with name \" + commitName\n            + \" does not exist for collection \" + collectionName);\n      }\n      if (snapshotMeta.get().getStatus() != SnapshotStatus.Successful) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Snapshot with name \" + commitName + \" for collection \" + collectionName\n            + \" has not completed successfully. The status is \" + snapshotMeta.get().getStatus());\n      }\n    }\n\n    log.info(\"Starting backup of collection={} with backupName={} at location={}\", collectionName, backupName,\n        backupPath);\n\n    Collection<String> shardsToConsider = Collections.emptySet();\n    if (snapshotMeta.isPresent()) {\n      shardsToConsider = snapshotMeta.get().getShards();\n    }\n\n    for (Slice slice : ocmh.zkStateReader.getClusterState().getCollection(collectionName).getActiveSlices()) {\n      Replica replica = null;\n\n      if (snapshotMeta.isPresent()) {\n        if (!shardsToConsider.contains(slice.getName())) {\n          log.warn(\"Skipping the backup for shard {} since it wasn't part of the collection {} when snapshot {} was created.\",\n              slice.getName(), collectionName, snapshotMeta.get().getName());\n          continue;\n        }\n        replica = selectReplicaWithSnapshot(snapshotMeta.get(), slice);\n      } else {\n        // Note - Actually this can return a null value when there is no leader for this shard.\n        replica = slice.getLeader();\n        if (replica == null) {\n          throw new SolrException(ErrorCode.SERVER_ERROR, \"No 'leader' replica available for shard \" + slice.getName() + \" of collection \" + collectionName);\n        }\n      }\n\n      String coreName = replica.getStr(CORE_NAME_PROP);\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.BACKUPCORE.toString());\n      params.set(NAME, slice.getName());\n      params.set(CoreAdminParams.BACKUP_REPOSITORY, repoName);\n      params.set(CoreAdminParams.BACKUP_LOCATION, backupPath.toASCIIString()); // note: index dir will be here then the \"snapshot.\" + slice name\n      params.set(CORE_NAME_PROP, coreName);\n      if (snapshotMeta.isPresent()) {\n        params.set(CoreAdminParams.COMMIT_NAME, snapshotMeta.get().getName());\n      }\n\n      ocmh.sendShardRequest(replica.getNodeName(), params, shardHandler, asyncId, requestMap);\n      log.debug(\"Sent backup request to core={} for backupName={}\", coreName, backupName);\n    }\n    log.debug(\"Sent backup requests to all shard leaders for backupName={}\", backupName);\n\n    ocmh.processResponses(results, shardHandler, true, \"Could not backup all replicas\", asyncId, requestMap);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/BackupCmd#copyIndexFiles(URI,ZkNodeProps,NamedList).mjava","sourceNew":null,"sourceOld":"  private void copyIndexFiles(URI backupPath, ZkNodeProps request, NamedList results) throws Exception {\n    String collectionName = request.getStr(COLLECTION_PROP);\n    String backupName = request.getStr(NAME);\n    String asyncId = request.getStr(ASYNC);\n    String repoName = request.getStr(CoreAdminParams.BACKUP_REPOSITORY);\n    ShardHandler shardHandler = ocmh.shardHandlerFactory.getShardHandler();\n    Map<String, String> requestMap = new HashMap<>();\n\n    String commitName = request.getStr(CoreAdminParams.COMMIT_NAME);\n    Optional<CollectionSnapshotMetaData> snapshotMeta = Optional.empty();\n    if (commitName != null) {\n      SolrZkClient zkClient = ocmh.overseer.getZkController().getZkClient();\n      snapshotMeta = SolrSnapshotManager.getCollectionLevelSnapshot(zkClient, collectionName, commitName);\n      if (!snapshotMeta.isPresent()) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Snapshot with name \" + commitName\n            + \" does not exist for collection \" + collectionName);\n      }\n      if (snapshotMeta.get().getStatus() != SnapshotStatus.Successful) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Snapshot with name \" + commitName + \" for collection \" + collectionName\n            + \" has not completed successfully. The status is \" + snapshotMeta.get().getStatus());\n      }\n    }\n\n    log.info(\"Starting backup of collection={} with backupName={} at location={}\", collectionName, backupName,\n        backupPath);\n\n    Collection<String> shardsToConsider = Collections.emptySet();\n    if (snapshotMeta.isPresent()) {\n      shardsToConsider = snapshotMeta.get().getShards();\n    }\n\n    for (Slice slice : ocmh.zkStateReader.getClusterState().getCollection(collectionName).getActiveSlices()) {\n      Replica replica = null;\n\n      if (snapshotMeta.isPresent()) {\n        if (!shardsToConsider.contains(slice.getName())) {\n          log.warn(\"Skipping the backup for shard {} since it wasn't part of the collection {} when snapshot {} was created.\",\n              slice.getName(), collectionName, snapshotMeta.get().getName());\n          continue;\n        }\n        replica = selectReplicaWithSnapshot(snapshotMeta.get(), slice);\n      } else {\n        // Note - Actually this can return a null value when there is no leader for this shard.\n        replica = slice.getLeader();\n        if (replica == null) {\n          throw new SolrException(ErrorCode.SERVER_ERROR, \"No 'leader' replica available for shard \" + slice.getName() + \" of collection \" + collectionName);\n        }\n      }\n\n      String coreName = replica.getStr(CORE_NAME_PROP);\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.BACKUPCORE.toString());\n      params.set(NAME, slice.getName());\n      params.set(CoreAdminParams.BACKUP_REPOSITORY, repoName);\n      params.set(CoreAdminParams.BACKUP_LOCATION, backupPath.toASCIIString()); // note: index dir will be here then the \"snapshot.\" + slice name\n      params.set(CORE_NAME_PROP, coreName);\n      if (snapshotMeta.isPresent()) {\n        params.set(CoreAdminParams.COMMIT_NAME, snapshotMeta.get().getName());\n      }\n\n      ocmh.sendShardRequest(replica.getNodeName(), params, shardHandler, asyncId, requestMap);\n      log.debug(\"Sent backup request to core={} for backupName={}\", coreName, backupName);\n    }\n    log.debug(\"Sent backup requests to all shard leaders for backupName={}\", backupName);\n\n    ocmh.processResponses(results, shardHandler, true, \"Could not backup all replicas\", asyncId, requestMap);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["b2ad92550399520cc0148c3ee5ca087706f12da4","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["b2ad92550399520cc0148c3ee5ca087706f12da4"],"199dfa410f1fdbfd3294106b04096cce5ed34b21":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b2ad92550399520cc0148c3ee5ca087706f12da4"],"b2ad92550399520cc0148c3ee5ca087706f12da4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b94236357aaa22b76c10629851fe4e376e0cea82"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["199dfa410f1fdbfd3294106b04096cce5ed34b21","b2ad92550399520cc0148c3ee5ca087706f12da4"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["b94236357aaa22b76c10629851fe4e376e0cea82"],"199dfa410f1fdbfd3294106b04096cce5ed34b21":[],"b2ad92550399520cc0148c3ee5ca087706f12da4":["b94236357aaa22b76c10629851fe4e376e0cea82","6146c07c0dee1ae1e42926167acd127fed5ef59d","199dfa410f1fdbfd3294106b04096cce5ed34b21"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["199dfa410f1fdbfd3294106b04096cce5ed34b21","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}