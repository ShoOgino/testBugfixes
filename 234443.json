{"path":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler2[TestSQLHandler]#testBasicSelect().mjava","commits":[{"id":"22191e72f6c40dec88c9b94f9bb55c7527772a47","date":1553715407,"type":1,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler2[TestSQLHandler]#testBasicSelect().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testBasicSelect().mjava","sourceNew":"  @Test\n  public void testBasicSelect() throws Exception {\n\n\n    new UpdateRequest()\n        .add(\"id\", \"1\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"7\", \"field_f\", \"7.5\", \"field_d\", \"7.5\", \"field_l\", \"7\")\n        .add(\"id\", \"2\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"8\", \"field_f\", \"8.5\", \"field_d\", \"8.5\", \"field_l\", \"8\")\n        .add(\"id\", \"3\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"20\", \"field_f\", \"20.5\", \"field_d\", \"20.5\", \"field_l\", \"20\")\n        .add(\"id\", \"4\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"11\", \"field_f\", \"11.5\", \"field_d\", \"11.5\", \"field_l\", \"11\")\n        .add(\"id\", \"5\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\", \"field_f\", \"30.5\", \"field_d\", \"30.5\", \"field_l\", \"30\")\n        .add(\"id\", \"6\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"40\", \"field_f\", \"40.5\", \"field_d\", \"40.5\", \"field_l\", \"40\")\n        .add(\"id\", \"7\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"50\", \"field_f\", \"50.5\", \"field_d\", \"50.5\", \"field_l\", \"50\")\n        .add(\"id\", \"8\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"60\", \"field_f\", \"60.5\", \"field_d\", \"60.5\", \"field_l\", \"60\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    SolrParams sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\",\n        \"select id, field_i, str_s, field_f, field_d, field_l from collection1 where (text_t='(XXXX)' OR text_t='XXXX') AND text_t='XXXX' order by field_i desc\");\n\n    String baseUrl = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    List<Tuple> tuples = getTuples(sParams, baseUrl);\n\n    assert (tuples.size() == 8);\n    Tuple tuple;\n\n    tuple = tuples.get(0);\n    assertEquals(tuple.getLong(\"id\").longValue(), 8);\n    assertEquals(tuple.getLong(\"field_i\").longValue(), 60);\n    assert (tuple.get(\"str_s\").equals(\"c\"));\n    assertEquals(tuple.getLong(\"field_i\").longValue(), 60L);\n    assertEquals(tuple.getDouble(\"field_f\"), 60.5, 0.0);\n    assertEquals(tuple.getDouble(\"field_d\"), 60.5, 0.0);\n    assertEquals(tuple.getLong(\"field_l\").longValue(), 60);\n\n    tuple = tuples.get(1);\n    assertEquals(tuple.getLong(\"id\").longValue(), 7);\n    assertEquals(tuple.getLong(\"field_i\").longValue(), 50);\n    assert (tuple.get(\"str_s\").equals(\"c\"));\n    assertEquals(tuple.getLong(\"field_i\").longValue(), 50);\n    assertEquals(tuple.getDouble(\"field_f\"), 50.5, 0.0);\n    assertEquals(tuple.getDouble(\"field_d\"), 50.5, 0.0);\n    assertEquals(tuple.getLong(\"field_l\").longValue(), 50);\n\n    tuple = tuples.get(2);\n    assertEquals(tuple.getLong(\"id\").longValue(), 6);\n    assertEquals(tuple.getLong(\"field_i\").longValue(), 40);\n    assert (tuple.get(\"str_s\").equals(\"c\"));\n    assertEquals(tuple.getLong(\"field_i\").longValue(), 40);\n    assertEquals(tuple.getDouble(\"field_f\"), 40.5, 0.0);\n    assertEquals(tuple.getDouble(\"field_d\"), 40.5, 0.0);\n    assertEquals(tuple.getLong(\"field_l\").longValue(), 40);\n\n    tuple = tuples.get(3);\n    assertEquals(tuple.getLong(\"id\").longValue(), 5);\n    assertEquals(tuple.getLong(\"field_i\").longValue(), 30);\n    assert (tuple.get(\"str_s\").equals(\"c\"));\n    assertEquals(tuple.getLong(\"field_i\").longValue(), 30);\n    assertEquals(tuple.getDouble(\"field_f\"), 30.5, 0.0);\n    assertEquals(tuple.getDouble(\"field_d\"), 30.5, 0.0);\n    assertEquals(tuple.getLong(\"field_l\").longValue(), 30);\n\n    tuple = tuples.get(4);\n    assertEquals(tuple.getLong(\"id\").longValue(), 3);\n    assertEquals(tuple.getLong(\"field_i\").longValue(), 20);\n    assert (tuple.get(\"str_s\").equals(\"a\"));\n    assertEquals(tuple.getLong(\"field_i\").longValue(), 20);\n    assertEquals(tuple.getDouble(\"field_f\"), 20.5, 0.0);\n    assertEquals(tuple.getDouble(\"field_d\"), 20.5, 0.0);\n    assertEquals(tuple.getLong(\"field_l\").longValue(), 20);\n\n    tuple = tuples.get(5);\n    assertEquals(tuple.getLong(\"id\").longValue(), 4);\n    assertEquals(tuple.getLong(\"field_i\").longValue(), 11);\n    assert (tuple.get(\"str_s\").equals(\"b\"));\n    assertEquals(tuple.getLong(\"field_i\").longValue(), 11);\n    assertEquals(tuple.getDouble(\"field_f\"), 11.5, 0.0);\n    assertEquals(tuple.getDouble(\"field_d\"), 11.5, 0.0);\n    assertEquals(tuple.getLong(\"field_l\").longValue(), 11);\n\n    tuple = tuples.get(6);\n    assertEquals(tuple.getLong(\"id\").longValue(), 2);\n    assertEquals(tuple.getLong(\"field_i\").longValue(), 8);\n    assert (tuple.get(\"str_s\").equals(\"b\"));\n    assertEquals(tuple.getLong(\"field_i\").longValue(), 8);\n    assertEquals(tuple.getDouble(\"field_f\"), 8.5, 0.0);\n    assertEquals(tuple.getDouble(\"field_d\"), 8.5, 0.0);\n    assertEquals(tuple.getLong(\"field_l\").longValue(), 8);\n\n    tuple = tuples.get(7);\n    assertEquals(tuple.getLong(\"id\").longValue(), 1);\n    assertEquals(tuple.getLong(\"field_i\").longValue(), 7);\n    assert (tuple.get(\"str_s\").equals(\"a\"));\n    assertEquals(tuple.getLong(\"field_i\").longValue(), 7);\n    assertEquals(tuple.getDouble(\"field_f\"), 7.5, 0.0);\n    assertEquals(tuple.getDouble(\"field_d\"), 7.5, 0.0);\n    assertEquals(tuple.getLong(\"field_l\").longValue(), 7);\n\n    // Assert field order\n    //assertResponseContains(clients.get(0), sParams, \"{\\\"docs\\\":[{\\\"id\\\":\\\"8\\\",\\\"field_i\\\":60,\\\"str_s\\\":\\\"c\\\",\\\"field_i\\\":60,\\\"field_f\\\":60.5,\\\"field_d\\\":60.5,\\\"field_l\\\":60}\");\n\n\n    sParams = mapParams(CommonParams.QT, \"/sql\", \"stmt\",\n        \"select id, field_i, str_s from collection1 where text_t='XXXX' order by id desc\");\n\n    tuples = getTuples(sParams, baseUrl);\n\n    assert (tuples.size() == 8);\n\n    tuple = tuples.get(0);\n    assert (tuple.getLong(\"id\") == 8);\n    assert (tuple.getLong(\"field_i\") == 60);\n    assert (tuple.get(\"str_s\").equals(\"c\"));\n\n    tuple = tuples.get(1);\n    assert (tuple.getLong(\"id\") == 7);\n    assert (tuple.getLong(\"field_i\") == 50);\n    assert (tuple.get(\"str_s\").equals(\"c\"));\n\n    tuple = tuples.get(2);\n    assert (tuple.getLong(\"id\") == 6);\n    assert (tuple.getLong(\"field_i\") == 40);\n    assert (tuple.get(\"str_s\").equals(\"c\"));\n\n    tuple = tuples.get(3);\n    assert (tuple.getLong(\"id\") == 5);\n    assert (tuple.getLong(\"field_i\") == 30);\n    assert (tuple.get(\"str_s\").equals(\"c\"));\n\n    tuple = tuples.get(4);\n    assert (tuple.getLong(\"id\") == 4);\n    assert (tuple.getLong(\"field_i\") == 11);\n    assert (tuple.get(\"str_s\").equals(\"b\"));\n\n    tuple = tuples.get(5);\n    assert (tuple.getLong(\"id\") == 3);\n    assert (tuple.getLong(\"field_i\") == 20);\n    assert (tuple.get(\"str_s\").equals(\"a\"));\n\n    tuple = tuples.get(6);\n    assert (tuple.getLong(\"id\") == 2);\n    assert (tuple.getLong(\"field_i\") == 8);\n    assert (tuple.get(\"str_s\").equals(\"b\"));\n\n    tuple = tuples.get(7);\n    assert (tuple.getLong(\"id\") == 1);\n    assert (tuple.getLong(\"field_i\") == 7);\n    assert (tuple.get(\"str_s\").equals(\"a\"));\n\n    sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select id, field_i, str_s from collection1 where text_t='XXXX' order by field_i desc limit 1\");\n\n    tuples = getTuples(sParams, baseUrl);\n\n    assert (tuples.size() == 1);\n\n    tuple = tuples.get(0);\n    assert (tuple.getLong(\"id\") == 8);\n    assert (tuple.getLong(\"field_i\") == 60);\n    assert (tuple.get(\"str_s\").equals(\"c\"));\n\n    sParams = mapParams(CommonParams.QT, \"/sql\", \"stmt\",\n        \"select id, field_i, str_s from collection1 where text_t='XXXX' AND id='(1 2 3)' order by field_i desc\");\n\n    tuples = getTuples(sParams, baseUrl);\n\n    assert (tuples.size() == 3);\n\n    tuple = tuples.get(0);\n    assert (tuple.getLong(\"id\") == 3);\n    assert (tuple.getLong(\"field_i\") == 20);\n    assert (tuple.get(\"str_s\").equals(\"a\"));\n\n    tuple = tuples.get(1);\n    assert (tuple.getLong(\"id\") == 2);\n    assert (tuple.getLong(\"field_i\") == 8);\n    assert (tuple.get(\"str_s\").equals(\"b\"));\n\n    tuple = tuples.get(2);\n    assert (tuple.getLong(\"id\") == 1);\n    assert (tuple.getLong(\"field_i\") == 7);\n    assert (tuple.get(\"str_s\").equals(\"a\"));\n\n    sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\",\n        \"select id as myId, field_i as myInt, str_s as myString from collection1 where text_t='XXXX' AND id='(1 2 3)' order by myInt desc\");\n\n    tuples = getTuples(sParams, baseUrl);\n\n    assert (tuples.size() == 3);\n\n    tuple = tuples.get(0);\n    assert (tuple.getLong(\"myId\") == 3);\n    assert (tuple.getLong(\"myInt\") == 20);\n    assert (tuple.get(\"myString\").equals(\"a\"));\n\n    tuple = tuples.get(1);\n    assert (tuple.getLong(\"myId\") == 2);\n    assert (tuple.getLong(\"myInt\") == 8);\n    assert (tuple.get(\"myString\").equals(\"b\"));\n\n    tuple = tuples.get(2);\n    assert (tuple.getLong(\"myId\") == 1);\n    assert (tuple.getLong(\"myInt\") == 7);\n    assert (tuple.get(\"myString\").equals(\"a\"));\n\n    sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\",\n        \"select id as myId, field_i as myInt, str_s as myString from collection1 where text_t='XXXX' AND id='(1 2 3)' order by field_i desc\");\n\n    tuples = getTuples(sParams, baseUrl);\n\n    assert (tuples.size() == 3);\n\n    tuple = tuples.get(0);\n    assert (tuple.getLong(\"myId\") == 3);\n    assert (tuple.getLong(\"myInt\") == 20);\n    assert (tuple.get(\"myString\").equals(\"a\"));\n\n    tuple = tuples.get(1);\n    assert (tuple.getLong(\"myId\") == 2);\n    assert (tuple.getLong(\"myInt\") == 8);\n    assert (tuple.get(\"myString\").equals(\"b\"));\n\n    tuple = tuples.get(2);\n    assert (tuple.getLong(\"myId\") == 1);\n    assert (tuple.getLong(\"myInt\") == 7);\n    assert (tuple.get(\"myString\").equals(\"a\"));\n\n    // SOLR-8845 - Test to make sure that 1 = 0 works for things like Spark SQL\n    sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select id, field_i, str_s from collection1 where 1 = 0\");\n\n    tuples = getTuples(sParams, baseUrl);\n\n    assertEquals(0, tuples.size());\n\n  }\n\n","sourceOld":"  private void testBasicSelect() throws Exception {\n\n    del(\"*:*\");\n\n    commit();\n\n    indexDoc(sdoc(\"id\", \"1\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"7\", \"field_i_p\", \"7\",\n        \"field_f_p\", \"7.5\", \"field_d_p\", \"7.5\", \"field_l_p\", \"7\"));\n    indexDoc(sdoc(\"id\", \"2\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"8\", \"field_i_p\", \"8\",\n        \"field_f_p\", \"8.5\", \"field_d_p\", \"8.5\", \"field_l_p\", \"8\"));\n    indexDoc(sdoc(\"id\", \"3\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"20\", \"field_i_p\", \"20\",\n        \"field_f_p\", \"20.5\", \"field_d_p\", \"20.5\", \"field_l_p\", \"20\"));\n    indexDoc(sdoc(\"id\", \"4\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"11\", \"field_i_p\", \"11\",\n        \"field_f_p\", \"11.5\", \"field_d_p\", \"11.5\", \"field_l_p\", \"11\"));\n    indexDoc(sdoc(\"id\", \"5\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\", \"field_i_p\", \"30\", \"\" +\n        \"field_f_p\", \"30.5\", \"field_d_p\", \"30.5\", \"field_l_p\", \"30\"));\n    indexDoc(sdoc(\"id\", \"6\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"40\", \"field_i_p\", \"40\",\n        \"field_f_p\", \"40.5\", \"field_d_p\", \"40.5\", \"field_l_p\", \"40\"));\n    indexDoc(sdoc(\"id\", \"7\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"50\", \"field_i_p\", \"50\",\n        \"field_f_p\", \"50.5\", \"field_d_p\", \"50.5\", \"field_l_p\", \"50\"));\n    indexDoc(sdoc(\"id\", \"8\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"60\", \"field_i_p\", \"60\",\n        \"field_f_p\", \"60.5\", \"field_d_p\", \"60.5\", \"field_l_p\", \"60\"));\n    commit();\n\n    System.out.println(\"############# testBasicSelect() ############\");\n\n    SolrParams sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\",\n        \"select id, field_i, str_s, field_i_p, field_f_p, field_d_p, field_l_p from collection1 where (text='(XXXX)' OR text='XXXX') AND text='XXXX' order by field_i desc\");\n\n    List<Tuple> tuples = getTuples(sParams);\n\n    assert (tuples.size() == 8);\n    Tuple tuple;\n\n    tuple = tuples.get(0);\n    assertEquals(tuple.getLong(\"id\").longValue(), 8);\n    assertEquals(tuple.getLong(\"field_i\").longValue(), 60);\n    assert (tuple.get(\"str_s\").equals(\"c\"));\n    assertEquals(tuple.getLong(\"field_i_p\").longValue(), 60L);\n    assertEquals(tuple.getDouble(\"field_f_p\"), 60.5, 0.0);\n    assertEquals(tuple.getDouble(\"field_d_p\"), 60.5, 0.0);\n    assertEquals(tuple.getLong(\"field_l_p\").longValue(), 60);\n\n    tuple = tuples.get(1);\n    assertEquals(tuple.getLong(\"id\").longValue(), 7);\n    assertEquals(tuple.getLong(\"field_i\").longValue(), 50);\n    assert (tuple.get(\"str_s\").equals(\"c\"));\n    assertEquals(tuple.getLong(\"field_i_p\").longValue(), 50);\n    assertEquals(tuple.getDouble(\"field_f_p\"), 50.5, 0.0);\n    assertEquals(tuple.getDouble(\"field_d_p\"), 50.5, 0.0);\n    assertEquals(tuple.getLong(\"field_l_p\").longValue(), 50);\n\n    tuple = tuples.get(2);\n    assertEquals(tuple.getLong(\"id\").longValue(), 6);\n    assertEquals(tuple.getLong(\"field_i\").longValue(), 40);\n    assert (tuple.get(\"str_s\").equals(\"c\"));\n    assertEquals(tuple.getLong(\"field_i_p\").longValue(), 40);\n    assertEquals(tuple.getDouble(\"field_f_p\"), 40.5, 0.0);\n    assertEquals(tuple.getDouble(\"field_d_p\"), 40.5, 0.0);\n    assertEquals(tuple.getLong(\"field_l_p\").longValue(), 40);\n\n    tuple = tuples.get(3);\n    assertEquals(tuple.getLong(\"id\").longValue(), 5);\n    assertEquals(tuple.getLong(\"field_i\").longValue(), 30);\n    assert (tuple.get(\"str_s\").equals(\"c\"));\n    assertEquals(tuple.getLong(\"field_i_p\").longValue(), 30);\n    assertEquals(tuple.getDouble(\"field_f_p\"), 30.5, 0.0);\n    assertEquals(tuple.getDouble(\"field_d_p\"), 30.5, 0.0);\n    assertEquals(tuple.getLong(\"field_l_p\").longValue(), 30);\n\n    tuple = tuples.get(4);\n    assertEquals(tuple.getLong(\"id\").longValue(), 3);\n    assertEquals(tuple.getLong(\"field_i\").longValue(), 20);\n    assert (tuple.get(\"str_s\").equals(\"a\"));\n    assertEquals(tuple.getLong(\"field_i_p\").longValue(), 20);\n    assertEquals(tuple.getDouble(\"field_f_p\"), 20.5, 0.0);\n    assertEquals(tuple.getDouble(\"field_d_p\"), 20.5, 0.0);\n    assertEquals(tuple.getLong(\"field_l_p\").longValue(), 20);\n\n    tuple = tuples.get(5);\n    assertEquals(tuple.getLong(\"id\").longValue(), 4);\n    assertEquals(tuple.getLong(\"field_i\").longValue(), 11);\n    assert (tuple.get(\"str_s\").equals(\"b\"));\n    assertEquals(tuple.getLong(\"field_i_p\").longValue(), 11);\n    assertEquals(tuple.getDouble(\"field_f_p\"), 11.5, 0.0);\n    assertEquals(tuple.getDouble(\"field_d_p\"), 11.5, 0.0);\n    assertEquals(tuple.getLong(\"field_l_p\").longValue(), 11);\n\n    tuple = tuples.get(6);\n    assertEquals(tuple.getLong(\"id\").longValue(), 2);\n    assertEquals(tuple.getLong(\"field_i\").longValue(), 8);\n    assert (tuple.get(\"str_s\").equals(\"b\"));\n    assertEquals(tuple.getLong(\"field_i_p\").longValue(), 8);\n    assertEquals(tuple.getDouble(\"field_f_p\"), 8.5, 0.0);\n    assertEquals(tuple.getDouble(\"field_d_p\"), 8.5, 0.0);\n    assertEquals(tuple.getLong(\"field_l_p\").longValue(), 8);\n\n    tuple = tuples.get(7);\n    assertEquals(tuple.getLong(\"id\").longValue(), 1);\n    assertEquals(tuple.getLong(\"field_i\").longValue(), 7);\n    assert (tuple.get(\"str_s\").equals(\"a\"));\n    assertEquals(tuple.getLong(\"field_i_p\").longValue(), 7);\n    assertEquals(tuple.getDouble(\"field_f_p\"), 7.5, 0.0);\n    assertEquals(tuple.getDouble(\"field_d_p\"), 7.5, 0.0);\n    assertEquals(tuple.getLong(\"field_l_p\").longValue(), 7);\n\n    // Assert field order\n    assertResponseContains(clients.get(0), sParams,\n        \"{\\\"docs\\\":[{\\\"id\\\":\\\"8\\\",\\\"field_i\\\":60,\\\"str_s\\\":\\\"c\\\",\\\"field_i_p\\\":60,\\\"field_f_p\\\":60.5,\\\"field_d_p\\\":60.5,\\\"field_l_p\\\":60}\");\n\n    // Test unlimited unsorted result. Should sort on _version_ desc\n    sParams = mapParams(CommonParams.QT, \"/sql\", \"stmt\",\n        \"select id, field_i, str_s from collection1 where text='XXXX'\");\n\n    tuples = getTuples(sParams);\n\n    assert (tuples.size() == 8);\n\n    tuple = tuples.get(0);\n    assert (tuple.getLong(\"id\") == 8);\n    assert (tuple.getLong(\"field_i\") == 60);\n    assert (tuple.get(\"str_s\").equals(\"c\"));\n\n    tuple = tuples.get(1);\n    assert (tuple.getLong(\"id\") == 7);\n    assert (tuple.getLong(\"field_i\") == 50);\n    assert (tuple.get(\"str_s\").equals(\"c\"));\n\n    tuple = tuples.get(2);\n    assert (tuple.getLong(\"id\") == 6);\n    assert (tuple.getLong(\"field_i\") == 40);\n    assert (tuple.get(\"str_s\").equals(\"c\"));\n\n    tuple = tuples.get(3);\n    assert (tuple.getLong(\"id\") == 5);\n    assert (tuple.getLong(\"field_i\") == 30);\n    assert (tuple.get(\"str_s\").equals(\"c\"));\n\n    tuple = tuples.get(4);\n    assert (tuple.getLong(\"id\") == 4);\n    assert (tuple.getLong(\"field_i\") == 11);\n    assert (tuple.get(\"str_s\").equals(\"b\"));\n\n    tuple = tuples.get(5);\n    assert (tuple.getLong(\"id\") == 3);\n    assert (tuple.getLong(\"field_i\") == 20);\n    assert (tuple.get(\"str_s\").equals(\"a\"));\n\n    tuple = tuples.get(6);\n    assert (tuple.getLong(\"id\") == 2);\n    assert (tuple.getLong(\"field_i\") == 8);\n    assert (tuple.get(\"str_s\").equals(\"b\"));\n\n    tuple = tuples.get(7);\n    assert (tuple.getLong(\"id\") == 1);\n    assert (tuple.getLong(\"field_i\") == 7);\n    assert (tuple.get(\"str_s\").equals(\"a\"));\n\n    sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select id, field_i, str_s from collection1 where text='XXXX' order by field_i desc limit 1\");\n\n    tuples = getTuples(sParams);\n\n    assert (tuples.size() == 1);\n\n    tuple = tuples.get(0);\n    assert (tuple.getLong(\"id\") == 8);\n    assert (tuple.getLong(\"field_i\") == 60);\n    assert (tuple.get(\"str_s\").equals(\"c\"));\n\n    sParams = mapParams(CommonParams.QT, \"/sql\", \"stmt\",\n        \"select id, field_i, str_s from collection1 where text='XXXX' AND id='(1 2 3)' order by field_i desc\");\n\n    tuples = getTuples(sParams);\n\n    assert (tuples.size() == 3);\n\n    tuple = tuples.get(0);\n    assert (tuple.getLong(\"id\") == 3);\n    assert (tuple.getLong(\"field_i\") == 20);\n    assert (tuple.get(\"str_s\").equals(\"a\"));\n\n    tuple = tuples.get(1);\n    assert (tuple.getLong(\"id\") == 2);\n    assert (tuple.getLong(\"field_i\") == 8);\n    assert (tuple.get(\"str_s\").equals(\"b\"));\n\n    tuple = tuples.get(2);\n    assert (tuple.getLong(\"id\") == 1);\n    assert (tuple.getLong(\"field_i\") == 7);\n    assert (tuple.get(\"str_s\").equals(\"a\"));\n\n    sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\",\n        \"select id as myId, field_i as myInt, str_s as myString from collection1 where text='XXXX' AND id='(1 2 3)' order by myInt desc\");\n\n    tuples = getTuples(sParams);\n\n    assert (tuples.size() == 3);\n\n    tuple = tuples.get(0);\n    assert (tuple.getLong(\"myId\") == 3);\n    assert (tuple.getLong(\"myInt\") == 20);\n    assert (tuple.get(\"myString\").equals(\"a\"));\n\n    tuple = tuples.get(1);\n    assert (tuple.getLong(\"myId\") == 2);\n    assert (tuple.getLong(\"myInt\") == 8);\n    assert (tuple.get(\"myString\").equals(\"b\"));\n\n    tuple = tuples.get(2);\n    assert (tuple.getLong(\"myId\") == 1);\n    assert (tuple.getLong(\"myInt\") == 7);\n    assert (tuple.get(\"myString\").equals(\"a\"));\n\n    sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\",\n        \"select id as myId, field_i as myInt, str_s as myString from collection1 where text='XXXX' AND id='(1 2 3)' order by field_i desc\");\n\n    tuples = getTuples(sParams);\n\n    assert (tuples.size() == 3);\n\n    tuple = tuples.get(0);\n    assert (tuple.getLong(\"myId\") == 3);\n    assert (tuple.getLong(\"myInt\") == 20);\n    assert (tuple.get(\"myString\").equals(\"a\"));\n\n    tuple = tuples.get(1);\n    assert (tuple.getLong(\"myId\") == 2);\n    assert (tuple.getLong(\"myInt\") == 8);\n    assert (tuple.get(\"myString\").equals(\"b\"));\n\n    tuple = tuples.get(2);\n    assert (tuple.getLong(\"myId\") == 1);\n    assert (tuple.getLong(\"myInt\") == 7);\n    assert (tuple.get(\"myString\").equals(\"a\"));\n\n    // Test after reload SOLR-9059//\n    Replica leader = getShardLeader(\"collection1\", \"shard1\", 30 /* timeout secs */);\n\n    // reload collection and wait to see the core report it has been reloaded\n    boolean wasReloaded = reloadCollection(leader, \"collection1\");\n    assertTrue(wasReloaded);\n\n    sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\",\n        \"select id as myId, field_i as myInt, str_s as myString from collection1 where text='XXXX' AND id='(1 2 3)' order by field_i desc\");\n\n    tuples = getTuples(sParams);\n\n    assert (tuples.size() == 3);\n\n    tuple = tuples.get(0);\n    assert (tuple.getLong(\"myId\") == 3);\n    assert (tuple.getLong(\"myInt\") == 20);\n    assert (tuple.get(\"myString\").equals(\"a\"));\n\n    tuple = tuples.get(1);\n    assert (tuple.getLong(\"myId\") == 2);\n    assert (tuple.getLong(\"myInt\") == 8);\n    assert (tuple.get(\"myString\").equals(\"b\"));\n\n    tuple = tuples.get(2);\n    assert (tuple.getLong(\"myId\") == 1);\n    assert (tuple.getLong(\"myInt\") == 7);\n    assert (tuple.get(\"myString\").equals(\"a\"));\n\n    // SOLR-8845 - Test to make sure that 1 = 0 works for things like Spark SQL\n    sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select id, field_i, str_s from collection1 where 1 = 0\");\n\n    tuples = getTuples(sParams);\n\n    assertEquals(0, tuples.size());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"94e31112925a65b1d36f9064772080e25b5ef373","date":1553715407,"type":5,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testBasicSelect().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler2[TestSQLHandler]#testBasicSelect().mjava","sourceNew":"  @Test\n  public void testBasicSelect() throws Exception {\n\n\n    new UpdateRequest()\n        .add(\"id\", \"1\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"7\", \"field_f\", \"7.5\", \"field_d\", \"7.5\", \"field_l\", \"7\")\n        .add(\"id\", \"2\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"8\", \"field_f\", \"8.5\", \"field_d\", \"8.5\", \"field_l\", \"8\")\n        .add(\"id\", \"3\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"20\", \"field_f\", \"20.5\", \"field_d\", \"20.5\", \"field_l\", \"20\")\n        .add(\"id\", \"4\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"11\", \"field_f\", \"11.5\", \"field_d\", \"11.5\", \"field_l\", \"11\")\n        .add(\"id\", \"5\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\", \"field_f\", \"30.5\", \"field_d\", \"30.5\", \"field_l\", \"30\")\n        .add(\"id\", \"6\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"40\", \"field_f\", \"40.5\", \"field_d\", \"40.5\", \"field_l\", \"40\")\n        .add(\"id\", \"7\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"50\", \"field_f\", \"50.5\", \"field_d\", \"50.5\", \"field_l\", \"50\")\n        .add(\"id\", \"8\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"60\", \"field_f\", \"60.5\", \"field_d\", \"60.5\", \"field_l\", \"60\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    SolrParams sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\",\n        \"select id, field_i, str_s, field_f, field_d, field_l from collection1 where (text_t='(XXXX)' OR text_t='XXXX') AND text_t='XXXX' order by field_i desc\");\n\n    String baseUrl = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    List<Tuple> tuples = getTuples(sParams, baseUrl);\n\n    assert (tuples.size() == 8);\n    Tuple tuple;\n\n    tuple = tuples.get(0);\n    assertEquals(tuple.getLong(\"id\").longValue(), 8);\n    assertEquals(tuple.getLong(\"field_i\").longValue(), 60);\n    assert (tuple.get(\"str_s\").equals(\"c\"));\n    assertEquals(tuple.getLong(\"field_i\").longValue(), 60L);\n    assertEquals(tuple.getDouble(\"field_f\"), 60.5, 0.0);\n    assertEquals(tuple.getDouble(\"field_d\"), 60.5, 0.0);\n    assertEquals(tuple.getLong(\"field_l\").longValue(), 60);\n\n    tuple = tuples.get(1);\n    assertEquals(tuple.getLong(\"id\").longValue(), 7);\n    assertEquals(tuple.getLong(\"field_i\").longValue(), 50);\n    assert (tuple.get(\"str_s\").equals(\"c\"));\n    assertEquals(tuple.getLong(\"field_i\").longValue(), 50);\n    assertEquals(tuple.getDouble(\"field_f\"), 50.5, 0.0);\n    assertEquals(tuple.getDouble(\"field_d\"), 50.5, 0.0);\n    assertEquals(tuple.getLong(\"field_l\").longValue(), 50);\n\n    tuple = tuples.get(2);\n    assertEquals(tuple.getLong(\"id\").longValue(), 6);\n    assertEquals(tuple.getLong(\"field_i\").longValue(), 40);\n    assert (tuple.get(\"str_s\").equals(\"c\"));\n    assertEquals(tuple.getLong(\"field_i\").longValue(), 40);\n    assertEquals(tuple.getDouble(\"field_f\"), 40.5, 0.0);\n    assertEquals(tuple.getDouble(\"field_d\"), 40.5, 0.0);\n    assertEquals(tuple.getLong(\"field_l\").longValue(), 40);\n\n    tuple = tuples.get(3);\n    assertEquals(tuple.getLong(\"id\").longValue(), 5);\n    assertEquals(tuple.getLong(\"field_i\").longValue(), 30);\n    assert (tuple.get(\"str_s\").equals(\"c\"));\n    assertEquals(tuple.getLong(\"field_i\").longValue(), 30);\n    assertEquals(tuple.getDouble(\"field_f\"), 30.5, 0.0);\n    assertEquals(tuple.getDouble(\"field_d\"), 30.5, 0.0);\n    assertEquals(tuple.getLong(\"field_l\").longValue(), 30);\n\n    tuple = tuples.get(4);\n    assertEquals(tuple.getLong(\"id\").longValue(), 3);\n    assertEquals(tuple.getLong(\"field_i\").longValue(), 20);\n    assert (tuple.get(\"str_s\").equals(\"a\"));\n    assertEquals(tuple.getLong(\"field_i\").longValue(), 20);\n    assertEquals(tuple.getDouble(\"field_f\"), 20.5, 0.0);\n    assertEquals(tuple.getDouble(\"field_d\"), 20.5, 0.0);\n    assertEquals(tuple.getLong(\"field_l\").longValue(), 20);\n\n    tuple = tuples.get(5);\n    assertEquals(tuple.getLong(\"id\").longValue(), 4);\n    assertEquals(tuple.getLong(\"field_i\").longValue(), 11);\n    assert (tuple.get(\"str_s\").equals(\"b\"));\n    assertEquals(tuple.getLong(\"field_i\").longValue(), 11);\n    assertEquals(tuple.getDouble(\"field_f\"), 11.5, 0.0);\n    assertEquals(tuple.getDouble(\"field_d\"), 11.5, 0.0);\n    assertEquals(tuple.getLong(\"field_l\").longValue(), 11);\n\n    tuple = tuples.get(6);\n    assertEquals(tuple.getLong(\"id\").longValue(), 2);\n    assertEquals(tuple.getLong(\"field_i\").longValue(), 8);\n    assert (tuple.get(\"str_s\").equals(\"b\"));\n    assertEquals(tuple.getLong(\"field_i\").longValue(), 8);\n    assertEquals(tuple.getDouble(\"field_f\"), 8.5, 0.0);\n    assertEquals(tuple.getDouble(\"field_d\"), 8.5, 0.0);\n    assertEquals(tuple.getLong(\"field_l\").longValue(), 8);\n\n    tuple = tuples.get(7);\n    assertEquals(tuple.getLong(\"id\").longValue(), 1);\n    assertEquals(tuple.getLong(\"field_i\").longValue(), 7);\n    assert (tuple.get(\"str_s\").equals(\"a\"));\n    assertEquals(tuple.getLong(\"field_i\").longValue(), 7);\n    assertEquals(tuple.getDouble(\"field_f\"), 7.5, 0.0);\n    assertEquals(tuple.getDouble(\"field_d\"), 7.5, 0.0);\n    assertEquals(tuple.getLong(\"field_l\").longValue(), 7);\n\n    // Assert field order\n    //assertResponseContains(clients.get(0), sParams, \"{\\\"docs\\\":[{\\\"id\\\":\\\"8\\\",\\\"field_i\\\":60,\\\"str_s\\\":\\\"c\\\",\\\"field_i\\\":60,\\\"field_f\\\":60.5,\\\"field_d\\\":60.5,\\\"field_l\\\":60}\");\n\n\n    sParams = mapParams(CommonParams.QT, \"/sql\", \"stmt\",\n        \"select id, field_i, str_s from collection1 where text_t='XXXX' order by id desc\");\n\n    tuples = getTuples(sParams, baseUrl);\n\n    assert (tuples.size() == 8);\n\n    tuple = tuples.get(0);\n    assert (tuple.getLong(\"id\") == 8);\n    assert (tuple.getLong(\"field_i\") == 60);\n    assert (tuple.get(\"str_s\").equals(\"c\"));\n\n    tuple = tuples.get(1);\n    assert (tuple.getLong(\"id\") == 7);\n    assert (tuple.getLong(\"field_i\") == 50);\n    assert (tuple.get(\"str_s\").equals(\"c\"));\n\n    tuple = tuples.get(2);\n    assert (tuple.getLong(\"id\") == 6);\n    assert (tuple.getLong(\"field_i\") == 40);\n    assert (tuple.get(\"str_s\").equals(\"c\"));\n\n    tuple = tuples.get(3);\n    assert (tuple.getLong(\"id\") == 5);\n    assert (tuple.getLong(\"field_i\") == 30);\n    assert (tuple.get(\"str_s\").equals(\"c\"));\n\n    tuple = tuples.get(4);\n    assert (tuple.getLong(\"id\") == 4);\n    assert (tuple.getLong(\"field_i\") == 11);\n    assert (tuple.get(\"str_s\").equals(\"b\"));\n\n    tuple = tuples.get(5);\n    assert (tuple.getLong(\"id\") == 3);\n    assert (tuple.getLong(\"field_i\") == 20);\n    assert (tuple.get(\"str_s\").equals(\"a\"));\n\n    tuple = tuples.get(6);\n    assert (tuple.getLong(\"id\") == 2);\n    assert (tuple.getLong(\"field_i\") == 8);\n    assert (tuple.get(\"str_s\").equals(\"b\"));\n\n    tuple = tuples.get(7);\n    assert (tuple.getLong(\"id\") == 1);\n    assert (tuple.getLong(\"field_i\") == 7);\n    assert (tuple.get(\"str_s\").equals(\"a\"));\n\n    sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select id, field_i, str_s from collection1 where text_t='XXXX' order by field_i desc limit 1\");\n\n    tuples = getTuples(sParams, baseUrl);\n\n    assert (tuples.size() == 1);\n\n    tuple = tuples.get(0);\n    assert (tuple.getLong(\"id\") == 8);\n    assert (tuple.getLong(\"field_i\") == 60);\n    assert (tuple.get(\"str_s\").equals(\"c\"));\n\n    sParams = mapParams(CommonParams.QT, \"/sql\", \"stmt\",\n        \"select id, field_i, str_s from collection1 where text_t='XXXX' AND id='(1 2 3)' order by field_i desc\");\n\n    tuples = getTuples(sParams, baseUrl);\n\n    assert (tuples.size() == 3);\n\n    tuple = tuples.get(0);\n    assert (tuple.getLong(\"id\") == 3);\n    assert (tuple.getLong(\"field_i\") == 20);\n    assert (tuple.get(\"str_s\").equals(\"a\"));\n\n    tuple = tuples.get(1);\n    assert (tuple.getLong(\"id\") == 2);\n    assert (tuple.getLong(\"field_i\") == 8);\n    assert (tuple.get(\"str_s\").equals(\"b\"));\n\n    tuple = tuples.get(2);\n    assert (tuple.getLong(\"id\") == 1);\n    assert (tuple.getLong(\"field_i\") == 7);\n    assert (tuple.get(\"str_s\").equals(\"a\"));\n\n    sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\",\n        \"select id as myId, field_i as myInt, str_s as myString from collection1 where text_t='XXXX' AND id='(1 2 3)' order by myInt desc\");\n\n    tuples = getTuples(sParams, baseUrl);\n\n    assert (tuples.size() == 3);\n\n    tuple = tuples.get(0);\n    assert (tuple.getLong(\"myId\") == 3);\n    assert (tuple.getLong(\"myInt\") == 20);\n    assert (tuple.get(\"myString\").equals(\"a\"));\n\n    tuple = tuples.get(1);\n    assert (tuple.getLong(\"myId\") == 2);\n    assert (tuple.getLong(\"myInt\") == 8);\n    assert (tuple.get(\"myString\").equals(\"b\"));\n\n    tuple = tuples.get(2);\n    assert (tuple.getLong(\"myId\") == 1);\n    assert (tuple.getLong(\"myInt\") == 7);\n    assert (tuple.get(\"myString\").equals(\"a\"));\n\n    sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\",\n        \"select id as myId, field_i as myInt, str_s as myString from collection1 where text_t='XXXX' AND id='(1 2 3)' order by field_i desc\");\n\n    tuples = getTuples(sParams, baseUrl);\n\n    assert (tuples.size() == 3);\n\n    tuple = tuples.get(0);\n    assert (tuple.getLong(\"myId\") == 3);\n    assert (tuple.getLong(\"myInt\") == 20);\n    assert (tuple.get(\"myString\").equals(\"a\"));\n\n    tuple = tuples.get(1);\n    assert (tuple.getLong(\"myId\") == 2);\n    assert (tuple.getLong(\"myInt\") == 8);\n    assert (tuple.get(\"myString\").equals(\"b\"));\n\n    tuple = tuples.get(2);\n    assert (tuple.getLong(\"myId\") == 1);\n    assert (tuple.getLong(\"myInt\") == 7);\n    assert (tuple.get(\"myString\").equals(\"a\"));\n\n    // SOLR-8845 - Test to make sure that 1 = 0 works for things like Spark SQL\n    sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select id, field_i, str_s from collection1 where 1 = 0\");\n\n    tuples = getTuples(sParams, baseUrl);\n\n    assertEquals(0, tuples.size());\n\n  }\n\n","sourceOld":"  @Test\n  public void testBasicSelect() throws Exception {\n\n\n    new UpdateRequest()\n        .add(\"id\", \"1\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"7\", \"field_f\", \"7.5\", \"field_d\", \"7.5\", \"field_l\", \"7\")\n        .add(\"id\", \"2\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"8\", \"field_f\", \"8.5\", \"field_d\", \"8.5\", \"field_l\", \"8\")\n        .add(\"id\", \"3\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"20\", \"field_f\", \"20.5\", \"field_d\", \"20.5\", \"field_l\", \"20\")\n        .add(\"id\", \"4\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"11\", \"field_f\", \"11.5\", \"field_d\", \"11.5\", \"field_l\", \"11\")\n        .add(\"id\", \"5\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\", \"field_f\", \"30.5\", \"field_d\", \"30.5\", \"field_l\", \"30\")\n        .add(\"id\", \"6\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"40\", \"field_f\", \"40.5\", \"field_d\", \"40.5\", \"field_l\", \"40\")\n        .add(\"id\", \"7\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"50\", \"field_f\", \"50.5\", \"field_d\", \"50.5\", \"field_l\", \"50\")\n        .add(\"id\", \"8\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"60\", \"field_f\", \"60.5\", \"field_d\", \"60.5\", \"field_l\", \"60\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    SolrParams sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\",\n        \"select id, field_i, str_s, field_f, field_d, field_l from collection1 where (text_t='(XXXX)' OR text_t='XXXX') AND text_t='XXXX' order by field_i desc\");\n\n    String baseUrl = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    List<Tuple> tuples = getTuples(sParams, baseUrl);\n\n    assert (tuples.size() == 8);\n    Tuple tuple;\n\n    tuple = tuples.get(0);\n    assertEquals(tuple.getLong(\"id\").longValue(), 8);\n    assertEquals(tuple.getLong(\"field_i\").longValue(), 60);\n    assert (tuple.get(\"str_s\").equals(\"c\"));\n    assertEquals(tuple.getLong(\"field_i\").longValue(), 60L);\n    assertEquals(tuple.getDouble(\"field_f\"), 60.5, 0.0);\n    assertEquals(tuple.getDouble(\"field_d\"), 60.5, 0.0);\n    assertEquals(tuple.getLong(\"field_l\").longValue(), 60);\n\n    tuple = tuples.get(1);\n    assertEquals(tuple.getLong(\"id\").longValue(), 7);\n    assertEquals(tuple.getLong(\"field_i\").longValue(), 50);\n    assert (tuple.get(\"str_s\").equals(\"c\"));\n    assertEquals(tuple.getLong(\"field_i\").longValue(), 50);\n    assertEquals(tuple.getDouble(\"field_f\"), 50.5, 0.0);\n    assertEquals(tuple.getDouble(\"field_d\"), 50.5, 0.0);\n    assertEquals(tuple.getLong(\"field_l\").longValue(), 50);\n\n    tuple = tuples.get(2);\n    assertEquals(tuple.getLong(\"id\").longValue(), 6);\n    assertEquals(tuple.getLong(\"field_i\").longValue(), 40);\n    assert (tuple.get(\"str_s\").equals(\"c\"));\n    assertEquals(tuple.getLong(\"field_i\").longValue(), 40);\n    assertEquals(tuple.getDouble(\"field_f\"), 40.5, 0.0);\n    assertEquals(tuple.getDouble(\"field_d\"), 40.5, 0.0);\n    assertEquals(tuple.getLong(\"field_l\").longValue(), 40);\n\n    tuple = tuples.get(3);\n    assertEquals(tuple.getLong(\"id\").longValue(), 5);\n    assertEquals(tuple.getLong(\"field_i\").longValue(), 30);\n    assert (tuple.get(\"str_s\").equals(\"c\"));\n    assertEquals(tuple.getLong(\"field_i\").longValue(), 30);\n    assertEquals(tuple.getDouble(\"field_f\"), 30.5, 0.0);\n    assertEquals(tuple.getDouble(\"field_d\"), 30.5, 0.0);\n    assertEquals(tuple.getLong(\"field_l\").longValue(), 30);\n\n    tuple = tuples.get(4);\n    assertEquals(tuple.getLong(\"id\").longValue(), 3);\n    assertEquals(tuple.getLong(\"field_i\").longValue(), 20);\n    assert (tuple.get(\"str_s\").equals(\"a\"));\n    assertEquals(tuple.getLong(\"field_i\").longValue(), 20);\n    assertEquals(tuple.getDouble(\"field_f\"), 20.5, 0.0);\n    assertEquals(tuple.getDouble(\"field_d\"), 20.5, 0.0);\n    assertEquals(tuple.getLong(\"field_l\").longValue(), 20);\n\n    tuple = tuples.get(5);\n    assertEquals(tuple.getLong(\"id\").longValue(), 4);\n    assertEquals(tuple.getLong(\"field_i\").longValue(), 11);\n    assert (tuple.get(\"str_s\").equals(\"b\"));\n    assertEquals(tuple.getLong(\"field_i\").longValue(), 11);\n    assertEquals(tuple.getDouble(\"field_f\"), 11.5, 0.0);\n    assertEquals(tuple.getDouble(\"field_d\"), 11.5, 0.0);\n    assertEquals(tuple.getLong(\"field_l\").longValue(), 11);\n\n    tuple = tuples.get(6);\n    assertEquals(tuple.getLong(\"id\").longValue(), 2);\n    assertEquals(tuple.getLong(\"field_i\").longValue(), 8);\n    assert (tuple.get(\"str_s\").equals(\"b\"));\n    assertEquals(tuple.getLong(\"field_i\").longValue(), 8);\n    assertEquals(tuple.getDouble(\"field_f\"), 8.5, 0.0);\n    assertEquals(tuple.getDouble(\"field_d\"), 8.5, 0.0);\n    assertEquals(tuple.getLong(\"field_l\").longValue(), 8);\n\n    tuple = tuples.get(7);\n    assertEquals(tuple.getLong(\"id\").longValue(), 1);\n    assertEquals(tuple.getLong(\"field_i\").longValue(), 7);\n    assert (tuple.get(\"str_s\").equals(\"a\"));\n    assertEquals(tuple.getLong(\"field_i\").longValue(), 7);\n    assertEquals(tuple.getDouble(\"field_f\"), 7.5, 0.0);\n    assertEquals(tuple.getDouble(\"field_d\"), 7.5, 0.0);\n    assertEquals(tuple.getLong(\"field_l\").longValue(), 7);\n\n    // Assert field order\n    //assertResponseContains(clients.get(0), sParams, \"{\\\"docs\\\":[{\\\"id\\\":\\\"8\\\",\\\"field_i\\\":60,\\\"str_s\\\":\\\"c\\\",\\\"field_i\\\":60,\\\"field_f\\\":60.5,\\\"field_d\\\":60.5,\\\"field_l\\\":60}\");\n\n\n    sParams = mapParams(CommonParams.QT, \"/sql\", \"stmt\",\n        \"select id, field_i, str_s from collection1 where text_t='XXXX' order by id desc\");\n\n    tuples = getTuples(sParams, baseUrl);\n\n    assert (tuples.size() == 8);\n\n    tuple = tuples.get(0);\n    assert (tuple.getLong(\"id\") == 8);\n    assert (tuple.getLong(\"field_i\") == 60);\n    assert (tuple.get(\"str_s\").equals(\"c\"));\n\n    tuple = tuples.get(1);\n    assert (tuple.getLong(\"id\") == 7);\n    assert (tuple.getLong(\"field_i\") == 50);\n    assert (tuple.get(\"str_s\").equals(\"c\"));\n\n    tuple = tuples.get(2);\n    assert (tuple.getLong(\"id\") == 6);\n    assert (tuple.getLong(\"field_i\") == 40);\n    assert (tuple.get(\"str_s\").equals(\"c\"));\n\n    tuple = tuples.get(3);\n    assert (tuple.getLong(\"id\") == 5);\n    assert (tuple.getLong(\"field_i\") == 30);\n    assert (tuple.get(\"str_s\").equals(\"c\"));\n\n    tuple = tuples.get(4);\n    assert (tuple.getLong(\"id\") == 4);\n    assert (tuple.getLong(\"field_i\") == 11);\n    assert (tuple.get(\"str_s\").equals(\"b\"));\n\n    tuple = tuples.get(5);\n    assert (tuple.getLong(\"id\") == 3);\n    assert (tuple.getLong(\"field_i\") == 20);\n    assert (tuple.get(\"str_s\").equals(\"a\"));\n\n    tuple = tuples.get(6);\n    assert (tuple.getLong(\"id\") == 2);\n    assert (tuple.getLong(\"field_i\") == 8);\n    assert (tuple.get(\"str_s\").equals(\"b\"));\n\n    tuple = tuples.get(7);\n    assert (tuple.getLong(\"id\") == 1);\n    assert (tuple.getLong(\"field_i\") == 7);\n    assert (tuple.get(\"str_s\").equals(\"a\"));\n\n    sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select id, field_i, str_s from collection1 where text_t='XXXX' order by field_i desc limit 1\");\n\n    tuples = getTuples(sParams, baseUrl);\n\n    assert (tuples.size() == 1);\n\n    tuple = tuples.get(0);\n    assert (tuple.getLong(\"id\") == 8);\n    assert (tuple.getLong(\"field_i\") == 60);\n    assert (tuple.get(\"str_s\").equals(\"c\"));\n\n    sParams = mapParams(CommonParams.QT, \"/sql\", \"stmt\",\n        \"select id, field_i, str_s from collection1 where text_t='XXXX' AND id='(1 2 3)' order by field_i desc\");\n\n    tuples = getTuples(sParams, baseUrl);\n\n    assert (tuples.size() == 3);\n\n    tuple = tuples.get(0);\n    assert (tuple.getLong(\"id\") == 3);\n    assert (tuple.getLong(\"field_i\") == 20);\n    assert (tuple.get(\"str_s\").equals(\"a\"));\n\n    tuple = tuples.get(1);\n    assert (tuple.getLong(\"id\") == 2);\n    assert (tuple.getLong(\"field_i\") == 8);\n    assert (tuple.get(\"str_s\").equals(\"b\"));\n\n    tuple = tuples.get(2);\n    assert (tuple.getLong(\"id\") == 1);\n    assert (tuple.getLong(\"field_i\") == 7);\n    assert (tuple.get(\"str_s\").equals(\"a\"));\n\n    sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\",\n        \"select id as myId, field_i as myInt, str_s as myString from collection1 where text_t='XXXX' AND id='(1 2 3)' order by myInt desc\");\n\n    tuples = getTuples(sParams, baseUrl);\n\n    assert (tuples.size() == 3);\n\n    tuple = tuples.get(0);\n    assert (tuple.getLong(\"myId\") == 3);\n    assert (tuple.getLong(\"myInt\") == 20);\n    assert (tuple.get(\"myString\").equals(\"a\"));\n\n    tuple = tuples.get(1);\n    assert (tuple.getLong(\"myId\") == 2);\n    assert (tuple.getLong(\"myInt\") == 8);\n    assert (tuple.get(\"myString\").equals(\"b\"));\n\n    tuple = tuples.get(2);\n    assert (tuple.getLong(\"myId\") == 1);\n    assert (tuple.getLong(\"myInt\") == 7);\n    assert (tuple.get(\"myString\").equals(\"a\"));\n\n    sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\",\n        \"select id as myId, field_i as myInt, str_s as myString from collection1 where text_t='XXXX' AND id='(1 2 3)' order by field_i desc\");\n\n    tuples = getTuples(sParams, baseUrl);\n\n    assert (tuples.size() == 3);\n\n    tuple = tuples.get(0);\n    assert (tuple.getLong(\"myId\") == 3);\n    assert (tuple.getLong(\"myInt\") == 20);\n    assert (tuple.get(\"myString\").equals(\"a\"));\n\n    tuple = tuples.get(1);\n    assert (tuple.getLong(\"myId\") == 2);\n    assert (tuple.getLong(\"myInt\") == 8);\n    assert (tuple.get(\"myString\").equals(\"b\"));\n\n    tuple = tuples.get(2);\n    assert (tuple.getLong(\"myId\") == 1);\n    assert (tuple.getLong(\"myInt\") == 7);\n    assert (tuple.get(\"myString\").equals(\"a\"));\n\n    // SOLR-8845 - Test to make sure that 1 = 0 works for things like Spark SQL\n    sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select id, field_i, str_s from collection1 where 1 = 0\");\n\n    tuples = getTuples(sParams, baseUrl);\n\n    assertEquals(0, tuples.size());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"22191e72f6c40dec88c9b94f9bb55c7527772a47":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["94e31112925a65b1d36f9064772080e25b5ef373"],"94e31112925a65b1d36f9064772080e25b5ef373":["22191e72f6c40dec88c9b94f9bb55c7527772a47"]},"commit2Childs":{"22191e72f6c40dec88c9b94f9bb55c7527772a47":["94e31112925a65b1d36f9064772080e25b5ef373"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["22191e72f6c40dec88c9b94f9bb55c7527772a47"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"94e31112925a65b1d36f9064772080e25b5ef373":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}