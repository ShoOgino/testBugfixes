{"path":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/RandomGeo3dShapeGenerator#orderPoints(List[GeoPoint]).mjava","commits":[{"id":"f215583134d6d66410e3c48b32282e3eb9d5fcde","date":1505141283,"type":0,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/RandomGeo3dShapeGenerator#orderPoints(List[GeoPoint]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Method that orders a lit of points anti-clock-wise to prevent crossing edges.\n   *\n   * @param originalPoints The points to order.\n   * @return The list of ordered points anti-clockwise.\n   */\n  private List<GeoPoint> orderPoints(List<GeoPoint> originalPoints){\n    List<GeoPoint> points = new ArrayList<>(originalPoints.size());\n    points.addAll(originalPoints); //make a copy\n    GeoPoint lPoint = getPointLefLon(points);\n    points.remove(lPoint);\n    GeoPoint rPoint = getPointRigthLon(points);\n    points.remove(rPoint);\n    List<GeoPoint> APoints = getPointsBelowAndSort(points, lPoint);\n    List<GeoPoint> BPoints = getPointsAboveAndsort(points, lPoint);\n    List<GeoPoint> result = new ArrayList<>();\n    result.add(lPoint);\n    result.addAll(APoints);\n    result.add(rPoint);\n    result.addAll(BPoints);\n    return result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["6dca5d16e35ab133abbc5315111c2da4fa70bfcd"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"685bd38810c206c93e9058f3c2cfa9827c086c27","date":1505751821,"type":1,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/RandomGeo3dShapeGenerator#orderPoints(List[GeoPoint]).mjava","pathOld":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/RandomGeoShapeGenerator#orderPoints(List[GeoPoint]).mjava","sourceNew":"  /**\n   * Method that orders a lit of points anti-clock-wise to prevent crossing edges.\n   *\n   * @param originalPoints The points to order.\n   * @return The list of ordered points anti-clockwise.\n   */\n  private List<GeoPoint> orderPoints(List<GeoPoint> originalPoints){\n    List<GeoPoint> points = new ArrayList<>(originalPoints.size());\n    points.addAll(originalPoints); //make a copy\n    GeoPoint lPoint = getPointLefLon(points);\n    points.remove(lPoint);\n    GeoPoint rPoint = getPointRigthLon(points);\n    points.remove(rPoint);\n    List<GeoPoint> APoints = getPointsBelowAndSort(points, lPoint);\n    List<GeoPoint> BPoints = getPointsAboveAndsort(points, lPoint);\n    List<GeoPoint> result = new ArrayList<>();\n    result.add(lPoint);\n    result.addAll(APoints);\n    result.add(rPoint);\n    result.addAll(BPoints);\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Method that orders a lit of points anti-clock-wise to prevent crossing edges.\n   *\n   * @param originalPoints The points to order.\n   * @return The list of ordered points anti-clockwise.\n   */\n  private List<GeoPoint> orderPoints(List<GeoPoint> originalPoints){\n    List<GeoPoint> points = new ArrayList<>(originalPoints.size());\n    points.addAll(originalPoints); //make a copy\n    GeoPoint lPoint = getPointLefLon(points);\n    points.remove(lPoint);\n    GeoPoint rPoint = getPointRigthLon(points);\n    points.remove(rPoint);\n    List<GeoPoint> APoints = getPointsBelowAndSort(points, lPoint);\n    List<GeoPoint> BPoints = getPointsAboveAndsort(points, lPoint);\n    List<GeoPoint> result = new ArrayList<>();\n    result.add(lPoint);\n    result.addAll(APoints);\n    result.add(rPoint);\n    result.addAll(BPoints);\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6dca5d16e35ab133abbc5315111c2da4fa70bfcd","date":1508874170,"type":3,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/RandomGeo3dShapeGenerator#orderPoints(List[GeoPoint]).mjava","pathOld":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/RandomGeo3dShapeGenerator#orderPoints(List[GeoPoint]).mjava","sourceNew":"  /**\n   * Method that orders a lit of points anti-clock-wise to prevent crossing edges.\n   *\n   * @param points The points to order.\n   * @return The list of ordered points anti-clockwise.\n   */\n  private List<GeoPoint> orderPoints(List<GeoPoint> points) {\n    double x = 0;\n    double y = 0;\n    double z = 0;\n    //get center of mass\n    for (GeoPoint point : points) {\n      x += point.x;\n      y += point.y;\n      z += point.z;\n    }\n    Map<Double, GeoPoint> pointWithAngle = new HashMap<>();\n    //get angle respect center of mass\n    for (GeoPoint point : points) {\n      GeoPoint center = new GeoPoint(x / points.size(), y / points.size(), z / points.size());\n      double cs = Math.sin(center.getLatitude()) * Math.sin(point.getLatitude())\n          + Math.cos(center.getLatitude()) * Math.cos(point.getLatitude())  * Math.cos(point.getLongitude() - center.getLongitude());\n      double posAng = Math.atan2(Math.cos(center.getLatitude()) * Math.cos(point.getLatitude()) * Math.sin(point.getLongitude() - center.getLongitude()),\n          Math.sin(point.getLatitude()) - Math.sin(center.getLatitude())*cs);\n      pointWithAngle.put(posAng, point);\n    }\n    //order points\n    List<Double> angles = new ArrayList<>(pointWithAngle.keySet());\n    Collections.sort(angles);\n    Collections.reverse(angles);\n    List<GeoPoint> orderedPoints = new ArrayList<>();\n    for (Double d : angles) {\n      orderedPoints.add(pointWithAngle.get(d));\n    }\n    return orderedPoints;\n  }\n\n","sourceOld":"  /**\n   * Method that orders a lit of points anti-clock-wise to prevent crossing edges.\n   *\n   * @param originalPoints The points to order.\n   * @return The list of ordered points anti-clockwise.\n   */\n  private List<GeoPoint> orderPoints(List<GeoPoint> originalPoints){\n    List<GeoPoint> points = new ArrayList<>(originalPoints.size());\n    points.addAll(originalPoints); //make a copy\n    GeoPoint lPoint = getPointLefLon(points);\n    points.remove(lPoint);\n    GeoPoint rPoint = getPointRigthLon(points);\n    points.remove(rPoint);\n    List<GeoPoint> APoints = getPointsBelowAndSort(points, lPoint);\n    List<GeoPoint> BPoints = getPointsAboveAndsort(points, lPoint);\n    List<GeoPoint> result = new ArrayList<>();\n    result.add(lPoint);\n    result.addAll(APoints);\n    result.add(rPoint);\n    result.addAll(BPoints);\n    return result;\n  }\n\n","bugFix":["f215583134d6d66410e3c48b32282e3eb9d5fcde"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9704af09948af9b8902f98647c8ea8c315ace4c","date":1523357833,"type":3,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/RandomGeo3dShapeGenerator#orderPoints(List[GeoPoint]).mjava","pathOld":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/RandomGeo3dShapeGenerator#orderPoints(List[GeoPoint]).mjava","sourceNew":"  /**\n   * Method that orders a lit of points anti-clock-wise to prevent crossing edges.\n   *\n   * @param points The points to order.\n   * @return The list of ordered points anti-clockwise.\n   */\n  protected List<GeoPoint> orderPoints(List<GeoPoint> points) {\n    double x = 0;\n    double y = 0;\n    double z = 0;\n    //get center of mass\n    for (GeoPoint point : points) {\n      x += point.x;\n      y += point.y;\n      z += point.z;\n    }\n    Map<Double, GeoPoint> pointWithAngle = new HashMap<>();\n    //get angle respect center of mass\n    for (GeoPoint point : points) {\n      GeoPoint center = new GeoPoint(x / points.size(), y / points.size(), z / points.size());\n      double cs = Math.sin(center.getLatitude()) * Math.sin(point.getLatitude())\n          + Math.cos(center.getLatitude()) * Math.cos(point.getLatitude())  * Math.cos(point.getLongitude() - center.getLongitude());\n      double posAng = Math.atan2(Math.cos(center.getLatitude()) * Math.cos(point.getLatitude()) * Math.sin(point.getLongitude() - center.getLongitude()),\n          Math.sin(point.getLatitude()) - Math.sin(center.getLatitude())*cs);\n      pointWithAngle.put(posAng, point);\n    }\n    //order points\n    List<Double> angles = new ArrayList<>(pointWithAngle.keySet());\n    Collections.sort(angles);\n    Collections.reverse(angles);\n    List<GeoPoint> orderedPoints = new ArrayList<>();\n    for (Double d : angles) {\n      orderedPoints.add(pointWithAngle.get(d));\n    }\n    return orderedPoints;\n  }\n\n","sourceOld":"  /**\n   * Method that orders a lit of points anti-clock-wise to prevent crossing edges.\n   *\n   * @param points The points to order.\n   * @return The list of ordered points anti-clockwise.\n   */\n  private List<GeoPoint> orderPoints(List<GeoPoint> points) {\n    double x = 0;\n    double y = 0;\n    double z = 0;\n    //get center of mass\n    for (GeoPoint point : points) {\n      x += point.x;\n      y += point.y;\n      z += point.z;\n    }\n    Map<Double, GeoPoint> pointWithAngle = new HashMap<>();\n    //get angle respect center of mass\n    for (GeoPoint point : points) {\n      GeoPoint center = new GeoPoint(x / points.size(), y / points.size(), z / points.size());\n      double cs = Math.sin(center.getLatitude()) * Math.sin(point.getLatitude())\n          + Math.cos(center.getLatitude()) * Math.cos(point.getLatitude())  * Math.cos(point.getLongitude() - center.getLongitude());\n      double posAng = Math.atan2(Math.cos(center.getLatitude()) * Math.cos(point.getLatitude()) * Math.sin(point.getLongitude() - center.getLongitude()),\n          Math.sin(point.getLatitude()) - Math.sin(center.getLatitude())*cs);\n      pointWithAngle.put(posAng, point);\n    }\n    //order points\n    List<Double> angles = new ArrayList<>(pointWithAngle.keySet());\n    Collections.sort(angles);\n    Collections.reverse(angles);\n    List<GeoPoint> orderedPoints = new ArrayList<>();\n    for (Double d : angles) {\n      orderedPoints.add(pointWithAngle.get(d));\n    }\n    return orderedPoints;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"685bd38810c206c93e9058f3c2cfa9827c086c27":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f215583134d6d66410e3c48b32282e3eb9d5fcde"],"6dca5d16e35ab133abbc5315111c2da4fa70bfcd":["f215583134d6d66410e3c48b32282e3eb9d5fcde"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e9704af09948af9b8902f98647c8ea8c315ace4c":["6dca5d16e35ab133abbc5315111c2da4fa70bfcd"],"f215583134d6d66410e3c48b32282e3eb9d5fcde":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e9704af09948af9b8902f98647c8ea8c315ace4c"]},"commit2Childs":{"685bd38810c206c93e9058f3c2cfa9827c086c27":[],"6dca5d16e35ab133abbc5315111c2da4fa70bfcd":["e9704af09948af9b8902f98647c8ea8c315ace4c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["685bd38810c206c93e9058f3c2cfa9827c086c27","f215583134d6d66410e3c48b32282e3eb9d5fcde"],"f215583134d6d66410e3c48b32282e3eb9d5fcde":["685bd38810c206c93e9058f3c2cfa9827c086c27","6dca5d16e35ab133abbc5315111c2da4fa70bfcd"],"e9704af09948af9b8902f98647c8ea8c315ace4c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["685bd38810c206c93e9058f3c2cfa9827c086c27","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}