{"path":"solr/core/src/test/org/apache/solr/core/DirectoryFactoryTest#assertDataHome(String,String,DirectoryFactory,CoreContainer,String...).mjava","commits":[{"id":"e43d618262c616423ed79f226c5c49f708999b06","date":1540815794,"type":1,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/DirectoryFactoryTest#assertDataHome(String,String,DirectoryFactory,CoreContainer,String...).mjava","pathOld":"solr/core/src/test/org/apache/solr/core/DirectoryFactoryTest#assertDataHome(String,String,RAMDirectoryFactory,CoreContainer,String...).mjava","sourceNew":"  private void assertDataHome(String expected, String instanceDir, DirectoryFactory df, CoreContainer cc, String... properties) throws IOException {\n    String dataHome = df.getDataHome(new CoreDescriptor(\"core_name\", Paths.get(instanceDir), cc.containerProperties, cc.isZooKeeperAware(), properties));\n    assertEquals(Paths.get(expected).toAbsolutePath(), Paths.get(dataHome).toAbsolutePath());\n  }\n\n","sourceOld":"  private void assertDataHome(String expected, String instanceDir, RAMDirectoryFactory rdf, CoreContainer cc, String... properties) throws IOException {\n    String dataHome = rdf.getDataHome(new CoreDescriptor(\"core_name\", Paths.get(instanceDir), cc.containerProperties, cc.isZooKeeperAware(), properties));\n    assertEquals(Paths.get(expected).toAbsolutePath(), Paths.get(dataHome).toAbsolutePath());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e4fb176991e13ab85dfe62dceeb287dde115745","date":1579630717,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/DirectoryFactoryTest#assertDataHome(String,String,DirectoryFactory,CoreContainer,String...).mjava","pathOld":"solr/core/src/test/org/apache/solr/core/DirectoryFactoryTest#assertDataHome(String,String,DirectoryFactory,CoreContainer,String...).mjava","sourceNew":"  private void assertDataHome(String expected, String instanceDir, DirectoryFactory df, CoreContainer cc, String... properties) throws IOException {\n    String dataHome = df.getDataHome(new CoreDescriptor(\"core_name\", Paths.get(instanceDir), cc, properties));\n    assertEquals(Paths.get(expected).toAbsolutePath(), Paths.get(dataHome).toAbsolutePath());\n  }\n\n","sourceOld":"  private void assertDataHome(String expected, String instanceDir, DirectoryFactory df, CoreContainer cc, String... properties) throws IOException {\n    String dataHome = df.getDataHome(new CoreDescriptor(\"core_name\", Paths.get(instanceDir), cc.containerProperties, cc.isZooKeeperAware(), properties));\n    assertEquals(Paths.get(expected).toAbsolutePath(), Paths.get(dataHome).toAbsolutePath());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dfc068060fd93e9c7417d1271ca797dc90496f67","date":1592771305,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/DirectoryFactoryTest#assertDataHome(String,String,DirectoryFactory,CoreContainer,String...).mjava","pathOld":"solr/core/src/test/org/apache/solr/core/DirectoryFactoryTest#assertDataHome(String,String,DirectoryFactory,CoreContainer,String...).mjava","sourceNew":"  private void assertDataHome(String expected, String instanceDir, DirectoryFactory df, CoreContainer cc, String... properties) throws IOException {\n    String dataHome = df.getDataHome(\n            new CoreDescriptor(\"core_name\", Paths.get(instanceDir).toAbsolutePath(), cc, properties));\n    assertEquals(Paths.get(expected).toAbsolutePath(), Paths.get(dataHome).toAbsolutePath());\n  }\n\n","sourceOld":"  private void assertDataHome(String expected, String instanceDir, DirectoryFactory df, CoreContainer cc, String... properties) throws IOException {\n    String dataHome = df.getDataHome(new CoreDescriptor(\"core_name\", Paths.get(instanceDir), cc, properties));\n    assertEquals(Paths.get(expected).toAbsolutePath(), Paths.get(dataHome).toAbsolutePath());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3e4fb176991e13ab85dfe62dceeb287dde115745":["e43d618262c616423ed79f226c5c49f708999b06"],"dfc068060fd93e9c7417d1271ca797dc90496f67":["3e4fb176991e13ab85dfe62dceeb287dde115745"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e43d618262c616423ed79f226c5c49f708999b06":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["dfc068060fd93e9c7417d1271ca797dc90496f67"]},"commit2Childs":{"3e4fb176991e13ab85dfe62dceeb287dde115745":["dfc068060fd93e9c7417d1271ca797dc90496f67"],"dfc068060fd93e9c7417d1271ca797dc90496f67":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e43d618262c616423ed79f226c5c49f708999b06"],"e43d618262c616423ed79f226c5c49f708999b06":["3e4fb176991e13ab85dfe62dceeb287dde115745"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}