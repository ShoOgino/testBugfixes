{"path":"src/java/org/apache/lucene/search/TopFieldCollector#collect(int,float).mjava","commits":[{"id":"63bc3238545c6012bd44f5d294077997f236bc4e","date":1233087321,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/TopFieldCollector#collect(int,float).mjava","pathOld":"/dev/null","sourceNew":"  // javadoc inherited\n  public void collect(int doc, float score) {\n    if (score > 0.0f) {\n\n      maxScore = Math.max(maxScore, score);\n      totalHits++;\n\n      // TODO: one optimization we could do is to pre-fill\n      // the queue with sentinel value that guaranteed to\n      // always compare lower than a real hit; this would\n      // save having to check queueFull on each insert\n\n      if (queueFull) {\n\n        if (numComparators == 1) {\n          // Common case\n\n          // Fastmatch: return if this hit is not competitive\n          final int cmp = reverseMul1 * comparator1.compareBottom(doc, score);\n          if (cmp < 0) {\n            // Definitely not competitive\n            return;\n          } else if (cmp == 0 && doc + currentDocBase > bottom.docID) {\n            // Definitely not competitive\n            return;\n          }\n\n          // This hit is competitive -- replace bottom\n          // element in queue & adjustTop\n          comparator1.copy(bottom.slot, doc, score);\n\n          updateBottom(doc, score);\n\n          comparator1.setBottom(bottom.slot);\n\n        } else {\n\n          // Fastmatch: return if this hit is not competitive\n          for(int i=0;;i++) {\n            final int c = reverseMul[i] * comparators[i].compareBottom(doc, score);\n            if (c < 0) {\n              // Definitely not competitive\n              return;\n            } else if (c > 0) {\n              // Definitely competitive\n              break;\n            } else if (i == numComparators-1) {\n              // This is the equals case.\n              if (doc + currentDocBase > bottom.docID) {\n                // Definitely not competitive\n                return;\n              } else {\n                break;\n              }\n            }\n          }\n\n          // This hit is competitive -- replace bottom\n          // element in queue & adjustTop\n          for (int i = 0; i < numComparators; i++) {\n            comparators[i].copy(bottom.slot, doc, score);\n          }\n\n          updateBottom(doc, score);\n\n          for(int i=0;i<numComparators;i++) {\n            comparators[i].setBottom(bottom.slot);\n          }\n        }\n      } else {\n        // Startup transient: queue hasn't gathered numHits\n        // yet\n\n        final int slot = totalHits-1;\n        // Copy hit into queue\n        if (numComparators == 1) {\n          // Common case\n          comparator1.copy(slot, doc, score);\n          add(slot, doc, score);\n          if (queueFull) {\n            comparator1.setBottom(bottom.slot);\n          }\n\n        } else {\n          for (int i = 0; i < numComparators; i++) {\n            comparators[i].copy(slot, doc, score);\n          }\n          add(slot, doc, score);\n          if (queueFull) {\n            for(int i=0;i<numComparators;i++) {\n              comparators[i].setBottom(bottom.slot);\n            }\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"64714133cf5ec732e3bbceee63351bb9af0117dc","date":1239647636,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/search/TopFieldCollector#collect(int,float).mjava","sourceNew":null,"sourceOld":"  // javadoc inherited\n  public void collect(int doc, float score) {\n    if (score > 0.0f) {\n\n      maxScore = Math.max(maxScore, score);\n      totalHits++;\n\n      // TODO: one optimization we could do is to pre-fill\n      // the queue with sentinel value that guaranteed to\n      // always compare lower than a real hit; this would\n      // save having to check queueFull on each insert\n\n      if (queueFull) {\n\n        if (numComparators == 1) {\n          // Common case\n\n          // Fastmatch: return if this hit is not competitive\n          final int cmp = reverseMul1 * comparator1.compareBottom(doc, score);\n          if (cmp < 0) {\n            // Definitely not competitive\n            return;\n          } else if (cmp == 0 && doc + currentDocBase > bottom.docID) {\n            // Definitely not competitive\n            return;\n          }\n\n          // This hit is competitive -- replace bottom\n          // element in queue & adjustTop\n          comparator1.copy(bottom.slot, doc, score);\n\n          updateBottom(doc, score);\n\n          comparator1.setBottom(bottom.slot);\n\n        } else {\n\n          // Fastmatch: return if this hit is not competitive\n          for(int i=0;;i++) {\n            final int c = reverseMul[i] * comparators[i].compareBottom(doc, score);\n            if (c < 0) {\n              // Definitely not competitive\n              return;\n            } else if (c > 0) {\n              // Definitely competitive\n              break;\n            } else if (i == numComparators-1) {\n              // This is the equals case.\n              if (doc + currentDocBase > bottom.docID) {\n                // Definitely not competitive\n                return;\n              } else {\n                break;\n              }\n            }\n          }\n\n          // This hit is competitive -- replace bottom\n          // element in queue & adjustTop\n          for (int i = 0; i < numComparators; i++) {\n            comparators[i].copy(bottom.slot, doc, score);\n          }\n\n          updateBottom(doc, score);\n\n          for(int i=0;i<numComparators;i++) {\n            comparators[i].setBottom(bottom.slot);\n          }\n        }\n      } else {\n        // Startup transient: queue hasn't gathered numHits\n        // yet\n\n        final int slot = totalHits-1;\n        // Copy hit into queue\n        if (numComparators == 1) {\n          // Common case\n          comparator1.copy(slot, doc, score);\n          add(slot, doc, score);\n          if (queueFull) {\n            comparator1.setBottom(bottom.slot);\n          }\n\n        } else {\n          for (int i = 0; i < numComparators; i++) {\n            comparators[i].copy(slot, doc, score);\n          }\n          add(slot, doc, score);\n          if (queueFull) {\n            for(int i=0;i<numComparators;i++) {\n              comparators[i].setBottom(bottom.slot);\n            }\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"64714133cf5ec732e3bbceee63351bb9af0117dc":["63bc3238545c6012bd44f5d294077997f236bc4e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"63bc3238545c6012bd44f5d294077997f236bc4e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["64714133cf5ec732e3bbceee63351bb9af0117dc"]},"commit2Childs":{"64714133cf5ec732e3bbceee63351bb9af0117dc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["63bc3238545c6012bd44f5d294077997f236bc4e"],"63bc3238545c6012bd44f5d294077997f236bc4e":["64714133cf5ec732e3bbceee63351bb9af0117dc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}