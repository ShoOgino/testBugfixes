{"path":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#commit().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#commit().mjava","pathOld":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#commit().mjava","sourceNew":"  /**\n   * Calling commit() ensures that all the categories written so far are\n   * visible to a reader that is opened (or reopened) after that call.\n   * When the index is closed(), commit() is also implicitly done.\n   * See {@link TaxonomyWriter#commit()}\n   */ \n  @Override\n  public synchronized void commit() throws CorruptIndexException, IOException {\n    ensureOpen();\n    indexWriter.commit(combinedCommitData(null));\n    refreshReader();\n  }\n\n","sourceOld":"  /**\n   * Calling commit() ensures that all the categories written so far are\n   * visible to a reader that is opened (or reopened) after that call.\n   * When the index is closed(), commit() is also implicitly done.\n   * See {@link TaxonomyWriter#commit()}\n   */ \n  @Override\n  public synchronized void commit() throws CorruptIndexException, IOException {\n    ensureOpen();\n    indexWriter.commit(combinedCommitData(null));\n    refreshReader();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"119bc02554a192b2954b73d79389ec441257b624","date":1337232699,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#commit().mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#commit().mjava","sourceNew":"  /**\n   * Calling commit() ensures that all the categories written so far are\n   * visible to a reader that is opened (or reopened) after that call.\n   * When the index is closed(), commit() is also implicitly done.\n   * See {@link TaxonomyWriter#commit()}\n   */ \n  @Override\n  public synchronized void commit() throws CorruptIndexException, IOException {\n    ensureOpen();\n    indexWriter.commit(combinedCommitData(null));\n    refreshInternalReader();\n  }\n\n","sourceOld":"  /**\n   * Calling commit() ensures that all the categories written so far are\n   * visible to a reader that is opened (or reopened) after that call.\n   * When the index is closed(), commit() is also implicitly done.\n   * See {@link TaxonomyWriter#commit()}\n   */ \n  @Override\n  public synchronized void commit() throws CorruptIndexException, IOException {\n    ensureOpen();\n    indexWriter.commit(combinedCommitData(null));\n    refreshReader();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ef0d8a69209261514c5739c770bba706c2308450","date":1337607597,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#commit().mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#commit().mjava","sourceNew":"  /**\n   * Calling commit() ensures that all the categories written so far are\n   * visible to a reader that is opened (or reopened) after that call.\n   * When the index is closed(), commit() is also implicitly done.\n   * See {@link TaxonomyWriter#commit()}\n   */ \n  @Override\n  public synchronized void commit() throws CorruptIndexException, IOException {\n    ensureOpen();\n    indexWriter.commit(combinedCommitData(null));\n    refreshInternalReader();\n  }\n\n","sourceOld":"  /**\n   * Calling commit() ensures that all the categories written so far are\n   * visible to a reader that is opened (or reopened) after that call.\n   * When the index is closed(), commit() is also implicitly done.\n   * See {@link TaxonomyWriter#commit()}\n   */ \n  @Override\n  public synchronized void commit() throws CorruptIndexException, IOException {\n    ensureOpen();\n    indexWriter.commit(combinedCommitData(null));\n    refreshReader();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b7a1bc6030c258e47d63eff3455a2b1bbf32683","date":1339494023,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#commit().mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#commit().mjava","sourceNew":"  /**\n   * Calling commit() ensures that all the categories written so far are\n   * visible to a reader that is opened (or reopened) after that call.\n   * When the index is closed(), commit() is also implicitly done.\n   * See {@link TaxonomyWriter#commit()}\n   */ \n  @Override\n  public synchronized void commit() throws CorruptIndexException, IOException {\n    ensureOpen();\n    indexWriter.commit(combinedCommitData(null));\n  }\n\n","sourceOld":"  /**\n   * Calling commit() ensures that all the categories written so far are\n   * visible to a reader that is opened (or reopened) after that call.\n   * When the index is closed(), commit() is also implicitly done.\n   * See {@link TaxonomyWriter#commit()}\n   */ \n  @Override\n  public synchronized void commit() throws CorruptIndexException, IOException {\n    ensureOpen();\n    indexWriter.commit(combinedCommitData(null));\n    refreshInternalReader();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#commit().mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#commit().mjava","sourceNew":"  /**\n   * Calling commit() ensures that all the categories written so far are\n   * visible to a reader that is opened (or reopened) after that call.\n   * When the index is closed(), commit() is also implicitly done.\n   * See {@link TaxonomyWriter#commit()}\n   */ \n  @Override\n  public synchronized void commit() throws IOException {\n    ensureOpen();\n    indexWriter.commit(combinedCommitData(null));\n  }\n\n","sourceOld":"  /**\n   * Calling commit() ensures that all the categories written so far are\n   * visible to a reader that is opened (or reopened) after that call.\n   * When the index is closed(), commit() is also implicitly done.\n   * See {@link TaxonomyWriter#commit()}\n   */ \n  @Override\n  public synchronized void commit() throws CorruptIndexException, IOException {\n    ensureOpen();\n    indexWriter.commit(combinedCommitData(null));\n  }\n\n","bugFix":["89f15687f60bd49cd3d9de427e85c17fd9397d61"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#commit().mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#commit().mjava","sourceNew":"  /**\n   * Calling commit() ensures that all the categories written so far are\n   * visible to a reader that is opened (or reopened) after that call.\n   * When the index is closed(), commit() is also implicitly done.\n   * See {@link TaxonomyWriter#commit()}\n   */ \n  @Override\n  public synchronized void commit() throws IOException {\n    ensureOpen();\n    indexWriter.commit(combinedCommitData(null));\n  }\n\n","sourceOld":"  /**\n   * Calling commit() ensures that all the categories written so far are\n   * visible to a reader that is opened (or reopened) after that call.\n   * When the index is closed(), commit() is also implicitly done.\n   * See {@link TaxonomyWriter#commit()}\n   */ \n  @Override\n  public synchronized void commit() throws CorruptIndexException, IOException {\n    ensureOpen();\n    indexWriter.commit(combinedCommitData(null));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b47e1512544568a22b82c96169d466fae8a4b79e","date":1354519309,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#commit().mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#commit().mjava","sourceNew":"  @Override\n  public synchronized void commit() throws IOException {\n    ensureOpen();\n    indexWriter.setCommitData(combinedCommitData(indexWriter.getCommitData()));\n    indexWriter.commit();\n  }\n\n","sourceOld":"  /**\n   * Calling commit() ensures that all the categories written so far are\n   * visible to a reader that is opened (or reopened) after that call.\n   * When the index is closed(), commit() is also implicitly done.\n   * See {@link TaxonomyWriter#commit()}\n   */ \n  @Override\n  public synchronized void commit() throws IOException {\n    ensureOpen();\n    indexWriter.commit(combinedCommitData(null));\n  }\n\n","bugFix":null,"bugIntro":["d8a0be2353a06d1424e3eeafc4c72455204ce92d"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#commit().mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#commit().mjava","sourceNew":"  @Override\n  public synchronized void commit() throws IOException {\n    ensureOpen();\n    indexWriter.setCommitData(combinedCommitData(indexWriter.getCommitData()));\n    indexWriter.commit();\n  }\n\n","sourceOld":"  /**\n   * Calling commit() ensures that all the categories written so far are\n   * visible to a reader that is opened (or reopened) after that call.\n   * When the index is closed(), commit() is also implicitly done.\n   * See {@link TaxonomyWriter#commit()}\n   */ \n  @Override\n  public synchronized void commit() throws IOException {\n    ensureOpen();\n    indexWriter.commit(combinedCommitData(null));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d8a0be2353a06d1424e3eeafc4c72455204ce92d","date":1367553170,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#commit().mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#commit().mjava","sourceNew":"  @Override\n  public synchronized void commit() throws IOException {\n    ensureOpen();\n    // LUCENE-4972: if we always call setCommitData, we create empty commits\n    String epochStr = indexWriter.getCommitData().get(INDEX_EPOCH);\n    if (epochStr == null || Long.parseLong(epochStr, 16) != indexEpoch) {\n      indexWriter.setCommitData(combinedCommitData(indexWriter.getCommitData()));\n    }\n    indexWriter.commit();\n  }\n\n","sourceOld":"  @Override\n  public synchronized void commit() throws IOException {\n    ensureOpen();\n    indexWriter.setCommitData(combinedCommitData(indexWriter.getCommitData()));\n    indexWriter.commit();\n  }\n\n","bugFix":["b47e1512544568a22b82c96169d466fae8a4b79e"],"bugIntro":["71e1a70f18d64b93db3ef618e606d6df5062f747"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"23a29a4862e38cc3b9bff14a888901c7c878885b","date":1464135767,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#commit().mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#commit().mjava","sourceNew":"  @Override\n  public synchronized long commit() throws IOException {\n    ensureOpen();\n    // LUCENE-4972: if we always call setCommitData, we create empty commits\n    String epochStr = indexWriter.getCommitData().get(INDEX_EPOCH);\n    if (epochStr == null || Long.parseLong(epochStr, 16) != indexEpoch) {\n      indexWriter.setCommitData(combinedCommitData(indexWriter.getCommitData()));\n    }\n    return indexWriter.commit();\n  }\n\n","sourceOld":"  @Override\n  public synchronized void commit() throws IOException {\n    ensureOpen();\n    // LUCENE-4972: if we always call setCommitData, we create empty commits\n    String epochStr = indexWriter.getCommitData().get(INDEX_EPOCH);\n    if (epochStr == null || Long.parseLong(epochStr, 16) != indexEpoch) {\n      indexWriter.setCommitData(combinedCommitData(indexWriter.getCommitData()));\n    }\n    indexWriter.commit();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6483e4260c08168709c02238ae083a51519a28dd","date":1465117546,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#commit().mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#commit().mjava","sourceNew":"  @Override\n  public synchronized long commit() throws IOException {\n    ensureOpen();\n    // LUCENE-4972: if we always call setCommitData, we create empty commits\n    String epochStr = indexWriter.getCommitData().get(INDEX_EPOCH);\n    if (epochStr == null || Long.parseLong(epochStr, 16) != indexEpoch) {\n      indexWriter.setCommitData(combinedCommitData(indexWriter.getCommitData()));\n    }\n    return indexWriter.commit();\n  }\n\n","sourceOld":"  @Override\n  public synchronized void commit() throws IOException {\n    ensureOpen();\n    // LUCENE-4972: if we always call setCommitData, we create empty commits\n    String epochStr = indexWriter.getCommitData().get(INDEX_EPOCH);\n    if (epochStr == null || Long.parseLong(epochStr, 16) != indexEpoch) {\n      indexWriter.setCommitData(combinedCommitData(indexWriter.getCommitData()));\n    }\n    indexWriter.commit();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"191128ac5b85671b1671e2c857437694283b6ebf","date":1465297861,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#commit().mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#commit().mjava","sourceNew":"  @Override\n  public synchronized long commit() throws IOException {\n    ensureOpen();\n    // LUCENE-4972: if we always call setCommitData, we create empty commits\n    String epochStr = indexWriter.getCommitData().get(INDEX_EPOCH);\n    if (epochStr == null || Long.parseLong(epochStr, 16) != indexEpoch) {\n      indexWriter.setCommitData(combinedCommitData(indexWriter.getCommitData()));\n    }\n    return indexWriter.commit();\n  }\n\n","sourceOld":"  @Override\n  public synchronized void commit() throws IOException {\n    ensureOpen();\n    // LUCENE-4972: if we always call setCommitData, we create empty commits\n    String epochStr = indexWriter.getCommitData().get(INDEX_EPOCH);\n    if (epochStr == null || Long.parseLong(epochStr, 16) != indexEpoch) {\n      indexWriter.setCommitData(combinedCommitData(indexWriter.getCommitData()));\n    }\n    indexWriter.commit();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"71e1a70f18d64b93db3ef618e606d6df5062f747","date":1466156390,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#commit().mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#commit().mjava","sourceNew":"  @Override\n  public synchronized long commit() throws IOException {\n    ensureOpen();\n    // LUCENE-4972: if we always call setCommitData, we create empty commits\n\n    Map<String,String> data = new HashMap<>();\n    Iterable<Map.Entry<String,String>> iter = indexWriter.getLiveCommitData();\n    if (iter != null) {\n      for(Map.Entry<String,String> ent : iter) {\n        data.put(ent.getKey(), ent.getValue());\n      }\n    }\n    \n    String epochStr = data.get(INDEX_EPOCH);\n    if (epochStr == null || Long.parseLong(epochStr, 16) != indexEpoch) {\n      indexWriter.setLiveCommitData(combinedCommitData(indexWriter.getLiveCommitData()));\n    }\n    return indexWriter.commit();\n  }\n\n","sourceOld":"  @Override\n  public synchronized long commit() throws IOException {\n    ensureOpen();\n    // LUCENE-4972: if we always call setCommitData, we create empty commits\n    String epochStr = indexWriter.getCommitData().get(INDEX_EPOCH);\n    if (epochStr == null || Long.parseLong(epochStr, 16) != indexEpoch) {\n      indexWriter.setCommitData(combinedCommitData(indexWriter.getCommitData()));\n    }\n    return indexWriter.commit();\n  }\n\n","bugFix":["d8a0be2353a06d1424e3eeafc4c72455204ce92d"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#commit().mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#commit().mjava","sourceNew":"  @Override\n  public synchronized long commit() throws IOException {\n    ensureOpen();\n    // LUCENE-4972: if we always call setCommitData, we create empty commits\n\n    Map<String,String> data = new HashMap<>();\n    Iterable<Map.Entry<String,String>> iter = indexWriter.getLiveCommitData();\n    if (iter != null) {\n      for(Map.Entry<String,String> ent : iter) {\n        data.put(ent.getKey(), ent.getValue());\n      }\n    }\n    \n    String epochStr = data.get(INDEX_EPOCH);\n    if (epochStr == null || Long.parseLong(epochStr, 16) != indexEpoch) {\n      indexWriter.setLiveCommitData(combinedCommitData(indexWriter.getLiveCommitData()));\n    }\n    return indexWriter.commit();\n  }\n\n","sourceOld":"  @Override\n  public synchronized void commit() throws IOException {\n    ensureOpen();\n    // LUCENE-4972: if we always call setCommitData, we create empty commits\n    String epochStr = indexWriter.getCommitData().get(INDEX_EPOCH);\n    if (epochStr == null || Long.parseLong(epochStr, 16) != indexEpoch) {\n      indexWriter.setCommitData(combinedCommitData(indexWriter.getCommitData()));\n    }\n    indexWriter.commit();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d8a0be2353a06d1424e3eeafc4c72455204ce92d":["b47e1512544568a22b82c96169d466fae8a4b79e"],"71e1a70f18d64b93db3ef618e606d6df5062f747":["191128ac5b85671b1671e2c857437694283b6ebf"],"119bc02554a192b2954b73d79389ec441257b624":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"407687e67faf6e1f02a211ca078d8e3eed631027":["4d3e8520fd031bab31fd0e4d480e55958bc45efe","b47e1512544568a22b82c96169d466fae8a4b79e"],"23a29a4862e38cc3b9bff14a888901c7c878885b":["d8a0be2353a06d1424e3eeafc4c72455204ce92d"],"6483e4260c08168709c02238ae083a51519a28dd":["d8a0be2353a06d1424e3eeafc4c72455204ce92d","23a29a4862e38cc3b9bff14a888901c7c878885b"],"191128ac5b85671b1671e2c857437694283b6ebf":["d8a0be2353a06d1424e3eeafc4c72455204ce92d","6483e4260c08168709c02238ae083a51519a28dd"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["d8a0be2353a06d1424e3eeafc4c72455204ce92d","71e1a70f18d64b93db3ef618e606d6df5062f747"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["8b7a1bc6030c258e47d63eff3455a2b1bbf32683","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8b7a1bc6030c258e47d63eff3455a2b1bbf32683":["119bc02554a192b2954b73d79389ec441257b624"],"b47e1512544568a22b82c96169d466fae8a4b79e":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["8b7a1bc6030c258e47d63eff3455a2b1bbf32683"],"ef0d8a69209261514c5739c770bba706c2308450":["b89678825b68eccaf09e6ab71675fc0b0af1e099","119bc02554a192b2954b73d79389ec441257b624"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["71e1a70f18d64b93db3ef618e606d6df5062f747"]},"commit2Childs":{"d8a0be2353a06d1424e3eeafc4c72455204ce92d":["23a29a4862e38cc3b9bff14a888901c7c878885b","6483e4260c08168709c02238ae083a51519a28dd","191128ac5b85671b1671e2c857437694283b6ebf","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"71e1a70f18d64b93db3ef618e606d6df5062f747":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"119bc02554a192b2954b73d79389ec441257b624":["8b7a1bc6030c258e47d63eff3455a2b1bbf32683","ef0d8a69209261514c5739c770bba706c2308450"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"23a29a4862e38cc3b9bff14a888901c7c878885b":["6483e4260c08168709c02238ae083a51519a28dd"],"6483e4260c08168709c02238ae083a51519a28dd":["191128ac5b85671b1671e2c857437694283b6ebf"],"191128ac5b85671b1671e2c857437694283b6ebf":["71e1a70f18d64b93db3ef618e606d6df5062f747"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["119bc02554a192b2954b73d79389ec441257b624","ef0d8a69209261514c5739c770bba706c2308450"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"8b7a1bc6030c258e47d63eff3455a2b1bbf32683":["fe33227f6805edab2036cbb80645cc4e2d1fa424","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"b47e1512544568a22b82c96169d466fae8a4b79e":["d8a0be2353a06d1424e3eeafc4c72455204ce92d","407687e67faf6e1f02a211ca078d8e3eed631027"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["407687e67faf6e1f02a211ca078d8e3eed631027","fe33227f6805edab2036cbb80645cc4e2d1fa424","b47e1512544568a22b82c96169d466fae8a4b79e"],"ef0d8a69209261514c5739c770bba706c2308450":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["407687e67faf6e1f02a211ca078d8e3eed631027","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","fe33227f6805edab2036cbb80645cc4e2d1fa424","ef0d8a69209261514c5739c770bba706c2308450","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}