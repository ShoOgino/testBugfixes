{"path":"solr/core/src/java/org/apache/solr/servlet/RateLimitManager#handleRequest(HttpServletRequest).mjava","commits":[{"id":"c99002731351c8c955238845b0038682148eec53","date":1596830766,"type":0,"author":"Atri Sharma","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/RateLimitManager#handleRequest(HttpServletRequest).mjava","pathOld":"/dev/null","sourceNew":"  // Handles an incoming request. The main orchestration code path, this method will\n  // identify which (if any) rate limiter can handle this request. Internal requests will not be\n  // rate limited\n  // Returns true if request is accepted for processing, false if it should be rejected\n  public boolean handleRequest(HttpServletRequest request) throws InterruptedException {\n    String requestContext = request.getHeader(SOLR_REQUEST_CONTEXT_PARAM);\n    String typeOfRequest = request.getHeader(SOLR_REQUEST_TYPE_PARAM);\n\n    if (typeOfRequest == null) {\n      // Cannot determine if this request should be throttled\n      return true;\n    }\n\n    // Do not throttle internal requests\n    if (requestContext != null && requestContext.equals(SolrRequest.SolrClientContext.SERVER.toString())) {\n      return true;\n    }\n\n    RequestRateLimiter requestRateLimiter = requestRateLimiterMap.get(typeOfRequest);\n\n    if (requestRateLimiter == null) {\n      // No request rate limiter for this request type\n      return true;\n    }\n\n    RequestRateLimiter.SlotMetadata result = requestRateLimiter.handleRequest();\n\n    if (result != null) {\n      // Can be the case if request rate limiter is disabled\n      if (result.isReleasable()) {\n        activeRequestsMap.put(request, result);\n      }\n      return true;\n    }\n\n    RequestRateLimiter.SlotMetadata slotMetadata = trySlotBorrowing(typeOfRequest);\n\n    if (slotMetadata != null) {\n      activeRequestsMap.put(request, slotMetadata);\n      return true;\n    }\n\n    return false;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c99002731351c8c955238845b0038682148eec53":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c99002731351c8c955238845b0038682148eec53"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c99002731351c8c955238845b0038682148eec53"],"c99002731351c8c955238845b0038682148eec53":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}