{"path":"solr/core/src/java/org/apache/solr/handler/admin/ConfigSetsHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","commits":[{"id":"2209af2c265d2258ec4b29c8cc78622d36994a15","date":1440641916,"type":0,"author":"Gregory Chanan","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/ConfigSetsHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    if (coreContainer == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Core container instance missing\");\n    }\n\n    // Make sure that the core is ZKAware\n    if(!coreContainer.isZooKeeperAware()) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"Solr instance is not running in SolrCloud mode.\");\n    }\n\n    // Pick the action\n    SolrParams params = req.getParams();\n    String a = params.get(ConfigSetParams.ACTION);\n    if (a != null) {\n      ConfigSetAction action = ConfigSetAction.get(a);\n      if (action == null)\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown action: \" + a);\n      ConfigSetOperation operation = ConfigSetOperation.get(action);\n      log.info(\"Invoked ConfigSet Action :{} with params {} \", action.toLower(), req.getParamString());\n      Map<String, Object> result = operation.call(req, rsp, this);\n      if (result != null) {\n        // We need to differentiate between collection and configsets actions since they currently\n        // use the same underlying queue.\n        result.put(QUEUE_OPERATION, CONFIGSETS_ACTION_PREFIX + operation.action.toLower());\n        ZkNodeProps props = new ZkNodeProps(result);\n        handleResponse(operation.action.toLower(), props, rsp, DEFAULT_ZK_TIMEOUT);\n      }\n    } else {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"action is a required param\");\n    }\n\n    rsp.setHttpCaching(false);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fcf710a8fcd590cf55c855d422c7a10fce3e6117","date":1485842253,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/ConfigSetsHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/ConfigSetsHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    if (coreContainer == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Core container instance missing\");\n    }\n\n    // Make sure that the core is ZKAware\n    if(!coreContainer.isZooKeeperAware()) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"Solr instance is not running in SolrCloud mode.\");\n    }\n\n    // Pick the action\n    SolrParams params = req.getParams();\n    String a = params.get(ConfigSetParams.ACTION);\n    if (a != null) {\n      ConfigSetAction action = ConfigSetAction.get(a);\n      if (action == null)\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown action: \" + a);\n      invokeAction(req, rsp, action);\n    } else {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"action is a required param\");\n    }\n\n    rsp.setHttpCaching(false);\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    if (coreContainer == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Core container instance missing\");\n    }\n\n    // Make sure that the core is ZKAware\n    if(!coreContainer.isZooKeeperAware()) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"Solr instance is not running in SolrCloud mode.\");\n    }\n\n    // Pick the action\n    SolrParams params = req.getParams();\n    String a = params.get(ConfigSetParams.ACTION);\n    if (a != null) {\n      ConfigSetAction action = ConfigSetAction.get(a);\n      if (action == null)\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown action: \" + a);\n      ConfigSetOperation operation = ConfigSetOperation.get(action);\n      log.info(\"Invoked ConfigSet Action :{} with params {} \", action.toLower(), req.getParamString());\n      Map<String, Object> result = operation.call(req, rsp, this);\n      if (result != null) {\n        // We need to differentiate between collection and configsets actions since they currently\n        // use the same underlying queue.\n        result.put(QUEUE_OPERATION, CONFIGSETS_ACTION_PREFIX + operation.action.toLower());\n        ZkNodeProps props = new ZkNodeProps(result);\n        handleResponse(operation.action.toLower(), props, rsp, DEFAULT_ZK_TIMEOUT);\n      }\n    } else {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"action is a required param\");\n    }\n\n    rsp.setHttpCaching(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c3523a0ab04c3002eee3896c75ea5f10f388bcc","date":1485968422,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/ConfigSetsHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/ConfigSetsHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    if (coreContainer == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Core container instance missing\");\n    }\n\n    // Make sure that the core is ZKAware\n    if(!coreContainer.isZooKeeperAware()) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"Solr instance is not running in SolrCloud mode.\");\n    }\n\n    // Pick the action\n    SolrParams params = req.getParams();\n    String a = params.get(ConfigSetParams.ACTION);\n    if (a != null) {\n      ConfigSetAction action = ConfigSetAction.get(a);\n      if (action == null)\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown action: \" + a);\n      invokeAction(req, rsp, action);\n    } else {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"action is a required param\");\n    }\n\n    rsp.setHttpCaching(false);\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    if (coreContainer == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Core container instance missing\");\n    }\n\n    // Make sure that the core is ZKAware\n    if(!coreContainer.isZooKeeperAware()) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"Solr instance is not running in SolrCloud mode.\");\n    }\n\n    // Pick the action\n    SolrParams params = req.getParams();\n    String a = params.get(ConfigSetParams.ACTION);\n    if (a != null) {\n      ConfigSetAction action = ConfigSetAction.get(a);\n      if (action == null)\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown action: \" + a);\n      ConfigSetOperation operation = ConfigSetOperation.get(action);\n      log.info(\"Invoked ConfigSet Action :{} with params {} \", action.toLower(), req.getParamString());\n      Map<String, Object> result = operation.call(req, rsp, this);\n      if (result != null) {\n        // We need to differentiate between collection and configsets actions since they currently\n        // use the same underlying queue.\n        result.put(QUEUE_OPERATION, CONFIGSETS_ACTION_PREFIX + operation.action.toLower());\n        ZkNodeProps props = new ZkNodeProps(result);\n        handleResponse(operation.action.toLower(), props, rsp, DEFAULT_ZK_TIMEOUT);\n      }\n    } else {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"action is a required param\");\n    }\n\n    rsp.setHttpCaching(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"917e62f3497c83634a13edd833e8e21dd6cc6496","date":1490728467,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/ConfigSetsHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/ConfigSetsHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    if (coreContainer == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Core container instance missing\");\n    }\n\n    // Make sure that the core is ZKAware\n    if(!coreContainer.isZooKeeperAware()) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"Solr instance is not running in SolrCloud mode.\");\n    }\n\n    // Pick the action\n    SolrParams params = req.getParams();\n    String a = params.get(ConfigSetParams.ACTION);\n    if (a != null) {\n      ConfigSetAction action = ConfigSetAction.get(a);\n      if (action == null)\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown action: \" + a);\n      if (action == ConfigSetAction.UPLOAD) {\n        handleConfigUploadRequest(req, rsp);\n        return;\n      }\n      invokeAction(req, rsp, action);\n    } else {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"action is a required param\");\n    }\n\n    rsp.setHttpCaching(false);\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    if (coreContainer == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Core container instance missing\");\n    }\n\n    // Make sure that the core is ZKAware\n    if(!coreContainer.isZooKeeperAware()) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"Solr instance is not running in SolrCloud mode.\");\n    }\n\n    // Pick the action\n    SolrParams params = req.getParams();\n    String a = params.get(ConfigSetParams.ACTION);\n    if (a != null) {\n      ConfigSetAction action = ConfigSetAction.get(a);\n      if (action == null)\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown action: \" + a);\n      invokeAction(req, rsp, action);\n    } else {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"action is a required param\");\n    }\n\n    rsp.setHttpCaching(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3732e34f27916e98704736cc6924a34fffca249a","date":1490873946,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/ConfigSetsHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/ConfigSetsHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    if (coreContainer == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Core container instance missing\");\n    }\n\n    // Make sure that the core is ZKAware\n    if(!coreContainer.isZooKeeperAware()) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"Solr instance is not running in SolrCloud mode.\");\n    }\n\n    // Pick the action\n    SolrParams params = req.getParams();\n    String a = params.get(ConfigSetParams.ACTION);\n    if (a != null) {\n      ConfigSetAction action = ConfigSetAction.get(a);\n      if (action == null)\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown action: \" + a);\n      if (action == ConfigSetAction.UPLOAD) {\n        handleConfigUploadRequest(req, rsp);\n        return;\n      }\n      invokeAction(req, rsp, action);\n    } else {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"action is a required param\");\n    }\n\n    rsp.setHttpCaching(false);\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    if (coreContainer == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Core container instance missing\");\n    }\n\n    // Make sure that the core is ZKAware\n    if(!coreContainer.isZooKeeperAware()) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"Solr instance is not running in SolrCloud mode.\");\n    }\n\n    // Pick the action\n    SolrParams params = req.getParams();\n    String a = params.get(ConfigSetParams.ACTION);\n    if (a != null) {\n      ConfigSetAction action = ConfigSetAction.get(a);\n      if (action == null)\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown action: \" + a);\n      invokeAction(req, rsp, action);\n    } else {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"action is a required param\");\n    }\n\n    rsp.setHttpCaching(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e29778bfb04e9115636606cb8f74e23ecba15c7b","date":1536084166,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/ConfigSetsHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/ConfigSetsHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    if (coreContainer == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Core container instance missing\");\n    }\n\n    // Make sure that the core is ZKAware\n    if (!coreContainer.isZooKeeperAware()) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"Solr instance is not running in SolrCloud mode.\");\n    }\n\n    // Pick the action\n    SolrParams params = req.getParams();\n    String a = params.get(ConfigSetParams.ACTION);\n    if (a != null) {\n      ConfigSetAction action = ConfigSetAction.get(a);\n      if (action == null)\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown action: \" + a);\n      if (action == ConfigSetAction.UPLOAD) {\n        handleConfigUploadRequest(req, rsp);\n        return;\n      }\n      invokeAction(req, rsp, action);\n    } else {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"action is a required param\");\n    }\n\n    rsp.setHttpCaching(false);\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    if (coreContainer == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Core container instance missing\");\n    }\n\n    // Make sure that the core is ZKAware\n    if(!coreContainer.isZooKeeperAware()) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"Solr instance is not running in SolrCloud mode.\");\n    }\n\n    // Pick the action\n    SolrParams params = req.getParams();\n    String a = params.get(ConfigSetParams.ACTION);\n    if (a != null) {\n      ConfigSetAction action = ConfigSetAction.get(a);\n      if (action == null)\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown action: \" + a);\n      if (action == ConfigSetAction.UPLOAD) {\n        handleConfigUploadRequest(req, rsp);\n        return;\n      }\n      invokeAction(req, rsp, action);\n    } else {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"action is a required param\");\n    }\n\n    rsp.setHttpCaching(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1852cb03cf4922477072449dd9de2fab588d1adb","date":1600862151,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/ConfigSetsHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/ConfigSetsHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    checkErrors();\n\n    // Pick the action\n    SolrParams params = req.getParams();\n    String a = params.get(ConfigSetParams.ACTION);\n    if (a != null) {\n      ConfigSetAction action = ConfigSetAction.get(a);\n      if (action == null)\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown action: \" + a);\n      if (action == ConfigSetAction.UPLOAD) {\n        handleConfigUploadRequest(req, rsp);\n        return;\n      }\n      invokeAction(req, rsp, action);\n    } else {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"action is a required param\");\n    }\n\n    rsp.setHttpCaching(false);\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    if (coreContainer == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Core container instance missing\");\n    }\n\n    // Make sure that the core is ZKAware\n    if (!coreContainer.isZooKeeperAware()) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"Solr instance is not running in SolrCloud mode.\");\n    }\n\n    // Pick the action\n    SolrParams params = req.getParams();\n    String a = params.get(ConfigSetParams.ACTION);\n    if (a != null) {\n      ConfigSetAction action = ConfigSetAction.get(a);\n      if (action == null)\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown action: \" + a);\n      if (action == ConfigSetAction.UPLOAD) {\n        handleConfigUploadRequest(req, rsp);\n        return;\n      }\n      invokeAction(req, rsp, action);\n    } else {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"action is a required param\");\n    }\n\n    rsp.setHttpCaching(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"917e62f3497c83634a13edd833e8e21dd6cc6496":["fcf710a8fcd590cf55c855d422c7a10fce3e6117"],"2209af2c265d2258ec4b29c8cc78622d36994a15":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e29778bfb04e9115636606cb8f74e23ecba15c7b":["917e62f3497c83634a13edd833e8e21dd6cc6496"],"fcf710a8fcd590cf55c855d422c7a10fce3e6117":["2209af2c265d2258ec4b29c8cc78622d36994a15"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":["2209af2c265d2258ec4b29c8cc78622d36994a15","fcf710a8fcd590cf55c855d422c7a10fce3e6117"],"3732e34f27916e98704736cc6924a34fffca249a":["fcf710a8fcd590cf55c855d422c7a10fce3e6117"],"1852cb03cf4922477072449dd9de2fab588d1adb":["e29778bfb04e9115636606cb8f74e23ecba15c7b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1852cb03cf4922477072449dd9de2fab588d1adb"]},"commit2Childs":{"917e62f3497c83634a13edd833e8e21dd6cc6496":["e29778bfb04e9115636606cb8f74e23ecba15c7b"],"2209af2c265d2258ec4b29c8cc78622d36994a15":["fcf710a8fcd590cf55c855d422c7a10fce3e6117","7c3523a0ab04c3002eee3896c75ea5f10f388bcc"],"e29778bfb04e9115636606cb8f74e23ecba15c7b":["1852cb03cf4922477072449dd9de2fab588d1adb"],"fcf710a8fcd590cf55c855d422c7a10fce3e6117":["917e62f3497c83634a13edd833e8e21dd6cc6496","7c3523a0ab04c3002eee3896c75ea5f10f388bcc","3732e34f27916e98704736cc6924a34fffca249a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2209af2c265d2258ec4b29c8cc78622d36994a15"],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":[],"3732e34f27916e98704736cc6924a34fffca249a":[],"1852cb03cf4922477072449dd9de2fab588d1adb":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c3523a0ab04c3002eee3896c75ea5f10f388bcc","3732e34f27916e98704736cc6924a34fffca249a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}