{"path":"lucene/test-framework/src/java/org/apache/lucene/index/BaseNormsFormatTestCase#testSparseAllZeros().mjava","commits":[{"id":"7f3090f7e0cab5b1f5acf12d21f31f00fe74a262","date":1475755647,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseNormsFormatTestCase#testSparseAllZeros().mjava","pathOld":"/dev/null","sourceNew":"  public void testSparseAllZeros() throws Exception {\n    assumeTrue(\"Requires sparse norms support\", codecSupportsSparsity());\n    int iterations = atLeast(1);\n    for (int i = 0; i < iterations; i++) {\n      doTestNormsVersusDocValues(random().nextDouble(), new LongProducer() {\n        @Override\n        long next() {\n          return 0;\n        }\n      });\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseNormsFormatTestCase#testSparseAllZeros().mjava","pathOld":"/dev/null","sourceNew":"  public void testSparseAllZeros() throws Exception {\n    assumeTrue(\"Requires sparse norms support\", codecSupportsSparsity());\n    int iterations = atLeast(1);\n    for (int i = 0; i < iterations; i++) {\n      doTestNormsVersusDocValues(random().nextDouble(), new LongProducer() {\n        @Override\n        long next() {\n          return 0;\n        }\n      });\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"11134e449dabe11d6d0ff6a564d84b82cbe93722","date":1477299083,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseNormsFormatTestCase#testSparseAllZeros().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseNormsFormatTestCase#testSparseAllZeros().mjava","sourceNew":"  public void testSparseAllZeros() throws Exception {\n    assumeTrue(\"Requires sparse norms support\", codecSupportsSparsity());\n    int iterations = atLeast(1);\n    for (int i = 0; i < iterations; i++) {\n      doTestNormsVersusDocValues(random().nextDouble(), new LongSupplier() {\n        @Override\n        public long getAsLong() {\n          return 0;\n        }\n      });\n    }\n  }\n\n","sourceOld":"  public void testSparseAllZeros() throws Exception {\n    assumeTrue(\"Requires sparse norms support\", codecSupportsSparsity());\n    int iterations = atLeast(1);\n    for (int i = 0; i < iterations; i++) {\n      doTestNormsVersusDocValues(random().nextDouble(), new LongProducer() {\n        @Override\n        long next() {\n          return 0;\n        }\n      });\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2714c85633b642b29871cf5ff8d17d3ba7bfd76","date":1477307753,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseNormsFormatTestCase#testSparseAllZeros().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseNormsFormatTestCase#testSparseAllZeros().mjava","sourceNew":"  public void testSparseAllZeros() throws Exception {\n    assumeTrue(\"Requires sparse norms support\", codecSupportsSparsity());\n    int iterations = atLeast(1);\n    for (int i = 0; i < iterations; i++) {\n      doTestNormsVersusDocValues(random().nextDouble(), new LongSupplier() {\n        @Override\n        public long getAsLong() {\n          return 0;\n        }\n      });\n    }\n  }\n\n","sourceOld":"  public void testSparseAllZeros() throws Exception {\n    assumeTrue(\"Requires sparse norms support\", codecSupportsSparsity());\n    int iterations = atLeast(1);\n    for (int i = 0; i < iterations; i++) {\n      doTestNormsVersusDocValues(random().nextDouble(), new LongProducer() {\n        @Override\n        long next() {\n          return 0;\n        }\n      });\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"80d0e6d59ae23f4a6f30eaf40bfb40742300287f","date":1477598926,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseNormsFormatTestCase#testSparseAllZeros().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseNormsFormatTestCase#testSparseAllZeros().mjava","sourceNew":"  public void testSparseAllZeros() throws Exception {\n    assumeTrue(\"Requires sparse norms support\", codecSupportsSparsity());\n    int iterations = atLeast(1);\n    for (int i = 0; i < iterations; i++) {\n      doTestNormsVersusDocValues(random().nextDouble(), new LongSupplier() {\n        @Override\n        public long getAsLong() {\n          return 0;\n        }\n      });\n    }\n  }\n\n","sourceOld":"  public void testSparseAllZeros() throws Exception {\n    assumeTrue(\"Requires sparse norms support\", codecSupportsSparsity());\n    int iterations = atLeast(1);\n    for (int i = 0; i < iterations; i++) {\n      doTestNormsVersusDocValues(random().nextDouble(), new LongProducer() {\n        @Override\n        long next() {\n          return 0;\n        }\n      });\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7f3090f7e0cab5b1f5acf12d21f31f00fe74a262":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"11134e449dabe11d6d0ff6a564d84b82cbe93722":["7f3090f7e0cab5b1f5acf12d21f31f00fe74a262"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d2714c85633b642b29871cf5ff8d17d3ba7bfd76"],"d2714c85633b642b29871cf5ff8d17d3ba7bfd76":["7f3090f7e0cab5b1f5acf12d21f31f00fe74a262","11134e449dabe11d6d0ff6a564d84b82cbe93722"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7f3090f7e0cab5b1f5acf12d21f31f00fe74a262"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d2714c85633b642b29871cf5ff8d17d3ba7bfd76"]},"commit2Childs":{"7f3090f7e0cab5b1f5acf12d21f31f00fe74a262":["11134e449dabe11d6d0ff6a564d84b82cbe93722","d2714c85633b642b29871cf5ff8d17d3ba7bfd76","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"11134e449dabe11d6d0ff6a564d84b82cbe93722":["d2714c85633b642b29871cf5ff8d17d3ba7bfd76"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7f3090f7e0cab5b1f5acf12d21f31f00fe74a262","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":[],"d2714c85633b642b29871cf5ff8d17d3ba7bfd76":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}