{"path":"lucene/src/test/org/apache/lucene/search/spans/TestBasics#testComplexSpanChecks().mjava","commits":[{"id":"498e168d849b4dbc097ac7b31f6db170d6f55725","date":1286807836,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestBasics#testComplexSpanChecks().mjava","pathOld":"/dev/null","sourceNew":"  public void testComplexSpanChecks() throws Exception {\n    SpanTermQuery one = new SpanTermQuery(new Term(\"field\", \"one\"));\n    SpanTermQuery thous = new SpanTermQuery(new Term(\"field\", \"thousand\"));\n    //should be one position in between\n    SpanTermQuery hundred = new SpanTermQuery(new Term(\"field\", \"hundred\"));\n    SpanTermQuery three = new SpanTermQuery(new Term(\"field\", \"three\"));\n\n    SpanNearQuery oneThous = new SpanNearQuery(new SpanQuery[]{one, thous}, 0, true);\n    SpanNearQuery hundredThree = new SpanNearQuery(new SpanQuery[]{hundred, three}, 0, true);\n    SpanNearQuery oneThousHunThree = new SpanNearQuery(new SpanQuery[]{oneThous, hundredThree}, 1, true);\n    SpanQuery query;\n    //this one's too small\n    query = new SpanPositionRangeQuery(oneThousHunThree, 1, 2);\n    checkHits(query, new int[]{});\n    //this one's just right\n    query = new SpanPositionRangeQuery(oneThousHunThree, 0, 6);\n    checkHits(query, new int[]{1103, 1203,1303,1403,1503,1603,1703,1803,1903});\n\n    Collection<byte[]> payloads = new ArrayList<byte[]>();\n    Payload pay = new Payload((\"pos: \" + 3896).getBytes());\n    Payload pay2 = new Payload((\"pos: \" + 3897).getBytes());\n    Payload pay3 = new Payload((\"pos: \" + 3899).getBytes());\n    Payload pay4 = new Payload((\"pos: \" + 3900).getBytes());\n    payloads.add(pay.getData());\n    payloads.add(pay2.getData());\n    payloads.add(pay3.getData());\n    payloads.add(pay4.getData());\n    query = new SpanNearPayloadCheckQuery(oneThousHunThree, payloads);\n    checkHits(query, new int[]{1103});\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["9ad966686d8994b78aff2375da1a0583bf0cf5ee","7740a3e0858e88aaf6b09efe52e35c04a0d717f7"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7740a3e0858e88aaf6b09efe52e35c04a0d717f7","date":1286877329,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestBasics#testComplexSpanChecks().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestBasics#testComplexSpanChecks().mjava","sourceNew":"  public void testComplexSpanChecks() throws Exception {\n    SpanTermQuery one = new SpanTermQuery(new Term(\"field\", \"one\"));\n    SpanTermQuery thous = new SpanTermQuery(new Term(\"field\", \"thousand\"));\n    //should be one position in between\n    SpanTermQuery hundred = new SpanTermQuery(new Term(\"field\", \"hundred\"));\n    SpanTermQuery three = new SpanTermQuery(new Term(\"field\", \"three\"));\n\n    SpanNearQuery oneThous = new SpanNearQuery(new SpanQuery[]{one, thous}, 0, true);\n    SpanNearQuery hundredThree = new SpanNearQuery(new SpanQuery[]{hundred, three}, 0, true);\n    SpanNearQuery oneThousHunThree = new SpanNearQuery(new SpanQuery[]{oneThous, hundredThree}, 1, true);\n    SpanQuery query;\n    //this one's too small\n    query = new SpanPositionRangeQuery(oneThousHunThree, 1, 2);\n    checkHits(query, new int[]{});\n    //this one's just right\n    query = new SpanPositionRangeQuery(oneThousHunThree, 0, 6);\n    checkHits(query, new int[]{1103, 1203,1303,1403,1503,1603,1703,1803,1903});\n\n    Collection<byte[]> payloads = new ArrayList<byte[]>();\n    Payload pay = new Payload((\"pos: \" + 0).getBytes());\n    Payload pay2 = new Payload((\"pos: \" + 1).getBytes());\n    Payload pay3 = new Payload((\"pos: \" + 3).getBytes());\n    Payload pay4 = new Payload((\"pos: \" + 4).getBytes());\n    payloads.add(pay.getData());\n    payloads.add(pay2.getData());\n    payloads.add(pay3.getData());\n    payloads.add(pay4.getData());\n    query = new SpanNearPayloadCheckQuery(oneThousHunThree, payloads);\n    checkHits(query, new int[]{1103, 1203,1303,1403,1503,1603,1703,1803,1903});\n\n  }\n\n","sourceOld":"  public void testComplexSpanChecks() throws Exception {\n    SpanTermQuery one = new SpanTermQuery(new Term(\"field\", \"one\"));\n    SpanTermQuery thous = new SpanTermQuery(new Term(\"field\", \"thousand\"));\n    //should be one position in between\n    SpanTermQuery hundred = new SpanTermQuery(new Term(\"field\", \"hundred\"));\n    SpanTermQuery three = new SpanTermQuery(new Term(\"field\", \"three\"));\n\n    SpanNearQuery oneThous = new SpanNearQuery(new SpanQuery[]{one, thous}, 0, true);\n    SpanNearQuery hundredThree = new SpanNearQuery(new SpanQuery[]{hundred, three}, 0, true);\n    SpanNearQuery oneThousHunThree = new SpanNearQuery(new SpanQuery[]{oneThous, hundredThree}, 1, true);\n    SpanQuery query;\n    //this one's too small\n    query = new SpanPositionRangeQuery(oneThousHunThree, 1, 2);\n    checkHits(query, new int[]{});\n    //this one's just right\n    query = new SpanPositionRangeQuery(oneThousHunThree, 0, 6);\n    checkHits(query, new int[]{1103, 1203,1303,1403,1503,1603,1703,1803,1903});\n\n    Collection<byte[]> payloads = new ArrayList<byte[]>();\n    Payload pay = new Payload((\"pos: \" + 3896).getBytes());\n    Payload pay2 = new Payload((\"pos: \" + 3897).getBytes());\n    Payload pay3 = new Payload((\"pos: \" + 3899).getBytes());\n    Payload pay4 = new Payload((\"pos: \" + 3900).getBytes());\n    payloads.add(pay.getData());\n    payloads.add(pay2.getData());\n    payloads.add(pay3.getData());\n    payloads.add(pay4.getData());\n    query = new SpanNearPayloadCheckQuery(oneThousHunThree, payloads);\n    checkHits(query, new int[]{1103});\n\n  }\n\n","bugFix":["498e168d849b4dbc097ac7b31f6db170d6f55725"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4ecea1664e8617d82eca3b8055a3c37cb4da8511","date":1287578668,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestBasics#testComplexSpanChecks().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestBasics#testComplexSpanChecks().mjava","sourceNew":"  public void testComplexSpanChecks() throws Exception {\n    SpanTermQuery one = new SpanTermQuery(new Term(\"field\", \"one\"));\n    SpanTermQuery thous = new SpanTermQuery(new Term(\"field\", \"thousand\"));\n    //should be one position in between\n    SpanTermQuery hundred = new SpanTermQuery(new Term(\"field\", \"hundred\"));\n    SpanTermQuery three = new SpanTermQuery(new Term(\"field\", \"three\"));\n\n    SpanNearQuery oneThous = new SpanNearQuery(new SpanQuery[]{one, thous}, 0, true);\n    SpanNearQuery hundredThree = new SpanNearQuery(new SpanQuery[]{hundred, three}, 0, true);\n    SpanNearQuery oneThousHunThree = new SpanNearQuery(new SpanQuery[]{oneThous, hundredThree}, 1, true);\n    SpanQuery query;\n    //this one's too small\n    query = new SpanPositionRangeQuery(oneThousHunThree, 1, 2);\n    checkHits(query, new int[]{});\n    //this one's just right\n    query = new SpanPositionRangeQuery(oneThousHunThree, 0, 6);\n    checkHits(query, new int[]{1103, 1203,1303,1403,1503,1603,1703,1803,1903});\n\n    Collection<byte[]> payloads = new ArrayList<byte[]>();\n    Payload pay = new Payload((\"pos: \" + 0).getBytes());\n    Payload pay2 = new Payload((\"pos: \" + 1).getBytes());\n    Payload pay3 = new Payload((\"pos: \" + 3).getBytes());\n    Payload pay4 = new Payload((\"pos: \" + 4).getBytes());\n    payloads.add(pay.getData());\n    payloads.add(pay2.getData());\n    payloads.add(pay3.getData());\n    payloads.add(pay4.getData());\n    query = new SpanNearPayloadCheckQuery(oneThousHunThree, payloads);\n    checkHits(query, new int[]{1103, 1203,1303,1403,1503,1603,1703,1803,1903});\n\n  }\n\n","sourceOld":"  public void testComplexSpanChecks() throws Exception {\n    SpanTermQuery one = new SpanTermQuery(new Term(\"field\", \"one\"));\n    SpanTermQuery thous = new SpanTermQuery(new Term(\"field\", \"thousand\"));\n    //should be one position in between\n    SpanTermQuery hundred = new SpanTermQuery(new Term(\"field\", \"hundred\"));\n    SpanTermQuery three = new SpanTermQuery(new Term(\"field\", \"three\"));\n\n    SpanNearQuery oneThous = new SpanNearQuery(new SpanQuery[]{one, thous}, 0, true);\n    SpanNearQuery hundredThree = new SpanNearQuery(new SpanQuery[]{hundred, three}, 0, true);\n    SpanNearQuery oneThousHunThree = new SpanNearQuery(new SpanQuery[]{oneThous, hundredThree}, 1, true);\n    SpanQuery query;\n    //this one's too small\n    query = new SpanPositionRangeQuery(oneThousHunThree, 1, 2);\n    checkHits(query, new int[]{});\n    //this one's just right\n    query = new SpanPositionRangeQuery(oneThousHunThree, 0, 6);\n    checkHits(query, new int[]{1103, 1203,1303,1403,1503,1603,1703,1803,1903});\n\n    Collection<byte[]> payloads = new ArrayList<byte[]>();\n    Payload pay = new Payload((\"pos: \" + 3896).getBytes());\n    Payload pay2 = new Payload((\"pos: \" + 3897).getBytes());\n    Payload pay3 = new Payload((\"pos: \" + 3899).getBytes());\n    Payload pay4 = new Payload((\"pos: \" + 3900).getBytes());\n    payloads.add(pay.getData());\n    payloads.add(pay2.getData());\n    payloads.add(pay3.getData());\n    payloads.add(pay4.getData());\n    query = new SpanNearPayloadCheckQuery(oneThousHunThree, payloads);\n    checkHits(query, new int[]{1103});\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestBasics#testComplexSpanChecks().mjava","pathOld":"/dev/null","sourceNew":"  public void testComplexSpanChecks() throws Exception {\n    SpanTermQuery one = new SpanTermQuery(new Term(\"field\", \"one\"));\n    SpanTermQuery thous = new SpanTermQuery(new Term(\"field\", \"thousand\"));\n    //should be one position in between\n    SpanTermQuery hundred = new SpanTermQuery(new Term(\"field\", \"hundred\"));\n    SpanTermQuery three = new SpanTermQuery(new Term(\"field\", \"three\"));\n\n    SpanNearQuery oneThous = new SpanNearQuery(new SpanQuery[]{one, thous}, 0, true);\n    SpanNearQuery hundredThree = new SpanNearQuery(new SpanQuery[]{hundred, three}, 0, true);\n    SpanNearQuery oneThousHunThree = new SpanNearQuery(new SpanQuery[]{oneThous, hundredThree}, 1, true);\n    SpanQuery query;\n    //this one's too small\n    query = new SpanPositionRangeQuery(oneThousHunThree, 1, 2);\n    checkHits(query, new int[]{});\n    //this one's just right\n    query = new SpanPositionRangeQuery(oneThousHunThree, 0, 6);\n    checkHits(query, new int[]{1103, 1203,1303,1403,1503,1603,1703,1803,1903});\n\n    Collection<byte[]> payloads = new ArrayList<byte[]>();\n    Payload pay = new Payload((\"pos: \" + 0).getBytes());\n    Payload pay2 = new Payload((\"pos: \" + 1).getBytes());\n    Payload pay3 = new Payload((\"pos: \" + 3).getBytes());\n    Payload pay4 = new Payload((\"pos: \" + 4).getBytes());\n    payloads.add(pay.getData());\n    payloads.add(pay2.getData());\n    payloads.add(pay3.getData());\n    payloads.add(pay4.getData());\n    query = new SpanNearPayloadCheckQuery(oneThousHunThree, payloads);\n    checkHits(query, new int[]{1103, 1203,1303,1403,1503,1603,1703,1803,1903});\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestBasics#testComplexSpanChecks().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestBasics#testComplexSpanChecks().mjava","sourceNew":"  public void testComplexSpanChecks() throws Exception {\n    SpanTermQuery one = new SpanTermQuery(new Term(\"field\", \"one\"));\n    SpanTermQuery thous = new SpanTermQuery(new Term(\"field\", \"thousand\"));\n    //should be one position in between\n    SpanTermQuery hundred = new SpanTermQuery(new Term(\"field\", \"hundred\"));\n    SpanTermQuery three = new SpanTermQuery(new Term(\"field\", \"three\"));\n\n    SpanNearQuery oneThous = new SpanNearQuery(new SpanQuery[]{one, thous}, 0, true);\n    SpanNearQuery hundredThree = new SpanNearQuery(new SpanQuery[]{hundred, three}, 0, true);\n    SpanNearQuery oneThousHunThree = new SpanNearQuery(new SpanQuery[]{oneThous, hundredThree}, 1, true);\n    SpanQuery query;\n    //this one's too small\n    query = new SpanPositionRangeQuery(oneThousHunThree, 1, 2);\n    checkHits(query, new int[]{});\n    //this one's just right\n    query = new SpanPositionRangeQuery(oneThousHunThree, 0, 6);\n    checkHits(query, new int[]{1103, 1203,1303,1403,1503,1603,1703,1803,1903});\n\n    Collection<byte[]> payloads = new ArrayList<byte[]>();\n    Payload pay = new Payload((\"pos: \" + 0).getBytes());\n    Payload pay2 = new Payload((\"pos: \" + 1).getBytes());\n    Payload pay3 = new Payload((\"pos: \" + 3).getBytes());\n    Payload pay4 = new Payload((\"pos: \" + 4).getBytes());\n    payloads.add(pay.getData());\n    payloads.add(pay2.getData());\n    payloads.add(pay3.getData());\n    payloads.add(pay4.getData());\n    query = new SpanNearPayloadCheckQuery(oneThousHunThree, payloads);\n    checkHits(query, new int[]{1103, 1203,1303,1403,1503,1603,1703,1803,1903});\n\n  }\n\n","sourceOld":"  public void testComplexSpanChecks() throws Exception {\n    SpanTermQuery one = new SpanTermQuery(new Term(\"field\", \"one\"));\n    SpanTermQuery thous = new SpanTermQuery(new Term(\"field\", \"thousand\"));\n    //should be one position in between\n    SpanTermQuery hundred = new SpanTermQuery(new Term(\"field\", \"hundred\"));\n    SpanTermQuery three = new SpanTermQuery(new Term(\"field\", \"three\"));\n\n    SpanNearQuery oneThous = new SpanNearQuery(new SpanQuery[]{one, thous}, 0, true);\n    SpanNearQuery hundredThree = new SpanNearQuery(new SpanQuery[]{hundred, three}, 0, true);\n    SpanNearQuery oneThousHunThree = new SpanNearQuery(new SpanQuery[]{oneThous, hundredThree}, 1, true);\n    SpanQuery query;\n    //this one's too small\n    query = new SpanPositionRangeQuery(oneThousHunThree, 1, 2);\n    checkHits(query, new int[]{});\n    //this one's just right\n    query = new SpanPositionRangeQuery(oneThousHunThree, 0, 6);\n    checkHits(query, new int[]{1103, 1203,1303,1403,1503,1603,1703,1803,1903});\n\n    Collection<byte[]> payloads = new ArrayList<byte[]>();\n    Payload pay = new Payload((\"pos: \" + 0).getBytes());\n    Payload pay2 = new Payload((\"pos: \" + 1).getBytes());\n    Payload pay3 = new Payload((\"pos: \" + 3).getBytes());\n    Payload pay4 = new Payload((\"pos: \" + 4).getBytes());\n    payloads.add(pay.getData());\n    payloads.add(pay2.getData());\n    payloads.add(pay3.getData());\n    payloads.add(pay4.getData());\n    query = new SpanNearPayloadCheckQuery(oneThousHunThree, payloads);\n    checkHits(query, new int[]{1103, 1203,1303,1403,1503,1603,1703,1803,1903});\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["7740a3e0858e88aaf6b09efe52e35c04a0d717f7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7740a3e0858e88aaf6b09efe52e35c04a0d717f7"],"498e168d849b4dbc097ac7b31f6db170d6f55725":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":["498e168d849b4dbc097ac7b31f6db170d6f55725","7740a3e0858e88aaf6b09efe52e35c04a0d717f7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"7740a3e0858e88aaf6b09efe52e35c04a0d717f7":["498e168d849b4dbc097ac7b31f6db170d6f55725"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","498e168d849b4dbc097ac7b31f6db170d6f55725"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"498e168d849b4dbc097ac7b31f6db170d6f55725":["4ecea1664e8617d82eca3b8055a3c37cb4da8511","7740a3e0858e88aaf6b09efe52e35c04a0d717f7"],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":[],"7740a3e0858e88aaf6b09efe52e35c04a0d717f7":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","4ecea1664e8617d82eca3b8055a3c37cb4da8511"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","4ecea1664e8617d82eca3b8055a3c37cb4da8511","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}