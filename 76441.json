{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/IndexOfEvaluator#doWork(Object,Object).mjava","commits":[{"id":"17131c75d55e6aebac087f57f6e99f937386ebe9","date":1516221785,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/IndexOfEvaluator#doWork(Object,Object).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Object doWork(Object value1, Object value2) throws IOException {\n    if(!(value1 instanceof List)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for value, expecting an array\",toExpression(constructingFactory), value1.getClass().getSimpleName()));\n    } else {\n      List list = (List)value1;\n      String find = value2.toString().replace(\"\\\"\",\"\");\n      for(int i=0; i<list.size(); i++) {\n        Object o = list.get(i);\n        if(o.toString().equals(find)) {\n          return i;\n        }\n      }\n\n      return -1;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/IndexOfEvaluator#doWork(Object,Object).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Object doWork(Object value1, Object value2) throws IOException {\n    if(!(value1 instanceof List)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for value, expecting an array\",toExpression(constructingFactory), value1.getClass().getSimpleName()));\n    } else {\n      List list = (List)value1;\n      String find = value2.toString().replace(\"\\\"\",\"\");\n      for(int i=0; i<list.size(); i++) {\n        Object o = list.get(i);\n        if(o.toString().equals(find)) {\n          return i;\n        }\n      }\n\n      return -1;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885","date":1591579911,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/IndexOfEvaluator#doWork(Object,Object).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/IndexOfEvaluator#doWork(Object,Object).mjava","sourceNew":"  @Override\n  public Object doWork(Object value1, Object value2) throws IOException {\n    if(!(value1 instanceof List)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for value, expecting an array\",toExpression(constructingFactory), value1.getClass().getSimpleName()));\n    } else {\n      @SuppressWarnings({\"rawtypes\"})\n      List list = (List)value1;\n      String find = value2.toString().replace(\"\\\"\",\"\");\n      for(int i=0; i<list.size(); i++) {\n        Object o = list.get(i);\n        if(o.toString().equals(find)) {\n          return i;\n        }\n      }\n\n      return -1;\n    }\n  }\n\n","sourceOld":"  @Override\n  public Object doWork(Object value1, Object value2) throws IOException {\n    if(!(value1 instanceof List)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for value, expecting an array\",toExpression(constructingFactory), value1.getClass().getSimpleName()));\n    } else {\n      List list = (List)value1;\n      String find = value2.toString().replace(\"\\\"\",\"\");\n      for(int i=0; i<list.size(); i++) {\n        Object o = list.get(i);\n        if(o.toString().equals(find)) {\n          return i;\n        }\n      }\n\n      return -1;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","17131c75d55e6aebac087f57f6e99f937386ebe9"],"df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885":["b94236357aaa22b76c10629851fe4e376e0cea82"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885"],"17131c75d55e6aebac087f57f6e99f937386ebe9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885"],"df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b94236357aaa22b76c10629851fe4e376e0cea82","17131c75d55e6aebac087f57f6e99f937386ebe9"],"17131c75d55e6aebac087f57f6e99f937386ebe9":["b94236357aaa22b76c10629851fe4e376e0cea82"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}