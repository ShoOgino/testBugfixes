{"path":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#assertSame(TermsEnum,BytesRefFSTEnum[#],boolean).mjava","commits":[{"id":"f08557cdb6c60ac7b88a9342c983a20cd236e74f","date":1330954480,"type":1,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#assertSame(TermsEnum,BytesRefFSTEnum[#],boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#assertSame(TermsEnum,BytesRefFSTEnum,boolean).mjava","sourceNew":"  private void assertSame(TermsEnum termsEnum, BytesRefFSTEnum<?> fstEnum, boolean storeOrd) throws Exception {\n    if (termsEnum.term() == null) {\n      assertNull(fstEnum.current());\n    } else {\n      assertNotNull(fstEnum.current());\n      assertEquals(termsEnum.term().utf8ToString() + \" != \" + fstEnum.current().input.utf8ToString(), termsEnum.term(), fstEnum.current().input);\n      if (storeOrd) {\n        // fst stored the ord\n        assertEquals(\"term=\" + termsEnum.term().utf8ToString() + \" \" + termsEnum.term(), termsEnum.ord(), ((Long) fstEnum.current().output).longValue());\n      } else {\n        // fst stored the docFreq\n        assertEquals(\"term=\" + termsEnum.term().utf8ToString() + \" \" + termsEnum.term(), termsEnum.docFreq(), (int) (((Long) fstEnum.current().output).longValue()));\n      }\n    }\n  }\n\n","sourceOld":"  private void assertSame(TermsEnum termsEnum, BytesRefFSTEnum fstEnum, boolean storeOrd) throws Exception {\n    if (termsEnum.term() == null) {\n      assertNull(fstEnum.current());\n    } else {\n      assertNotNull(fstEnum.current());\n      assertEquals(termsEnum.term().utf8ToString() + \" != \" + fstEnum.current().input.utf8ToString(), termsEnum.term(), fstEnum.current().input);\n      if (storeOrd) {\n        // fst stored the ord\n        assertEquals(\"term=\" + termsEnum.term().utf8ToString() + \" \" + termsEnum.term(), termsEnum.ord(), ((Long) fstEnum.current().output).longValue());\n      } else {\n        // fst stored the docFreq\n        assertEquals(\"term=\" + termsEnum.term().utf8ToString() + \" \" + termsEnum.term(), termsEnum.docFreq(), (int) (((Long) fstEnum.current().output).longValue()));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":0,"author":"Ryan McKinley","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#assertSame(TermsEnum,BytesRefFSTEnum[#],boolean).mjava","pathOld":"/dev/null","sourceNew":"  private void assertSame(TermsEnum termsEnum, BytesRefFSTEnum<?> fstEnum, boolean storeOrd) throws Exception {\n    if (termsEnum.term() == null) {\n      assertNull(fstEnum.current());\n    } else {\n      assertNotNull(fstEnum.current());\n      assertEquals(termsEnum.term().utf8ToString() + \" != \" + fstEnum.current().input.utf8ToString(), termsEnum.term(), fstEnum.current().input);\n      if (storeOrd) {\n        // fst stored the ord\n        assertEquals(\"term=\" + termsEnum.term().utf8ToString() + \" \" + termsEnum.term(), termsEnum.ord(), ((Long) fstEnum.current().output).longValue());\n      } else {\n        // fst stored the docFreq\n        assertEquals(\"term=\" + termsEnum.term().utf8ToString() + \" \" + termsEnum.term(), termsEnum.docFreq(), (int) (((Long) fstEnum.current().output).longValue()));\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f08557cdb6c60ac7b88a9342c983a20cd236e74f"],"f08557cdb6c60ac7b88a9342c983a20cd236e74f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f08557cdb6c60ac7b88a9342c983a20cd236e74f"]},"commit2Childs":{"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"f08557cdb6c60ac7b88a9342c983a20cd236e74f":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","f08557cdb6c60ac7b88a9342c983a20cd236e74f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}