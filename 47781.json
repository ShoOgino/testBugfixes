{"path":"solr/core/src/test/org/apache/solr/response/TestRawResponseWriter#testStructuredDataViaBaseWriters().mjava","commits":[{"id":"9272dcea19192a5fb261980a4737677abfcabab3","date":1409771900,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/response/TestRawResponseWriter#testStructuredDataViaBaseWriters().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * When no real ContentStream is specified, each base writer should be used for formatting\n   */\n  public void testStructuredDataViaBaseWriters() throws IOException {\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    // Don't send a ContentStream back, this will fall back to the configured base writer.\n    // But abuse the CONTENT key to ensure writer is also checking type\n    rsp.add(RawResponseWriter.CONTENT, \"test\");\n    rsp.add(\"foo\", \"bar\");\n\n    // check Content-Type against each writer \n    assertEquals(\"application/xml; charset=UTF-8\", writerNoBase.getContentType(req(), rsp));\n    assertEquals(\"application/xml; charset=UTF-8\", writerXmlBase.getContentType(req(), rsp));\n    assertEquals(\"application/json; charset=UTF-8\", writerJsonBase.getContentType(req(), rsp));\n    assertEquals(\"application/octet-stream\",  writerBinBase.getContentType(req(), rsp));\n\n    // check response against each writer\n\n    // xml & none (default behavior same as XML)\n    String xml = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n<response>\\n<str name=\\\"content\\\">test</str><str name=\\\"foo\\\">bar</str>\\n</response>\\n\";\n    StringWriter xmlSout = new StringWriter();\n    writerXmlBase.write(xmlSout, req(), rsp);\n    assertEquals(xml, xmlSout.toString());\n    ByteArrayOutputStream xmlBout = new ByteArrayOutputStream();\n    writerXmlBase.write(xmlBout, req(), rsp);\n    assertEquals(xml, xmlBout.toString(StandardCharsets.UTF_8.toString()));\n    //\n    StringWriter noneSout = new StringWriter();\n    writerNoBase.write(noneSout, req(), rsp);\n    assertEquals(xml, noneSout.toString());\n    ByteArrayOutputStream noneBout = new ByteArrayOutputStream();\n    writerNoBase.write(noneBout, req(), rsp);\n    assertEquals(xml, noneBout.toString(StandardCharsets.UTF_8.toString()));\n\n    // json\n    String json = \"{\\\"content\\\":\\\"test\\\",\\\"foo\\\":\\\"bar\\\"}\\n\";\n    StringWriter jsonSout = new StringWriter();\n    writerJsonBase.write(jsonSout, req(), rsp);\n    assertEquals(json, jsonSout.toString());\n    ByteArrayOutputStream jsonBout = new ByteArrayOutputStream();\n    writerJsonBase.write(jsonBout, req(), rsp);\n    assertEquals(json, jsonBout.toString(StandardCharsets.UTF_8.toString()));\n\n    // javabin\n    ByteArrayOutputStream bytes = new ByteArrayOutputStream();\n    writerBinBase.write(bytes, req(), rsp);\n    BinaryResponseParser parser = new BinaryResponseParser();\n    NamedList<Object> out = parser.processResponse\n      (new ByteArrayInputStream(bytes.toByteArray()), /* encoding irelevent */ null);\n    assertEquals(RawResponseWriter.CONTENT, out.getName(0));\n    assertEquals(\"test\", out.getVal(0));\n    assertEquals(\"foo\", out.getName(1));\n    assertEquals(\"bar\", out.getVal(1));\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0158ced21948b6626f733c1c42c1e18d94449789","date":1462994341,"type":3,"author":"Bartosz Krasi≈Ñski","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/response/TestRawResponseWriter#testStructuredDataViaBaseWriters().mjava","pathOld":"solr/core/src/test/org/apache/solr/response/TestRawResponseWriter#testStructuredDataViaBaseWriters().mjava","sourceNew":"  /**\n   * When no real ContentStream is specified, each base writer should be used for formatting\n   */\n  public void testStructuredDataViaBaseWriters() throws IOException {\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    // Don't send a ContentStream back, this will fall back to the configured base writer.\n    // But abuse the CONTENT key to ensure writer is also checking type\n    rsp.add(RawResponseWriter.CONTENT, \"test\");\n    rsp.add(\"foo\", \"bar\");\n\n    // check Content-Type against each writer \n    assertEquals(\"application/xml; charset=UTF-8\", writerNoBase.getContentType(req(), rsp));\n    assertEquals(\"application/xml; charset=UTF-8\", writerXmlBase.getContentType(req(), rsp));\n    assertEquals(\"application/json; charset=UTF-8\", writerJsonBase.getContentType(req(), rsp));\n    assertEquals(\"application/octet-stream\",  writerBinBase.getContentType(req(), rsp));\n\n    // check response against each writer\n\n    // xml & none (default behavior same as XML)\n    String xml = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n<response>\\n<str name=\\\"content\\\">test</str><str name=\\\"foo\\\">bar</str>\\n</response>\\n\";\n    StringWriter xmlSout = new StringWriter();\n    writerXmlBase.write(xmlSout, req(), rsp);\n    assertEquals(xml, xmlSout.toString());\n    ByteArrayOutputStream xmlBout = new ByteArrayOutputStream();\n    writerXmlBase.write(xmlBout, req(), rsp);\n    assertEquals(xml, xmlBout.toString(StandardCharsets.UTF_8.toString()));\n    //\n    StringWriter noneSout = new StringWriter();\n    writerNoBase.write(noneSout, req(), rsp);\n    assertEquals(xml, noneSout.toString());\n    ByteArrayOutputStream noneBout = new ByteArrayOutputStream();\n    writerNoBase.write(noneBout, req(), rsp);\n    assertEquals(xml, noneBout.toString(StandardCharsets.UTF_8.toString()));\n\n    // json\n    String json = \"{\\\"content\\\":\\\"test\\\",\\\"foo\\\":\\\"bar\\\"}\\n\";\n    StringWriter jsonSout = new StringWriter();\n    writerJsonBase.write(jsonSout, req(), rsp);\n    assertEquals(json, jsonSout.toString());\n    ByteArrayOutputStream jsonBout = new ByteArrayOutputStream();\n    writerJsonBase.write(jsonBout, req(), rsp);\n    assertEquals(json, jsonBout.toString(StandardCharsets.UTF_8.toString()));\n\n    // javabin\n    ByteArrayOutputStream bytes = new ByteArrayOutputStream();\n    writerBinBase.write(bytes, req(), rsp);\n    BinaryResponseParser parser = new BinaryResponseParser();\n    NamedList<Object> out = parser.processResponse\n      (new ByteArrayInputStream(bytes.toByteArray()), /* encoding irrelevant */ null);\n    assertEquals(RawResponseWriter.CONTENT, out.getName(0));\n    assertEquals(\"test\", out.getVal(0));\n    assertEquals(\"foo\", out.getName(1));\n    assertEquals(\"bar\", out.getVal(1));\n\n  }\n\n","sourceOld":"  /**\n   * When no real ContentStream is specified, each base writer should be used for formatting\n   */\n  public void testStructuredDataViaBaseWriters() throws IOException {\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    // Don't send a ContentStream back, this will fall back to the configured base writer.\n    // But abuse the CONTENT key to ensure writer is also checking type\n    rsp.add(RawResponseWriter.CONTENT, \"test\");\n    rsp.add(\"foo\", \"bar\");\n\n    // check Content-Type against each writer \n    assertEquals(\"application/xml; charset=UTF-8\", writerNoBase.getContentType(req(), rsp));\n    assertEquals(\"application/xml; charset=UTF-8\", writerXmlBase.getContentType(req(), rsp));\n    assertEquals(\"application/json; charset=UTF-8\", writerJsonBase.getContentType(req(), rsp));\n    assertEquals(\"application/octet-stream\",  writerBinBase.getContentType(req(), rsp));\n\n    // check response against each writer\n\n    // xml & none (default behavior same as XML)\n    String xml = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n<response>\\n<str name=\\\"content\\\">test</str><str name=\\\"foo\\\">bar</str>\\n</response>\\n\";\n    StringWriter xmlSout = new StringWriter();\n    writerXmlBase.write(xmlSout, req(), rsp);\n    assertEquals(xml, xmlSout.toString());\n    ByteArrayOutputStream xmlBout = new ByteArrayOutputStream();\n    writerXmlBase.write(xmlBout, req(), rsp);\n    assertEquals(xml, xmlBout.toString(StandardCharsets.UTF_8.toString()));\n    //\n    StringWriter noneSout = new StringWriter();\n    writerNoBase.write(noneSout, req(), rsp);\n    assertEquals(xml, noneSout.toString());\n    ByteArrayOutputStream noneBout = new ByteArrayOutputStream();\n    writerNoBase.write(noneBout, req(), rsp);\n    assertEquals(xml, noneBout.toString(StandardCharsets.UTF_8.toString()));\n\n    // json\n    String json = \"{\\\"content\\\":\\\"test\\\",\\\"foo\\\":\\\"bar\\\"}\\n\";\n    StringWriter jsonSout = new StringWriter();\n    writerJsonBase.write(jsonSout, req(), rsp);\n    assertEquals(json, jsonSout.toString());\n    ByteArrayOutputStream jsonBout = new ByteArrayOutputStream();\n    writerJsonBase.write(jsonBout, req(), rsp);\n    assertEquals(json, jsonBout.toString(StandardCharsets.UTF_8.toString()));\n\n    // javabin\n    ByteArrayOutputStream bytes = new ByteArrayOutputStream();\n    writerBinBase.write(bytes, req(), rsp);\n    BinaryResponseParser parser = new BinaryResponseParser();\n    NamedList<Object> out = parser.processResponse\n      (new ByteArrayInputStream(bytes.toByteArray()), /* encoding irelevent */ null);\n    assertEquals(RawResponseWriter.CONTENT, out.getName(0));\n    assertEquals(\"test\", out.getVal(0));\n    assertEquals(\"foo\", out.getName(1));\n    assertEquals(\"bar\", out.getVal(1));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/response/TestRawResponseWriter#testStructuredDataViaBaseWriters().mjava","pathOld":"solr/core/src/test/org/apache/solr/response/TestRawResponseWriter#testStructuredDataViaBaseWriters().mjava","sourceNew":"  /**\n   * When no real ContentStream is specified, each base writer should be used for formatting\n   */\n  public void testStructuredDataViaBaseWriters() throws IOException {\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    // Don't send a ContentStream back, this will fall back to the configured base writer.\n    // But abuse the CONTENT key to ensure writer is also checking type\n    rsp.add(RawResponseWriter.CONTENT, \"test\");\n    rsp.add(\"foo\", \"bar\");\n\n    // check Content-Type against each writer \n    assertEquals(\"application/xml; charset=UTF-8\", writerNoBase.getContentType(req(), rsp));\n    assertEquals(\"application/xml; charset=UTF-8\", writerXmlBase.getContentType(req(), rsp));\n    assertEquals(\"application/json; charset=UTF-8\", writerJsonBase.getContentType(req(), rsp));\n    assertEquals(\"application/octet-stream\",  writerBinBase.getContentType(req(), rsp));\n\n    // check response against each writer\n\n    // xml & none (default behavior same as XML)\n    String xml = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n<response>\\n<str name=\\\"content\\\">test</str><str name=\\\"foo\\\">bar</str>\\n</response>\\n\";\n    StringWriter xmlSout = new StringWriter();\n    writerXmlBase.write(xmlSout, req(), rsp);\n    assertEquals(xml, xmlSout.toString());\n    ByteArrayOutputStream xmlBout = new ByteArrayOutputStream();\n    writerXmlBase.write(xmlBout, req(), rsp);\n    assertEquals(xml, xmlBout.toString(StandardCharsets.UTF_8.toString()));\n    //\n    StringWriter noneSout = new StringWriter();\n    writerNoBase.write(noneSout, req(), rsp);\n    assertEquals(xml, noneSout.toString());\n    ByteArrayOutputStream noneBout = new ByteArrayOutputStream();\n    writerNoBase.write(noneBout, req(), rsp);\n    assertEquals(xml, noneBout.toString(StandardCharsets.UTF_8.toString()));\n\n    // json\n    String json = \"{\\\"content\\\":\\\"test\\\",\\\"foo\\\":\\\"bar\\\"}\\n\";\n    StringWriter jsonSout = new StringWriter();\n    writerJsonBase.write(jsonSout, req(), rsp);\n    assertEquals(json, jsonSout.toString());\n    ByteArrayOutputStream jsonBout = new ByteArrayOutputStream();\n    writerJsonBase.write(jsonBout, req(), rsp);\n    assertEquals(json, jsonBout.toString(StandardCharsets.UTF_8.toString()));\n\n    // javabin\n    ByteArrayOutputStream bytes = new ByteArrayOutputStream();\n    writerBinBase.write(bytes, req(), rsp);\n    BinaryResponseParser parser = new BinaryResponseParser();\n    NamedList<Object> out = parser.processResponse\n      (new ByteArrayInputStream(bytes.toByteArray()), /* encoding irrelevant */ null);\n    assertEquals(RawResponseWriter.CONTENT, out.getName(0));\n    assertEquals(\"test\", out.getVal(0));\n    assertEquals(\"foo\", out.getName(1));\n    assertEquals(\"bar\", out.getVal(1));\n\n  }\n\n","sourceOld":"  /**\n   * When no real ContentStream is specified, each base writer should be used for formatting\n   */\n  public void testStructuredDataViaBaseWriters() throws IOException {\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    // Don't send a ContentStream back, this will fall back to the configured base writer.\n    // But abuse the CONTENT key to ensure writer is also checking type\n    rsp.add(RawResponseWriter.CONTENT, \"test\");\n    rsp.add(\"foo\", \"bar\");\n\n    // check Content-Type against each writer \n    assertEquals(\"application/xml; charset=UTF-8\", writerNoBase.getContentType(req(), rsp));\n    assertEquals(\"application/xml; charset=UTF-8\", writerXmlBase.getContentType(req(), rsp));\n    assertEquals(\"application/json; charset=UTF-8\", writerJsonBase.getContentType(req(), rsp));\n    assertEquals(\"application/octet-stream\",  writerBinBase.getContentType(req(), rsp));\n\n    // check response against each writer\n\n    // xml & none (default behavior same as XML)\n    String xml = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n<response>\\n<str name=\\\"content\\\">test</str><str name=\\\"foo\\\">bar</str>\\n</response>\\n\";\n    StringWriter xmlSout = new StringWriter();\n    writerXmlBase.write(xmlSout, req(), rsp);\n    assertEquals(xml, xmlSout.toString());\n    ByteArrayOutputStream xmlBout = new ByteArrayOutputStream();\n    writerXmlBase.write(xmlBout, req(), rsp);\n    assertEquals(xml, xmlBout.toString(StandardCharsets.UTF_8.toString()));\n    //\n    StringWriter noneSout = new StringWriter();\n    writerNoBase.write(noneSout, req(), rsp);\n    assertEquals(xml, noneSout.toString());\n    ByteArrayOutputStream noneBout = new ByteArrayOutputStream();\n    writerNoBase.write(noneBout, req(), rsp);\n    assertEquals(xml, noneBout.toString(StandardCharsets.UTF_8.toString()));\n\n    // json\n    String json = \"{\\\"content\\\":\\\"test\\\",\\\"foo\\\":\\\"bar\\\"}\\n\";\n    StringWriter jsonSout = new StringWriter();\n    writerJsonBase.write(jsonSout, req(), rsp);\n    assertEquals(json, jsonSout.toString());\n    ByteArrayOutputStream jsonBout = new ByteArrayOutputStream();\n    writerJsonBase.write(jsonBout, req(), rsp);\n    assertEquals(json, jsonBout.toString(StandardCharsets.UTF_8.toString()));\n\n    // javabin\n    ByteArrayOutputStream bytes = new ByteArrayOutputStream();\n    writerBinBase.write(bytes, req(), rsp);\n    BinaryResponseParser parser = new BinaryResponseParser();\n    NamedList<Object> out = parser.processResponse\n      (new ByteArrayInputStream(bytes.toByteArray()), /* encoding irelevent */ null);\n    assertEquals(RawResponseWriter.CONTENT, out.getName(0));\n    assertEquals(\"test\", out.getVal(0));\n    assertEquals(\"foo\", out.getName(1));\n    assertEquals(\"bar\", out.getVal(1));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/response/TestRawResponseWriter#testStructuredDataViaBaseWriters().mjava","pathOld":"solr/core/src/test/org/apache/solr/response/TestRawResponseWriter#testStructuredDataViaBaseWriters().mjava","sourceNew":"  /**\n   * When no real ContentStream is specified, each base writer should be used for formatting\n   */\n  public void testStructuredDataViaBaseWriters() throws IOException {\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    // Don't send a ContentStream back, this will fall back to the configured base writer.\n    // But abuse the CONTENT key to ensure writer is also checking type\n    rsp.add(RawResponseWriter.CONTENT, \"test\");\n    rsp.add(\"foo\", \"bar\");\n\n    // check Content-Type against each writer \n    assertEquals(\"application/xml; charset=UTF-8\", writerNoBase.getContentType(req(), rsp));\n    assertEquals(\"application/xml; charset=UTF-8\", writerXmlBase.getContentType(req(), rsp));\n    assertEquals(\"application/json; charset=UTF-8\", writerJsonBase.getContentType(req(), rsp));\n    assertEquals(\"application/octet-stream\",  writerBinBase.getContentType(req(), rsp));\n\n    // check response against each writer\n\n    // xml & none (default behavior same as XML)\n    String xml = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n<response>\\n<str name=\\\"content\\\">test</str><str name=\\\"foo\\\">bar</str>\\n</response>\\n\";\n    StringWriter xmlSout = new StringWriter();\n    writerXmlBase.write(xmlSout, req(), rsp);\n    assertEquals(xml, xmlSout.toString());\n    ByteArrayOutputStream xmlBout = new ByteArrayOutputStream();\n    writerXmlBase.write(xmlBout, req(), rsp);\n    assertEquals(xml, xmlBout.toString(StandardCharsets.UTF_8.toString()));\n    //\n    StringWriter noneSout = new StringWriter();\n    writerNoBase.write(noneSout, req(), rsp);\n    assertEquals(xml, noneSout.toString());\n    ByteArrayOutputStream noneBout = new ByteArrayOutputStream();\n    writerNoBase.write(noneBout, req(), rsp);\n    assertEquals(xml, noneBout.toString(StandardCharsets.UTF_8.toString()));\n\n    // json\n    String json = \"{\\\"content\\\":\\\"test\\\",\\\"foo\\\":\\\"bar\\\"}\\n\";\n    StringWriter jsonSout = new StringWriter();\n    writerJsonBase.write(jsonSout, req(), rsp);\n    assertEquals(json, jsonSout.toString());\n    ByteArrayOutputStream jsonBout = new ByteArrayOutputStream();\n    writerJsonBase.write(jsonBout, req(), rsp);\n    assertEquals(json, jsonBout.toString(StandardCharsets.UTF_8.toString()));\n\n    // javabin\n    ByteArrayOutputStream bytes = new ByteArrayOutputStream();\n    writerBinBase.write(bytes, req(), rsp);\n    BinaryResponseParser parser = new BinaryResponseParser();\n    NamedList<Object> out = parser.processResponse\n      (new ByteArrayInputStream(bytes.toByteArray()), /* encoding irrelevant */ null);\n    assertEquals(RawResponseWriter.CONTENT, out.getName(0));\n    assertEquals(\"test\", out.getVal(0));\n    assertEquals(\"foo\", out.getName(1));\n    assertEquals(\"bar\", out.getVal(1));\n\n  }\n\n","sourceOld":"  /**\n   * When no real ContentStream is specified, each base writer should be used for formatting\n   */\n  public void testStructuredDataViaBaseWriters() throws IOException {\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    // Don't send a ContentStream back, this will fall back to the configured base writer.\n    // But abuse the CONTENT key to ensure writer is also checking type\n    rsp.add(RawResponseWriter.CONTENT, \"test\");\n    rsp.add(\"foo\", \"bar\");\n\n    // check Content-Type against each writer \n    assertEquals(\"application/xml; charset=UTF-8\", writerNoBase.getContentType(req(), rsp));\n    assertEquals(\"application/xml; charset=UTF-8\", writerXmlBase.getContentType(req(), rsp));\n    assertEquals(\"application/json; charset=UTF-8\", writerJsonBase.getContentType(req(), rsp));\n    assertEquals(\"application/octet-stream\",  writerBinBase.getContentType(req(), rsp));\n\n    // check response against each writer\n\n    // xml & none (default behavior same as XML)\n    String xml = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n<response>\\n<str name=\\\"content\\\">test</str><str name=\\\"foo\\\">bar</str>\\n</response>\\n\";\n    StringWriter xmlSout = new StringWriter();\n    writerXmlBase.write(xmlSout, req(), rsp);\n    assertEquals(xml, xmlSout.toString());\n    ByteArrayOutputStream xmlBout = new ByteArrayOutputStream();\n    writerXmlBase.write(xmlBout, req(), rsp);\n    assertEquals(xml, xmlBout.toString(StandardCharsets.UTF_8.toString()));\n    //\n    StringWriter noneSout = new StringWriter();\n    writerNoBase.write(noneSout, req(), rsp);\n    assertEquals(xml, noneSout.toString());\n    ByteArrayOutputStream noneBout = new ByteArrayOutputStream();\n    writerNoBase.write(noneBout, req(), rsp);\n    assertEquals(xml, noneBout.toString(StandardCharsets.UTF_8.toString()));\n\n    // json\n    String json = \"{\\\"content\\\":\\\"test\\\",\\\"foo\\\":\\\"bar\\\"}\\n\";\n    StringWriter jsonSout = new StringWriter();\n    writerJsonBase.write(jsonSout, req(), rsp);\n    assertEquals(json, jsonSout.toString());\n    ByteArrayOutputStream jsonBout = new ByteArrayOutputStream();\n    writerJsonBase.write(jsonBout, req(), rsp);\n    assertEquals(json, jsonBout.toString(StandardCharsets.UTF_8.toString()));\n\n    // javabin\n    ByteArrayOutputStream bytes = new ByteArrayOutputStream();\n    writerBinBase.write(bytes, req(), rsp);\n    BinaryResponseParser parser = new BinaryResponseParser();\n    NamedList<Object> out = parser.processResponse\n      (new ByteArrayInputStream(bytes.toByteArray()), /* encoding irelevent */ null);\n    assertEquals(RawResponseWriter.CONTENT, out.getName(0));\n    assertEquals(\"test\", out.getVal(0));\n    assertEquals(\"foo\", out.getName(1));\n    assertEquals(\"bar\", out.getVal(1));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ac1e7fa558287a811ea07634d815ee7b1c541284","date":1500910922,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/response/TestRawResponseWriter#testStructuredDataViaBaseWriters().mjava","pathOld":"solr/core/src/test/org/apache/solr/response/TestRawResponseWriter#testStructuredDataViaBaseWriters().mjava","sourceNew":"  /**\n   * When no real ContentStream is specified, each base writer should be used for formatting\n   */\n  public void testStructuredDataViaBaseWriters() throws IOException {\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    // Don't send a ContentStream back, this will fall back to the configured base writer.\n    // But abuse the CONTENT key to ensure writer is also checking type\n    rsp.add(RawResponseWriter.CONTENT, \"test\");\n    rsp.add(\"foo\", \"bar\");\n\n    // check Content-Type against each writer \n    assertEquals(\"application/xml; charset=UTF-8\", writerNoBase.getContentType(req(), rsp));\n    assertEquals(\"application/xml; charset=UTF-8\", writerXmlBase.getContentType(req(), rsp));\n    assertEquals(\"application/json; charset=UTF-8\", writerJsonBase.getContentType(req(), rsp));\n    assertEquals(\"application/octet-stream\",  writerBinBase.getContentType(req(), rsp));\n\n    // check response against each writer\n\n    // xml & none (default behavior same as XML)\n    String xml = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" +\n        \"<response>\\n\" +\n        \"\\n\" +\n        \"<str name=\\\"content\\\">test</str>\\n\" +\n        \"<str name=\\\"foo\\\">bar</str>\\n\" +\n        \"</response>\\n\";\n    StringWriter xmlSout = new StringWriter();\n    writerXmlBase.write(xmlSout, req(), rsp);\n    assertEquals(xml, xmlSout.toString());\n    ByteArrayOutputStream xmlBout = new ByteArrayOutputStream();\n    writerXmlBase.write(xmlBout, req(), rsp);\n    assertEquals(xml, xmlBout.toString(StandardCharsets.UTF_8.toString()));\n    //\n    StringWriter noneSout = new StringWriter();\n    writerNoBase.write(noneSout, req(), rsp);\n    assertEquals(xml, noneSout.toString());\n    ByteArrayOutputStream noneBout = new ByteArrayOutputStream();\n    writerNoBase.write(noneBout, req(), rsp);\n    assertEquals(xml, noneBout.toString(StandardCharsets.UTF_8.toString()));\n\n    // json\n    String json = \"{\\n\" +\n        \"  \\\"content\\\":\\\"test\\\",\\n\" +\n        \"  \\\"foo\\\":\\\"bar\\\"}\\n\";\n    StringWriter jsonSout = new StringWriter();\n    writerJsonBase.write(jsonSout, req(), rsp);\n    assertEquals(json, jsonSout.toString());\n    ByteArrayOutputStream jsonBout = new ByteArrayOutputStream();\n    writerJsonBase.write(jsonBout, req(), rsp);\n    assertEquals(json, jsonBout.toString(StandardCharsets.UTF_8.toString()));\n\n    // javabin\n    ByteArrayOutputStream bytes = new ByteArrayOutputStream();\n    writerBinBase.write(bytes, req(), rsp);\n    BinaryResponseParser parser = new BinaryResponseParser();\n    NamedList<Object> out = parser.processResponse\n      (new ByteArrayInputStream(bytes.toByteArray()), /* encoding irrelevant */ null);\n    assertEquals(RawResponseWriter.CONTENT, out.getName(0));\n    assertEquals(\"test\", out.getVal(0));\n    assertEquals(\"foo\", out.getName(1));\n    assertEquals(\"bar\", out.getVal(1));\n\n  }\n\n","sourceOld":"  /**\n   * When no real ContentStream is specified, each base writer should be used for formatting\n   */\n  public void testStructuredDataViaBaseWriters() throws IOException {\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    // Don't send a ContentStream back, this will fall back to the configured base writer.\n    // But abuse the CONTENT key to ensure writer is also checking type\n    rsp.add(RawResponseWriter.CONTENT, \"test\");\n    rsp.add(\"foo\", \"bar\");\n\n    // check Content-Type against each writer \n    assertEquals(\"application/xml; charset=UTF-8\", writerNoBase.getContentType(req(), rsp));\n    assertEquals(\"application/xml; charset=UTF-8\", writerXmlBase.getContentType(req(), rsp));\n    assertEquals(\"application/json; charset=UTF-8\", writerJsonBase.getContentType(req(), rsp));\n    assertEquals(\"application/octet-stream\",  writerBinBase.getContentType(req(), rsp));\n\n    // check response against each writer\n\n    // xml & none (default behavior same as XML)\n    String xml = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n<response>\\n<str name=\\\"content\\\">test</str><str name=\\\"foo\\\">bar</str>\\n</response>\\n\";\n    StringWriter xmlSout = new StringWriter();\n    writerXmlBase.write(xmlSout, req(), rsp);\n    assertEquals(xml, xmlSout.toString());\n    ByteArrayOutputStream xmlBout = new ByteArrayOutputStream();\n    writerXmlBase.write(xmlBout, req(), rsp);\n    assertEquals(xml, xmlBout.toString(StandardCharsets.UTF_8.toString()));\n    //\n    StringWriter noneSout = new StringWriter();\n    writerNoBase.write(noneSout, req(), rsp);\n    assertEquals(xml, noneSout.toString());\n    ByteArrayOutputStream noneBout = new ByteArrayOutputStream();\n    writerNoBase.write(noneBout, req(), rsp);\n    assertEquals(xml, noneBout.toString(StandardCharsets.UTF_8.toString()));\n\n    // json\n    String json = \"{\\\"content\\\":\\\"test\\\",\\\"foo\\\":\\\"bar\\\"}\\n\";\n    StringWriter jsonSout = new StringWriter();\n    writerJsonBase.write(jsonSout, req(), rsp);\n    assertEquals(json, jsonSout.toString());\n    ByteArrayOutputStream jsonBout = new ByteArrayOutputStream();\n    writerJsonBase.write(jsonBout, req(), rsp);\n    assertEquals(json, jsonBout.toString(StandardCharsets.UTF_8.toString()));\n\n    // javabin\n    ByteArrayOutputStream bytes = new ByteArrayOutputStream();\n    writerBinBase.write(bytes, req(), rsp);\n    BinaryResponseParser parser = new BinaryResponseParser();\n    NamedList<Object> out = parser.processResponse\n      (new ByteArrayInputStream(bytes.toByteArray()), /* encoding irrelevant */ null);\n    assertEquals(RawResponseWriter.CONTENT, out.getName(0));\n    assertEquals(\"test\", out.getVal(0));\n    assertEquals(\"foo\", out.getName(1));\n    assertEquals(\"bar\", out.getVal(1));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"936cdd5882761db3b844afd6f84ab81cbb011a75","date":1500973524,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/response/TestRawResponseWriter#testStructuredDataViaBaseWriters().mjava","pathOld":"solr/core/src/test/org/apache/solr/response/TestRawResponseWriter#testStructuredDataViaBaseWriters().mjava","sourceNew":"  /**\n   * When no real ContentStream is specified, each base writer should be used for formatting\n   */\n  public void testStructuredDataViaBaseWriters() throws IOException {\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    // Don't send a ContentStream back, this will fall back to the configured base writer.\n    // But abuse the CONTENT key to ensure writer is also checking type\n    rsp.add(RawResponseWriter.CONTENT, \"test\");\n    rsp.add(\"foo\", \"bar\");\n\n    // check Content-Type against each writer \n    assertEquals(\"application/xml; charset=UTF-8\", writerNoBase.getContentType(req(), rsp));\n    assertEquals(\"application/xml; charset=UTF-8\", writerXmlBase.getContentType(req(), rsp));\n    assertEquals(\"application/json; charset=UTF-8\", writerJsonBase.getContentType(req(), rsp));\n    assertEquals(\"application/octet-stream\",  writerBinBase.getContentType(req(), rsp));\n\n    // check response against each writer\n\n    // xml & none (default behavior same as XML)\n    String xml = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" +\n        \"<response>\\n\" +\n        \"\\n\" +\n        \"<str name=\\\"content\\\">test</str>\\n\" +\n        \"<str name=\\\"foo\\\">bar</str>\\n\" +\n        \"</response>\\n\";\n    StringWriter xmlSout = new StringWriter();\n    writerXmlBase.write(xmlSout, req(), rsp);\n    assertEquals(xml, xmlSout.toString());\n    ByteArrayOutputStream xmlBout = new ByteArrayOutputStream();\n    writerXmlBase.write(xmlBout, req(), rsp);\n    assertEquals(xml, xmlBout.toString(StandardCharsets.UTF_8.toString()));\n    //\n    StringWriter noneSout = new StringWriter();\n    writerNoBase.write(noneSout, req(), rsp);\n    assertEquals(xml, noneSout.toString());\n    ByteArrayOutputStream noneBout = new ByteArrayOutputStream();\n    writerNoBase.write(noneBout, req(), rsp);\n    assertEquals(xml, noneBout.toString(StandardCharsets.UTF_8.toString()));\n\n    // json\n    String json = \"{\\n\" +\n        \"  \\\"content\\\":\\\"test\\\",\\n\" +\n        \"  \\\"foo\\\":\\\"bar\\\"}\\n\";\n    StringWriter jsonSout = new StringWriter();\n    writerJsonBase.write(jsonSout, req(), rsp);\n    assertEquals(json, jsonSout.toString());\n    ByteArrayOutputStream jsonBout = new ByteArrayOutputStream();\n    writerJsonBase.write(jsonBout, req(), rsp);\n    assertEquals(json, jsonBout.toString(StandardCharsets.UTF_8.toString()));\n\n    // javabin\n    ByteArrayOutputStream bytes = new ByteArrayOutputStream();\n    writerBinBase.write(bytes, req(), rsp);\n    BinaryResponseParser parser = new BinaryResponseParser();\n    NamedList<Object> out = parser.processResponse\n      (new ByteArrayInputStream(bytes.toByteArray()), /* encoding irrelevant */ null);\n    assertEquals(RawResponseWriter.CONTENT, out.getName(0));\n    assertEquals(\"test\", out.getVal(0));\n    assertEquals(\"foo\", out.getName(1));\n    assertEquals(\"bar\", out.getVal(1));\n\n  }\n\n","sourceOld":"  /**\n   * When no real ContentStream is specified, each base writer should be used for formatting\n   */\n  public void testStructuredDataViaBaseWriters() throws IOException {\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    // Don't send a ContentStream back, this will fall back to the configured base writer.\n    // But abuse the CONTENT key to ensure writer is also checking type\n    rsp.add(RawResponseWriter.CONTENT, \"test\");\n    rsp.add(\"foo\", \"bar\");\n\n    // check Content-Type against each writer \n    assertEquals(\"application/xml; charset=UTF-8\", writerNoBase.getContentType(req(), rsp));\n    assertEquals(\"application/xml; charset=UTF-8\", writerXmlBase.getContentType(req(), rsp));\n    assertEquals(\"application/json; charset=UTF-8\", writerJsonBase.getContentType(req(), rsp));\n    assertEquals(\"application/octet-stream\",  writerBinBase.getContentType(req(), rsp));\n\n    // check response against each writer\n\n    // xml & none (default behavior same as XML)\n    String xml = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n<response>\\n<str name=\\\"content\\\">test</str><str name=\\\"foo\\\">bar</str>\\n</response>\\n\";\n    StringWriter xmlSout = new StringWriter();\n    writerXmlBase.write(xmlSout, req(), rsp);\n    assertEquals(xml, xmlSout.toString());\n    ByteArrayOutputStream xmlBout = new ByteArrayOutputStream();\n    writerXmlBase.write(xmlBout, req(), rsp);\n    assertEquals(xml, xmlBout.toString(StandardCharsets.UTF_8.toString()));\n    //\n    StringWriter noneSout = new StringWriter();\n    writerNoBase.write(noneSout, req(), rsp);\n    assertEquals(xml, noneSout.toString());\n    ByteArrayOutputStream noneBout = new ByteArrayOutputStream();\n    writerNoBase.write(noneBout, req(), rsp);\n    assertEquals(xml, noneBout.toString(StandardCharsets.UTF_8.toString()));\n\n    // json\n    String json = \"{\\\"content\\\":\\\"test\\\",\\\"foo\\\":\\\"bar\\\"}\\n\";\n    StringWriter jsonSout = new StringWriter();\n    writerJsonBase.write(jsonSout, req(), rsp);\n    assertEquals(json, jsonSout.toString());\n    ByteArrayOutputStream jsonBout = new ByteArrayOutputStream();\n    writerJsonBase.write(jsonBout, req(), rsp);\n    assertEquals(json, jsonBout.toString(StandardCharsets.UTF_8.toString()));\n\n    // javabin\n    ByteArrayOutputStream bytes = new ByteArrayOutputStream();\n    writerBinBase.write(bytes, req(), rsp);\n    BinaryResponseParser parser = new BinaryResponseParser();\n    NamedList<Object> out = parser.processResponse\n      (new ByteArrayInputStream(bytes.toByteArray()), /* encoding irrelevant */ null);\n    assertEquals(RawResponseWriter.CONTENT, out.getName(0));\n    assertEquals(\"test\", out.getVal(0));\n    assertEquals(\"foo\", out.getName(1));\n    assertEquals(\"bar\", out.getVal(1));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a52341299179de5479672f7cf518bf4b173f34b3","date":1501079746,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/response/TestRawResponseWriter#testStructuredDataViaBaseWriters().mjava","pathOld":"solr/core/src/test/org/apache/solr/response/TestRawResponseWriter#testStructuredDataViaBaseWriters().mjava","sourceNew":"  /**\n   * When no real ContentStream is specified, each base writer should be used for formatting\n   */\n  public void testStructuredDataViaBaseWriters() throws IOException {\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    // Don't send a ContentStream back, this will fall back to the configured base writer.\n    // But abuse the CONTENT key to ensure writer is also checking type\n    rsp.add(RawResponseWriter.CONTENT, \"test\");\n    rsp.add(\"foo\", \"bar\");\n\n    // check Content-Type against each writer \n    assertEquals(\"application/xml; charset=UTF-8\", writerNoBase.getContentType(req(), rsp));\n    assertEquals(\"application/xml; charset=UTF-8\", writerXmlBase.getContentType(req(), rsp));\n    assertEquals(\"application/json; charset=UTF-8\", writerJsonBase.getContentType(req(), rsp));\n    assertEquals(\"application/octet-stream\",  writerBinBase.getContentType(req(), rsp));\n\n    // check response against each writer\n\n    // xml & none (default behavior same as XML)\n    String xml = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" +\n        \"<response>\\n\" +\n        \"\\n\" +\n        \"<str name=\\\"content\\\">test</str>\\n\" +\n        \"<str name=\\\"foo\\\">bar</str>\\n\" +\n        \"</response>\\n\";\n    StringWriter xmlSout = new StringWriter();\n    writerXmlBase.write(xmlSout, req(), rsp);\n    assertEquals(xml, xmlSout.toString());\n    ByteArrayOutputStream xmlBout = new ByteArrayOutputStream();\n    writerXmlBase.write(xmlBout, req(), rsp);\n    assertEquals(xml, xmlBout.toString(StandardCharsets.UTF_8.toString()));\n    //\n    StringWriter noneSout = new StringWriter();\n    writerNoBase.write(noneSout, req(), rsp);\n    assertEquals(xml, noneSout.toString());\n    ByteArrayOutputStream noneBout = new ByteArrayOutputStream();\n    writerNoBase.write(noneBout, req(), rsp);\n    assertEquals(xml, noneBout.toString(StandardCharsets.UTF_8.toString()));\n\n    // json\n    String json = \"{\\n\" +\n        \"  \\\"content\\\":\\\"test\\\",\\n\" +\n        \"  \\\"foo\\\":\\\"bar\\\"}\\n\";\n    StringWriter jsonSout = new StringWriter();\n    writerJsonBase.write(jsonSout, req(), rsp);\n    assertEquals(json, jsonSout.toString());\n    ByteArrayOutputStream jsonBout = new ByteArrayOutputStream();\n    writerJsonBase.write(jsonBout, req(), rsp);\n    assertEquals(json, jsonBout.toString(StandardCharsets.UTF_8.toString()));\n\n    // javabin\n    ByteArrayOutputStream bytes = new ByteArrayOutputStream();\n    writerBinBase.write(bytes, req(), rsp);\n    BinaryResponseParser parser = new BinaryResponseParser();\n    NamedList<Object> out = parser.processResponse\n      (new ByteArrayInputStream(bytes.toByteArray()), /* encoding irrelevant */ null);\n    assertEquals(RawResponseWriter.CONTENT, out.getName(0));\n    assertEquals(\"test\", out.getVal(0));\n    assertEquals(\"foo\", out.getName(1));\n    assertEquals(\"bar\", out.getVal(1));\n\n  }\n\n","sourceOld":"  /**\n   * When no real ContentStream is specified, each base writer should be used for formatting\n   */\n  public void testStructuredDataViaBaseWriters() throws IOException {\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    // Don't send a ContentStream back, this will fall back to the configured base writer.\n    // But abuse the CONTENT key to ensure writer is also checking type\n    rsp.add(RawResponseWriter.CONTENT, \"test\");\n    rsp.add(\"foo\", \"bar\");\n\n    // check Content-Type against each writer \n    assertEquals(\"application/xml; charset=UTF-8\", writerNoBase.getContentType(req(), rsp));\n    assertEquals(\"application/xml; charset=UTF-8\", writerXmlBase.getContentType(req(), rsp));\n    assertEquals(\"application/json; charset=UTF-8\", writerJsonBase.getContentType(req(), rsp));\n    assertEquals(\"application/octet-stream\",  writerBinBase.getContentType(req(), rsp));\n\n    // check response against each writer\n\n    // xml & none (default behavior same as XML)\n    String xml = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n<response>\\n<str name=\\\"content\\\">test</str><str name=\\\"foo\\\">bar</str>\\n</response>\\n\";\n    StringWriter xmlSout = new StringWriter();\n    writerXmlBase.write(xmlSout, req(), rsp);\n    assertEquals(xml, xmlSout.toString());\n    ByteArrayOutputStream xmlBout = new ByteArrayOutputStream();\n    writerXmlBase.write(xmlBout, req(), rsp);\n    assertEquals(xml, xmlBout.toString(StandardCharsets.UTF_8.toString()));\n    //\n    StringWriter noneSout = new StringWriter();\n    writerNoBase.write(noneSout, req(), rsp);\n    assertEquals(xml, noneSout.toString());\n    ByteArrayOutputStream noneBout = new ByteArrayOutputStream();\n    writerNoBase.write(noneBout, req(), rsp);\n    assertEquals(xml, noneBout.toString(StandardCharsets.UTF_8.toString()));\n\n    // json\n    String json = \"{\\\"content\\\":\\\"test\\\",\\\"foo\\\":\\\"bar\\\"}\\n\";\n    StringWriter jsonSout = new StringWriter();\n    writerJsonBase.write(jsonSout, req(), rsp);\n    assertEquals(json, jsonSout.toString());\n    ByteArrayOutputStream jsonBout = new ByteArrayOutputStream();\n    writerJsonBase.write(jsonBout, req(), rsp);\n    assertEquals(json, jsonBout.toString(StandardCharsets.UTF_8.toString()));\n\n    // javabin\n    ByteArrayOutputStream bytes = new ByteArrayOutputStream();\n    writerBinBase.write(bytes, req(), rsp);\n    BinaryResponseParser parser = new BinaryResponseParser();\n    NamedList<Object> out = parser.processResponse\n      (new ByteArrayInputStream(bytes.toByteArray()), /* encoding irrelevant */ null);\n    assertEquals(RawResponseWriter.CONTENT, out.getName(0));\n    assertEquals(\"test\", out.getVal(0));\n    assertEquals(\"foo\", out.getName(1));\n    assertEquals(\"bar\", out.getVal(1));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a52341299179de5479672f7cf518bf4b173f34b3":["d470c8182e92b264680e34081b75e70a9f2b3c89","ac1e7fa558287a811ea07634d815ee7b1c541284"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"936cdd5882761db3b844afd6f84ab81cbb011a75":["d470c8182e92b264680e34081b75e70a9f2b3c89","ac1e7fa558287a811ea07634d815ee7b1c541284"],"9272dcea19192a5fb261980a4737677abfcabab3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["9272dcea19192a5fb261980a4737677abfcabab3","d470c8182e92b264680e34081b75e70a9f2b3c89"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a52341299179de5479672f7cf518bf4b173f34b3"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["9272dcea19192a5fb261980a4737677abfcabab3","0158ced21948b6626f733c1c42c1e18d94449789"],"0158ced21948b6626f733c1c42c1e18d94449789":["9272dcea19192a5fb261980a4737677abfcabab3"],"ac1e7fa558287a811ea07634d815ee7b1c541284":["d470c8182e92b264680e34081b75e70a9f2b3c89"]},"commit2Childs":{"a52341299179de5479672f7cf518bf4b173f34b3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9272dcea19192a5fb261980a4737677abfcabab3"],"936cdd5882761db3b844afd6f84ab81cbb011a75":[],"9272dcea19192a5fb261980a4737677abfcabab3":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89","0158ced21948b6626f733c1c42c1e18d94449789"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"d470c8182e92b264680e34081b75e70a9f2b3c89":["a52341299179de5479672f7cf518bf4b173f34b3","936cdd5882761db3b844afd6f84ab81cbb011a75","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","ac1e7fa558287a811ea07634d815ee7b1c541284"],"ac1e7fa558287a811ea07634d815ee7b1c541284":["a52341299179de5479672f7cf518bf4b173f34b3","936cdd5882761db3b844afd6f84ab81cbb011a75"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"0158ced21948b6626f733c1c42c1e18d94449789":["d470c8182e92b264680e34081b75e70a9f2b3c89"]},"heads":["936cdd5882761db3b844afd6f84ab81cbb011a75","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}