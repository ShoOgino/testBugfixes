{"path":"lucene/src/java/org/apache/lucene/index/IndexReader#openIfChanged(IndexReader,IndexCommit).mjava","commits":[{"id":"8a8259c922a83abc544609227a60d48e5ee93e7e","date":1317679620,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#openIfChanged(IndexReader,IndexCommit).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * If the IndexCommit differs from what the\n   * provided reader is searching, or the provided reader is\n   * not already read-only, open and return a new\n   * <code>readOnly=true</code> reader; else, return null.\n   *\n   * @see #openIfChanged(IndexReader)\n   */\n  // TODO: should you be able to specify readOnly?\n  public static IndexReader openIfChanged(IndexReader oldReader, IndexCommit commit) throws IOException {\n    return oldReader.doOpenIfChanged(commit);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["66a7b33505a58e6f91f780ddaa986820233e850b"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"66a7b33505a58e6f91f780ddaa986820233e850b","date":1317683383,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#openIfChanged(IndexReader,IndexCommit).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#openIfChanged(IndexReader,IndexCommit).mjava","sourceNew":"  /**\n   * If the IndexCommit differs from what the\n   * provided reader is searching, or the provided reader is\n   * not already read-only, open and return a new\n   * <code>readOnly=true</code> reader; else, return null.\n   *\n   * @see #openIfChanged(IndexReader)\n   */\n  // TODO: should you be able to specify readOnly?\n  public static IndexReader openIfChanged(IndexReader oldReader, IndexCommit commit) throws IOException {\n    final IndexReader newReader = oldReader.doOpenIfChanged(commit);\n    assert newReader != oldReader;\n    return newReader;\n  }\n\n","sourceOld":"  /**\n   * If the IndexCommit differs from what the\n   * provided reader is searching, or the provided reader is\n   * not already read-only, open and return a new\n   * <code>readOnly=true</code> reader; else, return null.\n   *\n   * @see #openIfChanged(IndexReader)\n   */\n  // TODO: should you be able to specify readOnly?\n  public static IndexReader openIfChanged(IndexReader oldReader, IndexCommit commit) throws IOException {\n    return oldReader.doOpenIfChanged(commit);\n  }\n\n","bugFix":["8a8259c922a83abc544609227a60d48e5ee93e7e"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2dd8cac059f4a5d4491e279aa2d07064392f9357","date":1323099195,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#openIfChanged(IndexReader,IndexCommit).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#openIfChanged(IndexReader,IndexCommit).mjava","sourceNew":"  /**\n   * If the IndexCommit differs from what the\n   * provided reader is searching, open and return a new\n   * reader; else, return null.\n   *\n   * @see #openIfChanged(IndexReader)\n   */\n  public static IndexReader openIfChanged(IndexReader oldReader, IndexCommit commit) throws IOException {\n    final IndexReader newReader = oldReader.doOpenIfChanged(commit);\n    assert newReader != oldReader;\n    return newReader;\n  }\n\n","sourceOld":"  /**\n   * If the IndexCommit differs from what the\n   * provided reader is searching, or the provided reader is\n   * not already read-only, open and return a new\n   * <code>readOnly=true</code> reader; else, return null.\n   *\n   * @see #openIfChanged(IndexReader)\n   */\n  // TODO: should you be able to specify readOnly?\n  public static IndexReader openIfChanged(IndexReader oldReader, IndexCommit commit) throws IOException {\n    final IndexReader newReader = oldReader.doOpenIfChanged(commit);\n    assert newReader != oldReader;\n    return newReader;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3615ce4a1f785ae1b779244de52c6a7d99227e60","date":1323422019,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#openIfChanged(IndexReader,IndexCommit).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#openIfChanged(IndexReader,IndexCommit).mjava","sourceNew":"  /**\n   * If the IndexCommit differs from what the\n   * provided reader is searching, open and return a new\n   * reader; else, return null.\n   *\n   * @see #openIfChanged(IndexReader)\n   */\n  public static IndexReader openIfChanged(IndexReader oldReader, IndexCommit commit) throws IOException {\n    final IndexReader newReader = oldReader.doOpenIfChanged(commit);\n    assert newReader != oldReader;\n    return newReader;\n  }\n\n","sourceOld":"  /**\n   * If the IndexCommit differs from what the\n   * provided reader is searching, or the provided reader is\n   * not already read-only, open and return a new\n   * <code>readOnly=true</code> reader; else, return null.\n   *\n   * @see #openIfChanged(IndexReader)\n   */\n  // TODO: should you be able to specify readOnly?\n  public static IndexReader openIfChanged(IndexReader oldReader, IndexCommit commit) throws IOException {\n    final IndexReader newReader = oldReader.doOpenIfChanged(commit);\n    assert newReader != oldReader;\n    return newReader;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","date":1323437438,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#openIfChanged(IndexReader,IndexCommit).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#openIfChanged(IndexReader,IndexCommit).mjava","sourceNew":"  /**\n   * If the IndexCommit differs from what the\n   * provided reader is searching, open and return a new\n   * reader; else, return null.\n   *\n   * @see #openIfChanged(IndexReader)\n   */\n  public static IndexReader openIfChanged(IndexReader oldReader, IndexCommit commit) throws IOException {\n    final IndexReader newReader = oldReader.doOpenIfChanged(commit);\n    assert newReader != oldReader;\n    return newReader;\n  }\n\n","sourceOld":"  /**\n   * If the IndexCommit differs from what the\n   * provided reader is searching, or the provided reader is\n   * not already read-only, open and return a new\n   * <code>readOnly=true</code> reader; else, return null.\n   *\n   * @see #openIfChanged(IndexReader)\n   */\n  // TODO: should you be able to specify readOnly?\n  public static IndexReader openIfChanged(IndexReader oldReader, IndexCommit commit) throws IOException {\n    final IndexReader newReader = oldReader.doOpenIfChanged(commit);\n    assert newReader != oldReader;\n    return newReader;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2725b2d479964ea5aaea0ba4ae2634716f3ec26c","date":1327188170,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#openIfChanged(CompositeIndexReader,IndexCommit).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#openIfChanged(IndexReader,IndexCommit).mjava","sourceNew":"  /**\n   * If the IndexCommit differs from what the\n   * provided reader is searching, open and return a new\n   * reader; else, return null.\n   *\n   * @see #openIfChanged(IndexReader)\n   */\n  public static CompositeIndexReader openIfChanged(CompositeIndexReader oldReader, IndexCommit commit) throws IOException {\n    final CompositeIndexReader newReader = oldReader.doOpenIfChanged(commit);\n    assert newReader != oldReader;\n    return newReader;\n  }\n\n","sourceOld":"  /**\n   * If the IndexCommit differs from what the\n   * provided reader is searching, open and return a new\n   * reader; else, return null.\n   *\n   * @see #openIfChanged(IndexReader)\n   */\n  public static IndexReader openIfChanged(IndexReader oldReader, IndexCommit commit) throws IOException {\n    final IndexReader newReader = oldReader.doOpenIfChanged(commit);\n    assert newReader != oldReader;\n    return newReader;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":5,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/DirectoryReader#openIfChanged(DirectoryReader,IndexCommit).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#openIfChanged(IndexReader,IndexCommit).mjava","sourceNew":"  /**\n   * If the IndexCommit differs from what the\n   * provided reader is searching, open and return a new\n   * reader; else, return null.\n   *\n   * @see #openIfChanged(DirectoryReader)\n   */\n  public static DirectoryReader openIfChanged(DirectoryReader oldReader, IndexCommit commit) throws IOException {\n    final DirectoryReader newReader = oldReader.doOpenIfChanged(commit);\n    assert newReader != oldReader;\n    return newReader;\n  }\n\n","sourceOld":"  /**\n   * If the IndexCommit differs from what the\n   * provided reader is searching, open and return a new\n   * reader; else, return null.\n   *\n   * @see #openIfChanged(IndexReader)\n   */\n  public static IndexReader openIfChanged(IndexReader oldReader, IndexCommit commit) throws IOException {\n    final IndexReader newReader = oldReader.doOpenIfChanged(commit);\n    assert newReader != oldReader;\n    return newReader;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8a8259c922a83abc544609227a60d48e5ee93e7e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["66a7b33505a58e6f91f780ddaa986820233e850b","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"66a7b33505a58e6f91f780ddaa986820233e850b":["8a8259c922a83abc544609227a60d48e5ee93e7e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["66a7b33505a58e6f91f780ddaa986820233e850b","2dd8cac059f4a5d4491e279aa2d07064392f9357"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["3615ce4a1f785ae1b779244de52c6a7d99227e60","2725b2d479964ea5aaea0ba4ae2634716f3ec26c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"2dd8cac059f4a5d4491e279aa2d07064392f9357":["66a7b33505a58e6f91f780ddaa986820233e850b"],"2725b2d479964ea5aaea0ba4ae2634716f3ec26c":["3615ce4a1f785ae1b779244de52c6a7d99227e60"]},"commit2Childs":{"8a8259c922a83abc544609227a60d48e5ee93e7e":["66a7b33505a58e6f91f780ddaa986820233e850b"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":[],"66a7b33505a58e6f91f780ddaa986820233e850b":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","3615ce4a1f785ae1b779244de52c6a7d99227e60","2dd8cac059f4a5d4491e279aa2d07064392f9357"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8a8259c922a83abc544609227a60d48e5ee93e7e"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","5cab9a86bd67202d20b6adc463008c8e982b070a","2725b2d479964ea5aaea0ba4ae2634716f3ec26c"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2dd8cac059f4a5d4491e279aa2d07064392f9357":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"2725b2d479964ea5aaea0ba4ae2634716f3ec26c":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}