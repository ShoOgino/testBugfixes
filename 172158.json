{"path":"lucene/core/src/java/org/apache/lucene/util/automaton/Operations#run(Automaton,String).mjava","commits":[{"id":"4ca1c732df8923f5624f6c06b1dcca9e69d98c96","date":1402957391,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/Operations#run(Automaton,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/BasicOperations#run(LightAutomaton,String).mjava","sourceNew":"  /**\n   * Returns true if the given string is accepted by the automaton.  The input must be deterministic.\n   * <p>\n   * Complexity: linear in the length of the string.\n   * <p>\n   * <b>Note:</b> for full performance, use the {@link RunAutomaton} class.\n   */\n  public static boolean run(Automaton a, String s) {\n    assert a.isDeterministic();\n    int state = 0;\n    for (int i = 0, cp = 0; i < s.length(); i += Character.charCount(cp)) {\n      int nextState = a.step(state, cp = s.codePointAt(i));\n      if (nextState == -1) {\n        return false;\n      }\n      state = nextState;\n    }\n    return a.isAccept(state);\n  }\n\n","sourceOld":"  /**\n   * Returns true if the given string is accepted by the automaton.  The input must be deterministic.\n   * <p>\n   * Complexity: linear in the length of the string.\n   * <p>\n   * <b>Note:</b> for full performance, use the {@link RunAutomaton} class.\n   */\n  public static boolean run(LightAutomaton a, String s) {\n    assert a.isDeterministic();\n    int state = 0;\n    for (int i = 0, cp = 0; i < s.length(); i += Character.charCount(cp)) {\n      int nextState = a.step(state, cp = s.codePointAt(i));\n      if (nextState == -1) {\n        return false;\n      }\n      state = nextState;\n    }\n    return a.isAccept(state);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c84485629d80d203608e8975a1139de9933cc38","date":1403166128,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/Operations#run(Automaton,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns true if the given string is accepted by the automaton.  The input must be deterministic.\n   * <p>\n   * Complexity: linear in the length of the string.\n   * <p>\n   * <b>Note:</b> for full performance, use the {@link RunAutomaton} class.\n   */\n  public static boolean run(Automaton a, String s) {\n    assert a.isDeterministic();\n    int state = 0;\n    for (int i = 0, cp = 0; i < s.length(); i += Character.charCount(cp)) {\n      int nextState = a.step(state, cp = s.codePointAt(i));\n      if (nextState == -1) {\n        return false;\n      }\n      state = nextState;\n    }\n    return a.isAccept(state);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5c84485629d80d203608e8975a1139de9933cc38":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5c84485629d80d203608e8975a1139de9933cc38"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96","5c84485629d80d203608e8975a1139de9933cc38"],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["5c84485629d80d203608e8975a1139de9933cc38"],"5c84485629d80d203608e8975a1139de9933cc38":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}