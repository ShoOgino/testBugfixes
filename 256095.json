{"path":"lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40NormsWriter#merge(MergeState).mjava","commits":[{"id":"a0ae5e3ed1232483b7b8a014f175a5fe43595982","date":1324062192,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40NormsWriter#merge(MergeState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/lucene40/Lucene40NormsWriter#merge(MergeState).mjava","sourceNew":"  /** we override merge and bulk-merge norms when there are no deletions */\n  @Override\n  public int merge(MergeState mergeState) throws IOException {\n    int numMergedDocs = 0;\n    for (FieldInfo fi : mergeState.fieldInfos) {\n      if (fi.isIndexed && !fi.omitNorms) {\n        startField(fi);\n        int numMergedDocsForField = 0;\n        for (MergeState.IndexReaderAndLiveDocs reader : mergeState.readers) {\n          final int maxDoc = reader.reader.maxDoc();\n          byte normBuffer[] = reader.reader.norms(fi.name);\n          if (normBuffer == null) {\n            // Can be null if this segment doesn't have\n            // any docs with this field\n            normBuffer = new byte[maxDoc];\n            Arrays.fill(normBuffer, (byte)0);\n          }\n          if (reader.liveDocs == null) {\n            //optimized case for segments without deleted docs\n            out.writeBytes(normBuffer, maxDoc);\n            numMergedDocsForField += maxDoc;\n          } else {\n            // this segment has deleted docs, so we have to\n            // check for every doc if it is deleted or not\n            final Bits liveDocs = reader.liveDocs;\n            for (int k = 0; k < maxDoc; k++) {\n              if (liveDocs.get(k)) {\n                numMergedDocsForField++;\n                out.writeByte(normBuffer[k]);\n              }\n            }\n          }\n          mergeState.checkAbort.work(maxDoc);\n        }\n        assert numMergedDocs == 0 || numMergedDocs == numMergedDocsForField;\n        numMergedDocs = numMergedDocsForField;\n      }\n    }\n    finish(numMergedDocs);\n    return numMergedDocs;\n  }\n\n","sourceOld":"  /** we override merge and bulk-merge norms when there are no deletions */\n  @Override\n  public int merge(MergeState mergeState) throws IOException {\n    int numMergedDocs = 0;\n    for (FieldInfo fi : mergeState.fieldInfos) {\n      if (fi.isIndexed && !fi.omitNorms) {\n        startField(fi);\n        int numMergedDocsForField = 0;\n        for (MergeState.IndexReaderAndLiveDocs reader : mergeState.readers) {\n          final int maxDoc = reader.reader.maxDoc();\n          byte normBuffer[] = reader.reader.norms(fi.name);\n          if (normBuffer == null) {\n            // Can be null if this segment doesn't have\n            // any docs with this field\n            normBuffer = new byte[maxDoc];\n            Arrays.fill(normBuffer, (byte)0);\n          }\n          if (reader.liveDocs == null) {\n            //optimized case for segments without deleted docs\n            out.writeBytes(normBuffer, maxDoc);\n            numMergedDocsForField += maxDoc;\n          } else {\n            // this segment has deleted docs, so we have to\n            // check for every doc if it is deleted or not\n            final Bits liveDocs = reader.liveDocs;\n            for (int k = 0; k < maxDoc; k++) {\n              if (liveDocs.get(k)) {\n                numMergedDocsForField++;\n                out.writeByte(normBuffer[k]);\n              }\n            }\n          }\n          mergeState.checkAbort.work(maxDoc);\n        }\n        assert numMergedDocs == 0 || numMergedDocs == numMergedDocsForField;\n        numMergedDocs = numMergedDocsForField;\n      }\n    }\n    finish(numMergedDocs);\n    return numMergedDocs;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f6e3376a314fcc2b31bc46d399c2ff23552b78d6","date":1325780477,"type":4,"author":"Simon Willnauer","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40NormsWriter#merge(MergeState).mjava","sourceNew":null,"sourceOld":"  /** we override merge and bulk-merge norms when there are no deletions */\n  @Override\n  public int merge(MergeState mergeState) throws IOException {\n    int numMergedDocs = 0;\n    for (FieldInfo fi : mergeState.fieldInfos) {\n      if (fi.isIndexed && !fi.omitNorms) {\n        startField(fi);\n        int numMergedDocsForField = 0;\n        for (MergeState.IndexReaderAndLiveDocs reader : mergeState.readers) {\n          final int maxDoc = reader.reader.maxDoc();\n          byte normBuffer[] = reader.reader.norms(fi.name);\n          if (normBuffer == null) {\n            // Can be null if this segment doesn't have\n            // any docs with this field\n            normBuffer = new byte[maxDoc];\n            Arrays.fill(normBuffer, (byte)0);\n          }\n          if (reader.liveDocs == null) {\n            //optimized case for segments without deleted docs\n            out.writeBytes(normBuffer, maxDoc);\n            numMergedDocsForField += maxDoc;\n          } else {\n            // this segment has deleted docs, so we have to\n            // check for every doc if it is deleted or not\n            final Bits liveDocs = reader.liveDocs;\n            for (int k = 0; k < maxDoc; k++) {\n              if (liveDocs.get(k)) {\n                numMergedDocsForField++;\n                out.writeByte(normBuffer[k]);\n              }\n            }\n          }\n          mergeState.checkAbort.work(maxDoc);\n        }\n        assert numMergedDocs == 0 || numMergedDocs == numMergedDocsForField;\n        numMergedDocs = numMergedDocsForField;\n      }\n    }\n    finish(numMergedDocs);\n    return numMergedDocs;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f6e3376a314fcc2b31bc46d399c2ff23552b78d6":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f6e3376a314fcc2b31bc46d399c2ff23552b78d6"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"f6e3376a314fcc2b31bc46d399c2ff23552b78d6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["f6e3376a314fcc2b31bc46d399c2ff23552b78d6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}