{"path":"lucene/core/src/test/org/apache/lucene/search/similarities/TestBM25Similarity#testIllegalK1().mjava","commits":[{"id":"85e2118127fec8e74070b51e5f4cfdf662927763","date":1453152049,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/similarities/TestBM25Similarity#testIllegalK1().mjava","pathOld":"/dev/null","sourceNew":"  public void testIllegalK1() {\n    try {\n      new BM25Similarity(Float.POSITIVE_INFINITY, 0.75f);\n    } catch (IllegalArgumentException expected) {\n      assertTrue(expected.getMessage().contains(\"illegal k1 value\"));\n    }\n    \n    try {\n      new BM25Similarity(-1, 0.75f);\n    } catch (IllegalArgumentException expected) {\n      assertTrue(expected.getMessage().contains(\"illegal k1 value\"));\n    }\n    \n    try {\n      new BM25Similarity(Float.NaN, 0.75f);\n    } catch (IllegalArgumentException expected) {\n      assertTrue(expected.getMessage().contains(\"illegal k1 value\"));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["05fe562aa248790944d43cdd478f512572835ba0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"05fe562aa248790944d43cdd478f512572835ba0","date":1455901667,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/similarities/TestBM25Similarity#testIllegalK1().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/similarities/TestBM25Similarity#testIllegalK1().mjava","sourceNew":"  public void testIllegalK1() {\n    IllegalArgumentException expected = expectThrows(IllegalArgumentException.class, () -> {\n      new BM25Similarity(Float.POSITIVE_INFINITY, 0.75f);\n    });\n    assertTrue(expected.getMessage().contains(\"illegal k1 value\"));\n    \n    expected = expectThrows(IllegalArgumentException.class, () -> {\n      new BM25Similarity(-1, 0.75f);\n    });\n    assertTrue(expected.getMessage().contains(\"illegal k1 value\"));\n    \n    expected = expectThrows(IllegalArgumentException.class, () -> {\n      new BM25Similarity(Float.NaN, 0.75f);\n    });\n    assertTrue(expected.getMessage().contains(\"illegal k1 value\"));\n  }\n\n","sourceOld":"  public void testIllegalK1() {\n    try {\n      new BM25Similarity(Float.POSITIVE_INFINITY, 0.75f);\n    } catch (IllegalArgumentException expected) {\n      assertTrue(expected.getMessage().contains(\"illegal k1 value\"));\n    }\n    \n    try {\n      new BM25Similarity(-1, 0.75f);\n    } catch (IllegalArgumentException expected) {\n      assertTrue(expected.getMessage().contains(\"illegal k1 value\"));\n    }\n    \n    try {\n      new BM25Similarity(Float.NaN, 0.75f);\n    } catch (IllegalArgumentException expected) {\n      assertTrue(expected.getMessage().contains(\"illegal k1 value\"));\n    }\n  }\n\n","bugFix":["85e2118127fec8e74070b51e5f4cfdf662927763"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"05fe562aa248790944d43cdd478f512572835ba0":["85e2118127fec8e74070b51e5f4cfdf662927763"],"85e2118127fec8e74070b51e5f4cfdf662927763":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["05fe562aa248790944d43cdd478f512572835ba0"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["85e2118127fec8e74070b51e5f4cfdf662927763"],"05fe562aa248790944d43cdd478f512572835ba0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"85e2118127fec8e74070b51e5f4cfdf662927763":["05fe562aa248790944d43cdd478f512572835ba0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}