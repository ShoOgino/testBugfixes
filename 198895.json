{"path":"lucene/src/test/org/apache/lucene/index/TestDuelingCodecs#assertDocValuesSource(Source,Source).mjava","commits":[{"id":"0445bcd8433e331f296f5502fc089b336cbac3a6","date":1322630375,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDuelingCodecs#assertDocValuesSource(Source,Source).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * checks source API\n   */\n  public void assertDocValuesSource(Source left, Source right) throws Exception {\n    ValueType leftType = left.type();\n    assertEquals(info, leftType, right.type());\n    switch(leftType) {\n      case VAR_INTS:\n      case FIXED_INTS_8:\n      case FIXED_INTS_16:\n      case FIXED_INTS_32:\n      case FIXED_INTS_64:\n        for (int i = 0; i < leftReader.maxDoc(); i++) {\n          assertEquals(info, left.getInt(i), right.getInt(i));\n        }\n        break;\n      case FLOAT_32:\n      case FLOAT_64:\n        for (int i = 0; i < leftReader.maxDoc(); i++) {\n          assertEquals(info, left.getFloat(i), right.getFloat(i), 0F);\n        }\n        break;\n      case BYTES_FIXED_STRAIGHT:\n      case BYTES_FIXED_DEREF:\n      case BYTES_VAR_STRAIGHT:\n      case BYTES_VAR_DEREF:\n        BytesRef b1 = new BytesRef();\n        BytesRef b2 = new BytesRef();\n        for (int i = 0; i < leftReader.maxDoc(); i++) {\n          left.getBytes(i, b1);\n          right.getBytes(i, b2);\n          assertEquals(info, b1, b2);\n        }\n        break;\n      // TODO: can we test these?\n      case BYTES_VAR_SORTED:\n      case BYTES_FIXED_SORTED:\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e59c344a45b9502f40ec44f5fe4e20ed2291dbe","date":1323449025,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDuelingCodecs#assertDocValuesSource(DocValues.Source,DocValues.Source).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDuelingCodecs#assertDocValuesSource(Source,Source).mjava","sourceNew":"  /**\n   * checks source API\n   */\n  public void assertDocValuesSource(DocValues.Source left, DocValues.Source right) throws Exception {\n    DocValues.Type leftType = left.type();\n    assertEquals(info, leftType, right.type());\n    switch(leftType) {\n      case VAR_INTS:\n      case FIXED_INTS_8:\n      case FIXED_INTS_16:\n      case FIXED_INTS_32:\n      case FIXED_INTS_64:\n        for (int i = 0; i < leftReader.maxDoc(); i++) {\n          assertEquals(info, left.getInt(i), right.getInt(i));\n        }\n        break;\n      case FLOAT_32:\n      case FLOAT_64:\n        for (int i = 0; i < leftReader.maxDoc(); i++) {\n          assertEquals(info, left.getFloat(i), right.getFloat(i), 0F);\n        }\n        break;\n      case BYTES_FIXED_STRAIGHT:\n      case BYTES_FIXED_DEREF:\n      case BYTES_VAR_STRAIGHT:\n      case BYTES_VAR_DEREF:\n        BytesRef b1 = new BytesRef();\n        BytesRef b2 = new BytesRef();\n        for (int i = 0; i < leftReader.maxDoc(); i++) {\n          left.getBytes(i, b1);\n          right.getBytes(i, b2);\n          assertEquals(info, b1, b2);\n        }\n        break;\n      // TODO: can we test these?\n      case BYTES_VAR_SORTED:\n      case BYTES_FIXED_SORTED:\n    }\n  }\n\n","sourceOld":"  /**\n   * checks source API\n   */\n  public void assertDocValuesSource(Source left, Source right) throws Exception {\n    ValueType leftType = left.type();\n    assertEquals(info, leftType, right.type());\n    switch(leftType) {\n      case VAR_INTS:\n      case FIXED_INTS_8:\n      case FIXED_INTS_16:\n      case FIXED_INTS_32:\n      case FIXED_INTS_64:\n        for (int i = 0; i < leftReader.maxDoc(); i++) {\n          assertEquals(info, left.getInt(i), right.getInt(i));\n        }\n        break;\n      case FLOAT_32:\n      case FLOAT_64:\n        for (int i = 0; i < leftReader.maxDoc(); i++) {\n          assertEquals(info, left.getFloat(i), right.getFloat(i), 0F);\n        }\n        break;\n      case BYTES_FIXED_STRAIGHT:\n      case BYTES_FIXED_DEREF:\n      case BYTES_VAR_STRAIGHT:\n      case BYTES_VAR_DEREF:\n        BytesRef b1 = new BytesRef();\n        BytesRef b2 = new BytesRef();\n        for (int i = 0; i < leftReader.maxDoc(); i++) {\n          left.getBytes(i, b1);\n          right.getBytes(i, b2);\n          assertEquals(info, b1, b2);\n        }\n        break;\n      // TODO: can we test these?\n      case BYTES_VAR_SORTED:\n      case BYTES_FIXED_SORTED:\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d638301ad1cfcae567b681b893bc8781f0ee48a5","date":1323801546,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDuelingCodecs#assertDocValuesSource(DocValues.Source,DocValues.Source).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDuelingCodecs#assertDocValuesSource(Source,Source).mjava","sourceNew":"  /**\n   * checks source API\n   */\n  public void assertDocValuesSource(DocValues.Source left, DocValues.Source right) throws Exception {\n    DocValues.Type leftType = left.type();\n    assertEquals(info, leftType, right.type());\n    switch(leftType) {\n      case VAR_INTS:\n      case FIXED_INTS_8:\n      case FIXED_INTS_16:\n      case FIXED_INTS_32:\n      case FIXED_INTS_64:\n        for (int i = 0; i < leftReader.maxDoc(); i++) {\n          assertEquals(info, left.getInt(i), right.getInt(i));\n        }\n        break;\n      case FLOAT_32:\n      case FLOAT_64:\n        for (int i = 0; i < leftReader.maxDoc(); i++) {\n          assertEquals(info, left.getFloat(i), right.getFloat(i), 0F);\n        }\n        break;\n      case BYTES_FIXED_STRAIGHT:\n      case BYTES_FIXED_DEREF:\n      case BYTES_VAR_STRAIGHT:\n      case BYTES_VAR_DEREF:\n        BytesRef b1 = new BytesRef();\n        BytesRef b2 = new BytesRef();\n        for (int i = 0; i < leftReader.maxDoc(); i++) {\n          left.getBytes(i, b1);\n          right.getBytes(i, b2);\n          assertEquals(info, b1, b2);\n        }\n        break;\n      // TODO: can we test these?\n      case BYTES_VAR_SORTED:\n      case BYTES_FIXED_SORTED:\n    }\n  }\n\n","sourceOld":"  /**\n   * checks source API\n   */\n  public void assertDocValuesSource(Source left, Source right) throws Exception {\n    ValueType leftType = left.type();\n    assertEquals(info, leftType, right.type());\n    switch(leftType) {\n      case VAR_INTS:\n      case FIXED_INTS_8:\n      case FIXED_INTS_16:\n      case FIXED_INTS_32:\n      case FIXED_INTS_64:\n        for (int i = 0; i < leftReader.maxDoc(); i++) {\n          assertEquals(info, left.getInt(i), right.getInt(i));\n        }\n        break;\n      case FLOAT_32:\n      case FLOAT_64:\n        for (int i = 0; i < leftReader.maxDoc(); i++) {\n          assertEquals(info, left.getFloat(i), right.getFloat(i), 0F);\n        }\n        break;\n      case BYTES_FIXED_STRAIGHT:\n      case BYTES_FIXED_DEREF:\n      case BYTES_VAR_STRAIGHT:\n      case BYTES_VAR_DEREF:\n        BytesRef b1 = new BytesRef();\n        BytesRef b2 = new BytesRef();\n        for (int i = 0; i < leftReader.maxDoc(); i++) {\n          left.getBytes(i, b1);\n          right.getBytes(i, b2);\n          assertEquals(info, b1, b2);\n        }\n        break;\n      // TODO: can we test these?\n      case BYTES_VAR_SORTED:\n      case BYTES_FIXED_SORTED:\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0445bcd8433e331f296f5502fc089b336cbac3a6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1e59c344a45b9502f40ec44f5fe4e20ed2291dbe":["0445bcd8433e331f296f5502fc089b336cbac3a6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d638301ad1cfcae567b681b893bc8781f0ee48a5"],"d638301ad1cfcae567b681b893bc8781f0ee48a5":["0445bcd8433e331f296f5502fc089b336cbac3a6","1e59c344a45b9502f40ec44f5fe4e20ed2291dbe"]},"commit2Childs":{"0445bcd8433e331f296f5502fc089b336cbac3a6":["1e59c344a45b9502f40ec44f5fe4e20ed2291dbe","d638301ad1cfcae567b681b893bc8781f0ee48a5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0445bcd8433e331f296f5502fc089b336cbac3a6"],"1e59c344a45b9502f40ec44f5fe4e20ed2291dbe":["d638301ad1cfcae567b681b893bc8781f0ee48a5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"d638301ad1cfcae567b681b893bc8781f0ee48a5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}