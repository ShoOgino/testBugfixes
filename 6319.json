{"path":"lucene/facet/src/test/org/apache/lucene/facet/search/DrillDownTest#testQuery().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/DrillDownTest#testQuery().mjava","pathOld":"modules/facet/src/test/org/apache/lucene/facet/search/DrillDownTest#testQuery().mjava","sourceNew":"  @Test\n  public void testQuery() throws IOException {\n    IndexSearcher searcher = newSearcher(reader);\n\n    // Making sure the query yields 25 documents with the facet \"a\"\n    Query q = DrillDown.query(defaultParams, new CategoryPath(\"a\"));\n    TopDocs docs = searcher.search(q, 100);\n    assertEquals(25, docs.totalHits);\n    \n    // Making sure the query yields 5 documents with the facet \"b\" and the\n    // previous (facet \"a\") query as a base query\n    Query q2 = DrillDown.query(defaultParams, q, new CategoryPath(\"b\"));\n    docs = searcher.search(q2, 100);\n    assertEquals(5, docs.totalHits);\n\n    // Making sure that a query of both facet \"a\" and facet \"b\" yields 5 results\n    Query q3 = DrillDown.query(defaultParams, new CategoryPath(\"a\"), new CategoryPath(\"b\"));\n    docs = searcher.search(q3, 100);\n    assertEquals(5, docs.totalHits);\n    \n    // Check that content:foo (which yields 50% results) and facet/b (which yields 20%)\n    // would gather together 10 results (10%..) \n    Query fooQuery = new TermQuery(new Term(\"content\", \"foo\"));\n    Query q4 = DrillDown.query(defaultParams, fooQuery, new CategoryPath(\"b\"));\n    docs = searcher.search(q4, 100);\n    assertEquals(10, docs.totalHits);\n  }\n\n","sourceOld":"  @Test\n  public void testQuery() throws IOException {\n    IndexSearcher searcher = newSearcher(reader);\n\n    // Making sure the query yields 25 documents with the facet \"a\"\n    Query q = DrillDown.query(defaultParams, new CategoryPath(\"a\"));\n    TopDocs docs = searcher.search(q, 100);\n    assertEquals(25, docs.totalHits);\n    \n    // Making sure the query yields 5 documents with the facet \"b\" and the\n    // previous (facet \"a\") query as a base query\n    Query q2 = DrillDown.query(defaultParams, q, new CategoryPath(\"b\"));\n    docs = searcher.search(q2, 100);\n    assertEquals(5, docs.totalHits);\n\n    // Making sure that a query of both facet \"a\" and facet \"b\" yields 5 results\n    Query q3 = DrillDown.query(defaultParams, new CategoryPath(\"a\"), new CategoryPath(\"b\"));\n    docs = searcher.search(q3, 100);\n    assertEquals(5, docs.totalHits);\n    \n    // Check that content:foo (which yields 50% results) and facet/b (which yields 20%)\n    // would gather together 10 results (10%..) \n    Query fooQuery = new TermQuery(new Term(\"content\", \"foo\"));\n    Query q4 = DrillDown.query(defaultParams, fooQuery, new CategoryPath(\"b\"));\n    docs = searcher.search(q4, 100);\n    assertEquals(10, docs.totalHits);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9b1f09a9e58dfa9a85edd07038d129b0dee0ac0","date":1354615545,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/DrillDownTest#testQuery().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/DrillDownTest#testQuery().mjava","sourceNew":"  @Test\n  public void testQuery() throws IOException {\n    IndexSearcher searcher = newSearcher(reader);\n\n    // Making sure the query yields 25 documents with the facet \"a\"\n    Query q = DrillDown.query(defaultParams, null, new CategoryPath(\"a\"));\n    TopDocs docs = searcher.search(q, 100);\n    assertEquals(25, docs.totalHits);\n    \n    // Making sure the query yields 5 documents with the facet \"b\" and the\n    // previous (facet \"a\") query as a base query\n    Query q2 = DrillDown.query(defaultParams, q, new CategoryPath(\"b\"));\n    docs = searcher.search(q2, 100);\n    assertEquals(5, docs.totalHits);\n\n    // Making sure that a query of both facet \"a\" and facet \"b\" yields 5 results\n    Query q3 = DrillDown.query(defaultParams, null, new CategoryPath(\"a\"), new CategoryPath(\"b\"));\n    docs = searcher.search(q3, 100);\n    assertEquals(5, docs.totalHits);\n    \n    // Check that content:foo (which yields 50% results) and facet/b (which yields 20%)\n    // would gather together 10 results (10%..) \n    Query fooQuery = new TermQuery(new Term(\"content\", \"foo\"));\n    Query q4 = DrillDown.query(defaultParams, fooQuery, new CategoryPath(\"b\"));\n    docs = searcher.search(q4, 100);\n    assertEquals(10, docs.totalHits);\n  }\n\n","sourceOld":"  @Test\n  public void testQuery() throws IOException {\n    IndexSearcher searcher = newSearcher(reader);\n\n    // Making sure the query yields 25 documents with the facet \"a\"\n    Query q = DrillDown.query(defaultParams, new CategoryPath(\"a\"));\n    TopDocs docs = searcher.search(q, 100);\n    assertEquals(25, docs.totalHits);\n    \n    // Making sure the query yields 5 documents with the facet \"b\" and the\n    // previous (facet \"a\") query as a base query\n    Query q2 = DrillDown.query(defaultParams, q, new CategoryPath(\"b\"));\n    docs = searcher.search(q2, 100);\n    assertEquals(5, docs.totalHits);\n\n    // Making sure that a query of both facet \"a\" and facet \"b\" yields 5 results\n    Query q3 = DrillDown.query(defaultParams, new CategoryPath(\"a\"), new CategoryPath(\"b\"));\n    docs = searcher.search(q3, 100);\n    assertEquals(5, docs.totalHits);\n    \n    // Check that content:foo (which yields 50% results) and facet/b (which yields 20%)\n    // would gather together 10 results (10%..) \n    Query fooQuery = new TermQuery(new Term(\"content\", \"foo\"));\n    Query q4 = DrillDown.query(defaultParams, fooQuery, new CategoryPath(\"b\"));\n    docs = searcher.search(q4, 100);\n    assertEquals(10, docs.totalHits);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/DrillDownTest#testQuery().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/DrillDownTest#testQuery().mjava","sourceNew":"  @Test\n  public void testQuery() throws IOException {\n    IndexSearcher searcher = newSearcher(reader);\n\n    // Making sure the query yields 25 documents with the facet \"a\"\n    Query q = DrillDown.query(defaultParams, null, new CategoryPath(\"a\"));\n    TopDocs docs = searcher.search(q, 100);\n    assertEquals(25, docs.totalHits);\n    \n    // Making sure the query yields 5 documents with the facet \"b\" and the\n    // previous (facet \"a\") query as a base query\n    Query q2 = DrillDown.query(defaultParams, q, new CategoryPath(\"b\"));\n    docs = searcher.search(q2, 100);\n    assertEquals(5, docs.totalHits);\n\n    // Making sure that a query of both facet \"a\" and facet \"b\" yields 5 results\n    Query q3 = DrillDown.query(defaultParams, null, new CategoryPath(\"a\"), new CategoryPath(\"b\"));\n    docs = searcher.search(q3, 100);\n    assertEquals(5, docs.totalHits);\n    \n    // Check that content:foo (which yields 50% results) and facet/b (which yields 20%)\n    // would gather together 10 results (10%..) \n    Query fooQuery = new TermQuery(new Term(\"content\", \"foo\"));\n    Query q4 = DrillDown.query(defaultParams, fooQuery, new CategoryPath(\"b\"));\n    docs = searcher.search(q4, 100);\n    assertEquals(10, docs.totalHits);\n  }\n\n","sourceOld":"  @Test\n  public void testQuery() throws IOException {\n    IndexSearcher searcher = newSearcher(reader);\n\n    // Making sure the query yields 25 documents with the facet \"a\"\n    Query q = DrillDown.query(defaultParams, new CategoryPath(\"a\"));\n    TopDocs docs = searcher.search(q, 100);\n    assertEquals(25, docs.totalHits);\n    \n    // Making sure the query yields 5 documents with the facet \"b\" and the\n    // previous (facet \"a\") query as a base query\n    Query q2 = DrillDown.query(defaultParams, q, new CategoryPath(\"b\"));\n    docs = searcher.search(q2, 100);\n    assertEquals(5, docs.totalHits);\n\n    // Making sure that a query of both facet \"a\" and facet \"b\" yields 5 results\n    Query q3 = DrillDown.query(defaultParams, new CategoryPath(\"a\"), new CategoryPath(\"b\"));\n    docs = searcher.search(q3, 100);\n    assertEquals(5, docs.totalHits);\n    \n    // Check that content:foo (which yields 50% results) and facet/b (which yields 20%)\n    // would gather together 10 results (10%..) \n    Query fooQuery = new TermQuery(new Term(\"content\", \"foo\"));\n    Query q4 = DrillDown.query(defaultParams, fooQuery, new CategoryPath(\"b\"));\n    docs = searcher.search(q4, 100);\n    assertEquals(10, docs.totalHits);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9fa7a3db4fa6c77f454964f515841c097ca09212","date":1359119468,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/DrillDownTest#testQuery().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/DrillDownTest#testQuery().mjava","sourceNew":"  @Test\n  public void testQuery() throws IOException {\n    IndexSearcher searcher = newSearcher(reader);\n\n    // Making sure the query yields 25 documents with the facet \"a\"\n    Query q = DrillDown.query(defaultParams, null, Occur.MUST, new CategoryPath(\"a\"));\n    TopDocs docs = searcher.search(q, 100);\n    assertEquals(25, docs.totalHits);\n    \n    // Making sure the query yields 5 documents with the facet \"b\" and the\n    // previous (facet \"a\") query as a base query\n    Query q2 = DrillDown.query(defaultParams, q, Occur.MUST, new CategoryPath(\"b\"));\n    docs = searcher.search(q2, 100);\n    assertEquals(5, docs.totalHits);\n\n    // Making sure that a query of both facet \"a\" and facet \"b\" yields 5 results\n    Query q3 = DrillDown.query(defaultParams, null, Occur.MUST, new CategoryPath(\"a\"), new CategoryPath(\"b\"));\n    docs = searcher.search(q3, 100);\n    assertEquals(5, docs.totalHits);\n    \n    // Check that content:foo (which yields 50% results) and facet/b (which yields 20%)\n    // would gather together 10 results (10%..) \n    Query fooQuery = new TermQuery(new Term(\"content\", \"foo\"));\n    Query q4 = DrillDown.query(defaultParams, fooQuery, Occur.MUST, new CategoryPath(\"b\"));\n    docs = searcher.search(q4, 100);\n    assertEquals(10, docs.totalHits);\n  }\n\n","sourceOld":"  @Test\n  public void testQuery() throws IOException {\n    IndexSearcher searcher = newSearcher(reader);\n\n    // Making sure the query yields 25 documents with the facet \"a\"\n    Query q = DrillDown.query(defaultParams, null, new CategoryPath(\"a\"));\n    TopDocs docs = searcher.search(q, 100);\n    assertEquals(25, docs.totalHits);\n    \n    // Making sure the query yields 5 documents with the facet \"b\" and the\n    // previous (facet \"a\") query as a base query\n    Query q2 = DrillDown.query(defaultParams, q, new CategoryPath(\"b\"));\n    docs = searcher.search(q2, 100);\n    assertEquals(5, docs.totalHits);\n\n    // Making sure that a query of both facet \"a\" and facet \"b\" yields 5 results\n    Query q3 = DrillDown.query(defaultParams, null, new CategoryPath(\"a\"), new CategoryPath(\"b\"));\n    docs = searcher.search(q3, 100);\n    assertEquals(5, docs.totalHits);\n    \n    // Check that content:foo (which yields 50% results) and facet/b (which yields 20%)\n    // would gather together 10 results (10%..) \n    Query fooQuery = new TermQuery(new Term(\"content\", \"foo\"));\n    Query q4 = DrillDown.query(defaultParams, fooQuery, new CategoryPath(\"b\"));\n    docs = searcher.search(q4, 100);\n    assertEquals(10, docs.totalHits);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dd45d4a2ee01a1932d33eec42f5272c2402da679","date":1359316912,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/DrillDownTest#testQuery().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/DrillDownTest#testQuery().mjava","sourceNew":"  @Test\n  public void testQuery() throws IOException {\n    IndexSearcher searcher = newSearcher(reader);\n\n    // Making sure the query yields 25 documents with the facet \"a\"\n    Query q = DrillDown.query(defaultParams, null, Occur.MUST, new CategoryPath(\"a\"));\n    TopDocs docs = searcher.search(q, 100);\n    assertEquals(25, docs.totalHits);\n    \n    // Making sure the query yields 5 documents with the facet \"b\" and the\n    // previous (facet \"a\") query as a base query\n    Query q2 = DrillDown.query(defaultParams, q, Occur.MUST, new CategoryPath(\"b\"));\n    docs = searcher.search(q2, 100);\n    assertEquals(5, docs.totalHits);\n\n    // Making sure that a query of both facet \"a\" and facet \"b\" yields 5 results\n    Query q3 = DrillDown.query(defaultParams, null, Occur.MUST, new CategoryPath(\"a\"), new CategoryPath(\"b\"));\n    docs = searcher.search(q3, 100);\n    assertEquals(5, docs.totalHits);\n    \n    // Check that content:foo (which yields 50% results) and facet/b (which yields 20%)\n    // would gather together 10 results (10%..) \n    Query fooQuery = new TermQuery(new Term(\"content\", \"foo\"));\n    Query q4 = DrillDown.query(defaultParams, fooQuery, Occur.MUST, new CategoryPath(\"b\"));\n    docs = searcher.search(q4, 100);\n    assertEquals(10, docs.totalHits);\n  }\n\n","sourceOld":"  @Test\n  public void testQuery() throws IOException {\n    IndexSearcher searcher = newSearcher(reader);\n\n    // Making sure the query yields 25 documents with the facet \"a\"\n    Query q = DrillDown.query(defaultParams, null, new CategoryPath(\"a\"));\n    TopDocs docs = searcher.search(q, 100);\n    assertEquals(25, docs.totalHits);\n    \n    // Making sure the query yields 5 documents with the facet \"b\" and the\n    // previous (facet \"a\") query as a base query\n    Query q2 = DrillDown.query(defaultParams, q, new CategoryPath(\"b\"));\n    docs = searcher.search(q2, 100);\n    assertEquals(5, docs.totalHits);\n\n    // Making sure that a query of both facet \"a\" and facet \"b\" yields 5 results\n    Query q3 = DrillDown.query(defaultParams, null, new CategoryPath(\"a\"), new CategoryPath(\"b\"));\n    docs = searcher.search(q3, 100);\n    assertEquals(5, docs.totalHits);\n    \n    // Check that content:foo (which yields 50% results) and facet/b (which yields 20%)\n    // would gather together 10 results (10%..) \n    Query fooQuery = new TermQuery(new Term(\"content\", \"foo\"));\n    Query q4 = DrillDown.query(defaultParams, fooQuery, new CategoryPath(\"b\"));\n    docs = searcher.search(q4, 100);\n    assertEquals(10, docs.totalHits);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f793470bad5ce8422502e33eaae65fc6a3271bd2","date":1360479442,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/DrillDownQueryTest#testQuery().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/DrillDownTest#testQuery().mjava","sourceNew":"  @Test\n  public void testQuery() throws IOException {\n    IndexSearcher searcher = newSearcher(reader);\n\n    // Making sure the query yields 25 documents with the facet \"a\"\n    DrillDownQuery q = new DrillDownQuery(defaultParams);\n    q.add(new CategoryPath(\"a\"));\n    TopDocs docs = searcher.search(q, 100);\n    assertEquals(25, docs.totalHits);\n    \n    // Making sure the query yields 5 documents with the facet \"b\" and the\n    // previous (facet \"a\") query as a base query\n    DrillDownQuery q2 = new DrillDownQuery(defaultParams, q);\n    q2.add(new CategoryPath(\"b\"));\n    docs = searcher.search(q2, 100);\n    assertEquals(5, docs.totalHits);\n\n    // Making sure that a query of both facet \"a\" and facet \"b\" yields 5 results\n    DrillDownQuery q3 = new DrillDownQuery(defaultParams);\n    q3.add(new CategoryPath(\"a\"));\n    q3.add(new CategoryPath(\"b\"));\n    docs = searcher.search(q3, 100);\n    \n    assertEquals(5, docs.totalHits);\n    // Check that content:foo (which yields 50% results) and facet/b (which yields 20%)\n    // would gather together 10 results (10%..) \n    Query fooQuery = new TermQuery(new Term(\"content\", \"foo\"));\n    DrillDownQuery q4 = new DrillDownQuery(defaultParams, fooQuery);\n    q4.add(new CategoryPath(\"b\"));\n    docs = searcher.search(q4, 100);\n    assertEquals(10, docs.totalHits);\n  }\n\n","sourceOld":"  @Test\n  public void testQuery() throws IOException {\n    IndexSearcher searcher = newSearcher(reader);\n\n    // Making sure the query yields 25 documents with the facet \"a\"\n    Query q = DrillDown.query(defaultParams, null, Occur.MUST, new CategoryPath(\"a\"));\n    TopDocs docs = searcher.search(q, 100);\n    assertEquals(25, docs.totalHits);\n    \n    // Making sure the query yields 5 documents with the facet \"b\" and the\n    // previous (facet \"a\") query as a base query\n    Query q2 = DrillDown.query(defaultParams, q, Occur.MUST, new CategoryPath(\"b\"));\n    docs = searcher.search(q2, 100);\n    assertEquals(5, docs.totalHits);\n\n    // Making sure that a query of both facet \"a\" and facet \"b\" yields 5 results\n    Query q3 = DrillDown.query(defaultParams, null, Occur.MUST, new CategoryPath(\"a\"), new CategoryPath(\"b\"));\n    docs = searcher.search(q3, 100);\n    assertEquals(5, docs.totalHits);\n    \n    // Check that content:foo (which yields 50% results) and facet/b (which yields 20%)\n    // would gather together 10 results (10%..) \n    Query fooQuery = new TermQuery(new Term(\"content\", \"foo\"));\n    Query q4 = DrillDown.query(defaultParams, fooQuery, Occur.MUST, new CategoryPath(\"b\"));\n    docs = searcher.search(q4, 100);\n    assertEquals(10, docs.totalHits);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9fa7a3db4fa6c77f454964f515841c097ca09212":["e9b1f09a9e58dfa9a85edd07038d129b0dee0ac0"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e9b1f09a9e58dfa9a85edd07038d129b0dee0ac0":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["b89678825b68eccaf09e6ab71675fc0b0af1e099","e9b1f09a9e58dfa9a85edd07038d129b0dee0ac0"],"dd45d4a2ee01a1932d33eec42f5272c2402da679":["407687e67faf6e1f02a211ca078d8e3eed631027","9fa7a3db4fa6c77f454964f515841c097ca09212"],"f793470bad5ce8422502e33eaae65fc6a3271bd2":["9fa7a3db4fa6c77f454964f515841c097ca09212"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f793470bad5ce8422502e33eaae65fc6a3271bd2"]},"commit2Childs":{"9fa7a3db4fa6c77f454964f515841c097ca09212":["dd45d4a2ee01a1932d33eec42f5272c2402da679","f793470bad5ce8422502e33eaae65fc6a3271bd2"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["e9b1f09a9e58dfa9a85edd07038d129b0dee0ac0","407687e67faf6e1f02a211ca078d8e3eed631027"],"e9b1f09a9e58dfa9a85edd07038d129b0dee0ac0":["9fa7a3db4fa6c77f454964f515841c097ca09212","407687e67faf6e1f02a211ca078d8e3eed631027"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"407687e67faf6e1f02a211ca078d8e3eed631027":["dd45d4a2ee01a1932d33eec42f5272c2402da679"],"dd45d4a2ee01a1932d33eec42f5272c2402da679":[],"f793470bad5ce8422502e33eaae65fc6a3271bd2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["dd45d4a2ee01a1932d33eec42f5272c2402da679","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}