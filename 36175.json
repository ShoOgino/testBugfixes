{"path":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#newField(Random,String,String,FieldType).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#newField(Random,String,String,FieldType).mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/util/LuceneTestCase#newField(Random,String,String,FieldType).mjava","sourceNew":"  public static Field newField(Random random, String name, String value, FieldType type) {\n    if (usually(random) || !type.indexed()) {\n      // most of the time, don't modify the params\n      return new Field(name, value, type);\n    }\n\n    // TODO: once all core & test codecs can index\n    // offsets, sometimes randomly turn on offsets if we are\n    // already indexing positions...\n\n    FieldType newType = new FieldType(type);\n    if (!newType.stored() && random.nextBoolean()) {\n      newType.setStored(true); // randomly store it\n    }\n\n    if (!newType.storeTermVectors() && random.nextBoolean()) {\n      newType.setStoreTermVectors(true);\n      if (!newType.storeTermVectorOffsets()) {\n        newType.setStoreTermVectorOffsets(random.nextBoolean());\n      }\n      if (!newType.storeTermVectorPositions()) {\n        newType.setStoreTermVectorPositions(random.nextBoolean());\n      }\n    }\n\n    // TODO: we need to do this, but smarter, ie, most of\n    // the time we set the same value for a given field but\n    // sometimes (rarely) we change it up:\n    /*\n    if (newType.omitNorms()) {\n      newType.setOmitNorms(random.nextBoolean());\n    }\n    */\n    \n    return new Field(name, value, newType);\n  }\n\n","sourceOld":"  public static Field newField(Random random, String name, String value, FieldType type) {\n    if (usually(random) || !type.indexed()) {\n      // most of the time, don't modify the params\n      return new Field(name, value, type);\n    }\n\n    // TODO: once all core & test codecs can index\n    // offsets, sometimes randomly turn on offsets if we are\n    // already indexing positions...\n\n    FieldType newType = new FieldType(type);\n    if (!newType.stored() && random.nextBoolean()) {\n      newType.setStored(true); // randomly store it\n    }\n\n    if (!newType.storeTermVectors() && random.nextBoolean()) {\n      newType.setStoreTermVectors(true);\n      if (!newType.storeTermVectorOffsets()) {\n        newType.setStoreTermVectorOffsets(random.nextBoolean());\n      }\n      if (!newType.storeTermVectorPositions()) {\n        newType.setStoreTermVectorPositions(random.nextBoolean());\n      }\n    }\n\n    // TODO: we need to do this, but smarter, ie, most of\n    // the time we set the same value for a given field but\n    // sometimes (rarely) we change it up:\n    /*\n    if (newType.omitNorms()) {\n      newType.setOmitNorms(random.nextBoolean());\n    }\n    */\n    \n    return new Field(name, value, newType);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b11100924615fd39ef80bc5cd463a565129b0533","date":1337695217,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#newField(Random,String,String,FieldType).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#newField(Random,String,String,FieldType).mjava","sourceNew":"  public static Field newField(Random random, String name, String value, FieldType type) {\n    name = new String(name);\n    if (usually(random) || !type.indexed()) {\n      // most of the time, don't modify the params\n      return new Field(name, value, type);\n    }\n\n    // TODO: once all core & test codecs can index\n    // offsets, sometimes randomly turn on offsets if we are\n    // already indexing positions...\n\n    FieldType newType = new FieldType(type);\n    if (!newType.stored() && random.nextBoolean()) {\n      newType.setStored(true); // randomly store it\n    }\n\n    if (!newType.storeTermVectors() && random.nextBoolean()) {\n      newType.setStoreTermVectors(true);\n      if (!newType.storeTermVectorOffsets()) {\n        newType.setStoreTermVectorOffsets(random.nextBoolean());\n      }\n      if (!newType.storeTermVectorPositions()) {\n        newType.setStoreTermVectorPositions(random.nextBoolean());\n      }\n    }\n\n    // TODO: we need to do this, but smarter, ie, most of\n    // the time we set the same value for a given field but\n    // sometimes (rarely) we change it up:\n    /*\n    if (newType.omitNorms()) {\n      newType.setOmitNorms(random.nextBoolean());\n    }\n    */\n    \n    return new Field(name, value, newType);\n  }\n\n","sourceOld":"  public static Field newField(Random random, String name, String value, FieldType type) {\n    if (usually(random) || !type.indexed()) {\n      // most of the time, don't modify the params\n      return new Field(name, value, type);\n    }\n\n    // TODO: once all core & test codecs can index\n    // offsets, sometimes randomly turn on offsets if we are\n    // already indexing positions...\n\n    FieldType newType = new FieldType(type);\n    if (!newType.stored() && random.nextBoolean()) {\n      newType.setStored(true); // randomly store it\n    }\n\n    if (!newType.storeTermVectors() && random.nextBoolean()) {\n      newType.setStoreTermVectors(true);\n      if (!newType.storeTermVectorOffsets()) {\n        newType.setStoreTermVectorOffsets(random.nextBoolean());\n      }\n      if (!newType.storeTermVectorPositions()) {\n        newType.setStoreTermVectorPositions(random.nextBoolean());\n      }\n    }\n\n    // TODO: we need to do this, but smarter, ie, most of\n    // the time we set the same value for a given field but\n    // sometimes (rarely) we change it up:\n    /*\n    if (newType.omitNorms()) {\n      newType.setOmitNorms(random.nextBoolean());\n    }\n    */\n    \n    return new Field(name, value, newType);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3599646b4d4c346cf74d334813488b8b337b5bf5","date":1337790261,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#newField(Random,String,String,FieldType).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#newField(Random,String,String,FieldType).mjava","sourceNew":"  public static Field newField(Random random, String name, String value, FieldType type) {\n    name = new String(name);\n    if (usually(random) || !type.indexed()) {\n      // most of the time, don't modify the params\n      return new Field(name, value, type);\n    }\n\n    // TODO: once all core & test codecs can index\n    // offsets, sometimes randomly turn on offsets if we are\n    // already indexing positions...\n\n    FieldType newType = new FieldType(type);\n    if (!newType.stored() && random.nextBoolean()) {\n      newType.setStored(true); // randomly store it\n    }\n\n    if (!newType.storeTermVectors() && random.nextBoolean()) {\n      newType.setStoreTermVectors(true);\n      if (!newType.storeTermVectorOffsets()) {\n        newType.setStoreTermVectorOffsets(random.nextBoolean());\n      }\n      if (!newType.storeTermVectorPositions()) {\n        newType.setStoreTermVectorPositions(random.nextBoolean());\n      }\n    }\n\n    // TODO: we need to do this, but smarter, ie, most of\n    // the time we set the same value for a given field but\n    // sometimes (rarely) we change it up:\n    /*\n    if (newType.omitNorms()) {\n      newType.setOmitNorms(random.nextBoolean());\n    }\n    */\n    \n    return new Field(name, value, newType);\n  }\n\n","sourceOld":"  public static Field newField(Random random, String name, String value, FieldType type) {\n    if (usually(random) || !type.indexed()) {\n      // most of the time, don't modify the params\n      return new Field(name, value, type);\n    }\n\n    // TODO: once all core & test codecs can index\n    // offsets, sometimes randomly turn on offsets if we are\n    // already indexing positions...\n\n    FieldType newType = new FieldType(type);\n    if (!newType.stored() && random.nextBoolean()) {\n      newType.setStored(true); // randomly store it\n    }\n\n    if (!newType.storeTermVectors() && random.nextBoolean()) {\n      newType.setStoreTermVectors(true);\n      if (!newType.storeTermVectorOffsets()) {\n        newType.setStoreTermVectorOffsets(random.nextBoolean());\n      }\n      if (!newType.storeTermVectorPositions()) {\n        newType.setStoreTermVectorPositions(random.nextBoolean());\n      }\n    }\n\n    // TODO: we need to do this, but smarter, ie, most of\n    // the time we set the same value for a given field but\n    // sometimes (rarely) we change it up:\n    /*\n    if (newType.omitNorms()) {\n      newType.setOmitNorms(random.nextBoolean());\n    }\n    */\n    \n    return new Field(name, value, newType);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0935c850ea562932997b72c69d93e345f21d7f45","date":1344711506,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#newField(Random,String,String,FieldType).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#newField(Random,String,String,FieldType).mjava","sourceNew":"  public static Field newField(Random random, String name, String value, FieldType type) {\n    name = new String(name);\n    if (usually(random) || !type.indexed()) {\n      // most of the time, don't modify the params\n      return new Field(name, value, type);\n    }\n\n    // TODO: once all core & test codecs can index\n    // offsets, sometimes randomly turn on offsets if we are\n    // already indexing positions...\n\n    FieldType newType = new FieldType(type);\n    if (!newType.stored() && random.nextBoolean()) {\n      newType.setStored(true); // randomly store it\n    }\n\n    if (!newType.storeTermVectors() && random.nextBoolean()) {\n      newType.setStoreTermVectors(true);\n      if (!newType.storeTermVectorOffsets()) {\n        newType.setStoreTermVectorOffsets(random.nextBoolean());\n      }\n      if (!newType.storeTermVectorPositions()) {\n        newType.setStoreTermVectorPositions(random.nextBoolean());\n        \n        if (newType.storeTermVectorPositions() && !newType.storeTermVectorPayloads()) {\n          newType.setStoreTermVectorPayloads(random.nextBoolean());\n        }\n      }\n    }\n\n    // TODO: we need to do this, but smarter, ie, most of\n    // the time we set the same value for a given field but\n    // sometimes (rarely) we change it up:\n    /*\n    if (newType.omitNorms()) {\n      newType.setOmitNorms(random.nextBoolean());\n    }\n    */\n    \n    return new Field(name, value, newType);\n  }\n\n","sourceOld":"  public static Field newField(Random random, String name, String value, FieldType type) {\n    name = new String(name);\n    if (usually(random) || !type.indexed()) {\n      // most of the time, don't modify the params\n      return new Field(name, value, type);\n    }\n\n    // TODO: once all core & test codecs can index\n    // offsets, sometimes randomly turn on offsets if we are\n    // already indexing positions...\n\n    FieldType newType = new FieldType(type);\n    if (!newType.stored() && random.nextBoolean()) {\n      newType.setStored(true); // randomly store it\n    }\n\n    if (!newType.storeTermVectors() && random.nextBoolean()) {\n      newType.setStoreTermVectors(true);\n      if (!newType.storeTermVectorOffsets()) {\n        newType.setStoreTermVectorOffsets(random.nextBoolean());\n      }\n      if (!newType.storeTermVectorPositions()) {\n        newType.setStoreTermVectorPositions(random.nextBoolean());\n      }\n    }\n\n    // TODO: we need to do this, but smarter, ie, most of\n    // the time we set the same value for a given field but\n    // sometimes (rarely) we change it up:\n    /*\n    if (newType.omitNorms()) {\n      newType.setOmitNorms(random.nextBoolean());\n    }\n    */\n    \n    return new Field(name, value, newType);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7869f64c874ebf7f317d22c00baf2b6857797a6","date":1344856617,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#newField(Random,String,String,FieldType).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#newField(Random,String,String,FieldType).mjava","sourceNew":"  public static Field newField(Random random, String name, String value, FieldType type) {\n    name = new String(name);\n    if (usually(random) || !type.indexed()) {\n      // most of the time, don't modify the params\n      return new Field(name, value, type);\n    }\n\n    // TODO: once all core & test codecs can index\n    // offsets, sometimes randomly turn on offsets if we are\n    // already indexing positions...\n\n    FieldType newType = new FieldType(type);\n    if (!newType.stored() && random.nextBoolean()) {\n      newType.setStored(true); // randomly store it\n    }\n\n    if (!newType.storeTermVectors() && random.nextBoolean()) {\n      newType.setStoreTermVectors(true);\n      if (!newType.storeTermVectorOffsets()) {\n        newType.setStoreTermVectorOffsets(random.nextBoolean());\n      }\n      if (!newType.storeTermVectorPositions()) {\n        newType.setStoreTermVectorPositions(random.nextBoolean());\n        \n        if (newType.storeTermVectorPositions() && !newType.storeTermVectorPayloads()) {\n          newType.setStoreTermVectorPayloads(random.nextBoolean());\n        }\n      }\n    }\n\n    // TODO: we need to do this, but smarter, ie, most of\n    // the time we set the same value for a given field but\n    // sometimes (rarely) we change it up:\n    /*\n    if (newType.omitNorms()) {\n      newType.setOmitNorms(random.nextBoolean());\n    }\n    */\n    \n    return new Field(name, value, newType);\n  }\n\n","sourceOld":"  public static Field newField(Random random, String name, String value, FieldType type) {\n    name = new String(name);\n    if (usually(random) || !type.indexed()) {\n      // most of the time, don't modify the params\n      return new Field(name, value, type);\n    }\n\n    // TODO: once all core & test codecs can index\n    // offsets, sometimes randomly turn on offsets if we are\n    // already indexing positions...\n\n    FieldType newType = new FieldType(type);\n    if (!newType.stored() && random.nextBoolean()) {\n      newType.setStored(true); // randomly store it\n    }\n\n    if (!newType.storeTermVectors() && random.nextBoolean()) {\n      newType.setStoreTermVectors(true);\n      if (!newType.storeTermVectorOffsets()) {\n        newType.setStoreTermVectorOffsets(random.nextBoolean());\n      }\n      if (!newType.storeTermVectorPositions()) {\n        newType.setStoreTermVectorPositions(random.nextBoolean());\n      }\n    }\n\n    // TODO: we need to do this, but smarter, ie, most of\n    // the time we set the same value for a given field but\n    // sometimes (rarely) we change it up:\n    /*\n    if (newType.omitNorms()) {\n      newType.setOmitNorms(random.nextBoolean());\n    }\n    */\n    \n    return new Field(name, value, newType);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9","date":1344867506,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#newField(Random,String,String,FieldType).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#newField(Random,String,String,FieldType).mjava","sourceNew":"  public static Field newField(Random random, String name, String value, FieldType type) {\n    name = new String(name);\n    if (usually(random) || !type.indexed()) {\n      // most of the time, don't modify the params\n      return new Field(name, value, type);\n    }\n\n    // TODO: once all core & test codecs can index\n    // offsets, sometimes randomly turn on offsets if we are\n    // already indexing positions...\n\n    FieldType newType = new FieldType(type);\n    if (!newType.stored() && random.nextBoolean()) {\n      newType.setStored(true); // randomly store it\n    }\n\n    if (!newType.storeTermVectors() && random.nextBoolean()) {\n      newType.setStoreTermVectors(true);\n      if (!newType.storeTermVectorOffsets()) {\n        newType.setStoreTermVectorOffsets(random.nextBoolean());\n      }\n      if (!newType.storeTermVectorPositions()) {\n        newType.setStoreTermVectorPositions(random.nextBoolean());\n        \n        if (newType.storeTermVectorPositions() && !newType.storeTermVectorPayloads()) {\n          newType.setStoreTermVectorPayloads(random.nextBoolean());\n        }\n      }\n    }\n\n    // TODO: we need to do this, but smarter, ie, most of\n    // the time we set the same value for a given field but\n    // sometimes (rarely) we change it up:\n    /*\n    if (newType.omitNorms()) {\n      newType.setOmitNorms(random.nextBoolean());\n    }\n    */\n    \n    return new Field(name, value, newType);\n  }\n\n","sourceOld":"  public static Field newField(Random random, String name, String value, FieldType type) {\n    name = new String(name);\n    if (usually(random) || !type.indexed()) {\n      // most of the time, don't modify the params\n      return new Field(name, value, type);\n    }\n\n    // TODO: once all core & test codecs can index\n    // offsets, sometimes randomly turn on offsets if we are\n    // already indexing positions...\n\n    FieldType newType = new FieldType(type);\n    if (!newType.stored() && random.nextBoolean()) {\n      newType.setStored(true); // randomly store it\n    }\n\n    if (!newType.storeTermVectors() && random.nextBoolean()) {\n      newType.setStoreTermVectors(true);\n      if (!newType.storeTermVectorOffsets()) {\n        newType.setStoreTermVectorOffsets(random.nextBoolean());\n      }\n      if (!newType.storeTermVectorPositions()) {\n        newType.setStoreTermVectorPositions(random.nextBoolean());\n      }\n    }\n\n    // TODO: we need to do this, but smarter, ie, most of\n    // the time we set the same value for a given field but\n    // sometimes (rarely) we change it up:\n    /*\n    if (newType.omitNorms()) {\n      newType.setOmitNorms(random.nextBoolean());\n    }\n    */\n    \n    return new Field(name, value, newType);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"52c7e49be259508735752fba88085255014a6ecf","date":1398706273,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#newField(Random,String,String,FieldType).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#newField(Random,String,String,FieldType).mjava","sourceNew":"  public static Field newField(Random random, String name, String value, FieldType type) {\n    name = new String(name);\n    if (usually(random) || !type.indexed()) {\n      // most of the time, don't modify the params\n      fieldNamesSeen.add(name);\n      return new Field(name, value, type);\n    }\n\n    // TODO: once all core & test codecs can index\n    // offsets, sometimes randomly turn on offsets if we are\n    // already indexing positions...\n\n    FieldType newType = new FieldType(type);\n    if (!newType.stored() && random.nextBoolean()) {\n      newType.setStored(true); // randomly store it\n    }\n\n    // Randomly turn on term vector options, but always do\n    // so consistently for the same field name:\n    if (!newType.storeTermVectors() && fieldNamesSeen.contains(name) == false && random.nextBoolean()) {\n      FieldType prev;\n      synchronized(fieldTermVectorOptions) {\n        prev = fieldTermVectorOptions.get(name);\n        if (prev == null) {\n          newType.setStoreTermVectors(true);\n          if (!newType.storeTermVectorPositions()) {\n            newType.setStoreTermVectorPositions(random.nextBoolean());\n        \n            if (newType.storeTermVectorPositions()) {\n              if (!newType.storeTermVectorPayloads()) {\n                newType.setStoreTermVectorPayloads(random.nextBoolean());\n              }\n              if (!newType.storeTermVectorOffsets()) {\n                newType.setStoreTermVectorOffsets(random.nextBoolean());\n              }\n            }\n          }\n          fieldTermVectorOptions.put(name, prev);\n        }\n      }\n\n      if (prev != null) {\n        newType.setStoreTermVectors(prev.storeTermVectors());\n        newType.setStoreTermVectorOffsets(prev.storeTermVectorOffsets());\n        newType.setStoreTermVectorPositions(prev.storeTermVectorPositions());\n        newType.setStoreTermVectorPayloads(prev.storeTermVectorPayloads());\n      }\n      System.out.println(\"  LTC: upgrade name=\" + name + \" type=\" + newType);\n    }\n    newType.freeze();\n\n    // TODO: we need to do this, but smarter, ie, most of\n    // the time we set the same value for a given field but\n    // sometimes (rarely) we change it up:\n    /*\n    if (newType.omitNorms()) {\n      newType.setOmitNorms(random.nextBoolean());\n    }\n    */\n    \n    return new Field(name, value, newType);\n  }\n\n","sourceOld":"  public static Field newField(Random random, String name, String value, FieldType type) {\n    name = new String(name);\n    if (usually(random) || !type.indexed()) {\n      // most of the time, don't modify the params\n      return new Field(name, value, type);\n    }\n\n    // TODO: once all core & test codecs can index\n    // offsets, sometimes randomly turn on offsets if we are\n    // already indexing positions...\n\n    FieldType newType = new FieldType(type);\n    if (!newType.stored() && random.nextBoolean()) {\n      newType.setStored(true); // randomly store it\n    }\n\n    if (!newType.storeTermVectors() && random.nextBoolean()) {\n      newType.setStoreTermVectors(true);\n      if (!newType.storeTermVectorOffsets()) {\n        newType.setStoreTermVectorOffsets(random.nextBoolean());\n      }\n      if (!newType.storeTermVectorPositions()) {\n        newType.setStoreTermVectorPositions(random.nextBoolean());\n        \n        if (newType.storeTermVectorPositions() && !newType.storeTermVectorPayloads()) {\n          newType.setStoreTermVectorPayloads(random.nextBoolean());\n        }\n      }\n    }\n\n    // TODO: we need to do this, but smarter, ie, most of\n    // the time we set the same value for a given field but\n    // sometimes (rarely) we change it up:\n    /*\n    if (newType.omitNorms()) {\n      newType.setOmitNorms(random.nextBoolean());\n    }\n    */\n    \n    return new Field(name, value, newType);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e307596810ed3e15021a60f46fdebab6783c295","date":1398787006,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#newField(Random,String,String,FieldType).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#newField(Random,String,String,FieldType).mjava","sourceNew":"  // TODO: if we can pull out the \"make term vector options\n  // consistent across all instances of the same field name\"\n  // write-once schema sort of helper class then we can\n  // remove the sync here.  We can also fold the random\n  // \"enable norms\" (now commented out, below) into that:\n  public synchronized static Field newField(Random random, String name, String value, FieldType type) {\n\n    // Defeat any consumers that illegally rely on intern'd\n    // strings (we removed this from Lucene a while back):\n    name = new String(name);\n\n    FieldType prevType = fieldToType.get(name);\n\n    if (usually(random) || !type.indexed() || prevType != null) {\n      // most of the time, don't modify the params\n      if (prevType == null) {\n        fieldToType.put(name, new FieldType(type));\n      } else {\n        type = mergeTermVectorOptions(type, prevType);\n      }\n\n      return new Field(name, value, type);\n    }\n\n    // TODO: once all core & test codecs can index\n    // offsets, sometimes randomly turn on offsets if we are\n    // already indexing positions...\n\n    FieldType newType = new FieldType(type);\n    if (!newType.stored() && random.nextBoolean()) {\n      newType.setStored(true); // randomly store it\n    }\n\n    // Randomly turn on term vector options, but always do\n    // so consistently for the same field name:\n    if (!newType.storeTermVectors() && random.nextBoolean()) {\n      newType.setStoreTermVectors(true);\n      if (!newType.storeTermVectorPositions()) {\n        newType.setStoreTermVectorPositions(random.nextBoolean());\n        \n        if (newType.storeTermVectorPositions()) {\n          if (!newType.storeTermVectorPayloads()) {\n            newType.setStoreTermVectorPayloads(random.nextBoolean());\n          }\n          if (!newType.storeTermVectorOffsets()) {\n            newType.setStoreTermVectorOffsets(random.nextBoolean());\n          }\n        }\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"NOTE: LuceneTestCase: upgrade name=\" + name + \" type=\" + newType);\n      }\n    }\n    newType.freeze();\n    fieldToType.put(name, newType);\n\n    // TODO: we need to do this, but smarter, ie, most of\n    // the time we set the same value for a given field but\n    // sometimes (rarely) we change it up:\n    /*\n    if (newType.omitNorms()) {\n      newType.setOmitNorms(random.nextBoolean());\n    }\n    */\n    \n    return new Field(name, value, newType);\n  }\n\n","sourceOld":"  public static Field newField(Random random, String name, String value, FieldType type) {\n    name = new String(name);\n    if (usually(random) || !type.indexed()) {\n      // most of the time, don't modify the params\n      fieldNamesSeen.add(name);\n      return new Field(name, value, type);\n    }\n\n    // TODO: once all core & test codecs can index\n    // offsets, sometimes randomly turn on offsets if we are\n    // already indexing positions...\n\n    FieldType newType = new FieldType(type);\n    if (!newType.stored() && random.nextBoolean()) {\n      newType.setStored(true); // randomly store it\n    }\n\n    // Randomly turn on term vector options, but always do\n    // so consistently for the same field name:\n    if (!newType.storeTermVectors() && fieldNamesSeen.contains(name) == false && random.nextBoolean()) {\n      FieldType prev;\n      synchronized(fieldTermVectorOptions) {\n        prev = fieldTermVectorOptions.get(name);\n        if (prev == null) {\n          newType.setStoreTermVectors(true);\n          if (!newType.storeTermVectorPositions()) {\n            newType.setStoreTermVectorPositions(random.nextBoolean());\n        \n            if (newType.storeTermVectorPositions()) {\n              if (!newType.storeTermVectorPayloads()) {\n                newType.setStoreTermVectorPayloads(random.nextBoolean());\n              }\n              if (!newType.storeTermVectorOffsets()) {\n                newType.setStoreTermVectorOffsets(random.nextBoolean());\n              }\n            }\n          }\n          fieldTermVectorOptions.put(name, prev);\n        }\n      }\n\n      if (prev != null) {\n        newType.setStoreTermVectors(prev.storeTermVectors());\n        newType.setStoreTermVectorOffsets(prev.storeTermVectorOffsets());\n        newType.setStoreTermVectorPositions(prev.storeTermVectorPositions());\n        newType.setStoreTermVectorPayloads(prev.storeTermVectorPayloads());\n      }\n      System.out.println(\"  LTC: upgrade name=\" + name + \" type=\" + newType);\n    }\n    newType.freeze();\n\n    // TODO: we need to do this, but smarter, ie, most of\n    // the time we set the same value for a given field but\n    // sometimes (rarely) we change it up:\n    /*\n    if (newType.omitNorms()) {\n      newType.setOmitNorms(random.nextBoolean());\n    }\n    */\n    \n    return new Field(name, value, newType);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3394716f52b34ab259ad5247e7595d9f9db6e935","date":1398791921,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#newField(Random,String,String,FieldType).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#newField(Random,String,String,FieldType).mjava","sourceNew":"  // TODO: if we can pull out the \"make term vector options\n  // consistent across all instances of the same field name\"\n  // write-once schema sort of helper class then we can\n  // remove the sync here.  We can also fold the random\n  // \"enable norms\" (now commented out, below) into that:\n  public synchronized static Field newField(Random random, String name, String value, FieldType type) {\n\n    // Defeat any consumers that illegally rely on intern'd\n    // strings (we removed this from Lucene a while back):\n    name = new String(name);\n\n    FieldType prevType = fieldToType.get(name);\n\n    if (usually(random) || !type.indexed() || prevType != null) {\n      // most of the time, don't modify the params\n      if (prevType == null) {\n        fieldToType.put(name, new FieldType(type));\n      } else {\n        type = mergeTermVectorOptions(type, prevType);\n      }\n\n      return new Field(name, value, type);\n    }\n\n    // TODO: once all core & test codecs can index\n    // offsets, sometimes randomly turn on offsets if we are\n    // already indexing positions...\n\n    FieldType newType = new FieldType(type);\n    if (!newType.stored() && random.nextBoolean()) {\n      newType.setStored(true); // randomly store it\n    }\n\n    // Randomly turn on term vector options, but always do\n    // so consistently for the same field name:\n    if (!newType.storeTermVectors() && random.nextBoolean()) {\n      newType.setStoreTermVectors(true);\n      if (!newType.storeTermVectorPositions()) {\n        newType.setStoreTermVectorPositions(random.nextBoolean());\n        \n        if (newType.storeTermVectorPositions()) {\n          if (!newType.storeTermVectorPayloads()) {\n            newType.setStoreTermVectorPayloads(random.nextBoolean());\n          }\n          if (!newType.storeTermVectorOffsets()) {\n            newType.setStoreTermVectorOffsets(random.nextBoolean());\n          }\n        }\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"NOTE: LuceneTestCase: upgrade name=\" + name + \" type=\" + newType);\n      }\n    }\n    newType.freeze();\n    fieldToType.put(name, newType);\n\n    // TODO: we need to do this, but smarter, ie, most of\n    // the time we set the same value for a given field but\n    // sometimes (rarely) we change it up:\n    /*\n    if (newType.omitNorms()) {\n      newType.setOmitNorms(random.nextBoolean());\n    }\n    */\n    \n    return new Field(name, value, newType);\n  }\n\n","sourceOld":"  public static Field newField(Random random, String name, String value, FieldType type) {\n    name = new String(name);\n    if (usually(random) || !type.indexed()) {\n      // most of the time, don't modify the params\n      return new Field(name, value, type);\n    }\n\n    // TODO: once all core & test codecs can index\n    // offsets, sometimes randomly turn on offsets if we are\n    // already indexing positions...\n\n    FieldType newType = new FieldType(type);\n    if (!newType.stored() && random.nextBoolean()) {\n      newType.setStored(true); // randomly store it\n    }\n\n    if (!newType.storeTermVectors() && random.nextBoolean()) {\n      newType.setStoreTermVectors(true);\n      if (!newType.storeTermVectorOffsets()) {\n        newType.setStoreTermVectorOffsets(random.nextBoolean());\n      }\n      if (!newType.storeTermVectorPositions()) {\n        newType.setStoreTermVectorPositions(random.nextBoolean());\n        \n        if (newType.storeTermVectorPositions() && !newType.storeTermVectorPayloads()) {\n          newType.setStoreTermVectorPayloads(random.nextBoolean());\n        }\n      }\n    }\n\n    // TODO: we need to do this, but smarter, ie, most of\n    // the time we set the same value for a given field but\n    // sometimes (rarely) we change it up:\n    /*\n    if (newType.omitNorms()) {\n      newType.setOmitNorms(random.nextBoolean());\n    }\n    */\n    \n    return new Field(name, value, newType);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","date":1398844771,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#newField(Random,String,String,FieldType).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#newField(Random,String,String,FieldType).mjava","sourceNew":"  // TODO: if we can pull out the \"make term vector options\n  // consistent across all instances of the same field name\"\n  // write-once schema sort of helper class then we can\n  // remove the sync here.  We can also fold the random\n  // \"enable norms\" (now commented out, below) into that:\n  public synchronized static Field newField(Random random, String name, String value, FieldType type) {\n\n    // Defeat any consumers that illegally rely on intern'd\n    // strings (we removed this from Lucene a while back):\n    name = new String(name);\n\n    FieldType prevType = fieldToType.get(name);\n\n    if (usually(random) || !type.indexed() || prevType != null) {\n      // most of the time, don't modify the params\n      if (prevType == null) {\n        fieldToType.put(name, new FieldType(type));\n      } else {\n        type = mergeTermVectorOptions(type, prevType);\n      }\n\n      return new Field(name, value, type);\n    }\n\n    // TODO: once all core & test codecs can index\n    // offsets, sometimes randomly turn on offsets if we are\n    // already indexing positions...\n\n    FieldType newType = new FieldType(type);\n    if (!newType.stored() && random.nextBoolean()) {\n      newType.setStored(true); // randomly store it\n    }\n\n    // Randomly turn on term vector options, but always do\n    // so consistently for the same field name:\n    if (!newType.storeTermVectors() && random.nextBoolean()) {\n      newType.setStoreTermVectors(true);\n      if (!newType.storeTermVectorPositions()) {\n        newType.setStoreTermVectorPositions(random.nextBoolean());\n        \n        if (newType.storeTermVectorPositions()) {\n          if (!newType.storeTermVectorPayloads()) {\n            newType.setStoreTermVectorPayloads(random.nextBoolean());\n          }\n          if (!newType.storeTermVectorOffsets()) {\n            newType.setStoreTermVectorOffsets(random.nextBoolean());\n          }\n        }\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"NOTE: LuceneTestCase: upgrade name=\" + name + \" type=\" + newType);\n      }\n    }\n    newType.freeze();\n    fieldToType.put(name, newType);\n\n    // TODO: we need to do this, but smarter, ie, most of\n    // the time we set the same value for a given field but\n    // sometimes (rarely) we change it up:\n    /*\n    if (newType.omitNorms()) {\n      newType.setOmitNorms(random.nextBoolean());\n    }\n    */\n    \n    return new Field(name, value, newType);\n  }\n\n","sourceOld":"  public static Field newField(Random random, String name, String value, FieldType type) {\n    name = new String(name);\n    if (usually(random) || !type.indexed()) {\n      // most of the time, don't modify the params\n      return new Field(name, value, type);\n    }\n\n    // TODO: once all core & test codecs can index\n    // offsets, sometimes randomly turn on offsets if we are\n    // already indexing positions...\n\n    FieldType newType = new FieldType(type);\n    if (!newType.stored() && random.nextBoolean()) {\n      newType.setStored(true); // randomly store it\n    }\n\n    if (!newType.storeTermVectors() && random.nextBoolean()) {\n      newType.setStoreTermVectors(true);\n      if (!newType.storeTermVectorOffsets()) {\n        newType.setStoreTermVectorOffsets(random.nextBoolean());\n      }\n      if (!newType.storeTermVectorPositions()) {\n        newType.setStoreTermVectorPositions(random.nextBoolean());\n        \n        if (newType.storeTermVectorPositions() && !newType.storeTermVectorPayloads()) {\n          newType.setStoreTermVectorPayloads(random.nextBoolean());\n        }\n      }\n    }\n\n    // TODO: we need to do this, but smarter, ie, most of\n    // the time we set the same value for a given field but\n    // sometimes (rarely) we change it up:\n    /*\n    if (newType.omitNorms()) {\n      newType.setOmitNorms(random.nextBoolean());\n    }\n    */\n    \n    return new Field(name, value, newType);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"39b24d3b16db6e62433ca49a0d34bff9289ad5f3","date":1398933009,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#newField(Random,String,String,FieldType).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#newField(Random,String,String,FieldType).mjava","sourceNew":"  // TODO: if we can pull out the \"make term vector options\n  // consistent across all instances of the same field name\"\n  // write-once schema sort of helper class then we can\n  // remove the sync here.  We can also fold the random\n  // \"enable norms\" (now commented out, below) into that:\n  public synchronized static Field newField(Random random, String name, String value, FieldType type) {\n\n    // Defeat any consumers that illegally rely on intern'd\n    // strings (we removed this from Lucene a while back):\n    name = new String(name);\n\n    FieldType prevType = fieldToType.get(name);\n\n    if (usually(random) || !type.indexed() || prevType != null) {\n      // most of the time, don't modify the params\n      if (prevType == null) {\n        fieldToType.put(name, new FieldType(type));\n      } else {\n        type = mergeTermVectorOptions(type, prevType);\n      }\n\n      return new Field(name, value, type);\n    }\n\n    // TODO: once all core & test codecs can index\n    // offsets, sometimes randomly turn on offsets if we are\n    // already indexing positions...\n\n    FieldType newType = new FieldType(type);\n    if (!newType.stored() && random.nextBoolean()) {\n      newType.setStored(true); // randomly store it\n    }\n\n    // Randomly turn on term vector options, but always do\n    // so consistently for the same field name:\n    if (!newType.storeTermVectors() && random.nextBoolean()) {\n      newType.setStoreTermVectors(true);\n      if (!newType.storeTermVectorPositions()) {\n        newType.setStoreTermVectorPositions(random.nextBoolean());\n        \n        if (newType.storeTermVectorPositions()) {\n          if (!newType.storeTermVectorPayloads()) {\n            newType.setStoreTermVectorPayloads(random.nextBoolean());\n          }\n        }\n      }\n      \n      if (!newType.storeTermVectorOffsets()) {\n        newType.setStoreTermVectorOffsets(random.nextBoolean());\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"NOTE: LuceneTestCase: upgrade name=\" + name + \" type=\" + newType);\n      }\n    }\n    newType.freeze();\n    fieldToType.put(name, newType);\n\n    // TODO: we need to do this, but smarter, ie, most of\n    // the time we set the same value for a given field but\n    // sometimes (rarely) we change it up:\n    /*\n    if (newType.omitNorms()) {\n      newType.setOmitNorms(random.nextBoolean());\n    }\n    */\n    \n    return new Field(name, value, newType);\n  }\n\n","sourceOld":"  // TODO: if we can pull out the \"make term vector options\n  // consistent across all instances of the same field name\"\n  // write-once schema sort of helper class then we can\n  // remove the sync here.  We can also fold the random\n  // \"enable norms\" (now commented out, below) into that:\n  public synchronized static Field newField(Random random, String name, String value, FieldType type) {\n\n    // Defeat any consumers that illegally rely on intern'd\n    // strings (we removed this from Lucene a while back):\n    name = new String(name);\n\n    FieldType prevType = fieldToType.get(name);\n\n    if (usually(random) || !type.indexed() || prevType != null) {\n      // most of the time, don't modify the params\n      if (prevType == null) {\n        fieldToType.put(name, new FieldType(type));\n      } else {\n        type = mergeTermVectorOptions(type, prevType);\n      }\n\n      return new Field(name, value, type);\n    }\n\n    // TODO: once all core & test codecs can index\n    // offsets, sometimes randomly turn on offsets if we are\n    // already indexing positions...\n\n    FieldType newType = new FieldType(type);\n    if (!newType.stored() && random.nextBoolean()) {\n      newType.setStored(true); // randomly store it\n    }\n\n    // Randomly turn on term vector options, but always do\n    // so consistently for the same field name:\n    if (!newType.storeTermVectors() && random.nextBoolean()) {\n      newType.setStoreTermVectors(true);\n      if (!newType.storeTermVectorPositions()) {\n        newType.setStoreTermVectorPositions(random.nextBoolean());\n        \n        if (newType.storeTermVectorPositions()) {\n          if (!newType.storeTermVectorPayloads()) {\n            newType.setStoreTermVectorPayloads(random.nextBoolean());\n          }\n          if (!newType.storeTermVectorOffsets()) {\n            newType.setStoreTermVectorOffsets(random.nextBoolean());\n          }\n        }\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"NOTE: LuceneTestCase: upgrade name=\" + name + \" type=\" + newType);\n      }\n    }\n    newType.freeze();\n    fieldToType.put(name, newType);\n\n    // TODO: we need to do this, but smarter, ie, most of\n    // the time we set the same value for a given field but\n    // sometimes (rarely) we change it up:\n    /*\n    if (newType.omitNorms()) {\n      newType.setOmitNorms(random.nextBoolean());\n    }\n    */\n    \n    return new Field(name, value, newType);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3184874f7f3aca850248483485b4995343066875","date":1413876758,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#newField(Random,String,String,FieldType).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#newField(Random,String,String,FieldType).mjava","sourceNew":"  // TODO: if we can pull out the \"make term vector options\n  // consistent across all instances of the same field name\"\n  // write-once schema sort of helper class then we can\n  // remove the sync here.  We can also fold the random\n  // \"enable norms\" (now commented out, below) into that:\n  public synchronized static Field newField(Random random, String name, String value, FieldType type) {\n\n    // Defeat any consumers that illegally rely on intern'd\n    // strings (we removed this from Lucene a while back):\n    name = new String(name);\n\n    FieldType prevType = fieldToType.get(name);\n\n    if (usually(random) || type.indexOptions() == null || prevType != null) {\n      // most of the time, don't modify the params\n      if (prevType == null) {\n        fieldToType.put(name, new FieldType(type));\n      } else {\n        type = mergeTermVectorOptions(type, prevType);\n      }\n\n      return new Field(name, value, type);\n    }\n\n    // TODO: once all core & test codecs can index\n    // offsets, sometimes randomly turn on offsets if we are\n    // already indexing positions...\n\n    FieldType newType = new FieldType(type);\n    if (!newType.stored() && random.nextBoolean()) {\n      newType.setStored(true); // randomly store it\n    }\n\n    // Randomly turn on term vector options, but always do\n    // so consistently for the same field name:\n    if (!newType.storeTermVectors() && random.nextBoolean()) {\n      newType.setStoreTermVectors(true);\n      if (!newType.storeTermVectorPositions()) {\n        newType.setStoreTermVectorPositions(random.nextBoolean());\n        \n        if (newType.storeTermVectorPositions()) {\n          if (!newType.storeTermVectorPayloads()) {\n            newType.setStoreTermVectorPayloads(random.nextBoolean());\n          }\n        }\n      }\n      \n      if (!newType.storeTermVectorOffsets()) {\n        newType.setStoreTermVectorOffsets(random.nextBoolean());\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"NOTE: LuceneTestCase: upgrade name=\" + name + \" type=\" + newType);\n      }\n    }\n    newType.freeze();\n    fieldToType.put(name, newType);\n\n    // TODO: we need to do this, but smarter, ie, most of\n    // the time we set the same value for a given field but\n    // sometimes (rarely) we change it up:\n    /*\n    if (newType.omitNorms()) {\n      newType.setOmitNorms(random.nextBoolean());\n    }\n    */\n    \n    return new Field(name, value, newType);\n  }\n\n","sourceOld":"  // TODO: if we can pull out the \"make term vector options\n  // consistent across all instances of the same field name\"\n  // write-once schema sort of helper class then we can\n  // remove the sync here.  We can also fold the random\n  // \"enable norms\" (now commented out, below) into that:\n  public synchronized static Field newField(Random random, String name, String value, FieldType type) {\n\n    // Defeat any consumers that illegally rely on intern'd\n    // strings (we removed this from Lucene a while back):\n    name = new String(name);\n\n    FieldType prevType = fieldToType.get(name);\n\n    if (usually(random) || !type.indexed() || prevType != null) {\n      // most of the time, don't modify the params\n      if (prevType == null) {\n        fieldToType.put(name, new FieldType(type));\n      } else {\n        type = mergeTermVectorOptions(type, prevType);\n      }\n\n      return new Field(name, value, type);\n    }\n\n    // TODO: once all core & test codecs can index\n    // offsets, sometimes randomly turn on offsets if we are\n    // already indexing positions...\n\n    FieldType newType = new FieldType(type);\n    if (!newType.stored() && random.nextBoolean()) {\n      newType.setStored(true); // randomly store it\n    }\n\n    // Randomly turn on term vector options, but always do\n    // so consistently for the same field name:\n    if (!newType.storeTermVectors() && random.nextBoolean()) {\n      newType.setStoreTermVectors(true);\n      if (!newType.storeTermVectorPositions()) {\n        newType.setStoreTermVectorPositions(random.nextBoolean());\n        \n        if (newType.storeTermVectorPositions()) {\n          if (!newType.storeTermVectorPayloads()) {\n            newType.setStoreTermVectorPayloads(random.nextBoolean());\n          }\n        }\n      }\n      \n      if (!newType.storeTermVectorOffsets()) {\n        newType.setStoreTermVectorOffsets(random.nextBoolean());\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"NOTE: LuceneTestCase: upgrade name=\" + name + \" type=\" + newType);\n      }\n    }\n    newType.freeze();\n    fieldToType.put(name, newType);\n\n    // TODO: we need to do this, but smarter, ie, most of\n    // the time we set the same value for a given field but\n    // sometimes (rarely) we change it up:\n    /*\n    if (newType.omitNorms()) {\n      newType.setOmitNorms(random.nextBoolean());\n    }\n    */\n    \n    return new Field(name, value, newType);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a22eafe3f72a4c2945eaad9547e6c78816978f4","date":1413956657,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#newField(Random,String,String,FieldType).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#newField(Random,String,String,FieldType).mjava","sourceNew":"  // TODO: if we can pull out the \"make term vector options\n  // consistent across all instances of the same field name\"\n  // write-once schema sort of helper class then we can\n  // remove the sync here.  We can also fold the random\n  // \"enable norms\" (now commented out, below) into that:\n  public synchronized static Field newField(Random random, String name, String value, FieldType type) {\n\n    // Defeat any consumers that illegally rely on intern'd\n    // strings (we removed this from Lucene a while back):\n    name = new String(name);\n\n    FieldType prevType = fieldToType.get(name);\n\n    if (usually(random) || type.indexOptions() == null || prevType != null) {\n      // most of the time, don't modify the params\n      if (prevType == null) {\n        fieldToType.put(name, new FieldType(type));\n      } else {\n        type = mergeTermVectorOptions(type, prevType);\n      }\n\n      return new Field(name, value, type);\n    }\n\n    // TODO: once all core & test codecs can index\n    // offsets, sometimes randomly turn on offsets if we are\n    // already indexing positions...\n\n    FieldType newType = new FieldType(type);\n    if (!newType.stored() && random.nextBoolean()) {\n      newType.setStored(true); // randomly store it\n    }\n\n    // Randomly turn on term vector options, but always do\n    // so consistently for the same field name:\n    if (!newType.storeTermVectors() && random.nextBoolean()) {\n      newType.setStoreTermVectors(true);\n      if (!newType.storeTermVectorPositions()) {\n        newType.setStoreTermVectorPositions(random.nextBoolean());\n        \n        if (newType.storeTermVectorPositions()) {\n          if (!newType.storeTermVectorPayloads()) {\n            newType.setStoreTermVectorPayloads(random.nextBoolean());\n          }\n        }\n      }\n      \n      if (!newType.storeTermVectorOffsets()) {\n        newType.setStoreTermVectorOffsets(random.nextBoolean());\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"NOTE: LuceneTestCase: upgrade name=\" + name + \" type=\" + newType);\n      }\n    }\n    newType.freeze();\n    fieldToType.put(name, newType);\n\n    // TODO: we need to do this, but smarter, ie, most of\n    // the time we set the same value for a given field but\n    // sometimes (rarely) we change it up:\n    /*\n    if (newType.omitNorms()) {\n      newType.setOmitNorms(random.nextBoolean());\n    }\n    */\n    \n    return new Field(name, value, newType);\n  }\n\n","sourceOld":"  // TODO: if we can pull out the \"make term vector options\n  // consistent across all instances of the same field name\"\n  // write-once schema sort of helper class then we can\n  // remove the sync here.  We can also fold the random\n  // \"enable norms\" (now commented out, below) into that:\n  public synchronized static Field newField(Random random, String name, String value, FieldType type) {\n\n    // Defeat any consumers that illegally rely on intern'd\n    // strings (we removed this from Lucene a while back):\n    name = new String(name);\n\n    FieldType prevType = fieldToType.get(name);\n\n    if (usually(random) || !type.indexed() || prevType != null) {\n      // most of the time, don't modify the params\n      if (prevType == null) {\n        fieldToType.put(name, new FieldType(type));\n      } else {\n        type = mergeTermVectorOptions(type, prevType);\n      }\n\n      return new Field(name, value, type);\n    }\n\n    // TODO: once all core & test codecs can index\n    // offsets, sometimes randomly turn on offsets if we are\n    // already indexing positions...\n\n    FieldType newType = new FieldType(type);\n    if (!newType.stored() && random.nextBoolean()) {\n      newType.setStored(true); // randomly store it\n    }\n\n    // Randomly turn on term vector options, but always do\n    // so consistently for the same field name:\n    if (!newType.storeTermVectors() && random.nextBoolean()) {\n      newType.setStoreTermVectors(true);\n      if (!newType.storeTermVectorPositions()) {\n        newType.setStoreTermVectorPositions(random.nextBoolean());\n        \n        if (newType.storeTermVectorPositions()) {\n          if (!newType.storeTermVectorPayloads()) {\n            newType.setStoreTermVectorPayloads(random.nextBoolean());\n          }\n        }\n      }\n      \n      if (!newType.storeTermVectorOffsets()) {\n        newType.setStoreTermVectorOffsets(random.nextBoolean());\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"NOTE: LuceneTestCase: upgrade name=\" + name + \" type=\" + newType);\n      }\n    }\n    newType.freeze();\n    fieldToType.put(name, newType);\n\n    // TODO: we need to do this, but smarter, ie, most of\n    // the time we set the same value for a given field but\n    // sometimes (rarely) we change it up:\n    /*\n    if (newType.omitNorms()) {\n      newType.setOmitNorms(random.nextBoolean());\n    }\n    */\n    \n    return new Field(name, value, newType);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2bb2842e561df4e8e9ad89010605fc86ac265465","date":1414768208,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#newField(Random,String,String,FieldType).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#newField(Random,String,String,FieldType).mjava","sourceNew":"  // TODO: if we can pull out the \"make term vector options\n  // consistent across all instances of the same field name\"\n  // write-once schema sort of helper class then we can\n  // remove the sync here.  We can also fold the random\n  // \"enable norms\" (now commented out, below) into that:\n  public synchronized static Field newField(Random random, String name, String value, FieldType type) {\n\n    // Defeat any consumers that illegally rely on intern'd\n    // strings (we removed this from Lucene a while back):\n    name = new String(name);\n\n    FieldType prevType = fieldToType.get(name);\n\n    if (usually(random) || type.indexOptions() == IndexOptions.NO || prevType != null) {\n      // most of the time, don't modify the params\n      if (prevType == null) {\n        fieldToType.put(name, new FieldType(type));\n      } else {\n        type = mergeTermVectorOptions(type, prevType);\n      }\n\n      return new Field(name, value, type);\n    }\n\n    // TODO: once all core & test codecs can index\n    // offsets, sometimes randomly turn on offsets if we are\n    // already indexing positions...\n\n    FieldType newType = new FieldType(type);\n    if (!newType.stored() && random.nextBoolean()) {\n      newType.setStored(true); // randomly store it\n    }\n\n    // Randomly turn on term vector options, but always do\n    // so consistently for the same field name:\n    if (!newType.storeTermVectors() && random.nextBoolean()) {\n      newType.setStoreTermVectors(true);\n      if (!newType.storeTermVectorPositions()) {\n        newType.setStoreTermVectorPositions(random.nextBoolean());\n        \n        if (newType.storeTermVectorPositions()) {\n          if (!newType.storeTermVectorPayloads()) {\n            newType.setStoreTermVectorPayloads(random.nextBoolean());\n          }\n        }\n      }\n      \n      if (!newType.storeTermVectorOffsets()) {\n        newType.setStoreTermVectorOffsets(random.nextBoolean());\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"NOTE: LuceneTestCase: upgrade name=\" + name + \" type=\" + newType);\n      }\n    }\n    newType.freeze();\n    fieldToType.put(name, newType);\n\n    // TODO: we need to do this, but smarter, ie, most of\n    // the time we set the same value for a given field but\n    // sometimes (rarely) we change it up:\n    /*\n    if (newType.omitNorms()) {\n      newType.setOmitNorms(random.nextBoolean());\n    }\n    */\n    \n    return new Field(name, value, newType);\n  }\n\n","sourceOld":"  // TODO: if we can pull out the \"make term vector options\n  // consistent across all instances of the same field name\"\n  // write-once schema sort of helper class then we can\n  // remove the sync here.  We can also fold the random\n  // \"enable norms\" (now commented out, below) into that:\n  public synchronized static Field newField(Random random, String name, String value, FieldType type) {\n\n    // Defeat any consumers that illegally rely on intern'd\n    // strings (we removed this from Lucene a while back):\n    name = new String(name);\n\n    FieldType prevType = fieldToType.get(name);\n\n    if (usually(random) || type.indexOptions() == null || prevType != null) {\n      // most of the time, don't modify the params\n      if (prevType == null) {\n        fieldToType.put(name, new FieldType(type));\n      } else {\n        type = mergeTermVectorOptions(type, prevType);\n      }\n\n      return new Field(name, value, type);\n    }\n\n    // TODO: once all core & test codecs can index\n    // offsets, sometimes randomly turn on offsets if we are\n    // already indexing positions...\n\n    FieldType newType = new FieldType(type);\n    if (!newType.stored() && random.nextBoolean()) {\n      newType.setStored(true); // randomly store it\n    }\n\n    // Randomly turn on term vector options, but always do\n    // so consistently for the same field name:\n    if (!newType.storeTermVectors() && random.nextBoolean()) {\n      newType.setStoreTermVectors(true);\n      if (!newType.storeTermVectorPositions()) {\n        newType.setStoreTermVectorPositions(random.nextBoolean());\n        \n        if (newType.storeTermVectorPositions()) {\n          if (!newType.storeTermVectorPayloads()) {\n            newType.setStoreTermVectorPayloads(random.nextBoolean());\n          }\n        }\n      }\n      \n      if (!newType.storeTermVectorOffsets()) {\n        newType.setStoreTermVectorOffsets(random.nextBoolean());\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"NOTE: LuceneTestCase: upgrade name=\" + name + \" type=\" + newType);\n      }\n    }\n    newType.freeze();\n    fieldToType.put(name, newType);\n\n    // TODO: we need to do this, but smarter, ie, most of\n    // the time we set the same value for a given field but\n    // sometimes (rarely) we change it up:\n    /*\n    if (newType.omitNorms()) {\n      newType.setOmitNorms(random.nextBoolean());\n    }\n    */\n    \n    return new Field(name, value, newType);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f95ce1375367b92d411a06175eab3915fe93c6bc","date":1414788502,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#newField(Random,String,String,FieldType).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#newField(Random,String,String,FieldType).mjava","sourceNew":"  // TODO: if we can pull out the \"make term vector options\n  // consistent across all instances of the same field name\"\n  // write-once schema sort of helper class then we can\n  // remove the sync here.  We can also fold the random\n  // \"enable norms\" (now commented out, below) into that:\n  public synchronized static Field newField(Random random, String name, String value, FieldType type) {\n\n    // Defeat any consumers that illegally rely on intern'd\n    // strings (we removed this from Lucene a while back):\n    name = new String(name);\n\n    FieldType prevType = fieldToType.get(name);\n\n    if (usually(random) || type.indexOptions() == IndexOptions.NONE || prevType != null) {\n      // most of the time, don't modify the params\n      if (prevType == null) {\n        fieldToType.put(name, new FieldType(type));\n      } else {\n        type = mergeTermVectorOptions(type, prevType);\n      }\n\n      return new Field(name, value, type);\n    }\n\n    // TODO: once all core & test codecs can index\n    // offsets, sometimes randomly turn on offsets if we are\n    // already indexing positions...\n\n    FieldType newType = new FieldType(type);\n    if (!newType.stored() && random.nextBoolean()) {\n      newType.setStored(true); // randomly store it\n    }\n\n    // Randomly turn on term vector options, but always do\n    // so consistently for the same field name:\n    if (!newType.storeTermVectors() && random.nextBoolean()) {\n      newType.setStoreTermVectors(true);\n      if (!newType.storeTermVectorPositions()) {\n        newType.setStoreTermVectorPositions(random.nextBoolean());\n        \n        if (newType.storeTermVectorPositions()) {\n          if (!newType.storeTermVectorPayloads()) {\n            newType.setStoreTermVectorPayloads(random.nextBoolean());\n          }\n        }\n      }\n      \n      if (!newType.storeTermVectorOffsets()) {\n        newType.setStoreTermVectorOffsets(random.nextBoolean());\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"NOTE: LuceneTestCase: upgrade name=\" + name + \" type=\" + newType);\n      }\n    }\n    newType.freeze();\n    fieldToType.put(name, newType);\n\n    // TODO: we need to do this, but smarter, ie, most of\n    // the time we set the same value for a given field but\n    // sometimes (rarely) we change it up:\n    /*\n    if (newType.omitNorms()) {\n      newType.setOmitNorms(random.nextBoolean());\n    }\n    */\n    \n    return new Field(name, value, newType);\n  }\n\n","sourceOld":"  // TODO: if we can pull out the \"make term vector options\n  // consistent across all instances of the same field name\"\n  // write-once schema sort of helper class then we can\n  // remove the sync here.  We can also fold the random\n  // \"enable norms\" (now commented out, below) into that:\n  public synchronized static Field newField(Random random, String name, String value, FieldType type) {\n\n    // Defeat any consumers that illegally rely on intern'd\n    // strings (we removed this from Lucene a while back):\n    name = new String(name);\n\n    FieldType prevType = fieldToType.get(name);\n\n    if (usually(random) || type.indexOptions() == IndexOptions.NO || prevType != null) {\n      // most of the time, don't modify the params\n      if (prevType == null) {\n        fieldToType.put(name, new FieldType(type));\n      } else {\n        type = mergeTermVectorOptions(type, prevType);\n      }\n\n      return new Field(name, value, type);\n    }\n\n    // TODO: once all core & test codecs can index\n    // offsets, sometimes randomly turn on offsets if we are\n    // already indexing positions...\n\n    FieldType newType = new FieldType(type);\n    if (!newType.stored() && random.nextBoolean()) {\n      newType.setStored(true); // randomly store it\n    }\n\n    // Randomly turn on term vector options, but always do\n    // so consistently for the same field name:\n    if (!newType.storeTermVectors() && random.nextBoolean()) {\n      newType.setStoreTermVectors(true);\n      if (!newType.storeTermVectorPositions()) {\n        newType.setStoreTermVectorPositions(random.nextBoolean());\n        \n        if (newType.storeTermVectorPositions()) {\n          if (!newType.storeTermVectorPayloads()) {\n            newType.setStoreTermVectorPayloads(random.nextBoolean());\n          }\n        }\n      }\n      \n      if (!newType.storeTermVectorOffsets()) {\n        newType.setStoreTermVectorOffsets(random.nextBoolean());\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"NOTE: LuceneTestCase: upgrade name=\" + name + \" type=\" + newType);\n      }\n    }\n    newType.freeze();\n    fieldToType.put(name, newType);\n\n    // TODO: we need to do this, but smarter, ie, most of\n    // the time we set the same value for a given field but\n    // sometimes (rarely) we change it up:\n    /*\n    if (newType.omitNorms()) {\n      newType.setOmitNorms(random.nextBoolean());\n    }\n    */\n    \n    return new Field(name, value, newType);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"399d127639ae13222a8545b50e0ac545a6bcd2d7","date":1428704686,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#newField(Random,String,Object,FieldType).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#newField(Random,String,String,FieldType).mjava","sourceNew":"  // TODO: if we can pull out the \"make term vector options\n  // consistent across all instances of the same field name\"\n  // write-once schema sort of helper class then we can\n  // remove the sync here.  We can also fold the random\n  // \"enable norms\" (now commented out, below) into that:\n  public synchronized static Field newField(Random random, String name, Object value, FieldType type) {\n\n    // Defeat any consumers that illegally rely on intern'd\n    // strings (we removed this from Lucene a while back):\n    name = new String(name);\n\n    FieldType prevType = fieldToType.get(name);\n\n    if (usually(random) || type.indexOptions() == IndexOptions.NONE || prevType != null) {\n      // most of the time, don't modify the params\n      if (prevType == null) {\n        fieldToType.put(name, new FieldType(type));\n      } else {\n        type = mergeTermVectorOptions(type, prevType);\n      }\n\n      return createField(name, value, type);\n    }\n\n    // TODO: once all core & test codecs can index\n    // offsets, sometimes randomly turn on offsets if we are\n    // already indexing positions...\n\n    FieldType newType = new FieldType(type);\n    if (!newType.stored() && random.nextBoolean()) {\n      newType.setStored(true); // randomly store it\n    }\n\n    // Randomly turn on term vector options, but always do\n    // so consistently for the same field name:\n    if (!newType.storeTermVectors() && random.nextBoolean()) {\n      newType.setStoreTermVectors(true);\n      if (!newType.storeTermVectorPositions()) {\n        newType.setStoreTermVectorPositions(random.nextBoolean());\n        \n        if (newType.storeTermVectorPositions()) {\n          if (!newType.storeTermVectorPayloads()) {\n            newType.setStoreTermVectorPayloads(random.nextBoolean());\n          }\n        }\n      }\n      \n      if (!newType.storeTermVectorOffsets()) {\n        newType.setStoreTermVectorOffsets(random.nextBoolean());\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"NOTE: LuceneTestCase: upgrade name=\" + name + \" type=\" + newType);\n      }\n    }\n    newType.freeze();\n    fieldToType.put(name, newType);\n\n    // TODO: we need to do this, but smarter, ie, most of\n    // the time we set the same value for a given field but\n    // sometimes (rarely) we change it up:\n    /*\n    if (newType.omitNorms()) {\n      newType.setOmitNorms(random.nextBoolean());\n    }\n    */\n    \n    return createField(name, value, newType);\n  }\n\n","sourceOld":"  // TODO: if we can pull out the \"make term vector options\n  // consistent across all instances of the same field name\"\n  // write-once schema sort of helper class then we can\n  // remove the sync here.  We can also fold the random\n  // \"enable norms\" (now commented out, below) into that:\n  public synchronized static Field newField(Random random, String name, String value, FieldType type) {\n\n    // Defeat any consumers that illegally rely on intern'd\n    // strings (we removed this from Lucene a while back):\n    name = new String(name);\n\n    FieldType prevType = fieldToType.get(name);\n\n    if (usually(random) || type.indexOptions() == IndexOptions.NONE || prevType != null) {\n      // most of the time, don't modify the params\n      if (prevType == null) {\n        fieldToType.put(name, new FieldType(type));\n      } else {\n        type = mergeTermVectorOptions(type, prevType);\n      }\n\n      return new Field(name, value, type);\n    }\n\n    // TODO: once all core & test codecs can index\n    // offsets, sometimes randomly turn on offsets if we are\n    // already indexing positions...\n\n    FieldType newType = new FieldType(type);\n    if (!newType.stored() && random.nextBoolean()) {\n      newType.setStored(true); // randomly store it\n    }\n\n    // Randomly turn on term vector options, but always do\n    // so consistently for the same field name:\n    if (!newType.storeTermVectors() && random.nextBoolean()) {\n      newType.setStoreTermVectors(true);\n      if (!newType.storeTermVectorPositions()) {\n        newType.setStoreTermVectorPositions(random.nextBoolean());\n        \n        if (newType.storeTermVectorPositions()) {\n          if (!newType.storeTermVectorPayloads()) {\n            newType.setStoreTermVectorPayloads(random.nextBoolean());\n          }\n        }\n      }\n      \n      if (!newType.storeTermVectorOffsets()) {\n        newType.setStoreTermVectorOffsets(random.nextBoolean());\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"NOTE: LuceneTestCase: upgrade name=\" + name + \" type=\" + newType);\n      }\n    }\n    newType.freeze();\n    fieldToType.put(name, newType);\n\n    // TODO: we need to do this, but smarter, ie, most of\n    // the time we set the same value for a given field but\n    // sometimes (rarely) we change it up:\n    /*\n    if (newType.omitNorms()) {\n      newType.setOmitNorms(random.nextBoolean());\n    }\n    */\n    \n    return new Field(name, value, newType);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe":["0935c850ea562932997b72c69d93e345f21d7f45","3394716f52b34ab259ad5247e7595d9f9db6e935"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"399d127639ae13222a8545b50e0ac545a6bcd2d7":["f95ce1375367b92d411a06175eab3915fe93c6bc"],"2bb2842e561df4e8e9ad89010605fc86ac265465":["3184874f7f3aca850248483485b4995343066875"],"b11100924615fd39ef80bc5cd463a565129b0533":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"f95ce1375367b92d411a06175eab3915fe93c6bc":["2bb2842e561df4e8e9ad89010605fc86ac265465"],"3184874f7f3aca850248483485b4995343066875":["39b24d3b16db6e62433ca49a0d34bff9289ad5f3"],"3394716f52b34ab259ad5247e7595d9f9db6e935":["0935c850ea562932997b72c69d93e345f21d7f45","3e307596810ed3e15021a60f46fdebab6783c295"],"0a22eafe3f72a4c2945eaad9547e6c78816978f4":["39b24d3b16db6e62433ca49a0d34bff9289ad5f3","3184874f7f3aca850248483485b4995343066875"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":["b11100924615fd39ef80bc5cd463a565129b0533","0935c850ea562932997b72c69d93e345f21d7f45"],"3e307596810ed3e15021a60f46fdebab6783c295":["52c7e49be259508735752fba88085255014a6ecf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3599646b4d4c346cf74d334813488b8b337b5bf5":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","b11100924615fd39ef80bc5cd463a565129b0533"],"0935c850ea562932997b72c69d93e345f21d7f45":["b11100924615fd39ef80bc5cd463a565129b0533"],"52c7e49be259508735752fba88085255014a6ecf":["0935c850ea562932997b72c69d93e345f21d7f45"],"39b24d3b16db6e62433ca49a0d34bff9289ad5f3":["3394716f52b34ab259ad5247e7595d9f9db6e935"],"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9":["b11100924615fd39ef80bc5cd463a565129b0533","0935c850ea562932997b72c69d93e345f21d7f45"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["399d127639ae13222a8545b50e0ac545a6bcd2d7"]},"commit2Childs":{"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["b11100924615fd39ef80bc5cd463a565129b0533","3599646b4d4c346cf74d334813488b8b337b5bf5"],"399d127639ae13222a8545b50e0ac545a6bcd2d7":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2bb2842e561df4e8e9ad89010605fc86ac265465":["f95ce1375367b92d411a06175eab3915fe93c6bc"],"b11100924615fd39ef80bc5cd463a565129b0533":["c7869f64c874ebf7f317d22c00baf2b6857797a6","3599646b4d4c346cf74d334813488b8b337b5bf5","0935c850ea562932997b72c69d93e345f21d7f45","d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9"],"f95ce1375367b92d411a06175eab3915fe93c6bc":["399d127639ae13222a8545b50e0ac545a6bcd2d7"],"3184874f7f3aca850248483485b4995343066875":["2bb2842e561df4e8e9ad89010605fc86ac265465","0a22eafe3f72a4c2945eaad9547e6c78816978f4"],"3394716f52b34ab259ad5247e7595d9f9db6e935":["c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","39b24d3b16db6e62433ca49a0d34bff9289ad5f3"],"0a22eafe3f72a4c2945eaad9547e6c78816978f4":[],"c7869f64c874ebf7f317d22c00baf2b6857797a6":[],"3e307596810ed3e15021a60f46fdebab6783c295":["3394716f52b34ab259ad5247e7595d9f9db6e935"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3599646b4d4c346cf74d334813488b8b337b5bf5":[],"0935c850ea562932997b72c69d93e345f21d7f45":["c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","3394716f52b34ab259ad5247e7595d9f9db6e935","c7869f64c874ebf7f317d22c00baf2b6857797a6","52c7e49be259508735752fba88085255014a6ecf","d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9"],"52c7e49be259508735752fba88085255014a6ecf":["3e307596810ed3e15021a60f46fdebab6783c295"],"39b24d3b16db6e62433ca49a0d34bff9289ad5f3":["3184874f7f3aca850248483485b4995343066875","0a22eafe3f72a4c2945eaad9547e6c78816978f4"],"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","0a22eafe3f72a4c2945eaad9547e6c78816978f4","c7869f64c874ebf7f317d22c00baf2b6857797a6","3599646b4d4c346cf74d334813488b8b337b5bf5","d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}