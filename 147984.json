{"path":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/FastVectorHighlighterTest#testCustomScoreQueryHighlight().mjava","commits":[{"id":"a4388b311bcdd7863e5e3c63404688e60d8e14fe","date":1434124772,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/FastVectorHighlighterTest#testCustomScoreQueryHighlight().mjava","pathOld":"/dev/null","sourceNew":"  public void testCustomScoreQueryHighlight() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n    Document doc = new Document();\n    FieldType type = new FieldType(TextField.TYPE_STORED);\n    type.setStoreTermVectorOffsets(true);\n    type.setStoreTermVectorPositions(true);\n    type.setStoreTermVectors(true);\n    type.freeze();\n    Field field = new Field(\"field\", \"This is a test where foo is highlighed and should be highlighted\", type);\n\n    doc.add(field);\n    writer.addDocument(doc);\n    FastVectorHighlighter highlighter = new FastVectorHighlighter();\n\n    IndexReader reader = DirectoryReader.open(writer, true);\n    int docId = 0;\n    FieldQuery fieldQuery  = highlighter.getFieldQuery( new CustomScoreQuery(new TermQuery(new Term(\"field\", \"foo\"))), reader );\n    String[] bestFragments = highlighter.getBestFragments(fieldQuery, reader, docId, \"field\", 54, 1);\n    // highlighted results are centered\n    assertEquals(\"This is a test where <b>foo</b> is highlighed and should be highlighted\", bestFragments[0]);\n    bestFragments = highlighter.getBestFragments(fieldQuery, reader, docId, \"field\", 52, 1);\n    assertEquals(\"This is a test where <b>foo</b> is highlighed and should be\", bestFragments[0]);\n    bestFragments = highlighter.getBestFragments(fieldQuery, reader, docId, \"field\", 30, 1);\n    assertEquals(\"a test where <b>foo</b> is highlighed\", bestFragments[0]);\n    reader.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a1862266772deb28cdcb7d996b64d2177022687","date":1453077824,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/FastVectorHighlighterTest#testCustomScoreQueryHighlight().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/FastVectorHighlighterTest#testCustomScoreQueryHighlight().mjava","sourceNew":"  public void testCustomScoreQueryHighlight() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n    Document doc = new Document();\n    FieldType type = new FieldType(TextField.TYPE_STORED);\n    type.setStoreTermVectorOffsets(true);\n    type.setStoreTermVectorPositions(true);\n    type.setStoreTermVectors(true);\n    type.freeze();\n    Field field = new Field(\"field\", \"This is a test where foo is highlighed and should be highlighted\", type);\n\n    doc.add(field);\n    writer.addDocument(doc);\n    FastVectorHighlighter highlighter = new FastVectorHighlighter();\n\n    IndexReader reader = DirectoryReader.open(writer);\n    int docId = 0;\n    FieldQuery fieldQuery  = highlighter.getFieldQuery( new CustomScoreQuery(new TermQuery(new Term(\"field\", \"foo\"))), reader );\n    String[] bestFragments = highlighter.getBestFragments(fieldQuery, reader, docId, \"field\", 54, 1);\n    // highlighted results are centered\n    assertEquals(\"This is a test where <b>foo</b> is highlighed and should be highlighted\", bestFragments[0]);\n    bestFragments = highlighter.getBestFragments(fieldQuery, reader, docId, \"field\", 52, 1);\n    assertEquals(\"This is a test where <b>foo</b> is highlighed and should be\", bestFragments[0]);\n    bestFragments = highlighter.getBestFragments(fieldQuery, reader, docId, \"field\", 30, 1);\n    assertEquals(\"a test where <b>foo</b> is highlighed\", bestFragments[0]);\n    reader.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testCustomScoreQueryHighlight() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n    Document doc = new Document();\n    FieldType type = new FieldType(TextField.TYPE_STORED);\n    type.setStoreTermVectorOffsets(true);\n    type.setStoreTermVectorPositions(true);\n    type.setStoreTermVectors(true);\n    type.freeze();\n    Field field = new Field(\"field\", \"This is a test where foo is highlighed and should be highlighted\", type);\n\n    doc.add(field);\n    writer.addDocument(doc);\n    FastVectorHighlighter highlighter = new FastVectorHighlighter();\n\n    IndexReader reader = DirectoryReader.open(writer, true);\n    int docId = 0;\n    FieldQuery fieldQuery  = highlighter.getFieldQuery( new CustomScoreQuery(new TermQuery(new Term(\"field\", \"foo\"))), reader );\n    String[] bestFragments = highlighter.getBestFragments(fieldQuery, reader, docId, \"field\", 54, 1);\n    // highlighted results are centered\n    assertEquals(\"This is a test where <b>foo</b> is highlighed and should be highlighted\", bestFragments[0]);\n    bestFragments = highlighter.getBestFragments(fieldQuery, reader, docId, \"field\", 52, 1);\n    assertEquals(\"This is a test where <b>foo</b> is highlighed and should be\", bestFragments[0]);\n    bestFragments = highlighter.getBestFragments(fieldQuery, reader, docId, \"field\", 30, 1);\n    assertEquals(\"a test where <b>foo</b> is highlighed\", bestFragments[0]);\n    reader.close();\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a82662cae660e76ded4de1e9b451633e523d83e1","date":1513619223,"type":4,"author":"Alan Woodward","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/FastVectorHighlighterTest#testCustomScoreQueryHighlight().mjava","sourceNew":null,"sourceOld":"  public void testCustomScoreQueryHighlight() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n    Document doc = new Document();\n    FieldType type = new FieldType(TextField.TYPE_STORED);\n    type.setStoreTermVectorOffsets(true);\n    type.setStoreTermVectorPositions(true);\n    type.setStoreTermVectors(true);\n    type.freeze();\n    Field field = new Field(\"field\", \"This is a test where foo is highlighed and should be highlighted\", type);\n\n    doc.add(field);\n    writer.addDocument(doc);\n    FastVectorHighlighter highlighter = new FastVectorHighlighter();\n\n    IndexReader reader = DirectoryReader.open(writer);\n    int docId = 0;\n    FieldQuery fieldQuery  = highlighter.getFieldQuery( new CustomScoreQuery(new TermQuery(new Term(\"field\", \"foo\"))), reader );\n    String[] bestFragments = highlighter.getBestFragments(fieldQuery, reader, docId, \"field\", 54, 1);\n    // highlighted results are centered\n    assertEquals(\"This is a test where <b>foo</b> is highlighed and should be highlighted\", bestFragments[0]);\n    bestFragments = highlighter.getBestFragments(fieldQuery, reader, docId, \"field\", 52, 1);\n    assertEquals(\"This is a test where <b>foo</b> is highlighed and should be\", bestFragments[0]);\n    bestFragments = highlighter.getBestFragments(fieldQuery, reader, docId, \"field\", 30, 1);\n    assertEquals(\"a test where <b>foo</b> is highlighed\", bestFragments[0]);\n    reader.close();\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2a1862266772deb28cdcb7d996b64d2177022687":["a4388b311bcdd7863e5e3c63404688e60d8e14fe"],"a82662cae660e76ded4de1e9b451633e523d83e1":["2a1862266772deb28cdcb7d996b64d2177022687"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a4388b311bcdd7863e5e3c63404688e60d8e14fe":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a82662cae660e76ded4de1e9b451633e523d83e1"]},"commit2Childs":{"2a1862266772deb28cdcb7d996b64d2177022687":["a82662cae660e76ded4de1e9b451633e523d83e1"],"a82662cae660e76ded4de1e9b451633e523d83e1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a4388b311bcdd7863e5e3c63404688e60d8e14fe"],"a4388b311bcdd7863e5e3c63404688e60d8e14fe":["2a1862266772deb28cdcb7d996b64d2177022687"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}