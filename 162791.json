{"path":"lucene/core/src/java/org/apache/lucene/codecs/simpletext/SimpleTextStoredFieldsWriter#writeField(FieldInfo,StorableField).mjava","commits":[{"id":"33e9fa3b49f4a365a04fdfc8a32dbcd0df798f5a","date":1341524239,"type":1,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/simpletext/SimpleTextStoredFieldsWriter#writeField(FieldInfo,StorableField).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/simpletext/SimpleTextStoredFieldsWriter#writeField(FieldInfo,IndexableField).mjava","sourceNew":"  @Override\n  public void writeField(FieldInfo info, StorableField field) throws IOException {\n    write(FIELD);\n    write(Integer.toString(info.number));\n    newLine();\n    \n    write(NAME);\n    write(field.name());\n    newLine();\n    \n    write(TYPE);\n    final Number n = field.numericValue();\n\n    if (n != null) {\n      if (n instanceof Byte || n instanceof Short || n instanceof Integer) {\n        write(TYPE_INT);\n        newLine();\n          \n        write(VALUE);\n        write(Integer.toString(n.intValue()));\n        newLine();\n      } else if (n instanceof Long) {\n        write(TYPE_LONG);\n        newLine();\n\n        write(VALUE);\n        write(Long.toString(n.longValue()));\n        newLine();\n      } else if (n instanceof Float) {\n        write(TYPE_FLOAT);\n        newLine();\n          \n        write(VALUE);\n        write(Float.toString(n.floatValue()));\n        newLine();\n      } else if (n instanceof Double) {\n        write(TYPE_DOUBLE);\n        newLine();\n          \n        write(VALUE);\n        write(Double.toString(n.doubleValue()));\n        newLine();\n      } else {\n        throw new IllegalArgumentException(\"cannot store numeric type \" + n.getClass());\n      }\n    } else { \n      BytesRef bytes = field.binaryValue();\n      if (bytes != null) {\n        write(TYPE_BINARY);\n        newLine();\n        \n        write(VALUE);\n        write(bytes);\n        newLine();\n      } else if (field.stringValue() == null) {\n        throw new IllegalArgumentException(\"field \" + field.name() + \" is stored but does not have binaryValue, stringValue nor numericValue\");\n      } else {\n        write(TYPE_STRING);\n        newLine();\n        \n        write(VALUE);\n        write(field.stringValue());\n        newLine();\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void writeField(FieldInfo info, IndexableField field) throws IOException {\n    write(FIELD);\n    write(Integer.toString(info.number));\n    newLine();\n    \n    write(NAME);\n    write(field.name());\n    newLine();\n    \n    write(TYPE);\n    final Number n = field.numericValue();\n\n    if (n != null) {\n      if (n instanceof Byte || n instanceof Short || n instanceof Integer) {\n        write(TYPE_INT);\n        newLine();\n          \n        write(VALUE);\n        write(Integer.toString(n.intValue()));\n        newLine();\n      } else if (n instanceof Long) {\n        write(TYPE_LONG);\n        newLine();\n\n        write(VALUE);\n        write(Long.toString(n.longValue()));\n        newLine();\n      } else if (n instanceof Float) {\n        write(TYPE_FLOAT);\n        newLine();\n          \n        write(VALUE);\n        write(Float.toString(n.floatValue()));\n        newLine();\n      } else if (n instanceof Double) {\n        write(TYPE_DOUBLE);\n        newLine();\n          \n        write(VALUE);\n        write(Double.toString(n.doubleValue()));\n        newLine();\n      } else {\n        throw new IllegalArgumentException(\"cannot store numeric type \" + n.getClass());\n      }\n    } else { \n      BytesRef bytes = field.binaryValue();\n      if (bytes != null) {\n        write(TYPE_BINARY);\n        newLine();\n        \n        write(VALUE);\n        write(bytes);\n        newLine();\n      } else if (field.stringValue() == null) {\n        throw new IllegalArgumentException(\"field \" + field.name() + \" is stored but does not have binaryValue, stringValue nor numericValue\");\n      } else {\n        write(TYPE_STRING);\n        newLine();\n        \n        write(VALUE);\n        write(field.stringValue());\n        newLine();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d028314cced5858683a1bb4741423d0f934257b","date":1346596535,"type":1,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/simpletext/SimpleTextStoredFieldsWriter#writeField(FieldInfo,StorableField).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/simpletext/SimpleTextStoredFieldsWriter#writeField(FieldInfo,IndexableField).mjava","sourceNew":"  @Override\n  public void writeField(FieldInfo info, StorableField field) throws IOException {\n    write(FIELD);\n    write(Integer.toString(info.number));\n    newLine();\n    \n    write(NAME);\n    write(field.name());\n    newLine();\n    \n    write(TYPE);\n    final Number n = field.numericValue();\n\n    if (n != null) {\n      if (n instanceof Byte || n instanceof Short || n instanceof Integer) {\n        write(TYPE_INT);\n        newLine();\n          \n        write(VALUE);\n        write(Integer.toString(n.intValue()));\n        newLine();\n      } else if (n instanceof Long) {\n        write(TYPE_LONG);\n        newLine();\n\n        write(VALUE);\n        write(Long.toString(n.longValue()));\n        newLine();\n      } else if (n instanceof Float) {\n        write(TYPE_FLOAT);\n        newLine();\n          \n        write(VALUE);\n        write(Float.toString(n.floatValue()));\n        newLine();\n      } else if (n instanceof Double) {\n        write(TYPE_DOUBLE);\n        newLine();\n          \n        write(VALUE);\n        write(Double.toString(n.doubleValue()));\n        newLine();\n      } else {\n        throw new IllegalArgumentException(\"cannot store numeric type \" + n.getClass());\n      }\n    } else { \n      BytesRef bytes = field.binaryValue();\n      if (bytes != null) {\n        write(TYPE_BINARY);\n        newLine();\n        \n        write(VALUE);\n        write(bytes);\n        newLine();\n      } else if (field.stringValue() == null) {\n        throw new IllegalArgumentException(\"field \" + field.name() + \" is stored but does not have binaryValue, stringValue nor numericValue\");\n      } else {\n        write(TYPE_STRING);\n        newLine();\n        \n        write(VALUE);\n        write(field.stringValue());\n        newLine();\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void writeField(FieldInfo info, IndexableField field) throws IOException {\n    write(FIELD);\n    write(Integer.toString(info.number));\n    newLine();\n    \n    write(NAME);\n    write(field.name());\n    newLine();\n    \n    write(TYPE);\n    final Number n = field.numericValue();\n\n    if (n != null) {\n      if (n instanceof Byte || n instanceof Short || n instanceof Integer) {\n        write(TYPE_INT);\n        newLine();\n          \n        write(VALUE);\n        write(Integer.toString(n.intValue()));\n        newLine();\n      } else if (n instanceof Long) {\n        write(TYPE_LONG);\n        newLine();\n\n        write(VALUE);\n        write(Long.toString(n.longValue()));\n        newLine();\n      } else if (n instanceof Float) {\n        write(TYPE_FLOAT);\n        newLine();\n          \n        write(VALUE);\n        write(Float.toString(n.floatValue()));\n        newLine();\n      } else if (n instanceof Double) {\n        write(TYPE_DOUBLE);\n        newLine();\n          \n        write(VALUE);\n        write(Double.toString(n.doubleValue()));\n        newLine();\n      } else {\n        throw new IllegalArgumentException(\"cannot store numeric type \" + n.getClass());\n      }\n    } else { \n      BytesRef bytes = field.binaryValue();\n      if (bytes != null) {\n        write(TYPE_BINARY);\n        newLine();\n        \n        write(VALUE);\n        write(bytes);\n        newLine();\n      } else if (field.stringValue() == null) {\n        throw new IllegalArgumentException(\"field \" + field.name() + \" is stored but does not have binaryValue, stringValue nor numericValue\");\n      } else {\n        write(TYPE_STRING);\n        newLine();\n        \n        write(VALUE);\n        write(field.stringValue());\n        newLine();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2","date":1346834651,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextStoredFieldsWriter#writeField(FieldInfo,StorableField).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/simpletext/SimpleTextStoredFieldsWriter#writeField(FieldInfo,StorableField).mjava","sourceNew":"  @Override\n  public void writeField(FieldInfo info, StorableField field) throws IOException {\n    write(FIELD);\n    write(Integer.toString(info.number));\n    newLine();\n    \n    write(NAME);\n    write(field.name());\n    newLine();\n    \n    write(TYPE);\n    final Number n = field.numericValue();\n\n    if (n != null) {\n      if (n instanceof Byte || n instanceof Short || n instanceof Integer) {\n        write(TYPE_INT);\n        newLine();\n          \n        write(VALUE);\n        write(Integer.toString(n.intValue()));\n        newLine();\n      } else if (n instanceof Long) {\n        write(TYPE_LONG);\n        newLine();\n\n        write(VALUE);\n        write(Long.toString(n.longValue()));\n        newLine();\n      } else if (n instanceof Float) {\n        write(TYPE_FLOAT);\n        newLine();\n          \n        write(VALUE);\n        write(Float.toString(n.floatValue()));\n        newLine();\n      } else if (n instanceof Double) {\n        write(TYPE_DOUBLE);\n        newLine();\n          \n        write(VALUE);\n        write(Double.toString(n.doubleValue()));\n        newLine();\n      } else {\n        throw new IllegalArgumentException(\"cannot store numeric type \" + n.getClass());\n      }\n    } else { \n      BytesRef bytes = field.binaryValue();\n      if (bytes != null) {\n        write(TYPE_BINARY);\n        newLine();\n        \n        write(VALUE);\n        write(bytes);\n        newLine();\n      } else if (field.stringValue() == null) {\n        throw new IllegalArgumentException(\"field \" + field.name() + \" is stored but does not have binaryValue, stringValue nor numericValue\");\n      } else {\n        write(TYPE_STRING);\n        newLine();\n        \n        write(VALUE);\n        write(field.stringValue());\n        newLine();\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void writeField(FieldInfo info, StorableField field) throws IOException {\n    write(FIELD);\n    write(Integer.toString(info.number));\n    newLine();\n    \n    write(NAME);\n    write(field.name());\n    newLine();\n    \n    write(TYPE);\n    final Number n = field.numericValue();\n\n    if (n != null) {\n      if (n instanceof Byte || n instanceof Short || n instanceof Integer) {\n        write(TYPE_INT);\n        newLine();\n          \n        write(VALUE);\n        write(Integer.toString(n.intValue()));\n        newLine();\n      } else if (n instanceof Long) {\n        write(TYPE_LONG);\n        newLine();\n\n        write(VALUE);\n        write(Long.toString(n.longValue()));\n        newLine();\n      } else if (n instanceof Float) {\n        write(TYPE_FLOAT);\n        newLine();\n          \n        write(VALUE);\n        write(Float.toString(n.floatValue()));\n        newLine();\n      } else if (n instanceof Double) {\n        write(TYPE_DOUBLE);\n        newLine();\n          \n        write(VALUE);\n        write(Double.toString(n.doubleValue()));\n        newLine();\n      } else {\n        throw new IllegalArgumentException(\"cannot store numeric type \" + n.getClass());\n      }\n    } else { \n      BytesRef bytes = field.binaryValue();\n      if (bytes != null) {\n        write(TYPE_BINARY);\n        newLine();\n        \n        write(VALUE);\n        write(bytes);\n        newLine();\n      } else if (field.stringValue() == null) {\n        throw new IllegalArgumentException(\"field \" + field.name() + \" is stored but does not have binaryValue, stringValue nor numericValue\");\n      } else {\n        write(TYPE_STRING);\n        newLine();\n        \n        write(VALUE);\n        write(field.stringValue());\n        newLine();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1d028314cced5858683a1bb4741423d0f934257b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","33e9fa3b49f4a365a04fdfc8a32dbcd0df798f5a"],"33e9fa3b49f4a365a04fdfc8a32dbcd0df798f5a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["1d028314cced5858683a1bb4741423d0f934257b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"]},"commit2Childs":{"1d028314cced5858683a1bb4741423d0f934257b":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"],"33e9fa3b49f4a365a04fdfc8a32dbcd0df798f5a":["1d028314cced5858683a1bb4741423d0f934257b"],"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1d028314cced5858683a1bb4741423d0f934257b","33e9fa3b49f4a365a04fdfc8a32dbcd0df798f5a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}