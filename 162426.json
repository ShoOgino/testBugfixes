{"path":"lucene/backwards/src/test/org/apache/lucene/search/TestComplexExplanations#test1().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/search/TestComplexExplanations#test1().mjava","pathOld":"backwards/src/test/org/apache/lucene/search/TestComplexExplanations#test1().mjava","sourceNew":"  public void test1() throws Exception {\n    \n    BooleanQuery q = new BooleanQuery();\n    \n    q.add(qp.parse(\"\\\"w1 w2\\\"~1\"), Occur.MUST);\n    q.add(snear(st(\"w2\"),\n                sor(\"w5\",\"zz\"),\n                4, true),\n          Occur.SHOULD);\n    q.add(snear(sf(\"w3\",2), st(\"w2\"), st(\"w3\"), 5, true),\n          Occur.SHOULD);\n    \n    Query t = new FilteredQuery(qp.parse(\"xx\"),\n                                new ItemizedFilter(new int[] {1,3}));\n    t.setBoost(1000);\n    q.add(t, Occur.SHOULD);\n    \n    t = new ConstantScoreQuery(new ItemizedFilter(new int[] {0,2}));\n    t.setBoost(30);\n    q.add(t, Occur.SHOULD);\n    \n    DisjunctionMaxQuery dm = new DisjunctionMaxQuery(0.2f);\n    dm.add(snear(st(\"w2\"),\n                 sor(\"w5\",\"zz\"),\n                 4, true));\n    dm.add(qp.parse(\"QQ\"));\n    dm.add(qp.parse(\"xx yy -zz\"));\n    dm.add(qp.parse(\"-xx -w1\"));\n\n    DisjunctionMaxQuery dm2 = new DisjunctionMaxQuery(0.5f);\n    dm2.add(qp.parse(\"w1\"));\n    dm2.add(qp.parse(\"w2\"));\n    dm2.add(qp.parse(\"w3\"));\n    dm.add(dm2);\n\n    q.add(dm, Occur.SHOULD);\n\n    BooleanQuery b = new BooleanQuery();\n    b.setMinimumNumberShouldMatch(2);\n    b.add(snear(\"w1\",\"w2\",1,true), Occur.SHOULD);\n    b.add(snear(\"w2\",\"w3\",1,true), Occur.SHOULD);\n    b.add(snear(\"w1\",\"w3\",3,true), Occur.SHOULD);\n\n    q.add(b, Occur.SHOULD);\n    \n    qtest(q, new int[] { 0,1,2 });\n  }\n\n","sourceOld":"  public void test1() throws Exception {\n    \n    BooleanQuery q = new BooleanQuery();\n    \n    q.add(qp.parse(\"\\\"w1 w2\\\"~1\"), Occur.MUST);\n    q.add(snear(st(\"w2\"),\n                sor(\"w5\",\"zz\"),\n                4, true),\n          Occur.SHOULD);\n    q.add(snear(sf(\"w3\",2), st(\"w2\"), st(\"w3\"), 5, true),\n          Occur.SHOULD);\n    \n    Query t = new FilteredQuery(qp.parse(\"xx\"),\n                                new ItemizedFilter(new int[] {1,3}));\n    t.setBoost(1000);\n    q.add(t, Occur.SHOULD);\n    \n    t = new ConstantScoreQuery(new ItemizedFilter(new int[] {0,2}));\n    t.setBoost(30);\n    q.add(t, Occur.SHOULD);\n    \n    DisjunctionMaxQuery dm = new DisjunctionMaxQuery(0.2f);\n    dm.add(snear(st(\"w2\"),\n                 sor(\"w5\",\"zz\"),\n                 4, true));\n    dm.add(qp.parse(\"QQ\"));\n    dm.add(qp.parse(\"xx yy -zz\"));\n    dm.add(qp.parse(\"-xx -w1\"));\n\n    DisjunctionMaxQuery dm2 = new DisjunctionMaxQuery(0.5f);\n    dm2.add(qp.parse(\"w1\"));\n    dm2.add(qp.parse(\"w2\"));\n    dm2.add(qp.parse(\"w3\"));\n    dm.add(dm2);\n\n    q.add(dm, Occur.SHOULD);\n\n    BooleanQuery b = new BooleanQuery();\n    b.setMinimumNumberShouldMatch(2);\n    b.add(snear(\"w1\",\"w2\",1,true), Occur.SHOULD);\n    b.add(snear(\"w2\",\"w3\",1,true), Occur.SHOULD);\n    b.add(snear(\"w1\",\"w3\",3,true), Occur.SHOULD);\n\n    q.add(b, Occur.SHOULD);\n    \n    qtest(q, new int[] { 0,1,2 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/test/org/apache/lucene/search/TestComplexExplanations#test1().mjava","sourceNew":null,"sourceOld":"  public void test1() throws Exception {\n    \n    BooleanQuery q = new BooleanQuery();\n    \n    q.add(qp.parse(\"\\\"w1 w2\\\"~1\"), Occur.MUST);\n    q.add(snear(st(\"w2\"),\n                sor(\"w5\",\"zz\"),\n                4, true),\n          Occur.SHOULD);\n    q.add(snear(sf(\"w3\",2), st(\"w2\"), st(\"w3\"), 5, true),\n          Occur.SHOULD);\n    \n    Query t = new FilteredQuery(qp.parse(\"xx\"),\n                                new ItemizedFilter(new int[] {1,3}));\n    t.setBoost(1000);\n    q.add(t, Occur.SHOULD);\n    \n    t = new ConstantScoreQuery(new ItemizedFilter(new int[] {0,2}));\n    t.setBoost(30);\n    q.add(t, Occur.SHOULD);\n    \n    DisjunctionMaxQuery dm = new DisjunctionMaxQuery(0.2f);\n    dm.add(snear(st(\"w2\"),\n                 sor(\"w5\",\"zz\"),\n                 4, true));\n    dm.add(qp.parse(\"QQ\"));\n    dm.add(qp.parse(\"xx yy -zz\"));\n    dm.add(qp.parse(\"-xx -w1\"));\n\n    DisjunctionMaxQuery dm2 = new DisjunctionMaxQuery(0.5f);\n    dm2.add(qp.parse(\"w1\"));\n    dm2.add(qp.parse(\"w2\"));\n    dm2.add(qp.parse(\"w3\"));\n    dm.add(dm2);\n\n    q.add(dm, Occur.SHOULD);\n\n    BooleanQuery b = new BooleanQuery();\n    b.setMinimumNumberShouldMatch(2);\n    b.add(snear(\"w1\",\"w2\",1,true), Occur.SHOULD);\n    b.add(snear(\"w2\",\"w3\",1,true), Occur.SHOULD);\n    b.add(snear(\"w1\",\"w3\",3,true), Occur.SHOULD);\n\n    q.add(b, Occur.SHOULD);\n    \n    qtest(q, new int[] { 0,1,2 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}