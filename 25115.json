{"path":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#replaceClassLoader(URLClassLoader,File,FileFilter).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#replaceClassLoader(URLClassLoader,File,FileFilter).mjava","pathOld":"solr/src/java/org/apache/solr/core/SolrResourceLoader#replaceClassLoader(URLClassLoader,File,FileFilter).mjava","sourceNew":"  private static URLClassLoader replaceClassLoader(final URLClassLoader oldLoader,\n                                                   final File base,\n                                                   final FileFilter filter) {\n    if (null != base && base.canRead() && base.isDirectory()) {\n      File[] files = base.listFiles(filter);\n      \n      if (null == files || 0 == files.length) return oldLoader;\n      \n      URL[] oldElements = oldLoader.getURLs();\n      URL[] elements = new URL[oldElements.length + files.length];\n      System.arraycopy(oldElements, 0, elements, 0, oldElements.length);\n      \n      for (int j = 0; j < files.length; j++) {\n        try {\n          URL element = files[j].toURI().normalize().toURL();\n          log.info(\"Adding '\" + element.toString() + \"' to classloader\");\n          elements[oldElements.length + j] = element;\n        } catch (MalformedURLException e) {\n          SolrException.log(log, \"Can't add element to classloader: \" + files[j], e);\n        }\n      }\n      return URLClassLoader.newInstance(elements, oldLoader.getParent());\n    }\n    // are we still here?\n    return oldLoader;\n  }\n\n","sourceOld":"  private static URLClassLoader replaceClassLoader(final URLClassLoader oldLoader,\n                                                   final File base,\n                                                   final FileFilter filter) {\n    if (null != base && base.canRead() && base.isDirectory()) {\n      File[] files = base.listFiles(filter);\n      \n      if (null == files || 0 == files.length) return oldLoader;\n      \n      URL[] oldElements = oldLoader.getURLs();\n      URL[] elements = new URL[oldElements.length + files.length];\n      System.arraycopy(oldElements, 0, elements, 0, oldElements.length);\n      \n      for (int j = 0; j < files.length; j++) {\n        try {\n          URL element = files[j].toURI().normalize().toURL();\n          log.info(\"Adding '\" + element.toString() + \"' to classloader\");\n          elements[oldElements.length + j] = element;\n        } catch (MalformedURLException e) {\n          SolrException.log(log, \"Can't add element to classloader: \" + files[j], e);\n        }\n      }\n      return URLClassLoader.newInstance(elements, oldLoader.getParent());\n    }\n    // are we still here?\n    return oldLoader;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#replaceClassLoader(URLClassLoader,File,FileFilter).mjava","pathOld":"solr/src/java/org/apache/solr/core/SolrResourceLoader#replaceClassLoader(URLClassLoader,File,FileFilter).mjava","sourceNew":"  private static URLClassLoader replaceClassLoader(final URLClassLoader oldLoader,\n                                                   final File base,\n                                                   final FileFilter filter) {\n    if (null != base && base.canRead() && base.isDirectory()) {\n      File[] files = base.listFiles(filter);\n      \n      if (null == files || 0 == files.length) return oldLoader;\n      \n      URL[] oldElements = oldLoader.getURLs();\n      URL[] elements = new URL[oldElements.length + files.length];\n      System.arraycopy(oldElements, 0, elements, 0, oldElements.length);\n      \n      for (int j = 0; j < files.length; j++) {\n        try {\n          URL element = files[j].toURI().normalize().toURL();\n          log.info(\"Adding '\" + element.toString() + \"' to classloader\");\n          elements[oldElements.length + j] = element;\n        } catch (MalformedURLException e) {\n          SolrException.log(log, \"Can't add element to classloader: \" + files[j], e);\n        }\n      }\n      return URLClassLoader.newInstance(elements, oldLoader.getParent());\n    }\n    // are we still here?\n    return oldLoader;\n  }\n\n","sourceOld":"  private static URLClassLoader replaceClassLoader(final URLClassLoader oldLoader,\n                                                   final File base,\n                                                   final FileFilter filter) {\n    if (null != base && base.canRead() && base.isDirectory()) {\n      File[] files = base.listFiles(filter);\n      \n      if (null == files || 0 == files.length) return oldLoader;\n      \n      URL[] oldElements = oldLoader.getURLs();\n      URL[] elements = new URL[oldElements.length + files.length];\n      System.arraycopy(oldElements, 0, elements, 0, oldElements.length);\n      \n      for (int j = 0; j < files.length; j++) {\n        try {\n          URL element = files[j].toURI().normalize().toURL();\n          log.info(\"Adding '\" + element.toString() + \"' to classloader\");\n          elements[oldElements.length + j] = element;\n        } catch (MalformedURLException e) {\n          SolrException.log(log, \"Can't add element to classloader: \" + files[j], e);\n        }\n      }\n      return URLClassLoader.newInstance(elements, oldLoader.getParent());\n    }\n    // are we still here?\n    return oldLoader;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#replaceClassLoader(URLClassLoader,File,FileFilter).mjava","pathOld":"solr/src/java/org/apache/solr/core/SolrResourceLoader#replaceClassLoader(URLClassLoader,File,FileFilter).mjava","sourceNew":"  private static URLClassLoader replaceClassLoader(final URLClassLoader oldLoader,\n                                                   final File base,\n                                                   final FileFilter filter) {\n    if (null != base && base.canRead() && base.isDirectory()) {\n      File[] files = base.listFiles(filter);\n      \n      if (null == files || 0 == files.length) return oldLoader;\n      \n      URL[] oldElements = oldLoader.getURLs();\n      URL[] elements = new URL[oldElements.length + files.length];\n      System.arraycopy(oldElements, 0, elements, 0, oldElements.length);\n      \n      for (int j = 0; j < files.length; j++) {\n        try {\n          URL element = files[j].toURI().normalize().toURL();\n          log.info(\"Adding '\" + element.toString() + \"' to classloader\");\n          elements[oldElements.length + j] = element;\n        } catch (MalformedURLException e) {\n          SolrException.log(log, \"Can't add element to classloader: \" + files[j], e);\n        }\n      }\n      return URLClassLoader.newInstance(elements, oldLoader.getParent());\n    }\n    // are we still here?\n    return oldLoader;\n  }\n\n","sourceOld":"  private static URLClassLoader replaceClassLoader(final URLClassLoader oldLoader,\n                                                   final File base,\n                                                   final FileFilter filter) {\n    if (null != base && base.canRead() && base.isDirectory()) {\n      File[] files = base.listFiles(filter);\n      \n      if (null == files || 0 == files.length) return oldLoader;\n      \n      URL[] oldElements = oldLoader.getURLs();\n      URL[] elements = new URL[oldElements.length + files.length];\n      System.arraycopy(oldElements, 0, elements, 0, oldElements.length);\n      \n      for (int j = 0; j < files.length; j++) {\n        try {\n          URL element = files[j].toURI().normalize().toURL();\n          log.info(\"Adding '\" + element.toString() + \"' to classloader\");\n          elements[oldElements.length + j] = element;\n        } catch (MalformedURLException e) {\n          SolrException.log(log, \"Can't add element to classloader: \" + files[j], e);\n        }\n      }\n      return URLClassLoader.newInstance(elements, oldLoader.getParent());\n    }\n    // are we still here?\n    return oldLoader;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d7032150736f83396eb1fd9fc65e18b918099be","date":1368033706,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#replaceClassLoader(URLClassLoader,File,FileFilter).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#replaceClassLoader(URLClassLoader,File,FileFilter).mjava","sourceNew":"  private static URLClassLoader replaceClassLoader(final URLClassLoader oldLoader,\n                                                   final File base,\n                                                   final FileFilter filter) {\n    if (null != base && base.canRead() && base.isDirectory()) {\n      File[] files = base.listFiles(filter);\n      \n      if (null == files || 0 == files.length) return oldLoader;\n      \n      URL[] oldElements = oldLoader.getURLs();\n      URL[] elements = new URL[oldElements.length + files.length];\n      System.arraycopy(oldElements, 0, elements, 0, oldElements.length);\n      \n      for (int j = 0; j < files.length; j++) {\n        try {\n          URL element = files[j].toURI().normalize().toURL();\n          log.info(\"Adding '\" + element.toString() + \"' to classloader\");\n          elements[oldElements.length + j] = element;\n        } catch (MalformedURLException e) {\n          SolrException.log(log, \"Can't add element to classloader: \" + files[j], e);\n        }\n      }\n      ClassLoader oldParent = oldLoader.getParent();\n      IOUtils.closeWhileHandlingException(oldLoader); // best effort\n      return URLClassLoader.newInstance(elements, oldParent);\n    }\n    // are we still here?\n    return oldLoader;\n  }\n\n","sourceOld":"  private static URLClassLoader replaceClassLoader(final URLClassLoader oldLoader,\n                                                   final File base,\n                                                   final FileFilter filter) {\n    if (null != base && base.canRead() && base.isDirectory()) {\n      File[] files = base.listFiles(filter);\n      \n      if (null == files || 0 == files.length) return oldLoader;\n      \n      URL[] oldElements = oldLoader.getURLs();\n      URL[] elements = new URL[oldElements.length + files.length];\n      System.arraycopy(oldElements, 0, elements, 0, oldElements.length);\n      \n      for (int j = 0; j < files.length; j++) {\n        try {\n          URL element = files[j].toURI().normalize().toURL();\n          log.info(\"Adding '\" + element.toString() + \"' to classloader\");\n          elements[oldElements.length + j] = element;\n        } catch (MalformedURLException e) {\n          SolrException.log(log, \"Can't add element to classloader: \" + files[j], e);\n        }\n      }\n      return URLClassLoader.newInstance(elements, oldLoader.getParent());\n    }\n    // are we still here?\n    return oldLoader;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a626ec4d1c92e59fe390724d6220081047b03ce7","date":1448021525,"type":4,"author":"Alan Woodward","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#replaceClassLoader(URLClassLoader,File,FileFilter).mjava","sourceNew":null,"sourceOld":"  private static URLClassLoader replaceClassLoader(final URLClassLoader oldLoader,\n                                                   final File base,\n                                                   final FileFilter filter) {\n    if (null != base && base.canRead() && base.isDirectory()) {\n      File[] files = base.listFiles(filter);\n      \n      if (null == files || 0 == files.length) return oldLoader;\n      \n      URL[] oldElements = oldLoader.getURLs();\n      URL[] elements = new URL[oldElements.length + files.length];\n      System.arraycopy(oldElements, 0, elements, 0, oldElements.length);\n      \n      for (int j = 0; j < files.length; j++) {\n        try {\n          URL element = files[j].toURI().normalize().toURL();\n          log.info(\"Adding '\" + element.toString() + \"' to classloader\");\n          elements[oldElements.length + j] = element;\n        } catch (MalformedURLException e) {\n          SolrException.log(log, \"Can't add element to classloader: \" + files[j], e);\n        }\n      }\n      ClassLoader oldParent = oldLoader.getParent();\n      IOUtils.closeWhileHandlingException(oldLoader); // best effort\n      return URLClassLoader.newInstance(elements, oldParent);\n    }\n    // are we still here?\n    return oldLoader;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a626ec4d1c92e59fe390724d6220081047b03ce7":["0d7032150736f83396eb1fd9fc65e18b918099be"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0d7032150736f83396eb1fd9fc65e18b918099be":["c26f00b574427b55127e869b935845554afde1fa"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a626ec4d1c92e59fe390724d6220081047b03ce7"]},"commit2Childs":{"a626ec4d1c92e59fe390724d6220081047b03ce7":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["0d7032150736f83396eb1fd9fc65e18b918099be"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"0d7032150736f83396eb1fd9fc65e18b918099be":["a626ec4d1c92e59fe390724d6220081047b03ce7"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}