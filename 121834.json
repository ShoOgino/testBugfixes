{"path":"solr/core/src/java/org/apache/solr/handler/CdcrReplicatorManager#initLogReaders().mjava","commits":[{"id":"86290366cefc1b9d4eced13b430858c4a4c0421d","date":1432321109,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/CdcrReplicatorManager#initLogReaders().mjava","pathOld":"/dev/null","sourceNew":"  void initLogReaders() {\n    String collectionName = core.getCoreDescriptor().getCloudDescriptor().getCollectionName();\n    String shard = core.getCoreDescriptor().getCloudDescriptor().getShardId();\n    CdcrUpdateLog ulog = (CdcrUpdateLog) core.getUpdateHandler().getUpdateLog();\n\n    for (CdcrReplicatorState state : replicatorStates) {\n      state.closeLogReader();\n      try {\n        long checkpoint = this.getCheckpoint(state);\n        log.info(\"Create new update log reader for target {} with checkpoint {} @ {}:{}\", state.getTargetCollection(),\n            checkpoint, collectionName, shard);\n        CdcrUpdateLog.CdcrLogReader reader = ulog.newLogReader();\n        reader.seek(checkpoint);\n        state.init(reader);\n      } catch (IOException | SolrServerException | SolrException e) {\n        log.warn(\"Unable to instantiate the log reader for target collection \" + state.getTargetCollection(), e);\n      } catch (InterruptedException e) {\n        log.warn(\"Thread interrupted while instantiate the log reader for target collection \" + state.getTargetCollection(), e);\n        Thread.currentThread().interrupt();\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06e38ae84477e7a7eacea808dc3de9950fce5ccf","date":1470634560,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/CdcrReplicatorManager#initLogReaders().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/CdcrReplicatorManager#initLogReaders().mjava","sourceNew":"  private void initLogReaders() {\n    String collectionName = core.getCoreDescriptor().getCloudDescriptor().getCollectionName();\n    String shard = core.getCoreDescriptor().getCloudDescriptor().getShardId();\n    CdcrUpdateLog ulog = (CdcrUpdateLog) core.getUpdateHandler().getUpdateLog();\n\n    for (CdcrReplicatorState state : replicatorStates) {\n      state.closeLogReader();\n      try {\n        long checkpoint = this.getCheckpoint(state);\n        log.info(\"Create new update log reader for target {} with checkpoint {} @ {}:{}\", state.getTargetCollection(),\n            checkpoint, collectionName, shard);\n        CdcrUpdateLog.CdcrLogReader reader = ulog.newLogReader();\n        boolean seek = reader.seek(checkpoint);\n        state.init(reader);\n        if (!seek) {\n          // targetVersion is lower than the oldest known entry.\n          // In this scenario, it probably means that there is a gap in the updates log.\n          // the best we can do here is to bootstrap the target leader by replicating the full index\n          final String targetCollection = state.getTargetCollection();\n          state.setBootstrapInProgress(true);\n          log.info(\"Attempting to bootstrap target collection: {}, shard: {}\", targetCollection, shard);\n          bootstrapStatusRunnable = new BootstrapStatusRunnable(core, state);\n          log.info(\"Submitting bootstrap task to executor\");\n          try {\n            bootstrapExecutor.submit(bootstrapStatusRunnable);\n          } catch (Exception e) {\n            log.error(\"Unable to submit bootstrap call to executor\", e);\n          }\n        }\n      } catch (IOException | SolrServerException | SolrException e) {\n        log.warn(\"Unable to instantiate the log reader for target collection \" + state.getTargetCollection(), e);\n      } catch (InterruptedException e) {\n        log.warn(\"Thread interrupted while instantiate the log reader for target collection \" + state.getTargetCollection(), e);\n        Thread.currentThread().interrupt();\n      }\n    }\n  }\n\n","sourceOld":"  void initLogReaders() {\n    String collectionName = core.getCoreDescriptor().getCloudDescriptor().getCollectionName();\n    String shard = core.getCoreDescriptor().getCloudDescriptor().getShardId();\n    CdcrUpdateLog ulog = (CdcrUpdateLog) core.getUpdateHandler().getUpdateLog();\n\n    for (CdcrReplicatorState state : replicatorStates) {\n      state.closeLogReader();\n      try {\n        long checkpoint = this.getCheckpoint(state);\n        log.info(\"Create new update log reader for target {} with checkpoint {} @ {}:{}\", state.getTargetCollection(),\n            checkpoint, collectionName, shard);\n        CdcrUpdateLog.CdcrLogReader reader = ulog.newLogReader();\n        reader.seek(checkpoint);\n        state.init(reader);\n      } catch (IOException | SolrServerException | SolrException e) {\n        log.warn(\"Unable to instantiate the log reader for target collection \" + state.getTargetCollection(), e);\n      } catch (InterruptedException e) {\n        log.warn(\"Thread interrupted while instantiate the log reader for target collection \" + state.getTargetCollection(), e);\n        Thread.currentThread().interrupt();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b013574eedcdbac35dc7e35b0ee616ffc38895d","date":1470897818,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/CdcrReplicatorManager#initLogReaders().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/CdcrReplicatorManager#initLogReaders().mjava","sourceNew":"  private void initLogReaders() {\n    String collectionName = core.getCoreDescriptor().getCloudDescriptor().getCollectionName();\n    String shard = core.getCoreDescriptor().getCloudDescriptor().getShardId();\n    CdcrUpdateLog ulog = (CdcrUpdateLog) core.getUpdateHandler().getUpdateLog();\n\n    for (CdcrReplicatorState state : replicatorStates) {\n      state.closeLogReader();\n      try {\n        long checkpoint = this.getCheckpoint(state);\n        log.info(\"Create new update log reader for target {} with checkpoint {} @ {}:{}\", state.getTargetCollection(),\n            checkpoint, collectionName, shard);\n        CdcrUpdateLog.CdcrLogReader reader = ulog.newLogReader();\n        boolean seek = reader.seek(checkpoint);\n        state.init(reader);\n        if (!seek) {\n          // targetVersion is lower than the oldest known entry.\n          // In this scenario, it probably means that there is a gap in the updates log.\n          // the best we can do here is to bootstrap the target leader by replicating the full index\n          final String targetCollection = state.getTargetCollection();\n          state.setBootstrapInProgress(true);\n          log.info(\"Attempting to bootstrap target collection: {}, shard: {}\", targetCollection, shard);\n          bootstrapStatusRunnable = new BootstrapStatusRunnable(core, state);\n          log.info(\"Submitting bootstrap task to executor\");\n          try {\n            bootstrapExecutor.submit(bootstrapStatusRunnable);\n          } catch (Exception e) {\n            log.error(\"Unable to submit bootstrap call to executor\", e);\n          }\n        }\n      } catch (IOException | SolrServerException | SolrException e) {\n        log.warn(\"Unable to instantiate the log reader for target collection \" + state.getTargetCollection(), e);\n      } catch (InterruptedException e) {\n        log.warn(\"Thread interrupted while instantiate the log reader for target collection \" + state.getTargetCollection(), e);\n        Thread.currentThread().interrupt();\n      }\n    }\n  }\n\n","sourceOld":"  void initLogReaders() {\n    String collectionName = core.getCoreDescriptor().getCloudDescriptor().getCollectionName();\n    String shard = core.getCoreDescriptor().getCloudDescriptor().getShardId();\n    CdcrUpdateLog ulog = (CdcrUpdateLog) core.getUpdateHandler().getUpdateLog();\n\n    for (CdcrReplicatorState state : replicatorStates) {\n      state.closeLogReader();\n      try {\n        long checkpoint = this.getCheckpoint(state);\n        log.info(\"Create new update log reader for target {} with checkpoint {} @ {}:{}\", state.getTargetCollection(),\n            checkpoint, collectionName, shard);\n        CdcrUpdateLog.CdcrLogReader reader = ulog.newLogReader();\n        reader.seek(checkpoint);\n        state.init(reader);\n      } catch (IOException | SolrServerException | SolrException e) {\n        log.warn(\"Unable to instantiate the log reader for target collection \" + state.getTargetCollection(), e);\n      } catch (InterruptedException e) {\n        log.warn(\"Thread interrupted while instantiate the log reader for target collection \" + state.getTargetCollection(), e);\n        Thread.currentThread().interrupt();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/CdcrReplicatorManager#initLogReaders().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/CdcrReplicatorManager#initLogReaders().mjava","sourceNew":"  private void initLogReaders() {\n    String collectionName = core.getCoreDescriptor().getCloudDescriptor().getCollectionName();\n    String shard = core.getCoreDescriptor().getCloudDescriptor().getShardId();\n    CdcrUpdateLog ulog = (CdcrUpdateLog) core.getUpdateHandler().getUpdateLog();\n\n    for (CdcrReplicatorState state : replicatorStates) {\n      state.closeLogReader();\n      try {\n        long checkpoint = this.getCheckpoint(state);\n        log.info(\"Create new update log reader for target {} with checkpoint {} @ {}:{}\", state.getTargetCollection(),\n            checkpoint, collectionName, shard);\n        CdcrUpdateLog.CdcrLogReader reader = ulog.newLogReader();\n        boolean seek = reader.seek(checkpoint);\n        state.init(reader);\n        if (!seek) {\n          // targetVersion is lower than the oldest known entry.\n          // In this scenario, it probably means that there is a gap in the updates log.\n          // the best we can do here is to bootstrap the target leader by replicating the full index\n          final String targetCollection = state.getTargetCollection();\n          state.setBootstrapInProgress(true);\n          log.info(\"Attempting to bootstrap target collection: {}, shard: {}\", targetCollection, shard);\n          bootstrapStatusRunnable = new BootstrapStatusRunnable(core, state);\n          log.info(\"Submitting bootstrap task to executor\");\n          try {\n            bootstrapExecutor.submit(bootstrapStatusRunnable);\n          } catch (Exception e) {\n            log.error(\"Unable to submit bootstrap call to executor\", e);\n          }\n        }\n      } catch (IOException | SolrServerException | SolrException e) {\n        log.warn(\"Unable to instantiate the log reader for target collection \" + state.getTargetCollection(), e);\n      } catch (InterruptedException e) {\n        log.warn(\"Thread interrupted while instantiate the log reader for target collection \" + state.getTargetCollection(), e);\n        Thread.currentThread().interrupt();\n      }\n    }\n  }\n\n","sourceOld":"  void initLogReaders() {\n    String collectionName = core.getCoreDescriptor().getCloudDescriptor().getCollectionName();\n    String shard = core.getCoreDescriptor().getCloudDescriptor().getShardId();\n    CdcrUpdateLog ulog = (CdcrUpdateLog) core.getUpdateHandler().getUpdateLog();\n\n    for (CdcrReplicatorState state : replicatorStates) {\n      state.closeLogReader();\n      try {\n        long checkpoint = this.getCheckpoint(state);\n        log.info(\"Create new update log reader for target {} with checkpoint {} @ {}:{}\", state.getTargetCollection(),\n            checkpoint, collectionName, shard);\n        CdcrUpdateLog.CdcrLogReader reader = ulog.newLogReader();\n        reader.seek(checkpoint);\n        state.init(reader);\n      } catch (IOException | SolrServerException | SolrException e) {\n        log.warn(\"Unable to instantiate the log reader for target collection \" + state.getTargetCollection(), e);\n      } catch (InterruptedException e) {\n        log.warn(\"Thread interrupted while instantiate the log reader for target collection \" + state.getTargetCollection(), e);\n        Thread.currentThread().interrupt();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4","date":1588172214,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/CdcrReplicatorManager#initLogReaders().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/CdcrReplicatorManager#initLogReaders().mjava","sourceNew":"  private void initLogReaders() {\n    String collectionName = core.getCoreDescriptor().getCloudDescriptor().getCollectionName();\n    String shard = core.getCoreDescriptor().getCloudDescriptor().getShardId();\n    CdcrUpdateLog ulog = (CdcrUpdateLog) core.getUpdateHandler().getUpdateLog();\n\n    for (CdcrReplicatorState state : replicatorStates) {\n      state.closeLogReader();\n      try {\n        long checkpoint = this.getCheckpoint(state);\n        if (log.isInfoEnabled()) {\n          log.info(\"Create new update log reader for target {} with checkpoint {} @ {}:{}\", state.getTargetCollection(),\n              checkpoint, collectionName, shard);\n        }\n        CdcrUpdateLog.CdcrLogReader reader = ulog.newLogReader();\n        boolean seek = reader.seek(checkpoint);\n        state.init(reader);\n        if (!seek) {\n          // targetVersion is lower than the oldest known entry.\n          // In this scenario, it probably means that there is a gap in the updates log.\n          // the best we can do here is to bootstrap the target leader by replicating the full index\n          final String targetCollection = state.getTargetCollection();\n          state.setBootstrapInProgress(true);\n          log.info(\"Attempting to bootstrap target collection: {}, shard: {}\", targetCollection, shard);\n          bootstrapStatusRunnable = new BootstrapStatusRunnable(core, state);\n          log.info(\"Submitting bootstrap task to executor\");\n          try {\n            bootstrapExecutor.submit(bootstrapStatusRunnable);\n          } catch (Exception e) {\n            log.error(\"Unable to submit bootstrap call to executor\", e);\n          }\n        }\n      } catch (IOException | SolrServerException | SolrException e) {\n        log.warn(\"Unable to instantiate the log reader for target collection {}\", state.getTargetCollection(), e);\n      } catch (InterruptedException e) {\n        log.warn(\"Thread interrupted while instantiate the log reader for target collection {}\", state.getTargetCollection(), e);\n        Thread.currentThread().interrupt();\n      }\n    }\n  }\n\n","sourceOld":"  private void initLogReaders() {\n    String collectionName = core.getCoreDescriptor().getCloudDescriptor().getCollectionName();\n    String shard = core.getCoreDescriptor().getCloudDescriptor().getShardId();\n    CdcrUpdateLog ulog = (CdcrUpdateLog) core.getUpdateHandler().getUpdateLog();\n\n    for (CdcrReplicatorState state : replicatorStates) {\n      state.closeLogReader();\n      try {\n        long checkpoint = this.getCheckpoint(state);\n        log.info(\"Create new update log reader for target {} with checkpoint {} @ {}:{}\", state.getTargetCollection(),\n            checkpoint, collectionName, shard);\n        CdcrUpdateLog.CdcrLogReader reader = ulog.newLogReader();\n        boolean seek = reader.seek(checkpoint);\n        state.init(reader);\n        if (!seek) {\n          // targetVersion is lower than the oldest known entry.\n          // In this scenario, it probably means that there is a gap in the updates log.\n          // the best we can do here is to bootstrap the target leader by replicating the full index\n          final String targetCollection = state.getTargetCollection();\n          state.setBootstrapInProgress(true);\n          log.info(\"Attempting to bootstrap target collection: {}, shard: {}\", targetCollection, shard);\n          bootstrapStatusRunnable = new BootstrapStatusRunnable(core, state);\n          log.info(\"Submitting bootstrap task to executor\");\n          try {\n            bootstrapExecutor.submit(bootstrapStatusRunnable);\n          } catch (Exception e) {\n            log.error(\"Unable to submit bootstrap call to executor\", e);\n          }\n        }\n      } catch (IOException | SolrServerException | SolrException e) {\n        log.warn(\"Unable to instantiate the log reader for target collection \" + state.getTargetCollection(), e);\n      } catch (InterruptedException e) {\n        log.warn(\"Thread interrupted while instantiate the log reader for target collection \" + state.getTargetCollection(), e);\n        Thread.currentThread().interrupt();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1","date":1598647393,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/handler/CdcrReplicatorManager#initLogReaders().mjava","sourceNew":null,"sourceOld":"  private void initLogReaders() {\n    String collectionName = core.getCoreDescriptor().getCloudDescriptor().getCollectionName();\n    String shard = core.getCoreDescriptor().getCloudDescriptor().getShardId();\n    CdcrUpdateLog ulog = (CdcrUpdateLog) core.getUpdateHandler().getUpdateLog();\n\n    for (CdcrReplicatorState state : replicatorStates) {\n      state.closeLogReader();\n      try {\n        long checkpoint = this.getCheckpoint(state);\n        if (log.isInfoEnabled()) {\n          log.info(\"Create new update log reader for target {} with checkpoint {} @ {}:{}\", state.getTargetCollection(),\n              checkpoint, collectionName, shard);\n        }\n        CdcrUpdateLog.CdcrLogReader reader = ulog.newLogReader();\n        boolean seek = reader.seek(checkpoint);\n        state.init(reader);\n        if (!seek) {\n          // targetVersion is lower than the oldest known entry.\n          // In this scenario, it probably means that there is a gap in the updates log.\n          // the best we can do here is to bootstrap the target leader by replicating the full index\n          final String targetCollection = state.getTargetCollection();\n          state.setBootstrapInProgress(true);\n          log.info(\"Attempting to bootstrap target collection: {}, shard: {}\", targetCollection, shard);\n          bootstrapStatusRunnable = new BootstrapStatusRunnable(core, state);\n          log.info(\"Submitting bootstrap task to executor\");\n          try {\n            bootstrapExecutor.submit(bootstrapStatusRunnable);\n          } catch (Exception e) {\n            log.error(\"Unable to submit bootstrap call to executor\", e);\n          }\n        }\n      } catch (IOException | SolrServerException | SolrException e) {\n        log.warn(\"Unable to instantiate the log reader for target collection {}\", state.getTargetCollection(), e);\n      } catch (InterruptedException e) {\n        log.warn(\"Thread interrupted while instantiate the log reader for target collection {}\", state.getTargetCollection(), e);\n        Thread.currentThread().interrupt();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"86290366cefc1b9d4eced13b430858c4a4c0421d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4":["06e38ae84477e7a7eacea808dc3de9950fce5ccf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"06e38ae84477e7a7eacea808dc3de9950fce5ccf":["86290366cefc1b9d4eced13b430858c4a4c0421d"],"23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1":["fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["86290366cefc1b9d4eced13b430858c4a4c0421d","06e38ae84477e7a7eacea808dc3de9950fce5ccf"],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":["86290366cefc1b9d4eced13b430858c4a4c0421d","06e38ae84477e7a7eacea808dc3de9950fce5ccf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1"]},"commit2Childs":{"86290366cefc1b9d4eced13b430858c4a4c0421d":["06e38ae84477e7a7eacea808dc3de9950fce5ccf","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["86290366cefc1b9d4eced13b430858c4a4c0421d"],"fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4":["23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1"],"06e38ae84477e7a7eacea808dc3de9950fce5ccf":["fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}