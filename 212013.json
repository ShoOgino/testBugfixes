{"path":"contrib/queries/src/java/org/apache/lucene/search/TermsFilter#bits(IndexReader).mjava","commits":[{"id":"d3c3c2404d1200c39220fa15054fae854db4e1ee","date":1140827958,"type":0,"author":"Mark Harwood","isMerge":false,"pathNew":"contrib/queries/src/java/org/apache/lucene/search/TermsFilter#bits(IndexReader).mjava","pathOld":"/dev/null","sourceNew":"\t/* (non-Javadoc)\r\n\t * @see org.apache.lucene.search.Filter#bits(org.apache.lucene.index.IndexReader)\r\n\t */\r\n\tpublic BitSet bits(IndexReader reader) throws IOException\r\n\t{\r\n\t\tBitSet result=new BitSet(reader.maxDoc());\r\n\t\tfor (Iterator iter = termsList.iterator(); iter.hasNext();)\r\n\t\t{\r\n\t\t\tTerm term = (Term) iter.next();\r\n\t\t\tTermDocs td=reader.termDocs(term);\r\n\t        while (td.next())\r\n\t        {\r\n\t            result.set(td.doc());\r\n\t        }\t\t\t\t\t\t\r\n\t\t}\r\n\t\treturn result;\r\n\t}\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"86c487a0031f30e4a08cfb3d4ec49266d772f957","date":1205881260,"type":3,"author":"Mark Harwood","isMerge":false,"pathNew":"contrib/queries/src/java/org/apache/lucene/search/TermsFilter#bits(IndexReader).mjava","pathOld":"contrib/queries/src/java/org/apache/lucene/search/TermsFilter#bits(IndexReader).mjava","sourceNew":"\t/* (non-Javadoc)\r\n\t * @see org.apache.lucene.search.Filter#bits(org.apache.lucene.index.IndexReader)\r\n\t */\r\n\tpublic BitSet bits(IndexReader reader) throws IOException\r\n\t{\r\n\t\tBitSet result=new BitSet(reader.maxDoc());\r\n        TermDocs td = reader.termDocs();\r\n        try\r\n        {\r\n            for (Iterator iter = terms.iterator(); iter.hasNext();)\r\n            {\r\n                Term term = (Term) iter.next();\r\n                td.seek(term);\r\n                while (td.next())\r\n                {\r\n                    result.set(td.doc());\r\n                }\r\n            }\r\n        }\r\n        finally\r\n        {\r\n            td.close();\r\n        }\r\n        return result;\r\n\t}\r\n\n","sourceOld":"\t/* (non-Javadoc)\r\n\t * @see org.apache.lucene.search.Filter#bits(org.apache.lucene.index.IndexReader)\r\n\t */\r\n\tpublic BitSet bits(IndexReader reader) throws IOException\r\n\t{\r\n\t\tBitSet result=new BitSet(reader.maxDoc());\r\n\t\tfor (Iterator iter = termsList.iterator(); iter.hasNext();)\r\n\t\t{\r\n\t\t\tTerm term = (Term) iter.next();\r\n\t\t\tTermDocs td=reader.termDocs(term);\r\n\t        while (td.next())\r\n\t        {\r\n\t            result.set(td.doc());\r\n\t        }\t\t\t\t\t\t\r\n\t\t}\r\n\t\treturn result;\r\n\t}\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a27a24aac4a53ec0af1f168a3b1ab4a06a042250","date":1211570705,"type":5,"author":"Michael Busch","isMerge":false,"pathNew":"contrib/queries/src/java/org/apache/lucene/search/TermsFilter#getDocIdSet(IndexReader).mjava","pathOld":"contrib/queries/src/java/org/apache/lucene/search/TermsFilter#bits(IndexReader).mjava","sourceNew":"\t/* (non-Javadoc)\r\n   * @see org.apache.lucene.search.Filter#getDocIdSet(org.apache.lucene.index.IndexReader)\r\n\t */\r\n  public DocIdSet getDocIdSet(IndexReader reader) throws IOException\r\n\t{\r\n    OpenBitSet result=new OpenBitSet(reader.maxDoc());\r\n        TermDocs td = reader.termDocs();\r\n        try\r\n        {\r\n            for (Iterator iter = terms.iterator(); iter.hasNext();)\r\n            {\r\n                Term term = (Term) iter.next();\r\n                td.seek(term);\r\n                while (td.next())\r\n                {\r\n                    result.set(td.doc());\r\n                }\r\n            }\r\n        }\r\n        finally\r\n        {\r\n            td.close();\r\n        }\r\n        return result;\r\n\t}\r\n\n","sourceOld":"\t/* (non-Javadoc)\r\n\t * @see org.apache.lucene.search.Filter#bits(org.apache.lucene.index.IndexReader)\r\n\t */\r\n\tpublic BitSet bits(IndexReader reader) throws IOException\r\n\t{\r\n\t\tBitSet result=new BitSet(reader.maxDoc());\r\n        TermDocs td = reader.termDocs();\r\n        try\r\n        {\r\n            for (Iterator iter = terms.iterator(); iter.hasNext();)\r\n            {\r\n                Term term = (Term) iter.next();\r\n                td.seek(term);\r\n                while (td.next())\r\n                {\r\n                    result.set(td.doc());\r\n                }\r\n            }\r\n        }\r\n        finally\r\n        {\r\n            td.close();\r\n        }\r\n        return result;\r\n\t}\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe4180fe035aef61e1fb51d0361fb9bbe25bf611","date":1222875425,"type":0,"author":"Mark Harwood","isMerge":false,"pathNew":"contrib/queries/src/java/org/apache/lucene/search/TermsFilter#bits(IndexReader).mjava","pathOld":"/dev/null","sourceNew":"\t/* (non-Javadoc)\r\n\t * @see org.apache.lucene.search.Filter#bits(org.apache.lucene.index.IndexReader)\r\n\t */\r\n\tpublic BitSet bits(IndexReader reader) throws IOException\r\n\t{\r\n\t\tBitSet result=new BitSet(reader.maxDoc());\r\n        TermDocs td = reader.termDocs();\r\n        try\r\n        {\r\n            for (Iterator iter = terms.iterator(); iter.hasNext();)\r\n            {\r\n                Term term = (Term) iter.next();\r\n                td.seek(term);\r\n                while (td.next())\r\n                {\r\n                    result.set(td.doc());\r\n                }\r\n            }\r\n        }\r\n        finally\r\n        {\r\n            td.close();\r\n        }\r\n        return result;\r\n\t}\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6a361a621b184d9b73c9c9a37323a9845b8f8260","date":1226370946,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"contrib/queries/src/java/org/apache/lucene/search/TermsFilter#bits(IndexReader).mjava","pathOld":"contrib/queries/src/java/org/apache/lucene/search/TermsFilter#bits(IndexReader).mjava","sourceNew":"\t/* (non-Javadoc)\n\t * @see org.apache.lucene.search.Filter#bits(org.apache.lucene.index.IndexReader)\n\t */\n\tpublic BitSet bits(IndexReader reader) throws IOException\n\t{\n\t\tBitSet result=new BitSet(reader.maxDoc());\n        TermDocs td = reader.termDocs();\n        try\n        {\n            for (Iterator iter = terms.iterator(); iter.hasNext();)\n            {\n                Term term = (Term) iter.next();\n                td.seek(term);\n                while (td.next())\n                {\n                    result.set(td.doc());\n                }\n            }\n        }\n        finally\n        {\n            td.close();\n        }\n        return result;\n\t}\n\n","sourceOld":"\t/* (non-Javadoc)\r\n\t * @see org.apache.lucene.search.Filter#bits(org.apache.lucene.index.IndexReader)\r\n\t */\r\n\tpublic BitSet bits(IndexReader reader) throws IOException\r\n\t{\r\n\t\tBitSet result=new BitSet(reader.maxDoc());\r\n        TermDocs td = reader.termDocs();\r\n        try\r\n        {\r\n            for (Iterator iter = terms.iterator(); iter.hasNext();)\r\n            {\r\n                Term term = (Term) iter.next();\r\n                td.seek(term);\r\n                while (td.next())\r\n                {\r\n                    result.set(td.doc());\r\n                }\r\n            }\r\n        }\r\n        finally\r\n        {\r\n            td.close();\r\n        }\r\n        return result;\r\n\t}\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"15bd365049a486e1ddff4a17c8aaab9b002969a0","date":1254951825,"type":4,"author":"Michael Busch","isMerge":false,"pathNew":"/dev/null","pathOld":"contrib/queries/src/java/org/apache/lucene/search/TermsFilter#bits(IndexReader).mjava","sourceNew":null,"sourceOld":"\t/* (non-Javadoc)\n\t * @see org.apache.lucene.search.Filter#bits(org.apache.lucene.index.IndexReader)\n\t */\n\tpublic BitSet bits(IndexReader reader) throws IOException\n\t{\n\t\tBitSet result=new BitSet(reader.maxDoc());\n        TermDocs td = reader.termDocs();\n        try\n        {\n            for (Iterator iter = terms.iterator(); iter.hasNext();)\n            {\n                Term term = (Term) iter.next();\n                td.seek(term);\n                while (td.next())\n                {\n                    result.set(td.doc());\n                }\n            }\n        }\n        finally\n        {\n            td.close();\n        }\n        return result;\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fe4180fe035aef61e1fb51d0361fb9bbe25bf611":["a27a24aac4a53ec0af1f168a3b1ab4a06a042250"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6a361a621b184d9b73c9c9a37323a9845b8f8260":["fe4180fe035aef61e1fb51d0361fb9bbe25bf611"],"d3c3c2404d1200c39220fa15054fae854db4e1ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"86c487a0031f30e4a08cfb3d4ec49266d772f957":["d3c3c2404d1200c39220fa15054fae854db4e1ee"],"a27a24aac4a53ec0af1f168a3b1ab4a06a042250":["86c487a0031f30e4a08cfb3d4ec49266d772f957"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["15bd365049a486e1ddff4a17c8aaab9b002969a0"],"15bd365049a486e1ddff4a17c8aaab9b002969a0":["6a361a621b184d9b73c9c9a37323a9845b8f8260"]},"commit2Childs":{"fe4180fe035aef61e1fb51d0361fb9bbe25bf611":["6a361a621b184d9b73c9c9a37323a9845b8f8260"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d3c3c2404d1200c39220fa15054fae854db4e1ee"],"6a361a621b184d9b73c9c9a37323a9845b8f8260":["15bd365049a486e1ddff4a17c8aaab9b002969a0"],"d3c3c2404d1200c39220fa15054fae854db4e1ee":["86c487a0031f30e4a08cfb3d4ec49266d772f957"],"86c487a0031f30e4a08cfb3d4ec49266d772f957":["a27a24aac4a53ec0af1f168a3b1ab4a06a042250"],"a27a24aac4a53ec0af1f168a3b1ab4a06a042250":["fe4180fe035aef61e1fb51d0361fb9bbe25bf611"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"15bd365049a486e1ddff4a17c8aaab9b002969a0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}