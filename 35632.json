{"path":"lucene/src/java/org/apache/lucene/index/LogMergePolicy#findForcedMergesSizeLimit(SegmentInfos,int,int).mjava","commits":[{"id":"d14e8d18c0e3970c20354dbeeb49da11bd587fbd","date":1321041051,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/LogMergePolicy#findForcedMergesSizeLimit(SegmentInfos,int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/LogMergePolicy#findMergesForOptimizeSizeLimit(SegmentInfos,int,int).mjava","sourceNew":"  /**\n   * Returns the merges necessary to merge the index, taking the max merge\n   * size or max merge docs into consideration. This method attempts to respect\n   * the {@code maxNumSegments} parameter, however it might be, due to size\n   * constraints, that more than that number of segments will remain in the\n   * index. Also, this method does not guarantee that exactly {@code\n   * maxNumSegments} will remain, but &lt;= that number.\n   */\n  private MergeSpecification findForcedMergesSizeLimit(\n      SegmentInfos infos, int maxNumSegments, int last) throws IOException {\n    MergeSpecification spec = new MergeSpecification();\n    final List<SegmentInfo> segments = infos.asList();\n\n    int start = last - 1;\n    while (start >= 0) {\n      SegmentInfo info = infos.info(start);\n      if (size(info) > maxMergeSizeForForcedMerge || sizeDocs(info) > maxMergeDocs) {\n        if (verbose()) {\n          message(\"findForcedMergesSizeLimit: skip segment=\" + info + \": size is > maxMergeSize (\" + maxMergeSizeForForcedMerge + \") or sizeDocs is > maxMergeDocs (\" + maxMergeDocs + \")\");\n        }\n        // need to skip that segment + add a merge for the 'right' segments,\n        // unless there is only 1 which is merged.\n        if (last - start - 1 > 1 || (start != last - 1 && !isMerged(infos.info(start + 1)))) {\n          // there is more than 1 segment to the right of\n          // this one, or a mergeable single segment.\n          spec.add(new OneMerge(segments.subList(start + 1, last)));\n        }\n        last = start;\n      } else if (last - start == mergeFactor) {\n        // mergeFactor eligible segments were found, add them as a merge.\n        spec.add(new OneMerge(segments.subList(start, last)));\n        last = start;\n      }\n      --start;\n    }\n\n    // Add any left-over segments, unless there is just 1\n    // already fully merged\n    if (last > 0 && (++start + 1 < last || !isMerged(infos.info(start)))) {\n      spec.add(new OneMerge(segments.subList(start, last)));\n    }\n\n    return spec.merges.size() == 0 ? null : spec;\n  }\n\n","sourceOld":"  /**\n   * Returns the merges necessary to optimize the index, taking the max merge\n   * size or max merge docs into consideration. This method attempts to respect\n   * the {@code maxNumSegments} parameter, however it might be, due to size\n   * constraints, that more than that number of segments will remain in the\n   * index. Also, this method does not guarantee that exactly {@code\n   * maxNumSegments} will remain, but &lt;= that number.\n   */\n  private MergeSpecification findMergesForOptimizeSizeLimit(\n      SegmentInfos infos, int maxNumSegments, int last) throws IOException {\n    MergeSpecification spec = new MergeSpecification();\n    final List<SegmentInfo> segments = infos.asList();\n\n    int start = last - 1;\n    while (start >= 0) {\n      SegmentInfo info = infos.info(start);\n      if (size(info) > maxMergeSizeForOptimize || sizeDocs(info) > maxMergeDocs) {\n        if (verbose()) {\n          message(\"optimize: skip segment=\" + info + \": size is > maxMergeSize (\" + maxMergeSizeForOptimize + \") or sizeDocs is > maxMergeDocs (\" + maxMergeDocs + \")\");\n        }\n        // need to skip that segment + add a merge for the 'right' segments,\n        // unless there is only 1 which is optimized.\n        if (last - start - 1 > 1 || (start != last - 1 && !isOptimized(infos.info(start + 1)))) {\n          // there is more than 1 segment to the right of this one, or an unoptimized single segment.\n          spec.add(new OneMerge(segments.subList(start + 1, last)));\n        }\n        last = start;\n      } else if (last - start == mergeFactor) {\n        // mergeFactor eligible segments were found, add them as a merge.\n        spec.add(new OneMerge(segments.subList(start, last)));\n        last = start;\n      }\n      --start;\n    }\n\n    // Add any left-over segments, unless there is just 1 already optimized.\n    if (last > 0 && (++start + 1 < last || !isOptimized(infos.info(start)))) {\n      spec.add(new OneMerge(segments.subList(start, last)));\n    }\n\n    return spec.merges.size() == 0 ? null : spec;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/LogMergePolicy#findForcedMergesSizeLimit(SegmentInfos,int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/LogMergePolicy#findForcedMergesSizeLimit(SegmentInfos,int,int).mjava","sourceNew":"  /**\n   * Returns the merges necessary to merge the index, taking the max merge\n   * size or max merge docs into consideration. This method attempts to respect\n   * the {@code maxNumSegments} parameter, however it might be, due to size\n   * constraints, that more than that number of segments will remain in the\n   * index. Also, this method does not guarantee that exactly {@code\n   * maxNumSegments} will remain, but &lt;= that number.\n   */\n  private MergeSpecification findForcedMergesSizeLimit(\n      SegmentInfos infos, int maxNumSegments, int last) throws IOException {\n    MergeSpecification spec = new MergeSpecification();\n    final List<SegmentInfo> segments = infos.asList();\n\n    int start = last - 1;\n    while (start >= 0) {\n      SegmentInfo info = infos.info(start);\n      if (size(info) > maxMergeSizeForForcedMerge || sizeDocs(info) > maxMergeDocs) {\n        if (verbose()) {\n          message(\"findForcedMergesSizeLimit: skip segment=\" + info + \": size is > maxMergeSize (\" + maxMergeSizeForForcedMerge + \") or sizeDocs is > maxMergeDocs (\" + maxMergeDocs + \")\");\n        }\n        // need to skip that segment + add a merge for the 'right' segments,\n        // unless there is only 1 which is merged.\n        if (last - start - 1 > 1 || (start != last - 1 && !isMerged(infos.info(start + 1)))) {\n          // there is more than 1 segment to the right of\n          // this one, or a mergeable single segment.\n          spec.add(new OneMerge(segments.subList(start + 1, last)));\n        }\n        last = start;\n      } else if (last - start == mergeFactor) {\n        // mergeFactor eligible segments were found, add them as a merge.\n        spec.add(new OneMerge(segments.subList(start, last)));\n        last = start;\n      }\n      --start;\n    }\n\n    // Add any left-over segments, unless there is just 1\n    // already fully merged\n    if (last > 0 && (++start + 1 < last || !isMerged(infos.info(start)))) {\n      spec.add(new OneMerge(segments.subList(start, last)));\n    }\n\n    return spec.merges.size() == 0 ? null : spec;\n  }\n\n","sourceOld":"  /**\n   * Returns the merges necessary to merge the index, taking the max merge\n   * size or max merge docs into consideration. This method attempts to respect\n   * the {@code maxNumSegments} parameter, however it might be, due to size\n   * constraints, that more than that number of segments will remain in the\n   * index. Also, this method does not guarantee that exactly {@code\n   * maxNumSegments} will remain, but &lt;= that number.\n   */\n  private MergeSpecification findForcedMergesSizeLimit(\n      SegmentInfos infos, int maxNumSegments, int last) throws IOException {\n    MergeSpecification spec = new MergeSpecification();\n    final List<SegmentInfo> segments = infos.asList();\n\n    int start = last - 1;\n    while (start >= 0) {\n      SegmentInfo info = infos.info(start);\n      if (size(info) > maxMergeSizeForForcedMerge || sizeDocs(info) > maxMergeDocs) {\n        if (verbose()) {\n          message(\"findForcedMergesSizeLimit: skip segment=\" + info + \": size is > maxMergeSize (\" + maxMergeSizeForForcedMerge + \") or sizeDocs is > maxMergeDocs (\" + maxMergeDocs + \")\");\n        }\n        // need to skip that segment + add a merge for the 'right' segments,\n        // unless there is only 1 which is merged.\n        if (last - start - 1 > 1 || (start != last - 1 && !isMerged(infos.info(start + 1)))) {\n          // there is more than 1 segment to the right of\n          // this one, or a mergeable single segment.\n          spec.add(new OneMerge(segments.subList(start + 1, last)));\n        }\n        last = start;\n      } else if (last - start == mergeFactor) {\n        // mergeFactor eligible segments were found, add them as a merge.\n        spec.add(new OneMerge(segments.subList(start, last)));\n        last = start;\n      }\n      --start;\n    }\n\n    // Add any left-over segments, unless there is just 1\n    // already fully merged\n    if (last > 0 && (++start + 1 < last || !isMerged(infos.info(start)))) {\n      spec.add(new OneMerge(segments.subList(start, last)));\n    }\n\n    return spec.merges.size() == 0 ? null : spec;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}