{"path":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/in/IndicNormalizer#normalize(char[],int).mjava","commits":[{"id":"5e5f9e7cd8a21e5b99d91107d6f400de933f8ecf","date":1265287316,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/in/IndicNormalizer#normalize(char[],int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Normalizes input text, and returns the new length.\n   * The length will always be less than or equal to the existing length.\n   * \n   * @param text input text\n   * @param len valid length\n   * @return normalized length\n   */\n  public int normalize(char text[], int len) {\n    for (int i = 0; i < len; i++) {\n      final Character.UnicodeBlock block = Character.UnicodeBlock.of(text[i]);\n      final ScriptData sd = scripts.get(block);\n      if (sd != null) {\n        final int ch = text[i] - sd.base;\n        if (sd.decompMask.get(ch))\n          len = compose(ch, block, sd, text, i, len);\n      }\n    }\n    return len;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/in/IndicNormalizer#normalize(char[],int).mjava","pathOld":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/in/IndicNormalizer#normalize(char[],int).mjava","sourceNew":"  /**\n   * Normalizes input text, and returns the new length.\n   * The length will always be less than or equal to the existing length.\n   * \n   * @param text input text\n   * @param len valid length\n   * @return normalized length\n   */\n  public int normalize(char text[], int len) {\n    for (int i = 0; i < len; i++) {\n      final Character.UnicodeBlock block = Character.UnicodeBlock.of(text[i]);\n      final ScriptData sd = scripts.get(block);\n      if (sd != null) {\n        final int ch = text[i] - sd.base;\n        if (sd.decompMask.get(ch))\n          len = compose(ch, block, sd, text, i, len);\n      }\n    }\n    return len;\n  }\n\n","sourceOld":"  /**\n   * Normalizes input text, and returns the new length.\n   * The length will always be less than or equal to the existing length.\n   * \n   * @param text input text\n   * @param len valid length\n   * @return normalized length\n   */\n  public int normalize(char text[], int len) {\n    for (int i = 0; i < len; i++) {\n      final Character.UnicodeBlock block = Character.UnicodeBlock.of(text[i]);\n      final ScriptData sd = scripts.get(block);\n      if (sd != null) {\n        final int ch = text[i] - sd.base;\n        if (sd.decompMask.get(ch))\n          len = compose(ch, block, sd, text, i, len);\n      }\n    }\n    return len;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5e5f9e7cd8a21e5b99d91107d6f400de933f8ecf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["5e5f9e7cd8a21e5b99d91107d6f400de933f8ecf"]},"commit2Childs":{"5e5f9e7cd8a21e5b99d91107d6f400de933f8ecf":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5e5f9e7cd8a21e5b99d91107d6f400de933f8ecf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}