{"path":"lucene/facet/src/java/org/apache/lucene/facet/FacetsCollector#doSearch(IndexSearcher,ScoreDoc,Query,Filter,int,Sort,boolean,boolean,Collector).mjava","commits":[{"id":"fd83550e4b0bdd36e7d9dca9273264100782440b","date":1385761753,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/FacetsCollector#doSearch(IndexSearcher,ScoreDoc,Query,Filter,int,Sort,boolean,boolean,Collector).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/Facets#doSearch(IndexSearcher,ScoreDoc,Query,Filter,int,Sort,boolean,boolean,FacetsCollector).mjava","sourceNew":"  private static TopDocs doSearch(IndexSearcher searcher, ScoreDoc after, Query q, Filter filter, int n, Sort sort,\n                                  boolean doDocScores, boolean doMaxScore, Collector fc) throws IOException {\n\n    if (filter != null) {\n      q = new FilteredQuery(q, filter);\n    }\n\n    int limit = searcher.getIndexReader().maxDoc();\n    if (limit == 0) {\n      limit = 1;\n    }\n    n = Math.min(n, limit);\n\n    if (after != null && after.doc >= limit) {\n      throw new IllegalArgumentException(\"after.doc exceeds the number of documents in the reader: after.doc=\"\n                                         + after.doc + \" limit=\" + limit);\n    }\n\n    TopDocsCollector<?> hitsCollector;\n    if (sort != null) {\n      if (after != null && !(after instanceof FieldDoc)) {\n        // TODO: if we fix type safety of TopFieldDocs we can\n        // remove this\n        throw new IllegalArgumentException(\"after must be a FieldDoc; got \" + after);\n      }\n      boolean fillFields = true;\n      hitsCollector = TopFieldCollector.create(sort, n,\n                                               (FieldDoc) after,\n                                               fillFields,\n                                               doDocScores,\n                                               doMaxScore,\n                                               false);\n    } else {\n      // TODO: can we pass the right boolean for\n      // in-order instead of hardwired to false...?  we'd\n      // need access to the protected IS.search methods\n      // taking Weight... could use reflection...\n      hitsCollector = TopScoreDocCollector.create(n, after, false);\n    }\n    searcher.search(q, MultiCollector.wrap(hitsCollector, fc));\n    return hitsCollector.topDocs();\n  }\n\n","sourceOld":"  private static TopDocs doSearch(IndexSearcher searcher, ScoreDoc after, Query q, Filter filter, int n, Sort sort,\n                                  boolean doDocScores, boolean doMaxScore, FacetsCollector fc) throws IOException {\n\n    if (filter != null) {\n      q = new FilteredQuery(q, filter);\n    }\n\n    int limit = searcher.getIndexReader().maxDoc();\n    if (limit == 0) {\n      limit = 1;\n    }\n    n = Math.min(n, limit);\n\n    if (after != null && after.doc >= limit) {\n      throw new IllegalArgumentException(\"after.doc exceeds the number of documents in the reader: after.doc=\"\n                                         + after.doc + \" limit=\" + limit);\n    }\n\n    TopDocsCollector<?> hitsCollector;\n    if (sort != null) {\n      if (after != null && !(after instanceof FieldDoc)) {\n        // TODO: if we fix type safety of TopFieldDocs we can\n        // remove this\n        throw new IllegalArgumentException(\"after must be a FieldDoc; got \" + after);\n      }\n      boolean fillFields = true;\n      hitsCollector = TopFieldCollector.create(sort, n,\n                                               (FieldDoc) after,\n                                               fillFields,\n                                               doDocScores,\n                                               doMaxScore,\n                                               false);\n    } else {\n      // TODO: can we pass the right boolean for\n      // in-order instead of hardwired to false...?  we'd\n      // need access to the protected IS.search methods\n      // taking Weight... could use reflection...\n      hitsCollector = TopScoreDocCollector.create(n, after, false);\n    }\n    searcher.search(q, MultiCollector.wrap(hitsCollector, fc));\n    return hitsCollector.topDocs();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/FacetsCollector#doSearch(IndexSearcher,ScoreDoc,Query,Filter,int,Sort,boolean,boolean,Collector).mjava","pathOld":"/dev/null","sourceNew":"  private static TopDocs doSearch(IndexSearcher searcher, ScoreDoc after, Query q, Filter filter, int n, Sort sort,\n                                  boolean doDocScores, boolean doMaxScore, Collector fc) throws IOException {\n\n    if (filter != null) {\n      q = new FilteredQuery(q, filter);\n    }\n\n    int limit = searcher.getIndexReader().maxDoc();\n    if (limit == 0) {\n      limit = 1;\n    }\n    n = Math.min(n, limit);\n\n    if (after != null && after.doc >= limit) {\n      throw new IllegalArgumentException(\"after.doc exceeds the number of documents in the reader: after.doc=\"\n                                         + after.doc + \" limit=\" + limit);\n    }\n\n    TopDocsCollector<?> hitsCollector;\n    if (sort != null) {\n      if (after != null && !(after instanceof FieldDoc)) {\n        // TODO: if we fix type safety of TopFieldDocs we can\n        // remove this\n        throw new IllegalArgumentException(\"after must be a FieldDoc; got \" + after);\n      }\n      boolean fillFields = true;\n      hitsCollector = TopFieldCollector.create(sort, n,\n                                               (FieldDoc) after,\n                                               fillFields,\n                                               doDocScores,\n                                               doMaxScore,\n                                               false);\n    } else {\n      // TODO: can we pass the right boolean for\n      // in-order instead of hardwired to false...?  we'd\n      // need access to the protected IS.search methods\n      // taking Weight... could use reflection...\n      hitsCollector = TopScoreDocCollector.create(n, after, false);\n    }\n    searcher.search(q, MultiCollector.wrap(hitsCollector, fc));\n    return hitsCollector.topDocs();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f582f18c13d4852b01d4fe0a0196432c5c6f2b7f","date":1421314520,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/FacetsCollector#doSearch(IndexSearcher,ScoreDoc,Query,Filter,int,Sort,boolean,boolean,Collector).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/FacetsCollector#doSearch(IndexSearcher,ScoreDoc,Query,Filter,int,Sort,boolean,boolean,Collector).mjava","sourceNew":"  private static TopDocs doSearch(IndexSearcher searcher, ScoreDoc after, Query q, Filter filter, int n, Sort sort,\n                                  boolean doDocScores, boolean doMaxScore, Collector fc) throws IOException {\n\n    if (filter != null) {\n      q = new FilteredQuery(q, filter);\n    }\n\n    int limit = searcher.getIndexReader().maxDoc();\n    if (limit == 0) {\n      limit = 1;\n    }\n    n = Math.min(n, limit);\n\n    if (after != null && after.doc >= limit) {\n      throw new IllegalArgumentException(\"after.doc exceeds the number of documents in the reader: after.doc=\"\n                                         + after.doc + \" limit=\" + limit);\n    }\n\n    TopDocsCollector<?> hitsCollector;\n    if (sort != null) {\n      if (after != null && !(after instanceof FieldDoc)) {\n        // TODO: if we fix type safety of TopFieldDocs we can\n        // remove this\n        throw new IllegalArgumentException(\"after must be a FieldDoc; got \" + after);\n      }\n      boolean fillFields = true;\n      hitsCollector = TopFieldCollector.create(sort, n,\n                                               (FieldDoc) after,\n                                               fillFields,\n                                               doDocScores,\n                                               doMaxScore);\n    } else {\n      hitsCollector = TopScoreDocCollector.create(n, after);\n    }\n    searcher.search(q, MultiCollector.wrap(hitsCollector, fc));\n    return hitsCollector.topDocs();\n  }\n\n","sourceOld":"  private static TopDocs doSearch(IndexSearcher searcher, ScoreDoc after, Query q, Filter filter, int n, Sort sort,\n                                  boolean doDocScores, boolean doMaxScore, Collector fc) throws IOException {\n\n    if (filter != null) {\n      q = new FilteredQuery(q, filter);\n    }\n\n    int limit = searcher.getIndexReader().maxDoc();\n    if (limit == 0) {\n      limit = 1;\n    }\n    n = Math.min(n, limit);\n\n    if (after != null && after.doc >= limit) {\n      throw new IllegalArgumentException(\"after.doc exceeds the number of documents in the reader: after.doc=\"\n                                         + after.doc + \" limit=\" + limit);\n    }\n\n    TopDocsCollector<?> hitsCollector;\n    if (sort != null) {\n      if (after != null && !(after instanceof FieldDoc)) {\n        // TODO: if we fix type safety of TopFieldDocs we can\n        // remove this\n        throw new IllegalArgumentException(\"after must be a FieldDoc; got \" + after);\n      }\n      boolean fillFields = true;\n      hitsCollector = TopFieldCollector.create(sort, n,\n                                               (FieldDoc) after,\n                                               fillFields,\n                                               doDocScores,\n                                               doMaxScore,\n                                               false);\n    } else {\n      // TODO: can we pass the right boolean for\n      // in-order instead of hardwired to false...?  we'd\n      // need access to the protected IS.search methods\n      // taking Weight... could use reflection...\n      hitsCollector = TopScoreDocCollector.create(n, after, false);\n    }\n    searcher.search(q, MultiCollector.wrap(hitsCollector, fc));\n    return hitsCollector.topDocs();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1db68e96dd908fcd79ef809095822736aa601d08","date":1434630596,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/FacetsCollector#doSearch(IndexSearcher,ScoreDoc,Query,Filter,int,Sort,boolean,boolean,Collector).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/FacetsCollector#doSearch(IndexSearcher,ScoreDoc,Query,Filter,int,Sort,boolean,boolean,Collector).mjava","sourceNew":"  private static TopDocs doSearch(IndexSearcher searcher, ScoreDoc after, Query q, Filter filter, int n, Sort sort,\n                                  boolean doDocScores, boolean doMaxScore, Collector fc) throws IOException {\n\n    if (filter != null) {\n      q = new BooleanQuery.Builder()\n          .add(q, Occur.MUST)\n          .add(filter, Occur.FILTER)\n          .build();\n    }\n\n    int limit = searcher.getIndexReader().maxDoc();\n    if (limit == 0) {\n      limit = 1;\n    }\n    n = Math.min(n, limit);\n\n    if (after != null && after.doc >= limit) {\n      throw new IllegalArgumentException(\"after.doc exceeds the number of documents in the reader: after.doc=\"\n                                         + after.doc + \" limit=\" + limit);\n    }\n\n    TopDocsCollector<?> hitsCollector;\n    if (sort != null) {\n      if (after != null && !(after instanceof FieldDoc)) {\n        // TODO: if we fix type safety of TopFieldDocs we can\n        // remove this\n        throw new IllegalArgumentException(\"after must be a FieldDoc; got \" + after);\n      }\n      boolean fillFields = true;\n      hitsCollector = TopFieldCollector.create(sort, n,\n                                               (FieldDoc) after,\n                                               fillFields,\n                                               doDocScores,\n                                               doMaxScore);\n    } else {\n      hitsCollector = TopScoreDocCollector.create(n, after);\n    }\n    searcher.search(q, MultiCollector.wrap(hitsCollector, fc));\n    return hitsCollector.topDocs();\n  }\n\n","sourceOld":"  private static TopDocs doSearch(IndexSearcher searcher, ScoreDoc after, Query q, Filter filter, int n, Sort sort,\n                                  boolean doDocScores, boolean doMaxScore, Collector fc) throws IOException {\n\n    if (filter != null) {\n      q = new FilteredQuery(q, filter);\n    }\n\n    int limit = searcher.getIndexReader().maxDoc();\n    if (limit == 0) {\n      limit = 1;\n    }\n    n = Math.min(n, limit);\n\n    if (after != null && after.doc >= limit) {\n      throw new IllegalArgumentException(\"after.doc exceeds the number of documents in the reader: after.doc=\"\n                                         + after.doc + \" limit=\" + limit);\n    }\n\n    TopDocsCollector<?> hitsCollector;\n    if (sort != null) {\n      if (after != null && !(after instanceof FieldDoc)) {\n        // TODO: if we fix type safety of TopFieldDocs we can\n        // remove this\n        throw new IllegalArgumentException(\"after must be a FieldDoc; got \" + after);\n      }\n      boolean fillFields = true;\n      hitsCollector = TopFieldCollector.create(sort, n,\n                                               (FieldDoc) after,\n                                               fillFields,\n                                               doDocScores,\n                                               doMaxScore);\n    } else {\n      hitsCollector = TopScoreDocCollector.create(n, after);\n    }\n    searcher.search(q, MultiCollector.wrap(hitsCollector, fc));\n    return hitsCollector.topDocs();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dd6be878365e339c75cc43ad7d5df95ab4ea21e5","date":1435762101,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/FacetsCollector#doSearch(IndexSearcher,ScoreDoc,Query,int,Sort,boolean,boolean,Collector).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/FacetsCollector#doSearch(IndexSearcher,ScoreDoc,Query,Filter,int,Sort,boolean,boolean,Collector).mjava","sourceNew":"  private static TopDocs doSearch(IndexSearcher searcher, ScoreDoc after, Query q, int n, Sort sort,\n                                  boolean doDocScores, boolean doMaxScore, Collector fc) throws IOException {\n\n    int limit = searcher.getIndexReader().maxDoc();\n    if (limit == 0) {\n      limit = 1;\n    }\n    n = Math.min(n, limit);\n\n    if (after != null && after.doc >= limit) {\n      throw new IllegalArgumentException(\"after.doc exceeds the number of documents in the reader: after.doc=\"\n                                         + after.doc + \" limit=\" + limit);\n    }\n\n    TopDocsCollector<?> hitsCollector;\n    if (sort != null) {\n      if (after != null && !(after instanceof FieldDoc)) {\n        // TODO: if we fix type safety of TopFieldDocs we can\n        // remove this\n        throw new IllegalArgumentException(\"after must be a FieldDoc; got \" + after);\n      }\n      boolean fillFields = true;\n      hitsCollector = TopFieldCollector.create(sort, n,\n                                               (FieldDoc) after,\n                                               fillFields,\n                                               doDocScores,\n                                               doMaxScore);\n    } else {\n      hitsCollector = TopScoreDocCollector.create(n, after);\n    }\n    searcher.search(q, MultiCollector.wrap(hitsCollector, fc));\n    return hitsCollector.topDocs();\n  }\n\n","sourceOld":"  private static TopDocs doSearch(IndexSearcher searcher, ScoreDoc after, Query q, Filter filter, int n, Sort sort,\n                                  boolean doDocScores, boolean doMaxScore, Collector fc) throws IOException {\n\n    if (filter != null) {\n      q = new BooleanQuery.Builder()\n          .add(q, Occur.MUST)\n          .add(filter, Occur.FILTER)\n          .build();\n    }\n\n    int limit = searcher.getIndexReader().maxDoc();\n    if (limit == 0) {\n      limit = 1;\n    }\n    n = Math.min(n, limit);\n\n    if (after != null && after.doc >= limit) {\n      throw new IllegalArgumentException(\"after.doc exceeds the number of documents in the reader: after.doc=\"\n                                         + after.doc + \" limit=\" + limit);\n    }\n\n    TopDocsCollector<?> hitsCollector;\n    if (sort != null) {\n      if (after != null && !(after instanceof FieldDoc)) {\n        // TODO: if we fix type safety of TopFieldDocs we can\n        // remove this\n        throw new IllegalArgumentException(\"after must be a FieldDoc; got \" + after);\n      }\n      boolean fillFields = true;\n      hitsCollector = TopFieldCollector.create(sort, n,\n                                               (FieldDoc) after,\n                                               fillFields,\n                                               doDocScores,\n                                               doMaxScore);\n    } else {\n      hitsCollector = TopScoreDocCollector.create(n, after);\n    }\n    searcher.search(q, MultiCollector.wrap(hitsCollector, fc));\n    return hitsCollector.topDocs();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1db68e96dd908fcd79ef809095822736aa601d08":["f582f18c13d4852b01d4fe0a0196432c5c6f2b7f"],"f582f18c13d4852b01d4fe0a0196432c5c6f2b7f":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fd83550e4b0bdd36e7d9dca9273264100782440b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","fd83550e4b0bdd36e7d9dca9273264100782440b"],"dd6be878365e339c75cc43ad7d5df95ab4ea21e5":["1db68e96dd908fcd79ef809095822736aa601d08"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["dd6be878365e339c75cc43ad7d5df95ab4ea21e5"]},"commit2Childs":{"1db68e96dd908fcd79ef809095822736aa601d08":["dd6be878365e339c75cc43ad7d5df95ab4ea21e5"],"f582f18c13d4852b01d4fe0a0196432c5c6f2b7f":["1db68e96dd908fcd79ef809095822736aa601d08"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fd83550e4b0bdd36e7d9dca9273264100782440b","3cc728b07df73b197e6d940d27f9b08b63918f13"],"fd83550e4b0bdd36e7d9dca9273264100782440b":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["f582f18c13d4852b01d4fe0a0196432c5c6f2b7f"],"dd6be878365e339c75cc43ad7d5df95ab4ea21e5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}