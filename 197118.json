{"path":"backwards/src/test/org/apache/lucene/index/TestIndexWriter#testExpungeDeletes2().mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/test/org/apache/lucene/index/TestIndexWriter#testExpungeDeletes2().mjava","pathOld":"/dev/null","sourceNew":"  // LUCENE-325: test expungeDeletes, when many adjacent merges are required\n  public void testExpungeDeletes2() throws IOException {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir,\n                                         new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT),\n                                         IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMaxBufferedDocs(2);\n    writer.setMergeFactor(50);\n    writer.setRAMBufferSizeMB(IndexWriter.DISABLE_AUTO_FLUSH);\n\n    Document document = new Document();\n\n    document = new Document();\n    Field storedField = new Field(\"stored\", \"stored\", Field.Store.YES,\n                                  Field.Index.NO);\n    document.add(storedField);\n    Field termVectorField = new Field(\"termVector\", \"termVector\",\n                                      Field.Store.NO, Field.Index.NOT_ANALYZED,\n                                      Field.TermVector.WITH_POSITIONS_OFFSETS);\n    document.add(termVectorField);\n    for(int i=0;i<98;i++)\n      writer.addDocument(document);\n    writer.close();\n\n    IndexReader ir = IndexReader.open(dir, false);\n    assertEquals(98, ir.maxDoc());\n    assertEquals(98, ir.numDocs());\n    for(int i=0;i<98;i+=2)\n      ir.deleteDocument(i);\n    assertEquals(49, ir.numDocs());\n    ir.close();\n\n    writer = new IndexWriter(dir,\n                             new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT),\n                             IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMergeFactor(3);\n    assertEquals(49, writer.numDocs());\n    writer.expungeDeletes();\n    writer.close();\n    ir = IndexReader.open(dir, true);\n    assertEquals(49, ir.maxDoc());\n    assertEquals(49, ir.numDocs());\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/index/TestIndexWriter#testExpungeDeletes2().mjava","pathOld":"backwards/src/test/org/apache/lucene/index/TestIndexWriter#testExpungeDeletes2().mjava","sourceNew":"  // LUCENE-325: test expungeDeletes, when many adjacent merges are required\n  public void testExpungeDeletes2() throws IOException {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir,\n                                         new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT),\n                                         IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMaxBufferedDocs(2);\n    writer.setMergeFactor(50);\n    writer.setRAMBufferSizeMB(IndexWriter.DISABLE_AUTO_FLUSH);\n\n    Document document = new Document();\n\n    document = new Document();\n    Field storedField = new Field(\"stored\", \"stored\", Field.Store.YES,\n                                  Field.Index.NO);\n    document.add(storedField);\n    Field termVectorField = new Field(\"termVector\", \"termVector\",\n                                      Field.Store.NO, Field.Index.NOT_ANALYZED,\n                                      Field.TermVector.WITH_POSITIONS_OFFSETS);\n    document.add(termVectorField);\n    for(int i=0;i<98;i++)\n      writer.addDocument(document);\n    writer.close();\n\n    IndexReader ir = IndexReader.open(dir, false);\n    assertEquals(98, ir.maxDoc());\n    assertEquals(98, ir.numDocs());\n    for(int i=0;i<98;i+=2)\n      ir.deleteDocument(i);\n    assertEquals(49, ir.numDocs());\n    ir.close();\n\n    writer = new IndexWriter(dir,\n                             new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT),\n                             IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMergeFactor(3);\n    assertEquals(49, writer.numDocs());\n    writer.expungeDeletes();\n    writer.close();\n    ir = IndexReader.open(dir, true);\n    assertEquals(49, ir.maxDoc());\n    assertEquals(49, ir.numDocs());\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-325: test expungeDeletes, when many adjacent merges are required\n  public void testExpungeDeletes2() throws IOException {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir,\n                                         new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT),\n                                         IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMaxBufferedDocs(2);\n    writer.setMergeFactor(50);\n    writer.setRAMBufferSizeMB(IndexWriter.DISABLE_AUTO_FLUSH);\n\n    Document document = new Document();\n\n    document = new Document();\n    Field storedField = new Field(\"stored\", \"stored\", Field.Store.YES,\n                                  Field.Index.NO);\n    document.add(storedField);\n    Field termVectorField = new Field(\"termVector\", \"termVector\",\n                                      Field.Store.NO, Field.Index.NOT_ANALYZED,\n                                      Field.TermVector.WITH_POSITIONS_OFFSETS);\n    document.add(termVectorField);\n    for(int i=0;i<98;i++)\n      writer.addDocument(document);\n    writer.close();\n\n    IndexReader ir = IndexReader.open(dir, false);\n    assertEquals(98, ir.maxDoc());\n    assertEquals(98, ir.numDocs());\n    for(int i=0;i<98;i+=2)\n      ir.deleteDocument(i);\n    assertEquals(49, ir.numDocs());\n    ir.close();\n\n    writer = new IndexWriter(dir,\n                             new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT),\n                             IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMergeFactor(3);\n    assertEquals(49, writer.numDocs());\n    writer.expungeDeletes();\n    writer.close();\n    ir = IndexReader.open(dir, true);\n    assertEquals(49, ir.maxDoc());\n    assertEquals(49, ir.numDocs());\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}