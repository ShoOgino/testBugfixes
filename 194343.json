{"path":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterDeleteQueue.DeleteSlice#apply(BufferedDeletes,int).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterDeleteQueue.DeleteSlice#apply(BufferedDeletes,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriterDeleteQueue.DeleteSlice#apply(BufferedDeletes,int).mjava","sourceNew":"    void apply(BufferedDeletes del, int docIDUpto) {\n      if (sliceHead == sliceTail) {\n        // 0 length slice\n        return;\n      }\n      /*\n       * When we apply a slice we take the head and get its next as our first\n       * item to apply and continue until we applied the tail. If the head and\n       * tail in this slice are not equal then there will be at least one more\n       * non-null node in the slice!\n       */\n      Node<?> current = sliceHead;\n      do {\n        current = current.next;\n        assert current != null : \"slice property violated between the head on the tail must not be a null node\";\n        current.apply(del, docIDUpto);\n//        System.out.println(Thread.currentThread().getName() + \": pull \" + current + \" docIDUpto=\" + docIDUpto);\n      } while (current != sliceTail);\n      reset();\n    }\n\n","sourceOld":"    void apply(BufferedDeletes del, int docIDUpto) {\n      if (sliceHead == sliceTail) {\n        // 0 length slice\n        return;\n      }\n      /*\n       * When we apply a slice we take the head and get its next as our first\n       * item to apply and continue until we applied the tail. If the head and\n       * tail in this slice are not equal then there will be at least one more\n       * non-null node in the slice!\n       */\n      Node<?> current = sliceHead;\n      do {\n        current = current.next;\n        assert current != null : \"slice property violated between the head on the tail must not be a null node\";\n        current.apply(del, docIDUpto);\n//        System.out.println(Thread.currentThread().getName() + \": pull \" + current + \" docIDUpto=\" + docIDUpto);\n      } while (current != sliceTail);\n      reset();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0","date":1383367127,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterDeleteQueue.DeleteSlice#apply(BufferedUpdates,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterDeleteQueue.DeleteSlice#apply(BufferedDeletes,int).mjava","sourceNew":"    void apply(BufferedUpdates del, int docIDUpto) {\n      if (sliceHead == sliceTail) {\n        // 0 length slice\n        return;\n      }\n      /*\n       * When we apply a slice we take the head and get its next as our first\n       * item to apply and continue until we applied the tail. If the head and\n       * tail in this slice are not equal then there will be at least one more\n       * non-null node in the slice!\n       */\n      Node<?> current = sliceHead;\n      do {\n        current = current.next;\n        assert current != null : \"slice property violated between the head on the tail must not be a null node\";\n        current.apply(del, docIDUpto);\n//        System.out.println(Thread.currentThread().getName() + \": pull \" + current + \" docIDUpto=\" + docIDUpto);\n      } while (current != sliceTail);\n      reset();\n    }\n\n","sourceOld":"    void apply(BufferedDeletes del, int docIDUpto) {\n      if (sliceHead == sliceTail) {\n        // 0 length slice\n        return;\n      }\n      /*\n       * When we apply a slice we take the head and get its next as our first\n       * item to apply and continue until we applied the tail. If the head and\n       * tail in this slice are not equal then there will be at least one more\n       * non-null node in the slice!\n       */\n      Node<?> current = sliceHead;\n      do {\n        current = current.next;\n        assert current != null : \"slice property violated between the head on the tail must not be a null node\";\n        current.apply(del, docIDUpto);\n//        System.out.println(Thread.currentThread().getName() + \": pull \" + current + \" docIDUpto=\" + docIDUpto);\n      } while (current != sliceTail);\n      reset();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0"]},"commit2Childs":{"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}