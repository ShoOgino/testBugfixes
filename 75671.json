{"path":"solr/src/test/org/apache/solr/servlet/SolrRequestParserTest#testStreamBody().mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/servlet/SolrRequestParserTest#testStreamBody().mjava","pathOld":"/dev/null","sourceNew":"  public void testStreamBody() throws Exception\n  {\n    String body1 = \"AMANAPLANPANAMA\";\n    String body2 = \"qwertasdfgzxcvb\";\n    String body3 = \"1234567890\";\n    \n    SolrCore core = h.getCore();\n    \n    Map<String,String[]> args = new HashMap<String, String[]>();\n    args.put( CommonParams.STREAM_BODY, new String[] {body1} );\n    \n    // Make sure it got a single stream in and out ok\n    List<ContentStream> streams = new ArrayList<ContentStream>();\n    parser.buildRequestFrom( core, new MultiMapSolrParams( args ), streams );\n    assertEquals( 1, streams.size() );\n    assertEquals( body1, IOUtils.toString( streams.get(0).getStream() ) );\n    \n    // Now add three and make sure they come out ok\n    streams = new ArrayList<ContentStream>();\n    args.put( CommonParams.STREAM_BODY, new String[] {body1,body2,body3} );\n    parser.buildRequestFrom( core, new MultiMapSolrParams( args ), streams );\n    assertEquals( 3, streams.size() );\n    ArrayList<String> input  = new ArrayList<String>();\n    ArrayList<String> output = new ArrayList<String>();\n    input.add( body1 );\n    input.add( body2 );\n    input.add( body3 );\n    output.add( IOUtils.toString( streams.get(0).getStream() ) );\n    output.add( IOUtils.toString( streams.get(1).getStream() ) );\n    output.add( IOUtils.toString( streams.get(2).getStream() ) );\n    // sort them so the output is consistent\n    Collections.sort( input );\n    Collections.sort( output );\n    assertEquals( input.toString(), output.toString() );\n    \n    // set the contentType and make sure tat gets set\n    String ctype = \"text/xxx\";\n    streams = new ArrayList<ContentStream>();\n    args.put( CommonParams.STREAM_CONTENTTYPE, new String[] {ctype} );\n    parser.buildRequestFrom( core, new MultiMapSolrParams( args ), streams );\n    for( ContentStream s : streams ) {\n      assertEquals( ctype, s.getContentType() );\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/test/org/apache/solr/servlet/SolrRequestParserTest#testStreamBody().mjava","sourceNew":null,"sourceOld":"  public void testStreamBody() throws Exception\n  {\n    String body1 = \"AMANAPLANPANAMA\";\n    String body2 = \"qwertasdfgzxcvb\";\n    String body3 = \"1234567890\";\n    \n    SolrCore core = h.getCore();\n    \n    Map<String,String[]> args = new HashMap<String, String[]>();\n    args.put( CommonParams.STREAM_BODY, new String[] {body1} );\n    \n    // Make sure it got a single stream in and out ok\n    List<ContentStream> streams = new ArrayList<ContentStream>();\n    parser.buildRequestFrom( core, new MultiMapSolrParams( args ), streams );\n    assertEquals( 1, streams.size() );\n    assertEquals( body1, IOUtils.toString( streams.get(0).getStream() ) );\n    \n    // Now add three and make sure they come out ok\n    streams = new ArrayList<ContentStream>();\n    args.put( CommonParams.STREAM_BODY, new String[] {body1,body2,body3} );\n    parser.buildRequestFrom( core, new MultiMapSolrParams( args ), streams );\n    assertEquals( 3, streams.size() );\n    ArrayList<String> input  = new ArrayList<String>();\n    ArrayList<String> output = new ArrayList<String>();\n    input.add( body1 );\n    input.add( body2 );\n    input.add( body3 );\n    output.add( IOUtils.toString( streams.get(0).getStream() ) );\n    output.add( IOUtils.toString( streams.get(1).getStream() ) );\n    output.add( IOUtils.toString( streams.get(2).getStream() ) );\n    // sort them so the output is consistent\n    Collections.sort( input );\n    Collections.sort( output );\n    assertEquals( input.toString(), output.toString() );\n    \n    // set the contentType and make sure tat gets set\n    String ctype = \"text/xxx\";\n    streams = new ArrayList<ContentStream>();\n    args.put( CommonParams.STREAM_CONTENTTYPE, new String[] {ctype} );\n    parser.buildRequestFrom( core, new MultiMapSolrParams( args ), streams );\n    for( ContentStream s : streams ) {\n      assertEquals( ctype, s.getContentType() );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/servlet/SolrRequestParserTest#testStreamBody().mjava","pathOld":"src/test/org/apache/solr/servlet/SolrRequestParserTest#testStreamBody().mjava","sourceNew":"  public void testStreamBody() throws Exception\n  {\n    String body1 = \"AMANAPLANPANAMA\";\n    String body2 = \"qwertasdfgzxcvb\";\n    String body3 = \"1234567890\";\n    \n    SolrCore core = h.getCore();\n    \n    Map<String,String[]> args = new HashMap<String, String[]>();\n    args.put( CommonParams.STREAM_BODY, new String[] {body1} );\n    \n    // Make sure it got a single stream in and out ok\n    List<ContentStream> streams = new ArrayList<ContentStream>();\n    parser.buildRequestFrom( core, new MultiMapSolrParams( args ), streams );\n    assertEquals( 1, streams.size() );\n    assertEquals( body1, IOUtils.toString( streams.get(0).getStream() ) );\n    \n    // Now add three and make sure they come out ok\n    streams = new ArrayList<ContentStream>();\n    args.put( CommonParams.STREAM_BODY, new String[] {body1,body2,body3} );\n    parser.buildRequestFrom( core, new MultiMapSolrParams( args ), streams );\n    assertEquals( 3, streams.size() );\n    ArrayList<String> input  = new ArrayList<String>();\n    ArrayList<String> output = new ArrayList<String>();\n    input.add( body1 );\n    input.add( body2 );\n    input.add( body3 );\n    output.add( IOUtils.toString( streams.get(0).getStream() ) );\n    output.add( IOUtils.toString( streams.get(1).getStream() ) );\n    output.add( IOUtils.toString( streams.get(2).getStream() ) );\n    // sort them so the output is consistent\n    Collections.sort( input );\n    Collections.sort( output );\n    assertEquals( input.toString(), output.toString() );\n    \n    // set the contentType and make sure tat gets set\n    String ctype = \"text/xxx\";\n    streams = new ArrayList<ContentStream>();\n    args.put( CommonParams.STREAM_CONTENTTYPE, new String[] {ctype} );\n    parser.buildRequestFrom( core, new MultiMapSolrParams( args ), streams );\n    for( ContentStream s : streams ) {\n      assertEquals( ctype, s.getContentType() );\n    }\n  }\n\n","sourceOld":"  public void testStreamBody() throws Exception\n  {\n    String body1 = \"AMANAPLANPANAMA\";\n    String body2 = \"qwertasdfgzxcvb\";\n    String body3 = \"1234567890\";\n    \n    SolrCore core = h.getCore();\n    \n    Map<String,String[]> args = new HashMap<String, String[]>();\n    args.put( CommonParams.STREAM_BODY, new String[] {body1} );\n    \n    // Make sure it got a single stream in and out ok\n    List<ContentStream> streams = new ArrayList<ContentStream>();\n    parser.buildRequestFrom( core, new MultiMapSolrParams( args ), streams );\n    assertEquals( 1, streams.size() );\n    assertEquals( body1, IOUtils.toString( streams.get(0).getStream() ) );\n    \n    // Now add three and make sure they come out ok\n    streams = new ArrayList<ContentStream>();\n    args.put( CommonParams.STREAM_BODY, new String[] {body1,body2,body3} );\n    parser.buildRequestFrom( core, new MultiMapSolrParams( args ), streams );\n    assertEquals( 3, streams.size() );\n    ArrayList<String> input  = new ArrayList<String>();\n    ArrayList<String> output = new ArrayList<String>();\n    input.add( body1 );\n    input.add( body2 );\n    input.add( body3 );\n    output.add( IOUtils.toString( streams.get(0).getStream() ) );\n    output.add( IOUtils.toString( streams.get(1).getStream() ) );\n    output.add( IOUtils.toString( streams.get(2).getStream() ) );\n    // sort them so the output is consistent\n    Collections.sort( input );\n    Collections.sort( output );\n    assertEquals( input.toString(), output.toString() );\n    \n    // set the contentType and make sure tat gets set\n    String ctype = \"text/xxx\";\n    streams = new ArrayList<ContentStream>();\n    args.put( CommonParams.STREAM_CONTENTTYPE, new String[] {ctype} );\n    parser.buildRequestFrom( core, new MultiMapSolrParams( args ), streams );\n    for( ContentStream s : streams ) {\n      assertEquals( ctype, s.getContentType() );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/servlet/SolrRequestParserTest#testStreamBody().mjava","pathOld":"/dev/null","sourceNew":"  public void testStreamBody() throws Exception\n  {\n    String body1 = \"AMANAPLANPANAMA\";\n    String body2 = \"qwertasdfgzxcvb\";\n    String body3 = \"1234567890\";\n    \n    SolrCore core = h.getCore();\n    \n    Map<String,String[]> args = new HashMap<String, String[]>();\n    args.put( CommonParams.STREAM_BODY, new String[] {body1} );\n    \n    // Make sure it got a single stream in and out ok\n    List<ContentStream> streams = new ArrayList<ContentStream>();\n    parser.buildRequestFrom( core, new MultiMapSolrParams( args ), streams );\n    assertEquals( 1, streams.size() );\n    assertEquals( body1, IOUtils.toString( streams.get(0).getStream() ) );\n    \n    // Now add three and make sure they come out ok\n    streams = new ArrayList<ContentStream>();\n    args.put( CommonParams.STREAM_BODY, new String[] {body1,body2,body3} );\n    parser.buildRequestFrom( core, new MultiMapSolrParams( args ), streams );\n    assertEquals( 3, streams.size() );\n    ArrayList<String> input  = new ArrayList<String>();\n    ArrayList<String> output = new ArrayList<String>();\n    input.add( body1 );\n    input.add( body2 );\n    input.add( body3 );\n    output.add( IOUtils.toString( streams.get(0).getStream() ) );\n    output.add( IOUtils.toString( streams.get(1).getStream() ) );\n    output.add( IOUtils.toString( streams.get(2).getStream() ) );\n    // sort them so the output is consistent\n    Collections.sort( input );\n    Collections.sort( output );\n    assertEquals( input.toString(), output.toString() );\n    \n    // set the contentType and make sure tat gets set\n    String ctype = \"text/xxx\";\n    streams = new ArrayList<ContentStream>();\n    args.put( CommonParams.STREAM_CONTENTTYPE, new String[] {ctype} );\n    parser.buildRequestFrom( core, new MultiMapSolrParams( args ), streams );\n    for( ContentStream s : streams ) {\n      assertEquals( ctype, s.getContentType() );\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9a3ee7c72e7539c6ad4b8494808b7d64c210febf","date":1269122965,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/servlet/SolrRequestParserTest#testStreamBody().mjava","pathOld":"solr/src/test/org/apache/solr/servlet/SolrRequestParserTest#testStreamBody().mjava","sourceNew":"  @Test\n  public void testStreamBody() throws Exception\n  {\n    String body1 = \"AMANAPLANPANAMA\";\n    String body2 = \"qwertasdfgzxcvb\";\n    String body3 = \"1234567890\";\n    \n    SolrCore core = h.getCore();\n    \n    Map<String,String[]> args = new HashMap<String, String[]>();\n    args.put( CommonParams.STREAM_BODY, new String[] {body1} );\n    \n    // Make sure it got a single stream in and out ok\n    List<ContentStream> streams = new ArrayList<ContentStream>();\n    parser.buildRequestFrom( core, new MultiMapSolrParams( args ), streams );\n    assertEquals( 1, streams.size() );\n    assertEquals( body1, IOUtils.toString( streams.get(0).getStream() ) );\n    \n    // Now add three and make sure they come out ok\n    streams = new ArrayList<ContentStream>();\n    args.put( CommonParams.STREAM_BODY, new String[] {body1,body2,body3} );\n    parser.buildRequestFrom( core, new MultiMapSolrParams( args ), streams );\n    assertEquals( 3, streams.size() );\n    ArrayList<String> input  = new ArrayList<String>();\n    ArrayList<String> output = new ArrayList<String>();\n    input.add( body1 );\n    input.add( body2 );\n    input.add( body3 );\n    output.add( IOUtils.toString( streams.get(0).getStream() ) );\n    output.add( IOUtils.toString( streams.get(1).getStream() ) );\n    output.add( IOUtils.toString( streams.get(2).getStream() ) );\n    // sort them so the output is consistent\n    Collections.sort( input );\n    Collections.sort( output );\n    assertEquals( input.toString(), output.toString() );\n    \n    // set the contentType and make sure tat gets set\n    String ctype = \"text/xxx\";\n    streams = new ArrayList<ContentStream>();\n    args.put( CommonParams.STREAM_CONTENTTYPE, new String[] {ctype} );\n    parser.buildRequestFrom( core, new MultiMapSolrParams( args ), streams );\n    for( ContentStream s : streams ) {\n      assertEquals( ctype, s.getContentType() );\n    }\n  }\n\n","sourceOld":"  public void testStreamBody() throws Exception\n  {\n    String body1 = \"AMANAPLANPANAMA\";\n    String body2 = \"qwertasdfgzxcvb\";\n    String body3 = \"1234567890\";\n    \n    SolrCore core = h.getCore();\n    \n    Map<String,String[]> args = new HashMap<String, String[]>();\n    args.put( CommonParams.STREAM_BODY, new String[] {body1} );\n    \n    // Make sure it got a single stream in and out ok\n    List<ContentStream> streams = new ArrayList<ContentStream>();\n    parser.buildRequestFrom( core, new MultiMapSolrParams( args ), streams );\n    assertEquals( 1, streams.size() );\n    assertEquals( body1, IOUtils.toString( streams.get(0).getStream() ) );\n    \n    // Now add three and make sure they come out ok\n    streams = new ArrayList<ContentStream>();\n    args.put( CommonParams.STREAM_BODY, new String[] {body1,body2,body3} );\n    parser.buildRequestFrom( core, new MultiMapSolrParams( args ), streams );\n    assertEquals( 3, streams.size() );\n    ArrayList<String> input  = new ArrayList<String>();\n    ArrayList<String> output = new ArrayList<String>();\n    input.add( body1 );\n    input.add( body2 );\n    input.add( body3 );\n    output.add( IOUtils.toString( streams.get(0).getStream() ) );\n    output.add( IOUtils.toString( streams.get(1).getStream() ) );\n    output.add( IOUtils.toString( streams.get(2).getStream() ) );\n    // sort them so the output is consistent\n    Collections.sort( input );\n    Collections.sort( output );\n    assertEquals( input.toString(), output.toString() );\n    \n    // set the contentType and make sure tat gets set\n    String ctype = \"text/xxx\";\n    streams = new ArrayList<ContentStream>();\n    args.put( CommonParams.STREAM_CONTENTTYPE, new String[] {ctype} );\n    parser.buildRequestFrom( core, new MultiMapSolrParams( args ), streams );\n    for( ContentStream s : streams ) {\n      assertEquals( ctype, s.getContentType() );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"256a46aab68a9589b36857dd3385dae002b8c5dc","date":1287357110,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/servlet/SolrRequestParserTest#testStreamBody().mjava","pathOld":"solr/src/test/org/apache/solr/servlet/SolrRequestParserTest#testStreamBody().mjava","sourceNew":"  @Test\n  public void testStreamBody() throws Exception\n  {\n    String body1 = \"AMANAPLANPANAMA\";\n    String body2 = \"qwertasdfgzxcvb\";\n    String body3 = \"1234567890\";\n    \n    SolrCore core = h.getCore();\n    \n    Map<String,String[]> args = new HashMap<String, String[]>();\n    args.put( CommonParams.STREAM_BODY, new String[] {body1} );\n    \n    // Make sure it got a single stream in and out ok\n    List<ContentStream> streams = new ArrayList<ContentStream>();\n    SolrQueryRequest req = parser.buildRequestFrom( core, new MultiMapSolrParams( args ), streams );\n    assertEquals( 1, streams.size() );\n    assertEquals( body1, IOUtils.toString( streams.get(0).getStream() ) );\n    req.close();\n\n    // Now add three and make sure they come out ok\n    streams = new ArrayList<ContentStream>();\n    args.put( CommonParams.STREAM_BODY, new String[] {body1,body2,body3} );\n    req = parser.buildRequestFrom( core, new MultiMapSolrParams( args ), streams );\n    assertEquals( 3, streams.size() );\n    ArrayList<String> input  = new ArrayList<String>();\n    ArrayList<String> output = new ArrayList<String>();\n    input.add( body1 );\n    input.add( body2 );\n    input.add( body3 );\n    output.add( IOUtils.toString( streams.get(0).getStream() ) );\n    output.add( IOUtils.toString( streams.get(1).getStream() ) );\n    output.add( IOUtils.toString( streams.get(2).getStream() ) );\n    // sort them so the output is consistent\n    Collections.sort( input );\n    Collections.sort( output );\n    assertEquals( input.toString(), output.toString() );\n    req.close();\n\n    // set the contentType and make sure tat gets set\n    String ctype = \"text/xxx\";\n    streams = new ArrayList<ContentStream>();\n    args.put( CommonParams.STREAM_CONTENTTYPE, new String[] {ctype} );\n    req = parser.buildRequestFrom( core, new MultiMapSolrParams( args ), streams );\n    for( ContentStream s : streams ) {\n      assertEquals( ctype, s.getContentType() );\n    }\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testStreamBody() throws Exception\n  {\n    String body1 = \"AMANAPLANPANAMA\";\n    String body2 = \"qwertasdfgzxcvb\";\n    String body3 = \"1234567890\";\n    \n    SolrCore core = h.getCore();\n    \n    Map<String,String[]> args = new HashMap<String, String[]>();\n    args.put( CommonParams.STREAM_BODY, new String[] {body1} );\n    \n    // Make sure it got a single stream in and out ok\n    List<ContentStream> streams = new ArrayList<ContentStream>();\n    parser.buildRequestFrom( core, new MultiMapSolrParams( args ), streams );\n    assertEquals( 1, streams.size() );\n    assertEquals( body1, IOUtils.toString( streams.get(0).getStream() ) );\n    \n    // Now add three and make sure they come out ok\n    streams = new ArrayList<ContentStream>();\n    args.put( CommonParams.STREAM_BODY, new String[] {body1,body2,body3} );\n    parser.buildRequestFrom( core, new MultiMapSolrParams( args ), streams );\n    assertEquals( 3, streams.size() );\n    ArrayList<String> input  = new ArrayList<String>();\n    ArrayList<String> output = new ArrayList<String>();\n    input.add( body1 );\n    input.add( body2 );\n    input.add( body3 );\n    output.add( IOUtils.toString( streams.get(0).getStream() ) );\n    output.add( IOUtils.toString( streams.get(1).getStream() ) );\n    output.add( IOUtils.toString( streams.get(2).getStream() ) );\n    // sort them so the output is consistent\n    Collections.sort( input );\n    Collections.sort( output );\n    assertEquals( input.toString(), output.toString() );\n    \n    // set the contentType and make sure tat gets set\n    String ctype = \"text/xxx\";\n    streams = new ArrayList<ContentStream>();\n    args.put( CommonParams.STREAM_CONTENTTYPE, new String[] {ctype} );\n    parser.buildRequestFrom( core, new MultiMapSolrParams( args ), streams );\n    for( ContentStream s : streams ) {\n      assertEquals( ctype, s.getContentType() );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ecea1664e8617d82eca3b8055a3c37cb4da8511","date":1287578668,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/servlet/SolrRequestParserTest#testStreamBody().mjava","pathOld":"solr/src/test/org/apache/solr/servlet/SolrRequestParserTest#testStreamBody().mjava","sourceNew":"  @Test\n  public void testStreamBody() throws Exception\n  {\n    String body1 = \"AMANAPLANPANAMA\";\n    String body2 = \"qwertasdfgzxcvb\";\n    String body3 = \"1234567890\";\n    \n    SolrCore core = h.getCore();\n    \n    Map<String,String[]> args = new HashMap<String, String[]>();\n    args.put( CommonParams.STREAM_BODY, new String[] {body1} );\n    \n    // Make sure it got a single stream in and out ok\n    List<ContentStream> streams = new ArrayList<ContentStream>();\n    SolrQueryRequest req = parser.buildRequestFrom( core, new MultiMapSolrParams( args ), streams );\n    assertEquals( 1, streams.size() );\n    assertEquals( body1, IOUtils.toString( streams.get(0).getStream() ) );\n    req.close();\n\n    // Now add three and make sure they come out ok\n    streams = new ArrayList<ContentStream>();\n    args.put( CommonParams.STREAM_BODY, new String[] {body1,body2,body3} );\n    req = parser.buildRequestFrom( core, new MultiMapSolrParams( args ), streams );\n    assertEquals( 3, streams.size() );\n    ArrayList<String> input  = new ArrayList<String>();\n    ArrayList<String> output = new ArrayList<String>();\n    input.add( body1 );\n    input.add( body2 );\n    input.add( body3 );\n    output.add( IOUtils.toString( streams.get(0).getStream() ) );\n    output.add( IOUtils.toString( streams.get(1).getStream() ) );\n    output.add( IOUtils.toString( streams.get(2).getStream() ) );\n    // sort them so the output is consistent\n    Collections.sort( input );\n    Collections.sort( output );\n    assertEquals( input.toString(), output.toString() );\n    req.close();\n\n    // set the contentType and make sure tat gets set\n    String ctype = \"text/xxx\";\n    streams = new ArrayList<ContentStream>();\n    args.put( CommonParams.STREAM_CONTENTTYPE, new String[] {ctype} );\n    req = parser.buildRequestFrom( core, new MultiMapSolrParams( args ), streams );\n    for( ContentStream s : streams ) {\n      assertEquals( ctype, s.getContentType() );\n    }\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testStreamBody() throws Exception\n  {\n    String body1 = \"AMANAPLANPANAMA\";\n    String body2 = \"qwertasdfgzxcvb\";\n    String body3 = \"1234567890\";\n    \n    SolrCore core = h.getCore();\n    \n    Map<String,String[]> args = new HashMap<String, String[]>();\n    args.put( CommonParams.STREAM_BODY, new String[] {body1} );\n    \n    // Make sure it got a single stream in and out ok\n    List<ContentStream> streams = new ArrayList<ContentStream>();\n    parser.buildRequestFrom( core, new MultiMapSolrParams( args ), streams );\n    assertEquals( 1, streams.size() );\n    assertEquals( body1, IOUtils.toString( streams.get(0).getStream() ) );\n    \n    // Now add three and make sure they come out ok\n    streams = new ArrayList<ContentStream>();\n    args.put( CommonParams.STREAM_BODY, new String[] {body1,body2,body3} );\n    parser.buildRequestFrom( core, new MultiMapSolrParams( args ), streams );\n    assertEquals( 3, streams.size() );\n    ArrayList<String> input  = new ArrayList<String>();\n    ArrayList<String> output = new ArrayList<String>();\n    input.add( body1 );\n    input.add( body2 );\n    input.add( body3 );\n    output.add( IOUtils.toString( streams.get(0).getStream() ) );\n    output.add( IOUtils.toString( streams.get(1).getStream() ) );\n    output.add( IOUtils.toString( streams.get(2).getStream() ) );\n    // sort them so the output is consistent\n    Collections.sort( input );\n    Collections.sort( output );\n    assertEquals( input.toString(), output.toString() );\n    \n    // set the contentType and make sure tat gets set\n    String ctype = \"text/xxx\";\n    streams = new ArrayList<ContentStream>();\n    args.put( CommonParams.STREAM_CONTENTTYPE, new String[] {ctype} );\n    parser.buildRequestFrom( core, new MultiMapSolrParams( args ), streams );\n    for( ContentStream s : streams ) {\n      assertEquals( ctype, s.getContentType() );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/servlet/SolrRequestParserTest#testStreamBody().mjava","pathOld":"solr/src/test/org/apache/solr/servlet/SolrRequestParserTest#testStreamBody().mjava","sourceNew":"  @Test\n  public void testStreamBody() throws Exception\n  {\n    String body1 = \"AMANAPLANPANAMA\";\n    String body2 = \"qwertasdfgzxcvb\";\n    String body3 = \"1234567890\";\n    \n    SolrCore core = h.getCore();\n    \n    Map<String,String[]> args = new HashMap<String, String[]>();\n    args.put( CommonParams.STREAM_BODY, new String[] {body1} );\n    \n    // Make sure it got a single stream in and out ok\n    List<ContentStream> streams = new ArrayList<ContentStream>();\n    SolrQueryRequest req = parser.buildRequestFrom( core, new MultiMapSolrParams( args ), streams );\n    assertEquals( 1, streams.size() );\n    assertEquals( body1, IOUtils.toString( streams.get(0).getStream() ) );\n    req.close();\n\n    // Now add three and make sure they come out ok\n    streams = new ArrayList<ContentStream>();\n    args.put( CommonParams.STREAM_BODY, new String[] {body1,body2,body3} );\n    req = parser.buildRequestFrom( core, new MultiMapSolrParams( args ), streams );\n    assertEquals( 3, streams.size() );\n    ArrayList<String> input  = new ArrayList<String>();\n    ArrayList<String> output = new ArrayList<String>();\n    input.add( body1 );\n    input.add( body2 );\n    input.add( body3 );\n    output.add( IOUtils.toString( streams.get(0).getStream() ) );\n    output.add( IOUtils.toString( streams.get(1).getStream() ) );\n    output.add( IOUtils.toString( streams.get(2).getStream() ) );\n    // sort them so the output is consistent\n    Collections.sort( input );\n    Collections.sort( output );\n    assertEquals( input.toString(), output.toString() );\n    req.close();\n\n    // set the contentType and make sure tat gets set\n    String ctype = \"text/xxx\";\n    streams = new ArrayList<ContentStream>();\n    args.put( CommonParams.STREAM_CONTENTTYPE, new String[] {ctype} );\n    req = parser.buildRequestFrom( core, new MultiMapSolrParams( args ), streams );\n    for( ContentStream s : streams ) {\n      assertEquals( ctype, s.getContentType() );\n    }\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testStreamBody() throws Exception\n  {\n    String body1 = \"AMANAPLANPANAMA\";\n    String body2 = \"qwertasdfgzxcvb\";\n    String body3 = \"1234567890\";\n    \n    SolrCore core = h.getCore();\n    \n    Map<String,String[]> args = new HashMap<String, String[]>();\n    args.put( CommonParams.STREAM_BODY, new String[] {body1} );\n    \n    // Make sure it got a single stream in and out ok\n    List<ContentStream> streams = new ArrayList<ContentStream>();\n    parser.buildRequestFrom( core, new MultiMapSolrParams( args ), streams );\n    assertEquals( 1, streams.size() );\n    assertEquals( body1, IOUtils.toString( streams.get(0).getStream() ) );\n    \n    // Now add three and make sure they come out ok\n    streams = new ArrayList<ContentStream>();\n    args.put( CommonParams.STREAM_BODY, new String[] {body1,body2,body3} );\n    parser.buildRequestFrom( core, new MultiMapSolrParams( args ), streams );\n    assertEquals( 3, streams.size() );\n    ArrayList<String> input  = new ArrayList<String>();\n    ArrayList<String> output = new ArrayList<String>();\n    input.add( body1 );\n    input.add( body2 );\n    input.add( body3 );\n    output.add( IOUtils.toString( streams.get(0).getStream() ) );\n    output.add( IOUtils.toString( streams.get(1).getStream() ) );\n    output.add( IOUtils.toString( streams.get(2).getStream() ) );\n    // sort them so the output is consistent\n    Collections.sort( input );\n    Collections.sort( output );\n    assertEquals( input.toString(), output.toString() );\n    \n    // set the contentType and make sure tat gets set\n    String ctype = \"text/xxx\";\n    streams = new ArrayList<ContentStream>();\n    args.put( CommonParams.STREAM_CONTENTTYPE, new String[] {ctype} );\n    parser.buildRequestFrom( core, new MultiMapSolrParams( args ), streams );\n    for( ContentStream s : streams ) {\n      assertEquals( ctype, s.getContentType() );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"651a613a8df324c5f834b6c2b6fb5bb945431755","date":1296820909,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/servlet/SolrRequestParserTest#testStreamBody().mjava","pathOld":"solr/src/test/org/apache/solr/servlet/SolrRequestParserTest#testStreamBody().mjava","sourceNew":"  @Test\n  public void testStreamBody() throws Exception\n  {\n    String body1 = \"AMANAPLANPANAMA\";\n    String body2 = \"qwertasdfgzxcvb\";\n    String body3 = \"1234567890\";\n    \n    SolrCore core = h.getCore();\n    \n    Map<String,String[]> args = new HashMap<String, String[]>();\n    args.put( CommonParams.STREAM_BODY, new String[] {body1} );\n    \n    // Make sure it got a single stream in and out ok\n    List<ContentStream> streams = new ArrayList<ContentStream>();\n    SolrQueryRequest req = parser.buildRequestFrom( core, new MultiMapSolrParams( args ), streams );\n    assertEquals( 1, streams.size() );\n    assertEquals( body1, IOUtils.toString( streams.get(0).getReader() ) );\n    req.close();\n\n    // Now add three and make sure they come out ok\n    streams = new ArrayList<ContentStream>();\n    args.put( CommonParams.STREAM_BODY, new String[] {body1,body2,body3} );\n    req = parser.buildRequestFrom( core, new MultiMapSolrParams( args ), streams );\n    assertEquals( 3, streams.size() );\n    ArrayList<String> input  = new ArrayList<String>();\n    ArrayList<String> output = new ArrayList<String>();\n    input.add( body1 );\n    input.add( body2 );\n    input.add( body3 );\n    output.add( IOUtils.toString( streams.get(0).getReader() ) );\n    output.add( IOUtils.toString( streams.get(1).getReader() ) );\n    output.add( IOUtils.toString( streams.get(2).getReader() ) );\n    // sort them so the output is consistent\n    Collections.sort( input );\n    Collections.sort( output );\n    assertEquals( input.toString(), output.toString() );\n    req.close();\n\n    // set the contentType and make sure tat gets set\n    String ctype = \"text/xxx\";\n    streams = new ArrayList<ContentStream>();\n    args.put( CommonParams.STREAM_CONTENTTYPE, new String[] {ctype} );\n    req = parser.buildRequestFrom( core, new MultiMapSolrParams( args ), streams );\n    for( ContentStream s : streams ) {\n      assertEquals( ctype, s.getContentType() );\n    }\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testStreamBody() throws Exception\n  {\n    String body1 = \"AMANAPLANPANAMA\";\n    String body2 = \"qwertasdfgzxcvb\";\n    String body3 = \"1234567890\";\n    \n    SolrCore core = h.getCore();\n    \n    Map<String,String[]> args = new HashMap<String, String[]>();\n    args.put( CommonParams.STREAM_BODY, new String[] {body1} );\n    \n    // Make sure it got a single stream in and out ok\n    List<ContentStream> streams = new ArrayList<ContentStream>();\n    SolrQueryRequest req = parser.buildRequestFrom( core, new MultiMapSolrParams( args ), streams );\n    assertEquals( 1, streams.size() );\n    assertEquals( body1, IOUtils.toString( streams.get(0).getStream() ) );\n    req.close();\n\n    // Now add three and make sure they come out ok\n    streams = new ArrayList<ContentStream>();\n    args.put( CommonParams.STREAM_BODY, new String[] {body1,body2,body3} );\n    req = parser.buildRequestFrom( core, new MultiMapSolrParams( args ), streams );\n    assertEquals( 3, streams.size() );\n    ArrayList<String> input  = new ArrayList<String>();\n    ArrayList<String> output = new ArrayList<String>();\n    input.add( body1 );\n    input.add( body2 );\n    input.add( body3 );\n    output.add( IOUtils.toString( streams.get(0).getStream() ) );\n    output.add( IOUtils.toString( streams.get(1).getStream() ) );\n    output.add( IOUtils.toString( streams.get(2).getStream() ) );\n    // sort them so the output is consistent\n    Collections.sort( input );\n    Collections.sort( output );\n    assertEquals( input.toString(), output.toString() );\n    req.close();\n\n    // set the contentType and make sure tat gets set\n    String ctype = \"text/xxx\";\n    streams = new ArrayList<ContentStream>();\n    args.put( CommonParams.STREAM_CONTENTTYPE, new String[] {ctype} );\n    req = parser.buildRequestFrom( core, new MultiMapSolrParams( args ), streams );\n    for( ContentStream s : streams ) {\n      assertEquals( ctype, s.getContentType() );\n    }\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/servlet/SolrRequestParserTest#testStreamBody().mjava","pathOld":"solr/src/test/org/apache/solr/servlet/SolrRequestParserTest#testStreamBody().mjava","sourceNew":"  @Test\n  public void testStreamBody() throws Exception\n  {\n    String body1 = \"AMANAPLANPANAMA\";\n    String body2 = \"qwertasdfgzxcvb\";\n    String body3 = \"1234567890\";\n    \n    SolrCore core = h.getCore();\n    \n    Map<String,String[]> args = new HashMap<String, String[]>();\n    args.put( CommonParams.STREAM_BODY, new String[] {body1} );\n    \n    // Make sure it got a single stream in and out ok\n    List<ContentStream> streams = new ArrayList<ContentStream>();\n    SolrQueryRequest req = parser.buildRequestFrom( core, new MultiMapSolrParams( args ), streams );\n    assertEquals( 1, streams.size() );\n    assertEquals( body1, IOUtils.toString( streams.get(0).getReader() ) );\n    req.close();\n\n    // Now add three and make sure they come out ok\n    streams = new ArrayList<ContentStream>();\n    args.put( CommonParams.STREAM_BODY, new String[] {body1,body2,body3} );\n    req = parser.buildRequestFrom( core, new MultiMapSolrParams( args ), streams );\n    assertEquals( 3, streams.size() );\n    ArrayList<String> input  = new ArrayList<String>();\n    ArrayList<String> output = new ArrayList<String>();\n    input.add( body1 );\n    input.add( body2 );\n    input.add( body3 );\n    output.add( IOUtils.toString( streams.get(0).getReader() ) );\n    output.add( IOUtils.toString( streams.get(1).getReader() ) );\n    output.add( IOUtils.toString( streams.get(2).getReader() ) );\n    // sort them so the output is consistent\n    Collections.sort( input );\n    Collections.sort( output );\n    assertEquals( input.toString(), output.toString() );\n    req.close();\n\n    // set the contentType and make sure tat gets set\n    String ctype = \"text/xxx\";\n    streams = new ArrayList<ContentStream>();\n    args.put( CommonParams.STREAM_CONTENTTYPE, new String[] {ctype} );\n    req = parser.buildRequestFrom( core, new MultiMapSolrParams( args ), streams );\n    for( ContentStream s : streams ) {\n      assertEquals( ctype, s.getContentType() );\n    }\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testStreamBody() throws Exception\n  {\n    String body1 = \"AMANAPLANPANAMA\";\n    String body2 = \"qwertasdfgzxcvb\";\n    String body3 = \"1234567890\";\n    \n    SolrCore core = h.getCore();\n    \n    Map<String,String[]> args = new HashMap<String, String[]>();\n    args.put( CommonParams.STREAM_BODY, new String[] {body1} );\n    \n    // Make sure it got a single stream in and out ok\n    List<ContentStream> streams = new ArrayList<ContentStream>();\n    SolrQueryRequest req = parser.buildRequestFrom( core, new MultiMapSolrParams( args ), streams );\n    assertEquals( 1, streams.size() );\n    assertEquals( body1, IOUtils.toString( streams.get(0).getStream() ) );\n    req.close();\n\n    // Now add three and make sure they come out ok\n    streams = new ArrayList<ContentStream>();\n    args.put( CommonParams.STREAM_BODY, new String[] {body1,body2,body3} );\n    req = parser.buildRequestFrom( core, new MultiMapSolrParams( args ), streams );\n    assertEquals( 3, streams.size() );\n    ArrayList<String> input  = new ArrayList<String>();\n    ArrayList<String> output = new ArrayList<String>();\n    input.add( body1 );\n    input.add( body2 );\n    input.add( body3 );\n    output.add( IOUtils.toString( streams.get(0).getStream() ) );\n    output.add( IOUtils.toString( streams.get(1).getStream() ) );\n    output.add( IOUtils.toString( streams.get(2).getStream() ) );\n    // sort them so the output is consistent\n    Collections.sort( input );\n    Collections.sort( output );\n    assertEquals( input.toString(), output.toString() );\n    req.close();\n\n    // set the contentType and make sure tat gets set\n    String ctype = \"text/xxx\";\n    streams = new ArrayList<ContentStream>();\n    args.put( CommonParams.STREAM_CONTENTTYPE, new String[] {ctype} );\n    req = parser.buildRequestFrom( core, new MultiMapSolrParams( args ), streams );\n    for( ContentStream s : streams ) {\n      assertEquals( ctype, s.getContentType() );\n    }\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/servlet/SolrRequestParserTest#testStreamBody().mjava","pathOld":"solr/src/test/org/apache/solr/servlet/SolrRequestParserTest#testStreamBody().mjava","sourceNew":"  @Test\n  public void testStreamBody() throws Exception\n  {\n    String body1 = \"AMANAPLANPANAMA\";\n    String body2 = \"qwertasdfgzxcvb\";\n    String body3 = \"1234567890\";\n    \n    SolrCore core = h.getCore();\n    \n    Map<String,String[]> args = new HashMap<String, String[]>();\n    args.put( CommonParams.STREAM_BODY, new String[] {body1} );\n    \n    // Make sure it got a single stream in and out ok\n    List<ContentStream> streams = new ArrayList<ContentStream>();\n    SolrQueryRequest req = parser.buildRequestFrom( core, new MultiMapSolrParams( args ), streams );\n    assertEquals( 1, streams.size() );\n    assertEquals( body1, IOUtils.toString( streams.get(0).getReader() ) );\n    req.close();\n\n    // Now add three and make sure they come out ok\n    streams = new ArrayList<ContentStream>();\n    args.put( CommonParams.STREAM_BODY, new String[] {body1,body2,body3} );\n    req = parser.buildRequestFrom( core, new MultiMapSolrParams( args ), streams );\n    assertEquals( 3, streams.size() );\n    ArrayList<String> input  = new ArrayList<String>();\n    ArrayList<String> output = new ArrayList<String>();\n    input.add( body1 );\n    input.add( body2 );\n    input.add( body3 );\n    output.add( IOUtils.toString( streams.get(0).getReader() ) );\n    output.add( IOUtils.toString( streams.get(1).getReader() ) );\n    output.add( IOUtils.toString( streams.get(2).getReader() ) );\n    // sort them so the output is consistent\n    Collections.sort( input );\n    Collections.sort( output );\n    assertEquals( input.toString(), output.toString() );\n    req.close();\n\n    // set the contentType and make sure tat gets set\n    String ctype = \"text/xxx\";\n    streams = new ArrayList<ContentStream>();\n    args.put( CommonParams.STREAM_CONTENTTYPE, new String[] {ctype} );\n    req = parser.buildRequestFrom( core, new MultiMapSolrParams( args ), streams );\n    for( ContentStream s : streams ) {\n      assertEquals( ctype, s.getContentType() );\n    }\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testStreamBody() throws Exception\n  {\n    String body1 = \"AMANAPLANPANAMA\";\n    String body2 = \"qwertasdfgzxcvb\";\n    String body3 = \"1234567890\";\n    \n    SolrCore core = h.getCore();\n    \n    Map<String,String[]> args = new HashMap<String, String[]>();\n    args.put( CommonParams.STREAM_BODY, new String[] {body1} );\n    \n    // Make sure it got a single stream in and out ok\n    List<ContentStream> streams = new ArrayList<ContentStream>();\n    SolrQueryRequest req = parser.buildRequestFrom( core, new MultiMapSolrParams( args ), streams );\n    assertEquals( 1, streams.size() );\n    assertEquals( body1, IOUtils.toString( streams.get(0).getStream() ) );\n    req.close();\n\n    // Now add three and make sure they come out ok\n    streams = new ArrayList<ContentStream>();\n    args.put( CommonParams.STREAM_BODY, new String[] {body1,body2,body3} );\n    req = parser.buildRequestFrom( core, new MultiMapSolrParams( args ), streams );\n    assertEquals( 3, streams.size() );\n    ArrayList<String> input  = new ArrayList<String>();\n    ArrayList<String> output = new ArrayList<String>();\n    input.add( body1 );\n    input.add( body2 );\n    input.add( body3 );\n    output.add( IOUtils.toString( streams.get(0).getStream() ) );\n    output.add( IOUtils.toString( streams.get(1).getStream() ) );\n    output.add( IOUtils.toString( streams.get(2).getStream() ) );\n    // sort them so the output is consistent\n    Collections.sort( input );\n    Collections.sort( output );\n    assertEquals( input.toString(), output.toString() );\n    req.close();\n\n    // set the contentType and make sure tat gets set\n    String ctype = \"text/xxx\";\n    streams = new ArrayList<ContentStream>();\n    args.put( CommonParams.STREAM_CONTENTTYPE, new String[] {ctype} );\n    req = parser.buildRequestFrom( core, new MultiMapSolrParams( args ), streams );\n    for( ContentStream s : streams ) {\n      assertEquals( ctype, s.getContentType() );\n    }\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/servlet/SolrRequestParserTest#testStreamBody().mjava","pathOld":"solr/src/test/org/apache/solr/servlet/SolrRequestParserTest#testStreamBody().mjava","sourceNew":"  @Test\n  public void testStreamBody() throws Exception\n  {\n    String body1 = \"AMANAPLANPANAMA\";\n    String body2 = \"qwertasdfgzxcvb\";\n    String body3 = \"1234567890\";\n    \n    SolrCore core = h.getCore();\n    \n    Map<String,String[]> args = new HashMap<String, String[]>();\n    args.put( CommonParams.STREAM_BODY, new String[] {body1} );\n    \n    // Make sure it got a single stream in and out ok\n    List<ContentStream> streams = new ArrayList<ContentStream>();\n    SolrQueryRequest req = parser.buildRequestFrom( core, new MultiMapSolrParams( args ), streams );\n    assertEquals( 1, streams.size() );\n    assertEquals( body1, IOUtils.toString( streams.get(0).getReader() ) );\n    req.close();\n\n    // Now add three and make sure they come out ok\n    streams = new ArrayList<ContentStream>();\n    args.put( CommonParams.STREAM_BODY, new String[] {body1,body2,body3} );\n    req = parser.buildRequestFrom( core, new MultiMapSolrParams( args ), streams );\n    assertEquals( 3, streams.size() );\n    ArrayList<String> input  = new ArrayList<String>();\n    ArrayList<String> output = new ArrayList<String>();\n    input.add( body1 );\n    input.add( body2 );\n    input.add( body3 );\n    output.add( IOUtils.toString( streams.get(0).getReader() ) );\n    output.add( IOUtils.toString( streams.get(1).getReader() ) );\n    output.add( IOUtils.toString( streams.get(2).getReader() ) );\n    // sort them so the output is consistent\n    Collections.sort( input );\n    Collections.sort( output );\n    assertEquals( input.toString(), output.toString() );\n    req.close();\n\n    // set the contentType and make sure tat gets set\n    String ctype = \"text/xxx\";\n    streams = new ArrayList<ContentStream>();\n    args.put( CommonParams.STREAM_CONTENTTYPE, new String[] {ctype} );\n    req = parser.buildRequestFrom( core, new MultiMapSolrParams( args ), streams );\n    for( ContentStream s : streams ) {\n      assertEquals( ctype, s.getContentType() );\n    }\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testStreamBody() throws Exception\n  {\n    String body1 = \"AMANAPLANPANAMA\";\n    String body2 = \"qwertasdfgzxcvb\";\n    String body3 = \"1234567890\";\n    \n    SolrCore core = h.getCore();\n    \n    Map<String,String[]> args = new HashMap<String, String[]>();\n    args.put( CommonParams.STREAM_BODY, new String[] {body1} );\n    \n    // Make sure it got a single stream in and out ok\n    List<ContentStream> streams = new ArrayList<ContentStream>();\n    SolrQueryRequest req = parser.buildRequestFrom( core, new MultiMapSolrParams( args ), streams );\n    assertEquals( 1, streams.size() );\n    assertEquals( body1, IOUtils.toString( streams.get(0).getReader() ) );\n    req.close();\n\n    // Now add three and make sure they come out ok\n    streams = new ArrayList<ContentStream>();\n    args.put( CommonParams.STREAM_BODY, new String[] {body1,body2,body3} );\n    req = parser.buildRequestFrom( core, new MultiMapSolrParams( args ), streams );\n    assertEquals( 3, streams.size() );\n    ArrayList<String> input  = new ArrayList<String>();\n    ArrayList<String> output = new ArrayList<String>();\n    input.add( body1 );\n    input.add( body2 );\n    input.add( body3 );\n    output.add( IOUtils.toString( streams.get(0).getReader() ) );\n    output.add( IOUtils.toString( streams.get(1).getReader() ) );\n    output.add( IOUtils.toString( streams.get(2).getReader() ) );\n    // sort them so the output is consistent\n    Collections.sort( input );\n    Collections.sort( output );\n    assertEquals( input.toString(), output.toString() );\n    req.close();\n\n    // set the contentType and make sure tat gets set\n    String ctype = \"text/xxx\";\n    streams = new ArrayList<ContentStream>();\n    args.put( CommonParams.STREAM_CONTENTTYPE, new String[] {ctype} );\n    req = parser.buildRequestFrom( core, new MultiMapSolrParams( args ), streams );\n    for( ContentStream s : streams ) {\n      assertEquals( ctype, s.getContentType() );\n    }\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/servlet/SolrRequestParserTest#testStreamBody().mjava","pathOld":"solr/src/test/org/apache/solr/servlet/SolrRequestParserTest#testStreamBody().mjava","sourceNew":"  @Test\n  public void testStreamBody() throws Exception\n  {\n    String body1 = \"AMANAPLANPANAMA\";\n    String body2 = \"qwertasdfgzxcvb\";\n    String body3 = \"1234567890\";\n    \n    SolrCore core = h.getCore();\n    \n    Map<String,String[]> args = new HashMap<String, String[]>();\n    args.put( CommonParams.STREAM_BODY, new String[] {body1} );\n    \n    // Make sure it got a single stream in and out ok\n    List<ContentStream> streams = new ArrayList<ContentStream>();\n    SolrQueryRequest req = parser.buildRequestFrom( core, new MultiMapSolrParams( args ), streams );\n    assertEquals( 1, streams.size() );\n    assertEquals( body1, IOUtils.toString( streams.get(0).getReader() ) );\n    req.close();\n\n    // Now add three and make sure they come out ok\n    streams = new ArrayList<ContentStream>();\n    args.put( CommonParams.STREAM_BODY, new String[] {body1,body2,body3} );\n    req = parser.buildRequestFrom( core, new MultiMapSolrParams( args ), streams );\n    assertEquals( 3, streams.size() );\n    ArrayList<String> input  = new ArrayList<String>();\n    ArrayList<String> output = new ArrayList<String>();\n    input.add( body1 );\n    input.add( body2 );\n    input.add( body3 );\n    output.add( IOUtils.toString( streams.get(0).getReader() ) );\n    output.add( IOUtils.toString( streams.get(1).getReader() ) );\n    output.add( IOUtils.toString( streams.get(2).getReader() ) );\n    // sort them so the output is consistent\n    Collections.sort( input );\n    Collections.sort( output );\n    assertEquals( input.toString(), output.toString() );\n    req.close();\n\n    // set the contentType and make sure tat gets set\n    String ctype = \"text/xxx\";\n    streams = new ArrayList<ContentStream>();\n    args.put( CommonParams.STREAM_CONTENTTYPE, new String[] {ctype} );\n    req = parser.buildRequestFrom( core, new MultiMapSolrParams( args ), streams );\n    for( ContentStream s : streams ) {\n      assertEquals( ctype, s.getContentType() );\n    }\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testStreamBody() throws Exception\n  {\n    String body1 = \"AMANAPLANPANAMA\";\n    String body2 = \"qwertasdfgzxcvb\";\n    String body3 = \"1234567890\";\n    \n    SolrCore core = h.getCore();\n    \n    Map<String,String[]> args = new HashMap<String, String[]>();\n    args.put( CommonParams.STREAM_BODY, new String[] {body1} );\n    \n    // Make sure it got a single stream in and out ok\n    List<ContentStream> streams = new ArrayList<ContentStream>();\n    SolrQueryRequest req = parser.buildRequestFrom( core, new MultiMapSolrParams( args ), streams );\n    assertEquals( 1, streams.size() );\n    assertEquals( body1, IOUtils.toString( streams.get(0).getReader() ) );\n    req.close();\n\n    // Now add three and make sure they come out ok\n    streams = new ArrayList<ContentStream>();\n    args.put( CommonParams.STREAM_BODY, new String[] {body1,body2,body3} );\n    req = parser.buildRequestFrom( core, new MultiMapSolrParams( args ), streams );\n    assertEquals( 3, streams.size() );\n    ArrayList<String> input  = new ArrayList<String>();\n    ArrayList<String> output = new ArrayList<String>();\n    input.add( body1 );\n    input.add( body2 );\n    input.add( body3 );\n    output.add( IOUtils.toString( streams.get(0).getReader() ) );\n    output.add( IOUtils.toString( streams.get(1).getReader() ) );\n    output.add( IOUtils.toString( streams.get(2).getReader() ) );\n    // sort them so the output is consistent\n    Collections.sort( input );\n    Collections.sort( output );\n    assertEquals( input.toString(), output.toString() );\n    req.close();\n\n    // set the contentType and make sure tat gets set\n    String ctype = \"text/xxx\";\n    streams = new ArrayList<ContentStream>();\n    args.put( CommonParams.STREAM_CONTENTTYPE, new String[] {ctype} );\n    req = parser.buildRequestFrom( core, new MultiMapSolrParams( args ), streams );\n    for( ContentStream s : streams ) {\n      assertEquals( ctype, s.getContentType() );\n    }\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/servlet/SolrRequestParserTest#testStreamBody().mjava","pathOld":"solr/src/test/org/apache/solr/servlet/SolrRequestParserTest#testStreamBody().mjava","sourceNew":"  @Test\n  public void testStreamBody() throws Exception\n  {\n    String body1 = \"AMANAPLANPANAMA\";\n    String body2 = \"qwertasdfgzxcvb\";\n    String body3 = \"1234567890\";\n    \n    SolrCore core = h.getCore();\n    \n    Map<String,String[]> args = new HashMap<String, String[]>();\n    args.put( CommonParams.STREAM_BODY, new String[] {body1} );\n    \n    // Make sure it got a single stream in and out ok\n    List<ContentStream> streams = new ArrayList<ContentStream>();\n    SolrQueryRequest req = parser.buildRequestFrom( core, new MultiMapSolrParams( args ), streams );\n    assertEquals( 1, streams.size() );\n    assertEquals( body1, IOUtils.toString( streams.get(0).getReader() ) );\n    req.close();\n\n    // Now add three and make sure they come out ok\n    streams = new ArrayList<ContentStream>();\n    args.put( CommonParams.STREAM_BODY, new String[] {body1,body2,body3} );\n    req = parser.buildRequestFrom( core, new MultiMapSolrParams( args ), streams );\n    assertEquals( 3, streams.size() );\n    ArrayList<String> input  = new ArrayList<String>();\n    ArrayList<String> output = new ArrayList<String>();\n    input.add( body1 );\n    input.add( body2 );\n    input.add( body3 );\n    output.add( IOUtils.toString( streams.get(0).getReader() ) );\n    output.add( IOUtils.toString( streams.get(1).getReader() ) );\n    output.add( IOUtils.toString( streams.get(2).getReader() ) );\n    // sort them so the output is consistent\n    Collections.sort( input );\n    Collections.sort( output );\n    assertEquals( input.toString(), output.toString() );\n    req.close();\n\n    // set the contentType and make sure tat gets set\n    String ctype = \"text/xxx\";\n    streams = new ArrayList<ContentStream>();\n    args.put( CommonParams.STREAM_CONTENTTYPE, new String[] {ctype} );\n    req = parser.buildRequestFrom( core, new MultiMapSolrParams( args ), streams );\n    for( ContentStream s : streams ) {\n      assertEquals( ctype, s.getContentType() );\n    }\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testStreamBody() throws Exception\n  {\n    String body1 = \"AMANAPLANPANAMA\";\n    String body2 = \"qwertasdfgzxcvb\";\n    String body3 = \"1234567890\";\n    \n    SolrCore core = h.getCore();\n    \n    Map<String,String[]> args = new HashMap<String, String[]>();\n    args.put( CommonParams.STREAM_BODY, new String[] {body1} );\n    \n    // Make sure it got a single stream in and out ok\n    List<ContentStream> streams = new ArrayList<ContentStream>();\n    SolrQueryRequest req = parser.buildRequestFrom( core, new MultiMapSolrParams( args ), streams );\n    assertEquals( 1, streams.size() );\n    assertEquals( body1, IOUtils.toString( streams.get(0).getReader() ) );\n    req.close();\n\n    // Now add three and make sure they come out ok\n    streams = new ArrayList<ContentStream>();\n    args.put( CommonParams.STREAM_BODY, new String[] {body1,body2,body3} );\n    req = parser.buildRequestFrom( core, new MultiMapSolrParams( args ), streams );\n    assertEquals( 3, streams.size() );\n    ArrayList<String> input  = new ArrayList<String>();\n    ArrayList<String> output = new ArrayList<String>();\n    input.add( body1 );\n    input.add( body2 );\n    input.add( body3 );\n    output.add( IOUtils.toString( streams.get(0).getReader() ) );\n    output.add( IOUtils.toString( streams.get(1).getReader() ) );\n    output.add( IOUtils.toString( streams.get(2).getReader() ) );\n    // sort them so the output is consistent\n    Collections.sort( input );\n    Collections.sort( output );\n    assertEquals( input.toString(), output.toString() );\n    req.close();\n\n    // set the contentType and make sure tat gets set\n    String ctype = \"text/xxx\";\n    streams = new ArrayList<ContentStream>();\n    args.put( CommonParams.STREAM_CONTENTTYPE, new String[] {ctype} );\n    req = parser.buildRequestFrom( core, new MultiMapSolrParams( args ), streams );\n    for( ContentStream s : streams ) {\n      assertEquals( ctype, s.getContentType() );\n    }\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"256a46aab68a9589b36857dd3385dae002b8c5dc":["9a3ee7c72e7539c6ad4b8494808b7d64c210febf"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9a3ee7c72e7539c6ad4b8494808b7d64c210febf":["1da8d55113b689b06716246649de6f62430f15c0"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"c26f00b574427b55127e869b935845554afde1fa":["651a613a8df324c5f834b6c2b6fb5bb945431755","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["9a3ee7c72e7539c6ad4b8494808b7d64c210febf","256a46aab68a9589b36857dd3385dae002b8c5dc"],"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"651a613a8df324c5f834b6c2b6fb5bb945431755":["256a46aab68a9589b36857dd3385dae002b8c5dc"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["651a613a8df324c5f834b6c2b6fb5bb945431755"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["4ecea1664e8617d82eca3b8055a3c37cb4da8511","651a613a8df324c5f834b6c2b6fb5bb945431755"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["651a613a8df324c5f834b6c2b6fb5bb945431755"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":["9a3ee7c72e7539c6ad4b8494808b7d64c210febf","256a46aab68a9589b36857dd3385dae002b8c5dc"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","651a613a8df324c5f834b6c2b6fb5bb945431755"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"256a46aab68a9589b36857dd3385dae002b8c5dc":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","651a613a8df324c5f834b6c2b6fb5bb945431755","4ecea1664e8617d82eca3b8055a3c37cb4da8511"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"9a3ee7c72e7539c6ad4b8494808b7d64c210febf":["256a46aab68a9589b36857dd3385dae002b8c5dc","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","4ecea1664e8617d82eca3b8055a3c37cb4da8511"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"1da8d55113b689b06716246649de6f62430f15c0":["9a3ee7c72e7539c6ad4b8494808b7d64c210febf"],"651a613a8df324c5f834b6c2b6fb5bb945431755":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","29ef99d61cda9641b6250bf9567329a6e65f901d","a258fbb26824fd104ed795e5d9033d2d040049ee","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","a258fbb26824fd104ed795e5d9033d2d040049ee","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}