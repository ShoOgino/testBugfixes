{"path":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#getTlogFileList(IndexCommit).mjava","commits":[{"id":"77cae179618908dcb534af567cdf3019505ada6c","date":1449365361,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#getTlogFileList(IndexCommit).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Retrieves the list of tlog files associated to a commit point.\n   */\n  List<Map<String, Object>> getTlogFileList(IndexCommit commit) throws IOException {\n    long maxVersion = this.getMaxVersion(commit);\n    CdcrUpdateLog ulog = (CdcrUpdateLog) core.getUpdateHandler().getUpdateLog();\n    String[] logList = ulog.getLogList(new File(ulog.getLogDir()));\n    List<Map<String, Object>> tlogFiles = new ArrayList<>();\n    for (String fileName : logList) {\n      // filter out tlogs that are older than the current index commit generation, so that the list of tlog files is\n      // in synch with the latest index commit point\n      long startVersion = Math.abs(Long.parseLong(fileName.substring(fileName.lastIndexOf('.') + 1)));\n      if (startVersion < maxVersion) {\n        Map<String, Object> fileMeta = new HashMap<>();\n        fileMeta.put(NAME, fileName);\n        fileMeta.put(SIZE, new File(ulog.getLogDir(), fileName).length());\n        tlogFiles.add(fileMeta);\n      }\n    }\n    return tlogFiles;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19f02bb04467ed179738a398a7da80bbbe161c16","date":1573660732,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#getTlogFileList(IndexCommit).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#getTlogFileList(IndexCommit).mjava","sourceNew":"  /**\n   * Retrieves the list of tlog files associated to a commit point.\n   * NOTE: The commit <b>MUST</b> be reserved before calling this method\n   */\n  List<Map<String, Object>> getTlogFileList(IndexCommit commit) throws IOException {\n    long maxVersion = this.getMaxVersion(commit);\n    CdcrUpdateLog ulog = (CdcrUpdateLog) core.getUpdateHandler().getUpdateLog();\n    String[] logList = ulog.getLogList(new File(ulog.getLogDir()));\n    List<Map<String, Object>> tlogFiles = new ArrayList<>();\n    for (String fileName : logList) {\n      // filter out tlogs that are older than the current index commit generation, so that the list of tlog files is\n      // in synch with the latest index commit point\n      long startVersion = Math.abs(Long.parseLong(fileName.substring(fileName.lastIndexOf('.') + 1)));\n      if (startVersion < maxVersion) {\n        Map<String, Object> fileMeta = new HashMap<>();\n        fileMeta.put(NAME, fileName);\n        fileMeta.put(SIZE, new File(ulog.getLogDir(), fileName).length());\n        tlogFiles.add(fileMeta);\n      }\n    }\n    return tlogFiles;\n  }\n\n","sourceOld":"  /**\n   * Retrieves the list of tlog files associated to a commit point.\n   */\n  List<Map<String, Object>> getTlogFileList(IndexCommit commit) throws IOException {\n    long maxVersion = this.getMaxVersion(commit);\n    CdcrUpdateLog ulog = (CdcrUpdateLog) core.getUpdateHandler().getUpdateLog();\n    String[] logList = ulog.getLogList(new File(ulog.getLogDir()));\n    List<Map<String, Object>> tlogFiles = new ArrayList<>();\n    for (String fileName : logList) {\n      // filter out tlogs that are older than the current index commit generation, so that the list of tlog files is\n      // in synch with the latest index commit point\n      long startVersion = Math.abs(Long.parseLong(fileName.substring(fileName.lastIndexOf('.') + 1)));\n      if (startVersion < maxVersion) {\n        Map<String, Object> fileMeta = new HashMap<>();\n        fileMeta.put(NAME, fileName);\n        fileMeta.put(SIZE, new File(ulog.getLogDir(), fileName).length());\n        tlogFiles.add(fileMeta);\n      }\n    }\n    return tlogFiles;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1","date":1598647393,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#getTlogFileList(IndexCommit).mjava","sourceNew":null,"sourceOld":"  /**\n   * Retrieves the list of tlog files associated to a commit point.\n   * NOTE: The commit <b>MUST</b> be reserved before calling this method\n   */\n  List<Map<String, Object>> getTlogFileList(IndexCommit commit) throws IOException {\n    long maxVersion = this.getMaxVersion(commit);\n    CdcrUpdateLog ulog = (CdcrUpdateLog) core.getUpdateHandler().getUpdateLog();\n    String[] logList = ulog.getLogList(new File(ulog.getLogDir()));\n    List<Map<String, Object>> tlogFiles = new ArrayList<>();\n    for (String fileName : logList) {\n      // filter out tlogs that are older than the current index commit generation, so that the list of tlog files is\n      // in synch with the latest index commit point\n      long startVersion = Math.abs(Long.parseLong(fileName.substring(fileName.lastIndexOf('.') + 1)));\n      if (startVersion < maxVersion) {\n        Map<String, Object> fileMeta = new HashMap<>();\n        fileMeta.put(NAME, fileName);\n        fileMeta.put(SIZE, new File(ulog.getLogDir(), fileName).length());\n        tlogFiles.add(fileMeta);\n      }\n    }\n    return tlogFiles;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"77cae179618908dcb534af567cdf3019505ada6c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"19f02bb04467ed179738a398a7da80bbbe161c16":["77cae179618908dcb534af567cdf3019505ada6c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1":["19f02bb04467ed179738a398a7da80bbbe161c16"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1"]},"commit2Childs":{"77cae179618908dcb534af567cdf3019505ada6c":["19f02bb04467ed179738a398a7da80bbbe161c16"],"19f02bb04467ed179738a398a7da80bbbe161c16":["23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["77cae179618908dcb534af567cdf3019505ada6c"],"23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}