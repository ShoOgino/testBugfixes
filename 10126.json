{"path":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImportHandler#getParamsMap(SolrParams).mjava","commits":[{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImportHandler#getParamsMap(SolrParams).mjava","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataImportHandler#getParamsMap(SolrParams).mjava","sourceNew":"  private Map<String, Object> getParamsMap(SolrParams params) {\n    Iterator<String> names = params.getParameterNamesIterator();\n    Map<String, Object> result = new HashMap<String, Object>();\n    while (names.hasNext()) {\n      String s = names.next();\n      String[] val = params.getParams(s);\n      if (val == null || val.length < 1)\n        continue;\n      if (val.length == 1)\n        result.put(s, val[0]);\n      else\n        result.put(s, Arrays.asList(val));\n    }\n    return result;\n  }\n\n","sourceOld":"  private Map<String, Object> getParamsMap(SolrParams params) {\n    Iterator<String> names = params.getParameterNamesIterator();\n    Map<String, Object> result = new HashMap<String, Object>();\n    while (names.hasNext()) {\n      String s = names.next();\n      String[] val = params.getParams(s);\n      if (val == null || val.length < 1)\n        continue;\n      if (val.length == 1)\n        result.put(s, val[0]);\n      else\n        result.put(s, Arrays.asList(val));\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImportHandler#getParamsMap(SolrParams).mjava","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataImportHandler#getParamsMap(SolrParams).mjava","sourceNew":"  private Map<String, Object> getParamsMap(SolrParams params) {\n    Iterator<String> names = params.getParameterNamesIterator();\n    Map<String, Object> result = new HashMap<String, Object>();\n    while (names.hasNext()) {\n      String s = names.next();\n      String[] val = params.getParams(s);\n      if (val == null || val.length < 1)\n        continue;\n      if (val.length == 1)\n        result.put(s, val[0]);\n      else\n        result.put(s, Arrays.asList(val));\n    }\n    return result;\n  }\n\n","sourceOld":"  private Map<String, Object> getParamsMap(SolrParams params) {\n    Iterator<String> names = params.getParameterNamesIterator();\n    Map<String, Object> result = new HashMap<String, Object>();\n    while (names.hasNext()) {\n      String s = names.next();\n      String[] val = params.getParams(s);\n      if (val == null || val.length < 1)\n        continue;\n      if (val.length == 1)\n        result.put(s, val[0]);\n      else\n        result.put(s, Arrays.asList(val));\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImportHandler#getParamsMap(SolrParams).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImportHandler#getParamsMap(SolrParams).mjava","sourceNew":"  private Map<String, Object> getParamsMap(SolrParams params) {\n    Iterator<String> names = params.getParameterNamesIterator();\n    Map<String, Object> result = new HashMap<>();\n    while (names.hasNext()) {\n      String s = names.next();\n      String[] val = params.getParams(s);\n      if (val == null || val.length < 1)\n        continue;\n      if (val.length == 1)\n        result.put(s, val[0]);\n      else\n        result.put(s, Arrays.asList(val));\n    }\n    return result;\n  }\n\n","sourceOld":"  private Map<String, Object> getParamsMap(SolrParams params) {\n    Iterator<String> names = params.getParameterNamesIterator();\n    Map<String, Object> result = new HashMap<String, Object>();\n    while (names.hasNext()) {\n      String s = names.next();\n      String[] val = params.getParams(s);\n      if (val == null || val.length < 1)\n        continue;\n      if (val.length == 1)\n        result.put(s, val[0]);\n      else\n        result.put(s, Arrays.asList(val));\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8a1c70b003d9abbd2ce7878bce14b6ec28fb05e4","date":1523635523,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImportHandler#getParamsMap(SolrParams).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImportHandler#getParamsMap(SolrParams).mjava","sourceNew":"  /** The value is converted to a String or {@code List<String>} if multi-valued. */\n  private Map<String, Object> getParamsMap(SolrParams params) {\n    Map<String, Object> result = new HashMap<>();\n    for (Map.Entry<String, String[]> pair : params){\n        String s = pair.getKey();\n        String[] val = pair.getValue();\n        if (val == null || val.length < 1)\n          continue;\n        if (val.length == 1)\n          result.put(s, val[0]);\n        else\n          result.put(s, Arrays.asList(val));\n    }\n    return result;\n  }\n\n","sourceOld":"  private Map<String, Object> getParamsMap(SolrParams params) {\n    Iterator<String> names = params.getParameterNamesIterator();\n    Map<String, Object> result = new HashMap<>();\n    while (names.hasNext()) {\n      String s = names.next();\n      String[] val = params.getParams(s);\n      if (val == null || val.length < 1)\n        continue;\n      if (val.length == 1)\n        result.put(s, val[0]);\n      else\n        result.put(s, Arrays.asList(val));\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1cc17990871fe421019acbdd0ed59c8644b9154c","date":1523636883,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImportHandler#getParamsMap(SolrParams).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImportHandler#getParamsMap(SolrParams).mjava","sourceNew":"  /** The value is converted to a String or {@code List<String>} if multi-valued. */\n  private Map<String, Object> getParamsMap(SolrParams params) {\n    Map<String, Object> result = new HashMap<>();\n    for (Map.Entry<String, String[]> pair : params){\n        String s = pair.getKey();\n        String[] val = pair.getValue();\n        if (val == null || val.length < 1)\n          continue;\n        if (val.length == 1)\n          result.put(s, val[0]);\n        else\n          result.put(s, Arrays.asList(val));\n    }\n    return result;\n  }\n\n","sourceOld":"  private Map<String, Object> getParamsMap(SolrParams params) {\n    Iterator<String> names = params.getParameterNamesIterator();\n    Map<String, Object> result = new HashMap<>();\n    while (names.hasNext()) {\n      String s = names.next();\n      String[] val = params.getParams(s);\n      if (val == null || val.length < 1)\n        continue;\n      if (val.length == 1)\n        result.put(s, val[0]);\n      else\n        result.put(s, Arrays.asList(val));\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b","date":1598712724,"type":4,"author":"Alexandre Rafalovitch","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImportHandler#getParamsMap(SolrParams).mjava","sourceNew":null,"sourceOld":"  /** The value is converted to a String or {@code List<String>} if multi-valued. */\n  private Map<String, Object> getParamsMap(SolrParams params) {\n    Map<String, Object> result = new HashMap<>();\n    for (Map.Entry<String, String[]> pair : params){\n        String s = pair.getKey();\n        String[] val = pair.getValue();\n        if (val == null || val.length < 1)\n          continue;\n        if (val.length == 1)\n          result.put(s, val[0]);\n        else\n          result.put(s, Arrays.asList(val));\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1cc17990871fe421019acbdd0ed59c8644b9154c":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","8a1c70b003d9abbd2ce7878bce14b6ec28fb05e4"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["c26f00b574427b55127e869b935845554afde1fa"],"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["1cc17990871fe421019acbdd0ed59c8644b9154c"],"8a1c70b003d9abbd2ce7878bce14b6ec28fb05e4":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b"]},"commit2Childs":{"1cc17990871fe421019acbdd0ed59c8644b9154c":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["1cc17990871fe421019acbdd0ed59c8644b9154c","8a1c70b003d9abbd2ce7878bce14b6ec28fb05e4"],"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"8a1c70b003d9abbd2ce7878bce14b6ec28fb05e4":["1cc17990871fe421019acbdd0ed59c8644b9154c"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","c26f00b574427b55127e869b935845554afde1fa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}