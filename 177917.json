{"path":"lucene/core/src/test/org/apache/lucene/search/similarities/TestSimilarity2#testOmitTFAndNorms().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/similarities/TestSimilarity2#testOmitTFAndNorms().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/similarities/TestSimilarity2#testOmitTFAndNorms().mjava","sourceNew":"  /** make sure all sims work if TF and norms is omitted */\n  public void testOmitTFAndNorms() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random, dir);\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_UNSTORED);\n    ft.setIndexOptions(IndexOptions.DOCS_ONLY);\n    ft.setOmitNorms(true);\n    ft.freeze();\n    Field f = newField(\"foo\", \"bar\", ft);\n    doc.add(f);\n    iw.addDocument(doc);\n    IndexReader ir = iw.getReader();\n    iw.close();\n    IndexSearcher is = newSearcher(ir);\n    \n    for (Similarity sim : sims) {\n      is.setSimilarity(sim);\n      BooleanQuery query = new BooleanQuery(true);\n      query.add(new TermQuery(new Term(\"foo\", \"bar\")), BooleanClause.Occur.SHOULD);\n      assertEquals(1, is.search(query, 10).totalHits);\n    }\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** make sure all sims work if TF and norms is omitted */\n  public void testOmitTFAndNorms() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random, dir);\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_UNSTORED);\n    ft.setIndexOptions(IndexOptions.DOCS_ONLY);\n    ft.setOmitNorms(true);\n    ft.freeze();\n    Field f = newField(\"foo\", \"bar\", ft);\n    doc.add(f);\n    iw.addDocument(doc);\n    IndexReader ir = iw.getReader();\n    iw.close();\n    IndexSearcher is = newSearcher(ir);\n    \n    for (Similarity sim : sims) {\n      is.setSimilarity(sim);\n      BooleanQuery query = new BooleanQuery(true);\n      query.add(new TermQuery(new Term(\"foo\", \"bar\")), BooleanClause.Occur.SHOULD);\n      assertEquals(1, is.search(query, 10).totalHits);\n    }\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/similarities/TestSimilarity2#testOmitTFAndNorms().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/similarities/TestSimilarity2#testOmitTFAndNorms().mjava","sourceNew":"  /** make sure all sims work if TF and norms is omitted */\n  public void testOmitTFAndNorms() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_UNSTORED);\n    ft.setIndexOptions(IndexOptions.DOCS_ONLY);\n    ft.setOmitNorms(true);\n    ft.freeze();\n    Field f = newField(\"foo\", \"bar\", ft);\n    doc.add(f);\n    iw.addDocument(doc);\n    IndexReader ir = iw.getReader();\n    iw.close();\n    IndexSearcher is = newSearcher(ir);\n    \n    for (Similarity sim : sims) {\n      is.setSimilarity(sim);\n      BooleanQuery query = new BooleanQuery(true);\n      query.add(new TermQuery(new Term(\"foo\", \"bar\")), BooleanClause.Occur.SHOULD);\n      assertEquals(1, is.search(query, 10).totalHits);\n    }\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** make sure all sims work if TF and norms is omitted */\n  public void testOmitTFAndNorms() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random, dir);\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_UNSTORED);\n    ft.setIndexOptions(IndexOptions.DOCS_ONLY);\n    ft.setOmitNorms(true);\n    ft.freeze();\n    Field f = newField(\"foo\", \"bar\", ft);\n    doc.add(f);\n    iw.addDocument(doc);\n    IndexReader ir = iw.getReader();\n    iw.close();\n    IndexSearcher is = newSearcher(ir);\n    \n    for (Similarity sim : sims) {\n      is.setSimilarity(sim);\n      BooleanQuery query = new BooleanQuery(true);\n      query.add(new TermQuery(new Term(\"foo\", \"bar\")), BooleanClause.Occur.SHOULD);\n      assertEquals(1, is.search(query, 10).totalHits);\n    }\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"04f07771a2a7dd3a395700665ed839c3dae2def2","date":1339350139,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/similarities/TestSimilarity2#testOmitTFAndNorms().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/similarities/TestSimilarity2#testOmitTFAndNorms().mjava","sourceNew":"  /** make sure all sims work if TF and norms is omitted */\n  public void testOmitTFAndNorms() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setIndexOptions(IndexOptions.DOCS_ONLY);\n    ft.setOmitNorms(true);\n    ft.freeze();\n    Field f = newField(\"foo\", \"bar\", ft);\n    doc.add(f);\n    iw.addDocument(doc);\n    IndexReader ir = iw.getReader();\n    iw.close();\n    IndexSearcher is = newSearcher(ir);\n    \n    for (Similarity sim : sims) {\n      is.setSimilarity(sim);\n      BooleanQuery query = new BooleanQuery(true);\n      query.add(new TermQuery(new Term(\"foo\", \"bar\")), BooleanClause.Occur.SHOULD);\n      assertEquals(1, is.search(query, 10).totalHits);\n    }\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** make sure all sims work if TF and norms is omitted */\n  public void testOmitTFAndNorms() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_UNSTORED);\n    ft.setIndexOptions(IndexOptions.DOCS_ONLY);\n    ft.setOmitNorms(true);\n    ft.freeze();\n    Field f = newField(\"foo\", \"bar\", ft);\n    doc.add(f);\n    iw.addDocument(doc);\n    IndexReader ir = iw.getReader();\n    iw.close();\n    IndexSearcher is = newSearcher(ir);\n    \n    for (Similarity sim : sims) {\n      is.setSimilarity(sim);\n      BooleanQuery query = new BooleanQuery(true);\n      query.add(new TermQuery(new Term(\"foo\", \"bar\")), BooleanClause.Occur.SHOULD);\n      assertEquals(1, is.search(query, 10).totalHits);\n    }\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":["60e3b31201fd9bb5d73884faa5a38c63ea9239f2"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/similarities/TestSimilarity2#testOmitTFAndNorms().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/similarities/TestSimilarity2#testOmitTFAndNorms().mjava","sourceNew":"  /** make sure all sims work if TF and norms is omitted */\n  public void testOmitTFAndNorms() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setIndexOptions(IndexOptions.DOCS_ONLY);\n    ft.setOmitNorms(true);\n    ft.freeze();\n    Field f = newField(\"foo\", \"bar\", ft);\n    doc.add(f);\n    iw.addDocument(doc);\n    IndexReader ir = iw.getReader();\n    iw.shutdown();\n    IndexSearcher is = newSearcher(ir);\n    \n    for (Similarity sim : sims) {\n      is.setSimilarity(sim);\n      BooleanQuery query = new BooleanQuery(true);\n      query.add(new TermQuery(new Term(\"foo\", \"bar\")), BooleanClause.Occur.SHOULD);\n      assertEquals(1, is.search(query, 10).totalHits);\n    }\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** make sure all sims work if TF and norms is omitted */\n  public void testOmitTFAndNorms() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setIndexOptions(IndexOptions.DOCS_ONLY);\n    ft.setOmitNorms(true);\n    ft.freeze();\n    Field f = newField(\"foo\", \"bar\", ft);\n    doc.add(f);\n    iw.addDocument(doc);\n    IndexReader ir = iw.getReader();\n    iw.close();\n    IndexSearcher is = newSearcher(ir);\n    \n    for (Similarity sim : sims) {\n      is.setSimilarity(sim);\n      BooleanQuery query = new BooleanQuery(true);\n      query.add(new TermQuery(new Term(\"foo\", \"bar\")), BooleanClause.Occur.SHOULD);\n      assertEquals(1, is.search(query, 10).totalHits);\n    }\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/similarities/TestSimilarity2#testOmitTFAndNorms().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/similarities/TestSimilarity2#testOmitTFAndNorms().mjava","sourceNew":"  /** make sure all sims work if TF and norms is omitted */\n  public void testOmitTFAndNorms() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setIndexOptions(IndexOptions.DOCS_ONLY);\n    ft.setOmitNorms(true);\n    ft.freeze();\n    Field f = newField(\"foo\", \"bar\", ft);\n    doc.add(f);\n    iw.addDocument(doc);\n    IndexReader ir = iw.getReader();\n    iw.close();\n    IndexSearcher is = newSearcher(ir);\n    \n    for (Similarity sim : sims) {\n      is.setSimilarity(sim);\n      BooleanQuery query = new BooleanQuery(true);\n      query.add(new TermQuery(new Term(\"foo\", \"bar\")), BooleanClause.Occur.SHOULD);\n      assertEquals(1, is.search(query, 10).totalHits);\n    }\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** make sure all sims work if TF and norms is omitted */\n  public void testOmitTFAndNorms() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setIndexOptions(IndexOptions.DOCS_ONLY);\n    ft.setOmitNorms(true);\n    ft.freeze();\n    Field f = newField(\"foo\", \"bar\", ft);\n    doc.add(f);\n    iw.addDocument(doc);\n    IndexReader ir = iw.getReader();\n    iw.shutdown();\n    IndexSearcher is = newSearcher(ir);\n    \n    for (Similarity sim : sims) {\n      is.setSimilarity(sim);\n      BooleanQuery query = new BooleanQuery(true);\n      query.add(new TermQuery(new Term(\"foo\", \"bar\")), BooleanClause.Occur.SHOULD);\n      assertEquals(1, is.search(query, 10).totalHits);\n    }\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2bb2842e561df4e8e9ad89010605fc86ac265465","date":1414768208,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/similarities/TestSimilarity2#testOmitTFAndNorms().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/similarities/TestSimilarity2#testOmitTFAndNorms().mjava","sourceNew":"  /** make sure all sims work if TF and norms is omitted */\n  public void testOmitTFAndNorms() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setIndexOptions(IndexOptions.DOCS);\n    ft.setOmitNorms(true);\n    ft.freeze();\n    Field f = newField(\"foo\", \"bar\", ft);\n    doc.add(f);\n    iw.addDocument(doc);\n    IndexReader ir = iw.getReader();\n    iw.close();\n    IndexSearcher is = newSearcher(ir);\n    \n    for (Similarity sim : sims) {\n      is.setSimilarity(sim);\n      BooleanQuery query = new BooleanQuery(true);\n      query.add(new TermQuery(new Term(\"foo\", \"bar\")), BooleanClause.Occur.SHOULD);\n      assertEquals(1, is.search(query, 10).totalHits);\n    }\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** make sure all sims work if TF and norms is omitted */\n  public void testOmitTFAndNorms() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setIndexOptions(IndexOptions.DOCS_ONLY);\n    ft.setOmitNorms(true);\n    ft.freeze();\n    Field f = newField(\"foo\", \"bar\", ft);\n    doc.add(f);\n    iw.addDocument(doc);\n    IndexReader ir = iw.getReader();\n    iw.close();\n    IndexSearcher is = newSearcher(ir);\n    \n    for (Similarity sim : sims) {\n      is.setSimilarity(sim);\n      BooleanQuery query = new BooleanQuery(true);\n      query.add(new TermQuery(new Term(\"foo\", \"bar\")), BooleanClause.Occur.SHOULD);\n      assertEquals(1, is.search(query, 10).totalHits);\n    }\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f68d01cf19df971dcdcb05e30247f4ad7ec9747","date":1434611645,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/similarities/TestSimilarity2#testOmitTFAndNorms().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/similarities/TestSimilarity2#testOmitTFAndNorms().mjava","sourceNew":"  /** make sure all sims work if TF and norms is omitted */\n  public void testOmitTFAndNorms() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setIndexOptions(IndexOptions.DOCS);\n    ft.setOmitNorms(true);\n    ft.freeze();\n    Field f = newField(\"foo\", \"bar\", ft);\n    doc.add(f);\n    iw.addDocument(doc);\n    IndexReader ir = iw.getReader();\n    iw.close();\n    IndexSearcher is = newSearcher(ir);\n    \n    for (Similarity sim : sims) {\n      is.setSimilarity(sim);\n      BooleanQuery.Builder query = new BooleanQuery.Builder();\n      query.setDisableCoord(true);\n      query.add(new TermQuery(new Term(\"foo\", \"bar\")), BooleanClause.Occur.SHOULD);\n      assertEquals(1, is.search(query.build(), 10).totalHits);\n    }\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** make sure all sims work if TF and norms is omitted */\n  public void testOmitTFAndNorms() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setIndexOptions(IndexOptions.DOCS);\n    ft.setOmitNorms(true);\n    ft.freeze();\n    Field f = newField(\"foo\", \"bar\", ft);\n    doc.add(f);\n    iw.addDocument(doc);\n    IndexReader ir = iw.getReader();\n    iw.close();\n    IndexSearcher is = newSearcher(ir);\n    \n    for (Similarity sim : sims) {\n      is.setSimilarity(sim);\n      BooleanQuery query = new BooleanQuery(true);\n      query.add(new TermQuery(new Term(\"foo\", \"bar\")), BooleanClause.Occur.SHOULD);\n      assertEquals(1, is.search(query, 10).totalHits);\n    }\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c8a0e442f7b61f811680273b25da95994a724466","date":1467878549,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/similarities/TestSimilarity2#testOmitTFAndNorms().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/similarities/TestSimilarity2#testOmitTFAndNorms().mjava","sourceNew":"  /** make sure all sims work if TF and norms is omitted */\n  public void testOmitTFAndNorms() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setIndexOptions(IndexOptions.DOCS);\n    ft.setOmitNorms(true);\n    ft.freeze();\n    Field f = newField(\"foo\", \"bar\", ft);\n    doc.add(f);\n    iw.addDocument(doc);\n    IndexReader ir = iw.getReader();\n    iw.close();\n    IndexSearcher is = newSearcher(ir);\n    \n    for (Similarity sim : sims) {\n      is.setSimilarity(sim);\n      BooleanQuery.Builder query = new BooleanQuery.Builder();\n      query.add(new TermQuery(new Term(\"foo\", \"bar\")), BooleanClause.Occur.SHOULD);\n      assertEquals(1, is.search(query.build(), 10).totalHits);\n    }\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** make sure all sims work if TF and norms is omitted */\n  public void testOmitTFAndNorms() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setIndexOptions(IndexOptions.DOCS);\n    ft.setOmitNorms(true);\n    ft.freeze();\n    Field f = newField(\"foo\", \"bar\", ft);\n    doc.add(f);\n    iw.addDocument(doc);\n    IndexReader ir = iw.getReader();\n    iw.close();\n    IndexSearcher is = newSearcher(ir);\n    \n    for (Similarity sim : sims) {\n      is.setSimilarity(sim);\n      BooleanQuery.Builder query = new BooleanQuery.Builder();\n      query.setDisableCoord(true);\n      query.add(new TermQuery(new Term(\"foo\", \"bar\")), BooleanClause.Occur.SHOULD);\n      assertEquals(1, is.search(query.build(), 10).totalHits);\n    }\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/similarities/TestSimilarity2#testOmitTFAndNorms().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/similarities/TestSimilarity2#testOmitTFAndNorms().mjava","sourceNew":"  /** make sure all sims work if TF and norms is omitted */\n  public void testOmitTFAndNorms() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setIndexOptions(IndexOptions.DOCS);\n    ft.setOmitNorms(true);\n    ft.freeze();\n    Field f = newField(\"foo\", \"bar\", ft);\n    doc.add(f);\n    iw.addDocument(doc);\n    IndexReader ir = iw.getReader();\n    iw.close();\n    IndexSearcher is = newSearcher(ir);\n    \n    for (Similarity sim : sims) {\n      is.setSimilarity(sim);\n      BooleanQuery.Builder query = new BooleanQuery.Builder();\n      query.add(new TermQuery(new Term(\"foo\", \"bar\")), BooleanClause.Occur.SHOULD);\n      assertEquals(1, is.search(query.build(), 10).totalHits);\n    }\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** make sure all sims work if TF and norms is omitted */\n  public void testOmitTFAndNorms() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setIndexOptions(IndexOptions.DOCS);\n    ft.setOmitNorms(true);\n    ft.freeze();\n    Field f = newField(\"foo\", \"bar\", ft);\n    doc.add(f);\n    iw.addDocument(doc);\n    IndexReader ir = iw.getReader();\n    iw.close();\n    IndexSearcher is = newSearcher(ir);\n    \n    for (Similarity sim : sims) {\n      is.setSimilarity(sim);\n      BooleanQuery.Builder query = new BooleanQuery.Builder();\n      query.setDisableCoord(true);\n      query.add(new TermQuery(new Term(\"foo\", \"bar\")), BooleanClause.Occur.SHOULD);\n      assertEquals(1, is.search(query.build(), 10).totalHits);\n    }\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83788ad129a5154d5c6562c4e8ce3db48793aada","date":1532961485,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/similarities/TestSimilarity2#testOmitTFAndNorms().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/similarities/TestSimilarity2#testOmitTFAndNorms().mjava","sourceNew":"  /** make sure all sims work if TF and norms is omitted */\n  public void testOmitTFAndNorms() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setIndexOptions(IndexOptions.DOCS);\n    ft.setOmitNorms(true);\n    ft.freeze();\n    Field f = newField(\"foo\", \"bar\", ft);\n    doc.add(f);\n    iw.addDocument(doc);\n    IndexReader ir = iw.getReader();\n    iw.close();\n    IndexSearcher is = newSearcher(ir);\n    \n    for (Similarity sim : sims) {\n      is.setSimilarity(sim);\n      BooleanQuery.Builder query = new BooleanQuery.Builder();\n      query.add(new TermQuery(new Term(\"foo\", \"bar\")), BooleanClause.Occur.SHOULD);\n      assertEquals(1, is.search(query.build(), 10).totalHits.value);\n    }\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** make sure all sims work if TF and norms is omitted */\n  public void testOmitTFAndNorms() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setIndexOptions(IndexOptions.DOCS);\n    ft.setOmitNorms(true);\n    ft.freeze();\n    Field f = newField(\"foo\", \"bar\", ft);\n    doc.add(f);\n    iw.addDocument(doc);\n    IndexReader ir = iw.getReader();\n    iw.close();\n    IndexSearcher is = newSearcher(ir);\n    \n    for (Similarity sim : sims) {\n      is.setSimilarity(sim);\n      BooleanQuery.Builder query = new BooleanQuery.Builder();\n      query.add(new TermQuery(new Term(\"foo\", \"bar\")), BooleanClause.Occur.SHOULD);\n      assertEquals(1, is.search(query.build(), 10).totalHits);\n    }\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"04f07771a2a7dd3a395700665ed839c3dae2def2":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["2bb2842e561df4e8e9ad89010605fc86ac265465"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"c8a0e442f7b61f811680273b25da95994a724466":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"2bb2842e561df4e8e9ad89010605fc86ac265465":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["c8a0e442f7b61f811680273b25da95994a724466"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747","c8a0e442f7b61f811680273b25da95994a724466"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["83788ad129a5154d5c6562c4e8ce3db48793aada"]},"commit2Childs":{"04f07771a2a7dd3a395700665ed839c3dae2def2":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["c8a0e442f7b61f811680273b25da95994a724466","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["2bb2842e561df4e8e9ad89010605fc86ac265465"],"2bb2842e561df4e8e9ad89010605fc86ac265465":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"c8a0e442f7b61f811680273b25da95994a724466":["83788ad129a5154d5c6562c4e8ce3db48793aada","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}