{"path":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testGetBestSingleFragmentWithWeights().mjava","commits":[{"id":"043c298cb215f13ba7b9b81d20760704e8f93d66","date":1107566743,"type":1,"author":"Erik Hatcher","isMerge":false,"pathNew":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testGetBestSingleFragmentWithWeights().mjava","pathOld":"sandbox/contributions/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testGetBestSingleFragmentWithWeights().mjava","sourceNew":"\tpublic void testGetBestSingleFragmentWithWeights() throws Exception\n\t{\n\t\tWeightedTerm[]wTerms=new WeightedTerm[2];\n\t\twTerms[0]=new WeightedTerm(10f,\"hello\");\n\t\twTerms[1]=new WeightedTerm(1f,\"kennedy\");\n\t\tHighlighter highlighter =new Highlighter(new QueryScorer(wTerms));\n\t\tTokenStream tokenStream=analyzer.tokenStream(FIELD_NAME,new StringReader(texts[0]));\n\t\thighlighter.setTextFragmenter(new SimpleFragmenter(2));\n\n\t\tString result = highlighter.getBestFragment(tokenStream,texts[0]).trim();\n\t\tassertTrue(\"Failed to find best section using weighted terms. Found: [\"+result+\"]\"\n\t\t\t, \"<B>Hello</B>\".equals(result));\n\n\t\t//readjust weights\n\t\twTerms[1].setWeight(50f);\n\t\ttokenStream=analyzer.tokenStream(FIELD_NAME,new StringReader(texts[0]));\n\t\thighlighter =new Highlighter(new QueryScorer(wTerms));\n\t\thighlighter.setTextFragmenter(new SimpleFragmenter(2));\n\n\t\tresult = highlighter.getBestFragment(tokenStream,texts[0]).trim();\n\t\tassertTrue(\"Failed to find best section using weighted terms. Found: \"+result\n\t\t\t, \"<B>kennedy</B>\".equals(result));\n\t}\n\n","sourceOld":"\tpublic void testGetBestSingleFragmentWithWeights() throws Exception\n\t{\n\t\tWeightedTerm[]wTerms=new WeightedTerm[2];\n\t\twTerms[0]=new WeightedTerm(10f,\"hello\");\n\t\twTerms[1]=new WeightedTerm(1f,\"kennedy\");\n\t\tHighlighter highlighter =new Highlighter(new QueryScorer(wTerms));\n\t\tTokenStream tokenStream=analyzer.tokenStream(FIELD_NAME,new StringReader(texts[0]));\n\t\thighlighter.setTextFragmenter(new SimpleFragmenter(2));\n\n\t\tString result = highlighter.getBestFragment(tokenStream,texts[0]).trim();\n\t\tassertTrue(\"Failed to find best section using weighted terms. Found: [\"+result+\"]\"\n\t\t\t, \"<B>Hello</B>\".equals(result));\n\n\t\t//readjust weights\n\t\twTerms[1].setWeight(50f);\n\t\ttokenStream=analyzer.tokenStream(FIELD_NAME,new StringReader(texts[0]));\n\t\thighlighter =new Highlighter(new QueryScorer(wTerms));\n\t\thighlighter.setTextFragmenter(new SimpleFragmenter(2));\n\n\t\tresult = highlighter.getBestFragment(tokenStream,texts[0]).trim();\n\t\tassertTrue(\"Failed to find best section using weighted terms. Found: \"+result\n\t\t\t, \"<B>kennedy</B>\".equals(result));\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"296b8b38a87feb478921f77834a2302dfe77641c","date":1209506838,"type":3,"author":"Mark Harwood","isMerge":false,"pathNew":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testGetBestSingleFragmentWithWeights().mjava","pathOld":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testGetBestSingleFragmentWithWeights().mjava","sourceNew":"  public void testGetBestSingleFragmentWithWeights() throws Exception {\n\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      public void run() throws Exception {\n        WeightedSpanTerm[] wTerms = new WeightedSpanTerm[2];\n        wTerms[0] = new WeightedSpanTerm(10f, \"hello\");\n\n        List positionSpans = new ArrayList();\n        positionSpans.add(new PositionSpan(0, 0));\n        wTerms[0].addPositionSpans(positionSpans);\n\n        wTerms[1] = new WeightedSpanTerm(1f, \"kennedy\");\n        positionSpans = new ArrayList();\n        positionSpans.add(new PositionSpan(14, 14));\n        wTerms[1].addPositionSpans(positionSpans);\n\n        Highlighter highlighter = getHighlighter(wTerms, HighlighterTest.this);// new\n        // Highlighter(new\n        // QueryScorer(wTerms));\n        TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(texts[0]));\n        highlighter.setTextFragmenter(new SimpleFragmenter(2));\n\n        String result = highlighter.getBestFragment(tokenStream, texts[0]).trim();\n        assertTrue(\"Failed to find best section using weighted terms. Found: [\" + result + \"]\",\n            \"<B>Hello</B>\".equals(result));\n\n        // readjust weights\n        wTerms[1].setWeight(50f);\n        tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(texts[0]));\n        highlighter = getHighlighter(wTerms, HighlighterTest.this);\n        highlighter.setTextFragmenter(new SimpleFragmenter(2));\n\n        result = highlighter.getBestFragment(tokenStream, texts[0]).trim();\n        assertTrue(\"Failed to find best section using weighted terms. Found: \" + result,\n            \"<B>kennedy</B>\".equals(result));\n      }\n\n    };\n\n    helper.start();\n\n  }\n\n","sourceOld":"\tpublic void testGetBestSingleFragmentWithWeights() throws Exception\n\t{\n\t\tWeightedTerm[]wTerms=new WeightedTerm[2];\n\t\twTerms[0]=new WeightedTerm(10f,\"hello\");\n\t\twTerms[1]=new WeightedTerm(1f,\"kennedy\");\n\t\tHighlighter highlighter =new Highlighter(new QueryScorer(wTerms));\n\t\tTokenStream tokenStream=analyzer.tokenStream(FIELD_NAME,new StringReader(texts[0]));\n\t\thighlighter.setTextFragmenter(new SimpleFragmenter(2));\n\n\t\tString result = highlighter.getBestFragment(tokenStream,texts[0]).trim();\n\t\tassertTrue(\"Failed to find best section using weighted terms. Found: [\"+result+\"]\"\n\t\t\t, \"<B>Hello</B>\".equals(result));\n\n\t\t//readjust weights\n\t\twTerms[1].setWeight(50f);\n\t\ttokenStream=analyzer.tokenStream(FIELD_NAME,new StringReader(texts[0]));\n\t\thighlighter =new Highlighter(new QueryScorer(wTerms));\n\t\thighlighter.setTextFragmenter(new SimpleFragmenter(2));\n\n\t\tresult = highlighter.getBestFragment(tokenStream,texts[0]).trim();\n\t\tassertTrue(\"Failed to find best section using weighted terms. Found: \"+result\n\t\t\t, \"<B>kennedy</B>\".equals(result));\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"943c3f9cf96b8df37f4273d66a66182e2a669467","date":1249394171,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testGetBestSingleFragmentWithWeights().mjava","pathOld":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testGetBestSingleFragmentWithWeights().mjava","sourceNew":"  public void testGetBestSingleFragmentWithWeights() throws Exception {\n\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      public void run() throws Exception {\n        WeightedSpanTerm[] wTerms = new WeightedSpanTerm[2];\n        wTerms[0] = new WeightedSpanTerm(10f, \"hello\");\n\n        List positionSpans = new ArrayList();\n        positionSpans.add(new PositionSpan(0, 0));\n        wTerms[0].addPositionSpans(positionSpans);\n\n        wTerms[1] = new WeightedSpanTerm(1f, \"kennedy\");\n        positionSpans = new ArrayList();\n        positionSpans.add(new PositionSpan(14, 14));\n        wTerms[1].addPositionSpans(positionSpans);\n\n        Highlighter highlighter = getHighlighter(wTerms, HighlighterTest.this);// new\n        // Highlighter(new\n        // QueryTermScorer(wTerms));\n        TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(texts[0]));\n        highlighter.setTextFragmenter(new SimpleFragmenter(2));\n\n        String result = highlighter.getBestFragment(tokenStream, texts[0]).trim();\n        assertTrue(\"Failed to find best section using weighted terms. Found: [\" + result + \"]\",\n            \"<B>Hello</B>\".equals(result));\n\n        // readjust weights\n        wTerms[1].setWeight(50f);\n        tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(texts[0]));\n        highlighter = getHighlighter(wTerms, HighlighterTest.this);\n        highlighter.setTextFragmenter(new SimpleFragmenter(2));\n\n        result = highlighter.getBestFragment(tokenStream, texts[0]).trim();\n        assertTrue(\"Failed to find best section using weighted terms. Found: \" + result,\n            \"<B>kennedy</B>\".equals(result));\n      }\n\n    };\n\n    helper.start();\n\n  }\n\n","sourceOld":"  public void testGetBestSingleFragmentWithWeights() throws Exception {\n\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      public void run() throws Exception {\n        WeightedSpanTerm[] wTerms = new WeightedSpanTerm[2];\n        wTerms[0] = new WeightedSpanTerm(10f, \"hello\");\n\n        List positionSpans = new ArrayList();\n        positionSpans.add(new PositionSpan(0, 0));\n        wTerms[0].addPositionSpans(positionSpans);\n\n        wTerms[1] = new WeightedSpanTerm(1f, \"kennedy\");\n        positionSpans = new ArrayList();\n        positionSpans.add(new PositionSpan(14, 14));\n        wTerms[1].addPositionSpans(positionSpans);\n\n        Highlighter highlighter = getHighlighter(wTerms, HighlighterTest.this);// new\n        // Highlighter(new\n        // QueryScorer(wTerms));\n        TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(texts[0]));\n        highlighter.setTextFragmenter(new SimpleFragmenter(2));\n\n        String result = highlighter.getBestFragment(tokenStream, texts[0]).trim();\n        assertTrue(\"Failed to find best section using weighted terms. Found: [\" + result + \"]\",\n            \"<B>Hello</B>\".equals(result));\n\n        // readjust weights\n        wTerms[1].setWeight(50f);\n        tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(texts[0]));\n        highlighter = getHighlighter(wTerms, HighlighterTest.this);\n        highlighter.setTextFragmenter(new SimpleFragmenter(2));\n\n        result = highlighter.getBestFragment(tokenStream, texts[0]).trim();\n        assertTrue(\"Failed to find best section using weighted terms. Found: \" + result,\n            \"<B>kennedy</B>\".equals(result));\n      }\n\n    };\n\n    helper.start();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d57eb7c98c08c03af6e4cd83509df31c81ac16af","date":1257684312,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testGetBestSingleFragmentWithWeights().mjava","pathOld":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testGetBestSingleFragmentWithWeights().mjava","sourceNew":"  public void testGetBestSingleFragmentWithWeights() throws Exception {\n\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        WeightedSpanTerm[] wTerms = new WeightedSpanTerm[2];\n        wTerms[0] = new WeightedSpanTerm(10f, \"hello\");\n\n        List positionSpans = new ArrayList();\n        positionSpans.add(new PositionSpan(0, 0));\n        wTerms[0].addPositionSpans(positionSpans);\n\n        wTerms[1] = new WeightedSpanTerm(1f, \"kennedy\");\n        positionSpans = new ArrayList();\n        positionSpans.add(new PositionSpan(14, 14));\n        wTerms[1].addPositionSpans(positionSpans);\n\n        Highlighter highlighter = getHighlighter(wTerms, HighlighterTest.this);// new\n        // Highlighter(new\n        // QueryTermScorer(wTerms));\n        TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(texts[0]));\n        highlighter.setTextFragmenter(new SimpleFragmenter(2));\n\n        String result = highlighter.getBestFragment(tokenStream, texts[0]).trim();\n        assertTrue(\"Failed to find best section using weighted terms. Found: [\" + result + \"]\",\n            \"<B>Hello</B>\".equals(result));\n\n        // readjust weights\n        wTerms[1].setWeight(50f);\n        tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(texts[0]));\n        highlighter = getHighlighter(wTerms, HighlighterTest.this);\n        highlighter.setTextFragmenter(new SimpleFragmenter(2));\n\n        result = highlighter.getBestFragment(tokenStream, texts[0]).trim();\n        assertTrue(\"Failed to find best section using weighted terms. Found: \" + result,\n            \"<B>kennedy</B>\".equals(result));\n      }\n\n    };\n\n    helper.start();\n\n  }\n\n","sourceOld":"  public void testGetBestSingleFragmentWithWeights() throws Exception {\n\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      public void run() throws Exception {\n        WeightedSpanTerm[] wTerms = new WeightedSpanTerm[2];\n        wTerms[0] = new WeightedSpanTerm(10f, \"hello\");\n\n        List positionSpans = new ArrayList();\n        positionSpans.add(new PositionSpan(0, 0));\n        wTerms[0].addPositionSpans(positionSpans);\n\n        wTerms[1] = new WeightedSpanTerm(1f, \"kennedy\");\n        positionSpans = new ArrayList();\n        positionSpans.add(new PositionSpan(14, 14));\n        wTerms[1].addPositionSpans(positionSpans);\n\n        Highlighter highlighter = getHighlighter(wTerms, HighlighterTest.this);// new\n        // Highlighter(new\n        // QueryTermScorer(wTerms));\n        TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(texts[0]));\n        highlighter.setTextFragmenter(new SimpleFragmenter(2));\n\n        String result = highlighter.getBestFragment(tokenStream, texts[0]).trim();\n        assertTrue(\"Failed to find best section using weighted terms. Found: [\" + result + \"]\",\n            \"<B>Hello</B>\".equals(result));\n\n        // readjust weights\n        wTerms[1].setWeight(50f);\n        tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(texts[0]));\n        highlighter = getHighlighter(wTerms, HighlighterTest.this);\n        highlighter.setTextFragmenter(new SimpleFragmenter(2));\n\n        result = highlighter.getBestFragment(tokenStream, texts[0]).trim();\n        assertTrue(\"Failed to find best section using weighted terms. Found: \" + result,\n            \"<B>kennedy</B>\".equals(result));\n      }\n\n    };\n\n    helper.start();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7848880b3c06f09f0f3ac50d0854b16efb0b815e","date":1260006234,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testGetBestSingleFragmentWithWeights().mjava","pathOld":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testGetBestSingleFragmentWithWeights().mjava","sourceNew":"  public void testGetBestSingleFragmentWithWeights() throws Exception {\n\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        WeightedSpanTerm[] wTerms = new WeightedSpanTerm[2];\n        wTerms[0] = new WeightedSpanTerm(10f, \"hello\");\n\n        List<PositionSpan> positionSpans = new ArrayList<PositionSpan>();\n        positionSpans.add(new PositionSpan(0, 0));\n        wTerms[0].addPositionSpans(positionSpans);\n\n        wTerms[1] = new WeightedSpanTerm(1f, \"kennedy\");\n        positionSpans = new ArrayList<PositionSpan>();\n        positionSpans.add(new PositionSpan(14, 14));\n        wTerms[1].addPositionSpans(positionSpans);\n\n        Highlighter highlighter = getHighlighter(wTerms, HighlighterTest.this);// new\n        // Highlighter(new\n        // QueryTermScorer(wTerms));\n        TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(texts[0]));\n        highlighter.setTextFragmenter(new SimpleFragmenter(2));\n\n        String result = highlighter.getBestFragment(tokenStream, texts[0]).trim();\n        assertTrue(\"Failed to find best section using weighted terms. Found: [\" + result + \"]\",\n            \"<B>Hello</B>\".equals(result));\n\n        // readjust weights\n        wTerms[1].setWeight(50f);\n        tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(texts[0]));\n        highlighter = getHighlighter(wTerms, HighlighterTest.this);\n        highlighter.setTextFragmenter(new SimpleFragmenter(2));\n\n        result = highlighter.getBestFragment(tokenStream, texts[0]).trim();\n        assertTrue(\"Failed to find best section using weighted terms. Found: \" + result,\n            \"<B>kennedy</B>\".equals(result));\n      }\n\n    };\n\n    helper.start();\n\n  }\n\n","sourceOld":"  public void testGetBestSingleFragmentWithWeights() throws Exception {\n\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        WeightedSpanTerm[] wTerms = new WeightedSpanTerm[2];\n        wTerms[0] = new WeightedSpanTerm(10f, \"hello\");\n\n        List positionSpans = new ArrayList();\n        positionSpans.add(new PositionSpan(0, 0));\n        wTerms[0].addPositionSpans(positionSpans);\n\n        wTerms[1] = new WeightedSpanTerm(1f, \"kennedy\");\n        positionSpans = new ArrayList();\n        positionSpans.add(new PositionSpan(14, 14));\n        wTerms[1].addPositionSpans(positionSpans);\n\n        Highlighter highlighter = getHighlighter(wTerms, HighlighterTest.this);// new\n        // Highlighter(new\n        // QueryTermScorer(wTerms));\n        TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(texts[0]));\n        highlighter.setTextFragmenter(new SimpleFragmenter(2));\n\n        String result = highlighter.getBestFragment(tokenStream, texts[0]).trim();\n        assertTrue(\"Failed to find best section using weighted terms. Found: [\" + result + \"]\",\n            \"<B>Hello</B>\".equals(result));\n\n        // readjust weights\n        wTerms[1].setWeight(50f);\n        tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(texts[0]));\n        highlighter = getHighlighter(wTerms, HighlighterTest.this);\n        highlighter.setTextFragmenter(new SimpleFragmenter(2));\n\n        result = highlighter.getBestFragment(tokenStream, texts[0]).trim();\n        assertTrue(\"Failed to find best section using weighted terms. Found: \" + result,\n            \"<B>kennedy</B>\".equals(result));\n      }\n\n    };\n\n    helper.start();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testGetBestSingleFragmentWithWeights().mjava","pathOld":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testGetBestSingleFragmentWithWeights().mjava","sourceNew":"  public void testGetBestSingleFragmentWithWeights() throws Exception {\n\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        WeightedSpanTerm[] wTerms = new WeightedSpanTerm[2];\n        wTerms[0] = new WeightedSpanTerm(10f, \"hello\");\n\n        List<PositionSpan> positionSpans = new ArrayList<PositionSpan>();\n        positionSpans.add(new PositionSpan(0, 0));\n        wTerms[0].addPositionSpans(positionSpans);\n\n        wTerms[1] = new WeightedSpanTerm(1f, \"kennedy\");\n        positionSpans = new ArrayList<PositionSpan>();\n        positionSpans.add(new PositionSpan(14, 14));\n        wTerms[1].addPositionSpans(positionSpans);\n\n        Highlighter highlighter = getHighlighter(wTerms, HighlighterTest.this);// new\n        // Highlighter(new\n        // QueryTermScorer(wTerms));\n        TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(texts[0]));\n        highlighter.setTextFragmenter(new SimpleFragmenter(2));\n\n        String result = highlighter.getBestFragment(tokenStream, texts[0]).trim();\n        assertTrue(\"Failed to find best section using weighted terms. Found: [\" + result + \"]\",\n            \"<B>Hello</B>\".equals(result));\n\n        // readjust weights\n        wTerms[1].setWeight(50f);\n        tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(texts[0]));\n        highlighter = getHighlighter(wTerms, HighlighterTest.this);\n        highlighter.setTextFragmenter(new SimpleFragmenter(2));\n\n        result = highlighter.getBestFragment(tokenStream, texts[0]).trim();\n        assertTrue(\"Failed to find best section using weighted terms. Found: \" + result,\n            \"<B>kennedy</B>\".equals(result));\n      }\n\n    };\n\n    helper.start();\n\n  }\n\n","sourceOld":"  public void testGetBestSingleFragmentWithWeights() throws Exception {\n\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        WeightedSpanTerm[] wTerms = new WeightedSpanTerm[2];\n        wTerms[0] = new WeightedSpanTerm(10f, \"hello\");\n\n        List<PositionSpan> positionSpans = new ArrayList<PositionSpan>();\n        positionSpans.add(new PositionSpan(0, 0));\n        wTerms[0].addPositionSpans(positionSpans);\n\n        wTerms[1] = new WeightedSpanTerm(1f, \"kennedy\");\n        positionSpans = new ArrayList<PositionSpan>();\n        positionSpans.add(new PositionSpan(14, 14));\n        wTerms[1].addPositionSpans(positionSpans);\n\n        Highlighter highlighter = getHighlighter(wTerms, HighlighterTest.this);// new\n        // Highlighter(new\n        // QueryTermScorer(wTerms));\n        TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(texts[0]));\n        highlighter.setTextFragmenter(new SimpleFragmenter(2));\n\n        String result = highlighter.getBestFragment(tokenStream, texts[0]).trim();\n        assertTrue(\"Failed to find best section using weighted terms. Found: [\" + result + \"]\",\n            \"<B>Hello</B>\".equals(result));\n\n        // readjust weights\n        wTerms[1].setWeight(50f);\n        tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(texts[0]));\n        highlighter = getHighlighter(wTerms, HighlighterTest.this);\n        highlighter.setTextFragmenter(new SimpleFragmenter(2));\n\n        result = highlighter.getBestFragment(tokenStream, texts[0]).trim();\n        assertTrue(\"Failed to find best section using weighted terms. Found: \" + result,\n            \"<B>kennedy</B>\".equals(result));\n      }\n\n    };\n\n    helper.start();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"043c298cb215f13ba7b9b81d20760704e8f93d66":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d57eb7c98c08c03af6e4cd83509df31c81ac16af":["943c3f9cf96b8df37f4273d66a66182e2a669467"],"7848880b3c06f09f0f3ac50d0854b16efb0b815e":["d57eb7c98c08c03af6e4cd83509df31c81ac16af"],"943c3f9cf96b8df37f4273d66a66182e2a669467":["296b8b38a87feb478921f77834a2302dfe77641c"],"296b8b38a87feb478921f77834a2302dfe77641c":["043c298cb215f13ba7b9b81d20760704e8f93d66"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["7848880b3c06f09f0f3ac50d0854b16efb0b815e"]},"commit2Childs":{"043c298cb215f13ba7b9b81d20760704e8f93d66":["296b8b38a87feb478921f77834a2302dfe77641c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["043c298cb215f13ba7b9b81d20760704e8f93d66"],"d57eb7c98c08c03af6e4cd83509df31c81ac16af":["7848880b3c06f09f0f3ac50d0854b16efb0b815e"],"943c3f9cf96b8df37f4273d66a66182e2a669467":["d57eb7c98c08c03af6e4cd83509df31c81ac16af"],"7848880b3c06f09f0f3ac50d0854b16efb0b815e":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"296b8b38a87feb478921f77834a2302dfe77641c":["943c3f9cf96b8df37f4273d66a66182e2a669467"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}