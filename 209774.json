{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#connect(long,TimeUnit).mjava","commits":[{"id":"7875fce026a0a335830cfc75abc3eb009eff9a73","date":1425897108,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#connect(long,TimeUnit).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Connect to a cluster.  If the cluster is not ready, retry connection up to a given timeout.\n   * @param duration the timeout\n   * @param timeUnit the units of the timeout\n   * @throws TimeoutException if the cluster is not ready after the timeout\n   * @throws InterruptedException if the wait is interrupted\n   */\n  public void connect(long duration, TimeUnit timeUnit) throws TimeoutException, InterruptedException {\n    log.info(\"Waiting for {} {} for cluster at {} to be ready\", duration, timeUnit, zkHost);\n    long timeout = System.nanoTime() + timeUnit.toNanos(duration);\n    while (System.nanoTime() < timeout) {\n      try {\n        connect();\n        log.info(\"Cluster at {} ready\", zkHost);\n        return;\n      }\n      catch (RuntimeException e) {\n        // not ready yet, then...\n      }\n      TimeUnit.MILLISECONDS.sleep(250);\n    }\n    throw new TimeoutException(\"Timed out waiting for cluster\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#connect(long,TimeUnit).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Connect to a cluster.  If the cluster is not ready, retry connection up to a given timeout.\n   * @param duration the timeout\n   * @param timeUnit the units of the timeout\n   * @throws TimeoutException if the cluster is not ready after the timeout\n   * @throws InterruptedException if the wait is interrupted\n   */\n  public void connect(long duration, TimeUnit timeUnit) throws TimeoutException, InterruptedException {\n    log.info(\"Waiting for {} {} for cluster at {} to be ready\", duration, timeUnit, zkHost);\n    long timeout = System.nanoTime() + timeUnit.toNanos(duration);\n    while (System.nanoTime() < timeout) {\n      try {\n        connect();\n        log.info(\"Cluster at {} ready\", zkHost);\n        return;\n      }\n      catch (RuntimeException e) {\n        // not ready yet, then...\n      }\n      TimeUnit.MILLISECONDS.sleep(250);\n    }\n    throw new TimeoutException(\"Timed out waiting for cluster\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3eaeb36333664e8cb92108ef03f68a7b90beb759","date":1480015298,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#connect(long,TimeUnit).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#connect(long,TimeUnit).mjava","sourceNew":"  /**\n   * Connect to a cluster.  If the cluster is not ready, retry connection up to a given timeout.\n   * @param duration the timeout\n   * @param timeUnit the units of the timeout\n   * @throws TimeoutException if the cluster is not ready after the timeout\n   * @throws InterruptedException if the wait is interrupted\n   */\n  public void connect(long duration, TimeUnit timeUnit) throws TimeoutException, InterruptedException {\n    log.info(\"Waiting for {} {} for cluster at {} to be ready\", duration, timeUnit, stateProvider);\n    long timeout = System.nanoTime() + timeUnit.toNanos(duration);\n    while (System.nanoTime() < timeout) {\n      try {\n        connect();\n        log.info(\"Cluster at {} ready\", stateProvider);\n        return;\n      }\n      catch (RuntimeException e) {\n        // not ready yet, then...\n      }\n      TimeUnit.MILLISECONDS.sleep(250);\n    }\n    throw new TimeoutException(\"Timed out waiting for cluster\");\n  }\n\n","sourceOld":"  /**\n   * Connect to a cluster.  If the cluster is not ready, retry connection up to a given timeout.\n   * @param duration the timeout\n   * @param timeUnit the units of the timeout\n   * @throws TimeoutException if the cluster is not ready after the timeout\n   * @throws InterruptedException if the wait is interrupted\n   */\n  public void connect(long duration, TimeUnit timeUnit) throws TimeoutException, InterruptedException {\n    log.info(\"Waiting for {} {} for cluster at {} to be ready\", duration, timeUnit, zkHost);\n    long timeout = System.nanoTime() + timeUnit.toNanos(duration);\n    while (System.nanoTime() < timeout) {\n      try {\n        connect();\n        log.info(\"Cluster at {} ready\", zkHost);\n        return;\n      }\n      catch (RuntimeException e) {\n        // not ready yet, then...\n      }\n      TimeUnit.MILLISECONDS.sleep(250);\n    }\n    throw new TimeoutException(\"Timed out waiting for cluster\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"727bb765ff2542275f6d31f67be18d7104bae148","date":1480353976,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#connect(long,TimeUnit).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#connect(long,TimeUnit).mjava","sourceNew":"  /**\n   * Connect to a cluster.  If the cluster is not ready, retry connection up to a given timeout.\n   * @param duration the timeout\n   * @param timeUnit the units of the timeout\n   * @throws TimeoutException if the cluster is not ready after the timeout\n   * @throws InterruptedException if the wait is interrupted\n   */\n  public void connect(long duration, TimeUnit timeUnit) throws TimeoutException, InterruptedException {\n    log.info(\"Waiting for {} {} for cluster at {} to be ready\", duration, timeUnit, stateProvider);\n    long timeout = System.nanoTime() + timeUnit.toNanos(duration);\n    while (System.nanoTime() < timeout) {\n      try {\n        connect();\n        log.info(\"Cluster at {} ready\", stateProvider);\n        return;\n      }\n      catch (RuntimeException e) {\n        // not ready yet, then...\n      }\n      TimeUnit.MILLISECONDS.sleep(250);\n    }\n    throw new TimeoutException(\"Timed out waiting for cluster\");\n  }\n\n","sourceOld":"  /**\n   * Connect to a cluster.  If the cluster is not ready, retry connection up to a given timeout.\n   * @param duration the timeout\n   * @param timeUnit the units of the timeout\n   * @throws TimeoutException if the cluster is not ready after the timeout\n   * @throws InterruptedException if the wait is interrupted\n   */\n  public void connect(long duration, TimeUnit timeUnit) throws TimeoutException, InterruptedException {\n    log.info(\"Waiting for {} {} for cluster at {} to be ready\", duration, timeUnit, zkHost);\n    long timeout = System.nanoTime() + timeUnit.toNanos(duration);\n    while (System.nanoTime() < timeout) {\n      try {\n        connect();\n        log.info(\"Cluster at {} ready\", zkHost);\n        return;\n      }\n      catch (RuntimeException e) {\n        // not ready yet, then...\n      }\n      TimeUnit.MILLISECONDS.sleep(250);\n    }\n    throw new TimeoutException(\"Timed out waiting for cluster\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0544142c22eb88b6d8b3817f2e1190156aa4f9af","date":1551692505,"type":5,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/BaseCloudSolrClient#connect(long,TimeUnit).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#connect(long,TimeUnit).mjava","sourceNew":"  /**\n   * Connect to a cluster.  If the cluster is not ready, retry connection up to a given timeout.\n   * @param duration the timeout\n   * @param timeUnit the units of the timeout\n   * @throws TimeoutException if the cluster is not ready after the timeout\n   * @throws InterruptedException if the wait is interrupted\n   */\n  public void connect(long duration, TimeUnit timeUnit) throws TimeoutException, InterruptedException {\n    log.info(\"Waiting for {} {} for cluster at {} to be ready\", duration, timeUnit, getClusterStateProvider());\n    long timeout = System.nanoTime() + timeUnit.toNanos(duration);\n    while (System.nanoTime() < timeout) {\n      try {\n        connect();\n        log.info(\"Cluster at {} ready\", getClusterStateProvider());\n        return;\n      }\n      catch (RuntimeException e) {\n        // not ready yet, then...\n      }\n      TimeUnit.MILLISECONDS.sleep(250);\n    }\n    throw new TimeoutException(\"Timed out waiting for cluster\");\n  }\n\n","sourceOld":"  /**\n   * Connect to a cluster.  If the cluster is not ready, retry connection up to a given timeout.\n   * @param duration the timeout\n   * @param timeUnit the units of the timeout\n   * @throws TimeoutException if the cluster is not ready after the timeout\n   * @throws InterruptedException if the wait is interrupted\n   */\n  public void connect(long duration, TimeUnit timeUnit) throws TimeoutException, InterruptedException {\n    log.info(\"Waiting for {} {} for cluster at {} to be ready\", duration, timeUnit, stateProvider);\n    long timeout = System.nanoTime() + timeUnit.toNanos(duration);\n    while (System.nanoTime() < timeout) {\n      try {\n        connect();\n        log.info(\"Cluster at {} ready\", stateProvider);\n        return;\n      }\n      catch (RuntimeException e) {\n        // not ready yet, then...\n      }\n      TimeUnit.MILLISECONDS.sleep(250);\n    }\n    throw new TimeoutException(\"Timed out waiting for cluster\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7875fce026a0a335830cfc75abc3eb009eff9a73"],"0544142c22eb88b6d8b3817f2e1190156aa4f9af":["3eaeb36333664e8cb92108ef03f68a7b90beb759"],"727bb765ff2542275f6d31f67be18d7104bae148":["7875fce026a0a335830cfc75abc3eb009eff9a73","3eaeb36333664e8cb92108ef03f68a7b90beb759"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3eaeb36333664e8cb92108ef03f68a7b90beb759":["7875fce026a0a335830cfc75abc3eb009eff9a73"],"7875fce026a0a335830cfc75abc3eb009eff9a73":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0544142c22eb88b6d8b3817f2e1190156aa4f9af"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"0544142c22eb88b6d8b3817f2e1190156aa4f9af":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"727bb765ff2542275f6d31f67be18d7104bae148":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","7875fce026a0a335830cfc75abc3eb009eff9a73"],"3eaeb36333664e8cb92108ef03f68a7b90beb759":["0544142c22eb88b6d8b3817f2e1190156aa4f9af","727bb765ff2542275f6d31f67be18d7104bae148"],"7875fce026a0a335830cfc75abc3eb009eff9a73":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","727bb765ff2542275f6d31f67be18d7104bae148","3eaeb36333664e8cb92108ef03f68a7b90beb759"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","727bb765ff2542275f6d31f67be18d7104bae148","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}