{"path":"lucene/core/src/test/org/apache/lucene/codecs/perfield/TestPerFieldPostingsFormat2#testStressPerFieldCodec().mjava","commits":[{"id":"339cf89fb32d53dacb17aa56f2b6bf87eb4a3a67","date":1348934182,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/perfield/TestPerFieldPostingsFormat2#testStressPerFieldCodec().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/perfield/TestPerFieldPostingsFormat#testStressPerFieldCodec().mjava","sourceNew":"  /*\n   * Test per field codec support - adding fields with random codecs\n   */\n  @Test\n  public void testStressPerFieldCodec() throws IOException {\n    Directory dir = newDirectory(random());\n    final int docsPerRound = 97;\n    int numRounds = atLeast(1);\n    for (int i = 0; i < numRounds; i++) {\n      int num = _TestUtil.nextInt(random(), 30, 60);\n      IndexWriterConfig config = newIndexWriterConfig(random(),\n          TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n      config.setOpenMode(OpenMode.CREATE_OR_APPEND);\n      IndexWriter writer = newWriter(dir, config);\n      for (int j = 0; j < docsPerRound; j++) {\n        final Document doc = new Document();\n        for (int k = 0; k < num; k++) {\n          FieldType customType = new FieldType(TextField.TYPE_NOT_STORED);\n          customType.setTokenized(random().nextBoolean());\n          customType.setOmitNorms(random().nextBoolean());\n          Field field = newField(\"\" + k, _TestUtil\n              .randomRealisticUnicodeString(random(), 128), customType);\n          doc.add(field);\n        }\n        writer.addDocument(doc);\n      }\n      if (random().nextBoolean()) {\n        writer.forceMerge(1);\n      }\n      writer.commit();\n      assertEquals((i + 1) * docsPerRound, writer.maxDoc());\n      writer.close();\n    }\n    dir.close();\n  }\n\n","sourceOld":"  /*\n   * Test per field codec support - adding fields with random codecs\n   */\n  @Test\n  public void testStressPerFieldCodec() throws IOException {\n    Directory dir = newDirectory(random());\n    final int docsPerRound = 97;\n    int numRounds = atLeast(1);\n    for (int i = 0; i < numRounds; i++) {\n      int num = _TestUtil.nextInt(random(), 30, 60);\n      IndexWriterConfig config = newIndexWriterConfig(random(),\n          TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n      config.setOpenMode(OpenMode.CREATE_OR_APPEND);\n      IndexWriter writer = newWriter(dir, config);\n      for (int j = 0; j < docsPerRound; j++) {\n        final Document doc = new Document();\n        for (int k = 0; k < num; k++) {\n          FieldType customType = new FieldType(TextField.TYPE_NOT_STORED);\n          customType.setTokenized(random().nextBoolean());\n          customType.setOmitNorms(random().nextBoolean());\n          Field field = newField(\"\" + k, _TestUtil\n              .randomRealisticUnicodeString(random(), 128), customType);\n          doc.add(field);\n        }\n        writer.addDocument(doc);\n      }\n      if (random().nextBoolean()) {\n        writer.forceMerge(1);\n      }\n      writer.commit();\n      assertEquals((i + 1) * docsPerRound, writer.maxDoc());\n      writer.close();\n    }\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/perfield/TestPerFieldPostingsFormat2#testStressPerFieldCodec().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/perfield/TestPerFieldPostingsFormat2#testStressPerFieldCodec().mjava","sourceNew":"  /*\n   * Test per field codec support - adding fields with random codecs\n   */\n  @Test\n  public void testStressPerFieldCodec() throws IOException {\n    Directory dir = newDirectory(random());\n    final int docsPerRound = 97;\n    int numRounds = atLeast(1);\n    for (int i = 0; i < numRounds; i++) {\n      int num = TestUtil.nextInt(random(), 30, 60);\n      IndexWriterConfig config = newIndexWriterConfig(random(),\n          TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n      config.setOpenMode(OpenMode.CREATE_OR_APPEND);\n      IndexWriter writer = newWriter(dir, config);\n      for (int j = 0; j < docsPerRound; j++) {\n        final Document doc = new Document();\n        for (int k = 0; k < num; k++) {\n          FieldType customType = new FieldType(TextField.TYPE_NOT_STORED);\n          customType.setTokenized(random().nextBoolean());\n          customType.setOmitNorms(random().nextBoolean());\n          Field field = newField(\"\" + k, TestUtil\n              .randomRealisticUnicodeString(random(), 128), customType);\n          doc.add(field);\n        }\n        writer.addDocument(doc);\n      }\n      if (random().nextBoolean()) {\n        writer.forceMerge(1);\n      }\n      writer.commit();\n      assertEquals((i + 1) * docsPerRound, writer.maxDoc());\n      writer.close();\n    }\n    dir.close();\n  }\n\n","sourceOld":"  /*\n   * Test per field codec support - adding fields with random codecs\n   */\n  @Test\n  public void testStressPerFieldCodec() throws IOException {\n    Directory dir = newDirectory(random());\n    final int docsPerRound = 97;\n    int numRounds = atLeast(1);\n    for (int i = 0; i < numRounds; i++) {\n      int num = _TestUtil.nextInt(random(), 30, 60);\n      IndexWriterConfig config = newIndexWriterConfig(random(),\n          TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n      config.setOpenMode(OpenMode.CREATE_OR_APPEND);\n      IndexWriter writer = newWriter(dir, config);\n      for (int j = 0; j < docsPerRound; j++) {\n        final Document doc = new Document();\n        for (int k = 0; k < num; k++) {\n          FieldType customType = new FieldType(TextField.TYPE_NOT_STORED);\n          customType.setTokenized(random().nextBoolean());\n          customType.setOmitNorms(random().nextBoolean());\n          Field field = newField(\"\" + k, _TestUtil\n              .randomRealisticUnicodeString(random(), 128), customType);\n          doc.add(field);\n        }\n        writer.addDocument(doc);\n      }\n      if (random().nextBoolean()) {\n        writer.forceMerge(1);\n      }\n      writer.commit();\n      assertEquals((i + 1) * docsPerRound, writer.maxDoc());\n      writer.close();\n    }\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/perfield/TestPerFieldPostingsFormat2#testStressPerFieldCodec().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/perfield/TestPerFieldPostingsFormat2#testStressPerFieldCodec().mjava","sourceNew":"  /*\n   * Test per field codec support - adding fields with random codecs\n   */\n  @Test\n  public void testStressPerFieldCodec() throws IOException {\n    Directory dir = newDirectory(random());\n    final int docsPerRound = 97;\n    int numRounds = atLeast(1);\n    for (int i = 0; i < numRounds; i++) {\n      int num = TestUtil.nextInt(random(), 30, 60);\n      IndexWriterConfig config = newIndexWriterConfig(random(),\n          TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n      config.setOpenMode(OpenMode.CREATE_OR_APPEND);\n      IndexWriter writer = newWriter(dir, config);\n      for (int j = 0; j < docsPerRound; j++) {\n        final Document doc = new Document();\n        for (int k = 0; k < num; k++) {\n          FieldType customType = new FieldType(TextField.TYPE_NOT_STORED);\n          customType.setTokenized(random().nextBoolean());\n          customType.setOmitNorms(random().nextBoolean());\n          Field field = newField(\"\" + k, TestUtil\n              .randomRealisticUnicodeString(random(), 128), customType);\n          doc.add(field);\n        }\n        writer.addDocument(doc);\n      }\n      if (random().nextBoolean()) {\n        writer.forceMerge(1);\n      }\n      writer.commit();\n      assertEquals((i + 1) * docsPerRound, writer.maxDoc());\n      writer.shutdown();\n    }\n    dir.close();\n  }\n\n","sourceOld":"  /*\n   * Test per field codec support - adding fields with random codecs\n   */\n  @Test\n  public void testStressPerFieldCodec() throws IOException {\n    Directory dir = newDirectory(random());\n    final int docsPerRound = 97;\n    int numRounds = atLeast(1);\n    for (int i = 0; i < numRounds; i++) {\n      int num = TestUtil.nextInt(random(), 30, 60);\n      IndexWriterConfig config = newIndexWriterConfig(random(),\n          TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n      config.setOpenMode(OpenMode.CREATE_OR_APPEND);\n      IndexWriter writer = newWriter(dir, config);\n      for (int j = 0; j < docsPerRound; j++) {\n        final Document doc = new Document();\n        for (int k = 0; k < num; k++) {\n          FieldType customType = new FieldType(TextField.TYPE_NOT_STORED);\n          customType.setTokenized(random().nextBoolean());\n          customType.setOmitNorms(random().nextBoolean());\n          Field field = newField(\"\" + k, TestUtil\n              .randomRealisticUnicodeString(random(), 128), customType);\n          doc.add(field);\n        }\n        writer.addDocument(doc);\n      }\n      if (random().nextBoolean()) {\n        writer.forceMerge(1);\n      }\n      writer.commit();\n      assertEquals((i + 1) * docsPerRound, writer.maxDoc());\n      writer.close();\n    }\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/perfield/TestPerFieldPostingsFormat2#testStressPerFieldCodec().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/perfield/TestPerFieldPostingsFormat2#testStressPerFieldCodec().mjava","sourceNew":"  /*\n   * Test per field codec support - adding fields with random codecs\n   */\n  @Test\n  public void testStressPerFieldCodec() throws IOException {\n    Directory dir = newDirectory(random());\n    final int docsPerRound = 97;\n    int numRounds = atLeast(1);\n    for (int i = 0; i < numRounds; i++) {\n      int num = TestUtil.nextInt(random(), 30, 60);\n      IndexWriterConfig config = newIndexWriterConfig(random(),\n          new MockAnalyzer(random()));\n      config.setOpenMode(OpenMode.CREATE_OR_APPEND);\n      IndexWriter writer = newWriter(dir, config);\n      for (int j = 0; j < docsPerRound; j++) {\n        final Document doc = new Document();\n        for (int k = 0; k < num; k++) {\n          FieldType customType = new FieldType(TextField.TYPE_NOT_STORED);\n          customType.setTokenized(random().nextBoolean());\n          customType.setOmitNorms(random().nextBoolean());\n          Field field = newField(\"\" + k, TestUtil\n              .randomRealisticUnicodeString(random(), 128), customType);\n          doc.add(field);\n        }\n        writer.addDocument(doc);\n      }\n      if (random().nextBoolean()) {\n        writer.forceMerge(1);\n      }\n      writer.commit();\n      assertEquals((i + 1) * docsPerRound, writer.maxDoc());\n      writer.close();\n    }\n    dir.close();\n  }\n\n","sourceOld":"  /*\n   * Test per field codec support - adding fields with random codecs\n   */\n  @Test\n  public void testStressPerFieldCodec() throws IOException {\n    Directory dir = newDirectory(random());\n    final int docsPerRound = 97;\n    int numRounds = atLeast(1);\n    for (int i = 0; i < numRounds; i++) {\n      int num = TestUtil.nextInt(random(), 30, 60);\n      IndexWriterConfig config = newIndexWriterConfig(random(),\n          TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n      config.setOpenMode(OpenMode.CREATE_OR_APPEND);\n      IndexWriter writer = newWriter(dir, config);\n      for (int j = 0; j < docsPerRound; j++) {\n        final Document doc = new Document();\n        for (int k = 0; k < num; k++) {\n          FieldType customType = new FieldType(TextField.TYPE_NOT_STORED);\n          customType.setTokenized(random().nextBoolean());\n          customType.setOmitNorms(random().nextBoolean());\n          Field field = newField(\"\" + k, TestUtil\n              .randomRealisticUnicodeString(random(), 128), customType);\n          doc.add(field);\n        }\n        writer.addDocument(doc);\n      }\n      if (random().nextBoolean()) {\n        writer.forceMerge(1);\n      }\n      writer.commit();\n      assertEquals((i + 1) * docsPerRound, writer.maxDoc());\n      writer.shutdown();\n    }\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"feb4029567b43f074ed7b6eb8fb126d355075dfd","date":1544812585,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/perfield/TestPerFieldPostingsFormat2#testStressPerFieldCodec().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/perfield/TestPerFieldPostingsFormat2#testStressPerFieldCodec().mjava","sourceNew":"  /*\n   * Test per field codec support - adding fields with random codecs\n   */\n  @Test\n  public void testStressPerFieldCodec() throws IOException {\n    Directory dir = newDirectory(random());\n    final int docsPerRound = 97;\n    int numRounds = atLeast(1);\n    for (int i = 0; i < numRounds; i++) {\n      int num = TestUtil.nextInt(random(), 30, 60);\n      IndexWriterConfig config = newIndexWriterConfig(random(),\n          new MockAnalyzer(random()));\n      config.setOpenMode(OpenMode.CREATE_OR_APPEND);\n      IndexWriter writer = newWriter(dir, config);\n      for (int j = 0; j < docsPerRound; j++) {\n        final Document doc = new Document();\n        for (int k = 0; k < num; k++) {\n          FieldType customType = new FieldType(TextField.TYPE_NOT_STORED);\n          customType.setTokenized(random().nextBoolean());\n          customType.setOmitNorms(random().nextBoolean());\n          Field field = newField(\"\" + k, TestUtil\n              .randomRealisticUnicodeString(random(), 128), customType);\n          doc.add(field);\n        }\n        writer.addDocument(doc);\n      }\n      if (random().nextBoolean()) {\n        writer.forceMerge(1);\n      }\n      writer.commit();\n      assertEquals((i + 1) * docsPerRound, writer.getDocStats().maxDoc);\n      writer.close();\n    }\n    dir.close();\n  }\n\n","sourceOld":"  /*\n   * Test per field codec support - adding fields with random codecs\n   */\n  @Test\n  public void testStressPerFieldCodec() throws IOException {\n    Directory dir = newDirectory(random());\n    final int docsPerRound = 97;\n    int numRounds = atLeast(1);\n    for (int i = 0; i < numRounds; i++) {\n      int num = TestUtil.nextInt(random(), 30, 60);\n      IndexWriterConfig config = newIndexWriterConfig(random(),\n          new MockAnalyzer(random()));\n      config.setOpenMode(OpenMode.CREATE_OR_APPEND);\n      IndexWriter writer = newWriter(dir, config);\n      for (int j = 0; j < docsPerRound; j++) {\n        final Document doc = new Document();\n        for (int k = 0; k < num; k++) {\n          FieldType customType = new FieldType(TextField.TYPE_NOT_STORED);\n          customType.setTokenized(random().nextBoolean());\n          customType.setOmitNorms(random().nextBoolean());\n          Field field = newField(\"\" + k, TestUtil\n              .randomRealisticUnicodeString(random(), 128), customType);\n          doc.add(field);\n        }\n        writer.addDocument(doc);\n      }\n      if (random().nextBoolean()) {\n        writer.forceMerge(1);\n      }\n      writer.commit();\n      assertEquals((i + 1) * docsPerRound, writer.maxDoc());\n      writer.close();\n    }\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"feb4029567b43f074ed7b6eb8fb126d355075dfd":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"6613659748fe4411a7dcf85266e55db1f95f7315":["339cf89fb32d53dacb17aa56f2b6bf87eb4a3a67"],"339cf89fb32d53dacb17aa56f2b6bf87eb4a3a67":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["6613659748fe4411a7dcf85266e55db1f95f7315"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["feb4029567b43f074ed7b6eb8fb126d355075dfd"]},"commit2Childs":{"feb4029567b43f074ed7b6eb8fb126d355075dfd":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6613659748fe4411a7dcf85266e55db1f95f7315":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"339cf89fb32d53dacb17aa56f2b6bf87eb4a3a67":["6613659748fe4411a7dcf85266e55db1f95f7315"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["339cf89fb32d53dacb17aa56f2b6bf87eb4a3a67"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["feb4029567b43f074ed7b6eb8fb126d355075dfd"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}