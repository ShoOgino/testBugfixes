{"path":"lucene/backwards/src/test/org/apache/lucene/search/TestNumericRangeQuery64#testRandomTrieAndClassicRangeQuery(int).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/search/TestNumericRangeQuery64#testRandomTrieAndClassicRangeQuery(int).mjava","pathOld":"backwards/src/test/org/apache/lucene/search/TestNumericRangeQuery64#testRandomTrieAndClassicRangeQuery(int).mjava","sourceNew":"  private void testRandomTrieAndClassicRangeQuery(int precisionStep) throws Exception {\n    final Random rnd=newRandom();\n    String field=\"field\"+precisionStep;\n    int termCountT=0,termCountC=0;\n    for (int i=0; i<10; i++) {\n      long lower=(long)(rnd.nextDouble()*noDocs*distance)+startOffset;\n      long upper=(long)(rnd.nextDouble()*noDocs*distance)+startOffset;\n      if (lower>upper) {\n        long a=lower; lower=upper; upper=a;\n      }\n      // test inclusive range\n      NumericRangeQuery<Long> tq=NumericRangeQuery.newLongRange(field, precisionStep, lower, upper, true, true);\n      TermRangeQuery cq=new TermRangeQuery(field, NumericUtils.longToPrefixCoded(lower), NumericUtils.longToPrefixCoded(upper), true, true);\n      TopDocs tTopDocs = searcher.search(tq, 1);\n      TopDocs cTopDocs = searcher.search(cq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", cTopDocs.totalHits, tTopDocs.totalHits );\n      termCountT += tq.getTotalNumberOfTerms();\n      termCountC += cq.getTotalNumberOfTerms();\n      // test exclusive range\n      tq=NumericRangeQuery.newLongRange(field, precisionStep, lower, upper, false, false);\n      cq=new TermRangeQuery(field, NumericUtils.longToPrefixCoded(lower), NumericUtils.longToPrefixCoded(upper), false, false);\n      tTopDocs = searcher.search(tq, 1);\n      cTopDocs = searcher.search(cq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", cTopDocs.totalHits, tTopDocs.totalHits );\n      termCountT += tq.getTotalNumberOfTerms();\n      termCountC += cq.getTotalNumberOfTerms();\n      // test left exclusive range\n      tq=NumericRangeQuery.newLongRange(field, precisionStep, lower, upper, false, true);\n      cq=new TermRangeQuery(field, NumericUtils.longToPrefixCoded(lower), NumericUtils.longToPrefixCoded(upper), false, true);\n      tTopDocs = searcher.search(tq, 1);\n      cTopDocs = searcher.search(cq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", cTopDocs.totalHits, tTopDocs.totalHits );\n      termCountT += tq.getTotalNumberOfTerms();\n      termCountC += cq.getTotalNumberOfTerms();\n      // test right exclusive range\n      tq=NumericRangeQuery.newLongRange(field, precisionStep, lower, upper, true, false);\n      cq=new TermRangeQuery(field, NumericUtils.longToPrefixCoded(lower), NumericUtils.longToPrefixCoded(upper), true, false);\n      tTopDocs = searcher.search(tq, 1);\n      cTopDocs = searcher.search(cq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", cTopDocs.totalHits, tTopDocs.totalHits );\n      termCountT += tq.getTotalNumberOfTerms();\n      termCountC += cq.getTotalNumberOfTerms();\n    }\n    if (precisionStep == Integer.MAX_VALUE) {\n      assertEquals(\"Total number of terms should be equal for unlimited precStep\", termCountT, termCountC);\n    } else {\n      System.out.println(\"Average number of terms during random search on '\" + field + \"':\");\n      System.out.println(\" Trie query: \" + (((double)termCountT)/(10*4)));\n      System.out.println(\" Classical query: \" + (((double)termCountC)/(10*4)));\n    }\n  }\n\n","sourceOld":"  private void testRandomTrieAndClassicRangeQuery(int precisionStep) throws Exception {\n    final Random rnd=newRandom();\n    String field=\"field\"+precisionStep;\n    int termCountT=0,termCountC=0;\n    for (int i=0; i<10; i++) {\n      long lower=(long)(rnd.nextDouble()*noDocs*distance)+startOffset;\n      long upper=(long)(rnd.nextDouble()*noDocs*distance)+startOffset;\n      if (lower>upper) {\n        long a=lower; lower=upper; upper=a;\n      }\n      // test inclusive range\n      NumericRangeQuery<Long> tq=NumericRangeQuery.newLongRange(field, precisionStep, lower, upper, true, true);\n      TermRangeQuery cq=new TermRangeQuery(field, NumericUtils.longToPrefixCoded(lower), NumericUtils.longToPrefixCoded(upper), true, true);\n      TopDocs tTopDocs = searcher.search(tq, 1);\n      TopDocs cTopDocs = searcher.search(cq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", cTopDocs.totalHits, tTopDocs.totalHits );\n      termCountT += tq.getTotalNumberOfTerms();\n      termCountC += cq.getTotalNumberOfTerms();\n      // test exclusive range\n      tq=NumericRangeQuery.newLongRange(field, precisionStep, lower, upper, false, false);\n      cq=new TermRangeQuery(field, NumericUtils.longToPrefixCoded(lower), NumericUtils.longToPrefixCoded(upper), false, false);\n      tTopDocs = searcher.search(tq, 1);\n      cTopDocs = searcher.search(cq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", cTopDocs.totalHits, tTopDocs.totalHits );\n      termCountT += tq.getTotalNumberOfTerms();\n      termCountC += cq.getTotalNumberOfTerms();\n      // test left exclusive range\n      tq=NumericRangeQuery.newLongRange(field, precisionStep, lower, upper, false, true);\n      cq=new TermRangeQuery(field, NumericUtils.longToPrefixCoded(lower), NumericUtils.longToPrefixCoded(upper), false, true);\n      tTopDocs = searcher.search(tq, 1);\n      cTopDocs = searcher.search(cq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", cTopDocs.totalHits, tTopDocs.totalHits );\n      termCountT += tq.getTotalNumberOfTerms();\n      termCountC += cq.getTotalNumberOfTerms();\n      // test right exclusive range\n      tq=NumericRangeQuery.newLongRange(field, precisionStep, lower, upper, true, false);\n      cq=new TermRangeQuery(field, NumericUtils.longToPrefixCoded(lower), NumericUtils.longToPrefixCoded(upper), true, false);\n      tTopDocs = searcher.search(tq, 1);\n      cTopDocs = searcher.search(cq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", cTopDocs.totalHits, tTopDocs.totalHits );\n      termCountT += tq.getTotalNumberOfTerms();\n      termCountC += cq.getTotalNumberOfTerms();\n    }\n    if (precisionStep == Integer.MAX_VALUE) {\n      assertEquals(\"Total number of terms should be equal for unlimited precStep\", termCountT, termCountC);\n    } else {\n      System.out.println(\"Average number of terms during random search on '\" + field + \"':\");\n      System.out.println(\" Trie query: \" + (((double)termCountT)/(10*4)));\n      System.out.println(\" Classical query: \" + (((double)termCountC)/(10*4)));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/test/org/apache/lucene/search/TestNumericRangeQuery64#testRandomTrieAndClassicRangeQuery(int).mjava","sourceNew":null,"sourceOld":"  private void testRandomTrieAndClassicRangeQuery(int precisionStep) throws Exception {\n    final Random rnd=newRandom();\n    String field=\"field\"+precisionStep;\n    int termCountT=0,termCountC=0;\n    for (int i=0; i<10; i++) {\n      long lower=(long)(rnd.nextDouble()*noDocs*distance)+startOffset;\n      long upper=(long)(rnd.nextDouble()*noDocs*distance)+startOffset;\n      if (lower>upper) {\n        long a=lower; lower=upper; upper=a;\n      }\n      // test inclusive range\n      NumericRangeQuery<Long> tq=NumericRangeQuery.newLongRange(field, precisionStep, lower, upper, true, true);\n      TermRangeQuery cq=new TermRangeQuery(field, NumericUtils.longToPrefixCoded(lower), NumericUtils.longToPrefixCoded(upper), true, true);\n      TopDocs tTopDocs = searcher.search(tq, 1);\n      TopDocs cTopDocs = searcher.search(cq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", cTopDocs.totalHits, tTopDocs.totalHits );\n      termCountT += tq.getTotalNumberOfTerms();\n      termCountC += cq.getTotalNumberOfTerms();\n      // test exclusive range\n      tq=NumericRangeQuery.newLongRange(field, precisionStep, lower, upper, false, false);\n      cq=new TermRangeQuery(field, NumericUtils.longToPrefixCoded(lower), NumericUtils.longToPrefixCoded(upper), false, false);\n      tTopDocs = searcher.search(tq, 1);\n      cTopDocs = searcher.search(cq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", cTopDocs.totalHits, tTopDocs.totalHits );\n      termCountT += tq.getTotalNumberOfTerms();\n      termCountC += cq.getTotalNumberOfTerms();\n      // test left exclusive range\n      tq=NumericRangeQuery.newLongRange(field, precisionStep, lower, upper, false, true);\n      cq=new TermRangeQuery(field, NumericUtils.longToPrefixCoded(lower), NumericUtils.longToPrefixCoded(upper), false, true);\n      tTopDocs = searcher.search(tq, 1);\n      cTopDocs = searcher.search(cq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", cTopDocs.totalHits, tTopDocs.totalHits );\n      termCountT += tq.getTotalNumberOfTerms();\n      termCountC += cq.getTotalNumberOfTerms();\n      // test right exclusive range\n      tq=NumericRangeQuery.newLongRange(field, precisionStep, lower, upper, true, false);\n      cq=new TermRangeQuery(field, NumericUtils.longToPrefixCoded(lower), NumericUtils.longToPrefixCoded(upper), true, false);\n      tTopDocs = searcher.search(tq, 1);\n      cTopDocs = searcher.search(cq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", cTopDocs.totalHits, tTopDocs.totalHits );\n      termCountT += tq.getTotalNumberOfTerms();\n      termCountC += cq.getTotalNumberOfTerms();\n    }\n    if (precisionStep == Integer.MAX_VALUE) {\n      assertEquals(\"Total number of terms should be equal for unlimited precStep\", termCountT, termCountC);\n    } else {\n      System.out.println(\"Average number of terms during random search on '\" + field + \"':\");\n      System.out.println(\" Trie query: \" + (((double)termCountT)/(10*4)));\n      System.out.println(\" Classical query: \" + (((double)termCountC)/(10*4)));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}