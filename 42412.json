{"path":"lucene/src/test/org/apache/lucene/util/TestUnicodeUtil#testNewString().mjava","commits":[{"id":"2aafd88401639311b0404e67c94e829e123a0e45","date":1273477632,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/TestUnicodeUtil#testNewString().mjava","pathOld":"/dev/null","sourceNew":"  public void testNewString() {\n    final int[] codePoints = {\n        Character.toCodePoint(Character.MIN_HIGH_SURROGATE,\n            Character.MAX_LOW_SURROGATE),\n        Character.toCodePoint(Character.MAX_HIGH_SURROGATE,\n            Character.MIN_LOW_SURROGATE), Character.MAX_HIGH_SURROGATE, 'A',\n        -1,};\n\n    final String cpString = \"\" + Character.MIN_HIGH_SURROGATE\n        + Character.MAX_LOW_SURROGATE + Character.MAX_HIGH_SURROGATE\n        + Character.MIN_LOW_SURROGATE + Character.MAX_HIGH_SURROGATE + 'A';\n\n    final int[][] tests = { {0, 1, 0, 2}, {0, 2, 0, 4}, {1, 1, 2, 2},\n        {1, 2, 2, 3}, {1, 3, 2, 4}, {2, 2, 4, 2}, {2, 3, 0, -1}, {4, 5, 0, -1},\n        {3, -1, 0, -1}};\n\n    for (int i = 0; i < tests.length; ++i) {\n      int[] t = tests[i];\n      int s = t[0];\n      int c = t[1];\n      int rs = t[2];\n      int rc = t[3];\n\n      Exception e = null;\n      try {\n        String str = UnicodeUtil.newString(codePoints, s, c);\n        assertFalse(rc == -1);\n        assertEquals(cpString.substring(rs, rs + rc), str);\n        continue;\n      } catch (IndexOutOfBoundsException e1) {\n        e = e1;\n      } catch (IllegalArgumentException e2) {\n        e = e2;\n      }\n      assertTrue(rc == -1);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestUnicodeUtil#testNewString().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestUnicodeUtil#testNewString().mjava","sourceNew":"  public void testNewString() {\n    final int[] codePoints = {\n        Character.toCodePoint(Character.MIN_HIGH_SURROGATE,\n            Character.MAX_LOW_SURROGATE),\n        Character.toCodePoint(Character.MAX_HIGH_SURROGATE,\n            Character.MIN_LOW_SURROGATE), Character.MAX_HIGH_SURROGATE, 'A',\n        -1,};\n\n    final String cpString = \"\" + Character.MIN_HIGH_SURROGATE\n        + Character.MAX_LOW_SURROGATE + Character.MAX_HIGH_SURROGATE\n        + Character.MIN_LOW_SURROGATE + Character.MAX_HIGH_SURROGATE + 'A';\n\n    final int[][] tests = { {0, 1, 0, 2}, {0, 2, 0, 4}, {1, 1, 2, 2},\n        {1, 2, 2, 3}, {1, 3, 2, 4}, {2, 2, 4, 2}, {2, 3, 0, -1}, {4, 5, 0, -1},\n        {3, -1, 0, -1}};\n\n    for (int i = 0; i < tests.length; ++i) {\n      int[] t = tests[i];\n      int s = t[0];\n      int c = t[1];\n      int rs = t[2];\n      int rc = t[3];\n\n      Exception e = null;\n      try {\n        String str = UnicodeUtil.newString(codePoints, s, c);\n        assertFalse(rc == -1);\n        assertEquals(cpString.substring(rs, rs + rc), str);\n        continue;\n      } catch (IndexOutOfBoundsException e1) {\n        e = e1;\n      } catch (IllegalArgumentException e2) {\n        e = e2;\n      }\n      assertTrue(rc == -1);\n    }\n  }\n\n","sourceOld":"  public void testNewString() {\n    final int[] codePoints = {\n        Character.toCodePoint(Character.MIN_HIGH_SURROGATE,\n            Character.MAX_LOW_SURROGATE),\n        Character.toCodePoint(Character.MAX_HIGH_SURROGATE,\n            Character.MIN_LOW_SURROGATE), Character.MAX_HIGH_SURROGATE, 'A',\n        -1,};\n\n    final String cpString = \"\" + Character.MIN_HIGH_SURROGATE\n        + Character.MAX_LOW_SURROGATE + Character.MAX_HIGH_SURROGATE\n        + Character.MIN_LOW_SURROGATE + Character.MAX_HIGH_SURROGATE + 'A';\n\n    final int[][] tests = { {0, 1, 0, 2}, {0, 2, 0, 4}, {1, 1, 2, 2},\n        {1, 2, 2, 3}, {1, 3, 2, 4}, {2, 2, 4, 2}, {2, 3, 0, -1}, {4, 5, 0, -1},\n        {3, -1, 0, -1}};\n\n    for (int i = 0; i < tests.length; ++i) {\n      int[] t = tests[i];\n      int s = t[0];\n      int c = t[1];\n      int rs = t[2];\n      int rc = t[3];\n\n      Exception e = null;\n      try {\n        String str = UnicodeUtil.newString(codePoints, s, c);\n        assertFalse(rc == -1);\n        assertEquals(cpString.substring(rs, rs + rc), str);\n        continue;\n      } catch (IndexOutOfBoundsException e1) {\n        e = e1;\n      } catch (IllegalArgumentException e2) {\n        e = e2;\n      }\n      assertTrue(rc == -1);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["2aafd88401639311b0404e67c94e829e123a0e45"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2aafd88401639311b0404e67c94e829e123a0e45":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2aafd88401639311b0404e67c94e829e123a0e45"],"2aafd88401639311b0404e67c94e829e123a0e45":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}