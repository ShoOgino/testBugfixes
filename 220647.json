{"path":"lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/BooleanQueryBuilder#getQuery(Element).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/BooleanQueryBuilder#getQuery(Element).mjava","pathOld":"modules/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/BooleanQueryBuilder#getQuery(Element).mjava","sourceNew":"  public Query getQuery(Element e) throws ParserException {\n    BooleanQuery bq = new BooleanQuery(DOMUtils.getAttribute(e, \"disableCoord\", false));\n    bq.setMinimumNumberShouldMatch(DOMUtils.getAttribute(e, \"minimumNumberShouldMatch\", 0));\n    bq.setBoost(DOMUtils.getAttribute(e, \"boost\", 1.0f));\n\n    NodeList nl = e.getChildNodes();\n    for (int i = 0; i < nl.getLength(); i++) {\n      Node node = nl.item(i);\n      if (node.getNodeName().equals(\"Clause\")) {\n        Element clauseElem = (Element) node;\n        BooleanClause.Occur occurs = getOccursValue(clauseElem);\n\n        Element clauseQuery = DOMUtils.getFirstChildOrFail(clauseElem);\n        Query q = factory.getQuery(clauseQuery);\n        bq.add(new BooleanClause(q, occurs));\n      }\n    }\n\n    return bq;\n  }\n\n","sourceOld":"  public Query getQuery(Element e) throws ParserException {\n    BooleanQuery bq = new BooleanQuery(DOMUtils.getAttribute(e, \"disableCoord\", false));\n    bq.setMinimumNumberShouldMatch(DOMUtils.getAttribute(e, \"minimumNumberShouldMatch\", 0));\n    bq.setBoost(DOMUtils.getAttribute(e, \"boost\", 1.0f));\n\n    NodeList nl = e.getChildNodes();\n    for (int i = 0; i < nl.getLength(); i++) {\n      Node node = nl.item(i);\n      if (node.getNodeName().equals(\"Clause\")) {\n        Element clauseElem = (Element) node;\n        BooleanClause.Occur occurs = getOccursValue(clauseElem);\n\n        Element clauseQuery = DOMUtils.getFirstChildOrFail(clauseElem);\n        Query q = factory.getQuery(clauseQuery);\n        bq.add(new BooleanClause(q, occurs));\n      }\n    }\n\n    return bq;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7530de27b87b961b51f01bd1299b7004d46e8823","date":1355236261,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/BooleanQueryBuilder#getQuery(Element).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/BooleanQueryBuilder#getQuery(Element).mjava","sourceNew":"  @Override\n  public Query getQuery(Element e) throws ParserException {\n    BooleanQuery bq = new BooleanQuery(DOMUtils.getAttribute(e, \"disableCoord\", false));\n    bq.setMinimumNumberShouldMatch(DOMUtils.getAttribute(e, \"minimumNumberShouldMatch\", 0));\n    bq.setBoost(DOMUtils.getAttribute(e, \"boost\", 1.0f));\n\n    NodeList nl = e.getChildNodes();\n    for (int i = 0; i < nl.getLength(); i++) {\n      Node node = nl.item(i);\n      if (node.getNodeName().equals(\"Clause\")) {\n        Element clauseElem = (Element) node;\n        BooleanClause.Occur occurs = getOccursValue(clauseElem);\n\n        Element clauseQuery = DOMUtils.getFirstChildOrFail(clauseElem);\n        Query q = factory.getQuery(clauseQuery);\n        bq.add(new BooleanClause(q, occurs));\n      }\n    }\n\n    return bq;\n  }\n\n","sourceOld":"  public Query getQuery(Element e) throws ParserException {\n    BooleanQuery bq = new BooleanQuery(DOMUtils.getAttribute(e, \"disableCoord\", false));\n    bq.setMinimumNumberShouldMatch(DOMUtils.getAttribute(e, \"minimumNumberShouldMatch\", 0));\n    bq.setBoost(DOMUtils.getAttribute(e, \"boost\", 1.0f));\n\n    NodeList nl = e.getChildNodes();\n    for (int i = 0; i < nl.getLength(); i++) {\n      Node node = nl.item(i);\n      if (node.getNodeName().equals(\"Clause\")) {\n        Element clauseElem = (Element) node;\n        BooleanClause.Occur occurs = getOccursValue(clauseElem);\n\n        Element clauseQuery = DOMUtils.getFirstChildOrFail(clauseElem);\n        Query q = factory.getQuery(clauseQuery);\n        bq.add(new BooleanClause(q, occurs));\n      }\n    }\n\n    return bq;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/BooleanQueryBuilder#getQuery(Element).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/BooleanQueryBuilder#getQuery(Element).mjava","sourceNew":"  @Override\n  public Query getQuery(Element e) throws ParserException {\n    BooleanQuery bq = new BooleanQuery(DOMUtils.getAttribute(e, \"disableCoord\", false));\n    bq.setMinimumNumberShouldMatch(DOMUtils.getAttribute(e, \"minimumNumberShouldMatch\", 0));\n    bq.setBoost(DOMUtils.getAttribute(e, \"boost\", 1.0f));\n\n    NodeList nl = e.getChildNodes();\n    for (int i = 0; i < nl.getLength(); i++) {\n      Node node = nl.item(i);\n      if (node.getNodeName().equals(\"Clause\")) {\n        Element clauseElem = (Element) node;\n        BooleanClause.Occur occurs = getOccursValue(clauseElem);\n\n        Element clauseQuery = DOMUtils.getFirstChildOrFail(clauseElem);\n        Query q = factory.getQuery(clauseQuery);\n        bq.add(new BooleanClause(q, occurs));\n      }\n    }\n\n    return bq;\n  }\n\n","sourceOld":"  public Query getQuery(Element e) throws ParserException {\n    BooleanQuery bq = new BooleanQuery(DOMUtils.getAttribute(e, \"disableCoord\", false));\n    bq.setMinimumNumberShouldMatch(DOMUtils.getAttribute(e, \"minimumNumberShouldMatch\", 0));\n    bq.setBoost(DOMUtils.getAttribute(e, \"boost\", 1.0f));\n\n    NodeList nl = e.getChildNodes();\n    for (int i = 0; i < nl.getLength(); i++) {\n      Node node = nl.item(i);\n      if (node.getNodeName().equals(\"Clause\")) {\n        Element clauseElem = (Element) node;\n        BooleanClause.Occur occurs = getOccursValue(clauseElem);\n\n        Element clauseQuery = DOMUtils.getFirstChildOrFail(clauseElem);\n        Query q = factory.getQuery(clauseQuery);\n        bq.add(new BooleanClause(q, occurs));\n      }\n    }\n\n    return bq;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f68d01cf19df971dcdcb05e30247f4ad7ec9747","date":1434611645,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/BooleanQueryBuilder#getQuery(Element).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/BooleanQueryBuilder#getQuery(Element).mjava","sourceNew":"  @Override\n  public Query getQuery(Element e) throws ParserException {\n    BooleanQuery.Builder bq = new BooleanQuery.Builder();\n    bq.setDisableCoord(DOMUtils.getAttribute(e, \"disableCoord\", false));\n    bq.setMinimumNumberShouldMatch(DOMUtils.getAttribute(e, \"minimumNumberShouldMatch\", 0));\n\n    NodeList nl = e.getChildNodes();\n    for (int i = 0; i < nl.getLength(); i++) {\n      Node node = nl.item(i);\n      if (node.getNodeName().equals(\"Clause\")) {\n        Element clauseElem = (Element) node;\n        BooleanClause.Occur occurs = getOccursValue(clauseElem);\n\n        Element clauseQuery = DOMUtils.getFirstChildOrFail(clauseElem);\n        Query q = factory.getQuery(clauseQuery);\n        bq.add(new BooleanClause(q, occurs));\n      }\n    }\n\n    BooleanQuery q = bq.build();\n    q.setBoost(DOMUtils.getAttribute(e, \"boost\", 1.0f));\n    return q;\n  }\n\n","sourceOld":"  @Override\n  public Query getQuery(Element e) throws ParserException {\n    BooleanQuery bq = new BooleanQuery(DOMUtils.getAttribute(e, \"disableCoord\", false));\n    bq.setMinimumNumberShouldMatch(DOMUtils.getAttribute(e, \"minimumNumberShouldMatch\", 0));\n    bq.setBoost(DOMUtils.getAttribute(e, \"boost\", 1.0f));\n\n    NodeList nl = e.getChildNodes();\n    for (int i = 0; i < nl.getLength(); i++) {\n      Node node = nl.item(i);\n      if (node.getNodeName().equals(\"Clause\")) {\n        Element clauseElem = (Element) node;\n        BooleanClause.Occur occurs = getOccursValue(clauseElem);\n\n        Element clauseQuery = DOMUtils.getFirstChildOrFail(clauseElem);\n        Query q = factory.getQuery(clauseQuery);\n        bq.add(new BooleanClause(q, occurs));\n      }\n    }\n\n    return bq;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2dfdf766e55e943d942055d7de53c7ad6bc45283","date":1441632886,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/BooleanQueryBuilder#getQuery(Element).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/BooleanQueryBuilder#getQuery(Element).mjava","sourceNew":"  @Override\n  public Query getQuery(Element e) throws ParserException {\n    BooleanQuery.Builder bq = new BooleanQuery.Builder();\n    bq.setDisableCoord(DOMUtils.getAttribute(e, \"disableCoord\", false));\n    bq.setMinimumNumberShouldMatch(DOMUtils.getAttribute(e, \"minimumNumberShouldMatch\", 0));\n\n    NodeList nl = e.getChildNodes();\n    for (int i = 0; i < nl.getLength(); i++) {\n      Node node = nl.item(i);\n      if (node.getNodeName().equals(\"Clause\")) {\n        Element clauseElem = (Element) node;\n        BooleanClause.Occur occurs = getOccursValue(clauseElem);\n\n        Element clauseQuery = DOMUtils.getFirstChildOrFail(clauseElem);\n        Query q = factory.getQuery(clauseQuery);\n        bq.add(new BooleanClause(q, occurs));\n      }\n    }\n\n    Query q = bq.build();\n    float boost = DOMUtils.getAttribute(e, \"boost\", 1.0f);\n    if (boost != 1f) {\n      q = new BoostQuery(q, boost);\n    }\n    return q;\n  }\n\n","sourceOld":"  @Override\n  public Query getQuery(Element e) throws ParserException {\n    BooleanQuery.Builder bq = new BooleanQuery.Builder();\n    bq.setDisableCoord(DOMUtils.getAttribute(e, \"disableCoord\", false));\n    bq.setMinimumNumberShouldMatch(DOMUtils.getAttribute(e, \"minimumNumberShouldMatch\", 0));\n\n    NodeList nl = e.getChildNodes();\n    for (int i = 0; i < nl.getLength(); i++) {\n      Node node = nl.item(i);\n      if (node.getNodeName().equals(\"Clause\")) {\n        Element clauseElem = (Element) node;\n        BooleanClause.Occur occurs = getOccursValue(clauseElem);\n\n        Element clauseQuery = DOMUtils.getFirstChildOrFail(clauseElem);\n        Query q = factory.getQuery(clauseQuery);\n        bq.add(new BooleanClause(q, occurs));\n      }\n    }\n\n    BooleanQuery q = bq.build();\n    q.setBoost(DOMUtils.getAttribute(e, \"boost\", 1.0f));\n    return q;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5dd2d7f1bf043fe6e38915a7956cb31a4e9812c0","date":1460543237,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/BooleanQueryBuilder#getQuery(Element).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/BooleanQueryBuilder#getQuery(Element).mjava","sourceNew":"  @Override\n  public Query getQuery(Element e) throws ParserException {\n    BooleanQuery.Builder bq = new BooleanQuery.Builder();\n    bq.setDisableCoord(DOMUtils.getAttribute(e, \"disableCoord\", false));\n    bq.setMinimumNumberShouldMatch(DOMUtils.getAttribute(e, \"minimumNumberShouldMatch\", 0));\n\n    NodeList nl = e.getChildNodes();\n    final int nlLen = nl.getLength();\n    for (int i = 0; i < nlLen; i++) {\n      Node node = nl.item(i);\n      if (node.getNodeName().equals(\"Clause\")) {\n        Element clauseElem = (Element) node;\n        BooleanClause.Occur occurs = getOccursValue(clauseElem);\n\n        Element clauseQuery = DOMUtils.getFirstChildOrFail(clauseElem);\n        Query q = factory.getQuery(clauseQuery);\n        bq.add(new BooleanClause(q, occurs));\n      }\n    }\n\n    Query q = bq.build();\n    float boost = DOMUtils.getAttribute(e, \"boost\", 1.0f);\n    if (boost != 1f) {\n      q = new BoostQuery(q, boost);\n    }\n    return q;\n  }\n\n","sourceOld":"  @Override\n  public Query getQuery(Element e) throws ParserException {\n    BooleanQuery.Builder bq = new BooleanQuery.Builder();\n    bq.setDisableCoord(DOMUtils.getAttribute(e, \"disableCoord\", false));\n    bq.setMinimumNumberShouldMatch(DOMUtils.getAttribute(e, \"minimumNumberShouldMatch\", 0));\n\n    NodeList nl = e.getChildNodes();\n    for (int i = 0; i < nl.getLength(); i++) {\n      Node node = nl.item(i);\n      if (node.getNodeName().equals(\"Clause\")) {\n        Element clauseElem = (Element) node;\n        BooleanClause.Occur occurs = getOccursValue(clauseElem);\n\n        Element clauseQuery = DOMUtils.getFirstChildOrFail(clauseElem);\n        Query q = factory.getQuery(clauseQuery);\n        bq.add(new BooleanClause(q, occurs));\n      }\n    }\n\n    Query q = bq.build();\n    float boost = DOMUtils.getAttribute(e, \"boost\", 1.0f);\n    if (boost != 1f) {\n      q = new BoostQuery(q, boost);\n    }\n    return q;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ea9249ab9a9f76eb4132ceb4631d15315721f6a","date":1460578553,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/BooleanQueryBuilder#getQuery(Element).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/BooleanQueryBuilder#getQuery(Element).mjava","sourceNew":"  @Override\n  public Query getQuery(Element e) throws ParserException {\n    BooleanQuery.Builder bq = new BooleanQuery.Builder();\n    bq.setDisableCoord(DOMUtils.getAttribute(e, \"disableCoord\", false));\n    bq.setMinimumNumberShouldMatch(DOMUtils.getAttribute(e, \"minimumNumberShouldMatch\", 0));\n\n    NodeList nl = e.getChildNodes();\n    final int nlLen = nl.getLength();\n    for (int i = 0; i < nlLen; i++) {\n      Node node = nl.item(i);\n      if (node.getNodeName().equals(\"Clause\")) {\n        Element clauseElem = (Element) node;\n        BooleanClause.Occur occurs = getOccursValue(clauseElem);\n\n        Element clauseQuery = DOMUtils.getFirstChildOrFail(clauseElem);\n        Query q = factory.getQuery(clauseQuery);\n        bq.add(new BooleanClause(q, occurs));\n      }\n    }\n\n    Query q = bq.build();\n    float boost = DOMUtils.getAttribute(e, \"boost\", 1.0f);\n    if (boost != 1f) {\n      q = new BoostQuery(q, boost);\n    }\n    return q;\n  }\n\n","sourceOld":"  @Override\n  public Query getQuery(Element e) throws ParserException {\n    BooleanQuery.Builder bq = new BooleanQuery.Builder();\n    bq.setDisableCoord(DOMUtils.getAttribute(e, \"disableCoord\", false));\n    bq.setMinimumNumberShouldMatch(DOMUtils.getAttribute(e, \"minimumNumberShouldMatch\", 0));\n\n    NodeList nl = e.getChildNodes();\n    for (int i = 0; i < nl.getLength(); i++) {\n      Node node = nl.item(i);\n      if (node.getNodeName().equals(\"Clause\")) {\n        Element clauseElem = (Element) node;\n        BooleanClause.Occur occurs = getOccursValue(clauseElem);\n\n        Element clauseQuery = DOMUtils.getFirstChildOrFail(clauseElem);\n        Query q = factory.getQuery(clauseQuery);\n        bq.add(new BooleanClause(q, occurs));\n      }\n    }\n\n    Query q = bq.build();\n    float boost = DOMUtils.getAttribute(e, \"boost\", 1.0f);\n    if (boost != 1f) {\n      q = new BoostQuery(q, boost);\n    }\n    return q;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c8a0e442f7b61f811680273b25da95994a724466","date":1467878549,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/BooleanQueryBuilder#getQuery(Element).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/BooleanQueryBuilder#getQuery(Element).mjava","sourceNew":"  @Override\n  public Query getQuery(Element e) throws ParserException {\n    BooleanQuery.Builder bq = new BooleanQuery.Builder();\n    bq.setMinimumNumberShouldMatch(DOMUtils.getAttribute(e, \"minimumNumberShouldMatch\", 0));\n\n    NodeList nl = e.getChildNodes();\n    final int nlLen = nl.getLength();\n    for (int i = 0; i < nlLen; i++) {\n      Node node = nl.item(i);\n      if (node.getNodeName().equals(\"Clause\")) {\n        Element clauseElem = (Element) node;\n        BooleanClause.Occur occurs = getOccursValue(clauseElem);\n\n        Element clauseQuery = DOMUtils.getFirstChildOrFail(clauseElem);\n        Query q = factory.getQuery(clauseQuery);\n        bq.add(new BooleanClause(q, occurs));\n      }\n    }\n\n    Query q = bq.build();\n    float boost = DOMUtils.getAttribute(e, \"boost\", 1.0f);\n    if (boost != 1f) {\n      q = new BoostQuery(q, boost);\n    }\n    return q;\n  }\n\n","sourceOld":"  @Override\n  public Query getQuery(Element e) throws ParserException {\n    BooleanQuery.Builder bq = new BooleanQuery.Builder();\n    bq.setDisableCoord(DOMUtils.getAttribute(e, \"disableCoord\", false));\n    bq.setMinimumNumberShouldMatch(DOMUtils.getAttribute(e, \"minimumNumberShouldMatch\", 0));\n\n    NodeList nl = e.getChildNodes();\n    final int nlLen = nl.getLength();\n    for (int i = 0; i < nlLen; i++) {\n      Node node = nl.item(i);\n      if (node.getNodeName().equals(\"Clause\")) {\n        Element clauseElem = (Element) node;\n        BooleanClause.Occur occurs = getOccursValue(clauseElem);\n\n        Element clauseQuery = DOMUtils.getFirstChildOrFail(clauseElem);\n        Query q = factory.getQuery(clauseQuery);\n        bq.add(new BooleanClause(q, occurs));\n      }\n    }\n\n    Query q = bq.build();\n    float boost = DOMUtils.getAttribute(e, \"boost\", 1.0f);\n    if (boost != 1f) {\n      q = new BoostQuery(q, boost);\n    }\n    return q;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/BooleanQueryBuilder#getQuery(Element).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/BooleanQueryBuilder#getQuery(Element).mjava","sourceNew":"  @Override\n  public Query getQuery(Element e) throws ParserException {\n    BooleanQuery.Builder bq = new BooleanQuery.Builder();\n    bq.setMinimumNumberShouldMatch(DOMUtils.getAttribute(e, \"minimumNumberShouldMatch\", 0));\n\n    NodeList nl = e.getChildNodes();\n    final int nlLen = nl.getLength();\n    for (int i = 0; i < nlLen; i++) {\n      Node node = nl.item(i);\n      if (node.getNodeName().equals(\"Clause\")) {\n        Element clauseElem = (Element) node;\n        BooleanClause.Occur occurs = getOccursValue(clauseElem);\n\n        Element clauseQuery = DOMUtils.getFirstChildOrFail(clauseElem);\n        Query q = factory.getQuery(clauseQuery);\n        bq.add(new BooleanClause(q, occurs));\n      }\n    }\n\n    Query q = bq.build();\n    float boost = DOMUtils.getAttribute(e, \"boost\", 1.0f);\n    if (boost != 1f) {\n      q = new BoostQuery(q, boost);\n    }\n    return q;\n  }\n\n","sourceOld":"  @Override\n  public Query getQuery(Element e) throws ParserException {\n    BooleanQuery.Builder bq = new BooleanQuery.Builder();\n    bq.setDisableCoord(DOMUtils.getAttribute(e, \"disableCoord\", false));\n    bq.setMinimumNumberShouldMatch(DOMUtils.getAttribute(e, \"minimumNumberShouldMatch\", 0));\n\n    NodeList nl = e.getChildNodes();\n    final int nlLen = nl.getLength();\n    for (int i = 0; i < nlLen; i++) {\n      Node node = nl.item(i);\n      if (node.getNodeName().equals(\"Clause\")) {\n        Element clauseElem = (Element) node;\n        BooleanClause.Occur occurs = getOccursValue(clauseElem);\n\n        Element clauseQuery = DOMUtils.getFirstChildOrFail(clauseElem);\n        Query q = factory.getQuery(clauseQuery);\n        bq.add(new BooleanClause(q, occurs));\n      }\n    }\n\n    Query q = bq.build();\n    float boost = DOMUtils.getAttribute(e, \"boost\", 1.0f);\n    if (boost != 1f) {\n      q = new BoostQuery(q, boost);\n    }\n    return q;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5dd2d7f1bf043fe6e38915a7956cb31a4e9812c0":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["b89678825b68eccaf09e6ab71675fc0b0af1e099","7530de27b87b961b51f01bd1299b7004d46e8823"],"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["7530de27b87b961b51f01bd1299b7004d46e8823"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9ea9249ab9a9f76eb4132ceb4631d15315721f6a":["2dfdf766e55e943d942055d7de53c7ad6bc45283","5dd2d7f1bf043fe6e38915a7956cb31a4e9812c0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"c8a0e442f7b61f811680273b25da95994a724466":["9ea9249ab9a9f76eb4132ceb4631d15315721f6a"],"7530de27b87b961b51f01bd1299b7004d46e8823":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["9ea9249ab9a9f76eb4132ceb4631d15315721f6a","c8a0e442f7b61f811680273b25da95994a724466"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c8a0e442f7b61f811680273b25da95994a724466"]},"commit2Childs":{"5dd2d7f1bf043fe6e38915a7956cb31a4e9812c0":["9ea9249ab9a9f76eb4132ceb4631d15315721f6a"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","7530de27b87b961b51f01bd1299b7004d46e8823"],"9ea9249ab9a9f76eb4132ceb4631d15315721f6a":["c8a0e442f7b61f811680273b25da95994a724466","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["5dd2d7f1bf043fe6e38915a7956cb31a4e9812c0","9ea9249ab9a9f76eb4132ceb4631d15315721f6a"],"c8a0e442f7b61f811680273b25da95994a724466":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7530de27b87b961b51f01bd1299b7004d46e8823":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}