{"path":"backwards/src/test/org/apache/lucene/util/TestAttributeSource#testCloneAttributes().mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/test/org/apache/lucene/util/TestAttributeSource#testCloneAttributes().mjava","pathOld":"/dev/null","sourceNew":"  public void testCloneAttributes() {\n    final AttributeSource src = new AttributeSource();\n    final TermAttribute termAtt = src.addAttribute(TermAttribute.class);\n    final TypeAttribute typeAtt = src.addAttribute(TypeAttribute.class);\n    termAtt.setTermBuffer(\"TestTerm\");\n    typeAtt.setType(\"TestType\");\n    \n    final AttributeSource clone = src.cloneAttributes();\n    final Iterator<Class<? extends Attribute>> it = clone.getAttributeClassesIterator();\n    assertEquals(\"TermAttribute must be the first attribute\", TermAttribute.class, it.next());\n    assertEquals(\"TypeAttribute must be the second attribute\", TypeAttribute.class, it.next());\n    assertFalse(\"No more attributes\", it.hasNext());\n    \n    final TermAttribute termAtt2 = clone.getAttribute(TermAttribute.class);\n    final TypeAttribute typeAtt2 = clone.getAttribute(TypeAttribute.class);\n    assertNotSame(\"TermAttribute of original and clone must be different instances\", termAtt2, termAtt);\n    assertNotSame(\"TypeAttribute of original and clone must be different instances\", typeAtt2, typeAtt);\n    assertEquals(\"TermAttribute of original and clone must be equal\", termAtt2, termAtt);\n    assertEquals(\"TypeAttribute of original and clone must be equal\", typeAtt2, typeAtt);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/util/TestAttributeSource#testCloneAttributes().mjava","pathOld":"backwards/src/test/org/apache/lucene/util/TestAttributeSource#testCloneAttributes().mjava","sourceNew":"  public void testCloneAttributes() {\n    final AttributeSource src = new AttributeSource();\n    final TermAttribute termAtt = src.addAttribute(TermAttribute.class);\n    final TypeAttribute typeAtt = src.addAttribute(TypeAttribute.class);\n    termAtt.setTermBuffer(\"TestTerm\");\n    typeAtt.setType(\"TestType\");\n    \n    final AttributeSource clone = src.cloneAttributes();\n    final Iterator<Class<? extends Attribute>> it = clone.getAttributeClassesIterator();\n    assertEquals(\"TermAttribute must be the first attribute\", TermAttribute.class, it.next());\n    assertEquals(\"TypeAttribute must be the second attribute\", TypeAttribute.class, it.next());\n    assertFalse(\"No more attributes\", it.hasNext());\n    \n    final TermAttribute termAtt2 = clone.getAttribute(TermAttribute.class);\n    final TypeAttribute typeAtt2 = clone.getAttribute(TypeAttribute.class);\n    assertNotSame(\"TermAttribute of original and clone must be different instances\", termAtt2, termAtt);\n    assertNotSame(\"TypeAttribute of original and clone must be different instances\", typeAtt2, typeAtt);\n    assertEquals(\"TermAttribute of original and clone must be equal\", termAtt2, termAtt);\n    assertEquals(\"TypeAttribute of original and clone must be equal\", typeAtt2, typeAtt);\n  }\n\n","sourceOld":"  public void testCloneAttributes() {\n    final AttributeSource src = new AttributeSource();\n    final TermAttribute termAtt = src.addAttribute(TermAttribute.class);\n    final TypeAttribute typeAtt = src.addAttribute(TypeAttribute.class);\n    termAtt.setTermBuffer(\"TestTerm\");\n    typeAtt.setType(\"TestType\");\n    \n    final AttributeSource clone = src.cloneAttributes();\n    final Iterator<Class<? extends Attribute>> it = clone.getAttributeClassesIterator();\n    assertEquals(\"TermAttribute must be the first attribute\", TermAttribute.class, it.next());\n    assertEquals(\"TypeAttribute must be the second attribute\", TypeAttribute.class, it.next());\n    assertFalse(\"No more attributes\", it.hasNext());\n    \n    final TermAttribute termAtt2 = clone.getAttribute(TermAttribute.class);\n    final TypeAttribute typeAtt2 = clone.getAttribute(TypeAttribute.class);\n    assertNotSame(\"TermAttribute of original and clone must be different instances\", termAtt2, termAtt);\n    assertNotSame(\"TypeAttribute of original and clone must be different instances\", typeAtt2, typeAtt);\n    assertEquals(\"TermAttribute of original and clone must be equal\", termAtt2, termAtt);\n    assertEquals(\"TypeAttribute of original and clone must be equal\", typeAtt2, typeAtt);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}