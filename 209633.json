{"path":"lucene/spatial/src/java/org/apache/lucene/spatial/util/GeoRelationUtils#rectCrossesPolyPrecise(double,double,double,double,double[],double[],double,double,double,double).mjava","commits":[{"id":"937923083e4d137932336fc80f3d78758ff698a6","date":1454691519,"type":1,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/util/GeoRelationUtils#rectCrossesPolyPrecise(double,double,double,double,double[],double[],double,double,double,double).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/util/GeoRelationUtils#rectCrossesPolyPrecise(double,double,double,double,double[],double[],double,double,double,double).mjava","sourceNew":"  /**\n   * Convenience method for accurately computing whether a rectangle crosses a poly\n   */\n  public static boolean rectCrossesPolyPrecise(final double rMinX, final double rMinY, final double rMaxX,\n                                        final double rMaxY, final double[] shapeX, final double[] shapeY,\n                                        final double sMinX, final double sMinY, final double sMaxX,\n                                        final double sMaxY) {\n    // short-circuit: if the bounding boxes are disjoint then the shape does not cross\n    if (rectDisjoint(rMinX, rMinY, rMaxX, rMaxY, sMinX, sMinY, sMaxX, sMaxY)) {\n      return false;\n    }\n    return rectCrossesPoly(rMinX, rMinY, rMaxX, rMaxY, shapeX, shapeY);\n  }\n\n","sourceOld":"  /**\n   * Convenience method for accurately computing whether a rectangle crosses a poly\n   */\n  public static boolean rectCrossesPolyPrecise(final double rMinX, final double rMinY, final double rMaxX,\n                                        final double rMaxY, final double[] shapeX, final double[] shapeY,\n                                        final double sMinX, final double sMinY, final double sMaxX,\n                                        final double sMaxY) {\n    // short-circuit: if the bounding boxes are disjoint then the shape does not cross\n    if (rectDisjoint(rMinX, rMinY, rMaxX, rMaxY, sMinX, sMinY, sMaxX, sMaxY)) {\n      return false;\n    }\n    return rectCrossesPoly(rMinX, rMinY, rMaxX, rMaxY, shapeX, shapeY);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":1,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/util/GeoRelationUtils#rectCrossesPolyPrecise(double,double,double,double,double[],double[],double,double,double,double).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/util/GeoRelationUtils#rectCrossesPoly(double,double,double,double,double[],double[],double,double,double,double).mjava","sourceNew":"  /**\n   * Convenience method for accurately computing whether a rectangle crosses a poly\n   */\n  public static boolean rectCrossesPolyPrecise(final double rMinX, final double rMinY, final double rMaxX,\n                                        final double rMaxY, final double[] shapeX, final double[] shapeY,\n                                        final double sMinX, final double sMinY, final double sMaxX,\n                                        final double sMaxY) {\n    // short-circuit: if the bounding boxes are disjoint then the shape does not cross\n    if (rectDisjoint(rMinX, rMinY, rMaxX, rMaxY, sMinX, sMinY, sMaxX, sMaxY)) {\n      return false;\n    }\n    return rectCrossesPoly(rMinX, rMinY, rMaxX, rMaxY, shapeX, shapeY);\n  }\n\n","sourceOld":"  /**\n   * Computes whether a rectangle crosses a shape. (touching not allowed)\n   */\n  public static boolean rectCrossesPoly(final double rMinX, final double rMinY, final double rMaxX,\n                                        final double rMaxY, final double[] shapeX, final double[] shapeY,\n                                        final double sMinX, final double sMinY, final double sMaxX,\n                                        final double sMaxY) {\n    // short-circuit: if the bounding boxes are disjoint then the shape does not cross\n    if (rectDisjoint(rMinX, rMinY, rMaxX, rMaxY, sMinX, sMinY, sMaxX, sMaxY)) {\n      return false;\n    }\n\n    final int polyLength = shapeX.length-1;\n    for (short p=0; p<polyLength; ++p) {\n      if (lineCrossesRect(shapeX[p], shapeY[p], shapeX[p+1], shapeY[p+1], rMinX, rMinY, rMaxX, rMaxY) == true) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ec996bf2daff09d61a876319e8fae4aebbea58e3","date":1458661946,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/util/GeoRelationUtils#rectCrossesPolyPrecise(double,double,double,double,double[],double[],double,double,double,double).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/util/GeoRelationUtils#rectCrossesPolyPrecise(double,double,double,double,double[],double[],double,double,double,double).mjava","sourceNew":"  /**\n   * Convenience method for accurately computing whether a rectangle crosses a poly\n   */\n  public static boolean rectCrossesPolyPrecise(final double rMinLat, final double rMaxLat,\n                                               final double rMinLon, final double rMaxLon,\n                                               final double[] shapeLat, final double[] shapeLon,\n                                               final double sMinLat, final double sMaxLat,\n                                               final double sMinLon, final double sMaxLon) {\n    // short-circuit: if the bounding boxes are disjoint then the shape does not cross\n    if (rectDisjoint(rMinLat, rMaxLat, rMinLon, rMaxLon, sMinLat, sMaxLat, sMinLon, sMaxLon)) {\n      return false;\n    }\n    return rectCrossesPoly(rMinLat, rMaxLat, rMinLon, rMaxLon, shapeLat, shapeLon);\n  }\n\n","sourceOld":"  /**\n   * Convenience method for accurately computing whether a rectangle crosses a poly\n   */\n  public static boolean rectCrossesPolyPrecise(final double rMinX, final double rMinY, final double rMaxX,\n                                        final double rMaxY, final double[] shapeX, final double[] shapeY,\n                                        final double sMinX, final double sMinY, final double sMaxX,\n                                        final double sMaxY) {\n    // short-circuit: if the bounding boxes are disjoint then the shape does not cross\n    if (rectDisjoint(rMinX, rMinY, rMaxX, rMaxY, sMinX, sMinY, sMaxX, sMaxY)) {\n      return false;\n    }\n    return rectCrossesPoly(rMinX, rMinY, rMaxX, rMaxY, shapeX, shapeY);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"95ddcac9ac08381985af6eac8f8b77ba881d4ad8","date":1459477726,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/util/GeoRelationUtils#rectCrossesPolyPrecise(double,double,double,double,double[],double[],double,double,double,double).mjava","sourceNew":null,"sourceOld":"  /**\n   * Convenience method for accurately computing whether a rectangle crosses a poly\n   */\n  public static boolean rectCrossesPolyPrecise(final double rMinLat, final double rMaxLat,\n                                               final double rMinLon, final double rMaxLon,\n                                               final double[] shapeLat, final double[] shapeLon,\n                                               final double sMinLat, final double sMaxLat,\n                                               final double sMinLon, final double sMaxLon) {\n    // short-circuit: if the bounding boxes are disjoint then the shape does not cross\n    if (rectDisjoint(rMinLat, rMaxLat, rMinLon, rMaxLon, sMinLat, sMaxLat, sMinLon, sMaxLon)) {\n      return false;\n    }\n    return rectCrossesPoly(rMinLat, rMaxLat, rMinLon, rMaxLon, shapeLat, shapeLon);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"95ddcac9ac08381985af6eac8f8b77ba881d4ad8":["ec996bf2daff09d61a876319e8fae4aebbea58e3"],"ec996bf2daff09d61a876319e8fae4aebbea58e3":["937923083e4d137932336fc80f3d78758ff698a6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","937923083e4d137932336fc80f3d78758ff698a6"],"937923083e4d137932336fc80f3d78758ff698a6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["95ddcac9ac08381985af6eac8f8b77ba881d4ad8"]},"commit2Childs":{"95ddcac9ac08381985af6eac8f8b77ba881d4ad8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ec996bf2daff09d61a876319e8fae4aebbea58e3":["95ddcac9ac08381985af6eac8f8b77ba881d4ad8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","937923083e4d137932336fc80f3d78758ff698a6"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":[],"937923083e4d137932336fc80f3d78758ff698a6":["ec996bf2daff09d61a876319e8fae4aebbea58e3","1e6acbaae7af722f17204ceccf0f7db5753eccf3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}