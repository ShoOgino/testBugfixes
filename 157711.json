{"path":"solr/core/src/test/org/apache/solr/cloud/TestTlogReplica#doReplaceLeader(boolean).mjava","commits":[{"id":"61c45e99cf6676da48f19d7511c73712ad39402b","date":1495508331,"type":0,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestTlogReplica#doReplaceLeader(boolean).mjava","pathOld":"/dev/null","sourceNew":"  /*\n   * validate leader election and that replication still happens on a new leader\n   */\n  private void doReplaceLeader(boolean removeReplica) throws Exception {\n    DocCollection docCollection = createAndWaitForCollection(1, 0, 2, 0);\n    \n    // Add a document and commit\n    cluster.getSolrClient().add(collectionName, new SolrInputDocument(\"id\", \"1\", \"foo\", \"bar\"));\n    cluster.getSolrClient().commit(collectionName);\n    Slice s = docCollection.getSlices().iterator().next();\n    try (HttpSolrClient leaderClient = getHttpSolrClient(s.getLeader().getCoreUrl())) {\n      assertEquals(1, leaderClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound());\n    }\n    \n    waitForNumDocsInAllReplicas(1, docCollection.getReplicas(EnumSet.of(Replica.Type.TLOG)), REPLICATION_TIMEOUT_SECS);\n    \n    // Delete leader replica from shard1\n    JettySolrRunner leaderJetty = null;\n    if (removeReplica) {\n      CollectionAdminRequest.deleteReplica(\n          collectionName, \n          \"shard1\", \n          s.getLeader().getName())\n      .process(cluster.getSolrClient());\n    } else {\n      leaderJetty = cluster.getReplicaJetty(s.getLeader());\n      ChaosMonkey.kill(leaderJetty);\n      waitForState(\"Leader replica not removed\", collectionName, clusterShape(1, 1));\n      // Wait for cluster state to be updated\n      waitForState(\"Replica state not updated in cluster state\", \n          collectionName, clusterStateReflectsActiveAndDownReplicas());\n    }\n    docCollection = assertNumberOfReplicas(0, 1, 0, true, true);\n    \n    // Wait until a new leader is elected\n    TimeOut t = new TimeOut(30, TimeUnit.SECONDS);\n    while (!t.hasTimedOut()) {\n      docCollection = getCollectionState(collectionName);\n      Replica leader = docCollection.getSlice(\"shard1\").getLeader();\n      if (leader != null && leader.isActive(cluster.getSolrClient().getZkStateReader().getClusterState().getLiveNodes())) {\n        break;\n      }\n      Thread.sleep(500);\n    }\n    assertFalse(\"Timeout waiting for a new leader to be elected\", t.hasTimedOut());\n    \n    // There is a new leader, I should be able to add and commit\n    cluster.getSolrClient().add(collectionName, new SolrInputDocument(\"id\", \"2\", \"foo\", \"zoo\"));\n    cluster.getSolrClient().commit(collectionName);\n    \n    // Queries should still work\n    waitForNumDocsInAllReplicas(2, docCollection.getReplicas(EnumSet.of(Replica.Type.TLOG)), REPLICATION_TIMEOUT_SECS);\n    // Start back the node\n    if (removeReplica) {\n      CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\", Replica.Type.TLOG).process(cluster.getSolrClient());\n    } else {\n      ChaosMonkey.start(leaderJetty);\n    }\n    waitForState(\"Expected collection to be 1x2\", collectionName, clusterShape(1, 2));\n    // added replica should replicate from the leader\n    waitForNumDocsInAllReplicas(2, docCollection.getReplicas(EnumSet.of(Replica.Type.TLOG)), REPLICATION_TIMEOUT_SECS);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestTlogReplica#doReplaceLeader(boolean).mjava","pathOld":"/dev/null","sourceNew":"  /*\n   * validate leader election and that replication still happens on a new leader\n   */\n  private void doReplaceLeader(boolean removeReplica) throws Exception {\n    DocCollection docCollection = createAndWaitForCollection(1, 0, 2, 0);\n    \n    // Add a document and commit\n    cluster.getSolrClient().add(collectionName, new SolrInputDocument(\"id\", \"1\", \"foo\", \"bar\"));\n    cluster.getSolrClient().commit(collectionName);\n    Slice s = docCollection.getSlices().iterator().next();\n    try (HttpSolrClient leaderClient = getHttpSolrClient(s.getLeader().getCoreUrl())) {\n      assertEquals(1, leaderClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound());\n    }\n    \n    waitForNumDocsInAllReplicas(1, docCollection.getReplicas(EnumSet.of(Replica.Type.TLOG)), REPLICATION_TIMEOUT_SECS);\n    \n    // Delete leader replica from shard1\n    JettySolrRunner leaderJetty = null;\n    if (removeReplica) {\n      CollectionAdminRequest.deleteReplica(\n          collectionName, \n          \"shard1\", \n          s.getLeader().getName())\n      .process(cluster.getSolrClient());\n    } else {\n      leaderJetty = cluster.getReplicaJetty(s.getLeader());\n      ChaosMonkey.kill(leaderJetty);\n      waitForState(\"Leader replica not removed\", collectionName, clusterShape(1, 1));\n      // Wait for cluster state to be updated\n      waitForState(\"Replica state not updated in cluster state\", \n          collectionName, clusterStateReflectsActiveAndDownReplicas());\n    }\n    docCollection = assertNumberOfReplicas(0, 1, 0, true, true);\n    \n    // Wait until a new leader is elected\n    TimeOut t = new TimeOut(30, TimeUnit.SECONDS);\n    while (!t.hasTimedOut()) {\n      docCollection = getCollectionState(collectionName);\n      Replica leader = docCollection.getSlice(\"shard1\").getLeader();\n      if (leader != null && leader.isActive(cluster.getSolrClient().getZkStateReader().getClusterState().getLiveNodes())) {\n        break;\n      }\n      Thread.sleep(500);\n    }\n    assertFalse(\"Timeout waiting for a new leader to be elected\", t.hasTimedOut());\n    \n    // There is a new leader, I should be able to add and commit\n    cluster.getSolrClient().add(collectionName, new SolrInputDocument(\"id\", \"2\", \"foo\", \"zoo\"));\n    cluster.getSolrClient().commit(collectionName);\n    \n    // Queries should still work\n    waitForNumDocsInAllReplicas(2, docCollection.getReplicas(EnumSet.of(Replica.Type.TLOG)), REPLICATION_TIMEOUT_SECS);\n    // Start back the node\n    if (removeReplica) {\n      CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\", Replica.Type.TLOG).process(cluster.getSolrClient());\n    } else {\n      ChaosMonkey.start(leaderJetty);\n    }\n    waitForState(\"Expected collection to be 1x2\", collectionName, clusterShape(1, 2));\n    // added replica should replicate from the leader\n    waitForNumDocsInAllReplicas(2, docCollection.getReplicas(EnumSet.of(Replica.Type.TLOG)), REPLICATION_TIMEOUT_SECS);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","date":1513252583,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestTlogReplica#doReplaceLeader(boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestTlogReplica#doReplaceLeader(boolean).mjava","sourceNew":"  /*\n   * validate leader election and that replication still happens on a new leader\n   */\n  private void doReplaceLeader(boolean removeReplica) throws Exception {\n    DocCollection docCollection = createAndWaitForCollection(1, 0, 2, 0);\n    \n    // Add a document and commit\n    cluster.getSolrClient().add(collectionName, new SolrInputDocument(\"id\", \"1\", \"foo\", \"bar\"));\n    cluster.getSolrClient().commit(collectionName);\n    Slice s = docCollection.getSlices().iterator().next();\n    try (HttpSolrClient leaderClient = getHttpSolrClient(s.getLeader().getCoreUrl())) {\n      assertEquals(1, leaderClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound());\n    }\n    \n    waitForNumDocsInAllReplicas(1, docCollection.getReplicas(EnumSet.of(Replica.Type.TLOG)), REPLICATION_TIMEOUT_SECS);\n    \n    // Delete leader replica from shard1\n    JettySolrRunner leaderJetty = null;\n    if (removeReplica) {\n      CollectionAdminRequest.deleteReplica(\n          collectionName, \n          \"shard1\", \n          s.getLeader().getName())\n      .process(cluster.getSolrClient());\n    } else {\n      leaderJetty = cluster.getReplicaJetty(s.getLeader());\n      ChaosMonkey.kill(leaderJetty);\n      waitForState(\"Leader replica not removed\", collectionName, clusterShape(1, 1));\n      // Wait for cluster state to be updated\n      waitForState(\"Replica state not updated in cluster state\", \n          collectionName, clusterStateReflectsActiveAndDownReplicas());\n    }\n    docCollection = assertNumberOfReplicas(0, 1, 0, true, true);\n    \n    // Wait until a new leader is elected\n    TimeOut t = new TimeOut(30, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n    while (!t.hasTimedOut()) {\n      docCollection = getCollectionState(collectionName);\n      Replica leader = docCollection.getSlice(\"shard1\").getLeader();\n      if (leader != null && leader.isActive(cluster.getSolrClient().getZkStateReader().getClusterState().getLiveNodes())) {\n        break;\n      }\n      Thread.sleep(500);\n    }\n    assertFalse(\"Timeout waiting for a new leader to be elected\", t.hasTimedOut());\n    \n    // There is a new leader, I should be able to add and commit\n    cluster.getSolrClient().add(collectionName, new SolrInputDocument(\"id\", \"2\", \"foo\", \"zoo\"));\n    cluster.getSolrClient().commit(collectionName);\n    \n    // Queries should still work\n    waitForNumDocsInAllReplicas(2, docCollection.getReplicas(EnumSet.of(Replica.Type.TLOG)), REPLICATION_TIMEOUT_SECS);\n    // Start back the node\n    if (removeReplica) {\n      CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\", Replica.Type.TLOG).process(cluster.getSolrClient());\n    } else {\n      ChaosMonkey.start(leaderJetty);\n    }\n    waitForState(\"Expected collection to be 1x2\", collectionName, clusterShape(1, 2));\n    // added replica should replicate from the leader\n    waitForNumDocsInAllReplicas(2, docCollection.getReplicas(EnumSet.of(Replica.Type.TLOG)), REPLICATION_TIMEOUT_SECS);\n  }\n\n","sourceOld":"  /*\n   * validate leader election and that replication still happens on a new leader\n   */\n  private void doReplaceLeader(boolean removeReplica) throws Exception {\n    DocCollection docCollection = createAndWaitForCollection(1, 0, 2, 0);\n    \n    // Add a document and commit\n    cluster.getSolrClient().add(collectionName, new SolrInputDocument(\"id\", \"1\", \"foo\", \"bar\"));\n    cluster.getSolrClient().commit(collectionName);\n    Slice s = docCollection.getSlices().iterator().next();\n    try (HttpSolrClient leaderClient = getHttpSolrClient(s.getLeader().getCoreUrl())) {\n      assertEquals(1, leaderClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound());\n    }\n    \n    waitForNumDocsInAllReplicas(1, docCollection.getReplicas(EnumSet.of(Replica.Type.TLOG)), REPLICATION_TIMEOUT_SECS);\n    \n    // Delete leader replica from shard1\n    JettySolrRunner leaderJetty = null;\n    if (removeReplica) {\n      CollectionAdminRequest.deleteReplica(\n          collectionName, \n          \"shard1\", \n          s.getLeader().getName())\n      .process(cluster.getSolrClient());\n    } else {\n      leaderJetty = cluster.getReplicaJetty(s.getLeader());\n      ChaosMonkey.kill(leaderJetty);\n      waitForState(\"Leader replica not removed\", collectionName, clusterShape(1, 1));\n      // Wait for cluster state to be updated\n      waitForState(\"Replica state not updated in cluster state\", \n          collectionName, clusterStateReflectsActiveAndDownReplicas());\n    }\n    docCollection = assertNumberOfReplicas(0, 1, 0, true, true);\n    \n    // Wait until a new leader is elected\n    TimeOut t = new TimeOut(30, TimeUnit.SECONDS);\n    while (!t.hasTimedOut()) {\n      docCollection = getCollectionState(collectionName);\n      Replica leader = docCollection.getSlice(\"shard1\").getLeader();\n      if (leader != null && leader.isActive(cluster.getSolrClient().getZkStateReader().getClusterState().getLiveNodes())) {\n        break;\n      }\n      Thread.sleep(500);\n    }\n    assertFalse(\"Timeout waiting for a new leader to be elected\", t.hasTimedOut());\n    \n    // There is a new leader, I should be able to add and commit\n    cluster.getSolrClient().add(collectionName, new SolrInputDocument(\"id\", \"2\", \"foo\", \"zoo\"));\n    cluster.getSolrClient().commit(collectionName);\n    \n    // Queries should still work\n    waitForNumDocsInAllReplicas(2, docCollection.getReplicas(EnumSet.of(Replica.Type.TLOG)), REPLICATION_TIMEOUT_SECS);\n    // Start back the node\n    if (removeReplica) {\n      CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\", Replica.Type.TLOG).process(cluster.getSolrClient());\n    } else {\n      ChaosMonkey.start(leaderJetty);\n    }\n    waitForState(\"Expected collection to be 1x2\", collectionName, clusterShape(1, 2));\n    // added replica should replicate from the leader\n    waitForNumDocsInAllReplicas(2, docCollection.getReplicas(EnumSet.of(Replica.Type.TLOG)), REPLICATION_TIMEOUT_SECS);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestTlogReplica#doReplaceLeader(boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestTlogReplica#doReplaceLeader(boolean).mjava","sourceNew":"  /*\n   * validate leader election and that replication still happens on a new leader\n   */\n  private void doReplaceLeader(boolean removeReplica) throws Exception {\n    DocCollection docCollection = createAndWaitForCollection(1, 0, 2, 0);\n    \n    // Add a document and commit\n    cluster.getSolrClient().add(collectionName, new SolrInputDocument(\"id\", \"1\", \"foo\", \"bar\"));\n    cluster.getSolrClient().commit(collectionName);\n    Slice s = docCollection.getSlices().iterator().next();\n    try (HttpSolrClient leaderClient = getHttpSolrClient(s.getLeader().getCoreUrl())) {\n      assertEquals(1, leaderClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound());\n    }\n    \n    waitForNumDocsInAllReplicas(1, docCollection.getReplicas(EnumSet.of(Replica.Type.TLOG)), REPLICATION_TIMEOUT_SECS);\n    \n    // Delete leader replica from shard1\n    JettySolrRunner leaderJetty = null;\n    if (removeReplica) {\n      CollectionAdminRequest.deleteReplica(\n          collectionName, \n          \"shard1\", \n          s.getLeader().getName())\n      .process(cluster.getSolrClient());\n    } else {\n      leaderJetty = cluster.getReplicaJetty(s.getLeader());\n      leaderJetty.stop();\n      waitForState(\"Leader replica not removed\", collectionName, clusterShape(1, 1));\n      // Wait for cluster state to be updated\n      waitForState(\"Replica state not updated in cluster state\", \n          collectionName, clusterStateReflectsActiveAndDownReplicas());\n    }\n    docCollection = assertNumberOfReplicas(0, 1, 0, true, true);\n    \n    // Wait until a new leader is elected\n    TimeOut t = new TimeOut(30, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n    while (!t.hasTimedOut()) {\n      docCollection = getCollectionState(collectionName);\n      Replica leader = docCollection.getSlice(\"shard1\").getLeader();\n      if (leader != null && leader.isActive(cluster.getSolrClient().getZkStateReader().getClusterState().getLiveNodes())) {\n        break;\n      }\n      Thread.sleep(500);\n    }\n    assertFalse(\"Timeout waiting for a new leader to be elected\", t.hasTimedOut());\n    \n    // There is a new leader, I should be able to add and commit\n    cluster.getSolrClient().add(collectionName, new SolrInputDocument(\"id\", \"2\", \"foo\", \"zoo\"));\n    cluster.getSolrClient().commit(collectionName);\n    \n    // Queries should still work\n    waitForNumDocsInAllReplicas(2, docCollection.getReplicas(EnumSet.of(Replica.Type.TLOG)), REPLICATION_TIMEOUT_SECS);\n    // Start back the node\n    if (removeReplica) {\n      CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\", Replica.Type.TLOG).process(cluster.getSolrClient());\n    } else {\n      leaderJetty.stop();\n    }\n    waitForState(\"Expected collection to be 1x2\", collectionName, clusterShape(1, 2));\n    // added replica should replicate from the leader\n    waitForNumDocsInAllReplicas(2, docCollection.getReplicas(EnumSet.of(Replica.Type.TLOG)), REPLICATION_TIMEOUT_SECS);\n  }\n\n","sourceOld":"  /*\n   * validate leader election and that replication still happens on a new leader\n   */\n  private void doReplaceLeader(boolean removeReplica) throws Exception {\n    DocCollection docCollection = createAndWaitForCollection(1, 0, 2, 0);\n    \n    // Add a document and commit\n    cluster.getSolrClient().add(collectionName, new SolrInputDocument(\"id\", \"1\", \"foo\", \"bar\"));\n    cluster.getSolrClient().commit(collectionName);\n    Slice s = docCollection.getSlices().iterator().next();\n    try (HttpSolrClient leaderClient = getHttpSolrClient(s.getLeader().getCoreUrl())) {\n      assertEquals(1, leaderClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound());\n    }\n    \n    waitForNumDocsInAllReplicas(1, docCollection.getReplicas(EnumSet.of(Replica.Type.TLOG)), REPLICATION_TIMEOUT_SECS);\n    \n    // Delete leader replica from shard1\n    JettySolrRunner leaderJetty = null;\n    if (removeReplica) {\n      CollectionAdminRequest.deleteReplica(\n          collectionName, \n          \"shard1\", \n          s.getLeader().getName())\n      .process(cluster.getSolrClient());\n    } else {\n      leaderJetty = cluster.getReplicaJetty(s.getLeader());\n      ChaosMonkey.kill(leaderJetty);\n      waitForState(\"Leader replica not removed\", collectionName, clusterShape(1, 1));\n      // Wait for cluster state to be updated\n      waitForState(\"Replica state not updated in cluster state\", \n          collectionName, clusterStateReflectsActiveAndDownReplicas());\n    }\n    docCollection = assertNumberOfReplicas(0, 1, 0, true, true);\n    \n    // Wait until a new leader is elected\n    TimeOut t = new TimeOut(30, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n    while (!t.hasTimedOut()) {\n      docCollection = getCollectionState(collectionName);\n      Replica leader = docCollection.getSlice(\"shard1\").getLeader();\n      if (leader != null && leader.isActive(cluster.getSolrClient().getZkStateReader().getClusterState().getLiveNodes())) {\n        break;\n      }\n      Thread.sleep(500);\n    }\n    assertFalse(\"Timeout waiting for a new leader to be elected\", t.hasTimedOut());\n    \n    // There is a new leader, I should be able to add and commit\n    cluster.getSolrClient().add(collectionName, new SolrInputDocument(\"id\", \"2\", \"foo\", \"zoo\"));\n    cluster.getSolrClient().commit(collectionName);\n    \n    // Queries should still work\n    waitForNumDocsInAllReplicas(2, docCollection.getReplicas(EnumSet.of(Replica.Type.TLOG)), REPLICATION_TIMEOUT_SECS);\n    // Start back the node\n    if (removeReplica) {\n      CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\", Replica.Type.TLOG).process(cluster.getSolrClient());\n    } else {\n      ChaosMonkey.start(leaderJetty);\n    }\n    waitForState(\"Expected collection to be 1x2\", collectionName, clusterShape(1, 2));\n    // added replica should replicate from the leader\n    waitForNumDocsInAllReplicas(2, docCollection.getReplicas(EnumSet.of(Replica.Type.TLOG)), REPLICATION_TIMEOUT_SECS);\n  }\n\n","bugFix":["61c45e99cf6676da48f19d7511c73712ad39402b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f43ec94a8dd9ee8d862fee49bc3124423c77142b","date":1550813629,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestTlogReplica#doReplaceLeader(boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestTlogReplica#doReplaceLeader(boolean).mjava","sourceNew":"  /*\n   * validate leader election and that replication still happens on a new leader\n   */\n  private void doReplaceLeader(boolean removeReplica) throws Exception {\n    DocCollection docCollection = createAndWaitForCollection(1, 0, 2, 0);\n    \n    // Add a document and commit\n    cluster.getSolrClient().add(collectionName, new SolrInputDocument(\"id\", \"1\", \"foo\", \"bar\"));\n    cluster.getSolrClient().commit(collectionName);\n    Slice s = docCollection.getSlices().iterator().next();\n    try (HttpSolrClient leaderClient = getHttpSolrClient(s.getLeader().getCoreUrl())) {\n      assertEquals(1, leaderClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound());\n    }\n    \n    waitForNumDocsInAllReplicas(1, docCollection.getReplicas(EnumSet.of(Replica.Type.TLOG)), REPLICATION_TIMEOUT_SECS);\n    \n    // Delete leader replica from shard1\n    JettySolrRunner leaderJetty = null;\n    if (removeReplica) {\n      CollectionAdminRequest.deleteReplica(\n          collectionName, \n          \"shard1\", \n          s.getLeader().getName())\n      .process(cluster.getSolrClient());\n    } else {\n      leaderJetty = cluster.getReplicaJetty(s.getLeader());\n      leaderJetty.stop();\n      waitForState(\"Leader replica not removed\", collectionName, clusterShape(1, 1));\n      // Wait for cluster state to be updated\n      waitForState(\"Replica state not updated in cluster state\", \n          collectionName, clusterStateReflectsActiveAndDownReplicas());\n    }\n    docCollection = assertNumberOfReplicas(0, 1, 0, true, true);\n    \n    // Wait until a new leader is elected\n    TimeOut t = new TimeOut(30, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n    while (!t.hasTimedOut()) {\n      docCollection = getCollectionState(collectionName);\n      Replica leader = docCollection.getSlice(\"shard1\").getLeader();\n      if (leader != null && leader.isActive(cluster.getSolrClient().getZkStateReader().getClusterState().getLiveNodes())) {\n        break;\n      }\n      Thread.sleep(500);\n    }\n    assertFalse(\"Timeout waiting for a new leader to be elected\", t.hasTimedOut());\n    \n    // There is a new leader, I should be able to add and commit\n    cluster.getSolrClient().add(collectionName, new SolrInputDocument(\"id\", \"2\", \"foo\", \"zoo\"));\n    cluster.getSolrClient().commit(collectionName);\n    \n    // Queries should still work\n    waitForNumDocsInAllReplicas(2, docCollection.getReplicas(EnumSet.of(Replica.Type.TLOG)), REPLICATION_TIMEOUT_SECS);\n    // Start back the node\n    if (removeReplica) {\n      CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\", Replica.Type.TLOG).process(cluster.getSolrClient());\n    } else {\n      leaderJetty.start();\n    }\n    waitForState(\"Expected collection to be 1x2\", collectionName, clusterShape(1, 2));\n    // added replica should replicate from the leader\n    waitForNumDocsInAllReplicas(2, docCollection.getReplicas(EnumSet.of(Replica.Type.TLOG)), REPLICATION_TIMEOUT_SECS);\n  }\n\n","sourceOld":"  /*\n   * validate leader election and that replication still happens on a new leader\n   */\n  private void doReplaceLeader(boolean removeReplica) throws Exception {\n    DocCollection docCollection = createAndWaitForCollection(1, 0, 2, 0);\n    \n    // Add a document and commit\n    cluster.getSolrClient().add(collectionName, new SolrInputDocument(\"id\", \"1\", \"foo\", \"bar\"));\n    cluster.getSolrClient().commit(collectionName);\n    Slice s = docCollection.getSlices().iterator().next();\n    try (HttpSolrClient leaderClient = getHttpSolrClient(s.getLeader().getCoreUrl())) {\n      assertEquals(1, leaderClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound());\n    }\n    \n    waitForNumDocsInAllReplicas(1, docCollection.getReplicas(EnumSet.of(Replica.Type.TLOG)), REPLICATION_TIMEOUT_SECS);\n    \n    // Delete leader replica from shard1\n    JettySolrRunner leaderJetty = null;\n    if (removeReplica) {\n      CollectionAdminRequest.deleteReplica(\n          collectionName, \n          \"shard1\", \n          s.getLeader().getName())\n      .process(cluster.getSolrClient());\n    } else {\n      leaderJetty = cluster.getReplicaJetty(s.getLeader());\n      leaderJetty.stop();\n      waitForState(\"Leader replica not removed\", collectionName, clusterShape(1, 1));\n      // Wait for cluster state to be updated\n      waitForState(\"Replica state not updated in cluster state\", \n          collectionName, clusterStateReflectsActiveAndDownReplicas());\n    }\n    docCollection = assertNumberOfReplicas(0, 1, 0, true, true);\n    \n    // Wait until a new leader is elected\n    TimeOut t = new TimeOut(30, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n    while (!t.hasTimedOut()) {\n      docCollection = getCollectionState(collectionName);\n      Replica leader = docCollection.getSlice(\"shard1\").getLeader();\n      if (leader != null && leader.isActive(cluster.getSolrClient().getZkStateReader().getClusterState().getLiveNodes())) {\n        break;\n      }\n      Thread.sleep(500);\n    }\n    assertFalse(\"Timeout waiting for a new leader to be elected\", t.hasTimedOut());\n    \n    // There is a new leader, I should be able to add and commit\n    cluster.getSolrClient().add(collectionName, new SolrInputDocument(\"id\", \"2\", \"foo\", \"zoo\"));\n    cluster.getSolrClient().commit(collectionName);\n    \n    // Queries should still work\n    waitForNumDocsInAllReplicas(2, docCollection.getReplicas(EnumSet.of(Replica.Type.TLOG)), REPLICATION_TIMEOUT_SECS);\n    // Start back the node\n    if (removeReplica) {\n      CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\", Replica.Type.TLOG).process(cluster.getSolrClient());\n    } else {\n      leaderJetty.stop();\n    }\n    waitForState(\"Expected collection to be 1x2\", collectionName, clusterShape(1, 2));\n    // added replica should replicate from the leader\n    waitForNumDocsInAllReplicas(2, docCollection.getReplicas(EnumSet.of(Replica.Type.TLOG)), REPLICATION_TIMEOUT_SECS);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d2d6c361b65277d72b2f3dd0f83b9721875e6b4","date":1551083645,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestTlogReplica#doReplaceLeader(boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestTlogReplica#doReplaceLeader(boolean).mjava","sourceNew":"  /*\n   * validate leader election and that replication still happens on a new leader\n   */\n  private void doReplaceLeader(boolean removeReplica) throws Exception {\n    DocCollection docCollection = createAndWaitForCollection(1, 0, 2, 0);\n    \n    // Add a document and commit\n    cluster.getSolrClient().add(collectionName, new SolrInputDocument(\"id\", \"1\", \"foo\", \"bar\"));\n    cluster.getSolrClient().commit(collectionName);\n    Slice s = docCollection.getSlices().iterator().next();\n    try (HttpSolrClient leaderClient = getHttpSolrClient(s.getLeader().getCoreUrl())) {\n      assertEquals(1, leaderClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound());\n    }\n    \n    waitForNumDocsInAllReplicas(1, docCollection.getReplicas(EnumSet.of(Replica.Type.TLOG)), REPLICATION_TIMEOUT_SECS);\n    \n    // Delete leader replica from shard1\n    JettySolrRunner leaderJetty = null;\n    if (removeReplica) {\n      CollectionAdminRequest.deleteReplica(\n          collectionName, \n          \"shard1\", \n          s.getLeader().getName())\n      .process(cluster.getSolrClient());\n    } else {\n      leaderJetty = cluster.getReplicaJetty(s.getLeader());\n      leaderJetty.stop();\n      waitForState(\"Leader replica not removed\", collectionName, clusterShape(1, 1));\n      // Wait for cluster state to be updated\n      waitForState(\"Replica state not updated in cluster state\", \n          collectionName, clusterStateReflectsActiveAndDownReplicas());\n    }\n    docCollection = assertNumberOfReplicas(0, 1, 0, true, true);\n    \n    // Wait until a new leader is elected\n    TimeOut t = new TimeOut(30, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n    while (!t.hasTimedOut()) {\n      docCollection = getCollectionState(collectionName);\n      Replica leader = docCollection.getSlice(\"shard1\").getLeader();\n      if (leader != null && leader.isActive(cluster.getSolrClient().getZkStateReader().getClusterState().getLiveNodes())) {\n        break;\n      }\n      Thread.sleep(500);\n    }\n    assertFalse(\"Timeout waiting for a new leader to be elected\", t.hasTimedOut());\n    \n    // There is a new leader, I should be able to add and commit\n    cluster.getSolrClient().add(collectionName, new SolrInputDocument(\"id\", \"2\", \"foo\", \"zoo\"));\n    cluster.getSolrClient().commit(collectionName);\n    \n    // Queries should still work\n    waitForNumDocsInAllReplicas(2, docCollection.getReplicas(EnumSet.of(Replica.Type.TLOG)), REPLICATION_TIMEOUT_SECS);\n    // Start back the node\n    if (removeReplica) {\n      CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\", Replica.Type.TLOG).process(cluster.getSolrClient());\n    } else {\n      leaderJetty.start();\n    }\n    waitForState(\"Expected collection to be 1x2\", collectionName, clusterShape(1, 2));\n    // added replica should replicate from the leader\n    waitForNumDocsInAllReplicas(2, docCollection.getReplicas(EnumSet.of(Replica.Type.TLOG)), REPLICATION_TIMEOUT_SECS);\n  }\n\n","sourceOld":"  /*\n   * validate leader election and that replication still happens on a new leader\n   */\n  private void doReplaceLeader(boolean removeReplica) throws Exception {\n    DocCollection docCollection = createAndWaitForCollection(1, 0, 2, 0);\n    \n    // Add a document and commit\n    cluster.getSolrClient().add(collectionName, new SolrInputDocument(\"id\", \"1\", \"foo\", \"bar\"));\n    cluster.getSolrClient().commit(collectionName);\n    Slice s = docCollection.getSlices().iterator().next();\n    try (HttpSolrClient leaderClient = getHttpSolrClient(s.getLeader().getCoreUrl())) {\n      assertEquals(1, leaderClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound());\n    }\n    \n    waitForNumDocsInAllReplicas(1, docCollection.getReplicas(EnumSet.of(Replica.Type.TLOG)), REPLICATION_TIMEOUT_SECS);\n    \n    // Delete leader replica from shard1\n    JettySolrRunner leaderJetty = null;\n    if (removeReplica) {\n      CollectionAdminRequest.deleteReplica(\n          collectionName, \n          \"shard1\", \n          s.getLeader().getName())\n      .process(cluster.getSolrClient());\n    } else {\n      leaderJetty = cluster.getReplicaJetty(s.getLeader());\n      leaderJetty.stop();\n      waitForState(\"Leader replica not removed\", collectionName, clusterShape(1, 1));\n      // Wait for cluster state to be updated\n      waitForState(\"Replica state not updated in cluster state\", \n          collectionName, clusterStateReflectsActiveAndDownReplicas());\n    }\n    docCollection = assertNumberOfReplicas(0, 1, 0, true, true);\n    \n    // Wait until a new leader is elected\n    TimeOut t = new TimeOut(30, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n    while (!t.hasTimedOut()) {\n      docCollection = getCollectionState(collectionName);\n      Replica leader = docCollection.getSlice(\"shard1\").getLeader();\n      if (leader != null && leader.isActive(cluster.getSolrClient().getZkStateReader().getClusterState().getLiveNodes())) {\n        break;\n      }\n      Thread.sleep(500);\n    }\n    assertFalse(\"Timeout waiting for a new leader to be elected\", t.hasTimedOut());\n    \n    // There is a new leader, I should be able to add and commit\n    cluster.getSolrClient().add(collectionName, new SolrInputDocument(\"id\", \"2\", \"foo\", \"zoo\"));\n    cluster.getSolrClient().commit(collectionName);\n    \n    // Queries should still work\n    waitForNumDocsInAllReplicas(2, docCollection.getReplicas(EnumSet.of(Replica.Type.TLOG)), REPLICATION_TIMEOUT_SECS);\n    // Start back the node\n    if (removeReplica) {\n      CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\", Replica.Type.TLOG).process(cluster.getSolrClient());\n    } else {\n      leaderJetty.stop();\n    }\n    waitForState(\"Expected collection to be 1x2\", collectionName, clusterShape(1, 2));\n    // added replica should replicate from the leader\n    waitForNumDocsInAllReplicas(2, docCollection.getReplicas(EnumSet.of(Replica.Type.TLOG)), REPLICATION_TIMEOUT_SECS);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15","date":1554259533,"type":3,"author":"Gus Heck","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestTlogReplica#doReplaceLeader(boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestTlogReplica#doReplaceLeader(boolean).mjava","sourceNew":"  /*\n   * validate leader election and that replication still happens on a new leader\n   */\n  private void doReplaceLeader(boolean removeReplica) throws Exception {\n    DocCollection docCollection = createAndWaitForCollection(1, 0, 2, 0);\n\n    // Add a document and commit\n    cluster.getSolrClient().add(collectionName, new SolrInputDocument(\"id\", \"1\", \"foo\", \"bar\"));\n    cluster.getSolrClient().commit(collectionName);\n    Slice s = docCollection.getSlices().iterator().next();\n    try (HttpSolrClient leaderClient = getHttpSolrClient(s.getLeader().getCoreUrl())) {\n      assertEquals(1, leaderClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound());\n    }\n\n    waitForNumDocsInAllReplicas(1, docCollection.getReplicas(EnumSet.of(Replica.Type.TLOG)), REPLICATION_TIMEOUT_SECS);\n\n    // Delete leader replica from shard1\n    JettySolrRunner leaderJetty = null;\n    if (removeReplica) {\n      CollectionAdminRequest.deleteReplica(\n          collectionName,\n          \"shard1\",\n          s.getLeader().getName())\n      .process(cluster.getSolrClient());\n    } else {\n      leaderJetty = cluster.getReplicaJetty(s.getLeader());\n      leaderJetty.stop();\n      waitForState(\"Leader replica not removed\", collectionName, clusterShape(1, 1));\n      // Wait for cluster state to be updated\n      waitForState(\"Replica state not updated in cluster state\",\n          collectionName, clusterStateReflectsActiveAndDownReplicas());\n    }\n    docCollection = assertNumberOfReplicas(0, 1, 0, true, true);\n\n    // Wait until a new leader is elected\n    TimeOut t = new TimeOut(30, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n    while (!t.hasTimedOut()) {\n      docCollection = getCollectionState(collectionName);\n      Replica leader = docCollection.getSlice(\"shard1\").getLeader();\n      if (leader != null && leader.isActive(cluster.getSolrClient().getZkStateReader().getClusterState().getLiveNodes())) {\n        break;\n      }\n      Thread.sleep(500);\n    }\n    assertFalse(\"Timeout waiting for a new leader to be elected\", t.hasTimedOut());\n\n    // There is a new leader, I should be able to add and commit\n    cluster.getSolrClient().add(collectionName, new SolrInputDocument(\"id\", \"2\", \"foo\", \"zoo\"));\n    cluster.getSolrClient().commit(collectionName);\n\n    // Queries should still work\n    waitForNumDocsInAllReplicas(2, docCollection.getReplicas(EnumSet.of(Replica.Type.TLOG)), REPLICATION_TIMEOUT_SECS);\n    // Start back the node\n    if (removeReplica) {\n      CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\", Replica.Type.TLOG).process(cluster.getSolrClient());\n    } else {\n      leaderJetty.start();\n    }\n    waitForState(\"Expected collection to be 1x2\", collectionName, clusterShape(1, 2));\n    // added replica should replicate from the leader\n    waitForNumDocsInAllReplicas(2, docCollection.getReplicas(EnumSet.of(Replica.Type.TLOG)), REPLICATION_TIMEOUT_SECS);\n  }\n\n","sourceOld":"  /*\n   * validate leader election and that replication still happens on a new leader\n   */\n  private void doReplaceLeader(boolean removeReplica) throws Exception {\n    DocCollection docCollection = createAndWaitForCollection(1, 0, 2, 0);\n    \n    // Add a document and commit\n    cluster.getSolrClient().add(collectionName, new SolrInputDocument(\"id\", \"1\", \"foo\", \"bar\"));\n    cluster.getSolrClient().commit(collectionName);\n    Slice s = docCollection.getSlices().iterator().next();\n    try (HttpSolrClient leaderClient = getHttpSolrClient(s.getLeader().getCoreUrl())) {\n      assertEquals(1, leaderClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound());\n    }\n    \n    waitForNumDocsInAllReplicas(1, docCollection.getReplicas(EnumSet.of(Replica.Type.TLOG)), REPLICATION_TIMEOUT_SECS);\n    \n    // Delete leader replica from shard1\n    JettySolrRunner leaderJetty = null;\n    if (removeReplica) {\n      CollectionAdminRequest.deleteReplica(\n          collectionName, \n          \"shard1\", \n          s.getLeader().getName())\n      .process(cluster.getSolrClient());\n    } else {\n      leaderJetty = cluster.getReplicaJetty(s.getLeader());\n      leaderJetty.stop();\n      waitForState(\"Leader replica not removed\", collectionName, clusterShape(1, 1));\n      // Wait for cluster state to be updated\n      waitForState(\"Replica state not updated in cluster state\", \n          collectionName, clusterStateReflectsActiveAndDownReplicas());\n    }\n    docCollection = assertNumberOfReplicas(0, 1, 0, true, true);\n    \n    // Wait until a new leader is elected\n    TimeOut t = new TimeOut(30, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n    while (!t.hasTimedOut()) {\n      docCollection = getCollectionState(collectionName);\n      Replica leader = docCollection.getSlice(\"shard1\").getLeader();\n      if (leader != null && leader.isActive(cluster.getSolrClient().getZkStateReader().getClusterState().getLiveNodes())) {\n        break;\n      }\n      Thread.sleep(500);\n    }\n    assertFalse(\"Timeout waiting for a new leader to be elected\", t.hasTimedOut());\n    \n    // There is a new leader, I should be able to add and commit\n    cluster.getSolrClient().add(collectionName, new SolrInputDocument(\"id\", \"2\", \"foo\", \"zoo\"));\n    cluster.getSolrClient().commit(collectionName);\n    \n    // Queries should still work\n    waitForNumDocsInAllReplicas(2, docCollection.getReplicas(EnumSet.of(Replica.Type.TLOG)), REPLICATION_TIMEOUT_SECS);\n    // Start back the node\n    if (removeReplica) {\n      CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\", Replica.Type.TLOG).process(cluster.getSolrClient());\n    } else {\n      leaderJetty.start();\n    }\n    waitForState(\"Expected collection to be 1x2\", collectionName, clusterShape(1, 2));\n    // added replica should replicate from the leader\n    waitForNumDocsInAllReplicas(2, docCollection.getReplicas(EnumSet.of(Replica.Type.TLOG)), REPLICATION_TIMEOUT_SECS);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bf5b93713fb0adca4f2a88e0a629554bf1ac2866","date":1571852796,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestTlogReplica#doReplaceLeader(boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestTlogReplica#doReplaceLeader(boolean).mjava","sourceNew":"  /*\n   * validate leader election and that replication still happens on a new leader\n   */\n  private void doReplaceLeader(boolean removeReplica) throws Exception {\n    DocCollection docCollection = createAndWaitForCollection(1, 0, 2, 0);\n\n    // Add a document and commit\n    cluster.getSolrClient().add(collectionName, new SolrInputDocument(\"id\", \"1\", \"foo\", \"bar\"));\n    cluster.getSolrClient().commit(collectionName);\n    Slice s = docCollection.getSlices().iterator().next();\n    try (HttpSolrClient leaderClient = getHttpSolrClient(s.getLeader().getCoreUrl())) {\n      assertEquals(1, leaderClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound());\n    }\n\n    waitForNumDocsInAllReplicas(1, docCollection.getReplicas(EnumSet.of(Replica.Type.TLOG)), REPLICATION_TIMEOUT_SECS);\n\n    // Delete leader replica from shard1\n    JettySolrRunner leaderJetty = null;\n    if (removeReplica) {\n      CollectionAdminRequest.deleteReplica(\n          collectionName,\n          \"shard1\",\n          s.getLeader().getName())\n      .process(cluster.getSolrClient());\n    } else {\n      leaderJetty = cluster.getReplicaJetty(s.getLeader());\n      leaderJetty.stop();\n      waitForState(\"Leader replica not removed\", collectionName, clusterShape(1, 1));\n      // Wait for cluster state to be updated\n      waitForState(\"Replica state not updated in cluster state\",\n          collectionName, clusterStateReflectsActiveAndDownReplicas());\n    }\n    docCollection = assertNumberOfReplicas(0, 1, 0, true, true);\n\n    // Wait until a new leader is elected\n    waitForLeaderChange(leaderJetty, \"shard1\");\n    \n    // There is a new leader, I should be able to add and commit\n    cluster.getSolrClient().add(collectionName, new SolrInputDocument(\"id\", \"2\", \"foo\", \"zoo\"));\n    cluster.getSolrClient().commit(collectionName);\n\n    // Queries should still work\n    waitForNumDocsInAllReplicas(2, docCollection.getReplicas(EnumSet.of(Replica.Type.TLOG)), REPLICATION_TIMEOUT_SECS);\n    // Start back the node\n    if (removeReplica) {\n      addReplicaWithRetries();\n      \n    } else {\n      leaderJetty.start();\n    }\n    waitForState(\"Expected collection to be 1x2\", collectionName, clusterShape(1, 2));\n    // added replica should replicate from the leader\n    waitForNumDocsInAllReplicas(2, docCollection.getReplicas(EnumSet.of(Replica.Type.TLOG)), REPLICATION_TIMEOUT_SECS);\n  }\n\n","sourceOld":"  /*\n   * validate leader election and that replication still happens on a new leader\n   */\n  private void doReplaceLeader(boolean removeReplica) throws Exception {\n    DocCollection docCollection = createAndWaitForCollection(1, 0, 2, 0);\n\n    // Add a document and commit\n    cluster.getSolrClient().add(collectionName, new SolrInputDocument(\"id\", \"1\", \"foo\", \"bar\"));\n    cluster.getSolrClient().commit(collectionName);\n    Slice s = docCollection.getSlices().iterator().next();\n    try (HttpSolrClient leaderClient = getHttpSolrClient(s.getLeader().getCoreUrl())) {\n      assertEquals(1, leaderClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound());\n    }\n\n    waitForNumDocsInAllReplicas(1, docCollection.getReplicas(EnumSet.of(Replica.Type.TLOG)), REPLICATION_TIMEOUT_SECS);\n\n    // Delete leader replica from shard1\n    JettySolrRunner leaderJetty = null;\n    if (removeReplica) {\n      CollectionAdminRequest.deleteReplica(\n          collectionName,\n          \"shard1\",\n          s.getLeader().getName())\n      .process(cluster.getSolrClient());\n    } else {\n      leaderJetty = cluster.getReplicaJetty(s.getLeader());\n      leaderJetty.stop();\n      waitForState(\"Leader replica not removed\", collectionName, clusterShape(1, 1));\n      // Wait for cluster state to be updated\n      waitForState(\"Replica state not updated in cluster state\",\n          collectionName, clusterStateReflectsActiveAndDownReplicas());\n    }\n    docCollection = assertNumberOfReplicas(0, 1, 0, true, true);\n\n    // Wait until a new leader is elected\n    TimeOut t = new TimeOut(30, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n    while (!t.hasTimedOut()) {\n      docCollection = getCollectionState(collectionName);\n      Replica leader = docCollection.getSlice(\"shard1\").getLeader();\n      if (leader != null && leader.isActive(cluster.getSolrClient().getZkStateReader().getClusterState().getLiveNodes())) {\n        break;\n      }\n      Thread.sleep(500);\n    }\n    assertFalse(\"Timeout waiting for a new leader to be elected\", t.hasTimedOut());\n\n    // There is a new leader, I should be able to add and commit\n    cluster.getSolrClient().add(collectionName, new SolrInputDocument(\"id\", \"2\", \"foo\", \"zoo\"));\n    cluster.getSolrClient().commit(collectionName);\n\n    // Queries should still work\n    waitForNumDocsInAllReplicas(2, docCollection.getReplicas(EnumSet.of(Replica.Type.TLOG)), REPLICATION_TIMEOUT_SECS);\n    // Start back the node\n    if (removeReplica) {\n      CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\", Replica.Type.TLOG).process(cluster.getSolrClient());\n    } else {\n      leaderJetty.start();\n    }\n    waitForState(\"Expected collection to be 1x2\", collectionName, clusterShape(1, 2));\n    // added replica should replicate from the leader\n    waitForNumDocsInAllReplicas(2, docCollection.getReplicas(EnumSet.of(Replica.Type.TLOG)), REPLICATION_TIMEOUT_SECS);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","61c45e99cf6676da48f19d7511c73712ad39402b"],"61c45e99cf6676da48f19d7511c73712ad39402b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f43ec94a8dd9ee8d862fee49bc3124423c77142b":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bf5b93713fb0adca4f2a88e0a629554bf1ac2866":["0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["61c45e99cf6676da48f19d7511c73712ad39402b"],"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15":["0d2d6c361b65277d72b2f3dd0f83b9721875e6b4"],"0d2d6c361b65277d72b2f3dd0f83b9721875e6b4":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f","f43ec94a8dd9ee8d862fee49bc3124423c77142b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bf5b93713fb0adca4f2a88e0a629554bf1ac2866"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"61c45e99cf6676da48f19d7511c73712ad39402b":["e9017cf144952056066919f1ebc7897ff9bd71b1","1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"f43ec94a8dd9ee8d862fee49bc3124423c77142b":["0d2d6c361b65277d72b2f3dd0f83b9721875e6b4"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["f43ec94a8dd9ee8d862fee49bc3124423c77142b","0d2d6c361b65277d72b2f3dd0f83b9721875e6b4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e9017cf144952056066919f1ebc7897ff9bd71b1","61c45e99cf6676da48f19d7511c73712ad39402b"],"bf5b93713fb0adca4f2a88e0a629554bf1ac2866":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15":["bf5b93713fb0adca4f2a88e0a629554bf1ac2866"],"0d2d6c361b65277d72b2f3dd0f83b9721875e6b4":["0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}