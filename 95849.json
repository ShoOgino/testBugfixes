{"path":"lucene/src/java/org/apache/lucene/index/IndexWriterConfig#setIndexDeletionPolicy(IndexDeletionPolicy).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriterConfig#setIndexDeletionPolicy(IndexDeletionPolicy).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriterConfig#setIndexDeletionPolicy(IndexDeletionPolicy).mjava","sourceNew":"  /**\n   * Expert: allows an optional {@link IndexDeletionPolicy} implementation to be\n   * specified. You can use this to control when prior commits are deleted from\n   * the index. The default policy is {@link KeepOnlyLastCommitDeletionPolicy}\n   * which removes all prior commits as soon as a new commit is done (this\n   * matches behavior before 2.2). Creating your own policy can allow you to\n   * explicitly keep previous \"point in time\" commits alive in the index for\n   * some time, to allow readers to refresh to the new commit without having the\n   * old commit deleted out from under them. This is necessary on filesystems\n   * like NFS that do not support \"delete on last close\" semantics, which\n   * Lucene's \"point in time\" search normally relies on.\n   * <p>\n   * <b>NOTE:</b> the deletion policy cannot be null. If <code>null</code> is\n   * passed, the deletion policy will be set to the default.\n   */\n  public IndexWriterConfig setIndexDeletionPolicy(IndexDeletionPolicy delPolicy) {\n    this.delPolicy = delPolicy == null ? new KeepOnlyLastCommitDeletionPolicy() : delPolicy;\n    return this;\n  }\n\n","sourceOld":"  /**\n   * Expert: allows an optional {@link IndexDeletionPolicy} implementation to be\n   * specified. You can use this to control when prior commits are deleted from\n   * the index. The default policy is {@link KeepOnlyLastCommitDeletionPolicy}\n   * which removes all prior commits as soon as a new commit is done (this\n   * matches behavior before 2.2). Creating your own policy can allow you to\n   * explicitly keep previous \"point in time\" commits alive in the index for\n   * some time, to allow readers to refresh to the new commit without having the\n   * old commit deleted out from under them. This is necessary on filesystems\n   * like NFS that do not support \"delete on last close\" semantics, which\n   * Lucene's \"point in time\" search normally relies on.\n   * <p>\n   * <b>NOTE:</b> the deletion policy cannot be null. If <code>null</code> is\n   * passed, the deletion policy will be set to the default.\n   */\n  public IndexWriterConfig setIndexDeletionPolicy(IndexDeletionPolicy delPolicy) {\n    this.delPolicy = delPolicy == null ? new KeepOnlyLastCommitDeletionPolicy() : delPolicy;\n    return this;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"00b21520fafb9860ce0318d7be5ea84619c185ad","date":1300444600,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriterConfig#setIndexDeletionPolicy(IndexDeletionPolicy).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriterConfig#setIndexDeletionPolicy(IndexDeletionPolicy).mjava","sourceNew":"  /**\n   * Expert: allows an optional {@link IndexDeletionPolicy} implementation to be\n   * specified. You can use this to control when prior commits are deleted from\n   * the index. The default policy is {@link KeepOnlyLastCommitDeletionPolicy}\n   * which removes all prior commits as soon as a new commit is done (this\n   * matches behavior before 2.2). Creating your own policy can allow you to\n   * explicitly keep previous \"point in time\" commits alive in the index for\n   * some time, to allow readers to refresh to the new commit without having the\n   * old commit deleted out from under them. This is necessary on filesystems\n   * like NFS that do not support \"delete on last close\" semantics, which\n   * Lucene's \"point in time\" search normally relies on.\n   * <p>\n   * <b>NOTE:</b> the deletion policy cannot be null. If <code>null</code> is\n   * passed, the deletion policy will be set to the default.\n   *\n   * <p>Only takes effect when IndexWriter is first created. \n   */\n  public IndexWriterConfig setIndexDeletionPolicy(IndexDeletionPolicy delPolicy) {\n    this.delPolicy = delPolicy == null ? new KeepOnlyLastCommitDeletionPolicy() : delPolicy;\n    return this;\n  }\n\n","sourceOld":"  /**\n   * Expert: allows an optional {@link IndexDeletionPolicy} implementation to be\n   * specified. You can use this to control when prior commits are deleted from\n   * the index. The default policy is {@link KeepOnlyLastCommitDeletionPolicy}\n   * which removes all prior commits as soon as a new commit is done (this\n   * matches behavior before 2.2). Creating your own policy can allow you to\n   * explicitly keep previous \"point in time\" commits alive in the index for\n   * some time, to allow readers to refresh to the new commit without having the\n   * old commit deleted out from under them. This is necessary on filesystems\n   * like NFS that do not support \"delete on last close\" semantics, which\n   * Lucene's \"point in time\" search normally relies on.\n   * <p>\n   * <b>NOTE:</b> the deletion policy cannot be null. If <code>null</code> is\n   * passed, the deletion policy will be set to the default.\n   */\n  public IndexWriterConfig setIndexDeletionPolicy(IndexDeletionPolicy delPolicy) {\n    this.delPolicy = delPolicy == null ? new KeepOnlyLastCommitDeletionPolicy() : delPolicy;\n    return this;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriterConfig#setIndexDeletionPolicy(IndexDeletionPolicy).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriterConfig#setIndexDeletionPolicy(IndexDeletionPolicy).mjava","sourceNew":"  /**\n   * Expert: allows an optional {@link IndexDeletionPolicy} implementation to be\n   * specified. You can use this to control when prior commits are deleted from\n   * the index. The default policy is {@link KeepOnlyLastCommitDeletionPolicy}\n   * which removes all prior commits as soon as a new commit is done (this\n   * matches behavior before 2.2). Creating your own policy can allow you to\n   * explicitly keep previous \"point in time\" commits alive in the index for\n   * some time, to allow readers to refresh to the new commit without having the\n   * old commit deleted out from under them. This is necessary on filesystems\n   * like NFS that do not support \"delete on last close\" semantics, which\n   * Lucene's \"point in time\" search normally relies on.\n   * <p>\n   * <b>NOTE:</b> the deletion policy cannot be null. If <code>null</code> is\n   * passed, the deletion policy will be set to the default.\n   *\n   * <p>Only takes effect when IndexWriter is first created. \n   */\n  public IndexWriterConfig setIndexDeletionPolicy(IndexDeletionPolicy delPolicy) {\n    this.delPolicy = delPolicy == null ? new KeepOnlyLastCommitDeletionPolicy() : delPolicy;\n    return this;\n  }\n\n","sourceOld":"  /**\n   * Expert: allows an optional {@link IndexDeletionPolicy} implementation to be\n   * specified. You can use this to control when prior commits are deleted from\n   * the index. The default policy is {@link KeepOnlyLastCommitDeletionPolicy}\n   * which removes all prior commits as soon as a new commit is done (this\n   * matches behavior before 2.2). Creating your own policy can allow you to\n   * explicitly keep previous \"point in time\" commits alive in the index for\n   * some time, to allow readers to refresh to the new commit without having the\n   * old commit deleted out from under them. This is necessary on filesystems\n   * like NFS that do not support \"delete on last close\" semantics, which\n   * Lucene's \"point in time\" search normally relies on.\n   * <p>\n   * <b>NOTE:</b> the deletion policy cannot be null. If <code>null</code> is\n   * passed, the deletion policy will be set to the default.\n   */\n  public IndexWriterConfig setIndexDeletionPolicy(IndexDeletionPolicy delPolicy) {\n    this.delPolicy = delPolicy == null ? new KeepOnlyLastCommitDeletionPolicy() : delPolicy;\n    return this;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0ef0193974807e4bddf5432a6b0287fe4d6c9df","date":1301476645,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriterConfig#setIndexDeletionPolicy(IndexDeletionPolicy).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriterConfig#setIndexDeletionPolicy(IndexDeletionPolicy).mjava","sourceNew":"  /**\n   * Expert: allows an optional {@link IndexDeletionPolicy} implementation to be\n   * specified. You can use this to control when prior commits are deleted from\n   * the index. The default policy is {@link KeepOnlyLastCommitDeletionPolicy}\n   * which removes all prior commits as soon as a new commit is done (this\n   * matches behavior before 2.2). Creating your own policy can allow you to\n   * explicitly keep previous \"point in time\" commits alive in the index for\n   * some time, to allow readers to refresh to the new commit without having the\n   * old commit deleted out from under them. This is necessary on filesystems\n   * like NFS that do not support \"delete on last close\" semantics, which\n   * Lucene's \"point in time\" search normally relies on.\n   * <p>\n   * <b>NOTE:</b> the deletion policy cannot be null. If <code>null</code> is\n   * passed, the deletion policy will be set to the default.\n   *\n   * <p>Only takes effect when IndexWriter is first created. \n   */\n  public IndexWriterConfig setIndexDeletionPolicy(IndexDeletionPolicy delPolicy) {\n    this.delPolicy = delPolicy == null ? new KeepOnlyLastCommitDeletionPolicy() : delPolicy;\n    return this;\n  }\n\n","sourceOld":"  /**\n   * Expert: allows an optional {@link IndexDeletionPolicy} implementation to be\n   * specified. You can use this to control when prior commits are deleted from\n   * the index. The default policy is {@link KeepOnlyLastCommitDeletionPolicy}\n   * which removes all prior commits as soon as a new commit is done (this\n   * matches behavior before 2.2). Creating your own policy can allow you to\n   * explicitly keep previous \"point in time\" commits alive in the index for\n   * some time, to allow readers to refresh to the new commit without having the\n   * old commit deleted out from under them. This is necessary on filesystems\n   * like NFS that do not support \"delete on last close\" semantics, which\n   * Lucene's \"point in time\" search normally relies on.\n   * <p>\n   * <b>NOTE:</b> the deletion policy cannot be null. If <code>null</code> is\n   * passed, the deletion policy will be set to the default.\n   */\n  public IndexWriterConfig setIndexDeletionPolicy(IndexDeletionPolicy delPolicy) {\n    this.delPolicy = delPolicy == null ? new KeepOnlyLastCommitDeletionPolicy() : delPolicy;\n    return this;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriterConfig#setIndexDeletionPolicy(IndexDeletionPolicy).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriterConfig#setIndexDeletionPolicy(IndexDeletionPolicy).mjava","sourceNew":"  /**\n   * Expert: allows an optional {@link IndexDeletionPolicy} implementation to be\n   * specified. You can use this to control when prior commits are deleted from\n   * the index. The default policy is {@link KeepOnlyLastCommitDeletionPolicy}\n   * which removes all prior commits as soon as a new commit is done (this\n   * matches behavior before 2.2). Creating your own policy can allow you to\n   * explicitly keep previous \"point in time\" commits alive in the index for\n   * some time, to allow readers to refresh to the new commit without having the\n   * old commit deleted out from under them. This is necessary on filesystems\n   * like NFS that do not support \"delete on last close\" semantics, which\n   * Lucene's \"point in time\" search normally relies on.\n   * <p>\n   * <b>NOTE:</b> the deletion policy cannot be null. If <code>null</code> is\n   * passed, the deletion policy will be set to the default.\n   *\n   * <p>Only takes effect when IndexWriter is first created. \n   */\n  public IndexWriterConfig setIndexDeletionPolicy(IndexDeletionPolicy delPolicy) {\n    this.delPolicy = delPolicy == null ? new KeepOnlyLastCommitDeletionPolicy() : delPolicy;\n    return this;\n  }\n\n","sourceOld":"  /**\n   * Expert: allows an optional {@link IndexDeletionPolicy} implementation to be\n   * specified. You can use this to control when prior commits are deleted from\n   * the index. The default policy is {@link KeepOnlyLastCommitDeletionPolicy}\n   * which removes all prior commits as soon as a new commit is done (this\n   * matches behavior before 2.2). Creating your own policy can allow you to\n   * explicitly keep previous \"point in time\" commits alive in the index for\n   * some time, to allow readers to refresh to the new commit without having the\n   * old commit deleted out from under them. This is necessary on filesystems\n   * like NFS that do not support \"delete on last close\" semantics, which\n   * Lucene's \"point in time\" search normally relies on.\n   * <p>\n   * <b>NOTE:</b> the deletion policy cannot be null. If <code>null</code> is\n   * passed, the deletion policy will be set to the default.\n   *\n   * <p>Only takes effect when IndexWriter is first created. \n   */\n  public IndexWriterConfig setIndexDeletionPolicy(IndexDeletionPolicy delPolicy) {\n    this.delPolicy = delPolicy == null ? new KeepOnlyLastCommitDeletionPolicy() : delPolicy;\n    return this;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["9454a6510e2db155fb01faa5c049b06ece95fab9","00b21520fafb9860ce0318d7be5ea84619c185ad"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["9454a6510e2db155fb01faa5c049b06ece95fab9","00b21520fafb9860ce0318d7be5ea84619c185ad"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["00b21520fafb9860ce0318d7be5ea84619c185ad"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"00b21520fafb9860ce0318d7be5ea84619c185ad":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":[],"d619839baa8ce5503e496b94a9e42ad6f079293f":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"00b21520fafb9860ce0318d7be5ea84619c185ad":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","00b21520fafb9860ce0318d7be5ea84619c185ad"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}