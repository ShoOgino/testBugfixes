{"path":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleRequestStatus(SolrQueryRequest,SolrQueryResponse).mjava","commits":[{"id":"058f5a3debcfa0ea477da3eabb4cbe2ec0fac211","date":1394784078,"type":0,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleRequestStatus(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"/dev/null","sourceNew":"  private void handleRequestStatus(SolrQueryRequest req, SolrQueryResponse rsp) throws KeeperException, InterruptedException {\n    log.debug(\"REQUESTSTATUS action invoked: \" + req.getParamString());\n    req.getParams().required().check(REQUESTID);\n    Map<String, Object> props = new HashMap<String, Object>();\n    props.put(Overseer.QUEUE_OPERATION, OverseerCollectionProcessor.REQUESTSTATUS);\n    props.put(REQUESTID, req.getParams().get(REQUESTID));\n    ZkNodeProps m = new ZkNodeProps(props);\n    handleResponse(OverseerCollectionProcessor.REQUESTSTATUS, m, rsp);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5eb7299fddbea34e76b950854f150f14b895ba68","date":1396327974,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleRequestStatus(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleRequestStatus(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  private void handleRequestStatus(SolrQueryRequest req, SolrQueryResponse rsp) throws KeeperException, InterruptedException {\n    log.debug(\"REQUESTSTATUS action invoked: \" + req.getParamString());\n    req.getParams().required().check(REQUESTID);\n\n    String requestId = req.getParams().get(REQUESTID);\n\n    if (requestId.equals(\"-1\")) {\n      // Special taskId (-1), clears up the request state maps.\n      if(requestId.equals(\"-1\")) {\n        coreContainer.getZkController().getOverseerCompletedMap().clear();\n        coreContainer.getZkController().getOverseerFailureMap().clear();\n        return;\n      }\n    } else {\n      NamedList<Object> results = new NamedList<>();\n      if (coreContainer.getZkController().getOverseerCompletedMap().contains(requestId)) {\n        SimpleOrderedMap success = new SimpleOrderedMap();\n        success.add(\"state\", \"completed\");\n        success.add(\"msg\", \"found \" + requestId + \" in completed tasks\");\n        results.add(\"status\", success);\n      } else if (coreContainer.getZkController().getOverseerRunningMap().contains(requestId)) {\n        SimpleOrderedMap success = new SimpleOrderedMap();\n        success.add(\"state\", \"running\");\n        success.add(\"msg\", \"found \" + requestId + \" in submitted tasks\");\n        results.add(\"status\", success);\n      } else if (coreContainer.getZkController().getOverseerFailureMap().contains(requestId)) {\n        SimpleOrderedMap success = new SimpleOrderedMap();\n        success.add(\"state\", \"failed\");\n        success.add(\"msg\", \"found \" + requestId + \" in failed tasks\");\n        results.add(\"status\", success);\n      } else {\n        SimpleOrderedMap failure = new SimpleOrderedMap();\n        failure.add(\"state\", \"notfound\");\n        failure.add(\"msg\", \"Did not find taskid [\" + requestId + \"] in any tasks queue\");\n        results.add(\"status\", failure);\n      }\n      SolrResponse response = new OverseerSolrResponse(results);\n\n      rsp.getValues().addAll(response.getResponse());\n    }\n  }\n\n","sourceOld":"  private void handleRequestStatus(SolrQueryRequest req, SolrQueryResponse rsp) throws KeeperException, InterruptedException {\n    log.debug(\"REQUESTSTATUS action invoked: \" + req.getParamString());\n    req.getParams().required().check(REQUESTID);\n    Map<String, Object> props = new HashMap<String, Object>();\n    props.put(Overseer.QUEUE_OPERATION, OverseerCollectionProcessor.REQUESTSTATUS);\n    props.put(REQUESTID, req.getParams().get(REQUESTID));\n    ZkNodeProps m = new ZkNodeProps(props);\n    handleResponse(OverseerCollectionProcessor.REQUESTSTATUS, m, rsp);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleRequestStatus(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleRequestStatus(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  private void handleRequestStatus(SolrQueryRequest req, SolrQueryResponse rsp) throws KeeperException, InterruptedException {\n    log.debug(\"REQUESTSTATUS action invoked: \" + req.getParamString());\n    req.getParams().required().check(REQUESTID);\n\n    String requestId = req.getParams().get(REQUESTID);\n\n    if (requestId.equals(\"-1\")) {\n      // Special taskId (-1), clears up the request state maps.\n      if(requestId.equals(\"-1\")) {\n        coreContainer.getZkController().getOverseerCompletedMap().clear();\n        coreContainer.getZkController().getOverseerFailureMap().clear();\n        return;\n      }\n    } else {\n      NamedList<Object> results = new NamedList<>();\n      if (coreContainer.getZkController().getOverseerCompletedMap().contains(requestId)) {\n        SimpleOrderedMap success = new SimpleOrderedMap();\n        success.add(\"state\", \"completed\");\n        success.add(\"msg\", \"found \" + requestId + \" in completed tasks\");\n        results.add(\"status\", success);\n      } else if (coreContainer.getZkController().getOverseerRunningMap().contains(requestId)) {\n        SimpleOrderedMap success = new SimpleOrderedMap();\n        success.add(\"state\", \"running\");\n        success.add(\"msg\", \"found \" + requestId + \" in submitted tasks\");\n        results.add(\"status\", success);\n      } else if (coreContainer.getZkController().getOverseerFailureMap().contains(requestId)) {\n        SimpleOrderedMap success = new SimpleOrderedMap();\n        success.add(\"state\", \"failed\");\n        success.add(\"msg\", \"found \" + requestId + \" in failed tasks\");\n        results.add(\"status\", success);\n      } else {\n        SimpleOrderedMap failure = new SimpleOrderedMap();\n        failure.add(\"state\", \"notfound\");\n        failure.add(\"msg\", \"Did not find taskid [\" + requestId + \"] in any tasks queue\");\n        results.add(\"status\", failure);\n      }\n      SolrResponse response = new OverseerSolrResponse(results);\n\n      rsp.getValues().addAll(response.getResponse());\n    }\n  }\n\n","sourceOld":"  private void handleRequestStatus(SolrQueryRequest req, SolrQueryResponse rsp) throws KeeperException, InterruptedException {\n    log.debug(\"REQUESTSTATUS action invoked: \" + req.getParamString());\n    req.getParams().required().check(REQUESTID);\n    Map<String, Object> props = new HashMap<String, Object>();\n    props.put(Overseer.QUEUE_OPERATION, OverseerCollectionProcessor.REQUESTSTATUS);\n    props.put(REQUESTID, req.getParams().get(REQUESTID));\n    ZkNodeProps m = new ZkNodeProps(props);\n    handleResponse(OverseerCollectionProcessor.REQUESTSTATUS, m, rsp);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6f26f74e4969851a019d28f10315cb1c77786f22","date":1400539241,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleRequestStatus(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleRequestStatus(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  private void handleRequestStatus(SolrQueryRequest req, SolrQueryResponse rsp) throws KeeperException, InterruptedException {\n    log.debug(\"REQUESTSTATUS action invoked: \" + req.getParamString());\n    req.getParams().required().check(REQUESTID);\n\n    String requestId = req.getParams().get(REQUESTID);\n\n    if (requestId.equals(\"-1\")) {\n      // Special taskId (-1), clears up the request state maps.\n      if(requestId.equals(\"-1\")) {\n        coreContainer.getZkController().getOverseerCompletedMap().clear();\n        coreContainer.getZkController().getOverseerFailureMap().clear();\n        return;\n      }\n    } else {\n      NamedList<Object> results = new NamedList<>();\n      if (coreContainer.getZkController().getOverseerCompletedMap().contains(requestId)) {\n        SimpleOrderedMap success = new SimpleOrderedMap();\n        success.add(\"state\", \"completed\");\n        success.add(\"msg\", \"found \" + requestId + \" in completed tasks\");\n        results.add(\"status\", success);\n      } else if (coreContainer.getZkController().getOverseerFailureMap().contains(requestId)) {\n        SimpleOrderedMap success = new SimpleOrderedMap();\n        success.add(\"state\", \"failed\");\n        success.add(\"msg\", \"found \" + requestId + \" in failed tasks\");\n        results.add(\"status\", success);\n      } else if (coreContainer.getZkController().getOverseerRunningMap().contains(requestId)) {\n        SimpleOrderedMap success = new SimpleOrderedMap();\n        success.add(\"state\", \"running\");\n        success.add(\"msg\", \"found \" + requestId + \" in submitted tasks\");\n        results.add(\"status\", success);\n      } else {\n        SimpleOrderedMap failure = new SimpleOrderedMap();\n        failure.add(\"state\", \"notfound\");\n        failure.add(\"msg\", \"Did not find taskid [\" + requestId + \"] in any tasks queue\");\n        results.add(\"status\", failure);\n      }\n      SolrResponse response = new OverseerSolrResponse(results);\n\n      rsp.getValues().addAll(response.getResponse());\n    }\n  }\n\n","sourceOld":"  private void handleRequestStatus(SolrQueryRequest req, SolrQueryResponse rsp) throws KeeperException, InterruptedException {\n    log.debug(\"REQUESTSTATUS action invoked: \" + req.getParamString());\n    req.getParams().required().check(REQUESTID);\n\n    String requestId = req.getParams().get(REQUESTID);\n\n    if (requestId.equals(\"-1\")) {\n      // Special taskId (-1), clears up the request state maps.\n      if(requestId.equals(\"-1\")) {\n        coreContainer.getZkController().getOverseerCompletedMap().clear();\n        coreContainer.getZkController().getOverseerFailureMap().clear();\n        return;\n      }\n    } else {\n      NamedList<Object> results = new NamedList<>();\n      if (coreContainer.getZkController().getOverseerCompletedMap().contains(requestId)) {\n        SimpleOrderedMap success = new SimpleOrderedMap();\n        success.add(\"state\", \"completed\");\n        success.add(\"msg\", \"found \" + requestId + \" in completed tasks\");\n        results.add(\"status\", success);\n      } else if (coreContainer.getZkController().getOverseerRunningMap().contains(requestId)) {\n        SimpleOrderedMap success = new SimpleOrderedMap();\n        success.add(\"state\", \"running\");\n        success.add(\"msg\", \"found \" + requestId + \" in submitted tasks\");\n        results.add(\"status\", success);\n      } else if (coreContainer.getZkController().getOverseerFailureMap().contains(requestId)) {\n        SimpleOrderedMap success = new SimpleOrderedMap();\n        success.add(\"state\", \"failed\");\n        success.add(\"msg\", \"found \" + requestId + \" in failed tasks\");\n        results.add(\"status\", success);\n      } else {\n        SimpleOrderedMap failure = new SimpleOrderedMap();\n        failure.add(\"state\", \"notfound\");\n        failure.add(\"msg\", \"Did not find taskid [\" + requestId + \"] in any tasks queue\");\n        results.add(\"status\", failure);\n      }\n      SolrResponse response = new OverseerSolrResponse(results);\n\n      rsp.getValues().addAll(response.getResponse());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7605579001505896d48b07160075a5c8b8e128e","date":1400758727,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleRequestStatus(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleRequestStatus(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  private void handleRequestStatus(SolrQueryRequest req, SolrQueryResponse rsp) throws KeeperException, InterruptedException {\n    log.debug(\"REQUESTSTATUS action invoked: \" + req.getParamString());\n    req.getParams().required().check(REQUESTID);\n\n    String requestId = req.getParams().get(REQUESTID);\n\n    if (requestId.equals(\"-1\")) {\n      // Special taskId (-1), clears up the request state maps.\n      if(requestId.equals(\"-1\")) {\n        coreContainer.getZkController().getOverseerCompletedMap().clear();\n        coreContainer.getZkController().getOverseerFailureMap().clear();\n        return;\n      }\n    } else {\n      NamedList<Object> results = new NamedList<>();\n      if (coreContainer.getZkController().getOverseerCompletedMap().contains(requestId)) {\n        SimpleOrderedMap success = new SimpleOrderedMap();\n        success.add(\"state\", \"completed\");\n        success.add(\"msg\", \"found \" + requestId + \" in completed tasks\");\n        results.add(\"status\", success);\n      } else if (coreContainer.getZkController().getOverseerFailureMap().contains(requestId)) {\n        SimpleOrderedMap success = new SimpleOrderedMap();\n        success.add(\"state\", \"failed\");\n        success.add(\"msg\", \"found \" + requestId + \" in failed tasks\");\n        results.add(\"status\", success);\n      } else if (coreContainer.getZkController().getOverseerRunningMap().contains(requestId)) {\n        SimpleOrderedMap success = new SimpleOrderedMap();\n        success.add(\"state\", \"running\");\n        success.add(\"msg\", \"found \" + requestId + \" in submitted tasks\");\n        results.add(\"status\", success);\n      } else {\n        SimpleOrderedMap failure = new SimpleOrderedMap();\n        failure.add(\"state\", \"notfound\");\n        failure.add(\"msg\", \"Did not find taskid [\" + requestId + \"] in any tasks queue\");\n        results.add(\"status\", failure);\n      }\n      SolrResponse response = new OverseerSolrResponse(results);\n\n      rsp.getValues().addAll(response.getResponse());\n    }\n  }\n\n","sourceOld":"  private void handleRequestStatus(SolrQueryRequest req, SolrQueryResponse rsp) throws KeeperException, InterruptedException {\n    log.debug(\"REQUESTSTATUS action invoked: \" + req.getParamString());\n    req.getParams().required().check(REQUESTID);\n\n    String requestId = req.getParams().get(REQUESTID);\n\n    if (requestId.equals(\"-1\")) {\n      // Special taskId (-1), clears up the request state maps.\n      if(requestId.equals(\"-1\")) {\n        coreContainer.getZkController().getOverseerCompletedMap().clear();\n        coreContainer.getZkController().getOverseerFailureMap().clear();\n        return;\n      }\n    } else {\n      NamedList<Object> results = new NamedList<>();\n      if (coreContainer.getZkController().getOverseerCompletedMap().contains(requestId)) {\n        SimpleOrderedMap success = new SimpleOrderedMap();\n        success.add(\"state\", \"completed\");\n        success.add(\"msg\", \"found \" + requestId + \" in completed tasks\");\n        results.add(\"status\", success);\n      } else if (coreContainer.getZkController().getOverseerRunningMap().contains(requestId)) {\n        SimpleOrderedMap success = new SimpleOrderedMap();\n        success.add(\"state\", \"running\");\n        success.add(\"msg\", \"found \" + requestId + \" in submitted tasks\");\n        results.add(\"status\", success);\n      } else if (coreContainer.getZkController().getOverseerFailureMap().contains(requestId)) {\n        SimpleOrderedMap success = new SimpleOrderedMap();\n        success.add(\"state\", \"failed\");\n        success.add(\"msg\", \"found \" + requestId + \" in failed tasks\");\n        results.add(\"status\", success);\n      } else {\n        SimpleOrderedMap failure = new SimpleOrderedMap();\n        failure.add(\"state\", \"notfound\");\n        failure.add(\"msg\", \"Did not find taskid [\" + requestId + \"] in any tasks queue\");\n        results.add(\"status\", failure);\n      }\n      SolrResponse response = new OverseerSolrResponse(results);\n\n      rsp.getValues().addAll(response.getResponse());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74fe755c1cb9c998d933b455c573e86e9ef5d2aa","date":1401724046,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleRequestStatus(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleRequestStatus(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  private void handleRequestStatus(SolrQueryRequest req, SolrQueryResponse rsp) throws KeeperException, InterruptedException {\n    log.debug(\"REQUESTSTATUS action invoked: \" + req.getParamString());\n    req.getParams().required().check(REQUESTID);\n\n    String requestId = req.getParams().get(REQUESTID);\n\n    if (requestId.equals(\"-1\")) {\n      // Special taskId (-1), clears up the request state maps.\n      if(requestId.equals(\"-1\")) {\n        coreContainer.getZkController().getOverseerCompletedMap().clear();\n        coreContainer.getZkController().getOverseerFailureMap().clear();\n        return;\n      }\n    } else {\n      NamedList<Object> results = new NamedList<>();\n      if (coreContainer.getZkController().getOverseerCompletedMap().contains(requestId)) {\n        SimpleOrderedMap success = new SimpleOrderedMap();\n        success.add(\"state\", \"completed\");\n        success.add(\"msg\", \"found \" + requestId + \" in completed tasks\");\n        results.add(\"status\", success);\n      } else if (coreContainer.getZkController().getOverseerFailureMap().contains(requestId)) {\n        SimpleOrderedMap success = new SimpleOrderedMap();\n        success.add(\"state\", \"failed\");\n        success.add(\"msg\", \"found \" + requestId + \" in failed tasks\");\n        results.add(\"status\", success);\n      } else if (coreContainer.getZkController().getOverseerRunningMap().contains(requestId)) {\n        SimpleOrderedMap success = new SimpleOrderedMap();\n        success.add(\"state\", \"running\");\n        success.add(\"msg\", \"found \" + requestId + \" in running tasks\");\n        results.add(\"status\", success);\n      } else if(overseerCollectionQueueContains(requestId)){\n        SimpleOrderedMap success = new SimpleOrderedMap();\n        success.add(\"state\", \"submitted\");\n        success.add(\"msg\", \"found \" + requestId + \" in submitted tasks\");\n        results.add(\"status\", success);\n      } else {\n        SimpleOrderedMap failure = new SimpleOrderedMap();\n        failure.add(\"state\", \"notfound\");\n        failure.add(\"msg\", \"Did not find taskid [\" + requestId + \"] in any tasks queue\");\n        results.add(\"status\", failure);\n      }\n      SolrResponse response = new OverseerSolrResponse(results);\n\n      rsp.getValues().addAll(response.getResponse());\n    }\n  }\n\n","sourceOld":"  private void handleRequestStatus(SolrQueryRequest req, SolrQueryResponse rsp) throws KeeperException, InterruptedException {\n    log.debug(\"REQUESTSTATUS action invoked: \" + req.getParamString());\n    req.getParams().required().check(REQUESTID);\n\n    String requestId = req.getParams().get(REQUESTID);\n\n    if (requestId.equals(\"-1\")) {\n      // Special taskId (-1), clears up the request state maps.\n      if(requestId.equals(\"-1\")) {\n        coreContainer.getZkController().getOverseerCompletedMap().clear();\n        coreContainer.getZkController().getOverseerFailureMap().clear();\n        return;\n      }\n    } else {\n      NamedList<Object> results = new NamedList<>();\n      if (coreContainer.getZkController().getOverseerCompletedMap().contains(requestId)) {\n        SimpleOrderedMap success = new SimpleOrderedMap();\n        success.add(\"state\", \"completed\");\n        success.add(\"msg\", \"found \" + requestId + \" in completed tasks\");\n        results.add(\"status\", success);\n      } else if (coreContainer.getZkController().getOverseerFailureMap().contains(requestId)) {\n        SimpleOrderedMap success = new SimpleOrderedMap();\n        success.add(\"state\", \"failed\");\n        success.add(\"msg\", \"found \" + requestId + \" in failed tasks\");\n        results.add(\"status\", success);\n      } else if (coreContainer.getZkController().getOverseerRunningMap().contains(requestId)) {\n        SimpleOrderedMap success = new SimpleOrderedMap();\n        success.add(\"state\", \"running\");\n        success.add(\"msg\", \"found \" + requestId + \" in submitted tasks\");\n        results.add(\"status\", success);\n      } else {\n        SimpleOrderedMap failure = new SimpleOrderedMap();\n        failure.add(\"state\", \"notfound\");\n        failure.add(\"msg\", \"Did not find taskid [\" + requestId + \"] in any tasks queue\");\n        results.add(\"status\", failure);\n      }\n      SolrResponse response = new OverseerSolrResponse(results);\n\n      rsp.getValues().addAll(response.getResponse());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ebd3a557326ef3eab85b73a8cff781f7d801248","date":1431620752,"type":4,"author":"Noble Paul","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleRequestStatus(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":null,"sourceOld":"  private void handleRequestStatus(SolrQueryRequest req, SolrQueryResponse rsp) throws KeeperException, InterruptedException {\n    log.debug(\"REQUESTSTATUS action invoked: \" + req.getParamString());\n    req.getParams().required().check(REQUESTID);\n\n    String requestId = req.getParams().get(REQUESTID);\n\n    if (requestId.equals(\"-1\")) {\n      // Special taskId (-1), clears up the request state maps.\n      if(requestId.equals(\"-1\")) {\n        coreContainer.getZkController().getOverseerCompletedMap().clear();\n        coreContainer.getZkController().getOverseerFailureMap().clear();\n        return;\n      }\n    } else {\n      NamedList<Object> results = new NamedList<>();\n      if (coreContainer.getZkController().getOverseerCompletedMap().contains(requestId)) {\n        SimpleOrderedMap success = new SimpleOrderedMap();\n        success.add(\"state\", \"completed\");\n        success.add(\"msg\", \"found \" + requestId + \" in completed tasks\");\n        results.add(\"status\", success);\n      } else if (coreContainer.getZkController().getOverseerFailureMap().contains(requestId)) {\n        SimpleOrderedMap success = new SimpleOrderedMap();\n        success.add(\"state\", \"failed\");\n        success.add(\"msg\", \"found \" + requestId + \" in failed tasks\");\n        results.add(\"status\", success);\n      } else if (coreContainer.getZkController().getOverseerRunningMap().contains(requestId)) {\n        SimpleOrderedMap success = new SimpleOrderedMap();\n        success.add(\"state\", \"running\");\n        success.add(\"msg\", \"found \" + requestId + \" in running tasks\");\n        results.add(\"status\", success);\n      } else if(overseerCollectionQueueContains(requestId)){\n        SimpleOrderedMap success = new SimpleOrderedMap();\n        success.add(\"state\", \"submitted\");\n        success.add(\"msg\", \"found \" + requestId + \" in submitted tasks\");\n        results.add(\"status\", success);\n      } else {\n        SimpleOrderedMap failure = new SimpleOrderedMap();\n        failure.add(\"state\", \"notfound\");\n        failure.add(\"msg\", \"Did not find taskid [\" + requestId + \"] in any tasks queue\");\n        results.add(\"status\", failure);\n      }\n      SolrResponse response = new OverseerSolrResponse(results);\n\n      rsp.getValues().addAll(response.getResponse());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5eb7299fddbea34e76b950854f150f14b895ba68":["058f5a3debcfa0ea477da3eabb4cbe2ec0fac211"],"5eb2511ababf862ea11e10761c70ee560cd84510":["058f5a3debcfa0ea477da3eabb4cbe2ec0fac211","5eb7299fddbea34e76b950854f150f14b895ba68"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"058f5a3debcfa0ea477da3eabb4cbe2ec0fac211":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9ebd3a557326ef3eab85b73a8cff781f7d801248":["74fe755c1cb9c998d933b455c573e86e9ef5d2aa"],"b7605579001505896d48b07160075a5c8b8e128e":["5eb7299fddbea34e76b950854f150f14b895ba68","6f26f74e4969851a019d28f10315cb1c77786f22"],"6f26f74e4969851a019d28f10315cb1c77786f22":["5eb7299fddbea34e76b950854f150f14b895ba68"],"74fe755c1cb9c998d933b455c573e86e9ef5d2aa":["6f26f74e4969851a019d28f10315cb1c77786f22"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9ebd3a557326ef3eab85b73a8cff781f7d801248"]},"commit2Childs":{"5eb7299fddbea34e76b950854f150f14b895ba68":["5eb2511ababf862ea11e10761c70ee560cd84510","b7605579001505896d48b07160075a5c8b8e128e","6f26f74e4969851a019d28f10315cb1c77786f22"],"5eb2511ababf862ea11e10761c70ee560cd84510":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["058f5a3debcfa0ea477da3eabb4cbe2ec0fac211"],"058f5a3debcfa0ea477da3eabb4cbe2ec0fac211":["5eb7299fddbea34e76b950854f150f14b895ba68","5eb2511ababf862ea11e10761c70ee560cd84510"],"9ebd3a557326ef3eab85b73a8cff781f7d801248":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b7605579001505896d48b07160075a5c8b8e128e":[],"6f26f74e4969851a019d28f10315cb1c77786f22":["b7605579001505896d48b07160075a5c8b8e128e","74fe755c1cb9c998d933b455c573e86e9ef5d2aa"],"74fe755c1cb9c998d933b455c573e86e9ef5d2aa":["9ebd3a557326ef3eab85b73a8cff781f7d801248"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","b7605579001505896d48b07160075a5c8b8e128e","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}