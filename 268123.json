{"path":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoComplexPolygon#pointMatches(Plane,GeoPoint,GeoPoint).mjava","commits":[{"id":"1cf8d8275024d808d6f5e5a1a07e8fa2b010706a","date":1523373040,"type":0,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoComplexPolygon#pointMatches(Plane,GeoPoint,GeoPoint).mjava","pathOld":"/dev/null","sourceNew":"  /** Return true of the point matches the edge endpoint, or false otherwise.\n  * This method is here to compensate for the fact that we don't always detect an intersection due to the bounds interfering.\n  */\n  private static boolean pointMatches(final Plane envelopePlane, final GeoPoint intersectionPoint, final GeoPoint edgePoint) {\n    // If edge isn't on the envelope plane, no match\n    if (!envelopePlane.evaluateIsZero(edgePoint)) {\n      return false;\n    }\n    // As a proxy for staying \"within\" the envelope plane,  compute linear squared distance.  If clearly too close to be anything other than local, we can\n    // just return true.  Otherwise, we'll need to add more complicated fallback computations.\n    if (edgePoint.linearDistanceSquared(intersectionPoint) <= MATCH_MAXIMUM_DISTANCE_SQUARED) {\n      return true;\n    }\n    // More to be done?  Cross that bridge if we come to it.\n    return false;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d564e0296db7f80d73dd62b17710f61c85f38c50","date":1523483630,"type":4,"author":"Karl Wright","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoComplexPolygon#pointMatches(Plane,GeoPoint,GeoPoint).mjava","sourceNew":null,"sourceOld":"  /** Return true of the point matches the edge endpoint, or false otherwise.\n  * This method is here to compensate for the fact that we don't always detect an intersection due to the bounds interfering.\n  */\n  private static boolean pointMatches(final Plane envelopePlane, final GeoPoint intersectionPoint, final GeoPoint edgePoint) {\n    // If edge isn't on the envelope plane, no match\n    if (!envelopePlane.evaluateIsZero(edgePoint)) {\n      return false;\n    }\n    // As a proxy for staying \"within\" the envelope plane,  compute linear squared distance.  If clearly too close to be anything other than local, we can\n    // just return true.  Otherwise, we'll need to add more complicated fallback computations.\n    if (edgePoint.linearDistanceSquared(intersectionPoint) <= MATCH_MAXIMUM_DISTANCE_SQUARED) {\n      return true;\n    }\n    // More to be done?  Cross that bridge if we come to it.\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1cf8d8275024d808d6f5e5a1a07e8fa2b010706a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d564e0296db7f80d73dd62b17710f61c85f38c50":["1cf8d8275024d808d6f5e5a1a07e8fa2b010706a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d564e0296db7f80d73dd62b17710f61c85f38c50"]},"commit2Childs":{"1cf8d8275024d808d6f5e5a1a07e8fa2b010706a":["d564e0296db7f80d73dd62b17710f61c85f38c50"],"d564e0296db7f80d73dd62b17710f61c85f38c50":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1cf8d8275024d808d6f5e5a1a07e8fa2b010706a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}