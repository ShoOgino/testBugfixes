{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/BasicHttpSolrServerTest#testCompression().mjava","commits":[{"id":"22c400c38732e4cee017b09622fb10e5c55b04b8","date":1334921975,"type":1,"author":"Sami Siren","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/BasicHttpSolrServerTest#testCompression().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/BasicHttpSolrServerTest#testCompression().mjava","sourceNew":"  @Test\n  public void testCompression() throws Exception {\n    HttpSolrServer server = new HttpSolrServer(\"http://127.0.0.1:\"\n        + jetty.getLocalPort() + \"/solr/debug/foo\");\n    SolrQuery q = new SolrQuery(\"*:*\");\n    \n    // verify request header gets set\n    DebugServlet.clear();\n    try {\n      server.query(q);\n    } catch (Throwable t) {}\n    assertNull(DebugServlet.headers.get(\"Accept-Encoding\"));\n    server.setAllowCompression(true);\n    try {\n      server.query(q);\n    } catch (Throwable t) {}\n    assertNotNull(DebugServlet.headers.get(\"Accept-Encoding\"));\n    server.setAllowCompression(false);\n    try {\n      server.query(q);\n    } catch (Throwable t) {}\n    assertNull(DebugServlet.headers.get(\"Accept-Encoding\"));\n    \n    // verify server compresses output\n    HttpGet get = new HttpGet(\"http://127.0.0.1:\" + jetty.getLocalPort()\n        + \"/solr/select?q=foo&wt=xml\");\n    get.setHeader(\"Accept-Encoding\", \"gzip\");\n    DefaultHttpClient client = new DefaultHttpClient();\n    HttpEntity entity = null;\n    try {\n      HttpResponse response = client.execute(get);\n      entity = response.getEntity();\n      Header ceheader = entity.getContentEncoding();\n      assertEquals(\"gzip\", ceheader.getValue());\n      \n    } finally {\n      if(entity!=null) {\n        entity.getContent().close();\n      }\n      client.getConnectionManager().shutdown();\n    }\n    \n    // verify compressed response can be handled\n    server = new HttpSolrServer(\"http://127.0.0.1:\" + jetty.getLocalPort()\n        + \"/solr\");\n    server.setAllowCompression(true);\n    q = new SolrQuery(\"foo\");\n    QueryResponse response = server.query(q);\n    assertEquals(0, response.getStatus());\n  }\n\n","sourceOld":"  @Test\n  public void testCompression() throws Exception {\n    HttpSolrServer server = new HttpSolrServer(\"http://127.0.0.1:\"\n        + jetty.getLocalPort() + \"/solr/debug/foo\");\n    SolrQuery q = new SolrQuery(\"*:*\");\n    \n    // verify request header gets set\n    try {\n      server.query(q);\n    } catch (Throwable t) {}\n    assertNull(DebugServlet.headers.get(\"Accept-Encoding\"));\n    server.setAllowCompression(true);\n    try {\n      server.query(q);\n    } catch (Throwable t) {}\n    assertNotNull(DebugServlet.headers.get(\"Accept-Encoding\"));\n    server.setAllowCompression(false);\n    try {\n      server.query(q);\n    } catch (Throwable t) {}\n    assertNull(DebugServlet.headers.get(\"Accept-Encoding\"));\n    \n    // verify server compresses output\n    HttpGet get = new HttpGet(\"http://127.0.0.1:\" + jetty.getLocalPort()\n        + \"/solr/select?q=foo&wt=xml\");\n    get.setHeader(\"Accept-Encoding\", \"gzip\");\n    DefaultHttpClient client = new DefaultHttpClient();\n    HttpEntity entity = null;\n    try {\n      HttpResponse response = client.execute(get);\n      entity = response.getEntity();\n      Header ceheader = entity.getContentEncoding();\n      assertEquals(\"gzip\", ceheader.getValue());\n      \n    } finally {\n      if(entity!=null) {\n        entity.getContent().close();\n      }\n      client.getConnectionManager().shutdown();\n    }\n    \n    // verify compressed response can be handled\n    server = new HttpSolrServer(\"http://127.0.0.1:\" + jetty.getLocalPort()\n        + \"/solr\");\n    server.setAllowCompression(true);\n    q = new SolrQuery(\"foo\");\n    QueryResponse response = server.query(q);\n    assertEquals(0, response.getStatus());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eb99886ff640d94edb43e0d36112a2b7023379ba","date":1338292884,"type":3,"author":"Sami Siren","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/BasicHttpSolrServerTest#testCompression().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/BasicHttpSolrServerTest#testCompression().mjava","sourceNew":"  @Test\n  public void testCompression() throws Exception {\n    HttpSolrServer server = new HttpSolrServer(\"http://127.0.0.1:\"\n        + jetty.getLocalPort() + \"/solr/debug/foo\");\n    SolrQuery q = new SolrQuery(\"*:*\");\n    \n    // verify request header gets set\n    DebugServlet.clear();\n    try {\n      server.query(q);\n    } catch (Throwable t) {}\n    assertNull(DebugServlet.headers.get(\"Accept-Encoding\"));\n    server.setAllowCompression(true);\n    try {\n      server.query(q);\n    } catch (Throwable t) {}\n    assertNotNull(DebugServlet.headers.get(\"Accept-Encoding\"));\n    server.setAllowCompression(false);\n    try {\n      server.query(q);\n    } catch (Throwable t) {}\n    assertNull(DebugServlet.headers.get(\"Accept-Encoding\"));\n    \n    // verify server compresses output\n    HttpGet get = new HttpGet(\"http://127.0.0.1:\" + jetty.getLocalPort()\n        + \"/solr/select?q=foo&wt=xml\");\n    get.setHeader(\"Accept-Encoding\", \"gzip\");\n    HttpClient client = HttpClientUtil.createClient(null);\n    HttpEntity entity = null;\n    try {\n      HttpResponse response = client.execute(get);\n      entity = response.getEntity();\n      Header ceheader = entity.getContentEncoding();\n      assertEquals(\"gzip\", ceheader.getValue());\n      \n    } finally {\n      if(entity!=null) {\n        entity.getContent().close();\n      }\n      client.getConnectionManager().shutdown();\n    }\n    \n    // verify compressed response can be handled\n    server = new HttpSolrServer(\"http://127.0.0.1:\" + jetty.getLocalPort()\n        + \"/solr\");\n    server.setAllowCompression(true);\n    q = new SolrQuery(\"foo\");\n    QueryResponse response = server.query(q);\n    assertEquals(0, response.getStatus());\n  }\n\n","sourceOld":"  @Test\n  public void testCompression() throws Exception {\n    HttpSolrServer server = new HttpSolrServer(\"http://127.0.0.1:\"\n        + jetty.getLocalPort() + \"/solr/debug/foo\");\n    SolrQuery q = new SolrQuery(\"*:*\");\n    \n    // verify request header gets set\n    DebugServlet.clear();\n    try {\n      server.query(q);\n    } catch (Throwable t) {}\n    assertNull(DebugServlet.headers.get(\"Accept-Encoding\"));\n    server.setAllowCompression(true);\n    try {\n      server.query(q);\n    } catch (Throwable t) {}\n    assertNotNull(DebugServlet.headers.get(\"Accept-Encoding\"));\n    server.setAllowCompression(false);\n    try {\n      server.query(q);\n    } catch (Throwable t) {}\n    assertNull(DebugServlet.headers.get(\"Accept-Encoding\"));\n    \n    // verify server compresses output\n    HttpGet get = new HttpGet(\"http://127.0.0.1:\" + jetty.getLocalPort()\n        + \"/solr/select?q=foo&wt=xml\");\n    get.setHeader(\"Accept-Encoding\", \"gzip\");\n    DefaultHttpClient client = new DefaultHttpClient();\n    HttpEntity entity = null;\n    try {\n      HttpResponse response = client.execute(get);\n      entity = response.getEntity();\n      Header ceheader = entity.getContentEncoding();\n      assertEquals(\"gzip\", ceheader.getValue());\n      \n    } finally {\n      if(entity!=null) {\n        entity.getContent().close();\n      }\n      client.getConnectionManager().shutdown();\n    }\n    \n    // verify compressed response can be handled\n    server = new HttpSolrServer(\"http://127.0.0.1:\" + jetty.getLocalPort()\n        + \"/solr\");\n    server.setAllowCompression(true);\n    q = new SolrQuery(\"foo\");\n    QueryResponse response = server.query(q);\n    assertEquals(0, response.getStatus());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2425308ebcd91b538a601df94ae1551ccaab2bb","date":1340702883,"type":3,"author":"Sami Siren","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/BasicHttpSolrServerTest#testCompression().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/BasicHttpSolrServerTest#testCompression().mjava","sourceNew":"  @Test\n  public void testCompression() throws Exception {\n    HttpSolrServer server = new HttpSolrServer(\"http://127.0.0.1:\"\n        + jetty.getLocalPort() + \"/solr/debug/foo\");\n    SolrQuery q = new SolrQuery(\"*:*\");\n    \n    // verify request header gets set\n    DebugServlet.clear();\n    try {\n      server.query(q);\n    } catch (Throwable t) {}\n    assertNull(DebugServlet.headers.get(\"Accept-Encoding\"));\n    server.setAllowCompression(true);\n    try {\n      server.query(q);\n    } catch (Throwable t) {}\n    assertNotNull(DebugServlet.headers.get(\"Accept-Encoding\"));\n    server.setAllowCompression(false);\n    try {\n      server.query(q);\n    } catch (Throwable t) {}\n    assertNull(DebugServlet.headers.get(\"Accept-Encoding\"));\n    \n    // verify server compresses output\n    HttpGet get = new HttpGet(\"http://127.0.0.1:\" + jetty.getLocalPort()\n        + \"/solr/select?q=foo&wt=xml\");\n    get.setHeader(\"Accept-Encoding\", \"gzip\");\n    HttpClient client = HttpClientUtil.createClient(null);\n    HttpEntity entity = null;\n    try {\n      HttpResponse response = client.execute(get);\n      entity = response.getEntity();\n      Header ceheader = entity.getContentEncoding();\n      assertEquals(\"gzip\", ceheader.getValue());\n      \n    } finally {\n      if(entity!=null) {\n        entity.getContent().close();\n      }\n      client.getConnectionManager().shutdown();\n    }\n    \n    // verify compressed response can be handled\n    server = new HttpSolrServer(\"http://127.0.0.1:\" + jetty.getLocalPort()\n        + \"/solr\");\n    server.setAllowCompression(true);\n    q = new SolrQuery(\"foo\");\n    QueryResponse response = server.query(q);\n    assertEquals(0, response.getStatus());\n    server.shutdown();\n  }\n\n","sourceOld":"  @Test\n  public void testCompression() throws Exception {\n    HttpSolrServer server = new HttpSolrServer(\"http://127.0.0.1:\"\n        + jetty.getLocalPort() + \"/solr/debug/foo\");\n    SolrQuery q = new SolrQuery(\"*:*\");\n    \n    // verify request header gets set\n    DebugServlet.clear();\n    try {\n      server.query(q);\n    } catch (Throwable t) {}\n    assertNull(DebugServlet.headers.get(\"Accept-Encoding\"));\n    server.setAllowCompression(true);\n    try {\n      server.query(q);\n    } catch (Throwable t) {}\n    assertNotNull(DebugServlet.headers.get(\"Accept-Encoding\"));\n    server.setAllowCompression(false);\n    try {\n      server.query(q);\n    } catch (Throwable t) {}\n    assertNull(DebugServlet.headers.get(\"Accept-Encoding\"));\n    \n    // verify server compresses output\n    HttpGet get = new HttpGet(\"http://127.0.0.1:\" + jetty.getLocalPort()\n        + \"/solr/select?q=foo&wt=xml\");\n    get.setHeader(\"Accept-Encoding\", \"gzip\");\n    HttpClient client = HttpClientUtil.createClient(null);\n    HttpEntity entity = null;\n    try {\n      HttpResponse response = client.execute(get);\n      entity = response.getEntity();\n      Header ceheader = entity.getContentEncoding();\n      assertEquals(\"gzip\", ceheader.getValue());\n      \n    } finally {\n      if(entity!=null) {\n        entity.getContent().close();\n      }\n      client.getConnectionManager().shutdown();\n    }\n    \n    // verify compressed response can be handled\n    server = new HttpSolrServer(\"http://127.0.0.1:\" + jetty.getLocalPort()\n        + \"/solr\");\n    server.setAllowCompression(true);\n    q = new SolrQuery(\"foo\");\n    QueryResponse response = server.query(q);\n    assertEquals(0, response.getStatus());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/BasicHttpSolrServerTest#testCompression().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/BasicHttpSolrServerTest#testCompression().mjava","sourceNew":"  @Test\n  public void testCompression() throws Exception {\n    HttpSolrServer server = new HttpSolrServer(\"http://127.0.0.1:\"\n        + jetty.getLocalPort() + \"/solr/debug/foo\");\n    SolrQuery q = new SolrQuery(\"*:*\");\n    \n    // verify request header gets set\n    DebugServlet.clear();\n    try {\n      server.query(q);\n    } catch (Throwable t) {}\n    assertNull(DebugServlet.headers.get(\"Accept-Encoding\"));\n    server.setAllowCompression(true);\n    try {\n      server.query(q);\n    } catch (Throwable t) {}\n    assertNotNull(DebugServlet.headers.get(\"Accept-Encoding\"));\n    server.setAllowCompression(false);\n    try {\n      server.query(q);\n    } catch (Throwable t) {}\n    assertNull(DebugServlet.headers.get(\"Accept-Encoding\"));\n    \n    // verify server compresses output\n    HttpGet get = new HttpGet(\"http://127.0.0.1:\" + jetty.getLocalPort()\n        + \"/solr/select?q=foo&wt=xml\");\n    get.setHeader(\"Accept-Encoding\", \"gzip\");\n    HttpClient client = HttpClientUtil.createClient(null);\n    HttpEntity entity = null;\n    try {\n      HttpResponse response = client.execute(get);\n      entity = response.getEntity();\n      Header ceheader = entity.getContentEncoding();\n      assertEquals(\"gzip\", ceheader.getValue());\n      \n    } finally {\n      if(entity!=null) {\n        entity.getContent().close();\n      }\n      client.getConnectionManager().shutdown();\n    }\n    \n    // verify compressed response can be handled\n    server = new HttpSolrServer(\"http://127.0.0.1:\" + jetty.getLocalPort()\n        + \"/solr\");\n    server.setAllowCompression(true);\n    q = new SolrQuery(\"foo\");\n    QueryResponse response = server.query(q);\n    assertEquals(0, response.getStatus());\n    server.shutdown();\n  }\n\n","sourceOld":"  @Test\n  public void testCompression() throws Exception {\n    HttpSolrServer server = new HttpSolrServer(\"http://127.0.0.1:\"\n        + jetty.getLocalPort() + \"/solr/debug/foo\");\n    SolrQuery q = new SolrQuery(\"*:*\");\n    \n    // verify request header gets set\n    DebugServlet.clear();\n    try {\n      server.query(q);\n    } catch (Throwable t) {}\n    assertNull(DebugServlet.headers.get(\"Accept-Encoding\"));\n    server.setAllowCompression(true);\n    try {\n      server.query(q);\n    } catch (Throwable t) {}\n    assertNotNull(DebugServlet.headers.get(\"Accept-Encoding\"));\n    server.setAllowCompression(false);\n    try {\n      server.query(q);\n    } catch (Throwable t) {}\n    assertNull(DebugServlet.headers.get(\"Accept-Encoding\"));\n    \n    // verify server compresses output\n    HttpGet get = new HttpGet(\"http://127.0.0.1:\" + jetty.getLocalPort()\n        + \"/solr/select?q=foo&wt=xml\");\n    get.setHeader(\"Accept-Encoding\", \"gzip\");\n    HttpClient client = HttpClientUtil.createClient(null);\n    HttpEntity entity = null;\n    try {\n      HttpResponse response = client.execute(get);\n      entity = response.getEntity();\n      Header ceheader = entity.getContentEncoding();\n      assertEquals(\"gzip\", ceheader.getValue());\n      \n    } finally {\n      if(entity!=null) {\n        entity.getContent().close();\n      }\n      client.getConnectionManager().shutdown();\n    }\n    \n    // verify compressed response can be handled\n    server = new HttpSolrServer(\"http://127.0.0.1:\" + jetty.getLocalPort()\n        + \"/solr\");\n    server.setAllowCompression(true);\n    q = new SolrQuery(\"foo\");\n    QueryResponse response = server.query(q);\n    assertEquals(0, response.getStatus());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fa11c355cd3b3b9207608b85fbd33b34f6f1966e","date":1361303536,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/BasicHttpSolrServerTest#testCompression().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/BasicHttpSolrServerTest#testCompression().mjava","sourceNew":"  @Test\n  public void testCompression() throws Exception {\n    HttpSolrServer server = new HttpSolrServer(jetty.getBaseUrl().toString() +\n                                               \"/debug/foo\");\n    SolrQuery q = new SolrQuery(\"*:*\");\n    \n    // verify request header gets set\n    DebugServlet.clear();\n    try {\n      server.query(q);\n    } catch (Throwable t) {}\n    assertNull(DebugServlet.headers.get(\"Accept-Encoding\"));\n    server.setAllowCompression(true);\n    try {\n      server.query(q);\n    } catch (Throwable t) {}\n    assertNotNull(DebugServlet.headers.get(\"Accept-Encoding\"));\n    server.setAllowCompression(false);\n    try {\n      server.query(q);\n    } catch (Throwable t) {}\n    assertNull(DebugServlet.headers.get(\"Accept-Encoding\"));\n    \n    // verify server compresses output\n    HttpGet get = new HttpGet(jetty.getBaseUrl().toString() + \n                              \"/select?q=foo&wt=xml\");\n    get.setHeader(\"Accept-Encoding\", \"gzip\");\n    HttpClient client = HttpClientUtil.createClient(null);\n    HttpEntity entity = null;\n    try {\n      HttpResponse response = client.execute(get);\n      entity = response.getEntity();\n      Header ceheader = entity.getContentEncoding();\n      assertEquals(\"gzip\", ceheader.getValue());\n      \n    } finally {\n      if(entity!=null) {\n        entity.getContent().close();\n      }\n      client.getConnectionManager().shutdown();\n    }\n    \n    // verify compressed response can be handled\n    server = new HttpSolrServer(jetty.getBaseUrl().toString());\n    server.setAllowCompression(true);\n    q = new SolrQuery(\"foo\");\n    QueryResponse response = server.query(q);\n    assertEquals(0, response.getStatus());\n    server.shutdown();\n  }\n\n","sourceOld":"  @Test\n  public void testCompression() throws Exception {\n    HttpSolrServer server = new HttpSolrServer(\"http://127.0.0.1:\"\n        + jetty.getLocalPort() + \"/solr/debug/foo\");\n    SolrQuery q = new SolrQuery(\"*:*\");\n    \n    // verify request header gets set\n    DebugServlet.clear();\n    try {\n      server.query(q);\n    } catch (Throwable t) {}\n    assertNull(DebugServlet.headers.get(\"Accept-Encoding\"));\n    server.setAllowCompression(true);\n    try {\n      server.query(q);\n    } catch (Throwable t) {}\n    assertNotNull(DebugServlet.headers.get(\"Accept-Encoding\"));\n    server.setAllowCompression(false);\n    try {\n      server.query(q);\n    } catch (Throwable t) {}\n    assertNull(DebugServlet.headers.get(\"Accept-Encoding\"));\n    \n    // verify server compresses output\n    HttpGet get = new HttpGet(\"http://127.0.0.1:\" + jetty.getLocalPort()\n        + \"/solr/select?q=foo&wt=xml\");\n    get.setHeader(\"Accept-Encoding\", \"gzip\");\n    HttpClient client = HttpClientUtil.createClient(null);\n    HttpEntity entity = null;\n    try {\n      HttpResponse response = client.execute(get);\n      entity = response.getEntity();\n      Header ceheader = entity.getContentEncoding();\n      assertEquals(\"gzip\", ceheader.getValue());\n      \n    } finally {\n      if(entity!=null) {\n        entity.getContent().close();\n      }\n      client.getConnectionManager().shutdown();\n    }\n    \n    // verify compressed response can be handled\n    server = new HttpSolrServer(\"http://127.0.0.1:\" + jetty.getLocalPort()\n        + \"/solr\");\n    server.setAllowCompression(true);\n    q = new SolrQuery(\"foo\");\n    QueryResponse response = server.query(q);\n    assertEquals(0, response.getStatus());\n    server.shutdown();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e3eac61f0ed7a1ba8a2d2f6298467a8141dcbbc9","date":1366986755,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/BasicHttpSolrServerTest#testCompression().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/BasicHttpSolrServerTest#testCompression().mjava","sourceNew":"  @Test\n  public void testCompression() throws Exception {\n    HttpSolrServer server = new HttpSolrServer(jetty.getBaseUrl().toString() +\n                                               \"/debug/foo\");\n    SolrQuery q = new SolrQuery(\"*:*\");\n    \n    // verify request header gets set\n    DebugServlet.clear();\n    try {\n      server.query(q);\n    } catch (Throwable t) {}\n    assertNull(DebugServlet.headers.get(\"Accept-Encoding\"));\n    server.setAllowCompression(true);\n    try {\n      server.query(q);\n    } catch (Throwable t) {}\n    assertNotNull(DebugServlet.headers.get(\"Accept-Encoding\"));\n    server.setAllowCompression(false);\n    try {\n      server.query(q);\n    } catch (Throwable t) {}\n    assertNull(DebugServlet.headers.get(\"Accept-Encoding\"));\n    \n    // verify server compresses output\n    HttpGet get = new HttpGet(jetty.getBaseUrl().toString() + \"/collection1\" +\n                              \"/select?q=foo&wt=xml\");\n    get.setHeader(\"Accept-Encoding\", \"gzip\");\n    HttpClient client = HttpClientUtil.createClient(null);\n    HttpEntity entity = null;\n    try {\n      HttpResponse response = client.execute(get);\n      entity = response.getEntity();\n      Header ceheader = entity.getContentEncoding();\n      assertEquals(\"gzip\", ceheader.getValue());\n      \n    } finally {\n      if(entity!=null) {\n        entity.getContent().close();\n      }\n      client.getConnectionManager().shutdown();\n    }\n    \n    // verify compressed response can be handled\n    server = new HttpSolrServer(jetty.getBaseUrl().toString() + \"/collection1\");\n    server.setAllowCompression(true);\n    q = new SolrQuery(\"foo\");\n    QueryResponse response = server.query(q);\n    assertEquals(0, response.getStatus());\n    server.shutdown();\n  }\n\n","sourceOld":"  @Test\n  public void testCompression() throws Exception {\n    HttpSolrServer server = new HttpSolrServer(jetty.getBaseUrl().toString() +\n                                               \"/debug/foo\");\n    SolrQuery q = new SolrQuery(\"*:*\");\n    \n    // verify request header gets set\n    DebugServlet.clear();\n    try {\n      server.query(q);\n    } catch (Throwable t) {}\n    assertNull(DebugServlet.headers.get(\"Accept-Encoding\"));\n    server.setAllowCompression(true);\n    try {\n      server.query(q);\n    } catch (Throwable t) {}\n    assertNotNull(DebugServlet.headers.get(\"Accept-Encoding\"));\n    server.setAllowCompression(false);\n    try {\n      server.query(q);\n    } catch (Throwable t) {}\n    assertNull(DebugServlet.headers.get(\"Accept-Encoding\"));\n    \n    // verify server compresses output\n    HttpGet get = new HttpGet(jetty.getBaseUrl().toString() + \n                              \"/select?q=foo&wt=xml\");\n    get.setHeader(\"Accept-Encoding\", \"gzip\");\n    HttpClient client = HttpClientUtil.createClient(null);\n    HttpEntity entity = null;\n    try {\n      HttpResponse response = client.execute(get);\n      entity = response.getEntity();\n      Header ceheader = entity.getContentEncoding();\n      assertEquals(\"gzip\", ceheader.getValue());\n      \n    } finally {\n      if(entity!=null) {\n        entity.getContent().close();\n      }\n      client.getConnectionManager().shutdown();\n    }\n    \n    // verify compressed response can be handled\n    server = new HttpSolrServer(jetty.getBaseUrl().toString());\n    server.setAllowCompression(true);\n    q = new SolrQuery(\"foo\");\n    QueryResponse response = server.query(q);\n    assertEquals(0, response.getStatus());\n    server.shutdown();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/BasicHttpSolrClientTest#testCompression().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/BasicHttpSolrServerTest#testCompression().mjava","sourceNew":"  @Test\n  public void testCompression() throws Exception {\n    HttpSolrClient client = new HttpSolrClient(jetty.getBaseUrl().toString() + \"/debug/foo\");\n    SolrQuery q = new SolrQuery(\"*:*\");\n    \n    // verify request header gets set\n    DebugServlet.clear();\n    try {\n      client.query(q);\n    } catch (Throwable t) {}\n    assertNull(DebugServlet.headers.get(\"Accept-Encoding\"));\n    client.setAllowCompression(true);\n    try {\n      client.query(q);\n    } catch (Throwable t) {}\n    assertNotNull(DebugServlet.headers.get(\"Accept-Encoding\"));\n    client.setAllowCompression(false);\n    try {\n      client.query(q);\n    } catch (Throwable t) {}\n    assertNull(DebugServlet.headers.get(\"Accept-Encoding\"));\n    \n    // verify server compresses output\n    HttpGet get = new HttpGet(jetty.getBaseUrl().toString() + \"/collection1\" +\n                              \"/select?q=foo&wt=xml\");\n    get.setHeader(\"Accept-Encoding\", \"gzip\");\n    HttpClient httpclient = HttpClientUtil.createClient(null);\n    HttpEntity entity = null;\n    try {\n      HttpResponse response = httpclient.execute(get);\n      entity = response.getEntity();\n      Header ceheader = entity.getContentEncoding();\n      assertEquals(\"gzip\", ceheader.getValue());\n      \n    } finally {\n      if(entity!=null) {\n        entity.getContent().close();\n      }\n      httpclient.getConnectionManager().shutdown();\n    }\n    \n    // verify compressed response can be handled\n    client = new HttpSolrClient(jetty.getBaseUrl().toString() + \"/collection1\");\n    client.setAllowCompression(true);\n    q = new SolrQuery(\"foo\");\n    QueryResponse response = client.query(q);\n    assertEquals(0, response.getStatus());\n    client.shutdown();\n  }\n\n","sourceOld":"  @Test\n  public void testCompression() throws Exception {\n    HttpSolrServer server = new HttpSolrServer(jetty.getBaseUrl().toString() +\n                                               \"/debug/foo\");\n    SolrQuery q = new SolrQuery(\"*:*\");\n    \n    // verify request header gets set\n    DebugServlet.clear();\n    try {\n      server.query(q);\n    } catch (Throwable t) {}\n    assertNull(DebugServlet.headers.get(\"Accept-Encoding\"));\n    server.setAllowCompression(true);\n    try {\n      server.query(q);\n    } catch (Throwable t) {}\n    assertNotNull(DebugServlet.headers.get(\"Accept-Encoding\"));\n    server.setAllowCompression(false);\n    try {\n      server.query(q);\n    } catch (Throwable t) {}\n    assertNull(DebugServlet.headers.get(\"Accept-Encoding\"));\n    \n    // verify server compresses output\n    HttpGet get = new HttpGet(jetty.getBaseUrl().toString() + \"/collection1\" +\n                              \"/select?q=foo&wt=xml\");\n    get.setHeader(\"Accept-Encoding\", \"gzip\");\n    HttpClient client = HttpClientUtil.createClient(null);\n    HttpEntity entity = null;\n    try {\n      HttpResponse response = client.execute(get);\n      entity = response.getEntity();\n      Header ceheader = entity.getContentEncoding();\n      assertEquals(\"gzip\", ceheader.getValue());\n      \n    } finally {\n      if(entity!=null) {\n        entity.getContent().close();\n      }\n      client.getConnectionManager().shutdown();\n    }\n    \n    // verify compressed response can be handled\n    server = new HttpSolrServer(jetty.getBaseUrl().toString() + \"/collection1\");\n    server.setAllowCompression(true);\n    q = new SolrQuery(\"foo\");\n    QueryResponse response = server.query(q);\n    assertEquals(0, response.getStatus());\n    server.shutdown();\n  }\n\n","bugFix":null,"bugIntro":["b4407017a35dea85f652ec066e4565818dd75436","6784d0cc613dc1ee97030eaaa5e0754edc22d164"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"fa11c355cd3b3b9207608b85fbd33b34f6f1966e":["f2425308ebcd91b538a601df94ae1551ccaab2bb"],"e3eac61f0ed7a1ba8a2d2f6298467a8141dcbbc9":["fa11c355cd3b3b9207608b85fbd33b34f6f1966e"],"22c400c38732e4cee017b09622fb10e5c55b04b8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["eb99886ff640d94edb43e0d36112a2b7023379ba","f2425308ebcd91b538a601df94ae1551ccaab2bb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bafca15d8e408346a67f4282ad1143b88023893b":["e3eac61f0ed7a1ba8a2d2f6298467a8141dcbbc9"],"f2425308ebcd91b538a601df94ae1551ccaab2bb":["eb99886ff640d94edb43e0d36112a2b7023379ba"],"eb99886ff640d94edb43e0d36112a2b7023379ba":["22c400c38732e4cee017b09622fb10e5c55b04b8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bafca15d8e408346a67f4282ad1143b88023893b"]},"commit2Childs":{"fa11c355cd3b3b9207608b85fbd33b34f6f1966e":["e3eac61f0ed7a1ba8a2d2f6298467a8141dcbbc9"],"e3eac61f0ed7a1ba8a2d2f6298467a8141dcbbc9":["bafca15d8e408346a67f4282ad1143b88023893b"],"22c400c38732e4cee017b09622fb10e5c55b04b8":["eb99886ff640d94edb43e0d36112a2b7023379ba"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["22c400c38732e4cee017b09622fb10e5c55b04b8"],"bafca15d8e408346a67f4282ad1143b88023893b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f2425308ebcd91b538a601df94ae1551ccaab2bb":["fa11c355cd3b3b9207608b85fbd33b34f6f1966e","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"eb99886ff640d94edb43e0d36112a2b7023379ba":["fe33227f6805edab2036cbb80645cc4e2d1fa424","f2425308ebcd91b538a601df94ae1551ccaab2bb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}