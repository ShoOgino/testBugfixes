{"path":"lucene/src/java/org/apache/lucene/index/codecs/sep/SepPostingsReaderImpl#readTerm(IndexInput,FieldInfo,TermState,boolean).mjava","commits":[{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/sep/SepPostingsReaderImpl#readTerm(IndexInput,FieldInfo,TermState,boolean).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void readTerm(IndexInput termsIn, FieldInfo fieldInfo, TermState _termState, boolean isIndexTerm) throws IOException {\n    final SepTermState termState = (SepTermState) _termState;\n\n    // read freq index\n    if (!fieldInfo.omitTermFreqAndPositions) {\n      if (termState.freqIndex == null) {\n        assert isIndexTerm;\n        termState.freqIndex = freqIn.index();\n        termState.posIndex = posIn.index();\n      }\n      termState.freqIndex.read(termsIn, isIndexTerm);\n    }\n\n    // read doc index\n    termState.docIndex.read(termsIn, isIndexTerm);\n\n    // read skip index\n    if (isIndexTerm) {    \n      termState.skipOffset = termsIn.readVLong();\n    } else if (termState.docFreq >= skipInterval) {\n      termState.skipOffset += termsIn.readVLong();\n    }\n\n    // read pos, payload index\n    if (!fieldInfo.omitTermFreqAndPositions) {\n      termState.posIndex.read(termsIn, isIndexTerm);\n      final long v = termsIn.readVLong();\n      if (isIndexTerm) {\n        termState.payloadOffset = v;\n      } else {\n        termState.payloadOffset += v;\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8df828f6eb8a46ba5a58ab37d00659165feb274f","date":1288433840,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/sep/SepPostingsReaderImpl#readTerm(IndexInput,FieldInfo,TermState,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/sep/SepPostingsReaderImpl#readTerm(IndexInput,FieldInfo,TermState,boolean).mjava","sourceNew":"  @Override\n  public void readTerm(IndexInput termsIn, FieldInfo fieldInfo, TermState termState, boolean isIndexTerm) throws IOException {\n    ((SepTermState) termState).docIndex.read(termsIn, isIndexTerm);\n  }\n\n","sourceOld":"  @Override\n  public void readTerm(IndexInput termsIn, FieldInfo fieldInfo, TermState _termState, boolean isIndexTerm) throws IOException {\n    final SepTermState termState = (SepTermState) _termState;\n\n    // read freq index\n    if (!fieldInfo.omitTermFreqAndPositions) {\n      if (termState.freqIndex == null) {\n        assert isIndexTerm;\n        termState.freqIndex = freqIn.index();\n        termState.posIndex = posIn.index();\n      }\n      termState.freqIndex.read(termsIn, isIndexTerm);\n    }\n\n    // read doc index\n    termState.docIndex.read(termsIn, isIndexTerm);\n\n    // read skip index\n    if (isIndexTerm) {    \n      termState.skipOffset = termsIn.readVLong();\n    } else if (termState.docFreq >= skipInterval) {\n      termState.skipOffset += termsIn.readVLong();\n    }\n\n    // read pos, payload index\n    if (!fieldInfo.omitTermFreqAndPositions) {\n      termState.posIndex.read(termsIn, isIndexTerm);\n      final long v = termsIn.readVLong();\n      if (isIndexTerm) {\n        termState.payloadOffset = v;\n      } else {\n        termState.payloadOffset += v;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85a883878c0af761245ab048babc63d099f835f3","date":1289553330,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/sep/SepPostingsReaderImpl#readTerm(IndexInput,FieldInfo,TermState,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/sep/SepPostingsReaderImpl#readTerm(IndexInput,FieldInfo,TermState,boolean).mjava","sourceNew":"  @Override\n  public void readTerm(IndexInput termsIn, FieldInfo fieldInfo, TermState termState, boolean isIndexTerm) throws IOException {\n    ((SepTermState) termState).docIndex.read(termsIn, isIndexTerm);\n  }\n\n","sourceOld":"  @Override\n  public void readTerm(IndexInput termsIn, FieldInfo fieldInfo, TermState _termState, boolean isIndexTerm) throws IOException {\n    final SepTermState termState = (SepTermState) _termState;\n\n    // read freq index\n    if (!fieldInfo.omitTermFreqAndPositions) {\n      if (termState.freqIndex == null) {\n        assert isIndexTerm;\n        termState.freqIndex = freqIn.index();\n        termState.posIndex = posIn.index();\n      }\n      termState.freqIndex.read(termsIn, isIndexTerm);\n    }\n\n    // read doc index\n    termState.docIndex.read(termsIn, isIndexTerm);\n\n    // read skip index\n    if (isIndexTerm) {    \n      termState.skipOffset = termsIn.readVLong();\n    } else if (termState.docFreq >= skipInterval) {\n      termState.skipOffset += termsIn.readVLong();\n    }\n\n    // read pos, payload index\n    if (!fieldInfo.omitTermFreqAndPositions) {\n      termState.posIndex.read(termsIn, isIndexTerm);\n      final long v = termsIn.readVLong();\n      if (isIndexTerm) {\n        termState.payloadOffset = v;\n      } else {\n        termState.payloadOffset += v;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/sep/SepPostingsReaderImpl#readTerm(IndexInput,FieldInfo,TermState,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/sep/SepPostingsReaderImpl#readTerm(IndexInput,FieldInfo,TermState,boolean).mjava","sourceNew":"  @Override\n  public void readTerm(IndexInput termsIn, FieldInfo fieldInfo, TermState termState, boolean isIndexTerm) throws IOException {\n    ((SepTermState) termState).docIndex.read(termsIn, isIndexTerm);\n  }\n\n","sourceOld":"  @Override\n  public void readTerm(IndexInput termsIn, FieldInfo fieldInfo, TermState _termState, boolean isIndexTerm) throws IOException {\n    final SepTermState termState = (SepTermState) _termState;\n\n    // read freq index\n    if (!fieldInfo.omitTermFreqAndPositions) {\n      if (termState.freqIndex == null) {\n        assert isIndexTerm;\n        termState.freqIndex = freqIn.index();\n        termState.posIndex = posIn.index();\n      }\n      termState.freqIndex.read(termsIn, isIndexTerm);\n    }\n\n    // read doc index\n    termState.docIndex.read(termsIn, isIndexTerm);\n\n    // read skip index\n    if (isIndexTerm) {    \n      termState.skipOffset = termsIn.readVLong();\n    } else if (termState.docFreq >= skipInterval) {\n      termState.skipOffset += termsIn.readVLong();\n    }\n\n    // read pos, payload index\n    if (!fieldInfo.omitTermFreqAndPositions) {\n      termState.posIndex.read(termsIn, isIndexTerm);\n      final long v = termsIn.readVLong();\n      if (isIndexTerm) {\n        termState.payloadOffset = v;\n      } else {\n        termState.payloadOffset += v;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fa1a999d6674423e5c4ac858b410283f6fe03f20","date":1294868331,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/sep/SepPostingsReaderImpl#readTerm(IndexInput,FieldInfo,PrefixCodedTermState,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/sep/SepPostingsReaderImpl#readTerm(IndexInput,FieldInfo,TermState,boolean).mjava","sourceNew":"  @Override\n  public void readTerm(IndexInput termsIn, FieldInfo fieldInfo, PrefixCodedTermState termState, boolean isIndexTerm) throws IOException {\n    ((SepTermState) termState).docIndex.read(termsIn, isIndexTerm);\n  }\n\n","sourceOld":"  @Override\n  public void readTerm(IndexInput termsIn, FieldInfo fieldInfo, TermState termState, boolean isIndexTerm) throws IOException {\n    ((SepTermState) termState).docIndex.read(termsIn, isIndexTerm);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/sep/SepPostingsReaderImpl#readTerm(IndexInput,FieldInfo,TermState,boolean).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void readTerm(IndexInput termsIn, FieldInfo fieldInfo, TermState termState, boolean isIndexTerm) throws IOException {\n    ((SepTermState) termState).docIndex.read(termsIn, isIndexTerm);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/sep/SepPostingsReaderImpl#readTerm(IndexInput,FieldInfo,TermState,boolean).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void readTerm(IndexInput termsIn, FieldInfo fieldInfo, TermState termState, boolean isIndexTerm) throws IOException {\n    ((SepTermState) termState).docIndex.read(termsIn, isIndexTerm);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8df828f6eb8a46ba5a58ab37d00659165feb274f":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["85a883878c0af761245ab048babc63d099f835f3","fa1a999d6674423e5c4ac858b410283f6fe03f20"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"85a883878c0af761245ab048babc63d099f835f3":["955c32f886db6f6356c9fcdea6b1f1cb4effda24","8df828f6eb8a46ba5a58ab37d00659165feb274f"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fa1a999d6674423e5c4ac858b410283f6fe03f20":["8df828f6eb8a46ba5a58ab37d00659165feb274f"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["955c32f886db6f6356c9fcdea6b1f1cb4effda24","8df828f6eb8a46ba5a58ab37d00659165feb274f"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","fa1a999d6674423e5c4ac858b410283f6fe03f20"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fa1a999d6674423e5c4ac858b410283f6fe03f20"]},"commit2Childs":{"8df828f6eb8a46ba5a58ab37d00659165feb274f":["85a883878c0af761245ab048babc63d099f835f3","fa1a999d6674423e5c4ac858b410283f6fe03f20","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"85a883878c0af761245ab048babc63d099f835f3":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["8df828f6eb8a46ba5a58ab37d00659165feb274f","85a883878c0af761245ab048babc63d099f835f3","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"fa1a999d6674423e5c4ac858b410283f6fe03f20":["29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["868da859b43505d9d2a023bfeae6dd0c795f5295"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}