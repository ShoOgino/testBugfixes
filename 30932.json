{"path":"modules/queryparser/src/java/org/apache/lucene/queryparser/surround/parser/FastCharStream#refill().mjava","commits":[{"id":"a53a291ad9b1cc050d846b68758c061a55d52734","date":1310437344,"type":1,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queryparser/src/java/org/apache/lucene/queryparser/surround/parser/FastCharStream#refill().mjava","pathOld":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/surround/parser/FastCharStream#refill().mjava","sourceNew":"  private final void refill() throws IOException {\n    int newPosition = bufferLength - tokenStart;\n\n    if (tokenStart == 0) {\t\t\t  // token won't fit in buffer\n      if (buffer == null) {\t\t\t  // first time: alloc buffer\n\tbuffer = new char[2048];\n      } else if (bufferLength == buffer.length) { // grow buffer\n\tchar[] newBuffer = new char[buffer.length*2];\n\tSystem.arraycopy(buffer, 0, newBuffer, 0, bufferLength);\n\tbuffer = newBuffer;\n      }\n    } else {\t\t\t\t\t  // shift token to front\n      System.arraycopy(buffer, tokenStart, buffer, 0, newPosition);\n    }\n\n    bufferLength = newPosition;\t\t\t  // update state\n    bufferPosition = newPosition;\n    bufferStart += tokenStart;\n    tokenStart = 0;\n\n    int charsRead =\t\t\t\t  // fill space in buffer\n      input.read(buffer, newPosition, buffer.length-newPosition);\n    if (charsRead == -1)\n      throw new IOException(\"read past eof\");\n    else\n      bufferLength += charsRead;\n  }\n\n","sourceOld":"  private final void refill() throws IOException {\n    int newPosition = bufferLength - tokenStart;\n\n    if (tokenStart == 0) {\t\t\t  // token won't fit in buffer\n      if (buffer == null) {\t\t\t  // first time: alloc buffer\n\tbuffer = new char[2048];\n      } else if (bufferLength == buffer.length) { // grow buffer\n\tchar[] newBuffer = new char[buffer.length*2];\n\tSystem.arraycopy(buffer, 0, newBuffer, 0, bufferLength);\n\tbuffer = newBuffer;\n      }\n    } else {\t\t\t\t\t  // shift token to front\n      System.arraycopy(buffer, tokenStart, buffer, 0, newPosition);\n    }\n\n    bufferLength = newPosition;\t\t\t  // update state\n    bufferPosition = newPosition;\n    bufferStart += tokenStart;\n    tokenStart = 0;\n\n    int charsRead =\t\t\t\t  // fill space in buffer\n      input.read(buffer, newPosition, buffer.length-newPosition);\n    if (charsRead == -1)\n      throw new IOException(\"read past eof\");\n    else\n      bufferLength += charsRead;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/surround/parser/FastCharStream#refill().mjava","pathOld":"modules/queryparser/src/java/org/apache/lucene/queryparser/surround/parser/FastCharStream#refill().mjava","sourceNew":"  private final void refill() throws IOException {\n    int newPosition = bufferLength - tokenStart;\n\n    if (tokenStart == 0) {\t\t\t  // token won't fit in buffer\n      if (buffer == null) {\t\t\t  // first time: alloc buffer\n\tbuffer = new char[2048];\n      } else if (bufferLength == buffer.length) { // grow buffer\n\tchar[] newBuffer = new char[buffer.length*2];\n\tSystem.arraycopy(buffer, 0, newBuffer, 0, bufferLength);\n\tbuffer = newBuffer;\n      }\n    } else {\t\t\t\t\t  // shift token to front\n      System.arraycopy(buffer, tokenStart, buffer, 0, newPosition);\n    }\n\n    bufferLength = newPosition;\t\t\t  // update state\n    bufferPosition = newPosition;\n    bufferStart += tokenStart;\n    tokenStart = 0;\n\n    int charsRead =\t\t\t\t  // fill space in buffer\n      input.read(buffer, newPosition, buffer.length-newPosition);\n    if (charsRead == -1)\n      throw new IOException(\"read past eof\");\n    else\n      bufferLength += charsRead;\n  }\n\n","sourceOld":"  private final void refill() throws IOException {\n    int newPosition = bufferLength - tokenStart;\n\n    if (tokenStart == 0) {\t\t\t  // token won't fit in buffer\n      if (buffer == null) {\t\t\t  // first time: alloc buffer\n\tbuffer = new char[2048];\n      } else if (bufferLength == buffer.length) { // grow buffer\n\tchar[] newBuffer = new char[buffer.length*2];\n\tSystem.arraycopy(buffer, 0, newBuffer, 0, bufferLength);\n\tbuffer = newBuffer;\n      }\n    } else {\t\t\t\t\t  // shift token to front\n      System.arraycopy(buffer, tokenStart, buffer, 0, newPosition);\n    }\n\n    bufferLength = newPosition;\t\t\t  // update state\n    bufferPosition = newPosition;\n    bufferStart += tokenStart;\n    tokenStart = 0;\n\n    int charsRead =\t\t\t\t  // fill space in buffer\n      input.read(buffer, newPosition, buffer.length-newPosition);\n    if (charsRead == -1)\n      throw new IOException(\"read past eof\");\n    else\n      bufferLength += charsRead;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a53a291ad9b1cc050d846b68758c061a55d52734"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a53a291ad9b1cc050d846b68758c061a55d52734":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a53a291ad9b1cc050d846b68758c061a55d52734"],"a53a291ad9b1cc050d846b68758c061a55d52734":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}