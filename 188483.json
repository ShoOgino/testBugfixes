{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesProducer.CompressedBinaryDocValues#getTermsEnum(IndexInput).mjava","commits":[{"id":"11a746437bc5c0a0b3df0337ed249c387c812871","date":1376687959,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesProducer.CompressedBinaryDocValues#getTermsEnum(IndexInput).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/diskdv/DiskDocValuesProducer.CompressedBinaryDocValues#getTermsEnum(IndexInput).mjava","sourceNew":"    private TermsEnum getTermsEnum(final IndexInput input) throws IOException {\n      input.seek(bytes.offset);\n      \n      return new TermsEnum() {\n        private long currentOrd = -1;\n        // TODO: maxLength is negative when all terms are merged away...\n        private final BytesRef termBuffer = new BytesRef(bytes.maxLength < 0 ? 0 : bytes.maxLength);\n        private final BytesRef term = new BytesRef(); // TODO: paranoia?\n\n        @Override\n        public BytesRef next() throws IOException {\n          if (doNext() == null) {\n            return null;\n          } else {\n            setTerm();\n            return term;\n          }\n        }\n        \n        private BytesRef doNext() throws IOException {\n          if (++currentOrd >= numValues) {\n            return null;\n          } else {\n            int start = input.readVInt();\n            int suffix = input.readVInt();\n            input.readBytes(termBuffer.bytes, start, suffix);\n            termBuffer.length = start + suffix;\n            return termBuffer;\n          }\n        }\n\n        @Override\n        public SeekStatus seekCeil(BytesRef text) throws IOException {\n          // binary-search just the index values to find the block,\n          // then scan within the block\n          long low = 0;\n          long high = numIndexValues-1;\n\n          while (low <= high) {\n            long mid = (low + high) >>> 1;\n            doSeek(mid * interval);\n            int cmp = termBuffer.compareTo(text);\n\n            if (cmp < 0) {\n              low = mid + 1;\n            } else if (cmp > 0) {\n              high = mid - 1;\n            } else {\n              // we got lucky, found an indexed term\n              setTerm();\n              return SeekStatus.FOUND;\n            }\n          }\n          \n          if (numIndexValues == 0) {\n            return SeekStatus.END;\n          }\n          \n          // block before insertion point\n          long block = low-1;\n          doSeek(block < 0 ? -1 : block * interval);\n          \n          while (doNext() != null) {\n            int cmp = termBuffer.compareTo(text);\n            if (cmp == 0) {\n              setTerm();\n              return SeekStatus.FOUND;\n            } else if (cmp > 0) {\n              setTerm();\n              return SeekStatus.NOT_FOUND;\n            }\n          }\n          \n          return SeekStatus.END;\n        }\n\n        @Override\n        public void seekExact(long ord) throws IOException {\n          doSeek(ord);\n          setTerm();\n        }\n        \n        private void doSeek(long ord) throws IOException {\n          long block = ord / interval;\n\n          if (ord >= currentOrd && block == currentOrd / interval) {\n            // seek within current block\n          } else {\n            // position before start of block\n            currentOrd = ord - ord % interval - 1;\n            input.seek(bytes.offset + addresses.get(block));\n          }\n          \n          while (currentOrd < ord) {\n            doNext();\n          }\n        }\n        \n        private void setTerm() {\n          // TODO: is there a cleaner way\n          term.bytes = new byte[termBuffer.length];\n          term.offset = 0;\n          term.copyBytes(termBuffer);\n        }\n\n        @Override\n        public BytesRef term() throws IOException {\n          return term;\n        }\n\n        @Override\n        public long ord() throws IOException {\n          return currentOrd;\n        }\n        \n        @Override\n        public Comparator<BytesRef> getComparator() {\n          return BytesRef.getUTF8SortedAsUnicodeComparator();\n        }\n\n        @Override\n        public int docFreq() throws IOException {\n          throw new UnsupportedOperationException();\n        }\n\n        @Override\n        public long totalTermFreq() throws IOException {\n          return -1;\n        }\n\n        @Override\n        public DocsEnum docs(Bits liveDocs, DocsEnum reuse, int flags) throws IOException {\n          throw new UnsupportedOperationException();\n        }\n\n        @Override\n        public DocsAndPositionsEnum docsAndPositions(Bits liveDocs, DocsAndPositionsEnum reuse, int flags) throws IOException {\n          throw new UnsupportedOperationException();\n        }\n      };\n    }\n\n","sourceOld":"    private TermsEnum getTermsEnum(final IndexInput input) throws IOException {\n      input.seek(bytes.offset);\n      \n      return new TermsEnum() {\n        private long currentOrd = -1;\n        // TODO: maxLength is negative when all terms are merged away...\n        private final BytesRef termBuffer = new BytesRef(bytes.maxLength < 0 ? 0 : bytes.maxLength);\n        private final BytesRef term = new BytesRef(); // TODO: paranoia?\n\n        @Override\n        public BytesRef next() throws IOException {\n          if (doNext() == null) {\n            return null;\n          } else {\n            setTerm();\n            return term;\n          }\n        }\n        \n        private BytesRef doNext() throws IOException {\n          if (++currentOrd >= numValues) {\n            return null;\n          } else {\n            int start = input.readVInt();\n            int suffix = input.readVInt();\n            input.readBytes(termBuffer.bytes, start, suffix);\n            termBuffer.length = start + suffix;\n            return termBuffer;\n          }\n        }\n\n        @Override\n        public SeekStatus seekCeil(BytesRef text) throws IOException {\n          // binary-search just the index values to find the block,\n          // then scan within the block\n          long low = 0;\n          long high = numIndexValues-1;\n\n          while (low <= high) {\n            long mid = (low + high) >>> 1;\n            doSeek(mid * interval);\n            int cmp = termBuffer.compareTo(text);\n\n            if (cmp < 0) {\n              low = mid + 1;\n            } else if (cmp > 0) {\n              high = mid - 1;\n            } else {\n              // we got lucky, found an indexed term\n              setTerm();\n              return SeekStatus.FOUND;\n            }\n          }\n          \n          if (numIndexValues == 0) {\n            return SeekStatus.END;\n          }\n          \n          // block before insertion point\n          long block = low-1;\n          doSeek(block < 0 ? -1 : block * interval);\n          \n          while (doNext() != null) {\n            int cmp = termBuffer.compareTo(text);\n            if (cmp == 0) {\n              setTerm();\n              return SeekStatus.FOUND;\n            } else if (cmp > 0) {\n              setTerm();\n              return SeekStatus.NOT_FOUND;\n            }\n          }\n          \n          return SeekStatus.END;\n        }\n\n        @Override\n        public void seekExact(long ord) throws IOException {\n          doSeek(ord);\n          setTerm();\n        }\n        \n        private void doSeek(long ord) throws IOException {\n          long block = ord / interval;\n\n          if (ord >= currentOrd && block == currentOrd / interval) {\n            // seek within current block\n          } else {\n            // position before start of block\n            currentOrd = ord - ord % interval - 1;\n            input.seek(bytes.offset + addresses.get(block));\n          }\n          \n          while (currentOrd < ord) {\n            doNext();\n          }\n        }\n        \n        private void setTerm() {\n          // TODO: is there a cleaner way\n          term.bytes = new byte[termBuffer.length];\n          term.offset = 0;\n          term.copyBytes(termBuffer);\n        }\n\n        @Override\n        public BytesRef term() throws IOException {\n          return term;\n        }\n\n        @Override\n        public long ord() throws IOException {\n          return currentOrd;\n        }\n        \n        @Override\n        public Comparator<BytesRef> getComparator() {\n          return BytesRef.getUTF8SortedAsUnicodeComparator();\n        }\n\n        @Override\n        public int docFreq() throws IOException {\n          throw new UnsupportedOperationException();\n        }\n\n        @Override\n        public long totalTermFreq() throws IOException {\n          return -1;\n        }\n\n        @Override\n        public DocsEnum docs(Bits liveDocs, DocsEnum reuse, int flags) throws IOException {\n          throw new UnsupportedOperationException();\n        }\n\n        @Override\n        public DocsAndPositionsEnum docsAndPositions(Bits liveDocs, DocsAndPositionsEnum reuse, int flags) throws IOException {\n          throw new UnsupportedOperationException();\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff","date":1377034255,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesProducer.CompressedBinaryDocValues#getTermsEnum(IndexInput).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/diskdv/DiskDocValuesProducer.CompressedBinaryDocValues#getTermsEnum(IndexInput).mjava","sourceNew":"    private TermsEnum getTermsEnum(final IndexInput input) throws IOException {\n      input.seek(bytes.offset);\n      \n      return new TermsEnum() {\n        private long currentOrd = -1;\n        // TODO: maxLength is negative when all terms are merged away...\n        private final BytesRef termBuffer = new BytesRef(bytes.maxLength < 0 ? 0 : bytes.maxLength);\n        private final BytesRef term = new BytesRef(); // TODO: paranoia?\n\n        @Override\n        public BytesRef next() throws IOException {\n          if (doNext() == null) {\n            return null;\n          } else {\n            setTerm();\n            return term;\n          }\n        }\n        \n        private BytesRef doNext() throws IOException {\n          if (++currentOrd >= numValues) {\n            return null;\n          } else {\n            int start = input.readVInt();\n            int suffix = input.readVInt();\n            input.readBytes(termBuffer.bytes, start, suffix);\n            termBuffer.length = start + suffix;\n            return termBuffer;\n          }\n        }\n\n        @Override\n        public SeekStatus seekCeil(BytesRef text) throws IOException {\n          // binary-search just the index values to find the block,\n          // then scan within the block\n          long low = 0;\n          long high = numIndexValues-1;\n\n          while (low <= high) {\n            long mid = (low + high) >>> 1;\n            doSeek(mid * interval);\n            int cmp = termBuffer.compareTo(text);\n\n            if (cmp < 0) {\n              low = mid + 1;\n            } else if (cmp > 0) {\n              high = mid - 1;\n            } else {\n              // we got lucky, found an indexed term\n              setTerm();\n              return SeekStatus.FOUND;\n            }\n          }\n          \n          if (numIndexValues == 0) {\n            return SeekStatus.END;\n          }\n          \n          // block before insertion point\n          long block = low-1;\n          doSeek(block < 0 ? -1 : block * interval);\n          \n          while (doNext() != null) {\n            int cmp = termBuffer.compareTo(text);\n            if (cmp == 0) {\n              setTerm();\n              return SeekStatus.FOUND;\n            } else if (cmp > 0) {\n              setTerm();\n              return SeekStatus.NOT_FOUND;\n            }\n          }\n          \n          return SeekStatus.END;\n        }\n\n        @Override\n        public void seekExact(long ord) throws IOException {\n          doSeek(ord);\n          setTerm();\n        }\n        \n        private void doSeek(long ord) throws IOException {\n          long block = ord / interval;\n\n          if (ord >= currentOrd && block == currentOrd / interval) {\n            // seek within current block\n          } else {\n            // position before start of block\n            currentOrd = ord - ord % interval - 1;\n            input.seek(bytes.offset + addresses.get(block));\n          }\n          \n          while (currentOrd < ord) {\n            doNext();\n          }\n        }\n        \n        private void setTerm() {\n          // TODO: is there a cleaner way\n          term.bytes = new byte[termBuffer.length];\n          term.offset = 0;\n          term.copyBytes(termBuffer);\n        }\n\n        @Override\n        public BytesRef term() throws IOException {\n          return term;\n        }\n\n        @Override\n        public long ord() throws IOException {\n          return currentOrd;\n        }\n        \n        @Override\n        public Comparator<BytesRef> getComparator() {\n          return BytesRef.getUTF8SortedAsUnicodeComparator();\n        }\n\n        @Override\n        public int docFreq() throws IOException {\n          throw new UnsupportedOperationException();\n        }\n\n        @Override\n        public long totalTermFreq() throws IOException {\n          return -1;\n        }\n\n        @Override\n        public DocsEnum docs(Bits liveDocs, DocsEnum reuse, int flags) throws IOException {\n          throw new UnsupportedOperationException();\n        }\n\n        @Override\n        public DocsAndPositionsEnum docsAndPositions(Bits liveDocs, DocsAndPositionsEnum reuse, int flags) throws IOException {\n          throw new UnsupportedOperationException();\n        }\n      };\n    }\n\n","sourceOld":"    private TermsEnum getTermsEnum(final IndexInput input) throws IOException {\n      input.seek(bytes.offset);\n      \n      return new TermsEnum() {\n        private long currentOrd = -1;\n        // TODO: maxLength is negative when all terms are merged away...\n        private final BytesRef termBuffer = new BytesRef(bytes.maxLength < 0 ? 0 : bytes.maxLength);\n        private final BytesRef term = new BytesRef(); // TODO: paranoia?\n\n        @Override\n        public BytesRef next() throws IOException {\n          if (doNext() == null) {\n            return null;\n          } else {\n            setTerm();\n            return term;\n          }\n        }\n        \n        private BytesRef doNext() throws IOException {\n          if (++currentOrd >= numValues) {\n            return null;\n          } else {\n            int start = input.readVInt();\n            int suffix = input.readVInt();\n            input.readBytes(termBuffer.bytes, start, suffix);\n            termBuffer.length = start + suffix;\n            return termBuffer;\n          }\n        }\n\n        @Override\n        public SeekStatus seekCeil(BytesRef text) throws IOException {\n          // binary-search just the index values to find the block,\n          // then scan within the block\n          long low = 0;\n          long high = numIndexValues-1;\n\n          while (low <= high) {\n            long mid = (low + high) >>> 1;\n            doSeek(mid * interval);\n            int cmp = termBuffer.compareTo(text);\n\n            if (cmp < 0) {\n              low = mid + 1;\n            } else if (cmp > 0) {\n              high = mid - 1;\n            } else {\n              // we got lucky, found an indexed term\n              setTerm();\n              return SeekStatus.FOUND;\n            }\n          }\n          \n          if (numIndexValues == 0) {\n            return SeekStatus.END;\n          }\n          \n          // block before insertion point\n          long block = low-1;\n          doSeek(block < 0 ? -1 : block * interval);\n          \n          while (doNext() != null) {\n            int cmp = termBuffer.compareTo(text);\n            if (cmp == 0) {\n              setTerm();\n              return SeekStatus.FOUND;\n            } else if (cmp > 0) {\n              setTerm();\n              return SeekStatus.NOT_FOUND;\n            }\n          }\n          \n          return SeekStatus.END;\n        }\n\n        @Override\n        public void seekExact(long ord) throws IOException {\n          doSeek(ord);\n          setTerm();\n        }\n        \n        private void doSeek(long ord) throws IOException {\n          long block = ord / interval;\n\n          if (ord >= currentOrd && block == currentOrd / interval) {\n            // seek within current block\n          } else {\n            // position before start of block\n            currentOrd = ord - ord % interval - 1;\n            input.seek(bytes.offset + addresses.get(block));\n          }\n          \n          while (currentOrd < ord) {\n            doNext();\n          }\n        }\n        \n        private void setTerm() {\n          // TODO: is there a cleaner way\n          term.bytes = new byte[termBuffer.length];\n          term.offset = 0;\n          term.copyBytes(termBuffer);\n        }\n\n        @Override\n        public BytesRef term() throws IOException {\n          return term;\n        }\n\n        @Override\n        public long ord() throws IOException {\n          return currentOrd;\n        }\n        \n        @Override\n        public Comparator<BytesRef> getComparator() {\n          return BytesRef.getUTF8SortedAsUnicodeComparator();\n        }\n\n        @Override\n        public int docFreq() throws IOException {\n          throw new UnsupportedOperationException();\n        }\n\n        @Override\n        public long totalTermFreq() throws IOException {\n          return -1;\n        }\n\n        @Override\n        public DocsEnum docs(Bits liveDocs, DocsEnum reuse, int flags) throws IOException {\n          throw new UnsupportedOperationException();\n        }\n\n        @Override\n        public DocsAndPositionsEnum docsAndPositions(Bits liveDocs, DocsAndPositionsEnum reuse, int flags) throws IOException {\n          throw new UnsupportedOperationException();\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3dffec77fb8f7d0e9ca4869dddd6af94528b4576","date":1377875202,"type":1,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesProducer.CompressedBinaryDocValues#getTermsEnum(IndexInput).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/diskdv/DiskDocValuesProducer.CompressedBinaryDocValues#getTermsEnum(IndexInput).mjava","sourceNew":"    private TermsEnum getTermsEnum(final IndexInput input) throws IOException {\n      input.seek(bytes.offset);\n      \n      return new TermsEnum() {\n        private long currentOrd = -1;\n        // TODO: maxLength is negative when all terms are merged away...\n        private final BytesRef termBuffer = new BytesRef(bytes.maxLength < 0 ? 0 : bytes.maxLength);\n        private final BytesRef term = new BytesRef(); // TODO: paranoia?\n\n        @Override\n        public BytesRef next() throws IOException {\n          if (doNext() == null) {\n            return null;\n          } else {\n            setTerm();\n            return term;\n          }\n        }\n        \n        private BytesRef doNext() throws IOException {\n          if (++currentOrd >= numValues) {\n            return null;\n          } else {\n            int start = input.readVInt();\n            int suffix = input.readVInt();\n            input.readBytes(termBuffer.bytes, start, suffix);\n            termBuffer.length = start + suffix;\n            return termBuffer;\n          }\n        }\n\n        @Override\n        public SeekStatus seekCeil(BytesRef text) throws IOException {\n          // binary-search just the index values to find the block,\n          // then scan within the block\n          long low = 0;\n          long high = numIndexValues-1;\n\n          while (low <= high) {\n            long mid = (low + high) >>> 1;\n            doSeek(mid * interval);\n            int cmp = termBuffer.compareTo(text);\n\n            if (cmp < 0) {\n              low = mid + 1;\n            } else if (cmp > 0) {\n              high = mid - 1;\n            } else {\n              // we got lucky, found an indexed term\n              setTerm();\n              return SeekStatus.FOUND;\n            }\n          }\n          \n          if (numIndexValues == 0) {\n            return SeekStatus.END;\n          }\n          \n          // block before insertion point\n          long block = low-1;\n          doSeek(block < 0 ? -1 : block * interval);\n          \n          while (doNext() != null) {\n            int cmp = termBuffer.compareTo(text);\n            if (cmp == 0) {\n              setTerm();\n              return SeekStatus.FOUND;\n            } else if (cmp > 0) {\n              setTerm();\n              return SeekStatus.NOT_FOUND;\n            }\n          }\n          \n          return SeekStatus.END;\n        }\n\n        @Override\n        public void seekExact(long ord) throws IOException {\n          doSeek(ord);\n          setTerm();\n        }\n        \n        private void doSeek(long ord) throws IOException {\n          long block = ord / interval;\n\n          if (ord >= currentOrd && block == currentOrd / interval) {\n            // seek within current block\n          } else {\n            // position before start of block\n            currentOrd = ord - ord % interval - 1;\n            input.seek(bytes.offset + addresses.get(block));\n          }\n          \n          while (currentOrd < ord) {\n            doNext();\n          }\n        }\n        \n        private void setTerm() {\n          // TODO: is there a cleaner way\n          term.bytes = new byte[termBuffer.length];\n          term.offset = 0;\n          term.copyBytes(termBuffer);\n        }\n\n        @Override\n        public BytesRef term() throws IOException {\n          return term;\n        }\n\n        @Override\n        public long ord() throws IOException {\n          return currentOrd;\n        }\n        \n        @Override\n        public Comparator<BytesRef> getComparator() {\n          return BytesRef.getUTF8SortedAsUnicodeComparator();\n        }\n\n        @Override\n        public int docFreq() throws IOException {\n          throw new UnsupportedOperationException();\n        }\n\n        @Override\n        public long totalTermFreq() throws IOException {\n          return -1;\n        }\n\n        @Override\n        public DocsEnum docs(Bits liveDocs, DocsEnum reuse, int flags) throws IOException {\n          throw new UnsupportedOperationException();\n        }\n\n        @Override\n        public DocsAndPositionsEnum docsAndPositions(Bits liveDocs, DocsAndPositionsEnum reuse, int flags) throws IOException {\n          throw new UnsupportedOperationException();\n        }\n      };\n    }\n\n","sourceOld":"    private TermsEnum getTermsEnum(final IndexInput input) throws IOException {\n      input.seek(bytes.offset);\n      \n      return new TermsEnum() {\n        private long currentOrd = -1;\n        // TODO: maxLength is negative when all terms are merged away...\n        private final BytesRef termBuffer = new BytesRef(bytes.maxLength < 0 ? 0 : bytes.maxLength);\n        private final BytesRef term = new BytesRef(); // TODO: paranoia?\n\n        @Override\n        public BytesRef next() throws IOException {\n          if (doNext() == null) {\n            return null;\n          } else {\n            setTerm();\n            return term;\n          }\n        }\n        \n        private BytesRef doNext() throws IOException {\n          if (++currentOrd >= numValues) {\n            return null;\n          } else {\n            int start = input.readVInt();\n            int suffix = input.readVInt();\n            input.readBytes(termBuffer.bytes, start, suffix);\n            termBuffer.length = start + suffix;\n            return termBuffer;\n          }\n        }\n\n        @Override\n        public SeekStatus seekCeil(BytesRef text) throws IOException {\n          // binary-search just the index values to find the block,\n          // then scan within the block\n          long low = 0;\n          long high = numIndexValues-1;\n\n          while (low <= high) {\n            long mid = (low + high) >>> 1;\n            doSeek(mid * interval);\n            int cmp = termBuffer.compareTo(text);\n\n            if (cmp < 0) {\n              low = mid + 1;\n            } else if (cmp > 0) {\n              high = mid - 1;\n            } else {\n              // we got lucky, found an indexed term\n              setTerm();\n              return SeekStatus.FOUND;\n            }\n          }\n          \n          if (numIndexValues == 0) {\n            return SeekStatus.END;\n          }\n          \n          // block before insertion point\n          long block = low-1;\n          doSeek(block < 0 ? -1 : block * interval);\n          \n          while (doNext() != null) {\n            int cmp = termBuffer.compareTo(text);\n            if (cmp == 0) {\n              setTerm();\n              return SeekStatus.FOUND;\n            } else if (cmp > 0) {\n              setTerm();\n              return SeekStatus.NOT_FOUND;\n            }\n          }\n          \n          return SeekStatus.END;\n        }\n\n        @Override\n        public void seekExact(long ord) throws IOException {\n          doSeek(ord);\n          setTerm();\n        }\n        \n        private void doSeek(long ord) throws IOException {\n          long block = ord / interval;\n\n          if (ord >= currentOrd && block == currentOrd / interval) {\n            // seek within current block\n          } else {\n            // position before start of block\n            currentOrd = ord - ord % interval - 1;\n            input.seek(bytes.offset + addresses.get(block));\n          }\n          \n          while (currentOrd < ord) {\n            doNext();\n          }\n        }\n        \n        private void setTerm() {\n          // TODO: is there a cleaner way\n          term.bytes = new byte[termBuffer.length];\n          term.offset = 0;\n          term.copyBytes(termBuffer);\n        }\n\n        @Override\n        public BytesRef term() throws IOException {\n          return term;\n        }\n\n        @Override\n        public long ord() throws IOException {\n          return currentOrd;\n        }\n        \n        @Override\n        public Comparator<BytesRef> getComparator() {\n          return BytesRef.getUTF8SortedAsUnicodeComparator();\n        }\n\n        @Override\n        public int docFreq() throws IOException {\n          throw new UnsupportedOperationException();\n        }\n\n        @Override\n        public long totalTermFreq() throws IOException {\n          return -1;\n        }\n\n        @Override\n        public DocsEnum docs(Bits liveDocs, DocsEnum reuse, int flags) throws IOException {\n          throw new UnsupportedOperationException();\n        }\n\n        @Override\n        public DocsAndPositionsEnum docsAndPositions(Bits liveDocs, DocsAndPositionsEnum reuse, int flags) throws IOException {\n          throw new UnsupportedOperationException();\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5","date":1379624229,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesProducer.CompressedBinaryDocValues#getTermsEnum(IndexInput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesProducer.CompressedBinaryDocValues#getTermsEnum(IndexInput).mjava","sourceNew":"    private TermsEnum getTermsEnum(final IndexInput input) throws IOException {\n      input.seek(bytes.offset);\n      \n      return new TermsEnum() {\n        private long currentOrd = -1;\n        // TODO: maxLength is negative when all terms are merged away...\n        private final BytesRef termBuffer = new BytesRef(bytes.maxLength < 0 ? 0 : bytes.maxLength);\n        private final BytesRef term = new BytesRef(); // TODO: paranoia?\n\n        @Override\n        public BytesRef next() throws IOException {\n          if (doNext() == null) {\n            return null;\n          } else {\n            setTerm();\n            return term;\n          }\n        }\n        \n        private BytesRef doNext() throws IOException {\n          if (++currentOrd >= numValues) {\n            return null;\n          } else {\n            int start = input.readVInt();\n            int suffix = input.readVInt();\n            input.readBytes(termBuffer.bytes, start, suffix);\n            termBuffer.length = start + suffix;\n            return termBuffer;\n          }\n        }\n\n        @Override\n        public SeekStatus seekCeil(BytesRef text) throws IOException {\n          // binary-search just the index values to find the block,\n          // then scan within the block\n          long low = 0;\n          long high = numIndexValues-1;\n\n          while (low <= high) {\n            long mid = (low + high) >>> 1;\n            doSeek(mid * interval);\n            int cmp = termBuffer.compareTo(text);\n\n            if (cmp < 0) {\n              low = mid + 1;\n            } else if (cmp > 0) {\n              high = mid - 1;\n            } else {\n              // we got lucky, found an indexed term\n              setTerm();\n              return SeekStatus.FOUND;\n            }\n          }\n          \n          if (numIndexValues == 0) {\n            return SeekStatus.END;\n          }\n          \n          // block before insertion point\n          long block = low-1;\n          doSeek(block < 0 ? -1 : block * interval);\n          \n          while (doNext() != null) {\n            int cmp = termBuffer.compareTo(text);\n            if (cmp == 0) {\n              setTerm();\n              return SeekStatus.FOUND;\n            } else if (cmp > 0) {\n              setTerm();\n              return SeekStatus.NOT_FOUND;\n            }\n          }\n          \n          return SeekStatus.END;\n        }\n\n        @Override\n        public void seekExact(long ord) throws IOException {\n          doSeek(ord);\n          setTerm();\n        }\n        \n        private void doSeek(long ord) throws IOException {\n          long block = ord / interval;\n\n          if (ord >= currentOrd && block == currentOrd / interval) {\n            // seek within current block\n          } else {\n            // position before start of block\n            currentOrd = ord - ord % interval - 1;\n            input.seek(bytes.offset + addresses.get(block));\n          }\n          \n          while (currentOrd < ord) {\n            doNext();\n          }\n        }\n        \n        private void setTerm() {\n          // TODO: is there a cleaner way\n          term.bytes = new byte[termBuffer.length];\n          term.offset = 0;\n          term.copyBytes(termBuffer);\n        }\n\n        @Override\n        public BytesRef term() throws IOException {\n          return term;\n        }\n\n        @Override\n        public long ord() throws IOException {\n          return currentOrd;\n        }\n\n        @Override\n        public int docFreq() throws IOException {\n          throw new UnsupportedOperationException();\n        }\n\n        @Override\n        public long totalTermFreq() throws IOException {\n          return -1;\n        }\n\n        @Override\n        public DocsEnum docs(Bits liveDocs, DocsEnum reuse, int flags) throws IOException {\n          throw new UnsupportedOperationException();\n        }\n\n        @Override\n        public DocsAndPositionsEnum docsAndPositions(Bits liveDocs, DocsAndPositionsEnum reuse, int flags) throws IOException {\n          throw new UnsupportedOperationException();\n        }\n      };\n    }\n\n","sourceOld":"    private TermsEnum getTermsEnum(final IndexInput input) throws IOException {\n      input.seek(bytes.offset);\n      \n      return new TermsEnum() {\n        private long currentOrd = -1;\n        // TODO: maxLength is negative when all terms are merged away...\n        private final BytesRef termBuffer = new BytesRef(bytes.maxLength < 0 ? 0 : bytes.maxLength);\n        private final BytesRef term = new BytesRef(); // TODO: paranoia?\n\n        @Override\n        public BytesRef next() throws IOException {\n          if (doNext() == null) {\n            return null;\n          } else {\n            setTerm();\n            return term;\n          }\n        }\n        \n        private BytesRef doNext() throws IOException {\n          if (++currentOrd >= numValues) {\n            return null;\n          } else {\n            int start = input.readVInt();\n            int suffix = input.readVInt();\n            input.readBytes(termBuffer.bytes, start, suffix);\n            termBuffer.length = start + suffix;\n            return termBuffer;\n          }\n        }\n\n        @Override\n        public SeekStatus seekCeil(BytesRef text) throws IOException {\n          // binary-search just the index values to find the block,\n          // then scan within the block\n          long low = 0;\n          long high = numIndexValues-1;\n\n          while (low <= high) {\n            long mid = (low + high) >>> 1;\n            doSeek(mid * interval);\n            int cmp = termBuffer.compareTo(text);\n\n            if (cmp < 0) {\n              low = mid + 1;\n            } else if (cmp > 0) {\n              high = mid - 1;\n            } else {\n              // we got lucky, found an indexed term\n              setTerm();\n              return SeekStatus.FOUND;\n            }\n          }\n          \n          if (numIndexValues == 0) {\n            return SeekStatus.END;\n          }\n          \n          // block before insertion point\n          long block = low-1;\n          doSeek(block < 0 ? -1 : block * interval);\n          \n          while (doNext() != null) {\n            int cmp = termBuffer.compareTo(text);\n            if (cmp == 0) {\n              setTerm();\n              return SeekStatus.FOUND;\n            } else if (cmp > 0) {\n              setTerm();\n              return SeekStatus.NOT_FOUND;\n            }\n          }\n          \n          return SeekStatus.END;\n        }\n\n        @Override\n        public void seekExact(long ord) throws IOException {\n          doSeek(ord);\n          setTerm();\n        }\n        \n        private void doSeek(long ord) throws IOException {\n          long block = ord / interval;\n\n          if (ord >= currentOrd && block == currentOrd / interval) {\n            // seek within current block\n          } else {\n            // position before start of block\n            currentOrd = ord - ord % interval - 1;\n            input.seek(bytes.offset + addresses.get(block));\n          }\n          \n          while (currentOrd < ord) {\n            doNext();\n          }\n        }\n        \n        private void setTerm() {\n          // TODO: is there a cleaner way\n          term.bytes = new byte[termBuffer.length];\n          term.offset = 0;\n          term.copyBytes(termBuffer);\n        }\n\n        @Override\n        public BytesRef term() throws IOException {\n          return term;\n        }\n\n        @Override\n        public long ord() throws IOException {\n          return currentOrd;\n        }\n        \n        @Override\n        public Comparator<BytesRef> getComparator() {\n          return BytesRef.getUTF8SortedAsUnicodeComparator();\n        }\n\n        @Override\n        public int docFreq() throws IOException {\n          throw new UnsupportedOperationException();\n        }\n\n        @Override\n        public long totalTermFreq() throws IOException {\n          return -1;\n        }\n\n        @Override\n        public DocsEnum docs(Bits liveDocs, DocsEnum reuse, int flags) throws IOException {\n          throw new UnsupportedOperationException();\n        }\n\n        @Override\n        public DocsAndPositionsEnum docsAndPositions(Bits liveDocs, DocsAndPositionsEnum reuse, int flags) throws IOException {\n          throw new UnsupportedOperationException();\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf","date":1401983689,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesProducer.CompressedBinaryDocValues#getTermsEnum(IndexInput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesProducer.CompressedBinaryDocValues#getTermsEnum(IndexInput).mjava","sourceNew":"    private TermsEnum getTermsEnum(final IndexInput input) throws IOException {\n      input.seek(bytes.offset);\n      \n      return new TermsEnum() {\n        private long currentOrd = -1;\n        // TODO: maxLength is negative when all terms are merged away...\n        private final BytesRef term = new BytesRef(bytes.maxLength < 0 ? 0 : bytes.maxLength);\n\n        @Override\n        public BytesRef next() throws IOException {\n          if (++currentOrd >= numValues) {\n            return null;\n          } else {\n            int start = input.readVInt();\n            int suffix = input.readVInt();\n            input.readBytes(term.bytes, start, suffix);\n            term.length = start + suffix;\n            return term;\n          }\n        }\n\n        @Override\n        public SeekStatus seekCeil(BytesRef text) throws IOException {\n          // binary-search just the index values to find the block,\n          // then scan within the block\n          long low = 0;\n          long high = numIndexValues-1;\n\n          while (low <= high) {\n            long mid = (low + high) >>> 1;\n            seekExact(mid * interval);\n            int cmp = term.compareTo(text);\n\n            if (cmp < 0) {\n              low = mid + 1;\n            } else if (cmp > 0) {\n              high = mid - 1;\n            } else {\n              // we got lucky, found an indexed term\n              return SeekStatus.FOUND;\n            }\n          }\n          \n          if (numIndexValues == 0) {\n            return SeekStatus.END;\n          }\n          \n          // block before insertion point\n          long block = low-1;\n          seekExact(block < 0 ? -1 : block * interval);\n          \n          while (next() != null) {\n            int cmp = term.compareTo(text);\n            if (cmp == 0) {\n              return SeekStatus.FOUND;\n            } else if (cmp > 0) {\n              return SeekStatus.NOT_FOUND;\n            }\n          }\n          \n          return SeekStatus.END;\n        }\n\n        @Override\n        public void seekExact(long ord) throws IOException {\n          long block = ord / interval;\n\n          if (ord >= currentOrd && block == currentOrd / interval) {\n            // seek within current block\n          } else {\n            // position before start of block\n            currentOrd = ord - ord % interval - 1;\n            input.seek(bytes.offset + addresses.get(block));\n          }\n          \n          while (currentOrd < ord) {\n            next();\n          }\n        }\n\n        @Override\n        public BytesRef term() throws IOException {\n          return term;\n        }\n\n        @Override\n        public long ord() throws IOException {\n          return currentOrd;\n        }\n\n        @Override\n        public int docFreq() throws IOException {\n          throw new UnsupportedOperationException();\n        }\n\n        @Override\n        public long totalTermFreq() throws IOException {\n          return -1;\n        }\n\n        @Override\n        public DocsEnum docs(Bits liveDocs, DocsEnum reuse, int flags) throws IOException {\n          throw new UnsupportedOperationException();\n        }\n\n        @Override\n        public DocsAndPositionsEnum docsAndPositions(Bits liveDocs, DocsAndPositionsEnum reuse, int flags) throws IOException {\n          throw new UnsupportedOperationException();\n        }\n      };\n    }\n\n","sourceOld":"    private TermsEnum getTermsEnum(final IndexInput input) throws IOException {\n      input.seek(bytes.offset);\n      \n      return new TermsEnum() {\n        private long currentOrd = -1;\n        // TODO: maxLength is negative when all terms are merged away...\n        private final BytesRef termBuffer = new BytesRef(bytes.maxLength < 0 ? 0 : bytes.maxLength);\n        private final BytesRef term = new BytesRef(); // TODO: paranoia?\n\n        @Override\n        public BytesRef next() throws IOException {\n          if (doNext() == null) {\n            return null;\n          } else {\n            setTerm();\n            return term;\n          }\n        }\n        \n        private BytesRef doNext() throws IOException {\n          if (++currentOrd >= numValues) {\n            return null;\n          } else {\n            int start = input.readVInt();\n            int suffix = input.readVInt();\n            input.readBytes(termBuffer.bytes, start, suffix);\n            termBuffer.length = start + suffix;\n            return termBuffer;\n          }\n        }\n\n        @Override\n        public SeekStatus seekCeil(BytesRef text) throws IOException {\n          // binary-search just the index values to find the block,\n          // then scan within the block\n          long low = 0;\n          long high = numIndexValues-1;\n\n          while (low <= high) {\n            long mid = (low + high) >>> 1;\n            doSeek(mid * interval);\n            int cmp = termBuffer.compareTo(text);\n\n            if (cmp < 0) {\n              low = mid + 1;\n            } else if (cmp > 0) {\n              high = mid - 1;\n            } else {\n              // we got lucky, found an indexed term\n              setTerm();\n              return SeekStatus.FOUND;\n            }\n          }\n          \n          if (numIndexValues == 0) {\n            return SeekStatus.END;\n          }\n          \n          // block before insertion point\n          long block = low-1;\n          doSeek(block < 0 ? -1 : block * interval);\n          \n          while (doNext() != null) {\n            int cmp = termBuffer.compareTo(text);\n            if (cmp == 0) {\n              setTerm();\n              return SeekStatus.FOUND;\n            } else if (cmp > 0) {\n              setTerm();\n              return SeekStatus.NOT_FOUND;\n            }\n          }\n          \n          return SeekStatus.END;\n        }\n\n        @Override\n        public void seekExact(long ord) throws IOException {\n          doSeek(ord);\n          setTerm();\n        }\n        \n        private void doSeek(long ord) throws IOException {\n          long block = ord / interval;\n\n          if (ord >= currentOrd && block == currentOrd / interval) {\n            // seek within current block\n          } else {\n            // position before start of block\n            currentOrd = ord - ord % interval - 1;\n            input.seek(bytes.offset + addresses.get(block));\n          }\n          \n          while (currentOrd < ord) {\n            doNext();\n          }\n        }\n        \n        private void setTerm() {\n          // TODO: is there a cleaner way\n          term.bytes = new byte[termBuffer.length];\n          term.offset = 0;\n          term.copyBytes(termBuffer);\n        }\n\n        @Override\n        public BytesRef term() throws IOException {\n          return term;\n        }\n\n        @Override\n        public long ord() throws IOException {\n          return currentOrd;\n        }\n\n        @Override\n        public int docFreq() throws IOException {\n          throw new UnsupportedOperationException();\n        }\n\n        @Override\n        public long totalTermFreq() throws IOException {\n          return -1;\n        }\n\n        @Override\n        public DocsEnum docs(Bits liveDocs, DocsEnum reuse, int flags) throws IOException {\n          throw new UnsupportedOperationException();\n        }\n\n        @Override\n        public DocsAndPositionsEnum docsAndPositions(Bits liveDocs, DocsAndPositionsEnum reuse, int flags) throws IOException {\n          throw new UnsupportedOperationException();\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cc45c615dbb82bf79d5f9550286098367874fbf","date":1409571423,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesProducer.CompressedBinaryDocValues#getTermsEnum(IndexInput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesProducer.CompressedBinaryDocValues#getTermsEnum(IndexInput).mjava","sourceNew":"    private TermsEnum getTermsEnum(final IndexInput input) throws IOException {\n      input.seek(bytes.offset);\n      \n      return new TermsEnum() {\n        private long currentOrd = -1;\n        // TODO: maxLength is negative when all terms are merged away...\n        private final BytesRef term = new BytesRef(bytes.maxLength < 0 ? 0 : bytes.maxLength);\n\n        @Override\n        public BytesRef next() throws IOException {\n          if (++currentOrd >= numValues) {\n            return null;\n          } else {\n            int start = input.readVInt();\n            int suffix = input.readVInt();\n            input.readBytes(term.bytes, start, suffix);\n            term.length = start + suffix;\n            return term;\n          }\n        }\n\n        @Override\n        public SeekStatus seekCeil(BytesRef text) throws IOException {\n          // binary-search just the index values to find the block,\n          // then scan within the block\n          long low = 0;\n          long high = numIndexValues-1;\n\n          while (low <= high) {\n            long mid = (low + high) >>> 1;\n            seekExact(mid * interval);\n            int cmp = term.compareTo(text);\n\n            if (cmp < 0) {\n              low = mid + 1;\n            } else if (cmp > 0) {\n              high = mid - 1;\n            } else {\n              // we got lucky, found an indexed term\n              return SeekStatus.FOUND;\n            }\n          }\n          \n          if (numIndexValues == 0) {\n            return SeekStatus.END;\n          }\n          \n          // block before insertion point\n          long block = low-1;\n          seekExact(block < 0 ? -1 : block * interval);\n          \n          while (next() != null) {\n            int cmp = term.compareTo(text);\n            if (cmp == 0) {\n              return SeekStatus.FOUND;\n            } else if (cmp > 0) {\n              return SeekStatus.NOT_FOUND;\n            }\n          }\n          \n          return SeekStatus.END;\n        }\n\n        @Override\n        public void seekExact(long ord) throws IOException {\n          long block = ord / interval;\n\n          if (ord >= currentOrd && block == currentOrd / interval) {\n            // seek within current block\n          } else {\n            // position before start of block\n            currentOrd = ord - ord % interval - 1;\n            input.seek(bytes.offset + addresses.get(block));\n          }\n          \n          while (currentOrd < ord) {\n            next();\n          }\n        }\n\n        @Override\n        public BytesRef term() throws IOException {\n          return term;\n        }\n\n        @Override\n        public long ord() throws IOException {\n          return currentOrd;\n        }\n\n        @Override\n        public int docFreq() throws IOException {\n          throw new UnsupportedOperationException();\n        }\n\n        @Override\n        public long totalTermFreq() throws IOException {\n          return -1;\n        }\n\n        @Override\n        public DocsEnum docs(Bits liveDocs, DocsEnum reuse, int flags) throws IOException {\n          throw new UnsupportedOperationException();\n        }\n\n        @Override\n        public DocsAndPositionsEnum docsAndPositions(Bits liveDocs, DocsAndPositionsEnum reuse, int flags) throws IOException {\n          throw new UnsupportedOperationException();\n        }\n      };\n    }\n\n","sourceOld":"    private TermsEnum getTermsEnum(final IndexInput input) throws IOException {\n      input.seek(bytes.offset);\n      \n      return new TermsEnum() {\n        private long currentOrd = -1;\n        // TODO: maxLength is negative when all terms are merged away...\n        private final BytesRef term = new BytesRef(bytes.maxLength < 0 ? 0 : bytes.maxLength);\n\n        @Override\n        public BytesRef next() throws IOException {\n          if (++currentOrd >= numValues) {\n            return null;\n          } else {\n            int start = input.readVInt();\n            int suffix = input.readVInt();\n            input.readBytes(term.bytes, start, suffix);\n            term.length = start + suffix;\n            return term;\n          }\n        }\n\n        @Override\n        public SeekStatus seekCeil(BytesRef text) throws IOException {\n          // binary-search just the index values to find the block,\n          // then scan within the block\n          long low = 0;\n          long high = numIndexValues-1;\n\n          while (low <= high) {\n            long mid = (low + high) >>> 1;\n            seekExact(mid * interval);\n            int cmp = term.compareTo(text);\n\n            if (cmp < 0) {\n              low = mid + 1;\n            } else if (cmp > 0) {\n              high = mid - 1;\n            } else {\n              // we got lucky, found an indexed term\n              return SeekStatus.FOUND;\n            }\n          }\n          \n          if (numIndexValues == 0) {\n            return SeekStatus.END;\n          }\n          \n          // block before insertion point\n          long block = low-1;\n          seekExact(block < 0 ? -1 : block * interval);\n          \n          while (next() != null) {\n            int cmp = term.compareTo(text);\n            if (cmp == 0) {\n              return SeekStatus.FOUND;\n            } else if (cmp > 0) {\n              return SeekStatus.NOT_FOUND;\n            }\n          }\n          \n          return SeekStatus.END;\n        }\n\n        @Override\n        public void seekExact(long ord) throws IOException {\n          long block = ord / interval;\n\n          if (ord >= currentOrd && block == currentOrd / interval) {\n            // seek within current block\n          } else {\n            // position before start of block\n            currentOrd = ord - ord % interval - 1;\n            input.seek(bytes.offset + addresses.get(block));\n          }\n          \n          while (currentOrd < ord) {\n            next();\n          }\n        }\n\n        @Override\n        public BytesRef term() throws IOException {\n          return term;\n        }\n\n        @Override\n        public long ord() throws IOException {\n          return currentOrd;\n        }\n\n        @Override\n        public int docFreq() throws IOException {\n          throw new UnsupportedOperationException();\n        }\n\n        @Override\n        public long totalTermFreq() throws IOException {\n          return -1;\n        }\n\n        @Override\n        public DocsEnum docs(Bits liveDocs, DocsEnum reuse, int flags) throws IOException {\n          throw new UnsupportedOperationException();\n        }\n\n        @Override\n        public DocsAndPositionsEnum docsAndPositions(Bits liveDocs, DocsAndPositionsEnum reuse, int flags) throws IOException {\n          throw new UnsupportedOperationException();\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"402ad3ddc9da7b70da1b167667a60ece6a1381fb","date":1409656478,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesProducer.CompressedBinaryDocValues#getTermsEnum(IndexInput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesProducer.CompressedBinaryDocValues#getTermsEnum(IndexInput).mjava","sourceNew":"    private TermsEnum getTermsEnum(final IndexInput input) throws IOException {\n      input.seek(bytes.offset);\n      \n      return new TermsEnum() {\n        private long currentOrd = -1;\n        // TODO: maxLength is negative when all terms are merged away...\n        private final BytesRef term = new BytesRef(bytes.maxLength < 0 ? 0 : bytes.maxLength);\n\n        @Override\n        public BytesRef next() throws IOException {\n          if (++currentOrd >= numValues) {\n            return null;\n          } else {\n            int start = input.readVInt();\n            int suffix = input.readVInt();\n            input.readBytes(term.bytes, start, suffix);\n            term.length = start + suffix;\n            return term;\n          }\n        }\n\n        @Override\n        public SeekStatus seekCeil(BytesRef text) throws IOException {\n          // binary-search just the index values to find the block,\n          // then scan within the block\n          long low = 0;\n          long high = numIndexValues-1;\n\n          while (low <= high) {\n            long mid = (low + high) >>> 1;\n            seekExact(mid * interval);\n            int cmp = term.compareTo(text);\n\n            if (cmp < 0) {\n              low = mid + 1;\n            } else if (cmp > 0) {\n              high = mid - 1;\n            } else {\n              // we got lucky, found an indexed term\n              return SeekStatus.FOUND;\n            }\n          }\n          \n          if (numIndexValues == 0) {\n            return SeekStatus.END;\n          }\n          \n          // block before insertion point\n          long block = low-1;\n          seekExact(block < 0 ? -1 : block * interval);\n          \n          while (next() != null) {\n            int cmp = term.compareTo(text);\n            if (cmp == 0) {\n              return SeekStatus.FOUND;\n            } else if (cmp > 0) {\n              return SeekStatus.NOT_FOUND;\n            }\n          }\n          \n          return SeekStatus.END;\n        }\n\n        @Override\n        public void seekExact(long ord) throws IOException {\n          long block = ord / interval;\n\n          if (ord >= currentOrd && block == currentOrd / interval) {\n            // seek within current block\n          } else {\n            // position before start of block\n            currentOrd = ord - ord % interval - 1;\n            input.seek(bytes.offset + addresses.get(block));\n          }\n          \n          while (currentOrd < ord) {\n            next();\n          }\n        }\n\n        @Override\n        public BytesRef term() throws IOException {\n          return term;\n        }\n\n        @Override\n        public long ord() throws IOException {\n          return currentOrd;\n        }\n\n        @Override\n        public int docFreq() throws IOException {\n          throw new UnsupportedOperationException();\n        }\n\n        @Override\n        public long totalTermFreq() throws IOException {\n          return -1;\n        }\n\n        @Override\n        public DocsEnum docs(Bits liveDocs, DocsEnum reuse, int flags) throws IOException {\n          throw new UnsupportedOperationException();\n        }\n\n        @Override\n        public DocsAndPositionsEnum docsAndPositions(Bits liveDocs, DocsAndPositionsEnum reuse, int flags) throws IOException {\n          throw new UnsupportedOperationException();\n        }\n      };\n    }\n\n","sourceOld":"    private TermsEnum getTermsEnum(final IndexInput input) throws IOException {\n      input.seek(bytes.offset);\n      \n      return new TermsEnum() {\n        private long currentOrd = -1;\n        // TODO: maxLength is negative when all terms are merged away...\n        private final BytesRef term = new BytesRef(bytes.maxLength < 0 ? 0 : bytes.maxLength);\n\n        @Override\n        public BytesRef next() throws IOException {\n          if (++currentOrd >= numValues) {\n            return null;\n          } else {\n            int start = input.readVInt();\n            int suffix = input.readVInt();\n            input.readBytes(term.bytes, start, suffix);\n            term.length = start + suffix;\n            return term;\n          }\n        }\n\n        @Override\n        public SeekStatus seekCeil(BytesRef text) throws IOException {\n          // binary-search just the index values to find the block,\n          // then scan within the block\n          long low = 0;\n          long high = numIndexValues-1;\n\n          while (low <= high) {\n            long mid = (low + high) >>> 1;\n            seekExact(mid * interval);\n            int cmp = term.compareTo(text);\n\n            if (cmp < 0) {\n              low = mid + 1;\n            } else if (cmp > 0) {\n              high = mid - 1;\n            } else {\n              // we got lucky, found an indexed term\n              return SeekStatus.FOUND;\n            }\n          }\n          \n          if (numIndexValues == 0) {\n            return SeekStatus.END;\n          }\n          \n          // block before insertion point\n          long block = low-1;\n          seekExact(block < 0 ? -1 : block * interval);\n          \n          while (next() != null) {\n            int cmp = term.compareTo(text);\n            if (cmp == 0) {\n              return SeekStatus.FOUND;\n            } else if (cmp > 0) {\n              return SeekStatus.NOT_FOUND;\n            }\n          }\n          \n          return SeekStatus.END;\n        }\n\n        @Override\n        public void seekExact(long ord) throws IOException {\n          long block = ord / interval;\n\n          if (ord >= currentOrd && block == currentOrd / interval) {\n            // seek within current block\n          } else {\n            // position before start of block\n            currentOrd = ord - ord % interval - 1;\n            input.seek(bytes.offset + addresses.get(block));\n          }\n          \n          while (currentOrd < ord) {\n            next();\n          }\n        }\n\n        @Override\n        public BytesRef term() throws IOException {\n          return term;\n        }\n\n        @Override\n        public long ord() throws IOException {\n          return currentOrd;\n        }\n\n        @Override\n        public int docFreq() throws IOException {\n          throw new UnsupportedOperationException();\n        }\n\n        @Override\n        public long totalTermFreq() throws IOException {\n          return -1;\n        }\n\n        @Override\n        public DocsEnum docs(Bits liveDocs, DocsEnum reuse, int flags) throws IOException {\n          throw new UnsupportedOperationException();\n        }\n\n        @Override\n        public DocsAndPositionsEnum docsAndPositions(Bits liveDocs, DocsAndPositionsEnum reuse, int flags) throws IOException {\n          throw new UnsupportedOperationException();\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"11a746437bc5c0a0b3df0337ed249c387c812871":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf":["519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cc45c615dbb82bf79d5f9550286098367874fbf":["53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf"],"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","11a746437bc5c0a0b3df0337ed249c387c812871"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf","4cc45c615dbb82bf79d5f9550286098367874fbf"]},"commit2Childs":{"11a746437bc5c0a0b3df0337ed249c387c812871":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf":["4cc45c615dbb82bf79d5f9550286098367874fbf","402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["11a746437bc5c0a0b3df0337ed249c387c812871","3dffec77fb8f7d0e9ca4869dddd6af94528b4576","e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5":["53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf"],"4cc45c615dbb82bf79d5f9550286098367874fbf":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}