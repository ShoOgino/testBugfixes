{"path":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#updateDocuments(Term,Iterable[#-extends-IndexDocument]).mjava","commits":[{"id":"33e9fa3b49f4a365a04fdfc8a32dbcd0df798f5a","date":1341524239,"type":1,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#updateDocuments(Term,Iterable[#-extends-IndexDocument]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#updateDocuments(Term,Iterable[#-extends-Iterable[#-extends-IndexableField]]).mjava","sourceNew":"  /**\n   * Atomically deletes documents matching the provided\n   * delTerm and adds a block of documents with sequentially\n   * assigned document IDs, such that an external reader\n   * will see all or none of the documents. \n   *\n   * See {@link #addDocuments(Iterable)}.\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   *\n   * @lucene.experimental\n   */\n  public void updateDocuments(Term delTerm, Iterable<? extends IndexDocument> docs) throws IOException {\n    updateDocuments(delTerm, docs, analyzer);\n  }\n\n","sourceOld":"  /**\n   * Atomically deletes documents matching the provided\n   * delTerm and adds a block of documents with sequentially\n   * assigned document IDs, such that an external reader\n   * will see all or none of the documents. \n   *\n   * See {@link #addDocuments(Iterable)}.\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   *\n   * @lucene.experimental\n   */\n  public void updateDocuments(Term delTerm, Iterable<? extends Iterable<? extends IndexableField>> docs) throws IOException {\n    updateDocuments(delTerm, docs, analyzer);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d028314cced5858683a1bb4741423d0f934257b","date":1346596535,"type":1,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#updateDocuments(Term,Iterable[#-extends-IndexDocument]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#updateDocuments(Term,Iterable[#-extends-Iterable[#-extends-IndexableField]]).mjava","sourceNew":"  /**\n   * Atomically deletes documents matching the provided\n   * delTerm and adds a block of documents with sequentially\n   * assigned document IDs, such that an external reader\n   * will see all or none of the documents. \n   *\n   * See {@link #addDocuments(Iterable)}.\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   *\n   * @lucene.experimental\n   */\n  public void updateDocuments(Term delTerm, Iterable<? extends IndexDocument> docs) throws IOException {\n    updateDocuments(delTerm, docs, analyzer);\n  }\n\n","sourceOld":"  /**\n   * Atomically deletes documents matching the provided\n   * delTerm and adds a block of documents with sequentially\n   * assigned document IDs, such that an external reader\n   * will see all or none of the documents. \n   *\n   * See {@link #addDocuments(Iterable)}.\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   *\n   * @lucene.experimental\n   */\n  public void updateDocuments(Term delTerm, Iterable<? extends Iterable<? extends IndexableField>> docs) throws IOException {\n    updateDocuments(delTerm, docs, analyzer);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c1c5aa8e88aa52c9e1cbfc696b611d3a56223c0","date":1422781929,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#updateDocuments(Term,Iterable[#-extends-IndexDocument]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#updateDocuments(Term,Iterable[#-extends-IndexDocument]).mjava","sourceNew":"  /**\n   * Atomically deletes documents matching the provided\n   * delTerm and adds a block of documents with sequentially\n   * assigned document IDs, such that an external reader\n   * will see all or none of the documents. \n   *\n   * See {@link #addDocuments(Iterable)}.\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   *\n   * @lucene.experimental\n   */\n  public void updateDocuments(Term delTerm, Iterable<? extends IndexDocument> docs) throws IOException {\n    ensureOpen();\n    try {\n      boolean success = false;\n      try {\n        if (docWriter.updateDocuments(docs, analyzer, delTerm)) {\n          processEvents(true, false);\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          if (infoStream.isEnabled(\"IW\")) {\n            infoStream.message(\"IW\", \"hit exception updating document\");\n          }\n        }\n      }\n    } catch (AbortingException | OutOfMemoryError tragedy) {\n      tragicEvent(tragedy, \"updateDocuments\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Atomically deletes documents matching the provided\n   * delTerm and adds a block of documents with sequentially\n   * assigned document IDs, such that an external reader\n   * will see all or none of the documents. \n   *\n   * See {@link #addDocuments(Iterable)}.\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   *\n   * @lucene.experimental\n   */\n  public void updateDocuments(Term delTerm, Iterable<? extends IndexDocument> docs) throws IOException {\n    updateDocuments(delTerm, docs, analyzer);\n  }\n\n","bugFix":null,"bugIntro":["c48871ed951104729f5e17a8ee1091b43fa18980"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c48871ed951104729f5e17a8ee1091b43fa18980","date":1446564542,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#updateDocuments(Term,Iterable[#-extends-IndexDocument]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#updateDocuments(Term,Iterable[#-extends-IndexDocument]).mjava","sourceNew":"  /**\n   * Atomically deletes documents matching the provided\n   * delTerm and adds a block of documents with sequentially\n   * assigned document IDs, such that an external reader\n   * will see all or none of the documents. \n   *\n   * See {@link #addDocuments(Iterable)}.\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   *\n   * @lucene.experimental\n   */\n  public void updateDocuments(Term delTerm, Iterable<? extends IndexDocument> docs) throws IOException {\n    ensureOpen();\n    try {\n      boolean success = false;\n      try {\n        if (docWriter.updateDocuments(docs, analyzer, delTerm)) {\n          processEvents(true, false);\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          if (infoStream.isEnabled(\"IW\")) {\n            infoStream.message(\"IW\", \"hit exception updating document\");\n          }\n        }\n      }\n    } catch (AbortingException | VirtualMachineError tragedy) {\n      tragicEvent(tragedy, \"updateDocuments\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Atomically deletes documents matching the provided\n   * delTerm and adds a block of documents with sequentially\n   * assigned document IDs, such that an external reader\n   * will see all or none of the documents. \n   *\n   * See {@link #addDocuments(Iterable)}.\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   *\n   * @lucene.experimental\n   */\n  public void updateDocuments(Term delTerm, Iterable<? extends IndexDocument> docs) throws IOException {\n    ensureOpen();\n    try {\n      boolean success = false;\n      try {\n        if (docWriter.updateDocuments(docs, analyzer, delTerm)) {\n          processEvents(true, false);\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          if (infoStream.isEnabled(\"IW\")) {\n            infoStream.message(\"IW\", \"hit exception updating document\");\n          }\n        }\n      }\n    } catch (AbortingException | OutOfMemoryError tragedy) {\n      tragicEvent(tragedy, \"updateDocuments\");\n    }\n  }\n\n","bugFix":["5c1c5aa8e88aa52c9e1cbfc696b611d3a56223c0"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","date":1453060490,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#updateDocuments(Term,Iterable[#-extends-Iterable[#-extends-IndexableField]]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#updateDocuments(Term,Iterable[#-extends-IndexDocument]).mjava","sourceNew":"  /**\n   * Atomically deletes documents matching the provided\n   * delTerm and adds a block of documents with sequentially\n   * assigned document IDs, such that an external reader\n   * will see all or none of the documents. \n   *\n   * See {@link #addDocuments(Iterable)}.\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   *\n   * @lucene.experimental\n   */\n  public void updateDocuments(Term delTerm, Iterable<? extends Iterable<? extends IndexableField>> docs) throws IOException {\n    ensureOpen();\n    try {\n      boolean success = false;\n      try {\n        if (docWriter.updateDocuments(docs, analyzer, delTerm)) {\n          processEvents(true, false);\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          if (infoStream.isEnabled(\"IW\")) {\n            infoStream.message(\"IW\", \"hit exception updating document\");\n          }\n        }\n      }\n    } catch (AbortingException | VirtualMachineError tragedy) {\n      tragicEvent(tragedy, \"updateDocuments\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Atomically deletes documents matching the provided\n   * delTerm and adds a block of documents with sequentially\n   * assigned document IDs, such that an external reader\n   * will see all or none of the documents. \n   *\n   * See {@link #addDocuments(Iterable)}.\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   *\n   * @lucene.experimental\n   */\n  public void updateDocuments(Term delTerm, Iterable<? extends IndexDocument> docs) throws IOException {\n    ensureOpen();\n    try {\n      boolean success = false;\n      try {\n        if (docWriter.updateDocuments(docs, analyzer, delTerm)) {\n          processEvents(true, false);\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          if (infoStream.isEnabled(\"IW\")) {\n            infoStream.message(\"IW\", \"hit exception updating document\");\n          }\n        }\n      }\n    } catch (AbortingException | VirtualMachineError tragedy) {\n      tragicEvent(tragedy, \"updateDocuments\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1d028314cced5858683a1bb4741423d0f934257b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","33e9fa3b49f4a365a04fdfc8a32dbcd0df798f5a"],"33e9fa3b49f4a365a04fdfc8a32dbcd0df798f5a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["c48871ed951104729f5e17a8ee1091b43fa18980"],"c48871ed951104729f5e17a8ee1091b43fa18980":["5c1c5aa8e88aa52c9e1cbfc696b611d3a56223c0"],"5c1c5aa8e88aa52c9e1cbfc696b611d3a56223c0":["1d028314cced5858683a1bb4741423d0f934257b"]},"commit2Childs":{"1d028314cced5858683a1bb4741423d0f934257b":["5c1c5aa8e88aa52c9e1cbfc696b611d3a56223c0"],"33e9fa3b49f4a365a04fdfc8a32dbcd0df798f5a":["1d028314cced5858683a1bb4741423d0f934257b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1d028314cced5858683a1bb4741423d0f934257b","33e9fa3b49f4a365a04fdfc8a32dbcd0df798f5a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c48871ed951104729f5e17a8ee1091b43fa18980":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"5c1c5aa8e88aa52c9e1cbfc696b611d3a56223c0":["c48871ed951104729f5e17a8ee1091b43fa18980"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}