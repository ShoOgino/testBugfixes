{"path":"lucene/sandbox/src/test/org/apache/lucene/document/BaseLatLonShapeTestCase#verify(Object...).mjava","commits":[{"id":"6345300cb90308ddf9579f7a7396a32d98795311","date":1533248257,"type":0,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/BaseLatLonShapeTestCase#verify(Object...).mjava","pathOld":"/dev/null","sourceNew":"  private void verify(Object... shapes) throws Exception {\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    iwc.setMergeScheduler(new SerialMergeScheduler());\n    int mbd = iwc.getMaxBufferedDocs();\n    if (mbd != -1 && mbd < shapes.length / 100) {\n      iwc.setMaxBufferedDocs(shapes.length / 100);\n    }\n    Directory dir;\n    if (shapes.length > 1000) {\n      dir = newFSDirectory(createTempDir(getClass().getSimpleName()));\n    } else {\n      dir = newDirectory();\n    }\n    IndexWriter w = new IndexWriter(dir, iwc);\n\n    // index random polygons\n    indexRandomShapes(w, shapes);\n\n    // query testing\n    final IndexReader reader = DirectoryReader.open(w);\n\n    // test random bbox queries\n    verifyRandomBBoxQueries(reader, shapes);\n    // test random polygon queires\n    verifyRandomPolygonQueries(reader, shapes);\n\n    IOUtils.close(w, reader, dir);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e4fccad460342b1af30cb328cc8297751a218d78","date":1541177339,"type":3,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/BaseLatLonShapeTestCase#verify(Object...).mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/document/BaseLatLonShapeTestCase#verify(Object...).mjava","sourceNew":"  private void verify(Object... shapes) throws Exception {\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    iwc.setMergeScheduler(new SerialMergeScheduler());\n    int mbd = iwc.getMaxBufferedDocs();\n    if (mbd != -1 && mbd < shapes.length / 100) {\n      iwc.setMaxBufferedDocs(shapes.length / 100);\n    }\n    Directory dir;\n    if (shapes.length > 1000) {\n      dir = newFSDirectory(createTempDir(getClass().getSimpleName()));\n    } else {\n      dir = newDirectory();\n    }\n    IndexWriter w = new IndexWriter(dir, iwc);\n\n    // index random polygons\n    indexRandomShapes(w, shapes);\n\n    // query testing\n    final IndexReader reader = DirectoryReader.open(w);\n\n    // test random bbox queries\n    verifyRandomBBoxQueries(reader, shapes);\n    // test random line queries\n    verifyRandomLineQueries(reader, shapes);\n    // test random polygon queries\n    verifyRandomPolygonQueries(reader, shapes);\n\n    IOUtils.close(w, reader, dir);\n  }\n\n","sourceOld":"  private void verify(Object... shapes) throws Exception {\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    iwc.setMergeScheduler(new SerialMergeScheduler());\n    int mbd = iwc.getMaxBufferedDocs();\n    if (mbd != -1 && mbd < shapes.length / 100) {\n      iwc.setMaxBufferedDocs(shapes.length / 100);\n    }\n    Directory dir;\n    if (shapes.length > 1000) {\n      dir = newFSDirectory(createTempDir(getClass().getSimpleName()));\n    } else {\n      dir = newDirectory();\n    }\n    IndexWriter w = new IndexWriter(dir, iwc);\n\n    // index random polygons\n    indexRandomShapes(w, shapes);\n\n    // query testing\n    final IndexReader reader = DirectoryReader.open(w);\n\n    // test random bbox queries\n    verifyRandomBBoxQueries(reader, shapes);\n    // test random polygon queires\n    verifyRandomPolygonQueries(reader, shapes);\n\n    IOUtils.close(w, reader, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c286b0d8c507a88b289407e2fe161effa275c6b0","date":1562615977,"type":5,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/BaseShapeTestCase#verify(Object...).mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/document/BaseLatLonShapeTestCase#verify(Object...).mjava","sourceNew":"  private void verify(Object... shapes) throws Exception {\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    iwc.setMergeScheduler(new SerialMergeScheduler());\n    int mbd = iwc.getMaxBufferedDocs();\n    if (mbd != -1 && mbd < shapes.length / 100) {\n      iwc.setMaxBufferedDocs(shapes.length / 100);\n    }\n    Directory dir;\n    if (shapes.length > 1000) {\n      dir = newFSDirectory(createTempDir(getClass().getSimpleName()));\n    } else {\n      dir = newDirectory();\n    }\n    IndexWriter w = new IndexWriter(dir, iwc);\n\n    // index random polygons\n    indexRandomShapes(w, shapes);\n\n    // query testing\n    final IndexReader reader = DirectoryReader.open(w);\n    // test random bbox queries\n    verifyRandomQueries(reader, shapes);\n    IOUtils.close(w, reader, dir);\n  }\n\n","sourceOld":"  private void verify(Object... shapes) throws Exception {\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    iwc.setMergeScheduler(new SerialMergeScheduler());\n    int mbd = iwc.getMaxBufferedDocs();\n    if (mbd != -1 && mbd < shapes.length / 100) {\n      iwc.setMaxBufferedDocs(shapes.length / 100);\n    }\n    Directory dir;\n    if (shapes.length > 1000) {\n      dir = newFSDirectory(createTempDir(getClass().getSimpleName()));\n    } else {\n      dir = newDirectory();\n    }\n    IndexWriter w = new IndexWriter(dir, iwc);\n\n    // index random polygons\n    indexRandomShapes(w, shapes);\n\n    // query testing\n    final IndexReader reader = DirectoryReader.open(w);\n\n    // test random bbox queries\n    verifyRandomBBoxQueries(reader, shapes);\n    // test random line queries\n    verifyRandomLineQueries(reader, shapes);\n    // test random polygon queries\n    verifyRandomPolygonQueries(reader, shapes);\n\n    IOUtils.close(w, reader, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c286b0d8c507a88b289407e2fe161effa275c6b0":["e4fccad460342b1af30cb328cc8297751a218d78"],"6345300cb90308ddf9579f7a7396a32d98795311":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e4fccad460342b1af30cb328cc8297751a218d78":["6345300cb90308ddf9579f7a7396a32d98795311"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c286b0d8c507a88b289407e2fe161effa275c6b0"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6345300cb90308ddf9579f7a7396a32d98795311"],"c286b0d8c507a88b289407e2fe161effa275c6b0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6345300cb90308ddf9579f7a7396a32d98795311":["e4fccad460342b1af30cb328cc8297751a218d78"],"e4fccad460342b1af30cb328cc8297751a218d78":["c286b0d8c507a88b289407e2fe161effa275c6b0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}