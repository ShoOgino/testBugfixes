{"path":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#testPolicyWithReplicaType().mjava","commits":[{"id":"1852ff897aecd2f7c8376a02aedfd44104533f28","date":1498224361,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#testPolicyWithReplicaType().mjava","pathOld":"/dev/null","sourceNew":"  public void testPolicyWithReplicaType() {\n    Map policies = (Map) Utils.fromJSONString(\"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores', 'precision': 50}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': 0, 'nodeRole': 'overseer'}\" +\n        \"    { 'replica': '<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"    { 'replica': 0, 'shard': '#EACH', sysprop.fs : '!ssd',  type : TLOG }\" +\n        \"    { 'replica': 0, 'shard': '#EACH', sysprop.fs : '!slowdisk' ,  type : PULL }\" +\n        \"  ]\" +\n        \"}\");\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480, rack: rack4, sysprop.fs: slowdisk},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873, rack: rack3},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834, rack: rack2, sysprop.fs : ssd},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer, rack: rack1}\" +\n        \"}\");\n    Policy policy = new Policy(policies);\n    Policy.Suggester suggester = policy.createSession(getClusterDataProvider(nodeValues, clusterState))\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL, \"newColl\")\n        .hint(Hint.REPLICATYPE, Replica.Type.PULL)\n        .hint(Hint.SHARD, \"shard1\");\n    SolrRequest op = suggester.getOperation();\n    assertNotNull(op);\n    assertEquals(Replica.Type.PULL.name(),  op.getParams().get(\"type\"));\n    assertEquals(\"PULL type node must be in 'slowdisk' node\",\"node1\", op.getParams().get(\"node\"));\n\n    suggester = suggester.getSession()\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL, \"newColl\")\n        .hint(Hint.REPLICATYPE, Replica.Type.PULL)\n        .hint(Hint.SHARD, \"shard2\");\n    op = suggester.getOperation();\n    assertNotNull(op);\n    assertEquals(Replica.Type.PULL.name(),  op.getParams().get(\"type\"));\n    assertEquals(\"PULL type node must be in 'slowdisk' node\",\"node1\", op.getParams().get(\"node\"));\n\n    suggester = suggester.getSession()\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL, \"newColl\")\n        .hint(Hint.REPLICATYPE, Replica.Type.TLOG)\n        .hint(Hint.SHARD, \"shard1\");\n    op = suggester.getOperation();\n    assertNotNull(op);\n    assertEquals(Replica.Type.TLOG.name(),  op.getParams().get(\"type\"));\n    assertEquals(\"TLOG type node must be in 'ssd' node\",\"node3\", op.getParams().get(\"node\"));\n\n    suggester = suggester.getSession()\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL, \"newColl\")\n        .hint(Hint.REPLICATYPE, Replica.Type.TLOG)\n        .hint(Hint.SHARD, \"shard2\");\n    op = suggester.getOperation();\n    assertNotNull(op);\n    assertEquals(Replica.Type.TLOG.name(),  op.getParams().get(\"type\"));\n    assertEquals(\"TLOG type node must be in 'ssd' node\",\"node3\", op.getParams().get(\"node\"));\n\n    suggester = suggester.getSession()\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL, \"newColl\")\n        .hint(Hint.REPLICATYPE, Replica.Type.TLOG)\n        .hint(Hint.SHARD, \"shard2\");\n    op = suggester.getOperation();\n    assertNull(\"No node should qualify for this\" ,op);\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"00e2ae9cb51fd0d4f12faf216db2810237cb5116","date":1498631063,"type":5,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testPolicyWithReplicaType().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#testPolicyWithReplicaType().mjava","sourceNew":"  public void testPolicyWithReplicaType() {\n    Map policies = (Map) Utils.fromJSONString(\"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores', 'precision': 50}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': 0, 'nodeRole': 'overseer'}\" +\n        \"    { 'replica': '<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"    { 'replica': 0, 'shard': '#EACH', sysprop.fs : '!ssd',  type : TLOG }\" +\n        \"    { 'replica': 0, 'shard': '#EACH', sysprop.fs : '!slowdisk' ,  type : PULL }\" +\n        \"  ]\" +\n        \"}\");\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480, rack: rack4, sysprop.fs: slowdisk},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873, rack: rack3},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834, rack: rack2, sysprop.fs : ssd},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer, rack: rack1}\" +\n        \"}\");\n    Policy policy = new Policy(policies);\n    Policy.Suggester suggester = policy.createSession(getClusterDataProvider(nodeValues, clusterState))\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL, \"newColl\")\n        .hint(Hint.REPLICATYPE, Replica.Type.PULL)\n        .hint(Hint.SHARD, \"shard1\");\n    SolrRequest op = suggester.getOperation();\n    assertNotNull(op);\n    assertEquals(Replica.Type.PULL.name(),  op.getParams().get(\"type\"));\n    assertEquals(\"PULL type node must be in 'slowdisk' node\",\"node1\", op.getParams().get(\"node\"));\n\n    suggester = suggester.getSession()\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL, \"newColl\")\n        .hint(Hint.REPLICATYPE, Replica.Type.PULL)\n        .hint(Hint.SHARD, \"shard2\");\n    op = suggester.getOperation();\n    assertNotNull(op);\n    assertEquals(Replica.Type.PULL.name(),  op.getParams().get(\"type\"));\n    assertEquals(\"PULL type node must be in 'slowdisk' node\",\"node1\", op.getParams().get(\"node\"));\n\n    suggester = suggester.getSession()\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL, \"newColl\")\n        .hint(Hint.REPLICATYPE, Replica.Type.TLOG)\n        .hint(Hint.SHARD, \"shard1\");\n    op = suggester.getOperation();\n    assertNotNull(op);\n    assertEquals(Replica.Type.TLOG.name(),  op.getParams().get(\"type\"));\n    assertEquals(\"TLOG type node must be in 'ssd' node\",\"node3\", op.getParams().get(\"node\"));\n\n    suggester = suggester.getSession()\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL, \"newColl\")\n        .hint(Hint.REPLICATYPE, Replica.Type.TLOG)\n        .hint(Hint.SHARD, \"shard2\");\n    op = suggester.getOperation();\n    assertNotNull(op);\n    assertEquals(Replica.Type.TLOG.name(),  op.getParams().get(\"type\"));\n    assertEquals(\"TLOG type node must be in 'ssd' node\",\"node3\", op.getParams().get(\"node\"));\n\n    suggester = suggester.getSession()\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL, \"newColl\")\n        .hint(Hint.REPLICATYPE, Replica.Type.TLOG)\n        .hint(Hint.SHARD, \"shard2\");\n    op = suggester.getOperation();\n    assertNull(\"No node should qualify for this\" ,op);\n\n  }\n\n","sourceOld":"  public void testPolicyWithReplicaType() {\n    Map policies = (Map) Utils.fromJSONString(\"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores', 'precision': 50}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': 0, 'nodeRole': 'overseer'}\" +\n        \"    { 'replica': '<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"    { 'replica': 0, 'shard': '#EACH', sysprop.fs : '!ssd',  type : TLOG }\" +\n        \"    { 'replica': 0, 'shard': '#EACH', sysprop.fs : '!slowdisk' ,  type : PULL }\" +\n        \"  ]\" +\n        \"}\");\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480, rack: rack4, sysprop.fs: slowdisk},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873, rack: rack3},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834, rack: rack2, sysprop.fs : ssd},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer, rack: rack1}\" +\n        \"}\");\n    Policy policy = new Policy(policies);\n    Policy.Suggester suggester = policy.createSession(getClusterDataProvider(nodeValues, clusterState))\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL, \"newColl\")\n        .hint(Hint.REPLICATYPE, Replica.Type.PULL)\n        .hint(Hint.SHARD, \"shard1\");\n    SolrRequest op = suggester.getOperation();\n    assertNotNull(op);\n    assertEquals(Replica.Type.PULL.name(),  op.getParams().get(\"type\"));\n    assertEquals(\"PULL type node must be in 'slowdisk' node\",\"node1\", op.getParams().get(\"node\"));\n\n    suggester = suggester.getSession()\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL, \"newColl\")\n        .hint(Hint.REPLICATYPE, Replica.Type.PULL)\n        .hint(Hint.SHARD, \"shard2\");\n    op = suggester.getOperation();\n    assertNotNull(op);\n    assertEquals(Replica.Type.PULL.name(),  op.getParams().get(\"type\"));\n    assertEquals(\"PULL type node must be in 'slowdisk' node\",\"node1\", op.getParams().get(\"node\"));\n\n    suggester = suggester.getSession()\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL, \"newColl\")\n        .hint(Hint.REPLICATYPE, Replica.Type.TLOG)\n        .hint(Hint.SHARD, \"shard1\");\n    op = suggester.getOperation();\n    assertNotNull(op);\n    assertEquals(Replica.Type.TLOG.name(),  op.getParams().get(\"type\"));\n    assertEquals(\"TLOG type node must be in 'ssd' node\",\"node3\", op.getParams().get(\"node\"));\n\n    suggester = suggester.getSession()\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL, \"newColl\")\n        .hint(Hint.REPLICATYPE, Replica.Type.TLOG)\n        .hint(Hint.SHARD, \"shard2\");\n    op = suggester.getOperation();\n    assertNotNull(op);\n    assertEquals(Replica.Type.TLOG.name(),  op.getParams().get(\"type\"));\n    assertEquals(\"TLOG type node must be in 'ssd' node\",\"node3\", op.getParams().get(\"node\"));\n\n    suggester = suggester.getSession()\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL, \"newColl\")\n        .hint(Hint.REPLICATYPE, Replica.Type.TLOG)\n        .hint(Hint.SHARD, \"shard2\");\n    op = suggester.getOperation();\n    assertNull(\"No node should qualify for this\" ,op);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"00e2ae9cb51fd0d4f12faf216db2810237cb5116":["1852ff897aecd2f7c8376a02aedfd44104533f28","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1852ff897aecd2f7c8376a02aedfd44104533f28":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"00e2ae9cb51fd0d4f12faf216db2810237cb5116":[],"1852ff897aecd2f7c8376a02aedfd44104533f28":["00e2ae9cb51fd0d4f12faf216db2810237cb5116"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["00e2ae9cb51fd0d4f12faf216db2810237cb5116","1852ff897aecd2f7c8376a02aedfd44104533f28","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["00e2ae9cb51fd0d4f12faf216db2810237cb5116","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}