{"path":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#newSearcher(IndexReader).mjava","commits":[{"id":"790e1fde4caa765b3faaad3fbcd25c6973450336","date":1296689245,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#newSearcher(IndexReader).mjava","pathOld":"/dev/null","sourceNew":"  /** create a new searcher over the reader */\n  public static IndexSearcher newSearcher(IndexReader r) throws IOException {\n    if (random.nextBoolean()) {\n      return new IndexSearcher(r);\n    } else {\n      int threads = 0;\n      final ExecutorService ex = (random.nextBoolean()) ? null \n          : Executors.newFixedThreadPool(threads = _TestUtil.nextInt(random, 1, 8), \n                      new NamedThreadFactory(\"LuceneTestCase\"));\n      if (ex != null && VERBOSE) {\n        System.out.println(\"NOTE: newSearcher using ExecutorService with \" + threads + \" threads\");\n      }\n      return new IndexSearcher(r.getTopReaderContext(), ex) {\n        @Override\n        public void close() throws IOException {\n          super.close();\n          if (ex != null) {\n            ex.shutdown();\n            try {\n              ex.awaitTermination(1000, TimeUnit.MILLISECONDS);\n            } catch (InterruptedException e) {\n              e.printStackTrace();\n            }\n          }\n        }\n      };\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce","date":1297021734,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#newSearcher(IndexReader).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#newSearcher(IndexReader).mjava","sourceNew":"  /** create a new searcher over the reader */\n  public static IndexSearcher newSearcher(IndexReader r) throws IOException {\n    if (random.nextBoolean()) {\n      return new IndexSearcher(r);\n    } else {\n      int threads = 0;\n      final ExecutorService ex = (random.nextBoolean()) ? null \n          : Executors.newFixedThreadPool(threads = _TestUtil.nextInt(random, 1, 8), \n                      new NamedThreadFactory(\"LuceneTestCase\"));\n      if (ex != null && VERBOSE) {\n        System.out.println(\"NOTE: newSearcher using ExecutorService with \" + threads + \" threads\");\n      }\n      return new IndexSearcher(r.getTopReaderContext(), ex) {\n        @Override\n        public void close() throws IOException {\n          super.close();\n          if (ex != null) {\n            ex.shutdown();\n            try {\n              ex.awaitTermination(1000, TimeUnit.MILLISECONDS);\n            } catch (InterruptedException e) {\n              e.printStackTrace();\n            }\n          }\n        }\n      };\n    }\n  }\n\n","sourceOld":"  /** create a new searcher over the reader */\n  public static IndexSearcher newSearcher(IndexReader r) throws IOException {\n    if (random.nextBoolean()) {\n      return new IndexSearcher(r);\n    } else {\n      int threads = 0;\n      final ExecutorService ex = (random.nextBoolean()) ? null \n          : Executors.newFixedThreadPool(threads = _TestUtil.nextInt(random, 1, 8), \n                      new NamedThreadFactory(\"LuceneTestCase\"));\n      if (ex != null && VERBOSE) {\n        System.out.println(\"NOTE: newSearcher using ExecutorService with \" + threads + \" threads\");\n      }\n      return new IndexSearcher(r.getTopReaderContext(), ex) {\n        @Override\n        public void close() throws IOException {\n          super.close();\n          if (ex != null) {\n            ex.shutdown();\n            try {\n              ex.awaitTermination(1000, TimeUnit.MILLISECONDS);\n            } catch (InterruptedException e) {\n              e.printStackTrace();\n            }\n          }\n        }\n      };\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"790e1fde4caa765b3faaad3fbcd25c6973450336":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce":["790e1fde4caa765b3faaad3fbcd25c6973450336"]},"commit2Childs":{"790e1fde4caa765b3faaad3fbcd25c6973450336":["f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["790e1fde4caa765b3faaad3fbcd25c6973450336"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}