{"path":"lucene/src/test-framework/java/org/apache/lucene/index/ThreadedIndexingAndSearchingTestCase#runSearchThreads(long).mjava","commits":[{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/index/ThreadedIndexingAndSearchingTestCase#runSearchThreads(long).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/index/ThreadedIndexingAndSearchingTestCase#runSearchThreads(long).mjava","sourceNew":"  protected void runSearchThreads(final long stopTimeMS) throws Exception {\n    final int numThreads = _TestUtil.nextInt(random, 1, 5);\n    final Thread[] searchThreads = new Thread[numThreads];\n    final AtomicInteger totHits = new AtomicInteger();\n\n    // silly starting guess:\n    final AtomicInteger totTermCount = new AtomicInteger(100);\n\n    // TODO: we should enrich this to do more interesting searches\n    for(int thread=0;thread<searchThreads.length;thread++) {\n      searchThreads[thread] = new Thread() {\n          @Override\n          public void run() {\n            while (System.currentTimeMillis() < stopTimeMS) {\n              try {\n                final IndexSearcher s = getCurrentSearcher();\n                try {\n                  if (s.getIndexReader().numDocs() > 0) {\n                    smokeTestSearcher(s);\n                    Fields fields = MultiFields.getFields(s.getIndexReader());\n                    if (fields == null) {\n                      continue;\n                    }\n                    Terms terms = fields.terms(\"body\");\n                    if (terms == null) {\n                      continue;\n                    }\n                    TermsEnum termsEnum = terms.iterator();\n                    int seenTermCount = 0;\n                    int shift;\n                    int trigger; \n                    if (totTermCount.get() < 10) {\n                      shift = 0;\n                      trigger = 1;\n                    } else {\n                      trigger = totTermCount.get()/10;\n                      shift = random.nextInt(trigger);\n                    }\n                    BytesRef term = termsEnum.next();\n                    if (term == null) {\n                      if (seenTermCount == 0) {\n                        break;\n                      }\n                      totTermCount.set(seenTermCount);\n                      seenTermCount = 0;\n                      if (totTermCount.get() < 10) {\n                        shift = 0;\n                        trigger = 1;\n                      } else {\n                        trigger = totTermCount.get()/10;\n                        //System.out.println(\"trigger \" + trigger);\n                        shift = random.nextInt(trigger);\n                      }\n                      termsEnum.seekCeil(new BytesRef(\"\"));\n                      continue;\n                    }\n                    seenTermCount++;\n                    // search 10 terms\n                    if (trigger == 0) {\n                      trigger = 1;\n                    }\n                    if ((seenTermCount + shift) % trigger == 0) {\n                      //if (VERBOSE) {\n                      //System.out.println(Thread.currentThread().getName() + \" now search body:\" + term.utf8ToString());\n                      //}\n                      totHits.addAndGet(runQuery(s, new TermQuery(new Term(\"body\", term))));\n                    }\n                    //if (VERBOSE) {\n                    //System.out.println(Thread.currentThread().getName() + \": search done\");\n                    //}\n                  }\n                } finally {\n                  releaseSearcher(s);\n                }\n              } catch (Throwable t) {\n                System.out.println(Thread.currentThread().getName() + \": hit exc\");\n                failed.set(true);\n                t.printStackTrace(System.out);\n                throw new RuntimeException(t);\n              }\n            }\n          }\n        };\n      searchThreads[thread].setDaemon(true);\n      searchThreads[thread].start();\n    }\n\n    for(int thread=0;thread<searchThreads.length;thread++) {\n      searchThreads[thread].join();\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: DONE search: totHits=\" + totHits);\n    }\n  }\n\n","sourceOld":"  protected void runSearchThreads(final long stopTimeMS) throws Exception {\n    final int numThreads = _TestUtil.nextInt(random, 1, 5);\n    final Thread[] searchThreads = new Thread[numThreads];\n    final AtomicInteger totHits = new AtomicInteger();\n\n    // silly starting guess:\n    final AtomicInteger totTermCount = new AtomicInteger(100);\n\n    // TODO: we should enrich this to do more interesting searches\n    for(int thread=0;thread<searchThreads.length;thread++) {\n      searchThreads[thread] = new Thread() {\n          @Override\n          public void run() {\n            while (System.currentTimeMillis() < stopTimeMS) {\n              try {\n                final IndexSearcher s = getCurrentSearcher();\n                try {\n                  if (s.getIndexReader().numDocs() > 0) {\n                    smokeTestSearcher(s);\n                    Fields fields = MultiFields.getFields(s.getIndexReader());\n                    if (fields == null) {\n                      continue;\n                    }\n                    Terms terms = fields.terms(\"body\");\n                    if (terms == null) {\n                      continue;\n                    }\n                    TermsEnum termsEnum = terms.iterator();\n                    int seenTermCount = 0;\n                    int shift;\n                    int trigger; \n                    if (totTermCount.get() < 10) {\n                      shift = 0;\n                      trigger = 1;\n                    } else {\n                      trigger = totTermCount.get()/10;\n                      shift = random.nextInt(trigger);\n                    }\n                    BytesRef term = termsEnum.next();\n                    if (term == null) {\n                      if (seenTermCount == 0) {\n                        break;\n                      }\n                      totTermCount.set(seenTermCount);\n                      seenTermCount = 0;\n                      if (totTermCount.get() < 10) {\n                        shift = 0;\n                        trigger = 1;\n                      } else {\n                        trigger = totTermCount.get()/10;\n                        //System.out.println(\"trigger \" + trigger);\n                        shift = random.nextInt(trigger);\n                      }\n                      termsEnum.seekCeil(new BytesRef(\"\"));\n                      continue;\n                    }\n                    seenTermCount++;\n                    // search 10 terms\n                    if (trigger == 0) {\n                      trigger = 1;\n                    }\n                    if ((seenTermCount + shift) % trigger == 0) {\n                      //if (VERBOSE) {\n                      //System.out.println(Thread.currentThread().getName() + \" now search body:\" + term.utf8ToString());\n                      //}\n                      totHits.addAndGet(runQuery(s, new TermQuery(new Term(\"body\", term))));\n                    }\n                    //if (VERBOSE) {\n                    //System.out.println(Thread.currentThread().getName() + \": search done\");\n                    //}\n                  }\n                } finally {\n                  releaseSearcher(s);\n                }\n              } catch (Throwable t) {\n                System.out.println(Thread.currentThread().getName() + \": hit exc\");\n                failed.set(true);\n                t.printStackTrace(System.out);\n                throw new RuntimeException(t);\n              }\n            }\n          }\n        };\n      searchThreads[thread].setDaemon(true);\n      searchThreads[thread].start();\n    }\n\n    for(int thread=0;thread<searchThreads.length;thread++) {\n      searchThreads[thread].join();\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: DONE search: totHits=\" + totHits);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc749c053615f5871f3b95715fe292f34e70a53","date":1321470575,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/index/ThreadedIndexingAndSearchingTestCase#runSearchThreads(long).mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/index/ThreadedIndexingAndSearchingTestCase#runSearchThreads(long).mjava","sourceNew":"  protected void runSearchThreads(final long stopTimeMS) throws Exception {\n    final int numThreads = _TestUtil.nextInt(random, 1, 5);\n    final Thread[] searchThreads = new Thread[numThreads];\n    final AtomicInteger totHits = new AtomicInteger();\n\n    // silly starting guess:\n    final AtomicInteger totTermCount = new AtomicInteger(100);\n\n    // TODO: we should enrich this to do more interesting searches\n    for(int thread=0;thread<searchThreads.length;thread++) {\n      searchThreads[thread] = new Thread() {\n          @Override\n          public void run() {\n            while (System.currentTimeMillis() < stopTimeMS) {\n              try {\n                final IndexSearcher s = getCurrentSearcher();\n                try {\n                  if (s.getIndexReader().numDocs() > 0) {\n                    smokeTestSearcher(s);\n                    Fields fields = MultiFields.getFields(s.getIndexReader());\n                    if (fields == null) {\n                      continue;\n                    }\n                    Terms terms = fields.terms(\"body\");\n                    if (terms == null) {\n                      continue;\n                    }\n                    TermsEnum termsEnum = terms.iterator(null);\n                    int seenTermCount = 0;\n                    int shift;\n                    int trigger; \n                    if (totTermCount.get() < 10) {\n                      shift = 0;\n                      trigger = 1;\n                    } else {\n                      trigger = totTermCount.get()/10;\n                      shift = random.nextInt(trigger);\n                    }\n                    BytesRef term = termsEnum.next();\n                    if (term == null) {\n                      if (seenTermCount == 0) {\n                        break;\n                      }\n                      totTermCount.set(seenTermCount);\n                      seenTermCount = 0;\n                      if (totTermCount.get() < 10) {\n                        shift = 0;\n                        trigger = 1;\n                      } else {\n                        trigger = totTermCount.get()/10;\n                        //System.out.println(\"trigger \" + trigger);\n                        shift = random.nextInt(trigger);\n                      }\n                      termsEnum.seekCeil(new BytesRef(\"\"));\n                      continue;\n                    }\n                    seenTermCount++;\n                    // search 10 terms\n                    if (trigger == 0) {\n                      trigger = 1;\n                    }\n                    if ((seenTermCount + shift) % trigger == 0) {\n                      //if (VERBOSE) {\n                      //System.out.println(Thread.currentThread().getName() + \" now search body:\" + term.utf8ToString());\n                      //}\n                      totHits.addAndGet(runQuery(s, new TermQuery(new Term(\"body\", term))));\n                    }\n                    //if (VERBOSE) {\n                    //System.out.println(Thread.currentThread().getName() + \": search done\");\n                    //}\n                  }\n                } finally {\n                  releaseSearcher(s);\n                }\n              } catch (Throwable t) {\n                System.out.println(Thread.currentThread().getName() + \": hit exc\");\n                failed.set(true);\n                t.printStackTrace(System.out);\n                throw new RuntimeException(t);\n              }\n            }\n          }\n        };\n      searchThreads[thread].setDaemon(true);\n      searchThreads[thread].start();\n    }\n\n    for(int thread=0;thread<searchThreads.length;thread++) {\n      searchThreads[thread].join();\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: DONE search: totHits=\" + totHits);\n    }\n  }\n\n","sourceOld":"  protected void runSearchThreads(final long stopTimeMS) throws Exception {\n    final int numThreads = _TestUtil.nextInt(random, 1, 5);\n    final Thread[] searchThreads = new Thread[numThreads];\n    final AtomicInteger totHits = new AtomicInteger();\n\n    // silly starting guess:\n    final AtomicInteger totTermCount = new AtomicInteger(100);\n\n    // TODO: we should enrich this to do more interesting searches\n    for(int thread=0;thread<searchThreads.length;thread++) {\n      searchThreads[thread] = new Thread() {\n          @Override\n          public void run() {\n            while (System.currentTimeMillis() < stopTimeMS) {\n              try {\n                final IndexSearcher s = getCurrentSearcher();\n                try {\n                  if (s.getIndexReader().numDocs() > 0) {\n                    smokeTestSearcher(s);\n                    Fields fields = MultiFields.getFields(s.getIndexReader());\n                    if (fields == null) {\n                      continue;\n                    }\n                    Terms terms = fields.terms(\"body\");\n                    if (terms == null) {\n                      continue;\n                    }\n                    TermsEnum termsEnum = terms.iterator();\n                    int seenTermCount = 0;\n                    int shift;\n                    int trigger; \n                    if (totTermCount.get() < 10) {\n                      shift = 0;\n                      trigger = 1;\n                    } else {\n                      trigger = totTermCount.get()/10;\n                      shift = random.nextInt(trigger);\n                    }\n                    BytesRef term = termsEnum.next();\n                    if (term == null) {\n                      if (seenTermCount == 0) {\n                        break;\n                      }\n                      totTermCount.set(seenTermCount);\n                      seenTermCount = 0;\n                      if (totTermCount.get() < 10) {\n                        shift = 0;\n                        trigger = 1;\n                      } else {\n                        trigger = totTermCount.get()/10;\n                        //System.out.println(\"trigger \" + trigger);\n                        shift = random.nextInt(trigger);\n                      }\n                      termsEnum.seekCeil(new BytesRef(\"\"));\n                      continue;\n                    }\n                    seenTermCount++;\n                    // search 10 terms\n                    if (trigger == 0) {\n                      trigger = 1;\n                    }\n                    if ((seenTermCount + shift) % trigger == 0) {\n                      //if (VERBOSE) {\n                      //System.out.println(Thread.currentThread().getName() + \" now search body:\" + term.utf8ToString());\n                      //}\n                      totHits.addAndGet(runQuery(s, new TermQuery(new Term(\"body\", term))));\n                    }\n                    //if (VERBOSE) {\n                    //System.out.println(Thread.currentThread().getName() + \": search done\");\n                    //}\n                  }\n                } finally {\n                  releaseSearcher(s);\n                }\n              } catch (Throwable t) {\n                System.out.println(Thread.currentThread().getName() + \": hit exc\");\n                failed.set(true);\n                t.printStackTrace(System.out);\n                throw new RuntimeException(t);\n              }\n            }\n          }\n        };\n      searchThreads[thread].setDaemon(true);\n      searchThreads[thread].start();\n    }\n\n    for(int thread=0;thread<searchThreads.length;thread++) {\n      searchThreads[thread].join();\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: DONE search: totHits=\" + totHits);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/ThreadedIndexingAndSearchingTestCase#runSearchThreads(long).mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/index/ThreadedIndexingAndSearchingTestCase#runSearchThreads(long).mjava","sourceNew":"  protected void runSearchThreads(final long stopTimeMS) throws Exception {\n    final int numThreads = _TestUtil.nextInt(random, 1, 5);\n    final Thread[] searchThreads = new Thread[numThreads];\n    final AtomicInteger totHits = new AtomicInteger();\n\n    // silly starting guess:\n    final AtomicInteger totTermCount = new AtomicInteger(100);\n\n    // TODO: we should enrich this to do more interesting searches\n    for(int thread=0;thread<searchThreads.length;thread++) {\n      searchThreads[thread] = new Thread() {\n          @Override\n          public void run() {\n            while (System.currentTimeMillis() < stopTimeMS) {\n              try {\n                final IndexSearcher s = getCurrentSearcher();\n                try {\n                  if (s.getIndexReader().numDocs() > 0) {\n                    smokeTestSearcher(s);\n                    Fields fields = MultiFields.getFields(s.getIndexReader());\n                    if (fields == null) {\n                      continue;\n                    }\n                    Terms terms = fields.terms(\"body\");\n                    if (terms == null) {\n                      continue;\n                    }\n                    TermsEnum termsEnum = terms.iterator(null);\n                    int seenTermCount = 0;\n                    int shift;\n                    int trigger; \n                    if (totTermCount.get() < 10) {\n                      shift = 0;\n                      trigger = 1;\n                    } else {\n                      trigger = totTermCount.get()/10;\n                      shift = random.nextInt(trigger);\n                    }\n                    BytesRef term = termsEnum.next();\n                    if (term == null) {\n                      if (seenTermCount == 0) {\n                        break;\n                      }\n                      totTermCount.set(seenTermCount);\n                      seenTermCount = 0;\n                      if (totTermCount.get() < 10) {\n                        shift = 0;\n                        trigger = 1;\n                      } else {\n                        trigger = totTermCount.get()/10;\n                        //System.out.println(\"trigger \" + trigger);\n                        shift = random.nextInt(trigger);\n                      }\n                      termsEnum.seekCeil(new BytesRef(\"\"));\n                      continue;\n                    }\n                    seenTermCount++;\n                    // search 10 terms\n                    if (trigger == 0) {\n                      trigger = 1;\n                    }\n                    if ((seenTermCount + shift) % trigger == 0) {\n                      //if (VERBOSE) {\n                      //System.out.println(Thread.currentThread().getName() + \" now search body:\" + term.utf8ToString());\n                      //}\n                      totHits.addAndGet(runQuery(s, new TermQuery(new Term(\"body\", term))));\n                    }\n                    //if (VERBOSE) {\n                    //System.out.println(Thread.currentThread().getName() + \": search done\");\n                    //}\n                  }\n                } finally {\n                  releaseSearcher(s);\n                }\n              } catch (Throwable t) {\n                System.out.println(Thread.currentThread().getName() + \": hit exc\");\n                failed.set(true);\n                t.printStackTrace(System.out);\n                throw new RuntimeException(t);\n              }\n            }\n          }\n        };\n      searchThreads[thread].setDaemon(true);\n      searchThreads[thread].start();\n    }\n\n    for(int thread=0;thread<searchThreads.length;thread++) {\n      searchThreads[thread].join();\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: DONE search: totHits=\" + totHits);\n    }\n  }\n\n","sourceOld":"  protected void runSearchThreads(final long stopTimeMS) throws Exception {\n    final int numThreads = _TestUtil.nextInt(random, 1, 5);\n    final Thread[] searchThreads = new Thread[numThreads];\n    final AtomicInteger totHits = new AtomicInteger();\n\n    // silly starting guess:\n    final AtomicInteger totTermCount = new AtomicInteger(100);\n\n    // TODO: we should enrich this to do more interesting searches\n    for(int thread=0;thread<searchThreads.length;thread++) {\n      searchThreads[thread] = new Thread() {\n          @Override\n          public void run() {\n            while (System.currentTimeMillis() < stopTimeMS) {\n              try {\n                final IndexSearcher s = getCurrentSearcher();\n                try {\n                  if (s.getIndexReader().numDocs() > 0) {\n                    smokeTestSearcher(s);\n                    Fields fields = MultiFields.getFields(s.getIndexReader());\n                    if (fields == null) {\n                      continue;\n                    }\n                    Terms terms = fields.terms(\"body\");\n                    if (terms == null) {\n                      continue;\n                    }\n                    TermsEnum termsEnum = terms.iterator(null);\n                    int seenTermCount = 0;\n                    int shift;\n                    int trigger; \n                    if (totTermCount.get() < 10) {\n                      shift = 0;\n                      trigger = 1;\n                    } else {\n                      trigger = totTermCount.get()/10;\n                      shift = random.nextInt(trigger);\n                    }\n                    BytesRef term = termsEnum.next();\n                    if (term == null) {\n                      if (seenTermCount == 0) {\n                        break;\n                      }\n                      totTermCount.set(seenTermCount);\n                      seenTermCount = 0;\n                      if (totTermCount.get() < 10) {\n                        shift = 0;\n                        trigger = 1;\n                      } else {\n                        trigger = totTermCount.get()/10;\n                        //System.out.println(\"trigger \" + trigger);\n                        shift = random.nextInt(trigger);\n                      }\n                      termsEnum.seekCeil(new BytesRef(\"\"));\n                      continue;\n                    }\n                    seenTermCount++;\n                    // search 10 terms\n                    if (trigger == 0) {\n                      trigger = 1;\n                    }\n                    if ((seenTermCount + shift) % trigger == 0) {\n                      //if (VERBOSE) {\n                      //System.out.println(Thread.currentThread().getName() + \" now search body:\" + term.utf8ToString());\n                      //}\n                      totHits.addAndGet(runQuery(s, new TermQuery(new Term(\"body\", term))));\n                    }\n                    //if (VERBOSE) {\n                    //System.out.println(Thread.currentThread().getName() + \": search done\");\n                    //}\n                  }\n                } finally {\n                  releaseSearcher(s);\n                }\n              } catch (Throwable t) {\n                System.out.println(Thread.currentThread().getName() + \": hit exc\");\n                failed.set(true);\n                t.printStackTrace(System.out);\n                throw new RuntimeException(t);\n              }\n            }\n          }\n        };\n      searchThreads[thread].setDaemon(true);\n      searchThreads[thread].start();\n    }\n\n    for(int thread=0;thread<searchThreads.length;thread++) {\n      searchThreads[thread].join();\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: DONE search: totHits=\" + totHits);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"7b91922b55d15444d554721b352861d028eb8278":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["3cc749c053615f5871f3b95715fe292f34e70a53"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cc749c053615f5871f3b95715fe292f34e70a53":["7b91922b55d15444d554721b352861d028eb8278"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"7b91922b55d15444d554721b352861d028eb8278":["3cc749c053615f5871f3b95715fe292f34e70a53"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7b91922b55d15444d554721b352861d028eb8278"],"3cc749c053615f5871f3b95715fe292f34e70a53":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}