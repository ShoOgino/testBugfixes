{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50DocValuesConsumer#addBinaryField(FieldInfo,Iterable[BytesRef]).mjava","commits":[{"id":"d6a3823714ed5de938fb4f3fc814824fe0f95e1a","date":1413422458,"type":2,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50DocValuesConsumer#addBinaryField(FieldInfo,Iterable[BytesRef]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene410/Lucene410DocValuesConsumer#addBinaryField(FieldInfo,Iterable[BytesRef]).mjava","sourceNew":"  @Override\n  public void addBinaryField(FieldInfo field, Iterable<BytesRef> values) throws IOException {\n    // write the byte[] data\n    meta.writeVInt(field.number);\n    meta.writeByte(Lucene50DocValuesFormat.BINARY);\n    int minLength = Integer.MAX_VALUE;\n    int maxLength = Integer.MIN_VALUE;\n    final long startFP = data.getFilePointer();\n    long count = 0;\n    long missingCount = 0;\n    for(BytesRef v : values) {\n      final int length;\n      if (v == null) {\n        length = 0;\n        missingCount++;\n      } else {\n        length = v.length;\n      }\n      minLength = Math.min(minLength, length);\n      maxLength = Math.max(maxLength, length);\n      if (v != null) {\n        data.writeBytes(v.bytes, v.offset, v.length);\n      }\n      count++;\n    }\n    meta.writeVInt(minLength == maxLength ? BINARY_FIXED_UNCOMPRESSED : BINARY_VARIABLE_UNCOMPRESSED);\n    if (missingCount == 0) {\n      meta.writeLong(ALL_LIVE);\n    } else if (missingCount == count) {\n      meta.writeLong(ALL_MISSING);\n    } else {\n      meta.writeLong(data.getFilePointer());\n      writeMissingBitset(values);\n    }\n    meta.writeVInt(minLength);\n    meta.writeVInt(maxLength);\n    meta.writeVLong(count);\n    meta.writeLong(startFP);\n    \n    // if minLength == maxLength, its a fixed-length byte[], we are done (the addresses are implicit)\n    // otherwise, we need to record the length fields...\n    if (minLength != maxLength) {\n      meta.writeLong(data.getFilePointer());\n      meta.writeVInt(PackedInts.VERSION_CURRENT);\n      meta.writeVInt(BLOCK_SIZE);\n\n      final MonotonicBlockPackedWriter writer = new MonotonicBlockPackedWriter(data, BLOCK_SIZE);\n      long addr = 0;\n      writer.add(addr);\n      for (BytesRef v : values) {\n        if (v != null) {\n          addr += v.length;\n        }\n        writer.add(addr);\n      }\n      writer.finish();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void addBinaryField(FieldInfo field, Iterable<BytesRef> values) throws IOException {\n    // write the byte[] data\n    meta.writeVInt(field.number);\n    meta.writeByte(Lucene410DocValuesFormat.BINARY);\n    int minLength = Integer.MAX_VALUE;\n    int maxLength = Integer.MIN_VALUE;\n    final long startFP = data.getFilePointer();\n    long count = 0;\n    boolean missing = false;\n    for(BytesRef v : values) {\n      final int length;\n      if (v == null) {\n        length = 0;\n        missing = true;\n      } else {\n        length = v.length;\n      }\n      minLength = Math.min(minLength, length);\n      maxLength = Math.max(maxLength, length);\n      if (v != null) {\n        data.writeBytes(v.bytes, v.offset, v.length);\n      }\n      count++;\n    }\n    meta.writeVInt(minLength == maxLength ? BINARY_FIXED_UNCOMPRESSED : BINARY_VARIABLE_UNCOMPRESSED);\n    if (missing) {\n      meta.writeLong(data.getFilePointer());\n      writeMissingBitset(values);\n    } else {\n      meta.writeLong(-1L);\n    }\n    meta.writeVInt(minLength);\n    meta.writeVInt(maxLength);\n    meta.writeVLong(count);\n    meta.writeLong(startFP);\n    \n    // if minLength == maxLength, its a fixed-length byte[], we are done (the addresses are implicit)\n    // otherwise, we need to record the length fields...\n    if (minLength != maxLength) {\n      meta.writeLong(data.getFilePointer());\n      meta.writeVInt(PackedInts.VERSION_CURRENT);\n      meta.writeVInt(BLOCK_SIZE);\n\n      final MonotonicBlockPackedWriter writer = new MonotonicBlockPackedWriter(data, BLOCK_SIZE);\n      long addr = 0;\n      writer.add(addr);\n      for (BytesRef v : values) {\n        if (v != null) {\n          addr += v.length;\n        }\n        writer.add(addr);\n      }\n      writer.finish();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db68c63cbfaa8698b9c4475f75ed2b9c9696d238","date":1414118621,"type":2,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50DocValuesConsumer#addBinaryField(FieldInfo,Iterable[BytesRef]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene410/Lucene410DocValuesConsumer#addBinaryField(FieldInfo,Iterable[BytesRef]).mjava","sourceNew":"  @Override\n  public void addBinaryField(FieldInfo field, Iterable<BytesRef> values) throws IOException {\n    // write the byte[] data\n    meta.writeVInt(field.number);\n    meta.writeByte(Lucene50DocValuesFormat.BINARY);\n    int minLength = Integer.MAX_VALUE;\n    int maxLength = Integer.MIN_VALUE;\n    final long startFP = data.getFilePointer();\n    long count = 0;\n    long missingCount = 0;\n    for(BytesRef v : values) {\n      final int length;\n      if (v == null) {\n        length = 0;\n        missingCount++;\n      } else {\n        length = v.length;\n      }\n      minLength = Math.min(minLength, length);\n      maxLength = Math.max(maxLength, length);\n      if (v != null) {\n        data.writeBytes(v.bytes, v.offset, v.length);\n      }\n      count++;\n    }\n    meta.writeVInt(minLength == maxLength ? BINARY_FIXED_UNCOMPRESSED : BINARY_VARIABLE_UNCOMPRESSED);\n    if (missingCount == 0) {\n      meta.writeLong(ALL_LIVE);\n    } else if (missingCount == count) {\n      meta.writeLong(ALL_MISSING);\n    } else {\n      meta.writeLong(data.getFilePointer());\n      writeMissingBitset(values);\n    }\n    meta.writeVInt(minLength);\n    meta.writeVInt(maxLength);\n    meta.writeVLong(count);\n    meta.writeLong(startFP);\n    \n    // if minLength == maxLength, its a fixed-length byte[], we are done (the addresses are implicit)\n    // otherwise, we need to record the length fields...\n    if (minLength != maxLength) {\n      meta.writeLong(data.getFilePointer());\n      meta.writeVInt(PackedInts.VERSION_CURRENT);\n      meta.writeVInt(BLOCK_SIZE);\n\n      final MonotonicBlockPackedWriter writer = new MonotonicBlockPackedWriter(data, BLOCK_SIZE);\n      long addr = 0;\n      writer.add(addr);\n      for (BytesRef v : values) {\n        if (v != null) {\n          addr += v.length;\n        }\n        writer.add(addr);\n      }\n      writer.finish();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void addBinaryField(FieldInfo field, Iterable<BytesRef> values) throws IOException {\n    // write the byte[] data\n    meta.writeVInt(field.number);\n    meta.writeByte(Lucene410DocValuesFormat.BINARY);\n    int minLength = Integer.MAX_VALUE;\n    int maxLength = Integer.MIN_VALUE;\n    final long startFP = data.getFilePointer();\n    long count = 0;\n    boolean missing = false;\n    for(BytesRef v : values) {\n      final int length;\n      if (v == null) {\n        length = 0;\n        missing = true;\n      } else {\n        length = v.length;\n      }\n      minLength = Math.min(minLength, length);\n      maxLength = Math.max(maxLength, length);\n      if (v != null) {\n        data.writeBytes(v.bytes, v.offset, v.length);\n      }\n      count++;\n    }\n    meta.writeVInt(minLength == maxLength ? BINARY_FIXED_UNCOMPRESSED : BINARY_VARIABLE_UNCOMPRESSED);\n    if (missing) {\n      meta.writeLong(data.getFilePointer());\n      writeMissingBitset(values);\n    } else {\n      meta.writeLong(-1L);\n    }\n    meta.writeVInt(minLength);\n    meta.writeVInt(maxLength);\n    meta.writeVLong(count);\n    meta.writeLong(startFP);\n    \n    // if minLength == maxLength, its a fixed-length byte[], we are done (the addresses are implicit)\n    // otherwise, we need to record the length fields...\n    if (minLength != maxLength) {\n      meta.writeLong(data.getFilePointer());\n      meta.writeVInt(PackedInts.VERSION_CURRENT);\n      meta.writeVInt(BLOCK_SIZE);\n\n      final MonotonicBlockPackedWriter writer = new MonotonicBlockPackedWriter(data, BLOCK_SIZE);\n      long addr = 0;\n      writer.add(addr);\n      for (BytesRef v : values) {\n        if (v != null) {\n          addr += v.length;\n        }\n        writer.add(addr);\n      }\n      writer.finish();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1","date":1419400138,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50DocValuesConsumer#addBinaryField(FieldInfo,Iterable[BytesRef]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50DocValuesConsumer#addBinaryField(FieldInfo,Iterable[BytesRef]).mjava","sourceNew":"  @Override\n  public void addBinaryField(FieldInfo field, Iterable<BytesRef> values) throws IOException {\n    // write the byte[] data\n    meta.writeVInt(field.number);\n    meta.writeByte(Lucene50DocValuesFormat.BINARY);\n    int minLength = Integer.MAX_VALUE;\n    int maxLength = Integer.MIN_VALUE;\n    final long startFP = data.getFilePointer();\n    long count = 0;\n    long missingCount = 0;\n    for(BytesRef v : values) {\n      final int length;\n      if (v == null) {\n        length = 0;\n        missingCount++;\n      } else {\n        length = v.length;\n      }\n      minLength = Math.min(minLength, length);\n      maxLength = Math.max(maxLength, length);\n      if (v != null) {\n        data.writeBytes(v.bytes, v.offset, v.length);\n      }\n      count++;\n    }\n    meta.writeVInt(minLength == maxLength ? BINARY_FIXED_UNCOMPRESSED : BINARY_VARIABLE_UNCOMPRESSED);\n    if (missingCount == 0) {\n      meta.writeLong(ALL_LIVE);\n    } else if (missingCount == count) {\n      meta.writeLong(ALL_MISSING);\n    } else {\n      meta.writeLong(data.getFilePointer());\n      writeMissingBitset(values);\n    }\n    meta.writeVInt(minLength);\n    meta.writeVInt(maxLength);\n    meta.writeVLong(count);\n    meta.writeLong(startFP);\n    \n    // if minLength == maxLength, it's a fixed-length byte[], we are done (the addresses are implicit)\n    // otherwise, we need to record the length fields...\n    if (minLength != maxLength) {\n      meta.writeLong(data.getFilePointer());\n      meta.writeVInt(PackedInts.VERSION_CURRENT);\n      meta.writeVInt(BLOCK_SIZE);\n\n      final MonotonicBlockPackedWriter writer = new MonotonicBlockPackedWriter(data, BLOCK_SIZE);\n      long addr = 0;\n      writer.add(addr);\n      for (BytesRef v : values) {\n        if (v != null) {\n          addr += v.length;\n        }\n        writer.add(addr);\n      }\n      writer.finish();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void addBinaryField(FieldInfo field, Iterable<BytesRef> values) throws IOException {\n    // write the byte[] data\n    meta.writeVInt(field.number);\n    meta.writeByte(Lucene50DocValuesFormat.BINARY);\n    int minLength = Integer.MAX_VALUE;\n    int maxLength = Integer.MIN_VALUE;\n    final long startFP = data.getFilePointer();\n    long count = 0;\n    long missingCount = 0;\n    for(BytesRef v : values) {\n      final int length;\n      if (v == null) {\n        length = 0;\n        missingCount++;\n      } else {\n        length = v.length;\n      }\n      minLength = Math.min(minLength, length);\n      maxLength = Math.max(maxLength, length);\n      if (v != null) {\n        data.writeBytes(v.bytes, v.offset, v.length);\n      }\n      count++;\n    }\n    meta.writeVInt(minLength == maxLength ? BINARY_FIXED_UNCOMPRESSED : BINARY_VARIABLE_UNCOMPRESSED);\n    if (missingCount == 0) {\n      meta.writeLong(ALL_LIVE);\n    } else if (missingCount == count) {\n      meta.writeLong(ALL_MISSING);\n    } else {\n      meta.writeLong(data.getFilePointer());\n      writeMissingBitset(values);\n    }\n    meta.writeVInt(minLength);\n    meta.writeVInt(maxLength);\n    meta.writeVLong(count);\n    meta.writeLong(startFP);\n    \n    // if minLength == maxLength, its a fixed-length byte[], we are done (the addresses are implicit)\n    // otherwise, we need to record the length fields...\n    if (minLength != maxLength) {\n      meta.writeLong(data.getFilePointer());\n      meta.writeVInt(PackedInts.VERSION_CURRENT);\n      meta.writeVInt(BLOCK_SIZE);\n\n      final MonotonicBlockPackedWriter writer = new MonotonicBlockPackedWriter(data, BLOCK_SIZE);\n      long addr = 0;\n      writer.add(addr);\n      for (BytesRef v : values) {\n        if (v != null) {\n          addr += v.length;\n        }\n        writer.add(addr);\n      }\n      writer.finish();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"22895d92bc967fd16d7d69596268ad8254a7bd05","date":1435200722,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50DocValuesConsumer#addBinaryField(FieldInfo,Iterable[BytesRef]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50DocValuesConsumer#addBinaryField(FieldInfo,Iterable[BytesRef]).mjava","sourceNew":"  @Override\n  public void addBinaryField(FieldInfo field, Iterable<BytesRef> values) throws IOException {\n    // write the byte[] data\n    meta.writeVInt(field.number);\n    meta.writeByte(Lucene50DocValuesFormat.BINARY);\n    int minLength = Integer.MAX_VALUE;\n    int maxLength = Integer.MIN_VALUE;\n    final long startFP = data.getFilePointer();\n    long count = 0;\n    long missingCount = 0;\n    for(BytesRef v : values) {\n      final int length;\n      if (v == null) {\n        length = 0;\n        missingCount++;\n      } else {\n        length = v.length;\n      }\n      minLength = Math.min(minLength, length);\n      maxLength = Math.max(maxLength, length);\n      if (v != null) {\n        data.writeBytes(v.bytes, v.offset, v.length);\n      }\n      count++;\n    }\n    meta.writeVInt(minLength == maxLength ? BINARY_FIXED_UNCOMPRESSED : BINARY_VARIABLE_UNCOMPRESSED);\n    if (missingCount == 0) {\n      meta.writeLong(ALL_LIVE);\n    } else if (missingCount == count) {\n      meta.writeLong(ALL_MISSING);\n    } else {\n      meta.writeLong(data.getFilePointer());\n      writeMissingBitset(values);\n    }\n    meta.writeVInt(minLength);\n    meta.writeVInt(maxLength);\n    meta.writeVLong(count);\n    meta.writeLong(startFP);\n    \n    // if minLength == maxLength, it's a fixed-length byte[], we are done (the addresses are implicit)\n    // otherwise, we need to record the length fields...\n    if (minLength != maxLength) {\n      meta.writeLong(data.getFilePointer());\n      meta.writeVInt(PackedInts.VERSION_CURRENT);\n      meta.writeVInt(MONOTONIC_BLOCK_SIZE);\n\n      final MonotonicBlockPackedWriter writer = new MonotonicBlockPackedWriter(data, MONOTONIC_BLOCK_SIZE);\n      long addr = 0;\n      writer.add(addr);\n      for (BytesRef v : values) {\n        if (v != null) {\n          addr += v.length;\n        }\n        writer.add(addr);\n      }\n      writer.finish();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void addBinaryField(FieldInfo field, Iterable<BytesRef> values) throws IOException {\n    // write the byte[] data\n    meta.writeVInt(field.number);\n    meta.writeByte(Lucene50DocValuesFormat.BINARY);\n    int minLength = Integer.MAX_VALUE;\n    int maxLength = Integer.MIN_VALUE;\n    final long startFP = data.getFilePointer();\n    long count = 0;\n    long missingCount = 0;\n    for(BytesRef v : values) {\n      final int length;\n      if (v == null) {\n        length = 0;\n        missingCount++;\n      } else {\n        length = v.length;\n      }\n      minLength = Math.min(minLength, length);\n      maxLength = Math.max(maxLength, length);\n      if (v != null) {\n        data.writeBytes(v.bytes, v.offset, v.length);\n      }\n      count++;\n    }\n    meta.writeVInt(minLength == maxLength ? BINARY_FIXED_UNCOMPRESSED : BINARY_VARIABLE_UNCOMPRESSED);\n    if (missingCount == 0) {\n      meta.writeLong(ALL_LIVE);\n    } else if (missingCount == count) {\n      meta.writeLong(ALL_MISSING);\n    } else {\n      meta.writeLong(data.getFilePointer());\n      writeMissingBitset(values);\n    }\n    meta.writeVInt(minLength);\n    meta.writeVInt(maxLength);\n    meta.writeVLong(count);\n    meta.writeLong(startFP);\n    \n    // if minLength == maxLength, it's a fixed-length byte[], we are done (the addresses are implicit)\n    // otherwise, we need to record the length fields...\n    if (minLength != maxLength) {\n      meta.writeLong(data.getFilePointer());\n      meta.writeVInt(PackedInts.VERSION_CURRENT);\n      meta.writeVInt(BLOCK_SIZE);\n\n      final MonotonicBlockPackedWriter writer = new MonotonicBlockPackedWriter(data, BLOCK_SIZE);\n      long addr = 0;\n      writer.add(addr);\n      for (BytesRef v : values) {\n        if (v != null) {\n          addr += v.length;\n        }\n        writer.add(addr);\n      }\n      writer.finish();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a870f9917149dc600c4ad4417d615c1795de5864","date":1445975387,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene50/Lucene50DocValuesConsumer#addBinaryField(FieldInfo,Iterable[BytesRef]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50DocValuesConsumer#addBinaryField(FieldInfo,Iterable[BytesRef]).mjava","sourceNew":"  @Override\n  public void addBinaryField(FieldInfo field, Iterable<BytesRef> values) throws IOException {\n    // write the byte[] data\n    meta.writeVInt(field.number);\n    meta.writeByte(Lucene50DocValuesFormat.BINARY);\n    int minLength = Integer.MAX_VALUE;\n    int maxLength = Integer.MIN_VALUE;\n    final long startFP = data.getFilePointer();\n    long count = 0;\n    long missingCount = 0;\n    for(BytesRef v : values) {\n      final int length;\n      if (v == null) {\n        length = 0;\n        missingCount++;\n      } else {\n        length = v.length;\n      }\n      minLength = Math.min(minLength, length);\n      maxLength = Math.max(maxLength, length);\n      if (v != null) {\n        data.writeBytes(v.bytes, v.offset, v.length);\n      }\n      count++;\n    }\n    meta.writeVInt(minLength == maxLength ? BINARY_FIXED_UNCOMPRESSED : BINARY_VARIABLE_UNCOMPRESSED);\n    if (missingCount == 0) {\n      meta.writeLong(ALL_LIVE);\n    } else if (missingCount == count) {\n      meta.writeLong(ALL_MISSING);\n    } else {\n      meta.writeLong(data.getFilePointer());\n      writeMissingBitset(values);\n    }\n    meta.writeVInt(minLength);\n    meta.writeVInt(maxLength);\n    meta.writeVLong(count);\n    meta.writeLong(startFP);\n    \n    // if minLength == maxLength, it's a fixed-length byte[], we are done (the addresses are implicit)\n    // otherwise, we need to record the length fields...\n    if (minLength != maxLength) {\n      meta.writeLong(data.getFilePointer());\n      meta.writeVInt(PackedInts.VERSION_CURRENT);\n      meta.writeVInt(MONOTONIC_BLOCK_SIZE);\n\n      final MonotonicBlockPackedWriter writer = new MonotonicBlockPackedWriter(data, MONOTONIC_BLOCK_SIZE);\n      long addr = 0;\n      writer.add(addr);\n      for (BytesRef v : values) {\n        if (v != null) {\n          addr += v.length;\n        }\n        writer.add(addr);\n      }\n      writer.finish();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void addBinaryField(FieldInfo field, Iterable<BytesRef> values) throws IOException {\n    // write the byte[] data\n    meta.writeVInt(field.number);\n    meta.writeByte(Lucene50DocValuesFormat.BINARY);\n    int minLength = Integer.MAX_VALUE;\n    int maxLength = Integer.MIN_VALUE;\n    final long startFP = data.getFilePointer();\n    long count = 0;\n    long missingCount = 0;\n    for(BytesRef v : values) {\n      final int length;\n      if (v == null) {\n        length = 0;\n        missingCount++;\n      } else {\n        length = v.length;\n      }\n      minLength = Math.min(minLength, length);\n      maxLength = Math.max(maxLength, length);\n      if (v != null) {\n        data.writeBytes(v.bytes, v.offset, v.length);\n      }\n      count++;\n    }\n    meta.writeVInt(minLength == maxLength ? BINARY_FIXED_UNCOMPRESSED : BINARY_VARIABLE_UNCOMPRESSED);\n    if (missingCount == 0) {\n      meta.writeLong(ALL_LIVE);\n    } else if (missingCount == count) {\n      meta.writeLong(ALL_MISSING);\n    } else {\n      meta.writeLong(data.getFilePointer());\n      writeMissingBitset(values);\n    }\n    meta.writeVInt(minLength);\n    meta.writeVInt(maxLength);\n    meta.writeVLong(count);\n    meta.writeLong(startFP);\n    \n    // if minLength == maxLength, it's a fixed-length byte[], we are done (the addresses are implicit)\n    // otherwise, we need to record the length fields...\n    if (minLength != maxLength) {\n      meta.writeLong(data.getFilePointer());\n      meta.writeVInt(PackedInts.VERSION_CURRENT);\n      meta.writeVInt(MONOTONIC_BLOCK_SIZE);\n\n      final MonotonicBlockPackedWriter writer = new MonotonicBlockPackedWriter(data, MONOTONIC_BLOCK_SIZE);\n      long addr = 0;\n      writer.add(addr);\n      for (BytesRef v : values) {\n        if (v != null) {\n          addr += v.length;\n        }\n        writer.add(addr);\n      }\n      writer.finish();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"22895d92bc967fd16d7d69596268ad8254a7bd05":["8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1"],"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d6a3823714ed5de938fb4f3fc814824fe0f95e1a"],"a870f9917149dc600c4ad4417d615c1795de5864":["22895d92bc967fd16d7d69596268ad8254a7bd05"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a870f9917149dc600c4ad4417d615c1795de5864"],"d6a3823714ed5de938fb4f3fc814824fe0f95e1a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"22895d92bc967fd16d7d69596268ad8254a7bd05":["a870f9917149dc600c4ad4417d615c1795de5864"],"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1":["22895d92bc967fd16d7d69596268ad8254a7bd05"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238","d6a3823714ed5de938fb4f3fc814824fe0f95e1a"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1"],"a870f9917149dc600c4ad4417d615c1795de5864":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d6a3823714ed5de938fb4f3fc814824fe0f95e1a":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}