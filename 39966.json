{"path":"lucene/core/src/java/org/apache/lucene/index/SegmentMerger#mergeDocValues(SegmentWriteState).mjava","commits":[{"id":"b57ad184373369f2ee65828cd86b30da949653f6","date":1360243980,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentMerger#mergeDocValues(SegmentWriteState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentMerger#mergeSimpleDocValues(SegmentWriteState).mjava","sourceNew":"  private void mergeDocValues(SegmentWriteState segmentWriteState) throws IOException {\n\n    if (codec.docValuesFormat() != null) {\n      DocValuesConsumer consumer = codec.docValuesFormat().fieldsConsumer(segmentWriteState);\n      boolean success = false;\n      try {\n        for (FieldInfo field : mergeState.fieldInfos) {\n          DocValuesType type = field.getDocValuesType();\n          if (type != null) {\n            if (type == DocValuesType.NUMERIC) {\n              List<NumericDocValues> toMerge = new ArrayList<NumericDocValues>();\n              for (AtomicReader reader : mergeState.readers) {\n                NumericDocValues values = reader.getNumericDocValues(field.name);\n                if (values == null) {\n                  values = NumericDocValues.EMPTY;\n                }\n                toMerge.add(values);\n              }\n              consumer.mergeNumericField(field, mergeState, toMerge);\n            } else if (type == DocValuesType.BINARY) {\n              List<BinaryDocValues> toMerge = new ArrayList<BinaryDocValues>();\n              for (AtomicReader reader : mergeState.readers) {\n                BinaryDocValues values = reader.getBinaryDocValues(field.name);\n                if (values == null) {\n                  values = BinaryDocValues.EMPTY;\n                }\n                toMerge.add(values);\n              }\n              consumer.mergeBinaryField(field, mergeState, toMerge);\n            } else if (type == DocValuesType.SORTED) {\n              List<SortedDocValues> toMerge = new ArrayList<SortedDocValues>();\n              for (AtomicReader reader : mergeState.readers) {\n                SortedDocValues values = reader.getSortedDocValues(field.name);\n                if (values == null) {\n                  values = SortedDocValues.EMPTY;\n                }\n                toMerge.add(values);\n              }\n              consumer.mergeSortedField(field, mergeState, toMerge);\n            } else {\n              throw new AssertionError(\"type=\" + type);\n            }\n          }\n        }\n        success = true;\n      } finally {\n        if (success) {\n          IOUtils.close(consumer);\n        } else {\n          IOUtils.closeWhileHandlingException(consumer);            \n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void mergeSimpleDocValues(SegmentWriteState segmentWriteState) throws IOException {\n\n    if (codec.docValuesFormat() != null) {\n      DocValuesConsumer consumer = codec.docValuesFormat().fieldsConsumer(segmentWriteState);\n      boolean success = false;\n      try {\n        for (FieldInfo field : mergeState.fieldInfos) {\n          DocValuesType type = field.getDocValuesType();\n          if (type != null) {\n            if (type == DocValuesType.NUMERIC) {\n              List<NumericDocValues> toMerge = new ArrayList<NumericDocValues>();\n              for (AtomicReader reader : mergeState.readers) {\n                NumericDocValues values = reader.getNumericDocValues(field.name);\n                if (values == null) {\n                  values = NumericDocValues.EMPTY;\n                }\n                toMerge.add(values);\n              }\n              consumer.mergeNumericField(field, mergeState, toMerge);\n            } else if (type == DocValuesType.BINARY) {\n              List<BinaryDocValues> toMerge = new ArrayList<BinaryDocValues>();\n              for (AtomicReader reader : mergeState.readers) {\n                BinaryDocValues values = reader.getBinaryDocValues(field.name);\n                if (values == null) {\n                  values = BinaryDocValues.EMPTY;\n                }\n                toMerge.add(values);\n              }\n              consumer.mergeBinaryField(field, mergeState, toMerge);\n            } else if (type == DocValuesType.SORTED) {\n              List<SortedDocValues> toMerge = new ArrayList<SortedDocValues>();\n              for (AtomicReader reader : mergeState.readers) {\n                SortedDocValues values = reader.getSortedDocValues(field.name);\n                if (values == null) {\n                  values = SortedDocValues.EMPTY;\n                }\n                toMerge.add(values);\n              }\n              consumer.mergeSortedField(field, mergeState, toMerge);\n            } else {\n              throw new AssertionError(\"type=\" + type);\n            }\n          }\n        }\n        success = true;\n      } finally {\n        if (success) {\n          IOUtils.close(consumer);\n        } else {\n          IOUtils.closeWhileHandlingException(consumer);            \n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentMerger#mergeDocValues(SegmentWriteState).mjava","pathOld":"/dev/null","sourceNew":"  private void mergeDocValues(SegmentWriteState segmentWriteState) throws IOException {\n\n    if (codec.docValuesFormat() != null) {\n      DocValuesConsumer consumer = codec.docValuesFormat().fieldsConsumer(segmentWriteState);\n      boolean success = false;\n      try {\n        for (FieldInfo field : mergeState.fieldInfos) {\n          DocValuesType type = field.getDocValuesType();\n          if (type != null) {\n            if (type == DocValuesType.NUMERIC) {\n              List<NumericDocValues> toMerge = new ArrayList<NumericDocValues>();\n              for (AtomicReader reader : mergeState.readers) {\n                NumericDocValues values = reader.getNumericDocValues(field.name);\n                if (values == null) {\n                  values = NumericDocValues.EMPTY;\n                }\n                toMerge.add(values);\n              }\n              consumer.mergeNumericField(field, mergeState, toMerge);\n            } else if (type == DocValuesType.BINARY) {\n              List<BinaryDocValues> toMerge = new ArrayList<BinaryDocValues>();\n              for (AtomicReader reader : mergeState.readers) {\n                BinaryDocValues values = reader.getBinaryDocValues(field.name);\n                if (values == null) {\n                  values = BinaryDocValues.EMPTY;\n                }\n                toMerge.add(values);\n              }\n              consumer.mergeBinaryField(field, mergeState, toMerge);\n            } else if (type == DocValuesType.SORTED) {\n              List<SortedDocValues> toMerge = new ArrayList<SortedDocValues>();\n              for (AtomicReader reader : mergeState.readers) {\n                SortedDocValues values = reader.getSortedDocValues(field.name);\n                if (values == null) {\n                  values = SortedDocValues.EMPTY;\n                }\n                toMerge.add(values);\n              }\n              consumer.mergeSortedField(field, mergeState, toMerge);\n            } else {\n              throw new AssertionError(\"type=\" + type);\n            }\n          }\n        }\n        success = true;\n      } finally {\n        if (success) {\n          IOUtils.close(consumer);\n        } else {\n          IOUtils.closeWhileHandlingException(consumer);            \n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f366ce28775e2b8ea4e06355009471328711666d","date":1360551293,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentMerger#mergeDocValues(SegmentWriteState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentMerger#mergeDocValues(SegmentWriteState).mjava","sourceNew":"  private void mergeDocValues(SegmentWriteState segmentWriteState) throws IOException {\n\n    if (codec.docValuesFormat() != null) {\n      DocValuesConsumer consumer = codec.docValuesFormat().fieldsConsumer(segmentWriteState);\n      boolean success = false;\n      try {\n        for (FieldInfo field : mergeState.fieldInfos) {\n          DocValuesType type = field.getDocValuesType();\n          if (type != null) {\n            if (type == DocValuesType.NUMERIC) {\n              List<NumericDocValues> toMerge = new ArrayList<NumericDocValues>();\n              for (AtomicReader reader : mergeState.readers) {\n                NumericDocValues values = reader.getNumericDocValues(field.name);\n                if (values == null) {\n                  values = NumericDocValues.EMPTY;\n                }\n                toMerge.add(values);\n              }\n              consumer.mergeNumericField(field, mergeState, toMerge);\n            } else if (type == DocValuesType.BINARY) {\n              List<BinaryDocValues> toMerge = new ArrayList<BinaryDocValues>();\n              for (AtomicReader reader : mergeState.readers) {\n                BinaryDocValues values = reader.getBinaryDocValues(field.name);\n                if (values == null) {\n                  values = BinaryDocValues.EMPTY;\n                }\n                toMerge.add(values);\n              }\n              consumer.mergeBinaryField(field, mergeState, toMerge);\n            } else if (type == DocValuesType.SORTED) {\n              List<SortedDocValues> toMerge = new ArrayList<SortedDocValues>();\n              for (AtomicReader reader : mergeState.readers) {\n                SortedDocValues values = reader.getSortedDocValues(field.name);\n                if (values == null) {\n                  values = SortedDocValues.EMPTY;\n                }\n                toMerge.add(values);\n              }\n              consumer.mergeSortedField(field, mergeState, toMerge);\n            } else if (type == DocValuesType.SORTED_SET) {\n              List<SortedSetDocValues> toMerge = new ArrayList<SortedSetDocValues>();\n              for (AtomicReader reader : mergeState.readers) {\n                SortedSetDocValues values = reader.getSortedSetDocValues(field.name);\n                if (values == null) {\n                  values = SortedSetDocValues.EMPTY;\n                }\n                toMerge.add(values);\n              }\n              consumer.mergeSortedSetField(field, mergeState, toMerge);\n            } else {\n              throw new AssertionError(\"type=\" + type);\n            }\n          }\n        }\n        success = true;\n      } finally {\n        if (success) {\n          IOUtils.close(consumer);\n        } else {\n          IOUtils.closeWhileHandlingException(consumer);            \n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void mergeDocValues(SegmentWriteState segmentWriteState) throws IOException {\n\n    if (codec.docValuesFormat() != null) {\n      DocValuesConsumer consumer = codec.docValuesFormat().fieldsConsumer(segmentWriteState);\n      boolean success = false;\n      try {\n        for (FieldInfo field : mergeState.fieldInfos) {\n          DocValuesType type = field.getDocValuesType();\n          if (type != null) {\n            if (type == DocValuesType.NUMERIC) {\n              List<NumericDocValues> toMerge = new ArrayList<NumericDocValues>();\n              for (AtomicReader reader : mergeState.readers) {\n                NumericDocValues values = reader.getNumericDocValues(field.name);\n                if (values == null) {\n                  values = NumericDocValues.EMPTY;\n                }\n                toMerge.add(values);\n              }\n              consumer.mergeNumericField(field, mergeState, toMerge);\n            } else if (type == DocValuesType.BINARY) {\n              List<BinaryDocValues> toMerge = new ArrayList<BinaryDocValues>();\n              for (AtomicReader reader : mergeState.readers) {\n                BinaryDocValues values = reader.getBinaryDocValues(field.name);\n                if (values == null) {\n                  values = BinaryDocValues.EMPTY;\n                }\n                toMerge.add(values);\n              }\n              consumer.mergeBinaryField(field, mergeState, toMerge);\n            } else if (type == DocValuesType.SORTED) {\n              List<SortedDocValues> toMerge = new ArrayList<SortedDocValues>();\n              for (AtomicReader reader : mergeState.readers) {\n                SortedDocValues values = reader.getSortedDocValues(field.name);\n                if (values == null) {\n                  values = SortedDocValues.EMPTY;\n                }\n                toMerge.add(values);\n              }\n              consumer.mergeSortedField(field, mergeState, toMerge);\n            } else {\n              throw new AssertionError(\"type=\" + type);\n            }\n          }\n        }\n        success = true;\n      } finally {\n        if (success) {\n          IOUtils.close(consumer);\n        } else {\n          IOUtils.closeWhileHandlingException(consumer);            \n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bed77c10dee249829e09c7de0432fedda3b23bb","date":1360634170,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentMerger#mergeDocValues(SegmentWriteState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentMerger#mergeDocValues(SegmentWriteState).mjava","sourceNew":"  private void mergeDocValues(SegmentWriteState segmentWriteState) throws IOException {\n    DocValuesConsumer consumer = codec.docValuesFormat().fieldsConsumer(segmentWriteState);\n    boolean success = false;\n    try {\n      for (FieldInfo field : mergeState.fieldInfos) {\n        DocValuesType type = field.getDocValuesType();\n        if (type != null) {\n          if (type == DocValuesType.NUMERIC) {\n            List<NumericDocValues> toMerge = new ArrayList<NumericDocValues>();\n            for (AtomicReader reader : mergeState.readers) {\n              NumericDocValues values = reader.getNumericDocValues(field.name);\n              if (values == null) {\n                values = NumericDocValues.EMPTY;\n              }\n              toMerge.add(values);\n            }\n            consumer.mergeNumericField(field, mergeState, toMerge);\n          } else if (type == DocValuesType.BINARY) {\n            List<BinaryDocValues> toMerge = new ArrayList<BinaryDocValues>();\n            for (AtomicReader reader : mergeState.readers) {\n              BinaryDocValues values = reader.getBinaryDocValues(field.name);\n              if (values == null) {\n                values = BinaryDocValues.EMPTY;\n              }\n              toMerge.add(values);\n            }\n            consumer.mergeBinaryField(field, mergeState, toMerge);\n          } else if (type == DocValuesType.SORTED) {\n            List<SortedDocValues> toMerge = new ArrayList<SortedDocValues>();\n            for (AtomicReader reader : mergeState.readers) {\n              SortedDocValues values = reader.getSortedDocValues(field.name);\n              if (values == null) {\n                values = SortedDocValues.EMPTY;\n              }\n              toMerge.add(values);\n            }\n            consumer.mergeSortedField(field, mergeState, toMerge);\n          } else {\n            throw new AssertionError(\"type=\" + type);\n          }\n        }\n      }\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(consumer);\n      } else {\n        IOUtils.closeWhileHandlingException(consumer);            \n      }\n    }\n  }\n\n","sourceOld":"  private void mergeDocValues(SegmentWriteState segmentWriteState) throws IOException {\n\n    if (codec.docValuesFormat() != null) {\n      DocValuesConsumer consumer = codec.docValuesFormat().fieldsConsumer(segmentWriteState);\n      boolean success = false;\n      try {\n        for (FieldInfo field : mergeState.fieldInfos) {\n          DocValuesType type = field.getDocValuesType();\n          if (type != null) {\n            if (type == DocValuesType.NUMERIC) {\n              List<NumericDocValues> toMerge = new ArrayList<NumericDocValues>();\n              for (AtomicReader reader : mergeState.readers) {\n                NumericDocValues values = reader.getNumericDocValues(field.name);\n                if (values == null) {\n                  values = NumericDocValues.EMPTY;\n                }\n                toMerge.add(values);\n              }\n              consumer.mergeNumericField(field, mergeState, toMerge);\n            } else if (type == DocValuesType.BINARY) {\n              List<BinaryDocValues> toMerge = new ArrayList<BinaryDocValues>();\n              for (AtomicReader reader : mergeState.readers) {\n                BinaryDocValues values = reader.getBinaryDocValues(field.name);\n                if (values == null) {\n                  values = BinaryDocValues.EMPTY;\n                }\n                toMerge.add(values);\n              }\n              consumer.mergeBinaryField(field, mergeState, toMerge);\n            } else if (type == DocValuesType.SORTED) {\n              List<SortedDocValues> toMerge = new ArrayList<SortedDocValues>();\n              for (AtomicReader reader : mergeState.readers) {\n                SortedDocValues values = reader.getSortedDocValues(field.name);\n                if (values == null) {\n                  values = SortedDocValues.EMPTY;\n                }\n                toMerge.add(values);\n              }\n              consumer.mergeSortedField(field, mergeState, toMerge);\n            } else {\n              throw new AssertionError(\"type=\" + type);\n            }\n          }\n        }\n        success = true;\n      } finally {\n        if (success) {\n          IOUtils.close(consumer);\n        } else {\n          IOUtils.closeWhileHandlingException(consumer);            \n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["8429ddf2214f2bf8abcbb5484fefef6aaf5c417e"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"dbff44e659c8599e09913b321ce89b65763b68d8","date":1360634589,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentMerger#mergeDocValues(SegmentWriteState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentMerger#mergeDocValues(SegmentWriteState).mjava","sourceNew":"  private void mergeDocValues(SegmentWriteState segmentWriteState) throws IOException {\n    DocValuesConsumer consumer = codec.docValuesFormat().fieldsConsumer(segmentWriteState);\n    boolean success = false;\n    try {\n      for (FieldInfo field : mergeState.fieldInfos) {\n        DocValuesType type = field.getDocValuesType();\n        if (type != null) {\n          if (type == DocValuesType.NUMERIC) {\n            List<NumericDocValues> toMerge = new ArrayList<NumericDocValues>();\n            for (AtomicReader reader : mergeState.readers) {\n              NumericDocValues values = reader.getNumericDocValues(field.name);\n              if (values == null) {\n                values = NumericDocValues.EMPTY;\n              }\n              toMerge.add(values);\n            }\n            consumer.mergeNumericField(field, mergeState, toMerge);\n          } else if (type == DocValuesType.BINARY) {\n            List<BinaryDocValues> toMerge = new ArrayList<BinaryDocValues>();\n            for (AtomicReader reader : mergeState.readers) {\n              BinaryDocValues values = reader.getBinaryDocValues(field.name);\n              if (values == null) {\n                values = BinaryDocValues.EMPTY;\n              }\n              toMerge.add(values);\n            }\n            consumer.mergeBinaryField(field, mergeState, toMerge);\n          } else if (type == DocValuesType.SORTED) {\n            List<SortedDocValues> toMerge = new ArrayList<SortedDocValues>();\n            for (AtomicReader reader : mergeState.readers) {\n              SortedDocValues values = reader.getSortedDocValues(field.name);\n              if (values == null) {\n                values = SortedDocValues.EMPTY;\n              }\n              toMerge.add(values);\n            }\n            consumer.mergeSortedField(field, mergeState, toMerge);\n          } else if (type == DocValuesType.SORTED_SET) {\n            List<SortedSetDocValues> toMerge = new ArrayList<SortedSetDocValues>();\n            for (AtomicReader reader : mergeState.readers) {\n              SortedSetDocValues values = reader.getSortedSetDocValues(field.name);\n              if (values == null) {\n                values = SortedSetDocValues.EMPTY;\n              }\n              toMerge.add(values);\n            }\n            consumer.mergeSortedSetField(field, mergeState, toMerge);\n          } else {\n            throw new AssertionError(\"type=\" + type);\n          }\n        }\n      }\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(consumer);\n      } else {\n        IOUtils.closeWhileHandlingException(consumer);            \n      }\n    }\n  }\n\n","sourceOld":"  private void mergeDocValues(SegmentWriteState segmentWriteState) throws IOException {\n\n    if (codec.docValuesFormat() != null) {\n      DocValuesConsumer consumer = codec.docValuesFormat().fieldsConsumer(segmentWriteState);\n      boolean success = false;\n      try {\n        for (FieldInfo field : mergeState.fieldInfos) {\n          DocValuesType type = field.getDocValuesType();\n          if (type != null) {\n            if (type == DocValuesType.NUMERIC) {\n              List<NumericDocValues> toMerge = new ArrayList<NumericDocValues>();\n              for (AtomicReader reader : mergeState.readers) {\n                NumericDocValues values = reader.getNumericDocValues(field.name);\n                if (values == null) {\n                  values = NumericDocValues.EMPTY;\n                }\n                toMerge.add(values);\n              }\n              consumer.mergeNumericField(field, mergeState, toMerge);\n            } else if (type == DocValuesType.BINARY) {\n              List<BinaryDocValues> toMerge = new ArrayList<BinaryDocValues>();\n              for (AtomicReader reader : mergeState.readers) {\n                BinaryDocValues values = reader.getBinaryDocValues(field.name);\n                if (values == null) {\n                  values = BinaryDocValues.EMPTY;\n                }\n                toMerge.add(values);\n              }\n              consumer.mergeBinaryField(field, mergeState, toMerge);\n            } else if (type == DocValuesType.SORTED) {\n              List<SortedDocValues> toMerge = new ArrayList<SortedDocValues>();\n              for (AtomicReader reader : mergeState.readers) {\n                SortedDocValues values = reader.getSortedDocValues(field.name);\n                if (values == null) {\n                  values = SortedDocValues.EMPTY;\n                }\n                toMerge.add(values);\n              }\n              consumer.mergeSortedField(field, mergeState, toMerge);\n            } else if (type == DocValuesType.SORTED_SET) {\n              List<SortedSetDocValues> toMerge = new ArrayList<SortedSetDocValues>();\n              for (AtomicReader reader : mergeState.readers) {\n                SortedSetDocValues values = reader.getSortedSetDocValues(field.name);\n                if (values == null) {\n                  values = SortedSetDocValues.EMPTY;\n                }\n                toMerge.add(values);\n              }\n              consumer.mergeSortedSetField(field, mergeState, toMerge);\n            } else {\n              throw new AssertionError(\"type=\" + type);\n            }\n          }\n        }\n        success = true;\n      } finally {\n        if (success) {\n          IOUtils.close(consumer);\n        } else {\n          IOUtils.closeWhileHandlingException(consumer);            \n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["8429ddf2214f2bf8abcbb5484fefef6aaf5c417e"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ddbb72a33557d2b5bc22ee95daf3281c43560502","date":1361334582,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentMerger#mergeDocValues(SegmentWriteState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentMerger#mergeDocValues(SegmentWriteState).mjava","sourceNew":"  private void mergeDocValues(SegmentWriteState segmentWriteState) throws IOException {\n    DocValuesConsumer consumer = codec.docValuesFormat().fieldsConsumer(segmentWriteState);\n    boolean success = false;\n    try {\n      for (FieldInfo field : mergeState.fieldInfos) {\n        DocValuesType type = field.getDocValuesType();\n        if (type != null) {\n          if (type == DocValuesType.NUMERIC) {\n            List<NumericDocValues> toMerge = new ArrayList<NumericDocValues>();\n            for (AtomicReader reader : mergeState.readers) {\n              NumericDocValues values = reader.getNumericDocValues(field.name);\n              if (values == null) {\n                values = NumericDocValues.EMPTY;\n              }\n              toMerge.add(values);\n            }\n            consumer.mergeNumericField(field, mergeState, toMerge);\n          } else if (type == DocValuesType.BINARY) {\n            List<BinaryDocValues> toMerge = new ArrayList<BinaryDocValues>();\n            for (AtomicReader reader : mergeState.readers) {\n              BinaryDocValues values = reader.getBinaryDocValues(field.name);\n              if (values == null) {\n                values = BinaryDocValues.EMPTY;\n              }\n              toMerge.add(values);\n            }\n            consumer.mergeBinaryField(field, mergeState, toMerge);\n          } else if (type == DocValuesType.SORTED) {\n            List<SortedDocValues> toMerge = new ArrayList<SortedDocValues>();\n            for (AtomicReader reader : mergeState.readers) {\n              SortedDocValues values = reader.getSortedDocValues(field.name);\n              if (values == null) {\n                values = SortedDocValues.EMPTY;\n              }\n              toMerge.add(values);\n            }\n            consumer.mergeSortedField(field, mergeState, toMerge);\n          } else if (type == DocValuesType.SORTED_SET) {\n            List<SortedSetDocValues> toMerge = new ArrayList<SortedSetDocValues>();\n            for (AtomicReader reader : mergeState.readers) {\n              SortedSetDocValues values = reader.getSortedSetDocValues(field.name);\n              if (values == null) {\n                values = SortedSetDocValues.EMPTY;\n              }\n              toMerge.add(values);\n            }\n            consumer.mergeSortedSetField(field, mergeState, toMerge);\n          } else {\n            throw new AssertionError(\"type=\" + type);\n          }\n        }\n      }\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(consumer);\n      } else {\n        IOUtils.closeWhileHandlingException(consumer);            \n      }\n    }\n  }\n\n","sourceOld":"  private void mergeDocValues(SegmentWriteState segmentWriteState) throws IOException {\n    DocValuesConsumer consumer = codec.docValuesFormat().fieldsConsumer(segmentWriteState);\n    boolean success = false;\n    try {\n      for (FieldInfo field : mergeState.fieldInfos) {\n        DocValuesType type = field.getDocValuesType();\n        if (type != null) {\n          if (type == DocValuesType.NUMERIC) {\n            List<NumericDocValues> toMerge = new ArrayList<NumericDocValues>();\n            for (AtomicReader reader : mergeState.readers) {\n              NumericDocValues values = reader.getNumericDocValues(field.name);\n              if (values == null) {\n                values = NumericDocValues.EMPTY;\n              }\n              toMerge.add(values);\n            }\n            consumer.mergeNumericField(field, mergeState, toMerge);\n          } else if (type == DocValuesType.BINARY) {\n            List<BinaryDocValues> toMerge = new ArrayList<BinaryDocValues>();\n            for (AtomicReader reader : mergeState.readers) {\n              BinaryDocValues values = reader.getBinaryDocValues(field.name);\n              if (values == null) {\n                values = BinaryDocValues.EMPTY;\n              }\n              toMerge.add(values);\n            }\n            consumer.mergeBinaryField(field, mergeState, toMerge);\n          } else if (type == DocValuesType.SORTED) {\n            List<SortedDocValues> toMerge = new ArrayList<SortedDocValues>();\n            for (AtomicReader reader : mergeState.readers) {\n              SortedDocValues values = reader.getSortedDocValues(field.name);\n              if (values == null) {\n                values = SortedDocValues.EMPTY;\n              }\n              toMerge.add(values);\n            }\n            consumer.mergeSortedField(field, mergeState, toMerge);\n          } else {\n            throw new AssertionError(\"type=\" + type);\n          }\n        }\n      }\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(consumer);\n      } else {\n        IOUtils.closeWhileHandlingException(consumer);            \n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9faa42f41b6adb98daf009cf99a4ee239189e469","date":1376648738,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentMerger#mergeDocValues(SegmentWriteState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentMerger#mergeDocValues(SegmentWriteState).mjava","sourceNew":"  private void mergeDocValues(SegmentWriteState segmentWriteState) throws IOException {\n    DocValuesConsumer consumer = codec.docValuesFormat().fieldsConsumer(segmentWriteState);\n    boolean success = false;\n    try {\n      for (FieldInfo field : mergeState.fieldInfos) {\n        DocValuesType type = field.getDocValuesType();\n        if (type != null) {\n          if (type == DocValuesType.NUMERIC) {\n            List<NumericDocValues> toMerge = new ArrayList<NumericDocValues>();\n            List<Bits> docsWithField = new ArrayList<Bits>();\n            for (AtomicReader reader : mergeState.readers) {\n              NumericDocValues values = reader.getNumericDocValues(field.name);\n              Bits bits = reader.getDocsWithField(field.name);\n              if (values == null) {\n                values = NumericDocValues.EMPTY;\n                bits = new Bits.MatchNoBits(reader.maxDoc());\n              }\n              toMerge.add(values);\n              docsWithField.add(bits);\n            }\n            consumer.mergeNumericField(field, mergeState, toMerge, docsWithField);\n          } else if (type == DocValuesType.BINARY) {\n            List<BinaryDocValues> toMerge = new ArrayList<BinaryDocValues>();\n            List<Bits> docsWithField = new ArrayList<Bits>();\n            for (AtomicReader reader : mergeState.readers) {\n              BinaryDocValues values = reader.getBinaryDocValues(field.name);\n              Bits bits = reader.getDocsWithField(field.name);\n              if (values == null) {\n                values = BinaryDocValues.EMPTY;\n                bits = new Bits.MatchNoBits(reader.maxDoc());\n              }\n              toMerge.add(values);\n              docsWithField.add(bits);\n            }\n            consumer.mergeBinaryField(field, mergeState, toMerge, docsWithField);\n          } else if (type == DocValuesType.SORTED) {\n            List<SortedDocValues> toMerge = new ArrayList<SortedDocValues>();\n            for (AtomicReader reader : mergeState.readers) {\n              SortedDocValues values = reader.getSortedDocValues(field.name);\n              if (values == null) {\n                values = SortedDocValues.EMPTY;\n              }\n              toMerge.add(values);\n            }\n            consumer.mergeSortedField(field, mergeState, toMerge);\n          } else if (type == DocValuesType.SORTED_SET) {\n            List<SortedSetDocValues> toMerge = new ArrayList<SortedSetDocValues>();\n            for (AtomicReader reader : mergeState.readers) {\n              SortedSetDocValues values = reader.getSortedSetDocValues(field.name);\n              if (values == null) {\n                values = SortedSetDocValues.EMPTY;\n              }\n              toMerge.add(values);\n            }\n            consumer.mergeSortedSetField(field, mergeState, toMerge);\n          } else {\n            throw new AssertionError(\"type=\" + type);\n          }\n        }\n      }\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(consumer);\n      } else {\n        IOUtils.closeWhileHandlingException(consumer);            \n      }\n    }\n  }\n\n","sourceOld":"  private void mergeDocValues(SegmentWriteState segmentWriteState) throws IOException {\n    DocValuesConsumer consumer = codec.docValuesFormat().fieldsConsumer(segmentWriteState);\n    boolean success = false;\n    try {\n      for (FieldInfo field : mergeState.fieldInfos) {\n        DocValuesType type = field.getDocValuesType();\n        if (type != null) {\n          if (type == DocValuesType.NUMERIC) {\n            List<NumericDocValues> toMerge = new ArrayList<NumericDocValues>();\n            for (AtomicReader reader : mergeState.readers) {\n              NumericDocValues values = reader.getNumericDocValues(field.name);\n              if (values == null) {\n                values = NumericDocValues.EMPTY;\n              }\n              toMerge.add(values);\n            }\n            consumer.mergeNumericField(field, mergeState, toMerge);\n          } else if (type == DocValuesType.BINARY) {\n            List<BinaryDocValues> toMerge = new ArrayList<BinaryDocValues>();\n            for (AtomicReader reader : mergeState.readers) {\n              BinaryDocValues values = reader.getBinaryDocValues(field.name);\n              if (values == null) {\n                values = BinaryDocValues.EMPTY;\n              }\n              toMerge.add(values);\n            }\n            consumer.mergeBinaryField(field, mergeState, toMerge);\n          } else if (type == DocValuesType.SORTED) {\n            List<SortedDocValues> toMerge = new ArrayList<SortedDocValues>();\n            for (AtomicReader reader : mergeState.readers) {\n              SortedDocValues values = reader.getSortedDocValues(field.name);\n              if (values == null) {\n                values = SortedDocValues.EMPTY;\n              }\n              toMerge.add(values);\n            }\n            consumer.mergeSortedField(field, mergeState, toMerge);\n          } else if (type == DocValuesType.SORTED_SET) {\n            List<SortedSetDocValues> toMerge = new ArrayList<SortedSetDocValues>();\n            for (AtomicReader reader : mergeState.readers) {\n              SortedSetDocValues values = reader.getSortedSetDocValues(field.name);\n              if (values == null) {\n                values = SortedSetDocValues.EMPTY;\n              }\n              toMerge.add(values);\n            }\n            consumer.mergeSortedSetField(field, mergeState, toMerge);\n          } else {\n            throw new AssertionError(\"type=\" + type);\n          }\n        }\n      }\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(consumer);\n      } else {\n        IOUtils.closeWhileHandlingException(consumer);            \n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff","date":1377034255,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentMerger#mergeDocValues(SegmentWriteState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentMerger#mergeDocValues(SegmentWriteState).mjava","sourceNew":"  private void mergeDocValues(SegmentWriteState segmentWriteState) throws IOException {\n    DocValuesConsumer consumer = codec.docValuesFormat().fieldsConsumer(segmentWriteState);\n    boolean success = false;\n    try {\n      for (FieldInfo field : mergeState.fieldInfos) {\n        DocValuesType type = field.getDocValuesType();\n        if (type != null) {\n          if (type == DocValuesType.NUMERIC) {\n            List<NumericDocValues> toMerge = new ArrayList<NumericDocValues>();\n            List<Bits> docsWithField = new ArrayList<Bits>();\n            for (AtomicReader reader : mergeState.readers) {\n              NumericDocValues values = reader.getNumericDocValues(field.name);\n              Bits bits = reader.getDocsWithField(field.name);\n              if (values == null) {\n                values = NumericDocValues.EMPTY;\n                bits = new Bits.MatchNoBits(reader.maxDoc());\n              }\n              toMerge.add(values);\n              docsWithField.add(bits);\n            }\n            consumer.mergeNumericField(field, mergeState, toMerge, docsWithField);\n          } else if (type == DocValuesType.BINARY) {\n            List<BinaryDocValues> toMerge = new ArrayList<BinaryDocValues>();\n            List<Bits> docsWithField = new ArrayList<Bits>();\n            for (AtomicReader reader : mergeState.readers) {\n              BinaryDocValues values = reader.getBinaryDocValues(field.name);\n              Bits bits = reader.getDocsWithField(field.name);\n              if (values == null) {\n                values = BinaryDocValues.EMPTY;\n                bits = new Bits.MatchNoBits(reader.maxDoc());\n              }\n              toMerge.add(values);\n              docsWithField.add(bits);\n            }\n            consumer.mergeBinaryField(field, mergeState, toMerge, docsWithField);\n          } else if (type == DocValuesType.SORTED) {\n            List<SortedDocValues> toMerge = new ArrayList<SortedDocValues>();\n            for (AtomicReader reader : mergeState.readers) {\n              SortedDocValues values = reader.getSortedDocValues(field.name);\n              if (values == null) {\n                values = SortedDocValues.EMPTY;\n              }\n              toMerge.add(values);\n            }\n            consumer.mergeSortedField(field, mergeState, toMerge);\n          } else if (type == DocValuesType.SORTED_SET) {\n            List<SortedSetDocValues> toMerge = new ArrayList<SortedSetDocValues>();\n            for (AtomicReader reader : mergeState.readers) {\n              SortedSetDocValues values = reader.getSortedSetDocValues(field.name);\n              if (values == null) {\n                values = SortedSetDocValues.EMPTY;\n              }\n              toMerge.add(values);\n            }\n            consumer.mergeSortedSetField(field, mergeState, toMerge);\n          } else {\n            throw new AssertionError(\"type=\" + type);\n          }\n        }\n      }\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(consumer);\n      } else {\n        IOUtils.closeWhileHandlingException(consumer);            \n      }\n    }\n  }\n\n","sourceOld":"  private void mergeDocValues(SegmentWriteState segmentWriteState) throws IOException {\n    DocValuesConsumer consumer = codec.docValuesFormat().fieldsConsumer(segmentWriteState);\n    boolean success = false;\n    try {\n      for (FieldInfo field : mergeState.fieldInfos) {\n        DocValuesType type = field.getDocValuesType();\n        if (type != null) {\n          if (type == DocValuesType.NUMERIC) {\n            List<NumericDocValues> toMerge = new ArrayList<NumericDocValues>();\n            for (AtomicReader reader : mergeState.readers) {\n              NumericDocValues values = reader.getNumericDocValues(field.name);\n              if (values == null) {\n                values = NumericDocValues.EMPTY;\n              }\n              toMerge.add(values);\n            }\n            consumer.mergeNumericField(field, mergeState, toMerge);\n          } else if (type == DocValuesType.BINARY) {\n            List<BinaryDocValues> toMerge = new ArrayList<BinaryDocValues>();\n            for (AtomicReader reader : mergeState.readers) {\n              BinaryDocValues values = reader.getBinaryDocValues(field.name);\n              if (values == null) {\n                values = BinaryDocValues.EMPTY;\n              }\n              toMerge.add(values);\n            }\n            consumer.mergeBinaryField(field, mergeState, toMerge);\n          } else if (type == DocValuesType.SORTED) {\n            List<SortedDocValues> toMerge = new ArrayList<SortedDocValues>();\n            for (AtomicReader reader : mergeState.readers) {\n              SortedDocValues values = reader.getSortedDocValues(field.name);\n              if (values == null) {\n                values = SortedDocValues.EMPTY;\n              }\n              toMerge.add(values);\n            }\n            consumer.mergeSortedField(field, mergeState, toMerge);\n          } else if (type == DocValuesType.SORTED_SET) {\n            List<SortedSetDocValues> toMerge = new ArrayList<SortedSetDocValues>();\n            for (AtomicReader reader : mergeState.readers) {\n              SortedSetDocValues values = reader.getSortedSetDocValues(field.name);\n              if (values == null) {\n                values = SortedSetDocValues.EMPTY;\n              }\n              toMerge.add(values);\n            }\n            consumer.mergeSortedSetField(field, mergeState, toMerge);\n          } else {\n            throw new AssertionError(\"type=\" + type);\n          }\n        }\n      }\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(consumer);\n      } else {\n        IOUtils.closeWhileHandlingException(consumer);            \n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3dffec77fb8f7d0e9ca4869dddd6af94528b4576","date":1377875202,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentMerger#mergeDocValues(SegmentWriteState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentMerger#mergeDocValues(SegmentWriteState).mjava","sourceNew":"  private void mergeDocValues(SegmentWriteState segmentWriteState) throws IOException {\n    DocValuesConsumer consumer = codec.docValuesFormat().fieldsConsumer(segmentWriteState);\n    boolean success = false;\n    try {\n      for (FieldInfo field : mergeState.fieldInfos) {\n        DocValuesType type = field.getDocValuesType();\n        if (type != null) {\n          if (type == DocValuesType.NUMERIC) {\n            List<NumericDocValues> toMerge = new ArrayList<NumericDocValues>();\n            List<Bits> docsWithField = new ArrayList<Bits>();\n            for (AtomicReader reader : mergeState.readers) {\n              NumericDocValues values = reader.getNumericDocValues(field.name);\n              Bits bits = reader.getDocsWithField(field.name);\n              if (values == null) {\n                values = NumericDocValues.EMPTY;\n                bits = new Bits.MatchNoBits(reader.maxDoc());\n              }\n              toMerge.add(values);\n              docsWithField.add(bits);\n            }\n            consumer.mergeNumericField(field, mergeState, toMerge, docsWithField);\n          } else if (type == DocValuesType.BINARY) {\n            List<BinaryDocValues> toMerge = new ArrayList<BinaryDocValues>();\n            List<Bits> docsWithField = new ArrayList<Bits>();\n            for (AtomicReader reader : mergeState.readers) {\n              BinaryDocValues values = reader.getBinaryDocValues(field.name);\n              Bits bits = reader.getDocsWithField(field.name);\n              if (values == null) {\n                values = BinaryDocValues.EMPTY;\n                bits = new Bits.MatchNoBits(reader.maxDoc());\n              }\n              toMerge.add(values);\n              docsWithField.add(bits);\n            }\n            consumer.mergeBinaryField(field, mergeState, toMerge, docsWithField);\n          } else if (type == DocValuesType.SORTED) {\n            List<SortedDocValues> toMerge = new ArrayList<SortedDocValues>();\n            for (AtomicReader reader : mergeState.readers) {\n              SortedDocValues values = reader.getSortedDocValues(field.name);\n              if (values == null) {\n                values = SortedDocValues.EMPTY;\n              }\n              toMerge.add(values);\n            }\n            consumer.mergeSortedField(field, mergeState, toMerge);\n          } else if (type == DocValuesType.SORTED_SET) {\n            List<SortedSetDocValues> toMerge = new ArrayList<SortedSetDocValues>();\n            for (AtomicReader reader : mergeState.readers) {\n              SortedSetDocValues values = reader.getSortedSetDocValues(field.name);\n              if (values == null) {\n                values = SortedSetDocValues.EMPTY;\n              }\n              toMerge.add(values);\n            }\n            consumer.mergeSortedSetField(field, mergeState, toMerge);\n          } else {\n            throw new AssertionError(\"type=\" + type);\n          }\n        }\n      }\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(consumer);\n      } else {\n        IOUtils.closeWhileHandlingException(consumer);            \n      }\n    }\n  }\n\n","sourceOld":"  private void mergeDocValues(SegmentWriteState segmentWriteState) throws IOException {\n    DocValuesConsumer consumer = codec.docValuesFormat().fieldsConsumer(segmentWriteState);\n    boolean success = false;\n    try {\n      for (FieldInfo field : mergeState.fieldInfos) {\n        DocValuesType type = field.getDocValuesType();\n        if (type != null) {\n          if (type == DocValuesType.NUMERIC) {\n            List<NumericDocValues> toMerge = new ArrayList<NumericDocValues>();\n            for (AtomicReader reader : mergeState.readers) {\n              NumericDocValues values = reader.getNumericDocValues(field.name);\n              if (values == null) {\n                values = NumericDocValues.EMPTY;\n              }\n              toMerge.add(values);\n            }\n            consumer.mergeNumericField(field, mergeState, toMerge);\n          } else if (type == DocValuesType.BINARY) {\n            List<BinaryDocValues> toMerge = new ArrayList<BinaryDocValues>();\n            for (AtomicReader reader : mergeState.readers) {\n              BinaryDocValues values = reader.getBinaryDocValues(field.name);\n              if (values == null) {\n                values = BinaryDocValues.EMPTY;\n              }\n              toMerge.add(values);\n            }\n            consumer.mergeBinaryField(field, mergeState, toMerge);\n          } else if (type == DocValuesType.SORTED) {\n            List<SortedDocValues> toMerge = new ArrayList<SortedDocValues>();\n            for (AtomicReader reader : mergeState.readers) {\n              SortedDocValues values = reader.getSortedDocValues(field.name);\n              if (values == null) {\n                values = SortedDocValues.EMPTY;\n              }\n              toMerge.add(values);\n            }\n            consumer.mergeSortedField(field, mergeState, toMerge);\n          } else if (type == DocValuesType.SORTED_SET) {\n            List<SortedSetDocValues> toMerge = new ArrayList<SortedSetDocValues>();\n            for (AtomicReader reader : mergeState.readers) {\n              SortedSetDocValues values = reader.getSortedSetDocValues(field.name);\n              if (values == null) {\n                values = SortedSetDocValues.EMPTY;\n              }\n              toMerge.add(values);\n            }\n            consumer.mergeSortedSetField(field, mergeState, toMerge);\n          } else {\n            throw new AssertionError(\"type=\" + type);\n          }\n        }\n      }\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(consumer);\n      } else {\n        IOUtils.closeWhileHandlingException(consumer);            \n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentMerger#mergeDocValues(SegmentWriteState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentMerger#mergeDocValues(SegmentWriteState).mjava","sourceNew":"  private void mergeDocValues(SegmentWriteState segmentWriteState) throws IOException {\n    DocValuesConsumer consumer = codec.docValuesFormat().fieldsConsumer(segmentWriteState);\n    boolean success = false;\n    try {\n      for (FieldInfo field : mergeState.fieldInfos) {\n        DocValuesType type = field.getDocValuesType();\n        if (type != null) {\n          if (type == DocValuesType.NUMERIC) {\n            List<NumericDocValues> toMerge = new ArrayList<>();\n            List<Bits> docsWithField = new ArrayList<>();\n            for (AtomicReader reader : mergeState.readers) {\n              NumericDocValues values = reader.getNumericDocValues(field.name);\n              Bits bits = reader.getDocsWithField(field.name);\n              if (values == null) {\n                values = NumericDocValues.EMPTY;\n                bits = new Bits.MatchNoBits(reader.maxDoc());\n              }\n              toMerge.add(values);\n              docsWithField.add(bits);\n            }\n            consumer.mergeNumericField(field, mergeState, toMerge, docsWithField);\n          } else if (type == DocValuesType.BINARY) {\n            List<BinaryDocValues> toMerge = new ArrayList<>();\n            List<Bits> docsWithField = new ArrayList<>();\n            for (AtomicReader reader : mergeState.readers) {\n              BinaryDocValues values = reader.getBinaryDocValues(field.name);\n              Bits bits = reader.getDocsWithField(field.name);\n              if (values == null) {\n                values = BinaryDocValues.EMPTY;\n                bits = new Bits.MatchNoBits(reader.maxDoc());\n              }\n              toMerge.add(values);\n              docsWithField.add(bits);\n            }\n            consumer.mergeBinaryField(field, mergeState, toMerge, docsWithField);\n          } else if (type == DocValuesType.SORTED) {\n            List<SortedDocValues> toMerge = new ArrayList<>();\n            for (AtomicReader reader : mergeState.readers) {\n              SortedDocValues values = reader.getSortedDocValues(field.name);\n              if (values == null) {\n                values = SortedDocValues.EMPTY;\n              }\n              toMerge.add(values);\n            }\n            consumer.mergeSortedField(field, mergeState, toMerge);\n          } else if (type == DocValuesType.SORTED_SET) {\n            List<SortedSetDocValues> toMerge = new ArrayList<>();\n            for (AtomicReader reader : mergeState.readers) {\n              SortedSetDocValues values = reader.getSortedSetDocValues(field.name);\n              if (values == null) {\n                values = SortedSetDocValues.EMPTY;\n              }\n              toMerge.add(values);\n            }\n            consumer.mergeSortedSetField(field, mergeState, toMerge);\n          } else {\n            throw new AssertionError(\"type=\" + type);\n          }\n        }\n      }\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(consumer);\n      } else {\n        IOUtils.closeWhileHandlingException(consumer);            \n      }\n    }\n  }\n\n","sourceOld":"  private void mergeDocValues(SegmentWriteState segmentWriteState) throws IOException {\n    DocValuesConsumer consumer = codec.docValuesFormat().fieldsConsumer(segmentWriteState);\n    boolean success = false;\n    try {\n      for (FieldInfo field : mergeState.fieldInfos) {\n        DocValuesType type = field.getDocValuesType();\n        if (type != null) {\n          if (type == DocValuesType.NUMERIC) {\n            List<NumericDocValues> toMerge = new ArrayList<NumericDocValues>();\n            List<Bits> docsWithField = new ArrayList<Bits>();\n            for (AtomicReader reader : mergeState.readers) {\n              NumericDocValues values = reader.getNumericDocValues(field.name);\n              Bits bits = reader.getDocsWithField(field.name);\n              if (values == null) {\n                values = NumericDocValues.EMPTY;\n                bits = new Bits.MatchNoBits(reader.maxDoc());\n              }\n              toMerge.add(values);\n              docsWithField.add(bits);\n            }\n            consumer.mergeNumericField(field, mergeState, toMerge, docsWithField);\n          } else if (type == DocValuesType.BINARY) {\n            List<BinaryDocValues> toMerge = new ArrayList<BinaryDocValues>();\n            List<Bits> docsWithField = new ArrayList<Bits>();\n            for (AtomicReader reader : mergeState.readers) {\n              BinaryDocValues values = reader.getBinaryDocValues(field.name);\n              Bits bits = reader.getDocsWithField(field.name);\n              if (values == null) {\n                values = BinaryDocValues.EMPTY;\n                bits = new Bits.MatchNoBits(reader.maxDoc());\n              }\n              toMerge.add(values);\n              docsWithField.add(bits);\n            }\n            consumer.mergeBinaryField(field, mergeState, toMerge, docsWithField);\n          } else if (type == DocValuesType.SORTED) {\n            List<SortedDocValues> toMerge = new ArrayList<SortedDocValues>();\n            for (AtomicReader reader : mergeState.readers) {\n              SortedDocValues values = reader.getSortedDocValues(field.name);\n              if (values == null) {\n                values = SortedDocValues.EMPTY;\n              }\n              toMerge.add(values);\n            }\n            consumer.mergeSortedField(field, mergeState, toMerge);\n          } else if (type == DocValuesType.SORTED_SET) {\n            List<SortedSetDocValues> toMerge = new ArrayList<SortedSetDocValues>();\n            for (AtomicReader reader : mergeState.readers) {\n              SortedSetDocValues values = reader.getSortedSetDocValues(field.name);\n              if (values == null) {\n                values = SortedSetDocValues.EMPTY;\n              }\n              toMerge.add(values);\n            }\n            consumer.mergeSortedSetField(field, mergeState, toMerge);\n          } else {\n            throw new AssertionError(\"type=\" + type);\n          }\n        }\n      }\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(consumer);\n      } else {\n        IOUtils.closeWhileHandlingException(consumer);            \n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8429ddf2214f2bf8abcbb5484fefef6aaf5c417e","date":1397206443,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentMerger#mergeDocValues(SegmentWriteState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentMerger#mergeDocValues(SegmentWriteState).mjava","sourceNew":"  private void mergeDocValues(SegmentWriteState segmentWriteState) throws IOException {\n    DocValuesConsumer consumer = codec.docValuesFormat().fieldsConsumer(segmentWriteState);\n    boolean success = false;\n    try {\n      for (FieldInfo field : mergeState.fieldInfos) {\n        DocValuesType type = field.getDocValuesType();\n        if (type != null) {\n          if (type == DocValuesType.NUMERIC) {\n            List<NumericDocValues> toMerge = new ArrayList<>();\n            List<Bits> docsWithField = new ArrayList<>();\n            for (AtomicReader reader : mergeState.readers) {\n              NumericDocValues values = reader.getNumericDocValues(field.name);\n              Bits bits = reader.getDocsWithField(field.name);\n              if (values == null) {\n                values = DocValues.EMPTY_NUMERIC;\n                bits = new Bits.MatchNoBits(reader.maxDoc());\n              }\n              toMerge.add(values);\n              docsWithField.add(bits);\n            }\n            consumer.mergeNumericField(field, mergeState, toMerge, docsWithField);\n          } else if (type == DocValuesType.BINARY) {\n            List<BinaryDocValues> toMerge = new ArrayList<>();\n            List<Bits> docsWithField = new ArrayList<>();\n            for (AtomicReader reader : mergeState.readers) {\n              BinaryDocValues values = reader.getBinaryDocValues(field.name);\n              Bits bits = reader.getDocsWithField(field.name);\n              if (values == null) {\n                values = DocValues.EMPTY_BINARY;\n                bits = new Bits.MatchNoBits(reader.maxDoc());\n              }\n              toMerge.add(values);\n              docsWithField.add(bits);\n            }\n            consumer.mergeBinaryField(field, mergeState, toMerge, docsWithField);\n          } else if (type == DocValuesType.SORTED) {\n            List<SortedDocValues> toMerge = new ArrayList<>();\n            for (AtomicReader reader : mergeState.readers) {\n              SortedDocValues values = reader.getSortedDocValues(field.name);\n              if (values == null) {\n                values = DocValues.EMPTY_SORTED;\n              }\n              toMerge.add(values);\n            }\n            consumer.mergeSortedField(field, mergeState, toMerge);\n          } else if (type == DocValuesType.SORTED_SET) {\n            List<SortedSetDocValues> toMerge = new ArrayList<>();\n            for (AtomicReader reader : mergeState.readers) {\n              SortedSetDocValues values = reader.getSortedSetDocValues(field.name);\n              if (values == null) {\n                values = DocValues.EMPTY_SORTED_SET;\n              }\n              toMerge.add(values);\n            }\n            consumer.mergeSortedSetField(field, mergeState, toMerge);\n          } else {\n            throw new AssertionError(\"type=\" + type);\n          }\n        }\n      }\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(consumer);\n      } else {\n        IOUtils.closeWhileHandlingException(consumer);            \n      }\n    }\n  }\n\n","sourceOld":"  private void mergeDocValues(SegmentWriteState segmentWriteState) throws IOException {\n    DocValuesConsumer consumer = codec.docValuesFormat().fieldsConsumer(segmentWriteState);\n    boolean success = false;\n    try {\n      for (FieldInfo field : mergeState.fieldInfos) {\n        DocValuesType type = field.getDocValuesType();\n        if (type != null) {\n          if (type == DocValuesType.NUMERIC) {\n            List<NumericDocValues> toMerge = new ArrayList<>();\n            List<Bits> docsWithField = new ArrayList<>();\n            for (AtomicReader reader : mergeState.readers) {\n              NumericDocValues values = reader.getNumericDocValues(field.name);\n              Bits bits = reader.getDocsWithField(field.name);\n              if (values == null) {\n                values = NumericDocValues.EMPTY;\n                bits = new Bits.MatchNoBits(reader.maxDoc());\n              }\n              toMerge.add(values);\n              docsWithField.add(bits);\n            }\n            consumer.mergeNumericField(field, mergeState, toMerge, docsWithField);\n          } else if (type == DocValuesType.BINARY) {\n            List<BinaryDocValues> toMerge = new ArrayList<>();\n            List<Bits> docsWithField = new ArrayList<>();\n            for (AtomicReader reader : mergeState.readers) {\n              BinaryDocValues values = reader.getBinaryDocValues(field.name);\n              Bits bits = reader.getDocsWithField(field.name);\n              if (values == null) {\n                values = BinaryDocValues.EMPTY;\n                bits = new Bits.MatchNoBits(reader.maxDoc());\n              }\n              toMerge.add(values);\n              docsWithField.add(bits);\n            }\n            consumer.mergeBinaryField(field, mergeState, toMerge, docsWithField);\n          } else if (type == DocValuesType.SORTED) {\n            List<SortedDocValues> toMerge = new ArrayList<>();\n            for (AtomicReader reader : mergeState.readers) {\n              SortedDocValues values = reader.getSortedDocValues(field.name);\n              if (values == null) {\n                values = SortedDocValues.EMPTY;\n              }\n              toMerge.add(values);\n            }\n            consumer.mergeSortedField(field, mergeState, toMerge);\n          } else if (type == DocValuesType.SORTED_SET) {\n            List<SortedSetDocValues> toMerge = new ArrayList<>();\n            for (AtomicReader reader : mergeState.readers) {\n              SortedSetDocValues values = reader.getSortedSetDocValues(field.name);\n              if (values == null) {\n                values = SortedSetDocValues.EMPTY;\n              }\n              toMerge.add(values);\n            }\n            consumer.mergeSortedSetField(field, mergeState, toMerge);\n          } else {\n            throw new AssertionError(\"type=\" + type);\n          }\n        }\n      }\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(consumer);\n      } else {\n        IOUtils.closeWhileHandlingException(consumer);            \n      }\n    }\n  }\n\n","bugFix":["3bed77c10dee249829e09c7de0432fedda3b23bb","dbff44e659c8599e09913b321ce89b65763b68d8"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf","date":1401983689,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentMerger#mergeDocValues(SegmentWriteState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentMerger#mergeDocValues(SegmentWriteState).mjava","sourceNew":"  private void mergeDocValues(SegmentWriteState segmentWriteState) throws IOException {\n    DocValuesConsumer consumer = codec.docValuesFormat().fieldsConsumer(segmentWriteState);\n    boolean success = false;\n    try {\n      for (FieldInfo field : mergeState.fieldInfos) {\n        DocValuesType type = field.getDocValuesType();\n        if (type != null) {\n          if (type == DocValuesType.NUMERIC) {\n            List<NumericDocValues> toMerge = new ArrayList<>();\n            List<Bits> docsWithField = new ArrayList<>();\n            for (AtomicReader reader : mergeState.readers) {\n              NumericDocValues values = reader.getNumericDocValues(field.name);\n              Bits bits = reader.getDocsWithField(field.name);\n              if (values == null) {\n                values = DocValues.emptyNumeric();\n                bits = new Bits.MatchNoBits(reader.maxDoc());\n              }\n              toMerge.add(values);\n              docsWithField.add(bits);\n            }\n            consumer.mergeNumericField(field, mergeState, toMerge, docsWithField);\n          } else if (type == DocValuesType.BINARY) {\n            List<BinaryDocValues> toMerge = new ArrayList<>();\n            List<Bits> docsWithField = new ArrayList<>();\n            for (AtomicReader reader : mergeState.readers) {\n              BinaryDocValues values = reader.getBinaryDocValues(field.name);\n              Bits bits = reader.getDocsWithField(field.name);\n              if (values == null) {\n                values = DocValues.emptyBinary();\n                bits = new Bits.MatchNoBits(reader.maxDoc());\n              }\n              toMerge.add(values);\n              docsWithField.add(bits);\n            }\n            consumer.mergeBinaryField(field, mergeState, toMerge, docsWithField);\n          } else if (type == DocValuesType.SORTED) {\n            List<SortedDocValues> toMerge = new ArrayList<>();\n            for (AtomicReader reader : mergeState.readers) {\n              SortedDocValues values = reader.getSortedDocValues(field.name);\n              if (values == null) {\n                values = DocValues.emptySorted();\n              }\n              toMerge.add(values);\n            }\n            consumer.mergeSortedField(field, mergeState, toMerge);\n          } else if (type == DocValuesType.SORTED_SET) {\n            List<SortedSetDocValues> toMerge = new ArrayList<>();\n            for (AtomicReader reader : mergeState.readers) {\n              SortedSetDocValues values = reader.getSortedSetDocValues(field.name);\n              if (values == null) {\n                values = DocValues.emptySortedSet();\n              }\n              toMerge.add(values);\n            }\n            consumer.mergeSortedSetField(field, mergeState, toMerge);\n          } else {\n            throw new AssertionError(\"type=\" + type);\n          }\n        }\n      }\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(consumer);\n      } else {\n        IOUtils.closeWhileHandlingException(consumer);            \n      }\n    }\n  }\n\n","sourceOld":"  private void mergeDocValues(SegmentWriteState segmentWriteState) throws IOException {\n    DocValuesConsumer consumer = codec.docValuesFormat().fieldsConsumer(segmentWriteState);\n    boolean success = false;\n    try {\n      for (FieldInfo field : mergeState.fieldInfos) {\n        DocValuesType type = field.getDocValuesType();\n        if (type != null) {\n          if (type == DocValuesType.NUMERIC) {\n            List<NumericDocValues> toMerge = new ArrayList<>();\n            List<Bits> docsWithField = new ArrayList<>();\n            for (AtomicReader reader : mergeState.readers) {\n              NumericDocValues values = reader.getNumericDocValues(field.name);\n              Bits bits = reader.getDocsWithField(field.name);\n              if (values == null) {\n                values = DocValues.EMPTY_NUMERIC;\n                bits = new Bits.MatchNoBits(reader.maxDoc());\n              }\n              toMerge.add(values);\n              docsWithField.add(bits);\n            }\n            consumer.mergeNumericField(field, mergeState, toMerge, docsWithField);\n          } else if (type == DocValuesType.BINARY) {\n            List<BinaryDocValues> toMerge = new ArrayList<>();\n            List<Bits> docsWithField = new ArrayList<>();\n            for (AtomicReader reader : mergeState.readers) {\n              BinaryDocValues values = reader.getBinaryDocValues(field.name);\n              Bits bits = reader.getDocsWithField(field.name);\n              if (values == null) {\n                values = DocValues.EMPTY_BINARY;\n                bits = new Bits.MatchNoBits(reader.maxDoc());\n              }\n              toMerge.add(values);\n              docsWithField.add(bits);\n            }\n            consumer.mergeBinaryField(field, mergeState, toMerge, docsWithField);\n          } else if (type == DocValuesType.SORTED) {\n            List<SortedDocValues> toMerge = new ArrayList<>();\n            for (AtomicReader reader : mergeState.readers) {\n              SortedDocValues values = reader.getSortedDocValues(field.name);\n              if (values == null) {\n                values = DocValues.EMPTY_SORTED;\n              }\n              toMerge.add(values);\n            }\n            consumer.mergeSortedField(field, mergeState, toMerge);\n          } else if (type == DocValuesType.SORTED_SET) {\n            List<SortedSetDocValues> toMerge = new ArrayList<>();\n            for (AtomicReader reader : mergeState.readers) {\n              SortedSetDocValues values = reader.getSortedSetDocValues(field.name);\n              if (values == null) {\n                values = DocValues.EMPTY_SORTED_SET;\n              }\n              toMerge.add(values);\n            }\n            consumer.mergeSortedSetField(field, mergeState, toMerge);\n          } else {\n            throw new AssertionError(\"type=\" + type);\n          }\n        }\n      }\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(consumer);\n      } else {\n        IOUtils.closeWhileHandlingException(consumer);            \n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d14ffaac9c4a4a2c750bf0cd956506802561e062","date":1402602036,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentMerger#mergeDocValues(SegmentWriteState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentMerger#mergeDocValues(SegmentWriteState).mjava","sourceNew":"  private void mergeDocValues(SegmentWriteState segmentWriteState) throws IOException {\n    DocValuesConsumer consumer = codec.docValuesFormat().fieldsConsumer(segmentWriteState);\n    boolean success = false;\n    try {\n      for (FieldInfo field : mergeState.fieldInfos) {\n        DocValuesType type = field.getDocValuesType();\n        if (type != null) {\n          if (type == DocValuesType.NUMERIC) {\n            List<NumericDocValues> toMerge = new ArrayList<>();\n            List<Bits> docsWithField = new ArrayList<>();\n            for (AtomicReader reader : mergeState.readers) {\n              NumericDocValues values = reader.getNumericDocValues(field.name);\n              Bits bits = reader.getDocsWithField(field.name);\n              if (values == null) {\n                values = DocValues.emptyNumeric();\n                bits = new Bits.MatchNoBits(reader.maxDoc());\n              }\n              toMerge.add(values);\n              docsWithField.add(bits);\n            }\n            consumer.mergeNumericField(field, mergeState, toMerge, docsWithField);\n          } else if (type == DocValuesType.BINARY) {\n            List<BinaryDocValues> toMerge = new ArrayList<>();\n            List<Bits> docsWithField = new ArrayList<>();\n            for (AtomicReader reader : mergeState.readers) {\n              BinaryDocValues values = reader.getBinaryDocValues(field.name);\n              Bits bits = reader.getDocsWithField(field.name);\n              if (values == null) {\n                values = DocValues.emptyBinary();\n                bits = new Bits.MatchNoBits(reader.maxDoc());\n              }\n              toMerge.add(values);\n              docsWithField.add(bits);\n            }\n            consumer.mergeBinaryField(field, mergeState, toMerge, docsWithField);\n          } else if (type == DocValuesType.SORTED) {\n            List<SortedDocValues> toMerge = new ArrayList<>();\n            for (AtomicReader reader : mergeState.readers) {\n              SortedDocValues values = reader.getSortedDocValues(field.name);\n              if (values == null) {\n                values = DocValues.emptySorted();\n              }\n              toMerge.add(values);\n            }\n            consumer.mergeSortedField(field, mergeState, toMerge);\n          } else if (type == DocValuesType.SORTED_SET) {\n            List<SortedSetDocValues> toMerge = new ArrayList<>();\n            for (AtomicReader reader : mergeState.readers) {\n              SortedSetDocValues values = reader.getSortedSetDocValues(field.name);\n              if (values == null) {\n                values = DocValues.emptySortedSet();\n              }\n              toMerge.add(values);\n            }\n            consumer.mergeSortedSetField(field, mergeState, toMerge);\n          } else if (type == DocValuesType.SORTED_NUMERIC) {\n            List<SortedNumericDocValues> toMerge = new ArrayList<>();\n            for (AtomicReader reader : mergeState.readers) {\n              SortedNumericDocValues values = reader.getSortedNumericDocValues(field.name);\n              if (values == null) {\n                values = DocValues.emptySortedNumeric();\n              }\n              toMerge.add(values);\n            }\n            consumer.mergeSortedNumericField(field, mergeState, toMerge);\n          } else {\n            throw new AssertionError(\"type=\" + type);\n          }\n        }\n      }\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(consumer);\n      } else {\n        IOUtils.closeWhileHandlingException(consumer);            \n      }\n    }\n  }\n\n","sourceOld":"  private void mergeDocValues(SegmentWriteState segmentWriteState) throws IOException {\n    DocValuesConsumer consumer = codec.docValuesFormat().fieldsConsumer(segmentWriteState);\n    boolean success = false;\n    try {\n      for (FieldInfo field : mergeState.fieldInfos) {\n        DocValuesType type = field.getDocValuesType();\n        if (type != null) {\n          if (type == DocValuesType.NUMERIC) {\n            List<NumericDocValues> toMerge = new ArrayList<>();\n            List<Bits> docsWithField = new ArrayList<>();\n            for (AtomicReader reader : mergeState.readers) {\n              NumericDocValues values = reader.getNumericDocValues(field.name);\n              Bits bits = reader.getDocsWithField(field.name);\n              if (values == null) {\n                values = DocValues.emptyNumeric();\n                bits = new Bits.MatchNoBits(reader.maxDoc());\n              }\n              toMerge.add(values);\n              docsWithField.add(bits);\n            }\n            consumer.mergeNumericField(field, mergeState, toMerge, docsWithField);\n          } else if (type == DocValuesType.BINARY) {\n            List<BinaryDocValues> toMerge = new ArrayList<>();\n            List<Bits> docsWithField = new ArrayList<>();\n            for (AtomicReader reader : mergeState.readers) {\n              BinaryDocValues values = reader.getBinaryDocValues(field.name);\n              Bits bits = reader.getDocsWithField(field.name);\n              if (values == null) {\n                values = DocValues.emptyBinary();\n                bits = new Bits.MatchNoBits(reader.maxDoc());\n              }\n              toMerge.add(values);\n              docsWithField.add(bits);\n            }\n            consumer.mergeBinaryField(field, mergeState, toMerge, docsWithField);\n          } else if (type == DocValuesType.SORTED) {\n            List<SortedDocValues> toMerge = new ArrayList<>();\n            for (AtomicReader reader : mergeState.readers) {\n              SortedDocValues values = reader.getSortedDocValues(field.name);\n              if (values == null) {\n                values = DocValues.emptySorted();\n              }\n              toMerge.add(values);\n            }\n            consumer.mergeSortedField(field, mergeState, toMerge);\n          } else if (type == DocValuesType.SORTED_SET) {\n            List<SortedSetDocValues> toMerge = new ArrayList<>();\n            for (AtomicReader reader : mergeState.readers) {\n              SortedSetDocValues values = reader.getSortedSetDocValues(field.name);\n              if (values == null) {\n                values = DocValues.emptySortedSet();\n              }\n              toMerge.add(values);\n            }\n            consumer.mergeSortedSetField(field, mergeState, toMerge);\n          } else {\n            throw new AssertionError(\"type=\" + type);\n          }\n        }\n      }\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(consumer);\n      } else {\n        IOUtils.closeWhileHandlingException(consumer);            \n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c6f080a2ab37c464dd98db173f6cbf10dc74f211","date":1402946779,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentMerger#mergeDocValues(SegmentWriteState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentMerger#mergeDocValues(SegmentWriteState).mjava","sourceNew":"  private void mergeDocValues(SegmentWriteState segmentWriteState) throws IOException {\n    DocValuesConsumer consumer = codec.docValuesFormat().fieldsConsumer(segmentWriteState);\n    boolean success = false;\n    try {\n      for (FieldInfo field : mergeState.fieldInfos) {\n        DocValuesType type = field.getDocValuesType();\n        if (type != null) {\n          if (type == DocValuesType.NUMERIC) {\n            List<NumericDocValues> toMerge = new ArrayList<>();\n            List<Bits> docsWithField = new ArrayList<>();\n            for (AtomicReader reader : mergeState.readers) {\n              NumericDocValues values = reader.getNumericDocValues(field.name);\n              Bits bits = reader.getDocsWithField(field.name);\n              if (values == null) {\n                values = DocValues.emptyNumeric();\n                bits = new Bits.MatchNoBits(reader.maxDoc());\n              }\n              toMerge.add(values);\n              docsWithField.add(bits);\n            }\n            consumer.mergeNumericField(field, mergeState, toMerge, docsWithField);\n          } else if (type == DocValuesType.BINARY) {\n            List<BinaryDocValues> toMerge = new ArrayList<>();\n            List<Bits> docsWithField = new ArrayList<>();\n            for (AtomicReader reader : mergeState.readers) {\n              BinaryDocValues values = reader.getBinaryDocValues(field.name);\n              Bits bits = reader.getDocsWithField(field.name);\n              if (values == null) {\n                values = DocValues.emptyBinary();\n                bits = new Bits.MatchNoBits(reader.maxDoc());\n              }\n              toMerge.add(values);\n              docsWithField.add(bits);\n            }\n            consumer.mergeBinaryField(field, mergeState, toMerge, docsWithField);\n          } else if (type == DocValuesType.SORTED) {\n            List<SortedDocValues> toMerge = new ArrayList<>();\n            for (AtomicReader reader : mergeState.readers) {\n              SortedDocValues values = reader.getSortedDocValues(field.name);\n              if (values == null) {\n                values = DocValues.emptySorted();\n              }\n              toMerge.add(values);\n            }\n            consumer.mergeSortedField(field, mergeState, toMerge);\n          } else if (type == DocValuesType.SORTED_SET) {\n            List<SortedSetDocValues> toMerge = new ArrayList<>();\n            for (AtomicReader reader : mergeState.readers) {\n              SortedSetDocValues values = reader.getSortedSetDocValues(field.name);\n              if (values == null) {\n                values = DocValues.emptySortedSet();\n              }\n              toMerge.add(values);\n            }\n            consumer.mergeSortedSetField(field, mergeState, toMerge);\n          } else if (type == DocValuesType.SORTED_NUMERIC) {\n            List<SortedNumericDocValues> toMerge = new ArrayList<>();\n            for (AtomicReader reader : mergeState.readers) {\n              SortedNumericDocValues values = reader.getSortedNumericDocValues(field.name);\n              if (values == null) {\n                values = DocValues.emptySortedNumeric();\n              }\n              toMerge.add(values);\n            }\n            consumer.mergeSortedNumericField(field, mergeState, toMerge);\n          } else {\n            throw new AssertionError(\"type=\" + type);\n          }\n        }\n      }\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(consumer);\n      } else {\n        IOUtils.closeWhileHandlingException(consumer);            \n      }\n    }\n  }\n\n","sourceOld":"  private void mergeDocValues(SegmentWriteState segmentWriteState) throws IOException {\n    DocValuesConsumer consumer = codec.docValuesFormat().fieldsConsumer(segmentWriteState);\n    boolean success = false;\n    try {\n      for (FieldInfo field : mergeState.fieldInfos) {\n        DocValuesType type = field.getDocValuesType();\n        if (type != null) {\n          if (type == DocValuesType.NUMERIC) {\n            List<NumericDocValues> toMerge = new ArrayList<>();\n            List<Bits> docsWithField = new ArrayList<>();\n            for (AtomicReader reader : mergeState.readers) {\n              NumericDocValues values = reader.getNumericDocValues(field.name);\n              Bits bits = reader.getDocsWithField(field.name);\n              if (values == null) {\n                values = DocValues.emptyNumeric();\n                bits = new Bits.MatchNoBits(reader.maxDoc());\n              }\n              toMerge.add(values);\n              docsWithField.add(bits);\n            }\n            consumer.mergeNumericField(field, mergeState, toMerge, docsWithField);\n          } else if (type == DocValuesType.BINARY) {\n            List<BinaryDocValues> toMerge = new ArrayList<>();\n            List<Bits> docsWithField = new ArrayList<>();\n            for (AtomicReader reader : mergeState.readers) {\n              BinaryDocValues values = reader.getBinaryDocValues(field.name);\n              Bits bits = reader.getDocsWithField(field.name);\n              if (values == null) {\n                values = DocValues.emptyBinary();\n                bits = new Bits.MatchNoBits(reader.maxDoc());\n              }\n              toMerge.add(values);\n              docsWithField.add(bits);\n            }\n            consumer.mergeBinaryField(field, mergeState, toMerge, docsWithField);\n          } else if (type == DocValuesType.SORTED) {\n            List<SortedDocValues> toMerge = new ArrayList<>();\n            for (AtomicReader reader : mergeState.readers) {\n              SortedDocValues values = reader.getSortedDocValues(field.name);\n              if (values == null) {\n                values = DocValues.emptySorted();\n              }\n              toMerge.add(values);\n            }\n            consumer.mergeSortedField(field, mergeState, toMerge);\n          } else if (type == DocValuesType.SORTED_SET) {\n            List<SortedSetDocValues> toMerge = new ArrayList<>();\n            for (AtomicReader reader : mergeState.readers) {\n              SortedSetDocValues values = reader.getSortedSetDocValues(field.name);\n              if (values == null) {\n                values = DocValues.emptySortedSet();\n              }\n              toMerge.add(values);\n            }\n            consumer.mergeSortedSetField(field, mergeState, toMerge);\n          } else {\n            throw new AssertionError(\"type=\" + type);\n          }\n        }\n      }\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(consumer);\n      } else {\n        IOUtils.closeWhileHandlingException(consumer);            \n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8fa087bc3b5a2da0de8a912f76ae4ba02cff39ed","date":1405942258,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentMerger#mergeDocValues(SegmentWriteState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentMerger#mergeDocValues(SegmentWriteState).mjava","sourceNew":"  private void mergeDocValues(SegmentWriteState segmentWriteState) throws IOException {\n    DocValuesConsumer consumer = codec.docValuesFormat().fieldsConsumer(segmentWriteState);\n    boolean success = false;\n    try {\n      for (FieldInfo field : mergeState.fieldInfos) {\n        DocValuesType type = field.getDocValuesType();\n        if (type != null) {\n          if (type == DocValuesType.NUMERIC) {\n            List<NumericDocValues> toMerge = new ArrayList<>();\n            List<Bits> docsWithField = new ArrayList<>();\n            for (AtomicReader reader : mergeState.readers) {\n              NumericDocValues values = reader.getNumericDocValues(field.name);\n              Bits bits = reader.getDocsWithField(field.name);\n              if (values == null) {\n                values = DocValues.emptyNumeric();\n                bits = new Bits.MatchNoBits(reader.maxDoc());\n              }\n              toMerge.add(values);\n              docsWithField.add(bits);\n            }\n            consumer.mergeNumericField(field, mergeState, toMerge, docsWithField);\n          } else if (type == DocValuesType.BINARY) {\n            List<BinaryDocValues> toMerge = new ArrayList<>();\n            List<Bits> docsWithField = new ArrayList<>();\n            for (AtomicReader reader : mergeState.readers) {\n              BinaryDocValues values = reader.getBinaryDocValues(field.name);\n              Bits bits = reader.getDocsWithField(field.name);\n              if (values == null) {\n                values = DocValues.emptyBinary();\n                bits = new Bits.MatchNoBits(reader.maxDoc());\n              }\n              toMerge.add(values);\n              docsWithField.add(bits);\n            }\n            consumer.mergeBinaryField(field, mergeState, toMerge, docsWithField);\n          } else if (type == DocValuesType.SORTED) {\n            List<SortedDocValues> toMerge = new ArrayList<>();\n            for (AtomicReader reader : mergeState.readers) {\n              SortedDocValues values = reader.getSortedDocValues(field.name);\n              if (values == null) {\n                values = DocValues.emptySorted();\n              }\n              toMerge.add(values);\n            }\n            consumer.mergeSortedField(field, mergeState, toMerge);\n          } else if (type == DocValuesType.SORTED_SET) {\n            List<SortedSetDocValues> toMerge = new ArrayList<>();\n            for (AtomicReader reader : mergeState.readers) {\n              SortedSetDocValues values = reader.getSortedSetDocValues(field.name);\n              if (values == null) {\n                values = DocValues.emptySortedSet();\n              }\n              toMerge.add(values);\n            }\n            consumer.mergeSortedSetField(field, mergeState, toMerge);\n          } else if (type == DocValuesType.SORTED_NUMERIC) {\n            List<SortedNumericDocValues> toMerge = new ArrayList<>();\n            for (AtomicReader reader : mergeState.readers) {\n              SortedNumericDocValues values = reader.getSortedNumericDocValues(field.name);\n              if (values == null) {\n                values = DocValues.emptySortedNumeric(reader.maxDoc());\n              }\n              toMerge.add(values);\n            }\n            consumer.mergeSortedNumericField(field, mergeState, toMerge);\n          } else {\n            throw new AssertionError(\"type=\" + type);\n          }\n        }\n      }\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(consumer);\n      } else {\n        IOUtils.closeWhileHandlingException(consumer);            \n      }\n    }\n  }\n\n","sourceOld":"  private void mergeDocValues(SegmentWriteState segmentWriteState) throws IOException {\n    DocValuesConsumer consumer = codec.docValuesFormat().fieldsConsumer(segmentWriteState);\n    boolean success = false;\n    try {\n      for (FieldInfo field : mergeState.fieldInfos) {\n        DocValuesType type = field.getDocValuesType();\n        if (type != null) {\n          if (type == DocValuesType.NUMERIC) {\n            List<NumericDocValues> toMerge = new ArrayList<>();\n            List<Bits> docsWithField = new ArrayList<>();\n            for (AtomicReader reader : mergeState.readers) {\n              NumericDocValues values = reader.getNumericDocValues(field.name);\n              Bits bits = reader.getDocsWithField(field.name);\n              if (values == null) {\n                values = DocValues.emptyNumeric();\n                bits = new Bits.MatchNoBits(reader.maxDoc());\n              }\n              toMerge.add(values);\n              docsWithField.add(bits);\n            }\n            consumer.mergeNumericField(field, mergeState, toMerge, docsWithField);\n          } else if (type == DocValuesType.BINARY) {\n            List<BinaryDocValues> toMerge = new ArrayList<>();\n            List<Bits> docsWithField = new ArrayList<>();\n            for (AtomicReader reader : mergeState.readers) {\n              BinaryDocValues values = reader.getBinaryDocValues(field.name);\n              Bits bits = reader.getDocsWithField(field.name);\n              if (values == null) {\n                values = DocValues.emptyBinary();\n                bits = new Bits.MatchNoBits(reader.maxDoc());\n              }\n              toMerge.add(values);\n              docsWithField.add(bits);\n            }\n            consumer.mergeBinaryField(field, mergeState, toMerge, docsWithField);\n          } else if (type == DocValuesType.SORTED) {\n            List<SortedDocValues> toMerge = new ArrayList<>();\n            for (AtomicReader reader : mergeState.readers) {\n              SortedDocValues values = reader.getSortedDocValues(field.name);\n              if (values == null) {\n                values = DocValues.emptySorted();\n              }\n              toMerge.add(values);\n            }\n            consumer.mergeSortedField(field, mergeState, toMerge);\n          } else if (type == DocValuesType.SORTED_SET) {\n            List<SortedSetDocValues> toMerge = new ArrayList<>();\n            for (AtomicReader reader : mergeState.readers) {\n              SortedSetDocValues values = reader.getSortedSetDocValues(field.name);\n              if (values == null) {\n                values = DocValues.emptySortedSet();\n              }\n              toMerge.add(values);\n            }\n            consumer.mergeSortedSetField(field, mergeState, toMerge);\n          } else if (type == DocValuesType.SORTED_NUMERIC) {\n            List<SortedNumericDocValues> toMerge = new ArrayList<>();\n            for (AtomicReader reader : mergeState.readers) {\n              SortedNumericDocValues values = reader.getSortedNumericDocValues(field.name);\n              if (values == null) {\n                values = DocValues.emptySortedNumeric();\n              }\n              toMerge.add(values);\n            }\n            consumer.mergeSortedNumericField(field, mergeState, toMerge);\n          } else {\n            throw new AssertionError(\"type=\" + type);\n          }\n        }\n      }\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(consumer);\n      } else {\n        IOUtils.closeWhileHandlingException(consumer);            \n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"22a2e66dfda83847e80095b8693c660742ab3e9c","date":1408628796,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentMerger#mergeDocValues(SegmentWriteState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentMerger#mergeDocValues(SegmentWriteState).mjava","sourceNew":"  private void mergeDocValues(SegmentWriteState segmentWriteState) throws IOException {\n    DocValuesConsumer consumer = codec.docValuesFormat().fieldsConsumer(segmentWriteState);\n    boolean success = false;\n    try {\n      consumer.merge(mergeState);\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(consumer);\n      } else {\n        IOUtils.closeWhileHandlingException(consumer);            \n      }\n    }\n  }\n\n","sourceOld":"  private void mergeDocValues(SegmentWriteState segmentWriteState) throws IOException {\n    DocValuesConsumer consumer = codec.docValuesFormat().fieldsConsumer(segmentWriteState);\n    boolean success = false;\n    try {\n      for (FieldInfo field : mergeState.fieldInfos) {\n        DocValuesType type = field.getDocValuesType();\n        if (type != null) {\n          if (type == DocValuesType.NUMERIC) {\n            List<NumericDocValues> toMerge = new ArrayList<>();\n            List<Bits> docsWithField = new ArrayList<>();\n            for (AtomicReader reader : mergeState.readers) {\n              NumericDocValues values = reader.getNumericDocValues(field.name);\n              Bits bits = reader.getDocsWithField(field.name);\n              if (values == null) {\n                values = DocValues.emptyNumeric();\n                bits = new Bits.MatchNoBits(reader.maxDoc());\n              }\n              toMerge.add(values);\n              docsWithField.add(bits);\n            }\n            consumer.mergeNumericField(field, mergeState, toMerge, docsWithField);\n          } else if (type == DocValuesType.BINARY) {\n            List<BinaryDocValues> toMerge = new ArrayList<>();\n            List<Bits> docsWithField = new ArrayList<>();\n            for (AtomicReader reader : mergeState.readers) {\n              BinaryDocValues values = reader.getBinaryDocValues(field.name);\n              Bits bits = reader.getDocsWithField(field.name);\n              if (values == null) {\n                values = DocValues.emptyBinary();\n                bits = new Bits.MatchNoBits(reader.maxDoc());\n              }\n              toMerge.add(values);\n              docsWithField.add(bits);\n            }\n            consumer.mergeBinaryField(field, mergeState, toMerge, docsWithField);\n          } else if (type == DocValuesType.SORTED) {\n            List<SortedDocValues> toMerge = new ArrayList<>();\n            for (AtomicReader reader : mergeState.readers) {\n              SortedDocValues values = reader.getSortedDocValues(field.name);\n              if (values == null) {\n                values = DocValues.emptySorted();\n              }\n              toMerge.add(values);\n            }\n            consumer.mergeSortedField(field, mergeState, toMerge);\n          } else if (type == DocValuesType.SORTED_SET) {\n            List<SortedSetDocValues> toMerge = new ArrayList<>();\n            for (AtomicReader reader : mergeState.readers) {\n              SortedSetDocValues values = reader.getSortedSetDocValues(field.name);\n              if (values == null) {\n                values = DocValues.emptySortedSet();\n              }\n              toMerge.add(values);\n            }\n            consumer.mergeSortedSetField(field, mergeState, toMerge);\n          } else if (type == DocValuesType.SORTED_NUMERIC) {\n            List<SortedNumericDocValues> toMerge = new ArrayList<>();\n            for (AtomicReader reader : mergeState.readers) {\n              SortedNumericDocValues values = reader.getSortedNumericDocValues(field.name);\n              if (values == null) {\n                values = DocValues.emptySortedNumeric(reader.maxDoc());\n              }\n              toMerge.add(values);\n            }\n            consumer.mergeSortedNumericField(field, mergeState, toMerge);\n          } else {\n            throw new AssertionError(\"type=\" + type);\n          }\n        }\n      }\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(consumer);\n      } else {\n        IOUtils.closeWhileHandlingException(consumer);            \n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"81f984bc3fef371bf2393a453ebd7835bcb0ee8d","date":1418246768,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentMerger#mergeDocValues(SegmentWriteState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentMerger#mergeDocValues(SegmentWriteState).mjava","sourceNew":"  private void mergeDocValues(SegmentWriteState segmentWriteState) throws IOException {\n    try (DocValuesConsumer consumer = codec.docValuesFormat().fieldsConsumer(segmentWriteState)) {\n      consumer.merge(mergeState);\n    }\n  }\n\n","sourceOld":"  private void mergeDocValues(SegmentWriteState segmentWriteState) throws IOException {\n    DocValuesConsumer consumer = codec.docValuesFormat().fieldsConsumer(segmentWriteState);\n    boolean success = false;\n    try {\n      consumer.merge(mergeState);\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(consumer);\n      } else {\n        IOUtils.closeWhileHandlingException(consumer);            \n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"81f984bc3fef371bf2393a453ebd7835bcb0ee8d":["22a2e66dfda83847e80095b8693c660742ab3e9c"],"dbff44e659c8599e09913b321ce89b65763b68d8":["f366ce28775e2b8ea4e06355009471328711666d","3bed77c10dee249829e09c7de0432fedda3b23bb"],"9faa42f41b6adb98daf009cf99a4ee239189e469":["ddbb72a33557d2b5bc22ee95daf3281c43560502"],"53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf":["8429ddf2214f2bf8abcbb5484fefef6aaf5c417e"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":["ddbb72a33557d2b5bc22ee95daf3281c43560502","e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff":["ddbb72a33557d2b5bc22ee95daf3281c43560502","9faa42f41b6adb98daf009cf99a4ee239189e469"],"b57ad184373369f2ee65828cd86b30da949653f6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ddbb72a33557d2b5bc22ee95daf3281c43560502":["3bed77c10dee249829e09c7de0432fedda3b23bb","dbff44e659c8599e09913b321ce89b65763b68d8"],"c6f080a2ab37c464dd98db173f6cbf10dc74f211":["53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf","d14ffaac9c4a4a2c750bf0cd956506802561e062"],"8429ddf2214f2bf8abcbb5484fefef6aaf5c417e":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"8fa087bc3b5a2da0de8a912f76ae4ba02cff39ed":["d14ffaac9c4a4a2c750bf0cd956506802561e062"],"3bed77c10dee249829e09c7de0432fedda3b23bb":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b57ad184373369f2ee65828cd86b30da949653f6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"22a2e66dfda83847e80095b8693c660742ab3e9c":["8fa087bc3b5a2da0de8a912f76ae4ba02cff39ed"],"f366ce28775e2b8ea4e06355009471328711666d":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["81f984bc3fef371bf2393a453ebd7835bcb0ee8d"],"d14ffaac9c4a4a2c750bf0cd956506802561e062":["53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["8429ddf2214f2bf8abcbb5484fefef6aaf5c417e"],"81f984bc3fef371bf2393a453ebd7835bcb0ee8d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"dbff44e659c8599e09913b321ce89b65763b68d8":["ddbb72a33557d2b5bc22ee95daf3281c43560502"],"9faa42f41b6adb98daf009cf99a4ee239189e469":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf":["c6f080a2ab37c464dd98db173f6cbf10dc74f211","d14ffaac9c4a4a2c750bf0cd956506802561e062"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":[],"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","3dffec77fb8f7d0e9ca4869dddd6af94528b4576"],"ddbb72a33557d2b5bc22ee95daf3281c43560502":["9faa42f41b6adb98daf009cf99a4ee239189e469","3dffec77fb8f7d0e9ca4869dddd6af94528b4576","e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"b57ad184373369f2ee65828cd86b30da949653f6":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"c6f080a2ab37c464dd98db173f6cbf10dc74f211":[],"8429ddf2214f2bf8abcbb5484fefef6aaf5c417e":["53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf"],"8fa087bc3b5a2da0de8a912f76ae4ba02cff39ed":["22a2e66dfda83847e80095b8693c660742ab3e9c"],"3bed77c10dee249829e09c7de0432fedda3b23bb":["dbff44e659c8599e09913b321ce89b65763b68d8","ddbb72a33557d2b5bc22ee95daf3281c43560502"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["3bed77c10dee249829e09c7de0432fedda3b23bb","f366ce28775e2b8ea4e06355009471328711666d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b57ad184373369f2ee65828cd86b30da949653f6","d4d69c535930b5cce125cff868d40f6373dc27d4"],"22a2e66dfda83847e80095b8693c660742ab3e9c":["81f984bc3fef371bf2393a453ebd7835bcb0ee8d"],"f366ce28775e2b8ea4e06355009471328711666d":["dbff44e659c8599e09913b321ce89b65763b68d8"],"d14ffaac9c4a4a2c750bf0cd956506802561e062":["c6f080a2ab37c464dd98db173f6cbf10dc74f211","8fa087bc3b5a2da0de8a912f76ae4ba02cff39ed"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","c6f080a2ab37c464dd98db173f6cbf10dc74f211","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}