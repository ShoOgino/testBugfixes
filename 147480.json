{"path":"contrib/gdata-server/src/java/org/apache/lucene/gdata/server/GDataResponse#sendResponse(BaseEntry,ExtensionProfile).mjava","commits":[{"id":"5d43e216d757e2276d180eba8a192e300c4bfadb","date":1149717385,"type":0,"author":"Doug Cutting","isMerge":false,"pathNew":"contrib/gdata-server/src/java/org/apache/lucene/gdata/server/GDataResponse#sendResponse(BaseEntry,ExtensionProfile).mjava","pathOld":"/dev/null","sourceNew":"    /** \n     *  \n     * Sends a response for an update, insert or delete request. This method \n     * must not invoked in a case of an error performing the requeste action. \n     * If the specified response format is ATOM the default namespace will be set to ATOM. \n     * @param entry - \n     *            the modified / created entry to send \n     * @param profile - \n     *            the entries extension profile \n     * @throws IOException - \n     *             if an I/O exception accures, often caused by an already \n     *             closed Writer or OutputStream \n     */ \n    public void sendResponse(BaseEntry entry, ExtensionProfile profile) \n            throws IOException { \n        if (entry == null) \n            throw new IllegalArgumentException(\"entry must not be null\"); \n        if(profile == null) \n            throw new IllegalArgumentException(\"extension profil must not be null\"); \n        XmlWriter writer = createWriter(); \n        if (this.outputFormat.equals(OutputFormat.ATOM)) \n            entry.generateAtom(writer, profile); \n        else \n            entry.generateRss(writer, profile); \n    } \n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"52754a40a1550056d5637c8992b4076b5ed77328","date":1151345693,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"contrib/gdata-server/src/java/org/apache/lucene/gdata/server/GDataResponse#sendResponse(BaseEntry,ExtensionProfile).mjava","pathOld":"contrib/gdata-server/src/java/org/apache/lucene/gdata/server/GDataResponse#sendResponse(BaseEntry,ExtensionProfile).mjava","sourceNew":"    /**\n     * \n     * Sends a response for an update, insert or delete request. This method\n     * must not invoked in a case of an error performing the requeste action. If\n     * the specified response format is ATOM the default namespace will be set\n     * to ATOM.\n     * \n     * @param entry -\n     *            the modified / created entry to send\n     * @param profile -\n     *            the entries extension profile\n     * @throws IOException -\n     *             if an I/O exception accures, often caused by an already\n     *             closed Writer or OutputStream\n     */\n    public void sendResponse(BaseEntry entry, ExtensionProfile profile)\n            throws IOException {\n        if (entry == null)\n            throw new IllegalArgumentException(\"entry must not be null\");\n        if (profile == null)\n            throw new IllegalArgumentException(\n                    \"extension profil must not be null\");\n        DateTime time = entry.getUpdated();\n        if (time != null)\n            setLastModifiedHeader(time.getValue());\n        XmlWriter writer = createWriter();\n        if (this.outputFormat.equals(OutputFormat.ATOM))\n            entry.generateAtom(writer, profile);\n        else\n            entry.generateRss(writer, profile);\n    }\n\n","sourceOld":"    /** \n     *  \n     * Sends a response for an update, insert or delete request. This method \n     * must not invoked in a case of an error performing the requeste action. \n     * If the specified response format is ATOM the default namespace will be set to ATOM. \n     * @param entry - \n     *            the modified / created entry to send \n     * @param profile - \n     *            the entries extension profile \n     * @throws IOException - \n     *             if an I/O exception accures, often caused by an already \n     *             closed Writer or OutputStream \n     */ \n    public void sendResponse(BaseEntry entry, ExtensionProfile profile) \n            throws IOException { \n        if (entry == null) \n            throw new IllegalArgumentException(\"entry must not be null\"); \n        if(profile == null) \n            throw new IllegalArgumentException(\"extension profil must not be null\"); \n        XmlWriter writer = createWriter(); \n        if (this.outputFormat.equals(OutputFormat.ATOM)) \n            entry.generateAtom(writer, profile); \n        else \n            entry.generateRss(writer, profile); \n    } \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"303ca293666286b4ae2b0b4dbf10d3bf60ed727c","date":1153866181,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"contrib/gdata-server/src/java/org/apache/lucene/gdata/server/GDataResponse#sendResponse(BaseEntry,ExtensionProfile).mjava","pathOld":"contrib/gdata-server/src/java/org/apache/lucene/gdata/server/GDataResponse#sendResponse(BaseEntry,ExtensionProfile).mjava","sourceNew":"    /**\n     * \n     * Sends a response for an update, insert or delete request. This method\n     * must not invoked in a case of an error performing the requeste action. If\n     * the specified response format is ATOM the default namespace will be set\n     * to ATOM.\n     * \n     * @param entry -\n     *            the modified / created entry to send\n     * @param profile -\n     *            the entries extension profile\n     * @throws IOException -\n     *             if an I/O exception accures, often caused by an already\n     *             closed Writer or OutputStream\n     */\n    public void sendResponse(BaseEntry entry, ExtensionProfile profile)\n            throws IOException {\n        if (entry == null)\n            throw new IllegalArgumentException(\"entry must not be null\");\n        if (profile == null)\n            throw new IllegalArgumentException(\n                    \"extension profil must not be null\");\n        DateTime time = entry.getUpdated();\n        if (time != null)\n            setLastModifiedHeader(time.getValue());\n        XmlWriter writer = createWriter();\n        if (this.outputFormat.equals(OutputFormat.ATOM))\n            entry.generateAtom(writer, profile);\n        else\n            entry.generateRss(writer, profile);\n        writer.close();\n        \n    }\n\n","sourceOld":"    /**\n     * \n     * Sends a response for an update, insert or delete request. This method\n     * must not invoked in a case of an error performing the requeste action. If\n     * the specified response format is ATOM the default namespace will be set\n     * to ATOM.\n     * \n     * @param entry -\n     *            the modified / created entry to send\n     * @param profile -\n     *            the entries extension profile\n     * @throws IOException -\n     *             if an I/O exception accures, often caused by an already\n     *             closed Writer or OutputStream\n     */\n    public void sendResponse(BaseEntry entry, ExtensionProfile profile)\n            throws IOException {\n        if (entry == null)\n            throw new IllegalArgumentException(\"entry must not be null\");\n        if (profile == null)\n            throw new IllegalArgumentException(\n                    \"extension profil must not be null\");\n        DateTime time = entry.getUpdated();\n        if (time != null)\n            setLastModifiedHeader(time.getValue());\n        XmlWriter writer = createWriter();\n        if (this.outputFormat.equals(OutputFormat.ATOM))\n            entry.generateAtom(writer, profile);\n        else\n            entry.generateRss(writer, profile);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09fe963da2613c724ffe82353b4ca2364a1f93c6","date":1155249160,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"contrib/gdata-server/src/java/org/apache/lucene/gdata/server/GDataResponse#sendResponse(BaseEntry,ExtensionProfile).mjava","pathOld":"contrib/gdata-server/src/java/org/apache/lucene/gdata/server/GDataResponse#sendResponse(BaseEntry,ExtensionProfile).mjava","sourceNew":"    /**\n     * \n     * Sends a response for an update, insert or delete request. This method\n     * must not invoked in a case of an error performing the requested action. If\n     * the specified response format is ATOM the default namespace will be set\n     * to ATOM.\n     * \n     * @param entry -\n     *            the modified / created entry to send\n     * @param profile -\n     *            the entries extension profile\n     * @throws IOException -\n     *             if an I/O exception occurs, often caused by an already\n     *             closed Writer or OutputStream\n     */\n    public void sendResponse(BaseEntry entry, ExtensionProfile profile)\n            throws IOException {\n        if (entry == null)\n            throw new IllegalArgumentException(\"entry must not be null\");\n        if (profile == null)\n            throw new IllegalArgumentException(\n                    \"extension profile must not be null\");\n        DateTime time = entry.getUpdated();\n        if (time != null)\n            setLastModifiedHeader(time.getValue());\n        XmlWriter writer = createWriter();\n        if (this.outputFormat.equals(OutputFormat.ATOM))\n            entry.generateAtom(writer, profile);\n        else\n            entry.generateRss(writer, profile);\n        writer.close();\n        \n    }\n\n","sourceOld":"    /**\n     * \n     * Sends a response for an update, insert or delete request. This method\n     * must not invoked in a case of an error performing the requeste action. If\n     * the specified response format is ATOM the default namespace will be set\n     * to ATOM.\n     * \n     * @param entry -\n     *            the modified / created entry to send\n     * @param profile -\n     *            the entries extension profile\n     * @throws IOException -\n     *             if an I/O exception accures, often caused by an already\n     *             closed Writer or OutputStream\n     */\n    public void sendResponse(BaseEntry entry, ExtensionProfile profile)\n            throws IOException {\n        if (entry == null)\n            throw new IllegalArgumentException(\"entry must not be null\");\n        if (profile == null)\n            throw new IllegalArgumentException(\n                    \"extension profil must not be null\");\n        DateTime time = entry.getUpdated();\n        if (time != null)\n            setLastModifiedHeader(time.getValue());\n        XmlWriter writer = createWriter();\n        if (this.outputFormat.equals(OutputFormat.ATOM))\n            entry.generateAtom(writer, profile);\n        else\n            entry.generateRss(writer, profile);\n        writer.close();\n        \n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a228247de0686f328301f2d13982b56d78533501","date":1156108808,"type":5,"author":"Yonik Seeley","isMerge":false,"pathNew":"contrib/gdata-server/src/java/org/apache/lucene/gdata/server/GDataResponse#sendResponse(BaseEntry,ProvidedService).mjava","pathOld":"contrib/gdata-server/src/java/org/apache/lucene/gdata/server/GDataResponse#sendResponse(BaseEntry,ExtensionProfile).mjava","sourceNew":"    /**\n     * \n     * Sends a response for an update, insert or delete request. This method\n     * must not invoked in a case of an error performing the requested action. If\n     * the specified response format is ATOM the default namespace will be set\n     * to ATOM.\n     * \n     * @param entry -\n     *            the modified / created entry to send\n     * @param service - the service to render the feed\n     * @throws IOException -\n     *             if an I/O exception occurs, often caused by an already\n     *             closed Writer or OutputStream\n     */\n    public void sendResponse(BaseEntry entry, ProvidedService service)\n            throws IOException {\n        if (entry == null)\n            throw new IllegalArgumentException(\"entry must not be null\");\n        if (service == null)\n            throw new IllegalArgumentException(\n                    \"service must not be null\");\n        DateTime time = entry.getUpdated();\n        if (time != null)\n            setLastModifiedHeader(time.getValue());\n        FormatWriter writer = FormatWriter.getFormatWriter(this,service);\n        writer.generateOutputFormat(entry,this.response);\n\n        \n    }\n\n","sourceOld":"    /**\n     * \n     * Sends a response for an update, insert or delete request. This method\n     * must not invoked in a case of an error performing the requested action. If\n     * the specified response format is ATOM the default namespace will be set\n     * to ATOM.\n     * \n     * @param entry -\n     *            the modified / created entry to send\n     * @param profile -\n     *            the entries extension profile\n     * @throws IOException -\n     *             if an I/O exception occurs, often caused by an already\n     *             closed Writer or OutputStream\n     */\n    public void sendResponse(BaseEntry entry, ExtensionProfile profile)\n            throws IOException {\n        if (entry == null)\n            throw new IllegalArgumentException(\"entry must not be null\");\n        if (profile == null)\n            throw new IllegalArgumentException(\n                    \"extension profile must not be null\");\n        DateTime time = entry.getUpdated();\n        if (time != null)\n            setLastModifiedHeader(time.getValue());\n        XmlWriter writer = createWriter();\n        if (this.outputFormat.equals(OutputFormat.ATOM))\n            entry.generateAtom(writer, profile);\n        else\n            entry.generateRss(writer, profile);\n        writer.close();\n        \n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"09fe963da2613c724ffe82353b4ca2364a1f93c6":["303ca293666286b4ae2b0b4dbf10d3bf60ed727c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a228247de0686f328301f2d13982b56d78533501":["09fe963da2613c724ffe82353b4ca2364a1f93c6"],"303ca293666286b4ae2b0b4dbf10d3bf60ed727c":["52754a40a1550056d5637c8992b4076b5ed77328"],"5d43e216d757e2276d180eba8a192e300c4bfadb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a228247de0686f328301f2d13982b56d78533501"],"52754a40a1550056d5637c8992b4076b5ed77328":["5d43e216d757e2276d180eba8a192e300c4bfadb"]},"commit2Childs":{"09fe963da2613c724ffe82353b4ca2364a1f93c6":["a228247de0686f328301f2d13982b56d78533501"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5d43e216d757e2276d180eba8a192e300c4bfadb"],"a228247de0686f328301f2d13982b56d78533501":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"303ca293666286b4ae2b0b4dbf10d3bf60ed727c":["09fe963da2613c724ffe82353b4ca2364a1f93c6"],"5d43e216d757e2276d180eba8a192e300c4bfadb":["52754a40a1550056d5637c8992b4076b5ed77328"],"52754a40a1550056d5637c8992b4076b5ed77328":["303ca293666286b4ae2b0b4dbf10d3bf60ed727c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}