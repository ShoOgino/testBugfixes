{"path":"solr/core/src/java/org/apache/solr/util/SolrCLI.CreateCollectionTool#runCloudTool(CloudSolrClient,CommandLine).mjava","commits":[{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.CreateCollectionTool#runCloudTool(CloudSolrClient,CommandLine).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.CreateCollectionTool#runCloudTool(CloudSolrServer,CommandLine).mjava","sourceNew":"    protected int runCloudTool(CloudSolrClient cloudSolrClient, CommandLine cli) throws Exception {\n      Set<String> liveNodes = cloudSolrClient.getZkStateReader().getClusterState().getLiveNodes();\n      if (liveNodes.isEmpty())\n        throw new IllegalStateException(\"No live nodes found! Cannot create a collection until \" +\n            \"there is at least 1 live node in the cluster.\");\n      String firstLiveNode = liveNodes.iterator().next();\n\n      // build a URL to create the collection\n      int numShards = optionAsInt(cli, \"shards\", 1);\n      int replicationFactor = optionAsInt(cli, \"replicationFactor\", 1);\n      int maxShardsPerNode = -1;\n\n      if (cli.hasOption(\"maxShardsPerNode\")) {\n        maxShardsPerNode = Integer.parseInt(cli.getOptionValue(\"maxShardsPerNode\"));\n      } else {\n        // need number of live nodes to determine maxShardsPerNode if it is not set\n        int numNodes = liveNodes.size();\n        maxShardsPerNode = ((numShards*replicationFactor)+numNodes-1)/numNodes;\n      }\n\n      String configSet = cli.getOptionValue(\"config\", DEFAULT_CONFIG_SET);\n      String configSetNameInZk = configSet;\n      File configSetDir = null;\n      // we try to be flexible and allow the user to specify a configuration directory instead of a configset name\n      File possibleConfigDir = new File(configSet);\n      if (possibleConfigDir.isDirectory()) {\n        configSetDir = possibleConfigDir;\n        configSetNameInZk = possibleConfigDir.getName();\n      } else {\n        File configsetsDir = new File(cli.getOptionValue(\"configsetsDir\"));\n        if (!configsetsDir.isDirectory())\n          throw new FileNotFoundException(configsetsDir.getAbsolutePath()+\" not found!\");\n\n        // upload the configset if it exists\n        configSetDir = new File(configsetsDir, configSet);\n        if (!configSetDir.isDirectory()) {\n          throw new FileNotFoundException(\"Specified config \" + configSet +\n              \" not found in \" + configsetsDir.getAbsolutePath());\n        }\n      }\n\n      File confDir = new File(configSetDir, \"conf\");\n      if (!confDir.isDirectory()) {\n        // config dir should contain a conf sub-directory but if not and there's a solrconfig.xml, then use it\n        if ((new File(configSetDir, \"solrconfig.xml\")).isFile()) {\n          confDir = configSetDir;\n        } else {\n          System.err.println(\"Specified configuration directory \"+configSetDir.getAbsolutePath()+\n              \" is invalid;\\nit should contain either conf sub-directory or solrconfig.xml\");\n          return 1;\n        }\n      }\n\n      // test to see if that config exists in ZK\n      if (!cloudSolrClient.getZkStateReader().getZkClient().exists(\"/configs/\"+configSetNameInZk, true)) {\n        System.out.println(\"Uploading \"+confDir.getAbsolutePath()+\n            \" for config \"+configSetNameInZk+\" to ZooKeeper at \"+cloudSolrClient.getZkHost());\n        ZkController.uploadConfigDir(cloudSolrClient.getZkStateReader().getZkClient(), confDir, configSetNameInZk);\n      }\n\n      String baseUrl = cloudSolrClient.getZkStateReader().getBaseUrlForNodeName(firstLiveNode);\n      String collectionName = cli.getOptionValue(\"name\");\n\n      // since creating a collection is a heavy-weight operation, check for existence first\n      String collectionListUrl = baseUrl+\"/admin/collections?action=list\";\n      if (safeCheckCollectionExists(collectionListUrl, collectionName)) {\n        System.err.println(\"\\nCollection '\"+collectionName+\"' already exists!\");\n        System.err.println(\"\\nChecked collection existence using Collections API command:\\n\"+collectionListUrl);\n        System.err.println();\n        return 1;\n      }\n\n      // doesn't seem to exist ... try to create\n      String createCollectionUrl =\n          String.format(Locale.ROOT,\n              \"%s/admin/collections?action=CREATE&name=%s&numShards=%d&replicationFactor=%d&maxShardsPerNode=%d&collection.configName=%s\",\n              baseUrl,\n              collectionName,\n              numShards,\n              replicationFactor,\n              maxShardsPerNode,\n              configSetNameInZk);\n\n      System.out.println(\"\\nCreating new collection '\"+collectionName+\"' using command:\\n\"+createCollectionUrl+\"\\n\");\n\n      Map<String,Object> json = null;\n      try {\n        json = getJson(createCollectionUrl);\n      } catch (SolrServerException sse) {\n        // check if already exists\n        if (safeCheckCollectionExists(collectionListUrl, collectionName)) {\n          System.err.println(\"Collection '\"+collectionName+\"' already exists!\");\n          System.err.println(\"\\nChecked collection existence using Collections API command:\\n\"+collectionListUrl);\n        } else {\n          System.err.println(\"Failed to create collection '\"+collectionName+\"' due to: \"+sse.getMessage());\n        }\n        System.err.println();\n        return 1;\n      }\n\n      CharArr arr = new CharArr();\n      new JSONWriter(arr, 2).write(json);\n      System.out.println(arr.toString());\n      System.out.println();\n\n      return 0;\n    }\n\n","sourceOld":"    protected int runCloudTool(CloudSolrServer cloudSolrServer, CommandLine cli) throws Exception {\n      Set<String> liveNodes = cloudSolrServer.getZkStateReader().getClusterState().getLiveNodes();\n      if (liveNodes.isEmpty())\n        throw new IllegalStateException(\"No live nodes found! Cannot create a collection until \" +\n            \"there is at least 1 live node in the cluster.\");\n      String firstLiveNode = liveNodes.iterator().next();\n\n      // build a URL to create the collection\n      int numShards = optionAsInt(cli, \"shards\", 1);\n      int replicationFactor = optionAsInt(cli, \"replicationFactor\", 1);\n      int maxShardsPerNode = -1;\n\n      if (cli.hasOption(\"maxShardsPerNode\")) {\n        maxShardsPerNode = Integer.parseInt(cli.getOptionValue(\"maxShardsPerNode\"));\n      } else {\n        // need number of live nodes to determine maxShardsPerNode if it is not set\n        int numNodes = liveNodes.size();\n        maxShardsPerNode = ((numShards*replicationFactor)+numNodes-1)/numNodes;\n      }\n\n      String configSet = cli.getOptionValue(\"config\", DEFAULT_CONFIG_SET);\n      String configSetNameInZk = configSet;\n      File configSetDir = null;\n      // we try to be flexible and allow the user to specify a configuration directory instead of a configset name\n      File possibleConfigDir = new File(configSet);\n      if (possibleConfigDir.isDirectory()) {\n        configSetDir = possibleConfigDir;\n        configSetNameInZk = possibleConfigDir.getName();\n      } else {\n        File configsetsDir = new File(cli.getOptionValue(\"configsetsDir\"));\n        if (!configsetsDir.isDirectory())\n          throw new FileNotFoundException(configsetsDir.getAbsolutePath()+\" not found!\");\n\n        // upload the configset if it exists\n        configSetDir = new File(configsetsDir, configSet);\n        if (!configSetDir.isDirectory()) {\n          throw new FileNotFoundException(\"Specified config \" + configSet +\n              \" not found in \" + configsetsDir.getAbsolutePath());\n        }\n      }\n\n      File confDir = new File(configSetDir, \"conf\");\n      if (!confDir.isDirectory()) {\n        // config dir should contain a conf sub-directory but if not and there's a solrconfig.xml, then use it\n        if ((new File(configSetDir, \"solrconfig.xml\")).isFile()) {\n          confDir = configSetDir;\n        } else {\n          System.err.println(\"Specified configuration directory \"+configSetDir.getAbsolutePath()+\n              \" is invalid;\\nit should contain either conf sub-directory or solrconfig.xml\");\n          return 1;\n        }\n      }\n\n      // test to see if that config exists in ZK\n      if (!cloudSolrServer.getZkStateReader().getZkClient().exists(\"/configs/\"+configSetNameInZk, true)) {\n        System.out.println(\"Uploading \"+confDir.getAbsolutePath()+\n            \" for config \"+configSetNameInZk+\" to ZooKeeper at \"+cloudSolrServer.getZkHost());\n        ZkController.uploadConfigDir(cloudSolrServer.getZkStateReader().getZkClient(), confDir, configSetNameInZk);\n      }\n\n      String baseUrl = cloudSolrServer.getZkStateReader().getBaseUrlForNodeName(firstLiveNode);\n      String collectionName = cli.getOptionValue(\"name\");\n\n      // since creating a collection is a heavy-weight operation, check for existence first\n      String collectionListUrl = baseUrl+\"/admin/collections?action=list\";\n      if (safeCheckCollectionExists(collectionListUrl, collectionName)) {\n        System.err.println(\"\\nCollection '\"+collectionName+\"' already exists!\");\n        System.err.println(\"\\nChecked collection existence using Collections API command:\\n\"+collectionListUrl);\n        System.err.println();\n        return 1;\n      }\n\n      // doesn't seem to exist ... try to create\n      String createCollectionUrl =\n          String.format(Locale.ROOT,\n              \"%s/admin/collections?action=CREATE&name=%s&numShards=%d&replicationFactor=%d&maxShardsPerNode=%d&collection.configName=%s\",\n              baseUrl,\n              collectionName,\n              numShards,\n              replicationFactor,\n              maxShardsPerNode,\n              configSetNameInZk);\n\n      System.out.println(\"\\nCreating new collection '\"+collectionName+\"' using command:\\n\"+createCollectionUrl+\"\\n\");\n\n      Map<String,Object> json = null;\n      try {\n        json = getJson(createCollectionUrl);\n      } catch (SolrServerException sse) {\n        // check if already exists\n        if (safeCheckCollectionExists(collectionListUrl, collectionName)) {\n          System.err.println(\"Collection '\"+collectionName+\"' already exists!\");\n          System.err.println(\"\\nChecked collection existence using Collections API command:\\n\"+collectionListUrl);\n        } else {\n          System.err.println(\"Failed to create collection '\"+collectionName+\"' due to: \"+sse.getMessage());\n        }\n        System.err.println();\n        return 1;\n      }\n\n      CharArr arr = new CharArr();\n      new JSONWriter(arr, 2).write(json);\n      System.out.println(arr.toString());\n      System.out.println();\n\n      return 0;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3d1db6f36874f1979916ccb702329fbb09602af8","date":1421105614,"type":3,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.CreateCollectionTool#runCloudTool(CloudSolrClient,CommandLine).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.CreateCollectionTool#runCloudTool(CloudSolrClient,CommandLine).mjava","sourceNew":"    protected int runCloudTool(CloudSolrClient cloudSolrClient, CommandLine cli) throws Exception {\n      Set<String> liveNodes = cloudSolrClient.getZkStateReader().getClusterState().getLiveNodes();\n      if (liveNodes.isEmpty())\n        throw new IllegalStateException(\"No live nodes found! Cannot create a collection until \" +\n            \"there is at least 1 live node in the cluster.\");\n      String firstLiveNode = liveNodes.iterator().next();\n\n      String collectionName = cli.getOptionValue(\"name\");\n\n      // build a URL to create the collection\n      int numShards = optionAsInt(cli, \"shards\", 1);\n      int replicationFactor = optionAsInt(cli, \"replicationFactor\", 1);\n      int maxShardsPerNode = -1;\n\n      if (cli.hasOption(\"maxShardsPerNode\")) {\n        maxShardsPerNode = Integer.parseInt(cli.getOptionValue(\"maxShardsPerNode\"));\n      } else {\n        // need number of live nodes to determine maxShardsPerNode if it is not set\n        int numNodes = liveNodes.size();\n        maxShardsPerNode = ((numShards*replicationFactor)+numNodes-1)/numNodes;\n      }\n\n      String confname = cli.getOptionValue(\"confname\", collectionName);\n      boolean configExistsInZk =\n          cloudSolrClient.getZkStateReader().getZkClient().exists(\"/configs/\"+confname, true);\n\n      if (configExistsInZk) {\n        System.out.println(\"Re-using existing configuration directory \"+confname);\n      } else {\n        String configSet = cli.getOptionValue(\"confdir\", DEFAULT_CONFIG_SET);\n        File configSetDir = null;\n        // we try to be flexible and allow the user to specify a configuration directory instead of a configset name\n        File possibleConfigDir = new File(configSet);\n        if (possibleConfigDir.isDirectory()) {\n          configSetDir = possibleConfigDir;\n        } else {\n          File configsetsDir = new File(cli.getOptionValue(\"configsetsDir\"));\n          if (!configsetsDir.isDirectory())\n            throw new FileNotFoundException(configsetsDir.getAbsolutePath()+\" not found!\");\n\n          // upload the configset if it exists\n          configSetDir = new File(configsetsDir, configSet);\n          if (!configSetDir.isDirectory()) {\n            throw new FileNotFoundException(\"Specified config \" + configSet +\n                \" not found in \" + configsetsDir.getAbsolutePath());\n          }\n        }\n\n        File confDir = new File(configSetDir, \"conf\");\n        if (!confDir.isDirectory()) {\n          // config dir should contain a conf sub-directory but if not and there's a solrconfig.xml, then use it\n          if ((new File(configSetDir, \"solrconfig.xml\")).isFile()) {\n            confDir = configSetDir;\n          } else {\n            System.err.println(\"Specified configuration directory \"+configSetDir.getAbsolutePath()+\n                \" is invalid;\\nit should contain either conf sub-directory or solrconfig.xml\");\n            return 1;\n          }\n        }\n\n        // test to see if that config exists in ZK\n        System.out.println(\"Uploading \"+confDir.getAbsolutePath()+\n            \" for config \"+confname+\" to ZooKeeper at \"+cloudSolrClient.getZkHost());\n        ZkController.uploadConfigDir(cloudSolrClient.getZkStateReader().getZkClient(), confDir, confname);\n      }\n\n      String baseUrl = cloudSolrClient.getZkStateReader().getBaseUrlForNodeName(firstLiveNode);\n\n      // since creating a collection is a heavy-weight operation, check for existence first\n      String collectionListUrl = baseUrl+\"/admin/collections?action=list\";\n      if (safeCheckCollectionExists(collectionListUrl, collectionName)) {\n        System.err.println(\"\\nCollection '\"+collectionName+\"' already exists!\");\n        System.err.println(\"\\nChecked collection existence using Collections API command:\\n\"+collectionListUrl);\n        System.err.println();\n        return 1;\n      }\n\n      // doesn't seem to exist ... try to create\n      String createCollectionUrl =\n          String.format(Locale.ROOT,\n              \"%s/admin/collections?action=CREATE&name=%s&numShards=%d&replicationFactor=%d&maxShardsPerNode=%d&collection.configName=%s\",\n              baseUrl,\n              collectionName,\n              numShards,\n              replicationFactor,\n              maxShardsPerNode,\n              confname);\n\n      System.out.println(\"\\nCreating new collection '\"+collectionName+\"' using command:\\n\"+createCollectionUrl+\"\\n\");\n\n      Map<String,Object> json = null;\n      try {\n        json = getJson(createCollectionUrl);\n      } catch (SolrServerException sse) {\n        // check if already exists\n        if (safeCheckCollectionExists(collectionListUrl, collectionName)) {\n          System.err.println(\"Collection '\"+collectionName+\"' already exists!\");\n          System.err.println(\"\\nChecked collection existence using Collections API command:\\n\"+collectionListUrl);\n        } else {\n          System.err.println(\"Failed to create collection '\"+collectionName+\"' due to: \"+sse.getMessage());\n        }\n        System.err.println();\n        return 1;\n      }\n\n      CharArr arr = new CharArr();\n      new JSONWriter(arr, 2).write(json);\n      System.out.println(arr.toString());\n      System.out.println();\n\n      return 0;\n    }\n\n","sourceOld":"    protected int runCloudTool(CloudSolrClient cloudSolrClient, CommandLine cli) throws Exception {\n      Set<String> liveNodes = cloudSolrClient.getZkStateReader().getClusterState().getLiveNodes();\n      if (liveNodes.isEmpty())\n        throw new IllegalStateException(\"No live nodes found! Cannot create a collection until \" +\n            \"there is at least 1 live node in the cluster.\");\n      String firstLiveNode = liveNodes.iterator().next();\n\n      // build a URL to create the collection\n      int numShards = optionAsInt(cli, \"shards\", 1);\n      int replicationFactor = optionAsInt(cli, \"replicationFactor\", 1);\n      int maxShardsPerNode = -1;\n\n      if (cli.hasOption(\"maxShardsPerNode\")) {\n        maxShardsPerNode = Integer.parseInt(cli.getOptionValue(\"maxShardsPerNode\"));\n      } else {\n        // need number of live nodes to determine maxShardsPerNode if it is not set\n        int numNodes = liveNodes.size();\n        maxShardsPerNode = ((numShards*replicationFactor)+numNodes-1)/numNodes;\n      }\n\n      String configSet = cli.getOptionValue(\"config\", DEFAULT_CONFIG_SET);\n      String configSetNameInZk = configSet;\n      File configSetDir = null;\n      // we try to be flexible and allow the user to specify a configuration directory instead of a configset name\n      File possibleConfigDir = new File(configSet);\n      if (possibleConfigDir.isDirectory()) {\n        configSetDir = possibleConfigDir;\n        configSetNameInZk = possibleConfigDir.getName();\n      } else {\n        File configsetsDir = new File(cli.getOptionValue(\"configsetsDir\"));\n        if (!configsetsDir.isDirectory())\n          throw new FileNotFoundException(configsetsDir.getAbsolutePath()+\" not found!\");\n\n        // upload the configset if it exists\n        configSetDir = new File(configsetsDir, configSet);\n        if (!configSetDir.isDirectory()) {\n          throw new FileNotFoundException(\"Specified config \" + configSet +\n              \" not found in \" + configsetsDir.getAbsolutePath());\n        }\n      }\n\n      File confDir = new File(configSetDir, \"conf\");\n      if (!confDir.isDirectory()) {\n        // config dir should contain a conf sub-directory but if not and there's a solrconfig.xml, then use it\n        if ((new File(configSetDir, \"solrconfig.xml\")).isFile()) {\n          confDir = configSetDir;\n        } else {\n          System.err.println(\"Specified configuration directory \"+configSetDir.getAbsolutePath()+\n              \" is invalid;\\nit should contain either conf sub-directory or solrconfig.xml\");\n          return 1;\n        }\n      }\n\n      // test to see if that config exists in ZK\n      if (!cloudSolrClient.getZkStateReader().getZkClient().exists(\"/configs/\"+configSetNameInZk, true)) {\n        System.out.println(\"Uploading \"+confDir.getAbsolutePath()+\n            \" for config \"+configSetNameInZk+\" to ZooKeeper at \"+cloudSolrClient.getZkHost());\n        ZkController.uploadConfigDir(cloudSolrClient.getZkStateReader().getZkClient(), confDir, configSetNameInZk);\n      }\n\n      String baseUrl = cloudSolrClient.getZkStateReader().getBaseUrlForNodeName(firstLiveNode);\n      String collectionName = cli.getOptionValue(\"name\");\n\n      // since creating a collection is a heavy-weight operation, check for existence first\n      String collectionListUrl = baseUrl+\"/admin/collections?action=list\";\n      if (safeCheckCollectionExists(collectionListUrl, collectionName)) {\n        System.err.println(\"\\nCollection '\"+collectionName+\"' already exists!\");\n        System.err.println(\"\\nChecked collection existence using Collections API command:\\n\"+collectionListUrl);\n        System.err.println();\n        return 1;\n      }\n\n      // doesn't seem to exist ... try to create\n      String createCollectionUrl =\n          String.format(Locale.ROOT,\n              \"%s/admin/collections?action=CREATE&name=%s&numShards=%d&replicationFactor=%d&maxShardsPerNode=%d&collection.configName=%s\",\n              baseUrl,\n              collectionName,\n              numShards,\n              replicationFactor,\n              maxShardsPerNode,\n              configSetNameInZk);\n\n      System.out.println(\"\\nCreating new collection '\"+collectionName+\"' using command:\\n\"+createCollectionUrl+\"\\n\");\n\n      Map<String,Object> json = null;\n      try {\n        json = getJson(createCollectionUrl);\n      } catch (SolrServerException sse) {\n        // check if already exists\n        if (safeCheckCollectionExists(collectionListUrl, collectionName)) {\n          System.err.println(\"Collection '\"+collectionName+\"' already exists!\");\n          System.err.println(\"\\nChecked collection existence using Collections API command:\\n\"+collectionListUrl);\n        } else {\n          System.err.println(\"Failed to create collection '\"+collectionName+\"' due to: \"+sse.getMessage());\n        }\n        System.err.println();\n        return 1;\n      }\n\n      CharArr arr = new CharArr();\n      new JSONWriter(arr, 2).write(json);\n      System.out.println(arr.toString());\n      System.out.println();\n\n      return 0;\n    }\n\n","bugFix":["bafca15d8e408346a67f4282ad1143b88023893b"],"bugIntro":["e5cb964bc07f36b08873e376cd22afae94469862"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6c8a2521797f14d1d697a17a0069f5619cd211a6","date":1424361535,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.CreateCollectionTool#runCloudTool(CloudSolrClient,CommandLine).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.CreateCollectionTool#runCloudTool(CloudSolrClient,CommandLine).mjava","sourceNew":"    protected int runCloudTool(CloudSolrClient cloudSolrClient, CommandLine cli) throws Exception {\n      Set<String> liveNodes = cloudSolrClient.getZkStateReader().getClusterState().getLiveNodes();\n      if (liveNodes.isEmpty())\n        throw new IllegalStateException(\"No live nodes found! Cannot create a collection until \" +\n            \"there is at least 1 live node in the cluster.\");\n      String firstLiveNode = liveNodes.iterator().next();\n\n      String collectionName = cli.getOptionValue(\"name\");\n\n      // build a URL to create the collection\n      int numShards = optionAsInt(cli, \"shards\", 1);\n      int replicationFactor = optionAsInt(cli, \"replicationFactor\", 1);\n      int maxShardsPerNode = -1;\n\n      if (cli.hasOption(\"maxShardsPerNode\")) {\n        maxShardsPerNode = Integer.parseInt(cli.getOptionValue(\"maxShardsPerNode\"));\n      } else {\n        // need number of live nodes to determine maxShardsPerNode if it is not set\n        int numNodes = liveNodes.size();\n        maxShardsPerNode = ((numShards*replicationFactor)+numNodes-1)/numNodes;\n      }\n\n      String confname = cli.getOptionValue(\"confname\", collectionName);\n      boolean configExistsInZk =\n          cloudSolrClient.getZkStateReader().getZkClient().exists(\"/configs/\"+confname, true);\n\n      if (configExistsInZk) {\n        System.out.println(\"Re-using existing configuration directory \"+confname);\n      } else {\n        String configSet = cli.getOptionValue(\"confdir\", DEFAULT_CONFIG_SET);\n        File configSetDir = null;\n        // we try to be flexible and allow the user to specify a configuration directory instead of a configset name\n        File possibleConfigDir = new File(configSet);\n        if (possibleConfigDir.isDirectory()) {\n          configSetDir = possibleConfigDir;\n        } else {\n          File configsetsDir = new File(cli.getOptionValue(\"configsetsDir\"));\n          if (!configsetsDir.isDirectory())\n            throw new FileNotFoundException(configsetsDir.getAbsolutePath()+\" not found!\");\n\n          // upload the configset if it exists\n          configSetDir = new File(configsetsDir, configSet);\n          if (!configSetDir.isDirectory()) {\n            throw new FileNotFoundException(\"Specified config \" + configSet +\n                \" not found in \" + configsetsDir.getAbsolutePath());\n          }\n        }\n\n        File confDir = new File(configSetDir, \"conf\");\n        if (!confDir.isDirectory()) {\n          // config dir should contain a conf sub-directory but if not and there's a solrconfig.xml, then use it\n          if ((new File(configSetDir, \"solrconfig.xml\")).isFile()) {\n            confDir = configSetDir;\n          } else {\n            System.err.println(\"Specified configuration directory \"+configSetDir.getAbsolutePath()+\n                \" is invalid;\\nit should contain either conf sub-directory or solrconfig.xml\");\n            return 1;\n          }\n        }\n\n        // test to see if that config exists in ZK\n        System.out.println(\"Uploading \"+confDir.getAbsolutePath()+\n            \" for config \"+confname+\" to ZooKeeper at \"+cloudSolrClient.getZkHost());\n        cloudSolrClient.uploadConfig(confDir.toPath(), confname);\n      }\n\n      String baseUrl = cloudSolrClient.getZkStateReader().getBaseUrlForNodeName(firstLiveNode);\n\n      // since creating a collection is a heavy-weight operation, check for existence first\n      String collectionListUrl = baseUrl+\"/admin/collections?action=list\";\n      if (safeCheckCollectionExists(collectionListUrl, collectionName)) {\n        System.err.println(\"\\nCollection '\"+collectionName+\"' already exists!\");\n        System.err.println(\"\\nChecked collection existence using Collections API command:\\n\"+collectionListUrl);\n        System.err.println();\n        return 1;\n      }\n\n      // doesn't seem to exist ... try to create\n      String createCollectionUrl =\n          String.format(Locale.ROOT,\n              \"%s/admin/collections?action=CREATE&name=%s&numShards=%d&replicationFactor=%d&maxShardsPerNode=%d&collection.configName=%s\",\n              baseUrl,\n              collectionName,\n              numShards,\n              replicationFactor,\n              maxShardsPerNode,\n              confname);\n\n      System.out.println(\"\\nCreating new collection '\"+collectionName+\"' using command:\\n\"+createCollectionUrl+\"\\n\");\n\n      Map<String,Object> json = null;\n      try {\n        json = getJson(createCollectionUrl);\n      } catch (SolrServerException sse) {\n        // check if already exists\n        if (safeCheckCollectionExists(collectionListUrl, collectionName)) {\n          System.err.println(\"Collection '\"+collectionName+\"' already exists!\");\n          System.err.println(\"\\nChecked collection existence using Collections API command:\\n\"+collectionListUrl);\n        } else {\n          System.err.println(\"Failed to create collection '\"+collectionName+\"' due to: \"+sse.getMessage());\n        }\n        System.err.println();\n        return 1;\n      }\n\n      CharArr arr = new CharArr();\n      new JSONWriter(arr, 2).write(json);\n      System.out.println(arr.toString());\n      System.out.println();\n\n      return 0;\n    }\n\n","sourceOld":"    protected int runCloudTool(CloudSolrClient cloudSolrClient, CommandLine cli) throws Exception {\n      Set<String> liveNodes = cloudSolrClient.getZkStateReader().getClusterState().getLiveNodes();\n      if (liveNodes.isEmpty())\n        throw new IllegalStateException(\"No live nodes found! Cannot create a collection until \" +\n            \"there is at least 1 live node in the cluster.\");\n      String firstLiveNode = liveNodes.iterator().next();\n\n      String collectionName = cli.getOptionValue(\"name\");\n\n      // build a URL to create the collection\n      int numShards = optionAsInt(cli, \"shards\", 1);\n      int replicationFactor = optionAsInt(cli, \"replicationFactor\", 1);\n      int maxShardsPerNode = -1;\n\n      if (cli.hasOption(\"maxShardsPerNode\")) {\n        maxShardsPerNode = Integer.parseInt(cli.getOptionValue(\"maxShardsPerNode\"));\n      } else {\n        // need number of live nodes to determine maxShardsPerNode if it is not set\n        int numNodes = liveNodes.size();\n        maxShardsPerNode = ((numShards*replicationFactor)+numNodes-1)/numNodes;\n      }\n\n      String confname = cli.getOptionValue(\"confname\", collectionName);\n      boolean configExistsInZk =\n          cloudSolrClient.getZkStateReader().getZkClient().exists(\"/configs/\"+confname, true);\n\n      if (configExistsInZk) {\n        System.out.println(\"Re-using existing configuration directory \"+confname);\n      } else {\n        String configSet = cli.getOptionValue(\"confdir\", DEFAULT_CONFIG_SET);\n        File configSetDir = null;\n        // we try to be flexible and allow the user to specify a configuration directory instead of a configset name\n        File possibleConfigDir = new File(configSet);\n        if (possibleConfigDir.isDirectory()) {\n          configSetDir = possibleConfigDir;\n        } else {\n          File configsetsDir = new File(cli.getOptionValue(\"configsetsDir\"));\n          if (!configsetsDir.isDirectory())\n            throw new FileNotFoundException(configsetsDir.getAbsolutePath()+\" not found!\");\n\n          // upload the configset if it exists\n          configSetDir = new File(configsetsDir, configSet);\n          if (!configSetDir.isDirectory()) {\n            throw new FileNotFoundException(\"Specified config \" + configSet +\n                \" not found in \" + configsetsDir.getAbsolutePath());\n          }\n        }\n\n        File confDir = new File(configSetDir, \"conf\");\n        if (!confDir.isDirectory()) {\n          // config dir should contain a conf sub-directory but if not and there's a solrconfig.xml, then use it\n          if ((new File(configSetDir, \"solrconfig.xml\")).isFile()) {\n            confDir = configSetDir;\n          } else {\n            System.err.println(\"Specified configuration directory \"+configSetDir.getAbsolutePath()+\n                \" is invalid;\\nit should contain either conf sub-directory or solrconfig.xml\");\n            return 1;\n          }\n        }\n\n        // test to see if that config exists in ZK\n        System.out.println(\"Uploading \"+confDir.getAbsolutePath()+\n            \" for config \"+confname+\" to ZooKeeper at \"+cloudSolrClient.getZkHost());\n        ZkController.uploadConfigDir(cloudSolrClient.getZkStateReader().getZkClient(), confDir, confname);\n      }\n\n      String baseUrl = cloudSolrClient.getZkStateReader().getBaseUrlForNodeName(firstLiveNode);\n\n      // since creating a collection is a heavy-weight operation, check for existence first\n      String collectionListUrl = baseUrl+\"/admin/collections?action=list\";\n      if (safeCheckCollectionExists(collectionListUrl, collectionName)) {\n        System.err.println(\"\\nCollection '\"+collectionName+\"' already exists!\");\n        System.err.println(\"\\nChecked collection existence using Collections API command:\\n\"+collectionListUrl);\n        System.err.println();\n        return 1;\n      }\n\n      // doesn't seem to exist ... try to create\n      String createCollectionUrl =\n          String.format(Locale.ROOT,\n              \"%s/admin/collections?action=CREATE&name=%s&numShards=%d&replicationFactor=%d&maxShardsPerNode=%d&collection.configName=%s\",\n              baseUrl,\n              collectionName,\n              numShards,\n              replicationFactor,\n              maxShardsPerNode,\n              confname);\n\n      System.out.println(\"\\nCreating new collection '\"+collectionName+\"' using command:\\n\"+createCollectionUrl+\"\\n\");\n\n      Map<String,Object> json = null;\n      try {\n        json = getJson(createCollectionUrl);\n      } catch (SolrServerException sse) {\n        // check if already exists\n        if (safeCheckCollectionExists(collectionListUrl, collectionName)) {\n          System.err.println(\"Collection '\"+collectionName+\"' already exists!\");\n          System.err.println(\"\\nChecked collection existence using Collections API command:\\n\"+collectionListUrl);\n        } else {\n          System.err.println(\"Failed to create collection '\"+collectionName+\"' due to: \"+sse.getMessage());\n        }\n        System.err.println();\n        return 1;\n      }\n\n      CharArr arr = new CharArr();\n      new JSONWriter(arr, 2).write(json);\n      System.out.println(arr.toString());\n      System.out.println();\n\n      return 0;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1390137e395d2f07f9ba5b8c43d293befe84d563","date":1427947685,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.CreateCollectionTool#runCloudTool(CloudSolrClient,CommandLine).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.CreateCollectionTool#runCloudTool(CloudSolrClient,CommandLine).mjava","sourceNew":"    protected int runCloudTool(CloudSolrClient cloudSolrClient, CommandLine cli) throws Exception {\n      Set<String> liveNodes = cloudSolrClient.getZkStateReader().getClusterState().getLiveNodes();\n      if (liveNodes.isEmpty())\n        throw new IllegalStateException(\"No live nodes found! Cannot create a collection until \" +\n            \"there is at least 1 live node in the cluster.\");\n      String firstLiveNode = liveNodes.iterator().next();\n\n      String collectionName = cli.getOptionValue(NAME);\n\n      // build a URL to create the collection\n      int numShards = optionAsInt(cli, \"shards\", 1);\n      int replicationFactor = optionAsInt(cli, \"replicationFactor\", 1);\n      int maxShardsPerNode = -1;\n\n      if (cli.hasOption(\"maxShardsPerNode\")) {\n        maxShardsPerNode = Integer.parseInt(cli.getOptionValue(\"maxShardsPerNode\"));\n      } else {\n        // need number of live nodes to determine maxShardsPerNode if it is not set\n        int numNodes = liveNodes.size();\n        maxShardsPerNode = ((numShards*replicationFactor)+numNodes-1)/numNodes;\n      }\n\n      String confname = cli.getOptionValue(\"confname\", collectionName);\n      boolean configExistsInZk =\n          cloudSolrClient.getZkStateReader().getZkClient().exists(\"/configs/\"+confname, true);\n\n      if (configExistsInZk) {\n        System.out.println(\"Re-using existing configuration directory \"+confname);\n      } else {\n        String configSet = cli.getOptionValue(\"confdir\", DEFAULT_CONFIG_SET);\n        File configSetDir = null;\n        // we try to be flexible and allow the user to specify a configuration directory instead of a configset name\n        File possibleConfigDir = new File(configSet);\n        if (possibleConfigDir.isDirectory()) {\n          configSetDir = possibleConfigDir;\n        } else {\n          File configsetsDir = new File(cli.getOptionValue(\"configsetsDir\"));\n          if (!configsetsDir.isDirectory())\n            throw new FileNotFoundException(configsetsDir.getAbsolutePath()+\" not found!\");\n\n          // upload the configset if it exists\n          configSetDir = new File(configsetsDir, configSet);\n          if (!configSetDir.isDirectory()) {\n            throw new FileNotFoundException(\"Specified config \" + configSet +\n                \" not found in \" + configsetsDir.getAbsolutePath());\n          }\n        }\n\n        File confDir = new File(configSetDir, \"conf\");\n        if (!confDir.isDirectory()) {\n          // config dir should contain a conf sub-directory but if not and there's a solrconfig.xml, then use it\n          if ((new File(configSetDir, \"solrconfig.xml\")).isFile()) {\n            confDir = configSetDir;\n          } else {\n            System.err.println(\"Specified configuration directory \"+configSetDir.getAbsolutePath()+\n                \" is invalid;\\nit should contain either conf sub-directory or solrconfig.xml\");\n            return 1;\n          }\n        }\n\n        // test to see if that config exists in ZK\n        System.out.println(\"Uploading \"+confDir.getAbsolutePath()+\n            \" for config \"+confname+\" to ZooKeeper at \"+cloudSolrClient.getZkHost());\n        cloudSolrClient.uploadConfig(confDir.toPath(), confname);\n      }\n\n      String baseUrl = cloudSolrClient.getZkStateReader().getBaseUrlForNodeName(firstLiveNode);\n\n      // since creating a collection is a heavy-weight operation, check for existence first\n      String collectionListUrl = baseUrl+\"/admin/collections?action=list\";\n      if (safeCheckCollectionExists(collectionListUrl, collectionName)) {\n        System.err.println(\"\\nCollection '\"+collectionName+\"' already exists!\");\n        System.err.println(\"\\nChecked collection existence using Collections API command:\\n\"+collectionListUrl);\n        System.err.println();\n        return 1;\n      }\n\n      // doesn't seem to exist ... try to create\n      String createCollectionUrl =\n          String.format(Locale.ROOT,\n              \"%s/admin/collections?action=CREATE&name=%s&numShards=%d&replicationFactor=%d&maxShardsPerNode=%d&collection.configName=%s\",\n              baseUrl,\n              collectionName,\n              numShards,\n              replicationFactor,\n              maxShardsPerNode,\n              confname);\n\n      System.out.println(\"\\nCreating new collection '\"+collectionName+\"' using command:\\n\"+createCollectionUrl+\"\\n\");\n\n      Map<String,Object> json = null;\n      try {\n        json = getJson(createCollectionUrl);\n      } catch (SolrServerException sse) {\n        // check if already exists\n        if (safeCheckCollectionExists(collectionListUrl, collectionName)) {\n          System.err.println(\"Collection '\"+collectionName+\"' already exists!\");\n          System.err.println(\"\\nChecked collection existence using Collections API command:\\n\"+collectionListUrl);\n        } else {\n          System.err.println(\"Failed to create collection '\"+collectionName+\"' due to: \"+sse.getMessage());\n        }\n        System.err.println();\n        return 1;\n      }\n\n      CharArr arr = new CharArr();\n      new JSONWriter(arr, 2).write(json);\n      System.out.println(arr.toString());\n      System.out.println();\n\n      return 0;\n    }\n\n","sourceOld":"    protected int runCloudTool(CloudSolrClient cloudSolrClient, CommandLine cli) throws Exception {\n      Set<String> liveNodes = cloudSolrClient.getZkStateReader().getClusterState().getLiveNodes();\n      if (liveNodes.isEmpty())\n        throw new IllegalStateException(\"No live nodes found! Cannot create a collection until \" +\n            \"there is at least 1 live node in the cluster.\");\n      String firstLiveNode = liveNodes.iterator().next();\n\n      String collectionName = cli.getOptionValue(\"name\");\n\n      // build a URL to create the collection\n      int numShards = optionAsInt(cli, \"shards\", 1);\n      int replicationFactor = optionAsInt(cli, \"replicationFactor\", 1);\n      int maxShardsPerNode = -1;\n\n      if (cli.hasOption(\"maxShardsPerNode\")) {\n        maxShardsPerNode = Integer.parseInt(cli.getOptionValue(\"maxShardsPerNode\"));\n      } else {\n        // need number of live nodes to determine maxShardsPerNode if it is not set\n        int numNodes = liveNodes.size();\n        maxShardsPerNode = ((numShards*replicationFactor)+numNodes-1)/numNodes;\n      }\n\n      String confname = cli.getOptionValue(\"confname\", collectionName);\n      boolean configExistsInZk =\n          cloudSolrClient.getZkStateReader().getZkClient().exists(\"/configs/\"+confname, true);\n\n      if (configExistsInZk) {\n        System.out.println(\"Re-using existing configuration directory \"+confname);\n      } else {\n        String configSet = cli.getOptionValue(\"confdir\", DEFAULT_CONFIG_SET);\n        File configSetDir = null;\n        // we try to be flexible and allow the user to specify a configuration directory instead of a configset name\n        File possibleConfigDir = new File(configSet);\n        if (possibleConfigDir.isDirectory()) {\n          configSetDir = possibleConfigDir;\n        } else {\n          File configsetsDir = new File(cli.getOptionValue(\"configsetsDir\"));\n          if (!configsetsDir.isDirectory())\n            throw new FileNotFoundException(configsetsDir.getAbsolutePath()+\" not found!\");\n\n          // upload the configset if it exists\n          configSetDir = new File(configsetsDir, configSet);\n          if (!configSetDir.isDirectory()) {\n            throw new FileNotFoundException(\"Specified config \" + configSet +\n                \" not found in \" + configsetsDir.getAbsolutePath());\n          }\n        }\n\n        File confDir = new File(configSetDir, \"conf\");\n        if (!confDir.isDirectory()) {\n          // config dir should contain a conf sub-directory but if not and there's a solrconfig.xml, then use it\n          if ((new File(configSetDir, \"solrconfig.xml\")).isFile()) {\n            confDir = configSetDir;\n          } else {\n            System.err.println(\"Specified configuration directory \"+configSetDir.getAbsolutePath()+\n                \" is invalid;\\nit should contain either conf sub-directory or solrconfig.xml\");\n            return 1;\n          }\n        }\n\n        // test to see if that config exists in ZK\n        System.out.println(\"Uploading \"+confDir.getAbsolutePath()+\n            \" for config \"+confname+\" to ZooKeeper at \"+cloudSolrClient.getZkHost());\n        cloudSolrClient.uploadConfig(confDir.toPath(), confname);\n      }\n\n      String baseUrl = cloudSolrClient.getZkStateReader().getBaseUrlForNodeName(firstLiveNode);\n\n      // since creating a collection is a heavy-weight operation, check for existence first\n      String collectionListUrl = baseUrl+\"/admin/collections?action=list\";\n      if (safeCheckCollectionExists(collectionListUrl, collectionName)) {\n        System.err.println(\"\\nCollection '\"+collectionName+\"' already exists!\");\n        System.err.println(\"\\nChecked collection existence using Collections API command:\\n\"+collectionListUrl);\n        System.err.println();\n        return 1;\n      }\n\n      // doesn't seem to exist ... try to create\n      String createCollectionUrl =\n          String.format(Locale.ROOT,\n              \"%s/admin/collections?action=CREATE&name=%s&numShards=%d&replicationFactor=%d&maxShardsPerNode=%d&collection.configName=%s\",\n              baseUrl,\n              collectionName,\n              numShards,\n              replicationFactor,\n              maxShardsPerNode,\n              confname);\n\n      System.out.println(\"\\nCreating new collection '\"+collectionName+\"' using command:\\n\"+createCollectionUrl+\"\\n\");\n\n      Map<String,Object> json = null;\n      try {\n        json = getJson(createCollectionUrl);\n      } catch (SolrServerException sse) {\n        // check if already exists\n        if (safeCheckCollectionExists(collectionListUrl, collectionName)) {\n          System.err.println(\"Collection '\"+collectionName+\"' already exists!\");\n          System.err.println(\"\\nChecked collection existence using Collections API command:\\n\"+collectionListUrl);\n        } else {\n          System.err.println(\"Failed to create collection '\"+collectionName+\"' due to: \"+sse.getMessage());\n        }\n        System.err.println();\n        return 1;\n      }\n\n      CharArr arr = new CharArr();\n      new JSONWriter(arr, 2).write(json);\n      System.out.println(arr.toString());\n      System.out.println();\n\n      return 0;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d2638f781be724518ff6c2263d14a48cf6e68017","date":1427989059,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.CreateCollectionTool#runCloudTool(CloudSolrClient,CommandLine).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.CreateCollectionTool#runCloudTool(CloudSolrClient,CommandLine).mjava","sourceNew":"    protected int runCloudTool(CloudSolrClient cloudSolrClient, CommandLine cli) throws Exception {\n      Set<String> liveNodes = cloudSolrClient.getZkStateReader().getClusterState().getLiveNodes();\n      if (liveNodes.isEmpty())\n        throw new IllegalStateException(\"No live nodes found! Cannot create a collection until \" +\n            \"there is at least 1 live node in the cluster.\");\n      String firstLiveNode = liveNodes.iterator().next();\n\n      String collectionName = cli.getOptionValue(NAME);\n\n      // build a URL to create the collection\n      int numShards = optionAsInt(cli, \"shards\", 1);\n      int replicationFactor = optionAsInt(cli, \"replicationFactor\", 1);\n      int maxShardsPerNode = -1;\n\n      if (cli.hasOption(\"maxShardsPerNode\")) {\n        maxShardsPerNode = Integer.parseInt(cli.getOptionValue(\"maxShardsPerNode\"));\n      } else {\n        // need number of live nodes to determine maxShardsPerNode if it is not set\n        int numNodes = liveNodes.size();\n        maxShardsPerNode = ((numShards*replicationFactor)+numNodes-1)/numNodes;\n      }\n\n      String confname = cli.getOptionValue(\"confname\", collectionName);\n      boolean configExistsInZk =\n          cloudSolrClient.getZkStateReader().getZkClient().exists(\"/configs/\"+confname, true);\n\n      if (configExistsInZk) {\n        System.out.println(\"Re-using existing configuration directory \"+confname);\n      } else {\n        String configSet = cli.getOptionValue(\"confdir\", DEFAULT_CONFIG_SET);\n        File configSetDir = null;\n        // we try to be flexible and allow the user to specify a configuration directory instead of a configset name\n        File possibleConfigDir = new File(configSet);\n        if (possibleConfigDir.isDirectory()) {\n          configSetDir = possibleConfigDir;\n        } else {\n          File configsetsDir = new File(cli.getOptionValue(\"configsetsDir\"));\n          if (!configsetsDir.isDirectory())\n            throw new FileNotFoundException(configsetsDir.getAbsolutePath()+\" not found!\");\n\n          // upload the configset if it exists\n          configSetDir = new File(configsetsDir, configSet);\n          if (!configSetDir.isDirectory()) {\n            throw new FileNotFoundException(\"Specified config \" + configSet +\n                \" not found in \" + configsetsDir.getAbsolutePath());\n          }\n        }\n\n        File confDir = new File(configSetDir, \"conf\");\n        if (!confDir.isDirectory()) {\n          // config dir should contain a conf sub-directory but if not and there's a solrconfig.xml, then use it\n          if ((new File(configSetDir, \"solrconfig.xml\")).isFile()) {\n            confDir = configSetDir;\n          } else {\n            System.err.println(\"Specified configuration directory \"+configSetDir.getAbsolutePath()+\n                \" is invalid;\\nit should contain either conf sub-directory or solrconfig.xml\");\n            return 1;\n          }\n        }\n\n        // test to see if that config exists in ZK\n        System.out.println(\"Uploading \"+confDir.getAbsolutePath()+\n            \" for config \"+confname+\" to ZooKeeper at \"+cloudSolrClient.getZkHost());\n        cloudSolrClient.uploadConfig(confDir.toPath(), confname);\n      }\n\n      String baseUrl = cloudSolrClient.getZkStateReader().getBaseUrlForNodeName(firstLiveNode);\n\n      // since creating a collection is a heavy-weight operation, check for existence first\n      String collectionListUrl = baseUrl+\"/admin/collections?action=list\";\n      if (safeCheckCollectionExists(collectionListUrl, collectionName)) {\n        System.err.println(\"\\nCollection '\"+collectionName+\"' already exists!\");\n        System.err.println(\"\\nChecked collection existence using Collections API command:\\n\"+collectionListUrl);\n        System.err.println();\n        return 1;\n      }\n\n      // doesn't seem to exist ... try to create\n      String createCollectionUrl =\n          String.format(Locale.ROOT,\n              \"%s/admin/collections?action=CREATE&name=%s&numShards=%d&replicationFactor=%d&maxShardsPerNode=%d&collection.configName=%s\",\n              baseUrl,\n              collectionName,\n              numShards,\n              replicationFactor,\n              maxShardsPerNode,\n              confname);\n\n      System.out.println(\"\\nCreating new collection '\"+collectionName+\"' using command:\\n\"+createCollectionUrl+\"\\n\");\n\n      Map<String,Object> json = null;\n      try {\n        json = getJson(createCollectionUrl);\n      } catch (SolrServerException sse) {\n        // check if already exists\n        if (safeCheckCollectionExists(collectionListUrl, collectionName)) {\n          System.err.println(\"Collection '\"+collectionName+\"' already exists!\");\n          System.err.println(\"\\nChecked collection existence using Collections API command:\\n\"+collectionListUrl);\n        } else {\n          System.err.println(\"Failed to create collection '\"+collectionName+\"' due to: \"+sse.getMessage());\n        }\n        System.err.println();\n        return 1;\n      }\n\n      CharArr arr = new CharArr();\n      new JSONWriter(arr, 2).write(json);\n      System.out.println(arr.toString());\n      System.out.println();\n\n      return 0;\n    }\n\n","sourceOld":"    protected int runCloudTool(CloudSolrClient cloudSolrClient, CommandLine cli) throws Exception {\n      Set<String> liveNodes = cloudSolrClient.getZkStateReader().getClusterState().getLiveNodes();\n      if (liveNodes.isEmpty())\n        throw new IllegalStateException(\"No live nodes found! Cannot create a collection until \" +\n            \"there is at least 1 live node in the cluster.\");\n      String firstLiveNode = liveNodes.iterator().next();\n\n      String collectionName = cli.getOptionValue(\"name\");\n\n      // build a URL to create the collection\n      int numShards = optionAsInt(cli, \"shards\", 1);\n      int replicationFactor = optionAsInt(cli, \"replicationFactor\", 1);\n      int maxShardsPerNode = -1;\n\n      if (cli.hasOption(\"maxShardsPerNode\")) {\n        maxShardsPerNode = Integer.parseInt(cli.getOptionValue(\"maxShardsPerNode\"));\n      } else {\n        // need number of live nodes to determine maxShardsPerNode if it is not set\n        int numNodes = liveNodes.size();\n        maxShardsPerNode = ((numShards*replicationFactor)+numNodes-1)/numNodes;\n      }\n\n      String confname = cli.getOptionValue(\"confname\", collectionName);\n      boolean configExistsInZk =\n          cloudSolrClient.getZkStateReader().getZkClient().exists(\"/configs/\"+confname, true);\n\n      if (configExistsInZk) {\n        System.out.println(\"Re-using existing configuration directory \"+confname);\n      } else {\n        String configSet = cli.getOptionValue(\"confdir\", DEFAULT_CONFIG_SET);\n        File configSetDir = null;\n        // we try to be flexible and allow the user to specify a configuration directory instead of a configset name\n        File possibleConfigDir = new File(configSet);\n        if (possibleConfigDir.isDirectory()) {\n          configSetDir = possibleConfigDir;\n        } else {\n          File configsetsDir = new File(cli.getOptionValue(\"configsetsDir\"));\n          if (!configsetsDir.isDirectory())\n            throw new FileNotFoundException(configsetsDir.getAbsolutePath()+\" not found!\");\n\n          // upload the configset if it exists\n          configSetDir = new File(configsetsDir, configSet);\n          if (!configSetDir.isDirectory()) {\n            throw new FileNotFoundException(\"Specified config \" + configSet +\n                \" not found in \" + configsetsDir.getAbsolutePath());\n          }\n        }\n\n        File confDir = new File(configSetDir, \"conf\");\n        if (!confDir.isDirectory()) {\n          // config dir should contain a conf sub-directory but if not and there's a solrconfig.xml, then use it\n          if ((new File(configSetDir, \"solrconfig.xml\")).isFile()) {\n            confDir = configSetDir;\n          } else {\n            System.err.println(\"Specified configuration directory \"+configSetDir.getAbsolutePath()+\n                \" is invalid;\\nit should contain either conf sub-directory or solrconfig.xml\");\n            return 1;\n          }\n        }\n\n        // test to see if that config exists in ZK\n        System.out.println(\"Uploading \"+confDir.getAbsolutePath()+\n            \" for config \"+confname+\" to ZooKeeper at \"+cloudSolrClient.getZkHost());\n        cloudSolrClient.uploadConfig(confDir.toPath(), confname);\n      }\n\n      String baseUrl = cloudSolrClient.getZkStateReader().getBaseUrlForNodeName(firstLiveNode);\n\n      // since creating a collection is a heavy-weight operation, check for existence first\n      String collectionListUrl = baseUrl+\"/admin/collections?action=list\";\n      if (safeCheckCollectionExists(collectionListUrl, collectionName)) {\n        System.err.println(\"\\nCollection '\"+collectionName+\"' already exists!\");\n        System.err.println(\"\\nChecked collection existence using Collections API command:\\n\"+collectionListUrl);\n        System.err.println();\n        return 1;\n      }\n\n      // doesn't seem to exist ... try to create\n      String createCollectionUrl =\n          String.format(Locale.ROOT,\n              \"%s/admin/collections?action=CREATE&name=%s&numShards=%d&replicationFactor=%d&maxShardsPerNode=%d&collection.configName=%s\",\n              baseUrl,\n              collectionName,\n              numShards,\n              replicationFactor,\n              maxShardsPerNode,\n              confname);\n\n      System.out.println(\"\\nCreating new collection '\"+collectionName+\"' using command:\\n\"+createCollectionUrl+\"\\n\");\n\n      Map<String,Object> json = null;\n      try {\n        json = getJson(createCollectionUrl);\n      } catch (SolrServerException sse) {\n        // check if already exists\n        if (safeCheckCollectionExists(collectionListUrl, collectionName)) {\n          System.err.println(\"Collection '\"+collectionName+\"' already exists!\");\n          System.err.println(\"\\nChecked collection existence using Collections API command:\\n\"+collectionListUrl);\n        } else {\n          System.err.println(\"Failed to create collection '\"+collectionName+\"' due to: \"+sse.getMessage());\n        }\n        System.err.println();\n        return 1;\n      }\n\n      CharArr arr = new CharArr();\n      new JSONWriter(arr, 2).write(json);\n      System.out.println(arr.toString());\n      System.out.println();\n\n      return 0;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e5cb964bc07f36b08873e376cd22afae94469862","date":1431006837,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.CreateCollectionTool#runCloudTool(CloudSolrClient,CommandLine).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.CreateCollectionTool#runCloudTool(CloudSolrClient,CommandLine).mjava","sourceNew":"    protected int runCloudTool(CloudSolrClient cloudSolrClient, CommandLine cli) throws Exception {\n      Set<String> liveNodes = cloudSolrClient.getZkStateReader().getClusterState().getLiveNodes();\n      if (liveNodes.isEmpty())\n        throw new IllegalStateException(\"No live nodes found! Cannot create a collection until \" +\n            \"there is at least 1 live node in the cluster.\");\n      String firstLiveNode = liveNodes.iterator().next();\n\n      String collectionName = cli.getOptionValue(NAME);\n\n      // build a URL to create the collection\n      int numShards = optionAsInt(cli, \"shards\", 1);\n      int replicationFactor = optionAsInt(cli, \"replicationFactor\", 1);\n      int maxShardsPerNode = -1;\n\n      if (cli.hasOption(\"maxShardsPerNode\")) {\n        maxShardsPerNode = Integer.parseInt(cli.getOptionValue(\"maxShardsPerNode\"));\n      } else {\n        // need number of live nodes to determine maxShardsPerNode if it is not set\n        int numNodes = liveNodes.size();\n        maxShardsPerNode = ((numShards*replicationFactor)+numNodes-1)/numNodes;\n      }\n\n      String confname = cli.getOptionValue(\"confname\", collectionName);\n      boolean configExistsInZk =\n          cloudSolrClient.getZkStateReader().getZkClient().exists(\"/configs/\"+confname, true);\n\n      if (\".system\".equals(collectionName)) {\n        //do nothing\n      } else if (configExistsInZk) {\n        System.out.println(\"Re-using existing configuration directory \"+confname);\n      } else {\n        String configSet = cli.getOptionValue(\"confdir\", DEFAULT_CONFIG_SET);\n        File configSetDir = null;\n        // we try to be flexible and allow the user to specify a configuration directory instead of a configset name\n        File possibleConfigDir = new File(configSet);\n        if (possibleConfigDir.isDirectory()) {\n          configSetDir = possibleConfigDir;\n        } else {\n          File configsetsDir = new File(cli.getOptionValue(\"configsetsDir\"));\n          if (!configsetsDir.isDirectory())\n            throw new FileNotFoundException(configsetsDir.getAbsolutePath()+\" not found!\");\n\n          // upload the configset if it exists\n          configSetDir = new File(configsetsDir, configSet);\n          if (!configSetDir.isDirectory()) {\n            throw new FileNotFoundException(\"Specified config \" + configSet +\n                \" not found in \" + configsetsDir.getAbsolutePath());\n          }\n        }\n\n        File confDir = new File(configSetDir, \"conf\");\n        if (!confDir.isDirectory()) {\n          // config dir should contain a conf sub-directory but if not and there's a solrconfig.xml, then use it\n          if ((new File(configSetDir, \"solrconfig.xml\")).isFile()) {\n            confDir = configSetDir;\n          } else {\n            System.err.println(\"Specified configuration directory \"+configSetDir.getAbsolutePath()+\n                \" is invalid;\\nit should contain either conf sub-directory or solrconfig.xml\");\n            return 1;\n          }\n        }\n\n        // test to see if that config exists in ZK\n        System.out.println(\"Uploading \"+confDir.getAbsolutePath()+\n            \" for config \"+confname+\" to ZooKeeper at \"+cloudSolrClient.getZkHost());\n        cloudSolrClient.uploadConfig(confDir.toPath(), confname);\n      }\n\n      String baseUrl = cloudSolrClient.getZkStateReader().getBaseUrlForNodeName(firstLiveNode);\n\n      // since creating a collection is a heavy-weight operation, check for existence first\n      String collectionListUrl = baseUrl+\"/admin/collections?action=list\";\n      if (safeCheckCollectionExists(collectionListUrl, collectionName)) {\n        System.err.println(\"\\nCollection '\"+collectionName+\"' already exists!\");\n        System.err.println(\"\\nChecked collection existence using Collections API command:\\n\"+collectionListUrl);\n        System.err.println();\n        return 1;\n      }\n\n      // doesn't seem to exist ... try to create\n      String createCollectionUrl =\n          String.format(Locale.ROOT,\n              \"%s/admin/collections?action=CREATE&name=%s&numShards=%d&replicationFactor=%d&maxShardsPerNode=%d&collection.configName=%s\",\n              baseUrl,\n              collectionName,\n              numShards,\n              replicationFactor,\n              maxShardsPerNode,\n              confname);\n\n      System.out.println(\"\\nCreating new collection '\"+collectionName+\"' using command:\\n\"+createCollectionUrl+\"\\n\");\n\n      Map<String,Object> json = null;\n      try {\n        json = getJson(createCollectionUrl);\n      } catch (SolrServerException sse) {\n        // check if already exists\n        if (safeCheckCollectionExists(collectionListUrl, collectionName)) {\n          System.err.println(\"Collection '\"+collectionName+\"' already exists!\");\n          System.err.println(\"\\nChecked collection existence using Collections API command:\\n\"+collectionListUrl);\n        } else {\n          System.err.println(\"Failed to create collection '\"+collectionName+\"' due to: \"+sse.getMessage());\n        }\n        System.err.println();\n        return 1;\n      }\n\n      CharArr arr = new CharArr();\n      new JSONWriter(arr, 2).write(json);\n      System.out.println(arr.toString());\n      System.out.println();\n\n      return 0;\n    }\n\n","sourceOld":"    protected int runCloudTool(CloudSolrClient cloudSolrClient, CommandLine cli) throws Exception {\n      Set<String> liveNodes = cloudSolrClient.getZkStateReader().getClusterState().getLiveNodes();\n      if (liveNodes.isEmpty())\n        throw new IllegalStateException(\"No live nodes found! Cannot create a collection until \" +\n            \"there is at least 1 live node in the cluster.\");\n      String firstLiveNode = liveNodes.iterator().next();\n\n      String collectionName = cli.getOptionValue(NAME);\n\n      // build a URL to create the collection\n      int numShards = optionAsInt(cli, \"shards\", 1);\n      int replicationFactor = optionAsInt(cli, \"replicationFactor\", 1);\n      int maxShardsPerNode = -1;\n\n      if (cli.hasOption(\"maxShardsPerNode\")) {\n        maxShardsPerNode = Integer.parseInt(cli.getOptionValue(\"maxShardsPerNode\"));\n      } else {\n        // need number of live nodes to determine maxShardsPerNode if it is not set\n        int numNodes = liveNodes.size();\n        maxShardsPerNode = ((numShards*replicationFactor)+numNodes-1)/numNodes;\n      }\n\n      String confname = cli.getOptionValue(\"confname\", collectionName);\n      boolean configExistsInZk =\n          cloudSolrClient.getZkStateReader().getZkClient().exists(\"/configs/\"+confname, true);\n\n      if (configExistsInZk) {\n        System.out.println(\"Re-using existing configuration directory \"+confname);\n      } else {\n        String configSet = cli.getOptionValue(\"confdir\", DEFAULT_CONFIG_SET);\n        File configSetDir = null;\n        // we try to be flexible and allow the user to specify a configuration directory instead of a configset name\n        File possibleConfigDir = new File(configSet);\n        if (possibleConfigDir.isDirectory()) {\n          configSetDir = possibleConfigDir;\n        } else {\n          File configsetsDir = new File(cli.getOptionValue(\"configsetsDir\"));\n          if (!configsetsDir.isDirectory())\n            throw new FileNotFoundException(configsetsDir.getAbsolutePath()+\" not found!\");\n\n          // upload the configset if it exists\n          configSetDir = new File(configsetsDir, configSet);\n          if (!configSetDir.isDirectory()) {\n            throw new FileNotFoundException(\"Specified config \" + configSet +\n                \" not found in \" + configsetsDir.getAbsolutePath());\n          }\n        }\n\n        File confDir = new File(configSetDir, \"conf\");\n        if (!confDir.isDirectory()) {\n          // config dir should contain a conf sub-directory but if not and there's a solrconfig.xml, then use it\n          if ((new File(configSetDir, \"solrconfig.xml\")).isFile()) {\n            confDir = configSetDir;\n          } else {\n            System.err.println(\"Specified configuration directory \"+configSetDir.getAbsolutePath()+\n                \" is invalid;\\nit should contain either conf sub-directory or solrconfig.xml\");\n            return 1;\n          }\n        }\n\n        // test to see if that config exists in ZK\n        System.out.println(\"Uploading \"+confDir.getAbsolutePath()+\n            \" for config \"+confname+\" to ZooKeeper at \"+cloudSolrClient.getZkHost());\n        cloudSolrClient.uploadConfig(confDir.toPath(), confname);\n      }\n\n      String baseUrl = cloudSolrClient.getZkStateReader().getBaseUrlForNodeName(firstLiveNode);\n\n      // since creating a collection is a heavy-weight operation, check for existence first\n      String collectionListUrl = baseUrl+\"/admin/collections?action=list\";\n      if (safeCheckCollectionExists(collectionListUrl, collectionName)) {\n        System.err.println(\"\\nCollection '\"+collectionName+\"' already exists!\");\n        System.err.println(\"\\nChecked collection existence using Collections API command:\\n\"+collectionListUrl);\n        System.err.println();\n        return 1;\n      }\n\n      // doesn't seem to exist ... try to create\n      String createCollectionUrl =\n          String.format(Locale.ROOT,\n              \"%s/admin/collections?action=CREATE&name=%s&numShards=%d&replicationFactor=%d&maxShardsPerNode=%d&collection.configName=%s\",\n              baseUrl,\n              collectionName,\n              numShards,\n              replicationFactor,\n              maxShardsPerNode,\n              confname);\n\n      System.out.println(\"\\nCreating new collection '\"+collectionName+\"' using command:\\n\"+createCollectionUrl+\"\\n\");\n\n      Map<String,Object> json = null;\n      try {\n        json = getJson(createCollectionUrl);\n      } catch (SolrServerException sse) {\n        // check if already exists\n        if (safeCheckCollectionExists(collectionListUrl, collectionName)) {\n          System.err.println(\"Collection '\"+collectionName+\"' already exists!\");\n          System.err.println(\"\\nChecked collection existence using Collections API command:\\n\"+collectionListUrl);\n        } else {\n          System.err.println(\"Failed to create collection '\"+collectionName+\"' due to: \"+sse.getMessage());\n        }\n        System.err.println();\n        return 1;\n      }\n\n      CharArr arr = new CharArr();\n      new JSONWriter(arr, 2).write(json);\n      System.out.println(arr.toString());\n      System.out.println();\n\n      return 0;\n    }\n\n","bugFix":["3d1db6f36874f1979916ccb702329fbb09602af8"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4ca20be81c9284c840498143264e583ccbb8525a","date":1438705932,"type":3,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.CreateCollectionTool#runCloudTool(CloudSolrClient,CommandLine).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.CreateCollectionTool#runCloudTool(CloudSolrClient,CommandLine).mjava","sourceNew":"    protected void runCloudTool(CloudSolrClient cloudSolrClient, CommandLine cli) throws Exception {\n\n      Set<String> liveNodes = cloudSolrClient.getZkStateReader().getClusterState().getLiveNodes();\n      if (liveNodes.isEmpty())\n        throw new IllegalStateException(\"No live nodes found! Cannot create a collection until \" +\n            \"there is at least 1 live node in the cluster.\");\n      \n      String baseUrl = cli.getOptionValue(\"solrUrl\");\n      if (baseUrl == null) {\n        String firstLiveNode = liveNodes.iterator().next();\n        baseUrl = cloudSolrClient.getZkStateReader().getBaseUrlForNodeName(firstLiveNode);\n      }\n\n      String collectionName = cli.getOptionValue(NAME);\n\n      // build a URL to create the collection\n      int numShards = optionAsInt(cli, \"shards\", 1);\n      int replicationFactor = optionAsInt(cli, \"replicationFactor\", 1);\n      int maxShardsPerNode = -1;\n\n      if (cli.hasOption(\"maxShardsPerNode\")) {\n        maxShardsPerNode = Integer.parseInt(cli.getOptionValue(\"maxShardsPerNode\"));\n      } else {\n        // need number of live nodes to determine maxShardsPerNode if it is not set\n        int numNodes = liveNodes.size();\n        maxShardsPerNode = ((numShards*replicationFactor)+numNodes-1)/numNodes;\n      }\n\n      String confname = cli.getOptionValue(\"confname\", collectionName);\n      boolean configExistsInZk =\n          cloudSolrClient.getZkStateReader().getZkClient().exists(\"/configs/\" + confname, true);\n\n      if (\".system\".equals(collectionName)) {\n        //do nothing\n      } else if (configExistsInZk) {\n        echo(\"Re-using existing configuration directory \"+confname);\n      } else {\n        String configSet = cli.getOptionValue(\"confdir\", DEFAULT_CONFIG_SET);\n        File configSetDir = null;\n        // we try to be flexible and allow the user to specify a configuration directory instead of a configset name\n        File possibleConfigDir = new File(configSet);\n        if (possibleConfigDir.isDirectory()) {\n          configSetDir = possibleConfigDir;\n        } else {\n          File configsetsDir = new File(cli.getOptionValue(\"configsetsDir\"));\n          if (!configsetsDir.isDirectory())\n            throw new FileNotFoundException(configsetsDir.getAbsolutePath()+\" not found!\");\n\n          // upload the configset if it exists\n          configSetDir = new File(configsetsDir, configSet);\n          if (!configSetDir.isDirectory()) {\n            throw new FileNotFoundException(\"Specified config \" + configSet +\n                \" not found in \" + configsetsDir.getAbsolutePath());\n          }\n        }\n\n        File confDir = new File(configSetDir, \"conf\");\n        if (!confDir.isDirectory()) {\n          // config dir should contain a conf sub-directory but if not and there's a solrconfig.xml, then use it\n          if ((new File(configSetDir, \"solrconfig.xml\")).isFile()) {\n            confDir = configSetDir;\n          } else {\n            throw new IllegalArgumentException(\"Specified configuration directory \"+configSetDir.getAbsolutePath()+\n                \" is invalid;\\nit should contain either conf sub-directory or solrconfig.xml\");\n          }\n        }\n\n        // test to see if that config exists in ZK\n        echo(\"Uploading \"+confDir.getAbsolutePath()+\n            \" for config \"+confname+\" to ZooKeeper at \"+cloudSolrClient.getZkHost());\n        cloudSolrClient.uploadConfig(confDir.toPath(), confname);\n      }\n\n      // since creating a collection is a heavy-weight operation, check for existence first\n      String collectionListUrl = baseUrl+\"/admin/collections?action=list\";\n      if (safeCheckCollectionExists(collectionListUrl, collectionName)) {\n        throw new IllegalStateException(\"\\nCollection '\"+collectionName+\n            \"' already exists!\\nChecked collection existence using Collections API command:\\n\"+\n            collectionListUrl);\n      }\n\n      // doesn't seem to exist ... try to create\n      String createCollectionUrl =\n          String.format(Locale.ROOT,\n              \"%s/admin/collections?action=CREATE&name=%s&numShards=%d&replicationFactor=%d&maxShardsPerNode=%d&collection.configName=%s\",\n              baseUrl,\n              collectionName,\n              numShards,\n              replicationFactor,\n              maxShardsPerNode,\n              confname);\n\n      echo(\"\\nCreating new collection '\"+collectionName+\"' using command:\\n\"+createCollectionUrl+\"\\n\");\n\n      Map<String,Object> json = null;\n      try {\n        json = getJson(createCollectionUrl);\n      } catch (SolrServerException sse) {\n        // check if already exists\n        if (safeCheckCollectionExists(collectionListUrl, collectionName)) {\n          throw new IllegalArgumentException(\"Collection '\"+collectionName+\n              \"' already exists!\\nChecked collection existence using Collections API command:\\n\"+collectionListUrl);\n        } else {\n          throw new Exception(\"Failed to create collection '\"+collectionName+\"' due to: \"+sse.getMessage());\n        }\n      }\n\n      CharArr arr = new CharArr();\n      new JSONWriter(arr, 2).write(json);\n      echo(arr.toString());\n    }\n\n","sourceOld":"    protected int runCloudTool(CloudSolrClient cloudSolrClient, CommandLine cli) throws Exception {\n      Set<String> liveNodes = cloudSolrClient.getZkStateReader().getClusterState().getLiveNodes();\n      if (liveNodes.isEmpty())\n        throw new IllegalStateException(\"No live nodes found! Cannot create a collection until \" +\n            \"there is at least 1 live node in the cluster.\");\n      String firstLiveNode = liveNodes.iterator().next();\n\n      String collectionName = cli.getOptionValue(NAME);\n\n      // build a URL to create the collection\n      int numShards = optionAsInt(cli, \"shards\", 1);\n      int replicationFactor = optionAsInt(cli, \"replicationFactor\", 1);\n      int maxShardsPerNode = -1;\n\n      if (cli.hasOption(\"maxShardsPerNode\")) {\n        maxShardsPerNode = Integer.parseInt(cli.getOptionValue(\"maxShardsPerNode\"));\n      } else {\n        // need number of live nodes to determine maxShardsPerNode if it is not set\n        int numNodes = liveNodes.size();\n        maxShardsPerNode = ((numShards*replicationFactor)+numNodes-1)/numNodes;\n      }\n\n      String confname = cli.getOptionValue(\"confname\", collectionName);\n      boolean configExistsInZk =\n          cloudSolrClient.getZkStateReader().getZkClient().exists(\"/configs/\"+confname, true);\n\n      if (\".system\".equals(collectionName)) {\n        //do nothing\n      } else if (configExistsInZk) {\n        System.out.println(\"Re-using existing configuration directory \"+confname);\n      } else {\n        String configSet = cli.getOptionValue(\"confdir\", DEFAULT_CONFIG_SET);\n        File configSetDir = null;\n        // we try to be flexible and allow the user to specify a configuration directory instead of a configset name\n        File possibleConfigDir = new File(configSet);\n        if (possibleConfigDir.isDirectory()) {\n          configSetDir = possibleConfigDir;\n        } else {\n          File configsetsDir = new File(cli.getOptionValue(\"configsetsDir\"));\n          if (!configsetsDir.isDirectory())\n            throw new FileNotFoundException(configsetsDir.getAbsolutePath()+\" not found!\");\n\n          // upload the configset if it exists\n          configSetDir = new File(configsetsDir, configSet);\n          if (!configSetDir.isDirectory()) {\n            throw new FileNotFoundException(\"Specified config \" + configSet +\n                \" not found in \" + configsetsDir.getAbsolutePath());\n          }\n        }\n\n        File confDir = new File(configSetDir, \"conf\");\n        if (!confDir.isDirectory()) {\n          // config dir should contain a conf sub-directory but if not and there's a solrconfig.xml, then use it\n          if ((new File(configSetDir, \"solrconfig.xml\")).isFile()) {\n            confDir = configSetDir;\n          } else {\n            System.err.println(\"Specified configuration directory \"+configSetDir.getAbsolutePath()+\n                \" is invalid;\\nit should contain either conf sub-directory or solrconfig.xml\");\n            return 1;\n          }\n        }\n\n        // test to see if that config exists in ZK\n        System.out.println(\"Uploading \"+confDir.getAbsolutePath()+\n            \" for config \"+confname+\" to ZooKeeper at \"+cloudSolrClient.getZkHost());\n        cloudSolrClient.uploadConfig(confDir.toPath(), confname);\n      }\n\n      String baseUrl = cloudSolrClient.getZkStateReader().getBaseUrlForNodeName(firstLiveNode);\n\n      // since creating a collection is a heavy-weight operation, check for existence first\n      String collectionListUrl = baseUrl+\"/admin/collections?action=list\";\n      if (safeCheckCollectionExists(collectionListUrl, collectionName)) {\n        System.err.println(\"\\nCollection '\"+collectionName+\"' already exists!\");\n        System.err.println(\"\\nChecked collection existence using Collections API command:\\n\"+collectionListUrl);\n        System.err.println();\n        return 1;\n      }\n\n      // doesn't seem to exist ... try to create\n      String createCollectionUrl =\n          String.format(Locale.ROOT,\n              \"%s/admin/collections?action=CREATE&name=%s&numShards=%d&replicationFactor=%d&maxShardsPerNode=%d&collection.configName=%s\",\n              baseUrl,\n              collectionName,\n              numShards,\n              replicationFactor,\n              maxShardsPerNode,\n              confname);\n\n      System.out.println(\"\\nCreating new collection '\"+collectionName+\"' using command:\\n\"+createCollectionUrl+\"\\n\");\n\n      Map<String,Object> json = null;\n      try {\n        json = getJson(createCollectionUrl);\n      } catch (SolrServerException sse) {\n        // check if already exists\n        if (safeCheckCollectionExists(collectionListUrl, collectionName)) {\n          System.err.println(\"Collection '\"+collectionName+\"' already exists!\");\n          System.err.println(\"\\nChecked collection existence using Collections API command:\\n\"+collectionListUrl);\n        } else {\n          System.err.println(\"Failed to create collection '\"+collectionName+\"' due to: \"+sse.getMessage());\n        }\n        System.err.println();\n        return 1;\n      }\n\n      CharArr arr = new CharArr();\n      new JSONWriter(arr, 2).write(json);\n      System.out.println(arr.toString());\n      System.out.println();\n\n      return 0;\n    }\n\n","bugFix":null,"bugIntro":["0f506150a6ebd43fb2833cdf2713e2d1d5bddbd6"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0f506150a6ebd43fb2833cdf2713e2d1d5bddbd6","date":1439653416,"type":3,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.CreateCollectionTool#runCloudTool(CloudSolrClient,CommandLine).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.CreateCollectionTool#runCloudTool(CloudSolrClient,CommandLine).mjava","sourceNew":"    protected void runCloudTool(CloudSolrClient cloudSolrClient, CommandLine cli) throws Exception {\n\n      Set<String> liveNodes = cloudSolrClient.getZkStateReader().getClusterState().getLiveNodes();\n      if (liveNodes.isEmpty())\n        throw new IllegalStateException(\"No live nodes found! Cannot create a collection until \" +\n            \"there is at least 1 live node in the cluster.\");\n      \n      String baseUrl = cli.getOptionValue(\"solrUrl\");\n      if (baseUrl == null) {\n        String firstLiveNode = liveNodes.iterator().next();\n        baseUrl = cloudSolrClient.getZkStateReader().getBaseUrlForNodeName(firstLiveNode);\n      }\n\n      String collectionName = cli.getOptionValue(NAME);\n\n      // build a URL to create the collection\n      int numShards = optionAsInt(cli, \"shards\", 1);\n      int replicationFactor = optionAsInt(cli, \"replicationFactor\", 1);\n      int maxShardsPerNode = -1;\n\n      if (cli.hasOption(\"maxShardsPerNode\")) {\n        maxShardsPerNode = Integer.parseInt(cli.getOptionValue(\"maxShardsPerNode\"));\n      } else {\n        // need number of live nodes to determine maxShardsPerNode if it is not set\n        int numNodes = liveNodes.size();\n        maxShardsPerNode = ((numShards*replicationFactor)+numNodes-1)/numNodes;\n      }\n\n      String confname = cli.getOptionValue(\"confname\", collectionName);\n      boolean configExistsInZk =\n          cloudSolrClient.getZkStateReader().getZkClient().exists(\"/configs/\" + confname, true);\n\n      if (\".system\".equals(collectionName)) {\n        //do nothing\n      } else if (configExistsInZk) {\n        echo(\"Re-using existing configuration directory \"+confname);\n      } else {\n        String configSet = cli.getOptionValue(\"confdir\", DEFAULT_CONFIG_SET);\n        File configSetDir = null;\n        // we try to be flexible and allow the user to specify a configuration directory instead of a configset name\n        File possibleConfigDir = new File(configSet);\n        if (possibleConfigDir.isDirectory()) {\n          configSetDir = possibleConfigDir;\n        } else {\n          File configsetsDir = new File(cli.getOptionValue(\"configsetsDir\"));\n          if (!configsetsDir.isDirectory())\n            throw new FileNotFoundException(configsetsDir.getAbsolutePath()+\" not found!\");\n\n          // upload the configset if it exists\n          configSetDir = new File(configsetsDir, configSet);\n          if (!configSetDir.isDirectory()) {\n            throw new FileNotFoundException(\"Specified config \" + configSet +\n                \" not found in \" + configsetsDir.getAbsolutePath());\n          }\n        }\n\n        File confDir = new File(configSetDir, \"conf\");\n        if (!confDir.isDirectory()) {\n          // config dir should contain a conf sub-directory but if not and there's a solrconfig.xml, then use it\n          if ((new File(configSetDir, \"solrconfig.xml\")).isFile()) {\n            confDir = configSetDir;\n          } else {\n            throw new IllegalArgumentException(\"Specified configuration directory \"+configSetDir.getAbsolutePath()+\n                \" is invalid;\\nit should contain either conf sub-directory or solrconfig.xml\");\n          }\n        }\n\n        // test to see if that config exists in ZK\n        echo(\"Uploading \"+confDir.getAbsolutePath()+\n            \" for config \"+confname+\" to ZooKeeper at \"+cloudSolrClient.getZkHost());\n        cloudSolrClient.uploadConfig(confDir.toPath(), confname);\n      }\n\n      // since creating a collection is a heavy-weight operation, check for existence first\n      String collectionListUrl = baseUrl+\"/admin/collections?action=list\";\n      if (safeCheckCollectionExists(collectionListUrl, collectionName)) {\n        throw new IllegalStateException(\"\\nCollection '\"+collectionName+\n            \"' already exists!\\nChecked collection existence using Collections API command:\\n\"+\n            collectionListUrl);\n      }\n\n      // doesn't seem to exist ... try to create\n      String createCollectionUrl =\n          String.format(Locale.ROOT,\n              \"%s/admin/collections?action=CREATE&name=%s&numShards=%d&replicationFactor=%d&maxShardsPerNode=%d&collection.configName=%s\",\n              baseUrl,\n              collectionName,\n              numShards,\n              replicationFactor,\n              maxShardsPerNode,\n              confname);\n\n      echo(\"\\nCreating new collection '\"+collectionName+\"' using command:\\n\"+createCollectionUrl+\"\\n\");\n\n      Map<String,Object> json = null;\n      try {\n        json = getJson(createCollectionUrl);\n      } catch (SolrServerException sse) {\n        throw new Exception(\"Failed to create collection '\"+collectionName+\"' due to: \"+sse.getMessage());\n      }\n\n      CharArr arr = new CharArr();\n      new JSONWriter(arr, 2).write(json);\n      echo(arr.toString());\n    }\n\n","sourceOld":"    protected void runCloudTool(CloudSolrClient cloudSolrClient, CommandLine cli) throws Exception {\n\n      Set<String> liveNodes = cloudSolrClient.getZkStateReader().getClusterState().getLiveNodes();\n      if (liveNodes.isEmpty())\n        throw new IllegalStateException(\"No live nodes found! Cannot create a collection until \" +\n            \"there is at least 1 live node in the cluster.\");\n      \n      String baseUrl = cli.getOptionValue(\"solrUrl\");\n      if (baseUrl == null) {\n        String firstLiveNode = liveNodes.iterator().next();\n        baseUrl = cloudSolrClient.getZkStateReader().getBaseUrlForNodeName(firstLiveNode);\n      }\n\n      String collectionName = cli.getOptionValue(NAME);\n\n      // build a URL to create the collection\n      int numShards = optionAsInt(cli, \"shards\", 1);\n      int replicationFactor = optionAsInt(cli, \"replicationFactor\", 1);\n      int maxShardsPerNode = -1;\n\n      if (cli.hasOption(\"maxShardsPerNode\")) {\n        maxShardsPerNode = Integer.parseInt(cli.getOptionValue(\"maxShardsPerNode\"));\n      } else {\n        // need number of live nodes to determine maxShardsPerNode if it is not set\n        int numNodes = liveNodes.size();\n        maxShardsPerNode = ((numShards*replicationFactor)+numNodes-1)/numNodes;\n      }\n\n      String confname = cli.getOptionValue(\"confname\", collectionName);\n      boolean configExistsInZk =\n          cloudSolrClient.getZkStateReader().getZkClient().exists(\"/configs/\" + confname, true);\n\n      if (\".system\".equals(collectionName)) {\n        //do nothing\n      } else if (configExistsInZk) {\n        echo(\"Re-using existing configuration directory \"+confname);\n      } else {\n        String configSet = cli.getOptionValue(\"confdir\", DEFAULT_CONFIG_SET);\n        File configSetDir = null;\n        // we try to be flexible and allow the user to specify a configuration directory instead of a configset name\n        File possibleConfigDir = new File(configSet);\n        if (possibleConfigDir.isDirectory()) {\n          configSetDir = possibleConfigDir;\n        } else {\n          File configsetsDir = new File(cli.getOptionValue(\"configsetsDir\"));\n          if (!configsetsDir.isDirectory())\n            throw new FileNotFoundException(configsetsDir.getAbsolutePath()+\" not found!\");\n\n          // upload the configset if it exists\n          configSetDir = new File(configsetsDir, configSet);\n          if (!configSetDir.isDirectory()) {\n            throw new FileNotFoundException(\"Specified config \" + configSet +\n                \" not found in \" + configsetsDir.getAbsolutePath());\n          }\n        }\n\n        File confDir = new File(configSetDir, \"conf\");\n        if (!confDir.isDirectory()) {\n          // config dir should contain a conf sub-directory but if not and there's a solrconfig.xml, then use it\n          if ((new File(configSetDir, \"solrconfig.xml\")).isFile()) {\n            confDir = configSetDir;\n          } else {\n            throw new IllegalArgumentException(\"Specified configuration directory \"+configSetDir.getAbsolutePath()+\n                \" is invalid;\\nit should contain either conf sub-directory or solrconfig.xml\");\n          }\n        }\n\n        // test to see if that config exists in ZK\n        echo(\"Uploading \"+confDir.getAbsolutePath()+\n            \" for config \"+confname+\" to ZooKeeper at \"+cloudSolrClient.getZkHost());\n        cloudSolrClient.uploadConfig(confDir.toPath(), confname);\n      }\n\n      // since creating a collection is a heavy-weight operation, check for existence first\n      String collectionListUrl = baseUrl+\"/admin/collections?action=list\";\n      if (safeCheckCollectionExists(collectionListUrl, collectionName)) {\n        throw new IllegalStateException(\"\\nCollection '\"+collectionName+\n            \"' already exists!\\nChecked collection existence using Collections API command:\\n\"+\n            collectionListUrl);\n      }\n\n      // doesn't seem to exist ... try to create\n      String createCollectionUrl =\n          String.format(Locale.ROOT,\n              \"%s/admin/collections?action=CREATE&name=%s&numShards=%d&replicationFactor=%d&maxShardsPerNode=%d&collection.configName=%s\",\n              baseUrl,\n              collectionName,\n              numShards,\n              replicationFactor,\n              maxShardsPerNode,\n              confname);\n\n      echo(\"\\nCreating new collection '\"+collectionName+\"' using command:\\n\"+createCollectionUrl+\"\\n\");\n\n      Map<String,Object> json = null;\n      try {\n        json = getJson(createCollectionUrl);\n      } catch (SolrServerException sse) {\n        // check if already exists\n        if (safeCheckCollectionExists(collectionListUrl, collectionName)) {\n          throw new IllegalArgumentException(\"Collection '\"+collectionName+\n              \"' already exists!\\nChecked collection existence using Collections API command:\\n\"+collectionListUrl);\n        } else {\n          throw new Exception(\"Failed to create collection '\"+collectionName+\"' due to: \"+sse.getMessage());\n        }\n      }\n\n      CharArr arr = new CharArr();\n      new JSONWriter(arr, 2).write(json);\n      echo(arr.toString());\n    }\n\n","bugFix":["bafca15d8e408346a67f4282ad1143b88023893b","4ca20be81c9284c840498143264e583ccbb8525a"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"688f23c47b3d5b61d795e3042013aa908716c068","date":1449761553,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.CreateCollectionTool#runCloudTool(CloudSolrClient,CommandLine).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.CreateCollectionTool#runCloudTool(CloudSolrClient,CommandLine).mjava","sourceNew":"    protected void runCloudTool(CloudSolrClient cloudSolrClient, CommandLine cli) throws Exception {\n\n      Set<String> liveNodes = cloudSolrClient.getZkStateReader().getClusterState().getLiveNodes();\n      if (liveNodes.isEmpty())\n        throw new IllegalStateException(\"No live nodes found! Cannot create a collection until \" +\n            \"there is at least 1 live node in the cluster.\");\n      \n      String baseUrl = cli.getOptionValue(\"solrUrl\");\n      if (baseUrl == null) {\n        String firstLiveNode = liveNodes.iterator().next();\n        baseUrl = cloudSolrClient.getZkStateReader().getBaseUrlForNodeName(firstLiveNode);\n      }\n\n      String collectionName = cli.getOptionValue(NAME);\n\n      // build a URL to create the collection\n      int numShards = optionAsInt(cli, \"shards\", 1);\n      int replicationFactor = optionAsInt(cli, \"replicationFactor\", 1);\n      int maxShardsPerNode = -1;\n\n      if (cli.hasOption(\"maxShardsPerNode\")) {\n        maxShardsPerNode = Integer.parseInt(cli.getOptionValue(\"maxShardsPerNode\"));\n      } else {\n        // need number of live nodes to determine maxShardsPerNode if it is not set\n        int numNodes = liveNodes.size();\n        maxShardsPerNode = ((numShards*replicationFactor)+numNodes-1)/numNodes;\n      }\n\n      String confname = cli.getOptionValue(\"confname\", collectionName);\n      boolean configExistsInZk =\n          cloudSolrClient.getZkStateReader().getZkClient().exists(\"/configs/\" + confname, true);\n\n      if (\".system\".equals(collectionName)) {\n        //do nothing\n      } else if (configExistsInZk) {\n        echo(\"Re-using existing configuration directory \"+confname);\n      } else {\n        upconfig(cloudSolrClient, cli, confname, cli.getOptionValue(\"confdir\", DEFAULT_CONFIG_SET));\n      }\n\n      // since creating a collection is a heavy-weight operation, check for existence first\n      String collectionListUrl = baseUrl+\"/admin/collections?action=list\";\n      if (safeCheckCollectionExists(collectionListUrl, collectionName)) {\n        throw new IllegalStateException(\"\\nCollection '\"+collectionName+\n            \"' already exists!\\nChecked collection existence using Collections API command:\\n\"+\n            collectionListUrl);\n      }\n\n      // doesn't seem to exist ... try to create\n      String createCollectionUrl =\n          String.format(Locale.ROOT,\n              \"%s/admin/collections?action=CREATE&name=%s&numShards=%d&replicationFactor=%d&maxShardsPerNode=%d&collection.configName=%s\",\n              baseUrl,\n              collectionName,\n              numShards,\n              replicationFactor,\n              maxShardsPerNode,\n              confname);\n\n      echo(\"\\nCreating new collection '\"+collectionName+\"' using command:\\n\"+createCollectionUrl+\"\\n\");\n\n      Map<String,Object> json = null;\n      try {\n        json = getJson(createCollectionUrl);\n      } catch (SolrServerException sse) {\n        throw new Exception(\"Failed to create collection '\"+collectionName+\"' due to: \"+sse.getMessage());\n      }\n\n      CharArr arr = new CharArr();\n      new JSONWriter(arr, 2).write(json);\n      echo(arr.toString());\n    }\n\n","sourceOld":"    protected void runCloudTool(CloudSolrClient cloudSolrClient, CommandLine cli) throws Exception {\n\n      Set<String> liveNodes = cloudSolrClient.getZkStateReader().getClusterState().getLiveNodes();\n      if (liveNodes.isEmpty())\n        throw new IllegalStateException(\"No live nodes found! Cannot create a collection until \" +\n            \"there is at least 1 live node in the cluster.\");\n      \n      String baseUrl = cli.getOptionValue(\"solrUrl\");\n      if (baseUrl == null) {\n        String firstLiveNode = liveNodes.iterator().next();\n        baseUrl = cloudSolrClient.getZkStateReader().getBaseUrlForNodeName(firstLiveNode);\n      }\n\n      String collectionName = cli.getOptionValue(NAME);\n\n      // build a URL to create the collection\n      int numShards = optionAsInt(cli, \"shards\", 1);\n      int replicationFactor = optionAsInt(cli, \"replicationFactor\", 1);\n      int maxShardsPerNode = -1;\n\n      if (cli.hasOption(\"maxShardsPerNode\")) {\n        maxShardsPerNode = Integer.parseInt(cli.getOptionValue(\"maxShardsPerNode\"));\n      } else {\n        // need number of live nodes to determine maxShardsPerNode if it is not set\n        int numNodes = liveNodes.size();\n        maxShardsPerNode = ((numShards*replicationFactor)+numNodes-1)/numNodes;\n      }\n\n      String confname = cli.getOptionValue(\"confname\", collectionName);\n      boolean configExistsInZk =\n          cloudSolrClient.getZkStateReader().getZkClient().exists(\"/configs/\" + confname, true);\n\n      if (\".system\".equals(collectionName)) {\n        //do nothing\n      } else if (configExistsInZk) {\n        echo(\"Re-using existing configuration directory \"+confname);\n      } else {\n        String configSet = cli.getOptionValue(\"confdir\", DEFAULT_CONFIG_SET);\n        File configSetDir = null;\n        // we try to be flexible and allow the user to specify a configuration directory instead of a configset name\n        File possibleConfigDir = new File(configSet);\n        if (possibleConfigDir.isDirectory()) {\n          configSetDir = possibleConfigDir;\n        } else {\n          File configsetsDir = new File(cli.getOptionValue(\"configsetsDir\"));\n          if (!configsetsDir.isDirectory())\n            throw new FileNotFoundException(configsetsDir.getAbsolutePath()+\" not found!\");\n\n          // upload the configset if it exists\n          configSetDir = new File(configsetsDir, configSet);\n          if (!configSetDir.isDirectory()) {\n            throw new FileNotFoundException(\"Specified config \" + configSet +\n                \" not found in \" + configsetsDir.getAbsolutePath());\n          }\n        }\n\n        File confDir = new File(configSetDir, \"conf\");\n        if (!confDir.isDirectory()) {\n          // config dir should contain a conf sub-directory but if not and there's a solrconfig.xml, then use it\n          if ((new File(configSetDir, \"solrconfig.xml\")).isFile()) {\n            confDir = configSetDir;\n          } else {\n            throw new IllegalArgumentException(\"Specified configuration directory \"+configSetDir.getAbsolutePath()+\n                \" is invalid;\\nit should contain either conf sub-directory or solrconfig.xml\");\n          }\n        }\n\n        // test to see if that config exists in ZK\n        echo(\"Uploading \"+confDir.getAbsolutePath()+\n            \" for config \"+confname+\" to ZooKeeper at \"+cloudSolrClient.getZkHost());\n        cloudSolrClient.uploadConfig(confDir.toPath(), confname);\n      }\n\n      // since creating a collection is a heavy-weight operation, check for existence first\n      String collectionListUrl = baseUrl+\"/admin/collections?action=list\";\n      if (safeCheckCollectionExists(collectionListUrl, collectionName)) {\n        throw new IllegalStateException(\"\\nCollection '\"+collectionName+\n            \"' already exists!\\nChecked collection existence using Collections API command:\\n\"+\n            collectionListUrl);\n      }\n\n      // doesn't seem to exist ... try to create\n      String createCollectionUrl =\n          String.format(Locale.ROOT,\n              \"%s/admin/collections?action=CREATE&name=%s&numShards=%d&replicationFactor=%d&maxShardsPerNode=%d&collection.configName=%s\",\n              baseUrl,\n              collectionName,\n              numShards,\n              replicationFactor,\n              maxShardsPerNode,\n              confname);\n\n      echo(\"\\nCreating new collection '\"+collectionName+\"' using command:\\n\"+createCollectionUrl+\"\\n\");\n\n      Map<String,Object> json = null;\n      try {\n        json = getJson(createCollectionUrl);\n      } catch (SolrServerException sse) {\n        throw new Exception(\"Failed to create collection '\"+collectionName+\"' due to: \"+sse.getMessage());\n      }\n\n      CharArr arr = new CharArr();\n      new JSONWriter(arr, 2).write(json);\n      echo(arr.toString());\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9272a617a9cbebf86be127014bbbacd7cf8f8e83","date":1467480344,"type":3,"author":"Erick","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.CreateCollectionTool#runCloudTool(CloudSolrClient,CommandLine).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.CreateCollectionTool#runCloudTool(CloudSolrClient,CommandLine).mjava","sourceNew":"    protected void runCloudTool(CloudSolrClient cloudSolrClient, CommandLine cli) throws Exception {\n\n      Set<String> liveNodes = cloudSolrClient.getZkStateReader().getClusterState().getLiveNodes();\n      if (liveNodes.isEmpty())\n        throw new IllegalStateException(\"No live nodes found! Cannot create a collection until \" +\n            \"there is at least 1 live node in the cluster.\");\n      \n      String baseUrl = cli.getOptionValue(\"solrUrl\");\n      if (baseUrl == null) {\n        String firstLiveNode = liveNodes.iterator().next();\n        baseUrl = cloudSolrClient.getZkStateReader().getBaseUrlForNodeName(firstLiveNode);\n      }\n\n      String collectionName = cli.getOptionValue(NAME);\n\n      // build a URL to create the collection\n      int numShards = optionAsInt(cli, \"shards\", 1);\n      int replicationFactor = optionAsInt(cli, \"replicationFactor\", 1);\n      int maxShardsPerNode = -1;\n\n      if (cli.hasOption(\"maxShardsPerNode\")) {\n        maxShardsPerNode = Integer.parseInt(cli.getOptionValue(\"maxShardsPerNode\"));\n      } else {\n        // need number of live nodes to determine maxShardsPerNode if it is not set\n        int numNodes = liveNodes.size();\n        maxShardsPerNode = ((numShards*replicationFactor)+numNodes-1)/numNodes;\n      }\n\n      String confname = cli.getOptionValue(\"confname\", collectionName);\n      boolean configExistsInZk =\n          cloudSolrClient.getZkStateReader().getZkClient().exists(\"/configs/\" + confname, true);\n\n      if (\".system\".equals(collectionName)) {\n        //do nothing\n      } else if (configExistsInZk) {\n        echo(\"Re-using existing configuration directory \"+confname);\n      } else {\n        Path confPath = ZkConfigManager.getConfigsetPath(confname, cli.getOptionValue(\"confdir\", DEFAULT_CONFIG_SET),\n            cli.getOptionValue(\"configsetsDir\"));\n\n        echo(\"Uploading \" + confPath.toAbsolutePath().toString() +\n            \" for config \" + confname + \" to ZooKeeper at \" + cloudSolrClient.getZkHost());\n        cloudSolrClient.uploadConfig(confPath, confname);\n      }\n\n      // since creating a collection is a heavy-weight operation, check for existence first\n      String collectionListUrl = baseUrl+\"/admin/collections?action=list\";\n      if (safeCheckCollectionExists(collectionListUrl, collectionName)) {\n        throw new IllegalStateException(\"\\nCollection '\"+collectionName+\n            \"' already exists!\\nChecked collection existence using Collections API command:\\n\"+\n            collectionListUrl);\n      }\n\n      // doesn't seem to exist ... try to create\n      String createCollectionUrl =\n          String.format(Locale.ROOT,\n              \"%s/admin/collections?action=CREATE&name=%s&numShards=%d&replicationFactor=%d&maxShardsPerNode=%d&collection.configName=%s\",\n              baseUrl,\n              collectionName,\n              numShards,\n              replicationFactor,\n              maxShardsPerNode,\n              confname);\n\n      echo(\"\\nCreating new collection '\"+collectionName+\"' using command:\\n\"+createCollectionUrl+\"\\n\");\n\n      Map<String,Object> json = null;\n      try {\n        json = getJson(createCollectionUrl);\n      } catch (SolrServerException sse) {\n        throw new Exception(\"Failed to create collection '\"+collectionName+\"' due to: \"+sse.getMessage());\n      }\n\n      CharArr arr = new CharArr();\n      new JSONWriter(arr, 2).write(json);\n      echo(arr.toString());\n    }\n\n","sourceOld":"    protected void runCloudTool(CloudSolrClient cloudSolrClient, CommandLine cli) throws Exception {\n\n      Set<String> liveNodes = cloudSolrClient.getZkStateReader().getClusterState().getLiveNodes();\n      if (liveNodes.isEmpty())\n        throw new IllegalStateException(\"No live nodes found! Cannot create a collection until \" +\n            \"there is at least 1 live node in the cluster.\");\n      \n      String baseUrl = cli.getOptionValue(\"solrUrl\");\n      if (baseUrl == null) {\n        String firstLiveNode = liveNodes.iterator().next();\n        baseUrl = cloudSolrClient.getZkStateReader().getBaseUrlForNodeName(firstLiveNode);\n      }\n\n      String collectionName = cli.getOptionValue(NAME);\n\n      // build a URL to create the collection\n      int numShards = optionAsInt(cli, \"shards\", 1);\n      int replicationFactor = optionAsInt(cli, \"replicationFactor\", 1);\n      int maxShardsPerNode = -1;\n\n      if (cli.hasOption(\"maxShardsPerNode\")) {\n        maxShardsPerNode = Integer.parseInt(cli.getOptionValue(\"maxShardsPerNode\"));\n      } else {\n        // need number of live nodes to determine maxShardsPerNode if it is not set\n        int numNodes = liveNodes.size();\n        maxShardsPerNode = ((numShards*replicationFactor)+numNodes-1)/numNodes;\n      }\n\n      String confname = cli.getOptionValue(\"confname\", collectionName);\n      boolean configExistsInZk =\n          cloudSolrClient.getZkStateReader().getZkClient().exists(\"/configs/\" + confname, true);\n\n      if (\".system\".equals(collectionName)) {\n        //do nothing\n      } else if (configExistsInZk) {\n        echo(\"Re-using existing configuration directory \"+confname);\n      } else {\n        upconfig(cloudSolrClient, cli, confname, cli.getOptionValue(\"confdir\", DEFAULT_CONFIG_SET));\n      }\n\n      // since creating a collection is a heavy-weight operation, check for existence first\n      String collectionListUrl = baseUrl+\"/admin/collections?action=list\";\n      if (safeCheckCollectionExists(collectionListUrl, collectionName)) {\n        throw new IllegalStateException(\"\\nCollection '\"+collectionName+\n            \"' already exists!\\nChecked collection existence using Collections API command:\\n\"+\n            collectionListUrl);\n      }\n\n      // doesn't seem to exist ... try to create\n      String createCollectionUrl =\n          String.format(Locale.ROOT,\n              \"%s/admin/collections?action=CREATE&name=%s&numShards=%d&replicationFactor=%d&maxShardsPerNode=%d&collection.configName=%s\",\n              baseUrl,\n              collectionName,\n              numShards,\n              replicationFactor,\n              maxShardsPerNode,\n              confname);\n\n      echo(\"\\nCreating new collection '\"+collectionName+\"' using command:\\n\"+createCollectionUrl+\"\\n\");\n\n      Map<String,Object> json = null;\n      try {\n        json = getJson(createCollectionUrl);\n      } catch (SolrServerException sse) {\n        throw new Exception(\"Failed to create collection '\"+collectionName+\"' due to: \"+sse.getMessage());\n      }\n\n      CharArr arr = new CharArr();\n      new JSONWriter(arr, 2).write(json);\n      echo(arr.toString());\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3100fa57deee363537557f82c2b38812a2576acc","date":1467500858,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.CreateCollectionTool#runCloudTool(CloudSolrClient,CommandLine).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.CreateCollectionTool#runCloudTool(CloudSolrClient,CommandLine).mjava","sourceNew":"    protected void runCloudTool(CloudSolrClient cloudSolrClient, CommandLine cli) throws Exception {\n\n      Set<String> liveNodes = cloudSolrClient.getZkStateReader().getClusterState().getLiveNodes();\n      if (liveNodes.isEmpty())\n        throw new IllegalStateException(\"No live nodes found! Cannot create a collection until \" +\n            \"there is at least 1 live node in the cluster.\");\n      \n      String baseUrl = cli.getOptionValue(\"solrUrl\");\n      if (baseUrl == null) {\n        String firstLiveNode = liveNodes.iterator().next();\n        baseUrl = cloudSolrClient.getZkStateReader().getBaseUrlForNodeName(firstLiveNode);\n      }\n\n      String collectionName = cli.getOptionValue(NAME);\n\n      // build a URL to create the collection\n      int numShards = optionAsInt(cli, \"shards\", 1);\n      int replicationFactor = optionAsInt(cli, \"replicationFactor\", 1);\n      int maxShardsPerNode = -1;\n\n      if (cli.hasOption(\"maxShardsPerNode\")) {\n        maxShardsPerNode = Integer.parseInt(cli.getOptionValue(\"maxShardsPerNode\"));\n      } else {\n        // need number of live nodes to determine maxShardsPerNode if it is not set\n        int numNodes = liveNodes.size();\n        maxShardsPerNode = ((numShards*replicationFactor)+numNodes-1)/numNodes;\n      }\n\n      String confname = cli.getOptionValue(\"confname\", collectionName);\n      boolean configExistsInZk =\n          cloudSolrClient.getZkStateReader().getZkClient().exists(\"/configs/\" + confname, true);\n\n      if (\".system\".equals(collectionName)) {\n        //do nothing\n      } else if (configExistsInZk) {\n        echo(\"Re-using existing configuration directory \"+confname);\n      } else {\n        Path confPath = ZkConfigManager.getConfigsetPath(cli.getOptionValue(\"confdir\", DEFAULT_CONFIG_SET),\n            cli.getOptionValue(\"configsetsDir\"));\n\n        echo(\"Uploading \" + confPath.toAbsolutePath().toString() +\n            \" for config \" + confname + \" to ZooKeeper at \" + cloudSolrClient.getZkHost());\n        cloudSolrClient.uploadConfig(confPath, confname);\n      }\n\n      // since creating a collection is a heavy-weight operation, check for existence first\n      String collectionListUrl = baseUrl+\"/admin/collections?action=list\";\n      if (safeCheckCollectionExists(collectionListUrl, collectionName)) {\n        throw new IllegalStateException(\"\\nCollection '\"+collectionName+\n            \"' already exists!\\nChecked collection existence using Collections API command:\\n\"+\n            collectionListUrl);\n      }\n\n      // doesn't seem to exist ... try to create\n      String createCollectionUrl =\n          String.format(Locale.ROOT,\n              \"%s/admin/collections?action=CREATE&name=%s&numShards=%d&replicationFactor=%d&maxShardsPerNode=%d&collection.configName=%s\",\n              baseUrl,\n              collectionName,\n              numShards,\n              replicationFactor,\n              maxShardsPerNode,\n              confname);\n\n      echo(\"\\nCreating new collection '\"+collectionName+\"' using command:\\n\"+createCollectionUrl+\"\\n\");\n\n      Map<String,Object> json = null;\n      try {\n        json = getJson(createCollectionUrl);\n      } catch (SolrServerException sse) {\n        throw new Exception(\"Failed to create collection '\"+collectionName+\"' due to: \"+sse.getMessage());\n      }\n\n      CharArr arr = new CharArr();\n      new JSONWriter(arr, 2).write(json);\n      echo(arr.toString());\n    }\n\n","sourceOld":"    protected void runCloudTool(CloudSolrClient cloudSolrClient, CommandLine cli) throws Exception {\n\n      Set<String> liveNodes = cloudSolrClient.getZkStateReader().getClusterState().getLiveNodes();\n      if (liveNodes.isEmpty())\n        throw new IllegalStateException(\"No live nodes found! Cannot create a collection until \" +\n            \"there is at least 1 live node in the cluster.\");\n      \n      String baseUrl = cli.getOptionValue(\"solrUrl\");\n      if (baseUrl == null) {\n        String firstLiveNode = liveNodes.iterator().next();\n        baseUrl = cloudSolrClient.getZkStateReader().getBaseUrlForNodeName(firstLiveNode);\n      }\n\n      String collectionName = cli.getOptionValue(NAME);\n\n      // build a URL to create the collection\n      int numShards = optionAsInt(cli, \"shards\", 1);\n      int replicationFactor = optionAsInt(cli, \"replicationFactor\", 1);\n      int maxShardsPerNode = -1;\n\n      if (cli.hasOption(\"maxShardsPerNode\")) {\n        maxShardsPerNode = Integer.parseInt(cli.getOptionValue(\"maxShardsPerNode\"));\n      } else {\n        // need number of live nodes to determine maxShardsPerNode if it is not set\n        int numNodes = liveNodes.size();\n        maxShardsPerNode = ((numShards*replicationFactor)+numNodes-1)/numNodes;\n      }\n\n      String confname = cli.getOptionValue(\"confname\", collectionName);\n      boolean configExistsInZk =\n          cloudSolrClient.getZkStateReader().getZkClient().exists(\"/configs/\" + confname, true);\n\n      if (\".system\".equals(collectionName)) {\n        //do nothing\n      } else if (configExistsInZk) {\n        echo(\"Re-using existing configuration directory \"+confname);\n      } else {\n        Path confPath = ZkConfigManager.getConfigsetPath(confname, cli.getOptionValue(\"confdir\", DEFAULT_CONFIG_SET),\n            cli.getOptionValue(\"configsetsDir\"));\n\n        echo(\"Uploading \" + confPath.toAbsolutePath().toString() +\n            \" for config \" + confname + \" to ZooKeeper at \" + cloudSolrClient.getZkHost());\n        cloudSolrClient.uploadConfig(confPath, confname);\n      }\n\n      // since creating a collection is a heavy-weight operation, check for existence first\n      String collectionListUrl = baseUrl+\"/admin/collections?action=list\";\n      if (safeCheckCollectionExists(collectionListUrl, collectionName)) {\n        throw new IllegalStateException(\"\\nCollection '\"+collectionName+\n            \"' already exists!\\nChecked collection existence using Collections API command:\\n\"+\n            collectionListUrl);\n      }\n\n      // doesn't seem to exist ... try to create\n      String createCollectionUrl =\n          String.format(Locale.ROOT,\n              \"%s/admin/collections?action=CREATE&name=%s&numShards=%d&replicationFactor=%d&maxShardsPerNode=%d&collection.configName=%s\",\n              baseUrl,\n              collectionName,\n              numShards,\n              replicationFactor,\n              maxShardsPerNode,\n              confname);\n\n      echo(\"\\nCreating new collection '\"+collectionName+\"' using command:\\n\"+createCollectionUrl+\"\\n\");\n\n      Map<String,Object> json = null;\n      try {\n        json = getJson(createCollectionUrl);\n      } catch (SolrServerException sse) {\n        throw new Exception(\"Failed to create collection '\"+collectionName+\"' due to: \"+sse.getMessage());\n      }\n\n      CharArr arr = new CharArr();\n      new JSONWriter(arr, 2).write(json);\n      echo(arr.toString());\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.CreateCollectionTool#runCloudTool(CloudSolrClient,CommandLine).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.CreateCollectionTool#runCloudTool(CloudSolrClient,CommandLine).mjava","sourceNew":"    protected void runCloudTool(CloudSolrClient cloudSolrClient, CommandLine cli) throws Exception {\n\n      Set<String> liveNodes = cloudSolrClient.getZkStateReader().getClusterState().getLiveNodes();\n      if (liveNodes.isEmpty())\n        throw new IllegalStateException(\"No live nodes found! Cannot create a collection until \" +\n            \"there is at least 1 live node in the cluster.\");\n      \n      String baseUrl = cli.getOptionValue(\"solrUrl\");\n      if (baseUrl == null) {\n        String firstLiveNode = liveNodes.iterator().next();\n        baseUrl = cloudSolrClient.getZkStateReader().getBaseUrlForNodeName(firstLiveNode);\n      }\n\n      String collectionName = cli.getOptionValue(NAME);\n\n      // build a URL to create the collection\n      int numShards = optionAsInt(cli, \"shards\", 1);\n      int replicationFactor = optionAsInt(cli, \"replicationFactor\", 1);\n      int maxShardsPerNode = -1;\n\n      if (cli.hasOption(\"maxShardsPerNode\")) {\n        maxShardsPerNode = Integer.parseInt(cli.getOptionValue(\"maxShardsPerNode\"));\n      } else {\n        // need number of live nodes to determine maxShardsPerNode if it is not set\n        int numNodes = liveNodes.size();\n        maxShardsPerNode = ((numShards*replicationFactor)+numNodes-1)/numNodes;\n      }\n\n      String confname = cli.getOptionValue(\"confname\", collectionName);\n      boolean configExistsInZk =\n          cloudSolrClient.getZkStateReader().getZkClient().exists(\"/configs/\" + confname, true);\n\n      if (\".system\".equals(collectionName)) {\n        //do nothing\n      } else if (configExistsInZk) {\n        echo(\"Re-using existing configuration directory \"+confname);\n      } else {\n        Path confPath = ZkConfigManager.getConfigsetPath(cli.getOptionValue(\"confdir\", DEFAULT_CONFIG_SET),\n            cli.getOptionValue(\"configsetsDir\"));\n\n        echo(\"Uploading \" + confPath.toAbsolutePath().toString() +\n            \" for config \" + confname + \" to ZooKeeper at \" + cloudSolrClient.getZkHost());\n        cloudSolrClient.uploadConfig(confPath, confname);\n      }\n\n      // since creating a collection is a heavy-weight operation, check for existence first\n      String collectionListUrl = baseUrl+\"/admin/collections?action=list\";\n      if (safeCheckCollectionExists(collectionListUrl, collectionName)) {\n        throw new IllegalStateException(\"\\nCollection '\"+collectionName+\n            \"' already exists!\\nChecked collection existence using Collections API command:\\n\"+\n            collectionListUrl);\n      }\n\n      // doesn't seem to exist ... try to create\n      String createCollectionUrl =\n          String.format(Locale.ROOT,\n              \"%s/admin/collections?action=CREATE&name=%s&numShards=%d&replicationFactor=%d&maxShardsPerNode=%d&collection.configName=%s\",\n              baseUrl,\n              collectionName,\n              numShards,\n              replicationFactor,\n              maxShardsPerNode,\n              confname);\n\n      echo(\"\\nCreating new collection '\"+collectionName+\"' using command:\\n\"+createCollectionUrl+\"\\n\");\n\n      Map<String,Object> json = null;\n      try {\n        json = getJson(createCollectionUrl);\n      } catch (SolrServerException sse) {\n        throw new Exception(\"Failed to create collection '\"+collectionName+\"' due to: \"+sse.getMessage());\n      }\n\n      CharArr arr = new CharArr();\n      new JSONWriter(arr, 2).write(json);\n      echo(arr.toString());\n    }\n\n","sourceOld":"    protected void runCloudTool(CloudSolrClient cloudSolrClient, CommandLine cli) throws Exception {\n\n      Set<String> liveNodes = cloudSolrClient.getZkStateReader().getClusterState().getLiveNodes();\n      if (liveNodes.isEmpty())\n        throw new IllegalStateException(\"No live nodes found! Cannot create a collection until \" +\n            \"there is at least 1 live node in the cluster.\");\n      \n      String baseUrl = cli.getOptionValue(\"solrUrl\");\n      if (baseUrl == null) {\n        String firstLiveNode = liveNodes.iterator().next();\n        baseUrl = cloudSolrClient.getZkStateReader().getBaseUrlForNodeName(firstLiveNode);\n      }\n\n      String collectionName = cli.getOptionValue(NAME);\n\n      // build a URL to create the collection\n      int numShards = optionAsInt(cli, \"shards\", 1);\n      int replicationFactor = optionAsInt(cli, \"replicationFactor\", 1);\n      int maxShardsPerNode = -1;\n\n      if (cli.hasOption(\"maxShardsPerNode\")) {\n        maxShardsPerNode = Integer.parseInt(cli.getOptionValue(\"maxShardsPerNode\"));\n      } else {\n        // need number of live nodes to determine maxShardsPerNode if it is not set\n        int numNodes = liveNodes.size();\n        maxShardsPerNode = ((numShards*replicationFactor)+numNodes-1)/numNodes;\n      }\n\n      String confname = cli.getOptionValue(\"confname\", collectionName);\n      boolean configExistsInZk =\n          cloudSolrClient.getZkStateReader().getZkClient().exists(\"/configs/\" + confname, true);\n\n      if (\".system\".equals(collectionName)) {\n        //do nothing\n      } else if (configExistsInZk) {\n        echo(\"Re-using existing configuration directory \"+confname);\n      } else {\n        upconfig(cloudSolrClient, cli, confname, cli.getOptionValue(\"confdir\", DEFAULT_CONFIG_SET));\n      }\n\n      // since creating a collection is a heavy-weight operation, check for existence first\n      String collectionListUrl = baseUrl+\"/admin/collections?action=list\";\n      if (safeCheckCollectionExists(collectionListUrl, collectionName)) {\n        throw new IllegalStateException(\"\\nCollection '\"+collectionName+\n            \"' already exists!\\nChecked collection existence using Collections API command:\\n\"+\n            collectionListUrl);\n      }\n\n      // doesn't seem to exist ... try to create\n      String createCollectionUrl =\n          String.format(Locale.ROOT,\n              \"%s/admin/collections?action=CREATE&name=%s&numShards=%d&replicationFactor=%d&maxShardsPerNode=%d&collection.configName=%s\",\n              baseUrl,\n              collectionName,\n              numShards,\n              replicationFactor,\n              maxShardsPerNode,\n              confname);\n\n      echo(\"\\nCreating new collection '\"+collectionName+\"' using command:\\n\"+createCollectionUrl+\"\\n\");\n\n      Map<String,Object> json = null;\n      try {\n        json = getJson(createCollectionUrl);\n      } catch (SolrServerException sse) {\n        throw new Exception(\"Failed to create collection '\"+collectionName+\"' due to: \"+sse.getMessage());\n      }\n\n      CharArr arr = new CharArr();\n      new JSONWriter(arr, 2).write(json);\n      echo(arr.toString());\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9c3a5cd533454e5bffcbedfceea9c1668dd586cf","date":1480145088,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.CreateCollectionTool#runCloudTool(CloudSolrClient,CommandLine).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.CreateCollectionTool#runCloudTool(CloudSolrClient,CommandLine).mjava","sourceNew":"    protected void runCloudTool(CloudSolrClient cloudSolrClient, CommandLine cli) throws Exception {\n\n      Set<String> liveNodes = cloudSolrClient.getZkStateReader().getClusterState().getLiveNodes();\n      if (liveNodes.isEmpty())\n        throw new IllegalStateException(\"No live nodes found! Cannot create a collection until \" +\n            \"there is at least 1 live node in the cluster.\");\n      \n      String baseUrl = cli.getOptionValue(\"solrUrl\");\n      if (baseUrl == null) {\n        String firstLiveNode = liveNodes.iterator().next();\n        baseUrl = cloudSolrClient.getZkStateReader().getBaseUrlForNodeName(firstLiveNode);\n      }\n\n      String collectionName = cli.getOptionValue(NAME);\n\n      // build a URL to create the collection\n      int numShards = optionAsInt(cli, \"shards\", 1);\n      int replicationFactor = optionAsInt(cli, \"replicationFactor\", 1);\n      int maxShardsPerNode = -1;\n\n      if (cli.hasOption(\"maxShardsPerNode\")) {\n        maxShardsPerNode = Integer.parseInt(cli.getOptionValue(\"maxShardsPerNode\"));\n      } else {\n        // need number of live nodes to determine maxShardsPerNode if it is not set\n        int numNodes = liveNodes.size();\n        maxShardsPerNode = ((numShards*replicationFactor)+numNodes-1)/numNodes;\n      }\n\n      String confname = cli.getOptionValue(\"confname\", collectionName);\n      boolean configExistsInZk =\n          cloudSolrClient.getZkStateReader().getZkClient().exists(\"/configs/\" + confname, true);\n\n      if (\".system\".equals(collectionName)) {\n        //do nothing\n      } else if (configExistsInZk) {\n        echo(\"Re-using existing configuration directory \"+confname);\n      } else {\n        Path confPath = ZkConfigManager.getConfigsetPath(cli.getOptionValue(\"confdir\", DEFAULT_CONFIG_SET),\n            cli.getOptionValue(\"configsetsDir\"));\n\n        echo(\"Uploading \" + confPath.toAbsolutePath().toString() +\n            \" for config \" + confname + \" to ZooKeeper at \" + cloudSolrClient.getZkHost());\n        ((ZkClientClusterStateProvider) cloudSolrClient.getClusterStateProvider()).uploadConfig(confPath, confname);\n      }\n\n      // since creating a collection is a heavy-weight operation, check for existence first\n      String collectionListUrl = baseUrl+\"/admin/collections?action=list\";\n      if (safeCheckCollectionExists(collectionListUrl, collectionName)) {\n        throw new IllegalStateException(\"\\nCollection '\"+collectionName+\n            \"' already exists!\\nChecked collection existence using Collections API command:\\n\"+\n            collectionListUrl);\n      }\n\n      // doesn't seem to exist ... try to create\n      String createCollectionUrl =\n          String.format(Locale.ROOT,\n              \"%s/admin/collections?action=CREATE&name=%s&numShards=%d&replicationFactor=%d&maxShardsPerNode=%d&collection.configName=%s\",\n              baseUrl,\n              collectionName,\n              numShards,\n              replicationFactor,\n              maxShardsPerNode,\n              confname);\n\n      echo(\"\\nCreating new collection '\"+collectionName+\"' using command:\\n\"+createCollectionUrl+\"\\n\");\n\n      Map<String,Object> json = null;\n      try {\n        json = getJson(createCollectionUrl);\n      } catch (SolrServerException sse) {\n        throw new Exception(\"Failed to create collection '\"+collectionName+\"' due to: \"+sse.getMessage());\n      }\n\n      CharArr arr = new CharArr();\n      new JSONWriter(arr, 2).write(json);\n      echo(arr.toString());\n    }\n\n","sourceOld":"    protected void runCloudTool(CloudSolrClient cloudSolrClient, CommandLine cli) throws Exception {\n\n      Set<String> liveNodes = cloudSolrClient.getZkStateReader().getClusterState().getLiveNodes();\n      if (liveNodes.isEmpty())\n        throw new IllegalStateException(\"No live nodes found! Cannot create a collection until \" +\n            \"there is at least 1 live node in the cluster.\");\n      \n      String baseUrl = cli.getOptionValue(\"solrUrl\");\n      if (baseUrl == null) {\n        String firstLiveNode = liveNodes.iterator().next();\n        baseUrl = cloudSolrClient.getZkStateReader().getBaseUrlForNodeName(firstLiveNode);\n      }\n\n      String collectionName = cli.getOptionValue(NAME);\n\n      // build a URL to create the collection\n      int numShards = optionAsInt(cli, \"shards\", 1);\n      int replicationFactor = optionAsInt(cli, \"replicationFactor\", 1);\n      int maxShardsPerNode = -1;\n\n      if (cli.hasOption(\"maxShardsPerNode\")) {\n        maxShardsPerNode = Integer.parseInt(cli.getOptionValue(\"maxShardsPerNode\"));\n      } else {\n        // need number of live nodes to determine maxShardsPerNode if it is not set\n        int numNodes = liveNodes.size();\n        maxShardsPerNode = ((numShards*replicationFactor)+numNodes-1)/numNodes;\n      }\n\n      String confname = cli.getOptionValue(\"confname\", collectionName);\n      boolean configExistsInZk =\n          cloudSolrClient.getZkStateReader().getZkClient().exists(\"/configs/\" + confname, true);\n\n      if (\".system\".equals(collectionName)) {\n        //do nothing\n      } else if (configExistsInZk) {\n        echo(\"Re-using existing configuration directory \"+confname);\n      } else {\n        Path confPath = ZkConfigManager.getConfigsetPath(cli.getOptionValue(\"confdir\", DEFAULT_CONFIG_SET),\n            cli.getOptionValue(\"configsetsDir\"));\n\n        echo(\"Uploading \" + confPath.toAbsolutePath().toString() +\n            \" for config \" + confname + \" to ZooKeeper at \" + cloudSolrClient.getZkHost());\n        cloudSolrClient.uploadConfig(confPath, confname);\n      }\n\n      // since creating a collection is a heavy-weight operation, check for existence first\n      String collectionListUrl = baseUrl+\"/admin/collections?action=list\";\n      if (safeCheckCollectionExists(collectionListUrl, collectionName)) {\n        throw new IllegalStateException(\"\\nCollection '\"+collectionName+\n            \"' already exists!\\nChecked collection existence using Collections API command:\\n\"+\n            collectionListUrl);\n      }\n\n      // doesn't seem to exist ... try to create\n      String createCollectionUrl =\n          String.format(Locale.ROOT,\n              \"%s/admin/collections?action=CREATE&name=%s&numShards=%d&replicationFactor=%d&maxShardsPerNode=%d&collection.configName=%s\",\n              baseUrl,\n              collectionName,\n              numShards,\n              replicationFactor,\n              maxShardsPerNode,\n              confname);\n\n      echo(\"\\nCreating new collection '\"+collectionName+\"' using command:\\n\"+createCollectionUrl+\"\\n\");\n\n      Map<String,Object> json = null;\n      try {\n        json = getJson(createCollectionUrl);\n      } catch (SolrServerException sse) {\n        throw new Exception(\"Failed to create collection '\"+collectionName+\"' due to: \"+sse.getMessage());\n      }\n\n      CharArr arr = new CharArr();\n      new JSONWriter(arr, 2).write(json);\n      echo(arr.toString());\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"727bb765ff2542275f6d31f67be18d7104bae148","date":1480353976,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.CreateCollectionTool#runCloudTool(CloudSolrClient,CommandLine).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.CreateCollectionTool#runCloudTool(CloudSolrClient,CommandLine).mjava","sourceNew":"    protected void runCloudTool(CloudSolrClient cloudSolrClient, CommandLine cli) throws Exception {\n\n      Set<String> liveNodes = cloudSolrClient.getZkStateReader().getClusterState().getLiveNodes();\n      if (liveNodes.isEmpty())\n        throw new IllegalStateException(\"No live nodes found! Cannot create a collection until \" +\n            \"there is at least 1 live node in the cluster.\");\n      \n      String baseUrl = cli.getOptionValue(\"solrUrl\");\n      if (baseUrl == null) {\n        String firstLiveNode = liveNodes.iterator().next();\n        baseUrl = cloudSolrClient.getZkStateReader().getBaseUrlForNodeName(firstLiveNode);\n      }\n\n      String collectionName = cli.getOptionValue(NAME);\n\n      // build a URL to create the collection\n      int numShards = optionAsInt(cli, \"shards\", 1);\n      int replicationFactor = optionAsInt(cli, \"replicationFactor\", 1);\n      int maxShardsPerNode = -1;\n\n      if (cli.hasOption(\"maxShardsPerNode\")) {\n        maxShardsPerNode = Integer.parseInt(cli.getOptionValue(\"maxShardsPerNode\"));\n      } else {\n        // need number of live nodes to determine maxShardsPerNode if it is not set\n        int numNodes = liveNodes.size();\n        maxShardsPerNode = ((numShards*replicationFactor)+numNodes-1)/numNodes;\n      }\n\n      String confname = cli.getOptionValue(\"confname\", collectionName);\n      boolean configExistsInZk =\n          cloudSolrClient.getZkStateReader().getZkClient().exists(\"/configs/\" + confname, true);\n\n      if (\".system\".equals(collectionName)) {\n        //do nothing\n      } else if (configExistsInZk) {\n        echo(\"Re-using existing configuration directory \"+confname);\n      } else {\n        Path confPath = ZkConfigManager.getConfigsetPath(cli.getOptionValue(\"confdir\", DEFAULT_CONFIG_SET),\n            cli.getOptionValue(\"configsetsDir\"));\n\n        echo(\"Uploading \" + confPath.toAbsolutePath().toString() +\n            \" for config \" + confname + \" to ZooKeeper at \" + cloudSolrClient.getZkHost());\n        ((ZkClientClusterStateProvider) cloudSolrClient.getClusterStateProvider()).uploadConfig(confPath, confname);\n      }\n\n      // since creating a collection is a heavy-weight operation, check for existence first\n      String collectionListUrl = baseUrl+\"/admin/collections?action=list\";\n      if (safeCheckCollectionExists(collectionListUrl, collectionName)) {\n        throw new IllegalStateException(\"\\nCollection '\"+collectionName+\n            \"' already exists!\\nChecked collection existence using Collections API command:\\n\"+\n            collectionListUrl);\n      }\n\n      // doesn't seem to exist ... try to create\n      String createCollectionUrl =\n          String.format(Locale.ROOT,\n              \"%s/admin/collections?action=CREATE&name=%s&numShards=%d&replicationFactor=%d&maxShardsPerNode=%d&collection.configName=%s\",\n              baseUrl,\n              collectionName,\n              numShards,\n              replicationFactor,\n              maxShardsPerNode,\n              confname);\n\n      echo(\"\\nCreating new collection '\"+collectionName+\"' using command:\\n\"+createCollectionUrl+\"\\n\");\n\n      Map<String,Object> json = null;\n      try {\n        json = getJson(createCollectionUrl);\n      } catch (SolrServerException sse) {\n        throw new Exception(\"Failed to create collection '\"+collectionName+\"' due to: \"+sse.getMessage());\n      }\n\n      CharArr arr = new CharArr();\n      new JSONWriter(arr, 2).write(json);\n      echo(arr.toString());\n    }\n\n","sourceOld":"    protected void runCloudTool(CloudSolrClient cloudSolrClient, CommandLine cli) throws Exception {\n\n      Set<String> liveNodes = cloudSolrClient.getZkStateReader().getClusterState().getLiveNodes();\n      if (liveNodes.isEmpty())\n        throw new IllegalStateException(\"No live nodes found! Cannot create a collection until \" +\n            \"there is at least 1 live node in the cluster.\");\n      \n      String baseUrl = cli.getOptionValue(\"solrUrl\");\n      if (baseUrl == null) {\n        String firstLiveNode = liveNodes.iterator().next();\n        baseUrl = cloudSolrClient.getZkStateReader().getBaseUrlForNodeName(firstLiveNode);\n      }\n\n      String collectionName = cli.getOptionValue(NAME);\n\n      // build a URL to create the collection\n      int numShards = optionAsInt(cli, \"shards\", 1);\n      int replicationFactor = optionAsInt(cli, \"replicationFactor\", 1);\n      int maxShardsPerNode = -1;\n\n      if (cli.hasOption(\"maxShardsPerNode\")) {\n        maxShardsPerNode = Integer.parseInt(cli.getOptionValue(\"maxShardsPerNode\"));\n      } else {\n        // need number of live nodes to determine maxShardsPerNode if it is not set\n        int numNodes = liveNodes.size();\n        maxShardsPerNode = ((numShards*replicationFactor)+numNodes-1)/numNodes;\n      }\n\n      String confname = cli.getOptionValue(\"confname\", collectionName);\n      boolean configExistsInZk =\n          cloudSolrClient.getZkStateReader().getZkClient().exists(\"/configs/\" + confname, true);\n\n      if (\".system\".equals(collectionName)) {\n        //do nothing\n      } else if (configExistsInZk) {\n        echo(\"Re-using existing configuration directory \"+confname);\n      } else {\n        Path confPath = ZkConfigManager.getConfigsetPath(cli.getOptionValue(\"confdir\", DEFAULT_CONFIG_SET),\n            cli.getOptionValue(\"configsetsDir\"));\n\n        echo(\"Uploading \" + confPath.toAbsolutePath().toString() +\n            \" for config \" + confname + \" to ZooKeeper at \" + cloudSolrClient.getZkHost());\n        cloudSolrClient.uploadConfig(confPath, confname);\n      }\n\n      // since creating a collection is a heavy-weight operation, check for existence first\n      String collectionListUrl = baseUrl+\"/admin/collections?action=list\";\n      if (safeCheckCollectionExists(collectionListUrl, collectionName)) {\n        throw new IllegalStateException(\"\\nCollection '\"+collectionName+\n            \"' already exists!\\nChecked collection existence using Collections API command:\\n\"+\n            collectionListUrl);\n      }\n\n      // doesn't seem to exist ... try to create\n      String createCollectionUrl =\n          String.format(Locale.ROOT,\n              \"%s/admin/collections?action=CREATE&name=%s&numShards=%d&replicationFactor=%d&maxShardsPerNode=%d&collection.configName=%s\",\n              baseUrl,\n              collectionName,\n              numShards,\n              replicationFactor,\n              maxShardsPerNode,\n              confname);\n\n      echo(\"\\nCreating new collection '\"+collectionName+\"' using command:\\n\"+createCollectionUrl+\"\\n\");\n\n      Map<String,Object> json = null;\n      try {\n        json = getJson(createCollectionUrl);\n      } catch (SolrServerException sse) {\n        throw new Exception(\"Failed to create collection '\"+collectionName+\"' due to: \"+sse.getMessage());\n      }\n\n      CharArr arr = new CharArr();\n      new JSONWriter(arr, 2).write(json);\n      echo(arr.toString());\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"197bbedf08450ade98a11f4a0001448059666bec","date":1498534625,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.CreateCollectionTool#runCloudTool(CloudSolrClient,CommandLine).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.CreateCollectionTool#runCloudTool(CloudSolrClient,CommandLine).mjava","sourceNew":"    protected void runCloudTool(CloudSolrClient cloudSolrClient, CommandLine cli) throws Exception {\n\n      Set<String> liveNodes = cloudSolrClient.getZkStateReader().getClusterState().getLiveNodes();\n      if (liveNodes.isEmpty())\n        throw new IllegalStateException(\"No live nodes found! Cannot create a collection until \" +\n            \"there is at least 1 live node in the cluster.\");\n      \n      String baseUrl = cli.getOptionValue(\"solrUrl\");\n      if (baseUrl == null) {\n        String firstLiveNode = liveNodes.iterator().next();\n        baseUrl = cloudSolrClient.getZkStateReader().getBaseUrlForNodeName(firstLiveNode);\n      }\n\n      String collectionName = cli.getOptionValue(NAME);\n\n      // build a URL to create the collection\n      int numShards = optionAsInt(cli, \"shards\", 1);\n      int replicationFactor = optionAsInt(cli, \"replicationFactor\", 1);\n      int maxShardsPerNode = -1;\n\n      if (cli.hasOption(\"maxShardsPerNode\")) {\n        maxShardsPerNode = Integer.parseInt(cli.getOptionValue(\"maxShardsPerNode\"));\n      } else {\n        // need number of live nodes to determine maxShardsPerNode if it is not set\n        int numNodes = liveNodes.size();\n        maxShardsPerNode = ((numShards*replicationFactor)+numNodes-1)/numNodes;\n      }\n\n      String confname = cli.getOptionValue(\"confname\");\n      String confdir = cli.getOptionValue(\"confdir\");\n      String configsetsDir = cli.getOptionValue(\"configsetsDir\");\n\n      boolean configExistsInZk = confname != null && !\"\".equals(confname.trim()) &&\n          cloudSolrClient.getZkStateReader().getZkClient().exists(\"/configs/\" + confname, true);\n\n      if (\".system\".equals(collectionName)) {\n        //do nothing\n      } else if (configExistsInZk) {\n        echo(\"Re-using existing configuration directory \"+confname);\n      } else if (confdir != null && !\"\".equals(confdir.trim())){\n        if (confname == null || \"\".equals(confname.trim())) {\n          confname = collectionName;\n        }\n        Path confPath = ZkConfigManager.getConfigsetPath(confdir,\n            configsetsDir);\n\n        echo(\"Uploading \" + confPath.toAbsolutePath().toString() +\n            \" for config \" + confname + \" to ZooKeeper at \" + cloudSolrClient.getZkHost());\n        ((ZkClientClusterStateProvider) cloudSolrClient.getClusterStateProvider()).uploadConfig(confPath, confname);\n      }\n\n      // since creating a collection is a heavy-weight operation, check for existence first\n      String collectionListUrl = baseUrl+\"/admin/collections?action=list\";\n      if (safeCheckCollectionExists(collectionListUrl, collectionName)) {\n        throw new IllegalStateException(\"\\nCollection '\"+collectionName+\n            \"' already exists!\\nChecked collection existence using Collections API command:\\n\"+\n            collectionListUrl);\n      }\n\n      // doesn't seem to exist ... try to create\n      String createCollectionUrl =\n          String.format(Locale.ROOT,\n              \"%s/admin/collections?action=CREATE&name=%s&numShards=%d&replicationFactor=%d&maxShardsPerNode=%d\",\n              baseUrl,\n              collectionName,\n              numShards,\n              replicationFactor,\n              maxShardsPerNode);\n      if (confname != null && !\"\".equals(confname.trim())) {\n        createCollectionUrl = createCollectionUrl + String.format(Locale.ROOT, \"&collection.configName=%s\", confname);\n      }\n\n      echo(\"\\nCreating new collection '\"+collectionName+\"' using command:\\n\"+createCollectionUrl+\"\\n\");\n\n      Map<String,Object> json = null;\n      try {\n        json = getJson(createCollectionUrl);\n      } catch (SolrServerException sse) {\n        throw new Exception(\"Failed to create collection '\"+collectionName+\"' due to: \"+sse.getMessage());\n      }\n\n      CharArr arr = new CharArr();\n      new JSONWriter(arr, 2).write(json);\n      echo(arr.toString());\n    }\n\n","sourceOld":"    protected void runCloudTool(CloudSolrClient cloudSolrClient, CommandLine cli) throws Exception {\n\n      Set<String> liveNodes = cloudSolrClient.getZkStateReader().getClusterState().getLiveNodes();\n      if (liveNodes.isEmpty())\n        throw new IllegalStateException(\"No live nodes found! Cannot create a collection until \" +\n            \"there is at least 1 live node in the cluster.\");\n      \n      String baseUrl = cli.getOptionValue(\"solrUrl\");\n      if (baseUrl == null) {\n        String firstLiveNode = liveNodes.iterator().next();\n        baseUrl = cloudSolrClient.getZkStateReader().getBaseUrlForNodeName(firstLiveNode);\n      }\n\n      String collectionName = cli.getOptionValue(NAME);\n\n      // build a URL to create the collection\n      int numShards = optionAsInt(cli, \"shards\", 1);\n      int replicationFactor = optionAsInt(cli, \"replicationFactor\", 1);\n      int maxShardsPerNode = -1;\n\n      if (cli.hasOption(\"maxShardsPerNode\")) {\n        maxShardsPerNode = Integer.parseInt(cli.getOptionValue(\"maxShardsPerNode\"));\n      } else {\n        // need number of live nodes to determine maxShardsPerNode if it is not set\n        int numNodes = liveNodes.size();\n        maxShardsPerNode = ((numShards*replicationFactor)+numNodes-1)/numNodes;\n      }\n\n      String confname = cli.getOptionValue(\"confname\", collectionName);\n      boolean configExistsInZk =\n          cloudSolrClient.getZkStateReader().getZkClient().exists(\"/configs/\" + confname, true);\n\n      if (\".system\".equals(collectionName)) {\n        //do nothing\n      } else if (configExistsInZk) {\n        echo(\"Re-using existing configuration directory \"+confname);\n      } else {\n        Path confPath = ZkConfigManager.getConfigsetPath(cli.getOptionValue(\"confdir\", DEFAULT_CONFIG_SET),\n            cli.getOptionValue(\"configsetsDir\"));\n\n        echo(\"Uploading \" + confPath.toAbsolutePath().toString() +\n            \" for config \" + confname + \" to ZooKeeper at \" + cloudSolrClient.getZkHost());\n        ((ZkClientClusterStateProvider) cloudSolrClient.getClusterStateProvider()).uploadConfig(confPath, confname);\n      }\n\n      // since creating a collection is a heavy-weight operation, check for existence first\n      String collectionListUrl = baseUrl+\"/admin/collections?action=list\";\n      if (safeCheckCollectionExists(collectionListUrl, collectionName)) {\n        throw new IllegalStateException(\"\\nCollection '\"+collectionName+\n            \"' already exists!\\nChecked collection existence using Collections API command:\\n\"+\n            collectionListUrl);\n      }\n\n      // doesn't seem to exist ... try to create\n      String createCollectionUrl =\n          String.format(Locale.ROOT,\n              \"%s/admin/collections?action=CREATE&name=%s&numShards=%d&replicationFactor=%d&maxShardsPerNode=%d&collection.configName=%s\",\n              baseUrl,\n              collectionName,\n              numShards,\n              replicationFactor,\n              maxShardsPerNode,\n              confname);\n\n      echo(\"\\nCreating new collection '\"+collectionName+\"' using command:\\n\"+createCollectionUrl+\"\\n\");\n\n      Map<String,Object> json = null;\n      try {\n        json = getJson(createCollectionUrl);\n      } catch (SolrServerException sse) {\n        throw new Exception(\"Failed to create collection '\"+collectionName+\"' due to: \"+sse.getMessage());\n      }\n\n      CharArr arr = new CharArr();\n      new JSONWriter(arr, 2).write(json);\n      echo(arr.toString());\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4","date":1498540685,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.CreateCollectionTool#runCloudTool(CloudSolrClient,CommandLine).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.CreateCollectionTool#runCloudTool(CloudSolrClient,CommandLine).mjava","sourceNew":"    protected void runCloudTool(CloudSolrClient cloudSolrClient, CommandLine cli) throws Exception {\n\n      Set<String> liveNodes = cloudSolrClient.getZkStateReader().getClusterState().getLiveNodes();\n      if (liveNodes.isEmpty())\n        throw new IllegalStateException(\"No live nodes found! Cannot create a collection until \" +\n            \"there is at least 1 live node in the cluster.\");\n      \n      String baseUrl = cli.getOptionValue(\"solrUrl\");\n      if (baseUrl == null) {\n        String firstLiveNode = liveNodes.iterator().next();\n        baseUrl = cloudSolrClient.getZkStateReader().getBaseUrlForNodeName(firstLiveNode);\n      }\n\n      String collectionName = cli.getOptionValue(NAME);\n\n      // build a URL to create the collection\n      int numShards = optionAsInt(cli, \"shards\", 1);\n      int replicationFactor = optionAsInt(cli, \"replicationFactor\", 1);\n      int maxShardsPerNode = -1;\n\n      if (cli.hasOption(\"maxShardsPerNode\")) {\n        maxShardsPerNode = Integer.parseInt(cli.getOptionValue(\"maxShardsPerNode\"));\n      } else {\n        // need number of live nodes to determine maxShardsPerNode if it is not set\n        int numNodes = liveNodes.size();\n        maxShardsPerNode = ((numShards*replicationFactor)+numNodes-1)/numNodes;\n      }\n\n      String confname = cli.getOptionValue(\"confname\");\n      String confdir = cli.getOptionValue(\"confdir\");\n      String configsetsDir = cli.getOptionValue(\"configsetsDir\");\n\n      boolean configExistsInZk = confname != null && !\"\".equals(confname.trim()) &&\n          cloudSolrClient.getZkStateReader().getZkClient().exists(\"/configs/\" + confname, true);\n\n      if (\".system\".equals(collectionName)) {\n        //do nothing\n      } else if (configExistsInZk) {\n        echo(\"Re-using existing configuration directory \"+confname);\n      } else if (confdir != null && !\"\".equals(confdir.trim())){\n        if (confname == null || \"\".equals(confname.trim())) {\n          confname = collectionName;\n        }\n        Path confPath = ZkConfigManager.getConfigsetPath(confdir,\n            configsetsDir);\n\n        echo(\"Uploading \" + confPath.toAbsolutePath().toString() +\n            \" for config \" + confname + \" to ZooKeeper at \" + cloudSolrClient.getZkHost());\n        ((ZkClientClusterStateProvider) cloudSolrClient.getClusterStateProvider()).uploadConfig(confPath, confname);\n      }\n\n      // since creating a collection is a heavy-weight operation, check for existence first\n      String collectionListUrl = baseUrl+\"/admin/collections?action=list\";\n      if (safeCheckCollectionExists(collectionListUrl, collectionName)) {\n        throw new IllegalStateException(\"\\nCollection '\"+collectionName+\n            \"' already exists!\\nChecked collection existence using Collections API command:\\n\"+\n            collectionListUrl);\n      }\n\n      // doesn't seem to exist ... try to create\n      String createCollectionUrl =\n          String.format(Locale.ROOT,\n              \"%s/admin/collections?action=CREATE&name=%s&numShards=%d&replicationFactor=%d&maxShardsPerNode=%d\",\n              baseUrl,\n              collectionName,\n              numShards,\n              replicationFactor,\n              maxShardsPerNode);\n      if (confname != null && !\"\".equals(confname.trim())) {\n        createCollectionUrl = createCollectionUrl + String.format(Locale.ROOT, \"&collection.configName=%s\", confname);\n      }\n\n      echo(\"\\nCreating new collection '\"+collectionName+\"' using command:\\n\"+createCollectionUrl+\"\\n\");\n\n      Map<String,Object> json = null;\n      try {\n        json = getJson(createCollectionUrl);\n      } catch (SolrServerException sse) {\n        throw new Exception(\"Failed to create collection '\"+collectionName+\"' due to: \"+sse.getMessage());\n      }\n\n      CharArr arr = new CharArr();\n      new JSONWriter(arr, 2).write(json);\n      echo(arr.toString());\n    }\n\n","sourceOld":"    protected void runCloudTool(CloudSolrClient cloudSolrClient, CommandLine cli) throws Exception {\n\n      Set<String> liveNodes = cloudSolrClient.getZkStateReader().getClusterState().getLiveNodes();\n      if (liveNodes.isEmpty())\n        throw new IllegalStateException(\"No live nodes found! Cannot create a collection until \" +\n            \"there is at least 1 live node in the cluster.\");\n      \n      String baseUrl = cli.getOptionValue(\"solrUrl\");\n      if (baseUrl == null) {\n        String firstLiveNode = liveNodes.iterator().next();\n        baseUrl = cloudSolrClient.getZkStateReader().getBaseUrlForNodeName(firstLiveNode);\n      }\n\n      String collectionName = cli.getOptionValue(NAME);\n\n      // build a URL to create the collection\n      int numShards = optionAsInt(cli, \"shards\", 1);\n      int replicationFactor = optionAsInt(cli, \"replicationFactor\", 1);\n      int maxShardsPerNode = -1;\n\n      if (cli.hasOption(\"maxShardsPerNode\")) {\n        maxShardsPerNode = Integer.parseInt(cli.getOptionValue(\"maxShardsPerNode\"));\n      } else {\n        // need number of live nodes to determine maxShardsPerNode if it is not set\n        int numNodes = liveNodes.size();\n        maxShardsPerNode = ((numShards*replicationFactor)+numNodes-1)/numNodes;\n      }\n\n      String confname = cli.getOptionValue(\"confname\", collectionName);\n      boolean configExistsInZk =\n          cloudSolrClient.getZkStateReader().getZkClient().exists(\"/configs/\" + confname, true);\n\n      if (\".system\".equals(collectionName)) {\n        //do nothing\n      } else if (configExistsInZk) {\n        echo(\"Re-using existing configuration directory \"+confname);\n      } else {\n        Path confPath = ZkConfigManager.getConfigsetPath(cli.getOptionValue(\"confdir\", DEFAULT_CONFIG_SET),\n            cli.getOptionValue(\"configsetsDir\"));\n\n        echo(\"Uploading \" + confPath.toAbsolutePath().toString() +\n            \" for config \" + confname + \" to ZooKeeper at \" + cloudSolrClient.getZkHost());\n        ((ZkClientClusterStateProvider) cloudSolrClient.getClusterStateProvider()).uploadConfig(confPath, confname);\n      }\n\n      // since creating a collection is a heavy-weight operation, check for existence first\n      String collectionListUrl = baseUrl+\"/admin/collections?action=list\";\n      if (safeCheckCollectionExists(collectionListUrl, collectionName)) {\n        throw new IllegalStateException(\"\\nCollection '\"+collectionName+\n            \"' already exists!\\nChecked collection existence using Collections API command:\\n\"+\n            collectionListUrl);\n      }\n\n      // doesn't seem to exist ... try to create\n      String createCollectionUrl =\n          String.format(Locale.ROOT,\n              \"%s/admin/collections?action=CREATE&name=%s&numShards=%d&replicationFactor=%d&maxShardsPerNode=%d&collection.configName=%s\",\n              baseUrl,\n              collectionName,\n              numShards,\n              replicationFactor,\n              maxShardsPerNode,\n              confname);\n\n      echo(\"\\nCreating new collection '\"+collectionName+\"' using command:\\n\"+createCollectionUrl+\"\\n\");\n\n      Map<String,Object> json = null;\n      try {\n        json = getJson(createCollectionUrl);\n      } catch (SolrServerException sse) {\n        throw new Exception(\"Failed to create collection '\"+collectionName+\"' due to: \"+sse.getMessage());\n      }\n\n      CharArr arr = new CharArr();\n      new JSONWriter(arr, 2).write(json);\n      echo(arr.toString());\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.CreateCollectionTool#runCloudTool(CloudSolrClient,CommandLine).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.CreateCollectionTool#runCloudTool(CloudSolrClient,CommandLine).mjava","sourceNew":"    protected void runCloudTool(CloudSolrClient cloudSolrClient, CommandLine cli) throws Exception {\n\n      Set<String> liveNodes = cloudSolrClient.getZkStateReader().getClusterState().getLiveNodes();\n      if (liveNodes.isEmpty())\n        throw new IllegalStateException(\"No live nodes found! Cannot create a collection until \" +\n            \"there is at least 1 live node in the cluster.\");\n      \n      String baseUrl = cli.getOptionValue(\"solrUrl\");\n      if (baseUrl == null) {\n        String firstLiveNode = liveNodes.iterator().next();\n        baseUrl = cloudSolrClient.getZkStateReader().getBaseUrlForNodeName(firstLiveNode);\n      }\n\n      String collectionName = cli.getOptionValue(NAME);\n\n      // build a URL to create the collection\n      int numShards = optionAsInt(cli, \"shards\", 1);\n      int replicationFactor = optionAsInt(cli, \"replicationFactor\", 1);\n      int maxShardsPerNode = -1;\n\n      if (cli.hasOption(\"maxShardsPerNode\")) {\n        maxShardsPerNode = Integer.parseInt(cli.getOptionValue(\"maxShardsPerNode\"));\n      } else {\n        // need number of live nodes to determine maxShardsPerNode if it is not set\n        int numNodes = liveNodes.size();\n        maxShardsPerNode = ((numShards*replicationFactor)+numNodes-1)/numNodes;\n      }\n\n      String confname = cli.getOptionValue(\"confname\");\n      String confdir = cli.getOptionValue(\"confdir\");\n      String configsetsDir = cli.getOptionValue(\"configsetsDir\");\n\n      boolean configExistsInZk = confname != null && !\"\".equals(confname.trim()) &&\n          cloudSolrClient.getZkStateReader().getZkClient().exists(\"/configs/\" + confname, true);\n\n      if (\".system\".equals(collectionName)) {\n        //do nothing\n      } else if (configExistsInZk) {\n        echo(\"Re-using existing configuration directory \"+confname);\n      } else if (confdir != null && !\"\".equals(confdir.trim())){\n        if (confname == null || \"\".equals(confname.trim())) {\n          confname = collectionName;\n        }\n        Path confPath = ZkConfigManager.getConfigsetPath(confdir,\n            configsetsDir);\n\n        echo(\"Uploading \" + confPath.toAbsolutePath().toString() +\n            \" for config \" + confname + \" to ZooKeeper at \" + cloudSolrClient.getZkHost());\n        ((ZkClientClusterStateProvider) cloudSolrClient.getClusterStateProvider()).uploadConfig(confPath, confname);\n      }\n\n      // since creating a collection is a heavy-weight operation, check for existence first\n      String collectionListUrl = baseUrl+\"/admin/collections?action=list\";\n      if (safeCheckCollectionExists(collectionListUrl, collectionName)) {\n        throw new IllegalStateException(\"\\nCollection '\"+collectionName+\n            \"' already exists!\\nChecked collection existence using Collections API command:\\n\"+\n            collectionListUrl);\n      }\n\n      // doesn't seem to exist ... try to create\n      String createCollectionUrl =\n          String.format(Locale.ROOT,\n              \"%s/admin/collections?action=CREATE&name=%s&numShards=%d&replicationFactor=%d&maxShardsPerNode=%d\",\n              baseUrl,\n              collectionName,\n              numShards,\n              replicationFactor,\n              maxShardsPerNode);\n      if (confname != null && !\"\".equals(confname.trim())) {\n        createCollectionUrl = createCollectionUrl + String.format(Locale.ROOT, \"&collection.configName=%s\", confname);\n      }\n\n      echo(\"\\nCreating new collection '\"+collectionName+\"' using command:\\n\"+createCollectionUrl+\"\\n\");\n\n      Map<String,Object> json = null;\n      try {\n        json = getJson(createCollectionUrl);\n      } catch (SolrServerException sse) {\n        throw new Exception(\"Failed to create collection '\"+collectionName+\"' due to: \"+sse.getMessage());\n      }\n\n      CharArr arr = new CharArr();\n      new JSONWriter(arr, 2).write(json);\n      echo(arr.toString());\n    }\n\n","sourceOld":"    protected void runCloudTool(CloudSolrClient cloudSolrClient, CommandLine cli) throws Exception {\n\n      Set<String> liveNodes = cloudSolrClient.getZkStateReader().getClusterState().getLiveNodes();\n      if (liveNodes.isEmpty())\n        throw new IllegalStateException(\"No live nodes found! Cannot create a collection until \" +\n            \"there is at least 1 live node in the cluster.\");\n      \n      String baseUrl = cli.getOptionValue(\"solrUrl\");\n      if (baseUrl == null) {\n        String firstLiveNode = liveNodes.iterator().next();\n        baseUrl = cloudSolrClient.getZkStateReader().getBaseUrlForNodeName(firstLiveNode);\n      }\n\n      String collectionName = cli.getOptionValue(NAME);\n\n      // build a URL to create the collection\n      int numShards = optionAsInt(cli, \"shards\", 1);\n      int replicationFactor = optionAsInt(cli, \"replicationFactor\", 1);\n      int maxShardsPerNode = -1;\n\n      if (cli.hasOption(\"maxShardsPerNode\")) {\n        maxShardsPerNode = Integer.parseInt(cli.getOptionValue(\"maxShardsPerNode\"));\n      } else {\n        // need number of live nodes to determine maxShardsPerNode if it is not set\n        int numNodes = liveNodes.size();\n        maxShardsPerNode = ((numShards*replicationFactor)+numNodes-1)/numNodes;\n      }\n\n      String confname = cli.getOptionValue(\"confname\", collectionName);\n      boolean configExistsInZk =\n          cloudSolrClient.getZkStateReader().getZkClient().exists(\"/configs/\" + confname, true);\n\n      if (\".system\".equals(collectionName)) {\n        //do nothing\n      } else if (configExistsInZk) {\n        echo(\"Re-using existing configuration directory \"+confname);\n      } else {\n        Path confPath = ZkConfigManager.getConfigsetPath(cli.getOptionValue(\"confdir\", DEFAULT_CONFIG_SET),\n            cli.getOptionValue(\"configsetsDir\"));\n\n        echo(\"Uploading \" + confPath.toAbsolutePath().toString() +\n            \" for config \" + confname + \" to ZooKeeper at \" + cloudSolrClient.getZkHost());\n        ((ZkClientClusterStateProvider) cloudSolrClient.getClusterStateProvider()).uploadConfig(confPath, confname);\n      }\n\n      // since creating a collection is a heavy-weight operation, check for existence first\n      String collectionListUrl = baseUrl+\"/admin/collections?action=list\";\n      if (safeCheckCollectionExists(collectionListUrl, collectionName)) {\n        throw new IllegalStateException(\"\\nCollection '\"+collectionName+\n            \"' already exists!\\nChecked collection existence using Collections API command:\\n\"+\n            collectionListUrl);\n      }\n\n      // doesn't seem to exist ... try to create\n      String createCollectionUrl =\n          String.format(Locale.ROOT,\n              \"%s/admin/collections?action=CREATE&name=%s&numShards=%d&replicationFactor=%d&maxShardsPerNode=%d&collection.configName=%s\",\n              baseUrl,\n              collectionName,\n              numShards,\n              replicationFactor,\n              maxShardsPerNode,\n              confname);\n\n      echo(\"\\nCreating new collection '\"+collectionName+\"' using command:\\n\"+createCollectionUrl+\"\\n\");\n\n      Map<String,Object> json = null;\n      try {\n        json = getJson(createCollectionUrl);\n      } catch (SolrServerException sse) {\n        throw new Exception(\"Failed to create collection '\"+collectionName+\"' due to: \"+sse.getMessage());\n      }\n\n      CharArr arr = new CharArr();\n      new JSONWriter(arr, 2).write(json);\n      echo(arr.toString());\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"86d2df3ca94d97c62f70b0d321f5f597de2d3eb3","date":1503399053,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.CreateCollectionTool#runCloudTool(CloudSolrClient,CommandLine).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.CreateCollectionTool#runCloudTool(CloudSolrClient,CommandLine).mjava","sourceNew":"    protected void runCloudTool(CloudSolrClient cloudSolrClient, CommandLine cli) throws Exception {\n\n      Set<String> liveNodes = cloudSolrClient.getZkStateReader().getClusterState().getLiveNodes();\n      if (liveNodes.isEmpty())\n        throw new IllegalStateException(\"No live nodes found! Cannot create a collection until \" +\n            \"there is at least 1 live node in the cluster.\");\n      \n      String baseUrl = cli.getOptionValue(\"solrUrl\");\n      if (baseUrl == null) {\n        String firstLiveNode = liveNodes.iterator().next();\n        baseUrl = cloudSolrClient.getZkStateReader().getBaseUrlForNodeName(firstLiveNode);\n      }\n\n      String collectionName = cli.getOptionValue(NAME);\n\n      // build a URL to create the collection\n      int numShards = optionAsInt(cli, \"shards\", 1);\n      int replicationFactor = optionAsInt(cli, \"replicationFactor\", 1);\n      int maxShardsPerNode = -1;\n\n      if (cli.hasOption(\"maxShardsPerNode\")) {\n        maxShardsPerNode = Integer.parseInt(cli.getOptionValue(\"maxShardsPerNode\"));\n      }\n\n      String confname = cli.getOptionValue(\"confname\");\n      String confdir = cli.getOptionValue(\"confdir\");\n      String configsetsDir = cli.getOptionValue(\"configsetsDir\");\n\n      boolean configExistsInZk = confname != null && !\"\".equals(confname.trim()) &&\n          cloudSolrClient.getZkStateReader().getZkClient().exists(\"/configs/\" + confname, true);\n\n      if (\".system\".equals(collectionName)) {\n        //do nothing\n      } else if (configExistsInZk) {\n        echo(\"Re-using existing configuration directory \"+confname);\n      } else if (confdir != null && !\"\".equals(confdir.trim())){\n        if (confname == null || \"\".equals(confname.trim())) {\n          confname = collectionName;\n        }\n        Path confPath = ZkConfigManager.getConfigsetPath(confdir,\n            configsetsDir);\n\n        echoIfVerbose(\"Uploading \" + confPath.toAbsolutePath().toString() +\n            \" for config \" + confname + \" to ZooKeeper at \" + cloudSolrClient.getZkHost(), cli);\n        ((ZkClientClusterStateProvider) cloudSolrClient.getClusterStateProvider()).uploadConfig(confPath, confname);\n      }\n\n      // since creating a collection is a heavy-weight operation, check for existence first\n      String collectionListUrl = baseUrl+\"/admin/collections?action=list\";\n      if (safeCheckCollectionExists(collectionListUrl, collectionName)) {\n        throw new IllegalStateException(\"\\nCollection '\"+collectionName+\n            \"' already exists!\\nChecked collection existence using Collections API command:\\n\"+\n            collectionListUrl);\n      }\n\n      // doesn't seem to exist ... try to create\n      String createCollectionUrl =\n          String.format(Locale.ROOT,\n              \"%s/admin/collections?action=CREATE&name=%s&numShards=%d&replicationFactor=%d&maxShardsPerNode=%d\",\n              baseUrl,\n              collectionName,\n              numShards,\n              replicationFactor,\n              maxShardsPerNode);\n      if (confname != null && !\"\".equals(confname.trim())) {\n        createCollectionUrl = createCollectionUrl + String.format(Locale.ROOT, \"&collection.configName=%s\", confname);\n      }\n\n      echoIfVerbose(\"\\nCreating new collection '\"+collectionName+\"' using command:\\n\"+createCollectionUrl+\"\\n\", cli);\n\n      Map<String,Object> json = null;\n      try {\n        json = getJson(createCollectionUrl);\n      } catch (SolrServerException sse) {\n        throw new Exception(\"Failed to create collection '\"+collectionName+\"' due to: \"+sse.getMessage());\n      }\n\n      if (cli.hasOption(\"verbose\")) {\n        CharArr arr = new CharArr();\n        new JSONWriter(arr, 2).write(json);\n        echo(arr.toString());\n      } else {\n        String endMessage = String.format(Locale.ROOT, \"Created collection '%s' with %d shard(s), %d replica(s)\",\n            collectionName, numShards, replicationFactor);\n        if (confname != null && !\"\".equals(confname.trim())) {\n          endMessage += String.format(Locale.ROOT, \" with config-set '%s'\", confname);\n        }\n      \n        echo(endMessage);\n      }\n    }\n\n","sourceOld":"    protected void runCloudTool(CloudSolrClient cloudSolrClient, CommandLine cli) throws Exception {\n\n      Set<String> liveNodes = cloudSolrClient.getZkStateReader().getClusterState().getLiveNodes();\n      if (liveNodes.isEmpty())\n        throw new IllegalStateException(\"No live nodes found! Cannot create a collection until \" +\n            \"there is at least 1 live node in the cluster.\");\n      \n      String baseUrl = cli.getOptionValue(\"solrUrl\");\n      if (baseUrl == null) {\n        String firstLiveNode = liveNodes.iterator().next();\n        baseUrl = cloudSolrClient.getZkStateReader().getBaseUrlForNodeName(firstLiveNode);\n      }\n\n      String collectionName = cli.getOptionValue(NAME);\n\n      // build a URL to create the collection\n      int numShards = optionAsInt(cli, \"shards\", 1);\n      int replicationFactor = optionAsInt(cli, \"replicationFactor\", 1);\n      int maxShardsPerNode = -1;\n\n      if (cli.hasOption(\"maxShardsPerNode\")) {\n        maxShardsPerNode = Integer.parseInt(cli.getOptionValue(\"maxShardsPerNode\"));\n      }\n\n      String confname = cli.getOptionValue(\"confname\");\n      String confdir = cli.getOptionValue(\"confdir\");\n      String configsetsDir = cli.getOptionValue(\"configsetsDir\");\n\n      boolean configExistsInZk = confname != null && !\"\".equals(confname.trim()) &&\n          cloudSolrClient.getZkStateReader().getZkClient().exists(\"/configs/\" + confname, true);\n\n      if (\".system\".equals(collectionName)) {\n        //do nothing\n      } else if (configExistsInZk) {\n        echo(\"Re-using existing configuration directory \"+confname);\n      } else if (confdir != null && !\"\".equals(confdir.trim())){\n        if (confname == null || \"\".equals(confname.trim())) {\n          confname = collectionName;\n        }\n        Path confPath = ZkConfigManager.getConfigsetPath(confdir,\n            configsetsDir);\n\n        echo(\"Uploading \" + confPath.toAbsolutePath().toString() +\n            \" for config \" + confname + \" to ZooKeeper at \" + cloudSolrClient.getZkHost());\n        ((ZkClientClusterStateProvider) cloudSolrClient.getClusterStateProvider()).uploadConfig(confPath, confname);\n      }\n\n      // since creating a collection is a heavy-weight operation, check for existence first\n      String collectionListUrl = baseUrl+\"/admin/collections?action=list\";\n      if (safeCheckCollectionExists(collectionListUrl, collectionName)) {\n        throw new IllegalStateException(\"\\nCollection '\"+collectionName+\n            \"' already exists!\\nChecked collection existence using Collections API command:\\n\"+\n            collectionListUrl);\n      }\n\n      // doesn't seem to exist ... try to create\n      String createCollectionUrl =\n          String.format(Locale.ROOT,\n              \"%s/admin/collections?action=CREATE&name=%s&numShards=%d&replicationFactor=%d&maxShardsPerNode=%d\",\n              baseUrl,\n              collectionName,\n              numShards,\n              replicationFactor,\n              maxShardsPerNode);\n      if (confname != null && !\"\".equals(confname.trim())) {\n        createCollectionUrl = createCollectionUrl + String.format(Locale.ROOT, \"&collection.configName=%s\", confname);\n      }\n\n      echo(\"\\nCreating new collection '\"+collectionName+\"' using command:\\n\"+createCollectionUrl+\"\\n\");\n\n      Map<String,Object> json = null;\n      try {\n        json = getJson(createCollectionUrl);\n      } catch (SolrServerException sse) {\n        throw new Exception(\"Failed to create collection '\"+collectionName+\"' due to: \"+sse.getMessage());\n      }\n\n      CharArr arr = new CharArr();\n      new JSONWriter(arr, 2).write(json);\n      echo(arr.toString());\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55ed5a78f8a4b37108ac73a894a105db562d303e","date":1500477652,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.CreateCollectionTool#runCloudTool(CloudSolrClient,CommandLine).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.CreateCollectionTool#runCloudTool(CloudSolrClient,CommandLine).mjava","sourceNew":"    protected void runCloudTool(CloudSolrClient cloudSolrClient, CommandLine cli) throws Exception {\n\n      Set<String> liveNodes = cloudSolrClient.getZkStateReader().getClusterState().getLiveNodes();\n      if (liveNodes.isEmpty())\n        throw new IllegalStateException(\"No live nodes found! Cannot create a collection until \" +\n            \"there is at least 1 live node in the cluster.\");\n      \n      String baseUrl = cli.getOptionValue(\"solrUrl\");\n      if (baseUrl == null) {\n        String firstLiveNode = liveNodes.iterator().next();\n        baseUrl = cloudSolrClient.getZkStateReader().getBaseUrlForNodeName(firstLiveNode);\n      }\n\n      String collectionName = cli.getOptionValue(NAME);\n\n      // build a URL to create the collection\n      int numShards = optionAsInt(cli, \"shards\", 1);\n      int replicationFactor = optionAsInt(cli, \"replicationFactor\", 1);\n      int maxShardsPerNode = -1;\n\n      if (cli.hasOption(\"maxShardsPerNode\")) {\n        maxShardsPerNode = Integer.parseInt(cli.getOptionValue(\"maxShardsPerNode\"));\n      } else {\n        // need number of live nodes to determine maxShardsPerNode if it is not set\n        int numNodes = liveNodes.size();\n        maxShardsPerNode = ((numShards*replicationFactor)+numNodes-1)/numNodes;\n      }\n\n      String confname = cli.getOptionValue(\"confname\");\n      String confdir = cli.getOptionValue(\"confdir\");\n      String configsetsDir = cli.getOptionValue(\"configsetsDir\");\n\n      boolean configExistsInZk = confname != null && !\"\".equals(confname.trim()) &&\n          cloudSolrClient.getZkStateReader().getZkClient().exists(\"/configs/\" + confname, true);\n\n      if (CollectionAdminParams.SYSTEM_COLL.equals(collectionName)) {\n        //do nothing\n      } else if (configExistsInZk) {\n        echo(\"Re-using existing configuration directory \"+confname);\n      } else if (confdir != null && !\"\".equals(confdir.trim())){\n        if (confname == null || \"\".equals(confname.trim())) {\n          confname = collectionName;\n        }\n        Path confPath = ZkConfigManager.getConfigsetPath(confdir,\n            configsetsDir);\n\n        echo(\"Uploading \" + confPath.toAbsolutePath().toString() +\n            \" for config \" + confname + \" to ZooKeeper at \" + cloudSolrClient.getZkHost());\n        ((ZkClientClusterStateProvider) cloudSolrClient.getClusterStateProvider()).uploadConfig(confPath, confname);\n      }\n\n      // since creating a collection is a heavy-weight operation, check for existence first\n      String collectionListUrl = baseUrl+\"/admin/collections?action=list\";\n      if (safeCheckCollectionExists(collectionListUrl, collectionName)) {\n        throw new IllegalStateException(\"\\nCollection '\"+collectionName+\n            \"' already exists!\\nChecked collection existence using Collections API command:\\n\"+\n            collectionListUrl);\n      }\n\n      // doesn't seem to exist ... try to create\n      String createCollectionUrl =\n          String.format(Locale.ROOT,\n              \"%s/admin/collections?action=CREATE&name=%s&numShards=%d&replicationFactor=%d&maxShardsPerNode=%d\",\n              baseUrl,\n              collectionName,\n              numShards,\n              replicationFactor,\n              maxShardsPerNode);\n      if (confname != null && !\"\".equals(confname.trim())) {\n        createCollectionUrl = createCollectionUrl + String.format(Locale.ROOT, \"&collection.configName=%s\", confname);\n      }\n\n      echo(\"\\nCreating new collection '\"+collectionName+\"' using command:\\n\"+createCollectionUrl+\"\\n\");\n\n      Map<String,Object> json = null;\n      try {\n        json = getJson(createCollectionUrl);\n      } catch (SolrServerException sse) {\n        throw new Exception(\"Failed to create collection '\"+collectionName+\"' due to: \"+sse.getMessage());\n      }\n\n      CharArr arr = new CharArr();\n      new JSONWriter(arr, 2).write(json);\n      echo(arr.toString());\n    }\n\n","sourceOld":"    protected void runCloudTool(CloudSolrClient cloudSolrClient, CommandLine cli) throws Exception {\n\n      Set<String> liveNodes = cloudSolrClient.getZkStateReader().getClusterState().getLiveNodes();\n      if (liveNodes.isEmpty())\n        throw new IllegalStateException(\"No live nodes found! Cannot create a collection until \" +\n            \"there is at least 1 live node in the cluster.\");\n      \n      String baseUrl = cli.getOptionValue(\"solrUrl\");\n      if (baseUrl == null) {\n        String firstLiveNode = liveNodes.iterator().next();\n        baseUrl = cloudSolrClient.getZkStateReader().getBaseUrlForNodeName(firstLiveNode);\n      }\n\n      String collectionName = cli.getOptionValue(NAME);\n\n      // build a URL to create the collection\n      int numShards = optionAsInt(cli, \"shards\", 1);\n      int replicationFactor = optionAsInt(cli, \"replicationFactor\", 1);\n      int maxShardsPerNode = -1;\n\n      if (cli.hasOption(\"maxShardsPerNode\")) {\n        maxShardsPerNode = Integer.parseInt(cli.getOptionValue(\"maxShardsPerNode\"));\n      } else {\n        // need number of live nodes to determine maxShardsPerNode if it is not set\n        int numNodes = liveNodes.size();\n        maxShardsPerNode = ((numShards*replicationFactor)+numNodes-1)/numNodes;\n      }\n\n      String confname = cli.getOptionValue(\"confname\");\n      String confdir = cli.getOptionValue(\"confdir\");\n      String configsetsDir = cli.getOptionValue(\"configsetsDir\");\n\n      boolean configExistsInZk = confname != null && !\"\".equals(confname.trim()) &&\n          cloudSolrClient.getZkStateReader().getZkClient().exists(\"/configs/\" + confname, true);\n\n      if (\".system\".equals(collectionName)) {\n        //do nothing\n      } else if (configExistsInZk) {\n        echo(\"Re-using existing configuration directory \"+confname);\n      } else if (confdir != null && !\"\".equals(confdir.trim())){\n        if (confname == null || \"\".equals(confname.trim())) {\n          confname = collectionName;\n        }\n        Path confPath = ZkConfigManager.getConfigsetPath(confdir,\n            configsetsDir);\n\n        echo(\"Uploading \" + confPath.toAbsolutePath().toString() +\n            \" for config \" + confname + \" to ZooKeeper at \" + cloudSolrClient.getZkHost());\n        ((ZkClientClusterStateProvider) cloudSolrClient.getClusterStateProvider()).uploadConfig(confPath, confname);\n      }\n\n      // since creating a collection is a heavy-weight operation, check for existence first\n      String collectionListUrl = baseUrl+\"/admin/collections?action=list\";\n      if (safeCheckCollectionExists(collectionListUrl, collectionName)) {\n        throw new IllegalStateException(\"\\nCollection '\"+collectionName+\n            \"' already exists!\\nChecked collection existence using Collections API command:\\n\"+\n            collectionListUrl);\n      }\n\n      // doesn't seem to exist ... try to create\n      String createCollectionUrl =\n          String.format(Locale.ROOT,\n              \"%s/admin/collections?action=CREATE&name=%s&numShards=%d&replicationFactor=%d&maxShardsPerNode=%d\",\n              baseUrl,\n              collectionName,\n              numShards,\n              replicationFactor,\n              maxShardsPerNode);\n      if (confname != null && !\"\".equals(confname.trim())) {\n        createCollectionUrl = createCollectionUrl + String.format(Locale.ROOT, \"&collection.configName=%s\", confname);\n      }\n\n      echo(\"\\nCreating new collection '\"+collectionName+\"' using command:\\n\"+createCollectionUrl+\"\\n\");\n\n      Map<String,Object> json = null;\n      try {\n        json = getJson(createCollectionUrl);\n      } catch (SolrServerException sse) {\n        throw new Exception(\"Failed to create collection '\"+collectionName+\"' due to: \"+sse.getMessage());\n      }\n\n      CharArr arr = new CharArr();\n      new JSONWriter(arr, 2).write(json);\n      echo(arr.toString());\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c0ee0c7f6bcf49646748d46aee9383b68eb55c80","date":1502884592,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.CreateCollectionTool#runCloudTool(CloudSolrClient,CommandLine).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.CreateCollectionTool#runCloudTool(CloudSolrClient,CommandLine).mjava","sourceNew":"    protected void runCloudTool(CloudSolrClient cloudSolrClient, CommandLine cli) throws Exception {\n\n      Set<String> liveNodes = cloudSolrClient.getZkStateReader().getClusterState().getLiveNodes();\n      if (liveNodes.isEmpty())\n        throw new IllegalStateException(\"No live nodes found! Cannot create a collection until \" +\n            \"there is at least 1 live node in the cluster.\");\n      \n      String baseUrl = cli.getOptionValue(\"solrUrl\");\n      if (baseUrl == null) {\n        String firstLiveNode = liveNodes.iterator().next();\n        baseUrl = cloudSolrClient.getZkStateReader().getBaseUrlForNodeName(firstLiveNode);\n      }\n\n      String collectionName = cli.getOptionValue(NAME);\n\n      // build a URL to create the collection\n      int numShards = optionAsInt(cli, \"shards\", 1);\n      int replicationFactor = optionAsInt(cli, \"replicationFactor\", 1);\n      int maxShardsPerNode = -1;\n\n      if (cli.hasOption(\"maxShardsPerNode\")) {\n        maxShardsPerNode = Integer.parseInt(cli.getOptionValue(\"maxShardsPerNode\"));\n      }\n\n      String confname = cli.getOptionValue(\"confname\");\n      String confdir = cli.getOptionValue(\"confdir\");\n      String configsetsDir = cli.getOptionValue(\"configsetsDir\");\n\n      boolean configExistsInZk = confname != null && !\"\".equals(confname.trim()) &&\n          cloudSolrClient.getZkStateReader().getZkClient().exists(\"/configs/\" + confname, true);\n\n      if (\".system\".equals(collectionName)) {\n        //do nothing\n      } else if (configExistsInZk) {\n        echo(\"Re-using existing configuration directory \"+confname);\n      } else if (confdir != null && !\"\".equals(confdir.trim())){\n        if (confname == null || \"\".equals(confname.trim())) {\n          confname = collectionName;\n        }\n        Path confPath = ZkConfigManager.getConfigsetPath(confdir,\n            configsetsDir);\n\n        echo(\"Uploading \" + confPath.toAbsolutePath().toString() +\n            \" for config \" + confname + \" to ZooKeeper at \" + cloudSolrClient.getZkHost());\n        ((ZkClientClusterStateProvider) cloudSolrClient.getClusterStateProvider()).uploadConfig(confPath, confname);\n      }\n\n      // since creating a collection is a heavy-weight operation, check for existence first\n      String collectionListUrl = baseUrl+\"/admin/collections?action=list\";\n      if (safeCheckCollectionExists(collectionListUrl, collectionName)) {\n        throw new IllegalStateException(\"\\nCollection '\"+collectionName+\n            \"' already exists!\\nChecked collection existence using Collections API command:\\n\"+\n            collectionListUrl);\n      }\n\n      // doesn't seem to exist ... try to create\n      String createCollectionUrl =\n          String.format(Locale.ROOT,\n              \"%s/admin/collections?action=CREATE&name=%s&numShards=%d&replicationFactor=%d&maxShardsPerNode=%d\",\n              baseUrl,\n              collectionName,\n              numShards,\n              replicationFactor,\n              maxShardsPerNode);\n      if (confname != null && !\"\".equals(confname.trim())) {\n        createCollectionUrl = createCollectionUrl + String.format(Locale.ROOT, \"&collection.configName=%s\", confname);\n      }\n\n      echo(\"\\nCreating new collection '\"+collectionName+\"' using command:\\n\"+createCollectionUrl+\"\\n\");\n\n      Map<String,Object> json = null;\n      try {\n        json = getJson(createCollectionUrl);\n      } catch (SolrServerException sse) {\n        throw new Exception(\"Failed to create collection '\"+collectionName+\"' due to: \"+sse.getMessage());\n      }\n\n      CharArr arr = new CharArr();\n      new JSONWriter(arr, 2).write(json);\n      echo(arr.toString());\n    }\n\n","sourceOld":"    protected void runCloudTool(CloudSolrClient cloudSolrClient, CommandLine cli) throws Exception {\n\n      Set<String> liveNodes = cloudSolrClient.getZkStateReader().getClusterState().getLiveNodes();\n      if (liveNodes.isEmpty())\n        throw new IllegalStateException(\"No live nodes found! Cannot create a collection until \" +\n            \"there is at least 1 live node in the cluster.\");\n      \n      String baseUrl = cli.getOptionValue(\"solrUrl\");\n      if (baseUrl == null) {\n        String firstLiveNode = liveNodes.iterator().next();\n        baseUrl = cloudSolrClient.getZkStateReader().getBaseUrlForNodeName(firstLiveNode);\n      }\n\n      String collectionName = cli.getOptionValue(NAME);\n\n      // build a URL to create the collection\n      int numShards = optionAsInt(cli, \"shards\", 1);\n      int replicationFactor = optionAsInt(cli, \"replicationFactor\", 1);\n      int maxShardsPerNode = -1;\n\n      if (cli.hasOption(\"maxShardsPerNode\")) {\n        maxShardsPerNode = Integer.parseInt(cli.getOptionValue(\"maxShardsPerNode\"));\n      } else {\n        // need number of live nodes to determine maxShardsPerNode if it is not set\n        int numNodes = liveNodes.size();\n        maxShardsPerNode = ((numShards*replicationFactor)+numNodes-1)/numNodes;\n      }\n\n      String confname = cli.getOptionValue(\"confname\");\n      String confdir = cli.getOptionValue(\"confdir\");\n      String configsetsDir = cli.getOptionValue(\"configsetsDir\");\n\n      boolean configExistsInZk = confname != null && !\"\".equals(confname.trim()) &&\n          cloudSolrClient.getZkStateReader().getZkClient().exists(\"/configs/\" + confname, true);\n\n      if (\".system\".equals(collectionName)) {\n        //do nothing\n      } else if (configExistsInZk) {\n        echo(\"Re-using existing configuration directory \"+confname);\n      } else if (confdir != null && !\"\".equals(confdir.trim())){\n        if (confname == null || \"\".equals(confname.trim())) {\n          confname = collectionName;\n        }\n        Path confPath = ZkConfigManager.getConfigsetPath(confdir,\n            configsetsDir);\n\n        echo(\"Uploading \" + confPath.toAbsolutePath().toString() +\n            \" for config \" + confname + \" to ZooKeeper at \" + cloudSolrClient.getZkHost());\n        ((ZkClientClusterStateProvider) cloudSolrClient.getClusterStateProvider()).uploadConfig(confPath, confname);\n      }\n\n      // since creating a collection is a heavy-weight operation, check for existence first\n      String collectionListUrl = baseUrl+\"/admin/collections?action=list\";\n      if (safeCheckCollectionExists(collectionListUrl, collectionName)) {\n        throw new IllegalStateException(\"\\nCollection '\"+collectionName+\n            \"' already exists!\\nChecked collection existence using Collections API command:\\n\"+\n            collectionListUrl);\n      }\n\n      // doesn't seem to exist ... try to create\n      String createCollectionUrl =\n          String.format(Locale.ROOT,\n              \"%s/admin/collections?action=CREATE&name=%s&numShards=%d&replicationFactor=%d&maxShardsPerNode=%d\",\n              baseUrl,\n              collectionName,\n              numShards,\n              replicationFactor,\n              maxShardsPerNode);\n      if (confname != null && !\"\".equals(confname.trim())) {\n        createCollectionUrl = createCollectionUrl + String.format(Locale.ROOT, \"&collection.configName=%s\", confname);\n      }\n\n      echo(\"\\nCreating new collection '\"+collectionName+\"' using command:\\n\"+createCollectionUrl+\"\\n\");\n\n      Map<String,Object> json = null;\n      try {\n        json = getJson(createCollectionUrl);\n      } catch (SolrServerException sse) {\n        throw new Exception(\"Failed to create collection '\"+collectionName+\"' due to: \"+sse.getMessage());\n      }\n\n      CharArr arr = new CharArr();\n      new JSONWriter(arr, 2).write(json);\n      echo(arr.toString());\n    }\n\n","bugFix":["bafca15d8e408346a67f4282ad1143b88023893b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c00aac053fdd75193eb8b6d45b64c26c3b586d5b","date":1503143818,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.CreateCollectionTool#runCloudTool(CloudSolrClient,CommandLine).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.CreateCollectionTool#runCloudTool(CloudSolrClient,CommandLine).mjava","sourceNew":"    protected void runCloudTool(CloudSolrClient cloudSolrClient, CommandLine cli) throws Exception {\n\n      Set<String> liveNodes = cloudSolrClient.getZkStateReader().getClusterState().getLiveNodes();\n      if (liveNodes.isEmpty())\n        throw new IllegalStateException(\"No live nodes found! Cannot create a collection until \" +\n            \"there is at least 1 live node in the cluster.\");\n      \n      String baseUrl = cli.getOptionValue(\"solrUrl\");\n      if (baseUrl == null) {\n        String firstLiveNode = liveNodes.iterator().next();\n        baseUrl = cloudSolrClient.getZkStateReader().getBaseUrlForNodeName(firstLiveNode);\n      }\n\n      String collectionName = cli.getOptionValue(NAME);\n\n      // build a URL to create the collection\n      int numShards = optionAsInt(cli, \"shards\", 1);\n      int replicationFactor = optionAsInt(cli, \"replicationFactor\", 1);\n      int maxShardsPerNode = -1;\n\n      if (cli.hasOption(\"maxShardsPerNode\")) {\n        maxShardsPerNode = Integer.parseInt(cli.getOptionValue(\"maxShardsPerNode\"));\n      }\n\n      String confname = cli.getOptionValue(\"confname\");\n      String confdir = cli.getOptionValue(\"confdir\");\n      String configsetsDir = cli.getOptionValue(\"configsetsDir\");\n\n      boolean configExistsInZk = confname != null && !\"\".equals(confname.trim()) &&\n          cloudSolrClient.getZkStateReader().getZkClient().exists(\"/configs/\" + confname, true);\n\n      if (CollectionAdminParams.SYSTEM_COLL.equals(collectionName)) {\n        //do nothing\n      } else if (configExistsInZk) {\n        echo(\"Re-using existing configuration directory \"+confname);\n      } else if (confdir != null && !\"\".equals(confdir.trim())){\n        if (confname == null || \"\".equals(confname.trim())) {\n          confname = collectionName;\n        }\n        Path confPath = ZkConfigManager.getConfigsetPath(confdir,\n            configsetsDir);\n\n        echo(\"Uploading \" + confPath.toAbsolutePath().toString() +\n            \" for config \" + confname + \" to ZooKeeper at \" + cloudSolrClient.getZkHost());\n        ((ZkClientClusterStateProvider) cloudSolrClient.getClusterStateProvider()).uploadConfig(confPath, confname);\n      }\n\n      // since creating a collection is a heavy-weight operation, check for existence first\n      String collectionListUrl = baseUrl+\"/admin/collections?action=list\";\n      if (safeCheckCollectionExists(collectionListUrl, collectionName)) {\n        throw new IllegalStateException(\"\\nCollection '\"+collectionName+\n            \"' already exists!\\nChecked collection existence using Collections API command:\\n\"+\n            collectionListUrl);\n      }\n\n      // doesn't seem to exist ... try to create\n      String createCollectionUrl =\n          String.format(Locale.ROOT,\n              \"%s/admin/collections?action=CREATE&name=%s&numShards=%d&replicationFactor=%d&maxShardsPerNode=%d\",\n              baseUrl,\n              collectionName,\n              numShards,\n              replicationFactor,\n              maxShardsPerNode);\n      if (confname != null && !\"\".equals(confname.trim())) {\n        createCollectionUrl = createCollectionUrl + String.format(Locale.ROOT, \"&collection.configName=%s\", confname);\n      }\n\n      echo(\"\\nCreating new collection '\"+collectionName+\"' using command:\\n\"+createCollectionUrl+\"\\n\");\n\n      Map<String,Object> json = null;\n      try {\n        json = getJson(createCollectionUrl);\n      } catch (SolrServerException sse) {\n        throw new Exception(\"Failed to create collection '\"+collectionName+\"' due to: \"+sse.getMessage());\n      }\n\n      CharArr arr = new CharArr();\n      new JSONWriter(arr, 2).write(json);\n      echo(arr.toString());\n    }\n\n","sourceOld":"    protected void runCloudTool(CloudSolrClient cloudSolrClient, CommandLine cli) throws Exception {\n\n      Set<String> liveNodes = cloudSolrClient.getZkStateReader().getClusterState().getLiveNodes();\n      if (liveNodes.isEmpty())\n        throw new IllegalStateException(\"No live nodes found! Cannot create a collection until \" +\n            \"there is at least 1 live node in the cluster.\");\n      \n      String baseUrl = cli.getOptionValue(\"solrUrl\");\n      if (baseUrl == null) {\n        String firstLiveNode = liveNodes.iterator().next();\n        baseUrl = cloudSolrClient.getZkStateReader().getBaseUrlForNodeName(firstLiveNode);\n      }\n\n      String collectionName = cli.getOptionValue(NAME);\n\n      // build a URL to create the collection\n      int numShards = optionAsInt(cli, \"shards\", 1);\n      int replicationFactor = optionAsInt(cli, \"replicationFactor\", 1);\n      int maxShardsPerNode = -1;\n\n      if (cli.hasOption(\"maxShardsPerNode\")) {\n        maxShardsPerNode = Integer.parseInt(cli.getOptionValue(\"maxShardsPerNode\"));\n      } else {\n        // need number of live nodes to determine maxShardsPerNode if it is not set\n        int numNodes = liveNodes.size();\n        maxShardsPerNode = ((numShards*replicationFactor)+numNodes-1)/numNodes;\n      }\n\n      String confname = cli.getOptionValue(\"confname\");\n      String confdir = cli.getOptionValue(\"confdir\");\n      String configsetsDir = cli.getOptionValue(\"configsetsDir\");\n\n      boolean configExistsInZk = confname != null && !\"\".equals(confname.trim()) &&\n          cloudSolrClient.getZkStateReader().getZkClient().exists(\"/configs/\" + confname, true);\n\n      if (CollectionAdminParams.SYSTEM_COLL.equals(collectionName)) {\n        //do nothing\n      } else if (configExistsInZk) {\n        echo(\"Re-using existing configuration directory \"+confname);\n      } else if (confdir != null && !\"\".equals(confdir.trim())){\n        if (confname == null || \"\".equals(confname.trim())) {\n          confname = collectionName;\n        }\n        Path confPath = ZkConfigManager.getConfigsetPath(confdir,\n            configsetsDir);\n\n        echo(\"Uploading \" + confPath.toAbsolutePath().toString() +\n            \" for config \" + confname + \" to ZooKeeper at \" + cloudSolrClient.getZkHost());\n        ((ZkClientClusterStateProvider) cloudSolrClient.getClusterStateProvider()).uploadConfig(confPath, confname);\n      }\n\n      // since creating a collection is a heavy-weight operation, check for existence first\n      String collectionListUrl = baseUrl+\"/admin/collections?action=list\";\n      if (safeCheckCollectionExists(collectionListUrl, collectionName)) {\n        throw new IllegalStateException(\"\\nCollection '\"+collectionName+\n            \"' already exists!\\nChecked collection existence using Collections API command:\\n\"+\n            collectionListUrl);\n      }\n\n      // doesn't seem to exist ... try to create\n      String createCollectionUrl =\n          String.format(Locale.ROOT,\n              \"%s/admin/collections?action=CREATE&name=%s&numShards=%d&replicationFactor=%d&maxShardsPerNode=%d\",\n              baseUrl,\n              collectionName,\n              numShards,\n              replicationFactor,\n              maxShardsPerNode);\n      if (confname != null && !\"\".equals(confname.trim())) {\n        createCollectionUrl = createCollectionUrl + String.format(Locale.ROOT, \"&collection.configName=%s\", confname);\n      }\n\n      echo(\"\\nCreating new collection '\"+collectionName+\"' using command:\\n\"+createCollectionUrl+\"\\n\");\n\n      Map<String,Object> json = null;\n      try {\n        json = getJson(createCollectionUrl);\n      } catch (SolrServerException sse) {\n        throw new Exception(\"Failed to create collection '\"+collectionName+\"' due to: \"+sse.getMessage());\n      }\n\n      CharArr arr = new CharArr();\n      new JSONWriter(arr, 2).write(json);\n      echo(arr.toString());\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a7809d1d753b67f48b1a706e17034bf8b624ea3","date":1504366927,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.CreateCollectionTool#runCloudTool(CloudSolrClient,CommandLine).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.CreateCollectionTool#runCloudTool(CloudSolrClient,CommandLine).mjava","sourceNew":"    protected void runCloudTool(CloudSolrClient cloudSolrClient, CommandLine cli) throws Exception {\n\n      Set<String> liveNodes = cloudSolrClient.getZkStateReader().getClusterState().getLiveNodes();\n      if (liveNodes.isEmpty())\n        throw new IllegalStateException(\"No live nodes found! Cannot create a collection until \" +\n            \"there is at least 1 live node in the cluster.\");\n      \n      String baseUrl = cli.getOptionValue(\"solrUrl\");\n      if (baseUrl == null) {\n        String firstLiveNode = liveNodes.iterator().next();\n        baseUrl = cloudSolrClient.getZkStateReader().getBaseUrlForNodeName(firstLiveNode);\n      }\n\n      String collectionName = cli.getOptionValue(NAME);\n\n      // build a URL to create the collection\n      int numShards = optionAsInt(cli, \"shards\", 1);\n      int replicationFactor = optionAsInt(cli, \"replicationFactor\", 1);\n      int maxShardsPerNode = -1;\n\n      if (cli.hasOption(\"maxShardsPerNode\")) {\n        maxShardsPerNode = Integer.parseInt(cli.getOptionValue(\"maxShardsPerNode\"));\n      }\n\n      String confname = cli.getOptionValue(\"confname\");\n      String confdir = cli.getOptionValue(\"confdir\");\n      String configsetsDir = cli.getOptionValue(\"configsetsDir\");\n\n      boolean configExistsInZk = confname != null && !\"\".equals(confname.trim()) &&\n          cloudSolrClient.getZkStateReader().getZkClient().exists(\"/configs/\" + confname, true);\n\n      if (CollectionAdminParams.SYSTEM_COLL.equals(collectionName)) {\n        //do nothing\n      } else if (configExistsInZk) {\n        echo(\"Re-using existing configuration directory \"+confname);\n      } else if (confdir != null && !\"\".equals(confdir.trim())){\n        if (confname == null || \"\".equals(confname.trim())) {\n          confname = collectionName;\n        }\n        Path confPath = ZkConfigManager.getConfigsetPath(confdir,\n            configsetsDir);\n\n        echoIfVerbose(\"Uploading \" + confPath.toAbsolutePath().toString() +\n            \" for config \" + confname + \" to ZooKeeper at \" + cloudSolrClient.getZkHost(), cli);\n        ((ZkClientClusterStateProvider) cloudSolrClient.getClusterStateProvider()).uploadConfig(confPath, confname);\n      }\n\n      // since creating a collection is a heavy-weight operation, check for existence first\n      String collectionListUrl = baseUrl+\"/admin/collections?action=list\";\n      if (safeCheckCollectionExists(collectionListUrl, collectionName)) {\n        throw new IllegalStateException(\"\\nCollection '\"+collectionName+\n            \"' already exists!\\nChecked collection existence using Collections API command:\\n\"+\n            collectionListUrl);\n      }\n\n      // doesn't seem to exist ... try to create\n      String createCollectionUrl =\n          String.format(Locale.ROOT,\n              \"%s/admin/collections?action=CREATE&name=%s&numShards=%d&replicationFactor=%d&maxShardsPerNode=%d\",\n              baseUrl,\n              collectionName,\n              numShards,\n              replicationFactor,\n              maxShardsPerNode);\n      if (confname != null && !\"\".equals(confname.trim())) {\n        createCollectionUrl = createCollectionUrl + String.format(Locale.ROOT, \"&collection.configName=%s\", confname);\n      }\n\n      echoIfVerbose(\"\\nCreating new collection '\"+collectionName+\"' using command:\\n\"+createCollectionUrl+\"\\n\", cli);\n\n      Map<String,Object> json = null;\n      try {\n        json = getJson(createCollectionUrl);\n      } catch (SolrServerException sse) {\n        throw new Exception(\"Failed to create collection '\"+collectionName+\"' due to: \"+sse.getMessage());\n      }\n\n      if (cli.hasOption(\"verbose\")) {\n        CharArr arr = new CharArr();\n        new JSONWriter(arr, 2).write(json);\n        echo(arr.toString());\n      } else {\n        String endMessage = String.format(Locale.ROOT, \"Created collection '%s' with %d shard(s), %d replica(s)\",\n            collectionName, numShards, replicationFactor);\n        if (confname != null && !\"\".equals(confname.trim())) {\n          endMessage += String.format(Locale.ROOT, \" with config-set '%s'\", confname);\n        }\n      \n        echo(endMessage);\n      }\n    }\n\n","sourceOld":"    protected void runCloudTool(CloudSolrClient cloudSolrClient, CommandLine cli) throws Exception {\n\n      Set<String> liveNodes = cloudSolrClient.getZkStateReader().getClusterState().getLiveNodes();\n      if (liveNodes.isEmpty())\n        throw new IllegalStateException(\"No live nodes found! Cannot create a collection until \" +\n            \"there is at least 1 live node in the cluster.\");\n      \n      String baseUrl = cli.getOptionValue(\"solrUrl\");\n      if (baseUrl == null) {\n        String firstLiveNode = liveNodes.iterator().next();\n        baseUrl = cloudSolrClient.getZkStateReader().getBaseUrlForNodeName(firstLiveNode);\n      }\n\n      String collectionName = cli.getOptionValue(NAME);\n\n      // build a URL to create the collection\n      int numShards = optionAsInt(cli, \"shards\", 1);\n      int replicationFactor = optionAsInt(cli, \"replicationFactor\", 1);\n      int maxShardsPerNode = -1;\n\n      if (cli.hasOption(\"maxShardsPerNode\")) {\n        maxShardsPerNode = Integer.parseInt(cli.getOptionValue(\"maxShardsPerNode\"));\n      }\n\n      String confname = cli.getOptionValue(\"confname\");\n      String confdir = cli.getOptionValue(\"confdir\");\n      String configsetsDir = cli.getOptionValue(\"configsetsDir\");\n\n      boolean configExistsInZk = confname != null && !\"\".equals(confname.trim()) &&\n          cloudSolrClient.getZkStateReader().getZkClient().exists(\"/configs/\" + confname, true);\n\n      if (CollectionAdminParams.SYSTEM_COLL.equals(collectionName)) {\n        //do nothing\n      } else if (configExistsInZk) {\n        echo(\"Re-using existing configuration directory \"+confname);\n      } else if (confdir != null && !\"\".equals(confdir.trim())){\n        if (confname == null || \"\".equals(confname.trim())) {\n          confname = collectionName;\n        }\n        Path confPath = ZkConfigManager.getConfigsetPath(confdir,\n            configsetsDir);\n\n        echo(\"Uploading \" + confPath.toAbsolutePath().toString() +\n            \" for config \" + confname + \" to ZooKeeper at \" + cloudSolrClient.getZkHost());\n        ((ZkClientClusterStateProvider) cloudSolrClient.getClusterStateProvider()).uploadConfig(confPath, confname);\n      }\n\n      // since creating a collection is a heavy-weight operation, check for existence first\n      String collectionListUrl = baseUrl+\"/admin/collections?action=list\";\n      if (safeCheckCollectionExists(collectionListUrl, collectionName)) {\n        throw new IllegalStateException(\"\\nCollection '\"+collectionName+\n            \"' already exists!\\nChecked collection existence using Collections API command:\\n\"+\n            collectionListUrl);\n      }\n\n      // doesn't seem to exist ... try to create\n      String createCollectionUrl =\n          String.format(Locale.ROOT,\n              \"%s/admin/collections?action=CREATE&name=%s&numShards=%d&replicationFactor=%d&maxShardsPerNode=%d\",\n              baseUrl,\n              collectionName,\n              numShards,\n              replicationFactor,\n              maxShardsPerNode);\n      if (confname != null && !\"\".equals(confname.trim())) {\n        createCollectionUrl = createCollectionUrl + String.format(Locale.ROOT, \"&collection.configName=%s\", confname);\n      }\n\n      echo(\"\\nCreating new collection '\"+collectionName+\"' using command:\\n\"+createCollectionUrl+\"\\n\");\n\n      Map<String,Object> json = null;\n      try {\n        json = getJson(createCollectionUrl);\n      } catch (SolrServerException sse) {\n        throw new Exception(\"Failed to create collection '\"+collectionName+\"' due to: \"+sse.getMessage());\n      }\n\n      CharArr arr = new CharArr();\n      new JSONWriter(arr, 2).write(json);\n      echo(arr.toString());\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c304e97e7c1d472bc70e801b35ee78583916c6cd","date":1507105431,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.CreateCollectionTool#runCloudTool(CloudSolrClient,CommandLine).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.CreateCollectionTool#runCloudTool(CloudSolrClient,CommandLine).mjava","sourceNew":"    protected void runCloudTool(CloudSolrClient cloudSolrClient, CommandLine cli) throws Exception {\n\n      Set<String> liveNodes = cloudSolrClient.getZkStateReader().getClusterState().getLiveNodes();\n      if (liveNodes.isEmpty())\n        throw new IllegalStateException(\"No live nodes found! Cannot create a collection until \" +\n            \"there is at least 1 live node in the cluster.\");\n      \n      String baseUrl = cli.getOptionValue(\"solrUrl\");\n      if (baseUrl == null) {\n        String firstLiveNode = liveNodes.iterator().next();\n        baseUrl = cloudSolrClient.getZkStateReader().getBaseUrlForNodeName(firstLiveNode);\n      }\n\n      String collectionName = cli.getOptionValue(NAME);\n\n      // build a URL to create the collection\n      int numShards = optionAsInt(cli, \"shards\", 1);\n      int replicationFactor = optionAsInt(cli, \"replicationFactor\", 1);\n      int maxShardsPerNode = -1;\n\n      if (cli.hasOption(\"maxShardsPerNode\")) {\n        maxShardsPerNode = Integer.parseInt(cli.getOptionValue(\"maxShardsPerNode\"));\n      }\n\n      String confname = cli.getOptionValue(\"confname\");\n      String confdir = cli.getOptionValue(\"confdir\");\n      String configsetsDir = cli.getOptionValue(\"configsetsDir\");\n\n      boolean configExistsInZk = confname != null && !\"\".equals(confname.trim()) &&\n          cloudSolrClient.getZkStateReader().getZkClient().exists(\"/configs/\" + confname, true);\n\n      if (CollectionAdminParams.SYSTEM_COLL.equals(collectionName)) {\n        //do nothing\n      } else if (configExistsInZk) {\n        echo(\"Re-using existing configuration directory \"+confname);\n      } else if (confdir != null && !\"\".equals(confdir.trim())){\n        if (confname == null || \"\".equals(confname.trim())) {\n          confname = collectionName;\n        }\n        Path confPath = ZkConfigManager.getConfigsetPath(confdir,\n            configsetsDir);\n\n        echoIfVerbose(\"Uploading \" + confPath.toAbsolutePath().toString() +\n            \" for config \" + confname + \" to ZooKeeper at \" + cloudSolrClient.getZkHost(), cli);\n        ((ZkClientClusterStateProvider) cloudSolrClient.getClusterStateProvider()).uploadConfig(confPath, confname);\n      }\n\n      // since creating a collection is a heavy-weight operation, check for existence first\n      String collectionListUrl = baseUrl+\"/admin/collections?action=list\";\n      if (safeCheckCollectionExists(collectionListUrl, collectionName)) {\n        throw new IllegalStateException(\"\\nCollection '\"+collectionName+\n            \"' already exists!\\nChecked collection existence using Collections API command:\\n\"+\n            collectionListUrl);\n      }\n\n      // doesn't seem to exist ... try to create\n      String createCollectionUrl =\n          String.format(Locale.ROOT,\n              \"%s/admin/collections?action=CREATE&name=%s&numShards=%d&replicationFactor=%d&maxShardsPerNode=%d\",\n              baseUrl,\n              collectionName,\n              numShards,\n              replicationFactor,\n              maxShardsPerNode);\n      if (confname != null && !\"\".equals(confname.trim())) {\n        createCollectionUrl = createCollectionUrl + String.format(Locale.ROOT, \"&collection.configName=%s\", confname);\n      }\n\n      echoIfVerbose(\"\\nCreating new collection '\"+collectionName+\"' using command:\\n\"+createCollectionUrl+\"\\n\", cli);\n\n      Map<String,Object> json = null;\n      try {\n        json = getJson(createCollectionUrl);\n      } catch (SolrServerException sse) {\n        throw new Exception(\"Failed to create collection '\"+collectionName+\"' due to: \"+sse.getMessage());\n      }\n\n      if (cli.hasOption(\"verbose\")) {\n        CharArr arr = new CharArr();\n        new JSONWriter(arr, 2).write(json);\n        echo(arr.toString());\n      } else {\n        String endMessage = String.format(Locale.ROOT, \"Created collection '%s' with %d shard(s), %d replica(s)\",\n            collectionName, numShards, replicationFactor);\n        if (confname != null && !\"\".equals(confname.trim())) {\n          endMessage += String.format(Locale.ROOT, \" with config-set '%s'\", confname);\n        }\n      \n        echo(endMessage);\n      }\n    }\n\n","sourceOld":"    protected void runCloudTool(CloudSolrClient cloudSolrClient, CommandLine cli) throws Exception {\n\n      Set<String> liveNodes = cloudSolrClient.getZkStateReader().getClusterState().getLiveNodes();\n      if (liveNodes.isEmpty())\n        throw new IllegalStateException(\"No live nodes found! Cannot create a collection until \" +\n            \"there is at least 1 live node in the cluster.\");\n      \n      String baseUrl = cli.getOptionValue(\"solrUrl\");\n      if (baseUrl == null) {\n        String firstLiveNode = liveNodes.iterator().next();\n        baseUrl = cloudSolrClient.getZkStateReader().getBaseUrlForNodeName(firstLiveNode);\n      }\n\n      String collectionName = cli.getOptionValue(NAME);\n\n      // build a URL to create the collection\n      int numShards = optionAsInt(cli, \"shards\", 1);\n      int replicationFactor = optionAsInt(cli, \"replicationFactor\", 1);\n      int maxShardsPerNode = -1;\n\n      if (cli.hasOption(\"maxShardsPerNode\")) {\n        maxShardsPerNode = Integer.parseInt(cli.getOptionValue(\"maxShardsPerNode\"));\n      }\n\n      String confname = cli.getOptionValue(\"confname\");\n      String confdir = cli.getOptionValue(\"confdir\");\n      String configsetsDir = cli.getOptionValue(\"configsetsDir\");\n\n      boolean configExistsInZk = confname != null && !\"\".equals(confname.trim()) &&\n          cloudSolrClient.getZkStateReader().getZkClient().exists(\"/configs/\" + confname, true);\n\n      if (\".system\".equals(collectionName)) {\n        //do nothing\n      } else if (configExistsInZk) {\n        echo(\"Re-using existing configuration directory \"+confname);\n      } else if (confdir != null && !\"\".equals(confdir.trim())){\n        if (confname == null || \"\".equals(confname.trim())) {\n          confname = collectionName;\n        }\n        Path confPath = ZkConfigManager.getConfigsetPath(confdir,\n            configsetsDir);\n\n        echoIfVerbose(\"Uploading \" + confPath.toAbsolutePath().toString() +\n            \" for config \" + confname + \" to ZooKeeper at \" + cloudSolrClient.getZkHost(), cli);\n        ((ZkClientClusterStateProvider) cloudSolrClient.getClusterStateProvider()).uploadConfig(confPath, confname);\n      }\n\n      // since creating a collection is a heavy-weight operation, check for existence first\n      String collectionListUrl = baseUrl+\"/admin/collections?action=list\";\n      if (safeCheckCollectionExists(collectionListUrl, collectionName)) {\n        throw new IllegalStateException(\"\\nCollection '\"+collectionName+\n            \"' already exists!\\nChecked collection existence using Collections API command:\\n\"+\n            collectionListUrl);\n      }\n\n      // doesn't seem to exist ... try to create\n      String createCollectionUrl =\n          String.format(Locale.ROOT,\n              \"%s/admin/collections?action=CREATE&name=%s&numShards=%d&replicationFactor=%d&maxShardsPerNode=%d\",\n              baseUrl,\n              collectionName,\n              numShards,\n              replicationFactor,\n              maxShardsPerNode);\n      if (confname != null && !\"\".equals(confname.trim())) {\n        createCollectionUrl = createCollectionUrl + String.format(Locale.ROOT, \"&collection.configName=%s\", confname);\n      }\n\n      echoIfVerbose(\"\\nCreating new collection '\"+collectionName+\"' using command:\\n\"+createCollectionUrl+\"\\n\", cli);\n\n      Map<String,Object> json = null;\n      try {\n        json = getJson(createCollectionUrl);\n      } catch (SolrServerException sse) {\n        throw new Exception(\"Failed to create collection '\"+collectionName+\"' due to: \"+sse.getMessage());\n      }\n\n      if (cli.hasOption(\"verbose\")) {\n        CharArr arr = new CharArr();\n        new JSONWriter(arr, 2).write(json);\n        echo(arr.toString());\n      } else {\n        String endMessage = String.format(Locale.ROOT, \"Created collection '%s' with %d shard(s), %d replica(s)\",\n            collectionName, numShards, replicationFactor);\n        if (confname != null && !\"\".equals(confname.trim())) {\n          endMessage += String.format(Locale.ROOT, \" with config-set '%s'\", confname);\n        }\n      \n        echo(endMessage);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"560c18d71dad43d675158783c3840f8c80d6d39c","date":1507105532,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.CreateCollectionTool#runCloudTool(CloudSolrClient,CommandLine).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.CreateCollectionTool#runCloudTool(CloudSolrClient,CommandLine).mjava","sourceNew":"    protected void runCloudTool(CloudSolrClient cloudSolrClient, CommandLine cli) throws Exception {\n\n      Set<String> liveNodes = cloudSolrClient.getZkStateReader().getClusterState().getLiveNodes();\n      if (liveNodes.isEmpty())\n        throw new IllegalStateException(\"No live nodes found! Cannot create a collection until \" +\n            \"there is at least 1 live node in the cluster.\");\n      \n      String baseUrl = cli.getOptionValue(\"solrUrl\");\n      if (baseUrl == null) {\n        String firstLiveNode = liveNodes.iterator().next();\n        baseUrl = cloudSolrClient.getZkStateReader().getBaseUrlForNodeName(firstLiveNode);\n      }\n\n      String collectionName = cli.getOptionValue(NAME);\n\n      // build a URL to create the collection\n      int numShards = optionAsInt(cli, \"shards\", 1);\n      int replicationFactor = optionAsInt(cli, \"replicationFactor\", 1);\n      int maxShardsPerNode = -1;\n\n      if (cli.hasOption(\"maxShardsPerNode\")) {\n        maxShardsPerNode = Integer.parseInt(cli.getOptionValue(\"maxShardsPerNode\"));\n      }\n\n      String confname = cli.getOptionValue(\"confname\");\n      String confdir = cli.getOptionValue(\"confdir\");\n      String configsetsDir = cli.getOptionValue(\"configsetsDir\");\n\n      boolean configExistsInZk = confname != null && !\"\".equals(confname.trim()) &&\n          cloudSolrClient.getZkStateReader().getZkClient().exists(\"/configs/\" + confname, true);\n\n      if (CollectionAdminParams.SYSTEM_COLL.equals(collectionName)) {\n        //do nothing\n      } else if (configExistsInZk) {\n        echo(\"Re-using existing configuration directory \"+confname);\n      } else if (confdir != null && !\"\".equals(confdir.trim())){\n        if (confname == null || \"\".equals(confname.trim())) {\n          confname = collectionName;\n        }\n        Path confPath = ZkConfigManager.getConfigsetPath(confdir,\n            configsetsDir);\n\n        echoIfVerbose(\"Uploading \" + confPath.toAbsolutePath().toString() +\n            \" for config \" + confname + \" to ZooKeeper at \" + cloudSolrClient.getZkHost(), cli);\n        ((ZkClientClusterStateProvider) cloudSolrClient.getClusterStateProvider()).uploadConfig(confPath, confname);\n      }\n\n      // since creating a collection is a heavy-weight operation, check for existence first\n      String collectionListUrl = baseUrl+\"/admin/collections?action=list\";\n      if (safeCheckCollectionExists(collectionListUrl, collectionName)) {\n        throw new IllegalStateException(\"\\nCollection '\"+collectionName+\n            \"' already exists!\\nChecked collection existence using Collections API command:\\n\"+\n            collectionListUrl);\n      }\n\n      // doesn't seem to exist ... try to create\n      String createCollectionUrl =\n          String.format(Locale.ROOT,\n              \"%s/admin/collections?action=CREATE&name=%s&numShards=%d&replicationFactor=%d&maxShardsPerNode=%d\",\n              baseUrl,\n              collectionName,\n              numShards,\n              replicationFactor,\n              maxShardsPerNode);\n      if (confname != null && !\"\".equals(confname.trim())) {\n        createCollectionUrl = createCollectionUrl + String.format(Locale.ROOT, \"&collection.configName=%s\", confname);\n      }\n\n      echoIfVerbose(\"\\nCreating new collection '\"+collectionName+\"' using command:\\n\"+createCollectionUrl+\"\\n\", cli);\n\n      Map<String,Object> json = null;\n      try {\n        json = getJson(createCollectionUrl);\n      } catch (SolrServerException sse) {\n        throw new Exception(\"Failed to create collection '\"+collectionName+\"' due to: \"+sse.getMessage());\n      }\n\n      if (cli.hasOption(\"verbose\")) {\n        CharArr arr = new CharArr();\n        new JSONWriter(arr, 2).write(json);\n        echo(arr.toString());\n      } else {\n        String endMessage = String.format(Locale.ROOT, \"Created collection '%s' with %d shard(s), %d replica(s)\",\n            collectionName, numShards, replicationFactor);\n        if (confname != null && !\"\".equals(confname.trim())) {\n          endMessage += String.format(Locale.ROOT, \" with config-set '%s'\", confname);\n        }\n      \n        echo(endMessage);\n      }\n    }\n\n","sourceOld":"    protected void runCloudTool(CloudSolrClient cloudSolrClient, CommandLine cli) throws Exception {\n\n      Set<String> liveNodes = cloudSolrClient.getZkStateReader().getClusterState().getLiveNodes();\n      if (liveNodes.isEmpty())\n        throw new IllegalStateException(\"No live nodes found! Cannot create a collection until \" +\n            \"there is at least 1 live node in the cluster.\");\n      \n      String baseUrl = cli.getOptionValue(\"solrUrl\");\n      if (baseUrl == null) {\n        String firstLiveNode = liveNodes.iterator().next();\n        baseUrl = cloudSolrClient.getZkStateReader().getBaseUrlForNodeName(firstLiveNode);\n      }\n\n      String collectionName = cli.getOptionValue(NAME);\n\n      // build a URL to create the collection\n      int numShards = optionAsInt(cli, \"shards\", 1);\n      int replicationFactor = optionAsInt(cli, \"replicationFactor\", 1);\n      int maxShardsPerNode = -1;\n\n      if (cli.hasOption(\"maxShardsPerNode\")) {\n        maxShardsPerNode = Integer.parseInt(cli.getOptionValue(\"maxShardsPerNode\"));\n      }\n\n      String confname = cli.getOptionValue(\"confname\");\n      String confdir = cli.getOptionValue(\"confdir\");\n      String configsetsDir = cli.getOptionValue(\"configsetsDir\");\n\n      boolean configExistsInZk = confname != null && !\"\".equals(confname.trim()) &&\n          cloudSolrClient.getZkStateReader().getZkClient().exists(\"/configs/\" + confname, true);\n\n      if (\".system\".equals(collectionName)) {\n        //do nothing\n      } else if (configExistsInZk) {\n        echo(\"Re-using existing configuration directory \"+confname);\n      } else if (confdir != null && !\"\".equals(confdir.trim())){\n        if (confname == null || \"\".equals(confname.trim())) {\n          confname = collectionName;\n        }\n        Path confPath = ZkConfigManager.getConfigsetPath(confdir,\n            configsetsDir);\n\n        echoIfVerbose(\"Uploading \" + confPath.toAbsolutePath().toString() +\n            \" for config \" + confname + \" to ZooKeeper at \" + cloudSolrClient.getZkHost(), cli);\n        ((ZkClientClusterStateProvider) cloudSolrClient.getClusterStateProvider()).uploadConfig(confPath, confname);\n      }\n\n      // since creating a collection is a heavy-weight operation, check for existence first\n      String collectionListUrl = baseUrl+\"/admin/collections?action=list\";\n      if (safeCheckCollectionExists(collectionListUrl, collectionName)) {\n        throw new IllegalStateException(\"\\nCollection '\"+collectionName+\n            \"' already exists!\\nChecked collection existence using Collections API command:\\n\"+\n            collectionListUrl);\n      }\n\n      // doesn't seem to exist ... try to create\n      String createCollectionUrl =\n          String.format(Locale.ROOT,\n              \"%s/admin/collections?action=CREATE&name=%s&numShards=%d&replicationFactor=%d&maxShardsPerNode=%d\",\n              baseUrl,\n              collectionName,\n              numShards,\n              replicationFactor,\n              maxShardsPerNode);\n      if (confname != null && !\"\".equals(confname.trim())) {\n        createCollectionUrl = createCollectionUrl + String.format(Locale.ROOT, \"&collection.configName=%s\", confname);\n      }\n\n      echoIfVerbose(\"\\nCreating new collection '\"+collectionName+\"' using command:\\n\"+createCollectionUrl+\"\\n\", cli);\n\n      Map<String,Object> json = null;\n      try {\n        json = getJson(createCollectionUrl);\n      } catch (SolrServerException sse) {\n        throw new Exception(\"Failed to create collection '\"+collectionName+\"' due to: \"+sse.getMessage());\n      }\n\n      if (cli.hasOption(\"verbose\")) {\n        CharArr arr = new CharArr();\n        new JSONWriter(arr, 2).write(json);\n        echo(arr.toString());\n      } else {\n        String endMessage = String.format(Locale.ROOT, \"Created collection '%s' with %d shard(s), %d replica(s)\",\n            collectionName, numShards, replicationFactor);\n        if (confname != null && !\"\".equals(confname.trim())) {\n          endMessage += String.format(Locale.ROOT, \" with config-set '%s'\", confname);\n        }\n      \n        echo(endMessage);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b79a5db147a1c6f95d1625ddbc3561ef56955225","date":1528848080,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.CreateCollectionTool#runCloudTool(CloudSolrClient,CommandLine).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.CreateCollectionTool#runCloudTool(CloudSolrClient,CommandLine).mjava","sourceNew":"    protected void runCloudTool(CloudSolrClient cloudSolrClient, CommandLine cli) throws Exception {\n\n      Set<String> liveNodes = cloudSolrClient.getZkStateReader().getClusterState().getLiveNodes();\n      if (liveNodes.isEmpty())\n        throw new IllegalStateException(\"No live nodes found! Cannot create a collection until \" +\n            \"there is at least 1 live node in the cluster.\");\n      \n      String baseUrl = cli.getOptionValue(\"solrUrl\");\n      if (baseUrl == null) {\n        String firstLiveNode = liveNodes.iterator().next();\n        baseUrl = cloudSolrClient.getZkStateReader().getBaseUrlForNodeName(firstLiveNode);\n      }\n\n      String collectionName = cli.getOptionValue(NAME);\n\n      // build a URL to create the collection\n      int numShards = optionAsInt(cli, \"shards\", 1);\n      int replicationFactor = optionAsInt(cli, \"replicationFactor\", 1);\n      int maxShardsPerNode = -1;\n\n      if (cli.hasOption(\"maxShardsPerNode\")) {\n        maxShardsPerNode = Integer.parseInt(cli.getOptionValue(\"maxShardsPerNode\"));\n      }\n\n      String confname = cli.getOptionValue(\"confname\");\n      String confdir = cli.getOptionValue(\"confdir\");\n      String configsetsDir = cli.getOptionValue(\"configsetsDir\");\n\n      boolean configExistsInZk = confname != null && !\"\".equals(confname.trim()) &&\n          cloudSolrClient.getZkStateReader().getZkClient().exists(\"/configs/\" + confname, true);\n\n      if (CollectionAdminParams.SYSTEM_COLL.equals(collectionName)) {\n        //do nothing\n      } else if (configExistsInZk) {\n        echo(\"Re-using existing configuration directory \"+confname);\n      } else if (confdir != null && !\"\".equals(confdir.trim())){\n        if (confname == null || \"\".equals(confname.trim())) {\n          confname = collectionName;\n        }\n        Path confPath = ZkConfigManager.getConfigsetPath(confdir,\n            configsetsDir);\n\n        echoIfVerbose(\"Uploading \" + confPath.toAbsolutePath().toString() +\n            \" for config \" + confname + \" to ZooKeeper at \" + cloudSolrClient.getZkHost(), cli);\n        ((ZkClientClusterStateProvider) cloudSolrClient.getClusterStateProvider()).uploadConfig(confPath, confname);\n      }\n\n      // since creating a collection is a heavy-weight operation, check for existence first\n      String collectionListUrl = baseUrl+\"/admin/collections?action=list\";\n      if (safeCheckCollectionExists(collectionListUrl, collectionName)) {\n        throw new IllegalStateException(\"\\nCollection '\"+collectionName+\n            \"' already exists!\\nChecked collection existence using Collections API command:\\n\"+\n            collectionListUrl);\n      }\n\n      // doesn't seem to exist ... try to create\n      String createCollectionUrl =\n          String.format(Locale.ROOT,\n              \"%s/admin/collections?action=CREATE&name=%s&numShards=%d&replicationFactor=%d&maxShardsPerNode=%d\",\n              baseUrl,\n              collectionName,\n              numShards,\n              replicationFactor,\n              maxShardsPerNode);\n      if (confname != null && !\"\".equals(confname.trim())) {\n        createCollectionUrl = createCollectionUrl + String.format(Locale.ROOT, \"&collection.configName=%s\", confname);\n      }\n\n      echoIfVerbose(\"\\nCreating new collection '\"+collectionName+\"' using command:\\n\"+createCollectionUrl+\"\\n\", cli);\n\n      Map<String,Object> json = null;\n      try {\n        json = getJson(createCollectionUrl);\n      } catch (SolrServerException sse) {\n        throw new Exception(\"Failed to create collection '\"+collectionName+\"' due to: \"+sse.getMessage());\n      }\n\n      if (cli.hasOption(\"verbose\")) {\n        CharArr arr = new CharArr();\n        new JSONWriter(arr, 2).write(json);\n        echo(arr.toString());\n      } else {\n        String endMessage = String.format(Locale.ROOT, \"Created collection '%s' with %d shard(s), %d replica(s)\",\n            collectionName, numShards, replicationFactor);\n        if (confname != null && !\"\".equals(confname.trim())) {\n          endMessage += String.format(Locale.ROOT, \" with config-set '%s'\", confname);\n        }\n      \n        echo(endMessage);\n      }\n    }\n\n","sourceOld":"    protected void runCloudTool(CloudSolrClient cloudSolrClient, CommandLine cli) throws Exception {\n\n      Set<String> liveNodes = cloudSolrClient.getZkStateReader().getClusterState().getLiveNodes();\n      if (liveNodes.isEmpty())\n        throw new IllegalStateException(\"No live nodes found! Cannot create a collection until \" +\n            \"there is at least 1 live node in the cluster.\");\n      \n      String baseUrl = cli.getOptionValue(\"solrUrl\");\n      if (baseUrl == null) {\n        String firstLiveNode = liveNodes.iterator().next();\n        baseUrl = cloudSolrClient.getZkStateReader().getBaseUrlForNodeName(firstLiveNode);\n      }\n\n      String collectionName = cli.getOptionValue(NAME);\n\n      // build a URL to create the collection\n      int numShards = optionAsInt(cli, \"shards\", 1);\n      int replicationFactor = optionAsInt(cli, \"replicationFactor\", 1);\n      int maxShardsPerNode = -1;\n\n      if (cli.hasOption(\"maxShardsPerNode\")) {\n        maxShardsPerNode = Integer.parseInt(cli.getOptionValue(\"maxShardsPerNode\"));\n      }\n\n      String confname = cli.getOptionValue(\"confname\");\n      String confdir = cli.getOptionValue(\"confdir\");\n      String configsetsDir = cli.getOptionValue(\"configsetsDir\");\n\n      boolean configExistsInZk = confname != null && !\"\".equals(confname.trim()) &&\n          cloudSolrClient.getZkStateReader().getZkClient().exists(\"/configs/\" + confname, true);\n\n      if (CollectionAdminParams.SYSTEM_COLL.equals(collectionName)) {\n        //do nothing\n      } else if (configExistsInZk) {\n        echo(\"Re-using existing configuration directory \"+confname);\n      } else if (confdir != null && !\"\".equals(confdir.trim())){\n        if (confname == null || \"\".equals(confname.trim())) {\n          confname = collectionName;\n        }\n        Path confPath = ZkConfigManager.getConfigsetPath(confdir,\n            configsetsDir);\n\n        echoIfVerbose(\"Uploading \" + confPath.toAbsolutePath().toString() +\n            \" for config \" + confname + \" to ZooKeeper at \" + cloudSolrClient.getZkHost(), cli);\n        ((ZkClientClusterStateProvider) cloudSolrClient.getClusterStateProvider()).uploadConfig(confPath, confname);\n      }\n\n      // since creating a collection is a heavy-weight operation, check for existence first\n      String collectionListUrl = baseUrl+\"/admin/collections?action=list\";\n      if (safeCheckCollectionExists(collectionListUrl, collectionName)) {\n        throw new IllegalStateException(\"\\nCollection '\"+collectionName+\n            \"' already exists!\\nChecked collection existence using Collections API command:\\n\"+\n            collectionListUrl);\n      }\n\n      // doesn't seem to exist ... try to create\n      String createCollectionUrl =\n          String.format(Locale.ROOT,\n              \"%s/admin/collections?action=CREATE&name=%s&numShards=%d&replicationFactor=%d&maxShardsPerNode=%d\",\n              baseUrl,\n              collectionName,\n              numShards,\n              replicationFactor,\n              maxShardsPerNode);\n      if (confname != null && !\"\".equals(confname.trim())) {\n        createCollectionUrl = createCollectionUrl + String.format(Locale.ROOT, \"&collection.configName=%s\", confname);\n      }\n\n      echoIfVerbose(\"\\nCreating new collection '\"+collectionName+\"' using command:\\n\"+createCollectionUrl+\"\\n\", cli);\n\n      Map<String,Object> json = null;\n      try {\n        json = getJson(createCollectionUrl);\n      } catch (SolrServerException sse) {\n        throw new Exception(\"Failed to create collection '\"+collectionName+\"' due to: \"+sse.getMessage());\n      }\n\n      if (cli.hasOption(\"verbose\")) {\n        CharArr arr = new CharArr();\n        new JSONWriter(arr, 2).write(json);\n        echo(arr.toString());\n      } else {\n        String endMessage = String.format(Locale.ROOT, \"Created collection '%s' with %d shard(s), %d replica(s)\",\n            collectionName, numShards, replicationFactor);\n        if (confname != null && !\"\".equals(confname.trim())) {\n          endMessage += String.format(Locale.ROOT, \" with config-set '%s'\", confname);\n        }\n      \n        echo(endMessage);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.CreateCollectionTool#runCloudTool(CloudSolrClient,CommandLine).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.CreateCollectionTool#runCloudTool(CloudSolrClient,CommandLine).mjava","sourceNew":"    protected void runCloudTool(CloudSolrClient cloudSolrClient, CommandLine cli) throws Exception {\n\n      Set<String> liveNodes = cloudSolrClient.getZkStateReader().getClusterState().getLiveNodes();\n      if (liveNodes.isEmpty())\n        throw new IllegalStateException(\"No live nodes found! Cannot create a collection until \" +\n            \"there is at least 1 live node in the cluster.\");\n      \n      String baseUrl = cli.getOptionValue(\"solrUrl\");\n      if (baseUrl == null) {\n        String firstLiveNode = liveNodes.iterator().next();\n        baseUrl = cloudSolrClient.getZkStateReader().getBaseUrlForNodeName(firstLiveNode);\n      }\n\n      String collectionName = cli.getOptionValue(NAME);\n\n      // build a URL to create the collection\n      int numShards = optionAsInt(cli, \"shards\", 1);\n      int replicationFactor = optionAsInt(cli, \"replicationFactor\", 1);\n      int maxShardsPerNode = -1;\n\n      if (cli.hasOption(\"maxShardsPerNode\")) {\n        maxShardsPerNode = Integer.parseInt(cli.getOptionValue(\"maxShardsPerNode\"));\n      }\n\n      String confname = cli.getOptionValue(\"confname\");\n      String confdir = cli.getOptionValue(\"confdir\");\n      String configsetsDir = cli.getOptionValue(\"configsetsDir\");\n\n      boolean configExistsInZk = confname != null && !\"\".equals(confname.trim()) &&\n          cloudSolrClient.getZkStateReader().getZkClient().exists(\"/configs/\" + confname, true);\n\n      if (CollectionAdminParams.SYSTEM_COLL.equals(collectionName)) {\n        //do nothing\n      } else if (configExistsInZk) {\n        echo(\"Re-using existing configuration directory \"+confname);\n      } else if (confdir != null && !\"\".equals(confdir.trim())){\n        if (confname == null || \"\".equals(confname.trim())) {\n          confname = collectionName;\n        }\n        Path confPath = ZkConfigManager.getConfigsetPath(confdir,\n            configsetsDir);\n\n        echoIfVerbose(\"Uploading \" + confPath.toAbsolutePath().toString() +\n            \" for config \" + confname + \" to ZooKeeper at \" + cloudSolrClient.getZkHost(), cli);\n        ((ZkClientClusterStateProvider) cloudSolrClient.getClusterStateProvider()).uploadConfig(confPath, confname);\n      }\n\n      // since creating a collection is a heavy-weight operation, check for existence first\n      String collectionListUrl = baseUrl+\"/admin/collections?action=list\";\n      if (safeCheckCollectionExists(collectionListUrl, collectionName)) {\n        throw new IllegalStateException(\"\\nCollection '\"+collectionName+\n            \"' already exists!\\nChecked collection existence using Collections API command:\\n\"+\n            collectionListUrl);\n      }\n\n      // doesn't seem to exist ... try to create\n      String createCollectionUrl =\n          String.format(Locale.ROOT,\n              \"%s/admin/collections?action=CREATE&name=%s&numShards=%d&replicationFactor=%d&maxShardsPerNode=%d\",\n              baseUrl,\n              collectionName,\n              numShards,\n              replicationFactor,\n              maxShardsPerNode);\n      if (confname != null && !\"\".equals(confname.trim())) {\n        createCollectionUrl = createCollectionUrl + String.format(Locale.ROOT, \"&collection.configName=%s\", confname);\n      }\n\n      echoIfVerbose(\"\\nCreating new collection '\"+collectionName+\"' using command:\\n\"+createCollectionUrl+\"\\n\", cli);\n\n      Map<String,Object> json = null;\n      try {\n        json = getJson(createCollectionUrl);\n      } catch (SolrServerException sse) {\n        throw new Exception(\"Failed to create collection '\"+collectionName+\"' due to: \"+sse.getMessage());\n      }\n\n      if (cli.hasOption(\"verbose\")) {\n        CharArr arr = new CharArr();\n        new JSONWriter(arr, 2).write(json);\n        echo(arr.toString());\n      } else {\n        String endMessage = String.format(Locale.ROOT, \"Created collection '%s' with %d shard(s), %d replica(s)\",\n            collectionName, numShards, replicationFactor);\n        if (confname != null && !\"\".equals(confname.trim())) {\n          endMessage += String.format(Locale.ROOT, \" with config-set '%s'\", confname);\n        }\n      \n        echo(endMessage);\n      }\n    }\n\n","sourceOld":"    protected void runCloudTool(CloudSolrClient cloudSolrClient, CommandLine cli) throws Exception {\n\n      Set<String> liveNodes = cloudSolrClient.getZkStateReader().getClusterState().getLiveNodes();\n      if (liveNodes.isEmpty())\n        throw new IllegalStateException(\"No live nodes found! Cannot create a collection until \" +\n            \"there is at least 1 live node in the cluster.\");\n      \n      String baseUrl = cli.getOptionValue(\"solrUrl\");\n      if (baseUrl == null) {\n        String firstLiveNode = liveNodes.iterator().next();\n        baseUrl = cloudSolrClient.getZkStateReader().getBaseUrlForNodeName(firstLiveNode);\n      }\n\n      String collectionName = cli.getOptionValue(NAME);\n\n      // build a URL to create the collection\n      int numShards = optionAsInt(cli, \"shards\", 1);\n      int replicationFactor = optionAsInt(cli, \"replicationFactor\", 1);\n      int maxShardsPerNode = -1;\n\n      if (cli.hasOption(\"maxShardsPerNode\")) {\n        maxShardsPerNode = Integer.parseInt(cli.getOptionValue(\"maxShardsPerNode\"));\n      }\n\n      String confname = cli.getOptionValue(\"confname\");\n      String confdir = cli.getOptionValue(\"confdir\");\n      String configsetsDir = cli.getOptionValue(\"configsetsDir\");\n\n      boolean configExistsInZk = confname != null && !\"\".equals(confname.trim()) &&\n          cloudSolrClient.getZkStateReader().getZkClient().exists(\"/configs/\" + confname, true);\n\n      if (CollectionAdminParams.SYSTEM_COLL.equals(collectionName)) {\n        //do nothing\n      } else if (configExistsInZk) {\n        echo(\"Re-using existing configuration directory \"+confname);\n      } else if (confdir != null && !\"\".equals(confdir.trim())){\n        if (confname == null || \"\".equals(confname.trim())) {\n          confname = collectionName;\n        }\n        Path confPath = ZkConfigManager.getConfigsetPath(confdir,\n            configsetsDir);\n\n        echoIfVerbose(\"Uploading \" + confPath.toAbsolutePath().toString() +\n            \" for config \" + confname + \" to ZooKeeper at \" + cloudSolrClient.getZkHost(), cli);\n        ((ZkClientClusterStateProvider) cloudSolrClient.getClusterStateProvider()).uploadConfig(confPath, confname);\n      }\n\n      // since creating a collection is a heavy-weight operation, check for existence first\n      String collectionListUrl = baseUrl+\"/admin/collections?action=list\";\n      if (safeCheckCollectionExists(collectionListUrl, collectionName)) {\n        throw new IllegalStateException(\"\\nCollection '\"+collectionName+\n            \"' already exists!\\nChecked collection existence using Collections API command:\\n\"+\n            collectionListUrl);\n      }\n\n      // doesn't seem to exist ... try to create\n      String createCollectionUrl =\n          String.format(Locale.ROOT,\n              \"%s/admin/collections?action=CREATE&name=%s&numShards=%d&replicationFactor=%d&maxShardsPerNode=%d\",\n              baseUrl,\n              collectionName,\n              numShards,\n              replicationFactor,\n              maxShardsPerNode);\n      if (confname != null && !\"\".equals(confname.trim())) {\n        createCollectionUrl = createCollectionUrl + String.format(Locale.ROOT, \"&collection.configName=%s\", confname);\n      }\n\n      echoIfVerbose(\"\\nCreating new collection '\"+collectionName+\"' using command:\\n\"+createCollectionUrl+\"\\n\", cli);\n\n      Map<String,Object> json = null;\n      try {\n        json = getJson(createCollectionUrl);\n      } catch (SolrServerException sse) {\n        throw new Exception(\"Failed to create collection '\"+collectionName+\"' due to: \"+sse.getMessage());\n      }\n\n      if (cli.hasOption(\"verbose\")) {\n        CharArr arr = new CharArr();\n        new JSONWriter(arr, 2).write(json);\n        echo(arr.toString());\n      } else {\n        String endMessage = String.format(Locale.ROOT, \"Created collection '%s' with %d shard(s), %d replica(s)\",\n            collectionName, numShards, replicationFactor);\n        if (confname != null && !\"\".equals(confname.trim())) {\n          endMessage += String.format(Locale.ROOT, \" with config-set '%s'\", confname);\n        }\n      \n        echo(endMessage);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.CreateCollectionTool#runCloudTool(CloudSolrClient,CommandLine).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.CreateCollectionTool#runCloudTool(CloudSolrClient,CommandLine).mjava","sourceNew":"    protected void runCloudTool(CloudSolrClient cloudSolrClient, CommandLine cli) throws Exception {\n\n      Set<String> liveNodes = cloudSolrClient.getZkStateReader().getClusterState().getLiveNodes();\n      if (liveNodes.isEmpty())\n        throw new IllegalStateException(\"No live nodes found! Cannot create a collection until \" +\n            \"there is at least 1 live node in the cluster.\");\n      \n      String baseUrl = cli.getOptionValue(\"solrUrl\");\n      if (baseUrl == null) {\n        String firstLiveNode = liveNodes.iterator().next();\n        baseUrl = cloudSolrClient.getZkStateReader().getBaseUrlForNodeName(firstLiveNode);\n      }\n\n      String collectionName = cli.getOptionValue(NAME);\n\n      // build a URL to create the collection\n      int numShards = optionAsInt(cli, \"shards\", 1);\n      int replicationFactor = optionAsInt(cli, \"replicationFactor\", 1);\n      int maxShardsPerNode = -1;\n\n      if (cli.hasOption(\"maxShardsPerNode\")) {\n        maxShardsPerNode = Integer.parseInt(cli.getOptionValue(\"maxShardsPerNode\"));\n      }\n\n      String confname = cli.getOptionValue(\"confname\");\n      String confdir = cli.getOptionValue(\"confdir\");\n      String configsetsDir = cli.getOptionValue(\"configsetsDir\");\n\n      boolean configExistsInZk = confname != null && !\"\".equals(confname.trim()) &&\n          cloudSolrClient.getZkStateReader().getZkClient().exists(\"/configs/\" + confname, true);\n\n      if (CollectionAdminParams.SYSTEM_COLL.equals(collectionName)) {\n        //do nothing\n      } else if (configExistsInZk) {\n        echo(\"Re-using existing configuration directory \"+confname);\n      } else if (confdir != null && !\"\".equals(confdir.trim())){\n        if (confname == null || \"\".equals(confname.trim())) {\n          confname = collectionName;\n        }\n        Path confPath = ZkConfigManager.getConfigsetPath(confdir,\n            configsetsDir);\n\n        echoIfVerbose(\"Uploading \" + confPath.toAbsolutePath().toString() +\n            \" for config \" + confname + \" to ZooKeeper at \" + cloudSolrClient.getZkHost(), cli);\n        ((ZkClientClusterStateProvider) cloudSolrClient.getClusterStateProvider()).uploadConfig(confPath, confname);\n      }\n\n      // since creating a collection is a heavy-weight operation, check for existence first\n      String collectionListUrl = baseUrl+\"/admin/collections?action=list\";\n      if (safeCheckCollectionExists(collectionListUrl, collectionName)) {\n        throw new IllegalStateException(\"\\nCollection '\"+collectionName+\n            \"' already exists!\\nChecked collection existence using Collections API command:\\n\"+\n            collectionListUrl);\n      }\n\n      // doesn't seem to exist ... try to create\n      String createCollectionUrl =\n          String.format(Locale.ROOT,\n              \"%s/admin/collections?action=CREATE&name=%s&numShards=%d&replicationFactor=%d&maxShardsPerNode=%d\",\n              baseUrl,\n              collectionName,\n              numShards,\n              replicationFactor,\n              maxShardsPerNode);\n      if (confname != null && !\"\".equals(confname.trim())) {\n        createCollectionUrl = createCollectionUrl + String.format(Locale.ROOT, \"&collection.configName=%s\", confname);\n      }\n\n      echoIfVerbose(\"\\nCreating new collection '\"+collectionName+\"' using command:\\n\"+createCollectionUrl+\"\\n\", cli);\n\n      Map<String,Object> json = null;\n      try {\n        json = getJson(createCollectionUrl);\n      } catch (SolrServerException sse) {\n        throw new Exception(\"Failed to create collection '\"+collectionName+\"' due to: \"+sse.getMessage());\n      }\n\n      if (cli.hasOption(\"verbose\")) {\n        CharArr arr = new CharArr();\n        new JSONWriter(arr, 2).write(json);\n        echo(arr.toString());\n      } else {\n        String endMessage = String.format(Locale.ROOT, \"Created collection '%s' with %d shard(s), %d replica(s)\",\n            collectionName, numShards, replicationFactor);\n        if (confname != null && !\"\".equals(confname.trim())) {\n          endMessage += String.format(Locale.ROOT, \" with config-set '%s'\", confname);\n        }\n      \n        echo(endMessage);\n      }\n    }\n\n","sourceOld":"    protected void runCloudTool(CloudSolrClient cloudSolrClient, CommandLine cli) throws Exception {\n\n      Set<String> liveNodes = cloudSolrClient.getZkStateReader().getClusterState().getLiveNodes();\n      if (liveNodes.isEmpty())\n        throw new IllegalStateException(\"No live nodes found! Cannot create a collection until \" +\n            \"there is at least 1 live node in the cluster.\");\n      \n      String baseUrl = cli.getOptionValue(\"solrUrl\");\n      if (baseUrl == null) {\n        String firstLiveNode = liveNodes.iterator().next();\n        baseUrl = cloudSolrClient.getZkStateReader().getBaseUrlForNodeName(firstLiveNode);\n      }\n\n      String collectionName = cli.getOptionValue(NAME);\n\n      // build a URL to create the collection\n      int numShards = optionAsInt(cli, \"shards\", 1);\n      int replicationFactor = optionAsInt(cli, \"replicationFactor\", 1);\n      int maxShardsPerNode = -1;\n\n      if (cli.hasOption(\"maxShardsPerNode\")) {\n        maxShardsPerNode = Integer.parseInt(cli.getOptionValue(\"maxShardsPerNode\"));\n      }\n\n      String confname = cli.getOptionValue(\"confname\");\n      String confdir = cli.getOptionValue(\"confdir\");\n      String configsetsDir = cli.getOptionValue(\"configsetsDir\");\n\n      boolean configExistsInZk = confname != null && !\"\".equals(confname.trim()) &&\n          cloudSolrClient.getZkStateReader().getZkClient().exists(\"/configs/\" + confname, true);\n\n      if (CollectionAdminParams.SYSTEM_COLL.equals(collectionName)) {\n        //do nothing\n      } else if (configExistsInZk) {\n        echo(\"Re-using existing configuration directory \"+confname);\n      } else if (confdir != null && !\"\".equals(confdir.trim())){\n        if (confname == null || \"\".equals(confname.trim())) {\n          confname = collectionName;\n        }\n        Path confPath = ZkConfigManager.getConfigsetPath(confdir,\n            configsetsDir);\n\n        echoIfVerbose(\"Uploading \" + confPath.toAbsolutePath().toString() +\n            \" for config \" + confname + \" to ZooKeeper at \" + cloudSolrClient.getZkHost(), cli);\n        ((ZkClientClusterStateProvider) cloudSolrClient.getClusterStateProvider()).uploadConfig(confPath, confname);\n      }\n\n      // since creating a collection is a heavy-weight operation, check for existence first\n      String collectionListUrl = baseUrl+\"/admin/collections?action=list\";\n      if (safeCheckCollectionExists(collectionListUrl, collectionName)) {\n        throw new IllegalStateException(\"\\nCollection '\"+collectionName+\n            \"' already exists!\\nChecked collection existence using Collections API command:\\n\"+\n            collectionListUrl);\n      }\n\n      // doesn't seem to exist ... try to create\n      String createCollectionUrl =\n          String.format(Locale.ROOT,\n              \"%s/admin/collections?action=CREATE&name=%s&numShards=%d&replicationFactor=%d&maxShardsPerNode=%d\",\n              baseUrl,\n              collectionName,\n              numShards,\n              replicationFactor,\n              maxShardsPerNode);\n      if (confname != null && !\"\".equals(confname.trim())) {\n        createCollectionUrl = createCollectionUrl + String.format(Locale.ROOT, \"&collection.configName=%s\", confname);\n      }\n\n      echoIfVerbose(\"\\nCreating new collection '\"+collectionName+\"' using command:\\n\"+createCollectionUrl+\"\\n\", cli);\n\n      Map<String,Object> json = null;\n      try {\n        json = getJson(createCollectionUrl);\n      } catch (SolrServerException sse) {\n        throw new Exception(\"Failed to create collection '\"+collectionName+\"' due to: \"+sse.getMessage());\n      }\n\n      if (cli.hasOption(\"verbose\")) {\n        CharArr arr = new CharArr();\n        new JSONWriter(arr, 2).write(json);\n        echo(arr.toString());\n      } else {\n        String endMessage = String.format(Locale.ROOT, \"Created collection '%s' with %d shard(s), %d replica(s)\",\n            collectionName, numShards, replicationFactor);\n        if (confname != null && !\"\".equals(confname.trim())) {\n          endMessage += String.format(Locale.ROOT, \" with config-set '%s'\", confname);\n        }\n      \n        echo(endMessage);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15","date":1554259533,"type":3,"author":"Gus Heck","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.CreateCollectionTool#runCloudTool(CloudSolrClient,CommandLine).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.CreateCollectionTool#runCloudTool(CloudSolrClient,CommandLine).mjava","sourceNew":"    protected void runCloudTool(CloudSolrClient cloudSolrClient, CommandLine cli) throws Exception {\n\n      Set<String> liveNodes = cloudSolrClient.getZkStateReader().getClusterState().getLiveNodes();\n      if (liveNodes.isEmpty())\n        throw new IllegalStateException(\"No live nodes found! Cannot create a collection until \" +\n            \"there is at least 1 live node in the cluster.\");\n\n      String baseUrl = cli.getOptionValue(\"solrUrl\");\n      if (baseUrl == null) {\n        String firstLiveNode = liveNodes.iterator().next();\n        baseUrl = cloudSolrClient.getZkStateReader().getBaseUrlForNodeName(firstLiveNode);\n      }\n\n      String collectionName = cli.getOptionValue(NAME);\n\n      // build a URL to create the collection\n      int numShards = optionAsInt(cli, \"shards\", 1);\n      int replicationFactor = optionAsInt(cli, \"replicationFactor\", 1);\n      int maxShardsPerNode = -1;\n\n      if (cli.hasOption(\"maxShardsPerNode\")) {\n        maxShardsPerNode = Integer.parseInt(cli.getOptionValue(\"maxShardsPerNode\"));\n      }\n\n      String confname = cli.getOptionValue(\"confname\");\n      String confdir = cli.getOptionValue(\"confdir\");\n      String configsetsDir = cli.getOptionValue(\"configsetsDir\");\n\n      boolean configExistsInZk = confname != null && !\"\".equals(confname.trim()) &&\n          cloudSolrClient.getZkStateReader().getZkClient().exists(\"/configs/\" + confname, true);\n\n      if (CollectionAdminParams.SYSTEM_COLL.equals(collectionName)) {\n        //do nothing\n      } else if (configExistsInZk) {\n        echo(\"Re-using existing configuration directory \"+confname);\n      } else if (confdir != null && !\"\".equals(confdir.trim())){\n        if (confname == null || \"\".equals(confname.trim())) {\n          confname = collectionName;\n        }\n        Path confPath = ZkConfigManager.getConfigsetPath(confdir,\n            configsetsDir);\n\n        echoIfVerbose(\"Uploading \" + confPath.toAbsolutePath().toString() +\n            \" for config \" + confname + \" to ZooKeeper at \" + cloudSolrClient.getZkHost(), cli);\n        ((ZkClientClusterStateProvider) cloudSolrClient.getClusterStateProvider()).uploadConfig(confPath, confname);\n      }\n\n      // since creating a collection is a heavy-weight operation, check for existence first\n      String collectionListUrl = baseUrl+\"/admin/collections?action=list\";\n      if (safeCheckCollectionExists(collectionListUrl, collectionName)) {\n        throw new IllegalStateException(\"\\nCollection '\"+collectionName+\n            \"' already exists!\\nChecked collection existence using Collections API command:\\n\"+\n            collectionListUrl);\n      }\n\n      // doesn't seem to exist ... try to create\n      String createCollectionUrl =\n          String.format(Locale.ROOT,\n              \"%s/admin/collections?action=CREATE&name=%s&numShards=%d&replicationFactor=%d&maxShardsPerNode=%d\",\n              baseUrl,\n              collectionName,\n              numShards,\n              replicationFactor,\n              maxShardsPerNode);\n      if (confname != null && !\"\".equals(confname.trim())) {\n        createCollectionUrl = createCollectionUrl + String.format(Locale.ROOT, \"&collection.configName=%s\", confname);\n      }\n\n      echoIfVerbose(\"\\nCreating new collection '\"+collectionName+\"' using command:\\n\"+createCollectionUrl+\"\\n\", cli);\n\n      Map<String,Object> json = null;\n      try {\n        json = getJson(createCollectionUrl);\n      } catch (SolrServerException sse) {\n        throw new Exception(\"Failed to create collection '\"+collectionName+\"' due to: \"+sse.getMessage());\n      }\n\n      if (cli.hasOption(\"verbose\")) {\n        CharArr arr = new CharArr();\n        new JSONWriter(arr, 2).write(json);\n        echo(arr.toString());\n      } else {\n        String endMessage = String.format(Locale.ROOT, \"Created collection '%s' with %d shard(s), %d replica(s)\",\n            collectionName, numShards, replicationFactor);\n        if (confname != null && !\"\".equals(confname.trim())) {\n          endMessage += String.format(Locale.ROOT, \" with config-set '%s'\", confname);\n        }\n\n        echo(endMessage);\n      }\n    }\n\n","sourceOld":"    protected void runCloudTool(CloudSolrClient cloudSolrClient, CommandLine cli) throws Exception {\n\n      Set<String> liveNodes = cloudSolrClient.getZkStateReader().getClusterState().getLiveNodes();\n      if (liveNodes.isEmpty())\n        throw new IllegalStateException(\"No live nodes found! Cannot create a collection until \" +\n            \"there is at least 1 live node in the cluster.\");\n      \n      String baseUrl = cli.getOptionValue(\"solrUrl\");\n      if (baseUrl == null) {\n        String firstLiveNode = liveNodes.iterator().next();\n        baseUrl = cloudSolrClient.getZkStateReader().getBaseUrlForNodeName(firstLiveNode);\n      }\n\n      String collectionName = cli.getOptionValue(NAME);\n\n      // build a URL to create the collection\n      int numShards = optionAsInt(cli, \"shards\", 1);\n      int replicationFactor = optionAsInt(cli, \"replicationFactor\", 1);\n      int maxShardsPerNode = -1;\n\n      if (cli.hasOption(\"maxShardsPerNode\")) {\n        maxShardsPerNode = Integer.parseInt(cli.getOptionValue(\"maxShardsPerNode\"));\n      }\n\n      String confname = cli.getOptionValue(\"confname\");\n      String confdir = cli.getOptionValue(\"confdir\");\n      String configsetsDir = cli.getOptionValue(\"configsetsDir\");\n\n      boolean configExistsInZk = confname != null && !\"\".equals(confname.trim()) &&\n          cloudSolrClient.getZkStateReader().getZkClient().exists(\"/configs/\" + confname, true);\n\n      if (CollectionAdminParams.SYSTEM_COLL.equals(collectionName)) {\n        //do nothing\n      } else if (configExistsInZk) {\n        echo(\"Re-using existing configuration directory \"+confname);\n      } else if (confdir != null && !\"\".equals(confdir.trim())){\n        if (confname == null || \"\".equals(confname.trim())) {\n          confname = collectionName;\n        }\n        Path confPath = ZkConfigManager.getConfigsetPath(confdir,\n            configsetsDir);\n\n        echoIfVerbose(\"Uploading \" + confPath.toAbsolutePath().toString() +\n            \" for config \" + confname + \" to ZooKeeper at \" + cloudSolrClient.getZkHost(), cli);\n        ((ZkClientClusterStateProvider) cloudSolrClient.getClusterStateProvider()).uploadConfig(confPath, confname);\n      }\n\n      // since creating a collection is a heavy-weight operation, check for existence first\n      String collectionListUrl = baseUrl+\"/admin/collections?action=list\";\n      if (safeCheckCollectionExists(collectionListUrl, collectionName)) {\n        throw new IllegalStateException(\"\\nCollection '\"+collectionName+\n            \"' already exists!\\nChecked collection existence using Collections API command:\\n\"+\n            collectionListUrl);\n      }\n\n      // doesn't seem to exist ... try to create\n      String createCollectionUrl =\n          String.format(Locale.ROOT,\n              \"%s/admin/collections?action=CREATE&name=%s&numShards=%d&replicationFactor=%d&maxShardsPerNode=%d\",\n              baseUrl,\n              collectionName,\n              numShards,\n              replicationFactor,\n              maxShardsPerNode);\n      if (confname != null && !\"\".equals(confname.trim())) {\n        createCollectionUrl = createCollectionUrl + String.format(Locale.ROOT, \"&collection.configName=%s\", confname);\n      }\n\n      echoIfVerbose(\"\\nCreating new collection '\"+collectionName+\"' using command:\\n\"+createCollectionUrl+\"\\n\", cli);\n\n      Map<String,Object> json = null;\n      try {\n        json = getJson(createCollectionUrl);\n      } catch (SolrServerException sse) {\n        throw new Exception(\"Failed to create collection '\"+collectionName+\"' due to: \"+sse.getMessage());\n      }\n\n      if (cli.hasOption(\"verbose\")) {\n        CharArr arr = new CharArr();\n        new JSONWriter(arr, 2).write(json);\n        echo(arr.toString());\n      } else {\n        String endMessage = String.format(Locale.ROOT, \"Created collection '%s' with %d shard(s), %d replica(s)\",\n            collectionName, numShards, replicationFactor);\n        if (confname != null && !\"\".equals(confname.trim())) {\n          endMessage += String.format(Locale.ROOT, \" with config-set '%s'\", confname);\n        }\n      \n        echo(endMessage);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e","date":1594223844,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.CreateCollectionTool#runCloudTool(CloudSolrClient,CommandLine).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.CreateCollectionTool#runCloudTool(CloudSolrClient,CommandLine).mjava","sourceNew":"    protected void runCloudTool(CloudSolrClient cloudSolrClient, CommandLine cli) throws Exception {\n\n      Set<String> liveNodes = cloudSolrClient.getZkStateReader().getClusterState().getLiveNodes();\n      if (liveNodes.isEmpty())\n        throw new IllegalStateException(\"No live nodes found! Cannot create a collection until \" +\n            \"there is at least 1 live node in the cluster.\");\n\n      String baseUrl = cli.getOptionValue(\"solrUrl\");\n      if (baseUrl == null) {\n        String firstLiveNode = liveNodes.iterator().next();\n        baseUrl = cloudSolrClient.getZkStateReader().getBaseUrlForNodeName(firstLiveNode);\n      }\n\n      String collectionName = cli.getOptionValue(NAME);\n\n      // build a URL to create the collection\n      int numShards = optionAsInt(cli, \"shards\", 1);\n      int replicationFactor = optionAsInt(cli, \"replicationFactor\", 1);\n\n      String confname = cli.getOptionValue(\"confname\");\n      String confdir = cli.getOptionValue(\"confdir\");\n      String configsetsDir = cli.getOptionValue(\"configsetsDir\");\n\n      boolean configExistsInZk = confname != null && !\"\".equals(confname.trim()) &&\n          cloudSolrClient.getZkStateReader().getZkClient().exists(\"/configs/\" + confname, true);\n\n      if (CollectionAdminParams.SYSTEM_COLL.equals(collectionName)) {\n        //do nothing\n      } else if (configExistsInZk) {\n        echo(\"Re-using existing configuration directory \"+confname);\n      } else if (confdir != null && !\"\".equals(confdir.trim())){\n        if (confname == null || \"\".equals(confname.trim())) {\n          confname = collectionName;\n        }\n        Path confPath = ZkConfigManager.getConfigsetPath(confdir,\n            configsetsDir);\n\n        echoIfVerbose(\"Uploading \" + confPath.toAbsolutePath().toString() +\n            \" for config \" + confname + \" to ZooKeeper at \" + cloudSolrClient.getZkHost(), cli);\n        ((ZkClientClusterStateProvider) cloudSolrClient.getClusterStateProvider()).uploadConfig(confPath, confname);\n      }\n\n      // since creating a collection is a heavy-weight operation, check for existence first\n      String collectionListUrl = baseUrl+\"/admin/collections?action=list\";\n      if (safeCheckCollectionExists(collectionListUrl, collectionName)) {\n        throw new IllegalStateException(\"\\nCollection '\"+collectionName+\n            \"' already exists!\\nChecked collection existence using Collections API command:\\n\"+\n            collectionListUrl);\n      }\n\n      // doesn't seem to exist ... try to create\n      String createCollectionUrl =\n          String.format(Locale.ROOT,\n              \"%s/admin/collections?action=CREATE&name=%s&numShards=%d&replicationFactor=%d\",\n              baseUrl,\n              collectionName,\n              numShards,\n              replicationFactor);\n      if (confname != null && !\"\".equals(confname.trim())) {\n        createCollectionUrl = createCollectionUrl + String.format(Locale.ROOT, \"&collection.configName=%s\", confname);\n      }\n\n      echoIfVerbose(\"\\nCreating new collection '\"+collectionName+\"' using command:\\n\"+createCollectionUrl+\"\\n\", cli);\n\n      Map<String,Object> json = null;\n      try {\n        json = getJson(createCollectionUrl);\n      } catch (SolrServerException sse) {\n        throw new Exception(\"Failed to create collection '\"+collectionName+\"' due to: \"+sse.getMessage());\n      }\n\n      if (cli.hasOption(\"verbose\")) {\n        CharArr arr = new CharArr();\n        new JSONWriter(arr, 2).write(json);\n        echo(arr.toString());\n      } else {\n        String endMessage = String.format(Locale.ROOT, \"Created collection '%s' with %d shard(s), %d replica(s)\",\n            collectionName, numShards, replicationFactor);\n        if (confname != null && !\"\".equals(confname.trim())) {\n          endMessage += String.format(Locale.ROOT, \" with config-set '%s'\", confname);\n        }\n\n        echo(endMessage);\n      }\n    }\n\n","sourceOld":"    protected void runCloudTool(CloudSolrClient cloudSolrClient, CommandLine cli) throws Exception {\n\n      Set<String> liveNodes = cloudSolrClient.getZkStateReader().getClusterState().getLiveNodes();\n      if (liveNodes.isEmpty())\n        throw new IllegalStateException(\"No live nodes found! Cannot create a collection until \" +\n            \"there is at least 1 live node in the cluster.\");\n\n      String baseUrl = cli.getOptionValue(\"solrUrl\");\n      if (baseUrl == null) {\n        String firstLiveNode = liveNodes.iterator().next();\n        baseUrl = cloudSolrClient.getZkStateReader().getBaseUrlForNodeName(firstLiveNode);\n      }\n\n      String collectionName = cli.getOptionValue(NAME);\n\n      // build a URL to create the collection\n      int numShards = optionAsInt(cli, \"shards\", 1);\n      int replicationFactor = optionAsInt(cli, \"replicationFactor\", 1);\n      int maxShardsPerNode = -1;\n\n      if (cli.hasOption(\"maxShardsPerNode\")) {\n        maxShardsPerNode = Integer.parseInt(cli.getOptionValue(\"maxShardsPerNode\"));\n      }\n\n      String confname = cli.getOptionValue(\"confname\");\n      String confdir = cli.getOptionValue(\"confdir\");\n      String configsetsDir = cli.getOptionValue(\"configsetsDir\");\n\n      boolean configExistsInZk = confname != null && !\"\".equals(confname.trim()) &&\n          cloudSolrClient.getZkStateReader().getZkClient().exists(\"/configs/\" + confname, true);\n\n      if (CollectionAdminParams.SYSTEM_COLL.equals(collectionName)) {\n        //do nothing\n      } else if (configExistsInZk) {\n        echo(\"Re-using existing configuration directory \"+confname);\n      } else if (confdir != null && !\"\".equals(confdir.trim())){\n        if (confname == null || \"\".equals(confname.trim())) {\n          confname = collectionName;\n        }\n        Path confPath = ZkConfigManager.getConfigsetPath(confdir,\n            configsetsDir);\n\n        echoIfVerbose(\"Uploading \" + confPath.toAbsolutePath().toString() +\n            \" for config \" + confname + \" to ZooKeeper at \" + cloudSolrClient.getZkHost(), cli);\n        ((ZkClientClusterStateProvider) cloudSolrClient.getClusterStateProvider()).uploadConfig(confPath, confname);\n      }\n\n      // since creating a collection is a heavy-weight operation, check for existence first\n      String collectionListUrl = baseUrl+\"/admin/collections?action=list\";\n      if (safeCheckCollectionExists(collectionListUrl, collectionName)) {\n        throw new IllegalStateException(\"\\nCollection '\"+collectionName+\n            \"' already exists!\\nChecked collection existence using Collections API command:\\n\"+\n            collectionListUrl);\n      }\n\n      // doesn't seem to exist ... try to create\n      String createCollectionUrl =\n          String.format(Locale.ROOT,\n              \"%s/admin/collections?action=CREATE&name=%s&numShards=%d&replicationFactor=%d&maxShardsPerNode=%d\",\n              baseUrl,\n              collectionName,\n              numShards,\n              replicationFactor,\n              maxShardsPerNode);\n      if (confname != null && !\"\".equals(confname.trim())) {\n        createCollectionUrl = createCollectionUrl + String.format(Locale.ROOT, \"&collection.configName=%s\", confname);\n      }\n\n      echoIfVerbose(\"\\nCreating new collection '\"+collectionName+\"' using command:\\n\"+createCollectionUrl+\"\\n\", cli);\n\n      Map<String,Object> json = null;\n      try {\n        json = getJson(createCollectionUrl);\n      } catch (SolrServerException sse) {\n        throw new Exception(\"Failed to create collection '\"+collectionName+\"' due to: \"+sse.getMessage());\n      }\n\n      if (cli.hasOption(\"verbose\")) {\n        CharArr arr = new CharArr();\n        new JSONWriter(arr, 2).write(json);\n        echo(arr.toString());\n      } else {\n        String endMessage = String.format(Locale.ROOT, \"Created collection '%s' with %d shard(s), %d replica(s)\",\n            collectionName, numShards, replicationFactor);\n        if (confname != null && !\"\".equals(confname.trim())) {\n          endMessage += String.format(Locale.ROOT, \" with config-set '%s'\", confname);\n        }\n\n        echo(endMessage);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c00aac053fdd75193eb8b6d45b64c26c3b586d5b":["55ed5a78f8a4b37108ac73a894a105db562d303e","c0ee0c7f6bcf49646748d46aee9383b68eb55c80"],"c304e97e7c1d472bc70e801b35ee78583916c6cd":["86d2df3ca94d97c62f70b0d321f5f597de2d3eb3","3a7809d1d753b67f48b1a706e17034bf8b624ea3"],"0f506150a6ebd43fb2833cdf2713e2d1d5bddbd6":["4ca20be81c9284c840498143264e583ccbb8525a"],"197bbedf08450ade98a11f4a0001448059666bec":["9c3a5cd533454e5bffcbedfceea9c1668dd586cf"],"bafca15d8e408346a67f4282ad1143b88023893b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15"],"3d1db6f36874f1979916ccb702329fbb09602af8":["bafca15d8e408346a67f4282ad1143b88023893b"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["560c18d71dad43d675158783c3840f8c80d6d39c","b79a5db147a1c6f95d1625ddbc3561ef56955225"],"688f23c47b3d5b61d795e3042013aa908716c068":["0f506150a6ebd43fb2833cdf2713e2d1d5bddbd6"],"3a7809d1d753b67f48b1a706e17034bf8b624ea3":["c00aac053fdd75193eb8b6d45b64c26c3b586d5b","86d2df3ca94d97c62f70b0d321f5f597de2d3eb3"],"3100fa57deee363537557f82c2b38812a2576acc":["9272a617a9cbebf86be127014bbbacd7cf8f8e83"],"1390137e395d2f07f9ba5b8c43d293befe84d563":["6c8a2521797f14d1d697a17a0069f5619cd211a6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d2638f781be724518ff6c2263d14a48cf6e68017":["6c8a2521797f14d1d697a17a0069f5619cd211a6","1390137e395d2f07f9ba5b8c43d293befe84d563"],"fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4":["9c3a5cd533454e5bffcbedfceea9c1668dd586cf","197bbedf08450ade98a11f4a0001448059666bec"],"86d2df3ca94d97c62f70b0d321f5f597de2d3eb3":["c0ee0c7f6bcf49646748d46aee9383b68eb55c80"],"560c18d71dad43d675158783c3840f8c80d6d39c":["86d2df3ca94d97c62f70b0d321f5f597de2d3eb3","c304e97e7c1d472bc70e801b35ee78583916c6cd"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["560c18d71dad43d675158783c3840f8c80d6d39c","b79a5db147a1c6f95d1625ddbc3561ef56955225"],"6c8a2521797f14d1d697a17a0069f5619cd211a6":["3d1db6f36874f1979916ccb702329fbb09602af8"],"28288370235ed02234a64753cdbf0c6ec096304a":["9c3a5cd533454e5bffcbedfceea9c1668dd586cf","197bbedf08450ade98a11f4a0001448059666bec"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["688f23c47b3d5b61d795e3042013aa908716c068","3100fa57deee363537557f82c2b38812a2576acc"],"b79a5db147a1c6f95d1625ddbc3561ef56955225":["560c18d71dad43d675158783c3840f8c80d6d39c"],"4ca20be81c9284c840498143264e583ccbb8525a":["e5cb964bc07f36b08873e376cd22afae94469862"],"e5cb964bc07f36b08873e376cd22afae94469862":["1390137e395d2f07f9ba5b8c43d293befe84d563"],"55ed5a78f8a4b37108ac73a894a105db562d303e":["fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4"],"727bb765ff2542275f6d31f67be18d7104bae148":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","9c3a5cd533454e5bffcbedfceea9c1668dd586cf"],"9272a617a9cbebf86be127014bbbacd7cf8f8e83":["688f23c47b3d5b61d795e3042013aa908716c068"],"9c3a5cd533454e5bffcbedfceea9c1668dd586cf":["3100fa57deee363537557f82c2b38812a2576acc"],"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15":["b79a5db147a1c6f95d1625ddbc3561ef56955225"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"],"c0ee0c7f6bcf49646748d46aee9383b68eb55c80":["28288370235ed02234a64753cdbf0c6ec096304a"]},"commit2Childs":{"c00aac053fdd75193eb8b6d45b64c26c3b586d5b":["3a7809d1d753b67f48b1a706e17034bf8b624ea3"],"c304e97e7c1d472bc70e801b35ee78583916c6cd":["560c18d71dad43d675158783c3840f8c80d6d39c"],"0f506150a6ebd43fb2833cdf2713e2d1d5bddbd6":["688f23c47b3d5b61d795e3042013aa908716c068"],"197bbedf08450ade98a11f4a0001448059666bec":["fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4","28288370235ed02234a64753cdbf0c6ec096304a"],"bafca15d8e408346a67f4282ad1143b88023893b":["3d1db6f36874f1979916ccb702329fbb09602af8"],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3d1db6f36874f1979916ccb702329fbb09602af8":["6c8a2521797f14d1d697a17a0069f5619cd211a6"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"688f23c47b3d5b61d795e3042013aa908716c068":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","9272a617a9cbebf86be127014bbbacd7cf8f8e83"],"3a7809d1d753b67f48b1a706e17034bf8b624ea3":["c304e97e7c1d472bc70e801b35ee78583916c6cd"],"3100fa57deee363537557f82c2b38812a2576acc":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","9c3a5cd533454e5bffcbedfceea9c1668dd586cf"],"1390137e395d2f07f9ba5b8c43d293befe84d563":["d2638f781be724518ff6c2263d14a48cf6e68017","e5cb964bc07f36b08873e376cd22afae94469862"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bafca15d8e408346a67f4282ad1143b88023893b"],"d2638f781be724518ff6c2263d14a48cf6e68017":[],"fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4":["55ed5a78f8a4b37108ac73a894a105db562d303e"],"86d2df3ca94d97c62f70b0d321f5f597de2d3eb3":["c304e97e7c1d472bc70e801b35ee78583916c6cd","3a7809d1d753b67f48b1a706e17034bf8b624ea3","560c18d71dad43d675158783c3840f8c80d6d39c"],"560c18d71dad43d675158783c3840f8c80d6d39c":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","b79a5db147a1c6f95d1625ddbc3561ef56955225"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[],"6c8a2521797f14d1d697a17a0069f5619cd211a6":["1390137e395d2f07f9ba5b8c43d293befe84d563","d2638f781be724518ff6c2263d14a48cf6e68017"],"28288370235ed02234a64753cdbf0c6ec096304a":["c0ee0c7f6bcf49646748d46aee9383b68eb55c80"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["727bb765ff2542275f6d31f67be18d7104bae148"],"b79a5db147a1c6f95d1625ddbc3561ef56955225":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15"],"4ca20be81c9284c840498143264e583ccbb8525a":["0f506150a6ebd43fb2833cdf2713e2d1d5bddbd6"],"55ed5a78f8a4b37108ac73a894a105db562d303e":["c00aac053fdd75193eb8b6d45b64c26c3b586d5b"],"e5cb964bc07f36b08873e376cd22afae94469862":["4ca20be81c9284c840498143264e583ccbb8525a"],"727bb765ff2542275f6d31f67be18d7104bae148":[],"9272a617a9cbebf86be127014bbbacd7cf8f8e83":["3100fa57deee363537557f82c2b38812a2576acc"],"9c3a5cd533454e5bffcbedfceea9c1668dd586cf":["197bbedf08450ade98a11f4a0001448059666bec","fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4","28288370235ed02234a64753cdbf0c6ec096304a","727bb765ff2542275f6d31f67be18d7104bae148"],"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"],"c0ee0c7f6bcf49646748d46aee9383b68eb55c80":["c00aac053fdd75193eb8b6d45b64c26c3b586d5b","86d2df3ca94d97c62f70b0d321f5f597de2d3eb3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","d2638f781be724518ff6c2263d14a48cf6e68017","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","727bb765ff2542275f6d31f67be18d7104bae148","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}