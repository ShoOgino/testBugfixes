{"path":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudDistribCmdsTest#checkShardConsistency(SolrParams).mjava","commits":[{"id":"0a29b6e8b148762c68adf55b9d2c2aa5ae411a5b","date":1576537086,"type":0,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudDistribCmdsTest#checkShardConsistency(SolrParams).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Inspects the cluster to determine all active shards/replicas for the default collection then,\n   * executes a <code>distrib=false</code> query using the specified params, and compares the resulting \n   * {@link SolrDocumentList}, failing if any replica does not agree with it's leader.\n   *\n   * @see #cluster\n   * @see CloudInspectUtil#showDiff \n   */\n  private void checkShardConsistency(final SolrParams params) throws Exception {\n    // TODO: refactor into static in CloudInspectUtil w/ DocCollection param?\n    // TODO: refactor to take in a BiFunction<QueryResponse,QueryResponse,Boolean> ?\n    \n    final SolrParams perReplicaParams = SolrParams.wrapDefaults(params(\"distrib\", \"false\"),\n                                                                params);\n    final DocCollection collection = cluster.getSolrClient().getZkStateReader()\n      .getClusterState().getCollection(cluster.getSolrClient().getDefaultCollection());\n    log.info(\"Checking shard consistency via: {}\", perReplicaParams);\n    for (Map.Entry<String,Slice> entry : collection.getActiveSlicesMap().entrySet()) {\n      final String shardName = entry.getKey();\n      final Slice slice = entry.getValue();\n      log.info(\"Checking: {} -> {}\", shardName, slice);\n      final Replica leader = entry.getValue().getLeader();\n      try (HttpSolrClient leaderClient = getHttpSolrClient(leader.getCoreUrl())) {\n        final SolrDocumentList leaderResults = leaderClient.query(perReplicaParams).getResults();\n        log.debug(\"Shard {}: Leader results: {}\", shardName, leaderResults);\n        for (Replica replica : slice) {\n          try (HttpSolrClient replicaClient = getHttpSolrClient(replica.getCoreUrl())) {\n            final SolrDocumentList replicaResults = replicaClient.query(perReplicaParams).getResults();\n            log.debug(\"Shard {}: Replica ({}) results: {}\", shardName, replica.getCoreName(), replicaResults);\n            assertEquals(\"inconsistency w/leader: shard=\" + shardName + \"core=\" + replica.getCoreName(),\n                         Collections.emptySet(),\n                         CloudInspectUtil.showDiff(leaderResults, replicaResults,\n                                                   shardName + \" leader: \" + leader.getCoreUrl(),\n                                                   shardName + \": \" + replica.getCoreUrl()));\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b945b8f5bba0303382bc69d60c0c287714f23328","date":1576586294,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudDistribCmdsTest#checkShardConsistency(SolrParams).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Inspects the cluster to determine all active shards/replicas for the default collection then,\n   * executes a <code>distrib=false</code> query using the specified params, and compares the resulting \n   * {@link SolrDocumentList}, failing if any replica does not agree with it's leader.\n   *\n   * @see #cluster\n   * @see CloudInspectUtil#showDiff \n   */\n  private void checkShardConsistency(final SolrParams params) throws Exception {\n    // TODO: refactor into static in CloudInspectUtil w/ DocCollection param?\n    // TODO: refactor to take in a BiFunction<QueryResponse,QueryResponse,Boolean> ?\n    \n    final SolrParams perReplicaParams = SolrParams.wrapDefaults(params(\"distrib\", \"false\"),\n                                                                params);\n    final DocCollection collection = cluster.getSolrClient().getZkStateReader()\n      .getClusterState().getCollection(cluster.getSolrClient().getDefaultCollection());\n    log.info(\"Checking shard consistency via: {}\", perReplicaParams);\n    for (Map.Entry<String,Slice> entry : collection.getActiveSlicesMap().entrySet()) {\n      final String shardName = entry.getKey();\n      final Slice slice = entry.getValue();\n      log.info(\"Checking: {} -> {}\", shardName, slice);\n      final Replica leader = entry.getValue().getLeader();\n      try (HttpSolrClient leaderClient = getHttpSolrClient(leader.getCoreUrl())) {\n        final SolrDocumentList leaderResults = leaderClient.query(perReplicaParams).getResults();\n        log.debug(\"Shard {}: Leader results: {}\", shardName, leaderResults);\n        for (Replica replica : slice) {\n          try (HttpSolrClient replicaClient = getHttpSolrClient(replica.getCoreUrl())) {\n            final SolrDocumentList replicaResults = replicaClient.query(perReplicaParams).getResults();\n            log.debug(\"Shard {}: Replica ({}) results: {}\", shardName, replica.getCoreName(), replicaResults);\n            assertEquals(\"inconsistency w/leader: shard=\" + shardName + \"core=\" + replica.getCoreName(),\n                         Collections.emptySet(),\n                         CloudInspectUtil.showDiff(leaderResults, replicaResults,\n                                                   shardName + \" leader: \" + leader.getCoreUrl(),\n                                                   shardName + \": \" + replica.getCoreUrl()));\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a966532d92cf9ba2856f15a8140151bb6b518e4b","date":1588290631,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudDistribCmdsTest#checkShardConsistency(SolrParams).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudDistribCmdsTest#checkShardConsistency(SolrParams).mjava","sourceNew":"  /**\n   * Inspects the cluster to determine all active shards/replicas for the default collection then,\n   * executes a <code>distrib=false</code> query using the specified params, and compares the resulting \n   * {@link SolrDocumentList}, failing if any replica does not agree with it's leader.\n   *\n   * @see #cluster\n   * @see CloudInspectUtil#showDiff \n   */\n  private void checkShardConsistency(final SolrParams params) throws Exception {\n    // TODO: refactor into static in CloudInspectUtil w/ DocCollection param?\n    // TODO: refactor to take in a BiFunction<QueryResponse,QueryResponse,Boolean> ?\n    \n    final SolrParams perReplicaParams = SolrParams.wrapDefaults(params(\"distrib\", \"false\"),\n                                                                params);\n    final DocCollection collection = cluster.getSolrClient().getZkStateReader()\n      .getClusterState().getCollection(cluster.getSolrClient().getDefaultCollection());\n    log.info(\"Checking shard consistency via: {}\", perReplicaParams);\n    for (Map.Entry<String,Slice> entry : collection.getActiveSlicesMap().entrySet()) {\n      final String shardName = entry.getKey();\n      final Slice slice = entry.getValue();\n      log.info(\"Checking: {} -> {}\", shardName, slice);\n      final Replica leader = entry.getValue().getLeader();\n      try (HttpSolrClient leaderClient = getHttpSolrClient(leader.getCoreUrl())) {\n        final SolrDocumentList leaderResults = leaderClient.query(perReplicaParams).getResults();\n        log.debug(\"Shard {}: Leader results: {}\", shardName, leaderResults);\n        for (Replica replica : slice) {\n          try (HttpSolrClient replicaClient = getHttpSolrClient(replica.getCoreUrl())) {\n            final SolrDocumentList replicaResults = replicaClient.query(perReplicaParams).getResults();\n            if (log.isDebugEnabled()) {\n              log.debug(\"Shard {}: Replica ({}) results: {}\", shardName, replica.getCoreName(), replicaResults);\n            }\n            assertEquals(\"inconsistency w/leader: shard=\" + shardName + \"core=\" + replica.getCoreName(),\n                         Collections.emptySet(),\n                         CloudInspectUtil.showDiff(leaderResults, replicaResults,\n                                                   shardName + \" leader: \" + leader.getCoreUrl(),\n                                                   shardName + \": \" + replica.getCoreUrl()));\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Inspects the cluster to determine all active shards/replicas for the default collection then,\n   * executes a <code>distrib=false</code> query using the specified params, and compares the resulting \n   * {@link SolrDocumentList}, failing if any replica does not agree with it's leader.\n   *\n   * @see #cluster\n   * @see CloudInspectUtil#showDiff \n   */\n  private void checkShardConsistency(final SolrParams params) throws Exception {\n    // TODO: refactor into static in CloudInspectUtil w/ DocCollection param?\n    // TODO: refactor to take in a BiFunction<QueryResponse,QueryResponse,Boolean> ?\n    \n    final SolrParams perReplicaParams = SolrParams.wrapDefaults(params(\"distrib\", \"false\"),\n                                                                params);\n    final DocCollection collection = cluster.getSolrClient().getZkStateReader()\n      .getClusterState().getCollection(cluster.getSolrClient().getDefaultCollection());\n    log.info(\"Checking shard consistency via: {}\", perReplicaParams);\n    for (Map.Entry<String,Slice> entry : collection.getActiveSlicesMap().entrySet()) {\n      final String shardName = entry.getKey();\n      final Slice slice = entry.getValue();\n      log.info(\"Checking: {} -> {}\", shardName, slice);\n      final Replica leader = entry.getValue().getLeader();\n      try (HttpSolrClient leaderClient = getHttpSolrClient(leader.getCoreUrl())) {\n        final SolrDocumentList leaderResults = leaderClient.query(perReplicaParams).getResults();\n        log.debug(\"Shard {}: Leader results: {}\", shardName, leaderResults);\n        for (Replica replica : slice) {\n          try (HttpSolrClient replicaClient = getHttpSolrClient(replica.getCoreUrl())) {\n            final SolrDocumentList replicaResults = replicaClient.query(perReplicaParams).getResults();\n            log.debug(\"Shard {}: Replica ({}) results: {}\", shardName, replica.getCoreName(), replicaResults);\n            assertEquals(\"inconsistency w/leader: shard=\" + shardName + \"core=\" + replica.getCoreName(),\n                         Collections.emptySet(),\n                         CloudInspectUtil.showDiff(leaderResults, replicaResults,\n                                                   shardName + \" leader: \" + leader.getCoreUrl(),\n                                                   shardName + \": \" + replica.getCoreUrl()));\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["0a29b6e8b148762c68adf55b9d2c2aa5ae411a5b"],"b945b8f5bba0303382bc69d60c0c287714f23328":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0a29b6e8b148762c68adf55b9d2c2aa5ae411a5b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a966532d92cf9ba2856f15a8140151bb6b518e4b"],"0a29b6e8b148762c68adf55b9d2c2aa5ae411a5b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b945b8f5bba0303382bc69d60c0c287714f23328","0a29b6e8b148762c68adf55b9d2c2aa5ae411a5b"],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b945b8f5bba0303382bc69d60c0c287714f23328":[],"0a29b6e8b148762c68adf55b9d2c2aa5ae411a5b":["a966532d92cf9ba2856f15a8140151bb6b518e4b","b945b8f5bba0303382bc69d60c0c287714f23328"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b945b8f5bba0303382bc69d60c0c287714f23328","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}