{"path":"lucene/test-framework/src/java/org/apache/lucene/geo/BaseGeoPointTestCase#testRectBoundariesAreInclusive().mjava","commits":[{"id":"3e21d7642ee7e0c00429964e5b47504602fe218c","date":1460897579,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/geo/BaseGeoPointTestCase#testRectBoundariesAreInclusive().mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/util/BaseGeoPointTestCase#testRectBoundariesAreInclusive().mjava","sourceNew":"  public void testRectBoundariesAreInclusive() throws Exception {\n    Rectangle rect;\n    // TODO: why this dateline leniency???\n    while (true) {\n      rect = randomRect(random().nextBoolean());\n      if (rect.crossesDateline() == false) {\n        break;\n      }\n    }\n    // this test works in quantized space: for testing inclusiveness of exact edges it must be aware of index-time quantization!\n    rect = new Rectangle(quantizeLat(rect.minLat), quantizeLat(rect.maxLat), quantizeLon(rect.minLon), quantizeLon(rect.maxLon));\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    // Else seeds may not reproduce:\n    iwc.setMergeScheduler(new SerialMergeScheduler());\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n    for(int x=0;x<3;x++) {\n      double lat;\n      if (x == 0) {\n        lat = rect.minLat;\n      } else if (x == 1) {\n        lat = quantizeLat((rect.minLat+rect.maxLat)/2.0);\n      } else {\n        lat = rect.maxLat;\n      }\n      for(int y=0;y<3;y++) {\n        double lon;\n        if (y == 0) {\n          lon = rect.minLon;\n        } else if (y == 1) {\n          if (x == 1) {\n            continue;\n          }\n          lon = quantizeLon((rect.minLon+rect.maxLon)/2.0);\n        } else {\n          lon = rect.maxLon;\n        }\n\n        Document doc = new Document();\n        addPointToDoc(FIELD_NAME, doc, lat, lon);\n        w.addDocument(doc);\n      }\n    }\n    IndexReader r = w.getReader();\n    IndexSearcher s = newSearcher(r, false);\n    // exact edge cases\n    assertEquals(8, s.count(newRectQuery(FIELD_NAME, rect.minLat, rect.maxLat, rect.minLon, rect.maxLon)));\n    \n    // expand 1 ulp in each direction if possible and test a slightly larger box!\n    if (rect.minLat != -90) {\n      assertEquals(8, s.count(newRectQuery(FIELD_NAME, Math.nextDown(rect.minLat), rect.maxLat, rect.minLon, rect.maxLon)));\n    }\n    if (rect.maxLat != 90) {\n      assertEquals(8, s.count(newRectQuery(FIELD_NAME, rect.minLat, Math.nextUp(rect.maxLat), rect.minLon, rect.maxLon)));\n    }\n    if (rect.minLon != -180) {\n      assertEquals(8, s.count(newRectQuery(FIELD_NAME, rect.minLat, rect.maxLat, Math.nextDown(rect.minLon), rect.maxLon)));\n    }\n    if (rect.maxLon != 180) {\n      assertEquals(8, s.count(newRectQuery(FIELD_NAME, rect.minLat, rect.maxLat, rect.minLon, Math.nextUp(rect.maxLon))));\n    }\n    \n    // now shrink 1 ulp in each direction if possible: it should not include bogus stuff\n    // we can't shrink if values are already at extremes, and\n    // we can't do this if rectangle is actually a line or we will create a cross-dateline query\n    if (rect.minLat != 90 && rect.maxLat != -90 && rect.minLon != 80 && rect.maxLon != -180 && rect.minLon != rect.maxLon) {\n      // note we put points on \"sides\" not just \"corners\" so we just shrink all 4 at once for now: it should exclude all points!\n      assertEquals(0, s.count(newRectQuery(FIELD_NAME, Math.nextUp(rect.minLat), \n                                                     Math.nextDown(rect.maxLat), \n                                                     Math.nextUp(rect.minLon), \n                                                     Math.nextDown(rect.maxLon))));\n    }\n\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testRectBoundariesAreInclusive() throws Exception {\n    Rectangle rect;\n    // TODO: why this dateline leniency???\n    while (true) {\n      rect = randomRect(random().nextBoolean());\n      if (rect.crossesDateline() == false) {\n        break;\n      }\n    }\n    // this test works in quantized space: for testing inclusiveness of exact edges it must be aware of index-time quantization!\n    rect = new Rectangle(quantizeLat(rect.minLat), quantizeLat(rect.maxLat), quantizeLon(rect.minLon), quantizeLon(rect.maxLon));\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    // Else seeds may not reproduce:\n    iwc.setMergeScheduler(new SerialMergeScheduler());\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n    for(int x=0;x<3;x++) {\n      double lat;\n      if (x == 0) {\n        lat = rect.minLat;\n      } else if (x == 1) {\n        lat = quantizeLat((rect.minLat+rect.maxLat)/2.0);\n      } else {\n        lat = rect.maxLat;\n      }\n      for(int y=0;y<3;y++) {\n        double lon;\n        if (y == 0) {\n          lon = rect.minLon;\n        } else if (y == 1) {\n          if (x == 1) {\n            continue;\n          }\n          lon = quantizeLon((rect.minLon+rect.maxLon)/2.0);\n        } else {\n          lon = rect.maxLon;\n        }\n\n        Document doc = new Document();\n        addPointToDoc(FIELD_NAME, doc, lat, lon);\n        w.addDocument(doc);\n      }\n    }\n    IndexReader r = w.getReader();\n    IndexSearcher s = newSearcher(r, false);\n    // exact edge cases\n    assertEquals(8, s.count(newRectQuery(FIELD_NAME, rect.minLat, rect.maxLat, rect.minLon, rect.maxLon)));\n    \n    // expand 1 ulp in each direction if possible and test a slightly larger box!\n    if (rect.minLat != -90) {\n      assertEquals(8, s.count(newRectQuery(FIELD_NAME, Math.nextDown(rect.minLat), rect.maxLat, rect.minLon, rect.maxLon)));\n    }\n    if (rect.maxLat != 90) {\n      assertEquals(8, s.count(newRectQuery(FIELD_NAME, rect.minLat, Math.nextUp(rect.maxLat), rect.minLon, rect.maxLon)));\n    }\n    if (rect.minLon != -180) {\n      assertEquals(8, s.count(newRectQuery(FIELD_NAME, rect.minLat, rect.maxLat, Math.nextDown(rect.minLon), rect.maxLon)));\n    }\n    if (rect.maxLon != 180) {\n      assertEquals(8, s.count(newRectQuery(FIELD_NAME, rect.minLat, rect.maxLat, rect.minLon, Math.nextUp(rect.maxLon))));\n    }\n    \n    // now shrink 1 ulp in each direction if possible: it should not include bogus stuff\n    // we can't shrink if values are already at extremes, and\n    // we can't do this if rectangle is actually a line or we will create a cross-dateline query\n    if (rect.minLat != 90 && rect.maxLat != -90 && rect.minLon != 80 && rect.maxLon != -180 && rect.minLon != rect.maxLon) {\n      // note we put points on \"sides\" not just \"corners\" so we just shrink all 4 at once for now: it should exclude all points!\n      assertEquals(0, s.count(newRectQuery(FIELD_NAME, Math.nextUp(rect.minLat), \n                                                     Math.nextDown(rect.maxLat), \n                                                     Math.nextUp(rect.minLon), \n                                                     Math.nextDown(rect.maxLon))));\n    }\n\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8cb57c50beb99a1245256e866350af8e5ea1f36","date":1460921840,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/geo/BaseGeoPointTestCase#testRectBoundariesAreInclusive().mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/util/BaseGeoPointTestCase#testRectBoundariesAreInclusive().mjava","sourceNew":"  public void testRectBoundariesAreInclusive() throws Exception {\n    Rectangle rect;\n    // TODO: why this dateline leniency???\n    while (true) {\n      rect = randomRect(random().nextBoolean());\n      if (rect.crossesDateline() == false) {\n        break;\n      }\n    }\n    // this test works in quantized space: for testing inclusiveness of exact edges it must be aware of index-time quantization!\n    rect = new Rectangle(quantizeLat(rect.minLat), quantizeLat(rect.maxLat), quantizeLon(rect.minLon), quantizeLon(rect.maxLon));\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    // Else seeds may not reproduce:\n    iwc.setMergeScheduler(new SerialMergeScheduler());\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n    for(int x=0;x<3;x++) {\n      double lat;\n      if (x == 0) {\n        lat = rect.minLat;\n      } else if (x == 1) {\n        lat = quantizeLat((rect.minLat+rect.maxLat)/2.0);\n      } else {\n        lat = rect.maxLat;\n      }\n      for(int y=0;y<3;y++) {\n        double lon;\n        if (y == 0) {\n          lon = rect.minLon;\n        } else if (y == 1) {\n          if (x == 1) {\n            continue;\n          }\n          lon = quantizeLon((rect.minLon+rect.maxLon)/2.0);\n        } else {\n          lon = rect.maxLon;\n        }\n\n        Document doc = new Document();\n        addPointToDoc(FIELD_NAME, doc, lat, lon);\n        w.addDocument(doc);\n      }\n    }\n    IndexReader r = w.getReader();\n    IndexSearcher s = newSearcher(r, false);\n    // exact edge cases\n    assertEquals(8, s.count(newRectQuery(FIELD_NAME, rect.minLat, rect.maxLat, rect.minLon, rect.maxLon)));\n    \n    // expand 1 ulp in each direction if possible and test a slightly larger box!\n    if (rect.minLat != -90) {\n      assertEquals(8, s.count(newRectQuery(FIELD_NAME, Math.nextDown(rect.minLat), rect.maxLat, rect.minLon, rect.maxLon)));\n    }\n    if (rect.maxLat != 90) {\n      assertEquals(8, s.count(newRectQuery(FIELD_NAME, rect.minLat, Math.nextUp(rect.maxLat), rect.minLon, rect.maxLon)));\n    }\n    if (rect.minLon != -180) {\n      assertEquals(8, s.count(newRectQuery(FIELD_NAME, rect.minLat, rect.maxLat, Math.nextDown(rect.minLon), rect.maxLon)));\n    }\n    if (rect.maxLon != 180) {\n      assertEquals(8, s.count(newRectQuery(FIELD_NAME, rect.minLat, rect.maxLat, rect.minLon, Math.nextUp(rect.maxLon))));\n    }\n    \n    // now shrink 1 ulp in each direction if possible: it should not include bogus stuff\n    // we can't shrink if values are already at extremes, and\n    // we can't do this if rectangle is actually a line or we will create a cross-dateline query\n    if (rect.minLat != 90 && rect.maxLat != -90 && rect.minLon != 80 && rect.maxLon != -180 && rect.minLon != rect.maxLon) {\n      // note we put points on \"sides\" not just \"corners\" so we just shrink all 4 at once for now: it should exclude all points!\n      assertEquals(0, s.count(newRectQuery(FIELD_NAME, Math.nextUp(rect.minLat), \n                                                     Math.nextDown(rect.maxLat), \n                                                     Math.nextUp(rect.minLon), \n                                                     Math.nextDown(rect.maxLon))));\n    }\n\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testRectBoundariesAreInclusive() throws Exception {\n    Rectangle rect;\n    // TODO: why this dateline leniency???\n    while (true) {\n      rect = randomRect(random().nextBoolean());\n      if (rect.crossesDateline() == false) {\n        break;\n      }\n    }\n    // this test works in quantized space: for testing inclusiveness of exact edges it must be aware of index-time quantization!\n    rect = new Rectangle(quantizeLat(rect.minLat), quantizeLat(rect.maxLat), quantizeLon(rect.minLon), quantizeLon(rect.maxLon));\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    // Else seeds may not reproduce:\n    iwc.setMergeScheduler(new SerialMergeScheduler());\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n    for(int x=0;x<3;x++) {\n      double lat;\n      if (x == 0) {\n        lat = rect.minLat;\n      } else if (x == 1) {\n        lat = quantizeLat((rect.minLat+rect.maxLat)/2.0);\n      } else {\n        lat = rect.maxLat;\n      }\n      for(int y=0;y<3;y++) {\n        double lon;\n        if (y == 0) {\n          lon = rect.minLon;\n        } else if (y == 1) {\n          if (x == 1) {\n            continue;\n          }\n          lon = quantizeLon((rect.minLon+rect.maxLon)/2.0);\n        } else {\n          lon = rect.maxLon;\n        }\n\n        Document doc = new Document();\n        addPointToDoc(FIELD_NAME, doc, lat, lon);\n        w.addDocument(doc);\n      }\n    }\n    IndexReader r = w.getReader();\n    IndexSearcher s = newSearcher(r, false);\n    // exact edge cases\n    assertEquals(8, s.count(newRectQuery(FIELD_NAME, rect.minLat, rect.maxLat, rect.minLon, rect.maxLon)));\n    \n    // expand 1 ulp in each direction if possible and test a slightly larger box!\n    if (rect.minLat != -90) {\n      assertEquals(8, s.count(newRectQuery(FIELD_NAME, Math.nextDown(rect.minLat), rect.maxLat, rect.minLon, rect.maxLon)));\n    }\n    if (rect.maxLat != 90) {\n      assertEquals(8, s.count(newRectQuery(FIELD_NAME, rect.minLat, Math.nextUp(rect.maxLat), rect.minLon, rect.maxLon)));\n    }\n    if (rect.minLon != -180) {\n      assertEquals(8, s.count(newRectQuery(FIELD_NAME, rect.minLat, rect.maxLat, Math.nextDown(rect.minLon), rect.maxLon)));\n    }\n    if (rect.maxLon != 180) {\n      assertEquals(8, s.count(newRectQuery(FIELD_NAME, rect.minLat, rect.maxLat, rect.minLon, Math.nextUp(rect.maxLon))));\n    }\n    \n    // now shrink 1 ulp in each direction if possible: it should not include bogus stuff\n    // we can't shrink if values are already at extremes, and\n    // we can't do this if rectangle is actually a line or we will create a cross-dateline query\n    if (rect.minLat != 90 && rect.maxLat != -90 && rect.minLon != 80 && rect.maxLon != -180 && rect.minLon != rect.maxLon) {\n      // note we put points on \"sides\" not just \"corners\" so we just shrink all 4 at once for now: it should exclude all points!\n      assertEquals(0, s.count(newRectQuery(FIELD_NAME, Math.nextUp(rect.minLat), \n                                                     Math.nextDown(rect.maxLat), \n                                                     Math.nextUp(rect.minLon), \n                                                     Math.nextDown(rect.maxLon))));\n    }\n\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3542cf82b8acd1e9ff2ee90fb0bf35e08698a1c2","date":1460953142,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/geo/BaseGeoPointTestCase#testRectBoundariesAreInclusive().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/geo/BaseGeoPointTestCase#testRectBoundariesAreInclusive().mjava","sourceNew":"  public void testRectBoundariesAreInclusive() throws Exception {\n    Rectangle rect;\n    // TODO: why this dateline leniency???\n    while (true) {\n      rect = nextBox();\n      if (rect.crossesDateline() == false) {\n        break;\n      }\n    }\n    // this test works in quantized space: for testing inclusiveness of exact edges it must be aware of index-time quantization!\n    rect = new Rectangle(quantizeLat(rect.minLat), quantizeLat(rect.maxLat), quantizeLon(rect.minLon), quantizeLon(rect.maxLon));\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    // Else seeds may not reproduce:\n    iwc.setMergeScheduler(new SerialMergeScheduler());\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n    for(int x=0;x<3;x++) {\n      double lat;\n      if (x == 0) {\n        lat = rect.minLat;\n      } else if (x == 1) {\n        lat = quantizeLat((rect.minLat+rect.maxLat)/2.0);\n      } else {\n        lat = rect.maxLat;\n      }\n      for(int y=0;y<3;y++) {\n        double lon;\n        if (y == 0) {\n          lon = rect.minLon;\n        } else if (y == 1) {\n          if (x == 1) {\n            continue;\n          }\n          lon = quantizeLon((rect.minLon+rect.maxLon)/2.0);\n        } else {\n          lon = rect.maxLon;\n        }\n\n        Document doc = new Document();\n        addPointToDoc(FIELD_NAME, doc, lat, lon);\n        w.addDocument(doc);\n      }\n    }\n    IndexReader r = w.getReader();\n    IndexSearcher s = newSearcher(r, false);\n    // exact edge cases\n    assertEquals(8, s.count(newRectQuery(FIELD_NAME, rect.minLat, rect.maxLat, rect.minLon, rect.maxLon)));\n    \n    // expand 1 ulp in each direction if possible and test a slightly larger box!\n    if (rect.minLat != -90) {\n      assertEquals(8, s.count(newRectQuery(FIELD_NAME, Math.nextDown(rect.minLat), rect.maxLat, rect.minLon, rect.maxLon)));\n    }\n    if (rect.maxLat != 90) {\n      assertEquals(8, s.count(newRectQuery(FIELD_NAME, rect.minLat, Math.nextUp(rect.maxLat), rect.minLon, rect.maxLon)));\n    }\n    if (rect.minLon != -180) {\n      assertEquals(8, s.count(newRectQuery(FIELD_NAME, rect.minLat, rect.maxLat, Math.nextDown(rect.minLon), rect.maxLon)));\n    }\n    if (rect.maxLon != 180) {\n      assertEquals(8, s.count(newRectQuery(FIELD_NAME, rect.minLat, rect.maxLat, rect.minLon, Math.nextUp(rect.maxLon))));\n    }\n    \n    // now shrink 1 ulp in each direction if possible: it should not include bogus stuff\n    // we can't shrink if values are already at extremes, and\n    // we can't do this if rectangle is actually a line or we will create a cross-dateline query\n    if (rect.minLat != 90 && rect.maxLat != -90 && rect.minLon != 80 && rect.maxLon != -180 && rect.minLon != rect.maxLon) {\n      // note we put points on \"sides\" not just \"corners\" so we just shrink all 4 at once for now: it should exclude all points!\n      assertEquals(0, s.count(newRectQuery(FIELD_NAME, Math.nextUp(rect.minLat), \n                                                     Math.nextDown(rect.maxLat), \n                                                     Math.nextUp(rect.minLon), \n                                                     Math.nextDown(rect.maxLon))));\n    }\n\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testRectBoundariesAreInclusive() throws Exception {\n    Rectangle rect;\n    // TODO: why this dateline leniency???\n    while (true) {\n      rect = randomRect(random().nextBoolean());\n      if (rect.crossesDateline() == false) {\n        break;\n      }\n    }\n    // this test works in quantized space: for testing inclusiveness of exact edges it must be aware of index-time quantization!\n    rect = new Rectangle(quantizeLat(rect.minLat), quantizeLat(rect.maxLat), quantizeLon(rect.minLon), quantizeLon(rect.maxLon));\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    // Else seeds may not reproduce:\n    iwc.setMergeScheduler(new SerialMergeScheduler());\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n    for(int x=0;x<3;x++) {\n      double lat;\n      if (x == 0) {\n        lat = rect.minLat;\n      } else if (x == 1) {\n        lat = quantizeLat((rect.minLat+rect.maxLat)/2.0);\n      } else {\n        lat = rect.maxLat;\n      }\n      for(int y=0;y<3;y++) {\n        double lon;\n        if (y == 0) {\n          lon = rect.minLon;\n        } else if (y == 1) {\n          if (x == 1) {\n            continue;\n          }\n          lon = quantizeLon((rect.minLon+rect.maxLon)/2.0);\n        } else {\n          lon = rect.maxLon;\n        }\n\n        Document doc = new Document();\n        addPointToDoc(FIELD_NAME, doc, lat, lon);\n        w.addDocument(doc);\n      }\n    }\n    IndexReader r = w.getReader();\n    IndexSearcher s = newSearcher(r, false);\n    // exact edge cases\n    assertEquals(8, s.count(newRectQuery(FIELD_NAME, rect.minLat, rect.maxLat, rect.minLon, rect.maxLon)));\n    \n    // expand 1 ulp in each direction if possible and test a slightly larger box!\n    if (rect.minLat != -90) {\n      assertEquals(8, s.count(newRectQuery(FIELD_NAME, Math.nextDown(rect.minLat), rect.maxLat, rect.minLon, rect.maxLon)));\n    }\n    if (rect.maxLat != 90) {\n      assertEquals(8, s.count(newRectQuery(FIELD_NAME, rect.minLat, Math.nextUp(rect.maxLat), rect.minLon, rect.maxLon)));\n    }\n    if (rect.minLon != -180) {\n      assertEquals(8, s.count(newRectQuery(FIELD_NAME, rect.minLat, rect.maxLat, Math.nextDown(rect.minLon), rect.maxLon)));\n    }\n    if (rect.maxLon != 180) {\n      assertEquals(8, s.count(newRectQuery(FIELD_NAME, rect.minLat, rect.maxLat, rect.minLon, Math.nextUp(rect.maxLon))));\n    }\n    \n    // now shrink 1 ulp in each direction if possible: it should not include bogus stuff\n    // we can't shrink if values are already at extremes, and\n    // we can't do this if rectangle is actually a line or we will create a cross-dateline query\n    if (rect.minLat != 90 && rect.maxLat != -90 && rect.minLon != 80 && rect.maxLon != -180 && rect.minLon != rect.maxLon) {\n      // note we put points on \"sides\" not just \"corners\" so we just shrink all 4 at once for now: it should exclude all points!\n      assertEquals(0, s.count(newRectQuery(FIELD_NAME, Math.nextUp(rect.minLat), \n                                                     Math.nextDown(rect.maxLat), \n                                                     Math.nextUp(rect.minLon), \n                                                     Math.nextDown(rect.maxLon))));\n    }\n\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"713122036535651642e6d4fe57ce12b449e18473","date":1461000510,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/geo/BaseGeoPointTestCase#testRectBoundariesAreInclusive().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/geo/BaseGeoPointTestCase#testRectBoundariesAreInclusive().mjava","sourceNew":"  public void testRectBoundariesAreInclusive() throws Exception {\n    Rectangle rect;\n    // TODO: why this dateline leniency???\n    while (true) {\n      rect = nextBox();\n      if (rect.crossesDateline() == false) {\n        break;\n      }\n    }\n    // this test works in quantized space: for testing inclusiveness of exact edges it must be aware of index-time quantization!\n    rect = new Rectangle(quantizeLat(rect.minLat), quantizeLat(rect.maxLat), quantizeLon(rect.minLon), quantizeLon(rect.maxLon));\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    // Else seeds may not reproduce:\n    iwc.setMergeScheduler(new SerialMergeScheduler());\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n    for(int x=0;x<3;x++) {\n      double lat;\n      if (x == 0) {\n        lat = rect.minLat;\n      } else if (x == 1) {\n        lat = quantizeLat((rect.minLat+rect.maxLat)/2.0);\n      } else {\n        lat = rect.maxLat;\n      }\n      for(int y=0;y<3;y++) {\n        double lon;\n        if (y == 0) {\n          lon = rect.minLon;\n        } else if (y == 1) {\n          if (x == 1) {\n            continue;\n          }\n          lon = quantizeLon((rect.minLon+rect.maxLon)/2.0);\n        } else {\n          lon = rect.maxLon;\n        }\n\n        Document doc = new Document();\n        addPointToDoc(FIELD_NAME, doc, lat, lon);\n        w.addDocument(doc);\n      }\n    }\n    IndexReader r = w.getReader();\n    IndexSearcher s = newSearcher(r, false);\n    // exact edge cases\n    assertEquals(8, s.count(newRectQuery(FIELD_NAME, rect.minLat, rect.maxLat, rect.minLon, rect.maxLon)));\n    \n    // expand 1 ulp in each direction if possible and test a slightly larger box!\n    if (rect.minLat != -90) {\n      assertEquals(8, s.count(newRectQuery(FIELD_NAME, Math.nextDown(rect.minLat), rect.maxLat, rect.minLon, rect.maxLon)));\n    }\n    if (rect.maxLat != 90) {\n      assertEquals(8, s.count(newRectQuery(FIELD_NAME, rect.minLat, Math.nextUp(rect.maxLat), rect.minLon, rect.maxLon)));\n    }\n    if (rect.minLon != -180) {\n      assertEquals(8, s.count(newRectQuery(FIELD_NAME, rect.minLat, rect.maxLat, Math.nextDown(rect.minLon), rect.maxLon)));\n    }\n    if (rect.maxLon != 180) {\n      assertEquals(8, s.count(newRectQuery(FIELD_NAME, rect.minLat, rect.maxLat, rect.minLon, Math.nextUp(rect.maxLon))));\n    }\n    \n    // now shrink 1 ulp in each direction if possible: it should not include bogus stuff\n    // we can't shrink if values are already at extremes, and\n    // we can't do this if rectangle is actually a line or we will create a cross-dateline query\n    if (rect.minLat != 90 && rect.maxLat != -90 && rect.minLon != 80 && rect.maxLon != -180 && rect.minLon != rect.maxLon) {\n      // note we put points on \"sides\" not just \"corners\" so we just shrink all 4 at once for now: it should exclude all points!\n      assertEquals(0, s.count(newRectQuery(FIELD_NAME, Math.nextUp(rect.minLat), \n                                                     Math.nextDown(rect.maxLat), \n                                                     Math.nextUp(rect.minLon), \n                                                     Math.nextDown(rect.maxLon))));\n    }\n\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testRectBoundariesAreInclusive() throws Exception {\n    Rectangle rect;\n    // TODO: why this dateline leniency???\n    while (true) {\n      rect = randomRect(random().nextBoolean());\n      if (rect.crossesDateline() == false) {\n        break;\n      }\n    }\n    // this test works in quantized space: for testing inclusiveness of exact edges it must be aware of index-time quantization!\n    rect = new Rectangle(quantizeLat(rect.minLat), quantizeLat(rect.maxLat), quantizeLon(rect.minLon), quantizeLon(rect.maxLon));\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    // Else seeds may not reproduce:\n    iwc.setMergeScheduler(new SerialMergeScheduler());\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n    for(int x=0;x<3;x++) {\n      double lat;\n      if (x == 0) {\n        lat = rect.minLat;\n      } else if (x == 1) {\n        lat = quantizeLat((rect.minLat+rect.maxLat)/2.0);\n      } else {\n        lat = rect.maxLat;\n      }\n      for(int y=0;y<3;y++) {\n        double lon;\n        if (y == 0) {\n          lon = rect.minLon;\n        } else if (y == 1) {\n          if (x == 1) {\n            continue;\n          }\n          lon = quantizeLon((rect.minLon+rect.maxLon)/2.0);\n        } else {\n          lon = rect.maxLon;\n        }\n\n        Document doc = new Document();\n        addPointToDoc(FIELD_NAME, doc, lat, lon);\n        w.addDocument(doc);\n      }\n    }\n    IndexReader r = w.getReader();\n    IndexSearcher s = newSearcher(r, false);\n    // exact edge cases\n    assertEquals(8, s.count(newRectQuery(FIELD_NAME, rect.minLat, rect.maxLat, rect.minLon, rect.maxLon)));\n    \n    // expand 1 ulp in each direction if possible and test a slightly larger box!\n    if (rect.minLat != -90) {\n      assertEquals(8, s.count(newRectQuery(FIELD_NAME, Math.nextDown(rect.minLat), rect.maxLat, rect.minLon, rect.maxLon)));\n    }\n    if (rect.maxLat != 90) {\n      assertEquals(8, s.count(newRectQuery(FIELD_NAME, rect.minLat, Math.nextUp(rect.maxLat), rect.minLon, rect.maxLon)));\n    }\n    if (rect.minLon != -180) {\n      assertEquals(8, s.count(newRectQuery(FIELD_NAME, rect.minLat, rect.maxLat, Math.nextDown(rect.minLon), rect.maxLon)));\n    }\n    if (rect.maxLon != 180) {\n      assertEquals(8, s.count(newRectQuery(FIELD_NAME, rect.minLat, rect.maxLat, rect.minLon, Math.nextUp(rect.maxLon))));\n    }\n    \n    // now shrink 1 ulp in each direction if possible: it should not include bogus stuff\n    // we can't shrink if values are already at extremes, and\n    // we can't do this if rectangle is actually a line or we will create a cross-dateline query\n    if (rect.minLat != 90 && rect.maxLat != -90 && rect.minLon != 80 && rect.maxLon != -180 && rect.minLon != rect.maxLon) {\n      // note we put points on \"sides\" not just \"corners\" so we just shrink all 4 at once for now: it should exclude all points!\n      assertEquals(0, s.count(newRectQuery(FIELD_NAME, Math.nextUp(rect.minLat), \n                                                     Math.nextDown(rect.maxLat), \n                                                     Math.nextUp(rect.minLon), \n                                                     Math.nextDown(rect.maxLon))));\n    }\n\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"713122036535651642e6d4fe57ce12b449e18473":["f8cb57c50beb99a1245256e866350af8e5ea1f36","3542cf82b8acd1e9ff2ee90fb0bf35e08698a1c2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3542cf82b8acd1e9ff2ee90fb0bf35e08698a1c2":["f8cb57c50beb99a1245256e866350af8e5ea1f36"],"3e21d7642ee7e0c00429964e5b47504602fe218c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f8cb57c50beb99a1245256e866350af8e5ea1f36":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3e21d7642ee7e0c00429964e5b47504602fe218c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["713122036535651642e6d4fe57ce12b449e18473"]},"commit2Childs":{"713122036535651642e6d4fe57ce12b449e18473":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3e21d7642ee7e0c00429964e5b47504602fe218c","f8cb57c50beb99a1245256e866350af8e5ea1f36"],"3542cf82b8acd1e9ff2ee90fb0bf35e08698a1c2":["713122036535651642e6d4fe57ce12b449e18473"],"3e21d7642ee7e0c00429964e5b47504602fe218c":["f8cb57c50beb99a1245256e866350af8e5ea1f36"],"f8cb57c50beb99a1245256e866350af8e5ea1f36":["713122036535651642e6d4fe57ce12b449e18473","3542cf82b8acd1e9ff2ee90fb0bf35e08698a1c2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}