{"path":"src/java/org/apache/lucene/analysis/MappingCharFilter#read().mjava","commits":[{"id":"cd27af5c226d98a7c6378c388a67a3bff7c0b3a2","date":1245784531,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/analysis/MappingCharFilter#read().mjava","pathOld":"/dev/null","sourceNew":"  public int read() throws IOException {\n    while(true) {\n      if (replacement != null && charPointer < replacement.length()) {\n        return replacement.charAt(charPointer++);\n      }\n\n      int firstChar = nextChar();\n      if (firstChar == -1) return -1;\n      NormalizeCharMap nm = normMap.submap != null ?\n        (NormalizeCharMap)normMap.submap.get(Character.valueOf((char) firstChar)) : null;\n      if (nm == null) return firstChar;\n      NormalizeCharMap result = match(nm);\n      if (result == null) return firstChar;\n      replacement = result.normStr;\n      charPointer = 0;\n      if (result.diff != 0) {\n        int prevCumulativeDiff = getLastCumulativeDiff();\n        if (result.diff < 0) {\n          for(int i = 0; i < -result.diff ; i++)\n            addOffCorrectMap(nextCharCounter + i - prevCumulativeDiff, prevCumulativeDiff - 1 - i);\n        } else {\n          addOffCorrectMap(nextCharCounter - result.diff - prevCumulativeDiff, prevCumulativeDiff + result.diff);\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84851fda840d985baf8ca736613e357a623597e8","date":1246359019,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/analysis/MappingCharFilter#read().mjava","pathOld":"src/java/org/apache/lucene/analysis/MappingCharFilter#read().mjava","sourceNew":"  public int read() throws IOException {\n    while(true) {\n      if (replacement != null && charPointer < replacement.length()) {\n        return replacement.charAt(charPointer++);\n      }\n\n      int firstChar = nextChar();\n      if (firstChar == -1) return -1;\n      NormalizeCharMap nm = normMap.submap != null ?\n        (NormalizeCharMap)normMap.submap.get(CharacterCache.valueOf((char) firstChar)) : null;\n      if (nm == null) return firstChar;\n      NormalizeCharMap result = match(nm);\n      if (result == null) return firstChar;\n      replacement = result.normStr;\n      charPointer = 0;\n      if (result.diff != 0) {\n        int prevCumulativeDiff = getLastCumulativeDiff();\n        if (result.diff < 0) {\n          for(int i = 0; i < -result.diff ; i++)\n            addOffCorrectMap(nextCharCounter + i - prevCumulativeDiff, prevCumulativeDiff - 1 - i);\n        } else {\n          addOffCorrectMap(nextCharCounter - result.diff - prevCumulativeDiff, prevCumulativeDiff + result.diff);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public int read() throws IOException {\n    while(true) {\n      if (replacement != null && charPointer < replacement.length()) {\n        return replacement.charAt(charPointer++);\n      }\n\n      int firstChar = nextChar();\n      if (firstChar == -1) return -1;\n      NormalizeCharMap nm = normMap.submap != null ?\n        (NormalizeCharMap)normMap.submap.get(Character.valueOf((char) firstChar)) : null;\n      if (nm == null) return firstChar;\n      NormalizeCharMap result = match(nm);\n      if (result == null) return firstChar;\n      replacement = result.normStr;\n      charPointer = 0;\n      if (result.diff != 0) {\n        int prevCumulativeDiff = getLastCumulativeDiff();\n        if (result.diff < 0) {\n          for(int i = 0; i < -result.diff ; i++)\n            addOffCorrectMap(nextCharCounter + i - prevCumulativeDiff, prevCumulativeDiff - 1 - i);\n        } else {\n          addOffCorrectMap(nextCharCounter - result.diff - prevCumulativeDiff, prevCumulativeDiff + result.diff);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"64af8690a948c97feaa9e2844a0c7051034f153d","date":1255862276,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/analysis/MappingCharFilter#read().mjava","pathOld":"src/java/org/apache/lucene/analysis/MappingCharFilter#read().mjava","sourceNew":"  public int read() throws IOException {\n    while(true) {\n      if (replacement != null && charPointer < replacement.length()) {\n        return replacement.charAt(charPointer++);\n      }\n\n      int firstChar = nextChar();\n      if (firstChar == -1) return -1;\n      NormalizeCharMap nm = normMap.submap != null ?\n        normMap.submap.get(Character.valueOf((char) firstChar)) : null;\n      if (nm == null) return firstChar;\n      NormalizeCharMap result = match(nm);\n      if (result == null) return firstChar;\n      replacement = result.normStr;\n      charPointer = 0;\n      if (result.diff != 0) {\n        int prevCumulativeDiff = getLastCumulativeDiff();\n        if (result.diff < 0) {\n          for(int i = 0; i < -result.diff ; i++)\n            addOffCorrectMap(nextCharCounter + i - prevCumulativeDiff, prevCumulativeDiff - 1 - i);\n        } else {\n          addOffCorrectMap(nextCharCounter - result.diff - prevCumulativeDiff, prevCumulativeDiff + result.diff);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public int read() throws IOException {\n    while(true) {\n      if (replacement != null && charPointer < replacement.length()) {\n        return replacement.charAt(charPointer++);\n      }\n\n      int firstChar = nextChar();\n      if (firstChar == -1) return -1;\n      NormalizeCharMap nm = normMap.submap != null ?\n        (NormalizeCharMap)normMap.submap.get(CharacterCache.valueOf((char) firstChar)) : null;\n      if (nm == null) return firstChar;\n      NormalizeCharMap result = match(nm);\n      if (result == null) return firstChar;\n      replacement = result.normStr;\n      charPointer = 0;\n      if (result.diff != 0) {\n        int prevCumulativeDiff = getLastCumulativeDiff();\n        if (result.diff < 0) {\n          for(int i = 0; i < -result.diff ; i++)\n            addOffCorrectMap(nextCharCounter + i - prevCumulativeDiff, prevCumulativeDiff - 1 - i);\n        } else {\n          addOffCorrectMap(nextCharCounter - result.diff - prevCumulativeDiff, prevCumulativeDiff + result.diff);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8a9e385641d717e641408d8fbbc62be8fc766357","date":1256746606,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/analysis/MappingCharFilter#read().mjava","pathOld":"src/java/org/apache/lucene/analysis/MappingCharFilter#read().mjava","sourceNew":"  @Override\n  public int read() throws IOException {\n    while(true) {\n      if (replacement != null && charPointer < replacement.length()) {\n        return replacement.charAt(charPointer++);\n      }\n\n      int firstChar = nextChar();\n      if (firstChar == -1) return -1;\n      NormalizeCharMap nm = normMap.submap != null ?\n        normMap.submap.get(Character.valueOf((char) firstChar)) : null;\n      if (nm == null) return firstChar;\n      NormalizeCharMap result = match(nm);\n      if (result == null) return firstChar;\n      replacement = result.normStr;\n      charPointer = 0;\n      if (result.diff != 0) {\n        int prevCumulativeDiff = getLastCumulativeDiff();\n        if (result.diff < 0) {\n          for(int i = 0; i < -result.diff ; i++)\n            addOffCorrectMap(nextCharCounter + i - prevCumulativeDiff, prevCumulativeDiff - 1 - i);\n        } else {\n          addOffCorrectMap(nextCharCounter - result.diff - prevCumulativeDiff, prevCumulativeDiff + result.diff);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public int read() throws IOException {\n    while(true) {\n      if (replacement != null && charPointer < replacement.length()) {\n        return replacement.charAt(charPointer++);\n      }\n\n      int firstChar = nextChar();\n      if (firstChar == -1) return -1;\n      NormalizeCharMap nm = normMap.submap != null ?\n        normMap.submap.get(Character.valueOf((char) firstChar)) : null;\n      if (nm == null) return firstChar;\n      NormalizeCharMap result = match(nm);\n      if (result == null) return firstChar;\n      replacement = result.normStr;\n      charPointer = 0;\n      if (result.diff != 0) {\n        int prevCumulativeDiff = getLastCumulativeDiff();\n        if (result.diff < 0) {\n          for(int i = 0; i < -result.diff ; i++)\n            addOffCorrectMap(nextCharCounter + i - prevCumulativeDiff, prevCumulativeDiff - 1 - i);\n        } else {\n          addOffCorrectMap(nextCharCounter - result.diff - prevCumulativeDiff, prevCumulativeDiff + result.diff);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":4,"author":"Dawid Weiss","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/analysis/MappingCharFilter#read().mjava","sourceNew":null,"sourceOld":"  @Override\n  public int read() throws IOException {\n    while(true) {\n      if (replacement != null && charPointer < replacement.length()) {\n        return replacement.charAt(charPointer++);\n      }\n\n      int firstChar = nextChar();\n      if (firstChar == -1) return -1;\n      NormalizeCharMap nm = normMap.submap != null ?\n        normMap.submap.get(Character.valueOf((char) firstChar)) : null;\n      if (nm == null) return firstChar;\n      NormalizeCharMap result = match(nm);\n      if (result == null) return firstChar;\n      replacement = result.normStr;\n      charPointer = 0;\n      if (result.diff != 0) {\n        int prevCumulativeDiff = getLastCumulativeDiff();\n        if (result.diff < 0) {\n          for(int i = 0; i < -result.diff ; i++)\n            addOffCorrectMap(nextCharCounter + i - prevCumulativeDiff, prevCumulativeDiff - 1 - i);\n        } else {\n          addOffCorrectMap(nextCharCounter - result.diff - prevCumulativeDiff, prevCumulativeDiff + result.diff);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"84851fda840d985baf8ca736613e357a623597e8":["cd27af5c226d98a7c6378c388a67a3bff7c0b3a2"],"64af8690a948c97feaa9e2844a0c7051034f153d":["84851fda840d985baf8ca736613e357a623597e8"],"8a9e385641d717e641408d8fbbc62be8fc766357":["64af8690a948c97feaa9e2844a0c7051034f153d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["8a9e385641d717e641408d8fbbc62be8fc766357"],"cd27af5c226d98a7c6378c388a67a3bff7c0b3a2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"84851fda840d985baf8ca736613e357a623597e8":["64af8690a948c97feaa9e2844a0c7051034f153d"],"64af8690a948c97feaa9e2844a0c7051034f153d":["8a9e385641d717e641408d8fbbc62be8fc766357"],"8a9e385641d717e641408d8fbbc62be8fc766357":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd27af5c226d98a7c6378c388a67a3bff7c0b3a2"],"cd27af5c226d98a7c6378c388a67a3bff7c0b3a2":["84851fda840d985baf8ca736613e357a623597e8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}