{"path":"lucene/test-framework/src/java/org/apache/lucene/store/BaseDirectoryTestCase#testSeekPastEOF().mjava","commits":[{"id":"18efbc72c32221d05cd225926b1cbab767337ed0","date":1405497626,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/BaseDirectoryTestCase#testSeekPastEOF().mjava","pathOld":"/dev/null","sourceNew":"  public void testSeekPastEOF() throws Exception {\n    Directory dir = getDirectory(createTempDir(\"testSeekPastEOF\"));\n    IndexOutput o = dir.createOutput(\"out\", newIOContext(random()));\n    final int len = random().nextInt(2048);\n    byte[] b = new byte[len];\n    o.writeBytes(b, 0, len);\n    o.close();\n    IndexInput i = dir.openInput(\"out\", newIOContext(random()));\n    try {\n      i.seek(len + random().nextInt(2048));\n      i.readByte();\n      fail(\"Did not get EOFException\");\n    } catch (EOFException eof) {\n      // pass\n    }\n    i.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["05fe562aa248790944d43cdd478f512572835ba0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"05fe562aa248790944d43cdd478f512572835ba0","date":1455901667,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/BaseDirectoryTestCase#testSeekPastEOF().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/store/BaseDirectoryTestCase#testSeekPastEOF().mjava","sourceNew":"  public void testSeekPastEOF() throws Exception {\n    Directory dir = getDirectory(createTempDir(\"testSeekPastEOF\"));\n    IndexOutput o = dir.createOutput(\"out\", newIOContext(random()));\n    final int len = random().nextInt(2048);\n    byte[] b = new byte[len];\n    o.writeBytes(b, 0, len);\n    o.close();\n    IndexInput i = dir.openInput(\"out\", newIOContext(random()));\n    expectThrows(EOFException.class, () -> {      \n      i.seek(len + random().nextInt(2048));\n      i.readByte();\n    });\n\n    i.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSeekPastEOF() throws Exception {\n    Directory dir = getDirectory(createTempDir(\"testSeekPastEOF\"));\n    IndexOutput o = dir.createOutput(\"out\", newIOContext(random()));\n    final int len = random().nextInt(2048);\n    byte[] b = new byte[len];\n    o.writeBytes(b, 0, len);\n    o.close();\n    IndexInput i = dir.openInput(\"out\", newIOContext(random()));\n    try {\n      i.seek(len + random().nextInt(2048));\n      i.readByte();\n      fail(\"Did not get EOFException\");\n    } catch (EOFException eof) {\n      // pass\n    }\n    i.close();\n    dir.close();\n  }\n\n","bugFix":["18efbc72c32221d05cd225926b1cbab767337ed0"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f3adea0022cffaaa592081efed775a7b8bf86b51","date":1532414870,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/BaseDirectoryTestCase#testSeekPastEOF().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/store/BaseDirectoryTestCase#testSeekPastEOF().mjava","sourceNew":"  public void testSeekPastEOF() throws Exception {\n    try (Directory dir = getDirectory(createTempDir(\"testSeekPastEOF\"))) {\n      IndexOutput o = dir.createOutput(\"out\", newIOContext(random()));\n      final int len = random().nextInt(2048);\n      byte[] b = new byte[len];\n      o.writeBytes(b, 0, len);\n      o.close();\n      IndexInput i = dir.openInput(\"out\", newIOContext(random()));\n      expectThrows(EOFException.class, () -> {\n        i.seek(len + random().nextInt(2048));\n        i.readByte();\n      });\n\n      i.close();\n    }\n  }\n\n","sourceOld":"  public void testSeekPastEOF() throws Exception {\n    Directory dir = getDirectory(createTempDir(\"testSeekPastEOF\"));\n    IndexOutput o = dir.createOutput(\"out\", newIOContext(random()));\n    final int len = random().nextInt(2048);\n    byte[] b = new byte[len];\n    o.writeBytes(b, 0, len);\n    o.close();\n    IndexInput i = dir.openInput(\"out\", newIOContext(random()));\n    expectThrows(EOFException.class, () -> {      \n      i.seek(len + random().nextInt(2048));\n      i.readByte();\n    });\n\n    i.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":["7047018dca394809a6c77a991eece1f1994b704e"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7047018dca394809a6c77a991eece1f1994b704e","date":1541865268,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/BaseDirectoryTestCase#testSeekPastEOF().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/store/BaseDirectoryTestCase#testSeekPastEOF().mjava","sourceNew":"  public void testSeekPastEOF() throws Exception {\n    try (Directory dir = getDirectory(createTempDir(\"testSeekPastEOF\"))) {\n      IndexOutput o = dir.createOutput(\"out\", newIOContext(random()));\n      final int len = random().nextInt(2048);\n      byte[] b = new byte[len];\n      o.writeBytes(b, 0, len);\n      o.close();\n      IndexInput i = dir.openInput(\"out\", newIOContext(random()));\n\n      // Seeking past EOF should always throw EOFException\n      expectThrows(EOFException.class, () -> i.seek(len + RandomizedTest.randomIntBetween(1, 2048)));\n\n      // Seeking exactly to EOF should never throw any exception.\n      i.seek(len);\n\n      // But any read following the seek(len) should throw an EOFException.\n      expectThrows(EOFException.class, i::readByte);\n\n      i.close();\n    }\n  }\n\n","sourceOld":"  public void testSeekPastEOF() throws Exception {\n    try (Directory dir = getDirectory(createTempDir(\"testSeekPastEOF\"))) {\n      IndexOutput o = dir.createOutput(\"out\", newIOContext(random()));\n      final int len = random().nextInt(2048);\n      byte[] b = new byte[len];\n      o.writeBytes(b, 0, len);\n      o.close();\n      IndexInput i = dir.openInput(\"out\", newIOContext(random()));\n      expectThrows(EOFException.class, () -> {\n        i.seek(len + random().nextInt(2048));\n        i.readByte();\n      });\n\n      i.close();\n    }\n  }\n\n","bugFix":["f3adea0022cffaaa592081efed775a7b8bf86b51"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"95b3581a5fedff9c9f85f5993aabb9c8fadc8a38","date":1542717449,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/BaseDirectoryTestCase#testSeekPastEOF().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/store/BaseDirectoryTestCase#testSeekPastEOF().mjava","sourceNew":"  public void testSeekPastEOF() throws Exception {\n    try (Directory dir = getDirectory(createTempDir(\"testSeekPastEOF\"))) {\n      IndexOutput o = dir.createOutput(\"out\", newIOContext(random()));\n      final int len = random().nextInt(2048);\n      byte[] b = new byte[len];\n      o.writeBytes(b, 0, len);\n      o.close();\n      IndexInput i = dir.openInput(\"out\", newIOContext(random()));\n\n      // Seeking past EOF should always throw EOFException\n      expectThrows(EOFException.class, () -> i.seek(len + RandomizedTest.randomIntBetween(1, 2048)));\n\n      // Seeking exactly to EOF should never throw any exception.\n      i.seek(len);\n\n      // But any read following the seek(len) should throw an EOFException.\n      expectThrows(EOFException.class, i::readByte);\n      expectThrows(EOFException.class, () -> {\n        i.readBytes(new byte [1], 0, 1);\n      });\n\n      i.close();\n    }\n  }\n\n","sourceOld":"  public void testSeekPastEOF() throws Exception {\n    try (Directory dir = getDirectory(createTempDir(\"testSeekPastEOF\"))) {\n      IndexOutput o = dir.createOutput(\"out\", newIOContext(random()));\n      final int len = random().nextInt(2048);\n      byte[] b = new byte[len];\n      o.writeBytes(b, 0, len);\n      o.close();\n      IndexInput i = dir.openInput(\"out\", newIOContext(random()));\n\n      // Seeking past EOF should always throw EOFException\n      expectThrows(EOFException.class, () -> i.seek(len + RandomizedTest.randomIntBetween(1, 2048)));\n\n      // Seeking exactly to EOF should never throw any exception.\n      i.seek(len);\n\n      // But any read following the seek(len) should throw an EOFException.\n      expectThrows(EOFException.class, i::readByte);\n\n      i.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"95b3581a5fedff9c9f85f5993aabb9c8fadc8a38":["7047018dca394809a6c77a991eece1f1994b704e"],"18efbc72c32221d05cd225926b1cbab767337ed0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7047018dca394809a6c77a991eece1f1994b704e":["f3adea0022cffaaa592081efed775a7b8bf86b51"],"05fe562aa248790944d43cdd478f512572835ba0":["18efbc72c32221d05cd225926b1cbab767337ed0"],"f3adea0022cffaaa592081efed775a7b8bf86b51":["05fe562aa248790944d43cdd478f512572835ba0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["95b3581a5fedff9c9f85f5993aabb9c8fadc8a38"]},"commit2Childs":{"95b3581a5fedff9c9f85f5993aabb9c8fadc8a38":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"18efbc72c32221d05cd225926b1cbab767337ed0":["05fe562aa248790944d43cdd478f512572835ba0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["18efbc72c32221d05cd225926b1cbab767337ed0"],"7047018dca394809a6c77a991eece1f1994b704e":["95b3581a5fedff9c9f85f5993aabb9c8fadc8a38"],"05fe562aa248790944d43cdd478f512572835ba0":["f3adea0022cffaaa592081efed775a7b8bf86b51"],"f3adea0022cffaaa592081efed775a7b8bf86b51":["7047018dca394809a6c77a991eece1f1994b704e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}