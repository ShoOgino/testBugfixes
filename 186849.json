{"path":"solr/core/src/java/org/apache/solr/search/function/distance/HaversineConstFunction#getValues(Map,AtomicReaderContext).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/function/distance/HaversineConstFunction#getValues(Map,AtomicReaderContext).mjava","pathOld":"solr/src/java/org/apache/solr/search/function/distance/HaversineConstFunction#getValues(Map,AtomicReaderContext).mjava","sourceNew":"  @Override\n  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final DocValues latVals = latSource.getValues(context, readerContext);\n    final DocValues lonVals = lonSource.getValues(context, readerContext);\n    final double latCenterRad = this.latCenter * DistanceUtils.DEGREES_TO_RADIANS;\n    final double lonCenterRad = this.lonCenter * DistanceUtils.DEGREES_TO_RADIANS;\n    final double latCenterRad_cos = this.latCenterRad_cos;\n\n    return new DoubleDocValues(this) {\n      @Override\n      public double doubleVal(int doc) {\n        double latRad = latVals.doubleVal(doc) * DistanceUtils.DEGREES_TO_RADIANS;\n        double lonRad = lonVals.doubleVal(doc) * DistanceUtils.DEGREES_TO_RADIANS;\n        double diffX = latCenterRad - latRad;\n        double diffY = lonCenterRad - lonRad;\n        double hsinX = Math.sin(diffX * 0.5);\n        double hsinY = Math.sin(diffY * 0.5);\n        double h = hsinX * hsinX +\n                (latCenterRad_cos * Math.cos(latRad) * hsinY * hsinY);\n        return (EARTH_MEAN_DIAMETER * Math.atan2(Math.sqrt(h), Math.sqrt(1 - h)));\n      }\n      @Override\n      public String toString(int doc) {\n        return name() + '(' + latVals.toString(doc) + ',' + lonVals.toString(doc) + ',' + latCenter + ',' + lonCenter + ')';\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final DocValues latVals = latSource.getValues(context, readerContext);\n    final DocValues lonVals = lonSource.getValues(context, readerContext);\n    final double latCenterRad = this.latCenter * DistanceUtils.DEGREES_TO_RADIANS;\n    final double lonCenterRad = this.lonCenter * DistanceUtils.DEGREES_TO_RADIANS;\n    final double latCenterRad_cos = this.latCenterRad_cos;\n\n    return new DoubleDocValues(this) {\n      @Override\n      public double doubleVal(int doc) {\n        double latRad = latVals.doubleVal(doc) * DistanceUtils.DEGREES_TO_RADIANS;\n        double lonRad = lonVals.doubleVal(doc) * DistanceUtils.DEGREES_TO_RADIANS;\n        double diffX = latCenterRad - latRad;\n        double diffY = lonCenterRad - lonRad;\n        double hsinX = Math.sin(diffX * 0.5);\n        double hsinY = Math.sin(diffY * 0.5);\n        double h = hsinX * hsinX +\n                (latCenterRad_cos * Math.cos(latRad) * hsinY * hsinY);\n        return (EARTH_MEAN_DIAMETER * Math.atan2(Math.sqrt(h), Math.sqrt(1 - h)));\n      }\n      @Override\n      public String toString(int doc) {\n        return name() + '(' + latVals.toString(doc) + ',' + lonVals.toString(doc) + ',' + latCenter + ',' + lonCenter + ')';\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/function/distance/HaversineConstFunction#getValues(Map,AtomicReaderContext).mjava","pathOld":"solr/src/java/org/apache/solr/search/function/distance/HaversineConstFunction#getValues(Map,AtomicReaderContext).mjava","sourceNew":"  @Override\n  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final DocValues latVals = latSource.getValues(context, readerContext);\n    final DocValues lonVals = lonSource.getValues(context, readerContext);\n    final double latCenterRad = this.latCenter * DistanceUtils.DEGREES_TO_RADIANS;\n    final double lonCenterRad = this.lonCenter * DistanceUtils.DEGREES_TO_RADIANS;\n    final double latCenterRad_cos = this.latCenterRad_cos;\n\n    return new DoubleDocValues(this) {\n      @Override\n      public double doubleVal(int doc) {\n        double latRad = latVals.doubleVal(doc) * DistanceUtils.DEGREES_TO_RADIANS;\n        double lonRad = lonVals.doubleVal(doc) * DistanceUtils.DEGREES_TO_RADIANS;\n        double diffX = latCenterRad - latRad;\n        double diffY = lonCenterRad - lonRad;\n        double hsinX = Math.sin(diffX * 0.5);\n        double hsinY = Math.sin(diffY * 0.5);\n        double h = hsinX * hsinX +\n                (latCenterRad_cos * Math.cos(latRad) * hsinY * hsinY);\n        return (EARTH_MEAN_DIAMETER * Math.atan2(Math.sqrt(h), Math.sqrt(1 - h)));\n      }\n      @Override\n      public String toString(int doc) {\n        return name() + '(' + latVals.toString(doc) + ',' + lonVals.toString(doc) + ',' + latCenter + ',' + lonCenter + ')';\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final DocValues latVals = latSource.getValues(context, readerContext);\n    final DocValues lonVals = lonSource.getValues(context, readerContext);\n    final double latCenterRad = this.latCenter * DistanceUtils.DEGREES_TO_RADIANS;\n    final double lonCenterRad = this.lonCenter * DistanceUtils.DEGREES_TO_RADIANS;\n    final double latCenterRad_cos = this.latCenterRad_cos;\n\n    return new DoubleDocValues(this) {\n      @Override\n      public double doubleVal(int doc) {\n        double latRad = latVals.doubleVal(doc) * DistanceUtils.DEGREES_TO_RADIANS;\n        double lonRad = lonVals.doubleVal(doc) * DistanceUtils.DEGREES_TO_RADIANS;\n        double diffX = latCenterRad - latRad;\n        double diffY = lonCenterRad - lonRad;\n        double hsinX = Math.sin(diffX * 0.5);\n        double hsinY = Math.sin(diffY * 0.5);\n        double h = hsinX * hsinX +\n                (latCenterRad_cos * Math.cos(latRad) * hsinY * hsinY);\n        return (EARTH_MEAN_DIAMETER * Math.atan2(Math.sqrt(h), Math.sqrt(1 - h)));\n      }\n      @Override\n      public String toString(int doc) {\n        return name() + '(' + latVals.toString(doc) + ',' + lonVals.toString(doc) + ',' + latCenter + ',' + lonCenter + ')';\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/function/distance/HaversineConstFunction#getValues(Map,AtomicReaderContext).mjava","pathOld":"solr/src/java/org/apache/solr/search/function/distance/HaversineConstFunction#getValues(Map,AtomicReaderContext).mjava","sourceNew":"  @Override\n  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final DocValues latVals = latSource.getValues(context, readerContext);\n    final DocValues lonVals = lonSource.getValues(context, readerContext);\n    final double latCenterRad = this.latCenter * DistanceUtils.DEGREES_TO_RADIANS;\n    final double lonCenterRad = this.lonCenter * DistanceUtils.DEGREES_TO_RADIANS;\n    final double latCenterRad_cos = this.latCenterRad_cos;\n\n    return new DoubleDocValues(this) {\n      @Override\n      public double doubleVal(int doc) {\n        double latRad = latVals.doubleVal(doc) * DistanceUtils.DEGREES_TO_RADIANS;\n        double lonRad = lonVals.doubleVal(doc) * DistanceUtils.DEGREES_TO_RADIANS;\n        double diffX = latCenterRad - latRad;\n        double diffY = lonCenterRad - lonRad;\n        double hsinX = Math.sin(diffX * 0.5);\n        double hsinY = Math.sin(diffY * 0.5);\n        double h = hsinX * hsinX +\n                (latCenterRad_cos * Math.cos(latRad) * hsinY * hsinY);\n        return (EARTH_MEAN_DIAMETER * Math.atan2(Math.sqrt(h), Math.sqrt(1 - h)));\n      }\n      @Override\n      public String toString(int doc) {\n        return name() + '(' + latVals.toString(doc) + ',' + lonVals.toString(doc) + ',' + latCenter + ',' + lonCenter + ')';\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final DocValues latVals = latSource.getValues(context, readerContext);\n    final DocValues lonVals = lonSource.getValues(context, readerContext);\n    final double latCenterRad = this.latCenter * DistanceUtils.DEGREES_TO_RADIANS;\n    final double lonCenterRad = this.lonCenter * DistanceUtils.DEGREES_TO_RADIANS;\n    final double latCenterRad_cos = this.latCenterRad_cos;\n\n    return new DoubleDocValues(this) {\n      @Override\n      public double doubleVal(int doc) {\n        double latRad = latVals.doubleVal(doc) * DistanceUtils.DEGREES_TO_RADIANS;\n        double lonRad = lonVals.doubleVal(doc) * DistanceUtils.DEGREES_TO_RADIANS;\n        double diffX = latCenterRad - latRad;\n        double diffY = lonCenterRad - lonRad;\n        double hsinX = Math.sin(diffX * 0.5);\n        double hsinY = Math.sin(diffY * 0.5);\n        double h = hsinX * hsinX +\n                (latCenterRad_cos * Math.cos(latRad) * hsinY * hsinY);\n        return (EARTH_MEAN_DIAMETER * Math.atan2(Math.sqrt(h), Math.sqrt(1 - h)));\n      }\n      @Override\n      public String toString(int doc) {\n        return name() + '(' + latVals.toString(doc) + ',' + lonVals.toString(doc) + ',' + latCenter + ',' + lonCenter + ')';\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"32e7c2a80dad193a76a03ec46b878969d469ff6c","date":1323722006,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/function/distance/HaversineConstFunction#getValues(Map,AtomicReaderContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/function/distance/HaversineConstFunction#getValues(Map,AtomicReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final FunctionValues latVals = latSource.getValues(context, readerContext);\n    final FunctionValues lonVals = lonSource.getValues(context, readerContext);\n    final double latCenterRad = this.latCenter * DistanceUtils.DEGREES_TO_RADIANS;\n    final double lonCenterRad = this.lonCenter * DistanceUtils.DEGREES_TO_RADIANS;\n    final double latCenterRad_cos = this.latCenterRad_cos;\n\n    return new DoubleDocValues(this) {\n      @Override\n      public double doubleVal(int doc) {\n        double latRad = latVals.doubleVal(doc) * DistanceUtils.DEGREES_TO_RADIANS;\n        double lonRad = lonVals.doubleVal(doc) * DistanceUtils.DEGREES_TO_RADIANS;\n        double diffX = latCenterRad - latRad;\n        double diffY = lonCenterRad - lonRad;\n        double hsinX = Math.sin(diffX * 0.5);\n        double hsinY = Math.sin(diffY * 0.5);\n        double h = hsinX * hsinX +\n                (latCenterRad_cos * Math.cos(latRad) * hsinY * hsinY);\n        return (EARTH_MEAN_DIAMETER * Math.atan2(Math.sqrt(h), Math.sqrt(1 - h)));\n      }\n      @Override\n      public String toString(int doc) {\n        return name() + '(' + latVals.toString(doc) + ',' + lonVals.toString(doc) + ',' + latCenter + ',' + lonCenter + ')';\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final DocValues latVals = latSource.getValues(context, readerContext);\n    final DocValues lonVals = lonSource.getValues(context, readerContext);\n    final double latCenterRad = this.latCenter * DistanceUtils.DEGREES_TO_RADIANS;\n    final double lonCenterRad = this.lonCenter * DistanceUtils.DEGREES_TO_RADIANS;\n    final double latCenterRad_cos = this.latCenterRad_cos;\n\n    return new DoubleDocValues(this) {\n      @Override\n      public double doubleVal(int doc) {\n        double latRad = latVals.doubleVal(doc) * DistanceUtils.DEGREES_TO_RADIANS;\n        double lonRad = lonVals.doubleVal(doc) * DistanceUtils.DEGREES_TO_RADIANS;\n        double diffX = latCenterRad - latRad;\n        double diffY = lonCenterRad - lonRad;\n        double hsinX = Math.sin(diffX * 0.5);\n        double hsinY = Math.sin(diffY * 0.5);\n        double h = hsinX * hsinX +\n                (latCenterRad_cos * Math.cos(latRad) * hsinY * hsinY);\n        return (EARTH_MEAN_DIAMETER * Math.atan2(Math.sqrt(h), Math.sqrt(1 - h)));\n      }\n      @Override\n      public String toString(int doc) {\n        return name() + '(' + latVals.toString(doc) + ',' + lonVals.toString(doc) + ',' + latCenter + ',' + lonCenter + ')';\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d638301ad1cfcae567b681b893bc8781f0ee48a5","date":1323801546,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/function/distance/HaversineConstFunction#getValues(Map,AtomicReaderContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/function/distance/HaversineConstFunction#getValues(Map,AtomicReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final FunctionValues latVals = latSource.getValues(context, readerContext);\n    final FunctionValues lonVals = lonSource.getValues(context, readerContext);\n    final double latCenterRad = this.latCenter * DistanceUtils.DEGREES_TO_RADIANS;\n    final double lonCenterRad = this.lonCenter * DistanceUtils.DEGREES_TO_RADIANS;\n    final double latCenterRad_cos = this.latCenterRad_cos;\n\n    return new DoubleDocValues(this) {\n      @Override\n      public double doubleVal(int doc) {\n        double latRad = latVals.doubleVal(doc) * DistanceUtils.DEGREES_TO_RADIANS;\n        double lonRad = lonVals.doubleVal(doc) * DistanceUtils.DEGREES_TO_RADIANS;\n        double diffX = latCenterRad - latRad;\n        double diffY = lonCenterRad - lonRad;\n        double hsinX = Math.sin(diffX * 0.5);\n        double hsinY = Math.sin(diffY * 0.5);\n        double h = hsinX * hsinX +\n                (latCenterRad_cos * Math.cos(latRad) * hsinY * hsinY);\n        return (EARTH_MEAN_DIAMETER * Math.atan2(Math.sqrt(h), Math.sqrt(1 - h)));\n      }\n      @Override\n      public String toString(int doc) {\n        return name() + '(' + latVals.toString(doc) + ',' + lonVals.toString(doc) + ',' + latCenter + ',' + lonCenter + ')';\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final DocValues latVals = latSource.getValues(context, readerContext);\n    final DocValues lonVals = lonSource.getValues(context, readerContext);\n    final double latCenterRad = this.latCenter * DistanceUtils.DEGREES_TO_RADIANS;\n    final double lonCenterRad = this.lonCenter * DistanceUtils.DEGREES_TO_RADIANS;\n    final double latCenterRad_cos = this.latCenterRad_cos;\n\n    return new DoubleDocValues(this) {\n      @Override\n      public double doubleVal(int doc) {\n        double latRad = latVals.doubleVal(doc) * DistanceUtils.DEGREES_TO_RADIANS;\n        double lonRad = lonVals.doubleVal(doc) * DistanceUtils.DEGREES_TO_RADIANS;\n        double diffX = latCenterRad - latRad;\n        double diffY = lonCenterRad - lonRad;\n        double hsinX = Math.sin(diffX * 0.5);\n        double hsinY = Math.sin(diffY * 0.5);\n        double h = hsinX * hsinX +\n                (latCenterRad_cos * Math.cos(latRad) * hsinY * hsinY);\n        return (EARTH_MEAN_DIAMETER * Math.atan2(Math.sqrt(h), Math.sqrt(1 - h)));\n      }\n      @Override\n      public String toString(int doc) {\n        return name() + '(' + latVals.toString(doc) + ',' + lonVals.toString(doc) + ',' + latCenter + ',' + lonCenter + ')';\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3859e567816d5987602f2a7ae2469fcdf17f745e","date":1329895924,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/function/distance/HaversineConstFunction#getValues(Map,AtomicReaderContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/function/distance/HaversineConstFunction#getValues(Map,AtomicReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final FunctionValues latVals = latSource.getValues(context, readerContext);\n    final FunctionValues lonVals = lonSource.getValues(context, readerContext);\n    final double latCenterRad = Math.toRadians(this.latCenter);\n    final double lonCenterRad = Math.toRadians(this.lonCenter);\n    final double latCenterRad_cos = this.latCenterRad_cos;\n\n    return new DoubleDocValues(this) {\n      @Override\n      public double doubleVal(int doc) {\n        double latRad = Math.toRadians(latVals.doubleVal(doc));\n        double lonRad = Math.toRadians(lonVals.doubleVal(doc));\n        double diffX = latCenterRad - latRad;\n        double diffY = lonCenterRad - lonRad;\n        double hsinX = Math.sin(diffX * 0.5);\n        double hsinY = Math.sin(diffY * 0.5);\n        double h = hsinX * hsinX +\n                (latCenterRad_cos * Math.cos(latRad) * hsinY * hsinY);\n        return (EARTH_MEAN_DIAMETER * Math.atan2(Math.sqrt(h), Math.sqrt(1 - h)));\n      }\n      @Override\n      public String toString(int doc) {\n        return name() + '(' + latVals.toString(doc) + ',' + lonVals.toString(doc) + ',' + latCenter + ',' + lonCenter + ')';\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final FunctionValues latVals = latSource.getValues(context, readerContext);\n    final FunctionValues lonVals = lonSource.getValues(context, readerContext);\n    final double latCenterRad = this.latCenter * DistanceUtils.DEGREES_TO_RADIANS;\n    final double lonCenterRad = this.lonCenter * DistanceUtils.DEGREES_TO_RADIANS;\n    final double latCenterRad_cos = this.latCenterRad_cos;\n\n    return new DoubleDocValues(this) {\n      @Override\n      public double doubleVal(int doc) {\n        double latRad = latVals.doubleVal(doc) * DistanceUtils.DEGREES_TO_RADIANS;\n        double lonRad = lonVals.doubleVal(doc) * DistanceUtils.DEGREES_TO_RADIANS;\n        double diffX = latCenterRad - latRad;\n        double diffY = lonCenterRad - lonRad;\n        double hsinX = Math.sin(diffX * 0.5);\n        double hsinY = Math.sin(diffY * 0.5);\n        double h = hsinX * hsinX +\n                (latCenterRad_cos * Math.cos(latRad) * hsinY * hsinY);\n        return (EARTH_MEAN_DIAMETER * Math.atan2(Math.sqrt(h), Math.sqrt(1 - h)));\n      }\n      @Override\n      public String toString(int doc) {\n        return name() + '(' + latVals.toString(doc) + ',' + lonVals.toString(doc) + ',' + latCenter + ',' + lonCenter + ')';\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e47768b261c28e7e6032060e8331475c81057953","date":1331681297,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/function/distance/HaversineConstFunction#getValues(Map,AtomicReaderContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/function/distance/HaversineConstFunction#getValues(Map,AtomicReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final FunctionValues latVals = latSource.getValues(context, readerContext);\n    final FunctionValues lonVals = lonSource.getValues(context, readerContext);\n    final double latCenterRad = Math.toRadians(this.latCenter);\n    final double lonCenterRad = Math.toRadians(this.lonCenter);\n    final double latCenterRad_cos = this.latCenterRad_cos;\n\n    return new DoubleDocValues(this) {\n      @Override\n      public double doubleVal(int doc) {\n        double latRad = Math.toRadians(latVals.doubleVal(doc));\n        double lonRad = Math.toRadians(lonVals.doubleVal(doc));\n        double diffX = latCenterRad - latRad;\n        double diffY = lonCenterRad - lonRad;\n        double hsinX = Math.sin(diffX * 0.5);\n        double hsinY = Math.sin(diffY * 0.5);\n        double h = hsinX * hsinX +\n                (latCenterRad_cos * Math.cos(latRad) * hsinY * hsinY);\n        return (EARTH_MEAN_DIAMETER * Math.atan2(Math.sqrt(h), Math.sqrt(1 - h)));\n      }\n      @Override\n      public String toString(int doc) {\n        return name() + '(' + latVals.toString(doc) + ',' + lonVals.toString(doc) + ',' + latCenter + ',' + lonCenter + ')';\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final FunctionValues latVals = latSource.getValues(context, readerContext);\n    final FunctionValues lonVals = lonSource.getValues(context, readerContext);\n    final double latCenterRad = this.latCenter * DistanceUtils.DEGREES_TO_RADIANS;\n    final double lonCenterRad = this.lonCenter * DistanceUtils.DEGREES_TO_RADIANS;\n    final double latCenterRad_cos = this.latCenterRad_cos;\n\n    return new DoubleDocValues(this) {\n      @Override\n      public double doubleVal(int doc) {\n        double latRad = latVals.doubleVal(doc) * DistanceUtils.DEGREES_TO_RADIANS;\n        double lonRad = lonVals.doubleVal(doc) * DistanceUtils.DEGREES_TO_RADIANS;\n        double diffX = latCenterRad - latRad;\n        double diffY = lonCenterRad - lonRad;\n        double hsinX = Math.sin(diffX * 0.5);\n        double hsinY = Math.sin(diffY * 0.5);\n        double h = hsinX * hsinX +\n                (latCenterRad_cos * Math.cos(latRad) * hsinY * hsinY);\n        return (EARTH_MEAN_DIAMETER * Math.atan2(Math.sqrt(h), Math.sqrt(1 - h)));\n      }\n      @Override\n      public String toString(int doc) {\n        return name() + '(' + latVals.toString(doc) + ',' + lonVals.toString(doc) + ',' + latCenter + ',' + lonCenter + ')';\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8726333bca804ff1ebd79d1310561641b5dfcb9e","date":1331697951,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/function/distance/HaversineConstFunction#getValues(Map,AtomicReaderContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/function/distance/HaversineConstFunction#getValues(Map,AtomicReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final FunctionValues latVals = latSource.getValues(context, readerContext);\n    final FunctionValues lonVals = lonSource.getValues(context, readerContext);\n    final double latCenterRad = this.latCenter * DEGREES_TO_RADIANS;\n    final double lonCenterRad = this.lonCenter * DEGREES_TO_RADIANS;\n    final double latCenterRad_cos = this.latCenterRad_cos;\n\n    return new DoubleDocValues(this) {\n      @Override\n      public double doubleVal(int doc) {\n        double latRad = latVals.doubleVal(doc) * DEGREES_TO_RADIANS;\n        double lonRad = lonVals.doubleVal(doc) * DEGREES_TO_RADIANS;\n        double diffX = latCenterRad - latRad;\n        double diffY = lonCenterRad - lonRad;\n        double hsinX = Math.sin(diffX * 0.5);\n        double hsinY = Math.sin(diffY * 0.5);\n        double h = hsinX * hsinX +\n                (latCenterRad_cos * Math.cos(latRad) * hsinY * hsinY);\n        return (EARTH_MEAN_DIAMETER * Math.atan2(Math.sqrt(h), Math.sqrt(1 - h)));\n      }\n      @Override\n      public String toString(int doc) {\n        return name() + '(' + latVals.toString(doc) + ',' + lonVals.toString(doc) + ',' + latCenter + ',' + lonCenter + ')';\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final FunctionValues latVals = latSource.getValues(context, readerContext);\n    final FunctionValues lonVals = lonSource.getValues(context, readerContext);\n    final double latCenterRad = Math.toRadians(this.latCenter);\n    final double lonCenterRad = Math.toRadians(this.lonCenter);\n    final double latCenterRad_cos = this.latCenterRad_cos;\n\n    return new DoubleDocValues(this) {\n      @Override\n      public double doubleVal(int doc) {\n        double latRad = Math.toRadians(latVals.doubleVal(doc));\n        double lonRad = Math.toRadians(lonVals.doubleVal(doc));\n        double diffX = latCenterRad - latRad;\n        double diffY = lonCenterRad - lonRad;\n        double hsinX = Math.sin(diffX * 0.5);\n        double hsinY = Math.sin(diffY * 0.5);\n        double h = hsinX * hsinX +\n                (latCenterRad_cos * Math.cos(latRad) * hsinY * hsinY);\n        return (EARTH_MEAN_DIAMETER * Math.atan2(Math.sqrt(h), Math.sqrt(1 - h)));\n      }\n      @Override\n      public String toString(int doc) {\n        return name() + '(' + latVals.toString(doc) + ',' + lonVals.toString(doc) + ',' + latCenter + ',' + lonCenter + ')';\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/function/distance/HaversineConstFunction#getValues(Map,AtomicReaderContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/function/distance/HaversineConstFunction#getValues(Map,AtomicReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final FunctionValues latVals = latSource.getValues(context, readerContext);\n    final FunctionValues lonVals = lonSource.getValues(context, readerContext);\n    final double latCenterRad = this.latCenter * DEGREES_TO_RADIANS;\n    final double lonCenterRad = this.lonCenter * DEGREES_TO_RADIANS;\n    final double latCenterRad_cos = this.latCenterRad_cos;\n\n    return new DoubleDocValues(this) {\n      @Override\n      public double doubleVal(int doc) {\n        double latRad = latVals.doubleVal(doc) * DEGREES_TO_RADIANS;\n        double lonRad = lonVals.doubleVal(doc) * DEGREES_TO_RADIANS;\n        double diffX = latCenterRad - latRad;\n        double diffY = lonCenterRad - lonRad;\n        double hsinX = Math.sin(diffX * 0.5);\n        double hsinY = Math.sin(diffY * 0.5);\n        double h = hsinX * hsinX +\n                (latCenterRad_cos * Math.cos(latRad) * hsinY * hsinY);\n        return (EARTH_MEAN_DIAMETER * Math.atan2(Math.sqrt(h), Math.sqrt(1 - h)));\n      }\n      @Override\n      public String toString(int doc) {\n        return name() + '(' + latVals.toString(doc) + ',' + lonVals.toString(doc) + ',' + latCenter + ',' + lonCenter + ')';\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final FunctionValues latVals = latSource.getValues(context, readerContext);\n    final FunctionValues lonVals = lonSource.getValues(context, readerContext);\n    final double latCenterRad = this.latCenter * DEGREES_TO_RADIANS;\n    final double lonCenterRad = this.lonCenter * DEGREES_TO_RADIANS;\n    final double latCenterRad_cos = this.latCenterRad_cos;\n\n    return new DoubleDocValues(this) {\n      @Override\n      public double doubleVal(int doc) {\n        double latRad = latVals.doubleVal(doc) * DEGREES_TO_RADIANS;\n        double lonRad = lonVals.doubleVal(doc) * DEGREES_TO_RADIANS;\n        double diffX = latCenterRad - latRad;\n        double diffY = lonCenterRad - lonRad;\n        double hsinX = Math.sin(diffX * 0.5);\n        double hsinY = Math.sin(diffY * 0.5);\n        double h = hsinX * hsinX +\n                (latCenterRad_cos * Math.cos(latRad) * hsinY * hsinY);\n        return (EARTH_MEAN_DIAMETER * Math.atan2(Math.sqrt(h), Math.sqrt(1 - h)));\n      }\n      @Override\n      public String toString(int doc) {\n        return name() + '(' + latVals.toString(doc) + ',' + lonVals.toString(doc) + ',' + latCenter + ',' + lonCenter + ')';\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","date":1376375609,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/function/distance/HaversineConstFunction#getValues(Map,AtomicReaderContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/function/distance/HaversineConstFunction#getValues(Map,AtomicReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final FunctionValues latVals = latSource.getValues(context, readerContext);\n    final FunctionValues lonVals = lonSource.getValues(context, readerContext);\n    final double latCenterRad = this.latCenter * DEGREES_TO_RADIANS;\n    final double lonCenterRad = this.lonCenter * DEGREES_TO_RADIANS;\n    final double latCenterRad_cos = this.latCenterRad_cos;\n\n    return new DoubleDocValues(this) {\n      @Override\n      public double doubleVal(int doc) {\n        double latRad = latVals.doubleVal(doc) * DEGREES_TO_RADIANS;\n        double lonRad = lonVals.doubleVal(doc) * DEGREES_TO_RADIANS;\n        double diffX = latCenterRad - latRad;\n        double diffY = lonCenterRad - lonRad;\n        double hsinX = Math.sin(diffX * 0.5);\n        double hsinY = Math.sin(diffY * 0.5);\n        double h = hsinX * hsinX +\n                (latCenterRad_cos * Math.cos(latRad) * hsinY * hsinY);\n        return (EARTH_MEAN_DIAMETER * Math.atan2(Math.sqrt(h), Math.sqrt(1 - h)));\n      }\n      @Override\n      public String toString(int doc) {\n        return name() + '(' + latVals.toString(doc) + ',' + lonVals.toString(doc) + ',' + latCenter + ',' + lonCenter + ')';\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final FunctionValues latVals = latSource.getValues(context, readerContext);\n    final FunctionValues lonVals = lonSource.getValues(context, readerContext);\n    final double latCenterRad = this.latCenter * DEGREES_TO_RADIANS;\n    final double lonCenterRad = this.lonCenter * DEGREES_TO_RADIANS;\n    final double latCenterRad_cos = this.latCenterRad_cos;\n\n    return new DoubleDocValues(this) {\n      @Override\n      public double doubleVal(int doc) {\n        double latRad = latVals.doubleVal(doc) * DEGREES_TO_RADIANS;\n        double lonRad = lonVals.doubleVal(doc) * DEGREES_TO_RADIANS;\n        double diffX = latCenterRad - latRad;\n        double diffY = lonCenterRad - lonRad;\n        double hsinX = Math.sin(diffX * 0.5);\n        double hsinY = Math.sin(diffY * 0.5);\n        double h = hsinX * hsinX +\n                (latCenterRad_cos * Math.cos(latRad) * hsinY * hsinY);\n        return (EARTH_MEAN_DIAMETER * Math.atan2(Math.sqrt(h), Math.sqrt(1 - h)));\n      }\n      @Override\n      public String toString(int doc) {\n        return name() + '(' + latVals.toString(doc) + ',' + lonVals.toString(doc) + ',' + latCenter + ',' + lonCenter + ')';\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":4,"author":"Ryan Ernst","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/search/function/distance/HaversineConstFunction#getValues(Map,AtomicReaderContext).mjava","sourceNew":null,"sourceOld":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final FunctionValues latVals = latSource.getValues(context, readerContext);\n    final FunctionValues lonVals = lonSource.getValues(context, readerContext);\n    final double latCenterRad = this.latCenter * DEGREES_TO_RADIANS;\n    final double lonCenterRad = this.lonCenter * DEGREES_TO_RADIANS;\n    final double latCenterRad_cos = this.latCenterRad_cos;\n\n    return new DoubleDocValues(this) {\n      @Override\n      public double doubleVal(int doc) {\n        double latRad = latVals.doubleVal(doc) * DEGREES_TO_RADIANS;\n        double lonRad = lonVals.doubleVal(doc) * DEGREES_TO_RADIANS;\n        double diffX = latCenterRad - latRad;\n        double diffY = lonCenterRad - lonRad;\n        double hsinX = Math.sin(diffX * 0.5);\n        double hsinY = Math.sin(diffY * 0.5);\n        double h = hsinX * hsinX +\n                (latCenterRad_cos * Math.cos(latRad) * hsinY * hsinY);\n        return (EARTH_MEAN_DIAMETER * Math.atan2(Math.sqrt(h), Math.sqrt(1 - h)));\n      }\n      @Override\n      public String toString(int doc) {\n        return name() + '(' + latVals.toString(doc) + ',' + lonVals.toString(doc) + ',' + latCenter + ',' + lonCenter + ')';\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":["8726333bca804ff1ebd79d1310561641b5dfcb9e","19275ba31e621f6da1b83bf13af75233876fd3d4"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"8726333bca804ff1ebd79d1310561641b5dfcb9e":["e47768b261c28e7e6032060e8331475c81057953"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["8726333bca804ff1ebd79d1310561641b5dfcb9e"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["19275ba31e621f6da1b83bf13af75233876fd3d4"],"d638301ad1cfcae567b681b893bc8781f0ee48a5":["c26f00b574427b55127e869b935845554afde1fa","32e7c2a80dad193a76a03ec46b878969d469ff6c"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"32e7c2a80dad193a76a03ec46b878969d469ff6c":["c26f00b574427b55127e869b935845554afde1fa"],"e47768b261c28e7e6032060e8331475c81057953":["d638301ad1cfcae567b681b893bc8781f0ee48a5","3859e567816d5987602f2a7ae2469fcdf17f745e"],"3859e567816d5987602f2a7ae2469fcdf17f745e":["d638301ad1cfcae567b681b893bc8781f0ee48a5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c9fb5f46e264daf5ba3860defe623a89d202dd87"]},"commit2Childs":{"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":[],"c26f00b574427b55127e869b935845554afde1fa":["d638301ad1cfcae567b681b893bc8781f0ee48a5","32e7c2a80dad193a76a03ec46b878969d469ff6c"],"8726333bca804ff1ebd79d1310561641b5dfcb9e":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","19275ba31e621f6da1b83bf13af75233876fd3d4"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","c9fb5f46e264daf5ba3860defe623a89d202dd87"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d638301ad1cfcae567b681b893bc8781f0ee48a5":["e47768b261c28e7e6032060e8331475c81057953","3859e567816d5987602f2a7ae2469fcdf17f745e"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"32e7c2a80dad193a76a03ec46b878969d469ff6c":["d638301ad1cfcae567b681b893bc8781f0ee48a5"],"e47768b261c28e7e6032060e8331475c81057953":["8726333bca804ff1ebd79d1310561641b5dfcb9e"],"3859e567816d5987602f2a7ae2469fcdf17f745e":["e47768b261c28e7e6032060e8331475c81057953"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}