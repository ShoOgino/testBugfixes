{"path":"lucene/src/test/org/apache/lucene/search/TestFuzzyQuery2#testFromTestData().mjava","commits":[{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFuzzyQuery2#testFromTestData().mjava","pathOld":"/dev/null","sourceNew":"  public void testFromTestData() throws Exception {\n    InputStream stream = getClass().getResourceAsStream(\"fuzzyTestData.txt\");\n    BufferedReader reader = new BufferedReader(new InputStreamReader(stream, \"UTF-8\"));\n    \n    int bits = Integer.parseInt(reader.readLine());\n    int terms = (int) Math.pow(2, bits);\n    \n    RAMDirectory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new KeywordAnalyzer(),\n        IndexWriter.MaxFieldLength.UNLIMITED);\n    \n    Document doc = new Document();\n    Field field = new Field(\"field\", \"\", Field.Store.NO, Field.Index.ANALYZED);\n    doc.add(field);\n    \n    for (int i = 0; i < terms; i++) {\n      field.setValue(Integer.toBinaryString(i));\n      writer.addDocument(doc);\n    }\n    \n    writer.optimize();\n    writer.close();   \n    \n    IndexSearcher searcher = new IndexSearcher(dir);\n    String line;\n    while ((line = reader.readLine()) != null) {\n      String params[] = line.split(\",\");\n      String query = Integer.toBinaryString(Integer.parseInt(params[0]));\n      int prefix = Integer.parseInt(params[1]);\n      int pqSize = Integer.parseInt(params[2]);\n      float minScore = Float.parseFloat(params[3]);\n      FuzzyQuery q = new FuzzyQuery(new Term(\"field\", query), minScore, prefix);\n      q.setRewriteMethod(new MultiTermQuery.TopTermsBoostOnlyBooleanQueryRewrite(pqSize));\n      int expectedResults = Integer.parseInt(reader.readLine());\n      TopDocs docs = searcher.search(q, expectedResults);\n      assertEquals(expectedResults, docs.totalHits);\n      for (int i = 0; i < expectedResults; i++) {\n        String scoreDoc[] = reader.readLine().split(\",\");\n        assertEquals(Integer.parseInt(scoreDoc[0]), docs.scoreDocs[i].doc);\n        assertEquals(Float.parseFloat(scoreDoc[1]), docs.scoreDocs[i].score, epsilon);\n      }\n    }\n    searcher.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5acb0ee59cc50caf85402e92d148fdb2af61bc19","date":1272929037,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFuzzyQuery2#testFromTestData().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFuzzyQuery2#testFromTestData().mjava","sourceNew":"  public void testFromTestData() throws Exception {\n    // TODO: randomize!\n    assertFromTestData(new int[] { 0x40, 0x41 });\n    assertFromTestData(new int[] { 0x40, 0x0195 });\n    assertFromTestData(new int[] { 0x40, 0x0906 });\n    assertFromTestData(new int[] { 0x40, 0x1040F });\n    assertFromTestData(new int[] { 0x0194, 0x0195 });\n    assertFromTestData(new int[] { 0x0194, 0x0906 });\n    assertFromTestData(new int[] { 0x0194, 0x1040F });\n    assertFromTestData(new int[] { 0x0905, 0x0906 });\n    assertFromTestData(new int[] { 0x0905, 0x1040F });\n    assertFromTestData(new int[] { 0x1040E, 0x1040F });\n  }\n\n","sourceOld":"  public void testFromTestData() throws Exception {\n    InputStream stream = getClass().getResourceAsStream(\"fuzzyTestData.txt\");\n    BufferedReader reader = new BufferedReader(new InputStreamReader(stream, \"UTF-8\"));\n    \n    int bits = Integer.parseInt(reader.readLine());\n    int terms = (int) Math.pow(2, bits);\n    \n    RAMDirectory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new KeywordAnalyzer(),\n        IndexWriter.MaxFieldLength.UNLIMITED);\n    \n    Document doc = new Document();\n    Field field = new Field(\"field\", \"\", Field.Store.NO, Field.Index.ANALYZED);\n    doc.add(field);\n    \n    for (int i = 0; i < terms; i++) {\n      field.setValue(Integer.toBinaryString(i));\n      writer.addDocument(doc);\n    }\n    \n    writer.optimize();\n    writer.close();   \n    \n    IndexSearcher searcher = new IndexSearcher(dir);\n    String line;\n    while ((line = reader.readLine()) != null) {\n      String params[] = line.split(\",\");\n      String query = Integer.toBinaryString(Integer.parseInt(params[0]));\n      int prefix = Integer.parseInt(params[1]);\n      int pqSize = Integer.parseInt(params[2]);\n      float minScore = Float.parseFloat(params[3]);\n      FuzzyQuery q = new FuzzyQuery(new Term(\"field\", query), minScore, prefix);\n      q.setRewriteMethod(new MultiTermQuery.TopTermsBoostOnlyBooleanQueryRewrite(pqSize));\n      int expectedResults = Integer.parseInt(reader.readLine());\n      TopDocs docs = searcher.search(q, expectedResults);\n      assertEquals(expectedResults, docs.totalHits);\n      for (int i = 0; i < expectedResults; i++) {\n        String scoreDoc[] = reader.readLine().split(\",\");\n        assertEquals(Integer.parseInt(scoreDoc[0]), docs.scoreDocs[i].doc);\n        assertEquals(Float.parseFloat(scoreDoc[1]), docs.scoreDocs[i].score, epsilon);\n      }\n    }\n    searcher.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0762b640e0d0d12b6edb96db68986e13145c3484","date":1307575932,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFuzzyQuery2#testFromTestData().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFuzzyQuery2#testFromTestData().mjava","sourceNew":"  public void testFromTestData() throws Exception {\n    // TODO: randomize!\n    assertFromTestData(mappings[random.nextInt(mappings.length)]);\n  }\n\n","sourceOld":"  public void testFromTestData() throws Exception {\n    // TODO: randomize!\n    assertFromTestData(new int[] { 0x40, 0x41 });\n    assertFromTestData(new int[] { 0x40, 0x0195 });\n    assertFromTestData(new int[] { 0x40, 0x0906 });\n    assertFromTestData(new int[] { 0x40, 0x1040F });\n    assertFromTestData(new int[] { 0x0194, 0x0195 });\n    assertFromTestData(new int[] { 0x0194, 0x0906 });\n    assertFromTestData(new int[] { 0x0194, 0x1040F });\n    assertFromTestData(new int[] { 0x0905, 0x0906 });\n    assertFromTestData(new int[] { 0x0905, 0x1040F });\n    assertFromTestData(new int[] { 0x1040E, 0x1040F });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"77cf4379b2824f6ea34b091c495d6e95c38ff9e2","date":1307610475,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFuzzyQuery2#testFromTestData().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFuzzyQuery2#testFromTestData().mjava","sourceNew":"  public void testFromTestData() throws Exception {\n    // TODO: randomize!\n    assertFromTestData(mappings[random.nextInt(mappings.length)]);\n  }\n\n","sourceOld":"  public void testFromTestData() throws Exception {\n    // TODO: randomize!\n    assertFromTestData(new int[] { 0x40, 0x41 });\n    assertFromTestData(new int[] { 0x40, 0x0195 });\n    assertFromTestData(new int[] { 0x40, 0x0906 });\n    assertFromTestData(new int[] { 0x40, 0x1040F });\n    assertFromTestData(new int[] { 0x0194, 0x0195 });\n    assertFromTestData(new int[] { 0x0194, 0x0906 });\n    assertFromTestData(new int[] { 0x0194, 0x1040F });\n    assertFromTestData(new int[] { 0x0905, 0x0906 });\n    assertFromTestData(new int[] { 0x0905, 0x1040F });\n    assertFromTestData(new int[] { 0x1040E, 0x1040F });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","date":1307729864,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFuzzyQuery2#testFromTestData().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFuzzyQuery2#testFromTestData().mjava","sourceNew":"  public void testFromTestData() throws Exception {\n    // TODO: randomize!\n    assertFromTestData(mappings[random.nextInt(mappings.length)]);\n  }\n\n","sourceOld":"  public void testFromTestData() throws Exception {\n    // TODO: randomize!\n    assertFromTestData(new int[] { 0x40, 0x41 });\n    assertFromTestData(new int[] { 0x40, 0x0195 });\n    assertFromTestData(new int[] { 0x40, 0x0906 });\n    assertFromTestData(new int[] { 0x40, 0x1040F });\n    assertFromTestData(new int[] { 0x0194, 0x0195 });\n    assertFromTestData(new int[] { 0x0194, 0x0906 });\n    assertFromTestData(new int[] { 0x0194, 0x1040F });\n    assertFromTestData(new int[] { 0x0905, 0x0906 });\n    assertFromTestData(new int[] { 0x0905, 0x1040F });\n    assertFromTestData(new int[] { 0x1040E, 0x1040F });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestFuzzyQuery2#testFromTestData().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFuzzyQuery2#testFromTestData().mjava","sourceNew":"  public void testFromTestData() throws Exception {\n    // TODO: randomize!\n    assertFromTestData(mappings[random.nextInt(mappings.length)]);\n  }\n\n","sourceOld":"  public void testFromTestData() throws Exception {\n    // TODO: randomize!\n    assertFromTestData(mappings[random.nextInt(mappings.length)]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["5acb0ee59cc50caf85402e92d148fdb2af61bc19","0762b640e0d0d12b6edb96db68986e13145c3484"],"0762b640e0d0d12b6edb96db68986e13145c3484":["5acb0ee59cc50caf85402e92d148fdb2af61bc19"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["0762b640e0d0d12b6edb96db68986e13145c3484"],"5acb0ee59cc50caf85402e92d148fdb2af61bc19":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":["5acb0ee59cc50caf85402e92d148fdb2af61bc19","0762b640e0d0d12b6edb96db68986e13145c3484"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":[],"0762b640e0d0d12b6edb96db68986e13145c3484":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","3a119bbc8703c10faa329ec201c654b3a35a1e3e","77cf4379b2824f6ea34b091c495d6e95c38ff9e2"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5acb0ee59cc50caf85402e92d148fdb2af61bc19":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","0762b640e0d0d12b6edb96db68986e13145c3484","77cf4379b2824f6ea34b091c495d6e95c38ff9e2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":[],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["5acb0ee59cc50caf85402e92d148fdb2af61bc19"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","77cf4379b2824f6ea34b091c495d6e95c38ff9e2","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}