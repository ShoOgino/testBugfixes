{"path":"lucene/src/test/org/apache/lucene/index/TestMaxTermFrequency#test().mjava","commits":[{"id":"5e9ee82a511a2ff4aad3e0bd7a3ab820c03ce6fc","date":1295002842,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestMaxTermFrequency#test().mjava","pathOld":"/dev/null","sourceNew":"  public void test() throws Exception {\n    byte fooNorms[] = MultiNorms.norms(reader, \"foo\");\n    for (int i = 0; i < reader.maxDoc(); i++)\n      assertEquals(expected.get(i).intValue(), fooNorms[i] & 0xff);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"16843358872ed92ba92888ab99df297550b9a36a","date":1295144724,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestMaxTermFrequency#test().mjava","pathOld":"/dev/null","sourceNew":"  public void test() throws Exception {\n    byte fooNorms[] = MultiNorms.norms(reader, \"foo\");\n    for (int i = 0; i < reader.maxDoc(); i++)\n      assertEquals(expected.get(i).intValue(), fooNorms[i] & 0xff);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestMaxTermFrequency#test().mjava","pathOld":"/dev/null","sourceNew":"  public void test() throws Exception {\n    byte fooNorms[] = MultiNorms.norms(reader, \"foo\");\n    for (int i = 0; i < reader.maxDoc(); i++)\n      assertEquals(expected.get(i).intValue(), fooNorms[i] & 0xff);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f4b223b56d0c7927ae8baced5e1b1dd4c693b1d","date":1325789720,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestMaxTermFrequency#test().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestMaxTermFrequency#test().mjava","sourceNew":"  public void test() throws Exception {\n    byte fooNorms[] = (byte[])MultiDocValues.getNormDocValues(reader, \"foo\").getSource().getArray();\n    for (int i = 0; i < reader.maxDoc(); i++)\n      assertEquals(expected.get(i).intValue(), fooNorms[i] & 0xff);\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    byte fooNorms[] = MultiNorms.norms(reader, \"foo\");\n    for (int i = 0; i < reader.maxDoc(); i++)\n      assertEquals(expected.get(i).intValue(), fooNorms[i] & 0xff);\n  }\n\n","bugFix":null,"bugIntro":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestMaxTermFrequency#test().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestMaxTermFrequency#test().mjava","sourceNew":"  public void test() throws Exception {\n    byte fooNorms[] = (byte[])MultiDocValues.getNormDocValues(reader, \"foo\").getSource().getArray();\n    for (int i = 0; i < reader.maxDoc(); i++)\n      assertEquals(expected.get(i).intValue(), fooNorms[i] & 0xff);\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    byte fooNorms[] = (byte[])MultiDocValues.getNormDocValues(reader, \"foo\").getSource().getArray();\n    for (int i = 0; i < reader.maxDoc(); i++)\n      assertEquals(expected.get(i).intValue(), fooNorms[i] & 0xff);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"0f4b223b56d0c7927ae8baced5e1b1dd4c693b1d":["5e9ee82a511a2ff4aad3e0bd7a3ab820c03ce6fc"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["0f4b223b56d0c7927ae8baced5e1b1dd4c693b1d"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5e9ee82a511a2ff4aad3e0bd7a3ab820c03ce6fc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"16843358872ed92ba92888ab99df297550b9a36a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5e9ee82a511a2ff4aad3e0bd7a3ab820c03ce6fc"],"5e9ee82a511a2ff4aad3e0bd7a3ab820c03ce6fc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"0f4b223b56d0c7927ae8baced5e1b1dd4c693b1d":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["29ef99d61cda9641b6250bf9567329a6e65f901d","16843358872ed92ba92888ab99df297550b9a36a","5e9ee82a511a2ff4aad3e0bd7a3ab820c03ce6fc"],"16843358872ed92ba92888ab99df297550b9a36a":[],"5e9ee82a511a2ff4aad3e0bd7a3ab820c03ce6fc":["0f4b223b56d0c7927ae8baced5e1b1dd4c693b1d","29ef99d61cda9641b6250bf9567329a6e65f901d","16843358872ed92ba92888ab99df297550b9a36a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","16843358872ed92ba92888ab99df297550b9a36a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}