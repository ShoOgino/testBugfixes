{"path":"src/test/org/apache/solr/servlet/SolrRequestParserTest#testStreamBody().mjava","commits":[{"id":"d80013b5e260def972025c93a0b08524f9c38f49","date":1170102801,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/test/org/apache/solr/servlet/SolrRequestParserTest#testStreamBody().mjava","pathOld":"/dev/null","sourceNew":"  public void testStreamBody() throws Exception\n  {\n    String body1 = \"AMANAPLANPANAMA\";\n    String body2 = \"qwertasdfgzxcvb\";\n    String body3 = \"1234567890\";\n    \n    Map<String,String[]> args = new HashMap<String, String[]>();\n    args.put( SolrParams.STREAM_BODY, new String[] {body1} );\n    \n    // Make sure it got a single stream in and out ok\n    List<ContentStream> streams = new ArrayList<ContentStream>();\n    parser.buildRequestFrom( new MultiMapSolrParams( args ), streams );\n    assertEquals( 1, streams.size() );\n    assertEquals( body1, IOUtils.toString( streams.get(0).getStream() ) );\n    \n    // Now add three and make sure they come out ok\n    streams = new ArrayList<ContentStream>();\n    args.put( SolrParams.STREAM_BODY, new String[] {body1,body2,body3} );\n    parser.buildRequestFrom( new MultiMapSolrParams( args ), streams );\n    assertEquals( 3, streams.size() );\n    ArrayList<String> input  = new ArrayList<String>();\n    ArrayList<String> output = new ArrayList<String>();\n    input.add( body1 );\n    input.add( body2 );\n    input.add( body3 );\n    output.add( IOUtils.toString( streams.get(0).getStream() ) );\n    output.add( IOUtils.toString( streams.get(1).getStream() ) );\n    output.add( IOUtils.toString( streams.get(2).getStream() ) );\n    // sort them so the output is consistent\n    Collections.sort( input );\n    Collections.sort( output );\n    assertEquals( input.toString(), output.toString() );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"440157898846af9a00b84382942df3f6e3c41a93","date":1175189311,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/solr/servlet/SolrRequestParserTest#testStreamBody().mjava","pathOld":"src/test/org/apache/solr/servlet/SolrRequestParserTest#testStreamBody().mjava","sourceNew":"  public void testStreamBody() throws Exception\n  {\n    String body1 = \"AMANAPLANPANAMA\";\n    String body2 = \"qwertasdfgzxcvb\";\n    String body3 = \"1234567890\";\n    \n    Map<String,String[]> args = new HashMap<String, String[]>();\n    args.put( SolrParams.STREAM_BODY, new String[] {body1} );\n    \n    // Make sure it got a single stream in and out ok\n    List<ContentStream> streams = new ArrayList<ContentStream>();\n    parser.buildRequestFrom( new MultiMapSolrParams( args ), streams );\n    assertEquals( 1, streams.size() );\n    assertEquals( body1, IOUtils.toString( streams.get(0).getStream() ) );\n    \n    // Now add three and make sure they come out ok\n    streams = new ArrayList<ContentStream>();\n    args.put( SolrParams.STREAM_BODY, new String[] {body1,body2,body3} );\n    parser.buildRequestFrom( new MultiMapSolrParams( args ), streams );\n    assertEquals( 3, streams.size() );\n    ArrayList<String> input  = new ArrayList<String>();\n    ArrayList<String> output = new ArrayList<String>();\n    input.add( body1 );\n    input.add( body2 );\n    input.add( body3 );\n    output.add( IOUtils.toString( streams.get(0).getStream() ) );\n    output.add( IOUtils.toString( streams.get(1).getStream() ) );\n    output.add( IOUtils.toString( streams.get(2).getStream() ) );\n    // sort them so the output is consistent\n    Collections.sort( input );\n    Collections.sort( output );\n    assertEquals( input.toString(), output.toString() );\n    \n    // set the contentType and make sure tat gets set\n    String ctype = \"text/xxx\";\n    streams = new ArrayList<ContentStream>();\n    args.put( SolrParams.STREAM_CONTENTTYPE, new String[] {ctype} );\n    parser.buildRequestFrom( new MultiMapSolrParams( args ), streams );\n    for( ContentStream s : streams ) {\n      assertEquals( ctype, s.getContentType() );\n    }\n  }\n\n","sourceOld":"  public void testStreamBody() throws Exception\n  {\n    String body1 = \"AMANAPLANPANAMA\";\n    String body2 = \"qwertasdfgzxcvb\";\n    String body3 = \"1234567890\";\n    \n    Map<String,String[]> args = new HashMap<String, String[]>();\n    args.put( SolrParams.STREAM_BODY, new String[] {body1} );\n    \n    // Make sure it got a single stream in and out ok\n    List<ContentStream> streams = new ArrayList<ContentStream>();\n    parser.buildRequestFrom( new MultiMapSolrParams( args ), streams );\n    assertEquals( 1, streams.size() );\n    assertEquals( body1, IOUtils.toString( streams.get(0).getStream() ) );\n    \n    // Now add three and make sure they come out ok\n    streams = new ArrayList<ContentStream>();\n    args.put( SolrParams.STREAM_BODY, new String[] {body1,body2,body3} );\n    parser.buildRequestFrom( new MultiMapSolrParams( args ), streams );\n    assertEquals( 3, streams.size() );\n    ArrayList<String> input  = new ArrayList<String>();\n    ArrayList<String> output = new ArrayList<String>();\n    input.add( body1 );\n    input.add( body2 );\n    input.add( body3 );\n    output.add( IOUtils.toString( streams.get(0).getStream() ) );\n    output.add( IOUtils.toString( streams.get(1).getStream() ) );\n    output.add( IOUtils.toString( streams.get(2).getStream() ) );\n    // sort them so the output is consistent\n    Collections.sort( input );\n    Collections.sort( output );\n    assertEquals( input.toString(), output.toString() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c4fe52b26cfcf59d6b3f30b128e9f5985f2fa4ef","date":1185993405,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/test/org/apache/solr/servlet/SolrRequestParserTest#testStreamBody().mjava","pathOld":"src/test/org/apache/solr/servlet/SolrRequestParserTest#testStreamBody().mjava","sourceNew":"  public void testStreamBody() throws Exception\n  {\n    String body1 = \"AMANAPLANPANAMA\";\n    String body2 = \"qwertasdfgzxcvb\";\n    String body3 = \"1234567890\";\n    \n    Map<String,String[]> args = new HashMap<String, String[]>();\n    args.put( CommonParams.STREAM_BODY, new String[] {body1} );\n    \n    // Make sure it got a single stream in and out ok\n    List<ContentStream> streams = new ArrayList<ContentStream>();\n    parser.buildRequestFrom( new MultiMapSolrParams( args ), streams );\n    assertEquals( 1, streams.size() );\n    assertEquals( body1, IOUtils.toString( streams.get(0).getStream() ) );\n    \n    // Now add three and make sure they come out ok\n    streams = new ArrayList<ContentStream>();\n    args.put( CommonParams.STREAM_BODY, new String[] {body1,body2,body3} );\n    parser.buildRequestFrom( new MultiMapSolrParams( args ), streams );\n    assertEquals( 3, streams.size() );\n    ArrayList<String> input  = new ArrayList<String>();\n    ArrayList<String> output = new ArrayList<String>();\n    input.add( body1 );\n    input.add( body2 );\n    input.add( body3 );\n    output.add( IOUtils.toString( streams.get(0).getStream() ) );\n    output.add( IOUtils.toString( streams.get(1).getStream() ) );\n    output.add( IOUtils.toString( streams.get(2).getStream() ) );\n    // sort them so the output is consistent\n    Collections.sort( input );\n    Collections.sort( output );\n    assertEquals( input.toString(), output.toString() );\n    \n    // set the contentType and make sure tat gets set\n    String ctype = \"text/xxx\";\n    streams = new ArrayList<ContentStream>();\n    args.put( CommonParams.STREAM_CONTENTTYPE, new String[] {ctype} );\n    parser.buildRequestFrom( new MultiMapSolrParams( args ), streams );\n    for( ContentStream s : streams ) {\n      assertEquals( ctype, s.getContentType() );\n    }\n  }\n\n","sourceOld":"  public void testStreamBody() throws Exception\n  {\n    String body1 = \"AMANAPLANPANAMA\";\n    String body2 = \"qwertasdfgzxcvb\";\n    String body3 = \"1234567890\";\n    \n    Map<String,String[]> args = new HashMap<String, String[]>();\n    args.put( SolrParams.STREAM_BODY, new String[] {body1} );\n    \n    // Make sure it got a single stream in and out ok\n    List<ContentStream> streams = new ArrayList<ContentStream>();\n    parser.buildRequestFrom( new MultiMapSolrParams( args ), streams );\n    assertEquals( 1, streams.size() );\n    assertEquals( body1, IOUtils.toString( streams.get(0).getStream() ) );\n    \n    // Now add three and make sure they come out ok\n    streams = new ArrayList<ContentStream>();\n    args.put( SolrParams.STREAM_BODY, new String[] {body1,body2,body3} );\n    parser.buildRequestFrom( new MultiMapSolrParams( args ), streams );\n    assertEquals( 3, streams.size() );\n    ArrayList<String> input  = new ArrayList<String>();\n    ArrayList<String> output = new ArrayList<String>();\n    input.add( body1 );\n    input.add( body2 );\n    input.add( body3 );\n    output.add( IOUtils.toString( streams.get(0).getStream() ) );\n    output.add( IOUtils.toString( streams.get(1).getStream() ) );\n    output.add( IOUtils.toString( streams.get(2).getStream() ) );\n    // sort them so the output is consistent\n    Collections.sort( input );\n    Collections.sort( output );\n    assertEquals( input.toString(), output.toString() );\n    \n    // set the contentType and make sure tat gets set\n    String ctype = \"text/xxx\";\n    streams = new ArrayList<ContentStream>();\n    args.put( SolrParams.STREAM_CONTENTTYPE, new String[] {ctype} );\n    parser.buildRequestFrom( new MultiMapSolrParams( args ), streams );\n    for( ContentStream s : streams ) {\n      assertEquals( ctype, s.getContentType() );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"abbfb3ad1f90df8ebf4751c8e72b2756ace50699","date":1190497478,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/test/org/apache/solr/servlet/SolrRequestParserTest#testStreamBody().mjava","pathOld":"src/test/org/apache/solr/servlet/SolrRequestParserTest#testStreamBody().mjava","sourceNew":"  public void testStreamBody() throws Exception\n  {\n    String body1 = \"AMANAPLANPANAMA\";\n    String body2 = \"qwertasdfgzxcvb\";\n    String body3 = \"1234567890\";\n    \n    SolrCore core = SolrCore.getSolrCore();\n    \n    Map<String,String[]> args = new HashMap<String, String[]>();\n    args.put( CommonParams.STREAM_BODY, new String[] {body1} );\n    \n    // Make sure it got a single stream in and out ok\n    List<ContentStream> streams = new ArrayList<ContentStream>();\n    parser.buildRequestFrom( core, new MultiMapSolrParams( args ), streams );\n    assertEquals( 1, streams.size() );\n    assertEquals( body1, IOUtils.toString( streams.get(0).getStream() ) );\n    \n    // Now add three and make sure they come out ok\n    streams = new ArrayList<ContentStream>();\n    args.put( CommonParams.STREAM_BODY, new String[] {body1,body2,body3} );\n    parser.buildRequestFrom( core, new MultiMapSolrParams( args ), streams );\n    assertEquals( 3, streams.size() );\n    ArrayList<String> input  = new ArrayList<String>();\n    ArrayList<String> output = new ArrayList<String>();\n    input.add( body1 );\n    input.add( body2 );\n    input.add( body3 );\n    output.add( IOUtils.toString( streams.get(0).getStream() ) );\n    output.add( IOUtils.toString( streams.get(1).getStream() ) );\n    output.add( IOUtils.toString( streams.get(2).getStream() ) );\n    // sort them so the output is consistent\n    Collections.sort( input );\n    Collections.sort( output );\n    assertEquals( input.toString(), output.toString() );\n    \n    // set the contentType and make sure tat gets set\n    String ctype = \"text/xxx\";\n    streams = new ArrayList<ContentStream>();\n    args.put( CommonParams.STREAM_CONTENTTYPE, new String[] {ctype} );\n    parser.buildRequestFrom( core, new MultiMapSolrParams( args ), streams );\n    for( ContentStream s : streams ) {\n      assertEquals( ctype, s.getContentType() );\n    }\n  }\n\n","sourceOld":"  public void testStreamBody() throws Exception\n  {\n    String body1 = \"AMANAPLANPANAMA\";\n    String body2 = \"qwertasdfgzxcvb\";\n    String body3 = \"1234567890\";\n    \n    Map<String,String[]> args = new HashMap<String, String[]>();\n    args.put( CommonParams.STREAM_BODY, new String[] {body1} );\n    \n    // Make sure it got a single stream in and out ok\n    List<ContentStream> streams = new ArrayList<ContentStream>();\n    parser.buildRequestFrom( new MultiMapSolrParams( args ), streams );\n    assertEquals( 1, streams.size() );\n    assertEquals( body1, IOUtils.toString( streams.get(0).getStream() ) );\n    \n    // Now add three and make sure they come out ok\n    streams = new ArrayList<ContentStream>();\n    args.put( CommonParams.STREAM_BODY, new String[] {body1,body2,body3} );\n    parser.buildRequestFrom( new MultiMapSolrParams( args ), streams );\n    assertEquals( 3, streams.size() );\n    ArrayList<String> input  = new ArrayList<String>();\n    ArrayList<String> output = new ArrayList<String>();\n    input.add( body1 );\n    input.add( body2 );\n    input.add( body3 );\n    output.add( IOUtils.toString( streams.get(0).getStream() ) );\n    output.add( IOUtils.toString( streams.get(1).getStream() ) );\n    output.add( IOUtils.toString( streams.get(2).getStream() ) );\n    // sort them so the output is consistent\n    Collections.sort( input );\n    Collections.sort( output );\n    assertEquals( input.toString(), output.toString() );\n    \n    // set the contentType and make sure tat gets set\n    String ctype = \"text/xxx\";\n    streams = new ArrayList<ContentStream>();\n    args.put( CommonParams.STREAM_CONTENTTYPE, new String[] {ctype} );\n    parser.buildRequestFrom( new MultiMapSolrParams( args ), streams );\n    for( ContentStream s : streams ) {\n      assertEquals( ctype, s.getContentType() );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c90f01e1c0f11ee52212ab38c6d4393b3be8a646","date":1223059437,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/test/org/apache/solr/servlet/SolrRequestParserTest#testStreamBody().mjava","pathOld":"src/test/org/apache/solr/servlet/SolrRequestParserTest#testStreamBody().mjava","sourceNew":"  public void testStreamBody() throws Exception\n  {\n    String body1 = \"AMANAPLANPANAMA\";\n    String body2 = \"qwertasdfgzxcvb\";\n    String body3 = \"1234567890\";\n    \n    SolrCore core = h.getCore();\n    \n    Map<String,String[]> args = new HashMap<String, String[]>();\n    args.put( CommonParams.STREAM_BODY, new String[] {body1} );\n    \n    // Make sure it got a single stream in and out ok\n    List<ContentStream> streams = new ArrayList<ContentStream>();\n    parser.buildRequestFrom( core, new MultiMapSolrParams( args ), streams );\n    assertEquals( 1, streams.size() );\n    assertEquals( body1, IOUtils.toString( streams.get(0).getStream() ) );\n    \n    // Now add three and make sure they come out ok\n    streams = new ArrayList<ContentStream>();\n    args.put( CommonParams.STREAM_BODY, new String[] {body1,body2,body3} );\n    parser.buildRequestFrom( core, new MultiMapSolrParams( args ), streams );\n    assertEquals( 3, streams.size() );\n    ArrayList<String> input  = new ArrayList<String>();\n    ArrayList<String> output = new ArrayList<String>();\n    input.add( body1 );\n    input.add( body2 );\n    input.add( body3 );\n    output.add( IOUtils.toString( streams.get(0).getStream() ) );\n    output.add( IOUtils.toString( streams.get(1).getStream() ) );\n    output.add( IOUtils.toString( streams.get(2).getStream() ) );\n    // sort them so the output is consistent\n    Collections.sort( input );\n    Collections.sort( output );\n    assertEquals( input.toString(), output.toString() );\n    \n    // set the contentType and make sure tat gets set\n    String ctype = \"text/xxx\";\n    streams = new ArrayList<ContentStream>();\n    args.put( CommonParams.STREAM_CONTENTTYPE, new String[] {ctype} );\n    parser.buildRequestFrom( core, new MultiMapSolrParams( args ), streams );\n    for( ContentStream s : streams ) {\n      assertEquals( ctype, s.getContentType() );\n    }\n  }\n\n","sourceOld":"  public void testStreamBody() throws Exception\n  {\n    String body1 = \"AMANAPLANPANAMA\";\n    String body2 = \"qwertasdfgzxcvb\";\n    String body3 = \"1234567890\";\n    \n    SolrCore core = SolrCore.getSolrCore();\n    \n    Map<String,String[]> args = new HashMap<String, String[]>();\n    args.put( CommonParams.STREAM_BODY, new String[] {body1} );\n    \n    // Make sure it got a single stream in and out ok\n    List<ContentStream> streams = new ArrayList<ContentStream>();\n    parser.buildRequestFrom( core, new MultiMapSolrParams( args ), streams );\n    assertEquals( 1, streams.size() );\n    assertEquals( body1, IOUtils.toString( streams.get(0).getStream() ) );\n    \n    // Now add three and make sure they come out ok\n    streams = new ArrayList<ContentStream>();\n    args.put( CommonParams.STREAM_BODY, new String[] {body1,body2,body3} );\n    parser.buildRequestFrom( core, new MultiMapSolrParams( args ), streams );\n    assertEquals( 3, streams.size() );\n    ArrayList<String> input  = new ArrayList<String>();\n    ArrayList<String> output = new ArrayList<String>();\n    input.add( body1 );\n    input.add( body2 );\n    input.add( body3 );\n    output.add( IOUtils.toString( streams.get(0).getStream() ) );\n    output.add( IOUtils.toString( streams.get(1).getStream() ) );\n    output.add( IOUtils.toString( streams.get(2).getStream() ) );\n    // sort them so the output is consistent\n    Collections.sort( input );\n    Collections.sort( output );\n    assertEquals( input.toString(), output.toString() );\n    \n    // set the contentType and make sure tat gets set\n    String ctype = \"text/xxx\";\n    streams = new ArrayList<ContentStream>();\n    args.put( CommonParams.STREAM_CONTENTTYPE, new String[] {ctype} );\n    parser.buildRequestFrom( core, new MultiMapSolrParams( args ), streams );\n    for( ContentStream s : streams ) {\n      assertEquals( ctype, s.getContentType() );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/servlet/SolrRequestParserTest#testStreamBody().mjava","pathOld":"src/test/org/apache/solr/servlet/SolrRequestParserTest#testStreamBody().mjava","sourceNew":"  public void testStreamBody() throws Exception\n  {\n    String body1 = \"AMANAPLANPANAMA\";\n    String body2 = \"qwertasdfgzxcvb\";\n    String body3 = \"1234567890\";\n    \n    SolrCore core = h.getCore();\n    \n    Map<String,String[]> args = new HashMap<String, String[]>();\n    args.put( CommonParams.STREAM_BODY, new String[] {body1} );\n    \n    // Make sure it got a single stream in and out ok\n    List<ContentStream> streams = new ArrayList<ContentStream>();\n    parser.buildRequestFrom( core, new MultiMapSolrParams( args ), streams );\n    assertEquals( 1, streams.size() );\n    assertEquals( body1, IOUtils.toString( streams.get(0).getStream() ) );\n    \n    // Now add three and make sure they come out ok\n    streams = new ArrayList<ContentStream>();\n    args.put( CommonParams.STREAM_BODY, new String[] {body1,body2,body3} );\n    parser.buildRequestFrom( core, new MultiMapSolrParams( args ), streams );\n    assertEquals( 3, streams.size() );\n    ArrayList<String> input  = new ArrayList<String>();\n    ArrayList<String> output = new ArrayList<String>();\n    input.add( body1 );\n    input.add( body2 );\n    input.add( body3 );\n    output.add( IOUtils.toString( streams.get(0).getStream() ) );\n    output.add( IOUtils.toString( streams.get(1).getStream() ) );\n    output.add( IOUtils.toString( streams.get(2).getStream() ) );\n    // sort them so the output is consistent\n    Collections.sort( input );\n    Collections.sort( output );\n    assertEquals( input.toString(), output.toString() );\n    \n    // set the contentType and make sure tat gets set\n    String ctype = \"text/xxx\";\n    streams = new ArrayList<ContentStream>();\n    args.put( CommonParams.STREAM_CONTENTTYPE, new String[] {ctype} );\n    parser.buildRequestFrom( core, new MultiMapSolrParams( args ), streams );\n    for( ContentStream s : streams ) {\n      assertEquals( ctype, s.getContentType() );\n    }\n  }\n\n","sourceOld":"  public void testStreamBody() throws Exception\n  {\n    String body1 = \"AMANAPLANPANAMA\";\n    String body2 = \"qwertasdfgzxcvb\";\n    String body3 = \"1234567890\";\n    \n    SolrCore core = h.getCore();\n    \n    Map<String,String[]> args = new HashMap<String, String[]>();\n    args.put( CommonParams.STREAM_BODY, new String[] {body1} );\n    \n    // Make sure it got a single stream in and out ok\n    List<ContentStream> streams = new ArrayList<ContentStream>();\n    parser.buildRequestFrom( core, new MultiMapSolrParams( args ), streams );\n    assertEquals( 1, streams.size() );\n    assertEquals( body1, IOUtils.toString( streams.get(0).getStream() ) );\n    \n    // Now add three and make sure they come out ok\n    streams = new ArrayList<ContentStream>();\n    args.put( CommonParams.STREAM_BODY, new String[] {body1,body2,body3} );\n    parser.buildRequestFrom( core, new MultiMapSolrParams( args ), streams );\n    assertEquals( 3, streams.size() );\n    ArrayList<String> input  = new ArrayList<String>();\n    ArrayList<String> output = new ArrayList<String>();\n    input.add( body1 );\n    input.add( body2 );\n    input.add( body3 );\n    output.add( IOUtils.toString( streams.get(0).getStream() ) );\n    output.add( IOUtils.toString( streams.get(1).getStream() ) );\n    output.add( IOUtils.toString( streams.get(2).getStream() ) );\n    // sort them so the output is consistent\n    Collections.sort( input );\n    Collections.sort( output );\n    assertEquals( input.toString(), output.toString() );\n    \n    // set the contentType and make sure tat gets set\n    String ctype = \"text/xxx\";\n    streams = new ArrayList<ContentStream>();\n    args.put( CommonParams.STREAM_CONTENTTYPE, new String[] {ctype} );\n    parser.buildRequestFrom( core, new MultiMapSolrParams( args ), streams );\n    for( ContentStream s : streams ) {\n      assertEquals( ctype, s.getContentType() );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c4fe52b26cfcf59d6b3f30b128e9f5985f2fa4ef":["440157898846af9a00b84382942df3f6e3c41a93"],"c90f01e1c0f11ee52212ab38c6d4393b3be8a646":["abbfb3ad1f90df8ebf4751c8e72b2756ace50699"],"440157898846af9a00b84382942df3f6e3c41a93":["d80013b5e260def972025c93a0b08524f9c38f49"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["c90f01e1c0f11ee52212ab38c6d4393b3be8a646"],"abbfb3ad1f90df8ebf4751c8e72b2756ace50699":["c4fe52b26cfcf59d6b3f30b128e9f5985f2fa4ef"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d80013b5e260def972025c93a0b08524f9c38f49":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"]},"commit2Childs":{"c4fe52b26cfcf59d6b3f30b128e9f5985f2fa4ef":["abbfb3ad1f90df8ebf4751c8e72b2756ace50699"],"440157898846af9a00b84382942df3f6e3c41a93":["c4fe52b26cfcf59d6b3f30b128e9f5985f2fa4ef"],"c90f01e1c0f11ee52212ab38c6d4393b3be8a646":["ad94625fb8d088209f46650c8097196fec67f00c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["d80013b5e260def972025c93a0b08524f9c38f49"],"abbfb3ad1f90df8ebf4751c8e72b2756ace50699":["c90f01e1c0f11ee52212ab38c6d4393b3be8a646"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"d80013b5e260def972025c93a0b08524f9c38f49":["440157898846af9a00b84382942df3f6e3c41a93"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}