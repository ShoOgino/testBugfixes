{"path":"src/test/org/apache/lucene/store/MockRAMOutputStream#flushBuffer(byte[],int).mjava","commits":[{"id":"eeefd99c477417e5c7c574228461ebafe92469d4","date":1166460329,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/store/MockRAMOutputStream#flushBuffer(byte[],int).mjava","pathOld":"/dev/null","sourceNew":"  public void flushBuffer(byte[] src, int len) throws IOException {\n    long freeSpace = dir.maxSize - dir.sizeInBytes();\n    long realUsage = 0;\n\n    // Enforce disk full:\n    if (dir.maxSize != 0 && freeSpace <= len) {\n      // Compute the real disk free.  This will greatly slow\n      // down our test but makes it more accurate:\n      realUsage = dir.getRecomputedActualSizeInBytes();\n      freeSpace = dir.maxSize - realUsage;\n    }\n\n    if (dir.maxSize != 0 && freeSpace <= len) {\n      if (freeSpace > 0 && freeSpace < len) {\n        realUsage += freeSpace;\n        super.flushBuffer(src, (int) freeSpace);\n      }\n      if (realUsage > dir.maxUsedSize) {\n        dir.maxUsedSize = realUsage;\n      }\n      throw new IOException(\"fake disk full at \" + dir.sizeInBytes() + \" bytes\");\n    } else {\n      super.flushBuffer(src, len);\n    }\n\n    if (first) {\n      // Maybe throw random exception; only do this on first\n      // write to a new file:\n      first = false;\n      dir.maybeThrowIOException();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b6187898fc4413ccd18229711786550a280383c","date":1173776782,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/store/MockRAMOutputStream#flushBuffer(byte[],int).mjava","pathOld":"src/test/org/apache/lucene/store/MockRAMOutputStream#flushBuffer(byte[],int).mjava","sourceNew":"  public void flushBuffer(byte[] src, int len) throws IOException {\n    long freeSpace = dir.maxSize - dir.sizeInBytes();\n    long realUsage = 0;\n\n    // Enforce disk full:\n    if (dir.maxSize != 0 && freeSpace <= len) {\n      // Compute the real disk free.  This will greatly slow\n      // down our test but makes it more accurate:\n      realUsage = dir.getRecomputedActualSizeInBytes();\n      freeSpace = dir.maxSize - realUsage;\n    }\n\n    if (dir.maxSize != 0 && freeSpace <= len) {\n      if (freeSpace > 0 && freeSpace < len) {\n        realUsage += freeSpace;\n        super.flushBuffer(src, (int) freeSpace);\n      }\n      if (realUsage > dir.maxUsedSize) {\n        dir.maxUsedSize = realUsage;\n      }\n      throw new IOException(\"fake disk full at \" + dir.getRecomputedActualSizeInBytes() + \" bytes\");\n    } else {\n      super.flushBuffer(src, len);\n    }\n\n    if (first) {\n      // Maybe throw random exception; only do this on first\n      // write to a new file:\n      first = false;\n      dir.maybeThrowIOException();\n    }\n  }\n\n","sourceOld":"  public void flushBuffer(byte[] src, int len) throws IOException {\n    long freeSpace = dir.maxSize - dir.sizeInBytes();\n    long realUsage = 0;\n\n    // Enforce disk full:\n    if (dir.maxSize != 0 && freeSpace <= len) {\n      // Compute the real disk free.  This will greatly slow\n      // down our test but makes it more accurate:\n      realUsage = dir.getRecomputedActualSizeInBytes();\n      freeSpace = dir.maxSize - realUsage;\n    }\n\n    if (dir.maxSize != 0 && freeSpace <= len) {\n      if (freeSpace > 0 && freeSpace < len) {\n        realUsage += freeSpace;\n        super.flushBuffer(src, (int) freeSpace);\n      }\n      if (realUsage > dir.maxUsedSize) {\n        dir.maxUsedSize = realUsage;\n      }\n      throw new IOException(\"fake disk full at \" + dir.sizeInBytes() + \" bytes\");\n    } else {\n      super.flushBuffer(src, len);\n    }\n\n    if (first) {\n      // Maybe throw random exception; only do this on first\n      // write to a new file:\n      first = false;\n      dir.maybeThrowIOException();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8522ae207a56c6db28ca06fe6cc33e70911c3600","date":1173935743,"type":5,"author":"Michael Busch","isMerge":false,"pathNew":"src/test/org/apache/lucene/store/MockRAMOutputStream#flushBuffer(byte[],int,int).mjava","pathOld":"src/test/org/apache/lucene/store/MockRAMOutputStream#flushBuffer(byte[],int).mjava","sourceNew":"  public void flushBuffer(byte[] src, int offset, int len) throws IOException {\n    long freeSpace = dir.maxSize - dir.sizeInBytes();\n    long realUsage = 0;\n\n    // Enforce disk full:\n    if (dir.maxSize != 0 && freeSpace <= len) {\n      // Compute the real disk free.  This will greatly slow\n      // down our test but makes it more accurate:\n      realUsage = dir.getRecomputedActualSizeInBytes();\n      freeSpace = dir.maxSize - realUsage;\n    }\n\n    if (dir.maxSize != 0 && freeSpace <= len) {\n      if (freeSpace > 0 && freeSpace < len) {\n        realUsage += freeSpace;\n        super.flushBuffer(src, offset, (int) freeSpace);\n      }\n      if (realUsage > dir.maxUsedSize) {\n        dir.maxUsedSize = realUsage;\n      }\n      throw new IOException(\"fake disk full at \" + dir.getRecomputedActualSizeInBytes() + \" bytes\");\n    } else {\n      super.flushBuffer(src, offset, len);\n    }\n\n    if (first) {\n      // Maybe throw random exception; only do this on first\n      // write to a new file:\n      first = false;\n      dir.maybeThrowIOException();\n    }\n  }\n\n","sourceOld":"  public void flushBuffer(byte[] src, int len) throws IOException {\n    long freeSpace = dir.maxSize - dir.sizeInBytes();\n    long realUsage = 0;\n\n    // Enforce disk full:\n    if (dir.maxSize != 0 && freeSpace <= len) {\n      // Compute the real disk free.  This will greatly slow\n      // down our test but makes it more accurate:\n      realUsage = dir.getRecomputedActualSizeInBytes();\n      freeSpace = dir.maxSize - realUsage;\n    }\n\n    if (dir.maxSize != 0 && freeSpace <= len) {\n      if (freeSpace > 0 && freeSpace < len) {\n        realUsage += freeSpace;\n        super.flushBuffer(src, (int) freeSpace);\n      }\n      if (realUsage > dir.maxUsedSize) {\n        dir.maxUsedSize = realUsage;\n      }\n      throw new IOException(\"fake disk full at \" + dir.getRecomputedActualSizeInBytes() + \" bytes\");\n    } else {\n      super.flushBuffer(src, len);\n    }\n\n    if (first) {\n      // Maybe throw random exception; only do this on first\n      // write to a new file:\n      first = false;\n      dir.maybeThrowIOException();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"eeefd99c477417e5c7c574228461ebafe92469d4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8522ae207a56c6db28ca06fe6cc33e70911c3600":["8b6187898fc4413ccd18229711786550a280383c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8b6187898fc4413ccd18229711786550a280383c":["eeefd99c477417e5c7c574228461ebafe92469d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8522ae207a56c6db28ca06fe6cc33e70911c3600"]},"commit2Childs":{"eeefd99c477417e5c7c574228461ebafe92469d4":["8b6187898fc4413ccd18229711786550a280383c"],"8522ae207a56c6db28ca06fe6cc33e70911c3600":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["eeefd99c477417e5c7c574228461ebafe92469d4"],"8b6187898fc4413ccd18229711786550a280383c":["8522ae207a56c6db28ca06fe6cc33e70911c3600"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}