{"path":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl#getTermsIndex(AtomicReader,String,float).mjava","commits":[{"id":"4a470c93b2b0f8f51241f52705fc110a01f27ad2","date":1337969379,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl#getTermsIndex(AtomicReader,String,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl#getTermsIndex(AtomicReader,String,boolean).mjava","sourceNew":"  public DocTermsIndex getTermsIndex(AtomicReader reader, String field, float acceptableOverheadRatio) throws IOException {\n    return (DocTermsIndex) caches.get(DocTermsIndex.class).get(reader, new Entry(field, acceptableOverheadRatio), false);\n  }\n\n","sourceOld":"  public DocTermsIndex getTermsIndex(AtomicReader reader, String field, boolean fasterButMoreRAM) throws IOException {\n    return (DocTermsIndex) caches.get(DocTermsIndex.class).get(reader, new Entry(field, Boolean.valueOf(fasterButMoreRAM)), false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a4d374b2bebd0d52acaa61038fbf23068620fba7","date":1353240004,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl#getTermsIndex(AtomicReader,String,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl#getTermsIndex(AtomicReader,String,float).mjava","sourceNew":"  public DocTermsIndex getTermsIndex(AtomicReader reader, String field, float acceptableOverheadRatio) throws IOException {\n    return (DocTermsIndex) caches.get(DocTermsIndex.class).get(reader, new CacheKey(field, acceptableOverheadRatio), false);\n  }\n\n","sourceOld":"  public DocTermsIndex getTermsIndex(AtomicReader reader, String field, float acceptableOverheadRatio) throws IOException {\n    return (DocTermsIndex) caches.get(DocTermsIndex.class).get(reader, new Entry(field, acceptableOverheadRatio), false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9d7e5f3aa5935964617824d1f9b2599ddb334464","date":1353762831,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl#getTermsIndex(AtomicReader,String,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl#getTermsIndex(AtomicReader,String,float).mjava","sourceNew":"  public SortedDocValues getTermsIndex(AtomicReader reader, String field, float acceptableOverheadRatio) throws IOException {\n    return (SortedDocValues) caches.get(SortedDocValues.class).get(reader, new CacheKey(field, acceptableOverheadRatio), false);\n  }\n\n","sourceOld":"  public DocTermsIndex getTermsIndex(AtomicReader reader, String field, float acceptableOverheadRatio) throws IOException {\n    return (DocTermsIndex) caches.get(DocTermsIndex.class).get(reader, new CacheKey(field, acceptableOverheadRatio), false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7530de27b87b961b51f01bd1299b7004d46e8823","date":1355236261,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl#getTermsIndex(AtomicReader,String,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl#getTermsIndex(AtomicReader,String,float).mjava","sourceNew":"  @Override\n  public DocTermsIndex getTermsIndex(AtomicReader reader, String field, float acceptableOverheadRatio) throws IOException {\n    return (DocTermsIndex) caches.get(DocTermsIndex.class).get(reader, new Entry(field, acceptableOverheadRatio), false);\n  }\n\n","sourceOld":"  public DocTermsIndex getTermsIndex(AtomicReader reader, String field, float acceptableOverheadRatio) throws IOException {\n    return (DocTermsIndex) caches.get(DocTermsIndex.class).get(reader, new Entry(field, acceptableOverheadRatio), false);\n  }\n\n","bugFix":null,"bugIntro":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6312aec6ba581f919d406ceff362bef430382c31","date":1358775555,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl#getTermsIndex(AtomicReader,String,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl#getTermsIndex(AtomicReader,String,float).mjava","sourceNew":"  public SortedDocValues getTermsIndex(AtomicReader reader, String field, float acceptableOverheadRatio) throws IOException {\n    SortedDocValues valuesIn = reader.getSortedDocValues(field);\n    if (valuesIn != null) {\n      // Not cached here by FieldCacheImpl (cached instead\n      // per-thread by SegmentReader):\n      return valuesIn;\n    } else {\n      return (SortedDocValues) caches.get(SortedDocValues.class).get(reader, new CacheKey(field, acceptableOverheadRatio), false);\n    }\n  }\n\n","sourceOld":"  public SortedDocValues getTermsIndex(AtomicReader reader, String field, float acceptableOverheadRatio) throws IOException {\n    return (SortedDocValues) caches.get(SortedDocValues.class).get(reader, new CacheKey(field, acceptableOverheadRatio), false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"95ed9310f6ea1ae4d94c27ea71c957439bca684b","date":1359133583,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl#getTermsIndex(AtomicReader,String,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl#getTermsIndex(AtomicReader,String,float).mjava","sourceNew":"  public SortedDocValues getTermsIndex(AtomicReader reader, String field, float acceptableOverheadRatio) throws IOException {\n    SortedDocValues valuesIn = reader.getSortedDocValues(field);\n    if (valuesIn != null) {\n      // Not cached here by FieldCacheImpl (cached instead\n      // per-thread by SegmentReader):\n      return valuesIn;\n    } else {\n      final FieldInfo info = reader.getFieldInfos().fieldInfo(field);\n      if (info != null && !info.isIndexed() && info.hasDocValues()) {\n        // we don't try to build a sorted instance from numeric/binary doc\n        // values because dedup can be very costly\n        throw new IllegalArgumentException(\"Cannot get terms index for \\\"\" + field\n            + \"\\\": it isn't indexed and doesn't have sorted doc values\");\n      }\n      return (SortedDocValues) caches.get(SortedDocValues.class).get(reader, new CacheKey(field, acceptableOverheadRatio), false);\n    }\n  }\n\n","sourceOld":"  public SortedDocValues getTermsIndex(AtomicReader reader, String field, float acceptableOverheadRatio) throws IOException {\n    SortedDocValues valuesIn = reader.getSortedDocValues(field);\n    if (valuesIn != null) {\n      // Not cached here by FieldCacheImpl (cached instead\n      // per-thread by SegmentReader):\n      return valuesIn;\n    } else {\n      return (SortedDocValues) caches.get(SortedDocValues.class).get(reader, new CacheKey(field, acceptableOverheadRatio), false);\n    }\n  }\n\n","bugFix":null,"bugIntro":["b4e0d3f6116e64a8ab4c338fed19498407856738"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl#getTermsIndex(AtomicReader,String,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl#getTermsIndex(AtomicReader,String,float).mjava","sourceNew":"  public SortedDocValues getTermsIndex(AtomicReader reader, String field, float acceptableOverheadRatio) throws IOException {\n    SortedDocValues valuesIn = reader.getSortedDocValues(field);\n    if (valuesIn != null) {\n      // Not cached here by FieldCacheImpl (cached instead\n      // per-thread by SegmentReader):\n      return valuesIn;\n    } else {\n      final FieldInfo info = reader.getFieldInfos().fieldInfo(field);\n      if (info != null && !info.isIndexed() && info.hasDocValues()) {\n        // we don't try to build a sorted instance from numeric/binary doc\n        // values because dedup can be very costly\n        throw new IllegalArgumentException(\"Cannot get terms index for \\\"\" + field\n            + \"\\\": it isn't indexed and doesn't have sorted doc values\");\n      }\n      return (SortedDocValues) caches.get(SortedDocValues.class).get(reader, new CacheKey(field, acceptableOverheadRatio), false);\n    }\n  }\n\n","sourceOld":"  @Override\n  public DocTermsIndex getTermsIndex(AtomicReader reader, String field, float acceptableOverheadRatio) throws IOException {\n    return (DocTermsIndex) caches.get(DocTermsIndex.class).get(reader, new Entry(field, acceptableOverheadRatio), false);\n  }\n\n","bugFix":["7530de27b87b961b51f01bd1299b7004d46e8823","4a470c93b2b0f8f51241f52705fc110a01f27ad2"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fd4c0978a282e44867032b4d99f280a07fa16321","date":1360738062,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl#getTermsIndex(AtomicReader,String,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl#getTermsIndex(AtomicReader,String,float).mjava","sourceNew":"  public SortedDocValues getTermsIndex(AtomicReader reader, String field, float acceptableOverheadRatio) throws IOException {\n    SortedDocValues valuesIn = reader.getSortedDocValues(field);\n    if (valuesIn != null) {\n      // Not cached here by FieldCacheImpl (cached instead\n      // per-thread by SegmentReader):\n      return valuesIn;\n    } else {\n      final FieldInfo info = reader.getFieldInfos().fieldInfo(field);\n      if (info != null && info.hasDocValues()) {\n        // we don't try to build a sorted instance from numeric/binary doc\n        // values because dedup can be very costly\n        throw new IllegalStateException(\"Type mismatch: \" + field + \" was indexed as \" + info.getDocValuesType());\n      }\n      if (info != null && !info.isIndexed()) {\n        throw new IllegalArgumentException(\"Cannot get terms index for \\\"\" + field\n            + \"\\\": it isn't indexed and doesn't have sorted doc values\");\n      }\n      return (SortedDocValues) caches.get(SortedDocValues.class).get(reader, new CacheKey(field, acceptableOverheadRatio), false);\n    }\n  }\n\n","sourceOld":"  public SortedDocValues getTermsIndex(AtomicReader reader, String field, float acceptableOverheadRatio) throws IOException {\n    SortedDocValues valuesIn = reader.getSortedDocValues(field);\n    if (valuesIn != null) {\n      // Not cached here by FieldCacheImpl (cached instead\n      // per-thread by SegmentReader):\n      return valuesIn;\n    } else {\n      final FieldInfo info = reader.getFieldInfos().fieldInfo(field);\n      if (info != null && !info.isIndexed() && info.hasDocValues()) {\n        // we don't try to build a sorted instance from numeric/binary doc\n        // values because dedup can be very costly\n        throw new IllegalArgumentException(\"Cannot get terms index for \\\"\" + field\n            + \"\\\": it isn't indexed and doesn't have sorted doc values\");\n      }\n      return (SortedDocValues) caches.get(SortedDocValues.class).get(reader, new CacheKey(field, acceptableOverheadRatio), false);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"08df901046e2bf7914ed4e142aa64ca7b2f40114","date":1360778343,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl#getTermsIndex(AtomicReader,String,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl#getTermsIndex(AtomicReader,String,float).mjava","sourceNew":"  public SortedDocValues getTermsIndex(AtomicReader reader, String field, float acceptableOverheadRatio) throws IOException {\n    SortedDocValues valuesIn = reader.getSortedDocValues(field);\n    if (valuesIn != null) {\n      // Not cached here by FieldCacheImpl (cached instead\n      // per-thread by SegmentReader):\n      return valuesIn;\n    } else {\n      final FieldInfo info = reader.getFieldInfos().fieldInfo(field);\n      if (info != null && info.hasDocValues()) {\n        // we don't try to build a sorted instance from numeric/binary doc\n        // values because dedup can be very costly\n        throw new IllegalStateException(\"Type mismatch: \" + field + \" was indexed as \" + info.getDocValuesType());\n      }\n      if (info != null && !info.isIndexed()) {\n        throw new IllegalArgumentException(\"Cannot get terms index for \\\"\" + field\n            + \"\\\": it isn't indexed and doesn't have sorted doc values\");\n      }\n      return (SortedDocValues) caches.get(SortedDocValues.class).get(reader, new CacheKey(field, acceptableOverheadRatio), false);\n    }\n  }\n\n","sourceOld":"  public SortedDocValues getTermsIndex(AtomicReader reader, String field, float acceptableOverheadRatio) throws IOException {\n    SortedDocValues valuesIn = reader.getSortedDocValues(field);\n    if (valuesIn != null) {\n      // Not cached here by FieldCacheImpl (cached instead\n      // per-thread by SegmentReader):\n      return valuesIn;\n    } else {\n      final FieldInfo info = reader.getFieldInfos().fieldInfo(field);\n      if (info != null && !info.isIndexed() && info.hasDocValues()) {\n        // we don't try to build a sorted instance from numeric/binary doc\n        // values because dedup can be very costly\n        throw new IllegalArgumentException(\"Cannot get terms index for \\\"\" + field\n            + \"\\\": it isn't indexed and doesn't have sorted doc values\");\n      }\n      return (SortedDocValues) caches.get(SortedDocValues.class).get(reader, new CacheKey(field, acceptableOverheadRatio), false);\n    }\n  }\n\n","bugFix":null,"bugIntro":["b4e0d3f6116e64a8ab4c338fed19498407856738"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b4e0d3f6116e64a8ab4c338fed19498407856738","date":1360786773,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl#getTermsIndex(AtomicReader,String,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl#getTermsIndex(AtomicReader,String,float).mjava","sourceNew":"  public SortedDocValues getTermsIndex(AtomicReader reader, String field, float acceptableOverheadRatio) throws IOException {\n    SortedDocValues valuesIn = reader.getSortedDocValues(field);\n    if (valuesIn != null) {\n      // Not cached here by FieldCacheImpl (cached instead\n      // per-thread by SegmentReader):\n      return valuesIn;\n    } else {\n      final FieldInfo info = reader.getFieldInfos().fieldInfo(field);\n      if (info == null) {\n        return EMPTY_TERMSINDEX;\n      } else if (info.hasDocValues()) {\n        // we don't try to build a sorted instance from numeric/binary doc\n        // values because dedup can be very costly\n        throw new IllegalStateException(\"Type mismatch: \" + field + \" was indexed as \" + info.getDocValuesType());\n      } else if (!info.isIndexed()) {\n        return EMPTY_TERMSINDEX;\n      }\n      return (SortedDocValues) caches.get(SortedDocValues.class).get(reader, new CacheKey(field, acceptableOverheadRatio), false);\n    }\n  }\n\n","sourceOld":"  public SortedDocValues getTermsIndex(AtomicReader reader, String field, float acceptableOverheadRatio) throws IOException {\n    SortedDocValues valuesIn = reader.getSortedDocValues(field);\n    if (valuesIn != null) {\n      // Not cached here by FieldCacheImpl (cached instead\n      // per-thread by SegmentReader):\n      return valuesIn;\n    } else {\n      final FieldInfo info = reader.getFieldInfos().fieldInfo(field);\n      if (info != null && info.hasDocValues()) {\n        // we don't try to build a sorted instance from numeric/binary doc\n        // values because dedup can be very costly\n        throw new IllegalStateException(\"Type mismatch: \" + field + \" was indexed as \" + info.getDocValuesType());\n      }\n      if (info != null && !info.isIndexed()) {\n        throw new IllegalArgumentException(\"Cannot get terms index for \\\"\" + field\n            + \"\\\": it isn't indexed and doesn't have sorted doc values\");\n      }\n      return (SortedDocValues) caches.get(SortedDocValues.class).get(reader, new CacheKey(field, acceptableOverheadRatio), false);\n    }\n  }\n\n","bugFix":["08df901046e2bf7914ed4e142aa64ca7b2f40114","95ed9310f6ea1ae4d94c27ea71c957439bca684b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f9453e226f2896430e77ec8e7837c1441a9aeb0","date":1360788152,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl#getTermsIndex(AtomicReader,String,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl#getTermsIndex(AtomicReader,String,float).mjava","sourceNew":"  public SortedDocValues getTermsIndex(AtomicReader reader, String field, float acceptableOverheadRatio) throws IOException {\n    SortedDocValues valuesIn = reader.getSortedDocValues(field);\n    if (valuesIn != null) {\n      // Not cached here by FieldCacheImpl (cached instead\n      // per-thread by SegmentReader):\n      return valuesIn;\n    } else {\n      final FieldInfo info = reader.getFieldInfos().fieldInfo(field);\n      if (info == null) {\n        return EMPTY_TERMSINDEX;\n      } else if (info.hasDocValues()) {\n        // we don't try to build a sorted instance from numeric/binary doc\n        // values because dedup can be very costly\n        throw new IllegalStateException(\"Type mismatch: \" + field + \" was indexed as \" + info.getDocValuesType());\n      } else if (!info.isIndexed()) {\n        return EMPTY_TERMSINDEX;\n      }\n      return (SortedDocValues) caches.get(SortedDocValues.class).get(reader, new CacheKey(field, acceptableOverheadRatio), false);\n    }\n  }\n\n","sourceOld":"  public SortedDocValues getTermsIndex(AtomicReader reader, String field, float acceptableOverheadRatio) throws IOException {\n    SortedDocValues valuesIn = reader.getSortedDocValues(field);\n    if (valuesIn != null) {\n      // Not cached here by FieldCacheImpl (cached instead\n      // per-thread by SegmentReader):\n      return valuesIn;\n    } else {\n      final FieldInfo info = reader.getFieldInfos().fieldInfo(field);\n      if (info != null && info.hasDocValues()) {\n        // we don't try to build a sorted instance from numeric/binary doc\n        // values because dedup can be very costly\n        throw new IllegalStateException(\"Type mismatch: \" + field + \" was indexed as \" + info.getDocValuesType());\n      }\n      if (info != null && !info.isIndexed()) {\n        throw new IllegalArgumentException(\"Cannot get terms index for \\\"\" + field\n            + \"\\\": it isn't indexed and doesn't have sorted doc values\");\n      }\n      return (SortedDocValues) caches.get(SortedDocValues.class).get(reader, new CacheKey(field, acceptableOverheadRatio), false);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9faa42f41b6adb98daf009cf99a4ee239189e469","date":1376648738,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl#getTermsIndex(AtomicReader,String,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl#getTermsIndex(AtomicReader,String,float).mjava","sourceNew":"  public SortedDocValues getTermsIndex(AtomicReader reader, String field, float acceptableOverheadRatio) throws IOException {\n    SortedDocValues valuesIn = reader.getSortedDocValues(field);\n    if (valuesIn != null) {\n      // Not cached here by FieldCacheImpl (cached instead\n      // per-thread by SegmentReader):\n      return valuesIn;\n    } else {\n      final FieldInfo info = reader.getFieldInfos().fieldInfo(field);\n      if (info == null) {\n        return SortedDocValues.EMPTY;\n      } else if (info.hasDocValues()) {\n        // we don't try to build a sorted instance from numeric/binary doc\n        // values because dedup can be very costly\n        throw new IllegalStateException(\"Type mismatch: \" + field + \" was indexed as \" + info.getDocValuesType());\n      } else if (!info.isIndexed()) {\n        return SortedDocValues.EMPTY;\n      }\n      return (SortedDocValues) caches.get(SortedDocValues.class).get(reader, new CacheKey(field, acceptableOverheadRatio), false);\n    }\n  }\n\n","sourceOld":"  public SortedDocValues getTermsIndex(AtomicReader reader, String field, float acceptableOverheadRatio) throws IOException {\n    SortedDocValues valuesIn = reader.getSortedDocValues(field);\n    if (valuesIn != null) {\n      // Not cached here by FieldCacheImpl (cached instead\n      // per-thread by SegmentReader):\n      return valuesIn;\n    } else {\n      final FieldInfo info = reader.getFieldInfos().fieldInfo(field);\n      if (info == null) {\n        return EMPTY_TERMSINDEX;\n      } else if (info.hasDocValues()) {\n        // we don't try to build a sorted instance from numeric/binary doc\n        // values because dedup can be very costly\n        throw new IllegalStateException(\"Type mismatch: \" + field + \" was indexed as \" + info.getDocValuesType());\n      } else if (!info.isIndexed()) {\n        return EMPTY_TERMSINDEX;\n      }\n      return (SortedDocValues) caches.get(SortedDocValues.class).get(reader, new CacheKey(field, acceptableOverheadRatio), false);\n    }\n  }\n\n","bugFix":null,"bugIntro":["8429ddf2214f2bf8abcbb5484fefef6aaf5c417e"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff","date":1377034255,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl#getTermsIndex(AtomicReader,String,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl#getTermsIndex(AtomicReader,String,float).mjava","sourceNew":"  public SortedDocValues getTermsIndex(AtomicReader reader, String field, float acceptableOverheadRatio) throws IOException {\n    SortedDocValues valuesIn = reader.getSortedDocValues(field);\n    if (valuesIn != null) {\n      // Not cached here by FieldCacheImpl (cached instead\n      // per-thread by SegmentReader):\n      return valuesIn;\n    } else {\n      final FieldInfo info = reader.getFieldInfos().fieldInfo(field);\n      if (info == null) {\n        return SortedDocValues.EMPTY;\n      } else if (info.hasDocValues()) {\n        // we don't try to build a sorted instance from numeric/binary doc\n        // values because dedup can be very costly\n        throw new IllegalStateException(\"Type mismatch: \" + field + \" was indexed as \" + info.getDocValuesType());\n      } else if (!info.isIndexed()) {\n        return SortedDocValues.EMPTY;\n      }\n      return (SortedDocValues) caches.get(SortedDocValues.class).get(reader, new CacheKey(field, acceptableOverheadRatio), false);\n    }\n  }\n\n","sourceOld":"  public SortedDocValues getTermsIndex(AtomicReader reader, String field, float acceptableOverheadRatio) throws IOException {\n    SortedDocValues valuesIn = reader.getSortedDocValues(field);\n    if (valuesIn != null) {\n      // Not cached here by FieldCacheImpl (cached instead\n      // per-thread by SegmentReader):\n      return valuesIn;\n    } else {\n      final FieldInfo info = reader.getFieldInfos().fieldInfo(field);\n      if (info == null) {\n        return EMPTY_TERMSINDEX;\n      } else if (info.hasDocValues()) {\n        // we don't try to build a sorted instance from numeric/binary doc\n        // values because dedup can be very costly\n        throw new IllegalStateException(\"Type mismatch: \" + field + \" was indexed as \" + info.getDocValuesType());\n      } else if (!info.isIndexed()) {\n        return EMPTY_TERMSINDEX;\n      }\n      return (SortedDocValues) caches.get(SortedDocValues.class).get(reader, new CacheKey(field, acceptableOverheadRatio), false);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3dffec77fb8f7d0e9ca4869dddd6af94528b4576","date":1377875202,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl#getTermsIndex(AtomicReader,String,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl#getTermsIndex(AtomicReader,String,float).mjava","sourceNew":"  public SortedDocValues getTermsIndex(AtomicReader reader, String field, float acceptableOverheadRatio) throws IOException {\n    SortedDocValues valuesIn = reader.getSortedDocValues(field);\n    if (valuesIn != null) {\n      // Not cached here by FieldCacheImpl (cached instead\n      // per-thread by SegmentReader):\n      return valuesIn;\n    } else {\n      final FieldInfo info = reader.getFieldInfos().fieldInfo(field);\n      if (info == null) {\n        return SortedDocValues.EMPTY;\n      } else if (info.hasDocValues()) {\n        // we don't try to build a sorted instance from numeric/binary doc\n        // values because dedup can be very costly\n        throw new IllegalStateException(\"Type mismatch: \" + field + \" was indexed as \" + info.getDocValuesType());\n      } else if (!info.isIndexed()) {\n        return SortedDocValues.EMPTY;\n      }\n      return (SortedDocValues) caches.get(SortedDocValues.class).get(reader, new CacheKey(field, acceptableOverheadRatio), false);\n    }\n  }\n\n","sourceOld":"  public SortedDocValues getTermsIndex(AtomicReader reader, String field, float acceptableOverheadRatio) throws IOException {\n    SortedDocValues valuesIn = reader.getSortedDocValues(field);\n    if (valuesIn != null) {\n      // Not cached here by FieldCacheImpl (cached instead\n      // per-thread by SegmentReader):\n      return valuesIn;\n    } else {\n      final FieldInfo info = reader.getFieldInfos().fieldInfo(field);\n      if (info == null) {\n        return EMPTY_TERMSINDEX;\n      } else if (info.hasDocValues()) {\n        // we don't try to build a sorted instance from numeric/binary doc\n        // values because dedup can be very costly\n        throw new IllegalStateException(\"Type mismatch: \" + field + \" was indexed as \" + info.getDocValuesType());\n      } else if (!info.isIndexed()) {\n        return EMPTY_TERMSINDEX;\n      }\n      return (SortedDocValues) caches.get(SortedDocValues.class).get(reader, new CacheKey(field, acceptableOverheadRatio), false);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8429ddf2214f2bf8abcbb5484fefef6aaf5c417e","date":1397206443,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl#getTermsIndex(AtomicReader,String,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl#getTermsIndex(AtomicReader,String,float).mjava","sourceNew":"  public SortedDocValues getTermsIndex(AtomicReader reader, String field, float acceptableOverheadRatio) throws IOException {\n    SortedDocValues valuesIn = reader.getSortedDocValues(field);\n    if (valuesIn != null) {\n      // Not cached here by FieldCacheImpl (cached instead\n      // per-thread by SegmentReader):\n      return valuesIn;\n    } else {\n      final FieldInfo info = reader.getFieldInfos().fieldInfo(field);\n      if (info == null) {\n        return DocValues.EMPTY_SORTED;\n      } else if (info.hasDocValues()) {\n        // we don't try to build a sorted instance from numeric/binary doc\n        // values because dedup can be very costly\n        throw new IllegalStateException(\"Type mismatch: \" + field + \" was indexed as \" + info.getDocValuesType());\n      } else if (!info.isIndexed()) {\n        return DocValues.EMPTY_SORTED;\n      }\n      return (SortedDocValues) caches.get(SortedDocValues.class).get(reader, new CacheKey(field, acceptableOverheadRatio), false);\n    }\n  }\n\n","sourceOld":"  public SortedDocValues getTermsIndex(AtomicReader reader, String field, float acceptableOverheadRatio) throws IOException {\n    SortedDocValues valuesIn = reader.getSortedDocValues(field);\n    if (valuesIn != null) {\n      // Not cached here by FieldCacheImpl (cached instead\n      // per-thread by SegmentReader):\n      return valuesIn;\n    } else {\n      final FieldInfo info = reader.getFieldInfos().fieldInfo(field);\n      if (info == null) {\n        return SortedDocValues.EMPTY;\n      } else if (info.hasDocValues()) {\n        // we don't try to build a sorted instance from numeric/binary doc\n        // values because dedup can be very costly\n        throw new IllegalStateException(\"Type mismatch: \" + field + \" was indexed as \" + info.getDocValuesType());\n      } else if (!info.isIndexed()) {\n        return SortedDocValues.EMPTY;\n      }\n      return (SortedDocValues) caches.get(SortedDocValues.class).get(reader, new CacheKey(field, acceptableOverheadRatio), false);\n    }\n  }\n\n","bugFix":["9faa42f41b6adb98daf009cf99a4ee239189e469"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c","date":1399816179,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/uninverting/FieldCacheImpl#getTermsIndex(AtomicReader,String,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl#getTermsIndex(AtomicReader,String,float).mjava","sourceNew":"  public SortedDocValues getTermsIndex(AtomicReader reader, String field, float acceptableOverheadRatio) throws IOException {\n    SortedDocValues valuesIn = reader.getSortedDocValues(field);\n    if (valuesIn != null) {\n      // Not cached here by FieldCacheImpl (cached instead\n      // per-thread by SegmentReader):\n      return valuesIn;\n    } else {\n      final FieldInfo info = reader.getFieldInfos().fieldInfo(field);\n      if (info == null) {\n        return DocValues.EMPTY_SORTED;\n      } else if (info.hasDocValues()) {\n        // we don't try to build a sorted instance from numeric/binary doc\n        // values because dedup can be very costly\n        throw new IllegalStateException(\"Type mismatch: \" + field + \" was indexed as \" + info.getDocValuesType());\n      } else if (!info.isIndexed()) {\n        return DocValues.EMPTY_SORTED;\n      }\n      return (SortedDocValues) caches.get(SortedDocValues.class).get(reader, new CacheKey(field, acceptableOverheadRatio), false);\n    }\n  }\n\n","sourceOld":"  public SortedDocValues getTermsIndex(AtomicReader reader, String field, float acceptableOverheadRatio) throws IOException {\n    SortedDocValues valuesIn = reader.getSortedDocValues(field);\n    if (valuesIn != null) {\n      // Not cached here by FieldCacheImpl (cached instead\n      // per-thread by SegmentReader):\n      return valuesIn;\n    } else {\n      final FieldInfo info = reader.getFieldInfos().fieldInfo(field);\n      if (info == null) {\n        return DocValues.EMPTY_SORTED;\n      } else if (info.hasDocValues()) {\n        // we don't try to build a sorted instance from numeric/binary doc\n        // values because dedup can be very costly\n        throw new IllegalStateException(\"Type mismatch: \" + field + \" was indexed as \" + info.getDocValuesType());\n      } else if (!info.isIndexed()) {\n        return DocValues.EMPTY_SORTED;\n      }\n      return (SortedDocValues) caches.get(SortedDocValues.class).get(reader, new CacheKey(field, acceptableOverheadRatio), false);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93dd449115a9247533e44bab47e8429e5dccbc6d","date":1400258396,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/misc/src/java/org/apache/lucene/uninverting/FieldCacheImpl#getTermsIndex(AtomicReader,String,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl#getTermsIndex(AtomicReader,String,float).mjava","sourceNew":"  public SortedDocValues getTermsIndex(AtomicReader reader, String field, float acceptableOverheadRatio) throws IOException {\n    SortedDocValues valuesIn = reader.getSortedDocValues(field);\n    if (valuesIn != null) {\n      // Not cached here by FieldCacheImpl (cached instead\n      // per-thread by SegmentReader):\n      return valuesIn;\n    } else {\n      final FieldInfo info = reader.getFieldInfos().fieldInfo(field);\n      if (info == null) {\n        return DocValues.EMPTY_SORTED;\n      } else if (info.hasDocValues()) {\n        // we don't try to build a sorted instance from numeric/binary doc\n        // values because dedup can be very costly\n        throw new IllegalStateException(\"Type mismatch: \" + field + \" was indexed as \" + info.getDocValuesType());\n      } else if (!info.isIndexed()) {\n        return DocValues.EMPTY_SORTED;\n      }\n      return (SortedDocValues) caches.get(SortedDocValues.class).get(reader, new CacheKey(field, acceptableOverheadRatio), false);\n    }\n  }\n\n","sourceOld":"  public SortedDocValues getTermsIndex(AtomicReader reader, String field, float acceptableOverheadRatio) throws IOException {\n    SortedDocValues valuesIn = reader.getSortedDocValues(field);\n    if (valuesIn != null) {\n      // Not cached here by FieldCacheImpl (cached instead\n      // per-thread by SegmentReader):\n      return valuesIn;\n    } else {\n      final FieldInfo info = reader.getFieldInfos().fieldInfo(field);\n      if (info == null) {\n        return DocValues.EMPTY_SORTED;\n      } else if (info.hasDocValues()) {\n        // we don't try to build a sorted instance from numeric/binary doc\n        // values because dedup can be very costly\n        throw new IllegalStateException(\"Type mismatch: \" + field + \" was indexed as \" + info.getDocValuesType());\n      } else if (!info.isIndexed()) {\n        return DocValues.EMPTY_SORTED;\n      }\n      return (SortedDocValues) caches.get(SortedDocValues.class).get(reader, new CacheKey(field, acceptableOverheadRatio), false);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56572ec06f1407c066d6b7399413178b33176cd8","date":1400495675,"type":5,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/misc/src/java/org/apache/lucene/uninverting/FieldCacheImpl#getTermsIndex(AtomicReader,String,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl#getTermsIndex(AtomicReader,String,float).mjava","sourceNew":"  public SortedDocValues getTermsIndex(AtomicReader reader, String field, float acceptableOverheadRatio) throws IOException {\n    SortedDocValues valuesIn = reader.getSortedDocValues(field);\n    if (valuesIn != null) {\n      // Not cached here by FieldCacheImpl (cached instead\n      // per-thread by SegmentReader):\n      return valuesIn;\n    } else {\n      final FieldInfo info = reader.getFieldInfos().fieldInfo(field);\n      if (info == null) {\n        return DocValues.EMPTY_SORTED;\n      } else if (info.hasDocValues()) {\n        // we don't try to build a sorted instance from numeric/binary doc\n        // values because dedup can be very costly\n        throw new IllegalStateException(\"Type mismatch: \" + field + \" was indexed as \" + info.getDocValuesType());\n      } else if (!info.isIndexed()) {\n        return DocValues.EMPTY_SORTED;\n      }\n      return (SortedDocValues) caches.get(SortedDocValues.class).get(reader, new CacheKey(field, acceptableOverheadRatio), false);\n    }\n  }\n\n","sourceOld":"  public SortedDocValues getTermsIndex(AtomicReader reader, String field, float acceptableOverheadRatio) throws IOException {\n    SortedDocValues valuesIn = reader.getSortedDocValues(field);\n    if (valuesIn != null) {\n      // Not cached here by FieldCacheImpl (cached instead\n      // per-thread by SegmentReader):\n      return valuesIn;\n    } else {\n      final FieldInfo info = reader.getFieldInfos().fieldInfo(field);\n      if (info == null) {\n        return DocValues.EMPTY_SORTED;\n      } else if (info.hasDocValues()) {\n        // we don't try to build a sorted instance from numeric/binary doc\n        // values because dedup can be very costly\n        throw new IllegalStateException(\"Type mismatch: \" + field + \" was indexed as \" + info.getDocValuesType());\n      } else if (!info.isIndexed()) {\n        return DocValues.EMPTY_SORTED;\n      }\n      return (SortedDocValues) caches.get(SortedDocValues.class).get(reader, new CacheKey(field, acceptableOverheadRatio), false);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9faa42f41b6adb98daf009cf99a4ee239189e469":["b4e0d3f6116e64a8ab4c338fed19498407856738"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":["b4e0d3f6116e64a8ab4c338fed19498407856738","e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"95ed9310f6ea1ae4d94c27ea71c957439bca684b":["6312aec6ba581f919d406ceff362bef430382c31"],"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c":["8429ddf2214f2bf8abcbb5484fefef6aaf5c417e"],"a4d374b2bebd0d52acaa61038fbf23068620fba7":["4a470c93b2b0f8f51241f52705fc110a01f27ad2"],"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff":["b4e0d3f6116e64a8ab4c338fed19498407856738","9faa42f41b6adb98daf009cf99a4ee239189e469"],"56572ec06f1407c066d6b7399413178b33176cd8":["8429ddf2214f2bf8abcbb5484fefef6aaf5c417e","93dd449115a9247533e44bab47e8429e5dccbc6d"],"4a470c93b2b0f8f51241f52705fc110a01f27ad2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8429ddf2214f2bf8abcbb5484fefef6aaf5c417e":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"b4e0d3f6116e64a8ab4c338fed19498407856738":["08df901046e2bf7914ed4e142aa64ca7b2f40114"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["7530de27b87b961b51f01bd1299b7004d46e8823","95ed9310f6ea1ae4d94c27ea71c957439bca684b"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["8429ddf2214f2bf8abcbb5484fefef6aaf5c417e","b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0f9453e226f2896430e77ec8e7837c1441a9aeb0":["fd4c0978a282e44867032b4d99f280a07fa16321","b4e0d3f6116e64a8ab4c338fed19498407856738"],"6312aec6ba581f919d406ceff362bef430382c31":["9d7e5f3aa5935964617824d1f9b2599ddb334464"],"9d7e5f3aa5935964617824d1f9b2599ddb334464":["a4d374b2bebd0d52acaa61038fbf23068620fba7"],"fd4c0978a282e44867032b4d99f280a07fa16321":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"08df901046e2bf7914ed4e142aa64ca7b2f40114":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"7530de27b87b961b51f01bd1299b7004d46e8823":["4a470c93b2b0f8f51241f52705fc110a01f27ad2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["93dd449115a9247533e44bab47e8429e5dccbc6d"]},"commit2Childs":{"9faa42f41b6adb98daf009cf99a4ee239189e469":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":[],"95ed9310f6ea1ae4d94c27ea71c957439bca684b":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"a4d374b2bebd0d52acaa61038fbf23068620fba7":["9d7e5f3aa5935964617824d1f9b2599ddb334464"],"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","8429ddf2214f2bf8abcbb5484fefef6aaf5c417e"],"56572ec06f1407c066d6b7399413178b33176cd8":[],"4a470c93b2b0f8f51241f52705fc110a01f27ad2":["a4d374b2bebd0d52acaa61038fbf23068620fba7","7530de27b87b961b51f01bd1299b7004d46e8823"],"b4e0d3f6116e64a8ab4c338fed19498407856738":["9faa42f41b6adb98daf009cf99a4ee239189e469","3dffec77fb8f7d0e9ca4869dddd6af94528b4576","e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff","0f9453e226f2896430e77ec8e7837c1441a9aeb0"],"8429ddf2214f2bf8abcbb5484fefef6aaf5c417e":["b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c","56572ec06f1407c066d6b7399413178b33176cd8","93dd449115a9247533e44bab47e8429e5dccbc6d"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["fd4c0978a282e44867032b4d99f280a07fa16321","08df901046e2bf7914ed4e142aa64ca7b2f40114"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["56572ec06f1407c066d6b7399413178b33176cd8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4a470c93b2b0f8f51241f52705fc110a01f27ad2"],"0f9453e226f2896430e77ec8e7837c1441a9aeb0":[],"6312aec6ba581f919d406ceff362bef430382c31":["95ed9310f6ea1ae4d94c27ea71c957439bca684b"],"9d7e5f3aa5935964617824d1f9b2599ddb334464":["6312aec6ba581f919d406ceff362bef430382c31"],"fd4c0978a282e44867032b4d99f280a07fa16321":["0f9453e226f2896430e77ec8e7837c1441a9aeb0"],"08df901046e2bf7914ed4e142aa64ca7b2f40114":["b4e0d3f6116e64a8ab4c338fed19498407856738"],"7530de27b87b961b51f01bd1299b7004d46e8823":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","56572ec06f1407c066d6b7399413178b33176cd8","0f9453e226f2896430e77ec8e7837c1441a9aeb0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}