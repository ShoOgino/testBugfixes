{"path":"solr/core/src/java/org/apache/solr/schema/FieldType#getSortField(SchemaField,SortField.Type,boolean,Object,Object).mjava","commits":[{"id":"70052d44b40be0028db94b4cffeb9aaa5468055e","date":1505151510,"type":0,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/FieldType#getSortField(SchemaField,SortField.Type,boolean,Object,Object).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * <p>A Helper utility method for use by subclasses.</p>\n   * <p>This method deals with:</p>\n   * <ul>\n   *  <li>{@link SchemaField#checkSortability}</li>\n   *  <li>Creating a {@link SortField} on <code>field</code> with the specified \n   *      <code>reverse</code> &amp; <code>sortType</code></li>\n   *  <li>Setting the {@link SortField#setMissingValue} to <code>missingLow</code> or <code>missingHigh</code>\n   *      as appropriate based on the value of <code>reverse</code> and the \n   *      <code>sortMissingFirst</code> &amp; <code>sortMissingLast</code> properties of the \n   *      <code>field</code></li>\n   * </ul>\n   *\n   * @param field The SchemaField to sort on.  May use <code>sortMissingFirst</code> or <code>sortMissingLast</code> or neither.\n   * @param sortType The sort Type of the underlying values in the <code>field</code>\n   * @param reverse True if natural order of the <code>sortType</code> should be reversed\n   * @param missingLow The <code>missingValue</code> to be used if the other params indicate that docs w/o values should sort as \"low\" as possible.\n   * @param missingHigh The <code>missingValue</code> to be used if the other params indicate that docs w/o values should sort as \"high\" as possible.\n   * @see #getSortedSetSortField\n   */\n  protected static SortField getSortField(SchemaField field, SortField.Type sortType, boolean reverse,\n                                          Object missingLow, Object missingHigh) {\n    field.checkSortability();\n\n    SortField sf = new SortField(field.getName(), sortType, reverse);\n    applySetMissingValue(field, sf, missingLow, missingHigh);\n    \n    return sf;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ffb85feece8645a035c02443a625f5af15e1106b","date":1505219692,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/FieldType#getSortField(SchemaField,SortField.Type,boolean,Object,Object).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * <p>A Helper utility method for use by subclasses.</p>\n   * <p>This method deals with:</p>\n   * <ul>\n   *  <li>{@link SchemaField#checkSortability}</li>\n   *  <li>Creating a {@link SortField} on <code>field</code> with the specified \n   *      <code>reverse</code> &amp; <code>sortType</code></li>\n   *  <li>Setting the {@link SortField#setMissingValue} to <code>missingLow</code> or <code>missingHigh</code>\n   *      as appropriate based on the value of <code>reverse</code> and the \n   *      <code>sortMissingFirst</code> &amp; <code>sortMissingLast</code> properties of the \n   *      <code>field</code></li>\n   * </ul>\n   *\n   * @param field The SchemaField to sort on.  May use <code>sortMissingFirst</code> or <code>sortMissingLast</code> or neither.\n   * @param sortType The sort Type of the underlying values in the <code>field</code>\n   * @param reverse True if natural order of the <code>sortType</code> should be reversed\n   * @param missingLow The <code>missingValue</code> to be used if the other params indicate that docs w/o values should sort as \"low\" as possible.\n   * @param missingHigh The <code>missingValue</code> to be used if the other params indicate that docs w/o values should sort as \"high\" as possible.\n   * @see #getSortedSetSortField\n   */\n  protected static SortField getSortField(SchemaField field, SortField.Type sortType, boolean reverse,\n                                          Object missingLow, Object missingHigh) {\n    field.checkSortability();\n\n    SortField sf = new SortField(field.getName(), sortType, reverse);\n    applySetMissingValue(field, sf, missingLow, missingHigh);\n    \n    return sf;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"685bd38810c206c93e9058f3c2cfa9827c086c27","date":1505751821,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/FieldType#getSortField(SchemaField,SortField.Type,boolean,Object,Object).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * <p>A Helper utility method for use by subclasses.</p>\n   * <p>This method deals with:</p>\n   * <ul>\n   *  <li>{@link SchemaField#checkSortability}</li>\n   *  <li>Creating a {@link SortField} on <code>field</code> with the specified \n   *      <code>reverse</code> &amp; <code>sortType</code></li>\n   *  <li>Setting the {@link SortField#setMissingValue} to <code>missingLow</code> or <code>missingHigh</code>\n   *      as appropriate based on the value of <code>reverse</code> and the \n   *      <code>sortMissingFirst</code> &amp; <code>sortMissingLast</code> properties of the \n   *      <code>field</code></li>\n   * </ul>\n   *\n   * @param field The SchemaField to sort on.  May use <code>sortMissingFirst</code> or <code>sortMissingLast</code> or neither.\n   * @param sortType The sort Type of the underlying values in the <code>field</code>\n   * @param reverse True if natural order of the <code>sortType</code> should be reversed\n   * @param missingLow The <code>missingValue</code> to be used if the other params indicate that docs w/o values should sort as \"low\" as possible.\n   * @param missingHigh The <code>missingValue</code> to be used if the other params indicate that docs w/o values should sort as \"high\" as possible.\n   * @see #getSortedSetSortField\n   */\n  protected static SortField getSortField(SchemaField field, SortField.Type sortType, boolean reverse,\n                                          Object missingLow, Object missingHigh) {\n    field.checkSortability();\n\n    SortField sf = new SortField(field.getName(), sortType, reverse);\n    applySetMissingValue(field, sf, missingLow, missingHigh);\n    \n    return sf;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"685bd38810c206c93e9058f3c2cfa9827c086c27":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ffb85feece8645a035c02443a625f5af15e1106b"],"ffb85feece8645a035c02443a625f5af15e1106b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","70052d44b40be0028db94b4cffeb9aaa5468055e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"70052d44b40be0028db94b4cffeb9aaa5468055e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ffb85feece8645a035c02443a625f5af15e1106b"]},"commit2Childs":{"685bd38810c206c93e9058f3c2cfa9827c086c27":[],"ffb85feece8645a035c02443a625f5af15e1106b":["685bd38810c206c93e9058f3c2cfa9827c086c27","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["685bd38810c206c93e9058f3c2cfa9827c086c27","ffb85feece8645a035c02443a625f5af15e1106b","70052d44b40be0028db94b4cffeb9aaa5468055e"],"70052d44b40be0028db94b4cffeb9aaa5468055e":["ffb85feece8645a035c02443a625f5af15e1106b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["685bd38810c206c93e9058f3c2cfa9827c086c27","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}