{"path":"solr/core/src/java/org/apache/solr/analytics/expression/ExpressionFactory#getArguments(String).mjava","commits":[{"id":"ff403346522eaa9de75403763e297e83a3ea585c","date":1384904731,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/analytics/expression/ExpressionFactory#getArguments(String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Splits up an Expression's arguments.\n   * \n   * @param expression Current expression string\n   * @return List The list of arguments\n   */\n  public static String[] getArguments(String expression) {\n    String[] strings = new String[1];\n    int stack = 0;\n    int start = 0;\n    List<String> arguments = new ArrayList<String>();\n    char[] chars = expression.toCharArray();\n    boolean escapedCharacter = false;\n    for (int count = 0; count < expression.length(); count++) {\n      char c = chars[count];\n      if (c==',' && stack == 0 && !escapedCharacter) {\n        arguments.add(expression.substring(start, count).replace(\"\\\\(\",\"(\").replace(\"\\\\)\",\")\").replace(\"\\\\,\",\",\").trim());\n        start = count+1;\n      } else if (c == '(' && !escapedCharacter) {\n        stack ++;\n      } else if (c == ')' && !escapedCharacter) {\n        stack --;\n      } else if (c == '\\\\') {\n        escapedCharacter=true;\n      }\n      if (escapedCharacter) {\n        escapedCharacter=false;\n      }\n    }\n    if (stack==0) {\n      arguments.add(expression.substring(start).trim());\n    }\n    return arguments.toArray(strings);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad2513ee0db0cc50a31af45e8acb305599d51de8","date":1385433738,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/analytics/expression/ExpressionFactory#getArguments(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/analytics/expression/ExpressionFactory#getArguments(String).mjava","sourceNew":"  /**\n   * Splits up an Expression's arguments.\n   * \n   * @param expression Current expression string\n   * @return List The list of arguments\n   */\n  public static String[] getArguments(String expression) {\n    String[] strings = new String[1];\n    int stack = 0;\n    int start = 0;\n    List<String> arguments = new ArrayList<String>();\n    char[] chars = expression.toCharArray();\n    for (int count = 0; count < expression.length(); count++) {\n      char c = chars[count];\n      if (c==',' && stack == 0) {\n        arguments.add(expression.substring(start, count).replace(\"\\\\(\",\"(\").replace(\"\\\\)\",\")\").replace(\"\\\\,\",\",\").trim());\n        start = count+1;\n      } else if (c == '(') {\n        stack ++;\n      } else if (c == ')') {\n        stack --;\n      } else if (c == '\\\\') {\n        ; // Do nothing.\n      }\n    }\n    if (stack==0) {\n      arguments.add(expression.substring(start).trim());\n    }\n    return arguments.toArray(strings);\n  }\n\n","sourceOld":"  /**\n   * Splits up an Expression's arguments.\n   * \n   * @param expression Current expression string\n   * @return List The list of arguments\n   */\n  public static String[] getArguments(String expression) {\n    String[] strings = new String[1];\n    int stack = 0;\n    int start = 0;\n    List<String> arguments = new ArrayList<String>();\n    char[] chars = expression.toCharArray();\n    boolean escapedCharacter = false;\n    for (int count = 0; count < expression.length(); count++) {\n      char c = chars[count];\n      if (c==',' && stack == 0 && !escapedCharacter) {\n        arguments.add(expression.substring(start, count).replace(\"\\\\(\",\"(\").replace(\"\\\\)\",\")\").replace(\"\\\\,\",\",\").trim());\n        start = count+1;\n      } else if (c == '(' && !escapedCharacter) {\n        stack ++;\n      } else if (c == ')' && !escapedCharacter) {\n        stack --;\n      } else if (c == '\\\\') {\n        escapedCharacter=true;\n      }\n      if (escapedCharacter) {\n        escapedCharacter=false;\n      }\n    }\n    if (stack==0) {\n      arguments.add(expression.substring(start).trim());\n    }\n    return arguments.toArray(strings);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/analytics/expression/ExpressionFactory#getArguments(String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Splits up an Expression's arguments.\n   * \n   * @param expression Current expression string\n   * @return List The list of arguments\n   */\n  public static String[] getArguments(String expression) {\n    String[] strings = new String[1];\n    int stack = 0;\n    int start = 0;\n    List<String> arguments = new ArrayList<String>();\n    char[] chars = expression.toCharArray();\n    for (int count = 0; count < expression.length(); count++) {\n      char c = chars[count];\n      if (c==',' && stack == 0) {\n        arguments.add(expression.substring(start, count).replace(\"\\\\(\",\"(\").replace(\"\\\\)\",\")\").replace(\"\\\\,\",\",\").trim());\n        start = count+1;\n      } else if (c == '(') {\n        stack ++;\n      } else if (c == ')') {\n        stack --;\n      } else if (c == '\\\\') {\n        ; // Do nothing.\n      }\n    }\n    if (stack==0) {\n      arguments.add(expression.substring(start).trim());\n    }\n    return arguments.toArray(strings);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/analytics/expression/ExpressionFactory#getArguments(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/analytics/expression/ExpressionFactory#getArguments(String).mjava","sourceNew":"  /**\n   * Splits up an Expression's arguments.\n   * \n   * @param expression Current expression string\n   * @return List The list of arguments\n   */\n  public static String[] getArguments(String expression) {\n    String[] strings = new String[1];\n    int stack = 0;\n    int start = 0;\n    List<String> arguments = new ArrayList<>();\n    char[] chars = expression.toCharArray();\n    for (int count = 0; count < expression.length(); count++) {\n      char c = chars[count];\n      if (c==',' && stack == 0) {\n        arguments.add(expression.substring(start, count).replace(\"\\\\(\",\"(\").replace(\"\\\\)\",\")\").replace(\"\\\\,\",\",\").trim());\n        start = count+1;\n      } else if (c == '(') {\n        stack ++;\n      } else if (c == ')') {\n        stack --;\n      } else if (c == '\\\\') {\n        ; // Do nothing.\n      }\n    }\n    if (stack==0) {\n      arguments.add(expression.substring(start).trim());\n    }\n    return arguments.toArray(strings);\n  }\n\n","sourceOld":"  /**\n   * Splits up an Expression's arguments.\n   * \n   * @param expression Current expression string\n   * @return List The list of arguments\n   */\n  public static String[] getArguments(String expression) {\n    String[] strings = new String[1];\n    int stack = 0;\n    int start = 0;\n    List<String> arguments = new ArrayList<String>();\n    char[] chars = expression.toCharArray();\n    for (int count = 0; count < expression.length(); count++) {\n      char c = chars[count];\n      if (c==',' && stack == 0) {\n        arguments.add(expression.substring(start, count).replace(\"\\\\(\",\"(\").replace(\"\\\\)\",\")\").replace(\"\\\\,\",\",\").trim());\n        start = count+1;\n      } else if (c == '(') {\n        stack ++;\n      } else if (c == ')') {\n        stack --;\n      } else if (c == '\\\\') {\n        ; // Do nothing.\n      }\n    }\n    if (stack==0) {\n      arguments.add(expression.substring(start).trim());\n    }\n    return arguments.toArray(strings);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f719faa74f7213d4a395510dbc1f1b7cb178484","date":1410881394,"type":5,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/analytics/expression/ExpressionFactory#getArguments(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/analytics/expression/ExpressionFactory#getArguments(String).mjava","sourceNew":"  /**\n   * Splits up an Expression's arguments.\n   * \n   * @param expression Current expression string\n   * @return List The list of arguments\n   */\n  public static String[] getArguments(String expression) {\n    String[] strings = new String[1];\n    int stack = 0;\n    int start = 0;\n    List<String> arguments = new ArrayList<>();\n    char[] chars = expression.toCharArray();\n    for (int count = 0; count < expression.length(); count++) {\n      char c = chars[count];\n      if (c==',' && stack == 0) {\n        arguments.add(expression.substring(start, count).replace(\"\\\\(\",\"(\").replace(\"\\\\)\",\")\").replace(\"\\\\,\",\",\").trim());\n        start = count+1;\n      } else if (c == '(') {\n        stack ++;\n      } else if (c == ')') {\n        stack --;\n      } else if (c == '\\\\') {\n        ; // Do nothing.\n      }\n    }\n    if (stack==0) {\n      arguments.add(expression.substring(start).trim());\n    }\n    return arguments.toArray(strings);\n  }\n\n","sourceOld":"  /**\n   * Splits up an Expression's arguments.\n   * \n   * @param expression Current expression string\n   * @return List The list of arguments\n   */\n  public static String[] getArguments(String expression) {\n    String[] strings = new String[1];\n    int stack = 0;\n    int start = 0;\n    List<String> arguments = new ArrayList<>();\n    char[] chars = expression.toCharArray();\n    for (int count = 0; count < expression.length(); count++) {\n      char c = chars[count];\n      if (c==',' && stack == 0) {\n        arguments.add(expression.substring(start, count).replace(\"\\\\(\",\"(\").replace(\"\\\\)\",\")\").replace(\"\\\\,\",\",\").trim());\n        start = count+1;\n      } else if (c == '(') {\n        stack ++;\n      } else if (c == ')') {\n        stack --;\n      } else if (c == '\\\\') {\n        ; // Do nothing.\n      }\n    }\n    if (stack==0) {\n      arguments.add(expression.substring(start).trim());\n    }\n    return arguments.toArray(strings);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["ad2513ee0db0cc50a31af45e8acb305599d51de8"],"ad2513ee0db0cc50a31af45e8acb305599d51de8":["ff403346522eaa9de75403763e297e83a3ea585c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ad2513ee0db0cc50a31af45e8acb305599d51de8"],"ff403346522eaa9de75403763e297e83a3ea585c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0f719faa74f7213d4a395510dbc1f1b7cb178484":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f719faa74f7213d4a395510dbc1f1b7cb178484"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["0f719faa74f7213d4a395510dbc1f1b7cb178484"],"ad2513ee0db0cc50a31af45e8acb305599d51de8":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","ff403346522eaa9de75403763e297e83a3ea585c"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"ff403346522eaa9de75403763e297e83a3ea585c":["ad2513ee0db0cc50a31af45e8acb305599d51de8"],"0f719faa74f7213d4a395510dbc1f1b7cb178484":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}