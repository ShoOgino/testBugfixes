{"path":"src/java/org/apache/solr/util/BCDUtils#base10toBase100SortableInt(char[],int,int,char[],int).mjava","commits":[{"id":"0c3e228bf650e96f3002a8fb73dd0c13d55af077","date":1138253849,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/util/BCDUtils#base10toBase100SortableInt(char[],int,int,char[],int).mjava","pathOld":"/dev/null","sourceNew":"  /********* FUTURE\n    // the zero exponent... exponents above this point are positive\n    // and below are negative.\n    // It is desirable to make ordinary numbers have a single byte\n    // exponent when converted to UTF-8\n    // For integers, the exponent will always be >=0, but this format\n    // is meant to be valid for floating point numbers as well...\n    private static final int ZERO_EXPONENT='a';  // 97\n\n    // if exponent is larger than what can be represented\n    // in a single byte (char), then this is the multibyte\n    // escape char.\n    // UCS-2 surrogates start at 0xD800\n    private static final int POSITIVE_EXPONENT_ESCAPE=0x3fff;\n\n    // if exponent is smaller than what can be represented in\n    // a single byte, then this is the multibyte escape\n    private static final int NEGATIVE_EXPONENT_ESCAPE=1;\n\n    // if number is negative, it starts with this optional value\n    // this should not overlap with any exponent values\n    private static final int NEGATIVE_SIGN=0;\n  **********/\n\n    // WARNING: assumption is that this is a legal int...\n    // no validation is done.  [+-]?digit*\n    //\n    // Normalization of zeros *is* done...\n    //  0004, 004, 04, 4 will all end up being equal\n    //  0,-0 are normalized to '' (zero length)\n    //\n    // The value is written to the output buffer\n    // from the end to the start.  The return value\n    // is the start of the Base100 int in the output buffer.\n    //\n    // As the output will be smaller than the input, arr and\n    // out may refer to the same array if desired.\n    //\n    public static int base10toBase100SortableInt(char[] arr, int start, int end,\n                                                 char[] out, int outend\n                                      )\n    {\n      int wpos=outend;  // write position\n      boolean neg=false;\n      --end;  // position end pointer *on* the last char\n\n      // read signs and leading zeros\n      while (start <= end) {\n        char val = arr[start];\n        if (val=='-') neg=!neg;\n        else if (val>='1' && val<='9') break;\n        start++;\n      }\n\n      // eat whitespace on RHS?\n      outer: while (start <= end) {\n        switch(arr[end]) {\n          case ' ':\n          case '\\t':\n          case '\\n':\n          case '\\r': end--; break;\n          default: break outer;\n        }\n      }\n\n      int hundreds=0;\n      /******************************************************\n       * remove RHS zero normalization since it only helps 1 in 100\n       * numbers and complicates both encoding and decoding.\n\n      // remove pairs of zeros on the RHS and keep track of\n      // the count.\n      while (start <= end) {\n        char val = arr[end];\n\n        if (val=='0' && start <= end) {\n          val=arr[end-1];\n          if (val=='0') {\n            hundreds++;\n            end-=2;\n            continue;\n          }\n        }\n\n        break;\n      }\n      *************************************************************/\n\n\n      // now start at the end and work our way forward\n      // encoding two base 10 digits into 1 base 100 digit\n      while (start <= end) {\n        int val = arr[end--];\n        val = val - '0';\n        if (start <= end) {\n          int val2 = arr[end--];\n          val = val + (val2 - '0')*10;\n        }\n        out[--wpos] = neg ? (char)(99-val) : (char)val;\n      }\n\n      /****** FUTURE: not needed for this implementation of exponent combined with sign\n      // normalize all zeros to positive values\n      if (wpos==outend) neg=false;\n      ******/\n\n      // adjust exponent by the number of base 100 chars written\n      hundreds += outend - wpos;\n\n      // write the exponent and sign combined\n      out[--wpos] = neg ? (char)(ZERO_EXPONENT - hundreds) : (char)(ZERO_EXPONENT + hundreds);\n\n      return outend-wpos;  // the length of the base100 int\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/util/BCDUtils#base10toBase100SortableInt(char[],int,int,char[],int).mjava","pathOld":"src/java/org/apache/solr/util/BCDUtils#base10toBase100SortableInt(char[],int,int,char[],int).mjava","sourceNew":"  /********* FUTURE\n    // the zero exponent... exponents above this point are positive\n    // and below are negative.\n    // It is desirable to make ordinary numbers have a single byte\n    // exponent when converted to UTF-8\n    // For integers, the exponent will always be >=0, but this format\n    // is meant to be valid for floating point numbers as well...\n    private static final int ZERO_EXPONENT='a';  // 97\n\n    // if exponent is larger than what can be represented\n    // in a single byte (char), then this is the multibyte\n    // escape char.\n    // UCS-2 surrogates start at 0xD800\n    private static final int POSITIVE_EXPONENT_ESCAPE=0x3fff;\n\n    // if exponent is smaller than what can be represented in\n    // a single byte, then this is the multibyte escape\n    private static final int NEGATIVE_EXPONENT_ESCAPE=1;\n\n    // if number is negative, it starts with this optional value\n    // this should not overlap with any exponent values\n    private static final int NEGATIVE_SIGN=0;\n  **********/\n\n    // WARNING: assumption is that this is a legal int...\n    // no validation is done.  [+-]?digit*\n    //\n    // Normalization of zeros *is* done...\n    //  0004, 004, 04, 4 will all end up being equal\n    //  0,-0 are normalized to '' (zero length)\n    //\n    // The value is written to the output buffer\n    // from the end to the start.  The return value\n    // is the start of the Base100 int in the output buffer.\n    //\n    // As the output will be smaller than the input, arr and\n    // out may refer to the same array if desired.\n    //\n    public static int base10toBase100SortableInt(char[] arr, int start, int end,\n                                                 char[] out, int outend\n                                      )\n    {\n      int wpos=outend;  // write position\n      boolean neg=false;\n      --end;  // position end pointer *on* the last char\n\n      // read signs and leading zeros\n      while (start <= end) {\n        char val = arr[start];\n        if (val=='-') neg=!neg;\n        else if (val>='1' && val<='9') break;\n        start++;\n      }\n\n      // eat whitespace on RHS?\n      outer: while (start <= end) {\n        switch(arr[end]) {\n          case ' ':\n          case '\\t':\n          case '\\n':\n          case '\\r': end--; break;\n          default: break outer;\n        }\n      }\n\n      int hundreds=0;\n      /******************************************************\n       * remove RHS zero normalization since it only helps 1 in 100\n       * numbers and complicates both encoding and decoding.\n\n      // remove pairs of zeros on the RHS and keep track of\n      // the count.\n      while (start <= end) {\n        char val = arr[end];\n\n        if (val=='0' && start <= end) {\n          val=arr[end-1];\n          if (val=='0') {\n            hundreds++;\n            end-=2;\n            continue;\n          }\n        }\n\n        break;\n      }\n      *************************************************************/\n\n\n      // now start at the end and work our way forward\n      // encoding two base 10 digits into 1 base 100 digit\n      while (start <= end) {\n        int val = arr[end--];\n        val = val - '0';\n        if (start <= end) {\n          int val2 = arr[end--];\n          val = val + (val2 - '0')*10;\n        }\n        out[--wpos] = neg ? (char)(99-val) : (char)val;\n      }\n\n      /****** FUTURE: not needed for this implementation of exponent combined with sign\n      // normalize all zeros to positive values\n      if (wpos==outend) neg=false;\n      ******/\n\n      // adjust exponent by the number of base 100 chars written\n      hundreds += outend - wpos;\n\n      // write the exponent and sign combined\n      out[--wpos] = neg ? (char)(ZERO_EXPONENT - hundreds) : (char)(ZERO_EXPONENT + hundreds);\n\n      return outend-wpos;  // the length of the base100 int\n    }\n\n","sourceOld":"  /********* FUTURE\n    // the zero exponent... exponents above this point are positive\n    // and below are negative.\n    // It is desirable to make ordinary numbers have a single byte\n    // exponent when converted to UTF-8\n    // For integers, the exponent will always be >=0, but this format\n    // is meant to be valid for floating point numbers as well...\n    private static final int ZERO_EXPONENT='a';  // 97\n\n    // if exponent is larger than what can be represented\n    // in a single byte (char), then this is the multibyte\n    // escape char.\n    // UCS-2 surrogates start at 0xD800\n    private static final int POSITIVE_EXPONENT_ESCAPE=0x3fff;\n\n    // if exponent is smaller than what can be represented in\n    // a single byte, then this is the multibyte escape\n    private static final int NEGATIVE_EXPONENT_ESCAPE=1;\n\n    // if number is negative, it starts with this optional value\n    // this should not overlap with any exponent values\n    private static final int NEGATIVE_SIGN=0;\n  **********/\n\n    // WARNING: assumption is that this is a legal int...\n    // no validation is done.  [+-]?digit*\n    //\n    // Normalization of zeros *is* done...\n    //  0004, 004, 04, 4 will all end up being equal\n    //  0,-0 are normalized to '' (zero length)\n    //\n    // The value is written to the output buffer\n    // from the end to the start.  The return value\n    // is the start of the Base100 int in the output buffer.\n    //\n    // As the output will be smaller than the input, arr and\n    // out may refer to the same array if desired.\n    //\n    public static int base10toBase100SortableInt(char[] arr, int start, int end,\n                                                 char[] out, int outend\n                                      )\n    {\n      int wpos=outend;  // write position\n      boolean neg=false;\n      --end;  // position end pointer *on* the last char\n\n      // read signs and leading zeros\n      while (start <= end) {\n        char val = arr[start];\n        if (val=='-') neg=!neg;\n        else if (val>='1' && val<='9') break;\n        start++;\n      }\n\n      // eat whitespace on RHS?\n      outer: while (start <= end) {\n        switch(arr[end]) {\n          case ' ':\n          case '\\t':\n          case '\\n':\n          case '\\r': end--; break;\n          default: break outer;\n        }\n      }\n\n      int hundreds=0;\n      /******************************************************\n       * remove RHS zero normalization since it only helps 1 in 100\n       * numbers and complicates both encoding and decoding.\n\n      // remove pairs of zeros on the RHS and keep track of\n      // the count.\n      while (start <= end) {\n        char val = arr[end];\n\n        if (val=='0' && start <= end) {\n          val=arr[end-1];\n          if (val=='0') {\n            hundreds++;\n            end-=2;\n            continue;\n          }\n        }\n\n        break;\n      }\n      *************************************************************/\n\n\n      // now start at the end and work our way forward\n      // encoding two base 10 digits into 1 base 100 digit\n      while (start <= end) {\n        int val = arr[end--];\n        val = val - '0';\n        if (start <= end) {\n          int val2 = arr[end--];\n          val = val + (val2 - '0')*10;\n        }\n        out[--wpos] = neg ? (char)(99-val) : (char)val;\n      }\n\n      /****** FUTURE: not needed for this implementation of exponent combined with sign\n      // normalize all zeros to positive values\n      if (wpos==outend) neg=false;\n      ******/\n\n      // adjust exponent by the number of base 100 chars written\n      hundreds += outend - wpos;\n\n      // write the exponent and sign combined\n      out[--wpos] = neg ? (char)(ZERO_EXPONENT - hundreds) : (char)(ZERO_EXPONENT + hundreds);\n\n      return outend-wpos;  // the length of the base100 int\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0c3e228bf650e96f3002a8fb73dd0c13d55af077":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["0c3e228bf650e96f3002a8fb73dd0c13d55af077"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"0c3e228bf650e96f3002a8fb73dd0c13d55af077":["ad94625fb8d088209f46650c8097196fec67f00c"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["0c3e228bf650e96f3002a8fb73dd0c13d55af077"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}