{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testResiduals().mjava","commits":[{"id":"dc405367d926fb8fe1f87ec54aaca7403c5aa358","date":1499869732,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testResiduals().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testResiduals() throws Exception {\n    String cexpr = \"let(a=array(1,2,3,4,5,6), b=array(2,4,6,8,10,12), c=regress(a,b), tuple(res=residuals(c,a,a)))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<Number> out = (List<Number>)tuples.get(0).get(\"res\");\n    assertTrue(out.size() == 6);\n    assertTrue(out.get(0).intValue() == -1);\n    assertTrue(out.get(1).intValue() == -2);\n    assertTrue(out.get(2).intValue() == -3);\n    assertTrue(out.get(3).intValue() == -4);\n    assertTrue(out.get(4).intValue() == -5);\n    assertTrue(out.get(5).intValue() == -6);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f9a989a32a073c55e3aef6f807a3474184bbcf49","date":1499930209,"type":0,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testResiduals().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testResiduals() throws Exception {\n    String cexpr = \"let(a=array(1,2,3,4,5,6), b=array(2,4,6,8,10,12), c=regress(a,b), tuple(res=residuals(c,a,a)))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<Number> out = (List<Number>)tuples.get(0).get(\"res\");\n    assertTrue(out.size() == 6);\n    assertTrue(out.get(0).intValue() == -1);\n    assertTrue(out.get(1).intValue() == -2);\n    assertTrue(out.get(2).intValue() == -3);\n    assertTrue(out.get(3).intValue() == -4);\n    assertTrue(out.get(4).intValue() == -5);\n    assertTrue(out.get(5).intValue() == -6);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb569fd721c41eafc2a2d788499a7df490c7f1a5","date":1499930871,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testResiduals().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testResiduals() throws Exception {\n    String cexpr = \"let(a=array(1,2,3,4,5,6), b=array(2,4,6,8,10,12), c=regress(a,b), tuple(res=residuals(c,a,a)))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<Number> out = (List<Number>)tuples.get(0).get(\"res\");\n    assertTrue(out.size() == 6);\n    assertTrue(out.get(0).intValue() == -1);\n    assertTrue(out.get(1).intValue() == -2);\n    assertTrue(out.get(2).intValue() == -3);\n    assertTrue(out.get(3).intValue() == -4);\n    assertTrue(out.get(4).intValue() == -5);\n    assertTrue(out.get(5).intValue() == -6);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bbe7f5e9d90420c7fc8cd235dd8fb33fa9befe54","date":1512439781,"type":4,"author":"Joel Bernstein","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testResiduals().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testResiduals() throws Exception {\n    String cexpr = \"let(a=array(1,2,3,4,5,6), b=array(2,4,6,8,10,12), c=regress(a,b), tuple(res=residuals(c,a,a)))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<Number> out = (List<Number>)tuples.get(0).get(\"res\");\n    assertTrue(out.size() == 6);\n    assertTrue(out.get(0).intValue() == -1);\n    assertTrue(out.get(1).intValue() == -2);\n    assertTrue(out.get(2).intValue() == -3);\n    assertTrue(out.get(3).intValue() == -4);\n    assertTrue(out.get(4).intValue() == -5);\n    assertTrue(out.get(5).intValue() == -6);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"dc405367d926fb8fe1f87ec54aaca7403c5aa358":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bbe7f5e9d90420c7fc8cd235dd8fb33fa9befe54":["dc405367d926fb8fe1f87ec54aaca7403c5aa358"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fb569fd721c41eafc2a2d788499a7df490c7f1a5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f9a989a32a073c55e3aef6f807a3474184bbcf49"],"f9a989a32a073c55e3aef6f807a3474184bbcf49":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","dc405367d926fb8fe1f87ec54aaca7403c5aa358"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bbe7f5e9d90420c7fc8cd235dd8fb33fa9befe54"]},"commit2Childs":{"dc405367d926fb8fe1f87ec54aaca7403c5aa358":["bbe7f5e9d90420c7fc8cd235dd8fb33fa9befe54","f9a989a32a073c55e3aef6f807a3474184bbcf49"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["dc405367d926fb8fe1f87ec54aaca7403c5aa358","fb569fd721c41eafc2a2d788499a7df490c7f1a5","f9a989a32a073c55e3aef6f807a3474184bbcf49"],"bbe7f5e9d90420c7fc8cd235dd8fb33fa9befe54":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"fb569fd721c41eafc2a2d788499a7df490c7f1a5":[],"f9a989a32a073c55e3aef6f807a3474184bbcf49":["fb569fd721c41eafc2a2d788499a7df490c7f1a5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fb569fd721c41eafc2a2d788499a7df490c7f1a5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}