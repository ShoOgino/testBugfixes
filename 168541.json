{"path":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/TestUnifiedHighlighterMTQ#testWildcards().mjava","commits":[{"id":"1f5ce59aaf4a055cc9ec62c15a89c263a05ff4b2","date":1475611903,"type":0,"author":"David Smiley","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/TestUnifiedHighlighterMTQ#testWildcards().mjava","pathOld":"/dev/null","sourceNew":"  public void testWildcards() throws Exception {\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, indexAnalyzer);\n\n    Field body = new Field(\"body\", \"\", fieldType);\n    Document doc = new Document();\n    doc.add(body);\n\n    body.setStringValue(\"This is a test.\");\n    iw.addDocument(doc);\n    body.setStringValue(\"Test a one sentence document.\");\n    iw.addDocument(doc);\n\n    IndexReader ir = iw.getReader();\n    iw.close();\n\n    IndexSearcher searcher = newSearcher(ir);\n    UnifiedHighlighter highlighter = new UnifiedHighlighter(searcher, indexAnalyzer);\n    Query query = new WildcardQuery(new Term(\"body\", \"te*\"));\n    TopDocs topDocs = searcher.search(query, 10, Sort.INDEXORDER);\n    assertEquals(2, topDocs.totalHits);\n    String snippets[] = highlighter.highlight(\"body\", query, topDocs);\n    assertEquals(2, snippets.length);\n    assertEquals(\"This is a <b>test</b>.\", snippets[0]);\n    assertEquals(\"<b>Test</b> a one sentence document.\", snippets[1]);\n\n    // disable MTQ; won't highlight\n    highlighter.setHandleMultiTermQuery(false);\n    snippets = highlighter.highlight(\"body\", query, topDocs);\n    assertEquals(2, snippets.length);\n    assertEquals(\"This is a test.\", snippets[0]);\n    assertEquals(\"Test a one sentence document.\", snippets[1]);\n    highlighter.setHandleMultiTermQuery(true);//reset\n\n    // wrong field\n    BooleanQuery bq = new BooleanQuery.Builder()\n        .add(new MatchAllDocsQuery(), BooleanClause.Occur.SHOULD)\n        .add(new WildcardQuery(new Term(\"bogus\", \"te*\")), BooleanClause.Occur.SHOULD)\n        .build();\n    topDocs = searcher.search(bq, 10, Sort.INDEXORDER);\n    assertEquals(2, topDocs.totalHits);\n    snippets = highlighter.highlight(\"body\", bq, topDocs);\n    assertEquals(2, snippets.length);\n    assertEquals(\"This is a test.\", snippets[0]);\n    assertEquals(\"Test a one sentence document.\", snippets[1]);\n\n    ir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/TestUnifiedHighlighterMTQ#testWildcards().mjava","pathOld":"/dev/null","sourceNew":"  public void testWildcards() throws Exception {\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, indexAnalyzer);\n\n    Field body = new Field(\"body\", \"\", fieldType);\n    Document doc = new Document();\n    doc.add(body);\n\n    body.setStringValue(\"This is a test.\");\n    iw.addDocument(doc);\n    body.setStringValue(\"Test a one sentence document.\");\n    iw.addDocument(doc);\n\n    IndexReader ir = iw.getReader();\n    iw.close();\n\n    IndexSearcher searcher = newSearcher(ir);\n    UnifiedHighlighter highlighter = new UnifiedHighlighter(searcher, indexAnalyzer);\n    Query query = new WildcardQuery(new Term(\"body\", \"te*\"));\n    TopDocs topDocs = searcher.search(query, 10, Sort.INDEXORDER);\n    assertEquals(2, topDocs.totalHits);\n    String snippets[] = highlighter.highlight(\"body\", query, topDocs);\n    assertEquals(2, snippets.length);\n    assertEquals(\"This is a <b>test</b>.\", snippets[0]);\n    assertEquals(\"<b>Test</b> a one sentence document.\", snippets[1]);\n\n    // disable MTQ; won't highlight\n    highlighter.setHandleMultiTermQuery(false);\n    snippets = highlighter.highlight(\"body\", query, topDocs);\n    assertEquals(2, snippets.length);\n    assertEquals(\"This is a test.\", snippets[0]);\n    assertEquals(\"Test a one sentence document.\", snippets[1]);\n    highlighter.setHandleMultiTermQuery(true);//reset\n\n    // wrong field\n    BooleanQuery bq = new BooleanQuery.Builder()\n        .add(new MatchAllDocsQuery(), BooleanClause.Occur.SHOULD)\n        .add(new WildcardQuery(new Term(\"bogus\", \"te*\")), BooleanClause.Occur.SHOULD)\n        .build();\n    topDocs = searcher.search(bq, 10, Sort.INDEXORDER);\n    assertEquals(2, topDocs.totalHits);\n    snippets = highlighter.highlight(\"body\", bq, topDocs);\n    assertEquals(2, snippets.length);\n    assertEquals(\"This is a test.\", snippets[0]);\n    assertEquals(\"Test a one sentence document.\", snippets[1]);\n\n    ir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83788ad129a5154d5c6562c4e8ce3db48793aada","date":1532961485,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/TestUnifiedHighlighterMTQ#testWildcards().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/TestUnifiedHighlighterMTQ#testWildcards().mjava","sourceNew":"  public void testWildcards() throws Exception {\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, indexAnalyzer);\n\n    Field body = new Field(\"body\", \"\", fieldType);\n    Document doc = new Document();\n    doc.add(body);\n\n    body.setStringValue(\"This is a test.\");\n    iw.addDocument(doc);\n    body.setStringValue(\"Test a one sentence document.\");\n    iw.addDocument(doc);\n\n    IndexReader ir = iw.getReader();\n    iw.close();\n\n    IndexSearcher searcher = newSearcher(ir);\n    UnifiedHighlighter highlighter = new UnifiedHighlighter(searcher, indexAnalyzer);\n    Query query = new WildcardQuery(new Term(\"body\", \"te*\"));\n    TopDocs topDocs = searcher.search(query, 10, Sort.INDEXORDER);\n    assertEquals(2, topDocs.totalHits.value);\n    String snippets[] = highlighter.highlight(\"body\", query, topDocs);\n    assertEquals(2, snippets.length);\n    assertEquals(\"This is a <b>test</b>.\", snippets[0]);\n    assertEquals(\"<b>Test</b> a one sentence document.\", snippets[1]);\n\n    // disable MTQ; won't highlight\n    highlighter.setHandleMultiTermQuery(false);\n    snippets = highlighter.highlight(\"body\", query, topDocs);\n    assertEquals(2, snippets.length);\n    assertEquals(\"This is a test.\", snippets[0]);\n    assertEquals(\"Test a one sentence document.\", snippets[1]);\n    highlighter.setHandleMultiTermQuery(true);//reset\n\n    // wrong field\n    BooleanQuery bq = new BooleanQuery.Builder()\n        .add(new MatchAllDocsQuery(), BooleanClause.Occur.SHOULD)\n        .add(new WildcardQuery(new Term(\"bogus\", \"te*\")), BooleanClause.Occur.SHOULD)\n        .build();\n    topDocs = searcher.search(bq, 10, Sort.INDEXORDER);\n    assertEquals(2, topDocs.totalHits.value);\n    snippets = highlighter.highlight(\"body\", bq, topDocs);\n    assertEquals(2, snippets.length);\n    assertEquals(\"This is a test.\", snippets[0]);\n    assertEquals(\"Test a one sentence document.\", snippets[1]);\n\n    ir.close();\n  }\n\n","sourceOld":"  public void testWildcards() throws Exception {\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, indexAnalyzer);\n\n    Field body = new Field(\"body\", \"\", fieldType);\n    Document doc = new Document();\n    doc.add(body);\n\n    body.setStringValue(\"This is a test.\");\n    iw.addDocument(doc);\n    body.setStringValue(\"Test a one sentence document.\");\n    iw.addDocument(doc);\n\n    IndexReader ir = iw.getReader();\n    iw.close();\n\n    IndexSearcher searcher = newSearcher(ir);\n    UnifiedHighlighter highlighter = new UnifiedHighlighter(searcher, indexAnalyzer);\n    Query query = new WildcardQuery(new Term(\"body\", \"te*\"));\n    TopDocs topDocs = searcher.search(query, 10, Sort.INDEXORDER);\n    assertEquals(2, topDocs.totalHits);\n    String snippets[] = highlighter.highlight(\"body\", query, topDocs);\n    assertEquals(2, snippets.length);\n    assertEquals(\"This is a <b>test</b>.\", snippets[0]);\n    assertEquals(\"<b>Test</b> a one sentence document.\", snippets[1]);\n\n    // disable MTQ; won't highlight\n    highlighter.setHandleMultiTermQuery(false);\n    snippets = highlighter.highlight(\"body\", query, topDocs);\n    assertEquals(2, snippets.length);\n    assertEquals(\"This is a test.\", snippets[0]);\n    assertEquals(\"Test a one sentence document.\", snippets[1]);\n    highlighter.setHandleMultiTermQuery(true);//reset\n\n    // wrong field\n    BooleanQuery bq = new BooleanQuery.Builder()\n        .add(new MatchAllDocsQuery(), BooleanClause.Occur.SHOULD)\n        .add(new WildcardQuery(new Term(\"bogus\", \"te*\")), BooleanClause.Occur.SHOULD)\n        .build();\n    topDocs = searcher.search(bq, 10, Sort.INDEXORDER);\n    assertEquals(2, topDocs.totalHits);\n    snippets = highlighter.highlight(\"body\", bq, topDocs);\n    assertEquals(2, snippets.length);\n    assertEquals(\"This is a test.\", snippets[0]);\n    assertEquals(\"Test a one sentence document.\", snippets[1]);\n\n    ir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1f5ce59aaf4a055cc9ec62c15a89c263a05ff4b2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["1f5ce59aaf4a055cc9ec62c15a89c263a05ff4b2"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1f5ce59aaf4a055cc9ec62c15a89c263a05ff4b2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["83788ad129a5154d5c6562c4e8ce3db48793aada"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1f5ce59aaf4a055cc9ec62c15a89c263a05ff4b2","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"1f5ce59aaf4a055cc9ec62c15a89c263a05ff4b2":["83788ad129a5154d5c6562c4e8ce3db48793aada","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}