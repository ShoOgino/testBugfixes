{"path":"lucene/analysis/common/src/test/org/apache/lucene/analysis/compound/TestCompoundWordTokenFilter#testHyphenationOnly().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/compound/TestCompoundWordTokenFilter#testHyphenationOnly().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/compound/TestCompoundWordTokenFilter#testHyphenationOnly().mjava","sourceNew":"  /**\n   * With hyphenation-only, you can get a lot of nonsense tokens.\n   * This can be controlled with the min/max subword size.\n   */\n  public void testHyphenationOnly() throws Exception {\n    InputSource is = new InputSource(getClass().getResource(\"da_UTF8.xml\").toExternalForm());\n    HyphenationTree hyphenator = HyphenationCompoundWordTokenFilter\n        .getHyphenationTree(is);\n    \n    HyphenationCompoundWordTokenFilter tf = new HyphenationCompoundWordTokenFilter(\n        TEST_VERSION_CURRENT,\n        new MockTokenizer(new StringReader(\"basketballkurv\"), MockTokenizer.WHITESPACE, false),\n        hyphenator,\n        CompoundWordTokenFilterBase.DEFAULT_MIN_WORD_SIZE,\n        2, 4);\n    \n    // min=2, max=4\n    assertTokenStreamContents(tf,\n        new String[] { \"basketballkurv\", \"ba\", \"sket\", \"bal\", \"ball\", \"kurv\" }\n    );\n    \n    tf = new HyphenationCompoundWordTokenFilter(\n        TEST_VERSION_CURRENT,\n        new MockTokenizer(new StringReader(\"basketballkurv\"), MockTokenizer.WHITESPACE, false),\n        hyphenator,\n        CompoundWordTokenFilterBase.DEFAULT_MIN_WORD_SIZE,\n        4, 6);\n    \n    // min=4, max=6\n    assertTokenStreamContents(tf,\n        new String[] { \"basketballkurv\", \"basket\", \"sket\", \"ball\", \"lkurv\", \"kurv\" }\n    );\n    \n    tf = new HyphenationCompoundWordTokenFilter(\n        TEST_VERSION_CURRENT,\n        new MockTokenizer(new StringReader(\"basketballkurv\"), MockTokenizer.WHITESPACE, false),\n        hyphenator,\n        CompoundWordTokenFilterBase.DEFAULT_MIN_WORD_SIZE,\n        4, 10);\n    \n    // min=4, max=10\n    assertTokenStreamContents(tf,\n        new String[] { \"basketballkurv\", \"basket\", \"basketbal\", \"basketball\", \"sket\", \n                       \"sketbal\", \"sketball\", \"ball\", \"ballkurv\", \"lkurv\", \"kurv\" }\n    );\n    \n  }\n\n","sourceOld":"  /**\n   * With hyphenation-only, you can get a lot of nonsense tokens.\n   * This can be controlled with the min/max subword size.\n   */\n  public void testHyphenationOnly() throws Exception {\n    InputSource is = new InputSource(getClass().getResource(\"da_UTF8.xml\").toExternalForm());\n    HyphenationTree hyphenator = HyphenationCompoundWordTokenFilter\n        .getHyphenationTree(is);\n    \n    HyphenationCompoundWordTokenFilter tf = new HyphenationCompoundWordTokenFilter(\n        TEST_VERSION_CURRENT,\n        new MockTokenizer(new StringReader(\"basketballkurv\"), MockTokenizer.WHITESPACE, false),\n        hyphenator,\n        CompoundWordTokenFilterBase.DEFAULT_MIN_WORD_SIZE,\n        2, 4);\n    \n    // min=2, max=4\n    assertTokenStreamContents(tf,\n        new String[] { \"basketballkurv\", \"ba\", \"sket\", \"bal\", \"ball\", \"kurv\" }\n    );\n    \n    tf = new HyphenationCompoundWordTokenFilter(\n        TEST_VERSION_CURRENT,\n        new MockTokenizer(new StringReader(\"basketballkurv\"), MockTokenizer.WHITESPACE, false),\n        hyphenator,\n        CompoundWordTokenFilterBase.DEFAULT_MIN_WORD_SIZE,\n        4, 6);\n    \n    // min=4, max=6\n    assertTokenStreamContents(tf,\n        new String[] { \"basketballkurv\", \"basket\", \"sket\", \"ball\", \"lkurv\", \"kurv\" }\n    );\n    \n    tf = new HyphenationCompoundWordTokenFilter(\n        TEST_VERSION_CURRENT,\n        new MockTokenizer(new StringReader(\"basketballkurv\"), MockTokenizer.WHITESPACE, false),\n        hyphenator,\n        CompoundWordTokenFilterBase.DEFAULT_MIN_WORD_SIZE,\n        4, 10);\n    \n    // min=4, max=10\n    assertTokenStreamContents(tf,\n        new String[] { \"basketballkurv\", \"basket\", \"basketbal\", \"basketball\", \"sket\", \n                       \"sketbal\", \"sketball\", \"ball\", \"ballkurv\", \"lkurv\", \"kurv\" }\n    );\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338","date":1389274049,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/compound/TestCompoundWordTokenFilter#testHyphenationOnly().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/compound/TestCompoundWordTokenFilter#testHyphenationOnly().mjava","sourceNew":"  /**\n   * With hyphenation-only, you can get a lot of nonsense tokens.\n   * This can be controlled with the min/max subword size.\n   */\n  public void testHyphenationOnly() throws Exception {\n    InputSource is = new InputSource(getClass().getResource(\"da_UTF8.xml\").toExternalForm());\n    HyphenationTree hyphenator = HyphenationCompoundWordTokenFilter\n        .getHyphenationTree(is);\n    \n    HyphenationCompoundWordTokenFilter tf = new HyphenationCompoundWordTokenFilter(\n        TEST_VERSION_CURRENT,\n        whitespaceMockTokenizer(\"basketballkurv\"),\n        hyphenator,\n        CompoundWordTokenFilterBase.DEFAULT_MIN_WORD_SIZE,\n        2, 4);\n    \n    // min=2, max=4\n    assertTokenStreamContents(tf,\n        new String[] { \"basketballkurv\", \"ba\", \"sket\", \"bal\", \"ball\", \"kurv\" }\n    );\n    \n    tf = new HyphenationCompoundWordTokenFilter(\n        TEST_VERSION_CURRENT,\n        whitespaceMockTokenizer(\"basketballkurv\"),\n        hyphenator,\n        CompoundWordTokenFilterBase.DEFAULT_MIN_WORD_SIZE,\n        4, 6);\n    \n    // min=4, max=6\n    assertTokenStreamContents(tf,\n        new String[] { \"basketballkurv\", \"basket\", \"sket\", \"ball\", \"lkurv\", \"kurv\" }\n    );\n    \n    tf = new HyphenationCompoundWordTokenFilter(\n        TEST_VERSION_CURRENT,\n        whitespaceMockTokenizer(\"basketballkurv\"),\n        hyphenator,\n        CompoundWordTokenFilterBase.DEFAULT_MIN_WORD_SIZE,\n        4, 10);\n    \n    // min=4, max=10\n    assertTokenStreamContents(tf,\n        new String[] { \"basketballkurv\", \"basket\", \"basketbal\", \"basketball\", \"sket\", \n                       \"sketbal\", \"sketball\", \"ball\", \"ballkurv\", \"lkurv\", \"kurv\" }\n    );\n    \n  }\n\n","sourceOld":"  /**\n   * With hyphenation-only, you can get a lot of nonsense tokens.\n   * This can be controlled with the min/max subword size.\n   */\n  public void testHyphenationOnly() throws Exception {\n    InputSource is = new InputSource(getClass().getResource(\"da_UTF8.xml\").toExternalForm());\n    HyphenationTree hyphenator = HyphenationCompoundWordTokenFilter\n        .getHyphenationTree(is);\n    \n    HyphenationCompoundWordTokenFilter tf = new HyphenationCompoundWordTokenFilter(\n        TEST_VERSION_CURRENT,\n        new MockTokenizer(new StringReader(\"basketballkurv\"), MockTokenizer.WHITESPACE, false),\n        hyphenator,\n        CompoundWordTokenFilterBase.DEFAULT_MIN_WORD_SIZE,\n        2, 4);\n    \n    // min=2, max=4\n    assertTokenStreamContents(tf,\n        new String[] { \"basketballkurv\", \"ba\", \"sket\", \"bal\", \"ball\", \"kurv\" }\n    );\n    \n    tf = new HyphenationCompoundWordTokenFilter(\n        TEST_VERSION_CURRENT,\n        new MockTokenizer(new StringReader(\"basketballkurv\"), MockTokenizer.WHITESPACE, false),\n        hyphenator,\n        CompoundWordTokenFilterBase.DEFAULT_MIN_WORD_SIZE,\n        4, 6);\n    \n    // min=4, max=6\n    assertTokenStreamContents(tf,\n        new String[] { \"basketballkurv\", \"basket\", \"sket\", \"ball\", \"lkurv\", \"kurv\" }\n    );\n    \n    tf = new HyphenationCompoundWordTokenFilter(\n        TEST_VERSION_CURRENT,\n        new MockTokenizer(new StringReader(\"basketballkurv\"), MockTokenizer.WHITESPACE, false),\n        hyphenator,\n        CompoundWordTokenFilterBase.DEFAULT_MIN_WORD_SIZE,\n        4, 10);\n    \n    // min=4, max=10\n    assertTokenStreamContents(tf,\n        new String[] { \"basketballkurv\", \"basket\", \"basketbal\", \"basketball\", \"sket\", \n                       \"sketbal\", \"sketball\", \"ball\", \"ballkurv\", \"lkurv\", \"kurv\" }\n    );\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"379db3ad24c4f0214f30a122265a6d6be003a99d","date":1407537768,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/compound/TestCompoundWordTokenFilter#testHyphenationOnly().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/compound/TestCompoundWordTokenFilter#testHyphenationOnly().mjava","sourceNew":"  /**\n   * With hyphenation-only, you can get a lot of nonsense tokens.\n   * This can be controlled with the min/max subword size.\n   */\n  public void testHyphenationOnly() throws Exception {\n    InputSource is = new InputSource(getClass().getResource(\"da_UTF8.xml\").toExternalForm());\n    HyphenationTree hyphenator = HyphenationCompoundWordTokenFilter\n        .getHyphenationTree(is);\n    \n    HyphenationCompoundWordTokenFilter tf = new HyphenationCompoundWordTokenFilter(\n\n        whitespaceMockTokenizer(\"basketballkurv\"),\n        hyphenator,\n        CompoundWordTokenFilterBase.DEFAULT_MIN_WORD_SIZE,\n        2, 4);\n    \n    // min=2, max=4\n    assertTokenStreamContents(tf,\n        new String[] { \"basketballkurv\", \"ba\", \"sket\", \"bal\", \"ball\", \"kurv\" }\n    );\n    \n    tf = new HyphenationCompoundWordTokenFilter(\n\n        whitespaceMockTokenizer(\"basketballkurv\"),\n        hyphenator,\n        CompoundWordTokenFilterBase.DEFAULT_MIN_WORD_SIZE,\n        4, 6);\n    \n    // min=4, max=6\n    assertTokenStreamContents(tf,\n        new String[] { \"basketballkurv\", \"basket\", \"sket\", \"ball\", \"lkurv\", \"kurv\" }\n    );\n    \n    tf = new HyphenationCompoundWordTokenFilter(\n\n        whitespaceMockTokenizer(\"basketballkurv\"),\n        hyphenator,\n        CompoundWordTokenFilterBase.DEFAULT_MIN_WORD_SIZE,\n        4, 10);\n    \n    // min=4, max=10\n    assertTokenStreamContents(tf,\n        new String[] { \"basketballkurv\", \"basket\", \"basketbal\", \"basketball\", \"sket\", \n                       \"sketbal\", \"sketball\", \"ball\", \"ballkurv\", \"lkurv\", \"kurv\" }\n    );\n    \n  }\n\n","sourceOld":"  /**\n   * With hyphenation-only, you can get a lot of nonsense tokens.\n   * This can be controlled with the min/max subword size.\n   */\n  public void testHyphenationOnly() throws Exception {\n    InputSource is = new InputSource(getClass().getResource(\"da_UTF8.xml\").toExternalForm());\n    HyphenationTree hyphenator = HyphenationCompoundWordTokenFilter\n        .getHyphenationTree(is);\n    \n    HyphenationCompoundWordTokenFilter tf = new HyphenationCompoundWordTokenFilter(\n        TEST_VERSION_CURRENT,\n        whitespaceMockTokenizer(\"basketballkurv\"),\n        hyphenator,\n        CompoundWordTokenFilterBase.DEFAULT_MIN_WORD_SIZE,\n        2, 4);\n    \n    // min=2, max=4\n    assertTokenStreamContents(tf,\n        new String[] { \"basketballkurv\", \"ba\", \"sket\", \"bal\", \"ball\", \"kurv\" }\n    );\n    \n    tf = new HyphenationCompoundWordTokenFilter(\n        TEST_VERSION_CURRENT,\n        whitespaceMockTokenizer(\"basketballkurv\"),\n        hyphenator,\n        CompoundWordTokenFilterBase.DEFAULT_MIN_WORD_SIZE,\n        4, 6);\n    \n    // min=4, max=6\n    assertTokenStreamContents(tf,\n        new String[] { \"basketballkurv\", \"basket\", \"sket\", \"ball\", \"lkurv\", \"kurv\" }\n    );\n    \n    tf = new HyphenationCompoundWordTokenFilter(\n        TEST_VERSION_CURRENT,\n        whitespaceMockTokenizer(\"basketballkurv\"),\n        hyphenator,\n        CompoundWordTokenFilterBase.DEFAULT_MIN_WORD_SIZE,\n        4, 10);\n    \n    // min=4, max=10\n    assertTokenStreamContents(tf,\n        new String[] { \"basketballkurv\", \"basket\", \"basketbal\", \"basketball\", \"sket\", \n                       \"sketbal\", \"sketball\", \"ball\", \"ballkurv\", \"lkurv\", \"kurv\" }\n    );\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"379db3ad24c4f0214f30a122265a6d6be003a99d":["ae889fd5c8a69f6b5d130d3c895bfa5b04d07338"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["379db3ad24c4f0214f30a122265a6d6be003a99d"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["ae889fd5c8a69f6b5d130d3c895bfa5b04d07338"],"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338":["379db3ad24c4f0214f30a122265a6d6be003a99d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"379db3ad24c4f0214f30a122265a6d6be003a99d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}