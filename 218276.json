{"path":"src/test/org/apache/solr/schema/RequiredFieldsTest#testRequiredFieldsSingleAdd().mjava","commits":[{"id":"335d5ef4d54c2861b4ebdc7244bd81278f1c1d22","date":1177887783,"type":0,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/test/org/apache/solr/schema/RequiredFieldsTest#testRequiredFieldsSingleAdd().mjava","pathOld":"/dev/null","sourceNew":"  public void testRequiredFieldsSingleAdd() {      \n    // Add a single document\n    assertU(\"adding document\",\n      adoc(\"id\", \"529\", \"name\", \"document with id, name, and subject\", \"field_t\", \"what's inside?\", \"subject\", \"info\"));\n    assertU(commit());\n    \n    // Check it it is in the index\n    assertQ(\"should find one\", req(\"id:529\") ,\"//result[@numFound=1]\" );\n\n    // Add another document without the required subject field, which\n    // has a configured defaultValue of \"Stuff\"\n    assertU(\"adding a doc without field w/ configured default\",\n          adoc(\"id\", \"530\", \"name\", \"document with id and name\", \"field_t\", \"what's inside?\"));\n    assertU(commit());\n\n    // Add another document without a subject, which has a default in schema\n    String subjectDefault = SolrCore.getSolrCore().getSchema().getField(\"subject\").getDefaultValue();\n    assertNotNull(\"subject has no default value\", subjectDefault);\n    assertQ(\"should find one with subject=\"+subjectDefault, req(\"id:530 subject:\"+subjectDefault) ,\"//result[@numFound=1]\" );\n\n    // Add another document without a required name, which has no default\n    assertNull(SolrCore.getSolrCore().getSchema().getField(\"name\").getDefaultValue());\n    assertFailedU(\"adding doc without required field\",\n          adoc(\"id\", \"531\", \"subject\", \"no name document\", \"field_t\", \"what's inside?\") );\n    assertU(commit());\n    \n    // Check to make sure this submission did not succeed\n    assertQ(\"should not find any\", req(\"id:531\") ,\"//result[@numFound=0]\" );      \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6d6338c87060be5f66757a94945975f3bbd377a9","date":1189278234,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/test/org/apache/solr/schema/RequiredFieldsTest#testRequiredFieldsSingleAdd().mjava","pathOld":"src/test/org/apache/solr/schema/RequiredFieldsTest#testRequiredFieldsSingleAdd().mjava","sourceNew":"  public void testRequiredFieldsSingleAdd() {      \n    SolrCore core = h.getCore();     \n    // Add a single document\n    assertU(\"adding document\",\n      adoc(\"id\", \"529\", \"name\", \"document with id, name, and subject\", \"field_t\", \"what's inside?\", \"subject\", \"info\"));\n    assertU(commit());\n    \n    // Check it it is in the index\n    assertQ(\"should find one\", req(\"id:529\") ,\"//result[@numFound=1]\" );\n\n    // Add another document without the required subject field, which\n    // has a configured defaultValue of \"Stuff\"\n    assertU(\"adding a doc without field w/ configured default\",\n          adoc(\"id\", \"530\", \"name\", \"document with id and name\", \"field_t\", \"what's inside?\"));\n    assertU(commit());\n\n    // Add another document without a subject, which has a default in schema\n    String subjectDefault = core.getSchema().getField(\"subject\").getDefaultValue();\n    assertNotNull(\"subject has no default value\", subjectDefault);\n    assertQ(\"should find one with subject=\"+subjectDefault, req(\"id:530 subject:\"+subjectDefault) ,\"//result[@numFound=1]\" );\n\n    // Add another document without a required name, which has no default\n    assertNull(core.getSchema().getField(\"name\").getDefaultValue());\n    assertFailedU(\"adding doc without required field\",\n          adoc(\"id\", \"531\", \"subject\", \"no name document\", \"field_t\", \"what's inside?\") );\n    assertU(commit());\n    \n    // Check to make sure this submission did not succeed\n    assertQ(\"should not find any\", req(\"id:531\") ,\"//result[@numFound=0]\" );      \n  }\n\n","sourceOld":"  public void testRequiredFieldsSingleAdd() {      \n    // Add a single document\n    assertU(\"adding document\",\n      adoc(\"id\", \"529\", \"name\", \"document with id, name, and subject\", \"field_t\", \"what's inside?\", \"subject\", \"info\"));\n    assertU(commit());\n    \n    // Check it it is in the index\n    assertQ(\"should find one\", req(\"id:529\") ,\"//result[@numFound=1]\" );\n\n    // Add another document without the required subject field, which\n    // has a configured defaultValue of \"Stuff\"\n    assertU(\"adding a doc without field w/ configured default\",\n          adoc(\"id\", \"530\", \"name\", \"document with id and name\", \"field_t\", \"what's inside?\"));\n    assertU(commit());\n\n    // Add another document without a subject, which has a default in schema\n    String subjectDefault = SolrCore.getSolrCore().getSchema().getField(\"subject\").getDefaultValue();\n    assertNotNull(\"subject has no default value\", subjectDefault);\n    assertQ(\"should find one with subject=\"+subjectDefault, req(\"id:530 subject:\"+subjectDefault) ,\"//result[@numFound=1]\" );\n\n    // Add another document without a required name, which has no default\n    assertNull(SolrCore.getSolrCore().getSchema().getField(\"name\").getDefaultValue());\n    assertFailedU(\"adding doc without required field\",\n          adoc(\"id\", \"531\", \"subject\", \"no name document\", \"field_t\", \"what's inside?\") );\n    assertU(commit());\n    \n    // Check to make sure this submission did not succeed\n    assertQ(\"should not find any\", req(\"id:531\") ,\"//result[@numFound=0]\" );      \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/schema/RequiredFieldsTest#testRequiredFieldsSingleAdd().mjava","pathOld":"src/test/org/apache/solr/schema/RequiredFieldsTest#testRequiredFieldsSingleAdd().mjava","sourceNew":"  public void testRequiredFieldsSingleAdd() {      \n    SolrCore core = h.getCore();     \n    // Add a single document\n    assertU(\"adding document\",\n      adoc(\"id\", \"529\", \"name\", \"document with id, name, and subject\", \"field_t\", \"what's inside?\", \"subject\", \"info\"));\n    assertU(commit());\n    \n    // Check it it is in the index\n    assertQ(\"should find one\", req(\"id:529\") ,\"//result[@numFound=1]\" );\n\n    // Add another document without the required subject field, which\n    // has a configured defaultValue of \"Stuff\"\n    assertU(\"adding a doc without field w/ configured default\",\n          adoc(\"id\", \"530\", \"name\", \"document with id and name\", \"field_t\", \"what's inside?\"));\n    assertU(commit());\n\n    // Add another document without a subject, which has a default in schema\n    String subjectDefault = core.getSchema().getField(\"subject\").getDefaultValue();\n    assertNotNull(\"subject has no default value\", subjectDefault);\n    assertQ(\"should find one with subject=\"+subjectDefault, req(\"id:530 subject:\"+subjectDefault) ,\"//result[@numFound=1]\" );\n\n    // Add another document without a required name, which has no default\n    assertNull(core.getSchema().getField(\"name\").getDefaultValue());\n    assertFailedU(\"adding doc without required field\",\n          adoc(\"id\", \"531\", \"subject\", \"no name document\", \"field_t\", \"what's inside?\") );\n    assertU(commit());\n    \n    // Check to make sure this submission did not succeed\n    assertQ(\"should not find any\", req(\"id:531\") ,\"//result[@numFound=0]\" );      \n  }\n\n","sourceOld":"  public void testRequiredFieldsSingleAdd() {      \n    SolrCore core = h.getCore();     \n    // Add a single document\n    assertU(\"adding document\",\n      adoc(\"id\", \"529\", \"name\", \"document with id, name, and subject\", \"field_t\", \"what's inside?\", \"subject\", \"info\"));\n    assertU(commit());\n    \n    // Check it it is in the index\n    assertQ(\"should find one\", req(\"id:529\") ,\"//result[@numFound=1]\" );\n\n    // Add another document without the required subject field, which\n    // has a configured defaultValue of \"Stuff\"\n    assertU(\"adding a doc without field w/ configured default\",\n          adoc(\"id\", \"530\", \"name\", \"document with id and name\", \"field_t\", \"what's inside?\"));\n    assertU(commit());\n\n    // Add another document without a subject, which has a default in schema\n    String subjectDefault = core.getSchema().getField(\"subject\").getDefaultValue();\n    assertNotNull(\"subject has no default value\", subjectDefault);\n    assertQ(\"should find one with subject=\"+subjectDefault, req(\"id:530 subject:\"+subjectDefault) ,\"//result[@numFound=1]\" );\n\n    // Add another document without a required name, which has no default\n    assertNull(core.getSchema().getField(\"name\").getDefaultValue());\n    assertFailedU(\"adding doc without required field\",\n          adoc(\"id\", \"531\", \"subject\", \"no name document\", \"field_t\", \"what's inside?\") );\n    assertU(commit());\n    \n    // Check to make sure this submission did not succeed\n    assertQ(\"should not find any\", req(\"id:531\") ,\"//result[@numFound=0]\" );      \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6d6338c87060be5f66757a94945975f3bbd377a9":["335d5ef4d54c2861b4ebdc7244bd81278f1c1d22"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["6d6338c87060be5f66757a94945975f3bbd377a9"],"335d5ef4d54c2861b4ebdc7244bd81278f1c1d22":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"6d6338c87060be5f66757a94945975f3bbd377a9":["ad94625fb8d088209f46650c8097196fec67f00c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["335d5ef4d54c2861b4ebdc7244bd81278f1c1d22"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"335d5ef4d54c2861b4ebdc7244bd81278f1c1d22":["6d6338c87060be5f66757a94945975f3bbd377a9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}