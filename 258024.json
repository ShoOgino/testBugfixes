{"path":"src/test/org/apache/lucene/index/TestThreadedOptimize#runTest(Directory,MergeScheduler).mjava","commits":[{"id":"87c966e9308847938a7c905c2e46a56d8df788b8","date":1255035452,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestThreadedOptimize#runTest(Directory,MergeScheduler).mjava","pathOld":"src/test/org/apache/lucene/index/TestThreadedOptimize#runTest(Directory,boolean,MergeScheduler).mjava","sourceNew":"  public void runTest(Directory directory, MergeScheduler merger) throws Exception {\n\n    IndexWriter writer = new IndexWriter(directory, ANALYZER, true, IndexWriter.MaxFieldLength.UNLIMITED);\n    writer.setMaxBufferedDocs(2);\n    if (merger != null)\n      writer.setMergeScheduler(merger);\n\n    for(int iter=0;iter<NUM_ITER;iter++) {\n      final int iterFinal = iter;\n\n      writer.setMergeFactor(1000);\n\n      for(int i=0;i<200;i++) {\n        Document d = new Document();\n        d.add(new Field(\"id\", Integer.toString(i), Field.Store.YES, Field.Index.NOT_ANALYZED));\n        d.add(new Field(\"contents\", English.intToEnglish(i), Field.Store.NO, Field.Index.ANALYZED));\n        writer.addDocument(d);\n      }\n\n      writer.setMergeFactor(4);\n      //writer.setInfoStream(System.out);\n\n      Thread[] threads = new Thread[NUM_THREADS];\n      \n      for(int i=0;i<NUM_THREADS;i++) {\n        final int iFinal = i;\n        final IndexWriter writerFinal = writer;\n        threads[i] = new Thread() {\n          public void run() {\n            try {\n              for(int j=0;j<NUM_ITER2;j++) {\n                writerFinal.optimize(false);\n                for(int k=0;k<17*(1+iFinal);k++) {\n                  Document d = new Document();\n                  d.add(new Field(\"id\", iterFinal + \"_\" + iFinal + \"_\" + j + \"_\" + k, Field.Store.YES, Field.Index.NOT_ANALYZED));\n                  d.add(new Field(\"contents\", English.intToEnglish(iFinal+k), Field.Store.NO, Field.Index.ANALYZED));\n                  writerFinal.addDocument(d);\n                }\n                for(int k=0;k<9*(1+iFinal);k++)\n                  writerFinal.deleteDocuments(new Term(\"id\", iterFinal + \"_\" + iFinal + \"_\" + j + \"_\" + k));\n                writerFinal.optimize();\n              }\n            } catch (Throwable t) {\n              setFailed();\n              System.out.println(Thread.currentThread().getName() + \": hit exception\");\n              t.printStackTrace(System.out);\n            }\n          }\n        };\n      }\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].join();\n\n      assertTrue(!failed);\n\n      final int expectedDocCount = (int) ((1+iter)*(200+8*NUM_ITER2*(NUM_THREADS/2.0)*(1+NUM_THREADS)));\n\n      // System.out.println(\"TEST: now index=\" + writer.segString());\n\n      assertEquals(expectedDocCount, writer.docCount());\n\n      writer.close();\n      writer = new IndexWriter(directory, ANALYZER, false, IndexWriter.MaxFieldLength.UNLIMITED);\n      writer.setMaxBufferedDocs(2);\n\n      IndexReader reader = IndexReader.open(directory, true);\n      assertTrue(reader.isOptimized());\n      assertEquals(expectedDocCount, reader.numDocs());\n      reader.close();\n    }\n    writer.close();\n  }\n\n","sourceOld":"  public void runTest(Directory directory, boolean autoCommit, MergeScheduler merger) throws Exception {\n\n    IndexWriter writer = new IndexWriter(directory, autoCommit, ANALYZER, true);\n    writer.setMaxBufferedDocs(2);\n    if (merger != null)\n      writer.setMergeScheduler(merger);\n\n    for(int iter=0;iter<NUM_ITER;iter++) {\n      final int iterFinal = iter;\n\n      writer.setMergeFactor(1000);\n\n      for(int i=0;i<200;i++) {\n        Document d = new Document();\n        d.add(new Field(\"id\", Integer.toString(i), Field.Store.YES, Field.Index.NOT_ANALYZED));\n        d.add(new Field(\"contents\", English.intToEnglish(i), Field.Store.NO, Field.Index.ANALYZED));\n        writer.addDocument(d);\n      }\n\n      writer.setMergeFactor(4);\n      //writer.setInfoStream(System.out);\n\n      final int docCount = writer.docCount();\n\n      Thread[] threads = new Thread[NUM_THREADS];\n      \n      for(int i=0;i<NUM_THREADS;i++) {\n        final int iFinal = i;\n        final IndexWriter writerFinal = writer;\n        threads[i] = new Thread() {\n          public void run() {\n            try {\n              for(int j=0;j<NUM_ITER2;j++) {\n                writerFinal.optimize(false);\n                for(int k=0;k<17*(1+iFinal);k++) {\n                  Document d = new Document();\n                  d.add(new Field(\"id\", iterFinal + \"_\" + iFinal + \"_\" + j + \"_\" + k, Field.Store.YES, Field.Index.NOT_ANALYZED));\n                  d.add(new Field(\"contents\", English.intToEnglish(iFinal+k), Field.Store.NO, Field.Index.ANALYZED));\n                  writerFinal.addDocument(d);\n                }\n                for(int k=0;k<9*(1+iFinal);k++)\n                  writerFinal.deleteDocuments(new Term(\"id\", iterFinal + \"_\" + iFinal + \"_\" + j + \"_\" + k));\n                writerFinal.optimize();\n              }\n            } catch (Throwable t) {\n              setFailed();\n              System.out.println(Thread.currentThread().getName() + \": hit exception\");\n              t.printStackTrace(System.out);\n            }\n          }\n        };\n      }\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].join();\n\n      assertTrue(!failed);\n\n      final int expectedDocCount = (int) ((1+iter)*(200+8*NUM_ITER2*(NUM_THREADS/2.0)*(1+NUM_THREADS)));\n\n      // System.out.println(\"TEST: now index=\" + writer.segString());\n\n      assertEquals(expectedDocCount, writer.docCount());\n\n      if (!autoCommit) {\n        writer.close();\n        writer = new IndexWriter(directory, autoCommit, ANALYZER, false);\n        writer.setMaxBufferedDocs(2);\n      }\n\n      IndexReader reader = IndexReader.open(directory, true);\n      assertTrue(reader.isOptimized());\n      assertEquals(expectedDocCount, reader.numDocs());\n      reader.close();\n    }\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"560b3a3bb8efcae105d6ae5fbee0f8b03c7decc7","date":1255555265,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestThreadedOptimize#runTest(Directory,MergeScheduler).mjava","pathOld":"src/test/org/apache/lucene/index/TestThreadedOptimize#runTest(Directory,MergeScheduler).mjava","sourceNew":"  public void runTest(Directory directory, MergeScheduler merger) throws Exception {\n\n    IndexWriter writer = new IndexWriter(directory, ANALYZER, true, IndexWriter.MaxFieldLength.UNLIMITED);\n    writer.setMaxBufferedDocs(2);\n    if (merger != null)\n      writer.setMergeScheduler(merger);\n\n    for(int iter=0;iter<NUM_ITER;iter++) {\n      final int iterFinal = iter;\n\n      writer.setMergeFactor(1000);\n\n      for(int i=0;i<200;i++) {\n        Document d = new Document();\n        d.add(new Field(\"id\", Integer.toString(i), Field.Store.YES, Field.Index.NOT_ANALYZED));\n        d.add(new Field(\"contents\", English.intToEnglish(i), Field.Store.NO, Field.Index.ANALYZED));\n        writer.addDocument(d);\n      }\n\n      writer.setMergeFactor(4);\n      //writer.setInfoStream(System.out);\n\n      Thread[] threads = new Thread[NUM_THREADS];\n      \n      for(int i=0;i<NUM_THREADS;i++) {\n        final int iFinal = i;\n        final IndexWriter writerFinal = writer;\n        threads[i] = new Thread() {\n          public void run() {\n            try {\n              for(int j=0;j<NUM_ITER2;j++) {\n                writerFinal.optimize(false);\n                for(int k=0;k<17*(1+iFinal);k++) {\n                  Document d = new Document();\n                  d.add(new Field(\"id\", iterFinal + \"_\" + iFinal + \"_\" + j + \"_\" + k, Field.Store.YES, Field.Index.NOT_ANALYZED));\n                  d.add(new Field(\"contents\", English.intToEnglish(iFinal+k), Field.Store.NO, Field.Index.ANALYZED));\n                  writerFinal.addDocument(d);\n                }\n                for(int k=0;k<9*(1+iFinal);k++)\n                  writerFinal.deleteDocuments(new Term(\"id\", iterFinal + \"_\" + iFinal + \"_\" + j + \"_\" + k));\n                writerFinal.optimize();\n              }\n            } catch (Throwable t) {\n              setFailed();\n              System.out.println(Thread.currentThread().getName() + \": hit exception\");\n              t.printStackTrace(System.out);\n            }\n          }\n        };\n      }\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].join();\n\n      assertTrue(!failed);\n\n      final int expectedDocCount = (int) ((1+iter)*(200+8*NUM_ITER2*(NUM_THREADS/2.0)*(1+NUM_THREADS)));\n\n      // System.out.println(\"TEST: now index=\" + writer.segString());\n\n      assertEquals(expectedDocCount, writer.maxDoc());\n\n      writer.close();\n      writer = new IndexWriter(directory, ANALYZER, false, IndexWriter.MaxFieldLength.UNLIMITED);\n      writer.setMaxBufferedDocs(2);\n\n      IndexReader reader = IndexReader.open(directory, true);\n      assertTrue(reader.isOptimized());\n      assertEquals(expectedDocCount, reader.numDocs());\n      reader.close();\n    }\n    writer.close();\n  }\n\n","sourceOld":"  public void runTest(Directory directory, MergeScheduler merger) throws Exception {\n\n    IndexWriter writer = new IndexWriter(directory, ANALYZER, true, IndexWriter.MaxFieldLength.UNLIMITED);\n    writer.setMaxBufferedDocs(2);\n    if (merger != null)\n      writer.setMergeScheduler(merger);\n\n    for(int iter=0;iter<NUM_ITER;iter++) {\n      final int iterFinal = iter;\n\n      writer.setMergeFactor(1000);\n\n      for(int i=0;i<200;i++) {\n        Document d = new Document();\n        d.add(new Field(\"id\", Integer.toString(i), Field.Store.YES, Field.Index.NOT_ANALYZED));\n        d.add(new Field(\"contents\", English.intToEnglish(i), Field.Store.NO, Field.Index.ANALYZED));\n        writer.addDocument(d);\n      }\n\n      writer.setMergeFactor(4);\n      //writer.setInfoStream(System.out);\n\n      Thread[] threads = new Thread[NUM_THREADS];\n      \n      for(int i=0;i<NUM_THREADS;i++) {\n        final int iFinal = i;\n        final IndexWriter writerFinal = writer;\n        threads[i] = new Thread() {\n          public void run() {\n            try {\n              for(int j=0;j<NUM_ITER2;j++) {\n                writerFinal.optimize(false);\n                for(int k=0;k<17*(1+iFinal);k++) {\n                  Document d = new Document();\n                  d.add(new Field(\"id\", iterFinal + \"_\" + iFinal + \"_\" + j + \"_\" + k, Field.Store.YES, Field.Index.NOT_ANALYZED));\n                  d.add(new Field(\"contents\", English.intToEnglish(iFinal+k), Field.Store.NO, Field.Index.ANALYZED));\n                  writerFinal.addDocument(d);\n                }\n                for(int k=0;k<9*(1+iFinal);k++)\n                  writerFinal.deleteDocuments(new Term(\"id\", iterFinal + \"_\" + iFinal + \"_\" + j + \"_\" + k));\n                writerFinal.optimize();\n              }\n            } catch (Throwable t) {\n              setFailed();\n              System.out.println(Thread.currentThread().getName() + \": hit exception\");\n              t.printStackTrace(System.out);\n            }\n          }\n        };\n      }\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].join();\n\n      assertTrue(!failed);\n\n      final int expectedDocCount = (int) ((1+iter)*(200+8*NUM_ITER2*(NUM_THREADS/2.0)*(1+NUM_THREADS)));\n\n      // System.out.println(\"TEST: now index=\" + writer.segString());\n\n      assertEquals(expectedDocCount, writer.docCount());\n\n      writer.close();\n      writer = new IndexWriter(directory, ANALYZER, false, IndexWriter.MaxFieldLength.UNLIMITED);\n      writer.setMaxBufferedDocs(2);\n\n      IndexReader reader = IndexReader.open(directory, true);\n      assertTrue(reader.isOptimized());\n      assertEquals(expectedDocCount, reader.numDocs());\n      reader.close();\n    }\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1326054a8d3aa66382d49decc7f330955c9c6f71","date":1257386139,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestThreadedOptimize#runTest(Directory,MergeScheduler).mjava","pathOld":"src/test/org/apache/lucene/index/TestThreadedOptimize#runTest(Directory,MergeScheduler).mjava","sourceNew":"  public void runTest(Directory directory, MergeScheduler merger) throws Exception {\n\n    IndexWriter writer = new IndexWriter(directory, ANALYZER, true, IndexWriter.MaxFieldLength.UNLIMITED);\n    writer.setMaxBufferedDocs(2);\n    if (merger != null)\n      writer.setMergeScheduler(merger);\n\n    for(int iter=0;iter<NUM_ITER;iter++) {\n      final int iterFinal = iter;\n\n      writer.setMergeFactor(1000);\n\n      for(int i=0;i<200;i++) {\n        Document d = new Document();\n        d.add(new Field(\"id\", Integer.toString(i), Field.Store.YES, Field.Index.NOT_ANALYZED));\n        d.add(new Field(\"contents\", English.intToEnglish(i), Field.Store.NO, Field.Index.ANALYZED));\n        writer.addDocument(d);\n      }\n\n      writer.setMergeFactor(4);\n      //writer.setInfoStream(System.out);\n\n      Thread[] threads = new Thread[NUM_THREADS];\n      \n      for(int i=0;i<NUM_THREADS;i++) {\n        final int iFinal = i;\n        final IndexWriter writerFinal = writer;\n        threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              for(int j=0;j<NUM_ITER2;j++) {\n                writerFinal.optimize(false);\n                for(int k=0;k<17*(1+iFinal);k++) {\n                  Document d = new Document();\n                  d.add(new Field(\"id\", iterFinal + \"_\" + iFinal + \"_\" + j + \"_\" + k, Field.Store.YES, Field.Index.NOT_ANALYZED));\n                  d.add(new Field(\"contents\", English.intToEnglish(iFinal+k), Field.Store.NO, Field.Index.ANALYZED));\n                  writerFinal.addDocument(d);\n                }\n                for(int k=0;k<9*(1+iFinal);k++)\n                  writerFinal.deleteDocuments(new Term(\"id\", iterFinal + \"_\" + iFinal + \"_\" + j + \"_\" + k));\n                writerFinal.optimize();\n              }\n            } catch (Throwable t) {\n              setFailed();\n              System.out.println(Thread.currentThread().getName() + \": hit exception\");\n              t.printStackTrace(System.out);\n            }\n          }\n        };\n      }\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].join();\n\n      assertTrue(!failed);\n\n      final int expectedDocCount = (int) ((1+iter)*(200+8*NUM_ITER2*(NUM_THREADS/2.0)*(1+NUM_THREADS)));\n\n      // System.out.println(\"TEST: now index=\" + writer.segString());\n\n      assertEquals(expectedDocCount, writer.maxDoc());\n\n      writer.close();\n      writer = new IndexWriter(directory, ANALYZER, false, IndexWriter.MaxFieldLength.UNLIMITED);\n      writer.setMaxBufferedDocs(2);\n\n      IndexReader reader = IndexReader.open(directory, true);\n      assertTrue(reader.isOptimized());\n      assertEquals(expectedDocCount, reader.numDocs());\n      reader.close();\n    }\n    writer.close();\n  }\n\n","sourceOld":"  public void runTest(Directory directory, MergeScheduler merger) throws Exception {\n\n    IndexWriter writer = new IndexWriter(directory, ANALYZER, true, IndexWriter.MaxFieldLength.UNLIMITED);\n    writer.setMaxBufferedDocs(2);\n    if (merger != null)\n      writer.setMergeScheduler(merger);\n\n    for(int iter=0;iter<NUM_ITER;iter++) {\n      final int iterFinal = iter;\n\n      writer.setMergeFactor(1000);\n\n      for(int i=0;i<200;i++) {\n        Document d = new Document();\n        d.add(new Field(\"id\", Integer.toString(i), Field.Store.YES, Field.Index.NOT_ANALYZED));\n        d.add(new Field(\"contents\", English.intToEnglish(i), Field.Store.NO, Field.Index.ANALYZED));\n        writer.addDocument(d);\n      }\n\n      writer.setMergeFactor(4);\n      //writer.setInfoStream(System.out);\n\n      Thread[] threads = new Thread[NUM_THREADS];\n      \n      for(int i=0;i<NUM_THREADS;i++) {\n        final int iFinal = i;\n        final IndexWriter writerFinal = writer;\n        threads[i] = new Thread() {\n          public void run() {\n            try {\n              for(int j=0;j<NUM_ITER2;j++) {\n                writerFinal.optimize(false);\n                for(int k=0;k<17*(1+iFinal);k++) {\n                  Document d = new Document();\n                  d.add(new Field(\"id\", iterFinal + \"_\" + iFinal + \"_\" + j + \"_\" + k, Field.Store.YES, Field.Index.NOT_ANALYZED));\n                  d.add(new Field(\"contents\", English.intToEnglish(iFinal+k), Field.Store.NO, Field.Index.ANALYZED));\n                  writerFinal.addDocument(d);\n                }\n                for(int k=0;k<9*(1+iFinal);k++)\n                  writerFinal.deleteDocuments(new Term(\"id\", iterFinal + \"_\" + iFinal + \"_\" + j + \"_\" + k));\n                writerFinal.optimize();\n              }\n            } catch (Throwable t) {\n              setFailed();\n              System.out.println(Thread.currentThread().getName() + \": hit exception\");\n              t.printStackTrace(System.out);\n            }\n          }\n        };\n      }\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].join();\n\n      assertTrue(!failed);\n\n      final int expectedDocCount = (int) ((1+iter)*(200+8*NUM_ITER2*(NUM_THREADS/2.0)*(1+NUM_THREADS)));\n\n      // System.out.println(\"TEST: now index=\" + writer.segString());\n\n      assertEquals(expectedDocCount, writer.maxDoc());\n\n      writer.close();\n      writer = new IndexWriter(directory, ANALYZER, false, IndexWriter.MaxFieldLength.UNLIMITED);\n      writer.setMaxBufferedDocs(2);\n\n      IndexReader reader = IndexReader.open(directory, true);\n      assertTrue(reader.isOptimized());\n      assertEquals(expectedDocCount, reader.numDocs());\n      reader.close();\n    }\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestThreadedOptimize#runTest(Directory,MergeScheduler).mjava","pathOld":"src/test/org/apache/lucene/index/TestThreadedOptimize#runTest(Directory,MergeScheduler).mjava","sourceNew":"  public void runTest(Directory directory, MergeScheduler merger) throws Exception {\n\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT).setAnalyzer(ANALYZER)\n        .setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(2).setMergeScheduler(\n            merger));\n\n    for(int iter=0;iter<NUM_ITER;iter++) {\n      final int iterFinal = iter;\n\n      ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(1000);\n\n      for(int i=0;i<200;i++) {\n        Document d = new Document();\n        d.add(new Field(\"id\", Integer.toString(i), Field.Store.YES, Field.Index.NOT_ANALYZED));\n        d.add(new Field(\"contents\", English.intToEnglish(i), Field.Store.NO, Field.Index.ANALYZED));\n        writer.addDocument(d);\n      }\n\n      ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(4);\n      //writer.setInfoStream(System.out);\n\n      Thread[] threads = new Thread[NUM_THREADS];\n      \n      for(int i=0;i<NUM_THREADS;i++) {\n        final int iFinal = i;\n        final IndexWriter writerFinal = writer;\n        threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              for(int j=0;j<NUM_ITER2;j++) {\n                writerFinal.optimize(false);\n                for(int k=0;k<17*(1+iFinal);k++) {\n                  Document d = new Document();\n                  d.add(new Field(\"id\", iterFinal + \"_\" + iFinal + \"_\" + j + \"_\" + k, Field.Store.YES, Field.Index.NOT_ANALYZED));\n                  d.add(new Field(\"contents\", English.intToEnglish(iFinal+k), Field.Store.NO, Field.Index.ANALYZED));\n                  writerFinal.addDocument(d);\n                }\n                for(int k=0;k<9*(1+iFinal);k++)\n                  writerFinal.deleteDocuments(new Term(\"id\", iterFinal + \"_\" + iFinal + \"_\" + j + \"_\" + k));\n                writerFinal.optimize();\n              }\n            } catch (Throwable t) {\n              setFailed();\n              System.out.println(Thread.currentThread().getName() + \": hit exception\");\n              t.printStackTrace(System.out);\n            }\n          }\n        };\n      }\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].join();\n\n      assertTrue(!failed);\n\n      final int expectedDocCount = (int) ((1+iter)*(200+8*NUM_ITER2*(NUM_THREADS/2.0)*(1+NUM_THREADS)));\n\n      // System.out.println(\"TEST: now index=\" + writer.segString());\n\n      assertEquals(expectedDocCount, writer.maxDoc());\n\n      writer.close();\n      writer = new IndexWriter(directory, new IndexWriterConfig(\n          TEST_VERSION_CURRENT).setAnalyzer(ANALYZER).setOpenMode(\n          OpenMode.APPEND).setMaxBufferedDocs(2));\n\n      IndexReader reader = IndexReader.open(directory, true);\n      assertTrue(reader.isOptimized());\n      assertEquals(expectedDocCount, reader.numDocs());\n      reader.close();\n    }\n    writer.close();\n  }\n\n","sourceOld":"  public void runTest(Directory directory, MergeScheduler merger) throws Exception {\n\n    IndexWriter writer = new IndexWriter(directory, ANALYZER, true, IndexWriter.MaxFieldLength.UNLIMITED);\n    writer.setMaxBufferedDocs(2);\n    if (merger != null)\n      writer.setMergeScheduler(merger);\n\n    for(int iter=0;iter<NUM_ITER;iter++) {\n      final int iterFinal = iter;\n\n      writer.setMergeFactor(1000);\n\n      for(int i=0;i<200;i++) {\n        Document d = new Document();\n        d.add(new Field(\"id\", Integer.toString(i), Field.Store.YES, Field.Index.NOT_ANALYZED));\n        d.add(new Field(\"contents\", English.intToEnglish(i), Field.Store.NO, Field.Index.ANALYZED));\n        writer.addDocument(d);\n      }\n\n      writer.setMergeFactor(4);\n      //writer.setInfoStream(System.out);\n\n      Thread[] threads = new Thread[NUM_THREADS];\n      \n      for(int i=0;i<NUM_THREADS;i++) {\n        final int iFinal = i;\n        final IndexWriter writerFinal = writer;\n        threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              for(int j=0;j<NUM_ITER2;j++) {\n                writerFinal.optimize(false);\n                for(int k=0;k<17*(1+iFinal);k++) {\n                  Document d = new Document();\n                  d.add(new Field(\"id\", iterFinal + \"_\" + iFinal + \"_\" + j + \"_\" + k, Field.Store.YES, Field.Index.NOT_ANALYZED));\n                  d.add(new Field(\"contents\", English.intToEnglish(iFinal+k), Field.Store.NO, Field.Index.ANALYZED));\n                  writerFinal.addDocument(d);\n                }\n                for(int k=0;k<9*(1+iFinal);k++)\n                  writerFinal.deleteDocuments(new Term(\"id\", iterFinal + \"_\" + iFinal + \"_\" + j + \"_\" + k));\n                writerFinal.optimize();\n              }\n            } catch (Throwable t) {\n              setFailed();\n              System.out.println(Thread.currentThread().getName() + \": hit exception\");\n              t.printStackTrace(System.out);\n            }\n          }\n        };\n      }\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].join();\n\n      assertTrue(!failed);\n\n      final int expectedDocCount = (int) ((1+iter)*(200+8*NUM_ITER2*(NUM_THREADS/2.0)*(1+NUM_THREADS)));\n\n      // System.out.println(\"TEST: now index=\" + writer.segString());\n\n      assertEquals(expectedDocCount, writer.maxDoc());\n\n      writer.close();\n      writer = new IndexWriter(directory, ANALYZER, false, IndexWriter.MaxFieldLength.UNLIMITED);\n      writer.setMaxBufferedDocs(2);\n\n      IndexReader reader = IndexReader.open(directory, true);\n      assertTrue(reader.isOptimized());\n      assertEquals(expectedDocCount, reader.numDocs());\n      reader.close();\n    }\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestThreadedOptimize#runTest(Directory,MergeScheduler).mjava","pathOld":"src/test/org/apache/lucene/index/TestThreadedOptimize#runTest(Directory,MergeScheduler).mjava","sourceNew":"  public void runTest(Directory directory, MergeScheduler merger) throws Exception {\n\n    IndexWriter writer = new IndexWriter(directory, ANALYZER, true, IndexWriter.MaxFieldLength.UNLIMITED);\n    writer.setMaxBufferedDocs(2);\n    if (merger != null)\n      writer.setMergeScheduler(merger);\n\n    for(int iter=0;iter<NUM_ITER;iter++) {\n      final int iterFinal = iter;\n\n      writer.setMergeFactor(1000);\n\n      for(int i=0;i<200;i++) {\n        Document d = new Document();\n        d.add(new Field(\"id\", Integer.toString(i), Field.Store.YES, Field.Index.NOT_ANALYZED));\n        d.add(new Field(\"contents\", English.intToEnglish(i), Field.Store.NO, Field.Index.ANALYZED));\n        writer.addDocument(d);\n      }\n\n      writer.setMergeFactor(4);\n      //writer.setInfoStream(System.out);\n\n      Thread[] threads = new Thread[NUM_THREADS];\n      \n      for(int i=0;i<NUM_THREADS;i++) {\n        final int iFinal = i;\n        final IndexWriter writerFinal = writer;\n        threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              for(int j=0;j<NUM_ITER2;j++) {\n                writerFinal.optimize(false);\n                for(int k=0;k<17*(1+iFinal);k++) {\n                  Document d = new Document();\n                  d.add(new Field(\"id\", iterFinal + \"_\" + iFinal + \"_\" + j + \"_\" + k, Field.Store.YES, Field.Index.NOT_ANALYZED));\n                  d.add(new Field(\"contents\", English.intToEnglish(iFinal+k), Field.Store.NO, Field.Index.ANALYZED));\n                  writerFinal.addDocument(d);\n                }\n                for(int k=0;k<9*(1+iFinal);k++)\n                  writerFinal.deleteDocuments(new Term(\"id\", iterFinal + \"_\" + iFinal + \"_\" + j + \"_\" + k));\n                writerFinal.optimize();\n              }\n            } catch (Throwable t) {\n              setFailed();\n              System.out.println(Thread.currentThread().getName() + \": hit exception\");\n              t.printStackTrace(System.out);\n            }\n          }\n        };\n      }\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].join();\n\n      assertTrue(!failed);\n\n      final int expectedDocCount = (int) ((1+iter)*(200+8*NUM_ITER2*(NUM_THREADS/2.0)*(1+NUM_THREADS)));\n\n      // System.out.println(\"TEST: now index=\" + writer.segString());\n\n      assertEquals(expectedDocCount, writer.maxDoc());\n\n      writer.close();\n      writer = new IndexWriter(directory, ANALYZER, false, IndexWriter.MaxFieldLength.UNLIMITED);\n      writer.setMaxBufferedDocs(2);\n\n      IndexReader reader = IndexReader.open(directory, true);\n      assertTrue(reader.isOptimized());\n      assertEquals(expectedDocCount, reader.numDocs());\n      reader.close();\n    }\n    writer.close();\n  }\n\n","sourceOld":"  public void runTest(Directory directory, MergeScheduler merger) throws Exception {\n\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT).setAnalyzer(ANALYZER)\n        .setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(2).setMergeScheduler(\n            merger));\n\n    for(int iter=0;iter<NUM_ITER;iter++) {\n      final int iterFinal = iter;\n\n      ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(1000);\n\n      for(int i=0;i<200;i++) {\n        Document d = new Document();\n        d.add(new Field(\"id\", Integer.toString(i), Field.Store.YES, Field.Index.NOT_ANALYZED));\n        d.add(new Field(\"contents\", English.intToEnglish(i), Field.Store.NO, Field.Index.ANALYZED));\n        writer.addDocument(d);\n      }\n\n      ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(4);\n      //writer.setInfoStream(System.out);\n\n      Thread[] threads = new Thread[NUM_THREADS];\n      \n      for(int i=0;i<NUM_THREADS;i++) {\n        final int iFinal = i;\n        final IndexWriter writerFinal = writer;\n        threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              for(int j=0;j<NUM_ITER2;j++) {\n                writerFinal.optimize(false);\n                for(int k=0;k<17*(1+iFinal);k++) {\n                  Document d = new Document();\n                  d.add(new Field(\"id\", iterFinal + \"_\" + iFinal + \"_\" + j + \"_\" + k, Field.Store.YES, Field.Index.NOT_ANALYZED));\n                  d.add(new Field(\"contents\", English.intToEnglish(iFinal+k), Field.Store.NO, Field.Index.ANALYZED));\n                  writerFinal.addDocument(d);\n                }\n                for(int k=0;k<9*(1+iFinal);k++)\n                  writerFinal.deleteDocuments(new Term(\"id\", iterFinal + \"_\" + iFinal + \"_\" + j + \"_\" + k));\n                writerFinal.optimize();\n              }\n            } catch (Throwable t) {\n              setFailed();\n              System.out.println(Thread.currentThread().getName() + \": hit exception\");\n              t.printStackTrace(System.out);\n            }\n          }\n        };\n      }\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].join();\n\n      assertTrue(!failed);\n\n      final int expectedDocCount = (int) ((1+iter)*(200+8*NUM_ITER2*(NUM_THREADS/2.0)*(1+NUM_THREADS)));\n\n      // System.out.println(\"TEST: now index=\" + writer.segString());\n\n      assertEquals(expectedDocCount, writer.maxDoc());\n\n      writer.close();\n      writer = new IndexWriter(directory, new IndexWriterConfig(\n          TEST_VERSION_CURRENT).setAnalyzer(ANALYZER).setOpenMode(\n          OpenMode.APPEND).setMaxBufferedDocs(2));\n\n      IndexReader reader = IndexReader.open(directory, true);\n      assertTrue(reader.isOptimized());\n      assertEquals(expectedDocCount, reader.numDocs());\n      reader.close();\n    }\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestThreadedOptimize#runTest(Directory,MergeScheduler).mjava","pathOld":"src/test/org/apache/lucene/index/TestThreadedOptimize#runTest(Directory,MergeScheduler).mjava","sourceNew":"  public void runTest(Directory directory, MergeScheduler merger) throws Exception {\n\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, ANALYZER)\n        .setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(2).setMergeScheduler(\n            merger));\n\n    for(int iter=0;iter<NUM_ITER;iter++) {\n      final int iterFinal = iter;\n\n      ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(1000);\n\n      for(int i=0;i<200;i++) {\n        Document d = new Document();\n        d.add(new Field(\"id\", Integer.toString(i), Field.Store.YES, Field.Index.NOT_ANALYZED));\n        d.add(new Field(\"contents\", English.intToEnglish(i), Field.Store.NO, Field.Index.ANALYZED));\n        writer.addDocument(d);\n      }\n\n      ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(4);\n      //writer.setInfoStream(System.out);\n\n      Thread[] threads = new Thread[NUM_THREADS];\n      \n      for(int i=0;i<NUM_THREADS;i++) {\n        final int iFinal = i;\n        final IndexWriter writerFinal = writer;\n        threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              for(int j=0;j<NUM_ITER2;j++) {\n                writerFinal.optimize(false);\n                for(int k=0;k<17*(1+iFinal);k++) {\n                  Document d = new Document();\n                  d.add(new Field(\"id\", iterFinal + \"_\" + iFinal + \"_\" + j + \"_\" + k, Field.Store.YES, Field.Index.NOT_ANALYZED));\n                  d.add(new Field(\"contents\", English.intToEnglish(iFinal+k), Field.Store.NO, Field.Index.ANALYZED));\n                  writerFinal.addDocument(d);\n                }\n                for(int k=0;k<9*(1+iFinal);k++)\n                  writerFinal.deleteDocuments(new Term(\"id\", iterFinal + \"_\" + iFinal + \"_\" + j + \"_\" + k));\n                writerFinal.optimize();\n              }\n            } catch (Throwable t) {\n              setFailed();\n              System.out.println(Thread.currentThread().getName() + \": hit exception\");\n              t.printStackTrace(System.out);\n            }\n          }\n        };\n      }\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].join();\n\n      assertTrue(!failed);\n\n      final int expectedDocCount = (int) ((1+iter)*(200+8*NUM_ITER2*(NUM_THREADS/2.0)*(1+NUM_THREADS)));\n\n      // System.out.println(\"TEST: now index=\" + writer.segString());\n\n      assertEquals(expectedDocCount, writer.maxDoc());\n\n      writer.close();\n      writer = new IndexWriter(directory, new IndexWriterConfig(\n          TEST_VERSION_CURRENT, ANALYZER).setOpenMode(\n          OpenMode.APPEND).setMaxBufferedDocs(2));\n\n      IndexReader reader = IndexReader.open(directory, true);\n      assertTrue(reader.isOptimized());\n      assertEquals(expectedDocCount, reader.numDocs());\n      reader.close();\n    }\n    writer.close();\n  }\n\n","sourceOld":"  public void runTest(Directory directory, MergeScheduler merger) throws Exception {\n\n    IndexWriter writer = new IndexWriter(directory, ANALYZER, true, IndexWriter.MaxFieldLength.UNLIMITED);\n    writer.setMaxBufferedDocs(2);\n    if (merger != null)\n      writer.setMergeScheduler(merger);\n\n    for(int iter=0;iter<NUM_ITER;iter++) {\n      final int iterFinal = iter;\n\n      writer.setMergeFactor(1000);\n\n      for(int i=0;i<200;i++) {\n        Document d = new Document();\n        d.add(new Field(\"id\", Integer.toString(i), Field.Store.YES, Field.Index.NOT_ANALYZED));\n        d.add(new Field(\"contents\", English.intToEnglish(i), Field.Store.NO, Field.Index.ANALYZED));\n        writer.addDocument(d);\n      }\n\n      writer.setMergeFactor(4);\n      //writer.setInfoStream(System.out);\n\n      Thread[] threads = new Thread[NUM_THREADS];\n      \n      for(int i=0;i<NUM_THREADS;i++) {\n        final int iFinal = i;\n        final IndexWriter writerFinal = writer;\n        threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              for(int j=0;j<NUM_ITER2;j++) {\n                writerFinal.optimize(false);\n                for(int k=0;k<17*(1+iFinal);k++) {\n                  Document d = new Document();\n                  d.add(new Field(\"id\", iterFinal + \"_\" + iFinal + \"_\" + j + \"_\" + k, Field.Store.YES, Field.Index.NOT_ANALYZED));\n                  d.add(new Field(\"contents\", English.intToEnglish(iFinal+k), Field.Store.NO, Field.Index.ANALYZED));\n                  writerFinal.addDocument(d);\n                }\n                for(int k=0;k<9*(1+iFinal);k++)\n                  writerFinal.deleteDocuments(new Term(\"id\", iterFinal + \"_\" + iFinal + \"_\" + j + \"_\" + k));\n                writerFinal.optimize();\n              }\n            } catch (Throwable t) {\n              setFailed();\n              System.out.println(Thread.currentThread().getName() + \": hit exception\");\n              t.printStackTrace(System.out);\n            }\n          }\n        };\n      }\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].join();\n\n      assertTrue(!failed);\n\n      final int expectedDocCount = (int) ((1+iter)*(200+8*NUM_ITER2*(NUM_THREADS/2.0)*(1+NUM_THREADS)));\n\n      // System.out.println(\"TEST: now index=\" + writer.segString());\n\n      assertEquals(expectedDocCount, writer.maxDoc());\n\n      writer.close();\n      writer = new IndexWriter(directory, ANALYZER, false, IndexWriter.MaxFieldLength.UNLIMITED);\n      writer.setMaxBufferedDocs(2);\n\n      IndexReader reader = IndexReader.open(directory, true);\n      assertTrue(reader.isOptimized());\n      assertEquals(expectedDocCount, reader.numDocs());\n      reader.close();\n    }\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestThreadedOptimize#runTest(Directory,MergeScheduler).mjava","pathOld":"src/test/org/apache/lucene/index/TestThreadedOptimize#runTest(Directory,MergeScheduler).mjava","sourceNew":"  public void runTest(Directory directory, MergeScheduler merger) throws Exception {\n\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, ANALYZER)\n        .setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(2).setMergeScheduler(\n            merger));\n\n    for(int iter=0;iter<NUM_ITER;iter++) {\n      final int iterFinal = iter;\n\n      ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(1000);\n\n      for(int i=0;i<200;i++) {\n        Document d = new Document();\n        d.add(new Field(\"id\", Integer.toString(i), Field.Store.YES, Field.Index.NOT_ANALYZED));\n        d.add(new Field(\"contents\", English.intToEnglish(i), Field.Store.NO, Field.Index.ANALYZED));\n        writer.addDocument(d);\n      }\n\n      ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(4);\n      //writer.setInfoStream(System.out);\n\n      Thread[] threads = new Thread[NUM_THREADS];\n      \n      for(int i=0;i<NUM_THREADS;i++) {\n        final int iFinal = i;\n        final IndexWriter writerFinal = writer;\n        threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              for(int j=0;j<NUM_ITER2;j++) {\n                writerFinal.optimize(false);\n                for(int k=0;k<17*(1+iFinal);k++) {\n                  Document d = new Document();\n                  d.add(new Field(\"id\", iterFinal + \"_\" + iFinal + \"_\" + j + \"_\" + k, Field.Store.YES, Field.Index.NOT_ANALYZED));\n                  d.add(new Field(\"contents\", English.intToEnglish(iFinal+k), Field.Store.NO, Field.Index.ANALYZED));\n                  writerFinal.addDocument(d);\n                }\n                for(int k=0;k<9*(1+iFinal);k++)\n                  writerFinal.deleteDocuments(new Term(\"id\", iterFinal + \"_\" + iFinal + \"_\" + j + \"_\" + k));\n                writerFinal.optimize();\n              }\n            } catch (Throwable t) {\n              setFailed();\n              System.out.println(Thread.currentThread().getName() + \": hit exception\");\n              t.printStackTrace(System.out);\n            }\n          }\n        };\n      }\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].join();\n\n      assertTrue(!failed);\n\n      final int expectedDocCount = (int) ((1+iter)*(200+8*NUM_ITER2*(NUM_THREADS/2.0)*(1+NUM_THREADS)));\n\n      // System.out.println(\"TEST: now index=\" + writer.segString());\n\n      assertEquals(expectedDocCount, writer.maxDoc());\n\n      writer.close();\n      writer = new IndexWriter(directory, new IndexWriterConfig(\n          TEST_VERSION_CURRENT, ANALYZER).setOpenMode(\n          OpenMode.APPEND).setMaxBufferedDocs(2));\n\n      IndexReader reader = IndexReader.open(directory, true);\n      assertTrue(reader.isOptimized());\n      assertEquals(expectedDocCount, reader.numDocs());\n      reader.close();\n    }\n    writer.close();\n  }\n\n","sourceOld":"  public void runTest(Directory directory, MergeScheduler merger) throws Exception {\n\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, ANALYZER)\n        .setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(2).setMergeScheduler(\n            merger));\n\n    for(int iter=0;iter<NUM_ITER;iter++) {\n      final int iterFinal = iter;\n\n      ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(1000);\n\n      for(int i=0;i<200;i++) {\n        Document d = new Document();\n        d.add(new Field(\"id\", Integer.toString(i), Field.Store.YES, Field.Index.NOT_ANALYZED));\n        d.add(new Field(\"contents\", English.intToEnglish(i), Field.Store.NO, Field.Index.ANALYZED));\n        writer.addDocument(d);\n      }\n\n      ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(4);\n      //writer.setInfoStream(System.out);\n\n      Thread[] threads = new Thread[NUM_THREADS];\n      \n      for(int i=0;i<NUM_THREADS;i++) {\n        final int iFinal = i;\n        final IndexWriter writerFinal = writer;\n        threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              for(int j=0;j<NUM_ITER2;j++) {\n                writerFinal.optimize(false);\n                for(int k=0;k<17*(1+iFinal);k++) {\n                  Document d = new Document();\n                  d.add(new Field(\"id\", iterFinal + \"_\" + iFinal + \"_\" + j + \"_\" + k, Field.Store.YES, Field.Index.NOT_ANALYZED));\n                  d.add(new Field(\"contents\", English.intToEnglish(iFinal+k), Field.Store.NO, Field.Index.ANALYZED));\n                  writerFinal.addDocument(d);\n                }\n                for(int k=0;k<9*(1+iFinal);k++)\n                  writerFinal.deleteDocuments(new Term(\"id\", iterFinal + \"_\" + iFinal + \"_\" + j + \"_\" + k));\n                writerFinal.optimize();\n              }\n            } catch (Throwable t) {\n              setFailed();\n              System.out.println(Thread.currentThread().getName() + \": hit exception\");\n              t.printStackTrace(System.out);\n            }\n          }\n        };\n      }\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].join();\n\n      assertTrue(!failed);\n\n      final int expectedDocCount = (int) ((1+iter)*(200+8*NUM_ITER2*(NUM_THREADS/2.0)*(1+NUM_THREADS)));\n\n      // System.out.println(\"TEST: now index=\" + writer.segString());\n\n      assertEquals(expectedDocCount, writer.maxDoc());\n\n      writer.close();\n      writer = new IndexWriter(directory, new IndexWriterConfig(\n          TEST_VERSION_CURRENT, ANALYZER).setOpenMode(\n          OpenMode.APPEND).setMaxBufferedDocs(2));\n\n      IndexReader reader = IndexReader.open(directory, true);\n      assertTrue(reader.isOptimized());\n      assertEquals(expectedDocCount, reader.numDocs());\n      reader.close();\n    }\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"1326054a8d3aa66382d49decc7f330955c9c6f71":["560b3a3bb8efcae105d6ae5fbee0f8b03c7decc7"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1cedb00d2dd44640194401179358a2e3ba6051bf":["1326054a8d3aa66382d49decc7f330955c9c6f71"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"560b3a3bb8efcae105d6ae5fbee0f8b03c7decc7":["87c966e9308847938a7c905c2e46a56d8df788b8"],"87c966e9308847938a7c905c2e46a56d8df788b8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"]},"commit2Childs":{"1326054a8d3aa66382d49decc7f330955c9c6f71":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["87c966e9308847938a7c905c2e46a56d8df788b8"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"560b3a3bb8efcae105d6ae5fbee0f8b03c7decc7":["1326054a8d3aa66382d49decc7f330955c9c6f71"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"87c966e9308847938a7c905c2e46a56d8df788b8":["560b3a3bb8efcae105d6ae5fbee0f8b03c7decc7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}