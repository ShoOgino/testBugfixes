{"path":"solr/core/src/java/org/apache/solr/search/join/GraphTermsCollector#buildAutomaton(BytesRefHash).mjava","commits":[{"id":"a3be7723008a2c26b93c1b9d6a5e67ed2e4a2976","date":1500994164,"type":0,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/join/GraphTermsCollector#buildAutomaton(BytesRefHash).mjava","pathOld":"/dev/null","sourceNew":"  /** Build an automaton to represent the frontier query */\n  private Automaton buildAutomaton(BytesRefHash termBytesHash) {\n    // need top pass a sorted set of terms to the autn builder (maybe a better way to avoid this?)\n    final TreeSet<BytesRef> terms = new TreeSet<BytesRef>();\n    for (int i = 0 ; i < termBytesHash.size(); i++) {\n      BytesRef ref = new BytesRef();\n      termBytesHash.get(i, ref);\n      terms.add(ref);\n    }\n    final Automaton a = DaciukMihovAutomatonBuilder.build(terms);\n    return a;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a52341299179de5479672f7cf518bf4b173f34b3","date":1501079746,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/join/GraphTermsCollector#buildAutomaton(BytesRefHash).mjava","pathOld":"/dev/null","sourceNew":"  /** Build an automaton to represent the frontier query */\n  private Automaton buildAutomaton(BytesRefHash termBytesHash) {\n    // need top pass a sorted set of terms to the autn builder (maybe a better way to avoid this?)\n    final TreeSet<BytesRef> terms = new TreeSet<BytesRef>();\n    for (int i = 0 ; i < termBytesHash.size(); i++) {\n      BytesRef ref = new BytesRef();\n      termBytesHash.get(i, ref);\n      terms.add(ref);\n    }\n    final Automaton a = DaciukMihovAutomatonBuilder.build(terms);\n    return a;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","date":1502192746,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/join/GraphTermsCollector#buildAutomaton(BytesRefHash).mjava","pathOld":"/dev/null","sourceNew":"  /** Build an automaton to represent the frontier query */\n  private Automaton buildAutomaton(BytesRefHash termBytesHash) {\n    // need top pass a sorted set of terms to the autn builder (maybe a better way to avoid this?)\n    final TreeSet<BytesRef> terms = new TreeSet<BytesRef>();\n    for (int i = 0 ; i < termBytesHash.size(); i++) {\n      BytesRef ref = new BytesRef();\n      termBytesHash.get(i, ref);\n      terms.add(ref);\n    }\n    final Automaton a = DaciukMihovAutomatonBuilder.build(terms);\n    return a;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba33781da68babcaa5828121b443d3eb5c9d8480","date":1590595589,"type":4,"author":"Erick Erickson","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/search/join/GraphTermsCollector#buildAutomaton(BytesRefHash).mjava","sourceNew":null,"sourceOld":"  /** Build an automaton to represent the frontier query */\n  private Automaton buildAutomaton(BytesRefHash termBytesHash) {\n    // need top pass a sorted set of terms to the autn builder (maybe a better way to avoid this?)\n    final TreeSet<BytesRef> terms = new TreeSet<BytesRef>();\n    for (int i = 0 ; i < termBytesHash.size(); i++) {\n      BytesRef ref = new BytesRef();\n      termBytesHash.get(i, ref);\n      terms.add(ref);\n    }\n    final Automaton a = DaciukMihovAutomatonBuilder.build(terms);\n    return a;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a3be7723008a2c26b93c1b9d6a5e67ed2e4a2976":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a52341299179de5479672f7cf518bf4b173f34b3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a3be7723008a2c26b93c1b9d6a5e67ed2e4a2976"],"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a52341299179de5479672f7cf518bf4b173f34b3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ba33781da68babcaa5828121b443d3eb5c9d8480":["a52341299179de5479672f7cf518bf4b173f34b3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ba33781da68babcaa5828121b443d3eb5c9d8480"]},"commit2Childs":{"a3be7723008a2c26b93c1b9d6a5e67ed2e4a2976":["a52341299179de5479672f7cf518bf4b173f34b3"],"a52341299179de5479672f7cf518bf4b173f34b3":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","ba33781da68babcaa5828121b443d3eb5c9d8480"],"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a3be7723008a2c26b93c1b9d6a5e67ed2e4a2976","a52341299179de5479672f7cf518bf4b173f34b3","7a23cf16c8fa265dc0a564adcabb55e3f054e0ac"],"ba33781da68babcaa5828121b443d3eb5c9d8480":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}