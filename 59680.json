{"path":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ComputePlanAction#getSuggester(Policy.Session,TriggerEvent,ZkStateReader).mjava","commits":[{"id":"47a99fe8ee3f74e8da2ece1bddbc059d1e1beffa","date":1498706808,"type":1,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ComputePlanAction#getSuggester(Policy.Session,TriggerEvent,ZkStateReader).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ComputePlanAction#getSuggester(Policy.Session,TriggerEvent).mjava","sourceNew":"  protected Policy.Suggester getSuggester(Policy.Session session, TriggerEvent event, ZkStateReader zkStateReader) {\n    Policy.Suggester suggester;\n    switch (event.getEventType()) {\n      case NODEADDED:\n        NodeAddedTrigger.NodeAddedEvent nodeAddedEvent = (NodeAddedTrigger.NodeAddedEvent) event;\n        suggester = session.getSuggester(CollectionParams.CollectionAction.MOVEREPLICA)\n            .hint(Policy.Suggester.Hint.TARGET_NODE, nodeAddedEvent.getProperty(TriggerEvent.NODE_NAME));\n        log.debug(\"Created suggester with targetNode: {}\", nodeAddedEvent.getProperty(TriggerEvent.NODE_NAME));\n        break;\n      case NODELOST:\n        NodeLostTrigger.NodeLostEvent nodeLostEvent = (NodeLostTrigger.NodeLostEvent) event;\n        suggester = session.getSuggester(CollectionParams.CollectionAction.MOVEREPLICA)\n            .hint(Policy.Suggester.Hint.SRC_NODE, nodeLostEvent.getProperty(TriggerEvent.NODE_NAME));\n        log.debug(\"Created suggester with srcNode: {}\", nodeLostEvent.getProperty(TriggerEvent.NODE_NAME));\n        break;\n      default:\n        throw new UnsupportedOperationException(\"No support for events other than nodeAdded and nodeLost, received: \" + event.getEventType());\n    }\n    return suggester;\n  }\n\n","sourceOld":"  private Policy.Suggester getSuggester(Policy.Session session, TriggerEvent event) {\n    Policy.Suggester suggester;\n    switch (event.getEventType()) {\n      case NODEADDED:\n        NodeAddedTrigger.NodeAddedEvent nodeAddedEvent = (NodeAddedTrigger.NodeAddedEvent) event;\n        suggester = session.getSuggester(CollectionParams.CollectionAction.MOVEREPLICA)\n            .hint(Policy.Suggester.Hint.TARGET_NODE, nodeAddedEvent.getProperty(TriggerEvent.NODE_NAME));\n        log.debug(\"Created suggester with targetNode: {}\", nodeAddedEvent.getProperty(TriggerEvent.NODE_NAME));\n        break;\n      case NODELOST:\n        NodeLostTrigger.NodeLostEvent nodeLostEvent = (NodeLostTrigger.NodeLostEvent) event;\n        suggester = session.getSuggester(CollectionParams.CollectionAction.MOVEREPLICA)\n            .hint(Policy.Suggester.Hint.SRC_NODE, nodeLostEvent.getProperty(TriggerEvent.NODE_NAME));\n        log.debug(\"Created suggester with srcNode: {}\", nodeLostEvent.getProperty(TriggerEvent.NODE_NAME));\n        break;\n      default:\n        throw new UnsupportedOperationException(\"No support for events other than nodeAdded and nodeLost, received: \" + event.getEventType());\n    }\n    return suggester;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cba420e29870f0c0ea479aa2a3fe362e4eedc971","date":1499315621,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ComputePlanAction#getSuggester(Policy.Session,TriggerEvent,ZkStateReader).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ComputePlanAction#getSuggester(Policy.Session,TriggerEvent,ZkStateReader).mjava","sourceNew":"  protected Policy.Suggester getSuggester(Policy.Session session, TriggerEvent event, ZkStateReader zkStateReader) {\n    Policy.Suggester suggester;\n    switch (event.getEventType()) {\n      case NODEADDED:\n        suggester = session.getSuggester(CollectionParams.CollectionAction.MOVEREPLICA)\n            .hint(Policy.Suggester.Hint.TARGET_NODE, event.getProperty(TriggerEvent.NODE_NAME));\n        log.debug(\"Created suggester with targetNode: {}\", event.getProperty(TriggerEvent.NODE_NAME));\n        break;\n      case NODELOST:\n        suggester = session.getSuggester(CollectionParams.CollectionAction.MOVEREPLICA)\n            .hint(Policy.Suggester.Hint.SRC_NODE, event.getProperty(TriggerEvent.NODE_NAME));\n        log.debug(\"Created suggester with srcNode: {}\", event.getProperty(TriggerEvent.NODE_NAME));\n        break;\n      default:\n        throw new UnsupportedOperationException(\"No support for events other than nodeAdded and nodeLost, received: \" + event.getEventType());\n    }\n    return suggester;\n  }\n\n","sourceOld":"  protected Policy.Suggester getSuggester(Policy.Session session, TriggerEvent event, ZkStateReader zkStateReader) {\n    Policy.Suggester suggester;\n    switch (event.getEventType()) {\n      case NODEADDED:\n        NodeAddedTrigger.NodeAddedEvent nodeAddedEvent = (NodeAddedTrigger.NodeAddedEvent) event;\n        suggester = session.getSuggester(CollectionParams.CollectionAction.MOVEREPLICA)\n            .hint(Policy.Suggester.Hint.TARGET_NODE, nodeAddedEvent.getProperty(TriggerEvent.NODE_NAME));\n        log.debug(\"Created suggester with targetNode: {}\", nodeAddedEvent.getProperty(TriggerEvent.NODE_NAME));\n        break;\n      case NODELOST:\n        NodeLostTrigger.NodeLostEvent nodeLostEvent = (NodeLostTrigger.NodeLostEvent) event;\n        suggester = session.getSuggester(CollectionParams.CollectionAction.MOVEREPLICA)\n            .hint(Policy.Suggester.Hint.SRC_NODE, nodeLostEvent.getProperty(TriggerEvent.NODE_NAME));\n        log.debug(\"Created suggester with srcNode: {}\", nodeLostEvent.getProperty(TriggerEvent.NODE_NAME));\n        break;\n      default:\n        throw new UnsupportedOperationException(\"No support for events other than nodeAdded and nodeLost, received: \" + event.getEventType());\n    }\n    return suggester;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cc5ed4ca39a59c23d13866a1e110e608d93cbcc1","date":1503489512,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ComputePlanAction#getSuggester(Policy.Session,TriggerEvent,ZkStateReader).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ComputePlanAction#getSuggester(Policy.Session,TriggerEvent,ZkStateReader).mjava","sourceNew":"  protected Policy.Suggester getSuggester(Policy.Session session, TriggerEvent event, ZkStateReader zkStateReader) {\n    Policy.Suggester suggester;\n    switch (event.getEventType()) {\n      case NODEADDED:\n        suggester = session.getSuggester(CollectionParams.CollectionAction.MOVEREPLICA)\n            .hint(Policy.Suggester.Hint.TARGET_NODE, event.getProperty(TriggerEvent.NODE_NAMES));\n        log.debug(\"Created suggester with targetNode: {}\", event.getProperty(TriggerEvent.NODE_NAMES));\n        break;\n      case NODELOST:\n        suggester = session.getSuggester(CollectionParams.CollectionAction.MOVEREPLICA)\n            .hint(Policy.Suggester.Hint.SRC_NODE, event.getProperty(TriggerEvent.NODE_NAMES));\n        log.debug(\"Created suggester with srcNode: {}\", event.getProperty(TriggerEvent.NODE_NAMES));\n        break;\n      default:\n        throw new UnsupportedOperationException(\"No support for events other than nodeAdded and nodeLost, received: \" + event.getEventType());\n    }\n    return suggester;\n  }\n\n","sourceOld":"  protected Policy.Suggester getSuggester(Policy.Session session, TriggerEvent event, ZkStateReader zkStateReader) {\n    Policy.Suggester suggester;\n    switch (event.getEventType()) {\n      case NODEADDED:\n        suggester = session.getSuggester(CollectionParams.CollectionAction.MOVEREPLICA)\n            .hint(Policy.Suggester.Hint.TARGET_NODE, event.getProperty(TriggerEvent.NODE_NAME));\n        log.debug(\"Created suggester with targetNode: {}\", event.getProperty(TriggerEvent.NODE_NAME));\n        break;\n      case NODELOST:\n        suggester = session.getSuggester(CollectionParams.CollectionAction.MOVEREPLICA)\n            .hint(Policy.Suggester.Hint.SRC_NODE, event.getProperty(TriggerEvent.NODE_NAME));\n        log.debug(\"Created suggester with srcNode: {}\", event.getProperty(TriggerEvent.NODE_NAME));\n        break;\n      default:\n        throw new UnsupportedOperationException(\"No support for events other than nodeAdded and nodeLost, received: \" + event.getEventType());\n    }\n    return suggester;\n  }\n\n","bugFix":null,"bugIntro":["101645ef3f7b3be12940241226f9e1636541aadc","101645ef3f7b3be12940241226f9e1636541aadc"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac","date":1503580177,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ComputePlanAction#getSuggester(Policy.Session,TriggerEvent,ClusterDataProvider).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ComputePlanAction#getSuggester(Policy.Session,TriggerEvent,ZkStateReader).mjava","sourceNew":"  protected Policy.Suggester getSuggester(Policy.Session session, TriggerEvent event, ClusterDataProvider cdp) {\n    Policy.Suggester suggester;\n    switch (event.getEventType()) {\n      case NODEADDED:\n        suggester = session.getSuggester(CollectionParams.CollectionAction.MOVEREPLICA)\n            .hint(Policy.Suggester.Hint.TARGET_NODE, event.getProperty(TriggerEvent.NODE_NAMES));\n        log.debug(\"Created suggester with targetNode: {}\", event.getProperty(TriggerEvent.NODE_NAMES));\n        break;\n      case NODELOST:\n        suggester = session.getSuggester(CollectionParams.CollectionAction.MOVEREPLICA)\n            .hint(Policy.Suggester.Hint.SRC_NODE, event.getProperty(TriggerEvent.NODE_NAMES));\n        log.debug(\"Created suggester with srcNode: {}\", event.getProperty(TriggerEvent.NODE_NAMES));\n        break;\n      default:\n        throw new UnsupportedOperationException(\"No support for events other than nodeAdded and nodeLost, received: \" + event.getEventType());\n    }\n    return suggester;\n  }\n\n","sourceOld":"  protected Policy.Suggester getSuggester(Policy.Session session, TriggerEvent event, ZkStateReader zkStateReader) {\n    Policy.Suggester suggester;\n    switch (event.getEventType()) {\n      case NODEADDED:\n        suggester = session.getSuggester(CollectionParams.CollectionAction.MOVEREPLICA)\n            .hint(Policy.Suggester.Hint.TARGET_NODE, event.getProperty(TriggerEvent.NODE_NAMES));\n        log.debug(\"Created suggester with targetNode: {}\", event.getProperty(TriggerEvent.NODE_NAMES));\n        break;\n      case NODELOST:\n        suggester = session.getSuggester(CollectionParams.CollectionAction.MOVEREPLICA)\n            .hint(Policy.Suggester.Hint.SRC_NODE, event.getProperty(TriggerEvent.NODE_NAMES));\n        log.debug(\"Created suggester with srcNode: {}\", event.getProperty(TriggerEvent.NODE_NAMES));\n        break;\n      default:\n        throw new UnsupportedOperationException(\"No support for events other than nodeAdded and nodeLost, received: \" + event.getEventType());\n    }\n    return suggester;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b869898f50ca80263bac2e3ae0949f7700e5c977","date":1503580229,"type":1,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ComputePlanAction#getSuggester(Policy.Session,TriggerEvent,ZkStateReader).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ComputePlanAction#getSuggester(Policy.Session,TriggerEvent,ClusterDataProvider).mjava","sourceNew":"  protected Policy.Suggester getSuggester(Policy.Session session, TriggerEvent event, ZkStateReader zkStateReader) {\n    Policy.Suggester suggester;\n    switch (event.getEventType()) {\n      case NODEADDED:\n        suggester = session.getSuggester(CollectionParams.CollectionAction.MOVEREPLICA)\n            .hint(Policy.Suggester.Hint.TARGET_NODE, event.getProperty(TriggerEvent.NODE_NAMES));\n        log.debug(\"Created suggester with targetNode: {}\", event.getProperty(TriggerEvent.NODE_NAMES));\n        break;\n      case NODELOST:\n        suggester = session.getSuggester(CollectionParams.CollectionAction.MOVEREPLICA)\n            .hint(Policy.Suggester.Hint.SRC_NODE, event.getProperty(TriggerEvent.NODE_NAMES));\n        log.debug(\"Created suggester with srcNode: {}\", event.getProperty(TriggerEvent.NODE_NAMES));\n        break;\n      default:\n        throw new UnsupportedOperationException(\"No support for events other than nodeAdded and nodeLost, received: \" + event.getEventType());\n    }\n    return suggester;\n  }\n\n","sourceOld":"  protected Policy.Suggester getSuggester(Policy.Session session, TriggerEvent event, ClusterDataProvider cdp) {\n    Policy.Suggester suggester;\n    switch (event.getEventType()) {\n      case NODEADDED:\n        suggester = session.getSuggester(CollectionParams.CollectionAction.MOVEREPLICA)\n            .hint(Policy.Suggester.Hint.TARGET_NODE, event.getProperty(TriggerEvent.NODE_NAMES));\n        log.debug(\"Created suggester with targetNode: {}\", event.getProperty(TriggerEvent.NODE_NAMES));\n        break;\n      case NODELOST:\n        suggester = session.getSuggester(CollectionParams.CollectionAction.MOVEREPLICA)\n            .hint(Policy.Suggester.Hint.SRC_NODE, event.getProperty(TriggerEvent.NODE_NAMES));\n        log.debug(\"Created suggester with srcNode: {}\", event.getProperty(TriggerEvent.NODE_NAMES));\n        break;\n      default:\n        throw new UnsupportedOperationException(\"No support for events other than nodeAdded and nodeLost, received: \" + event.getEventType());\n    }\n    return suggester;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3955a9511098c96b652734b2f2d4160d07cc2d63","date":1504780677,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ComputePlanAction#getSuggester(Policy.Session,TriggerEvent,ZkStateReader).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ComputePlanAction#getSuggester(Policy.Session,TriggerEvent,ZkStateReader).mjava","sourceNew":"  protected Policy.Suggester getSuggester(Policy.Session session, TriggerEvent event, ZkStateReader zkStateReader) {\n    Policy.Suggester suggester;\n    switch (event.getEventType()) {\n      case NODEADDED:\n        suggester = session.getSuggester(CollectionParams.CollectionAction.MOVEREPLICA)\n            .hint(Policy.Suggester.Hint.TARGET_NODE, event.getProperty(TriggerEvent.NODE_NAMES));\n        log.debug(\"Created suggester with targetNode: {}\", event.getProperty(TriggerEvent.NODE_NAMES));\n        break;\n      case NODELOST:\n        suggester = session.getSuggester(CollectionParams.CollectionAction.MOVEREPLICA)\n            .hint(Policy.Suggester.Hint.SRC_NODE, event.getProperty(TriggerEvent.NODE_NAMES));\n        log.debug(\"Created suggester with srcNode: {}\", event.getProperty(TriggerEvent.NODE_NAMES));\n        break;\n      case SEARCHRATE:\n        Map<String, Map<String, Double>> hotShards = (Map<String, Map<String, Double>>)event.getProperty(AutoScalingParams.SHARD);\n        Map<String, Double> hotCollections = (Map<String, Double>)event.getProperty(AutoScalingParams.COLLECTION);\n        List<ReplicaInfo> hotReplicas = (List<ReplicaInfo>)event.getProperty(AutoScalingParams.REPLICA);\n        Map<String, Double> hotNodes = (Map<String, Double>)event.getProperty(AutoScalingParams.NODE);\n\n        if (hotShards.isEmpty() && hotCollections.isEmpty() && hotReplicas.isEmpty()) {\n          // node -> MOVEREPLICA\n          if (hotNodes.isEmpty()) {\n            log.warn(\"Neither hot replicas / collection nor nodes are reported in event: \" + event);\n            return NoneSuggester.INSTANCE;\n          }\n          suggester = session.getSuggester(CollectionParams.CollectionAction.MOVEREPLICA);\n          for (String node : hotNodes.keySet()) {\n            suggester = suggester.hint(Policy.Suggester.Hint.SRC_NODE, node);\n          }\n        } else {\n          // collection || shard || replica -> ADDREPLICA\n          suggester = session.getSuggester(CollectionParams.CollectionAction.ADDREPLICA);\n          Set<String> collections = new HashSet<>();\n          // XXX improve this when AddReplicaSuggester supports coll_shard hint\n          hotReplicas.forEach(r -> collections.add(r.getCollection()));\n          hotShards.forEach((coll, shards) -> collections.add(coll));\n          hotCollections.forEach((coll, rate) -> collections.add(coll));\n          for (String coll : collections) {\n            suggester = suggester.hint(Policy.Suggester.Hint.COLL, coll);\n          }\n        }\n        break;\n      default:\n        throw new UnsupportedOperationException(\"No support for events other than nodeAdded and nodeLost, received: \" + event.getEventType());\n    }\n    return suggester;\n  }\n\n","sourceOld":"  protected Policy.Suggester getSuggester(Policy.Session session, TriggerEvent event, ZkStateReader zkStateReader) {\n    Policy.Suggester suggester;\n    switch (event.getEventType()) {\n      case NODEADDED:\n        suggester = session.getSuggester(CollectionParams.CollectionAction.MOVEREPLICA)\n            .hint(Policy.Suggester.Hint.TARGET_NODE, event.getProperty(TriggerEvent.NODE_NAMES));\n        log.debug(\"Created suggester with targetNode: {}\", event.getProperty(TriggerEvent.NODE_NAMES));\n        break;\n      case NODELOST:\n        suggester = session.getSuggester(CollectionParams.CollectionAction.MOVEREPLICA)\n            .hint(Policy.Suggester.Hint.SRC_NODE, event.getProperty(TriggerEvent.NODE_NAMES));\n        log.debug(\"Created suggester with srcNode: {}\", event.getProperty(TriggerEvent.NODE_NAMES));\n        break;\n      default:\n        throw new UnsupportedOperationException(\"No support for events other than nodeAdded and nodeLost, received: \" + event.getEventType());\n    }\n    return suggester;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1cc58dbf9573e66a3054c7c372862b8e5a77a9da","date":1504796681,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ComputePlanAction#getSuggester(Policy.Session,TriggerEvent,ZkStateReader).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ComputePlanAction#getSuggester(Policy.Session,TriggerEvent,ZkStateReader).mjava","sourceNew":"  protected Policy.Suggester getSuggester(Policy.Session session, TriggerEvent event, ZkStateReader zkStateReader) {\n    Policy.Suggester suggester;\n    switch (event.getEventType()) {\n      case NODEADDED:\n        suggester = session.getSuggester(CollectionParams.CollectionAction.MOVEREPLICA)\n            .hint(Policy.Suggester.Hint.TARGET_NODE, event.getProperty(TriggerEvent.NODE_NAMES));\n        log.debug(\"Created suggester with targetNode: {}\", event.getProperty(TriggerEvent.NODE_NAMES));\n        break;\n      case NODELOST:\n        suggester = session.getSuggester(CollectionParams.CollectionAction.MOVEREPLICA)\n            .hint(Policy.Suggester.Hint.SRC_NODE, event.getProperty(TriggerEvent.NODE_NAMES));\n        log.debug(\"Created suggester with srcNode: {}\", event.getProperty(TriggerEvent.NODE_NAMES));\n        break;\n      case SEARCHRATE:\n        Map<String, Map<String, Double>> hotShards = (Map<String, Map<String, Double>>)event.getProperty(AutoScalingParams.SHARD);\n        Map<String, Double> hotCollections = (Map<String, Double>)event.getProperty(AutoScalingParams.COLLECTION);\n        List<ReplicaInfo> hotReplicas = (List<ReplicaInfo>)event.getProperty(AutoScalingParams.REPLICA);\n        Map<String, Double> hotNodes = (Map<String, Double>)event.getProperty(AutoScalingParams.NODE);\n\n        if (hotShards.isEmpty() && hotCollections.isEmpty() && hotReplicas.isEmpty()) {\n          // node -> MOVEREPLICA\n          if (hotNodes.isEmpty()) {\n            log.warn(\"Neither hot replicas / collection nor nodes are reported in event: \" + event);\n            return NoneSuggester.INSTANCE;\n          }\n          suggester = session.getSuggester(CollectionParams.CollectionAction.MOVEREPLICA);\n          for (String node : hotNodes.keySet()) {\n            suggester = suggester.hint(Policy.Suggester.Hint.SRC_NODE, node);\n          }\n        } else {\n          // collection || shard || replica -> ADDREPLICA\n          suggester = session.getSuggester(CollectionParams.CollectionAction.ADDREPLICA);\n          Map<String, Set<String>> collShards = new HashMap<>();\n          // AddReplicaSuggester needs a list of Pair(coll, shard)\n          hotReplicas.forEach(r -> collShards.computeIfAbsent(r.getCollection(), c -> new HashSet<>()).add(r.getShard()));\n          hotShards.forEach((coll, shards) -> collShards.computeIfAbsent(coll, c -> new HashSet<>()).addAll(shards.keySet()));\n          // if we only have hotCollections then use warmShards to pick ones to replicate\n          Map<String, String> warmShards = (Map<String, String>)event.getProperty(AutoScalingParams.WARM_SHARD);\n          hotCollections.forEach((coll, rate) -> {\n            Set<String> shards = collShards.get(coll);\n            if (shards == null || shards.isEmpty()) {\n              String warmShard = warmShards.get(coll);\n              if (warmShard == null) {\n                log.warn(\"Got hot collection '\" + coll + \"' but no warm shard! Ignoring...\");\n                return;\n              }\n              collShards.computeIfAbsent(coll, s -> new HashSet<>()).add(warmShard);\n            }\n          });\n          for (Map.Entry<String, Set<String>> e : collShards.entrySet()) {\n            for (String shard : e.getValue()) {\n              suggester = suggester.hint(Policy.Suggester.Hint.COLL_SHARD, new Pair<>(e.getKey(), shard));\n            }\n          }\n        }\n        break;\n      default:\n        throw new UnsupportedOperationException(\"No support for events other than nodeAdded and nodeLost, received: \" + event.getEventType());\n    }\n    return suggester;\n  }\n\n","sourceOld":"  protected Policy.Suggester getSuggester(Policy.Session session, TriggerEvent event, ZkStateReader zkStateReader) {\n    Policy.Suggester suggester;\n    switch (event.getEventType()) {\n      case NODEADDED:\n        suggester = session.getSuggester(CollectionParams.CollectionAction.MOVEREPLICA)\n            .hint(Policy.Suggester.Hint.TARGET_NODE, event.getProperty(TriggerEvent.NODE_NAMES));\n        log.debug(\"Created suggester with targetNode: {}\", event.getProperty(TriggerEvent.NODE_NAMES));\n        break;\n      case NODELOST:\n        suggester = session.getSuggester(CollectionParams.CollectionAction.MOVEREPLICA)\n            .hint(Policy.Suggester.Hint.SRC_NODE, event.getProperty(TriggerEvent.NODE_NAMES));\n        log.debug(\"Created suggester with srcNode: {}\", event.getProperty(TriggerEvent.NODE_NAMES));\n        break;\n      case SEARCHRATE:\n        Map<String, Map<String, Double>> hotShards = (Map<String, Map<String, Double>>)event.getProperty(AutoScalingParams.SHARD);\n        Map<String, Double> hotCollections = (Map<String, Double>)event.getProperty(AutoScalingParams.COLLECTION);\n        List<ReplicaInfo> hotReplicas = (List<ReplicaInfo>)event.getProperty(AutoScalingParams.REPLICA);\n        Map<String, Double> hotNodes = (Map<String, Double>)event.getProperty(AutoScalingParams.NODE);\n\n        if (hotShards.isEmpty() && hotCollections.isEmpty() && hotReplicas.isEmpty()) {\n          // node -> MOVEREPLICA\n          if (hotNodes.isEmpty()) {\n            log.warn(\"Neither hot replicas / collection nor nodes are reported in event: \" + event);\n            return NoneSuggester.INSTANCE;\n          }\n          suggester = session.getSuggester(CollectionParams.CollectionAction.MOVEREPLICA);\n          for (String node : hotNodes.keySet()) {\n            suggester = suggester.hint(Policy.Suggester.Hint.SRC_NODE, node);\n          }\n        } else {\n          // collection || shard || replica -> ADDREPLICA\n          suggester = session.getSuggester(CollectionParams.CollectionAction.ADDREPLICA);\n          Set<String> collections = new HashSet<>();\n          // XXX improve this when AddReplicaSuggester supports coll_shard hint\n          hotReplicas.forEach(r -> collections.add(r.getCollection()));\n          hotShards.forEach((coll, shards) -> collections.add(coll));\n          hotCollections.forEach((coll, rate) -> collections.add(coll));\n          for (String coll : collections) {\n            suggester = suggester.hint(Policy.Suggester.Hint.COLL, coll);\n          }\n        }\n        break;\n      default:\n        throw new UnsupportedOperationException(\"No support for events other than nodeAdded and nodeLost, received: \" + event.getEventType());\n    }\n    return suggester;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a4e412fed1b23292038553fbe85fe61cd7aa8472","date":1505751927,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ComputePlanAction#getSuggester(Policy.Session,TriggerEvent,ZkStateReader).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ComputePlanAction#getSuggester(Policy.Session,TriggerEvent,ZkStateReader).mjava","sourceNew":"  protected Policy.Suggester getSuggester(Policy.Session session, TriggerEvent event, ZkStateReader zkStateReader) {\n    Policy.Suggester suggester;\n    switch (event.getEventType()) {\n      case NODEADDED:\n        suggester = session.getSuggester(CollectionParams.CollectionAction.MOVEREPLICA)\n            .hint(Policy.Suggester.Hint.TARGET_NODE, event.getProperty(TriggerEvent.NODE_NAMES));\n        log.debug(\"Created suggester with targetNode: {}\", event.getProperty(TriggerEvent.NODE_NAMES));\n        break;\n      case NODELOST:\n        suggester = session.getSuggester(CollectionParams.CollectionAction.MOVEREPLICA)\n            .hint(Policy.Suggester.Hint.SRC_NODE, event.getProperty(TriggerEvent.NODE_NAMES));\n        log.debug(\"Created suggester with srcNode: {}\", event.getProperty(TriggerEvent.NODE_NAMES));\n        break;\n      case SEARCHRATE:\n        Map<String, Map<String, Double>> hotShards = (Map<String, Map<String, Double>>)event.getProperty(AutoScalingParams.SHARD);\n        Map<String, Double> hotCollections = (Map<String, Double>)event.getProperty(AutoScalingParams.COLLECTION);\n        List<ReplicaInfo> hotReplicas = (List<ReplicaInfo>)event.getProperty(AutoScalingParams.REPLICA);\n        Map<String, Double> hotNodes = (Map<String, Double>)event.getProperty(AutoScalingParams.NODE);\n\n        if (hotShards.isEmpty() && hotCollections.isEmpty() && hotReplicas.isEmpty()) {\n          // node -> MOVEREPLICA\n          if (hotNodes.isEmpty()) {\n            log.warn(\"Neither hot replicas / collection nor nodes are reported in event: \" + event);\n            return NoneSuggester.INSTANCE;\n          }\n          suggester = session.getSuggester(CollectionParams.CollectionAction.MOVEREPLICA);\n          for (String node : hotNodes.keySet()) {\n            suggester = suggester.hint(Policy.Suggester.Hint.SRC_NODE, node);\n          }\n        } else {\n          // collection || shard || replica -> ADDREPLICA\n          suggester = session.getSuggester(CollectionParams.CollectionAction.ADDREPLICA);\n          Set<String> collections = new HashSet<>();\n          // XXX improve this when AddReplicaSuggester supports coll_shard hint\n          hotReplicas.forEach(r -> collections.add(r.getCollection()));\n          hotShards.forEach((coll, shards) -> collections.add(coll));\n          hotCollections.forEach((coll, rate) -> collections.add(coll));\n          for (String coll : collections) {\n            suggester = suggester.hint(Policy.Suggester.Hint.COLL, coll);\n          }\n        }\n        break;\n      default:\n        throw new UnsupportedOperationException(\"No support for events other than nodeAdded and nodeLost, received: \" + event.getEventType());\n    }\n    return suggester;\n  }\n\n","sourceOld":"  protected Policy.Suggester getSuggester(Policy.Session session, TriggerEvent event, ZkStateReader zkStateReader) {\n    Policy.Suggester suggester;\n    switch (event.getEventType()) {\n      case NODEADDED:\n        suggester = session.getSuggester(CollectionParams.CollectionAction.MOVEREPLICA)\n            .hint(Policy.Suggester.Hint.TARGET_NODE, event.getProperty(TriggerEvent.NODE_NAMES));\n        log.debug(\"Created suggester with targetNode: {}\", event.getProperty(TriggerEvent.NODE_NAMES));\n        break;\n      case NODELOST:\n        suggester = session.getSuggester(CollectionParams.CollectionAction.MOVEREPLICA)\n            .hint(Policy.Suggester.Hint.SRC_NODE, event.getProperty(TriggerEvent.NODE_NAMES));\n        log.debug(\"Created suggester with srcNode: {}\", event.getProperty(TriggerEvent.NODE_NAMES));\n        break;\n      case SEARCHRATE:\n        Map<String, Map<String, Double>> hotShards = (Map<String, Map<String, Double>>)event.getProperty(AutoScalingParams.SHARD);\n        Map<String, Double> hotCollections = (Map<String, Double>)event.getProperty(AutoScalingParams.COLLECTION);\n        List<ReplicaInfo> hotReplicas = (List<ReplicaInfo>)event.getProperty(AutoScalingParams.REPLICA);\n        Map<String, Double> hotNodes = (Map<String, Double>)event.getProperty(AutoScalingParams.NODE);\n\n        if (hotShards.isEmpty() && hotCollections.isEmpty() && hotReplicas.isEmpty()) {\n          // node -> MOVEREPLICA\n          if (hotNodes.isEmpty()) {\n            log.warn(\"Neither hot replicas / collection nor nodes are reported in event: \" + event);\n            return NoneSuggester.INSTANCE;\n          }\n          suggester = session.getSuggester(CollectionParams.CollectionAction.MOVEREPLICA);\n          for (String node : hotNodes.keySet()) {\n            suggester = suggester.hint(Policy.Suggester.Hint.SRC_NODE, node);\n          }\n        } else {\n          // collection || shard || replica -> ADDREPLICA\n          suggester = session.getSuggester(CollectionParams.CollectionAction.ADDREPLICA);\n          Map<String, Set<String>> collShards = new HashMap<>();\n          // AddReplicaSuggester needs a list of Pair(coll, shard)\n          hotReplicas.forEach(r -> collShards.computeIfAbsent(r.getCollection(), c -> new HashSet<>()).add(r.getShard()));\n          hotShards.forEach((coll, shards) -> collShards.computeIfAbsent(coll, c -> new HashSet<>()).addAll(shards.keySet()));\n          // if we only have hotCollections then use warmShards to pick ones to replicate\n          Map<String, String> warmShards = (Map<String, String>)event.getProperty(AutoScalingParams.WARM_SHARD);\n          hotCollections.forEach((coll, rate) -> {\n            Set<String> shards = collShards.get(coll);\n            if (shards == null || shards.isEmpty()) {\n              String warmShard = warmShards.get(coll);\n              if (warmShard == null) {\n                log.warn(\"Got hot collection '\" + coll + \"' but no warm shard! Ignoring...\");\n                return;\n              }\n              collShards.computeIfAbsent(coll, s -> new HashSet<>()).add(warmShard);\n            }\n          });\n          for (Map.Entry<String, Set<String>> e : collShards.entrySet()) {\n            for (String shard : e.getValue()) {\n              suggester = suggester.hint(Policy.Suggester.Hint.COLL_SHARD, new Pair<>(e.getKey(), shard));\n            }\n          }\n        }\n        break;\n      default:\n        throw new UnsupportedOperationException(\"No support for events other than nodeAdded and nodeLost, received: \" + event.getEventType());\n    }\n    return suggester;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b71597cbe4c0f463a81f3f225fc0ff1355c8fee6","date":1505752009,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ComputePlanAction#getSuggester(Policy.Session,TriggerEvent,ZkStateReader).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ComputePlanAction#getSuggester(Policy.Session,TriggerEvent,ZkStateReader).mjava","sourceNew":"  protected Policy.Suggester getSuggester(Policy.Session session, TriggerEvent event, ZkStateReader zkStateReader) {\n    Policy.Suggester suggester;\n    switch (event.getEventType()) {\n      case NODEADDED:\n        suggester = session.getSuggester(CollectionParams.CollectionAction.MOVEREPLICA)\n            .hint(Policy.Suggester.Hint.TARGET_NODE, event.getProperty(TriggerEvent.NODE_NAMES));\n        log.debug(\"Created suggester with targetNode: {}\", event.getProperty(TriggerEvent.NODE_NAMES));\n        break;\n      case NODELOST:\n        suggester = session.getSuggester(CollectionParams.CollectionAction.MOVEREPLICA)\n            .hint(Policy.Suggester.Hint.SRC_NODE, event.getProperty(TriggerEvent.NODE_NAMES));\n        log.debug(\"Created suggester with srcNode: {}\", event.getProperty(TriggerEvent.NODE_NAMES));\n        break;\n      default:\n        throw new UnsupportedOperationException(\"No support for events other than nodeAdded and nodeLost, received: \" + event.getEventType());\n    }\n    return suggester;\n  }\n\n","sourceOld":"  protected Policy.Suggester getSuggester(Policy.Session session, TriggerEvent event, ZkStateReader zkStateReader) {\n    Policy.Suggester suggester;\n    switch (event.getEventType()) {\n      case NODEADDED:\n        suggester = session.getSuggester(CollectionParams.CollectionAction.MOVEREPLICA)\n            .hint(Policy.Suggester.Hint.TARGET_NODE, event.getProperty(TriggerEvent.NODE_NAMES));\n        log.debug(\"Created suggester with targetNode: {}\", event.getProperty(TriggerEvent.NODE_NAMES));\n        break;\n      case NODELOST:\n        suggester = session.getSuggester(CollectionParams.CollectionAction.MOVEREPLICA)\n            .hint(Policy.Suggester.Hint.SRC_NODE, event.getProperty(TriggerEvent.NODE_NAMES));\n        log.debug(\"Created suggester with srcNode: {}\", event.getProperty(TriggerEvent.NODE_NAMES));\n        break;\n      case SEARCHRATE:\n        Map<String, Map<String, Double>> hotShards = (Map<String, Map<String, Double>>)event.getProperty(AutoScalingParams.SHARD);\n        Map<String, Double> hotCollections = (Map<String, Double>)event.getProperty(AutoScalingParams.COLLECTION);\n        List<ReplicaInfo> hotReplicas = (List<ReplicaInfo>)event.getProperty(AutoScalingParams.REPLICA);\n        Map<String, Double> hotNodes = (Map<String, Double>)event.getProperty(AutoScalingParams.NODE);\n\n        if (hotShards.isEmpty() && hotCollections.isEmpty() && hotReplicas.isEmpty()) {\n          // node -> MOVEREPLICA\n          if (hotNodes.isEmpty()) {\n            log.warn(\"Neither hot replicas / collection nor nodes are reported in event: \" + event);\n            return NoneSuggester.INSTANCE;\n          }\n          suggester = session.getSuggester(CollectionParams.CollectionAction.MOVEREPLICA);\n          for (String node : hotNodes.keySet()) {\n            suggester = suggester.hint(Policy.Suggester.Hint.SRC_NODE, node);\n          }\n        } else {\n          // collection || shard || replica -> ADDREPLICA\n          suggester = session.getSuggester(CollectionParams.CollectionAction.ADDREPLICA);\n          Set<String> collections = new HashSet<>();\n          // XXX improve this when AddReplicaSuggester supports coll_shard hint\n          hotReplicas.forEach(r -> collections.add(r.getCollection()));\n          hotShards.forEach((coll, shards) -> collections.add(coll));\n          hotCollections.forEach((coll, rate) -> collections.add(coll));\n          for (String coll : collections) {\n            suggester = suggester.hint(Policy.Suggester.Hint.COLL, coll);\n          }\n        }\n        break;\n      default:\n        throw new UnsupportedOperationException(\"No support for events other than nodeAdded and nodeLost, received: \" + event.getEventType());\n    }\n    return suggester;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c304e97e7c1d472bc70e801b35ee78583916c6cd","date":1507105431,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ComputePlanAction#getSuggester(Policy.Session,TriggerEvent,ZkStateReader).mjava","pathOld":"/dev/null","sourceNew":"  protected Policy.Suggester getSuggester(Policy.Session session, TriggerEvent event, ZkStateReader zkStateReader) {\n    Policy.Suggester suggester;\n    switch (event.getEventType()) {\n      case NODEADDED:\n        suggester = session.getSuggester(CollectionParams.CollectionAction.MOVEREPLICA)\n            .hint(Policy.Suggester.Hint.TARGET_NODE, event.getProperty(TriggerEvent.NODE_NAMES));\n        log.debug(\"Created suggester with targetNode: {}\", event.getProperty(TriggerEvent.NODE_NAMES));\n        break;\n      case NODELOST:\n        suggester = session.getSuggester(CollectionParams.CollectionAction.MOVEREPLICA)\n            .hint(Policy.Suggester.Hint.SRC_NODE, event.getProperty(TriggerEvent.NODE_NAMES));\n        log.debug(\"Created suggester with srcNode: {}\", event.getProperty(TriggerEvent.NODE_NAMES));\n        break;\n      default:\n        throw new UnsupportedOperationException(\"No support for events other than nodeAdded and nodeLost, received: \" + event.getEventType());\n    }\n    return suggester;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"560c18d71dad43d675158783c3840f8c80d6d39c","date":1507105532,"type":0,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ComputePlanAction#getSuggester(Policy.Session,TriggerEvent,ZkStateReader).mjava","pathOld":"/dev/null","sourceNew":"  protected Policy.Suggester getSuggester(Policy.Session session, TriggerEvent event, ZkStateReader zkStateReader) {\n    Policy.Suggester suggester;\n    switch (event.getEventType()) {\n      case NODEADDED:\n        suggester = session.getSuggester(CollectionParams.CollectionAction.MOVEREPLICA)\n            .hint(Policy.Suggester.Hint.TARGET_NODE, event.getProperty(TriggerEvent.NODE_NAMES));\n        log.debug(\"Created suggester with targetNode: {}\", event.getProperty(TriggerEvent.NODE_NAMES));\n        break;\n      case NODELOST:\n        suggester = session.getSuggester(CollectionParams.CollectionAction.MOVEREPLICA)\n            .hint(Policy.Suggester.Hint.SRC_NODE, event.getProperty(TriggerEvent.NODE_NAMES));\n        log.debug(\"Created suggester with srcNode: {}\", event.getProperty(TriggerEvent.NODE_NAMES));\n        break;\n      default:\n        throw new UnsupportedOperationException(\"No support for events other than nodeAdded and nodeLost, received: \" + event.getEventType());\n    }\n    return suggester;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"101645ef3f7b3be12940241226f9e1636541aadc","date":1507815822,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ComputePlanAction#getSuggester(Policy.Session,TriggerEvent,ZkStateReader).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ComputePlanAction#getSuggester(Policy.Session,TriggerEvent,ZkStateReader).mjava","sourceNew":"  protected Policy.Suggester getSuggester(Policy.Session session, TriggerEvent event, ZkStateReader zkStateReader) {\n    Policy.Suggester suggester;\n    switch (event.getEventType()) {\n      case NODEADDED:\n        suggester = session.getSuggester(CollectionParams.CollectionAction.MOVEREPLICA)\n            .hint(Policy.Suggester.Hint.TARGET_NODE, event.getProperty(TriggerEvent.NODE_NAMES));\n        log.debug(\"NODEADDED Created suggester with targetNode: {}\", event.getProperty(TriggerEvent.NODE_NAMES));\n        break;\n      case NODELOST:\n        suggester = session.getSuggester(CollectionParams.CollectionAction.MOVEREPLICA)\n            .hint(Policy.Suggester.Hint.SRC_NODE, event.getProperty(TriggerEvent.NODE_NAMES));\n        log.debug(\"NODELOST Created suggester with srcNode: {}\", event.getProperty(TriggerEvent.NODE_NAMES));\n        break;\n      default:\n        throw new UnsupportedOperationException(\"No support for events other than nodeAdded and nodeLost, received: \" + event.getEventType());\n    }\n    return suggester;\n  }\n\n","sourceOld":"  protected Policy.Suggester getSuggester(Policy.Session session, TriggerEvent event, ZkStateReader zkStateReader) {\n    Policy.Suggester suggester;\n    switch (event.getEventType()) {\n      case NODEADDED:\n        suggester = session.getSuggester(CollectionParams.CollectionAction.MOVEREPLICA)\n            .hint(Policy.Suggester.Hint.TARGET_NODE, event.getProperty(TriggerEvent.NODE_NAMES));\n        log.debug(\"Created suggester with targetNode: {}\", event.getProperty(TriggerEvent.NODE_NAMES));\n        break;\n      case NODELOST:\n        suggester = session.getSuggester(CollectionParams.CollectionAction.MOVEREPLICA)\n            .hint(Policy.Suggester.Hint.SRC_NODE, event.getProperty(TriggerEvent.NODE_NAMES));\n        log.debug(\"Created suggester with srcNode: {}\", event.getProperty(TriggerEvent.NODE_NAMES));\n        break;\n      default:\n        throw new UnsupportedOperationException(\"No support for events other than nodeAdded and nodeLost, received: \" + event.getEventType());\n    }\n    return suggester;\n  }\n\n","bugFix":["cc5ed4ca39a59c23d13866a1e110e608d93cbcc1"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85212dad4ed576c7f7e6c165ee19e597b7b4efc8","date":1507997740,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ComputePlanAction#getSuggester(Policy.Session,TriggerEvent,SolrCloudManager).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ComputePlanAction#getSuggester(Policy.Session,TriggerEvent,ZkStateReader).mjava","sourceNew":"  protected Policy.Suggester getSuggester(Policy.Session session, TriggerEvent event, SolrCloudManager cloudManager) {\n    Policy.Suggester suggester;\n    switch (event.getEventType()) {\n      case NODEADDED:\n        suggester = session.getSuggester(CollectionParams.CollectionAction.MOVEREPLICA)\n            .hint(Policy.Suggester.Hint.TARGET_NODE, event.getProperty(TriggerEvent.NODE_NAMES));\n        log.debug(\"NODEADDED Created suggester with targetNode: {}\", event.getProperty(TriggerEvent.NODE_NAMES));\n        break;\n      case NODELOST:\n        suggester = session.getSuggester(CollectionParams.CollectionAction.MOVEREPLICA)\n            .hint(Policy.Suggester.Hint.SRC_NODE, event.getProperty(TriggerEvent.NODE_NAMES));\n        log.debug(\"NODELOST Created suggester with srcNode: {}\", event.getProperty(TriggerEvent.NODE_NAMES));\n        break;\n      default:\n        throw new UnsupportedOperationException(\"No support for events other than nodeAdded and nodeLost, received: \" + event.getEventType());\n    }\n    return suggester;\n  }\n\n","sourceOld":"  protected Policy.Suggester getSuggester(Policy.Session session, TriggerEvent event, ZkStateReader zkStateReader) {\n    Policy.Suggester suggester;\n    switch (event.getEventType()) {\n      case NODEADDED:\n        suggester = session.getSuggester(CollectionParams.CollectionAction.MOVEREPLICA)\n            .hint(Policy.Suggester.Hint.TARGET_NODE, event.getProperty(TriggerEvent.NODE_NAMES));\n        log.debug(\"NODEADDED Created suggester with targetNode: {}\", event.getProperty(TriggerEvent.NODE_NAMES));\n        break;\n      case NODELOST:\n        suggester = session.getSuggester(CollectionParams.CollectionAction.MOVEREPLICA)\n            .hint(Policy.Suggester.Hint.SRC_NODE, event.getProperty(TriggerEvent.NODE_NAMES));\n        log.debug(\"NODELOST Created suggester with srcNode: {}\", event.getProperty(TriggerEvent.NODE_NAMES));\n        break;\n      default:\n        throw new UnsupportedOperationException(\"No support for events other than nodeAdded and nodeLost, received: \" + event.getEventType());\n    }\n    return suggester;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c304e97e7c1d472bc70e801b35ee78583916c6cd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b71597cbe4c0f463a81f3f225fc0ff1355c8fee6"],"3955a9511098c96b652734b2f2d4160d07cc2d63":["b869898f50ca80263bac2e3ae0949f7700e5c977"],"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac":["cc5ed4ca39a59c23d13866a1e110e608d93cbcc1"],"cc5ed4ca39a59c23d13866a1e110e608d93cbcc1":["cba420e29870f0c0ea479aa2a3fe362e4eedc971"],"cba420e29870f0c0ea479aa2a3fe362e4eedc971":["47a99fe8ee3f74e8da2ece1bddbc059d1e1beffa"],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["101645ef3f7b3be12940241226f9e1636541aadc"],"b869898f50ca80263bac2e3ae0949f7700e5c977":["c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac"],"1cc58dbf9573e66a3054c7c372862b8e5a77a9da":["3955a9511098c96b652734b2f2d4160d07cc2d63"],"a4e412fed1b23292038553fbe85fe61cd7aa8472":["1cc58dbf9573e66a3054c7c372862b8e5a77a9da"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"47a99fe8ee3f74e8da2ece1bddbc059d1e1beffa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b71597cbe4c0f463a81f3f225fc0ff1355c8fee6":["a4e412fed1b23292038553fbe85fe61cd7aa8472"],"560c18d71dad43d675158783c3840f8c80d6d39c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c304e97e7c1d472bc70e801b35ee78583916c6cd"],"101645ef3f7b3be12940241226f9e1636541aadc":["560c18d71dad43d675158783c3840f8c80d6d39c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"]},"commit2Childs":{"c304e97e7c1d472bc70e801b35ee78583916c6cd":["560c18d71dad43d675158783c3840f8c80d6d39c"],"3955a9511098c96b652734b2f2d4160d07cc2d63":["1cc58dbf9573e66a3054c7c372862b8e5a77a9da"],"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac":["b869898f50ca80263bac2e3ae0949f7700e5c977"],"cc5ed4ca39a59c23d13866a1e110e608d93cbcc1":["c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac"],"cba420e29870f0c0ea479aa2a3fe362e4eedc971":["cc5ed4ca39a59c23d13866a1e110e608d93cbcc1"],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b869898f50ca80263bac2e3ae0949f7700e5c977":["3955a9511098c96b652734b2f2d4160d07cc2d63"],"1cc58dbf9573e66a3054c7c372862b8e5a77a9da":["a4e412fed1b23292038553fbe85fe61cd7aa8472"],"a4e412fed1b23292038553fbe85fe61cd7aa8472":["b71597cbe4c0f463a81f3f225fc0ff1355c8fee6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c304e97e7c1d472bc70e801b35ee78583916c6cd","47a99fe8ee3f74e8da2ece1bddbc059d1e1beffa","560c18d71dad43d675158783c3840f8c80d6d39c"],"47a99fe8ee3f74e8da2ece1bddbc059d1e1beffa":["cba420e29870f0c0ea479aa2a3fe362e4eedc971"],"b71597cbe4c0f463a81f3f225fc0ff1355c8fee6":["c304e97e7c1d472bc70e801b35ee78583916c6cd"],"560c18d71dad43d675158783c3840f8c80d6d39c":["101645ef3f7b3be12940241226f9e1636541aadc"],"101645ef3f7b3be12940241226f9e1636541aadc":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}