{"path":"src/test/org/apache/solr/handler/FieldAnalysisRequestHandlerTest#testResolveAnalysisRequest().mjava","commits":[{"id":"68df8db3f6c0c0ebbd1e40ba638115a748fb6a2a","date":1240390408,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/test/org/apache/solr/handler/FieldAnalysisRequestHandlerTest#testResolveAnalysisRequest().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Tests the {@link FieldAnalysisRequestHandler#resolveAnalysisRequest(org.apache.solr.common.params.SolrParams)}\n   */\n  public void testResolveAnalysisRequest() throws Exception {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(AnalysisParams.FIELD_NAME, \"text,nametext\");\n    params.add(AnalysisParams.FIELD_TYPE, \"whitetok,keywordtok\");\n    params.add(AnalysisParams.FIELD_VALUE, \"the quick red fox jumped over the lazy brown dogs\");\n    params.add(CommonParams.Q, \"fox brown\");\n\n    FieldAnalysisRequest request = handler.resolveAnalysisRequest(params);\n    List<String> fieldNames = request.getFieldNames();\n    assertEquals(\"Expecting 2 field names\", 2, fieldNames.size());\n    assertEquals(\"text\", fieldNames.get(0));\n    assertEquals(\"nametext\", fieldNames.get(1));\n    List<String> fieldTypes = request.getFieldTypes();\n    assertEquals(\"Expecting 2 field types\", 2, fieldTypes.size());\n    assertEquals(\"whitetok\", fieldTypes.get(0));\n    assertEquals(\"keywordtok\", fieldTypes.get(1));\n    assertEquals(\"the quick red fox jumped over the lazy brown dogs\", request.getFieldValue());\n    assertEquals(\"fox brown\", request.getQuery());\n    assertFalse(request.isShowMatch());\n\n    // testing overide of query value using analysis.query param\n    params.add(AnalysisParams.QUERY, \"quick lazy\");\n    request = handler.resolveAnalysisRequest(params);\n    assertEquals(\"quick lazy\", request.getQuery());\n\n    // testing analysis.showmatch param\n    params.add(AnalysisParams.SHOW_MATCH, \"false\");\n    request = handler.resolveAnalysisRequest(params);\n    assertFalse(request.isShowMatch());\n    params.set(AnalysisParams.SHOW_MATCH, \"true\");\n    request = handler.resolveAnalysisRequest(params);\n    assertTrue(request.isShowMatch());\n\n    // testing absence of query value\n    params.remove(CommonParams.Q);\n    params.remove(AnalysisParams.QUERY);\n    request = handler.resolveAnalysisRequest(params);\n    assertNull(request.getQuery());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e99704b4caa3a3ad9eafb2b6e37979551773ece6","date":1241376470,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/test/org/apache/solr/handler/FieldAnalysisRequestHandlerTest#testResolveAnalysisRequest().mjava","pathOld":"src/test/org/apache/solr/handler/FieldAnalysisRequestHandlerTest#testResolveAnalysisRequest().mjava","sourceNew":"  /**\n   * Tests the {@link FieldAnalysisRequestHandler#resolveAnalysisRequest(org.apache.solr.request.SolrQueryRequest)}\n   */\n  public void testResolveAnalysisRequest() throws Exception {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(AnalysisParams.FIELD_NAME, \"text,nametext\");\n    params.add(AnalysisParams.FIELD_TYPE, \"whitetok,keywordtok\");\n    params.add(AnalysisParams.FIELD_VALUE, \"the quick red fox jumped over the lazy brown dogs\");\n    params.add(CommonParams.Q, \"fox brown\");\n\n    FieldAnalysisRequest request = handler.resolveAnalysisRequest(new LocalSolrQueryRequest(h.getCore(), params));\n    List<String> fieldNames = request.getFieldNames();\n    assertEquals(\"Expecting 2 field names\", 2, fieldNames.size());\n    assertEquals(\"text\", fieldNames.get(0));\n    assertEquals(\"nametext\", fieldNames.get(1));\n    List<String> fieldTypes = request.getFieldTypes();\n    assertEquals(\"Expecting 2 field types\", 2, fieldTypes.size());\n    assertEquals(\"whitetok\", fieldTypes.get(0));\n    assertEquals(\"keywordtok\", fieldTypes.get(1));\n    assertEquals(\"the quick red fox jumped over the lazy brown dogs\", request.getFieldValue());\n    assertEquals(\"fox brown\", request.getQuery());\n    assertFalse(request.isShowMatch());\n\n    // testing overide of query value using analysis.query param\n    params.add(AnalysisParams.QUERY, \"quick lazy\");\n    request = handler.resolveAnalysisRequest(new LocalSolrQueryRequest(h.getCore(), params));\n    assertEquals(\"quick lazy\", request.getQuery());\n\n    // testing analysis.showmatch param\n    params.add(AnalysisParams.SHOW_MATCH, \"false\");\n    request = handler.resolveAnalysisRequest(new LocalSolrQueryRequest(h.getCore(), params));\n    assertFalse(request.isShowMatch());\n    params.set(AnalysisParams.SHOW_MATCH, \"true\");\n    request = handler.resolveAnalysisRequest(new LocalSolrQueryRequest(h.getCore(), params));\n    assertTrue(request.isShowMatch());\n\n    // testing absence of query value\n    params.remove(CommonParams.Q);\n    params.remove(AnalysisParams.QUERY);\n    request = handler.resolveAnalysisRequest(new LocalSolrQueryRequest(h.getCore(), params));\n    assertNull(request.getQuery());\n  }\n\n","sourceOld":"  /**\n   * Tests the {@link FieldAnalysisRequestHandler#resolveAnalysisRequest(org.apache.solr.common.params.SolrParams)}\n   */\n  public void testResolveAnalysisRequest() throws Exception {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(AnalysisParams.FIELD_NAME, \"text,nametext\");\n    params.add(AnalysisParams.FIELD_TYPE, \"whitetok,keywordtok\");\n    params.add(AnalysisParams.FIELD_VALUE, \"the quick red fox jumped over the lazy brown dogs\");\n    params.add(CommonParams.Q, \"fox brown\");\n\n    FieldAnalysisRequest request = handler.resolveAnalysisRequest(params);\n    List<String> fieldNames = request.getFieldNames();\n    assertEquals(\"Expecting 2 field names\", 2, fieldNames.size());\n    assertEquals(\"text\", fieldNames.get(0));\n    assertEquals(\"nametext\", fieldNames.get(1));\n    List<String> fieldTypes = request.getFieldTypes();\n    assertEquals(\"Expecting 2 field types\", 2, fieldTypes.size());\n    assertEquals(\"whitetok\", fieldTypes.get(0));\n    assertEquals(\"keywordtok\", fieldTypes.get(1));\n    assertEquals(\"the quick red fox jumped over the lazy brown dogs\", request.getFieldValue());\n    assertEquals(\"fox brown\", request.getQuery());\n    assertFalse(request.isShowMatch());\n\n    // testing overide of query value using analysis.query param\n    params.add(AnalysisParams.QUERY, \"quick lazy\");\n    request = handler.resolveAnalysisRequest(params);\n    assertEquals(\"quick lazy\", request.getQuery());\n\n    // testing analysis.showmatch param\n    params.add(AnalysisParams.SHOW_MATCH, \"false\");\n    request = handler.resolveAnalysisRequest(params);\n    assertFalse(request.isShowMatch());\n    params.set(AnalysisParams.SHOW_MATCH, \"true\");\n    request = handler.resolveAnalysisRequest(params);\n    assertTrue(request.isShowMatch());\n\n    // testing absence of query value\n    params.remove(CommonParams.Q);\n    params.remove(AnalysisParams.QUERY);\n    request = handler.resolveAnalysisRequest(params);\n    assertNull(request.getQuery());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/handler/FieldAnalysisRequestHandlerTest#testResolveAnalysisRequest().mjava","pathOld":"src/test/org/apache/solr/handler/FieldAnalysisRequestHandlerTest#testResolveAnalysisRequest().mjava","sourceNew":"  /**\n   * Tests the {@link FieldAnalysisRequestHandler#resolveAnalysisRequest(org.apache.solr.request.SolrQueryRequest)}\n   */\n  public void testResolveAnalysisRequest() throws Exception {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(AnalysisParams.FIELD_NAME, \"text,nametext\");\n    params.add(AnalysisParams.FIELD_TYPE, \"whitetok,keywordtok\");\n    params.add(AnalysisParams.FIELD_VALUE, \"the quick red fox jumped over the lazy brown dogs\");\n    params.add(CommonParams.Q, \"fox brown\");\n\n    FieldAnalysisRequest request = handler.resolveAnalysisRequest(new LocalSolrQueryRequest(h.getCore(), params));\n    List<String> fieldNames = request.getFieldNames();\n    assertEquals(\"Expecting 2 field names\", 2, fieldNames.size());\n    assertEquals(\"text\", fieldNames.get(0));\n    assertEquals(\"nametext\", fieldNames.get(1));\n    List<String> fieldTypes = request.getFieldTypes();\n    assertEquals(\"Expecting 2 field types\", 2, fieldTypes.size());\n    assertEquals(\"whitetok\", fieldTypes.get(0));\n    assertEquals(\"keywordtok\", fieldTypes.get(1));\n    assertEquals(\"the quick red fox jumped over the lazy brown dogs\", request.getFieldValue());\n    assertEquals(\"fox brown\", request.getQuery());\n    assertFalse(request.isShowMatch());\n\n    // testing overide of query value using analysis.query param\n    params.add(AnalysisParams.QUERY, \"quick lazy\");\n    request = handler.resolveAnalysisRequest(new LocalSolrQueryRequest(h.getCore(), params));\n    assertEquals(\"quick lazy\", request.getQuery());\n\n    // testing analysis.showmatch param\n    params.add(AnalysisParams.SHOW_MATCH, \"false\");\n    request = handler.resolveAnalysisRequest(new LocalSolrQueryRequest(h.getCore(), params));\n    assertFalse(request.isShowMatch());\n    params.set(AnalysisParams.SHOW_MATCH, \"true\");\n    request = handler.resolveAnalysisRequest(new LocalSolrQueryRequest(h.getCore(), params));\n    assertTrue(request.isShowMatch());\n\n    // testing absence of query value\n    params.remove(CommonParams.Q);\n    params.remove(AnalysisParams.QUERY);\n    request = handler.resolveAnalysisRequest(new LocalSolrQueryRequest(h.getCore(), params));\n    assertNull(request.getQuery());\n  }\n\n","sourceOld":"  /**\n   * Tests the {@link FieldAnalysisRequestHandler#resolveAnalysisRequest(org.apache.solr.request.SolrQueryRequest)}\n   */\n  public void testResolveAnalysisRequest() throws Exception {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(AnalysisParams.FIELD_NAME, \"text,nametext\");\n    params.add(AnalysisParams.FIELD_TYPE, \"whitetok,keywordtok\");\n    params.add(AnalysisParams.FIELD_VALUE, \"the quick red fox jumped over the lazy brown dogs\");\n    params.add(CommonParams.Q, \"fox brown\");\n\n    FieldAnalysisRequest request = handler.resolveAnalysisRequest(new LocalSolrQueryRequest(h.getCore(), params));\n    List<String> fieldNames = request.getFieldNames();\n    assertEquals(\"Expecting 2 field names\", 2, fieldNames.size());\n    assertEquals(\"text\", fieldNames.get(0));\n    assertEquals(\"nametext\", fieldNames.get(1));\n    List<String> fieldTypes = request.getFieldTypes();\n    assertEquals(\"Expecting 2 field types\", 2, fieldTypes.size());\n    assertEquals(\"whitetok\", fieldTypes.get(0));\n    assertEquals(\"keywordtok\", fieldTypes.get(1));\n    assertEquals(\"the quick red fox jumped over the lazy brown dogs\", request.getFieldValue());\n    assertEquals(\"fox brown\", request.getQuery());\n    assertFalse(request.isShowMatch());\n\n    // testing overide of query value using analysis.query param\n    params.add(AnalysisParams.QUERY, \"quick lazy\");\n    request = handler.resolveAnalysisRequest(new LocalSolrQueryRequest(h.getCore(), params));\n    assertEquals(\"quick lazy\", request.getQuery());\n\n    // testing analysis.showmatch param\n    params.add(AnalysisParams.SHOW_MATCH, \"false\");\n    request = handler.resolveAnalysisRequest(new LocalSolrQueryRequest(h.getCore(), params));\n    assertFalse(request.isShowMatch());\n    params.set(AnalysisParams.SHOW_MATCH, \"true\");\n    request = handler.resolveAnalysisRequest(new LocalSolrQueryRequest(h.getCore(), params));\n    assertTrue(request.isShowMatch());\n\n    // testing absence of query value\n    params.remove(CommonParams.Q);\n    params.remove(AnalysisParams.QUERY);\n    request = handler.resolveAnalysisRequest(new LocalSolrQueryRequest(h.getCore(), params));\n    assertNull(request.getQuery());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e99704b4caa3a3ad9eafb2b6e37979551773ece6":["68df8db3f6c0c0ebbd1e40ba638115a748fb6a2a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"68df8db3f6c0c0ebbd1e40ba638115a748fb6a2a":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["e99704b4caa3a3ad9eafb2b6e37979551773ece6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"e99704b4caa3a3ad9eafb2b6e37979551773ece6":["ad94625fb8d088209f46650c8097196fec67f00c"],"68df8db3f6c0c0ebbd1e40ba638115a748fb6a2a":["e99704b4caa3a3ad9eafb2b6e37979551773ece6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["68df8db3f6c0c0ebbd1e40ba638115a748fb6a2a"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}