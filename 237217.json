{"path":"solr/core/src/java/org/apache/solr/cloud/LeaderElector#checkIfIamLeader(int,ElectionContext,boolean,SolrCore).mjava","commits":[{"id":"2557ec1f68a440db7fbccbff249a98c54fd1a2f3","date":1329981577,"type":1,"author":"Sami Siren","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/LeaderElector#checkIfIamLeader(int,ElectionContext,boolean,SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/LeaderElector#checkIfIamLeader(String,int,ElectionContext,boolean,SolrCore).mjava","sourceNew":"  /**\n   * Check if the candidate with the given n_* sequence number is the leader.\n   * If it is, set the leaderId on the leader zk node. If it is not, start\n   * watching the candidate that is in line before this one - if it goes down, check\n   * if this candidate is the leader again.\n   * @param leaderSeqPath \n   * \n   * @param seq\n   * @param context \n   * @param replacement has someone else been the leader already?\n   * @param core \n   * @throws KeeperException\n   * @throws InterruptedException\n   * @throws IOException \n   * @throws UnsupportedEncodingException\n   */\n  private void checkIfIamLeader(final int seq, final ElectionContext context, boolean replacement, SolrCore core) throws KeeperException,\n      InterruptedException, IOException {\n    // get all other numbers...\n    final String holdElectionPath = context.electionPath + ELECTION_NODE;\n    List<String> seqs = zkClient.getChildren(holdElectionPath, null, true);\n    \n    sortSeqs(seqs);\n    List<Integer> intSeqs = getSeqs(seqs);\n    if (seq <= intSeqs.get(0)) {\n      runIamLeaderProcess(context, replacement, core);\n    } else {\n      // I am not the leader - watch the node below me\n      int i = 1;\n      for (; i < intSeqs.size(); i++) {\n        int s = intSeqs.get(i);\n        if (seq < s) {\n          // we found who we come before - watch the guy in front\n          break;\n        }\n      }\n      int index = i - 2;\n      if (index < 0) {\n        log.warn(\"Our node is no longer in line to be leader\");\n        return;\n      }\n      try {\n        zkClient.getData(holdElectionPath + \"/\" + seqs.get(index),\n            new Watcher() {\n              \n              @Override\n              public void process(WatchedEvent event) {\n                // am I the next leader?\n                try {\n                  checkIfIamLeader(seq, context, true, null);\n                } catch (InterruptedException e) {\n                  // Restore the interrupted status\n                  Thread.currentThread().interrupt();\n                  log.warn(\"\", e);\n                } catch (IOException e) {\n                  log.warn(\"\", e);\n                } catch (Exception e) {\n                  log.warn(\"\", e);\n                }\n              }\n              \n            }, null, true);\n      } catch (KeeperException.SessionExpiredException e) {\n        throw e;\n      } catch (KeeperException e) {\n        // we couldn't set our watch - the node before us may already be down?\n        // we need to check if we are the leader again\n        checkIfIamLeader(seq, context, true, null);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Check if the candidate with the given n_* sequence number is the leader.\n   * If it is, set the leaderId on the leader zk node. If it is not, start\n   * watching the candidate that is in line before this one - if it goes down, check\n   * if this candidate is the leader again.\n   * @param leaderSeqPath \n   * \n   * @param seq\n   * @param context \n   * @param replacement has someone else been the leader already?\n   * @param core \n   * @throws KeeperException\n   * @throws InterruptedException\n   * @throws IOException \n   * @throws UnsupportedEncodingException\n   */\n  private void checkIfIamLeader(final String leaderSeqPath, final int seq, final ElectionContext context, boolean replacement, SolrCore core) throws KeeperException,\n      InterruptedException, IOException {\n    // get all other numbers...\n    final String holdElectionPath = context.electionPath + ELECTION_NODE;\n    List<String> seqs = zkClient.getChildren(holdElectionPath, null, true);\n    \n    sortSeqs(seqs);\n    List<Integer> intSeqs = getSeqs(seqs);\n    if (seq <= intSeqs.get(0)) {\n      runIamLeaderProcess(leaderSeqPath, context, replacement, core);\n    } else {\n      // I am not the leader - watch the node below me\n      int i = 1;\n      for (; i < intSeqs.size(); i++) {\n        int s = intSeqs.get(i);\n        if (seq < s) {\n          // we found who we come before - watch the guy in front\n          break;\n        }\n      }\n      int index = i - 2;\n      if (index < 0) {\n        log.warn(\"Our node is no longer in line to be leader\");\n        return;\n      }\n      try {\n        zkClient.getData(holdElectionPath + \"/\" + seqs.get(index),\n            new Watcher() {\n              \n              @Override\n              public void process(WatchedEvent event) {\n                // am I the next leader?\n                try {\n                  checkIfIamLeader(leaderSeqPath, seq, context, true, null);\n                } catch (InterruptedException e) {\n                  // Restore the interrupted status\n                  Thread.currentThread().interrupt();\n                  log.warn(\"\", e);\n                } catch (IOException e) {\n                  log.warn(\"\", e);\n                } catch (Exception e) {\n                  log.warn(\"\", e);\n                }\n              }\n              \n            }, null, true);\n      } catch (KeeperException.SessionExpiredException e) {\n        throw e;\n      } catch (KeeperException e) {\n        // we couldn't set our watch - the node before us may already be down?\n        // we need to check if we are the leader again\n        checkIfIamLeader(leaderSeqPath, seq, context, true, null);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9813dd0748537c429b7c0a9b4723ea1ba496c047","date":1330304954,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/LeaderElector#checkIfIamLeader(int,ElectionContext,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/LeaderElector#checkIfIamLeader(int,ElectionContext,boolean,SolrCore).mjava","sourceNew":"  /**\n   * Check if the candidate with the given n_* sequence number is the leader.\n   * If it is, set the leaderId on the leader zk node. If it is not, start\n   * watching the candidate that is in line before this one - if it goes down, check\n   * if this candidate is the leader again.\n   * @param leaderSeqPath \n   * \n   * @param seq\n   * @param context \n   * @param replacement has someone else been the leader already?\n   * @throws KeeperException\n   * @throws InterruptedException\n   * @throws IOException \n   * @throws UnsupportedEncodingException\n   */\n  private void checkIfIamLeader(final int seq, final ElectionContext context, boolean replacement) throws KeeperException,\n      InterruptedException, IOException {\n    // get all other numbers...\n    final String holdElectionPath = context.electionPath + ELECTION_NODE;\n    List<String> seqs = zkClient.getChildren(holdElectionPath, null, true);\n    \n    sortSeqs(seqs);\n    List<Integer> intSeqs = getSeqs(seqs);\n    if (seq <= intSeqs.get(0)) {\n      runIamLeaderProcess(context, replacement);\n    } else {\n      // I am not the leader - watch the node below me\n      int i = 1;\n      for (; i < intSeqs.size(); i++) {\n        int s = intSeqs.get(i);\n        if (seq < s) {\n          // we found who we come before - watch the guy in front\n          break;\n        }\n      }\n      int index = i - 2;\n      if (index < 0) {\n        log.warn(\"Our node is no longer in line to be leader\");\n        return;\n      }\n      try {\n        zkClient.getData(holdElectionPath + \"/\" + seqs.get(index),\n            new Watcher() {\n              \n              @Override\n              public void process(WatchedEvent event) {\n                // am I the next leader?\n                try {\n                  checkIfIamLeader(seq, context, true);\n                } catch (InterruptedException e) {\n                  // Restore the interrupted status\n                  Thread.currentThread().interrupt();\n                  log.warn(\"\", e);\n                } catch (IOException e) {\n                  log.warn(\"\", e);\n                } catch (Exception e) {\n                  log.warn(\"\", e);\n                }\n              }\n              \n            }, null, true);\n      } catch (KeeperException.SessionExpiredException e) {\n        throw e;\n      } catch (KeeperException e) {\n        // we couldn't set our watch - the node before us may already be down?\n        // we need to check if we are the leader again\n        checkIfIamLeader(seq, context, true);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Check if the candidate with the given n_* sequence number is the leader.\n   * If it is, set the leaderId on the leader zk node. If it is not, start\n   * watching the candidate that is in line before this one - if it goes down, check\n   * if this candidate is the leader again.\n   * @param leaderSeqPath \n   * \n   * @param seq\n   * @param context \n   * @param replacement has someone else been the leader already?\n   * @param core \n   * @throws KeeperException\n   * @throws InterruptedException\n   * @throws IOException \n   * @throws UnsupportedEncodingException\n   */\n  private void checkIfIamLeader(final int seq, final ElectionContext context, boolean replacement, SolrCore core) throws KeeperException,\n      InterruptedException, IOException {\n    // get all other numbers...\n    final String holdElectionPath = context.electionPath + ELECTION_NODE;\n    List<String> seqs = zkClient.getChildren(holdElectionPath, null, true);\n    \n    sortSeqs(seqs);\n    List<Integer> intSeqs = getSeqs(seqs);\n    if (seq <= intSeqs.get(0)) {\n      runIamLeaderProcess(context, replacement, core);\n    } else {\n      // I am not the leader - watch the node below me\n      int i = 1;\n      for (; i < intSeqs.size(); i++) {\n        int s = intSeqs.get(i);\n        if (seq < s) {\n          // we found who we come before - watch the guy in front\n          break;\n        }\n      }\n      int index = i - 2;\n      if (index < 0) {\n        log.warn(\"Our node is no longer in line to be leader\");\n        return;\n      }\n      try {\n        zkClient.getData(holdElectionPath + \"/\" + seqs.get(index),\n            new Watcher() {\n              \n              @Override\n              public void process(WatchedEvent event) {\n                // am I the next leader?\n                try {\n                  checkIfIamLeader(seq, context, true, null);\n                } catch (InterruptedException e) {\n                  // Restore the interrupted status\n                  Thread.currentThread().interrupt();\n                  log.warn(\"\", e);\n                } catch (IOException e) {\n                  log.warn(\"\", e);\n                } catch (Exception e) {\n                  log.warn(\"\", e);\n                }\n              }\n              \n            }, null, true);\n      } catch (KeeperException.SessionExpiredException e) {\n        throw e;\n      } catch (KeeperException e) {\n        // we couldn't set our watch - the node before us may already be down?\n        // we need to check if we are the leader again\n        checkIfIamLeader(seq, context, true, null);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9813dd0748537c429b7c0a9b4723ea1ba496c047":["2557ec1f68a440db7fbccbff249a98c54fd1a2f3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2557ec1f68a440db7fbccbff249a98c54fd1a2f3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9813dd0748537c429b7c0a9b4723ea1ba496c047"]},"commit2Childs":{"9813dd0748537c429b7c0a9b4723ea1ba496c047":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2557ec1f68a440db7fbccbff249a98c54fd1a2f3"],"2557ec1f68a440db7fbccbff249a98c54fd1a2f3":["9813dd0748537c429b7c0a9b4723ea1ba496c047"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}