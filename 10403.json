{"path":"lucene/core/src/test/org/apache/lucene/util/TestNumericUtils#testIntConversionAndOrdering().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestNumericUtils#testIntConversionAndOrdering().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestNumericUtils#testIntConversionAndOrdering().mjava","sourceNew":"  public void testIntConversionAndOrdering() throws Exception {\n    // generate a series of encoded ints, each numerical one bigger than the one before\n    BytesRef last=null, act=new BytesRef(NumericUtils.BUF_SIZE_INT);\n    for (int i=-100000; i<100000; i++) {\n      NumericUtils.intToPrefixCoded(i, 0, act);\n      if (last!=null) {\n        // test if smaller\n        assertTrue(\"actual bigger than last (BytesRef)\", last.compareTo(act) < 0 );\n        assertTrue(\"actual bigger than last (as String)\", last.utf8ToString().compareTo(act.utf8ToString()) < 0 );\n      }\n      // test is back and forward conversion works\n      assertEquals(\"forward and back conversion should generate same int\", i, NumericUtils.prefixCodedToInt(act));\n      // next step\n      last=act;\n      act = new BytesRef(NumericUtils.BUF_SIZE_INT);\n    }\n  }\n\n","sourceOld":"  public void testIntConversionAndOrdering() throws Exception {\n    // generate a series of encoded ints, each numerical one bigger than the one before\n    BytesRef last=null, act=new BytesRef(NumericUtils.BUF_SIZE_INT);\n    for (int i=-100000; i<100000; i++) {\n      NumericUtils.intToPrefixCoded(i, 0, act);\n      if (last!=null) {\n        // test if smaller\n        assertTrue(\"actual bigger than last (BytesRef)\", last.compareTo(act) < 0 );\n        assertTrue(\"actual bigger than last (as String)\", last.utf8ToString().compareTo(act.utf8ToString()) < 0 );\n      }\n      // test is back and forward conversion works\n      assertEquals(\"forward and back conversion should generate same int\", i, NumericUtils.prefixCodedToInt(act));\n      // next step\n      last=act;\n      act = new BytesRef(NumericUtils.BUF_SIZE_INT);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"22abfa0c2df167320b9c97d1bdbb19347ff95402","date":1359067319,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestNumericUtils#testIntConversionAndOrdering().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestNumericUtils#testIntConversionAndOrdering().mjava","sourceNew":"  public void testIntConversionAndOrdering() throws Exception {\n    // generate a series of encoded ints, each numerical one bigger than the one before\n    BytesRef last=null, act=new BytesRef(NumericUtils.BUF_SIZE_INT);\n    for (int i=-100000; i<100000; i++) {\n      NumericUtils.intToPrefixCodedBytes(i, 0, act);\n      if (last!=null) {\n        // test if smaller\n        assertTrue(\"actual bigger than last (BytesRef)\", last.compareTo(act) < 0 );\n        assertTrue(\"actual bigger than last (as String)\", last.utf8ToString().compareTo(act.utf8ToString()) < 0 );\n      }\n      // test is back and forward conversion works\n      assertEquals(\"forward and back conversion should generate same int\", i, NumericUtils.prefixCodedToInt(act));\n      // next step\n      last=act;\n      act = new BytesRef(NumericUtils.BUF_SIZE_INT);\n    }\n  }\n\n","sourceOld":"  public void testIntConversionAndOrdering() throws Exception {\n    // generate a series of encoded ints, each numerical one bigger than the one before\n    BytesRef last=null, act=new BytesRef(NumericUtils.BUF_SIZE_INT);\n    for (int i=-100000; i<100000; i++) {\n      NumericUtils.intToPrefixCoded(i, 0, act);\n      if (last!=null) {\n        // test if smaller\n        assertTrue(\"actual bigger than last (BytesRef)\", last.compareTo(act) < 0 );\n        assertTrue(\"actual bigger than last (as String)\", last.utf8ToString().compareTo(act.utf8ToString()) < 0 );\n      }\n      // test is back and forward conversion works\n      assertEquals(\"forward and back conversion should generate same int\", i, NumericUtils.prefixCodedToInt(act));\n      // next step\n      last=act;\n      act = new BytesRef(NumericUtils.BUF_SIZE_INT);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"dd45d4a2ee01a1932d33eec42f5272c2402da679","date":1359316912,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestNumericUtils#testIntConversionAndOrdering().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestNumericUtils#testIntConversionAndOrdering().mjava","sourceNew":"  public void testIntConversionAndOrdering() throws Exception {\n    // generate a series of encoded ints, each numerical one bigger than the one before\n    BytesRef last=null, act=new BytesRef(NumericUtils.BUF_SIZE_INT);\n    for (int i=-100000; i<100000; i++) {\n      NumericUtils.intToPrefixCodedBytes(i, 0, act);\n      if (last!=null) {\n        // test if smaller\n        assertTrue(\"actual bigger than last (BytesRef)\", last.compareTo(act) < 0 );\n        assertTrue(\"actual bigger than last (as String)\", last.utf8ToString().compareTo(act.utf8ToString()) < 0 );\n      }\n      // test is back and forward conversion works\n      assertEquals(\"forward and back conversion should generate same int\", i, NumericUtils.prefixCodedToInt(act));\n      // next step\n      last=act;\n      act = new BytesRef(NumericUtils.BUF_SIZE_INT);\n    }\n  }\n\n","sourceOld":"  public void testIntConversionAndOrdering() throws Exception {\n    // generate a series of encoded ints, each numerical one bigger than the one before\n    BytesRef last=null, act=new BytesRef(NumericUtils.BUF_SIZE_INT);\n    for (int i=-100000; i<100000; i++) {\n      NumericUtils.intToPrefixCoded(i, 0, act);\n      if (last!=null) {\n        // test if smaller\n        assertTrue(\"actual bigger than last (BytesRef)\", last.compareTo(act) < 0 );\n        assertTrue(\"actual bigger than last (as String)\", last.utf8ToString().compareTo(act.utf8ToString()) < 0 );\n      }\n      // test is back and forward conversion works\n      assertEquals(\"forward and back conversion should generate same int\", i, NumericUtils.prefixCodedToInt(act));\n      // next step\n      last=act;\n      act = new BytesRef(NumericUtils.BUF_SIZE_INT);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","date":1407854805,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestNumericUtils#testIntConversionAndOrdering().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestNumericUtils#testIntConversionAndOrdering().mjava","sourceNew":"  public void testIntConversionAndOrdering() throws Exception {\n    // generate a series of encoded ints, each numerical one bigger than the one before\n    BytesRefBuilder act = new BytesRefBuilder();\n    BytesRefBuilder last = new BytesRefBuilder();\n    for (int i=-100000; i<100000; i++) {\n      NumericUtils.intToPrefixCodedBytes(i, 0, act);\n      if (last!=null) {\n        // test if smaller\n        assertTrue(\"actual bigger than last (BytesRef)\", last.get().compareTo(act.get()) < 0 );\n        assertTrue(\"actual bigger than last (as String)\", last.get().utf8ToString().compareTo(act.get().utf8ToString()) < 0 );\n      }\n      // test is back and forward conversion works\n      assertEquals(\"forward and back conversion should generate same int\", i, NumericUtils.prefixCodedToInt(act.get()));\n      // next step\n      last.copyBytes(act.get());\n    }\n  }\n\n","sourceOld":"  public void testIntConversionAndOrdering() throws Exception {\n    // generate a series of encoded ints, each numerical one bigger than the one before\n    BytesRef last=null, act=new BytesRef(NumericUtils.BUF_SIZE_INT);\n    for (int i=-100000; i<100000; i++) {\n      NumericUtils.intToPrefixCodedBytes(i, 0, act);\n      if (last!=null) {\n        // test if smaller\n        assertTrue(\"actual bigger than last (BytesRef)\", last.compareTo(act) < 0 );\n        assertTrue(\"actual bigger than last (as String)\", last.utf8ToString().compareTo(act.utf8ToString()) < 0 );\n      }\n      // test is back and forward conversion works\n      assertEquals(\"forward and back conversion should generate same int\", i, NumericUtils.prefixCodedToInt(act));\n      // next step\n      last=act;\n      act = new BytesRef(NumericUtils.BUF_SIZE_INT);\n    }\n  }\n\n","bugFix":["1c4b20b8e3276553cc6fc15be0dc552424a71198","955c32f886db6f6356c9fcdea6b1f1cb4effda24","53b6c192847de8643a5da505cc433cbf8476a175"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"770342641f7b505eaa8dccdc666158bff2419109","date":1449868421,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestLegacyNumericUtils#testIntConversionAndOrdering().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestNumericUtils#testIntConversionAndOrdering().mjava","sourceNew":"  public void testIntConversionAndOrdering() throws Exception {\n    // generate a series of encoded ints, each numerical one bigger than the one before\n    BytesRefBuilder act = new BytesRefBuilder();\n    BytesRefBuilder last = new BytesRefBuilder();\n    for (int i=-100000; i<100000; i++) {\n      LegacyNumericUtils.intToPrefixCodedBytes(i, 0, act);\n      if (last!=null) {\n        // test if smaller\n        assertTrue(\"actual bigger than last (BytesRef)\", last.get().compareTo(act.get()) < 0 );\n        assertTrue(\"actual bigger than last (as String)\", last.get().utf8ToString().compareTo(act.get().utf8ToString()) < 0 );\n      }\n      // test is back and forward conversion works\n      assertEquals(\"forward and back conversion should generate same int\", i, LegacyNumericUtils.prefixCodedToInt(act.get()));\n      // next step\n      last.copyBytes(act.get());\n    }\n  }\n\n","sourceOld":"  public void testIntConversionAndOrdering() throws Exception {\n    // generate a series of encoded ints, each numerical one bigger than the one before\n    BytesRefBuilder act = new BytesRefBuilder();\n    BytesRefBuilder last = new BytesRefBuilder();\n    for (int i=-100000; i<100000; i++) {\n      NumericUtils.intToPrefixCodedBytes(i, 0, act);\n      if (last!=null) {\n        // test if smaller\n        assertTrue(\"actual bigger than last (BytesRef)\", last.get().compareTo(act.get()) < 0 );\n        assertTrue(\"actual bigger than last (as String)\", last.get().utf8ToString().compareTo(act.get().utf8ToString()) < 0 );\n      }\n      // test is back and forward conversion works\n      assertEquals(\"forward and back conversion should generate same int\", i, NumericUtils.prefixCodedToInt(act.get()));\n      // next step\n      last.copyBytes(act.get());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0e7cdd0facd912df00ec53365f98e7c54d6c9bb","date":1457059932,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestNumericUtils#testIntConversionAndOrdering().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * generate a series of encoded ints, each numerical one bigger than the one before.\n   * check for correct ordering of the encoded bytes and that values round-trip.\n   */\n  public void testIntConversionAndOrdering() throws Exception {\n    BytesRef previous = null;\n    BytesRef current = new BytesRef(new byte[Integer.BYTES]);\n    for (int value = -100000; value < 100000; value++) {\n      NumericUtils.intToSortableBytes(value, current.bytes, current.offset);\n      if (previous == null) {\n        previous = new BytesRef(new byte[Integer.BYTES]);\n      } else {\n        // test if smaller\n        assertTrue(\"current bigger than previous: \", previous.compareTo(current) < 0);\n      }\n      // test is back and forward conversion works\n      assertEquals(\"forward and back conversion should generate same int\", value, NumericUtils.sortableBytesToInt(current.bytes, current.offset));\n      // next step\n      System.arraycopy(current.bytes, current.offset, previous.bytes, previous.offset, current.length);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf1a614098b46c9c22afebd7b898ae4d1d2fc273","date":1457088850,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestNumericUtils#testIntConversionAndOrdering().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * generate a series of encoded ints, each numerical one bigger than the one before.\n   * check for correct ordering of the encoded bytes and that values round-trip.\n   */\n  public void testIntConversionAndOrdering() throws Exception {\n    BytesRef previous = null;\n    BytesRef current = new BytesRef(new byte[Integer.BYTES]);\n    for (int value = -100000; value < 100000; value++) {\n      NumericUtils.intToSortableBytes(value, current.bytes, current.offset);\n      if (previous == null) {\n        previous = new BytesRef(new byte[Integer.BYTES]);\n      } else {\n        // test if smaller\n        assertTrue(\"current bigger than previous: \", previous.compareTo(current) < 0);\n      }\n      // test is back and forward conversion works\n      assertEquals(\"forward and back conversion should generate same int\", value, NumericUtils.sortableBytesToInt(current.bytes, current.offset));\n      // next step\n      System.arraycopy(current.bytes, current.offset, previous.bytes, previous.offset, current.length);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"22abfa0c2df167320b9c97d1bdbb19347ff95402":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"dd45d4a2ee01a1932d33eec42f5272c2402da679":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","22abfa0c2df167320b9c97d1bdbb19347ff95402"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["22abfa0c2df167320b9c97d1bdbb19347ff95402"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["770342641f7b505eaa8dccdc666158bff2419109","a0e7cdd0facd912df00ec53365f98e7c54d6c9bb"],"770342641f7b505eaa8dccdc666158bff2419109":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"a0e7cdd0facd912df00ec53365f98e7c54d6c9bb":["770342641f7b505eaa8dccdc666158bff2419109"]},"commit2Childs":{"22abfa0c2df167320b9c97d1bdbb19347ff95402":["dd45d4a2ee01a1932d33eec42f5272c2402da679","7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["22abfa0c2df167320b9c97d1bdbb19347ff95402","dd45d4a2ee01a1932d33eec42f5272c2402da679"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"dd45d4a2ee01a1932d33eec42f5272c2402da679":[],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["770342641f7b505eaa8dccdc666158bff2419109"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"770342641f7b505eaa8dccdc666158bff2419109":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273","a0e7cdd0facd912df00ec53365f98e7c54d6c9bb"],"a0e7cdd0facd912df00ec53365f98e7c54d6c9bb":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["dd45d4a2ee01a1932d33eec42f5272c2402da679","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}