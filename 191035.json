{"path":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/UnifiedHighlighter#getOffsetStrategy(String,Query,SortedSet[Term]).mjava","commits":[{"id":"1f5ce59aaf4a055cc9ec62c15a89c263a05ff4b2","date":1475611903,"type":0,"author":"David Smiley","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/UnifiedHighlighter#getOffsetStrategy(String,Query,SortedSet[Term]).mjava","pathOld":"/dev/null","sourceNew":"  protected FieldOffsetStrategy getOffsetStrategy(String field, Query query, SortedSet<Term> allTerms) {\n    EnumSet<HighlightFlag> highlightFlags = getFlags(field);\n    BytesRef[] terms = filterExtractedTerms(field, allTerms);\n    PhraseHelper phraseHelper = getPhraseHelper(field, query, highlightFlags);\n    CharacterRunAutomaton[] automata = getAutomata(field, query, highlightFlags);\n    OffsetSource offsetSource = getOptimizedOffsetSource(field, terms, phraseHelper, automata);\n    switch (offsetSource) {\n      case ANALYSIS:\n        return new AnalysisOffsetStrategy(field, terms, phraseHelper, automata, getIndexAnalyzer());\n      case NONE_NEEDED:\n        return NoOpOffsetStrategy.INSTANCE;\n      case TERM_VECTORS:\n        return new TermVectorOffsetStrategy(field, terms, phraseHelper, automata);\n      case POSTINGS:\n        return new PostingsOffsetStrategy(field, terms, phraseHelper, automata);\n      case POSTINGS_WITH_TERM_VECTORS:\n        return new PostingsWithTermVectorsOffsetStrategy(field, terms, phraseHelper, automata);\n      default:\n        throw new IllegalArgumentException(\"Unrecognized offset source \" + offsetSource);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/UnifiedHighlighter#getOffsetStrategy(String,Query,SortedSet[Term]).mjava","pathOld":"/dev/null","sourceNew":"  protected FieldOffsetStrategy getOffsetStrategy(String field, Query query, SortedSet<Term> allTerms) {\n    EnumSet<HighlightFlag> highlightFlags = getFlags(field);\n    BytesRef[] terms = filterExtractedTerms(field, allTerms);\n    PhraseHelper phraseHelper = getPhraseHelper(field, query, highlightFlags);\n    CharacterRunAutomaton[] automata = getAutomata(field, query, highlightFlags);\n    OffsetSource offsetSource = getOptimizedOffsetSource(field, terms, phraseHelper, automata);\n    switch (offsetSource) {\n      case ANALYSIS:\n        return new AnalysisOffsetStrategy(field, terms, phraseHelper, automata, getIndexAnalyzer());\n      case NONE_NEEDED:\n        return NoOpOffsetStrategy.INSTANCE;\n      case TERM_VECTORS:\n        return new TermVectorOffsetStrategy(field, terms, phraseHelper, automata);\n      case POSTINGS:\n        return new PostingsOffsetStrategy(field, terms, phraseHelper, automata);\n      case POSTINGS_WITH_TERM_VECTORS:\n        return new PostingsWithTermVectorsOffsetStrategy(field, terms, phraseHelper, automata);\n      default:\n        throw new IllegalArgumentException(\"Unrecognized offset source \" + offsetSource);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cc650d323b3ed43d314ef27d4a586c37b4773f7e","date":1478639612,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/UnifiedHighlighter#getOffsetStrategy(String,Query,SortedSet[Term]).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/UnifiedHighlighter#getOffsetStrategy(String,Query,SortedSet[Term]).mjava","sourceNew":"  protected FieldOffsetStrategy getOffsetStrategy(String field, Query query, SortedSet<Term> allTerms) {\n    EnumSet<HighlightFlag> highlightFlags = getFlags(field);\n    BytesRef[] terms = filterExtractedTerms(field, allTerms);\n    PhraseHelper phraseHelper = getPhraseHelper(field, query, highlightFlags);\n    CharacterRunAutomaton[] automata = getAutomata(field, query, highlightFlags);\n    OffsetSource offsetSource = getOptimizedOffsetSource(field, terms, phraseHelper, automata);\n    switch (offsetSource) {\n      case ANALYSIS:\n        return new AnalysisOffsetStrategy(field, terms, phraseHelper, automata, getIndexAnalyzer(),\n            this::preMultiTermQueryRewrite);\n      case NONE_NEEDED:\n        return NoOpOffsetStrategy.INSTANCE;\n      case TERM_VECTORS:\n        return new TermVectorOffsetStrategy(field, terms, phraseHelper, automata);\n      case POSTINGS:\n        return new PostingsOffsetStrategy(field, terms, phraseHelper, automata);\n      case POSTINGS_WITH_TERM_VECTORS:\n        return new PostingsWithTermVectorsOffsetStrategy(field, terms, phraseHelper, automata);\n      default:\n        throw new IllegalArgumentException(\"Unrecognized offset source \" + offsetSource);\n    }\n  }\n\n","sourceOld":"  protected FieldOffsetStrategy getOffsetStrategy(String field, Query query, SortedSet<Term> allTerms) {\n    EnumSet<HighlightFlag> highlightFlags = getFlags(field);\n    BytesRef[] terms = filterExtractedTerms(field, allTerms);\n    PhraseHelper phraseHelper = getPhraseHelper(field, query, highlightFlags);\n    CharacterRunAutomaton[] automata = getAutomata(field, query, highlightFlags);\n    OffsetSource offsetSource = getOptimizedOffsetSource(field, terms, phraseHelper, automata);\n    switch (offsetSource) {\n      case ANALYSIS:\n        return new AnalysisOffsetStrategy(field, terms, phraseHelper, automata, getIndexAnalyzer());\n      case NONE_NEEDED:\n        return NoOpOffsetStrategy.INSTANCE;\n      case TERM_VECTORS:\n        return new TermVectorOffsetStrategy(field, terms, phraseHelper, automata);\n      case POSTINGS:\n        return new PostingsOffsetStrategy(field, terms, phraseHelper, automata);\n      case POSTINGS_WITH_TERM_VECTORS:\n        return new PostingsWithTermVectorsOffsetStrategy(field, terms, phraseHelper, automata);\n      default:\n        throw new IllegalArgumentException(\"Unrecognized offset source \" + offsetSource);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"199dfa410f1fdbfd3294106b04096cce5ed34b21","date":1478812506,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/UnifiedHighlighter#getOffsetStrategy(String,Query,SortedSet[Term]).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/UnifiedHighlighter#getOffsetStrategy(String,Query,SortedSet[Term]).mjava","sourceNew":"  protected FieldOffsetStrategy getOffsetStrategy(String field, Query query, SortedSet<Term> allTerms) {\n    EnumSet<HighlightFlag> highlightFlags = getFlags(field);\n    BytesRef[] terms = filterExtractedTerms(field, allTerms);\n    PhraseHelper phraseHelper = getPhraseHelper(field, query, highlightFlags);\n    CharacterRunAutomaton[] automata = getAutomata(field, query, highlightFlags);\n    OffsetSource offsetSource = getOptimizedOffsetSource(field, terms, phraseHelper, automata);\n    switch (offsetSource) {\n      case ANALYSIS:\n        return new AnalysisOffsetStrategy(field, terms, phraseHelper, automata, getIndexAnalyzer(),\n            this::preMultiTermQueryRewrite);\n      case NONE_NEEDED:\n        return NoOpOffsetStrategy.INSTANCE;\n      case TERM_VECTORS:\n        return new TermVectorOffsetStrategy(field, terms, phraseHelper, automata);\n      case POSTINGS:\n        return new PostingsOffsetStrategy(field, terms, phraseHelper, automata);\n      case POSTINGS_WITH_TERM_VECTORS:\n        return new PostingsWithTermVectorsOffsetStrategy(field, terms, phraseHelper, automata);\n      default:\n        throw new IllegalArgumentException(\"Unrecognized offset source \" + offsetSource);\n    }\n  }\n\n","sourceOld":"  protected FieldOffsetStrategy getOffsetStrategy(String field, Query query, SortedSet<Term> allTerms) {\n    EnumSet<HighlightFlag> highlightFlags = getFlags(field);\n    BytesRef[] terms = filterExtractedTerms(field, allTerms);\n    PhraseHelper phraseHelper = getPhraseHelper(field, query, highlightFlags);\n    CharacterRunAutomaton[] automata = getAutomata(field, query, highlightFlags);\n    OffsetSource offsetSource = getOptimizedOffsetSource(field, terms, phraseHelper, automata);\n    switch (offsetSource) {\n      case ANALYSIS:\n        return new AnalysisOffsetStrategy(field, terms, phraseHelper, automata, getIndexAnalyzer());\n      case NONE_NEEDED:\n        return NoOpOffsetStrategy.INSTANCE;\n      case TERM_VECTORS:\n        return new TermVectorOffsetStrategy(field, terms, phraseHelper, automata);\n      case POSTINGS:\n        return new PostingsOffsetStrategy(field, terms, phraseHelper, automata);\n      case POSTINGS_WITH_TERM_VECTORS:\n        return new PostingsWithTermVectorsOffsetStrategy(field, terms, phraseHelper, automata);\n      default:\n        throw new IllegalArgumentException(\"Unrecognized offset source \" + offsetSource);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2e9861e4a2b724d9fc51b618714c579491b78d7","date":1479244606,"type":5,"author":"David Smiley","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/UnifiedHighlighter#getOffsetStrategy(OffsetSource,String,BytesRef[],PhraseHelper,CharacterRunAutomaton[],Set[HighlightFlag]).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/UnifiedHighlighter#getOffsetStrategy(String,Query,SortedSet[Term]).mjava","sourceNew":"  protected FieldOffsetStrategy getOffsetStrategy(OffsetSource offsetSource, String field, BytesRef[] terms,\n                                                  PhraseHelper phraseHelper, CharacterRunAutomaton[] automata,\n                                                  Set<HighlightFlag> highlightFlags) {\n    switch (offsetSource) {\n      case ANALYSIS:\n        if (!phraseHelper.hasPositionSensitivity() &&\n            !highlightFlags.contains(HighlightFlag.PASSAGE_RELEVANCY_OVER_SPEED)) {\n          //skip using a memory index since it's pure term filtering\n          return new TokenStreamOffsetStrategy(field, terms, phraseHelper, automata, getIndexAnalyzer());\n        } else {\n          return new MemoryIndexOffsetStrategy(field, terms, phraseHelper, automata, getIndexAnalyzer(),\n              this::preMultiTermQueryRewrite);\n        }\n      case NONE_NEEDED:\n        return NoOpOffsetStrategy.INSTANCE;\n      case TERM_VECTORS:\n        return new TermVectorOffsetStrategy(field, terms, phraseHelper, automata);\n      case POSTINGS:\n        return new PostingsOffsetStrategy(field, terms, phraseHelper, automata);\n      case POSTINGS_WITH_TERM_VECTORS:\n        return new PostingsWithTermVectorsOffsetStrategy(field, terms, phraseHelper, automata);\n      default:\n        throw new IllegalArgumentException(\"Unrecognized offset source \" + offsetSource);\n    }\n  }\n\n","sourceOld":"  protected FieldOffsetStrategy getOffsetStrategy(String field, Query query, SortedSet<Term> allTerms) {\n    EnumSet<HighlightFlag> highlightFlags = getFlags(field);\n    BytesRef[] terms = filterExtractedTerms(field, allTerms);\n    PhraseHelper phraseHelper = getPhraseHelper(field, query, highlightFlags);\n    CharacterRunAutomaton[] automata = getAutomata(field, query, highlightFlags);\n    OffsetSource offsetSource = getOptimizedOffsetSource(field, terms, phraseHelper, automata);\n    switch (offsetSource) {\n      case ANALYSIS:\n        return new AnalysisOffsetStrategy(field, terms, phraseHelper, automata, getIndexAnalyzer(),\n            this::preMultiTermQueryRewrite);\n      case NONE_NEEDED:\n        return NoOpOffsetStrategy.INSTANCE;\n      case TERM_VECTORS:\n        return new TermVectorOffsetStrategy(field, terms, phraseHelper, automata);\n      case POSTINGS:\n        return new PostingsOffsetStrategy(field, terms, phraseHelper, automata);\n      case POSTINGS_WITH_TERM_VECTORS:\n        return new PostingsWithTermVectorsOffsetStrategy(field, terms, phraseHelper, automata);\n      default:\n        throw new IllegalArgumentException(\"Unrecognized offset source \" + offsetSource);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a1ef55e1fff7ff44354432770ad8bc19be1fcc75","date":1479266056,"type":5,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/UnifiedHighlighter#getOffsetStrategy(OffsetSource,String,BytesRef[],PhraseHelper,CharacterRunAutomaton[],Set[HighlightFlag]).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/UnifiedHighlighter#getOffsetStrategy(String,Query,SortedSet[Term]).mjava","sourceNew":"  protected FieldOffsetStrategy getOffsetStrategy(OffsetSource offsetSource, String field, BytesRef[] terms,\n                                                  PhraseHelper phraseHelper, CharacterRunAutomaton[] automata,\n                                                  Set<HighlightFlag> highlightFlags) {\n    switch (offsetSource) {\n      case ANALYSIS:\n        if (!phraseHelper.hasPositionSensitivity() &&\n            !highlightFlags.contains(HighlightFlag.PASSAGE_RELEVANCY_OVER_SPEED)) {\n          //skip using a memory index since it's pure term filtering\n          return new TokenStreamOffsetStrategy(field, terms, phraseHelper, automata, getIndexAnalyzer());\n        } else {\n          return new MemoryIndexOffsetStrategy(field, terms, phraseHelper, automata, getIndexAnalyzer(),\n              this::preMultiTermQueryRewrite);\n        }\n      case NONE_NEEDED:\n        return NoOpOffsetStrategy.INSTANCE;\n      case TERM_VECTORS:\n        return new TermVectorOffsetStrategy(field, terms, phraseHelper, automata);\n      case POSTINGS:\n        return new PostingsOffsetStrategy(field, terms, phraseHelper, automata);\n      case POSTINGS_WITH_TERM_VECTORS:\n        return new PostingsWithTermVectorsOffsetStrategy(field, terms, phraseHelper, automata);\n      default:\n        throw new IllegalArgumentException(\"Unrecognized offset source \" + offsetSource);\n    }\n  }\n\n","sourceOld":"  protected FieldOffsetStrategy getOffsetStrategy(String field, Query query, SortedSet<Term> allTerms) {\n    EnumSet<HighlightFlag> highlightFlags = getFlags(field);\n    BytesRef[] terms = filterExtractedTerms(field, allTerms);\n    PhraseHelper phraseHelper = getPhraseHelper(field, query, highlightFlags);\n    CharacterRunAutomaton[] automata = getAutomata(field, query, highlightFlags);\n    OffsetSource offsetSource = getOptimizedOffsetSource(field, terms, phraseHelper, automata);\n    switch (offsetSource) {\n      case ANALYSIS:\n        return new AnalysisOffsetStrategy(field, terms, phraseHelper, automata, getIndexAnalyzer(),\n            this::preMultiTermQueryRewrite);\n      case NONE_NEEDED:\n        return NoOpOffsetStrategy.INSTANCE;\n      case TERM_VECTORS:\n        return new TermVectorOffsetStrategy(field, terms, phraseHelper, automata);\n      case POSTINGS:\n        return new PostingsOffsetStrategy(field, terms, phraseHelper, automata);\n      case POSTINGS_WITH_TERM_VECTORS:\n        return new PostingsWithTermVectorsOffsetStrategy(field, terms, phraseHelper, automata);\n      default:\n        throw new IllegalArgumentException(\"Unrecognized offset source \" + offsetSource);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f2e9861e4a2b724d9fc51b618714c579491b78d7":["cc650d323b3ed43d314ef27d4a586c37b4773f7e"],"cc650d323b3ed43d314ef27d4a586c37b4773f7e":["1f5ce59aaf4a055cc9ec62c15a89c263a05ff4b2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a1ef55e1fff7ff44354432770ad8bc19be1fcc75":["199dfa410f1fdbfd3294106b04096cce5ed34b21","f2e9861e4a2b724d9fc51b618714c579491b78d7"],"1f5ce59aaf4a055cc9ec62c15a89c263a05ff4b2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"199dfa410f1fdbfd3294106b04096cce5ed34b21":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cc650d323b3ed43d314ef27d4a586c37b4773f7e"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1f5ce59aaf4a055cc9ec62c15a89c263a05ff4b2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f2e9861e4a2b724d9fc51b618714c579491b78d7"]},"commit2Childs":{"f2e9861e4a2b724d9fc51b618714c579491b78d7":["a1ef55e1fff7ff44354432770ad8bc19be1fcc75","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cc650d323b3ed43d314ef27d4a586c37b4773f7e":["f2e9861e4a2b724d9fc51b618714c579491b78d7","199dfa410f1fdbfd3294106b04096cce5ed34b21"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1f5ce59aaf4a055cc9ec62c15a89c263a05ff4b2","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a1ef55e1fff7ff44354432770ad8bc19be1fcc75":[],"1f5ce59aaf4a055cc9ec62c15a89c263a05ff4b2":["cc650d323b3ed43d314ef27d4a586c37b4773f7e","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"199dfa410f1fdbfd3294106b04096cce5ed34b21":["a1ef55e1fff7ff44354432770ad8bc19be1fcc75"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["199dfa410f1fdbfd3294106b04096cce5ed34b21"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a1ef55e1fff7ff44354432770ad8bc19be1fcc75","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}