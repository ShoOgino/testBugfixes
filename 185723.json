{"path":"solr/core/src/java/org/apache/solr/core/InitParams#apply(PluginInfo).mjava","commits":[{"id":"0c8c61a314df19c300ce6ea1e4ab945374980883","date":1416415639,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/InitParams#apply(PluginInfo).mjava","pathOld":"/dev/null","sourceNew":"  public void apply(PluginInfo info) {\n    if (info.isFromSolrConfig) {\n      //if this is a component implicitly defined in code it should be overridden by initPrams\n      merge(defaults, (NamedList) info.initArgs.get(PluginInfo.DEFAULTS) ,info.initArgs, PluginInfo.DEFAULTS, false);\n    } else {\n      //if the args is initialized from solrconfig.xml inside the requesthHandler it should be taking precedence over  initParams\n      merge( (NamedList) info.initArgs.get(PluginInfo.DEFAULTS), defaults,info.initArgs, PluginInfo.DEFAULTS, false);\n    }\n    merge((NamedList) info.initArgs.get(PluginInfo.INVARIANTS), invariants, info.initArgs, PluginInfo.INVARIANTS, false);\n    merge((NamedList) info.initArgs.get(PluginInfo.APPENDS), appends, info.initArgs, PluginInfo.APPENDS, true);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd9bd61f133870fb7f5098ae91eeda31b729d446","date":1418891132,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/InitParams#apply(PluginInfo).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/InitParams#apply(PluginInfo).mjava","sourceNew":"  public void apply(PluginInfo info) {\n    if (!info.isFromSolrConfig()) {\n      //if this is a component implicitly defined in code it should be overridden by initPrams\n      merge(defaults, (NamedList) info.initArgs.get(PluginInfo.DEFAULTS) ,info.initArgs, PluginInfo.DEFAULTS, false);\n    } else {\n      //if the args is initialized from solrconfig.xml inside the requesthHandler it should be taking precedence over  initParams\n      merge( (NamedList) info.initArgs.get(PluginInfo.DEFAULTS), defaults,info.initArgs, PluginInfo.DEFAULTS, false);\n    }\n    merge((NamedList) info.initArgs.get(PluginInfo.INVARIANTS), invariants, info.initArgs, PluginInfo.INVARIANTS, false);\n    merge((NamedList) info.initArgs.get(PluginInfo.APPENDS), appends, info.initArgs, PluginInfo.APPENDS, true);\n  }\n\n","sourceOld":"  public void apply(PluginInfo info) {\n    if (info.isFromSolrConfig) {\n      //if this is a component implicitly defined in code it should be overridden by initPrams\n      merge(defaults, (NamedList) info.initArgs.get(PluginInfo.DEFAULTS) ,info.initArgs, PluginInfo.DEFAULTS, false);\n    } else {\n      //if the args is initialized from solrconfig.xml inside the requesthHandler it should be taking precedence over  initParams\n      merge( (NamedList) info.initArgs.get(PluginInfo.DEFAULTS), defaults,info.initArgs, PluginInfo.DEFAULTS, false);\n    }\n    merge((NamedList) info.initArgs.get(PluginInfo.INVARIANTS), invariants, info.initArgs, PluginInfo.INVARIANTS, false);\n    merge((NamedList) info.initArgs.get(PluginInfo.APPENDS), appends, info.initArgs, PluginInfo.APPENDS, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2330174b38007b9942205a2679db9ddffe35af89","date":1423653924,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/InitParams#apply(PluginInfo).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/InitParams#apply(PluginInfo).mjava","sourceNew":"  public void apply(PluginInfo info) {\n    if (!info.isFromSolrConfig()) {\n      //if this is a component implicitly defined in code it should be overridden by initPrams\n      merge(defaults, (NamedList) info.initArgs.get(PluginInfo.DEFAULTS), info.initArgs, PluginInfo.DEFAULTS, false);\n    } else {\n      //if the args is initialized from solrconfig.xml inside the requesthHandler it should be taking precedence over  initParams\n      merge((NamedList) info.initArgs.get(PluginInfo.DEFAULTS), defaults, info.initArgs, PluginInfo.DEFAULTS, false);\n    }\n    merge((NamedList) info.initArgs.get(PluginInfo.INVARIANTS), invariants, info.initArgs, PluginInfo.INVARIANTS, false);\n    merge((NamedList) info.initArgs.get(PluginInfo.APPENDS), appends, info.initArgs, PluginInfo.APPENDS, true);\n  }\n\n","sourceOld":"  public void apply(PluginInfo info) {\n    if (!info.isFromSolrConfig()) {\n      //if this is a component implicitly defined in code it should be overridden by initPrams\n      merge(defaults, (NamedList) info.initArgs.get(PluginInfo.DEFAULTS) ,info.initArgs, PluginInfo.DEFAULTS, false);\n    } else {\n      //if the args is initialized from solrconfig.xml inside the requesthHandler it should be taking precedence over  initParams\n      merge( (NamedList) info.initArgs.get(PluginInfo.DEFAULTS), defaults,info.initArgs, PluginInfo.DEFAULTS, false);\n    }\n    merge((NamedList) info.initArgs.get(PluginInfo.INVARIANTS), invariants, info.initArgs, PluginInfo.INVARIANTS, false);\n    merge((NamedList) info.initArgs.get(PluginInfo.APPENDS), appends, info.initArgs, PluginInfo.APPENDS, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1390137e395d2f07f9ba5b8c43d293befe84d563","date":1427947685,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/InitParams#apply(PluginInfo).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/InitParams#apply(PluginInfo).mjava","sourceNew":"  public void apply(PluginInfo info) {\n    if (!info.isFromSolrConfig()) {\n      //if this is a component implicitly defined in code it should be overridden by initPrams\n      merge(defaults, (NamedList) info.initArgs.get(DEFAULTS), info.initArgs, DEFAULTS, false);\n    } else {\n      //if the args is initialized from solrconfig.xml inside the requesthHandler it should be taking precedence over  initParams\n      merge((NamedList) info.initArgs.get(DEFAULTS), defaults, info.initArgs, DEFAULTS, false);\n    }\n    merge((NamedList) info.initArgs.get(INVARIANTS), invariants, info.initArgs, INVARIANTS, false);\n    merge((NamedList) info.initArgs.get(APPENDS), appends, info.initArgs, APPENDS, true);\n  }\n\n","sourceOld":"  public void apply(PluginInfo info) {\n    if (!info.isFromSolrConfig()) {\n      //if this is a component implicitly defined in code it should be overridden by initPrams\n      merge(defaults, (NamedList) info.initArgs.get(PluginInfo.DEFAULTS), info.initArgs, PluginInfo.DEFAULTS, false);\n    } else {\n      //if the args is initialized from solrconfig.xml inside the requesthHandler it should be taking precedence over  initParams\n      merge((NamedList) info.initArgs.get(PluginInfo.DEFAULTS), defaults, info.initArgs, PluginInfo.DEFAULTS, false);\n    }\n    merge((NamedList) info.initArgs.get(PluginInfo.INVARIANTS), invariants, info.initArgs, PluginInfo.INVARIANTS, false);\n    merge((NamedList) info.initArgs.get(PluginInfo.APPENDS), appends, info.initArgs, PluginInfo.APPENDS, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2638f781be724518ff6c2263d14a48cf6e68017","date":1427989059,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/InitParams#apply(PluginInfo).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/InitParams#apply(PluginInfo).mjava","sourceNew":"  public void apply(PluginInfo info) {\n    if (!info.isFromSolrConfig()) {\n      //if this is a component implicitly defined in code it should be overridden by initPrams\n      merge(defaults, (NamedList) info.initArgs.get(DEFAULTS), info.initArgs, DEFAULTS, false);\n    } else {\n      //if the args is initialized from solrconfig.xml inside the requesthHandler it should be taking precedence over  initParams\n      merge((NamedList) info.initArgs.get(DEFAULTS), defaults, info.initArgs, DEFAULTS, false);\n    }\n    merge((NamedList) info.initArgs.get(INVARIANTS), invariants, info.initArgs, INVARIANTS, false);\n    merge((NamedList) info.initArgs.get(APPENDS), appends, info.initArgs, APPENDS, true);\n  }\n\n","sourceOld":"  public void apply(PluginInfo info) {\n    if (!info.isFromSolrConfig()) {\n      //if this is a component implicitly defined in code it should be overridden by initPrams\n      merge(defaults, (NamedList) info.initArgs.get(PluginInfo.DEFAULTS), info.initArgs, PluginInfo.DEFAULTS, false);\n    } else {\n      //if the args is initialized from solrconfig.xml inside the requesthHandler it should be taking precedence over  initParams\n      merge((NamedList) info.initArgs.get(PluginInfo.DEFAULTS), defaults, info.initArgs, PluginInfo.DEFAULTS, false);\n    }\n    merge((NamedList) info.initArgs.get(PluginInfo.INVARIANTS), invariants, info.initArgs, PluginInfo.INVARIANTS, false);\n    merge((NamedList) info.initArgs.get(PluginInfo.APPENDS), appends, info.initArgs, PluginInfo.APPENDS, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f8f89a6aa847dba1c4be0f18c506864db8f3d41","date":1429792475,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/InitParams#apply(PluginInfo).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/InitParams#apply(PluginInfo).mjava","sourceNew":"  public void apply(PluginInfo info) {\n    if (!info.isFromSolrConfig()) {\n      //if this is a component implicitly defined in code it should be overridden by initPrams\n      merge(defaults, (NamedList) info.initArgs.get(DEFAULTS), info.initArgs, DEFAULTS, false);\n    } else {\n      //if the args is initialized from solrconfig.xml inside the requesthHandler it should be taking precedence over  initParams\n      merge((NamedList) info.initArgs.get(DEFAULTS), defaults, info.initArgs, DEFAULTS, false);\n    }\n    merge((NamedList) info.initArgs.get(INVARIANTS), invariants, info.initArgs, INVARIANTS, false);\n    merge((NamedList) info.initArgs.get(APPENDS), appends, info.initArgs, APPENDS, true);\n\n    if (pluginInfo.initArgs != null) {\n      for (int i = 0; i < pluginInfo.initArgs.size(); i++) {\n        String name = pluginInfo.initArgs.getName(i);\n        if (KNOWN_KEYS.contains(name)) continue;//aready taken care of\n        Object val = info.initArgs.get(name);\n        if (val != null) continue; //this is explicitly specified in the reqhandler , ignore\n        info.initArgs.add(name, pluginInfo.initArgs.getVal(i));\n      }\n    }\n  }\n\n","sourceOld":"  public void apply(PluginInfo info) {\n    if (!info.isFromSolrConfig()) {\n      //if this is a component implicitly defined in code it should be overridden by initPrams\n      merge(defaults, (NamedList) info.initArgs.get(DEFAULTS), info.initArgs, DEFAULTS, false);\n    } else {\n      //if the args is initialized from solrconfig.xml inside the requesthHandler it should be taking precedence over  initParams\n      merge((NamedList) info.initArgs.get(DEFAULTS), defaults, info.initArgs, DEFAULTS, false);\n    }\n    merge((NamedList) info.initArgs.get(INVARIANTS), invariants, info.initArgs, INVARIANTS, false);\n    merge((NamedList) info.initArgs.get(APPENDS), appends, info.initArgs, APPENDS, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0158ced21948b6626f733c1c42c1e18d94449789","date":1462994341,"type":3,"author":"Bartosz Krasiński","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/InitParams#apply(PluginInfo).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/InitParams#apply(PluginInfo).mjava","sourceNew":"  public void apply(PluginInfo info) {\n    if (!info.isFromSolrConfig()) {\n      //if this is a component implicitly defined in code it should be overridden by initPrams\n      merge(defaults, (NamedList) info.initArgs.get(DEFAULTS), info.initArgs, DEFAULTS, false);\n    } else {\n      //if the args is initialized from solrconfig.xml inside the requestHandler it should be taking precedence over  initParams\n      merge((NamedList) info.initArgs.get(DEFAULTS), defaults, info.initArgs, DEFAULTS, false);\n    }\n    merge((NamedList) info.initArgs.get(INVARIANTS), invariants, info.initArgs, INVARIANTS, false);\n    merge((NamedList) info.initArgs.get(APPENDS), appends, info.initArgs, APPENDS, true);\n\n    if (pluginInfo.initArgs != null) {\n      for (int i = 0; i < pluginInfo.initArgs.size(); i++) {\n        String name = pluginInfo.initArgs.getName(i);\n        if (KNOWN_KEYS.contains(name)) continue;//already taken care of\n        Object val = info.initArgs.get(name);\n        if (val != null) continue; //this is explicitly specified in the reqhandler , ignore\n        info.initArgs.add(name, pluginInfo.initArgs.getVal(i));\n      }\n    }\n  }\n\n","sourceOld":"  public void apply(PluginInfo info) {\n    if (!info.isFromSolrConfig()) {\n      //if this is a component implicitly defined in code it should be overridden by initPrams\n      merge(defaults, (NamedList) info.initArgs.get(DEFAULTS), info.initArgs, DEFAULTS, false);\n    } else {\n      //if the args is initialized from solrconfig.xml inside the requesthHandler it should be taking precedence over  initParams\n      merge((NamedList) info.initArgs.get(DEFAULTS), defaults, info.initArgs, DEFAULTS, false);\n    }\n    merge((NamedList) info.initArgs.get(INVARIANTS), invariants, info.initArgs, INVARIANTS, false);\n    merge((NamedList) info.initArgs.get(APPENDS), appends, info.initArgs, APPENDS, true);\n\n    if (pluginInfo.initArgs != null) {\n      for (int i = 0; i < pluginInfo.initArgs.size(); i++) {\n        String name = pluginInfo.initArgs.getName(i);\n        if (KNOWN_KEYS.contains(name)) continue;//aready taken care of\n        Object val = info.initArgs.get(name);\n        if (val != null) continue; //this is explicitly specified in the reqhandler , ignore\n        info.initArgs.add(name, pluginInfo.initArgs.getVal(i));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/InitParams#apply(PluginInfo).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/InitParams#apply(PluginInfo).mjava","sourceNew":"  public void apply(PluginInfo info) {\n    if (!info.isFromSolrConfig()) {\n      //if this is a component implicitly defined in code it should be overridden by initPrams\n      merge(defaults, (NamedList) info.initArgs.get(DEFAULTS), info.initArgs, DEFAULTS, false);\n    } else {\n      //if the args is initialized from solrconfig.xml inside the requestHandler it should be taking precedence over  initParams\n      merge((NamedList) info.initArgs.get(DEFAULTS), defaults, info.initArgs, DEFAULTS, false);\n    }\n    merge((NamedList) info.initArgs.get(INVARIANTS), invariants, info.initArgs, INVARIANTS, false);\n    merge((NamedList) info.initArgs.get(APPENDS), appends, info.initArgs, APPENDS, true);\n\n    if (pluginInfo.initArgs != null) {\n      for (int i = 0; i < pluginInfo.initArgs.size(); i++) {\n        String name = pluginInfo.initArgs.getName(i);\n        if (KNOWN_KEYS.contains(name)) continue;//already taken care of\n        Object val = info.initArgs.get(name);\n        if (val != null) continue; //this is explicitly specified in the reqhandler , ignore\n        info.initArgs.add(name, pluginInfo.initArgs.getVal(i));\n      }\n    }\n  }\n\n","sourceOld":"  public void apply(PluginInfo info) {\n    if (!info.isFromSolrConfig()) {\n      //if this is a component implicitly defined in code it should be overridden by initPrams\n      merge(defaults, (NamedList) info.initArgs.get(DEFAULTS), info.initArgs, DEFAULTS, false);\n    } else {\n      //if the args is initialized from solrconfig.xml inside the requesthHandler it should be taking precedence over  initParams\n      merge((NamedList) info.initArgs.get(DEFAULTS), defaults, info.initArgs, DEFAULTS, false);\n    }\n    merge((NamedList) info.initArgs.get(INVARIANTS), invariants, info.initArgs, INVARIANTS, false);\n    merge((NamedList) info.initArgs.get(APPENDS), appends, info.initArgs, APPENDS, true);\n\n    if (pluginInfo.initArgs != null) {\n      for (int i = 0; i < pluginInfo.initArgs.size(); i++) {\n        String name = pluginInfo.initArgs.getName(i);\n        if (KNOWN_KEYS.contains(name)) continue;//aready taken care of\n        Object val = info.initArgs.get(name);\n        if (val != null) continue; //this is explicitly specified in the reqhandler , ignore\n        info.initArgs.add(name, pluginInfo.initArgs.getVal(i));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/InitParams#apply(PluginInfo).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/InitParams#apply(PluginInfo).mjava","sourceNew":"  public void apply(PluginInfo info) {\n    if (!info.isFromSolrConfig()) {\n      //if this is a component implicitly defined in code it should be overridden by initPrams\n      merge(defaults, (NamedList) info.initArgs.get(DEFAULTS), info.initArgs, DEFAULTS, false);\n    } else {\n      //if the args is initialized from solrconfig.xml inside the requestHandler it should be taking precedence over  initParams\n      merge((NamedList) info.initArgs.get(DEFAULTS), defaults, info.initArgs, DEFAULTS, false);\n    }\n    merge((NamedList) info.initArgs.get(INVARIANTS), invariants, info.initArgs, INVARIANTS, false);\n    merge((NamedList) info.initArgs.get(APPENDS), appends, info.initArgs, APPENDS, true);\n\n    if (pluginInfo.initArgs != null) {\n      for (int i = 0; i < pluginInfo.initArgs.size(); i++) {\n        String name = pluginInfo.initArgs.getName(i);\n        if (KNOWN_KEYS.contains(name)) continue;//already taken care of\n        Object val = info.initArgs.get(name);\n        if (val != null) continue; //this is explicitly specified in the reqhandler , ignore\n        info.initArgs.add(name, pluginInfo.initArgs.getVal(i));\n      }\n    }\n  }\n\n","sourceOld":"  public void apply(PluginInfo info) {\n    if (!info.isFromSolrConfig()) {\n      //if this is a component implicitly defined in code it should be overridden by initPrams\n      merge(defaults, (NamedList) info.initArgs.get(DEFAULTS), info.initArgs, DEFAULTS, false);\n    } else {\n      //if the args is initialized from solrconfig.xml inside the requesthHandler it should be taking precedence over  initParams\n      merge((NamedList) info.initArgs.get(DEFAULTS), defaults, info.initArgs, DEFAULTS, false);\n    }\n    merge((NamedList) info.initArgs.get(INVARIANTS), invariants, info.initArgs, INVARIANTS, false);\n    merge((NamedList) info.initArgs.get(APPENDS), appends, info.initArgs, APPENDS, true);\n\n    if (pluginInfo.initArgs != null) {\n      for (int i = 0; i < pluginInfo.initArgs.size(); i++) {\n        String name = pluginInfo.initArgs.getName(i);\n        if (KNOWN_KEYS.contains(name)) continue;//aready taken care of\n        Object val = info.initArgs.get(name);\n        if (val != null) continue; //this is explicitly specified in the reqhandler , ignore\n        info.initArgs.add(name, pluginInfo.initArgs.getVal(i));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"75237075d8425856bf4bbf52a6be4f9162b8187d","date":1591103291,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/InitParams#apply(PluginInfo).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/InitParams#apply(PluginInfo).mjava","sourceNew":"  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  public void apply(PluginInfo info) {\n    if (!info.isFromSolrConfig()) {\n      //if this is a component implicitly defined in code it should be overridden by initPrams\n      merge(defaults, (NamedList) info.initArgs.get(DEFAULTS), info.initArgs, DEFAULTS, false);\n    } else {\n      //if the args is initialized from solrconfig.xml inside the requestHandler it should be taking precedence over  initParams\n      merge((NamedList) info.initArgs.get(DEFAULTS), defaults, info.initArgs, DEFAULTS, false);\n    }\n    merge((NamedList) info.initArgs.get(INVARIANTS), invariants, info.initArgs, INVARIANTS, false);\n    merge((NamedList) info.initArgs.get(APPENDS), appends, info.initArgs, APPENDS, true);\n\n    if (pluginInfo.initArgs != null) {\n      for (int i = 0; i < pluginInfo.initArgs.size(); i++) {\n        String name = pluginInfo.initArgs.getName(i);\n        if (KNOWN_KEYS.contains(name)) continue;//already taken care of\n        Object val = info.initArgs.get(name);\n        if (val != null) continue; //this is explicitly specified in the reqhandler , ignore\n        info.initArgs.add(name, pluginInfo.initArgs.getVal(i));\n      }\n    }\n  }\n\n","sourceOld":"  public void apply(PluginInfo info) {\n    if (!info.isFromSolrConfig()) {\n      //if this is a component implicitly defined in code it should be overridden by initPrams\n      merge(defaults, (NamedList) info.initArgs.get(DEFAULTS), info.initArgs, DEFAULTS, false);\n    } else {\n      //if the args is initialized from solrconfig.xml inside the requestHandler it should be taking precedence over  initParams\n      merge((NamedList) info.initArgs.get(DEFAULTS), defaults, info.initArgs, DEFAULTS, false);\n    }\n    merge((NamedList) info.initArgs.get(INVARIANTS), invariants, info.initArgs, INVARIANTS, false);\n    merge((NamedList) info.initArgs.get(APPENDS), appends, info.initArgs, APPENDS, true);\n\n    if (pluginInfo.initArgs != null) {\n      for (int i = 0; i < pluginInfo.initArgs.size(); i++) {\n        String name = pluginInfo.initArgs.getName(i);\n        if (KNOWN_KEYS.contains(name)) continue;//already taken care of\n        Object val = info.initArgs.get(name);\n        if (val != null) continue; //this is explicitly specified in the reqhandler , ignore\n        info.initArgs.add(name, pluginInfo.initArgs.getVal(i));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"75237075d8425856bf4bbf52a6be4f9162b8187d":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"2330174b38007b9942205a2679db9ddffe35af89":["fd9bd61f133870fb7f5098ae91eeda31b729d446"],"1390137e395d2f07f9ba5b8c43d293befe84d563":["2330174b38007b9942205a2679db9ddffe35af89"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d2638f781be724518ff6c2263d14a48cf6e68017":["2330174b38007b9942205a2679db9ddffe35af89","1390137e395d2f07f9ba5b8c43d293befe84d563"],"3f8f89a6aa847dba1c4be0f18c506864db8f3d41":["1390137e395d2f07f9ba5b8c43d293befe84d563"],"fd9bd61f133870fb7f5098ae91eeda31b729d446":["0c8c61a314df19c300ce6ea1e4ab945374980883"],"0c8c61a314df19c300ce6ea1e4ab945374980883":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["3f8f89a6aa847dba1c4be0f18c506864db8f3d41","d470c8182e92b264680e34081b75e70a9f2b3c89"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["75237075d8425856bf4bbf52a6be4f9162b8187d"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["3f8f89a6aa847dba1c4be0f18c506864db8f3d41","0158ced21948b6626f733c1c42c1e18d94449789"],"0158ced21948b6626f733c1c42c1e18d94449789":["3f8f89a6aa847dba1c4be0f18c506864db8f3d41"]},"commit2Childs":{"75237075d8425856bf4bbf52a6be4f9162b8187d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2330174b38007b9942205a2679db9ddffe35af89":["1390137e395d2f07f9ba5b8c43d293befe84d563","d2638f781be724518ff6c2263d14a48cf6e68017"],"1390137e395d2f07f9ba5b8c43d293befe84d563":["d2638f781be724518ff6c2263d14a48cf6e68017","3f8f89a6aa847dba1c4be0f18c506864db8f3d41"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0c8c61a314df19c300ce6ea1e4ab945374980883"],"d2638f781be724518ff6c2263d14a48cf6e68017":[],"3f8f89a6aa847dba1c4be0f18c506864db8f3d41":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89","0158ced21948b6626f733c1c42c1e18d94449789"],"fd9bd61f133870fb7f5098ae91eeda31b729d446":["2330174b38007b9942205a2679db9ddffe35af89"],"0c8c61a314df19c300ce6ea1e4ab945374980883":["fd9bd61f133870fb7f5098ae91eeda31b729d446"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"d470c8182e92b264680e34081b75e70a9f2b3c89":["75237075d8425856bf4bbf52a6be4f9162b8187d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"0158ced21948b6626f733c1c42c1e18d94449789":["d470c8182e92b264680e34081b75e70a9f2b3c89"]},"heads":["d2638f781be724518ff6c2263d14a48cf6e68017","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}