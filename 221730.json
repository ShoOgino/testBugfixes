{"path":"solr/contrib/solr-mr/src/java/org/apache/solr/hadoop/SolrOutputFormat#createZip(File,File).mjava","commits":[{"id":"d6e604e9030fb0cabf0c5a85ae6039921a81419c","date":1386009743,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/contrib/solr-mr/src/java/org/apache/solr/hadoop/SolrOutputFormat#createZip(File,File).mjava","pathOld":"/dev/null","sourceNew":"  private static void createZip(File dir, File out) throws IOException {\n    HashSet<File> files = new HashSet<File>();\n    // take only conf/ and lib/\n    for (String allowedDirectory : SolrRecordWriter\n        .getAllowedConfigDirectories()) {\n      File configDir = new File(dir, allowedDirectory);\n      boolean configDirExists;\n      /** If the directory does not exist, and is required, bail out */\n      if (!(configDirExists = configDir.exists())\n          && SolrRecordWriter.isRequiredConfigDirectory(allowedDirectory)) {\n        throw new IOException(String.format(Locale.ENGLISH,\n            \"required configuration directory %s is not present in %s\",\n            allowedDirectory, dir));\n      }\n      if (!configDirExists) {\n        continue;\n      }\n      listFiles(configDir, files); // Store the files in the existing, allowed\n                                   // directory configDir, in the list of files\n                                   // to store in the zip file\n    }\n\n    out.delete();\n    int subst = dir.toString().length();\n    ZipOutputStream zos = new ZipOutputStream(new FileOutputStream(out));\n    byte[] buf = new byte[1024];\n    for (File f : files) {\n      ZipEntry ze = new ZipEntry(f.toString().substring(subst));\n      zos.putNextEntry(ze);\n      InputStream is = new FileInputStream(f);\n      int cnt;\n      while ((cnt = is.read(buf)) >= 0) {\n        zos.write(buf, 0, cnt);\n      }\n      is.close();\n      zos.flush();\n      zos.closeEntry();\n    }\n    \n    ZipEntry ze = new ZipEntry(\"solr.xml\");\n    zos.putNextEntry(ze);\n    zos.write(\"<cores><core name=\\\"collection1\\\" instanceDir=\\\".\\\"/></cores>\".getBytes(\"UTF-8\"));\n    zos.flush();\n    zos.closeEntry();\n    zos.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["cbc3688252d4a8045d69a164236b2cf87b721f17"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"70f91c8322fbffe3a3a897ef20ea19119cac10cd","date":1386170124,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/contrib/map-reduce/src/java/org/apache/solr/hadoop/SolrOutputFormat#createZip(File,File).mjava","pathOld":"solr/contrib/solr-mr/src/java/org/apache/solr/hadoop/SolrOutputFormat#createZip(File,File).mjava","sourceNew":"  private static void createZip(File dir, File out) throws IOException {\n    HashSet<File> files = new HashSet<File>();\n    // take only conf/ and lib/\n    for (String allowedDirectory : SolrRecordWriter\n        .getAllowedConfigDirectories()) {\n      File configDir = new File(dir, allowedDirectory);\n      boolean configDirExists;\n      /** If the directory does not exist, and is required, bail out */\n      if (!(configDirExists = configDir.exists())\n          && SolrRecordWriter.isRequiredConfigDirectory(allowedDirectory)) {\n        throw new IOException(String.format(Locale.ENGLISH,\n            \"required configuration directory %s is not present in %s\",\n            allowedDirectory, dir));\n      }\n      if (!configDirExists) {\n        continue;\n      }\n      listFiles(configDir, files); // Store the files in the existing, allowed\n                                   // directory configDir, in the list of files\n                                   // to store in the zip file\n    }\n\n    out.delete();\n    int subst = dir.toString().length();\n    ZipOutputStream zos = new ZipOutputStream(new FileOutputStream(out));\n    byte[] buf = new byte[1024];\n    for (File f : files) {\n      ZipEntry ze = new ZipEntry(f.toString().substring(subst));\n      zos.putNextEntry(ze);\n      InputStream is = new FileInputStream(f);\n      int cnt;\n      while ((cnt = is.read(buf)) >= 0) {\n        zos.write(buf, 0, cnt);\n      }\n      is.close();\n      zos.flush();\n      zos.closeEntry();\n    }\n    \n    ZipEntry ze = new ZipEntry(\"solr.xml\");\n    zos.putNextEntry(ze);\n    zos.write(\"<cores><core name=\\\"collection1\\\" instanceDir=\\\".\\\"/></cores>\".getBytes(\"UTF-8\"));\n    zos.flush();\n    zos.closeEntry();\n    zos.close();\n  }\n\n","sourceOld":"  private static void createZip(File dir, File out) throws IOException {\n    HashSet<File> files = new HashSet<File>();\n    // take only conf/ and lib/\n    for (String allowedDirectory : SolrRecordWriter\n        .getAllowedConfigDirectories()) {\n      File configDir = new File(dir, allowedDirectory);\n      boolean configDirExists;\n      /** If the directory does not exist, and is required, bail out */\n      if (!(configDirExists = configDir.exists())\n          && SolrRecordWriter.isRequiredConfigDirectory(allowedDirectory)) {\n        throw new IOException(String.format(Locale.ENGLISH,\n            \"required configuration directory %s is not present in %s\",\n            allowedDirectory, dir));\n      }\n      if (!configDirExists) {\n        continue;\n      }\n      listFiles(configDir, files); // Store the files in the existing, allowed\n                                   // directory configDir, in the list of files\n                                   // to store in the zip file\n    }\n\n    out.delete();\n    int subst = dir.toString().length();\n    ZipOutputStream zos = new ZipOutputStream(new FileOutputStream(out));\n    byte[] buf = new byte[1024];\n    for (File f : files) {\n      ZipEntry ze = new ZipEntry(f.toString().substring(subst));\n      zos.putNextEntry(ze);\n      InputStream is = new FileInputStream(f);\n      int cnt;\n      while ((cnt = is.read(buf)) >= 0) {\n        zos.write(buf, 0, cnt);\n      }\n      is.close();\n      zos.flush();\n      zos.closeEntry();\n    }\n    \n    ZipEntry ze = new ZipEntry(\"solr.xml\");\n    zos.putNextEntry(ze);\n    zos.write(\"<cores><core name=\\\"collection1\\\" instanceDir=\\\".\\\"/></cores>\".getBytes(\"UTF-8\"));\n    zos.flush();\n    zos.closeEntry();\n    zos.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"70f91c8322fbffe3a3a897ef20ea19119cac10cd":["d6e604e9030fb0cabf0c5a85ae6039921a81419c"],"d6e604e9030fb0cabf0c5a85ae6039921a81419c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["70f91c8322fbffe3a3a897ef20ea19119cac10cd"]},"commit2Childs":{"70f91c8322fbffe3a3a897ef20ea19119cac10cd":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d6e604e9030fb0cabf0c5a85ae6039921a81419c":["70f91c8322fbffe3a3a897ef20ea19119cac10cd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d6e604e9030fb0cabf0c5a85ae6039921a81419c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}