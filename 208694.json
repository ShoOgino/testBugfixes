{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/LBHttpSolrClientTest#testLBHttpSolrClientHttpClientResponseParserStringArray().mjava","commits":[{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/LBHttpSolrClientTest#testLBHttpSolrClientHttpClientResponseParserStringArray().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/LBHttpSolrServerTest#testLBHttpSolrServerHttpClientResponseParserStringArray().mjava","sourceNew":"  /**\n   * Test method for {@link LBHttpSolrClient#LBHttpSolrClient(org.apache.http.client.HttpClient, org.apache.solr.client.solrj.ResponseParser, java.lang.String[])}.\n   * \n   * Validate that the parser passed in is used in the <code>HttpSolrClient</code> instances created.\n   * \n   * @throws MalformedURLException If URL is invalid, no URL passed, so won't happen.\n   */\n  @Test\n  public void testLBHttpSolrClientHttpClientResponseParserStringArray() throws MalformedURLException {\n    LBHttpSolrClient testClient = new LBHttpSolrClient(HttpClientUtil.createClient(new ModifiableSolrParams()), (ResponseParser) null);\n    HttpSolrClient httpSolrClient = testClient.makeSolrClient(\"http://127.0.0.1:8080\");\n    assertNull(\"Generated server should have null parser.\", httpSolrClient.getParser());\n\n    ResponseParser parser = new BinaryResponseParser();\n    testClient = new LBHttpSolrClient(HttpClientUtil.createClient(new ModifiableSolrParams()), parser);\n    httpSolrClient = testClient.makeSolrClient(\"http://127.0.0.1:8080\");\n    assertEquals(\"Invalid parser passed to generated server.\", parser, httpSolrClient.getParser());\n  }\n\n","sourceOld":"  /**\n   * Test method for {@link org.apache.solr.client.solrj.impl.LBHttpSolrServer#LBHttpSolrServer(org.apache.http.client.HttpClient, org.apache.solr.client.solrj.ResponseParser, java.lang.String[])}.\n   * \n   * Validate that the parser passed in is used in the <code>HttpSolrServer</code> instances created.\n   * \n   * @throws MalformedURLException If URL is invalid, no URL passed, so won't happen.\n   */\n  @Test\n  public void testLBHttpSolrServerHttpClientResponseParserStringArray() throws MalformedURLException {\n    LBHttpSolrServer testServer = new LBHttpSolrServer(HttpClientUtil.createClient(new ModifiableSolrParams()), (ResponseParser) null);\n    HttpSolrServer httpServer = testServer.makeServer(\"http://127.0.0.1:8080\");\n    assertNull(\"Generated server should have null parser.\", httpServer.getParser());\n\n    ResponseParser parser = new BinaryResponseParser();\n    testServer = new LBHttpSolrServer(HttpClientUtil.createClient(new ModifiableSolrParams()), parser);\n    httpServer = testServer.makeServer(\"http://127.0.0.1:8080\");\n    assertEquals(\"Invalid parser passed to generated server.\", parser, httpServer.getParser());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6784d0cc613dc1ee97030eaaa5e0754edc22d164","date":1420824784,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/LBHttpSolrClientTest#testLBHttpSolrClientHttpClientResponseParserStringArray().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/LBHttpSolrClientTest#testLBHttpSolrClientHttpClientResponseParserStringArray().mjava","sourceNew":"  /**\n   * Test method for {@link LBHttpSolrClient#LBHttpSolrClient(org.apache.http.client.HttpClient, org.apache.solr.client.solrj.ResponseParser, java.lang.String[])}.\n   * \n   * Validate that the parser passed in is used in the <code>HttpSolrClient</code> instances created.\n   */\n  @Test\n  public void testLBHttpSolrClientHttpClientResponseParserStringArray() throws IOException {\n    CloseableHttpClient httpClient = HttpClientUtil.createClient(new ModifiableSolrParams());\n    LBHttpSolrClient testClient = new LBHttpSolrClient(httpClient, (ResponseParser) null);\n    HttpSolrClient httpSolrClient = testClient.makeSolrClient(\"http://127.0.0.1:8080\");\n    try {\n      assertNull(\"Generated server should have null parser.\", httpSolrClient.getParser());\n    } finally {\n      httpSolrClient.shutdown();\n      testClient.shutdown();\n      httpClient.close();\n    }\n    try {\n      ResponseParser parser = new BinaryResponseParser();\n      httpClient = HttpClientUtil.createClient(new ModifiableSolrParams());\n      testClient = new LBHttpSolrClient(httpClient, parser);\n      httpSolrClient = testClient.makeSolrClient(\"http://127.0.0.1:8080\");\n      assertEquals(\"Invalid parser passed to generated server.\", parser, httpSolrClient.getParser());\n    } finally {\n      httpSolrClient.shutdown();\n      testClient.shutdown();\n      httpClient.close();\n    }\n  }\n\n","sourceOld":"  /**\n   * Test method for {@link LBHttpSolrClient#LBHttpSolrClient(org.apache.http.client.HttpClient, org.apache.solr.client.solrj.ResponseParser, java.lang.String[])}.\n   * \n   * Validate that the parser passed in is used in the <code>HttpSolrClient</code> instances created.\n   * \n   * @throws MalformedURLException If URL is invalid, no URL passed, so won't happen.\n   */\n  @Test\n  public void testLBHttpSolrClientHttpClientResponseParserStringArray() throws MalformedURLException {\n    LBHttpSolrClient testClient = new LBHttpSolrClient(HttpClientUtil.createClient(new ModifiableSolrParams()), (ResponseParser) null);\n    HttpSolrClient httpSolrClient = testClient.makeSolrClient(\"http://127.0.0.1:8080\");\n    assertNull(\"Generated server should have null parser.\", httpSolrClient.getParser());\n\n    ResponseParser parser = new BinaryResponseParser();\n    testClient = new LBHttpSolrClient(HttpClientUtil.createClient(new ModifiableSolrParams()), parser);\n    httpSolrClient = testClient.makeSolrClient(\"http://127.0.0.1:8080\");\n    assertEquals(\"Invalid parser passed to generated server.\", parser, httpSolrClient.getParser());\n  }\n\n","bugFix":["bafca15d8e408346a67f4282ad1143b88023893b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cc3b13b430571c2e169f98fe38e1e7666f88522d","date":1422446157,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/LBHttpSolrClientTest#testLBHttpSolrClientHttpClientResponseParserStringArray().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/LBHttpSolrClientTest#testLBHttpSolrClientHttpClientResponseParserStringArray().mjava","sourceNew":"  /**\n   * Test method for {@link LBHttpSolrClient#LBHttpSolrClient(org.apache.http.client.HttpClient, org.apache.solr.client.solrj.ResponseParser, java.lang.String[])}.\n   * \n   * Validate that the parser passed in is used in the <code>HttpSolrClient</code> instances created.\n   */\n  @Test\n  public void testLBHttpSolrClientHttpClientResponseParserStringArray() throws IOException {\n\n    try (CloseableHttpClient httpClient = HttpClientUtil.createClient(new ModifiableSolrParams());\n         LBHttpSolrClient testClient = new LBHttpSolrClient(httpClient, (ResponseParser) null);\n         HttpSolrClient httpSolrClient = testClient.makeSolrClient(\"http://127.0.0.1:8080\")) {\n      assertNull(\"Generated server should have null parser.\", httpSolrClient.getParser());\n    }\n\n    ResponseParser parser = new BinaryResponseParser();\n    try (CloseableHttpClient httpClient = HttpClientUtil.createClient(new ModifiableSolrParams());\n         LBHttpSolrClient testClient = new LBHttpSolrClient(httpClient, parser);\n         HttpSolrClient httpSolrClient = testClient.makeSolrClient(\"http://127.0.0.1:8080\")) {\n      assertEquals(\"Invalid parser passed to generated server.\", parser, httpSolrClient.getParser());\n    }\n  }\n\n","sourceOld":"  /**\n   * Test method for {@link LBHttpSolrClient#LBHttpSolrClient(org.apache.http.client.HttpClient, org.apache.solr.client.solrj.ResponseParser, java.lang.String[])}.\n   * \n   * Validate that the parser passed in is used in the <code>HttpSolrClient</code> instances created.\n   */\n  @Test\n  public void testLBHttpSolrClientHttpClientResponseParserStringArray() throws IOException {\n    CloseableHttpClient httpClient = HttpClientUtil.createClient(new ModifiableSolrParams());\n    LBHttpSolrClient testClient = new LBHttpSolrClient(httpClient, (ResponseParser) null);\n    HttpSolrClient httpSolrClient = testClient.makeSolrClient(\"http://127.0.0.1:8080\");\n    try {\n      assertNull(\"Generated server should have null parser.\", httpSolrClient.getParser());\n    } finally {\n      httpSolrClient.shutdown();\n      testClient.shutdown();\n      httpClient.close();\n    }\n    try {\n      ResponseParser parser = new BinaryResponseParser();\n      httpClient = HttpClientUtil.createClient(new ModifiableSolrParams());\n      testClient = new LBHttpSolrClient(httpClient, parser);\n      httpSolrClient = testClient.makeSolrClient(\"http://127.0.0.1:8080\");\n      assertEquals(\"Invalid parser passed to generated server.\", parser, httpSolrClient.getParser());\n    } finally {\n      httpSolrClient.shutdown();\n      testClient.shutdown();\n      httpClient.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":["c07dc645ff236a7d51da2a5ef49a948dfbf8610c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"859081acf00749f5dd462772c571d611d4a4d2db","date":1459527719,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/LBHttpSolrClientTest#testLBHttpSolrClientHttpClientResponseParserStringArray().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/LBHttpSolrClientTest#testLBHttpSolrClientHttpClientResponseParserStringArray().mjava","sourceNew":"  /**\n   * Test method for {@link LBHttpSolrClient#LBHttpSolrClient(org.apache.http.client.HttpClient, org.apache.solr.client.solrj.ResponseParser, java.lang.String[])}.\n   * \n   * Validate that the parser passed in is used in the <code>HttpSolrClient</code> instances created.\n   */\n  @Test\n  public void testLBHttpSolrClientHttpClientResponseParserStringArray() throws IOException {\n    CloseableHttpClient httpClient = HttpClientUtil.createClient(new ModifiableSolrParams());\n    try (\n         LBHttpSolrClient testClient = new LBHttpSolrClient(httpClient, (ResponseParser) null);\n         HttpSolrClient httpSolrClient = testClient.makeSolrClient(\"http://127.0.0.1:8080\")) {\n      assertNull(\"Generated server should have null parser.\", httpSolrClient.getParser());\n    } finally {\n      HttpClientUtil.close(httpClient);\n    }\n\n    ResponseParser parser = new BinaryResponseParser();\n    httpClient = HttpClientUtil.createClient(new ModifiableSolrParams());\n    try {\n      try ( LBHttpSolrClient testClient = new LBHttpSolrClient(httpClient, parser); HttpSolrClient httpSolrClient = testClient.makeSolrClient(\"http://127.0.0.1:8080\")) {\n        assertEquals(\"Invalid parser passed to generated server.\", parser, httpSolrClient.getParser());\n      }\n    } finally {\n      HttpClientUtil.close(httpClient);\n    }\n  }\n\n","sourceOld":"  /**\n   * Test method for {@link LBHttpSolrClient#LBHttpSolrClient(org.apache.http.client.HttpClient, org.apache.solr.client.solrj.ResponseParser, java.lang.String[])}.\n   * \n   * Validate that the parser passed in is used in the <code>HttpSolrClient</code> instances created.\n   */\n  @Test\n  public void testLBHttpSolrClientHttpClientResponseParserStringArray() throws IOException {\n\n    try (CloseableHttpClient httpClient = HttpClientUtil.createClient(new ModifiableSolrParams());\n         LBHttpSolrClient testClient = new LBHttpSolrClient(httpClient, (ResponseParser) null);\n         HttpSolrClient httpSolrClient = testClient.makeSolrClient(\"http://127.0.0.1:8080\")) {\n      assertNull(\"Generated server should have null parser.\", httpSolrClient.getParser());\n    }\n\n    ResponseParser parser = new BinaryResponseParser();\n    try (CloseableHttpClient httpClient = HttpClientUtil.createClient(new ModifiableSolrParams());\n         LBHttpSolrClient testClient = new LBHttpSolrClient(httpClient, parser);\n         HttpSolrClient httpSolrClient = testClient.makeSolrClient(\"http://127.0.0.1:8080\")) {\n      assertEquals(\"Invalid parser passed to generated server.\", parser, httpSolrClient.getParser());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c07dc645ff236a7d51da2a5ef49a948dfbf8610c","date":1498242650,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/LBHttpSolrClientTest#testLBHttpSolrClientHttpClientResponseParserStringArray().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/LBHttpSolrClientTest#testLBHttpSolrClientHttpClientResponseParserStringArray().mjava","sourceNew":"  /**\n   * Test method for {@link LBHttpSolrClient#LBHttpSolrClient(org.apache.http.client.HttpClient, org.apache.solr.client.solrj.ResponseParser, java.lang.String[])}.\n   * \n   * Validate that the parser passed in is used in the <code>HttpSolrClient</code> instances created.\n   */\n  @Test\n  public void testLBHttpSolrClientHttpClientResponseParserStringArray() throws IOException {\n    CloseableHttpClient httpClient = HttpClientUtil.createClient(new ModifiableSolrParams());\n    try (\n         LBHttpSolrClient testClient = new LBHttpSolrClient.Builder().withHttpClient(httpClient).withResponseParser(null).build();\n         HttpSolrClient httpSolrClient = testClient.makeSolrClient(\"http://127.0.0.1:8080\")) {\n      assertNull(\"Generated server should have null parser.\", httpSolrClient.getParser());\n    } finally {\n      HttpClientUtil.close(httpClient);\n    }\n\n    ResponseParser parser = new BinaryResponseParser();\n    httpClient = HttpClientUtil.createClient(new ModifiableSolrParams());\n    try {\n      try ( LBHttpSolrClient testClient = new LBHttpSolrClient(httpClient, parser); HttpSolrClient httpSolrClient = testClient.makeSolrClient(\"http://127.0.0.1:8080\")) {\n        assertEquals(\"Invalid parser passed to generated server.\", parser, httpSolrClient.getParser());\n      }\n    } finally {\n      HttpClientUtil.close(httpClient);\n    }\n  }\n\n","sourceOld":"  /**\n   * Test method for {@link LBHttpSolrClient#LBHttpSolrClient(org.apache.http.client.HttpClient, org.apache.solr.client.solrj.ResponseParser, java.lang.String[])}.\n   * \n   * Validate that the parser passed in is used in the <code>HttpSolrClient</code> instances created.\n   */\n  @Test\n  public void testLBHttpSolrClientHttpClientResponseParserStringArray() throws IOException {\n    CloseableHttpClient httpClient = HttpClientUtil.createClient(new ModifiableSolrParams());\n    try (\n         LBHttpSolrClient testClient = new LBHttpSolrClient(httpClient, (ResponseParser) null);\n         HttpSolrClient httpSolrClient = testClient.makeSolrClient(\"http://127.0.0.1:8080\")) {\n      assertNull(\"Generated server should have null parser.\", httpSolrClient.getParser());\n    } finally {\n      HttpClientUtil.close(httpClient);\n    }\n\n    ResponseParser parser = new BinaryResponseParser();\n    httpClient = HttpClientUtil.createClient(new ModifiableSolrParams());\n    try {\n      try ( LBHttpSolrClient testClient = new LBHttpSolrClient(httpClient, parser); HttpSolrClient httpSolrClient = testClient.makeSolrClient(\"http://127.0.0.1:8080\")) {\n        assertEquals(\"Invalid parser passed to generated server.\", parser, httpSolrClient.getParser());\n      }\n    } finally {\n      HttpClientUtil.close(httpClient);\n    }\n  }\n\n","bugFix":["cc3b13b430571c2e169f98fe38e1e7666f88522d"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/LBHttpSolrClientTest#testLBHttpSolrClientHttpClientResponseParserStringArray().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/LBHttpSolrClientTest#testLBHttpSolrClientHttpClientResponseParserStringArray().mjava","sourceNew":"  /**\n   * Test method for {@link LBHttpSolrClient#LBHttpSolrClient(org.apache.http.client.HttpClient, org.apache.solr.client.solrj.ResponseParser, java.lang.String[])}.\n   * \n   * Validate that the parser passed in is used in the <code>HttpSolrClient</code> instances created.\n   */\n  @Test\n  public void testLBHttpSolrClientHttpClientResponseParserStringArray() throws IOException {\n    CloseableHttpClient httpClient = HttpClientUtil.createClient(new ModifiableSolrParams());\n    try (\n         LBHttpSolrClient testClient = new LBHttpSolrClient.Builder().withHttpClient(httpClient).withResponseParser(null).build();\n         HttpSolrClient httpSolrClient = testClient.makeSolrClient(\"http://127.0.0.1:8080\")) {\n      assertNull(\"Generated server should have null parser.\", httpSolrClient.getParser());\n    } finally {\n      HttpClientUtil.close(httpClient);\n    }\n\n    ResponseParser parser = new BinaryResponseParser();\n    httpClient = HttpClientUtil.createClient(new ModifiableSolrParams());\n    try {\n      try ( LBHttpSolrClient testClient = new LBHttpSolrClient(httpClient, parser); HttpSolrClient httpSolrClient = testClient.makeSolrClient(\"http://127.0.0.1:8080\")) {\n        assertEquals(\"Invalid parser passed to generated server.\", parser, httpSolrClient.getParser());\n      }\n    } finally {\n      HttpClientUtil.close(httpClient);\n    }\n  }\n\n","sourceOld":"  /**\n   * Test method for {@link LBHttpSolrClient#LBHttpSolrClient(org.apache.http.client.HttpClient, org.apache.solr.client.solrj.ResponseParser, java.lang.String[])}.\n   * \n   * Validate that the parser passed in is used in the <code>HttpSolrClient</code> instances created.\n   */\n  @Test\n  public void testLBHttpSolrClientHttpClientResponseParserStringArray() throws IOException {\n    CloseableHttpClient httpClient = HttpClientUtil.createClient(new ModifiableSolrParams());\n    try (\n         LBHttpSolrClient testClient = new LBHttpSolrClient(httpClient, (ResponseParser) null);\n         HttpSolrClient httpSolrClient = testClient.makeSolrClient(\"http://127.0.0.1:8080\")) {\n      assertNull(\"Generated server should have null parser.\", httpSolrClient.getParser());\n    } finally {\n      HttpClientUtil.close(httpClient);\n    }\n\n    ResponseParser parser = new BinaryResponseParser();\n    httpClient = HttpClientUtil.createClient(new ModifiableSolrParams());\n    try {\n      try ( LBHttpSolrClient testClient = new LBHttpSolrClient(httpClient, parser); HttpSolrClient httpSolrClient = testClient.makeSolrClient(\"http://127.0.0.1:8080\")) {\n        assertEquals(\"Invalid parser passed to generated server.\", parser, httpSolrClient.getParser());\n      }\n    } finally {\n      HttpClientUtil.close(httpClient);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/LBHttpSolrClientTest#testLBHttpSolrClientHttpClientResponseParserStringArray().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/LBHttpSolrClientTest#testLBHttpSolrClientHttpClientResponseParserStringArray().mjava","sourceNew":"  /**\n   * Test method for {@link LBHttpSolrClient#LBHttpSolrClient(org.apache.http.client.HttpClient, org.apache.solr.client.solrj.ResponseParser, java.lang.String[])}.\n   * \n   * Validate that the parser passed in is used in the <code>HttpSolrClient</code> instances created.\n   */\n  @Test\n  public void testLBHttpSolrClientHttpClientResponseParserStringArray() throws IOException {\n    CloseableHttpClient httpClient = HttpClientUtil.createClient(new ModifiableSolrParams());\n    try (\n         LBHttpSolrClient testClient = new LBHttpSolrClient.Builder().withHttpClient(httpClient).withResponseParser(null).build();\n         HttpSolrClient httpSolrClient = testClient.makeSolrClient(\"http://127.0.0.1:8080\")) {\n      assertNull(\"Generated server should have null parser.\", httpSolrClient.getParser());\n    } finally {\n      HttpClientUtil.close(httpClient);\n    }\n\n    ResponseParser parser = new BinaryResponseParser();\n    httpClient = HttpClientUtil.createClient(new ModifiableSolrParams());\n    try {\n      try ( LBHttpSolrClient testClient = new LBHttpSolrClient(httpClient, parser); HttpSolrClient httpSolrClient = testClient.makeSolrClient(\"http://127.0.0.1:8080\")) {\n        assertEquals(\"Invalid parser passed to generated server.\", parser, httpSolrClient.getParser());\n      }\n    } finally {\n      HttpClientUtil.close(httpClient);\n    }\n  }\n\n","sourceOld":"  /**\n   * Test method for {@link LBHttpSolrClient#LBHttpSolrClient(org.apache.http.client.HttpClient, org.apache.solr.client.solrj.ResponseParser, java.lang.String[])}.\n   * \n   * Validate that the parser passed in is used in the <code>HttpSolrClient</code> instances created.\n   */\n  @Test\n  public void testLBHttpSolrClientHttpClientResponseParserStringArray() throws IOException {\n    CloseableHttpClient httpClient = HttpClientUtil.createClient(new ModifiableSolrParams());\n    try (\n         LBHttpSolrClient testClient = new LBHttpSolrClient(httpClient, (ResponseParser) null);\n         HttpSolrClient httpSolrClient = testClient.makeSolrClient(\"http://127.0.0.1:8080\")) {\n      assertNull(\"Generated server should have null parser.\", httpSolrClient.getParser());\n    } finally {\n      HttpClientUtil.close(httpClient);\n    }\n\n    ResponseParser parser = new BinaryResponseParser();\n    httpClient = HttpClientUtil.createClient(new ModifiableSolrParams());\n    try {\n      try ( LBHttpSolrClient testClient = new LBHttpSolrClient(httpClient, parser); HttpSolrClient httpSolrClient = testClient.makeSolrClient(\"http://127.0.0.1:8080\")) {\n        assertEquals(\"Invalid parser passed to generated server.\", parser, httpSolrClient.getParser());\n      }\n    } finally {\n      HttpClientUtil.close(httpClient);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cba13865da71de3b9b0937fcbc66d726089356d","date":1537507909,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/LBHttpSolrClientTest#testLBHttpSolrClientHttpClientResponseParserStringArray().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/LBHttpSolrClientTest#testLBHttpSolrClientHttpClientResponseParserStringArray().mjava","sourceNew":"  /**\n   * Test method for {@link LBHttpSolrClient#LBHttpSolrClient(org.apache.http.client.HttpClient, org.apache.solr.client.solrj.ResponseParser, java.lang.String[])}.\n   * \n   * Validate that the parser passed in is used in the <code>HttpSolrClient</code> instances created.\n   */\n  @Test\n  @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 20-Sep-2018\n  public void testLBHttpSolrClientHttpClientResponseParserStringArray() throws IOException {\n    CloseableHttpClient httpClient = HttpClientUtil.createClient(new ModifiableSolrParams());\n    try (\n         LBHttpSolrClient testClient = new LBHttpSolrClient.Builder().withHttpClient(httpClient).withResponseParser(null).build();\n         HttpSolrClient httpSolrClient = testClient.makeSolrClient(\"http://127.0.0.1:8080\")) {\n      assertNull(\"Generated server should have null parser.\", httpSolrClient.getParser());\n    } finally {\n      HttpClientUtil.close(httpClient);\n    }\n\n    ResponseParser parser = new BinaryResponseParser();\n    httpClient = HttpClientUtil.createClient(new ModifiableSolrParams());\n    try {\n      try ( LBHttpSolrClient testClient = new LBHttpSolrClient(httpClient, parser); HttpSolrClient httpSolrClient = testClient.makeSolrClient(\"http://127.0.0.1:8080\")) {\n        assertEquals(\"Invalid parser passed to generated server.\", parser, httpSolrClient.getParser());\n      }\n    } finally {\n      HttpClientUtil.close(httpClient);\n    }\n  }\n\n","sourceOld":"  /**\n   * Test method for {@link LBHttpSolrClient#LBHttpSolrClient(org.apache.http.client.HttpClient, org.apache.solr.client.solrj.ResponseParser, java.lang.String[])}.\n   * \n   * Validate that the parser passed in is used in the <code>HttpSolrClient</code> instances created.\n   */\n  @Test\n  public void testLBHttpSolrClientHttpClientResponseParserStringArray() throws IOException {\n    CloseableHttpClient httpClient = HttpClientUtil.createClient(new ModifiableSolrParams());\n    try (\n         LBHttpSolrClient testClient = new LBHttpSolrClient.Builder().withHttpClient(httpClient).withResponseParser(null).build();\n         HttpSolrClient httpSolrClient = testClient.makeSolrClient(\"http://127.0.0.1:8080\")) {\n      assertNull(\"Generated server should have null parser.\", httpSolrClient.getParser());\n    } finally {\n      HttpClientUtil.close(httpClient);\n    }\n\n    ResponseParser parser = new BinaryResponseParser();\n    httpClient = HttpClientUtil.createClient(new ModifiableSolrParams());\n    try {\n      try ( LBHttpSolrClient testClient = new LBHttpSolrClient(httpClient, parser); HttpSolrClient httpSolrClient = testClient.makeSolrClient(\"http://127.0.0.1:8080\")) {\n        assertEquals(\"Invalid parser passed to generated server.\", parser, httpSolrClient.getParser());\n      }\n    } finally {\n      HttpClientUtil.close(httpClient);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b5c929d2716fa79d443b93a82adb1da5b578ebd8","date":1550428858,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/LBHttpSolrClientTest#testLBHttpSolrClientHttpClientResponseParserStringArray().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/LBHttpSolrClientTest#testLBHttpSolrClientHttpClientResponseParserStringArray().mjava","sourceNew":"  /**\n   * Test method for {@link LBHttpSolrClient#LBHttpSolrClient(org.apache.http.client.HttpClient, org.apache.solr.client.solrj.ResponseParser, java.lang.String[])}.\n   * \n   * Validate that the parser passed in is used in the <code>HttpSolrClient</code> instances created.\n   */\n  @Test\n  // commented out on: 17-Feb-2019   @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 20-Sep-2018\n  public void testLBHttpSolrClientHttpClientResponseParserStringArray() throws IOException {\n    CloseableHttpClient httpClient = HttpClientUtil.createClient(new ModifiableSolrParams());\n    try (\n         LBHttpSolrClient testClient = new LBHttpSolrClient.Builder().withHttpClient(httpClient).withResponseParser(null).build();\n         HttpSolrClient httpSolrClient = testClient.makeSolrClient(\"http://127.0.0.1:8080\")) {\n      assertNull(\"Generated server should have null parser.\", httpSolrClient.getParser());\n    } finally {\n      HttpClientUtil.close(httpClient);\n    }\n\n    ResponseParser parser = new BinaryResponseParser();\n    httpClient = HttpClientUtil.createClient(new ModifiableSolrParams());\n    try {\n      try ( LBHttpSolrClient testClient = new LBHttpSolrClient(httpClient, parser); HttpSolrClient httpSolrClient = testClient.makeSolrClient(\"http://127.0.0.1:8080\")) {\n        assertEquals(\"Invalid parser passed to generated server.\", parser, httpSolrClient.getParser());\n      }\n    } finally {\n      HttpClientUtil.close(httpClient);\n    }\n  }\n\n","sourceOld":"  /**\n   * Test method for {@link LBHttpSolrClient#LBHttpSolrClient(org.apache.http.client.HttpClient, org.apache.solr.client.solrj.ResponseParser, java.lang.String[])}.\n   * \n   * Validate that the parser passed in is used in the <code>HttpSolrClient</code> instances created.\n   */\n  @Test\n  @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 20-Sep-2018\n  public void testLBHttpSolrClientHttpClientResponseParserStringArray() throws IOException {\n    CloseableHttpClient httpClient = HttpClientUtil.createClient(new ModifiableSolrParams());\n    try (\n         LBHttpSolrClient testClient = new LBHttpSolrClient.Builder().withHttpClient(httpClient).withResponseParser(null).build();\n         HttpSolrClient httpSolrClient = testClient.makeSolrClient(\"http://127.0.0.1:8080\")) {\n      assertNull(\"Generated server should have null parser.\", httpSolrClient.getParser());\n    } finally {\n      HttpClientUtil.close(httpClient);\n    }\n\n    ResponseParser parser = new BinaryResponseParser();\n    httpClient = HttpClientUtil.createClient(new ModifiableSolrParams());\n    try {\n      try ( LBHttpSolrClient testClient = new LBHttpSolrClient(httpClient, parser); HttpSolrClient httpSolrClient = testClient.makeSolrClient(\"http://127.0.0.1:8080\")) {\n        assertEquals(\"Invalid parser passed to generated server.\", parser, httpSolrClient.getParser());\n      }\n    } finally {\n      HttpClientUtil.close(httpClient);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"859081acf00749f5dd462772c571d611d4a4d2db":["cc3b13b430571c2e169f98fe38e1e7666f88522d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b5c929d2716fa79d443b93a82adb1da5b578ebd8":["4cba13865da71de3b9b0937fcbc66d726089356d"],"4cba13865da71de3b9b0937fcbc66d726089356d":["28288370235ed02234a64753cdbf0c6ec096304a"],"cc3b13b430571c2e169f98fe38e1e7666f88522d":["6784d0cc613dc1ee97030eaaa5e0754edc22d164"],"bafca15d8e408346a67f4282ad1143b88023893b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6784d0cc613dc1ee97030eaaa5e0754edc22d164":["bafca15d8e408346a67f4282ad1143b88023893b"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["859081acf00749f5dd462772c571d611d4a4d2db","c07dc645ff236a7d51da2a5ef49a948dfbf8610c"],"28288370235ed02234a64753cdbf0c6ec096304a":["859081acf00749f5dd462772c571d611d4a4d2db","c07dc645ff236a7d51da2a5ef49a948dfbf8610c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b5c929d2716fa79d443b93a82adb1da5b578ebd8"],"c07dc645ff236a7d51da2a5ef49a948dfbf8610c":["859081acf00749f5dd462772c571d611d4a4d2db"]},"commit2Childs":{"859081acf00749f5dd462772c571d611d4a4d2db":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a","c07dc645ff236a7d51da2a5ef49a948dfbf8610c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bafca15d8e408346a67f4282ad1143b88023893b"],"b5c929d2716fa79d443b93a82adb1da5b578ebd8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cba13865da71de3b9b0937fcbc66d726089356d":["b5c929d2716fa79d443b93a82adb1da5b578ebd8"],"cc3b13b430571c2e169f98fe38e1e7666f88522d":["859081acf00749f5dd462772c571d611d4a4d2db"],"bafca15d8e408346a67f4282ad1143b88023893b":["6784d0cc613dc1ee97030eaaa5e0754edc22d164"],"6784d0cc613dc1ee97030eaaa5e0754edc22d164":["cc3b13b430571c2e169f98fe38e1e7666f88522d"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":[],"28288370235ed02234a64753cdbf0c6ec096304a":["4cba13865da71de3b9b0937fcbc66d726089356d"],"c07dc645ff236a7d51da2a5ef49a948dfbf8610c":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}