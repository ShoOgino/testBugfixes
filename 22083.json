{"path":"solr/contrib/morphlines-core/src/java/org/apache/solr/morphlines/solr/FileUtils#isSymlink(File).mjava","commits":[{"id":"c170e9d4c93c47801b611c5f124a91c5d27e0d73","date":1392824784,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/contrib/morphlines-core/src/java/org/apache/solr/morphlines/solr/FileUtils#isSymlink(File).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Determines whether the specified file is a Symbolic Link rather than an actual file.\n   * <p>\n   * Will not return true if there is a Symbolic Link anywhere in the path,\n   * only if the specific file is.\n   *\n   * @param file the file to check\n   * @return true if the file is a Symbolic Link\n   * @throws IOException if an IO error occurs while checking the file\n   * @since Commons IO 2.0\n   */\n  public static boolean isSymlink(File file) throws IOException {\n      if (file == null) {\n          throw new NullPointerException(\"File must not be null\");\n      }\n//      if (FilenameUtils.isSystemWindows()) {\n      if (File.separatorChar == '\\\\') {\n          return false;\n      }\n      File fileInCanonicalDir = null;\n      if (file.getParent() == null) {\n          fileInCanonicalDir = file;\n      } else {\n          File canonicalDir = file.getParentFile().getCanonicalFile();\n          fileInCanonicalDir = new File(canonicalDir, file.getName());\n      }\n      \n      if (fileInCanonicalDir.getCanonicalFile().equals(fileInCanonicalDir.getAbsoluteFile())) {\n          return false;\n      } else {\n          return true;\n      }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"12109b652e9210b8d58fca47f6c4a725d058a58e","date":1490373076,"type":4,"author":"Steve Rowe","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/morphlines-core/src/java/org/apache/solr/morphlines/solr/FileUtils#isSymlink(File).mjava","sourceNew":null,"sourceOld":"  /**\n   * Determines whether the specified file is a Symbolic Link rather than an actual file.\n   * <p>\n   * Will not return true if there is a Symbolic Link anywhere in the path,\n   * only if the specific file is.\n   *\n   * @param file the file to check\n   * @return true if the file is a Symbolic Link\n   * @throws IOException if an IO error occurs while checking the file\n   * @since Commons IO 2.0\n   */\n  public static boolean isSymlink(File file) throws IOException {\n      if (file == null) {\n          throw new NullPointerException(\"File must not be null\");\n      }\n//      if (FilenameUtils.isSystemWindows()) {\n      if (File.separatorChar == '\\\\') {\n          return false;\n      }\n      File fileInCanonicalDir = null;\n      if (file.getParent() == null) {\n          fileInCanonicalDir = file;\n      } else {\n          File canonicalDir = file.getParentFile().getCanonicalFile();\n          fileInCanonicalDir = new File(canonicalDir, file.getName());\n      }\n      \n      if (fileInCanonicalDir.getCanonicalFile().equals(fileInCanonicalDir.getAbsoluteFile())) {\n          return false;\n      } else {\n          return true;\n      }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe1c4aa9af769a38e878f608070f672efbeac27f","date":1490594650,"type":4,"author":"Steve Rowe","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/morphlines-core/src/java/org/apache/solr/morphlines/solr/FileUtils#isSymlink(File).mjava","sourceNew":null,"sourceOld":"  /**\n   * Determines whether the specified file is a Symbolic Link rather than an actual file.\n   * <p>\n   * Will not return true if there is a Symbolic Link anywhere in the path,\n   * only if the specific file is.\n   *\n   * @param file the file to check\n   * @return true if the file is a Symbolic Link\n   * @throws IOException if an IO error occurs while checking the file\n   * @since Commons IO 2.0\n   */\n  public static boolean isSymlink(File file) throws IOException {\n      if (file == null) {\n          throw new NullPointerException(\"File must not be null\");\n      }\n//      if (FilenameUtils.isSystemWindows()) {\n      if (File.separatorChar == '\\\\') {\n          return false;\n      }\n      File fileInCanonicalDir = null;\n      if (file.getParent() == null) {\n          fileInCanonicalDir = file;\n      } else {\n          File canonicalDir = file.getParentFile().getCanonicalFile();\n          fileInCanonicalDir = new File(canonicalDir, file.getName());\n      }\n      \n      if (fileInCanonicalDir.getCanonicalFile().equals(fileInCanonicalDir.getAbsoluteFile())) {\n          return false;\n      } else {\n          return true;\n      }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c170e9d4c93c47801b611c5f124a91c5d27e0d73":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"12109b652e9210b8d58fca47f6c4a725d058a58e":["c170e9d4c93c47801b611c5f124a91c5d27e0d73"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fe1c4aa9af769a38e878f608070f672efbeac27f":["c170e9d4c93c47801b611c5f124a91c5d27e0d73"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["12109b652e9210b8d58fca47f6c4a725d058a58e"]},"commit2Childs":{"c170e9d4c93c47801b611c5f124a91c5d27e0d73":["12109b652e9210b8d58fca47f6c4a725d058a58e","fe1c4aa9af769a38e878f608070f672efbeac27f"],"12109b652e9210b8d58fca47f6c4a725d058a58e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c170e9d4c93c47801b611c5f124a91c5d27e0d73"],"fe1c4aa9af769a38e878f608070f672efbeac27f":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fe1c4aa9af769a38e878f608070f672efbeac27f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}