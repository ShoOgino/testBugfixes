{"path":"src/test/org/apache/solr/analysis/TestSynonymFilter#testMatching().mjava","commits":[{"id":"0d3072fffb39e4aa50fce38815821919b35fc194","date":1138579199,"type":0,"author":"Yoav Shapira","isMerge":false,"pathNew":"src/test/org/apache/solr/analysis/TestSynonymFilter#testMatching().mjava","pathOld":"/dev/null","sourceNew":"  public void testMatching() throws IOException {\r\n    SynonymMap map = new SynonymMap();\r\n\r\n    boolean orig = false;\r\n    boolean merge = true;\r\n    map.add(strings(\"a b\"), tokens(\"ab\"), orig, merge);\r\n    map.add(strings(\"a c\"), tokens(\"ac\"), orig, merge);\r\n    map.add(strings(\"a\"), tokens(\"aa\"), orig, merge);\r\n    map.add(strings(\"b\"), tokens(\"bb\"), orig, merge);\r\n    map.add(strings(\"z x c v\"), tokens(\"zxcv\"), orig, merge);\r\n    map.add(strings(\"x c\"), tokens(\"xc\"), orig, merge);\r\n\r\n    // System.out.println(map);\r\n    // System.out.println(getTokList(map,\"a\",false));\r\n\r\n    assertTokEqual(getTokList(map,\"$\",false), tokens(\"$\"));\r\n    assertTokEqual(getTokList(map,\"a\",false), tokens(\"aa\"));\r\n    assertTokEqual(getTokList(map,\"a $\",false), tokens(\"aa $\"));\r\n    assertTokEqual(getTokList(map,\"$ a\",false), tokens(\"$ aa\"));\r\n    assertTokEqual(getTokList(map,\"a a\",false), tokens(\"aa aa\"));\r\n    assertTokEqual(getTokList(map,\"b\",false), tokens(\"bb\"));\r\n    assertTokEqual(getTokList(map,\"z x c v\",false), tokens(\"zxcv\"));\r\n    assertTokEqual(getTokList(map,\"z x c $\",false), tokens(\"z xc $\"));\r\n\r\n    // repeats\r\n    map.add(strings(\"a b\"), tokens(\"ab\"), orig, merge);\r\n    map.add(strings(\"a b\"), tokens(\"ab\"), orig, merge);\r\n    assertTokEqual(getTokList(map,\"a b\",false), tokens(\"ab\"));\r\n\r\n    // check for lack of recursion\r\n    map.add(strings(\"zoo\"), tokens(\"zoo\"), orig, merge);\r\n    assertTokEqual(getTokList(map,\"zoo zoo $ zoo\",false), tokens(\"zoo zoo $ zoo\"));\r\n    map.add(strings(\"zoo\"), tokens(\"zoo zoo\"), orig, merge);\r\n    assertTokEqual(getTokList(map,\"zoo zoo $ zoo\",false), tokens(\"zoo zoo zoo zoo $ zoo zoo\"));\r\n  }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":["c1781d63ce2d5e979c8b3f35682b60a86f5df553"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c1781d63ce2d5e979c8b3f35682b60a86f5df553","date":1153254917,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/solr/analysis/TestSynonymFilter#testMatching().mjava","pathOld":"src/test/org/apache/solr/analysis/TestSynonymFilter#testMatching().mjava","sourceNew":"  public void testMatching() throws IOException {\n    SynonymMap map = new SynonymMap();\n\n    boolean orig = false;\n    boolean merge = true;\n    map.add(strings(\"a b\"), tokens(\"ab\"), orig, merge);\n    map.add(strings(\"a c\"), tokens(\"ac\"), orig, merge);\n    map.add(strings(\"a\"), tokens(\"aa\"), orig, merge);\n    map.add(strings(\"b\"), tokens(\"bb\"), orig, merge);\n    map.add(strings(\"z x c v\"), tokens(\"zxcv\"), orig, merge);\n    map.add(strings(\"x c\"), tokens(\"xc\"), orig, merge);\n\n    // System.out.println(map);\n    // System.out.println(getTokList(map,\"a\",false));\n\n    assertTokEqual(getTokList(map,\"$\",false), tokens(\"$\"));\n    assertTokEqual(getTokList(map,\"a\",false), tokens(\"aa\"));\n    assertTokEqual(getTokList(map,\"a $\",false), tokens(\"aa $\"));\n    assertTokEqual(getTokList(map,\"$ a\",false), tokens(\"$ aa\"));\n    assertTokEqual(getTokList(map,\"a a\",false), tokens(\"aa aa\"));\n    assertTokEqual(getTokList(map,\"b\",false), tokens(\"bb\"));\n    assertTokEqual(getTokList(map,\"z x c v\",false), tokens(\"zxcv\"));\n    assertTokEqual(getTokList(map,\"z x c $\",false), tokens(\"z xc $\"));\n\n    // repeats\n    map.add(strings(\"a b\"), tokens(\"ab\"), orig, merge);\n    map.add(strings(\"a b\"), tokens(\"ab\"), orig, merge);\n    assertTokEqual(getTokList(map,\"a b\",false), tokens(\"ab\"));\n\n    // check for lack of recursion\n    map.add(strings(\"zoo\"), tokens(\"zoo\"), orig, merge);\n    assertTokEqual(getTokList(map,\"zoo zoo $ zoo\",false), tokens(\"zoo zoo $ zoo\"));\n    map.add(strings(\"zoo\"), tokens(\"zoo zoo\"), orig, merge);\n    assertTokEqual(getTokList(map,\"zoo zoo $ zoo\",false), tokens(\"zoo zoo zoo zoo $ zoo zoo\"));\n  }\n\n","sourceOld":"  public void testMatching() throws IOException {\r\n    SynonymMap map = new SynonymMap();\r\n\r\n    boolean orig = false;\r\n    boolean merge = true;\r\n    map.add(strings(\"a b\"), tokens(\"ab\"), orig, merge);\r\n    map.add(strings(\"a c\"), tokens(\"ac\"), orig, merge);\r\n    map.add(strings(\"a\"), tokens(\"aa\"), orig, merge);\r\n    map.add(strings(\"b\"), tokens(\"bb\"), orig, merge);\r\n    map.add(strings(\"z x c v\"), tokens(\"zxcv\"), orig, merge);\r\n    map.add(strings(\"x c\"), tokens(\"xc\"), orig, merge);\r\n\r\n    // System.out.println(map);\r\n    // System.out.println(getTokList(map,\"a\",false));\r\n\r\n    assertTokEqual(getTokList(map,\"$\",false), tokens(\"$\"));\r\n    assertTokEqual(getTokList(map,\"a\",false), tokens(\"aa\"));\r\n    assertTokEqual(getTokList(map,\"a $\",false), tokens(\"aa $\"));\r\n    assertTokEqual(getTokList(map,\"$ a\",false), tokens(\"$ aa\"));\r\n    assertTokEqual(getTokList(map,\"a a\",false), tokens(\"aa aa\"));\r\n    assertTokEqual(getTokList(map,\"b\",false), tokens(\"bb\"));\r\n    assertTokEqual(getTokList(map,\"z x c v\",false), tokens(\"zxcv\"));\r\n    assertTokEqual(getTokList(map,\"z x c $\",false), tokens(\"z xc $\"));\r\n\r\n    // repeats\r\n    map.add(strings(\"a b\"), tokens(\"ab\"), orig, merge);\r\n    map.add(strings(\"a b\"), tokens(\"ab\"), orig, merge);\r\n    assertTokEqual(getTokList(map,\"a b\",false), tokens(\"ab\"));\r\n\r\n    // check for lack of recursion\r\n    map.add(strings(\"zoo\"), tokens(\"zoo\"), orig, merge);\r\n    assertTokEqual(getTokList(map,\"zoo zoo $ zoo\",false), tokens(\"zoo zoo $ zoo\"));\r\n    map.add(strings(\"zoo\"), tokens(\"zoo zoo\"), orig, merge);\r\n    assertTokEqual(getTokList(map,\"zoo zoo $ zoo\",false), tokens(\"zoo zoo zoo zoo $ zoo zoo\"));\r\n  }\r\n\n","bugFix":["0d3072fffb39e4aa50fce38815821919b35fc194"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2fd023a662cc25ae7e0ad0f33d71c476a16d0579","date":1261403630,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/test/org/apache/solr/analysis/TestSynonymFilter#testMatching().mjava","pathOld":"src/test/org/apache/solr/analysis/TestSynonymFilter#testMatching().mjava","sourceNew":"  public void testMatching() throws IOException {\n    SynonymMap map = new SynonymMap();\n\n    boolean orig = false;\n    boolean merge = true;\n    map.add(strings(\"a b\"), tokens(\"ab\"), orig, merge);\n    map.add(strings(\"a c\"), tokens(\"ac\"), orig, merge);\n    map.add(strings(\"a\"), tokens(\"aa\"), orig, merge);\n    map.add(strings(\"b\"), tokens(\"bb\"), orig, merge);\n    map.add(strings(\"z x c v\"), tokens(\"zxcv\"), orig, merge);\n    map.add(strings(\"x c\"), tokens(\"xc\"), orig, merge);\n\n    assertTokenizesTo(map, \"$\", new String[] { \"$\" });\n    assertTokenizesTo(map, \"a\", new String[] { \"aa\" });\n    assertTokenizesTo(map, \"a $\", new String[] { \"aa\", \"$\" });\n    assertTokenizesTo(map, \"$ a\", new String[] { \"$\", \"aa\" });\n    assertTokenizesTo(map, \"a a\", new String[] { \"aa\", \"aa\" });\n    assertTokenizesTo(map, \"b\", new String[] { \"bb\" });\n    assertTokenizesTo(map, \"z x c v\", new String[] { \"zxcv\" });\n    assertTokenizesTo(map, \"z x c $\", new String[] { \"z\", \"xc\", \"$\" });\n\n    // repeats\n    map.add(strings(\"a b\"), tokens(\"ab\"), orig, merge);\n    map.add(strings(\"a b\"), tokens(\"ab\"), orig, merge);\n    \n    // FIXME: the below test intended to be { \"ab\" }\n    assertTokenizesTo(map, \"a b\", new String[] { \"ab\", \"ab\", \"ab\"  });\n\n    // check for lack of recursion\n    map.add(strings(\"zoo\"), tokens(\"zoo\"), orig, merge);\n    assertTokenizesTo(map, \"zoo zoo $ zoo\", new String[] { \"zoo\", \"zoo\", \"$\", \"zoo\" });\n    map.add(strings(\"zoo\"), tokens(\"zoo zoo\"), orig, merge);\n    // FIXME: the below test intended to be { \"zoo\", \"zoo\", \"zoo\", \"zoo\", \"$\", \"zoo\", \"zoo\" }\n    // maybe this was just a typo in the old test????\n    assertTokenizesTo(map, \"zoo zoo $ zoo\", new String[] { \"zoo\", \"zoo\", \"zoo\", \"zoo\", \"zoo\", \"zoo\", \"$\", \"zoo\", \"zoo\", \"zoo\" });\n  }\n\n","sourceOld":"  public void testMatching() throws IOException {\n    SynonymMap map = new SynonymMap();\n\n    boolean orig = false;\n    boolean merge = true;\n    map.add(strings(\"a b\"), tokens(\"ab\"), orig, merge);\n    map.add(strings(\"a c\"), tokens(\"ac\"), orig, merge);\n    map.add(strings(\"a\"), tokens(\"aa\"), orig, merge);\n    map.add(strings(\"b\"), tokens(\"bb\"), orig, merge);\n    map.add(strings(\"z x c v\"), tokens(\"zxcv\"), orig, merge);\n    map.add(strings(\"x c\"), tokens(\"xc\"), orig, merge);\n\n    // System.out.println(map);\n    // System.out.println(getTokList(map,\"a\",false));\n\n    assertTokEqual(getTokList(map,\"$\",false), tokens(\"$\"));\n    assertTokEqual(getTokList(map,\"a\",false), tokens(\"aa\"));\n    assertTokEqual(getTokList(map,\"a $\",false), tokens(\"aa $\"));\n    assertTokEqual(getTokList(map,\"$ a\",false), tokens(\"$ aa\"));\n    assertTokEqual(getTokList(map,\"a a\",false), tokens(\"aa aa\"));\n    assertTokEqual(getTokList(map,\"b\",false), tokens(\"bb\"));\n    assertTokEqual(getTokList(map,\"z x c v\",false), tokens(\"zxcv\"));\n    assertTokEqual(getTokList(map,\"z x c $\",false), tokens(\"z xc $\"));\n\n    // repeats\n    map.add(strings(\"a b\"), tokens(\"ab\"), orig, merge);\n    map.add(strings(\"a b\"), tokens(\"ab\"), orig, merge);\n    assertTokEqual(getTokList(map,\"a b\",false), tokens(\"ab\"));\n\n    // check for lack of recursion\n    map.add(strings(\"zoo\"), tokens(\"zoo\"), orig, merge);\n    assertTokEqual(getTokList(map,\"zoo zoo $ zoo\",false), tokens(\"zoo zoo $ zoo\"));\n    map.add(strings(\"zoo\"), tokens(\"zoo zoo\"), orig, merge);\n    assertTokEqual(getTokList(map,\"zoo zoo $ zoo\",false), tokens(\"zoo zoo zoo zoo $ zoo zoo\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/analysis/TestSynonymFilter#testMatching().mjava","pathOld":"src/test/org/apache/solr/analysis/TestSynonymFilter#testMatching().mjava","sourceNew":"  public void testMatching() throws IOException {\n    SynonymMap map = new SynonymMap();\n\n    boolean orig = false;\n    boolean merge = true;\n    map.add(strings(\"a b\"), tokens(\"ab\"), orig, merge);\n    map.add(strings(\"a c\"), tokens(\"ac\"), orig, merge);\n    map.add(strings(\"a\"), tokens(\"aa\"), orig, merge);\n    map.add(strings(\"b\"), tokens(\"bb\"), orig, merge);\n    map.add(strings(\"z x c v\"), tokens(\"zxcv\"), orig, merge);\n    map.add(strings(\"x c\"), tokens(\"xc\"), orig, merge);\n\n    assertTokenizesTo(map, \"$\", new String[] { \"$\" });\n    assertTokenizesTo(map, \"a\", new String[] { \"aa\" });\n    assertTokenizesTo(map, \"a $\", new String[] { \"aa\", \"$\" });\n    assertTokenizesTo(map, \"$ a\", new String[] { \"$\", \"aa\" });\n    assertTokenizesTo(map, \"a a\", new String[] { \"aa\", \"aa\" });\n    assertTokenizesTo(map, \"b\", new String[] { \"bb\" });\n    assertTokenizesTo(map, \"z x c v\", new String[] { \"zxcv\" });\n    assertTokenizesTo(map, \"z x c $\", new String[] { \"z\", \"xc\", \"$\" });\n\n    // repeats\n    map.add(strings(\"a b\"), tokens(\"ab\"), orig, merge);\n    map.add(strings(\"a b\"), tokens(\"ab\"), orig, merge);\n    \n    // FIXME: the below test intended to be { \"ab\" }\n    assertTokenizesTo(map, \"a b\", new String[] { \"ab\", \"ab\", \"ab\"  });\n\n    // check for lack of recursion\n    map.add(strings(\"zoo\"), tokens(\"zoo\"), orig, merge);\n    assertTokenizesTo(map, \"zoo zoo $ zoo\", new String[] { \"zoo\", \"zoo\", \"$\", \"zoo\" });\n    map.add(strings(\"zoo\"), tokens(\"zoo zoo\"), orig, merge);\n    // FIXME: the below test intended to be { \"zoo\", \"zoo\", \"zoo\", \"zoo\", \"$\", \"zoo\", \"zoo\" }\n    // maybe this was just a typo in the old test????\n    assertTokenizesTo(map, \"zoo zoo $ zoo\", new String[] { \"zoo\", \"zoo\", \"zoo\", \"zoo\", \"zoo\", \"zoo\", \"$\", \"zoo\", \"zoo\", \"zoo\" });\n  }\n\n","sourceOld":"  public void testMatching() throws IOException {\n    SynonymMap map = new SynonymMap();\n\n    boolean orig = false;\n    boolean merge = true;\n    map.add(strings(\"a b\"), tokens(\"ab\"), orig, merge);\n    map.add(strings(\"a c\"), tokens(\"ac\"), orig, merge);\n    map.add(strings(\"a\"), tokens(\"aa\"), orig, merge);\n    map.add(strings(\"b\"), tokens(\"bb\"), orig, merge);\n    map.add(strings(\"z x c v\"), tokens(\"zxcv\"), orig, merge);\n    map.add(strings(\"x c\"), tokens(\"xc\"), orig, merge);\n\n    assertTokenizesTo(map, \"$\", new String[] { \"$\" });\n    assertTokenizesTo(map, \"a\", new String[] { \"aa\" });\n    assertTokenizesTo(map, \"a $\", new String[] { \"aa\", \"$\" });\n    assertTokenizesTo(map, \"$ a\", new String[] { \"$\", \"aa\" });\n    assertTokenizesTo(map, \"a a\", new String[] { \"aa\", \"aa\" });\n    assertTokenizesTo(map, \"b\", new String[] { \"bb\" });\n    assertTokenizesTo(map, \"z x c v\", new String[] { \"zxcv\" });\n    assertTokenizesTo(map, \"z x c $\", new String[] { \"z\", \"xc\", \"$\" });\n\n    // repeats\n    map.add(strings(\"a b\"), tokens(\"ab\"), orig, merge);\n    map.add(strings(\"a b\"), tokens(\"ab\"), orig, merge);\n    \n    // FIXME: the below test intended to be { \"ab\" }\n    assertTokenizesTo(map, \"a b\", new String[] { \"ab\", \"ab\", \"ab\"  });\n\n    // check for lack of recursion\n    map.add(strings(\"zoo\"), tokens(\"zoo\"), orig, merge);\n    assertTokenizesTo(map, \"zoo zoo $ zoo\", new String[] { \"zoo\", \"zoo\", \"$\", \"zoo\" });\n    map.add(strings(\"zoo\"), tokens(\"zoo zoo\"), orig, merge);\n    // FIXME: the below test intended to be { \"zoo\", \"zoo\", \"zoo\", \"zoo\", \"$\", \"zoo\", \"zoo\" }\n    // maybe this was just a typo in the old test????\n    assertTokenizesTo(map, \"zoo zoo $ zoo\", new String[] { \"zoo\", \"zoo\", \"zoo\", \"zoo\", \"zoo\", \"zoo\", \"$\", \"zoo\", \"zoo\", \"zoo\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["2fd023a662cc25ae7e0ad0f33d71c476a16d0579"],"c1781d63ce2d5e979c8b3f35682b60a86f5df553":["0d3072fffb39e4aa50fce38815821919b35fc194"],"2fd023a662cc25ae7e0ad0f33d71c476a16d0579":["c1781d63ce2d5e979c8b3f35682b60a86f5df553"],"0d3072fffb39e4aa50fce38815821919b35fc194":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["0d3072fffb39e4aa50fce38815821919b35fc194"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"c1781d63ce2d5e979c8b3f35682b60a86f5df553":["2fd023a662cc25ae7e0ad0f33d71c476a16d0579"],"2fd023a662cc25ae7e0ad0f33d71c476a16d0579":["ad94625fb8d088209f46650c8097196fec67f00c"],"0d3072fffb39e4aa50fce38815821919b35fc194":["c1781d63ce2d5e979c8b3f35682b60a86f5df553"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}