{"path":"solr/core/src/test/org/apache/solr/schema/TestPointFields#doTestIntPointFieldRangeQuery(String,String,boolean).mjava","commits":[{"id":"46dc9ac8b3e748407baaef82453138ff3974480c","date":1484789241,"type":0,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#doTestIntPointFieldRangeQuery(String,String,boolean).mjava","pathOld":"/dev/null","sourceNew":"  private void doTestIntPointFieldRangeQuery(String fieldName, String type, boolean testLong) throws Exception {\n    for (int i = 0; i < 10; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), fieldName, String.valueOf(i)));\n    }\n    assertU(commit());\n    assertQ(req(\"q\", fieldName + \":[0 TO 3]\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='4']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='2']\",\n        \"//result/doc[4]/\" + type + \"[@name='\" + fieldName + \"'][.='3']\");\n    \n    assertQ(req(\"q\", fieldName + \":{0 TO 3]\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='2']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='3']\");\n    \n    assertQ(req(\"q\", fieldName + \":[0 TO 3}\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='2']\");\n    \n    assertQ(req(\"q\", fieldName + \":{0 TO 3}\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='2']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='2']\");\n    \n    assertQ(req(\"q\", fieldName + \":{0 TO *}\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='9']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\");\n    \n    assertQ(req(\"q\", fieldName + \":{* TO 3}\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\");\n    \n    assertQ(req(\"q\", fieldName + \":[* TO 3}\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\");\n    \n    assertQ(req(\"q\", fieldName + \":[* TO *}\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\",\n        \"//result/doc[10]/\" + type + \"[@name='\" + fieldName + \"'][.='9']\");\n    \n    clearIndex();\n    assertU(commit());\n    \n    String[] arr;\n    if (testLong) {\n      arr = getRandomStringArrayWithLongs(10, true);\n    } else {\n      arr = getRandomStringArrayWithInts(10, true);\n    }\n    for (int i = 0; i < arr.length; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), fieldName, arr[i]));\n    }\n    assertU(commit());\n    for (int i = 0; i < arr.length; i++) {\n      assertQ(req(\"q\", fieldName + \":[\" + arr[0] + \" TO \" + arr[i] + \"]\", \"fl\", \"id, \" + fieldName), \n          \"//*[@numFound='\" + (i + 1) + \"']\");\n      assertQ(req(\"q\", fieldName + \":{\" + arr[0] + \" TO \" + arr[i] + \"}\", \"fl\", \"id, \" + fieldName), \n          \"//*[@numFound='\" + (Math.max(0,  i-1)) + \"']\");\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["02cc739d6621fdfc3991bde01ae8ef5cbdb46925"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"90a682dc1bfd188ef61cc28373c7f5d700b4ac75","date":1485186128,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#doTestIntPointFieldRangeQuery(String,String,boolean).mjava","pathOld":"/dev/null","sourceNew":"  private void doTestIntPointFieldRangeQuery(String fieldName, String type, boolean testLong) throws Exception {\n    for (int i = 0; i < 10; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), fieldName, String.valueOf(i)));\n    }\n    assertU(commit());\n    assertQ(req(\"q\", fieldName + \":[0 TO 3]\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='4']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='2']\",\n        \"//result/doc[4]/\" + type + \"[@name='\" + fieldName + \"'][.='3']\");\n    \n    assertQ(req(\"q\", fieldName + \":{0 TO 3]\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='2']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='3']\");\n    \n    assertQ(req(\"q\", fieldName + \":[0 TO 3}\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='2']\");\n    \n    assertQ(req(\"q\", fieldName + \":{0 TO 3}\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='2']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='2']\");\n    \n    assertQ(req(\"q\", fieldName + \":{0 TO *}\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='9']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\");\n    \n    assertQ(req(\"q\", fieldName + \":{* TO 3}\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\");\n    \n    assertQ(req(\"q\", fieldName + \":[* TO 3}\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\");\n    \n    assertQ(req(\"q\", fieldName + \":[* TO *}\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\",\n        \"//result/doc[10]/\" + type + \"[@name='\" + fieldName + \"'][.='9']\");\n    \n    clearIndex();\n    assertU(commit());\n    \n    String[] arr;\n    if (testLong) {\n      arr = getRandomStringArrayWithLongs(10, true);\n    } else {\n      arr = getRandomStringArrayWithInts(10, true);\n    }\n    for (int i = 0; i < arr.length; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), fieldName, arr[i]));\n    }\n    assertU(commit());\n    for (int i = 0; i < arr.length; i++) {\n      assertQ(req(\"q\", fieldName + \":[\" + arr[0] + \" TO \" + arr[i] + \"]\", \"fl\", \"id, \" + fieldName), \n          \"//*[@numFound='\" + (i + 1) + \"']\");\n      assertQ(req(\"q\", fieldName + \":{\" + arr[0] + \" TO \" + arr[i] + \"}\", \"fl\", \"id, \" + fieldName), \n          \"//*[@numFound='\" + (Math.max(0,  i-1)) + \"']\");\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19284d685ce334cd95ff0ace2793842f84bf7383","date":1487788272,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#doTestIntPointFieldRangeQuery(String,String,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestPointFields#doTestIntPointFieldRangeQuery(String,String,boolean).mjava","sourceNew":"  private void doTestIntPointFieldRangeQuery(String fieldName, String type, boolean testLong) throws Exception {\n    for (int i = 0; i < 10; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), fieldName, String.valueOf(i)));\n    }\n    assertU(commit());\n    assertQ(req(\"q\", fieldName + \":[0 TO 3]\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='4']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='2']\",\n        \"//result/doc[4]/\" + type + \"[@name='\" + fieldName + \"'][.='3']\");\n    \n    assertQ(req(\"q\", fieldName + \":{0 TO 3]\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='2']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='3']\");\n    \n    assertQ(req(\"q\", fieldName + \":[0 TO 3}\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='2']\");\n    \n    assertQ(req(\"q\", fieldName + \":{0 TO 3}\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='2']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='2']\");\n    \n    assertQ(req(\"q\", fieldName + \":{0 TO *}\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='9']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\");\n    \n    assertQ(req(\"q\", fieldName + \":{* TO 3}\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\");\n    \n    assertQ(req(\"q\", fieldName + \":[* TO 3}\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\");\n    \n    assertQ(req(\"q\", fieldName + \":[* TO *}\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\",\n        \"//result/doc[10]/\" + type + \"[@name='\" + fieldName + \"'][.='9']\");\n    \n    assertQ(req(\"q\", fieldName + \":[0 TO 1] OR \" + fieldName + \":[8 TO 9]\" , \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='4']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='8']\",\n        \"//result/doc[4]/\" + type + \"[@name='\" + fieldName + \"'][.='9']\");\n    \n    assertQ(req(\"q\", fieldName + \":[0 TO 1] AND \" + fieldName + \":[1 TO 2]\" , \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='1']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\");\n    \n    assertQ(req(\"q\", fieldName + \":[0 TO 1] AND NOT \" + fieldName + \":[1 TO 2]\" , \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='1']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\");\n\n    clearIndex();\n    assertU(commit());\n    \n    String[] arr;\n    if (testLong) {\n      arr = getRandomStringArrayWithLongs(100, true);\n    } else {\n      arr = getRandomStringArrayWithInts(100, true);\n    }\n    for (int i = 0; i < arr.length; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), fieldName, arr[i]));\n    }\n    assertU(commit());\n    for (int i = 0; i < arr.length; i++) {\n      assertQ(req(\"q\", fieldName + \":[\" + arr[0] + \" TO \" + arr[i] + \"]\", \"fl\", \"id, \" + fieldName), \n          \"//*[@numFound='\" + (i + 1) + \"']\");\n      assertQ(req(\"q\", fieldName + \":{\" + arr[0] + \" TO \" + arr[i] + \"}\", \"fl\", \"id, \" + fieldName), \n          \"//*[@numFound='\" + (Math.max(0,  i-1)) + \"']\");\n      assertQ(req(\"q\", fieldName + \":[\" + arr[0] + \" TO \" + arr[i] + \"] AND \" + fieldName + \":\" + arr[0].replace(\"-\", \"\\\\-\"), \"fl\", \"id, \" + fieldName), \n          \"//*[@numFound='1']\");\n    }\n  }\n\n","sourceOld":"  private void doTestIntPointFieldRangeQuery(String fieldName, String type, boolean testLong) throws Exception {\n    for (int i = 0; i < 10; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), fieldName, String.valueOf(i)));\n    }\n    assertU(commit());\n    assertQ(req(\"q\", fieldName + \":[0 TO 3]\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='4']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='2']\",\n        \"//result/doc[4]/\" + type + \"[@name='\" + fieldName + \"'][.='3']\");\n    \n    assertQ(req(\"q\", fieldName + \":{0 TO 3]\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='2']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='3']\");\n    \n    assertQ(req(\"q\", fieldName + \":[0 TO 3}\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='2']\");\n    \n    assertQ(req(\"q\", fieldName + \":{0 TO 3}\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='2']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='2']\");\n    \n    assertQ(req(\"q\", fieldName + \":{0 TO *}\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='9']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\");\n    \n    assertQ(req(\"q\", fieldName + \":{* TO 3}\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\");\n    \n    assertQ(req(\"q\", fieldName + \":[* TO 3}\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\");\n    \n    assertQ(req(\"q\", fieldName + \":[* TO *}\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\",\n        \"//result/doc[10]/\" + type + \"[@name='\" + fieldName + \"'][.='9']\");\n    \n    clearIndex();\n    assertU(commit());\n    \n    String[] arr;\n    if (testLong) {\n      arr = getRandomStringArrayWithLongs(10, true);\n    } else {\n      arr = getRandomStringArrayWithInts(10, true);\n    }\n    for (int i = 0; i < arr.length; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), fieldName, arr[i]));\n    }\n    assertU(commit());\n    for (int i = 0; i < arr.length; i++) {\n      assertQ(req(\"q\", fieldName + \":[\" + arr[0] + \" TO \" + arr[i] + \"]\", \"fl\", \"id, \" + fieldName), \n          \"//*[@numFound='\" + (i + 1) + \"']\");\n      assertQ(req(\"q\", fieldName + \":{\" + arr[0] + \" TO \" + arr[i] + \"}\", \"fl\", \"id, \" + fieldName), \n          \"//*[@numFound='\" + (Math.max(0,  i-1)) + \"']\");\n    }\n  }\n\n","bugFix":null,"bugIntro":["02cc739d6621fdfc3991bde01ae8ef5cbdb46925"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"330274305237bd6f93e7ee021669f797394127b1","date":1489510162,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#doTestIntPointFieldRangeQuery(String,String,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestPointFields#doTestIntPointFieldRangeQuery(String,String,boolean).mjava","sourceNew":"  private void doTestIntPointFieldRangeQuery(String fieldName, String type, boolean testLong) throws Exception {\n    for (int i = 9; i >= 0; i--) {\n      assertU(adoc(\"id\", String.valueOf(i), fieldName, String.valueOf(i)));\n    }\n    assertU(commit());\n    assertQ(req(\"q\", fieldName + \":[0 TO 3]\", \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='4']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='2']\",\n        \"//result/doc[4]/\" + type + \"[@name='\" + fieldName + \"'][.='3']\");\n    \n    assertQ(req(\"q\", fieldName + \":{0 TO 3]\", \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='2']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='3']\");\n    \n    assertQ(req(\"q\", fieldName + \":[0 TO 3}\", \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='2']\");\n    \n    assertQ(req(\"q\", fieldName + \":{0 TO 3}\", \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='2']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='2']\");\n    \n    assertQ(req(\"q\", fieldName + \":{0 TO *}\", \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='9']\",\n        \"0=count(//result/doc/\" + type + \"[@name='\" + fieldName + \"'][.='0'])\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\");\n    \n    assertQ(req(\"q\", fieldName + \":{* TO 3}\", \"fl\", \"id, \" + fieldName, \"sort\", \"id desc\"), \n        \"//*[@numFound='3']\",\n        \"0=count(//result/doc/\" + type + \"[@name='\" + fieldName + \"'][.='3'])\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='2']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\");\n    \n    assertQ(req(\"q\", fieldName + \":[* TO 3}\", \"fl\", \"id, \" + fieldName, \"sort\", \"id desc\"), \n        \"//*[@numFound='3']\",\n        \"0=count(//result/doc/\" + type + \"[@name='\" + fieldName + \"'][.='3'])\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='2']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\");\n    \n    assertQ(req(\"q\", fieldName + \":[* TO *}\", \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\",\n        \"//result/doc[10]/\" + type + \"[@name='\" + fieldName + \"'][.='9']\");\n    \n    assertQ(req(\"q\", fieldName + \":[0 TO 1] OR \" + fieldName + \":[8 TO 9]\" , \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='4']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='8']\",\n        \"//result/doc[4]/\" + type + \"[@name='\" + fieldName + \"'][.='9']\");\n    \n    assertQ(req(\"q\", fieldName + \":[0 TO 1] AND \" + fieldName + \":[1 TO 2]\" , \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='1']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\");\n    \n    assertQ(req(\"q\", fieldName + \":[0 TO 1] AND NOT \" + fieldName + \":[1 TO 2]\" , \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='1']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\");\n\n    clearIndex();\n    assertU(commit());\n    \n    String[] arr;\n    if (testLong) {\n      arr = getRandomStringArrayWithLongs(100, true);\n    } else {\n      arr = getRandomStringArrayWithInts(100, true);\n    }\n    for (int i = 0; i < arr.length; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), fieldName, arr[i]));\n    }\n    assertU(commit());\n    for (int i = 0; i < arr.length; i++) {\n      assertQ(req(\"q\", fieldName + \":[\" + arr[0] + \" TO \" + arr[i] + \"]\", \"fl\", \"id, \" + fieldName), \n          \"//*[@numFound='\" + (i + 1) + \"']\");\n      assertQ(req(\"q\", fieldName + \":{\" + arr[0] + \" TO \" + arr[i] + \"}\", \"fl\", \"id, \" + fieldName), \n          \"//*[@numFound='\" + (Math.max(0,  i-1)) + \"']\");\n      assertQ(req(\"q\", fieldName + \":[\" + arr[0] + \" TO \" + arr[i] + \"] AND \" + fieldName + \":\" + arr[0].replace(\"-\", \"\\\\-\"), \"fl\", \"id, \" + fieldName), \n          \"//*[@numFound='1']\");\n    }\n  }\n\n","sourceOld":"  private void doTestIntPointFieldRangeQuery(String fieldName, String type, boolean testLong) throws Exception {\n    for (int i = 0; i < 10; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), fieldName, String.valueOf(i)));\n    }\n    assertU(commit());\n    assertQ(req(\"q\", fieldName + \":[0 TO 3]\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='4']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='2']\",\n        \"//result/doc[4]/\" + type + \"[@name='\" + fieldName + \"'][.='3']\");\n    \n    assertQ(req(\"q\", fieldName + \":{0 TO 3]\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='2']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='3']\");\n    \n    assertQ(req(\"q\", fieldName + \":[0 TO 3}\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='2']\");\n    \n    assertQ(req(\"q\", fieldName + \":{0 TO 3}\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='2']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='2']\");\n    \n    assertQ(req(\"q\", fieldName + \":{0 TO *}\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='9']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\");\n    \n    assertQ(req(\"q\", fieldName + \":{* TO 3}\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\");\n    \n    assertQ(req(\"q\", fieldName + \":[* TO 3}\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\");\n    \n    assertQ(req(\"q\", fieldName + \":[* TO *}\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\",\n        \"//result/doc[10]/\" + type + \"[@name='\" + fieldName + \"'][.='9']\");\n    \n    assertQ(req(\"q\", fieldName + \":[0 TO 1] OR \" + fieldName + \":[8 TO 9]\" , \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='4']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='8']\",\n        \"//result/doc[4]/\" + type + \"[@name='\" + fieldName + \"'][.='9']\");\n    \n    assertQ(req(\"q\", fieldName + \":[0 TO 1] AND \" + fieldName + \":[1 TO 2]\" , \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='1']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\");\n    \n    assertQ(req(\"q\", fieldName + \":[0 TO 1] AND NOT \" + fieldName + \":[1 TO 2]\" , \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='1']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\");\n\n    clearIndex();\n    assertU(commit());\n    \n    String[] arr;\n    if (testLong) {\n      arr = getRandomStringArrayWithLongs(100, true);\n    } else {\n      arr = getRandomStringArrayWithInts(100, true);\n    }\n    for (int i = 0; i < arr.length; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), fieldName, arr[i]));\n    }\n    assertU(commit());\n    for (int i = 0; i < arr.length; i++) {\n      assertQ(req(\"q\", fieldName + \":[\" + arr[0] + \" TO \" + arr[i] + \"]\", \"fl\", \"id, \" + fieldName), \n          \"//*[@numFound='\" + (i + 1) + \"']\");\n      assertQ(req(\"q\", fieldName + \":{\" + arr[0] + \" TO \" + arr[i] + \"}\", \"fl\", \"id, \" + fieldName), \n          \"//*[@numFound='\" + (Math.max(0,  i-1)) + \"']\");\n      assertQ(req(\"q\", fieldName + \":[\" + arr[0] + \" TO \" + arr[i] + \"] AND \" + fieldName + \":\" + arr[0].replace(\"-\", \"\\\\-\"), \"fl\", \"id, \" + fieldName), \n          \"//*[@numFound='1']\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"02cc739d6621fdfc3991bde01ae8ef5cbdb46925","date":1489651910,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#doTestIntPointFieldRangeQuery(String,String,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestPointFields#doTestIntPointFieldRangeQuery(String,String,boolean).mjava","sourceNew":"  private void doTestIntPointFieldRangeQuery(String fieldName, String type, boolean testLong) throws Exception {\n    for (int i = 9; i >= 0; i--) {\n      assertU(adoc(\"id\", String.valueOf(i), fieldName, String.valueOf(i)));\n    }\n    assertU(commit());\n    assertQ(req(\"q\", fieldName + \":[0 TO 3]\", \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='4']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='2']\",\n        \"//result/doc[4]/\" + type + \"[@name='\" + fieldName + \"'][.='3']\");\n    \n    assertQ(req(\"q\", fieldName + \":{0 TO 3]\", \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='2']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='3']\");\n    \n    assertQ(req(\"q\", fieldName + \":[0 TO 3}\", \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='2']\");\n    \n    assertQ(req(\"q\", fieldName + \":{0 TO 3}\", \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='2']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='2']\");\n    \n    assertQ(req(\"q\", fieldName + \":{0 TO *}\", \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='9']\",\n        \"0=count(//result/doc/\" + type + \"[@name='\" + fieldName + \"'][.='0'])\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\");\n    \n    assertQ(req(\"q\", fieldName + \":{* TO 3}\", \"fl\", \"id, \" + fieldName, \"sort\", \"id desc\"), \n        \"//*[@numFound='3']\",\n        \"0=count(//result/doc/\" + type + \"[@name='\" + fieldName + \"'][.='3'])\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='2']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\");\n    \n    assertQ(req(\"q\", fieldName + \":[* TO 3}\", \"fl\", \"id, \" + fieldName, \"sort\", \"id desc\"), \n        \"//*[@numFound='3']\",\n        \"0=count(//result/doc/\" + type + \"[@name='\" + fieldName + \"'][.='3'])\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='2']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\");\n    \n    assertQ(req(\"q\", fieldName + \":[* TO *}\", \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\",\n        \"//result/doc[10]/\" + type + \"[@name='\" + fieldName + \"'][.='9']\");\n    \n    assertQ(req(\"q\", fieldName + \":[0 TO 1] OR \" + fieldName + \":[8 TO 9]\" , \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='4']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='8']\",\n        \"//result/doc[4]/\" + type + \"[@name='\" + fieldName + \"'][.='9']\");\n    \n    assertQ(req(\"q\", fieldName + \":[0 TO 1] AND \" + fieldName + \":[1 TO 2]\" , \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='1']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\");\n    \n    assertQ(req(\"q\", fieldName + \":[0 TO 1] AND NOT \" + fieldName + \":[1 TO 2]\" , \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='1']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\");\n\n    clearIndex();\n    assertU(commit());\n    \n    String[] arr;\n    if (testLong) {\n      arr = getRandomStringArrayWithLongs(100, true);\n    } else {\n      arr = getRandomStringArrayWithInts(100, true);\n    }\n    for (int i = 0; i < arr.length; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), fieldName, arr[i]));\n    }\n    assertU(commit());\n    for (int i = 0; i < arr.length; i++) {\n      assertQ(req(\"q\", fieldName + \":[\" + arr[0] + \" TO \" + arr[i] + \"]\", \"fl\", \"id, \" + fieldName), \n          \"//*[@numFound='\" + (i + 1) + \"']\");\n      assertQ(req(\"q\", fieldName + \":{\" + arr[0] + \" TO \" + arr[i] + \"}\", \"fl\", \"id, \" + fieldName), \n          \"//*[@numFound='\" + (Math.max(0,  i-1)) + \"']\");\n      assertQ(req(\"q\", fieldName + \":[\" + arr[0] + \" TO \" + arr[i] + \"] AND \" + fieldName + \":\" + arr[0].replace(\"-\", \"\\\\-\"), \"fl\", \"id, \" + fieldName), \n          \"//*[@numFound='1']\");\n    }\n  }\n\n","sourceOld":"  private void doTestIntPointFieldRangeQuery(String fieldName, String type, boolean testLong) throws Exception {\n    for (int i = 0; i < 10; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), fieldName, String.valueOf(i)));\n    }\n    assertU(commit());\n    assertQ(req(\"q\", fieldName + \":[0 TO 3]\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='4']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='2']\",\n        \"//result/doc[4]/\" + type + \"[@name='\" + fieldName + \"'][.='3']\");\n    \n    assertQ(req(\"q\", fieldName + \":{0 TO 3]\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='2']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='3']\");\n    \n    assertQ(req(\"q\", fieldName + \":[0 TO 3}\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='2']\");\n    \n    assertQ(req(\"q\", fieldName + \":{0 TO 3}\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='2']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='2']\");\n    \n    assertQ(req(\"q\", fieldName + \":{0 TO *}\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='9']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\");\n    \n    assertQ(req(\"q\", fieldName + \":{* TO 3}\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\");\n    \n    assertQ(req(\"q\", fieldName + \":[* TO 3}\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\");\n    \n    assertQ(req(\"q\", fieldName + \":[* TO *}\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\",\n        \"//result/doc[10]/\" + type + \"[@name='\" + fieldName + \"'][.='9']\");\n    \n    assertQ(req(\"q\", fieldName + \":[0 TO 1] OR \" + fieldName + \":[8 TO 9]\" , \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='4']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='8']\",\n        \"//result/doc[4]/\" + type + \"[@name='\" + fieldName + \"'][.='9']\");\n    \n    assertQ(req(\"q\", fieldName + \":[0 TO 1] AND \" + fieldName + \":[1 TO 2]\" , \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='1']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\");\n    \n    assertQ(req(\"q\", fieldName + \":[0 TO 1] AND NOT \" + fieldName + \":[1 TO 2]\" , \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='1']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\");\n\n    clearIndex();\n    assertU(commit());\n    \n    String[] arr;\n    if (testLong) {\n      arr = getRandomStringArrayWithLongs(100, true);\n    } else {\n      arr = getRandomStringArrayWithInts(100, true);\n    }\n    for (int i = 0; i < arr.length; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), fieldName, arr[i]));\n    }\n    assertU(commit());\n    for (int i = 0; i < arr.length; i++) {\n      assertQ(req(\"q\", fieldName + \":[\" + arr[0] + \" TO \" + arr[i] + \"]\", \"fl\", \"id, \" + fieldName), \n          \"//*[@numFound='\" + (i + 1) + \"']\");\n      assertQ(req(\"q\", fieldName + \":{\" + arr[0] + \" TO \" + arr[i] + \"}\", \"fl\", \"id, \" + fieldName), \n          \"//*[@numFound='\" + (Math.max(0,  i-1)) + \"']\");\n      assertQ(req(\"q\", fieldName + \":[\" + arr[0] + \" TO \" + arr[i] + \"] AND \" + fieldName + \":\" + arr[0].replace(\"-\", \"\\\\-\"), \"fl\", \"id, \" + fieldName), \n          \"//*[@numFound='1']\");\n    }\n  }\n\n","bugFix":["46dc9ac8b3e748407baaef82453138ff3974480c","19284d685ce334cd95ff0ace2793842f84bf7383"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab68488225b6a6c357dda72ed11dedca9914a192","date":1490013111,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#doTestIntPointFieldRangeQuery(String,String,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestPointFields#doTestIntPointFieldRangeQuery(String,String,boolean).mjava","sourceNew":"  private void doTestIntPointFieldRangeQuery(String fieldName, String type, boolean testLong) throws Exception {\n    for (int i = 9; i >= 0; i--) {\n      assertU(adoc(\"id\", String.valueOf(i), fieldName, String.valueOf(i)));\n    }\n    assertU(commit());\n    assertQ(req(\"q\", fieldName + \":[0 TO 3]\", \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='4']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='2']\",\n        \"//result/doc[4]/\" + type + \"[@name='\" + fieldName + \"'][.='3']\");\n    \n    assertQ(req(\"q\", fieldName + \":{0 TO 3]\", \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='2']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='3']\");\n    \n    assertQ(req(\"q\", fieldName + \":[0 TO 3}\", \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='2']\");\n    \n    assertQ(req(\"q\", fieldName + \":{0 TO 3}\", \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='2']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='2']\");\n    \n    assertQ(req(\"q\", fieldName + \":{0 TO *}\", \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='9']\",\n        \"0=count(//result/doc/\" + type + \"[@name='\" + fieldName + \"'][.='0'])\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\");\n    \n    assertQ(req(\"q\", fieldName + \":{* TO 3}\", \"fl\", \"id, \" + fieldName, \"sort\", \"id desc\"), \n        \"//*[@numFound='3']\",\n        \"0=count(//result/doc/\" + type + \"[@name='\" + fieldName + \"'][.='3'])\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='2']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\");\n    \n    assertQ(req(\"q\", fieldName + \":[* TO 3}\", \"fl\", \"id, \" + fieldName, \"sort\", \"id desc\"), \n        \"//*[@numFound='3']\",\n        \"0=count(//result/doc/\" + type + \"[@name='\" + fieldName + \"'][.='3'])\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='2']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\");\n    \n    assertQ(req(\"q\", fieldName + \":[* TO *}\", \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\",\n        \"//result/doc[10]/\" + type + \"[@name='\" + fieldName + \"'][.='9']\");\n    \n    assertQ(req(\"q\", fieldName + \":[0 TO 1] OR \" + fieldName + \":[8 TO 9]\" , \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='4']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='8']\",\n        \"//result/doc[4]/\" + type + \"[@name='\" + fieldName + \"'][.='9']\");\n    \n    assertQ(req(\"q\", fieldName + \":[0 TO 1] AND \" + fieldName + \":[1 TO 2]\" , \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='1']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\");\n    \n    assertQ(req(\"q\", fieldName + \":[0 TO 1] AND NOT \" + fieldName + \":[1 TO 2]\" , \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='1']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\");\n\n    clearIndex();\n    assertU(commit());\n    \n    String[] arr;\n    if (testLong) {\n      arr = getRandomStringArrayWithLongs(100, true);\n    } else {\n      arr = getRandomStringArrayWithInts(100, true);\n    }\n    for (int i = 0; i < arr.length; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), fieldName, arr[i]));\n    }\n    assertU(commit());\n    for (int i = 0; i < arr.length; i++) {\n      assertQ(req(\"q\", fieldName + \":[\" + arr[0] + \" TO \" + arr[i] + \"]\", \"fl\", \"id, \" + fieldName), \n          \"//*[@numFound='\" + (i + 1) + \"']\");\n      assertQ(req(\"q\", fieldName + \":{\" + arr[0] + \" TO \" + arr[i] + \"}\", \"fl\", \"id, \" + fieldName), \n          \"//*[@numFound='\" + (Math.max(0,  i-1)) + \"']\");\n      assertQ(req(\"q\", fieldName + \":[\" + arr[0] + \" TO \" + arr[i] + \"] AND \" + fieldName + \":\" + arr[0].replace(\"-\", \"\\\\-\"), \"fl\", \"id, \" + fieldName), \n          \"//*[@numFound='1']\");\n    }\n  }\n\n","sourceOld":"  private void doTestIntPointFieldRangeQuery(String fieldName, String type, boolean testLong) throws Exception {\n    for (int i = 0; i < 10; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), fieldName, String.valueOf(i)));\n    }\n    assertU(commit());\n    assertQ(req(\"q\", fieldName + \":[0 TO 3]\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='4']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='2']\",\n        \"//result/doc[4]/\" + type + \"[@name='\" + fieldName + \"'][.='3']\");\n    \n    assertQ(req(\"q\", fieldName + \":{0 TO 3]\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='2']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='3']\");\n    \n    assertQ(req(\"q\", fieldName + \":[0 TO 3}\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='2']\");\n    \n    assertQ(req(\"q\", fieldName + \":{0 TO 3}\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='2']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='2']\");\n    \n    assertQ(req(\"q\", fieldName + \":{0 TO *}\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='9']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\");\n    \n    assertQ(req(\"q\", fieldName + \":{* TO 3}\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\");\n    \n    assertQ(req(\"q\", fieldName + \":[* TO 3}\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\");\n    \n    assertQ(req(\"q\", fieldName + \":[* TO *}\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\",\n        \"//result/doc[10]/\" + type + \"[@name='\" + fieldName + \"'][.='9']\");\n    \n    assertQ(req(\"q\", fieldName + \":[0 TO 1] OR \" + fieldName + \":[8 TO 9]\" , \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='4']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='8']\",\n        \"//result/doc[4]/\" + type + \"[@name='\" + fieldName + \"'][.='9']\");\n    \n    assertQ(req(\"q\", fieldName + \":[0 TO 1] AND \" + fieldName + \":[1 TO 2]\" , \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='1']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\");\n    \n    assertQ(req(\"q\", fieldName + \":[0 TO 1] AND NOT \" + fieldName + \":[1 TO 2]\" , \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='1']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\");\n\n    clearIndex();\n    assertU(commit());\n    \n    String[] arr;\n    if (testLong) {\n      arr = getRandomStringArrayWithLongs(100, true);\n    } else {\n      arr = getRandomStringArrayWithInts(100, true);\n    }\n    for (int i = 0; i < arr.length; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), fieldName, arr[i]));\n    }\n    assertU(commit());\n    for (int i = 0; i < arr.length; i++) {\n      assertQ(req(\"q\", fieldName + \":[\" + arr[0] + \" TO \" + arr[i] + \"]\", \"fl\", \"id, \" + fieldName), \n          \"//*[@numFound='\" + (i + 1) + \"']\");\n      assertQ(req(\"q\", fieldName + \":{\" + arr[0] + \" TO \" + arr[i] + \"}\", \"fl\", \"id, \" + fieldName), \n          \"//*[@numFound='\" + (Math.max(0,  i-1)) + \"']\");\n      assertQ(req(\"q\", fieldName + \":[\" + arr[0] + \" TO \" + arr[i] + \"] AND \" + fieldName + \":\" + arr[0].replace(\"-\", \"\\\\-\"), \"fl\", \"id, \" + fieldName), \n          \"//*[@numFound='1']\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89c0b1a887eabf9facdf2c5d2df5e284c6d6daa","date":1496877670,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#doTestIntPointFieldRangeQuery(String,String,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestPointFields#doTestIntPointFieldRangeQuery(String,String,boolean).mjava","sourceNew":"  private void doTestIntPointFieldRangeQuery(String fieldName, String type, boolean testLong) throws Exception {\n    for (int i = 9; i >= 0; i--) {\n      assertU(adoc(\"id\", String.valueOf(i), fieldName, String.valueOf(i)));\n    }\n    assertU(commit());\n    assertQ(req(\"q\", fieldName + \":[0 TO 3]\", \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='4']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='2']\",\n        \"//result/doc[4]/\" + type + \"[@name='\" + fieldName + \"'][.='3']\");\n    \n    assertQ(req(\"q\", fieldName + \":{0 TO 3]\", \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='2']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='3']\");\n    \n    assertQ(req(\"q\", fieldName + \":[0 TO 3}\", \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='2']\");\n    \n    assertQ(req(\"q\", fieldName + \":{0 TO 3}\", \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='2']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='2']\");\n    \n    assertQ(req(\"q\", fieldName + \":{0 TO *}\", \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='9']\",\n        \"0=count(//result/doc/\" + type + \"[@name='\" + fieldName + \"'][.='0'])\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\");\n    \n    assertQ(req(\"q\", fieldName + \":{* TO 3}\", \"fl\", \"id, \" + fieldName, \"sort\", \"id desc\"), \n        \"//*[@numFound='3']\",\n        \"0=count(//result/doc/\" + type + \"[@name='\" + fieldName + \"'][.='3'])\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='2']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\");\n    \n    assertQ(req(\"q\", fieldName + \":[* TO 3}\", \"fl\", \"id, \" + fieldName, \"sort\", \"id desc\"), \n        \"//*[@numFound='3']\",\n        \"0=count(//result/doc/\" + type + \"[@name='\" + fieldName + \"'][.='3'])\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='2']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\");\n    \n    assertQ(req(\"q\", fieldName + \":[* TO *}\", \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\",\n        \"//result/doc[10]/\" + type + \"[@name='\" + fieldName + \"'][.='9']\");\n    \n    assertQ(req(\"q\", fieldName + \":[0 TO 1] OR \" + fieldName + \":[8 TO 9]\" , \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='4']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='8']\",\n        \"//result/doc[4]/\" + type + \"[@name='\" + fieldName + \"'][.='9']\");\n    \n    assertQ(req(\"q\", fieldName + \":[0 TO 1] AND \" + fieldName + \":[1 TO 2]\" , \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='1']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\");\n    \n    assertQ(req(\"q\", fieldName + \":[0 TO 1] AND NOT \" + fieldName + \":[1 TO 2]\" , \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='1']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\");\n\n    clearIndex();\n    assertU(commit());\n    \n    String[] arr;\n    if (testLong) {\n      arr = toAscendingStringArray(getRandomLongs(100, false), true);\n    } else {\n      arr = toAscendingStringArray(getRandomInts(100, false), true);\n    }\n    for (int i = 0; i < arr.length; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), fieldName, arr[i]));\n    }\n    assertU(commit());\n    for (int i = 0; i < arr.length; i++) {\n      assertQ(req(\"q\", fieldName + \":[\" + arr[0] + \" TO \" + arr[i] + \"]\", \"fl\", \"id, \" + fieldName), \n          \"//*[@numFound='\" + (i + 1) + \"']\");\n      assertQ(req(\"q\", fieldName + \":{\" + arr[0] + \" TO \" + arr[i] + \"}\", \"fl\", \"id, \" + fieldName), \n          \"//*[@numFound='\" + (Math.max(0,  i-1)) + \"']\");\n      assertQ(req(\"q\", fieldName + \":[\" + arr[0] + \" TO \" + arr[i] + \"] AND \" + fieldName + \":\" + arr[0].replace(\"-\", \"\\\\-\"), \"fl\", \"id, \" + fieldName), \n          \"//*[@numFound='1']\");\n    }\n  }\n\n","sourceOld":"  private void doTestIntPointFieldRangeQuery(String fieldName, String type, boolean testLong) throws Exception {\n    for (int i = 9; i >= 0; i--) {\n      assertU(adoc(\"id\", String.valueOf(i), fieldName, String.valueOf(i)));\n    }\n    assertU(commit());\n    assertQ(req(\"q\", fieldName + \":[0 TO 3]\", \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='4']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='2']\",\n        \"//result/doc[4]/\" + type + \"[@name='\" + fieldName + \"'][.='3']\");\n    \n    assertQ(req(\"q\", fieldName + \":{0 TO 3]\", \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='2']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='3']\");\n    \n    assertQ(req(\"q\", fieldName + \":[0 TO 3}\", \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='2']\");\n    \n    assertQ(req(\"q\", fieldName + \":{0 TO 3}\", \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='2']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='2']\");\n    \n    assertQ(req(\"q\", fieldName + \":{0 TO *}\", \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='9']\",\n        \"0=count(//result/doc/\" + type + \"[@name='\" + fieldName + \"'][.='0'])\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\");\n    \n    assertQ(req(\"q\", fieldName + \":{* TO 3}\", \"fl\", \"id, \" + fieldName, \"sort\", \"id desc\"), \n        \"//*[@numFound='3']\",\n        \"0=count(//result/doc/\" + type + \"[@name='\" + fieldName + \"'][.='3'])\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='2']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\");\n    \n    assertQ(req(\"q\", fieldName + \":[* TO 3}\", \"fl\", \"id, \" + fieldName, \"sort\", \"id desc\"), \n        \"//*[@numFound='3']\",\n        \"0=count(//result/doc/\" + type + \"[@name='\" + fieldName + \"'][.='3'])\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='2']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\");\n    \n    assertQ(req(\"q\", fieldName + \":[* TO *}\", \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\",\n        \"//result/doc[10]/\" + type + \"[@name='\" + fieldName + \"'][.='9']\");\n    \n    assertQ(req(\"q\", fieldName + \":[0 TO 1] OR \" + fieldName + \":[8 TO 9]\" , \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='4']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='8']\",\n        \"//result/doc[4]/\" + type + \"[@name='\" + fieldName + \"'][.='9']\");\n    \n    assertQ(req(\"q\", fieldName + \":[0 TO 1] AND \" + fieldName + \":[1 TO 2]\" , \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='1']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\");\n    \n    assertQ(req(\"q\", fieldName + \":[0 TO 1] AND NOT \" + fieldName + \":[1 TO 2]\" , \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='1']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\");\n\n    clearIndex();\n    assertU(commit());\n    \n    String[] arr;\n    if (testLong) {\n      arr = getRandomStringArrayWithLongs(100, true);\n    } else {\n      arr = getRandomStringArrayWithInts(100, true);\n    }\n    for (int i = 0; i < arr.length; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), fieldName, arr[i]));\n    }\n    assertU(commit());\n    for (int i = 0; i < arr.length; i++) {\n      assertQ(req(\"q\", fieldName + \":[\" + arr[0] + \" TO \" + arr[i] + \"]\", \"fl\", \"id, \" + fieldName), \n          \"//*[@numFound='\" + (i + 1) + \"']\");\n      assertQ(req(\"q\", fieldName + \":{\" + arr[0] + \" TO \" + arr[i] + \"}\", \"fl\", \"id, \" + fieldName), \n          \"//*[@numFound='\" + (Math.max(0,  i-1)) + \"']\");\n      assertQ(req(\"q\", fieldName + \":[\" + arr[0] + \" TO \" + arr[i] + \"] AND \" + fieldName + \":\" + arr[0].replace(\"-\", \"\\\\-\"), \"fl\", \"id, \" + fieldName), \n          \"//*[@numFound='1']\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f344bb33ca91f48e99c061980115b46fa84fc8f5","date":1496903283,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#doTestIntPointFieldRangeQuery(String,String,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestPointFields#doTestIntPointFieldRangeQuery(String,String,boolean).mjava","sourceNew":"  private void doTestIntPointFieldRangeQuery(String fieldName, String type, boolean testLong) throws Exception {\n    for (int i = 9; i >= 0; i--) {\n      assertU(adoc(\"id\", String.valueOf(i), fieldName, String.valueOf(i)));\n    }\n    assertU(commit());\n    assertQ(req(\"q\", fieldName + \":[0 TO 3]\", \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='4']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='2']\",\n        \"//result/doc[4]/\" + type + \"[@name='\" + fieldName + \"'][.='3']\");\n    \n    assertQ(req(\"q\", fieldName + \":{0 TO 3]\", \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='2']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='3']\");\n    \n    assertQ(req(\"q\", fieldName + \":[0 TO 3}\", \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='2']\");\n    \n    assertQ(req(\"q\", fieldName + \":{0 TO 3}\", \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='2']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='2']\");\n    \n    assertQ(req(\"q\", fieldName + \":{0 TO *}\", \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='9']\",\n        \"0=count(//result/doc/\" + type + \"[@name='\" + fieldName + \"'][.='0'])\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\");\n    \n    assertQ(req(\"q\", fieldName + \":{* TO 3}\", \"fl\", \"id, \" + fieldName, \"sort\", \"id desc\"), \n        \"//*[@numFound='3']\",\n        \"0=count(//result/doc/\" + type + \"[@name='\" + fieldName + \"'][.='3'])\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='2']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\");\n    \n    assertQ(req(\"q\", fieldName + \":[* TO 3}\", \"fl\", \"id, \" + fieldName, \"sort\", \"id desc\"), \n        \"//*[@numFound='3']\",\n        \"0=count(//result/doc/\" + type + \"[@name='\" + fieldName + \"'][.='3'])\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='2']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\");\n    \n    assertQ(req(\"q\", fieldName + \":[* TO *}\", \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\",\n        \"//result/doc[10]/\" + type + \"[@name='\" + fieldName + \"'][.='9']\");\n    \n    assertQ(req(\"q\", fieldName + \":[0 TO 1] OR \" + fieldName + \":[8 TO 9]\" , \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='4']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='8']\",\n        \"//result/doc[4]/\" + type + \"[@name='\" + fieldName + \"'][.='9']\");\n    \n    assertQ(req(\"q\", fieldName + \":[0 TO 1] AND \" + fieldName + \":[1 TO 2]\" , \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='1']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\");\n    \n    assertQ(req(\"q\", fieldName + \":[0 TO 1] AND NOT \" + fieldName + \":[1 TO 2]\" , \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='1']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\");\n\n    clearIndex();\n    assertU(commit());\n    \n    String[] arr;\n    if (testLong) {\n      arr = toAscendingStringArray(getRandomLongs(100, false), true);\n    } else {\n      arr = toAscendingStringArray(getRandomInts(100, false), true);\n    }\n    for (int i = 0; i < arr.length; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), fieldName, arr[i]));\n    }\n    assertU(commit());\n    for (int i = 0; i < arr.length; i++) {\n      assertQ(req(\"q\", fieldName + \":[\" + arr[0] + \" TO \" + arr[i] + \"]\", \"fl\", \"id, \" + fieldName), \n          \"//*[@numFound='\" + (i + 1) + \"']\");\n      assertQ(req(\"q\", fieldName + \":{\" + arr[0] + \" TO \" + arr[i] + \"}\", \"fl\", \"id, \" + fieldName), \n          \"//*[@numFound='\" + (Math.max(0,  i-1)) + \"']\");\n      assertQ(req(\"q\", fieldName + \":[\" + arr[0] + \" TO \" + arr[i] + \"] AND \" + fieldName + \":\" + arr[0].replace(\"-\", \"\\\\-\"), \"fl\", \"id, \" + fieldName), \n          \"//*[@numFound='1']\");\n    }\n  }\n\n","sourceOld":"  private void doTestIntPointFieldRangeQuery(String fieldName, String type, boolean testLong) throws Exception {\n    for (int i = 9; i >= 0; i--) {\n      assertU(adoc(\"id\", String.valueOf(i), fieldName, String.valueOf(i)));\n    }\n    assertU(commit());\n    assertQ(req(\"q\", fieldName + \":[0 TO 3]\", \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='4']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='2']\",\n        \"//result/doc[4]/\" + type + \"[@name='\" + fieldName + \"'][.='3']\");\n    \n    assertQ(req(\"q\", fieldName + \":{0 TO 3]\", \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='2']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='3']\");\n    \n    assertQ(req(\"q\", fieldName + \":[0 TO 3}\", \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='2']\");\n    \n    assertQ(req(\"q\", fieldName + \":{0 TO 3}\", \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='2']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='2']\");\n    \n    assertQ(req(\"q\", fieldName + \":{0 TO *}\", \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='9']\",\n        \"0=count(//result/doc/\" + type + \"[@name='\" + fieldName + \"'][.='0'])\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\");\n    \n    assertQ(req(\"q\", fieldName + \":{* TO 3}\", \"fl\", \"id, \" + fieldName, \"sort\", \"id desc\"), \n        \"//*[@numFound='3']\",\n        \"0=count(//result/doc/\" + type + \"[@name='\" + fieldName + \"'][.='3'])\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='2']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\");\n    \n    assertQ(req(\"q\", fieldName + \":[* TO 3}\", \"fl\", \"id, \" + fieldName, \"sort\", \"id desc\"), \n        \"//*[@numFound='3']\",\n        \"0=count(//result/doc/\" + type + \"[@name='\" + fieldName + \"'][.='3'])\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='2']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\");\n    \n    assertQ(req(\"q\", fieldName + \":[* TO *}\", \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\",\n        \"//result/doc[10]/\" + type + \"[@name='\" + fieldName + \"'][.='9']\");\n    \n    assertQ(req(\"q\", fieldName + \":[0 TO 1] OR \" + fieldName + \":[8 TO 9]\" , \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='4']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='8']\",\n        \"//result/doc[4]/\" + type + \"[@name='\" + fieldName + \"'][.='9']\");\n    \n    assertQ(req(\"q\", fieldName + \":[0 TO 1] AND \" + fieldName + \":[1 TO 2]\" , \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='1']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\");\n    \n    assertQ(req(\"q\", fieldName + \":[0 TO 1] AND NOT \" + fieldName + \":[1 TO 2]\" , \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='1']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\");\n\n    clearIndex();\n    assertU(commit());\n    \n    String[] arr;\n    if (testLong) {\n      arr = getRandomStringArrayWithLongs(100, true);\n    } else {\n      arr = getRandomStringArrayWithInts(100, true);\n    }\n    for (int i = 0; i < arr.length; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), fieldName, arr[i]));\n    }\n    assertU(commit());\n    for (int i = 0; i < arr.length; i++) {\n      assertQ(req(\"q\", fieldName + \":[\" + arr[0] + \" TO \" + arr[i] + \"]\", \"fl\", \"id, \" + fieldName), \n          \"//*[@numFound='\" + (i + 1) + \"']\");\n      assertQ(req(\"q\", fieldName + \":{\" + arr[0] + \" TO \" + arr[i] + \"}\", \"fl\", \"id, \" + fieldName), \n          \"//*[@numFound='\" + (Math.max(0,  i-1)) + \"']\");\n      assertQ(req(\"q\", fieldName + \":[\" + arr[0] + \" TO \" + arr[i] + \"] AND \" + fieldName + \":\" + arr[0].replace(\"-\", \"\\\\-\"), \"fl\", \"id, \" + fieldName), \n          \"//*[@numFound='1']\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#doTestIntPointFieldRangeQuery(String,String,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestPointFields#doTestIntPointFieldRangeQuery(String,String,boolean).mjava","sourceNew":"  private void doTestIntPointFieldRangeQuery(String fieldName, String type, boolean testLong) throws Exception {\n    for (int i = 9; i >= 0; i--) {\n      assertU(adoc(\"id\", String.valueOf(i), fieldName, String.valueOf(i)));\n    }\n    assertU(commit());\n    assertQ(req(\"q\", fieldName + \":[0 TO 3]\", \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='4']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='2']\",\n        \"//result/doc[4]/\" + type + \"[@name='\" + fieldName + \"'][.='3']\");\n    \n    assertQ(req(\"q\", fieldName + \":{0 TO 3]\", \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='2']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='3']\");\n    \n    assertQ(req(\"q\", fieldName + \":[0 TO 3}\", \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='2']\");\n    \n    assertQ(req(\"q\", fieldName + \":{0 TO 3}\", \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='2']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='2']\");\n    \n    assertQ(req(\"q\", fieldName + \":{0 TO *}\", \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='9']\",\n        \"0=count(//result/doc/\" + type + \"[@name='\" + fieldName + \"'][.='0'])\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\");\n    \n    assertQ(req(\"q\", fieldName + \":{* TO 3}\", \"fl\", \"id, \" + fieldName, \"sort\", \"id desc\"), \n        \"//*[@numFound='3']\",\n        \"0=count(//result/doc/\" + type + \"[@name='\" + fieldName + \"'][.='3'])\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='2']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\");\n    \n    assertQ(req(\"q\", fieldName + \":[* TO 3}\", \"fl\", \"id, \" + fieldName, \"sort\", \"id desc\"), \n        \"//*[@numFound='3']\",\n        \"0=count(//result/doc/\" + type + \"[@name='\" + fieldName + \"'][.='3'])\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='2']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\");\n    \n    assertQ(req(\"q\", fieldName + \":[* TO *}\", \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\",\n        \"//result/doc[10]/\" + type + \"[@name='\" + fieldName + \"'][.='9']\");\n    \n    assertQ(req(\"q\", fieldName + \":[0 TO 1] OR \" + fieldName + \":[8 TO 9]\" , \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='4']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='8']\",\n        \"//result/doc[4]/\" + type + \"[@name='\" + fieldName + \"'][.='9']\");\n    \n    assertQ(req(\"q\", fieldName + \":[0 TO 1] AND \" + fieldName + \":[1 TO 2]\" , \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='1']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\");\n    \n    assertQ(req(\"q\", fieldName + \":[0 TO 1] AND NOT \" + fieldName + \":[1 TO 2]\" , \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='1']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\");\n\n    clearIndex();\n    assertU(commit());\n    \n    String[] arr;\n    if (testLong) {\n      arr = toAscendingStringArray(getRandomLongs(100, false), true);\n    } else {\n      arr = toAscendingStringArray(getRandomInts(100, false), true);\n    }\n    for (int i = 0; i < arr.length; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), fieldName, arr[i]));\n    }\n    assertU(commit());\n    for (int i = 0; i < arr.length; i++) {\n      assertQ(req(\"q\", fieldName + \":[\" + arr[0] + \" TO \" + arr[i] + \"]\", \"fl\", \"id, \" + fieldName), \n          \"//*[@numFound='\" + (i + 1) + \"']\");\n      assertQ(req(\"q\", fieldName + \":{\" + arr[0] + \" TO \" + arr[i] + \"}\", \"fl\", \"id, \" + fieldName), \n          \"//*[@numFound='\" + (Math.max(0,  i-1)) + \"']\");\n      assertQ(req(\"q\", fieldName + \":[\" + arr[0] + \" TO \" + arr[i] + \"] AND \" + fieldName + \":\" + arr[0].replace(\"-\", \"\\\\-\"), \"fl\", \"id, \" + fieldName), \n          \"//*[@numFound='1']\");\n    }\n  }\n\n","sourceOld":"  private void doTestIntPointFieldRangeQuery(String fieldName, String type, boolean testLong) throws Exception {\n    for (int i = 9; i >= 0; i--) {\n      assertU(adoc(\"id\", String.valueOf(i), fieldName, String.valueOf(i)));\n    }\n    assertU(commit());\n    assertQ(req(\"q\", fieldName + \":[0 TO 3]\", \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='4']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='2']\",\n        \"//result/doc[4]/\" + type + \"[@name='\" + fieldName + \"'][.='3']\");\n    \n    assertQ(req(\"q\", fieldName + \":{0 TO 3]\", \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='2']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='3']\");\n    \n    assertQ(req(\"q\", fieldName + \":[0 TO 3}\", \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='2']\");\n    \n    assertQ(req(\"q\", fieldName + \":{0 TO 3}\", \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='2']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='2']\");\n    \n    assertQ(req(\"q\", fieldName + \":{0 TO *}\", \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='9']\",\n        \"0=count(//result/doc/\" + type + \"[@name='\" + fieldName + \"'][.='0'])\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\");\n    \n    assertQ(req(\"q\", fieldName + \":{* TO 3}\", \"fl\", \"id, \" + fieldName, \"sort\", \"id desc\"), \n        \"//*[@numFound='3']\",\n        \"0=count(//result/doc/\" + type + \"[@name='\" + fieldName + \"'][.='3'])\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='2']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\");\n    \n    assertQ(req(\"q\", fieldName + \":[* TO 3}\", \"fl\", \"id, \" + fieldName, \"sort\", \"id desc\"), \n        \"//*[@numFound='3']\",\n        \"0=count(//result/doc/\" + type + \"[@name='\" + fieldName + \"'][.='3'])\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='2']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\");\n    \n    assertQ(req(\"q\", fieldName + \":[* TO *}\", \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\",\n        \"//result/doc[10]/\" + type + \"[@name='\" + fieldName + \"'][.='9']\");\n    \n    assertQ(req(\"q\", fieldName + \":[0 TO 1] OR \" + fieldName + \":[8 TO 9]\" , \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='4']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='8']\",\n        \"//result/doc[4]/\" + type + \"[@name='\" + fieldName + \"'][.='9']\");\n    \n    assertQ(req(\"q\", fieldName + \":[0 TO 1] AND \" + fieldName + \":[1 TO 2]\" , \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='1']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\");\n    \n    assertQ(req(\"q\", fieldName + \":[0 TO 1] AND NOT \" + fieldName + \":[1 TO 2]\" , \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='1']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\");\n\n    clearIndex();\n    assertU(commit());\n    \n    String[] arr;\n    if (testLong) {\n      arr = getRandomStringArrayWithLongs(100, true);\n    } else {\n      arr = getRandomStringArrayWithInts(100, true);\n    }\n    for (int i = 0; i < arr.length; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), fieldName, arr[i]));\n    }\n    assertU(commit());\n    for (int i = 0; i < arr.length; i++) {\n      assertQ(req(\"q\", fieldName + \":[\" + arr[0] + \" TO \" + arr[i] + \"]\", \"fl\", \"id, \" + fieldName), \n          \"//*[@numFound='\" + (i + 1) + \"']\");\n      assertQ(req(\"q\", fieldName + \":{\" + arr[0] + \" TO \" + arr[i] + \"}\", \"fl\", \"id, \" + fieldName), \n          \"//*[@numFound='\" + (Math.max(0,  i-1)) + \"']\");\n      assertQ(req(\"q\", fieldName + \":[\" + arr[0] + \" TO \" + arr[i] + \"] AND \" + fieldName + \":\" + arr[0].replace(\"-\", \"\\\\-\"), \"fl\", \"id, \" + fieldName), \n          \"//*[@numFound='1']\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#doTestIntPointFieldRangeQuery(String,String,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestPointFields#doTestIntPointFieldRangeQuery(String,String,boolean).mjava","sourceNew":"  private void doTestIntPointFieldRangeQuery(String fieldName, String type, boolean testLong) throws Exception {\n    for (int i = 9; i >= 0; i--) {\n      assertU(adoc(\"id\", String.valueOf(i), fieldName, String.valueOf(i)));\n    }\n    assertU(commit());\n    assertQ(req(\"q\", fieldName + \":[0 TO 3]\", \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='4']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='2']\",\n        \"//result/doc[4]/\" + type + \"[@name='\" + fieldName + \"'][.='3']\");\n    \n    assertQ(req(\"q\", fieldName + \":{0 TO 3]\", \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='2']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='3']\");\n    \n    assertQ(req(\"q\", fieldName + \":[0 TO 3}\", \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='2']\");\n    \n    assertQ(req(\"q\", fieldName + \":{0 TO 3}\", \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='2']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='2']\");\n    \n    assertQ(req(\"q\", fieldName + \":{0 TO *}\", \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='9']\",\n        \"0=count(//result/doc/\" + type + \"[@name='\" + fieldName + \"'][.='0'])\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\");\n    \n    assertQ(req(\"q\", fieldName + \":{* TO 3}\", \"fl\", \"id, \" + fieldName, \"sort\", \"id desc\"), \n        \"//*[@numFound='3']\",\n        \"0=count(//result/doc/\" + type + \"[@name='\" + fieldName + \"'][.='3'])\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='2']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\");\n    \n    assertQ(req(\"q\", fieldName + \":[* TO 3}\", \"fl\", \"id, \" + fieldName, \"sort\", \"id desc\"), \n        \"//*[@numFound='3']\",\n        \"0=count(//result/doc/\" + type + \"[@name='\" + fieldName + \"'][.='3'])\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='2']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\");\n    \n    assertQ(req(\"q\", fieldName + \":[* TO *}\", \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\",\n        \"//result/doc[10]/\" + type + \"[@name='\" + fieldName + \"'][.='9']\");\n    \n    assertQ(req(\"q\", fieldName + \":[0 TO 1] OR \" + fieldName + \":[8 TO 9]\" , \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='4']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='8']\",\n        \"//result/doc[4]/\" + type + \"[@name='\" + fieldName + \"'][.='9']\");\n    \n    assertQ(req(\"q\", fieldName + \":[0 TO 1] AND \" + fieldName + \":[1 TO 2]\" , \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='1']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\");\n    \n    assertQ(req(\"q\", fieldName + \":[0 TO 1] AND NOT \" + fieldName + \":[1 TO 2]\" , \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='1']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\");\n\n    clearIndex();\n    assertU(commit());\n    \n    String[] arr;\n    if (testLong) {\n      arr = toAscendingStringArray(getRandomLongs(100, false), true);\n    } else {\n      arr = toAscendingStringArray(getRandomInts(100, false), true);\n    }\n    for (int i = 0; i < arr.length; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), fieldName, arr[i]));\n    }\n    assertU(commit());\n    for (int i = 0; i < arr.length; i++) {\n      assertQ(req(\"q\", fieldName + \":[\" + arr[0] + \" TO \" + arr[i] + \"]\", \"fl\", \"id, \" + fieldName), \n          \"//*[@numFound='\" + (i + 1) + \"']\");\n      assertQ(req(\"q\", fieldName + \":{\" + arr[0] + \" TO \" + arr[i] + \"}\", \"fl\", \"id, \" + fieldName), \n          \"//*[@numFound='\" + (Math.max(0,  i-1)) + \"']\");\n      assertQ(req(\"q\", fieldName + \":[\" + arr[0] + \" TO \" + arr[i] + \"] AND \" + fieldName + \":\" + arr[0].replace(\"-\", \"\\\\-\"), \"fl\", \"id, \" + fieldName), \n          \"//*[@numFound='1']\");\n    }\n  }\n\n","sourceOld":"  private void doTestIntPointFieldRangeQuery(String fieldName, String type, boolean testLong) throws Exception {\n    for (int i = 9; i >= 0; i--) {\n      assertU(adoc(\"id\", String.valueOf(i), fieldName, String.valueOf(i)));\n    }\n    assertU(commit());\n    assertQ(req(\"q\", fieldName + \":[0 TO 3]\", \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='4']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='2']\",\n        \"//result/doc[4]/\" + type + \"[@name='\" + fieldName + \"'][.='3']\");\n    \n    assertQ(req(\"q\", fieldName + \":{0 TO 3]\", \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='2']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='3']\");\n    \n    assertQ(req(\"q\", fieldName + \":[0 TO 3}\", \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='2']\");\n    \n    assertQ(req(\"q\", fieldName + \":{0 TO 3}\", \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='2']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='2']\");\n    \n    assertQ(req(\"q\", fieldName + \":{0 TO *}\", \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='9']\",\n        \"0=count(//result/doc/\" + type + \"[@name='\" + fieldName + \"'][.='0'])\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\");\n    \n    assertQ(req(\"q\", fieldName + \":{* TO 3}\", \"fl\", \"id, \" + fieldName, \"sort\", \"id desc\"), \n        \"//*[@numFound='3']\",\n        \"0=count(//result/doc/\" + type + \"[@name='\" + fieldName + \"'][.='3'])\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='2']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\");\n    \n    assertQ(req(\"q\", fieldName + \":[* TO 3}\", \"fl\", \"id, \" + fieldName, \"sort\", \"id desc\"), \n        \"//*[@numFound='3']\",\n        \"0=count(//result/doc/\" + type + \"[@name='\" + fieldName + \"'][.='3'])\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='2']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\");\n    \n    assertQ(req(\"q\", fieldName + \":[* TO *}\", \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\",\n        \"//result/doc[10]/\" + type + \"[@name='\" + fieldName + \"'][.='9']\");\n    \n    assertQ(req(\"q\", fieldName + \":[0 TO 1] OR \" + fieldName + \":[8 TO 9]\" , \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='4']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='8']\",\n        \"//result/doc[4]/\" + type + \"[@name='\" + fieldName + \"'][.='9']\");\n    \n    assertQ(req(\"q\", fieldName + \":[0 TO 1] AND \" + fieldName + \":[1 TO 2]\" , \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='1']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\");\n    \n    assertQ(req(\"q\", fieldName + \":[0 TO 1] AND NOT \" + fieldName + \":[1 TO 2]\" , \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='1']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\");\n\n    clearIndex();\n    assertU(commit());\n    \n    String[] arr;\n    if (testLong) {\n      arr = getRandomStringArrayWithLongs(100, true);\n    } else {\n      arr = getRandomStringArrayWithInts(100, true);\n    }\n    for (int i = 0; i < arr.length; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), fieldName, arr[i]));\n    }\n    assertU(commit());\n    for (int i = 0; i < arr.length; i++) {\n      assertQ(req(\"q\", fieldName + \":[\" + arr[0] + \" TO \" + arr[i] + \"]\", \"fl\", \"id, \" + fieldName), \n          \"//*[@numFound='\" + (i + 1) + \"']\");\n      assertQ(req(\"q\", fieldName + \":{\" + arr[0] + \" TO \" + arr[i] + \"}\", \"fl\", \"id, \" + fieldName), \n          \"//*[@numFound='\" + (Math.max(0,  i-1)) + \"']\");\n      assertQ(req(\"q\", fieldName + \":[\" + arr[0] + \" TO \" + arr[i] + \"] AND \" + fieldName + \":\" + arr[0].replace(\"-\", \"\\\\-\"), \"fl\", \"id, \" + fieldName), \n          \"//*[@numFound='1']\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2e45bfb783796234b0104a018de67f6f5904be09","date":1500413531,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#doTestIntPointFieldRangeQuery(String,String,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestPointFields#doTestIntPointFieldRangeQuery(String,String,boolean).mjava","sourceNew":"  private void doTestIntPointFieldRangeQuery(String fieldName, String type, boolean testLong) throws Exception {\n    for (int i = 9; i >= 0; i--) {\n      assertU(adoc(\"id\", String.valueOf(i), fieldName, String.valueOf(i)));\n    }\n    assertU(commit());\n    assertQ(req(\"q\", fieldName + \":[0 TO 3]\", \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='4']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='2']\",\n        \"//result/doc[4]/\" + type + \"[@name='\" + fieldName + \"'][.='3']\");\n    \n    assertQ(req(\"q\", fieldName + \":{0 TO 3]\", \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='2']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='3']\");\n    \n    assertQ(req(\"q\", fieldName + \":[0 TO 3}\", \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='2']\");\n    \n    assertQ(req(\"q\", fieldName + \":{0 TO 3}\", \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='2']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='2']\");\n    \n    assertQ(req(\"q\", fieldName + \":{0 TO *}\", \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='9']\",\n        \"0=count(//result/doc/\" + type + \"[@name='\" + fieldName + \"'][.='0'])\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\");\n    \n    assertQ(req(\"q\", fieldName + \":{* TO 3}\", \"fl\", \"id, \" + fieldName, \"sort\", \"id desc\"), \n        \"//*[@numFound='3']\",\n        \"0=count(//result/doc/\" + type + \"[@name='\" + fieldName + \"'][.='3'])\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='2']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\");\n    \n    assertQ(req(\"q\", fieldName + \":[* TO 3}\", \"fl\", \"id, \" + fieldName, \"sort\", \"id desc\"), \n        \"//*[@numFound='3']\",\n        \"0=count(//result/doc/\" + type + \"[@name='\" + fieldName + \"'][.='3'])\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='2']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\");\n    \n    assertQ(req(\"q\", fieldName + \":[* TO *}\", \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\",\n        \"//result/doc[10]/\" + type + \"[@name='\" + fieldName + \"'][.='9']\");\n    \n    assertQ(req(\"q\", fieldName + \":[0 TO 1] OR \" + fieldName + \":[8 TO 9]\" , \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='4']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='8']\",\n        \"//result/doc[4]/\" + type + \"[@name='\" + fieldName + \"'][.='9']\");\n    \n    assertQ(req(\"q\", fieldName + \":[0 TO 1] AND \" + fieldName + \":[1 TO 2]\" , \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='1']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\");\n    \n    assertQ(req(\"q\", fieldName + \":[0 TO 1] AND NOT \" + fieldName + \":[1 TO 2]\" , \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='1']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\");\n\n    clearIndex();\n    assertU(commit());\n    \n    String[] arr;\n    if (testLong) {\n      arr = toAscendingStringArray(getRandomLongs(100, false), true);\n    } else {\n      arr = toAscendingStringArray(getRandomInts(100, false), true);\n    }\n    for (int i = 0; i < arr.length; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), fieldName, arr[i]));\n    }\n    assertU(commit());\n    for (int i = 0; i < arr.length; i++) {\n      assertQ(req(\"q\", fieldName + \":[\" + arr[0] + \" TO \" + arr[i] + \"]\", \"fl\", \"id, \" + fieldName), \n          \"//*[@numFound='\" + (i + 1) + \"']\");\n      assertQ(req(\"q\", fieldName + \":{\" + arr[0] + \" TO \" + arr[i] + \"}\", \"fl\", \"id, \" + fieldName), \n          \"//*[@numFound='\" + (Math.max(0,  i-1)) + \"']\");\n      assertQ(req(\"q\", fieldName + \":[\" + arr[0] + \" TO \" + arr[i] + \"] AND \" + fieldName + \":\" + arr[0].replace(\"-\", \"\\\\-\"), \"fl\", \"id, \" + fieldName), \n          \"//*[@numFound='1']\");\n    }\n    if (testLong) {\n      assertQ(req(\"q\", fieldName + \":[\" + Long.MIN_VALUE + \" TO \" + Long.MIN_VALUE + \"}\", \"fl\", \"id, \" + fieldName), \n          \"//*[@numFound='0']\");\n      assertQ(req(\"q\", fieldName + \":{\" + Long.MAX_VALUE + \" TO \" + Long.MAX_VALUE + \"]\", \"fl\", \"id, \" + fieldName), \n          \"//*[@numFound='0']\");\n    } else {\n      assertQ(req(\"q\", fieldName + \":[\" + Integer.MIN_VALUE + \" TO \" + Integer.MIN_VALUE + \"}\", \"fl\", \"id, \" + fieldName), \n          \"//*[@numFound='0']\");\n      assertQ(req(\"q\", fieldName + \":{\" + Integer.MAX_VALUE + \" TO \" + Integer.MAX_VALUE + \"]\", \"fl\", \"id, \" + fieldName), \n          \"//*[@numFound='0']\");\n    }\n  }\n\n","sourceOld":"  private void doTestIntPointFieldRangeQuery(String fieldName, String type, boolean testLong) throws Exception {\n    for (int i = 9; i >= 0; i--) {\n      assertU(adoc(\"id\", String.valueOf(i), fieldName, String.valueOf(i)));\n    }\n    assertU(commit());\n    assertQ(req(\"q\", fieldName + \":[0 TO 3]\", \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='4']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='2']\",\n        \"//result/doc[4]/\" + type + \"[@name='\" + fieldName + \"'][.='3']\");\n    \n    assertQ(req(\"q\", fieldName + \":{0 TO 3]\", \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='2']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='3']\");\n    \n    assertQ(req(\"q\", fieldName + \":[0 TO 3}\", \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='2']\");\n    \n    assertQ(req(\"q\", fieldName + \":{0 TO 3}\", \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='2']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='2']\");\n    \n    assertQ(req(\"q\", fieldName + \":{0 TO *}\", \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='9']\",\n        \"0=count(//result/doc/\" + type + \"[@name='\" + fieldName + \"'][.='0'])\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\");\n    \n    assertQ(req(\"q\", fieldName + \":{* TO 3}\", \"fl\", \"id, \" + fieldName, \"sort\", \"id desc\"), \n        \"//*[@numFound='3']\",\n        \"0=count(//result/doc/\" + type + \"[@name='\" + fieldName + \"'][.='3'])\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='2']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\");\n    \n    assertQ(req(\"q\", fieldName + \":[* TO 3}\", \"fl\", \"id, \" + fieldName, \"sort\", \"id desc\"), \n        \"//*[@numFound='3']\",\n        \"0=count(//result/doc/\" + type + \"[@name='\" + fieldName + \"'][.='3'])\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='2']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\");\n    \n    assertQ(req(\"q\", fieldName + \":[* TO *}\", \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\",\n        \"//result/doc[10]/\" + type + \"[@name='\" + fieldName + \"'][.='9']\");\n    \n    assertQ(req(\"q\", fieldName + \":[0 TO 1] OR \" + fieldName + \":[8 TO 9]\" , \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='4']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='8']\",\n        \"//result/doc[4]/\" + type + \"[@name='\" + fieldName + \"'][.='9']\");\n    \n    assertQ(req(\"q\", fieldName + \":[0 TO 1] AND \" + fieldName + \":[1 TO 2]\" , \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='1']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\");\n    \n    assertQ(req(\"q\", fieldName + \":[0 TO 1] AND NOT \" + fieldName + \":[1 TO 2]\" , \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='1']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\");\n\n    clearIndex();\n    assertU(commit());\n    \n    String[] arr;\n    if (testLong) {\n      arr = toAscendingStringArray(getRandomLongs(100, false), true);\n    } else {\n      arr = toAscendingStringArray(getRandomInts(100, false), true);\n    }\n    for (int i = 0; i < arr.length; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), fieldName, arr[i]));\n    }\n    assertU(commit());\n    for (int i = 0; i < arr.length; i++) {\n      assertQ(req(\"q\", fieldName + \":[\" + arr[0] + \" TO \" + arr[i] + \"]\", \"fl\", \"id, \" + fieldName), \n          \"//*[@numFound='\" + (i + 1) + \"']\");\n      assertQ(req(\"q\", fieldName + \":{\" + arr[0] + \" TO \" + arr[i] + \"}\", \"fl\", \"id, \" + fieldName), \n          \"//*[@numFound='\" + (Math.max(0,  i-1)) + \"']\");\n      assertQ(req(\"q\", fieldName + \":[\" + arr[0] + \" TO \" + arr[i] + \"] AND \" + fieldName + \":\" + arr[0].replace(\"-\", \"\\\\-\"), \"fl\", \"id, \" + fieldName), \n          \"//*[@numFound='1']\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"936cdd5882761db3b844afd6f84ab81cbb011a75","date":1500973524,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#doTestIntPointFieldRangeQuery(String,String,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestPointFields#doTestIntPointFieldRangeQuery(String,String,boolean).mjava","sourceNew":"  private void doTestIntPointFieldRangeQuery(String fieldName, String type, boolean testLong) throws Exception {\n    for (int i = 9; i >= 0; i--) {\n      assertU(adoc(\"id\", String.valueOf(i), fieldName, String.valueOf(i)));\n    }\n    assertU(commit());\n    assertQ(req(\"q\", fieldName + \":[0 TO 3]\", \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='4']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='2']\",\n        \"//result/doc[4]/\" + type + \"[@name='\" + fieldName + \"'][.='3']\");\n    \n    assertQ(req(\"q\", fieldName + \":{0 TO 3]\", \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='2']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='3']\");\n    \n    assertQ(req(\"q\", fieldName + \":[0 TO 3}\", \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='2']\");\n    \n    assertQ(req(\"q\", fieldName + \":{0 TO 3}\", \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='2']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='2']\");\n    \n    assertQ(req(\"q\", fieldName + \":{0 TO *}\", \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='9']\",\n        \"0=count(//result/doc/\" + type + \"[@name='\" + fieldName + \"'][.='0'])\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\");\n    \n    assertQ(req(\"q\", fieldName + \":{* TO 3}\", \"fl\", \"id, \" + fieldName, \"sort\", \"id desc\"), \n        \"//*[@numFound='3']\",\n        \"0=count(//result/doc/\" + type + \"[@name='\" + fieldName + \"'][.='3'])\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='2']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\");\n    \n    assertQ(req(\"q\", fieldName + \":[* TO 3}\", \"fl\", \"id, \" + fieldName, \"sort\", \"id desc\"), \n        \"//*[@numFound='3']\",\n        \"0=count(//result/doc/\" + type + \"[@name='\" + fieldName + \"'][.='3'])\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='2']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\");\n    \n    assertQ(req(\"q\", fieldName + \":[* TO *}\", \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\",\n        \"//result/doc[10]/\" + type + \"[@name='\" + fieldName + \"'][.='9']\");\n    \n    assertQ(req(\"q\", fieldName + \":[0 TO 1] OR \" + fieldName + \":[8 TO 9]\" , \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='4']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='8']\",\n        \"//result/doc[4]/\" + type + \"[@name='\" + fieldName + \"'][.='9']\");\n    \n    assertQ(req(\"q\", fieldName + \":[0 TO 1] AND \" + fieldName + \":[1 TO 2]\" , \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='1']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\");\n    \n    assertQ(req(\"q\", fieldName + \":[0 TO 1] AND NOT \" + fieldName + \":[1 TO 2]\" , \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='1']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\");\n\n    clearIndex();\n    assertU(commit());\n    \n    String[] arr;\n    if (testLong) {\n      arr = toAscendingStringArray(getRandomLongs(100, false), true);\n    } else {\n      arr = toAscendingStringArray(getRandomInts(100, false), true);\n    }\n    for (int i = 0; i < arr.length; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), fieldName, arr[i]));\n    }\n    assertU(commit());\n    for (int i = 0; i < arr.length; i++) {\n      assertQ(req(\"q\", fieldName + \":[\" + arr[0] + \" TO \" + arr[i] + \"]\", \"fl\", \"id, \" + fieldName), \n          \"//*[@numFound='\" + (i + 1) + \"']\");\n      assertQ(req(\"q\", fieldName + \":{\" + arr[0] + \" TO \" + arr[i] + \"}\", \"fl\", \"id, \" + fieldName), \n          \"//*[@numFound='\" + (Math.max(0,  i-1)) + \"']\");\n      assertQ(req(\"q\", fieldName + \":[\" + arr[0] + \" TO \" + arr[i] + \"] AND \" + fieldName + \":\" + arr[0].replace(\"-\", \"\\\\-\"), \"fl\", \"id, \" + fieldName), \n          \"//*[@numFound='1']\");\n    }\n    if (testLong) {\n      assertQ(req(\"q\", fieldName + \":[\" + Long.MIN_VALUE + \" TO \" + Long.MIN_VALUE + \"}\", \"fl\", \"id, \" + fieldName), \n          \"//*[@numFound='0']\");\n      assertQ(req(\"q\", fieldName + \":{\" + Long.MAX_VALUE + \" TO \" + Long.MAX_VALUE + \"]\", \"fl\", \"id, \" + fieldName), \n          \"//*[@numFound='0']\");\n    } else {\n      assertQ(req(\"q\", fieldName + \":[\" + Integer.MIN_VALUE + \" TO \" + Integer.MIN_VALUE + \"}\", \"fl\", \"id, \" + fieldName), \n          \"//*[@numFound='0']\");\n      assertQ(req(\"q\", fieldName + \":{\" + Integer.MAX_VALUE + \" TO \" + Integer.MAX_VALUE + \"]\", \"fl\", \"id, \" + fieldName), \n          \"//*[@numFound='0']\");\n    }\n  }\n\n","sourceOld":"  private void doTestIntPointFieldRangeQuery(String fieldName, String type, boolean testLong) throws Exception {\n    for (int i = 9; i >= 0; i--) {\n      assertU(adoc(\"id\", String.valueOf(i), fieldName, String.valueOf(i)));\n    }\n    assertU(commit());\n    assertQ(req(\"q\", fieldName + \":[0 TO 3]\", \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='4']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='2']\",\n        \"//result/doc[4]/\" + type + \"[@name='\" + fieldName + \"'][.='3']\");\n    \n    assertQ(req(\"q\", fieldName + \":{0 TO 3]\", \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='2']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='3']\");\n    \n    assertQ(req(\"q\", fieldName + \":[0 TO 3}\", \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='2']\");\n    \n    assertQ(req(\"q\", fieldName + \":{0 TO 3}\", \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='2']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='2']\");\n    \n    assertQ(req(\"q\", fieldName + \":{0 TO *}\", \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='9']\",\n        \"0=count(//result/doc/\" + type + \"[@name='\" + fieldName + \"'][.='0'])\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\");\n    \n    assertQ(req(\"q\", fieldName + \":{* TO 3}\", \"fl\", \"id, \" + fieldName, \"sort\", \"id desc\"), \n        \"//*[@numFound='3']\",\n        \"0=count(//result/doc/\" + type + \"[@name='\" + fieldName + \"'][.='3'])\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='2']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\");\n    \n    assertQ(req(\"q\", fieldName + \":[* TO 3}\", \"fl\", \"id, \" + fieldName, \"sort\", \"id desc\"), \n        \"//*[@numFound='3']\",\n        \"0=count(//result/doc/\" + type + \"[@name='\" + fieldName + \"'][.='3'])\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='2']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\");\n    \n    assertQ(req(\"q\", fieldName + \":[* TO *}\", \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\",\n        \"//result/doc[10]/\" + type + \"[@name='\" + fieldName + \"'][.='9']\");\n    \n    assertQ(req(\"q\", fieldName + \":[0 TO 1] OR \" + fieldName + \":[8 TO 9]\" , \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='4']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='8']\",\n        \"//result/doc[4]/\" + type + \"[@name='\" + fieldName + \"'][.='9']\");\n    \n    assertQ(req(\"q\", fieldName + \":[0 TO 1] AND \" + fieldName + \":[1 TO 2]\" , \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='1']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\");\n    \n    assertQ(req(\"q\", fieldName + \":[0 TO 1] AND NOT \" + fieldName + \":[1 TO 2]\" , \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='1']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\");\n\n    clearIndex();\n    assertU(commit());\n    \n    String[] arr;\n    if (testLong) {\n      arr = toAscendingStringArray(getRandomLongs(100, false), true);\n    } else {\n      arr = toAscendingStringArray(getRandomInts(100, false), true);\n    }\n    for (int i = 0; i < arr.length; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), fieldName, arr[i]));\n    }\n    assertU(commit());\n    for (int i = 0; i < arr.length; i++) {\n      assertQ(req(\"q\", fieldName + \":[\" + arr[0] + \" TO \" + arr[i] + \"]\", \"fl\", \"id, \" + fieldName), \n          \"//*[@numFound='\" + (i + 1) + \"']\");\n      assertQ(req(\"q\", fieldName + \":{\" + arr[0] + \" TO \" + arr[i] + \"}\", \"fl\", \"id, \" + fieldName), \n          \"//*[@numFound='\" + (Math.max(0,  i-1)) + \"']\");\n      assertQ(req(\"q\", fieldName + \":[\" + arr[0] + \" TO \" + arr[i] + \"] AND \" + fieldName + \":\" + arr[0].replace(\"-\", \"\\\\-\"), \"fl\", \"id, \" + fieldName), \n          \"//*[@numFound='1']\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"19284d685ce334cd95ff0ace2793842f84bf7383":["46dc9ac8b3e748407baaef82453138ff3974480c"],"46dc9ac8b3e748407baaef82453138ff3974480c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b89c0b1a887eabf9facdf2c5d2df5e284c6d6daa":["330274305237bd6f93e7ee021669f797394127b1"],"936cdd5882761db3b844afd6f84ab81cbb011a75":["2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","2e45bfb783796234b0104a018de67f6f5904be09"],"f344bb33ca91f48e99c061980115b46fa84fc8f5":["330274305237bd6f93e7ee021669f797394127b1","b89c0b1a887eabf9facdf2c5d2df5e284c6d6daa"],"28288370235ed02234a64753cdbf0c6ec096304a":["330274305237bd6f93e7ee021669f797394127b1","f344bb33ca91f48e99c061980115b46fa84fc8f5"],"90a682dc1bfd188ef61cc28373c7f5d700b4ac75":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","46dc9ac8b3e748407baaef82453138ff3974480c"],"2e45bfb783796234b0104a018de67f6f5904be09":["28288370235ed02234a64753cdbf0c6ec096304a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ab68488225b6a6c357dda72ed11dedca9914a192":["19284d685ce334cd95ff0ace2793842f84bf7383","02cc739d6621fdfc3991bde01ae8ef5cbdb46925"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["ab68488225b6a6c357dda72ed11dedca9914a192","f344bb33ca91f48e99c061980115b46fa84fc8f5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2e45bfb783796234b0104a018de67f6f5904be09"],"330274305237bd6f93e7ee021669f797394127b1":["19284d685ce334cd95ff0ace2793842f84bf7383"],"02cc739d6621fdfc3991bde01ae8ef5cbdb46925":["19284d685ce334cd95ff0ace2793842f84bf7383"]},"commit2Childs":{"19284d685ce334cd95ff0ace2793842f84bf7383":["ab68488225b6a6c357dda72ed11dedca9914a192","330274305237bd6f93e7ee021669f797394127b1","02cc739d6621fdfc3991bde01ae8ef5cbdb46925"],"46dc9ac8b3e748407baaef82453138ff3974480c":["19284d685ce334cd95ff0ace2793842f84bf7383","90a682dc1bfd188ef61cc28373c7f5d700b4ac75"],"b89c0b1a887eabf9facdf2c5d2df5e284c6d6daa":["f344bb33ca91f48e99c061980115b46fa84fc8f5"],"936cdd5882761db3b844afd6f84ab81cbb011a75":[],"f344bb33ca91f48e99c061980115b46fa84fc8f5":["28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"28288370235ed02234a64753cdbf0c6ec096304a":["2e45bfb783796234b0104a018de67f6f5904be09"],"90a682dc1bfd188ef61cc28373c7f5d700b4ac75":[],"2e45bfb783796234b0104a018de67f6f5904be09":["936cdd5882761db3b844afd6f84ab81cbb011a75","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["46dc9ac8b3e748407baaef82453138ff3974480c","90a682dc1bfd188ef61cc28373c7f5d700b4ac75"],"ab68488225b6a6c357dda72ed11dedca9914a192":["2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["936cdd5882761db3b844afd6f84ab81cbb011a75"],"330274305237bd6f93e7ee021669f797394127b1":["b89c0b1a887eabf9facdf2c5d2df5e284c6d6daa","f344bb33ca91f48e99c061980115b46fa84fc8f5","28288370235ed02234a64753cdbf0c6ec096304a"],"02cc739d6621fdfc3991bde01ae8ef5cbdb46925":["ab68488225b6a6c357dda72ed11dedca9914a192"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["936cdd5882761db3b844afd6f84ab81cbb011a75","90a682dc1bfd188ef61cc28373c7f5d700b4ac75","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}