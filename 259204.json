{"path":"lucene/core/src/test/org/apache/lucene/analysis/TestMockCharFilter#test().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/analysis/TestMockCharFilter#test().mjava","pathOld":"lucene/src/test/org/apache/lucene/analysis/TestMockCharFilter#test().mjava","sourceNew":"  public void test() throws IOException {\n    Analyzer analyzer = new Analyzer() {\n\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n        return new TokenStreamComponents(tokenizer, tokenizer);\n      }\n\n      @Override\n      protected Reader initReader(Reader reader) {\n        return new MockCharFilter(CharReader.get(reader), 7);\n      }\n    };\n    \n    assertAnalyzesTo(analyzer, \"ab\",\n        new String[] { \"aab\" },\n        new int[] { 0 },\n        new int[] { 2 }\n    );\n    \n    assertAnalyzesTo(analyzer, \"aba\",\n        new String[] { \"aabaa\" },\n        new int[] { 0 },\n        new int[] { 3 }\n    );\n    \n    assertAnalyzesTo(analyzer, \"abcdefga\",\n        new String[] { \"aabcdefgaa\" },\n        new int[] { 0 },\n        new int[] { 8 }\n    );\n  }\n\n","sourceOld":"  public void test() throws IOException {\n    Analyzer analyzer = new Analyzer() {\n\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n        return new TokenStreamComponents(tokenizer, tokenizer);\n      }\n\n      @Override\n      protected Reader initReader(Reader reader) {\n        return new MockCharFilter(CharReader.get(reader), 7);\n      }\n    };\n    \n    assertAnalyzesTo(analyzer, \"ab\",\n        new String[] { \"aab\" },\n        new int[] { 0 },\n        new int[] { 2 }\n    );\n    \n    assertAnalyzesTo(analyzer, \"aba\",\n        new String[] { \"aabaa\" },\n        new int[] { 0 },\n        new int[] { 3 }\n    );\n    \n    assertAnalyzesTo(analyzer, \"abcdefga\",\n        new String[] { \"aabcdefgaa\" },\n        new int[] { 0 },\n        new int[] { 8 }\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56584ae6fa4912e4dd6e818a7da3799cf807234f","date":1339586560,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/analysis/TestMockCharFilter#test().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/analysis/TestMockCharFilter#test().mjava","sourceNew":"  public void test() throws IOException {\n    Analyzer analyzer = new Analyzer() {\n\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n        return new TokenStreamComponents(tokenizer, tokenizer);\n      }\n\n      @Override\n      protected Reader initReader(String fieldName, Reader reader) {\n        return new MockCharFilter(CharReader.get(reader), 7);\n      }\n    };\n    \n    assertAnalyzesTo(analyzer, \"ab\",\n        new String[] { \"aab\" },\n        new int[] { 0 },\n        new int[] { 2 }\n    );\n    \n    assertAnalyzesTo(analyzer, \"aba\",\n        new String[] { \"aabaa\" },\n        new int[] { 0 },\n        new int[] { 3 }\n    );\n    \n    assertAnalyzesTo(analyzer, \"abcdefga\",\n        new String[] { \"aabcdefgaa\" },\n        new int[] { 0 },\n        new int[] { 8 }\n    );\n  }\n\n","sourceOld":"  public void test() throws IOException {\n    Analyzer analyzer = new Analyzer() {\n\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n        return new TokenStreamComponents(tokenizer, tokenizer);\n      }\n\n      @Override\n      protected Reader initReader(Reader reader) {\n        return new MockCharFilter(CharReader.get(reader), 7);\n      }\n    };\n    \n    assertAnalyzesTo(analyzer, \"ab\",\n        new String[] { \"aab\" },\n        new int[] { 0 },\n        new int[] { 2 }\n    );\n    \n    assertAnalyzesTo(analyzer, \"aba\",\n        new String[] { \"aabaa\" },\n        new int[] { 0 },\n        new int[] { 3 }\n    );\n    \n    assertAnalyzesTo(analyzer, \"abcdefga\",\n        new String[] { \"aabcdefgaa\" },\n        new int[] { 0 },\n        new int[] { 8 }\n    );\n  }\n\n","bugFix":["7e477c2108982ba9974f73aa8800270c75cb4971"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fc706b1e03a539d44d99998108feb684bb44cbb2","date":1342522408,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/analysis/TestMockCharFilter#test().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/analysis/TestMockCharFilter#test().mjava","sourceNew":"  public void test() throws IOException {\n    Analyzer analyzer = new Analyzer() {\n\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n        return new TokenStreamComponents(tokenizer, tokenizer);\n      }\n\n      @Override\n      protected Reader initReader(String fieldName, Reader reader) {\n        return new MockCharFilter(reader, 7);\n      }\n    };\n    \n    assertAnalyzesTo(analyzer, \"ab\",\n        new String[] { \"aab\" },\n        new int[] { 0 },\n        new int[] { 2 }\n    );\n    \n    assertAnalyzesTo(analyzer, \"aba\",\n        new String[] { \"aabaa\" },\n        new int[] { 0 },\n        new int[] { 3 }\n    );\n    \n    assertAnalyzesTo(analyzer, \"abcdefga\",\n        new String[] { \"aabcdefgaa\" },\n        new int[] { 0 },\n        new int[] { 8 }\n    );\n  }\n\n","sourceOld":"  public void test() throws IOException {\n    Analyzer analyzer = new Analyzer() {\n\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n        return new TokenStreamComponents(tokenizer, tokenizer);\n      }\n\n      @Override\n      protected Reader initReader(String fieldName, Reader reader) {\n        return new MockCharFilter(CharReader.get(reader), 7);\n      }\n    };\n    \n    assertAnalyzesTo(analyzer, \"ab\",\n        new String[] { \"aab\" },\n        new int[] { 0 },\n        new int[] { 2 }\n    );\n    \n    assertAnalyzesTo(analyzer, \"aba\",\n        new String[] { \"aabaa\" },\n        new int[] { 0 },\n        new int[] { 3 }\n    );\n    \n    assertAnalyzesTo(analyzer, \"abcdefga\",\n        new String[] { \"aabcdefgaa\" },\n        new int[] { 0 },\n        new int[] { 8 }\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/analysis/TestMockCharFilter#test().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/analysis/TestMockCharFilter#test().mjava","sourceNew":"  public void test() throws IOException {\n    Analyzer analyzer = new Analyzer() {\n\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n        return new TokenStreamComponents(tokenizer, tokenizer);\n      }\n\n      @Override\n      protected Reader initReader(String fieldName, Reader reader) {\n        return new MockCharFilter(reader, 7);\n      }\n    };\n    \n    assertAnalyzesTo(analyzer, \"ab\",\n        new String[] { \"aab\" },\n        new int[] { 0 },\n        new int[] { 2 }\n    );\n    \n    assertAnalyzesTo(analyzer, \"aba\",\n        new String[] { \"aabaa\" },\n        new int[] { 0 },\n        new int[] { 3 }\n    );\n    \n    assertAnalyzesTo(analyzer, \"abcdefga\",\n        new String[] { \"aabcdefgaa\" },\n        new int[] { 0 },\n        new int[] { 8 }\n    );\n  }\n\n","sourceOld":"  public void test() throws IOException {\n    Analyzer analyzer = new Analyzer() {\n\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n        return new TokenStreamComponents(tokenizer, tokenizer);\n      }\n\n      @Override\n      protected Reader initReader(String fieldName, Reader reader) {\n        return new MockCharFilter(CharReader.get(reader), 7);\n      }\n    };\n    \n    assertAnalyzesTo(analyzer, \"ab\",\n        new String[] { \"aab\" },\n        new int[] { 0 },\n        new int[] { 2 }\n    );\n    \n    assertAnalyzesTo(analyzer, \"aba\",\n        new String[] { \"aabaa\" },\n        new int[] { 0 },\n        new int[] { 3 }\n    );\n    \n    assertAnalyzesTo(analyzer, \"abcdefga\",\n        new String[] { \"aabcdefgaa\" },\n        new int[] { 0 },\n        new int[] { 8 }\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/analysis/TestMockCharFilter#test().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/analysis/TestMockCharFilter#test().mjava","sourceNew":"  public void test() throws IOException {\n    Analyzer analyzer = new Analyzer() {\n\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n        return new TokenStreamComponents(tokenizer, tokenizer);\n      }\n\n      @Override\n      protected Reader initReader(String fieldName, Reader reader) {\n        return new MockCharFilter(reader, 7);\n      }\n    };\n    \n    assertAnalyzesTo(analyzer, \"ab\",\n        new String[] { \"aab\" },\n        new int[] { 0 },\n        new int[] { 2 }\n    );\n    \n    assertAnalyzesTo(analyzer, \"aba\",\n        new String[] { \"aabaa\" },\n        new int[] { 0 },\n        new int[] { 3 }\n    );\n    \n    assertAnalyzesTo(analyzer, \"abcdefga\",\n        new String[] { \"aabcdefgaa\" },\n        new int[] { 0 },\n        new int[] { 8 }\n    );\n  }\n\n","sourceOld":"  public void test() throws IOException {\n    Analyzer analyzer = new Analyzer() {\n\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n        return new TokenStreamComponents(tokenizer, tokenizer);\n      }\n\n      @Override\n      protected Reader initReader(String fieldName, Reader reader) {\n        return new MockCharFilter(CharReader.get(reader), 7);\n      }\n    };\n    \n    assertAnalyzesTo(analyzer, \"ab\",\n        new String[] { \"aab\" },\n        new int[] { 0 },\n        new int[] { 2 }\n    );\n    \n    assertAnalyzesTo(analyzer, \"aba\",\n        new String[] { \"aabaa\" },\n        new int[] { 0 },\n        new int[] { 3 }\n    );\n    \n    assertAnalyzesTo(analyzer, \"abcdefga\",\n        new String[] { \"aabcdefgaa\" },\n        new int[] { 0 },\n        new int[] { 8 }\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338","date":1389274049,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/analysis/TestMockCharFilter#test().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/analysis/TestMockCharFilter#test().mjava","sourceNew":"  public void test() throws IOException {\n    Analyzer analyzer = new Analyzer() {\n\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n        return new TokenStreamComponents(tokenizer, tokenizer);\n      }\n\n      @Override\n      protected Reader initReader(String fieldName, Reader reader) {\n        return new MockCharFilter(reader, 7);\n      }\n    };\n    \n    assertAnalyzesTo(analyzer, \"ab\",\n        new String[] { \"aab\" },\n        new int[] { 0 },\n        new int[] { 2 }\n    );\n    \n    assertAnalyzesTo(analyzer, \"aba\",\n        new String[] { \"aabaa\" },\n        new int[] { 0 },\n        new int[] { 3 }\n    );\n    \n    assertAnalyzesTo(analyzer, \"abcdefga\",\n        new String[] { \"aabcdefgaa\" },\n        new int[] { 0 },\n        new int[] { 8 }\n    );\n  }\n\n","sourceOld":"  public void test() throws IOException {\n    Analyzer analyzer = new Analyzer() {\n\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n        return new TokenStreamComponents(tokenizer, tokenizer);\n      }\n\n      @Override\n      protected Reader initReader(String fieldName, Reader reader) {\n        return new MockCharFilter(reader, 7);\n      }\n    };\n    \n    assertAnalyzesTo(analyzer, \"ab\",\n        new String[] { \"aab\" },\n        new int[] { 0 },\n        new int[] { 2 }\n    );\n    \n    assertAnalyzesTo(analyzer, \"aba\",\n        new String[] { \"aabaa\" },\n        new int[] { 0 },\n        new int[] { 3 }\n    );\n    \n    assertAnalyzesTo(analyzer, \"abcdefga\",\n        new String[] { \"aabcdefgaa\" },\n        new int[] { 0 },\n        new int[] { 8 }\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b52491e71f0d5d0f0160d6ed0d39e0dd661be68a","date":1429550638,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/test/org/apache/lucene/analysis/TestMockCharFilter#test().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/analysis/TestMockCharFilter#test().mjava","sourceNew":"  public void test() throws IOException {\n    Analyzer analyzer = new Analyzer() {\n\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n        return new TokenStreamComponents(tokenizer, tokenizer);\n      }\n\n      @Override\n      protected Reader initReader(String fieldName, Reader reader) {\n        return new MockCharFilter(reader, 7);\n      }\n    };\n    \n    assertAnalyzesTo(analyzer, \"ab\",\n        new String[] { \"aab\" },\n        new int[] { 0 },\n        new int[] { 2 }\n    );\n    \n    assertAnalyzesTo(analyzer, \"aba\",\n        new String[] { \"aabaa\" },\n        new int[] { 0 },\n        new int[] { 3 }\n    );\n    \n    assertAnalyzesTo(analyzer, \"abcdefga\",\n        new String[] { \"aabcdefgaa\" },\n        new int[] { 0 },\n        new int[] { 8 }\n    );\n  }\n\n","sourceOld":"  public void test() throws IOException {\n    Analyzer analyzer = new Analyzer() {\n\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n        return new TokenStreamComponents(tokenizer, tokenizer);\n      }\n\n      @Override\n      protected Reader initReader(String fieldName, Reader reader) {\n        return new MockCharFilter(reader, 7);\n      }\n    };\n    \n    assertAnalyzesTo(analyzer, \"ab\",\n        new String[] { \"aab\" },\n        new int[] { 0 },\n        new int[] { 2 }\n    );\n    \n    assertAnalyzesTo(analyzer, \"aba\",\n        new String[] { \"aabaa\" },\n        new int[] { 0 },\n        new int[] { 3 }\n    );\n    \n    assertAnalyzesTo(analyzer, \"abcdefga\",\n        new String[] { \"aabcdefgaa\" },\n        new int[] { 0 },\n        new int[] { 8 }\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"aba371508186796cc6151d8223a5b4e16d02e26e":["56584ae6fa4912e4dd6e818a7da3799cf807234f","fc706b1e03a539d44d99998108feb684bb44cbb2"],"fc706b1e03a539d44d99998108feb684bb44cbb2":["56584ae6fa4912e4dd6e818a7da3799cf807234f"],"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338":["fc706b1e03a539d44d99998108feb684bb44cbb2"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["56584ae6fa4912e4dd6e818a7da3799cf807234f","fc706b1e03a539d44d99998108feb684bb44cbb2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"56584ae6fa4912e4dd6e818a7da3799cf807234f":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"b52491e71f0d5d0f0160d6ed0d39e0dd661be68a":["ae889fd5c8a69f6b5d130d3c895bfa5b04d07338"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b52491e71f0d5d0f0160d6ed0d39e0dd661be68a"]},"commit2Childs":{"aba371508186796cc6151d8223a5b4e16d02e26e":[],"fc706b1e03a539d44d99998108feb684bb44cbb2":["aba371508186796cc6151d8223a5b4e16d02e26e","ae889fd5c8a69f6b5d130d3c895bfa5b04d07338","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338":["b52491e71f0d5d0f0160d6ed0d39e0dd661be68a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["56584ae6fa4912e4dd6e818a7da3799cf807234f"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"56584ae6fa4912e4dd6e818a7da3799cf807234f":["aba371508186796cc6151d8223a5b4e16d02e26e","fc706b1e03a539d44d99998108feb684bb44cbb2","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"b52491e71f0d5d0f0160d6ed0d39e0dd661be68a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}