{"path":"lucene/src/java/org/apache/lucene/util/automaton/fst/Builder#add(char[],int,int,T).mjava","commits":[{"id":"d4769bdea5a853f1841c485bc1fd9d79cb7022fc","date":1292168168,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/fst/Builder#add(char[],int,int,T).mjava","pathOld":"/dev/null","sourceNew":"  /** Sugar: adds the UTF32 chars from char[] slice.  FST\n   *  must be FST.INPUT_TYPE.BYTE4! */\n  public void add(char[] s, int offset, int length, T output) throws IOException {\n    assert fst.getInputType() == FST.INPUT_TYPE.BYTE4;\n    int charIdx = offset;\n    int intIdx = 0;\n    final int charLimit = offset + length;\n    while(charIdx < charLimit) {\n      scratchIntsRef.grow(intIdx+1);\n      final int utf32 = Character.codePointAt(s, charIdx);\n      scratchIntsRef.ints[intIdx] = utf32;\n      charIdx += Character.charCount(utf32);\n      intIdx++;\n    }\n    scratchIntsRef.length = intIdx;\n    add(scratchIntsRef, output);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab5cb6a74aefb78aa0569857970b9151dfe2e787","date":1292842407,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/fst/Builder#add(char[],int,int,T).mjava","pathOld":"/dev/null","sourceNew":"  /** Sugar: adds the UTF32 chars from char[] slice.  FST\n   *  must be FST.INPUT_TYPE.BYTE4! */\n  public void add(char[] s, int offset, int length, T output) throws IOException {\n    assert fst.getInputType() == FST.INPUT_TYPE.BYTE4;\n    int charIdx = offset;\n    int intIdx = 0;\n    final int charLimit = offset + length;\n    while(charIdx < charLimit) {\n      scratchIntsRef.grow(intIdx+1);\n      final int utf32 = Character.codePointAt(s, charIdx);\n      scratchIntsRef.ints[intIdx] = utf32;\n      charIdx += Character.charCount(utf32);\n      intIdx++;\n    }\n    scratchIntsRef.length = intIdx;\n    add(scratchIntsRef, output);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/fst/Builder#add(char[],int,int,T).mjava","pathOld":"/dev/null","sourceNew":"  /** Sugar: adds the UTF32 chars from char[] slice.  FST\n   *  must be FST.INPUT_TYPE.BYTE4! */\n  public void add(char[] s, int offset, int length, T output) throws IOException {\n    assert fst.getInputType() == FST.INPUT_TYPE.BYTE4;\n    int charIdx = offset;\n    int intIdx = 0;\n    final int charLimit = offset + length;\n    while(charIdx < charLimit) {\n      scratchIntsRef.grow(intIdx+1);\n      final int utf32 = Character.codePointAt(s, charIdx);\n      scratchIntsRef.ints[intIdx] = utf32;\n      charIdx += Character.charCount(utf32);\n      intIdx++;\n    }\n    scratchIntsRef.length = intIdx;\n    add(scratchIntsRef, output);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"012b9ded4b16748d14bdcec196a1b98557aec2ef","date":1302177014,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/fst/Builder#add(char[],int,int,T).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/fst/Builder#add(char[],int,int,T).mjava","sourceNew":"  /** Sugar: adds the UTF32 codepoints from char[] slice.  FST\n   *  must be FST.INPUT_TYPE.BYTE4! */\n  public void add(char[] s, int offset, int length, T output) throws IOException {\n    assert fst.getInputType() == FST.INPUT_TYPE.BYTE4;\n    int charIdx = offset;\n    int intIdx = 0;\n    final int charLimit = offset + length;\n    while(charIdx < charLimit) {\n      scratchIntsRef.grow(intIdx+1);\n      final int utf32 = Character.codePointAt(s, charIdx);\n      scratchIntsRef.ints[intIdx] = utf32;\n      charIdx += Character.charCount(utf32);\n      intIdx++;\n    }\n    scratchIntsRef.length = intIdx;\n    add(scratchIntsRef, output);\n  }\n\n","sourceOld":"  /** Sugar: adds the UTF32 chars from char[] slice.  FST\n   *  must be FST.INPUT_TYPE.BYTE4! */\n  public void add(char[] s, int offset, int length, T output) throws IOException {\n    assert fst.getInputType() == FST.INPUT_TYPE.BYTE4;\n    int charIdx = offset;\n    int intIdx = 0;\n    final int charLimit = offset + length;\n    while(charIdx < charLimit) {\n      scratchIntsRef.grow(intIdx+1);\n      final int utf32 = Character.codePointAt(s, charIdx);\n      scratchIntsRef.ints[intIdx] = utf32;\n      charIdx += Character.charCount(utf32);\n      intIdx++;\n    }\n    scratchIntsRef.length = intIdx;\n    add(scratchIntsRef, output);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/fst/Builder#add(char[],int,int,T).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/fst/Builder#add(char[],int,int,T).mjava","sourceNew":"  /** Sugar: adds the UTF32 codepoints from char[] slice.  FST\n   *  must be FST.INPUT_TYPE.BYTE4! */\n  public void add(char[] s, int offset, int length, T output) throws IOException {\n    assert fst.getInputType() == FST.INPUT_TYPE.BYTE4;\n    int charIdx = offset;\n    int intIdx = 0;\n    final int charLimit = offset + length;\n    while(charIdx < charLimit) {\n      scratchIntsRef.grow(intIdx+1);\n      final int utf32 = Character.codePointAt(s, charIdx);\n      scratchIntsRef.ints[intIdx] = utf32;\n      charIdx += Character.charCount(utf32);\n      intIdx++;\n    }\n    scratchIntsRef.length = intIdx;\n    add(scratchIntsRef, output);\n  }\n\n","sourceOld":"  /** Sugar: adds the UTF32 chars from char[] slice.  FST\n   *  must be FST.INPUT_TYPE.BYTE4! */\n  public void add(char[] s, int offset, int length, T output) throws IOException {\n    assert fst.getInputType() == FST.INPUT_TYPE.BYTE4;\n    int charIdx = offset;\n    int intIdx = 0;\n    final int charLimit = offset + length;\n    while(charIdx < charLimit) {\n      scratchIntsRef.grow(intIdx+1);\n      final int utf32 = Character.codePointAt(s, charIdx);\n      scratchIntsRef.ints[intIdx] = utf32;\n      charIdx += Character.charCount(utf32);\n      intIdx++;\n    }\n    scratchIntsRef.length = intIdx;\n    add(scratchIntsRef, output);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/fst/Builder#add(char[],int,int,T).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/fst/Builder#add(char[],int,int,T).mjava","sourceNew":"  /** Sugar: adds the UTF32 codepoints from char[] slice.  FST\n   *  must be FST.INPUT_TYPE.BYTE4! */\n  public void add(char[] s, int offset, int length, T output) throws IOException {\n    assert fst.getInputType() == FST.INPUT_TYPE.BYTE4;\n    int charIdx = offset;\n    int intIdx = 0;\n    final int charLimit = offset + length;\n    while(charIdx < charLimit) {\n      scratchIntsRef.grow(intIdx+1);\n      final int utf32 = Character.codePointAt(s, charIdx);\n      scratchIntsRef.ints[intIdx] = utf32;\n      charIdx += Character.charCount(utf32);\n      intIdx++;\n    }\n    scratchIntsRef.length = intIdx;\n    add(scratchIntsRef, output);\n  }\n\n","sourceOld":"  /** Sugar: adds the UTF32 chars from char[] slice.  FST\n   *  must be FST.INPUT_TYPE.BYTE4! */\n  public void add(char[] s, int offset, int length, T output) throws IOException {\n    assert fst.getInputType() == FST.INPUT_TYPE.BYTE4;\n    int charIdx = offset;\n    int intIdx = 0;\n    final int charLimit = offset + length;\n    while(charIdx < charLimit) {\n      scratchIntsRef.grow(intIdx+1);\n      final int utf32 = Character.codePointAt(s, charIdx);\n      scratchIntsRef.ints[intIdx] = utf32;\n      charIdx += Character.charCount(utf32);\n      intIdx++;\n    }\n    scratchIntsRef.length = intIdx;\n    add(scratchIntsRef, output);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/fst/Builder#add(char[],int,int,T).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/fst/Builder#add(char[],int,int,T).mjava","sourceNew":"  /** Sugar: adds the UTF32 codepoints from char[] slice.  FST\n   *  must be FST.INPUT_TYPE.BYTE4! */\n  public void add(char[] s, int offset, int length, T output) throws IOException {\n    assert fst.getInputType() == FST.INPUT_TYPE.BYTE4;\n    int charIdx = offset;\n    int intIdx = 0;\n    final int charLimit = offset + length;\n    while(charIdx < charLimit) {\n      scratchIntsRef.grow(intIdx+1);\n      final int utf32 = Character.codePointAt(s, charIdx);\n      scratchIntsRef.ints[intIdx] = utf32;\n      charIdx += Character.charCount(utf32);\n      intIdx++;\n    }\n    scratchIntsRef.length = intIdx;\n    add(scratchIntsRef, output);\n  }\n\n","sourceOld":"  /** Sugar: adds the UTF32 chars from char[] slice.  FST\n   *  must be FST.INPUT_TYPE.BYTE4! */\n  public void add(char[] s, int offset, int length, T output) throws IOException {\n    assert fst.getInputType() == FST.INPUT_TYPE.BYTE4;\n    int charIdx = offset;\n    int intIdx = 0;\n    final int charLimit = offset + length;\n    while(charIdx < charLimit) {\n      scratchIntsRef.grow(intIdx+1);\n      final int utf32 = Character.codePointAt(s, charIdx);\n      scratchIntsRef.ints[intIdx] = utf32;\n      charIdx += Character.charCount(utf32);\n      intIdx++;\n    }\n    scratchIntsRef.length = intIdx;\n    add(scratchIntsRef, output);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8be6e1e4fbbc94d90b78f175c03ff389b6949373","date":1306674752,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/fst/Builder#add(char[],int,int,T).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/fst/Builder#add(char[],int,int,T).mjava","sourceNew":"  /** Sugar: adds the UTF32 codepoints from char[] slice.  FST\n   *  must be FST.INPUT_TYPE.BYTE4! */\n  public void add(char[] s, int offset, int length, T output) throws IOException {\n    assert fst.getInputType() == FST.INPUT_TYPE.BYTE4;\n    int charIdx = offset;\n    int intIdx = 0;\n    final int charLimit = offset + length;\n    while(charIdx < charLimit) {\n      scratchIntsRef.grow(intIdx+1);\n      final int utf32 = Character.codePointAt(s, charIdx);\n      scratchIntsRef.ints[intIdx] = utf32;\n      charIdx += Character.charCount(utf32);\n      intIdx++;\n    }\n    scratchIntsRef.length = intIdx;\n    add(scratchIntsRef, output);\n  }\n\n","sourceOld":"  /** Sugar: adds the UTF32 codepoints from char[] slice.  FST\n   *  must be FST.INPUT_TYPE.BYTE4! */\n  public void add(char[] s, int offset, int length, T output) throws IOException {\n    assert fst.getInputType() == FST.INPUT_TYPE.BYTE4;\n    int charIdx = offset;\n    int intIdx = 0;\n    final int charLimit = offset + length;\n    while(charIdx < charLimit) {\n      scratchIntsRef.grow(intIdx+1);\n      final int utf32 = Character.codePointAt(s, charIdx);\n      scratchIntsRef.ints[intIdx] = utf32;\n      charIdx += Character.charCount(utf32);\n      intIdx++;\n    }\n    scratchIntsRef.length = intIdx;\n    add(scratchIntsRef, output);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/fst/Builder#add(char[],int,int,T).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/fst/Builder#add(char[],int,int,T).mjava","sourceNew":"  /** Sugar: adds the UTF32 codepoints from char[] slice.  FST\n   *  must be FST.INPUT_TYPE.BYTE4! */\n  public void add(char[] s, int offset, int length, T output) throws IOException {\n    assert fst.getInputType() == FST.INPUT_TYPE.BYTE4;\n    int charIdx = offset;\n    int intIdx = 0;\n    final int charLimit = offset + length;\n    while(charIdx < charLimit) {\n      scratchIntsRef.grow(intIdx+1);\n      final int utf32 = Character.codePointAt(s, charIdx);\n      scratchIntsRef.ints[intIdx] = utf32;\n      charIdx += Character.charCount(utf32);\n      intIdx++;\n    }\n    scratchIntsRef.length = intIdx;\n    add(scratchIntsRef, output);\n  }\n\n","sourceOld":"  /** Sugar: adds the UTF32 codepoints from char[] slice.  FST\n   *  must be FST.INPUT_TYPE.BYTE4! */\n  public void add(char[] s, int offset, int length, T output) throws IOException {\n    assert fst.getInputType() == FST.INPUT_TYPE.BYTE4;\n    int charIdx = offset;\n    int intIdx = 0;\n    final int charLimit = offset + length;\n    while(charIdx < charLimit) {\n      scratchIntsRef.grow(intIdx+1);\n      final int utf32 = Character.codePointAt(s, charIdx);\n      scratchIntsRef.ints[intIdx] = utf32;\n      charIdx += Character.charCount(utf32);\n      intIdx++;\n    }\n    scratchIntsRef.length = intIdx;\n    add(scratchIntsRef, output);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e10cb22a8bdb44339e282925a29182bb2f3174d","date":1306841137,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/fst/Builder#add(char[],int,int,T).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/fst/Builder#add(char[],int,int,T).mjava","sourceNew":"  /** Sugar: adds the UTF32 codepoints from char[] slice.  FST\n   *  must be FST.INPUT_TYPE.BYTE4! */\n  public void add(char[] s, int offset, int length, T output) throws IOException {\n    assert fst.getInputType() == FST.INPUT_TYPE.BYTE4;\n    int charIdx = offset;\n    int intIdx = 0;\n    final int charLimit = offset + length;\n    while(charIdx < charLimit) {\n      scratchIntsRef.grow(intIdx+1);\n      final int utf32 = Character.codePointAt(s, charIdx);\n      scratchIntsRef.ints[intIdx] = utf32;\n      charIdx += Character.charCount(utf32);\n      intIdx++;\n    }\n    scratchIntsRef.length = intIdx;\n    add(scratchIntsRef, output);\n  }\n\n","sourceOld":"  /** Sugar: adds the UTF32 codepoints from char[] slice.  FST\n   *  must be FST.INPUT_TYPE.BYTE4! */\n  public void add(char[] s, int offset, int length, T output) throws IOException {\n    assert fst.getInputType() == FST.INPUT_TYPE.BYTE4;\n    int charIdx = offset;\n    int intIdx = 0;\n    final int charLimit = offset + length;\n    while(charIdx < charLimit) {\n      scratchIntsRef.grow(intIdx+1);\n      final int utf32 = Character.codePointAt(s, charIdx);\n      scratchIntsRef.ints[intIdx] = utf32;\n      charIdx += Character.charCount(utf32);\n      intIdx++;\n    }\n    scratchIntsRef.length = intIdx;\n    add(scratchIntsRef, output);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"012b9ded4b16748d14bdcec196a1b98557aec2ef":["d4769bdea5a853f1841c485bc1fd9d79cb7022fc"],"8be6e1e4fbbc94d90b78f175c03ff389b6949373":["012b9ded4b16748d14bdcec196a1b98557aec2ef"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a3776dccca01c11e7046323cfad46a3b4a471233","8be6e1e4fbbc94d90b78f175c03ff389b6949373"],"a3776dccca01c11e7046323cfad46a3b4a471233":["d4769bdea5a853f1841c485bc1fd9d79cb7022fc","012b9ded4b16748d14bdcec196a1b98557aec2ef"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","012b9ded4b16748d14bdcec196a1b98557aec2ef"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d4769bdea5a853f1841c485bc1fd9d79cb7022fc"],"962d04139994fce5193143ef35615499a9a96d78":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","012b9ded4b16748d14bdcec196a1b98557aec2ef"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d4769bdea5a853f1841c485bc1fd9d79cb7022fc"],"d4769bdea5a853f1841c485bc1fd9d79cb7022fc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8be6e1e4fbbc94d90b78f175c03ff389b6949373"],"2e10cb22a8bdb44339e282925a29182bb2f3174d":["135621f3a0670a9394eb563224a3b76cc4dddc0f","8be6e1e4fbbc94d90b78f175c03ff389b6949373"]},"commit2Childs":{"012b9ded4b16748d14bdcec196a1b98557aec2ef":["8be6e1e4fbbc94d90b78f175c03ff389b6949373","a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78"],"8be6e1e4fbbc94d90b78f175c03ff389b6949373":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","cd5edd1f2b162a5cfa08efd17851a07373a96817","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":[],"a3776dccca01c11e7046323cfad46a3b4a471233":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","d4769bdea5a853f1841c485bc1fd9d79cb7022fc"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["2e10cb22a8bdb44339e282925a29182bb2f3174d"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"962d04139994fce5193143ef35615499a9a96d78":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["962d04139994fce5193143ef35615499a9a96d78"],"d4769bdea5a853f1841c485bc1fd9d79cb7022fc":["012b9ded4b16748d14bdcec196a1b98557aec2ef","a3776dccca01c11e7046323cfad46a3b4a471233","ab5cb6a74aefb78aa0569857970b9151dfe2e787","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2e10cb22a8bdb44339e282925a29182bb2f3174d":[]},"heads":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","962d04139994fce5193143ef35615499a9a96d78","cd5edd1f2b162a5cfa08efd17851a07373a96817","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}