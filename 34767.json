{"path":"lucene/core/src/java/org/apache/lucene/util/automaton/Operations#removeDeadStates(Automaton).mjava","commits":[{"id":"4ca1c732df8923f5624f6c06b1dcca9e69d98c96","date":1402957391,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/Operations#removeDeadStates(Automaton).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/BasicOperations#removeDeadStates(LightAutomaton).mjava","sourceNew":"  /**\n   * Removes transitions to dead states (a state is \"dead\" if it is not\n   * reachable from the initial state or no accept state is reachable from it.)\n   */\n  public static Automaton removeDeadStates(Automaton a) {\n    int numStates = a.getNumStates();\n    BitSet liveSet = getLiveStates(a);\n\n    int[] map = new int[numStates];\n\n    Automaton result = new Automaton();\n    //System.out.println(\"liveSet: \" + liveSet + \" numStates=\" + numStates);\n    for(int i=0;i<numStates;i++) {\n      if (liveSet.get(i)) {\n        map[i] = result.createState();\n        result.setAccept(map[i], a.isAccept(i));\n      }\n    }\n\n    Transition t = new Transition();\n\n    for (int i=0;i<numStates;i++) {\n      if (liveSet.get(i)) {\n        int numTransitions = a.initTransition(i, t);\n        // filter out transitions to dead states:\n        for(int j=0;j<numTransitions;j++) {\n          a.getNextTransition(t);\n          if (liveSet.get(t.dest)) {\n            result.addTransition(map[i], map[t.dest], t.min, t.max);\n          }\n        }\n      }\n    }\n\n    result.finishState();\n    assert hasDeadStates(result) == false;\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Removes transitions to dead states (a state is \"dead\" if it is not\n   * reachable from the initial state or no accept state is reachable from it.)\n   */\n  public static LightAutomaton removeDeadStates(LightAutomaton a) {\n    int numStates = a.getNumStates();\n    BitSet liveSet = getLiveStates(a);\n\n    int[] map = new int[numStates];\n\n    LightAutomaton result = new LightAutomaton();\n    //System.out.println(\"liveSet: \" + liveSet + \" numStates=\" + numStates);\n    for(int i=0;i<numStates;i++) {\n      if (liveSet.get(i)) {\n        map[i] = result.createState();\n        result.setAccept(map[i], a.isAccept(i));\n      }\n    }\n\n    Transition t = new Transition();\n\n    for (int i=0;i<numStates;i++) {\n      if (liveSet.get(i)) {\n        int numTransitions = a.initTransition(i, t);\n        // filter out transitions to dead states:\n        for(int j=0;j<numTransitions;j++) {\n          a.getNextTransition(t);\n          if (liveSet.get(t.dest)) {\n            result.addTransition(map[i], map[t.dest], t.min, t.max);\n          }\n        }\n      }\n    }\n\n    result.finishState();\n    assert hasDeadStates(result) == false;\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c84485629d80d203608e8975a1139de9933cc38","date":1403166128,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/Operations#removeDeadStates(Automaton).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Removes transitions to dead states (a state is \"dead\" if it is not\n   * reachable from the initial state or no accept state is reachable from it.)\n   */\n  public static Automaton removeDeadStates(Automaton a) {\n    int numStates = a.getNumStates();\n    BitSet liveSet = getLiveStates(a);\n\n    int[] map = new int[numStates];\n\n    Automaton result = new Automaton();\n    //System.out.println(\"liveSet: \" + liveSet + \" numStates=\" + numStates);\n    for(int i=0;i<numStates;i++) {\n      if (liveSet.get(i)) {\n        map[i] = result.createState();\n        result.setAccept(map[i], a.isAccept(i));\n      }\n    }\n\n    Transition t = new Transition();\n\n    for (int i=0;i<numStates;i++) {\n      if (liveSet.get(i)) {\n        int numTransitions = a.initTransition(i, t);\n        // filter out transitions to dead states:\n        for(int j=0;j<numTransitions;j++) {\n          a.getNextTransition(t);\n          if (liveSet.get(t.dest)) {\n            result.addTransition(map[i], map[t.dest], t.min, t.max);\n          }\n        }\n      }\n    }\n\n    result.finishState();\n    assert hasDeadStates(result) == false;\n    return result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5c84485629d80d203608e8975a1139de9933cc38":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5c84485629d80d203608e8975a1139de9933cc38"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96","5c84485629d80d203608e8975a1139de9933cc38"],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["5c84485629d80d203608e8975a1139de9933cc38"],"5c84485629d80d203608e8975a1139de9933cc38":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}