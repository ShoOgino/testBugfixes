{"path":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyReader#DirectoryTaxonomyReader(Directory).mjava","commits":[{"id":"ea469eab8fd0f3032f4fcde1c644a721e8309d3b","date":1320301582,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyReader#DirectoryTaxonomyReader(Directory).mjava","pathOld":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/lucene/LuceneTaxonomyReader#LuceneTaxonomyReader(Directory).mjava","sourceNew":"  /**\n   * Open for reading a taxonomy stored in a given {@link Directory}.\n   * @param directory\n   *    The {@link Directory} in which to the taxonomy lives. Note that\n   *    the taxonomy is read directly to that directory (not from a\n   *    subdirectory of it).\n   * @throws CorruptIndexException if the Taxonomy is corrupted.\n   * @throws IOException if another error occurred.\n   */\n  public DirectoryTaxonomyReader(Directory directory) throws IOException {\n    this.indexReader = openIndexReader(directory);\n\n    // These are the default cache sizes; they can be configured after\n    // construction with the cache's setMaxSize() method\n    ordinalCache = new LRUHashMap<String, Integer>(4000);\n    categoryCache = new LRUHashMap<Integer, String>(4000);\n\n    // TODO (Facet): consider lazily create parent array when asked, not in the constructor\n    parentArray = new ParentArray();\n    parentArray.refresh(indexReader);\n  }\n\n","sourceOld":"  /**\n   * Open for reading a taxonomy stored in a given {@link Directory}.\n   * @param directory\n   *    The {@link Directory} in which to the taxonomy lives. Note that\n   *    the taxonomy is read directly to that directory (not from a\n   *    subdirectory of it).\n   * @throws CorruptIndexException if the Taxonomy is corrupted.\n   * @throws IOException if another error occurred.\n   */\n  public LuceneTaxonomyReader(Directory directory)\n  throws CorruptIndexException, IOException {\n    this.indexReader = openIndexReader(directory);\n\n    // These are the default cache sizes; they can be configured after\n    // construction with the cache's setMaxSize() method\n    ordinalCache = new LRUHashMap<String, Integer>(4000);\n    categoryCache = new LRUHashMap<Integer, String>(4000);\n\n    // TODO (Facet): consider lazily create parent array when asked, not in the constructor\n    parentArray = new ParentArray();\n    parentArray.refresh(indexReader);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyReader#DirectoryTaxonomyReader(Directory).mjava","pathOld":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyReader#DirectoryTaxonomyReader(Directory).mjava","sourceNew":"  /**\n   * Open for reading a taxonomy stored in a given {@link Directory}.\n   * @param directory\n   *    The {@link Directory} in which to the taxonomy lives. Note that\n   *    the taxonomy is read directly to that directory (not from a\n   *    subdirectory of it).\n   * @throws CorruptIndexException if the Taxonomy is corrupted.\n   * @throws IOException if another error occurred.\n   */\n  public DirectoryTaxonomyReader(Directory directory) throws IOException {\n    this.indexReader = openIndexReader(directory);\n\n    // These are the default cache sizes; they can be configured after\n    // construction with the cache's setMaxSize() method\n    ordinalCache = new LRUHashMap<String, Integer>(4000);\n    categoryCache = new LRUHashMap<Integer, String>(4000);\n\n    // TODO (Facet): consider lazily create parent array when asked, not in the constructor\n    parentArray = new ParentArray();\n    parentArray.refresh(indexReader);\n  }\n\n","sourceOld":"  /**\n   * Open for reading a taxonomy stored in a given {@link Directory}.\n   * @param directory\n   *    The {@link Directory} in which to the taxonomy lives. Note that\n   *    the taxonomy is read directly to that directory (not from a\n   *    subdirectory of it).\n   * @throws CorruptIndexException if the Taxonomy is corrupted.\n   * @throws IOException if another error occurred.\n   */\n  public DirectoryTaxonomyReader(Directory directory) throws IOException {\n    this.indexReader = openIndexReader(directory);\n\n    // These are the default cache sizes; they can be configured after\n    // construction with the cache's setMaxSize() method\n    ordinalCache = new LRUHashMap<String, Integer>(4000);\n    categoryCache = new LRUHashMap<Integer, String>(4000);\n\n    // TODO (Facet): consider lazily create parent array when asked, not in the constructor\n    parentArray = new ParentArray();\n    parentArray.refresh(indexReader);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["ea469eab8fd0f3032f4fcde1c644a721e8309d3b"],"ea469eab8fd0f3032f4fcde1c644a721e8309d3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ea469eab8fd0f3032f4fcde1c644a721e8309d3b":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ea469eab8fd0f3032f4fcde1c644a721e8309d3b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}