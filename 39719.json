{"path":"lucene/highlighter/src/java/org/apache/lucene/search/matchhighlight/MatchRegionRetriever#highlightDocuments(PrimitiveIterator.OfInt,MatchOffsetsConsumer).mjava","commits":[{"id":"2fb36690ce41edd0bebf4e4babc0fa8c9b0f2e5c","date":1597407672,"type":0,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/matchhighlight/MatchRegionRetriever#highlightDocuments(PrimitiveIterator.OfInt,MatchOffsetsConsumer).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Low-level, high-efficiency method for highlighting large numbers of documents at once in a\n   * streaming fashion.\n   *\n   * @param docIds A stream of <em>sorted</em> document identifiers for which hit ranges should\n   *               be returned.\n   * @param consumer A streaming consumer for document-hits pairs.\n   */\n  public void highlightDocuments(PrimitiveIterator.OfInt docIds, MatchOffsetsConsumer consumer)\n      throws IOException {\n    if (leaves.isEmpty()) {\n      return;\n    }\n\n    Iterator<LeafReaderContext> ctx = leaves.iterator();\n    LeafReaderContext currentContext = ctx.next();\n    int previousDocId = -1;\n    Map<String, List<OffsetRange>> highlights = new TreeMap<>();\n    while (docIds.hasNext()) {\n      int docId = docIds.nextInt();\n\n      if (docId < previousDocId) {\n        throw new RuntimeException(\"Input document IDs must be sorted (increasing).\");\n      }\n      previousDocId = docId;\n\n      while (docId >= currentContext.docBase + currentContext.reader().maxDoc()) {\n        currentContext = ctx.next();\n      }\n\n      int contextRelativeDocId = docId - currentContext.docBase;\n\n      // Only preload fields we may potentially need.\n      FieldValueProvider documentSupplier;\n      if (preloadFields.isEmpty()) {\n        documentSupplier = null;\n      } else {\n        Document doc = currentContext.reader().document(contextRelativeDocId, preloadFields);\n        documentSupplier = new DocumentFieldValueProvider(doc);\n      }\n\n      highlights.clear();\n      highlightDocument(currentContext, contextRelativeDocId, documentSupplier, (field) -> true, highlights);\n      consumer.accept(docId, currentContext.reader(), contextRelativeDocId, highlights);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2fb36690ce41edd0bebf4e4babc0fa8c9b0f2e5c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2fb36690ce41edd0bebf4e4babc0fa8c9b0f2e5c"]},"commit2Childs":{"2fb36690ce41edd0bebf4e4babc0fa8c9b0f2e5c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2fb36690ce41edd0bebf4e4babc0fa8c9b0f2e5c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}