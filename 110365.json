{"path":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#getQuery(DeleteUpdateCommand).mjava","commits":[{"id":"fb999ed3fc6e419b9104de9ebfe62ace27f31d5f","date":1341327930,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#getQuery(DeleteUpdateCommand).mjava","pathOld":"/dev/null","sourceNew":"  private Query getQuery(DeleteUpdateCommand cmd) {\n    Query q;\n    try {\n      // move this higher in the stack?\n      QParser parser = QParser.getParser(cmd.getQuery(), \"lucene\", cmd.req);\n      q = parser.getQuery();\n      q = QueryUtils.makeQueryable(q);\n\n      // Make sure not to delete newer versions\n      if (ulog != null && cmd.getVersion() != 0 && cmd.getVersion() != -Long.MAX_VALUE) {\n        BooleanQuery bq = new BooleanQuery();\n        bq.add(q, Occur.MUST);\n        SchemaField sf = ulog.getVersionInfo().getVersionField();\n        ValueSource vs = sf.getType().getValueSource(sf, null);\n        ValueSourceRangeFilter filt = new ValueSourceRangeFilter(vs, null, Long.toString(Math.abs(cmd.getVersion())), true, true);\n        FunctionRangeQuery range = new FunctionRangeQuery(filt);\n        bq.add(range, Occur.MUST);\n        q = bq;\n      }\n\n      return q;\n\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["57cfa96e1cacc0f1f98d8732aa54935875187781"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#getQuery(DeleteUpdateCommand).mjava","pathOld":"/dev/null","sourceNew":"  private Query getQuery(DeleteUpdateCommand cmd) {\n    Query q;\n    try {\n      // move this higher in the stack?\n      QParser parser = QParser.getParser(cmd.getQuery(), \"lucene\", cmd.req);\n      q = parser.getQuery();\n      q = QueryUtils.makeQueryable(q);\n\n      // Make sure not to delete newer versions\n      if (ulog != null && cmd.getVersion() != 0 && cmd.getVersion() != -Long.MAX_VALUE) {\n        BooleanQuery bq = new BooleanQuery();\n        bq.add(q, Occur.MUST);\n        SchemaField sf = ulog.getVersionInfo().getVersionField();\n        ValueSource vs = sf.getType().getValueSource(sf, null);\n        ValueSourceRangeFilter filt = new ValueSourceRangeFilter(vs, null, Long.toString(Math.abs(cmd.getVersion())), true, true);\n        FunctionRangeQuery range = new FunctionRangeQuery(filt);\n        bq.add(range, Occur.MUST);\n        q = bq;\n      }\n\n      return q;\n\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cdb67100dc016748799a77218aa409478372d79","date":1353699950,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#getQuery(DeleteUpdateCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#getQuery(DeleteUpdateCommand).mjava","sourceNew":"  private Query getQuery(DeleteUpdateCommand cmd) {\n    Query q;\n    try {\n      // move this higher in the stack?\n      QParser parser = QParser.getParser(cmd.getQuery(), \"lucene\", cmd.req);\n      q = parser.getQuery();\n      q = QueryUtils.makeQueryable(q);\n\n      // Make sure not to delete newer versions\n      if (ulog != null && cmd.getVersion() != 0 && cmd.getVersion() != -Long.MAX_VALUE) {\n        BooleanQuery bq = new BooleanQuery();\n        bq.add(q, Occur.MUST);\n        SchemaField sf = ulog.getVersionInfo().getVersionField();\n        ValueSource vs = sf.getType().getValueSource(sf, null);\n        ValueSourceRangeFilter filt = new ValueSourceRangeFilter(vs, null, Long.toString(Math.abs(cmd.getVersion())), true, true);\n        FunctionRangeQuery range = new FunctionRangeQuery(filt);\n        bq.add(range, Occur.MUST);\n        q = bq;\n      }\n\n      return q;\n\n    } catch (SyntaxError e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n  }\n\n","sourceOld":"  private Query getQuery(DeleteUpdateCommand cmd) {\n    Query q;\n    try {\n      // move this higher in the stack?\n      QParser parser = QParser.getParser(cmd.getQuery(), \"lucene\", cmd.req);\n      q = parser.getQuery();\n      q = QueryUtils.makeQueryable(q);\n\n      // Make sure not to delete newer versions\n      if (ulog != null && cmd.getVersion() != 0 && cmd.getVersion() != -Long.MAX_VALUE) {\n        BooleanQuery bq = new BooleanQuery();\n        bq.add(q, Occur.MUST);\n        SchemaField sf = ulog.getVersionInfo().getVersionField();\n        ValueSource vs = sf.getType().getValueSource(sf, null);\n        ValueSourceRangeFilter filt = new ValueSourceRangeFilter(vs, null, Long.toString(Math.abs(cmd.getVersion())), true, true);\n        FunctionRangeQuery range = new FunctionRangeQuery(filt);\n        bq.add(range, Occur.MUST);\n        q = bq;\n      }\n\n      return q;\n\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#getQuery(DeleteUpdateCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#getQuery(DeleteUpdateCommand).mjava","sourceNew":"  private Query getQuery(DeleteUpdateCommand cmd) {\n    Query q;\n    try {\n      // move this higher in the stack?\n      QParser parser = QParser.getParser(cmd.getQuery(), \"lucene\", cmd.req);\n      q = parser.getQuery();\n      q = QueryUtils.makeQueryable(q);\n\n      // Make sure not to delete newer versions\n      if (ulog != null && cmd.getVersion() != 0 && cmd.getVersion() != -Long.MAX_VALUE) {\n        BooleanQuery bq = new BooleanQuery();\n        bq.add(q, Occur.MUST);\n        SchemaField sf = ulog.getVersionInfo().getVersionField();\n        ValueSource vs = sf.getType().getValueSource(sf, null);\n        ValueSourceRangeFilter filt = new ValueSourceRangeFilter(vs, null, Long.toString(Math.abs(cmd.getVersion())), true, true);\n        FunctionRangeQuery range = new FunctionRangeQuery(filt);\n        bq.add(range, Occur.MUST);\n        q = bq;\n      }\n\n      return q;\n\n    } catch (SyntaxError e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n  }\n\n","sourceOld":"  private Query getQuery(DeleteUpdateCommand cmd) {\n    Query q;\n    try {\n      // move this higher in the stack?\n      QParser parser = QParser.getParser(cmd.getQuery(), \"lucene\", cmd.req);\n      q = parser.getQuery();\n      q = QueryUtils.makeQueryable(q);\n\n      // Make sure not to delete newer versions\n      if (ulog != null && cmd.getVersion() != 0 && cmd.getVersion() != -Long.MAX_VALUE) {\n        BooleanQuery bq = new BooleanQuery();\n        bq.add(q, Occur.MUST);\n        SchemaField sf = ulog.getVersionInfo().getVersionField();\n        ValueSource vs = sf.getType().getValueSource(sf, null);\n        ValueSourceRangeFilter filt = new ValueSourceRangeFilter(vs, null, Long.toString(Math.abs(cmd.getVersion())), true, true);\n        FunctionRangeQuery range = new FunctionRangeQuery(filt);\n        bq.add(range, Occur.MUST);\n        q = bq;\n      }\n\n      return q;\n\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f68d01cf19df971dcdcb05e30247f4ad7ec9747","date":1434611645,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#getQuery(DeleteUpdateCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#getQuery(DeleteUpdateCommand).mjava","sourceNew":"  private Query getQuery(DeleteUpdateCommand cmd) {\n    Query q;\n    try {\n      // move this higher in the stack?\n      QParser parser = QParser.getParser(cmd.getQuery(), \"lucene\", cmd.req);\n      q = parser.getQuery();\n      q = QueryUtils.makeQueryable(q);\n\n      // Make sure not to delete newer versions\n      if (ulog != null && cmd.getVersion() != 0 && cmd.getVersion() != -Long.MAX_VALUE) {\n        BooleanQuery.Builder bq = new BooleanQuery.Builder();\n        bq.add(q, Occur.MUST);\n        SchemaField sf = ulog.getVersionInfo().getVersionField();\n        ValueSource vs = sf.getType().getValueSource(sf, null);\n        ValueSourceRangeFilter filt = new ValueSourceRangeFilter(vs, null, Long.toString(Math.abs(cmd.getVersion())), true, true);\n        FunctionRangeQuery range = new FunctionRangeQuery(filt);\n        bq.add(range, Occur.MUST);\n        q = bq.build();\n      }\n\n      return q;\n\n    } catch (SyntaxError e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n  }\n\n","sourceOld":"  private Query getQuery(DeleteUpdateCommand cmd) {\n    Query q;\n    try {\n      // move this higher in the stack?\n      QParser parser = QParser.getParser(cmd.getQuery(), \"lucene\", cmd.req);\n      q = parser.getQuery();\n      q = QueryUtils.makeQueryable(q);\n\n      // Make sure not to delete newer versions\n      if (ulog != null && cmd.getVersion() != 0 && cmd.getVersion() != -Long.MAX_VALUE) {\n        BooleanQuery bq = new BooleanQuery();\n        bq.add(q, Occur.MUST);\n        SchemaField sf = ulog.getVersionInfo().getVersionField();\n        ValueSource vs = sf.getType().getValueSource(sf, null);\n        ValueSourceRangeFilter filt = new ValueSourceRangeFilter(vs, null, Long.toString(Math.abs(cmd.getVersion())), true, true);\n        FunctionRangeQuery range = new FunctionRangeQuery(filt);\n        bq.add(range, Occur.MUST);\n        q = bq;\n      }\n\n      return q;\n\n    } catch (SyntaxError e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"57cfa96e1cacc0f1f98d8732aa54935875187781","date":1458248307,"type":3,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#getQuery(DeleteUpdateCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#getQuery(DeleteUpdateCommand).mjava","sourceNew":"  private Query getQuery(DeleteUpdateCommand cmd) {\n    Query q;\n    try {\n      // move this higher in the stack?\n      QParser parser = QParser.getParser(cmd.getQuery(), \"lucene\", cmd.req);\n      q = parser.getQuery();\n      q = QueryUtils.makeQueryable(q);\n\n      // Make sure not to delete newer versions\n      if (ulog != null && cmd.getVersion() != 0 && cmd.getVersion() != -Long.MAX_VALUE) {\n        BooleanQuery.Builder bq = new BooleanQuery.Builder();\n        bq.add(q, Occur.MUST);\n        SchemaField sf = ulog.getVersionInfo().getVersionField();\n        ValueSource vs = sf.getType().getValueSource(sf, null);\n        ValueSourceRangeFilter filt = new ValueSourceRangeFilter(vs, Long.toString(Math.abs(cmd.getVersion())), null, true, true);\n        FunctionRangeQuery range = new FunctionRangeQuery(filt);\n        bq.add(range, Occur.MUST_NOT);  // formulated in the \"MUST_NOT\" sense so we can delete docs w/o a version (some tests depend on this...)\n        q = bq.build();\n      }\n\n      return q;\n\n    } catch (SyntaxError e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n  }\n\n","sourceOld":"  private Query getQuery(DeleteUpdateCommand cmd) {\n    Query q;\n    try {\n      // move this higher in the stack?\n      QParser parser = QParser.getParser(cmd.getQuery(), \"lucene\", cmd.req);\n      q = parser.getQuery();\n      q = QueryUtils.makeQueryable(q);\n\n      // Make sure not to delete newer versions\n      if (ulog != null && cmd.getVersion() != 0 && cmd.getVersion() != -Long.MAX_VALUE) {\n        BooleanQuery.Builder bq = new BooleanQuery.Builder();\n        bq.add(q, Occur.MUST);\n        SchemaField sf = ulog.getVersionInfo().getVersionField();\n        ValueSource vs = sf.getType().getValueSource(sf, null);\n        ValueSourceRangeFilter filt = new ValueSourceRangeFilter(vs, null, Long.toString(Math.abs(cmd.getVersion())), true, true);\n        FunctionRangeQuery range = new FunctionRangeQuery(filt);\n        bq.add(range, Occur.MUST);\n        q = bq.build();\n      }\n\n      return q;\n\n    } catch (SyntaxError e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n  }\n\n","bugFix":["fb999ed3fc6e419b9104de9ebfe62ace27f31d5f"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cc5ee54a993d26579e3fe1f8f2a696b46b61c48f","date":1470751445,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#getQuery(DeleteUpdateCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#getQuery(DeleteUpdateCommand).mjava","sourceNew":"  private Query getQuery(DeleteUpdateCommand cmd) {\n    Query q;\n    try {\n      // move this higher in the stack?\n      QParser parser = QParser.getParser(cmd.getQuery(), cmd.req);\n      q = parser.getQuery();\n      q = QueryUtils.makeQueryable(q);\n\n      // Make sure not to delete newer versions\n      if (ulog != null && cmd.getVersion() != 0 && cmd.getVersion() != -Long.MAX_VALUE) {\n        BooleanQuery.Builder bq = new BooleanQuery.Builder();\n        bq.add(q, Occur.MUST);\n        SchemaField sf = ulog.getVersionInfo().getVersionField();\n        ValueSource vs = sf.getType().getValueSource(sf, null);\n        ValueSourceRangeFilter filt = new ValueSourceRangeFilter(vs, Long.toString(Math.abs(cmd.getVersion())), null, true, true);\n        FunctionRangeQuery range = new FunctionRangeQuery(filt);\n        bq.add(range, Occur.MUST_NOT);  // formulated in the \"MUST_NOT\" sense so we can delete docs w/o a version (some tests depend on this...)\n        q = bq.build();\n      }\n\n      return q;\n\n    } catch (SyntaxError e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n  }\n\n","sourceOld":"  private Query getQuery(DeleteUpdateCommand cmd) {\n    Query q;\n    try {\n      // move this higher in the stack?\n      QParser parser = QParser.getParser(cmd.getQuery(), \"lucene\", cmd.req);\n      q = parser.getQuery();\n      q = QueryUtils.makeQueryable(q);\n\n      // Make sure not to delete newer versions\n      if (ulog != null && cmd.getVersion() != 0 && cmd.getVersion() != -Long.MAX_VALUE) {\n        BooleanQuery.Builder bq = new BooleanQuery.Builder();\n        bq.add(q, Occur.MUST);\n        SchemaField sf = ulog.getVersionInfo().getVersionField();\n        ValueSource vs = sf.getType().getValueSource(sf, null);\n        ValueSourceRangeFilter filt = new ValueSourceRangeFilter(vs, Long.toString(Math.abs(cmd.getVersion())), null, true, true);\n        FunctionRangeQuery range = new FunctionRangeQuery(filt);\n        bq.add(range, Occur.MUST_NOT);  // formulated in the \"MUST_NOT\" sense so we can delete docs w/o a version (some tests depend on this...)\n        q = bq.build();\n      }\n\n      return q;\n\n    } catch (SyntaxError e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8bca25eefa1f2205e2b0ef713701dc3a0fecd702","date":1470810578,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#getQuery(DeleteUpdateCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#getQuery(DeleteUpdateCommand).mjava","sourceNew":"  private Query getQuery(DeleteUpdateCommand cmd) {\n    Query q;\n    try {\n      // move this higher in the stack?\n      QParser parser = QParser.getParser(cmd.getQuery(), cmd.req);\n      q = parser.getQuery();\n      q = QueryUtils.makeQueryable(q);\n\n      // Make sure not to delete newer versions\n      if (ulog != null && cmd.getVersion() != 0 && cmd.getVersion() != -Long.MAX_VALUE) {\n        BooleanQuery.Builder bq = new BooleanQuery.Builder();\n        bq.add(q, Occur.MUST);\n        SchemaField sf = ulog.getVersionInfo().getVersionField();\n        ValueSource vs = sf.getType().getValueSource(sf, null);\n        ValueSourceRangeFilter filt = new ValueSourceRangeFilter(vs, Long.toString(Math.abs(cmd.getVersion())), null, true, true);\n        FunctionRangeQuery range = new FunctionRangeQuery(filt);\n        bq.add(range, Occur.MUST_NOT);  // formulated in the \"MUST_NOT\" sense so we can delete docs w/o a version (some tests depend on this...)\n        q = bq.build();\n      }\n\n      return q;\n\n    } catch (SyntaxError e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n  }\n\n","sourceOld":"  private Query getQuery(DeleteUpdateCommand cmd) {\n    Query q;\n    try {\n      // move this higher in the stack?\n      QParser parser = QParser.getParser(cmd.getQuery(), \"lucene\", cmd.req);\n      q = parser.getQuery();\n      q = QueryUtils.makeQueryable(q);\n\n      // Make sure not to delete newer versions\n      if (ulog != null && cmd.getVersion() != 0 && cmd.getVersion() != -Long.MAX_VALUE) {\n        BooleanQuery.Builder bq = new BooleanQuery.Builder();\n        bq.add(q, Occur.MUST);\n        SchemaField sf = ulog.getVersionInfo().getVersionField();\n        ValueSource vs = sf.getType().getValueSource(sf, null);\n        ValueSourceRangeFilter filt = new ValueSourceRangeFilter(vs, Long.toString(Math.abs(cmd.getVersion())), null, true, true);\n        FunctionRangeQuery range = new FunctionRangeQuery(filt);\n        bq.add(range, Occur.MUST_NOT);  // formulated in the \"MUST_NOT\" sense so we can delete docs w/o a version (some tests depend on this...)\n        q = bq.build();\n      }\n\n      return q;\n\n    } catch (SyntaxError e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b013574eedcdbac35dc7e35b0ee616ffc38895d","date":1470897818,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#getQuery(DeleteUpdateCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#getQuery(DeleteUpdateCommand).mjava","sourceNew":"  private Query getQuery(DeleteUpdateCommand cmd) {\n    Query q;\n    try {\n      // move this higher in the stack?\n      QParser parser = QParser.getParser(cmd.getQuery(), cmd.req);\n      q = parser.getQuery();\n      q = QueryUtils.makeQueryable(q);\n\n      // Make sure not to delete newer versions\n      if (ulog != null && cmd.getVersion() != 0 && cmd.getVersion() != -Long.MAX_VALUE) {\n        BooleanQuery.Builder bq = new BooleanQuery.Builder();\n        bq.add(q, Occur.MUST);\n        SchemaField sf = ulog.getVersionInfo().getVersionField();\n        ValueSource vs = sf.getType().getValueSource(sf, null);\n        ValueSourceRangeFilter filt = new ValueSourceRangeFilter(vs, Long.toString(Math.abs(cmd.getVersion())), null, true, true);\n        FunctionRangeQuery range = new FunctionRangeQuery(filt);\n        bq.add(range, Occur.MUST_NOT);  // formulated in the \"MUST_NOT\" sense so we can delete docs w/o a version (some tests depend on this...)\n        q = bq.build();\n      }\n\n      return q;\n\n    } catch (SyntaxError e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n  }\n\n","sourceOld":"  private Query getQuery(DeleteUpdateCommand cmd) {\n    Query q;\n    try {\n      // move this higher in the stack?\n      QParser parser = QParser.getParser(cmd.getQuery(), \"lucene\", cmd.req);\n      q = parser.getQuery();\n      q = QueryUtils.makeQueryable(q);\n\n      // Make sure not to delete newer versions\n      if (ulog != null && cmd.getVersion() != 0 && cmd.getVersion() != -Long.MAX_VALUE) {\n        BooleanQuery.Builder bq = new BooleanQuery.Builder();\n        bq.add(q, Occur.MUST);\n        SchemaField sf = ulog.getVersionInfo().getVersionField();\n        ValueSource vs = sf.getType().getValueSource(sf, null);\n        ValueSourceRangeFilter filt = new ValueSourceRangeFilter(vs, Long.toString(Math.abs(cmd.getVersion())), null, true, true);\n        FunctionRangeQuery range = new FunctionRangeQuery(filt);\n        bq.add(range, Occur.MUST_NOT);  // formulated in the \"MUST_NOT\" sense so we can delete docs w/o a version (some tests depend on this...)\n        q = bq.build();\n      }\n\n      return q;\n\n    } catch (SyntaxError e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#getQuery(DeleteUpdateCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#getQuery(DeleteUpdateCommand).mjava","sourceNew":"  private Query getQuery(DeleteUpdateCommand cmd) {\n    Query q;\n    try {\n      // move this higher in the stack?\n      QParser parser = QParser.getParser(cmd.getQuery(), cmd.req);\n      q = parser.getQuery();\n      q = QueryUtils.makeQueryable(q);\n\n      // Make sure not to delete newer versions\n      if (ulog != null && cmd.getVersion() != 0 && cmd.getVersion() != -Long.MAX_VALUE) {\n        BooleanQuery.Builder bq = new BooleanQuery.Builder();\n        bq.add(q, Occur.MUST);\n        SchemaField sf = ulog.getVersionInfo().getVersionField();\n        ValueSource vs = sf.getType().getValueSource(sf, null);\n        ValueSourceRangeFilter filt = new ValueSourceRangeFilter(vs, Long.toString(Math.abs(cmd.getVersion())), null, true, true);\n        FunctionRangeQuery range = new FunctionRangeQuery(filt);\n        bq.add(range, Occur.MUST_NOT);  // formulated in the \"MUST_NOT\" sense so we can delete docs w/o a version (some tests depend on this...)\n        q = bq.build();\n      }\n\n      return q;\n\n    } catch (SyntaxError e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n  }\n\n","sourceOld":"  private Query getQuery(DeleteUpdateCommand cmd) {\n    Query q;\n    try {\n      // move this higher in the stack?\n      QParser parser = QParser.getParser(cmd.getQuery(), \"lucene\", cmd.req);\n      q = parser.getQuery();\n      q = QueryUtils.makeQueryable(q);\n\n      // Make sure not to delete newer versions\n      if (ulog != null && cmd.getVersion() != 0 && cmd.getVersion() != -Long.MAX_VALUE) {\n        BooleanQuery.Builder bq = new BooleanQuery.Builder();\n        bq.add(q, Occur.MUST);\n        SchemaField sf = ulog.getVersionInfo().getVersionField();\n        ValueSource vs = sf.getType().getValueSource(sf, null);\n        ValueSourceRangeFilter filt = new ValueSourceRangeFilter(vs, Long.toString(Math.abs(cmd.getVersion())), null, true, true);\n        FunctionRangeQuery range = new FunctionRangeQuery(filt);\n        bq.add(range, Occur.MUST_NOT);  // formulated in the \"MUST_NOT\" sense so we can delete docs w/o a version (some tests depend on this...)\n        q = bq.build();\n      }\n\n      return q;\n\n    } catch (SyntaxError e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"57cfa96e1cacc0f1f98d8732aa54935875187781":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["3cdb67100dc016748799a77218aa409478372d79"],"fb999ed3fc6e419b9104de9ebfe62ace27f31d5f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8bca25eefa1f2205e2b0ef713701dc3a0fecd702":["57cfa96e1cacc0f1f98d8732aa54935875187781","cc5ee54a993d26579e3fe1f8f2a696b46b61c48f"],"3cdb67100dc016748799a77218aa409478372d79":["fb999ed3fc6e419b9104de9ebfe62ace27f31d5f"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","fb999ed3fc6e419b9104de9ebfe62ace27f31d5f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["fb999ed3fc6e419b9104de9ebfe62ace27f31d5f","3cdb67100dc016748799a77218aa409478372d79"],"cc5ee54a993d26579e3fe1f8f2a696b46b61c48f":["57cfa96e1cacc0f1f98d8732aa54935875187781"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["57cfa96e1cacc0f1f98d8732aa54935875187781","8bca25eefa1f2205e2b0ef713701dc3a0fecd702"],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":["57cfa96e1cacc0f1f98d8732aa54935875187781","8bca25eefa1f2205e2b0ef713701dc3a0fecd702"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8bca25eefa1f2205e2b0ef713701dc3a0fecd702"]},"commit2Childs":{"57cfa96e1cacc0f1f98d8732aa54935875187781":["8bca25eefa1f2205e2b0ef713701dc3a0fecd702","cc5ee54a993d26579e3fe1f8f2a696b46b61c48f","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["57cfa96e1cacc0f1f98d8732aa54935875187781"],"fb999ed3fc6e419b9104de9ebfe62ace27f31d5f":["3cdb67100dc016748799a77218aa409478372d79","fe33227f6805edab2036cbb80645cc4e2d1fa424","407687e67faf6e1f02a211ca078d8e3eed631027"],"8bca25eefa1f2205e2b0ef713701dc3a0fecd702":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb67100dc016748799a77218aa409478372d79":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747","407687e67faf6e1f02a211ca078d8e3eed631027"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fb999ed3fc6e419b9104de9ebfe62ace27f31d5f","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"cc5ee54a993d26579e3fe1f8f2a696b46b61c48f":["8bca25eefa1f2205e2b0ef713701dc3a0fecd702"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fe33227f6805edab2036cbb80645cc4e2d1fa424","407687e67faf6e1f02a211ca078d8e3eed631027","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}