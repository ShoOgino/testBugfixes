{"path":"modules/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTCompletion#lookup(String,int).mjava","commits":[{"id":"7bf07f4ebadc7539de83a531e64678350d78ca26","date":1322776167,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"modules/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTCompletion#lookup(String,int).mjava","pathOld":"modules/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTLookup#lookup(String,boolean,int).mjava","sourceNew":"  /**\n   * Lookup suggestions to <code>key</code>.\n   * \n   * @param key\n   *          The prefix to which suggestions should be sought.\n   * @param num\n   *          At most this number of suggestions will be returned.\n   * @return Returns the suggestions, sorted by their approximated weight first\n   *         (decreasing) and then alphabetically (UTF-8 codepoint order).\n   */\n  public List<Completion> lookup(String key, int num) {\n    if (key.length() == 0 || automaton == null) {\n      return EMPTY_RESULT;\n    }\n\n    try {\n      BytesRef keyUtf8 = new BytesRef(key);\n      if (!higherWeightsFirst && rootArcs.length > 1) {\n        // We could emit a warning here (?). An optimal strategy for\n        // alphabetically sorted\n        // suggestions would be to add them with a constant weight -- this saves\n        // unnecessary\n        // traversals and sorting.\n        return lookupSortedAlphabetically(keyUtf8, num);\n      } else {\n        return lookupSortedByWeight(keyUtf8, num, false);\n      }\n    } catch (IOException e) {\n      // Should never happen, but anyway.\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Lookup autocomplete suggestions to <code>key</code>.\n   *  \n   * @param key The prefix to which suggestions should be sought. \n   * @param onlyMorePopular Return most popular suggestions first. This is the default\n   * behavior for this implementation. Setting it to <code>false</code> has no effect (use\n   * constant term weights to sort alphabetically only). \n   * @param num At most this number of suggestions will be returned.\n   * @return Returns the suggestions, sorted by their approximated weight first (decreasing)\n   * and then alphabetically (utf16 codepoint order).\n   */\n  @Override\n  public List<LookupResult> lookup(String key, boolean onlyMorePopular, int num) {\n    if (key.length() == 0 || automaton == null) {\n      // Keep the result an ArrayList to keep calls monomorphic.\n      return EMPTY_RESULT; \n    }\n    \n    try {\n      if (!onlyMorePopular && rootArcs.length > 1) {\n        // We could emit a warning here (?). An optimal strategy for alphabetically sorted\n        // suggestions would be to add them with a constant weight -- this saves unnecessary\n        // traversals and sorting.\n        return lookupSortedAlphabetically(key, num);\n      } else {\n        return lookupSortedByWeight(key, num, false);\n      }\n    } catch (IOException e) {\n      // Should never happen, but anyway.\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6ecc52400551de6a7d8daf646be839487911627c","date":1330076979,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"modules/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTCompletion#lookup(CharSequence,int).mjava","pathOld":"modules/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTCompletion#lookup(String,int).mjava","sourceNew":"  /**\n   * Lookup suggestions to <code>key</code>.\n   * \n   * @param key\n   *          The prefix to which suggestions should be sought.\n   * @param num\n   *          At most this number of suggestions will be returned.\n   * @return Returns the suggestions, sorted by their approximated weight first\n   *         (decreasing) and then alphabetically (UTF-8 codepoint order).\n   */\n  public List<Completion> lookup(CharSequence key, int num) {\n    if (key.length() == 0 || automaton == null) {\n      return EMPTY_RESULT;\n    }\n\n    try {\n      BytesRef keyUtf8 = new BytesRef(key);\n      if (!higherWeightsFirst && rootArcs.length > 1) {\n        // We could emit a warning here (?). An optimal strategy for\n        // alphabetically sorted\n        // suggestions would be to add them with a constant weight -- this saves\n        // unnecessary\n        // traversals and sorting.\n        return lookupSortedAlphabetically(keyUtf8, num);\n      } else {\n        return lookupSortedByWeight(keyUtf8, num, false);\n      }\n    } catch (IOException e) {\n      // Should never happen, but anyway.\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Lookup suggestions to <code>key</code>.\n   * \n   * @param key\n   *          The prefix to which suggestions should be sought.\n   * @param num\n   *          At most this number of suggestions will be returned.\n   * @return Returns the suggestions, sorted by their approximated weight first\n   *         (decreasing) and then alphabetically (UTF-8 codepoint order).\n   */\n  public List<Completion> lookup(String key, int num) {\n    if (key.length() == 0 || automaton == null) {\n      return EMPTY_RESULT;\n    }\n\n    try {\n      BytesRef keyUtf8 = new BytesRef(key);\n      if (!higherWeightsFirst && rootArcs.length > 1) {\n        // We could emit a warning here (?). An optimal strategy for\n        // alphabetically sorted\n        // suggestions would be to add them with a constant weight -- this saves\n        // unnecessary\n        // traversals and sorting.\n        return lookupSortedAlphabetically(keyUtf8, num);\n      } else {\n        return lookupSortedByWeight(keyUtf8, num, false);\n      }\n    } catch (IOException e) {\n      // Should never happen, but anyway.\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":4,"author":"Ryan McKinley","isMerge":true,"pathNew":"/dev/null","pathOld":"modules/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTCompletion#lookup(String,int).mjava","sourceNew":null,"sourceOld":"  /**\n   * Lookup suggestions to <code>key</code>.\n   * \n   * @param key\n   *          The prefix to which suggestions should be sought.\n   * @param num\n   *          At most this number of suggestions will be returned.\n   * @return Returns the suggestions, sorted by their approximated weight first\n   *         (decreasing) and then alphabetically (UTF-8 codepoint order).\n   */\n  public List<Completion> lookup(String key, int num) {\n    if (key.length() == 0 || automaton == null) {\n      return EMPTY_RESULT;\n    }\n\n    try {\n      BytesRef keyUtf8 = new BytesRef(key);\n      if (!higherWeightsFirst && rootArcs.length > 1) {\n        // We could emit a warning here (?). An optimal strategy for\n        // alphabetically sorted\n        // suggestions would be to add them with a constant weight -- this saves\n        // unnecessary\n        // traversals and sorting.\n        return lookupSortedAlphabetically(keyUtf8, num);\n      } else {\n        return lookupSortedByWeight(keyUtf8, num, false);\n      }\n    } catch (IOException e) {\n      // Should never happen, but anyway.\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7bf07f4ebadc7539de83a531e64678350d78ca26":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["7bf07f4ebadc7539de83a531e64678350d78ca26","6ecc52400551de6a7d8daf646be839487911627c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6ecc52400551de6a7d8daf646be839487911627c":["7bf07f4ebadc7539de83a531e64678350d78ca26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6ecc52400551de6a7d8daf646be839487911627c"]},"commit2Childs":{"7bf07f4ebadc7539de83a531e64678350d78ca26":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","6ecc52400551de6a7d8daf646be839487911627c"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7bf07f4ebadc7539de83a531e64678350d78ca26"],"6ecc52400551de6a7d8daf646be839487911627c":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}