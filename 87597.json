{"path":"lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldQuery#flatten(Query,IndexReader,Collection[Query],float).mjava","commits":[{"id":"2dfdf766e55e943d942055d7de53c7ad6bc45283","date":1441632886,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldQuery#flatten(Query,IndexReader,Collection[Query],float).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldQuery#flatten(Query,IndexReader,Collection[Query]).mjava","sourceNew":"  void flatten( Query sourceQuery, IndexReader reader, Collection<Query> flatQueries, float boost ) throws IOException{\n    while (sourceQuery instanceof BoostQuery) {\n      BoostQuery bq = (BoostQuery) sourceQuery;\n      sourceQuery = bq.getQuery();\n      boost *= bq.getBoost();\n    }\n    if( sourceQuery instanceof BooleanQuery ){\n      BooleanQuery bq = (BooleanQuery)sourceQuery;\n      for( BooleanClause clause : bq ) {\n        if( !clause.isProhibited() ) {\n          flatten( clause.getQuery(), reader, flatQueries, boost );\n        }\n      }\n    } else if( sourceQuery instanceof DisjunctionMaxQuery ){\n      DisjunctionMaxQuery dmq = (DisjunctionMaxQuery)sourceQuery;\n      for( Query query : dmq ){\n        flatten( query, reader, flatQueries, boost );\n      }\n    }\n    else if( sourceQuery instanceof TermQuery ){\n      if (boost != 1f) {\n        sourceQuery = new BoostQuery(sourceQuery, boost);\n      }\n      if( !flatQueries.contains( sourceQuery ) )\n        flatQueries.add( sourceQuery );\n    }\n    else if( sourceQuery instanceof PhraseQuery ){\n      PhraseQuery pq = (PhraseQuery)sourceQuery;\n      if( pq.getTerms().length == 1 )\n        sourceQuery = new TermQuery( pq.getTerms()[0] );\n      if (boost != 1f) {\n        sourceQuery = new BoostQuery(sourceQuery, boost);\n      }\n      flatQueries.add(sourceQuery);\n    } else if (sourceQuery instanceof ConstantScoreQuery) {\n      final Query q = ((ConstantScoreQuery) sourceQuery).getQuery();\n      if (q != null) {\n        flatten( q, reader, flatQueries, boost);\n      }\n    } else if (sourceQuery instanceof CustomScoreQuery) {\n      final Query q = ((CustomScoreQuery) sourceQuery).getSubQuery();\n      if (q != null) {\n        flatten( q, reader, flatQueries, boost);\n      }\n    } else if (reader != null) {\n      Query query = sourceQuery;\n      Query rewritten;\n      if (sourceQuery instanceof MultiTermQuery) {\n        rewritten = new MultiTermQuery.TopTermsScoringBooleanQueryRewrite(MAX_MTQ_TERMS).rewrite(reader, (MultiTermQuery) query);\n      } else {\n        rewritten = query.rewrite(reader);\n      }\n      if (rewritten != query) {\n        // only rewrite once and then flatten again - the rewritten query could have a speacial treatment\n        // if this method is overwritten in a subclass.\n        flatten(rewritten, reader, flatQueries, boost);\n        \n      } \n      // if the query is already rewritten we discard it\n    }\n    // else discard queries\n  }\n\n","sourceOld":"  void flatten( Query sourceQuery, IndexReader reader, Collection<Query> flatQueries ) throws IOException{\n    if( sourceQuery instanceof BooleanQuery ){\n      BooleanQuery bq = (BooleanQuery)sourceQuery;\n      for( BooleanClause clause : bq ) {\n        if( !clause.isProhibited() ) {\n          flatten( applyParentBoost( clause.getQuery(), bq ), reader, flatQueries );\n        }\n      }\n    } else if( sourceQuery instanceof DisjunctionMaxQuery ){\n      DisjunctionMaxQuery dmq = (DisjunctionMaxQuery)sourceQuery;\n      for( Query query : dmq ){\n        flatten( applyParentBoost( query, dmq ), reader, flatQueries );\n      }\n    }\n    else if( sourceQuery instanceof TermQuery ){\n      if( !flatQueries.contains( sourceQuery ) )\n        flatQueries.add( sourceQuery );\n    }\n    else if( sourceQuery instanceof PhraseQuery ){\n      if( !flatQueries.contains( sourceQuery ) ){\n        PhraseQuery pq = (PhraseQuery)sourceQuery;\n        if( pq.getTerms().length > 1 )\n          flatQueries.add( pq );\n        else if( pq.getTerms().length == 1 ){\n          Query flat = new TermQuery( pq.getTerms()[0] );\n          flat.setBoost( pq.getBoost() );\n          flatQueries.add( flat );\n        }\n      }\n    } else if (sourceQuery instanceof ConstantScoreQuery) {\n      final Query q = ((ConstantScoreQuery) sourceQuery).getQuery();\n      if (q != null) {\n        flatten( applyParentBoost( q, sourceQuery ), reader, flatQueries);\n      }\n    } else if (sourceQuery instanceof CustomScoreQuery) {\n      final Query q = ((CustomScoreQuery) sourceQuery).getSubQuery();\n      if (q != null) {\n        flatten( applyParentBoost( q, sourceQuery ), reader, flatQueries);\n      }\n    } else if (reader != null) {\n      Query query = sourceQuery;\n      if (sourceQuery instanceof MultiTermQuery) {\n        MultiTermQuery copy = (MultiTermQuery) sourceQuery.clone();\n        copy.setRewriteMethod(new MultiTermQuery.TopTermsScoringBooleanQueryRewrite(MAX_MTQ_TERMS));\n        query = copy;\n      }\n      Query rewritten = query.rewrite(reader);\n      if (rewritten != query) {\n        // only rewrite once and then flatten again - the rewritten query could have a speacial treatment\n        // if this method is overwritten in a subclass.\n        flatten(rewritten, reader, flatQueries);\n        \n      } \n      // if the query is already rewritten we discard it\n    }\n    // else discard queries\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"39c933d951bb06151b693f3f6dbace1cd7f5cd41","date":1468483844,"type":3,"author":"Martijn van Groningen","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldQuery#flatten(Query,IndexReader,Collection[Query],float).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldQuery#flatten(Query,IndexReader,Collection[Query],float).mjava","sourceNew":"  void flatten( Query sourceQuery, IndexReader reader, Collection<Query> flatQueries, float boost ) throws IOException{\n    while (sourceQuery instanceof BoostQuery) {\n      BoostQuery bq = (BoostQuery) sourceQuery;\n      sourceQuery = bq.getQuery();\n      boost *= bq.getBoost();\n    }\n    if( sourceQuery instanceof BooleanQuery ){\n      BooleanQuery bq = (BooleanQuery)sourceQuery;\n      for( BooleanClause clause : bq ) {\n        if( !clause.isProhibited() ) {\n          flatten( clause.getQuery(), reader, flatQueries, boost );\n        }\n      }\n    } else if( sourceQuery instanceof DisjunctionMaxQuery ){\n      DisjunctionMaxQuery dmq = (DisjunctionMaxQuery)sourceQuery;\n      for( Query query : dmq ){\n        flatten( query, reader, flatQueries, boost );\n      }\n    }\n    else if( sourceQuery instanceof TermQuery ){\n      if (boost != 1f) {\n        sourceQuery = new BoostQuery(sourceQuery, boost);\n      }\n      if( !flatQueries.contains( sourceQuery ) )\n        flatQueries.add( sourceQuery );\n    }\n    else if( sourceQuery instanceof PhraseQuery ){\n      PhraseQuery pq = (PhraseQuery)sourceQuery;\n      if( pq.getTerms().length == 1 )\n        sourceQuery = new TermQuery( pq.getTerms()[0] );\n      if (boost != 1f) {\n        sourceQuery = new BoostQuery(sourceQuery, boost);\n      }\n      flatQueries.add(sourceQuery);\n    } else if (sourceQuery instanceof ConstantScoreQuery) {\n      final Query q = ((ConstantScoreQuery) sourceQuery).getQuery();\n      if (q != null) {\n        flatten( q, reader, flatQueries, boost);\n      }\n    } else if (sourceQuery instanceof CustomScoreQuery) {\n      final Query q = ((CustomScoreQuery) sourceQuery).getSubQuery();\n      if (q != null) {\n        flatten( q, reader, flatQueries, boost);\n      }\n    } else if (sourceQuery instanceof ToParentBlockJoinQuery) {\n      Query childQuery = ((ToParentBlockJoinQuery) sourceQuery).getChildQuery();\n      if (childQuery != null) {\n        flatten(childQuery, reader, flatQueries, boost);\n      }\n    } else if (reader != null) {\n      Query query = sourceQuery;\n      Query rewritten;\n      if (sourceQuery instanceof MultiTermQuery) {\n        rewritten = new MultiTermQuery.TopTermsScoringBooleanQueryRewrite(MAX_MTQ_TERMS).rewrite(reader, (MultiTermQuery) query);\n      } else {\n        rewritten = query.rewrite(reader);\n      }\n      if (rewritten != query) {\n        // only rewrite once and then flatten again - the rewritten query could have a speacial treatment\n        // if this method is overwritten in a subclass.\n        flatten(rewritten, reader, flatQueries, boost);\n        \n      } \n      // if the query is already rewritten we discard it\n    }\n    // else discard queries\n  }\n\n","sourceOld":"  void flatten( Query sourceQuery, IndexReader reader, Collection<Query> flatQueries, float boost ) throws IOException{\n    while (sourceQuery instanceof BoostQuery) {\n      BoostQuery bq = (BoostQuery) sourceQuery;\n      sourceQuery = bq.getQuery();\n      boost *= bq.getBoost();\n    }\n    if( sourceQuery instanceof BooleanQuery ){\n      BooleanQuery bq = (BooleanQuery)sourceQuery;\n      for( BooleanClause clause : bq ) {\n        if( !clause.isProhibited() ) {\n          flatten( clause.getQuery(), reader, flatQueries, boost );\n        }\n      }\n    } else if( sourceQuery instanceof DisjunctionMaxQuery ){\n      DisjunctionMaxQuery dmq = (DisjunctionMaxQuery)sourceQuery;\n      for( Query query : dmq ){\n        flatten( query, reader, flatQueries, boost );\n      }\n    }\n    else if( sourceQuery instanceof TermQuery ){\n      if (boost != 1f) {\n        sourceQuery = new BoostQuery(sourceQuery, boost);\n      }\n      if( !flatQueries.contains( sourceQuery ) )\n        flatQueries.add( sourceQuery );\n    }\n    else if( sourceQuery instanceof PhraseQuery ){\n      PhraseQuery pq = (PhraseQuery)sourceQuery;\n      if( pq.getTerms().length == 1 )\n        sourceQuery = new TermQuery( pq.getTerms()[0] );\n      if (boost != 1f) {\n        sourceQuery = new BoostQuery(sourceQuery, boost);\n      }\n      flatQueries.add(sourceQuery);\n    } else if (sourceQuery instanceof ConstantScoreQuery) {\n      final Query q = ((ConstantScoreQuery) sourceQuery).getQuery();\n      if (q != null) {\n        flatten( q, reader, flatQueries, boost);\n      }\n    } else if (sourceQuery instanceof CustomScoreQuery) {\n      final Query q = ((CustomScoreQuery) sourceQuery).getSubQuery();\n      if (q != null) {\n        flatten( q, reader, flatQueries, boost);\n      }\n    } else if (reader != null) {\n      Query query = sourceQuery;\n      Query rewritten;\n      if (sourceQuery instanceof MultiTermQuery) {\n        rewritten = new MultiTermQuery.TopTermsScoringBooleanQueryRewrite(MAX_MTQ_TERMS).rewrite(reader, (MultiTermQuery) query);\n      } else {\n        rewritten = query.rewrite(reader);\n      }\n      if (rewritten != query) {\n        // only rewrite once and then flatten again - the rewritten query could have a speacial treatment\n        // if this method is overwritten in a subclass.\n        flatten(rewritten, reader, flatQueries, boost);\n        \n      } \n      // if the query is already rewritten we discard it\n    }\n    // else discard queries\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f3f5826dd60c20d0818a0c1c325637fd8aab4bd5","date":1476105151,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldQuery#flatten(Query,IndexReader,Collection[Query],float).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldQuery#flatten(Query,IndexReader,Collection[Query],float).mjava","sourceNew":"  void flatten( Query sourceQuery, IndexReader reader, Collection<Query> flatQueries, float boost ) throws IOException{\n    while (sourceQuery instanceof BoostQuery) {\n      BoostQuery bq = (BoostQuery) sourceQuery;\n      sourceQuery = bq.getQuery();\n      boost *= bq.getBoost();\n    }\n    if( sourceQuery instanceof BooleanQuery ){\n      BooleanQuery bq = (BooleanQuery)sourceQuery;\n      for( BooleanClause clause : bq ) {\n        if( !clause.isProhibited() ) {\n          flatten( clause.getQuery(), reader, flatQueries, boost );\n        }\n      }\n    } else if( sourceQuery instanceof DisjunctionMaxQuery ){\n      DisjunctionMaxQuery dmq = (DisjunctionMaxQuery)sourceQuery;\n      for( Query query : dmq ){\n        flatten( query, reader, flatQueries, boost );\n      }\n    }\n    else if( sourceQuery instanceof TermQuery ){\n      if (boost != 1f) {\n        sourceQuery = new BoostQuery(sourceQuery, boost);\n      }\n      if( !flatQueries.contains( sourceQuery ) )\n        flatQueries.add( sourceQuery );\n    }\n    else if ( sourceQuery instanceof SynonymQuery ){\n      SynonymQuery synQuery = (SynonymQuery) sourceQuery;\n      for( Term term : synQuery.getTerms()) {\n        flatten( new TermQuery(term), reader, flatQueries, boost);\n      }\n    }\n    else if( sourceQuery instanceof PhraseQuery ){\n      PhraseQuery pq = (PhraseQuery)sourceQuery;\n      if( pq.getTerms().length == 1 )\n        sourceQuery = new TermQuery( pq.getTerms()[0] );\n      if (boost != 1f) {\n        sourceQuery = new BoostQuery(sourceQuery, boost);\n      }\n      flatQueries.add(sourceQuery);\n    } else if (sourceQuery instanceof ConstantScoreQuery) {\n      final Query q = ((ConstantScoreQuery) sourceQuery).getQuery();\n      if (q != null) {\n        flatten( q, reader, flatQueries, boost);\n      }\n    } else if (sourceQuery instanceof CustomScoreQuery) {\n      final Query q = ((CustomScoreQuery) sourceQuery).getSubQuery();\n      if (q != null) {\n        flatten( q, reader, flatQueries, boost);\n      }\n    } else if (sourceQuery instanceof ToParentBlockJoinQuery) {\n      Query childQuery = ((ToParentBlockJoinQuery) sourceQuery).getChildQuery();\n      if (childQuery != null) {\n        flatten(childQuery, reader, flatQueries, boost);\n      }\n    } else if (reader != null) {\n      Query query = sourceQuery;\n      Query rewritten;\n      if (sourceQuery instanceof MultiTermQuery) {\n        rewritten = new MultiTermQuery.TopTermsScoringBooleanQueryRewrite(MAX_MTQ_TERMS).rewrite(reader, (MultiTermQuery) query);\n      } else {\n        rewritten = query.rewrite(reader);\n      }\n      if (rewritten != query) {\n        // only rewrite once and then flatten again - the rewritten query could have a speacial treatment\n        // if this method is overwritten in a subclass.\n        flatten(rewritten, reader, flatQueries, boost);\n        \n      } \n      // if the query is already rewritten we discard it\n    }\n    // else discard queries\n  }\n\n","sourceOld":"  void flatten( Query sourceQuery, IndexReader reader, Collection<Query> flatQueries, float boost ) throws IOException{\n    while (sourceQuery instanceof BoostQuery) {\n      BoostQuery bq = (BoostQuery) sourceQuery;\n      sourceQuery = bq.getQuery();\n      boost *= bq.getBoost();\n    }\n    if( sourceQuery instanceof BooleanQuery ){\n      BooleanQuery bq = (BooleanQuery)sourceQuery;\n      for( BooleanClause clause : bq ) {\n        if( !clause.isProhibited() ) {\n          flatten( clause.getQuery(), reader, flatQueries, boost );\n        }\n      }\n    } else if( sourceQuery instanceof DisjunctionMaxQuery ){\n      DisjunctionMaxQuery dmq = (DisjunctionMaxQuery)sourceQuery;\n      for( Query query : dmq ){\n        flatten( query, reader, flatQueries, boost );\n      }\n    }\n    else if( sourceQuery instanceof TermQuery ){\n      if (boost != 1f) {\n        sourceQuery = new BoostQuery(sourceQuery, boost);\n      }\n      if( !flatQueries.contains( sourceQuery ) )\n        flatQueries.add( sourceQuery );\n    }\n    else if( sourceQuery instanceof PhraseQuery ){\n      PhraseQuery pq = (PhraseQuery)sourceQuery;\n      if( pq.getTerms().length == 1 )\n        sourceQuery = new TermQuery( pq.getTerms()[0] );\n      if (boost != 1f) {\n        sourceQuery = new BoostQuery(sourceQuery, boost);\n      }\n      flatQueries.add(sourceQuery);\n    } else if (sourceQuery instanceof ConstantScoreQuery) {\n      final Query q = ((ConstantScoreQuery) sourceQuery).getQuery();\n      if (q != null) {\n        flatten( q, reader, flatQueries, boost);\n      }\n    } else if (sourceQuery instanceof CustomScoreQuery) {\n      final Query q = ((CustomScoreQuery) sourceQuery).getSubQuery();\n      if (q != null) {\n        flatten( q, reader, flatQueries, boost);\n      }\n    } else if (sourceQuery instanceof ToParentBlockJoinQuery) {\n      Query childQuery = ((ToParentBlockJoinQuery) sourceQuery).getChildQuery();\n      if (childQuery != null) {\n        flatten(childQuery, reader, flatQueries, boost);\n      }\n    } else if (reader != null) {\n      Query query = sourceQuery;\n      Query rewritten;\n      if (sourceQuery instanceof MultiTermQuery) {\n        rewritten = new MultiTermQuery.TopTermsScoringBooleanQueryRewrite(MAX_MTQ_TERMS).rewrite(reader, (MultiTermQuery) query);\n      } else {\n        rewritten = query.rewrite(reader);\n      }\n      if (rewritten != query) {\n        // only rewrite once and then flatten again - the rewritten query could have a speacial treatment\n        // if this method is overwritten in a subclass.\n        flatten(rewritten, reader, flatQueries, boost);\n        \n      } \n      // if the query is already rewritten we discard it\n    }\n    // else discard queries\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldQuery#flatten(Query,IndexReader,Collection[Query],float).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldQuery#flatten(Query,IndexReader,Collection[Query],float).mjava","sourceNew":"  void flatten( Query sourceQuery, IndexReader reader, Collection<Query> flatQueries, float boost ) throws IOException{\n    while (sourceQuery instanceof BoostQuery) {\n      BoostQuery bq = (BoostQuery) sourceQuery;\n      sourceQuery = bq.getQuery();\n      boost *= bq.getBoost();\n    }\n    if( sourceQuery instanceof BooleanQuery ){\n      BooleanQuery bq = (BooleanQuery)sourceQuery;\n      for( BooleanClause clause : bq ) {\n        if( !clause.isProhibited() ) {\n          flatten( clause.getQuery(), reader, flatQueries, boost );\n        }\n      }\n    } else if( sourceQuery instanceof DisjunctionMaxQuery ){\n      DisjunctionMaxQuery dmq = (DisjunctionMaxQuery)sourceQuery;\n      for( Query query : dmq ){\n        flatten( query, reader, flatQueries, boost );\n      }\n    }\n    else if( sourceQuery instanceof TermQuery ){\n      if (boost != 1f) {\n        sourceQuery = new BoostQuery(sourceQuery, boost);\n      }\n      if( !flatQueries.contains( sourceQuery ) )\n        flatQueries.add( sourceQuery );\n    }\n    else if ( sourceQuery instanceof SynonymQuery ){\n      SynonymQuery synQuery = (SynonymQuery) sourceQuery;\n      for( Term term : synQuery.getTerms()) {\n        flatten( new TermQuery(term), reader, flatQueries, boost);\n      }\n    }\n    else if( sourceQuery instanceof PhraseQuery ){\n      PhraseQuery pq = (PhraseQuery)sourceQuery;\n      if( pq.getTerms().length == 1 )\n        sourceQuery = new TermQuery( pq.getTerms()[0] );\n      if (boost != 1f) {\n        sourceQuery = new BoostQuery(sourceQuery, boost);\n      }\n      flatQueries.add(sourceQuery);\n    } else if (sourceQuery instanceof ConstantScoreQuery) {\n      final Query q = ((ConstantScoreQuery) sourceQuery).getQuery();\n      if (q != null) {\n        flatten( q, reader, flatQueries, boost);\n      }\n    } else if (sourceQuery instanceof CustomScoreQuery) {\n      final Query q = ((CustomScoreQuery) sourceQuery).getSubQuery();\n      if (q != null) {\n        flatten( q, reader, flatQueries, boost);\n      }\n    } else if (sourceQuery instanceof ToParentBlockJoinQuery) {\n      Query childQuery = ((ToParentBlockJoinQuery) sourceQuery).getChildQuery();\n      if (childQuery != null) {\n        flatten(childQuery, reader, flatQueries, boost);\n      }\n    } else if (reader != null) {\n      Query query = sourceQuery;\n      Query rewritten;\n      if (sourceQuery instanceof MultiTermQuery) {\n        rewritten = new MultiTermQuery.TopTermsScoringBooleanQueryRewrite(MAX_MTQ_TERMS).rewrite(reader, (MultiTermQuery) query);\n      } else {\n        rewritten = query.rewrite(reader);\n      }\n      if (rewritten != query) {\n        // only rewrite once and then flatten again - the rewritten query could have a speacial treatment\n        // if this method is overwritten in a subclass.\n        flatten(rewritten, reader, flatQueries, boost);\n        \n      } \n      // if the query is already rewritten we discard it\n    }\n    // else discard queries\n  }\n\n","sourceOld":"  void flatten( Query sourceQuery, IndexReader reader, Collection<Query> flatQueries, float boost ) throws IOException{\n    while (sourceQuery instanceof BoostQuery) {\n      BoostQuery bq = (BoostQuery) sourceQuery;\n      sourceQuery = bq.getQuery();\n      boost *= bq.getBoost();\n    }\n    if( sourceQuery instanceof BooleanQuery ){\n      BooleanQuery bq = (BooleanQuery)sourceQuery;\n      for( BooleanClause clause : bq ) {\n        if( !clause.isProhibited() ) {\n          flatten( clause.getQuery(), reader, flatQueries, boost );\n        }\n      }\n    } else if( sourceQuery instanceof DisjunctionMaxQuery ){\n      DisjunctionMaxQuery dmq = (DisjunctionMaxQuery)sourceQuery;\n      for( Query query : dmq ){\n        flatten( query, reader, flatQueries, boost );\n      }\n    }\n    else if( sourceQuery instanceof TermQuery ){\n      if (boost != 1f) {\n        sourceQuery = new BoostQuery(sourceQuery, boost);\n      }\n      if( !flatQueries.contains( sourceQuery ) )\n        flatQueries.add( sourceQuery );\n    }\n    else if( sourceQuery instanceof PhraseQuery ){\n      PhraseQuery pq = (PhraseQuery)sourceQuery;\n      if( pq.getTerms().length == 1 )\n        sourceQuery = new TermQuery( pq.getTerms()[0] );\n      if (boost != 1f) {\n        sourceQuery = new BoostQuery(sourceQuery, boost);\n      }\n      flatQueries.add(sourceQuery);\n    } else if (sourceQuery instanceof ConstantScoreQuery) {\n      final Query q = ((ConstantScoreQuery) sourceQuery).getQuery();\n      if (q != null) {\n        flatten( q, reader, flatQueries, boost);\n      }\n    } else if (sourceQuery instanceof CustomScoreQuery) {\n      final Query q = ((CustomScoreQuery) sourceQuery).getSubQuery();\n      if (q != null) {\n        flatten( q, reader, flatQueries, boost);\n      }\n    } else if (reader != null) {\n      Query query = sourceQuery;\n      Query rewritten;\n      if (sourceQuery instanceof MultiTermQuery) {\n        rewritten = new MultiTermQuery.TopTermsScoringBooleanQueryRewrite(MAX_MTQ_TERMS).rewrite(reader, (MultiTermQuery) query);\n      } else {\n        rewritten = query.rewrite(reader);\n      }\n      if (rewritten != query) {\n        // only rewrite once and then flatten again - the rewritten query could have a speacial treatment\n        // if this method is overwritten in a subclass.\n        flatten(rewritten, reader, flatQueries, boost);\n        \n      } \n      // if the query is already rewritten we discard it\n    }\n    // else discard queries\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"62f3efc82b1ead830448bb27e2af9f89417401ea","date":1513619223,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldQuery#flatten(Query,IndexReader,Collection[Query],float).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldQuery#flatten(Query,IndexReader,Collection[Query],float).mjava","sourceNew":"  void flatten( Query sourceQuery, IndexReader reader, Collection<Query> flatQueries, float boost ) throws IOException{\n    while (sourceQuery instanceof BoostQuery) {\n      BoostQuery bq = (BoostQuery) sourceQuery;\n      sourceQuery = bq.getQuery();\n      boost *= bq.getBoost();\n    }\n    if( sourceQuery instanceof BooleanQuery ){\n      BooleanQuery bq = (BooleanQuery)sourceQuery;\n      for( BooleanClause clause : bq ) {\n        if( !clause.isProhibited() ) {\n          flatten( clause.getQuery(), reader, flatQueries, boost );\n        }\n      }\n    } else if( sourceQuery instanceof DisjunctionMaxQuery ){\n      DisjunctionMaxQuery dmq = (DisjunctionMaxQuery)sourceQuery;\n      for( Query query : dmq ){\n        flatten( query, reader, flatQueries, boost );\n      }\n    }\n    else if( sourceQuery instanceof TermQuery ){\n      if (boost != 1f) {\n        sourceQuery = new BoostQuery(sourceQuery, boost);\n      }\n      if( !flatQueries.contains( sourceQuery ) )\n        flatQueries.add( sourceQuery );\n    }\n    else if ( sourceQuery instanceof SynonymQuery ){\n      SynonymQuery synQuery = (SynonymQuery) sourceQuery;\n      for( Term term : synQuery.getTerms()) {\n        flatten( new TermQuery(term), reader, flatQueries, boost);\n      }\n    }\n    else if( sourceQuery instanceof PhraseQuery ){\n      PhraseQuery pq = (PhraseQuery)sourceQuery;\n      if( pq.getTerms().length == 1 )\n        sourceQuery = new TermQuery( pq.getTerms()[0] );\n      if (boost != 1f) {\n        sourceQuery = new BoostQuery(sourceQuery, boost);\n      }\n      flatQueries.add(sourceQuery);\n    } else if (sourceQuery instanceof ConstantScoreQuery) {\n      final Query q = ((ConstantScoreQuery) sourceQuery).getQuery();\n      if (q != null) {\n        flatten( q, reader, flatQueries, boost);\n      }\n    } else if (sourceQuery instanceof CustomScoreQuery) {\n      final Query q = ((CustomScoreQuery) sourceQuery).getSubQuery();\n      if (q != null) {\n        flatten(q, reader, flatQueries, boost);\n      }\n    } else if (sourceQuery instanceof FunctionScoreQuery) {\n      final Query q = ((FunctionScoreQuery)sourceQuery).getWrappedQuery();\n      if (q != null) {\n        flatten(q, reader, flatQueries, boost);\n      }\n    } else if (sourceQuery instanceof ToParentBlockJoinQuery) {\n      Query childQuery = ((ToParentBlockJoinQuery) sourceQuery).getChildQuery();\n      if (childQuery != null) {\n        flatten(childQuery, reader, flatQueries, boost);\n      }\n    } else if (reader != null) {\n      Query query = sourceQuery;\n      Query rewritten;\n      if (sourceQuery instanceof MultiTermQuery) {\n        rewritten = new MultiTermQuery.TopTermsScoringBooleanQueryRewrite(MAX_MTQ_TERMS).rewrite(reader, (MultiTermQuery) query);\n      } else {\n        rewritten = query.rewrite(reader);\n      }\n      if (rewritten != query) {\n        // only rewrite once and then flatten again - the rewritten query could have a speacial treatment\n        // if this method is overwritten in a subclass.\n        flatten(rewritten, reader, flatQueries, boost);\n        \n      } \n      // if the query is already rewritten we discard it\n    }\n    // else discard queries\n  }\n\n","sourceOld":"  void flatten( Query sourceQuery, IndexReader reader, Collection<Query> flatQueries, float boost ) throws IOException{\n    while (sourceQuery instanceof BoostQuery) {\n      BoostQuery bq = (BoostQuery) sourceQuery;\n      sourceQuery = bq.getQuery();\n      boost *= bq.getBoost();\n    }\n    if( sourceQuery instanceof BooleanQuery ){\n      BooleanQuery bq = (BooleanQuery)sourceQuery;\n      for( BooleanClause clause : bq ) {\n        if( !clause.isProhibited() ) {\n          flatten( clause.getQuery(), reader, flatQueries, boost );\n        }\n      }\n    } else if( sourceQuery instanceof DisjunctionMaxQuery ){\n      DisjunctionMaxQuery dmq = (DisjunctionMaxQuery)sourceQuery;\n      for( Query query : dmq ){\n        flatten( query, reader, flatQueries, boost );\n      }\n    }\n    else if( sourceQuery instanceof TermQuery ){\n      if (boost != 1f) {\n        sourceQuery = new BoostQuery(sourceQuery, boost);\n      }\n      if( !flatQueries.contains( sourceQuery ) )\n        flatQueries.add( sourceQuery );\n    }\n    else if ( sourceQuery instanceof SynonymQuery ){\n      SynonymQuery synQuery = (SynonymQuery) sourceQuery;\n      for( Term term : synQuery.getTerms()) {\n        flatten( new TermQuery(term), reader, flatQueries, boost);\n      }\n    }\n    else if( sourceQuery instanceof PhraseQuery ){\n      PhraseQuery pq = (PhraseQuery)sourceQuery;\n      if( pq.getTerms().length == 1 )\n        sourceQuery = new TermQuery( pq.getTerms()[0] );\n      if (boost != 1f) {\n        sourceQuery = new BoostQuery(sourceQuery, boost);\n      }\n      flatQueries.add(sourceQuery);\n    } else if (sourceQuery instanceof ConstantScoreQuery) {\n      final Query q = ((ConstantScoreQuery) sourceQuery).getQuery();\n      if (q != null) {\n        flatten( q, reader, flatQueries, boost);\n      }\n    } else if (sourceQuery instanceof CustomScoreQuery) {\n      final Query q = ((CustomScoreQuery) sourceQuery).getSubQuery();\n      if (q != null) {\n        flatten( q, reader, flatQueries, boost);\n      }\n    } else if (sourceQuery instanceof ToParentBlockJoinQuery) {\n      Query childQuery = ((ToParentBlockJoinQuery) sourceQuery).getChildQuery();\n      if (childQuery != null) {\n        flatten(childQuery, reader, flatQueries, boost);\n      }\n    } else if (reader != null) {\n      Query query = sourceQuery;\n      Query rewritten;\n      if (sourceQuery instanceof MultiTermQuery) {\n        rewritten = new MultiTermQuery.TopTermsScoringBooleanQueryRewrite(MAX_MTQ_TERMS).rewrite(reader, (MultiTermQuery) query);\n      } else {\n        rewritten = query.rewrite(reader);\n      }\n      if (rewritten != query) {\n        // only rewrite once and then flatten again - the rewritten query could have a speacial treatment\n        // if this method is overwritten in a subclass.\n        flatten(rewritten, reader, flatQueries, boost);\n        \n      } \n      // if the query is already rewritten we discard it\n    }\n    // else discard queries\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a82662cae660e76ded4de1e9b451633e523d83e1","date":1513619223,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldQuery#flatten(Query,IndexReader,Collection[Query],float).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldQuery#flatten(Query,IndexReader,Collection[Query],float).mjava","sourceNew":"  void flatten( Query sourceQuery, IndexReader reader, Collection<Query> flatQueries, float boost ) throws IOException{\n    while (sourceQuery instanceof BoostQuery) {\n      BoostQuery bq = (BoostQuery) sourceQuery;\n      sourceQuery = bq.getQuery();\n      boost *= bq.getBoost();\n    }\n    if( sourceQuery instanceof BooleanQuery ){\n      BooleanQuery bq = (BooleanQuery)sourceQuery;\n      for( BooleanClause clause : bq ) {\n        if( !clause.isProhibited() ) {\n          flatten( clause.getQuery(), reader, flatQueries, boost );\n        }\n      }\n    } else if( sourceQuery instanceof DisjunctionMaxQuery ){\n      DisjunctionMaxQuery dmq = (DisjunctionMaxQuery)sourceQuery;\n      for( Query query : dmq ){\n        flatten( query, reader, flatQueries, boost );\n      }\n    }\n    else if( sourceQuery instanceof TermQuery ){\n      if (boost != 1f) {\n        sourceQuery = new BoostQuery(sourceQuery, boost);\n      }\n      if( !flatQueries.contains( sourceQuery ) )\n        flatQueries.add( sourceQuery );\n    }\n    else if ( sourceQuery instanceof SynonymQuery ){\n      SynonymQuery synQuery = (SynonymQuery) sourceQuery;\n      for( Term term : synQuery.getTerms()) {\n        flatten( new TermQuery(term), reader, flatQueries, boost);\n      }\n    }\n    else if( sourceQuery instanceof PhraseQuery ){\n      PhraseQuery pq = (PhraseQuery)sourceQuery;\n      if( pq.getTerms().length == 1 )\n        sourceQuery = new TermQuery( pq.getTerms()[0] );\n      if (boost != 1f) {\n        sourceQuery = new BoostQuery(sourceQuery, boost);\n      }\n      flatQueries.add(sourceQuery);\n    } else if (sourceQuery instanceof ConstantScoreQuery) {\n      final Query q = ((ConstantScoreQuery) sourceQuery).getQuery();\n      if (q != null) {\n        flatten( q, reader, flatQueries, boost);\n      }\n    } else if (sourceQuery instanceof FunctionScoreQuery) {\n      final Query q = ((FunctionScoreQuery)sourceQuery).getWrappedQuery();\n      if (q != null) {\n        flatten(q, reader, flatQueries, boost);\n      }\n    } else if (sourceQuery instanceof ToParentBlockJoinQuery) {\n      Query childQuery = ((ToParentBlockJoinQuery) sourceQuery).getChildQuery();\n      if (childQuery != null) {\n        flatten(childQuery, reader, flatQueries, boost);\n      }\n    } else if (reader != null) {\n      Query query = sourceQuery;\n      Query rewritten;\n      if (sourceQuery instanceof MultiTermQuery) {\n        rewritten = new MultiTermQuery.TopTermsScoringBooleanQueryRewrite(MAX_MTQ_TERMS).rewrite(reader, (MultiTermQuery) query);\n      } else {\n        rewritten = query.rewrite(reader);\n      }\n      if (rewritten != query) {\n        // only rewrite once and then flatten again - the rewritten query could have a speacial treatment\n        // if this method is overwritten in a subclass.\n        flatten(rewritten, reader, flatQueries, boost);\n        \n      } \n      // if the query is already rewritten we discard it\n    }\n    // else discard queries\n  }\n\n","sourceOld":"  void flatten( Query sourceQuery, IndexReader reader, Collection<Query> flatQueries, float boost ) throws IOException{\n    while (sourceQuery instanceof BoostQuery) {\n      BoostQuery bq = (BoostQuery) sourceQuery;\n      sourceQuery = bq.getQuery();\n      boost *= bq.getBoost();\n    }\n    if( sourceQuery instanceof BooleanQuery ){\n      BooleanQuery bq = (BooleanQuery)sourceQuery;\n      for( BooleanClause clause : bq ) {\n        if( !clause.isProhibited() ) {\n          flatten( clause.getQuery(), reader, flatQueries, boost );\n        }\n      }\n    } else if( sourceQuery instanceof DisjunctionMaxQuery ){\n      DisjunctionMaxQuery dmq = (DisjunctionMaxQuery)sourceQuery;\n      for( Query query : dmq ){\n        flatten( query, reader, flatQueries, boost );\n      }\n    }\n    else if( sourceQuery instanceof TermQuery ){\n      if (boost != 1f) {\n        sourceQuery = new BoostQuery(sourceQuery, boost);\n      }\n      if( !flatQueries.contains( sourceQuery ) )\n        flatQueries.add( sourceQuery );\n    }\n    else if ( sourceQuery instanceof SynonymQuery ){\n      SynonymQuery synQuery = (SynonymQuery) sourceQuery;\n      for( Term term : synQuery.getTerms()) {\n        flatten( new TermQuery(term), reader, flatQueries, boost);\n      }\n    }\n    else if( sourceQuery instanceof PhraseQuery ){\n      PhraseQuery pq = (PhraseQuery)sourceQuery;\n      if( pq.getTerms().length == 1 )\n        sourceQuery = new TermQuery( pq.getTerms()[0] );\n      if (boost != 1f) {\n        sourceQuery = new BoostQuery(sourceQuery, boost);\n      }\n      flatQueries.add(sourceQuery);\n    } else if (sourceQuery instanceof ConstantScoreQuery) {\n      final Query q = ((ConstantScoreQuery) sourceQuery).getQuery();\n      if (q != null) {\n        flatten( q, reader, flatQueries, boost);\n      }\n    } else if (sourceQuery instanceof CustomScoreQuery) {\n      final Query q = ((CustomScoreQuery) sourceQuery).getSubQuery();\n      if (q != null) {\n        flatten(q, reader, flatQueries, boost);\n      }\n    } else if (sourceQuery instanceof FunctionScoreQuery) {\n      final Query q = ((FunctionScoreQuery)sourceQuery).getWrappedQuery();\n      if (q != null) {\n        flatten(q, reader, flatQueries, boost);\n      }\n    } else if (sourceQuery instanceof ToParentBlockJoinQuery) {\n      Query childQuery = ((ToParentBlockJoinQuery) sourceQuery).getChildQuery();\n      if (childQuery != null) {\n        flatten(childQuery, reader, flatQueries, boost);\n      }\n    } else if (reader != null) {\n      Query query = sourceQuery;\n      Query rewritten;\n      if (sourceQuery instanceof MultiTermQuery) {\n        rewritten = new MultiTermQuery.TopTermsScoringBooleanQueryRewrite(MAX_MTQ_TERMS).rewrite(reader, (MultiTermQuery) query);\n      } else {\n        rewritten = query.rewrite(reader);\n      }\n      if (rewritten != query) {\n        // only rewrite once and then flatten again - the rewritten query could have a speacial treatment\n        // if this method is overwritten in a subclass.\n        flatten(rewritten, reader, flatQueries, boost);\n        \n      } \n      // if the query is already rewritten we discard it\n    }\n    // else discard queries\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"944feda4f2ab2e2de62f308b3cbb6ba6953902ef","date":1539867181,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldQuery#flatten(Query,IndexReader,Collection[Query],float).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldQuery#flatten(Query,IndexReader,Collection[Query],float).mjava","sourceNew":"  protected void flatten( Query sourceQuery, IndexReader reader, Collection<Query> flatQueries, float boost ) throws IOException {\n    while (sourceQuery instanceof BoostQuery) {\n      BoostQuery bq = (BoostQuery) sourceQuery;\n      sourceQuery = bq.getQuery();\n      boost *= bq.getBoost();\n    }\n    if( sourceQuery instanceof BooleanQuery ){\n      BooleanQuery bq = (BooleanQuery)sourceQuery;\n      for( BooleanClause clause : bq ) {\n        if( !clause.isProhibited() ) {\n          flatten( clause.getQuery(), reader, flatQueries, boost );\n        }\n      }\n    } else if( sourceQuery instanceof DisjunctionMaxQuery ){\n      DisjunctionMaxQuery dmq = (DisjunctionMaxQuery)sourceQuery;\n      for( Query query : dmq ){\n        flatten( query, reader, flatQueries, boost );\n      }\n    }\n    else if( sourceQuery instanceof TermQuery ){\n      if (boost != 1f) {\n        sourceQuery = new BoostQuery(sourceQuery, boost);\n      }\n      if( !flatQueries.contains( sourceQuery ) )\n        flatQueries.add( sourceQuery );\n    }\n    else if ( sourceQuery instanceof SynonymQuery ){\n      SynonymQuery synQuery = (SynonymQuery) sourceQuery;\n      for( Term term : synQuery.getTerms()) {\n        flatten( new TermQuery(term), reader, flatQueries, boost);\n      }\n    }\n    else if( sourceQuery instanceof PhraseQuery ){\n      PhraseQuery pq = (PhraseQuery)sourceQuery;\n      if( pq.getTerms().length == 1 )\n        sourceQuery = new TermQuery( pq.getTerms()[0] );\n      if (boost != 1f) {\n        sourceQuery = new BoostQuery(sourceQuery, boost);\n      }\n      flatQueries.add(sourceQuery);\n    } else if (sourceQuery instanceof ConstantScoreQuery) {\n      final Query q = ((ConstantScoreQuery) sourceQuery).getQuery();\n      if (q != null) {\n        flatten( q, reader, flatQueries, boost);\n      }\n    } else if (sourceQuery instanceof FunctionScoreQuery) {\n      final Query q = ((FunctionScoreQuery) sourceQuery).getWrappedQuery();\n      if (q != null) {\n        flatten(q, reader, flatQueries, boost);\n      }\n    } else if (reader != null) {\n      Query query = sourceQuery;\n      Query rewritten;\n      if (sourceQuery instanceof MultiTermQuery) {\n        rewritten = new MultiTermQuery.TopTermsScoringBooleanQueryRewrite(MAX_MTQ_TERMS).rewrite(reader, (MultiTermQuery) query);\n      } else {\n        rewritten = query.rewrite(reader);\n      }\n      if (rewritten != query) {\n        // only rewrite once and then flatten again - the rewritten query could have a speacial treatment\n        // if this method is overwritten in a subclass.\n        flatten(rewritten, reader, flatQueries, boost);\n        \n      } \n      // if the query is already rewritten we discard it\n    }\n    // else discard queries\n  }\n\n","sourceOld":"  void flatten( Query sourceQuery, IndexReader reader, Collection<Query> flatQueries, float boost ) throws IOException{\n    while (sourceQuery instanceof BoostQuery) {\n      BoostQuery bq = (BoostQuery) sourceQuery;\n      sourceQuery = bq.getQuery();\n      boost *= bq.getBoost();\n    }\n    if( sourceQuery instanceof BooleanQuery ){\n      BooleanQuery bq = (BooleanQuery)sourceQuery;\n      for( BooleanClause clause : bq ) {\n        if( !clause.isProhibited() ) {\n          flatten( clause.getQuery(), reader, flatQueries, boost );\n        }\n      }\n    } else if( sourceQuery instanceof DisjunctionMaxQuery ){\n      DisjunctionMaxQuery dmq = (DisjunctionMaxQuery)sourceQuery;\n      for( Query query : dmq ){\n        flatten( query, reader, flatQueries, boost );\n      }\n    }\n    else if( sourceQuery instanceof TermQuery ){\n      if (boost != 1f) {\n        sourceQuery = new BoostQuery(sourceQuery, boost);\n      }\n      if( !flatQueries.contains( sourceQuery ) )\n        flatQueries.add( sourceQuery );\n    }\n    else if ( sourceQuery instanceof SynonymQuery ){\n      SynonymQuery synQuery = (SynonymQuery) sourceQuery;\n      for( Term term : synQuery.getTerms()) {\n        flatten( new TermQuery(term), reader, flatQueries, boost);\n      }\n    }\n    else if( sourceQuery instanceof PhraseQuery ){\n      PhraseQuery pq = (PhraseQuery)sourceQuery;\n      if( pq.getTerms().length == 1 )\n        sourceQuery = new TermQuery( pq.getTerms()[0] );\n      if (boost != 1f) {\n        sourceQuery = new BoostQuery(sourceQuery, boost);\n      }\n      flatQueries.add(sourceQuery);\n    } else if (sourceQuery instanceof ConstantScoreQuery) {\n      final Query q = ((ConstantScoreQuery) sourceQuery).getQuery();\n      if (q != null) {\n        flatten( q, reader, flatQueries, boost);\n      }\n    } else if (sourceQuery instanceof FunctionScoreQuery) {\n      final Query q = ((FunctionScoreQuery)sourceQuery).getWrappedQuery();\n      if (q != null) {\n        flatten(q, reader, flatQueries, boost);\n      }\n    } else if (sourceQuery instanceof ToParentBlockJoinQuery) {\n      Query childQuery = ((ToParentBlockJoinQuery) sourceQuery).getChildQuery();\n      if (childQuery != null) {\n        flatten(childQuery, reader, flatQueries, boost);\n      }\n    } else if (reader != null) {\n      Query query = sourceQuery;\n      Query rewritten;\n      if (sourceQuery instanceof MultiTermQuery) {\n        rewritten = new MultiTermQuery.TopTermsScoringBooleanQueryRewrite(MAX_MTQ_TERMS).rewrite(reader, (MultiTermQuery) query);\n      } else {\n        rewritten = query.rewrite(reader);\n      }\n      if (rewritten != query) {\n        // only rewrite once and then flatten again - the rewritten query could have a speacial treatment\n        // if this method is overwritten in a subclass.\n        flatten(rewritten, reader, flatQueries, boost);\n        \n      } \n      // if the query is already rewritten we discard it\n    }\n    // else discard queries\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"944feda4f2ab2e2de62f308b3cbb6ba6953902ef":["a82662cae660e76ded4de1e9b451633e523d83e1"],"f3f5826dd60c20d0818a0c1c325637fd8aab4bd5":["39c933d951bb06151b693f3f6dbace1cd7f5cd41"],"a82662cae660e76ded4de1e9b451633e523d83e1":["62f3efc82b1ead830448bb27e2af9f89417401ea"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"62f3efc82b1ead830448bb27e2af9f89417401ea":["f3f5826dd60c20d0818a0c1c325637fd8aab4bd5"],"39c933d951bb06151b693f3f6dbace1cd7f5cd41":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["2dfdf766e55e943d942055d7de53c7ad6bc45283","f3f5826dd60c20d0818a0c1c325637fd8aab4bd5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["944feda4f2ab2e2de62f308b3cbb6ba6953902ef"]},"commit2Childs":{"944feda4f2ab2e2de62f308b3cbb6ba6953902ef":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f3f5826dd60c20d0818a0c1c325637fd8aab4bd5":["62f3efc82b1ead830448bb27e2af9f89417401ea","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a82662cae660e76ded4de1e9b451633e523d83e1":["944feda4f2ab2e2de62f308b3cbb6ba6953902ef"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["39c933d951bb06151b693f3f6dbace1cd7f5cd41","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"62f3efc82b1ead830448bb27e2af9f89417401ea":["a82662cae660e76ded4de1e9b451633e523d83e1"],"39c933d951bb06151b693f3f6dbace1cd7f5cd41":["f3f5826dd60c20d0818a0c1c325637fd8aab4bd5"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}