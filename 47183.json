{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/FixedGapTermsIndexWriter.SimpleFieldWriter#add(BytesRef,TermStats,long).mjava","commits":[{"id":"038e2a9b07e2f8ae58336613cea227bf8b973484","date":1346850972,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/FixedGapTermsIndexWriter.SimpleFieldWriter#add(BytesRef,TermStats,long).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/FixedGapTermsIndexWriter.SimpleFieldWriter#add(BytesRef,TermStats,long).mjava","sourceNew":"    @Override\n    public void add(BytesRef text, TermStats stats, long termsFilePointer) throws IOException {\n      final int indexedTermLength = indexedTermPrefixLength(lastTerm, text);\n      //System.out.println(\"FGW: add text=\" + text.utf8ToString() + \" \" + text + \" fp=\" + termsFilePointer);\n\n      // write only the min prefix that shows the diff\n      // against prior term\n      out.writeBytes(text.bytes, text.offset, indexedTermLength);\n\n      if (termLengths.length == numIndexTerms) {\n        termLengths = ArrayUtil.grow(termLengths);\n      }\n      if (termsPointerDeltas.length == numIndexTerms) {\n        termsPointerDeltas = ArrayUtil.grow(termsPointerDeltas);\n      }\n\n      // save delta terms pointer\n      termsPointerDeltas[numIndexTerms] = (int) (termsFilePointer - lastTermsPointer);\n      lastTermsPointer = termsFilePointer;\n\n      // save term length (in bytes)\n      assert indexedTermLength <= Short.MAX_VALUE;\n      termLengths[numIndexTerms] = (short) indexedTermLength;\n      totTermLength += indexedTermLength;\n\n      lastTerm.copyBytes(text);\n      numIndexTerms++;\n    }\n\n","sourceOld":"    @Override\n    public void add(BytesRef text, TermStats stats, long termsFilePointer) throws IOException {\n      final int indexedTermLength = indexedTermPrefixLength(lastTerm, text);\n      //System.out.println(\"FGW: add text=\" + text.utf8ToString() + \" \" + text + \" fp=\" + termsFilePointer);\n\n      // write only the min prefix that shows the diff\n      // against prior term\n      out.writeBytes(text.bytes, text.offset, indexedTermLength);\n\n      if (termLengths.length == numIndexTerms) {\n        termLengths = ArrayUtil.grow(termLengths);\n      }\n      if (termsPointerDeltas.length == numIndexTerms) {\n        termsPointerDeltas = ArrayUtil.grow(termsPointerDeltas);\n      }\n\n      // save delta terms pointer\n      termsPointerDeltas[numIndexTerms] = (int) (termsFilePointer - lastTermsPointer);\n      lastTermsPointer = termsFilePointer;\n\n      // save term length (in bytes)\n      assert indexedTermLength <= Short.MAX_VALUE;\n      termLengths[numIndexTerms] = (short) indexedTermLength;\n      totTermLength += indexedTermLength;\n\n      lastTerm.copyBytes(text);\n      numIndexTerms++;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a45bec74b98f6fc05f52770cfb425739e6563960","date":1375119292,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/FixedGapTermsIndexWriter.SimpleFieldWriter#add(BytesRef,TermStats,long).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/FixedGapTermsIndexWriter.SimpleFieldWriter#add(BytesRef,TermStats,long).mjava","sourceNew":"    @Override\n    public void add(BytesRef text, TermStats stats, long termsFilePointer) throws IOException {\n      final int indexedTermLength = indexedTermPrefixLength(lastTerm, text);\n      //System.out.println(\"FGW: add text=\" + text.utf8ToString() + \" \" + text + \" fp=\" + termsFilePointer);\n\n      // write only the min prefix that shows the diff\n      // against prior term\n      out.writeBytes(text.bytes, text.offset, indexedTermLength);\n\n      // save delta terms pointer\n      termAddresses.add(termsFilePointer - termsStart);\n\n      // save term length (in bytes)\n      assert indexedTermLength <= Short.MAX_VALUE;\n      currentOffset += indexedTermLength;\n      termOffsets.add(currentOffset);\n\n      lastTerm.copyBytes(text);\n      numIndexTerms++;\n    }\n\n","sourceOld":"    @Override\n    public void add(BytesRef text, TermStats stats, long termsFilePointer) throws IOException {\n      final int indexedTermLength = indexedTermPrefixLength(lastTerm, text);\n      //System.out.println(\"FGW: add text=\" + text.utf8ToString() + \" \" + text + \" fp=\" + termsFilePointer);\n\n      // write only the min prefix that shows the diff\n      // against prior term\n      out.writeBytes(text.bytes, text.offset, indexedTermLength);\n\n      if (termLengths.length == numIndexTerms) {\n        termLengths = ArrayUtil.grow(termLengths);\n      }\n      if (termsPointerDeltas.length == numIndexTerms) {\n        termsPointerDeltas = ArrayUtil.grow(termsPointerDeltas);\n      }\n\n      // save delta terms pointer\n      termsPointerDeltas[numIndexTerms] = (int) (termsFilePointer - lastTermsPointer);\n      lastTermsPointer = termsFilePointer;\n\n      // save term length (in bytes)\n      assert indexedTermLength <= Short.MAX_VALUE;\n      termLengths[numIndexTerms] = (short) indexedTermLength;\n      totTermLength += indexedTermLength;\n\n      lastTerm.copyBytes(text);\n      numIndexTerms++;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/FixedGapTermsIndexWriter.SimpleFieldWriter#add(BytesRef,TermStats,long).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/FixedGapTermsIndexWriter.SimpleFieldWriter#add(BytesRef,TermStats,long).mjava","sourceNew":"    @Override\n    public void add(BytesRef text, TermStats stats, long termsFilePointer) throws IOException {\n      final int indexedTermLength = indexedTermPrefixLength(lastTerm, text);\n      //System.out.println(\"FGW: add text=\" + text.utf8ToString() + \" \" + text + \" fp=\" + termsFilePointer);\n\n      // write only the min prefix that shows the diff\n      // against prior term\n      out.writeBytes(text.bytes, text.offset, indexedTermLength);\n\n      // save delta terms pointer\n      termAddresses.add(termsFilePointer - termsStart);\n\n      // save term length (in bytes)\n      assert indexedTermLength <= Short.MAX_VALUE;\n      currentOffset += indexedTermLength;\n      termOffsets.add(currentOffset);\n\n      lastTerm.copyBytes(text);\n      numIndexTerms++;\n    }\n\n","sourceOld":"    @Override\n    public void add(BytesRef text, TermStats stats, long termsFilePointer) throws IOException {\n      final int indexedTermLength = indexedTermPrefixLength(lastTerm, text);\n      //System.out.println(\"FGW: add text=\" + text.utf8ToString() + \" \" + text + \" fp=\" + termsFilePointer);\n\n      // write only the min prefix that shows the diff\n      // against prior term\n      out.writeBytes(text.bytes, text.offset, indexedTermLength);\n\n      if (termLengths.length == numIndexTerms) {\n        termLengths = ArrayUtil.grow(termLengths);\n      }\n      if (termsPointerDeltas.length == numIndexTerms) {\n        termsPointerDeltas = ArrayUtil.grow(termsPointerDeltas);\n      }\n\n      // save delta terms pointer\n      termsPointerDeltas[numIndexTerms] = (int) (termsFilePointer - lastTermsPointer);\n      lastTermsPointer = termsFilePointer;\n\n      // save term length (in bytes)\n      assert indexedTermLength <= Short.MAX_VALUE;\n      termLengths[numIndexTerms] = (short) indexedTermLength;\n      totTermLength += indexedTermLength;\n\n      lastTerm.copyBytes(text);\n      numIndexTerms++;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","date":1407854805,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/FixedGapTermsIndexWriter.SimpleFieldWriter#add(BytesRef,TermStats,long).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/FixedGapTermsIndexWriter.SimpleFieldWriter#add(BytesRef,TermStats,long).mjava","sourceNew":"    @Override\n    public void add(BytesRef text, TermStats stats, long termsFilePointer) throws IOException {\n      final int indexedTermLength = indexedTermPrefixLength(lastTerm.get(), text);\n      //System.out.println(\"FGW: add text=\" + text.utf8ToString() + \" \" + text + \" fp=\" + termsFilePointer);\n\n      // write only the min prefix that shows the diff\n      // against prior term\n      out.writeBytes(text.bytes, text.offset, indexedTermLength);\n\n      // save delta terms pointer\n      termAddresses.add(termsFilePointer - termsStart);\n\n      // save term length (in bytes)\n      assert indexedTermLength <= Short.MAX_VALUE;\n      currentOffset += indexedTermLength;\n      termOffsets.add(currentOffset);\n\n      lastTerm.copyBytes(text);\n      numIndexTerms++;\n    }\n\n","sourceOld":"    @Override\n    public void add(BytesRef text, TermStats stats, long termsFilePointer) throws IOException {\n      final int indexedTermLength = indexedTermPrefixLength(lastTerm, text);\n      //System.out.println(\"FGW: add text=\" + text.utf8ToString() + \" \" + text + \" fp=\" + termsFilePointer);\n\n      // write only the min prefix that shows the diff\n      // against prior term\n      out.writeBytes(text.bytes, text.offset, indexedTermLength);\n\n      // save delta terms pointer\n      termAddresses.add(termsFilePointer - termsStart);\n\n      // save term length (in bytes)\n      assert indexedTermLength <= Short.MAX_VALUE;\n      currentOffset += indexedTermLength;\n      termOffsets.add(currentOffset);\n\n      lastTerm.copyBytes(text);\n      numIndexTerms++;\n    }\n\n","bugFix":["b1add9ddc0005b07550d4350720aac22dc9886b3"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"456d7e7092cb043c740b4674301660ee8abc26fe","date":1517645879,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/FixedGapTermsIndexWriter.SimpleFieldWriter#add(BytesRef,TermStats,long).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/FixedGapTermsIndexWriter.SimpleFieldWriter#add(BytesRef,TermStats,long).mjava","sourceNew":"    @Override\n    public void add(BytesRef text, TermStats stats, long termsFilePointer) throws IOException {\n      final int indexedTermLength;\n      if (numIndexTerms == 0) {\n        // no previous term: no bytes to write\n        indexedTermLength = 0;\n      } else {\n        indexedTermLength = indexedTermPrefixLength(lastTerm.get(), text);\n      }\n      //System.out.println(\"FGW: add text=\" + text.utf8ToString() + \" \" + text + \" fp=\" + termsFilePointer);\n\n      // write only the min prefix that shows the diff\n      // against prior term\n      out.writeBytes(text.bytes, text.offset, indexedTermLength);\n\n      // save delta terms pointer\n      termAddresses.add(termsFilePointer - termsStart);\n\n      // save term length (in bytes)\n      assert indexedTermLength <= Short.MAX_VALUE;\n      currentOffset += indexedTermLength;\n      termOffsets.add(currentOffset);\n\n      lastTerm.copyBytes(text);\n      numIndexTerms++;\n    }\n\n","sourceOld":"    @Override\n    public void add(BytesRef text, TermStats stats, long termsFilePointer) throws IOException {\n      final int indexedTermLength = indexedTermPrefixLength(lastTerm.get(), text);\n      //System.out.println(\"FGW: add text=\" + text.utf8ToString() + \" \" + text + \" fp=\" + termsFilePointer);\n\n      // write only the min prefix that shows the diff\n      // against prior term\n      out.writeBytes(text.bytes, text.offset, indexedTermLength);\n\n      // save delta terms pointer\n      termAddresses.add(termsFilePointer - termsStart);\n\n      // save term length (in bytes)\n      assert indexedTermLength <= Short.MAX_VALUE;\n      currentOffset += indexedTermLength;\n      termOffsets.add(currentOffset);\n\n      lastTerm.copyBytes(text);\n      numIndexTerms++;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"456d7e7092cb043c740b4674301660ee8abc26fe":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"a45bec74b98f6fc05f52770cfb425739e6563960":["038e2a9b07e2f8ae58336613cea227bf8b973484"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["038e2a9b07e2f8ae58336613cea227bf8b973484"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["a45bec74b98f6fc05f52770cfb425739e6563960"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["456d7e7092cb043c740b4674301660ee8abc26fe"],"038e2a9b07e2f8ae58336613cea227bf8b973484":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"456d7e7092cb043c740b4674301660ee8abc26fe":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a45bec74b98f6fc05f52770cfb425739e6563960":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["038e2a9b07e2f8ae58336613cea227bf8b973484"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["456d7e7092cb043c740b4674301660ee8abc26fe"],"038e2a9b07e2f8ae58336613cea227bf8b973484":["a45bec74b98f6fc05f52770cfb425739e6563960","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}