{"path":"lucene/core/src/test/org/apache/lucene/search/TestTopFieldCollector#testRandomMinCompetitiveScore().mjava","commits":[{"id":"9d8f3dc907fb89a6215dc071ea011dd6cd395563","date":1569926650,"type":1,"author":"jimczi","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestTopFieldCollector#testRandomMinCompetitiveScore().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestTopDocsCollector#testGlobalScore().mjava","sourceNew":"  public void testRandomMinCompetitiveScore() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, newIndexWriterConfig());\n    int numDocs = atLeast(1000);\n    for (int i = 0; i < numDocs; ++i) {\n      int numAs = 1 + random().nextInt(5);\n      int numBs = random().nextFloat() < 0.5f ?  0 : 1 + random().nextInt(5);\n      int numCs = random().nextFloat() < 0.1f ?  0 : 1 + random().nextInt(5);\n      Document doc = new Document();\n      for (int j = 0; j < numAs; ++j) {\n        doc.add(new StringField(\"f\", \"A\", Field.Store.NO));\n      }\n      for (int j = 0; j < numBs; ++j) {\n        doc.add(new StringField(\"f\", \"B\", Field.Store.NO));\n      }\n      for (int j = 0; j < numCs; ++j) {\n        doc.add(new StringField(\"f\", \"C\", Field.Store.NO));\n      }\n      w.addDocument(doc);\n    }\n    IndexReader indexReader = w.getReader();\n    w.close();\n    Query[] queries = new Query[]{\n        new TermQuery(new Term(\"f\", \"A\")),\n        new TermQuery(new Term(\"f\", \"B\")),\n        new TermQuery(new Term(\"f\", \"C\")),\n        new BooleanQuery.Builder()\n            .add(new TermQuery(new Term(\"f\", \"A\")), BooleanClause.Occur.MUST)\n            .add(new TermQuery(new Term(\"f\", \"B\")), BooleanClause.Occur.SHOULD)\n            .build()\n    };\n    for (Query query : queries) {\n      Sort sort = new Sort(new SortField[]{SortField.FIELD_SCORE, SortField.FIELD_DOC});\n      TopFieldCollector fieldCollector = doSearchWithThreshold(5, 0, query, sort, indexReader);\n      TopDocs tdc = doConcurrentSearchWithThreshold(5, 0, query, sort, indexReader);\n      TopDocs tdc2 = fieldCollector.topDocs();\n\n      assertTrue(tdc.totalHits.value > 0);\n      assertTrue(tdc2.totalHits.value > 0);\n      CheckHits.checkEqual(query, tdc.scoreDocs, tdc2.scoreDocs);\n    }\n\n    indexReader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testGlobalScore() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, newIndexWriterConfig());\n    int numDocs = atLeast(1000);\n    for (int i = 0; i < numDocs; ++i) {\n      int numAs = 1 + random().nextInt(5);\n      int numBs = random().nextFloat() < 0.5f ?  0 : 1 + random().nextInt(5);\n      int numCs = random().nextFloat() < 0.1f ?  0 : 1 + random().nextInt(5);\n      Document doc = new Document();\n      for (int j = 0; j < numAs; ++j) {\n        doc.add(new StringField(\"f\", \"A\", Field.Store.NO));\n      }\n      for (int j = 0; j < numBs; ++j) {\n        doc.add(new StringField(\"f\", \"B\", Field.Store.NO));\n      }\n      for (int j = 0; j < numCs; ++j) {\n        doc.add(new StringField(\"f\", \"C\", Field.Store.NO));\n      }\n      w.addDocument(doc);\n    }\n    IndexReader indexReader = w.getReader();\n    w.close();\n    Query[] queries = new Query[]{\n        new TermQuery(new Term(\"f\", \"A\")),\n        new TermQuery(new Term(\"f\", \"B\")),\n        new TermQuery(new Term(\"f\", \"C\")),\n        new BooleanQuery.Builder()\n            .add(new TermQuery(new Term(\"f\", \"A\")), BooleanClause.Occur.MUST)\n            .add(new TermQuery(new Term(\"f\", \"B\")), BooleanClause.Occur.SHOULD)\n            .build()\n    };\n    for (Query query : queries) {\n      TopDocsCollector collector = doSearchWithThreshold(5, 10, query, indexReader);\n      TopDocs tdc = doConcurrentSearchWithThreshold(5, 10, query, indexReader);\n      TopDocs tdc2 = collector.topDocs();\n\n      assertTrue(tdc.totalHits.value > 0);\n      assertTrue(tdc2.totalHits.value > 0);\n      CheckHits.checkEqual(query, tdc.scoreDocs, tdc2.scoreDocs);\n\n      Sort sort = new Sort(new SortField[]{SortField.FIELD_SCORE, SortField.FIELD_DOC});\n      TopDocsCollector fieldCollector = doSearchWithThreshold(5, 10, query, sort, indexReader);\n      tdc = doConcurrentSearchWithThreshold(5, 10, query, sort, indexReader);\n      tdc2 = fieldCollector.topDocs();\n\n      assertTrue(tdc.totalHits.value > 0);\n      assertTrue(tdc2.totalHits.value > 0);\n      CheckHits.checkEqual(query, tdc.scoreDocs, tdc2.scoreDocs);\n    }\n\n    indexReader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3fc6bc0fbd97ca2f45fd376fa8e733728e665c4f","date":1571662992,"type":0,"author":"Jim Ferenczi","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestTopFieldCollector#testRandomMinCompetitiveScore().mjava","pathOld":"/dev/null","sourceNew":"  public void testRandomMinCompetitiveScore() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, newIndexWriterConfig());\n    int numDocs = atLeast(1000);\n    for (int i = 0; i < numDocs; ++i) {\n      int numAs = 1 + random().nextInt(5);\n      int numBs = random().nextFloat() < 0.5f ?  0 : 1 + random().nextInt(5);\n      int numCs = random().nextFloat() < 0.1f ?  0 : 1 + random().nextInt(5);\n      Document doc = new Document();\n      for (int j = 0; j < numAs; ++j) {\n        doc.add(new StringField(\"f\", \"A\", Field.Store.NO));\n      }\n      for (int j = 0; j < numBs; ++j) {\n        doc.add(new StringField(\"f\", \"B\", Field.Store.NO));\n      }\n      for (int j = 0; j < numCs; ++j) {\n        doc.add(new StringField(\"f\", \"C\", Field.Store.NO));\n      }\n      w.addDocument(doc);\n    }\n    IndexReader indexReader = w.getReader();\n    w.close();\n    Query[] queries = new Query[]{\n        new TermQuery(new Term(\"f\", \"A\")),\n        new TermQuery(new Term(\"f\", \"B\")),\n        new TermQuery(new Term(\"f\", \"C\")),\n        new BooleanQuery.Builder()\n            .add(new TermQuery(new Term(\"f\", \"A\")), BooleanClause.Occur.MUST)\n            .add(new TermQuery(new Term(\"f\", \"B\")), BooleanClause.Occur.SHOULD)\n            .build()\n    };\n    for (Query query : queries) {\n      Sort sort = new Sort(new SortField[]{SortField.FIELD_SCORE, SortField.FIELD_DOC});\n      TopFieldCollector fieldCollector = doSearchWithThreshold(5, 0, query, sort, indexReader);\n      TopDocs tdc = doConcurrentSearchWithThreshold(5, 0, query, sort, indexReader);\n      TopDocs tdc2 = fieldCollector.topDocs();\n\n      assertTrue(tdc.totalHits.value > 0);\n      assertTrue(tdc2.totalHits.value > 0);\n      CheckHits.checkEqual(query, tdc.scoreDocs, tdc2.scoreDocs);\n    }\n\n    indexReader.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3fc6bc0fbd97ca2f45fd376fa8e733728e665c4f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9d8f3dc907fb89a6215dc071ea011dd6cd395563"],"9d8f3dc907fb89a6215dc071ea011dd6cd395563":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3fc6bc0fbd97ca2f45fd376fa8e733728e665c4f"]},"commit2Childs":{"3fc6bc0fbd97ca2f45fd376fa8e733728e665c4f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9d8f3dc907fb89a6215dc071ea011dd6cd395563":["3fc6bc0fbd97ca2f45fd376fa8e733728e665c4f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3fc6bc0fbd97ca2f45fd376fa8e733728e665c4f","9d8f3dc907fb89a6215dc071ea011dd6cd395563"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}