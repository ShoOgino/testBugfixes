{"path":"lucene/backwards/src/java/org/apache/lucene/search/function/CustomScoreQuery.CustomWeight#doExplain(IndexReader,int).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/search/function/CustomScoreQuery.CustomWeight#doExplain(IndexReader,int).mjava","pathOld":"backwards/src/java/org/apache/lucene/search/function/CustomScoreQuery.CustomWeight#doExplain(IndexReader,int).mjava","sourceNew":"    private Explanation doExplain(IndexReader reader, int doc) throws IOException {\n      Explanation subQueryExpl = subQueryWeight.explain(reader, doc);\n      if (!subQueryExpl.isMatch()) {\n        return subQueryExpl;\n      }\n      // match\n      Explanation[] valSrcExpls = new Explanation[valSrcWeights.length];\n      for(int i = 0; i < valSrcWeights.length; i++) {\n        valSrcExpls[i] = valSrcWeights[i].explain(reader, doc);\n      }\n      Explanation customExp = CustomScoreQuery.this.getCustomScoreProvider(reader).customExplain(doc,subQueryExpl,valSrcExpls);\n      float sc = getValue() * customExp.getValue();\n      Explanation res = new ComplexExplanation(\n        true, sc, CustomScoreQuery.this.toString() + \", product of:\");\n      res.addDetail(customExp);\n      res.addDetail(new Explanation(getValue(), \"queryBoost\")); // actually using the q boost as q weight (== weight value)\n      return res;\n    }\n\n","sourceOld":"    private Explanation doExplain(IndexReader reader, int doc) throws IOException {\n      Explanation subQueryExpl = subQueryWeight.explain(reader, doc);\n      if (!subQueryExpl.isMatch()) {\n        return subQueryExpl;\n      }\n      // match\n      Explanation[] valSrcExpls = new Explanation[valSrcWeights.length];\n      for(int i = 0; i < valSrcWeights.length; i++) {\n        valSrcExpls[i] = valSrcWeights[i].explain(reader, doc);\n      }\n      Explanation customExp = CustomScoreQuery.this.getCustomScoreProvider(reader).customExplain(doc,subQueryExpl,valSrcExpls);\n      float sc = getValue() * customExp.getValue();\n      Explanation res = new ComplexExplanation(\n        true, sc, CustomScoreQuery.this.toString() + \", product of:\");\n      res.addDetail(customExp);\n      res.addDetail(new Explanation(getValue(), \"queryBoost\")); // actually using the q boost as q weight (== weight value)\n      return res;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/java/org/apache/lucene/search/function/CustomScoreQuery.CustomWeight#doExplain(IndexReader,int).mjava","sourceNew":null,"sourceOld":"    private Explanation doExplain(IndexReader reader, int doc) throws IOException {\n      Explanation subQueryExpl = subQueryWeight.explain(reader, doc);\n      if (!subQueryExpl.isMatch()) {\n        return subQueryExpl;\n      }\n      // match\n      Explanation[] valSrcExpls = new Explanation[valSrcWeights.length];\n      for(int i = 0; i < valSrcWeights.length; i++) {\n        valSrcExpls[i] = valSrcWeights[i].explain(reader, doc);\n      }\n      Explanation customExp = CustomScoreQuery.this.getCustomScoreProvider(reader).customExplain(doc,subQueryExpl,valSrcExpls);\n      float sc = getValue() * customExp.getValue();\n      Explanation res = new ComplexExplanation(\n        true, sc, CustomScoreQuery.this.toString() + \", product of:\");\n      res.addDetail(customExp);\n      res.addDetail(new Explanation(getValue(), \"queryBoost\")); // actually using the q boost as q weight (== weight value)\n      return res;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}