{"path":"src/java/org/apache/lucene/search/FilterManager#getFilter(Filter).mjava","commits":[{"id":"203bc84a5a9461a17a2a8e136f872bf4657aaee4","date":1176138824,"type":0,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/FilterManager#getFilter(Filter).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns the cached version of the filter.  Allows the caller to pass up\n   * a small filter but this will keep a persistent version around and allow\n   * the caching filter to do its job.\n   * \n   * @param filter The input filter\n   * @return The cached version of the filter\n   */\n  public Filter getFilter(Filter filter) {\n    synchronized(cache) {\n      FilterItem fi = null;\n      fi = (FilterItem)cache.get(new Integer(filter.hashCode()));\n      if (fi != null) {\n        fi.timestamp = new Date().getTime();\n        return fi.filter;\n      }\n      cache.put(new Integer(filter.hashCode()), new FilterItem(filter));\n      return filter;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6bcde5e3f23911110baa101ed062b544162825b5","date":1254521804,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/FilterManager#getFilter(Filter).mjava","pathOld":"src/java/org/apache/lucene/search/FilterManager#getFilter(Filter).mjava","sourceNew":"  /**\n   * Returns the cached version of the filter.  Allows the caller to pass up\n   * a small filter but this will keep a persistent version around and allow\n   * the caching filter to do its job.\n   * \n   * @param filter The input filter\n   * @return The cached version of the filter\n   */\n  public Filter getFilter(Filter filter) {\n    synchronized(cache) {\n      FilterItem fi = null;\n      fi = (FilterItem)cache.get(Integer.valueOf(filter.hashCode()));\n      if (fi != null) {\n        fi.timestamp = new Date().getTime();\n        return fi.filter;\n      }\n      cache.put(Integer.valueOf(filter.hashCode()), new FilterItem(filter));\n      return filter;\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns the cached version of the filter.  Allows the caller to pass up\n   * a small filter but this will keep a persistent version around and allow\n   * the caching filter to do its job.\n   * \n   * @param filter The input filter\n   * @return The cached version of the filter\n   */\n  public Filter getFilter(Filter filter) {\n    synchronized(cache) {\n      FilterItem fi = null;\n      fi = (FilterItem)cache.get(new Integer(filter.hashCode()));\n      if (fi != null) {\n        fi.timestamp = new Date().getTime();\n        return fi.filter;\n      }\n      cache.put(new Integer(filter.hashCode()), new FilterItem(filter));\n      return filter;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ef82ff03e4016c705811b2658e81471a645c0e49","date":1255900293,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/FilterManager#getFilter(Filter).mjava","pathOld":"src/java/org/apache/lucene/search/FilterManager#getFilter(Filter).mjava","sourceNew":"  /**\n   * Returns the cached version of the filter.  Allows the caller to pass up\n   * a small filter but this will keep a persistent version around and allow\n   * the caching filter to do its job.\n   * \n   * @param filter The input filter\n   * @return The cached version of the filter\n   */\n  public Filter getFilter(Filter filter) {\n    synchronized(cache) {\n      FilterItem fi = null;\n      fi = cache.get(Integer.valueOf(filter.hashCode()));\n      if (fi != null) {\n        fi.timestamp = new Date().getTime();\n        return fi.filter;\n      }\n      cache.put(Integer.valueOf(filter.hashCode()), new FilterItem(filter));\n      return filter;\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns the cached version of the filter.  Allows the caller to pass up\n   * a small filter but this will keep a persistent version around and allow\n   * the caching filter to do its job.\n   * \n   * @param filter The input filter\n   * @return The cached version of the filter\n   */\n  public Filter getFilter(Filter filter) {\n    synchronized(cache) {\n      FilterItem fi = null;\n      fi = (FilterItem)cache.get(Integer.valueOf(filter.hashCode()));\n      if (fi != null) {\n        fi.timestamp = new Date().getTime();\n        return fi.filter;\n      }\n      cache.put(Integer.valueOf(filter.hashCode()), new FilterItem(filter));\n      return filter;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/FilterManager#getFilter(Filter).mjava","pathOld":"src/java/org/apache/lucene/search/FilterManager#getFilter(Filter).mjava","sourceNew":"  /**\n   * Returns the cached version of the filter.  Allows the caller to pass up\n   * a small filter but this will keep a persistent version around and allow\n   * the caching filter to do its job.\n   * \n   * @param filter The input filter\n   * @return The cached version of the filter\n   */\n  public Filter getFilter(Filter filter) {\n    synchronized(cache) {\n      FilterItem fi = null;\n      fi = cache.get(Integer.valueOf(filter.hashCode()));\n      if (fi != null) {\n        fi.timestamp = new Date().getTime();\n        return fi.filter;\n      }\n      cache.put(Integer.valueOf(filter.hashCode()), new FilterItem(filter));\n      return filter;\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns the cached version of the filter.  Allows the caller to pass up\n   * a small filter but this will keep a persistent version around and allow\n   * the caching filter to do its job.\n   * \n   * @param filter The input filter\n   * @return The cached version of the filter\n   */\n  public Filter getFilter(Filter filter) {\n    synchronized(cache) {\n      FilterItem fi = null;\n      fi = cache.get(Integer.valueOf(filter.hashCode()));\n      if (fi != null) {\n        fi.timestamp = new Date().getTime();\n        return fi.filter;\n      }\n      cache.put(Integer.valueOf(filter.hashCode()), new FilterItem(filter));\n      return filter;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6bcde5e3f23911110baa101ed062b544162825b5":["203bc84a5a9461a17a2a8e136f872bf4657aaee4"],"ef82ff03e4016c705811b2658e81471a645c0e49":["6bcde5e3f23911110baa101ed062b544162825b5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"203bc84a5a9461a17a2a8e136f872bf4657aaee4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["ef82ff03e4016c705811b2658e81471a645c0e49"]},"commit2Childs":{"6bcde5e3f23911110baa101ed062b544162825b5":["ef82ff03e4016c705811b2658e81471a645c0e49"],"ef82ff03e4016c705811b2658e81471a645c0e49":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["203bc84a5a9461a17a2a8e136f872bf4657aaee4"],"203bc84a5a9461a17a2a8e136f872bf4657aaee4":["6bcde5e3f23911110baa101ed062b544162825b5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}