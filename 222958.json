{"path":"solr/contrib/analytics/src/test/org/apache/solr/analytics/legacy/facet/LegacyQueryFacetCloudTest#beforeClass().mjava","commits":[{"id":"3bd4c6955956e76c96eb12dfe64108ed03522983","date":1508262722,"type":0,"author":"Houston Putman","isMerge":false,"pathNew":"solr/contrib/analytics/src/test/org/apache/solr/analytics/legacy/facet/LegacyQueryFacetCloudTest#beforeClass().mjava","pathOld":"/dev/null","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    cleanIndex();\n    \n    //INT\n    int1TestStart.add(new ArrayList<Integer>());\n    int2TestStart.add(new ArrayList<Integer>());\n    \n    //LONG\n    longTestStart.add(new ArrayList<Long>());\n    longTestStart.add(new ArrayList<Long>());\n    \n    //FLOAT\n    floatTestStart.add(new ArrayList<Float>());\n    floatTestStart.add(new ArrayList<Float>());\n    floatTestStart.add(new ArrayList<Float>());\n\n    UpdateRequest req = new UpdateRequest();\n    \n    for (int j = 0; j < NUM_LOOPS; ++j) {\n      int i = j%INT;\n      long l = j%LONG;\n      float f = j%FLOAT;\n      double d = j%DOUBLE;\n      int dt = j%DATE;\n      int s = j%STRING;\n      \n      List<String> fields = new ArrayList<>();\n      fields.add(\"id\"); fields.add(\"1000\"+j);\n      fields.add(\"int_id\"); fields.add(\"\" + i);\n      fields.add(\"long_ld\"); fields.add(\"\" + l);\n      fields.add(\"float_fd\"); fields.add(\"\" + f);\n      fields.add(\"double_dd\"); fields.add(\"\" + d);\n      fields.add(\"date_dtd\"); fields.add((1000+dt) + \"-01-01T23:59:59Z\");\n      fields.add(\"string_sd\"); fields.add(\"abc\" + s);\n      req.add(fields.toArray(new String[0]));\n      \n      if (f<=50) {\n        int1TestStart.get(0).add(i);\n      }\n      if (f<=30) {\n        int2TestStart.get(0).add(i);\n      }\n      if (s == 1) {\n        longTestStart.get(0).add(l);\n      }\n      if (s == 2) {\n        longTestStart.get(1).add(l);\n      }\n      if (l>=30) {\n        floatTestStart.get(0).add(f);\n      }\n      if (d<=50) {\n        floatTestStart.get(1).add(f);\n      }\n      if (l>=20) {\n        floatTestStart.get(2).add(f);\n      }\n    }\n\n    req.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":5,"author":"markrmiller","isMerge":false,"pathNew":"solr/contrib/analytics/src/test/org/apache/solr/analytics/legacy/facet/LegacyQueryFacetCloudTest#beforeTest().mjava","pathOld":"solr/contrib/analytics/src/test/org/apache/solr/analytics/legacy/facet/LegacyQueryFacetCloudTest#beforeClass().mjava","sourceNew":"  @Before\n  public void beforeTest() throws Exception {\n    \n    //INT\n    int1TestStart.add(new ArrayList<Integer>());\n    int2TestStart.add(new ArrayList<Integer>());\n    \n    //LONG\n    longTestStart.add(new ArrayList<Long>());\n    longTestStart.add(new ArrayList<Long>());\n    \n    //FLOAT\n    floatTestStart.add(new ArrayList<Float>());\n    floatTestStart.add(new ArrayList<Float>());\n    floatTestStart.add(new ArrayList<Float>());\n\n    UpdateRequest req = new UpdateRequest();\n    \n    for (int j = 0; j < NUM_LOOPS; ++j) {\n      int i = j%INT;\n      long l = j%LONG;\n      float f = j%FLOAT;\n      double d = j%DOUBLE;\n      int dt = j%DATE;\n      int s = j%STRING;\n      \n      List<String> fields = new ArrayList<>();\n      fields.add(\"id\"); fields.add(\"1000\"+j);\n      fields.add(\"int_id\"); fields.add(\"\" + i);\n      fields.add(\"long_ld\"); fields.add(\"\" + l);\n      fields.add(\"float_fd\"); fields.add(\"\" + f);\n      fields.add(\"double_dd\"); fields.add(\"\" + d);\n      fields.add(\"date_dtd\"); fields.add((1000+dt) + \"-01-01T23:59:59Z\");\n      fields.add(\"string_sd\"); fields.add(\"abc\" + s);\n      req.add(fields.toArray(new String[0]));\n      \n      if (f<=50) {\n        int1TestStart.get(0).add(i);\n      }\n      if (f<=30) {\n        int2TestStart.get(0).add(i);\n      }\n      if (s == 1) {\n        longTestStart.get(0).add(l);\n      }\n      if (s == 2) {\n        longTestStart.get(1).add(l);\n      }\n      if (l>=30) {\n        floatTestStart.get(0).add(f);\n      }\n      if (d<=50) {\n        floatTestStart.get(1).add(f);\n      }\n      if (l>=20) {\n        floatTestStart.get(2).add(f);\n      }\n    }\n\n    req.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    cleanIndex();\n    \n    //INT\n    int1TestStart.add(new ArrayList<Integer>());\n    int2TestStart.add(new ArrayList<Integer>());\n    \n    //LONG\n    longTestStart.add(new ArrayList<Long>());\n    longTestStart.add(new ArrayList<Long>());\n    \n    //FLOAT\n    floatTestStart.add(new ArrayList<Float>());\n    floatTestStart.add(new ArrayList<Float>());\n    floatTestStart.add(new ArrayList<Float>());\n\n    UpdateRequest req = new UpdateRequest();\n    \n    for (int j = 0; j < NUM_LOOPS; ++j) {\n      int i = j%INT;\n      long l = j%LONG;\n      float f = j%FLOAT;\n      double d = j%DOUBLE;\n      int dt = j%DATE;\n      int s = j%STRING;\n      \n      List<String> fields = new ArrayList<>();\n      fields.add(\"id\"); fields.add(\"1000\"+j);\n      fields.add(\"int_id\"); fields.add(\"\" + i);\n      fields.add(\"long_ld\"); fields.add(\"\" + l);\n      fields.add(\"float_fd\"); fields.add(\"\" + f);\n      fields.add(\"double_dd\"); fields.add(\"\" + d);\n      fields.add(\"date_dtd\"); fields.add((1000+dt) + \"-01-01T23:59:59Z\");\n      fields.add(\"string_sd\"); fields.add(\"abc\" + s);\n      req.add(fields.toArray(new String[0]));\n      \n      if (f<=50) {\n        int1TestStart.get(0).add(i);\n      }\n      if (f<=30) {\n        int2TestStart.get(0).add(i);\n      }\n      if (s == 1) {\n        longTestStart.get(0).add(l);\n      }\n      if (s == 2) {\n        longTestStart.get(1).add(l);\n      }\n      if (l>=30) {\n        floatTestStart.get(0).add(f);\n      }\n      if (d<=50) {\n        floatTestStart.get(1).add(f);\n      }\n      if (l>=20) {\n        floatTestStart.get(2).add(f);\n      }\n    }\n\n    req.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["3bd4c6955956e76c96eb12dfe64108ed03522983"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"3bd4c6955956e76c96eb12dfe64108ed03522983":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3bd4c6955956e76c96eb12dfe64108ed03522983"],"3bd4c6955956e76c96eb12dfe64108ed03522983":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}