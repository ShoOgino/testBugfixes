{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimComputePlanAction#testNodeLost().mjava","commits":[{"id":"a6a5c1c40529f15b445e6720dfde1967e139bff1","date":1535375643,"type":1,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimComputePlanAction#testNodeLost().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestComputePlanAction#testNodeLost().mjava","sourceNew":"  @Test\n  public void testNodeLost() throws Exception  {\n    // let's start a node so that we have at least two\n    String node = cluster.simAddNode();\n    AssertingTriggerAction.expectedNode = node;\n\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '7s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'test','class':'\" + TestSimComputePlanAction.AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testNodeLost\",\n        \"conf\",1, 2);\n    create.process(solrClient);\n\n    CloudTestUtils.waitForState(cluster, \"Timed out waiting for replicas of new collection to be active\",\n        \"testNodeLost\", CloudTestUtils.clusterShape(1, 2, false, true));\n\n    ClusterState clusterState = cluster.getClusterStateProvider().getClusterState();\n    log.debug(\"-- cluster state: {}\", clusterState);\n    DocCollection collection = clusterState.getCollection(\"testNodeLost\");\n    List<Replica> replicas = collection.getReplicas(node);\n    assertNotNull(replicas);\n    assertFalse(replicas.isEmpty());\n\n    // start another node because because when the other node goes away, the cluster policy requires only\n    // 1 replica per node and none on the overseer\n    String node2 = cluster.simAddNode();\n    assertTrue(node2 + \"is not live yet\", cluster.getClusterStateProvider().getClusterState().liveNodesContain(node2) );\n\n    // stop the original node\n    cluster.simRemoveNode(node, false);\n    log.info(\"Stopped_node : {}\", node);\n\n    assertTrue(\"Trigger was not fired even after 10 seconds\", triggerFiredLatch.await(10, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null , \" + eventRef.get(), operations);\n    assertEquals(\"ComputePlanAction should have computed exactly 1 operation\", 1, operations.size());\n    SolrRequest solrRequest = operations.get(0);\n    SolrParams params = solrRequest.getParams();\n    assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n    String replicaToBeMoved = params.get(\"replica\");\n    assertEquals(\"Unexpected node in computed operation\", replicas.get(0).getName(), replicaToBeMoved);\n\n    // shutdown the extra node that we had started\n    cluster.simRemoveNode(node2, false);\n  }\n\n","sourceOld":"  @Test\n  public void testNodeLost() throws Exception  {\n    // let's start a node so that we have at least two\n    String node = cluster.simAddNode();\n    AssertingTriggerAction.expectedNode = node;\n\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '7s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'test','class':'\" + TestComputePlanAction.AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testNodeLost\",\n        \"conf\",1, 2);\n    create.process(solrClient);\n\n    CloudTestUtils.waitForState(cluster, \"Timed out waiting for replicas of new collection to be active\",\n        \"testNodeLost\", CloudTestUtils.clusterShape(1, 2, false, true));\n\n    ClusterState clusterState = cluster.getClusterStateProvider().getClusterState();\n    log.debug(\"-- cluster state: {}\", clusterState);\n    DocCollection collection = clusterState.getCollection(\"testNodeLost\");\n    List<Replica> replicas = collection.getReplicas(node);\n    assertNotNull(replicas);\n    assertFalse(replicas.isEmpty());\n\n    // start another node because because when the other node goes away, the cluster policy requires only\n    // 1 replica per node and none on the overseer\n    String node2 = cluster.simAddNode();\n    assertTrue(node2 + \"is not live yet\", cluster.getClusterStateProvider().getClusterState().liveNodesContain(node2) );\n\n    // stop the original node\n    cluster.simRemoveNode(node, false);\n    log.info(\"Stopped_node : {}\", node);\n\n    assertTrue(\"Trigger was not fired even after 10 seconds\", triggerFiredLatch.await(10, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null , \" + eventRef.get(), operations);\n    assertEquals(\"ComputePlanAction should have computed exactly 1 operation\", 1, operations.size());\n    SolrRequest solrRequest = operations.get(0);\n    SolrParams params = solrRequest.getParams();\n    assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n    String replicaToBeMoved = params.get(\"replica\");\n    assertEquals(\"Unexpected node in computed operation\", replicas.get(0).getName(), replicaToBeMoved);\n\n    // shutdown the extra node that we had started\n    cluster.simRemoveNode(node2, false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"44dd40f6c2c1465aebf4677bab10f696c7ea18d8","date":1539566013,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimComputePlanAction#testNodeLost().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimComputePlanAction#testNodeLost().mjava","sourceNew":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 14-Oct-2018\n  public void testNodeLost() throws Exception  {\n    // let's start a node so that we have at least two\n    String node = cluster.simAddNode();\n    AssertingTriggerAction.expectedNode = node;\n\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '7s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'test','class':'\" + TestSimComputePlanAction.AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testNodeLost\",\n        \"conf\",1, 2);\n    create.process(solrClient);\n\n    CloudTestUtils.waitForState(cluster, \"Timed out waiting for replicas of new collection to be active\",\n        \"testNodeLost\", CloudTestUtils.clusterShape(1, 2, false, true));\n\n    ClusterState clusterState = cluster.getClusterStateProvider().getClusterState();\n    log.debug(\"-- cluster state: {}\", clusterState);\n    DocCollection collection = clusterState.getCollection(\"testNodeLost\");\n    List<Replica> replicas = collection.getReplicas(node);\n    assertNotNull(replicas);\n    assertFalse(replicas.isEmpty());\n\n    // start another node because because when the other node goes away, the cluster policy requires only\n    // 1 replica per node and none on the overseer\n    String node2 = cluster.simAddNode();\n    assertTrue(node2 + \"is not live yet\", cluster.getClusterStateProvider().getClusterState().liveNodesContain(node2) );\n\n    // stop the original node\n    cluster.simRemoveNode(node, false);\n    log.info(\"Stopped_node : {}\", node);\n\n    assertTrue(\"Trigger was not fired even after 10 seconds\", triggerFiredLatch.await(10, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null , \" + eventRef.get(), operations);\n    assertEquals(\"ComputePlanAction should have computed exactly 1 operation\", 1, operations.size());\n    SolrRequest solrRequest = operations.get(0);\n    SolrParams params = solrRequest.getParams();\n    assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n    String replicaToBeMoved = params.get(\"replica\");\n    assertEquals(\"Unexpected node in computed operation\", replicas.get(0).getName(), replicaToBeMoved);\n\n    // shutdown the extra node that we had started\n    cluster.simRemoveNode(node2, false);\n  }\n\n","sourceOld":"  @Test\n  public void testNodeLost() throws Exception  {\n    // let's start a node so that we have at least two\n    String node = cluster.simAddNode();\n    AssertingTriggerAction.expectedNode = node;\n\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '7s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'test','class':'\" + TestSimComputePlanAction.AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testNodeLost\",\n        \"conf\",1, 2);\n    create.process(solrClient);\n\n    CloudTestUtils.waitForState(cluster, \"Timed out waiting for replicas of new collection to be active\",\n        \"testNodeLost\", CloudTestUtils.clusterShape(1, 2, false, true));\n\n    ClusterState clusterState = cluster.getClusterStateProvider().getClusterState();\n    log.debug(\"-- cluster state: {}\", clusterState);\n    DocCollection collection = clusterState.getCollection(\"testNodeLost\");\n    List<Replica> replicas = collection.getReplicas(node);\n    assertNotNull(replicas);\n    assertFalse(replicas.isEmpty());\n\n    // start another node because because when the other node goes away, the cluster policy requires only\n    // 1 replica per node and none on the overseer\n    String node2 = cluster.simAddNode();\n    assertTrue(node2 + \"is not live yet\", cluster.getClusterStateProvider().getClusterState().liveNodesContain(node2) );\n\n    // stop the original node\n    cluster.simRemoveNode(node, false);\n    log.info(\"Stopped_node : {}\", node);\n\n    assertTrue(\"Trigger was not fired even after 10 seconds\", triggerFiredLatch.await(10, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null , \" + eventRef.get(), operations);\n    assertEquals(\"ComputePlanAction should have computed exactly 1 operation\", 1, operations.size());\n    SolrRequest solrRequest = operations.get(0);\n    SolrParams params = solrRequest.getParams();\n    assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n    String replicaToBeMoved = params.get(\"replica\");\n    assertEquals(\"Unexpected node in computed operation\", replicas.get(0).getName(), replicaToBeMoved);\n\n    // shutdown the extra node that we had started\n    cluster.simRemoveNode(node2, false);\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimComputePlanAction#testNodeLost().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimComputePlanAction#testNodeLost().mjava","sourceNew":"  @Test\n  @AwaitsFix(bugUrl = \"https://issues.apache.org/jira/browse/SOLR-12028\") // if you beast this, eventually you will see\n                                                                          // creation of 'testNodeLost' collection fail\n                                                                          // because shard1 elects no leader\n  public void testNodeLost() throws Exception {\n    // let's start a node so that we have at least two\n    String node = cluster.simAddNode();\n    AssertingTriggerAction.expectedNode = node;\n\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '7s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'test','class':'\" + TestSimComputePlanAction.AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testNodeLost\",\n        \"conf\",1, 2);\n    create.process(solrClient);\n\n    CloudTestUtils.waitForState(cluster, \"Timed out waiting for replicas of new collection to be active\",\n        \"testNodeLost\", CloudTestUtils.clusterShape(1, 2, false, true));\n\n    ClusterState clusterState = cluster.getClusterStateProvider().getClusterState();\n    log.debug(\"-- cluster state: {}\", clusterState);\n    DocCollection collection = clusterState.getCollection(\"testNodeLost\");\n    List<Replica> replicas = collection.getReplicas(node);\n    assertNotNull(replicas);\n    assertFalse(replicas.isEmpty());\n\n    // start another node because because when the other node goes away, the cluster policy requires only\n    // 1 replica per node and none on the overseer\n    String node2 = cluster.simAddNode();\n    assertTrue(node2 + \"is not live yet\", cluster.getClusterStateProvider().getClusterState().liveNodesContain(node2) );\n\n    // stop the original node\n    cluster.simRemoveNode(node, false);\n    log.info(\"Stopped_node : {}\", node);\n\n    assertTrue(\"Trigger was not fired even after 10 seconds\", triggerFiredLatch.await(10, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null , \" + eventRef.get(), operations);\n    assertEquals(\"ComputePlanAction should have computed exactly 1 operation\", 1, operations.size());\n    SolrRequest solrRequest = operations.get(0);\n    SolrParams params = solrRequest.getParams();\n    assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n    String replicaToBeMoved = params.get(\"replica\");\n    assertEquals(\"Unexpected node in computed operation\", replicas.get(0).getName(), replicaToBeMoved);\n\n    // shutdown the extra node that we had started\n    cluster.simRemoveNode(node2, false);\n  }\n\n","sourceOld":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 14-Oct-2018\n  public void testNodeLost() throws Exception  {\n    // let's start a node so that we have at least two\n    String node = cluster.simAddNode();\n    AssertingTriggerAction.expectedNode = node;\n\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '7s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'test','class':'\" + TestSimComputePlanAction.AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testNodeLost\",\n        \"conf\",1, 2);\n    create.process(solrClient);\n\n    CloudTestUtils.waitForState(cluster, \"Timed out waiting for replicas of new collection to be active\",\n        \"testNodeLost\", CloudTestUtils.clusterShape(1, 2, false, true));\n\n    ClusterState clusterState = cluster.getClusterStateProvider().getClusterState();\n    log.debug(\"-- cluster state: {}\", clusterState);\n    DocCollection collection = clusterState.getCollection(\"testNodeLost\");\n    List<Replica> replicas = collection.getReplicas(node);\n    assertNotNull(replicas);\n    assertFalse(replicas.isEmpty());\n\n    // start another node because because when the other node goes away, the cluster policy requires only\n    // 1 replica per node and none on the overseer\n    String node2 = cluster.simAddNode();\n    assertTrue(node2 + \"is not live yet\", cluster.getClusterStateProvider().getClusterState().liveNodesContain(node2) );\n\n    // stop the original node\n    cluster.simRemoveNode(node, false);\n    log.info(\"Stopped_node : {}\", node);\n\n    assertTrue(\"Trigger was not fired even after 10 seconds\", triggerFiredLatch.await(10, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null , \" + eventRef.get(), operations);\n    assertEquals(\"ComputePlanAction should have computed exactly 1 operation\", 1, operations.size());\n    SolrRequest solrRequest = operations.get(0);\n    SolrParams params = solrRequest.getParams();\n    assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n    String replicaToBeMoved = params.get(\"replica\");\n    assertEquals(\"Unexpected node in computed operation\", replicas.get(0).getName(), replicaToBeMoved);\n\n    // shutdown the extra node that we had started\n    cluster.simRemoveNode(node2, false);\n  }\n\n","bugFix":["44dd40f6c2c1465aebf4677bab10f696c7ea18d8","1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"89948af0461fead48f44ba8fb7866f107ce83f22","date":1545157711,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimComputePlanAction#testNodeLost().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimComputePlanAction#testNodeLost().mjava","sourceNew":"  @Test\n  @AwaitsFix(bugUrl = \"https://issues.apache.org/jira/browse/SOLR-12028\") // if you beast this, eventually you will see\n                                                                          // creation of 'testNodeLost' collection fail\n                                                                          // because shard1 elects no leader\n  public void testNodeLost() throws Exception {\n    // let's start a node so that we have at least two\n    String node = cluster.simAddNode();\n    AssertingTriggerAction.expectedNode = node;\n\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '7s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'test','class':'\" + TestSimComputePlanAction.AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testNodeLost\",\n        \"conf\",1, 2);\n    create.process(solrClient);\n\n    CloudTestUtils.waitForState(cluster, \"Timed out waiting for replicas of new collection to be active\",\n        \"testNodeLost\", CloudTestUtils.clusterShape(1, 2, false, true));\n\n    ClusterState clusterState = cluster.getClusterStateProvider().getClusterState();\n    log.debug(\"-- cluster state: {}\", clusterState);\n    DocCollection collection = clusterState.getCollection(\"testNodeLost\");\n    List<Replica> replicas = collection.getReplicas(node);\n    assertNotNull(replicas);\n    assertFalse(replicas.isEmpty());\n\n    // start another node because because when the other node goes away, the cluster policy requires only\n    // 1 replica per node and none on the overseer\n    String node2 = cluster.simAddNode();\n    assertTrue(node2 + \"is not live yet\", cluster.getClusterStateProvider().getClusterState().liveNodesContain(node2) );\n\n    // stop the original node\n    cluster.simRemoveNode(node, false);\n    log.info(\"Stopped_node : {}\", node);\n\n    assertTrue(\"Trigger was not fired even after 10 seconds\", triggerFiredLatch.await(10, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null , \" + eventRef.get(), operations);\n    assertEquals(\"ComputePlanAction should have computed exactly 1 operation\", 1, operations.size());\n    SolrRequest solrRequest = operations.get(0);\n    SolrParams params = solrRequest.getParams();\n    assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n    String replicaToBeMoved = params.get(\"replica\");\n    assertEquals(\"Unexpected node in computed operation\", replicas.get(0).getName(), replicaToBeMoved);\n\n    // shutdown the extra node that we had started\n    cluster.simRemoveNode(node2, false);\n  }\n\n","sourceOld":"  @Test\n  @AwaitsFix(bugUrl = \"https://issues.apache.org/jira/browse/SOLR-12028\") // if you beast this, eventually you will see\n                                                                          // creation of 'testNodeLost' collection fail\n                                                                          // because shard1 elects no leader\n  public void testNodeLost() throws Exception {\n    // let's start a node so that we have at least two\n    String node = cluster.simAddNode();\n    AssertingTriggerAction.expectedNode = node;\n\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '7s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'test','class':'\" + TestSimComputePlanAction.AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testNodeLost\",\n        \"conf\",1, 2);\n    create.process(solrClient);\n\n    CloudTestUtils.waitForState(cluster, \"Timed out waiting for replicas of new collection to be active\",\n        \"testNodeLost\", CloudTestUtils.clusterShape(1, 2, false, true));\n\n    ClusterState clusterState = cluster.getClusterStateProvider().getClusterState();\n    log.debug(\"-- cluster state: {}\", clusterState);\n    DocCollection collection = clusterState.getCollection(\"testNodeLost\");\n    List<Replica> replicas = collection.getReplicas(node);\n    assertNotNull(replicas);\n    assertFalse(replicas.isEmpty());\n\n    // start another node because because when the other node goes away, the cluster policy requires only\n    // 1 replica per node and none on the overseer\n    String node2 = cluster.simAddNode();\n    assertTrue(node2 + \"is not live yet\", cluster.getClusterStateProvider().getClusterState().liveNodesContain(node2) );\n\n    // stop the original node\n    cluster.simRemoveNode(node, false);\n    log.info(\"Stopped_node : {}\", node);\n\n    assertTrue(\"Trigger was not fired even after 10 seconds\", triggerFiredLatch.await(10, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null , \" + eventRef.get(), operations);\n    assertEquals(\"ComputePlanAction should have computed exactly 1 operation\", 1, operations.size());\n    SolrRequest solrRequest = operations.get(0);\n    SolrParams params = solrRequest.getParams();\n    assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n    String replicaToBeMoved = params.get(\"replica\");\n    assertEquals(\"Unexpected node in computed operation\", replicas.get(0).getName(), replicaToBeMoved);\n\n    // shutdown the extra node that we had started\n    cluster.simRemoveNode(node2, false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ce85ed088dcf7aa1742105d4a8caa9aab3b491c1","date":1546971158,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimComputePlanAction#testNodeLost().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimComputePlanAction#testNodeLost().mjava","sourceNew":"  @Test\n  @AwaitsFix(bugUrl = \"https://issues.apache.org/jira/browse/SOLR-12028\") // if you beast this, eventually you will see\n                                                                          // creation of 'testNodeLost' collection fail\n                                                                          // because shard1 elects no leader\n  public void testNodeLost() throws Exception {\n    // let's start a node so that we have at least two\n    String node = cluster.simAddNode();\n    AssertingTriggerAction.expectedNode = node;\n\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '7s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'test','class':'\" + TestSimComputePlanAction.AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    assertAutoscalingUpdateComplete();\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testNodeLost\",\n        \"conf\",1, 2);\n    create.process(solrClient);\n\n    CloudTestUtils.waitForState(cluster, \"Timed out waiting for replicas of new collection to be active\",\n        \"testNodeLost\", CloudTestUtils.clusterShape(1, 2, false, true));\n\n    ClusterState clusterState = cluster.getClusterStateProvider().getClusterState();\n    log.debug(\"-- cluster state: {}\", clusterState);\n    DocCollection collection = clusterState.getCollection(\"testNodeLost\");\n    List<Replica> replicas = collection.getReplicas(node);\n    assertNotNull(replicas);\n    assertFalse(replicas.isEmpty());\n\n    // start another node because because when the other node goes away, the cluster policy requires only\n    // 1 replica per node and none on the overseer\n    String node2 = cluster.simAddNode();\n    assertTrue(node2 + \"is not live yet\", cluster.getClusterStateProvider().getClusterState().liveNodesContain(node2) );\n\n    // stop the original node\n    cluster.simRemoveNode(node, false);\n    log.info(\"Stopped_node : {}\", node);\n\n    assertTrue(\"Trigger was not fired even after 10 seconds\", triggerFiredLatch.await(10, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null , \" + eventRef.get(), operations);\n    assertEquals(\"ComputePlanAction should have computed exactly 1 operation\", 1, operations.size());\n    SolrRequest solrRequest = operations.get(0);\n    SolrParams params = solrRequest.getParams();\n    assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n    String replicaToBeMoved = params.get(\"replica\");\n    assertEquals(\"Unexpected node in computed operation\", replicas.get(0).getName(), replicaToBeMoved);\n\n    // shutdown the extra node that we had started\n    cluster.simRemoveNode(node2, false);\n  }\n\n","sourceOld":"  @Test\n  @AwaitsFix(bugUrl = \"https://issues.apache.org/jira/browse/SOLR-12028\") // if you beast this, eventually you will see\n                                                                          // creation of 'testNodeLost' collection fail\n                                                                          // because shard1 elects no leader\n  public void testNodeLost() throws Exception {\n    // let's start a node so that we have at least two\n    String node = cluster.simAddNode();\n    AssertingTriggerAction.expectedNode = node;\n\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '7s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'test','class':'\" + TestSimComputePlanAction.AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testNodeLost\",\n        \"conf\",1, 2);\n    create.process(solrClient);\n\n    CloudTestUtils.waitForState(cluster, \"Timed out waiting for replicas of new collection to be active\",\n        \"testNodeLost\", CloudTestUtils.clusterShape(1, 2, false, true));\n\n    ClusterState clusterState = cluster.getClusterStateProvider().getClusterState();\n    log.debug(\"-- cluster state: {}\", clusterState);\n    DocCollection collection = clusterState.getCollection(\"testNodeLost\");\n    List<Replica> replicas = collection.getReplicas(node);\n    assertNotNull(replicas);\n    assertFalse(replicas.isEmpty());\n\n    // start another node because because when the other node goes away, the cluster policy requires only\n    // 1 replica per node and none on the overseer\n    String node2 = cluster.simAddNode();\n    assertTrue(node2 + \"is not live yet\", cluster.getClusterStateProvider().getClusterState().liveNodesContain(node2) );\n\n    // stop the original node\n    cluster.simRemoveNode(node, false);\n    log.info(\"Stopped_node : {}\", node);\n\n    assertTrue(\"Trigger was not fired even after 10 seconds\", triggerFiredLatch.await(10, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null , \" + eventRef.get(), operations);\n    assertEquals(\"ComputePlanAction should have computed exactly 1 operation\", 1, operations.size());\n    SolrRequest solrRequest = operations.get(0);\n    SolrParams params = solrRequest.getParams();\n    assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n    String replicaToBeMoved = params.get(\"replica\");\n    assertEquals(\"Unexpected node in computed operation\", replicas.get(0).getName(), replicaToBeMoved);\n\n    // shutdown the extra node that we had started\n    cluster.simRemoveNode(node2, false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5","date":1556572478,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimComputePlanAction#testNodeLost().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimComputePlanAction#testNodeLost().mjava","sourceNew":"  @Test\n  @AwaitsFix(bugUrl = \"https://issues.apache.org/jira/browse/SOLR-12028\") // if you beast this, eventually you will see\n                                                                          // creation of 'testNodeLost' collection fail\n                                                                          // because shard1 elects no leader\n  public void testNodeLost() throws Exception {\n    // let's start a node so that we have at least two\n    String node = cluster.simAddNode();\n    AssertingTriggerAction.expectedNode = node;\n\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '7s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'test','class':'\" + TestSimComputePlanAction.AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    assertAutoscalingUpdateComplete();\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testNodeLost\",\n        \"conf\",1, 2);\n    create.process(solrClient);\n\n    CloudUtil.waitForState(cluster, \"Timed out waiting for replicas of new collection to be active\",\n        \"testNodeLost\", CloudUtil.clusterShape(1, 2, false, true));\n\n    ClusterState clusterState = cluster.getClusterStateProvider().getClusterState();\n    log.debug(\"-- cluster state: {}\", clusterState);\n    DocCollection collection = clusterState.getCollection(\"testNodeLost\");\n    List<Replica> replicas = collection.getReplicas(node);\n    assertNotNull(replicas);\n    assertFalse(replicas.isEmpty());\n\n    // start another node because because when the other node goes away, the cluster policy requires only\n    // 1 replica per node and none on the overseer\n    String node2 = cluster.simAddNode();\n    assertTrue(node2 + \"is not live yet\", cluster.getClusterStateProvider().getClusterState().liveNodesContain(node2) );\n\n    // stop the original node\n    cluster.simRemoveNode(node, false);\n    log.info(\"Stopped_node : {}\", node);\n\n    assertTrue(\"Trigger was not fired even after 10 seconds\", triggerFiredLatch.await(10, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null , \" + eventRef.get(), operations);\n    assertEquals(\"ComputePlanAction should have computed exactly 1 operation\", 1, operations.size());\n    SolrRequest solrRequest = operations.get(0);\n    SolrParams params = solrRequest.getParams();\n    assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n    String replicaToBeMoved = params.get(\"replica\");\n    assertEquals(\"Unexpected node in computed operation\", replicas.get(0).getName(), replicaToBeMoved);\n\n    // shutdown the extra node that we had started\n    cluster.simRemoveNode(node2, false);\n  }\n\n","sourceOld":"  @Test\n  @AwaitsFix(bugUrl = \"https://issues.apache.org/jira/browse/SOLR-12028\") // if you beast this, eventually you will see\n                                                                          // creation of 'testNodeLost' collection fail\n                                                                          // because shard1 elects no leader\n  public void testNodeLost() throws Exception {\n    // let's start a node so that we have at least two\n    String node = cluster.simAddNode();\n    AssertingTriggerAction.expectedNode = node;\n\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '7s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'test','class':'\" + TestSimComputePlanAction.AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    assertAutoscalingUpdateComplete();\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testNodeLost\",\n        \"conf\",1, 2);\n    create.process(solrClient);\n\n    CloudTestUtils.waitForState(cluster, \"Timed out waiting for replicas of new collection to be active\",\n        \"testNodeLost\", CloudTestUtils.clusterShape(1, 2, false, true));\n\n    ClusterState clusterState = cluster.getClusterStateProvider().getClusterState();\n    log.debug(\"-- cluster state: {}\", clusterState);\n    DocCollection collection = clusterState.getCollection(\"testNodeLost\");\n    List<Replica> replicas = collection.getReplicas(node);\n    assertNotNull(replicas);\n    assertFalse(replicas.isEmpty());\n\n    // start another node because because when the other node goes away, the cluster policy requires only\n    // 1 replica per node and none on the overseer\n    String node2 = cluster.simAddNode();\n    assertTrue(node2 + \"is not live yet\", cluster.getClusterStateProvider().getClusterState().liveNodesContain(node2) );\n\n    // stop the original node\n    cluster.simRemoveNode(node, false);\n    log.info(\"Stopped_node : {}\", node);\n\n    assertTrue(\"Trigger was not fired even after 10 seconds\", triggerFiredLatch.await(10, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null , \" + eventRef.get(), operations);\n    assertEquals(\"ComputePlanAction should have computed exactly 1 operation\", 1, operations.size());\n    SolrRequest solrRequest = operations.get(0);\n    SolrParams params = solrRequest.getParams();\n    assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n    String replicaToBeMoved = params.get(\"replica\");\n    assertEquals(\"Unexpected node in computed operation\", replicas.get(0).getName(), replicaToBeMoved);\n\n    // shutdown the extra node that we had started\n    cluster.simRemoveNode(node2, false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aa2585c33d5d66a1c837c312221eb55ddb3c4300","date":1592493170,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimComputePlanAction#testNodeLost().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimComputePlanAction#testNodeLost().mjava","sourceNew":"  @Test\n  @AwaitsFix(bugUrl = \"https://issues.apache.org/jira/browse/SOLR-12028\") // if you beast this, eventually you will see\n                                                                          // creation of 'testNodeLost' collection fail\n                                                                          // because shard1 elects no leader\n  public void testNodeLost() throws Exception {\n    // let's start a node so that we have at least two\n    String node = cluster.simAddNode();\n    AssertingTriggerAction.expectedNode = node;\n\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '7s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'test','class':'\" + TestSimComputePlanAction.AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    @SuppressWarnings({\"rawtypes\"})\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    assertAutoscalingUpdateComplete();\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testNodeLost\",\n        \"conf\",1, 2);\n    create.process(solrClient);\n\n    CloudUtil.waitForState(cluster, \"Timed out waiting for replicas of new collection to be active\",\n        \"testNodeLost\", CloudUtil.clusterShape(1, 2, false, true));\n\n    ClusterState clusterState = cluster.getClusterStateProvider().getClusterState();\n    log.debug(\"-- cluster state: {}\", clusterState);\n    DocCollection collection = clusterState.getCollection(\"testNodeLost\");\n    List<Replica> replicas = collection.getReplicas(node);\n    assertNotNull(replicas);\n    assertFalse(replicas.isEmpty());\n\n    // start another node because because when the other node goes away, the cluster policy requires only\n    // 1 replica per node and none on the overseer\n    String node2 = cluster.simAddNode();\n    assertTrue(node2 + \"is not live yet\", cluster.getClusterStateProvider().getClusterState().liveNodesContain(node2) );\n\n    // stop the original node\n    cluster.simRemoveNode(node, false);\n    log.info(\"Stopped_node : {}\", node);\n\n    assertTrue(\"Trigger was not fired even after 10 seconds\", triggerFiredLatch.await(10, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    @SuppressWarnings({\"rawtypes\"})\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null , \" + eventRef.get(), operations);\n    assertEquals(\"ComputePlanAction should have computed exactly 1 operation\", 1, operations.size());\n    @SuppressWarnings({\"rawtypes\"})\n    SolrRequest solrRequest = operations.get(0);\n    SolrParams params = solrRequest.getParams();\n    assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n    String replicaToBeMoved = params.get(\"replica\");\n    assertEquals(\"Unexpected node in computed operation\", replicas.get(0).getName(), replicaToBeMoved);\n\n    // shutdown the extra node that we had started\n    cluster.simRemoveNode(node2, false);\n  }\n\n","sourceOld":"  @Test\n  @AwaitsFix(bugUrl = \"https://issues.apache.org/jira/browse/SOLR-12028\") // if you beast this, eventually you will see\n                                                                          // creation of 'testNodeLost' collection fail\n                                                                          // because shard1 elects no leader\n  public void testNodeLost() throws Exception {\n    // let's start a node so that we have at least two\n    String node = cluster.simAddNode();\n    AssertingTriggerAction.expectedNode = node;\n\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '7s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'test','class':'\" + TestSimComputePlanAction.AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    assertAutoscalingUpdateComplete();\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testNodeLost\",\n        \"conf\",1, 2);\n    create.process(solrClient);\n\n    CloudUtil.waitForState(cluster, \"Timed out waiting for replicas of new collection to be active\",\n        \"testNodeLost\", CloudUtil.clusterShape(1, 2, false, true));\n\n    ClusterState clusterState = cluster.getClusterStateProvider().getClusterState();\n    log.debug(\"-- cluster state: {}\", clusterState);\n    DocCollection collection = clusterState.getCollection(\"testNodeLost\");\n    List<Replica> replicas = collection.getReplicas(node);\n    assertNotNull(replicas);\n    assertFalse(replicas.isEmpty());\n\n    // start another node because because when the other node goes away, the cluster policy requires only\n    // 1 replica per node and none on the overseer\n    String node2 = cluster.simAddNode();\n    assertTrue(node2 + \"is not live yet\", cluster.getClusterStateProvider().getClusterState().liveNodesContain(node2) );\n\n    // stop the original node\n    cluster.simRemoveNode(node, false);\n    log.info(\"Stopped_node : {}\", node);\n\n    assertTrue(\"Trigger was not fired even after 10 seconds\", triggerFiredLatch.await(10, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null , \" + eventRef.get(), operations);\n    assertEquals(\"ComputePlanAction should have computed exactly 1 operation\", 1, operations.size());\n    SolrRequest solrRequest = operations.get(0);\n    SolrParams params = solrRequest.getParams();\n    assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n    String replicaToBeMoved = params.get(\"replica\");\n    assertEquals(\"Unexpected node in computed operation\", replicas.get(0).getName(), replicaToBeMoved);\n\n    // shutdown the extra node that we had started\n    cluster.simRemoveNode(node2, false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimComputePlanAction#testNodeLost().mjava","sourceNew":null,"sourceOld":"  @Test\n  @AwaitsFix(bugUrl = \"https://issues.apache.org/jira/browse/SOLR-12028\") // if you beast this, eventually you will see\n                                                                          // creation of 'testNodeLost' collection fail\n                                                                          // because shard1 elects no leader\n  public void testNodeLost() throws Exception {\n    // let's start a node so that we have at least two\n    String node = cluster.simAddNode();\n    AssertingTriggerAction.expectedNode = node;\n\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '7s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'test','class':'\" + TestSimComputePlanAction.AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    @SuppressWarnings({\"rawtypes\"})\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    assertAutoscalingUpdateComplete();\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testNodeLost\",\n        \"conf\",1, 2);\n    create.process(solrClient);\n\n    CloudUtil.waitForState(cluster, \"Timed out waiting for replicas of new collection to be active\",\n        \"testNodeLost\", CloudUtil.clusterShape(1, 2, false, true));\n\n    ClusterState clusterState = cluster.getClusterStateProvider().getClusterState();\n    log.debug(\"-- cluster state: {}\", clusterState);\n    DocCollection collection = clusterState.getCollection(\"testNodeLost\");\n    List<Replica> replicas = collection.getReplicas(node);\n    assertNotNull(replicas);\n    assertFalse(replicas.isEmpty());\n\n    // start another node because because when the other node goes away, the cluster policy requires only\n    // 1 replica per node and none on the overseer\n    String node2 = cluster.simAddNode();\n    assertTrue(node2 + \"is not live yet\", cluster.getClusterStateProvider().getClusterState().liveNodesContain(node2) );\n\n    // stop the original node\n    cluster.simRemoveNode(node, false);\n    log.info(\"Stopped_node : {}\", node);\n\n    assertTrue(\"Trigger was not fired even after 10 seconds\", triggerFiredLatch.await(10, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    @SuppressWarnings({\"rawtypes\"})\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null , \" + eventRef.get(), operations);\n    assertEquals(\"ComputePlanAction should have computed exactly 1 operation\", 1, operations.size());\n    @SuppressWarnings({\"rawtypes\"})\n    SolrRequest solrRequest = operations.get(0);\n    SolrParams params = solrRequest.getParams();\n    assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n    String replicaToBeMoved = params.get(\"replica\");\n    assertEquals(\"Unexpected node in computed operation\", replicas.get(0).getName(), replicaToBeMoved);\n\n    // shutdown the extra node that we had started\n    cluster.simRemoveNode(node2, false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"44dd40f6c2c1465aebf4677bab10f696c7ea18d8":["a6a5c1c40529f15b445e6720dfde1967e139bff1"],"a6a5c1c40529f15b445e6720dfde1967e139bff1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5"],"3f504512a03d978990cbff30db0522b354e846db":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["44dd40f6c2c1465aebf4677bab10f696c7ea18d8"],"ce85ed088dcf7aa1742105d4a8caa9aab3b491c1":["89948af0461fead48f44ba8fb7866f107ce83f22"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5":["ce85ed088dcf7aa1742105d4a8caa9aab3b491c1"],"89948af0461fead48f44ba8fb7866f107ce83f22":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"44dd40f6c2c1465aebf4677bab10f696c7ea18d8":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"a6a5c1c40529f15b445e6720dfde1967e139bff1":["44dd40f6c2c1465aebf4677bab10f696c7ea18d8"],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["3f504512a03d978990cbff30db0522b354e846db"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["89948af0461fead48f44ba8fb7866f107ce83f22"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a6a5c1c40529f15b445e6720dfde1967e139bff1"],"ce85ed088dcf7aa1742105d4a8caa9aab3b491c1":["9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5"],"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"89948af0461fead48f44ba8fb7866f107ce83f22":["ce85ed088dcf7aa1742105d4a8caa9aab3b491c1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}