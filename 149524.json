{"path":"solr/core/src/test/org/apache/solr/handler/TestContainerReqHandler#testRuntimeLib().mjava","commits":[{"id":"fb50877dc038c021eba3a70999fd1f6ed85001c1","date":1563596432,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestContainerReqHandler#testRuntimeLib().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testRuntimeLib() throws Exception {\n    Map<String, Object> jars = Utils.makeMap(\n        \"/jar1.jar\", getFileContent(\"runtimecode/runtimelibs.jar.bin\"),\n        \"/jar2.jar\", getFileContent(\"runtimecode/runtimelibs_v2.jar.bin\"),\n        \"/jar3.jar\", getFileContent(\"runtimecode/runtimelibs_v3.jar.bin\"));\n\n    Pair<Server, Integer> server = runHttpServer(jars);\n    int port = server.second();\n    MiniSolrCloudCluster cluster = configureCluster(4).configure();\n    try {\n      String payload = null;\n      try {\n        payload = \"{add-runtimelib:{name : 'foo', url: 'http://localhost:\" + port + \"/jar1.jar', \" +\n            \"sha512 : 'wrong-sha512'}}\";\n        new V2Request.Builder(\"/cluster\")\n            .withPayload(payload)\n            .withMethod(SolrRequest.METHOD.POST)\n            .build().process(cluster.getSolrClient());\n        fail(\"Expected error\");\n      } catch (BaseHttpSolrClient.RemoteExecutionException e) {\n        assertTrue(\"actual output : \" + Utils.toJSONString(e.getMetaData()), e.getMetaData()._getStr(\"error/details[0]/errorMessages[0]\", \"\").contains(\"expected sha512 hash :\"));\n      }\n\n      try {\n        payload = \"{add-runtimelib:{name : 'foo', url: 'http://localhost:\" + port + \"/jar0.jar', \" +\n            \"sha512 : 'd01b51de67ae1680a84a813983b1de3b592fc32f1a22b662fc9057da5953abd1b72476388ba342cad21671cd0b805503c78ab9075ff2f3951fdf75fa16981420'}}\";\n        new V2Request.Builder(\"/cluster\")\n            .withPayload(payload)\n            .withMethod(SolrRequest.METHOD.POST)\n            .build().process(cluster.getSolrClient());\n        fail(\"Expected error\");\n      } catch (BaseHttpSolrClient.RemoteExecutionException e) {\n        assertTrue(\"Actual output : \" + Utils.toJSONString(e.getMetaData()), e.getMetaData()._getStr(\"error/details[0]/errorMessages[0]\", \"\").contains(\"no such resource available: foo\"));\n      }\n\n      payload = \"{add-runtimelib:{name : 'foo', url: 'http://localhost:\" + port + \"/jar1.jar', \" +\n          \"sha512 : 'd01b51de67ae1680a84a813983b1de3b592fc32f1a22b662fc9057da5953abd1b72476388ba342cad21671cd0b805503c78ab9075ff2f3951fdf75fa16981420'}}\";\n      new V2Request.Builder(\"/cluster\")\n          .withPayload(payload)\n          .withMethod(SolrRequest.METHOD.POST)\n          .build().process(cluster.getSolrClient());\n      assertEquals(getObjectByPath(Utils.fromJSONString(payload), true, \"add-runtimelib/sha512\"),\n          getObjectByPath(new ClusterProperties(cluster.getZkClient()).getClusterProperties(), true, \"runtimeLib/foo/sha512\"));\n\n\n      new V2Request.Builder(\"/cluster\")\n          .withPayload(\"{add-requesthandler:{name : 'bar', class : 'org.apache.solr.core.RuntimeLibReqHandler'}}\")\n          .withMethod(SolrRequest.METHOD.POST)\n          .build().process(cluster.getSolrClient());\n      Map<String, Object> map = new ClusterProperties(cluster.getZkClient()).getClusterProperties();\n\n\n      V2Request request = new V2Request.Builder(\"/node/ext/bar\")\n          .withMethod(SolrRequest.METHOD.POST)\n          .build();\n      assertResponseValues(10, cluster.getSolrClient(), request, Utils.makeMap(\n          \"class\", \"org.apache.solr.core.RuntimeLibReqHandler\",\n          \"loader\", MemClassLoader.class.getName(),\n          \"version\", null));\n\n\n      assertEquals(\"org.apache.solr.core.RuntimeLibReqHandler\",\n          getObjectByPath(map, true, Arrays.asList(\"requestHandler\", \"bar\", \"class\")));\n\n\n      payload = \"{update-runtimelib:{name : 'foo', url: 'http://localhost:\" + port + \"/jar3.jar', \" +\n          \"sha512 : 'f67a7735a89b4348e273ca29e4651359d6d976ba966cb871c4b468ea1dbd452e42fcde9d188b7788e5a1ef668283c690606032922364759d19588666d5862653'}}\";\n      new V2Request.Builder(\"/cluster\")\n          .withPayload(payload)\n          .withMethod(SolrRequest.METHOD.POST)\n          .build().process(cluster.getSolrClient());\n      assertEquals(getObjectByPath(Utils.fromJSONString(payload), true, \"update-runtimelib/sha512\"),\n          getObjectByPath(new ClusterProperties(cluster.getZkClient()).getClusterProperties(), true, \"runtimeLib/foo/sha512\"));\n\n\n      request = new V2Request.Builder(\"/node/ext/bar\")\n          .withMethod(SolrRequest.METHOD.POST)\n          .build();\n      assertResponseValues(10, cluster.getSolrClient(), request, Utils.makeMap(\n          \"class\", \"org.apache.solr.core.RuntimeLibReqHandler\",\n          \"loader\", MemClassLoader.class.getName(),\n          \"version\", \"3\")\n      );\n\n\n      new V2Request.Builder(\"/cluster\")\n          .withPayload(\"{delete-requesthandler: 'bar'}\")\n          .withMethod(SolrRequest.METHOD.POST)\n          .build().process(cluster.getSolrClient());\n      request = new V2Request.Builder(\"/node/ext\")\n          .withMethod(SolrRequest.METHOD.POST)\n          .build();\n      assertResponseValues(10, cluster.getSolrClient(), request, ImmutableMap.of(SolrRequestHandler.TYPE,\n          (Predicate<Object>) o -> o instanceof List && ((List) o).isEmpty()));\n      new V2Request.Builder(\"/cluster\")\n          .withPayload(\"{delete-runtimelib : 'foo'}\")\n          .withMethod(SolrRequest.METHOD.POST)\n          .build().process(cluster.getSolrClient());\n      assertResponseValues(10, cluster.getSolrClient(), request, ImmutableMap.of(RuntimeLib.TYPE,\n          (Predicate<Object>) o -> o instanceof List && ((List) o).isEmpty()));\n\n\n    } finally {\n      server.first().stop();\n      cluster.shutdown();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d52ea0bca71d3b5f5fd37c12585ccd9309f8ea74","date":1563736916,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestContainerReqHandler#testRuntimeLib().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestContainerReqHandler#testRuntimeLib().mjava","sourceNew":"  @Test\n  public void testRuntimeLib() throws Exception {\n    Map<String, Object> jars = Utils.makeMap(\n        \"/jar1.jar\", getFileContent(\"runtimecode/runtimelibs.jar.bin\"),\n        \"/jar2.jar\", getFileContent(\"runtimecode/runtimelibs_v2.jar.bin\"),\n        \"/jar3.jar\", getFileContent(\"runtimecode/runtimelibs_v3.jar.bin\"));\n\n    Pair<Server, Integer> server = runHttpServer(jars);\n    int port = server.second();\n    MiniSolrCloudCluster cluster = configureCluster(4).configure();\n    try {\n      String payload = null;\n      try {\n        payload = \"{add-runtimelib:{name : 'foo', url: 'http://localhost:\" + port + \"/jar1.jar', \" +\n            \"sha512 : 'wrong-sha512'}}\";\n        new V2Request.Builder(\"/cluster\")\n            .withPayload(payload)\n            .withMethod(SolrRequest.METHOD.POST)\n            .build().process(cluster.getSolrClient());\n        fail(\"Expected error\");\n      } catch (BaseHttpSolrClient.RemoteExecutionException e) {\n        assertTrue(\"actual output : \" + Utils.toJSONString(e.getMetaData()), e.getMetaData()._getStr(\"error/details[0]/errorMessages[0]\", \"\").contains(\"expected sha512 hash :\"));\n      }\n\n      try {\n        payload = \"{add-runtimelib:{name : 'foo', url: 'http://localhost:\" + port + \"/jar0.jar', \" +\n            \"sha512 : 'd01b51de67ae1680a84a813983b1de3b592fc32f1a22b662fc9057da5953abd1b72476388ba342cad21671cd0b805503c78ab9075ff2f3951fdf75fa16981420'}}\";\n        new V2Request.Builder(\"/cluster\")\n            .withPayload(payload)\n            .withMethod(SolrRequest.METHOD.POST)\n            .build().process(cluster.getSolrClient());\n        fail(\"Expected error\");\n      } catch (BaseHttpSolrClient.RemoteExecutionException e) {\n        assertTrue(\"Actual output : \" + Utils.toJSONString(e.getMetaData()), e.getMetaData()._getStr(\"error/details[0]/errorMessages[0]\", \"\").contains(\"no such resource available: foo\"));\n      }\n\n      payload = \"{add-runtimelib:{name : 'foo', url: 'http://localhost:\" + port + \"/jar1.jar', \" +\n          \"sha512 : 'd01b51de67ae1680a84a813983b1de3b592fc32f1a22b662fc9057da5953abd1b72476388ba342cad21671cd0b805503c78ab9075ff2f3951fdf75fa16981420'}}\";\n      new V2Request.Builder(\"/cluster\")\n          .withPayload(payload)\n          .withMethod(SolrRequest.METHOD.POST)\n          .build().process(cluster.getSolrClient());\n      assertEquals(getObjectByPath(Utils.fromJSONString(payload), true, \"add-runtimelib/sha512\"),\n          getObjectByPath(new ClusterProperties(cluster.getZkClient()).getClusterProperties(), true, \"runtimeLib/foo/sha512\"));\n\n\n      new V2Request.Builder(\"/cluster\")\n          .withPayload(\"{add-requesthandler:{name : 'bar', class : 'org.apache.solr.core.RuntimeLibReqHandler'}}\")\n          .withMethod(SolrRequest.METHOD.POST)\n          .build().process(cluster.getSolrClient());\n      Map<String, Object> map = new ClusterProperties(cluster.getZkClient()).getClusterProperties();\n\n\n      V2Request request = new V2Request.Builder(\"/node/ext/bar\")\n          .withMethod(SolrRequest.METHOD.POST)\n          .build();\n      assertResponseValues(10, cluster.getSolrClient(), request, Utils.makeMap(\n          \"class\", \"org.apache.solr.core.RuntimeLibReqHandler\",\n          \"loader\", MemClassLoader.class.getName(),\n          \"version\", null));\n\n\n      assertEquals(\"org.apache.solr.core.RuntimeLibReqHandler\",\n          getObjectByPath(map, true, Arrays.asList(\"requestHandler\", \"bar\", \"class\")));\n\n\n      payload = \"{update-runtimelib:{name : 'foo', url: 'http://localhost:\" + port + \"/jar3.jar', \" +\n          \"sha512 : 'f67a7735a89b4348e273ca29e4651359d6d976ba966cb871c4b468ea1dbd452e42fcde9d188b7788e5a1ef668283c690606032922364759d19588666d5862653'}}\";\n      new V2Request.Builder(\"/cluster\")\n          .withPayload(payload)\n          .withMethod(SolrRequest.METHOD.POST)\n          .build().process(cluster.getSolrClient());\n      assertEquals(getObjectByPath(Utils.fromJSONString(payload), true, \"update-runtimelib/sha512\"),\n          getObjectByPath(new ClusterProperties(cluster.getZkClient()).getClusterProperties(), true, \"runtimeLib/foo/sha512\"));\n\n\n      request = new V2Request.Builder(\"/node/ext/bar\")\n          .withMethod(SolrRequest.METHOD.POST)\n          .build();\n      assertResponseValues(10, cluster.getSolrClient(), request, Utils.makeMap(\n          \"class\", \"org.apache.solr.core.RuntimeLibReqHandler\",\n          \"loader\", MemClassLoader.class.getName(),\n          \"version\", \"3\")\n      );\n\n\n      new V2Request.Builder(\"/cluster\")\n          .withPayload(\"{delete-requesthandler: 'bar'}\")\n          .withMethod(SolrRequest.METHOD.POST)\n          .build().process(cluster.getSolrClient());\n      request = new V2Request.Builder(\"/node/ext\")\n          .withMethod(SolrRequest.METHOD.POST)\n          .build();\n      assertResponseValues(10, cluster.getSolrClient(), request, ImmutableMap.of(SolrRequestHandler.TYPE,\n          (Predicate<Object>) o -> o instanceof List && ((List) o).isEmpty()));\n      new V2Request.Builder(\"/cluster\")\n          .withPayload(\"{delete-runtimelib : 'foo'}\")\n          .withMethod(SolrRequest.METHOD.POST)\n          .build().process(cluster.getSolrClient());\n      assertResponseValues(10, cluster.getSolrClient(), request, ImmutableMap.of(RuntimeLib.TYPE,\n          (Predicate<Object>) o -> o instanceof List && ((List) o).isEmpty()));\n\n\n    } finally {\n      cluster.shutdown();\n      server.first().stop();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testRuntimeLib() throws Exception {\n    Map<String, Object> jars = Utils.makeMap(\n        \"/jar1.jar\", getFileContent(\"runtimecode/runtimelibs.jar.bin\"),\n        \"/jar2.jar\", getFileContent(\"runtimecode/runtimelibs_v2.jar.bin\"),\n        \"/jar3.jar\", getFileContent(\"runtimecode/runtimelibs_v3.jar.bin\"));\n\n    Pair<Server, Integer> server = runHttpServer(jars);\n    int port = server.second();\n    MiniSolrCloudCluster cluster = configureCluster(4).configure();\n    try {\n      String payload = null;\n      try {\n        payload = \"{add-runtimelib:{name : 'foo', url: 'http://localhost:\" + port + \"/jar1.jar', \" +\n            \"sha512 : 'wrong-sha512'}}\";\n        new V2Request.Builder(\"/cluster\")\n            .withPayload(payload)\n            .withMethod(SolrRequest.METHOD.POST)\n            .build().process(cluster.getSolrClient());\n        fail(\"Expected error\");\n      } catch (BaseHttpSolrClient.RemoteExecutionException e) {\n        assertTrue(\"actual output : \" + Utils.toJSONString(e.getMetaData()), e.getMetaData()._getStr(\"error/details[0]/errorMessages[0]\", \"\").contains(\"expected sha512 hash :\"));\n      }\n\n      try {\n        payload = \"{add-runtimelib:{name : 'foo', url: 'http://localhost:\" + port + \"/jar0.jar', \" +\n            \"sha512 : 'd01b51de67ae1680a84a813983b1de3b592fc32f1a22b662fc9057da5953abd1b72476388ba342cad21671cd0b805503c78ab9075ff2f3951fdf75fa16981420'}}\";\n        new V2Request.Builder(\"/cluster\")\n            .withPayload(payload)\n            .withMethod(SolrRequest.METHOD.POST)\n            .build().process(cluster.getSolrClient());\n        fail(\"Expected error\");\n      } catch (BaseHttpSolrClient.RemoteExecutionException e) {\n        assertTrue(\"Actual output : \" + Utils.toJSONString(e.getMetaData()), e.getMetaData()._getStr(\"error/details[0]/errorMessages[0]\", \"\").contains(\"no such resource available: foo\"));\n      }\n\n      payload = \"{add-runtimelib:{name : 'foo', url: 'http://localhost:\" + port + \"/jar1.jar', \" +\n          \"sha512 : 'd01b51de67ae1680a84a813983b1de3b592fc32f1a22b662fc9057da5953abd1b72476388ba342cad21671cd0b805503c78ab9075ff2f3951fdf75fa16981420'}}\";\n      new V2Request.Builder(\"/cluster\")\n          .withPayload(payload)\n          .withMethod(SolrRequest.METHOD.POST)\n          .build().process(cluster.getSolrClient());\n      assertEquals(getObjectByPath(Utils.fromJSONString(payload), true, \"add-runtimelib/sha512\"),\n          getObjectByPath(new ClusterProperties(cluster.getZkClient()).getClusterProperties(), true, \"runtimeLib/foo/sha512\"));\n\n\n      new V2Request.Builder(\"/cluster\")\n          .withPayload(\"{add-requesthandler:{name : 'bar', class : 'org.apache.solr.core.RuntimeLibReqHandler'}}\")\n          .withMethod(SolrRequest.METHOD.POST)\n          .build().process(cluster.getSolrClient());\n      Map<String, Object> map = new ClusterProperties(cluster.getZkClient()).getClusterProperties();\n\n\n      V2Request request = new V2Request.Builder(\"/node/ext/bar\")\n          .withMethod(SolrRequest.METHOD.POST)\n          .build();\n      assertResponseValues(10, cluster.getSolrClient(), request, Utils.makeMap(\n          \"class\", \"org.apache.solr.core.RuntimeLibReqHandler\",\n          \"loader\", MemClassLoader.class.getName(),\n          \"version\", null));\n\n\n      assertEquals(\"org.apache.solr.core.RuntimeLibReqHandler\",\n          getObjectByPath(map, true, Arrays.asList(\"requestHandler\", \"bar\", \"class\")));\n\n\n      payload = \"{update-runtimelib:{name : 'foo', url: 'http://localhost:\" + port + \"/jar3.jar', \" +\n          \"sha512 : 'f67a7735a89b4348e273ca29e4651359d6d976ba966cb871c4b468ea1dbd452e42fcde9d188b7788e5a1ef668283c690606032922364759d19588666d5862653'}}\";\n      new V2Request.Builder(\"/cluster\")\n          .withPayload(payload)\n          .withMethod(SolrRequest.METHOD.POST)\n          .build().process(cluster.getSolrClient());\n      assertEquals(getObjectByPath(Utils.fromJSONString(payload), true, \"update-runtimelib/sha512\"),\n          getObjectByPath(new ClusterProperties(cluster.getZkClient()).getClusterProperties(), true, \"runtimeLib/foo/sha512\"));\n\n\n      request = new V2Request.Builder(\"/node/ext/bar\")\n          .withMethod(SolrRequest.METHOD.POST)\n          .build();\n      assertResponseValues(10, cluster.getSolrClient(), request, Utils.makeMap(\n          \"class\", \"org.apache.solr.core.RuntimeLibReqHandler\",\n          \"loader\", MemClassLoader.class.getName(),\n          \"version\", \"3\")\n      );\n\n\n      new V2Request.Builder(\"/cluster\")\n          .withPayload(\"{delete-requesthandler: 'bar'}\")\n          .withMethod(SolrRequest.METHOD.POST)\n          .build().process(cluster.getSolrClient());\n      request = new V2Request.Builder(\"/node/ext\")\n          .withMethod(SolrRequest.METHOD.POST)\n          .build();\n      assertResponseValues(10, cluster.getSolrClient(), request, ImmutableMap.of(SolrRequestHandler.TYPE,\n          (Predicate<Object>) o -> o instanceof List && ((List) o).isEmpty()));\n      new V2Request.Builder(\"/cluster\")\n          .withPayload(\"{delete-runtimelib : 'foo'}\")\n          .withMethod(SolrRequest.METHOD.POST)\n          .build().process(cluster.getSolrClient());\n      assertResponseValues(10, cluster.getSolrClient(), request, ImmutableMap.of(RuntimeLib.TYPE,\n          (Predicate<Object>) o -> o instanceof List && ((List) o).isEmpty()));\n\n\n    } finally {\n      server.first().stop();\n      cluster.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2111e4e2f7a90d10ca5d3102a3b29c2abc0efc2d","date":1563898669,"type":3,"author":"noble","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestContainerReqHandler#testRuntimeLib().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestContainerReqHandler#testRuntimeLib().mjava","sourceNew":"  @Test\n  public void testRuntimeLib() throws Exception {\n    Map<String, Object> jars = Utils.makeMap(\n        \"/jar1.jar\", getFileContent(\"runtimecode/runtimelibs.jar.bin\"),\n        \"/jar2.jar\", getFileContent(\"runtimecode/runtimelibs_v2.jar.bin\"),\n        \"/jar3.jar\", getFileContent(\"runtimecode/runtimelibs_v3.jar.bin\"));\n\n    Pair<Server, Integer> server = runHttpServer(jars);\n    int port = server.second();\n    MiniSolrCloudCluster cluster = configureCluster(4).configure();\n    try {\n      String payload = null;\n      try {\n        payload = \"{add-runtimelib:{name : 'foo', url: 'http://localhost:\" + port + \"/jar1.jar', \" +\n            \"sha512 : 'wrong-sha512'}}\";\n        new V2Request.Builder(\"/cluster\")\n            .withPayload(payload)\n            .withMethod(SolrRequest.METHOD.POST)\n            .build().process(cluster.getSolrClient());\n        fail(\"Expected error\");\n      } catch (BaseHttpSolrClient.RemoteExecutionException e) {\n        assertTrue(\"actual output : \" + Utils.toJSONString(e.getMetaData()), e.getMetaData()._getStr(\"error/details[0]/errorMessages[0]\", \"\").contains(\"expected sha512 hash :\"));\n      }\n\n      try {\n        payload = \"{add-runtimelib:{name : 'foo', url: 'http://localhost:\" + port + \"/jar0.jar', \" +\n            \"sha512 : 'd01b51de67ae1680a84a813983b1de3b592fc32f1a22b662fc9057da5953abd1b72476388ba342cad21671cd0b805503c78ab9075ff2f3951fdf75fa16981420'}}\";\n        new V2Request.Builder(\"/cluster\")\n            .withPayload(payload)\n            .withMethod(SolrRequest.METHOD.POST)\n            .build().process(cluster.getSolrClient());\n        fail(\"Expected error\");\n      } catch (BaseHttpSolrClient.RemoteExecutionException e) {\n        assertTrue(\"Actual output : \" + Utils.toJSONString(e.getMetaData()), e.getMetaData()._getStr(\"error/details[0]/errorMessages[0]\", \"\").contains(\"no such resource available: foo\"));\n      }\n\n      payload = \"{add-runtimelib:{name : 'foo', url: 'http://localhost:\" + port + \"/jar1.jar', \" +\n          \"sha512 : 'd01b51de67ae1680a84a813983b1de3b592fc32f1a22b662fc9057da5953abd1b72476388ba342cad21671cd0b805503c78ab9075ff2f3951fdf75fa16981420'}}\";\n      new V2Request.Builder(\"/cluster\")\n          .withPayload(payload)\n          .withMethod(SolrRequest.METHOD.POST)\n          .build().process(cluster.getSolrClient());\n      assertEquals(getObjectByPath(Utils.fromJSONString(payload), true, \"add-runtimelib/sha512\"),\n          getObjectByPath(new ClusterProperties(cluster.getZkClient()).getClusterProperties(), true, \"runtimeLib/foo/sha512\"));\n\n\n      new V2Request.Builder(\"/cluster\")\n          .withPayload(\"{add-requesthandler:{name : 'bar', class : 'org.apache.solr.core.RuntimeLibReqHandler'}}\")\n          .withMethod(SolrRequest.METHOD.POST)\n          .build().process(cluster.getSolrClient());\n      Map<String, Object> map = new ClusterProperties(cluster.getZkClient()).getClusterProperties();\n\n\n      V2Request request = new V2Request.Builder(\"/node/ext/bar\")\n          .withMethod(SolrRequest.METHOD.POST)\n          .build();\n      assertResponseValues(10, cluster.getSolrClient(), request, Utils.makeMap(\n          \"class\", \"org.apache.solr.core.RuntimeLibReqHandler\",\n          \"loader\", MemClassLoader.class.getName(),\n          \"version\", null));\n\n\n      assertEquals(\"org.apache.solr.core.RuntimeLibReqHandler\",\n          getObjectByPath(map, true, Arrays.asList(\"requestHandler\", \"bar\", \"class\")));\n\n\n      payload = \"{update-runtimelib:{name : 'foo', url: 'http://localhost:\" + port + \"/jar3.jar', \" +\n          \"sha512 : '60ec88c2a2e9b409f7afc309273383810a0d07a078b482434eda9674f7e25b8adafa8a67c9913c996cbfb78a7f6ad2b9db26dbd4fe0ca4068f248d5db563f922'}}\";\n      new V2Request.Builder(\"/cluster\")\n          .withPayload(payload)\n          .withMethod(SolrRequest.METHOD.POST)\n          .build().process(cluster.getSolrClient());\n      assertEquals(getObjectByPath(Utils.fromJSONString(payload), true, \"update-runtimelib/sha512\"),\n          getObjectByPath(new ClusterProperties(cluster.getZkClient()).getClusterProperties(), true, \"runtimeLib/foo/sha512\"));\n\n\n      request = new V2Request.Builder(\"/node/ext/bar\")\n          .withMethod(SolrRequest.METHOD.POST)\n          .build();\n      assertResponseValues(10, cluster.getSolrClient(), request, Utils.makeMap(\n          \"class\", \"org.apache.solr.core.RuntimeLibReqHandler\",\n          \"loader\", MemClassLoader.class.getName(),\n          \"version\", \"3\")\n      );\n\n\n      new V2Request.Builder(\"/cluster\")\n          .withPayload(\"{delete-requesthandler: 'bar'}\")\n          .withMethod(SolrRequest.METHOD.POST)\n          .build().process(cluster.getSolrClient());\n      request = new V2Request.Builder(\"/node/ext\")\n          .withMethod(SolrRequest.METHOD.POST)\n          .build();\n      assertResponseValues(10, cluster.getSolrClient(), request, ImmutableMap.of(SolrRequestHandler.TYPE,\n          (Predicate<Object>) o -> o instanceof List && ((List) o).isEmpty()));\n      new V2Request.Builder(\"/cluster\")\n          .withPayload(\"{delete-runtimelib : 'foo'}\")\n          .withMethod(SolrRequest.METHOD.POST)\n          .build().process(cluster.getSolrClient());\n      assertResponseValues(10, cluster.getSolrClient(), request, ImmutableMap.of(RuntimeLib.TYPE,\n          (Predicate<Object>) o -> o instanceof List && ((List) o).isEmpty()));\n\n\n    } finally {\n      cluster.shutdown();\n      server.first().stop();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testRuntimeLib() throws Exception {\n    Map<String, Object> jars = Utils.makeMap(\n        \"/jar1.jar\", getFileContent(\"runtimecode/runtimelibs.jar.bin\"),\n        \"/jar2.jar\", getFileContent(\"runtimecode/runtimelibs_v2.jar.bin\"),\n        \"/jar3.jar\", getFileContent(\"runtimecode/runtimelibs_v3.jar.bin\"));\n\n    Pair<Server, Integer> server = runHttpServer(jars);\n    int port = server.second();\n    MiniSolrCloudCluster cluster = configureCluster(4).configure();\n    try {\n      String payload = null;\n      try {\n        payload = \"{add-runtimelib:{name : 'foo', url: 'http://localhost:\" + port + \"/jar1.jar', \" +\n            \"sha512 : 'wrong-sha512'}}\";\n        new V2Request.Builder(\"/cluster\")\n            .withPayload(payload)\n            .withMethod(SolrRequest.METHOD.POST)\n            .build().process(cluster.getSolrClient());\n        fail(\"Expected error\");\n      } catch (BaseHttpSolrClient.RemoteExecutionException e) {\n        assertTrue(\"actual output : \" + Utils.toJSONString(e.getMetaData()), e.getMetaData()._getStr(\"error/details[0]/errorMessages[0]\", \"\").contains(\"expected sha512 hash :\"));\n      }\n\n      try {\n        payload = \"{add-runtimelib:{name : 'foo', url: 'http://localhost:\" + port + \"/jar0.jar', \" +\n            \"sha512 : 'd01b51de67ae1680a84a813983b1de3b592fc32f1a22b662fc9057da5953abd1b72476388ba342cad21671cd0b805503c78ab9075ff2f3951fdf75fa16981420'}}\";\n        new V2Request.Builder(\"/cluster\")\n            .withPayload(payload)\n            .withMethod(SolrRequest.METHOD.POST)\n            .build().process(cluster.getSolrClient());\n        fail(\"Expected error\");\n      } catch (BaseHttpSolrClient.RemoteExecutionException e) {\n        assertTrue(\"Actual output : \" + Utils.toJSONString(e.getMetaData()), e.getMetaData()._getStr(\"error/details[0]/errorMessages[0]\", \"\").contains(\"no such resource available: foo\"));\n      }\n\n      payload = \"{add-runtimelib:{name : 'foo', url: 'http://localhost:\" + port + \"/jar1.jar', \" +\n          \"sha512 : 'd01b51de67ae1680a84a813983b1de3b592fc32f1a22b662fc9057da5953abd1b72476388ba342cad21671cd0b805503c78ab9075ff2f3951fdf75fa16981420'}}\";\n      new V2Request.Builder(\"/cluster\")\n          .withPayload(payload)\n          .withMethod(SolrRequest.METHOD.POST)\n          .build().process(cluster.getSolrClient());\n      assertEquals(getObjectByPath(Utils.fromJSONString(payload), true, \"add-runtimelib/sha512\"),\n          getObjectByPath(new ClusterProperties(cluster.getZkClient()).getClusterProperties(), true, \"runtimeLib/foo/sha512\"));\n\n\n      new V2Request.Builder(\"/cluster\")\n          .withPayload(\"{add-requesthandler:{name : 'bar', class : 'org.apache.solr.core.RuntimeLibReqHandler'}}\")\n          .withMethod(SolrRequest.METHOD.POST)\n          .build().process(cluster.getSolrClient());\n      Map<String, Object> map = new ClusterProperties(cluster.getZkClient()).getClusterProperties();\n\n\n      V2Request request = new V2Request.Builder(\"/node/ext/bar\")\n          .withMethod(SolrRequest.METHOD.POST)\n          .build();\n      assertResponseValues(10, cluster.getSolrClient(), request, Utils.makeMap(\n          \"class\", \"org.apache.solr.core.RuntimeLibReqHandler\",\n          \"loader\", MemClassLoader.class.getName(),\n          \"version\", null));\n\n\n      assertEquals(\"org.apache.solr.core.RuntimeLibReqHandler\",\n          getObjectByPath(map, true, Arrays.asList(\"requestHandler\", \"bar\", \"class\")));\n\n\n      payload = \"{update-runtimelib:{name : 'foo', url: 'http://localhost:\" + port + \"/jar3.jar', \" +\n          \"sha512 : 'f67a7735a89b4348e273ca29e4651359d6d976ba966cb871c4b468ea1dbd452e42fcde9d188b7788e5a1ef668283c690606032922364759d19588666d5862653'}}\";\n      new V2Request.Builder(\"/cluster\")\n          .withPayload(payload)\n          .withMethod(SolrRequest.METHOD.POST)\n          .build().process(cluster.getSolrClient());\n      assertEquals(getObjectByPath(Utils.fromJSONString(payload), true, \"update-runtimelib/sha512\"),\n          getObjectByPath(new ClusterProperties(cluster.getZkClient()).getClusterProperties(), true, \"runtimeLib/foo/sha512\"));\n\n\n      request = new V2Request.Builder(\"/node/ext/bar\")\n          .withMethod(SolrRequest.METHOD.POST)\n          .build();\n      assertResponseValues(10, cluster.getSolrClient(), request, Utils.makeMap(\n          \"class\", \"org.apache.solr.core.RuntimeLibReqHandler\",\n          \"loader\", MemClassLoader.class.getName(),\n          \"version\", \"3\")\n      );\n\n\n      new V2Request.Builder(\"/cluster\")\n          .withPayload(\"{delete-requesthandler: 'bar'}\")\n          .withMethod(SolrRequest.METHOD.POST)\n          .build().process(cluster.getSolrClient());\n      request = new V2Request.Builder(\"/node/ext\")\n          .withMethod(SolrRequest.METHOD.POST)\n          .build();\n      assertResponseValues(10, cluster.getSolrClient(), request, ImmutableMap.of(SolrRequestHandler.TYPE,\n          (Predicate<Object>) o -> o instanceof List && ((List) o).isEmpty()));\n      new V2Request.Builder(\"/cluster\")\n          .withPayload(\"{delete-runtimelib : 'foo'}\")\n          .withMethod(SolrRequest.METHOD.POST)\n          .build().process(cluster.getSolrClient());\n      assertResponseValues(10, cluster.getSolrClient(), request, ImmutableMap.of(RuntimeLib.TYPE,\n          (Predicate<Object>) o -> o instanceof List && ((List) o).isEmpty()));\n\n\n    } finally {\n      cluster.shutdown();\n      server.first().stop();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"39dabfd19b49b248d63cedbb01ea144ee5ad071c","date":1566241238,"type":5,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestContainerReqHandler#testPackageAPI().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestContainerReqHandler#testRuntimeLib().mjava","sourceNew":"  @Test\n  public void testPackageAPI() throws Exception {\n    Map<String, Object> jars = Utils.makeMap(\n        \"/jar1.jar\", getFileContent(\"runtimecode/runtimelibs.jar.bin\"),\n        \"/jar2.jar\", getFileContent(\"runtimecode/runtimelibs_v2.jar.bin\"),\n        \"/jar3.jar\", getFileContent(\"runtimecode/runtimelibs_v3.jar.bin\"));\n\n    Pair<Server, Integer> server = runHttpServer(jars);\n    int port = server.second();\n    MiniSolrCloudCluster cluster = configureCluster(4).configure();\n    try {\n      String payload = null;\n      try {\n        payload = \"{add-package:{name : 'global', url: 'http://localhost:\" + port + \"/jar1.jar', \" +\n            \"sha512 : 'wrong-sha512'}}\";\n        new V2Request.Builder(\"/cluster\")\n            .withPayload(payload)\n            .withMethod(SolrRequest.METHOD.POST)\n            .build().process(cluster.getSolrClient());\n        fail(\"Expected error\");\n      } catch (BaseHttpSolrClient.RemoteExecutionException e) {\n        assertTrue(\"actual output : \" + Utils.toJSONString(e.getMetaData()), e.getMetaData()._getStr(\"error/details[0]/errorMessages[0]\", \"\").contains(\"expected sha512 hash :\"));\n      }\n\n      try {\n        payload = \"{add-package:{name : 'foo', url: 'http://localhost:\" + port + \"/jar0.jar', \" +\n            \"sha512 : 'd01b51de67ae1680a84a813983b1de3b592fc32f1a22b662fc9057da5953abd1b72476388ba342cad21671cd0b805503c78ab9075ff2f3951fdf75fa16981420'}}\";\n        new V2Request.Builder(\"/cluster\")\n            .withPayload(payload)\n            .withMethod(SolrRequest.METHOD.POST)\n            .build().process(cluster.getSolrClient());\n        fail(\"Expected error\");\n      } catch (BaseHttpSolrClient.RemoteExecutionException e) {\n        assertTrue(\"Actual output : \" + Utils.toJSONString(e.getMetaData()), e.getMetaData()._getStr(\"error/details[0]/errorMessages[0]\", \"\").contains(\"no such resource available: foo\"));\n      }\n\n      payload = \"{add-package:{name : 'global', url: 'http://localhost:\" + port + \"/jar1.jar', \" +\n          \"sha512 : 'd01b51de67ae1680a84a813983b1de3b592fc32f1a22b662fc9057da5953abd1b72476388ba342cad21671cd0b805503c78ab9075ff2f3951fdf75fa16981420'}}\";\n      new V2Request.Builder(\"/cluster\")\n          .withPayload(payload)\n          .withMethod(SolrRequest.METHOD.POST)\n          .build().process(cluster.getSolrClient());\n      assertEquals(getObjectByPath(Utils.fromJSONString(payload), true, \"add-package/sha512\"),\n          getObjectByPath(new ClusterProperties(cluster.getZkClient()).getClusterProperties(), true, \"package/global/sha512\"));\n\n\n      new V2Request.Builder(\"/cluster\")\n          .withPayload(\"{add-requesthandler:{name : 'bar', class : 'org.apache.solr.core.RuntimeLibReqHandler', package : global}}\")\n          .withMethod(SolrRequest.METHOD.POST)\n          .build().process(cluster.getSolrClient());\n      Map<String, Object> map = new ClusterProperties(cluster.getZkClient()).getClusterProperties();\n\n\n      V2Request request = new V2Request.Builder(\"/node/ext/bar\")\n          .withMethod(SolrRequest.METHOD.POST)\n          .build();\n      assertResponseValues(10, cluster.getSolrClient(), request, Utils.makeMap(\n          \"class\", \"org.apache.solr.core.RuntimeLibReqHandler\",\n          \"loader\", MemClassLoader.class.getName(),\n          \"version\", null));\n\n\n      assertEquals(\"org.apache.solr.core.RuntimeLibReqHandler\",\n          getObjectByPath(map, true, Arrays.asList(\"requestHandler\", \"bar\", \"class\")));\n\n\n      payload = \"{update-package:{name : 'global', url: 'http://localhost:\" + port + \"/jar3.jar', \" +\n          \"sha512 : '60ec88c2a2e9b409f7afc309273383810a0d07a078b482434eda9674f7e25b8adafa8a67c9913c996cbfb78a7f6ad2b9db26dbd4fe0ca4068f248d5db563f922'}}\";\n      new V2Request.Builder(\"/cluster\")\n          .withPayload(payload)\n          .withMethod(SolrRequest.METHOD.POST)\n          .build().process(cluster.getSolrClient());\n      assertEquals(getObjectByPath(Utils.fromJSONString(payload), true, \"update-package/sha512\"),\n          getObjectByPath(new ClusterProperties(cluster.getZkClient()).getClusterProperties(), true, \"package/global/sha512\"));\n\n\n      request = new V2Request.Builder(\"/node/ext/bar\")\n          .withMethod(SolrRequest.METHOD.POST)\n          .build();\n      assertResponseValues(10, cluster.getSolrClient(), request, Utils.makeMap(\n          \"class\", \"org.apache.solr.core.RuntimeLibReqHandler\",\n          \"loader\", MemClassLoader.class.getName(),\n          \"version\", \"3\")\n      );\n\n\n      new V2Request.Builder(\"/cluster\")\n          .withPayload(\"{delete-requesthandler: 'bar'}\")\n          .withMethod(SolrRequest.METHOD.POST)\n          .build().process(cluster.getSolrClient());\n      request = new V2Request.Builder(\"/node/ext\")\n          .withMethod(SolrRequest.METHOD.POST)\n          .build();\n      assertResponseValues(10, cluster.getSolrClient(), request, ImmutableMap.of(SolrRequestHandler.TYPE,\n          (Predicate<Object>) o -> o instanceof List && ((List) o).isEmpty()));\n      new V2Request.Builder(\"/cluster\")\n          .withPayload(\"{delete-package : 'global'}\")\n          .withMethod(SolrRequest.METHOD.POST)\n          .build().process(cluster.getSolrClient());\n      assertResponseValues(10, cluster.getSolrClient(), request, ImmutableMap.of(RuntimeLib.TYPE,\n          (Predicate<Object>) o -> o instanceof List && ((List) o).isEmpty()));\n\n\n    } finally {\n      cluster.shutdown();\n      server.first().stop();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testRuntimeLib() throws Exception {\n    Map<String, Object> jars = Utils.makeMap(\n        \"/jar1.jar\", getFileContent(\"runtimecode/runtimelibs.jar.bin\"),\n        \"/jar2.jar\", getFileContent(\"runtimecode/runtimelibs_v2.jar.bin\"),\n        \"/jar3.jar\", getFileContent(\"runtimecode/runtimelibs_v3.jar.bin\"));\n\n    Pair<Server, Integer> server = runHttpServer(jars);\n    int port = server.second();\n    MiniSolrCloudCluster cluster = configureCluster(4).configure();\n    try {\n      String payload = null;\n      try {\n        payload = \"{add-runtimelib:{name : 'foo', url: 'http://localhost:\" + port + \"/jar1.jar', \" +\n            \"sha512 : 'wrong-sha512'}}\";\n        new V2Request.Builder(\"/cluster\")\n            .withPayload(payload)\n            .withMethod(SolrRequest.METHOD.POST)\n            .build().process(cluster.getSolrClient());\n        fail(\"Expected error\");\n      } catch (BaseHttpSolrClient.RemoteExecutionException e) {\n        assertTrue(\"actual output : \" + Utils.toJSONString(e.getMetaData()), e.getMetaData()._getStr(\"error/details[0]/errorMessages[0]\", \"\").contains(\"expected sha512 hash :\"));\n      }\n\n      try {\n        payload = \"{add-runtimelib:{name : 'foo', url: 'http://localhost:\" + port + \"/jar0.jar', \" +\n            \"sha512 : 'd01b51de67ae1680a84a813983b1de3b592fc32f1a22b662fc9057da5953abd1b72476388ba342cad21671cd0b805503c78ab9075ff2f3951fdf75fa16981420'}}\";\n        new V2Request.Builder(\"/cluster\")\n            .withPayload(payload)\n            .withMethod(SolrRequest.METHOD.POST)\n            .build().process(cluster.getSolrClient());\n        fail(\"Expected error\");\n      } catch (BaseHttpSolrClient.RemoteExecutionException e) {\n        assertTrue(\"Actual output : \" + Utils.toJSONString(e.getMetaData()), e.getMetaData()._getStr(\"error/details[0]/errorMessages[0]\", \"\").contains(\"no such resource available: foo\"));\n      }\n\n      payload = \"{add-runtimelib:{name : 'foo', url: 'http://localhost:\" + port + \"/jar1.jar', \" +\n          \"sha512 : 'd01b51de67ae1680a84a813983b1de3b592fc32f1a22b662fc9057da5953abd1b72476388ba342cad21671cd0b805503c78ab9075ff2f3951fdf75fa16981420'}}\";\n      new V2Request.Builder(\"/cluster\")\n          .withPayload(payload)\n          .withMethod(SolrRequest.METHOD.POST)\n          .build().process(cluster.getSolrClient());\n      assertEquals(getObjectByPath(Utils.fromJSONString(payload), true, \"add-runtimelib/sha512\"),\n          getObjectByPath(new ClusterProperties(cluster.getZkClient()).getClusterProperties(), true, \"runtimeLib/foo/sha512\"));\n\n\n      new V2Request.Builder(\"/cluster\")\n          .withPayload(\"{add-requesthandler:{name : 'bar', class : 'org.apache.solr.core.RuntimeLibReqHandler'}}\")\n          .withMethod(SolrRequest.METHOD.POST)\n          .build().process(cluster.getSolrClient());\n      Map<String, Object> map = new ClusterProperties(cluster.getZkClient()).getClusterProperties();\n\n\n      V2Request request = new V2Request.Builder(\"/node/ext/bar\")\n          .withMethod(SolrRequest.METHOD.POST)\n          .build();\n      assertResponseValues(10, cluster.getSolrClient(), request, Utils.makeMap(\n          \"class\", \"org.apache.solr.core.RuntimeLibReqHandler\",\n          \"loader\", MemClassLoader.class.getName(),\n          \"version\", null));\n\n\n      assertEquals(\"org.apache.solr.core.RuntimeLibReqHandler\",\n          getObjectByPath(map, true, Arrays.asList(\"requestHandler\", \"bar\", \"class\")));\n\n\n      payload = \"{update-runtimelib:{name : 'foo', url: 'http://localhost:\" + port + \"/jar3.jar', \" +\n          \"sha512 : '60ec88c2a2e9b409f7afc309273383810a0d07a078b482434eda9674f7e25b8adafa8a67c9913c996cbfb78a7f6ad2b9db26dbd4fe0ca4068f248d5db563f922'}}\";\n      new V2Request.Builder(\"/cluster\")\n          .withPayload(payload)\n          .withMethod(SolrRequest.METHOD.POST)\n          .build().process(cluster.getSolrClient());\n      assertEquals(getObjectByPath(Utils.fromJSONString(payload), true, \"update-runtimelib/sha512\"),\n          getObjectByPath(new ClusterProperties(cluster.getZkClient()).getClusterProperties(), true, \"runtimeLib/foo/sha512\"));\n\n\n      request = new V2Request.Builder(\"/node/ext/bar\")\n          .withMethod(SolrRequest.METHOD.POST)\n          .build();\n      assertResponseValues(10, cluster.getSolrClient(), request, Utils.makeMap(\n          \"class\", \"org.apache.solr.core.RuntimeLibReqHandler\",\n          \"loader\", MemClassLoader.class.getName(),\n          \"version\", \"3\")\n      );\n\n\n      new V2Request.Builder(\"/cluster\")\n          .withPayload(\"{delete-requesthandler: 'bar'}\")\n          .withMethod(SolrRequest.METHOD.POST)\n          .build().process(cluster.getSolrClient());\n      request = new V2Request.Builder(\"/node/ext\")\n          .withMethod(SolrRequest.METHOD.POST)\n          .build();\n      assertResponseValues(10, cluster.getSolrClient(), request, ImmutableMap.of(SolrRequestHandler.TYPE,\n          (Predicate<Object>) o -> o instanceof List && ((List) o).isEmpty()));\n      new V2Request.Builder(\"/cluster\")\n          .withPayload(\"{delete-runtimelib : 'foo'}\")\n          .withMethod(SolrRequest.METHOD.POST)\n          .build().process(cluster.getSolrClient());\n      assertResponseValues(10, cluster.getSolrClient(), request, ImmutableMap.of(RuntimeLib.TYPE,\n          (Predicate<Object>) o -> o instanceof List && ((List) o).isEmpty()));\n\n\n    } finally {\n      cluster.shutdown();\n      server.first().stop();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"39dabfd19b49b248d63cedbb01ea144ee5ad071c":["2111e4e2f7a90d10ca5d3102a3b29c2abc0efc2d"],"d52ea0bca71d3b5f5fd37c12585ccd9309f8ea74":["fb50877dc038c021eba3a70999fd1f6ed85001c1"],"fb50877dc038c021eba3a70999fd1f6ed85001c1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["39dabfd19b49b248d63cedbb01ea144ee5ad071c"],"2111e4e2f7a90d10ca5d3102a3b29c2abc0efc2d":["d52ea0bca71d3b5f5fd37c12585ccd9309f8ea74"]},"commit2Childs":{"39dabfd19b49b248d63cedbb01ea144ee5ad071c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d52ea0bca71d3b5f5fd37c12585ccd9309f8ea74":["2111e4e2f7a90d10ca5d3102a3b29c2abc0efc2d"],"fb50877dc038c021eba3a70999fd1f6ed85001c1":["d52ea0bca71d3b5f5fd37c12585ccd9309f8ea74"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fb50877dc038c021eba3a70999fd1f6ed85001c1"],"2111e4e2f7a90d10ca5d3102a3b29c2abc0efc2d":["39dabfd19b49b248d63cedbb01ea144ee5ad071c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}