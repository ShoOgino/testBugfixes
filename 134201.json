{"path":"src/java/org/apache/solr/core/SolrResourceLoader#locateSolrHome().mjava","commits":[{"id":"baf5396191fd3f561aa9c6af0633bae3500799ba","date":1245405538,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"src/java/org/apache/solr/core/SolrResourceLoader#locateSolrHome().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Determines the solrhome from the environment.\n   * Tries JNDI (java:comp/env/solr/home) then system property (solr.solr.home);\n   * if both fail, defaults to solr/\n   * @return the instance directory name\n   */\n  /**\n   * Finds the solrhome based on looking up the value in one of three places:\n   * <ol>\n   *  <li>JNDI: via java:comp/env/solr/home</li>\n   *  <li>The system property solr.solr.home</li>\n   *  <li>Look in the current working directory for a solr/ directory</li> \n   * </ol>\n   *\n   * The return value is normalized.  Normalization essentially means it ends in a trailing slash.\n   * @return A normalized solrhome\n   * @see #normalizeDir(String)\n   */\n  public static String locateSolrHome() {\n    String home = null;\n    // Try JNDI\n    try {\n      Context c = new InitialContext();\n      home = (String)c.lookup(\"java:comp/env/\"+project+\"/home\");\n      log.info(\"Using JNDI solr.home: \"+home );\n    } catch (NoInitialContextException e) {\n      log.info(\"JNDI not configured for \"+project+\" (NoInitialContextEx)\");\n    } catch (NamingException e) {\n      log.info(\"No /\"+project+\"/home in JNDI\");\n    } catch( RuntimeException ex ) {\n      log.warn(\"Odd RuntimeException while testing for JNDI: \" + ex.getMessage());\n    } \n    \n    // Now try system property\n    if( home == null ) {\n      String prop = project + \".solr.home\";\n      home = System.getProperty(prop);\n      if( home != null ) {\n        log.info(\"using system property \"+prop+\": \" + home );\n      }\n    }\n    \n    // if all else fails, try \n    if( home == null ) {\n      home = project + '/';\n      log.info(project + \" home defaulted to '\" + home + \"' (could not find system property or JNDI)\");\n    }\n    return normalizeDir( home );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/core/SolrResourceLoader#locateSolrHome().mjava","pathOld":"src/java/org/apache/solr/core/SolrResourceLoader#locateSolrHome().mjava","sourceNew":"  /**\n   * Determines the solrhome from the environment.\n   * Tries JNDI (java:comp/env/solr/home) then system property (solr.solr.home);\n   * if both fail, defaults to solr/\n   * @return the instance directory name\n   */\n  /**\n   * Finds the solrhome based on looking up the value in one of three places:\n   * <ol>\n   *  <li>JNDI: via java:comp/env/solr/home</li>\n   *  <li>The system property solr.solr.home</li>\n   *  <li>Look in the current working directory for a solr/ directory</li> \n   * </ol>\n   *\n   * The return value is normalized.  Normalization essentially means it ends in a trailing slash.\n   * @return A normalized solrhome\n   * @see #normalizeDir(String)\n   */\n  public static String locateSolrHome() {\n    String home = null;\n    // Try JNDI\n    try {\n      Context c = new InitialContext();\n      home = (String)c.lookup(\"java:comp/env/\"+project+\"/home\");\n      log.info(\"Using JNDI solr.home: \"+home );\n    } catch (NoInitialContextException e) {\n      log.info(\"JNDI not configured for \"+project+\" (NoInitialContextEx)\");\n    } catch (NamingException e) {\n      log.info(\"No /\"+project+\"/home in JNDI\");\n    } catch( RuntimeException ex ) {\n      log.warn(\"Odd RuntimeException while testing for JNDI: \" + ex.getMessage());\n    } \n    \n    // Now try system property\n    if( home == null ) {\n      String prop = project + \".solr.home\";\n      home = System.getProperty(prop);\n      if( home != null ) {\n        log.info(\"using system property \"+prop+\": \" + home );\n      }\n    }\n    \n    // if all else fails, try \n    if( home == null ) {\n      home = project + '/';\n      log.info(project + \" home defaulted to '\" + home + \"' (could not find system property or JNDI)\");\n    }\n    return normalizeDir( home );\n  }\n\n","sourceOld":"  /**\n   * Determines the solrhome from the environment.\n   * Tries JNDI (java:comp/env/solr/home) then system property (solr.solr.home);\n   * if both fail, defaults to solr/\n   * @return the instance directory name\n   */\n  /**\n   * Finds the solrhome based on looking up the value in one of three places:\n   * <ol>\n   *  <li>JNDI: via java:comp/env/solr/home</li>\n   *  <li>The system property solr.solr.home</li>\n   *  <li>Look in the current working directory for a solr/ directory</li> \n   * </ol>\n   *\n   * The return value is normalized.  Normalization essentially means it ends in a trailing slash.\n   * @return A normalized solrhome\n   * @see #normalizeDir(String)\n   */\n  public static String locateSolrHome() {\n    String home = null;\n    // Try JNDI\n    try {\n      Context c = new InitialContext();\n      home = (String)c.lookup(\"java:comp/env/\"+project+\"/home\");\n      log.info(\"Using JNDI solr.home: \"+home );\n    } catch (NoInitialContextException e) {\n      log.info(\"JNDI not configured for \"+project+\" (NoInitialContextEx)\");\n    } catch (NamingException e) {\n      log.info(\"No /\"+project+\"/home in JNDI\");\n    } catch( RuntimeException ex ) {\n      log.warn(\"Odd RuntimeException while testing for JNDI: \" + ex.getMessage());\n    } \n    \n    // Now try system property\n    if( home == null ) {\n      String prop = project + \".solr.home\";\n      home = System.getProperty(prop);\n      if( home != null ) {\n        log.info(\"using system property \"+prop+\": \" + home );\n      }\n    }\n    \n    // if all else fails, try \n    if( home == null ) {\n      home = project + '/';\n      log.info(project + \" home defaulted to '\" + home + \"' (could not find system property or JNDI)\");\n    }\n    return normalizeDir( home );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"baf5396191fd3f561aa9c6af0633bae3500799ba":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"ad94625fb8d088209f46650c8097196fec67f00c":["baf5396191fd3f561aa9c6af0633bae3500799ba"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["baf5396191fd3f561aa9c6af0633bae3500799ba"],"baf5396191fd3f561aa9c6af0633bae3500799ba":["ad94625fb8d088209f46650c8097196fec67f00c"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}