{"path":"solr/core/src/java/org/apache/solr/uninverting/FieldCacheSanityChecker#check(CacheEntry...).mjava","commits":[{"id":"a076c3c721f685b7559308fdc2cd72d91bba67e5","date":1464168992,"type":1,"author":"Mike McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/uninverting/FieldCacheSanityChecker#check(CacheEntry...).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/uninverting/FieldCacheSanityChecker#check(CacheEntry...).mjava","sourceNew":"  /**\n   * Tests a CacheEntry[] for indication of \"insane\" cache usage.\n   * <p>\n   * <B>NOTE:</b>FieldCache CreationPlaceholder objects are ignored.\n   * (:TODO: is this a bad idea? are we masking a real problem?)\n   * </p>\n   */\n  public Insanity[] check(CacheEntry... cacheEntries) {\n    if (null == cacheEntries || 0 == cacheEntries.length) \n      return new Insanity[0];\n\n    // the indirect mapping lets MapOfSet dedup identical valIds for us\n    //\n    // maps the (valId) identityhashCode of cache values to \n    // sets of CacheEntry instances\n    final MapOfSets<Integer, CacheEntry> valIdToItems = new MapOfSets<>(new HashMap<Integer, Set<CacheEntry>>(17));\n    // maps ReaderField keys to Sets of ValueIds\n    final MapOfSets<ReaderField, Integer> readerFieldToValIds = new MapOfSets<>(new HashMap<ReaderField, Set<Integer>>(17));\n    //\n\n    // any keys that we know result in more then one valId\n    final Set<ReaderField> valMismatchKeys = new HashSet<>();\n\n    // iterate over all the cacheEntries to get the mappings we'll need\n    for (int i = 0; i < cacheEntries.length; i++) {\n      final CacheEntry item = cacheEntries[i];\n      final Object val = item.getValue();\n\n      // It's OK to have dup entries, where one is eg\n      // float[] and the other is the Bits (from\n      // getDocWithField())\n      if (val instanceof FieldCacheImpl.BitsEntry) {\n        continue;\n      }\n\n      if (val instanceof FieldCache.CreationPlaceholder)\n        continue;\n\n      final ReaderField rf = new ReaderField(item.getReaderKey(), \n                                            item.getFieldName());\n\n      final Integer valId = Integer.valueOf(System.identityHashCode(val));\n\n      // indirect mapping, so the MapOfSet will dedup identical valIds for us\n      valIdToItems.put(valId, item);\n      if (1 < readerFieldToValIds.put(rf, valId)) {\n        valMismatchKeys.add(rf);\n      }\n    }\n\n    final List<Insanity> insanity = new ArrayList<>(valMismatchKeys.size() * 3);\n\n    insanity.addAll(checkValueMismatch(valIdToItems, \n                                       readerFieldToValIds, \n                                       valMismatchKeys));\n    insanity.addAll(checkSubreaders(valIdToItems, \n                                    readerFieldToValIds));\n                    \n    return insanity.toArray(new Insanity[insanity.size()]);\n  }\n\n","sourceOld":"  /**\n   * Tests a CacheEntry[] for indication of \"insane\" cache usage.\n   * <p>\n   * <B>NOTE:</b>FieldCache CreationPlaceholder objects are ignored.\n   * (:TODO: is this a bad idea? are we masking a real problem?)\n   * </p>\n   */\n  public Insanity[] check(CacheEntry... cacheEntries) {\n    if (null == cacheEntries || 0 == cacheEntries.length) \n      return new Insanity[0];\n\n    // the indirect mapping lets MapOfSet dedup identical valIds for us\n    //\n    // maps the (valId) identityhashCode of cache values to \n    // sets of CacheEntry instances\n    final MapOfSets<Integer, CacheEntry> valIdToItems = new MapOfSets<>(new HashMap<Integer, Set<CacheEntry>>(17));\n    // maps ReaderField keys to Sets of ValueIds\n    final MapOfSets<ReaderField, Integer> readerFieldToValIds = new MapOfSets<>(new HashMap<ReaderField, Set<Integer>>(17));\n    //\n\n    // any keys that we know result in more then one valId\n    final Set<ReaderField> valMismatchKeys = new HashSet<>();\n\n    // iterate over all the cacheEntries to get the mappings we'll need\n    for (int i = 0; i < cacheEntries.length; i++) {\n      final CacheEntry item = cacheEntries[i];\n      final Object val = item.getValue();\n\n      // It's OK to have dup entries, where one is eg\n      // float[] and the other is the Bits (from\n      // getDocWithField())\n      if (val instanceof FieldCacheImpl.BitsEntry) {\n        continue;\n      }\n\n      if (val instanceof FieldCache.CreationPlaceholder)\n        continue;\n\n      final ReaderField rf = new ReaderField(item.getReaderKey(), \n                                            item.getFieldName());\n\n      final Integer valId = Integer.valueOf(System.identityHashCode(val));\n\n      // indirect mapping, so the MapOfSet will dedup identical valIds for us\n      valIdToItems.put(valId, item);\n      if (1 < readerFieldToValIds.put(rf, valId)) {\n        valMismatchKeys.add(rf);\n      }\n    }\n\n    final List<Insanity> insanity = new ArrayList<>(valMismatchKeys.size() * 3);\n\n    insanity.addAll(checkValueMismatch(valIdToItems, \n                                       readerFieldToValIds, \n                                       valMismatchKeys));\n    insanity.addAll(checkSubreaders(valIdToItems, \n                                    readerFieldToValIds));\n                    \n    return insanity.toArray(new Insanity[insanity.size()]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e121d43b5a10f2df530f406f935102656e9c4e8","date":1464198131,"type":1,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/uninverting/FieldCacheSanityChecker#check(CacheEntry...).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/uninverting/FieldCacheSanityChecker#check(CacheEntry...).mjava","sourceNew":"  /**\n   * Tests a CacheEntry[] for indication of \"insane\" cache usage.\n   * <p>\n   * <B>NOTE:</b>FieldCache CreationPlaceholder objects are ignored.\n   * (:TODO: is this a bad idea? are we masking a real problem?)\n   * </p>\n   */\n  public Insanity[] check(CacheEntry... cacheEntries) {\n    if (null == cacheEntries || 0 == cacheEntries.length) \n      return new Insanity[0];\n\n    // the indirect mapping lets MapOfSet dedup identical valIds for us\n    //\n    // maps the (valId) identityhashCode of cache values to \n    // sets of CacheEntry instances\n    final MapOfSets<Integer, CacheEntry> valIdToItems = new MapOfSets<>(new HashMap<Integer, Set<CacheEntry>>(17));\n    // maps ReaderField keys to Sets of ValueIds\n    final MapOfSets<ReaderField, Integer> readerFieldToValIds = new MapOfSets<>(new HashMap<ReaderField, Set<Integer>>(17));\n    //\n\n    // any keys that we know result in more then one valId\n    final Set<ReaderField> valMismatchKeys = new HashSet<>();\n\n    // iterate over all the cacheEntries to get the mappings we'll need\n    for (int i = 0; i < cacheEntries.length; i++) {\n      final CacheEntry item = cacheEntries[i];\n      final Object val = item.getValue();\n\n      // It's OK to have dup entries, where one is eg\n      // float[] and the other is the Bits (from\n      // getDocWithField())\n      if (val instanceof FieldCacheImpl.BitsEntry) {\n        continue;\n      }\n\n      if (val instanceof FieldCache.CreationPlaceholder)\n        continue;\n\n      final ReaderField rf = new ReaderField(item.getReaderKey(), \n                                            item.getFieldName());\n\n      final Integer valId = Integer.valueOf(System.identityHashCode(val));\n\n      // indirect mapping, so the MapOfSet will dedup identical valIds for us\n      valIdToItems.put(valId, item);\n      if (1 < readerFieldToValIds.put(rf, valId)) {\n        valMismatchKeys.add(rf);\n      }\n    }\n\n    final List<Insanity> insanity = new ArrayList<>(valMismatchKeys.size() * 3);\n\n    insanity.addAll(checkValueMismatch(valIdToItems, \n                                       readerFieldToValIds, \n                                       valMismatchKeys));\n    insanity.addAll(checkSubreaders(valIdToItems, \n                                    readerFieldToValIds));\n                    \n    return insanity.toArray(new Insanity[insanity.size()]);\n  }\n\n","sourceOld":"  /**\n   * Tests a CacheEntry[] for indication of \"insane\" cache usage.\n   * <p>\n   * <B>NOTE:</b>FieldCache CreationPlaceholder objects are ignored.\n   * (:TODO: is this a bad idea? are we masking a real problem?)\n   * </p>\n   */\n  public Insanity[] check(CacheEntry... cacheEntries) {\n    if (null == cacheEntries || 0 == cacheEntries.length) \n      return new Insanity[0];\n\n    // the indirect mapping lets MapOfSet dedup identical valIds for us\n    //\n    // maps the (valId) identityhashCode of cache values to \n    // sets of CacheEntry instances\n    final MapOfSets<Integer, CacheEntry> valIdToItems = new MapOfSets<>(new HashMap<Integer, Set<CacheEntry>>(17));\n    // maps ReaderField keys to Sets of ValueIds\n    final MapOfSets<ReaderField, Integer> readerFieldToValIds = new MapOfSets<>(new HashMap<ReaderField, Set<Integer>>(17));\n    //\n\n    // any keys that we know result in more then one valId\n    final Set<ReaderField> valMismatchKeys = new HashSet<>();\n\n    // iterate over all the cacheEntries to get the mappings we'll need\n    for (int i = 0; i < cacheEntries.length; i++) {\n      final CacheEntry item = cacheEntries[i];\n      final Object val = item.getValue();\n\n      // It's OK to have dup entries, where one is eg\n      // float[] and the other is the Bits (from\n      // getDocWithField())\n      if (val instanceof FieldCacheImpl.BitsEntry) {\n        continue;\n      }\n\n      if (val instanceof FieldCache.CreationPlaceholder)\n        continue;\n\n      final ReaderField rf = new ReaderField(item.getReaderKey(), \n                                            item.getFieldName());\n\n      final Integer valId = Integer.valueOf(System.identityHashCode(val));\n\n      // indirect mapping, so the MapOfSet will dedup identical valIds for us\n      valIdToItems.put(valId, item);\n      if (1 < readerFieldToValIds.put(rf, valId)) {\n        valMismatchKeys.add(rf);\n      }\n    }\n\n    final List<Insanity> insanity = new ArrayList<>(valMismatchKeys.size() * 3);\n\n    insanity.addAll(checkValueMismatch(valIdToItems, \n                                       readerFieldToValIds, \n                                       valMismatchKeys));\n    insanity.addAll(checkSubreaders(valIdToItems, \n                                    readerFieldToValIds));\n                    \n    return insanity.toArray(new Insanity[insanity.size()]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83870855d82aba6819217abeff5a40779dbb28b4","date":1464291012,"type":1,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/uninverting/FieldCacheSanityChecker#check(CacheEntry...).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/uninverting/FieldCacheSanityChecker#check(CacheEntry...).mjava","sourceNew":"  /**\n   * Tests a CacheEntry[] for indication of \"insane\" cache usage.\n   * <p>\n   * <B>NOTE:</b>FieldCache CreationPlaceholder objects are ignored.\n   * (:TODO: is this a bad idea? are we masking a real problem?)\n   * </p>\n   */\n  public Insanity[] check(CacheEntry... cacheEntries) {\n    if (null == cacheEntries || 0 == cacheEntries.length) \n      return new Insanity[0];\n\n    // the indirect mapping lets MapOfSet dedup identical valIds for us\n    //\n    // maps the (valId) identityhashCode of cache values to \n    // sets of CacheEntry instances\n    final MapOfSets<Integer, CacheEntry> valIdToItems = new MapOfSets<>(new HashMap<Integer, Set<CacheEntry>>(17));\n    // maps ReaderField keys to Sets of ValueIds\n    final MapOfSets<ReaderField, Integer> readerFieldToValIds = new MapOfSets<>(new HashMap<ReaderField, Set<Integer>>(17));\n    //\n\n    // any keys that we know result in more then one valId\n    final Set<ReaderField> valMismatchKeys = new HashSet<>();\n\n    // iterate over all the cacheEntries to get the mappings we'll need\n    for (int i = 0; i < cacheEntries.length; i++) {\n      final CacheEntry item = cacheEntries[i];\n      final Object val = item.getValue();\n\n      // It's OK to have dup entries, where one is eg\n      // float[] and the other is the Bits (from\n      // getDocWithField())\n      if (val instanceof FieldCacheImpl.BitsEntry) {\n        continue;\n      }\n\n      if (val instanceof FieldCache.CreationPlaceholder)\n        continue;\n\n      final ReaderField rf = new ReaderField(item.getReaderKey(), \n                                            item.getFieldName());\n\n      final Integer valId = Integer.valueOf(System.identityHashCode(val));\n\n      // indirect mapping, so the MapOfSet will dedup identical valIds for us\n      valIdToItems.put(valId, item);\n      if (1 < readerFieldToValIds.put(rf, valId)) {\n        valMismatchKeys.add(rf);\n      }\n    }\n\n    final List<Insanity> insanity = new ArrayList<>(valMismatchKeys.size() * 3);\n\n    insanity.addAll(checkValueMismatch(valIdToItems, \n                                       readerFieldToValIds, \n                                       valMismatchKeys));\n    insanity.addAll(checkSubreaders(valIdToItems, \n                                    readerFieldToValIds));\n                    \n    return insanity.toArray(new Insanity[insanity.size()]);\n  }\n\n","sourceOld":"  /**\n   * Tests a CacheEntry[] for indication of \"insane\" cache usage.\n   * <p>\n   * <B>NOTE:</b>FieldCache CreationPlaceholder objects are ignored.\n   * (:TODO: is this a bad idea? are we masking a real problem?)\n   * </p>\n   */\n  public Insanity[] check(CacheEntry... cacheEntries) {\n    if (null == cacheEntries || 0 == cacheEntries.length) \n      return new Insanity[0];\n\n    // the indirect mapping lets MapOfSet dedup identical valIds for us\n    //\n    // maps the (valId) identityhashCode of cache values to \n    // sets of CacheEntry instances\n    final MapOfSets<Integer, CacheEntry> valIdToItems = new MapOfSets<>(new HashMap<Integer, Set<CacheEntry>>(17));\n    // maps ReaderField keys to Sets of ValueIds\n    final MapOfSets<ReaderField, Integer> readerFieldToValIds = new MapOfSets<>(new HashMap<ReaderField, Set<Integer>>(17));\n    //\n\n    // any keys that we know result in more then one valId\n    final Set<ReaderField> valMismatchKeys = new HashSet<>();\n\n    // iterate over all the cacheEntries to get the mappings we'll need\n    for (int i = 0; i < cacheEntries.length; i++) {\n      final CacheEntry item = cacheEntries[i];\n      final Object val = item.getValue();\n\n      // It's OK to have dup entries, where one is eg\n      // float[] and the other is the Bits (from\n      // getDocWithField())\n      if (val instanceof FieldCacheImpl.BitsEntry) {\n        continue;\n      }\n\n      if (val instanceof FieldCache.CreationPlaceholder)\n        continue;\n\n      final ReaderField rf = new ReaderField(item.getReaderKey(), \n                                            item.getFieldName());\n\n      final Integer valId = Integer.valueOf(System.identityHashCode(val));\n\n      // indirect mapping, so the MapOfSet will dedup identical valIds for us\n      valIdToItems.put(valId, item);\n      if (1 < readerFieldToValIds.put(rf, valId)) {\n        valMismatchKeys.add(rf);\n      }\n    }\n\n    final List<Insanity> insanity = new ArrayList<>(valMismatchKeys.size() * 3);\n\n    insanity.addAll(checkValueMismatch(valIdToItems, \n                                       readerFieldToValIds, \n                                       valMismatchKeys));\n    insanity.addAll(checkSubreaders(valIdToItems, \n                                    readerFieldToValIds));\n                    \n    return insanity.toArray(new Insanity[insanity.size()]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":1,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/uninverting/FieldCacheSanityChecker#check(CacheEntry...).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/uninverting/FieldCacheSanityChecker#check(CacheEntry...).mjava","sourceNew":"  /**\n   * Tests a CacheEntry[] for indication of \"insane\" cache usage.\n   * <p>\n   * <B>NOTE:</b>FieldCache CreationPlaceholder objects are ignored.\n   * (:TODO: is this a bad idea? are we masking a real problem?)\n   * </p>\n   */\n  public Insanity[] check(CacheEntry... cacheEntries) {\n    if (null == cacheEntries || 0 == cacheEntries.length) \n      return new Insanity[0];\n\n    // the indirect mapping lets MapOfSet dedup identical valIds for us\n    //\n    // maps the (valId) identityhashCode of cache values to \n    // sets of CacheEntry instances\n    final MapOfSets<Integer, CacheEntry> valIdToItems = new MapOfSets<>(new HashMap<Integer, Set<CacheEntry>>(17));\n    // maps ReaderField keys to Sets of ValueIds\n    final MapOfSets<ReaderField, Integer> readerFieldToValIds = new MapOfSets<>(new HashMap<ReaderField, Set<Integer>>(17));\n    //\n\n    // any keys that we know result in more then one valId\n    final Set<ReaderField> valMismatchKeys = new HashSet<>();\n\n    // iterate over all the cacheEntries to get the mappings we'll need\n    for (int i = 0; i < cacheEntries.length; i++) {\n      final CacheEntry item = cacheEntries[i];\n      final Object val = item.getValue();\n\n      // It's OK to have dup entries, where one is eg\n      // float[] and the other is the Bits (from\n      // getDocWithField())\n      if (val instanceof FieldCacheImpl.BitsEntry) {\n        continue;\n      }\n\n      if (val instanceof FieldCache.CreationPlaceholder)\n        continue;\n\n      final ReaderField rf = new ReaderField(item.getReaderKey(), \n                                            item.getFieldName());\n\n      final Integer valId = Integer.valueOf(System.identityHashCode(val));\n\n      // indirect mapping, so the MapOfSet will dedup identical valIds for us\n      valIdToItems.put(valId, item);\n      if (1 < readerFieldToValIds.put(rf, valId)) {\n        valMismatchKeys.add(rf);\n      }\n    }\n\n    final List<Insanity> insanity = new ArrayList<>(valMismatchKeys.size() * 3);\n\n    insanity.addAll(checkValueMismatch(valIdToItems, \n                                       readerFieldToValIds, \n                                       valMismatchKeys));\n    insanity.addAll(checkSubreaders(valIdToItems, \n                                    readerFieldToValIds));\n                    \n    return insanity.toArray(new Insanity[insanity.size()]);\n  }\n\n","sourceOld":"  /**\n   * Tests a CacheEntry[] for indication of \"insane\" cache usage.\n   * <p>\n   * <B>NOTE:</b>FieldCache CreationPlaceholder objects are ignored.\n   * (:TODO: is this a bad idea? are we masking a real problem?)\n   * </p>\n   */\n  public Insanity[] check(CacheEntry... cacheEntries) {\n    if (null == cacheEntries || 0 == cacheEntries.length) \n      return new Insanity[0];\n\n    // the indirect mapping lets MapOfSet dedup identical valIds for us\n    //\n    // maps the (valId) identityhashCode of cache values to \n    // sets of CacheEntry instances\n    final MapOfSets<Integer, CacheEntry> valIdToItems = new MapOfSets<>(new HashMap<Integer, Set<CacheEntry>>(17));\n    // maps ReaderField keys to Sets of ValueIds\n    final MapOfSets<ReaderField, Integer> readerFieldToValIds = new MapOfSets<>(new HashMap<ReaderField, Set<Integer>>(17));\n    //\n\n    // any keys that we know result in more then one valId\n    final Set<ReaderField> valMismatchKeys = new HashSet<>();\n\n    // iterate over all the cacheEntries to get the mappings we'll need\n    for (int i = 0; i < cacheEntries.length; i++) {\n      final CacheEntry item = cacheEntries[i];\n      final Object val = item.getValue();\n\n      // It's OK to have dup entries, where one is eg\n      // float[] and the other is the Bits (from\n      // getDocWithField())\n      if (val instanceof FieldCacheImpl.BitsEntry) {\n        continue;\n      }\n\n      if (val instanceof FieldCache.CreationPlaceholder)\n        continue;\n\n      final ReaderField rf = new ReaderField(item.getReaderKey(), \n                                            item.getFieldName());\n\n      final Integer valId = Integer.valueOf(System.identityHashCode(val));\n\n      // indirect mapping, so the MapOfSet will dedup identical valIds for us\n      valIdToItems.put(valId, item);\n      if (1 < readerFieldToValIds.put(rf, valId)) {\n        valMismatchKeys.add(rf);\n      }\n    }\n\n    final List<Insanity> insanity = new ArrayList<>(valMismatchKeys.size() * 3);\n\n    insanity.addAll(checkValueMismatch(valIdToItems, \n                                       readerFieldToValIds, \n                                       valMismatchKeys));\n    insanity.addAll(checkSubreaders(valIdToItems, \n                                    readerFieldToValIds));\n                    \n    return insanity.toArray(new Insanity[insanity.size()]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"89d414c6c8de88bce9988e1445ffded7c10121bc","date":1481575617,"type":3,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/uninverting/FieldCacheSanityChecker#check(CacheEntry...).mjava","pathOld":"solr/core/src/java/org/apache/solr/uninverting/FieldCacheSanityChecker#check(CacheEntry...).mjava","sourceNew":"  /**\n   * Tests a CacheEntry[] for indication of \"insane\" cache usage.\n   * <p>\n   * <B>NOTE:</b>FieldCache CreationPlaceholder objects are ignored.\n   * (:TODO: is this a bad idea? are we masking a real problem?)\n   * </p>\n   */\n  public Insanity[] check(CacheEntry... cacheEntries) {\n    if (null == cacheEntries || 0 == cacheEntries.length) \n      return new Insanity[0];\n\n    // the indirect mapping lets MapOfSet dedup identical valIds for us\n    //\n    // maps the (valId) identityhashCode of cache values to \n    // sets of CacheEntry instances\n    final MapOfSets<Integer, CacheEntry> valIdToItems = new MapOfSets<>(new HashMap<Integer, Set<CacheEntry>>(17));\n    // maps ReaderField keys to Sets of ValueIds\n    final MapOfSets<ReaderField, Integer> readerFieldToValIds = new MapOfSets<>(new HashMap<ReaderField, Set<Integer>>(17));\n    //\n\n    // any keys that we know result in more then one valId\n    final Set<ReaderField> valMismatchKeys = new HashSet<>();\n\n    // iterate over all the cacheEntries to get the mappings we'll need\n    for (int i = 0; i < cacheEntries.length; i++) {\n      final CacheEntry item = cacheEntries[i];\n      final Accountable val = item.getValue();\n\n      // It's OK to have dup entries, where one is eg\n      // float[] and the other is the Bits (from\n      // getDocWithField())\n      if (val instanceof FieldCacheImpl.BitsEntry) {\n        continue;\n      }\n\n      if (val instanceof FieldCache.CreationPlaceholder)\n        continue;\n\n      final ReaderField rf = new ReaderField(item.getReaderKey(), \n                                            item.getFieldName());\n\n      final Integer valId = Integer.valueOf(System.identityHashCode(val));\n\n      // indirect mapping, so the MapOfSet will dedup identical valIds for us\n      valIdToItems.put(valId, item);\n      if (1 < readerFieldToValIds.put(rf, valId)) {\n        valMismatchKeys.add(rf);\n      }\n    }\n\n    final List<Insanity> insanity = new ArrayList<>(valMismatchKeys.size() * 3);\n\n    insanity.addAll(checkValueMismatch(valIdToItems, \n                                       readerFieldToValIds, \n                                       valMismatchKeys));\n    insanity.addAll(checkSubreaders(valIdToItems, \n                                    readerFieldToValIds));\n                    \n    return insanity.toArray(new Insanity[insanity.size()]);\n  }\n\n","sourceOld":"  /**\n   * Tests a CacheEntry[] for indication of \"insane\" cache usage.\n   * <p>\n   * <B>NOTE:</b>FieldCache CreationPlaceholder objects are ignored.\n   * (:TODO: is this a bad idea? are we masking a real problem?)\n   * </p>\n   */\n  public Insanity[] check(CacheEntry... cacheEntries) {\n    if (null == cacheEntries || 0 == cacheEntries.length) \n      return new Insanity[0];\n\n    // the indirect mapping lets MapOfSet dedup identical valIds for us\n    //\n    // maps the (valId) identityhashCode of cache values to \n    // sets of CacheEntry instances\n    final MapOfSets<Integer, CacheEntry> valIdToItems = new MapOfSets<>(new HashMap<Integer, Set<CacheEntry>>(17));\n    // maps ReaderField keys to Sets of ValueIds\n    final MapOfSets<ReaderField, Integer> readerFieldToValIds = new MapOfSets<>(new HashMap<ReaderField, Set<Integer>>(17));\n    //\n\n    // any keys that we know result in more then one valId\n    final Set<ReaderField> valMismatchKeys = new HashSet<>();\n\n    // iterate over all the cacheEntries to get the mappings we'll need\n    for (int i = 0; i < cacheEntries.length; i++) {\n      final CacheEntry item = cacheEntries[i];\n      final Object val = item.getValue();\n\n      // It's OK to have dup entries, where one is eg\n      // float[] and the other is the Bits (from\n      // getDocWithField())\n      if (val instanceof FieldCacheImpl.BitsEntry) {\n        continue;\n      }\n\n      if (val instanceof FieldCache.CreationPlaceholder)\n        continue;\n\n      final ReaderField rf = new ReaderField(item.getReaderKey(), \n                                            item.getFieldName());\n\n      final Integer valId = Integer.valueOf(System.identityHashCode(val));\n\n      // indirect mapping, so the MapOfSet will dedup identical valIds for us\n      valIdToItems.put(valId, item);\n      if (1 < readerFieldToValIds.put(rf, valId)) {\n        valMismatchKeys.add(rf);\n      }\n    }\n\n    final List<Insanity> insanity = new ArrayList<>(valMismatchKeys.size() * 3);\n\n    insanity.addAll(checkValueMismatch(valIdToItems, \n                                       readerFieldToValIds, \n                                       valMismatchKeys));\n    insanity.addAll(checkSubreaders(valIdToItems, \n                                    readerFieldToValIds));\n                    \n    return insanity.toArray(new Insanity[insanity.size()]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9856095f7afb5a607bf5e65077615ed91273508c","date":1481837697,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/uninverting/FieldCacheSanityChecker#check(CacheEntry...).mjava","pathOld":"solr/core/src/java/org/apache/solr/uninverting/FieldCacheSanityChecker#check(CacheEntry...).mjava","sourceNew":"  /**\n   * Tests a CacheEntry[] for indication of \"insane\" cache usage.\n   * <p>\n   * <B>NOTE:</b>FieldCache CreationPlaceholder objects are ignored.\n   * (:TODO: is this a bad idea? are we masking a real problem?)\n   * </p>\n   */\n  public Insanity[] check(CacheEntry... cacheEntries) {\n    if (null == cacheEntries || 0 == cacheEntries.length) \n      return new Insanity[0];\n\n    // the indirect mapping lets MapOfSet dedup identical valIds for us\n    //\n    // maps the (valId) identityhashCode of cache values to \n    // sets of CacheEntry instances\n    final MapOfSets<Integer, CacheEntry> valIdToItems = new MapOfSets<>(new HashMap<Integer, Set<CacheEntry>>(17));\n    // maps ReaderField keys to Sets of ValueIds\n    final MapOfSets<ReaderField, Integer> readerFieldToValIds = new MapOfSets<>(new HashMap<ReaderField, Set<Integer>>(17));\n    //\n\n    // any keys that we know result in more then one valId\n    final Set<ReaderField> valMismatchKeys = new HashSet<>();\n\n    // iterate over all the cacheEntries to get the mappings we'll need\n    for (int i = 0; i < cacheEntries.length; i++) {\n      final CacheEntry item = cacheEntries[i];\n      final Accountable val = item.getValue();\n\n      // It's OK to have dup entries, where one is eg\n      // float[] and the other is the Bits (from\n      // getDocWithField())\n      if (val instanceof FieldCacheImpl.BitsEntry) {\n        continue;\n      }\n\n      if (val instanceof FieldCache.CreationPlaceholder)\n        continue;\n\n      final ReaderField rf = new ReaderField(item.getReaderKey(), \n                                            item.getFieldName());\n\n      final Integer valId = Integer.valueOf(System.identityHashCode(val));\n\n      // indirect mapping, so the MapOfSet will dedup identical valIds for us\n      valIdToItems.put(valId, item);\n      if (1 < readerFieldToValIds.put(rf, valId)) {\n        valMismatchKeys.add(rf);\n      }\n    }\n\n    final List<Insanity> insanity = new ArrayList<>(valMismatchKeys.size() * 3);\n\n    insanity.addAll(checkValueMismatch(valIdToItems, \n                                       readerFieldToValIds, \n                                       valMismatchKeys));\n    insanity.addAll(checkSubreaders(valIdToItems, \n                                    readerFieldToValIds));\n                    \n    return insanity.toArray(new Insanity[insanity.size()]);\n  }\n\n","sourceOld":"  /**\n   * Tests a CacheEntry[] for indication of \"insane\" cache usage.\n   * <p>\n   * <B>NOTE:</b>FieldCache CreationPlaceholder objects are ignored.\n   * (:TODO: is this a bad idea? are we masking a real problem?)\n   * </p>\n   */\n  public Insanity[] check(CacheEntry... cacheEntries) {\n    if (null == cacheEntries || 0 == cacheEntries.length) \n      return new Insanity[0];\n\n    // the indirect mapping lets MapOfSet dedup identical valIds for us\n    //\n    // maps the (valId) identityhashCode of cache values to \n    // sets of CacheEntry instances\n    final MapOfSets<Integer, CacheEntry> valIdToItems = new MapOfSets<>(new HashMap<Integer, Set<CacheEntry>>(17));\n    // maps ReaderField keys to Sets of ValueIds\n    final MapOfSets<ReaderField, Integer> readerFieldToValIds = new MapOfSets<>(new HashMap<ReaderField, Set<Integer>>(17));\n    //\n\n    // any keys that we know result in more then one valId\n    final Set<ReaderField> valMismatchKeys = new HashSet<>();\n\n    // iterate over all the cacheEntries to get the mappings we'll need\n    for (int i = 0; i < cacheEntries.length; i++) {\n      final CacheEntry item = cacheEntries[i];\n      final Object val = item.getValue();\n\n      // It's OK to have dup entries, where one is eg\n      // float[] and the other is the Bits (from\n      // getDocWithField())\n      if (val instanceof FieldCacheImpl.BitsEntry) {\n        continue;\n      }\n\n      if (val instanceof FieldCache.CreationPlaceholder)\n        continue;\n\n      final ReaderField rf = new ReaderField(item.getReaderKey(), \n                                            item.getFieldName());\n\n      final Integer valId = Integer.valueOf(System.identityHashCode(val));\n\n      // indirect mapping, so the MapOfSet will dedup identical valIds for us\n      valIdToItems.put(valId, item);\n      if (1 < readerFieldToValIds.put(rf, valId)) {\n        valMismatchKeys.add(rf);\n      }\n    }\n\n    final List<Insanity> insanity = new ArrayList<>(valMismatchKeys.size() * 3);\n\n    insanity.addAll(checkValueMismatch(valIdToItems, \n                                       readerFieldToValIds, \n                                       valMismatchKeys));\n    insanity.addAll(checkSubreaders(valIdToItems, \n                                    readerFieldToValIds));\n                    \n    return insanity.toArray(new Insanity[insanity.size()]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d211216c83f01894810543d1c107160a9ae3650b","date":1488289605,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/uninverting/FieldCacheSanityChecker#check(CacheEntry...).mjava","sourceNew":null,"sourceOld":"  /**\n   * Tests a CacheEntry[] for indication of \"insane\" cache usage.\n   * <p>\n   * <B>NOTE:</b>FieldCache CreationPlaceholder objects are ignored.\n   * (:TODO: is this a bad idea? are we masking a real problem?)\n   * </p>\n   */\n  public Insanity[] check(CacheEntry... cacheEntries) {\n    if (null == cacheEntries || 0 == cacheEntries.length) \n      return new Insanity[0];\n\n    // the indirect mapping lets MapOfSet dedup identical valIds for us\n    //\n    // maps the (valId) identityhashCode of cache values to \n    // sets of CacheEntry instances\n    final MapOfSets<Integer, CacheEntry> valIdToItems = new MapOfSets<>(new HashMap<Integer, Set<CacheEntry>>(17));\n    // maps ReaderField keys to Sets of ValueIds\n    final MapOfSets<ReaderField, Integer> readerFieldToValIds = new MapOfSets<>(new HashMap<ReaderField, Set<Integer>>(17));\n    //\n\n    // any keys that we know result in more then one valId\n    final Set<ReaderField> valMismatchKeys = new HashSet<>();\n\n    // iterate over all the cacheEntries to get the mappings we'll need\n    for (int i = 0; i < cacheEntries.length; i++) {\n      final CacheEntry item = cacheEntries[i];\n      final Accountable val = item.getValue();\n\n      // It's OK to have dup entries, where one is eg\n      // float[] and the other is the Bits (from\n      // getDocWithField())\n      if (val instanceof FieldCacheImpl.BitsEntry) {\n        continue;\n      }\n\n      if (val instanceof FieldCache.CreationPlaceholder)\n        continue;\n\n      final ReaderField rf = new ReaderField(item.getReaderKey(), \n                                            item.getFieldName());\n\n      final Integer valId = Integer.valueOf(System.identityHashCode(val));\n\n      // indirect mapping, so the MapOfSet will dedup identical valIds for us\n      valIdToItems.put(valId, item);\n      if (1 < readerFieldToValIds.put(rf, valId)) {\n        valMismatchKeys.add(rf);\n      }\n    }\n\n    final List<Insanity> insanity = new ArrayList<>(valMismatchKeys.size() * 3);\n\n    insanity.addAll(checkValueMismatch(valIdToItems, \n                                       readerFieldToValIds, \n                                       valMismatchKeys));\n    insanity.addAll(checkSubreaders(valIdToItems, \n                                    readerFieldToValIds));\n                    \n    return insanity.toArray(new Insanity[insanity.size()]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a076c3c721f685b7559308fdc2cd72d91bba67e5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0e121d43b5a10f2df530f406f935102656e9c4e8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a076c3c721f685b7559308fdc2cd72d91bba67e5"],"d211216c83f01894810543d1c107160a9ae3650b":["89d414c6c8de88bce9988e1445ffded7c10121bc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9856095f7afb5a607bf5e65077615ed91273508c":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","89d414c6c8de88bce9988e1445ffded7c10121bc"],"83870855d82aba6819217abeff5a40779dbb28b4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0e121d43b5a10f2df530f406f935102656e9c4e8"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0e121d43b5a10f2df530f406f935102656e9c4e8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d211216c83f01894810543d1c107160a9ae3650b"],"89d414c6c8de88bce9988e1445ffded7c10121bc":["0e121d43b5a10f2df530f406f935102656e9c4e8"]},"commit2Childs":{"a076c3c721f685b7559308fdc2cd72d91bba67e5":["0e121d43b5a10f2df530f406f935102656e9c4e8"],"0e121d43b5a10f2df530f406f935102656e9c4e8":["83870855d82aba6819217abeff5a40779dbb28b4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","89d414c6c8de88bce9988e1445ffded7c10121bc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a076c3c721f685b7559308fdc2cd72d91bba67e5","0e121d43b5a10f2df530f406f935102656e9c4e8","83870855d82aba6819217abeff5a40779dbb28b4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"d211216c83f01894810543d1c107160a9ae3650b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9856095f7afb5a607bf5e65077615ed91273508c":[],"83870855d82aba6819217abeff5a40779dbb28b4":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["9856095f7afb5a607bf5e65077615ed91273508c"],"89d414c6c8de88bce9988e1445ffded7c10121bc":["d211216c83f01894810543d1c107160a9ae3650b","9856095f7afb5a607bf5e65077615ed91273508c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9856095f7afb5a607bf5e65077615ed91273508c","83870855d82aba6819217abeff5a40779dbb28b4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}