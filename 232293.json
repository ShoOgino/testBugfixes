{"path":"solr/core/src/test/org/apache/solr/CursorPagingTest#assertFullWalkNoDups(int,SolrParams).mjava","commits":[{"id":"d5bc8e25f59990525f5beb14afe9c96240dcf4a2","date":1389042945,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/CursorPagingTest#assertFullWalkNoDups(int,SolrParams).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Given a set of params, executes a cursor query using {@link #CURSOR_MARK_START}\n   * and then continuously walks the results using {@link #CURSOR_MARK_START} as long\n   * as a non-0 number of docs ar returned.  This method records the the set of all id's\n   * (must be postive ints) encountered and throws an assertion failure if any id is \n   * encountered more then once, or if the set grows above maxSize\n   */\n  public SentinelIntSet assertFullWalkNoDups(int maxSize, SolrParams params) \n    throws Exception {\n\n    SentinelIntSet ids = new SentinelIntSet(maxSize, -1);\n    String cursorMark = CURSOR_MARK_START;\n    int docsOnThisPage = Integer.MAX_VALUE;\n    while (0 < docsOnThisPage) {\n      String json = assertJQ(req(params, \n                                 CURSOR_MARK_PARAM, cursorMark));\n      Map rsp = (Map) ObjectBuilder.fromJSON(json);\n      assertTrue(\"response doesn't contain \" + CURSOR_MARK_NEXT + \": \" + json,\n                 rsp.containsKey(CURSOR_MARK_NEXT));\n      String nextCursorMark = (String)rsp.get(CURSOR_MARK_NEXT);\n      assertNotNull(CURSOR_MARK_NEXT + \" is null\", nextCursorMark);\n      List<Map<Object,Object>> docs = (List) (((Map)rsp.get(\"response\")).get(\"docs\"));\n      docsOnThisPage = docs.size();\n      if (null != params.getInt(CommonParams.ROWS)) {\n        int rows = params.getInt(CommonParams.ROWS);\n        assertTrue(\"Too many docs on this page: \" + rows + \" < \" + docsOnThisPage,\n                   docsOnThisPage <= rows);\n      }\n      if (0 == docsOnThisPage) {\n        assertEquals(\"no more docs, but \"+CURSOR_MARK_NEXT+\" isn't same\",\n                     cursorMark, nextCursorMark);\n      }\n      for (Map<Object,Object> doc : docs) {\n        int id = ((Long)doc.get(\"id\")).intValue();\n        assertFalse(\"walk already seen: \" + id, ids.exists(id));\n        ids.put(id);\n        assertFalse(\"id set bigger then max allowed (\"+maxSize+\"): \" + ids.size(),\n                    maxSize < ids.size());\n      }\n      cursorMark = nextCursorMark;\n    }\n    return ids;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["1e210ae1e604402eb4eeff2a52e56d189cd4f2f1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"851e2bd9deeca46bef2e8c5328c9448e4198a688","date":1389637622,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/CursorPagingTest#assertFullWalkNoDups(int,SolrParams).mjava","pathOld":"solr/core/src/test/org/apache/solr/CursorPagingTest#assertFullWalkNoDups(int,SolrParams).mjava","sourceNew":"  /**\n   * Given a set of params, executes a cursor query using {@link #CURSOR_MARK_START}\n   * and then continuously walks the results using {@link #CURSOR_MARK_START} as long\n   * as a non-0 number of docs ar returned.  This method records the the set of all id's\n   * (must be positive ints) encountered and throws an assertion failure if any id is\n   * encountered more than once, or if the set grows above maxSize\n   */\n  public SentinelIntSet assertFullWalkNoDups(int maxSize, SolrParams params) \n    throws Exception {\n\n    SentinelIntSet ids = new SentinelIntSet(maxSize, -1);\n    String cursorMark = CURSOR_MARK_START;\n    int docsOnThisPage = Integer.MAX_VALUE;\n    while (0 < docsOnThisPage) {\n      String json = assertJQ(req(params, \n                                 CURSOR_MARK_PARAM, cursorMark));\n      Map rsp = (Map) ObjectBuilder.fromJSON(json);\n      assertTrue(\"response doesn't contain \" + CURSOR_MARK_NEXT + \": \" + json,\n                 rsp.containsKey(CURSOR_MARK_NEXT));\n      String nextCursorMark = (String)rsp.get(CURSOR_MARK_NEXT);\n      assertNotNull(CURSOR_MARK_NEXT + \" is null\", nextCursorMark);\n      List<Map<Object,Object>> docs = (List) (((Map)rsp.get(\"response\")).get(\"docs\"));\n      docsOnThisPage = docs.size();\n      if (null != params.getInt(CommonParams.ROWS)) {\n        int rows = params.getInt(CommonParams.ROWS);\n        assertTrue(\"Too many docs on this page: \" + rows + \" < \" + docsOnThisPage,\n                   docsOnThisPage <= rows);\n      }\n      if (0 == docsOnThisPage) {\n        assertEquals(\"no more docs, but \"+CURSOR_MARK_NEXT+\" isn't same\",\n                     cursorMark, nextCursorMark);\n      }\n      for (Map<Object,Object> doc : docs) {\n        int id = ((Long)doc.get(\"id\")).intValue();\n        assertFalse(\"walk already seen: \" + id, ids.exists(id));\n        ids.put(id);\n        assertFalse(\"id set bigger then max allowed (\"+maxSize+\"): \" + ids.size(),\n                    maxSize < ids.size());\n      }\n      cursorMark = nextCursorMark;\n    }\n    return ids;\n  }\n\n","sourceOld":"  /**\n   * Given a set of params, executes a cursor query using {@link #CURSOR_MARK_START}\n   * and then continuously walks the results using {@link #CURSOR_MARK_START} as long\n   * as a non-0 number of docs ar returned.  This method records the the set of all id's\n   * (must be postive ints) encountered and throws an assertion failure if any id is \n   * encountered more then once, or if the set grows above maxSize\n   */\n  public SentinelIntSet assertFullWalkNoDups(int maxSize, SolrParams params) \n    throws Exception {\n\n    SentinelIntSet ids = new SentinelIntSet(maxSize, -1);\n    String cursorMark = CURSOR_MARK_START;\n    int docsOnThisPage = Integer.MAX_VALUE;\n    while (0 < docsOnThisPage) {\n      String json = assertJQ(req(params, \n                                 CURSOR_MARK_PARAM, cursorMark));\n      Map rsp = (Map) ObjectBuilder.fromJSON(json);\n      assertTrue(\"response doesn't contain \" + CURSOR_MARK_NEXT + \": \" + json,\n                 rsp.containsKey(CURSOR_MARK_NEXT));\n      String nextCursorMark = (String)rsp.get(CURSOR_MARK_NEXT);\n      assertNotNull(CURSOR_MARK_NEXT + \" is null\", nextCursorMark);\n      List<Map<Object,Object>> docs = (List) (((Map)rsp.get(\"response\")).get(\"docs\"));\n      docsOnThisPage = docs.size();\n      if (null != params.getInt(CommonParams.ROWS)) {\n        int rows = params.getInt(CommonParams.ROWS);\n        assertTrue(\"Too many docs on this page: \" + rows + \" < \" + docsOnThisPage,\n                   docsOnThisPage <= rows);\n      }\n      if (0 == docsOnThisPage) {\n        assertEquals(\"no more docs, but \"+CURSOR_MARK_NEXT+\" isn't same\",\n                     cursorMark, nextCursorMark);\n      }\n      for (Map<Object,Object> doc : docs) {\n        int id = ((Long)doc.get(\"id\")).intValue();\n        assertFalse(\"walk already seen: \" + id, ids.exists(id));\n        ids.put(id);\n        assertFalse(\"id set bigger then max allowed (\"+maxSize+\"): \" + ids.size(),\n                    maxSize < ids.size());\n      }\n      cursorMark = nextCursorMark;\n    }\n    return ids;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cd3693b696a64d987bf4b3a14399d2105f16b05e","date":1396054865,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/CursorPagingTest#assertFullWalkNoDups(int,SolrParams).mjava","pathOld":"solr/core/src/test/org/apache/solr/CursorPagingTest#assertFullWalkNoDups(int,SolrParams).mjava","sourceNew":"  /**\n   * Given a set of params, executes a cursor query using {@link #CURSOR_MARK_START}\n   * and then continuously walks the results using {@link #CURSOR_MARK_START} as long\n   * as a non-0 number of docs ar returned.  This method records the the set of all id's\n   * (must be positive ints) encountered and throws an assertion failure if any id is\n   * encountered more than once, or if the set grows above maxSize\n   */\n  public SentinelIntSet assertFullWalkNoDups(int maxSize, SolrParams params) \n    throws Exception {\n\n    SentinelIntSet ids = new SentinelIntSet(maxSize, -1);\n    String cursorMark = CURSOR_MARK_START;\n    int docsOnThisPage = Integer.MAX_VALUE;\n    while (0 < docsOnThisPage) {\n      String json = assertJQ(req(params,\n                                 CURSOR_MARK_PARAM, cursorMark));\n      Map rsp = (Map) ObjectBuilder.fromJSON(json);\n      assertTrue(\"response doesn't contain \" + CURSOR_MARK_NEXT + \": \" + json,\n                 rsp.containsKey(CURSOR_MARK_NEXT));\n      String nextCursorMark = (String)rsp.get(CURSOR_MARK_NEXT);\n      assertNotNull(CURSOR_MARK_NEXT + \" is null\", nextCursorMark);\n      List<Map<Object,Object>> docs = (List) (((Map)rsp.get(\"response\")).get(\"docs\"));\n      docsOnThisPage = docs.size();\n      if (null != params.getInt(CommonParams.ROWS)) {\n        int rows = params.getInt(CommonParams.ROWS);\n        assertTrue(\"Too many docs on this page: \" + rows + \" < \" + docsOnThisPage,\n                   docsOnThisPage <= rows);\n      }\n      if (0 == docsOnThisPage) {\n        assertEquals(\"no more docs, but \"+CURSOR_MARK_NEXT+\" isn't same\",\n                     cursorMark, nextCursorMark);\n      }\n      for (Map<Object,Object> doc : docs) {\n        int id = ((Long)doc.get(\"id\")).intValue();\n        assertFalse(\"walk already seen: \" + id, ids.exists(id));\n        ids.put(id);\n        assertFalse(\"id set bigger then max allowed (\"+maxSize+\"): \" + ids.size(),\n                    maxSize < ids.size());\n      }\n      cursorMark = nextCursorMark;\n    }\n    return ids;\n  }\n\n","sourceOld":"  /**\n   * Given a set of params, executes a cursor query using {@link #CURSOR_MARK_START}\n   * and then continuously walks the results using {@link #CURSOR_MARK_START} as long\n   * as a non-0 number of docs ar returned.  This method records the the set of all id's\n   * (must be positive ints) encountered and throws an assertion failure if any id is\n   * encountered more than once, or if the set grows above maxSize\n   */\n  public SentinelIntSet assertFullWalkNoDups(int maxSize, SolrParams params) \n    throws Exception {\n\n    SentinelIntSet ids = new SentinelIntSet(maxSize, -1);\n    String cursorMark = CURSOR_MARK_START;\n    int docsOnThisPage = Integer.MAX_VALUE;\n    while (0 < docsOnThisPage) {\n      String json = assertJQ(req(params, \n                                 CURSOR_MARK_PARAM, cursorMark));\n      Map rsp = (Map) ObjectBuilder.fromJSON(json);\n      assertTrue(\"response doesn't contain \" + CURSOR_MARK_NEXT + \": \" + json,\n                 rsp.containsKey(CURSOR_MARK_NEXT));\n      String nextCursorMark = (String)rsp.get(CURSOR_MARK_NEXT);\n      assertNotNull(CURSOR_MARK_NEXT + \" is null\", nextCursorMark);\n      List<Map<Object,Object>> docs = (List) (((Map)rsp.get(\"response\")).get(\"docs\"));\n      docsOnThisPage = docs.size();\n      if (null != params.getInt(CommonParams.ROWS)) {\n        int rows = params.getInt(CommonParams.ROWS);\n        assertTrue(\"Too many docs on this page: \" + rows + \" < \" + docsOnThisPage,\n                   docsOnThisPage <= rows);\n      }\n      if (0 == docsOnThisPage) {\n        assertEquals(\"no more docs, but \"+CURSOR_MARK_NEXT+\" isn't same\",\n                     cursorMark, nextCursorMark);\n      }\n      for (Map<Object,Object> doc : docs) {\n        int id = ((Long)doc.get(\"id\")).intValue();\n        assertFalse(\"walk already seen: \" + id, ids.exists(id));\n        ids.put(id);\n        assertFalse(\"id set bigger then max allowed (\"+maxSize+\"): \" + ids.size(),\n                    maxSize < ids.size());\n      }\n      cursorMark = nextCursorMark;\n    }\n    return ids;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/CursorPagingTest#assertFullWalkNoDups(int,SolrParams).mjava","pathOld":"solr/core/src/test/org/apache/solr/CursorPagingTest#assertFullWalkNoDups(int,SolrParams).mjava","sourceNew":"  /**\n   * Given a set of params, executes a cursor query using {@link #CURSOR_MARK_START}\n   * and then continuously walks the results using {@link #CURSOR_MARK_START} as long\n   * as a non-0 number of docs ar returned.  This method records the the set of all id's\n   * (must be positive ints) encountered and throws an assertion failure if any id is\n   * encountered more than once, or if the set grows above maxSize\n   */\n  public SentinelIntSet assertFullWalkNoDups(int maxSize, SolrParams params) \n    throws Exception {\n\n    SentinelIntSet ids = new SentinelIntSet(maxSize, -1);\n    String cursorMark = CURSOR_MARK_START;\n    int docsOnThisPage = Integer.MAX_VALUE;\n    while (0 < docsOnThisPage) {\n      String json = assertJQ(req(params,\n                                 CURSOR_MARK_PARAM, cursorMark));\n      Map rsp = (Map) ObjectBuilder.fromJSON(json);\n      assertTrue(\"response doesn't contain \" + CURSOR_MARK_NEXT + \": \" + json,\n                 rsp.containsKey(CURSOR_MARK_NEXT));\n      String nextCursorMark = (String)rsp.get(CURSOR_MARK_NEXT);\n      assertNotNull(CURSOR_MARK_NEXT + \" is null\", nextCursorMark);\n      List<Map<Object,Object>> docs = (List) (((Map)rsp.get(\"response\")).get(\"docs\"));\n      docsOnThisPage = docs.size();\n      if (null != params.getInt(CommonParams.ROWS)) {\n        int rows = params.getInt(CommonParams.ROWS);\n        assertTrue(\"Too many docs on this page: \" + rows + \" < \" + docsOnThisPage,\n                   docsOnThisPage <= rows);\n      }\n      if (0 == docsOnThisPage) {\n        assertEquals(\"no more docs, but \"+CURSOR_MARK_NEXT+\" isn't same\",\n                     cursorMark, nextCursorMark);\n      }\n      for (Map<Object,Object> doc : docs) {\n        int id = ((Long)doc.get(\"id\")).intValue();\n        assertFalse(\"walk already seen: \" + id, ids.exists(id));\n        ids.put(id);\n        assertFalse(\"id set bigger then max allowed (\"+maxSize+\"): \" + ids.size(),\n                    maxSize < ids.size());\n      }\n      cursorMark = nextCursorMark;\n    }\n    return ids;\n  }\n\n","sourceOld":"  /**\n   * Given a set of params, executes a cursor query using {@link #CURSOR_MARK_START}\n   * and then continuously walks the results using {@link #CURSOR_MARK_START} as long\n   * as a non-0 number of docs ar returned.  This method records the the set of all id's\n   * (must be positive ints) encountered and throws an assertion failure if any id is\n   * encountered more than once, or if the set grows above maxSize\n   */\n  public SentinelIntSet assertFullWalkNoDups(int maxSize, SolrParams params) \n    throws Exception {\n\n    SentinelIntSet ids = new SentinelIntSet(maxSize, -1);\n    String cursorMark = CURSOR_MARK_START;\n    int docsOnThisPage = Integer.MAX_VALUE;\n    while (0 < docsOnThisPage) {\n      String json = assertJQ(req(params, \n                                 CURSOR_MARK_PARAM, cursorMark));\n      Map rsp = (Map) ObjectBuilder.fromJSON(json);\n      assertTrue(\"response doesn't contain \" + CURSOR_MARK_NEXT + \": \" + json,\n                 rsp.containsKey(CURSOR_MARK_NEXT));\n      String nextCursorMark = (String)rsp.get(CURSOR_MARK_NEXT);\n      assertNotNull(CURSOR_MARK_NEXT + \" is null\", nextCursorMark);\n      List<Map<Object,Object>> docs = (List) (((Map)rsp.get(\"response\")).get(\"docs\"));\n      docsOnThisPage = docs.size();\n      if (null != params.getInt(CommonParams.ROWS)) {\n        int rows = params.getInt(CommonParams.ROWS);\n        assertTrue(\"Too many docs on this page: \" + rows + \" < \" + docsOnThisPage,\n                   docsOnThisPage <= rows);\n      }\n      if (0 == docsOnThisPage) {\n        assertEquals(\"no more docs, but \"+CURSOR_MARK_NEXT+\" isn't same\",\n                     cursorMark, nextCursorMark);\n      }\n      for (Map<Object,Object> doc : docs) {\n        int id = ((Long)doc.get(\"id\")).intValue();\n        assertFalse(\"walk already seen: \" + id, ids.exists(id));\n        ids.put(id);\n        assertFalse(\"id set bigger then max allowed (\"+maxSize+\"): \" + ids.size(),\n                    maxSize < ids.size());\n      }\n      cursorMark = nextCursorMark;\n    }\n    return ids;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e210ae1e604402eb4eeff2a52e56d189cd4f2f1","date":1423508552,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/CursorPagingTest#assertFullWalkNoDups(int,SolrParams).mjava","pathOld":"solr/core/src/test/org/apache/solr/CursorPagingTest#assertFullWalkNoDups(int,SolrParams).mjava","sourceNew":"  /**\n   * Given a set of params, executes a cursor query using {@link CursorMarkParams#CURSOR_MARK_START}\n   * and then continuously walks the results using {@link CursorMarkParams#CURSOR_MARK_START} as long\n   * as a non-0 number of docs ar returned.  This method records the the set of all id's\n   * (must be positive ints) encountered and throws an assertion failure if any id is\n   * encountered more than once, or if the set grows above maxSize\n   */\n  public SentinelIntSet assertFullWalkNoDups(int maxSize, SolrParams params) \n    throws Exception {\n\n    SentinelIntSet ids = new SentinelIntSet(maxSize, -1);\n    String cursorMark = CURSOR_MARK_START;\n    int docsOnThisPage = Integer.MAX_VALUE;\n    while (0 < docsOnThisPage) {\n      String json = assertJQ(req(params,\n                                 CURSOR_MARK_PARAM, cursorMark));\n      Map rsp = (Map) ObjectBuilder.fromJSON(json);\n      assertTrue(\"response doesn't contain \" + CURSOR_MARK_NEXT + \": \" + json,\n                 rsp.containsKey(CURSOR_MARK_NEXT));\n      String nextCursorMark = (String)rsp.get(CURSOR_MARK_NEXT);\n      assertNotNull(CURSOR_MARK_NEXT + \" is null\", nextCursorMark);\n      List<Map<Object,Object>> docs = (List) (((Map)rsp.get(\"response\")).get(\"docs\"));\n      docsOnThisPage = docs.size();\n      if (null != params.getInt(CommonParams.ROWS)) {\n        int rows = params.getInt(CommonParams.ROWS);\n        assertTrue(\"Too many docs on this page: \" + rows + \" < \" + docsOnThisPage,\n                   docsOnThisPage <= rows);\n      }\n      if (0 == docsOnThisPage) {\n        assertEquals(\"no more docs, but \"+CURSOR_MARK_NEXT+\" isn't same\",\n                     cursorMark, nextCursorMark);\n      }\n      for (Map<Object,Object> doc : docs) {\n        int id = ((Long)doc.get(\"id\")).intValue();\n        assertFalse(\"walk already seen: \" + id, ids.exists(id));\n        ids.put(id);\n        assertFalse(\"id set bigger then max allowed (\"+maxSize+\"): \" + ids.size(),\n                    maxSize < ids.size());\n      }\n      cursorMark = nextCursorMark;\n    }\n    return ids;\n  }\n\n","sourceOld":"  /**\n   * Given a set of params, executes a cursor query using {@link #CURSOR_MARK_START}\n   * and then continuously walks the results using {@link #CURSOR_MARK_START} as long\n   * as a non-0 number of docs ar returned.  This method records the the set of all id's\n   * (must be positive ints) encountered and throws an assertion failure if any id is\n   * encountered more than once, or if the set grows above maxSize\n   */\n  public SentinelIntSet assertFullWalkNoDups(int maxSize, SolrParams params) \n    throws Exception {\n\n    SentinelIntSet ids = new SentinelIntSet(maxSize, -1);\n    String cursorMark = CURSOR_MARK_START;\n    int docsOnThisPage = Integer.MAX_VALUE;\n    while (0 < docsOnThisPage) {\n      String json = assertJQ(req(params,\n                                 CURSOR_MARK_PARAM, cursorMark));\n      Map rsp = (Map) ObjectBuilder.fromJSON(json);\n      assertTrue(\"response doesn't contain \" + CURSOR_MARK_NEXT + \": \" + json,\n                 rsp.containsKey(CURSOR_MARK_NEXT));\n      String nextCursorMark = (String)rsp.get(CURSOR_MARK_NEXT);\n      assertNotNull(CURSOR_MARK_NEXT + \" is null\", nextCursorMark);\n      List<Map<Object,Object>> docs = (List) (((Map)rsp.get(\"response\")).get(\"docs\"));\n      docsOnThisPage = docs.size();\n      if (null != params.getInt(CommonParams.ROWS)) {\n        int rows = params.getInt(CommonParams.ROWS);\n        assertTrue(\"Too many docs on this page: \" + rows + \" < \" + docsOnThisPage,\n                   docsOnThisPage <= rows);\n      }\n      if (0 == docsOnThisPage) {\n        assertEquals(\"no more docs, but \"+CURSOR_MARK_NEXT+\" isn't same\",\n                     cursorMark, nextCursorMark);\n      }\n      for (Map<Object,Object> doc : docs) {\n        int id = ((Long)doc.get(\"id\")).intValue();\n        assertFalse(\"walk already seen: \" + id, ids.exists(id));\n        ids.put(id);\n        assertFalse(\"id set bigger then max allowed (\"+maxSize+\"): \" + ids.size(),\n                    maxSize < ids.size());\n      }\n      cursorMark = nextCursorMark;\n    }\n    return ids;\n  }\n\n","bugFix":["d5bc8e25f59990525f5beb14afe9c96240dcf4a2"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a71f63026529f3c1f03cfdd664910873ab2369ae","date":1497543264,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/CursorPagingTest#assertFullWalkNoDups(int,SolrParams).mjava","pathOld":"solr/core/src/test/org/apache/solr/CursorPagingTest#assertFullWalkNoDups(int,SolrParams).mjava","sourceNew":"  /**\n   * Given a set of params, executes a cursor query using {@link CursorMarkParams#CURSOR_MARK_START}\n   * and then continuously walks the results using {@link CursorMarkParams#CURSOR_MARK_START} as long\n   * as a non-0 number of docs ar returned.  This method records the the set of all id's\n   * (must be positive ints) encountered and throws an assertion failure if any id is\n   * encountered more than once, or if the set grows above maxSize\n   */\n  public SentinelIntSet assertFullWalkNoDups(int maxSize, SolrParams params) \n    throws Exception {\n\n    SentinelIntSet ids = new SentinelIntSet(maxSize, -1);\n    String cursorMark = CURSOR_MARK_START;\n    int docsOnThisPage = Integer.MAX_VALUE;\n    while (0 < docsOnThisPage) {\n      String json = assertJQ(req(params,\n                                 CURSOR_MARK_PARAM, cursorMark));\n      Map rsp = (Map) ObjectBuilder.fromJSON(json);\n      assertTrue(\"response doesn't contain \" + CURSOR_MARK_NEXT + \": \" + json,\n                 rsp.containsKey(CURSOR_MARK_NEXT));\n      String nextCursorMark = (String)rsp.get(CURSOR_MARK_NEXT);\n      assertNotNull(CURSOR_MARK_NEXT + \" is null\", nextCursorMark);\n      List<Map<Object,Object>> docs = (List) (((Map)rsp.get(\"response\")).get(\"docs\"));\n      docsOnThisPage = docs.size();\n      if (null != params.getInt(CommonParams.ROWS)) {\n        int rows = params.getInt(CommonParams.ROWS);\n        assertTrue(\"Too many docs on this page: \" + rows + \" < \" + docsOnThisPage,\n                   docsOnThisPage <= rows);\n      }\n      if (0 == docsOnThisPage) {\n        assertEquals(\"no more docs, but \"+CURSOR_MARK_NEXT+\" isn't same\",\n                     cursorMark, nextCursorMark);\n      }\n      for (Map<Object,Object> doc : docs) {\n        int id = Integer.parseInt(doc.get(\"id\").toString());\n        assertFalse(\"walk already seen: \" + id, ids.exists(id));\n        ids.put(id);\n        assertFalse(\"id set bigger then max allowed (\"+maxSize+\"): \" + ids.size(),\n                    maxSize < ids.size());\n      }\n      cursorMark = nextCursorMark;\n    }\n    return ids;\n  }\n\n","sourceOld":"  /**\n   * Given a set of params, executes a cursor query using {@link CursorMarkParams#CURSOR_MARK_START}\n   * and then continuously walks the results using {@link CursorMarkParams#CURSOR_MARK_START} as long\n   * as a non-0 number of docs ar returned.  This method records the the set of all id's\n   * (must be positive ints) encountered and throws an assertion failure if any id is\n   * encountered more than once, or if the set grows above maxSize\n   */\n  public SentinelIntSet assertFullWalkNoDups(int maxSize, SolrParams params) \n    throws Exception {\n\n    SentinelIntSet ids = new SentinelIntSet(maxSize, -1);\n    String cursorMark = CURSOR_MARK_START;\n    int docsOnThisPage = Integer.MAX_VALUE;\n    while (0 < docsOnThisPage) {\n      String json = assertJQ(req(params,\n                                 CURSOR_MARK_PARAM, cursorMark));\n      Map rsp = (Map) ObjectBuilder.fromJSON(json);\n      assertTrue(\"response doesn't contain \" + CURSOR_MARK_NEXT + \": \" + json,\n                 rsp.containsKey(CURSOR_MARK_NEXT));\n      String nextCursorMark = (String)rsp.get(CURSOR_MARK_NEXT);\n      assertNotNull(CURSOR_MARK_NEXT + \" is null\", nextCursorMark);\n      List<Map<Object,Object>> docs = (List) (((Map)rsp.get(\"response\")).get(\"docs\"));\n      docsOnThisPage = docs.size();\n      if (null != params.getInt(CommonParams.ROWS)) {\n        int rows = params.getInt(CommonParams.ROWS);\n        assertTrue(\"Too many docs on this page: \" + rows + \" < \" + docsOnThisPage,\n                   docsOnThisPage <= rows);\n      }\n      if (0 == docsOnThisPage) {\n        assertEquals(\"no more docs, but \"+CURSOR_MARK_NEXT+\" isn't same\",\n                     cursorMark, nextCursorMark);\n      }\n      for (Map<Object,Object> doc : docs) {\n        int id = ((Long)doc.get(\"id\")).intValue();\n        assertFalse(\"walk already seen: \" + id, ids.exists(id));\n        ids.put(id);\n        assertFalse(\"id set bigger then max allowed (\"+maxSize+\"): \" + ids.size(),\n                    maxSize < ids.size());\n      }\n      cursorMark = nextCursorMark;\n    }\n    return ids;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/CursorPagingTest#assertFullWalkNoDups(int,SolrParams).mjava","pathOld":"solr/core/src/test/org/apache/solr/CursorPagingTest#assertFullWalkNoDups(int,SolrParams).mjava","sourceNew":"  /**\n   * Given a set of params, executes a cursor query using {@link CursorMarkParams#CURSOR_MARK_START}\n   * and then continuously walks the results using {@link CursorMarkParams#CURSOR_MARK_START} as long\n   * as a non-0 number of docs ar returned.  This method records the the set of all id's\n   * (must be positive ints) encountered and throws an assertion failure if any id is\n   * encountered more than once, or if the set grows above maxSize\n   */\n  public SentinelIntSet assertFullWalkNoDups(int maxSize, SolrParams params) \n    throws Exception {\n\n    SentinelIntSet ids = new SentinelIntSet(maxSize, -1);\n    String cursorMark = CURSOR_MARK_START;\n    int docsOnThisPage = Integer.MAX_VALUE;\n    while (0 < docsOnThisPage) {\n      String json = assertJQ(req(params,\n                                 CURSOR_MARK_PARAM, cursorMark));\n      Map rsp = (Map) ObjectBuilder.fromJSON(json);\n      assertTrue(\"response doesn't contain \" + CURSOR_MARK_NEXT + \": \" + json,\n                 rsp.containsKey(CURSOR_MARK_NEXT));\n      String nextCursorMark = (String)rsp.get(CURSOR_MARK_NEXT);\n      assertNotNull(CURSOR_MARK_NEXT + \" is null\", nextCursorMark);\n      List<Map<Object,Object>> docs = (List) (((Map)rsp.get(\"response\")).get(\"docs\"));\n      docsOnThisPage = docs.size();\n      if (null != params.getInt(CommonParams.ROWS)) {\n        int rows = params.getInt(CommonParams.ROWS);\n        assertTrue(\"Too many docs on this page: \" + rows + \" < \" + docsOnThisPage,\n                   docsOnThisPage <= rows);\n      }\n      if (0 == docsOnThisPage) {\n        assertEquals(\"no more docs, but \"+CURSOR_MARK_NEXT+\" isn't same\",\n                     cursorMark, nextCursorMark);\n      }\n      for (Map<Object,Object> doc : docs) {\n        int id = Integer.parseInt(doc.get(\"id\").toString());\n        assertFalse(\"walk already seen: \" + id, ids.exists(id));\n        ids.put(id);\n        assertFalse(\"id set bigger then max allowed (\"+maxSize+\"): \" + ids.size(),\n                    maxSize < ids.size());\n      }\n      cursorMark = nextCursorMark;\n    }\n    return ids;\n  }\n\n","sourceOld":"  /**\n   * Given a set of params, executes a cursor query using {@link CursorMarkParams#CURSOR_MARK_START}\n   * and then continuously walks the results using {@link CursorMarkParams#CURSOR_MARK_START} as long\n   * as a non-0 number of docs ar returned.  This method records the the set of all id's\n   * (must be positive ints) encountered and throws an assertion failure if any id is\n   * encountered more than once, or if the set grows above maxSize\n   */\n  public SentinelIntSet assertFullWalkNoDups(int maxSize, SolrParams params) \n    throws Exception {\n\n    SentinelIntSet ids = new SentinelIntSet(maxSize, -1);\n    String cursorMark = CURSOR_MARK_START;\n    int docsOnThisPage = Integer.MAX_VALUE;\n    while (0 < docsOnThisPage) {\n      String json = assertJQ(req(params,\n                                 CURSOR_MARK_PARAM, cursorMark));\n      Map rsp = (Map) ObjectBuilder.fromJSON(json);\n      assertTrue(\"response doesn't contain \" + CURSOR_MARK_NEXT + \": \" + json,\n                 rsp.containsKey(CURSOR_MARK_NEXT));\n      String nextCursorMark = (String)rsp.get(CURSOR_MARK_NEXT);\n      assertNotNull(CURSOR_MARK_NEXT + \" is null\", nextCursorMark);\n      List<Map<Object,Object>> docs = (List) (((Map)rsp.get(\"response\")).get(\"docs\"));\n      docsOnThisPage = docs.size();\n      if (null != params.getInt(CommonParams.ROWS)) {\n        int rows = params.getInt(CommonParams.ROWS);\n        assertTrue(\"Too many docs on this page: \" + rows + \" < \" + docsOnThisPage,\n                   docsOnThisPage <= rows);\n      }\n      if (0 == docsOnThisPage) {\n        assertEquals(\"no more docs, but \"+CURSOR_MARK_NEXT+\" isn't same\",\n                     cursorMark, nextCursorMark);\n      }\n      for (Map<Object,Object> doc : docs) {\n        int id = ((Long)doc.get(\"id\")).intValue();\n        assertFalse(\"walk already seen: \" + id, ids.exists(id));\n        ids.put(id);\n        assertFalse(\"id set bigger then max allowed (\"+maxSize+\"): \" + ids.size(),\n                    maxSize < ids.size());\n      }\n      cursorMark = nextCursorMark;\n    }\n    return ids;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/CursorPagingTest#assertFullWalkNoDups(int,SolrParams).mjava","pathOld":"solr/core/src/test/org/apache/solr/CursorPagingTest#assertFullWalkNoDups(int,SolrParams).mjava","sourceNew":"  /**\n   * Given a set of params, executes a cursor query using {@link CursorMarkParams#CURSOR_MARK_START}\n   * and then continuously walks the results using {@link CursorMarkParams#CURSOR_MARK_START} as long\n   * as a non-0 number of docs ar returned.  This method records the the set of all id's\n   * (must be positive ints) encountered and throws an assertion failure if any id is\n   * encountered more than once, or if the set grows above maxSize\n   */\n  public SentinelIntSet assertFullWalkNoDups(int maxSize, SolrParams params) \n    throws Exception {\n\n    SentinelIntSet ids = new SentinelIntSet(maxSize, -1);\n    String cursorMark = CURSOR_MARK_START;\n    int docsOnThisPage = Integer.MAX_VALUE;\n    while (0 < docsOnThisPage) {\n      String json = assertJQ(req(params,\n                                 CURSOR_MARK_PARAM, cursorMark));\n      Map rsp = (Map) ObjectBuilder.fromJSON(json);\n      assertTrue(\"response doesn't contain \" + CURSOR_MARK_NEXT + \": \" + json,\n                 rsp.containsKey(CURSOR_MARK_NEXT));\n      String nextCursorMark = (String)rsp.get(CURSOR_MARK_NEXT);\n      assertNotNull(CURSOR_MARK_NEXT + \" is null\", nextCursorMark);\n      List<Map<Object,Object>> docs = (List) (((Map)rsp.get(\"response\")).get(\"docs\"));\n      docsOnThisPage = docs.size();\n      if (null != params.getInt(CommonParams.ROWS)) {\n        int rows = params.getInt(CommonParams.ROWS);\n        assertTrue(\"Too many docs on this page: \" + rows + \" < \" + docsOnThisPage,\n                   docsOnThisPage <= rows);\n      }\n      if (0 == docsOnThisPage) {\n        assertEquals(\"no more docs, but \"+CURSOR_MARK_NEXT+\" isn't same\",\n                     cursorMark, nextCursorMark);\n      }\n      for (Map<Object,Object> doc : docs) {\n        int id = Integer.parseInt(doc.get(\"id\").toString());\n        assertFalse(\"walk already seen: \" + id, ids.exists(id));\n        ids.put(id);\n        assertFalse(\"id set bigger then max allowed (\"+maxSize+\"): \" + ids.size(),\n                    maxSize < ids.size());\n      }\n      cursorMark = nextCursorMark;\n    }\n    return ids;\n  }\n\n","sourceOld":"  /**\n   * Given a set of params, executes a cursor query using {@link CursorMarkParams#CURSOR_MARK_START}\n   * and then continuously walks the results using {@link CursorMarkParams#CURSOR_MARK_START} as long\n   * as a non-0 number of docs ar returned.  This method records the the set of all id's\n   * (must be positive ints) encountered and throws an assertion failure if any id is\n   * encountered more than once, or if the set grows above maxSize\n   */\n  public SentinelIntSet assertFullWalkNoDups(int maxSize, SolrParams params) \n    throws Exception {\n\n    SentinelIntSet ids = new SentinelIntSet(maxSize, -1);\n    String cursorMark = CURSOR_MARK_START;\n    int docsOnThisPage = Integer.MAX_VALUE;\n    while (0 < docsOnThisPage) {\n      String json = assertJQ(req(params,\n                                 CURSOR_MARK_PARAM, cursorMark));\n      Map rsp = (Map) ObjectBuilder.fromJSON(json);\n      assertTrue(\"response doesn't contain \" + CURSOR_MARK_NEXT + \": \" + json,\n                 rsp.containsKey(CURSOR_MARK_NEXT));\n      String nextCursorMark = (String)rsp.get(CURSOR_MARK_NEXT);\n      assertNotNull(CURSOR_MARK_NEXT + \" is null\", nextCursorMark);\n      List<Map<Object,Object>> docs = (List) (((Map)rsp.get(\"response\")).get(\"docs\"));\n      docsOnThisPage = docs.size();\n      if (null != params.getInt(CommonParams.ROWS)) {\n        int rows = params.getInt(CommonParams.ROWS);\n        assertTrue(\"Too many docs on this page: \" + rows + \" < \" + docsOnThisPage,\n                   docsOnThisPage <= rows);\n      }\n      if (0 == docsOnThisPage) {\n        assertEquals(\"no more docs, but \"+CURSOR_MARK_NEXT+\" isn't same\",\n                     cursorMark, nextCursorMark);\n      }\n      for (Map<Object,Object> doc : docs) {\n        int id = ((Long)doc.get(\"id\")).intValue();\n        assertFalse(\"walk already seen: \" + id, ids.exists(id));\n        ids.put(id);\n        assertFalse(\"id set bigger then max allowed (\"+maxSize+\"): \" + ids.size(),\n                    maxSize < ids.size());\n      }\n      cursorMark = nextCursorMark;\n    }\n    return ids;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3714bcf66a68a1600e9dd11442fc1b33b62ef088","date":1556832005,"type":3,"author":"noble","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/CursorPagingTest#assertFullWalkNoDups(int,SolrParams).mjava","pathOld":"solr/core/src/test/org/apache/solr/CursorPagingTest#assertFullWalkNoDups(int,SolrParams).mjava","sourceNew":"  /**\n   * Given a set of params, executes a cursor query using {@link CursorMarkParams#CURSOR_MARK_START}\n   * and then continuously walks the results using {@link CursorMarkParams#CURSOR_MARK_START} as long\n   * as a non-0 number of docs ar returned.  This method records the the set of all id's\n   * (must be positive ints) encountered and throws an assertion failure if any id is\n   * encountered more than once, or if the set grows above maxSize\n   */\n  public SentinelIntSet assertFullWalkNoDups(int maxSize, SolrParams params) \n    throws Exception {\n\n    SentinelIntSet ids = new SentinelIntSet(maxSize, -1);\n    String cursorMark = CURSOR_MARK_START;\n    int docsOnThisPage = Integer.MAX_VALUE;\n    while (0 < docsOnThisPage) {\n      String json = assertJQ(req(params,\n                                 CURSOR_MARK_PARAM, cursorMark));\n      Map rsp = (Map) fromJSONString(json);\n      assertTrue(\"response doesn't contain \" + CURSOR_MARK_NEXT + \": \" + json,\n                 rsp.containsKey(CURSOR_MARK_NEXT));\n      String nextCursorMark = (String)rsp.get(CURSOR_MARK_NEXT);\n      assertNotNull(CURSOR_MARK_NEXT + \" is null\", nextCursorMark);\n      List<Map<Object,Object>> docs = (List) (((Map)rsp.get(\"response\")).get(\"docs\"));\n      docsOnThisPage = docs.size();\n      if (null != params.getInt(CommonParams.ROWS)) {\n        int rows = params.getInt(CommonParams.ROWS);\n        assertTrue(\"Too many docs on this page: \" + rows + \" < \" + docsOnThisPage,\n                   docsOnThisPage <= rows);\n      }\n      if (0 == docsOnThisPage) {\n        assertEquals(\"no more docs, but \"+CURSOR_MARK_NEXT+\" isn't same\",\n                     cursorMark, nextCursorMark);\n      }\n      for (Map<Object,Object> doc : docs) {\n        int id = Integer.parseInt(doc.get(\"id\").toString());\n        assertFalse(\"walk already seen: \" + id, ids.exists(id));\n        ids.put(id);\n        assertFalse(\"id set bigger then max allowed (\"+maxSize+\"): \" + ids.size(),\n                    maxSize < ids.size());\n      }\n      cursorMark = nextCursorMark;\n    }\n    return ids;\n  }\n\n","sourceOld":"  /**\n   * Given a set of params, executes a cursor query using {@link CursorMarkParams#CURSOR_MARK_START}\n   * and then continuously walks the results using {@link CursorMarkParams#CURSOR_MARK_START} as long\n   * as a non-0 number of docs ar returned.  This method records the the set of all id's\n   * (must be positive ints) encountered and throws an assertion failure if any id is\n   * encountered more than once, or if the set grows above maxSize\n   */\n  public SentinelIntSet assertFullWalkNoDups(int maxSize, SolrParams params) \n    throws Exception {\n\n    SentinelIntSet ids = new SentinelIntSet(maxSize, -1);\n    String cursorMark = CURSOR_MARK_START;\n    int docsOnThisPage = Integer.MAX_VALUE;\n    while (0 < docsOnThisPage) {\n      String json = assertJQ(req(params,\n                                 CURSOR_MARK_PARAM, cursorMark));\n      Map rsp = (Map) ObjectBuilder.fromJSON(json);\n      assertTrue(\"response doesn't contain \" + CURSOR_MARK_NEXT + \": \" + json,\n                 rsp.containsKey(CURSOR_MARK_NEXT));\n      String nextCursorMark = (String)rsp.get(CURSOR_MARK_NEXT);\n      assertNotNull(CURSOR_MARK_NEXT + \" is null\", nextCursorMark);\n      List<Map<Object,Object>> docs = (List) (((Map)rsp.get(\"response\")).get(\"docs\"));\n      docsOnThisPage = docs.size();\n      if (null != params.getInt(CommonParams.ROWS)) {\n        int rows = params.getInt(CommonParams.ROWS);\n        assertTrue(\"Too many docs on this page: \" + rows + \" < \" + docsOnThisPage,\n                   docsOnThisPage <= rows);\n      }\n      if (0 == docsOnThisPage) {\n        assertEquals(\"no more docs, but \"+CURSOR_MARK_NEXT+\" isn't same\",\n                     cursorMark, nextCursorMark);\n      }\n      for (Map<Object,Object> doc : docs) {\n        int id = Integer.parseInt(doc.get(\"id\").toString());\n        assertFalse(\"walk already seen: \" + id, ids.exists(id));\n        ids.put(id);\n        assertFalse(\"id set bigger then max allowed (\"+maxSize+\"): \" + ids.size(),\n                    maxSize < ids.size());\n      }\n      cursorMark = nextCursorMark;\n    }\n    return ids;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aa2585c33d5d66a1c837c312221eb55ddb3c4300","date":1592493170,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/CursorPagingTest#assertFullWalkNoDups(int,SolrParams).mjava","pathOld":"solr/core/src/test/org/apache/solr/CursorPagingTest#assertFullWalkNoDups(int,SolrParams).mjava","sourceNew":"  /**\n   * Given a set of params, executes a cursor query using {@link CursorMarkParams#CURSOR_MARK_START}\n   * and then continuously walks the results using {@link CursorMarkParams#CURSOR_MARK_START} as long\n   * as a non-0 number of docs ar returned.  This method records the the set of all id's\n   * (must be positive ints) encountered and throws an assertion failure if any id is\n   * encountered more than once, or if the set grows above maxSize\n   */\n  public SentinelIntSet assertFullWalkNoDups(int maxSize, SolrParams params) \n    throws Exception {\n\n    SentinelIntSet ids = new SentinelIntSet(maxSize, -1);\n    String cursorMark = CURSOR_MARK_START;\n    int docsOnThisPage = Integer.MAX_VALUE;\n    while (0 < docsOnThisPage) {\n      String json = assertJQ(req(params,\n                                 CURSOR_MARK_PARAM, cursorMark));\n      @SuppressWarnings({\"rawtypes\"})\n      Map rsp = (Map) fromJSONString(json);\n      assertTrue(\"response doesn't contain \" + CURSOR_MARK_NEXT + \": \" + json,\n                 rsp.containsKey(CURSOR_MARK_NEXT));\n      String nextCursorMark = (String)rsp.get(CURSOR_MARK_NEXT);\n      assertNotNull(CURSOR_MARK_NEXT + \" is null\", nextCursorMark);\n      @SuppressWarnings({\"unchecked\"})\n      List<Map<Object,Object>> docs = (List) (((Map)rsp.get(\"response\")).get(\"docs\"));\n      docsOnThisPage = docs.size();\n      if (null != params.getInt(CommonParams.ROWS)) {\n        int rows = params.getInt(CommonParams.ROWS);\n        assertTrue(\"Too many docs on this page: \" + rows + \" < \" + docsOnThisPage,\n                   docsOnThisPage <= rows);\n      }\n      if (0 == docsOnThisPage) {\n        assertEquals(\"no more docs, but \"+CURSOR_MARK_NEXT+\" isn't same\",\n                     cursorMark, nextCursorMark);\n      }\n      for (Map<Object,Object> doc : docs) {\n        int id = Integer.parseInt(doc.get(\"id\").toString());\n        assertFalse(\"walk already seen: \" + id, ids.exists(id));\n        ids.put(id);\n        assertFalse(\"id set bigger then max allowed (\"+maxSize+\"): \" + ids.size(),\n                    maxSize < ids.size());\n      }\n      cursorMark = nextCursorMark;\n    }\n    return ids;\n  }\n\n","sourceOld":"  /**\n   * Given a set of params, executes a cursor query using {@link CursorMarkParams#CURSOR_MARK_START}\n   * and then continuously walks the results using {@link CursorMarkParams#CURSOR_MARK_START} as long\n   * as a non-0 number of docs ar returned.  This method records the the set of all id's\n   * (must be positive ints) encountered and throws an assertion failure if any id is\n   * encountered more than once, or if the set grows above maxSize\n   */\n  public SentinelIntSet assertFullWalkNoDups(int maxSize, SolrParams params) \n    throws Exception {\n\n    SentinelIntSet ids = new SentinelIntSet(maxSize, -1);\n    String cursorMark = CURSOR_MARK_START;\n    int docsOnThisPage = Integer.MAX_VALUE;\n    while (0 < docsOnThisPage) {\n      String json = assertJQ(req(params,\n                                 CURSOR_MARK_PARAM, cursorMark));\n      Map rsp = (Map) fromJSONString(json);\n      assertTrue(\"response doesn't contain \" + CURSOR_MARK_NEXT + \": \" + json,\n                 rsp.containsKey(CURSOR_MARK_NEXT));\n      String nextCursorMark = (String)rsp.get(CURSOR_MARK_NEXT);\n      assertNotNull(CURSOR_MARK_NEXT + \" is null\", nextCursorMark);\n      List<Map<Object,Object>> docs = (List) (((Map)rsp.get(\"response\")).get(\"docs\"));\n      docsOnThisPage = docs.size();\n      if (null != params.getInt(CommonParams.ROWS)) {\n        int rows = params.getInt(CommonParams.ROWS);\n        assertTrue(\"Too many docs on this page: \" + rows + \" < \" + docsOnThisPage,\n                   docsOnThisPage <= rows);\n      }\n      if (0 == docsOnThisPage) {\n        assertEquals(\"no more docs, but \"+CURSOR_MARK_NEXT+\" isn't same\",\n                     cursorMark, nextCursorMark);\n      }\n      for (Map<Object,Object> doc : docs) {\n        int id = Integer.parseInt(doc.get(\"id\").toString());\n        assertFalse(\"walk already seen: \" + id, ids.exists(id));\n        ids.put(id);\n        assertFalse(\"id set bigger then max allowed (\"+maxSize+\"): \" + ids.size(),\n                    maxSize < ids.size());\n      }\n      cursorMark = nextCursorMark;\n    }\n    return ids;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5eb2511ababf862ea11e10761c70ee560cd84510":["851e2bd9deeca46bef2e8c5328c9448e4198a688","cd3693b696a64d987bf4b3a14399d2105f16b05e"],"851e2bd9deeca46bef2e8c5328c9448e4198a688":["d5bc8e25f59990525f5beb14afe9c96240dcf4a2"],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["3714bcf66a68a1600e9dd11442fc1b33b62ef088"],"d5bc8e25f59990525f5beb14afe9c96240dcf4a2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a71f63026529f3c1f03cfdd664910873ab2369ae":["1e210ae1e604402eb4eeff2a52e56d189cd4f2f1"],"3714bcf66a68a1600e9dd11442fc1b33b62ef088":["28288370235ed02234a64753cdbf0c6ec096304a"],"1e210ae1e604402eb4eeff2a52e56d189cd4f2f1":["cd3693b696a64d987bf4b3a14399d2105f16b05e"],"cd3693b696a64d987bf4b3a14399d2105f16b05e":["851e2bd9deeca46bef2e8c5328c9448e4198a688"],"28288370235ed02234a64753cdbf0c6ec096304a":["1e210ae1e604402eb4eeff2a52e56d189cd4f2f1","a71f63026529f3c1f03cfdd664910873ab2369ae"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["1e210ae1e604402eb4eeff2a52e56d189cd4f2f1","a71f63026529f3c1f03cfdd664910873ab2369ae"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"]},"commit2Childs":{"5eb2511ababf862ea11e10761c70ee560cd84510":[],"851e2bd9deeca46bef2e8c5328c9448e4198a688":["5eb2511ababf862ea11e10761c70ee560cd84510","cd3693b696a64d987bf4b3a14399d2105f16b05e"],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d5bc8e25f59990525f5beb14afe9c96240dcf4a2":["851e2bd9deeca46bef2e8c5328c9448e4198a688"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d5bc8e25f59990525f5beb14afe9c96240dcf4a2"],"a71f63026529f3c1f03cfdd664910873ab2369ae":["28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"3714bcf66a68a1600e9dd11442fc1b33b62ef088":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"cd3693b696a64d987bf4b3a14399d2105f16b05e":["5eb2511ababf862ea11e10761c70ee560cd84510","1e210ae1e604402eb4eeff2a52e56d189cd4f2f1"],"1e210ae1e604402eb4eeff2a52e56d189cd4f2f1":["a71f63026529f3c1f03cfdd664910873ab2369ae","28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"28288370235ed02234a64753cdbf0c6ec096304a":["3714bcf66a68a1600e9dd11442fc1b33b62ef088"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}