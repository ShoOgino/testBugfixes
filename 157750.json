{"path":"lucene/facet/src/java/org/apache/lucene/facet/simple/TaxonomyFacetSumFloatAssociations#sumValues(List[MatchingDocs]).mjava","commits":[{"id":"441c188ff9fd7da36e0e4d8a9b51cebe63b31192","date":1384814749,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/simple/TaxonomyFacetSumFloatAssociations#sumValues(List[MatchingDocs]).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/simple/SumFloatAssociationFacets#sumValues(List[MatchingDocs]).mjava","sourceNew":"  private final void sumValues(List<MatchingDocs> matchingDocs) throws IOException {\n    //System.out.println(\"count matchingDocs=\" + matchingDocs + \" facetsField=\" + facetsFieldName);\n    for(MatchingDocs hits : matchingDocs) {\n      BinaryDocValues dv = hits.context.reader().getBinaryDocValues(indexFieldName);\n      if (dv == null) { // this reader does not have DocValues for the requested category list\n        continue;\n      }\n      FixedBitSet bits = hits.bits;\n    \n      final int length = hits.bits.length();\n      int doc = 0;\n      BytesRef scratch = new BytesRef();\n      //System.out.println(\"count seg=\" + hits.context.reader());\n      while (doc < length && (doc = bits.nextSetBit(doc)) != -1) {\n        //System.out.println(\"  doc=\" + doc);\n        // nocommit use OrdinalsReader?  but, add a\n        // BytesRef getAssociation()?\n        dv.get(doc, scratch);\n        byte[] bytes = scratch.bytes;\n        int end = scratch.offset + scratch.length;\n        int offset = scratch.offset;\n        while (offset < end) {\n          int ord = ((bytes[offset]&0xFF) << 24) |\n            ((bytes[offset+1]&0xFF) << 16) |\n            ((bytes[offset+2]&0xFF) << 8) |\n            (bytes[offset+3]&0xFF);\n          offset += 4;\n          int value = ((bytes[offset]&0xFF) << 24) |\n            ((bytes[offset+1]&0xFF) << 16) |\n            ((bytes[offset+2]&0xFF) << 8) |\n            (bytes[offset+3]&0xFF);\n          offset += 4;\n          values[ord] += Float.intBitsToFloat(value);\n        }\n        ++doc;\n      }\n    }\n\n    // nocommit we could do this lazily instead:\n\n    // Rollup any necessary dims:\n    // nocommit should we rollup?\n    /*\n    for(Map.Entry<String,FacetsConfig.DimConfig> ent : config.getDimConfigs().entrySet()) {\n      String dim = ent.getKey();\n      FacetsConfig.DimConfig ft = ent.getValue();\n      if (ft.hierarchical && ft.multiValued == false) {\n        int dimRootOrd = taxoReader.getOrdinal(new FacetLabel(dim));\n        // It can be -1 if this field was declared in the\n        // config but never indexed:\n        if (dimRootOrd > 0) {\n          counts[dimRootOrd] += rollup(children[dimRootOrd]);\n        }\n      }\n    }\n    */\n  }\n\n","sourceOld":"  private final void sumValues(List<MatchingDocs> matchingDocs) throws IOException {\n    //System.out.println(\"count matchingDocs=\" + matchingDocs + \" facetsField=\" + facetsFieldName);\n    for(MatchingDocs hits : matchingDocs) {\n      BinaryDocValues dv = hits.context.reader().getBinaryDocValues(indexFieldName);\n      if (dv == null) { // this reader does not have DocValues for the requested category list\n        continue;\n      }\n      FixedBitSet bits = hits.bits;\n    \n      final int length = hits.bits.length();\n      int doc = 0;\n      BytesRef scratch = new BytesRef();\n      //System.out.println(\"count seg=\" + hits.context.reader());\n      while (doc < length && (doc = bits.nextSetBit(doc)) != -1) {\n        //System.out.println(\"  doc=\" + doc);\n        // nocommit use OrdinalsReader?  but, add a\n        // BytesRef getAssociation()?\n        dv.get(doc, scratch);\n        byte[] bytes = scratch.bytes;\n        int end = scratch.offset + scratch.length;\n        int offset = scratch.offset;\n        while (offset < end) {\n          int ord = ((bytes[offset]&0xFF) << 24) |\n            ((bytes[offset+1]&0xFF) << 16) |\n            ((bytes[offset+2]&0xFF) << 8) |\n            (bytes[offset+3]&0xFF);\n          offset += 4;\n          int value = ((bytes[offset]&0xFF) << 24) |\n            ((bytes[offset+1]&0xFF) << 16) |\n            ((bytes[offset+2]&0xFF) << 8) |\n            (bytes[offset+3]&0xFF);\n          offset += 4;\n          values[ord] += Float.intBitsToFloat(value);\n        }\n        ++doc;\n      }\n    }\n\n    // nocommit we could do this lazily instead:\n\n    // Rollup any necessary dims:\n    // nocommit should we rollup?\n    /*\n    for(Map.Entry<String,FacetsConfig.DimConfig> ent : config.getDimConfigs().entrySet()) {\n      String dim = ent.getKey();\n      FacetsConfig.DimConfig ft = ent.getValue();\n      if (ft.hierarchical && ft.multiValued == false) {\n        int dimRootOrd = taxoReader.getOrdinal(new FacetLabel(dim));\n        // It can be -1 if this field was declared in the\n        // config but never indexed:\n        if (dimRootOrd > 0) {\n          counts[dimRootOrd] += rollup(children[dimRootOrd]);\n        }\n      }\n    }\n    */\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"006838107b0cd2051371f3470740d23ec91b1886","date":1384950816,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/simple/TaxonomyFacetSumFloatAssociations#sumValues(List[MatchingDocs]).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/simple/TaxonomyFacetSumFloatAssociations#sumValues(List[MatchingDocs]).mjava","sourceNew":"  private final void sumValues(List<MatchingDocs> matchingDocs) throws IOException {\n    //System.out.println(\"count matchingDocs=\" + matchingDocs + \" facetsField=\" + facetsFieldName);\n    for(MatchingDocs hits : matchingDocs) {\n      BinaryDocValues dv = hits.context.reader().getBinaryDocValues(indexFieldName);\n      if (dv == null) { // this reader does not have DocValues for the requested category list\n        continue;\n      }\n      FixedBitSet bits = hits.bits;\n    \n      final int length = hits.bits.length();\n      int doc = 0;\n      BytesRef scratch = new BytesRef();\n      //System.out.println(\"count seg=\" + hits.context.reader());\n      while (doc < length && (doc = bits.nextSetBit(doc)) != -1) {\n        //System.out.println(\"  doc=\" + doc);\n        // nocommit use OrdinalsReader?  but, add a\n        // BytesRef getAssociation()?\n        dv.get(doc, scratch);\n        byte[] bytes = scratch.bytes;\n        int end = scratch.offset + scratch.length;\n        int offset = scratch.offset;\n        while (offset < end) {\n          int ord = ((bytes[offset]&0xFF) << 24) |\n            ((bytes[offset+1]&0xFF) << 16) |\n            ((bytes[offset+2]&0xFF) << 8) |\n            (bytes[offset+3]&0xFF);\n          offset += 4;\n          int value = ((bytes[offset]&0xFF) << 24) |\n            ((bytes[offset+1]&0xFF) << 16) |\n            ((bytes[offset+2]&0xFF) << 8) |\n            (bytes[offset+3]&0xFF);\n          offset += 4;\n          values[ord] += Float.intBitsToFloat(value);\n        }\n        ++doc;\n      }\n    }\n  }\n\n","sourceOld":"  private final void sumValues(List<MatchingDocs> matchingDocs) throws IOException {\n    //System.out.println(\"count matchingDocs=\" + matchingDocs + \" facetsField=\" + facetsFieldName);\n    for(MatchingDocs hits : matchingDocs) {\n      BinaryDocValues dv = hits.context.reader().getBinaryDocValues(indexFieldName);\n      if (dv == null) { // this reader does not have DocValues for the requested category list\n        continue;\n      }\n      FixedBitSet bits = hits.bits;\n    \n      final int length = hits.bits.length();\n      int doc = 0;\n      BytesRef scratch = new BytesRef();\n      //System.out.println(\"count seg=\" + hits.context.reader());\n      while (doc < length && (doc = bits.nextSetBit(doc)) != -1) {\n        //System.out.println(\"  doc=\" + doc);\n        // nocommit use OrdinalsReader?  but, add a\n        // BytesRef getAssociation()?\n        dv.get(doc, scratch);\n        byte[] bytes = scratch.bytes;\n        int end = scratch.offset + scratch.length;\n        int offset = scratch.offset;\n        while (offset < end) {\n          int ord = ((bytes[offset]&0xFF) << 24) |\n            ((bytes[offset+1]&0xFF) << 16) |\n            ((bytes[offset+2]&0xFF) << 8) |\n            (bytes[offset+3]&0xFF);\n          offset += 4;\n          int value = ((bytes[offset]&0xFF) << 24) |\n            ((bytes[offset+1]&0xFF) << 16) |\n            ((bytes[offset+2]&0xFF) << 8) |\n            (bytes[offset+3]&0xFF);\n          offset += 4;\n          values[ord] += Float.intBitsToFloat(value);\n        }\n        ++doc;\n      }\n    }\n\n    // nocommit we could do this lazily instead:\n\n    // Rollup any necessary dims:\n    // nocommit should we rollup?\n    /*\n    for(Map.Entry<String,FacetsConfig.DimConfig> ent : config.getDimConfigs().entrySet()) {\n      String dim = ent.getKey();\n      FacetsConfig.DimConfig ft = ent.getValue();\n      if (ft.hierarchical && ft.multiValued == false) {\n        int dimRootOrd = taxoReader.getOrdinal(new FacetLabel(dim));\n        // It can be -1 if this field was declared in the\n        // config but never indexed:\n        if (dimRootOrd > 0) {\n          counts[dimRootOrd] += rollup(children[dimRootOrd]);\n        }\n      }\n    }\n    */\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"21d36d0db865f7b84026b447bec653469a6e66df","date":1385495602,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/TaxonomyFacetSumFloatAssociations#sumValues(List[MatchingDocs]).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/simple/TaxonomyFacetSumFloatAssociations#sumValues(List[MatchingDocs]).mjava","sourceNew":"  private final void sumValues(List<MatchingDocs> matchingDocs) throws IOException {\n    //System.out.println(\"count matchingDocs=\" + matchingDocs + \" facetsField=\" + facetsFieldName);\n    for(MatchingDocs hits : matchingDocs) {\n      BinaryDocValues dv = hits.context.reader().getBinaryDocValues(indexFieldName);\n      if (dv == null) { // this reader does not have DocValues for the requested category list\n        continue;\n      }\n      FixedBitSet bits = hits.bits;\n    \n      final int length = hits.bits.length();\n      int doc = 0;\n      BytesRef scratch = new BytesRef();\n      //System.out.println(\"count seg=\" + hits.context.reader());\n      while (doc < length && (doc = bits.nextSetBit(doc)) != -1) {\n        //System.out.println(\"  doc=\" + doc);\n        // nocommit use OrdinalsReader?  but, add a\n        // BytesRef getAssociation()?\n        dv.get(doc, scratch);\n        byte[] bytes = scratch.bytes;\n        int end = scratch.offset + scratch.length;\n        int offset = scratch.offset;\n        while (offset < end) {\n          int ord = ((bytes[offset]&0xFF) << 24) |\n            ((bytes[offset+1]&0xFF) << 16) |\n            ((bytes[offset+2]&0xFF) << 8) |\n            (bytes[offset+3]&0xFF);\n          offset += 4;\n          int value = ((bytes[offset]&0xFF) << 24) |\n            ((bytes[offset+1]&0xFF) << 16) |\n            ((bytes[offset+2]&0xFF) << 8) |\n            (bytes[offset+3]&0xFF);\n          offset += 4;\n          values[ord] += Float.intBitsToFloat(value);\n        }\n        ++doc;\n      }\n    }\n  }\n\n","sourceOld":"  private final void sumValues(List<MatchingDocs> matchingDocs) throws IOException {\n    //System.out.println(\"count matchingDocs=\" + matchingDocs + \" facetsField=\" + facetsFieldName);\n    for(MatchingDocs hits : matchingDocs) {\n      BinaryDocValues dv = hits.context.reader().getBinaryDocValues(indexFieldName);\n      if (dv == null) { // this reader does not have DocValues for the requested category list\n        continue;\n      }\n      FixedBitSet bits = hits.bits;\n    \n      final int length = hits.bits.length();\n      int doc = 0;\n      BytesRef scratch = new BytesRef();\n      //System.out.println(\"count seg=\" + hits.context.reader());\n      while (doc < length && (doc = bits.nextSetBit(doc)) != -1) {\n        //System.out.println(\"  doc=\" + doc);\n        // nocommit use OrdinalsReader?  but, add a\n        // BytesRef getAssociation()?\n        dv.get(doc, scratch);\n        byte[] bytes = scratch.bytes;\n        int end = scratch.offset + scratch.length;\n        int offset = scratch.offset;\n        while (offset < end) {\n          int ord = ((bytes[offset]&0xFF) << 24) |\n            ((bytes[offset+1]&0xFF) << 16) |\n            ((bytes[offset+2]&0xFF) << 8) |\n            (bytes[offset+3]&0xFF);\n          offset += 4;\n          int value = ((bytes[offset]&0xFF) << 24) |\n            ((bytes[offset+1]&0xFF) << 16) |\n            ((bytes[offset+2]&0xFF) << 8) |\n            (bytes[offset+3]&0xFF);\n          offset += 4;\n          values[ord] += Float.intBitsToFloat(value);\n        }\n        ++doc;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"21d36d0db865f7b84026b447bec653469a6e66df":["006838107b0cd2051371f3470740d23ec91b1886"],"006838107b0cd2051371f3470740d23ec91b1886":["441c188ff9fd7da36e0e4d8a9b51cebe63b31192"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"441c188ff9fd7da36e0e4d8a9b51cebe63b31192":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817","441c188ff9fd7da36e0e4d8a9b51cebe63b31192"],"21d36d0db865f7b84026b447bec653469a6e66df":[],"006838107b0cd2051371f3470740d23ec91b1886":["21d36d0db865f7b84026b447bec653469a6e66df"],"441c188ff9fd7da36e0e4d8a9b51cebe63b31192":["006838107b0cd2051371f3470740d23ec91b1886"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["21d36d0db865f7b84026b447bec653469a6e66df","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}