{"path":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPointDistanceComparator#haversin1(double,double,double,double).mjava","commits":[{"id":"d210c7f333402b4828c1d10dfd5457c9fe312c7d","date":1457987131,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPointDistanceComparator#haversin1(double,double,double,double).mjava","pathOld":"/dev/null","sourceNew":"  // sort by first part of the haversin computation. note that this value is meaningless to the user.\n  // invoke haversin2() to \"complete\" the calculation and get a distance in meters.\n  static double haversin1(double lat1, double lon1, double lat2, double lon2) {\n    double dLat = SloppyMath.TO_RADIANS * (lat2 - lat1);\n    double dLon = SloppyMath.TO_RADIANS * (lon2 - lon1);\n    lat1 = SloppyMath.TO_RADIANS * (lat1);\n    lat2 = SloppyMath.TO_RADIANS * (lat2);\n\n    final double sinDLatO2 = SloppyMath.sin(dLat / 2);\n    final double sinDLonO2 = SloppyMath.sin(dLon / 2);\n\n    return sinDLatO2*sinDLatO2 + sinDLonO2 * sinDLonO2 * SloppyMath.cos(lat1) * SloppyMath.cos(lat2);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ec60431d008a694828dacb4bc3cda775b6c44a9f","date":1458570843,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPointDistanceComparator#haversin1(double,double,double,double).mjava","sourceNew":null,"sourceOld":"  // sort by first part of the haversin computation. note that this value is meaningless to the user.\n  // invoke haversin2() to \"complete\" the calculation and get a distance in meters.\n  static double haversin1(double lat1, double lon1, double lat2, double lon2) {\n    double dLat = SloppyMath.TO_RADIANS * (lat2 - lat1);\n    double dLon = SloppyMath.TO_RADIANS * (lon2 - lon1);\n    lat1 = SloppyMath.TO_RADIANS * (lat1);\n    lat2 = SloppyMath.TO_RADIANS * (lat2);\n\n    final double sinDLatO2 = SloppyMath.sin(dLat / 2);\n    final double sinDLonO2 = SloppyMath.sin(dLon / 2);\n\n    return sinDLatO2*sinDLatO2 + sinDLonO2 * sinDLonO2 * SloppyMath.cos(lat1) * SloppyMath.cos(lat2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d210c7f333402b4828c1d10dfd5457c9fe312c7d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ec60431d008a694828dacb4bc3cda775b6c44a9f":["d210c7f333402b4828c1d10dfd5457c9fe312c7d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ec60431d008a694828dacb4bc3cda775b6c44a9f"]},"commit2Childs":{"d210c7f333402b4828c1d10dfd5457c9fe312c7d":["ec60431d008a694828dacb4bc3cda775b6c44a9f"],"ec60431d008a694828dacb4bc3cda775b6c44a9f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d210c7f333402b4828c1d10dfd5457c9fe312c7d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}