{"path":"lucene/analysis/common/src/java/org/apache/lucene/analysis/ngram/NGramTokenFilter#NGramTokenFilter(Version,TokenStream,int,int).mjava","commits":[{"id":"4c807c4005aae1acaf5cebc9af40883985fb89a8","date":1366974206,"type":2,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/ngram/NGramTokenFilter#NGramTokenFilter(Version,TokenStream,int,int).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/ngram/NGramTokenFilter#NGramTokenFilter(TokenStream,int,int).mjava","sourceNew":"  /**\n   * Creates NGramTokenFilter with given min and max n-grams.\n   * @param version Lucene version to enable correct position increments.\n   *                See <a href=\"#version\">above</a> for details.\n   * @param input {@link TokenStream} holding the input to be tokenized\n   * @param minGram the smallest n-gram to generate\n   * @param maxGram the largest n-gram to generate\n   */\n  public NGramTokenFilter(Version version, TokenStream input, int minGram, int maxGram) {\n    super(new LengthFilter(true, input, minGram, Integer.MAX_VALUE));\n    this.version = version;\n    if (minGram < 1) {\n      throw new IllegalArgumentException(\"minGram must be greater than zero\");\n    }\n    if (minGram > maxGram) {\n      throw new IllegalArgumentException(\"minGram must not be greater than maxGram\");\n    }\n    this.minGram = minGram;\n    this.maxGram = maxGram;\n    if (version.onOrAfter(Version.LUCENE_44)) {\n      posIncAtt = addAttribute(PositionIncrementAttribute.class);\n      posLenAtt = addAttribute(PositionLengthAttribute.class);\n    } else {\n      posIncAtt = new PositionIncrementAttribute() {\n        @Override\n        public void setPositionIncrement(int positionIncrement) {}\n        @Override\n        public int getPositionIncrement() {\n          return 0;\n        }\n      };\n      posLenAtt = new PositionLengthAttribute() {\n        @Override\n        public void setPositionLength(int positionLength) {}        \n        @Override\n        public int getPositionLength() {\n          return 0;\n        }\n      };\n    }\n  }\n\n","sourceOld":"  /**\n   * Creates NGramTokenFilter with given min and max n-grams.\n   * @param input {@link TokenStream} holding the input to be tokenized\n   * @param minGram the smallest n-gram to generate\n   * @param maxGram the largest n-gram to generate\n   */\n  public NGramTokenFilter(TokenStream input, int minGram, int maxGram) {\n    super(input);\n    if (minGram < 1) {\n      throw new IllegalArgumentException(\"minGram must be greater than zero\");\n    }\n    if (minGram > maxGram) {\n      throw new IllegalArgumentException(\"minGram must not be greater than maxGram\");\n    }\n    this.minGram = minGram;\n    this.maxGram = maxGram;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eafa8c5eabc3dacd34680054e6a33bda024080ac","date":1367691488,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/ngram/NGramTokenFilter#NGramTokenFilter(Version,TokenStream,int,int).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/ngram/NGramTokenFilter#NGramTokenFilter(Version,TokenStream,int,int).mjava","sourceNew":"  /**\n   * Creates NGramTokenFilter with given min and max n-grams.\n   * @param version Lucene version to enable correct position increments.\n   *                See <a href=\"#version\">above</a> for details.\n   * @param input {@link TokenStream} holding the input to be tokenized\n   * @param minGram the smallest n-gram to generate\n   * @param maxGram the largest n-gram to generate\n   */\n  public NGramTokenFilter(Version version, TokenStream input, int minGram, int maxGram) {\n    super(new LengthFilter(version, input, minGram, Integer.MAX_VALUE));\n    this.version = version;\n    if (minGram < 1) {\n      throw new IllegalArgumentException(\"minGram must be greater than zero\");\n    }\n    if (minGram > maxGram) {\n      throw new IllegalArgumentException(\"minGram must not be greater than maxGram\");\n    }\n    this.minGram = minGram;\n    this.maxGram = maxGram;\n    if (version.onOrAfter(Version.LUCENE_44)) {\n      posIncAtt = addAttribute(PositionIncrementAttribute.class);\n      posLenAtt = addAttribute(PositionLengthAttribute.class);\n    } else {\n      posIncAtt = new PositionIncrementAttribute() {\n        @Override\n        public void setPositionIncrement(int positionIncrement) {}\n        @Override\n        public int getPositionIncrement() {\n          return 0;\n        }\n      };\n      posLenAtt = new PositionLengthAttribute() {\n        @Override\n        public void setPositionLength(int positionLength) {}        \n        @Override\n        public int getPositionLength() {\n          return 0;\n        }\n      };\n    }\n  }\n\n","sourceOld":"  /**\n   * Creates NGramTokenFilter with given min and max n-grams.\n   * @param version Lucene version to enable correct position increments.\n   *                See <a href=\"#version\">above</a> for details.\n   * @param input {@link TokenStream} holding the input to be tokenized\n   * @param minGram the smallest n-gram to generate\n   * @param maxGram the largest n-gram to generate\n   */\n  public NGramTokenFilter(Version version, TokenStream input, int minGram, int maxGram) {\n    super(new LengthFilter(true, input, minGram, Integer.MAX_VALUE));\n    this.version = version;\n    if (minGram < 1) {\n      throw new IllegalArgumentException(\"minGram must be greater than zero\");\n    }\n    if (minGram > maxGram) {\n      throw new IllegalArgumentException(\"minGram must not be greater than maxGram\");\n    }\n    this.minGram = minGram;\n    this.maxGram = maxGram;\n    if (version.onOrAfter(Version.LUCENE_44)) {\n      posIncAtt = addAttribute(PositionIncrementAttribute.class);\n      posLenAtt = addAttribute(PositionLengthAttribute.class);\n    } else {\n      posIncAtt = new PositionIncrementAttribute() {\n        @Override\n        public void setPositionIncrement(int positionIncrement) {}\n        @Override\n        public int getPositionIncrement() {\n          return 0;\n        }\n      };\n      posLenAtt = new PositionLengthAttribute() {\n        @Override\n        public void setPositionLength(int positionLength) {}        \n        @Override\n        public int getPositionLength() {\n          return 0;\n        }\n      };\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bd095de1c7ac6b6ab3a330b5fbe8cb37e4f34704","date":1371043069,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/ngram/NGramTokenFilter#NGramTokenFilter(Version,TokenStream,int,int).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/ngram/NGramTokenFilter#NGramTokenFilter(Version,TokenStream,int,int).mjava","sourceNew":"  /**\n   * Creates NGramTokenFilter with given min and max n-grams.\n   * @param version Lucene version to enable correct position increments.\n   *                See <a href=\"#version\">above</a> for details.\n   * @param input {@link TokenStream} holding the input to be tokenized\n   * @param minGram the smallest n-gram to generate\n   * @param maxGram the largest n-gram to generate\n   */\n  public NGramTokenFilter(Version version, TokenStream input, int minGram, int maxGram) {\n    super(new LengthFilter(version, input, minGram, Integer.MAX_VALUE));\n    this.version = version;\n    this.charUtils = version.onOrAfter(Version.LUCENE_44)\n        ? CharacterUtils.getInstance(version)\n        : CharacterUtils.getJava4Instance();\n    if (minGram < 1) {\n      throw new IllegalArgumentException(\"minGram must be greater than zero\");\n    }\n    if (minGram > maxGram) {\n      throw new IllegalArgumentException(\"minGram must not be greater than maxGram\");\n    }\n    this.minGram = minGram;\n    this.maxGram = maxGram;\n    if (version.onOrAfter(Version.LUCENE_44)) {\n      posIncAtt = addAttribute(PositionIncrementAttribute.class);\n      posLenAtt = addAttribute(PositionLengthAttribute.class);\n    } else {\n      posIncAtt = new PositionIncrementAttribute() {\n        @Override\n        public void setPositionIncrement(int positionIncrement) {}\n        @Override\n        public int getPositionIncrement() {\n          return 0;\n        }\n      };\n      posLenAtt = new PositionLengthAttribute() {\n        @Override\n        public void setPositionLength(int positionLength) {}        \n        @Override\n        public int getPositionLength() {\n          return 0;\n        }\n      };\n    }\n  }\n\n","sourceOld":"  /**\n   * Creates NGramTokenFilter with given min and max n-grams.\n   * @param version Lucene version to enable correct position increments.\n   *                See <a href=\"#version\">above</a> for details.\n   * @param input {@link TokenStream} holding the input to be tokenized\n   * @param minGram the smallest n-gram to generate\n   * @param maxGram the largest n-gram to generate\n   */\n  public NGramTokenFilter(Version version, TokenStream input, int minGram, int maxGram) {\n    super(new LengthFilter(version, input, minGram, Integer.MAX_VALUE));\n    this.version = version;\n    if (minGram < 1) {\n      throw new IllegalArgumentException(\"minGram must be greater than zero\");\n    }\n    if (minGram > maxGram) {\n      throw new IllegalArgumentException(\"minGram must not be greater than maxGram\");\n    }\n    this.minGram = minGram;\n    this.maxGram = maxGram;\n    if (version.onOrAfter(Version.LUCENE_44)) {\n      posIncAtt = addAttribute(PositionIncrementAttribute.class);\n      posLenAtt = addAttribute(PositionLengthAttribute.class);\n    } else {\n      posIncAtt = new PositionIncrementAttribute() {\n        @Override\n        public void setPositionIncrement(int positionIncrement) {}\n        @Override\n        public int getPositionIncrement() {\n          return 0;\n        }\n      };\n      posLenAtt = new PositionLengthAttribute() {\n        @Override\n        public void setPositionLength(int positionLength) {}        \n        @Override\n        public int getPositionLength() {\n          return 0;\n        }\n      };\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9fb2c11bd0a5a7bef41cee10608d4429e976c528","date":1381463622,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/ngram/NGramTokenFilter#NGramTokenFilter(Version,TokenStream,int,int).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/ngram/NGramTokenFilter#NGramTokenFilter(Version,TokenStream,int,int).mjava","sourceNew":"  /**\n   * Creates NGramTokenFilter with given min and max n-grams.\n   * @param version Lucene version to enable correct position increments.\n   *                See <a href=\"#version\">above</a> for details.\n   * @param input {@link TokenStream} holding the input to be tokenized\n   * @param minGram the smallest n-gram to generate\n   * @param maxGram the largest n-gram to generate\n   */\n  public NGramTokenFilter(Version version, TokenStream input, int minGram, int maxGram) {\n    super(new CodepointCountFilter(version, input, minGram, Integer.MAX_VALUE));\n    this.version = version;\n    this.charUtils = version.onOrAfter(Version.LUCENE_44)\n        ? CharacterUtils.getInstance(version)\n        : CharacterUtils.getJava4Instance();\n    if (minGram < 1) {\n      throw new IllegalArgumentException(\"minGram must be greater than zero\");\n    }\n    if (minGram > maxGram) {\n      throw new IllegalArgumentException(\"minGram must not be greater than maxGram\");\n    }\n    this.minGram = minGram;\n    this.maxGram = maxGram;\n    if (version.onOrAfter(Version.LUCENE_44)) {\n      posIncAtt = addAttribute(PositionIncrementAttribute.class);\n      posLenAtt = addAttribute(PositionLengthAttribute.class);\n    } else {\n      posIncAtt = new PositionIncrementAttribute() {\n        @Override\n        public void setPositionIncrement(int positionIncrement) {}\n        @Override\n        public int getPositionIncrement() {\n          return 0;\n        }\n      };\n      posLenAtt = new PositionLengthAttribute() {\n        @Override\n        public void setPositionLength(int positionLength) {}        \n        @Override\n        public int getPositionLength() {\n          return 0;\n        }\n      };\n    }\n  }\n\n","sourceOld":"  /**\n   * Creates NGramTokenFilter with given min and max n-grams.\n   * @param version Lucene version to enable correct position increments.\n   *                See <a href=\"#version\">above</a> for details.\n   * @param input {@link TokenStream} holding the input to be tokenized\n   * @param minGram the smallest n-gram to generate\n   * @param maxGram the largest n-gram to generate\n   */\n  public NGramTokenFilter(Version version, TokenStream input, int minGram, int maxGram) {\n    super(new LengthFilter(version, input, minGram, Integer.MAX_VALUE));\n    this.version = version;\n    this.charUtils = version.onOrAfter(Version.LUCENE_44)\n        ? CharacterUtils.getInstance(version)\n        : CharacterUtils.getJava4Instance();\n    if (minGram < 1) {\n      throw new IllegalArgumentException(\"minGram must be greater than zero\");\n    }\n    if (minGram > maxGram) {\n      throw new IllegalArgumentException(\"minGram must not be greater than maxGram\");\n    }\n    this.minGram = minGram;\n    this.maxGram = maxGram;\n    if (version.onOrAfter(Version.LUCENE_44)) {\n      posIncAtt = addAttribute(PositionIncrementAttribute.class);\n      posLenAtt = addAttribute(PositionLengthAttribute.class);\n    } else {\n      posIncAtt = new PositionIncrementAttribute() {\n        @Override\n        public void setPositionIncrement(int positionIncrement) {}\n        @Override\n        public int getPositionIncrement() {\n          return 0;\n        }\n      };\n      posLenAtt = new PositionLengthAttribute() {\n        @Override\n        public void setPositionLength(int positionLength) {}        \n        @Override\n        public int getPositionLength() {\n          return 0;\n        }\n      };\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dd330c9d05eacbd6e952fe0dea852e7ae037eb50","date":1398873035,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/ngram/NGramTokenFilter#NGramTokenFilter(Version,TokenStream,int,int).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/ngram/NGramTokenFilter#NGramTokenFilter(Version,TokenStream,int,int).mjava","sourceNew":"  /**\n   * Creates NGramTokenFilter with given min and max n-grams.\n   * @param version Lucene version to enable correct position increments.\n   *                See <a href=\"#version\">above</a> for details.\n   * @param input {@link TokenStream} holding the input to be tokenized\n   * @param minGram the smallest n-gram to generate\n   * @param maxGram the largest n-gram to generate\n   */\n  public NGramTokenFilter(Version version, TokenStream input, int minGram, int maxGram) {\n    super(new CodepointCountFilter(version, input, minGram, Integer.MAX_VALUE));\n    this.version = version;\n    this.charUtils = version.onOrAfter(Version.LUCENE_4_4)\n        ? CharacterUtils.getInstance(version)\n        : CharacterUtils.getJava4Instance();\n    if (minGram < 1) {\n      throw new IllegalArgumentException(\"minGram must be greater than zero\");\n    }\n    if (minGram > maxGram) {\n      throw new IllegalArgumentException(\"minGram must not be greater than maxGram\");\n    }\n    this.minGram = minGram;\n    this.maxGram = maxGram;\n    if (version.onOrAfter(Version.LUCENE_4_4)) {\n      posIncAtt = addAttribute(PositionIncrementAttribute.class);\n      posLenAtt = addAttribute(PositionLengthAttribute.class);\n    } else {\n      posIncAtt = new PositionIncrementAttribute() {\n        @Override\n        public void setPositionIncrement(int positionIncrement) {}\n        @Override\n        public int getPositionIncrement() {\n          return 0;\n        }\n      };\n      posLenAtt = new PositionLengthAttribute() {\n        @Override\n        public void setPositionLength(int positionLength) {}        \n        @Override\n        public int getPositionLength() {\n          return 0;\n        }\n      };\n    }\n  }\n\n","sourceOld":"  /**\n   * Creates NGramTokenFilter with given min and max n-grams.\n   * @param version Lucene version to enable correct position increments.\n   *                See <a href=\"#version\">above</a> for details.\n   * @param input {@link TokenStream} holding the input to be tokenized\n   * @param minGram the smallest n-gram to generate\n   * @param maxGram the largest n-gram to generate\n   */\n  public NGramTokenFilter(Version version, TokenStream input, int minGram, int maxGram) {\n    super(new CodepointCountFilter(version, input, minGram, Integer.MAX_VALUE));\n    this.version = version;\n    this.charUtils = version.onOrAfter(Version.LUCENE_44)\n        ? CharacterUtils.getInstance(version)\n        : CharacterUtils.getJava4Instance();\n    if (minGram < 1) {\n      throw new IllegalArgumentException(\"minGram must be greater than zero\");\n    }\n    if (minGram > maxGram) {\n      throw new IllegalArgumentException(\"minGram must not be greater than maxGram\");\n    }\n    this.minGram = minGram;\n    this.maxGram = maxGram;\n    if (version.onOrAfter(Version.LUCENE_44)) {\n      posIncAtt = addAttribute(PositionIncrementAttribute.class);\n      posLenAtt = addAttribute(PositionLengthAttribute.class);\n    } else {\n      posIncAtt = new PositionIncrementAttribute() {\n        @Override\n        public void setPositionIncrement(int positionIncrement) {}\n        @Override\n        public int getPositionIncrement() {\n          return 0;\n        }\n      };\n      posLenAtt = new PositionLengthAttribute() {\n        @Override\n        public void setPositionLength(int positionLength) {}        \n        @Override\n        public int getPositionLength() {\n          return 0;\n        }\n      };\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff4227bb146f97aabae888091c19e48c88dbb0db","date":1406758576,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/ngram/NGramTokenFilter#NGramTokenFilter(Version,TokenStream,int,int).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/ngram/NGramTokenFilter#NGramTokenFilter(Version,TokenStream,int,int).mjava","sourceNew":"  /**\n   * Creates NGramTokenFilter with given min and max n-grams.\n   * @param version Lucene version to enable correct position increments.\n   *                See <a href=\"#version\">above</a> for details.\n   * @param input {@link TokenStream} holding the input to be tokenized\n   * @param minGram the smallest n-gram to generate\n   * @param maxGram the largest n-gram to generate\n   */\n  public NGramTokenFilter(Version version, TokenStream input, int minGram, int maxGram) {\n    super(new CodepointCountFilter(input, minGram, Integer.MAX_VALUE));\n    this.version = version;\n    this.charUtils = version.onOrAfter(Version.LUCENE_4_4)\n        ? CharacterUtils.getInstance()\n        : CharacterUtils.getJava4Instance();\n    if (minGram < 1) {\n      throw new IllegalArgumentException(\"minGram must be greater than zero\");\n    }\n    if (minGram > maxGram) {\n      throw new IllegalArgumentException(\"minGram must not be greater than maxGram\");\n    }\n    this.minGram = minGram;\n    this.maxGram = maxGram;\n    if (version.onOrAfter(Version.LUCENE_4_4)) {\n      posIncAtt = addAttribute(PositionIncrementAttribute.class);\n      posLenAtt = addAttribute(PositionLengthAttribute.class);\n    } else {\n      posIncAtt = new PositionIncrementAttribute() {\n        @Override\n        public void setPositionIncrement(int positionIncrement) {}\n        @Override\n        public int getPositionIncrement() {\n          return 0;\n        }\n      };\n      posLenAtt = new PositionLengthAttribute() {\n        @Override\n        public void setPositionLength(int positionLength) {}        \n        @Override\n        public int getPositionLength() {\n          return 0;\n        }\n      };\n    }\n  }\n\n","sourceOld":"  /**\n   * Creates NGramTokenFilter with given min and max n-grams.\n   * @param version Lucene version to enable correct position increments.\n   *                See <a href=\"#version\">above</a> for details.\n   * @param input {@link TokenStream} holding the input to be tokenized\n   * @param minGram the smallest n-gram to generate\n   * @param maxGram the largest n-gram to generate\n   */\n  public NGramTokenFilter(Version version, TokenStream input, int minGram, int maxGram) {\n    super(new CodepointCountFilter(version, input, minGram, Integer.MAX_VALUE));\n    this.version = version;\n    this.charUtils = version.onOrAfter(Version.LUCENE_4_4)\n        ? CharacterUtils.getInstance(version)\n        : CharacterUtils.getJava4Instance();\n    if (minGram < 1) {\n      throw new IllegalArgumentException(\"minGram must be greater than zero\");\n    }\n    if (minGram > maxGram) {\n      throw new IllegalArgumentException(\"minGram must not be greater than maxGram\");\n    }\n    this.minGram = minGram;\n    this.maxGram = maxGram;\n    if (version.onOrAfter(Version.LUCENE_4_4)) {\n      posIncAtt = addAttribute(PositionIncrementAttribute.class);\n      posLenAtt = addAttribute(PositionLengthAttribute.class);\n    } else {\n      posIncAtt = new PositionIncrementAttribute() {\n        @Override\n        public void setPositionIncrement(int positionIncrement) {}\n        @Override\n        public int getPositionIncrement() {\n          return 0;\n        }\n      };\n      posLenAtt = new PositionLengthAttribute() {\n        @Override\n        public void setPositionLength(int positionLength) {}        \n        @Override\n        public int getPositionLength() {\n          return 0;\n        }\n      };\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cdab62f058ea765dd33deb05b4f19b7d626c801","date":1406803479,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/ngram/NGramTokenFilter#NGramTokenFilter(Version,TokenStream,int,int).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/ngram/NGramTokenFilter#NGramTokenFilter(Version,TokenStream,int,int).mjava","sourceNew":"  /**\n   * Creates NGramTokenFilter with given min and max n-grams.\n   * @param version Lucene version to enable correct position increments.\n   *                See <a href=\"#version\">above</a> for details.\n   * @param input {@link TokenStream} holding the input to be tokenized\n   * @param minGram the smallest n-gram to generate\n   * @param maxGram the largest n-gram to generate\n   */\n  public NGramTokenFilter(Version version, TokenStream input, int minGram, int maxGram) {\n    super(new CodepointCountFilter(version, input, minGram, Integer.MAX_VALUE));\n    this.version = version;\n    this.charUtils = version.onOrAfter(Version.LUCENE_4_4)\n        ? CharacterUtils.getInstance(version)\n        : CharacterUtils.getJava4Instance();\n    if (minGram < 1) {\n      throw new IllegalArgumentException(\"minGram must be greater than zero\");\n    }\n    if (minGram > maxGram) {\n      throw new IllegalArgumentException(\"minGram must not be greater than maxGram\");\n    }\n    this.minGram = minGram;\n    this.maxGram = maxGram;\n    if (version.onOrAfter(Version.LUCENE_4_4)) {\n      posIncAtt = addAttribute(PositionIncrementAttribute.class);\n      posLenAtt = addAttribute(PositionLengthAttribute.class);\n    } else {\n      posIncAtt = new PositionIncrementAttribute() {\n        @Override\n        public void setPositionIncrement(int positionIncrement) {}\n        @Override\n        public int getPositionIncrement() {\n          return 0;\n        }\n      };\n      posLenAtt = new PositionLengthAttribute() {\n        @Override\n        public void setPositionLength(int positionLength) {}        \n        @Override\n        public int getPositionLength() {\n          return 0;\n        }\n      };\n    }\n  }\n\n","sourceOld":"  /**\n   * Creates NGramTokenFilter with given min and max n-grams.\n   * @param version Lucene version to enable correct position increments.\n   *                See <a href=\"#version\">above</a> for details.\n   * @param input {@link TokenStream} holding the input to be tokenized\n   * @param minGram the smallest n-gram to generate\n   * @param maxGram the largest n-gram to generate\n   */\n  public NGramTokenFilter(Version version, TokenStream input, int minGram, int maxGram) {\n    super(new CodepointCountFilter(input, minGram, Integer.MAX_VALUE));\n    this.version = version;\n    this.charUtils = version.onOrAfter(Version.LUCENE_4_4)\n        ? CharacterUtils.getInstance()\n        : CharacterUtils.getJava4Instance();\n    if (minGram < 1) {\n      throw new IllegalArgumentException(\"minGram must be greater than zero\");\n    }\n    if (minGram > maxGram) {\n      throw new IllegalArgumentException(\"minGram must not be greater than maxGram\");\n    }\n    this.minGram = minGram;\n    this.maxGram = maxGram;\n    if (version.onOrAfter(Version.LUCENE_4_4)) {\n      posIncAtt = addAttribute(PositionIncrementAttribute.class);\n      posLenAtt = addAttribute(PositionLengthAttribute.class);\n    } else {\n      posIncAtt = new PositionIncrementAttribute() {\n        @Override\n        public void setPositionIncrement(int positionIncrement) {}\n        @Override\n        public int getPositionIncrement() {\n          return 0;\n        }\n      };\n      posLenAtt = new PositionLengthAttribute() {\n        @Override\n        public void setPositionLength(int positionLength) {}        \n        @Override\n        public int getPositionLength() {\n          return 0;\n        }\n      };\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"379db3ad24c4f0214f30a122265a6d6be003a99d","date":1407537768,"type":5,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/ngram/NGramTokenFilter#NGramTokenFilter(TokenStream,int,int).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/ngram/NGramTokenFilter#NGramTokenFilter(Version,TokenStream,int,int).mjava","sourceNew":"  /**\n   * Creates NGramTokenFilter with given min and max n-grams.\n   * @param input {@link TokenStream} holding the input to be tokenized\n   * @param minGram the smallest n-gram to generate\n   * @param maxGram the largest n-gram to generate\n   */\n  public NGramTokenFilter(TokenStream input, int minGram, int maxGram) {\n    super(new CodepointCountFilter(input, minGram, Integer.MAX_VALUE));\n    this.charUtils = CharacterUtils.getInstance();\n    if (minGram < 1) {\n      throw new IllegalArgumentException(\"minGram must be greater than zero\");\n    }\n    if (minGram > maxGram) {\n      throw new IllegalArgumentException(\"minGram must not be greater than maxGram\");\n    }\n    this.minGram = minGram;\n    this.maxGram = maxGram;\n\n    posIncAtt = addAttribute(PositionIncrementAttribute.class);\n    posLenAtt = addAttribute(PositionLengthAttribute.class);\n  }\n\n","sourceOld":"  /**\n   * Creates NGramTokenFilter with given min and max n-grams.\n   * @param version Lucene version to enable correct position increments.\n   *                See <a href=\"#version\">above</a> for details.\n   * @param input {@link TokenStream} holding the input to be tokenized\n   * @param minGram the smallest n-gram to generate\n   * @param maxGram the largest n-gram to generate\n   */\n  public NGramTokenFilter(Version version, TokenStream input, int minGram, int maxGram) {\n    super(new CodepointCountFilter(version, input, minGram, Integer.MAX_VALUE));\n    this.version = version;\n    this.charUtils = version.onOrAfter(Version.LUCENE_4_4)\n        ? CharacterUtils.getInstance(version)\n        : CharacterUtils.getJava4Instance();\n    if (minGram < 1) {\n      throw new IllegalArgumentException(\"minGram must be greater than zero\");\n    }\n    if (minGram > maxGram) {\n      throw new IllegalArgumentException(\"minGram must not be greater than maxGram\");\n    }\n    this.minGram = minGram;\n    this.maxGram = maxGram;\n    if (version.onOrAfter(Version.LUCENE_4_4)) {\n      posIncAtt = addAttribute(PositionIncrementAttribute.class);\n      posLenAtt = addAttribute(PositionLengthAttribute.class);\n    } else {\n      posIncAtt = new PositionIncrementAttribute() {\n        @Override\n        public void setPositionIncrement(int positionIncrement) {}\n        @Override\n        public int getPositionIncrement() {\n          return 0;\n        }\n      };\n      posLenAtt = new PositionLengthAttribute() {\n        @Override\n        public void setPositionLength(int positionLength) {}        \n        @Override\n        public int getPositionLength() {\n          return 0;\n        }\n      };\n    }\n  }\n\n","bugFix":null,"bugIntro":["8a255765a5625ff80fba75863de5a16ea392015e","bbbdd19493fa8ae4bdac9205ae34e7387f08f304"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"ff4227bb146f97aabae888091c19e48c88dbb0db":["dd330c9d05eacbd6e952fe0dea852e7ae037eb50"],"bd095de1c7ac6b6ab3a330b5fbe8cb37e4f34704":["eafa8c5eabc3dacd34680054e6a33bda024080ac"],"379db3ad24c4f0214f30a122265a6d6be003a99d":["5cdab62f058ea765dd33deb05b4f19b7d626c801"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"eafa8c5eabc3dacd34680054e6a33bda024080ac":["4c807c4005aae1acaf5cebc9af40883985fb89a8"],"dd330c9d05eacbd6e952fe0dea852e7ae037eb50":["9fb2c11bd0a5a7bef41cee10608d4429e976c528"],"4c807c4005aae1acaf5cebc9af40883985fb89a8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5cdab62f058ea765dd33deb05b4f19b7d626c801":["ff4227bb146f97aabae888091c19e48c88dbb0db"],"9fb2c11bd0a5a7bef41cee10608d4429e976c528":["bd095de1c7ac6b6ab3a330b5fbe8cb37e4f34704"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["379db3ad24c4f0214f30a122265a6d6be003a99d"]},"commit2Childs":{"ff4227bb146f97aabae888091c19e48c88dbb0db":["5cdab62f058ea765dd33deb05b4f19b7d626c801"],"bd095de1c7ac6b6ab3a330b5fbe8cb37e4f34704":["9fb2c11bd0a5a7bef41cee10608d4429e976c528"],"379db3ad24c4f0214f30a122265a6d6be003a99d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4c807c4005aae1acaf5cebc9af40883985fb89a8"],"eafa8c5eabc3dacd34680054e6a33bda024080ac":["bd095de1c7ac6b6ab3a330b5fbe8cb37e4f34704"],"dd330c9d05eacbd6e952fe0dea852e7ae037eb50":["ff4227bb146f97aabae888091c19e48c88dbb0db"],"4c807c4005aae1acaf5cebc9af40883985fb89a8":["eafa8c5eabc3dacd34680054e6a33bda024080ac"],"5cdab62f058ea765dd33deb05b4f19b7d626c801":["379db3ad24c4f0214f30a122265a6d6be003a99d"],"9fb2c11bd0a5a7bef41cee10608d4429e976c528":["dd330c9d05eacbd6e952fe0dea852e7ae037eb50"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}