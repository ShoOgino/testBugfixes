{"path":"lucene/core/src/java/org/apache/lucene/util/CommandLineUtil#newFSDirectory(String,Path).mjava","commits":[{"id":"f4abec28b874149a7223e32cc7a01704c27790de","date":1410644789,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/CommandLineUtil#newFSDirectory(String,Path).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/CommandLineUtil#newFSDirectory(String,File).mjava","sourceNew":"  /**\n   * Creates a specific FSDirectory instance starting from its class name\n   * @param clazzName The name of the FSDirectory class to load\n   * @param path The path to be used as parameter constructor\n   * @return the new FSDirectory instance\n   */\n  public static FSDirectory newFSDirectory(String clazzName, Path path) {\n    try {\n      final Class<? extends FSDirectory> clazz = loadFSDirectoryClass(clazzName);\n      return newFSDirectory(clazz, path);\n    } catch (ClassNotFoundException e) {\n      throw new IllegalArgumentException(FSDirectory.class.getSimpleName()\n          + \" implementation not found: \" + clazzName, e);\n    } catch (ClassCastException e) {\n      throw new IllegalArgumentException(clazzName + \" is not a \" + FSDirectory.class.getSimpleName()\n          + \" implementation\", e);\n    } catch (NoSuchMethodException e) {\n      throw new IllegalArgumentException(clazzName + \" constructor with \"\n          + Path.class.getSimpleName() + \" as parameter not found\", e);\n    } catch (Exception e) {\n      throw new IllegalArgumentException(\"Error creating \" + clazzName + \" instance\", e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Creates a specific FSDirectory instance starting from its class name\n   * @param clazzName The name of the FSDirectory class to load\n   * @param file The file to be used as parameter constructor\n   * @return the new FSDirectory instance\n   */\n  public static FSDirectory newFSDirectory(String clazzName, File file) {\n    try {\n      final Class<? extends FSDirectory> clazz = loadFSDirectoryClass(clazzName);\n      return newFSDirectory(clazz, file);\n    } catch (ClassNotFoundException e) {\n      throw new IllegalArgumentException(FSDirectory.class.getSimpleName()\n          + \" implementation not found: \" + clazzName, e);\n    } catch (ClassCastException e) {\n      throw new IllegalArgumentException(clazzName + \" is not a \" + FSDirectory.class.getSimpleName()\n          + \" implementation\", e);\n    } catch (NoSuchMethodException e) {\n      throw new IllegalArgumentException(clazzName + \" constructor with \"\n          + File.class.getSimpleName() + \" as parameter not found\", e);\n    } catch (Exception e) {\n      throw new IllegalArgumentException(\"Error creating \" + clazzName + \" instance\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"285cdc737de75b7cc7c284a156b20214deb67bca","date":1415535483,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/CommandLineUtil#newFSDirectory(String,Path).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/CommandLineUtil#newFSDirectory(String,Path).mjava","sourceNew":"  /**\n   * Creates a specific FSDirectory instance starting from its class name, using the default lock factory\n   * @param clazzName The name of the FSDirectory class to load\n   * @param path The path to be used as parameter constructor\n   * @return the new FSDirectory instance\n   */\n  public static FSDirectory newFSDirectory(String clazzName, Path path) {\n    return newFSDirectory(clazzName, path, FSLockFactory.getDefault());\n  }\n\n","sourceOld":"  /**\n   * Creates a specific FSDirectory instance starting from its class name\n   * @param clazzName The name of the FSDirectory class to load\n   * @param path The path to be used as parameter constructor\n   * @return the new FSDirectory instance\n   */\n  public static FSDirectory newFSDirectory(String clazzName, Path path) {\n    try {\n      final Class<? extends FSDirectory> clazz = loadFSDirectoryClass(clazzName);\n      return newFSDirectory(clazz, path);\n    } catch (ClassNotFoundException e) {\n      throw new IllegalArgumentException(FSDirectory.class.getSimpleName()\n          + \" implementation not found: \" + clazzName, e);\n    } catch (ClassCastException e) {\n      throw new IllegalArgumentException(clazzName + \" is not a \" + FSDirectory.class.getSimpleName()\n          + \" implementation\", e);\n    } catch (NoSuchMethodException e) {\n      throw new IllegalArgumentException(clazzName + \" constructor with \"\n          + Path.class.getSimpleName() + \" as parameter not found\", e);\n    } catch (Exception e) {\n      throw new IllegalArgumentException(\"Error creating \" + clazzName + \" instance\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"285cdc737de75b7cc7c284a156b20214deb67bca":["f4abec28b874149a7223e32cc7a01704c27790de"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f4abec28b874149a7223e32cc7a01704c27790de":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["285cdc737de75b7cc7c284a156b20214deb67bca"]},"commit2Childs":{"285cdc737de75b7cc7c284a156b20214deb67bca":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f4abec28b874149a7223e32cc7a01704c27790de"],"f4abec28b874149a7223e32cc7a01704c27790de":["285cdc737de75b7cc7c284a156b20214deb67bca"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}