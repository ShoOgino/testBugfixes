{"path":"src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight#scorer(IndexReader,boolean,boolean).mjava","commits":[{"id":"052fac7830290bd38a04cddee1a121ee07656b56","date":1245780702,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight#scorer(IndexReader,boolean,boolean).mjava","pathOld":"/dev/null","sourceNew":"    public Scorer scorer(IndexReader reader, boolean scoreDocsInOrder, boolean topScorer)\n        throws IOException {\n      List required = new ArrayList();\n      List prohibited = new ArrayList();\n      List optional = new ArrayList();\n      for (Iterator wIter = weights.iterator(), cIter = clauses.iterator(); wIter.hasNext();) {\n        QueryWeight w = (QueryWeight) wIter.next();\n        BooleanClause c = (BooleanClause) cIter.next();\n        Scorer subScorer = w.scorer(reader, true, false);\n        if (subScorer == null) {\n          return null;\n        } else if (c.isRequired()) {\n          required.add(subScorer);\n        } else if (c.isProhibited()) {\n          prohibited.add(subScorer);\n        } else {\n          optional.add(subScorer);\n        }\n      }\n      \n      // Check if we can return a BooleanScorer\n      scoreDocsInOrder |= !allowDocsOutOfOrder; // until it is removed, factor in the static setting.\n      if (!scoreDocsInOrder && topScorer && required.size() == 0 && prohibited.size() < 32) {\n        return new BooleanScorer(similarity, minNrShouldMatch, optional, prohibited);\n      }\n      \n      // Return a BooleanScorer2\n      return new BooleanScorer2(similarity, minNrShouldMatch, required, prohibited, optional);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a9900b2c2df4909dc735d4042e21e453057db47","date":1246040088,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight#scorer(IndexReader,boolean,boolean).mjava","pathOld":"src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight#scorer(IndexReader,boolean,boolean).mjava","sourceNew":"    public Scorer scorer(IndexReader reader, boolean scoreDocsInOrder, boolean topScorer)\n        throws IOException {\n      List required = new ArrayList();\n      List prohibited = new ArrayList();\n      List optional = new ArrayList();\n      for (Iterator wIter = weights.iterator(), cIter = clauses.iterator(); wIter.hasNext();) {\n        QueryWeight w = (QueryWeight) wIter.next();\n        BooleanClause c = (BooleanClause) cIter.next();\n        Scorer subScorer = w.scorer(reader, true, false);\n        if (subScorer == null) {\n          if (c.isRequired()) {\n            return null;\n          }\n        } else if (c.isRequired()) {\n          required.add(subScorer);\n        } else if (c.isProhibited()) {\n          prohibited.add(subScorer);\n        } else {\n          optional.add(subScorer);\n        }\n      }\n      \n      // Check if we can return a BooleanScorer\n      scoreDocsInOrder |= !allowDocsOutOfOrder; // until it is removed, factor in the static setting.\n      if (!scoreDocsInOrder && topScorer && required.size() == 0 && prohibited.size() < 32) {\n        return new BooleanScorer(similarity, minNrShouldMatch, optional, prohibited);\n      }\n      \n      // Return a BooleanScorer2\n      return new BooleanScorer2(similarity, minNrShouldMatch, required, prohibited, optional);\n    }\n\n","sourceOld":"    public Scorer scorer(IndexReader reader, boolean scoreDocsInOrder, boolean topScorer)\n        throws IOException {\n      List required = new ArrayList();\n      List prohibited = new ArrayList();\n      List optional = new ArrayList();\n      for (Iterator wIter = weights.iterator(), cIter = clauses.iterator(); wIter.hasNext();) {\n        QueryWeight w = (QueryWeight) wIter.next();\n        BooleanClause c = (BooleanClause) cIter.next();\n        Scorer subScorer = w.scorer(reader, true, false);\n        if (subScorer == null) {\n          return null;\n        } else if (c.isRequired()) {\n          required.add(subScorer);\n        } else if (c.isProhibited()) {\n          prohibited.add(subScorer);\n        } else {\n          optional.add(subScorer);\n        }\n      }\n      \n      // Check if we can return a BooleanScorer\n      scoreDocsInOrder |= !allowDocsOutOfOrder; // until it is removed, factor in the static setting.\n      if (!scoreDocsInOrder && topScorer && required.size() == 0 && prohibited.size() < 32) {\n        return new BooleanScorer(similarity, minNrShouldMatch, optional, prohibited);\n      }\n      \n      // Return a BooleanScorer2\n      return new BooleanScorer2(similarity, minNrShouldMatch, required, prohibited, optional);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8d6c98c690b593cea727f68742684c979ead1a0a","date":1248688202,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight#scorer(IndexReader,boolean,boolean).mjava","pathOld":"src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight#scorer(IndexReader,boolean,boolean).mjava","sourceNew":"    public Scorer scorer(IndexReader reader, boolean scoreDocsInOrder, boolean topScorer)\n        throws IOException {\n      List required = new ArrayList();\n      List prohibited = new ArrayList();\n      List optional = new ArrayList();\n      for (Iterator wIter = weights.iterator(), cIter = clauses.iterator(); wIter.hasNext();) {\n        QueryWeight w = (QueryWeight) wIter.next();\n        BooleanClause c = (BooleanClause) cIter.next();\n        Scorer subScorer = w.scorer(reader, true, false);\n        if (subScorer == null) {\n          if (c.isRequired()) {\n            return null;\n          }\n        } else if (c.isRequired()) {\n          required.add(subScorer);\n        } else if (c.isProhibited()) {\n          prohibited.add(subScorer);\n        } else {\n          optional.add(subScorer);\n        }\n      }\n      \n      // Check if we can return a BooleanScorer\n      scoreDocsInOrder |= !allowDocsOutOfOrder; // until it is removed, factor in the static setting.\n      if (!scoreDocsInOrder && topScorer && required.size() == 0 && prohibited.size() < 32) {\n        return new BooleanScorer(similarity, minNrShouldMatch, optional, prohibited);\n      }\n      \n      if (required.size() == 0 && optional.size() == 0) {\n        // no required and optional clauses.\n        return null;\n      } else if (optional.size() < minNrShouldMatch) {\n        // either >1 req scorer, or there are 0 req scorers and at least 1\n        // optional scorer. Therefore if there are not enough optional scorers\n        // no documents will be matched by the query\n        return null;\n      }\n      \n      // Return a BooleanScorer2\n      return new BooleanScorer2(similarity, minNrShouldMatch, required, prohibited, optional);\n    }\n\n","sourceOld":"    public Scorer scorer(IndexReader reader, boolean scoreDocsInOrder, boolean topScorer)\n        throws IOException {\n      List required = new ArrayList();\n      List prohibited = new ArrayList();\n      List optional = new ArrayList();\n      for (Iterator wIter = weights.iterator(), cIter = clauses.iterator(); wIter.hasNext();) {\n        QueryWeight w = (QueryWeight) wIter.next();\n        BooleanClause c = (BooleanClause) cIter.next();\n        Scorer subScorer = w.scorer(reader, true, false);\n        if (subScorer == null) {\n          if (c.isRequired()) {\n            return null;\n          }\n        } else if (c.isRequired()) {\n          required.add(subScorer);\n        } else if (c.isProhibited()) {\n          prohibited.add(subScorer);\n        } else {\n          optional.add(subScorer);\n        }\n      }\n      \n      // Check if we can return a BooleanScorer\n      scoreDocsInOrder |= !allowDocsOutOfOrder; // until it is removed, factor in the static setting.\n      if (!scoreDocsInOrder && topScorer && required.size() == 0 && prohibited.size() < 32) {\n        return new BooleanScorer(similarity, minNrShouldMatch, optional, prohibited);\n      }\n      \n      // Return a BooleanScorer2\n      return new BooleanScorer2(similarity, minNrShouldMatch, required, prohibited, optional);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe941135bdfc28c81e20b4d21422f8726af34925","date":1250040150,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight#scorer(IndexReader,boolean,boolean).mjava","pathOld":"src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight#scorer(IndexReader,boolean,boolean).mjava","sourceNew":"    public Scorer scorer(IndexReader reader, boolean scoreDocsInOrder, boolean topScorer)\n        throws IOException {\n      List required = new ArrayList();\n      List prohibited = new ArrayList();\n      List optional = new ArrayList();\n      for (Iterator wIter = weights.iterator(), cIter = clauses.iterator(); wIter.hasNext();) {\n        Weight w = (Weight) wIter.next();\n        BooleanClause c = (BooleanClause) cIter.next();\n        Scorer subScorer = w.scorer(reader, true, false);\n        if (subScorer == null) {\n          if (c.isRequired()) {\n            return null;\n          }\n        } else if (c.isRequired()) {\n          required.add(subScorer);\n        } else if (c.isProhibited()) {\n          prohibited.add(subScorer);\n        } else {\n          optional.add(subScorer);\n        }\n      }\n      \n      // Check if we can return a BooleanScorer\n      scoreDocsInOrder |= !allowDocsOutOfOrder; // until it is removed, factor in the static setting.\n      if (!scoreDocsInOrder && topScorer && required.size() == 0 && prohibited.size() < 32) {\n        return new BooleanScorer(similarity, minNrShouldMatch, optional, prohibited);\n      }\n      \n      if (required.size() == 0 && optional.size() == 0) {\n        // no required and optional clauses.\n        return null;\n      } else if (optional.size() < minNrShouldMatch) {\n        // either >1 req scorer, or there are 0 req scorers and at least 1\n        // optional scorer. Therefore if there are not enough optional scorers\n        // no documents will be matched by the query\n        return null;\n      }\n      \n      // Return a BooleanScorer2\n      return new BooleanScorer2(similarity, minNrShouldMatch, required, prohibited, optional);\n    }\n\n","sourceOld":"    public Scorer scorer(IndexReader reader, boolean scoreDocsInOrder, boolean topScorer)\n        throws IOException {\n      List required = new ArrayList();\n      List prohibited = new ArrayList();\n      List optional = new ArrayList();\n      for (Iterator wIter = weights.iterator(), cIter = clauses.iterator(); wIter.hasNext();) {\n        QueryWeight w = (QueryWeight) wIter.next();\n        BooleanClause c = (BooleanClause) cIter.next();\n        Scorer subScorer = w.scorer(reader, true, false);\n        if (subScorer == null) {\n          if (c.isRequired()) {\n            return null;\n          }\n        } else if (c.isRequired()) {\n          required.add(subScorer);\n        } else if (c.isProhibited()) {\n          prohibited.add(subScorer);\n        } else {\n          optional.add(subScorer);\n        }\n      }\n      \n      // Check if we can return a BooleanScorer\n      scoreDocsInOrder |= !allowDocsOutOfOrder; // until it is removed, factor in the static setting.\n      if (!scoreDocsInOrder && topScorer && required.size() == 0 && prohibited.size() < 32) {\n        return new BooleanScorer(similarity, minNrShouldMatch, optional, prohibited);\n      }\n      \n      if (required.size() == 0 && optional.size() == 0) {\n        // no required and optional clauses.\n        return null;\n      } else if (optional.size() < minNrShouldMatch) {\n        // either >1 req scorer, or there are 0 req scorers and at least 1\n        // optional scorer. Therefore if there are not enough optional scorers\n        // no documents will be matched by the query\n        return null;\n      }\n      \n      // Return a BooleanScorer2\n      return new BooleanScorer2(similarity, minNrShouldMatch, required, prohibited, optional);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"131a9e895609b4da33662dc087e0bc6303e1e29c","date":1255458397,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight#scorer(IndexReader,boolean,boolean).mjava","pathOld":"src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight#scorer(IndexReader,boolean,boolean).mjava","sourceNew":"    public Scorer scorer(IndexReader reader, boolean scoreDocsInOrder, boolean topScorer)\n        throws IOException {\n      List required = new ArrayList();\n      List prohibited = new ArrayList();\n      List optional = new ArrayList();\n      for (Iterator wIter = weights.iterator(), cIter = clauses.iterator(); wIter.hasNext();) {\n        Weight w = (Weight) wIter.next();\n        BooleanClause c = (BooleanClause) cIter.next();\n        Scorer subScorer = w.scorer(reader, true, false);\n        if (subScorer == null) {\n          if (c.isRequired()) {\n            return null;\n          }\n        } else if (c.isRequired()) {\n          required.add(subScorer);\n        } else if (c.isProhibited()) {\n          prohibited.add(subScorer);\n        } else {\n          optional.add(subScorer);\n        }\n      }\n      \n      // Check if we can return a BooleanScorer\n      if (!scoreDocsInOrder && topScorer && required.size() == 0 && prohibited.size() < 32) {\n        return new BooleanScorer(similarity, minNrShouldMatch, optional, prohibited);\n      }\n      \n      if (required.size() == 0 && optional.size() == 0) {\n        // no required and optional clauses.\n        return null;\n      } else if (optional.size() < minNrShouldMatch) {\n        // either >1 req scorer, or there are 0 req scorers and at least 1\n        // optional scorer. Therefore if there are not enough optional scorers\n        // no documents will be matched by the query\n        return null;\n      }\n      \n      // Return a BooleanScorer2\n      return new BooleanScorer2(similarity, minNrShouldMatch, required, prohibited, optional);\n    }\n\n","sourceOld":"    public Scorer scorer(IndexReader reader, boolean scoreDocsInOrder, boolean topScorer)\n        throws IOException {\n      List required = new ArrayList();\n      List prohibited = new ArrayList();\n      List optional = new ArrayList();\n      for (Iterator wIter = weights.iterator(), cIter = clauses.iterator(); wIter.hasNext();) {\n        Weight w = (Weight) wIter.next();\n        BooleanClause c = (BooleanClause) cIter.next();\n        Scorer subScorer = w.scorer(reader, true, false);\n        if (subScorer == null) {\n          if (c.isRequired()) {\n            return null;\n          }\n        } else if (c.isRequired()) {\n          required.add(subScorer);\n        } else if (c.isProhibited()) {\n          prohibited.add(subScorer);\n        } else {\n          optional.add(subScorer);\n        }\n      }\n      \n      // Check if we can return a BooleanScorer\n      scoreDocsInOrder |= !allowDocsOutOfOrder; // until it is removed, factor in the static setting.\n      if (!scoreDocsInOrder && topScorer && required.size() == 0 && prohibited.size() < 32) {\n        return new BooleanScorer(similarity, minNrShouldMatch, optional, prohibited);\n      }\n      \n      if (required.size() == 0 && optional.size() == 0) {\n        // no required and optional clauses.\n        return null;\n      } else if (optional.size() < minNrShouldMatch) {\n        // either >1 req scorer, or there are 0 req scorers and at least 1\n        // optional scorer. Therefore if there are not enough optional scorers\n        // no documents will be matched by the query\n        return null;\n      }\n      \n      // Return a BooleanScorer2\n      return new BooleanScorer2(similarity, minNrShouldMatch, required, prohibited, optional);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b4e40ecf6eb9bff831572fe33a2758f9ef1e0dcc","date":1255773182,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight#scorer(IndexReader,boolean,boolean).mjava","pathOld":"src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight#scorer(IndexReader,boolean,boolean).mjava","sourceNew":"    @Override\n    public Scorer scorer(IndexReader reader, boolean scoreDocsInOrder, boolean topScorer)\n        throws IOException {\n      List<Scorer> required = new ArrayList<Scorer>();\n      List<Scorer> prohibited = new ArrayList<Scorer>();\n      List<Scorer> optional = new ArrayList<Scorer>();\n      Iterator<BooleanClause> cIter = clauses.iterator();\n      for (Weight w  : weights) {\n        BooleanClause c =  cIter.next();\n        Scorer subScorer = w.scorer(reader, true, false);\n        if (subScorer == null) {\n          if (c.isRequired()) {\n            return null;\n          }\n        } else if (c.isRequired()) {\n          required.add(subScorer);\n        } else if (c.isProhibited()) {\n          prohibited.add(subScorer);\n        } else {\n          optional.add(subScorer);\n        }\n      }\n      \n      // Check if we can return a BooleanScorer\n      if (!scoreDocsInOrder && topScorer && required.size() == 0 && prohibited.size() < 32) {\n        return new BooleanScorer(similarity, minNrShouldMatch, optional, prohibited);\n      }\n      \n      if (required.size() == 0 && optional.size() == 0) {\n        // no required and optional clauses.\n        return null;\n      } else if (optional.size() < minNrShouldMatch) {\n        // either >1 req scorer, or there are 0 req scorers and at least 1\n        // optional scorer. Therefore if there are not enough optional scorers\n        // no documents will be matched by the query\n        return null;\n      }\n      \n      // Return a BooleanScorer2\n      return new BooleanScorer2(similarity, minNrShouldMatch, required, prohibited, optional);\n    }\n\n","sourceOld":"    public Scorer scorer(IndexReader reader, boolean scoreDocsInOrder, boolean topScorer)\n        throws IOException {\n      List required = new ArrayList();\n      List prohibited = new ArrayList();\n      List optional = new ArrayList();\n      for (Iterator wIter = weights.iterator(), cIter = clauses.iterator(); wIter.hasNext();) {\n        Weight w = (Weight) wIter.next();\n        BooleanClause c = (BooleanClause) cIter.next();\n        Scorer subScorer = w.scorer(reader, true, false);\n        if (subScorer == null) {\n          if (c.isRequired()) {\n            return null;\n          }\n        } else if (c.isRequired()) {\n          required.add(subScorer);\n        } else if (c.isProhibited()) {\n          prohibited.add(subScorer);\n        } else {\n          optional.add(subScorer);\n        }\n      }\n      \n      // Check if we can return a BooleanScorer\n      if (!scoreDocsInOrder && topScorer && required.size() == 0 && prohibited.size() < 32) {\n        return new BooleanScorer(similarity, minNrShouldMatch, optional, prohibited);\n      }\n      \n      if (required.size() == 0 && optional.size() == 0) {\n        // no required and optional clauses.\n        return null;\n      } else if (optional.size() < minNrShouldMatch) {\n        // either >1 req scorer, or there are 0 req scorers and at least 1\n        // optional scorer. Therefore if there are not enough optional scorers\n        // no documents will be matched by the query\n        return null;\n      }\n      \n      // Return a BooleanScorer2\n      return new BooleanScorer2(similarity, minNrShouldMatch, required, prohibited, optional);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight#scorer(IndexReader,boolean,boolean).mjava","pathOld":"src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight#scorer(IndexReader,boolean,boolean).mjava","sourceNew":"    @Override\n    public Scorer scorer(IndexReader reader, boolean scoreDocsInOrder, boolean topScorer)\n        throws IOException {\n      List<Scorer> required = new ArrayList<Scorer>();\n      List<Scorer> prohibited = new ArrayList<Scorer>();\n      List<Scorer> optional = new ArrayList<Scorer>();\n      Iterator<BooleanClause> cIter = clauses.iterator();\n      for (Weight w  : weights) {\n        BooleanClause c =  cIter.next();\n        Scorer subScorer = w.scorer(reader, true, false);\n        if (subScorer == null) {\n          if (c.isRequired()) {\n            return null;\n          }\n        } else if (c.isRequired()) {\n          required.add(subScorer);\n        } else if (c.isProhibited()) {\n          prohibited.add(subScorer);\n        } else {\n          optional.add(subScorer);\n        }\n      }\n      \n      // Check if we can return a BooleanScorer\n      if (!scoreDocsInOrder && topScorer && required.size() == 0 && prohibited.size() < 32) {\n        return new BooleanScorer(similarity, minNrShouldMatch, optional, prohibited);\n      }\n      \n      if (required.size() == 0 && optional.size() == 0) {\n        // no required and optional clauses.\n        return null;\n      } else if (optional.size() < minNrShouldMatch) {\n        // either >1 req scorer, or there are 0 req scorers and at least 1\n        // optional scorer. Therefore if there are not enough optional scorers\n        // no documents will be matched by the query\n        return null;\n      }\n      \n      // Return a BooleanScorer2\n      return new BooleanScorer2(similarity, minNrShouldMatch, required, prohibited, optional);\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(IndexReader reader, boolean scoreDocsInOrder, boolean topScorer)\n        throws IOException {\n      List<Scorer> required = new ArrayList<Scorer>();\n      List<Scorer> prohibited = new ArrayList<Scorer>();\n      List<Scorer> optional = new ArrayList<Scorer>();\n      Iterator<BooleanClause> cIter = clauses.iterator();\n      for (Weight w  : weights) {\n        BooleanClause c =  cIter.next();\n        Scorer subScorer = w.scorer(reader, true, false);\n        if (subScorer == null) {\n          if (c.isRequired()) {\n            return null;\n          }\n        } else if (c.isRequired()) {\n          required.add(subScorer);\n        } else if (c.isProhibited()) {\n          prohibited.add(subScorer);\n        } else {\n          optional.add(subScorer);\n        }\n      }\n      \n      // Check if we can return a BooleanScorer\n      if (!scoreDocsInOrder && topScorer && required.size() == 0 && prohibited.size() < 32) {\n        return new BooleanScorer(similarity, minNrShouldMatch, optional, prohibited);\n      }\n      \n      if (required.size() == 0 && optional.size() == 0) {\n        // no required and optional clauses.\n        return null;\n      } else if (optional.size() < minNrShouldMatch) {\n        // either >1 req scorer, or there are 0 req scorers and at least 1\n        // optional scorer. Therefore if there are not enough optional scorers\n        // no documents will be matched by the query\n        return null;\n      }\n      \n      // Return a BooleanScorer2\n      return new BooleanScorer2(similarity, minNrShouldMatch, required, prohibited, optional);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b4e40ecf6eb9bff831572fe33a2758f9ef1e0dcc":["131a9e895609b4da33662dc087e0bc6303e1e29c"],"0a9900b2c2df4909dc735d4042e21e453057db47":["052fac7830290bd38a04cddee1a121ee07656b56"],"131a9e895609b4da33662dc087e0bc6303e1e29c":["fe941135bdfc28c81e20b4d21422f8726af34925"],"fe941135bdfc28c81e20b4d21422f8726af34925":["8d6c98c690b593cea727f68742684c979ead1a0a"],"8d6c98c690b593cea727f68742684c979ead1a0a":["0a9900b2c2df4909dc735d4042e21e453057db47"],"052fac7830290bd38a04cddee1a121ee07656b56":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["b4e40ecf6eb9bff831572fe33a2758f9ef1e0dcc"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["052fac7830290bd38a04cddee1a121ee07656b56"],"b4e40ecf6eb9bff831572fe33a2758f9ef1e0dcc":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"0a9900b2c2df4909dc735d4042e21e453057db47":["8d6c98c690b593cea727f68742684c979ead1a0a"],"131a9e895609b4da33662dc087e0bc6303e1e29c":["b4e40ecf6eb9bff831572fe33a2758f9ef1e0dcc"],"fe941135bdfc28c81e20b4d21422f8726af34925":["131a9e895609b4da33662dc087e0bc6303e1e29c"],"8d6c98c690b593cea727f68742684c979ead1a0a":["fe941135bdfc28c81e20b4d21422f8726af34925"],"052fac7830290bd38a04cddee1a121ee07656b56":["0a9900b2c2df4909dc735d4042e21e453057db47"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}