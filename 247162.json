{"path":"lucene/suggest/src/java/org/apache/lucene/search/spell/SpellChecker#indexDictionary(Dictionary,IndexWriterConfig,boolean).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/spell/SpellChecker#indexDictionary(Dictionary,IndexWriterConfig,boolean).mjava","pathOld":"modules/suggest/src/java/org/apache/lucene/search/spell/SpellChecker#indexDictionary(Dictionary,IndexWriterConfig,boolean).mjava","sourceNew":"  /**\n   * Indexes the data from the given {@link Dictionary}.\n   * @param dict Dictionary to index\n   * @param config {@link IndexWriterConfig} to use\n   * @param fullMerge whether or not the spellcheck index should be fully merged\n   * @throws AlreadyClosedException if the Spellchecker is already closed\n   * @throws IOException\n   */\n  public final void indexDictionary(Dictionary dict, IndexWriterConfig config, boolean fullMerge) throws IOException {\n    synchronized (modifyCurrentIndexLock) {\n      ensureOpen();\n      final Directory dir = this.spellIndex;\n      final IndexWriter writer = new IndexWriter(dir, config);\n      IndexSearcher indexSearcher = obtainSearcher();\n      final List<TermsEnum> termsEnums = new ArrayList<TermsEnum>();\n\n      final IndexReader reader = searcher.getIndexReader();\n      if (reader.maxDoc() > 0) {\n        new ReaderUtil.Gather(reader) {\n          @Override\n          protected void add(int base, AtomicReader r) throws IOException {\n            Terms terms = r.terms(F_WORD);\n            if (terms != null)\n              termsEnums.add(terms.iterator(null));\n          }\n        }.run();\n      }\n      \n      boolean isEmpty = termsEnums.isEmpty();\n\n      try { \n        BytesRefIterator iter = dict.getWordsIterator();\n        BytesRef currentTerm;\n        \n        terms: while ((currentTerm = iter.next()) != null) {\n  \n          String word = currentTerm.utf8ToString();\n          int len = word.length();\n          if (len < 3) {\n            continue; // too short we bail but \"too long\" is fine...\n          }\n  \n          if (!isEmpty) {\n            for (TermsEnum te : termsEnums) {\n              if (te.seekExact(currentTerm, false)) {\n                continue terms;\n              }\n            }\n          }\n  \n          // ok index the word\n          Document doc = createDocument(word, getMin(len), getMax(len));\n          writer.addDocument(doc);\n        }\n      } finally {\n        releaseSearcher(indexSearcher);\n      }\n      if (fullMerge) {\n        writer.forceMerge(1);\n      }\n      // close writer\n      writer.close();\n      // TODO: this isn't that great, maybe in the future SpellChecker should take\n      // IWC in its ctor / keep its writer open?\n      \n      // also re-open the spell index to see our own changes when the next suggestion\n      // is fetched:\n      swapSearcher(dir);\n    }\n  }\n\n","sourceOld":"  /**\n   * Indexes the data from the given {@link Dictionary}.\n   * @param dict Dictionary to index\n   * @param config {@link IndexWriterConfig} to use\n   * @param fullMerge whether or not the spellcheck index should be fully merged\n   * @throws AlreadyClosedException if the Spellchecker is already closed\n   * @throws IOException\n   */\n  public final void indexDictionary(Dictionary dict, IndexWriterConfig config, boolean fullMerge) throws IOException {\n    synchronized (modifyCurrentIndexLock) {\n      ensureOpen();\n      final Directory dir = this.spellIndex;\n      final IndexWriter writer = new IndexWriter(dir, config);\n      IndexSearcher indexSearcher = obtainSearcher();\n      final List<TermsEnum> termsEnums = new ArrayList<TermsEnum>();\n\n      final IndexReader reader = searcher.getIndexReader();\n      if (reader.maxDoc() > 0) {\n        new ReaderUtil.Gather(reader) {\n          @Override\n          protected void add(int base, AtomicReader r) throws IOException {\n            Terms terms = r.terms(F_WORD);\n            if (terms != null)\n              termsEnums.add(terms.iterator(null));\n          }\n        }.run();\n      }\n      \n      boolean isEmpty = termsEnums.isEmpty();\n\n      try { \n        BytesRefIterator iter = dict.getWordsIterator();\n        BytesRef currentTerm;\n        \n        terms: while ((currentTerm = iter.next()) != null) {\n  \n          String word = currentTerm.utf8ToString();\n          int len = word.length();\n          if (len < 3) {\n            continue; // too short we bail but \"too long\" is fine...\n          }\n  \n          if (!isEmpty) {\n            for (TermsEnum te : termsEnums) {\n              if (te.seekExact(currentTerm, false)) {\n                continue terms;\n              }\n            }\n          }\n  \n          // ok index the word\n          Document doc = createDocument(word, getMin(len), getMax(len));\n          writer.addDocument(doc);\n        }\n      } finally {\n        releaseSearcher(indexSearcher);\n      }\n      if (fullMerge) {\n        writer.forceMerge(1);\n      }\n      // close writer\n      writer.close();\n      // TODO: this isn't that great, maybe in the future SpellChecker should take\n      // IWC in its ctor / keep its writer open?\n      \n      // also re-open the spell index to see our own changes when the next suggestion\n      // is fetched:\n      swapSearcher(dir);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c","date":1340090669,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/spell/SpellChecker#indexDictionary(Dictionary,IndexWriterConfig,boolean).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/spell/SpellChecker#indexDictionary(Dictionary,IndexWriterConfig,boolean).mjava","sourceNew":"  /**\n   * Indexes the data from the given {@link Dictionary}.\n   * @param dict Dictionary to index\n   * @param config {@link IndexWriterConfig} to use\n   * @param fullMerge whether or not the spellcheck index should be fully merged\n   * @throws AlreadyClosedException if the Spellchecker is already closed\n   * @throws IOException\n   */\n  public final void indexDictionary(Dictionary dict, IndexWriterConfig config, boolean fullMerge) throws IOException {\n    synchronized (modifyCurrentIndexLock) {\n      ensureOpen();\n      final Directory dir = this.spellIndex;\n      final IndexWriter writer = new IndexWriter(dir, config);\n      IndexSearcher indexSearcher = obtainSearcher();\n      final List<TermsEnum> termsEnums = new ArrayList<TermsEnum>();\n\n      final IndexReader reader = searcher.getIndexReader();\n      if (reader.maxDoc() > 0) {\n        for (final AtomicReaderContext ctx : reader.getTopReaderContext().leaves()) {\n          Terms terms = ctx.reader().terms(F_WORD);\n          if (terms != null)\n            termsEnums.add(terms.iterator(null));\n        }\n      }\n      \n      boolean isEmpty = termsEnums.isEmpty();\n\n      try { \n        BytesRefIterator iter = dict.getWordsIterator();\n        BytesRef currentTerm;\n        \n        terms: while ((currentTerm = iter.next()) != null) {\n  \n          String word = currentTerm.utf8ToString();\n          int len = word.length();\n          if (len < 3) {\n            continue; // too short we bail but \"too long\" is fine...\n          }\n  \n          if (!isEmpty) {\n            for (TermsEnum te : termsEnums) {\n              if (te.seekExact(currentTerm, false)) {\n                continue terms;\n              }\n            }\n          }\n  \n          // ok index the word\n          Document doc = createDocument(word, getMin(len), getMax(len));\n          writer.addDocument(doc);\n        }\n      } finally {\n        releaseSearcher(indexSearcher);\n      }\n      if (fullMerge) {\n        writer.forceMerge(1);\n      }\n      // close writer\n      writer.close();\n      // TODO: this isn't that great, maybe in the future SpellChecker should take\n      // IWC in its ctor / keep its writer open?\n      \n      // also re-open the spell index to see our own changes when the next suggestion\n      // is fetched:\n      swapSearcher(dir);\n    }\n  }\n\n","sourceOld":"  /**\n   * Indexes the data from the given {@link Dictionary}.\n   * @param dict Dictionary to index\n   * @param config {@link IndexWriterConfig} to use\n   * @param fullMerge whether or not the spellcheck index should be fully merged\n   * @throws AlreadyClosedException if the Spellchecker is already closed\n   * @throws IOException\n   */\n  public final void indexDictionary(Dictionary dict, IndexWriterConfig config, boolean fullMerge) throws IOException {\n    synchronized (modifyCurrentIndexLock) {\n      ensureOpen();\n      final Directory dir = this.spellIndex;\n      final IndexWriter writer = new IndexWriter(dir, config);\n      IndexSearcher indexSearcher = obtainSearcher();\n      final List<TermsEnum> termsEnums = new ArrayList<TermsEnum>();\n\n      final IndexReader reader = searcher.getIndexReader();\n      if (reader.maxDoc() > 0) {\n        new ReaderUtil.Gather(reader) {\n          @Override\n          protected void add(int base, AtomicReader r) throws IOException {\n            Terms terms = r.terms(F_WORD);\n            if (terms != null)\n              termsEnums.add(terms.iterator(null));\n          }\n        }.run();\n      }\n      \n      boolean isEmpty = termsEnums.isEmpty();\n\n      try { \n        BytesRefIterator iter = dict.getWordsIterator();\n        BytesRef currentTerm;\n        \n        terms: while ((currentTerm = iter.next()) != null) {\n  \n          String word = currentTerm.utf8ToString();\n          int len = word.length();\n          if (len < 3) {\n            continue; // too short we bail but \"too long\" is fine...\n          }\n  \n          if (!isEmpty) {\n            for (TermsEnum te : termsEnums) {\n              if (te.seekExact(currentTerm, false)) {\n                continue terms;\n              }\n            }\n          }\n  \n          // ok index the word\n          Document doc = createDocument(word, getMin(len), getMax(len));\n          writer.addDocument(doc);\n        }\n      } finally {\n        releaseSearcher(indexSearcher);\n      }\n      if (fullMerge) {\n        writer.forceMerge(1);\n      }\n      // close writer\n      writer.close();\n      // TODO: this isn't that great, maybe in the future SpellChecker should take\n      // IWC in its ctor / keep its writer open?\n      \n      // also re-open the spell index to see our own changes when the next suggestion\n      // is fetched:\n      swapSearcher(dir);\n    }\n  }\n\n","bugFix":null,"bugIntro":["d743dbdc40bef0a47a5d54d99623ef0c2eb5923e"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d743dbdc40bef0a47a5d54d99623ef0c2eb5923e","date":1344896544,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/spell/SpellChecker#indexDictionary(Dictionary,IndexWriterConfig,boolean).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/spell/SpellChecker#indexDictionary(Dictionary,IndexWriterConfig,boolean).mjava","sourceNew":"  /**\n   * Indexes the data from the given {@link Dictionary}.\n   * @param dict Dictionary to index\n   * @param config {@link IndexWriterConfig} to use\n   * @param fullMerge whether or not the spellcheck index should be fully merged\n   * @throws AlreadyClosedException if the Spellchecker is already closed\n   * @throws IOException\n   */\n  public final void indexDictionary(Dictionary dict, IndexWriterConfig config, boolean fullMerge) throws IOException {\n    synchronized (modifyCurrentIndexLock) {\n      ensureOpen();\n      final Directory dir = this.spellIndex;\n      final IndexWriter writer = new IndexWriter(dir, config);\n      IndexSearcher indexSearcher = obtainSearcher();\n      final List<TermsEnum> termsEnums = new ArrayList<TermsEnum>();\n\n      final IndexReader reader = searcher.getIndexReader();\n      if (reader.maxDoc() > 0) {\n        for (final AtomicReaderContext ctx : reader.leaves()) {\n          Terms terms = ctx.reader().terms(F_WORD);\n          if (terms != null)\n            termsEnums.add(terms.iterator(null));\n        }\n      }\n      \n      boolean isEmpty = termsEnums.isEmpty();\n\n      try { \n        BytesRefIterator iter = dict.getWordsIterator();\n        BytesRef currentTerm;\n        \n        terms: while ((currentTerm = iter.next()) != null) {\n  \n          String word = currentTerm.utf8ToString();\n          int len = word.length();\n          if (len < 3) {\n            continue; // too short we bail but \"too long\" is fine...\n          }\n  \n          if (!isEmpty) {\n            for (TermsEnum te : termsEnums) {\n              if (te.seekExact(currentTerm, false)) {\n                continue terms;\n              }\n            }\n          }\n  \n          // ok index the word\n          Document doc = createDocument(word, getMin(len), getMax(len));\n          writer.addDocument(doc);\n        }\n      } finally {\n        releaseSearcher(indexSearcher);\n      }\n      if (fullMerge) {\n        writer.forceMerge(1);\n      }\n      // close writer\n      writer.close();\n      // TODO: this isn't that great, maybe in the future SpellChecker should take\n      // IWC in its ctor / keep its writer open?\n      \n      // also re-open the spell index to see our own changes when the next suggestion\n      // is fetched:\n      swapSearcher(dir);\n    }\n  }\n\n","sourceOld":"  /**\n   * Indexes the data from the given {@link Dictionary}.\n   * @param dict Dictionary to index\n   * @param config {@link IndexWriterConfig} to use\n   * @param fullMerge whether or not the spellcheck index should be fully merged\n   * @throws AlreadyClosedException if the Spellchecker is already closed\n   * @throws IOException\n   */\n  public final void indexDictionary(Dictionary dict, IndexWriterConfig config, boolean fullMerge) throws IOException {\n    synchronized (modifyCurrentIndexLock) {\n      ensureOpen();\n      final Directory dir = this.spellIndex;\n      final IndexWriter writer = new IndexWriter(dir, config);\n      IndexSearcher indexSearcher = obtainSearcher();\n      final List<TermsEnum> termsEnums = new ArrayList<TermsEnum>();\n\n      final IndexReader reader = searcher.getIndexReader();\n      if (reader.maxDoc() > 0) {\n        for (final AtomicReaderContext ctx : reader.getTopReaderContext().leaves()) {\n          Terms terms = ctx.reader().terms(F_WORD);\n          if (terms != null)\n            termsEnums.add(terms.iterator(null));\n        }\n      }\n      \n      boolean isEmpty = termsEnums.isEmpty();\n\n      try { \n        BytesRefIterator iter = dict.getWordsIterator();\n        BytesRef currentTerm;\n        \n        terms: while ((currentTerm = iter.next()) != null) {\n  \n          String word = currentTerm.utf8ToString();\n          int len = word.length();\n          if (len < 3) {\n            continue; // too short we bail but \"too long\" is fine...\n          }\n  \n          if (!isEmpty) {\n            for (TermsEnum te : termsEnums) {\n              if (te.seekExact(currentTerm, false)) {\n                continue terms;\n              }\n            }\n          }\n  \n          // ok index the word\n          Document doc = createDocument(word, getMin(len), getMax(len));\n          writer.addDocument(doc);\n        }\n      } finally {\n        releaseSearcher(indexSearcher);\n      }\n      if (fullMerge) {\n        writer.forceMerge(1);\n      }\n      // close writer\n      writer.close();\n      // TODO: this isn't that great, maybe in the future SpellChecker should take\n      // IWC in its ctor / keep its writer open?\n      \n      // also re-open the spell index to see our own changes when the next suggestion\n      // is fetched:\n      swapSearcher(dir);\n    }\n  }\n\n","bugFix":["4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","date":1345029782,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/spell/SpellChecker#indexDictionary(Dictionary,IndexWriterConfig,boolean).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/spell/SpellChecker#indexDictionary(Dictionary,IndexWriterConfig,boolean).mjava","sourceNew":"  /**\n   * Indexes the data from the given {@link Dictionary}.\n   * @param dict Dictionary to index\n   * @param config {@link IndexWriterConfig} to use\n   * @param fullMerge whether or not the spellcheck index should be fully merged\n   * @throws AlreadyClosedException if the Spellchecker is already closed\n   * @throws IOException\n   */\n  public final void indexDictionary(Dictionary dict, IndexWriterConfig config, boolean fullMerge) throws IOException {\n    synchronized (modifyCurrentIndexLock) {\n      ensureOpen();\n      final Directory dir = this.spellIndex;\n      final IndexWriter writer = new IndexWriter(dir, config);\n      IndexSearcher indexSearcher = obtainSearcher();\n      final List<TermsEnum> termsEnums = new ArrayList<TermsEnum>();\n\n      final IndexReader reader = searcher.getIndexReader();\n      if (reader.maxDoc() > 0) {\n        for (final AtomicReaderContext ctx : reader.leaves()) {\n          Terms terms = ctx.reader().terms(F_WORD);\n          if (terms != null)\n            termsEnums.add(terms.iterator(null));\n        }\n      }\n      \n      boolean isEmpty = termsEnums.isEmpty();\n\n      try { \n        BytesRefIterator iter = dict.getWordsIterator();\n        BytesRef currentTerm;\n        \n        terms: while ((currentTerm = iter.next()) != null) {\n  \n          String word = currentTerm.utf8ToString();\n          int len = word.length();\n          if (len < 3) {\n            continue; // too short we bail but \"too long\" is fine...\n          }\n  \n          if (!isEmpty) {\n            for (TermsEnum te : termsEnums) {\n              if (te.seekExact(currentTerm, false)) {\n                continue terms;\n              }\n            }\n          }\n  \n          // ok index the word\n          Document doc = createDocument(word, getMin(len), getMax(len));\n          writer.addDocument(doc);\n        }\n      } finally {\n        releaseSearcher(indexSearcher);\n      }\n      if (fullMerge) {\n        writer.forceMerge(1);\n      }\n      // close writer\n      writer.close();\n      // TODO: this isn't that great, maybe in the future SpellChecker should take\n      // IWC in its ctor / keep its writer open?\n      \n      // also re-open the spell index to see our own changes when the next suggestion\n      // is fetched:\n      swapSearcher(dir);\n    }\n  }\n\n","sourceOld":"  /**\n   * Indexes the data from the given {@link Dictionary}.\n   * @param dict Dictionary to index\n   * @param config {@link IndexWriterConfig} to use\n   * @param fullMerge whether or not the spellcheck index should be fully merged\n   * @throws AlreadyClosedException if the Spellchecker is already closed\n   * @throws IOException\n   */\n  public final void indexDictionary(Dictionary dict, IndexWriterConfig config, boolean fullMerge) throws IOException {\n    synchronized (modifyCurrentIndexLock) {\n      ensureOpen();\n      final Directory dir = this.spellIndex;\n      final IndexWriter writer = new IndexWriter(dir, config);\n      IndexSearcher indexSearcher = obtainSearcher();\n      final List<TermsEnum> termsEnums = new ArrayList<TermsEnum>();\n\n      final IndexReader reader = searcher.getIndexReader();\n      if (reader.maxDoc() > 0) {\n        for (final AtomicReaderContext ctx : reader.getTopReaderContext().leaves()) {\n          Terms terms = ctx.reader().terms(F_WORD);\n          if (terms != null)\n            termsEnums.add(terms.iterator(null));\n        }\n      }\n      \n      boolean isEmpty = termsEnums.isEmpty();\n\n      try { \n        BytesRefIterator iter = dict.getWordsIterator();\n        BytesRef currentTerm;\n        \n        terms: while ((currentTerm = iter.next()) != null) {\n  \n          String word = currentTerm.utf8ToString();\n          int len = word.length();\n          if (len < 3) {\n            continue; // too short we bail but \"too long\" is fine...\n          }\n  \n          if (!isEmpty) {\n            for (TermsEnum te : termsEnums) {\n              if (te.seekExact(currentTerm, false)) {\n                continue terms;\n              }\n            }\n          }\n  \n          // ok index the word\n          Document doc = createDocument(word, getMin(len), getMax(len));\n          writer.addDocument(doc);\n        }\n      } finally {\n        releaseSearcher(indexSearcher);\n      }\n      if (fullMerge) {\n        writer.forceMerge(1);\n      }\n      // close writer\n      writer.close();\n      // TODO: this isn't that great, maybe in the future SpellChecker should take\n      // IWC in its ctor / keep its writer open?\n      \n      // also re-open the spell index to see our own changes when the next suggestion\n      // is fetched:\n      swapSearcher(dir);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b05c56a41b733e02a189c48895922b5bd8c7f3d1","date":1345033322,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/spell/SpellChecker#indexDictionary(Dictionary,IndexWriterConfig,boolean).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/spell/SpellChecker#indexDictionary(Dictionary,IndexWriterConfig,boolean).mjava","sourceNew":"  /**\n   * Indexes the data from the given {@link Dictionary}.\n   * @param dict Dictionary to index\n   * @param config {@link IndexWriterConfig} to use\n   * @param fullMerge whether or not the spellcheck index should be fully merged\n   * @throws AlreadyClosedException if the Spellchecker is already closed\n   * @throws IOException\n   */\n  public final void indexDictionary(Dictionary dict, IndexWriterConfig config, boolean fullMerge) throws IOException {\n    synchronized (modifyCurrentIndexLock) {\n      ensureOpen();\n      final Directory dir = this.spellIndex;\n      final IndexWriter writer = new IndexWriter(dir, config);\n      IndexSearcher indexSearcher = obtainSearcher();\n      final List<TermsEnum> termsEnums = new ArrayList<TermsEnum>();\n\n      final IndexReader reader = searcher.getIndexReader();\n      if (reader.maxDoc() > 0) {\n        for (final AtomicReaderContext ctx : reader.leaves()) {\n          Terms terms = ctx.reader().terms(F_WORD);\n          if (terms != null)\n            termsEnums.add(terms.iterator(null));\n        }\n      }\n      \n      boolean isEmpty = termsEnums.isEmpty();\n\n      try { \n        BytesRefIterator iter = dict.getWordsIterator();\n        BytesRef currentTerm;\n        \n        terms: while ((currentTerm = iter.next()) != null) {\n  \n          String word = currentTerm.utf8ToString();\n          int len = word.length();\n          if (len < 3) {\n            continue; // too short we bail but \"too long\" is fine...\n          }\n  \n          if (!isEmpty) {\n            for (TermsEnum te : termsEnums) {\n              if (te.seekExact(currentTerm, false)) {\n                continue terms;\n              }\n            }\n          }\n  \n          // ok index the word\n          Document doc = createDocument(word, getMin(len), getMax(len));\n          writer.addDocument(doc);\n        }\n      } finally {\n        releaseSearcher(indexSearcher);\n      }\n      if (fullMerge) {\n        writer.forceMerge(1);\n      }\n      // close writer\n      writer.close();\n      // TODO: this isn't that great, maybe in the future SpellChecker should take\n      // IWC in its ctor / keep its writer open?\n      \n      // also re-open the spell index to see our own changes when the next suggestion\n      // is fetched:\n      swapSearcher(dir);\n    }\n  }\n\n","sourceOld":"  /**\n   * Indexes the data from the given {@link Dictionary}.\n   * @param dict Dictionary to index\n   * @param config {@link IndexWriterConfig} to use\n   * @param fullMerge whether or not the spellcheck index should be fully merged\n   * @throws AlreadyClosedException if the Spellchecker is already closed\n   * @throws IOException\n   */\n  public final void indexDictionary(Dictionary dict, IndexWriterConfig config, boolean fullMerge) throws IOException {\n    synchronized (modifyCurrentIndexLock) {\n      ensureOpen();\n      final Directory dir = this.spellIndex;\n      final IndexWriter writer = new IndexWriter(dir, config);\n      IndexSearcher indexSearcher = obtainSearcher();\n      final List<TermsEnum> termsEnums = new ArrayList<TermsEnum>();\n\n      final IndexReader reader = searcher.getIndexReader();\n      if (reader.maxDoc() > 0) {\n        for (final AtomicReaderContext ctx : reader.getTopReaderContext().leaves()) {\n          Terms terms = ctx.reader().terms(F_WORD);\n          if (terms != null)\n            termsEnums.add(terms.iterator(null));\n        }\n      }\n      \n      boolean isEmpty = termsEnums.isEmpty();\n\n      try { \n        BytesRefIterator iter = dict.getWordsIterator();\n        BytesRef currentTerm;\n        \n        terms: while ((currentTerm = iter.next()) != null) {\n  \n          String word = currentTerm.utf8ToString();\n          int len = word.length();\n          if (len < 3) {\n            continue; // too short we bail but \"too long\" is fine...\n          }\n  \n          if (!isEmpty) {\n            for (TermsEnum te : termsEnums) {\n              if (te.seekExact(currentTerm, false)) {\n                continue terms;\n              }\n            }\n          }\n  \n          // ok index the word\n          Document doc = createDocument(word, getMin(len), getMax(len));\n          writer.addDocument(doc);\n        }\n      } finally {\n        releaseSearcher(indexSearcher);\n      }\n      if (fullMerge) {\n        writer.forceMerge(1);\n      }\n      // close writer\n      writer.close();\n      // TODO: this isn't that great, maybe in the future SpellChecker should take\n      // IWC in its ctor / keep its writer open?\n      \n      // also re-open the spell index to see our own changes when the next suggestion\n      // is fetched:\n      swapSearcher(dir);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","date":1348430063,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/spell/SpellChecker#indexDictionary(Dictionary,IndexWriterConfig,boolean).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/spell/SpellChecker#indexDictionary(Dictionary,IndexWriterConfig,boolean).mjava","sourceNew":"  /**\n   * Indexes the data from the given {@link Dictionary}.\n   * @param dict Dictionary to index\n   * @param config {@link IndexWriterConfig} to use\n   * @param fullMerge whether or not the spellcheck index should be fully merged\n   * @throws AlreadyClosedException if the Spellchecker is already closed\n   * @throws IOException If there is a low-level I/O error.\n   */\n  public final void indexDictionary(Dictionary dict, IndexWriterConfig config, boolean fullMerge) throws IOException {\n    synchronized (modifyCurrentIndexLock) {\n      ensureOpen();\n      final Directory dir = this.spellIndex;\n      final IndexWriter writer = new IndexWriter(dir, config);\n      IndexSearcher indexSearcher = obtainSearcher();\n      final List<TermsEnum> termsEnums = new ArrayList<TermsEnum>();\n\n      final IndexReader reader = searcher.getIndexReader();\n      if (reader.maxDoc() > 0) {\n        for (final AtomicReaderContext ctx : reader.leaves()) {\n          Terms terms = ctx.reader().terms(F_WORD);\n          if (terms != null)\n            termsEnums.add(terms.iterator(null));\n        }\n      }\n      \n      boolean isEmpty = termsEnums.isEmpty();\n\n      try { \n        BytesRefIterator iter = dict.getWordsIterator();\n        BytesRef currentTerm;\n        \n        terms: while ((currentTerm = iter.next()) != null) {\n  \n          String word = currentTerm.utf8ToString();\n          int len = word.length();\n          if (len < 3) {\n            continue; // too short we bail but \"too long\" is fine...\n          }\n  \n          if (!isEmpty) {\n            for (TermsEnum te : termsEnums) {\n              if (te.seekExact(currentTerm, false)) {\n                continue terms;\n              }\n            }\n          }\n  \n          // ok index the word\n          Document doc = createDocument(word, getMin(len), getMax(len));\n          writer.addDocument(doc);\n        }\n      } finally {\n        releaseSearcher(indexSearcher);\n      }\n      if (fullMerge) {\n        writer.forceMerge(1);\n      }\n      // close writer\n      writer.close();\n      // TODO: this isn't that great, maybe in the future SpellChecker should take\n      // IWC in its ctor / keep its writer open?\n      \n      // also re-open the spell index to see our own changes when the next suggestion\n      // is fetched:\n      swapSearcher(dir);\n    }\n  }\n\n","sourceOld":"  /**\n   * Indexes the data from the given {@link Dictionary}.\n   * @param dict Dictionary to index\n   * @param config {@link IndexWriterConfig} to use\n   * @param fullMerge whether or not the spellcheck index should be fully merged\n   * @throws AlreadyClosedException if the Spellchecker is already closed\n   * @throws IOException\n   */\n  public final void indexDictionary(Dictionary dict, IndexWriterConfig config, boolean fullMerge) throws IOException {\n    synchronized (modifyCurrentIndexLock) {\n      ensureOpen();\n      final Directory dir = this.spellIndex;\n      final IndexWriter writer = new IndexWriter(dir, config);\n      IndexSearcher indexSearcher = obtainSearcher();\n      final List<TermsEnum> termsEnums = new ArrayList<TermsEnum>();\n\n      final IndexReader reader = searcher.getIndexReader();\n      if (reader.maxDoc() > 0) {\n        for (final AtomicReaderContext ctx : reader.leaves()) {\n          Terms terms = ctx.reader().terms(F_WORD);\n          if (terms != null)\n            termsEnums.add(terms.iterator(null));\n        }\n      }\n      \n      boolean isEmpty = termsEnums.isEmpty();\n\n      try { \n        BytesRefIterator iter = dict.getWordsIterator();\n        BytesRef currentTerm;\n        \n        terms: while ((currentTerm = iter.next()) != null) {\n  \n          String word = currentTerm.utf8ToString();\n          int len = word.length();\n          if (len < 3) {\n            continue; // too short we bail but \"too long\" is fine...\n          }\n  \n          if (!isEmpty) {\n            for (TermsEnum te : termsEnums) {\n              if (te.seekExact(currentTerm, false)) {\n                continue terms;\n              }\n            }\n          }\n  \n          // ok index the word\n          Document doc = createDocument(word, getMin(len), getMax(len));\n          writer.addDocument(doc);\n        }\n      } finally {\n        releaseSearcher(indexSearcher);\n      }\n      if (fullMerge) {\n        writer.forceMerge(1);\n      }\n      // close writer\n      writer.close();\n      // TODO: this isn't that great, maybe in the future SpellChecker should take\n      // IWC in its ctor / keep its writer open?\n      \n      // also re-open the spell index to see our own changes when the next suggestion\n      // is fetched:\n      swapSearcher(dir);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eee5f2a24465d2c9a5f86ab84b7c35041a30fda8","date":1373996650,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/spell/SpellChecker#indexDictionary(Dictionary,IndexWriterConfig,boolean).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/spell/SpellChecker#indexDictionary(Dictionary,IndexWriterConfig,boolean).mjava","sourceNew":"  /**\n   * Indexes the data from the given {@link Dictionary}.\n   * @param dict Dictionary to index\n   * @param config {@link IndexWriterConfig} to use\n   * @param fullMerge whether or not the spellcheck index should be fully merged\n   * @throws AlreadyClosedException if the Spellchecker is already closed\n   * @throws IOException If there is a low-level I/O error.\n   */\n  public final void indexDictionary(Dictionary dict, IndexWriterConfig config, boolean fullMerge) throws IOException {\n    synchronized (modifyCurrentIndexLock) {\n      ensureOpen();\n      final Directory dir = this.spellIndex;\n      final IndexWriter writer = new IndexWriter(dir, config);\n      IndexSearcher indexSearcher = obtainSearcher();\n      final List<TermsEnum> termsEnums = new ArrayList<TermsEnum>();\n\n      final IndexReader reader = searcher.getIndexReader();\n      if (reader.maxDoc() > 0) {\n        for (final AtomicReaderContext ctx : reader.leaves()) {\n          Terms terms = ctx.reader().terms(F_WORD);\n          if (terms != null)\n            termsEnums.add(terms.iterator(null));\n        }\n      }\n      \n      boolean isEmpty = termsEnums.isEmpty();\n\n      try { \n        BytesRefIterator iter = dict.getWordsIterator();\n        BytesRef currentTerm;\n        \n        terms: while ((currentTerm = iter.next()) != null) {\n  \n          String word = currentTerm.utf8ToString();\n          int len = word.length();\n          if (len < 3) {\n            continue; // too short we bail but \"too long\" is fine...\n          }\n  \n          if (!isEmpty) {\n            for (TermsEnum te : termsEnums) {\n              if (te.seekExact(currentTerm)) {\n                continue terms;\n              }\n            }\n          }\n  \n          // ok index the word\n          Document doc = createDocument(word, getMin(len), getMax(len));\n          writer.addDocument(doc);\n        }\n      } finally {\n        releaseSearcher(indexSearcher);\n      }\n      if (fullMerge) {\n        writer.forceMerge(1);\n      }\n      // close writer\n      writer.close();\n      // TODO: this isn't that great, maybe in the future SpellChecker should take\n      // IWC in its ctor / keep its writer open?\n      \n      // also re-open the spell index to see our own changes when the next suggestion\n      // is fetched:\n      swapSearcher(dir);\n    }\n  }\n\n","sourceOld":"  /**\n   * Indexes the data from the given {@link Dictionary}.\n   * @param dict Dictionary to index\n   * @param config {@link IndexWriterConfig} to use\n   * @param fullMerge whether or not the spellcheck index should be fully merged\n   * @throws AlreadyClosedException if the Spellchecker is already closed\n   * @throws IOException If there is a low-level I/O error.\n   */\n  public final void indexDictionary(Dictionary dict, IndexWriterConfig config, boolean fullMerge) throws IOException {\n    synchronized (modifyCurrentIndexLock) {\n      ensureOpen();\n      final Directory dir = this.spellIndex;\n      final IndexWriter writer = new IndexWriter(dir, config);\n      IndexSearcher indexSearcher = obtainSearcher();\n      final List<TermsEnum> termsEnums = new ArrayList<TermsEnum>();\n\n      final IndexReader reader = searcher.getIndexReader();\n      if (reader.maxDoc() > 0) {\n        for (final AtomicReaderContext ctx : reader.leaves()) {\n          Terms terms = ctx.reader().terms(F_WORD);\n          if (terms != null)\n            termsEnums.add(terms.iterator(null));\n        }\n      }\n      \n      boolean isEmpty = termsEnums.isEmpty();\n\n      try { \n        BytesRefIterator iter = dict.getWordsIterator();\n        BytesRef currentTerm;\n        \n        terms: while ((currentTerm = iter.next()) != null) {\n  \n          String word = currentTerm.utf8ToString();\n          int len = word.length();\n          if (len < 3) {\n            continue; // too short we bail but \"too long\" is fine...\n          }\n  \n          if (!isEmpty) {\n            for (TermsEnum te : termsEnums) {\n              if (te.seekExact(currentTerm, false)) {\n                continue terms;\n              }\n            }\n          }\n  \n          // ok index the word\n          Document doc = createDocument(word, getMin(len), getMax(len));\n          writer.addDocument(doc);\n        }\n      } finally {\n        releaseSearcher(indexSearcher);\n      }\n      if (fullMerge) {\n        writer.forceMerge(1);\n      }\n      // close writer\n      writer.close();\n      // TODO: this isn't that great, maybe in the future SpellChecker should take\n      // IWC in its ctor / keep its writer open?\n      \n      // also re-open the spell index to see our own changes when the next suggestion\n      // is fetched:\n      swapSearcher(dir);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/spell/SpellChecker#indexDictionary(Dictionary,IndexWriterConfig,boolean).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/spell/SpellChecker#indexDictionary(Dictionary,IndexWriterConfig,boolean).mjava","sourceNew":"  /**\n   * Indexes the data from the given {@link Dictionary}.\n   * @param dict Dictionary to index\n   * @param config {@link IndexWriterConfig} to use\n   * @param fullMerge whether or not the spellcheck index should be fully merged\n   * @throws AlreadyClosedException if the Spellchecker is already closed\n   * @throws IOException If there is a low-level I/O error.\n   */\n  public final void indexDictionary(Dictionary dict, IndexWriterConfig config, boolean fullMerge) throws IOException {\n    synchronized (modifyCurrentIndexLock) {\n      ensureOpen();\n      final Directory dir = this.spellIndex;\n      final IndexWriter writer = new IndexWriter(dir, config);\n      IndexSearcher indexSearcher = obtainSearcher();\n      final List<TermsEnum> termsEnums = new ArrayList<TermsEnum>();\n\n      final IndexReader reader = searcher.getIndexReader();\n      if (reader.maxDoc() > 0) {\n        for (final AtomicReaderContext ctx : reader.leaves()) {\n          Terms terms = ctx.reader().terms(F_WORD);\n          if (terms != null)\n            termsEnums.add(terms.iterator(null));\n        }\n      }\n      \n      boolean isEmpty = termsEnums.isEmpty();\n\n      try { \n        BytesRefIterator iter = dict.getWordsIterator();\n        BytesRef currentTerm;\n        \n        terms: while ((currentTerm = iter.next()) != null) {\n  \n          String word = currentTerm.utf8ToString();\n          int len = word.length();\n          if (len < 3) {\n            continue; // too short we bail but \"too long\" is fine...\n          }\n  \n          if (!isEmpty) {\n            for (TermsEnum te : termsEnums) {\n              if (te.seekExact(currentTerm)) {\n                continue terms;\n              }\n            }\n          }\n  \n          // ok index the word\n          Document doc = createDocument(word, getMin(len), getMax(len));\n          writer.addDocument(doc);\n        }\n      } finally {\n        releaseSearcher(indexSearcher);\n      }\n      if (fullMerge) {\n        writer.forceMerge(1);\n      }\n      // close writer\n      writer.close();\n      // TODO: this isn't that great, maybe in the future SpellChecker should take\n      // IWC in its ctor / keep its writer open?\n      \n      // also re-open the spell index to see our own changes when the next suggestion\n      // is fetched:\n      swapSearcher(dir);\n    }\n  }\n\n","sourceOld":"  /**\n   * Indexes the data from the given {@link Dictionary}.\n   * @param dict Dictionary to index\n   * @param config {@link IndexWriterConfig} to use\n   * @param fullMerge whether or not the spellcheck index should be fully merged\n   * @throws AlreadyClosedException if the Spellchecker is already closed\n   * @throws IOException If there is a low-level I/O error.\n   */\n  public final void indexDictionary(Dictionary dict, IndexWriterConfig config, boolean fullMerge) throws IOException {\n    synchronized (modifyCurrentIndexLock) {\n      ensureOpen();\n      final Directory dir = this.spellIndex;\n      final IndexWriter writer = new IndexWriter(dir, config);\n      IndexSearcher indexSearcher = obtainSearcher();\n      final List<TermsEnum> termsEnums = new ArrayList<TermsEnum>();\n\n      final IndexReader reader = searcher.getIndexReader();\n      if (reader.maxDoc() > 0) {\n        for (final AtomicReaderContext ctx : reader.leaves()) {\n          Terms terms = ctx.reader().terms(F_WORD);\n          if (terms != null)\n            termsEnums.add(terms.iterator(null));\n        }\n      }\n      \n      boolean isEmpty = termsEnums.isEmpty();\n\n      try { \n        BytesRefIterator iter = dict.getWordsIterator();\n        BytesRef currentTerm;\n        \n        terms: while ((currentTerm = iter.next()) != null) {\n  \n          String word = currentTerm.utf8ToString();\n          int len = word.length();\n          if (len < 3) {\n            continue; // too short we bail but \"too long\" is fine...\n          }\n  \n          if (!isEmpty) {\n            for (TermsEnum te : termsEnums) {\n              if (te.seekExact(currentTerm)) {\n                continue terms;\n              }\n            }\n          }\n  \n          // ok index the word\n          Document doc = createDocument(word, getMin(len), getMax(len));\n          writer.addDocument(doc);\n        }\n      } finally {\n        releaseSearcher(indexSearcher);\n      }\n      if (fullMerge) {\n        writer.forceMerge(1);\n      }\n      // close writer\n      writer.close();\n      // TODO: this isn't that great, maybe in the future SpellChecker should take\n      // IWC in its ctor / keep its writer open?\n      \n      // also re-open the spell index to see our own changes when the next suggestion\n      // is fetched:\n      swapSearcher(dir);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/spell/SpellChecker#indexDictionary(Dictionary,IndexWriterConfig,boolean).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/spell/SpellChecker#indexDictionary(Dictionary,IndexWriterConfig,boolean).mjava","sourceNew":"  /**\n   * Indexes the data from the given {@link Dictionary}.\n   * @param dict Dictionary to index\n   * @param config {@link IndexWriterConfig} to use\n   * @param fullMerge whether or not the spellcheck index should be fully merged\n   * @throws AlreadyClosedException if the Spellchecker is already closed\n   * @throws IOException If there is a low-level I/O error.\n   */\n  public final void indexDictionary(Dictionary dict, IndexWriterConfig config, boolean fullMerge) throws IOException {\n    synchronized (modifyCurrentIndexLock) {\n      ensureOpen();\n      final Directory dir = this.spellIndex;\n      final IndexWriter writer = new IndexWriter(dir, config);\n      IndexSearcher indexSearcher = obtainSearcher();\n      final List<TermsEnum> termsEnums = new ArrayList<TermsEnum>();\n\n      final IndexReader reader = searcher.getIndexReader();\n      if (reader.maxDoc() > 0) {\n        for (final AtomicReaderContext ctx : reader.leaves()) {\n          Terms terms = ctx.reader().terms(F_WORD);\n          if (terms != null)\n            termsEnums.add(terms.iterator(null));\n        }\n      }\n      \n      boolean isEmpty = termsEnums.isEmpty();\n\n      try { \n        BytesRefIterator iter = dict.getWordsIterator();\n        BytesRef currentTerm;\n        \n        terms: while ((currentTerm = iter.next()) != null) {\n  \n          String word = currentTerm.utf8ToString();\n          int len = word.length();\n          if (len < 3) {\n            continue; // too short we bail but \"too long\" is fine...\n          }\n  \n          if (!isEmpty) {\n            for (TermsEnum te : termsEnums) {\n              if (te.seekExact(currentTerm)) {\n                continue terms;\n              }\n            }\n          }\n  \n          // ok index the word\n          Document doc = createDocument(word, getMin(len), getMax(len));\n          writer.addDocument(doc);\n        }\n      } finally {\n        releaseSearcher(indexSearcher);\n      }\n      if (fullMerge) {\n        writer.forceMerge(1);\n      }\n      // close writer\n      writer.close();\n      // TODO: this isn't that great, maybe in the future SpellChecker should take\n      // IWC in its ctor / keep its writer open?\n      \n      // also re-open the spell index to see our own changes when the next suggestion\n      // is fetched:\n      swapSearcher(dir);\n    }\n  }\n\n","sourceOld":"  /**\n   * Indexes the data from the given {@link Dictionary}.\n   * @param dict Dictionary to index\n   * @param config {@link IndexWriterConfig} to use\n   * @param fullMerge whether or not the spellcheck index should be fully merged\n   * @throws AlreadyClosedException if the Spellchecker is already closed\n   * @throws IOException If there is a low-level I/O error.\n   */\n  public final void indexDictionary(Dictionary dict, IndexWriterConfig config, boolean fullMerge) throws IOException {\n    synchronized (modifyCurrentIndexLock) {\n      ensureOpen();\n      final Directory dir = this.spellIndex;\n      final IndexWriter writer = new IndexWriter(dir, config);\n      IndexSearcher indexSearcher = obtainSearcher();\n      final List<TermsEnum> termsEnums = new ArrayList<TermsEnum>();\n\n      final IndexReader reader = searcher.getIndexReader();\n      if (reader.maxDoc() > 0) {\n        for (final AtomicReaderContext ctx : reader.leaves()) {\n          Terms terms = ctx.reader().terms(F_WORD);\n          if (terms != null)\n            termsEnums.add(terms.iterator(null));\n        }\n      }\n      \n      boolean isEmpty = termsEnums.isEmpty();\n\n      try { \n        BytesRefIterator iter = dict.getWordsIterator();\n        BytesRef currentTerm;\n        \n        terms: while ((currentTerm = iter.next()) != null) {\n  \n          String word = currentTerm.utf8ToString();\n          int len = word.length();\n          if (len < 3) {\n            continue; // too short we bail but \"too long\" is fine...\n          }\n  \n          if (!isEmpty) {\n            for (TermsEnum te : termsEnums) {\n              if (te.seekExact(currentTerm, false)) {\n                continue terms;\n              }\n            }\n          }\n  \n          // ok index the word\n          Document doc = createDocument(word, getMin(len), getMax(len));\n          writer.addDocument(doc);\n        }\n      } finally {\n        releaseSearcher(indexSearcher);\n      }\n      if (fullMerge) {\n        writer.forceMerge(1);\n      }\n      // close writer\n      writer.close();\n      // TODO: this isn't that great, maybe in the future SpellChecker should take\n      // IWC in its ctor / keep its writer open?\n      \n      // also re-open the spell index to see our own changes when the next suggestion\n      // is fetched:\n      swapSearcher(dir);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a645276cbaf5dc96a42fd473b9019bde352996c8","date":1391806699,"type":3,"author":"Areek Zillur","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/spell/SpellChecker#indexDictionary(Dictionary,IndexWriterConfig,boolean).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/spell/SpellChecker#indexDictionary(Dictionary,IndexWriterConfig,boolean).mjava","sourceNew":"  /**\n   * Indexes the data from the given {@link Dictionary}.\n   * @param dict Dictionary to index\n   * @param config {@link IndexWriterConfig} to use\n   * @param fullMerge whether or not the spellcheck index should be fully merged\n   * @throws AlreadyClosedException if the Spellchecker is already closed\n   * @throws IOException If there is a low-level I/O error.\n   */\n  public final void indexDictionary(Dictionary dict, IndexWriterConfig config, boolean fullMerge) throws IOException {\n    synchronized (modifyCurrentIndexLock) {\n      ensureOpen();\n      final Directory dir = this.spellIndex;\n      final IndexWriter writer = new IndexWriter(dir, config);\n      IndexSearcher indexSearcher = obtainSearcher();\n      final List<TermsEnum> termsEnums = new ArrayList<TermsEnum>();\n\n      final IndexReader reader = searcher.getIndexReader();\n      if (reader.maxDoc() > 0) {\n        for (final AtomicReaderContext ctx : reader.leaves()) {\n          Terms terms = ctx.reader().terms(F_WORD);\n          if (terms != null)\n            termsEnums.add(terms.iterator(null));\n        }\n      }\n      \n      boolean isEmpty = termsEnums.isEmpty();\n\n      try { \n        BytesRefIterator iter = dict.getEntryIterator();\n        BytesRef currentTerm;\n        \n        terms: while ((currentTerm = iter.next()) != null) {\n  \n          String word = currentTerm.utf8ToString();\n          int len = word.length();\n          if (len < 3) {\n            continue; // too short we bail but \"too long\" is fine...\n          }\n  \n          if (!isEmpty) {\n            for (TermsEnum te : termsEnums) {\n              if (te.seekExact(currentTerm)) {\n                continue terms;\n              }\n            }\n          }\n  \n          // ok index the word\n          Document doc = createDocument(word, getMin(len), getMax(len));\n          writer.addDocument(doc);\n        }\n      } finally {\n        releaseSearcher(indexSearcher);\n      }\n      if (fullMerge) {\n        writer.forceMerge(1);\n      }\n      // close writer\n      writer.close();\n      // TODO: this isn't that great, maybe in the future SpellChecker should take\n      // IWC in its ctor / keep its writer open?\n      \n      // also re-open the spell index to see our own changes when the next suggestion\n      // is fetched:\n      swapSearcher(dir);\n    }\n  }\n\n","sourceOld":"  /**\n   * Indexes the data from the given {@link Dictionary}.\n   * @param dict Dictionary to index\n   * @param config {@link IndexWriterConfig} to use\n   * @param fullMerge whether or not the spellcheck index should be fully merged\n   * @throws AlreadyClosedException if the Spellchecker is already closed\n   * @throws IOException If there is a low-level I/O error.\n   */\n  public final void indexDictionary(Dictionary dict, IndexWriterConfig config, boolean fullMerge) throws IOException {\n    synchronized (modifyCurrentIndexLock) {\n      ensureOpen();\n      final Directory dir = this.spellIndex;\n      final IndexWriter writer = new IndexWriter(dir, config);\n      IndexSearcher indexSearcher = obtainSearcher();\n      final List<TermsEnum> termsEnums = new ArrayList<TermsEnum>();\n\n      final IndexReader reader = searcher.getIndexReader();\n      if (reader.maxDoc() > 0) {\n        for (final AtomicReaderContext ctx : reader.leaves()) {\n          Terms terms = ctx.reader().terms(F_WORD);\n          if (terms != null)\n            termsEnums.add(terms.iterator(null));\n        }\n      }\n      \n      boolean isEmpty = termsEnums.isEmpty();\n\n      try { \n        BytesRefIterator iter = dict.getWordsIterator();\n        BytesRef currentTerm;\n        \n        terms: while ((currentTerm = iter.next()) != null) {\n  \n          String word = currentTerm.utf8ToString();\n          int len = word.length();\n          if (len < 3) {\n            continue; // too short we bail but \"too long\" is fine...\n          }\n  \n          if (!isEmpty) {\n            for (TermsEnum te : termsEnums) {\n              if (te.seekExact(currentTerm)) {\n                continue terms;\n              }\n            }\n          }\n  \n          // ok index the word\n          Document doc = createDocument(word, getMin(len), getMax(len));\n          writer.addDocument(doc);\n        }\n      } finally {\n        releaseSearcher(indexSearcher);\n      }\n      if (fullMerge) {\n        writer.forceMerge(1);\n      }\n      // close writer\n      writer.close();\n      // TODO: this isn't that great, maybe in the future SpellChecker should take\n      // IWC in its ctor / keep its writer open?\n      \n      // also re-open the spell index to see our own changes when the next suggestion\n      // is fetched:\n      swapSearcher(dir);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/spell/SpellChecker#indexDictionary(Dictionary,IndexWriterConfig,boolean).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/spell/SpellChecker#indexDictionary(Dictionary,IndexWriterConfig,boolean).mjava","sourceNew":"  /**\n   * Indexes the data from the given {@link Dictionary}.\n   * @param dict Dictionary to index\n   * @param config {@link IndexWriterConfig} to use\n   * @param fullMerge whether or not the spellcheck index should be fully merged\n   * @throws AlreadyClosedException if the Spellchecker is already closed\n   * @throws IOException If there is a low-level I/O error.\n   */\n  public final void indexDictionary(Dictionary dict, IndexWriterConfig config, boolean fullMerge) throws IOException {\n    synchronized (modifyCurrentIndexLock) {\n      ensureOpen();\n      final Directory dir = this.spellIndex;\n      final IndexWriter writer = new IndexWriter(dir, config);\n      IndexSearcher indexSearcher = obtainSearcher();\n      final List<TermsEnum> termsEnums = new ArrayList<>();\n\n      final IndexReader reader = searcher.getIndexReader();\n      if (reader.maxDoc() > 0) {\n        for (final AtomicReaderContext ctx : reader.leaves()) {\n          Terms terms = ctx.reader().terms(F_WORD);\n          if (terms != null)\n            termsEnums.add(terms.iterator(null));\n        }\n      }\n      \n      boolean isEmpty = termsEnums.isEmpty();\n\n      try { \n        BytesRefIterator iter = dict.getEntryIterator();\n        BytesRef currentTerm;\n        \n        terms: while ((currentTerm = iter.next()) != null) {\n  \n          String word = currentTerm.utf8ToString();\n          int len = word.length();\n          if (len < 3) {\n            continue; // too short we bail but \"too long\" is fine...\n          }\n  \n          if (!isEmpty) {\n            for (TermsEnum te : termsEnums) {\n              if (te.seekExact(currentTerm)) {\n                continue terms;\n              }\n            }\n          }\n  \n          // ok index the word\n          Document doc = createDocument(word, getMin(len), getMax(len));\n          writer.addDocument(doc);\n        }\n      } finally {\n        releaseSearcher(indexSearcher);\n      }\n      if (fullMerge) {\n        writer.forceMerge(1);\n      }\n      // close writer\n      writer.close();\n      // TODO: this isn't that great, maybe in the future SpellChecker should take\n      // IWC in its ctor / keep its writer open?\n      \n      // also re-open the spell index to see our own changes when the next suggestion\n      // is fetched:\n      swapSearcher(dir);\n    }\n  }\n\n","sourceOld":"  /**\n   * Indexes the data from the given {@link Dictionary}.\n   * @param dict Dictionary to index\n   * @param config {@link IndexWriterConfig} to use\n   * @param fullMerge whether or not the spellcheck index should be fully merged\n   * @throws AlreadyClosedException if the Spellchecker is already closed\n   * @throws IOException If there is a low-level I/O error.\n   */\n  public final void indexDictionary(Dictionary dict, IndexWriterConfig config, boolean fullMerge) throws IOException {\n    synchronized (modifyCurrentIndexLock) {\n      ensureOpen();\n      final Directory dir = this.spellIndex;\n      final IndexWriter writer = new IndexWriter(dir, config);\n      IndexSearcher indexSearcher = obtainSearcher();\n      final List<TermsEnum> termsEnums = new ArrayList<TermsEnum>();\n\n      final IndexReader reader = searcher.getIndexReader();\n      if (reader.maxDoc() > 0) {\n        for (final AtomicReaderContext ctx : reader.leaves()) {\n          Terms terms = ctx.reader().terms(F_WORD);\n          if (terms != null)\n            termsEnums.add(terms.iterator(null));\n        }\n      }\n      \n      boolean isEmpty = termsEnums.isEmpty();\n\n      try { \n        BytesRefIterator iter = dict.getEntryIterator();\n        BytesRef currentTerm;\n        \n        terms: while ((currentTerm = iter.next()) != null) {\n  \n          String word = currentTerm.utf8ToString();\n          int len = word.length();\n          if (len < 3) {\n            continue; // too short we bail but \"too long\" is fine...\n          }\n  \n          if (!isEmpty) {\n            for (TermsEnum te : termsEnums) {\n              if (te.seekExact(currentTerm)) {\n                continue terms;\n              }\n            }\n          }\n  \n          // ok index the word\n          Document doc = createDocument(word, getMin(len), getMax(len));\n          writer.addDocument(doc);\n        }\n      } finally {\n        releaseSearcher(indexSearcher);\n      }\n      if (fullMerge) {\n        writer.forceMerge(1);\n      }\n      // close writer\n      writer.close();\n      // TODO: this isn't that great, maybe in the future SpellChecker should take\n      // IWC in its ctor / keep its writer open?\n      \n      // also re-open the spell index to see our own changes when the next suggestion\n      // is fetched:\n      swapSearcher(dir);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/spell/SpellChecker#indexDictionary(Dictionary,IndexWriterConfig,boolean).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/spell/SpellChecker#indexDictionary(Dictionary,IndexWriterConfig,boolean).mjava","sourceNew":"  /**\n   * Indexes the data from the given {@link Dictionary}.\n   * @param dict Dictionary to index\n   * @param config {@link IndexWriterConfig} to use\n   * @param fullMerge whether or not the spellcheck index should be fully merged\n   * @throws AlreadyClosedException if the Spellchecker is already closed\n   * @throws IOException If there is a low-level I/O error.\n   */\n  public final void indexDictionary(Dictionary dict, IndexWriterConfig config, boolean fullMerge) throws IOException {\n    synchronized (modifyCurrentIndexLock) {\n      ensureOpen();\n      final Directory dir = this.spellIndex;\n      final IndexWriter writer = new IndexWriter(dir, config);\n      IndexSearcher indexSearcher = obtainSearcher();\n      final List<TermsEnum> termsEnums = new ArrayList<>();\n\n      final IndexReader reader = searcher.getIndexReader();\n      if (reader.maxDoc() > 0) {\n        for (final AtomicReaderContext ctx : reader.leaves()) {\n          Terms terms = ctx.reader().terms(F_WORD);\n          if (terms != null)\n            termsEnums.add(terms.iterator(null));\n        }\n      }\n      \n      boolean isEmpty = termsEnums.isEmpty();\n\n      try { \n        BytesRefIterator iter = dict.getEntryIterator();\n        BytesRef currentTerm;\n        \n        terms: while ((currentTerm = iter.next()) != null) {\n  \n          String word = currentTerm.utf8ToString();\n          int len = word.length();\n          if (len < 3) {\n            continue; // too short we bail but \"too long\" is fine...\n          }\n  \n          if (!isEmpty) {\n            for (TermsEnum te : termsEnums) {\n              if (te.seekExact(currentTerm)) {\n                continue terms;\n              }\n            }\n          }\n  \n          // ok index the word\n          Document doc = createDocument(word, getMin(len), getMax(len));\n          writer.addDocument(doc);\n        }\n      } finally {\n        releaseSearcher(indexSearcher);\n      }\n      if (fullMerge) {\n        writer.forceMerge(1);\n      }\n      // close writer\n      writer.shutdown();\n      // TODO: this isn't that great, maybe in the future SpellChecker should take\n      // IWC in its ctor / keep its writer open?\n      \n      // also re-open the spell index to see our own changes when the next suggestion\n      // is fetched:\n      swapSearcher(dir);\n    }\n  }\n\n","sourceOld":"  /**\n   * Indexes the data from the given {@link Dictionary}.\n   * @param dict Dictionary to index\n   * @param config {@link IndexWriterConfig} to use\n   * @param fullMerge whether or not the spellcheck index should be fully merged\n   * @throws AlreadyClosedException if the Spellchecker is already closed\n   * @throws IOException If there is a low-level I/O error.\n   */\n  public final void indexDictionary(Dictionary dict, IndexWriterConfig config, boolean fullMerge) throws IOException {\n    synchronized (modifyCurrentIndexLock) {\n      ensureOpen();\n      final Directory dir = this.spellIndex;\n      final IndexWriter writer = new IndexWriter(dir, config);\n      IndexSearcher indexSearcher = obtainSearcher();\n      final List<TermsEnum> termsEnums = new ArrayList<>();\n\n      final IndexReader reader = searcher.getIndexReader();\n      if (reader.maxDoc() > 0) {\n        for (final AtomicReaderContext ctx : reader.leaves()) {\n          Terms terms = ctx.reader().terms(F_WORD);\n          if (terms != null)\n            termsEnums.add(terms.iterator(null));\n        }\n      }\n      \n      boolean isEmpty = termsEnums.isEmpty();\n\n      try { \n        BytesRefIterator iter = dict.getEntryIterator();\n        BytesRef currentTerm;\n        \n        terms: while ((currentTerm = iter.next()) != null) {\n  \n          String word = currentTerm.utf8ToString();\n          int len = word.length();\n          if (len < 3) {\n            continue; // too short we bail but \"too long\" is fine...\n          }\n  \n          if (!isEmpty) {\n            for (TermsEnum te : termsEnums) {\n              if (te.seekExact(currentTerm)) {\n                continue terms;\n              }\n            }\n          }\n  \n          // ok index the word\n          Document doc = createDocument(word, getMin(len), getMax(len));\n          writer.addDocument(doc);\n        }\n      } finally {\n        releaseSearcher(indexSearcher);\n      }\n      if (fullMerge) {\n        writer.forceMerge(1);\n      }\n      // close writer\n      writer.close();\n      // TODO: this isn't that great, maybe in the future SpellChecker should take\n      // IWC in its ctor / keep its writer open?\n      \n      // also re-open the spell index to see our own changes when the next suggestion\n      // is fetched:\n      swapSearcher(dir);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/spell/SpellChecker#indexDictionary(Dictionary,IndexWriterConfig,boolean).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/spell/SpellChecker#indexDictionary(Dictionary,IndexWriterConfig,boolean).mjava","sourceNew":"  /**\n   * Indexes the data from the given {@link Dictionary}.\n   * @param dict Dictionary to index\n   * @param config {@link IndexWriterConfig} to use\n   * @param fullMerge whether or not the spellcheck index should be fully merged\n   * @throws AlreadyClosedException if the Spellchecker is already closed\n   * @throws IOException If there is a low-level I/O error.\n   */\n  public final void indexDictionary(Dictionary dict, IndexWriterConfig config, boolean fullMerge) throws IOException {\n    synchronized (modifyCurrentIndexLock) {\n      ensureOpen();\n      final Directory dir = this.spellIndex;\n      final IndexWriter writer = new IndexWriter(dir, config);\n      IndexSearcher indexSearcher = obtainSearcher();\n      final List<TermsEnum> termsEnums = new ArrayList<>();\n\n      final IndexReader reader = searcher.getIndexReader();\n      if (reader.maxDoc() > 0) {\n        for (final AtomicReaderContext ctx : reader.leaves()) {\n          Terms terms = ctx.reader().terms(F_WORD);\n          if (terms != null)\n            termsEnums.add(terms.iterator(null));\n        }\n      }\n      \n      boolean isEmpty = termsEnums.isEmpty();\n\n      try { \n        BytesRefIterator iter = dict.getEntryIterator();\n        BytesRef currentTerm;\n        \n        terms: while ((currentTerm = iter.next()) != null) {\n  \n          String word = currentTerm.utf8ToString();\n          int len = word.length();\n          if (len < 3) {\n            continue; // too short we bail but \"too long\" is fine...\n          }\n  \n          if (!isEmpty) {\n            for (TermsEnum te : termsEnums) {\n              if (te.seekExact(currentTerm)) {\n                continue terms;\n              }\n            }\n          }\n  \n          // ok index the word\n          Document doc = createDocument(word, getMin(len), getMax(len));\n          writer.addDocument(doc);\n        }\n      } finally {\n        releaseSearcher(indexSearcher);\n      }\n      if (fullMerge) {\n        writer.forceMerge(1);\n      }\n      // close writer\n      writer.close();\n      // TODO: this isn't that great, maybe in the future SpellChecker should take\n      // IWC in its ctor / keep its writer open?\n      \n      // also re-open the spell index to see our own changes when the next suggestion\n      // is fetched:\n      swapSearcher(dir);\n    }\n  }\n\n","sourceOld":"  /**\n   * Indexes the data from the given {@link Dictionary}.\n   * @param dict Dictionary to index\n   * @param config {@link IndexWriterConfig} to use\n   * @param fullMerge whether or not the spellcheck index should be fully merged\n   * @throws AlreadyClosedException if the Spellchecker is already closed\n   * @throws IOException If there is a low-level I/O error.\n   */\n  public final void indexDictionary(Dictionary dict, IndexWriterConfig config, boolean fullMerge) throws IOException {\n    synchronized (modifyCurrentIndexLock) {\n      ensureOpen();\n      final Directory dir = this.spellIndex;\n      final IndexWriter writer = new IndexWriter(dir, config);\n      IndexSearcher indexSearcher = obtainSearcher();\n      final List<TermsEnum> termsEnums = new ArrayList<>();\n\n      final IndexReader reader = searcher.getIndexReader();\n      if (reader.maxDoc() > 0) {\n        for (final AtomicReaderContext ctx : reader.leaves()) {\n          Terms terms = ctx.reader().terms(F_WORD);\n          if (terms != null)\n            termsEnums.add(terms.iterator(null));\n        }\n      }\n      \n      boolean isEmpty = termsEnums.isEmpty();\n\n      try { \n        BytesRefIterator iter = dict.getEntryIterator();\n        BytesRef currentTerm;\n        \n        terms: while ((currentTerm = iter.next()) != null) {\n  \n          String word = currentTerm.utf8ToString();\n          int len = word.length();\n          if (len < 3) {\n            continue; // too short we bail but \"too long\" is fine...\n          }\n  \n          if (!isEmpty) {\n            for (TermsEnum te : termsEnums) {\n              if (te.seekExact(currentTerm)) {\n                continue terms;\n              }\n            }\n          }\n  \n          // ok index the word\n          Document doc = createDocument(word, getMin(len), getMax(len));\n          writer.addDocument(doc);\n        }\n      } finally {\n        releaseSearcher(indexSearcher);\n      }\n      if (fullMerge) {\n        writer.forceMerge(1);\n      }\n      // close writer\n      writer.shutdown();\n      // TODO: this isn't that great, maybe in the future SpellChecker should take\n      // IWC in its ctor / keep its writer open?\n      \n      // also re-open the spell index to see our own changes when the next suggestion\n      // is fetched:\n      swapSearcher(dir);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/spell/SpellChecker#indexDictionary(Dictionary,IndexWriterConfig,boolean).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/spell/SpellChecker#indexDictionary(Dictionary,IndexWriterConfig,boolean).mjava","sourceNew":"  /**\n   * Indexes the data from the given {@link Dictionary}.\n   * @param dict Dictionary to index\n   * @param config {@link IndexWriterConfig} to use\n   * @param fullMerge whether or not the spellcheck index should be fully merged\n   * @throws AlreadyClosedException if the Spellchecker is already closed\n   * @throws IOException If there is a low-level I/O error.\n   */\n  public final void indexDictionary(Dictionary dict, IndexWriterConfig config, boolean fullMerge) throws IOException {\n    synchronized (modifyCurrentIndexLock) {\n      ensureOpen();\n      final Directory dir = this.spellIndex;\n      final IndexWriter writer = new IndexWriter(dir, config);\n      IndexSearcher indexSearcher = obtainSearcher();\n      final List<TermsEnum> termsEnums = new ArrayList<>();\n\n      final IndexReader reader = searcher.getIndexReader();\n      if (reader.maxDoc() > 0) {\n        for (final LeafReaderContext ctx : reader.leaves()) {\n          Terms terms = ctx.reader().terms(F_WORD);\n          if (terms != null)\n            termsEnums.add(terms.iterator(null));\n        }\n      }\n      \n      boolean isEmpty = termsEnums.isEmpty();\n\n      try { \n        BytesRefIterator iter = dict.getEntryIterator();\n        BytesRef currentTerm;\n        \n        terms: while ((currentTerm = iter.next()) != null) {\n  \n          String word = currentTerm.utf8ToString();\n          int len = word.length();\n          if (len < 3) {\n            continue; // too short we bail but \"too long\" is fine...\n          }\n  \n          if (!isEmpty) {\n            for (TermsEnum te : termsEnums) {\n              if (te.seekExact(currentTerm)) {\n                continue terms;\n              }\n            }\n          }\n  \n          // ok index the word\n          Document doc = createDocument(word, getMin(len), getMax(len));\n          writer.addDocument(doc);\n        }\n      } finally {\n        releaseSearcher(indexSearcher);\n      }\n      if (fullMerge) {\n        writer.forceMerge(1);\n      }\n      // close writer\n      writer.close();\n      // TODO: this isn't that great, maybe in the future SpellChecker should take\n      // IWC in its ctor / keep its writer open?\n      \n      // also re-open the spell index to see our own changes when the next suggestion\n      // is fetched:\n      swapSearcher(dir);\n    }\n  }\n\n","sourceOld":"  /**\n   * Indexes the data from the given {@link Dictionary}.\n   * @param dict Dictionary to index\n   * @param config {@link IndexWriterConfig} to use\n   * @param fullMerge whether or not the spellcheck index should be fully merged\n   * @throws AlreadyClosedException if the Spellchecker is already closed\n   * @throws IOException If there is a low-level I/O error.\n   */\n  public final void indexDictionary(Dictionary dict, IndexWriterConfig config, boolean fullMerge) throws IOException {\n    synchronized (modifyCurrentIndexLock) {\n      ensureOpen();\n      final Directory dir = this.spellIndex;\n      final IndexWriter writer = new IndexWriter(dir, config);\n      IndexSearcher indexSearcher = obtainSearcher();\n      final List<TermsEnum> termsEnums = new ArrayList<>();\n\n      final IndexReader reader = searcher.getIndexReader();\n      if (reader.maxDoc() > 0) {\n        for (final AtomicReaderContext ctx : reader.leaves()) {\n          Terms terms = ctx.reader().terms(F_WORD);\n          if (terms != null)\n            termsEnums.add(terms.iterator(null));\n        }\n      }\n      \n      boolean isEmpty = termsEnums.isEmpty();\n\n      try { \n        BytesRefIterator iter = dict.getEntryIterator();\n        BytesRef currentTerm;\n        \n        terms: while ((currentTerm = iter.next()) != null) {\n  \n          String word = currentTerm.utf8ToString();\n          int len = word.length();\n          if (len < 3) {\n            continue; // too short we bail but \"too long\" is fine...\n          }\n  \n          if (!isEmpty) {\n            for (TermsEnum te : termsEnums) {\n              if (te.seekExact(currentTerm)) {\n                continue terms;\n              }\n            }\n          }\n  \n          // ok index the word\n          Document doc = createDocument(word, getMin(len), getMax(len));\n          writer.addDocument(doc);\n        }\n      } finally {\n        releaseSearcher(indexSearcher);\n      }\n      if (fullMerge) {\n        writer.forceMerge(1);\n      }\n      // close writer\n      writer.close();\n      // TODO: this isn't that great, maybe in the future SpellChecker should take\n      // IWC in its ctor / keep its writer open?\n      \n      // also re-open the spell index to see our own changes when the next suggestion\n      // is fetched:\n      swapSearcher(dir);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82","date":1428522487,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/spell/SpellChecker#indexDictionary(Dictionary,IndexWriterConfig,boolean).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/spell/SpellChecker#indexDictionary(Dictionary,IndexWriterConfig,boolean).mjava","sourceNew":"  /**\n   * Indexes the data from the given {@link Dictionary}.\n   * @param dict Dictionary to index\n   * @param config {@link IndexWriterConfig} to use\n   * @param fullMerge whether or not the spellcheck index should be fully merged\n   * @throws AlreadyClosedException if the Spellchecker is already closed\n   * @throws IOException If there is a low-level I/O error.\n   */\n  public final void indexDictionary(Dictionary dict, IndexWriterConfig config, boolean fullMerge) throws IOException {\n    synchronized (modifyCurrentIndexLock) {\n      ensureOpen();\n      final Directory dir = this.spellIndex;\n      final IndexWriter writer = new IndexWriter(dir, config);\n      IndexSearcher indexSearcher = obtainSearcher();\n      final List<TermsEnum> termsEnums = new ArrayList<>();\n\n      final IndexReader reader = searcher.getIndexReader();\n      if (reader.maxDoc() > 0) {\n        for (final LeafReaderContext ctx : reader.leaves()) {\n          Terms terms = ctx.reader().terms(F_WORD);\n          if (terms != null)\n            termsEnums.add(terms.iterator());\n        }\n      }\n      \n      boolean isEmpty = termsEnums.isEmpty();\n\n      try { \n        BytesRefIterator iter = dict.getEntryIterator();\n        BytesRef currentTerm;\n        \n        terms: while ((currentTerm = iter.next()) != null) {\n  \n          String word = currentTerm.utf8ToString();\n          int len = word.length();\n          if (len < 3) {\n            continue; // too short we bail but \"too long\" is fine...\n          }\n  \n          if (!isEmpty) {\n            for (TermsEnum te : termsEnums) {\n              if (te.seekExact(currentTerm)) {\n                continue terms;\n              }\n            }\n          }\n  \n          // ok index the word\n          Document doc = createDocument(word, getMin(len), getMax(len));\n          writer.addDocument(doc);\n        }\n      } finally {\n        releaseSearcher(indexSearcher);\n      }\n      if (fullMerge) {\n        writer.forceMerge(1);\n      }\n      // close writer\n      writer.close();\n      // TODO: this isn't that great, maybe in the future SpellChecker should take\n      // IWC in its ctor / keep its writer open?\n      \n      // also re-open the spell index to see our own changes when the next suggestion\n      // is fetched:\n      swapSearcher(dir);\n    }\n  }\n\n","sourceOld":"  /**\n   * Indexes the data from the given {@link Dictionary}.\n   * @param dict Dictionary to index\n   * @param config {@link IndexWriterConfig} to use\n   * @param fullMerge whether or not the spellcheck index should be fully merged\n   * @throws AlreadyClosedException if the Spellchecker is already closed\n   * @throws IOException If there is a low-level I/O error.\n   */\n  public final void indexDictionary(Dictionary dict, IndexWriterConfig config, boolean fullMerge) throws IOException {\n    synchronized (modifyCurrentIndexLock) {\n      ensureOpen();\n      final Directory dir = this.spellIndex;\n      final IndexWriter writer = new IndexWriter(dir, config);\n      IndexSearcher indexSearcher = obtainSearcher();\n      final List<TermsEnum> termsEnums = new ArrayList<>();\n\n      final IndexReader reader = searcher.getIndexReader();\n      if (reader.maxDoc() > 0) {\n        for (final LeafReaderContext ctx : reader.leaves()) {\n          Terms terms = ctx.reader().terms(F_WORD);\n          if (terms != null)\n            termsEnums.add(terms.iterator(null));\n        }\n      }\n      \n      boolean isEmpty = termsEnums.isEmpty();\n\n      try { \n        BytesRefIterator iter = dict.getEntryIterator();\n        BytesRef currentTerm;\n        \n        terms: while ((currentTerm = iter.next()) != null) {\n  \n          String word = currentTerm.utf8ToString();\n          int len = word.length();\n          if (len < 3) {\n            continue; // too short we bail but \"too long\" is fine...\n          }\n  \n          if (!isEmpty) {\n            for (TermsEnum te : termsEnums) {\n              if (te.seekExact(currentTerm)) {\n                continue terms;\n              }\n            }\n          }\n  \n          // ok index the word\n          Document doc = createDocument(word, getMin(len), getMax(len));\n          writer.addDocument(doc);\n        }\n      } finally {\n        releaseSearcher(indexSearcher);\n      }\n      if (fullMerge) {\n        writer.forceMerge(1);\n      }\n      // close writer\n      writer.close();\n      // TODO: this isn't that great, maybe in the future SpellChecker should take\n      // IWC in its ctor / keep its writer open?\n      \n      // also re-open the spell index to see our own changes when the next suggestion\n      // is fetched:\n      swapSearcher(dir);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["d743dbdc40bef0a47a5d54d99623ef0c2eb5923e"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["a645276cbaf5dc96a42fd473b9019bde352996c8"],"4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b05c56a41b733e02a189c48895922b5bd8c7f3d1":["4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c","d743dbdc40bef0a47a5d54d99623ef0c2eb5923e"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["eee5f2a24465d2c9a5f86ab84b7c35041a30fda8"],"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198":["4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c","d743dbdc40bef0a47a5d54d99623ef0c2eb5923e"],"a645276cbaf5dc96a42fd473b9019bde352996c8":["19275ba31e621f6da1b83bf13af75233876fd3d4"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"d743dbdc40bef0a47a5d54d99623ef0c2eb5923e":["4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"eee5f2a24465d2c9a5f86ab84b7c35041a30fda8":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82"]},"commit2Childs":{"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","eee5f2a24465d2c9a5f86ab84b7c35041a30fda8"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c":["b05c56a41b733e02a189c48895922b5bd8c7f3d1","c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","d743dbdc40bef0a47a5d54d99623ef0c2eb5923e"],"b05c56a41b733e02a189c48895922b5bd8c7f3d1":[],"19275ba31e621f6da1b83bf13af75233876fd3d4":["a645276cbaf5dc96a42fd473b9019bde352996c8"],"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198":[],"a645276cbaf5dc96a42fd473b9019bde352996c8":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"d743dbdc40bef0a47a5d54d99623ef0c2eb5923e":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","b05c56a41b733e02a189c48895922b5bd8c7f3d1","c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"eee5f2a24465d2c9a5f86ab84b7c35041a30fda8":["19275ba31e621f6da1b83bf13af75233876fd3d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b05c56a41b733e02a189c48895922b5bd8c7f3d1","c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}