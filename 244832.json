{"path":"lucene/src/java/org/apache/lucene/index/values/Floats.Float8Writer#finish(int).mjava","commits":[{"id":"01f60198ece724a6e96cd0b45f289cf42ff83d4f","date":1286864103,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/values/Floats.Float8Writer#finish(int).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    synchronized public void finish(int docCount) throws IOException {\n      if (datOut == null)\n        return; // no data added - don't create file!\n      if (docCount > lastDocId + 1)\n        for (int i = lastDocId; i < docCount; i++) {\n          datOut.writeLong(LONG_ZERO); // default value\n        }\n      datOut.close();\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2d84736c4614acce6720851cbd2c823d7cd516e4","date":1290551630,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/values/Floats.Float8Writer#finish(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/Floats.Float8Writer#finish(int).mjava","sourceNew":"    @Override\n    synchronized public void finish(int docCount) throws IOException {\n      if (datOut == null)\n        return; // no data added - don't create file!\n      if (docCount > lastDocId + 1)\n        for (int i = lastDocId; i < docCount; i++) {\n          datOut.writeLong(LONG_DEFAULT); // default value\n        }\n      datOut.close();\n    }\n\n","sourceOld":"    @Override\n    synchronized public void finish(int docCount) throws IOException {\n      if (datOut == null)\n        return; // no data added - don't create file!\n      if (docCount > lastDocId + 1)\n        for (int i = lastDocId; i < docCount; i++) {\n          datOut.writeLong(LONG_ZERO); // default value\n        }\n      datOut.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab5cb6a74aefb78aa0569857970b9151dfe2e787","date":1292842407,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/values/Floats.Float8Writer#finish(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/Floats.Float8Writer#finish(int).mjava","sourceNew":"    @Override\n    synchronized public void finish(int docCount) throws IOException {\n      try {\n        if (docCount > lastDocId + 1)\n          for (int i = lastDocId; i < docCount; i++) {\n            datOut.writeLong(LONG_DEFAULT); // default value\n          }\n      } finally {\n        datOut.close();\n      }\n    }\n\n","sourceOld":"    @Override\n    synchronized public void finish(int docCount) throws IOException {\n      if (datOut == null)\n        return; // no data added - don't create file!\n      if (docCount > lastDocId + 1)\n        for (int i = lastDocId; i < docCount; i++) {\n          datOut.writeLong(LONG_DEFAULT); // default value\n        }\n      datOut.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9235b9d4454a46c066cda47fed7ca0a34e614529","date":1304414372,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/values/Floats.Float8Writer#finish(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/Floats.Float8Writer#finish(int).mjava","sourceNew":"    @Override\n    public void finish(int docCount) throws IOException {\n      try {\n        if (docCount > lastDocId + 1)\n          for (int i = lastDocId; i < docCount; i++) {\n            datOut.writeLong(LONG_DEFAULT); // default value\n          }\n      } finally {\n        datOut.close();\n      }\n    }\n\n","sourceOld":"    @Override\n    synchronized public void finish(int docCount) throws IOException {\n      try {\n        if (docCount > lastDocId + 1)\n          for (int i = lastDocId; i < docCount; i++) {\n            datOut.writeLong(LONG_DEFAULT); // default value\n          }\n      } finally {\n        datOut.close();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e8d7ba2175f47e280231533f7d3016249cea88b","date":1307711934,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/values/Floats.Float8Writer#finish(int).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public void finish(int docCount) throws IOException {\n      try {\n        if (docCount > lastDocId + 1)\n          for (int i = lastDocId; i < docCount; i++) {\n            datOut.writeLong(LONG_DEFAULT); // default value\n          }\n      } finally {\n        datOut.close();\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","date":1307729864,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/values/Floats.Float8Writer#finish(int).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public void finish(int docCount) throws IOException {\n      try {\n        if (docCount > lastDocId + 1)\n          for (int i = lastDocId; i < docCount; i++) {\n            datOut.writeLong(LONG_DEFAULT); // default value\n          }\n      } finally {\n        datOut.close();\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d99ebe8731bf50d5cb230be452816572bdfd7037","date":1309162035,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/values/Floats.Float8Writer#finish(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/Floats.Float8Writer#finish(int).mjava","sourceNew":"    @Override\n    public void finish(int docCount) throws IOException {\n      boolean success = false;\n      try {\n        int numDefaultsToAppend = docCount - (lastDocId + 1);\n        if (datOut == null) {\n          initDataOut();\n          for (int i = 0; i <= lastDocId; i++) {\n            datOut.writeLong(values[i]);\n          }\n        }\n        fillDefault(numDefaultsToAppend);\n        success = true;\n      } finally {\n        bytesUsed.addAndGet(-(RamUsageEstimator.NUM_BYTES_LONG\n            * ((values.length))));\n        values = null;\n        IOUtils.closeSafely(!success, datOut);\n      }\n    }\n\n","sourceOld":"    @Override\n    public void finish(int docCount) throws IOException {\n      try {\n        if (docCount > lastDocId + 1)\n          for (int i = lastDocId; i < docCount; i++) {\n            datOut.writeLong(LONG_DEFAULT); // default value\n          }\n      } finally {\n        datOut.close();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2553b00f699380c64959ccb27991289aae87be2e","date":1309290151,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/values/Floats.Float8Writer#finish(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/Floats.Float8Writer#finish(int).mjava","sourceNew":"    @Override\n    public void finish(int docCount) throws IOException {\n      boolean success = false;\n      try {\n        int numDefaultsToAppend = docCount - (lastDocId + 1);\n        if (datOut == null) {\n          initDataOut();\n          for (int i = 0; i <= lastDocId; i++) {\n            datOut.writeLong(values[i]);\n          }\n        }\n        fillDefault(numDefaultsToAppend);\n        success = true;\n      } finally {\n        bytesUsed.addAndGet(-(RamUsageEstimator.NUM_BYTES_LONG\n            * ((values.length))));\n        values = null;\n        IOUtils.closeSafely(!success, datOut);\n      }\n    }\n\n","sourceOld":"    @Override\n    public void finish(int docCount) throws IOException {\n      try {\n        if (docCount > lastDocId + 1)\n          for (int i = lastDocId; i < docCount; i++) {\n            datOut.writeLong(LONG_DEFAULT); // default value\n          }\n      } finally {\n        datOut.close();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/values/Floats.Float8Writer#finish(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/Floats.Float8Writer#finish(int).mjava","sourceNew":"    @Override\n    public void finish(int docCount) throws IOException {\n      boolean success = false;\n      try {\n        int numDefaultsToAppend = docCount - (lastDocId + 1);\n        if (datOut == null) {\n          initDataOut();\n          for (int i = 0; i <= lastDocId; i++) {\n            datOut.writeLong(values[i]);\n          }\n        }\n        fillDefault(numDefaultsToAppend);\n        success = true;\n      } finally {\n        bytesUsed.addAndGet(-(RamUsageEstimator.NUM_BYTES_LONG\n            * ((values.length))));\n        values = null;\n        IOUtils.closeSafely(!success, datOut);\n      }\n    }\n\n","sourceOld":"    @Override\n    public void finish(int docCount) throws IOException {\n      try {\n        if (docCount > lastDocId + 1)\n          for (int i = lastDocId; i < docCount; i++) {\n            datOut.writeLong(LONG_DEFAULT); // default value\n          }\n      } finally {\n        datOut.close();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"24230fe54121f9be9d85f2c2067536296785e421","date":1314462346,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/values/Floats.Float8Writer#finish(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/Floats.Float8Writer#finish(int).mjava","sourceNew":"    @Override\n    public void finish(int docCount) throws IOException {\n      boolean success = false;\n      try {\n        int numDefaultsToAppend = docCount - (lastDocId + 1);\n        if (datOut == null) {\n          initDataOut();\n          for (int i = 0; i <= lastDocId; i++) {\n            datOut.writeLong(values[i]);\n          }\n        }\n        fillDefault(numDefaultsToAppend);\n        success = true;\n      } finally {\n        bytesUsed.addAndGet(-(RamUsageEstimator.NUM_BYTES_LONG\n            * ((values.length))));\n        values = null;\n        if (success) {\n          IOUtils.close(datOut);\n        } else {\n          IOUtils.closeWhileHandlingException(datOut);\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void finish(int docCount) throws IOException {\n      boolean success = false;\n      try {\n        int numDefaultsToAppend = docCount - (lastDocId + 1);\n        if (datOut == null) {\n          initDataOut();\n          for (int i = 0; i <= lastDocId; i++) {\n            datOut.writeLong(values[i]);\n          }\n        }\n        fillDefault(numDefaultsToAppend);\n        success = true;\n      } finally {\n        bytesUsed.addAndGet(-(RamUsageEstimator.NUM_BYTES_LONG\n            * ((values.length))));\n        values = null;\n        IOUtils.closeSafely(!success, datOut);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85eb75e0c0203e44dcf686f35876cf6080f3a671","date":1317221550,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/values/Bytes.DerefBytesWriterBase#finish(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/Floats.Float8Writer#finish(int).mjava","sourceNew":"    // Important that we get docCount, in case there were\n    // some last docs that we didn't see\n    @Override\n    public void finish(int docCount) throws IOException {\n      boolean success = false;\n      try {\n        finishInternal(docCount);\n        success = true;\n      } finally {\n        releaseResources();\n        if (success) {\n          IOUtils.close(getIndexOut(), getDataOut());\n        } else {\n          IOUtils.closeWhileHandlingException(getIndexOut(), getDataOut());\n        }\n        \n      }\n    }\n\n","sourceOld":"    @Override\n    public void finish(int docCount) throws IOException {\n      boolean success = false;\n      try {\n        int numDefaultsToAppend = docCount - (lastDocId + 1);\n        if (datOut == null) {\n          initDataOut();\n          for (int i = 0; i <= lastDocId; i++) {\n            datOut.writeLong(values[i]);\n          }\n        }\n        fillDefault(numDefaultsToAppend);\n        success = true;\n      } finally {\n        bytesUsed.addAndGet(-(RamUsageEstimator.NUM_BYTES_LONG\n            * ((values.length))));\n        values = null;\n        if (success) {\n          IOUtils.close(datOut);\n        } else {\n          IOUtils.closeWhileHandlingException(datOut);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"24230fe54121f9be9d85f2c2067536296785e421":["d99ebe8731bf50d5cb230be452816572bdfd7037"],"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2e8d7ba2175f47e280231533f7d3016249cea88b"],"d99ebe8731bf50d5cb230be452816572bdfd7037":["2e8d7ba2175f47e280231533f7d3016249cea88b"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["2d84736c4614acce6720851cbd2c823d7cd516e4","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2553b00f699380c64959ccb27991289aae87be2e":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","d99ebe8731bf50d5cb230be452816572bdfd7037"],"01f60198ece724a6e96cd0b45f289cf42ff83d4f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["2e8d7ba2175f47e280231533f7d3016249cea88b","d99ebe8731bf50d5cb230be452816572bdfd7037"],"9235b9d4454a46c066cda47fed7ca0a34e614529":["ab5cb6a74aefb78aa0569857970b9151dfe2e787"],"2d84736c4614acce6720851cbd2c823d7cd516e4":["01f60198ece724a6e96cd0b45f289cf42ff83d4f"],"2e8d7ba2175f47e280231533f7d3016249cea88b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9235b9d4454a46c066cda47fed7ca0a34e614529"],"85eb75e0c0203e44dcf686f35876cf6080f3a671":["24230fe54121f9be9d85f2c2067536296785e421"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["85eb75e0c0203e44dcf686f35876cf6080f3a671"]},"commit2Childs":{"24230fe54121f9be9d85f2c2067536296785e421":["85eb75e0c0203e44dcf686f35876cf6080f3a671"],"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["2553b00f699380c64959ccb27991289aae87be2e"],"d99ebe8731bf50d5cb230be452816572bdfd7037":["24230fe54121f9be9d85f2c2067536296785e421","2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["9235b9d4454a46c066cda47fed7ca0a34e614529"],"2553b00f699380c64959ccb27991289aae87be2e":[],"01f60198ece724a6e96cd0b45f289cf42ff83d4f":["2d84736c4614acce6720851cbd2c823d7cd516e4"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"2d84736c4614acce6720851cbd2c823d7cd516e4":["ab5cb6a74aefb78aa0569857970b9151dfe2e787"],"9235b9d4454a46c066cda47fed7ca0a34e614529":["2e8d7ba2175f47e280231533f7d3016249cea88b"],"2e8d7ba2175f47e280231533f7d3016249cea88b":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","d99ebe8731bf50d5cb230be452816572bdfd7037","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","ab5cb6a74aefb78aa0569857970b9151dfe2e787","01f60198ece724a6e96cd0b45f289cf42ff83d4f","2e8d7ba2175f47e280231533f7d3016249cea88b"],"85eb75e0c0203e44dcf686f35876cf6080f3a671":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}