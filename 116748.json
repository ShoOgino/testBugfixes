{"path":"lucene/test-framework/src/java/org/apache/lucene/util/automaton/AutomatonTestUtil#determinizeSimpleLight(LightAutomaton,Set[Integer]).mjava","commits":[{"id":"ac34f0c5bb9274821fb0cb18075234e02002e9bf","date":1402508126,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/automaton/AutomatonTestUtil#determinizeSimpleLight(LightAutomaton,Set[Integer]).mjava","pathOld":"/dev/null","sourceNew":"  /** \n   * Simple, original brics implementation of determinize()\n   * Determinizes the given automaton using the given set of initial states. \n   */\n  public static LightAutomaton determinizeSimpleLight(LightAutomaton a, Set<Integer> initialset) {\n    int[] points = a.getStartPoints();\n    // subset construction\n    Map<Set<Integer>, Set<Integer>> sets = new HashMap<>();\n    LinkedList<Set<Integer>> worklist = new LinkedList<>();\n    Map<Set<Integer>, Integer> newstate = new HashMap<>();\n    sets.put(initialset, initialset);\n    worklist.add(initialset);\n    LightAutomaton.Builder result = new LightAutomaton.Builder();\n    result.createState();\n    newstate.put(initialset, 0);\n    LightAutomaton.Transition t = new LightAutomaton.Transition();\n    while (worklist.size() > 0) {\n      Set<Integer> s = worklist.removeFirst();\n      int r = newstate.get(s);\n      for (int q : s) {\n        if (a.isAccept(q)) {\n          result.setAccept(r, true);\n          break;\n        }\n      }\n      for (int n = 0; n < points.length; n++) {\n        Set<Integer> p = new HashSet<>();\n        for (int q : s) {\n          int count = a.initTransition(q, t);\n          for(int i=0;i<count;i++) {\n            a.getNextTransition(t);\n            if (t.min <= points[n] && points[n] <= t.max) {\n              p.add(t.dest);\n            }\n          }\n        }\n\n        if (!sets.containsKey(p)) {\n          sets.put(p, p);\n          worklist.add(p);\n          newstate.put(p, result.createState());\n        }\n        int q = newstate.get(p);\n        int min = points[n];\n        int max;\n        if (n + 1 < points.length) {\n          max = points[n + 1] - 1;\n        } else {\n          max = Character.MAX_CODE_POINT;\n        }\n        result.addTransition(r, q, min, max);\n      }\n    }\n\n    return BasicOperations.removeDeadTransitions(result.finish());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0c8cfaac638acc80d26d08288440ede37e6539e9","date":1402678000,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/automaton/AutomatonTestUtil#determinizeSimpleLight(LightAutomaton,Set[Integer]).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/automaton/AutomatonTestUtil#determinizeSimpleLight(LightAutomaton,Set[Integer]).mjava","sourceNew":"  /** \n   * Simple, original brics implementation of determinize()\n   * Determinizes the given automaton using the given set of initial states. \n   */\n  public static LightAutomaton determinizeSimpleLight(LightAutomaton a, Set<Integer> initialset) {\n    int[] points = a.getStartPoints();\n    // subset construction\n    Map<Set<Integer>, Set<Integer>> sets = new HashMap<>();\n    LinkedList<Set<Integer>> worklist = new LinkedList<>();\n    Map<Set<Integer>, Integer> newstate = new HashMap<>();\n    sets.put(initialset, initialset);\n    worklist.add(initialset);\n    LightAutomaton.Builder result = new LightAutomaton.Builder();\n    result.createState();\n    newstate.put(initialset, 0);\n    Transition t = new Transition();\n    while (worklist.size() > 0) {\n      Set<Integer> s = worklist.removeFirst();\n      int r = newstate.get(s);\n      for (int q : s) {\n        if (a.isAccept(q)) {\n          result.setAccept(r, true);\n          break;\n        }\n      }\n      for (int n = 0; n < points.length; n++) {\n        Set<Integer> p = new HashSet<>();\n        for (int q : s) {\n          int count = a.initTransition(q, t);\n          for(int i=0;i<count;i++) {\n            a.getNextTransition(t);\n            if (t.min <= points[n] && points[n] <= t.max) {\n              p.add(t.dest);\n            }\n          }\n        }\n\n        if (!sets.containsKey(p)) {\n          sets.put(p, p);\n          worklist.add(p);\n          newstate.put(p, result.createState());\n        }\n        int q = newstate.get(p);\n        int min = points[n];\n        int max;\n        if (n + 1 < points.length) {\n          max = points[n + 1] - 1;\n        } else {\n          max = Character.MAX_CODE_POINT;\n        }\n        result.addTransition(r, q, min, max);\n      }\n    }\n\n    return BasicOperations.removeDeadTransitions(result.finish());\n  }\n\n","sourceOld":"  /** \n   * Simple, original brics implementation of determinize()\n   * Determinizes the given automaton using the given set of initial states. \n   */\n  public static LightAutomaton determinizeSimpleLight(LightAutomaton a, Set<Integer> initialset) {\n    int[] points = a.getStartPoints();\n    // subset construction\n    Map<Set<Integer>, Set<Integer>> sets = new HashMap<>();\n    LinkedList<Set<Integer>> worklist = new LinkedList<>();\n    Map<Set<Integer>, Integer> newstate = new HashMap<>();\n    sets.put(initialset, initialset);\n    worklist.add(initialset);\n    LightAutomaton.Builder result = new LightAutomaton.Builder();\n    result.createState();\n    newstate.put(initialset, 0);\n    LightAutomaton.Transition t = new LightAutomaton.Transition();\n    while (worklist.size() > 0) {\n      Set<Integer> s = worklist.removeFirst();\n      int r = newstate.get(s);\n      for (int q : s) {\n        if (a.isAccept(q)) {\n          result.setAccept(r, true);\n          break;\n        }\n      }\n      for (int n = 0; n < points.length; n++) {\n        Set<Integer> p = new HashSet<>();\n        for (int q : s) {\n          int count = a.initTransition(q, t);\n          for(int i=0;i<count;i++) {\n            a.getNextTransition(t);\n            if (t.min <= points[n] && points[n] <= t.max) {\n              p.add(t.dest);\n            }\n          }\n        }\n\n        if (!sets.containsKey(p)) {\n          sets.put(p, p);\n          worklist.add(p);\n          newstate.put(p, result.createState());\n        }\n        int q = newstate.get(p);\n        int min = points[n];\n        int max;\n        if (n + 1 < points.length) {\n          max = points[n + 1] - 1;\n        } else {\n          max = Character.MAX_CODE_POINT;\n        }\n        result.addTransition(r, q, min, max);\n      }\n    }\n\n    return BasicOperations.removeDeadTransitions(result.finish());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a67285d1a68175d877eb9fd1624fccad3db028ff","date":1402779028,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/automaton/AutomatonTestUtil#determinizeSimpleLight(LightAutomaton,Set[Integer]).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/automaton/AutomatonTestUtil#determinizeSimpleLight(LightAutomaton,Set[Integer]).mjava","sourceNew":"  /** \n   * Simple, original brics implementation of determinize()\n   * Determinizes the given automaton using the given set of initial states. \n   */\n  public static LightAutomaton determinizeSimpleLight(LightAutomaton a, Set<Integer> initialset) {\n    int[] points = a.getStartPoints();\n    // subset construction\n    Map<Set<Integer>, Set<Integer>> sets = new HashMap<>();\n    LinkedList<Set<Integer>> worklist = new LinkedList<>();\n    Map<Set<Integer>, Integer> newstate = new HashMap<>();\n    sets.put(initialset, initialset);\n    worklist.add(initialset);\n    LightAutomaton.Builder result = new LightAutomaton.Builder();\n    result.createState();\n    newstate.put(initialset, 0);\n    Transition t = new Transition();\n    while (worklist.size() > 0) {\n      Set<Integer> s = worklist.removeFirst();\n      int r = newstate.get(s);\n      for (int q : s) {\n        if (a.isAccept(q)) {\n          result.setAccept(r, true);\n          break;\n        }\n      }\n      for (int n = 0; n < points.length; n++) {\n        Set<Integer> p = new HashSet<>();\n        for (int q : s) {\n          int count = a.initTransition(q, t);\n          for(int i=0;i<count;i++) {\n            a.getNextTransition(t);\n            if (t.min <= points[n] && points[n] <= t.max) {\n              p.add(t.dest);\n            }\n          }\n        }\n\n        if (!sets.containsKey(p)) {\n          sets.put(p, p);\n          worklist.add(p);\n          newstate.put(p, result.createState());\n        }\n        int q = newstate.get(p);\n        int min = points[n];\n        int max;\n        if (n + 1 < points.length) {\n          max = points[n + 1] - 1;\n        } else {\n          max = Character.MAX_CODE_POINT;\n        }\n        result.addTransition(r, q, min, max);\n      }\n    }\n\n    return BasicOperations.removeDeadStates(result.finish());\n  }\n\n","sourceOld":"  /** \n   * Simple, original brics implementation of determinize()\n   * Determinizes the given automaton using the given set of initial states. \n   */\n  public static LightAutomaton determinizeSimpleLight(LightAutomaton a, Set<Integer> initialset) {\n    int[] points = a.getStartPoints();\n    // subset construction\n    Map<Set<Integer>, Set<Integer>> sets = new HashMap<>();\n    LinkedList<Set<Integer>> worklist = new LinkedList<>();\n    Map<Set<Integer>, Integer> newstate = new HashMap<>();\n    sets.put(initialset, initialset);\n    worklist.add(initialset);\n    LightAutomaton.Builder result = new LightAutomaton.Builder();\n    result.createState();\n    newstate.put(initialset, 0);\n    Transition t = new Transition();\n    while (worklist.size() > 0) {\n      Set<Integer> s = worklist.removeFirst();\n      int r = newstate.get(s);\n      for (int q : s) {\n        if (a.isAccept(q)) {\n          result.setAccept(r, true);\n          break;\n        }\n      }\n      for (int n = 0; n < points.length; n++) {\n        Set<Integer> p = new HashSet<>();\n        for (int q : s) {\n          int count = a.initTransition(q, t);\n          for(int i=0;i<count;i++) {\n            a.getNextTransition(t);\n            if (t.min <= points[n] && points[n] <= t.max) {\n              p.add(t.dest);\n            }\n          }\n        }\n\n        if (!sets.containsKey(p)) {\n          sets.put(p, p);\n          worklist.add(p);\n          newstate.put(p, result.createState());\n        }\n        int q = newstate.get(p);\n        int min = points[n];\n        int max;\n        if (n + 1 < points.length) {\n          max = points[n + 1] - 1;\n        } else {\n          max = Character.MAX_CODE_POINT;\n        }\n        result.addTransition(r, q, min, max);\n      }\n    }\n\n    return BasicOperations.removeDeadTransitions(result.finish());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"31d9b8f9a2d48c7d06f33dd5734fbbca9d176ec9","date":1402946522,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/automaton/AutomatonTestUtil#determinizeSimpleLight(LightAutomaton,Set[Integer]).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/automaton/AutomatonTestUtil#determinizeSimpleLight(LightAutomaton,Set[Integer]).mjava","sourceNew":"  /** \n   * Simple, original brics implementation of determinize()\n   * Determinizes the given automaton using the given set of initial states. \n   */\n  public static LightAutomaton determinizeSimpleLight(LightAutomaton a, Set<Integer> initialset) {\n    if (a.getNumStates() == 0) {\n      return a;\n    }\n    int[] points = a.getStartPoints();\n    // subset construction\n    Map<Set<Integer>, Set<Integer>> sets = new HashMap<>();\n    LinkedList<Set<Integer>> worklist = new LinkedList<>();\n    Map<Set<Integer>, Integer> newstate = new HashMap<>();\n    sets.put(initialset, initialset);\n    worklist.add(initialset);\n    LightAutomaton.Builder result = new LightAutomaton.Builder();\n    result.createState();\n    newstate.put(initialset, 0);\n    Transition t = new Transition();\n    while (worklist.size() > 0) {\n      Set<Integer> s = worklist.removeFirst();\n      int r = newstate.get(s);\n      for (int q : s) {\n        if (a.isAccept(q)) {\n          result.setAccept(r, true);\n          break;\n        }\n      }\n      for (int n = 0; n < points.length; n++) {\n        Set<Integer> p = new HashSet<>();\n        for (int q : s) {\n          int count = a.initTransition(q, t);\n          for(int i=0;i<count;i++) {\n            a.getNextTransition(t);\n            if (t.min <= points[n] && points[n] <= t.max) {\n              p.add(t.dest);\n            }\n          }\n        }\n\n        if (!sets.containsKey(p)) {\n          sets.put(p, p);\n          worklist.add(p);\n          newstate.put(p, result.createState());\n        }\n        int q = newstate.get(p);\n        int min = points[n];\n        int max;\n        if (n + 1 < points.length) {\n          max = points[n + 1] - 1;\n        } else {\n          max = Character.MAX_CODE_POINT;\n        }\n        result.addTransition(r, q, min, max);\n      }\n    }\n\n    return BasicOperations.removeDeadStates(result.finish());\n  }\n\n","sourceOld":"  /** \n   * Simple, original brics implementation of determinize()\n   * Determinizes the given automaton using the given set of initial states. \n   */\n  public static LightAutomaton determinizeSimpleLight(LightAutomaton a, Set<Integer> initialset) {\n    int[] points = a.getStartPoints();\n    // subset construction\n    Map<Set<Integer>, Set<Integer>> sets = new HashMap<>();\n    LinkedList<Set<Integer>> worklist = new LinkedList<>();\n    Map<Set<Integer>, Integer> newstate = new HashMap<>();\n    sets.put(initialset, initialset);\n    worklist.add(initialset);\n    LightAutomaton.Builder result = new LightAutomaton.Builder();\n    result.createState();\n    newstate.put(initialset, 0);\n    Transition t = new Transition();\n    while (worklist.size() > 0) {\n      Set<Integer> s = worklist.removeFirst();\n      int r = newstate.get(s);\n      for (int q : s) {\n        if (a.isAccept(q)) {\n          result.setAccept(r, true);\n          break;\n        }\n      }\n      for (int n = 0; n < points.length; n++) {\n        Set<Integer> p = new HashSet<>();\n        for (int q : s) {\n          int count = a.initTransition(q, t);\n          for(int i=0;i<count;i++) {\n            a.getNextTransition(t);\n            if (t.min <= points[n] && points[n] <= t.max) {\n              p.add(t.dest);\n            }\n          }\n        }\n\n        if (!sets.containsKey(p)) {\n          sets.put(p, p);\n          worklist.add(p);\n          newstate.put(p, result.createState());\n        }\n        int q = newstate.get(p);\n        int min = points[n];\n        int max;\n        if (n + 1 < points.length) {\n          max = points[n + 1] - 1;\n        } else {\n          max = Character.MAX_CODE_POINT;\n        }\n        result.addTransition(r, q, min, max);\n      }\n    }\n\n    return BasicOperations.removeDeadStates(result.finish());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ca1c732df8923f5624f6c06b1dcca9e69d98c96","date":1402957391,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/automaton/AutomatonTestUtil#determinizeSimple(Automaton,Set[Integer]).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/automaton/AutomatonTestUtil#determinizeSimpleLight(LightAutomaton,Set[Integer]).mjava","sourceNew":"  /** \n   * Simple, original brics implementation of determinize()\n   * Determinizes the given automaton using the given set of initial states. \n   */\n  public static Automaton determinizeSimple(Automaton a, Set<Integer> initialset) {\n    if (a.getNumStates() == 0) {\n      return a;\n    }\n    int[] points = a.getStartPoints();\n    // subset construction\n    Map<Set<Integer>, Set<Integer>> sets = new HashMap<>();\n    LinkedList<Set<Integer>> worklist = new LinkedList<>();\n    Map<Set<Integer>, Integer> newstate = new HashMap<>();\n    sets.put(initialset, initialset);\n    worklist.add(initialset);\n    Automaton.Builder result = new Automaton.Builder();\n    result.createState();\n    newstate.put(initialset, 0);\n    Transition t = new Transition();\n    while (worklist.size() > 0) {\n      Set<Integer> s = worklist.removeFirst();\n      int r = newstate.get(s);\n      for (int q : s) {\n        if (a.isAccept(q)) {\n          result.setAccept(r, true);\n          break;\n        }\n      }\n      for (int n = 0; n < points.length; n++) {\n        Set<Integer> p = new HashSet<>();\n        for (int q : s) {\n          int count = a.initTransition(q, t);\n          for(int i=0;i<count;i++) {\n            a.getNextTransition(t);\n            if (t.min <= points[n] && points[n] <= t.max) {\n              p.add(t.dest);\n            }\n          }\n        }\n\n        if (!sets.containsKey(p)) {\n          sets.put(p, p);\n          worklist.add(p);\n          newstate.put(p, result.createState());\n        }\n        int q = newstate.get(p);\n        int min = points[n];\n        int max;\n        if (n + 1 < points.length) {\n          max = points[n + 1] - 1;\n        } else {\n          max = Character.MAX_CODE_POINT;\n        }\n        result.addTransition(r, q, min, max);\n      }\n    }\n\n    return Operations.removeDeadStates(result.finish());\n  }\n\n","sourceOld":"  /** \n   * Simple, original brics implementation of determinize()\n   * Determinizes the given automaton using the given set of initial states. \n   */\n  public static LightAutomaton determinizeSimpleLight(LightAutomaton a, Set<Integer> initialset) {\n    if (a.getNumStates() == 0) {\n      return a;\n    }\n    int[] points = a.getStartPoints();\n    // subset construction\n    Map<Set<Integer>, Set<Integer>> sets = new HashMap<>();\n    LinkedList<Set<Integer>> worklist = new LinkedList<>();\n    Map<Set<Integer>, Integer> newstate = new HashMap<>();\n    sets.put(initialset, initialset);\n    worklist.add(initialset);\n    LightAutomaton.Builder result = new LightAutomaton.Builder();\n    result.createState();\n    newstate.put(initialset, 0);\n    Transition t = new Transition();\n    while (worklist.size() > 0) {\n      Set<Integer> s = worklist.removeFirst();\n      int r = newstate.get(s);\n      for (int q : s) {\n        if (a.isAccept(q)) {\n          result.setAccept(r, true);\n          break;\n        }\n      }\n      for (int n = 0; n < points.length; n++) {\n        Set<Integer> p = new HashSet<>();\n        for (int q : s) {\n          int count = a.initTransition(q, t);\n          for(int i=0;i<count;i++) {\n            a.getNextTransition(t);\n            if (t.min <= points[n] && points[n] <= t.max) {\n              p.add(t.dest);\n            }\n          }\n        }\n\n        if (!sets.containsKey(p)) {\n          sets.put(p, p);\n          worklist.add(p);\n          newstate.put(p, result.createState());\n        }\n        int q = newstate.get(p);\n        int min = points[n];\n        int max;\n        if (n + 1 < points.length) {\n          max = points[n + 1] - 1;\n        } else {\n          max = Character.MAX_CODE_POINT;\n        }\n        result.addTransition(r, q, min, max);\n      }\n    }\n\n    return BasicOperations.removeDeadStates(result.finish());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"31d9b8f9a2d48c7d06f33dd5734fbbca9d176ec9":["a67285d1a68175d877eb9fd1624fccad3db028ff"],"a67285d1a68175d877eb9fd1624fccad3db028ff":["0c8cfaac638acc80d26d08288440ede37e6539e9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["31d9b8f9a2d48c7d06f33dd5734fbbca9d176ec9"],"0c8cfaac638acc80d26d08288440ede37e6539e9":["ac34f0c5bb9274821fb0cb18075234e02002e9bf"],"ac34f0c5bb9274821fb0cb18075234e02002e9bf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"31d9b8f9a2d48c7d06f33dd5734fbbca9d176ec9":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"a67285d1a68175d877eb9fd1624fccad3db028ff":["31d9b8f9a2d48c7d06f33dd5734fbbca9d176ec9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ac34f0c5bb9274821fb0cb18075234e02002e9bf","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":[],"0c8cfaac638acc80d26d08288440ede37e6539e9":["a67285d1a68175d877eb9fd1624fccad3db028ff"],"ac34f0c5bb9274821fb0cb18075234e02002e9bf":["0c8cfaac638acc80d26d08288440ede37e6539e9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}