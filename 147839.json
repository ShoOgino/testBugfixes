{"path":"solr/core/src/java/org/apache/solr/handler/component/FacetComponent#doDistribRanges(FacetInfo,NamedList).mjava","commits":[{"id":"84b24f47dd3dfa4e2396cd6f819a35445b0a53fd","date":1406137403,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/FacetComponent#doDistribRanges(FacetInfo,NamedList).mjava","pathOld":"/dev/null","sourceNew":"  private void doDistribRanges(FacetInfo fi, NamedList facet_counts) {\n    @SuppressWarnings(\"unchecked\")\n    SimpleOrderedMap<SimpleOrderedMap<Object>> facet_ranges =\n      (SimpleOrderedMap<SimpleOrderedMap<Object>>)\n      facet_counts.get(\"facet_ranges\");\n\n    if (facet_ranges != null) {\n\n      // go through each facet_range\n      for (Map.Entry<String,SimpleOrderedMap<Object>> entry : facet_ranges) {\n        final String field = entry.getKey();\n        if (fi.rangeFacets.get(field) == null) {\n          // first time we've seen this field, no merging\n          fi.rangeFacets.add(field, entry.getValue());\n\n        } else {\n          // not the first time, merge current field counts\n\n          @SuppressWarnings(\"unchecked\")\n          NamedList<Integer> shardFieldValues\n            = (NamedList<Integer>) entry.getValue().get(\"counts\");\n\n          @SuppressWarnings(\"unchecked\")\n          NamedList<Integer> existFieldValues\n            = (NamedList<Integer>) fi.rangeFacets.get(field).get(\"counts\");\n\n          for (Map.Entry<String,Integer> existPair : existFieldValues) {\n            final String key = existPair.getKey();\n            // can be null if inconsistencies in shards responses\n            Integer newValue = shardFieldValues.get(key);\n            if  (null != newValue) {\n              Integer oldValue = existPair.getValue();\n              existPair.setValue(oldValue + newValue);\n            }\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["b678a63236fcc43012cd10e2892116ee88baee04"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"92751ba9273251eab6a2e379ec42a1697a32ff96","date":1407954233,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/FacetComponent#doDistribRanges(FacetInfo,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/FacetComponent#doDistribRanges(FacetInfo,NamedList).mjava","sourceNew":"  //\n  // The implementation below uses the first encountered shard's\n  // facet_ranges as the basis for subsequent shards' data to be merged.\n  private void doDistribRanges(FacetInfo fi, NamedList facet_counts) {\n    @SuppressWarnings(\"unchecked\")\n    SimpleOrderedMap<SimpleOrderedMap<Object>> facet_ranges =\n      (SimpleOrderedMap<SimpleOrderedMap<Object>>)\n      facet_counts.get(\"facet_ranges\");\n\n    if (facet_ranges != null) {\n\n      // go through each facet_range\n      for (Map.Entry<String,SimpleOrderedMap<Object>> entry : facet_ranges) {\n        final String field = entry.getKey();\n        if (fi.rangeFacets.get(field) == null) {\n          // first time we've seen this field, no merging\n          fi.rangeFacets.add(field, entry.getValue());\n\n        } else {\n          // not the first time, merge current field counts\n\n          @SuppressWarnings(\"unchecked\")\n          NamedList<Integer> shardFieldValues\n            = (NamedList<Integer>) entry.getValue().get(\"counts\");\n\n          @SuppressWarnings(\"unchecked\")\n          NamedList<Integer> existFieldValues\n            = (NamedList<Integer>) fi.rangeFacets.get(field).get(\"counts\");\n\n          for (Map.Entry<String,Integer> existPair : existFieldValues) {\n            final String key = existPair.getKey();\n            // can be null if inconsistencies in shards responses\n            Integer newValue = shardFieldValues.get(key);\n            if  (null != newValue) {\n              Integer oldValue = existPair.getValue();\n              existPair.setValue(oldValue + newValue);\n            }\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void doDistribRanges(FacetInfo fi, NamedList facet_counts) {\n    @SuppressWarnings(\"unchecked\")\n    SimpleOrderedMap<SimpleOrderedMap<Object>> facet_ranges =\n      (SimpleOrderedMap<SimpleOrderedMap<Object>>)\n      facet_counts.get(\"facet_ranges\");\n\n    if (facet_ranges != null) {\n\n      // go through each facet_range\n      for (Map.Entry<String,SimpleOrderedMap<Object>> entry : facet_ranges) {\n        final String field = entry.getKey();\n        if (fi.rangeFacets.get(field) == null) {\n          // first time we've seen this field, no merging\n          fi.rangeFacets.add(field, entry.getValue());\n\n        } else {\n          // not the first time, merge current field counts\n\n          @SuppressWarnings(\"unchecked\")\n          NamedList<Integer> shardFieldValues\n            = (NamedList<Integer>) entry.getValue().get(\"counts\");\n\n          @SuppressWarnings(\"unchecked\")\n          NamedList<Integer> existFieldValues\n            = (NamedList<Integer>) fi.rangeFacets.get(field).get(\"counts\");\n\n          for (Map.Entry<String,Integer> existPair : existFieldValues) {\n            final String key = existPair.getKey();\n            // can be null if inconsistencies in shards responses\n            Integer newValue = shardFieldValues.get(key);\n            if  (null != newValue) {\n              Integer oldValue = existPair.getValue();\n              existPair.setValue(oldValue + newValue);\n            }\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["b678a63236fcc43012cd10e2892116ee88baee04"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b678a63236fcc43012cd10e2892116ee88baee04","date":1429234530,"type":3,"author":"Tomas Eduardo Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/FacetComponent#doDistribRanges(FacetInfo,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/FacetComponent#doDistribRanges(FacetInfo,NamedList).mjava","sourceNew":"  // The implementation below uses the first encountered shard's\n  // facet_ranges as the basis for subsequent shards' data to be merged.\n  private void doDistribRanges(FacetInfo fi, NamedList facet_counts) {\n    @SuppressWarnings(\"unchecked\")\n    SimpleOrderedMap<SimpleOrderedMap<Object>> facet_ranges =\n      (SimpleOrderedMap<SimpleOrderedMap<Object>>)\n      facet_counts.get(\"facet_ranges\");\n\n    if (facet_ranges != null) {\n\n      // go through each facet_range\n      for (Map.Entry<String,SimpleOrderedMap<Object>> entry : facet_ranges) {\n        final String field = entry.getKey();\n        SimpleOrderedMap<Object> fieldMap = fi.rangeFacets.get(field); \n        if (fieldMap == null) {\n          // first time we've seen this field, no merging\n          fi.rangeFacets.add(field, entry.getValue());\n\n        } else {\n          // not the first time, merge current field counts\n\n          @SuppressWarnings(\"unchecked\")\n          NamedList<Integer> shardFieldValues\n            = (NamedList<Integer>) entry.getValue().get(\"counts\");\n\n          @SuppressWarnings(\"unchecked\")\n          NamedList<Integer> existFieldValues\n            = (NamedList<Integer>) fieldMap.get(\"counts\");\n\n          for (Map.Entry<String,Integer> existPair : existFieldValues) {\n            final String key = existPair.getKey();\n            // can be null if inconsistencies in shards responses\n            Integer newValue = shardFieldValues.get(key);\n            if (null != newValue) {\n              Integer oldValue = existPair.getValue();\n              existPair.setValue(oldValue + newValue);\n            }\n          }\n          \n          // merge before/between/after if they exist\n          for (String otherKey:OTHER_KEYS) {\n            Integer shardValue = (Integer)entry.getValue().get(otherKey);\n            if (shardValue != null && shardValue > 0) {\n              Integer existingValue = (Integer)fieldMap.get(otherKey);\n              // shouldn't be null\n              int idx = fieldMap.indexOf(otherKey, 0);\n              fieldMap.setVal(idx, existingValue + shardValue);\n            }\n          }\n          \n        }\n      }\n    }\n  }\n\n","sourceOld":"  //\n  // The implementation below uses the first encountered shard's\n  // facet_ranges as the basis for subsequent shards' data to be merged.\n  private void doDistribRanges(FacetInfo fi, NamedList facet_counts) {\n    @SuppressWarnings(\"unchecked\")\n    SimpleOrderedMap<SimpleOrderedMap<Object>> facet_ranges =\n      (SimpleOrderedMap<SimpleOrderedMap<Object>>)\n      facet_counts.get(\"facet_ranges\");\n\n    if (facet_ranges != null) {\n\n      // go through each facet_range\n      for (Map.Entry<String,SimpleOrderedMap<Object>> entry : facet_ranges) {\n        final String field = entry.getKey();\n        if (fi.rangeFacets.get(field) == null) {\n          // first time we've seen this field, no merging\n          fi.rangeFacets.add(field, entry.getValue());\n\n        } else {\n          // not the first time, merge current field counts\n\n          @SuppressWarnings(\"unchecked\")\n          NamedList<Integer> shardFieldValues\n            = (NamedList<Integer>) entry.getValue().get(\"counts\");\n\n          @SuppressWarnings(\"unchecked\")\n          NamedList<Integer> existFieldValues\n            = (NamedList<Integer>) fi.rangeFacets.get(field).get(\"counts\");\n\n          for (Map.Entry<String,Integer> existPair : existFieldValues) {\n            final String key = existPair.getKey();\n            // can be null if inconsistencies in shards responses\n            Integer newValue = shardFieldValues.get(key);\n            if  (null != newValue) {\n              Integer oldValue = existPair.getValue();\n              existPair.setValue(oldValue + newValue);\n            }\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":["84b24f47dd3dfa4e2396cd6f819a35445b0a53fd","92751ba9273251eab6a2e379ec42a1697a32ff96"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"22d0a81a05eba47d5e18976f17d88306b218cc22","date":1436341569,"type":4,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/handler/component/FacetComponent#doDistribRanges(FacetInfo,NamedList).mjava","sourceNew":null,"sourceOld":"  // The implementation below uses the first encountered shard's\n  // facet_ranges as the basis for subsequent shards' data to be merged.\n  private void doDistribRanges(FacetInfo fi, NamedList facet_counts) {\n    @SuppressWarnings(\"unchecked\")\n    SimpleOrderedMap<SimpleOrderedMap<Object>> facet_ranges =\n      (SimpleOrderedMap<SimpleOrderedMap<Object>>)\n      facet_counts.get(\"facet_ranges\");\n\n    if (facet_ranges != null) {\n\n      // go through each facet_range\n      for (Map.Entry<String,SimpleOrderedMap<Object>> entry : facet_ranges) {\n        final String field = entry.getKey();\n        SimpleOrderedMap<Object> fieldMap = fi.rangeFacets.get(field); \n        if (fieldMap == null) {\n          // first time we've seen this field, no merging\n          fi.rangeFacets.add(field, entry.getValue());\n\n        } else {\n          // not the first time, merge current field counts\n\n          @SuppressWarnings(\"unchecked\")\n          NamedList<Integer> shardFieldValues\n            = (NamedList<Integer>) entry.getValue().get(\"counts\");\n\n          @SuppressWarnings(\"unchecked\")\n          NamedList<Integer> existFieldValues\n            = (NamedList<Integer>) fieldMap.get(\"counts\");\n\n          for (Map.Entry<String,Integer> existPair : existFieldValues) {\n            final String key = existPair.getKey();\n            // can be null if inconsistencies in shards responses\n            Integer newValue = shardFieldValues.get(key);\n            if (null != newValue) {\n              Integer oldValue = existPair.getValue();\n              existPair.setValue(oldValue + newValue);\n            }\n          }\n          \n          // merge before/between/after if they exist\n          for (String otherKey:OTHER_KEYS) {\n            Integer shardValue = (Integer)entry.getValue().get(otherKey);\n            if (shardValue != null && shardValue > 0) {\n              Integer existingValue = (Integer)fieldMap.get(otherKey);\n              // shouldn't be null\n              int idx = fieldMap.indexOf(otherKey, 0);\n              fieldMap.setVal(idx, existingValue + shardValue);\n            }\n          }\n          \n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b678a63236fcc43012cd10e2892116ee88baee04":["92751ba9273251eab6a2e379ec42a1697a32ff96"],"92751ba9273251eab6a2e379ec42a1697a32ff96":["84b24f47dd3dfa4e2396cd6f819a35445b0a53fd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"22d0a81a05eba47d5e18976f17d88306b218cc22":["b678a63236fcc43012cd10e2892116ee88baee04"],"84b24f47dd3dfa4e2396cd6f819a35445b0a53fd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["22d0a81a05eba47d5e18976f17d88306b218cc22"]},"commit2Childs":{"b678a63236fcc43012cd10e2892116ee88baee04":["22d0a81a05eba47d5e18976f17d88306b218cc22"],"92751ba9273251eab6a2e379ec42a1697a32ff96":["b678a63236fcc43012cd10e2892116ee88baee04"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["84b24f47dd3dfa4e2396cd6f819a35445b0a53fd"],"22d0a81a05eba47d5e18976f17d88306b218cc22":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"84b24f47dd3dfa4e2396cd6f819a35445b0a53fd":["92751ba9273251eab6a2e379ec42a1697a32ff96"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}