{"path":"lucene/src/java/org/apache/lucene/util/automaton/State#sortTransitions(Comparator[Transition]).mjava","commits":[{"id":"5acb0ee59cc50caf85402e92d148fdb2af61bc19","date":1272929037,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/State#sortTransitions(Comparator[Transition]).mjava","pathOld":"/dev/null","sourceNew":"  /** Sorts transitions array in-place. */\n  public void sortTransitions(Comparator<Transition> comparator) {\n    Arrays.sort(transitionsArray, 0, numTransitions, comparator);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"360dddd5df2d053c21b429407cd7764bbd6ecb8c","date":1286299499,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/State#sortTransitions(Comparator[Transition]).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/State#sortTransitions(Comparator[Transition]).mjava","sourceNew":"  /** Sorts transitions array in-place. */\n  public void sortTransitions(Comparator<Transition> comparator) {\n    if (numTransitions > 1)\n      Arrays.sort(transitionsArray, 0, numTransitions, comparator);\n  }\n\n","sourceOld":"  /** Sorts transitions array in-place. */\n  public void sortTransitions(Comparator<Transition> comparator) {\n    Arrays.sort(transitionsArray, 0, numTransitions, comparator);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae7aa98ce0c64f3b2b81087d14ff9ae992b4903b","date":1288192616,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/State#sortTransitions(Comparator[Transition]).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/State#sortTransitions(Comparator[Transition]).mjava","sourceNew":"  /** Sorts transitions array in-place. */\n  public void sortTransitions(Comparator<Transition> comparator) {\n    // mergesort seems to perform better on already sorted arrays:\n    if (numTransitions > 1) ArrayUtil.mergeSort(transitionsArray, 0, numTransitions, comparator);\n  }\n\n","sourceOld":"  /** Sorts transitions array in-place. */\n  public void sortTransitions(Comparator<Transition> comparator) {\n    if (numTransitions > 1)\n      Arrays.sort(transitionsArray, 0, numTransitions, comparator);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ca0ffea399542e8aac8ed7608f34f8ec4cb8904d","date":1288424244,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/State#sortTransitions(Comparator[Transition]).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/State#sortTransitions(Comparator[Transition]).mjava","sourceNew":"  /** Sorts transitions array in-place. */\n  public void sortTransitions(Comparator<Transition> comparator) {\n    // mergesort seems to perform better on already sorted arrays:\n    if (numTransitions > 1) ArrayUtil.mergeSort(transitionsArray, 0, numTransitions, comparator);\n  }\n\n","sourceOld":"  /** Sorts transitions array in-place. */\n  public void sortTransitions(Comparator<Transition> comparator) {\n    if (numTransitions > 1)\n      Arrays.sort(transitionsArray, 0, numTransitions, comparator);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/State#sortTransitions(Comparator[Transition]).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/State#sortTransitions(Comparator[Transition]).mjava","sourceNew":"  /** Sorts transitions array in-place. */\n  public void sortTransitions(Comparator<Transition> comparator) {\n    // mergesort seems to perform better on already sorted arrays:\n    if (numTransitions > 1) ArrayUtil.mergeSort(transitionsArray, 0, numTransitions, comparator);\n  }\n\n","sourceOld":"  /** Sorts transitions array in-place. */\n  public void sortTransitions(Comparator<Transition> comparator) {\n    Arrays.sort(transitionsArray, 0, numTransitions, comparator);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/State#sortTransitions(Comparator[Transition]).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/State#sortTransitions(Comparator[Transition]).mjava","sourceNew":"  /** Sorts transitions array in-place. */\n  public void sortTransitions(Comparator<Transition> comparator) {\n    // mergesort seems to perform better on already sorted arrays:\n    if (numTransitions > 1) ArrayUtil.mergeSort(transitionsArray, 0, numTransitions, comparator);\n  }\n\n","sourceOld":"  /** Sorts transitions array in-place. */\n  public void sortTransitions(Comparator<Transition> comparator) {\n    // mergesort seems to perform better on already sorted arrays:\n    if (numTransitions > 1) ArrayUtil.mergeSort(transitionsArray, 0, numTransitions, comparator);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"360dddd5df2d053c21b429407cd7764bbd6ecb8c":["5acb0ee59cc50caf85402e92d148fdb2af61bc19"],"ae7aa98ce0c64f3b2b81087d14ff9ae992b4903b":["360dddd5df2d053c21b429407cd7764bbd6ecb8c"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["ae7aa98ce0c64f3b2b81087d14ff9ae992b4903b"],"5acb0ee59cc50caf85402e92d148fdb2af61bc19":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["5acb0ee59cc50caf85402e92d148fdb2af61bc19","ae7aa98ce0c64f3b2b81087d14ff9ae992b4903b"],"ca0ffea399542e8aac8ed7608f34f8ec4cb8904d":["360dddd5df2d053c21b429407cd7764bbd6ecb8c","ae7aa98ce0c64f3b2b81087d14ff9ae992b4903b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"360dddd5df2d053c21b429407cd7764bbd6ecb8c":["ae7aa98ce0c64f3b2b81087d14ff9ae992b4903b","ca0ffea399542e8aac8ed7608f34f8ec4cb8904d"],"ae7aa98ce0c64f3b2b81087d14ff9ae992b4903b":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","ca0ffea399542e8aac8ed7608f34f8ec4cb8904d"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5acb0ee59cc50caf85402e92d148fdb2af61bc19":["360dddd5df2d053c21b429407cd7764bbd6ecb8c","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5acb0ee59cc50caf85402e92d148fdb2af61bc19"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"ca0ffea399542e8aac8ed7608f34f8ec4cb8904d":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","ca0ffea399542e8aac8ed7608f34f8ec4cb8904d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}