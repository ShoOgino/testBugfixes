{"path":"solr/core/src/test/org/apache/solr/servlet/ResponseHeaderTest#testHttpResponse().mjava","commits":[{"id":"992ee8958a5e702ec8978e61bea29908023389ad","date":1399584397,"type":0,"author":"Ryan Ernst","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/servlet/ResponseHeaderTest#testHttpResponse().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testHttpResponse() throws SolrServerException, IOException {\n    HttpSolrServer client = (HttpSolrServer)getSolrServer();\n    HttpClient httpClient = client.getHttpClient();\n    URI uri = URI.create(client.getBaseURL() + \"/withHeaders?q=*:*\");\n    HttpGet httpGet = new HttpGet(uri);\n    HttpResponse response = httpClient.execute(httpGet);\n    Header[] headers = response.getAllHeaders();\n    boolean containsWarningHeader = false;\n    for (Header header:headers) {\n      if (\"Warning\".equals(header.getName())) {\n        containsWarningHeader = true;\n        assertEquals(\"This is a test warning\", header.getValue());\n        break;\n      }\n    }\n    assertTrue(\"Expected header not found\", containsWarningHeader);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/servlet/ResponseHeaderTest#testHttpResponse().mjava","pathOld":"solr/core/src/test/org/apache/solr/servlet/ResponseHeaderTest#testHttpResponse().mjava","sourceNew":"  @Test\n  public void testHttpResponse() throws SolrServerException, IOException {\n    HttpSolrClient client = (HttpSolrClient) getSolrClient();\n    HttpClient httpClient = client.getHttpClient();\n    URI uri = URI.create(client.getBaseURL() + \"/withHeaders?q=*:*\");\n    HttpGet httpGet = new HttpGet(uri);\n    HttpResponse response = httpClient.execute(httpGet);\n    Header[] headers = response.getAllHeaders();\n    boolean containsWarningHeader = false;\n    for (Header header:headers) {\n      if (\"Warning\".equals(header.getName())) {\n        containsWarningHeader = true;\n        assertEquals(\"This is a test warning\", header.getValue());\n        break;\n      }\n    }\n    assertTrue(\"Expected header not found\", containsWarningHeader);\n  }\n\n","sourceOld":"  @Test\n  public void testHttpResponse() throws SolrServerException, IOException {\n    HttpSolrServer client = (HttpSolrServer)getSolrServer();\n    HttpClient httpClient = client.getHttpClient();\n    URI uri = URI.create(client.getBaseURL() + \"/withHeaders?q=*:*\");\n    HttpGet httpGet = new HttpGet(uri);\n    HttpResponse response = httpClient.execute(httpGet);\n    Header[] headers = response.getAllHeaders();\n    boolean containsWarningHeader = false;\n    for (Header header:headers) {\n      if (\"Warning\".equals(header.getName())) {\n        containsWarningHeader = true;\n        assertEquals(\"This is a test warning\", header.getValue());\n        break;\n      }\n    }\n    assertTrue(\"Expected header not found\", containsWarningHeader);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"992ee8958a5e702ec8978e61bea29908023389ad":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bafca15d8e408346a67f4282ad1143b88023893b":["992ee8958a5e702ec8978e61bea29908023389ad"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bafca15d8e408346a67f4282ad1143b88023893b"]},"commit2Childs":{"992ee8958a5e702ec8978e61bea29908023389ad":["bafca15d8e408346a67f4282ad1143b88023893b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["992ee8958a5e702ec8978e61bea29908023389ad"],"bafca15d8e408346a67f4282ad1143b88023893b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}