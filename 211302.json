{"path":"src/java/org/apache/solr/search/function/distance/HaversineFunction#getValues(Map,IndexReader).mjava","commits":[{"id":"aa4607364a2fc156ffb717ddc21d860e466ac7fd","date":1258218641,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/java/org/apache/solr/search/function/distance/HaversineFunction#getValues(Map,IndexReader).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public DocValues getValues(Map context, IndexReader reader) throws IOException {\n    final DocValues x1DV = x1.getValues(context, reader);\n    final DocValues y1DV = y1.getValues(context, reader);\n    final DocValues x2DV = x2.getValues(context, reader);\n    final DocValues y2DV = y2.getValues(context, reader);\n    return new DocValues() {\n      public float floatVal(int doc) {\n        return (float) doubleVal(doc);\n      }\n\n      public int intVal(int doc) {\n        return (int) doubleVal(doc);\n      }\n\n      public long longVal(int doc) {\n        return (long) doubleVal(doc);\n      }\n\n      public double doubleVal(int doc) {\n        return (double) distance(doc, x1DV, y1DV, x2DV, y2DV);\n      }\n\n      public String strVal(int doc) {\n        return Double.toString(doubleVal(doc));\n      }\n\n      @Override\n      public String toString(int doc) {\n        StringBuilder sb = new StringBuilder();\n        sb.append(name()).append('(');\n        sb.append(x1DV.toString(doc)).append(',').append(y1DV.toString(doc)).append(',')\n                .append(x2DV.toString(doc)).append(',').append(y2DV.toString(doc));\n        sb.append(')');\n        return sb.toString();\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["5eeff6b8391d7b5e70e37193643d76c05a3abf75"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"abec2fd822be07fc74ef5ba3609b9c5625a87d6d","date":1261659802,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/java/org/apache/solr/search/function/distance/HaversineFunction#getValues(Map,IndexReader).mjava","pathOld":"src/java/org/apache/solr/search/function/distance/HaversineFunction#getValues(Map,IndexReader).mjava","sourceNew":"  @Override\n  public DocValues getValues(Map context, IndexReader reader) throws IOException {\n    final DocValues vals1 = p1.getValues(context, reader);\n\n    final DocValues vals2 = p2.getValues(context, reader);\n    return new DocValues() {\n      public float floatVal(int doc) {\n        return (float) doubleVal(doc);\n      }\n\n      public int intVal(int doc) {\n        return (int) doubleVal(doc);\n      }\n\n      public long longVal(int doc) {\n        return (long) doubleVal(doc);\n      }\n\n      public double doubleVal(int doc) {\n        return (double) distance(doc, vals1, vals2);\n      }\n\n      public String strVal(int doc) {\n        return Double.toString(doubleVal(doc));\n      }\n\n      @Override\n      public String toString(int doc) {\n        StringBuilder sb = new StringBuilder();\n        sb.append(name()).append('(');\n        sb.append(vals1.toString(doc)).append(',').append(vals2.toString(doc));\n        sb.append(')');\n        return sb.toString();\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public DocValues getValues(Map context, IndexReader reader) throws IOException {\n    final DocValues x1DV = x1.getValues(context, reader);\n    final DocValues y1DV = y1.getValues(context, reader);\n    final DocValues x2DV = x2.getValues(context, reader);\n    final DocValues y2DV = y2.getValues(context, reader);\n    return new DocValues() {\n      public float floatVal(int doc) {\n        return (float) doubleVal(doc);\n      }\n\n      public int intVal(int doc) {\n        return (int) doubleVal(doc);\n      }\n\n      public long longVal(int doc) {\n        return (long) doubleVal(doc);\n      }\n\n      public double doubleVal(int doc) {\n        return (double) distance(doc, x1DV, y1DV, x2DV, y2DV);\n      }\n\n      public String strVal(int doc) {\n        return Double.toString(doubleVal(doc));\n      }\n\n      @Override\n      public String toString(int doc) {\n        StringBuilder sb = new StringBuilder();\n        sb.append(name()).append('(');\n        sb.append(x1DV.toString(doc)).append(',').append(y1DV.toString(doc)).append(',')\n                .append(x2DV.toString(doc)).append(',').append(y2DV.toString(doc));\n        sb.append(')');\n        return sb.toString();\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/function/distance/HaversineFunction#getValues(Map,IndexReader).mjava","pathOld":"src/java/org/apache/solr/search/function/distance/HaversineFunction#getValues(Map,IndexReader).mjava","sourceNew":"  @Override\n  public DocValues getValues(Map context, IndexReader reader) throws IOException {\n    final DocValues vals1 = p1.getValues(context, reader);\n\n    final DocValues vals2 = p2.getValues(context, reader);\n    return new DocValues() {\n      public float floatVal(int doc) {\n        return (float) doubleVal(doc);\n      }\n\n      public int intVal(int doc) {\n        return (int) doubleVal(doc);\n      }\n\n      public long longVal(int doc) {\n        return (long) doubleVal(doc);\n      }\n\n      public double doubleVal(int doc) {\n        return (double) distance(doc, vals1, vals2);\n      }\n\n      public String strVal(int doc) {\n        return Double.toString(doubleVal(doc));\n      }\n\n      @Override\n      public String toString(int doc) {\n        StringBuilder sb = new StringBuilder();\n        sb.append(name()).append('(');\n        sb.append(vals1.toString(doc)).append(',').append(vals2.toString(doc));\n        sb.append(')');\n        return sb.toString();\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public DocValues getValues(Map context, IndexReader reader) throws IOException {\n    final DocValues vals1 = p1.getValues(context, reader);\n\n    final DocValues vals2 = p2.getValues(context, reader);\n    return new DocValues() {\n      public float floatVal(int doc) {\n        return (float) doubleVal(doc);\n      }\n\n      public int intVal(int doc) {\n        return (int) doubleVal(doc);\n      }\n\n      public long longVal(int doc) {\n        return (long) doubleVal(doc);\n      }\n\n      public double doubleVal(int doc) {\n        return (double) distance(doc, vals1, vals2);\n      }\n\n      public String strVal(int doc) {\n        return Double.toString(doubleVal(doc));\n      }\n\n      @Override\n      public String toString(int doc) {\n        StringBuilder sb = new StringBuilder();\n        sb.append(name()).append('(');\n        sb.append(vals1.toString(doc)).append(',').append(vals2.toString(doc));\n        sb.append(')');\n        return sb.toString();\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"abec2fd822be07fc74ef5ba3609b9c5625a87d6d":["aa4607364a2fc156ffb717ddc21d860e466ac7fd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["abec2fd822be07fc74ef5ba3609b9c5625a87d6d"],"aa4607364a2fc156ffb717ddc21d860e466ac7fd":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"abec2fd822be07fc74ef5ba3609b9c5625a87d6d":["ad94625fb8d088209f46650c8097196fec67f00c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["aa4607364a2fc156ffb717ddc21d860e466ac7fd"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"aa4607364a2fc156ffb717ddc21d860e466ac7fd":["abec2fd822be07fc74ef5ba3609b9c5625a87d6d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}