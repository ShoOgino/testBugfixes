{"path":"solr/core/src/java/org/apache/solr/security/AuditEvent#AuditEvent(EventType,HttpServletRequest,AuthorizationContext).mjava","commits":[{"id":"12ddd922ea96c1d0ea68a68506b6984a246cfb22","date":1554385731,"type":0,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/security/AuditEvent#AuditEvent(EventType,HttpServletRequest,AuthorizationContext).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Event based on request and AuthorizationContext. Solr will fill in details\n   * such as collections, ip, http method etc from the context.\n   * @param eventType a predefined or custom EventType\n   * @param httpRequest the request to initialize from\n   * @param authorizationContext the context to initialize from\n   */\n  public AuditEvent(EventType eventType, HttpServletRequest httpRequest, AuthorizationContext authorizationContext) {\n    this(eventType, httpRequest);\n    this.collections = authorizationContext.getCollectionRequests()\n        .stream().map(r -> r.collectionName).collect(Collectors.toList());\n    this.resource = authorizationContext.getResource();\n    this.requestType = RequestType.convertType(authorizationContext.getRequestType());\n    authorizationContext.getParams().forEach(p -> {\n      this.solrParams.put(p.getKey(), Arrays.asList(p.getValue()));\n    });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["ce6483c8098eb123a5c9f90f6957c7b533339038"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"57cfb7f9d94d75c3c5cd21f100fc37ff6d984381","date":1574462060,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/security/AuditEvent#AuditEvent(EventType,HttpServletRequest,AuthorizationContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/security/AuditEvent#AuditEvent(EventType,HttpServletRequest,AuthorizationContext).mjava","sourceNew":"  /**\n   * Event based on request and AuthorizationContext. Solr will fill in details\n   * such as collections, ip, http method etc from the context.\n   * @param eventType a predefined or custom EventType\n   * @param httpRequest the request to initialize from\n   * @param authorizationContext the context to initialize from\n   */\n  public AuditEvent(EventType eventType, HttpServletRequest httpRequest, AuthorizationContext authorizationContext) {\n    this(eventType, httpRequest);\n    this.collections = authorizationContext.getCollectionRequests()\n        .stream().map(r -> r.collectionName).collect(Collectors.toList());\n    setResource(authorizationContext.getResource());\n    this.requestType = RequestType.convertType(authorizationContext.getRequestType());\n    authorizationContext.getParams().forEach(p -> {\n      this.solrParams.put(p.getKey(), Arrays.asList(p.getValue()));\n    });\n  }\n\n","sourceOld":"  /**\n   * Event based on request and AuthorizationContext. Solr will fill in details\n   * such as collections, ip, http method etc from the context.\n   * @param eventType a predefined or custom EventType\n   * @param httpRequest the request to initialize from\n   * @param authorizationContext the context to initialize from\n   */\n  public AuditEvent(EventType eventType, HttpServletRequest httpRequest, AuthorizationContext authorizationContext) {\n    this(eventType, httpRequest);\n    this.collections = authorizationContext.getCollectionRequests()\n        .stream().map(r -> r.collectionName).collect(Collectors.toList());\n    this.resource = authorizationContext.getResource();\n    this.requestType = RequestType.convertType(authorizationContext.getRequestType());\n    authorizationContext.getParams().forEach(p -> {\n      this.solrParams.put(p.getKey(), Arrays.asList(p.getValue()));\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ce6483c8098eb123a5c9f90f6957c7b533339038","date":1579725583,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/security/AuditEvent#AuditEvent(EventType,HttpServletRequest,AuthorizationContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/security/AuditEvent#AuditEvent(EventType,HttpServletRequest,AuthorizationContext).mjava","sourceNew":"  /**\n   * Event based on request and AuthorizationContext. Solr will fill in details\n   * such as collections, ip, http method etc from the context.\n   * @param eventType a predefined or custom EventType\n   * @param httpRequest the request to initialize from\n   * @param authorizationContext the context to initialize from\n   */\n  public AuditEvent(EventType eventType, HttpServletRequest httpRequest, AuthorizationContext authorizationContext) {\n    this(eventType, httpRequest);\n    this.collections = authorizationContext.getCollectionRequests()\n        .stream().map(r -> r.collectionName).collect(Collectors.toList());\n    setResource(authorizationContext.getResource());\n    this.requestType = RequestType.convertType(authorizationContext.getRequestType());\n    if (authorizationContext.getParams() != null) {\n      authorizationContext.getParams().forEach(p -> {\n        this.solrParams.put(p.getKey(), Arrays.asList(p.getValue()));\n      });\n    }\n  }\n\n","sourceOld":"  /**\n   * Event based on request and AuthorizationContext. Solr will fill in details\n   * such as collections, ip, http method etc from the context.\n   * @param eventType a predefined or custom EventType\n   * @param httpRequest the request to initialize from\n   * @param authorizationContext the context to initialize from\n   */\n  public AuditEvent(EventType eventType, HttpServletRequest httpRequest, AuthorizationContext authorizationContext) {\n    this(eventType, httpRequest);\n    this.collections = authorizationContext.getCollectionRequests()\n        .stream().map(r -> r.collectionName).collect(Collectors.toList());\n    setResource(authorizationContext.getResource());\n    this.requestType = RequestType.convertType(authorizationContext.getRequestType());\n    authorizationContext.getParams().forEach(p -> {\n      this.solrParams.put(p.getKey(), Arrays.asList(p.getValue()));\n    });\n  }\n\n","bugFix":["12ddd922ea96c1d0ea68a68506b6984a246cfb22"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"57cfb7f9d94d75c3c5cd21f100fc37ff6d984381":["12ddd922ea96c1d0ea68a68506b6984a246cfb22"],"12ddd922ea96c1d0ea68a68506b6984a246cfb22":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ce6483c8098eb123a5c9f90f6957c7b533339038":["57cfb7f9d94d75c3c5cd21f100fc37ff6d984381"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ce6483c8098eb123a5c9f90f6957c7b533339038"]},"commit2Childs":{"57cfb7f9d94d75c3c5cd21f100fc37ff6d984381":["ce6483c8098eb123a5c9f90f6957c7b533339038"],"12ddd922ea96c1d0ea68a68506b6984a246cfb22":["57cfb7f9d94d75c3c5cd21f100fc37ff6d984381"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["12ddd922ea96c1d0ea68a68506b6984a246cfb22"],"ce6483c8098eb123a5c9f90f6957c7b533339038":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}