{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40NormsFormat#normsConsumer(SegmentWriteState).mjava","commits":[{"id":"3a061a4d303d4aee0918ec2e41c078d900ec23f6","date":1358896586,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40NormsFormat#normsConsumer(SegmentWriteState).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public DocValuesConsumer normsConsumer(SegmentWriteState state) throws IOException {\n    final DocValuesConsumer delegate = super.normsConsumer(state);\n    return new DocValuesConsumer() {\n\n      @Override\n      public void addNumericField(FieldInfo field, Iterable<Number> values) throws IOException {\n        // hack: here we would examine the numerics and simulate in the impersonator the best we can\n        // e.g. if they are all in byte/int range write fixed, otherwise write packed or whatever\n        field.putAttribute(Lucene40FieldInfosReader.LEGACY_NORM_TYPE_KEY, LegacyDocValuesType.VAR_INTS.name());\n        delegate.addNumericField(field, values);\n      }\n      \n      @Override\n      public void addBinaryField(FieldInfo field, Iterable<BytesRef> values) throws IOException {\n        assert false;\n      }\n\n      @Override\n      public void addSortedField(FieldInfo field, Iterable<BytesRef> values, Iterable<Number> docToOrd) throws IOException {\n        assert false;\n      }\n\n      @Override\n      public void close() throws IOException {\n        delegate.close();\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db5a3aeba34624ea274f34df5691d40ca25f2b67","date":1358965297,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40NormsFormat#normsConsumer(SegmentWriteState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40NormsFormat#normsConsumer(SegmentWriteState).mjava","sourceNew":"  @Override\n  public DocValuesConsumer normsConsumer(SegmentWriteState state) throws IOException {\n    throw new UnsupportedOperationException(\"this codec can only be used for reading\");\n  }\n\n","sourceOld":"  @Override\n  public DocValuesConsumer normsConsumer(SegmentWriteState state) throws IOException {\n    final DocValuesConsumer delegate = super.normsConsumer(state);\n    return new DocValuesConsumer() {\n\n      @Override\n      public void addNumericField(FieldInfo field, Iterable<Number> values) throws IOException {\n        // hack: here we would examine the numerics and simulate in the impersonator the best we can\n        // e.g. if they are all in byte/int range write fixed, otherwise write packed or whatever\n        field.putAttribute(Lucene40FieldInfosReader.LEGACY_NORM_TYPE_KEY, LegacyDocValuesType.VAR_INTS.name());\n        delegate.addNumericField(field, values);\n      }\n      \n      @Override\n      public void addBinaryField(FieldInfo field, Iterable<BytesRef> values) throws IOException {\n        assert false;\n      }\n\n      @Override\n      public void addSortedField(FieldInfo field, Iterable<BytesRef> values, Iterable<Number> docToOrd) throws IOException {\n        assert false;\n      }\n\n      @Override\n      public void close() throws IOException {\n        delegate.close();\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40NormsFormat#normsConsumer(SegmentWriteState).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public DocValuesConsumer normsConsumer(SegmentWriteState state) throws IOException {\n    throw new UnsupportedOperationException(\"this codec can only be used for reading\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"22a2e66dfda83847e80095b8693c660742ab3e9c","date":1408628796,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40NormsFormat#normsConsumer(SegmentWriteState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40NormsFormat#normsConsumer(SegmentWriteState).mjava","sourceNew":"  @Override\n  public NormsConsumer normsConsumer(SegmentWriteState state) throws IOException {\n    throw new UnsupportedOperationException(\"this codec can only be used for reading\");\n  }\n\n","sourceOld":"  @Override\n  public DocValuesConsumer normsConsumer(SegmentWriteState state) throws IOException {\n    throw new UnsupportedOperationException(\"this codec can only be used for reading\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cc45c615dbb82bf79d5f9550286098367874fbf","date":1409571423,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/Lucene40NormsFormat#normsConsumer(SegmentWriteState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40NormsFormat#normsConsumer(SegmentWriteState).mjava","sourceNew":"  @Override\n  public NormsConsumer normsConsumer(SegmentWriteState state) throws IOException {\n    throw new UnsupportedOperationException(\"this codec can only be used for reading\");\n  }\n\n","sourceOld":"  @Override\n  public NormsConsumer normsConsumer(SegmentWriteState state) throws IOException {\n    throw new UnsupportedOperationException(\"this codec can only be used for reading\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"402ad3ddc9da7b70da1b167667a60ece6a1381fb","date":1409656478,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/Lucene40NormsFormat#normsConsumer(SegmentWriteState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40NormsFormat#normsConsumer(SegmentWriteState).mjava","sourceNew":"  @Override\n  public NormsConsumer normsConsumer(SegmentWriteState state) throws IOException {\n    throw new UnsupportedOperationException(\"this codec can only be used for reading\");\n  }\n\n","sourceOld":"  @Override\n  public NormsConsumer normsConsumer(SegmentWriteState state) throws IOException {\n    throw new UnsupportedOperationException(\"this codec can only be used for reading\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"db5a3aeba34624ea274f34df5691d40ca25f2b67":["3a061a4d303d4aee0918ec2e41c078d900ec23f6"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","db5a3aeba34624ea274f34df5691d40ca25f2b67"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cc45c615dbb82bf79d5f9550286098367874fbf":["22a2e66dfda83847e80095b8693c660742ab3e9c"],"22a2e66dfda83847e80095b8693c660742ab3e9c":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"3a061a4d303d4aee0918ec2e41c078d900ec23f6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["22a2e66dfda83847e80095b8693c660742ab3e9c","4cc45c615dbb82bf79d5f9550286098367874fbf"]},"commit2Childs":{"db5a3aeba34624ea274f34df5691d40ca25f2b67":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["22a2e66dfda83847e80095b8693c660742ab3e9c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d4d69c535930b5cce125cff868d40f6373dc27d4","3a061a4d303d4aee0918ec2e41c078d900ec23f6"],"4cc45c615dbb82bf79d5f9550286098367874fbf":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"22a2e66dfda83847e80095b8693c660742ab3e9c":["4cc45c615dbb82bf79d5f9550286098367874fbf","402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"3a061a4d303d4aee0918ec2e41c078d900ec23f6":["db5a3aeba34624ea274f34df5691d40ca25f2b67"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}