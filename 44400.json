{"path":"solr/core/src/test/org/apache/hadoop/http/HttpServer2#addInternalServlet(String,String,Class[#-extends-HttpServlet],boolean).mjava","commits":[{"id":"99b97f030e743d8dd4d7685202f71718d7e5af22","date":1548957620,"type":0,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/hadoop/http/HttpServer2#addInternalServlet(String,String,Class[#-extends-HttpServlet],boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Add an internal servlet in the server, specifying whether or not to\n   * protect with Kerberos authentication.\n   * Note: This method is to be used for adding servlets that facilitate\n   * internal communication and not for user facing functionality. For\n   * servlets added using this method, filters (except internal Kerberos\n   * filters) are not enabled.\n   *\n   * @param name The name of the servlet (can be passed as null)\n   * @param pathSpec The path spec for the servlet\n   * @param clazz The servlet class\n   * @param requireAuth Require Kerberos authenticate to access servlet\n   */\n  public void addInternalServlet(String name, String pathSpec,\n                                 Class<? extends HttpServlet> clazz, boolean requireAuth) {\n    ServletHolder holder = new ServletHolder(clazz);\n    if (name != null) {\n      holder.setName(name);\n    }\n    // Jetty doesn't like the same path spec mapping to different servlets, so\n    // if there's already a mapping for this pathSpec, remove it and assume that\n    // the newest one is the one we want\n    final ServletMapping[] servletMappings =\n        webAppContext.getServletHandler().getServletMappings();\n    for (int i = 0; i < servletMappings.length; i++) {\n      if (servletMappings[i].containsPathSpec(pathSpec)) {\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Found existing \" + servletMappings[i].getServletName() +\n              \" servlet at path \" + pathSpec + \"; will replace mapping\" +\n              \" with \" + holder.getName() + \" servlet\");\n        }\n        ServletMapping[] newServletMappings =\n            ArrayUtil.removeFromArray(servletMappings, servletMappings[i]);\n        webAppContext.getServletHandler()\n            .setServletMappings(newServletMappings);\n        break;\n      }\n    }\n    webAppContext.addServlet(holder, pathSpec);\n\n    if(requireAuth && UserGroupInformation.isSecurityEnabled()) {\n      LOG.info(\"Adding Kerberos (SPNEGO) filter to \" + name);\n      ServletHandler handler = webAppContext.getServletHandler();\n      FilterMapping fmap = new FilterMapping();\n      fmap.setPathSpec(pathSpec);\n      fmap.setFilterName(SPNEGO_FILTER);\n      fmap.setDispatches(FilterMapping.ALL);\n      handler.addFilterMapping(fmap);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"34b74c124d68d8e306d6ef09624f3cd053b8a2fd","date":1548981962,"type":4,"author":"Kevin Risden","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/hadoop/http/HttpServer2#addInternalServlet(String,String,Class[#-extends-HttpServlet],boolean).mjava","sourceNew":null,"sourceOld":"  /**\n   * Add an internal servlet in the server, specifying whether or not to\n   * protect with Kerberos authentication.\n   * Note: This method is to be used for adding servlets that facilitate\n   * internal communication and not for user facing functionality. For\n   * servlets added using this method, filters (except internal Kerberos\n   * filters) are not enabled.\n   *\n   * @param name The name of the servlet (can be passed as null)\n   * @param pathSpec The path spec for the servlet\n   * @param clazz The servlet class\n   * @param requireAuth Require Kerberos authenticate to access servlet\n   */\n  public void addInternalServlet(String name, String pathSpec,\n                                 Class<? extends HttpServlet> clazz, boolean requireAuth) {\n    ServletHolder holder = new ServletHolder(clazz);\n    if (name != null) {\n      holder.setName(name);\n    }\n    // Jetty doesn't like the same path spec mapping to different servlets, so\n    // if there's already a mapping for this pathSpec, remove it and assume that\n    // the newest one is the one we want\n    final ServletMapping[] servletMappings =\n        webAppContext.getServletHandler().getServletMappings();\n    for (int i = 0; i < servletMappings.length; i++) {\n      if (servletMappings[i].containsPathSpec(pathSpec)) {\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Found existing \" + servletMappings[i].getServletName() +\n              \" servlet at path \" + pathSpec + \"; will replace mapping\" +\n              \" with \" + holder.getName() + \" servlet\");\n        }\n        ServletMapping[] newServletMappings =\n            ArrayUtil.removeFromArray(servletMappings, servletMappings[i]);\n        webAppContext.getServletHandler()\n            .setServletMappings(newServletMappings);\n        break;\n      }\n    }\n    webAppContext.addServlet(holder, pathSpec);\n\n    if(requireAuth && UserGroupInformation.isSecurityEnabled()) {\n      LOG.info(\"Adding Kerberos (SPNEGO) filter to \" + name);\n      ServletHandler handler = webAppContext.getServletHandler();\n      FilterMapping fmap = new FilterMapping();\n      fmap.setPathSpec(pathSpec);\n      fmap.setFilterName(SPNEGO_FILTER);\n      fmap.setDispatches(FilterMapping.ALL);\n      handler.addFilterMapping(fmap);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"44ca189138a5b6e1989d12ab992fab60e235ddc7","date":1549051496,"type":0,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/hadoop/http/HttpServer2#addInternalServlet(String,String,Class[#-extends-HttpServlet],boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Add an internal servlet in the server, specifying whether or not to\n   * protect with Kerberos authentication.\n   * Note: This method is to be used for adding servlets that facilitate\n   * internal communication and not for user facing functionality. For\n   * servlets added using this method, filters (except internal Kerberos\n   * filters) are not enabled.\n   *\n   * @param name The name of the servlet (can be passed as null)\n   * @param pathSpec The path spec for the servlet\n   * @param clazz The servlet class\n   * @param requireAuth Require Kerberos authenticate to access servlet\n   */\n  public void addInternalServlet(String name, String pathSpec,\n                                 Class<? extends HttpServlet> clazz, boolean requireAuth) {\n    ServletHolder holder = new ServletHolder(clazz);\n    if (name != null) {\n      holder.setName(name);\n    }\n    // Jetty doesn't like the same path spec mapping to different servlets, so\n    // if there's already a mapping for this pathSpec, remove it and assume that\n    // the newest one is the one we want\n    final ServletMapping[] servletMappings =\n        webAppContext.getServletHandler().getServletMappings();\n    for (int i = 0; i < servletMappings.length; i++) {\n      if (servletMappings[i].containsPathSpec(pathSpec)) {\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Found existing \" + servletMappings[i].getServletName() +\n              \" servlet at path \" + pathSpec + \"; will replace mapping\" +\n              \" with \" + holder.getName() + \" servlet\");\n        }\n        ServletMapping[] newServletMappings =\n            ArrayUtil.removeFromArray(servletMappings, servletMappings[i]);\n        webAppContext.getServletHandler()\n            .setServletMappings(newServletMappings);\n        break;\n      }\n    }\n    webAppContext.addServlet(holder, pathSpec);\n\n    if(requireAuth && UserGroupInformation.isSecurityEnabled()) {\n      LOG.info(\"Adding Kerberos (SPNEGO) filter to \" + name);\n      ServletHandler handler = webAppContext.getServletHandler();\n      FilterMapping fmap = new FilterMapping();\n      fmap.setPathSpec(pathSpec);\n      fmap.setFilterName(SPNEGO_FILTER);\n      fmap.setDispatches(FilterMapping.ALL);\n      handler.addFilterMapping(fmap);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a966532d92cf9ba2856f15a8140151bb6b518e4b","date":1588290631,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/hadoop/http/HttpServer2#addInternalServlet(String,String,Class[#-extends-HttpServlet],boolean).mjava","pathOld":"solr/core/src/test/org/apache/hadoop/http/HttpServer2#addInternalServlet(String,String,Class[#-extends-HttpServlet],boolean).mjava","sourceNew":"  /**\n   * Add an internal servlet in the server, specifying whether or not to\n   * protect with Kerberos authentication.\n   * Note: This method is to be used for adding servlets that facilitate\n   * internal communication and not for user facing functionality. For\n   * servlets added using this method, filters (except internal Kerberos\n   * filters) are not enabled.\n   *\n   * @param name The name of the servlet (can be passed as null)\n   * @param pathSpec The path spec for the servlet\n   * @param clazz The servlet class\n   * @param requireAuth Require Kerberos authenticate to access servlet\n   */\n  public void addInternalServlet(String name, String pathSpec,\n                                 Class<? extends HttpServlet> clazz, boolean requireAuth) {\n    ServletHolder holder = new ServletHolder(clazz);\n    if (name != null) {\n      holder.setName(name);\n    }\n    // Jetty doesn't like the same path spec mapping to different servlets, so\n    // if there's already a mapping for this pathSpec, remove it and assume that\n    // the newest one is the one we want\n    final ServletMapping[] servletMappings =\n        webAppContext.getServletHandler().getServletMappings();\n    for (int i = 0; i < servletMappings.length; i++) {\n      if (servletMappings[i].containsPathSpec(pathSpec)) {\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Found existing {} servlet at path {}; will replace mapping with {} servlet\"\n              , servletMappings[i].getServletName()\n              , pathSpec\n              , holder.getName());\n        }\n        ServletMapping[] newServletMappings =\n            ArrayUtil.removeFromArray(servletMappings, servletMappings[i]);\n        webAppContext.getServletHandler()\n            .setServletMappings(newServletMappings);\n        break;\n      }\n    }\n    webAppContext.addServlet(holder, pathSpec);\n\n    if(requireAuth && UserGroupInformation.isSecurityEnabled()) {\n      LOG.info(\"Adding Kerberos (SPNEGO) filter to {}\", name);\n      ServletHandler handler = webAppContext.getServletHandler();\n      FilterMapping fmap = new FilterMapping();\n      fmap.setPathSpec(pathSpec);\n      fmap.setFilterName(SPNEGO_FILTER);\n      fmap.setDispatches(FilterMapping.ALL);\n      handler.addFilterMapping(fmap);\n    }\n  }\n\n","sourceOld":"  /**\n   * Add an internal servlet in the server, specifying whether or not to\n   * protect with Kerberos authentication.\n   * Note: This method is to be used for adding servlets that facilitate\n   * internal communication and not for user facing functionality. For\n   * servlets added using this method, filters (except internal Kerberos\n   * filters) are not enabled.\n   *\n   * @param name The name of the servlet (can be passed as null)\n   * @param pathSpec The path spec for the servlet\n   * @param clazz The servlet class\n   * @param requireAuth Require Kerberos authenticate to access servlet\n   */\n  public void addInternalServlet(String name, String pathSpec,\n                                 Class<? extends HttpServlet> clazz, boolean requireAuth) {\n    ServletHolder holder = new ServletHolder(clazz);\n    if (name != null) {\n      holder.setName(name);\n    }\n    // Jetty doesn't like the same path spec mapping to different servlets, so\n    // if there's already a mapping for this pathSpec, remove it and assume that\n    // the newest one is the one we want\n    final ServletMapping[] servletMappings =\n        webAppContext.getServletHandler().getServletMappings();\n    for (int i = 0; i < servletMappings.length; i++) {\n      if (servletMappings[i].containsPathSpec(pathSpec)) {\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Found existing \" + servletMappings[i].getServletName() +\n              \" servlet at path \" + pathSpec + \"; will replace mapping\" +\n              \" with \" + holder.getName() + \" servlet\");\n        }\n        ServletMapping[] newServletMappings =\n            ArrayUtil.removeFromArray(servletMappings, servletMappings[i]);\n        webAppContext.getServletHandler()\n            .setServletMappings(newServletMappings);\n        break;\n      }\n    }\n    webAppContext.addServlet(holder, pathSpec);\n\n    if(requireAuth && UserGroupInformation.isSecurityEnabled()) {\n      LOG.info(\"Adding Kerberos (SPNEGO) filter to \" + name);\n      ServletHandler handler = webAppContext.getServletHandler();\n      FilterMapping fmap = new FilterMapping();\n      fmap.setPathSpec(pathSpec);\n      fmap.setFilterName(SPNEGO_FILTER);\n      fmap.setDispatches(FilterMapping.ALL);\n      handler.addFilterMapping(fmap);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"34b74c124d68d8e306d6ef09624f3cd053b8a2fd":["99b97f030e743d8dd4d7685202f71718d7e5af22"],"99b97f030e743d8dd4d7685202f71718d7e5af22":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"44ca189138a5b6e1989d12ab992fab60e235ddc7":["34b74c124d68d8e306d6ef09624f3cd053b8a2fd"],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["44ca189138a5b6e1989d12ab992fab60e235ddc7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a966532d92cf9ba2856f15a8140151bb6b518e4b"]},"commit2Childs":{"34b74c124d68d8e306d6ef09624f3cd053b8a2fd":["44ca189138a5b6e1989d12ab992fab60e235ddc7"],"99b97f030e743d8dd4d7685202f71718d7e5af22":["34b74c124d68d8e306d6ef09624f3cd053b8a2fd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["99b97f030e743d8dd4d7685202f71718d7e5af22"],"44ca189138a5b6e1989d12ab992fab60e235ddc7":["a966532d92cf9ba2856f15a8140151bb6b518e4b"],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}