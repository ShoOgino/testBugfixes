{"path":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#sendDocsWithRetry(List[SolrInputDocument],int,int,int).mjava","commits":[{"id":"7cef303ab8a41bdfabddc1f0b469f35eaad960f9","date":1426183109,"type":0,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#sendDocsWithRetry(List[SolrInputDocument],int,int,int).mjava","pathOld":"/dev/null","sourceNew":"  @SuppressWarnings(\"rawtypes\")\n  protected int sendDocsWithRetry(List<SolrInputDocument> batch, int minRf, int maxRetries, int waitBeforeRetry) throws Exception {\n    UpdateRequest up = new UpdateRequest();\n    up.setParam(UpdateRequest.MIN_REPFACT, String.valueOf(minRf));\n    up.add(batch);\n    NamedList resp = null;\n    int numRetries = 0;\n    while(true) {\n      try {\n        resp = cloudClient.request(up);\n        return cloudClient.getMinAchievedReplicationFactor(cloudClient.getDefaultCollection(), resp);\n      } catch (Exception exc) {\n        Throwable rootCause = SolrException.getRootCause(exc);\n        if (++numRetries <= maxRetries) {\n          log.warn(\"ERROR: \" + rootCause + \" ... Sleeping for \" + waitBeforeRetry + \" seconds before re-try ...\");\n          Thread.sleep(waitBeforeRetry * 1000L);\n        } else {\n          log.error(\"No more retries available! Add batch failed due to: \" + rootCause);\n          throw exc;\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#sendDocsWithRetry(List[SolrInputDocument],int,int,int).mjava","pathOld":"/dev/null","sourceNew":"  @SuppressWarnings(\"rawtypes\")\n  protected int sendDocsWithRetry(List<SolrInputDocument> batch, int minRf, int maxRetries, int waitBeforeRetry) throws Exception {\n    UpdateRequest up = new UpdateRequest();\n    up.setParam(UpdateRequest.MIN_REPFACT, String.valueOf(minRf));\n    up.add(batch);\n    NamedList resp = null;\n    int numRetries = 0;\n    while(true) {\n      try {\n        resp = cloudClient.request(up);\n        return cloudClient.getMinAchievedReplicationFactor(cloudClient.getDefaultCollection(), resp);\n      } catch (Exception exc) {\n        Throwable rootCause = SolrException.getRootCause(exc);\n        if (++numRetries <= maxRetries) {\n          log.warn(\"ERROR: \" + rootCause + \" ... Sleeping for \" + waitBeforeRetry + \" seconds before re-try ...\");\n          Thread.sleep(waitBeforeRetry * 1000L);\n        } else {\n          log.error(\"No more retries available! Add batch failed due to: \" + rootCause);\n          throw exc;\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5ebf70dabe6279454c5ff460bdea3f0dc2814a86","date":1463672611,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#sendDocsWithRetry(List[SolrInputDocument],int,int,int).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#sendDocsWithRetry(List[SolrInputDocument],int,int,int).mjava","sourceNew":"  protected int sendDocsWithRetry(List<SolrInputDocument> batch, int minRf, int maxRetries, int waitBeforeRetry) throws Exception {\n    return sendDocsWithRetry(cloudClient, cloudClient.getDefaultCollection(), batch, minRf, maxRetries, waitBeforeRetry);\n  }\n\n","sourceOld":"  @SuppressWarnings(\"rawtypes\")\n  protected int sendDocsWithRetry(List<SolrInputDocument> batch, int minRf, int maxRetries, int waitBeforeRetry) throws Exception {\n    UpdateRequest up = new UpdateRequest();\n    up.setParam(UpdateRequest.MIN_REPFACT, String.valueOf(minRf));\n    up.add(batch);\n    NamedList resp = null;\n    int numRetries = 0;\n    while(true) {\n      try {\n        resp = cloudClient.request(up);\n        return cloudClient.getMinAchievedReplicationFactor(cloudClient.getDefaultCollection(), resp);\n      } catch (Exception exc) {\n        Throwable rootCause = SolrException.getRootCause(exc);\n        if (++numRetries <= maxRetries) {\n          log.warn(\"ERROR: \" + rootCause + \" ... Sleeping for \" + waitBeforeRetry + \" seconds before re-try ...\");\n          Thread.sleep(waitBeforeRetry * 1000L);\n        } else {\n          log.error(\"No more retries available! Add batch failed due to: \" + rootCause);\n          throw exc;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#sendDocsWithRetry(List[SolrInputDocument],int,int,int).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#sendDocsWithRetry(List[SolrInputDocument],int,int,int).mjava","sourceNew":"  protected int sendDocsWithRetry(List<SolrInputDocument> batch, int minRf, int maxRetries, int waitBeforeRetry) throws Exception {\n    return sendDocsWithRetry(cloudClient, cloudClient.getDefaultCollection(), batch, minRf, maxRetries, waitBeforeRetry);\n  }\n\n","sourceOld":"  @SuppressWarnings(\"rawtypes\")\n  protected int sendDocsWithRetry(List<SolrInputDocument> batch, int minRf, int maxRetries, int waitBeforeRetry) throws Exception {\n    UpdateRequest up = new UpdateRequest();\n    up.setParam(UpdateRequest.MIN_REPFACT, String.valueOf(minRf));\n    up.add(batch);\n    NamedList resp = null;\n    int numRetries = 0;\n    while(true) {\n      try {\n        resp = cloudClient.request(up);\n        return cloudClient.getMinAchievedReplicationFactor(cloudClient.getDefaultCollection(), resp);\n      } catch (Exception exc) {\n        Throwable rootCause = SolrException.getRootCause(exc);\n        if (++numRetries <= maxRetries) {\n          log.warn(\"ERROR: \" + rootCause + \" ... Sleeping for \" + waitBeforeRetry + \" seconds before re-try ...\");\n          Thread.sleep(waitBeforeRetry * 1000L);\n        } else {\n          log.error(\"No more retries available! Add batch failed due to: \" + rootCause);\n          throw exc;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#sendDocsWithRetry(List[SolrInputDocument],int,int,int).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#sendDocsWithRetry(List[SolrInputDocument],int,int,int).mjava","sourceNew":"  protected int sendDocsWithRetry(List<SolrInputDocument> batch, int minRf, int maxRetries, int waitBeforeRetry) throws Exception {\n    return sendDocsWithRetry(cloudClient, cloudClient.getDefaultCollection(), batch, minRf, maxRetries, waitBeforeRetry);\n  }\n\n","sourceOld":"  @SuppressWarnings(\"rawtypes\")\n  protected int sendDocsWithRetry(List<SolrInputDocument> batch, int minRf, int maxRetries, int waitBeforeRetry) throws Exception {\n    UpdateRequest up = new UpdateRequest();\n    up.setParam(UpdateRequest.MIN_REPFACT, String.valueOf(minRf));\n    up.add(batch);\n    NamedList resp = null;\n    int numRetries = 0;\n    while(true) {\n      try {\n        resp = cloudClient.request(up);\n        return cloudClient.getMinAchievedReplicationFactor(cloudClient.getDefaultCollection(), resp);\n      } catch (Exception exc) {\n        Throwable rootCause = SolrException.getRootCause(exc);\n        if (++numRetries <= maxRetries) {\n          log.warn(\"ERROR: \" + rootCause + \" ... Sleeping for \" + waitBeforeRetry + \" seconds before re-try ...\");\n          Thread.sleep(waitBeforeRetry * 1000L);\n        } else {\n          log.error(\"No more retries available! Add batch failed due to: \" + rootCause);\n          throw exc;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7cef303ab8a41bdfabddc1f0b469f35eaad960f9"],"7cef303ab8a41bdfabddc1f0b469f35eaad960f9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5ebf70dabe6279454c5ff460bdea3f0dc2814a86":["7cef303ab8a41bdfabddc1f0b469f35eaad960f9"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["7cef303ab8a41bdfabddc1f0b469f35eaad960f9","d470c8182e92b264680e34081b75e70a9f2b3c89"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["7cef303ab8a41bdfabddc1f0b469f35eaad960f9","5ebf70dabe6279454c5ff460bdea3f0dc2814a86"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"7cef303ab8a41bdfabddc1f0b469f35eaad960f9":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","5ebf70dabe6279454c5ff460bdea3f0dc2814a86","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","7cef303ab8a41bdfabddc1f0b469f35eaad960f9"],"5ebf70dabe6279454c5ff460bdea3f0dc2814a86":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"d470c8182e92b264680e34081b75e70a9f2b3c89":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}