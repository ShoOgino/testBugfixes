{"path":"solr/core/src/java/org/apache/solr/util/NumberUtils#float2sortableStr(float).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/NumberUtils#float2sortableStr(float).mjava","pathOld":"solr/src/java/org/apache/solr/util/NumberUtils#float2sortableStr(float).mjava","sourceNew":"  //\n  // IEEE floating point format is defined so that it sorts correctly\n  // when interpreted as a signed integer (or signed long in the case\n  // of a double) for positive values.  For negative values, all the bits except\n  // the sign bit must be inverted.\n  // This correctly handles all possible float values including -Infinity and +Infinity.\n  // Note that in float-space, NaN<x is false, NaN>x is false, NaN==x is false, NaN!=x is true\n  // for all x (including NaN itself).  Internal to Solr, NaN==NaN is true and NaN\n  // sorts higher than Infinity, so a range query of [-Infinity TO +Infinity] will\n  // exclude NaN values, but a query of \"NaN\" will find all NaN values.\n  // Also, -0==0 in float-space but -0<0 after this transformation.\n  //\n  public static String float2sortableStr(float val) {\n    int f = Float.floatToRawIntBits(val);\n    if (f<0) f ^= 0x7fffffff;\n    return int2sortableStr(f);\n  }\n\n","sourceOld":"  //\n  // IEEE floating point format is defined so that it sorts correctly\n  // when interpreted as a signed integer (or signed long in the case\n  // of a double) for positive values.  For negative values, all the bits except\n  // the sign bit must be inverted.\n  // This correctly handles all possible float values including -Infinity and +Infinity.\n  // Note that in float-space, NaN<x is false, NaN>x is false, NaN==x is false, NaN!=x is true\n  // for all x (including NaN itself).  Internal to Solr, NaN==NaN is true and NaN\n  // sorts higher than Infinity, so a range query of [-Infinity TO +Infinity] will\n  // exclude NaN values, but a query of \"NaN\" will find all NaN values.\n  // Also, -0==0 in float-space but -0<0 after this transformation.\n  //\n  public static String float2sortableStr(float val) {\n    int f = Float.floatToRawIntBits(val);\n    if (f<0) f ^= 0x7fffffff;\n    return int2sortableStr(f);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/NumberUtils#float2sortableStr(float).mjava","pathOld":"solr/src/java/org/apache/solr/util/NumberUtils#float2sortableStr(float).mjava","sourceNew":"  //\n  // IEEE floating point format is defined so that it sorts correctly\n  // when interpreted as a signed integer (or signed long in the case\n  // of a double) for positive values.  For negative values, all the bits except\n  // the sign bit must be inverted.\n  // This correctly handles all possible float values including -Infinity and +Infinity.\n  // Note that in float-space, NaN<x is false, NaN>x is false, NaN==x is false, NaN!=x is true\n  // for all x (including NaN itself).  Internal to Solr, NaN==NaN is true and NaN\n  // sorts higher than Infinity, so a range query of [-Infinity TO +Infinity] will\n  // exclude NaN values, but a query of \"NaN\" will find all NaN values.\n  // Also, -0==0 in float-space but -0<0 after this transformation.\n  //\n  public static String float2sortableStr(float val) {\n    int f = Float.floatToRawIntBits(val);\n    if (f<0) f ^= 0x7fffffff;\n    return int2sortableStr(f);\n  }\n\n","sourceOld":"  //\n  // IEEE floating point format is defined so that it sorts correctly\n  // when interpreted as a signed integer (or signed long in the case\n  // of a double) for positive values.  For negative values, all the bits except\n  // the sign bit must be inverted.\n  // This correctly handles all possible float values including -Infinity and +Infinity.\n  // Note that in float-space, NaN<x is false, NaN>x is false, NaN==x is false, NaN!=x is true\n  // for all x (including NaN itself).  Internal to Solr, NaN==NaN is true and NaN\n  // sorts higher than Infinity, so a range query of [-Infinity TO +Infinity] will\n  // exclude NaN values, but a query of \"NaN\" will find all NaN values.\n  // Also, -0==0 in float-space but -0<0 after this transformation.\n  //\n  public static String float2sortableStr(float val) {\n    int f = Float.floatToRawIntBits(val);\n    if (f<0) f ^= 0x7fffffff;\n    return int2sortableStr(f);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/NumberUtils#float2sortableStr(float).mjava","pathOld":"solr/src/java/org/apache/solr/util/NumberUtils#float2sortableStr(float).mjava","sourceNew":"  //\n  // IEEE floating point format is defined so that it sorts correctly\n  // when interpreted as a signed integer (or signed long in the case\n  // of a double) for positive values.  For negative values, all the bits except\n  // the sign bit must be inverted.\n  // This correctly handles all possible float values including -Infinity and +Infinity.\n  // Note that in float-space, NaN<x is false, NaN>x is false, NaN==x is false, NaN!=x is true\n  // for all x (including NaN itself).  Internal to Solr, NaN==NaN is true and NaN\n  // sorts higher than Infinity, so a range query of [-Infinity TO +Infinity] will\n  // exclude NaN values, but a query of \"NaN\" will find all NaN values.\n  // Also, -0==0 in float-space but -0<0 after this transformation.\n  //\n  public static String float2sortableStr(float val) {\n    int f = Float.floatToRawIntBits(val);\n    if (f<0) f ^= 0x7fffffff;\n    return int2sortableStr(f);\n  }\n\n","sourceOld":"  //\n  // IEEE floating point format is defined so that it sorts correctly\n  // when interpreted as a signed integer (or signed long in the case\n  // of a double) for positive values.  For negative values, all the bits except\n  // the sign bit must be inverted.\n  // This correctly handles all possible float values including -Infinity and +Infinity.\n  // Note that in float-space, NaN<x is false, NaN>x is false, NaN==x is false, NaN!=x is true\n  // for all x (including NaN itself).  Internal to Solr, NaN==NaN is true and NaN\n  // sorts higher than Infinity, so a range query of [-Infinity TO +Infinity] will\n  // exclude NaN values, but a query of \"NaN\" will find all NaN values.\n  // Also, -0==0 in float-space but -0<0 after this transformation.\n  //\n  public static String float2sortableStr(float val) {\n    int f = Float.floatToRawIntBits(val);\n    if (f<0) f ^= 0x7fffffff;\n    return int2sortableStr(f);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}