{"path":"solr/contrib/clustering/src/test/org/apache/solr/handler/clustering/carrot2/LexicalResourcesCheckClusteringAlgorithm#process().mjava","commits":[{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/clustering/src/test/org/apache/solr/handler/clustering/carrot2/LexicalResourcesCheckClusteringAlgorithm#process().mjava","pathOld":"solr/contrib/clustering/src/test/java/org/apache/solr/handler/clustering/carrot2/LexicalResourcesCheckClusteringAlgorithm#process().mjava","sourceNew":"\t@Override\r\n\tpublic void process() throws ProcessingException {\r\n\t\tclusters = Lists.newArrayList();\r\n\t\tif (wordsToCheck == null) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// Test with Maltese so that the English clustering performed in other tests\r\n\t\t// is not affected by the test stopwords and stoplabels.\r\n\t\tILexicalData lexicalData = preprocessing.lexicalDataFactory\r\n\t\t\t\t.getLexicalData(LanguageCode.MALTESE);\r\n\r\n\t\tfor (String word : wordsToCheck.split(\",\")) {\r\n\t\t\tif (!lexicalData.isCommonWord(new MutableCharArray(word))\r\n\t\t\t\t\t&& !lexicalData.isStopLabel(word)) {\r\n\t\t\t\tclusters.add(new Cluster(word));\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\n","sourceOld":"\t@Override\r\n\tpublic void process() throws ProcessingException {\r\n\t\tclusters = Lists.newArrayList();\r\n\t\tif (wordsToCheck == null) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// Test with Maltese so that the English clustering performed in other tests\r\n\t\t// is not affected by the test stopwords and stoplabels.\r\n\t\tILexicalData lexicalData = preprocessing.lexicalDataFactory\r\n\t\t\t\t.getLexicalData(LanguageCode.MALTESE);\r\n\r\n\t\tfor (String word : wordsToCheck.split(\",\")) {\r\n\t\t\tif (!lexicalData.isCommonWord(new MutableCharArray(word))\r\n\t\t\t\t\t&& !lexicalData.isStopLabel(word)) {\r\n\t\t\t\tclusters.add(new Cluster(word));\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/clustering/src/test/org/apache/solr/handler/clustering/carrot2/LexicalResourcesCheckClusteringAlgorithm#process().mjava","pathOld":"solr/contrib/clustering/src/test/java/org/apache/solr/handler/clustering/carrot2/LexicalResourcesCheckClusteringAlgorithm#process().mjava","sourceNew":"\t@Override\r\n\tpublic void process() throws ProcessingException {\r\n\t\tclusters = Lists.newArrayList();\r\n\t\tif (wordsToCheck == null) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// Test with Maltese so that the English clustering performed in other tests\r\n\t\t// is not affected by the test stopwords and stoplabels.\r\n\t\tILexicalData lexicalData = preprocessing.lexicalDataFactory\r\n\t\t\t\t.getLexicalData(LanguageCode.MALTESE);\r\n\r\n\t\tfor (String word : wordsToCheck.split(\",\")) {\r\n\t\t\tif (!lexicalData.isCommonWord(new MutableCharArray(word))\r\n\t\t\t\t\t&& !lexicalData.isStopLabel(word)) {\r\n\t\t\t\tclusters.add(new Cluster(word));\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\n","sourceOld":"\t@Override\r\n\tpublic void process() throws ProcessingException {\r\n\t\tclusters = Lists.newArrayList();\r\n\t\tif (wordsToCheck == null) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// Test with Maltese so that the English clustering performed in other tests\r\n\t\t// is not affected by the test stopwords and stoplabels.\r\n\t\tILexicalData lexicalData = preprocessing.lexicalDataFactory\r\n\t\t\t\t.getLexicalData(LanguageCode.MALTESE);\r\n\r\n\t\tfor (String word : wordsToCheck.split(\",\")) {\r\n\t\t\tif (!lexicalData.isCommonWord(new MutableCharArray(word))\r\n\t\t\t\t\t&& !lexicalData.isStopLabel(word)) {\r\n\t\t\t\tclusters.add(new Cluster(word));\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ef9e7ba08c124ce913ef60415c21ae1ca833d211","date":1323446079,"type":3,"author":"Stanisław Osiński","isMerge":false,"pathNew":"solr/contrib/clustering/src/test/org/apache/solr/handler/clustering/carrot2/LexicalResourcesCheckClusteringAlgorithm#process().mjava","pathOld":"solr/contrib/clustering/src/test/org/apache/solr/handler/clustering/carrot2/LexicalResourcesCheckClusteringAlgorithm#process().mjava","sourceNew":"  @Override\r\n  public void process() throws ProcessingException {\r\n    clusters = Lists.newArrayList();\r\n    if (wordsToCheck == null) {\r\n      return;\r\n    }\r\n\r\n    // Test with Maltese so that the English clustering performed in other tests\r\n    // is not affected by the test stopwords and stoplabels.\r\n    ILexicalData lexicalData = preprocessing.lexicalDataFactory\r\n        .getLexicalData(LanguageCode.MALTESE);\r\n\r\n    for (String word : wordsToCheck.split(\",\")) {\r\n      if (!lexicalData.isCommonWord(new MutableCharArray(word))\r\n          && !lexicalData.isStopLabel(word)) {\r\n        clusters.add(new Cluster(word));\r\n      }\r\n    }\r\n  }\r\n\n","sourceOld":"\t@Override\r\n\tpublic void process() throws ProcessingException {\r\n\t\tclusters = Lists.newArrayList();\r\n\t\tif (wordsToCheck == null) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// Test with Maltese so that the English clustering performed in other tests\r\n\t\t// is not affected by the test stopwords and stoplabels.\r\n\t\tILexicalData lexicalData = preprocessing.lexicalDataFactory\r\n\t\t\t\t.getLexicalData(LanguageCode.MALTESE);\r\n\r\n\t\tfor (String word : wordsToCheck.split(\",\")) {\r\n\t\t\tif (!lexicalData.isCommonWord(new MutableCharArray(word))\r\n\t\t\t\t\t&& !lexicalData.isStopLabel(word)) {\r\n\t\t\t\tclusters.add(new Cluster(word));\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff99371bc1f34bf1a2ccdb754940ee5fe5cc2565","date":1323540308,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/contrib/clustering/src/test/org/apache/solr/handler/clustering/carrot2/LexicalResourcesCheckClusteringAlgorithm#process().mjava","pathOld":"solr/contrib/clustering/src/test/org/apache/solr/handler/clustering/carrot2/LexicalResourcesCheckClusteringAlgorithm#process().mjava","sourceNew":"  @Override\r\n  public void process() throws ProcessingException {\r\n    clusters = Lists.newArrayList();\r\n    if (wordsToCheck == null) {\r\n      return;\r\n    }\r\n\r\n    // Test with Maltese so that the English clustering performed in other tests\r\n    // is not affected by the test stopwords and stoplabels.\r\n    ILexicalData lexicalData = preprocessing.lexicalDataFactory\r\n        .getLexicalData(LanguageCode.MALTESE);\r\n\r\n    for (String word : wordsToCheck.split(\",\")) {\r\n      if (!lexicalData.isCommonWord(new MutableCharArray(word))\r\n          && !lexicalData.isStopLabel(word)) {\r\n        clusters.add(new Cluster(word));\r\n      }\r\n    }\r\n  }\r\n\n","sourceOld":"\t@Override\r\n\tpublic void process() throws ProcessingException {\r\n\t\tclusters = Lists.newArrayList();\r\n\t\tif (wordsToCheck == null) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// Test with Maltese so that the English clustering performed in other tests\r\n\t\t// is not affected by the test stopwords and stoplabels.\r\n\t\tILexicalData lexicalData = preprocessing.lexicalDataFactory\r\n\t\t\t\t.getLexicalData(LanguageCode.MALTESE);\r\n\r\n\t\tfor (String word : wordsToCheck.split(\",\")) {\r\n\t\t\tif (!lexicalData.isCommonWord(new MutableCharArray(word))\r\n\t\t\t\t\t&& !lexicalData.isStopLabel(word)) {\r\n\t\t\t\tclusters.add(new Cluster(word));\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a002afd8b1e0d1bbf0debb2ff740b5e77ed8b23","date":1332766738,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/contrib/clustering/src/test/org/apache/solr/handler/clustering/carrot2/LexicalResourcesCheckClusteringAlgorithm#process().mjava","pathOld":"solr/contrib/clustering/src/test/org/apache/solr/handler/clustering/carrot2/LexicalResourcesCheckClusteringAlgorithm#process().mjava","sourceNew":"  @Override\n  public void process() throws ProcessingException {\n    clusters = Lists.newArrayList();\n    if (wordsToCheck == null) {\n      return;\n    }\n\n    // Test with Maltese so that the English clustering performed in other tests\n    // is not affected by the test stopwords and stoplabels.\n    ILexicalData lexicalData = preprocessing.lexicalDataFactory\n        .getLexicalData(LanguageCode.MALTESE);\n\n    for (String word : wordsToCheck.split(\",\")) {\n      if (!lexicalData.isCommonWord(new MutableCharArray(word))\n          && !lexicalData.isStopLabel(word)) {\n        clusters.add(new Cluster(word));\n      }\n    }\n  }\n\n","sourceOld":"  @Override\r\n  public void process() throws ProcessingException {\r\n    clusters = Lists.newArrayList();\r\n    if (wordsToCheck == null) {\r\n      return;\r\n    }\r\n\r\n    // Test with Maltese so that the English clustering performed in other tests\r\n    // is not affected by the test stopwords and stoplabels.\r\n    ILexicalData lexicalData = preprocessing.lexicalDataFactory\r\n        .getLexicalData(LanguageCode.MALTESE);\r\n\r\n    for (String word : wordsToCheck.split(\",\")) {\r\n      if (!lexicalData.isCommonWord(new MutableCharArray(word))\r\n          && !lexicalData.isStopLabel(word)) {\r\n        clusters.add(new Cluster(word));\r\n      }\r\n    }\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7290fa7ae2cc2a80abb6aecc0b0dd90cbfde2b7f","date":1478271720,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/contrib/clustering/src/test/org/apache/solr/handler/clustering/carrot2/LexicalResourcesCheckClusteringAlgorithm#process().mjava","pathOld":"solr/contrib/clustering/src/test/org/apache/solr/handler/clustering/carrot2/LexicalResourcesCheckClusteringAlgorithm#process().mjava","sourceNew":"  @Override\n  public void process() throws ProcessingException {\n    clusters = new ArrayList<>();\n    if (wordsToCheck == null) {\n      return;\n    }\n\n    // Test with Maltese so that the English clustering performed in other tests\n    // is not affected by the test stopwords and stoplabels.\n    ILexicalData lexicalData = preprocessing.lexicalDataFactory\n        .getLexicalData(LanguageCode.MALTESE);\n\n    for (String word : wordsToCheck.split(\",\")) {\n      if (!lexicalData.isCommonWord(new MutableCharArray(word))\n          && !lexicalData.isStopLabel(word)) {\n        clusters.add(new Cluster(word));\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void process() throws ProcessingException {\n    clusters = Lists.newArrayList();\n    if (wordsToCheck == null) {\n      return;\n    }\n\n    // Test with Maltese so that the English clustering performed in other tests\n    // is not affected by the test stopwords and stoplabels.\n    ILexicalData lexicalData = preprocessing.lexicalDataFactory\n        .getLexicalData(LanguageCode.MALTESE);\n\n    for (String word : wordsToCheck.split(\",\")) {\n      if (!lexicalData.isCommonWord(new MutableCharArray(word))\n          && !lexicalData.isStopLabel(word)) {\n        clusters.add(new Cluster(word));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"199dfa410f1fdbfd3294106b04096cce5ed34b21","date":1478812506,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/contrib/clustering/src/test/org/apache/solr/handler/clustering/carrot2/LexicalResourcesCheckClusteringAlgorithm#process().mjava","pathOld":"solr/contrib/clustering/src/test/org/apache/solr/handler/clustering/carrot2/LexicalResourcesCheckClusteringAlgorithm#process().mjava","sourceNew":"  @Override\n  public void process() throws ProcessingException {\n    clusters = new ArrayList<>();\n    if (wordsToCheck == null) {\n      return;\n    }\n\n    // Test with Maltese so that the English clustering performed in other tests\n    // is not affected by the test stopwords and stoplabels.\n    ILexicalData lexicalData = preprocessing.lexicalDataFactory\n        .getLexicalData(LanguageCode.MALTESE);\n\n    for (String word : wordsToCheck.split(\",\")) {\n      if (!lexicalData.isCommonWord(new MutableCharArray(word))\n          && !lexicalData.isStopLabel(word)) {\n        clusters.add(new Cluster(word));\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void process() throws ProcessingException {\n    clusters = Lists.newArrayList();\n    if (wordsToCheck == null) {\n      return;\n    }\n\n    // Test with Maltese so that the English clustering performed in other tests\n    // is not affected by the test stopwords and stoplabels.\n    ILexicalData lexicalData = preprocessing.lexicalDataFactory\n        .getLexicalData(LanguageCode.MALTESE);\n\n    for (String word : wordsToCheck.split(\",\")) {\n      if (!lexicalData.isCommonWord(new MutableCharArray(word))\n          && !lexicalData.isStopLabel(word)) {\n        clusters.add(new Cluster(word));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5a002afd8b1e0d1bbf0debb2ff740b5e77ed8b23":["ef9e7ba08c124ce913ef60415c21ae1ca833d211"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7290fa7ae2cc2a80abb6aecc0b0dd90cbfde2b7f":["5a002afd8b1e0d1bbf0debb2ff740b5e77ed8b23"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"199dfa410f1fdbfd3294106b04096cce5ed34b21":["5a002afd8b1e0d1bbf0debb2ff740b5e77ed8b23","7290fa7ae2cc2a80abb6aecc0b0dd90cbfde2b7f"],"ff99371bc1f34bf1a2ccdb754940ee5fe5cc2565":["c26f00b574427b55127e869b935845554afde1fa","ef9e7ba08c124ce913ef60415c21ae1ca833d211"],"ef9e7ba08c124ce913ef60415c21ae1ca833d211":["c26f00b574427b55127e869b935845554afde1fa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7290fa7ae2cc2a80abb6aecc0b0dd90cbfde2b7f"]},"commit2Childs":{"5a002afd8b1e0d1bbf0debb2ff740b5e77ed8b23":["7290fa7ae2cc2a80abb6aecc0b0dd90cbfde2b7f","199dfa410f1fdbfd3294106b04096cce5ed34b21"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["c26f00b574427b55127e869b935845554afde1fa"],"7290fa7ae2cc2a80abb6aecc0b0dd90cbfde2b7f":["199dfa410f1fdbfd3294106b04096cce5ed34b21","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c26f00b574427b55127e869b935845554afde1fa":["ff99371bc1f34bf1a2ccdb754940ee5fe5cc2565","ef9e7ba08c124ce913ef60415c21ae1ca833d211"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","c26f00b574427b55127e869b935845554afde1fa"],"199dfa410f1fdbfd3294106b04096cce5ed34b21":[],"ff99371bc1f34bf1a2ccdb754940ee5fe5cc2565":[],"ef9e7ba08c124ce913ef60415c21ae1ca833d211":["5a002afd8b1e0d1bbf0debb2ff740b5e77ed8b23","ff99371bc1f34bf1a2ccdb754940ee5fe5cc2565"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["199dfa410f1fdbfd3294106b04096cce5ed34b21","ff99371bc1f34bf1a2ccdb754940ee5fe5cc2565","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}