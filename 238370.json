{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testAkima().mjava","commits":[{"id":"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf","date":1522951207,"type":1,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testAkima().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testAkima().mjava","sourceNew":"  @Test\n  public void testAkima() throws Exception {\n    String cexpr = \"let(echo=true,\" +\n        \"    a=array(0,1,2,3,4,5,6,7), \" +\n        \"    b=array(1,70,90,10,78, 100, 1, 9),\" +\n        \"    fit=akima(a, b), \" +\n        \"    der=derivative(fit))\";\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<Number> out = (List<Number>)tuples.get(0).get(\"fit\");\n    assertTrue(out.size() == 8);\n    assertEquals(out.get(0).doubleValue(), 1.0, 0.0001);\n    assertEquals(out.get(1).doubleValue(), 70.0, 0.0001);\n    assertEquals(out.get(2).doubleValue(), 90.0, 0.0001);\n    assertEquals(out.get(3).doubleValue(), 10.0, 0.0001);\n    assertEquals(out.get(4).doubleValue(), 78.0, 0.0001);\n    assertEquals(out.get(5).doubleValue(), 100.0, 0.0001);\n    assertEquals(out.get(6).doubleValue(), 1.0, 0.0001);\n    assertEquals(out.get(7).doubleValue(), 9.0, 0.0001);\n\n    List<Number> out1 = (List<Number>)tuples.get(0).get(\"der\");\n    assertTrue(out1.size() == 8);\n    assertEquals(out1.get(0).doubleValue(), 93.5, 0.0001);\n    assertEquals(out1.get(1).doubleValue(), 44.5, 0.0001);\n    assertEquals(out1.get(2).doubleValue(), -4.873096446700508, 0.0001);\n    assertEquals(out1.get(3).doubleValue(), 21.36986301369863, 0.0001);\n    assertEquals(out1.get(4).doubleValue(), 42.69144981412639, 0.0001);\n    assertEquals(out1.get(5).doubleValue(), -14.379084967320262, 0.0001);\n    assertEquals(out1.get(6).doubleValue(), -45.5, 0.0001);\n    assertEquals(out1.get(7).doubleValue(), 61.5, 0.0001);\n  }\n\n","sourceOld":"  @Test\n  public void testAkima() throws Exception {\n    String cexpr = \"let(echo=true,\" +\n        \"    a=array(0,1,2,3,4,5,6,7), \" +\n        \"    b=array(1,70,90,10,78, 100, 1, 9),\" +\n        \"    fit=akima(a, b), \" +\n        \"    der=derivative(fit))\";\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<Number> out = (List<Number>)tuples.get(0).get(\"fit\");\n    assertTrue(out.size() == 8);\n    assertEquals(out.get(0).doubleValue(), 1.0, 0.0001);\n    assertEquals(out.get(1).doubleValue(), 70.0, 0.0001);\n    assertEquals(out.get(2).doubleValue(), 90.0, 0.0001);\n    assertEquals(out.get(3).doubleValue(), 10.0, 0.0001);\n    assertEquals(out.get(4).doubleValue(), 78.0, 0.0001);\n    assertEquals(out.get(5).doubleValue(), 100.0, 0.0001);\n    assertEquals(out.get(6).doubleValue(), 1.0, 0.0001);\n    assertEquals(out.get(7).doubleValue(), 9.0, 0.0001);\n\n    List<Number> out1 = (List<Number>)tuples.get(0).get(\"der\");\n    assertTrue(out1.size() == 8);\n    assertEquals(out1.get(0).doubleValue(), 93.5, 0.0001);\n    assertEquals(out1.get(1).doubleValue(), 44.5, 0.0001);\n    assertEquals(out1.get(2).doubleValue(),-4.873096446700508, 0.0001);\n    assertEquals(out1.get(3).doubleValue(), 21.36986301369863, 0.0001);\n    assertEquals(out1.get(4).doubleValue(),42.69144981412639, 0.0001);\n    assertEquals(out1.get(5).doubleValue(),-14.379084967320262, 0.0001);\n    assertEquals(out1.get(6).doubleValue(), -45.5, 0.0001);\n    assertEquals(out1.get(7).doubleValue(), 61.5, 0.0001);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ba1b632c041956c93c41aa1143d16a567014891","date":1592328473,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testAkima().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testAkima().mjava","sourceNew":"  @Test\n  public void testAkima() throws Exception {\n    String cexpr = \"let(echo=true,\" +\n        \"    a=array(0,1,2,3,4,5,6,7), \" +\n        \"    b=array(1,70,90,10,78, 100, 1, 9),\" +\n        \"    fit=akima(a, b), \" +\n        \"    der=derivative(fit))\";\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    @SuppressWarnings({\"unchecked\"})\n    List<Number> out = (List<Number>)tuples.get(0).get(\"fit\");\n    assertTrue(out.size() == 8);\n    assertEquals(out.get(0).doubleValue(), 1.0, 0.0001);\n    assertEquals(out.get(1).doubleValue(), 70.0, 0.0001);\n    assertEquals(out.get(2).doubleValue(), 90.0, 0.0001);\n    assertEquals(out.get(3).doubleValue(), 10.0, 0.0001);\n    assertEquals(out.get(4).doubleValue(), 78.0, 0.0001);\n    assertEquals(out.get(5).doubleValue(), 100.0, 0.0001);\n    assertEquals(out.get(6).doubleValue(), 1.0, 0.0001);\n    assertEquals(out.get(7).doubleValue(), 9.0, 0.0001);\n\n    @SuppressWarnings({\"unchecked\"})\n    List<Number> out1 = (List<Number>)tuples.get(0).get(\"der\");\n    assertTrue(out1.size() == 8);\n    assertEquals(out1.get(0).doubleValue(), 93.5, 0.0001);\n    assertEquals(out1.get(1).doubleValue(), 44.5, 0.0001);\n    assertEquals(out1.get(2).doubleValue(), -4.873096446700508, 0.0001);\n    assertEquals(out1.get(3).doubleValue(), 21.36986301369863, 0.0001);\n    assertEquals(out1.get(4).doubleValue(), 42.69144981412639, 0.0001);\n    assertEquals(out1.get(5).doubleValue(), -14.379084967320262, 0.0001);\n    assertEquals(out1.get(6).doubleValue(), -45.5, 0.0001);\n    assertEquals(out1.get(7).doubleValue(), 61.5, 0.0001);\n  }\n\n","sourceOld":"  @Test\n  public void testAkima() throws Exception {\n    String cexpr = \"let(echo=true,\" +\n        \"    a=array(0,1,2,3,4,5,6,7), \" +\n        \"    b=array(1,70,90,10,78, 100, 1, 9),\" +\n        \"    fit=akima(a, b), \" +\n        \"    der=derivative(fit))\";\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<Number> out = (List<Number>)tuples.get(0).get(\"fit\");\n    assertTrue(out.size() == 8);\n    assertEquals(out.get(0).doubleValue(), 1.0, 0.0001);\n    assertEquals(out.get(1).doubleValue(), 70.0, 0.0001);\n    assertEquals(out.get(2).doubleValue(), 90.0, 0.0001);\n    assertEquals(out.get(3).doubleValue(), 10.0, 0.0001);\n    assertEquals(out.get(4).doubleValue(), 78.0, 0.0001);\n    assertEquals(out.get(5).doubleValue(), 100.0, 0.0001);\n    assertEquals(out.get(6).doubleValue(), 1.0, 0.0001);\n    assertEquals(out.get(7).doubleValue(), 9.0, 0.0001);\n\n    List<Number> out1 = (List<Number>)tuples.get(0).get(\"der\");\n    assertTrue(out1.size() == 8);\n    assertEquals(out1.get(0).doubleValue(), 93.5, 0.0001);\n    assertEquals(out1.get(1).doubleValue(), 44.5, 0.0001);\n    assertEquals(out1.get(2).doubleValue(), -4.873096446700508, 0.0001);\n    assertEquals(out1.get(3).doubleValue(), 21.36986301369863, 0.0001);\n    assertEquals(out1.get(4).doubleValue(), 42.69144981412639, 0.0001);\n    assertEquals(out1.get(5).doubleValue(), -14.379084967320262, 0.0001);\n    assertEquals(out1.get(6).doubleValue(), -45.5, 0.0001);\n    assertEquals(out1.get(7).doubleValue(), 61.5, 0.0001);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9ba1b632c041956c93c41aa1143d16a567014891":["8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9ba1b632c041956c93c41aa1143d16a567014891"],"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"9ba1b632c041956c93c41aa1143d16a567014891":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf"],"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf":["9ba1b632c041956c93c41aa1143d16a567014891"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}