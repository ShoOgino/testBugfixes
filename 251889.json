{"path":"lucene/core/src/java/org/apache/lucene/index/IndexWriterConfig#setRAMBufferSizeMB(double).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriterConfig#setRAMBufferSizeMB(double).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriterConfig#setRAMBufferSizeMB(double).mjava","sourceNew":"  /**\n   * Determines the amount of RAM that may be used for buffering added documents\n   * and deletions before they are flushed to the Directory. Generally for\n   * faster indexing performance it's best to flush by RAM usage instead of\n   * document count and use as large a RAM buffer as you can.\n   * <p>\n   * When this is set, the writer will flush whenever buffered documents and\n   * deletions use this much RAM. Pass in {@link #DISABLE_AUTO_FLUSH} to prevent\n   * triggering a flush due to RAM usage. Note that if flushing by document\n   * count is also enabled, then the flush will be triggered by whichever comes\n   * first.\n   * <p>\n   * The maximum RAM limit is inherently determined by the JVMs available memory.\n   * Yet, an {@link IndexWriter} session can consume a significantly larger amount\n   * of memory than the given RAM limit since this limit is just an indicator when\n   * to flush memory resident documents to the Directory. Flushes are likely happen\n   * concurrently while other threads adding documents to the writer. For application\n   * stability the available memory in the JVM should be significantly larger than\n   * the RAM buffer used for indexing.\n   * <p>\n   * <b>NOTE</b>: the account of RAM usage for pending deletions is only\n   * approximate. Specifically, if you delete by Query, Lucene currently has no\n   * way to measure the RAM usage of individual Queries so the accounting will\n   * under-estimate and you should compensate by either calling commit()\n   * periodically yourself, or by using {@link #setMaxBufferedDeleteTerms(int)}\n   * to flush and apply buffered deletes by count instead of RAM usage\n   * (for each buffered delete Query a constant number of bytes is used to estimate\n   * RAM usage). Note that enabling {@link #setMaxBufferedDeleteTerms(int)} will\n   * not trigger any segment flushes.\n   * <p>\n   * <b>NOTE</b>: It's not guaranteed that all memory resident documents are flushed \n   * once this limit is exceeded. Depending on the configured {@link FlushPolicy} only a\n   * subset of the buffered documents are flushed and therefore only parts of the RAM\n   * buffer is released.    \n   * <p>\n   * \n   * The default value is {@link #DEFAULT_RAM_BUFFER_SIZE_MB}.\n   * @see #setFlushPolicy(FlushPolicy)\n   * @see #setRAMPerThreadHardLimitMB(int)\n   *\n   * <p>Takes effect immediately, but only the next time a\n   * document is added, updated or deleted.\n   *\n   * @throws IllegalArgumentException\n   *           if ramBufferSize is enabled but non-positive, or it disables\n   *           ramBufferSize when maxBufferedDocs is already disabled\n   *           \n   */\n  public IndexWriterConfig setRAMBufferSizeMB(double ramBufferSizeMB) {\n    if (ramBufferSizeMB != DISABLE_AUTO_FLUSH && ramBufferSizeMB <= 0.0)\n      throw new IllegalArgumentException(\n          \"ramBufferSize should be > 0.0 MB when enabled\");\n    if (ramBufferSizeMB == DISABLE_AUTO_FLUSH && maxBufferedDocs == DISABLE_AUTO_FLUSH)\n      throw new IllegalArgumentException(\n          \"at least one of ramBufferSize and maxBufferedDocs must be enabled\");\n    this.ramBufferSizeMB = ramBufferSizeMB;\n    return this;\n  }\n\n","sourceOld":"  /**\n   * Determines the amount of RAM that may be used for buffering added documents\n   * and deletions before they are flushed to the Directory. Generally for\n   * faster indexing performance it's best to flush by RAM usage instead of\n   * document count and use as large a RAM buffer as you can.\n   * <p>\n   * When this is set, the writer will flush whenever buffered documents and\n   * deletions use this much RAM. Pass in {@link #DISABLE_AUTO_FLUSH} to prevent\n   * triggering a flush due to RAM usage. Note that if flushing by document\n   * count is also enabled, then the flush will be triggered by whichever comes\n   * first.\n   * <p>\n   * The maximum RAM limit is inherently determined by the JVMs available memory.\n   * Yet, an {@link IndexWriter} session can consume a significantly larger amount\n   * of memory than the given RAM limit since this limit is just an indicator when\n   * to flush memory resident documents to the Directory. Flushes are likely happen\n   * concurrently while other threads adding documents to the writer. For application\n   * stability the available memory in the JVM should be significantly larger than\n   * the RAM buffer used for indexing.\n   * <p>\n   * <b>NOTE</b>: the account of RAM usage for pending deletions is only\n   * approximate. Specifically, if you delete by Query, Lucene currently has no\n   * way to measure the RAM usage of individual Queries so the accounting will\n   * under-estimate and you should compensate by either calling commit()\n   * periodically yourself, or by using {@link #setMaxBufferedDeleteTerms(int)}\n   * to flush and apply buffered deletes by count instead of RAM usage\n   * (for each buffered delete Query a constant number of bytes is used to estimate\n   * RAM usage). Note that enabling {@link #setMaxBufferedDeleteTerms(int)} will\n   * not trigger any segment flushes.\n   * <p>\n   * <b>NOTE</b>: It's not guaranteed that all memory resident documents are flushed \n   * once this limit is exceeded. Depending on the configured {@link FlushPolicy} only a\n   * subset of the buffered documents are flushed and therefore only parts of the RAM\n   * buffer is released.    \n   * <p>\n   * \n   * The default value is {@link #DEFAULT_RAM_BUFFER_SIZE_MB}.\n   * @see #setFlushPolicy(FlushPolicy)\n   * @see #setRAMPerThreadHardLimitMB(int)\n   *\n   * <p>Takes effect immediately, but only the next time a\n   * document is added, updated or deleted.\n   *\n   * @throws IllegalArgumentException\n   *           if ramBufferSize is enabled but non-positive, or it disables\n   *           ramBufferSize when maxBufferedDocs is already disabled\n   *           \n   */\n  public IndexWriterConfig setRAMBufferSizeMB(double ramBufferSizeMB) {\n    if (ramBufferSizeMB != DISABLE_AUTO_FLUSH && ramBufferSizeMB <= 0.0)\n      throw new IllegalArgumentException(\n          \"ramBufferSize should be > 0.0 MB when enabled\");\n    if (ramBufferSizeMB == DISABLE_AUTO_FLUSH && maxBufferedDocs == DISABLE_AUTO_FLUSH)\n      throw new IllegalArgumentException(\n          \"at least one of ramBufferSize and maxBufferedDocs must be enabled\");\n    this.ramBufferSizeMB = ramBufferSizeMB;\n    return this;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7f4e54ed7cef46f86888b5fb547594f62160395c","date":1340006971,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriterConfig#setRAMBufferSizeMB(double).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriterConfig#setRAMBufferSizeMB(double).mjava","sourceNew":"  @Override\n  public IndexWriterConfig setRAMBufferSizeMB(double ramBufferSizeMB) {\n    return (IndexWriterConfig) super.setRAMBufferSizeMB(ramBufferSizeMB);\n  }\n\n","sourceOld":"  /**\n   * Determines the amount of RAM that may be used for buffering added documents\n   * and deletions before they are flushed to the Directory. Generally for\n   * faster indexing performance it's best to flush by RAM usage instead of\n   * document count and use as large a RAM buffer as you can.\n   * <p>\n   * When this is set, the writer will flush whenever buffered documents and\n   * deletions use this much RAM. Pass in {@link #DISABLE_AUTO_FLUSH} to prevent\n   * triggering a flush due to RAM usage. Note that if flushing by document\n   * count is also enabled, then the flush will be triggered by whichever comes\n   * first.\n   * <p>\n   * The maximum RAM limit is inherently determined by the JVMs available memory.\n   * Yet, an {@link IndexWriter} session can consume a significantly larger amount\n   * of memory than the given RAM limit since this limit is just an indicator when\n   * to flush memory resident documents to the Directory. Flushes are likely happen\n   * concurrently while other threads adding documents to the writer. For application\n   * stability the available memory in the JVM should be significantly larger than\n   * the RAM buffer used for indexing.\n   * <p>\n   * <b>NOTE</b>: the account of RAM usage for pending deletions is only\n   * approximate. Specifically, if you delete by Query, Lucene currently has no\n   * way to measure the RAM usage of individual Queries so the accounting will\n   * under-estimate and you should compensate by either calling commit()\n   * periodically yourself, or by using {@link #setMaxBufferedDeleteTerms(int)}\n   * to flush and apply buffered deletes by count instead of RAM usage\n   * (for each buffered delete Query a constant number of bytes is used to estimate\n   * RAM usage). Note that enabling {@link #setMaxBufferedDeleteTerms(int)} will\n   * not trigger any segment flushes.\n   * <p>\n   * <b>NOTE</b>: It's not guaranteed that all memory resident documents are flushed \n   * once this limit is exceeded. Depending on the configured {@link FlushPolicy} only a\n   * subset of the buffered documents are flushed and therefore only parts of the RAM\n   * buffer is released.    \n   * <p>\n   * \n   * The default value is {@link #DEFAULT_RAM_BUFFER_SIZE_MB}.\n   * @see #setFlushPolicy(FlushPolicy)\n   * @see #setRAMPerThreadHardLimitMB(int)\n   *\n   * <p>Takes effect immediately, but only the next time a\n   * document is added, updated or deleted.\n   *\n   * @throws IllegalArgumentException\n   *           if ramBufferSize is enabled but non-positive, or it disables\n   *           ramBufferSize when maxBufferedDocs is already disabled\n   *           \n   */\n  public IndexWriterConfig setRAMBufferSizeMB(double ramBufferSizeMB) {\n    if (ramBufferSizeMB != DISABLE_AUTO_FLUSH && ramBufferSizeMB <= 0.0)\n      throw new IllegalArgumentException(\n          \"ramBufferSize should be > 0.0 MB when enabled\");\n    if (ramBufferSizeMB == DISABLE_AUTO_FLUSH && maxBufferedDocs == DISABLE_AUTO_FLUSH)\n      throw new IllegalArgumentException(\n          \"at least one of ramBufferSize and maxBufferedDocs must be enabled\");\n    this.ramBufferSizeMB = ramBufferSizeMB;\n    return this;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7f4e54ed7cef46f86888b5fb547594f62160395c":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7f4e54ed7cef46f86888b5fb547594f62160395c"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["7f4e54ed7cef46f86888b5fb547594f62160395c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"7f4e54ed7cef46f86888b5fb547594f62160395c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}