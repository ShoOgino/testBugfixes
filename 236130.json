{"path":"lucene/analysis/common/src/test/org/apache/lucene/analysis/sinks/TokenTypeSinkTokenizerTest#test().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/sinks/TokenTypeSinkTokenizerTest#test().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/sinks/TokenTypeSinkTokenizerTest#test().mjava","sourceNew":"  public void test() throws IOException {\n    TokenTypeSinkFilter sinkFilter = new TokenTypeSinkFilter(\"D\");\n    String test = \"The quick red fox jumped over the lazy brown dogs\";\n\n    TeeSinkTokenFilter ttf = new TeeSinkTokenFilter(new WordTokenFilter(new MockTokenizer(new StringReader(test), MockTokenizer.WHITESPACE, false)));\n    TeeSinkTokenFilter.SinkTokenStream sink = ttf.newSinkTokenStream(sinkFilter);\n    \n    boolean seenDogs = false;\n\n    CharTermAttribute termAtt = ttf.addAttribute(CharTermAttribute.class);\n    TypeAttribute typeAtt = ttf.addAttribute(TypeAttribute.class);\n    ttf.reset();\n    while (ttf.incrementToken()) {\n      if (termAtt.toString().equals(\"dogs\")) {\n        seenDogs = true;\n        assertTrue(typeAtt.type() + \" is not equal to \" + \"D\", typeAtt.type().equals(\"D\") == true);\n      } else {\n        assertTrue(typeAtt.type() + \" is not null and it should be\", typeAtt.type().equals(\"word\"));\n      }\n    }\n    assertTrue(seenDogs + \" does not equal: \" + true, seenDogs == true);\n    \n    int sinkCount = 0;\n    sink.reset();\n    while (sink.incrementToken()) {\n      sinkCount++;\n    }\n\n    assertTrue(\"sink Size: \" + sinkCount + \" is not: \" + 1, sinkCount == 1);\n  }\n\n","sourceOld":"  public void test() throws IOException {\n    TokenTypeSinkFilter sinkFilter = new TokenTypeSinkFilter(\"D\");\n    String test = \"The quick red fox jumped over the lazy brown dogs\";\n\n    TeeSinkTokenFilter ttf = new TeeSinkTokenFilter(new WordTokenFilter(new MockTokenizer(new StringReader(test), MockTokenizer.WHITESPACE, false)));\n    TeeSinkTokenFilter.SinkTokenStream sink = ttf.newSinkTokenStream(sinkFilter);\n    \n    boolean seenDogs = false;\n\n    CharTermAttribute termAtt = ttf.addAttribute(CharTermAttribute.class);\n    TypeAttribute typeAtt = ttf.addAttribute(TypeAttribute.class);\n    ttf.reset();\n    while (ttf.incrementToken()) {\n      if (termAtt.toString().equals(\"dogs\")) {\n        seenDogs = true;\n        assertTrue(typeAtt.type() + \" is not equal to \" + \"D\", typeAtt.type().equals(\"D\") == true);\n      } else {\n        assertTrue(typeAtt.type() + \" is not null and it should be\", typeAtt.type().equals(\"word\"));\n      }\n    }\n    assertTrue(seenDogs + \" does not equal: \" + true, seenDogs == true);\n    \n    int sinkCount = 0;\n    sink.reset();\n    while (sink.incrementToken()) {\n      sinkCount++;\n    }\n\n    assertTrue(\"sink Size: \" + sinkCount + \" is not: \" + 1, sinkCount == 1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338","date":1389274049,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/sinks/TokenTypeSinkTokenizerTest#test().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/sinks/TokenTypeSinkTokenizerTest#test().mjava","sourceNew":"  public void test() throws IOException {\n    TokenTypeSinkFilter sinkFilter = new TokenTypeSinkFilter(\"D\");\n    String test = \"The quick red fox jumped over the lazy brown dogs\";\n\n    TeeSinkTokenFilter ttf = new TeeSinkTokenFilter(new WordTokenFilter(whitespaceMockTokenizer(test)));\n    TeeSinkTokenFilter.SinkTokenStream sink = ttf.newSinkTokenStream(sinkFilter);\n    \n    boolean seenDogs = false;\n\n    CharTermAttribute termAtt = ttf.addAttribute(CharTermAttribute.class);\n    TypeAttribute typeAtt = ttf.addAttribute(TypeAttribute.class);\n    ttf.reset();\n    while (ttf.incrementToken()) {\n      if (termAtt.toString().equals(\"dogs\")) {\n        seenDogs = true;\n        assertTrue(typeAtt.type() + \" is not equal to \" + \"D\", typeAtt.type().equals(\"D\") == true);\n      } else {\n        assertTrue(typeAtt.type() + \" is not null and it should be\", typeAtt.type().equals(\"word\"));\n      }\n    }\n    assertTrue(seenDogs + \" does not equal: \" + true, seenDogs == true);\n    \n    int sinkCount = 0;\n    sink.reset();\n    while (sink.incrementToken()) {\n      sinkCount++;\n    }\n\n    assertTrue(\"sink Size: \" + sinkCount + \" is not: \" + 1, sinkCount == 1);\n  }\n\n","sourceOld":"  public void test() throws IOException {\n    TokenTypeSinkFilter sinkFilter = new TokenTypeSinkFilter(\"D\");\n    String test = \"The quick red fox jumped over the lazy brown dogs\";\n\n    TeeSinkTokenFilter ttf = new TeeSinkTokenFilter(new WordTokenFilter(new MockTokenizer(new StringReader(test), MockTokenizer.WHITESPACE, false)));\n    TeeSinkTokenFilter.SinkTokenStream sink = ttf.newSinkTokenStream(sinkFilter);\n    \n    boolean seenDogs = false;\n\n    CharTermAttribute termAtt = ttf.addAttribute(CharTermAttribute.class);\n    TypeAttribute typeAtt = ttf.addAttribute(TypeAttribute.class);\n    ttf.reset();\n    while (ttf.incrementToken()) {\n      if (termAtt.toString().equals(\"dogs\")) {\n        seenDogs = true;\n        assertTrue(typeAtt.type() + \" is not equal to \" + \"D\", typeAtt.type().equals(\"D\") == true);\n      } else {\n        assertTrue(typeAtt.type() + \" is not null and it should be\", typeAtt.type().equals(\"word\"));\n      }\n    }\n    assertTrue(seenDogs + \" does not equal: \" + true, seenDogs == true);\n    \n    int sinkCount = 0;\n    sink.reset();\n    while (sink.incrementToken()) {\n      sinkCount++;\n    }\n\n    assertTrue(\"sink Size: \" + sinkCount + \" is not: \" + 1, sinkCount == 1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3eac7b217fb57548b6fc21f0117e74698afde766","date":1452862547,"type":4,"author":"Shai Erera","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/sinks/TokenTypeSinkTokenizerTest#test().mjava","sourceNew":null,"sourceOld":"  public void test() throws IOException {\n    TokenTypeSinkFilter sinkFilter = new TokenTypeSinkFilter(\"D\");\n    String test = \"The quick red fox jumped over the lazy brown dogs\";\n\n    TeeSinkTokenFilter ttf = new TeeSinkTokenFilter(new WordTokenFilter(whitespaceMockTokenizer(test)));\n    TeeSinkTokenFilter.SinkTokenStream sink = ttf.newSinkTokenStream(sinkFilter);\n    \n    boolean seenDogs = false;\n\n    CharTermAttribute termAtt = ttf.addAttribute(CharTermAttribute.class);\n    TypeAttribute typeAtt = ttf.addAttribute(TypeAttribute.class);\n    ttf.reset();\n    while (ttf.incrementToken()) {\n      if (termAtt.toString().equals(\"dogs\")) {\n        seenDogs = true;\n        assertTrue(typeAtt.type() + \" is not equal to \" + \"D\", typeAtt.type().equals(\"D\") == true);\n      } else {\n        assertTrue(typeAtt.type() + \" is not null and it should be\", typeAtt.type().equals(\"word\"));\n      }\n    }\n    assertTrue(seenDogs + \" does not equal: \" + true, seenDogs == true);\n    \n    int sinkCount = 0;\n    sink.reset();\n    while (sink.incrementToken()) {\n      sinkCount++;\n    }\n\n    assertTrue(\"sink Size: \" + sinkCount + \" is not: \" + 1, sinkCount == 1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3eac7b217fb57548b6fc21f0117e74698afde766"],"3eac7b217fb57548b6fc21f0117e74698afde766":["ae889fd5c8a69f6b5d130d3c895bfa5b04d07338"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["ae889fd5c8a69f6b5d130d3c895bfa5b04d07338"],"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338":["3eac7b217fb57548b6fc21f0117e74698afde766"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"3eac7b217fb57548b6fc21f0117e74698afde766":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}