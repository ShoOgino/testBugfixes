{"path":"solr/core/src/java/org/apache/solr/util/SolrLogPostTool.LogRecordReader#readTrace().mjava","commits":[{"id":"2e38054de362483189e0fdd850b779ed766aa7aa","date":1578059239,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrLogPostTool.LogRecordReader#readTrace().mjava","pathOld":"/dev/null","sourceNew":"    private String readTrace() throws IOException {\n      StringBuilder buf = new StringBuilder();\n      buf.append(\"%html \");\n\n      while(true) {\n        String line = bufferedReader.readLine();\n        if (line == null) {\n          finished = true;\n          return buf.toString();\n        } else {\n          //look for a date at the beginning of the line\n          //If it's not there then read into the stack trace buffer\n          Matcher m = p.matcher(line);\n\n          if (!m.find()) {\n            //Line does not start with a timestamp so append to the stack trace\n            buf.append(line.replace(\"\\t\", \"    \") + \"<br/>\");\n            if(line.startsWith(\"Caused by:\")) {\n              this.cause = line;\n            }\n          } else {\n            pushedBack = line;\n            break;\n          }\n        }\n      }\n\n      return buf.toString();\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d42d9137df31cd94969bed5087634c6751d97eed","date":1578059239,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrLogPostTool.LogRecordReader#readTrace().mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrLogPostTool.LogRecordReader#readTrace().mjava","sourceNew":"    private String readTrace() throws IOException {\n      StringBuilder buf = new StringBuilder();\n      buf.append(\"%html \");\n\n      while(true) {\n        String line = bufferedReader.readLine();\n        if (line == null) {\n          finished = true;\n          return buf.toString();\n        } else {\n          //look for a date at the beginning of the line\n          //If it's not there then read into the stack trace buffer\n          Matcher m = p.matcher(line);\n\n          if (!m.find() && buf.length() < 10000) {\n            //Line does not start with a timestamp so append to the stack trace\n            buf.append(line.replace(\"\\t\", \"    \") + \"<br/>\");\n            if(line.startsWith(\"Caused by:\")) {\n              this.cause = line;\n            }\n          } else {\n            pushedBack = line;\n            break;\n          }\n        }\n      }\n\n      return buf.toString();\n    }\n\n","sourceOld":"    private String readTrace() throws IOException {\n      StringBuilder buf = new StringBuilder();\n      buf.append(\"%html \");\n\n      while(true) {\n        String line = bufferedReader.readLine();\n        if (line == null) {\n          finished = true;\n          return buf.toString();\n        } else {\n          //look for a date at the beginning of the line\n          //If it's not there then read into the stack trace buffer\n          Matcher m = p.matcher(line);\n\n          if (!m.find()) {\n            //Line does not start with a timestamp so append to the stack trace\n            buf.append(line.replace(\"\\t\", \"    \") + \"<br/>\");\n            if(line.startsWith(\"Caused by:\")) {\n              this.cause = line;\n            }\n          } else {\n            pushedBack = line;\n            break;\n          }\n        }\n      }\n\n      return buf.toString();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ca62564055241632cd20d65b5ecb8c8e93bd60c4","date":1578383112,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrLogPostTool.LogRecordReader#readTrace().mjava","pathOld":"/dev/null","sourceNew":"    private String readTrace() throws IOException {\n      StringBuilder buf = new StringBuilder();\n      buf.append(\"%html \");\n\n      while(true) {\n        String line = bufferedReader.readLine();\n        if (line == null) {\n          finished = true;\n          return buf.toString();\n        } else {\n          //look for a date at the beginning of the line\n          //If it's not there then read into the stack trace buffer\n          Matcher m = p.matcher(line);\n\n          if (!m.find() && buf.length() < 10000) {\n            //Line does not start with a timestamp so append to the stack trace\n            buf.append(line.replace(\"\\t\", \"    \") + \"<br/>\");\n            if(line.startsWith(\"Caused by:\")) {\n              this.cause = line;\n            }\n          } else {\n            pushedBack = line;\n            break;\n          }\n        }\n      }\n\n      return buf.toString();\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d42d9137df31cd94969bed5087634c6751d97eed":["2e38054de362483189e0fdd850b779ed766aa7aa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2e38054de362483189e0fdd850b779ed766aa7aa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ca62564055241632cd20d65b5ecb8c8e93bd60c4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d42d9137df31cd94969bed5087634c6751d97eed"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d42d9137df31cd94969bed5087634c6751d97eed"]},"commit2Childs":{"d42d9137df31cd94969bed5087634c6751d97eed":["ca62564055241632cd20d65b5ecb8c8e93bd60c4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2e38054de362483189e0fdd850b779ed766aa7aa","ca62564055241632cd20d65b5ecb8c8e93bd60c4"],"2e38054de362483189e0fdd850b779ed766aa7aa":["d42d9137df31cd94969bed5087634c6751d97eed"],"ca62564055241632cd20d65b5ecb8c8e93bd60c4":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ca62564055241632cd20d65b5ecb8c8e93bd60c4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}