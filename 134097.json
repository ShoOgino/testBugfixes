{"path":"solr/test-framework/src/java/org/apache/solr/SolrJettyTestBase#createNewSolrServer().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrJettyTestBase#createNewSolrServer().mjava","pathOld":"solr/src/test/org/apache/solr/client/solrj/SolrJettyTestBase#createNewSolrServer().mjava","sourceNew":"  /**\n   * Create a new solr server.\n   * If createJetty was called, an http implementation will be created,\n   * otherwise an embedded implementation will be created.\n   * Subclasses should override for other options.\n   */\n  public SolrServer createNewSolrServer() {\n    if (jetty != null) {\n      try {\n        // setup the server...\n        String url = \"http://localhost:\"+port+context;\n        CommonsHttpSolrServer s = new CommonsHttpSolrServer( url );\n        s.setConnectionTimeout(100); // 1/10th sec\n        s.setDefaultMaxConnectionsPerHost(100);\n        s.setMaxTotalConnections(100);\n        return s;\n      }\n      catch( Exception ex ) {\n        throw new RuntimeException( ex );\n      }\n    } else {\n      return new EmbeddedSolrServer( h.getCoreContainer(), \"\" );\n    }\n  }\n\n","sourceOld":"  /**\n   * Create a new solr server.\n   * If createJetty was called, an http implementation will be created,\n   * otherwise an embedded implementation will be created.\n   * Subclasses should override for other options.\n   */\n  public SolrServer createNewSolrServer() {\n    if (jetty != null) {\n      try {\n        // setup the server...\n        String url = \"http://localhost:\"+port+context;\n        CommonsHttpSolrServer s = new CommonsHttpSolrServer( url );\n        s.setConnectionTimeout(100); // 1/10th sec\n        s.setDefaultMaxConnectionsPerHost(100);\n        s.setMaxTotalConnections(100);\n        return s;\n      }\n      catch( Exception ex ) {\n        throw new RuntimeException( ex );\n      }\n    } else {\n      return new EmbeddedSolrServer( h.getCoreContainer(), \"\" );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrJettyTestBase#createNewSolrServer().mjava","pathOld":"solr/src/test/org/apache/solr/client/solrj/SolrJettyTestBase#createNewSolrServer().mjava","sourceNew":"  /**\n   * Create a new solr server.\n   * If createJetty was called, an http implementation will be created,\n   * otherwise an embedded implementation will be created.\n   * Subclasses should override for other options.\n   */\n  public SolrServer createNewSolrServer() {\n    if (jetty != null) {\n      try {\n        // setup the server...\n        String url = \"http://localhost:\"+port+context;\n        CommonsHttpSolrServer s = new CommonsHttpSolrServer( url );\n        s.setConnectionTimeout(100); // 1/10th sec\n        s.setDefaultMaxConnectionsPerHost(100);\n        s.setMaxTotalConnections(100);\n        return s;\n      }\n      catch( Exception ex ) {\n        throw new RuntimeException( ex );\n      }\n    } else {\n      return new EmbeddedSolrServer( h.getCoreContainer(), \"\" );\n    }\n  }\n\n","sourceOld":"  /**\n   * Create a new solr server.\n   * If createJetty was called, an http implementation will be created,\n   * otherwise an embedded implementation will be created.\n   * Subclasses should override for other options.\n   */\n  public SolrServer createNewSolrServer() {\n    if (jetty != null) {\n      try {\n        // setup the server...\n        String url = \"http://localhost:\"+port+context;\n        CommonsHttpSolrServer s = new CommonsHttpSolrServer( url );\n        s.setConnectionTimeout(100); // 1/10th sec\n        s.setDefaultMaxConnectionsPerHost(100);\n        s.setMaxTotalConnections(100);\n        return s;\n      }\n      catch( Exception ex ) {\n        throw new RuntimeException( ex );\n      }\n    } else {\n      return new EmbeddedSolrServer( h.getCoreContainer(), \"\" );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrJettyTestBase#createNewSolrServer().mjava","pathOld":"solr/src/test/org/apache/solr/client/solrj/SolrJettyTestBase#createNewSolrServer().mjava","sourceNew":"  /**\n   * Create a new solr server.\n   * If createJetty was called, an http implementation will be created,\n   * otherwise an embedded implementation will be created.\n   * Subclasses should override for other options.\n   */\n  public SolrServer createNewSolrServer() {\n    if (jetty != null) {\n      try {\n        // setup the server...\n        String url = \"http://localhost:\"+port+context;\n        CommonsHttpSolrServer s = new CommonsHttpSolrServer( url );\n        s.setConnectionTimeout(100); // 1/10th sec\n        s.setDefaultMaxConnectionsPerHost(100);\n        s.setMaxTotalConnections(100);\n        return s;\n      }\n      catch( Exception ex ) {\n        throw new RuntimeException( ex );\n      }\n    } else {\n      return new EmbeddedSolrServer( h.getCoreContainer(), \"\" );\n    }\n  }\n\n","sourceOld":"  /**\n   * Create a new solr server.\n   * If createJetty was called, an http implementation will be created,\n   * otherwise an embedded implementation will be created.\n   * Subclasses should override for other options.\n   */\n  public SolrServer createNewSolrServer() {\n    if (jetty != null) {\n      try {\n        // setup the server...\n        String url = \"http://localhost:\"+port+context;\n        CommonsHttpSolrServer s = new CommonsHttpSolrServer( url );\n        s.setConnectionTimeout(100); // 1/10th sec\n        s.setDefaultMaxConnectionsPerHost(100);\n        s.setMaxTotalConnections(100);\n        return s;\n      }\n      catch( Exception ex ) {\n        throw new RuntimeException( ex );\n      }\n    } else {\n      return new EmbeddedSolrServer( h.getCoreContainer(), \"\" );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7321b77a7bc3edfebd637ef273e9dfaa9969eba6","date":1333023097,"type":3,"author":"Sami Siren","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrJettyTestBase#createNewSolrServer().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrJettyTestBase#createNewSolrServer().mjava","sourceNew":"  /**\n   * Create a new solr server.\n   * If createJetty was called, an http implementation will be created,\n   * otherwise an embedded implementation will be created.\n   * Subclasses should override for other options.\n   */\n  public SolrServer createNewSolrServer() {\n    if (jetty != null) {\n      try {\n        // setup the server...\n        String url = \"http://localhost:\"+port+context;\n        HttpSolrServer s = new HttpSolrServer( url );\n        s.setConnectionTimeout(100); // 1/10th sec\n        s.setDefaultMaxConnectionsPerHost(100);\n        s.setMaxTotalConnections(100);\n        return s;\n      }\n      catch( Exception ex ) {\n        throw new RuntimeException( ex );\n      }\n    } else {\n      return new EmbeddedSolrServer( h.getCoreContainer(), \"\" );\n    }\n  }\n\n","sourceOld":"  /**\n   * Create a new solr server.\n   * If createJetty was called, an http implementation will be created,\n   * otherwise an embedded implementation will be created.\n   * Subclasses should override for other options.\n   */\n  public SolrServer createNewSolrServer() {\n    if (jetty != null) {\n      try {\n        // setup the server...\n        String url = \"http://localhost:\"+port+context;\n        CommonsHttpSolrServer s = new CommonsHttpSolrServer( url );\n        s.setConnectionTimeout(100); // 1/10th sec\n        s.setDefaultMaxConnectionsPerHost(100);\n        s.setMaxTotalConnections(100);\n        return s;\n      }\n      catch( Exception ex ) {\n        throw new RuntimeException( ex );\n      }\n    } else {\n      return new EmbeddedSolrServer( h.getCoreContainer(), \"\" );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5b9fe91de32e1be9cf3fc4193869fdbe5b3234f5","date":1333057170,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrJettyTestBase#createNewSolrServer().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrJettyTestBase#createNewSolrServer().mjava","sourceNew":"  /**\n   * Create a new solr server.\n   * If createJetty was called, an http implementation will be created,\n   * otherwise an embedded implementation will be created.\n   * Subclasses should override for other options.\n   */\n  public SolrServer createNewSolrServer() {\n    if (jetty != null) {\n      try {\n        // setup the server...\n        String url = \"http://localhost:\"+port+context;\n        HttpSolrServer s = new HttpSolrServer( url );\n        s.setConnectionTimeout(DEFAULT_CONNECTION_TIMEOUT);\n        s.setDefaultMaxConnectionsPerHost(100);\n        s.setMaxTotalConnections(100);\n        return s;\n      }\n      catch( Exception ex ) {\n        throw new RuntimeException( ex );\n      }\n    } else {\n      return new EmbeddedSolrServer( h.getCoreContainer(), \"\" );\n    }\n  }\n\n","sourceOld":"  /**\n   * Create a new solr server.\n   * If createJetty was called, an http implementation will be created,\n   * otherwise an embedded implementation will be created.\n   * Subclasses should override for other options.\n   */\n  public SolrServer createNewSolrServer() {\n    if (jetty != null) {\n      try {\n        // setup the server...\n        String url = \"http://localhost:\"+port+context;\n        HttpSolrServer s = new HttpSolrServer( url );\n        s.setConnectionTimeout(100); // 1/10th sec\n        s.setDefaultMaxConnectionsPerHost(100);\n        s.setMaxTotalConnections(100);\n        return s;\n      }\n      catch( Exception ex ) {\n        throw new RuntimeException( ex );\n      }\n    } else {\n      return new EmbeddedSolrServer( h.getCoreContainer(), \"\" );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"47c952a4f0f0e9b74763a0609a3726dbb217164a","date":1347968413,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrJettyTestBase#createNewSolrServer().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrJettyTestBase#createNewSolrServer().mjava","sourceNew":"  /**\n   * Create a new solr server.\n   * If createJetty was called, an http implementation will be created,\n   * otherwise an embedded implementation will be created.\n   * Subclasses should override for other options.\n   */\n  public SolrServer createNewSolrServer() {\n    if (jetty != null) {\n      try {\n        // setup the server...\n        String url = \"http://127.0.0.1:\"+port+context;\n        HttpSolrServer s = new HttpSolrServer( url );\n        s.setConnectionTimeout(DEFAULT_CONNECTION_TIMEOUT);\n        s.setDefaultMaxConnectionsPerHost(100);\n        s.setMaxTotalConnections(100);\n        return s;\n      }\n      catch( Exception ex ) {\n        throw new RuntimeException( ex );\n      }\n    } else {\n      return new EmbeddedSolrServer( h.getCoreContainer(), \"\" );\n    }\n  }\n\n","sourceOld":"  /**\n   * Create a new solr server.\n   * If createJetty was called, an http implementation will be created,\n   * otherwise an embedded implementation will be created.\n   * Subclasses should override for other options.\n   */\n  public SolrServer createNewSolrServer() {\n    if (jetty != null) {\n      try {\n        // setup the server...\n        String url = \"http://localhost:\"+port+context;\n        HttpSolrServer s = new HttpSolrServer( url );\n        s.setConnectionTimeout(DEFAULT_CONNECTION_TIMEOUT);\n        s.setDefaultMaxConnectionsPerHost(100);\n        s.setMaxTotalConnections(100);\n        return s;\n      }\n      catch( Exception ex ) {\n        throw new RuntimeException( ex );\n      }\n    } else {\n      return new EmbeddedSolrServer( h.getCoreContainer(), \"\" );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7734ce13985aba556e3623d51c2d870ed8142847","date":1360796678,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrJettyTestBase#createNewSolrServer().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrJettyTestBase#createNewSolrServer().mjava","sourceNew":"  /**\n   * Create a new solr server.\n   * If createJetty was called, an http implementation will be created,\n   * otherwise an embedded implementation will be created.\n   * Subclasses should override for other options.\n   */\n  public SolrServer createNewSolrServer() {\n    if (jetty != null) {\n      try {\n        // setup the server...\n        String url = jetty.getBaseUrl().toString();\n        HttpSolrServer s = new HttpSolrServer( url );\n        s.setConnectionTimeout(DEFAULT_CONNECTION_TIMEOUT);\n        s.setDefaultMaxConnectionsPerHost(100);\n        s.setMaxTotalConnections(100);\n        return s;\n      }\n      catch( Exception ex ) {\n        throw new RuntimeException( ex );\n      }\n    } else {\n      return new EmbeddedSolrServer( h.getCoreContainer(), \"\" );\n    }\n  }\n\n","sourceOld":"  /**\n   * Create a new solr server.\n   * If createJetty was called, an http implementation will be created,\n   * otherwise an embedded implementation will be created.\n   * Subclasses should override for other options.\n   */\n  public SolrServer createNewSolrServer() {\n    if (jetty != null) {\n      try {\n        // setup the server...\n        String url = \"http://127.0.0.1:\"+port+context;\n        HttpSolrServer s = new HttpSolrServer( url );\n        s.setConnectionTimeout(DEFAULT_CONNECTION_TIMEOUT);\n        s.setDefaultMaxConnectionsPerHost(100);\n        s.setMaxTotalConnections(100);\n        return s;\n      }\n      catch( Exception ex ) {\n        throw new RuntimeException( ex );\n      }\n    } else {\n      return new EmbeddedSolrServer( h.getCoreContainer(), \"\" );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b41f996b22bd5518650f897d050088ff808ec03","date":1360969107,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrJettyTestBase#createNewSolrServer().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrJettyTestBase#createNewSolrServer().mjava","sourceNew":"  /**\n   * Create a new solr server.\n   * If createJetty was called, an http implementation will be created,\n   * otherwise an embedded implementation will be created.\n   * Subclasses should override for other options.\n   */\n  public SolrServer createNewSolrServer() {\n    if (jetty != null) {\n      try {\n        // setup the server...\n        String url = jetty.getBaseUrl().toString();\n        HttpSolrServer s = new HttpSolrServer( url );\n        s.setConnectionTimeout(DEFAULT_CONNECTION_TIMEOUT);\n        s.setDefaultMaxConnectionsPerHost(100);\n        s.setMaxTotalConnections(100);\n        return s;\n      }\n      catch( Exception ex ) {\n        throw new RuntimeException( ex );\n      }\n    } else {\n      return new EmbeddedSolrServer( h.getCoreContainer(), \"\" );\n    }\n  }\n\n","sourceOld":"  /**\n   * Create a new solr server.\n   * If createJetty was called, an http implementation will be created,\n   * otherwise an embedded implementation will be created.\n   * Subclasses should override for other options.\n   */\n  public SolrServer createNewSolrServer() {\n    if (jetty != null) {\n      try {\n        // setup the server...\n        String url = \"http://127.0.0.1:\"+port+context;\n        HttpSolrServer s = new HttpSolrServer( url );\n        s.setConnectionTimeout(DEFAULT_CONNECTION_TIMEOUT);\n        s.setDefaultMaxConnectionsPerHost(100);\n        s.setMaxTotalConnections(100);\n        return s;\n      }\n      catch( Exception ex ) {\n        throw new RuntimeException( ex );\n      }\n    } else {\n      return new EmbeddedSolrServer( h.getCoreContainer(), \"\" );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e3eac61f0ed7a1ba8a2d2f6298467a8141dcbbc9","date":1366986755,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrJettyTestBase#createNewSolrServer().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrJettyTestBase#createNewSolrServer().mjava","sourceNew":"  /**\n   * Create a new solr server.\n   * If createJetty was called, an http implementation will be created,\n   * otherwise an embedded implementation will be created.\n   * Subclasses should override for other options.\n   */\n  public SolrServer createNewSolrServer() {\n    if (jetty != null) {\n      try {\n        // setup the server...\n        String url = jetty.getBaseUrl().toString() + \"/\" + \"collection1\";\n        HttpSolrServer s = new HttpSolrServer( url );\n        s.setConnectionTimeout(DEFAULT_CONNECTION_TIMEOUT);\n        s.setDefaultMaxConnectionsPerHost(100);\n        s.setMaxTotalConnections(100);\n        return s;\n      }\n      catch( Exception ex ) {\n        throw new RuntimeException( ex );\n      }\n    } else {\n      return new EmbeddedSolrServer( h.getCoreContainer(), \"\" );\n    }\n  }\n\n","sourceOld":"  /**\n   * Create a new solr server.\n   * If createJetty was called, an http implementation will be created,\n   * otherwise an embedded implementation will be created.\n   * Subclasses should override for other options.\n   */\n  public SolrServer createNewSolrServer() {\n    if (jetty != null) {\n      try {\n        // setup the server...\n        String url = jetty.getBaseUrl().toString();\n        HttpSolrServer s = new HttpSolrServer( url );\n        s.setConnectionTimeout(DEFAULT_CONNECTION_TIMEOUT);\n        s.setDefaultMaxConnectionsPerHost(100);\n        s.setMaxTotalConnections(100);\n        return s;\n      }\n      catch( Exception ex ) {\n        throw new RuntimeException( ex );\n      }\n    } else {\n      return new EmbeddedSolrServer( h.getCoreContainer(), \"\" );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrJettyTestBase#createNewSolrServer().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrJettyTestBase#createNewSolrServer().mjava","sourceNew":"  /**\n   * Create a new solr server.\n   * If createJetty was called, an http implementation will be created,\n   * otherwise an embedded implementation will be created.\n   * Subclasses should override for other options.\n   */\n  public SolrServer createNewSolrServer() {\n    if (jetty != null) {\n      try {\n        // setup the server...\n        String url = jetty.getBaseUrl().toString() + \"/\" + \"collection1\";\n        HttpSolrServer s = new HttpSolrServer( url );\n        s.setConnectionTimeout(DEFAULT_CONNECTION_TIMEOUT);\n        s.setDefaultMaxConnectionsPerHost(100);\n        s.setMaxTotalConnections(100);\n        return s;\n      }\n      catch( Exception ex ) {\n        throw new RuntimeException( ex );\n      }\n    } else {\n      return new EmbeddedSolrServer( h.getCoreContainer(), \"\" );\n    }\n  }\n\n","sourceOld":"  /**\n   * Create a new solr server.\n   * If createJetty was called, an http implementation will be created,\n   * otherwise an embedded implementation will be created.\n   * Subclasses should override for other options.\n   */\n  public SolrServer createNewSolrServer() {\n    if (jetty != null) {\n      try {\n        // setup the server...\n        String url = jetty.getBaseUrl().toString() + \"/\" + \"collection1\";\n        HttpSolrServer s = new HttpSolrServer( url );\n        s.setConnectionTimeout(DEFAULT_CONNECTION_TIMEOUT);\n        s.setDefaultMaxConnectionsPerHost(100);\n        s.setMaxTotalConnections(100);\n        return s;\n      }\n      catch( Exception ex ) {\n        throw new RuntimeException( ex );\n      }\n    } else {\n      return new EmbeddedSolrServer( h.getCoreContainer(), \"\" );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","date":1376375609,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrJettyTestBase#createNewSolrServer().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrJettyTestBase#createNewSolrServer().mjava","sourceNew":"  /**\n   * Create a new solr server.\n   * If createJetty was called, an http implementation will be created,\n   * otherwise an embedded implementation will be created.\n   * Subclasses should override for other options.\n   */\n  public SolrServer createNewSolrServer() {\n    if (jetty != null) {\n      try {\n        // setup the server...\n        String url = jetty.getBaseUrl().toString() + \"/\" + \"collection1\";\n        HttpSolrServer s = new HttpSolrServer( url );\n        s.setConnectionTimeout(DEFAULT_CONNECTION_TIMEOUT);\n        s.setDefaultMaxConnectionsPerHost(100);\n        s.setMaxTotalConnections(100);\n        return s;\n      }\n      catch( Exception ex ) {\n        throw new RuntimeException( ex );\n      }\n    } else {\n      return new EmbeddedSolrServer( h.getCoreContainer(), \"\" );\n    }\n  }\n\n","sourceOld":"  /**\n   * Create a new solr server.\n   * If createJetty was called, an http implementation will be created,\n   * otherwise an embedded implementation will be created.\n   * Subclasses should override for other options.\n   */\n  public SolrServer createNewSolrServer() {\n    if (jetty != null) {\n      try {\n        // setup the server...\n        String url = jetty.getBaseUrl().toString() + \"/\" + \"collection1\";\n        HttpSolrServer s = new HttpSolrServer( url );\n        s.setConnectionTimeout(DEFAULT_CONNECTION_TIMEOUT);\n        s.setDefaultMaxConnectionsPerHost(100);\n        s.setMaxTotalConnections(100);\n        return s;\n      }\n      catch( Exception ex ) {\n        throw new RuntimeException( ex );\n      }\n    } else {\n      return new EmbeddedSolrServer( h.getCoreContainer(), \"\" );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrJettyTestBase#createNewSolrClient().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrJettyTestBase#createNewSolrServer().mjava","sourceNew":"  /**\n   * Create a new solr client.\n   * If createJetty was called, an http implementation will be created,\n   * otherwise an embedded implementation will be created.\n   * Subclasses should override for other options.\n   */\n  public SolrClient createNewSolrClient() {\n    if (jetty != null) {\n      try {\n        // setup the client...\n        String url = jetty.getBaseUrl().toString() + \"/\" + \"collection1\";\n        HttpSolrClient client = new HttpSolrClient( url );\n        client.setConnectionTimeout(DEFAULT_CONNECTION_TIMEOUT);\n        client.setDefaultMaxConnectionsPerHost(100);\n        client.setMaxTotalConnections(100);\n        return client;\n      }\n      catch( Exception ex ) {\n        throw new RuntimeException( ex );\n      }\n    } else {\n      return new EmbeddedSolrServer( h.getCoreContainer(), \"\" );\n    }\n  }\n\n","sourceOld":"  /**\n   * Create a new solr server.\n   * If createJetty was called, an http implementation will be created,\n   * otherwise an embedded implementation will be created.\n   * Subclasses should override for other options.\n   */\n  public SolrServer createNewSolrServer() {\n    if (jetty != null) {\n      try {\n        // setup the server...\n        String url = jetty.getBaseUrl().toString() + \"/\" + \"collection1\";\n        HttpSolrServer s = new HttpSolrServer( url );\n        s.setConnectionTimeout(DEFAULT_CONNECTION_TIMEOUT);\n        s.setDefaultMaxConnectionsPerHost(100);\n        s.setMaxTotalConnections(100);\n        return s;\n      }\n      catch( Exception ex ) {\n        throw new RuntimeException( ex );\n      }\n    } else {\n      return new EmbeddedSolrServer( h.getCoreContainer(), \"\" );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e3eac61f0ed7a1ba8a2d2f6298467a8141dcbbc9":["7734ce13985aba556e3623d51c2d870ed8142847"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":["e3eac61f0ed7a1ba8a2d2f6298467a8141dcbbc9","19275ba31e621f6da1b83bf13af75233876fd3d4"],"7734ce13985aba556e3623d51c2d870ed8142847":["47c952a4f0f0e9b74763a0609a3726dbb217164a"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"7321b77a7bc3edfebd637ef273e9dfaa9969eba6":["c26f00b574427b55127e869b935845554afde1fa"],"bafca15d8e408346a67f4282ad1143b88023893b":["19275ba31e621f6da1b83bf13af75233876fd3d4"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["e3eac61f0ed7a1ba8a2d2f6298467a8141dcbbc9"],"5b9fe91de32e1be9cf3fc4193869fdbe5b3234f5":["7321b77a7bc3edfebd637ef273e9dfaa9969eba6"],"47c952a4f0f0e9b74763a0609a3726dbb217164a":["5b9fe91de32e1be9cf3fc4193869fdbe5b3234f5"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3b41f996b22bd5518650f897d050088ff808ec03":["47c952a4f0f0e9b74763a0609a3726dbb217164a","7734ce13985aba556e3623d51c2d870ed8142847"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bafca15d8e408346a67f4282ad1143b88023893b"]},"commit2Childs":{"e3eac61f0ed7a1ba8a2d2f6298467a8141dcbbc9":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","19275ba31e621f6da1b83bf13af75233876fd3d4"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":[],"7734ce13985aba556e3623d51c2d870ed8142847":["e3eac61f0ed7a1ba8a2d2f6298467a8141dcbbc9","3b41f996b22bd5518650f897d050088ff808ec03"],"c26f00b574427b55127e869b935845554afde1fa":["7321b77a7bc3edfebd637ef273e9dfaa9969eba6"],"7321b77a7bc3edfebd637ef273e9dfaa9969eba6":["5b9fe91de32e1be9cf3fc4193869fdbe5b3234f5"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","bafca15d8e408346a67f4282ad1143b88023893b"],"bafca15d8e408346a67f4282ad1143b88023893b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5b9fe91de32e1be9cf3fc4193869fdbe5b3234f5":["47c952a4f0f0e9b74763a0609a3726dbb217164a"],"47c952a4f0f0e9b74763a0609a3726dbb217164a":["7734ce13985aba556e3623d51c2d870ed8142847","3b41f996b22bd5518650f897d050088ff808ec03"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"3b41f996b22bd5518650f897d050088ff808ec03":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","3b41f996b22bd5518650f897d050088ff808ec03","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}