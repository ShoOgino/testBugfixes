{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/RankStream#RankStream(StreamExpression,StreamFactory).mjava","commits":[{"id":"f00f1c5fad501b66705121feb623f8cfbb6712f9","date":1431347838,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/RankStream#RankStream(StreamExpression,StreamFactory).mjava","pathOld":"/dev/null","sourceNew":"  public RankStream(StreamExpression expression, StreamFactory factory) throws IOException {\n    // grab all parameters out\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, ExpressibleStream.class, TupleStream.class);\n    StreamExpressionNamedParameter nParam = factory.getNamedOperand(expression, \"n\");\n    StreamExpressionNamedParameter sortExpression = factory.getNamedOperand(expression, \"sort\");\n    \n    // validate expression contains only what we want.\n    if(expression.getParameters().size() != streamExpressions.size() + 2){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - unknown operands found\", expression));\n    }\n    \n    if(null == nParam || null == nParam.getParameter() || !(nParam.getParameter() instanceof StreamExpressionValue)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a single 'n' parameter of type positive integer but didn't find one\",expression));\n    }\n    String nStr = ((StreamExpressionValue)nParam.getParameter()).getValue();\n    int nInt = 0;\n    try{\n      nInt = Integer.parseInt(nStr);\n      if(nInt <= 0){\n        throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - topN '%s' must be greater than 0.\",expression, nStr));\n      }\n    }\n    catch(NumberFormatException e){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - topN '%s' is not a valid integer.\",expression, nStr));\n    }    \n    if(1 != streamExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a single stream but found %d\",expression, streamExpressions.size()));\n    }    \n    if(null == sortExpression || !(sortExpression.getParameter() instanceof StreamExpressionValue)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting single 'over' parameter listing fields to unique over but didn't find one\",expression));\n    }\n    \n    TupleStream stream = factory.constructStream(streamExpressions.get(0));\n    Comparator<Tuple> comp = factory.constructComparator(((StreamExpressionValue)sortExpression.getParameter()).getValue(), FieldComparator.class);\n    \n    init(stream,nInt,comp);    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e431b0806b8db369da896b66a74e304a49953c7b","date":1434740037,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/RankStream#RankStream(StreamExpression,StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/RankStream#RankStream(StreamExpression,StreamFactory).mjava","sourceNew":"  public RankStream(StreamExpression expression, StreamFactory factory) throws IOException {\n    // grab all parameters out\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, TupleStream.class);\n    StreamExpressionNamedParameter nParam = factory.getNamedOperand(expression, \"n\");\n    StreamExpressionNamedParameter sortExpression = factory.getNamedOperand(expression, \"sort\");\n    \n    // validate expression contains only what we want.\n    if(expression.getParameters().size() != streamExpressions.size() + 2){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - unknown operands found\", expression));\n    }\n    \n    if(null == nParam || null == nParam.getParameter() || !(nParam.getParameter() instanceof StreamExpressionValue)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a single 'n' parameter of type positive integer but didn't find one\",expression));\n    }\n    String nStr = ((StreamExpressionValue)nParam.getParameter()).getValue();\n    int nInt = 0;\n    try{\n      nInt = Integer.parseInt(nStr);\n      if(nInt <= 0){\n        throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - topN '%s' must be greater than 0.\",expression, nStr));\n      }\n    }\n    catch(NumberFormatException e){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - topN '%s' is not a valid integer.\",expression, nStr));\n    }    \n    if(1 != streamExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a single stream but found %d\",expression, streamExpressions.size()));\n    }    \n    if(null == sortExpression || !(sortExpression.getParameter() instanceof StreamExpressionValue)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting single 'over' parameter listing fields to unique over but didn't find one\",expression));\n    }\n    \n    TupleStream stream = factory.constructStream(streamExpressions.get(0));\n    Comparator<Tuple> comp = factory.constructComparator(((StreamExpressionValue)sortExpression.getParameter()).getValue(), StreamComparator.class);\n    \n    init(stream,nInt,comp);    \n  }\n\n","sourceOld":"  public RankStream(StreamExpression expression, StreamFactory factory) throws IOException {\n    // grab all parameters out\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, ExpressibleStream.class, TupleStream.class);\n    StreamExpressionNamedParameter nParam = factory.getNamedOperand(expression, \"n\");\n    StreamExpressionNamedParameter sortExpression = factory.getNamedOperand(expression, \"sort\");\n    \n    // validate expression contains only what we want.\n    if(expression.getParameters().size() != streamExpressions.size() + 2){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - unknown operands found\", expression));\n    }\n    \n    if(null == nParam || null == nParam.getParameter() || !(nParam.getParameter() instanceof StreamExpressionValue)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a single 'n' parameter of type positive integer but didn't find one\",expression));\n    }\n    String nStr = ((StreamExpressionValue)nParam.getParameter()).getValue();\n    int nInt = 0;\n    try{\n      nInt = Integer.parseInt(nStr);\n      if(nInt <= 0){\n        throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - topN '%s' must be greater than 0.\",expression, nStr));\n      }\n    }\n    catch(NumberFormatException e){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - topN '%s' is not a valid integer.\",expression, nStr));\n    }    \n    if(1 != streamExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a single stream but found %d\",expression, streamExpressions.size()));\n    }    \n    if(null == sortExpression || !(sortExpression.getParameter() instanceof StreamExpressionValue)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting single 'over' parameter listing fields to unique over but didn't find one\",expression));\n    }\n    \n    TupleStream stream = factory.constructStream(streamExpressions.get(0));\n    Comparator<Tuple> comp = factory.constructComparator(((StreamExpressionValue)sortExpression.getParameter()).getValue(), FieldComparator.class);\n    \n    init(stream,nInt,comp);    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0891a6931fc352fc7e61f2752ef9add758d3fb89","date":1435151229,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/RankStream#RankStream(StreamExpression,StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/RankStream#RankStream(StreamExpression,StreamFactory).mjava","sourceNew":"  public RankStream(StreamExpression expression, StreamFactory factory) throws IOException {\n    // grab all parameters out\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, TupleStream.class);\n    StreamExpressionNamedParameter nParam = factory.getNamedOperand(expression, \"n\");\n    StreamExpressionNamedParameter sortExpression = factory.getNamedOperand(expression, \"sort\");\n    \n    // validate expression contains only what we want.\n    if(expression.getParameters().size() != streamExpressions.size() + 2){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - unknown operands found\", expression));\n    }\n    \n    if(null == nParam || null == nParam.getParameter() || !(nParam.getParameter() instanceof StreamExpressionValue)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a single 'n' parameter of type positive integer but didn't find one\",expression));\n    }\n    String nStr = ((StreamExpressionValue)nParam.getParameter()).getValue();\n    int nInt = 0;\n    try{\n      nInt = Integer.parseInt(nStr);\n      if(nInt <= 0){\n        throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - topN '%s' must be greater than 0.\",expression, nStr));\n      }\n    }\n    catch(NumberFormatException e){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - topN '%s' is not a valid integer.\",expression, nStr));\n    }    \n    if(1 != streamExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a single stream but found %d\",expression, streamExpressions.size()));\n    }    \n    if(null == sortExpression || !(sortExpression.getParameter() instanceof StreamExpressionValue)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting single 'over' parameter listing fields to unique over but didn't find one\",expression));\n    }\n    \n    TupleStream stream = factory.constructStream(streamExpressions.get(0));\n    StreamComparator comp = factory.constructComparator(((StreamExpressionValue)sortExpression.getParameter()).getValue(), FieldComparator.class);\n    \n    init(stream,nInt,comp);    \n  }\n\n","sourceOld":"  public RankStream(StreamExpression expression, StreamFactory factory) throws IOException {\n    // grab all parameters out\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, TupleStream.class);\n    StreamExpressionNamedParameter nParam = factory.getNamedOperand(expression, \"n\");\n    StreamExpressionNamedParameter sortExpression = factory.getNamedOperand(expression, \"sort\");\n    \n    // validate expression contains only what we want.\n    if(expression.getParameters().size() != streamExpressions.size() + 2){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - unknown operands found\", expression));\n    }\n    \n    if(null == nParam || null == nParam.getParameter() || !(nParam.getParameter() instanceof StreamExpressionValue)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a single 'n' parameter of type positive integer but didn't find one\",expression));\n    }\n    String nStr = ((StreamExpressionValue)nParam.getParameter()).getValue();\n    int nInt = 0;\n    try{\n      nInt = Integer.parseInt(nStr);\n      if(nInt <= 0){\n        throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - topN '%s' must be greater than 0.\",expression, nStr));\n      }\n    }\n    catch(NumberFormatException e){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - topN '%s' is not a valid integer.\",expression, nStr));\n    }    \n    if(1 != streamExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a single stream but found %d\",expression, streamExpressions.size()));\n    }    \n    if(null == sortExpression || !(sortExpression.getParameter() instanceof StreamExpressionValue)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting single 'over' parameter listing fields to unique over but didn't find one\",expression));\n    }\n    \n    TupleStream stream = factory.constructStream(streamExpressions.get(0));\n    Comparator<Tuple> comp = factory.constructComparator(((StreamExpressionValue)sortExpression.getParameter()).getValue(), StreamComparator.class);\n    \n    init(stream,nInt,comp);    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"01624b85de12fb02335810bdf325124e59040772","date":1490254940,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/RankStream#RankStream(StreamExpression,StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/RankStream#RankStream(StreamExpression,StreamFactory).mjava","sourceNew":"  public RankStream(StreamExpression expression, StreamFactory factory) throws IOException {\n    // grab all parameters out\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, TupleStream.class);\n    StreamExpressionNamedParameter nParam = factory.getNamedOperand(expression, \"n\");\n    StreamExpressionNamedParameter sortExpression = factory.getNamedOperand(expression, SORT);\n    \n    // validate expression contains only what we want.\n    if(expression.getParameters().size() != streamExpressions.size() + 2){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - unknown operands found\", expression));\n    }\n    \n    if(null == nParam || null == nParam.getParameter() || !(nParam.getParameter() instanceof StreamExpressionValue)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a single 'n' parameter of type positive integer but didn't find one\",expression));\n    }\n    String nStr = ((StreamExpressionValue)nParam.getParameter()).getValue();\n    int nInt = 0;\n    try{\n      nInt = Integer.parseInt(nStr);\n      if(nInt <= 0){\n        throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - topN '%s' must be greater than 0.\",expression, nStr));\n      }\n    }\n    catch(NumberFormatException e){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - topN '%s' is not a valid integer.\",expression, nStr));\n    }    \n    if(1 != streamExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a single stream but found %d\",expression, streamExpressions.size()));\n    }    \n    if(null == sortExpression || !(sortExpression.getParameter() instanceof StreamExpressionValue)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting single 'over' parameter listing fields to unique over but didn't find one\",expression));\n    }\n    \n    TupleStream stream = factory.constructStream(streamExpressions.get(0));\n    StreamComparator comp = factory.constructComparator(((StreamExpressionValue)sortExpression.getParameter()).getValue(), FieldComparator.class);\n    \n    init(stream,nInt,comp);    \n  }\n\n","sourceOld":"  public RankStream(StreamExpression expression, StreamFactory factory) throws IOException {\n    // grab all parameters out\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, TupleStream.class);\n    StreamExpressionNamedParameter nParam = factory.getNamedOperand(expression, \"n\");\n    StreamExpressionNamedParameter sortExpression = factory.getNamedOperand(expression, \"sort\");\n    \n    // validate expression contains only what we want.\n    if(expression.getParameters().size() != streamExpressions.size() + 2){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - unknown operands found\", expression));\n    }\n    \n    if(null == nParam || null == nParam.getParameter() || !(nParam.getParameter() instanceof StreamExpressionValue)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a single 'n' parameter of type positive integer but didn't find one\",expression));\n    }\n    String nStr = ((StreamExpressionValue)nParam.getParameter()).getValue();\n    int nInt = 0;\n    try{\n      nInt = Integer.parseInt(nStr);\n      if(nInt <= 0){\n        throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - topN '%s' must be greater than 0.\",expression, nStr));\n      }\n    }\n    catch(NumberFormatException e){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - topN '%s' is not a valid integer.\",expression, nStr));\n    }    \n    if(1 != streamExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a single stream but found %d\",expression, streamExpressions.size()));\n    }    \n    if(null == sortExpression || !(sortExpression.getParameter() instanceof StreamExpressionValue)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting single 'over' parameter listing fields to unique over but didn't find one\",expression));\n    }\n    \n    TupleStream stream = factory.constructStream(streamExpressions.get(0));\n    StreamComparator comp = factory.constructComparator(((StreamExpressionValue)sortExpression.getParameter()).getValue(), FieldComparator.class);\n    \n    init(stream,nInt,comp);    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6f4c5d3859373c3a74734e85efa122b17514e3e8","date":1490280013,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/RankStream#RankStream(StreamExpression,StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/RankStream#RankStream(StreamExpression,StreamFactory).mjava","sourceNew":"  public RankStream(StreamExpression expression, StreamFactory factory) throws IOException {\n    // grab all parameters out\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, TupleStream.class);\n    StreamExpressionNamedParameter nParam = factory.getNamedOperand(expression, \"n\");\n    StreamExpressionNamedParameter sortExpression = factory.getNamedOperand(expression, SORT);\n    \n    // validate expression contains only what we want.\n    if(expression.getParameters().size() != streamExpressions.size() + 2){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - unknown operands found\", expression));\n    }\n    \n    if(null == nParam || null == nParam.getParameter() || !(nParam.getParameter() instanceof StreamExpressionValue)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a single 'n' parameter of type positive integer but didn't find one\",expression));\n    }\n    String nStr = ((StreamExpressionValue)nParam.getParameter()).getValue();\n    int nInt = 0;\n    try{\n      nInt = Integer.parseInt(nStr);\n      if(nInt <= 0){\n        throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - topN '%s' must be greater than 0.\",expression, nStr));\n      }\n    }\n    catch(NumberFormatException e){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - topN '%s' is not a valid integer.\",expression, nStr));\n    }    \n    if(1 != streamExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a single stream but found %d\",expression, streamExpressions.size()));\n    }    \n    if(null == sortExpression || !(sortExpression.getParameter() instanceof StreamExpressionValue)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting single 'over' parameter listing fields to unique over but didn't find one\",expression));\n    }\n    \n    TupleStream stream = factory.constructStream(streamExpressions.get(0));\n    StreamComparator comp = factory.constructComparator(((StreamExpressionValue)sortExpression.getParameter()).getValue(), FieldComparator.class);\n    \n    init(stream,nInt,comp);    \n  }\n\n","sourceOld":"  public RankStream(StreamExpression expression, StreamFactory factory) throws IOException {\n    // grab all parameters out\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, TupleStream.class);\n    StreamExpressionNamedParameter nParam = factory.getNamedOperand(expression, \"n\");\n    StreamExpressionNamedParameter sortExpression = factory.getNamedOperand(expression, \"sort\");\n    \n    // validate expression contains only what we want.\n    if(expression.getParameters().size() != streamExpressions.size() + 2){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - unknown operands found\", expression));\n    }\n    \n    if(null == nParam || null == nParam.getParameter() || !(nParam.getParameter() instanceof StreamExpressionValue)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a single 'n' parameter of type positive integer but didn't find one\",expression));\n    }\n    String nStr = ((StreamExpressionValue)nParam.getParameter()).getValue();\n    int nInt = 0;\n    try{\n      nInt = Integer.parseInt(nStr);\n      if(nInt <= 0){\n        throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - topN '%s' must be greater than 0.\",expression, nStr));\n      }\n    }\n    catch(NumberFormatException e){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - topN '%s' is not a valid integer.\",expression, nStr));\n    }    \n    if(1 != streamExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a single stream but found %d\",expression, streamExpressions.size()));\n    }    \n    if(null == sortExpression || !(sortExpression.getParameter() instanceof StreamExpressionValue)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting single 'over' parameter listing fields to unique over but didn't find one\",expression));\n    }\n    \n    TupleStream stream = factory.constructStream(streamExpressions.get(0));\n    StreamComparator comp = factory.constructComparator(((StreamExpressionValue)sortExpression.getParameter()).getValue(), FieldComparator.class);\n    \n    init(stream,nInt,comp);    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f00f1c5fad501b66705121feb623f8cfbb6712f9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0891a6931fc352fc7e61f2752ef9add758d3fb89":["e431b0806b8db369da896b66a74e304a49953c7b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6f4c5d3859373c3a74734e85efa122b17514e3e8":["0891a6931fc352fc7e61f2752ef9add758d3fb89"],"01624b85de12fb02335810bdf325124e59040772":["0891a6931fc352fc7e61f2752ef9add758d3fb89"],"e431b0806b8db369da896b66a74e304a49953c7b":["f00f1c5fad501b66705121feb623f8cfbb6712f9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["01624b85de12fb02335810bdf325124e59040772"]},"commit2Childs":{"f00f1c5fad501b66705121feb623f8cfbb6712f9":["e431b0806b8db369da896b66a74e304a49953c7b"],"0891a6931fc352fc7e61f2752ef9add758d3fb89":["6f4c5d3859373c3a74734e85efa122b17514e3e8","01624b85de12fb02335810bdf325124e59040772"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f00f1c5fad501b66705121feb623f8cfbb6712f9"],"6f4c5d3859373c3a74734e85efa122b17514e3e8":[],"e431b0806b8db369da896b66a74e304a49953c7b":["0891a6931fc352fc7e61f2752ef9add758d3fb89"],"01624b85de12fb02335810bdf325124e59040772":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["6f4c5d3859373c3a74734e85efa122b17514e3e8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}