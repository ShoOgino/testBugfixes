{"path":"src/java/org/apache/lucene/search/ParallelMultiSearcher#[T]_foreach(Function[T],List[Future[T]]).mjava","commits":[{"id":"7325af1b9f607a9e8e30785e8de8ffd1d4c08ddf","date":1257873376,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/ParallelMultiSearcher#[T]_foreach(Function[T],List[Future[T]]).mjava","pathOld":"/dev/null","sourceNew":"  /*\n   * apply the function to each element of the list. This method encapsulates the logic how \n   * to wait for concurrently executed searchables.  \n   */\n  private <T> void foreach(Function<T> func, List<Future<T>> list) throws IOException{\n    for (Future<T> future : list) {\n      try{\n        func.apply(future.get());\n      } catch (ExecutionException e) {\n        if (e.getCause() instanceof IOException)\n          throw (IOException) e.getCause();\n        throw new RuntimeException(e.getCause());\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        // In 3.0 we will change this to throw\n        // InterruptedException instead\n        throw new RuntimeException(e);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aa4b66eb16ead894fa7130904af6ecf34331f050","date":1258198413,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/ParallelMultiSearcher#[T]_foreach(Function[T],List[Future[T]]).mjava","pathOld":"src/java/org/apache/lucene/search/ParallelMultiSearcher#[T]_foreach(Function[T],List[Future[T]]).mjava","sourceNew":"  /*\n   * apply the function to each element of the list. This method encapsulates the logic how \n   * to wait for concurrently executed searchables.  \n   */\n  private <T> void foreach(Function<T> func, List<Future<T>> list) throws IOException{\n    for (Future<T> future : list) {\n      try{\n        func.apply(future.get());\n      } catch (ExecutionException e) {\n        if (e.getCause() instanceof IOException)\n          throw (IOException) e.getCause();\n        throw new RuntimeException(e.getCause());\n      } catch (InterruptedException ie) {\n        throw new ThreadInterruptedException(ie);\n      }\n    }\n  }\n\n","sourceOld":"  /*\n   * apply the function to each element of the list. This method encapsulates the logic how \n   * to wait for concurrently executed searchables.  \n   */\n  private <T> void foreach(Function<T> func, List<Future<T>> list) throws IOException{\n    for (Future<T> future : list) {\n      try{\n        func.apply(future.get());\n      } catch (ExecutionException e) {\n        if (e.getCause() instanceof IOException)\n          throw (IOException) e.getCause();\n        throw new RuntimeException(e.getCause());\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        // In 3.0 we will change this to throw\n        // InterruptedException instead\n        throw new RuntimeException(e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"15663e8ac5d62b8a3eccef533d0384f3b4c139ea","date":1260310472,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/ParallelMultiSearcher#[T]_foreach(Function[T],List[Future[T]]).mjava","pathOld":"src/java/org/apache/lucene/search/ParallelMultiSearcher#[T]_foreach(Function[T],List[Future[T]]).mjava","sourceNew":"  /*\n   * apply the function to each element of the list. This method encapsulates the logic how \n   * to wait for concurrently executed searchables.  \n   */\n  private <T> void foreach(Function<T> func, List<Future<T>> list) throws IOException{\n    for (Future<T> future : list) {\n      try{\n        func.apply(future.get());\n      } catch (ExecutionException e) {\n        final Throwable throwable = e.getCause();\n        if (throwable instanceof IOException)\n          throw (IOException) e.getCause();\n        throw new RuntimeException(throwable);\n      } catch (InterruptedException ie) {\n        throw new ThreadInterruptedException(ie);\n      }\n    }\n  }\n\n","sourceOld":"  /*\n   * apply the function to each element of the list. This method encapsulates the logic how \n   * to wait for concurrently executed searchables.  \n   */\n  private <T> void foreach(Function<T> func, List<Future<T>> list) throws IOException{\n    for (Future<T> future : list) {\n      try{\n        func.apply(future.get());\n      } catch (ExecutionException e) {\n        if (e.getCause() instanceof IOException)\n          throw (IOException) e.getCause();\n        throw new RuntimeException(e.getCause());\n      } catch (InterruptedException ie) {\n        throw new ThreadInterruptedException(ie);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/ParallelMultiSearcher#[T]_foreach(Function[T],List[Future[T]]).mjava","pathOld":"src/java/org/apache/lucene/search/ParallelMultiSearcher#[T]_foreach(Function[T],List[Future[T]]).mjava","sourceNew":"  /*\n   * apply the function to each element of the list. This method encapsulates the logic how \n   * to wait for concurrently executed searchables.  \n   */\n  private <T> void foreach(Function<T> func, List<Future<T>> list) throws IOException{\n    for (Future<T> future : list) {\n      try{\n        func.apply(future.get());\n      } catch (ExecutionException e) {\n        final Throwable throwable = e.getCause();\n        if (throwable instanceof IOException)\n          throw (IOException) e.getCause();\n        throw new RuntimeException(throwable);\n      } catch (InterruptedException ie) {\n        throw new ThreadInterruptedException(ie);\n      }\n    }\n  }\n\n","sourceOld":"  /*\n   * apply the function to each element of the list. This method encapsulates the logic how \n   * to wait for concurrently executed searchables.  \n   */\n  private <T> void foreach(Function<T> func, List<Future<T>> list) throws IOException{\n    for (Future<T> future : list) {\n      try{\n        func.apply(future.get());\n      } catch (ExecutionException e) {\n        final Throwable throwable = e.getCause();\n        if (throwable instanceof IOException)\n          throw (IOException) e.getCause();\n        throw new RuntimeException(throwable);\n      } catch (InterruptedException ie) {\n        throw new ThreadInterruptedException(ie);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"15663e8ac5d62b8a3eccef533d0384f3b4c139ea":["aa4b66eb16ead894fa7130904af6ecf34331f050"],"7325af1b9f607a9e8e30785e8de8ffd1d4c08ddf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"aa4b66eb16ead894fa7130904af6ecf34331f050":["7325af1b9f607a9e8e30785e8de8ffd1d4c08ddf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["15663e8ac5d62b8a3eccef533d0384f3b4c139ea"]},"commit2Childs":{"15663e8ac5d62b8a3eccef533d0384f3b4c139ea":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"7325af1b9f607a9e8e30785e8de8ffd1d4c08ddf":["aa4b66eb16ead894fa7130904af6ecf34331f050"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7325af1b9f607a9e8e30785e8de8ffd1d4c08ddf"],"aa4b66eb16ead894fa7130904af6ecf34331f050":["15663e8ac5d62b8a3eccef533d0384f3b4c139ea"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}