{"path":"lucene/core/src/test/org/apache/lucene/util/bkd/TestBKDRadixSelector#getMaxDataDimension(BKDRadixSelector.PathSlice,int,int,int,byte[],int).mjava","commits":[{"id":"c7f06758793500ca773d0df1037290e6e404fb33","date":1562230223,"type":0,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/bkd/TestBKDRadixSelector#getMaxDataDimension(BKDRadixSelector.PathSlice,int,int,int,byte[],int).mjava","pathOld":"/dev/null","sourceNew":"  private byte[] getMaxDataDimension(BKDRadixSelector.PathSlice p, int bytesPerDimension, int dataDims, int indexDims, byte[] maxDim, int splitDim) throws  IOException {\n    byte[] max = new byte[(dataDims - indexDims) * bytesPerDimension];\n    Arrays.fill(max, (byte) 0);\n    int offset = splitDim * bytesPerDimension;\n    try (PointReader reader = p.writer.getReader(p.start, p.count)) {\n      byte[] value = new byte[(dataDims - indexDims) * bytesPerDimension];\n      while (reader.next()) {\n        PointValue pointValue = reader.pointValue();\n        BytesRef packedValue = pointValue.packedValue();\n        if (Arrays.mismatch(maxDim, 0, bytesPerDimension, packedValue.bytes, packedValue.offset + offset, packedValue.offset + offset + bytesPerDimension) == -1) {\n          System.arraycopy(packedValue.bytes, packedValue.offset + indexDims * bytesPerDimension, value, 0, (dataDims - indexDims) * bytesPerDimension);\n          if (Arrays.compareUnsigned(max, 0, (dataDims - indexDims) * bytesPerDimension, value, 0, (dataDims - indexDims) * bytesPerDimension) < 0) {\n            System.arraycopy(value, 0, max, 0, (dataDims - indexDims) * bytesPerDimension);\n          }\n        }\n      }\n    }\n    return max;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb94bf667d51f9c390c99d97afb36b7caab6b6e9","date":1599548621,"type":5,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/bkd/TestBKDRadixSelector#getMaxDataDimension(BKDConfig,BKDRadixSelector.PathSlice,byte[],int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/bkd/TestBKDRadixSelector#getMaxDataDimension(BKDRadixSelector.PathSlice,int,int,int,byte[],int).mjava","sourceNew":"  private byte[] getMaxDataDimension(BKDConfig config, BKDRadixSelector.PathSlice p, byte[] maxDim, int splitDim) throws  IOException {\n    final int numDataDims = config.numDims - config.numIndexDims;\n    byte[] max = new byte[numDataDims * config.bytesPerDim];\n    Arrays.fill(max, (byte) 0);\n    int offset = splitDim * config.bytesPerDim;\n    try (PointReader reader = p.writer.getReader(p.start, p.count)) {\n      byte[] value = new byte[numDataDims * config.bytesPerDim];\n      while (reader.next()) {\n        PointValue pointValue = reader.pointValue();\n        BytesRef packedValue = pointValue.packedValue();\n        if (Arrays.mismatch(maxDim, 0, config.bytesPerDim, packedValue.bytes, packedValue.offset + offset, packedValue.offset + offset + config.bytesPerDim) == -1) {\n          System.arraycopy(packedValue.bytes, packedValue.offset + config.packedIndexBytesLength, value, 0, numDataDims * config.bytesPerDim);\n          if (Arrays.compareUnsigned(max, 0, numDataDims * config.bytesPerDim, value, 0, numDataDims * config.bytesPerDim) < 0) {\n            System.arraycopy(value, 0, max, 0, numDataDims * config.bytesPerDim);\n          }\n        }\n      }\n    }\n    return max;\n  }\n\n","sourceOld":"  private byte[] getMaxDataDimension(BKDRadixSelector.PathSlice p, int bytesPerDimension, int dataDims, int indexDims, byte[] maxDim, int splitDim) throws  IOException {\n    byte[] max = new byte[(dataDims - indexDims) * bytesPerDimension];\n    Arrays.fill(max, (byte) 0);\n    int offset = splitDim * bytesPerDimension;\n    try (PointReader reader = p.writer.getReader(p.start, p.count)) {\n      byte[] value = new byte[(dataDims - indexDims) * bytesPerDimension];\n      while (reader.next()) {\n        PointValue pointValue = reader.pointValue();\n        BytesRef packedValue = pointValue.packedValue();\n        if (Arrays.mismatch(maxDim, 0, bytesPerDimension, packedValue.bytes, packedValue.offset + offset, packedValue.offset + offset + bytesPerDimension) == -1) {\n          System.arraycopy(packedValue.bytes, packedValue.offset + indexDims * bytesPerDimension, value, 0, (dataDims - indexDims) * bytesPerDimension);\n          if (Arrays.compareUnsigned(max, 0, (dataDims - indexDims) * bytesPerDimension, value, 0, (dataDims - indexDims) * bytesPerDimension) < 0) {\n            System.arraycopy(value, 0, max, 0, (dataDims - indexDims) * bytesPerDimension);\n          }\n        }\n      }\n    }\n    return max;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7f06758793500ca773d0df1037290e6e404fb33":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bb94bf667d51f9c390c99d97afb36b7caab6b6e9":["c7f06758793500ca773d0df1037290e6e404fb33"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bb94bf667d51f9c390c99d97afb36b7caab6b6e9"]},"commit2Childs":{"c7f06758793500ca773d0df1037290e6e404fb33":["bb94bf667d51f9c390c99d97afb36b7caab6b6e9"],"bb94bf667d51f9c390c99d97afb36b7caab6b6e9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c7f06758793500ca773d0df1037290e6e404fb33"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}