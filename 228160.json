{"path":"lucene/join/src/java/org/apache/lucene/search/join/BlockJoinSelector#wrap(NumericDocValues,Bits,Type,BitSet,BitSet).mjava","commits":[{"id":"db447c88c3c3367999a54f10d9a207f3e63db201","date":1435740861,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/BlockJoinSelector#wrap(NumericDocValues,Bits,Type,BitSet,BitSet).mjava","pathOld":"/dev/null","sourceNew":"  public static NumericDocValues wrap(final NumericDocValues values, Bits docsWithValue, Type selection, BitSet parents, BitSet children) {\n    return new NumericDocValues() {\n\n      @Override\n      public long get(int docID) {\n        assert parents.get(docID) : \"this selector may only be used on parent documents\";\n\n        if (docID == 0) {\n          // no children\n          return 0;\n        }\n\n        final int firstChild = parents.prevSetBit(docID - 1) + 1;\n\n        long value = 0;\n        boolean hasValue = false;\n\n        for (int child = children.nextSetBit(firstChild); child < docID; child = children.nextSetBit(child + 1)) {\n          final long childValue = values.get(child);\n          final boolean childHasValue = value != 0 || docsWithValue.get(child);\n\n          if (hasValue == false) {\n            value = childValue;\n            hasValue = childHasValue;\n          } else if (childHasValue) {\n            switch (selection) {\n              case MIN:\n                value = Math.min(value, childValue);\n                break;\n              case MAX:\n                value = Math.max(value, childValue);\n                break;\n              default:\n                throw new AssertionError();\n            }\n          }\n        }\n\n        return value;\n      }\n\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5bbd3d21bce60a52d6d4ecfcdfdca9a94a0aaa0","date":1435743449,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/BlockJoinSelector#wrap(NumericDocValues,Bits,Type,BitSet,BitSet).mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/BlockJoinSelector#wrap(NumericDocValues,Bits,Type,BitSet,BitSet).mjava","sourceNew":"  /** Wraps the provided {@link NumericDocValues} in order to only select\n   *  one value per parent among its {@code children} using the configured\n   *  {@code selection} type. */\n  public static NumericDocValues wrap(final NumericDocValues values, Bits docsWithValue, Type selection, BitSet parents, BitSet children) {\n    return new NumericDocValues() {\n\n      @Override\n      public long get(int docID) {\n        assert parents.get(docID) : \"this selector may only be used on parent documents\";\n\n        if (docID == 0) {\n          // no children\n          return 0;\n        }\n\n        final int firstChild = parents.prevSetBit(docID - 1) + 1;\n\n        long value = 0;\n        boolean hasValue = false;\n\n        for (int child = children.nextSetBit(firstChild); child < docID; child = children.nextSetBit(child + 1)) {\n          final long childValue = values.get(child);\n          final boolean childHasValue = value != 0 || docsWithValue.get(child);\n\n          if (hasValue == false) {\n            value = childValue;\n            hasValue = childHasValue;\n          } else if (childHasValue) {\n            switch (selection) {\n              case MIN:\n                value = Math.min(value, childValue);\n                break;\n              case MAX:\n                value = Math.max(value, childValue);\n                break;\n              default:\n                throw new AssertionError();\n            }\n          }\n        }\n\n        return value;\n      }\n\n    };\n  }\n\n","sourceOld":"  public static NumericDocValues wrap(final NumericDocValues values, Bits docsWithValue, Type selection, BitSet parents, BitSet children) {\n    return new NumericDocValues() {\n\n      @Override\n      public long get(int docID) {\n        assert parents.get(docID) : \"this selector may only be used on parent documents\";\n\n        if (docID == 0) {\n          // no children\n          return 0;\n        }\n\n        final int firstChild = parents.prevSetBit(docID - 1) + 1;\n\n        long value = 0;\n        boolean hasValue = false;\n\n        for (int child = children.nextSetBit(firstChild); child < docID; child = children.nextSetBit(child + 1)) {\n          final long childValue = values.get(child);\n          final boolean childHasValue = value != 0 || docsWithValue.get(child);\n\n          if (hasValue == false) {\n            value = childValue;\n            hasValue = childHasValue;\n          } else if (childHasValue) {\n            switch (selection) {\n              case MIN:\n                value = Math.min(value, childValue);\n                break;\n              case MAX:\n                value = Math.max(value, childValue);\n                break;\n              default:\n                throw new AssertionError();\n            }\n          }\n        }\n\n        return value;\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":4,"author":"Mike McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/BlockJoinSelector#wrap(NumericDocValues,Bits,Type,BitSet,BitSet).mjava","sourceNew":null,"sourceOld":"  /** Wraps the provided {@link NumericDocValues} in order to only select\n   *  one value per parent among its {@code children} using the configured\n   *  {@code selection} type. */\n  public static NumericDocValues wrap(final NumericDocValues values, Bits docsWithValue, Type selection, BitSet parents, BitSet children) {\n    return new NumericDocValues() {\n\n      @Override\n      public long get(int docID) {\n        assert parents.get(docID) : \"this selector may only be used on parent documents\";\n\n        if (docID == 0) {\n          // no children\n          return 0;\n        }\n\n        final int firstChild = parents.prevSetBit(docID - 1) + 1;\n\n        long value = 0;\n        boolean hasValue = false;\n\n        for (int child = children.nextSetBit(firstChild); child < docID; child = children.nextSetBit(child + 1)) {\n          final long childValue = values.get(child);\n          final boolean childHasValue = value != 0 || docsWithValue.get(child);\n\n          if (hasValue == false) {\n            value = childValue;\n            hasValue = childHasValue;\n          } else if (childHasValue) {\n            switch (selection) {\n              case MIN:\n                value = Math.min(value, childValue);\n                break;\n              case MAX:\n                value = Math.max(value, childValue);\n                break;\n              default:\n                throw new AssertionError();\n            }\n          }\n        }\n\n        return value;\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/BlockJoinSelector#wrap(NumericDocValues,Bits,Type,BitSet,BitSet).mjava","sourceNew":null,"sourceOld":"  /** Wraps the provided {@link NumericDocValues} in order to only select\n   *  one value per parent among its {@code children} using the configured\n   *  {@code selection} type. */\n  public static NumericDocValues wrap(final NumericDocValues values, Bits docsWithValue, Type selection, BitSet parents, BitSet children) {\n    return new NumericDocValues() {\n\n      @Override\n      public long get(int docID) {\n        assert parents.get(docID) : \"this selector may only be used on parent documents\";\n\n        if (docID == 0) {\n          // no children\n          return 0;\n        }\n\n        final int firstChild = parents.prevSetBit(docID - 1) + 1;\n\n        long value = 0;\n        boolean hasValue = false;\n\n        for (int child = children.nextSetBit(firstChild); child < docID; child = children.nextSetBit(child + 1)) {\n          final long childValue = values.get(child);\n          final boolean childHasValue = value != 0 || docsWithValue.get(child);\n\n          if (hasValue == false) {\n            value = childValue;\n            hasValue = childHasValue;\n          } else if (childHasValue) {\n            switch (selection) {\n              case MIN:\n                value = Math.min(value, childValue);\n                break;\n              case MAX:\n                value = Math.max(value, childValue);\n                break;\n              default:\n                throw new AssertionError();\n            }\n          }\n        }\n\n        return value;\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/BlockJoinSelector#wrap(NumericDocValues,Bits,Type,BitSet,BitSet).mjava","sourceNew":null,"sourceOld":"  /** Wraps the provided {@link NumericDocValues} in order to only select\n   *  one value per parent among its {@code children} using the configured\n   *  {@code selection} type. */\n  public static NumericDocValues wrap(final NumericDocValues values, Bits docsWithValue, Type selection, BitSet parents, BitSet children) {\n    return new NumericDocValues() {\n\n      @Override\n      public long get(int docID) {\n        assert parents.get(docID) : \"this selector may only be used on parent documents\";\n\n        if (docID == 0) {\n          // no children\n          return 0;\n        }\n\n        final int firstChild = parents.prevSetBit(docID - 1) + 1;\n\n        long value = 0;\n        boolean hasValue = false;\n\n        for (int child = children.nextSetBit(firstChild); child < docID; child = children.nextSetBit(child + 1)) {\n          final long childValue = values.get(child);\n          final boolean childHasValue = value != 0 || docsWithValue.get(child);\n\n          if (hasValue == false) {\n            value = childValue;\n            hasValue = childHasValue;\n          } else if (childHasValue) {\n            switch (selection) {\n              case MIN:\n                value = Math.min(value, childValue);\n                break;\n              case MAX:\n                value = Math.max(value, childValue);\n                break;\n              default:\n                throw new AssertionError();\n            }\n          }\n        }\n\n        return value;\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"db447c88c3c3367999a54f10d9a207f3e63db201":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["a5bbd3d21bce60a52d6d4ecfcdfdca9a94a0aaa0","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["a5bbd3d21bce60a52d6d4ecfcdfdca9a94a0aaa0"],"a5bbd3d21bce60a52d6d4ecfcdfdca9a94a0aaa0":["db447c88c3c3367999a54f10d9a207f3e63db201"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a5bbd3d21bce60a52d6d4ecfcdfdca9a94a0aaa0","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"]},"commit2Childs":{"db447c88c3c3367999a54f10d9a207f3e63db201":["a5bbd3d21bce60a52d6d4ecfcdfdca9a94a0aaa0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["db447c88c3c3367999a54f10d9a207f3e63db201"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"a5bbd3d21bce60a52d6d4ecfcdfdca9a94a0aaa0":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}