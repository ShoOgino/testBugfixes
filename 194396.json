{"path":"solr/solrj/src/test/org/apache/solr/common/util/ContentStreamTest#testURLStreamCSVGZIPExtention().mjava","commits":[{"id":"be58baf5760d4f17a711eb110f79091ab713ae36","date":1539906801,"type":0,"author":"Andrew Lundgren","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/ContentStreamTest#testURLStreamCSVGZIPExtention().mjava","pathOld":"/dev/null","sourceNew":"  public void testURLStreamCSVGZIPExtention() throws IOException {\n    File file = new File(createTempDir().toFile(), \"README.CSV.gz\");\n\n    try (InputStream is = new SolrResourceLoader().openResource(\"solrj/README\");\n         FileOutputStream os = new FileOutputStream(file);\n         GZIPOutputStream zos = new GZIPOutputStream(os)) {\n      IOUtils.copy(is, zos);\n    }\n\n    ContentStreamBase stream = new ContentStreamBase.URLStream(new URL(file.toURI().toASCIIString()));\n    try (InputStream s = stream.getStream();\n         FileInputStream fis = new FileInputStream(file);\n         GZIPInputStream zis = new GZIPInputStream(fis);\n         InputStreamReader isr = new InputStreamReader(zis, StandardCharsets.UTF_8);\n         FileInputStream fis2 = new FileInputStream(file);\n         GZIPInputStream zis2 = new GZIPInputStream(fis2);\n         Reader r = stream.getReader()) {\n      // See the non-GZIP test case for an explanation of header handling.\n      assertEquals(\"text/csv\", stream.getContentType());\n      assertTrue(IOUtils.contentEquals(isr, r));\n      assertTrue(IOUtils.contentEquals(zis2, s));\n      assertEquals(file.length(), stream.getSize().intValue());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8c5cdabe00d4d433e6a831e18f68201284973eef","date":1578510992,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/ContentStreamTest#testURLStreamCSVGZIPExtention().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/util/ContentStreamTest#testURLStreamCSVGZIPExtention().mjava","sourceNew":"  public void testURLStreamCSVGZIPExtention() throws IOException {\n    File file = new File(createTempDir().toFile(), \"README.CSV.gz\");\n\n    try (SolrResourceLoader srl = new SolrResourceLoader(); InputStream is = srl.openResource(\"solrj/README\");\n         FileOutputStream os = new FileOutputStream(file);\n         GZIPOutputStream zos = new GZIPOutputStream(os)) {\n      IOUtils.copy(is, zos);\n    }\n\n    ContentStreamBase stream = new ContentStreamBase.URLStream(new URL(file.toURI().toASCIIString()));\n    try (InputStream s = stream.getStream();\n         FileInputStream fis = new FileInputStream(file);\n         GZIPInputStream zis = new GZIPInputStream(fis);\n         InputStreamReader isr = new InputStreamReader(zis, StandardCharsets.UTF_8);\n         FileInputStream fis2 = new FileInputStream(file);\n         GZIPInputStream zis2 = new GZIPInputStream(fis2);\n         Reader r = stream.getReader()) {\n      // See the non-GZIP test case for an explanation of header handling.\n      assertEquals(\"text/csv\", stream.getContentType());\n      assertTrue(IOUtils.contentEquals(isr, r));\n      assertTrue(IOUtils.contentEquals(zis2, s));\n      assertEquals(file.length(), stream.getSize().intValue());\n    }\n  }\n\n","sourceOld":"  public void testURLStreamCSVGZIPExtention() throws IOException {\n    File file = new File(createTempDir().toFile(), \"README.CSV.gz\");\n\n    try (InputStream is = new SolrResourceLoader().openResource(\"solrj/README\");\n         FileOutputStream os = new FileOutputStream(file);\n         GZIPOutputStream zos = new GZIPOutputStream(os)) {\n      IOUtils.copy(is, zos);\n    }\n\n    ContentStreamBase stream = new ContentStreamBase.URLStream(new URL(file.toURI().toASCIIString()));\n    try (InputStream s = stream.getStream();\n         FileInputStream fis = new FileInputStream(file);\n         GZIPInputStream zis = new GZIPInputStream(fis);\n         InputStreamReader isr = new InputStreamReader(zis, StandardCharsets.UTF_8);\n         FileInputStream fis2 = new FileInputStream(file);\n         GZIPInputStream zis2 = new GZIPInputStream(fis2);\n         Reader r = stream.getReader()) {\n      // See the non-GZIP test case for an explanation of header handling.\n      assertEquals(\"text/csv\", stream.getContentType());\n      assertTrue(IOUtils.contentEquals(isr, r));\n      assertTrue(IOUtils.contentEquals(zis2, s));\n      assertEquals(file.length(), stream.getSize().intValue());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da93834e39ce341a13e42b611d0a83bd3114bba","date":1578567362,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/ContentStreamTest#testURLStreamCSVGZIPExtention().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/util/ContentStreamTest#testURLStreamCSVGZIPExtention().mjava","sourceNew":"  public void testURLStreamCSVGZIPExtention() throws IOException {\n    File file = new File(createTempDir().toFile(), \"README.CSV.gz\");\n\n    try (SolrResourceLoader srl = new SolrResourceLoader(); InputStream is = srl.openResource(\"solrj/README\");\n         FileOutputStream os = new FileOutputStream(file);\n         GZIPOutputStream zos = new GZIPOutputStream(os)) {\n      IOUtils.copy(is, zos);\n    }\n\n    ContentStreamBase stream = new ContentStreamBase.URLStream(new URL(file.toURI().toASCIIString()));\n    try (InputStream s = stream.getStream();\n         FileInputStream fis = new FileInputStream(file);\n         GZIPInputStream zis = new GZIPInputStream(fis);\n         InputStreamReader isr = new InputStreamReader(zis, StandardCharsets.UTF_8);\n         FileInputStream fis2 = new FileInputStream(file);\n         GZIPInputStream zis2 = new GZIPInputStream(fis2);\n         Reader r = stream.getReader()) {\n      // See the non-GZIP test case for an explanation of header handling.\n      assertEquals(\"text/csv\", stream.getContentType());\n      assertTrue(IOUtils.contentEquals(isr, r));\n      assertTrue(IOUtils.contentEquals(zis2, s));\n      assertEquals(file.length(), stream.getSize().intValue());\n    }\n  }\n\n","sourceOld":"  public void testURLStreamCSVGZIPExtention() throws IOException {\n    File file = new File(createTempDir().toFile(), \"README.CSV.gz\");\n\n    try (InputStream is = new SolrResourceLoader().openResource(\"solrj/README\");\n         FileOutputStream os = new FileOutputStream(file);\n         GZIPOutputStream zos = new GZIPOutputStream(os)) {\n      IOUtils.copy(is, zos);\n    }\n\n    ContentStreamBase stream = new ContentStreamBase.URLStream(new URL(file.toURI().toASCIIString()));\n    try (InputStream s = stream.getStream();\n         FileInputStream fis = new FileInputStream(file);\n         GZIPInputStream zis = new GZIPInputStream(fis);\n         InputStreamReader isr = new InputStreamReader(zis, StandardCharsets.UTF_8);\n         FileInputStream fis2 = new FileInputStream(file);\n         GZIPInputStream zis2 = new GZIPInputStream(fis2);\n         Reader r = stream.getReader()) {\n      // See the non-GZIP test case for an explanation of header handling.\n      assertEquals(\"text/csv\", stream.getContentType());\n      assertTrue(IOUtils.contentEquals(isr, r));\n      assertTrue(IOUtils.contentEquals(zis2, s));\n      assertEquals(file.length(), stream.getSize().intValue());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8c5cdabe00d4d433e6a831e18f68201284973eef":["be58baf5760d4f17a711eb110f79091ab713ae36"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1da93834e39ce341a13e42b611d0a83bd3114bba":["be58baf5760d4f17a711eb110f79091ab713ae36","8c5cdabe00d4d433e6a831e18f68201284973eef"],"be58baf5760d4f17a711eb110f79091ab713ae36":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8c5cdabe00d4d433e6a831e18f68201284973eef"]},"commit2Childs":{"8c5cdabe00d4d433e6a831e18f68201284973eef":["1da93834e39ce341a13e42b611d0a83bd3114bba","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["be58baf5760d4f17a711eb110f79091ab713ae36"],"1da93834e39ce341a13e42b611d0a83bd3114bba":[],"be58baf5760d4f17a711eb110f79091ab713ae36":["8c5cdabe00d4d433e6a831e18f68201284973eef","1da93834e39ce341a13e42b611d0a83bd3114bba"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1da93834e39ce341a13e42b611d0a83bd3114bba","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}