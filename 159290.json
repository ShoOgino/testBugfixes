{"path":"src/java/org/apache/solr/handler/component/TermVectorComponent.TVMapper#map(String,int,TermVectorOffsetInfo[],int[]).mjava","commits":[{"id":"3a04bdb295a363a052bdc5a2fcd6e8ce977aa51c","date":1224776958,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/component/TermVectorComponent.TVMapper#map(String,int,TermVectorOffsetInfo[],int[]).mjava","pathOld":"/dev/null","sourceNew":"    public void map(String term, int frequency, TermVectorOffsetInfo[] offsets, int[] positions) {\n      if (map == true && fieldNL != null) {\n        NamedList termInfo = new NamedList();\n        fieldNL.add(term, termInfo);\n        if (termFreq == true) {\n          termInfo.add(\"freq\", frequency);\n        }\n        if (useOffsets == true) {\n          NamedList theOffsets = new NamedList();\n          termInfo.add(\"offsets\", theOffsets);\n          for (int i = 0; i < offsets.length; i++) {\n            TermVectorOffsetInfo offset = offsets[i];\n            theOffsets.add(\"start\", offset.getStartOffset());\n            theOffsets.add(\"end\", offset.getEndOffset());\n          }\n        }\n        if (usePositions == true) {\n          NamedList positionsNL = new NamedList();\n          for (int i = 0; i < positions.length; i++) {\n            positionsNL.add(\"position\", positions[i]);            \n          }\n          termInfo.add(\"positions\", positionsNL);\n        }\n        if (idf == true) {\n          termInfo.add(\"idf\", getIdf(term));\n        }\n        if (tfIdf == true){\n          double tfIdfVal = ((double) frequency) / getIdf(term);\n          termInfo.add(\"tf-idf\", tfIdfVal);\n        }\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["df18b2465217a237531d0d944c22ea4a4316411e"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a2686717a32b40222a4361bd16ae295511cb8ce7","date":1226500515,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/component/TermVectorComponent.TVMapper#map(String,int,TermVectorOffsetInfo[],int[]).mjava","pathOld":"src/java/org/apache/solr/handler/component/TermVectorComponent.TVMapper#map(String,int,TermVectorOffsetInfo[],int[]).mjava","sourceNew":"    public void map(String term, int frequency, TermVectorOffsetInfo[] offsets, int[] positions) {\n      if (map == true && fieldNL != null) {\n        NamedList termInfo = new NamedList();\n        fieldNL.add(term, termInfo);\n        if (termFreq == true) {\n          termInfo.add(\"tf\", frequency);\n        }\n        if (useOffsets == true) {\n          NamedList theOffsets = new NamedList();\n          termInfo.add(\"offsets\", theOffsets);\n          for (int i = 0; i < offsets.length; i++) {\n            TermVectorOffsetInfo offset = offsets[i];\n            theOffsets.add(\"start\", offset.getStartOffset());\n            theOffsets.add(\"end\", offset.getEndOffset());\n          }\n        }\n        if (usePositions == true) {\n          NamedList positionsNL = new NamedList();\n          for (int i = 0; i < positions.length; i++) {\n            positionsNL.add(\"position\", positions[i]);            \n          }\n          termInfo.add(\"positions\", positionsNL);\n        }\n        if (docFreq == true) {\n          termInfo.add(\"df\", getDocFreq(term));\n        }\n        if (tfIdf == true){\n          double tfIdfVal = ((double) frequency) / getDocFreq(term);\n          termInfo.add(\"tf-idf\", tfIdfVal);\n        }\n      }\n    }\n\n","sourceOld":"    public void map(String term, int frequency, TermVectorOffsetInfo[] offsets, int[] positions) {\n      if (map == true && fieldNL != null) {\n        NamedList termInfo = new NamedList();\n        fieldNL.add(term, termInfo);\n        if (termFreq == true) {\n          termInfo.add(\"freq\", frequency);\n        }\n        if (useOffsets == true) {\n          NamedList theOffsets = new NamedList();\n          termInfo.add(\"offsets\", theOffsets);\n          for (int i = 0; i < offsets.length; i++) {\n            TermVectorOffsetInfo offset = offsets[i];\n            theOffsets.add(\"start\", offset.getStartOffset());\n            theOffsets.add(\"end\", offset.getEndOffset());\n          }\n        }\n        if (usePositions == true) {\n          NamedList positionsNL = new NamedList();\n          for (int i = 0; i < positions.length; i++) {\n            positionsNL.add(\"position\", positions[i]);            \n          }\n          termInfo.add(\"positions\", positionsNL);\n        }\n        if (idf == true) {\n          termInfo.add(\"idf\", getIdf(term));\n        }\n        if (tfIdf == true){\n          double tfIdfVal = ((double) frequency) / getIdf(term);\n          termInfo.add(\"tf-idf\", tfIdfVal);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":["df18b2465217a237531d0d944c22ea4a4316411e"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/component/TermVectorComponent.TVMapper#map(String,int,TermVectorOffsetInfo[],int[]).mjava","pathOld":"src/java/org/apache/solr/handler/component/TermVectorComponent.TVMapper#map(String,int,TermVectorOffsetInfo[],int[]).mjava","sourceNew":"    public void map(String term, int frequency, TermVectorOffsetInfo[] offsets, int[] positions) {\n      if (map == true && fieldNL != null) {\n        NamedList termInfo = new NamedList();\n        fieldNL.add(term, termInfo);\n        if (termFreq == true) {\n          termInfo.add(\"tf\", frequency);\n        }\n        if (useOffsets == true) {\n          NamedList theOffsets = new NamedList();\n          termInfo.add(\"offsets\", theOffsets);\n          for (int i = 0; i < offsets.length; i++) {\n            TermVectorOffsetInfo offset = offsets[i];\n            theOffsets.add(\"start\", offset.getStartOffset());\n            theOffsets.add(\"end\", offset.getEndOffset());\n          }\n        }\n        if (usePositions == true) {\n          NamedList positionsNL = new NamedList();\n          for (int i = 0; i < positions.length; i++) {\n            positionsNL.add(\"position\", positions[i]);            \n          }\n          termInfo.add(\"positions\", positionsNL);\n        }\n        if (docFreq == true) {\n          termInfo.add(\"df\", getDocFreq(term));\n        }\n        if (tfIdf == true){\n          double tfIdfVal = ((double) frequency) / getDocFreq(term);\n          termInfo.add(\"tf-idf\", tfIdfVal);\n        }\n      }\n    }\n\n","sourceOld":"    public void map(String term, int frequency, TermVectorOffsetInfo[] offsets, int[] positions) {\n      if (map == true && fieldNL != null) {\n        NamedList termInfo = new NamedList();\n        fieldNL.add(term, termInfo);\n        if (termFreq == true) {\n          termInfo.add(\"tf\", frequency);\n        }\n        if (useOffsets == true) {\n          NamedList theOffsets = new NamedList();\n          termInfo.add(\"offsets\", theOffsets);\n          for (int i = 0; i < offsets.length; i++) {\n            TermVectorOffsetInfo offset = offsets[i];\n            theOffsets.add(\"start\", offset.getStartOffset());\n            theOffsets.add(\"end\", offset.getEndOffset());\n          }\n        }\n        if (usePositions == true) {\n          NamedList positionsNL = new NamedList();\n          for (int i = 0; i < positions.length; i++) {\n            positionsNL.add(\"position\", positions[i]);            \n          }\n          termInfo.add(\"positions\", positionsNL);\n        }\n        if (docFreq == true) {\n          termInfo.add(\"df\", getDocFreq(term));\n        }\n        if (tfIdf == true){\n          double tfIdfVal = ((double) frequency) / getDocFreq(term);\n          termInfo.add(\"tf-idf\", tfIdfVal);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"a2686717a32b40222a4361bd16ae295511cb8ce7":["3a04bdb295a363a052bdc5a2fcd6e8ce977aa51c"],"ad94625fb8d088209f46650c8097196fec67f00c":["a2686717a32b40222a4361bd16ae295511cb8ce7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a04bdb295a363a052bdc5a2fcd6e8ce977aa51c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["3a04bdb295a363a052bdc5a2fcd6e8ce977aa51c"],"a2686717a32b40222a4361bd16ae295511cb8ce7":["ad94625fb8d088209f46650c8097196fec67f00c"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"3a04bdb295a363a052bdc5a2fcd6e8ce977aa51c":["a2686717a32b40222a4361bd16ae295511cb8ce7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}