{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimDistributedQueue#testDistributedQueueBlocking().mjava","commits":[{"id":"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","date":1513252583,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimDistributedQueue#testDistributedQueueBlocking().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testDistributedQueueBlocking() throws Exception {\n    String dqZNode = \"/distqueue/test2\";\n    String testData = \"hello world\";\n\n    DistributedQueue dq = makeDistributedQueue(dqZNode);\n\n    assertNull(dq.peek());\n    Future<String> future = executor.submit(() -> new String(dq.peek(true), UTF8));\n    try {\n      future.get(1000, TimeUnit.MILLISECONDS);\n      fail(\"TimeoutException expected\");\n    } catch (TimeoutException expected) {\n      assertFalse(future.isDone());\n    }\n\n    dq.offer(testData.getBytes(UTF8));\n    assertEquals(testData, future.get(1000, TimeUnit.MILLISECONDS));\n    assertNotNull(dq.poll());\n\n    assertNull(dq.peek(100));\n\n    // Rerun the earlier test make sure updates are still seen, post reconnection.\n    future = executor.submit(() -> new String(dq.peek(true), UTF8));\n    try {\n      future.get(1000, TimeUnit.MILLISECONDS);\n      fail(\"TimeoutException expected\");\n    } catch (TimeoutException expected) {\n      assertFalse(future.isDone());\n    }\n\n    dq.offer(testData.getBytes(UTF8));\n    assertEquals(testData, future.get(1000, TimeUnit.MILLISECONDS));\n    assertNotNull(dq.poll());\n    assertNull(dq.poll());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3d3a2e3e2a116da952974c2a2c61651780f12113","date":1543690505,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimDistributedQueue#testDistributedQueueBlocking().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimDistributedQueue#testDistributedQueueBlocking().mjava","sourceNew":"  @Test\n  public void testDistributedQueueBlocking() throws Exception {\n    String dqZNode = \"/distqueue/test2\";\n    String testData = \"hello world\";\n\n    DistributedQueue dq = makeDistributedQueue(dqZNode);\n\n    assertNull(dq.peek());\n    Future<String> future = executor.submit(() -> new String(dq.peek(true), UTF8));\n    try {\n      future.get(1000, TimeUnit.MILLISECONDS);\n      fail(\"TimeoutException expected\");\n    } catch (TimeoutException expected) {\n      assertFalse(future.isDone());\n    }\n\n    dq.offer(testData.getBytes(UTF8));\n    assertEquals(testData, future.get(1000, TimeUnit.MILLISECONDS));\n    assertNotNull(dq.poll());\n\n    assertNull(dq.peek(100));\n\n    // Rerun the earlier test make sure updates are still seen, post reconnection.\n    future = executor.submit(() -> new String(dq.peek(15000), UTF8));\n    try {\n      future.get(1000, TimeUnit.MILLISECONDS);\n      fail(\"TimeoutException expected\");\n    } catch (TimeoutException expected) {\n      assertFalse(future.isDone());\n    }\n\n    dq.offer(testData.getBytes(UTF8));\n    assertEquals(testData, future.get(1000, TimeUnit.MILLISECONDS));\n    assertNotNull(dq.poll());\n    assertNull(dq.poll());\n  }\n\n","sourceOld":"  @Test\n  public void testDistributedQueueBlocking() throws Exception {\n    String dqZNode = \"/distqueue/test2\";\n    String testData = \"hello world\";\n\n    DistributedQueue dq = makeDistributedQueue(dqZNode);\n\n    assertNull(dq.peek());\n    Future<String> future = executor.submit(() -> new String(dq.peek(true), UTF8));\n    try {\n      future.get(1000, TimeUnit.MILLISECONDS);\n      fail(\"TimeoutException expected\");\n    } catch (TimeoutException expected) {\n      assertFalse(future.isDone());\n    }\n\n    dq.offer(testData.getBytes(UTF8));\n    assertEquals(testData, future.get(1000, TimeUnit.MILLISECONDS));\n    assertNotNull(dq.poll());\n\n    assertNull(dq.peek(100));\n\n    // Rerun the earlier test make sure updates are still seen, post reconnection.\n    future = executor.submit(() -> new String(dq.peek(true), UTF8));\n    try {\n      future.get(1000, TimeUnit.MILLISECONDS);\n      fail(\"TimeoutException expected\");\n    } catch (TimeoutException expected) {\n      assertFalse(future.isDone());\n    }\n\n    dq.offer(testData.getBytes(UTF8));\n    assertEquals(testData, future.get(1000, TimeUnit.MILLISECONDS));\n    assertNotNull(dq.poll());\n    assertNull(dq.poll());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"62179a72dc4babc5bfb628588fe8d3569207915d","date":1543690978,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimDistributedQueue#testDistributedQueueBlocking().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimDistributedQueue#testDistributedQueueBlocking().mjava","sourceNew":"  @Test\n  public void testDistributedQueueBlocking() throws Exception {\n    String dqZNode = \"/distqueue/test2\";\n    String testData = \"hello world\";\n\n    DistributedQueue dq = makeDistributedQueue(dqZNode);\n\n    assertNull(dq.peek());\n    Future<String> future = executor.submit(() -> new String(dq.peek(15000), UTF8));\n    try {\n      future.get(1000, TimeUnit.MILLISECONDS);\n      fail(\"TimeoutException expected\");\n    } catch (TimeoutException expected) {\n      assertFalse(future.isDone());\n    }\n\n    dq.offer(testData.getBytes(UTF8));\n    assertEquals(testData, future.get(1000, TimeUnit.MILLISECONDS));\n    assertNotNull(dq.poll());\n\n    assertNull(dq.peek(100));\n\n    // Rerun the earlier test make sure updates are still seen, post reconnection.\n    future = executor.submit(() -> new String(dq.peek(15000), UTF8));\n    try {\n      future.get(1000, TimeUnit.MILLISECONDS);\n      fail(\"TimeoutException expected\");\n    } catch (TimeoutException expected) {\n      assertFalse(future.isDone());\n    }\n\n    dq.offer(testData.getBytes(UTF8));\n    assertEquals(testData, future.get(1000, TimeUnit.MILLISECONDS));\n    assertNotNull(dq.poll());\n    assertNull(dq.poll());\n  }\n\n","sourceOld":"  @Test\n  public void testDistributedQueueBlocking() throws Exception {\n    String dqZNode = \"/distqueue/test2\";\n    String testData = \"hello world\";\n\n    DistributedQueue dq = makeDistributedQueue(dqZNode);\n\n    assertNull(dq.peek());\n    Future<String> future = executor.submit(() -> new String(dq.peek(true), UTF8));\n    try {\n      future.get(1000, TimeUnit.MILLISECONDS);\n      fail(\"TimeoutException expected\");\n    } catch (TimeoutException expected) {\n      assertFalse(future.isDone());\n    }\n\n    dq.offer(testData.getBytes(UTF8));\n    assertEquals(testData, future.get(1000, TimeUnit.MILLISECONDS));\n    assertNotNull(dq.poll());\n\n    assertNull(dq.peek(100));\n\n    // Rerun the earlier test make sure updates are still seen, post reconnection.\n    future = executor.submit(() -> new String(dq.peek(15000), UTF8));\n    try {\n      future.get(1000, TimeUnit.MILLISECONDS);\n      fail(\"TimeoutException expected\");\n    } catch (TimeoutException expected) {\n      assertFalse(future.isDone());\n    }\n\n    dq.offer(testData.getBytes(UTF8));\n    assertEquals(testData, future.get(1000, TimeUnit.MILLISECONDS));\n    assertNotNull(dq.poll());\n    assertNull(dq.poll());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimDistributedQueue#testDistributedQueueBlocking().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testDistributedQueueBlocking() throws Exception {\n    String dqZNode = \"/distqueue/test2\";\n    String testData = \"hello world\";\n\n    DistributedQueue dq = makeDistributedQueue(dqZNode);\n\n    assertNull(dq.peek());\n    Future<String> future = executor.submit(() -> new String(dq.peek(15000), UTF8));\n    try {\n      future.get(1000, TimeUnit.MILLISECONDS);\n      fail(\"TimeoutException expected\");\n    } catch (TimeoutException expected) {\n      assertFalse(future.isDone());\n    }\n\n    dq.offer(testData.getBytes(UTF8));\n    assertEquals(testData, future.get(1000, TimeUnit.MILLISECONDS));\n    assertNotNull(dq.poll());\n\n    assertNull(dq.peek(100));\n\n    // Rerun the earlier test make sure updates are still seen, post reconnection.\n    future = executor.submit(() -> new String(dq.peek(15000), UTF8));\n    try {\n      future.get(1000, TimeUnit.MILLISECONDS);\n      fail(\"TimeoutException expected\");\n    } catch (TimeoutException expected) {\n      assertFalse(future.isDone());\n    }\n\n    dq.offer(testData.getBytes(UTF8));\n    assertEquals(testData, future.get(1000, TimeUnit.MILLISECONDS));\n    assertNotNull(dq.poll());\n    assertNull(dq.poll());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3d3a2e3e2a116da952974c2a2c61651780f12113":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"3f504512a03d978990cbff30db0522b354e846db":["62179a72dc4babc5bfb628588fe8d3569207915d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"],"62179a72dc4babc5bfb628588fe8d3569207915d":["3d3a2e3e2a116da952974c2a2c61651780f12113"]},"commit2Childs":{"3d3a2e3e2a116da952974c2a2c61651780f12113":["62179a72dc4babc5bfb628588fe8d3569207915d"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["3d3a2e3e2a116da952974c2a2c61651780f12113"],"62179a72dc4babc5bfb628588fe8d3569207915d":["3f504512a03d978990cbff30db0522b354e846db"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}