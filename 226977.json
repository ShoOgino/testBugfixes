{"path":"solr/test-framework/src/java/org/apache/solr/JSONTestUtil#matchObj(String,Object,Object,double).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/JSONTestUtil#matchObj(String,Object,Object,double).mjava","pathOld":"solr/src/test-framework/org/apache/solr/JSONTestUtil#matchObj(String,Object,Object,double).mjava","sourceNew":"  /**\n   * @param path JSON path expression\n   * @param input JSON Structure\n   * @param expected expected JSON Object\n   * @param delta tollerance allowed in comparing float/double values\n   */\n  public static String matchObj(String path, Object input, Object expected, double delta) throws Exception {\n    CollectionTester tester = new CollectionTester(input);\n    boolean reversed = path.startsWith(\"!\");\n    String positivePath = reversed ? path.substring(1) : path;\n    if (!tester.seek(positivePath) ^ reversed) {\n      return \"Path not found: \" + path;\n    }\n    if (expected != null && (!tester.match(expected) ^ reversed)) {\n      return tester.err + \" @ \" + tester.getPath();\n    }\n    return null;\n  }\n\n","sourceOld":"  /**\n   * @param path JSON path expression\n   * @param input JSON Structure\n   * @param expected expected JSON Object\n   * @param delta tollerance allowed in comparing float/double values\n   */\n  public static String matchObj(String path, Object input, Object expected, double delta) throws Exception {\n    CollectionTester tester = new CollectionTester(input);\n    boolean reversed = path.startsWith(\"!\");\n    String positivePath = reversed ? path.substring(1) : path;\n    if (!tester.seek(positivePath) ^ reversed) {\n      return \"Path not found: \" + path;\n    }\n    if (expected != null && (!tester.match(expected) ^ reversed)) {\n      return tester.err + \" @ \" + tester.getPath();\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/JSONTestUtil#matchObj(String,Object,Object,double).mjava","pathOld":"solr/src/test-framework/org/apache/solr/JSONTestUtil#matchObj(String,Object,Object,double).mjava","sourceNew":"  /**\n   * @param path JSON path expression\n   * @param input JSON Structure\n   * @param expected expected JSON Object\n   * @param delta tollerance allowed in comparing float/double values\n   */\n  public static String matchObj(String path, Object input, Object expected, double delta) throws Exception {\n    CollectionTester tester = new CollectionTester(input);\n    boolean reversed = path.startsWith(\"!\");\n    String positivePath = reversed ? path.substring(1) : path;\n    if (!tester.seek(positivePath) ^ reversed) {\n      return \"Path not found: \" + path;\n    }\n    if (expected != null && (!tester.match(expected) ^ reversed)) {\n      return tester.err + \" @ \" + tester.getPath();\n    }\n    return null;\n  }\n\n","sourceOld":"  /**\n   * @param path JSON path expression\n   * @param input JSON Structure\n   * @param expected expected JSON Object\n   * @param delta tollerance allowed in comparing float/double values\n   */\n  public static String matchObj(String path, Object input, Object expected, double delta) throws Exception {\n    CollectionTester tester = new CollectionTester(input);\n    boolean reversed = path.startsWith(\"!\");\n    String positivePath = reversed ? path.substring(1) : path;\n    if (!tester.seek(positivePath) ^ reversed) {\n      return \"Path not found: \" + path;\n    }\n    if (expected != null && (!tester.match(expected) ^ reversed)) {\n      return tester.err + \" @ \" + tester.getPath();\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/JSONTestUtil#matchObj(String,Object,Object,double).mjava","pathOld":"solr/src/test-framework/org/apache/solr/JSONTestUtil#matchObj(String,Object,Object,double).mjava","sourceNew":"  /**\n   * @param path JSON path expression\n   * @param input JSON Structure\n   * @param expected expected JSON Object\n   * @param delta tollerance allowed in comparing float/double values\n   */\n  public static String matchObj(String path, Object input, Object expected, double delta) throws Exception {\n    CollectionTester tester = new CollectionTester(input);\n    boolean reversed = path.startsWith(\"!\");\n    String positivePath = reversed ? path.substring(1) : path;\n    if (!tester.seek(positivePath) ^ reversed) {\n      return \"Path not found: \" + path;\n    }\n    if (expected != null && (!tester.match(expected) ^ reversed)) {\n      return tester.err + \" @ \" + tester.getPath();\n    }\n    return null;\n  }\n\n","sourceOld":"  /**\n   * @param path JSON path expression\n   * @param input JSON Structure\n   * @param expected expected JSON Object\n   * @param delta tollerance allowed in comparing float/double values\n   */\n  public static String matchObj(String path, Object input, Object expected, double delta) throws Exception {\n    CollectionTester tester = new CollectionTester(input);\n    boolean reversed = path.startsWith(\"!\");\n    String positivePath = reversed ? path.substring(1) : path;\n    if (!tester.seek(positivePath) ^ reversed) {\n      return \"Path not found: \" + path;\n    }\n    if (expected != null && (!tester.match(expected) ^ reversed)) {\n      return tester.err + \" @ \" + tester.getPath();\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b572b024e0b33a1176216afd84f90a925baf838","date":1326227649,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/JSONTestUtil#matchObj(String,Object,Object,double).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/JSONTestUtil#matchObj(String,Object,Object,double).mjava","sourceNew":"  /**\n   * @param path JSON path expression\n   * @param input JSON Structure\n   * @param expected expected JSON Object\n   * @param delta tollerance allowed in comparing float/double values\n   */\n  public static String matchObj(String path, Object input, Object expected, double delta) throws Exception {\n    CollectionTester tester = new CollectionTester(input,delta);\n    boolean reversed = path.startsWith(\"!\");\n    String positivePath = reversed ? path.substring(1) : path;\n    if (!tester.seek(positivePath) ^ reversed) {\n      return \"Path not found: \" + path;\n    }\n    if (expected != null && (!tester.match(expected) ^ reversed)) {\n      return tester.err + \" @ \" + tester.getPath();\n    }\n    return null;\n  }\n\n","sourceOld":"  /**\n   * @param path JSON path expression\n   * @param input JSON Structure\n   * @param expected expected JSON Object\n   * @param delta tollerance allowed in comparing float/double values\n   */\n  public static String matchObj(String path, Object input, Object expected, double delta) throws Exception {\n    CollectionTester tester = new CollectionTester(input);\n    boolean reversed = path.startsWith(\"!\");\n    String positivePath = reversed ? path.substring(1) : path;\n    if (!tester.seek(positivePath) ^ reversed) {\n      return \"Path not found: \" + path;\n    }\n    if (expected != null && (!tester.match(expected) ^ reversed)) {\n      return tester.err + \" @ \" + tester.getPath();\n    }\n    return null;\n  }\n\n","bugFix":["7395bdaa5646a7eb2087b1043b713b4bf3294a5c"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/JSONTestUtil#matchObj(String,Object,Object,double).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/JSONTestUtil#matchObj(String,Object,Object,double).mjava","sourceNew":"  /**\n   * @param path JSON path expression\n   * @param input JSON Structure\n   * @param expected expected JSON Object\n   * @param delta tollerance allowed in comparing float/double values\n   */\n  public static String matchObj(String path, Object input, Object expected, double delta) {\n    CollectionTester tester = new CollectionTester(input,delta);\n    boolean reversed = path.startsWith(\"!\");\n    String positivePath = reversed ? path.substring(1) : path;\n    if (!tester.seek(positivePath) ^ reversed) {\n      return \"Path not found: \" + path;\n    }\n    if (expected != null && (!tester.match(expected) ^ reversed)) {\n      return tester.err + \" @ \" + tester.getPath();\n    }\n    return null;\n  }\n\n","sourceOld":"  /**\n   * @param path JSON path expression\n   * @param input JSON Structure\n   * @param expected expected JSON Object\n   * @param delta tollerance allowed in comparing float/double values\n   */\n  public static String matchObj(String path, Object input, Object expected, double delta) throws Exception {\n    CollectionTester tester = new CollectionTester(input,delta);\n    boolean reversed = path.startsWith(\"!\");\n    String positivePath = reversed ? path.substring(1) : path;\n    if (!tester.seek(positivePath) ^ reversed) {\n      return \"Path not found: \" + path;\n    }\n    if (expected != null && (!tester.match(expected) ^ reversed)) {\n      return tester.err + \" @ \" + tester.getPath();\n    }\n    return null;\n  }\n\n","bugFix":["7395bdaa5646a7eb2087b1043b713b4bf3294a5c"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/JSONTestUtil#matchObj(String,Object,Object,double).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/JSONTestUtil#matchObj(String,Object,Object,double).mjava","sourceNew":"  /**\n   * @param path JSON path expression\n   * @param input JSON Structure\n   * @param expected expected JSON Object\n   * @param delta tollerance allowed in comparing float/double values\n   */\n  public static String matchObj(String path, Object input, Object expected, double delta) {\n    CollectionTester tester = new CollectionTester(input,delta);\n    boolean reversed = path.startsWith(\"!\");\n    String positivePath = reversed ? path.substring(1) : path;\n    if (!tester.seek(positivePath) ^ reversed) {\n      return \"Path not found: \" + path;\n    }\n    if (expected != null && (!tester.match(expected) ^ reversed)) {\n      return tester.err + \" @ \" + tester.getPath();\n    }\n    return null;\n  }\n\n","sourceOld":"  /**\n   * @param path JSON path expression\n   * @param input JSON Structure\n   * @param expected expected JSON Object\n   * @param delta tollerance allowed in comparing float/double values\n   */\n  public static String matchObj(String path, Object input, Object expected, double delta) throws Exception {\n    CollectionTester tester = new CollectionTester(input,delta);\n    boolean reversed = path.startsWith(\"!\");\n    String positivePath = reversed ? path.substring(1) : path;\n    if (!tester.seek(positivePath) ^ reversed) {\n      return \"Path not found: \" + path;\n    }\n    if (expected != null && (!tester.match(expected) ^ reversed)) {\n      return tester.err + \" @ \" + tester.getPath();\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["8b572b024e0b33a1176216afd84f90a925baf838","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["8b572b024e0b33a1176216afd84f90a925baf838"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"8b572b024e0b33a1176216afd84f90a925baf838":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["8b572b024e0b33a1176216afd84f90a925baf838"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"8b572b024e0b33a1176216afd84f90a925baf838":["fe33227f6805edab2036cbb80645cc4e2d1fa424","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fe33227f6805edab2036cbb80645cc4e2d1fa424","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}