{"path":"lucene/test-framework/src/java/org/apache/lucene/analysis/TokenStreamToDot#toDot().mjava","commits":[{"id":"0984ad47974c2d5d354519ddb2aa8358973a6271","date":1330868053,"type":0,"author":"Christian Moen","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/analysis/TokenStreamToDot#toDot().mjava","pathOld":"/dev/null","sourceNew":"  public void toDot() throws IOException {\n    in.reset();\n    writeHeader();\n\n    // TODO: is there some way to tell dot that it should\n    // make the \"main path\" a straight line and have the\n    // non-sausage arcs not affect node placement...\n\n    int pos = -1;\n    int lastEndPos = -1;\n    while (in.incrementToken()) {\n      final boolean isFirst = pos == -1;\n      int posInc = posIncAtt.getPositionIncrement();\n      if (isFirst && posInc == 0) {\n        // TODO: hmm are TS's still allowed to do this...?\n        System.err.println(\"WARNING: first posInc was 0; correcting to 1\");\n        posInc = 1;\n      }\n\n      if (posInc > 0) {\n        // New node:\n        pos += posInc;\n        writeNode(pos, Integer.toString(pos));\n      }\n\n      if (posInc > 1) {\n        // Gap!\n        writeArc(lastEndPos, pos, null, \"dotted\");\n      }\n\n      if (isFirst) {\n        writeNode(-1, null);\n        writeArc(-1, pos, null, null);\n      }\n\n      String arcLabel = termAtt.toString();\n      if (offsetAtt != null) {\n        final int startOffset = offsetAtt.startOffset();\n        final int endOffset = offsetAtt.endOffset();\n        //System.out.println(\"start=\" + startOffset + \" end=\" + endOffset + \" len=\" + inputText.length());\n        if (inputText != null) {\n          arcLabel += \"  / \" + inputText.substring(startOffset, endOffset);\n        } else {\n          arcLabel += \" / \" + startOffset + \"-\" + endOffset;\n        }\n      }\n\n      writeArc(pos, pos + posLengthAtt.getPositionLength(), arcLabel, null);\n      lastEndPos = pos + posLengthAtt.getPositionLength();\n    }\n\n    in.end();\n\n    if (lastEndPos != -1) {\n      // TODO: should we output any final text (from end\n      // offsets) on this arc...?\n      writeNode(-2, null);\n      writeArc(lastEndPos, -2, null, null);\n    }\n\n    writeTrailer();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d48c6744d8180e6bedffc4cce26d2488ac372498","date":1330871253,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/analysis/TokenStreamToDot#toDot().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/analysis/TokenStreamToDot#toDot().mjava","sourceNew":"  public void toDot() throws IOException {\n    in.reset();\n    writeHeader();\n\n    // TODO: is there some way to tell dot that it should\n    // make the \"main path\" a straight line and have the\n    // non-sausage arcs not affect node placement...\n\n    int pos = -1;\n    int lastEndPos = -1;\n    while (in.incrementToken()) {\n      final boolean isFirst = pos == -1;\n      int posInc = posIncAtt.getPositionIncrement();\n      if (isFirst && posInc == 0) {\n        // TODO: hmm are TS's still allowed to do this...?\n        System.err.println(\"WARNING: first posInc was 0; correcting to 1\");\n        posInc = 1;\n      }\n\n      if (posInc > 0) {\n        // New node:\n        pos += posInc;\n        writeNode(pos, Integer.toString(pos));\n      }\n\n      if (posInc > 1) {\n        // Gap!\n        writeArc(lastEndPos, pos, null, \"dotted\");\n      }\n\n      if (isFirst) {\n        writeNode(-1, null);\n        writeArc(-1, pos, null, null);\n      }\n\n      String arcLabel = termAtt.toString();\n      if (offsetAtt != null) {\n        final int startOffset = offsetAtt.startOffset();\n        final int endOffset = offsetAtt.endOffset();\n        //System.out.println(\"start=\" + startOffset + \" end=\" + endOffset + \" len=\" + inputText.length());\n        if (inputText != null) {\n          arcLabel += \" / \" + inputText.substring(startOffset, endOffset);\n        } else {\n          arcLabel += \" / \" + startOffset + \"-\" + endOffset;\n        }\n      }\n\n      writeArc(pos, pos + posLengthAtt.getPositionLength(), arcLabel, null);\n      lastEndPos = pos + posLengthAtt.getPositionLength();\n    }\n\n    in.end();\n\n    if (lastEndPos != -1) {\n      // TODO: should we output any final text (from end\n      // offsets) on this arc...?\n      writeNode(-2, null);\n      writeArc(lastEndPos, -2, null, null);\n    }\n\n    writeTrailer();\n  }\n\n","sourceOld":"  public void toDot() throws IOException {\n    in.reset();\n    writeHeader();\n\n    // TODO: is there some way to tell dot that it should\n    // make the \"main path\" a straight line and have the\n    // non-sausage arcs not affect node placement...\n\n    int pos = -1;\n    int lastEndPos = -1;\n    while (in.incrementToken()) {\n      final boolean isFirst = pos == -1;\n      int posInc = posIncAtt.getPositionIncrement();\n      if (isFirst && posInc == 0) {\n        // TODO: hmm are TS's still allowed to do this...?\n        System.err.println(\"WARNING: first posInc was 0; correcting to 1\");\n        posInc = 1;\n      }\n\n      if (posInc > 0) {\n        // New node:\n        pos += posInc;\n        writeNode(pos, Integer.toString(pos));\n      }\n\n      if (posInc > 1) {\n        // Gap!\n        writeArc(lastEndPos, pos, null, \"dotted\");\n      }\n\n      if (isFirst) {\n        writeNode(-1, null);\n        writeArc(-1, pos, null, null);\n      }\n\n      String arcLabel = termAtt.toString();\n      if (offsetAtt != null) {\n        final int startOffset = offsetAtt.startOffset();\n        final int endOffset = offsetAtt.endOffset();\n        //System.out.println(\"start=\" + startOffset + \" end=\" + endOffset + \" len=\" + inputText.length());\n        if (inputText != null) {\n          arcLabel += \"  / \" + inputText.substring(startOffset, endOffset);\n        } else {\n          arcLabel += \" / \" + startOffset + \"-\" + endOffset;\n        }\n      }\n\n      writeArc(pos, pos + posLengthAtt.getPositionLength(), arcLabel, null);\n      lastEndPos = pos + posLengthAtt.getPositionLength();\n    }\n\n    in.end();\n\n    if (lastEndPos != -1) {\n      // TODO: should we output any final text (from end\n      // offsets) on this arc...?\n      writeNode(-2, null);\n      writeArc(lastEndPos, -2, null, null);\n    }\n\n    writeTrailer();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":0,"author":"Ryan McKinley","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/analysis/TokenStreamToDot#toDot().mjava","pathOld":"/dev/null","sourceNew":"  public void toDot() throws IOException {\n    in.reset();\n    writeHeader();\n\n    // TODO: is there some way to tell dot that it should\n    // make the \"main path\" a straight line and have the\n    // non-sausage arcs not affect node placement...\n\n    int pos = -1;\n    int lastEndPos = -1;\n    while (in.incrementToken()) {\n      final boolean isFirst = pos == -1;\n      int posInc = posIncAtt.getPositionIncrement();\n      if (isFirst && posInc == 0) {\n        // TODO: hmm are TS's still allowed to do this...?\n        System.err.println(\"WARNING: first posInc was 0; correcting to 1\");\n        posInc = 1;\n      }\n\n      if (posInc > 0) {\n        // New node:\n        pos += posInc;\n        writeNode(pos, Integer.toString(pos));\n      }\n\n      if (posInc > 1) {\n        // Gap!\n        writeArc(lastEndPos, pos, null, \"dotted\");\n      }\n\n      if (isFirst) {\n        writeNode(-1, null);\n        writeArc(-1, pos, null, null);\n      }\n\n      String arcLabel = termAtt.toString();\n      if (offsetAtt != null) {\n        final int startOffset = offsetAtt.startOffset();\n        final int endOffset = offsetAtt.endOffset();\n        //System.out.println(\"start=\" + startOffset + \" end=\" + endOffset + \" len=\" + inputText.length());\n        if (inputText != null) {\n          arcLabel += \" / \" + inputText.substring(startOffset, endOffset);\n        } else {\n          arcLabel += \" / \" + startOffset + \"-\" + endOffset;\n        }\n      }\n\n      writeArc(pos, pos + posLengthAtt.getPositionLength(), arcLabel, null);\n      lastEndPos = pos + posLengthAtt.getPositionLength();\n    }\n\n    in.end();\n\n    if (lastEndPos != -1) {\n      // TODO: should we output any final text (from end\n      // offsets) on this arc...?\n      writeNode(-2, null);\n      writeArc(lastEndPos, -2, null, null);\n    }\n\n    writeTrailer();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"098528909bb70948871fd7ed865fafb87ed73964","date":1484667487,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/analysis/TokenStreamToDot#toDot().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/analysis/TokenStreamToDot#toDot().mjava","sourceNew":"  public void toDot() throws IOException {\n    in.reset();\n    writeHeader();\n\n    // TODO: is there some way to tell dot that it should\n    // make the \"main path\" a straight line and have the\n    // non-sausage arcs not affect node placement...\n\n    int pos = -1;\n    int lastEndPos = -1;\n    while (in.incrementToken()) {\n      final boolean isFirst = pos == -1;\n      int posInc = posIncAtt.getPositionIncrement();\n      if (isFirst && posInc == 0) {\n        // TODO: hmm are TS's still allowed to do this...?\n        System.err.println(\"WARNING: first posInc was 0; correcting to 1\");\n        posInc = 1;\n      }\n\n      if (posInc > 0) {\n        // New node:\n        pos += posInc;\n        writeNode(pos, Integer.toString(pos));\n      }\n\n      if (posInc > 1) {\n        // Gap!\n        writeArc(lastEndPos, pos, null, \"dotted\");\n      }\n\n      if (isFirst) {\n        writeNode(-1, null);\n        writeArc(-1, pos, null, null);\n      }\n\n      String arcLabel = termAtt.toString();\n      if (offsetAtt != null) {\n        final int startOffset = offsetAtt.startOffset();\n        final int endOffset = offsetAtt.endOffset();\n        //System.out.println(\"start=\" + startOffset + \" end=\" + endOffset + \" len=\" + inputText.length());\n        if (inputText != null) {\n          String fragment = inputText.substring(startOffset, endOffset);\n          if (fragment.equals(termAtt.toString()) == false) {\n            arcLabel += \" / \" + fragment;\n          }\n        } else {\n          arcLabel += \" / \" + startOffset + \"-\" + endOffset;\n        }\n      }\n\n      writeArc(pos, pos + posLengthAtt.getPositionLength(), arcLabel, null);\n      lastEndPos = pos + posLengthAtt.getPositionLength();\n    }\n\n    in.end();\n\n    if (lastEndPos != -1) {\n      // TODO: should we output any final text (from end\n      // offsets) on this arc...?\n      writeNode(-2, null);\n      writeArc(lastEndPos, -2, null, null);\n    }\n\n    writeTrailer();\n  }\n\n","sourceOld":"  public void toDot() throws IOException {\n    in.reset();\n    writeHeader();\n\n    // TODO: is there some way to tell dot that it should\n    // make the \"main path\" a straight line and have the\n    // non-sausage arcs not affect node placement...\n\n    int pos = -1;\n    int lastEndPos = -1;\n    while (in.incrementToken()) {\n      final boolean isFirst = pos == -1;\n      int posInc = posIncAtt.getPositionIncrement();\n      if (isFirst && posInc == 0) {\n        // TODO: hmm are TS's still allowed to do this...?\n        System.err.println(\"WARNING: first posInc was 0; correcting to 1\");\n        posInc = 1;\n      }\n\n      if (posInc > 0) {\n        // New node:\n        pos += posInc;\n        writeNode(pos, Integer.toString(pos));\n      }\n\n      if (posInc > 1) {\n        // Gap!\n        writeArc(lastEndPos, pos, null, \"dotted\");\n      }\n\n      if (isFirst) {\n        writeNode(-1, null);\n        writeArc(-1, pos, null, null);\n      }\n\n      String arcLabel = termAtt.toString();\n      if (offsetAtt != null) {\n        final int startOffset = offsetAtt.startOffset();\n        final int endOffset = offsetAtt.endOffset();\n        //System.out.println(\"start=\" + startOffset + \" end=\" + endOffset + \" len=\" + inputText.length());\n        if (inputText != null) {\n          arcLabel += \" / \" + inputText.substring(startOffset, endOffset);\n        } else {\n          arcLabel += \" / \" + startOffset + \"-\" + endOffset;\n        }\n      }\n\n      writeArc(pos, pos + posLengthAtt.getPositionLength(), arcLabel, null);\n      lastEndPos = pos + posLengthAtt.getPositionLength();\n    }\n\n    in.end();\n\n    if (lastEndPos != -1) {\n      // TODO: should we output any final text (from end\n      // offsets) on this arc...?\n      writeNode(-2, null);\n      writeArc(lastEndPos, -2, null, null);\n    }\n\n    writeTrailer();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"302d34f2c66e8d489ee13078305c330cbf67b226","date":1484754357,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/analysis/TokenStreamToDot#toDot().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/analysis/TokenStreamToDot#toDot().mjava","sourceNew":"  public void toDot() throws IOException {\n    in.reset();\n    writeHeader();\n\n    // TODO: is there some way to tell dot that it should\n    // make the \"main path\" a straight line and have the\n    // non-sausage arcs not affect node placement...\n\n    int pos = -1;\n    int lastEndPos = -1;\n    while (in.incrementToken()) {\n      final boolean isFirst = pos == -1;\n      int posInc = posIncAtt.getPositionIncrement();\n      if (isFirst && posInc == 0) {\n        // TODO: hmm are TS's still allowed to do this...?\n        System.err.println(\"WARNING: first posInc was 0; correcting to 1\");\n        posInc = 1;\n      }\n\n      if (posInc > 0) {\n        // New node:\n        pos += posInc;\n        writeNode(pos, Integer.toString(pos));\n      }\n\n      if (posInc > 1) {\n        // Gap!\n        writeArc(lastEndPos, pos, null, \"dotted\");\n      }\n\n      if (isFirst) {\n        writeNode(-1, null);\n        writeArc(-1, pos, null, null);\n      }\n\n      String arcLabel = termAtt.toString();\n      if (offsetAtt != null) {\n        final int startOffset = offsetAtt.startOffset();\n        final int endOffset = offsetAtt.endOffset();\n        //System.out.println(\"start=\" + startOffset + \" end=\" + endOffset + \" len=\" + inputText.length());\n        if (inputText != null) {\n          String fragment = inputText.substring(startOffset, endOffset);\n          if (fragment.equals(termAtt.toString()) == false) {\n            arcLabel += \" / \" + fragment;\n          }\n        } else {\n          arcLabel += \" / \" + startOffset + \"-\" + endOffset;\n        }\n      }\n\n      writeArc(pos, pos + posLengthAtt.getPositionLength(), arcLabel, null);\n      lastEndPos = pos + posLengthAtt.getPositionLength();\n    }\n\n    in.end();\n\n    if (lastEndPos != -1) {\n      // TODO: should we output any final text (from end\n      // offsets) on this arc...?\n      writeNode(-2, null);\n      writeArc(lastEndPos, -2, null, null);\n    }\n\n    writeTrailer();\n  }\n\n","sourceOld":"  public void toDot() throws IOException {\n    in.reset();\n    writeHeader();\n\n    // TODO: is there some way to tell dot that it should\n    // make the \"main path\" a straight line and have the\n    // non-sausage arcs not affect node placement...\n\n    int pos = -1;\n    int lastEndPos = -1;\n    while (in.incrementToken()) {\n      final boolean isFirst = pos == -1;\n      int posInc = posIncAtt.getPositionIncrement();\n      if (isFirst && posInc == 0) {\n        // TODO: hmm are TS's still allowed to do this...?\n        System.err.println(\"WARNING: first posInc was 0; correcting to 1\");\n        posInc = 1;\n      }\n\n      if (posInc > 0) {\n        // New node:\n        pos += posInc;\n        writeNode(pos, Integer.toString(pos));\n      }\n\n      if (posInc > 1) {\n        // Gap!\n        writeArc(lastEndPos, pos, null, \"dotted\");\n      }\n\n      if (isFirst) {\n        writeNode(-1, null);\n        writeArc(-1, pos, null, null);\n      }\n\n      String arcLabel = termAtt.toString();\n      if (offsetAtt != null) {\n        final int startOffset = offsetAtt.startOffset();\n        final int endOffset = offsetAtt.endOffset();\n        //System.out.println(\"start=\" + startOffset + \" end=\" + endOffset + \" len=\" + inputText.length());\n        if (inputText != null) {\n          arcLabel += \" / \" + inputText.substring(startOffset, endOffset);\n        } else {\n          arcLabel += \" / \" + startOffset + \"-\" + endOffset;\n        }\n      }\n\n      writeArc(pos, pos + posLengthAtt.getPositionLength(), arcLabel, null);\n      lastEndPos = pos + posLengthAtt.getPositionLength();\n    }\n\n    in.end();\n\n    if (lastEndPos != -1) {\n      // TODO: should we output any final text (from end\n      // offsets) on this arc...?\n      writeNode(-2, null);\n      writeArc(lastEndPos, -2, null, null);\n    }\n\n    writeTrailer();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d48c6744d8180e6bedffc4cce26d2488ac372498"],"0984ad47974c2d5d354519ddb2aa8358973a6271":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"098528909bb70948871fd7ed865fafb87ed73964":["d48c6744d8180e6bedffc4cce26d2488ac372498"],"d48c6744d8180e6bedffc4cce26d2488ac372498":["0984ad47974c2d5d354519ddb2aa8358973a6271"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["098528909bb70948871fd7ed865fafb87ed73964"],"302d34f2c66e8d489ee13078305c330cbf67b226":["d48c6744d8180e6bedffc4cce26d2488ac372498","098528909bb70948871fd7ed865fafb87ed73964"]},"commit2Childs":{"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"0984ad47974c2d5d354519ddb2aa8358973a6271":["d48c6744d8180e6bedffc4cce26d2488ac372498"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","0984ad47974c2d5d354519ddb2aa8358973a6271"],"d48c6744d8180e6bedffc4cce26d2488ac372498":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","098528909bb70948871fd7ed865fafb87ed73964","302d34f2c66e8d489ee13078305c330cbf67b226"],"098528909bb70948871fd7ed865fafb87ed73964":["cd5edd1f2b162a5cfa08efd17851a07373a96817","302d34f2c66e8d489ee13078305c330cbf67b226"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"302d34f2c66e8d489ee13078305c330cbf67b226":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","cd5edd1f2b162a5cfa08efd17851a07373a96817","302d34f2c66e8d489ee13078305c330cbf67b226"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}