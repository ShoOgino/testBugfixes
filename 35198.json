{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/sep/SepPostingsWriter#encodeTerm(long[],DataOutput,FieldInfo,BlockTermState,boolean).mjava","commits":[{"id":"1a88d7b0899b7d22dcbd4cf8ca35d9ec9850ab98","date":1377268487,"type":0,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/sep/SepPostingsWriter#encodeTerm(long[],DataOutput,FieldInfo,BlockTermState,boolean).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void encodeTerm(long[] longs, DataOutput out, FieldInfo fieldInfo, BlockTermState _state, boolean absolute) throws IOException {\n    SepTermState state = (SepTermState)_state;\n    if (absolute) {\n      lastSkipFP = 0;\n      lastPayloadFP = 0;\n      lastState = state;\n    }\n    lastState.docIndex.copyFrom(state.docIndex, false);\n    lastState.docIndex.write(out, absolute);\n    if (indexOptions != IndexOptions.DOCS_ONLY) {\n      lastState.freqIndex.copyFrom(state.freqIndex, false);\n      lastState.freqIndex.write(out, absolute);\n      if (indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n        lastState.posIndex.copyFrom(state.posIndex, false);\n        lastState.posIndex.write(out, absolute);\n        if (storePayloads) {\n          if (absolute) {\n            out.writeVLong(state.payloadFP);\n          } else {\n            out.writeVLong(state.payloadFP - lastPayloadFP);\n          }\n          lastPayloadFP = state.payloadFP;\n        }\n      }\n    }\n    if (state.skipFP != -1) {\n      if (absolute) {\n        out.writeVLong(state.skipFP);\n      } else {\n        out.writeVLong(state.skipFP - lastSkipFP);\n      }\n      lastSkipFP = state.skipFP;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2f948dd442d23baa6cbb28daf77c8db78b351329","date":1378742876,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/sep/SepPostingsWriter#encodeTerm(long[],DataOutput,FieldInfo,BlockTermState,boolean).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void encodeTerm(long[] longs, DataOutput out, FieldInfo fieldInfo, BlockTermState _state, boolean absolute) throws IOException {\n    SepTermState state = (SepTermState)_state;\n    if (absolute) {\n      lastSkipFP = 0;\n      lastPayloadFP = 0;\n      lastState = state;\n    }\n    lastState.docIndex.copyFrom(state.docIndex, false);\n    lastState.docIndex.write(out, absolute);\n    if (indexOptions != IndexOptions.DOCS_ONLY) {\n      lastState.freqIndex.copyFrom(state.freqIndex, false);\n      lastState.freqIndex.write(out, absolute);\n      if (indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n        lastState.posIndex.copyFrom(state.posIndex, false);\n        lastState.posIndex.write(out, absolute);\n        if (storePayloads) {\n          if (absolute) {\n            out.writeVLong(state.payloadFP);\n          } else {\n            out.writeVLong(state.payloadFP - lastPayloadFP);\n          }\n          lastPayloadFP = state.payloadFP;\n        }\n      }\n    }\n    if (state.skipFP != -1) {\n      if (absolute) {\n        out.writeVLong(state.skipFP);\n      } else {\n        out.writeVLong(state.skipFP - lastSkipFP);\n      }\n      lastSkipFP = state.skipFP;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fa80a35d7c4b2b1e83082b275e3e8328ab93db52","date":1381766157,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/sep/SepPostingsWriter#encodeTerm(long[],DataOutput,FieldInfo,BlockTermState,boolean).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/sep/SepPostingsWriter#encodeTerm(long[],DataOutput,FieldInfo,BlockTermState,boolean).mjava","sourceNew":"  @Override\n  public void encodeTerm(long[] longs, DataOutput out, FieldInfo fieldInfo, BlockTermState _state, boolean absolute) throws IOException {\n    SepTermState state = (SepTermState)_state;\n    if (absolute) {\n      lastSkipFP = 0;\n      lastPayloadFP = 0;\n      lastState = state;\n    }\n    lastState.docIndex.copyFrom(state.docIndex, false);\n    lastState.docIndex.write(out, absolute);\n    if (indexOptions != IndexOptions.DOCS_ONLY) {\n      lastState.freqIndex.copyFrom(state.freqIndex, false);\n      lastState.freqIndex.write(out, absolute);\n      if (indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n        lastState.posIndex.copyFrom(state.posIndex, false);\n        lastState.posIndex.write(out, absolute);\n        if (writePayloads) {\n          if (absolute) {\n            out.writeVLong(state.payloadFP);\n          } else {\n            out.writeVLong(state.payloadFP - lastPayloadFP);\n          }\n          lastPayloadFP = state.payloadFP;\n        }\n      }\n    }\n    if (state.skipFP != -1) {\n      if (absolute) {\n        out.writeVLong(state.skipFP);\n      } else {\n        out.writeVLong(state.skipFP - lastSkipFP);\n      }\n      lastSkipFP = state.skipFP;\n    }\n  }\n\n","sourceOld":"  @Override\n  public void encodeTerm(long[] longs, DataOutput out, FieldInfo fieldInfo, BlockTermState _state, boolean absolute) throws IOException {\n    SepTermState state = (SepTermState)_state;\n    if (absolute) {\n      lastSkipFP = 0;\n      lastPayloadFP = 0;\n      lastState = state;\n    }\n    lastState.docIndex.copyFrom(state.docIndex, false);\n    lastState.docIndex.write(out, absolute);\n    if (indexOptions != IndexOptions.DOCS_ONLY) {\n      lastState.freqIndex.copyFrom(state.freqIndex, false);\n      lastState.freqIndex.write(out, absolute);\n      if (indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n        lastState.posIndex.copyFrom(state.posIndex, false);\n        lastState.posIndex.write(out, absolute);\n        if (storePayloads) {\n          if (absolute) {\n            out.writeVLong(state.payloadFP);\n          } else {\n            out.writeVLong(state.payloadFP - lastPayloadFP);\n          }\n          lastPayloadFP = state.payloadFP;\n        }\n      }\n    }\n    if (state.skipFP != -1) {\n      if (absolute) {\n        out.writeVLong(state.skipFP);\n      } else {\n        out.writeVLong(state.skipFP - lastSkipFP);\n      }\n      lastSkipFP = state.skipFP;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"91d86ebcdb45ce6a1b2584e2603f76db47523d0a","date":1396466913,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/sep/SepPostingsWriter#encodeTerm(long[],DataOutput,FieldInfo,BlockTermState,boolean).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void encodeTerm(long[] longs, DataOutput out, FieldInfo fieldInfo, BlockTermState _state, boolean absolute) throws IOException {\n    SepTermState state = (SepTermState)_state;\n    if (absolute) {\n      lastSkipFP = 0;\n      lastPayloadFP = 0;\n      lastState = state;\n    }\n    lastState.docIndex.copyFrom(state.docIndex, false);\n    lastState.docIndex.write(out, absolute);\n    if (indexOptions != IndexOptions.DOCS_ONLY) {\n      lastState.freqIndex.copyFrom(state.freqIndex, false);\n      lastState.freqIndex.write(out, absolute);\n      if (indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n        lastState.posIndex.copyFrom(state.posIndex, false);\n        lastState.posIndex.write(out, absolute);\n        if (writePayloads) {\n          if (absolute) {\n            out.writeVLong(state.payloadFP);\n          } else {\n            out.writeVLong(state.payloadFP - lastPayloadFP);\n          }\n          lastPayloadFP = state.payloadFP;\n        }\n      }\n    }\n    if (state.skipFP != -1) {\n      if (absolute) {\n        out.writeVLong(state.skipFP);\n      } else {\n        out.writeVLong(state.skipFP - lastSkipFP);\n      }\n      lastSkipFP = state.skipFP;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":4,"author":"Dawid Weiss","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/sep/SepPostingsWriter#encodeTerm(long[],DataOutput,FieldInfo,BlockTermState,boolean).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void encodeTerm(long[] longs, DataOutput out, FieldInfo fieldInfo, BlockTermState _state, boolean absolute) throws IOException {\n    SepTermState state = (SepTermState)_state;\n    if (absolute) {\n      lastSkipFP = 0;\n      lastPayloadFP = 0;\n      lastState = state;\n    }\n    lastState.docIndex.copyFrom(state.docIndex, false);\n    lastState.docIndex.write(out, absolute);\n    if (indexOptions != IndexOptions.DOCS_ONLY) {\n      lastState.freqIndex.copyFrom(state.freqIndex, false);\n      lastState.freqIndex.write(out, absolute);\n      if (indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n        lastState.posIndex.copyFrom(state.posIndex, false);\n        lastState.posIndex.write(out, absolute);\n        if (writePayloads) {\n          if (absolute) {\n            out.writeVLong(state.payloadFP);\n          } else {\n            out.writeVLong(state.payloadFP - lastPayloadFP);\n          }\n          lastPayloadFP = state.payloadFP;\n        }\n      }\n    }\n    if (state.skipFP != -1) {\n      if (absolute) {\n        out.writeVLong(state.skipFP);\n      } else {\n        out.writeVLong(state.skipFP - lastSkipFP);\n      }\n      lastSkipFP = state.skipFP;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5eb2511ababf862ea11e10761c70ee560cd84510":["fa80a35d7c4b2b1e83082b275e3e8328ab93db52","91d86ebcdb45ce6a1b2584e2603f76db47523d0a"],"1a88d7b0899b7d22dcbd4cf8ca35d9ec9850ab98":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"91d86ebcdb45ce6a1b2584e2603f76db47523d0a":["fa80a35d7c4b2b1e83082b275e3e8328ab93db52"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fa80a35d7c4b2b1e83082b275e3e8328ab93db52":["2f948dd442d23baa6cbb28daf77c8db78b351329"],"2f948dd442d23baa6cbb28daf77c8db78b351329":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1a88d7b0899b7d22dcbd4cf8ca35d9ec9850ab98"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["91d86ebcdb45ce6a1b2584e2603f76db47523d0a"]},"commit2Childs":{"5eb2511ababf862ea11e10761c70ee560cd84510":[],"1a88d7b0899b7d22dcbd4cf8ca35d9ec9850ab98":["2f948dd442d23baa6cbb28daf77c8db78b351329"],"91d86ebcdb45ce6a1b2584e2603f76db47523d0a":["5eb2511ababf862ea11e10761c70ee560cd84510","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1a88d7b0899b7d22dcbd4cf8ca35d9ec9850ab98","2f948dd442d23baa6cbb28daf77c8db78b351329"],"fa80a35d7c4b2b1e83082b275e3e8328ab93db52":["5eb2511ababf862ea11e10761c70ee560cd84510","91d86ebcdb45ce6a1b2584e2603f76db47523d0a"],"2f948dd442d23baa6cbb28daf77c8db78b351329":["fa80a35d7c4b2b1e83082b275e3e8328ab93db52"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}