{"path":"solr/core/src/java/org/apache/solr/uninverting/FieldCacheSanityChecker#checkSubreaders(MapOfSets[Integer,CacheEntry],MapOfSets[ReaderField,Integer]).mjava","commits":[{"id":"a076c3c721f685b7559308fdc2cd72d91bba67e5","date":1464168992,"type":1,"author":"Mike McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/uninverting/FieldCacheSanityChecker#checkSubreaders(MapOfSets[Integer,CacheEntry],MapOfSets[ReaderField,Integer]).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/uninverting/FieldCacheSanityChecker#checkSubreaders(MapOfSets[Integer,CacheEntry],MapOfSets[ReaderField,Integer]).mjava","sourceNew":"  /** \n   * Internal helper method used by check that iterates over \n   * the keys of readerFieldToValIds and generates a Collection \n   * of Insanity instances whenever two (or more) ReaderField instances are \n   * found that have an ancestry relationships.  \n   *\n   * @see InsanityType#SUBREADER\n   */\n  private Collection<Insanity> checkSubreaders( MapOfSets<Integer, CacheEntry>  valIdToItems,\n                                      MapOfSets<ReaderField, Integer> readerFieldToValIds) {\n\n    final List<Insanity> insanity = new ArrayList<>(23);\n\n    Map<ReaderField, Set<ReaderField>> badChildren = new HashMap<>(17);\n    MapOfSets<ReaderField, ReaderField> badKids = new MapOfSets<>(badChildren); // wrapper\n\n    Map<Integer, Set<CacheEntry>> viToItemSets = valIdToItems.getMap();\n    Map<ReaderField, Set<Integer>> rfToValIdSets = readerFieldToValIds.getMap();\n\n    Set<ReaderField> seen = new HashSet<>(17);\n\n    Set<ReaderField> readerFields = rfToValIdSets.keySet();\n    for (final ReaderField rf : readerFields) {\n      \n      if (seen.contains(rf)) continue;\n\n      List<Object> kids = getAllDescendantReaderKeys(rf.readerKey);\n      for (Object kidKey : kids) {\n        ReaderField kid = new ReaderField(kidKey, rf.fieldName);\n        \n        if (badChildren.containsKey(kid)) {\n          // we've already process this kid as RF and found other problems\n          // track those problems as our own\n          badKids.put(rf, kid);\n          badKids.putAll(rf, badChildren.get(kid));\n          badChildren.remove(kid);\n          \n        } else if (rfToValIdSets.containsKey(kid)) {\n          // we have cache entries for the kid\n          badKids.put(rf, kid);\n        }\n        seen.add(kid);\n      }\n      seen.add(rf);\n    }\n\n    // every mapping in badKids represents an Insanity\n    for (final ReaderField parent : badChildren.keySet()) {\n      Set<ReaderField> kids = badChildren.get(parent);\n\n      List<CacheEntry> badEntries = new ArrayList<>(kids.size() * 2);\n\n      // put parent entr(ies) in first\n      {\n        for (final Integer value  : rfToValIdSets.get(parent)) {\n          badEntries.addAll(viToItemSets.get(value));\n        }\n      }\n\n      // now the entries for the descendants\n      for (final ReaderField kid : kids) {\n        for (final Integer value : rfToValIdSets.get(kid)) {\n          badEntries.addAll(viToItemSets.get(value));\n        }\n      }\n\n      CacheEntry[] badness = new CacheEntry[badEntries.size()];\n      badness = badEntries.toArray(badness);\n\n      insanity.add(new Insanity(InsanityType.SUBREADER,\n                                \"Found caches for descendants of \" + \n                                parent.toString(),\n                                badness));\n    }\n\n    return insanity;\n\n  }\n\n","sourceOld":"  /** \n   * Internal helper method used by check that iterates over \n   * the keys of readerFieldToValIds and generates a Collection \n   * of Insanity instances whenever two (or more) ReaderField instances are \n   * found that have an ancestry relationships.  \n   *\n   * @see InsanityType#SUBREADER\n   */\n  private Collection<Insanity> checkSubreaders( MapOfSets<Integer, CacheEntry>  valIdToItems,\n                                      MapOfSets<ReaderField, Integer> readerFieldToValIds) {\n\n    final List<Insanity> insanity = new ArrayList<>(23);\n\n    Map<ReaderField, Set<ReaderField>> badChildren = new HashMap<>(17);\n    MapOfSets<ReaderField, ReaderField> badKids = new MapOfSets<>(badChildren); // wrapper\n\n    Map<Integer, Set<CacheEntry>> viToItemSets = valIdToItems.getMap();\n    Map<ReaderField, Set<Integer>> rfToValIdSets = readerFieldToValIds.getMap();\n\n    Set<ReaderField> seen = new HashSet<>(17);\n\n    Set<ReaderField> readerFields = rfToValIdSets.keySet();\n    for (final ReaderField rf : readerFields) {\n      \n      if (seen.contains(rf)) continue;\n\n      List<Object> kids = getAllDescendantReaderKeys(rf.readerKey);\n      for (Object kidKey : kids) {\n        ReaderField kid = new ReaderField(kidKey, rf.fieldName);\n        \n        if (badChildren.containsKey(kid)) {\n          // we've already process this kid as RF and found other problems\n          // track those problems as our own\n          badKids.put(rf, kid);\n          badKids.putAll(rf, badChildren.get(kid));\n          badChildren.remove(kid);\n          \n        } else if (rfToValIdSets.containsKey(kid)) {\n          // we have cache entries for the kid\n          badKids.put(rf, kid);\n        }\n        seen.add(kid);\n      }\n      seen.add(rf);\n    }\n\n    // every mapping in badKids represents an Insanity\n    for (final ReaderField parent : badChildren.keySet()) {\n      Set<ReaderField> kids = badChildren.get(parent);\n\n      List<CacheEntry> badEntries = new ArrayList<>(kids.size() * 2);\n\n      // put parent entr(ies) in first\n      {\n        for (final Integer value  : rfToValIdSets.get(parent)) {\n          badEntries.addAll(viToItemSets.get(value));\n        }\n      }\n\n      // now the entries for the descendants\n      for (final ReaderField kid : kids) {\n        for (final Integer value : rfToValIdSets.get(kid)) {\n          badEntries.addAll(viToItemSets.get(value));\n        }\n      }\n\n      CacheEntry[] badness = new CacheEntry[badEntries.size()];\n      badness = badEntries.toArray(badness);\n\n      insanity.add(new Insanity(InsanityType.SUBREADER,\n                                \"Found caches for descendants of \" + \n                                parent.toString(),\n                                badness));\n    }\n\n    return insanity;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e121d43b5a10f2df530f406f935102656e9c4e8","date":1464198131,"type":1,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/uninverting/FieldCacheSanityChecker#checkSubreaders(MapOfSets[Integer,CacheEntry],MapOfSets[ReaderField,Integer]).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/uninverting/FieldCacheSanityChecker#checkSubreaders(MapOfSets[Integer,CacheEntry],MapOfSets[ReaderField,Integer]).mjava","sourceNew":"  /** \n   * Internal helper method used by check that iterates over \n   * the keys of readerFieldToValIds and generates a Collection \n   * of Insanity instances whenever two (or more) ReaderField instances are \n   * found that have an ancestry relationships.  \n   *\n   * @see InsanityType#SUBREADER\n   */\n  private Collection<Insanity> checkSubreaders( MapOfSets<Integer, CacheEntry>  valIdToItems,\n                                      MapOfSets<ReaderField, Integer> readerFieldToValIds) {\n\n    final List<Insanity> insanity = new ArrayList<>(23);\n\n    Map<ReaderField, Set<ReaderField>> badChildren = new HashMap<>(17);\n    MapOfSets<ReaderField, ReaderField> badKids = new MapOfSets<>(badChildren); // wrapper\n\n    Map<Integer, Set<CacheEntry>> viToItemSets = valIdToItems.getMap();\n    Map<ReaderField, Set<Integer>> rfToValIdSets = readerFieldToValIds.getMap();\n\n    Set<ReaderField> seen = new HashSet<>(17);\n\n    Set<ReaderField> readerFields = rfToValIdSets.keySet();\n    for (final ReaderField rf : readerFields) {\n      \n      if (seen.contains(rf)) continue;\n\n      List<Object> kids = getAllDescendantReaderKeys(rf.readerKey);\n      for (Object kidKey : kids) {\n        ReaderField kid = new ReaderField(kidKey, rf.fieldName);\n        \n        if (badChildren.containsKey(kid)) {\n          // we've already process this kid as RF and found other problems\n          // track those problems as our own\n          badKids.put(rf, kid);\n          badKids.putAll(rf, badChildren.get(kid));\n          badChildren.remove(kid);\n          \n        } else if (rfToValIdSets.containsKey(kid)) {\n          // we have cache entries for the kid\n          badKids.put(rf, kid);\n        }\n        seen.add(kid);\n      }\n      seen.add(rf);\n    }\n\n    // every mapping in badKids represents an Insanity\n    for (final ReaderField parent : badChildren.keySet()) {\n      Set<ReaderField> kids = badChildren.get(parent);\n\n      List<CacheEntry> badEntries = new ArrayList<>(kids.size() * 2);\n\n      // put parent entr(ies) in first\n      {\n        for (final Integer value  : rfToValIdSets.get(parent)) {\n          badEntries.addAll(viToItemSets.get(value));\n        }\n      }\n\n      // now the entries for the descendants\n      for (final ReaderField kid : kids) {\n        for (final Integer value : rfToValIdSets.get(kid)) {\n          badEntries.addAll(viToItemSets.get(value));\n        }\n      }\n\n      CacheEntry[] badness = new CacheEntry[badEntries.size()];\n      badness = badEntries.toArray(badness);\n\n      insanity.add(new Insanity(InsanityType.SUBREADER,\n                                \"Found caches for descendants of \" + \n                                parent.toString(),\n                                badness));\n    }\n\n    return insanity;\n\n  }\n\n","sourceOld":"  /** \n   * Internal helper method used by check that iterates over \n   * the keys of readerFieldToValIds and generates a Collection \n   * of Insanity instances whenever two (or more) ReaderField instances are \n   * found that have an ancestry relationships.  \n   *\n   * @see InsanityType#SUBREADER\n   */\n  private Collection<Insanity> checkSubreaders( MapOfSets<Integer, CacheEntry>  valIdToItems,\n                                      MapOfSets<ReaderField, Integer> readerFieldToValIds) {\n\n    final List<Insanity> insanity = new ArrayList<>(23);\n\n    Map<ReaderField, Set<ReaderField>> badChildren = new HashMap<>(17);\n    MapOfSets<ReaderField, ReaderField> badKids = new MapOfSets<>(badChildren); // wrapper\n\n    Map<Integer, Set<CacheEntry>> viToItemSets = valIdToItems.getMap();\n    Map<ReaderField, Set<Integer>> rfToValIdSets = readerFieldToValIds.getMap();\n\n    Set<ReaderField> seen = new HashSet<>(17);\n\n    Set<ReaderField> readerFields = rfToValIdSets.keySet();\n    for (final ReaderField rf : readerFields) {\n      \n      if (seen.contains(rf)) continue;\n\n      List<Object> kids = getAllDescendantReaderKeys(rf.readerKey);\n      for (Object kidKey : kids) {\n        ReaderField kid = new ReaderField(kidKey, rf.fieldName);\n        \n        if (badChildren.containsKey(kid)) {\n          // we've already process this kid as RF and found other problems\n          // track those problems as our own\n          badKids.put(rf, kid);\n          badKids.putAll(rf, badChildren.get(kid));\n          badChildren.remove(kid);\n          \n        } else if (rfToValIdSets.containsKey(kid)) {\n          // we have cache entries for the kid\n          badKids.put(rf, kid);\n        }\n        seen.add(kid);\n      }\n      seen.add(rf);\n    }\n\n    // every mapping in badKids represents an Insanity\n    for (final ReaderField parent : badChildren.keySet()) {\n      Set<ReaderField> kids = badChildren.get(parent);\n\n      List<CacheEntry> badEntries = new ArrayList<>(kids.size() * 2);\n\n      // put parent entr(ies) in first\n      {\n        for (final Integer value  : rfToValIdSets.get(parent)) {\n          badEntries.addAll(viToItemSets.get(value));\n        }\n      }\n\n      // now the entries for the descendants\n      for (final ReaderField kid : kids) {\n        for (final Integer value : rfToValIdSets.get(kid)) {\n          badEntries.addAll(viToItemSets.get(value));\n        }\n      }\n\n      CacheEntry[] badness = new CacheEntry[badEntries.size()];\n      badness = badEntries.toArray(badness);\n\n      insanity.add(new Insanity(InsanityType.SUBREADER,\n                                \"Found caches for descendants of \" + \n                                parent.toString(),\n                                badness));\n    }\n\n    return insanity;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83870855d82aba6819217abeff5a40779dbb28b4","date":1464291012,"type":1,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/uninverting/FieldCacheSanityChecker#checkSubreaders(MapOfSets[Integer,CacheEntry],MapOfSets[ReaderField,Integer]).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/uninverting/FieldCacheSanityChecker#checkSubreaders(MapOfSets[Integer,CacheEntry],MapOfSets[ReaderField,Integer]).mjava","sourceNew":"  /** \n   * Internal helper method used by check that iterates over \n   * the keys of readerFieldToValIds and generates a Collection \n   * of Insanity instances whenever two (or more) ReaderField instances are \n   * found that have an ancestry relationships.  \n   *\n   * @see InsanityType#SUBREADER\n   */\n  private Collection<Insanity> checkSubreaders( MapOfSets<Integer, CacheEntry>  valIdToItems,\n                                      MapOfSets<ReaderField, Integer> readerFieldToValIds) {\n\n    final List<Insanity> insanity = new ArrayList<>(23);\n\n    Map<ReaderField, Set<ReaderField>> badChildren = new HashMap<>(17);\n    MapOfSets<ReaderField, ReaderField> badKids = new MapOfSets<>(badChildren); // wrapper\n\n    Map<Integer, Set<CacheEntry>> viToItemSets = valIdToItems.getMap();\n    Map<ReaderField, Set<Integer>> rfToValIdSets = readerFieldToValIds.getMap();\n\n    Set<ReaderField> seen = new HashSet<>(17);\n\n    Set<ReaderField> readerFields = rfToValIdSets.keySet();\n    for (final ReaderField rf : readerFields) {\n      \n      if (seen.contains(rf)) continue;\n\n      List<Object> kids = getAllDescendantReaderKeys(rf.readerKey);\n      for (Object kidKey : kids) {\n        ReaderField kid = new ReaderField(kidKey, rf.fieldName);\n        \n        if (badChildren.containsKey(kid)) {\n          // we've already process this kid as RF and found other problems\n          // track those problems as our own\n          badKids.put(rf, kid);\n          badKids.putAll(rf, badChildren.get(kid));\n          badChildren.remove(kid);\n          \n        } else if (rfToValIdSets.containsKey(kid)) {\n          // we have cache entries for the kid\n          badKids.put(rf, kid);\n        }\n        seen.add(kid);\n      }\n      seen.add(rf);\n    }\n\n    // every mapping in badKids represents an Insanity\n    for (final ReaderField parent : badChildren.keySet()) {\n      Set<ReaderField> kids = badChildren.get(parent);\n\n      List<CacheEntry> badEntries = new ArrayList<>(kids.size() * 2);\n\n      // put parent entr(ies) in first\n      {\n        for (final Integer value  : rfToValIdSets.get(parent)) {\n          badEntries.addAll(viToItemSets.get(value));\n        }\n      }\n\n      // now the entries for the descendants\n      for (final ReaderField kid : kids) {\n        for (final Integer value : rfToValIdSets.get(kid)) {\n          badEntries.addAll(viToItemSets.get(value));\n        }\n      }\n\n      CacheEntry[] badness = new CacheEntry[badEntries.size()];\n      badness = badEntries.toArray(badness);\n\n      insanity.add(new Insanity(InsanityType.SUBREADER,\n                                \"Found caches for descendants of \" + \n                                parent.toString(),\n                                badness));\n    }\n\n    return insanity;\n\n  }\n\n","sourceOld":"  /** \n   * Internal helper method used by check that iterates over \n   * the keys of readerFieldToValIds and generates a Collection \n   * of Insanity instances whenever two (or more) ReaderField instances are \n   * found that have an ancestry relationships.  \n   *\n   * @see InsanityType#SUBREADER\n   */\n  private Collection<Insanity> checkSubreaders( MapOfSets<Integer, CacheEntry>  valIdToItems,\n                                      MapOfSets<ReaderField, Integer> readerFieldToValIds) {\n\n    final List<Insanity> insanity = new ArrayList<>(23);\n\n    Map<ReaderField, Set<ReaderField>> badChildren = new HashMap<>(17);\n    MapOfSets<ReaderField, ReaderField> badKids = new MapOfSets<>(badChildren); // wrapper\n\n    Map<Integer, Set<CacheEntry>> viToItemSets = valIdToItems.getMap();\n    Map<ReaderField, Set<Integer>> rfToValIdSets = readerFieldToValIds.getMap();\n\n    Set<ReaderField> seen = new HashSet<>(17);\n\n    Set<ReaderField> readerFields = rfToValIdSets.keySet();\n    for (final ReaderField rf : readerFields) {\n      \n      if (seen.contains(rf)) continue;\n\n      List<Object> kids = getAllDescendantReaderKeys(rf.readerKey);\n      for (Object kidKey : kids) {\n        ReaderField kid = new ReaderField(kidKey, rf.fieldName);\n        \n        if (badChildren.containsKey(kid)) {\n          // we've already process this kid as RF and found other problems\n          // track those problems as our own\n          badKids.put(rf, kid);\n          badKids.putAll(rf, badChildren.get(kid));\n          badChildren.remove(kid);\n          \n        } else if (rfToValIdSets.containsKey(kid)) {\n          // we have cache entries for the kid\n          badKids.put(rf, kid);\n        }\n        seen.add(kid);\n      }\n      seen.add(rf);\n    }\n\n    // every mapping in badKids represents an Insanity\n    for (final ReaderField parent : badChildren.keySet()) {\n      Set<ReaderField> kids = badChildren.get(parent);\n\n      List<CacheEntry> badEntries = new ArrayList<>(kids.size() * 2);\n\n      // put parent entr(ies) in first\n      {\n        for (final Integer value  : rfToValIdSets.get(parent)) {\n          badEntries.addAll(viToItemSets.get(value));\n        }\n      }\n\n      // now the entries for the descendants\n      for (final ReaderField kid : kids) {\n        for (final Integer value : rfToValIdSets.get(kid)) {\n          badEntries.addAll(viToItemSets.get(value));\n        }\n      }\n\n      CacheEntry[] badness = new CacheEntry[badEntries.size()];\n      badness = badEntries.toArray(badness);\n\n      insanity.add(new Insanity(InsanityType.SUBREADER,\n                                \"Found caches for descendants of \" + \n                                parent.toString(),\n                                badness));\n    }\n\n    return insanity;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":1,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/uninverting/FieldCacheSanityChecker#checkSubreaders(MapOfSets[Integer,CacheEntry],MapOfSets[ReaderField,Integer]).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/uninverting/FieldCacheSanityChecker#checkSubreaders(MapOfSets[Integer,CacheEntry],MapOfSets[ReaderField,Integer]).mjava","sourceNew":"  /** \n   * Internal helper method used by check that iterates over \n   * the keys of readerFieldToValIds and generates a Collection \n   * of Insanity instances whenever two (or more) ReaderField instances are \n   * found that have an ancestry relationships.  \n   *\n   * @see InsanityType#SUBREADER\n   */\n  private Collection<Insanity> checkSubreaders( MapOfSets<Integer, CacheEntry>  valIdToItems,\n                                      MapOfSets<ReaderField, Integer> readerFieldToValIds) {\n\n    final List<Insanity> insanity = new ArrayList<>(23);\n\n    Map<ReaderField, Set<ReaderField>> badChildren = new HashMap<>(17);\n    MapOfSets<ReaderField, ReaderField> badKids = new MapOfSets<>(badChildren); // wrapper\n\n    Map<Integer, Set<CacheEntry>> viToItemSets = valIdToItems.getMap();\n    Map<ReaderField, Set<Integer>> rfToValIdSets = readerFieldToValIds.getMap();\n\n    Set<ReaderField> seen = new HashSet<>(17);\n\n    Set<ReaderField> readerFields = rfToValIdSets.keySet();\n    for (final ReaderField rf : readerFields) {\n      \n      if (seen.contains(rf)) continue;\n\n      List<Object> kids = getAllDescendantReaderKeys(rf.readerKey);\n      for (Object kidKey : kids) {\n        ReaderField kid = new ReaderField(kidKey, rf.fieldName);\n        \n        if (badChildren.containsKey(kid)) {\n          // we've already process this kid as RF and found other problems\n          // track those problems as our own\n          badKids.put(rf, kid);\n          badKids.putAll(rf, badChildren.get(kid));\n          badChildren.remove(kid);\n          \n        } else if (rfToValIdSets.containsKey(kid)) {\n          // we have cache entries for the kid\n          badKids.put(rf, kid);\n        }\n        seen.add(kid);\n      }\n      seen.add(rf);\n    }\n\n    // every mapping in badKids represents an Insanity\n    for (final ReaderField parent : badChildren.keySet()) {\n      Set<ReaderField> kids = badChildren.get(parent);\n\n      List<CacheEntry> badEntries = new ArrayList<>(kids.size() * 2);\n\n      // put parent entr(ies) in first\n      {\n        for (final Integer value  : rfToValIdSets.get(parent)) {\n          badEntries.addAll(viToItemSets.get(value));\n        }\n      }\n\n      // now the entries for the descendants\n      for (final ReaderField kid : kids) {\n        for (final Integer value : rfToValIdSets.get(kid)) {\n          badEntries.addAll(viToItemSets.get(value));\n        }\n      }\n\n      CacheEntry[] badness = new CacheEntry[badEntries.size()];\n      badness = badEntries.toArray(badness);\n\n      insanity.add(new Insanity(InsanityType.SUBREADER,\n                                \"Found caches for descendants of \" + \n                                parent.toString(),\n                                badness));\n    }\n\n    return insanity;\n\n  }\n\n","sourceOld":"  /** \n   * Internal helper method used by check that iterates over \n   * the keys of readerFieldToValIds and generates a Collection \n   * of Insanity instances whenever two (or more) ReaderField instances are \n   * found that have an ancestry relationships.  \n   *\n   * @see InsanityType#SUBREADER\n   */\n  private Collection<Insanity> checkSubreaders( MapOfSets<Integer, CacheEntry>  valIdToItems,\n                                      MapOfSets<ReaderField, Integer> readerFieldToValIds) {\n\n    final List<Insanity> insanity = new ArrayList<>(23);\n\n    Map<ReaderField, Set<ReaderField>> badChildren = new HashMap<>(17);\n    MapOfSets<ReaderField, ReaderField> badKids = new MapOfSets<>(badChildren); // wrapper\n\n    Map<Integer, Set<CacheEntry>> viToItemSets = valIdToItems.getMap();\n    Map<ReaderField, Set<Integer>> rfToValIdSets = readerFieldToValIds.getMap();\n\n    Set<ReaderField> seen = new HashSet<>(17);\n\n    Set<ReaderField> readerFields = rfToValIdSets.keySet();\n    for (final ReaderField rf : readerFields) {\n      \n      if (seen.contains(rf)) continue;\n\n      List<Object> kids = getAllDescendantReaderKeys(rf.readerKey);\n      for (Object kidKey : kids) {\n        ReaderField kid = new ReaderField(kidKey, rf.fieldName);\n        \n        if (badChildren.containsKey(kid)) {\n          // we've already process this kid as RF and found other problems\n          // track those problems as our own\n          badKids.put(rf, kid);\n          badKids.putAll(rf, badChildren.get(kid));\n          badChildren.remove(kid);\n          \n        } else if (rfToValIdSets.containsKey(kid)) {\n          // we have cache entries for the kid\n          badKids.put(rf, kid);\n        }\n        seen.add(kid);\n      }\n      seen.add(rf);\n    }\n\n    // every mapping in badKids represents an Insanity\n    for (final ReaderField parent : badChildren.keySet()) {\n      Set<ReaderField> kids = badChildren.get(parent);\n\n      List<CacheEntry> badEntries = new ArrayList<>(kids.size() * 2);\n\n      // put parent entr(ies) in first\n      {\n        for (final Integer value  : rfToValIdSets.get(parent)) {\n          badEntries.addAll(viToItemSets.get(value));\n        }\n      }\n\n      // now the entries for the descendants\n      for (final ReaderField kid : kids) {\n        for (final Integer value : rfToValIdSets.get(kid)) {\n          badEntries.addAll(viToItemSets.get(value));\n        }\n      }\n\n      CacheEntry[] badness = new CacheEntry[badEntries.size()];\n      badness = badEntries.toArray(badness);\n\n      insanity.add(new Insanity(InsanityType.SUBREADER,\n                                \"Found caches for descendants of \" + \n                                parent.toString(),\n                                badness));\n    }\n\n    return insanity;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d211216c83f01894810543d1c107160a9ae3650b","date":1488289605,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/uninverting/FieldCacheSanityChecker#checkSubreaders(MapOfSets[Integer,CacheEntry],MapOfSets[ReaderField,Integer]).mjava","sourceNew":null,"sourceOld":"  /** \n   * Internal helper method used by check that iterates over \n   * the keys of readerFieldToValIds and generates a Collection \n   * of Insanity instances whenever two (or more) ReaderField instances are \n   * found that have an ancestry relationships.  \n   *\n   * @see InsanityType#SUBREADER\n   */\n  private Collection<Insanity> checkSubreaders( MapOfSets<Integer, CacheEntry>  valIdToItems,\n                                      MapOfSets<ReaderField, Integer> readerFieldToValIds) {\n\n    final List<Insanity> insanity = new ArrayList<>(23);\n\n    Map<ReaderField, Set<ReaderField>> badChildren = new HashMap<>(17);\n    MapOfSets<ReaderField, ReaderField> badKids = new MapOfSets<>(badChildren); // wrapper\n\n    Map<Integer, Set<CacheEntry>> viToItemSets = valIdToItems.getMap();\n    Map<ReaderField, Set<Integer>> rfToValIdSets = readerFieldToValIds.getMap();\n\n    Set<ReaderField> seen = new HashSet<>(17);\n\n    Set<ReaderField> readerFields = rfToValIdSets.keySet();\n    for (final ReaderField rf : readerFields) {\n      \n      if (seen.contains(rf)) continue;\n\n      List<Object> kids = getAllDescendantReaderKeys(rf.readerKey);\n      for (Object kidKey : kids) {\n        ReaderField kid = new ReaderField(kidKey, rf.fieldName);\n        \n        if (badChildren.containsKey(kid)) {\n          // we've already process this kid as RF and found other problems\n          // track those problems as our own\n          badKids.put(rf, kid);\n          badKids.putAll(rf, badChildren.get(kid));\n          badChildren.remove(kid);\n          \n        } else if (rfToValIdSets.containsKey(kid)) {\n          // we have cache entries for the kid\n          badKids.put(rf, kid);\n        }\n        seen.add(kid);\n      }\n      seen.add(rf);\n    }\n\n    // every mapping in badKids represents an Insanity\n    for (final ReaderField parent : badChildren.keySet()) {\n      Set<ReaderField> kids = badChildren.get(parent);\n\n      List<CacheEntry> badEntries = new ArrayList<>(kids.size() * 2);\n\n      // put parent entr(ies) in first\n      {\n        for (final Integer value  : rfToValIdSets.get(parent)) {\n          badEntries.addAll(viToItemSets.get(value));\n        }\n      }\n\n      // now the entries for the descendants\n      for (final ReaderField kid : kids) {\n        for (final Integer value : rfToValIdSets.get(kid)) {\n          badEntries.addAll(viToItemSets.get(value));\n        }\n      }\n\n      CacheEntry[] badness = new CacheEntry[badEntries.size()];\n      badness = badEntries.toArray(badness);\n\n      insanity.add(new Insanity(InsanityType.SUBREADER,\n                                \"Found caches for descendants of \" + \n                                parent.toString(),\n                                badness));\n    }\n\n    return insanity;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a076c3c721f685b7559308fdc2cd72d91bba67e5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0e121d43b5a10f2df530f406f935102656e9c4e8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a076c3c721f685b7559308fdc2cd72d91bba67e5"],"d211216c83f01894810543d1c107160a9ae3650b":["0e121d43b5a10f2df530f406f935102656e9c4e8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"83870855d82aba6819217abeff5a40779dbb28b4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0e121d43b5a10f2df530f406f935102656e9c4e8"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0e121d43b5a10f2df530f406f935102656e9c4e8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d211216c83f01894810543d1c107160a9ae3650b"]},"commit2Childs":{"a076c3c721f685b7559308fdc2cd72d91bba67e5":["0e121d43b5a10f2df530f406f935102656e9c4e8"],"0e121d43b5a10f2df530f406f935102656e9c4e8":["d211216c83f01894810543d1c107160a9ae3650b","83870855d82aba6819217abeff5a40779dbb28b4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a076c3c721f685b7559308fdc2cd72d91bba67e5","0e121d43b5a10f2df530f406f935102656e9c4e8","83870855d82aba6819217abeff5a40779dbb28b4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"d211216c83f01894810543d1c107160a9ae3650b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"83870855d82aba6819217abeff5a40779dbb28b4":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["83870855d82aba6819217abeff5a40779dbb28b4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}