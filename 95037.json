{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/temp/TempTermOutputs#add(TempMetaData,TempMetaData).mjava","commits":[{"id":"e6904bcc97d8afa27bd72ee29ac01e525e327ad4","date":1377958787,"type":1,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/temp/TempTermOutputs#add(TempMetaData,TempMetaData).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempTermOutputs#add(TempMetaData,TempMetaData).mjava","sourceNew":"  // nocommit: we might refactor out an 'addSelf' later, \n  // which improves 5~7% for fuzzy queries\n  @Override\n  public TempMetaData add(TempMetaData t1, TempMetaData t2) {\n    if (DEBUG) System.out.print(\"add(\"+t1+\", \"+t2+\") = \");\n    if (t1 == NO_OUTPUT) {\n      if (DEBUG) System.out.println(\"ret:\"+t2);\n      return t2;\n    } else if (t2 == NO_OUTPUT) {\n      if (DEBUG) System.out.println(\"ret:\"+t1);\n      return t1;\n    }\n    assert t1.longs.length == t2.longs.length;\n\n    int pos = 0;\n    long[] accum = new long[longsSize];\n\n    while (pos < longsSize) {\n      accum[pos] = t1.longs[pos] + t2.longs[pos];\n      pos++;\n    }\n\n    TempMetaData ret;\n    if (t2.bytes != null || t2.docFreq > 0) {\n      ret = new TempMetaData(accum, t2.bytes, t2.docFreq, t2.totalTermFreq);\n    } else {\n      ret = new TempMetaData(accum, t1.bytes, t1.docFreq, t1.totalTermFreq);\n    }\n    if (DEBUG) System.out.println(\"ret:\"+ret);\n    return ret;\n  }\n\n","sourceOld":"  // nocommit: we might refactor out an 'addSelf' later, \n  // which improves 5~7% for fuzzy queries\n  @Override\n  public TempMetaData add(TempMetaData t1, TempMetaData t2) {\n    if (DEBUG) System.out.print(\"add(\"+t1+\", \"+t2+\") = \");\n    if (t1 == NO_OUTPUT) {\n      if (DEBUG) System.out.println(\"ret:\"+t2);\n      return t2;\n    } else if (t2 == NO_OUTPUT) {\n      if (DEBUG) System.out.println(\"ret:\"+t1);\n      return t1;\n    }\n    assert t1.longs.length == t2.longs.length;\n\n    int pos = 0;\n    long[] accum = new long[longsSize];\n\n    while (pos < longsSize) {\n      accum[pos] = t1.longs[pos] + t2.longs[pos];\n      pos++;\n    }\n\n    TempMetaData ret;\n    if (t2.bytes != null || t2.docFreq > 0) {\n      ret = new TempMetaData(accum, t2.bytes, t2.docFreq, t2.totalTermFreq);\n    } else {\n      ret = new TempMetaData(accum, t1.bytes, t1.docFreq, t1.totalTermFreq);\n    }\n    if (DEBUG) System.out.println(\"ret:\"+ret);\n    return ret;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cff9c2f82cba41c789e4f62f8ca8c65585d48eb7","date":1378009921,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/temp/TempTermOutputs#add(TempMetaData,TempMetaData).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/temp/TempTermOutputs#add(TempMetaData,TempMetaData).mjava","sourceNew":"  // TODO: if we refactor a 'addSelf(TempMetaDat other)',\n  // we can gain about 5~7% for fuzzy queries, however on the other hand\n  // we seem to put much stress on FST Outputs decoding?\n  @Override\n  public TempMetaData add(TempMetaData t1, TempMetaData t2) {\n    //if (DEBUG) System.out.print(\"add(\"+t1+\", \"+t2+\") = \");\n    if (t1 == NO_OUTPUT) {\n      //if (DEBUG) System.out.println(\"ret:\"+t2);\n      return t2;\n    } else if (t2 == NO_OUTPUT) {\n      //if (DEBUG) System.out.println(\"ret:\"+t1);\n      return t1;\n    }\n    assert t1.longs.length == t2.longs.length;\n\n    int pos = 0;\n    long[] accum = new long[longsSize];\n\n    while (pos < longsSize) {\n      accum[pos] = t1.longs[pos] + t2.longs[pos];\n      pos++;\n    }\n\n    TempMetaData ret;\n    if (t2.bytes != null || t2.docFreq > 0) {\n      ret = new TempMetaData(accum, t2.bytes, t2.docFreq, t2.totalTermFreq);\n    } else {\n      ret = new TempMetaData(accum, t1.bytes, t1.docFreq, t1.totalTermFreq);\n    }\n    //if (DEBUG) System.out.println(\"ret:\"+ret);\n    return ret;\n  }\n\n","sourceOld":"  // nocommit: we might refactor out an 'addSelf' later, \n  // which improves 5~7% for fuzzy queries\n  @Override\n  public TempMetaData add(TempMetaData t1, TempMetaData t2) {\n    if (DEBUG) System.out.print(\"add(\"+t1+\", \"+t2+\") = \");\n    if (t1 == NO_OUTPUT) {\n      if (DEBUG) System.out.println(\"ret:\"+t2);\n      return t2;\n    } else if (t2 == NO_OUTPUT) {\n      if (DEBUG) System.out.println(\"ret:\"+t1);\n      return t1;\n    }\n    assert t1.longs.length == t2.longs.length;\n\n    int pos = 0;\n    long[] accum = new long[longsSize];\n\n    while (pos < longsSize) {\n      accum[pos] = t1.longs[pos] + t2.longs[pos];\n      pos++;\n    }\n\n    TempMetaData ret;\n    if (t2.bytes != null || t2.docFreq > 0) {\n      ret = new TempMetaData(accum, t2.bytes, t2.docFreq, t2.totalTermFreq);\n    } else {\n      ret = new TempMetaData(accum, t1.bytes, t1.docFreq, t1.totalTermFreq);\n    }\n    if (DEBUG) System.out.println(\"ret:\"+ret);\n    return ret;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"871d0195bf88f0db53758cb00eb1f793103216c4","date":1378053137,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/temp/TempTermOutputs#add(TempMetaData,TempMetaData).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/temp/TempTermOutputs#add(TempMetaData,TempMetaData).mjava","sourceNew":"  // TODO: if we refactor a 'addSelf(TempMetaDat other)',\n  // we can gain about 5~7% for fuzzy queries, however on the other hand\n  // we seem to put much stress on FST Outputs decoding?\n  @Override\n  public TempMetaData add(TempMetaData t1, TempMetaData t2) {\n    //if (TEST) System.out.print(\"add(\"+t1+\", \"+t2+\") = \");\n    if (t1 == NO_OUTPUT) {\n      //if (TEST) System.out.println(\"ret:\"+t2);\n      return t2;\n    } else if (t2 == NO_OUTPUT) {\n      //if (TEST) System.out.println(\"ret:\"+t1);\n      return t1;\n    }\n    assert t1.longs.length == t2.longs.length;\n\n    int pos = 0;\n    long[] accum = new long[longsSize];\n\n    while (pos < longsSize) {\n      accum[pos] = t1.longs[pos] + t2.longs[pos];\n      pos++;\n    }\n\n    TempMetaData ret;\n    if (t2.bytes != null || t2.docFreq > 0) {\n      ret = new TempMetaData(accum, t2.bytes, t2.docFreq, t2.totalTermFreq);\n    } else {\n      ret = new TempMetaData(accum, t1.bytes, t1.docFreq, t1.totalTermFreq);\n    }\n    //if (TEST) System.out.println(\"ret:\"+ret);\n    return ret;\n  }\n\n","sourceOld":"  // TODO: if we refactor a 'addSelf(TempMetaDat other)',\n  // we can gain about 5~7% for fuzzy queries, however on the other hand\n  // we seem to put much stress on FST Outputs decoding?\n  @Override\n  public TempMetaData add(TempMetaData t1, TempMetaData t2) {\n    //if (DEBUG) System.out.print(\"add(\"+t1+\", \"+t2+\") = \");\n    if (t1 == NO_OUTPUT) {\n      //if (DEBUG) System.out.println(\"ret:\"+t2);\n      return t2;\n    } else if (t2 == NO_OUTPUT) {\n      //if (DEBUG) System.out.println(\"ret:\"+t1);\n      return t1;\n    }\n    assert t1.longs.length == t2.longs.length;\n\n    int pos = 0;\n    long[] accum = new long[longsSize];\n\n    while (pos < longsSize) {\n      accum[pos] = t1.longs[pos] + t2.longs[pos];\n      pos++;\n    }\n\n    TempMetaData ret;\n    if (t2.bytes != null || t2.docFreq > 0) {\n      ret = new TempMetaData(accum, t2.bytes, t2.docFreq, t2.totalTermFreq);\n    } else {\n      ret = new TempMetaData(accum, t1.bytes, t1.docFreq, t1.totalTermFreq);\n    }\n    //if (DEBUG) System.out.println(\"ret:\"+ret);\n    return ret;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"75bb5d39efc3017188ad2881bd61b25153a8e3de","date":1378175814,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/temp/TempTermOutputs#add(TempMetaData,TempMetaData).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/temp/TempTermOutputs#add(TempMetaData,TempMetaData).mjava","sourceNew":"  // TODO: if we refactor a 'addSelf(TempMetaDat other)',\n  // we can gain about 5~7% for fuzzy queries, however this also \n  // means we are putting too much stress on FST Outputs decoding?\n  @Override\n  public TempMetaData add(TempMetaData t1, TempMetaData t2) {\n    //if (TEST) System.out.print(\"add(\"+t1+\", \"+t2+\") = \");\n    if (t1 == NO_OUTPUT) {\n      //if (TEST) System.out.println(\"ret:\"+t2);\n      return t2;\n    } else if (t2 == NO_OUTPUT) {\n      //if (TEST) System.out.println(\"ret:\"+t1);\n      return t1;\n    }\n    assert t1.longs.length == t2.longs.length;\n\n    int pos = 0;\n    long[] accum = new long[longsSize];\n\n    while (pos < longsSize) {\n      accum[pos] = t1.longs[pos] + t2.longs[pos];\n      pos++;\n    }\n\n    TempMetaData ret;\n    if (t2.bytes != null || t2.docFreq > 0) {\n      ret = new TempMetaData(accum, t2.bytes, t2.docFreq, t2.totalTermFreq);\n    } else {\n      ret = new TempMetaData(accum, t1.bytes, t1.docFreq, t1.totalTermFreq);\n    }\n    //if (TEST) System.out.println(\"ret:\"+ret);\n    return ret;\n  }\n\n","sourceOld":"  // TODO: if we refactor a 'addSelf(TempMetaDat other)',\n  // we can gain about 5~7% for fuzzy queries, however on the other hand\n  // we seem to put much stress on FST Outputs decoding?\n  @Override\n  public TempMetaData add(TempMetaData t1, TempMetaData t2) {\n    //if (TEST) System.out.print(\"add(\"+t1+\", \"+t2+\") = \");\n    if (t1 == NO_OUTPUT) {\n      //if (TEST) System.out.println(\"ret:\"+t2);\n      return t2;\n    } else if (t2 == NO_OUTPUT) {\n      //if (TEST) System.out.println(\"ret:\"+t1);\n      return t1;\n    }\n    assert t1.longs.length == t2.longs.length;\n\n    int pos = 0;\n    long[] accum = new long[longsSize];\n\n    while (pos < longsSize) {\n      accum[pos] = t1.longs[pos] + t2.longs[pos];\n      pos++;\n    }\n\n    TempMetaData ret;\n    if (t2.bytes != null || t2.docFreq > 0) {\n      ret = new TempMetaData(accum, t2.bytes, t2.docFreq, t2.totalTermFreq);\n    } else {\n      ret = new TempMetaData(accum, t1.bytes, t1.docFreq, t1.totalTermFreq);\n    }\n    //if (TEST) System.out.println(\"ret:\"+ret);\n    return ret;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f71b8f76a3876ede75eba21fb109342525c3d9c4","date":1378263923,"type":5,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/temp/TempTermOutputs#add(TempTermData,TempTermData).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/temp/TempTermOutputs#add(TempMetaData,TempMetaData).mjava","sourceNew":"  // TODO: if we refactor a 'addSelf(TempMetaDat other)',\n  // we can gain about 5~7% for fuzzy queries, however this also \n  // means we are putting too much stress on FST Outputs decoding?\n  @Override\n  public TempTermData add(TempTermData t1, TempTermData t2) {\n    //if (TEST) System.out.print(\"add(\"+t1+\", \"+t2+\") = \");\n    if (t1 == NO_OUTPUT) {\n      //if (TEST) System.out.println(\"ret:\"+t2);\n      return t2;\n    } else if (t2 == NO_OUTPUT) {\n      //if (TEST) System.out.println(\"ret:\"+t1);\n      return t1;\n    }\n    assert t1.longs.length == t2.longs.length;\n\n    int pos = 0;\n    long[] accum = new long[longsSize];\n\n    while (pos < longsSize) {\n      accum[pos] = t1.longs[pos] + t2.longs[pos];\n      pos++;\n    }\n\n    TempTermData ret;\n    if (t2.bytes != null || t2.docFreq > 0) {\n      ret = new TempTermData(accum, t2.bytes, t2.docFreq, t2.totalTermFreq);\n    } else {\n      ret = new TempTermData(accum, t1.bytes, t1.docFreq, t1.totalTermFreq);\n    }\n    //if (TEST) System.out.println(\"ret:\"+ret);\n    return ret;\n  }\n\n","sourceOld":"  // TODO: if we refactor a 'addSelf(TempMetaDat other)',\n  // we can gain about 5~7% for fuzzy queries, however this also \n  // means we are putting too much stress on FST Outputs decoding?\n  @Override\n  public TempMetaData add(TempMetaData t1, TempMetaData t2) {\n    //if (TEST) System.out.print(\"add(\"+t1+\", \"+t2+\") = \");\n    if (t1 == NO_OUTPUT) {\n      //if (TEST) System.out.println(\"ret:\"+t2);\n      return t2;\n    } else if (t2 == NO_OUTPUT) {\n      //if (TEST) System.out.println(\"ret:\"+t1);\n      return t1;\n    }\n    assert t1.longs.length == t2.longs.length;\n\n    int pos = 0;\n    long[] accum = new long[longsSize];\n\n    while (pos < longsSize) {\n      accum[pos] = t1.longs[pos] + t2.longs[pos];\n      pos++;\n    }\n\n    TempMetaData ret;\n    if (t2.bytes != null || t2.docFreq > 0) {\n      ret = new TempMetaData(accum, t2.bytes, t2.docFreq, t2.totalTermFreq);\n    } else {\n      ret = new TempMetaData(accum, t1.bytes, t1.docFreq, t1.totalTermFreq);\n    }\n    //if (TEST) System.out.println(\"ret:\"+ret);\n    return ret;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"871d0195bf88f0db53758cb00eb1f793103216c4":["cff9c2f82cba41c789e4f62f8ca8c65585d48eb7"],"cff9c2f82cba41c789e4f62f8ca8c65585d48eb7":["e6904bcc97d8afa27bd72ee29ac01e525e327ad4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e6904bcc97d8afa27bd72ee29ac01e525e327ad4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f71b8f76a3876ede75eba21fb109342525c3d9c4":["75bb5d39efc3017188ad2881bd61b25153a8e3de"],"75bb5d39efc3017188ad2881bd61b25153a8e3de":["871d0195bf88f0db53758cb00eb1f793103216c4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"871d0195bf88f0db53758cb00eb1f793103216c4":["75bb5d39efc3017188ad2881bd61b25153a8e3de"],"cff9c2f82cba41c789e4f62f8ca8c65585d48eb7":["871d0195bf88f0db53758cb00eb1f793103216c4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e6904bcc97d8afa27bd72ee29ac01e525e327ad4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e6904bcc97d8afa27bd72ee29ac01e525e327ad4":["cff9c2f82cba41c789e4f62f8ca8c65585d48eb7"],"f71b8f76a3876ede75eba21fb109342525c3d9c4":[],"75bb5d39efc3017188ad2881bd61b25153a8e3de":["f71b8f76a3876ede75eba21fb109342525c3d9c4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["f71b8f76a3876ede75eba21fb109342525c3d9c4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}