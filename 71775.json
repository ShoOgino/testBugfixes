{"path":"lucene/core/src/test/org/apache/lucene/search/TestBooleanMinShouldMatch#testSomeReqAndSomeOptional().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanMinShouldMatch#testSomeReqAndSomeOptional().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestBooleanMinShouldMatch#testSomeReqAndSomeOptional().mjava","sourceNew":"    public void testSomeReqAndSomeOptional() throws Exception {\n\n        /* two required, some optional */\n        BooleanQuery q = new BooleanQuery();\n        q.add(new TermQuery(new Term(\"all\", \"all\" )), BooleanClause.Occur.MUST);//true,  false);\n        q.add(new TermQuery(new Term(\"data\", \"6\"  )), BooleanClause.Occur.MUST);//true,  false);\n        q.add(new TermQuery(new Term(\"data\", \"5\"  )), BooleanClause.Occur.SHOULD);//false, false);\n        q.add(new TermQuery(new Term(\"data\", \"4\"  )), BooleanClause.Occur.SHOULD);//false, false);\n        q.add(new TermQuery(new Term(\"data\", \"3\"  )), BooleanClause.Occur.SHOULD);//false, false);\n\n        q.setMinimumNumberShouldMatch(2); // 2 of 3 optional \n\n        verifyNrHits(q, 5);\n    }\n\n","sourceOld":"    public void testSomeReqAndSomeOptional() throws Exception {\n\n        /* two required, some optional */\n        BooleanQuery q = new BooleanQuery();\n        q.add(new TermQuery(new Term(\"all\", \"all\" )), BooleanClause.Occur.MUST);//true,  false);\n        q.add(new TermQuery(new Term(\"data\", \"6\"  )), BooleanClause.Occur.MUST);//true,  false);\n        q.add(new TermQuery(new Term(\"data\", \"5\"  )), BooleanClause.Occur.SHOULD);//false, false);\n        q.add(new TermQuery(new Term(\"data\", \"4\"  )), BooleanClause.Occur.SHOULD);//false, false);\n        q.add(new TermQuery(new Term(\"data\", \"3\"  )), BooleanClause.Occur.SHOULD);//false, false);\n\n        q.setMinimumNumberShouldMatch(2); // 2 of 3 optional \n\n        verifyNrHits(q, 5);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f68d01cf19df971dcdcb05e30247f4ad7ec9747","date":1434611645,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanMinShouldMatch#testSomeReqAndSomeOptional().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanMinShouldMatch#testSomeReqAndSomeOptional().mjava","sourceNew":"    public void testSomeReqAndSomeOptional() throws Exception {\n\n        /* two required, some optional */\n        BooleanQuery.Builder q = new BooleanQuery.Builder();\n        q.add(new TermQuery(new Term(\"all\", \"all\" )), BooleanClause.Occur.MUST);//true,  false);\n        q.add(new TermQuery(new Term(\"data\", \"6\"  )), BooleanClause.Occur.MUST);//true,  false);\n        q.add(new TermQuery(new Term(\"data\", \"5\"  )), BooleanClause.Occur.SHOULD);//false, false);\n        q.add(new TermQuery(new Term(\"data\", \"4\"  )), BooleanClause.Occur.SHOULD);//false, false);\n        q.add(new TermQuery(new Term(\"data\", \"3\"  )), BooleanClause.Occur.SHOULD);//false, false);\n\n        q.setMinimumNumberShouldMatch(2); // 2 of 3 optional \n\n        verifyNrHits(q.build(), 5);\n    }\n\n","sourceOld":"    public void testSomeReqAndSomeOptional() throws Exception {\n\n        /* two required, some optional */\n        BooleanQuery q = new BooleanQuery();\n        q.add(new TermQuery(new Term(\"all\", \"all\" )), BooleanClause.Occur.MUST);//true,  false);\n        q.add(new TermQuery(new Term(\"data\", \"6\"  )), BooleanClause.Occur.MUST);//true,  false);\n        q.add(new TermQuery(new Term(\"data\", \"5\"  )), BooleanClause.Occur.SHOULD);//false, false);\n        q.add(new TermQuery(new Term(\"data\", \"4\"  )), BooleanClause.Occur.SHOULD);//false, false);\n        q.add(new TermQuery(new Term(\"data\", \"3\"  )), BooleanClause.Occur.SHOULD);//false, false);\n\n        q.setMinimumNumberShouldMatch(2); // 2 of 3 optional \n\n        verifyNrHits(q, 5);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"]},"commit2Childs":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}