{"path":"modules/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyCombined#checkWriterParent(TaxonomyReader,TaxonomyWriter).mjava","commits":[{"id":"89f15687f60bd49cd3d9de427e85c17fd9397d61","date":1309381327,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"modules/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyCombined#checkWriterParent(TaxonomyReader,TaxonomyWriter).mjava","pathOld":"/dev/null","sourceNew":"  private void checkWriterParent(TaxonomyReader tr, TaxonomyWriter tw) throws Exception {\n    // check that the parent of the root ordinal is the invalid ordinal:\n    assertEquals(TaxonomyReader.INVALID_ORDINAL, tw.getParent(0));\n\n    // check parent of non-root ordinals:\n    for (int ordinal = 1; ordinal < tr.getSize(); ordinal++) {\n      CategoryPath me = tr.getPath(ordinal);\n      int parentOrdinal = tw.getParent(ordinal);\n      CategoryPath parent = tr.getPath(parentOrdinal);\n      if (parent == null) {\n        fail(\"Parent of \" + ordinal + \" is \" + parentOrdinal\n            + \", but this is not a valid category.\");\n      }\n      // verify that the parent is indeed my parent, according to the\n      // strings\n      if (!new CategoryPath(me, me.length() - 1).equals(parent)) {\n        fail(\"Got parent \" + parentOrdinal + \" for ordinal \" + ordinal\n            + \" but categories are \" + showcat(parent) + \" and \"\n            + showcat(me) + \" respectively.\");\n      }\n    }\n\n    // check parent of of invalid ordinals:\n    try {\n      tw.getParent(-1);\n      fail(\"getParent for -1 should throw exception\");\n    } catch (ArrayIndexOutOfBoundsException e) {\n      // ok\n    }\n    try {\n      tw.getParent(TaxonomyReader.INVALID_ORDINAL);\n      fail(\"getParent for INVALID_ORDINAL should throw exception\");\n    } catch (ArrayIndexOutOfBoundsException e) {\n      // ok\n    }\n    try {\n      int parent = tw.getParent(tr.getSize());\n      fail(\"getParent for getSize() should throw exception, but returned \"\n          + parent);\n    } catch (ArrayIndexOutOfBoundsException e) {\n      // ok\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["05fe562aa248790944d43cdd478f512572835ba0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyCombined#checkWriterParent(TaxonomyReader,TaxonomyWriter).mjava","pathOld":"/dev/null","sourceNew":"  private void checkWriterParent(TaxonomyReader tr, TaxonomyWriter tw) throws Exception {\n    // check that the parent of the root ordinal is the invalid ordinal:\n    assertEquals(TaxonomyReader.INVALID_ORDINAL, tw.getParent(0));\n\n    // check parent of non-root ordinals:\n    for (int ordinal = 1; ordinal < tr.getSize(); ordinal++) {\n      CategoryPath me = tr.getPath(ordinal);\n      int parentOrdinal = tw.getParent(ordinal);\n      CategoryPath parent = tr.getPath(parentOrdinal);\n      if (parent == null) {\n        fail(\"Parent of \" + ordinal + \" is \" + parentOrdinal\n            + \", but this is not a valid category.\");\n      }\n      // verify that the parent is indeed my parent, according to the\n      // strings\n      if (!new CategoryPath(me, me.length() - 1).equals(parent)) {\n        fail(\"Got parent \" + parentOrdinal + \" for ordinal \" + ordinal\n            + \" but categories are \" + showcat(parent) + \" and \"\n            + showcat(me) + \" respectively.\");\n      }\n    }\n\n    // check parent of of invalid ordinals:\n    try {\n      tw.getParent(-1);\n      fail(\"getParent for -1 should throw exception\");\n    } catch (ArrayIndexOutOfBoundsException e) {\n      // ok\n    }\n    try {\n      tw.getParent(TaxonomyReader.INVALID_ORDINAL);\n      fail(\"getParent for INVALID_ORDINAL should throw exception\");\n    } catch (ArrayIndexOutOfBoundsException e) {\n      // ok\n    }\n    try {\n      int parent = tw.getParent(tr.getSize());\n      fail(\"getParent for getSize() should throw exception, but returned \"\n          + parent);\n    } catch (ArrayIndexOutOfBoundsException e) {\n      // ok\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyCombined#checkWriterParent(TaxonomyReader,TaxonomyWriter).mjava","pathOld":"/dev/null","sourceNew":"  private void checkWriterParent(TaxonomyReader tr, TaxonomyWriter tw) throws Exception {\n    // check that the parent of the root ordinal is the invalid ordinal:\n    assertEquals(TaxonomyReader.INVALID_ORDINAL, tw.getParent(0));\n\n    // check parent of non-root ordinals:\n    for (int ordinal = 1; ordinal < tr.getSize(); ordinal++) {\n      CategoryPath me = tr.getPath(ordinal);\n      int parentOrdinal = tw.getParent(ordinal);\n      CategoryPath parent = tr.getPath(parentOrdinal);\n      if (parent == null) {\n        fail(\"Parent of \" + ordinal + \" is \" + parentOrdinal\n            + \", but this is not a valid category.\");\n      }\n      // verify that the parent is indeed my parent, according to the\n      // strings\n      if (!new CategoryPath(me, me.length() - 1).equals(parent)) {\n        fail(\"Got parent \" + parentOrdinal + \" for ordinal \" + ordinal\n            + \" but categories are \" + showcat(parent) + \" and \"\n            + showcat(me) + \" respectively.\");\n      }\n    }\n\n    // check parent of of invalid ordinals:\n    try {\n      tw.getParent(-1);\n      fail(\"getParent for -1 should throw exception\");\n    } catch (ArrayIndexOutOfBoundsException e) {\n      // ok\n    }\n    try {\n      tw.getParent(TaxonomyReader.INVALID_ORDINAL);\n      fail(\"getParent for INVALID_ORDINAL should throw exception\");\n    } catch (ArrayIndexOutOfBoundsException e) {\n      // ok\n    }\n    try {\n      int parent = tw.getParent(tr.getSize());\n      fail(\"getParent for getSize() should throw exception, but returned \"\n          + parent);\n    } catch (ArrayIndexOutOfBoundsException e) {\n      // ok\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyCombined#checkWriterParent(TaxonomyReader,TaxonomyWriter).mjava","pathOld":"modules/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyCombined#checkWriterParent(TaxonomyReader,TaxonomyWriter).mjava","sourceNew":"  private void checkWriterParent(TaxonomyReader tr, TaxonomyWriter tw) throws Exception {\n    // check that the parent of the root ordinal is the invalid ordinal:\n    assertEquals(TaxonomyReader.INVALID_ORDINAL, tw.getParent(0));\n\n    // check parent of non-root ordinals:\n    for (int ordinal = 1; ordinal < tr.getSize(); ordinal++) {\n      CategoryPath me = tr.getPath(ordinal);\n      int parentOrdinal = tw.getParent(ordinal);\n      CategoryPath parent = tr.getPath(parentOrdinal);\n      if (parent == null) {\n        fail(\"Parent of \" + ordinal + \" is \" + parentOrdinal\n            + \", but this is not a valid category.\");\n      }\n      // verify that the parent is indeed my parent, according to the\n      // strings\n      if (!new CategoryPath(me, me.length() - 1).equals(parent)) {\n        fail(\"Got parent \" + parentOrdinal + \" for ordinal \" + ordinal\n            + \" but categories are \" + showcat(parent) + \" and \"\n            + showcat(me) + \" respectively.\");\n      }\n    }\n\n    // check parent of of invalid ordinals:\n    try {\n      tw.getParent(-1);\n      fail(\"getParent for -1 should throw exception\");\n    } catch (ArrayIndexOutOfBoundsException e) {\n      // ok\n    }\n    try {\n      tw.getParent(TaxonomyReader.INVALID_ORDINAL);\n      fail(\"getParent for INVALID_ORDINAL should throw exception\");\n    } catch (ArrayIndexOutOfBoundsException e) {\n      // ok\n    }\n    try {\n      int parent = tw.getParent(tr.getSize());\n      fail(\"getParent for getSize() should throw exception, but returned \"\n          + parent);\n    } catch (ArrayIndexOutOfBoundsException e) {\n      // ok\n    }\n  }\n\n","sourceOld":"  private void checkWriterParent(TaxonomyReader tr, TaxonomyWriter tw) throws Exception {\n    // check that the parent of the root ordinal is the invalid ordinal:\n    assertEquals(TaxonomyReader.INVALID_ORDINAL, tw.getParent(0));\n\n    // check parent of non-root ordinals:\n    for (int ordinal = 1; ordinal < tr.getSize(); ordinal++) {\n      CategoryPath me = tr.getPath(ordinal);\n      int parentOrdinal = tw.getParent(ordinal);\n      CategoryPath parent = tr.getPath(parentOrdinal);\n      if (parent == null) {\n        fail(\"Parent of \" + ordinal + \" is \" + parentOrdinal\n            + \", but this is not a valid category.\");\n      }\n      // verify that the parent is indeed my parent, according to the\n      // strings\n      if (!new CategoryPath(me, me.length() - 1).equals(parent)) {\n        fail(\"Got parent \" + parentOrdinal + \" for ordinal \" + ordinal\n            + \" but categories are \" + showcat(parent) + \" and \"\n            + showcat(me) + \" respectively.\");\n      }\n    }\n\n    // check parent of of invalid ordinals:\n    try {\n      tw.getParent(-1);\n      fail(\"getParent for -1 should throw exception\");\n    } catch (ArrayIndexOutOfBoundsException e) {\n      // ok\n    }\n    try {\n      tw.getParent(TaxonomyReader.INVALID_ORDINAL);\n      fail(\"getParent for INVALID_ORDINAL should throw exception\");\n    } catch (ArrayIndexOutOfBoundsException e) {\n      // ok\n    }\n    try {\n      int parent = tw.getParent(tr.getSize());\n      fail(\"getParent for getSize() should throw exception, but returned \"\n          + parent);\n    } catch (ArrayIndexOutOfBoundsException e) {\n      // ok\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["89f15687f60bd49cd3d9de427e85c17fd9397d61"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","89f15687f60bd49cd3d9de427e85c17fd9397d61"],"89f15687f60bd49cd3d9de427e85c17fd9397d61":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","89f15687f60bd49cd3d9de427e85c17fd9397d61"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d083e83f225b11e5fdd900e83d26ddb385b6955c","89f15687f60bd49cd3d9de427e85c17fd9397d61","817d8435e9135b756f08ce6710ab0baac51bdf88"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"89f15687f60bd49cd3d9de427e85c17fd9397d61":["b89678825b68eccaf09e6ab71675fc0b0af1e099","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}