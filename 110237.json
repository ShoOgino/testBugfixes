{"path":"solr/core/src/java/org/apache/solr/handler/SnapPuller#copyAFile(File,File,String,List[String]).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller#copyAFile(File,File,String,List[String]).mjava","pathOld":"solr/src/java/org/apache/solr/handler/SnapPuller#copyAFile(File,File,String,List[String]).mjava","sourceNew":"  /**\n   * Copy a file by the File#renameTo() method. If it fails, it is considered a failure\n   * <p/>\n   */\n  private boolean copyAFile(File tmpIdxDir, File indexDir, String fname, List<String> copiedfiles) {\n    File indexFileInTmpDir = new File(tmpIdxDir, fname);\n    File indexFileInIndex = new File(indexDir, fname);\n    boolean success = indexFileInTmpDir.renameTo(indexFileInIndex);\n    if(!success){\n      try {\n        LOG.error(\"Unable to move index file from: \" + indexFileInTmpDir\n              + \" to: \" + indexFileInIndex + \"Trying to do a copy\");\n        FileUtils.copyFile(indexFileInTmpDir,indexFileInIndex);\n        success = true;\n      } catch (IOException e) {\n        LOG.error(\"Unable to copy index file from: \" + indexFileInTmpDir\n              + \" to: \" + indexFileInIndex , e);\n      }\n    }\n\n    if (!success) {\n      for (String f : copiedfiles) {\n        File indexFile = new File(indexDir, f);\n        if (indexFile.exists())\n          indexFile.delete();\n      }\n      delTree(tmpIdxDir);\n      return false;\n    }\n    return true;\n  }\n\n","sourceOld":"  /**\n   * Copy a file by the File#renameTo() method. If it fails, it is considered a failure\n   * <p/>\n   */\n  private boolean copyAFile(File tmpIdxDir, File indexDir, String fname, List<String> copiedfiles) {\n    File indexFileInTmpDir = new File(tmpIdxDir, fname);\n    File indexFileInIndex = new File(indexDir, fname);\n    boolean success = indexFileInTmpDir.renameTo(indexFileInIndex);\n    if(!success){\n      try {\n        LOG.error(\"Unable to move index file from: \" + indexFileInTmpDir\n              + \" to: \" + indexFileInIndex + \"Trying to do a copy\");\n        FileUtils.copyFile(indexFileInTmpDir,indexFileInIndex);\n        success = true;\n      } catch (IOException e) {\n        LOG.error(\"Unable to copy index file from: \" + indexFileInTmpDir\n              + \" to: \" + indexFileInIndex , e);\n      }\n    }\n\n    if (!success) {\n      for (String f : copiedfiles) {\n        File indexFile = new File(indexDir, f);\n        if (indexFile.exists())\n          indexFile.delete();\n      }\n      delTree(tmpIdxDir);\n      return false;\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller#copyAFile(File,File,String,List[String]).mjava","pathOld":"solr/src/java/org/apache/solr/handler/SnapPuller#copyAFile(File,File,String,List[String]).mjava","sourceNew":"  /**\n   * Copy a file by the File#renameTo() method. If it fails, it is considered a failure\n   * <p/>\n   */\n  private boolean copyAFile(File tmpIdxDir, File indexDir, String fname, List<String> copiedfiles) {\n    File indexFileInTmpDir = new File(tmpIdxDir, fname);\n    File indexFileInIndex = new File(indexDir, fname);\n    boolean success = indexFileInTmpDir.renameTo(indexFileInIndex);\n    if(!success){\n      try {\n        LOG.error(\"Unable to move index file from: \" + indexFileInTmpDir\n              + \" to: \" + indexFileInIndex + \"Trying to do a copy\");\n        FileUtils.copyFile(indexFileInTmpDir,indexFileInIndex);\n        success = true;\n      } catch (IOException e) {\n        LOG.error(\"Unable to copy index file from: \" + indexFileInTmpDir\n              + \" to: \" + indexFileInIndex , e);\n      }\n    }\n\n    if (!success) {\n      for (String f : copiedfiles) {\n        File indexFile = new File(indexDir, f);\n        if (indexFile.exists())\n          indexFile.delete();\n      }\n      delTree(tmpIdxDir);\n      return false;\n    }\n    return true;\n  }\n\n","sourceOld":"  /**\n   * Copy a file by the File#renameTo() method. If it fails, it is considered a failure\n   * <p/>\n   */\n  private boolean copyAFile(File tmpIdxDir, File indexDir, String fname, List<String> copiedfiles) {\n    File indexFileInTmpDir = new File(tmpIdxDir, fname);\n    File indexFileInIndex = new File(indexDir, fname);\n    boolean success = indexFileInTmpDir.renameTo(indexFileInIndex);\n    if(!success){\n      try {\n        LOG.error(\"Unable to move index file from: \" + indexFileInTmpDir\n              + \" to: \" + indexFileInIndex + \"Trying to do a copy\");\n        FileUtils.copyFile(indexFileInTmpDir,indexFileInIndex);\n        success = true;\n      } catch (IOException e) {\n        LOG.error(\"Unable to copy index file from: \" + indexFileInTmpDir\n              + \" to: \" + indexFileInIndex , e);\n      }\n    }\n\n    if (!success) {\n      for (String f : copiedfiles) {\n        File indexFile = new File(indexDir, f);\n        if (indexFile.exists())\n          indexFile.delete();\n      }\n      delTree(tmpIdxDir);\n      return false;\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller#copyAFile(File,File,String,List[String]).mjava","pathOld":"solr/src/java/org/apache/solr/handler/SnapPuller#copyAFile(File,File,String,List[String]).mjava","sourceNew":"  /**\n   * Copy a file by the File#renameTo() method. If it fails, it is considered a failure\n   * <p/>\n   */\n  private boolean copyAFile(File tmpIdxDir, File indexDir, String fname, List<String> copiedfiles) {\n    File indexFileInTmpDir = new File(tmpIdxDir, fname);\n    File indexFileInIndex = new File(indexDir, fname);\n    boolean success = indexFileInTmpDir.renameTo(indexFileInIndex);\n    if(!success){\n      try {\n        LOG.error(\"Unable to move index file from: \" + indexFileInTmpDir\n              + \" to: \" + indexFileInIndex + \"Trying to do a copy\");\n        FileUtils.copyFile(indexFileInTmpDir,indexFileInIndex);\n        success = true;\n      } catch (IOException e) {\n        LOG.error(\"Unable to copy index file from: \" + indexFileInTmpDir\n              + \" to: \" + indexFileInIndex , e);\n      }\n    }\n\n    if (!success) {\n      for (String f : copiedfiles) {\n        File indexFile = new File(indexDir, f);\n        if (indexFile.exists())\n          indexFile.delete();\n      }\n      delTree(tmpIdxDir);\n      return false;\n    }\n    return true;\n  }\n\n","sourceOld":"  /**\n   * Copy a file by the File#renameTo() method. If it fails, it is considered a failure\n   * <p/>\n   */\n  private boolean copyAFile(File tmpIdxDir, File indexDir, String fname, List<String> copiedfiles) {\n    File indexFileInTmpDir = new File(tmpIdxDir, fname);\n    File indexFileInIndex = new File(indexDir, fname);\n    boolean success = indexFileInTmpDir.renameTo(indexFileInIndex);\n    if(!success){\n      try {\n        LOG.error(\"Unable to move index file from: \" + indexFileInTmpDir\n              + \" to: \" + indexFileInIndex + \"Trying to do a copy\");\n        FileUtils.copyFile(indexFileInTmpDir,indexFileInIndex);\n        success = true;\n      } catch (IOException e) {\n        LOG.error(\"Unable to copy index file from: \" + indexFileInTmpDir\n              + \" to: \" + indexFileInIndex , e);\n      }\n    }\n\n    if (!success) {\n      for (String f : copiedfiles) {\n        File indexFile = new File(indexDir, f);\n        if (indexFile.exists())\n          indexFile.delete();\n      }\n      delTree(tmpIdxDir);\n      return false;\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"721b0f70e101826db3b4ef8f6470874df2cfc09d","date":1337878270,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller#copyAFile(File,File,String,List[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller#copyAFile(File,File,String,List[String]).mjava","sourceNew":"  /**\n   * Copy a file by the File#renameTo() method. If it fails, it is considered a failure\n   * <p/>\n   */\n  private boolean copyAFile(File tmpIdxDir, File indexDir, String fname, List<String> copiedfiles) {\n    File indexFileInTmpDir = new File(tmpIdxDir, fname);\n    File indexFileInIndex = new File(indexDir, fname);\n    boolean success = indexFileInTmpDir.renameTo(indexFileInIndex);\n    if(!success){\n      try {\n        LOG.error(\"Unable to move index file from: \" + indexFileInTmpDir\n              + \" to: \" + indexFileInIndex + \" Trying to do a copy\");\n        FileUtils.copyFile(indexFileInTmpDir,indexFileInIndex);\n        success = true;\n      } catch (IOException e) {\n        LOG.error(\"Unable to copy index file from: \" + indexFileInTmpDir\n              + \" to: \" + indexFileInIndex , e);\n      }\n    }\n\n    if (!success) {\n      for (String f : copiedfiles) {\n        File indexFile = new File(indexDir, f);\n        if (indexFile.exists())\n          indexFile.delete();\n      }\n      delTree(tmpIdxDir);\n      return false;\n    }\n    return true;\n  }\n\n","sourceOld":"  /**\n   * Copy a file by the File#renameTo() method. If it fails, it is considered a failure\n   * <p/>\n   */\n  private boolean copyAFile(File tmpIdxDir, File indexDir, String fname, List<String> copiedfiles) {\n    File indexFileInTmpDir = new File(tmpIdxDir, fname);\n    File indexFileInIndex = new File(indexDir, fname);\n    boolean success = indexFileInTmpDir.renameTo(indexFileInIndex);\n    if(!success){\n      try {\n        LOG.error(\"Unable to move index file from: \" + indexFileInTmpDir\n              + \" to: \" + indexFileInIndex + \"Trying to do a copy\");\n        FileUtils.copyFile(indexFileInTmpDir,indexFileInIndex);\n        success = true;\n      } catch (IOException e) {\n        LOG.error(\"Unable to copy index file from: \" + indexFileInTmpDir\n              + \" to: \" + indexFileInIndex , e);\n      }\n    }\n\n    if (!success) {\n      for (String f : copiedfiles) {\n        File indexFile = new File(indexDir, f);\n        if (indexFile.exists())\n          indexFile.delete();\n      }\n      delTree(tmpIdxDir);\n      return false;\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b52dd493156fb4023d158d49e1ea92dbf3c20871","date":1337893063,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller#copyAFile(File,File,String,List[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller#copyAFile(File,File,String,List[String]).mjava","sourceNew":"  /**\n   * Copy a file by the File#renameTo() method. If it fails, it is considered a failure\n   * <p/>\n   */\n  private boolean copyAFile(File tmpIdxDir, File indexDir, String fname, List<String> copiedfiles) {\n    File indexFileInTmpDir = new File(tmpIdxDir, fname);\n    File indexFileInIndex = new File(indexDir, fname);\n    boolean success = indexFileInTmpDir.renameTo(indexFileInIndex);\n    if(!success){\n      try {\n        LOG.error(\"Unable to move index file from: \" + indexFileInTmpDir\n              + \" to: \" + indexFileInIndex + \" Trying to do a copy\");\n        FileUtils.copyFile(indexFileInTmpDir,indexFileInIndex);\n        success = true;\n      } catch (IOException e) {\n        LOG.error(\"Unable to copy index file from: \" + indexFileInTmpDir\n              + \" to: \" + indexFileInIndex , e);\n      }\n    }\n\n    if (!success) {\n      for (String f : copiedfiles) {\n        File indexFile = new File(indexDir, f);\n        if (indexFile.exists())\n          indexFile.delete();\n      }\n      delTree(tmpIdxDir);\n      return false;\n    }\n    return true;\n  }\n\n","sourceOld":"  /**\n   * Copy a file by the File#renameTo() method. If it fails, it is considered a failure\n   * <p/>\n   */\n  private boolean copyAFile(File tmpIdxDir, File indexDir, String fname, List<String> copiedfiles) {\n    File indexFileInTmpDir = new File(tmpIdxDir, fname);\n    File indexFileInIndex = new File(indexDir, fname);\n    boolean success = indexFileInTmpDir.renameTo(indexFileInIndex);\n    if(!success){\n      try {\n        LOG.error(\"Unable to move index file from: \" + indexFileInTmpDir\n              + \" to: \" + indexFileInIndex + \"Trying to do a copy\");\n        FileUtils.copyFile(indexFileInTmpDir,indexFileInIndex);\n        success = true;\n      } catch (IOException e) {\n        LOG.error(\"Unable to copy index file from: \" + indexFileInTmpDir\n              + \" to: \" + indexFileInIndex , e);\n      }\n    }\n\n    if (!success) {\n      for (String f : copiedfiles) {\n        File indexFile = new File(indexDir, f);\n        if (indexFile.exists())\n          indexFile.delete();\n      }\n      delTree(tmpIdxDir);\n      return false;\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f82d15f518eb314f2bb9c4e12b0898180bfbe26a","date":1339271758,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller#copyAFile(File,File,String,List[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller#copyAFile(File,File,String,List[String]).mjava","sourceNew":"  /**\n   * Copy a file by the File#renameTo() method. If it fails, it is considered a failure\n   * <p/>\n   */\n  private boolean copyAFile(File tmpIdxDir, File indexDir, String fname, List<String> copiedfiles) {\n    File indexFileInTmpDir = new File(tmpIdxDir, fname);\n    File indexFileInIndex = new File(indexDir, fname);\n    boolean success = indexFileInTmpDir.renameTo(indexFileInIndex);\n    if(!success){\n      try {\n        LOG.error(\"Unable to move index file from: \" + indexFileInTmpDir\n              + \" to: \" + indexFileInIndex + \" Trying to do a copy\");\n        FileUtils.copyFile(indexFileInTmpDir,indexFileInIndex);\n        success = true;\n      } catch (FileNotFoundException e) {\n        if (!indexDir.exists()) {\n          File parent = indexDir.getParentFile();\n          String[] children = null;\n          if (parent != null) {\n            children = parent.list();\n          }\n          LOG.error(\"The index directory does not exist: \" + indexDir.getAbsolutePath()\n              + \" dirs found: \" + (children == null ? \"none could be found\" : Arrays.asList(children)));\n        }\n        LOG.error(\"Unable to copy index file from: \" + indexFileInTmpDir\n            + \" to: \" + indexFileInIndex , e);\n      } catch (IOException e) {\n        LOG.error(\"Unable to copy index file from: \" + indexFileInTmpDir\n              + \" to: \" + indexFileInIndex , e);\n      }\n    }\n\n    if (!success) {\n      for (String f : copiedfiles) {\n        File indexFile = new File(indexDir, f);\n        if (indexFile.exists())\n          indexFile.delete();\n      }\n      delTree(tmpIdxDir);\n      return false;\n    }\n    return true;\n  }\n\n","sourceOld":"  /**\n   * Copy a file by the File#renameTo() method. If it fails, it is considered a failure\n   * <p/>\n   */\n  private boolean copyAFile(File tmpIdxDir, File indexDir, String fname, List<String> copiedfiles) {\n    File indexFileInTmpDir = new File(tmpIdxDir, fname);\n    File indexFileInIndex = new File(indexDir, fname);\n    boolean success = indexFileInTmpDir.renameTo(indexFileInIndex);\n    if(!success){\n      try {\n        LOG.error(\"Unable to move index file from: \" + indexFileInTmpDir\n              + \" to: \" + indexFileInIndex + \" Trying to do a copy\");\n        FileUtils.copyFile(indexFileInTmpDir,indexFileInIndex);\n        success = true;\n      } catch (IOException e) {\n        LOG.error(\"Unable to copy index file from: \" + indexFileInTmpDir\n              + \" to: \" + indexFileInIndex , e);\n      }\n    }\n\n    if (!success) {\n      for (String f : copiedfiles) {\n        File indexFile = new File(indexDir, f);\n        if (indexFile.exists())\n          indexFile.delete();\n      }\n      delTree(tmpIdxDir);\n      return false;\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d9405f486872f1e416304dfe389741f4ee2f8a4d","date":1351276739,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller#copyAFile(File,File,String,List[String]).mjava","sourceNew":null,"sourceOld":"  /**\n   * Copy a file by the File#renameTo() method. If it fails, it is considered a failure\n   * <p/>\n   */\n  private boolean copyAFile(File tmpIdxDir, File indexDir, String fname, List<String> copiedfiles) {\n    File indexFileInTmpDir = new File(tmpIdxDir, fname);\n    File indexFileInIndex = new File(indexDir, fname);\n    boolean success = indexFileInTmpDir.renameTo(indexFileInIndex);\n    if(!success){\n      try {\n        LOG.error(\"Unable to move index file from: \" + indexFileInTmpDir\n              + \" to: \" + indexFileInIndex + \" Trying to do a copy\");\n        FileUtils.copyFile(indexFileInTmpDir,indexFileInIndex);\n        success = true;\n      } catch (FileNotFoundException e) {\n        if (!indexDir.exists()) {\n          File parent = indexDir.getParentFile();\n          String[] children = null;\n          if (parent != null) {\n            children = parent.list();\n          }\n          LOG.error(\"The index directory does not exist: \" + indexDir.getAbsolutePath()\n              + \" dirs found: \" + (children == null ? \"none could be found\" : Arrays.asList(children)));\n        }\n        LOG.error(\"Unable to copy index file from: \" + indexFileInTmpDir\n            + \" to: \" + indexFileInIndex , e);\n      } catch (IOException e) {\n        LOG.error(\"Unable to copy index file from: \" + indexFileInTmpDir\n              + \" to: \" + indexFileInIndex , e);\n      }\n    }\n\n    if (!success) {\n      for (String f : copiedfiles) {\n        File indexFile = new File(indexDir, f);\n        if (indexFile.exists())\n          indexFile.delete();\n      }\n      delTree(tmpIdxDir);\n      return false;\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2126b84bd093fa3d921582a109a0ee578c28126","date":1351522501,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller#copyAFile(File,File,String,List[String]).mjava","sourceNew":null,"sourceOld":"  /**\n   * Copy a file by the File#renameTo() method. If it fails, it is considered a failure\n   * <p/>\n   */\n  private boolean copyAFile(File tmpIdxDir, File indexDir, String fname, List<String> copiedfiles) {\n    File indexFileInTmpDir = new File(tmpIdxDir, fname);\n    File indexFileInIndex = new File(indexDir, fname);\n    boolean success = indexFileInTmpDir.renameTo(indexFileInIndex);\n    if(!success){\n      try {\n        LOG.error(\"Unable to move index file from: \" + indexFileInTmpDir\n              + \" to: \" + indexFileInIndex + \" Trying to do a copy\");\n        FileUtils.copyFile(indexFileInTmpDir,indexFileInIndex);\n        success = true;\n      } catch (FileNotFoundException e) {\n        if (!indexDir.exists()) {\n          File parent = indexDir.getParentFile();\n          String[] children = null;\n          if (parent != null) {\n            children = parent.list();\n          }\n          LOG.error(\"The index directory does not exist: \" + indexDir.getAbsolutePath()\n              + \" dirs found: \" + (children == null ? \"none could be found\" : Arrays.asList(children)));\n        }\n        LOG.error(\"Unable to copy index file from: \" + indexFileInTmpDir\n            + \" to: \" + indexFileInIndex , e);\n      } catch (IOException e) {\n        LOG.error(\"Unable to copy index file from: \" + indexFileInTmpDir\n              + \" to: \" + indexFileInIndex , e);\n      }\n    }\n\n    if (!success) {\n      for (String f : copiedfiles) {\n        File indexFile = new File(indexDir, f);\n        if (indexFile.exists())\n          indexFile.delete();\n      }\n      delTree(tmpIdxDir);\n      return false;\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b52dd493156fb4023d158d49e1ea92dbf3c20871":["c26f00b574427b55127e869b935845554afde1fa","721b0f70e101826db3b4ef8f6470874df2cfc09d"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d9405f486872f1e416304dfe389741f4ee2f8a4d":["f82d15f518eb314f2bb9c4e12b0898180bfbe26a"],"f2126b84bd093fa3d921582a109a0ee578c28126":["f82d15f518eb314f2bb9c4e12b0898180bfbe26a","d9405f486872f1e416304dfe389741f4ee2f8a4d"],"721b0f70e101826db3b4ef8f6470874df2cfc09d":["c26f00b574427b55127e869b935845554afde1fa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d9405f486872f1e416304dfe389741f4ee2f8a4d"],"f82d15f518eb314f2bb9c4e12b0898180bfbe26a":["721b0f70e101826db3b4ef8f6470874df2cfc09d"]},"commit2Childs":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["b52dd493156fb4023d158d49e1ea92dbf3c20871","721b0f70e101826db3b4ef8f6470874df2cfc09d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"b52dd493156fb4023d158d49e1ea92dbf3c20871":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"d9405f486872f1e416304dfe389741f4ee2f8a4d":["f2126b84bd093fa3d921582a109a0ee578c28126","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f2126b84bd093fa3d921582a109a0ee578c28126":[],"721b0f70e101826db3b4ef8f6470874df2cfc09d":["b52dd493156fb4023d158d49e1ea92dbf3c20871","f82d15f518eb314f2bb9c4e12b0898180bfbe26a"],"f82d15f518eb314f2bb9c4e12b0898180bfbe26a":["d9405f486872f1e416304dfe389741f4ee2f8a4d","f2126b84bd093fa3d921582a109a0ee578c28126"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b52dd493156fb4023d158d49e1ea92dbf3c20871","a258fbb26824fd104ed795e5d9033d2d040049ee","f2126b84bd093fa3d921582a109a0ee578c28126","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}