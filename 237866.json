{"path":"lucene/src/java/org/apache/lucene/document/Field#Field(String,IndexableFieldType,Reader).mjava","commits":[{"id":"6eb141f80638abdb6ffaa5149877f36ea39b6ad5","date":1315714072,"type":1,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/document/Field#Field(String,IndexableFieldType,Reader).mjava","pathOld":"lucene/src/java/org/apache/lucene/document/Field#Field(String,FieldType,Reader).mjava","sourceNew":"  public Field(String name, IndexableFieldType type, Reader reader) {\n    if (name == null) {\n      throw new NullPointerException(\"name cannot be null\");\n    }\n    if (reader == null) {\n      throw new NullPointerException(\"reader cannot be null\");\n    }\n    \n    this.name = name;\n    this.fieldsData = reader;\n    this.type = type;\n  }\n\n","sourceOld":"  public Field(String name, FieldType type, Reader reader) {\n    if (name == null) {\n      throw new NullPointerException(\"name cannot be null\");\n    }\n    if (reader == null) {\n      throw new NullPointerException(\"reader cannot be null\");\n    }\n    \n    this.name = name;\n    this.fieldsData = reader;\n    this.type = type;\n    type.freeze();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b3bdb938a073ccc28d7ed813f6e8c4cb58e04c5","date":1316747797,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/document/Field#Field(String,IndexableFieldType,Reader).mjava","pathOld":"lucene/src/java/org/apache/lucene/document/Field#Field(String,IndexableFieldType,Reader).mjava","sourceNew":"  public Field(String name, IndexableFieldType type, Reader reader) {\n    if (name == null) {\n      throw new NullPointerException(\"name cannot be null\");\n    }\n    if (reader == null) {\n      throw new NullPointerException(\"reader cannot be null\");\n    }\n    if (type.indexed() && !type.tokenized()) {\n      throw new IllegalArgumentException(\"Non-tokenized fields must use String values\");\n    }\n    \n    this.name = name;\n    this.fieldsData = reader;\n    this.type = type;\n  }\n\n","sourceOld":"  public Field(String name, IndexableFieldType type, Reader reader) {\n    if (name == null) {\n      throw new NullPointerException(\"name cannot be null\");\n    }\n    if (reader == null) {\n      throw new NullPointerException(\"reader cannot be null\");\n    }\n    \n    this.name = name;\n    this.fieldsData = reader;\n    this.type = type;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e4db59c6b6c10e25322cfb41c4c19d78b4298bd","date":1317197236,"type":5,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/document/Field#Field(String,Reader,IndexableFieldType).mjava","pathOld":"lucene/src/java/org/apache/lucene/document/Field#Field(String,IndexableFieldType,Reader).mjava","sourceNew":"  public Field(String name, Reader reader, IndexableFieldType type) {\n    if (name == null) {\n      throw new NullPointerException(\"name cannot be null\");\n    }\n    if (reader == null) {\n      throw new NullPointerException(\"reader cannot be null\");\n    }\n    if (type.indexed() && !type.tokenized()) {\n      throw new IllegalArgumentException(\"Non-tokenized fields must use String values\");\n    }\n    \n    this.name = name;\n    this.fieldsData = reader;\n    this.type = type;\n  }\n\n","sourceOld":"  public Field(String name, IndexableFieldType type, Reader reader) {\n    if (name == null) {\n      throw new NullPointerException(\"name cannot be null\");\n    }\n    if (reader == null) {\n      throw new NullPointerException(\"reader cannot be null\");\n    }\n    if (type.indexed() && !type.tokenized()) {\n      throw new IllegalArgumentException(\"Non-tokenized fields must use String values\");\n    }\n    \n    this.name = name;\n    this.fieldsData = reader;\n    this.type = type;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6eb141f80638abdb6ffaa5149877f36ea39b6ad5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8b3bdb938a073ccc28d7ed813f6e8c4cb58e04c5":["6eb141f80638abdb6ffaa5149877f36ea39b6ad5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7e4db59c6b6c10e25322cfb41c4c19d78b4298bd"],"7e4db59c6b6c10e25322cfb41c4c19d78b4298bd":["8b3bdb938a073ccc28d7ed813f6e8c4cb58e04c5"]},"commit2Childs":{"6eb141f80638abdb6ffaa5149877f36ea39b6ad5":["8b3bdb938a073ccc28d7ed813f6e8c4cb58e04c5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6eb141f80638abdb6ffaa5149877f36ea39b6ad5"],"8b3bdb938a073ccc28d7ed813f6e8c4cb58e04c5":["7e4db59c6b6c10e25322cfb41c4c19d78b4298bd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7e4db59c6b6c10e25322cfb41c4c19d78b4298bd":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}