{"path":"solr/core/src/test/org/apache/solr/core/TestConfigSetImmutable#testSolrConfigHandlerImmutable().mjava","commits":[{"id":"6466e433d7f5218e77c8115ed28176855fc3c143","date":1436824910,"type":0,"author":"Gregory Chanan","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestConfigSetImmutable#testSolrConfigHandlerImmutable().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testSolrConfigHandlerImmutable() throws Exception {\n    String payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/x', 'class': 'org.apache.solr.handler.DumpRequestHandler' , 'startup' : 'lazy'}\\n\" +\n        \"}\";\n    String uri = \"/config?wt=json\";\n    String response = restTestHarness.post(uri, SolrTestCaseJ4.json(payload));\n    Map map = (Map) ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNotNull(map.get(\"error\"));\n    assertTrue(map.get(\"error\").toString().contains(\"immutable\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ac1e7fa558287a811ea07634d815ee7b1c541284","date":1500910922,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestConfigSetImmutable#testSolrConfigHandlerImmutable().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestConfigSetImmutable#testSolrConfigHandlerImmutable().mjava","sourceNew":"  @Test\n  public void testSolrConfigHandlerImmutable() throws Exception {\n    String payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/x', 'class': 'org.apache.solr.handler.DumpRequestHandler' , 'startup' : 'lazy'}\\n\" +\n        \"}\";\n    String uri = \"/config\";\n    String response = restTestHarness.post(uri, SolrTestCaseJ4.json(payload));\n    Map map = (Map) ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNotNull(map.get(\"error\"));\n    assertTrue(map.get(\"error\").toString().contains(\"immutable\"));\n  }\n\n","sourceOld":"  @Test\n  public void testSolrConfigHandlerImmutable() throws Exception {\n    String payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/x', 'class': 'org.apache.solr.handler.DumpRequestHandler' , 'startup' : 'lazy'}\\n\" +\n        \"}\";\n    String uri = \"/config?wt=json\";\n    String response = restTestHarness.post(uri, SolrTestCaseJ4.json(payload));\n    Map map = (Map) ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNotNull(map.get(\"error\"));\n    assertTrue(map.get(\"error\").toString().contains(\"immutable\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"936cdd5882761db3b844afd6f84ab81cbb011a75","date":1500973524,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestConfigSetImmutable#testSolrConfigHandlerImmutable().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestConfigSetImmutable#testSolrConfigHandlerImmutable().mjava","sourceNew":"  @Test\n  public void testSolrConfigHandlerImmutable() throws Exception {\n    String payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/x', 'class': 'org.apache.solr.handler.DumpRequestHandler' , 'startup' : 'lazy'}\\n\" +\n        \"}\";\n    String uri = \"/config\";\n    String response = restTestHarness.post(uri, SolrTestCaseJ4.json(payload));\n    Map map = (Map) ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNotNull(map.get(\"error\"));\n    assertTrue(map.get(\"error\").toString().contains(\"immutable\"));\n  }\n\n","sourceOld":"  @Test\n  public void testSolrConfigHandlerImmutable() throws Exception {\n    String payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/x', 'class': 'org.apache.solr.handler.DumpRequestHandler' , 'startup' : 'lazy'}\\n\" +\n        \"}\";\n    String uri = \"/config?wt=json\";\n    String response = restTestHarness.post(uri, SolrTestCaseJ4.json(payload));\n    Map map = (Map) ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNotNull(map.get(\"error\"));\n    assertTrue(map.get(\"error\").toString().contains(\"immutable\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a52341299179de5479672f7cf518bf4b173f34b3","date":1501079746,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestConfigSetImmutable#testSolrConfigHandlerImmutable().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestConfigSetImmutable#testSolrConfigHandlerImmutable().mjava","sourceNew":"  @Test\n  public void testSolrConfigHandlerImmutable() throws Exception {\n    String payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/x', 'class': 'org.apache.solr.handler.DumpRequestHandler' , 'startup' : 'lazy'}\\n\" +\n        \"}\";\n    String uri = \"/config\";\n    String response = restTestHarness.post(uri, SolrTestCaseJ4.json(payload));\n    Map map = (Map) ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNotNull(map.get(\"error\"));\n    assertTrue(map.get(\"error\").toString().contains(\"immutable\"));\n  }\n\n","sourceOld":"  @Test\n  public void testSolrConfigHandlerImmutable() throws Exception {\n    String payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/x', 'class': 'org.apache.solr.handler.DumpRequestHandler' , 'startup' : 'lazy'}\\n\" +\n        \"}\";\n    String uri = \"/config?wt=json\";\n    String response = restTestHarness.post(uri, SolrTestCaseJ4.json(payload));\n    Map map = (Map) ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNotNull(map.get(\"error\"));\n    assertTrue(map.get(\"error\").toString().contains(\"immutable\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3714bcf66a68a1600e9dd11442fc1b33b62ef088","date":1556832005,"type":3,"author":"noble","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestConfigSetImmutable#testSolrConfigHandlerImmutable().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestConfigSetImmutable#testSolrConfigHandlerImmutable().mjava","sourceNew":"  @Test\n  public void testSolrConfigHandlerImmutable() throws Exception {\n    String payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/x', 'class': 'org.apache.solr.handler.DumpRequestHandler' , 'startup' : 'lazy'}\\n\" +\n        \"}\";\n    String uri = \"/config\";\n    String response = restTestHarness.post(uri, SolrTestCaseJ4.json(payload));\n    Map map = (Map) Utils.fromJSONString(response);\n    assertNotNull(map.get(\"error\"));\n    assertTrue(map.get(\"error\").toString().contains(\"immutable\"));\n  }\n\n","sourceOld":"  @Test\n  public void testSolrConfigHandlerImmutable() throws Exception {\n    String payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/x', 'class': 'org.apache.solr.handler.DumpRequestHandler' , 'startup' : 'lazy'}\\n\" +\n        \"}\";\n    String uri = \"/config\";\n    String response = restTestHarness.post(uri, SolrTestCaseJ4.json(payload));\n    Map map = (Map) ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNotNull(map.get(\"error\"));\n    assertTrue(map.get(\"error\").toString().contains(\"immutable\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e98520789adb1d5ad05afb4956eca0944a929688","date":1592430701,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestConfigSetImmutable#testSolrConfigHandlerImmutable().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestConfigSetImmutable#testSolrConfigHandlerImmutable().mjava","sourceNew":"  @Test\n  public void testSolrConfigHandlerImmutable() throws Exception {\n    String payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/x', 'class': 'org.apache.solr.handler.DumpRequestHandler' , 'startup' : 'lazy'}\\n\" +\n        \"}\";\n    String uri = \"/config\";\n    String response = restTestHarness.post(uri, SolrTestCaseJ4.json(payload));\n    @SuppressWarnings({\"rawtypes\"})\n    Map map = (Map) Utils.fromJSONString(response);\n    assertNotNull(map.get(\"error\"));\n    assertTrue(map.get(\"error\").toString().contains(\"immutable\"));\n  }\n\n","sourceOld":"  @Test\n  public void testSolrConfigHandlerImmutable() throws Exception {\n    String payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/x', 'class': 'org.apache.solr.handler.DumpRequestHandler' , 'startup' : 'lazy'}\\n\" +\n        \"}\";\n    String uri = \"/config\";\n    String response = restTestHarness.post(uri, SolrTestCaseJ4.json(payload));\n    Map map = (Map) Utils.fromJSONString(response);\n    assertNotNull(map.get(\"error\"));\n    assertTrue(map.get(\"error\").toString().contains(\"immutable\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6466e433d7f5218e77c8115ed28176855fc3c143":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a52341299179de5479672f7cf518bf4b173f34b3":["6466e433d7f5218e77c8115ed28176855fc3c143","ac1e7fa558287a811ea07634d815ee7b1c541284"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"936cdd5882761db3b844afd6f84ab81cbb011a75":["6466e433d7f5218e77c8115ed28176855fc3c143","ac1e7fa558287a811ea07634d815ee7b1c541284"],"3714bcf66a68a1600e9dd11442fc1b33b62ef088":["a52341299179de5479672f7cf518bf4b173f34b3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e98520789adb1d5ad05afb4956eca0944a929688"],"e98520789adb1d5ad05afb4956eca0944a929688":["3714bcf66a68a1600e9dd11442fc1b33b62ef088"],"ac1e7fa558287a811ea07634d815ee7b1c541284":["6466e433d7f5218e77c8115ed28176855fc3c143"]},"commit2Childs":{"6466e433d7f5218e77c8115ed28176855fc3c143":["a52341299179de5479672f7cf518bf4b173f34b3","936cdd5882761db3b844afd6f84ab81cbb011a75","ac1e7fa558287a811ea07634d815ee7b1c541284"],"a52341299179de5479672f7cf518bf4b173f34b3":["3714bcf66a68a1600e9dd11442fc1b33b62ef088"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6466e433d7f5218e77c8115ed28176855fc3c143"],"936cdd5882761db3b844afd6f84ab81cbb011a75":[],"3714bcf66a68a1600e9dd11442fc1b33b62ef088":["e98520789adb1d5ad05afb4956eca0944a929688"],"ac1e7fa558287a811ea07634d815ee7b1c541284":["a52341299179de5479672f7cf518bf4b173f34b3","936cdd5882761db3b844afd6f84ab81cbb011a75"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"e98520789adb1d5ad05afb4956eca0944a929688":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["936cdd5882761db3b844afd6f84ab81cbb011a75","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}