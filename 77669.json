{"path":"sandbox/contributions/webcrawler-LARM/src/de/lanlab/larm/graph/DistanceCount#printShortestRoute(Node,int,int).mjava","commits":[{"id":"05d36e0b328ec96237035fbcca240e73631396e5","date":1020520725,"type":0,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"sandbox/contributions/webcrawler-LARM/src/de/lanlab/larm/graph/DistanceCount#printShortestRoute(Node,int,int).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Description of the Method\n     *\n     * @param n       Description of the Parameter\n     * @param indent  Description of the Parameter\n     */\n    public void printShortestRoute(Node n, int indent, int linkCount)\n    {\n        String spaces = \"                                                            \".substring(0, indent);\n\n        if (n.getIncoming().isEmpty())\n        {\n            System.out.println(spaces + \"<start>\");\n        }\n        else\n        {\n            System.out.print(spaces + \"+- \" + n.name + \"    (\" + (n.getTitle() != null ? n.getTitle().substring(0,Math.min(n.getTitle().length(),25)) : \"\") + \"\\\")     D:\" + n.distance + \"; L:\" + n.getIncoming().size() + \"; C:\" + linkCount);\n            Iterator it = n.getIncoming().iterator();\n            float dist = n.distance;\n            if (dist > 10000000)\n            {\n                System.out.println(spaces + \"\\n--no link--\");\n                return;\n            }\n            while (it.hasNext())\n            {\n                Transition t = (Transition) it.next();\n                if (t.distance <= dist)\n                {\n                    if (t.isFrame())\n                    {\n                        System.out.println(\" **F** ->\");\n                    }\n                    else\n                    {\n                        System.out.println(\" -> \");\n                    }\n                    printShortestRoute(t.getFrom(), indent + 1, linkCount + n.getIncoming().size());\n                }\n            }\n        }\n        //System.out.println(\"\");\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"21b526e3e9974b2651365fbae52a976e6fc77aa4","date":1022108962,"type":3,"author":"cmarschner","isMerge":false,"pathNew":"sandbox/contributions/webcrawler-LARM/src/de/lanlab/larm/graph/DistanceCount#printShortestRoute(Node,int,int).mjava","pathOld":"sandbox/contributions/webcrawler-LARM/src/de/lanlab/larm/graph/DistanceCount#printShortestRoute(Node,int,int).mjava","sourceNew":"    /**\n     * Description of the Method\n     *\n     * @param n          Description of the Parameter\n     * @param indent     Description of the Parameter\n     * @param linkCount  Description of the Parameter\n     */\n\n    public void printShortestRoute(Node n, int indent, int linkCount)\n    {\n\n        String spaces = \"                                                            \".substring(0, indent);\n\n        if (n.getIncoming().isEmpty())\n        {\n\n            System.out.println(spaces + \"<start>\");\n\n        }\n\n        else\n        {\n\n            System.out.print(spaces + \"+- \" + n.name + \"    (\" + (n.getTitle() != null ? n.getTitle().substring(0, Math.min(n.getTitle().length(), 25)) : \"\") + \"\\\")     D:\" + n.distance + \"; L:\" + n.getIncoming().size() + \"; C:\" + linkCount);\n\n            Iterator it = n.getIncoming().iterator();\n\n            float dist = n.distance;\n\n            if (dist > 10000000)\n            {\n\n                System.out.println(spaces + \"\\n--no link--\");\n\n                return;\n            }\n\n            while (it.hasNext())\n            {\n\n                Transition t = (Transition) it.next();\n\n                if (t.distance <= dist)\n                {\n\n                    if (t.isFrame())\n                    {\n\n                        System.out.println(\" **F** ->\");\n\n                    }\n\n                    else\n                    {\n\n                        System.out.println(\" -> \");\n\n                    }\n\n                    printShortestRoute(t.getFrom(), indent + 1, linkCount + n.getIncoming().size());\n\n                }\n\n            }\n\n        }\n\n        //System.out.println(\"\");\n\n    }\n\n","sourceOld":"    /**\n     * Description of the Method\n     *\n     * @param n       Description of the Parameter\n     * @param indent  Description of the Parameter\n     */\n    public void printShortestRoute(Node n, int indent, int linkCount)\n    {\n        String spaces = \"                                                            \".substring(0, indent);\n\n        if (n.getIncoming().isEmpty())\n        {\n            System.out.println(spaces + \"<start>\");\n        }\n        else\n        {\n            System.out.print(spaces + \"+- \" + n.name + \"    (\" + (n.getTitle() != null ? n.getTitle().substring(0,Math.min(n.getTitle().length(),25)) : \"\") + \"\\\")     D:\" + n.distance + \"; L:\" + n.getIncoming().size() + \"; C:\" + linkCount);\n            Iterator it = n.getIncoming().iterator();\n            float dist = n.distance;\n            if (dist > 10000000)\n            {\n                System.out.println(spaces + \"\\n--no link--\");\n                return;\n            }\n            while (it.hasNext())\n            {\n                Transition t = (Transition) it.next();\n                if (t.distance <= dist)\n                {\n                    if (t.isFrame())\n                    {\n                        System.out.println(\" **F** ->\");\n                    }\n                    else\n                    {\n                        System.out.println(\" -> \");\n                    }\n                    printShortestRoute(t.getFrom(), indent + 1, linkCount + n.getIncoming().size());\n                }\n            }\n        }\n        //System.out.println(\"\");\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"afc16d717d9ed1a8e45371668ca6de674164d624","date":1103345442,"type":4,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"/dev/null","pathOld":"sandbox/contributions/webcrawler-LARM/src/de/lanlab/larm/graph/DistanceCount#printShortestRoute(Node,int,int).mjava","sourceNew":null,"sourceOld":"    /**\n     * Description of the Method\n     *\n     * @param n          Description of the Parameter\n     * @param indent     Description of the Parameter\n     * @param linkCount  Description of the Parameter\n     */\n\n    public void printShortestRoute(Node n, int indent, int linkCount)\n    {\n\n        String spaces = \"                                                            \".substring(0, indent);\n\n        if (n.getIncoming().isEmpty())\n        {\n\n            System.out.println(spaces + \"<start>\");\n\n        }\n\n        else\n        {\n\n            System.out.print(spaces + \"+- \" + n.name + \"    (\" + (n.getTitle() != null ? n.getTitle().substring(0, Math.min(n.getTitle().length(), 25)) : \"\") + \"\\\")     D:\" + n.distance + \"; L:\" + n.getIncoming().size() + \"; C:\" + linkCount);\n\n            Iterator it = n.getIncoming().iterator();\n\n            float dist = n.distance;\n\n            if (dist > 10000000)\n            {\n\n                System.out.println(spaces + \"\\n--no link--\");\n\n                return;\n            }\n\n            while (it.hasNext())\n            {\n\n                Transition t = (Transition) it.next();\n\n                if (t.distance <= dist)\n                {\n\n                    if (t.isFrame())\n                    {\n\n                        System.out.println(\" **F** ->\");\n\n                    }\n\n                    else\n                    {\n\n                        System.out.println(\" -> \");\n\n                    }\n\n                    printShortestRoute(t.getFrom(), indent + 1, linkCount + n.getIncoming().size());\n\n                }\n\n            }\n\n        }\n\n        //System.out.println(\"\");\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"21b526e3e9974b2651365fbae52a976e6fc77aa4":["05d36e0b328ec96237035fbcca240e73631396e5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"afc16d717d9ed1a8e45371668ca6de674164d624":["21b526e3e9974b2651365fbae52a976e6fc77aa4"],"05d36e0b328ec96237035fbcca240e73631396e5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["afc16d717d9ed1a8e45371668ca6de674164d624"]},"commit2Childs":{"21b526e3e9974b2651365fbae52a976e6fc77aa4":["afc16d717d9ed1a8e45371668ca6de674164d624"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["05d36e0b328ec96237035fbcca240e73631396e5"],"afc16d717d9ed1a8e45371668ca6de674164d624":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"05d36e0b328ec96237035fbcca240e73631396e5":["21b526e3e9974b2651365fbae52a976e6fc77aa4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}