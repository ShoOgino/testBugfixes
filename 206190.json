{"path":"contrib/clustering/src/main/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngine#init(NamedList,SolrCore).mjava","commits":[{"id":"3ee70799f6a87a250e98ce10a7bc3e28d41eac23","date":1242826192,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"contrib/clustering/src/main/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngine#init(NamedList,SolrCore).mjava","pathOld":"/dev/null","sourceNew":"\t@Override\n\tpublic String init(NamedList config, final SolrCore core) {\n\t\tString result = super.init(config, core);\n\t\tSolrParams initParams = SolrParams.toSolrParams(config);\n\t\t\n\t\t// Initialize Carrot2 controller. Pass initialization attributes, if any. \n\t\tHashMap<String, Object> initAttributes = new HashMap<String, Object>();\n\t\textractCarrotAttributes(initParams, initAttributes);\n\t\tthis.controller.init(initAttributes);\n\t\t\n\t\tthis.core = core;\n\t\tthis.idFieldName = core.getSchema().getUniqueKeyField().getName();\n\n\t\t// Make sure the requested Carrot2 clustering algorithm class is available \n\t\tString carrotAlgorithmClassName = initParams.get(CarrotParams.ALGORITHM);\n\t\ttry {\n\t\t\tClass<?> algorithmClass = Thread.currentThread().getContextClassLoader()\n\t\t\t\t\t.loadClass(carrotAlgorithmClassName);\n\t\t\tif (!IClusteringAlgorithm.class.isAssignableFrom(algorithmClass)) {\n\t\t\t\tthrow new IllegalArgumentException(\"Class provided as \"\n\t\t\t\t\t\t+ CarrotParams.ALGORITHM + \" must implement \"\n\t\t\t\t\t\t+ IClusteringAlgorithm.class.getName());\n\t\t\t}\n\t\t\tthis.clusteringAlgorithmClass = (Class<? extends IClusteringAlgorithm>) algorithmClass;\n\t\t} catch (ClassNotFoundException e) {\n\t\t\tthrow new RuntimeException(\n\t\t\t\t\t\"Failed to load Carrot clustering algorithm class\", e);\n\t\t}\n\n\t\treturn result;\n\t}\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a2a4e39332de25d2866f373dbf3991a7125b31d","date":1246542679,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"contrib/clustering/src/main/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngine#init(NamedList,SolrCore).mjava","pathOld":"contrib/clustering/src/main/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngine#init(NamedList,SolrCore).mjava","sourceNew":"\t@Override\n\tpublic String init(NamedList config, final SolrCore core) {\n\t\tString result = super.init(config, core);\n\t\tSolrParams initParams = SolrParams.toSolrParams(config);\n\t\t\n\t\t// Initialize Carrot2 controller. Pass initialization attributes, if any. \n\t\tHashMap<String, Object> initAttributes = new HashMap<String, Object>();\n\t\textractCarrotAttributes(initParams, initAttributes);\n\t\tthis.controller.init(initAttributes);\n\t\t\n\t\tthis.idFieldName = core.getSchema().getUniqueKeyField().getName();\n\n\t\t// Make sure the requested Carrot2 clustering algorithm class is available \n\t\tString carrotAlgorithmClassName = initParams.get(CarrotParams.ALGORITHM);\n\t\ttry {\n\t\t\tClass<?> algorithmClass = Thread.currentThread().getContextClassLoader()\n\t\t\t\t\t.loadClass(carrotAlgorithmClassName);\n\t\t\tif (!IClusteringAlgorithm.class.isAssignableFrom(algorithmClass)) {\n\t\t\t\tthrow new IllegalArgumentException(\"Class provided as \"\n\t\t\t\t\t\t+ CarrotParams.ALGORITHM + \" must implement \"\n\t\t\t\t\t\t+ IClusteringAlgorithm.class.getName());\n\t\t\t}\n\t\t\tthis.clusteringAlgorithmClass = (Class<? extends IClusteringAlgorithm>) algorithmClass;\n\t\t} catch (ClassNotFoundException e) {\n\t\t\tthrow new RuntimeException(\n\t\t\t\t\t\"Failed to load Carrot clustering algorithm class\", e);\n\t\t}\n\n\t\treturn result;\n\t}\n\n","sourceOld":"\t@Override\n\tpublic String init(NamedList config, final SolrCore core) {\n\t\tString result = super.init(config, core);\n\t\tSolrParams initParams = SolrParams.toSolrParams(config);\n\t\t\n\t\t// Initialize Carrot2 controller. Pass initialization attributes, if any. \n\t\tHashMap<String, Object> initAttributes = new HashMap<String, Object>();\n\t\textractCarrotAttributes(initParams, initAttributes);\n\t\tthis.controller.init(initAttributes);\n\t\t\n\t\tthis.core = core;\n\t\tthis.idFieldName = core.getSchema().getUniqueKeyField().getName();\n\n\t\t// Make sure the requested Carrot2 clustering algorithm class is available \n\t\tString carrotAlgorithmClassName = initParams.get(CarrotParams.ALGORITHM);\n\t\ttry {\n\t\t\tClass<?> algorithmClass = Thread.currentThread().getContextClassLoader()\n\t\t\t\t\t.loadClass(carrotAlgorithmClassName);\n\t\t\tif (!IClusteringAlgorithm.class.isAssignableFrom(algorithmClass)) {\n\t\t\t\tthrow new IllegalArgumentException(\"Class provided as \"\n\t\t\t\t\t\t+ CarrotParams.ALGORITHM + \" must implement \"\n\t\t\t\t\t\t+ IClusteringAlgorithm.class.getName());\n\t\t\t}\n\t\t\tthis.clusteringAlgorithmClass = (Class<? extends IClusteringAlgorithm>) algorithmClass;\n\t\t} catch (ClassNotFoundException e) {\n\t\t\tthrow new RuntimeException(\n\t\t\t\t\t\"Failed to load Carrot clustering algorithm class\", e);\n\t\t}\n\n\t\treturn result;\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2771e5f68dda632a1044fdfecbc7bffae0a4ea8","date":1246543717,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"contrib/clustering/src/main/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngine#init(NamedList,SolrCore).mjava","pathOld":"contrib/clustering/src/main/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngine#init(NamedList,SolrCore).mjava","sourceNew":"  @Override\n  public String init(NamedList config, final SolrCore core) {\n    String result = super.init(config, core);\n    SolrParams initParams = SolrParams.toSolrParams(config);\n\n    // Initialize Carrot2 controller. Pass initialization attributes, if any.\n    HashMap<String, Object> initAttributes = new HashMap<String, Object>();\n    extractCarrotAttributes(initParams, initAttributes);\n    this.controller.init(initAttributes);\n\n    this.idFieldName = core.getSchema().getUniqueKeyField().getName();\n\n    // Make sure the requested Carrot2 clustering algorithm class is available\n    String carrotAlgorithmClassName = initParams.get(CarrotParams.ALGORITHM);\n    try {\n      Class<?> algorithmClass = Thread.currentThread().getContextClassLoader()\n              .loadClass(carrotAlgorithmClassName);\n      if (!IClusteringAlgorithm.class.isAssignableFrom(algorithmClass)) {\n        throw new IllegalArgumentException(\"Class provided as \"\n                + CarrotParams.ALGORITHM + \" must implement \"\n                + IClusteringAlgorithm.class.getName());\n      }\n      this.clusteringAlgorithmClass = (Class<? extends IClusteringAlgorithm>) algorithmClass;\n    } catch (ClassNotFoundException e) {\n      throw new RuntimeException(\n              \"Failed to load Carrot clustering algorithm class\", e);\n    }\n\n    return result;\n  }\n\n","sourceOld":"\t@Override\n\tpublic String init(NamedList config, final SolrCore core) {\n\t\tString result = super.init(config, core);\n\t\tSolrParams initParams = SolrParams.toSolrParams(config);\n\t\t\n\t\t// Initialize Carrot2 controller. Pass initialization attributes, if any. \n\t\tHashMap<String, Object> initAttributes = new HashMap<String, Object>();\n\t\textractCarrotAttributes(initParams, initAttributes);\n\t\tthis.controller.init(initAttributes);\n\t\t\n\t\tthis.idFieldName = core.getSchema().getUniqueKeyField().getName();\n\n\t\t// Make sure the requested Carrot2 clustering algorithm class is available \n\t\tString carrotAlgorithmClassName = initParams.get(CarrotParams.ALGORITHM);\n\t\ttry {\n\t\t\tClass<?> algorithmClass = Thread.currentThread().getContextClassLoader()\n\t\t\t\t\t.loadClass(carrotAlgorithmClassName);\n\t\t\tif (!IClusteringAlgorithm.class.isAssignableFrom(algorithmClass)) {\n\t\t\t\tthrow new IllegalArgumentException(\"Class provided as \"\n\t\t\t\t\t\t+ CarrotParams.ALGORITHM + \" must implement \"\n\t\t\t\t\t\t+ IClusteringAlgorithm.class.getName());\n\t\t\t}\n\t\t\tthis.clusteringAlgorithmClass = (Class<? extends IClusteringAlgorithm>) algorithmClass;\n\t\t} catch (ClassNotFoundException e) {\n\t\t\tthrow new RuntimeException(\n\t\t\t\t\t\"Failed to load Carrot clustering algorithm class\", e);\n\t\t}\n\n\t\treturn result;\n\t}\n\n","bugFix":null,"bugIntro":["1d586ca4ec276ea1c8b12cef9b9b22017e58e7e1","1d586ca4ec276ea1c8b12cef9b9b22017e58e7e1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fb2f5a311c46bee5adb98d48d7b4227cb7f23cfe","date":1248711649,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"contrib/clustering/src/main/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngine#init(NamedList,SolrCore).mjava","pathOld":"contrib/clustering/src/main/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngine#init(NamedList,SolrCore).mjava","sourceNew":"  @Override\n  public String init(NamedList config, final SolrCore core) {\n    String result = super.init(config, core);\n    SolrParams initParams = SolrParams.toSolrParams(config);\n\n    // Initialize Carrot2 controller. Pass initialization attributes, if any.\n    HashMap<String, Object> initAttributes = new HashMap<String, Object>();\n    extractCarrotAttributes(initParams, initAttributes);\n    this.controller.init(initAttributes);\n\n    this.idFieldName = core.getSchema().getUniqueKeyField().getName();\n\n    // Make sure the requested Carrot2 clustering algorithm class is available\n    String carrotAlgorithmClassName = initParams.get(CarrotParams.ALGORITHM);\n    Class<?> algorithmClass = core.getResourceLoader().findClass(carrotAlgorithmClassName);\n    if (!IClusteringAlgorithm.class.isAssignableFrom(algorithmClass)) {\n      throw new IllegalArgumentException(\"Class provided as \"\n              + CarrotParams.ALGORITHM + \" must implement \"\n              + IClusteringAlgorithm.class.getName());\n    }\n    this.clusteringAlgorithmClass = (Class<? extends IClusteringAlgorithm>) algorithmClass;\n\n    return result;\n  }\n\n","sourceOld":"  @Override\n  public String init(NamedList config, final SolrCore core) {\n    String result = super.init(config, core);\n    SolrParams initParams = SolrParams.toSolrParams(config);\n\n    // Initialize Carrot2 controller. Pass initialization attributes, if any.\n    HashMap<String, Object> initAttributes = new HashMap<String, Object>();\n    extractCarrotAttributes(initParams, initAttributes);\n    this.controller.init(initAttributes);\n\n    this.idFieldName = core.getSchema().getUniqueKeyField().getName();\n\n    // Make sure the requested Carrot2 clustering algorithm class is available\n    String carrotAlgorithmClassName = initParams.get(CarrotParams.ALGORITHM);\n    try {\n      Class<?> algorithmClass = Thread.currentThread().getContextClassLoader()\n              .loadClass(carrotAlgorithmClassName);\n      if (!IClusteringAlgorithm.class.isAssignableFrom(algorithmClass)) {\n        throw new IllegalArgumentException(\"Class provided as \"\n                + CarrotParams.ALGORITHM + \" must implement \"\n                + IClusteringAlgorithm.class.getName());\n      }\n      this.clusteringAlgorithmClass = (Class<? extends IClusteringAlgorithm>) algorithmClass;\n    } catch (ClassNotFoundException e) {\n      throw new RuntimeException(\n              \"Failed to load Carrot clustering algorithm class\", e);\n    }\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/contrib/clustering/src/main/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngine#init(NamedList,SolrCore).mjava","pathOld":"contrib/clustering/src/main/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngine#init(NamedList,SolrCore).mjava","sourceNew":"  @Override\n  public String init(NamedList config, final SolrCore core) {\n    String result = super.init(config, core);\n    SolrParams initParams = SolrParams.toSolrParams(config);\n\n    // Initialize Carrot2 controller. Pass initialization attributes, if any.\n    HashMap<String, Object> initAttributes = new HashMap<String, Object>();\n    extractCarrotAttributes(initParams, initAttributes);\n    this.controller.init(initAttributes);\n\n    this.idFieldName = core.getSchema().getUniqueKeyField().getName();\n\n    // Make sure the requested Carrot2 clustering algorithm class is available\n    String carrotAlgorithmClassName = initParams.get(CarrotParams.ALGORITHM);\n    Class<?> algorithmClass = core.getResourceLoader().findClass(carrotAlgorithmClassName);\n    if (!IClusteringAlgorithm.class.isAssignableFrom(algorithmClass)) {\n      throw new IllegalArgumentException(\"Class provided as \"\n              + CarrotParams.ALGORITHM + \" must implement \"\n              + IClusteringAlgorithm.class.getName());\n    }\n    this.clusteringAlgorithmClass = (Class<? extends IClusteringAlgorithm>) algorithmClass;\n\n    return result;\n  }\n\n","sourceOld":"  @Override\n  public String init(NamedList config, final SolrCore core) {\n    String result = super.init(config, core);\n    SolrParams initParams = SolrParams.toSolrParams(config);\n\n    // Initialize Carrot2 controller. Pass initialization attributes, if any.\n    HashMap<String, Object> initAttributes = new HashMap<String, Object>();\n    extractCarrotAttributes(initParams, initAttributes);\n    this.controller.init(initAttributes);\n\n    this.idFieldName = core.getSchema().getUniqueKeyField().getName();\n\n    // Make sure the requested Carrot2 clustering algorithm class is available\n    String carrotAlgorithmClassName = initParams.get(CarrotParams.ALGORITHM);\n    Class<?> algorithmClass = core.getResourceLoader().findClass(carrotAlgorithmClassName);\n    if (!IClusteringAlgorithm.class.isAssignableFrom(algorithmClass)) {\n      throw new IllegalArgumentException(\"Class provided as \"\n              + CarrotParams.ALGORITHM + \" must implement \"\n              + IClusteringAlgorithm.class.getName());\n    }\n    this.clusteringAlgorithmClass = (Class<? extends IClusteringAlgorithm>) algorithmClass;\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"0a2a4e39332de25d2866f373dbf3991a7125b31d":["3ee70799f6a87a250e98ce10a7bc3e28d41eac23"],"3ee70799f6a87a250e98ce10a7bc3e28d41eac23":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d2771e5f68dda632a1044fdfecbc7bffae0a4ea8":["0a2a4e39332de25d2866f373dbf3991a7125b31d"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["fb2f5a311c46bee5adb98d48d7b4227cb7f23cfe"],"fb2f5a311c46bee5adb98d48d7b4227cb7f23cfe":["d2771e5f68dda632a1044fdfecbc7bffae0a4ea8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"0a2a4e39332de25d2866f373dbf3991a7125b31d":["d2771e5f68dda632a1044fdfecbc7bffae0a4ea8"],"3ee70799f6a87a250e98ce10a7bc3e28d41eac23":["0a2a4e39332de25d2866f373dbf3991a7125b31d"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["3ee70799f6a87a250e98ce10a7bc3e28d41eac23"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d2771e5f68dda632a1044fdfecbc7bffae0a4ea8":["fb2f5a311c46bee5adb98d48d7b4227cb7f23cfe"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"fb2f5a311c46bee5adb98d48d7b4227cb7f23cfe":["ad94625fb8d088209f46650c8097196fec67f00c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}