{"path":"solr/core/src/test/org/apache/solr/handler/DocumentAnalysisRequestHandlerTest#testCharsetInDocument().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/DocumentAnalysisRequestHandlerTest#testCharsetInDocument().mjava","pathOld":"solr/src/test/org/apache/solr/handler/DocumentAnalysisRequestHandlerTest#testCharsetInDocument().mjava","sourceNew":"  // This test should also test charset detection in UpdateRequestHandler,\n  // but the DocumentAnalysisRequestHandler is simplier to use/check.\n  @Test\n  public void testCharsetInDocument() throws Exception {\n    final byte[] xmlBytes = (\n      \"<?xml version=\\\"1.0\\\" encoding=\\\"ISO-8859-1\\\"?>\\r\\n\" +\n      \"<docs>\\r\\n\" +\n      \" <doc>\\r\\n\" +\n      \"  <field name=\\\"id\\\">Müller</field>\\r\\n\" +\n      \" </doc>\" +\n      \"</docs>\"\n    ).getBytes(\"ISO-8859-1\");\n    \n    // we declare a content stream without charset:\n    final ContentStream cs = new ByteStream(xmlBytes, \"application/xml\");\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();\n    SolrQueryRequest req = new SolrQueryRequestBase(h.getCore(), params) {\n      @Override\n      public Iterable<ContentStream> getContentStreams() {\n        return Collections.singleton(cs);\n      }\n    };\n\n    DocumentAnalysisRequest request = handler.resolveAnalysisRequest(req);\n    assertNotNull(request);\n    final List<SolrInputDocument> documents = request.getDocuments();\n    assertNotNull(documents);\n    assertEquals(1, documents.size());\n    SolrInputDocument doc = documents.get(0);\n    assertEquals(\"Müller\", doc.getField(\"id\").getValue());\n  }\n\n","sourceOld":"  // This test should also test charset detection in UpdateRequestHandler,\n  // but the DocumentAnalysisRequestHandler is simplier to use/check.\n  @Test\n  public void testCharsetInDocument() throws Exception {\n    final byte[] xmlBytes = (\n      \"<?xml version=\\\"1.0\\\" encoding=\\\"ISO-8859-1\\\"?>\\r\\n\" +\n      \"<docs>\\r\\n\" +\n      \" <doc>\\r\\n\" +\n      \"  <field name=\\\"id\\\">Müller</field>\\r\\n\" +\n      \" </doc>\" +\n      \"</docs>\"\n    ).getBytes(\"ISO-8859-1\");\n    \n    // we declare a content stream without charset:\n    final ContentStream cs = new ByteStream(xmlBytes, \"application/xml\");\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();\n    SolrQueryRequest req = new SolrQueryRequestBase(h.getCore(), params) {\n      @Override\n      public Iterable<ContentStream> getContentStreams() {\n        return Collections.singleton(cs);\n      }\n    };\n\n    DocumentAnalysisRequest request = handler.resolveAnalysisRequest(req);\n    assertNotNull(request);\n    final List<SolrInputDocument> documents = request.getDocuments();\n    assertNotNull(documents);\n    assertEquals(1, documents.size());\n    SolrInputDocument doc = documents.get(0);\n    assertEquals(\"Müller\", doc.getField(\"id\").getValue());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/DocumentAnalysisRequestHandlerTest#testCharsetInDocument().mjava","pathOld":"solr/src/test/org/apache/solr/handler/DocumentAnalysisRequestHandlerTest#testCharsetInDocument().mjava","sourceNew":"  // This test should also test charset detection in UpdateRequestHandler,\n  // but the DocumentAnalysisRequestHandler is simplier to use/check.\n  @Test\n  public void testCharsetInDocument() throws Exception {\n    final byte[] xmlBytes = (\n      \"<?xml version=\\\"1.0\\\" encoding=\\\"ISO-8859-1\\\"?>\\r\\n\" +\n      \"<docs>\\r\\n\" +\n      \" <doc>\\r\\n\" +\n      \"  <field name=\\\"id\\\">Müller</field>\\r\\n\" +\n      \" </doc>\" +\n      \"</docs>\"\n    ).getBytes(\"ISO-8859-1\");\n    \n    // we declare a content stream without charset:\n    final ContentStream cs = new ByteStream(xmlBytes, \"application/xml\");\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();\n    SolrQueryRequest req = new SolrQueryRequestBase(h.getCore(), params) {\n      @Override\n      public Iterable<ContentStream> getContentStreams() {\n        return Collections.singleton(cs);\n      }\n    };\n\n    DocumentAnalysisRequest request = handler.resolveAnalysisRequest(req);\n    assertNotNull(request);\n    final List<SolrInputDocument> documents = request.getDocuments();\n    assertNotNull(documents);\n    assertEquals(1, documents.size());\n    SolrInputDocument doc = documents.get(0);\n    assertEquals(\"Müller\", doc.getField(\"id\").getValue());\n  }\n\n","sourceOld":"  // This test should also test charset detection in UpdateRequestHandler,\n  // but the DocumentAnalysisRequestHandler is simplier to use/check.\n  @Test\n  public void testCharsetInDocument() throws Exception {\n    final byte[] xmlBytes = (\n      \"<?xml version=\\\"1.0\\\" encoding=\\\"ISO-8859-1\\\"?>\\r\\n\" +\n      \"<docs>\\r\\n\" +\n      \" <doc>\\r\\n\" +\n      \"  <field name=\\\"id\\\">Müller</field>\\r\\n\" +\n      \" </doc>\" +\n      \"</docs>\"\n    ).getBytes(\"ISO-8859-1\");\n    \n    // we declare a content stream without charset:\n    final ContentStream cs = new ByteStream(xmlBytes, \"application/xml\");\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();\n    SolrQueryRequest req = new SolrQueryRequestBase(h.getCore(), params) {\n      @Override\n      public Iterable<ContentStream> getContentStreams() {\n        return Collections.singleton(cs);\n      }\n    };\n\n    DocumentAnalysisRequest request = handler.resolveAnalysisRequest(req);\n    assertNotNull(request);\n    final List<SolrInputDocument> documents = request.getDocuments();\n    assertNotNull(documents);\n    assertEquals(1, documents.size());\n    SolrInputDocument doc = documents.get(0);\n    assertEquals(\"Müller\", doc.getField(\"id\").getValue());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/DocumentAnalysisRequestHandlerTest#testCharsetInDocument().mjava","pathOld":"solr/src/test/org/apache/solr/handler/DocumentAnalysisRequestHandlerTest#testCharsetInDocument().mjava","sourceNew":"  // This test should also test charset detection in UpdateRequestHandler,\n  // but the DocumentAnalysisRequestHandler is simplier to use/check.\n  @Test\n  public void testCharsetInDocument() throws Exception {\n    final byte[] xmlBytes = (\n      \"<?xml version=\\\"1.0\\\" encoding=\\\"ISO-8859-1\\\"?>\\r\\n\" +\n      \"<docs>\\r\\n\" +\n      \" <doc>\\r\\n\" +\n      \"  <field name=\\\"id\\\">Müller</field>\\r\\n\" +\n      \" </doc>\" +\n      \"</docs>\"\n    ).getBytes(\"ISO-8859-1\");\n    \n    // we declare a content stream without charset:\n    final ContentStream cs = new ByteStream(xmlBytes, \"application/xml\");\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();\n    SolrQueryRequest req = new SolrQueryRequestBase(h.getCore(), params) {\n      @Override\n      public Iterable<ContentStream> getContentStreams() {\n        return Collections.singleton(cs);\n      }\n    };\n\n    DocumentAnalysisRequest request = handler.resolveAnalysisRequest(req);\n    assertNotNull(request);\n    final List<SolrInputDocument> documents = request.getDocuments();\n    assertNotNull(documents);\n    assertEquals(1, documents.size());\n    SolrInputDocument doc = documents.get(0);\n    assertEquals(\"Müller\", doc.getField(\"id\").getValue());\n  }\n\n","sourceOld":"  // This test should also test charset detection in UpdateRequestHandler,\n  // but the DocumentAnalysisRequestHandler is simplier to use/check.\n  @Test\n  public void testCharsetInDocument() throws Exception {\n    final byte[] xmlBytes = (\n      \"<?xml version=\\\"1.0\\\" encoding=\\\"ISO-8859-1\\\"?>\\r\\n\" +\n      \"<docs>\\r\\n\" +\n      \" <doc>\\r\\n\" +\n      \"  <field name=\\\"id\\\">Müller</field>\\r\\n\" +\n      \" </doc>\" +\n      \"</docs>\"\n    ).getBytes(\"ISO-8859-1\");\n    \n    // we declare a content stream without charset:\n    final ContentStream cs = new ByteStream(xmlBytes, \"application/xml\");\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();\n    SolrQueryRequest req = new SolrQueryRequestBase(h.getCore(), params) {\n      @Override\n      public Iterable<ContentStream> getContentStreams() {\n        return Collections.singleton(cs);\n      }\n    };\n\n    DocumentAnalysisRequest request = handler.resolveAnalysisRequest(req);\n    assertNotNull(request);\n    final List<SolrInputDocument> documents = request.getDocuments();\n    assertNotNull(documents);\n    assertEquals(1, documents.size());\n    SolrInputDocument doc = documents.get(0);\n    assertEquals(\"Müller\", doc.getField(\"id\").getValue());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7d89d7e4e5101347833eea558851bf4209218619","date":1396265641,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/DocumentAnalysisRequestHandlerTest#testCharsetInDocument().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/DocumentAnalysisRequestHandlerTest#testCharsetInDocument().mjava","sourceNew":"  // This test should also test charset detection in UpdateRequestHandler,\n  // but the DocumentAnalysisRequestHandler is simplier to use/check.\n  @Test\n  public void testCharsetInDocument() throws Exception {\n    final byte[] xmlBytes = (\n      \"<?xml version=\\\"1.0\\\" encoding=\\\"ISO-8859-1\\\"?>\\r\\n\" +\n      \"<docs>\\r\\n\" +\n      \" <doc>\\r\\n\" +\n      \"  <field name=\\\"id\\\">Müller</field>\\r\\n\" +\n      \" </doc>\" +\n      \"</docs>\"\n    ).getBytes(StandardCharsets.ISO_8859_1);\n    \n    // we declare a content stream without charset:\n    final ContentStream cs = new ByteStream(xmlBytes, \"application/xml\");\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();\n    SolrQueryRequest req = new SolrQueryRequestBase(h.getCore(), params) {\n      @Override\n      public Iterable<ContentStream> getContentStreams() {\n        return Collections.singleton(cs);\n      }\n    };\n\n    DocumentAnalysisRequest request = handler.resolveAnalysisRequest(req);\n    assertNotNull(request);\n    final List<SolrInputDocument> documents = request.getDocuments();\n    assertNotNull(documents);\n    assertEquals(1, documents.size());\n    SolrInputDocument doc = documents.get(0);\n    assertEquals(\"Müller\", doc.getField(\"id\").getValue());\n  }\n\n","sourceOld":"  // This test should also test charset detection in UpdateRequestHandler,\n  // but the DocumentAnalysisRequestHandler is simplier to use/check.\n  @Test\n  public void testCharsetInDocument() throws Exception {\n    final byte[] xmlBytes = (\n      \"<?xml version=\\\"1.0\\\" encoding=\\\"ISO-8859-1\\\"?>\\r\\n\" +\n      \"<docs>\\r\\n\" +\n      \" <doc>\\r\\n\" +\n      \"  <field name=\\\"id\\\">Müller</field>\\r\\n\" +\n      \" </doc>\" +\n      \"</docs>\"\n    ).getBytes(\"ISO-8859-1\");\n    \n    // we declare a content stream without charset:\n    final ContentStream cs = new ByteStream(xmlBytes, \"application/xml\");\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();\n    SolrQueryRequest req = new SolrQueryRequestBase(h.getCore(), params) {\n      @Override\n      public Iterable<ContentStream> getContentStreams() {\n        return Collections.singleton(cs);\n      }\n    };\n\n    DocumentAnalysisRequest request = handler.resolveAnalysisRequest(req);\n    assertNotNull(request);\n    final List<SolrInputDocument> documents = request.getDocuments();\n    assertNotNull(documents);\n    assertEquals(1, documents.size());\n    SolrInputDocument doc = documents.get(0);\n    assertEquals(\"Müller\", doc.getField(\"id\").getValue());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/DocumentAnalysisRequestHandlerTest#testCharsetInDocument().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/DocumentAnalysisRequestHandlerTest#testCharsetInDocument().mjava","sourceNew":"  // This test should also test charset detection in UpdateRequestHandler,\n  // but the DocumentAnalysisRequestHandler is simplier to use/check.\n  @Test\n  public void testCharsetInDocument() throws Exception {\n    final byte[] xmlBytes = (\n      \"<?xml version=\\\"1.0\\\" encoding=\\\"ISO-8859-1\\\"?>\\r\\n\" +\n      \"<docs>\\r\\n\" +\n      \" <doc>\\r\\n\" +\n      \"  <field name=\\\"id\\\">Müller</field>\\r\\n\" +\n      \" </doc>\" +\n      \"</docs>\"\n    ).getBytes(StandardCharsets.ISO_8859_1);\n    \n    // we declare a content stream without charset:\n    final ContentStream cs = new ByteStream(xmlBytes, \"application/xml\");\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();\n    SolrQueryRequest req = new SolrQueryRequestBase(h.getCore(), params) {\n      @Override\n      public Iterable<ContentStream> getContentStreams() {\n        return Collections.singleton(cs);\n      }\n    };\n\n    DocumentAnalysisRequest request = handler.resolveAnalysisRequest(req);\n    assertNotNull(request);\n    final List<SolrInputDocument> documents = request.getDocuments();\n    assertNotNull(documents);\n    assertEquals(1, documents.size());\n    SolrInputDocument doc = documents.get(0);\n    assertEquals(\"Müller\", doc.getField(\"id\").getValue());\n  }\n\n","sourceOld":"  // This test should also test charset detection in UpdateRequestHandler,\n  // but the DocumentAnalysisRequestHandler is simplier to use/check.\n  @Test\n  public void testCharsetInDocument() throws Exception {\n    final byte[] xmlBytes = (\n      \"<?xml version=\\\"1.0\\\" encoding=\\\"ISO-8859-1\\\"?>\\r\\n\" +\n      \"<docs>\\r\\n\" +\n      \" <doc>\\r\\n\" +\n      \"  <field name=\\\"id\\\">Müller</field>\\r\\n\" +\n      \" </doc>\" +\n      \"</docs>\"\n    ).getBytes(\"ISO-8859-1\");\n    \n    // we declare a content stream without charset:\n    final ContentStream cs = new ByteStream(xmlBytes, \"application/xml\");\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();\n    SolrQueryRequest req = new SolrQueryRequestBase(h.getCore(), params) {\n      @Override\n      public Iterable<ContentStream> getContentStreams() {\n        return Collections.singleton(cs);\n      }\n    };\n\n    DocumentAnalysisRequest request = handler.resolveAnalysisRequest(req);\n    assertNotNull(request);\n    final List<SolrInputDocument> documents = request.getDocuments();\n    assertNotNull(documents);\n    assertEquals(1, documents.size());\n    SolrInputDocument doc = documents.get(0);\n    assertEquals(\"Müller\", doc.getField(\"id\").getValue());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5eb2511ababf862ea11e10761c70ee560cd84510":["c26f00b574427b55127e869b935845554afde1fa","7d89d7e4e5101347833eea558851bf4209218619"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7d89d7e4e5101347833eea558851bf4209218619":["c26f00b574427b55127e869b935845554afde1fa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7d89d7e4e5101347833eea558851bf4209218619"]},"commit2Childs":{"5eb2511ababf862ea11e10761c70ee560cd84510":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["5eb2511ababf862ea11e10761c70ee560cd84510","7d89d7e4e5101347833eea558851bf4209218619"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"7d89d7e4e5101347833eea558851bf4209218619":["5eb2511ababf862ea11e10761c70ee560cd84510","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}