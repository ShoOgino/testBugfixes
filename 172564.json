{"path":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionConfigSetProcessorTest#testTemplate(Integer,Integer,CreateNodeListOptions,Integer,Integer,Integer,boolean).mjava","commits":[{"id":"2209af2c265d2258ec4b29c8cc78622d36994a15","date":1440641916,"type":1,"author":"Gregory Chanan","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionConfigSetProcessorTest#testTemplate(Integer,Integer,CreateNodeListOptions,Integer,Integer,Integer,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionProcessorTest#testTemplate(Integer,Integer,CreateNodeListOptions,Integer,Integer,Integer,boolean).mjava","sourceNew":"  protected void testTemplate(Integer numberOfNodes, Integer numberOfNodesToCreateOn, CreateNodeListOptions createNodeListOption, Integer replicationFactor,\n      Integer numberOfSlices, Integer maxShardsPerNode,\n      boolean collectionExceptedToBeCreated) throws Exception {\n    assertTrue(\"Wrong usage of testTemplate. numberOfNodesToCreateOn \" + numberOfNodesToCreateOn + \" is not allowed to be higher than numberOfNodes \" + numberOfNodes, numberOfNodes.intValue() >= numberOfNodesToCreateOn.intValue());\n    assertTrue(\"Wrong usage of testTemplage. createNodeListOption has to be \" + CreateNodeListOptions.SEND + \" when numberOfNodes and numberOfNodesToCreateOn are unequal\", ((createNodeListOption == CreateNodeListOptions.SEND) || (numberOfNodes.intValue() == numberOfNodesToCreateOn.intValue())));\n    \n    Set<String> liveNodes = commonMocks(numberOfNodes);\n    List<String> createNodeList = new ArrayList<>();\n    int i = 0;\n    for (String node : liveNodes) {\n      if (i++ < numberOfNodesToCreateOn) {\n        createNodeList.add(node);\n      }\n    }\n    \n    if (random().nextBoolean()) Collections.shuffle(createNodeList, OverseerCollectionMessageHandler.RANDOM);\n    \n    List<SubmitCapture> submitCaptures = null;\n    if (collectionExceptedToBeCreated) {\n      submitCaptures = mockShardHandlerForCreateJob(numberOfSlices,\n          replicationFactor);\n    }\n    \n    replay(workQueueMock);\n    replay(solrZkClientMock);\n    replay(zkStateReaderMock);\n    replay(clusterStateMock);\n    replay(shardHandlerFactoryMock);\n    replay(shardHandlerMock);\n\n\n    log.info(\"clusterstate \" + clusterStateMock.hashCode());\n\n    startComponentUnderTest();\n    \n    final List<String> createNodeListToSend = ((createNodeListOption != CreateNodeListOptions.SEND_NULL) ? createNodeList : null);\n    final boolean sendCreateNodeList = (createNodeListOption != CreateNodeListOptions.DONT_SEND);\n    final boolean dontShuffleCreateNodeSet = (createNodeListToSend != null) && sendCreateNodeList && random().nextBoolean();\n    issueCreateJob(numberOfSlices, replicationFactor, maxShardsPerNode, createNodeListToSend, sendCreateNodeList, !dontShuffleCreateNodeSet);\n    waitForEmptyQueue(10000);\n    \n    if (collectionExceptedToBeCreated) {\n      assertNotNull(lastProcessMessageResult.getResponse().toString(), lastProcessMessageResult);\n    }\n    verify(shardHandlerFactoryMock);\n    verify(shardHandlerMock);\n\n    if (collectionExceptedToBeCreated) {\n      verifySubmitCaptures(submitCaptures, numberOfSlices, replicationFactor,\n          createNodeList, dontShuffleCreateNodeSet);\n    }\n  }\n\n","sourceOld":"  protected void testTemplate(Integer numberOfNodes, Integer numberOfNodesToCreateOn, CreateNodeListOptions createNodeListOption, Integer replicationFactor,\n      Integer numberOfSlices, Integer maxShardsPerNode,\n      boolean collectionExceptedToBeCreated) throws Exception {\n    assertTrue(\"Wrong usage of testTemplate. numberOfNodesToCreateOn \" + numberOfNodesToCreateOn + \" is not allowed to be higher than numberOfNodes \" + numberOfNodes, numberOfNodes.intValue() >= numberOfNodesToCreateOn.intValue());\n    assertTrue(\"Wrong usage of testTemplage. createNodeListOption has to be \" + CreateNodeListOptions.SEND + \" when numberOfNodes and numberOfNodesToCreateOn are unequal\", ((createNodeListOption == CreateNodeListOptions.SEND) || (numberOfNodes.intValue() == numberOfNodesToCreateOn.intValue())));\n    \n    Set<String> liveNodes = commonMocks(numberOfNodes);\n    List<String> createNodeList = new ArrayList<>();\n    int i = 0;\n    for (String node : liveNodes) {\n      if (i++ < numberOfNodesToCreateOn) {\n        createNodeList.add(node);\n      }\n    }\n    \n    if (random().nextBoolean()) Collections.shuffle(createNodeList, OverseerCollectionMessageHandler.RANDOM);\n    \n    List<SubmitCapture> submitCaptures = null;\n    if (collectionExceptedToBeCreated) {\n      submitCaptures = mockShardHandlerForCreateJob(numberOfSlices,\n          replicationFactor);\n    }\n    \n    replay(workQueueMock);\n    replay(solrZkClientMock);\n    replay(zkStateReaderMock);\n    replay(clusterStateMock);\n    replay(shardHandlerFactoryMock);\n    replay(shardHandlerMock);\n\n\n    log.info(\"clusterstate \" + clusterStateMock.hashCode());\n\n    startComponentUnderTest();\n    \n    final List<String> createNodeListToSend = ((createNodeListOption != CreateNodeListOptions.SEND_NULL) ? createNodeList : null);\n    final boolean sendCreateNodeList = (createNodeListOption != CreateNodeListOptions.DONT_SEND);\n    final boolean dontShuffleCreateNodeSet = (createNodeListToSend != null) && sendCreateNodeList && random().nextBoolean();\n    issueCreateJob(numberOfSlices, replicationFactor, maxShardsPerNode, createNodeListToSend, sendCreateNodeList, !dontShuffleCreateNodeSet);\n    waitForEmptyQueue(10000);\n    \n    if (collectionExceptedToBeCreated) {\n      assertNotNull(lastProcessMessageResult.getResponse().toString(), lastProcessMessageResult);\n    }\n    verify(shardHandlerFactoryMock);\n    verify(shardHandlerMock);\n\n    if (collectionExceptedToBeCreated) {\n      verifySubmitCaptures(submitCaptures, numberOfSlices, replicationFactor,\n          createNodeList, dontShuffleCreateNodeSet);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f291d2d430e8149d24fdd06b0bcdab0941ec9144","date":1481216635,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionConfigSetProcessorTest#testTemplate(Integer,Integer,CreateNodeListOptions,Integer,Integer,Integer,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionConfigSetProcessorTest#testTemplate(Integer,Integer,CreateNodeListOptions,Integer,Integer,Integer,boolean).mjava","sourceNew":"  protected void testTemplate(Integer numberOfNodes, Integer numberOfNodesToCreateOn, CreateNodeListOptions createNodeListOption, Integer replicationFactor,\n      Integer numberOfSlices, Integer maxShardsPerNode,\n      boolean collectionExceptedToBeCreated) throws Exception {\n    assertTrue(\"Wrong usage of testTemplate. numberOfNodesToCreateOn \" + numberOfNodesToCreateOn + \" is not allowed to be higher than numberOfNodes \" + numberOfNodes, numberOfNodes.intValue() >= numberOfNodesToCreateOn.intValue());\n    assertTrue(\"Wrong usage of testTemplage. createNodeListOption has to be \" + CreateNodeListOptions.SEND + \" when numberOfNodes and numberOfNodesToCreateOn are unequal\", ((createNodeListOption == CreateNodeListOptions.SEND) || (numberOfNodes.intValue() == numberOfNodesToCreateOn.intValue())));\n    \n    Set<String> liveNodes = commonMocks(numberOfNodes);\n    List<String> createNodeList = new ArrayList<>();\n    int i = 0;\n    for (String node : liveNodes) {\n      if (i++ < numberOfNodesToCreateOn) {\n        createNodeList.add(node);\n      }\n    }\n    \n    if (random().nextBoolean()) Collections.shuffle(createNodeList, OverseerCollectionMessageHandler.RANDOM);\n    \n    List<SubmitCapture> submitCaptures = null;\n    if (collectionExceptedToBeCreated) {\n      submitCaptures = mockShardHandlerForCreateJob(numberOfSlices,\n          replicationFactor);\n    }\n    \n    replay(solrZkClientMock);\n    replay(zkStateReaderMock);\n    replay(workQueueMock);\n    replay(clusterStateMock);\n    replay(shardHandlerFactoryMock);\n    replay(shardHandlerMock);\n    \n    \n    underTest = new OverseerCollectionConfigSetProcessorToBeTested(zkStateReaderMock,\n        \"1234\", shardHandlerFactoryMock, ADMIN_PATH, workQueueMock, runningMapMock,\n        completedMapMock, failureMapMock);\n\n\n    log.info(\"clusterstate \" + clusterStateMock.hashCode());\n\n    startComponentUnderTest();\n    \n    final List<String> createNodeListToSend = ((createNodeListOption != CreateNodeListOptions.SEND_NULL) ? createNodeList : null);\n    final boolean sendCreateNodeList = (createNodeListOption != CreateNodeListOptions.DONT_SEND);\n    final boolean dontShuffleCreateNodeSet = (createNodeListToSend != null) && sendCreateNodeList && random().nextBoolean();\n    issueCreateJob(numberOfSlices, replicationFactor, maxShardsPerNode, createNodeListToSend, sendCreateNodeList, !dontShuffleCreateNodeSet);\n    waitForEmptyQueue(10000);\n    \n    if (collectionExceptedToBeCreated) {\n      assertNotNull(lastProcessMessageResult.getResponse().toString(), lastProcessMessageResult);\n    }\n    verify(shardHandlerFactoryMock);\n    verify(shardHandlerMock);\n\n    if (collectionExceptedToBeCreated) {\n      verifySubmitCaptures(submitCaptures, numberOfSlices, replicationFactor,\n          createNodeList, dontShuffleCreateNodeSet);\n    }\n  }\n\n","sourceOld":"  protected void testTemplate(Integer numberOfNodes, Integer numberOfNodesToCreateOn, CreateNodeListOptions createNodeListOption, Integer replicationFactor,\n      Integer numberOfSlices, Integer maxShardsPerNode,\n      boolean collectionExceptedToBeCreated) throws Exception {\n    assertTrue(\"Wrong usage of testTemplate. numberOfNodesToCreateOn \" + numberOfNodesToCreateOn + \" is not allowed to be higher than numberOfNodes \" + numberOfNodes, numberOfNodes.intValue() >= numberOfNodesToCreateOn.intValue());\n    assertTrue(\"Wrong usage of testTemplage. createNodeListOption has to be \" + CreateNodeListOptions.SEND + \" when numberOfNodes and numberOfNodesToCreateOn are unequal\", ((createNodeListOption == CreateNodeListOptions.SEND) || (numberOfNodes.intValue() == numberOfNodesToCreateOn.intValue())));\n    \n    Set<String> liveNodes = commonMocks(numberOfNodes);\n    List<String> createNodeList = new ArrayList<>();\n    int i = 0;\n    for (String node : liveNodes) {\n      if (i++ < numberOfNodesToCreateOn) {\n        createNodeList.add(node);\n      }\n    }\n    \n    if (random().nextBoolean()) Collections.shuffle(createNodeList, OverseerCollectionMessageHandler.RANDOM);\n    \n    List<SubmitCapture> submitCaptures = null;\n    if (collectionExceptedToBeCreated) {\n      submitCaptures = mockShardHandlerForCreateJob(numberOfSlices,\n          replicationFactor);\n    }\n    \n    replay(workQueueMock);\n    replay(solrZkClientMock);\n    replay(zkStateReaderMock);\n    replay(clusterStateMock);\n    replay(shardHandlerFactoryMock);\n    replay(shardHandlerMock);\n\n\n    log.info(\"clusterstate \" + clusterStateMock.hashCode());\n\n    startComponentUnderTest();\n    \n    final List<String> createNodeListToSend = ((createNodeListOption != CreateNodeListOptions.SEND_NULL) ? createNodeList : null);\n    final boolean sendCreateNodeList = (createNodeListOption != CreateNodeListOptions.DONT_SEND);\n    final boolean dontShuffleCreateNodeSet = (createNodeListToSend != null) && sendCreateNodeList && random().nextBoolean();\n    issueCreateJob(numberOfSlices, replicationFactor, maxShardsPerNode, createNodeListToSend, sendCreateNodeList, !dontShuffleCreateNodeSet);\n    waitForEmptyQueue(10000);\n    \n    if (collectionExceptedToBeCreated) {\n      assertNotNull(lastProcessMessageResult.getResponse().toString(), lastProcessMessageResult);\n    }\n    verify(shardHandlerFactoryMock);\n    verify(shardHandlerMock);\n\n    if (collectionExceptedToBeCreated) {\n      verifySubmitCaptures(submitCaptures, numberOfSlices, replicationFactor,\n          createNodeList, dontShuffleCreateNodeSet);\n    }\n  }\n\n","bugFix":["9a57adc9bfabbc207ed17740dd86e0a2401ea385"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9856095f7afb5a607bf5e65077615ed91273508c","date":1481837697,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionConfigSetProcessorTest#testTemplate(Integer,Integer,CreateNodeListOptions,Integer,Integer,Integer,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionConfigSetProcessorTest#testTemplate(Integer,Integer,CreateNodeListOptions,Integer,Integer,Integer,boolean).mjava","sourceNew":"  protected void testTemplate(Integer numberOfNodes, Integer numberOfNodesToCreateOn, CreateNodeListOptions createNodeListOption, Integer replicationFactor,\n      Integer numberOfSlices, Integer maxShardsPerNode,\n      boolean collectionExceptedToBeCreated) throws Exception {\n    assertTrue(\"Wrong usage of testTemplate. numberOfNodesToCreateOn \" + numberOfNodesToCreateOn + \" is not allowed to be higher than numberOfNodes \" + numberOfNodes, numberOfNodes.intValue() >= numberOfNodesToCreateOn.intValue());\n    assertTrue(\"Wrong usage of testTemplage. createNodeListOption has to be \" + CreateNodeListOptions.SEND + \" when numberOfNodes and numberOfNodesToCreateOn are unequal\", ((createNodeListOption == CreateNodeListOptions.SEND) || (numberOfNodes.intValue() == numberOfNodesToCreateOn.intValue())));\n    \n    Set<String> liveNodes = commonMocks(numberOfNodes);\n    List<String> createNodeList = new ArrayList<>();\n    int i = 0;\n    for (String node : liveNodes) {\n      if (i++ < numberOfNodesToCreateOn) {\n        createNodeList.add(node);\n      }\n    }\n    \n    if (random().nextBoolean()) Collections.shuffle(createNodeList, OverseerCollectionMessageHandler.RANDOM);\n    \n    List<SubmitCapture> submitCaptures = null;\n    if (collectionExceptedToBeCreated) {\n      submitCaptures = mockShardHandlerForCreateJob(numberOfSlices,\n          replicationFactor);\n    }\n    \n    replay(solrZkClientMock);\n    replay(zkStateReaderMock);\n    replay(workQueueMock);\n    replay(clusterStateMock);\n    replay(shardHandlerFactoryMock);\n    replay(shardHandlerMock);\n    \n    \n    underTest = new OverseerCollectionConfigSetProcessorToBeTested(zkStateReaderMock,\n        \"1234\", shardHandlerFactoryMock, ADMIN_PATH, workQueueMock, runningMapMock,\n        completedMapMock, failureMapMock);\n\n\n    log.info(\"clusterstate \" + clusterStateMock.hashCode());\n\n    startComponentUnderTest();\n    \n    final List<String> createNodeListToSend = ((createNodeListOption != CreateNodeListOptions.SEND_NULL) ? createNodeList : null);\n    final boolean sendCreateNodeList = (createNodeListOption != CreateNodeListOptions.DONT_SEND);\n    final boolean dontShuffleCreateNodeSet = (createNodeListToSend != null) && sendCreateNodeList && random().nextBoolean();\n    issueCreateJob(numberOfSlices, replicationFactor, maxShardsPerNode, createNodeListToSend, sendCreateNodeList, !dontShuffleCreateNodeSet);\n    waitForEmptyQueue(10000);\n    \n    if (collectionExceptedToBeCreated) {\n      assertNotNull(lastProcessMessageResult.getResponse().toString(), lastProcessMessageResult);\n    }\n    verify(shardHandlerFactoryMock);\n    verify(shardHandlerMock);\n\n    if (collectionExceptedToBeCreated) {\n      verifySubmitCaptures(submitCaptures, numberOfSlices, replicationFactor,\n          createNodeList, dontShuffleCreateNodeSet);\n    }\n  }\n\n","sourceOld":"  protected void testTemplate(Integer numberOfNodes, Integer numberOfNodesToCreateOn, CreateNodeListOptions createNodeListOption, Integer replicationFactor,\n      Integer numberOfSlices, Integer maxShardsPerNode,\n      boolean collectionExceptedToBeCreated) throws Exception {\n    assertTrue(\"Wrong usage of testTemplate. numberOfNodesToCreateOn \" + numberOfNodesToCreateOn + \" is not allowed to be higher than numberOfNodes \" + numberOfNodes, numberOfNodes.intValue() >= numberOfNodesToCreateOn.intValue());\n    assertTrue(\"Wrong usage of testTemplage. createNodeListOption has to be \" + CreateNodeListOptions.SEND + \" when numberOfNodes and numberOfNodesToCreateOn are unequal\", ((createNodeListOption == CreateNodeListOptions.SEND) || (numberOfNodes.intValue() == numberOfNodesToCreateOn.intValue())));\n    \n    Set<String> liveNodes = commonMocks(numberOfNodes);\n    List<String> createNodeList = new ArrayList<>();\n    int i = 0;\n    for (String node : liveNodes) {\n      if (i++ < numberOfNodesToCreateOn) {\n        createNodeList.add(node);\n      }\n    }\n    \n    if (random().nextBoolean()) Collections.shuffle(createNodeList, OverseerCollectionMessageHandler.RANDOM);\n    \n    List<SubmitCapture> submitCaptures = null;\n    if (collectionExceptedToBeCreated) {\n      submitCaptures = mockShardHandlerForCreateJob(numberOfSlices,\n          replicationFactor);\n    }\n    \n    replay(workQueueMock);\n    replay(solrZkClientMock);\n    replay(zkStateReaderMock);\n    replay(clusterStateMock);\n    replay(shardHandlerFactoryMock);\n    replay(shardHandlerMock);\n\n\n    log.info(\"clusterstate \" + clusterStateMock.hashCode());\n\n    startComponentUnderTest();\n    \n    final List<String> createNodeListToSend = ((createNodeListOption != CreateNodeListOptions.SEND_NULL) ? createNodeList : null);\n    final boolean sendCreateNodeList = (createNodeListOption != CreateNodeListOptions.DONT_SEND);\n    final boolean dontShuffleCreateNodeSet = (createNodeListToSend != null) && sendCreateNodeList && random().nextBoolean();\n    issueCreateJob(numberOfSlices, replicationFactor, maxShardsPerNode, createNodeListToSend, sendCreateNodeList, !dontShuffleCreateNodeSet);\n    waitForEmptyQueue(10000);\n    \n    if (collectionExceptedToBeCreated) {\n      assertNotNull(lastProcessMessageResult.getResponse().toString(), lastProcessMessageResult);\n    }\n    verify(shardHandlerFactoryMock);\n    verify(shardHandlerMock);\n\n    if (collectionExceptedToBeCreated) {\n      verifySubmitCaptures(submitCaptures, numberOfSlices, replicationFactor,\n          createNodeList, dontShuffleCreateNodeSet);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f7a0f6f6b8a4cc8b82386e74e45ab3c097f2453e","date":1487462440,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionConfigSetProcessorTest#testTemplate(Integer,Integer,CreateNodeListOptions,Integer,Integer,Integer,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionConfigSetProcessorTest#testTemplate(Integer,Integer,CreateNodeListOptions,Integer,Integer,Integer,boolean).mjava","sourceNew":"  protected void testTemplate(Integer numberOfNodes, Integer numberOfNodesToCreateOn, CreateNodeListOptions createNodeListOption, Integer replicationFactor,\n      Integer numberOfSlices, Integer maxShardsPerNode,\n      boolean collectionExceptedToBeCreated) throws Exception {\n    assertTrue(\"Wrong usage of testTemplate. numberOfNodesToCreateOn \" + numberOfNodesToCreateOn + \" is not allowed to be higher than numberOfNodes \" + numberOfNodes, numberOfNodes.intValue() >= numberOfNodesToCreateOn.intValue());\n    assertTrue(\"Wrong usage of testTemplage. createNodeListOption has to be \" + CreateNodeListOptions.SEND + \" when numberOfNodes and numberOfNodesToCreateOn are unequal\", ((createNodeListOption == CreateNodeListOptions.SEND) || (numberOfNodes.intValue() == numberOfNodesToCreateOn.intValue())));\n    \n    Set<String> liveNodes = commonMocks(numberOfNodes);\n    List<String> createNodeList = new ArrayList<>();\n    int i = 0;\n    for (String node : liveNodes) {\n      if (i++ < numberOfNodesToCreateOn) {\n        createNodeList.add(node);\n      }\n    }\n    \n    if (random().nextBoolean()) Collections.shuffle(createNodeList, OverseerCollectionMessageHandler.RANDOM);\n\n    underTest = new OverseerCollectionConfigSetProcessorToBeTested(zkStateReaderMock,\n        \"1234\", shardHandlerFactoryMock, ADMIN_PATH, workQueueMock, runningMapMock,\n        completedMapMock, failureMapMock);\n\n\n    log.info(\"clusterstate \" + clusterStateMock.hashCode());\n\n    startComponentUnderTest();\n    \n    final List<String> createNodeListToSend = ((createNodeListOption != CreateNodeListOptions.SEND_NULL) ? createNodeList : null);\n    final boolean sendCreateNodeList = (createNodeListOption != CreateNodeListOptions.DONT_SEND);\n    final boolean dontShuffleCreateNodeSet = (createNodeListToSend != null) && sendCreateNodeList && random().nextBoolean();\n    issueCreateJob(numberOfSlices, replicationFactor, maxShardsPerNode, createNodeListToSend, sendCreateNodeList, !dontShuffleCreateNodeSet);\n    waitForEmptyQueue(10000);\n\n    if (collectionExceptedToBeCreated) {\n      assertNotNull(lastProcessMessageResult.getResponse().toString(), lastProcessMessageResult);\n    }\n\n    if (collectionExceptedToBeCreated) {\n      verifySubmitCaptures(numberOfSlices, replicationFactor,\n          createNodeList, dontShuffleCreateNodeSet);\n    }\n  }\n\n","sourceOld":"  protected void testTemplate(Integer numberOfNodes, Integer numberOfNodesToCreateOn, CreateNodeListOptions createNodeListOption, Integer replicationFactor,\n      Integer numberOfSlices, Integer maxShardsPerNode,\n      boolean collectionExceptedToBeCreated) throws Exception {\n    assertTrue(\"Wrong usage of testTemplate. numberOfNodesToCreateOn \" + numberOfNodesToCreateOn + \" is not allowed to be higher than numberOfNodes \" + numberOfNodes, numberOfNodes.intValue() >= numberOfNodesToCreateOn.intValue());\n    assertTrue(\"Wrong usage of testTemplage. createNodeListOption has to be \" + CreateNodeListOptions.SEND + \" when numberOfNodes and numberOfNodesToCreateOn are unequal\", ((createNodeListOption == CreateNodeListOptions.SEND) || (numberOfNodes.intValue() == numberOfNodesToCreateOn.intValue())));\n    \n    Set<String> liveNodes = commonMocks(numberOfNodes);\n    List<String> createNodeList = new ArrayList<>();\n    int i = 0;\n    for (String node : liveNodes) {\n      if (i++ < numberOfNodesToCreateOn) {\n        createNodeList.add(node);\n      }\n    }\n    \n    if (random().nextBoolean()) Collections.shuffle(createNodeList, OverseerCollectionMessageHandler.RANDOM);\n    \n    List<SubmitCapture> submitCaptures = null;\n    if (collectionExceptedToBeCreated) {\n      submitCaptures = mockShardHandlerForCreateJob(numberOfSlices,\n          replicationFactor);\n    }\n    \n    replay(solrZkClientMock);\n    replay(zkStateReaderMock);\n    replay(workQueueMock);\n    replay(clusterStateMock);\n    replay(shardHandlerFactoryMock);\n    replay(shardHandlerMock);\n    \n    \n    underTest = new OverseerCollectionConfigSetProcessorToBeTested(zkStateReaderMock,\n        \"1234\", shardHandlerFactoryMock, ADMIN_PATH, workQueueMock, runningMapMock,\n        completedMapMock, failureMapMock);\n\n\n    log.info(\"clusterstate \" + clusterStateMock.hashCode());\n\n    startComponentUnderTest();\n    \n    final List<String> createNodeListToSend = ((createNodeListOption != CreateNodeListOptions.SEND_NULL) ? createNodeList : null);\n    final boolean sendCreateNodeList = (createNodeListOption != CreateNodeListOptions.DONT_SEND);\n    final boolean dontShuffleCreateNodeSet = (createNodeListToSend != null) && sendCreateNodeList && random().nextBoolean();\n    issueCreateJob(numberOfSlices, replicationFactor, maxShardsPerNode, createNodeListToSend, sendCreateNodeList, !dontShuffleCreateNodeSet);\n    waitForEmptyQueue(10000);\n    \n    if (collectionExceptedToBeCreated) {\n      assertNotNull(lastProcessMessageResult.getResponse().toString(), lastProcessMessageResult);\n    }\n    verify(shardHandlerFactoryMock);\n    verify(shardHandlerMock);\n\n    if (collectionExceptedToBeCreated) {\n      verifySubmitCaptures(submitCaptures, numberOfSlices, replicationFactor,\n          createNodeList, dontShuffleCreateNodeSet);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85212dad4ed576c7f7e6c165ee19e597b7b4efc8","date":1507997740,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionConfigSetProcessorTest#testTemplate(Integer,Integer,CreateNodeListOptions,Integer,Integer,Integer,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionConfigSetProcessorTest#testTemplate(Integer,Integer,CreateNodeListOptions,Integer,Integer,Integer,boolean).mjava","sourceNew":"  protected void testTemplate(Integer numberOfNodes, Integer numberOfNodesToCreateOn, CreateNodeListOptions createNodeListOption, Integer replicationFactor,\n      Integer numberOfSlices, Integer maxShardsPerNode,\n      boolean collectionExceptedToBeCreated) throws Exception {\n    assertTrue(\"Wrong usage of testTemplate. numberOfNodesToCreateOn \" + numberOfNodesToCreateOn + \" is not allowed to be higher than numberOfNodes \" + numberOfNodes, numberOfNodes.intValue() >= numberOfNodesToCreateOn.intValue());\n    assertTrue(\"Wrong usage of testTemplage. createNodeListOption has to be \" + CreateNodeListOptions.SEND + \" when numberOfNodes and numberOfNodesToCreateOn are unequal\", ((createNodeListOption == CreateNodeListOptions.SEND) || (numberOfNodes.intValue() == numberOfNodesToCreateOn.intValue())));\n    \n    Set<String> liveNodes = commonMocks(numberOfNodes);\n    List<String> createNodeList = new ArrayList<>();\n    int i = 0;\n    for (String node : liveNodes) {\n      if (i++ < numberOfNodesToCreateOn) {\n        createNodeList.add(node);\n      }\n    }\n    \n    if (random().nextBoolean()) Collections.shuffle(createNodeList, OverseerCollectionMessageHandler.RANDOM);\n\n    underTest = new OverseerCollectionConfigSetProcessorToBeTested(zkStateReaderMock,\n        \"1234\", shardHandlerFactoryMock, ADMIN_PATH, workQueueMock, runningMapMock,\n        overseerMock, completedMapMock, failureMapMock);\n\n\n    log.info(\"clusterstate \" + clusterStateMock.hashCode());\n\n    startComponentUnderTest();\n    \n    final List<String> createNodeListToSend = ((createNodeListOption != CreateNodeListOptions.SEND_NULL) ? createNodeList : null);\n    final boolean sendCreateNodeList = (createNodeListOption != CreateNodeListOptions.DONT_SEND);\n    final boolean dontShuffleCreateNodeSet = (createNodeListToSend != null) && sendCreateNodeList && random().nextBoolean();\n    issueCreateJob(numberOfSlices, replicationFactor, maxShardsPerNode, createNodeListToSend, sendCreateNodeList, !dontShuffleCreateNodeSet);\n    waitForEmptyQueue(10000);\n\n    if (collectionExceptedToBeCreated) {\n      assertNotNull(lastProcessMessageResult.getResponse().toString(), lastProcessMessageResult);\n    }\n\n    if (collectionExceptedToBeCreated) {\n      verifySubmitCaptures(numberOfSlices, replicationFactor,\n          createNodeList, dontShuffleCreateNodeSet);\n    }\n  }\n\n","sourceOld":"  protected void testTemplate(Integer numberOfNodes, Integer numberOfNodesToCreateOn, CreateNodeListOptions createNodeListOption, Integer replicationFactor,\n      Integer numberOfSlices, Integer maxShardsPerNode,\n      boolean collectionExceptedToBeCreated) throws Exception {\n    assertTrue(\"Wrong usage of testTemplate. numberOfNodesToCreateOn \" + numberOfNodesToCreateOn + \" is not allowed to be higher than numberOfNodes \" + numberOfNodes, numberOfNodes.intValue() >= numberOfNodesToCreateOn.intValue());\n    assertTrue(\"Wrong usage of testTemplage. createNodeListOption has to be \" + CreateNodeListOptions.SEND + \" when numberOfNodes and numberOfNodesToCreateOn are unequal\", ((createNodeListOption == CreateNodeListOptions.SEND) || (numberOfNodes.intValue() == numberOfNodesToCreateOn.intValue())));\n    \n    Set<String> liveNodes = commonMocks(numberOfNodes);\n    List<String> createNodeList = new ArrayList<>();\n    int i = 0;\n    for (String node : liveNodes) {\n      if (i++ < numberOfNodesToCreateOn) {\n        createNodeList.add(node);\n      }\n    }\n    \n    if (random().nextBoolean()) Collections.shuffle(createNodeList, OverseerCollectionMessageHandler.RANDOM);\n\n    underTest = new OverseerCollectionConfigSetProcessorToBeTested(zkStateReaderMock,\n        \"1234\", shardHandlerFactoryMock, ADMIN_PATH, workQueueMock, runningMapMock,\n        completedMapMock, failureMapMock);\n\n\n    log.info(\"clusterstate \" + clusterStateMock.hashCode());\n\n    startComponentUnderTest();\n    \n    final List<String> createNodeListToSend = ((createNodeListOption != CreateNodeListOptions.SEND_NULL) ? createNodeList : null);\n    final boolean sendCreateNodeList = (createNodeListOption != CreateNodeListOptions.DONT_SEND);\n    final boolean dontShuffleCreateNodeSet = (createNodeListToSend != null) && sendCreateNodeList && random().nextBoolean();\n    issueCreateJob(numberOfSlices, replicationFactor, maxShardsPerNode, createNodeListToSend, sendCreateNodeList, !dontShuffleCreateNodeSet);\n    waitForEmptyQueue(10000);\n\n    if (collectionExceptedToBeCreated) {\n      assertNotNull(lastProcessMessageResult.getResponse().toString(), lastProcessMessageResult);\n    }\n\n    if (collectionExceptedToBeCreated) {\n      verifySubmitCaptures(numberOfSlices, replicationFactor,\n          createNodeList, dontShuffleCreateNodeSet);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6146c07c0dee1ae1e42926167acd127fed5ef59d","date":1516129420,"type":3,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionConfigSetProcessorTest#testTemplate(Integer,Integer,CreateNodeListOptions,Integer,Integer,Integer,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionConfigSetProcessorTest#testTemplate(Integer,Integer,CreateNodeListOptions,Integer,Integer,Integer,boolean).mjava","sourceNew":"  protected void testTemplate(Integer numberOfNodes, Integer numberOfNodesToCreateOn, CreateNodeListOptions createNodeListOption, Integer replicationFactor,\n      Integer numberOfSlices, Integer maxShardsPerNode,\n      boolean collectionExceptedToBeCreated) throws Exception {\n    assertTrue(\"Wrong usage of testTemplate. numberOfNodesToCreateOn \" + numberOfNodesToCreateOn + \" is not allowed to be higher than numberOfNodes \" + numberOfNodes, numberOfNodes.intValue() >= numberOfNodesToCreateOn.intValue());\n    assertTrue(\"Wrong usage of testTemplage. createNodeListOption has to be \" + CreateNodeListOptions.SEND + \" when numberOfNodes and numberOfNodesToCreateOn are unequal\", ((createNodeListOption == CreateNodeListOptions.SEND) || (numberOfNodes.intValue() == numberOfNodesToCreateOn.intValue())));\n    \n    Set<String> liveNodes = commonMocks(numberOfNodes);\n    List<String> createNodeList = new ArrayList<>();\n    int i = 0;\n    for (String node : liveNodes) {\n      if (i++ < numberOfNodesToCreateOn) {\n        createNodeList.add(node);\n      }\n    }\n    \n    if (random().nextBoolean()) Collections.shuffle(createNodeList, random());\n\n    underTest = new OverseerCollectionConfigSetProcessorToBeTested(zkStateReaderMock,\n        \"1234\", shardHandlerFactoryMock, ADMIN_PATH, workQueueMock, runningMapMock,\n        overseerMock, completedMapMock, failureMapMock);\n\n\n    log.info(\"clusterstate \" + clusterStateMock.hashCode());\n\n    startComponentUnderTest();\n    \n    final List<String> createNodeListToSend = ((createNodeListOption != CreateNodeListOptions.SEND_NULL) ? createNodeList : null);\n    final boolean sendCreateNodeList = (createNodeListOption != CreateNodeListOptions.DONT_SEND);\n    final boolean dontShuffleCreateNodeSet = (createNodeListToSend != null) && sendCreateNodeList && random().nextBoolean();\n    issueCreateJob(numberOfSlices, replicationFactor, maxShardsPerNode, createNodeListToSend, sendCreateNodeList, !dontShuffleCreateNodeSet);\n    waitForEmptyQueue(10000);\n\n    if (collectionExceptedToBeCreated) {\n      assertNotNull(lastProcessMessageResult.getResponse().toString(), lastProcessMessageResult);\n    }\n\n    if (collectionExceptedToBeCreated) {\n      verifySubmitCaptures(numberOfSlices, replicationFactor,\n          createNodeList, dontShuffleCreateNodeSet);\n    }\n  }\n\n","sourceOld":"  protected void testTemplate(Integer numberOfNodes, Integer numberOfNodesToCreateOn, CreateNodeListOptions createNodeListOption, Integer replicationFactor,\n      Integer numberOfSlices, Integer maxShardsPerNode,\n      boolean collectionExceptedToBeCreated) throws Exception {\n    assertTrue(\"Wrong usage of testTemplate. numberOfNodesToCreateOn \" + numberOfNodesToCreateOn + \" is not allowed to be higher than numberOfNodes \" + numberOfNodes, numberOfNodes.intValue() >= numberOfNodesToCreateOn.intValue());\n    assertTrue(\"Wrong usage of testTemplage. createNodeListOption has to be \" + CreateNodeListOptions.SEND + \" when numberOfNodes and numberOfNodesToCreateOn are unequal\", ((createNodeListOption == CreateNodeListOptions.SEND) || (numberOfNodes.intValue() == numberOfNodesToCreateOn.intValue())));\n    \n    Set<String> liveNodes = commonMocks(numberOfNodes);\n    List<String> createNodeList = new ArrayList<>();\n    int i = 0;\n    for (String node : liveNodes) {\n      if (i++ < numberOfNodesToCreateOn) {\n        createNodeList.add(node);\n      }\n    }\n    \n    if (random().nextBoolean()) Collections.shuffle(createNodeList, OverseerCollectionMessageHandler.RANDOM);\n\n    underTest = new OverseerCollectionConfigSetProcessorToBeTested(zkStateReaderMock,\n        \"1234\", shardHandlerFactoryMock, ADMIN_PATH, workQueueMock, runningMapMock,\n        overseerMock, completedMapMock, failureMapMock);\n\n\n    log.info(\"clusterstate \" + clusterStateMock.hashCode());\n\n    startComponentUnderTest();\n    \n    final List<String> createNodeListToSend = ((createNodeListOption != CreateNodeListOptions.SEND_NULL) ? createNodeList : null);\n    final boolean sendCreateNodeList = (createNodeListOption != CreateNodeListOptions.DONT_SEND);\n    final boolean dontShuffleCreateNodeSet = (createNodeListToSend != null) && sendCreateNodeList && random().nextBoolean();\n    issueCreateJob(numberOfSlices, replicationFactor, maxShardsPerNode, createNodeListToSend, sendCreateNodeList, !dontShuffleCreateNodeSet);\n    waitForEmptyQueue(10000);\n\n    if (collectionExceptedToBeCreated) {\n      assertNotNull(lastProcessMessageResult.getResponse().toString(), lastProcessMessageResult);\n    }\n\n    if (collectionExceptedToBeCreated) {\n      verifySubmitCaptures(numberOfSlices, replicationFactor,\n          createNodeList, dontShuffleCreateNodeSet);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionConfigSetProcessorTest#testTemplate(Integer,Integer,CreateNodeListOptions,Integer,Integer,Integer,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionConfigSetProcessorTest#testTemplate(Integer,Integer,CreateNodeListOptions,Integer,Integer,Integer,boolean).mjava","sourceNew":"  protected void testTemplate(Integer numberOfNodes, Integer numberOfNodesToCreateOn, CreateNodeListOptions createNodeListOption, Integer replicationFactor,\n      Integer numberOfSlices, Integer maxShardsPerNode,\n      boolean collectionExceptedToBeCreated) throws Exception {\n    assertTrue(\"Wrong usage of testTemplate. numberOfNodesToCreateOn \" + numberOfNodesToCreateOn + \" is not allowed to be higher than numberOfNodes \" + numberOfNodes, numberOfNodes.intValue() >= numberOfNodesToCreateOn.intValue());\n    assertTrue(\"Wrong usage of testTemplage. createNodeListOption has to be \" + CreateNodeListOptions.SEND + \" when numberOfNodes and numberOfNodesToCreateOn are unequal\", ((createNodeListOption == CreateNodeListOptions.SEND) || (numberOfNodes.intValue() == numberOfNodesToCreateOn.intValue())));\n    \n    Set<String> liveNodes = commonMocks(numberOfNodes);\n    List<String> createNodeList = new ArrayList<>();\n    int i = 0;\n    for (String node : liveNodes) {\n      if (i++ < numberOfNodesToCreateOn) {\n        createNodeList.add(node);\n      }\n    }\n    \n    if (random().nextBoolean()) Collections.shuffle(createNodeList, random());\n\n    underTest = new OverseerCollectionConfigSetProcessorToBeTested(zkStateReaderMock,\n        \"1234\", shardHandlerFactoryMock, ADMIN_PATH, workQueueMock, runningMapMock,\n        overseerMock, completedMapMock, failureMapMock);\n\n\n    log.info(\"clusterstate \" + clusterStateMock.hashCode());\n\n    startComponentUnderTest();\n    \n    final List<String> createNodeListToSend = ((createNodeListOption != CreateNodeListOptions.SEND_NULL) ? createNodeList : null);\n    final boolean sendCreateNodeList = (createNodeListOption != CreateNodeListOptions.DONT_SEND);\n    final boolean dontShuffleCreateNodeSet = (createNodeListToSend != null) && sendCreateNodeList && random().nextBoolean();\n    issueCreateJob(numberOfSlices, replicationFactor, maxShardsPerNode, createNodeListToSend, sendCreateNodeList, !dontShuffleCreateNodeSet);\n    waitForEmptyQueue(10000);\n\n    if (collectionExceptedToBeCreated) {\n      assertNotNull(lastProcessMessageResult.getResponse().toString(), lastProcessMessageResult);\n    }\n\n    if (collectionExceptedToBeCreated) {\n      verifySubmitCaptures(numberOfSlices, replicationFactor,\n          createNodeList, dontShuffleCreateNodeSet);\n    }\n  }\n\n","sourceOld":"  protected void testTemplate(Integer numberOfNodes, Integer numberOfNodesToCreateOn, CreateNodeListOptions createNodeListOption, Integer replicationFactor,\n      Integer numberOfSlices, Integer maxShardsPerNode,\n      boolean collectionExceptedToBeCreated) throws Exception {\n    assertTrue(\"Wrong usage of testTemplate. numberOfNodesToCreateOn \" + numberOfNodesToCreateOn + \" is not allowed to be higher than numberOfNodes \" + numberOfNodes, numberOfNodes.intValue() >= numberOfNodesToCreateOn.intValue());\n    assertTrue(\"Wrong usage of testTemplage. createNodeListOption has to be \" + CreateNodeListOptions.SEND + \" when numberOfNodes and numberOfNodesToCreateOn are unequal\", ((createNodeListOption == CreateNodeListOptions.SEND) || (numberOfNodes.intValue() == numberOfNodesToCreateOn.intValue())));\n    \n    Set<String> liveNodes = commonMocks(numberOfNodes);\n    List<String> createNodeList = new ArrayList<>();\n    int i = 0;\n    for (String node : liveNodes) {\n      if (i++ < numberOfNodesToCreateOn) {\n        createNodeList.add(node);\n      }\n    }\n    \n    if (random().nextBoolean()) Collections.shuffle(createNodeList, OverseerCollectionMessageHandler.RANDOM);\n\n    underTest = new OverseerCollectionConfigSetProcessorToBeTested(zkStateReaderMock,\n        \"1234\", shardHandlerFactoryMock, ADMIN_PATH, workQueueMock, runningMapMock,\n        overseerMock, completedMapMock, failureMapMock);\n\n\n    log.info(\"clusterstate \" + clusterStateMock.hashCode());\n\n    startComponentUnderTest();\n    \n    final List<String> createNodeListToSend = ((createNodeListOption != CreateNodeListOptions.SEND_NULL) ? createNodeList : null);\n    final boolean sendCreateNodeList = (createNodeListOption != CreateNodeListOptions.DONT_SEND);\n    final boolean dontShuffleCreateNodeSet = (createNodeListToSend != null) && sendCreateNodeList && random().nextBoolean();\n    issueCreateJob(numberOfSlices, replicationFactor, maxShardsPerNode, createNodeListToSend, sendCreateNodeList, !dontShuffleCreateNodeSet);\n    waitForEmptyQueue(10000);\n\n    if (collectionExceptedToBeCreated) {\n      assertNotNull(lastProcessMessageResult.getResponse().toString(), lastProcessMessageResult);\n    }\n\n    if (collectionExceptedToBeCreated) {\n      verifySubmitCaptures(numberOfSlices, replicationFactor,\n          createNodeList, dontShuffleCreateNodeSet);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a966532d92cf9ba2856f15a8140151bb6b518e4b","date":1588290631,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionConfigSetProcessorTest#testTemplate(Integer,Integer,CreateNodeListOptions,Integer,Integer,Integer,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionConfigSetProcessorTest#testTemplate(Integer,Integer,CreateNodeListOptions,Integer,Integer,Integer,boolean).mjava","sourceNew":"  protected void testTemplate(Integer numberOfNodes, Integer numberOfNodesToCreateOn, CreateNodeListOptions createNodeListOption, Integer replicationFactor,\n      Integer numberOfSlices, Integer maxShardsPerNode,\n      boolean collectionExceptedToBeCreated) throws Exception {\n    assertTrue(\"Wrong usage of testTemplate. numberOfNodesToCreateOn \" + numberOfNodesToCreateOn + \" is not allowed to be higher than numberOfNodes \" + numberOfNodes, numberOfNodes.intValue() >= numberOfNodesToCreateOn.intValue());\n    assertTrue(\"Wrong usage of testTemplage. createNodeListOption has to be \" + CreateNodeListOptions.SEND + \" when numberOfNodes and numberOfNodesToCreateOn are unequal\", ((createNodeListOption == CreateNodeListOptions.SEND) || (numberOfNodes.intValue() == numberOfNodesToCreateOn.intValue())));\n    \n    Set<String> liveNodes = commonMocks(numberOfNodes);\n    List<String> createNodeList = new ArrayList<>();\n    int i = 0;\n    for (String node : liveNodes) {\n      if (i++ < numberOfNodesToCreateOn) {\n        createNodeList.add(node);\n      }\n    }\n    \n    if (random().nextBoolean()) Collections.shuffle(createNodeList, random());\n\n    underTest = new OverseerCollectionConfigSetProcessorToBeTested(zkStateReaderMock,\n        \"1234\", shardHandlerFactoryMock, ADMIN_PATH, workQueueMock, runningMapMock,\n        overseerMock, completedMapMock, failureMapMock);\n\n\n    if (log.isInfoEnabled()) {\n      log.info(\"clusterstate {}\", clusterStateMock.hashCode());\n    }\n\n    startComponentUnderTest();\n    \n    final List<String> createNodeListToSend = ((createNodeListOption != CreateNodeListOptions.SEND_NULL) ? createNodeList : null);\n    final boolean sendCreateNodeList = (createNodeListOption != CreateNodeListOptions.DONT_SEND);\n    final boolean dontShuffleCreateNodeSet = (createNodeListToSend != null) && sendCreateNodeList && random().nextBoolean();\n    issueCreateJob(numberOfSlices, replicationFactor, maxShardsPerNode, createNodeListToSend, sendCreateNodeList, !dontShuffleCreateNodeSet);\n    waitForEmptyQueue(10000);\n\n    if (collectionExceptedToBeCreated) {\n      assertNotNull(lastProcessMessageResult.getResponse().toString(), lastProcessMessageResult);\n    }\n\n    if (collectionExceptedToBeCreated) {\n      verifySubmitCaptures(numberOfSlices, replicationFactor,\n          createNodeList, dontShuffleCreateNodeSet);\n    }\n  }\n\n","sourceOld":"  protected void testTemplate(Integer numberOfNodes, Integer numberOfNodesToCreateOn, CreateNodeListOptions createNodeListOption, Integer replicationFactor,\n      Integer numberOfSlices, Integer maxShardsPerNode,\n      boolean collectionExceptedToBeCreated) throws Exception {\n    assertTrue(\"Wrong usage of testTemplate. numberOfNodesToCreateOn \" + numberOfNodesToCreateOn + \" is not allowed to be higher than numberOfNodes \" + numberOfNodes, numberOfNodes.intValue() >= numberOfNodesToCreateOn.intValue());\n    assertTrue(\"Wrong usage of testTemplage. createNodeListOption has to be \" + CreateNodeListOptions.SEND + \" when numberOfNodes and numberOfNodesToCreateOn are unequal\", ((createNodeListOption == CreateNodeListOptions.SEND) || (numberOfNodes.intValue() == numberOfNodesToCreateOn.intValue())));\n    \n    Set<String> liveNodes = commonMocks(numberOfNodes);\n    List<String> createNodeList = new ArrayList<>();\n    int i = 0;\n    for (String node : liveNodes) {\n      if (i++ < numberOfNodesToCreateOn) {\n        createNodeList.add(node);\n      }\n    }\n    \n    if (random().nextBoolean()) Collections.shuffle(createNodeList, random());\n\n    underTest = new OverseerCollectionConfigSetProcessorToBeTested(zkStateReaderMock,\n        \"1234\", shardHandlerFactoryMock, ADMIN_PATH, workQueueMock, runningMapMock,\n        overseerMock, completedMapMock, failureMapMock);\n\n\n    log.info(\"clusterstate \" + clusterStateMock.hashCode());\n\n    startComponentUnderTest();\n    \n    final List<String> createNodeListToSend = ((createNodeListOption != CreateNodeListOptions.SEND_NULL) ? createNodeList : null);\n    final boolean sendCreateNodeList = (createNodeListOption != CreateNodeListOptions.DONT_SEND);\n    final boolean dontShuffleCreateNodeSet = (createNodeListToSend != null) && sendCreateNodeList && random().nextBoolean();\n    issueCreateJob(numberOfSlices, replicationFactor, maxShardsPerNode, createNodeListToSend, sendCreateNodeList, !dontShuffleCreateNodeSet);\n    waitForEmptyQueue(10000);\n\n    if (collectionExceptedToBeCreated) {\n      assertNotNull(lastProcessMessageResult.getResponse().toString(), lastProcessMessageResult);\n    }\n\n    if (collectionExceptedToBeCreated) {\n      verifySubmitCaptures(numberOfSlices, replicationFactor,\n          createNodeList, dontShuffleCreateNodeSet);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e","date":1594223844,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionConfigSetProcessorTest#testTemplate(Integer,Integer,CreateNodeListOptions,Integer,Integer,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionConfigSetProcessorTest#testTemplate(Integer,Integer,CreateNodeListOptions,Integer,Integer,Integer,boolean).mjava","sourceNew":"  protected void testTemplate(Integer numberOfNodes, Integer numberOfNodesToCreateOn, CreateNodeListOptions createNodeListOption, Integer replicationFactor,\n      Integer numberOfSlices,\n      boolean collectionExceptedToBeCreated) throws Exception {\n    assertTrue(\"Wrong usage of testTemplate. numberOfNodesToCreateOn \" + numberOfNodesToCreateOn + \" is not allowed to be higher than numberOfNodes \" + numberOfNodes, numberOfNodes.intValue() >= numberOfNodesToCreateOn.intValue());\n    assertTrue(\"Wrong usage of testTemplage. createNodeListOption has to be \" + CreateNodeListOptions.SEND + \" when numberOfNodes and numberOfNodesToCreateOn are unequal\", ((createNodeListOption == CreateNodeListOptions.SEND) || (numberOfNodes.intValue() == numberOfNodesToCreateOn.intValue())));\n    \n    Set<String> liveNodes = commonMocks(numberOfNodes);\n    List<String> createNodeList = new ArrayList<>();\n    int i = 0;\n    for (String node : liveNodes) {\n      if (i++ < numberOfNodesToCreateOn) {\n        createNodeList.add(node);\n      }\n    }\n    \n    if (random().nextBoolean()) Collections.shuffle(createNodeList, random());\n\n    underTest = new OverseerCollectionConfigSetProcessorToBeTested(zkStateReaderMock,\n        \"1234\", shardHandlerFactoryMock, ADMIN_PATH, workQueueMock, runningMapMock,\n        overseerMock, completedMapMock, failureMapMock);\n\n\n    if (log.isInfoEnabled()) {\n      log.info(\"clusterstate {}\", clusterStateMock.hashCode());\n    }\n\n    startComponentUnderTest();\n    \n    final List<String> createNodeListToSend = ((createNodeListOption != CreateNodeListOptions.SEND_NULL) ? createNodeList : null);\n    final boolean sendCreateNodeList = (createNodeListOption != CreateNodeListOptions.DONT_SEND);\n    final boolean dontShuffleCreateNodeSet = (createNodeListToSend != null) && sendCreateNodeList && random().nextBoolean();\n    issueCreateJob(numberOfSlices, replicationFactor, createNodeListToSend, sendCreateNodeList, !dontShuffleCreateNodeSet);\n    waitForEmptyQueue(10000);\n\n    if (collectionExceptedToBeCreated) {\n      assertNotNull(lastProcessMessageResult.getResponse().toString(), lastProcessMessageResult);\n    }\n\n    if (collectionExceptedToBeCreated) {\n      verifySubmitCaptures(numberOfSlices, replicationFactor,\n          createNodeList, dontShuffleCreateNodeSet);\n    }\n  }\n\n","sourceOld":"  protected void testTemplate(Integer numberOfNodes, Integer numberOfNodesToCreateOn, CreateNodeListOptions createNodeListOption, Integer replicationFactor,\n      Integer numberOfSlices, Integer maxShardsPerNode,\n      boolean collectionExceptedToBeCreated) throws Exception {\n    assertTrue(\"Wrong usage of testTemplate. numberOfNodesToCreateOn \" + numberOfNodesToCreateOn + \" is not allowed to be higher than numberOfNodes \" + numberOfNodes, numberOfNodes.intValue() >= numberOfNodesToCreateOn.intValue());\n    assertTrue(\"Wrong usage of testTemplage. createNodeListOption has to be \" + CreateNodeListOptions.SEND + \" when numberOfNodes and numberOfNodesToCreateOn are unequal\", ((createNodeListOption == CreateNodeListOptions.SEND) || (numberOfNodes.intValue() == numberOfNodesToCreateOn.intValue())));\n    \n    Set<String> liveNodes = commonMocks(numberOfNodes);\n    List<String> createNodeList = new ArrayList<>();\n    int i = 0;\n    for (String node : liveNodes) {\n      if (i++ < numberOfNodesToCreateOn) {\n        createNodeList.add(node);\n      }\n    }\n    \n    if (random().nextBoolean()) Collections.shuffle(createNodeList, random());\n\n    underTest = new OverseerCollectionConfigSetProcessorToBeTested(zkStateReaderMock,\n        \"1234\", shardHandlerFactoryMock, ADMIN_PATH, workQueueMock, runningMapMock,\n        overseerMock, completedMapMock, failureMapMock);\n\n\n    if (log.isInfoEnabled()) {\n      log.info(\"clusterstate {}\", clusterStateMock.hashCode());\n    }\n\n    startComponentUnderTest();\n    \n    final List<String> createNodeListToSend = ((createNodeListOption != CreateNodeListOptions.SEND_NULL) ? createNodeList : null);\n    final boolean sendCreateNodeList = (createNodeListOption != CreateNodeListOptions.DONT_SEND);\n    final boolean dontShuffleCreateNodeSet = (createNodeListToSend != null) && sendCreateNodeList && random().nextBoolean();\n    issueCreateJob(numberOfSlices, replicationFactor, maxShardsPerNode, createNodeListToSend, sendCreateNodeList, !dontShuffleCreateNodeSet);\n    waitForEmptyQueue(10000);\n\n    if (collectionExceptedToBeCreated) {\n      assertNotNull(lastProcessMessageResult.getResponse().toString(), lastProcessMessageResult);\n    }\n\n    if (collectionExceptedToBeCreated) {\n      verifySubmitCaptures(numberOfSlices, replicationFactor,\n          createNodeList, dontShuffleCreateNodeSet);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"f291d2d430e8149d24fdd06b0bcdab0941ec9144":["2209af2c265d2258ec4b29c8cc78622d36994a15"],"2209af2c265d2258ec4b29c8cc78622d36994a15":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["f7a0f6f6b8a4cc8b82386e74e45ab3c097f2453e"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"f7a0f6f6b8a4cc8b82386e74e45ab3c097f2453e":["f291d2d430e8149d24fdd06b0bcdab0941ec9144"],"9856095f7afb5a607bf5e65077615ed91273508c":["2209af2c265d2258ec4b29c8cc78622d36994a15","f291d2d430e8149d24fdd06b0bcdab0941ec9144"],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["b94236357aaa22b76c10629851fe4e376e0cea82"],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["a966532d92cf9ba2856f15a8140151bb6b518e4b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["a966532d92cf9ba2856f15a8140151bb6b518e4b"],"f291d2d430e8149d24fdd06b0bcdab0941ec9144":["f7a0f6f6b8a4cc8b82386e74e45ab3c097f2453e","9856095f7afb5a607bf5e65077615ed91273508c"],"2209af2c265d2258ec4b29c8cc78622d36994a15":["f291d2d430e8149d24fdd06b0bcdab0941ec9144","9856095f7afb5a607bf5e65077615ed91273508c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2209af2c265d2258ec4b29c8cc78622d36994a15"],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["b94236357aaa22b76c10629851fe4e376e0cea82","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["b94236357aaa22b76c10629851fe4e376e0cea82"],"f7a0f6f6b8a4cc8b82386e74e45ab3c097f2453e":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"9856095f7afb5a607bf5e65077615ed91273508c":[],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9856095f7afb5a607bf5e65077615ed91273508c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}