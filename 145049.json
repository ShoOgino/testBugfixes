{"path":"src/java/org/apache/lucene/index/DocumentsWriter#addDeleteTerm(Term,int).mjava","commits":[{"id":"fde68de507dbf344495d7b5e8052866fe5f254ab","date":1189434831,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/DocumentsWriter#addDeleteTerm(Term,int).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#bufferDeleteTerm(Term).mjava","sourceNew":"  // Buffer a term in bufferedDeleteTerms, which records the\n  // current number of documents buffered in ram so that the\n  // delete term will be applied to those documents as well\n  // as the disk segments.\n  synchronized private void addDeleteTerm(Term term, int docCount) {\n    Num num = (Num) bufferedDeleteTerms.get(term);\n    if (num == null) {\n      bufferedDeleteTerms.put(term, new Num(docCount));\n    } else {\n      num.setNum(docCount);\n    }\n    numBufferedDeleteTerms++;\n  }\n\n","sourceOld":"  // Buffer a term in bufferedDeleteTerms, which records the\n  // current number of documents buffered in ram so that the\n  // delete term will be applied to those ram segments as\n  // well as the disk segments.\n  private void bufferDeleteTerm(Term term) {\n    Num num = (Num) bufferedDeleteTerms.get(term);\n    int numDoc = docWriter.getNumDocsInRAM();\n    if (num == null) {\n      bufferedDeleteTerms.put(term, new Num(numDoc));\n    } else {\n      num.setNum(numDoc);\n    }\n    numBufferedDeleteTerms++;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2558ddf9e14a97bc597f5b72bb3ecb5b7f6bba8e","date":1191352543,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/DocumentsWriter#addDeleteTerm(Term,int).mjava","pathOld":"src/java/org/apache/lucene/index/DocumentsWriter#addDeleteTerm(Term,int).mjava","sourceNew":"  // Buffer a term in bufferedDeleteTerms, which records the\n  // current number of documents buffered in ram so that the\n  // delete term will be applied to those documents as well\n  // as the disk segments.\n  synchronized private void addDeleteTerm(Term term, int docCount) {\n    Num num = (Num) bufferedDeleteTerms.get(term);\n    if (num == null) {\n      bufferedDeleteTerms.put(term, new Num(docCount));\n      // This is coarse approximation of actual bytes used:\n      numBytesUsed += (term.field().length() + term.text().length()) * BYTES_PER_CHAR\n          + Integer.SIZE/8 + 5 * OBJECT_HEADER_BYTES + 5 * OBJECT_POINTER_BYTES;\n      if (ramBufferSize != IndexWriter.DISABLE_AUTO_FLUSH\n          && numBytesUsed > ramBufferSize) {\n        bufferIsFull = true;\n      }\n    } else {\n      num.setNum(docCount);\n    }\n    numBufferedDeleteTerms++;\n  }\n\n","sourceOld":"  // Buffer a term in bufferedDeleteTerms, which records the\n  // current number of documents buffered in ram so that the\n  // delete term will be applied to those documents as well\n  // as the disk segments.\n  synchronized private void addDeleteTerm(Term term, int docCount) {\n    Num num = (Num) bufferedDeleteTerms.get(term);\n    if (num == null) {\n      bufferedDeleteTerms.put(term, new Num(docCount));\n    } else {\n      num.setNum(docCount);\n    }\n    numBufferedDeleteTerms++;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"12fe55f989363c8ee170729238267f71b14f3b28","date":1191352888,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/DocumentsWriter#addDeleteTerm(Term,int).mjava","pathOld":"src/java/org/apache/lucene/index/DocumentsWriter#addDeleteTerm(Term,int).mjava","sourceNew":"  // Buffer a term in bufferedDeleteTerms, which records the\n  // current number of documents buffered in ram so that the\n  // delete term will be applied to those documents as well\n  // as the disk segments.\n  synchronized private void addDeleteTerm(Term term, int docCount) {\n    Num num = (Num) bufferedDeleteTerms.get(term);\n    if (num == null) {\n      bufferedDeleteTerms.put(term, new Num(docCount));\n      // This is coarse approximation of actual bytes used:\n      numBytesUsed += (term.field().length() + term.text().length()) * BYTES_PER_CHAR\n          + 4 + 5 * OBJECT_HEADER_BYTES + 5 * OBJECT_POINTER_BYTES;\n      if (ramBufferSize != IndexWriter.DISABLE_AUTO_FLUSH\n          && numBytesUsed > ramBufferSize) {\n        bufferIsFull = true;\n      }\n    } else {\n      num.setNum(docCount);\n    }\n    numBufferedDeleteTerms++;\n  }\n\n","sourceOld":"  // Buffer a term in bufferedDeleteTerms, which records the\n  // current number of documents buffered in ram so that the\n  // delete term will be applied to those documents as well\n  // as the disk segments.\n  synchronized private void addDeleteTerm(Term term, int docCount) {\n    Num num = (Num) bufferedDeleteTerms.get(term);\n    if (num == null) {\n      bufferedDeleteTerms.put(term, new Num(docCount));\n      // This is coarse approximation of actual bytes used:\n      numBytesUsed += (term.field().length() + term.text().length()) * BYTES_PER_CHAR\n          + Integer.SIZE/8 + 5 * OBJECT_HEADER_BYTES + 5 * OBJECT_POINTER_BYTES;\n      if (ramBufferSize != IndexWriter.DISABLE_AUTO_FLUSH\n          && numBytesUsed > ramBufferSize) {\n        bufferIsFull = true;\n      }\n    } else {\n      num.setNum(docCount);\n    }\n    numBufferedDeleteTerms++;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a2fc4b864a5dc2c630bb1fa94091e89e69f8f8be","date":1204801324,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/DocumentsWriter#addDeleteTerm(Term,int).mjava","pathOld":"src/java/org/apache/lucene/index/DocumentsWriter#addDeleteTerm(Term,int).mjava","sourceNew":"  // Buffer a term in bufferedDeleteTerms, which records the\n  // current number of documents buffered in ram so that the\n  // delete term will be applied to those documents as well\n  // as the disk segments.\n  synchronized private void addDeleteTerm(Term term, int docCount) {\n    Num num = (Num) deletesInRAM.terms.get(term);\n    final int docIDUpto = flushedDocCount + docCount;\n    if (num == null)\n      deletesInRAM.terms.put(term, new Num(docIDUpto));\n    else\n      num.setNum(docIDUpto);\n    deletesInRAM.numTerms++;\n  }\n\n","sourceOld":"  // Buffer a term in bufferedDeleteTerms, which records the\n  // current number of documents buffered in ram so that the\n  // delete term will be applied to those documents as well\n  // as the disk segments.\n  synchronized private void addDeleteTerm(Term term, int docCount) {\n    Num num = (Num) bufferedDeleteTerms.get(term);\n    if (num == null) {\n      bufferedDeleteTerms.put(term, new Num(docCount));\n      // This is coarse approximation of actual bytes used:\n      numBytesUsed += (term.field().length() + term.text().length()) * BYTES_PER_CHAR\n          + 4 + 5 * OBJECT_HEADER_BYTES + 5 * OBJECT_POINTER_BYTES;\n      if (ramBufferSize != IndexWriter.DISABLE_AUTO_FLUSH\n          && numBytesUsed > ramBufferSize) {\n        bufferIsFull = true;\n      }\n    } else {\n      num.setNum(docCount);\n    }\n    numBufferedDeleteTerms++;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a0af3a442be522899177e5e11384a45a6784a3f","date":1205348952,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/DocumentsWriter#addDeleteTerm(Term,int).mjava","pathOld":"src/java/org/apache/lucene/index/DocumentsWriter#addDeleteTerm(Term,int).mjava","sourceNew":"  // Buffer a term in bufferedDeleteTerms, which records the\n  // current number of documents buffered in ram so that the\n  // delete term will be applied to those documents as well\n  // as the disk segments.\n  synchronized private void addDeleteTerm(Term term, int docCount) {\n    BufferedDeletes.Num num = (BufferedDeletes.Num) deletesInRAM.terms.get(term);\n    final int docIDUpto = flushedDocCount + docCount;\n    if (num == null)\n      deletesInRAM.terms.put(term, new BufferedDeletes.Num(docIDUpto));\n    else\n      num.setNum(docIDUpto);\n    deletesInRAM.numTerms++;\n  }\n\n","sourceOld":"  // Buffer a term in bufferedDeleteTerms, which records the\n  // current number of documents buffered in ram so that the\n  // delete term will be applied to those documents as well\n  // as the disk segments.\n  synchronized private void addDeleteTerm(Term term, int docCount) {\n    Num num = (Num) deletesInRAM.terms.get(term);\n    final int docIDUpto = flushedDocCount + docCount;\n    if (num == null)\n      deletesInRAM.terms.put(term, new Num(docIDUpto));\n    else\n      num.setNum(docIDUpto);\n    deletesInRAM.numTerms++;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4404b358bf2902b2da0b8eef5ea0a68acd37674b","date":1247143497,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/DocumentsWriter#addDeleteTerm(Term,int).mjava","pathOld":"src/java/org/apache/lucene/index/DocumentsWriter#addDeleteTerm(Term,int).mjava","sourceNew":"  // Buffer a term in bufferedDeleteTerms, which records the\n  // current number of documents buffered in ram so that the\n  // delete term will be applied to those documents as well\n  // as the disk segments.\n  synchronized private void addDeleteTerm(Term term, int docCount) {\n    BufferedDeletes.Num num = (BufferedDeletes.Num) deletesInRAM.terms.get(term);\n    final int docIDUpto = flushedDocCount + docCount;\n    if (num == null)\n      deletesInRAM.terms.put(term, new BufferedDeletes.Num(docIDUpto));\n    else\n      num.setNum(docIDUpto);\n    deletesInRAM.numTerms++;\n\n    deletesInRAM.addBytesUsed(BYTES_PER_DEL_TERM + term.text.length()*CHAR_NUM_BYTE);\n  }\n\n","sourceOld":"  // Buffer a term in bufferedDeleteTerms, which records the\n  // current number of documents buffered in ram so that the\n  // delete term will be applied to those documents as well\n  // as the disk segments.\n  synchronized private void addDeleteTerm(Term term, int docCount) {\n    BufferedDeletes.Num num = (BufferedDeletes.Num) deletesInRAM.terms.get(term);\n    final int docIDUpto = flushedDocCount + docCount;\n    if (num == null)\n      deletesInRAM.terms.put(term, new BufferedDeletes.Num(docIDUpto));\n    else\n      num.setNum(docIDUpto);\n    deletesInRAM.numTerms++;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b4e40ecf6eb9bff831572fe33a2758f9ef1e0dcc","date":1255773182,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/DocumentsWriter#addDeleteTerm(Term,int).mjava","pathOld":"src/java/org/apache/lucene/index/DocumentsWriter#addDeleteTerm(Term,int).mjava","sourceNew":"  // Buffer a term in bufferedDeleteTerms, which records the\n  // current number of documents buffered in ram so that the\n  // delete term will be applied to those documents as well\n  // as the disk segments.\n  synchronized private void addDeleteTerm(Term term, int docCount) {\n    BufferedDeletes.Num num = deletesInRAM.terms.get(term);\n    final int docIDUpto = flushedDocCount + docCount;\n    if (num == null)\n      deletesInRAM.terms.put(term, new BufferedDeletes.Num(docIDUpto));\n    else\n      num.setNum(docIDUpto);\n    deletesInRAM.numTerms++;\n\n    deletesInRAM.addBytesUsed(BYTES_PER_DEL_TERM + term.text.length()*CHAR_NUM_BYTE);\n  }\n\n","sourceOld":"  // Buffer a term in bufferedDeleteTerms, which records the\n  // current number of documents buffered in ram so that the\n  // delete term will be applied to those documents as well\n  // as the disk segments.\n  synchronized private void addDeleteTerm(Term term, int docCount) {\n    BufferedDeletes.Num num = (BufferedDeletes.Num) deletesInRAM.terms.get(term);\n    final int docIDUpto = flushedDocCount + docCount;\n    if (num == null)\n      deletesInRAM.terms.put(term, new BufferedDeletes.Num(docIDUpto));\n    else\n      num.setNum(docIDUpto);\n    deletesInRAM.numTerms++;\n\n    deletesInRAM.addBytesUsed(BYTES_PER_DEL_TERM + term.text.length()*CHAR_NUM_BYTE);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#addDeleteTerm(Term,int).mjava","pathOld":"src/java/org/apache/lucene/index/DocumentsWriter#addDeleteTerm(Term,int).mjava","sourceNew":"  // Buffer a term in bufferedDeleteTerms, which records the\n  // current number of documents buffered in ram so that the\n  // delete term will be applied to those documents as well\n  // as the disk segments.\n  synchronized private void addDeleteTerm(Term term, int docCount) {\n    BufferedDeletes.Num num = deletesInRAM.terms.get(term);\n    final int docIDUpto = flushedDocCount + docCount;\n    if (num == null)\n      deletesInRAM.terms.put(term, new BufferedDeletes.Num(docIDUpto));\n    else\n      num.setNum(docIDUpto);\n    deletesInRAM.numTerms++;\n\n    deletesInRAM.addBytesUsed(BYTES_PER_DEL_TERM + term.text.length()*CHAR_NUM_BYTE);\n  }\n\n","sourceOld":"  // Buffer a term in bufferedDeleteTerms, which records the\n  // current number of documents buffered in ram so that the\n  // delete term will be applied to those documents as well\n  // as the disk segments.\n  synchronized private void addDeleteTerm(Term term, int docCount) {\n    BufferedDeletes.Num num = deletesInRAM.terms.get(term);\n    final int docIDUpto = flushedDocCount + docCount;\n    if (num == null)\n      deletesInRAM.terms.put(term, new BufferedDeletes.Num(docIDUpto));\n    else\n      num.setNum(docIDUpto);\n    deletesInRAM.numTerms++;\n\n    deletesInRAM.addBytesUsed(BYTES_PER_DEL_TERM + term.text.length()*CHAR_NUM_BYTE);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fde68de507dbf344495d7b5e8052866fe5f254ab":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b4e40ecf6eb9bff831572fe33a2758f9ef1e0dcc":["4404b358bf2902b2da0b8eef5ea0a68acd37674b"],"2558ddf9e14a97bc597f5b72bb3ecb5b7f6bba8e":["fde68de507dbf344495d7b5e8052866fe5f254ab"],"a2fc4b864a5dc2c630bb1fa94091e89e69f8f8be":["12fe55f989363c8ee170729238267f71b14f3b28"],"5a0af3a442be522899177e5e11384a45a6784a3f":["a2fc4b864a5dc2c630bb1fa94091e89e69f8f8be"],"4404b358bf2902b2da0b8eef5ea0a68acd37674b":["5a0af3a442be522899177e5e11384a45a6784a3f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["b4e40ecf6eb9bff831572fe33a2758f9ef1e0dcc"],"12fe55f989363c8ee170729238267f71b14f3b28":["2558ddf9e14a97bc597f5b72bb3ecb5b7f6bba8e"]},"commit2Childs":{"fde68de507dbf344495d7b5e8052866fe5f254ab":["2558ddf9e14a97bc597f5b72bb3ecb5b7f6bba8e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fde68de507dbf344495d7b5e8052866fe5f254ab"],"b4e40ecf6eb9bff831572fe33a2758f9ef1e0dcc":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"2558ddf9e14a97bc597f5b72bb3ecb5b7f6bba8e":["12fe55f989363c8ee170729238267f71b14f3b28"],"a2fc4b864a5dc2c630bb1fa94091e89e69f8f8be":["5a0af3a442be522899177e5e11384a45a6784a3f"],"5a0af3a442be522899177e5e11384a45a6784a3f":["4404b358bf2902b2da0b8eef5ea0a68acd37674b"],"4404b358bf2902b2da0b8eef5ea0a68acd37674b":["b4e40ecf6eb9bff831572fe33a2758f9ef1e0dcc"],"12fe55f989363c8ee170729238267f71b14f3b28":["a2fc4b864a5dc2c630bb1fa94091e89e69f8f8be"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}