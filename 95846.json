{"path":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getFirstLiveDoc(Terms,AtomicReader).mjava","commits":[{"id":"b6a0e3c1c21aac8ecf75706605133012833585c7","date":1347535263,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getFirstLiveDoc(Terms,AtomicReader).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getFirstLiveDoc(AtomicReader,String,Terms).mjava","sourceNew":"  // Just get a document with the term in it, the first one will do!\n  // Is there a better way to do this? Shouldn't actually be very costly\n  // to do it this way.\n  private static StoredDocument getFirstLiveDoc(Terms terms, AtomicReader reader) throws IOException {\n    DocsEnum docsEnum = null;\n    TermsEnum termsEnum = terms.iterator(null);\n    BytesRef text;\n    // Deal with the chance that the first bunch of terms are in deleted documents. Is there a better way?\n    for (int idx = 0; idx < 1000 && docsEnum == null; ++idx) {\n      text = termsEnum.next();\n      if (text == null) { // Ran off the end of the terms enum without finding any live docs with that field in them.\n        return null;\n      }\n      docsEnum = termsEnum.docs(reader.getLiveDocs(), docsEnum, 0);\n      if (docsEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n        return reader.document(docsEnum.docID());\n      }\n    }\n    return null;\n  }\n\n","sourceOld":"  // Just get a document with the term in it, the first one will do!\n  // Is there a better way to do this? Shouldn't actually be very costly\n  // to do it this way.\n  private static StoredDocument getFirstLiveDoc(AtomicReader reader, String fieldName, Terms terms) throws IOException {\n    DocsEnum docsEnum = null;\n    TermsEnum termsEnum = terms.iterator(null);\n    BytesRef text;\n    // Deal with the chance that the first bunch of terms are in deleted documents. Is there a better way?\n    for (int idx = 0; idx < 1000 && docsEnum == null; ++idx) {\n      text = termsEnum.next();\n      if (text == null) { // Ran off the end of the terms enum without finding any live docs with that field in them.\n        return null;\n      }\n      Term term = new Term(fieldName, text);\n      docsEnum = reader.termDocsEnum(reader.getLiveDocs(),\n          term.field(),\n          new BytesRef(term.text()),\n          0);\n      if (docsEnum != null) {\n        int docId;\n        if ((docId = docsEnum.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n          return reader.document(docId);\n        }\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"15250ca94ba8ab3bcdd476daf6bf3f3febb92640","date":1355200097,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getFirstLiveDoc(Terms,AtomicReader).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getFirstLiveDoc(Terms,AtomicReader).mjava","sourceNew":"  // Just get a document with the term in it, the first one will do!\n  // Is there a better way to do this? Shouldn't actually be very costly\n  // to do it this way.\n  private static StoredDocument getFirstLiveDoc(Terms terms, AtomicReader reader) throws IOException {\n    DocsEnum docsEnum = null;\n    TermsEnum termsEnum = terms.iterator(null);\n    BytesRef text;\n    // Deal with the chance that the first bunch of terms are in deleted documents. Is there a better way?\n    for (int idx = 0; idx < 1000 && docsEnum == null; ++idx) {\n      text = termsEnum.next();\n      if (text == null) { // Ran off the end of the terms enum without finding any live docs with that field in them.\n        return null;\n      }\n      docsEnum = termsEnum.docs(reader.getLiveDocs(), docsEnum, DocsEnum.FLAG_NONE);\n      if (docsEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n        return reader.document(docsEnum.docID());\n      }\n    }\n    return null;\n  }\n\n","sourceOld":"  // Just get a document with the term in it, the first one will do!\n  // Is there a better way to do this? Shouldn't actually be very costly\n  // to do it this way.\n  private static StoredDocument getFirstLiveDoc(Terms terms, AtomicReader reader) throws IOException {\n    DocsEnum docsEnum = null;\n    TermsEnum termsEnum = terms.iterator(null);\n    BytesRef text;\n    // Deal with the chance that the first bunch of terms are in deleted documents. Is there a better way?\n    for (int idx = 0; idx < 1000 && docsEnum == null; ++idx) {\n      text = termsEnum.next();\n      if (text == null) { // Ran off the end of the terms enum without finding any live docs with that field in them.\n        return null;\n      }\n      docsEnum = termsEnum.docs(reader.getLiveDocs(), docsEnum, 0);\n      if (docsEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n        return reader.document(docsEnum.docID());\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getFirstLiveDoc(Terms,AtomicReader).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getFirstLiveDoc(Terms,AtomicReader).mjava","sourceNew":"  // Just get a document with the term in it, the first one will do!\n  // Is there a better way to do this? Shouldn't actually be very costly\n  // to do it this way.\n  private static StoredDocument getFirstLiveDoc(Terms terms, AtomicReader reader) throws IOException {\n    DocsEnum docsEnum = null;\n    TermsEnum termsEnum = terms.iterator(null);\n    BytesRef text;\n    // Deal with the chance that the first bunch of terms are in deleted documents. Is there a better way?\n    for (int idx = 0; idx < 1000 && docsEnum == null; ++idx) {\n      text = termsEnum.next();\n      if (text == null) { // Ran off the end of the terms enum without finding any live docs with that field in them.\n        return null;\n      }\n      docsEnum = termsEnum.docs(reader.getLiveDocs(), docsEnum, DocsEnum.FLAG_NONE);\n      if (docsEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n        return reader.document(docsEnum.docID());\n      }\n    }\n    return null;\n  }\n\n","sourceOld":"  // Just get a document with the term in it, the first one will do!\n  // Is there a better way to do this? Shouldn't actually be very costly\n  // to do it this way.\n  private static StoredDocument getFirstLiveDoc(Terms terms, AtomicReader reader) throws IOException {\n    DocsEnum docsEnum = null;\n    TermsEnum termsEnum = terms.iterator(null);\n    BytesRef text;\n    // Deal with the chance that the first bunch of terms are in deleted documents. Is there a better way?\n    for (int idx = 0; idx < 1000 && docsEnum == null; ++idx) {\n      text = termsEnum.next();\n      if (text == null) { // Ran off the end of the terms enum without finding any live docs with that field in them.\n        return null;\n      }\n      docsEnum = termsEnum.docs(reader.getLiveDocs(), docsEnum, 0);\n      if (docsEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n        return reader.document(docsEnum.docID());\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":4,"author":"Ryan Ernst","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getFirstLiveDoc(Terms,AtomicReader).mjava","sourceNew":null,"sourceOld":"  // Just get a document with the term in it, the first one will do!\n  // Is there a better way to do this? Shouldn't actually be very costly\n  // to do it this way.\n  private static StoredDocument getFirstLiveDoc(Terms terms, AtomicReader reader) throws IOException {\n    DocsEnum docsEnum = null;\n    TermsEnum termsEnum = terms.iterator(null);\n    BytesRef text;\n    // Deal with the chance that the first bunch of terms are in deleted documents. Is there a better way?\n    for (int idx = 0; idx < 1000 && docsEnum == null; ++idx) {\n      text = termsEnum.next();\n      if (text == null) { // Ran off the end of the terms enum without finding any live docs with that field in them.\n        return null;\n      }\n      docsEnum = termsEnum.docs(reader.getLiveDocs(), docsEnum, DocsEnum.FLAG_NONE);\n      if (docsEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n        return reader.document(docsEnum.docID());\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["b6a0e3c1c21aac8ecf75706605133012833585c7","15250ca94ba8ab3bcdd476daf6bf3f3febb92640"],"15250ca94ba8ab3bcdd476daf6bf3f3febb92640":["b6a0e3c1c21aac8ecf75706605133012833585c7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b6a0e3c1c21aac8ecf75706605133012833585c7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["15250ca94ba8ab3bcdd476daf6bf3f3febb92640"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c9fb5f46e264daf5ba3860defe623a89d202dd87"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"15250ca94ba8ab3bcdd476daf6bf3f3febb92640":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","c9fb5f46e264daf5ba3860defe623a89d202dd87"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b6a0e3c1c21aac8ecf75706605133012833585c7"],"b6a0e3c1c21aac8ecf75706605133012833585c7":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","15250ca94ba8ab3bcdd476daf6bf3f3febb92640"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}