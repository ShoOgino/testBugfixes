{"path":"lucene/core/src/test/org/apache/lucene/search/TestPhraseQuery#beforeClass().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestPhraseQuery#beforeClass().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestPhraseQuery#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    directory = newDirectory();\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        return new TokenStreamComponents(new MockTokenizer(reader, MockTokenizer.WHITESPACE, false));\n      }\n\n      @Override\n      public int getPositionIncrementGap(String fieldName) {\n        return 100;\n      }\n    };\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory, analyzer);\n    \n    Document doc = new Document();\n    doc.add(newField(\"field\", \"one two three four five\", TextField.TYPE_STORED));\n    doc.add(newField(\"repeated\", \"this is a repeated field - first part\", TextField.TYPE_STORED));\n    IndexableField repeatedField = newField(\"repeated\", \"second part of a repeated field\", TextField.TYPE_STORED);\n    doc.add(repeatedField);\n    doc.add(newField(\"palindrome\", \"one two three two one\", TextField.TYPE_STORED));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(newField(\"nonexist\", \"phrase exist notexist exist found\", TextField.TYPE_STORED));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(newField(\"nonexist\", \"phrase exist notexist exist found\", TextField.TYPE_STORED));\n    writer.addDocument(doc);\n\n    reader = writer.getReader();\n    writer.close();\n\n    searcher = newSearcher(reader);\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    directory = newDirectory();\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        return new TokenStreamComponents(new MockTokenizer(reader, MockTokenizer.WHITESPACE, false));\n      }\n\n      @Override\n      public int getPositionIncrementGap(String fieldName) {\n        return 100;\n      }\n    };\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory, analyzer);\n    \n    Document doc = new Document();\n    doc.add(newField(\"field\", \"one two three four five\", TextField.TYPE_STORED));\n    doc.add(newField(\"repeated\", \"this is a repeated field - first part\", TextField.TYPE_STORED));\n    IndexableField repeatedField = newField(\"repeated\", \"second part of a repeated field\", TextField.TYPE_STORED);\n    doc.add(repeatedField);\n    doc.add(newField(\"palindrome\", \"one two three two one\", TextField.TYPE_STORED));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(newField(\"nonexist\", \"phrase exist notexist exist found\", TextField.TYPE_STORED));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(newField(\"nonexist\", \"phrase exist notexist exist found\", TextField.TYPE_STORED));\n    writer.addDocument(doc);\n\n    reader = writer.getReader();\n    writer.close();\n\n    searcher = newSearcher(reader);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestPhraseQuery#beforeClass().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestPhraseQuery#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    directory = newDirectory();\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        return new TokenStreamComponents(new MockTokenizer(reader, MockTokenizer.WHITESPACE, false));\n      }\n\n      @Override\n      public int getPositionIncrementGap(String fieldName) {\n        return 100;\n      }\n    };\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory, analyzer);\n    \n    Document doc = new Document();\n    doc.add(newField(\"field\", \"one two three four five\", TextField.TYPE_STORED));\n    doc.add(newField(\"repeated\", \"this is a repeated field - first part\", TextField.TYPE_STORED));\n    IndexableField repeatedField = newField(\"repeated\", \"second part of a repeated field\", TextField.TYPE_STORED);\n    doc.add(repeatedField);\n    doc.add(newField(\"palindrome\", \"one two three two one\", TextField.TYPE_STORED));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(newField(\"nonexist\", \"phrase exist notexist exist found\", TextField.TYPE_STORED));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(newField(\"nonexist\", \"phrase exist notexist exist found\", TextField.TYPE_STORED));\n    writer.addDocument(doc);\n\n    reader = writer.getReader();\n    writer.close();\n\n    searcher = newSearcher(reader);\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    directory = newDirectory();\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        return new TokenStreamComponents(new MockTokenizer(reader, MockTokenizer.WHITESPACE, false));\n      }\n\n      @Override\n      public int getPositionIncrementGap(String fieldName) {\n        return 100;\n      }\n    };\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory, analyzer);\n    \n    Document doc = new Document();\n    doc.add(newField(\"field\", \"one two three four five\", TextField.TYPE_STORED));\n    doc.add(newField(\"repeated\", \"this is a repeated field - first part\", TextField.TYPE_STORED));\n    IndexableField repeatedField = newField(\"repeated\", \"second part of a repeated field\", TextField.TYPE_STORED);\n    doc.add(repeatedField);\n    doc.add(newField(\"palindrome\", \"one two three two one\", TextField.TYPE_STORED));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(newField(\"nonexist\", \"phrase exist notexist exist found\", TextField.TYPE_STORED));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(newField(\"nonexist\", \"phrase exist notexist exist found\", TextField.TYPE_STORED));\n    writer.addDocument(doc);\n\n    reader = writer.getReader();\n    writer.close();\n\n    searcher = newSearcher(reader);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"04f07771a2a7dd3a395700665ed839c3dae2def2","date":1339350139,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestPhraseQuery#beforeClass().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestPhraseQuery#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    directory = newDirectory();\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        return new TokenStreamComponents(new MockTokenizer(reader, MockTokenizer.WHITESPACE, false));\n      }\n\n      @Override\n      public int getPositionIncrementGap(String fieldName) {\n        return 100;\n      }\n    };\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory, analyzer);\n    \n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"one two three four five\", Field.Store.YES));\n    doc.add(newTextField(\"repeated\", \"this is a repeated field - first part\", Field.Store.YES));\n    IndexableField repeatedField = newTextField(\"repeated\", \"second part of a repeated field\", Field.Store.YES);\n    doc.add(repeatedField);\n    doc.add(newTextField(\"palindrome\", \"one two three two one\", Field.Store.YES));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(newTextField(\"nonexist\", \"phrase exist notexist exist found\", Field.Store.YES));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(newTextField(\"nonexist\", \"phrase exist notexist exist found\", Field.Store.YES));\n    writer.addDocument(doc);\n\n    reader = writer.getReader();\n    writer.close();\n\n    searcher = newSearcher(reader);\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    directory = newDirectory();\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        return new TokenStreamComponents(new MockTokenizer(reader, MockTokenizer.WHITESPACE, false));\n      }\n\n      @Override\n      public int getPositionIncrementGap(String fieldName) {\n        return 100;\n      }\n    };\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory, analyzer);\n    \n    Document doc = new Document();\n    doc.add(newField(\"field\", \"one two three four five\", TextField.TYPE_STORED));\n    doc.add(newField(\"repeated\", \"this is a repeated field - first part\", TextField.TYPE_STORED));\n    IndexableField repeatedField = newField(\"repeated\", \"second part of a repeated field\", TextField.TYPE_STORED);\n    doc.add(repeatedField);\n    doc.add(newField(\"palindrome\", \"one two three two one\", TextField.TYPE_STORED));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(newField(\"nonexist\", \"phrase exist notexist exist found\", TextField.TYPE_STORED));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(newField(\"nonexist\", \"phrase exist notexist exist found\", TextField.TYPE_STORED));\n    writer.addDocument(doc);\n\n    reader = writer.getReader();\n    writer.close();\n\n    searcher = newSearcher(reader);\n  }\n\n","bugFix":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"409324b31a1419d7c05a38211168cf317e39be77","date":1344866765,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestPhraseQuery#beforeClass().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestPhraseQuery#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    directory = newDirectory();\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        return new TokenStreamComponents(new MockTokenizer(reader, MockTokenizer.WHITESPACE, false));\n      }\n\n      @Override\n      public int getPositionIncrementGap(String fieldName) {\n        return 100;\n      }\n    };\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory, analyzer);\n    \n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"one two three four five\", Field.Store.YES));\n    doc.add(newTextField(\"repeated\", \"this is a repeated field - first part\", Field.Store.YES));\n    Field repeatedField = newTextField(\"repeated\", \"second part of a repeated field\", Field.Store.YES);\n    doc.add(repeatedField);\n    doc.add(newTextField(\"palindrome\", \"one two three two one\", Field.Store.YES));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(newTextField(\"nonexist\", \"phrase exist notexist exist found\", Field.Store.YES));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(newTextField(\"nonexist\", \"phrase exist notexist exist found\", Field.Store.YES));\n    writer.addDocument(doc);\n\n    reader = writer.getReader();\n    writer.close();\n\n    searcher = newSearcher(reader);\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    directory = newDirectory();\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        return new TokenStreamComponents(new MockTokenizer(reader, MockTokenizer.WHITESPACE, false));\n      }\n\n      @Override\n      public int getPositionIncrementGap(String fieldName) {\n        return 100;\n      }\n    };\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory, analyzer);\n    \n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"one two three four five\", Field.Store.YES));\n    doc.add(newTextField(\"repeated\", \"this is a repeated field - first part\", Field.Store.YES));\n    IndexableField repeatedField = newTextField(\"repeated\", \"second part of a repeated field\", Field.Store.YES);\n    doc.add(repeatedField);\n    doc.add(newTextField(\"palindrome\", \"one two three two one\", Field.Store.YES));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(newTextField(\"nonexist\", \"phrase exist notexist exist found\", Field.Store.YES));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(newTextField(\"nonexist\", \"phrase exist notexist exist found\", Field.Store.YES));\n    writer.addDocument(doc);\n\n    reader = writer.getReader();\n    writer.close();\n\n    searcher = newSearcher(reader);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1d028314cced5858683a1bb4741423d0f934257b","date":1346596535,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestPhraseQuery#beforeClass().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestPhraseQuery#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    directory = newDirectory();\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        return new TokenStreamComponents(new MockTokenizer(reader, MockTokenizer.WHITESPACE, false));\n      }\n\n      @Override\n      public int getPositionIncrementGap(String fieldName) {\n        return 100;\n      }\n    };\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory, analyzer);\n    \n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"one two three four five\", Field.Store.YES));\n    doc.add(newTextField(\"repeated\", \"this is a repeated field - first part\", Field.Store.YES));\n    Field repeatedField = newTextField(\"repeated\", \"second part of a repeated field\", Field.Store.YES);\n    doc.add(repeatedField);\n    doc.add(newTextField(\"palindrome\", \"one two three two one\", Field.Store.YES));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(newTextField(\"nonexist\", \"phrase exist notexist exist found\", Field.Store.YES));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(newTextField(\"nonexist\", \"phrase exist notexist exist found\", Field.Store.YES));\n    writer.addDocument(doc);\n\n    reader = writer.getReader();\n    writer.close();\n\n    searcher = newSearcher(reader);\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    directory = newDirectory();\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        return new TokenStreamComponents(new MockTokenizer(reader, MockTokenizer.WHITESPACE, false));\n      }\n\n      @Override\n      public int getPositionIncrementGap(String fieldName) {\n        return 100;\n      }\n    };\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory, analyzer);\n    \n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"one two three four five\", Field.Store.YES));\n    doc.add(newTextField(\"repeated\", \"this is a repeated field - first part\", Field.Store.YES));\n    IndexableField repeatedField = newTextField(\"repeated\", \"second part of a repeated field\", Field.Store.YES);\n    doc.add(repeatedField);\n    doc.add(newTextField(\"palindrome\", \"one two three two one\", Field.Store.YES));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(newTextField(\"nonexist\", \"phrase exist notexist exist found\", Field.Store.YES));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(newTextField(\"nonexist\", \"phrase exist notexist exist found\", Field.Store.YES));\n    writer.addDocument(doc);\n\n    reader = writer.getReader();\n    writer.close();\n\n    searcher = newSearcher(reader);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338","date":1389274049,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestPhraseQuery#beforeClass().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestPhraseQuery#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    directory = newDirectory();\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStreamComponents createComponents(String fieldName) {\n        return new TokenStreamComponents(new MockTokenizer(MockTokenizer.WHITESPACE, false));\n      }\n\n      @Override\n      public int getPositionIncrementGap(String fieldName) {\n        return 100;\n      }\n    };\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory, analyzer);\n    \n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"one two three four five\", Field.Store.YES));\n    doc.add(newTextField(\"repeated\", \"this is a repeated field - first part\", Field.Store.YES));\n    Field repeatedField = newTextField(\"repeated\", \"second part of a repeated field\", Field.Store.YES);\n    doc.add(repeatedField);\n    doc.add(newTextField(\"palindrome\", \"one two three two one\", Field.Store.YES));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(newTextField(\"nonexist\", \"phrase exist notexist exist found\", Field.Store.YES));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(newTextField(\"nonexist\", \"phrase exist notexist exist found\", Field.Store.YES));\n    writer.addDocument(doc);\n\n    reader = writer.getReader();\n    writer.close();\n\n    searcher = newSearcher(reader);\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    directory = newDirectory();\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        return new TokenStreamComponents(new MockTokenizer(reader, MockTokenizer.WHITESPACE, false));\n      }\n\n      @Override\n      public int getPositionIncrementGap(String fieldName) {\n        return 100;\n      }\n    };\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory, analyzer);\n    \n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"one two three four five\", Field.Store.YES));\n    doc.add(newTextField(\"repeated\", \"this is a repeated field - first part\", Field.Store.YES));\n    Field repeatedField = newTextField(\"repeated\", \"second part of a repeated field\", Field.Store.YES);\n    doc.add(repeatedField);\n    doc.add(newTextField(\"palindrome\", \"one two three two one\", Field.Store.YES));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(newTextField(\"nonexist\", \"phrase exist notexist exist found\", Field.Store.YES));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(newTextField(\"nonexist\", \"phrase exist notexist exist found\", Field.Store.YES));\n    writer.addDocument(doc);\n\n    reader = writer.getReader();\n    writer.close();\n\n    searcher = newSearcher(reader);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestPhraseQuery#beforeClass().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestPhraseQuery#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    directory = newDirectory();\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStreamComponents createComponents(String fieldName) {\n        return new TokenStreamComponents(new MockTokenizer(MockTokenizer.WHITESPACE, false));\n      }\n\n      @Override\n      public int getPositionIncrementGap(String fieldName) {\n        return 100;\n      }\n    };\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory, analyzer);\n    \n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"one two three four five\", Field.Store.YES));\n    doc.add(newTextField(\"repeated\", \"this is a repeated field - first part\", Field.Store.YES));\n    Field repeatedField = newTextField(\"repeated\", \"second part of a repeated field\", Field.Store.YES);\n    doc.add(repeatedField);\n    doc.add(newTextField(\"palindrome\", \"one two three two one\", Field.Store.YES));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(newTextField(\"nonexist\", \"phrase exist notexist exist found\", Field.Store.YES));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(newTextField(\"nonexist\", \"phrase exist notexist exist found\", Field.Store.YES));\n    writer.addDocument(doc);\n\n    reader = writer.getReader();\n    writer.shutdown();\n\n    searcher = newSearcher(reader);\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    directory = newDirectory();\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStreamComponents createComponents(String fieldName) {\n        return new TokenStreamComponents(new MockTokenizer(MockTokenizer.WHITESPACE, false));\n      }\n\n      @Override\n      public int getPositionIncrementGap(String fieldName) {\n        return 100;\n      }\n    };\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory, analyzer);\n    \n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"one two three four five\", Field.Store.YES));\n    doc.add(newTextField(\"repeated\", \"this is a repeated field - first part\", Field.Store.YES));\n    Field repeatedField = newTextField(\"repeated\", \"second part of a repeated field\", Field.Store.YES);\n    doc.add(repeatedField);\n    doc.add(newTextField(\"palindrome\", \"one two three two one\", Field.Store.YES));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(newTextField(\"nonexist\", \"phrase exist notexist exist found\", Field.Store.YES));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(newTextField(\"nonexist\", \"phrase exist notexist exist found\", Field.Store.YES));\n    writer.addDocument(doc);\n\n    reader = writer.getReader();\n    writer.close();\n\n    searcher = newSearcher(reader);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestPhraseQuery#beforeClass().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestPhraseQuery#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    directory = newDirectory();\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStreamComponents createComponents(String fieldName) {\n        return new TokenStreamComponents(new MockTokenizer(MockTokenizer.WHITESPACE, false));\n      }\n\n      @Override\n      public int getPositionIncrementGap(String fieldName) {\n        return 100;\n      }\n    };\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory, analyzer);\n    \n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"one two three four five\", Field.Store.YES));\n    doc.add(newTextField(\"repeated\", \"this is a repeated field - first part\", Field.Store.YES));\n    Field repeatedField = newTextField(\"repeated\", \"second part of a repeated field\", Field.Store.YES);\n    doc.add(repeatedField);\n    doc.add(newTextField(\"palindrome\", \"one two three two one\", Field.Store.YES));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(newTextField(\"nonexist\", \"phrase exist notexist exist found\", Field.Store.YES));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(newTextField(\"nonexist\", \"phrase exist notexist exist found\", Field.Store.YES));\n    writer.addDocument(doc);\n\n    reader = writer.getReader();\n    writer.close();\n\n    searcher = newSearcher(reader);\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    directory = newDirectory();\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStreamComponents createComponents(String fieldName) {\n        return new TokenStreamComponents(new MockTokenizer(MockTokenizer.WHITESPACE, false));\n      }\n\n      @Override\n      public int getPositionIncrementGap(String fieldName) {\n        return 100;\n      }\n    };\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory, analyzer);\n    \n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"one two three four five\", Field.Store.YES));\n    doc.add(newTextField(\"repeated\", \"this is a repeated field - first part\", Field.Store.YES));\n    Field repeatedField = newTextField(\"repeated\", \"second part of a repeated field\", Field.Store.YES);\n    doc.add(repeatedField);\n    doc.add(newTextField(\"palindrome\", \"one two three two one\", Field.Store.YES));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(newTextField(\"nonexist\", \"phrase exist notexist exist found\", Field.Store.YES));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(newTextField(\"nonexist\", \"phrase exist notexist exist found\", Field.Store.YES));\n    writer.addDocument(doc);\n\n    reader = writer.getReader();\n    writer.shutdown();\n\n    searcher = newSearcher(reader);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1","date":1457644139,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestPhraseQuery#beforeClass().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestPhraseQuery#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    directory = newDirectory();\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStreamComponents createComponents(String fieldName) {\n        return new TokenStreamComponents(new MockTokenizer(MockTokenizer.WHITESPACE, false));\n      }\n\n      @Override\n      public int getPositionIncrementGap(String fieldName) {\n        return 100;\n      }\n    };\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory, analyzer);\n    \n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"one two three four five\", Field.Store.YES));\n    doc.add(newTextField(\"repeated\", \"this is a repeated field - first part\", Field.Store.YES));\n    Field repeatedField = newTextField(\"repeated\", \"second part of a repeated field\", Field.Store.YES);\n    doc.add(repeatedField);\n    doc.add(newTextField(\"palindrome\", \"one two three two one\", Field.Store.YES));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(newTextField(\"nonexist\", \"phrase exist notexist exist found\", Field.Store.YES));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(newTextField(\"nonexist\", \"phrase exist notexist exist found\", Field.Store.YES));\n    writer.addDocument(doc);\n\n    reader = writer.getReader();\n    writer.close();\n\n    searcher = new IndexSearcher(reader);\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    directory = newDirectory();\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStreamComponents createComponents(String fieldName) {\n        return new TokenStreamComponents(new MockTokenizer(MockTokenizer.WHITESPACE, false));\n      }\n\n      @Override\n      public int getPositionIncrementGap(String fieldName) {\n        return 100;\n      }\n    };\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory, analyzer);\n    \n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"one two three four five\", Field.Store.YES));\n    doc.add(newTextField(\"repeated\", \"this is a repeated field - first part\", Field.Store.YES));\n    Field repeatedField = newTextField(\"repeated\", \"second part of a repeated field\", Field.Store.YES);\n    doc.add(repeatedField);\n    doc.add(newTextField(\"palindrome\", \"one two three two one\", Field.Store.YES));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(newTextField(\"nonexist\", \"phrase exist notexist exist found\", Field.Store.YES));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(newTextField(\"nonexist\", \"phrase exist notexist exist found\", Field.Store.YES));\n    writer.addDocument(doc);\n\n    reader = writer.getReader();\n    writer.close();\n\n    searcher = newSearcher(reader);\n  }\n\n","bugFix":["0762b640e0d0d12b6edb96db68986e13145c3484"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"04f07771a2a7dd3a395700665ed839c3dae2def2":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"409324b31a1419d7c05a38211168cf317e39be77":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"1d028314cced5858683a1bb4741423d0f934257b":["04f07771a2a7dd3a395700665ed839c3dae2def2","409324b31a1419d7c05a38211168cf317e39be77"],"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338":["1d028314cced5858683a1bb4741423d0f934257b"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["ae889fd5c8a69f6b5d130d3c895bfa5b04d07338"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"]},"commit2Childs":{"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"04f07771a2a7dd3a395700665ed839c3dae2def2":["409324b31a1419d7c05a38211168cf317e39be77","1d028314cced5858683a1bb4741423d0f934257b"],"409324b31a1419d7c05a38211168cf317e39be77":["1d028314cced5858683a1bb4741423d0f934257b"],"1d028314cced5858683a1bb4741423d0f934257b":["ae889fd5c8a69f6b5d130d3c895bfa5b04d07338"],"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}