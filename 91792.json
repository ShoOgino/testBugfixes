{"path":"lucene/facet/src/java/org/apache/lucene/facet/range/Range#getQuery(ValueSource).mjava","commits":[{"id":"dd6be878365e339c75cc43ad7d5df95ab4ea21e5","date":1435762101,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/range/Range#getQuery(ValueSource).mjava","pathOld":"/dev/null","sourceNew":"  /** Returns a new {@link Query} accepting only documents\n   *  in this range.  This query might not be very efficient\n   *  when run on its own since it is optimized towards\n   *  random-access, so it is best used either with\n   *  {@link DrillDownQuery#add(String, Query) DrillDownQuery}\n   *  or when intersected with another query that can lead the\n   *  iteration.  If the {@link ValueSource} is static, e.g. an\n   *  indexed numeric field, then it may be more efficient to\n   *  use {@link NumericRangeQuery}. */\n  public Query getQuery(ValueSource valueSource) {\n    return getQuery(null, valueSource);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"770342641f7b505eaa8dccdc666158bff2419109","date":1449868421,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/range/Range#getQuery(ValueSource).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/range/Range#getQuery(ValueSource).mjava","sourceNew":"  /** Returns a new {@link Query} accepting only documents\n   *  in this range.  This query might not be very efficient\n   *  when run on its own since it is optimized towards\n   *  random-access, so it is best used either with\n   *  {@link DrillDownQuery#add(String, Query) DrillDownQuery}\n   *  or when intersected with another query that can lead the\n   *  iteration.  If the {@link ValueSource} is static, e.g. an\n   *  indexed numeric field, then it may be more efficient to\n   *  use {@link DimensionalRangeQuery}. */\n  public Query getQuery(ValueSource valueSource) {\n    return getQuery(null, valueSource);\n  }\n\n","sourceOld":"  /** Returns a new {@link Query} accepting only documents\n   *  in this range.  This query might not be very efficient\n   *  when run on its own since it is optimized towards\n   *  random-access, so it is best used either with\n   *  {@link DrillDownQuery#add(String, Query) DrillDownQuery}\n   *  or when intersected with another query that can lead the\n   *  iteration.  If the {@link ValueSource} is static, e.g. an\n   *  indexed numeric field, then it may be more efficient to\n   *  use {@link NumericRangeQuery}. */\n  public Query getQuery(ValueSource valueSource) {\n    return getQuery(null, valueSource);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cab7a79353f33d1a94cd307bf33aa5148601ebe6","date":1453391888,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/range/Range#getQuery(ValueSource).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/range/Range#getQuery(ValueSource).mjava","sourceNew":"  /** Returns a new {@link Query} accepting only documents\n   *  in this range.  This query might not be very efficient\n   *  when run on its own since it is optimized towards\n   *  random-access, so it is best used either with\n   *  {@link DrillDownQuery#add(String, Query) DrillDownQuery}\n   *  or when intersected with another query that can lead the\n   *  iteration.  If the {@link ValueSource} is static, e.g. an\n   *  indexed numeric field, then it may be more efficient to\n   *  use {@link org.apache.lucene.search.PointRangeQuery}. */\n  public Query getQuery(ValueSource valueSource) {\n    return getQuery(null, valueSource);\n  }\n\n","sourceOld":"  /** Returns a new {@link Query} accepting only documents\n   *  in this range.  This query might not be very efficient\n   *  when run on its own since it is optimized towards\n   *  random-access, so it is best used either with\n   *  {@link DrillDownQuery#add(String, Query) DrillDownQuery}\n   *  or when intersected with another query that can lead the\n   *  iteration.  If the {@link ValueSource} is static, e.g. an\n   *  indexed numeric field, then it may be more efficient to\n   *  use {@link DimensionalRangeQuery}. */\n  public Query getQuery(ValueSource valueSource) {\n    return getQuery(null, valueSource);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9cf250cb8fdff62f4b753866d44e5bf59bfd1616","date":1483789944,"type":4,"author":"Alan Woodward","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/range/Range#getQuery(ValueSource).mjava","sourceNew":null,"sourceOld":"  /** Returns a new {@link Query} accepting only documents\n   *  in this range.  This query might not be very efficient\n   *  when run on its own since it is optimized towards\n   *  random-access, so it is best used either with\n   *  {@link DrillDownQuery#add(String, Query) DrillDownQuery}\n   *  or when intersected with another query that can lead the\n   *  iteration.  If the {@link ValueSource} is static, e.g. an\n   *  indexed numeric field, then it may be more efficient to\n   *  use {@link org.apache.lucene.search.PointRangeQuery}. */\n  public Query getQuery(ValueSource valueSource) {\n    return getQuery(null, valueSource);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","date":1484239864,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/range/Range#getQuery(ValueSource).mjava","sourceNew":null,"sourceOld":"  /** Returns a new {@link Query} accepting only documents\n   *  in this range.  This query might not be very efficient\n   *  when run on its own since it is optimized towards\n   *  random-access, so it is best used either with\n   *  {@link DrillDownQuery#add(String, Query) DrillDownQuery}\n   *  or when intersected with another query that can lead the\n   *  iteration.  If the {@link ValueSource} is static, e.g. an\n   *  indexed numeric field, then it may be more efficient to\n   *  use {@link org.apache.lucene.search.PointRangeQuery}. */\n  public Query getQuery(ValueSource valueSource) {\n    return getQuery(null, valueSource);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"cab7a79353f33d1a94cd307bf33aa5148601ebe6":["770342641f7b505eaa8dccdc666158bff2419109"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7":["cab7a79353f33d1a94cd307bf33aa5148601ebe6","9cf250cb8fdff62f4b753866d44e5bf59bfd1616"],"9cf250cb8fdff62f4b753866d44e5bf59bfd1616":["cab7a79353f33d1a94cd307bf33aa5148601ebe6"],"770342641f7b505eaa8dccdc666158bff2419109":["dd6be878365e339c75cc43ad7d5df95ab4ea21e5"],"dd6be878365e339c75cc43ad7d5df95ab4ea21e5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9cf250cb8fdff62f4b753866d44e5bf59bfd1616"]},"commit2Childs":{"cab7a79353f33d1a94cd307bf33aa5148601ebe6":["09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","9cf250cb8fdff62f4b753866d44e5bf59bfd1616"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["dd6be878365e339c75cc43ad7d5df95ab4ea21e5"],"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7":[],"9cf250cb8fdff62f4b753866d44e5bf59bfd1616":["09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"770342641f7b505eaa8dccdc666158bff2419109":["cab7a79353f33d1a94cd307bf33aa5148601ebe6"],"dd6be878365e339c75cc43ad7d5df95ab4ea21e5":["770342641f7b505eaa8dccdc666158bff2419109"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}