{"path":"solr/test-framework/src/java/org/apache/solr/cloud/ChaosMonkey#kill(CloudJettyRunner).mjava","commits":[{"id":"2c30e4c1cee08b3b229a77991882594fe7250b66","date":1344448871,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/ChaosMonkey#kill(CloudJettyRunner).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ChaosMonkey#kill(CloudJettyRunner).mjava","sourceNew":"  public static void kill(CloudJettyRunner cjetty) throws Exception {\n    JettySolrRunner jetty = cjetty.jetty;\n    monkeyLog(\"kill shard! \" + jetty.getLocalPort());\n    FilterHolder fh = jetty.getDispatchFilter();\n    SolrDispatchFilter sdf = null;\n    if (fh != null) {\n      sdf = (SolrDispatchFilter) fh.getFilter();\n    }\n    jetty.stop();\n    \n    if (sdf != null) {\n      sdf.destroy();\n    }\n    \n    if (!jetty.isStopped()) {\n      throw new RuntimeException(\"could not kill jetty\");\n    }\n  }\n\n","sourceOld":"  public static void kill(CloudJettyRunner cjetty) throws Exception {\n    JettySolrRunner jetty = cjetty.jetty;\n    monkeyLog(\"kill shard! \" + jetty.getLocalPort());\n    FilterHolder fh = jetty.getDispatchFilter();\n    SolrDispatchFilter sdf = null;\n    if (fh != null) {\n      sdf = (SolrDispatchFilter) fh.getFilter();\n    }\n    jetty.stop();\n    \n    if (sdf != null) {\n      sdf.destroy();\n    }\n    \n    if (!jetty.isStopped()) {\n      throw new RuntimeException(\"could not kill jetty\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":1,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/ChaosMonkey#kill(CloudJettyRunner).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ChaosMonkey#kill(CloudJettyRunner).mjava","sourceNew":"  public static void kill(CloudJettyRunner cjetty) throws Exception {\n    JettySolrRunner jetty = cjetty.jetty;\n    monkeyLog(\"kill shard! \" + jetty.getLocalPort());\n    FilterHolder fh = jetty.getDispatchFilter();\n    SolrDispatchFilter sdf = null;\n    if (fh != null) {\n      sdf = (SolrDispatchFilter) fh.getFilter();\n    }\n    jetty.stop();\n    \n    if (sdf != null) {\n      sdf.destroy();\n    }\n    \n    if (!jetty.isStopped()) {\n      throw new RuntimeException(\"could not kill jetty\");\n    }\n  }\n\n","sourceOld":"  public static void kill(CloudJettyRunner cjetty) throws Exception {\n    JettySolrRunner jetty = cjetty.jetty;\n    monkeyLog(\"kill shard! \" + jetty.getLocalPort());\n    FilterHolder fh = jetty.getDispatchFilter();\n    SolrDispatchFilter sdf = null;\n    if (fh != null) {\n      sdf = (SolrDispatchFilter) fh.getFilter();\n    }\n    jetty.stop();\n    \n    if (sdf != null) {\n      sdf.destroy();\n    }\n    \n    if (!jetty.isStopped()) {\n      throw new RuntimeException(\"could not kill jetty\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7869f64c874ebf7f317d22c00baf2b6857797a6","date":1344856617,"type":1,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/ChaosMonkey#kill(CloudJettyRunner).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ChaosMonkey#kill(CloudJettyRunner).mjava","sourceNew":"  public static void kill(CloudJettyRunner cjetty) throws Exception {\n    JettySolrRunner jetty = cjetty.jetty;\n    monkeyLog(\"kill shard! \" + jetty.getLocalPort());\n    FilterHolder fh = jetty.getDispatchFilter();\n    SolrDispatchFilter sdf = null;\n    if (fh != null) {\n      sdf = (SolrDispatchFilter) fh.getFilter();\n    }\n    jetty.stop();\n    \n    if (sdf != null) {\n      sdf.destroy();\n    }\n    \n    if (!jetty.isStopped()) {\n      throw new RuntimeException(\"could not kill jetty\");\n    }\n  }\n\n","sourceOld":"  public static void kill(CloudJettyRunner cjetty) throws Exception {\n    JettySolrRunner jetty = cjetty.jetty;\n    monkeyLog(\"kill shard! \" + jetty.getLocalPort());\n    FilterHolder fh = jetty.getDispatchFilter();\n    SolrDispatchFilter sdf = null;\n    if (fh != null) {\n      sdf = (SolrDispatchFilter) fh.getFilter();\n    }\n    jetty.stop();\n    \n    if (sdf != null) {\n      sdf.destroy();\n    }\n    \n    if (!jetty.isStopped()) {\n      throw new RuntimeException(\"could not kill jetty\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6013b4c7388f1627659c8f96c44abd10a294d3a6","date":1346343796,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/ChaosMonkey#kill(CloudJettyRunner).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/ChaosMonkey#kill(CloudJettyRunner).mjava","sourceNew":"  public static void kill(CloudJettyRunner cjetty) throws Exception {\n    JettySolrRunner jetty = cjetty.jetty;\n    monkeyLog(\"kill shard! \" + jetty.getLocalPort());\n    \n    jetty.stop();\n    \n    stop(jetty);\n    \n    if (!jetty.isStopped()) {\n      throw new RuntimeException(\"could not kill jetty\");\n    }\n  }\n\n","sourceOld":"  public static void kill(CloudJettyRunner cjetty) throws Exception {\n    JettySolrRunner jetty = cjetty.jetty;\n    monkeyLog(\"kill shard! \" + jetty.getLocalPort());\n    FilterHolder fh = jetty.getDispatchFilter();\n    SolrDispatchFilter sdf = null;\n    if (fh != null) {\n      sdf = (SolrDispatchFilter) fh.getFilter();\n    }\n    jetty.stop();\n    \n    if (sdf != null) {\n      sdf.destroy();\n    }\n    \n    if (!jetty.isStopped()) {\n      throw new RuntimeException(\"could not kill jetty\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"05a14b2611ead08655a2b2bdc61632eb31316e57","date":1346366621,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/ChaosMonkey#kill(CloudJettyRunner).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/ChaosMonkey#kill(CloudJettyRunner).mjava","sourceNew":"  public static void kill(CloudJettyRunner cjetty) throws Exception {\n    JettySolrRunner jetty = cjetty.jetty;\n    monkeyLog(\"kill shard! \" + jetty.getLocalPort());\n    \n    jetty.stop();\n    \n    stop(jetty);\n    \n    if (!jetty.isStopped()) {\n      throw new RuntimeException(\"could not kill jetty\");\n    }\n  }\n\n","sourceOld":"  public static void kill(CloudJettyRunner cjetty) throws Exception {\n    JettySolrRunner jetty = cjetty.jetty;\n    monkeyLog(\"kill shard! \" + jetty.getLocalPort());\n    FilterHolder fh = jetty.getDispatchFilter();\n    SolrDispatchFilter sdf = null;\n    if (fh != null) {\n      sdf = (SolrDispatchFilter) fh.getFilter();\n    }\n    jetty.stop();\n    \n    if (sdf != null) {\n      sdf.destroy();\n    }\n    \n    if (!jetty.isStopped()) {\n      throw new RuntimeException(\"could not kill jetty\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b28f0928f1f17bf5af380ad693363268fbb7b91","date":1385935125,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/ChaosMonkey#kill(CloudJettyRunner).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/ChaosMonkey#kill(CloudJettyRunner).mjava","sourceNew":"  public static void kill(CloudJettyRunner cjetty) throws Exception {\n    FilterHolder filterHolder = cjetty.jetty.getDispatchFilter();\n    if (filterHolder != null) {\n      Filter filter = filterHolder.getFilter();\n      if (filter != null) {\n        CoreContainer cores = ((SolrDispatchFilter) filter).getCores();\n        if (cores != null) {\n          int zklocalport = ((InetSocketAddress) cores.getZkController()\n              .getZkClient().getSolrZooKeeper().getSocketAddress()).getPort();\n          IpTables.blockPort(zklocalport);\n        }\n      }\n    }\n\n    IpTables.blockPort(cjetty.jetty.getLocalPort());\n    \n    JettySolrRunner jetty = cjetty.jetty;\n    monkeyLog(\"kill shard! \" + jetty.getLocalPort());\n    \n    jetty.stop();\n    \n    stop(jetty);\n    \n    if (!jetty.isStopped()) {\n      throw new RuntimeException(\"could not kill jetty\");\n    }\n  }\n\n","sourceOld":"  public static void kill(CloudJettyRunner cjetty) throws Exception {\n    JettySolrRunner jetty = cjetty.jetty;\n    monkeyLog(\"kill shard! \" + jetty.getLocalPort());\n    \n    jetty.stop();\n    \n    stop(jetty);\n    \n    if (!jetty.isStopped()) {\n      throw new RuntimeException(\"could not kill jetty\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/ChaosMonkey#kill(CloudJettyRunner).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/ChaosMonkey#kill(CloudJettyRunner).mjava","sourceNew":"  public static void kill(CloudJettyRunner cjetty) throws Exception {\n    FilterHolder filterHolder = cjetty.jetty.getDispatchFilter();\n    if (filterHolder != null) {\n      Filter filter = filterHolder.getFilter();\n      if (filter != null) {\n        CoreContainer cores = ((SolrDispatchFilter) filter).getCores();\n        if (cores != null) {\n          int zklocalport = ((InetSocketAddress) cores.getZkController()\n              .getZkClient().getSolrZooKeeper().getSocketAddress()).getPort();\n          IpTables.blockPort(zklocalport);\n        }\n      }\n    }\n\n    IpTables.blockPort(cjetty.jetty.getLocalPort());\n    \n    JettySolrRunner jetty = cjetty.jetty;\n    monkeyLog(\"kill shard! \" + jetty.getLocalPort());\n    \n    jetty.stop();\n    \n    stop(jetty);\n    \n    if (!jetty.isStopped()) {\n      throw new RuntimeException(\"could not kill jetty\");\n    }\n  }\n\n","sourceOld":"  public static void kill(CloudJettyRunner cjetty) throws Exception {\n    JettySolrRunner jetty = cjetty.jetty;\n    monkeyLog(\"kill shard! \" + jetty.getLocalPort());\n    \n    jetty.stop();\n    \n    stop(jetty);\n    \n    if (!jetty.isStopped()) {\n      throw new RuntimeException(\"could not kill jetty\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ad7bdba3e91cf3373cda2e52239cb761fc0b452","date":1408019547,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/ChaosMonkey#kill(CloudJettyRunner).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/ChaosMonkey#kill(CloudJettyRunner).mjava","sourceNew":"  public static void kill(CloudJettyRunner cjetty) throws Exception {\n    kill(cjetty.jetty);\n  }\n\n","sourceOld":"  public static void kill(CloudJettyRunner cjetty) throws Exception {\n    FilterHolder filterHolder = cjetty.jetty.getDispatchFilter();\n    if (filterHolder != null) {\n      Filter filter = filterHolder.getFilter();\n      if (filter != null) {\n        CoreContainer cores = ((SolrDispatchFilter) filter).getCores();\n        if (cores != null) {\n          int zklocalport = ((InetSocketAddress) cores.getZkController()\n              .getZkClient().getSolrZooKeeper().getSocketAddress()).getPort();\n          IpTables.blockPort(zklocalport);\n        }\n      }\n    }\n\n    IpTables.blockPort(cjetty.jetty.getLocalPort());\n    \n    JettySolrRunner jetty = cjetty.jetty;\n    monkeyLog(\"kill shard! \" + jetty.getLocalPort());\n    \n    jetty.stop();\n    \n    stop(jetty);\n    \n    if (!jetty.isStopped()) {\n      throw new RuntimeException(\"could not kill jetty\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":4,"author":"markrmiller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/ChaosMonkey#kill(CloudJettyRunner).mjava","sourceNew":null,"sourceOld":"  public static void kill(CloudJettyRunner cjetty) throws Exception {\n    kill(cjetty.jetty);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3b28f0928f1f17bf5af380ad693363268fbb7b91":["6013b4c7388f1627659c8f96c44abd10a294d3a6"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c30e4c1cee08b3b229a77991882594fe7250b66"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["0ad7bdba3e91cf3373cda2e52239cb761fc0b452"],"0ad7bdba3e91cf3373cda2e52239cb761fc0b452":["3b28f0928f1f17bf5af380ad693363268fbb7b91"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c30e4c1cee08b3b229a77991882594fe7250b66"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["6013b4c7388f1627659c8f96c44abd10a294d3a6","3b28f0928f1f17bf5af380ad693363268fbb7b91"],"05a14b2611ead08655a2b2bdc61632eb31316e57":["d6f074e73200c07d54f242d3880a8da5a35ff97b","6013b4c7388f1627659c8f96c44abd10a294d3a6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"6013b4c7388f1627659c8f96c44abd10a294d3a6":["2c30e4c1cee08b3b229a77991882594fe7250b66"],"2c30e4c1cee08b3b229a77991882594fe7250b66":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"3b28f0928f1f17bf5af380ad693363268fbb7b91":["0ad7bdba3e91cf3373cda2e52239cb761fc0b452","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":[],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0ad7bdba3e91cf3373cda2e52239cb761fc0b452":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c7869f64c874ebf7f317d22c00baf2b6857797a6","d6f074e73200c07d54f242d3880a8da5a35ff97b","2c30e4c1cee08b3b229a77991882594fe7250b66"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["05a14b2611ead08655a2b2bdc61632eb31316e57"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"05a14b2611ead08655a2b2bdc61632eb31316e57":[],"6013b4c7388f1627659c8f96c44abd10a294d3a6":["3b28f0928f1f17bf5af380ad693363268fbb7b91","74f45af4339b0daf7a95c820ab88c1aea74fbce0","05a14b2611ead08655a2b2bdc61632eb31316e57"],"2c30e4c1cee08b3b229a77991882594fe7250b66":["c7869f64c874ebf7f317d22c00baf2b6857797a6","d6f074e73200c07d54f242d3880a8da5a35ff97b","6013b4c7388f1627659c8f96c44abd10a294d3a6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c7869f64c874ebf7f317d22c00baf2b6857797a6","74f45af4339b0daf7a95c820ab88c1aea74fbce0","05a14b2611ead08655a2b2bdc61632eb31316e57","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}