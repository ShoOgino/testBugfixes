{"path":"solr/core/src/test/org/apache/solr/search/facet/RangeFacetCloudTest#assertEqualsHACK(String,long,Object).mjava","commits":[{"id":"c05b634713ca09b2267477408773904d4c69dd9d","date":1530894845,"type":0,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/facet/RangeFacetCloudTest#assertEqualsHACK(String,long,Object).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * HACK to work around SOLR-11775.\n   * Asserts that the 'actual' argument is a (non-null) Number, then compares it's 'longValue' to the 'expected' argument\n   */\n  private static void assertEqualsHACK(String msg, long expected, Object actual) {\n    assertNotNull(msg, actual);\n    assertTrue(msg + \" ... NOT A NUMBER: \" + actual.getClass(), Number.class.isInstance(actual));\n    assertEquals(msg, expected, ((Number)actual).longValue());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":0,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/facet/RangeFacetCloudTest#assertEqualsHACK(String,long,Object).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * HACK to work around SOLR-11775.\n   * Asserts that the 'actual' argument is a (non-null) Number, then compares it's 'longValue' to the 'expected' argument\n   */\n  private static void assertEqualsHACK(String msg, long expected, Object actual) {\n    assertNotNull(msg, actual);\n    assertTrue(msg + \" ... NOT A NUMBER: \" + actual.getClass(), Number.class.isInstance(actual));\n    assertEquals(msg, expected, ((Number)actual).longValue());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":0,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/facet/RangeFacetCloudTest#assertEqualsHACK(String,long,Object).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * HACK to work around SOLR-11775.\n   * Asserts that the 'actual' argument is a (non-null) Number, then compares it's 'longValue' to the 'expected' argument\n   */\n  private static void assertEqualsHACK(String msg, long expected, Object actual) {\n    assertNotNull(msg, actual);\n    assertTrue(msg + \" ... NOT A NUMBER: \" + actual.getClass(), Number.class.isInstance(actual));\n    assertEquals(msg, expected, ((Number)actual).longValue());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1c841e27891873cab110ebeb89f124a8ec470176","date":1586527220,"type":4,"author":"Munendra S N","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/search/facet/RangeFacetCloudTest#assertEqualsHACK(String,long,Object).mjava","sourceNew":null,"sourceOld":"  /**\n   * HACK to work around SOLR-11775.\n   * Asserts that the 'actual' argument is a (non-null) Number, then compares it's 'longValue' to the 'expected' argument\n   */\n  private static void assertEqualsHACK(String msg, long expected, Object actual) {\n    assertNotNull(msg, actual);\n    assertTrue(msg + \" ... NOT A NUMBER: \" + actual.getClass(), Number.class.isInstance(actual));\n    assertEquals(msg, expected, ((Number)actual).longValue());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1c841e27891873cab110ebeb89f124a8ec470176":["c05b634713ca09b2267477408773904d4c69dd9d"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c05b634713ca09b2267477408773904d4c69dd9d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c05b634713ca09b2267477408773904d4c69dd9d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1c841e27891873cab110ebeb89f124a8ec470176"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c05b634713ca09b2267477408773904d4c69dd9d"]},"commit2Childs":{"1c841e27891873cab110ebeb89f124a8ec470176":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","c05b634713ca09b2267477408773904d4c69dd9d","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"c05b634713ca09b2267477408773904d4c69dd9d":["1c841e27891873cab110ebeb89f124a8ec470176","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}