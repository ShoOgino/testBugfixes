{"path":"lucene/src/test/org/apache/lucene/queryParser/TestQueryParser#testFarsiRangeCollating().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/queryParser/TestQueryParser#testFarsiRangeCollating().mjava","pathOld":"src/test/org/apache/lucene/queryParser/TestQueryParser#testFarsiRangeCollating().mjava","sourceNew":"  public void testFarsiRangeCollating() throws Exception {\n    \n    RAMDirectory ramDir = new RAMDirectory();\n    IndexWriter iw = new IndexWriter(ramDir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    Document doc = new Document();\n    doc.add(new Field(\"content\",\"\\u0633\\u0627\\u0628\", \n                      Field.Store.YES, Field.Index.NOT_ANALYZED));\n    iw.addDocument(doc);\n    iw.close();\n    IndexSearcher is = new IndexSearcher(ramDir, true);\n\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"content\", new WhitespaceAnalyzer(TEST_VERSION_CURRENT));\n\n    // Neither Java 1.4.2 nor 1.5.0 has Farsi Locale collation available in\n    // RuleBasedCollator.  However, the Arabic Locale seems to order the Farsi\n    // characters properly.\n    Collator c = Collator.getInstance(new Locale(\"ar\"));\n    qp.setRangeCollator(c);\n\n    // Unicode order would include U+0633 in [ U+062F - U+0698 ], but Farsi\n    // orders the U+0698 character before the U+0633 character, so the single\n    // index Term below should NOT be returned by a ConstantScoreRangeQuery\n    // with a Farsi Collator (or an Arabic one for the case when Farsi is not\n    // supported).\n      \n    // Test ConstantScoreRangeQuery\n    qp.setMultiTermRewriteMethod(MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE);\n    ScoreDoc[] result = is.search(qp.parse(\"[ \\u062F TO \\u0698 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    result = is.search(qp.parse(\"[ \\u0633 TO \\u0638 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n\n    // Test TermRangeQuery\n    qp.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    result = is.search(qp.parse(\"[ \\u062F TO \\u0698 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    result = is.search(qp.parse(\"[ \\u0633 TO \\u0638 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n\n    is.close();\n  }\n\n","sourceOld":"  public void testFarsiRangeCollating() throws Exception {\n    \n    RAMDirectory ramDir = new RAMDirectory();\n    IndexWriter iw = new IndexWriter(ramDir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    Document doc = new Document();\n    doc.add(new Field(\"content\",\"\\u0633\\u0627\\u0628\", \n                      Field.Store.YES, Field.Index.NOT_ANALYZED));\n    iw.addDocument(doc);\n    iw.close();\n    IndexSearcher is = new IndexSearcher(ramDir, true);\n\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"content\", new WhitespaceAnalyzer(TEST_VERSION_CURRENT));\n\n    // Neither Java 1.4.2 nor 1.5.0 has Farsi Locale collation available in\n    // RuleBasedCollator.  However, the Arabic Locale seems to order the Farsi\n    // characters properly.\n    Collator c = Collator.getInstance(new Locale(\"ar\"));\n    qp.setRangeCollator(c);\n\n    // Unicode order would include U+0633 in [ U+062F - U+0698 ], but Farsi\n    // orders the U+0698 character before the U+0633 character, so the single\n    // index Term below should NOT be returned by a ConstantScoreRangeQuery\n    // with a Farsi Collator (or an Arabic one for the case when Farsi is not\n    // supported).\n      \n    // Test ConstantScoreRangeQuery\n    qp.setMultiTermRewriteMethod(MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE);\n    ScoreDoc[] result = is.search(qp.parse(\"[ \\u062F TO \\u0698 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    result = is.search(qp.parse(\"[ \\u0633 TO \\u0638 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n\n    // Test TermRangeQuery\n    qp.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    result = is.search(qp.parse(\"[ \\u062F TO \\u0698 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    result = is.search(qp.parse(\"[ \\u0633 TO \\u0638 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n\n    is.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7f8e68717c68517265937c911e1ce9f25750247","date":1274071103,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/queryParser/TestQueryParser#testFarsiRangeCollating().mjava","pathOld":"lucene/src/test/org/apache/lucene/queryParser/TestQueryParser#testFarsiRangeCollating().mjava","sourceNew":"  public void testFarsiRangeCollating() throws Exception {\n    \n    RAMDirectory ramDir = new RAMDirectory();\n    IndexWriter iw = new IndexWriter(ramDir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.WHITESPACE, false)));\n    Document doc = new Document();\n    doc.add(new Field(\"content\",\"\\u0633\\u0627\\u0628\", \n                      Field.Store.YES, Field.Index.NOT_ANALYZED));\n    iw.addDocument(doc);\n    iw.close();\n    IndexSearcher is = new IndexSearcher(ramDir, true);\n\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"content\", new MockAnalyzer(MockTokenizer.WHITESPACE, false));\n\n    // Neither Java 1.4.2 nor 1.5.0 has Farsi Locale collation available in\n    // RuleBasedCollator.  However, the Arabic Locale seems to order the Farsi\n    // characters properly.\n    Collator c = Collator.getInstance(new Locale(\"ar\"));\n    qp.setRangeCollator(c);\n\n    // Unicode order would include U+0633 in [ U+062F - U+0698 ], but Farsi\n    // orders the U+0698 character before the U+0633 character, so the single\n    // index Term below should NOT be returned by a ConstantScoreRangeQuery\n    // with a Farsi Collator (or an Arabic one for the case when Farsi is not\n    // supported).\n      \n    // Test ConstantScoreRangeQuery\n    qp.setMultiTermRewriteMethod(MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE);\n    ScoreDoc[] result = is.search(qp.parse(\"[ \\u062F TO \\u0698 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    result = is.search(qp.parse(\"[ \\u0633 TO \\u0638 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n\n    // Test TermRangeQuery\n    qp.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    result = is.search(qp.parse(\"[ \\u062F TO \\u0698 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    result = is.search(qp.parse(\"[ \\u0633 TO \\u0638 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n\n    is.close();\n  }\n\n","sourceOld":"  public void testFarsiRangeCollating() throws Exception {\n    \n    RAMDirectory ramDir = new RAMDirectory();\n    IndexWriter iw = new IndexWriter(ramDir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    Document doc = new Document();\n    doc.add(new Field(\"content\",\"\\u0633\\u0627\\u0628\", \n                      Field.Store.YES, Field.Index.NOT_ANALYZED));\n    iw.addDocument(doc);\n    iw.close();\n    IndexSearcher is = new IndexSearcher(ramDir, true);\n\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"content\", new WhitespaceAnalyzer(TEST_VERSION_CURRENT));\n\n    // Neither Java 1.4.2 nor 1.5.0 has Farsi Locale collation available in\n    // RuleBasedCollator.  However, the Arabic Locale seems to order the Farsi\n    // characters properly.\n    Collator c = Collator.getInstance(new Locale(\"ar\"));\n    qp.setRangeCollator(c);\n\n    // Unicode order would include U+0633 in [ U+062F - U+0698 ], but Farsi\n    // orders the U+0698 character before the U+0633 character, so the single\n    // index Term below should NOT be returned by a ConstantScoreRangeQuery\n    // with a Farsi Collator (or an Arabic one for the case when Farsi is not\n    // supported).\n      \n    // Test ConstantScoreRangeQuery\n    qp.setMultiTermRewriteMethod(MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE);\n    ScoreDoc[] result = is.search(qp.parse(\"[ \\u062F TO \\u0698 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    result = is.search(qp.parse(\"[ \\u0633 TO \\u0638 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n\n    // Test TermRangeQuery\n    qp.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    result = is.search(qp.parse(\"[ \\u062F TO \\u0698 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    result = is.search(qp.parse(\"[ \\u0633 TO \\u0638 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n\n    is.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c","date":1281477834,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/queryParser/TestQueryParser#testFarsiRangeCollating().mjava","pathOld":"lucene/src/test/org/apache/lucene/queryParser/TestQueryParser#testFarsiRangeCollating().mjava","sourceNew":"  public void testFarsiRangeCollating() throws Exception {\n    \n    MockRAMDirectory ramDir = new MockRAMDirectory();\n    IndexWriter iw = new IndexWriter(ramDir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.WHITESPACE, false)));\n    Document doc = new Document();\n    doc.add(new Field(\"content\",\"\\u0633\\u0627\\u0628\", \n                      Field.Store.YES, Field.Index.NOT_ANALYZED));\n    iw.addDocument(doc);\n    iw.close();\n    IndexSearcher is = new IndexSearcher(ramDir, true);\n\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"content\", new MockAnalyzer(MockTokenizer.WHITESPACE, false));\n\n    // Neither Java 1.4.2 nor 1.5.0 has Farsi Locale collation available in\n    // RuleBasedCollator.  However, the Arabic Locale seems to order the Farsi\n    // characters properly.\n    Collator c = Collator.getInstance(new Locale(\"ar\"));\n    qp.setRangeCollator(c);\n\n    // Unicode order would include U+0633 in [ U+062F - U+0698 ], but Farsi\n    // orders the U+0698 character before the U+0633 character, so the single\n    // index Term below should NOT be returned by a ConstantScoreRangeQuery\n    // with a Farsi Collator (or an Arabic one for the case when Farsi is not\n    // supported).\n      \n    // Test ConstantScoreRangeQuery\n    qp.setMultiTermRewriteMethod(MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE);\n    ScoreDoc[] result = is.search(qp.parse(\"[ \\u062F TO \\u0698 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    result = is.search(qp.parse(\"[ \\u0633 TO \\u0638 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n\n    // Test TermRangeQuery\n    qp.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    result = is.search(qp.parse(\"[ \\u062F TO \\u0698 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    result = is.search(qp.parse(\"[ \\u0633 TO \\u0638 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n\n    is.close();\n  }\n\n","sourceOld":"  public void testFarsiRangeCollating() throws Exception {\n    \n    RAMDirectory ramDir = new RAMDirectory();\n    IndexWriter iw = new IndexWriter(ramDir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.WHITESPACE, false)));\n    Document doc = new Document();\n    doc.add(new Field(\"content\",\"\\u0633\\u0627\\u0628\", \n                      Field.Store.YES, Field.Index.NOT_ANALYZED));\n    iw.addDocument(doc);\n    iw.close();\n    IndexSearcher is = new IndexSearcher(ramDir, true);\n\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"content\", new MockAnalyzer(MockTokenizer.WHITESPACE, false));\n\n    // Neither Java 1.4.2 nor 1.5.0 has Farsi Locale collation available in\n    // RuleBasedCollator.  However, the Arabic Locale seems to order the Farsi\n    // characters properly.\n    Collator c = Collator.getInstance(new Locale(\"ar\"));\n    qp.setRangeCollator(c);\n\n    // Unicode order would include U+0633 in [ U+062F - U+0698 ], but Farsi\n    // orders the U+0698 character before the U+0633 character, so the single\n    // index Term below should NOT be returned by a ConstantScoreRangeQuery\n    // with a Farsi Collator (or an Arabic one for the case when Farsi is not\n    // supported).\n      \n    // Test ConstantScoreRangeQuery\n    qp.setMultiTermRewriteMethod(MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE);\n    ScoreDoc[] result = is.search(qp.parse(\"[ \\u062F TO \\u0698 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    result = is.search(qp.parse(\"[ \\u0633 TO \\u0638 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n\n    // Test TermRangeQuery\n    qp.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    result = is.search(qp.parse(\"[ \\u062F TO \\u0698 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    result = is.search(qp.parse(\"[ \\u0633 TO \\u0638 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n\n    is.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","date":1281646583,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/queryParser/TestQueryParser#testFarsiRangeCollating().mjava","pathOld":"lucene/src/test/org/apache/lucene/queryParser/TestQueryParser#testFarsiRangeCollating().mjava","sourceNew":"  public void testFarsiRangeCollating() throws Exception {\n    Random random = newRandom();\n    MockRAMDirectory ramDir = newDirectory(random);\n    IndexWriter iw = new IndexWriter(ramDir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.WHITESPACE, false)));\n    Document doc = new Document();\n    doc.add(new Field(\"content\",\"\\u0633\\u0627\\u0628\", \n                      Field.Store.YES, Field.Index.NOT_ANALYZED));\n    iw.addDocument(doc);\n    iw.close();\n    IndexSearcher is = new IndexSearcher(ramDir, true);\n\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"content\", new MockAnalyzer(MockTokenizer.WHITESPACE, false));\n\n    // Neither Java 1.4.2 nor 1.5.0 has Farsi Locale collation available in\n    // RuleBasedCollator.  However, the Arabic Locale seems to order the Farsi\n    // characters properly.\n    Collator c = Collator.getInstance(new Locale(\"ar\"));\n    qp.setRangeCollator(c);\n\n    // Unicode order would include U+0633 in [ U+062F - U+0698 ], but Farsi\n    // orders the U+0698 character before the U+0633 character, so the single\n    // index Term below should NOT be returned by a ConstantScoreRangeQuery\n    // with a Farsi Collator (or an Arabic one for the case when Farsi is not\n    // supported).\n      \n    // Test ConstantScoreRangeQuery\n    qp.setMultiTermRewriteMethod(MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE);\n    ScoreDoc[] result = is.search(qp.parse(\"[ \\u062F TO \\u0698 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    result = is.search(qp.parse(\"[ \\u0633 TO \\u0638 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n\n    // Test TermRangeQuery\n    qp.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    result = is.search(qp.parse(\"[ \\u062F TO \\u0698 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    result = is.search(qp.parse(\"[ \\u0633 TO \\u0638 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n\n    is.close();\n    ramDir.close();\n  }\n\n","sourceOld":"  public void testFarsiRangeCollating() throws Exception {\n    \n    MockRAMDirectory ramDir = new MockRAMDirectory();\n    IndexWriter iw = new IndexWriter(ramDir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.WHITESPACE, false)));\n    Document doc = new Document();\n    doc.add(new Field(\"content\",\"\\u0633\\u0627\\u0628\", \n                      Field.Store.YES, Field.Index.NOT_ANALYZED));\n    iw.addDocument(doc);\n    iw.close();\n    IndexSearcher is = new IndexSearcher(ramDir, true);\n\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"content\", new MockAnalyzer(MockTokenizer.WHITESPACE, false));\n\n    // Neither Java 1.4.2 nor 1.5.0 has Farsi Locale collation available in\n    // RuleBasedCollator.  However, the Arabic Locale seems to order the Farsi\n    // characters properly.\n    Collator c = Collator.getInstance(new Locale(\"ar\"));\n    qp.setRangeCollator(c);\n\n    // Unicode order would include U+0633 in [ U+062F - U+0698 ], but Farsi\n    // orders the U+0698 character before the U+0633 character, so the single\n    // index Term below should NOT be returned by a ConstantScoreRangeQuery\n    // with a Farsi Collator (or an Arabic one for the case when Farsi is not\n    // supported).\n      \n    // Test ConstantScoreRangeQuery\n    qp.setMultiTermRewriteMethod(MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE);\n    ScoreDoc[] result = is.search(qp.parse(\"[ \\u062F TO \\u0698 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    result = is.search(qp.parse(\"[ \\u0633 TO \\u0638 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n\n    // Test TermRangeQuery\n    qp.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    result = is.search(qp.parse(\"[ \\u062F TO \\u0698 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    result = is.search(qp.parse(\"[ \\u0633 TO \\u0638 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n\n    is.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a05409176bd65129d67a785ee70e881e238a9aef","date":1282582843,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/queryParser/TestQueryParser#testFarsiRangeCollating().mjava","pathOld":"lucene/src/test/org/apache/lucene/queryParser/TestQueryParser#testFarsiRangeCollating().mjava","sourceNew":"  public void testFarsiRangeCollating() throws Exception {\n    Random random = newRandom();\n    Directory ramDir = newDirectory(random);\n    IndexWriter iw = new IndexWriter(ramDir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.WHITESPACE, false)));\n    Document doc = new Document();\n    doc.add(new Field(\"content\",\"\\u0633\\u0627\\u0628\", \n                      Field.Store.YES, Field.Index.NOT_ANALYZED));\n    iw.addDocument(doc);\n    iw.close();\n    IndexSearcher is = new IndexSearcher(ramDir, true);\n\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"content\", new MockAnalyzer(MockTokenizer.WHITESPACE, false));\n\n    // Neither Java 1.4.2 nor 1.5.0 has Farsi Locale collation available in\n    // RuleBasedCollator.  However, the Arabic Locale seems to order the Farsi\n    // characters properly.\n    Collator c = Collator.getInstance(new Locale(\"ar\"));\n    qp.setRangeCollator(c);\n\n    // Unicode order would include U+0633 in [ U+062F - U+0698 ], but Farsi\n    // orders the U+0698 character before the U+0633 character, so the single\n    // index Term below should NOT be returned by a ConstantScoreRangeQuery\n    // with a Farsi Collator (or an Arabic one for the case when Farsi is not\n    // supported).\n      \n    // Test ConstantScoreRangeQuery\n    qp.setMultiTermRewriteMethod(MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE);\n    ScoreDoc[] result = is.search(qp.parse(\"[ \\u062F TO \\u0698 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    result = is.search(qp.parse(\"[ \\u0633 TO \\u0638 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n\n    // Test TermRangeQuery\n    qp.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    result = is.search(qp.parse(\"[ \\u062F TO \\u0698 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    result = is.search(qp.parse(\"[ \\u0633 TO \\u0638 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n\n    is.close();\n    ramDir.close();\n  }\n\n","sourceOld":"  public void testFarsiRangeCollating() throws Exception {\n    Random random = newRandom();\n    MockRAMDirectory ramDir = newDirectory(random);\n    IndexWriter iw = new IndexWriter(ramDir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.WHITESPACE, false)));\n    Document doc = new Document();\n    doc.add(new Field(\"content\",\"\\u0633\\u0627\\u0628\", \n                      Field.Store.YES, Field.Index.NOT_ANALYZED));\n    iw.addDocument(doc);\n    iw.close();\n    IndexSearcher is = new IndexSearcher(ramDir, true);\n\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"content\", new MockAnalyzer(MockTokenizer.WHITESPACE, false));\n\n    // Neither Java 1.4.2 nor 1.5.0 has Farsi Locale collation available in\n    // RuleBasedCollator.  However, the Arabic Locale seems to order the Farsi\n    // characters properly.\n    Collator c = Collator.getInstance(new Locale(\"ar\"));\n    qp.setRangeCollator(c);\n\n    // Unicode order would include U+0633 in [ U+062F - U+0698 ], but Farsi\n    // orders the U+0698 character before the U+0633 character, so the single\n    // index Term below should NOT be returned by a ConstantScoreRangeQuery\n    // with a Farsi Collator (or an Arabic one for the case when Farsi is not\n    // supported).\n      \n    // Test ConstantScoreRangeQuery\n    qp.setMultiTermRewriteMethod(MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE);\n    ScoreDoc[] result = is.search(qp.parse(\"[ \\u062F TO \\u0698 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    result = is.search(qp.parse(\"[ \\u0633 TO \\u0638 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n\n    // Test TermRangeQuery\n    qp.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    result = is.search(qp.parse(\"[ \\u062F TO \\u0698 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    result = is.search(qp.parse(\"[ \\u0633 TO \\u0638 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n\n    is.close();\n    ramDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/queryParser/TestQueryParser#testFarsiRangeCollating().mjava","pathOld":"lucene/src/test/org/apache/lucene/queryParser/TestQueryParser#testFarsiRangeCollating().mjava","sourceNew":"  public void testFarsiRangeCollating() throws Exception {\n    Directory ramDir = newDirectory();\n    IndexWriter iw = new IndexWriter(ramDir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.WHITESPACE, false)));\n    Document doc = new Document();\n    doc.add(new Field(\"content\",\"\\u0633\\u0627\\u0628\", \n                      Field.Store.YES, Field.Index.NOT_ANALYZED));\n    iw.addDocument(doc);\n    iw.close();\n    IndexSearcher is = new IndexSearcher(ramDir, true);\n\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"content\", new MockAnalyzer(MockTokenizer.WHITESPACE, false));\n\n    // Neither Java 1.4.2 nor 1.5.0 has Farsi Locale collation available in\n    // RuleBasedCollator.  However, the Arabic Locale seems to order the Farsi\n    // characters properly.\n    Collator c = Collator.getInstance(new Locale(\"ar\"));\n    qp.setRangeCollator(c);\n\n    // Unicode order would include U+0633 in [ U+062F - U+0698 ], but Farsi\n    // orders the U+0698 character before the U+0633 character, so the single\n    // index Term below should NOT be returned by a ConstantScoreRangeQuery\n    // with a Farsi Collator (or an Arabic one for the case when Farsi is not\n    // supported).\n      \n    // Test ConstantScoreRangeQuery\n    qp.setMultiTermRewriteMethod(MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE);\n    ScoreDoc[] result = is.search(qp.parse(\"[ \\u062F TO \\u0698 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    result = is.search(qp.parse(\"[ \\u0633 TO \\u0638 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n\n    // Test TermRangeQuery\n    qp.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    result = is.search(qp.parse(\"[ \\u062F TO \\u0698 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    result = is.search(qp.parse(\"[ \\u0633 TO \\u0638 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n\n    is.close();\n    ramDir.close();\n  }\n\n","sourceOld":"  public void testFarsiRangeCollating() throws Exception {\n    Random random = newRandom();\n    Directory ramDir = newDirectory(random);\n    IndexWriter iw = new IndexWriter(ramDir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.WHITESPACE, false)));\n    Document doc = new Document();\n    doc.add(new Field(\"content\",\"\\u0633\\u0627\\u0628\", \n                      Field.Store.YES, Field.Index.NOT_ANALYZED));\n    iw.addDocument(doc);\n    iw.close();\n    IndexSearcher is = new IndexSearcher(ramDir, true);\n\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"content\", new MockAnalyzer(MockTokenizer.WHITESPACE, false));\n\n    // Neither Java 1.4.2 nor 1.5.0 has Farsi Locale collation available in\n    // RuleBasedCollator.  However, the Arabic Locale seems to order the Farsi\n    // characters properly.\n    Collator c = Collator.getInstance(new Locale(\"ar\"));\n    qp.setRangeCollator(c);\n\n    // Unicode order would include U+0633 in [ U+062F - U+0698 ], but Farsi\n    // orders the U+0698 character before the U+0633 character, so the single\n    // index Term below should NOT be returned by a ConstantScoreRangeQuery\n    // with a Farsi Collator (or an Arabic one for the case when Farsi is not\n    // supported).\n      \n    // Test ConstantScoreRangeQuery\n    qp.setMultiTermRewriteMethod(MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE);\n    ScoreDoc[] result = is.search(qp.parse(\"[ \\u062F TO \\u0698 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    result = is.search(qp.parse(\"[ \\u0633 TO \\u0638 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n\n    // Test TermRangeQuery\n    qp.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    result = is.search(qp.parse(\"[ \\u062F TO \\u0698 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    result = is.search(qp.parse(\"[ \\u0633 TO \\u0638 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n\n    is.close();\n    ramDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"132903c28af3aa6f67284b78de91c0f0a99488c2","date":1284282129,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/queryParser/TestQueryParser#testFarsiRangeCollating().mjava","pathOld":"lucene/src/test/org/apache/lucene/queryParser/TestQueryParser#testFarsiRangeCollating().mjava","sourceNew":"  public void testFarsiRangeCollating() throws Exception {\n    Directory ramDir = newDirectory();\n    IndexWriter iw = new IndexWriter(ramDir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.WHITESPACE, false)));\n    Document doc = new Document();\n    doc.add(newField(\"content\",\"\\u0633\\u0627\\u0628\", \n                      Field.Store.YES, Field.Index.NOT_ANALYZED));\n    iw.addDocument(doc);\n    iw.close();\n    IndexSearcher is = new IndexSearcher(ramDir, true);\n\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"content\", new MockAnalyzer(MockTokenizer.WHITESPACE, false));\n\n    // Neither Java 1.4.2 nor 1.5.0 has Farsi Locale collation available in\n    // RuleBasedCollator.  However, the Arabic Locale seems to order the Farsi\n    // characters properly.\n    Collator c = Collator.getInstance(new Locale(\"ar\"));\n    qp.setRangeCollator(c);\n\n    // Unicode order would include U+0633 in [ U+062F - U+0698 ], but Farsi\n    // orders the U+0698 character before the U+0633 character, so the single\n    // index Term below should NOT be returned by a ConstantScoreRangeQuery\n    // with a Farsi Collator (or an Arabic one for the case when Farsi is not\n    // supported).\n      \n    // Test ConstantScoreRangeQuery\n    qp.setMultiTermRewriteMethod(MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE);\n    ScoreDoc[] result = is.search(qp.parse(\"[ \\u062F TO \\u0698 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    result = is.search(qp.parse(\"[ \\u0633 TO \\u0638 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n\n    // Test TermRangeQuery\n    qp.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    result = is.search(qp.parse(\"[ \\u062F TO \\u0698 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    result = is.search(qp.parse(\"[ \\u0633 TO \\u0638 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n\n    is.close();\n    ramDir.close();\n  }\n\n","sourceOld":"  public void testFarsiRangeCollating() throws Exception {\n    Directory ramDir = newDirectory();\n    IndexWriter iw = new IndexWriter(ramDir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.WHITESPACE, false)));\n    Document doc = new Document();\n    doc.add(new Field(\"content\",\"\\u0633\\u0627\\u0628\", \n                      Field.Store.YES, Field.Index.NOT_ANALYZED));\n    iw.addDocument(doc);\n    iw.close();\n    IndexSearcher is = new IndexSearcher(ramDir, true);\n\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"content\", new MockAnalyzer(MockTokenizer.WHITESPACE, false));\n\n    // Neither Java 1.4.2 nor 1.5.0 has Farsi Locale collation available in\n    // RuleBasedCollator.  However, the Arabic Locale seems to order the Farsi\n    // characters properly.\n    Collator c = Collator.getInstance(new Locale(\"ar\"));\n    qp.setRangeCollator(c);\n\n    // Unicode order would include U+0633 in [ U+062F - U+0698 ], but Farsi\n    // orders the U+0698 character before the U+0633 character, so the single\n    // index Term below should NOT be returned by a ConstantScoreRangeQuery\n    // with a Farsi Collator (or an Arabic one for the case when Farsi is not\n    // supported).\n      \n    // Test ConstantScoreRangeQuery\n    qp.setMultiTermRewriteMethod(MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE);\n    ScoreDoc[] result = is.search(qp.parse(\"[ \\u062F TO \\u0698 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    result = is.search(qp.parse(\"[ \\u0633 TO \\u0638 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n\n    // Test TermRangeQuery\n    qp.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    result = is.search(qp.parse(\"[ \\u062F TO \\u0698 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    result = is.search(qp.parse(\"[ \\u0633 TO \\u0638 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n\n    is.close();\n    ramDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/queryParser/TestQueryParser#testFarsiRangeCollating().mjava","pathOld":"lucene/src/test/org/apache/lucene/queryParser/TestQueryParser#testFarsiRangeCollating().mjava","sourceNew":"  public void testFarsiRangeCollating() throws Exception {\n    Directory ramDir = newDirectory();\n    IndexWriter iw = new IndexWriter(ramDir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.WHITESPACE, false)));\n    Document doc = new Document();\n    doc.add(newField(\"content\",\"\\u0633\\u0627\\u0628\", \n                      Field.Store.YES, Field.Index.NOT_ANALYZED));\n    iw.addDocument(doc);\n    iw.close();\n    IndexSearcher is = new IndexSearcher(ramDir, true);\n\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"content\", new MockAnalyzer(MockTokenizer.WHITESPACE, false));\n\n    // Neither Java 1.4.2 nor 1.5.0 has Farsi Locale collation available in\n    // RuleBasedCollator.  However, the Arabic Locale seems to order the Farsi\n    // characters properly.\n    Collator c = Collator.getInstance(new Locale(\"ar\"));\n    qp.setRangeCollator(c);\n\n    // Unicode order would include U+0633 in [ U+062F - U+0698 ], but Farsi\n    // orders the U+0698 character before the U+0633 character, so the single\n    // index Term below should NOT be returned by a ConstantScoreRangeQuery\n    // with a Farsi Collator (or an Arabic one for the case when Farsi is not\n    // supported).\n      \n    // Test ConstantScoreRangeQuery\n    qp.setMultiTermRewriteMethod(MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE);\n    ScoreDoc[] result = is.search(qp.parse(\"[ \\u062F TO \\u0698 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    result = is.search(qp.parse(\"[ \\u0633 TO \\u0638 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n\n    // Test TermRangeQuery\n    qp.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    result = is.search(qp.parse(\"[ \\u062F TO \\u0698 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    result = is.search(qp.parse(\"[ \\u0633 TO \\u0638 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n\n    is.close();\n    ramDir.close();\n  }\n\n","sourceOld":"  public void testFarsiRangeCollating() throws Exception {\n    \n    RAMDirectory ramDir = new RAMDirectory();\n    IndexWriter iw = new IndexWriter(ramDir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.WHITESPACE, false)));\n    Document doc = new Document();\n    doc.add(new Field(\"content\",\"\\u0633\\u0627\\u0628\", \n                      Field.Store.YES, Field.Index.NOT_ANALYZED));\n    iw.addDocument(doc);\n    iw.close();\n    IndexSearcher is = new IndexSearcher(ramDir, true);\n\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"content\", new MockAnalyzer(MockTokenizer.WHITESPACE, false));\n\n    // Neither Java 1.4.2 nor 1.5.0 has Farsi Locale collation available in\n    // RuleBasedCollator.  However, the Arabic Locale seems to order the Farsi\n    // characters properly.\n    Collator c = Collator.getInstance(new Locale(\"ar\"));\n    qp.setRangeCollator(c);\n\n    // Unicode order would include U+0633 in [ U+062F - U+0698 ], but Farsi\n    // orders the U+0698 character before the U+0633 character, so the single\n    // index Term below should NOT be returned by a ConstantScoreRangeQuery\n    // with a Farsi Collator (or an Arabic one for the case when Farsi is not\n    // supported).\n      \n    // Test ConstantScoreRangeQuery\n    qp.setMultiTermRewriteMethod(MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE);\n    ScoreDoc[] result = is.search(qp.parse(\"[ \\u062F TO \\u0698 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    result = is.search(qp.parse(\"[ \\u0633 TO \\u0638 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n\n    // Test TermRangeQuery\n    qp.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    result = is.search(qp.parse(\"[ \\u062F TO \\u0698 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    result = is.search(qp.parse(\"[ \\u0633 TO \\u0638 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n\n    is.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e492fb0f2bb0b4b47208286f9331ff55963c656","date":1298870150,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/queryParser/TestQueryParser#testFarsiRangeCollating().mjava","sourceNew":null,"sourceOld":"  public void testFarsiRangeCollating() throws Exception {\n    Directory ramDir = newDirectory();\n    IndexWriter iw = new IndexWriter(ramDir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.WHITESPACE, false)));\n    Document doc = new Document();\n    doc.add(newField(\"content\",\"\\u0633\\u0627\\u0628\", \n                      Field.Store.YES, Field.Index.NOT_ANALYZED));\n    iw.addDocument(doc);\n    iw.close();\n    IndexSearcher is = new IndexSearcher(ramDir, true);\n\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"content\", new MockAnalyzer(MockTokenizer.WHITESPACE, false));\n\n    // Neither Java 1.4.2 nor 1.5.0 has Farsi Locale collation available in\n    // RuleBasedCollator.  However, the Arabic Locale seems to order the Farsi\n    // characters properly.\n    Collator c = Collator.getInstance(new Locale(\"ar\"));\n    qp.setRangeCollator(c);\n\n    // Unicode order would include U+0633 in [ U+062F - U+0698 ], but Farsi\n    // orders the U+0698 character before the U+0633 character, so the single\n    // index Term below should NOT be returned by a ConstantScoreRangeQuery\n    // with a Farsi Collator (or an Arabic one for the case when Farsi is not\n    // supported).\n      \n    // Test ConstantScoreRangeQuery\n    qp.setMultiTermRewriteMethod(MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE);\n    ScoreDoc[] result = is.search(qp.parse(\"[ \\u062F TO \\u0698 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    result = is.search(qp.parse(\"[ \\u0633 TO \\u0638 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n\n    // Test TermRangeQuery\n    qp.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    result = is.search(qp.parse(\"[ \\u062F TO \\u0698 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    result = is.search(qp.parse(\"[ \\u0633 TO \\u0638 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n\n    is.close();\n    ramDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/queryParser/TestQueryParser#testFarsiRangeCollating().mjava","sourceNew":null,"sourceOld":"  public void testFarsiRangeCollating() throws Exception {\n    Directory ramDir = newDirectory();\n    IndexWriter iw = new IndexWriter(ramDir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.WHITESPACE, false)));\n    Document doc = new Document();\n    doc.add(newField(\"content\",\"\\u0633\\u0627\\u0628\", \n                      Field.Store.YES, Field.Index.NOT_ANALYZED));\n    iw.addDocument(doc);\n    iw.close();\n    IndexSearcher is = new IndexSearcher(ramDir, true);\n\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"content\", new MockAnalyzer(MockTokenizer.WHITESPACE, false));\n\n    // Neither Java 1.4.2 nor 1.5.0 has Farsi Locale collation available in\n    // RuleBasedCollator.  However, the Arabic Locale seems to order the Farsi\n    // characters properly.\n    Collator c = Collator.getInstance(new Locale(\"ar\"));\n    qp.setRangeCollator(c);\n\n    // Unicode order would include U+0633 in [ U+062F - U+0698 ], but Farsi\n    // orders the U+0698 character before the U+0633 character, so the single\n    // index Term below should NOT be returned by a ConstantScoreRangeQuery\n    // with a Farsi Collator (or an Arabic one for the case when Farsi is not\n    // supported).\n      \n    // Test ConstantScoreRangeQuery\n    qp.setMultiTermRewriteMethod(MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE);\n    ScoreDoc[] result = is.search(qp.parse(\"[ \\u062F TO \\u0698 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    result = is.search(qp.parse(\"[ \\u0633 TO \\u0638 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n\n    // Test TermRangeQuery\n    qp.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    result = is.search(qp.parse(\"[ \\u062F TO \\u0698 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    result = is.search(qp.parse(\"[ \\u0633 TO \\u0638 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n\n    is.close();\n    ramDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0ef0193974807e4bddf5432a6b0287fe4d6c9df","date":1301476645,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/queryParser/TestQueryParser#testFarsiRangeCollating().mjava","sourceNew":null,"sourceOld":"  public void testFarsiRangeCollating() throws Exception {\n    Directory ramDir = newDirectory();\n    IndexWriter iw = new IndexWriter(ramDir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.WHITESPACE, false)));\n    Document doc = new Document();\n    doc.add(newField(\"content\",\"\\u0633\\u0627\\u0628\", \n                      Field.Store.YES, Field.Index.NOT_ANALYZED));\n    iw.addDocument(doc);\n    iw.close();\n    IndexSearcher is = new IndexSearcher(ramDir, true);\n\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"content\", new MockAnalyzer(MockTokenizer.WHITESPACE, false));\n\n    // Neither Java 1.4.2 nor 1.5.0 has Farsi Locale collation available in\n    // RuleBasedCollator.  However, the Arabic Locale seems to order the Farsi\n    // characters properly.\n    Collator c = Collator.getInstance(new Locale(\"ar\"));\n    qp.setRangeCollator(c);\n\n    // Unicode order would include U+0633 in [ U+062F - U+0698 ], but Farsi\n    // orders the U+0698 character before the U+0633 character, so the single\n    // index Term below should NOT be returned by a ConstantScoreRangeQuery\n    // with a Farsi Collator (or an Arabic one for the case when Farsi is not\n    // supported).\n      \n    // Test ConstantScoreRangeQuery\n    qp.setMultiTermRewriteMethod(MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE);\n    ScoreDoc[] result = is.search(qp.parse(\"[ \\u062F TO \\u0698 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    result = is.search(qp.parse(\"[ \\u0633 TO \\u0638 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n\n    // Test TermRangeQuery\n    qp.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    result = is.search(qp.parse(\"[ \\u062F TO \\u0698 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    result = is.search(qp.parse(\"[ \\u0633 TO \\u0638 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n\n    is.close();\n    ramDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c"],"132903c28af3aa6f67284b78de91c0f0a99488c2":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"c7f8e68717c68517265937c911e1ce9f25750247":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["c7f8e68717c68517265937c911e1ce9f25750247","132903c28af3aa6f67284b78de91c0f0a99488c2"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3e492fb0f2bb0b4b47208286f9331ff55963c656"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["132903c28af3aa6f67284b78de91c0f0a99488c2","3e492fb0f2bb0b4b47208286f9331ff55963c656"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["a05409176bd65129d67a785ee70e881e238a9aef"],"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c":["c7f8e68717c68517265937c911e1ce9f25750247"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a05409176bd65129d67a785ee70e881e238a9aef":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"3e492fb0f2bb0b4b47208286f9331ff55963c656":["132903c28af3aa6f67284b78de91c0f0a99488c2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3e492fb0f2bb0b4b47208286f9331ff55963c656"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["a05409176bd65129d67a785ee70e881e238a9aef"],"132903c28af3aa6f67284b78de91c0f0a99488c2":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","d619839baa8ce5503e496b94a9e42ad6f079293f","3e492fb0f2bb0b4b47208286f9331ff55963c656"],"c7f8e68717c68517265937c911e1ce9f25750247":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":[],"d619839baa8ce5503e496b94a9e42ad6f079293f":[],"1f653cfcf159baeaafe5d01682a911e95bba4012":["132903c28af3aa6f67284b78de91c0f0a99488c2"],"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a05409176bd65129d67a785ee70e881e238a9aef":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"3e492fb0f2bb0b4b47208286f9331ff55963c656":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["c7f8e68717c68517265937c911e1ce9f25750247"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}