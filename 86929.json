{"path":"lucene/sandbox/src/test/org/apache/lucene/search/TestGeoPointQuery#beforeClass().mjava","commits":[{"id":"e91b7d9f5000faefb0e81b98e76ad5b9463283e8","date":1433799348,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/search/TestGeoPointQuery#beforeClass().mjava","pathOld":"/dev/null","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    directory = newDirectory();\n\n    // when we randomly test the full lat/lon space it can result in very very slow query times, this is due to the\n    // number of ranges that can be created in degenerate cases.\n\n    // Between 1.0 and 3.0:\n    range = 2*(random().nextDouble() + 0.5);\n    originLon = GeoUtils.MIN_LON_INCL + range + (GeoUtils.MAX_LON_INCL - GeoUtils.MIN_LON_INCL - 2*range) * random().nextDouble();\n    originLat = GeoUtils.MIN_LAT_INCL + range + (GeoUtils.MAX_LAT_INCL - GeoUtils.MIN_LAT_INCL - 2*range) * random().nextDouble();\n    if (VERBOSE) {\n      System.out.println(\"TEST: originLon=\" + originLon + \" originLat=\" + originLat + \" range=\" + range);\n    }\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n            newIndexWriterConfig(new MockAnalyzer(random()))\n                    .setMaxBufferedDocs(TestUtil.nextInt(random(), 100, 1000))\n                    .setMergePolicy(newLogMergePolicy()));\n\n    // create some simple geo points\n    final FieldType storedPoint = new FieldType(GeoPointField.TYPE_STORED);\n    // this is a simple systematic test\n    GeoPointField[] pts = new GeoPointField[] {\n         new GeoPointField(FIELD_NAME, -96.4538113027811, 32.94823588839368, storedPoint),\n         new GeoPointField(FIELD_NAME, -96.7759895324707, 32.7559529921407, storedPoint),\n         new GeoPointField(FIELD_NAME, -96.77701950073242, 32.77866942010977, storedPoint),\n         new GeoPointField(FIELD_NAME, -96.7706036567688, 32.7756745755423, storedPoint),\n         new GeoPointField(FIELD_NAME, -139.73458170890808, 27.703618681345585, storedPoint),\n         new GeoPointField(FIELD_NAME, -96.65084838867188, 33.06047141970814, storedPoint),\n         new GeoPointField(FIELD_NAME, -96.7772, 32.778650, storedPoint),\n         new GeoPointField(FIELD_NAME, -83.99724648980559, 58.29438379542874, storedPoint),\n         new GeoPointField(FIELD_NAME, -26.779373834241003, 33.541429799076354, storedPoint),\n         new GeoPointField(FIELD_NAME, -77.35379276106497, 26.774024500421728, storedPoint),\n         new GeoPointField(FIELD_NAME, -14.796283808944777, -62.455081198245665, storedPoint)};\n\n    for (GeoPointField p : pts) {\n        Document doc = new Document();\n        doc.add(p);\n        writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    searcher = newSearcher(reader);\n    writer.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a4c5421d43870949fb33be27fc9cba0f8f3a7c8d","date":1437181221,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/search/TestGeoPointQuery#beforeClass().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/search/TestGeoPointQuery#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    directory = newDirectory();\n\n    // when we randomly test the full lat/lon space it can result in very very slow query times, this is due to the\n    // number of ranges that can be created in degenerate cases.\n\n    // Between 1.0 and 3.0:\n//    range = 2*(random().nextDouble() + 0.5);\n    // Between 1.0 and 90.0\n    //lonRange = 1.0 + (90.0 - 1.0) * random().nextDouble();\n    //latRange = 1.0 + (45.0 - 1.0) * random().nextDouble();\n\n    // Between 1.0 and 3.0:\n    lonRange = 2*(random().nextDouble() + 0.5);\n    latRange = 2*(random().nextDouble() + 0.5);\n\n    originLon = GeoUtils.MIN_LON_INCL + lonRange + (GeoUtils.MAX_LON_INCL - GeoUtils.MIN_LON_INCL - 2*lonRange) * random().nextDouble();\n    originLon = GeoUtils.normalizeLon(originLon);\n    originLat = GeoUtils.MIN_LAT_INCL + latRange + (GeoUtils.MAX_LAT_INCL - GeoUtils.MIN_LAT_INCL - 2*latRange) * random().nextDouble();\n    originLat = GeoUtils.normalizeLat(originLat);\n    if (VERBOSE) {\n      System.out.println(\"TEST: originLon=\" + originLon + \" lonRange= \" + lonRange + \" originLat=\" + originLat + \" latRange=\" + latRange);\n    }\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n            newIndexWriterConfig(new MockAnalyzer(random()))\n                    .setMaxBufferedDocs(TestUtil.nextInt(random(), 100, 1000))\n                    .setMergePolicy(newLogMergePolicy()));\n\n    // create some simple geo points\n    final FieldType storedPoint = new FieldType(GeoPointField.TYPE_STORED);\n    // this is a simple systematic test\n    GeoPointField[] pts = new GeoPointField[] {\n         new GeoPointField(FIELD_NAME, -96.4538113027811, 32.94823588839368, storedPoint),\n         new GeoPointField(FIELD_NAME, -96.7759895324707, 32.7559529921407, storedPoint),\n         new GeoPointField(FIELD_NAME, -96.77701950073242, 32.77866942010977, storedPoint),\n         new GeoPointField(FIELD_NAME, -96.7706036567688, 32.7756745755423, storedPoint),\n         new GeoPointField(FIELD_NAME, -139.73458170890808, 27.703618681345585, storedPoint),\n         new GeoPointField(FIELD_NAME, -96.65084838867188, 33.06047141970814, storedPoint),\n         new GeoPointField(FIELD_NAME, -96.7772, 32.778650, storedPoint),\n         new GeoPointField(FIELD_NAME, -83.99724648980559, 58.29438379542874, storedPoint),\n         new GeoPointField(FIELD_NAME, -26.779373834241003, 33.541429799076354, storedPoint),\n         new GeoPointField(FIELD_NAME, -77.35379276106497, 26.774024500421728, storedPoint),\n         new GeoPointField(FIELD_NAME, -14.796283808944777, -62.455081198245665, storedPoint),\n         new GeoPointField(FIELD_NAME, -178.8538113027811, 32.94823588839368, storedPoint),\n         new GeoPointField(FIELD_NAME, 178.8538113027811, 32.94823588839368, storedPoint),\n         new GeoPointField(FIELD_NAME, -179.5, -44.5, storedPoint)};\n\n    for (GeoPointField p : pts) {\n        Document doc = new Document();\n        doc.add(p);\n        writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    searcher = newSearcher(reader);\n    writer.close();\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    directory = newDirectory();\n\n    // when we randomly test the full lat/lon space it can result in very very slow query times, this is due to the\n    // number of ranges that can be created in degenerate cases.\n\n    // Between 1.0 and 3.0:\n    range = 2*(random().nextDouble() + 0.5);\n    originLon = GeoUtils.MIN_LON_INCL + range + (GeoUtils.MAX_LON_INCL - GeoUtils.MIN_LON_INCL - 2*range) * random().nextDouble();\n    originLat = GeoUtils.MIN_LAT_INCL + range + (GeoUtils.MAX_LAT_INCL - GeoUtils.MIN_LAT_INCL - 2*range) * random().nextDouble();\n    if (VERBOSE) {\n      System.out.println(\"TEST: originLon=\" + originLon + \" originLat=\" + originLat + \" range=\" + range);\n    }\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n            newIndexWriterConfig(new MockAnalyzer(random()))\n                    .setMaxBufferedDocs(TestUtil.nextInt(random(), 100, 1000))\n                    .setMergePolicy(newLogMergePolicy()));\n\n    // create some simple geo points\n    final FieldType storedPoint = new FieldType(GeoPointField.TYPE_STORED);\n    // this is a simple systematic test\n    GeoPointField[] pts = new GeoPointField[] {\n         new GeoPointField(FIELD_NAME, -96.4538113027811, 32.94823588839368, storedPoint),\n         new GeoPointField(FIELD_NAME, -96.7759895324707, 32.7559529921407, storedPoint),\n         new GeoPointField(FIELD_NAME, -96.77701950073242, 32.77866942010977, storedPoint),\n         new GeoPointField(FIELD_NAME, -96.7706036567688, 32.7756745755423, storedPoint),\n         new GeoPointField(FIELD_NAME, -139.73458170890808, 27.703618681345585, storedPoint),\n         new GeoPointField(FIELD_NAME, -96.65084838867188, 33.06047141970814, storedPoint),\n         new GeoPointField(FIELD_NAME, -96.7772, 32.778650, storedPoint),\n         new GeoPointField(FIELD_NAME, -83.99724648980559, 58.29438379542874, storedPoint),\n         new GeoPointField(FIELD_NAME, -26.779373834241003, 33.541429799076354, storedPoint),\n         new GeoPointField(FIELD_NAME, -77.35379276106497, 26.774024500421728, storedPoint),\n         new GeoPointField(FIELD_NAME, -14.796283808944777, -62.455081198245665, storedPoint)};\n\n    for (GeoPointField p : pts) {\n        Document doc = new Document();\n        doc.add(p);\n        writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    searcher = newSearcher(reader);\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fc6e227caf7b84b83df6bb987ca077179f03452f","date":1438419526,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/search/TestGeoPointQuery#beforeClass().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/search/TestGeoPointQuery#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    directory = newDirectory();\n\n    // when we randomly test the full lat/lon space it can result in very very slow query times, this is due to the\n    // number of ranges that can be created in degenerate cases.\n\n    // Between 1.0 and 3.0:\n//    range = 2*(random().nextDouble() + 0.5);\n    // Between 1.0 and 90.0\n    //lonRange = 1.0 + (90.0 - 1.0) * random().nextDouble();\n    //latRange = 1.0 + (45.0 - 1.0) * random().nextDouble();\n\n    // Between 1.0 and 3.0:\n    lonRange = 2*(random().nextDouble() + 0.5);\n    latRange = 2*(random().nextDouble() + 0.5);\n\n    originLon = GeoUtils.MIN_LON_INCL + lonRange + (GeoUtils.MAX_LON_INCL - GeoUtils.MIN_LON_INCL - 2*lonRange) * random().nextDouble();\n    originLon = GeoUtils.normalizeLon(originLon);\n    originLat = GeoUtils.MIN_LAT_INCL + latRange + (GeoUtils.MAX_LAT_INCL - GeoUtils.MIN_LAT_INCL - 2*latRange) * random().nextDouble();\n    originLat = GeoUtils.normalizeLat(originLat);\n    if (VERBOSE) {\n      System.out.println(\"TEST: originLon=\" + originLon + \" lonRange= \" + lonRange + \" originLat=\" + originLat + \" latRange=\" + latRange);\n    }\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n            newIndexWriterConfig(new MockAnalyzer(random()))\n                    .setMaxBufferedDocs(TestUtil.nextInt(random(), 100, 1000))\n                    .setMergePolicy(newLogMergePolicy()));\n\n    // create some simple geo points\n    final FieldType storedPoint = new FieldType(GeoPointField.TYPE_STORED);\n    // this is a simple systematic test\n    GeoPointField[] pts = new GeoPointField[] {\n         new GeoPointField(FIELD_NAME, -96.4538113027811, 32.94823588839368, storedPoint),\n         new GeoPointField(FIELD_NAME, -96.7759895324707, 32.7559529921407, storedPoint),\n         new GeoPointField(FIELD_NAME, -96.77701950073242, 32.77866942010977, storedPoint),\n         new GeoPointField(FIELD_NAME, -96.7706036567688, 32.7756745755423, storedPoint),\n         new GeoPointField(FIELD_NAME, -139.73458170890808, 27.703618681345585, storedPoint),\n         new GeoPointField(FIELD_NAME, -96.65084838867188, 33.06047141970814, storedPoint),\n         new GeoPointField(FIELD_NAME, -96.7772, 32.778650, storedPoint),\n         new GeoPointField(FIELD_NAME, -83.99724648980559, 58.29438379542874, storedPoint),\n         new GeoPointField(FIELD_NAME, -26.779373834241003, 33.541429799076354, storedPoint),\n         new GeoPointField(FIELD_NAME, -77.35379276106497, 26.774024500421728, storedPoint),\n         new GeoPointField(FIELD_NAME, -14.796283808944777, -62.455081198245665, storedPoint),\n         new GeoPointField(FIELD_NAME, -178.8538113027811, 32.94823588839368, storedPoint),\n         new GeoPointField(FIELD_NAME, 178.8538113027811, 32.94823588839368, storedPoint),\n         new GeoPointField(FIELD_NAME, -73.998776, 40.720611, storedPoint),\n         new GeoPointField(FIELD_NAME, -179.5, -44.5, storedPoint)};\n\n    for (GeoPointField p : pts) {\n        Document doc = new Document();\n        doc.add(p);\n        writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    searcher = newSearcher(reader);\n    writer.close();\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    directory = newDirectory();\n\n    // when we randomly test the full lat/lon space it can result in very very slow query times, this is due to the\n    // number of ranges that can be created in degenerate cases.\n\n    // Between 1.0 and 3.0:\n//    range = 2*(random().nextDouble() + 0.5);\n    // Between 1.0 and 90.0\n    //lonRange = 1.0 + (90.0 - 1.0) * random().nextDouble();\n    //latRange = 1.0 + (45.0 - 1.0) * random().nextDouble();\n\n    // Between 1.0 and 3.0:\n    lonRange = 2*(random().nextDouble() + 0.5);\n    latRange = 2*(random().nextDouble() + 0.5);\n\n    originLon = GeoUtils.MIN_LON_INCL + lonRange + (GeoUtils.MAX_LON_INCL - GeoUtils.MIN_LON_INCL - 2*lonRange) * random().nextDouble();\n    originLon = GeoUtils.normalizeLon(originLon);\n    originLat = GeoUtils.MIN_LAT_INCL + latRange + (GeoUtils.MAX_LAT_INCL - GeoUtils.MIN_LAT_INCL - 2*latRange) * random().nextDouble();\n    originLat = GeoUtils.normalizeLat(originLat);\n    if (VERBOSE) {\n      System.out.println(\"TEST: originLon=\" + originLon + \" lonRange= \" + lonRange + \" originLat=\" + originLat + \" latRange=\" + latRange);\n    }\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n            newIndexWriterConfig(new MockAnalyzer(random()))\n                    .setMaxBufferedDocs(TestUtil.nextInt(random(), 100, 1000))\n                    .setMergePolicy(newLogMergePolicy()));\n\n    // create some simple geo points\n    final FieldType storedPoint = new FieldType(GeoPointField.TYPE_STORED);\n    // this is a simple systematic test\n    GeoPointField[] pts = new GeoPointField[] {\n         new GeoPointField(FIELD_NAME, -96.4538113027811, 32.94823588839368, storedPoint),\n         new GeoPointField(FIELD_NAME, -96.7759895324707, 32.7559529921407, storedPoint),\n         new GeoPointField(FIELD_NAME, -96.77701950073242, 32.77866942010977, storedPoint),\n         new GeoPointField(FIELD_NAME, -96.7706036567688, 32.7756745755423, storedPoint),\n         new GeoPointField(FIELD_NAME, -139.73458170890808, 27.703618681345585, storedPoint),\n         new GeoPointField(FIELD_NAME, -96.65084838867188, 33.06047141970814, storedPoint),\n         new GeoPointField(FIELD_NAME, -96.7772, 32.778650, storedPoint),\n         new GeoPointField(FIELD_NAME, -83.99724648980559, 58.29438379542874, storedPoint),\n         new GeoPointField(FIELD_NAME, -26.779373834241003, 33.541429799076354, storedPoint),\n         new GeoPointField(FIELD_NAME, -77.35379276106497, 26.774024500421728, storedPoint),\n         new GeoPointField(FIELD_NAME, -14.796283808944777, -62.455081198245665, storedPoint),\n         new GeoPointField(FIELD_NAME, -178.8538113027811, 32.94823588839368, storedPoint),\n         new GeoPointField(FIELD_NAME, 178.8538113027811, 32.94823588839368, storedPoint),\n         new GeoPointField(FIELD_NAME, -179.5, -44.5, storedPoint)};\n\n    for (GeoPointField p : pts) {\n        Document doc = new Document();\n        doc.add(p);\n        writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    searcher = newSearcher(reader);\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"11540ae0536f080714982c91b67e799273893920","date":1438423706,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/search/TestGeoPointQuery#beforeClass().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/search/TestGeoPointQuery#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    directory = newDirectory();\n\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n            newIndexWriterConfig(new MockAnalyzer(random()))\n                    .setMaxBufferedDocs(TestUtil.nextInt(random(), 100, 1000))\n                    .setMergePolicy(newLogMergePolicy()));\n\n    // create some simple geo points\n    final FieldType storedPoint = new FieldType(GeoPointField.TYPE_STORED);\n    // this is a simple systematic test\n    GeoPointField[] pts = new GeoPointField[] {\n         new GeoPointField(FIELD_NAME, -96.4538113027811, 32.94823588839368, storedPoint),\n         new GeoPointField(FIELD_NAME, -96.7759895324707, 32.7559529921407, storedPoint),\n         new GeoPointField(FIELD_NAME, -96.77701950073242, 32.77866942010977, storedPoint),\n         new GeoPointField(FIELD_NAME, -96.7706036567688, 32.7756745755423, storedPoint),\n         new GeoPointField(FIELD_NAME, -139.73458170890808, 27.703618681345585, storedPoint),\n         new GeoPointField(FIELD_NAME, -96.65084838867188, 33.06047141970814, storedPoint),\n         new GeoPointField(FIELD_NAME, -96.7772, 32.778650, storedPoint),\n         new GeoPointField(FIELD_NAME, -83.99724648980559, 58.29438379542874, storedPoint),\n         new GeoPointField(FIELD_NAME, -26.779373834241003, 33.541429799076354, storedPoint),\n         new GeoPointField(FIELD_NAME, -77.35379276106497, 26.774024500421728, storedPoint),\n         new GeoPointField(FIELD_NAME, -14.796283808944777, -62.455081198245665, storedPoint),\n         new GeoPointField(FIELD_NAME, -178.8538113027811, 32.94823588839368, storedPoint),\n         new GeoPointField(FIELD_NAME, 178.8538113027811, 32.94823588839368, storedPoint),\n         new GeoPointField(FIELD_NAME, -73.998776, 40.720611, storedPoint),\n         new GeoPointField(FIELD_NAME, -179.5, -44.5, storedPoint)};\n\n    for (GeoPointField p : pts) {\n        Document doc = new Document();\n        doc.add(p);\n        writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    searcher = newSearcher(reader);\n    writer.close();\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    directory = newDirectory();\n\n    // when we randomly test the full lat/lon space it can result in very very slow query times, this is due to the\n    // number of ranges that can be created in degenerate cases.\n\n    // Between 1.0 and 3.0:\n//    range = 2*(random().nextDouble() + 0.5);\n    // Between 1.0 and 90.0\n    //lonRange = 1.0 + (90.0 - 1.0) * random().nextDouble();\n    //latRange = 1.0 + (45.0 - 1.0) * random().nextDouble();\n\n    // Between 1.0 and 3.0:\n    lonRange = 2*(random().nextDouble() + 0.5);\n    latRange = 2*(random().nextDouble() + 0.5);\n\n    originLon = GeoUtils.MIN_LON_INCL + lonRange + (GeoUtils.MAX_LON_INCL - GeoUtils.MIN_LON_INCL - 2*lonRange) * random().nextDouble();\n    originLon = GeoUtils.normalizeLon(originLon);\n    originLat = GeoUtils.MIN_LAT_INCL + latRange + (GeoUtils.MAX_LAT_INCL - GeoUtils.MIN_LAT_INCL - 2*latRange) * random().nextDouble();\n    originLat = GeoUtils.normalizeLat(originLat);\n    if (VERBOSE) {\n      System.out.println(\"TEST: originLon=\" + originLon + \" lonRange= \" + lonRange + \" originLat=\" + originLat + \" latRange=\" + latRange);\n    }\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n            newIndexWriterConfig(new MockAnalyzer(random()))\n                    .setMaxBufferedDocs(TestUtil.nextInt(random(), 100, 1000))\n                    .setMergePolicy(newLogMergePolicy()));\n\n    // create some simple geo points\n    final FieldType storedPoint = new FieldType(GeoPointField.TYPE_STORED);\n    // this is a simple systematic test\n    GeoPointField[] pts = new GeoPointField[] {\n         new GeoPointField(FIELD_NAME, -96.4538113027811, 32.94823588839368, storedPoint),\n         new GeoPointField(FIELD_NAME, -96.7759895324707, 32.7559529921407, storedPoint),\n         new GeoPointField(FIELD_NAME, -96.77701950073242, 32.77866942010977, storedPoint),\n         new GeoPointField(FIELD_NAME, -96.7706036567688, 32.7756745755423, storedPoint),\n         new GeoPointField(FIELD_NAME, -139.73458170890808, 27.703618681345585, storedPoint),\n         new GeoPointField(FIELD_NAME, -96.65084838867188, 33.06047141970814, storedPoint),\n         new GeoPointField(FIELD_NAME, -96.7772, 32.778650, storedPoint),\n         new GeoPointField(FIELD_NAME, -83.99724648980559, 58.29438379542874, storedPoint),\n         new GeoPointField(FIELD_NAME, -26.779373834241003, 33.541429799076354, storedPoint),\n         new GeoPointField(FIELD_NAME, -77.35379276106497, 26.774024500421728, storedPoint),\n         new GeoPointField(FIELD_NAME, -14.796283808944777, -62.455081198245665, storedPoint),\n         new GeoPointField(FIELD_NAME, -178.8538113027811, 32.94823588839368, storedPoint),\n         new GeoPointField(FIELD_NAME, 178.8538113027811, 32.94823588839368, storedPoint),\n         new GeoPointField(FIELD_NAME, -73.998776, 40.720611, storedPoint),\n         new GeoPointField(FIELD_NAME, -179.5, -44.5, storedPoint)};\n\n    for (GeoPointField p : pts) {\n        Document doc = new Document();\n        doc.add(p);\n        writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    searcher = newSearcher(reader);\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a02003eb48495b52b8483703e1b6b48c099ec7d","date":1438767858,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/search/TestGeoPointQuery#beforeClass().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/search/TestGeoPointQuery#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    directory = newDirectory();\n\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n            newIndexWriterConfig(new MockAnalyzer(random()))\n                    .setMaxBufferedDocs(TestUtil.nextInt(random(), 100, 1000))\n                    .setMergePolicy(newLogMergePolicy()));\n\n    // create some simple geo points\n    final FieldType storedPoint = new FieldType(GeoPointField.TYPE_STORED);\n    // this is a simple systematic test\n    GeoPointField[] pts = new GeoPointField[] {\n         new GeoPointField(FIELD_NAME, -96.774, 32.763420, storedPoint),\n         new GeoPointField(FIELD_NAME, -96.7759895324707, 32.7559529921407, storedPoint),\n         new GeoPointField(FIELD_NAME, -96.77701950073242, 32.77866942010977, storedPoint),\n         new GeoPointField(FIELD_NAME, -96.7706036567688, 32.7756745755423, storedPoint),\n         new GeoPointField(FIELD_NAME, -139.73458170890808, 27.703618681345585, storedPoint),\n         new GeoPointField(FIELD_NAME, -96.4538113027811, 32.94823588839368, storedPoint),\n         new GeoPointField(FIELD_NAME, -96.65084838867188, 33.06047141970814, storedPoint),\n         new GeoPointField(FIELD_NAME, -96.7772, 32.778650, storedPoint),\n         new GeoPointField(FIELD_NAME, -83.99724648980559, 58.29438379542874, storedPoint),\n         new GeoPointField(FIELD_NAME, -26.779373834241003, 33.541429799076354, storedPoint),\n         new GeoPointField(FIELD_NAME, -77.35379276106497, 26.774024500421728, storedPoint),\n         new GeoPointField(FIELD_NAME, -14.796283808944777, -62.455081198245665, storedPoint),\n         new GeoPointField(FIELD_NAME, -178.8538113027811, 32.94823588839368, storedPoint),\n         new GeoPointField(FIELD_NAME, 178.8538113027811, 32.94823588839368, storedPoint),\n         new GeoPointField(FIELD_NAME, -73.998776, 40.720611, storedPoint),\n         new GeoPointField(FIELD_NAME, -179.5, -44.5, storedPoint)};\n\n    for (GeoPointField p : pts) {\n        Document doc = new Document();\n        doc.add(p);\n        writer.addDocument(doc);\n    }\n\n    // add explicit multi-valued docs\n    for (int i=0; i<pts.length; i+=2) {\n      Document doc = new Document();\n      doc.add(pts[i]);\n      doc.add(pts[i+1]);\n      writer.addDocument(doc);\n    }\n\n    reader = writer.getReader();\n    searcher = newSearcher(reader);\n    writer.close();\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    directory = newDirectory();\n\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n            newIndexWriterConfig(new MockAnalyzer(random()))\n                    .setMaxBufferedDocs(TestUtil.nextInt(random(), 100, 1000))\n                    .setMergePolicy(newLogMergePolicy()));\n\n    // create some simple geo points\n    final FieldType storedPoint = new FieldType(GeoPointField.TYPE_STORED);\n    // this is a simple systematic test\n    GeoPointField[] pts = new GeoPointField[] {\n         new GeoPointField(FIELD_NAME, -96.4538113027811, 32.94823588839368, storedPoint),\n         new GeoPointField(FIELD_NAME, -96.7759895324707, 32.7559529921407, storedPoint),\n         new GeoPointField(FIELD_NAME, -96.77701950073242, 32.77866942010977, storedPoint),\n         new GeoPointField(FIELD_NAME, -96.7706036567688, 32.7756745755423, storedPoint),\n         new GeoPointField(FIELD_NAME, -139.73458170890808, 27.703618681345585, storedPoint),\n         new GeoPointField(FIELD_NAME, -96.65084838867188, 33.06047141970814, storedPoint),\n         new GeoPointField(FIELD_NAME, -96.7772, 32.778650, storedPoint),\n         new GeoPointField(FIELD_NAME, -83.99724648980559, 58.29438379542874, storedPoint),\n         new GeoPointField(FIELD_NAME, -26.779373834241003, 33.541429799076354, storedPoint),\n         new GeoPointField(FIELD_NAME, -77.35379276106497, 26.774024500421728, storedPoint),\n         new GeoPointField(FIELD_NAME, -14.796283808944777, -62.455081198245665, storedPoint),\n         new GeoPointField(FIELD_NAME, -178.8538113027811, 32.94823588839368, storedPoint),\n         new GeoPointField(FIELD_NAME, 178.8538113027811, 32.94823588839368, storedPoint),\n         new GeoPointField(FIELD_NAME, -73.998776, 40.720611, storedPoint),\n         new GeoPointField(FIELD_NAME, -179.5, -44.5, storedPoint)};\n\n    for (GeoPointField p : pts) {\n        Document doc = new Document();\n        doc.add(p);\n        writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    searcher = newSearcher(reader);\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f9728ca0faccd3911062a9fe38f19e8114f8f352","date":1448313837,"type":3,"author":"Nick Knize","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/search/TestGeoPointQuery#beforeClass().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/search/TestGeoPointQuery#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    directory = newDirectory();\n\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n            newIndexWriterConfig(new MockAnalyzer(random()))\n                    .setMaxBufferedDocs(TestUtil.nextInt(random(), 100, 1000))\n                    .setMergePolicy(newLogMergePolicy()));\n\n    // create some simple geo points\n    final FieldType storedPoint = new FieldType(GeoPointField.TYPE_STORED);\n    // this is a simple systematic test\n    GeoPointField[] pts = new GeoPointField[] {\n         new GeoPointField(FIELD_NAME, -96.774, 32.763420, storedPoint),\n         new GeoPointField(FIELD_NAME, -96.7759895324707, 32.7559529921407, storedPoint),\n         new GeoPointField(FIELD_NAME, -96.77701950073242, 32.77866942010977, storedPoint),\n         new GeoPointField(FIELD_NAME, -96.7706036567688, 32.7756745755423, storedPoint),\n         new GeoPointField(FIELD_NAME, -139.73458170890808, 27.703618681345585, storedPoint),\n         new GeoPointField(FIELD_NAME, -96.4538113027811, 32.94823588839368, storedPoint),\n         new GeoPointField(FIELD_NAME, -96.65084838867188, 33.06047141970814, storedPoint),\n         new GeoPointField(FIELD_NAME, -96.7772, 32.778650, storedPoint),\n         new GeoPointField(FIELD_NAME, -83.99724648980559, 58.29438379542874, storedPoint),\n         new GeoPointField(FIELD_NAME, -26.779373834241003, 33.541429799076354, storedPoint),\n         new GeoPointField(FIELD_NAME, -77.35379276106497, 26.774024500421728, storedPoint),\n         new GeoPointField(FIELD_NAME, -14.796283808944777, -90.0, storedPoint),\n         new GeoPointField(FIELD_NAME, -178.8538113027811, 32.94823588839368, storedPoint),\n         new GeoPointField(FIELD_NAME, 178.8538113027811, 32.94823588839368, storedPoint),\n         new GeoPointField(FIELD_NAME, -73.998776, 40.720611, storedPoint),\n         new GeoPointField(FIELD_NAME, -179.5, -44.5, storedPoint)};\n\n    for (GeoPointField p : pts) {\n        Document doc = new Document();\n        doc.add(p);\n        writer.addDocument(doc);\n    }\n\n    // add explicit multi-valued docs\n    for (int i=0; i<pts.length; i+=2) {\n      Document doc = new Document();\n      doc.add(pts[i]);\n      doc.add(pts[i+1]);\n      writer.addDocument(doc);\n    }\n\n    // index random string documents\n    for (int i=0; i<random().nextInt(10); ++i) {\n      Document doc = new Document();\n      doc.add(new StringField(\"string\", Integer.toString(i), Field.Store.NO));\n      writer.addDocument(doc);\n    }\n\n    reader = writer.getReader();\n    searcher = newSearcher(reader);\n    writer.close();\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    directory = newDirectory();\n\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n            newIndexWriterConfig(new MockAnalyzer(random()))\n                    .setMaxBufferedDocs(TestUtil.nextInt(random(), 100, 1000))\n                    .setMergePolicy(newLogMergePolicy()));\n\n    // create some simple geo points\n    final FieldType storedPoint = new FieldType(GeoPointField.TYPE_STORED);\n    // this is a simple systematic test\n    GeoPointField[] pts = new GeoPointField[] {\n         new GeoPointField(FIELD_NAME, -96.774, 32.763420, storedPoint),\n         new GeoPointField(FIELD_NAME, -96.7759895324707, 32.7559529921407, storedPoint),\n         new GeoPointField(FIELD_NAME, -96.77701950073242, 32.77866942010977, storedPoint),\n         new GeoPointField(FIELD_NAME, -96.7706036567688, 32.7756745755423, storedPoint),\n         new GeoPointField(FIELD_NAME, -139.73458170890808, 27.703618681345585, storedPoint),\n         new GeoPointField(FIELD_NAME, -96.4538113027811, 32.94823588839368, storedPoint),\n         new GeoPointField(FIELD_NAME, -96.65084838867188, 33.06047141970814, storedPoint),\n         new GeoPointField(FIELD_NAME, -96.7772, 32.778650, storedPoint),\n         new GeoPointField(FIELD_NAME, -83.99724648980559, 58.29438379542874, storedPoint),\n         new GeoPointField(FIELD_NAME, -26.779373834241003, 33.541429799076354, storedPoint),\n         new GeoPointField(FIELD_NAME, -77.35379276106497, 26.774024500421728, storedPoint),\n         new GeoPointField(FIELD_NAME, -14.796283808944777, -62.455081198245665, storedPoint),\n         new GeoPointField(FIELD_NAME, -178.8538113027811, 32.94823588839368, storedPoint),\n         new GeoPointField(FIELD_NAME, 178.8538113027811, 32.94823588839368, storedPoint),\n         new GeoPointField(FIELD_NAME, -73.998776, 40.720611, storedPoint),\n         new GeoPointField(FIELD_NAME, -179.5, -44.5, storedPoint)};\n\n    for (GeoPointField p : pts) {\n        Document doc = new Document();\n        doc.add(p);\n        writer.addDocument(doc);\n    }\n\n    // add explicit multi-valued docs\n    for (int i=0; i<pts.length; i+=2) {\n      Document doc = new Document();\n      doc.add(pts[i]);\n      doc.add(pts[i+1]);\n      writer.addDocument(doc);\n    }\n\n    reader = writer.getReader();\n    searcher = newSearcher(reader);\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d5efb2f55b458ef16fc4c02af5812b1c0cfedcb8","date":1448468240,"type":3,"author":"Nick Knize","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/search/TestGeoPointQuery#beforeClass().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/search/TestGeoPointQuery#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    directory = newDirectory();\n\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n            newIndexWriterConfig(new MockAnalyzer(random()))\n                    .setMaxBufferedDocs(TestUtil.nextInt(random(), 100, 1000))\n                    .setMergePolicy(newLogMergePolicy()));\n\n    // create some simple geo points\n    final FieldType storedPoint = new FieldType(GeoPointField.TYPE_STORED);\n    // this is a simple systematic test\n    GeoPointField[] pts = new GeoPointField[] {\n         new GeoPointField(FIELD_NAME, -96.774, 32.763420, storedPoint),\n         new GeoPointField(FIELD_NAME, -96.7759895324707, 32.7559529921407, storedPoint),\n         new GeoPointField(FIELD_NAME, -96.77701950073242, 32.77866942010977, storedPoint),\n         new GeoPointField(FIELD_NAME, -96.7706036567688, 32.7756745755423, storedPoint),\n         new GeoPointField(FIELD_NAME, -139.73458170890808, 27.703618681345585, storedPoint),\n         new GeoPointField(FIELD_NAME, -96.4538113027811, 32.94823588839368, storedPoint),\n         new GeoPointField(FIELD_NAME, -96.65084838867188, 33.06047141970814, storedPoint),\n         new GeoPointField(FIELD_NAME, -96.7772, 32.778650, storedPoint),\n         new GeoPointField(FIELD_NAME, -177.23537676036358, -88.56029371730983, storedPoint),\n         new GeoPointField(FIELD_NAME, -26.779373834241003, 33.541429799076354, storedPoint),\n         new GeoPointField(FIELD_NAME, -77.35379276106497, 26.774024500421728, storedPoint),\n         new GeoPointField(FIELD_NAME, -14.796283808944777, -90.0, storedPoint),\n         new GeoPointField(FIELD_NAME, -178.8538113027811, 32.94823588839368, storedPoint),\n         new GeoPointField(FIELD_NAME, 178.8538113027811, 32.94823588839368, storedPoint),\n         new GeoPointField(FIELD_NAME, -73.998776, 40.720611, storedPoint),\n         new GeoPointField(FIELD_NAME, -179.5, -44.5, storedPoint)};\n\n    for (GeoPointField p : pts) {\n        Document doc = new Document();\n        doc.add(p);\n        writer.addDocument(doc);\n    }\n\n    // add explicit multi-valued docs\n    for (int i=0; i<pts.length; i+=2) {\n      Document doc = new Document();\n      doc.add(pts[i]);\n      doc.add(pts[i+1]);\n      writer.addDocument(doc);\n    }\n\n    // index random string documents\n    for (int i=0; i<random().nextInt(10); ++i) {\n      Document doc = new Document();\n      doc.add(new StringField(\"string\", Integer.toString(i), Field.Store.NO));\n      writer.addDocument(doc);\n    }\n\n    reader = writer.getReader();\n    searcher = newSearcher(reader);\n    writer.close();\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    directory = newDirectory();\n\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n            newIndexWriterConfig(new MockAnalyzer(random()))\n                    .setMaxBufferedDocs(TestUtil.nextInt(random(), 100, 1000))\n                    .setMergePolicy(newLogMergePolicy()));\n\n    // create some simple geo points\n    final FieldType storedPoint = new FieldType(GeoPointField.TYPE_STORED);\n    // this is a simple systematic test\n    GeoPointField[] pts = new GeoPointField[] {\n         new GeoPointField(FIELD_NAME, -96.774, 32.763420, storedPoint),\n         new GeoPointField(FIELD_NAME, -96.7759895324707, 32.7559529921407, storedPoint),\n         new GeoPointField(FIELD_NAME, -96.77701950073242, 32.77866942010977, storedPoint),\n         new GeoPointField(FIELD_NAME, -96.7706036567688, 32.7756745755423, storedPoint),\n         new GeoPointField(FIELD_NAME, -139.73458170890808, 27.703618681345585, storedPoint),\n         new GeoPointField(FIELD_NAME, -96.4538113027811, 32.94823588839368, storedPoint),\n         new GeoPointField(FIELD_NAME, -96.65084838867188, 33.06047141970814, storedPoint),\n         new GeoPointField(FIELD_NAME, -96.7772, 32.778650, storedPoint),\n         new GeoPointField(FIELD_NAME, -83.99724648980559, 58.29438379542874, storedPoint),\n         new GeoPointField(FIELD_NAME, -26.779373834241003, 33.541429799076354, storedPoint),\n         new GeoPointField(FIELD_NAME, -77.35379276106497, 26.774024500421728, storedPoint),\n         new GeoPointField(FIELD_NAME, -14.796283808944777, -90.0, storedPoint),\n         new GeoPointField(FIELD_NAME, -178.8538113027811, 32.94823588839368, storedPoint),\n         new GeoPointField(FIELD_NAME, 178.8538113027811, 32.94823588839368, storedPoint),\n         new GeoPointField(FIELD_NAME, -73.998776, 40.720611, storedPoint),\n         new GeoPointField(FIELD_NAME, -179.5, -44.5, storedPoint)};\n\n    for (GeoPointField p : pts) {\n        Document doc = new Document();\n        doc.add(p);\n        writer.addDocument(doc);\n    }\n\n    // add explicit multi-valued docs\n    for (int i=0; i<pts.length; i+=2) {\n      Document doc = new Document();\n      doc.add(pts[i]);\n      doc.add(pts[i+1]);\n      writer.addDocument(doc);\n    }\n\n    // index random string documents\n    for (int i=0; i<random().nextInt(10); ++i) {\n      Document doc = new Document();\n      doc.add(new StringField(\"string\", Integer.toString(i), Field.Store.NO));\n      writer.addDocument(doc);\n    }\n\n    reader = writer.getReader();\n    searcher = newSearcher(reader);\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"937923083e4d137932336fc80f3d78758ff698a6","date":1454691519,"type":5,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/search/TestGeoPointQuery#beforeClass().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/search/TestGeoPointQuery#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    directory = newDirectory();\n\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n            newIndexWriterConfig(new MockAnalyzer(random()))\n                    .setMaxBufferedDocs(TestUtil.nextInt(random(), 100, 1000))\n                    .setMergePolicy(newLogMergePolicy()));\n\n    // create some simple geo points\n    final FieldType storedPoint = new FieldType(GeoPointField.TYPE_STORED);\n    // this is a simple systematic test\n    GeoPointField[] pts = new GeoPointField[] {\n         new GeoPointField(FIELD_NAME, -96.774, 32.763420, storedPoint),\n         new GeoPointField(FIELD_NAME, -96.7759895324707, 32.7559529921407, storedPoint),\n         new GeoPointField(FIELD_NAME, -96.77701950073242, 32.77866942010977, storedPoint),\n         new GeoPointField(FIELD_NAME, -96.7706036567688, 32.7756745755423, storedPoint),\n         new GeoPointField(FIELD_NAME, -139.73458170890808, 27.703618681345585, storedPoint),\n         new GeoPointField(FIELD_NAME, -96.4538113027811, 32.94823588839368, storedPoint),\n         new GeoPointField(FIELD_NAME, -96.65084838867188, 33.06047141970814, storedPoint),\n         new GeoPointField(FIELD_NAME, -96.7772, 32.778650, storedPoint),\n         new GeoPointField(FIELD_NAME, -177.23537676036358, -88.56029371730983, storedPoint),\n         new GeoPointField(FIELD_NAME, -26.779373834241003, 33.541429799076354, storedPoint),\n         new GeoPointField(FIELD_NAME, -77.35379276106497, 26.774024500421728, storedPoint),\n         new GeoPointField(FIELD_NAME, -14.796283808944777, -90.0, storedPoint),\n         new GeoPointField(FIELD_NAME, -178.8538113027811, 32.94823588839368, storedPoint),\n         new GeoPointField(FIELD_NAME, 178.8538113027811, 32.94823588839368, storedPoint),\n         new GeoPointField(FIELD_NAME, -73.998776, 40.720611, storedPoint),\n         new GeoPointField(FIELD_NAME, -179.5, -44.5, storedPoint)};\n\n    for (GeoPointField p : pts) {\n        Document doc = new Document();\n        doc.add(p);\n        writer.addDocument(doc);\n    }\n\n    // add explicit multi-valued docs\n    for (int i=0; i<pts.length; i+=2) {\n      Document doc = new Document();\n      doc.add(pts[i]);\n      doc.add(pts[i+1]);\n      writer.addDocument(doc);\n    }\n\n    // index random string documents\n    for (int i=0; i<random().nextInt(10); ++i) {\n      Document doc = new Document();\n      doc.add(new StringField(\"string\", Integer.toString(i), Field.Store.NO));\n      writer.addDocument(doc);\n    }\n\n    reader = writer.getReader();\n    searcher = newSearcher(reader);\n    writer.close();\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    directory = newDirectory();\n\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n            newIndexWriterConfig(new MockAnalyzer(random()))\n                    .setMaxBufferedDocs(TestUtil.nextInt(random(), 100, 1000))\n                    .setMergePolicy(newLogMergePolicy()));\n\n    // create some simple geo points\n    final FieldType storedPoint = new FieldType(GeoPointField.TYPE_STORED);\n    // this is a simple systematic test\n    GeoPointField[] pts = new GeoPointField[] {\n         new GeoPointField(FIELD_NAME, -96.774, 32.763420, storedPoint),\n         new GeoPointField(FIELD_NAME, -96.7759895324707, 32.7559529921407, storedPoint),\n         new GeoPointField(FIELD_NAME, -96.77701950073242, 32.77866942010977, storedPoint),\n         new GeoPointField(FIELD_NAME, -96.7706036567688, 32.7756745755423, storedPoint),\n         new GeoPointField(FIELD_NAME, -139.73458170890808, 27.703618681345585, storedPoint),\n         new GeoPointField(FIELD_NAME, -96.4538113027811, 32.94823588839368, storedPoint),\n         new GeoPointField(FIELD_NAME, -96.65084838867188, 33.06047141970814, storedPoint),\n         new GeoPointField(FIELD_NAME, -96.7772, 32.778650, storedPoint),\n         new GeoPointField(FIELD_NAME, -177.23537676036358, -88.56029371730983, storedPoint),\n         new GeoPointField(FIELD_NAME, -26.779373834241003, 33.541429799076354, storedPoint),\n         new GeoPointField(FIELD_NAME, -77.35379276106497, 26.774024500421728, storedPoint),\n         new GeoPointField(FIELD_NAME, -14.796283808944777, -90.0, storedPoint),\n         new GeoPointField(FIELD_NAME, -178.8538113027811, 32.94823588839368, storedPoint),\n         new GeoPointField(FIELD_NAME, 178.8538113027811, 32.94823588839368, storedPoint),\n         new GeoPointField(FIELD_NAME, -73.998776, 40.720611, storedPoint),\n         new GeoPointField(FIELD_NAME, -179.5, -44.5, storedPoint)};\n\n    for (GeoPointField p : pts) {\n        Document doc = new Document();\n        doc.add(p);\n        writer.addDocument(doc);\n    }\n\n    // add explicit multi-valued docs\n    for (int i=0; i<pts.length; i+=2) {\n      Document doc = new Document();\n      doc.add(pts[i]);\n      doc.add(pts[i+1]);\n      writer.addDocument(doc);\n    }\n\n    // index random string documents\n    for (int i=0; i<random().nextInt(10); ++i) {\n      Document doc = new Document();\n      doc.add(new StringField(\"string\", Integer.toString(i), Field.Store.NO));\n      writer.addDocument(doc);\n    }\n\n    reader = writer.getReader();\n    searcher = newSearcher(reader);\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":5,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/search/TestGeoPointQuery#beforeClass().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/search/TestGeoPointQuery#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    directory = newDirectory();\n    termEncoding = TermEncoding.PREFIX;// randomTermEncoding();\n    fieldType = randomFieldType();\n\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n            newIndexWriterConfig(new MockAnalyzer(random()))\n                    .setMaxBufferedDocs(TestUtil.nextInt(random(), 100, 1000))\n                    .setMergePolicy(newLogMergePolicy()));\n\n    // this is a simple systematic test\n    GeoPointField[] pts = new GeoPointField[] {\n        new GeoPointField(FIELD_NAME, -96.774, 32.763420, fieldType),\n        new GeoPointField(FIELD_NAME, -96.7759895324707, 32.7559529921407, fieldType),\n        new GeoPointField(FIELD_NAME, -96.77701950073242, 32.77866942010977, fieldType),\n        new GeoPointField(FIELD_NAME, -96.7706036567688, 32.7756745755423, fieldType),\n        new GeoPointField(FIELD_NAME, -139.73458170890808, 27.703618681345585, fieldType),\n        new GeoPointField(FIELD_NAME, -96.4538113027811, 32.94823588839368, fieldType),\n        new GeoPointField(FIELD_NAME, -96.65084838867188, 33.06047141970814, fieldType),\n        new GeoPointField(FIELD_NAME, -96.7772, 32.778650, fieldType),\n        new GeoPointField(FIELD_NAME, -177.23537676036358, -88.56029371730983, fieldType),\n        new GeoPointField(FIELD_NAME, -26.779373834241003, 33.541429799076354, fieldType),\n        new GeoPointField(FIELD_NAME, -77.35379276106497, 26.774024500421728, fieldType),\n        new GeoPointField(FIELD_NAME, -14.796283808944777, -90.0, fieldType),\n        new GeoPointField(FIELD_NAME, -178.8538113027811, 32.94823588839368, fieldType),\n        new GeoPointField(FIELD_NAME, 178.8538113027811, 32.94823588839368, fieldType),\n        new GeoPointField(FIELD_NAME, -73.998776, 40.720611, fieldType),\n        new GeoPointField(FIELD_NAME, -179.5, -44.5, fieldType)};\n\n    for (GeoPointField p : pts) {\n        Document doc = new Document();\n        doc.add(p);\n        writer.addDocument(doc);\n    }\n\n    // add explicit multi-valued docs\n    for (int i=0; i<pts.length; i+=2) {\n      Document doc = new Document();\n      doc.add(pts[i]);\n      doc.add(pts[i+1]);\n      writer.addDocument(doc);\n    }\n\n    // index random string documents\n    for (int i=0; i<random().nextInt(10); ++i) {\n      Document doc = new Document();\n      doc.add(new StringField(\"string\", Integer.toString(i), Field.Store.NO));\n      writer.addDocument(doc);\n    }\n\n    reader = writer.getReader();\n    searcher = newSearcher(reader);\n    writer.close();\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    directory = newDirectory();\n\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n            newIndexWriterConfig(new MockAnalyzer(random()))\n                    .setMaxBufferedDocs(TestUtil.nextInt(random(), 100, 1000))\n                    .setMergePolicy(newLogMergePolicy()));\n\n    // create some simple geo points\n    final FieldType storedPoint = new FieldType(GeoPointField.TYPE_STORED);\n    // this is a simple systematic test\n    GeoPointField[] pts = new GeoPointField[] {\n         new GeoPointField(FIELD_NAME, -96.774, 32.763420, storedPoint),\n         new GeoPointField(FIELD_NAME, -96.7759895324707, 32.7559529921407, storedPoint),\n         new GeoPointField(FIELD_NAME, -96.77701950073242, 32.77866942010977, storedPoint),\n         new GeoPointField(FIELD_NAME, -96.7706036567688, 32.7756745755423, storedPoint),\n         new GeoPointField(FIELD_NAME, -139.73458170890808, 27.703618681345585, storedPoint),\n         new GeoPointField(FIELD_NAME, -96.4538113027811, 32.94823588839368, storedPoint),\n         new GeoPointField(FIELD_NAME, -96.65084838867188, 33.06047141970814, storedPoint),\n         new GeoPointField(FIELD_NAME, -96.7772, 32.778650, storedPoint),\n         new GeoPointField(FIELD_NAME, -177.23537676036358, -88.56029371730983, storedPoint),\n         new GeoPointField(FIELD_NAME, -26.779373834241003, 33.541429799076354, storedPoint),\n         new GeoPointField(FIELD_NAME, -77.35379276106497, 26.774024500421728, storedPoint),\n         new GeoPointField(FIELD_NAME, -14.796283808944777, -90.0, storedPoint),\n         new GeoPointField(FIELD_NAME, -178.8538113027811, 32.94823588839368, storedPoint),\n         new GeoPointField(FIELD_NAME, 178.8538113027811, 32.94823588839368, storedPoint),\n         new GeoPointField(FIELD_NAME, -73.998776, 40.720611, storedPoint),\n         new GeoPointField(FIELD_NAME, -179.5, -44.5, storedPoint)};\n\n    for (GeoPointField p : pts) {\n        Document doc = new Document();\n        doc.add(p);\n        writer.addDocument(doc);\n    }\n\n    // add explicit multi-valued docs\n    for (int i=0; i<pts.length; i+=2) {\n      Document doc = new Document();\n      doc.add(pts[i]);\n      doc.add(pts[i+1]);\n      writer.addDocument(doc);\n    }\n\n    // index random string documents\n    for (int i=0; i<random().nextInt(10); ++i) {\n      Document doc = new Document();\n      doc.add(new StringField(\"string\", Integer.toString(i), Field.Store.NO));\n      writer.addDocument(doc);\n    }\n\n    reader = writer.getReader();\n    searcher = newSearcher(reader);\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f9728ca0faccd3911062a9fe38f19e8114f8f352":["7a02003eb48495b52b8483703e1b6b48c099ec7d"],"fc6e227caf7b84b83df6bb987ca077179f03452f":["a4c5421d43870949fb33be27fc9cba0f8f3a7c8d"],"a4c5421d43870949fb33be27fc9cba0f8f3a7c8d":["e91b7d9f5000faefb0e81b98e76ad5b9463283e8"],"d5efb2f55b458ef16fc4c02af5812b1c0cfedcb8":["f9728ca0faccd3911062a9fe38f19e8114f8f352"],"11540ae0536f080714982c91b67e799273893920":["fc6e227caf7b84b83df6bb987ca077179f03452f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["d5efb2f55b458ef16fc4c02af5812b1c0cfedcb8","937923083e4d137932336fc80f3d78758ff698a6"],"e91b7d9f5000faefb0e81b98e76ad5b9463283e8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"937923083e4d137932336fc80f3d78758ff698a6":["d5efb2f55b458ef16fc4c02af5812b1c0cfedcb8"],"7a02003eb48495b52b8483703e1b6b48c099ec7d":["11540ae0536f080714982c91b67e799273893920"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["937923083e4d137932336fc80f3d78758ff698a6"]},"commit2Childs":{"f9728ca0faccd3911062a9fe38f19e8114f8f352":["d5efb2f55b458ef16fc4c02af5812b1c0cfedcb8"],"fc6e227caf7b84b83df6bb987ca077179f03452f":["11540ae0536f080714982c91b67e799273893920"],"a4c5421d43870949fb33be27fc9cba0f8f3a7c8d":["fc6e227caf7b84b83df6bb987ca077179f03452f"],"d5efb2f55b458ef16fc4c02af5812b1c0cfedcb8":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","937923083e4d137932336fc80f3d78758ff698a6"],"11540ae0536f080714982c91b67e799273893920":["7a02003eb48495b52b8483703e1b6b48c099ec7d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e91b7d9f5000faefb0e81b98e76ad5b9463283e8"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":[],"e91b7d9f5000faefb0e81b98e76ad5b9463283e8":["a4c5421d43870949fb33be27fc9cba0f8f3a7c8d"],"937923083e4d137932336fc80f3d78758ff698a6":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7a02003eb48495b52b8483703e1b6b48c099ec7d":["f9728ca0faccd3911062a9fe38f19e8114f8f352"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}