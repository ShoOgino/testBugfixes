{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/GenericDistributedQueue#peekElements(int,long,Predicate[String]).mjava","commits":[{"id":"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","date":1513252583,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/GenericDistributedQueue#peekElements(int,long,Predicate[String]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Return the currently-known set of elements, using child names from memory. If no children are found, or no\n   * children pass {@code acceptFilter}, waits up to {@code waitMillis} for at least one child to become available.\n   * <p>\n   * Package-private to support {@link OverseerTaskQueue} specifically.</p>\n   */\n  @Override\n  public Collection<Pair<String, byte[]>> peekElements(int max, long waitMillis, Predicate<String> acceptFilter) throws Exception {\n    List<String> foundChildren = new ArrayList<>();\n    long waitNanos = TimeUnit.MILLISECONDS.toNanos(waitMillis);\n    boolean first = true;\n    while (true) {\n      // Trigger a refresh, but only force it if this is not the first iteration.\n      firstChild(false, !first);\n\n      updateLock.lockInterruptibly();\n      try {\n        for (String child : knownChildren) {\n          if (acceptFilter.test(child)) {\n            foundChildren.add(child);\n          }\n        }\n        if (!foundChildren.isEmpty()) {\n          break;\n        }\n        if (waitNanos <= 0) {\n          break;\n        }\n\n        // If this is our first time through, force a refresh before waiting.\n        if (first) {\n          first = false;\n          continue;\n        }\n\n        waitNanos = changed.awaitNanos(waitNanos);\n      } finally {\n        updateLock.unlock();\n      }\n\n      if (!foundChildren.isEmpty()) {\n        break;\n      }\n    }\n\n    // Technically we could restart the method if we fail to actually obtain any valid children\n    // from ZK, but this is a super rare case, and the latency of the ZK fetches would require\n    // much more sophisticated waitNanos tracking.\n    List<Pair<String, byte[]>> result = new ArrayList<>();\n    for (String child : foundChildren) {\n      if (result.size() >= max) {\n        break;\n      }\n      try {\n        VersionedData data = stateManager.getData(dir + \"/\" + child);\n        result.add(new Pair<>(child, data.getData()));\n      } catch (NoSuchElementException e) {\n        // Another client deleted the node first, remove the in-memory and continue.\n        updateLock.lockInterruptibly();\n        try {\n          knownChildren.remove(child);\n        } finally {\n          updateLock.unlock();\n        }\n      }\n    }\n    return result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5","date":1556572478,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/GenericDistributedQueue#peekElements(int,long,Predicate[String]).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/GenericDistributedQueue#peekElements(int,long,Predicate[String]).mjava","sourceNew":"  /**\n   * Return the currently-known set of elements, using child names from memory. If no children are found, or no\n   * children pass {@code acceptFilter}, waits up to {@code waitMillis} for at least one child to become available.\n   * <p>\n   * Package-private to support {@link OverseerTaskQueue} specifically.</p>\n   */\n  @Override\n  public Collection<Pair<String, byte[]>> peekElements(int max, long waitMillis, Predicate<String> acceptFilter) throws Exception {\n    List<String> foundChildren = new ArrayList<>();\n    long waitNanos = TimeUnit.MILLISECONDS.toNanos(waitMillis);\n    boolean first = true;\n    while (true) {\n      // Trigger a refresh, but only force it if this is not the first iteration.\n      firstChild(false, !first);\n\n      updateLock.lockInterruptibly();\n      try {\n        for (String child : knownChildren) {\n          if (acceptFilter.test(child)) {\n            foundChildren.add(child);\n          }\n        }\n        if (!foundChildren.isEmpty()) {\n          break;\n        }\n        if (waitNanos <= 0) {\n          break;\n        }\n\n        // If this is our first time through, force a refresh before waiting.\n        if (first) {\n          first = false;\n          continue;\n        }\n\n        waitNanos = changed.awaitNanos(waitNanos);\n      } finally {\n        updateLock.unlock();\n      }\n\n      if (!foundChildren.isEmpty()) {\n        break;\n      }\n    }\n\n    // Technically we could restart the method if we fail to actually obtain any valid children\n    // from ZK, but this is a super rare case, and the latency of the ZK fetches would require\n    // much more sophisticated waitNanos tracking.\n    List<Pair<String, byte[]>> result = new ArrayList<>();\n    for (String child : foundChildren) {\n      if (result.size() >= max) {\n        break;\n      }\n      try {\n        VersionedData data = stateManager.getData(dir + \"/\" + child);\n        result.add(new Pair<>(child, data.getData()));\n      } catch (NoSuchElementException e) {\n        // Another client deleted the node first, remove the in-memory and continue.\n        updateLock.lockInterruptibly();\n        try {\n          knownChildren.remove(child);\n        } finally {\n          updateLock.unlock();\n        }\n      }\n    }\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Return the currently-known set of elements, using child names from memory. If no children are found, or no\n   * children pass {@code acceptFilter}, waits up to {@code waitMillis} for at least one child to become available.\n   * <p>\n   * Package-private to support {@link OverseerTaskQueue} specifically.</p>\n   */\n  @Override\n  public Collection<Pair<String, byte[]>> peekElements(int max, long waitMillis, Predicate<String> acceptFilter) throws Exception {\n    List<String> foundChildren = new ArrayList<>();\n    long waitNanos = TimeUnit.MILLISECONDS.toNanos(waitMillis);\n    boolean first = true;\n    while (true) {\n      // Trigger a refresh, but only force it if this is not the first iteration.\n      firstChild(false, !first);\n\n      updateLock.lockInterruptibly();\n      try {\n        for (String child : knownChildren) {\n          if (acceptFilter.test(child)) {\n            foundChildren.add(child);\n          }\n        }\n        if (!foundChildren.isEmpty()) {\n          break;\n        }\n        if (waitNanos <= 0) {\n          break;\n        }\n\n        // If this is our first time through, force a refresh before waiting.\n        if (first) {\n          first = false;\n          continue;\n        }\n\n        waitNanos = changed.awaitNanos(waitNanos);\n      } finally {\n        updateLock.unlock();\n      }\n\n      if (!foundChildren.isEmpty()) {\n        break;\n      }\n    }\n\n    // Technically we could restart the method if we fail to actually obtain any valid children\n    // from ZK, but this is a super rare case, and the latency of the ZK fetches would require\n    // much more sophisticated waitNanos tracking.\n    List<Pair<String, byte[]>> result = new ArrayList<>();\n    for (String child : foundChildren) {\n      if (result.size() >= max) {\n        break;\n      }\n      try {\n        VersionedData data = stateManager.getData(dir + \"/\" + child);\n        result.add(new Pair<>(child, data.getData()));\n      } catch (NoSuchElementException e) {\n        // Another client deleted the node first, remove the in-memory and continue.\n        updateLock.lockInterruptibly();\n        try {\n          knownChildren.remove(child);\n        } finally {\n          updateLock.unlock();\n        }\n      }\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}