{"path":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testEmptyDirRollback().mjava","commits":[{"id":"69a923a22517eb7ff0bad9c6d1a7d45cc0696bd4","date":1271167458,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testEmptyDirRollback().mjava","pathOld":"/dev/null","sourceNew":"  public void testEmptyDirRollback() throws Exception {\n    // Tests that if IW is created over an empty Directory, some documents are\n    // indexed, flushed (but not committed) and then IW rolls back, then no \n    // files are left in the Directory.\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT))\n        .setMaxBufferedDocs(2));\n    // Creating over empty dir should not create any files.\n    assertEquals(0, dir.listAll().length);\n    Document doc = new Document();\n    // create as many files as possible\n    doc.add(new Field(\"c\", \"val\", Store.YES, Index.ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n    // Adding just one document does not call flush yet.\n    assertEquals(\"only the stored and term vector files should exist in the directory\", 5, dir.listAll().length);\n    \n    doc = new Document();\n    doc.add(new Field(\"c\", \"val\", Store.YES, Index.ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n    // The second document should cause a flush.\n    assertTrue(\"flush should have occurred and files created\", dir.listAll().length > 5);\n   \n    // After rollback, IW should remove all files\n    writer.rollback();\n    assertEquals(\"no files should exist in the directory after rollback\", 0, dir.listAll().length);\n\n    // Since we rolled-back above, that close should be a no-op\n    writer.close();\n    assertEquals(\"expected a no-op close after IW.rollback()\", 0, dir.listAll().length);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["5ef87af8c7bd0f8429622b83aa74202383f2e757"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d572389229127c297dd1fa5ce4758e1cec41e799","date":1273610938,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testEmptyDirRollback().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testEmptyDirRollback().mjava","sourceNew":"  public void testEmptyDirRollback() throws Exception {\n    // Tests that if IW is created over an empty Directory, some documents are\n    // indexed, flushed (but not committed) and then IW rolls back, then no \n    // files are left in the Directory.\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(2));\n    // Creating over empty dir should not create any files.\n    assertEquals(0, dir.listAll().length);\n    Document doc = new Document();\n    // create as many files as possible\n    doc.add(new Field(\"c\", \"val\", Store.YES, Index.ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n    // Adding just one document does not call flush yet.\n    assertEquals(\"only the stored and term vector files should exist in the directory\", 5, dir.listAll().length);\n    \n    doc = new Document();\n    doc.add(new Field(\"c\", \"val\", Store.YES, Index.ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n    // The second document should cause a flush.\n    assertTrue(\"flush should have occurred and files created\", dir.listAll().length > 5);\n   \n    // After rollback, IW should remove all files\n    writer.rollback();\n    assertEquals(\"no files should exist in the directory after rollback\", 0, dir.listAll().length);\n\n    // Since we rolled-back above, that close should be a no-op\n    writer.close();\n    assertEquals(\"expected a no-op close after IW.rollback()\", 0, dir.listAll().length);\n  }\n\n","sourceOld":"  public void testEmptyDirRollback() throws Exception {\n    // Tests that if IW is created over an empty Directory, some documents are\n    // indexed, flushed (but not committed) and then IW rolls back, then no \n    // files are left in the Directory.\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT))\n        .setMaxBufferedDocs(2));\n    // Creating over empty dir should not create any files.\n    assertEquals(0, dir.listAll().length);\n    Document doc = new Document();\n    // create as many files as possible\n    doc.add(new Field(\"c\", \"val\", Store.YES, Index.ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n    // Adding just one document does not call flush yet.\n    assertEquals(\"only the stored and term vector files should exist in the directory\", 5, dir.listAll().length);\n    \n    doc = new Document();\n    doc.add(new Field(\"c\", \"val\", Store.YES, Index.ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n    // The second document should cause a flush.\n    assertTrue(\"flush should have occurred and files created\", dir.listAll().length > 5);\n   \n    // After rollback, IW should remove all files\n    writer.rollback();\n    assertEquals(\"no files should exist in the directory after rollback\", 0, dir.listAll().length);\n\n    // Since we rolled-back above, that close should be a no-op\n    writer.close();\n    assertEquals(\"expected a no-op close after IW.rollback()\", 0, dir.listAll().length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5ef87af8c7bd0f8429622b83aa74202383f2e757","date":1280262785,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testEmptyDirRollback().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testEmptyDirRollback().mjava","sourceNew":"  public void testEmptyDirRollback() throws Exception {\n    // Tests that if IW is created over an empty Directory, some documents are\n    // indexed, flushed (but not committed) and then IW rolls back, then no \n    // files are left in the Directory.\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(2));\n    // Creating over empty dir should not create any files.\n    assertEquals(0, dir.listAll().length);\n    Document doc = new Document();\n    // create as many files as possible\n    doc.add(new Field(\"c\", \"val\", Store.YES, Index.ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n    // Adding just one document does not call flush yet.\n    assertEquals(\"only the stored and term vector files should exist in the directory\", 5, dir.listAll().length);\n    \n    doc = new Document();\n    doc.add(new Field(\"c\", \"val\", Store.YES, Index.ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n    // The second document should cause a flush.\n    assertTrue(\"flush should have occurred and files created\", dir.listAll().length > 0);\n   \n    // After rollback, IW should remove all files\n    writer.rollback();\n    assertEquals(\"no files should exist in the directory after rollback\", 0, dir.listAll().length);\n\n    // Since we rolled-back above, that close should be a no-op\n    writer.close();\n    assertEquals(\"expected a no-op close after IW.rollback()\", 0, dir.listAll().length);\n  }\n\n","sourceOld":"  public void testEmptyDirRollback() throws Exception {\n    // Tests that if IW is created over an empty Directory, some documents are\n    // indexed, flushed (but not committed) and then IW rolls back, then no \n    // files are left in the Directory.\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(2));\n    // Creating over empty dir should not create any files.\n    assertEquals(0, dir.listAll().length);\n    Document doc = new Document();\n    // create as many files as possible\n    doc.add(new Field(\"c\", \"val\", Store.YES, Index.ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n    // Adding just one document does not call flush yet.\n    assertEquals(\"only the stored and term vector files should exist in the directory\", 5, dir.listAll().length);\n    \n    doc = new Document();\n    doc.add(new Field(\"c\", \"val\", Store.YES, Index.ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n    // The second document should cause a flush.\n    assertTrue(\"flush should have occurred and files created\", dir.listAll().length > 5);\n   \n    // After rollback, IW should remove all files\n    writer.rollback();\n    assertEquals(\"no files should exist in the directory after rollback\", 0, dir.listAll().length);\n\n    // Since we rolled-back above, that close should be a no-op\n    writer.close();\n    assertEquals(\"expected a no-op close after IW.rollback()\", 0, dir.listAll().length);\n  }\n\n","bugFix":["69a923a22517eb7ff0bad9c6d1a7d45cc0696bd4"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b21422ff1d1d56499dec481f193b402e5e8def5b","date":1281472367,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testEmptyDirRollback().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testEmptyDirRollback().mjava","sourceNew":"  public void testEmptyDirRollback() throws Exception {\n    // Tests that if IW is created over an empty Directory, some documents are\n    // indexed, flushed (but not committed) and then IW rolls back, then no \n    // files are left in the Directory.\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random, \n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(2));\n    // Creating over empty dir should not create any files.\n    assertEquals(0, dir.listAll().length);\n    Document doc = new Document();\n    // create as many files as possible\n    doc.add(new Field(\"c\", \"val\", Store.YES, Index.ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n    // Adding just one document does not call flush yet.\n    assertEquals(\"only the stored and term vector files should exist in the directory\", 5, dir.listAll().length);\n    \n    doc = new Document();\n    doc.add(new Field(\"c\", \"val\", Store.YES, Index.ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n    // The second document should cause a flush.\n    assertTrue(\"flush should have occurred and files created\", dir.listAll().length > 5);\n   \n    // After rollback, IW should remove all files\n    writer.rollback();\n    assertEquals(\"no files should exist in the directory after rollback\", 0, dir.listAll().length);\n\n    // Since we rolled-back above, that close should be a no-op\n    writer.close();\n    assertEquals(\"expected a no-op close after IW.rollback()\", 0, dir.listAll().length);\n  }\n\n","sourceOld":"  public void testEmptyDirRollback() throws Exception {\n    // Tests that if IW is created over an empty Directory, some documents are\n    // indexed, flushed (but not committed) and then IW rolls back, then no \n    // files are left in the Directory.\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(2));\n    // Creating over empty dir should not create any files.\n    assertEquals(0, dir.listAll().length);\n    Document doc = new Document();\n    // create as many files as possible\n    doc.add(new Field(\"c\", \"val\", Store.YES, Index.ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n    // Adding just one document does not call flush yet.\n    assertEquals(\"only the stored and term vector files should exist in the directory\", 5, dir.listAll().length);\n    \n    doc = new Document();\n    doc.add(new Field(\"c\", \"val\", Store.YES, Index.ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n    // The second document should cause a flush.\n    assertTrue(\"flush should have occurred and files created\", dir.listAll().length > 5);\n   \n    // After rollback, IW should remove all files\n    writer.rollback();\n    assertEquals(\"no files should exist in the directory after rollback\", 0, dir.listAll().length);\n\n    // Since we rolled-back above, that close should be a no-op\n    writer.close();\n    assertEquals(\"expected a no-op close after IW.rollback()\", 0, dir.listAll().length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","date":1281646583,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testEmptyDirRollback().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testEmptyDirRollback().mjava","sourceNew":"  public void testEmptyDirRollback() throws Exception {\n    // Tests that if IW is created over an empty Directory, some documents are\n    // indexed, flushed (but not committed) and then IW rolls back, then no \n    // files are left in the Directory.\n    Directory dir = newDirectory(random);\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random, \n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(2));\n    // Creating over empty dir should not create any files.\n    assertEquals(0, dir.listAll().length);\n    Document doc = new Document();\n    // create as many files as possible\n    doc.add(new Field(\"c\", \"val\", Store.YES, Index.ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n    // Adding just one document does not call flush yet.\n    assertEquals(\"only the stored and term vector files should exist in the directory\", 5, dir.listAll().length);\n    \n    doc = new Document();\n    doc.add(new Field(\"c\", \"val\", Store.YES, Index.ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n    // The second document should cause a flush.\n    assertTrue(\"flush should have occurred and files created\", dir.listAll().length > 5);\n   \n    // After rollback, IW should remove all files\n    writer.rollback();\n    assertEquals(\"no files should exist in the directory after rollback\", 0, dir.listAll().length);\n\n    // Since we rolled-back above, that close should be a no-op\n    writer.close();\n    assertEquals(\"expected a no-op close after IW.rollback()\", 0, dir.listAll().length);\n    dir.close();\n  }\n\n","sourceOld":"  public void testEmptyDirRollback() throws Exception {\n    // Tests that if IW is created over an empty Directory, some documents are\n    // indexed, flushed (but not committed) and then IW rolls back, then no \n    // files are left in the Directory.\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random, \n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(2));\n    // Creating over empty dir should not create any files.\n    assertEquals(0, dir.listAll().length);\n    Document doc = new Document();\n    // create as many files as possible\n    doc.add(new Field(\"c\", \"val\", Store.YES, Index.ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n    // Adding just one document does not call flush yet.\n    assertEquals(\"only the stored and term vector files should exist in the directory\", 5, dir.listAll().length);\n    \n    doc = new Document();\n    doc.add(new Field(\"c\", \"val\", Store.YES, Index.ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n    // The second document should cause a flush.\n    assertTrue(\"flush should have occurred and files created\", dir.listAll().length > 5);\n   \n    // After rollback, IW should remove all files\n    writer.rollback();\n    assertEquals(\"no files should exist in the directory after rollback\", 0, dir.listAll().length);\n\n    // Since we rolled-back above, that close should be a no-op\n    writer.close();\n    assertEquals(\"expected a no-op close after IW.rollback()\", 0, dir.listAll().length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"caada1d700c39415a1749fafa2d2b4088fecd90b","date":1282604066,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testEmptyDirRollback().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testEmptyDirRollback().mjava","sourceNew":"  public void testEmptyDirRollback() throws Exception {\n    // Tests that if IW is created over an empty Directory, some documents are\n    // indexed, flushed (but not committed) and then IW rolls back, then no \n    // files are left in the Directory.\n    Directory dir = newDirectory(random);\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random, \n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(2));\n    String[] files = dir.listAll();\n\n    // Creating over empty dir should not create any files,\n    // or, at most the write.lock file\n    final int extraFileCount;\n    if (files.length == 1) {\n      assertEquals(\"write.lock\", files[0]);\n      extraFileCount = 1;\n    } else {\n      assertEquals(0, files.length);\n      extraFileCount = 0;\n    }\n\n    Document doc = new Document();\n    // create as many files as possible\n    doc.add(new Field(\"c\", \"val\", Store.YES, Index.ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n    // Adding just one document does not call flush yet.\n    assertEquals(\"only the stored and term vector files should exist in the directory\", 5 + extraFileCount, dir.listAll().length);\n    \n    doc = new Document();\n    doc.add(new Field(\"c\", \"val\", Store.YES, Index.ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n    // The second document should cause a flush.\n    assertTrue(\"flush should have occurred and files created\", dir.listAll().length > 5 + extraFileCount);\n   \n    // After rollback, IW should remove all files\n    writer.rollback();\n    assertEquals(\"no files should exist in the directory after rollback\", 0, dir.listAll().length);\n\n    // Since we rolled-back above, that close should be a no-op\n    writer.close();\n    assertEquals(\"expected a no-op close after IW.rollback()\", 0, dir.listAll().length);\n    dir.close();\n  }\n\n","sourceOld":"  public void testEmptyDirRollback() throws Exception {\n    // Tests that if IW is created over an empty Directory, some documents are\n    // indexed, flushed (but not committed) and then IW rolls back, then no \n    // files are left in the Directory.\n    Directory dir = newDirectory(random);\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random, \n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(2));\n    // Creating over empty dir should not create any files.\n    assertEquals(0, dir.listAll().length);\n    Document doc = new Document();\n    // create as many files as possible\n    doc.add(new Field(\"c\", \"val\", Store.YES, Index.ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n    // Adding just one document does not call flush yet.\n    assertEquals(\"only the stored and term vector files should exist in the directory\", 5, dir.listAll().length);\n    \n    doc = new Document();\n    doc.add(new Field(\"c\", \"val\", Store.YES, Index.ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n    // The second document should cause a flush.\n    assertTrue(\"flush should have occurred and files created\", dir.listAll().length > 5);\n   \n    // After rollback, IW should remove all files\n    writer.rollback();\n    assertEquals(\"no files should exist in the directory after rollback\", 0, dir.listAll().length);\n\n    // Since we rolled-back above, that close should be a no-op\n    writer.close();\n    assertEquals(\"expected a no-op close after IW.rollback()\", 0, dir.listAll().length);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testEmptyDirRollback().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testEmptyDirRollback().mjava","sourceNew":"  public void testEmptyDirRollback() throws Exception {\n    // Tests that if IW is created over an empty Directory, some documents are\n    // indexed, flushed (but not committed) and then IW rolls back, then no \n    // files are left in the Directory.\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( \n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(2));\n    String[] files = dir.listAll();\n\n    // Creating over empty dir should not create any files,\n    // or, at most the write.lock file\n    final int extraFileCount;\n    if (files.length == 1) {\n      assertEquals(\"write.lock\", files[0]);\n      extraFileCount = 1;\n    } else {\n      assertEquals(0, files.length);\n      extraFileCount = 0;\n    }\n\n    Document doc = new Document();\n    // create as many files as possible\n    doc.add(new Field(\"c\", \"val\", Store.YES, Index.ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n    // Adding just one document does not call flush yet.\n    assertEquals(\"only the stored and term vector files should exist in the directory\", 5 + extraFileCount, dir.listAll().length);\n    \n    doc = new Document();\n    doc.add(new Field(\"c\", \"val\", Store.YES, Index.ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n    // The second document should cause a flush.\n    assertTrue(\"flush should have occurred and files created\", dir.listAll().length > 5 + extraFileCount);\n   \n    // After rollback, IW should remove all files\n    writer.rollback();\n    assertEquals(\"no files should exist in the directory after rollback\", 0, dir.listAll().length);\n\n    // Since we rolled-back above, that close should be a no-op\n    writer.close();\n    assertEquals(\"expected a no-op close after IW.rollback()\", 0, dir.listAll().length);\n    dir.close();\n  }\n\n","sourceOld":"  public void testEmptyDirRollback() throws Exception {\n    // Tests that if IW is created over an empty Directory, some documents are\n    // indexed, flushed (but not committed) and then IW rolls back, then no \n    // files are left in the Directory.\n    Directory dir = newDirectory(random);\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random, \n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(2));\n    String[] files = dir.listAll();\n\n    // Creating over empty dir should not create any files,\n    // or, at most the write.lock file\n    final int extraFileCount;\n    if (files.length == 1) {\n      assertEquals(\"write.lock\", files[0]);\n      extraFileCount = 1;\n    } else {\n      assertEquals(0, files.length);\n      extraFileCount = 0;\n    }\n\n    Document doc = new Document();\n    // create as many files as possible\n    doc.add(new Field(\"c\", \"val\", Store.YES, Index.ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n    // Adding just one document does not call flush yet.\n    assertEquals(\"only the stored and term vector files should exist in the directory\", 5 + extraFileCount, dir.listAll().length);\n    \n    doc = new Document();\n    doc.add(new Field(\"c\", \"val\", Store.YES, Index.ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n    // The second document should cause a flush.\n    assertTrue(\"flush should have occurred and files created\", dir.listAll().length > 5 + extraFileCount);\n   \n    // After rollback, IW should remove all files\n    writer.rollback();\n    assertEquals(\"no files should exist in the directory after rollback\", 0, dir.listAll().length);\n\n    // Since we rolled-back above, that close should be a no-op\n    writer.close();\n    assertEquals(\"expected a no-op close after IW.rollback()\", 0, dir.listAll().length);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"132903c28af3aa6f67284b78de91c0f0a99488c2","date":1284282129,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testEmptyDirRollback().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testEmptyDirRollback().mjava","sourceNew":"  public void testEmptyDirRollback() throws Exception {\n    // Tests that if IW is created over an empty Directory, some documents are\n    // indexed, flushed (but not committed) and then IW rolls back, then no \n    // files are left in the Directory.\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( \n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(2));\n    String[] files = dir.listAll();\n\n    // Creating over empty dir should not create any files,\n    // or, at most the write.lock file\n    final int extraFileCount;\n    if (files.length == 1) {\n      assertEquals(\"write.lock\", files[0]);\n      extraFileCount = 1;\n    } else {\n      assertEquals(0, files.length);\n      extraFileCount = 0;\n    }\n\n    Document doc = new Document();\n    // create as many files as possible\n    doc.add(newField(\"c\", \"val\", Store.YES, Index.ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n    // Adding just one document does not call flush yet.\n    assertEquals(\"only the stored and term vector files should exist in the directory\", 5 + extraFileCount, dir.listAll().length);\n    \n    doc = new Document();\n    doc.add(newField(\"c\", \"val\", Store.YES, Index.ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n    // The second document should cause a flush.\n    assertTrue(\"flush should have occurred and files created\", dir.listAll().length > 5 + extraFileCount);\n   \n    // After rollback, IW should remove all files\n    writer.rollback();\n    assertEquals(\"no files should exist in the directory after rollback\", 0, dir.listAll().length);\n\n    // Since we rolled-back above, that close should be a no-op\n    writer.close();\n    assertEquals(\"expected a no-op close after IW.rollback()\", 0, dir.listAll().length);\n    dir.close();\n  }\n\n","sourceOld":"  public void testEmptyDirRollback() throws Exception {\n    // Tests that if IW is created over an empty Directory, some documents are\n    // indexed, flushed (but not committed) and then IW rolls back, then no \n    // files are left in the Directory.\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( \n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(2));\n    String[] files = dir.listAll();\n\n    // Creating over empty dir should not create any files,\n    // or, at most the write.lock file\n    final int extraFileCount;\n    if (files.length == 1) {\n      assertEquals(\"write.lock\", files[0]);\n      extraFileCount = 1;\n    } else {\n      assertEquals(0, files.length);\n      extraFileCount = 0;\n    }\n\n    Document doc = new Document();\n    // create as many files as possible\n    doc.add(new Field(\"c\", \"val\", Store.YES, Index.ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n    // Adding just one document does not call flush yet.\n    assertEquals(\"only the stored and term vector files should exist in the directory\", 5 + extraFileCount, dir.listAll().length);\n    \n    doc = new Document();\n    doc.add(new Field(\"c\", \"val\", Store.YES, Index.ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n    // The second document should cause a flush.\n    assertTrue(\"flush should have occurred and files created\", dir.listAll().length > 5 + extraFileCount);\n   \n    // After rollback, IW should remove all files\n    writer.rollback();\n    assertEquals(\"no files should exist in the directory after rollback\", 0, dir.listAll().length);\n\n    // Since we rolled-back above, that close should be a no-op\n    writer.close();\n    assertEquals(\"expected a no-op close after IW.rollback()\", 0, dir.listAll().length);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testEmptyDirRollback().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testEmptyDirRollback().mjava","sourceNew":"  public void testEmptyDirRollback() throws Exception {\n    // Tests that if IW is created over an empty Directory, some documents are\n    // indexed, flushed (but not committed) and then IW rolls back, then no\n    // files are left in the Directory.\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(2));\n    String[] files = dir.listAll();\n\n    // Creating over empty dir should not create any files,\n    // or, at most the write.lock file\n    final int extraFileCount;\n    if (files.length == 1) {\n      assertEquals(\"write.lock\", files[0]);\n      extraFileCount = 1;\n    } else {\n      assertEquals(0, files.length);\n      extraFileCount = 0;\n    }\n\n    Document doc = new Document();\n    // create as many files as possible\n    doc.add(newField(\"c\", \"val\", Store.YES, Index.ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n    // Adding just one document does not call flush yet.\n    assertEquals(\"only the stored and term vector files should exist in the directory\", 5 + extraFileCount, dir.listAll().length);\n\n    doc = new Document();\n    doc.add(newField(\"c\", \"val\", Store.YES, Index.ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n    // The second document should cause a flush.\n    assertTrue(\"flush should have occurred and files created\", dir.listAll().length > 5 + extraFileCount);\n\n    // After rollback, IW should remove all files\n    writer.rollback();\n    assertEquals(\"no files should exist in the directory after rollback\", 0, dir.listAll().length);\n\n    // Since we rolled-back above, that close should be a no-op\n    writer.close();\n    assertEquals(\"expected a no-op close after IW.rollback()\", 0, dir.listAll().length);\n    dir.close();\n  }\n\n","sourceOld":"  public void testEmptyDirRollback() throws Exception {\n    // Tests that if IW is created over an empty Directory, some documents are\n    // indexed, flushed (but not committed) and then IW rolls back, then no \n    // files are left in the Directory.\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(2));\n    // Creating over empty dir should not create any files.\n    assertEquals(0, dir.listAll().length);\n    Document doc = new Document();\n    // create as many files as possible\n    doc.add(new Field(\"c\", \"val\", Store.YES, Index.ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n    // Adding just one document does not call flush yet.\n    assertEquals(\"only the stored and term vector files should exist in the directory\", 5, dir.listAll().length);\n    \n    doc = new Document();\n    doc.add(new Field(\"c\", \"val\", Store.YES, Index.ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n    // The second document should cause a flush.\n    assertTrue(\"flush should have occurred and files created\", dir.listAll().length > 0);\n   \n    // After rollback, IW should remove all files\n    writer.rollback();\n    assertEquals(\"no files should exist in the directory after rollback\", 0, dir.listAll().length);\n\n    // Since we rolled-back above, that close should be a no-op\n    writer.close();\n    assertEquals(\"expected a no-op close after IW.rollback()\", 0, dir.listAll().length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c19f985e36a65cc969e8e564fe337a0d41512075","date":1296330536,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testEmptyDirRollback().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testEmptyDirRollback().mjava","sourceNew":"  public void testEmptyDirRollback() throws Exception {\n    // Tests that if IW is created over an empty Directory, some documents are\n    // indexed, flushed (but not committed) and then IW rolls back, then no \n    // files are left in the Directory.\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( \n        TEST_VERSION_CURRENT, new MockAnalyzer())\n                                         .setMaxBufferedDocs(2).setMergePolicy(newLogMergePolicy()));\n    String[] files = dir.listAll();\n\n    writer.setInfoStream(VERBOSE ? System.out : null);\n\n    // Creating over empty dir should not create any files,\n    // or, at most the write.lock file\n    final int extraFileCount;\n    if (files.length == 1) {\n      assertEquals(\"write.lock\", files[0]);\n      extraFileCount = 1;\n    } else {\n      assertEquals(0, files.length);\n      extraFileCount = 0;\n    }\n\n    Document doc = new Document();\n    // create as many files as possible\n    doc.add(newField(\"c\", \"val\", Store.YES, Index.ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n    // Adding just one document does not call flush yet.\n    assertEquals(\"only the stored and term vector files should exist in the directory\", 5 + extraFileCount, dir.listAll().length);\n    \n    doc = new Document();\n    doc.add(newField(\"c\", \"val\", Store.YES, Index.ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n\n    // The second document should cause a flush.\n    assertTrue(\"flush should have occurred and files should have been created\", dir.listAll().length > 5 + extraFileCount);\n\n    // After rollback, IW should remove all files\n    writer.rollback();\n    assertEquals(\"no files should exist in the directory after rollback\", 0, dir.listAll().length);\n\n    // Since we rolled-back above, that close should be a no-op\n    writer.close();\n    assertEquals(\"expected a no-op close after IW.rollback()\", 0, dir.listAll().length);\n    dir.close();\n  }\n\n","sourceOld":"  public void testEmptyDirRollback() throws Exception {\n    // Tests that if IW is created over an empty Directory, some documents are\n    // indexed, flushed (but not committed) and then IW rolls back, then no \n    // files are left in the Directory.\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( \n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(2));\n    String[] files = dir.listAll();\n\n    // Creating over empty dir should not create any files,\n    // or, at most the write.lock file\n    final int extraFileCount;\n    if (files.length == 1) {\n      assertEquals(\"write.lock\", files[0]);\n      extraFileCount = 1;\n    } else {\n      assertEquals(0, files.length);\n      extraFileCount = 0;\n    }\n\n    Document doc = new Document();\n    // create as many files as possible\n    doc.add(newField(\"c\", \"val\", Store.YES, Index.ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n    // Adding just one document does not call flush yet.\n    assertEquals(\"only the stored and term vector files should exist in the directory\", 5 + extraFileCount, dir.listAll().length);\n    \n    doc = new Document();\n    doc.add(newField(\"c\", \"val\", Store.YES, Index.ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n    // The second document should cause a flush.\n    assertTrue(\"flush should have occurred and files created\", dir.listAll().length > 5 + extraFileCount);\n   \n    // After rollback, IW should remove all files\n    writer.rollback();\n    assertEquals(\"no files should exist in the directory after rollback\", 0, dir.listAll().length);\n\n    // Since we rolled-back above, that close should be a no-op\n    writer.close();\n    assertEquals(\"expected a no-op close after IW.rollback()\", 0, dir.listAll().length);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testEmptyDirRollback().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testEmptyDirRollback().mjava","sourceNew":"  public void testEmptyDirRollback() throws Exception {\n    // Tests that if IW is created over an empty Directory, some documents are\n    // indexed, flushed (but not committed) and then IW rolls back, then no \n    // files are left in the Directory.\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( \n        TEST_VERSION_CURRENT, new MockAnalyzer())\n                                         .setMaxBufferedDocs(2).setMergePolicy(newLogMergePolicy()));\n    String[] files = dir.listAll();\n\n    writer.setInfoStream(VERBOSE ? System.out : null);\n\n    // Creating over empty dir should not create any files,\n    // or, at most the write.lock file\n    final int extraFileCount;\n    if (files.length == 1) {\n      assertEquals(\"write.lock\", files[0]);\n      extraFileCount = 1;\n    } else {\n      assertEquals(0, files.length);\n      extraFileCount = 0;\n    }\n\n    Document doc = new Document();\n    // create as many files as possible\n    doc.add(newField(\"c\", \"val\", Store.YES, Index.ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n    // Adding just one document does not call flush yet.\n    assertEquals(\"only the stored and term vector files should exist in the directory\", 5 + extraFileCount, dir.listAll().length);\n    \n    doc = new Document();\n    doc.add(newField(\"c\", \"val\", Store.YES, Index.ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n\n    // The second document should cause a flush.\n    assertTrue(\"flush should have occurred and files should have been created\", dir.listAll().length > 5 + extraFileCount);\n\n    // After rollback, IW should remove all files\n    writer.rollback();\n    assertEquals(\"no files should exist in the directory after rollback\", 0, dir.listAll().length);\n\n    // Since we rolled-back above, that close should be a no-op\n    writer.close();\n    assertEquals(\"expected a no-op close after IW.rollback()\", 0, dir.listAll().length);\n    dir.close();\n  }\n\n","sourceOld":"  public void testEmptyDirRollback() throws Exception {\n    // Tests that if IW is created over an empty Directory, some documents are\n    // indexed, flushed (but not committed) and then IW rolls back, then no \n    // files are left in the Directory.\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( \n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(2));\n    String[] files = dir.listAll();\n\n    // Creating over empty dir should not create any files,\n    // or, at most the write.lock file\n    final int extraFileCount;\n    if (files.length == 1) {\n      assertEquals(\"write.lock\", files[0]);\n      extraFileCount = 1;\n    } else {\n      assertEquals(0, files.length);\n      extraFileCount = 0;\n    }\n\n    Document doc = new Document();\n    // create as many files as possible\n    doc.add(newField(\"c\", \"val\", Store.YES, Index.ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n    // Adding just one document does not call flush yet.\n    assertEquals(\"only the stored and term vector files should exist in the directory\", 5 + extraFileCount, dir.listAll().length);\n    \n    doc = new Document();\n    doc.add(newField(\"c\", \"val\", Store.YES, Index.ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n    // The second document should cause a flush.\n    assertTrue(\"flush should have occurred and files created\", dir.listAll().length > 5 + extraFileCount);\n   \n    // After rollback, IW should remove all files\n    writer.rollback();\n    assertEquals(\"no files should exist in the directory after rollback\", 0, dir.listAll().length);\n\n    // Since we rolled-back above, that close should be a no-op\n    writer.close();\n    assertEquals(\"expected a no-op close after IW.rollback()\", 0, dir.listAll().length);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testEmptyDirRollback().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testEmptyDirRollback().mjava","sourceNew":"  public void testEmptyDirRollback() throws Exception {\n    // Tests that if IW is created over an empty Directory, some documents are\n    // indexed, flushed (but not committed) and then IW rolls back, then no\n    // files are left in the Directory.\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n                                         .setMaxBufferedDocs(2).setMergePolicy(newLogMergePolicy()));\n    String[] files = dir.listAll();\n\n    writer.setInfoStream(VERBOSE ? System.out : null);\n\n    // Creating over empty dir should not create any files,\n    // or, at most the write.lock file\n    final int extraFileCount;\n    if (files.length == 1) {\n      assertEquals(\"write.lock\", files[0]);\n      extraFileCount = 1;\n    } else {\n      assertEquals(0, files.length);\n      extraFileCount = 0;\n    }\n\n    Document doc = new Document();\n    // create as many files as possible\n    doc.add(newField(\"c\", \"val\", Store.YES, Index.ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n    // Adding just one document does not call flush yet.\n    assertEquals(\"only the stored and term vector files should exist in the directory\", 5 + extraFileCount, dir.listAll().length);\n\n    doc = new Document();\n    doc.add(newField(\"c\", \"val\", Store.YES, Index.ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n\n    // The second document should cause a flush.\n    assertTrue(\"flush should have occurred and files should have been created\", dir.listAll().length > 5 + extraFileCount);\n\n    // After rollback, IW should remove all files\n    writer.rollback();\n    assertEquals(\"no files should exist in the directory after rollback\", 0, dir.listAll().length);\n\n    // Since we rolled-back above, that close should be a no-op\n    writer.close();\n    assertEquals(\"expected a no-op close after IW.rollback()\", 0, dir.listAll().length);\n    dir.close();\n  }\n\n","sourceOld":"  public void testEmptyDirRollback() throws Exception {\n    // Tests that if IW is created over an empty Directory, some documents are\n    // indexed, flushed (but not committed) and then IW rolls back, then no\n    // files are left in the Directory.\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(2));\n    String[] files = dir.listAll();\n\n    // Creating over empty dir should not create any files,\n    // or, at most the write.lock file\n    final int extraFileCount;\n    if (files.length == 1) {\n      assertEquals(\"write.lock\", files[0]);\n      extraFileCount = 1;\n    } else {\n      assertEquals(0, files.length);\n      extraFileCount = 0;\n    }\n\n    Document doc = new Document();\n    // create as many files as possible\n    doc.add(newField(\"c\", \"val\", Store.YES, Index.ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n    // Adding just one document does not call flush yet.\n    assertEquals(\"only the stored and term vector files should exist in the directory\", 5 + extraFileCount, dir.listAll().length);\n\n    doc = new Document();\n    doc.add(newField(\"c\", \"val\", Store.YES, Index.ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n    // The second document should cause a flush.\n    assertTrue(\"flush should have occurred and files created\", dir.listAll().length > 5 + extraFileCount);\n\n    // After rollback, IW should remove all files\n    writer.rollback();\n    assertEquals(\"no files should exist in the directory after rollback\", 0, dir.listAll().length);\n\n    // Since we rolled-back above, that close should be a no-op\n    writer.close();\n    assertEquals(\"expected a no-op close after IW.rollback()\", 0, dir.listAll().length);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2c5f0cb44df114db4228c8f77861714b5cabaea","date":1302542431,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testEmptyDirRollback().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testEmptyDirRollback().mjava","sourceNew":"  public void testEmptyDirRollback() throws Exception {\n    // Tests that if IW is created over an empty Directory, some documents are\n    // indexed, flushed (but not committed) and then IW rolls back, then no \n    // files are left in the Directory.\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( \n        TEST_VERSION_CURRENT, new MockAnalyzer(random))\n                                         .setMaxBufferedDocs(2).setMergePolicy(newLogMergePolicy()));\n    String[] files = dir.listAll();\n\n    writer.setInfoStream(VERBOSE ? System.out : null);\n\n    // Creating over empty dir should not create any files,\n    // or, at most the write.lock file\n    final int extraFileCount;\n    if (files.length == 1) {\n      assertEquals(\"write.lock\", files[0]);\n      extraFileCount = 1;\n    } else {\n      assertEquals(0, files.length);\n      extraFileCount = 0;\n    }\n\n    Document doc = new Document();\n    // create as many files as possible\n    doc.add(newField(\"c\", \"val\", Store.YES, Index.ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n    // Adding just one document does not call flush yet.\n    assertEquals(\"only the stored and term vector files should exist in the directory\", 5 + extraFileCount, dir.listAll().length);\n    \n    doc = new Document();\n    doc.add(newField(\"c\", \"val\", Store.YES, Index.ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n\n    // The second document should cause a flush.\n    assertTrue(\"flush should have occurred and files should have been created\", dir.listAll().length > 5 + extraFileCount);\n\n    // After rollback, IW should remove all files\n    writer.rollback();\n    assertEquals(\"no files should exist in the directory after rollback\", 0, dir.listAll().length);\n\n    // Since we rolled-back above, that close should be a no-op\n    writer.close();\n    assertEquals(\"expected a no-op close after IW.rollback()\", 0, dir.listAll().length);\n    dir.close();\n  }\n\n","sourceOld":"  public void testEmptyDirRollback() throws Exception {\n    // Tests that if IW is created over an empty Directory, some documents are\n    // indexed, flushed (but not committed) and then IW rolls back, then no \n    // files are left in the Directory.\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( \n        TEST_VERSION_CURRENT, new MockAnalyzer())\n                                         .setMaxBufferedDocs(2).setMergePolicy(newLogMergePolicy()));\n    String[] files = dir.listAll();\n\n    writer.setInfoStream(VERBOSE ? System.out : null);\n\n    // Creating over empty dir should not create any files,\n    // or, at most the write.lock file\n    final int extraFileCount;\n    if (files.length == 1) {\n      assertEquals(\"write.lock\", files[0]);\n      extraFileCount = 1;\n    } else {\n      assertEquals(0, files.length);\n      extraFileCount = 0;\n    }\n\n    Document doc = new Document();\n    // create as many files as possible\n    doc.add(newField(\"c\", \"val\", Store.YES, Index.ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n    // Adding just one document does not call flush yet.\n    assertEquals(\"only the stored and term vector files should exist in the directory\", 5 + extraFileCount, dir.listAll().length);\n    \n    doc = new Document();\n    doc.add(newField(\"c\", \"val\", Store.YES, Index.ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n\n    // The second document should cause a flush.\n    assertTrue(\"flush should have occurred and files should have been created\", dir.listAll().length > 5 + extraFileCount);\n\n    // After rollback, IW should remove all files\n    writer.rollback();\n    assertEquals(\"no files should exist in the directory after rollback\", 0, dir.listAll().length);\n\n    // Since we rolled-back above, that close should be a no-op\n    writer.close();\n    assertEquals(\"expected a no-op close after IW.rollback()\", 0, dir.listAll().length);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testEmptyDirRollback().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testEmptyDirRollback().mjava","sourceNew":"  public void testEmptyDirRollback() throws Exception {\n    // Tests that if IW is created over an empty Directory, some documents are\n    // indexed, flushed (but not committed) and then IW rolls back, then no\n    // files are left in the Directory.\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random))\n                                         .setMaxBufferedDocs(2).setMergePolicy(newLogMergePolicy()));\n    String[] files = dir.listAll();\n\n    writer.setInfoStream(VERBOSE ? System.out : null);\n\n    // Creating over empty dir should not create any files,\n    // or, at most the write.lock file\n    final int extraFileCount;\n    if (files.length == 1) {\n      assertEquals(\"write.lock\", files[0]);\n      extraFileCount = 1;\n    } else {\n      assertEquals(0, files.length);\n      extraFileCount = 0;\n    }\n\n    Document doc = new Document();\n    // create as many files as possible\n    doc.add(newField(\"c\", \"val\", Store.YES, Index.ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n    // Adding just one document does not call flush yet.\n    assertEquals(\"only the stored and term vector files should exist in the directory\", 5 + extraFileCount, dir.listAll().length);\n\n    doc = new Document();\n    doc.add(newField(\"c\", \"val\", Store.YES, Index.ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n\n    // The second document should cause a flush.\n    assertTrue(\"flush should have occurred and files should have been created\", dir.listAll().length > 5 + extraFileCount);\n\n    // After rollback, IW should remove all files\n    writer.rollback();\n    assertEquals(\"no files should exist in the directory after rollback\", 0, dir.listAll().length);\n\n    // Since we rolled-back above, that close should be a no-op\n    writer.close();\n    assertEquals(\"expected a no-op close after IW.rollback()\", 0, dir.listAll().length);\n    dir.close();\n  }\n\n","sourceOld":"  public void testEmptyDirRollback() throws Exception {\n    // Tests that if IW is created over an empty Directory, some documents are\n    // indexed, flushed (but not committed) and then IW rolls back, then no\n    // files are left in the Directory.\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n                                         .setMaxBufferedDocs(2).setMergePolicy(newLogMergePolicy()));\n    String[] files = dir.listAll();\n\n    writer.setInfoStream(VERBOSE ? System.out : null);\n\n    // Creating over empty dir should not create any files,\n    // or, at most the write.lock file\n    final int extraFileCount;\n    if (files.length == 1) {\n      assertEquals(\"write.lock\", files[0]);\n      extraFileCount = 1;\n    } else {\n      assertEquals(0, files.length);\n      extraFileCount = 0;\n    }\n\n    Document doc = new Document();\n    // create as many files as possible\n    doc.add(newField(\"c\", \"val\", Store.YES, Index.ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n    // Adding just one document does not call flush yet.\n    assertEquals(\"only the stored and term vector files should exist in the directory\", 5 + extraFileCount, dir.listAll().length);\n\n    doc = new Document();\n    doc.add(newField(\"c\", \"val\", Store.YES, Index.ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n\n    // The second document should cause a flush.\n    assertTrue(\"flush should have occurred and files should have been created\", dir.listAll().length > 5 + extraFileCount);\n\n    // After rollback, IW should remove all files\n    writer.rollback();\n    assertEquals(\"no files should exist in the directory after rollback\", 0, dir.listAll().length);\n\n    // Since we rolled-back above, that close should be a no-op\n    writer.close();\n    assertEquals(\"expected a no-op close after IW.rollback()\", 0, dir.listAll().length);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b3e06be49006ecac364d39d12b9c9f74882f9b9f","date":1304289513,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testEmptyDirRollback().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testEmptyDirRollback().mjava","sourceNew":"  public void testEmptyDirRollback() throws Exception {\n    // Tests that if IW is created over an empty Directory, some documents are\n    // indexed, flushed (but not committed) and then IW rolls back, then no\n    // files are left in the Directory.\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random))\n                                         .setMaxBufferedDocs(2).setMergePolicy(newLogMergePolicy()));\n    String[] files = dir.listAll();\n\n    writer.setInfoStream(VERBOSE ? System.out : null);\n\n    // Creating over empty dir should not create any files,\n    // or, at most the write.lock file\n    final int extraFileCount;\n    if (files.length == 1) {\n      assertEquals(\"write.lock\", files[0]);\n      extraFileCount = 1;\n    } else {\n      assertEquals(0, files.length);\n      extraFileCount = 0;\n    }\n\n    Document doc = new Document();\n    // create as many files as possible\n    doc.add(newField(\"c\", \"val\", Store.YES, Index.ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n    // Adding just one document does not call flush yet.\n    assertEquals(\"only the stored and term vector files should exist in the directory\", 5 + extraFileCount, dir.listAll().length);\n\n    doc = new Document();\n    doc.add(newField(\"c\", \"val\", Store.YES, Index.ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n\n    // The second document should cause a flush.\n    assertTrue(\"flush should have occurred and files should have been created\", dir.listAll().length > 5 + extraFileCount);\n\n    // After rollback, IW should remove all files\n    writer.rollback();\n    assertEquals(\"no files should exist in the directory after rollback\", 0, dir.listAll().length);\n\n    // Since we rolled-back above, that close should be a no-op\n    writer.close();\n    assertEquals(\"expected a no-op close after IW.rollback()\", 0, dir.listAll().length);\n    dir.close();\n  }\n\n","sourceOld":"  public void testEmptyDirRollback() throws Exception {\n    // Tests that if IW is created over an empty Directory, some documents are\n    // indexed, flushed (but not committed) and then IW rolls back, then no \n    // files are left in the Directory.\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( \n        TEST_VERSION_CURRENT, new MockAnalyzer(random))\n                                         .setMaxBufferedDocs(2).setMergePolicy(newLogMergePolicy()));\n    String[] files = dir.listAll();\n\n    writer.setInfoStream(VERBOSE ? System.out : null);\n\n    // Creating over empty dir should not create any files,\n    // or, at most the write.lock file\n    final int extraFileCount;\n    if (files.length == 1) {\n      assertEquals(\"write.lock\", files[0]);\n      extraFileCount = 1;\n    } else {\n      assertEquals(0, files.length);\n      extraFileCount = 0;\n    }\n\n    Document doc = new Document();\n    // create as many files as possible\n    doc.add(newField(\"c\", \"val\", Store.YES, Index.ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n    // Adding just one document does not call flush yet.\n    assertEquals(\"only the stored and term vector files should exist in the directory\", 5 + extraFileCount, dir.listAll().length);\n    \n    doc = new Document();\n    doc.add(newField(\"c\", \"val\", Store.YES, Index.ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n\n    // The second document should cause a flush.\n    assertTrue(\"flush should have occurred and files should have been created\", dir.listAll().length > 5 + extraFileCount);\n\n    // After rollback, IW should remove all files\n    writer.rollback();\n    assertEquals(\"no files should exist in the directory after rollback\", 0, dir.listAll().length);\n\n    // Since we rolled-back above, that close should be a no-op\n    writer.close();\n    assertEquals(\"expected a no-op close after IW.rollback()\", 0, dir.listAll().length);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testEmptyDirRollback().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testEmptyDirRollback().mjava","sourceNew":"  public void testEmptyDirRollback() throws Exception {\n    // Tests that if IW is created over an empty Directory, some documents are\n    // indexed, flushed (but not committed) and then IW rolls back, then no\n    // files are left in the Directory.\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random))\n                                         .setMaxBufferedDocs(2).setMergePolicy(newLogMergePolicy()));\n    String[] files = dir.listAll();\n\n    writer.setInfoStream(VERBOSE ? System.out : null);\n\n    // Creating over empty dir should not create any files,\n    // or, at most the write.lock file\n    final int extraFileCount;\n    if (files.length == 1) {\n      assertEquals(\"write.lock\", files[0]);\n      extraFileCount = 1;\n    } else {\n      assertEquals(0, files.length);\n      extraFileCount = 0;\n    }\n\n    Document doc = new Document();\n    // create as many files as possible\n    doc.add(newField(\"c\", \"val\", Store.YES, Index.ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n    // Adding just one document does not call flush yet.\n    assertEquals(\"only the stored and term vector files should exist in the directory\", 5 + extraFileCount, dir.listAll().length);\n\n    doc = new Document();\n    doc.add(newField(\"c\", \"val\", Store.YES, Index.ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n\n    // The second document should cause a flush.\n    assertTrue(\"flush should have occurred and files should have been created\", dir.listAll().length > 5 + extraFileCount);\n\n    // After rollback, IW should remove all files\n    writer.rollback();\n    assertEquals(\"no files should exist in the directory after rollback\", 0, dir.listAll().length);\n\n    // Since we rolled-back above, that close should be a no-op\n    writer.close();\n    assertEquals(\"expected a no-op close after IW.rollback()\", 0, dir.listAll().length);\n    dir.close();\n  }\n\n","sourceOld":"  public void testEmptyDirRollback() throws Exception {\n    // Tests that if IW is created over an empty Directory, some documents are\n    // indexed, flushed (but not committed) and then IW rolls back, then no \n    // files are left in the Directory.\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( \n        TEST_VERSION_CURRENT, new MockAnalyzer())\n                                         .setMaxBufferedDocs(2).setMergePolicy(newLogMergePolicy()));\n    String[] files = dir.listAll();\n\n    writer.setInfoStream(VERBOSE ? System.out : null);\n\n    // Creating over empty dir should not create any files,\n    // or, at most the write.lock file\n    final int extraFileCount;\n    if (files.length == 1) {\n      assertEquals(\"write.lock\", files[0]);\n      extraFileCount = 1;\n    } else {\n      assertEquals(0, files.length);\n      extraFileCount = 0;\n    }\n\n    Document doc = new Document();\n    // create as many files as possible\n    doc.add(newField(\"c\", \"val\", Store.YES, Index.ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n    // Adding just one document does not call flush yet.\n    assertEquals(\"only the stored and term vector files should exist in the directory\", 5 + extraFileCount, dir.listAll().length);\n    \n    doc = new Document();\n    doc.add(newField(\"c\", \"val\", Store.YES, Index.ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n\n    // The second document should cause a flush.\n    assertTrue(\"flush should have occurred and files should have been created\", dir.listAll().length > 5 + extraFileCount);\n\n    // After rollback, IW should remove all files\n    writer.rollback();\n    assertEquals(\"no files should exist in the directory after rollback\", 0, dir.listAll().length);\n\n    // Since we rolled-back above, that close should be a no-op\n    writer.close();\n    assertEquals(\"expected a no-op close after IW.rollback()\", 0, dir.listAll().length);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testEmptyDirRollback().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testEmptyDirRollback().mjava","sourceNew":"  public void testEmptyDirRollback() throws Exception {\n    // Tests that if IW is created over an empty Directory, some documents are\n    // indexed, flushed (but not committed) and then IW rolls back, then no\n    // files are left in the Directory.\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random))\n                                         .setMaxBufferedDocs(2).setMergePolicy(newLogMergePolicy()));\n    String[] files = dir.listAll();\n\n    writer.setInfoStream(VERBOSE ? System.out : null);\n\n    // Creating over empty dir should not create any files,\n    // or, at most the write.lock file\n    final int extraFileCount;\n    if (files.length == 1) {\n      assertEquals(\"write.lock\", files[0]);\n      extraFileCount = 1;\n    } else {\n      assertEquals(0, files.length);\n      extraFileCount = 0;\n    }\n\n    Document doc = new Document();\n    // create as many files as possible\n    doc.add(newField(\"c\", \"val\", Store.YES, Index.ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n    // Adding just one document does not call flush yet.\n    assertEquals(\"only the stored and term vector files should exist in the directory\", 5 + extraFileCount, dir.listAll().length);\n\n    doc = new Document();\n    doc.add(newField(\"c\", \"val\", Store.YES, Index.ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n\n    // The second document should cause a flush.\n    assertTrue(\"flush should have occurred and files should have been created\", dir.listAll().length > 5 + extraFileCount);\n\n    // After rollback, IW should remove all files\n    writer.rollback();\n    assertEquals(\"no files should exist in the directory after rollback\", 0, dir.listAll().length);\n\n    // Since we rolled-back above, that close should be a no-op\n    writer.close();\n    assertEquals(\"expected a no-op close after IW.rollback()\", 0, dir.listAll().length);\n    dir.close();\n  }\n\n","sourceOld":"  public void testEmptyDirRollback() throws Exception {\n    // Tests that if IW is created over an empty Directory, some documents are\n    // indexed, flushed (but not committed) and then IW rolls back, then no \n    // files are left in the Directory.\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( \n        TEST_VERSION_CURRENT, new MockAnalyzer())\n                                         .setMaxBufferedDocs(2).setMergePolicy(newLogMergePolicy()));\n    String[] files = dir.listAll();\n\n    writer.setInfoStream(VERBOSE ? System.out : null);\n\n    // Creating over empty dir should not create any files,\n    // or, at most the write.lock file\n    final int extraFileCount;\n    if (files.length == 1) {\n      assertEquals(\"write.lock\", files[0]);\n      extraFileCount = 1;\n    } else {\n      assertEquals(0, files.length);\n      extraFileCount = 0;\n    }\n\n    Document doc = new Document();\n    // create as many files as possible\n    doc.add(newField(\"c\", \"val\", Store.YES, Index.ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n    // Adding just one document does not call flush yet.\n    assertEquals(\"only the stored and term vector files should exist in the directory\", 5 + extraFileCount, dir.listAll().length);\n    \n    doc = new Document();\n    doc.add(newField(\"c\", \"val\", Store.YES, Index.ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n\n    // The second document should cause a flush.\n    assertTrue(\"flush should have occurred and files should have been created\", dir.listAll().length > 5 + extraFileCount);\n\n    // After rollback, IW should remove all files\n    writer.rollback();\n    assertEquals(\"no files should exist in the directory after rollback\", 0, dir.listAll().length);\n\n    // Since we rolled-back above, that close should be a no-op\n    writer.close();\n    assertEquals(\"expected a no-op close after IW.rollback()\", 0, dir.listAll().length);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"efb7a19703a037c29e30440260d393500febc1f4","date":1306648116,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testEmptyDirRollback().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testEmptyDirRollback().mjava","sourceNew":"  public void testEmptyDirRollback() throws Exception {\n    // Tests that if IW is created over an empty Directory, some documents are\n    // indexed, flushed (but not committed) and then IW rolls back, then no\n    // files are left in the Directory.\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random))\n                                         .setMaxBufferedDocs(2).setMergePolicy(newLogMergePolicy()));\n    String[] files = dir.listAll();\n\n    writer.setInfoStream(VERBOSE ? System.out : null);\n\n    // Creating over empty dir should not create any files,\n    // or, at most the write.lock file\n    final int extraFileCount;\n    if (files.length == 1) {\n      assertTrue(files[0].endsWith(\"write.lock\"));\n      extraFileCount = 1;\n    } else {\n      assertEquals(0, files.length);\n      extraFileCount = 0;\n    }\n\n    Document doc = new Document();\n    // create as many files as possible\n    doc.add(newField(\"c\", \"val\", Store.YES, Index.ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n    // Adding just one document does not call flush yet.\n    assertEquals(\"only the stored and term vector files should exist in the directory\", 5 + extraFileCount, dir.listAll().length);\n\n    doc = new Document();\n    doc.add(newField(\"c\", \"val\", Store.YES, Index.ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n\n    // The second document should cause a flush.\n    assertTrue(\"flush should have occurred and files should have been created\", dir.listAll().length > 5 + extraFileCount);\n\n    // After rollback, IW should remove all files\n    writer.rollback();\n    assertEquals(\"no files should exist in the directory after rollback\", 0, dir.listAll().length);\n\n    // Since we rolled-back above, that close should be a no-op\n    writer.close();\n    assertEquals(\"expected a no-op close after IW.rollback()\", 0, dir.listAll().length);\n    dir.close();\n  }\n\n","sourceOld":"  public void testEmptyDirRollback() throws Exception {\n    // Tests that if IW is created over an empty Directory, some documents are\n    // indexed, flushed (but not committed) and then IW rolls back, then no\n    // files are left in the Directory.\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random))\n                                         .setMaxBufferedDocs(2).setMergePolicy(newLogMergePolicy()));\n    String[] files = dir.listAll();\n\n    writer.setInfoStream(VERBOSE ? System.out : null);\n\n    // Creating over empty dir should not create any files,\n    // or, at most the write.lock file\n    final int extraFileCount;\n    if (files.length == 1) {\n      assertEquals(\"write.lock\", files[0]);\n      extraFileCount = 1;\n    } else {\n      assertEquals(0, files.length);\n      extraFileCount = 0;\n    }\n\n    Document doc = new Document();\n    // create as many files as possible\n    doc.add(newField(\"c\", \"val\", Store.YES, Index.ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n    // Adding just one document does not call flush yet.\n    assertEquals(\"only the stored and term vector files should exist in the directory\", 5 + extraFileCount, dir.listAll().length);\n\n    doc = new Document();\n    doc.add(newField(\"c\", \"val\", Store.YES, Index.ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n\n    // The second document should cause a flush.\n    assertTrue(\"flush should have occurred and files should have been created\", dir.listAll().length > 5 + extraFileCount);\n\n    // After rollback, IW should remove all files\n    writer.rollback();\n    assertEquals(\"no files should exist in the directory after rollback\", 0, dir.listAll().length);\n\n    // Since we rolled-back above, that close should be a no-op\n    writer.close();\n    assertEquals(\"expected a no-op close after IW.rollback()\", 0, dir.listAll().length);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testEmptyDirRollback().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testEmptyDirRollback().mjava","sourceNew":"  public void testEmptyDirRollback() throws Exception {\n    // Tests that if IW is created over an empty Directory, some documents are\n    // indexed, flushed (but not committed) and then IW rolls back, then no\n    // files are left in the Directory.\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random))\n                                         .setMaxBufferedDocs(2).setMergePolicy(newLogMergePolicy()));\n    String[] files = dir.listAll();\n\n    writer.setInfoStream(VERBOSE ? System.out : null);\n\n    // Creating over empty dir should not create any files,\n    // or, at most the write.lock file\n    final int extraFileCount;\n    if (files.length == 1) {\n      assertTrue(files[0].endsWith(\"write.lock\"));\n      extraFileCount = 1;\n    } else {\n      assertEquals(0, files.length);\n      extraFileCount = 0;\n    }\n\n    Document doc = new Document();\n    // create as many files as possible\n    doc.add(newField(\"c\", \"val\", Store.YES, Index.ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n    // Adding just one document does not call flush yet.\n    assertEquals(\"only the stored and term vector files should exist in the directory\", 5 + extraFileCount, dir.listAll().length);\n\n    doc = new Document();\n    doc.add(newField(\"c\", \"val\", Store.YES, Index.ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n\n    // The second document should cause a flush.\n    assertTrue(\"flush should have occurred and files should have been created\", dir.listAll().length > 5 + extraFileCount);\n\n    // After rollback, IW should remove all files\n    writer.rollback();\n    assertEquals(\"no files should exist in the directory after rollback\", 0, dir.listAll().length);\n\n    // Since we rolled-back above, that close should be a no-op\n    writer.close();\n    assertEquals(\"expected a no-op close after IW.rollback()\", 0, dir.listAll().length);\n    dir.close();\n  }\n\n","sourceOld":"  public void testEmptyDirRollback() throws Exception {\n    // Tests that if IW is created over an empty Directory, some documents are\n    // indexed, flushed (but not committed) and then IW rolls back, then no\n    // files are left in the Directory.\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random))\n                                         .setMaxBufferedDocs(2).setMergePolicy(newLogMergePolicy()));\n    String[] files = dir.listAll();\n\n    writer.setInfoStream(VERBOSE ? System.out : null);\n\n    // Creating over empty dir should not create any files,\n    // or, at most the write.lock file\n    final int extraFileCount;\n    if (files.length == 1) {\n      assertEquals(\"write.lock\", files[0]);\n      extraFileCount = 1;\n    } else {\n      assertEquals(0, files.length);\n      extraFileCount = 0;\n    }\n\n    Document doc = new Document();\n    // create as many files as possible\n    doc.add(newField(\"c\", \"val\", Store.YES, Index.ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n    // Adding just one document does not call flush yet.\n    assertEquals(\"only the stored and term vector files should exist in the directory\", 5 + extraFileCount, dir.listAll().length);\n\n    doc = new Document();\n    doc.add(newField(\"c\", \"val\", Store.YES, Index.ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n\n    // The second document should cause a flush.\n    assertTrue(\"flush should have occurred and files should have been created\", dir.listAll().length > 5 + extraFileCount);\n\n    // After rollback, IW should remove all files\n    writer.rollback();\n    assertEquals(\"no files should exist in the directory after rollback\", 0, dir.listAll().length);\n\n    // Since we rolled-back above, that close should be a no-op\n    writer.close();\n    assertEquals(\"expected a no-op close after IW.rollback()\", 0, dir.listAll().length);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e10cb22a8bdb44339e282925a29182bb2f3174d","date":1306841137,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testEmptyDirRollback().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testEmptyDirRollback().mjava","sourceNew":"  public void testEmptyDirRollback() throws Exception {\n    // Tests that if IW is created over an empty Directory, some documents are\n    // indexed, flushed (but not committed) and then IW rolls back, then no\n    // files are left in the Directory.\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random))\n                                         .setMaxBufferedDocs(2).setMergePolicy(newLogMergePolicy()));\n    String[] files = dir.listAll();\n\n    writer.setInfoStream(VERBOSE ? System.out : null);\n\n    // Creating over empty dir should not create any files,\n    // or, at most the write.lock file\n    final int extraFileCount;\n    if (files.length == 1) {\n      assertTrue(files[0].endsWith(\"write.lock\"));\n      extraFileCount = 1;\n    } else {\n      assertEquals(0, files.length);\n      extraFileCount = 0;\n    }\n\n    Document doc = new Document();\n    // create as many files as possible\n    doc.add(newField(\"c\", \"val\", Store.YES, Index.ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n    // Adding just one document does not call flush yet.\n    assertEquals(\"only the stored and term vector files should exist in the directory\", 5 + extraFileCount, dir.listAll().length);\n\n    doc = new Document();\n    doc.add(newField(\"c\", \"val\", Store.YES, Index.ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n\n    // The second document should cause a flush.\n    assertTrue(\"flush should have occurred and files should have been created\", dir.listAll().length > 5 + extraFileCount);\n\n    // After rollback, IW should remove all files\n    writer.rollback();\n    assertEquals(\"no files should exist in the directory after rollback\", 0, dir.listAll().length);\n\n    // Since we rolled-back above, that close should be a no-op\n    writer.close();\n    assertEquals(\"expected a no-op close after IW.rollback()\", 0, dir.listAll().length);\n    dir.close();\n  }\n\n","sourceOld":"  public void testEmptyDirRollback() throws Exception {\n    // Tests that if IW is created over an empty Directory, some documents are\n    // indexed, flushed (but not committed) and then IW rolls back, then no\n    // files are left in the Directory.\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random))\n                                         .setMaxBufferedDocs(2).setMergePolicy(newLogMergePolicy()));\n    String[] files = dir.listAll();\n\n    writer.setInfoStream(VERBOSE ? System.out : null);\n\n    // Creating over empty dir should not create any files,\n    // or, at most the write.lock file\n    final int extraFileCount;\n    if (files.length == 1) {\n      assertEquals(\"write.lock\", files[0]);\n      extraFileCount = 1;\n    } else {\n      assertEquals(0, files.length);\n      extraFileCount = 0;\n    }\n\n    Document doc = new Document();\n    // create as many files as possible\n    doc.add(newField(\"c\", \"val\", Store.YES, Index.ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n    // Adding just one document does not call flush yet.\n    assertEquals(\"only the stored and term vector files should exist in the directory\", 5 + extraFileCount, dir.listAll().length);\n\n    doc = new Document();\n    doc.add(newField(\"c\", \"val\", Store.YES, Index.ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n\n    // The second document should cause a flush.\n    assertTrue(\"flush should have occurred and files should have been created\", dir.listAll().length > 5 + extraFileCount);\n\n    // After rollback, IW should remove all files\n    writer.rollback();\n    assertEquals(\"no files should exist in the directory after rollback\", 0, dir.listAll().length);\n\n    // Since we rolled-back above, that close should be a no-op\n    writer.close();\n    assertEquals(\"expected a no-op close after IW.rollback()\", 0, dir.listAll().length);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testEmptyDirRollback().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testEmptyDirRollback().mjava","sourceNew":"  public void testEmptyDirRollback() throws Exception {\n    // Tests that if IW is created over an empty Directory, some documents are\n    // indexed, flushed (but not committed) and then IW rolls back, then no\n    // files are left in the Directory.\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random))\n                                         .setMaxBufferedDocs(2).setMergePolicy(newLogMergePolicy()));\n    String[] files = dir.listAll();\n\n    writer.setInfoStream(VERBOSE ? System.out : null);\n\n    // Creating over empty dir should not create any files,\n    // or, at most the write.lock file\n    final int extraFileCount;\n    if (files.length == 1) {\n      assertTrue(files[0].endsWith(\"write.lock\"));\n      extraFileCount = 1;\n    } else {\n      assertEquals(0, files.length);\n      extraFileCount = 0;\n    }\n\n    Document doc = new Document();\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setStoreTermVectors(true);\n    customType.setStoreTermVectorPositions(true);\n    customType.setStoreTermVectorOffsets(true);\n    // create as many files as possible\n    doc.add(newField(\"c\", \"val\", customType));\n    writer.addDocument(doc);\n    // Adding just one document does not call flush yet.\n    assertEquals(\"only the stored and term vector files should exist in the directory\", 5 + extraFileCount, dir.listAll().length);\n\n    doc = new Document();\n    doc.add(newField(\"c\", \"val\", customType));\n    writer.addDocument(doc);\n\n    // The second document should cause a flush.\n    assertTrue(\"flush should have occurred and files should have been created\", dir.listAll().length > 5 + extraFileCount);\n\n    // After rollback, IW should remove all files\n    writer.rollback();\n    assertEquals(\"no files should exist in the directory after rollback\", 0, dir.listAll().length);\n\n    // Since we rolled-back above, that close should be a no-op\n    writer.close();\n    assertEquals(\"expected a no-op close after IW.rollback()\", 0, dir.listAll().length);\n    dir.close();\n  }\n\n","sourceOld":"  public void testEmptyDirRollback() throws Exception {\n    // Tests that if IW is created over an empty Directory, some documents are\n    // indexed, flushed (but not committed) and then IW rolls back, then no\n    // files are left in the Directory.\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random))\n                                         .setMaxBufferedDocs(2).setMergePolicy(newLogMergePolicy()));\n    String[] files = dir.listAll();\n\n    writer.setInfoStream(VERBOSE ? System.out : null);\n\n    // Creating over empty dir should not create any files,\n    // or, at most the write.lock file\n    final int extraFileCount;\n    if (files.length == 1) {\n      assertTrue(files[0].endsWith(\"write.lock\"));\n      extraFileCount = 1;\n    } else {\n      assertEquals(0, files.length);\n      extraFileCount = 0;\n    }\n\n    Document doc = new Document();\n    // create as many files as possible\n    doc.add(newField(\"c\", \"val\", Store.YES, Index.ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n    // Adding just one document does not call flush yet.\n    assertEquals(\"only the stored and term vector files should exist in the directory\", 5 + extraFileCount, dir.listAll().length);\n\n    doc = new Document();\n    doc.add(newField(\"c\", \"val\", Store.YES, Index.ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n\n    // The second document should cause a flush.\n    assertTrue(\"flush should have occurred and files should have been created\", dir.listAll().length > 5 + extraFileCount);\n\n    // After rollback, IW should remove all files\n    writer.rollback();\n    assertEquals(\"no files should exist in the directory after rollback\", 0, dir.listAll().length);\n\n    // Since we rolled-back above, that close should be a no-op\n    writer.close();\n    assertEquals(\"expected a no-op close after IW.rollback()\", 0, dir.listAll().length);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06584e6e98d592b34e1329b384182f368d2025e8","date":1320850353,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testEmptyDirRollback().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testEmptyDirRollback().mjava","sourceNew":"  public void testEmptyDirRollback() throws Exception {\n    // TODO: generalize this test\n    assumeFalse(\"test makes assumptions about file counts\", Codec.getDefault() instanceof SimpleTextCodec);\n    // Tests that if IW is created over an empty Directory, some documents are\n    // indexed, flushed (but not committed) and then IW rolls back, then no\n    // files are left in the Directory.\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random))\n                                         .setMaxBufferedDocs(2).setMergePolicy(newLogMergePolicy()));\n    String[] files = dir.listAll();\n\n    // Creating over empty dir should not create any files,\n    // or, at most the write.lock file\n    final int extraFileCount;\n    if (files.length == 1) {\n      assertTrue(files[0].endsWith(\"write.lock\"));\n      extraFileCount = 1;\n    } else {\n      assertEquals(0, files.length);\n      extraFileCount = 0;\n    }\n\n    Document doc = new Document();\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setStoreTermVectors(true);\n    customType.setStoreTermVectorPositions(true);\n    customType.setStoreTermVectorOffsets(true);\n    // create as many files as possible\n    doc.add(newField(\"c\", \"val\", customType));\n    writer.addDocument(doc);\n    // Adding just one document does not call flush yet.\n    assertEquals(\"only the stored and term vector files should exist in the directory\", 5 + extraFileCount, dir.listAll().length);\n\n    doc = new Document();\n    doc.add(newField(\"c\", \"val\", customType));\n    writer.addDocument(doc);\n\n    // The second document should cause a flush.\n    assertTrue(\"flush should have occurred and files should have been created\", dir.listAll().length > 5 + extraFileCount);\n\n    // After rollback, IW should remove all files\n    writer.rollback();\n    assertEquals(\"no files should exist in the directory after rollback\", 0, dir.listAll().length);\n\n    // Since we rolled-back above, that close should be a no-op\n    writer.close();\n    assertEquals(\"expected a no-op close after IW.rollback()\", 0, dir.listAll().length);\n    dir.close();\n  }\n\n","sourceOld":"  public void testEmptyDirRollback() throws Exception {\n    // Tests that if IW is created over an empty Directory, some documents are\n    // indexed, flushed (but not committed) and then IW rolls back, then no\n    // files are left in the Directory.\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random))\n                                         .setMaxBufferedDocs(2).setMergePolicy(newLogMergePolicy()));\n    String[] files = dir.listAll();\n\n    writer.setInfoStream(VERBOSE ? System.out : null);\n\n    // Creating over empty dir should not create any files,\n    // or, at most the write.lock file\n    final int extraFileCount;\n    if (files.length == 1) {\n      assertTrue(files[0].endsWith(\"write.lock\"));\n      extraFileCount = 1;\n    } else {\n      assertEquals(0, files.length);\n      extraFileCount = 0;\n    }\n\n    Document doc = new Document();\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setStoreTermVectors(true);\n    customType.setStoreTermVectorPositions(true);\n    customType.setStoreTermVectorOffsets(true);\n    // create as many files as possible\n    doc.add(newField(\"c\", \"val\", customType));\n    writer.addDocument(doc);\n    // Adding just one document does not call flush yet.\n    assertEquals(\"only the stored and term vector files should exist in the directory\", 5 + extraFileCount, dir.listAll().length);\n\n    doc = new Document();\n    doc.add(newField(\"c\", \"val\", customType));\n    writer.addDocument(doc);\n\n    // The second document should cause a flush.\n    assertTrue(\"flush should have occurred and files should have been created\", dir.listAll().length > 5 + extraFileCount);\n\n    // After rollback, IW should remove all files\n    writer.rollback();\n    assertEquals(\"no files should exist in the directory after rollback\", 0, dir.listAll().length);\n\n    // Since we rolled-back above, that close should be a no-op\n    writer.close();\n    assertEquals(\"expected a no-op close after IW.rollback()\", 0, dir.listAll().length);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testEmptyDirRollback().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testEmptyDirRollback().mjava","sourceNew":"  public void testEmptyDirRollback() throws Exception {\n    // TODO: generalize this test\n    assumeFalse(\"test makes assumptions about file counts\", Codec.getDefault() instanceof SimpleTextCodec);\n    // Tests that if IW is created over an empty Directory, some documents are\n    // indexed, flushed (but not committed) and then IW rolls back, then no\n    // files are left in the Directory.\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random))\n                                         .setMaxBufferedDocs(2).setMergePolicy(newLogMergePolicy()));\n    String[] files = dir.listAll();\n\n    // Creating over empty dir should not create any files,\n    // or, at most the write.lock file\n    final int extraFileCount;\n    if (files.length == 1) {\n      assertTrue(files[0].endsWith(\"write.lock\"));\n      extraFileCount = 1;\n    } else {\n      assertEquals(0, files.length);\n      extraFileCount = 0;\n    }\n\n    Document doc = new Document();\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setStoreTermVectors(true);\n    customType.setStoreTermVectorPositions(true);\n    customType.setStoreTermVectorOffsets(true);\n    // create as many files as possible\n    doc.add(newField(\"c\", \"val\", customType));\n    writer.addDocument(doc);\n    // Adding just one document does not call flush yet.\n    assertEquals(\"only the stored and term vector files should exist in the directory\", 5 + extraFileCount, dir.listAll().length);\n\n    doc = new Document();\n    doc.add(newField(\"c\", \"val\", customType));\n    writer.addDocument(doc);\n\n    // The second document should cause a flush.\n    assertTrue(\"flush should have occurred and files should have been created\", dir.listAll().length > 5 + extraFileCount);\n\n    // After rollback, IW should remove all files\n    writer.rollback();\n    assertEquals(\"no files should exist in the directory after rollback\", 0, dir.listAll().length);\n\n    // Since we rolled-back above, that close should be a no-op\n    writer.close();\n    assertEquals(\"expected a no-op close after IW.rollback()\", 0, dir.listAll().length);\n    dir.close();\n  }\n\n","sourceOld":"  public void testEmptyDirRollback() throws Exception {\n    // TODO: generalize this test\n    assumeFalse(\"test makes assumptions about file counts\", Codec.getDefault() instanceof SimpleTextCodec);\n    // Tests that if IW is created over an empty Directory, some documents are\n    // indexed, flushed (but not committed) and then IW rolls back, then no\n    // files are left in the Directory.\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random))\n                                         .setMaxBufferedDocs(2).setMergePolicy(newLogMergePolicy()));\n    String[] files = dir.listAll();\n\n    // Creating over empty dir should not create any files,\n    // or, at most the write.lock file\n    final int extraFileCount;\n    if (files.length == 1) {\n      assertTrue(files[0].endsWith(\"write.lock\"));\n      extraFileCount = 1;\n    } else {\n      assertEquals(0, files.length);\n      extraFileCount = 0;\n    }\n\n    Document doc = new Document();\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setStoreTermVectors(true);\n    customType.setStoreTermVectorPositions(true);\n    customType.setStoreTermVectorOffsets(true);\n    // create as many files as possible\n    doc.add(newField(\"c\", \"val\", customType));\n    writer.addDocument(doc);\n    // Adding just one document does not call flush yet.\n    assertEquals(\"only the stored and term vector files should exist in the directory\", 5 + extraFileCount, dir.listAll().length);\n\n    doc = new Document();\n    doc.add(newField(\"c\", \"val\", customType));\n    writer.addDocument(doc);\n\n    // The second document should cause a flush.\n    assertTrue(\"flush should have occurred and files should have been created\", dir.listAll().length > 5 + extraFileCount);\n\n    // After rollback, IW should remove all files\n    writer.rollback();\n    assertEquals(\"no files should exist in the directory after rollback\", 0, dir.listAll().length);\n\n    // Since we rolled-back above, that close should be a no-op\n    writer.close();\n    assertEquals(\"expected a no-op close after IW.rollback()\", 0, dir.listAll().length);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["06584e6e98d592b34e1329b384182f368d2025e8"],"efb7a19703a037c29e30440260d393500febc1f4":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"132903c28af3aa6f67284b78de91c0f0a99488c2":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["5ef87af8c7bd0f8429622b83aa74202383f2e757","132903c28af3aa6f67284b78de91c0f0a99488c2"],"c19f985e36a65cc969e8e564fe337a0d41512075":["132903c28af3aa6f67284b78de91c0f0a99488c2"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["c19f985e36a65cc969e8e564fe337a0d41512075"],"69a923a22517eb7ff0bad9c6d1a7d45cc0696bd4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a3776dccca01c11e7046323cfad46a3b4a471233","efb7a19703a037c29e30440260d393500febc1f4"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["caada1d700c39415a1749fafa2d2b4088fecd90b"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["132903c28af3aa6f67284b78de91c0f0a99488c2","c19f985e36a65cc969e8e564fe337a0d41512075"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"caada1d700c39415a1749fafa2d2b4088fecd90b":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"5ef87af8c7bd0f8429622b83aa74202383f2e757":["d572389229127c297dd1fa5ce4758e1cec41e799"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["efb7a19703a037c29e30440260d393500febc1f4"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["d572389229127c297dd1fa5ce4758e1cec41e799"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","c19f985e36a65cc969e8e564fe337a0d41512075"],"2e10cb22a8bdb44339e282925a29182bb2f3174d":["135621f3a0670a9394eb563224a3b76cc4dddc0f","efb7a19703a037c29e30440260d393500febc1f4"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["b21422ff1d1d56499dec481f193b402e5e8def5b"],"06584e6e98d592b34e1329b384182f368d2025e8":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["29ef99d61cda9641b6250bf9567329a6e65f901d","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"d572389229127c297dd1fa5ce4758e1cec41e799":["69a923a22517eb7ff0bad9c6d1a7d45cc0696bd4"],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["f2c5f0cb44df114db4228c8f77861714b5cabaea","962d04139994fce5193143ef35615499a9a96d78"],"962d04139994fce5193143ef35615499a9a96d78":["bde51b089eb7f86171eb3406e38a274743f9b7ac","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"a3776dccca01c11e7046323cfad46a3b4a471233":["c19f985e36a65cc969e8e564fe337a0d41512075","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"efb7a19703a037c29e30440260d393500febc1f4":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","1509f151d7692d84fae414b2b799ac06ba60fcb4","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"132903c28af3aa6f67284b78de91c0f0a99488c2":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","c19f985e36a65cc969e8e564fe337a0d41512075","29ef99d61cda9641b6250bf9567329a6e65f901d"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"c19f985e36a65cc969e8e564fe337a0d41512075":["f2c5f0cb44df114db4228c8f77861714b5cabaea","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","a3776dccca01c11e7046323cfad46a3b4a471233"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["b3e06be49006ecac364d39d12b9c9f74882f9b9f","962d04139994fce5193143ef35615499a9a96d78"],"69a923a22517eb7ff0bad9c6d1a7d45cc0696bd4":["d572389229127c297dd1fa5ce4758e1cec41e799"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":[],"1f653cfcf159baeaafe5d01682a911e95bba4012":["132903c28af3aa6f67284b78de91c0f0a99488c2"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["69a923a22517eb7ff0bad9c6d1a7d45cc0696bd4"],"caada1d700c39415a1749fafa2d2b4088fecd90b":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"5ef87af8c7bd0f8429622b83aa74202383f2e757":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["06584e6e98d592b34e1329b384182f368d2025e8"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["962d04139994fce5193143ef35615499a9a96d78"],"2e10cb22a8bdb44339e282925a29182bb2f3174d":[],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["caada1d700c39415a1749fafa2d2b4088fecd90b"],"06584e6e98d592b34e1329b384182f368d2025e8":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["2e10cb22a8bdb44339e282925a29182bb2f3174d"],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["efb7a19703a037c29e30440260d393500febc1f4","135621f3a0670a9394eb563224a3b76cc4dddc0f","a3776dccca01c11e7046323cfad46a3b4a471233"],"d572389229127c297dd1fa5ce4758e1cec41e799":["5ef87af8c7bd0f8429622b83aa74202383f2e757","b21422ff1d1d56499dec481f193b402e5e8def5b"],"962d04139994fce5193143ef35615499a9a96d78":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"a3776dccca01c11e7046323cfad46a3b4a471233":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","2e10cb22a8bdb44339e282925a29182bb2f3174d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}