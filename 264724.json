{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/ComplexEvaluator#ComplexEvaluator(StreamExpression,StreamFactory,List[String]).mjava","commits":[{"id":"e2ca4206e5497c29b07a997ea7fc47d3bac0a352","date":1497801058,"type":0,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/ComplexEvaluator#ComplexEvaluator(StreamExpression,StreamFactory,List[String]).mjava","pathOld":"/dev/null","sourceNew":"  public ComplexEvaluator(StreamExpression expression, StreamFactory factory, List<String> ignoredNamedParameters) throws IOException{\n    constructingFactory = factory;\n    \n    // We have to do this because order of the parameters matter\n    List<StreamExpressionParameter> parameters = factory.getOperandsOfType(expression, StreamExpressionParameter.class);\n    \n    for(StreamExpressionParameter parameter : parameters){\n      if(parameter instanceof StreamExpression){\n        // possible evaluator\n        StreamExpression streamExpression = (StreamExpression)parameter;\n        if(factory.doesRepresentTypes(streamExpression, ComplexEvaluator.class)){\n          subEvaluators.add(factory.constructEvaluator(streamExpression));\n        }\n        else if(factory.doesRepresentTypes(streamExpression, SimpleEvaluator.class)){\n          subEvaluators.add(factory.constructEvaluator(streamExpression));\n        }\n        else{\n          // Will be treated as a field name\n          subEvaluators.add(new FieldEvaluator(streamExpression.toString()));\n        }\n      }\n      else if(parameter instanceof StreamExpressionValue){\n        if(0 != ((StreamExpressionValue)parameter).getValue().length()){\n          // special case - if evaluates to a number, boolean, or null then we'll treat it \n          // as a RawValueEvaluator\n          Object value = factory.constructPrimitiveObject(((StreamExpressionValue)parameter).getValue());\n          if(null == value || value instanceof Boolean || value instanceof Number){\n            subEvaluators.add(new RawValueEvaluator(value));\n          }\n          else if(value instanceof String){\n            subEvaluators.add(new FieldEvaluator((String)value));\n          }\n        }\n      }\n    }\n    \n    Set<String> namedParameters = factory.getNamedOperands(expression).stream().map(param -> param.getName()).collect(Collectors.toSet());\n    long ignorableCount = ignoredNamedParameters.stream().filter(name -> namedParameters.contains(name)).count();\n    \n    if(0 != expression.getParameters().size() - subEvaluators.size() - ignorableCount){\n      if(namedParameters.isEmpty()){\n        throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - unknown operands found - expecting only StreamEvaluators or field names\", expression));\n      }\n      else{\n        throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - unknown operands found - expecting only StreamEvaluators, field names, or named parameters [%s]\", expression, namedParameters.stream().collect(Collectors.joining(\",\"))));\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/ComplexEvaluator#ComplexEvaluator(StreamExpression,StreamFactory,List[String]).mjava","pathOld":"/dev/null","sourceNew":"  public ComplexEvaluator(StreamExpression expression, StreamFactory factory, List<String> ignoredNamedParameters) throws IOException{\n    constructingFactory = factory;\n    \n    // We have to do this because order of the parameters matter\n    List<StreamExpressionParameter> parameters = factory.getOperandsOfType(expression, StreamExpressionParameter.class);\n    \n    for(StreamExpressionParameter parameter : parameters){\n      if(parameter instanceof StreamExpression){\n        // possible evaluator\n        StreamExpression streamExpression = (StreamExpression)parameter;\n        if(factory.doesRepresentTypes(streamExpression, ComplexEvaluator.class)){\n          subEvaluators.add(factory.constructEvaluator(streamExpression));\n        }\n        else if(factory.doesRepresentTypes(streamExpression, SimpleEvaluator.class)){\n          subEvaluators.add(factory.constructEvaluator(streamExpression));\n        }\n        else{\n          // Will be treated as a field name\n          subEvaluators.add(new FieldEvaluator(streamExpression.toString()));\n        }\n      }\n      else if(parameter instanceof StreamExpressionValue){\n        if(0 != ((StreamExpressionValue)parameter).getValue().length()){\n          // special case - if evaluates to a number, boolean, or null then we'll treat it \n          // as a RawValueEvaluator\n          Object value = factory.constructPrimitiveObject(((StreamExpressionValue)parameter).getValue());\n          if(null == value || value instanceof Boolean || value instanceof Number){\n            subEvaluators.add(new RawValueEvaluator(value));\n          }\n          else if(value instanceof String){\n            subEvaluators.add(new FieldEvaluator((String)value));\n          }\n        }\n      }\n    }\n    \n    Set<String> namedParameters = factory.getNamedOperands(expression).stream().map(param -> param.getName()).collect(Collectors.toSet());\n    long ignorableCount = ignoredNamedParameters.stream().filter(name -> namedParameters.contains(name)).count();\n    \n    if(0 != expression.getParameters().size() - subEvaluators.size() - ignorableCount){\n      if(namedParameters.isEmpty()){\n        throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - unknown operands found - expecting only StreamEvaluators or field names\", expression));\n      }\n      else{\n        throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - unknown operands found - expecting only StreamEvaluators, field names, or named parameters [%s]\", expression, namedParameters.stream().collect(Collectors.joining(\",\"))));\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/ComplexEvaluator#ComplexEvaluator(StreamExpression,StreamFactory,List[String]).mjava","pathOld":"/dev/null","sourceNew":"  public ComplexEvaluator(StreamExpression expression, StreamFactory factory, List<String> ignoredNamedParameters) throws IOException{\n    constructingFactory = factory;\n    \n    // We have to do this because order of the parameters matter\n    List<StreamExpressionParameter> parameters = factory.getOperandsOfType(expression, StreamExpressionParameter.class);\n    \n    for(StreamExpressionParameter parameter : parameters){\n      if(parameter instanceof StreamExpression){\n        // possible evaluator\n        StreamExpression streamExpression = (StreamExpression)parameter;\n        if(factory.doesRepresentTypes(streamExpression, ComplexEvaluator.class)){\n          subEvaluators.add(factory.constructEvaluator(streamExpression));\n        }\n        else if(factory.doesRepresentTypes(streamExpression, SimpleEvaluator.class)){\n          subEvaluators.add(factory.constructEvaluator(streamExpression));\n        }\n        else{\n          // Will be treated as a field name\n          subEvaluators.add(new FieldEvaluator(streamExpression.toString()));\n        }\n      }\n      else if(parameter instanceof StreamExpressionValue){\n        if(0 != ((StreamExpressionValue)parameter).getValue().length()){\n          // special case - if evaluates to a number, boolean, or null then we'll treat it \n          // as a RawValueEvaluator\n          Object value = factory.constructPrimitiveObject(((StreamExpressionValue)parameter).getValue());\n          if(null == value || value instanceof Boolean || value instanceof Number){\n            subEvaluators.add(new RawValueEvaluator(value));\n          }\n          else if(value instanceof String){\n            subEvaluators.add(new FieldEvaluator((String)value));\n          }\n        }\n      }\n    }\n    \n    Set<String> namedParameters = factory.getNamedOperands(expression).stream().map(param -> param.getName()).collect(Collectors.toSet());\n    long ignorableCount = ignoredNamedParameters.stream().filter(name -> namedParameters.contains(name)).count();\n    \n    if(0 != expression.getParameters().size() - subEvaluators.size() - ignorableCount){\n      if(namedParameters.isEmpty()){\n        throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - unknown operands found - expecting only StreamEvaluators or field names\", expression));\n      }\n      else{\n        throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - unknown operands found - expecting only StreamEvaluators, field names, or named parameters [%s]\", expression, namedParameters.stream().collect(Collectors.joining(\",\"))));\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba1e7de64990e3928b90142a52fb92eeff556475","date":1503713257,"type":5,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/RecursiveEvaluator#RecursiveEvaluator(StreamExpression,StreamFactory,List[String]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/ComplexEvaluator#ComplexEvaluator(StreamExpression,StreamFactory,List[String]).mjava","sourceNew":"  public RecursiveEvaluator(StreamExpression expression, StreamFactory factory, List<String> ignoredNamedParameters) throws IOException{\n    this.constructingFactory = factory;\n    \n    // We have to do this because order of the parameters matter\n    List<StreamExpressionParameter> parameters = factory.getOperandsOfType(expression, StreamExpressionParameter.class);\n    \n    for(StreamExpressionParameter parameter : parameters){\n      if(parameter instanceof StreamExpression){\n        // possible evaluator\n        StreamExpression streamExpression = (StreamExpression)parameter;\n        if(factory.doesRepresentTypes(streamExpression, RecursiveEvaluator.class)){\n          containedEvaluators.add(factory.constructEvaluator(streamExpression));\n        }\n        else if(factory.doesRepresentTypes(streamExpression, SourceEvaluator.class)){\n          containedEvaluators.add(factory.constructEvaluator(streamExpression));\n        }\n        else{\n          // Will be treated as a field name\n          containedEvaluators.add(new FieldValueEvaluator(streamExpression.toString()));\n        }\n      }\n      else if(parameter instanceof StreamExpressionValue){\n        if(0 != ((StreamExpressionValue)parameter).getValue().length()){\n          // special case - if evaluates to a number, boolean, or null then we'll treat it \n          // as a RawValueEvaluator\n          Object value = factory.constructPrimitiveObject(((StreamExpressionValue)parameter).getValue());\n          if(null == value || value instanceof Boolean || value instanceof Number){\n            containedEvaluators.add(new RawValueEvaluator(value));\n          }\n          else if(value instanceof String){\n            containedEvaluators.add(new FieldValueEvaluator((String)value));\n          }\n        }\n      }\n    }\n    \n    Set<String> namedParameters = factory.getNamedOperands(expression).stream().map(param -> param.getName()).collect(Collectors.toSet());\n    long ignorableCount = ignoredNamedParameters.stream().filter(name -> namedParameters.contains(name)).count();\n    \n    if(0 != expression.getParameters().size() - containedEvaluators.size() - ignorableCount){\n      if(namedParameters.isEmpty()){\n        throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - unknown operands found - expecting only StreamEvaluators or field names\", expression));\n      }\n      else{\n        throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - unknown operands found - expecting only StreamEvaluators, field names, or named parameters [%s]\", expression, namedParameters.stream().collect(Collectors.joining(\",\"))));\n      }\n    }\n  }\n\n","sourceOld":"  public ComplexEvaluator(StreamExpression expression, StreamFactory factory, List<String> ignoredNamedParameters) throws IOException{\n    constructingFactory = factory;\n    \n    // We have to do this because order of the parameters matter\n    List<StreamExpressionParameter> parameters = factory.getOperandsOfType(expression, StreamExpressionParameter.class);\n    \n    for(StreamExpressionParameter parameter : parameters){\n      if(parameter instanceof StreamExpression){\n        // possible evaluator\n        StreamExpression streamExpression = (StreamExpression)parameter;\n        if(factory.doesRepresentTypes(streamExpression, ComplexEvaluator.class)){\n          subEvaluators.add(factory.constructEvaluator(streamExpression));\n        }\n        else if(factory.doesRepresentTypes(streamExpression, SimpleEvaluator.class)){\n          subEvaluators.add(factory.constructEvaluator(streamExpression));\n        }\n        else{\n          // Will be treated as a field name\n          subEvaluators.add(new FieldEvaluator(streamExpression.toString()));\n        }\n      }\n      else if(parameter instanceof StreamExpressionValue){\n        if(0 != ((StreamExpressionValue)parameter).getValue().length()){\n          // special case - if evaluates to a number, boolean, or null then we'll treat it \n          // as a RawValueEvaluator\n          Object value = factory.constructPrimitiveObject(((StreamExpressionValue)parameter).getValue());\n          if(null == value || value instanceof Boolean || value instanceof Number){\n            subEvaluators.add(new RawValueEvaluator(value));\n          }\n          else if(value instanceof String){\n            subEvaluators.add(new FieldEvaluator((String)value));\n          }\n        }\n      }\n    }\n    \n    Set<String> namedParameters = factory.getNamedOperands(expression).stream().map(param -> param.getName()).collect(Collectors.toSet());\n    long ignorableCount = ignoredNamedParameters.stream().filter(name -> namedParameters.contains(name)).count();\n    \n    if(0 != expression.getParameters().size() - subEvaluators.size() - ignorableCount){\n      if(namedParameters.isEmpty()){\n        throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - unknown operands found - expecting only StreamEvaluators or field names\", expression));\n      }\n      else{\n        throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - unknown operands found - expecting only StreamEvaluators, field names, or named parameters [%s]\", expression, namedParameters.stream().collect(Collectors.joining(\",\"))));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"45c28dbb559366e1f4ef8077346552bfb3f7ecf6","date":1503738439,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/RecursiveEvaluator#RecursiveEvaluator(StreamExpression,StreamFactory,List[String]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/ComplexEvaluator#ComplexEvaluator(StreamExpression,StreamFactory,List[String]).mjava","sourceNew":"  public RecursiveEvaluator(StreamExpression expression, StreamFactory factory, List<String> ignoredNamedParameters) throws IOException{\n    this.constructingFactory = factory;\n    \n    // We have to do this because order of the parameters matter\n    List<StreamExpressionParameter> parameters = factory.getOperandsOfType(expression, StreamExpressionParameter.class);\n    \n    for(StreamExpressionParameter parameter : parameters){\n      if(parameter instanceof StreamExpression){\n        // possible evaluator\n        StreamExpression streamExpression = (StreamExpression)parameter;\n        if(factory.doesRepresentTypes(streamExpression, RecursiveEvaluator.class)){\n          containedEvaluators.add(factory.constructEvaluator(streamExpression));\n        }\n        else if(factory.doesRepresentTypes(streamExpression, SourceEvaluator.class)){\n          containedEvaluators.add(factory.constructEvaluator(streamExpression));\n        }\n        else{\n          // Will be treated as a field name\n          containedEvaluators.add(new FieldValueEvaluator(streamExpression.toString()));\n        }\n      }\n      else if(parameter instanceof StreamExpressionValue){\n        if(0 != ((StreamExpressionValue)parameter).getValue().length()){\n          // special case - if evaluates to a number, boolean, or null then we'll treat it \n          // as a RawValueEvaluator\n          Object value = factory.constructPrimitiveObject(((StreamExpressionValue)parameter).getValue());\n          if(null == value || value instanceof Boolean || value instanceof Number){\n            containedEvaluators.add(new RawValueEvaluator(value));\n          }\n          else if(value instanceof String){\n            containedEvaluators.add(new FieldValueEvaluator((String)value));\n          }\n        }\n      }\n    }\n    \n    Set<String> namedParameters = factory.getNamedOperands(expression).stream().map(param -> param.getName()).collect(Collectors.toSet());\n    long ignorableCount = ignoredNamedParameters.stream().filter(name -> namedParameters.contains(name)).count();\n    \n    if(0 != expression.getParameters().size() - containedEvaluators.size() - ignorableCount){\n      if(namedParameters.isEmpty()){\n        throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - unknown operands found - expecting only StreamEvaluators or field names\", expression));\n      }\n      else{\n        throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - unknown operands found - expecting only StreamEvaluators, field names, or named parameters [%s]\", expression, namedParameters.stream().collect(Collectors.joining(\",\"))));\n      }\n    }\n  }\n\n","sourceOld":"  public ComplexEvaluator(StreamExpression expression, StreamFactory factory, List<String> ignoredNamedParameters) throws IOException{\n    constructingFactory = factory;\n    \n    // We have to do this because order of the parameters matter\n    List<StreamExpressionParameter> parameters = factory.getOperandsOfType(expression, StreamExpressionParameter.class);\n    \n    for(StreamExpressionParameter parameter : parameters){\n      if(parameter instanceof StreamExpression){\n        // possible evaluator\n        StreamExpression streamExpression = (StreamExpression)parameter;\n        if(factory.doesRepresentTypes(streamExpression, ComplexEvaluator.class)){\n          subEvaluators.add(factory.constructEvaluator(streamExpression));\n        }\n        else if(factory.doesRepresentTypes(streamExpression, SimpleEvaluator.class)){\n          subEvaluators.add(factory.constructEvaluator(streamExpression));\n        }\n        else{\n          // Will be treated as a field name\n          subEvaluators.add(new FieldEvaluator(streamExpression.toString()));\n        }\n      }\n      else if(parameter instanceof StreamExpressionValue){\n        if(0 != ((StreamExpressionValue)parameter).getValue().length()){\n          // special case - if evaluates to a number, boolean, or null then we'll treat it \n          // as a RawValueEvaluator\n          Object value = factory.constructPrimitiveObject(((StreamExpressionValue)parameter).getValue());\n          if(null == value || value instanceof Boolean || value instanceof Number){\n            subEvaluators.add(new RawValueEvaluator(value));\n          }\n          else if(value instanceof String){\n            subEvaluators.add(new FieldEvaluator((String)value));\n          }\n        }\n      }\n    }\n    \n    Set<String> namedParameters = factory.getNamedOperands(expression).stream().map(param -> param.getName()).collect(Collectors.toSet());\n    long ignorableCount = ignoredNamedParameters.stream().filter(name -> namedParameters.contains(name)).count();\n    \n    if(0 != expression.getParameters().size() - subEvaluators.size() - ignorableCount){\n      if(namedParameters.isEmpty()){\n        throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - unknown operands found - expecting only StreamEvaluators or field names\", expression));\n      }\n      else{\n        throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - unknown operands found - expecting only StreamEvaluators, field names, or named parameters [%s]\", expression, namedParameters.stream().collect(Collectors.joining(\",\"))));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a7809d1d753b67f48b1a706e17034bf8b624ea3","date":1504366927,"type":5,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/RecursiveEvaluator#RecursiveEvaluator(StreamExpression,StreamFactory,List[String]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/ComplexEvaluator#ComplexEvaluator(StreamExpression,StreamFactory,List[String]).mjava","sourceNew":"  public RecursiveEvaluator(StreamExpression expression, StreamFactory factory, List<String> ignoredNamedParameters) throws IOException{\n    this.constructingFactory = factory;\n    \n    // We have to do this because order of the parameters matter\n    List<StreamExpressionParameter> parameters = factory.getOperandsOfType(expression, StreamExpressionParameter.class);\n    \n    for(StreamExpressionParameter parameter : parameters){\n      if(parameter instanceof StreamExpression){\n        // possible evaluator\n        StreamExpression streamExpression = (StreamExpression)parameter;\n        if(factory.doesRepresentTypes(streamExpression, RecursiveEvaluator.class)){\n          containedEvaluators.add(factory.constructEvaluator(streamExpression));\n        }\n        else if(factory.doesRepresentTypes(streamExpression, SourceEvaluator.class)){\n          containedEvaluators.add(factory.constructEvaluator(streamExpression));\n        }\n        else{\n          // Will be treated as a field name\n          containedEvaluators.add(new FieldValueEvaluator(streamExpression.toString()));\n        }\n      }\n      else if(parameter instanceof StreamExpressionValue){\n        if(0 != ((StreamExpressionValue)parameter).getValue().length()){\n          // special case - if evaluates to a number, boolean, or null then we'll treat it \n          // as a RawValueEvaluator\n          Object value = factory.constructPrimitiveObject(((StreamExpressionValue)parameter).getValue());\n          if(null == value || value instanceof Boolean || value instanceof Number){\n            containedEvaluators.add(new RawValueEvaluator(value));\n          }\n          else if(value instanceof String){\n            containedEvaluators.add(new FieldValueEvaluator((String)value));\n          }\n        }\n      }\n    }\n    \n    Set<String> namedParameters = factory.getNamedOperands(expression).stream().map(param -> param.getName()).collect(Collectors.toSet());\n    long ignorableCount = ignoredNamedParameters.stream().filter(name -> namedParameters.contains(name)).count();\n    \n    if(0 != expression.getParameters().size() - containedEvaluators.size() - ignorableCount){\n      if(namedParameters.isEmpty()){\n        throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - unknown operands found - expecting only StreamEvaluators or field names\", expression));\n      }\n      else{\n        throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - unknown operands found - expecting only StreamEvaluators, field names, or named parameters [%s]\", expression, namedParameters.stream().collect(Collectors.joining(\",\"))));\n      }\n    }\n  }\n\n","sourceOld":"  public ComplexEvaluator(StreamExpression expression, StreamFactory factory, List<String> ignoredNamedParameters) throws IOException{\n    constructingFactory = factory;\n    \n    // We have to do this because order of the parameters matter\n    List<StreamExpressionParameter> parameters = factory.getOperandsOfType(expression, StreamExpressionParameter.class);\n    \n    for(StreamExpressionParameter parameter : parameters){\n      if(parameter instanceof StreamExpression){\n        // possible evaluator\n        StreamExpression streamExpression = (StreamExpression)parameter;\n        if(factory.doesRepresentTypes(streamExpression, ComplexEvaluator.class)){\n          subEvaluators.add(factory.constructEvaluator(streamExpression));\n        }\n        else if(factory.doesRepresentTypes(streamExpression, SimpleEvaluator.class)){\n          subEvaluators.add(factory.constructEvaluator(streamExpression));\n        }\n        else{\n          // Will be treated as a field name\n          subEvaluators.add(new FieldEvaluator(streamExpression.toString()));\n        }\n      }\n      else if(parameter instanceof StreamExpressionValue){\n        if(0 != ((StreamExpressionValue)parameter).getValue().length()){\n          // special case - if evaluates to a number, boolean, or null then we'll treat it \n          // as a RawValueEvaluator\n          Object value = factory.constructPrimitiveObject(((StreamExpressionValue)parameter).getValue());\n          if(null == value || value instanceof Boolean || value instanceof Number){\n            subEvaluators.add(new RawValueEvaluator(value));\n          }\n          else if(value instanceof String){\n            subEvaluators.add(new FieldEvaluator((String)value));\n          }\n        }\n      }\n    }\n    \n    Set<String> namedParameters = factory.getNamedOperands(expression).stream().map(param -> param.getName()).collect(Collectors.toSet());\n    long ignorableCount = ignoredNamedParameters.stream().filter(name -> namedParameters.contains(name)).count();\n    \n    if(0 != expression.getParameters().size() - subEvaluators.size() - ignorableCount){\n      if(namedParameters.isEmpty()){\n        throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - unknown operands found - expecting only StreamEvaluators or field names\", expression));\n      }\n      else{\n        throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - unknown operands found - expecting only StreamEvaluators, field names, or named parameters [%s]\", expression, namedParameters.stream().collect(Collectors.joining(\",\"))));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a7809d1d753b67f48b1a706e17034bf8b624ea3":["2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","45c28dbb559366e1f4ef8077346552bfb3f7ecf6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"45c28dbb559366e1f4ef8077346552bfb3f7ecf6":["28288370235ed02234a64753cdbf0c6ec096304a","ba1e7de64990e3928b90142a52fb92eeff556475"],"ba1e7de64990e3928b90142a52fb92eeff556475":["28288370235ed02234a64753cdbf0c6ec096304a"],"28288370235ed02234a64753cdbf0c6ec096304a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e2ca4206e5497c29b07a997ea7fc47d3bac0a352"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e2ca4206e5497c29b07a997ea7fc47d3bac0a352"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["45c28dbb559366e1f4ef8077346552bfb3f7ecf6"],"e2ca4206e5497c29b07a997ea7fc47d3bac0a352":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"3a7809d1d753b67f48b1a706e17034bf8b624ea3":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","e2ca4206e5497c29b07a997ea7fc47d3bac0a352"],"45c28dbb559366e1f4ef8077346552bfb3f7ecf6":["3a7809d1d753b67f48b1a706e17034bf8b624ea3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ba1e7de64990e3928b90142a52fb92eeff556475":["45c28dbb559366e1f4ef8077346552bfb3f7ecf6"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["3a7809d1d753b67f48b1a706e17034bf8b624ea3"],"28288370235ed02234a64753cdbf0c6ec096304a":["45c28dbb559366e1f4ef8077346552bfb3f7ecf6","ba1e7de64990e3928b90142a52fb92eeff556475"],"e2ca4206e5497c29b07a997ea7fc47d3bac0a352":["28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3a7809d1d753b67f48b1a706e17034bf8b624ea3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}