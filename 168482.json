{"path":"solr/src/java/org/apache/solr/update/processor/SignatureUpdateProcessorFactory.SignatureUpdateProcessor#processAdd(AddUpdateCommand).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/update/processor/SignatureUpdateProcessorFactory.SignatureUpdateProcessor#processAdd(AddUpdateCommand).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public void processAdd(AddUpdateCommand cmd) throws IOException {\n      if (enabled) {\n        SolrInputDocument doc = cmd.getSolrInputDocument();\n        if (sigFields == null || sigFields.size() == 0) {\n          Collection<String> docFields = doc.getFieldNames();\n          sigFields = new ArrayList<String>(docFields.size());\n          sigFields.addAll(docFields);\n          Collections.sort(sigFields);\n        }\n\n        Signature sig = (Signature) req.getCore().getResourceLoader().newInstance(signatureClass); \n        sig.init(params);\n\n        for (String field : sigFields) {\n          SolrInputField f = doc.getField(field);\n          if (f != null) {\n            sig.add(field);\n            Object o = f.getValue();\n            if (o instanceof String) {\n              sig.add((String)o);\n            } else if (o instanceof Collection) {\n              for (Object oo : (Collection)o) {\n                if (oo instanceof String) {\n                  sig.add((String)oo);\n                }\n              }\n            }\n          }\n        }\n\n        byte[] signature = sig.getSignature();\n        char[] arr = new char[signature.length<<1];\n        for (int i=0; i<signature.length; i++) {\n          int b = signature[i];\n          int idx = i<<1;\n          arr[idx]= StrUtils.HEX_DIGITS[(b >> 4) & 0xf];\n          arr[idx+1]= StrUtils.HEX_DIGITS[b & 0xf];\n        }\n        String sigString = new String(arr);\n        doc.addField(signatureField, sigString);\n\n        if (overwriteDupes) {\n          cmd.updateTerm = signatureTerm.createTerm(sigString);\n        }\n\n      }\n\n      if (next != null)\n        next.processAdd(cmd);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/update/processor/SignatureUpdateProcessorFactory.SignatureUpdateProcessor#processAdd(AddUpdateCommand).mjava","sourceNew":null,"sourceOld":"    @Override\n    public void processAdd(AddUpdateCommand cmd) throws IOException {\n      if (enabled) {\n        SolrInputDocument doc = cmd.getSolrInputDocument();\n        if (sigFields == null || sigFields.size() == 0) {\n          Collection<String> docFields = doc.getFieldNames();\n          sigFields = new ArrayList<String>(docFields.size());\n          sigFields.addAll(docFields);\n          Collections.sort(sigFields);\n        }\n\n        Signature sig = (Signature) req.getCore().getResourceLoader().newInstance(signatureClass); \n        sig.init(params);\n\n        for (String field : sigFields) {\n          SolrInputField f = doc.getField(field);\n          if (f != null) {\n            sig.add(field);\n            Object o = f.getValue();\n            if (o instanceof String) {\n              sig.add((String)o);\n            } else if (o instanceof Collection) {\n              for (Object oo : (Collection)o) {\n                if (oo instanceof String) {\n                  sig.add((String)oo);\n                }\n              }\n            }\n          }\n        }\n\n        byte[] signature = sig.getSignature();\n        char[] arr = new char[signature.length<<1];\n        for (int i=0; i<signature.length; i++) {\n          int b = signature[i];\n          int idx = i<<1;\n          arr[idx]= StrUtils.HEX_DIGITS[(b >> 4) & 0xf];\n          arr[idx+1]= StrUtils.HEX_DIGITS[b & 0xf];\n        }\n        String sigString = new String(arr);\n        doc.addField(signatureField, sigString);\n\n        if (overwriteDupes) {\n          cmd.updateTerm = signatureTerm.createTerm(sigString);\n        }\n\n      }\n\n      if (next != null)\n        next.processAdd(cmd);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/update/processor/SignatureUpdateProcessorFactory.SignatureUpdateProcessor#processAdd(AddUpdateCommand).mjava","pathOld":"src/java/org/apache/solr/update/processor/SignatureUpdateProcessorFactory.SignatureUpdateProcessor#processAdd(AddUpdateCommand).mjava","sourceNew":"    @Override\n    public void processAdd(AddUpdateCommand cmd) throws IOException {\n      if (enabled) {\n        SolrInputDocument doc = cmd.getSolrInputDocument();\n        if (sigFields == null || sigFields.size() == 0) {\n          Collection<String> docFields = doc.getFieldNames();\n          sigFields = new ArrayList<String>(docFields.size());\n          sigFields.addAll(docFields);\n          Collections.sort(sigFields);\n        }\n\n        Signature sig = (Signature) req.getCore().getResourceLoader().newInstance(signatureClass); \n        sig.init(params);\n\n        for (String field : sigFields) {\n          SolrInputField f = doc.getField(field);\n          if (f != null) {\n            sig.add(field);\n            Object o = f.getValue();\n            if (o instanceof String) {\n              sig.add((String)o);\n            } else if (o instanceof Collection) {\n              for (Object oo : (Collection)o) {\n                if (oo instanceof String) {\n                  sig.add((String)oo);\n                }\n              }\n            }\n          }\n        }\n\n        byte[] signature = sig.getSignature();\n        char[] arr = new char[signature.length<<1];\n        for (int i=0; i<signature.length; i++) {\n          int b = signature[i];\n          int idx = i<<1;\n          arr[idx]= StrUtils.HEX_DIGITS[(b >> 4) & 0xf];\n          arr[idx+1]= StrUtils.HEX_DIGITS[b & 0xf];\n        }\n        String sigString = new String(arr);\n        doc.addField(signatureField, sigString);\n\n        if (overwriteDupes) {\n          cmd.updateTerm = signatureTerm.createTerm(sigString);\n        }\n\n      }\n\n      if (next != null)\n        next.processAdd(cmd);\n    }\n\n","sourceOld":"    @Override\n    public void processAdd(AddUpdateCommand cmd) throws IOException {\n      if (enabled) {\n        SolrInputDocument doc = cmd.getSolrInputDocument();\n        if (sigFields == null || sigFields.size() == 0) {\n          Collection<String> docFields = doc.getFieldNames();\n          sigFields = new ArrayList<String>(docFields.size());\n          sigFields.addAll(docFields);\n          Collections.sort(sigFields);\n        }\n\n        Signature sig = (Signature) req.getCore().getResourceLoader().newInstance(signatureClass); \n        sig.init(params);\n\n        for (String field : sigFields) {\n          SolrInputField f = doc.getField(field);\n          if (f != null) {\n            sig.add(field);\n            Object o = f.getValue();\n            if (o instanceof String) {\n              sig.add((String)o);\n            } else if (o instanceof Collection) {\n              for (Object oo : (Collection)o) {\n                if (oo instanceof String) {\n                  sig.add((String)oo);\n                }\n              }\n            }\n          }\n        }\n\n        byte[] signature = sig.getSignature();\n        char[] arr = new char[signature.length<<1];\n        for (int i=0; i<signature.length; i++) {\n          int b = signature[i];\n          int idx = i<<1;\n          arr[idx]= StrUtils.HEX_DIGITS[(b >> 4) & 0xf];\n          arr[idx+1]= StrUtils.HEX_DIGITS[b & 0xf];\n        }\n        String sigString = new String(arr);\n        doc.addField(signatureField, sigString);\n\n        if (overwriteDupes) {\n          cmd.updateTerm = signatureTerm.createTerm(sigString);\n        }\n\n      }\n\n      if (next != null)\n        next.processAdd(cmd);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/update/processor/SignatureUpdateProcessorFactory.SignatureUpdateProcessor#processAdd(AddUpdateCommand).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public void processAdd(AddUpdateCommand cmd) throws IOException {\n      if (enabled) {\n        SolrInputDocument doc = cmd.getSolrInputDocument();\n        if (sigFields == null || sigFields.size() == 0) {\n          Collection<String> docFields = doc.getFieldNames();\n          sigFields = new ArrayList<String>(docFields.size());\n          sigFields.addAll(docFields);\n          Collections.sort(sigFields);\n        }\n\n        Signature sig = (Signature) req.getCore().getResourceLoader().newInstance(signatureClass); \n        sig.init(params);\n\n        for (String field : sigFields) {\n          SolrInputField f = doc.getField(field);\n          if (f != null) {\n            sig.add(field);\n            Object o = f.getValue();\n            if (o instanceof String) {\n              sig.add((String)o);\n            } else if (o instanceof Collection) {\n              for (Object oo : (Collection)o) {\n                if (oo instanceof String) {\n                  sig.add((String)oo);\n                }\n              }\n            }\n          }\n        }\n\n        byte[] signature = sig.getSignature();\n        char[] arr = new char[signature.length<<1];\n        for (int i=0; i<signature.length; i++) {\n          int b = signature[i];\n          int idx = i<<1;\n          arr[idx]= StrUtils.HEX_DIGITS[(b >> 4) & 0xf];\n          arr[idx+1]= StrUtils.HEX_DIGITS[b & 0xf];\n        }\n        String sigString = new String(arr);\n        doc.addField(signatureField, sigString);\n\n        if (overwriteDupes) {\n          cmd.updateTerm = signatureTerm.createTerm(sigString);\n        }\n\n      }\n\n      if (next != null)\n        next.processAdd(cmd);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fafef7c83fe8e0b3ca9298d5d75d6b943dc28153","date":1308670974,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/update/processor/SignatureUpdateProcessorFactory.SignatureUpdateProcessor#processAdd(AddUpdateCommand).mjava","pathOld":"solr/src/java/org/apache/solr/update/processor/SignatureUpdateProcessorFactory.SignatureUpdateProcessor#processAdd(AddUpdateCommand).mjava","sourceNew":"    @Override\n    public void processAdd(AddUpdateCommand cmd) throws IOException {\n      if (enabled) {\n        SolrInputDocument doc = cmd.getSolrInputDocument();\n        if (sigFields == null || sigFields.size() == 0) {\n          Collection<String> docFields = doc.getFieldNames();\n          sigFields = new ArrayList<String>(docFields.size());\n          sigFields.addAll(docFields);\n          Collections.sort(sigFields);\n        }\n\n        Signature sig = (Signature) req.getCore().getResourceLoader().newInstance(signatureClass); \n        sig.init(params);\n\n        for (String field : sigFields) {\n          SolrInputField f = doc.getField(field);\n          if (f != null) {\n            sig.add(field);\n            Object o = f.getValue();\n            if (o instanceof String) {\n              sig.add((String)o);\n            } else if (o instanceof Collection) {\n              for (Object oo : (Collection)o) {\n                if (oo instanceof String) {\n                  sig.add((String)oo);\n                }\n              }\n            }\n          }\n        }\n\n        byte[] signature = sig.getSignature();\n        char[] arr = new char[signature.length<<1];\n        for (int i=0; i<signature.length; i++) {\n          int b = signature[i];\n          int idx = i<<1;\n          arr[idx]= StrUtils.HEX_DIGITS[(b >> 4) & 0xf];\n          arr[idx+1]= StrUtils.HEX_DIGITS[b & 0xf];\n        }\n        String sigString = new String(arr);\n        doc.addField(signatureField, sigString);\n\n        if (overwriteDupes) {\n          cmd.updateTerm = new Term(signatureField, sigString);\n        }\n\n      }\n\n      if (next != null)\n        next.processAdd(cmd);\n    }\n\n","sourceOld":"    @Override\n    public void processAdd(AddUpdateCommand cmd) throws IOException {\n      if (enabled) {\n        SolrInputDocument doc = cmd.getSolrInputDocument();\n        if (sigFields == null || sigFields.size() == 0) {\n          Collection<String> docFields = doc.getFieldNames();\n          sigFields = new ArrayList<String>(docFields.size());\n          sigFields.addAll(docFields);\n          Collections.sort(sigFields);\n        }\n\n        Signature sig = (Signature) req.getCore().getResourceLoader().newInstance(signatureClass); \n        sig.init(params);\n\n        for (String field : sigFields) {\n          SolrInputField f = doc.getField(field);\n          if (f != null) {\n            sig.add(field);\n            Object o = f.getValue();\n            if (o instanceof String) {\n              sig.add((String)o);\n            } else if (o instanceof Collection) {\n              for (Object oo : (Collection)o) {\n                if (oo instanceof String) {\n                  sig.add((String)oo);\n                }\n              }\n            }\n          }\n        }\n\n        byte[] signature = sig.getSignature();\n        char[] arr = new char[signature.length<<1];\n        for (int i=0; i<signature.length; i++) {\n          int b = signature[i];\n          int idx = i<<1;\n          arr[idx]= StrUtils.HEX_DIGITS[(b >> 4) & 0xf];\n          arr[idx+1]= StrUtils.HEX_DIGITS[b & 0xf];\n        }\n        String sigString = new String(arr);\n        doc.addField(signatureField, sigString);\n\n        if (overwriteDupes) {\n          cmd.updateTerm = signatureTerm.createTerm(sigString);\n        }\n\n      }\n\n      if (next != null)\n        next.processAdd(cmd);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2553b00f699380c64959ccb27991289aae87be2e","date":1309290151,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/update/processor/SignatureUpdateProcessorFactory.SignatureUpdateProcessor#processAdd(AddUpdateCommand).mjava","pathOld":"solr/src/java/org/apache/solr/update/processor/SignatureUpdateProcessorFactory.SignatureUpdateProcessor#processAdd(AddUpdateCommand).mjava","sourceNew":"    @Override\n    public void processAdd(AddUpdateCommand cmd) throws IOException {\n      if (enabled) {\n        SolrInputDocument doc = cmd.getSolrInputDocument();\n        if (sigFields == null || sigFields.size() == 0) {\n          Collection<String> docFields = doc.getFieldNames();\n          sigFields = new ArrayList<String>(docFields.size());\n          sigFields.addAll(docFields);\n          Collections.sort(sigFields);\n        }\n\n        Signature sig = (Signature) req.getCore().getResourceLoader().newInstance(signatureClass); \n        sig.init(params);\n\n        for (String field : sigFields) {\n          SolrInputField f = doc.getField(field);\n          if (f != null) {\n            sig.add(field);\n            Object o = f.getValue();\n            if (o instanceof String) {\n              sig.add((String)o);\n            } else if (o instanceof Collection) {\n              for (Object oo : (Collection)o) {\n                if (oo instanceof String) {\n                  sig.add((String)oo);\n                }\n              }\n            }\n          }\n        }\n\n        byte[] signature = sig.getSignature();\n        char[] arr = new char[signature.length<<1];\n        for (int i=0; i<signature.length; i++) {\n          int b = signature[i];\n          int idx = i<<1;\n          arr[idx]= StrUtils.HEX_DIGITS[(b >> 4) & 0xf];\n          arr[idx+1]= StrUtils.HEX_DIGITS[b & 0xf];\n        }\n        String sigString = new String(arr);\n        doc.addField(signatureField, sigString);\n\n        if (overwriteDupes) {\n          cmd.updateTerm = new Term(signatureField, sigString);\n        }\n\n      }\n\n      if (next != null)\n        next.processAdd(cmd);\n    }\n\n","sourceOld":"    @Override\n    public void processAdd(AddUpdateCommand cmd) throws IOException {\n      if (enabled) {\n        SolrInputDocument doc = cmd.getSolrInputDocument();\n        if (sigFields == null || sigFields.size() == 0) {\n          Collection<String> docFields = doc.getFieldNames();\n          sigFields = new ArrayList<String>(docFields.size());\n          sigFields.addAll(docFields);\n          Collections.sort(sigFields);\n        }\n\n        Signature sig = (Signature) req.getCore().getResourceLoader().newInstance(signatureClass); \n        sig.init(params);\n\n        for (String field : sigFields) {\n          SolrInputField f = doc.getField(field);\n          if (f != null) {\n            sig.add(field);\n            Object o = f.getValue();\n            if (o instanceof String) {\n              sig.add((String)o);\n            } else if (o instanceof Collection) {\n              for (Object oo : (Collection)o) {\n                if (oo instanceof String) {\n                  sig.add((String)oo);\n                }\n              }\n            }\n          }\n        }\n\n        byte[] signature = sig.getSignature();\n        char[] arr = new char[signature.length<<1];\n        for (int i=0; i<signature.length; i++) {\n          int b = signature[i];\n          int idx = i<<1;\n          arr[idx]= StrUtils.HEX_DIGITS[(b >> 4) & 0xf];\n          arr[idx+1]= StrUtils.HEX_DIGITS[b & 0xf];\n        }\n        String sigString = new String(arr);\n        doc.addField(signatureField, sigString);\n\n        if (overwriteDupes) {\n          cmd.updateTerm = signatureTerm.createTerm(sigString);\n        }\n\n      }\n\n      if (next != null)\n        next.processAdd(cmd);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/update/processor/SignatureUpdateProcessorFactory.SignatureUpdateProcessor#processAdd(AddUpdateCommand).mjava","pathOld":"solr/src/java/org/apache/solr/update/processor/SignatureUpdateProcessorFactory.SignatureUpdateProcessor#processAdd(AddUpdateCommand).mjava","sourceNew":"    @Override\n    public void processAdd(AddUpdateCommand cmd) throws IOException {\n      if (enabled) {\n        SolrInputDocument doc = cmd.getSolrInputDocument();\n        if (sigFields == null || sigFields.size() == 0) {\n          Collection<String> docFields = doc.getFieldNames();\n          sigFields = new ArrayList<String>(docFields.size());\n          sigFields.addAll(docFields);\n          Collections.sort(sigFields);\n        }\n\n        Signature sig = (Signature) req.getCore().getResourceLoader().newInstance(signatureClass); \n        sig.init(params);\n\n        for (String field : sigFields) {\n          SolrInputField f = doc.getField(field);\n          if (f != null) {\n            sig.add(field);\n            Object o = f.getValue();\n            if (o instanceof String) {\n              sig.add((String)o);\n            } else if (o instanceof Collection) {\n              for (Object oo : (Collection)o) {\n                if (oo instanceof String) {\n                  sig.add((String)oo);\n                }\n              }\n            }\n          }\n        }\n\n        byte[] signature = sig.getSignature();\n        char[] arr = new char[signature.length<<1];\n        for (int i=0; i<signature.length; i++) {\n          int b = signature[i];\n          int idx = i<<1;\n          arr[idx]= StrUtils.HEX_DIGITS[(b >> 4) & 0xf];\n          arr[idx+1]= StrUtils.HEX_DIGITS[b & 0xf];\n        }\n        String sigString = new String(arr);\n        doc.addField(signatureField, sigString);\n\n        if (overwriteDupes) {\n          cmd.updateTerm = new Term(signatureField, sigString);\n        }\n\n      }\n\n      if (next != null)\n        next.processAdd(cmd);\n    }\n\n","sourceOld":"    @Override\n    public void processAdd(AddUpdateCommand cmd) throws IOException {\n      if (enabled) {\n        SolrInputDocument doc = cmd.getSolrInputDocument();\n        if (sigFields == null || sigFields.size() == 0) {\n          Collection<String> docFields = doc.getFieldNames();\n          sigFields = new ArrayList<String>(docFields.size());\n          sigFields.addAll(docFields);\n          Collections.sort(sigFields);\n        }\n\n        Signature sig = (Signature) req.getCore().getResourceLoader().newInstance(signatureClass); \n        sig.init(params);\n\n        for (String field : sigFields) {\n          SolrInputField f = doc.getField(field);\n          if (f != null) {\n            sig.add(field);\n            Object o = f.getValue();\n            if (o instanceof String) {\n              sig.add((String)o);\n            } else if (o instanceof Collection) {\n              for (Object oo : (Collection)o) {\n                if (oo instanceof String) {\n                  sig.add((String)oo);\n                }\n              }\n            }\n          }\n        }\n\n        byte[] signature = sig.getSignature();\n        char[] arr = new char[signature.length<<1];\n        for (int i=0; i<signature.length; i++) {\n          int b = signature[i];\n          int idx = i<<1;\n          arr[idx]= StrUtils.HEX_DIGITS[(b >> 4) & 0xf];\n          arr[idx+1]= StrUtils.HEX_DIGITS[b & 0xf];\n        }\n        String sigString = new String(arr);\n        doc.addField(signatureField, sigString);\n\n        if (overwriteDupes) {\n          cmd.updateTerm = signatureTerm.createTerm(sigString);\n        }\n\n      }\n\n      if (next != null)\n        next.processAdd(cmd);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/SignatureUpdateProcessorFactory.SignatureUpdateProcessor#processAdd(AddUpdateCommand).mjava","pathOld":"solr/src/java/org/apache/solr/update/processor/SignatureUpdateProcessorFactory.SignatureUpdateProcessor#processAdd(AddUpdateCommand).mjava","sourceNew":"    @Override\n    public void processAdd(AddUpdateCommand cmd) throws IOException {\n      if (enabled) {\n        SolrInputDocument doc = cmd.getSolrInputDocument();\n        if (sigFields == null || sigFields.size() == 0) {\n          Collection<String> docFields = doc.getFieldNames();\n          sigFields = new ArrayList<String>(docFields.size());\n          sigFields.addAll(docFields);\n          Collections.sort(sigFields);\n        }\n\n        Signature sig = (Signature) req.getCore().getResourceLoader().newInstance(signatureClass); \n        sig.init(params);\n\n        for (String field : sigFields) {\n          SolrInputField f = doc.getField(field);\n          if (f != null) {\n            sig.add(field);\n            Object o = f.getValue();\n            if (o instanceof String) {\n              sig.add((String)o);\n            } else if (o instanceof Collection) {\n              for (Object oo : (Collection)o) {\n                if (oo instanceof String) {\n                  sig.add((String)oo);\n                }\n              }\n            }\n          }\n        }\n\n        byte[] signature = sig.getSignature();\n        char[] arr = new char[signature.length<<1];\n        for (int i=0; i<signature.length; i++) {\n          int b = signature[i];\n          int idx = i<<1;\n          arr[idx]= StrUtils.HEX_DIGITS[(b >> 4) & 0xf];\n          arr[idx+1]= StrUtils.HEX_DIGITS[b & 0xf];\n        }\n        String sigString = new String(arr);\n        doc.addField(signatureField, sigString);\n\n        if (overwriteDupes) {\n          cmd.updateTerm = new Term(signatureField, sigString);\n        }\n\n      }\n\n      if (next != null)\n        next.processAdd(cmd);\n    }\n\n","sourceOld":"    @Override\n    public void processAdd(AddUpdateCommand cmd) throws IOException {\n      if (enabled) {\n        SolrInputDocument doc = cmd.getSolrInputDocument();\n        if (sigFields == null || sigFields.size() == 0) {\n          Collection<String> docFields = doc.getFieldNames();\n          sigFields = new ArrayList<String>(docFields.size());\n          sigFields.addAll(docFields);\n          Collections.sort(sigFields);\n        }\n\n        Signature sig = (Signature) req.getCore().getResourceLoader().newInstance(signatureClass); \n        sig.init(params);\n\n        for (String field : sigFields) {\n          SolrInputField f = doc.getField(field);\n          if (f != null) {\n            sig.add(field);\n            Object o = f.getValue();\n            if (o instanceof String) {\n              sig.add((String)o);\n            } else if (o instanceof Collection) {\n              for (Object oo : (Collection)o) {\n                if (oo instanceof String) {\n                  sig.add((String)oo);\n                }\n              }\n            }\n          }\n        }\n\n        byte[] signature = sig.getSignature();\n        char[] arr = new char[signature.length<<1];\n        for (int i=0; i<signature.length; i++) {\n          int b = signature[i];\n          int idx = i<<1;\n          arr[idx]= StrUtils.HEX_DIGITS[(b >> 4) & 0xf];\n          arr[idx+1]= StrUtils.HEX_DIGITS[b & 0xf];\n        }\n        String sigString = new String(arr);\n        doc.addField(signatureField, sigString);\n\n        if (overwriteDupes) {\n          cmd.updateTerm = new Term(signatureField, sigString);\n        }\n\n      }\n\n      if (next != null)\n        next.processAdd(cmd);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/SignatureUpdateProcessorFactory.SignatureUpdateProcessor#processAdd(AddUpdateCommand).mjava","pathOld":"solr/src/java/org/apache/solr/update/processor/SignatureUpdateProcessorFactory.SignatureUpdateProcessor#processAdd(AddUpdateCommand).mjava","sourceNew":"    @Override\n    public void processAdd(AddUpdateCommand cmd) throws IOException {\n      if (enabled) {\n        SolrInputDocument doc = cmd.getSolrInputDocument();\n        if (sigFields == null || sigFields.size() == 0) {\n          Collection<String> docFields = doc.getFieldNames();\n          sigFields = new ArrayList<String>(docFields.size());\n          sigFields.addAll(docFields);\n          Collections.sort(sigFields);\n        }\n\n        Signature sig = (Signature) req.getCore().getResourceLoader().newInstance(signatureClass); \n        sig.init(params);\n\n        for (String field : sigFields) {\n          SolrInputField f = doc.getField(field);\n          if (f != null) {\n            sig.add(field);\n            Object o = f.getValue();\n            if (o instanceof String) {\n              sig.add((String)o);\n            } else if (o instanceof Collection) {\n              for (Object oo : (Collection)o) {\n                if (oo instanceof String) {\n                  sig.add((String)oo);\n                }\n              }\n            }\n          }\n        }\n\n        byte[] signature = sig.getSignature();\n        char[] arr = new char[signature.length<<1];\n        for (int i=0; i<signature.length; i++) {\n          int b = signature[i];\n          int idx = i<<1;\n          arr[idx]= StrUtils.HEX_DIGITS[(b >> 4) & 0xf];\n          arr[idx+1]= StrUtils.HEX_DIGITS[b & 0xf];\n        }\n        String sigString = new String(arr);\n        doc.addField(signatureField, sigString);\n\n        if (overwriteDupes) {\n          cmd.updateTerm = new Term(signatureField, sigString);\n        }\n\n      }\n\n      if (next != null)\n        next.processAdd(cmd);\n    }\n\n","sourceOld":"    @Override\n    public void processAdd(AddUpdateCommand cmd) throws IOException {\n      if (enabled) {\n        SolrInputDocument doc = cmd.getSolrInputDocument();\n        if (sigFields == null || sigFields.size() == 0) {\n          Collection<String> docFields = doc.getFieldNames();\n          sigFields = new ArrayList<String>(docFields.size());\n          sigFields.addAll(docFields);\n          Collections.sort(sigFields);\n        }\n\n        Signature sig = (Signature) req.getCore().getResourceLoader().newInstance(signatureClass); \n        sig.init(params);\n\n        for (String field : sigFields) {\n          SolrInputField f = doc.getField(field);\n          if (f != null) {\n            sig.add(field);\n            Object o = f.getValue();\n            if (o instanceof String) {\n              sig.add((String)o);\n            } else if (o instanceof Collection) {\n              for (Object oo : (Collection)o) {\n                if (oo instanceof String) {\n                  sig.add((String)oo);\n                }\n              }\n            }\n          }\n        }\n\n        byte[] signature = sig.getSignature();\n        char[] arr = new char[signature.length<<1];\n        for (int i=0; i<signature.length; i++) {\n          int b = signature[i];\n          int idx = i<<1;\n          arr[idx]= StrUtils.HEX_DIGITS[(b >> 4) & 0xf];\n          arr[idx+1]= StrUtils.HEX_DIGITS[b & 0xf];\n        }\n        String sigString = new String(arr);\n        doc.addField(signatureField, sigString);\n\n        if (overwriteDupes) {\n          cmd.updateTerm = new Term(signatureField, sigString);\n        }\n\n      }\n\n      if (next != null)\n        next.processAdd(cmd);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/SignatureUpdateProcessorFactory.SignatureUpdateProcessor#processAdd(AddUpdateCommand).mjava","pathOld":"solr/src/java/org/apache/solr/update/processor/SignatureUpdateProcessorFactory.SignatureUpdateProcessor#processAdd(AddUpdateCommand).mjava","sourceNew":"    @Override\n    public void processAdd(AddUpdateCommand cmd) throws IOException {\n      if (enabled) {\n        SolrInputDocument doc = cmd.getSolrInputDocument();\n        if (sigFields == null || sigFields.size() == 0) {\n          Collection<String> docFields = doc.getFieldNames();\n          sigFields = new ArrayList<String>(docFields.size());\n          sigFields.addAll(docFields);\n          Collections.sort(sigFields);\n        }\n\n        Signature sig = (Signature) req.getCore().getResourceLoader().newInstance(signatureClass); \n        sig.init(params);\n\n        for (String field : sigFields) {\n          SolrInputField f = doc.getField(field);\n          if (f != null) {\n            sig.add(field);\n            Object o = f.getValue();\n            if (o instanceof String) {\n              sig.add((String)o);\n            } else if (o instanceof Collection) {\n              for (Object oo : (Collection)o) {\n                if (oo instanceof String) {\n                  sig.add((String)oo);\n                }\n              }\n            }\n          }\n        }\n\n        byte[] signature = sig.getSignature();\n        char[] arr = new char[signature.length<<1];\n        for (int i=0; i<signature.length; i++) {\n          int b = signature[i];\n          int idx = i<<1;\n          arr[idx]= StrUtils.HEX_DIGITS[(b >> 4) & 0xf];\n          arr[idx+1]= StrUtils.HEX_DIGITS[b & 0xf];\n        }\n        String sigString = new String(arr);\n        doc.addField(signatureField, sigString);\n\n        if (overwriteDupes) {\n          cmd.updateTerm = new Term(signatureField, sigString);\n        }\n\n      }\n\n      if (next != null)\n        next.processAdd(cmd);\n    }\n\n","sourceOld":"    @Override\n    public void processAdd(AddUpdateCommand cmd) throws IOException {\n      if (enabled) {\n        SolrInputDocument doc = cmd.getSolrInputDocument();\n        if (sigFields == null || sigFields.size() == 0) {\n          Collection<String> docFields = doc.getFieldNames();\n          sigFields = new ArrayList<String>(docFields.size());\n          sigFields.addAll(docFields);\n          Collections.sort(sigFields);\n        }\n\n        Signature sig = (Signature) req.getCore().getResourceLoader().newInstance(signatureClass); \n        sig.init(params);\n\n        for (String field : sigFields) {\n          SolrInputField f = doc.getField(field);\n          if (f != null) {\n            sig.add(field);\n            Object o = f.getValue();\n            if (o instanceof String) {\n              sig.add((String)o);\n            } else if (o instanceof Collection) {\n              for (Object oo : (Collection)o) {\n                if (oo instanceof String) {\n                  sig.add((String)oo);\n                }\n              }\n            }\n          }\n        }\n\n        byte[] signature = sig.getSignature();\n        char[] arr = new char[signature.length<<1];\n        for (int i=0; i<signature.length; i++) {\n          int b = signature[i];\n          int idx = i<<1;\n          arr[idx]= StrUtils.HEX_DIGITS[(b >> 4) & 0xf];\n          arr[idx+1]= StrUtils.HEX_DIGITS[b & 0xf];\n        }\n        String sigString = new String(arr);\n        doc.addField(signatureField, sigString);\n\n        if (overwriteDupes) {\n          cmd.updateTerm = new Term(signatureField, sigString);\n        }\n\n      }\n\n      if (next != null)\n        next.processAdd(cmd);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"fafef7c83fe8e0b3ca9298d5d75d6b943dc28153":["1da8d55113b689b06716246649de6f62430f15c0"],"c26f00b574427b55127e869b935845554afde1fa":["fafef7c83fe8e0b3ca9298d5d75d6b943dc28153","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"2553b00f699380c64959ccb27991289aae87be2e":["1da8d55113b689b06716246649de6f62430f15c0","fafef7c83fe8e0b3ca9298d5d75d6b943dc28153"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["1da8d55113b689b06716246649de6f62430f15c0","fafef7c83fe8e0b3ca9298d5d75d6b943dc28153"],"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["2553b00f699380c64959ccb27991289aae87be2e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["fafef7c83fe8e0b3ca9298d5d75d6b943dc28153"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"fafef7c83fe8e0b3ca9298d5d75d6b943dc28153":["c26f00b574427b55127e869b935845554afde1fa","2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c","a258fbb26824fd104ed795e5d9033d2d040049ee"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"2553b00f699380c64959ccb27991289aae87be2e":["c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"1da8d55113b689b06716246649de6f62430f15c0":["fafef7c83fe8e0b3ca9298d5d75d6b943dc28153","2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d083e83f225b11e5fdd900e83d26ddb385b6955c","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}