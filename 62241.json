{"path":"lucene/facet/src/test/org/apache/lucene/facet/range/TestRangeFacetCounts#testBasicDouble().mjava","commits":[{"id":"4edc984f0f4ac77c37e48ace2932f780f888453c","date":1388475218,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/range/TestRangeFacetCounts#testBasicDouble().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/TestRangeFacetCounts#testBasicDouble().mjava","sourceNew":"  public void testBasicDouble() throws Exception {\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Document doc = new Document();\n    DoubleDocValuesField field = new DoubleDocValuesField(\"field\", 0.0);\n    doc.add(field);\n    for(long l=0;l<100;l++) {\n      field.setDoubleValue(l);\n      w.addDocument(doc);\n    }\n\n    IndexReader r = w.getReader();\n\n    FacetsCollector fc = new FacetsCollector();\n\n    IndexSearcher s = newSearcher(r);\n    s.search(new MatchAllDocsQuery(), fc);\n    Facets facets = new DoubleRangeFacetCounts(\"field\", fc,\n        new DoubleRange(\"less than 10\", 0.0, true, 10.0, false),\n        new DoubleRange(\"less than or equal to 10\", 0.0, true, 10.0, true),\n        new DoubleRange(\"over 90\", 90.0, false, 100.0, false),\n        new DoubleRange(\"90 or above\", 90.0, true, 100.0, false),\n        new DoubleRange(\"over 1000\", 1000.0, false, Double.POSITIVE_INFINITY, false));\n                                         \n    assertEquals(\"dim=field path=[] value=21 childCount=5\\n  less than 10 (10)\\n  less than or equal to 10 (11)\\n  over 90 (9)\\n  90 or above (10)\\n  over 1000 (0)\\n\",\n                 facets.getTopChildren(10, \"field\").toString());\n\n    IOUtils.close(w, r, d);\n  }\n\n","sourceOld":"  public void testBasicDouble() throws Exception {\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Document doc = new Document();\n    DoubleDocValuesField field = new DoubleDocValuesField(\"field\", 0.0);\n    doc.add(field);\n    for(long l=0;l<100;l++) {\n      field.setDoubleValue(l);\n      w.addDocument(doc);\n    }\n\n    IndexReader r = w.getReader();\n\n    FacetsCollector fc = new FacetsCollector();\n\n    IndexSearcher s = newSearcher(r);\n    s.search(new MatchAllDocsQuery(), fc);\n    Facets facets = new DoubleRangeFacetCounts(\"field\", fc,\n        new DoubleRange(\"less than 10\", 0.0, true, 10.0, false),\n        new DoubleRange(\"less than or equal to 10\", 0.0, true, 10.0, true),\n        new DoubleRange(\"over 90\", 90.0, false, 100.0, false),\n        new DoubleRange(\"90 or above\", 90.0, true, 100.0, false),\n        new DoubleRange(\"over 1000\", 1000.0, false, Double.POSITIVE_INFINITY, false));\n                                         \n    assertEquals(\"dim=field path=[] value=21 childCount=5\\n  less than 10 (10)\\n  less than or equal to 10 (11)\\n  over 90 (9)\\n  90 or above (10)\\n  over 1000 (0)\\n\",\n                 facets.getTopChildren(10, \"field\").toString());\n\n    IOUtils.close(w, r, d);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/range/TestRangeFacetCounts#testBasicDouble().mjava","pathOld":"/dev/null","sourceNew":"  public void testBasicDouble() throws Exception {\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Document doc = new Document();\n    DoubleDocValuesField field = new DoubleDocValuesField(\"field\", 0.0);\n    doc.add(field);\n    for(long l=0;l<100;l++) {\n      field.setDoubleValue(l);\n      w.addDocument(doc);\n    }\n\n    IndexReader r = w.getReader();\n\n    FacetsCollector fc = new FacetsCollector();\n\n    IndexSearcher s = newSearcher(r);\n    s.search(new MatchAllDocsQuery(), fc);\n    Facets facets = new DoubleRangeFacetCounts(\"field\", fc,\n        new DoubleRange(\"less than 10\", 0.0, true, 10.0, false),\n        new DoubleRange(\"less than or equal to 10\", 0.0, true, 10.0, true),\n        new DoubleRange(\"over 90\", 90.0, false, 100.0, false),\n        new DoubleRange(\"90 or above\", 90.0, true, 100.0, false),\n        new DoubleRange(\"over 1000\", 1000.0, false, Double.POSITIVE_INFINITY, false));\n                                         \n    assertEquals(\"dim=field path=[] value=21 childCount=5\\n  less than 10 (10)\\n  less than or equal to 10 (11)\\n  over 90 (9)\\n  90 or above (10)\\n  over 1000 (0)\\n\",\n                 facets.getTopChildren(10, \"field\").toString());\n\n    IOUtils.close(w, r, d);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/range/TestRangeFacetCounts#testBasicDouble().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/range/TestRangeFacetCounts#testBasicDouble().mjava","sourceNew":"  public void testBasicDouble() throws Exception {\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Document doc = new Document();\n    DoubleDocValuesField field = new DoubleDocValuesField(\"field\", 0.0);\n    doc.add(field);\n    for(long l=0;l<100;l++) {\n      field.setDoubleValue(l);\n      w.addDocument(doc);\n    }\n\n    IndexReader r = w.getReader();\n\n    FacetsCollector fc = new FacetsCollector();\n\n    IndexSearcher s = newSearcher(r);\n    s.search(new MatchAllDocsQuery(), fc);\n    Facets facets = new DoubleRangeFacetCounts(\"field\", fc,\n        new DoubleRange(\"less than 10\", 0.0, true, 10.0, false),\n        new DoubleRange(\"less than or equal to 10\", 0.0, true, 10.0, true),\n        new DoubleRange(\"over 90\", 90.0, false, 100.0, false),\n        new DoubleRange(\"90 or above\", 90.0, true, 100.0, false),\n        new DoubleRange(\"over 1000\", 1000.0, false, Double.POSITIVE_INFINITY, false));\n                                         \n    assertEquals(\"dim=field path=[] value=21 childCount=5\\n  less than 10 (10)\\n  less than or equal to 10 (11)\\n  over 90 (9)\\n  90 or above (10)\\n  over 1000 (0)\\n\",\n                 facets.getTopChildren(10, \"field\").toString());\n    w.shutdown();\n    IOUtils.close(r, d);\n  }\n\n","sourceOld":"  public void testBasicDouble() throws Exception {\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Document doc = new Document();\n    DoubleDocValuesField field = new DoubleDocValuesField(\"field\", 0.0);\n    doc.add(field);\n    for(long l=0;l<100;l++) {\n      field.setDoubleValue(l);\n      w.addDocument(doc);\n    }\n\n    IndexReader r = w.getReader();\n\n    FacetsCollector fc = new FacetsCollector();\n\n    IndexSearcher s = newSearcher(r);\n    s.search(new MatchAllDocsQuery(), fc);\n    Facets facets = new DoubleRangeFacetCounts(\"field\", fc,\n        new DoubleRange(\"less than 10\", 0.0, true, 10.0, false),\n        new DoubleRange(\"less than or equal to 10\", 0.0, true, 10.0, true),\n        new DoubleRange(\"over 90\", 90.0, false, 100.0, false),\n        new DoubleRange(\"90 or above\", 90.0, true, 100.0, false),\n        new DoubleRange(\"over 1000\", 1000.0, false, Double.POSITIVE_INFINITY, false));\n                                         \n    assertEquals(\"dim=field path=[] value=21 childCount=5\\n  less than 10 (10)\\n  less than or equal to 10 (11)\\n  over 90 (9)\\n  90 or above (10)\\n  over 1000 (0)\\n\",\n                 facets.getTopChildren(10, \"field\").toString());\n\n    IOUtils.close(w, r, d);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/range/TestRangeFacetCounts#testBasicDouble().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/range/TestRangeFacetCounts#testBasicDouble().mjava","sourceNew":"  public void testBasicDouble() throws Exception {\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Document doc = new Document();\n    DoubleDocValuesField field = new DoubleDocValuesField(\"field\", 0.0);\n    doc.add(field);\n    for(long l=0;l<100;l++) {\n      field.setDoubleValue(l);\n      w.addDocument(doc);\n    }\n\n    IndexReader r = w.getReader();\n\n    FacetsCollector fc = new FacetsCollector();\n\n    IndexSearcher s = newSearcher(r);\n    s.search(new MatchAllDocsQuery(), fc);\n    Facets facets = new DoubleRangeFacetCounts(\"field\", fc,\n        new DoubleRange(\"less than 10\", 0.0, true, 10.0, false),\n        new DoubleRange(\"less than or equal to 10\", 0.0, true, 10.0, true),\n        new DoubleRange(\"over 90\", 90.0, false, 100.0, false),\n        new DoubleRange(\"90 or above\", 90.0, true, 100.0, false),\n        new DoubleRange(\"over 1000\", 1000.0, false, Double.POSITIVE_INFINITY, false));\n                                         \n    assertEquals(\"dim=field path=[] value=21 childCount=5\\n  less than 10 (10)\\n  less than or equal to 10 (11)\\n  over 90 (9)\\n  90 or above (10)\\n  over 1000 (0)\\n\",\n                 facets.getTopChildren(10, \"field\").toString());\n    w.close();\n    IOUtils.close(r, d);\n  }\n\n","sourceOld":"  public void testBasicDouble() throws Exception {\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Document doc = new Document();\n    DoubleDocValuesField field = new DoubleDocValuesField(\"field\", 0.0);\n    doc.add(field);\n    for(long l=0;l<100;l++) {\n      field.setDoubleValue(l);\n      w.addDocument(doc);\n    }\n\n    IndexReader r = w.getReader();\n\n    FacetsCollector fc = new FacetsCollector();\n\n    IndexSearcher s = newSearcher(r);\n    s.search(new MatchAllDocsQuery(), fc);\n    Facets facets = new DoubleRangeFacetCounts(\"field\", fc,\n        new DoubleRange(\"less than 10\", 0.0, true, 10.0, false),\n        new DoubleRange(\"less than or equal to 10\", 0.0, true, 10.0, true),\n        new DoubleRange(\"over 90\", 90.0, false, 100.0, false),\n        new DoubleRange(\"90 or above\", 90.0, true, 100.0, false),\n        new DoubleRange(\"over 1000\", 1000.0, false, Double.POSITIVE_INFINITY, false));\n                                         \n    assertEquals(\"dim=field path=[] value=21 childCount=5\\n  less than 10 (10)\\n  less than or equal to 10 (11)\\n  over 90 (9)\\n  90 or above (10)\\n  over 1000 (0)\\n\",\n                 facets.getTopChildren(10, \"field\").toString());\n    w.shutdown();\n    IOUtils.close(r, d);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"4edc984f0f4ac77c37e48ace2932f780f888453c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4edc984f0f4ac77c37e48ace2932f780f888453c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d0ef034a4f10871667ae75181537775ddcf8ade4"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4edc984f0f4ac77c37e48ace2932f780f888453c","3cc728b07df73b197e6d940d27f9b08b63918f13"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4edc984f0f4ac77c37e48ace2932f780f888453c":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}