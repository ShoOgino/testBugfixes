{"path":"contrib/surround/src/test/org/apache/lucene/queryParser/surround/query/BooleanQueryTest.TestCollector#collect(int,float).mjava","commits":[{"id":"d04b321158481d3895702b3cbf6821a3083e6c15","date":1120530543,"type":0,"author":"Erik Hatcher","isMerge":false,"pathNew":"contrib/surround/src/test/org/apache/lucene/queryParser/surround/query/BooleanQueryTest.TestCollector#collect(int,float).mjava","pathOld":"/dev/null","sourceNew":"    public void collect(int docNr, float score) {\n      /* System.out.println(docNr + \" '\" + dBase.getDocs()[docNr] + \"': \" + score); */\n      testCase.assertTrue(queryText + \": positive score\", score > 0.0);\n      testCase.assertTrue(queryText + \": too many hits\", totalMatched < expectedDocNrs.length);\n      int i;\n      for (i = 0; i < expectedDocNrs.length; i++) {\n        if ((! encountered[i]) && (expectedDocNrs[i] == docNr)) {\n          encountered[i] = true;\n          break;\n        }\n      }\n      if (i == expectedDocNrs.length) {\n        testCase.assertTrue(queryText + \": doc nr for hit not expected: \" + docNr, false);\n      }\n      totalMatched++;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2b2b43f609d7aa3076ba82825bc5d40b6bdb42cb","date":1132096553,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"contrib/surround/src/test/org/apache/lucene/queryParser/surround/query/BooleanQueryTest.TestCollector#collect(int,float).mjava","pathOld":"contrib/surround/src/test/org/apache/lucene/queryParser/surround/query/BooleanQueryTest.TestCollector#collect(int,float).mjava","sourceNew":"    public void collect(int docNr, float score) {\n      /* System.out.println(docNr + \" '\" + dBase.getDocs()[docNr] + \"': \" + score); */\n      TestCase.assertTrue(queryText + \": positive score\", score > 0.0);\n      TestCase.assertTrue(queryText + \": too many hits\", totalMatched < expectedDocNrs.length);\n      int i;\n      for (i = 0; i < expectedDocNrs.length; i++) {\n        if ((! encountered[i]) && (expectedDocNrs[i] == docNr)) {\n          encountered[i] = true;\n          break;\n        }\n      }\n      if (i == expectedDocNrs.length) {\n        TestCase.assertTrue(queryText + \": doc nr for hit not expected: \" + docNr, false);\n      }\n      totalMatched++;\n    }\n\n","sourceOld":"    public void collect(int docNr, float score) {\n      /* System.out.println(docNr + \" '\" + dBase.getDocs()[docNr] + \"': \" + score); */\n      testCase.assertTrue(queryText + \": positive score\", score > 0.0);\n      testCase.assertTrue(queryText + \": too many hits\", totalMatched < expectedDocNrs.length);\n      int i;\n      for (i = 0; i < expectedDocNrs.length; i++) {\n        if ((! encountered[i]) && (expectedDocNrs[i] == docNr)) {\n          encountered[i] = true;\n          break;\n        }\n      }\n      if (i == expectedDocNrs.length) {\n        testCase.assertTrue(queryText + \": doc nr for hit not expected: \" + docNr, false);\n      }\n      totalMatched++;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"317dfa9adeff47074f27d16dc7550d7628d1a6ee","date":1132096702,"type":5,"author":"Daniel Naber","isMerge":false,"pathNew":"contrib/surround/src/test/org/apache/lucene/queryParser/surround/query/BooleanQueryTst.TestCollector#collect(int,float).mjava","pathOld":"contrib/surround/src/test/org/apache/lucene/queryParser/surround/query/BooleanQueryTest.TestCollector#collect(int,float).mjava","sourceNew":"    public void collect(int docNr, float score) {\n      /* System.out.println(docNr + \" '\" + dBase.getDocs()[docNr] + \"': \" + score); */\n      TestCase.assertTrue(queryText + \": positive score\", score > 0.0);\n      TestCase.assertTrue(queryText + \": too many hits\", totalMatched < expectedDocNrs.length);\n      int i;\n      for (i = 0; i < expectedDocNrs.length; i++) {\n        if ((! encountered[i]) && (expectedDocNrs[i] == docNr)) {\n          encountered[i] = true;\n          break;\n        }\n      }\n      if (i == expectedDocNrs.length) {\n        TestCase.assertTrue(queryText + \": doc nr for hit not expected: \" + docNr, false);\n      }\n      totalMatched++;\n    }\n\n","sourceOld":"    public void collect(int docNr, float score) {\n      /* System.out.println(docNr + \" '\" + dBase.getDocs()[docNr] + \"': \" + score); */\n      TestCase.assertTrue(queryText + \": positive score\", score > 0.0);\n      TestCase.assertTrue(queryText + \": too many hits\", totalMatched < expectedDocNrs.length);\n      int i;\n      for (i = 0; i < expectedDocNrs.length; i++) {\n        if ((! encountered[i]) && (expectedDocNrs[i] == docNr)) {\n          encountered[i] = true;\n          break;\n        }\n      }\n      if (i == expectedDocNrs.length) {\n        TestCase.assertTrue(queryText + \": doc nr for hit not expected: \" + docNr, false);\n      }\n      totalMatched++;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"317dfa9adeff47074f27d16dc7550d7628d1a6ee":["2b2b43f609d7aa3076ba82825bc5d40b6bdb42cb"],"d04b321158481d3895702b3cbf6821a3083e6c15":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2b2b43f609d7aa3076ba82825bc5d40b6bdb42cb":["d04b321158481d3895702b3cbf6821a3083e6c15"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["317dfa9adeff47074f27d16dc7550d7628d1a6ee"]},"commit2Childs":{"317dfa9adeff47074f27d16dc7550d7628d1a6ee":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d04b321158481d3895702b3cbf6821a3083e6c15":["2b2b43f609d7aa3076ba82825bc5d40b6bdb42cb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d04b321158481d3895702b3cbf6821a3083e6c15"],"2b2b43f609d7aa3076ba82825bc5d40b6bdb42cb":["317dfa9adeff47074f27d16dc7550d7628d1a6ee"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}