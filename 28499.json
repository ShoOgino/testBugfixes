{"path":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/SuggestStopFilter#incrementToken().mjava","commits":[{"id":"b7acd952b8ec320606434716bd02faaec540c885","date":1376495743,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/SuggestStopFilter#incrementToken().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public boolean incrementToken() throws IOException {\n    if (ended) {\n      return false;\n    }\n\n    if (!input.incrementToken()) {\n      return false;\n    }\n\n    int skippedPositions = 0;\n    while (true) {\n      if (stopWords.contains(termAtt.buffer(), 0, termAtt.length())) {\n        int posInc = posIncAtt.getPositionIncrement();\n        int endOffset = offsetAtt.endOffset();\n        // This token may be a stopword, if it's not end:\n        State sav = captureState();\n        if (input.incrementToken()) {\n          // It was a stopword; skip it\n          skippedPositions += posInc;\n        } else {\n          input.end();\n          ended = true;\n          int finalEndOffset = offsetAtt.endOffset();\n          assert finalEndOffset >= endOffset;\n          if (finalEndOffset > endOffset) {\n            // OK there was a token separator after the\n            // stopword, so it was a stopword\n            return false;\n          } else {\n            // No token separator after final token that\n            // looked like a stop-word; don't filter it:\n            endState = captureState();\n            restoreState(sav);\n            posIncAtt.setPositionIncrement(skippedPositions + posIncAtt.getPositionIncrement());\n            keywordAtt.setKeyword(true);\n            return true;\n          }\n        }\n      } else {\n        // Not a stopword; return the current token:\n        posIncAtt.setPositionIncrement(skippedPositions + posIncAtt.getPositionIncrement());\n        return true;\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f3f8a0f8bebc057ea4bdf65150b3fdc539db3d03","date":1377018786,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/SuggestStopFilter#incrementToken().mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/SuggestStopFilter#incrementToken().mjava","sourceNew":"  @Override\n  public boolean incrementToken() throws IOException {\n    if (endState != null) {\n      return false;\n    }\n\n    if (!input.incrementToken()) {\n      return false;\n    }\n\n    int skippedPositions = 0;\n    while (true) {\n      if (stopWords.contains(termAtt.buffer(), 0, termAtt.length())) {\n        int posInc = posIncAtt.getPositionIncrement();\n        int endOffset = offsetAtt.endOffset();\n        // This token may be a stopword, if it's not end:\n        State sav = captureState();\n        if (input.incrementToken()) {\n          // It was a stopword; skip it\n          skippedPositions += posInc;\n        } else {\n          clearAttributes();\n          input.end();\n          endState = captureState();\n          int finalEndOffset = offsetAtt.endOffset();\n          assert finalEndOffset >= endOffset;\n          if (finalEndOffset > endOffset) {\n            // OK there was a token separator after the\n            // stopword, so it was a stopword\n            return false;\n          } else {\n            // No token separator after final token that\n            // looked like a stop-word; don't filter it:\n            restoreState(sav);\n            posIncAtt.setPositionIncrement(skippedPositions + posIncAtt.getPositionIncrement());\n            keywordAtt.setKeyword(true);\n            return true;\n          }\n        }\n      } else {\n        // Not a stopword; return the current token:\n        posIncAtt.setPositionIncrement(skippedPositions + posIncAtt.getPositionIncrement());\n        return true;\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public boolean incrementToken() throws IOException {\n    if (ended) {\n      return false;\n    }\n\n    if (!input.incrementToken()) {\n      return false;\n    }\n\n    int skippedPositions = 0;\n    while (true) {\n      if (stopWords.contains(termAtt.buffer(), 0, termAtt.length())) {\n        int posInc = posIncAtt.getPositionIncrement();\n        int endOffset = offsetAtt.endOffset();\n        // This token may be a stopword, if it's not end:\n        State sav = captureState();\n        if (input.incrementToken()) {\n          // It was a stopword; skip it\n          skippedPositions += posInc;\n        } else {\n          input.end();\n          ended = true;\n          int finalEndOffset = offsetAtt.endOffset();\n          assert finalEndOffset >= endOffset;\n          if (finalEndOffset > endOffset) {\n            // OK there was a token separator after the\n            // stopword, so it was a stopword\n            return false;\n          } else {\n            // No token separator after final token that\n            // looked like a stop-word; don't filter it:\n            endState = captureState();\n            restoreState(sav);\n            posIncAtt.setPositionIncrement(skippedPositions + posIncAtt.getPositionIncrement());\n            keywordAtt.setKeyword(true);\n            return true;\n          }\n        }\n      } else {\n        // Not a stopword; return the current token:\n        posIncAtt.setPositionIncrement(skippedPositions + posIncAtt.getPositionIncrement());\n        return true;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3dffec77fb8f7d0e9ca4869dddd6af94528b4576","date":1377875202,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/SuggestStopFilter#incrementToken().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public boolean incrementToken() throws IOException {\n    if (endState != null) {\n      return false;\n    }\n\n    if (!input.incrementToken()) {\n      return false;\n    }\n\n    int skippedPositions = 0;\n    while (true) {\n      if (stopWords.contains(termAtt.buffer(), 0, termAtt.length())) {\n        int posInc = posIncAtt.getPositionIncrement();\n        int endOffset = offsetAtt.endOffset();\n        // This token may be a stopword, if it's not end:\n        State sav = captureState();\n        if (input.incrementToken()) {\n          // It was a stopword; skip it\n          skippedPositions += posInc;\n        } else {\n          clearAttributes();\n          input.end();\n          endState = captureState();\n          int finalEndOffset = offsetAtt.endOffset();\n          assert finalEndOffset >= endOffset;\n          if (finalEndOffset > endOffset) {\n            // OK there was a token separator after the\n            // stopword, so it was a stopword\n            return false;\n          } else {\n            // No token separator after final token that\n            // looked like a stop-word; don't filter it:\n            restoreState(sav);\n            posIncAtt.setPositionIncrement(skippedPositions + posIncAtt.getPositionIncrement());\n            keywordAtt.setKeyword(true);\n            return true;\n          }\n        }\n      } else {\n        // Not a stopword; return the current token:\n        posIncAtt.setPositionIncrement(skippedPositions + posIncAtt.getPositionIncrement());\n        return true;\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b7acd952b8ec320606434716bd02faaec540c885":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f3f8a0f8bebc057ea4bdf65150b3fdc539db3d03"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f3f8a0f8bebc057ea4bdf65150b3fdc539db3d03":["b7acd952b8ec320606434716bd02faaec540c885"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f3f8a0f8bebc057ea4bdf65150b3fdc539db3d03"]},"commit2Childs":{"b7acd952b8ec320606434716bd02faaec540c885":["f3f8a0f8bebc057ea4bdf65150b3fdc539db3d03"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b7acd952b8ec320606434716bd02faaec540c885","3dffec77fb8f7d0e9ca4869dddd6af94528b4576"],"f3f8a0f8bebc057ea4bdf65150b3fdc539db3d03":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}