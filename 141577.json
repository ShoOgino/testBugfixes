{"path":"backwards/src/java/org/apache/lucene/search/TopFieldCollector.MultiComparatorScoringMaxScoreCollector#collect(int).mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/java/org/apache/lucene/search/TopFieldCollector.MultiComparatorScoringMaxScoreCollector#collect(int).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public void collect(int doc) throws IOException {\n      final float score = scorer.score();\n      if (score > maxScore) {\n        maxScore = score;\n      }\n      ++totalHits;\n      if (queueFull) {\n        // Fastmatch: return if this hit is not competitive\n        for (int i = 0;; i++) {\n          final int c = reverseMul[i] * comparators[i].compareBottom(doc);\n          if (c < 0) {\n            // Definitely not competitive.\n            return;\n          } else if (c > 0) {\n            // Definitely competitive.\n            break;\n          } else if (i == comparators.length - 1) {\n            // Here c=0. If we're at the last comparator, this doc is not\n            // competitive, since docs are visited in doc Id order, which means\n            // this doc cannot compete with any other document in the queue.\n            return;\n          }\n        }\n\n        // This hit is competitive - replace bottom element in queue & adjustTop\n        for (int i = 0; i < comparators.length; i++) {\n          comparators[i].copy(bottom.slot, doc);\n        }\n\n        updateBottom(doc, score);\n\n        for (int i = 0; i < comparators.length; i++) {\n          comparators[i].setBottom(bottom.slot);\n        }\n      } else {\n        // Startup transient: queue hasn't gathered numHits yet\n        final int slot = totalHits - 1;\n        // Copy hit into queue\n        for (int i = 0; i < comparators.length; i++) {\n          comparators[i].copy(slot, doc);\n        }\n        add(slot, doc, score);\n        if (queueFull) {\n          for (int i = 0; i < comparators.length; i++) {\n            comparators[i].setBottom(bottom.slot);\n          }\n        }\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/search/TopFieldCollector.MultiComparatorScoringMaxScoreCollector#collect(int).mjava","pathOld":"backwards/src/java/org/apache/lucene/search/TopFieldCollector.MultiComparatorScoringMaxScoreCollector#collect(int).mjava","sourceNew":"    @Override\n    public void collect(int doc) throws IOException {\n      final float score = scorer.score();\n      if (score > maxScore) {\n        maxScore = score;\n      }\n      ++totalHits;\n      if (queueFull) {\n        // Fastmatch: return if this hit is not competitive\n        for (int i = 0;; i++) {\n          final int c = reverseMul[i] * comparators[i].compareBottom(doc);\n          if (c < 0) {\n            // Definitely not competitive.\n            return;\n          } else if (c > 0) {\n            // Definitely competitive.\n            break;\n          } else if (i == comparators.length - 1) {\n            // Here c=0. If we're at the last comparator, this doc is not\n            // competitive, since docs are visited in doc Id order, which means\n            // this doc cannot compete with any other document in the queue.\n            return;\n          }\n        }\n\n        // This hit is competitive - replace bottom element in queue & adjustTop\n        for (int i = 0; i < comparators.length; i++) {\n          comparators[i].copy(bottom.slot, doc);\n        }\n\n        updateBottom(doc, score);\n\n        for (int i = 0; i < comparators.length; i++) {\n          comparators[i].setBottom(bottom.slot);\n        }\n      } else {\n        // Startup transient: queue hasn't gathered numHits yet\n        final int slot = totalHits - 1;\n        // Copy hit into queue\n        for (int i = 0; i < comparators.length; i++) {\n          comparators[i].copy(slot, doc);\n        }\n        add(slot, doc, score);\n        if (queueFull) {\n          for (int i = 0; i < comparators.length; i++) {\n            comparators[i].setBottom(bottom.slot);\n          }\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void collect(int doc) throws IOException {\n      final float score = scorer.score();\n      if (score > maxScore) {\n        maxScore = score;\n      }\n      ++totalHits;\n      if (queueFull) {\n        // Fastmatch: return if this hit is not competitive\n        for (int i = 0;; i++) {\n          final int c = reverseMul[i] * comparators[i].compareBottom(doc);\n          if (c < 0) {\n            // Definitely not competitive.\n            return;\n          } else if (c > 0) {\n            // Definitely competitive.\n            break;\n          } else if (i == comparators.length - 1) {\n            // Here c=0. If we're at the last comparator, this doc is not\n            // competitive, since docs are visited in doc Id order, which means\n            // this doc cannot compete with any other document in the queue.\n            return;\n          }\n        }\n\n        // This hit is competitive - replace bottom element in queue & adjustTop\n        for (int i = 0; i < comparators.length; i++) {\n          comparators[i].copy(bottom.slot, doc);\n        }\n\n        updateBottom(doc, score);\n\n        for (int i = 0; i < comparators.length; i++) {\n          comparators[i].setBottom(bottom.slot);\n        }\n      } else {\n        // Startup transient: queue hasn't gathered numHits yet\n        final int slot = totalHits - 1;\n        // Copy hit into queue\n        for (int i = 0; i < comparators.length; i++) {\n          comparators[i].copy(slot, doc);\n        }\n        add(slot, doc, score);\n        if (queueFull) {\n          for (int i = 0; i < comparators.length; i++) {\n            comparators[i].setBottom(bottom.slot);\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}