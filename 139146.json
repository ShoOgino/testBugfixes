{"path":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions.FailOnTermVectors#eval(MockDirectoryWrapper).mjava","commits":[{"id":"d3fe2fc74577855eadfb5eae3153c2fffdaaf791","date":1305237079,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions.FailOnTermVectors#eval(MockDirectoryWrapper).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public void eval(MockDirectoryWrapper dir)  throws IOException {\n      StackTraceElement[] trace = new Exception().getStackTrace();\n      boolean failOnInit = false;\n      boolean failOnfinish = false;\n      for (int i = 0; i < trace.length; i++) {\n        if (\"org.apache.lucene.index.TermVectorsTermsWriter\".equals(trace[i].getClassName()) && stage.equals(trace[i].getMethodName()))\n          failOnInit = true;\n        if (\"org.apache.lucene.index.TermVectorsTermsWriter\".equals(trace[i].getClassName()) && stage.equals(trace[i].getMethodName()))\n          failOnfinish = true;\n      }\n      \n      if (failOnInit) {\n        throw new RuntimeException(EXC_MSG + \" fail on init\");\n      } else if (failOnfinish) {\n        throw new RuntimeException(EXC_MSG + \" fail on finishDoc\");\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c700f8d0842d3e52bb2bdfbfdc046a137e836edb","date":1305285499,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions.FailOnTermVectors#eval(MockDirectoryWrapper).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public void eval(MockDirectoryWrapper dir)  throws IOException {\n      StackTraceElement[] trace = new Exception().getStackTrace();\n      boolean failOnInit = false;\n      boolean failOnfinish = false;\n      for (int i = 0; i < trace.length; i++) {\n        if (\"org.apache.lucene.index.TermVectorsTermsWriter\".equals(trace[i].getClassName()) && stage.equals(trace[i].getMethodName()))\n          failOnInit = true;\n        if (\"org.apache.lucene.index.TermVectorsTermsWriter\".equals(trace[i].getClassName()) && stage.equals(trace[i].getMethodName()))\n          failOnfinish = true;\n      }\n      \n      if (failOnInit) {\n        throw new RuntimeException(EXC_MSG + \" fail on init\");\n      } else if (failOnfinish) {\n        throw new RuntimeException(EXC_MSG + \" fail on finishDoc\");\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions.FailOnTermVectors#eval(MockDirectoryWrapper).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public void eval(MockDirectoryWrapper dir)  throws IOException {\n      StackTraceElement[] trace = new Exception().getStackTrace();\n      boolean failOnInit = false;\n      boolean failOnfinish = false;\n      for (int i = 0; i < trace.length; i++) {\n        if (\"org.apache.lucene.index.TermVectorsTermsWriter\".equals(trace[i].getClassName()) && stage.equals(trace[i].getMethodName()))\n          failOnInit = true;\n        if (\"org.apache.lucene.index.TermVectorsTermsWriter\".equals(trace[i].getClassName()) && stage.equals(trace[i].getMethodName()))\n          failOnfinish = true;\n      }\n      \n      if (failOnInit) {\n        throw new RuntimeException(EXC_MSG + \" fail on init\");\n      } else if (failOnfinish) {\n        throw new RuntimeException(EXC_MSG + \" fail on finishDoc\");\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc749c053615f5871f3b95715fe292f34e70a53","date":1321470575,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions.FailOnTermVectors#eval(MockDirectoryWrapper).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions.FailOnTermVectors#eval(MockDirectoryWrapper).mjava","sourceNew":"    @Override\n    public void eval(MockDirectoryWrapper dir)  throws IOException {\n\n      StackTraceElement[] trace = new Exception().getStackTrace();\n      boolean fail = false;\n      for (int i = 0; i < trace.length; i++) {\n        if (TermVectorsConsumer.class.getName().equals(trace[i].getClassName()) && stage.equals(trace[i].getMethodName())) {\n          fail = true;\n        }\n      }\n      \n      if (fail) {\n        throw new RuntimeException(EXC_MSG);\n      }\n    }\n\n","sourceOld":"    @Override\n    public void eval(MockDirectoryWrapper dir)  throws IOException {\n      StackTraceElement[] trace = new Exception().getStackTrace();\n      boolean failOnInit = false;\n      boolean failOnfinish = false;\n      for (int i = 0; i < trace.length; i++) {\n        if (\"org.apache.lucene.index.TermVectorsTermsWriter\".equals(trace[i].getClassName()) && stage.equals(trace[i].getMethodName()))\n          failOnInit = true;\n        if (\"org.apache.lucene.index.TermVectorsTermsWriter\".equals(trace[i].getClassName()) && stage.equals(trace[i].getMethodName()))\n          failOnfinish = true;\n      }\n      \n      if (failOnInit) {\n        throw new RuntimeException(EXC_MSG + \" fail on init\");\n      } else if (failOnfinish) {\n        throw new RuntimeException(EXC_MSG + \" fail on finishDoc\");\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions.FailOnTermVectors#eval(MockDirectoryWrapper).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions.FailOnTermVectors#eval(MockDirectoryWrapper).mjava","sourceNew":"    @Override\n    public void eval(MockDirectoryWrapper dir)  throws IOException {\n\n      StackTraceElement[] trace = new Exception().getStackTrace();\n      boolean fail = false;\n      for (int i = 0; i < trace.length; i++) {\n        if (TermVectorsConsumer.class.getName().equals(trace[i].getClassName()) && stage.equals(trace[i].getMethodName())) {\n          fail = true;\n        }\n      }\n      \n      if (fail) {\n        throw new RuntimeException(EXC_MSG);\n      }\n    }\n\n","sourceOld":"    @Override\n    public void eval(MockDirectoryWrapper dir)  throws IOException {\n\n      StackTraceElement[] trace = new Exception().getStackTrace();\n      boolean fail = false;\n      for (int i = 0; i < trace.length; i++) {\n        if (TermVectorsConsumer.class.getName().equals(trace[i].getClassName()) && stage.equals(trace[i].getMethodName())) {\n          fail = true;\n        }\n      }\n      \n      if (fail) {\n        throw new RuntimeException(EXC_MSG);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fe2fc74577855eadfb5eae3153c2fffdaaf791":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["3cc749c053615f5871f3b95715fe292f34e70a53"],"a3776dccca01c11e7046323cfad46a3b4a471233":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d3fe2fc74577855eadfb5eae3153c2fffdaaf791"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cc749c053615f5871f3b95715fe292f34e70a53":["d3fe2fc74577855eadfb5eae3153c2fffdaaf791"],"c700f8d0842d3e52bb2bdfbfdc046a137e836edb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d3fe2fc74577855eadfb5eae3153c2fffdaaf791"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"d3fe2fc74577855eadfb5eae3153c2fffdaaf791":["a3776dccca01c11e7046323cfad46a3b4a471233","3cc749c053615f5871f3b95715fe292f34e70a53","c700f8d0842d3e52bb2bdfbfdc046a137e836edb"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d3fe2fc74577855eadfb5eae3153c2fffdaaf791","a3776dccca01c11e7046323cfad46a3b4a471233","c700f8d0842d3e52bb2bdfbfdc046a137e836edb"],"3cc749c053615f5871f3b95715fe292f34e70a53":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"c700f8d0842d3e52bb2bdfbfdc046a137e836edb":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a3776dccca01c11e7046323cfad46a3b4a471233","c700f8d0842d3e52bb2bdfbfdc046a137e836edb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}