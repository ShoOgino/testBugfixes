{"path":"src/java/org/apache/lucene/index/DocumentsWriter#setRAMBufferSizeMB(double).mjava","commits":[{"id":"4350b17bd363cd13a95171b8df1ca62ea4c3e71c","date":1183562198,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/DocumentsWriter#setRAMBufferSizeMB(double).mjava","pathOld":"/dev/null","sourceNew":"  /** Set how much RAM we can use before flushing. */\n  void setRAMBufferSizeMB(double mb) {\n    ramBufferSize = (long) (mb*1024*1024);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2558ddf9e14a97bc597f5b72bb3ecb5b7f6bba8e","date":1191352543,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/DocumentsWriter#setRAMBufferSizeMB(double).mjava","pathOld":"src/java/org/apache/lucene/index/DocumentsWriter#setRAMBufferSizeMB(double).mjava","sourceNew":"  /** Set how much RAM we can use before flushing. */\n  void setRAMBufferSizeMB(double mb) {\n    if (mb == IndexWriter.DISABLE_AUTO_FLUSH) {\n      ramBufferSize = IndexWriter.DISABLE_AUTO_FLUSH;\n    } else {\n      ramBufferSize = (long) (mb*1024*1024);\n    }\n  }\n\n","sourceOld":"  /** Set how much RAM we can use before flushing. */\n  void setRAMBufferSizeMB(double mb) {\n    ramBufferSize = (long) (mb*1024*1024);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5350389bf83287111f7760b9e3db3af8e3648474","date":1216372812,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/DocumentsWriter#setRAMBufferSizeMB(double).mjava","pathOld":"src/java/org/apache/lucene/index/DocumentsWriter#setRAMBufferSizeMB(double).mjava","sourceNew":"  /** Set how much RAM we can use before flushing. */\n  synchronized void setRAMBufferSizeMB(double mb) {\n    if (mb == IndexWriter.DISABLE_AUTO_FLUSH) {\n      ramBufferSize = IndexWriter.DISABLE_AUTO_FLUSH;\n      waitQueuePauseBytes = 4*1024*1024;\n      waitQueueResumeBytes = 2*1024*1024;\n    } else {\n      ramBufferSize = (long) (mb*1024*1024);\n      waitQueuePauseBytes = (long) (ramBufferSize*0.1);\n      waitQueueResumeBytes = (long) (ramBufferSize*0.05);\n      freeTrigger = (long) (1.05 * ramBufferSize);\n      freeLevel = (long) (0.95 * ramBufferSize);\n    }\n  }\n\n","sourceOld":"  /** Set how much RAM we can use before flushing. */\n  void setRAMBufferSizeMB(double mb) {\n    if (mb == IndexWriter.DISABLE_AUTO_FLUSH) {\n      ramBufferSize = IndexWriter.DISABLE_AUTO_FLUSH;\n    } else {\n      ramBufferSize = (long) (mb*1024*1024);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/DocumentsWriter#setRAMBufferSizeMB(double).mjava","pathOld":"src/java/org/apache/lucene/index/DocumentsWriter#setRAMBufferSizeMB(double).mjava","sourceNew":"  /** Set how much RAM we can use before flushing. */\n  synchronized void setRAMBufferSizeMB(double mb) {\n    if (mb == IndexWriterConfig.DISABLE_AUTO_FLUSH) {\n      ramBufferSize = IndexWriterConfig.DISABLE_AUTO_FLUSH;\n      waitQueuePauseBytes = 4*1024*1024;\n      waitQueueResumeBytes = 2*1024*1024;\n    } else {\n      ramBufferSize = (long) (mb*1024*1024);\n      waitQueuePauseBytes = (long) (ramBufferSize*0.1);\n      waitQueueResumeBytes = (long) (ramBufferSize*0.05);\n      freeTrigger = (long) (1.05 * ramBufferSize);\n      freeLevel = (long) (0.95 * ramBufferSize);\n    }\n  }\n\n","sourceOld":"  /** Set how much RAM we can use before flushing. */\n  synchronized void setRAMBufferSizeMB(double mb) {\n    if (mb == IndexWriter.DISABLE_AUTO_FLUSH) {\n      ramBufferSize = IndexWriter.DISABLE_AUTO_FLUSH;\n      waitQueuePauseBytes = 4*1024*1024;\n      waitQueueResumeBytes = 2*1024*1024;\n    } else {\n      ramBufferSize = (long) (mb*1024*1024);\n      waitQueuePauseBytes = (long) (ramBufferSize*0.1);\n      waitQueueResumeBytes = (long) (ramBufferSize*0.05);\n      freeTrigger = (long) (1.05 * ramBufferSize);\n      freeLevel = (long) (0.95 * ramBufferSize);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/DocumentsWriter#setRAMBufferSizeMB(double).mjava","pathOld":"src/java/org/apache/lucene/index/DocumentsWriter#setRAMBufferSizeMB(double).mjava","sourceNew":"  /** Set how much RAM we can use before flushing. */\n  synchronized void setRAMBufferSizeMB(double mb) {\n    if (mb == IndexWriter.DISABLE_AUTO_FLUSH) {\n      ramBufferSize = IndexWriter.DISABLE_AUTO_FLUSH;\n      waitQueuePauseBytes = 4*1024*1024;\n      waitQueueResumeBytes = 2*1024*1024;\n    } else {\n      ramBufferSize = (long) (mb*1024*1024);\n      waitQueuePauseBytes = (long) (ramBufferSize*0.1);\n      waitQueueResumeBytes = (long) (ramBufferSize*0.05);\n      freeTrigger = (long) (1.05 * ramBufferSize);\n      freeLevel = (long) (0.95 * ramBufferSize);\n    }\n  }\n\n","sourceOld":"  /** Set how much RAM we can use before flushing. */\n  synchronized void setRAMBufferSizeMB(double mb) {\n    if (mb == IndexWriterConfig.DISABLE_AUTO_FLUSH) {\n      ramBufferSize = IndexWriterConfig.DISABLE_AUTO_FLUSH;\n      waitQueuePauseBytes = 4*1024*1024;\n      waitQueueResumeBytes = 2*1024*1024;\n    } else {\n      ramBufferSize = (long) (mb*1024*1024);\n      waitQueuePauseBytes = (long) (ramBufferSize*0.1);\n      waitQueueResumeBytes = (long) (ramBufferSize*0.05);\n      freeTrigger = (long) (1.05 * ramBufferSize);\n      freeLevel = (long) (0.95 * ramBufferSize);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/DocumentsWriter#setRAMBufferSizeMB(double).mjava","pathOld":"src/java/org/apache/lucene/index/DocumentsWriter#setRAMBufferSizeMB(double).mjava","sourceNew":"  /** Set how much RAM we can use before flushing. */\n  synchronized void setRAMBufferSizeMB(double mb) {\n    if (mb == IndexWriterConfig.DISABLE_AUTO_FLUSH) {\n      ramBufferSize = IndexWriterConfig.DISABLE_AUTO_FLUSH;\n      waitQueuePauseBytes = 4*1024*1024;\n      waitQueueResumeBytes = 2*1024*1024;\n    } else {\n      ramBufferSize = (long) (mb*1024*1024);\n      waitQueuePauseBytes = (long) (ramBufferSize*0.1);\n      waitQueueResumeBytes = (long) (ramBufferSize*0.05);\n      freeTrigger = (long) (1.05 * ramBufferSize);\n      freeLevel = (long) (0.95 * ramBufferSize);\n    }\n  }\n\n","sourceOld":"  /** Set how much RAM we can use before flushing. */\n  synchronized void setRAMBufferSizeMB(double mb) {\n    if (mb == IndexWriter.DISABLE_AUTO_FLUSH) {\n      ramBufferSize = IndexWriter.DISABLE_AUTO_FLUSH;\n      waitQueuePauseBytes = 4*1024*1024;\n      waitQueueResumeBytes = 2*1024*1024;\n    } else {\n      ramBufferSize = (long) (mb*1024*1024);\n      waitQueuePauseBytes = (long) (ramBufferSize*0.1);\n      waitQueueResumeBytes = (long) (ramBufferSize*0.05);\n      freeTrigger = (long) (1.05 * ramBufferSize);\n      freeLevel = (long) (0.95 * ramBufferSize);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#setRAMBufferSizeMB(double).mjava","pathOld":"src/java/org/apache/lucene/index/DocumentsWriter#setRAMBufferSizeMB(double).mjava","sourceNew":"  /** Set how much RAM we can use before flushing. */\n  synchronized void setRAMBufferSizeMB(double mb) {\n    if (mb == IndexWriterConfig.DISABLE_AUTO_FLUSH) {\n      ramBufferSize = IndexWriterConfig.DISABLE_AUTO_FLUSH;\n      waitQueuePauseBytes = 4*1024*1024;\n      waitQueueResumeBytes = 2*1024*1024;\n    } else {\n      ramBufferSize = (long) (mb*1024*1024);\n      waitQueuePauseBytes = (long) (ramBufferSize*0.1);\n      waitQueueResumeBytes = (long) (ramBufferSize*0.05);\n      freeTrigger = (long) (1.05 * ramBufferSize);\n      freeLevel = (long) (0.95 * ramBufferSize);\n    }\n  }\n\n","sourceOld":"  /** Set how much RAM we can use before flushing. */\n  synchronized void setRAMBufferSizeMB(double mb) {\n    if (mb == IndexWriterConfig.DISABLE_AUTO_FLUSH) {\n      ramBufferSize = IndexWriterConfig.DISABLE_AUTO_FLUSH;\n      waitQueuePauseBytes = 4*1024*1024;\n      waitQueueResumeBytes = 2*1024*1024;\n    } else {\n      ramBufferSize = (long) (mb*1024*1024);\n      waitQueuePauseBytes = (long) (ramBufferSize*0.1);\n      waitQueueResumeBytes = (long) (ramBufferSize*0.05);\n      freeTrigger = (long) (1.05 * ramBufferSize);\n      freeLevel = (long) (0.95 * ramBufferSize);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1cedb00d2dd44640194401179358a2e3ba6051bf":["5350389bf83287111f7760b9e3db3af8e3648474"],"2558ddf9e14a97bc597f5b72bb3ecb5b7f6bba8e":["4350b17bd363cd13a95171b8df1ca62ea4c3e71c"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"5350389bf83287111f7760b9e3db3af8e3648474":["2558ddf9e14a97bc597f5b72bb3ecb5b7f6bba8e"],"4350b17bd363cd13a95171b8df1ca62ea4c3e71c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"]},"commit2Childs":{"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4350b17bd363cd13a95171b8df1ca62ea4c3e71c"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"2558ddf9e14a97bc597f5b72bb3ecb5b7f6bba8e":["5350389bf83287111f7760b9e3db3af8e3648474"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"5350389bf83287111f7760b9e3db3af8e3648474":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"4350b17bd363cd13a95171b8df1ca62ea4c3e71c":["2558ddf9e14a97bc597f5b72bb3ecb5b7f6bba8e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}