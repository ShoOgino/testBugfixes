{"path":"lucene/sandbox/src/java/org/apache/lucene/document/FloatPointNearestNeighbor.NearestVisitor#compare(byte[],byte[]).mjava","commits":[{"id":"1b73cddaec09172a09da82e758d0014ab8810ffa","date":1506898255,"type":0,"author":"Steve Rowe","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/FloatPointNearestNeighbor.NearestVisitor#compare(byte[],byte[]).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public PointValues.Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n      throw new AssertionError();\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6240b74b884c5587f2a4062dd27d6c32bf228889","date":1507037235,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/FloatPointNearestNeighbor.NearestVisitor#compare(byte[],byte[]).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public PointValues.Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n      throw new AssertionError();\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d774afea15a18cc375fae2ffaa8319935d0a7b2a","date":1536414150,"type":3,"author":"iverase","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/FloatPointNearestNeighbor.NearestVisitor#compare(byte[],byte[]).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/FloatPointNearestNeighbor.NearestVisitor#compare(byte[],byte[]).mjava","sourceNew":"    @Override\n    public PointValues.Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n      return PointValues.Relation.CELL_CROSSES_QUERY;\n    }\n\n","sourceOld":"    @Override\n    public PointValues.Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n      throw new AssertionError();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c02a05a5f298f87e1dbbb280827b9d165b796f55","date":1563365657,"type":3,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/FloatPointNearestNeighbor.NearestVisitor#compare(byte[],byte[]).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/FloatPointNearestNeighbor.NearestVisitor#compare(byte[],byte[]).mjava","sourceNew":"    @Override\n    public PointValues.Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n      for (int d = 0, offset = 0; d < dims; ++d, offset += Float.BYTES) {\n        float cellMaxAtDim = FloatPoint.decodeDimension(maxPackedValue, offset);\n        if (cellMaxAtDim < min[d]) {\n          // System.out.println(\"  skipped because cell max at \" + d + \" (\" + cellMaxAtDim + \") < visitor.min[\" + d + \"] (\" + min[d] + \")\");\n          return PointValues.Relation.CELL_OUTSIDE_QUERY;\n        }\n        float cellMinAtDim = FloatPoint.decodeDimension(minPackedValue, offset);\n        if (cellMinAtDim > max[d]) {\n          // System.out.println(\"  skipped because cell min at \" + d + \" (\" + cellMinAtDim + \") > visitor.max[\" + d + \"] (\" + max[d] + \")\");\n          return PointValues.Relation.CELL_OUTSIDE_QUERY;\n        }\n      }\n      return PointValues.Relation.CELL_CROSSES_QUERY;\n    }\n\n","sourceOld":"    @Override\n    public PointValues.Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n      return PointValues.Relation.CELL_CROSSES_QUERY;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"097748fa4ff327a26994476115f52d1a899b549f","date":1568267320,"type":3,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/FloatPointNearestNeighbor.NearestVisitor#compare(byte[],byte[]).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/FloatPointNearestNeighbor.NearestVisitor#compare(byte[],byte[]).mjava","sourceNew":"    @Override\n    public PointValues.Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n      if (hitQueue.size() == topN && pointToRectangleDistanceSquared(minPackedValue, maxPackedValue, origin) > bottomNearestDistanceSquared) {\n        return PointValues.Relation.CELL_OUTSIDE_QUERY;\n      }\n      return PointValues.Relation.CELL_CROSSES_QUERY;\n    }\n\n","sourceOld":"    @Override\n    public PointValues.Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n      for (int d = 0, offset = 0; d < dims; ++d, offset += Float.BYTES) {\n        float cellMaxAtDim = FloatPoint.decodeDimension(maxPackedValue, offset);\n        if (cellMaxAtDim < min[d]) {\n          // System.out.println(\"  skipped because cell max at \" + d + \" (\" + cellMaxAtDim + \") < visitor.min[\" + d + \"] (\" + min[d] + \")\");\n          return PointValues.Relation.CELL_OUTSIDE_QUERY;\n        }\n        float cellMinAtDim = FloatPoint.decodeDimension(minPackedValue, offset);\n        if (cellMinAtDim > max[d]) {\n          // System.out.println(\"  skipped because cell min at \" + d + \" (\" + cellMinAtDim + \") > visitor.max[\" + d + \"] (\" + max[d] + \")\");\n          return PointValues.Relation.CELL_OUTSIDE_QUERY;\n        }\n      }\n      return PointValues.Relation.CELL_CROSSES_QUERY;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1b73cddaec09172a09da82e758d0014ab8810ffa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6240b74b884c5587f2a4062dd27d6c32bf228889":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1b73cddaec09172a09da82e758d0014ab8810ffa"],"097748fa4ff327a26994476115f52d1a899b549f":["c02a05a5f298f87e1dbbb280827b9d165b796f55"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d774afea15a18cc375fae2ffaa8319935d0a7b2a":["1b73cddaec09172a09da82e758d0014ab8810ffa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["097748fa4ff327a26994476115f52d1a899b549f"],"c02a05a5f298f87e1dbbb280827b9d165b796f55":["d774afea15a18cc375fae2ffaa8319935d0a7b2a"]},"commit2Childs":{"1b73cddaec09172a09da82e758d0014ab8810ffa":["6240b74b884c5587f2a4062dd27d6c32bf228889","d774afea15a18cc375fae2ffaa8319935d0a7b2a"],"6240b74b884c5587f2a4062dd27d6c32bf228889":[],"097748fa4ff327a26994476115f52d1a899b549f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1b73cddaec09172a09da82e758d0014ab8810ffa","6240b74b884c5587f2a4062dd27d6c32bf228889"],"d774afea15a18cc375fae2ffaa8319935d0a7b2a":["c02a05a5f298f87e1dbbb280827b9d165b796f55"],"c02a05a5f298f87e1dbbb280827b9d165b796f55":["097748fa4ff327a26994476115f52d1a899b549f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["6240b74b884c5587f2a4062dd27d6c32bf228889","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}