{"path":"solr/core/src/java/org/apache/solr/servlet/cache/HttpCacheHeaderUtil#calcLastModified(SolrQueryRequest).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/cache/HttpCacheHeaderUtil#calcLastModified(SolrQueryRequest).mjava","pathOld":"solr/src/webapp/src/org/apache/solr/servlet/cache/HttpCacheHeaderUtil#calcLastModified(SolrQueryRequest).mjava","sourceNew":"  /**\n   * Calculate the appropriate last-modified time for Solr relative the current request.\n   * \n   * @param solrReq\n   * @return the timestamp to use as a last modified time.\n   */\n  public static long calcLastModified(final SolrQueryRequest solrReq) {\n    final SolrCore core = solrReq.getCore();\n    final SolrIndexSearcher searcher = solrReq.getSearcher();\n    \n    final LastModFrom lastModFrom\n      = core.getSolrConfig().getHttpCachingConfig().getLastModFrom();\n\n    long lastMod;\n    try {\n      // assume default, change if needed (getOpenTime() should be fast)\n      lastMod =\n        LastModFrom.DIRLASTMOD == lastModFrom\n        ? IndexReader.lastModified(searcher.getIndexReader().directory())\n        : searcher.getOpenTime();\n    } catch (IOException e) {\n      // we're pretty freaking screwed if this happens\n      throw new SolrException(ErrorCode.SERVER_ERROR, e);\n    }\n    // Get the time where the searcher has been opened\n    // We get rid of the milliseconds because the HTTP header has only\n    // second granularity\n    return lastMod - (lastMod % 1000L);\n  }\n\n","sourceOld":"  /**\n   * Calculate the appropriate last-modified time for Solr relative the current request.\n   * \n   * @param solrReq\n   * @return the timestamp to use as a last modified time.\n   */\n  public static long calcLastModified(final SolrQueryRequest solrReq) {\n    final SolrCore core = solrReq.getCore();\n    final SolrIndexSearcher searcher = solrReq.getSearcher();\n    \n    final LastModFrom lastModFrom\n      = core.getSolrConfig().getHttpCachingConfig().getLastModFrom();\n\n    long lastMod;\n    try {\n      // assume default, change if needed (getOpenTime() should be fast)\n      lastMod =\n        LastModFrom.DIRLASTMOD == lastModFrom\n        ? IndexReader.lastModified(searcher.getIndexReader().directory())\n        : searcher.getOpenTime();\n    } catch (IOException e) {\n      // we're pretty freaking screwed if this happens\n      throw new SolrException(ErrorCode.SERVER_ERROR, e);\n    }\n    // Get the time where the searcher has been opened\n    // We get rid of the milliseconds because the HTTP header has only\n    // second granularity\n    return lastMod - (lastMod % 1000L);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/cache/HttpCacheHeaderUtil#calcLastModified(SolrQueryRequest).mjava","pathOld":"solr/src/webapp/src/org/apache/solr/servlet/cache/HttpCacheHeaderUtil#calcLastModified(SolrQueryRequest).mjava","sourceNew":"  /**\n   * Calculate the appropriate last-modified time for Solr relative the current request.\n   * \n   * @param solrReq\n   * @return the timestamp to use as a last modified time.\n   */\n  public static long calcLastModified(final SolrQueryRequest solrReq) {\n    final SolrCore core = solrReq.getCore();\n    final SolrIndexSearcher searcher = solrReq.getSearcher();\n    \n    final LastModFrom lastModFrom\n      = core.getSolrConfig().getHttpCachingConfig().getLastModFrom();\n\n    long lastMod;\n    try {\n      // assume default, change if needed (getOpenTime() should be fast)\n      lastMod =\n        LastModFrom.DIRLASTMOD == lastModFrom\n        ? IndexReader.lastModified(searcher.getIndexReader().directory())\n        : searcher.getOpenTime();\n    } catch (IOException e) {\n      // we're pretty freaking screwed if this happens\n      throw new SolrException(ErrorCode.SERVER_ERROR, e);\n    }\n    // Get the time where the searcher has been opened\n    // We get rid of the milliseconds because the HTTP header has only\n    // second granularity\n    return lastMod - (lastMod % 1000L);\n  }\n\n","sourceOld":"  /**\n   * Calculate the appropriate last-modified time for Solr relative the current request.\n   * \n   * @param solrReq\n   * @return the timestamp to use as a last modified time.\n   */\n  public static long calcLastModified(final SolrQueryRequest solrReq) {\n    final SolrCore core = solrReq.getCore();\n    final SolrIndexSearcher searcher = solrReq.getSearcher();\n    \n    final LastModFrom lastModFrom\n      = core.getSolrConfig().getHttpCachingConfig().getLastModFrom();\n\n    long lastMod;\n    try {\n      // assume default, change if needed (getOpenTime() should be fast)\n      lastMod =\n        LastModFrom.DIRLASTMOD == lastModFrom\n        ? IndexReader.lastModified(searcher.getIndexReader().directory())\n        : searcher.getOpenTime();\n    } catch (IOException e) {\n      // we're pretty freaking screwed if this happens\n      throw new SolrException(ErrorCode.SERVER_ERROR, e);\n    }\n    // Get the time where the searcher has been opened\n    // We get rid of the milliseconds because the HTTP header has only\n    // second granularity\n    return lastMod - (lastMod % 1000L);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/servlet/cache/HttpCacheHeaderUtil#calcLastModified(SolrQueryRequest).mjava","pathOld":"solr/src/webapp/src/org/apache/solr/servlet/cache/HttpCacheHeaderUtil#calcLastModified(SolrQueryRequest).mjava","sourceNew":"  /**\n   * Calculate the appropriate last-modified time for Solr relative the current request.\n   * \n   * @param solrReq\n   * @return the timestamp to use as a last modified time.\n   */\n  public static long calcLastModified(final SolrQueryRequest solrReq) {\n    final SolrCore core = solrReq.getCore();\n    final SolrIndexSearcher searcher = solrReq.getSearcher();\n    \n    final LastModFrom lastModFrom\n      = core.getSolrConfig().getHttpCachingConfig().getLastModFrom();\n\n    long lastMod;\n    try {\n      // assume default, change if needed (getOpenTime() should be fast)\n      lastMod =\n        LastModFrom.DIRLASTMOD == lastModFrom\n        ? IndexReader.lastModified(searcher.getIndexReader().directory())\n        : searcher.getOpenTime();\n    } catch (IOException e) {\n      // we're pretty freaking screwed if this happens\n      throw new SolrException(ErrorCode.SERVER_ERROR, e);\n    }\n    // Get the time where the searcher has been opened\n    // We get rid of the milliseconds because the HTTP header has only\n    // second granularity\n    return lastMod - (lastMod % 1000L);\n  }\n\n","sourceOld":"  /**\n   * Calculate the appropriate last-modified time for Solr relative the current request.\n   * \n   * @param solrReq\n   * @return the timestamp to use as a last modified time.\n   */\n  public static long calcLastModified(final SolrQueryRequest solrReq) {\n    final SolrCore core = solrReq.getCore();\n    final SolrIndexSearcher searcher = solrReq.getSearcher();\n    \n    final LastModFrom lastModFrom\n      = core.getSolrConfig().getHttpCachingConfig().getLastModFrom();\n\n    long lastMod;\n    try {\n      // assume default, change if needed (getOpenTime() should be fast)\n      lastMod =\n        LastModFrom.DIRLASTMOD == lastModFrom\n        ? IndexReader.lastModified(searcher.getIndexReader().directory())\n        : searcher.getOpenTime();\n    } catch (IOException e) {\n      // we're pretty freaking screwed if this happens\n      throw new SolrException(ErrorCode.SERVER_ERROR, e);\n    }\n    // Get the time where the searcher has been opened\n    // We get rid of the milliseconds because the HTTP header has only\n    // second granularity\n    return lastMod - (lastMod % 1000L);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c01638f4dd94981c1d3d52c4f7991246a5a24aba","date":1327876712,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/cache/HttpCacheHeaderUtil#calcLastModified(SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/cache/HttpCacheHeaderUtil#calcLastModified(SolrQueryRequest).mjava","sourceNew":"  /**\n   * Calculate the appropriate last-modified time for Solr relative the current request.\n   * \n   * @param solrReq\n   * @return the timestamp to use as a last modified time.\n   */\n  public static long calcLastModified(final SolrQueryRequest solrReq) {\n    final SolrCore core = solrReq.getCore();\n    final SolrIndexSearcher searcher = solrReq.getSearcher();\n    \n    final LastModFrom lastModFrom\n      = core.getSolrConfig().getHttpCachingConfig().getLastModFrom();\n\n    long lastMod;\n    try {\n      // assume default, change if needed (getOpenTime() should be fast)\n      lastMod =\n        LastModFrom.DIRLASTMOD == lastModFrom\n        ? IndexDeletionPolicyWrapper.getCommitTimestamp(searcher.getIndexReader().getIndexCommit())\n        : searcher.getOpenTime();\n    } catch (IOException e) {\n      // we're pretty freaking screwed if this happens\n      throw new SolrException(ErrorCode.SERVER_ERROR, e);\n    }\n    // Get the time where the searcher has been opened\n    // We get rid of the milliseconds because the HTTP header has only\n    // second granularity\n    return lastMod - (lastMod % 1000L);\n  }\n\n","sourceOld":"  /**\n   * Calculate the appropriate last-modified time for Solr relative the current request.\n   * \n   * @param solrReq\n   * @return the timestamp to use as a last modified time.\n   */\n  public static long calcLastModified(final SolrQueryRequest solrReq) {\n    final SolrCore core = solrReq.getCore();\n    final SolrIndexSearcher searcher = solrReq.getSearcher();\n    \n    final LastModFrom lastModFrom\n      = core.getSolrConfig().getHttpCachingConfig().getLastModFrom();\n\n    long lastMod;\n    try {\n      // assume default, change if needed (getOpenTime() should be fast)\n      lastMod =\n        LastModFrom.DIRLASTMOD == lastModFrom\n        ? IndexReader.lastModified(searcher.getIndexReader().directory())\n        : searcher.getOpenTime();\n    } catch (IOException e) {\n      // we're pretty freaking screwed if this happens\n      throw new SolrException(ErrorCode.SERVER_ERROR, e);\n    }\n    // Get the time where the searcher has been opened\n    // We get rid of the milliseconds because the HTTP header has only\n    // second granularity\n    return lastMod - (lastMod % 1000L);\n  }\n\n","bugFix":["c220849f876de24a79f756f65b3eb045db59f63f"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817882884229bace7dc5d1b75f6b0e4aa1e47122","date":1327879145,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/servlet/cache/HttpCacheHeaderUtil#calcLastModified(SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/cache/HttpCacheHeaderUtil#calcLastModified(SolrQueryRequest).mjava","sourceNew":"  /**\n   * Calculate the appropriate last-modified time for Solr relative the current request.\n   * \n   * @param solrReq\n   * @return the timestamp to use as a last modified time.\n   */\n  public static long calcLastModified(final SolrQueryRequest solrReq) {\n    final SolrCore core = solrReq.getCore();\n    final SolrIndexSearcher searcher = solrReq.getSearcher();\n    \n    final LastModFrom lastModFrom\n      = core.getSolrConfig().getHttpCachingConfig().getLastModFrom();\n\n    long lastMod;\n    try {\n      // assume default, change if needed (getOpenTime() should be fast)\n      lastMod =\n        LastModFrom.DIRLASTMOD == lastModFrom\n        ? IndexDeletionPolicyWrapper.getCommitTimestamp(searcher.getIndexReader().getIndexCommit())\n        : searcher.getOpenTime();\n    } catch (IOException e) {\n      // we're pretty freaking screwed if this happens\n      throw new SolrException(ErrorCode.SERVER_ERROR, e);\n    }\n    // Get the time where the searcher has been opened\n    // We get rid of the milliseconds because the HTTP header has only\n    // second granularity\n    return lastMod - (lastMod % 1000L);\n  }\n\n","sourceOld":"  /**\n   * Calculate the appropriate last-modified time for Solr relative the current request.\n   * \n   * @param solrReq\n   * @return the timestamp to use as a last modified time.\n   */\n  public static long calcLastModified(final SolrQueryRequest solrReq) {\n    final SolrCore core = solrReq.getCore();\n    final SolrIndexSearcher searcher = solrReq.getSearcher();\n    \n    final LastModFrom lastModFrom\n      = core.getSolrConfig().getHttpCachingConfig().getLastModFrom();\n\n    long lastMod;\n    try {\n      // assume default, change if needed (getOpenTime() should be fast)\n      lastMod =\n        LastModFrom.DIRLASTMOD == lastModFrom\n        ? IndexReader.lastModified(searcher.getIndexReader().directory())\n        : searcher.getOpenTime();\n    } catch (IOException e) {\n      // we're pretty freaking screwed if this happens\n      throw new SolrException(ErrorCode.SERVER_ERROR, e);\n    }\n    // Get the time where the searcher has been opened\n    // We get rid of the milliseconds because the HTTP header has only\n    // second granularity\n    return lastMod - (lastMod % 1000L);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5b6fdfce35d0adb18836cf8711abe487a934df33","date":1327946200,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/servlet/cache/HttpCacheHeaderUtil#calcLastModified(SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/cache/HttpCacheHeaderUtil#calcLastModified(SolrQueryRequest).mjava","sourceNew":"  /**\n   * Calculate the appropriate last-modified time for Solr relative the current request.\n   * \n   * @param solrReq\n   * @return the timestamp to use as a last modified time.\n   */\n  public static long calcLastModified(final SolrQueryRequest solrReq) {\n    final SolrCore core = solrReq.getCore();\n    final SolrIndexSearcher searcher = solrReq.getSearcher();\n    \n    final LastModFrom lastModFrom\n      = core.getSolrConfig().getHttpCachingConfig().getLastModFrom();\n\n    long lastMod;\n    try {\n      // assume default, change if needed (getOpenTime() should be fast)\n      lastMod =\n        LastModFrom.DIRLASTMOD == lastModFrom\n        ? IndexDeletionPolicyWrapper.getCommitTimestamp(searcher.getIndexReader().getIndexCommit())\n        : searcher.getOpenTime();\n    } catch (IOException e) {\n      // we're pretty freaking screwed if this happens\n      throw new SolrException(ErrorCode.SERVER_ERROR, e);\n    }\n    // Get the time where the searcher has been opened\n    // We get rid of the milliseconds because the HTTP header has only\n    // second granularity\n    return lastMod - (lastMod % 1000L);\n  }\n\n","sourceOld":"  /**\n   * Calculate the appropriate last-modified time for Solr relative the current request.\n   * \n   * @param solrReq\n   * @return the timestamp to use as a last modified time.\n   */\n  public static long calcLastModified(final SolrQueryRequest solrReq) {\n    final SolrCore core = solrReq.getCore();\n    final SolrIndexSearcher searcher = solrReq.getSearcher();\n    \n    final LastModFrom lastModFrom\n      = core.getSolrConfig().getHttpCachingConfig().getLastModFrom();\n\n    long lastMod;\n    try {\n      // assume default, change if needed (getOpenTime() should be fast)\n      lastMod =\n        LastModFrom.DIRLASTMOD == lastModFrom\n        ? IndexReader.lastModified(searcher.getIndexReader().directory())\n        : searcher.getOpenTime();\n    } catch (IOException e) {\n      // we're pretty freaking screwed if this happens\n      throw new SolrException(ErrorCode.SERVER_ERROR, e);\n    }\n    // Get the time where the searcher has been opened\n    // We get rid of the milliseconds because the HTTP header has only\n    // second granularity\n    return lastMod - (lastMod % 1000L);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","date":1348430063,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/cache/HttpCacheHeaderUtil#calcLastModified(SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/cache/HttpCacheHeaderUtil#calcLastModified(SolrQueryRequest).mjava","sourceNew":"  /**\n   * Calculate the appropriate last-modified time for Solr relative the current request.\n   * \n   * @return the timestamp to use as a last modified time.\n   */\n  public static long calcLastModified(final SolrQueryRequest solrReq) {\n    final SolrCore core = solrReq.getCore();\n    final SolrIndexSearcher searcher = solrReq.getSearcher();\n    \n    final LastModFrom lastModFrom\n      = core.getSolrConfig().getHttpCachingConfig().getLastModFrom();\n\n    long lastMod;\n    try {\n      // assume default, change if needed (getOpenTime() should be fast)\n      lastMod =\n        LastModFrom.DIRLASTMOD == lastModFrom\n        ? IndexDeletionPolicyWrapper.getCommitTimestamp(searcher.getIndexReader().getIndexCommit())\n        : searcher.getOpenTime();\n    } catch (IOException e) {\n      // we're pretty freaking screwed if this happens\n      throw new SolrException(ErrorCode.SERVER_ERROR, e);\n    }\n    // Get the time where the searcher has been opened\n    // We get rid of the milliseconds because the HTTP header has only\n    // second granularity\n    return lastMod - (lastMod % 1000L);\n  }\n\n","sourceOld":"  /**\n   * Calculate the appropriate last-modified time for Solr relative the current request.\n   * \n   * @param solrReq\n   * @return the timestamp to use as a last modified time.\n   */\n  public static long calcLastModified(final SolrQueryRequest solrReq) {\n    final SolrCore core = solrReq.getCore();\n    final SolrIndexSearcher searcher = solrReq.getSearcher();\n    \n    final LastModFrom lastModFrom\n      = core.getSolrConfig().getHttpCachingConfig().getLastModFrom();\n\n    long lastMod;\n    try {\n      // assume default, change if needed (getOpenTime() should be fast)\n      lastMod =\n        LastModFrom.DIRLASTMOD == lastModFrom\n        ? IndexDeletionPolicyWrapper.getCommitTimestamp(searcher.getIndexReader().getIndexCommit())\n        : searcher.getOpenTime();\n    } catch (IOException e) {\n      // we're pretty freaking screwed if this happens\n      throw new SolrException(ErrorCode.SERVER_ERROR, e);\n    }\n    // Get the time where the searcher has been opened\n    // We get rid of the milliseconds because the HTTP header has only\n    // second granularity\n    return lastMod - (lastMod % 1000L);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bcf9886c8ff537aafde14de48ebf744f5673f08b","date":1439041198,"type":3,"author":"Ramkumar Aiyengar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/cache/HttpCacheHeaderUtil#calcLastModified(SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/cache/HttpCacheHeaderUtil#calcLastModified(SolrQueryRequest).mjava","sourceNew":"  /**\n   * Calculate the appropriate last-modified time for Solr relative the current request.\n   * \n   * @return the timestamp to use as a last modified time.\n   */\n  public static long calcLastModified(final SolrQueryRequest solrReq) {\n    final SolrCore core = solrReq.getCore();\n    final SolrIndexSearcher searcher = solrReq.getSearcher();\n    \n    final LastModFrom lastModFrom\n      = core.getSolrConfig().getHttpCachingConfig().getLastModFrom();\n\n    long lastMod;\n    try {\n      // assume default, change if needed (getOpenTime() should be fast)\n      lastMod =\n        LastModFrom.DIRLASTMOD == lastModFrom\n        ? IndexDeletionPolicyWrapper.getCommitTimestamp(searcher.getIndexReader().getIndexCommit())\n        : searcher.getOpenTimeStamp().getTime();\n    } catch (IOException e) {\n      // we're pretty freaking screwed if this happens\n      throw new SolrException(ErrorCode.SERVER_ERROR, e);\n    }\n    // Get the time where the searcher has been opened\n    // We get rid of the milliseconds because the HTTP header has only\n    // second granularity\n    return lastMod - (lastMod % 1000L);\n  }\n\n","sourceOld":"  /**\n   * Calculate the appropriate last-modified time for Solr relative the current request.\n   * \n   * @return the timestamp to use as a last modified time.\n   */\n  public static long calcLastModified(final SolrQueryRequest solrReq) {\n    final SolrCore core = solrReq.getCore();\n    final SolrIndexSearcher searcher = solrReq.getSearcher();\n    \n    final LastModFrom lastModFrom\n      = core.getSolrConfig().getHttpCachingConfig().getLastModFrom();\n\n    long lastMod;\n    try {\n      // assume default, change if needed (getOpenTime() should be fast)\n      lastMod =\n        LastModFrom.DIRLASTMOD == lastModFrom\n        ? IndexDeletionPolicyWrapper.getCommitTimestamp(searcher.getIndexReader().getIndexCommit())\n        : searcher.getOpenTime();\n    } catch (IOException e) {\n      // we're pretty freaking screwed if this happens\n      throw new SolrException(ErrorCode.SERVER_ERROR, e);\n    }\n    // Get the time where the searcher has been opened\n    // We get rid of the milliseconds because the HTTP header has only\n    // second granularity\n    return lastMod - (lastMod % 1000L);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["c01638f4dd94981c1d3d52c4f7991246a5a24aba"],"c01638f4dd94981c1d3d52c4f7991246a5a24aba":["c26f00b574427b55127e869b935845554afde1fa"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"817882884229bace7dc5d1b75f6b0e4aa1e47122":["c26f00b574427b55127e869b935845554afde1fa","c01638f4dd94981c1d3d52c4f7991246a5a24aba"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5b6fdfce35d0adb18836cf8711abe487a934df33":["c26f00b574427b55127e869b935845554afde1fa","c01638f4dd94981c1d3d52c4f7991246a5a24aba"],"bcf9886c8ff537aafde14de48ebf744f5673f08b":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bcf9886c8ff537aafde14de48ebf744f5673f08b"]},"commit2Childs":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["bcf9886c8ff537aafde14de48ebf744f5673f08b"],"c01638f4dd94981c1d3d52c4f7991246a5a24aba":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","817882884229bace7dc5d1b75f6b0e4aa1e47122","5b6fdfce35d0adb18836cf8711abe487a934df33"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"817882884229bace7dc5d1b75f6b0e4aa1e47122":[],"c26f00b574427b55127e869b935845554afde1fa":["c01638f4dd94981c1d3d52c4f7991246a5a24aba","817882884229bace7dc5d1b75f6b0e4aa1e47122","5b6fdfce35d0adb18836cf8711abe487a934df33"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"5b6fdfce35d0adb18836cf8711abe487a934df33":[],"bcf9886c8ff537aafde14de48ebf744f5673f08b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["817882884229bace7dc5d1b75f6b0e4aa1e47122","5b6fdfce35d0adb18836cf8711abe487a934df33","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}