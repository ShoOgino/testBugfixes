{"path":"solr/contrib/dataimporthandler-extras/src/java/org/apache/solr/handler/dataimport/MailEntityProcessor#init(Context).mjava","commits":[{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler-extras/src/java/org/apache/solr/handler/dataimport/MailEntityProcessor#init(Context).mjava","pathOld":"solr/contrib/dataimporthandler-extras/src/main/java/org/apache/solr/handler/dataimport/MailEntityProcessor#init(Context).mjava","sourceNew":"  @Override\n  public void init(Context context) {\n    super.init(context);\n    // set attributes using  XXX getXXXFromContext(attribute, defualtValue);\n    // applies variable resolver and return default if value is not found or null\n    // REQUIRED : connection and folder info\n    user = getStringFromContext(\"user\", null);\n    password = getStringFromContext(\"password\", null);\n    host = getStringFromContext(\"host\", null);\n    protocol = getStringFromContext(\"protocol\", null);\n    folderNames = getStringFromContext(\"folders\", null);\n    // validate\n    if (host == null || protocol == null || user == null || password == null\n            || folderNames == null)\n      throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n              \"'user|password|protocol|host|folders' are required attributes\");\n\n    //OPTIONAL : have defaults and are optional\n    recurse = getBoolFromContext(\"recurse\", true);\n    String excludes = getStringFromContext(\"exclude\", \"\");\n    if (excludes != null && !excludes.trim().equals(\"\")) {\n      exclude = Arrays.asList(excludes.split(\",\"));\n    }\n    String includes = getStringFromContext(\"include\", \"\");\n    if (includes != null && !includes.trim().equals(\"\")) {\n      include = Arrays.asList(includes.split(\",\"));\n    }\n    batchSize = getIntFromContext(\"batchSize\", 20);\n    customFilter = getStringFromContext(\"customFilter\", \"\");\n    String s = getStringFromContext(\"fetchMailsSince\", \"\");\n    if (s != null)\n      try {\n        fetchMailsSince = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").parse(s);\n      } catch (ParseException e) {\n        throw new DataImportHandlerException(DataImportHandlerException.SEVERE, \"Invalid value for fetchMailSince: \" + s, e);\n      }\n\n    fetchSize = getIntFromContext(\"fetchSize\", 32 * 1024);\n    cTimeout = getIntFromContext(\"connectTimeout\", 30 * 1000);\n    rTimeout = getIntFromContext(\"readTimeout\", 60 * 1000);\n    processAttachment = getBoolFromContext(\"processAttachement\", true);\n\n    logConfig();\n  }\n\n","sourceOld":"  @Override\n  public void init(Context context) {\n    super.init(context);\n    // set attributes using  XXX getXXXFromContext(attribute, defualtValue);\n    // applies variable resolver and return default if value is not found or null\n    // REQUIRED : connection and folder info\n    user = getStringFromContext(\"user\", null);\n    password = getStringFromContext(\"password\", null);\n    host = getStringFromContext(\"host\", null);\n    protocol = getStringFromContext(\"protocol\", null);\n    folderNames = getStringFromContext(\"folders\", null);\n    // validate\n    if (host == null || protocol == null || user == null || password == null\n            || folderNames == null)\n      throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n              \"'user|password|protocol|host|folders' are required attributes\");\n\n    //OPTIONAL : have defaults and are optional\n    recurse = getBoolFromContext(\"recurse\", true);\n    String excludes = getStringFromContext(\"exclude\", \"\");\n    if (excludes != null && !excludes.trim().equals(\"\")) {\n      exclude = Arrays.asList(excludes.split(\",\"));\n    }\n    String includes = getStringFromContext(\"include\", \"\");\n    if (includes != null && !includes.trim().equals(\"\")) {\n      include = Arrays.asList(includes.split(\",\"));\n    }\n    batchSize = getIntFromContext(\"batchSize\", 20);\n    customFilter = getStringFromContext(\"customFilter\", \"\");\n    String s = getStringFromContext(\"fetchMailsSince\", \"\");\n    if (s != null)\n      try {\n        fetchMailsSince = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").parse(s);\n      } catch (ParseException e) {\n        throw new DataImportHandlerException(DataImportHandlerException.SEVERE, \"Invalid value for fetchMailSince: \" + s, e);\n      }\n\n    fetchSize = getIntFromContext(\"fetchSize\", 32 * 1024);\n    cTimeout = getIntFromContext(\"connectTimeout\", 30 * 1000);\n    rTimeout = getIntFromContext(\"readTimeout\", 60 * 1000);\n    processAttachment = getBoolFromContext(\"processAttachement\", true);\n\n    logConfig();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ed208afa1e7aa98899ddb1dedfddedddf898253","date":1308079587,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler-extras/src/java/org/apache/solr/handler/dataimport/MailEntityProcessor#init(Context).mjava","pathOld":"solr/contrib/dataimporthandler-extras/src/java/org/apache/solr/handler/dataimport/MailEntityProcessor#init(Context).mjava","sourceNew":"  @Override\n  public void init(Context context) {\n    super.init(context);\n    // set attributes using  XXX getXXXFromContext(attribute, defualtValue);\n    // applies variable resolver and return default if value is not found or null\n    // REQUIRED : connection and folder info\n    user = getStringFromContext(\"user\", null);\n    password = getStringFromContext(\"password\", null);\n    host = getStringFromContext(\"host\", null);\n    protocol = getStringFromContext(\"protocol\", null);\n    folderNames = getStringFromContext(\"folders\", null);\n    // validate\n    if (host == null || protocol == null || user == null || password == null\n            || folderNames == null)\n      throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n              \"'user|password|protocol|host|folders' are required attributes\");\n\n    //OPTIONAL : have defaults and are optional\n    recurse = getBoolFromContext(\"recurse\", true);\n    String excludes = getStringFromContext(\"exclude\", \"\");\n    if (excludes != null && !excludes.trim().equals(\"\")) {\n      exclude = Arrays.asList(excludes.split(\",\"));\n    }\n    String includes = getStringFromContext(\"include\", \"\");\n    if (includes != null && !includes.trim().equals(\"\")) {\n      include = Arrays.asList(includes.split(\",\"));\n    }\n    batchSize = getIntFromContext(\"batchSize\", 20);\n    customFilter = getStringFromContext(\"customFilter\", \"\");\n    String s = getStringFromContext(\"fetchMailsSince\", \"\");\n    if (s != null)\n      try {\n        fetchMailsSince = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").parse(s);\n      } catch (ParseException e) {\n        throw new DataImportHandlerException(DataImportHandlerException.SEVERE, \"Invalid value for fetchMailSince: \" + s, e);\n      }\n\n    fetchSize = getIntFromContext(\"fetchSize\", 32 * 1024);\n    cTimeout = getIntFromContext(\"connectTimeout\", 30 * 1000);\n    rTimeout = getIntFromContext(\"readTimeout\", 60 * 1000);\n    processAttachment = getBoolFromContext(\n              getStringFromContext(\"processAttachment\",null) == null ? \"processAttachement\":\"processAttachment\"\n            , true);\n\n    logConfig();\n  }\n\n","sourceOld":"  @Override\n  public void init(Context context) {\n    super.init(context);\n    // set attributes using  XXX getXXXFromContext(attribute, defualtValue);\n    // applies variable resolver and return default if value is not found or null\n    // REQUIRED : connection and folder info\n    user = getStringFromContext(\"user\", null);\n    password = getStringFromContext(\"password\", null);\n    host = getStringFromContext(\"host\", null);\n    protocol = getStringFromContext(\"protocol\", null);\n    folderNames = getStringFromContext(\"folders\", null);\n    // validate\n    if (host == null || protocol == null || user == null || password == null\n            || folderNames == null)\n      throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n              \"'user|password|protocol|host|folders' are required attributes\");\n\n    //OPTIONAL : have defaults and are optional\n    recurse = getBoolFromContext(\"recurse\", true);\n    String excludes = getStringFromContext(\"exclude\", \"\");\n    if (excludes != null && !excludes.trim().equals(\"\")) {\n      exclude = Arrays.asList(excludes.split(\",\"));\n    }\n    String includes = getStringFromContext(\"include\", \"\");\n    if (includes != null && !includes.trim().equals(\"\")) {\n      include = Arrays.asList(includes.split(\",\"));\n    }\n    batchSize = getIntFromContext(\"batchSize\", 20);\n    customFilter = getStringFromContext(\"customFilter\", \"\");\n    String s = getStringFromContext(\"fetchMailsSince\", \"\");\n    if (s != null)\n      try {\n        fetchMailsSince = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").parse(s);\n      } catch (ParseException e) {\n        throw new DataImportHandlerException(DataImportHandlerException.SEVERE, \"Invalid value for fetchMailSince: \" + s, e);\n      }\n\n    fetchSize = getIntFromContext(\"fetchSize\", 32 * 1024);\n    cTimeout = getIntFromContext(\"connectTimeout\", 30 * 1000);\n    rTimeout = getIntFromContext(\"readTimeout\", 60 * 1000);\n    processAttachment = getBoolFromContext(\"processAttachement\", true);\n\n    logConfig();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler-extras/src/java/org/apache/solr/handler/dataimport/MailEntityProcessor#init(Context).mjava","pathOld":"solr/contrib/dataimporthandler/src/extras/main/java/org/apache/solr/handler/dataimport/MailEntityProcessor#init(Context).mjava","sourceNew":"  @Override\n  public void init(Context context) {\n    super.init(context);\n    // set attributes using  XXX getXXXFromContext(attribute, defualtValue);\n    // applies variable resolver and return default if value is not found or null\n    // REQUIRED : connection and folder info\n    user = getStringFromContext(\"user\", null);\n    password = getStringFromContext(\"password\", null);\n    host = getStringFromContext(\"host\", null);\n    protocol = getStringFromContext(\"protocol\", null);\n    folderNames = getStringFromContext(\"folders\", null);\n    // validate\n    if (host == null || protocol == null || user == null || password == null\n            || folderNames == null)\n      throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n              \"'user|password|protocol|host|folders' are required attributes\");\n\n    //OPTIONAL : have defaults and are optional\n    recurse = getBoolFromContext(\"recurse\", true);\n    String excludes = getStringFromContext(\"exclude\", \"\");\n    if (excludes != null && !excludes.trim().equals(\"\")) {\n      exclude = Arrays.asList(excludes.split(\",\"));\n    }\n    String includes = getStringFromContext(\"include\", \"\");\n    if (includes != null && !includes.trim().equals(\"\")) {\n      include = Arrays.asList(includes.split(\",\"));\n    }\n    batchSize = getIntFromContext(\"batchSize\", 20);\n    customFilter = getStringFromContext(\"customFilter\", \"\");\n    String s = getStringFromContext(\"fetchMailsSince\", \"\");\n    if (s != null)\n      try {\n        fetchMailsSince = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").parse(s);\n      } catch (ParseException e) {\n        throw new DataImportHandlerException(DataImportHandlerException.SEVERE, \"Invalid value for fetchMailSince: \" + s, e);\n      }\n\n    fetchSize = getIntFromContext(\"fetchSize\", 32 * 1024);\n    cTimeout = getIntFromContext(\"connectTimeout\", 30 * 1000);\n    rTimeout = getIntFromContext(\"readTimeout\", 60 * 1000);\n    processAttachment = getBoolFromContext(\n              getStringFromContext(\"processAttachment\",null) == null ? \"processAttachement\":\"processAttachment\"\n            , true);\n\n    logConfig();\n  }\n\n","sourceOld":"  @Override\n  public void init(Context context) {\n    super.init(context);\n    // set attributes using  XXX getXXXFromContext(attribute, defualtValue);\n    // applies variable resolver and return default if value is not found or null\n    // REQUIRED : connection and folder info\n    user = getStringFromContext(\"user\", null);\n    password = getStringFromContext(\"password\", null);\n    host = getStringFromContext(\"host\", null);\n    protocol = getStringFromContext(\"protocol\", null);\n    folderNames = getStringFromContext(\"folders\", null);\n    // validate\n    if (host == null || protocol == null || user == null || password == null\n            || folderNames == null)\n      throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n              \"'user|password|protocol|host|folders' are required attributes\");\n\n    //OPTIONAL : have defaults and are optional\n    recurse = getBoolFromContext(\"recurse\", true);\n    String excludes = getStringFromContext(\"exclude\", \"\");\n    if (excludes != null && !excludes.trim().equals(\"\")) {\n      exclude = Arrays.asList(excludes.split(\",\"));\n    }\n    String includes = getStringFromContext(\"include\", \"\");\n    if (includes != null && !includes.trim().equals(\"\")) {\n      include = Arrays.asList(includes.split(\",\"));\n    }\n    batchSize = getIntFromContext(\"batchSize\", 20);\n    customFilter = getStringFromContext(\"customFilter\", \"\");\n    String s = getStringFromContext(\"fetchMailsSince\", \"\");\n    if (s != null)\n      try {\n        fetchMailsSince = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").parse(s);\n      } catch (ParseException e) {\n        throw new DataImportHandlerException(DataImportHandlerException.SEVERE, \"Invalid value for fetchMailSince: \" + s, e);\n      }\n\n    fetchSize = getIntFromContext(\"fetchSize\", 32 * 1024);\n    cTimeout = getIntFromContext(\"connectTimeout\", 30 * 1000);\n    rTimeout = getIntFromContext(\"readTimeout\", 60 * 1000);\n    processAttachment = getBoolFromContext(\n              getStringFromContext(\"processAttachment\",null) == null ? \"processAttachement\":\"processAttachment\"\n            , true);\n\n    logConfig();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db36cab313d5b26c5e9f23f828d863efc8b0281b","date":1327501086,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/contrib/dataimporthandler-extras/src/java/org/apache/solr/handler/dataimport/MailEntityProcessor#init(Context).mjava","pathOld":"solr/contrib/dataimporthandler-extras/src/java/org/apache/solr/handler/dataimport/MailEntityProcessor#init(Context).mjava","sourceNew":"  @Override\n  public void init(Context context) {\n    super.init(context);\n    // set attributes using  XXX getXXXFromContext(attribute, defualtValue);\n    // applies variable resolver and return default if value is not found or null\n    // REQUIRED : connection and folder info\n    user = getStringFromContext(\"user\", null);\n    password = getStringFromContext(\"password\", null);\n    host = getStringFromContext(\"host\", null);\n    protocol = getStringFromContext(\"protocol\", null);\n    folderNames = getStringFromContext(\"folders\", null);\n    // validate\n    if (host == null || protocol == null || user == null || password == null\n            || folderNames == null)\n      throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n              \"'user|password|protocol|host|folders' are required attributes\");\n\n    //OPTIONAL : have defaults and are optional\n    recurse = getBoolFromContext(\"recurse\", true);\n    String excludes = getStringFromContext(\"exclude\", \"\");\n    if (excludes != null && !excludes.trim().equals(\"\")) {\n      exclude = Arrays.asList(excludes.split(\",\"));\n    }\n    String includes = getStringFromContext(\"include\", \"\");\n    if (includes != null && !includes.trim().equals(\"\")) {\n      include = Arrays.asList(includes.split(\",\"));\n    }\n    batchSize = getIntFromContext(\"batchSize\", 20);\n    customFilter = getStringFromContext(\"customFilter\", \"\");\n    String s = getStringFromContext(\"fetchMailsSince\", \"\");\n    if (s != null)\n      try {\n        fetchMailsSince = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").parse(s);\n      } catch (ParseException e) {\n        throw new DataImportHandlerException(DataImportHandlerException.SEVERE, \"Invalid value for fetchMailSince: \" + s, e);\n      }\n\n    fetchSize = getIntFromContext(\"fetchSize\", 32 * 1024);\n    cTimeout = getIntFromContext(\"connectTimeout\", 30 * 1000);\n    rTimeout = getIntFromContext(\"readTimeout\", 60 * 1000);\n    processAttachment = getBoolFromContext(\n              getStringFromContext(\"processAttachment\",null) == null ? \"processAttachement\":\"processAttachment\"\n            , true);\n\n    tika = new Tika();\n    \n    logConfig();\n  }\n\n","sourceOld":"  @Override\n  public void init(Context context) {\n    super.init(context);\n    // set attributes using  XXX getXXXFromContext(attribute, defualtValue);\n    // applies variable resolver and return default if value is not found or null\n    // REQUIRED : connection and folder info\n    user = getStringFromContext(\"user\", null);\n    password = getStringFromContext(\"password\", null);\n    host = getStringFromContext(\"host\", null);\n    protocol = getStringFromContext(\"protocol\", null);\n    folderNames = getStringFromContext(\"folders\", null);\n    // validate\n    if (host == null || protocol == null || user == null || password == null\n            || folderNames == null)\n      throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n              \"'user|password|protocol|host|folders' are required attributes\");\n\n    //OPTIONAL : have defaults and are optional\n    recurse = getBoolFromContext(\"recurse\", true);\n    String excludes = getStringFromContext(\"exclude\", \"\");\n    if (excludes != null && !excludes.trim().equals(\"\")) {\n      exclude = Arrays.asList(excludes.split(\",\"));\n    }\n    String includes = getStringFromContext(\"include\", \"\");\n    if (includes != null && !includes.trim().equals(\"\")) {\n      include = Arrays.asList(includes.split(\",\"));\n    }\n    batchSize = getIntFromContext(\"batchSize\", 20);\n    customFilter = getStringFromContext(\"customFilter\", \"\");\n    String s = getStringFromContext(\"fetchMailsSince\", \"\");\n    if (s != null)\n      try {\n        fetchMailsSince = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").parse(s);\n      } catch (ParseException e) {\n        throw new DataImportHandlerException(DataImportHandlerException.SEVERE, \"Invalid value for fetchMailSince: \" + s, e);\n      }\n\n    fetchSize = getIntFromContext(\"fetchSize\", 32 * 1024);\n    cTimeout = getIntFromContext(\"connectTimeout\", 30 * 1000);\n    rTimeout = getIntFromContext(\"readTimeout\", 60 * 1000);\n    processAttachment = getBoolFromContext(\n              getStringFromContext(\"processAttachment\",null) == null ? \"processAttachement\":\"processAttachment\"\n            , true);\n\n    logConfig();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/contrib/dataimporthandler-extras/src/java/org/apache/solr/handler/dataimport/MailEntityProcessor#init(Context).mjava","pathOld":"solr/contrib/dataimporthandler-extras/src/java/org/apache/solr/handler/dataimport/MailEntityProcessor#init(Context).mjava","sourceNew":"  @Override\n  public void init(Context context) {\n    super.init(context);\n    // set attributes using  XXX getXXXFromContext(attribute, defualtValue);\n    // applies variable resolver and return default if value is not found or null\n    // REQUIRED : connection and folder info\n    user = getStringFromContext(\"user\", null);\n    password = getStringFromContext(\"password\", null);\n    host = getStringFromContext(\"host\", null);\n    protocol = getStringFromContext(\"protocol\", null);\n    folderNames = getStringFromContext(\"folders\", null);\n    // validate\n    if (host == null || protocol == null || user == null || password == null\n            || folderNames == null)\n      throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n              \"'user|password|protocol|host|folders' are required attributes\");\n\n    //OPTIONAL : have defaults and are optional\n    recurse = getBoolFromContext(\"recurse\", true);\n    String excludes = getStringFromContext(\"exclude\", \"\");\n    if (excludes != null && !excludes.trim().equals(\"\")) {\n      exclude = Arrays.asList(excludes.split(\",\"));\n    }\n    String includes = getStringFromContext(\"include\", \"\");\n    if (includes != null && !includes.trim().equals(\"\")) {\n      include = Arrays.asList(includes.split(\",\"));\n    }\n    batchSize = getIntFromContext(\"batchSize\", 20);\n    customFilter = getStringFromContext(\"customFilter\", \"\");\n    String s = getStringFromContext(\"fetchMailsSince\", \"\");\n    if (s != null)\n      try {\n        fetchMailsSince = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").parse(s);\n      } catch (ParseException e) {\n        throw new DataImportHandlerException(DataImportHandlerException.SEVERE, \"Invalid value for fetchMailSince: \" + s, e);\n      }\n\n    fetchSize = getIntFromContext(\"fetchSize\", 32 * 1024);\n    cTimeout = getIntFromContext(\"connectTimeout\", 30 * 1000);\n    rTimeout = getIntFromContext(\"readTimeout\", 60 * 1000);\n    processAttachment = getBoolFromContext(\n              getStringFromContext(\"processAttachment\",null) == null ? \"processAttachement\":\"processAttachment\"\n            , true);\n\n    tika = new Tika();\n    \n    logConfig();\n  }\n\n","sourceOld":"  @Override\n  public void init(Context context) {\n    super.init(context);\n    // set attributes using  XXX getXXXFromContext(attribute, defualtValue);\n    // applies variable resolver and return default if value is not found or null\n    // REQUIRED : connection and folder info\n    user = getStringFromContext(\"user\", null);\n    password = getStringFromContext(\"password\", null);\n    host = getStringFromContext(\"host\", null);\n    protocol = getStringFromContext(\"protocol\", null);\n    folderNames = getStringFromContext(\"folders\", null);\n    // validate\n    if (host == null || protocol == null || user == null || password == null\n            || folderNames == null)\n      throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n              \"'user|password|protocol|host|folders' are required attributes\");\n\n    //OPTIONAL : have defaults and are optional\n    recurse = getBoolFromContext(\"recurse\", true);\n    String excludes = getStringFromContext(\"exclude\", \"\");\n    if (excludes != null && !excludes.trim().equals(\"\")) {\n      exclude = Arrays.asList(excludes.split(\",\"));\n    }\n    String includes = getStringFromContext(\"include\", \"\");\n    if (includes != null && !includes.trim().equals(\"\")) {\n      include = Arrays.asList(includes.split(\",\"));\n    }\n    batchSize = getIntFromContext(\"batchSize\", 20);\n    customFilter = getStringFromContext(\"customFilter\", \"\");\n    String s = getStringFromContext(\"fetchMailsSince\", \"\");\n    if (s != null)\n      try {\n        fetchMailsSince = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").parse(s);\n      } catch (ParseException e) {\n        throw new DataImportHandlerException(DataImportHandlerException.SEVERE, \"Invalid value for fetchMailSince: \" + s, e);\n      }\n\n    fetchSize = getIntFromContext(\"fetchSize\", 32 * 1024);\n    cTimeout = getIntFromContext(\"connectTimeout\", 30 * 1000);\n    rTimeout = getIntFromContext(\"readTimeout\", 60 * 1000);\n    processAttachment = getBoolFromContext(\n              getStringFromContext(\"processAttachment\",null) == null ? \"processAttachement\":\"processAttachment\"\n            , true);\n\n    logConfig();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/contrib/dataimporthandler-extras/src/java/org/apache/solr/handler/dataimport/MailEntityProcessor#init(Context).mjava","pathOld":"solr/contrib/dataimporthandler-extras/src/java/org/apache/solr/handler/dataimport/MailEntityProcessor#init(Context).mjava","sourceNew":"  @Override\n  public void init(Context context) {\n    super.init(context);\n    // set attributes using  XXX getXXXFromContext(attribute, defualtValue);\n    // applies variable resolver and return default if value is not found or null\n    // REQUIRED : connection and folder info\n    user = getStringFromContext(\"user\", null);\n    password = getStringFromContext(\"password\", null);\n    host = getStringFromContext(\"host\", null);\n    protocol = getStringFromContext(\"protocol\", null);\n    folderNames = getStringFromContext(\"folders\", null);\n    // validate\n    if (host == null || protocol == null || user == null || password == null\n            || folderNames == null)\n      throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n              \"'user|password|protocol|host|folders' are required attributes\");\n\n    //OPTIONAL : have defaults and are optional\n    recurse = getBoolFromContext(\"recurse\", true);\n    String excludes = getStringFromContext(\"exclude\", \"\");\n    if (excludes != null && !excludes.trim().equals(\"\")) {\n      exclude = Arrays.asList(excludes.split(\",\"));\n    }\n    String includes = getStringFromContext(\"include\", \"\");\n    if (includes != null && !includes.trim().equals(\"\")) {\n      include = Arrays.asList(includes.split(\",\"));\n    }\n    batchSize = getIntFromContext(\"batchSize\", 20);\n    customFilter = getStringFromContext(\"customFilter\", \"\");\n    String s = getStringFromContext(\"fetchMailsSince\", \"\");\n    if (s != null)\n      try {\n        fetchMailsSince = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").parse(s);\n      } catch (ParseException e) {\n        throw new DataImportHandlerException(DataImportHandlerException.SEVERE, \"Invalid value for fetchMailSince: \" + s, e);\n      }\n\n    fetchSize = getIntFromContext(\"fetchSize\", 32 * 1024);\n    cTimeout = getIntFromContext(\"connectTimeout\", 30 * 1000);\n    rTimeout = getIntFromContext(\"readTimeout\", 60 * 1000);\n    processAttachment = getBoolFromContext(\n              getStringFromContext(\"processAttachment\",null) == null ? \"processAttachement\":\"processAttachment\"\n            , true);\n\n    tika = new Tika();\n    \n    logConfig();\n  }\n\n","sourceOld":"  @Override\n  public void init(Context context) {\n    super.init(context);\n    // set attributes using  XXX getXXXFromContext(attribute, defualtValue);\n    // applies variable resolver and return default if value is not found or null\n    // REQUIRED : connection and folder info\n    user = getStringFromContext(\"user\", null);\n    password = getStringFromContext(\"password\", null);\n    host = getStringFromContext(\"host\", null);\n    protocol = getStringFromContext(\"protocol\", null);\n    folderNames = getStringFromContext(\"folders\", null);\n    // validate\n    if (host == null || protocol == null || user == null || password == null\n            || folderNames == null)\n      throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n              \"'user|password|protocol|host|folders' are required attributes\");\n\n    //OPTIONAL : have defaults and are optional\n    recurse = getBoolFromContext(\"recurse\", true);\n    String excludes = getStringFromContext(\"exclude\", \"\");\n    if (excludes != null && !excludes.trim().equals(\"\")) {\n      exclude = Arrays.asList(excludes.split(\",\"));\n    }\n    String includes = getStringFromContext(\"include\", \"\");\n    if (includes != null && !includes.trim().equals(\"\")) {\n      include = Arrays.asList(includes.split(\",\"));\n    }\n    batchSize = getIntFromContext(\"batchSize\", 20);\n    customFilter = getStringFromContext(\"customFilter\", \"\");\n    String s = getStringFromContext(\"fetchMailsSince\", \"\");\n    if (s != null)\n      try {\n        fetchMailsSince = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").parse(s);\n      } catch (ParseException e) {\n        throw new DataImportHandlerException(DataImportHandlerException.SEVERE, \"Invalid value for fetchMailSince: \" + s, e);\n      }\n\n    fetchSize = getIntFromContext(\"fetchSize\", 32 * 1024);\n    cTimeout = getIntFromContext(\"connectTimeout\", 30 * 1000);\n    rTimeout = getIntFromContext(\"readTimeout\", 60 * 1000);\n    processAttachment = getBoolFromContext(\n              getStringFromContext(\"processAttachment\",null) == null ? \"processAttachement\":\"processAttachment\"\n            , true);\n\n    logConfig();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b9e552a182fe576c92e94d61eb2e0f864ff2eb83","date":1339684671,"type":3,"author":"James Dyer","isMerge":false,"pathNew":"solr/contrib/dataimporthandler-extras/src/java/org/apache/solr/handler/dataimport/MailEntityProcessor#init(Context).mjava","pathOld":"solr/contrib/dataimporthandler-extras/src/java/org/apache/solr/handler/dataimport/MailEntityProcessor#init(Context).mjava","sourceNew":"  @Override\n  public void init(Context context) {\n    super.init(context);\n    // set attributes using  XXX getXXXFromContext(attribute, defualtValue);\n    // applies variable resolver and return default if value is not found or null\n    // REQUIRED : connection and folder info\n    user = getStringFromContext(\"user\", null);\n    password = getStringFromContext(\"password\", null);\n    host = getStringFromContext(\"host\", null);\n    protocol = getStringFromContext(\"protocol\", null);\n    folderNames = getStringFromContext(\"folders\", null);\n    // validate\n    if (host == null || protocol == null || user == null || password == null\n            || folderNames == null)\n      throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n              \"'user|password|protocol|host|folders' are required attributes\");\n\n    //OPTIONAL : have defaults and are optional\n    recurse = getBoolFromContext(\"recurse\", true);\n    String excludes = getStringFromContext(\"exclude\", \"\");\n    if (excludes != null && !excludes.trim().equals(\"\")) {\n      exclude = Arrays.asList(excludes.split(\",\"));\n    }\n    String includes = getStringFromContext(\"include\", \"\");\n    if (includes != null && !includes.trim().equals(\"\")) {\n      include = Arrays.asList(includes.split(\",\"));\n    }\n    batchSize = getIntFromContext(\"batchSize\", 20);\n    customFilter = getStringFromContext(\"customFilter\", \"\");\n    String s = getStringFromContext(\"fetchMailsSince\", null);\n    if (s != null)\n      try {\n        fetchMailsSince = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").parse(s);\n      } catch (ParseException e) {\n        throw new DataImportHandlerException(DataImportHandlerException.SEVERE, \"Invalid value for fetchMailSince: \" + s, e);\n      }\n\n    fetchSize = getIntFromContext(\"fetchSize\", 32 * 1024);\n    cTimeout = getIntFromContext(\"connectTimeout\", 30 * 1000);\n    rTimeout = getIntFromContext(\"readTimeout\", 60 * 1000);\n    processAttachment = getBoolFromContext(\n              getStringFromContext(\"processAttachment\",null) == null ? \"processAttachement\":\"processAttachment\"\n            , true);\n\n    tika = new Tika();\n    \n    logConfig();\n  }\n\n","sourceOld":"  @Override\n  public void init(Context context) {\n    super.init(context);\n    // set attributes using  XXX getXXXFromContext(attribute, defualtValue);\n    // applies variable resolver and return default if value is not found or null\n    // REQUIRED : connection and folder info\n    user = getStringFromContext(\"user\", null);\n    password = getStringFromContext(\"password\", null);\n    host = getStringFromContext(\"host\", null);\n    protocol = getStringFromContext(\"protocol\", null);\n    folderNames = getStringFromContext(\"folders\", null);\n    // validate\n    if (host == null || protocol == null || user == null || password == null\n            || folderNames == null)\n      throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n              \"'user|password|protocol|host|folders' are required attributes\");\n\n    //OPTIONAL : have defaults and are optional\n    recurse = getBoolFromContext(\"recurse\", true);\n    String excludes = getStringFromContext(\"exclude\", \"\");\n    if (excludes != null && !excludes.trim().equals(\"\")) {\n      exclude = Arrays.asList(excludes.split(\",\"));\n    }\n    String includes = getStringFromContext(\"include\", \"\");\n    if (includes != null && !includes.trim().equals(\"\")) {\n      include = Arrays.asList(includes.split(\",\"));\n    }\n    batchSize = getIntFromContext(\"batchSize\", 20);\n    customFilter = getStringFromContext(\"customFilter\", \"\");\n    String s = getStringFromContext(\"fetchMailsSince\", \"\");\n    if (s != null)\n      try {\n        fetchMailsSince = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").parse(s);\n      } catch (ParseException e) {\n        throw new DataImportHandlerException(DataImportHandlerException.SEVERE, \"Invalid value for fetchMailSince: \" + s, e);\n      }\n\n    fetchSize = getIntFromContext(\"fetchSize\", 32 * 1024);\n    cTimeout = getIntFromContext(\"connectTimeout\", 30 * 1000);\n    rTimeout = getIntFromContext(\"readTimeout\", 60 * 1000);\n    processAttachment = getBoolFromContext(\n              getStringFromContext(\"processAttachment\",null) == null ? \"processAttachement\":\"processAttachment\"\n            , true);\n\n    tika = new Tika();\n    \n    logConfig();\n  }\n\n","bugFix":["db22d0edb2467b44638dfe7d72c29c2ef6fc84e5"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"80249aaf913769676b1d45cdf0859ca70bd04fc8","date":1353440934,"type":3,"author":"James Dyer","isMerge":false,"pathNew":"solr/contrib/dataimporthandler-extras/src/java/org/apache/solr/handler/dataimport/MailEntityProcessor#init(Context).mjava","pathOld":"solr/contrib/dataimporthandler-extras/src/java/org/apache/solr/handler/dataimport/MailEntityProcessor#init(Context).mjava","sourceNew":"  @Override\n  public void init(Context context) {\n    super.init(context);\n    // set attributes using  XXX getXXXFromContext(attribute, defualtValue);\n    // applies variable resolver and return default if value is not found or null\n    // REQUIRED : connection and folder info\n    user = getStringFromContext(\"user\", null);\n    password = getStringFromContext(\"password\", null);\n    host = getStringFromContext(\"host\", null);\n    protocol = getStringFromContext(\"protocol\", null);\n    folderNames = getStringFromContext(\"folders\", null);\n    // validate\n    if (host == null || protocol == null || user == null || password == null\n            || folderNames == null)\n      throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n              \"'user|password|protocol|host|folders' are required attributes\");\n\n    //OPTIONAL : have defaults and are optional\n    recurse = getBoolFromContext(\"recurse\", true);\n    String excludes = getStringFromContext(\"exclude\", \"\");\n    if (excludes != null && !excludes.trim().equals(\"\")) {\n      exclude = Arrays.asList(excludes.split(\",\"));\n    }\n    String includes = getStringFromContext(\"include\", \"\");\n    if (includes != null && !includes.trim().equals(\"\")) {\n      include = Arrays.asList(includes.split(\",\"));\n    }\n    batchSize = getIntFromContext(\"batchSize\", 20);\n    customFilter = getStringFromContext(\"customFilter\", \"\");\n    String s = getStringFromContext(\"fetchMailsSince\", null);\n    if (s != null)\n      try {\n        fetchMailsSince = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\", Locale.ROOT).parse(s);\n      } catch (ParseException e) {\n        throw new DataImportHandlerException(DataImportHandlerException.SEVERE, \"Invalid value for fetchMailSince: \" + s, e);\n      }\n\n    fetchSize = getIntFromContext(\"fetchSize\", 32 * 1024);\n    cTimeout = getIntFromContext(\"connectTimeout\", 30 * 1000);\n    rTimeout = getIntFromContext(\"readTimeout\", 60 * 1000);\n    processAttachment = getBoolFromContext(\n              getStringFromContext(\"processAttachment\",null) == null ? \"processAttachement\":\"processAttachment\"\n            , true);\n\n    tika = new Tika();\n    \n    logConfig();\n  }\n\n","sourceOld":"  @Override\n  public void init(Context context) {\n    super.init(context);\n    // set attributes using  XXX getXXXFromContext(attribute, defualtValue);\n    // applies variable resolver and return default if value is not found or null\n    // REQUIRED : connection and folder info\n    user = getStringFromContext(\"user\", null);\n    password = getStringFromContext(\"password\", null);\n    host = getStringFromContext(\"host\", null);\n    protocol = getStringFromContext(\"protocol\", null);\n    folderNames = getStringFromContext(\"folders\", null);\n    // validate\n    if (host == null || protocol == null || user == null || password == null\n            || folderNames == null)\n      throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n              \"'user|password|protocol|host|folders' are required attributes\");\n\n    //OPTIONAL : have defaults and are optional\n    recurse = getBoolFromContext(\"recurse\", true);\n    String excludes = getStringFromContext(\"exclude\", \"\");\n    if (excludes != null && !excludes.trim().equals(\"\")) {\n      exclude = Arrays.asList(excludes.split(\",\"));\n    }\n    String includes = getStringFromContext(\"include\", \"\");\n    if (includes != null && !includes.trim().equals(\"\")) {\n      include = Arrays.asList(includes.split(\",\"));\n    }\n    batchSize = getIntFromContext(\"batchSize\", 20);\n    customFilter = getStringFromContext(\"customFilter\", \"\");\n    String s = getStringFromContext(\"fetchMailsSince\", null);\n    if (s != null)\n      try {\n        fetchMailsSince = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").parse(s);\n      } catch (ParseException e) {\n        throw new DataImportHandlerException(DataImportHandlerException.SEVERE, \"Invalid value for fetchMailSince: \" + s, e);\n      }\n\n    fetchSize = getIntFromContext(\"fetchSize\", 32 * 1024);\n    cTimeout = getIntFromContext(\"connectTimeout\", 30 * 1000);\n    rTimeout = getIntFromContext(\"readTimeout\", 60 * 1000);\n    processAttachment = getBoolFromContext(\n              getStringFromContext(\"processAttachment\",null) == null ? \"processAttachement\":\"processAttachment\"\n            , true);\n\n    tika = new Tika();\n    \n    logConfig();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/contrib/dataimporthandler-extras/src/java/org/apache/solr/handler/dataimport/MailEntityProcessor#init(Context).mjava","pathOld":"solr/contrib/dataimporthandler-extras/src/java/org/apache/solr/handler/dataimport/MailEntityProcessor#init(Context).mjava","sourceNew":"  @Override\n  public void init(Context context) {\n    super.init(context);\n    // set attributes using  XXX getXXXFromContext(attribute, defualtValue);\n    // applies variable resolver and return default if value is not found or null\n    // REQUIRED : connection and folder info\n    user = getStringFromContext(\"user\", null);\n    password = getStringFromContext(\"password\", null);\n    host = getStringFromContext(\"host\", null);\n    protocol = getStringFromContext(\"protocol\", null);\n    folderNames = getStringFromContext(\"folders\", null);\n    // validate\n    if (host == null || protocol == null || user == null || password == null\n            || folderNames == null)\n      throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n              \"'user|password|protocol|host|folders' are required attributes\");\n\n    //OPTIONAL : have defaults and are optional\n    recurse = getBoolFromContext(\"recurse\", true);\n    String excludes = getStringFromContext(\"exclude\", \"\");\n    if (excludes != null && !excludes.trim().equals(\"\")) {\n      exclude = Arrays.asList(excludes.split(\",\"));\n    }\n    String includes = getStringFromContext(\"include\", \"\");\n    if (includes != null && !includes.trim().equals(\"\")) {\n      include = Arrays.asList(includes.split(\",\"));\n    }\n    batchSize = getIntFromContext(\"batchSize\", 20);\n    customFilter = getStringFromContext(\"customFilter\", \"\");\n    String s = getStringFromContext(\"fetchMailsSince\", null);\n    if (s != null)\n      try {\n        fetchMailsSince = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\", Locale.ROOT).parse(s);\n      } catch (ParseException e) {\n        throw new DataImportHandlerException(DataImportHandlerException.SEVERE, \"Invalid value for fetchMailSince: \" + s, e);\n      }\n\n    fetchSize = getIntFromContext(\"fetchSize\", 32 * 1024);\n    cTimeout = getIntFromContext(\"connectTimeout\", 30 * 1000);\n    rTimeout = getIntFromContext(\"readTimeout\", 60 * 1000);\n    processAttachment = getBoolFromContext(\n              getStringFromContext(\"processAttachment\",null) == null ? \"processAttachement\":\"processAttachment\"\n            , true);\n\n    tika = new Tika();\n    \n    logConfig();\n  }\n\n","sourceOld":"  @Override\n  public void init(Context context) {\n    super.init(context);\n    // set attributes using  XXX getXXXFromContext(attribute, defualtValue);\n    // applies variable resolver and return default if value is not found or null\n    // REQUIRED : connection and folder info\n    user = getStringFromContext(\"user\", null);\n    password = getStringFromContext(\"password\", null);\n    host = getStringFromContext(\"host\", null);\n    protocol = getStringFromContext(\"protocol\", null);\n    folderNames = getStringFromContext(\"folders\", null);\n    // validate\n    if (host == null || protocol == null || user == null || password == null\n            || folderNames == null)\n      throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n              \"'user|password|protocol|host|folders' are required attributes\");\n\n    //OPTIONAL : have defaults and are optional\n    recurse = getBoolFromContext(\"recurse\", true);\n    String excludes = getStringFromContext(\"exclude\", \"\");\n    if (excludes != null && !excludes.trim().equals(\"\")) {\n      exclude = Arrays.asList(excludes.split(\",\"));\n    }\n    String includes = getStringFromContext(\"include\", \"\");\n    if (includes != null && !includes.trim().equals(\"\")) {\n      include = Arrays.asList(includes.split(\",\"));\n    }\n    batchSize = getIntFromContext(\"batchSize\", 20);\n    customFilter = getStringFromContext(\"customFilter\", \"\");\n    String s = getStringFromContext(\"fetchMailsSince\", null);\n    if (s != null)\n      try {\n        fetchMailsSince = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").parse(s);\n      } catch (ParseException e) {\n        throw new DataImportHandlerException(DataImportHandlerException.SEVERE, \"Invalid value for fetchMailSince: \" + s, e);\n      }\n\n    fetchSize = getIntFromContext(\"fetchSize\", 32 * 1024);\n    cTimeout = getIntFromContext(\"connectTimeout\", 30 * 1000);\n    rTimeout = getIntFromContext(\"readTimeout\", 60 * 1000);\n    processAttachment = getBoolFromContext(\n              getStringFromContext(\"processAttachment\",null) == null ? \"processAttachement\":\"processAttachment\"\n            , true);\n\n    tika = new Tika();\n    \n    logConfig();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"36113efe922ae370819b20fba837a1a37d3dd2d8","date":1404234826,"type":3,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/contrib/dataimporthandler-extras/src/java/org/apache/solr/handler/dataimport/MailEntityProcessor#init(Context).mjava","pathOld":"solr/contrib/dataimporthandler-extras/src/java/org/apache/solr/handler/dataimport/MailEntityProcessor#init(Context).mjava","sourceNew":"  public void init(Context context) {\n    super.init(context);\n    // set attributes using XXX getXXXFromContext(attribute, defualtValue);\n    // applies variable resolver and return default if value is not found or null\n    // REQUIRED : connection and folder info\n    user = getStringFromContext(\"user\", null);\n    password = getStringFromContext(\"password\", null);\n    host = getStringFromContext(\"host\", null);\n    protocol = getStringFromContext(\"protocol\", null);\n    folderNames = getStringFromContext(\"folders\", null);\n    // validate\n    if (host == null || protocol == null || user == null || password == null\n        || folderNames == null) throw new DataImportHandlerException(\n        DataImportHandlerException.SEVERE,\n        \"'user|password|protocol|host|folders' are required attributes\");\n    \n    // OPTIONAL : have defaults and are optional\n    recurse = getBoolFromContext(\"recurse\", true);\n    \n    exclude.clear();\n    String excludes = getStringFromContext(\"exclude\", \"\");\n    if (excludes != null && !excludes.trim().equals(\"\")) {\n      exclude = Arrays.asList(excludes.split(\",\"));\n    }\n    \n    include.clear();\n    String includes = getStringFromContext(\"include\", \"\");\n    if (includes != null && !includes.trim().equals(\"\")) {\n      include = Arrays.asList(includes.split(\",\"));\n    }\n    batchSize = getIntFromContext(\"batchSize\", 20);\n    customFilter = getStringFromContext(\"customFilter\", \"\");\n    if (filters != null) filters.clear();\n    folderIter = null;\n    msgIter = null;\n            \n    String lastIndexTime = null;\n    String command = \n        String.valueOf(context.getRequestParameters().get(\"command\"));\n    if (!DataImporter.FULL_IMPORT_CMD.equals(command))\n      throw new IllegalArgumentException(this.getClass().getSimpleName()+\n          \" only supports \"+DataImporter.FULL_IMPORT_CMD);\n    \n    // Read the last_index_time out of the dataimport.properties if available\n    String cname = getStringFromContext(\"name\", \"mailimporter\");\n    String varName = ConfigNameConstants.IMPORTER_NS_SHORT + \".\" + cname + \".\"\n        + DocBuilder.LAST_INDEX_TIME;\n    Object varValue = context.getVariableResolver().resolve(varName);\n    if (varValue == null || \"\".equals(varValue)) {\n      varName = ConfigNameConstants.IMPORTER_NS_SHORT + \".\"\n          + DocBuilder.LAST_INDEX_TIME;\n      varValue = context.getVariableResolver().resolve(varName);\n    }\n      \n    if (varValue != null && varValue instanceof String) {\n      lastIndexTime = (String)varValue;\n      if (lastIndexTime != null && lastIndexTime.length() == 0)\n        lastIndexTime = null;\n    }\n            \n    if (lastIndexTime == null) \n      lastIndexTime = getStringFromContext(\"fetchMailsSince\", \"\");\n\n    LOG.info(\"Using lastIndexTime \"+lastIndexTime+\" for mail import\");\n    \n    this.fetchMailsSince = null;\n    if (lastIndexTime != null && lastIndexTime.length() > 0) {\n      try {\n        fetchMailsSince = sinceDateParser.parse(lastIndexTime);\n        LOG.info(\"Parsed fetchMailsSince=\" + lastIndexTime);\n      } catch (ParseException e) {\n        throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n            \"Invalid value for fetchMailSince: \" + lastIndexTime, e);\n      }\n    }\n        \n    fetchSize = getIntFromContext(\"fetchSize\", 32 * 1024);\n    cTimeout = getIntFromContext(\"connectTimeout\", 30 * 1000);\n    rTimeout = getIntFromContext(\"readTimeout\", 60 * 1000);\n    \n    String tmp = context.getEntityAttribute(\"includeOtherUserFolders\");\n    includeOtherUserFolders = (tmp != null && Boolean.valueOf(tmp.trim()));\n    tmp = context.getEntityAttribute(\"includeSharedFolders\");\n    includeSharedFolders = (tmp != null && Boolean.valueOf(tmp.trim()));\n    \n    setProcessAttachmentConfig();\n    includeContent = getBoolFromContext(\"includeContent\", true);\n          \n    logConfig();\n  }\n\n","sourceOld":"  @Override\n  public void init(Context context) {\n    super.init(context);\n    // set attributes using  XXX getXXXFromContext(attribute, defualtValue);\n    // applies variable resolver and return default if value is not found or null\n    // REQUIRED : connection and folder info\n    user = getStringFromContext(\"user\", null);\n    password = getStringFromContext(\"password\", null);\n    host = getStringFromContext(\"host\", null);\n    protocol = getStringFromContext(\"protocol\", null);\n    folderNames = getStringFromContext(\"folders\", null);\n    // validate\n    if (host == null || protocol == null || user == null || password == null\n            || folderNames == null)\n      throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n              \"'user|password|protocol|host|folders' are required attributes\");\n\n    //OPTIONAL : have defaults and are optional\n    recurse = getBoolFromContext(\"recurse\", true);\n    String excludes = getStringFromContext(\"exclude\", \"\");\n    if (excludes != null && !excludes.trim().equals(\"\")) {\n      exclude = Arrays.asList(excludes.split(\",\"));\n    }\n    String includes = getStringFromContext(\"include\", \"\");\n    if (includes != null && !includes.trim().equals(\"\")) {\n      include = Arrays.asList(includes.split(\",\"));\n    }\n    batchSize = getIntFromContext(\"batchSize\", 20);\n    customFilter = getStringFromContext(\"customFilter\", \"\");\n    String s = getStringFromContext(\"fetchMailsSince\", null);\n    if (s != null)\n      try {\n        fetchMailsSince = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\", Locale.ROOT).parse(s);\n      } catch (ParseException e) {\n        throw new DataImportHandlerException(DataImportHandlerException.SEVERE, \"Invalid value for fetchMailSince: \" + s, e);\n      }\n\n    fetchSize = getIntFromContext(\"fetchSize\", 32 * 1024);\n    cTimeout = getIntFromContext(\"connectTimeout\", 30 * 1000);\n    rTimeout = getIntFromContext(\"readTimeout\", 60 * 1000);\n    processAttachment = getBoolFromContext(\n              getStringFromContext(\"processAttachment\",null) == null ? \"processAttachement\":\"processAttachment\"\n            , true);\n\n    tika = new Tika();\n    \n    logConfig();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0bac5e4f5082317c9a942b1deeeb22d6700ecff7","date":1404338458,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/contrib/dataimporthandler-extras/src/java/org/apache/solr/handler/dataimport/MailEntityProcessor#init(Context).mjava","pathOld":"solr/contrib/dataimporthandler-extras/src/java/org/apache/solr/handler/dataimport/MailEntityProcessor#init(Context).mjava","sourceNew":"  @Override\n  public void init(Context context) {\n    super.init(context);\n    // set attributes using  XXX getXXXFromContext(attribute, defualtValue);\n    // applies variable resolver and return default if value is not found or null\n    // REQUIRED : connection and folder info\n    user = getStringFromContext(\"user\", null);\n    password = getStringFromContext(\"password\", null);\n    host = getStringFromContext(\"host\", null);\n    protocol = getStringFromContext(\"protocol\", null);\n    folderNames = getStringFromContext(\"folders\", null);\n    // validate\n    if (host == null || protocol == null || user == null || password == null\n            || folderNames == null)\n      throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n              \"'user|password|protocol|host|folders' are required attributes\");\n\n    //OPTIONAL : have defaults and are optional\n    recurse = getBoolFromContext(\"recurse\", true);\n    String excludes = getStringFromContext(\"exclude\", \"\");\n    if (excludes != null && !excludes.trim().equals(\"\")) {\n      exclude = Arrays.asList(excludes.split(\",\"));\n    }\n    String includes = getStringFromContext(\"include\", \"\");\n    if (includes != null && !includes.trim().equals(\"\")) {\n      include = Arrays.asList(includes.split(\",\"));\n    }\n    batchSize = getIntFromContext(\"batchSize\", 20);\n    customFilter = getStringFromContext(\"customFilter\", \"\");\n    String s = getStringFromContext(\"fetchMailsSince\", null);\n    if (s != null)\n      try {\n        fetchMailsSince = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\", Locale.ROOT).parse(s);\n      } catch (ParseException e) {\n        throw new DataImportHandlerException(DataImportHandlerException.SEVERE, \"Invalid value for fetchMailSince: \" + s, e);\n      }\n\n    fetchSize = getIntFromContext(\"fetchSize\", 32 * 1024);\n    cTimeout = getIntFromContext(\"connectTimeout\", 30 * 1000);\n    rTimeout = getIntFromContext(\"readTimeout\", 60 * 1000);\n    processAttachment = getBoolFromContext(\n              getStringFromContext(\"processAttachment\",null) == null ? \"processAttachement\":\"processAttachment\"\n            , true);\n\n    tika = new Tika();\n    \n    logConfig();\n  }\n\n","sourceOld":"  public void init(Context context) {\n    super.init(context);\n    // set attributes using XXX getXXXFromContext(attribute, defualtValue);\n    // applies variable resolver and return default if value is not found or null\n    // REQUIRED : connection and folder info\n    user = getStringFromContext(\"user\", null);\n    password = getStringFromContext(\"password\", null);\n    host = getStringFromContext(\"host\", null);\n    protocol = getStringFromContext(\"protocol\", null);\n    folderNames = getStringFromContext(\"folders\", null);\n    // validate\n    if (host == null || protocol == null || user == null || password == null\n        || folderNames == null) throw new DataImportHandlerException(\n        DataImportHandlerException.SEVERE,\n        \"'user|password|protocol|host|folders' are required attributes\");\n    \n    // OPTIONAL : have defaults and are optional\n    recurse = getBoolFromContext(\"recurse\", true);\n    \n    exclude.clear();\n    String excludes = getStringFromContext(\"exclude\", \"\");\n    if (excludes != null && !excludes.trim().equals(\"\")) {\n      exclude = Arrays.asList(excludes.split(\",\"));\n    }\n    \n    include.clear();\n    String includes = getStringFromContext(\"include\", \"\");\n    if (includes != null && !includes.trim().equals(\"\")) {\n      include = Arrays.asList(includes.split(\",\"));\n    }\n    batchSize = getIntFromContext(\"batchSize\", 20);\n    customFilter = getStringFromContext(\"customFilter\", \"\");\n    if (filters != null) filters.clear();\n    folderIter = null;\n    msgIter = null;\n            \n    String lastIndexTime = null;\n    String command = \n        String.valueOf(context.getRequestParameters().get(\"command\"));\n    if (!DataImporter.FULL_IMPORT_CMD.equals(command))\n      throw new IllegalArgumentException(this.getClass().getSimpleName()+\n          \" only supports \"+DataImporter.FULL_IMPORT_CMD);\n    \n    // Read the last_index_time out of the dataimport.properties if available\n    String cname = getStringFromContext(\"name\", \"mailimporter\");\n    String varName = ConfigNameConstants.IMPORTER_NS_SHORT + \".\" + cname + \".\"\n        + DocBuilder.LAST_INDEX_TIME;\n    Object varValue = context.getVariableResolver().resolve(varName);\n    if (varValue == null || \"\".equals(varValue)) {\n      varName = ConfigNameConstants.IMPORTER_NS_SHORT + \".\"\n          + DocBuilder.LAST_INDEX_TIME;\n      varValue = context.getVariableResolver().resolve(varName);\n    }\n      \n    if (varValue != null && varValue instanceof String) {\n      lastIndexTime = (String)varValue;\n      if (lastIndexTime != null && lastIndexTime.length() == 0)\n        lastIndexTime = null;\n    }\n            \n    if (lastIndexTime == null) \n      lastIndexTime = getStringFromContext(\"fetchMailsSince\", \"\");\n\n    LOG.info(\"Using lastIndexTime \"+lastIndexTime+\" for mail import\");\n    \n    this.fetchMailsSince = null;\n    if (lastIndexTime != null && lastIndexTime.length() > 0) {\n      try {\n        fetchMailsSince = sinceDateParser.parse(lastIndexTime);\n        LOG.info(\"Parsed fetchMailsSince=\" + lastIndexTime);\n      } catch (ParseException e) {\n        throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n            \"Invalid value for fetchMailSince: \" + lastIndexTime, e);\n      }\n    }\n        \n    fetchSize = getIntFromContext(\"fetchSize\", 32 * 1024);\n    cTimeout = getIntFromContext(\"connectTimeout\", 30 * 1000);\n    rTimeout = getIntFromContext(\"readTimeout\", 60 * 1000);\n    \n    String tmp = context.getEntityAttribute(\"includeOtherUserFolders\");\n    includeOtherUserFolders = (tmp != null && Boolean.valueOf(tmp.trim()));\n    tmp = context.getEntityAttribute(\"includeSharedFolders\");\n    includeSharedFolders = (tmp != null && Boolean.valueOf(tmp.trim()));\n    \n    setProcessAttachmentConfig();\n    includeContent = getBoolFromContext(\"includeContent\", true);\n          \n    logConfig();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0cd303657ee7726e12c45f9fd39b0285acf10c07","date":1405460668,"type":3,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/contrib/dataimporthandler-extras/src/java/org/apache/solr/handler/dataimport/MailEntityProcessor#init(Context).mjava","pathOld":"solr/contrib/dataimporthandler-extras/src/java/org/apache/solr/handler/dataimport/MailEntityProcessor#init(Context).mjava","sourceNew":"  public void init(Context context) {\n    super.init(context);\n    // set attributes using XXX getXXXFromContext(attribute, defualtValue);\n    // applies variable resolver and return default if value is not found or null\n    // REQUIRED : connection and folder info\n    user = getStringFromContext(\"user\", null);\n    password = getStringFromContext(\"password\", null);\n    host = getStringFromContext(\"host\", null);\n    protocol = getStringFromContext(\"protocol\", null);\n    folderNames = getStringFromContext(\"folders\", null);\n    // validate\n    if (host == null || protocol == null || user == null || password == null\n        || folderNames == null) throw new DataImportHandlerException(\n        DataImportHandlerException.SEVERE,\n        \"'user|password|protocol|host|folders' are required attributes\");\n    \n    // OPTIONAL : have defaults and are optional\n    recurse = getBoolFromContext(\"recurse\", true);\n    \n    exclude.clear();\n    String excludes = getStringFromContext(\"exclude\", \"\");\n    if (excludes != null && !excludes.trim().equals(\"\")) {\n      exclude = Arrays.asList(excludes.split(\",\"));\n    }\n    \n    include.clear();\n    String includes = getStringFromContext(\"include\", \"\");\n    if (includes != null && !includes.trim().equals(\"\")) {\n      include = Arrays.asList(includes.split(\",\"));\n    }\n    batchSize = getIntFromContext(\"batchSize\", 20);\n    customFilter = getStringFromContext(\"customFilter\", \"\");\n    if (filters != null) filters.clear();\n    folderIter = null;\n    msgIter = null;\n            \n    String lastIndexTime = null;\n    String command = \n        String.valueOf(context.getRequestParameters().get(\"command\"));\n    if (!DataImporter.FULL_IMPORT_CMD.equals(command))\n      throw new IllegalArgumentException(this.getClass().getSimpleName()+\n          \" only supports \"+DataImporter.FULL_IMPORT_CMD);\n    \n    // Read the last_index_time out of the dataimport.properties if available\n    String cname = getStringFromContext(\"name\", \"mailimporter\");\n    String varName = ConfigNameConstants.IMPORTER_NS_SHORT + \".\" + cname + \".\"\n        + DocBuilder.LAST_INDEX_TIME;\n    Object varValue = context.getVariableResolver().resolve(varName);\n    if (varValue == null || \"\".equals(varValue)) {\n      varName = ConfigNameConstants.IMPORTER_NS_SHORT + \".\"\n          + DocBuilder.LAST_INDEX_TIME;\n      varValue = context.getVariableResolver().resolve(varName);\n    }\n      \n    if (varValue != null && varValue instanceof String) {\n      lastIndexTime = (String)varValue;\n      if (lastIndexTime != null && lastIndexTime.length() == 0)\n        lastIndexTime = null;\n    }\n            \n    if (lastIndexTime == null) \n      lastIndexTime = getStringFromContext(\"fetchMailsSince\", \"\");\n\n    LOG.info(\"Using lastIndexTime \"+lastIndexTime+\" for mail import\");\n    \n    this.fetchMailsSince = null;\n    if (lastIndexTime != null && lastIndexTime.length() > 0) {\n      try {\n        fetchMailsSince = sinceDateParser.parse(lastIndexTime);\n        LOG.info(\"Parsed fetchMailsSince=\" + lastIndexTime);\n      } catch (ParseException e) {\n        throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n            \"Invalid value for fetchMailSince: \" + lastIndexTime, e);\n      }\n    }\n        \n    fetchSize = getIntFromContext(\"fetchSize\", 32 * 1024);\n    cTimeout = getIntFromContext(\"connectTimeout\", 30 * 1000);\n    rTimeout = getIntFromContext(\"readTimeout\", 60 * 1000);\n    \n    String tmp = context.getEntityAttribute(\"includeOtherUserFolders\");\n    includeOtherUserFolders = (tmp != null && Boolean.valueOf(tmp.trim()));\n    tmp = context.getEntityAttribute(\"includeSharedFolders\");\n    includeSharedFolders = (tmp != null && Boolean.valueOf(tmp.trim()));\n    \n    setProcessAttachmentConfig();\n    includeContent = getBoolFromContext(\"includeContent\", true);\n          \n    logConfig();\n  }\n\n","sourceOld":"  @Override\n  public void init(Context context) {\n    super.init(context);\n    // set attributes using  XXX getXXXFromContext(attribute, defualtValue);\n    // applies variable resolver and return default if value is not found or null\n    // REQUIRED : connection and folder info\n    user = getStringFromContext(\"user\", null);\n    password = getStringFromContext(\"password\", null);\n    host = getStringFromContext(\"host\", null);\n    protocol = getStringFromContext(\"protocol\", null);\n    folderNames = getStringFromContext(\"folders\", null);\n    // validate\n    if (host == null || protocol == null || user == null || password == null\n            || folderNames == null)\n      throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n              \"'user|password|protocol|host|folders' are required attributes\");\n\n    //OPTIONAL : have defaults and are optional\n    recurse = getBoolFromContext(\"recurse\", true);\n    String excludes = getStringFromContext(\"exclude\", \"\");\n    if (excludes != null && !excludes.trim().equals(\"\")) {\n      exclude = Arrays.asList(excludes.split(\",\"));\n    }\n    String includes = getStringFromContext(\"include\", \"\");\n    if (includes != null && !includes.trim().equals(\"\")) {\n      include = Arrays.asList(includes.split(\",\"));\n    }\n    batchSize = getIntFromContext(\"batchSize\", 20);\n    customFilter = getStringFromContext(\"customFilter\", \"\");\n    String s = getStringFromContext(\"fetchMailsSince\", null);\n    if (s != null)\n      try {\n        fetchMailsSince = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\", Locale.ROOT).parse(s);\n      } catch (ParseException e) {\n        throw new DataImportHandlerException(DataImportHandlerException.SEVERE, \"Invalid value for fetchMailSince: \" + s, e);\n      }\n\n    fetchSize = getIntFromContext(\"fetchSize\", 32 * 1024);\n    cTimeout = getIntFromContext(\"connectTimeout\", 30 * 1000);\n    rTimeout = getIntFromContext(\"readTimeout\", 60 * 1000);\n    processAttachment = getBoolFromContext(\n              getStringFromContext(\"processAttachment\",null) == null ? \"processAttachement\":\"processAttachment\"\n            , true);\n\n    tika = new Tika();\n    \n    logConfig();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ca7d156662a7369a6ca2947adefed31886f3fa21","date":1405473443,"type":3,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/contrib/dataimporthandler-extras/src/java/org/apache/solr/handler/dataimport/MailEntityProcessor#init(Context).mjava","pathOld":"solr/contrib/dataimporthandler-extras/src/java/org/apache/solr/handler/dataimport/MailEntityProcessor#init(Context).mjava","sourceNew":"  public void init(Context context) {\n    super.init(context);\n    // set attributes using XXX getXXXFromContext(attribute, defualtValue);\n    // applies variable resolver and return default if value is not found or null\n    // REQUIRED : connection and folder info\n    user = getStringFromContext(\"user\", null);\n    password = getStringFromContext(\"password\", null);\n    host = getStringFromContext(\"host\", null);\n    protocol = getStringFromContext(\"protocol\", null);\n    folderNames = getStringFromContext(\"folders\", null);\n    // validate\n    if (host == null || protocol == null || user == null || password == null\n        || folderNames == null) throw new DataImportHandlerException(\n        DataImportHandlerException.SEVERE,\n        \"'user|password|protocol|host|folders' are required attributes\");\n    \n    // OPTIONAL : have defaults and are optional\n    recurse = getBoolFromContext(\"recurse\", true);\n    \n    exclude.clear();\n    String excludes = getStringFromContext(\"exclude\", \"\");\n    if (excludes != null && !excludes.trim().equals(\"\")) {\n      exclude = Arrays.asList(excludes.split(\",\"));\n    }\n    \n    include.clear();\n    String includes = getStringFromContext(\"include\", \"\");\n    if (includes != null && !includes.trim().equals(\"\")) {\n      include = Arrays.asList(includes.split(\",\"));\n    }\n    batchSize = getIntFromContext(\"batchSize\", 20);\n    customFilter = getStringFromContext(\"customFilter\", \"\");\n    if (filters != null) filters.clear();\n    folderIter = null;\n    msgIter = null;\n            \n    String lastIndexTime = null;\n    String command = \n        String.valueOf(context.getRequestParameters().get(\"command\"));\n    if (!DataImporter.FULL_IMPORT_CMD.equals(command))\n      throw new IllegalArgumentException(this.getClass().getSimpleName()+\n          \" only supports \"+DataImporter.FULL_IMPORT_CMD);\n    \n    // Read the last_index_time out of the dataimport.properties if available\n    String cname = getStringFromContext(\"name\", \"mailimporter\");\n    String varName = ConfigNameConstants.IMPORTER_NS_SHORT + \".\" + cname + \".\"\n        + DocBuilder.LAST_INDEX_TIME;\n    Object varValue = context.getVariableResolver().resolve(varName);\n    if (\"1970-01-01 00:00:00\".equals(varValue) && \n        !\"\".equals(getStringFromContext(\"fetchMailsSince\", \"\"))) {\n      // favor fetchMailsSince in this case because the value from\n      // dataimport.properties is the default/init value\n      varValue = getStringFromContext(\"fetchMailsSince\", \"\");\n    }\n    \n    LOG.info(varName+\"=\"+varValue);    \n    if (varValue == null || \"\".equals(varValue)) {\n      varName = ConfigNameConstants.IMPORTER_NS_SHORT + \".\"\n          + DocBuilder.LAST_INDEX_TIME;\n      varValue = context.getVariableResolver().resolve(varName);\n      LOG.info(varName+\"=\"+varValue);\n    }\n      \n    if (varValue != null && varValue instanceof String) {\n      lastIndexTime = (String)varValue;\n      if (lastIndexTime != null && lastIndexTime.length() == 0)\n        lastIndexTime = null;\n    }\n            \n    if (lastIndexTime == null) \n      lastIndexTime = getStringFromContext(\"fetchMailsSince\", \"\");\n\n    LOG.info(\"Using lastIndexTime \"+lastIndexTime+\" for mail import\");\n    \n    this.fetchMailsSince = null;\n    if (lastIndexTime != null && lastIndexTime.length() > 0) {\n      try {\n        fetchMailsSince = sinceDateParser.parse(lastIndexTime);\n        LOG.info(\"Parsed fetchMailsSince=\" + lastIndexTime);\n      } catch (ParseException e) {\n        throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n            \"Invalid value for fetchMailSince: \" + lastIndexTime, e);\n      }\n    }\n        \n    fetchSize = getIntFromContext(\"fetchSize\", 32 * 1024);\n    cTimeout = getIntFromContext(\"connectTimeout\", 30 * 1000);\n    rTimeout = getIntFromContext(\"readTimeout\", 60 * 1000);\n    \n    String tmp = context.getEntityAttribute(\"includeOtherUserFolders\");\n    includeOtherUserFolders = (tmp != null && Boolean.valueOf(tmp.trim()));\n    tmp = context.getEntityAttribute(\"includeSharedFolders\");\n    includeSharedFolders = (tmp != null && Boolean.valueOf(tmp.trim()));\n    \n    setProcessAttachmentConfig();\n    includeContent = getBoolFromContext(\"includeContent\", true);\n          \n    logConfig();\n  }\n\n","sourceOld":"  public void init(Context context) {\n    super.init(context);\n    // set attributes using XXX getXXXFromContext(attribute, defualtValue);\n    // applies variable resolver and return default if value is not found or null\n    // REQUIRED : connection and folder info\n    user = getStringFromContext(\"user\", null);\n    password = getStringFromContext(\"password\", null);\n    host = getStringFromContext(\"host\", null);\n    protocol = getStringFromContext(\"protocol\", null);\n    folderNames = getStringFromContext(\"folders\", null);\n    // validate\n    if (host == null || protocol == null || user == null || password == null\n        || folderNames == null) throw new DataImportHandlerException(\n        DataImportHandlerException.SEVERE,\n        \"'user|password|protocol|host|folders' are required attributes\");\n    \n    // OPTIONAL : have defaults and are optional\n    recurse = getBoolFromContext(\"recurse\", true);\n    \n    exclude.clear();\n    String excludes = getStringFromContext(\"exclude\", \"\");\n    if (excludes != null && !excludes.trim().equals(\"\")) {\n      exclude = Arrays.asList(excludes.split(\",\"));\n    }\n    \n    include.clear();\n    String includes = getStringFromContext(\"include\", \"\");\n    if (includes != null && !includes.trim().equals(\"\")) {\n      include = Arrays.asList(includes.split(\",\"));\n    }\n    batchSize = getIntFromContext(\"batchSize\", 20);\n    customFilter = getStringFromContext(\"customFilter\", \"\");\n    if (filters != null) filters.clear();\n    folderIter = null;\n    msgIter = null;\n            \n    String lastIndexTime = null;\n    String command = \n        String.valueOf(context.getRequestParameters().get(\"command\"));\n    if (!DataImporter.FULL_IMPORT_CMD.equals(command))\n      throw new IllegalArgumentException(this.getClass().getSimpleName()+\n          \" only supports \"+DataImporter.FULL_IMPORT_CMD);\n    \n    // Read the last_index_time out of the dataimport.properties if available\n    String cname = getStringFromContext(\"name\", \"mailimporter\");\n    String varName = ConfigNameConstants.IMPORTER_NS_SHORT + \".\" + cname + \".\"\n        + DocBuilder.LAST_INDEX_TIME;\n    Object varValue = context.getVariableResolver().resolve(varName);\n    if (varValue == null || \"\".equals(varValue)) {\n      varName = ConfigNameConstants.IMPORTER_NS_SHORT + \".\"\n          + DocBuilder.LAST_INDEX_TIME;\n      varValue = context.getVariableResolver().resolve(varName);\n    }\n      \n    if (varValue != null && varValue instanceof String) {\n      lastIndexTime = (String)varValue;\n      if (lastIndexTime != null && lastIndexTime.length() == 0)\n        lastIndexTime = null;\n    }\n            \n    if (lastIndexTime == null) \n      lastIndexTime = getStringFromContext(\"fetchMailsSince\", \"\");\n\n    LOG.info(\"Using lastIndexTime \"+lastIndexTime+\" for mail import\");\n    \n    this.fetchMailsSince = null;\n    if (lastIndexTime != null && lastIndexTime.length() > 0) {\n      try {\n        fetchMailsSince = sinceDateParser.parse(lastIndexTime);\n        LOG.info(\"Parsed fetchMailsSince=\" + lastIndexTime);\n      } catch (ParseException e) {\n        throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n            \"Invalid value for fetchMailSince: \" + lastIndexTime, e);\n      }\n    }\n        \n    fetchSize = getIntFromContext(\"fetchSize\", 32 * 1024);\n    cTimeout = getIntFromContext(\"connectTimeout\", 30 * 1000);\n    rTimeout = getIntFromContext(\"readTimeout\", 60 * 1000);\n    \n    String tmp = context.getEntityAttribute(\"includeOtherUserFolders\");\n    includeOtherUserFolders = (tmp != null && Boolean.valueOf(tmp.trim()));\n    tmp = context.getEntityAttribute(\"includeSharedFolders\");\n    includeSharedFolders = (tmp != null && Boolean.valueOf(tmp.trim()));\n    \n    setProcessAttachmentConfig();\n    includeContent = getBoolFromContext(\"includeContent\", true);\n          \n    logConfig();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"044d8cd93e4b784cc77c279da996b7809b534e9a","date":1405695105,"type":3,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/contrib/dataimporthandler-extras/src/java/org/apache/solr/handler/dataimport/MailEntityProcessor#init(Context).mjava","pathOld":"solr/contrib/dataimporthandler-extras/src/java/org/apache/solr/handler/dataimport/MailEntityProcessor#init(Context).mjava","sourceNew":"  public void init(Context context) {\n    super.init(context);\n    // set attributes using XXX getXXXFromContext(attribute, defualtValue);\n    // applies variable resolver and return default if value is not found or null\n    // REQUIRED : connection and folder info\n    user = getStringFromContext(\"user\", null);\n    password = getStringFromContext(\"password\", null);\n    host = getStringFromContext(\"host\", null);\n    protocol = getStringFromContext(\"protocol\", null);\n    folderNames = getStringFromContext(\"folders\", null);\n    // validate\n    if (host == null || protocol == null || user == null || password == null\n        || folderNames == null) throw new DataImportHandlerException(\n        DataImportHandlerException.SEVERE,\n        \"'user|password|protocol|host|folders' are required attributes\");\n    \n    // OPTIONAL : have defaults and are optional\n    recurse = getBoolFromContext(\"recurse\", true);\n    \n    exclude.clear();\n    String excludes = getStringFromContext(\"exclude\", \"\");\n    if (excludes != null && !excludes.trim().equals(\"\")) {\n      exclude = Arrays.asList(excludes.split(\",\"));\n    }\n    \n    include.clear();\n    String includes = getStringFromContext(\"include\", \"\");\n    if (includes != null && !includes.trim().equals(\"\")) {\n      include = Arrays.asList(includes.split(\",\"));\n    }\n    batchSize = getIntFromContext(\"batchSize\", 20);\n    customFilter = getStringFromContext(\"customFilter\", \"\");\n    if (filters != null) filters.clear();\n    folderIter = null;\n    msgIter = null;\n            \n    String lastIndexTime = null;\n    String command = \n        String.valueOf(context.getRequestParameters().get(\"command\"));\n    if (!DataImporter.FULL_IMPORT_CMD.equals(command))\n      throw new IllegalArgumentException(this.getClass().getSimpleName()+\n          \" only supports \"+DataImporter.FULL_IMPORT_CMD);\n    \n    // Read the last_index_time out of the dataimport.properties if available\n    String cname = getStringFromContext(\"name\", \"mailimporter\");\n    String varName = ConfigNameConstants.IMPORTER_NS_SHORT + \".\" + cname + \".\"\n        + DocBuilder.LAST_INDEX_TIME;\n    Object varValue = context.getVariableResolver().resolve(varName);\n    LOG.info(varName+\"=\"+varValue);    \n    \n    if (varValue != null && !\"\".equals(varValue) && \n        !\"\".equals(getStringFromContext(\"fetchMailsSince\", \"\"))) {\n\n      // need to check if varValue is the epoch, which we'll take to mean the\n      // initial value, in which case means we should use fetchMailsSince instead\n      Date tmp = null;\n      try {\n        tmp = sinceDateParser.parse((String)varValue);\n        if (tmp.getTime() == 0) {\n          LOG.info(\"Ignoring initial value \"+varValue+\" for \"+varName+\n              \" in favor of fetchMailsSince config parameter\");\n          tmp = null; // don't use this value\n        }\n      } catch (ParseException e) {\n        // probably ok to ignore this since we have other options below\n        // as we're just trying to figure out if the date is 0\n        LOG.warn(\"Failed to parse \"+varValue+\" from \"+varName+\" due to: \"+e);\n      }    \n      \n      if (tmp == null) {\n        // favor fetchMailsSince in this case because the value from\n        // dataimport.properties is the default/init value\n        varValue = getStringFromContext(\"fetchMailsSince\", \"\");\n        LOG.info(\"fetchMailsSince=\"+varValue);            \n      }\n    }\n    \n    if (varValue == null || \"\".equals(varValue)) {\n      varName = ConfigNameConstants.IMPORTER_NS_SHORT + \".\"\n          + DocBuilder.LAST_INDEX_TIME;\n      varValue = context.getVariableResolver().resolve(varName);\n      LOG.info(varName+\"=\"+varValue);\n    }\n      \n    if (varValue != null && varValue instanceof String) {\n      lastIndexTime = (String)varValue;\n      if (lastIndexTime != null && lastIndexTime.length() == 0)\n        lastIndexTime = null;\n    }\n            \n    if (lastIndexTime == null) \n      lastIndexTime = getStringFromContext(\"fetchMailsSince\", \"\");\n\n    LOG.info(\"Using lastIndexTime \"+lastIndexTime+\" for mail import\");\n    \n    this.fetchMailsSince = null;\n    if (lastIndexTime != null && lastIndexTime.length() > 0) {\n      try {\n        fetchMailsSince = sinceDateParser.parse(lastIndexTime);\n        LOG.info(\"Parsed fetchMailsSince=\" + lastIndexTime);\n      } catch (ParseException e) {\n        throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n            \"Invalid value for fetchMailSince: \" + lastIndexTime, e);\n      }\n    }\n        \n    fetchSize = getIntFromContext(\"fetchSize\", 32 * 1024);\n    cTimeout = getIntFromContext(\"connectTimeout\", 30 * 1000);\n    rTimeout = getIntFromContext(\"readTimeout\", 60 * 1000);\n    \n    String tmp = context.getEntityAttribute(\"includeOtherUserFolders\");\n    includeOtherUserFolders = (tmp != null && Boolean.valueOf(tmp.trim()));\n    tmp = context.getEntityAttribute(\"includeSharedFolders\");\n    includeSharedFolders = (tmp != null && Boolean.valueOf(tmp.trim()));\n    \n    setProcessAttachmentConfig();\n    includeContent = getBoolFromContext(\"includeContent\", true);\n          \n    logConfig();\n  }\n\n","sourceOld":"  public void init(Context context) {\n    super.init(context);\n    // set attributes using XXX getXXXFromContext(attribute, defualtValue);\n    // applies variable resolver and return default if value is not found or null\n    // REQUIRED : connection and folder info\n    user = getStringFromContext(\"user\", null);\n    password = getStringFromContext(\"password\", null);\n    host = getStringFromContext(\"host\", null);\n    protocol = getStringFromContext(\"protocol\", null);\n    folderNames = getStringFromContext(\"folders\", null);\n    // validate\n    if (host == null || protocol == null || user == null || password == null\n        || folderNames == null) throw new DataImportHandlerException(\n        DataImportHandlerException.SEVERE,\n        \"'user|password|protocol|host|folders' are required attributes\");\n    \n    // OPTIONAL : have defaults and are optional\n    recurse = getBoolFromContext(\"recurse\", true);\n    \n    exclude.clear();\n    String excludes = getStringFromContext(\"exclude\", \"\");\n    if (excludes != null && !excludes.trim().equals(\"\")) {\n      exclude = Arrays.asList(excludes.split(\",\"));\n    }\n    \n    include.clear();\n    String includes = getStringFromContext(\"include\", \"\");\n    if (includes != null && !includes.trim().equals(\"\")) {\n      include = Arrays.asList(includes.split(\",\"));\n    }\n    batchSize = getIntFromContext(\"batchSize\", 20);\n    customFilter = getStringFromContext(\"customFilter\", \"\");\n    if (filters != null) filters.clear();\n    folderIter = null;\n    msgIter = null;\n            \n    String lastIndexTime = null;\n    String command = \n        String.valueOf(context.getRequestParameters().get(\"command\"));\n    if (!DataImporter.FULL_IMPORT_CMD.equals(command))\n      throw new IllegalArgumentException(this.getClass().getSimpleName()+\n          \" only supports \"+DataImporter.FULL_IMPORT_CMD);\n    \n    // Read the last_index_time out of the dataimport.properties if available\n    String cname = getStringFromContext(\"name\", \"mailimporter\");\n    String varName = ConfigNameConstants.IMPORTER_NS_SHORT + \".\" + cname + \".\"\n        + DocBuilder.LAST_INDEX_TIME;\n    Object varValue = context.getVariableResolver().resolve(varName);\n    if (\"1970-01-01 00:00:00\".equals(varValue) && \n        !\"\".equals(getStringFromContext(\"fetchMailsSince\", \"\"))) {\n      // favor fetchMailsSince in this case because the value from\n      // dataimport.properties is the default/init value\n      varValue = getStringFromContext(\"fetchMailsSince\", \"\");\n    }\n    \n    LOG.info(varName+\"=\"+varValue);    \n    if (varValue == null || \"\".equals(varValue)) {\n      varName = ConfigNameConstants.IMPORTER_NS_SHORT + \".\"\n          + DocBuilder.LAST_INDEX_TIME;\n      varValue = context.getVariableResolver().resolve(varName);\n      LOG.info(varName+\"=\"+varValue);\n    }\n      \n    if (varValue != null && varValue instanceof String) {\n      lastIndexTime = (String)varValue;\n      if (lastIndexTime != null && lastIndexTime.length() == 0)\n        lastIndexTime = null;\n    }\n            \n    if (lastIndexTime == null) \n      lastIndexTime = getStringFromContext(\"fetchMailsSince\", \"\");\n\n    LOG.info(\"Using lastIndexTime \"+lastIndexTime+\" for mail import\");\n    \n    this.fetchMailsSince = null;\n    if (lastIndexTime != null && lastIndexTime.length() > 0) {\n      try {\n        fetchMailsSince = sinceDateParser.parse(lastIndexTime);\n        LOG.info(\"Parsed fetchMailsSince=\" + lastIndexTime);\n      } catch (ParseException e) {\n        throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n            \"Invalid value for fetchMailSince: \" + lastIndexTime, e);\n      }\n    }\n        \n    fetchSize = getIntFromContext(\"fetchSize\", 32 * 1024);\n    cTimeout = getIntFromContext(\"connectTimeout\", 30 * 1000);\n    rTimeout = getIntFromContext(\"readTimeout\", 60 * 1000);\n    \n    String tmp = context.getEntityAttribute(\"includeOtherUserFolders\");\n    includeOtherUserFolders = (tmp != null && Boolean.valueOf(tmp.trim()));\n    tmp = context.getEntityAttribute(\"includeSharedFolders\");\n    includeSharedFolders = (tmp != null && Boolean.valueOf(tmp.trim()));\n    \n    setProcessAttachmentConfig();\n    includeContent = getBoolFromContext(\"includeContent\", true);\n          \n    logConfig();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd","date":1534976797,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/contrib/dataimporthandler-extras/src/java/org/apache/solr/handler/dataimport/MailEntityProcessor#init(Context).mjava","pathOld":"solr/contrib/dataimporthandler-extras/src/java/org/apache/solr/handler/dataimport/MailEntityProcessor#init(Context).mjava","sourceNew":"  public void init(Context context) {\n    super.init(context);\n    // set attributes using XXX getXXXFromContext(attribute, defualtValue);\n    // applies variable resolver and return default if value is not found or null\n    // REQUIRED : connection and folder info\n    user = getStringFromContext(\"user\", null);\n    password = getStringFromContext(\"password\", null);\n    host = getStringFromContext(\"host\", null);\n    protocol = getStringFromContext(\"protocol\", null);\n    folderNames = getStringFromContext(\"folders\", null);\n    // validate\n    if (host == null || protocol == null || user == null || password == null\n        || folderNames == null) throw new DataImportHandlerException(\n        DataImportHandlerException.SEVERE,\n        \"'user|password|protocol|host|folders' are required attributes\");\n    \n    // OPTIONAL : have defaults and are optional\n    recurse = getBoolFromContext(\"recurse\", true);\n    \n    exclude.clear();\n    String excludes = getStringFromContext(\"exclude\", \"\");\n    if (excludes != null && !excludes.trim().equals(\"\")) {\n      exclude = Arrays.asList(excludes.split(\",\"));\n    }\n    \n    include.clear();\n    String includes = getStringFromContext(\"include\", \"\");\n    if (includes != null && !includes.trim().equals(\"\")) {\n      include = Arrays.asList(includes.split(\",\"));\n    }\n    batchSize = getIntFromContext(\"batchSize\", 20);\n    customFilter = getStringFromContext(\"customFilter\", \"\");\n    if (filters != null) filters.clear();\n    folderIter = null;\n    msgIter = null;\n            \n    String lastIndexTime = null;\n    String command = \n        String.valueOf(context.getRequestParameters().get(\"command\"));\n    if (!DataImporter.FULL_IMPORT_CMD.equals(command))\n      throw new IllegalArgumentException(this.getClass().getSimpleName()+\n          \" only supports \"+DataImporter.FULL_IMPORT_CMD);\n    \n    // Read the last_index_time out of the dataimport.properties if available\n    String cname = getStringFromContext(\"name\", \"mailimporter\");\n    String varName = ConfigNameConstants.IMPORTER_NS_SHORT + \".\" + cname + \".\"\n        + DocBuilder.LAST_INDEX_TIME;\n    Object varValue = context.getVariableResolver().resolve(varName);\n    log.info(varName+\"=\"+varValue);\n    \n    if (varValue != null && !\"\".equals(varValue) && \n        !\"\".equals(getStringFromContext(\"fetchMailsSince\", \"\"))) {\n\n      // need to check if varValue is the epoch, which we'll take to mean the\n      // initial value, in which case means we should use fetchMailsSince instead\n      Date tmp = null;\n      try {\n        tmp = sinceDateParser.parse((String)varValue);\n        if (tmp.getTime() == 0) {\n          log.info(\"Ignoring initial value \"+varValue+\" for \"+varName+\n              \" in favor of fetchMailsSince config parameter\");\n          tmp = null; // don't use this value\n        }\n      } catch (ParseException e) {\n        // probably ok to ignore this since we have other options below\n        // as we're just trying to figure out if the date is 0\n        log.warn(\"Failed to parse \"+varValue+\" from \"+varName+\" due to: \"+e);\n      }    \n      \n      if (tmp == null) {\n        // favor fetchMailsSince in this case because the value from\n        // dataimport.properties is the default/init value\n        varValue = getStringFromContext(\"fetchMailsSince\", \"\");\n        log.info(\"fetchMailsSince=\"+varValue);\n      }\n    }\n    \n    if (varValue == null || \"\".equals(varValue)) {\n      varName = ConfigNameConstants.IMPORTER_NS_SHORT + \".\"\n          + DocBuilder.LAST_INDEX_TIME;\n      varValue = context.getVariableResolver().resolve(varName);\n      log.info(varName+\"=\"+varValue);\n    }\n      \n    if (varValue != null && varValue instanceof String) {\n      lastIndexTime = (String)varValue;\n      if (lastIndexTime != null && lastIndexTime.length() == 0)\n        lastIndexTime = null;\n    }\n            \n    if (lastIndexTime == null) \n      lastIndexTime = getStringFromContext(\"fetchMailsSince\", \"\");\n\n    log.info(\"Using lastIndexTime \"+lastIndexTime+\" for mail import\");\n    \n    this.fetchMailsSince = null;\n    if (lastIndexTime != null && lastIndexTime.length() > 0) {\n      try {\n        fetchMailsSince = sinceDateParser.parse(lastIndexTime);\n        log.info(\"Parsed fetchMailsSince=\" + lastIndexTime);\n      } catch (ParseException e) {\n        throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n            \"Invalid value for fetchMailSince: \" + lastIndexTime, e);\n      }\n    }\n        \n    fetchSize = getIntFromContext(\"fetchSize\", 32 * 1024);\n    cTimeout = getIntFromContext(\"connectTimeout\", 30 * 1000);\n    rTimeout = getIntFromContext(\"readTimeout\", 60 * 1000);\n    \n    String tmp = context.getEntityAttribute(\"includeOtherUserFolders\");\n    includeOtherUserFolders = (tmp != null && Boolean.valueOf(tmp.trim()));\n    tmp = context.getEntityAttribute(\"includeSharedFolders\");\n    includeSharedFolders = (tmp != null && Boolean.valueOf(tmp.trim()));\n    \n    setProcessAttachmentConfig();\n    includeContent = getBoolFromContext(\"includeContent\", true);\n          \n    logConfig();\n  }\n\n","sourceOld":"  public void init(Context context) {\n    super.init(context);\n    // set attributes using XXX getXXXFromContext(attribute, defualtValue);\n    // applies variable resolver and return default if value is not found or null\n    // REQUIRED : connection and folder info\n    user = getStringFromContext(\"user\", null);\n    password = getStringFromContext(\"password\", null);\n    host = getStringFromContext(\"host\", null);\n    protocol = getStringFromContext(\"protocol\", null);\n    folderNames = getStringFromContext(\"folders\", null);\n    // validate\n    if (host == null || protocol == null || user == null || password == null\n        || folderNames == null) throw new DataImportHandlerException(\n        DataImportHandlerException.SEVERE,\n        \"'user|password|protocol|host|folders' are required attributes\");\n    \n    // OPTIONAL : have defaults and are optional\n    recurse = getBoolFromContext(\"recurse\", true);\n    \n    exclude.clear();\n    String excludes = getStringFromContext(\"exclude\", \"\");\n    if (excludes != null && !excludes.trim().equals(\"\")) {\n      exclude = Arrays.asList(excludes.split(\",\"));\n    }\n    \n    include.clear();\n    String includes = getStringFromContext(\"include\", \"\");\n    if (includes != null && !includes.trim().equals(\"\")) {\n      include = Arrays.asList(includes.split(\",\"));\n    }\n    batchSize = getIntFromContext(\"batchSize\", 20);\n    customFilter = getStringFromContext(\"customFilter\", \"\");\n    if (filters != null) filters.clear();\n    folderIter = null;\n    msgIter = null;\n            \n    String lastIndexTime = null;\n    String command = \n        String.valueOf(context.getRequestParameters().get(\"command\"));\n    if (!DataImporter.FULL_IMPORT_CMD.equals(command))\n      throw new IllegalArgumentException(this.getClass().getSimpleName()+\n          \" only supports \"+DataImporter.FULL_IMPORT_CMD);\n    \n    // Read the last_index_time out of the dataimport.properties if available\n    String cname = getStringFromContext(\"name\", \"mailimporter\");\n    String varName = ConfigNameConstants.IMPORTER_NS_SHORT + \".\" + cname + \".\"\n        + DocBuilder.LAST_INDEX_TIME;\n    Object varValue = context.getVariableResolver().resolve(varName);\n    LOG.info(varName+\"=\"+varValue);    \n    \n    if (varValue != null && !\"\".equals(varValue) && \n        !\"\".equals(getStringFromContext(\"fetchMailsSince\", \"\"))) {\n\n      // need to check if varValue is the epoch, which we'll take to mean the\n      // initial value, in which case means we should use fetchMailsSince instead\n      Date tmp = null;\n      try {\n        tmp = sinceDateParser.parse((String)varValue);\n        if (tmp.getTime() == 0) {\n          LOG.info(\"Ignoring initial value \"+varValue+\" for \"+varName+\n              \" in favor of fetchMailsSince config parameter\");\n          tmp = null; // don't use this value\n        }\n      } catch (ParseException e) {\n        // probably ok to ignore this since we have other options below\n        // as we're just trying to figure out if the date is 0\n        LOG.warn(\"Failed to parse \"+varValue+\" from \"+varName+\" due to: \"+e);\n      }    \n      \n      if (tmp == null) {\n        // favor fetchMailsSince in this case because the value from\n        // dataimport.properties is the default/init value\n        varValue = getStringFromContext(\"fetchMailsSince\", \"\");\n        LOG.info(\"fetchMailsSince=\"+varValue);            \n      }\n    }\n    \n    if (varValue == null || \"\".equals(varValue)) {\n      varName = ConfigNameConstants.IMPORTER_NS_SHORT + \".\"\n          + DocBuilder.LAST_INDEX_TIME;\n      varValue = context.getVariableResolver().resolve(varName);\n      LOG.info(varName+\"=\"+varValue);\n    }\n      \n    if (varValue != null && varValue instanceof String) {\n      lastIndexTime = (String)varValue;\n      if (lastIndexTime != null && lastIndexTime.length() == 0)\n        lastIndexTime = null;\n    }\n            \n    if (lastIndexTime == null) \n      lastIndexTime = getStringFromContext(\"fetchMailsSince\", \"\");\n\n    LOG.info(\"Using lastIndexTime \"+lastIndexTime+\" for mail import\");\n    \n    this.fetchMailsSince = null;\n    if (lastIndexTime != null && lastIndexTime.length() > 0) {\n      try {\n        fetchMailsSince = sinceDateParser.parse(lastIndexTime);\n        LOG.info(\"Parsed fetchMailsSince=\" + lastIndexTime);\n      } catch (ParseException e) {\n        throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n            \"Invalid value for fetchMailSince: \" + lastIndexTime, e);\n      }\n    }\n        \n    fetchSize = getIntFromContext(\"fetchSize\", 32 * 1024);\n    cTimeout = getIntFromContext(\"connectTimeout\", 30 * 1000);\n    rTimeout = getIntFromContext(\"readTimeout\", 60 * 1000);\n    \n    String tmp = context.getEntityAttribute(\"includeOtherUserFolders\");\n    includeOtherUserFolders = (tmp != null && Boolean.valueOf(tmp.trim()));\n    tmp = context.getEntityAttribute(\"includeSharedFolders\");\n    includeSharedFolders = (tmp != null && Boolean.valueOf(tmp.trim()));\n    \n    setProcessAttachmentConfig();\n    includeContent = getBoolFromContext(\"includeContent\", true);\n          \n    logConfig();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d9dc9499459fb664f42d5a938522cf3ab49da3cd","date":1543931398,"type":3,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/contrib/dataimporthandler-extras/src/java/org/apache/solr/handler/dataimport/MailEntityProcessor#init(Context).mjava","pathOld":"solr/contrib/dataimporthandler-extras/src/java/org/apache/solr/handler/dataimport/MailEntityProcessor#init(Context).mjava","sourceNew":"  public void init(Context context) {\n    super.init(context);\n    // set attributes using XXX getXXXFromContext(attribute, defaultValue);\n    // applies variable resolver and return default if value is not found or null\n    // REQUIRED : connection and folder info\n    user = getStringFromContext(\"user\", null);\n    password = getStringFromContext(\"password\", null);\n    host = getStringFromContext(\"host\", null);\n    protocol = getStringFromContext(\"protocol\", null);\n    folderNames = getStringFromContext(\"folders\", null);\n    // validate\n    if (host == null || protocol == null || user == null || password == null\n        || folderNames == null) throw new DataImportHandlerException(\n        DataImportHandlerException.SEVERE,\n        \"'user|password|protocol|host|folders' are required attributes\");\n    \n    // OPTIONAL : have defaults and are optional\n    recurse = getBoolFromContext(\"recurse\", true);\n    \n    exclude.clear();\n    String excludes = getStringFromContext(\"exclude\", \"\");\n    if (excludes != null && !excludes.trim().equals(\"\")) {\n      exclude = Arrays.asList(excludes.split(\",\"));\n    }\n    \n    include.clear();\n    String includes = getStringFromContext(\"include\", \"\");\n    if (includes != null && !includes.trim().equals(\"\")) {\n      include = Arrays.asList(includes.split(\",\"));\n    }\n    batchSize = getIntFromContext(\"batchSize\", 20);\n    customFilter = getStringFromContext(\"customFilter\", \"\");\n    if (filters != null) filters.clear();\n    folderIter = null;\n    msgIter = null;\n            \n    String lastIndexTime = null;\n    String command = \n        String.valueOf(context.getRequestParameters().get(\"command\"));\n    if (!DataImporter.FULL_IMPORT_CMD.equals(command))\n      throw new IllegalArgumentException(this.getClass().getSimpleName()+\n          \" only supports \"+DataImporter.FULL_IMPORT_CMD);\n    \n    // Read the last_index_time out of the dataimport.properties if available\n    String cname = getStringFromContext(\"name\", \"mailimporter\");\n    String varName = ConfigNameConstants.IMPORTER_NS_SHORT + \".\" + cname + \".\"\n        + DocBuilder.LAST_INDEX_TIME;\n    Object varValue = context.getVariableResolver().resolve(varName);\n    log.info(varName+\"=\"+varValue);\n    \n    if (varValue != null && !\"\".equals(varValue) && \n        !\"\".equals(getStringFromContext(\"fetchMailsSince\", \"\"))) {\n\n      // need to check if varValue is the epoch, which we'll take to mean the\n      // initial value, in which case means we should use fetchMailsSince instead\n      Date tmp = null;\n      try {\n        tmp = sinceDateParser.parse((String)varValue);\n        if (tmp.getTime() == 0) {\n          log.info(\"Ignoring initial value \"+varValue+\" for \"+varName+\n              \" in favor of fetchMailsSince config parameter\");\n          tmp = null; // don't use this value\n        }\n      } catch (ParseException e) {\n        // probably ok to ignore this since we have other options below\n        // as we're just trying to figure out if the date is 0\n        log.warn(\"Failed to parse \"+varValue+\" from \"+varName+\" due to: \"+e);\n      }    \n      \n      if (tmp == null) {\n        // favor fetchMailsSince in this case because the value from\n        // dataimport.properties is the default/init value\n        varValue = getStringFromContext(\"fetchMailsSince\", \"\");\n        log.info(\"fetchMailsSince=\"+varValue);\n      }\n    }\n    \n    if (varValue == null || \"\".equals(varValue)) {\n      varName = ConfigNameConstants.IMPORTER_NS_SHORT + \".\"\n          + DocBuilder.LAST_INDEX_TIME;\n      varValue = context.getVariableResolver().resolve(varName);\n      log.info(varName+\"=\"+varValue);\n    }\n      \n    if (varValue != null && varValue instanceof String) {\n      lastIndexTime = (String)varValue;\n      if (lastIndexTime != null && lastIndexTime.length() == 0)\n        lastIndexTime = null;\n    }\n            \n    if (lastIndexTime == null) \n      lastIndexTime = getStringFromContext(\"fetchMailsSince\", \"\");\n\n    log.info(\"Using lastIndexTime \"+lastIndexTime+\" for mail import\");\n    \n    this.fetchMailsSince = null;\n    if (lastIndexTime != null && lastIndexTime.length() > 0) {\n      try {\n        fetchMailsSince = sinceDateParser.parse(lastIndexTime);\n        log.info(\"Parsed fetchMailsSince=\" + lastIndexTime);\n      } catch (ParseException e) {\n        throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n            \"Invalid value for fetchMailSince: \" + lastIndexTime, e);\n      }\n    }\n        \n    fetchSize = getIntFromContext(\"fetchSize\", 32 * 1024);\n    cTimeout = getIntFromContext(\"connectTimeout\", 30 * 1000);\n    rTimeout = getIntFromContext(\"readTimeout\", 60 * 1000);\n    \n    String tmp = context.getEntityAttribute(\"includeOtherUserFolders\");\n    includeOtherUserFolders = (tmp != null && Boolean.valueOf(tmp.trim()));\n    tmp = context.getEntityAttribute(\"includeSharedFolders\");\n    includeSharedFolders = (tmp != null && Boolean.valueOf(tmp.trim()));\n    \n    setProcessAttachmentConfig();\n    includeContent = getBoolFromContext(\"includeContent\", true);\n          \n    logConfig();\n  }\n\n","sourceOld":"  public void init(Context context) {\n    super.init(context);\n    // set attributes using XXX getXXXFromContext(attribute, defualtValue);\n    // applies variable resolver and return default if value is not found or null\n    // REQUIRED : connection and folder info\n    user = getStringFromContext(\"user\", null);\n    password = getStringFromContext(\"password\", null);\n    host = getStringFromContext(\"host\", null);\n    protocol = getStringFromContext(\"protocol\", null);\n    folderNames = getStringFromContext(\"folders\", null);\n    // validate\n    if (host == null || protocol == null || user == null || password == null\n        || folderNames == null) throw new DataImportHandlerException(\n        DataImportHandlerException.SEVERE,\n        \"'user|password|protocol|host|folders' are required attributes\");\n    \n    // OPTIONAL : have defaults and are optional\n    recurse = getBoolFromContext(\"recurse\", true);\n    \n    exclude.clear();\n    String excludes = getStringFromContext(\"exclude\", \"\");\n    if (excludes != null && !excludes.trim().equals(\"\")) {\n      exclude = Arrays.asList(excludes.split(\",\"));\n    }\n    \n    include.clear();\n    String includes = getStringFromContext(\"include\", \"\");\n    if (includes != null && !includes.trim().equals(\"\")) {\n      include = Arrays.asList(includes.split(\",\"));\n    }\n    batchSize = getIntFromContext(\"batchSize\", 20);\n    customFilter = getStringFromContext(\"customFilter\", \"\");\n    if (filters != null) filters.clear();\n    folderIter = null;\n    msgIter = null;\n            \n    String lastIndexTime = null;\n    String command = \n        String.valueOf(context.getRequestParameters().get(\"command\"));\n    if (!DataImporter.FULL_IMPORT_CMD.equals(command))\n      throw new IllegalArgumentException(this.getClass().getSimpleName()+\n          \" only supports \"+DataImporter.FULL_IMPORT_CMD);\n    \n    // Read the last_index_time out of the dataimport.properties if available\n    String cname = getStringFromContext(\"name\", \"mailimporter\");\n    String varName = ConfigNameConstants.IMPORTER_NS_SHORT + \".\" + cname + \".\"\n        + DocBuilder.LAST_INDEX_TIME;\n    Object varValue = context.getVariableResolver().resolve(varName);\n    log.info(varName+\"=\"+varValue);\n    \n    if (varValue != null && !\"\".equals(varValue) && \n        !\"\".equals(getStringFromContext(\"fetchMailsSince\", \"\"))) {\n\n      // need to check if varValue is the epoch, which we'll take to mean the\n      // initial value, in which case means we should use fetchMailsSince instead\n      Date tmp = null;\n      try {\n        tmp = sinceDateParser.parse((String)varValue);\n        if (tmp.getTime() == 0) {\n          log.info(\"Ignoring initial value \"+varValue+\" for \"+varName+\n              \" in favor of fetchMailsSince config parameter\");\n          tmp = null; // don't use this value\n        }\n      } catch (ParseException e) {\n        // probably ok to ignore this since we have other options below\n        // as we're just trying to figure out if the date is 0\n        log.warn(\"Failed to parse \"+varValue+\" from \"+varName+\" due to: \"+e);\n      }    \n      \n      if (tmp == null) {\n        // favor fetchMailsSince in this case because the value from\n        // dataimport.properties is the default/init value\n        varValue = getStringFromContext(\"fetchMailsSince\", \"\");\n        log.info(\"fetchMailsSince=\"+varValue);\n      }\n    }\n    \n    if (varValue == null || \"\".equals(varValue)) {\n      varName = ConfigNameConstants.IMPORTER_NS_SHORT + \".\"\n          + DocBuilder.LAST_INDEX_TIME;\n      varValue = context.getVariableResolver().resolve(varName);\n      log.info(varName+\"=\"+varValue);\n    }\n      \n    if (varValue != null && varValue instanceof String) {\n      lastIndexTime = (String)varValue;\n      if (lastIndexTime != null && lastIndexTime.length() == 0)\n        lastIndexTime = null;\n    }\n            \n    if (lastIndexTime == null) \n      lastIndexTime = getStringFromContext(\"fetchMailsSince\", \"\");\n\n    log.info(\"Using lastIndexTime \"+lastIndexTime+\" for mail import\");\n    \n    this.fetchMailsSince = null;\n    if (lastIndexTime != null && lastIndexTime.length() > 0) {\n      try {\n        fetchMailsSince = sinceDateParser.parse(lastIndexTime);\n        log.info(\"Parsed fetchMailsSince=\" + lastIndexTime);\n      } catch (ParseException e) {\n        throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n            \"Invalid value for fetchMailSince: \" + lastIndexTime, e);\n      }\n    }\n        \n    fetchSize = getIntFromContext(\"fetchSize\", 32 * 1024);\n    cTimeout = getIntFromContext(\"connectTimeout\", 30 * 1000);\n    rTimeout = getIntFromContext(\"readTimeout\", 60 * 1000);\n    \n    String tmp = context.getEntityAttribute(\"includeOtherUserFolders\");\n    includeOtherUserFolders = (tmp != null && Boolean.valueOf(tmp.trim()));\n    tmp = context.getEntityAttribute(\"includeSharedFolders\");\n    includeSharedFolders = (tmp != null && Boolean.valueOf(tmp.trim()));\n    \n    setProcessAttachmentConfig();\n    includeContent = getBoolFromContext(\"includeContent\", true);\n          \n    logConfig();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a966532d92cf9ba2856f15a8140151bb6b518e4b","date":1588290631,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/contrib/dataimporthandler-extras/src/java/org/apache/solr/handler/dataimport/MailEntityProcessor#init(Context).mjava","pathOld":"solr/contrib/dataimporthandler-extras/src/java/org/apache/solr/handler/dataimport/MailEntityProcessor#init(Context).mjava","sourceNew":"  public void init(Context context) {\n    super.init(context);\n    // set attributes using XXX getXXXFromContext(attribute, defaultValue);\n    // applies variable resolver and return default if value is not found or null\n    // REQUIRED : connection and folder info\n    user = getStringFromContext(\"user\", null);\n    password = getStringFromContext(\"password\", null);\n    host = getStringFromContext(\"host\", null);\n    protocol = getStringFromContext(\"protocol\", null);\n    folderNames = getStringFromContext(\"folders\", null);\n    // validate\n    if (host == null || protocol == null || user == null || password == null\n        || folderNames == null) throw new DataImportHandlerException(\n        DataImportHandlerException.SEVERE,\n        \"'user|password|protocol|host|folders' are required attributes\");\n    \n    // OPTIONAL : have defaults and are optional\n    recurse = getBoolFromContext(\"recurse\", true);\n    \n    exclude.clear();\n    String excludes = getStringFromContext(\"exclude\", \"\");\n    if (excludes != null && !excludes.trim().equals(\"\")) {\n      exclude = Arrays.asList(excludes.split(\",\"));\n    }\n    \n    include.clear();\n    String includes = getStringFromContext(\"include\", \"\");\n    if (includes != null && !includes.trim().equals(\"\")) {\n      include = Arrays.asList(includes.split(\",\"));\n    }\n    batchSize = getIntFromContext(\"batchSize\", 20);\n    customFilter = getStringFromContext(\"customFilter\", \"\");\n    if (filters != null) filters.clear();\n    folderIter = null;\n    msgIter = null;\n            \n    String lastIndexTime = null;\n    String command = \n        String.valueOf(context.getRequestParameters().get(\"command\"));\n    if (!DataImporter.FULL_IMPORT_CMD.equals(command))\n      throw new IllegalArgumentException(this.getClass().getSimpleName()+\n          \" only supports \"+DataImporter.FULL_IMPORT_CMD);\n    \n    // Read the last_index_time out of the dataimport.properties if available\n    String cname = getStringFromContext(\"name\", \"mailimporter\");\n    String varName = ConfigNameConstants.IMPORTER_NS_SHORT + \".\" + cname + \".\"\n        + DocBuilder.LAST_INDEX_TIME;\n    Object varValue = context.getVariableResolver().resolve(varName);\n    log.info(\"{}={}\", varName, varValue);\n    \n    if (varValue != null && !\"\".equals(varValue) && \n        !\"\".equals(getStringFromContext(\"fetchMailsSince\", \"\"))) {\n\n      // need to check if varValue is the epoch, which we'll take to mean the\n      // initial value, in which case means we should use fetchMailsSince instead\n      Date tmp = null;\n      try {\n        tmp = sinceDateParser.parse((String)varValue);\n        if (tmp.getTime() == 0) {\n          log.info(\"Ignoring initial value {} for {} in favor of fetchMailsSince config parameter\"\n              , varValue, varName);\n          tmp = null; // don't use this value\n        }\n      } catch (ParseException e) {\n        // probably ok to ignore this since we have other options below\n        // as we're just trying to figure out if the date is 0\n        log.warn(\"Failed to parse {} from {} due to\", varValue, varName, e);\n      }    \n      \n      if (tmp == null) {\n        // favor fetchMailsSince in this case because the value from\n        // dataimport.properties is the default/init value\n        varValue = getStringFromContext(\"fetchMailsSince\", \"\");\n        log.info(\"fetchMailsSince={}\", varValue);\n      }\n    }\n    \n    if (varValue == null || \"\".equals(varValue)) {\n      varName = ConfigNameConstants.IMPORTER_NS_SHORT + \".\"\n          + DocBuilder.LAST_INDEX_TIME;\n      varValue = context.getVariableResolver().resolve(varName);\n      log.info(\"{}={}\", varName, varValue);\n    }\n      \n    if (varValue != null && varValue instanceof String) {\n      lastIndexTime = (String)varValue;\n      if (lastIndexTime != null && lastIndexTime.length() == 0)\n        lastIndexTime = null;\n    }\n            \n    if (lastIndexTime == null) \n      lastIndexTime = getStringFromContext(\"fetchMailsSince\", \"\");\n\n    log.info(\"Using lastIndexTime {} for mail import\", lastIndexTime);\n    \n    this.fetchMailsSince = null;\n    if (lastIndexTime != null && lastIndexTime.length() > 0) {\n      try {\n        fetchMailsSince = sinceDateParser.parse(lastIndexTime);\n        log.info(\"Parsed fetchMailsSince={}\", lastIndexTime);\n      } catch (ParseException e) {\n        throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n            \"Invalid value for fetchMailSince: \" + lastIndexTime, e);\n      }\n    }\n        \n    fetchSize = getIntFromContext(\"fetchSize\", 32 * 1024);\n    cTimeout = getIntFromContext(\"connectTimeout\", 30 * 1000);\n    rTimeout = getIntFromContext(\"readTimeout\", 60 * 1000);\n    \n    String tmp = context.getEntityAttribute(\"includeOtherUserFolders\");\n    includeOtherUserFolders = (tmp != null && Boolean.valueOf(tmp.trim()));\n    tmp = context.getEntityAttribute(\"includeSharedFolders\");\n    includeSharedFolders = (tmp != null && Boolean.valueOf(tmp.trim()));\n    \n    setProcessAttachmentConfig();\n    includeContent = getBoolFromContext(\"includeContent\", true);\n          \n    logConfig();\n  }\n\n","sourceOld":"  public void init(Context context) {\n    super.init(context);\n    // set attributes using XXX getXXXFromContext(attribute, defaultValue);\n    // applies variable resolver and return default if value is not found or null\n    // REQUIRED : connection and folder info\n    user = getStringFromContext(\"user\", null);\n    password = getStringFromContext(\"password\", null);\n    host = getStringFromContext(\"host\", null);\n    protocol = getStringFromContext(\"protocol\", null);\n    folderNames = getStringFromContext(\"folders\", null);\n    // validate\n    if (host == null || protocol == null || user == null || password == null\n        || folderNames == null) throw new DataImportHandlerException(\n        DataImportHandlerException.SEVERE,\n        \"'user|password|protocol|host|folders' are required attributes\");\n    \n    // OPTIONAL : have defaults and are optional\n    recurse = getBoolFromContext(\"recurse\", true);\n    \n    exclude.clear();\n    String excludes = getStringFromContext(\"exclude\", \"\");\n    if (excludes != null && !excludes.trim().equals(\"\")) {\n      exclude = Arrays.asList(excludes.split(\",\"));\n    }\n    \n    include.clear();\n    String includes = getStringFromContext(\"include\", \"\");\n    if (includes != null && !includes.trim().equals(\"\")) {\n      include = Arrays.asList(includes.split(\",\"));\n    }\n    batchSize = getIntFromContext(\"batchSize\", 20);\n    customFilter = getStringFromContext(\"customFilter\", \"\");\n    if (filters != null) filters.clear();\n    folderIter = null;\n    msgIter = null;\n            \n    String lastIndexTime = null;\n    String command = \n        String.valueOf(context.getRequestParameters().get(\"command\"));\n    if (!DataImporter.FULL_IMPORT_CMD.equals(command))\n      throw new IllegalArgumentException(this.getClass().getSimpleName()+\n          \" only supports \"+DataImporter.FULL_IMPORT_CMD);\n    \n    // Read the last_index_time out of the dataimport.properties if available\n    String cname = getStringFromContext(\"name\", \"mailimporter\");\n    String varName = ConfigNameConstants.IMPORTER_NS_SHORT + \".\" + cname + \".\"\n        + DocBuilder.LAST_INDEX_TIME;\n    Object varValue = context.getVariableResolver().resolve(varName);\n    log.info(varName+\"=\"+varValue);\n    \n    if (varValue != null && !\"\".equals(varValue) && \n        !\"\".equals(getStringFromContext(\"fetchMailsSince\", \"\"))) {\n\n      // need to check if varValue is the epoch, which we'll take to mean the\n      // initial value, in which case means we should use fetchMailsSince instead\n      Date tmp = null;\n      try {\n        tmp = sinceDateParser.parse((String)varValue);\n        if (tmp.getTime() == 0) {\n          log.info(\"Ignoring initial value \"+varValue+\" for \"+varName+\n              \" in favor of fetchMailsSince config parameter\");\n          tmp = null; // don't use this value\n        }\n      } catch (ParseException e) {\n        // probably ok to ignore this since we have other options below\n        // as we're just trying to figure out if the date is 0\n        log.warn(\"Failed to parse \"+varValue+\" from \"+varName+\" due to: \"+e);\n      }    \n      \n      if (tmp == null) {\n        // favor fetchMailsSince in this case because the value from\n        // dataimport.properties is the default/init value\n        varValue = getStringFromContext(\"fetchMailsSince\", \"\");\n        log.info(\"fetchMailsSince=\"+varValue);\n      }\n    }\n    \n    if (varValue == null || \"\".equals(varValue)) {\n      varName = ConfigNameConstants.IMPORTER_NS_SHORT + \".\"\n          + DocBuilder.LAST_INDEX_TIME;\n      varValue = context.getVariableResolver().resolve(varName);\n      log.info(varName+\"=\"+varValue);\n    }\n      \n    if (varValue != null && varValue instanceof String) {\n      lastIndexTime = (String)varValue;\n      if (lastIndexTime != null && lastIndexTime.length() == 0)\n        lastIndexTime = null;\n    }\n            \n    if (lastIndexTime == null) \n      lastIndexTime = getStringFromContext(\"fetchMailsSince\", \"\");\n\n    log.info(\"Using lastIndexTime \"+lastIndexTime+\" for mail import\");\n    \n    this.fetchMailsSince = null;\n    if (lastIndexTime != null && lastIndexTime.length() > 0) {\n      try {\n        fetchMailsSince = sinceDateParser.parse(lastIndexTime);\n        log.info(\"Parsed fetchMailsSince=\" + lastIndexTime);\n      } catch (ParseException e) {\n        throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n            \"Invalid value for fetchMailSince: \" + lastIndexTime, e);\n      }\n    }\n        \n    fetchSize = getIntFromContext(\"fetchSize\", 32 * 1024);\n    cTimeout = getIntFromContext(\"connectTimeout\", 30 * 1000);\n    rTimeout = getIntFromContext(\"readTimeout\", 60 * 1000);\n    \n    String tmp = context.getEntityAttribute(\"includeOtherUserFolders\");\n    includeOtherUserFolders = (tmp != null && Boolean.valueOf(tmp.trim()));\n    tmp = context.getEntityAttribute(\"includeSharedFolders\");\n    includeSharedFolders = (tmp != null && Boolean.valueOf(tmp.trim()));\n    \n    setProcessAttachmentConfig();\n    includeContent = getBoolFromContext(\"includeContent\", true);\n          \n    logConfig();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b","date":1598712724,"type":4,"author":"Alexandre Rafalovitch","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/dataimporthandler-extras/src/java/org/apache/solr/handler/dataimport/MailEntityProcessor#init(Context).mjava","sourceNew":null,"sourceOld":"  public void init(Context context) {\n    super.init(context);\n    // set attributes using XXX getXXXFromContext(attribute, defaultValue);\n    // applies variable resolver and return default if value is not found or null\n    // REQUIRED : connection and folder info\n    user = getStringFromContext(\"user\", null);\n    password = getStringFromContext(\"password\", null);\n    host = getStringFromContext(\"host\", null);\n    protocol = getStringFromContext(\"protocol\", null);\n    folderNames = getStringFromContext(\"folders\", null);\n    // validate\n    if (host == null || protocol == null || user == null || password == null\n        || folderNames == null) throw new DataImportHandlerException(\n        DataImportHandlerException.SEVERE,\n        \"'user|password|protocol|host|folders' are required attributes\");\n    \n    // OPTIONAL : have defaults and are optional\n    recurse = getBoolFromContext(\"recurse\", true);\n    \n    exclude.clear();\n    String excludes = getStringFromContext(\"exclude\", \"\");\n    if (excludes != null && !excludes.trim().equals(\"\")) {\n      exclude = Arrays.asList(excludes.split(\",\"));\n    }\n    \n    include.clear();\n    String includes = getStringFromContext(\"include\", \"\");\n    if (includes != null && !includes.trim().equals(\"\")) {\n      include = Arrays.asList(includes.split(\",\"));\n    }\n    batchSize = getIntFromContext(\"batchSize\", 20);\n    customFilter = getStringFromContext(\"customFilter\", \"\");\n    if (filters != null) filters.clear();\n    folderIter = null;\n    msgIter = null;\n            \n    String lastIndexTime = null;\n    String command = \n        String.valueOf(context.getRequestParameters().get(\"command\"));\n    if (!DataImporter.FULL_IMPORT_CMD.equals(command))\n      throw new IllegalArgumentException(this.getClass().getSimpleName()+\n          \" only supports \"+DataImporter.FULL_IMPORT_CMD);\n    \n    // Read the last_index_time out of the dataimport.properties if available\n    String cname = getStringFromContext(\"name\", \"mailimporter\");\n    String varName = ConfigNameConstants.IMPORTER_NS_SHORT + \".\" + cname + \".\"\n        + DocBuilder.LAST_INDEX_TIME;\n    Object varValue = context.getVariableResolver().resolve(varName);\n    log.info(\"{}={}\", varName, varValue);\n    \n    if (varValue != null && !\"\".equals(varValue) && \n        !\"\".equals(getStringFromContext(\"fetchMailsSince\", \"\"))) {\n\n      // need to check if varValue is the epoch, which we'll take to mean the\n      // initial value, in which case means we should use fetchMailsSince instead\n      Date tmp = null;\n      try {\n        tmp = sinceDateParser.parse((String)varValue);\n        if (tmp.getTime() == 0) {\n          log.info(\"Ignoring initial value {} for {} in favor of fetchMailsSince config parameter\"\n              , varValue, varName);\n          tmp = null; // don't use this value\n        }\n      } catch (ParseException e) {\n        // probably ok to ignore this since we have other options below\n        // as we're just trying to figure out if the date is 0\n        log.warn(\"Failed to parse {} from {} due to\", varValue, varName, e);\n      }    \n      \n      if (tmp == null) {\n        // favor fetchMailsSince in this case because the value from\n        // dataimport.properties is the default/init value\n        varValue = getStringFromContext(\"fetchMailsSince\", \"\");\n        log.info(\"fetchMailsSince={}\", varValue);\n      }\n    }\n    \n    if (varValue == null || \"\".equals(varValue)) {\n      varName = ConfigNameConstants.IMPORTER_NS_SHORT + \".\"\n          + DocBuilder.LAST_INDEX_TIME;\n      varValue = context.getVariableResolver().resolve(varName);\n      log.info(\"{}={}\", varName, varValue);\n    }\n      \n    if (varValue != null && varValue instanceof String) {\n      lastIndexTime = (String)varValue;\n      if (lastIndexTime != null && lastIndexTime.length() == 0)\n        lastIndexTime = null;\n    }\n            \n    if (lastIndexTime == null) \n      lastIndexTime = getStringFromContext(\"fetchMailsSince\", \"\");\n\n    log.info(\"Using lastIndexTime {} for mail import\", lastIndexTime);\n    \n    this.fetchMailsSince = null;\n    if (lastIndexTime != null && lastIndexTime.length() > 0) {\n      try {\n        fetchMailsSince = sinceDateParser.parse(lastIndexTime);\n        log.info(\"Parsed fetchMailsSince={}\", lastIndexTime);\n      } catch (ParseException e) {\n        throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n            \"Invalid value for fetchMailSince: \" + lastIndexTime, e);\n      }\n    }\n        \n    fetchSize = getIntFromContext(\"fetchSize\", 32 * 1024);\n    cTimeout = getIntFromContext(\"connectTimeout\", 30 * 1000);\n    rTimeout = getIntFromContext(\"readTimeout\", 60 * 1000);\n    \n    String tmp = context.getEntityAttribute(\"includeOtherUserFolders\");\n    includeOtherUserFolders = (tmp != null && Boolean.valueOf(tmp.trim()));\n    tmp = context.getEntityAttribute(\"includeSharedFolders\");\n    includeSharedFolders = (tmp != null && Boolean.valueOf(tmp.trim()));\n    \n    setProcessAttachmentConfig();\n    includeContent = getBoolFromContext(\"includeContent\", true);\n          \n    logConfig();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d9dc9499459fb664f42d5a938522cf3ab49da3cd":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"db36cab313d5b26c5e9f23f828d863efc8b0281b":["c26f00b574427b55127e869b935845554afde1fa"],"36113efe922ae370819b20fba837a1a37d3dd2d8":["80249aaf913769676b1d45cdf0859ca70bd04fc8"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9ed208afa1e7aa98899ddb1dedfddedddf898253"],"0bac5e4f5082317c9a942b1deeeb22d6700ecff7":["36113efe922ae370819b20fba837a1a37d3dd2d8"],"407687e67faf6e1f02a211ca078d8e3eed631027":["b9e552a182fe576c92e94d61eb2e0f864ff2eb83","80249aaf913769676b1d45cdf0859ca70bd04fc8"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["c26f00b574427b55127e869b935845554afde1fa","db36cab313d5b26c5e9f23f828d863efc8b0281b"],"80249aaf913769676b1d45cdf0859ca70bd04fc8":["b9e552a182fe576c92e94d61eb2e0f864ff2eb83"],"0cd303657ee7726e12c45f9fd39b0285acf10c07":["0bac5e4f5082317c9a942b1deeeb22d6700ecff7"],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["d9dc9499459fb664f42d5a938522cf3ab49da3cd"],"9ed208afa1e7aa98899ddb1dedfddedddf898253":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["a966532d92cf9ba2856f15a8140151bb6b518e4b"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":["c26f00b574427b55127e869b935845554afde1fa","db36cab313d5b26c5e9f23f828d863efc8b0281b"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"044d8cd93e4b784cc77c279da996b7809b534e9a":["ca7d156662a7369a6ca2947adefed31886f3fa21"],"b9e552a182fe576c92e94d61eb2e0f864ff2eb83":["db36cab313d5b26c5e9f23f828d863efc8b0281b"],"ca7d156662a7369a6ca2947adefed31886f3fa21":["0cd303657ee7726e12c45f9fd39b0285acf10c07"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["044d8cd93e4b784cc77c279da996b7809b534e9a"]},"commit2Childs":{"d9dc9499459fb664f42d5a938522cf3ab49da3cd":["a966532d92cf9ba2856f15a8140151bb6b518e4b"],"db36cab313d5b26c5e9f23f828d863efc8b0281b":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","0d22ac6a4146774c1bc8400160fc0b6150294e92","b9e552a182fe576c92e94d61eb2e0f864ff2eb83"],"36113efe922ae370819b20fba837a1a37d3dd2d8":["0bac5e4f5082317c9a942b1deeeb22d6700ecff7"],"c26f00b574427b55127e869b935845554afde1fa":["db36cab313d5b26c5e9f23f828d863efc8b0281b","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","0d22ac6a4146774c1bc8400160fc0b6150294e92"],"0bac5e4f5082317c9a942b1deeeb22d6700ecff7":["0cd303657ee7726e12c45f9fd39b0285acf10c07"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"80249aaf913769676b1d45cdf0859ca70bd04fc8":["36113efe922ae370819b20fba837a1a37d3dd2d8","407687e67faf6e1f02a211ca078d8e3eed631027"],"0cd303657ee7726e12c45f9fd39b0285acf10c07":["ca7d156662a7369a6ca2947adefed31886f3fa21"],"9ed208afa1e7aa98899ddb1dedfddedddf898253":["c26f00b574427b55127e869b935845554afde1fa"],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b"],"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":[],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["9ed208afa1e7aa98899ddb1dedfddedddf898253"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","9ed208afa1e7aa98899ddb1dedfddedddf898253","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"044d8cd93e4b784cc77c279da996b7809b534e9a":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"b9e552a182fe576c92e94d61eb2e0f864ff2eb83":["407687e67faf6e1f02a211ca078d8e3eed631027","80249aaf913769676b1d45cdf0859ca70bd04fc8"],"ca7d156662a7369a6ca2947adefed31886f3fa21":["044d8cd93e4b784cc77c279da996b7809b534e9a"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["d9dc9499459fb664f42d5a938522cf3ab49da3cd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["407687e67faf6e1f02a211ca078d8e3eed631027","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","0d22ac6a4146774c1bc8400160fc0b6150294e92","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}