{"path":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/processors/LegacyNumericQueryNodeProcessor#postProcessNode(QueryNode).mjava","commits":[{"id":"683242c67a3f6086bae8b1354748fcaa38edfbd5","date":1457575601,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/processors/LegacyNumericQueryNodeProcessor#postProcessNode(QueryNode).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/processors/NumericQueryNodeProcessor#postProcessNode(QueryNode).mjava","sourceNew":"  @Override\n  protected QueryNode postProcessNode(QueryNode node) throws QueryNodeException {\n    \n    if (node instanceof FieldQueryNode\n        && !(node.getParent() instanceof RangeQueryNode)) {\n      \n      QueryConfigHandler config = getQueryConfigHandler();\n      \n      if (config != null) {\n        FieldQueryNode fieldNode = (FieldQueryNode) node;\n        FieldConfig fieldConfig = config.getFieldConfig(fieldNode\n            .getFieldAsString());\n        \n        if (fieldConfig != null) {\n          LegacyNumericConfig numericConfig = fieldConfig\n              .get(ConfigurationKeys.LEGACY_NUMERIC_CONFIG);\n          \n          if (numericConfig != null) {\n            \n            NumberFormat numberFormat = numericConfig.getNumberFormat();\n            String text = fieldNode.getTextAsString();\n            Number number = null;\n            \n            if (text.length() > 0) {\n              \n              try {\n                number = numberFormat.parse(text);\n                \n              } catch (ParseException e) {\n                throw new QueryNodeParseException(new MessageImpl(\n                    QueryParserMessages.COULD_NOT_PARSE_NUMBER, fieldNode\n                        .getTextAsString(), numberFormat.getClass()\n                        .getCanonicalName()), e);\n              }\n              \n              switch (numericConfig.getType()) {\n                case LONG:\n                  number = number.longValue();\n                  break;\n                case INT:\n                  number = number.intValue();\n                  break;\n                case DOUBLE:\n                  number = number.doubleValue();\n                  break;\n                case FLOAT:\n                  number = number.floatValue();\n              }\n              \n            } else {\n              throw new QueryNodeParseException(new MessageImpl(\n                  QueryParserMessages.NUMERIC_CANNOT_BE_EMPTY, fieldNode.getFieldAsString()));\n            }\n            \n            LegacyNumericQueryNode lowerNode = new LegacyNumericQueryNode(fieldNode\n                .getField(), number, numberFormat);\n            LegacyNumericQueryNode upperNode = new LegacyNumericQueryNode(fieldNode\n                .getField(), number, numberFormat);\n            \n            return new LegacyNumericRangeQueryNode(lowerNode, upperNode, true, true,\n                numericConfig);\n            \n          }\n          \n        }\n        \n      }\n      \n    }\n    \n    return node;\n    \n  }\n\n","sourceOld":"  @Override\n  protected QueryNode postProcessNode(QueryNode node) throws QueryNodeException {\n    \n    if (node instanceof FieldQueryNode\n        && !(node.getParent() instanceof RangeQueryNode)) {\n      \n      QueryConfigHandler config = getQueryConfigHandler();\n      \n      if (config != null) {\n        FieldQueryNode fieldNode = (FieldQueryNode) node;\n        FieldConfig fieldConfig = config.getFieldConfig(fieldNode\n            .getFieldAsString());\n        \n        if (fieldConfig != null) {\n          NumericConfig numericConfig = fieldConfig\n              .get(ConfigurationKeys.NUMERIC_CONFIG);\n          \n          if (numericConfig != null) {\n            \n            NumberFormat numberFormat = numericConfig.getNumberFormat();\n            String text = fieldNode.getTextAsString();\n            Number number = null;\n            \n            if (text.length() > 0) {\n              \n              try {\n                number = numberFormat.parse(text);\n                \n              } catch (ParseException e) {\n                throw new QueryNodeParseException(new MessageImpl(\n                    QueryParserMessages.COULD_NOT_PARSE_NUMBER, fieldNode\n                        .getTextAsString(), numberFormat.getClass()\n                        .getCanonicalName()), e);\n              }\n              \n              switch (numericConfig.getType()) {\n                case LONG:\n                  number = number.longValue();\n                  break;\n                case INT:\n                  number = number.intValue();\n                  break;\n                case DOUBLE:\n                  number = number.doubleValue();\n                  break;\n                case FLOAT:\n                  number = number.floatValue();\n              }\n              \n            } else {\n              throw new QueryNodeParseException(new MessageImpl(\n                  QueryParserMessages.NUMERIC_CANNOT_BE_EMPTY, fieldNode.getFieldAsString()));\n            }\n            \n            NumericQueryNode lowerNode = new NumericQueryNode(fieldNode\n                .getField(), number, numberFormat);\n            NumericQueryNode upperNode = new NumericQueryNode(fieldNode\n                .getField(), number, numberFormat);\n            \n            return new NumericRangeQueryNode(lowerNode, upperNode, true, true,\n                numericConfig);\n            \n          }\n          \n        }\n        \n      }\n      \n    }\n    \n    return node;\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"50b8410419cbbe9d8e1a96c918a951976bffe680","date":1471869553,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/processors/LegacyNumericQueryNodeProcessor#postProcessNode(QueryNode).mjava","sourceNew":null,"sourceOld":"  @Override\n  protected QueryNode postProcessNode(QueryNode node) throws QueryNodeException {\n    \n    if (node instanceof FieldQueryNode\n        && !(node.getParent() instanceof RangeQueryNode)) {\n      \n      QueryConfigHandler config = getQueryConfigHandler();\n      \n      if (config != null) {\n        FieldQueryNode fieldNode = (FieldQueryNode) node;\n        FieldConfig fieldConfig = config.getFieldConfig(fieldNode\n            .getFieldAsString());\n        \n        if (fieldConfig != null) {\n          LegacyNumericConfig numericConfig = fieldConfig\n              .get(ConfigurationKeys.LEGACY_NUMERIC_CONFIG);\n          \n          if (numericConfig != null) {\n            \n            NumberFormat numberFormat = numericConfig.getNumberFormat();\n            String text = fieldNode.getTextAsString();\n            Number number = null;\n            \n            if (text.length() > 0) {\n              \n              try {\n                number = numberFormat.parse(text);\n                \n              } catch (ParseException e) {\n                throw new QueryNodeParseException(new MessageImpl(\n                    QueryParserMessages.COULD_NOT_PARSE_NUMBER, fieldNode\n                        .getTextAsString(), numberFormat.getClass()\n                        .getCanonicalName()), e);\n              }\n              \n              switch (numericConfig.getType()) {\n                case LONG:\n                  number = number.longValue();\n                  break;\n                case INT:\n                  number = number.intValue();\n                  break;\n                case DOUBLE:\n                  number = number.doubleValue();\n                  break;\n                case FLOAT:\n                  number = number.floatValue();\n              }\n              \n            } else {\n              throw new QueryNodeParseException(new MessageImpl(\n                  QueryParserMessages.NUMERIC_CANNOT_BE_EMPTY, fieldNode.getFieldAsString()));\n            }\n            \n            LegacyNumericQueryNode lowerNode = new LegacyNumericQueryNode(fieldNode\n                .getField(), number, numberFormat);\n            LegacyNumericQueryNode upperNode = new LegacyNumericQueryNode(fieldNode\n                .getField(), number, numberFormat);\n            \n            return new LegacyNumericRangeQueryNode(lowerNode, upperNode, true, true,\n                numericConfig);\n            \n          }\n          \n        }\n        \n      }\n      \n    }\n    \n    return node;\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0c82557b0a8c9d4012f208e5de912ae7500ea351","date":1471888093,"type":4,"author":"Noble Paul","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/processors/LegacyNumericQueryNodeProcessor#postProcessNode(QueryNode).mjava","sourceNew":null,"sourceOld":"  @Override\n  protected QueryNode postProcessNode(QueryNode node) throws QueryNodeException {\n    \n    if (node instanceof FieldQueryNode\n        && !(node.getParent() instanceof RangeQueryNode)) {\n      \n      QueryConfigHandler config = getQueryConfigHandler();\n      \n      if (config != null) {\n        FieldQueryNode fieldNode = (FieldQueryNode) node;\n        FieldConfig fieldConfig = config.getFieldConfig(fieldNode\n            .getFieldAsString());\n        \n        if (fieldConfig != null) {\n          LegacyNumericConfig numericConfig = fieldConfig\n              .get(ConfigurationKeys.LEGACY_NUMERIC_CONFIG);\n          \n          if (numericConfig != null) {\n            \n            NumberFormat numberFormat = numericConfig.getNumberFormat();\n            String text = fieldNode.getTextAsString();\n            Number number = null;\n            \n            if (text.length() > 0) {\n              \n              try {\n                number = numberFormat.parse(text);\n                \n              } catch (ParseException e) {\n                throw new QueryNodeParseException(new MessageImpl(\n                    QueryParserMessages.COULD_NOT_PARSE_NUMBER, fieldNode\n                        .getTextAsString(), numberFormat.getClass()\n                        .getCanonicalName()), e);\n              }\n              \n              switch (numericConfig.getType()) {\n                case LONG:\n                  number = number.longValue();\n                  break;\n                case INT:\n                  number = number.intValue();\n                  break;\n                case DOUBLE:\n                  number = number.doubleValue();\n                  break;\n                case FLOAT:\n                  number = number.floatValue();\n              }\n              \n            } else {\n              throw new QueryNodeParseException(new MessageImpl(\n                  QueryParserMessages.NUMERIC_CANNOT_BE_EMPTY, fieldNode.getFieldAsString()));\n            }\n            \n            LegacyNumericQueryNode lowerNode = new LegacyNumericQueryNode(fieldNode\n                .getField(), number, numberFormat);\n            LegacyNumericQueryNode upperNode = new LegacyNumericQueryNode(fieldNode\n                .getField(), number, numberFormat);\n            \n            return new LegacyNumericRangeQueryNode(lowerNode, upperNode, true, true,\n                numericConfig);\n            \n          }\n          \n        }\n        \n      }\n      \n    }\n    \n    return node;\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a","date":1472163016,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/processors/LegacyNumericQueryNodeProcessor#postProcessNode(QueryNode).mjava","sourceNew":null,"sourceOld":"  @Override\n  protected QueryNode postProcessNode(QueryNode node) throws QueryNodeException {\n    \n    if (node instanceof FieldQueryNode\n        && !(node.getParent() instanceof RangeQueryNode)) {\n      \n      QueryConfigHandler config = getQueryConfigHandler();\n      \n      if (config != null) {\n        FieldQueryNode fieldNode = (FieldQueryNode) node;\n        FieldConfig fieldConfig = config.getFieldConfig(fieldNode\n            .getFieldAsString());\n        \n        if (fieldConfig != null) {\n          LegacyNumericConfig numericConfig = fieldConfig\n              .get(ConfigurationKeys.LEGACY_NUMERIC_CONFIG);\n          \n          if (numericConfig != null) {\n            \n            NumberFormat numberFormat = numericConfig.getNumberFormat();\n            String text = fieldNode.getTextAsString();\n            Number number = null;\n            \n            if (text.length() > 0) {\n              \n              try {\n                number = numberFormat.parse(text);\n                \n              } catch (ParseException e) {\n                throw new QueryNodeParseException(new MessageImpl(\n                    QueryParserMessages.COULD_NOT_PARSE_NUMBER, fieldNode\n                        .getTextAsString(), numberFormat.getClass()\n                        .getCanonicalName()), e);\n              }\n              \n              switch (numericConfig.getType()) {\n                case LONG:\n                  number = number.longValue();\n                  break;\n                case INT:\n                  number = number.intValue();\n                  break;\n                case DOUBLE:\n                  number = number.doubleValue();\n                  break;\n                case FLOAT:\n                  number = number.floatValue();\n              }\n              \n            } else {\n              throw new QueryNodeParseException(new MessageImpl(\n                  QueryParserMessages.NUMERIC_CANNOT_BE_EMPTY, fieldNode.getFieldAsString()));\n            }\n            \n            LegacyNumericQueryNode lowerNode = new LegacyNumericQueryNode(fieldNode\n                .getField(), number, numberFormat);\n            LegacyNumericQueryNode upperNode = new LegacyNumericQueryNode(fieldNode\n                .getField(), number, numberFormat);\n            \n            return new LegacyNumericRangeQueryNode(lowerNode, upperNode, true, true,\n                numericConfig);\n            \n          }\n          \n        }\n        \n      }\n      \n    }\n    \n    return node;\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/processors/LegacyNumericQueryNodeProcessor#postProcessNode(QueryNode).mjava","sourceNew":null,"sourceOld":"  @Override\n  protected QueryNode postProcessNode(QueryNode node) throws QueryNodeException {\n    \n    if (node instanceof FieldQueryNode\n        && !(node.getParent() instanceof RangeQueryNode)) {\n      \n      QueryConfigHandler config = getQueryConfigHandler();\n      \n      if (config != null) {\n        FieldQueryNode fieldNode = (FieldQueryNode) node;\n        FieldConfig fieldConfig = config.getFieldConfig(fieldNode\n            .getFieldAsString());\n        \n        if (fieldConfig != null) {\n          LegacyNumericConfig numericConfig = fieldConfig\n              .get(ConfigurationKeys.LEGACY_NUMERIC_CONFIG);\n          \n          if (numericConfig != null) {\n            \n            NumberFormat numberFormat = numericConfig.getNumberFormat();\n            String text = fieldNode.getTextAsString();\n            Number number = null;\n            \n            if (text.length() > 0) {\n              \n              try {\n                number = numberFormat.parse(text);\n                \n              } catch (ParseException e) {\n                throw new QueryNodeParseException(new MessageImpl(\n                    QueryParserMessages.COULD_NOT_PARSE_NUMBER, fieldNode\n                        .getTextAsString(), numberFormat.getClass()\n                        .getCanonicalName()), e);\n              }\n              \n              switch (numericConfig.getType()) {\n                case LONG:\n                  number = number.longValue();\n                  break;\n                case INT:\n                  number = number.intValue();\n                  break;\n                case DOUBLE:\n                  number = number.doubleValue();\n                  break;\n                case FLOAT:\n                  number = number.floatValue();\n              }\n              \n            } else {\n              throw new QueryNodeParseException(new MessageImpl(\n                  QueryParserMessages.NUMERIC_CANNOT_BE_EMPTY, fieldNode.getFieldAsString()));\n            }\n            \n            LegacyNumericQueryNode lowerNode = new LegacyNumericQueryNode(fieldNode\n                .getField(), number, numberFormat);\n            LegacyNumericQueryNode upperNode = new LegacyNumericQueryNode(fieldNode\n                .getField(), number, numberFormat);\n            \n            return new LegacyNumericRangeQueryNode(lowerNode, upperNode, true, true,\n                numericConfig);\n            \n          }\n          \n        }\n        \n      }\n      \n    }\n    \n    return node;\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"683242c67a3f6086bae8b1354748fcaa38edfbd5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0c82557b0a8c9d4012f208e5de912ae7500ea351":["683242c67a3f6086bae8b1354748fcaa38edfbd5","50b8410419cbbe9d8e1a96c918a951976bffe680"],"50b8410419cbbe9d8e1a96c918a951976bffe680":["683242c67a3f6086bae8b1354748fcaa38edfbd5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a":["683242c67a3f6086bae8b1354748fcaa38edfbd5","0c82557b0a8c9d4012f208e5de912ae7500ea351"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["683242c67a3f6086bae8b1354748fcaa38edfbd5","e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a"]},"commit2Childs":{"683242c67a3f6086bae8b1354748fcaa38edfbd5":["0c82557b0a8c9d4012f208e5de912ae7500ea351","50b8410419cbbe9d8e1a96c918a951976bffe680","e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"0c82557b0a8c9d4012f208e5de912ae7500ea351":["e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a"],"50b8410419cbbe9d8e1a96c918a951976bffe680":["0c82557b0a8c9d4012f208e5de912ae7500ea351"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["683242c67a3f6086bae8b1354748fcaa38edfbd5"],"e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}