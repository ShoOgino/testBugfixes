{"path":"lucene/src/test/org/apache/lucene/search/TestDateSort#testReverseDateSort().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestDateSort#testReverseDateSort().mjava","pathOld":"src/test/org/apache/lucene/search/TestDateSort#testReverseDateSort().mjava","sourceNew":"  public void testReverseDateSort() throws Exception {\n    IndexSearcher searcher = new IndexSearcher(directory, true);\n\n    Sort sort = new Sort(new SortField(DATE_TIME_FIELD, SortField.STRING, true));\n\n    QueryParser queryParser = new QueryParser(TEST_VERSION_CURRENT, TEXT_FIELD, new WhitespaceAnalyzer(TEST_VERSION_CURRENT));\n    Query query = queryParser.parse(\"Document\");\n\n    // Execute the search and process the search results.\n    String[] actualOrder = new String[5];\n    ScoreDoc[] hits = searcher.search(query, null, 1000, sort).scoreDocs;\n    for (int i = 0; i < hits.length; i++) {\n      Document document = searcher.doc(hits[i].doc);\n      String text = document.get(TEXT_FIELD);\n      actualOrder[i] = text;\n    }\n    searcher.close();\n\n    // Set up the expected order (i.e. Document 5, 4, 3, 2, 1).\n    String[] expectedOrder = new String[5];\n    expectedOrder[0] = \"Document 5\";\n    expectedOrder[1] = \"Document 4\";\n    expectedOrder[2] = \"Document 3\";\n    expectedOrder[3] = \"Document 2\";\n    expectedOrder[4] = \"Document 1\";\n\n    assertEquals(Arrays.asList(expectedOrder), Arrays.asList(actualOrder));\n  }\n\n","sourceOld":"  public void testReverseDateSort() throws Exception {\n    IndexSearcher searcher = new IndexSearcher(directory, true);\n\n    Sort sort = new Sort(new SortField(DATE_TIME_FIELD, SortField.STRING, true));\n\n    QueryParser queryParser = new QueryParser(TEST_VERSION_CURRENT, TEXT_FIELD, new WhitespaceAnalyzer(TEST_VERSION_CURRENT));\n    Query query = queryParser.parse(\"Document\");\n\n    // Execute the search and process the search results.\n    String[] actualOrder = new String[5];\n    ScoreDoc[] hits = searcher.search(query, null, 1000, sort).scoreDocs;\n    for (int i = 0; i < hits.length; i++) {\n      Document document = searcher.doc(hits[i].doc);\n      String text = document.get(TEXT_FIELD);\n      actualOrder[i] = text;\n    }\n    searcher.close();\n\n    // Set up the expected order (i.e. Document 5, 4, 3, 2, 1).\n    String[] expectedOrder = new String[5];\n    expectedOrder[0] = \"Document 5\";\n    expectedOrder[1] = \"Document 4\";\n    expectedOrder[2] = \"Document 3\";\n    expectedOrder[3] = \"Document 2\";\n    expectedOrder[4] = \"Document 1\";\n\n    assertEquals(Arrays.asList(expectedOrder), Arrays.asList(actualOrder));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d572389229127c297dd1fa5ce4758e1cec41e799","date":1273610938,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestDateSort#testReverseDateSort().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestDateSort#testReverseDateSort().mjava","sourceNew":"  public void testReverseDateSort() throws Exception {\n    IndexSearcher searcher = new IndexSearcher(directory, true);\n\n    Sort sort = new Sort(new SortField(DATE_TIME_FIELD, SortField.STRING, true));\n\n    QueryParser queryParser = new QueryParser(TEST_VERSION_CURRENT, TEXT_FIELD, new MockAnalyzer());\n    Query query = queryParser.parse(\"Document\");\n\n    // Execute the search and process the search results.\n    String[] actualOrder = new String[5];\n    ScoreDoc[] hits = searcher.search(query, null, 1000, sort).scoreDocs;\n    for (int i = 0; i < hits.length; i++) {\n      Document document = searcher.doc(hits[i].doc);\n      String text = document.get(TEXT_FIELD);\n      actualOrder[i] = text;\n    }\n    searcher.close();\n\n    // Set up the expected order (i.e. Document 5, 4, 3, 2, 1).\n    String[] expectedOrder = new String[5];\n    expectedOrder[0] = \"Document 5\";\n    expectedOrder[1] = \"Document 4\";\n    expectedOrder[2] = \"Document 3\";\n    expectedOrder[3] = \"Document 2\";\n    expectedOrder[4] = \"Document 1\";\n\n    assertEquals(Arrays.asList(expectedOrder), Arrays.asList(actualOrder));\n  }\n\n","sourceOld":"  public void testReverseDateSort() throws Exception {\n    IndexSearcher searcher = new IndexSearcher(directory, true);\n\n    Sort sort = new Sort(new SortField(DATE_TIME_FIELD, SortField.STRING, true));\n\n    QueryParser queryParser = new QueryParser(TEST_VERSION_CURRENT, TEXT_FIELD, new WhitespaceAnalyzer(TEST_VERSION_CURRENT));\n    Query query = queryParser.parse(\"Document\");\n\n    // Execute the search and process the search results.\n    String[] actualOrder = new String[5];\n    ScoreDoc[] hits = searcher.search(query, null, 1000, sort).scoreDocs;\n    for (int i = 0; i < hits.length; i++) {\n      Document document = searcher.doc(hits[i].doc);\n      String text = document.get(TEXT_FIELD);\n      actualOrder[i] = text;\n    }\n    searcher.close();\n\n    // Set up the expected order (i.e. Document 5, 4, 3, 2, 1).\n    String[] expectedOrder = new String[5];\n    expectedOrder[0] = \"Document 5\";\n    expectedOrder[1] = \"Document 4\";\n    expectedOrder[2] = \"Document 3\";\n    expectedOrder[3] = \"Document 2\";\n    expectedOrder[4] = \"Document 1\";\n\n    assertEquals(Arrays.asList(expectedOrder), Arrays.asList(actualOrder));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c084e47df29de3330311d69dabf515ceaa989512","date":1279030906,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestDateSort#testReverseDateSort().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestDateSort#testReverseDateSort().mjava","sourceNew":"  public void testReverseDateSort() throws Exception {\n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    Sort sort = new Sort(new SortField(DATE_TIME_FIELD, SortField.STRING, true));\n\n    QueryParser queryParser = new QueryParser(TEST_VERSION_CURRENT, TEXT_FIELD, new MockAnalyzer());\n    Query query = queryParser.parse(\"Document\");\n\n    // Execute the search and process the search results.\n    String[] actualOrder = new String[5];\n    ScoreDoc[] hits = searcher.search(query, null, 1000, sort).scoreDocs;\n    for (int i = 0; i < hits.length; i++) {\n      Document document = searcher.doc(hits[i].doc);\n      String text = document.get(TEXT_FIELD);\n      actualOrder[i] = text;\n    }\n    searcher.close();\n\n    // Set up the expected order (i.e. Document 5, 4, 3, 2, 1).\n    String[] expectedOrder = new String[5];\n    expectedOrder[0] = \"Document 5\";\n    expectedOrder[1] = \"Document 4\";\n    expectedOrder[2] = \"Document 3\";\n    expectedOrder[3] = \"Document 2\";\n    expectedOrder[4] = \"Document 1\";\n\n    assertEquals(Arrays.asList(expectedOrder), Arrays.asList(actualOrder));\n  }\n\n","sourceOld":"  public void testReverseDateSort() throws Exception {\n    IndexSearcher searcher = new IndexSearcher(directory, true);\n\n    Sort sort = new Sort(new SortField(DATE_TIME_FIELD, SortField.STRING, true));\n\n    QueryParser queryParser = new QueryParser(TEST_VERSION_CURRENT, TEXT_FIELD, new MockAnalyzer());\n    Query query = queryParser.parse(\"Document\");\n\n    // Execute the search and process the search results.\n    String[] actualOrder = new String[5];\n    ScoreDoc[] hits = searcher.search(query, null, 1000, sort).scoreDocs;\n    for (int i = 0; i < hits.length; i++) {\n      Document document = searcher.doc(hits[i].doc);\n      String text = document.get(TEXT_FIELD);\n      actualOrder[i] = text;\n    }\n    searcher.close();\n\n    // Set up the expected order (i.e. Document 5, 4, 3, 2, 1).\n    String[] expectedOrder = new String[5];\n    expectedOrder[0] = \"Document 5\";\n    expectedOrder[1] = \"Document 4\";\n    expectedOrder[2] = \"Document 3\";\n    expectedOrder[3] = \"Document 2\";\n    expectedOrder[4] = \"Document 1\";\n\n    assertEquals(Arrays.asList(expectedOrder), Arrays.asList(actualOrder));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestDateSort#testReverseDateSort().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestDateSort#testReverseDateSort().mjava","sourceNew":"  public void testReverseDateSort() throws Exception {\n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    Sort sort = new Sort(new SortField(DATE_TIME_FIELD, SortField.STRING, true));\n\n    QueryParser queryParser = new QueryParser(TEST_VERSION_CURRENT, TEXT_FIELD, new MockAnalyzer());\n    Query query = queryParser.parse(\"Document\");\n\n    // Execute the search and process the search results.\n    String[] actualOrder = new String[5];\n    ScoreDoc[] hits = searcher.search(query, null, 1000, sort).scoreDocs;\n    for (int i = 0; i < hits.length; i++) {\n      Document document = searcher.doc(hits[i].doc);\n      String text = document.get(TEXT_FIELD);\n      actualOrder[i] = text;\n    }\n    searcher.close();\n\n    // Set up the expected order (i.e. Document 5, 4, 3, 2, 1).\n    String[] expectedOrder = new String[5];\n    expectedOrder[0] = \"Document 5\";\n    expectedOrder[1] = \"Document 4\";\n    expectedOrder[2] = \"Document 3\";\n    expectedOrder[3] = \"Document 2\";\n    expectedOrder[4] = \"Document 1\";\n\n    assertEquals(Arrays.asList(expectedOrder), Arrays.asList(actualOrder));\n  }\n\n","sourceOld":"  public void testReverseDateSort() throws Exception {\n    IndexSearcher searcher = new IndexSearcher(directory, true);\n\n    Sort sort = new Sort(new SortField(DATE_TIME_FIELD, SortField.STRING, true));\n\n    QueryParser queryParser = new QueryParser(TEST_VERSION_CURRENT, TEXT_FIELD, new MockAnalyzer());\n    Query query = queryParser.parse(\"Document\");\n\n    // Execute the search and process the search results.\n    String[] actualOrder = new String[5];\n    ScoreDoc[] hits = searcher.search(query, null, 1000, sort).scoreDocs;\n    for (int i = 0; i < hits.length; i++) {\n      Document document = searcher.doc(hits[i].doc);\n      String text = document.get(TEXT_FIELD);\n      actualOrder[i] = text;\n    }\n    searcher.close();\n\n    // Set up the expected order (i.e. Document 5, 4, 3, 2, 1).\n    String[] expectedOrder = new String[5];\n    expectedOrder[0] = \"Document 5\";\n    expectedOrder[1] = \"Document 4\";\n    expectedOrder[2] = \"Document 3\";\n    expectedOrder[3] = \"Document 2\";\n    expectedOrder[4] = \"Document 1\";\n\n    assertEquals(Arrays.asList(expectedOrder), Arrays.asList(actualOrder));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"790e1fde4caa765b3faaad3fbcd25c6973450336","date":1296689245,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestDateSort#testReverseDateSort().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestDateSort#testReverseDateSort().mjava","sourceNew":"  public void testReverseDateSort() throws Exception {\n    IndexSearcher searcher = newSearcher(reader);\n\n    Sort sort = new Sort(new SortField(DATE_TIME_FIELD, SortField.STRING, true));\n\n    QueryParser queryParser = new QueryParser(TEST_VERSION_CURRENT, TEXT_FIELD, new MockAnalyzer());\n    Query query = queryParser.parse(\"Document\");\n\n    // Execute the search and process the search results.\n    String[] actualOrder = new String[5];\n    ScoreDoc[] hits = searcher.search(query, null, 1000, sort).scoreDocs;\n    for (int i = 0; i < hits.length; i++) {\n      Document document = searcher.doc(hits[i].doc);\n      String text = document.get(TEXT_FIELD);\n      actualOrder[i] = text;\n    }\n    searcher.close();\n\n    // Set up the expected order (i.e. Document 5, 4, 3, 2, 1).\n    String[] expectedOrder = new String[5];\n    expectedOrder[0] = \"Document 5\";\n    expectedOrder[1] = \"Document 4\";\n    expectedOrder[2] = \"Document 3\";\n    expectedOrder[3] = \"Document 2\";\n    expectedOrder[4] = \"Document 1\";\n\n    assertEquals(Arrays.asList(expectedOrder), Arrays.asList(actualOrder));\n  }\n\n","sourceOld":"  public void testReverseDateSort() throws Exception {\n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    Sort sort = new Sort(new SortField(DATE_TIME_FIELD, SortField.STRING, true));\n\n    QueryParser queryParser = new QueryParser(TEST_VERSION_CURRENT, TEXT_FIELD, new MockAnalyzer());\n    Query query = queryParser.parse(\"Document\");\n\n    // Execute the search and process the search results.\n    String[] actualOrder = new String[5];\n    ScoreDoc[] hits = searcher.search(query, null, 1000, sort).scoreDocs;\n    for (int i = 0; i < hits.length; i++) {\n      Document document = searcher.doc(hits[i].doc);\n      String text = document.get(TEXT_FIELD);\n      actualOrder[i] = text;\n    }\n    searcher.close();\n\n    // Set up the expected order (i.e. Document 5, 4, 3, 2, 1).\n    String[] expectedOrder = new String[5];\n    expectedOrder[0] = \"Document 5\";\n    expectedOrder[1] = \"Document 4\";\n    expectedOrder[2] = \"Document 3\";\n    expectedOrder[3] = \"Document 2\";\n    expectedOrder[4] = \"Document 1\";\n\n    assertEquals(Arrays.asList(expectedOrder), Arrays.asList(actualOrder));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestDateSort#testReverseDateSort().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestDateSort#testReverseDateSort().mjava","sourceNew":"  public void testReverseDateSort() throws Exception {\n    IndexSearcher searcher = newSearcher(reader);\n\n    Sort sort = new Sort(new SortField(DATE_TIME_FIELD, SortField.STRING, true));\n\n    QueryParser queryParser = new QueryParser(TEST_VERSION_CURRENT, TEXT_FIELD, new MockAnalyzer());\n    Query query = queryParser.parse(\"Document\");\n\n    // Execute the search and process the search results.\n    String[] actualOrder = new String[5];\n    ScoreDoc[] hits = searcher.search(query, null, 1000, sort).scoreDocs;\n    for (int i = 0; i < hits.length; i++) {\n      Document document = searcher.doc(hits[i].doc);\n      String text = document.get(TEXT_FIELD);\n      actualOrder[i] = text;\n    }\n    searcher.close();\n\n    // Set up the expected order (i.e. Document 5, 4, 3, 2, 1).\n    String[] expectedOrder = new String[5];\n    expectedOrder[0] = \"Document 5\";\n    expectedOrder[1] = \"Document 4\";\n    expectedOrder[2] = \"Document 3\";\n    expectedOrder[3] = \"Document 2\";\n    expectedOrder[4] = \"Document 1\";\n\n    assertEquals(Arrays.asList(expectedOrder), Arrays.asList(actualOrder));\n  }\n\n","sourceOld":"  public void testReverseDateSort() throws Exception {\n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    Sort sort = new Sort(new SortField(DATE_TIME_FIELD, SortField.STRING, true));\n\n    QueryParser queryParser = new QueryParser(TEST_VERSION_CURRENT, TEXT_FIELD, new MockAnalyzer());\n    Query query = queryParser.parse(\"Document\");\n\n    // Execute the search and process the search results.\n    String[] actualOrder = new String[5];\n    ScoreDoc[] hits = searcher.search(query, null, 1000, sort).scoreDocs;\n    for (int i = 0; i < hits.length; i++) {\n      Document document = searcher.doc(hits[i].doc);\n      String text = document.get(TEXT_FIELD);\n      actualOrder[i] = text;\n    }\n    searcher.close();\n\n    // Set up the expected order (i.e. Document 5, 4, 3, 2, 1).\n    String[] expectedOrder = new String[5];\n    expectedOrder[0] = \"Document 5\";\n    expectedOrder[1] = \"Document 4\";\n    expectedOrder[2] = \"Document 3\";\n    expectedOrder[3] = \"Document 2\";\n    expectedOrder[4] = \"Document 1\";\n\n    assertEquals(Arrays.asList(expectedOrder), Arrays.asList(actualOrder));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestDateSort#testReverseDateSort().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestDateSort#testReverseDateSort().mjava","sourceNew":"  public void testReverseDateSort() throws Exception {\n    IndexSearcher searcher = newSearcher(reader);\n\n    Sort sort = new Sort(new SortField(DATE_TIME_FIELD, SortField.STRING, true));\n\n    QueryParser queryParser = new QueryParser(TEST_VERSION_CURRENT, TEXT_FIELD, new MockAnalyzer());\n    Query query = queryParser.parse(\"Document\");\n\n    // Execute the search and process the search results.\n    String[] actualOrder = new String[5];\n    ScoreDoc[] hits = searcher.search(query, null, 1000, sort).scoreDocs;\n    for (int i = 0; i < hits.length; i++) {\n      Document document = searcher.doc(hits[i].doc);\n      String text = document.get(TEXT_FIELD);\n      actualOrder[i] = text;\n    }\n    searcher.close();\n\n    // Set up the expected order (i.e. Document 5, 4, 3, 2, 1).\n    String[] expectedOrder = new String[5];\n    expectedOrder[0] = \"Document 5\";\n    expectedOrder[1] = \"Document 4\";\n    expectedOrder[2] = \"Document 3\";\n    expectedOrder[3] = \"Document 2\";\n    expectedOrder[4] = \"Document 1\";\n\n    assertEquals(Arrays.asList(expectedOrder), Arrays.asList(actualOrder));\n  }\n\n","sourceOld":"  public void testReverseDateSort() throws Exception {\n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    Sort sort = new Sort(new SortField(DATE_TIME_FIELD, SortField.STRING, true));\n\n    QueryParser queryParser = new QueryParser(TEST_VERSION_CURRENT, TEXT_FIELD, new MockAnalyzer());\n    Query query = queryParser.parse(\"Document\");\n\n    // Execute the search and process the search results.\n    String[] actualOrder = new String[5];\n    ScoreDoc[] hits = searcher.search(query, null, 1000, sort).scoreDocs;\n    for (int i = 0; i < hits.length; i++) {\n      Document document = searcher.doc(hits[i].doc);\n      String text = document.get(TEXT_FIELD);\n      actualOrder[i] = text;\n    }\n    searcher.close();\n\n    // Set up the expected order (i.e. Document 5, 4, 3, 2, 1).\n    String[] expectedOrder = new String[5];\n    expectedOrder[0] = \"Document 5\";\n    expectedOrder[1] = \"Document 4\";\n    expectedOrder[2] = \"Document 3\";\n    expectedOrder[3] = \"Document 2\";\n    expectedOrder[4] = \"Document 1\";\n\n    assertEquals(Arrays.asList(expectedOrder), Arrays.asList(actualOrder));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2c5f0cb44df114db4228c8f77861714b5cabaea","date":1302542431,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestDateSort#testReverseDateSort().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestDateSort#testReverseDateSort().mjava","sourceNew":"  public void testReverseDateSort() throws Exception {\n    IndexSearcher searcher = newSearcher(reader);\n\n    Sort sort = new Sort(new SortField(DATE_TIME_FIELD, SortField.STRING, true));\n\n    QueryParser queryParser = new QueryParser(TEST_VERSION_CURRENT, TEXT_FIELD, new MockAnalyzer(random));\n    Query query = queryParser.parse(\"Document\");\n\n    // Execute the search and process the search results.\n    String[] actualOrder = new String[5];\n    ScoreDoc[] hits = searcher.search(query, null, 1000, sort).scoreDocs;\n    for (int i = 0; i < hits.length; i++) {\n      Document document = searcher.doc(hits[i].doc);\n      String text = document.get(TEXT_FIELD);\n      actualOrder[i] = text;\n    }\n    searcher.close();\n\n    // Set up the expected order (i.e. Document 5, 4, 3, 2, 1).\n    String[] expectedOrder = new String[5];\n    expectedOrder[0] = \"Document 5\";\n    expectedOrder[1] = \"Document 4\";\n    expectedOrder[2] = \"Document 3\";\n    expectedOrder[3] = \"Document 2\";\n    expectedOrder[4] = \"Document 1\";\n\n    assertEquals(Arrays.asList(expectedOrder), Arrays.asList(actualOrder));\n  }\n\n","sourceOld":"  public void testReverseDateSort() throws Exception {\n    IndexSearcher searcher = newSearcher(reader);\n\n    Sort sort = new Sort(new SortField(DATE_TIME_FIELD, SortField.STRING, true));\n\n    QueryParser queryParser = new QueryParser(TEST_VERSION_CURRENT, TEXT_FIELD, new MockAnalyzer());\n    Query query = queryParser.parse(\"Document\");\n\n    // Execute the search and process the search results.\n    String[] actualOrder = new String[5];\n    ScoreDoc[] hits = searcher.search(query, null, 1000, sort).scoreDocs;\n    for (int i = 0; i < hits.length; i++) {\n      Document document = searcher.doc(hits[i].doc);\n      String text = document.get(TEXT_FIELD);\n      actualOrder[i] = text;\n    }\n    searcher.close();\n\n    // Set up the expected order (i.e. Document 5, 4, 3, 2, 1).\n    String[] expectedOrder = new String[5];\n    expectedOrder[0] = \"Document 5\";\n    expectedOrder[1] = \"Document 4\";\n    expectedOrder[2] = \"Document 3\";\n    expectedOrder[3] = \"Document 2\";\n    expectedOrder[4] = \"Document 1\";\n\n    assertEquals(Arrays.asList(expectedOrder), Arrays.asList(actualOrder));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestDateSort#testReverseDateSort().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestDateSort#testReverseDateSort().mjava","sourceNew":"  public void testReverseDateSort() throws Exception {\n    IndexSearcher searcher = newSearcher(reader);\n\n    Sort sort = new Sort(new SortField(DATE_TIME_FIELD, SortField.STRING, true));\n\n    QueryParser queryParser = new QueryParser(TEST_VERSION_CURRENT, TEXT_FIELD, new MockAnalyzer(random));\n    Query query = queryParser.parse(\"Document\");\n\n    // Execute the search and process the search results.\n    String[] actualOrder = new String[5];\n    ScoreDoc[] hits = searcher.search(query, null, 1000, sort).scoreDocs;\n    for (int i = 0; i < hits.length; i++) {\n      Document document = searcher.doc(hits[i].doc);\n      String text = document.get(TEXT_FIELD);\n      actualOrder[i] = text;\n    }\n    searcher.close();\n\n    // Set up the expected order (i.e. Document 5, 4, 3, 2, 1).\n    String[] expectedOrder = new String[5];\n    expectedOrder[0] = \"Document 5\";\n    expectedOrder[1] = \"Document 4\";\n    expectedOrder[2] = \"Document 3\";\n    expectedOrder[3] = \"Document 2\";\n    expectedOrder[4] = \"Document 1\";\n\n    assertEquals(Arrays.asList(expectedOrder), Arrays.asList(actualOrder));\n  }\n\n","sourceOld":"  public void testReverseDateSort() throws Exception {\n    IndexSearcher searcher = newSearcher(reader);\n\n    Sort sort = new Sort(new SortField(DATE_TIME_FIELD, SortField.STRING, true));\n\n    QueryParser queryParser = new QueryParser(TEST_VERSION_CURRENT, TEXT_FIELD, new MockAnalyzer());\n    Query query = queryParser.parse(\"Document\");\n\n    // Execute the search and process the search results.\n    String[] actualOrder = new String[5];\n    ScoreDoc[] hits = searcher.search(query, null, 1000, sort).scoreDocs;\n    for (int i = 0; i < hits.length; i++) {\n      Document document = searcher.doc(hits[i].doc);\n      String text = document.get(TEXT_FIELD);\n      actualOrder[i] = text;\n    }\n    searcher.close();\n\n    // Set up the expected order (i.e. Document 5, 4, 3, 2, 1).\n    String[] expectedOrder = new String[5];\n    expectedOrder[0] = \"Document 5\";\n    expectedOrder[1] = \"Document 4\";\n    expectedOrder[2] = \"Document 3\";\n    expectedOrder[3] = \"Document 2\";\n    expectedOrder[4] = \"Document 1\";\n\n    assertEquals(Arrays.asList(expectedOrder), Arrays.asList(actualOrder));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestDateSort#testReverseDateSort().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestDateSort#testReverseDateSort().mjava","sourceNew":"  public void testReverseDateSort() throws Exception {\n    IndexSearcher searcher = newSearcher(reader);\n\n    Sort sort = new Sort(new SortField(DATE_TIME_FIELD, SortField.STRING, true));\n\n    QueryParser queryParser = new QueryParser(TEST_VERSION_CURRENT, TEXT_FIELD, new MockAnalyzer(random));\n    Query query = queryParser.parse(\"Document\");\n\n    // Execute the search and process the search results.\n    String[] actualOrder = new String[5];\n    ScoreDoc[] hits = searcher.search(query, null, 1000, sort).scoreDocs;\n    for (int i = 0; i < hits.length; i++) {\n      Document document = searcher.doc(hits[i].doc);\n      String text = document.get(TEXT_FIELD);\n      actualOrder[i] = text;\n    }\n    searcher.close();\n\n    // Set up the expected order (i.e. Document 5, 4, 3, 2, 1).\n    String[] expectedOrder = new String[5];\n    expectedOrder[0] = \"Document 5\";\n    expectedOrder[1] = \"Document 4\";\n    expectedOrder[2] = \"Document 3\";\n    expectedOrder[3] = \"Document 2\";\n    expectedOrder[4] = \"Document 1\";\n\n    assertEquals(Arrays.asList(expectedOrder), Arrays.asList(actualOrder));\n  }\n\n","sourceOld":"  public void testReverseDateSort() throws Exception {\n    IndexSearcher searcher = newSearcher(reader);\n\n    Sort sort = new Sort(new SortField(DATE_TIME_FIELD, SortField.STRING, true));\n\n    QueryParser queryParser = new QueryParser(TEST_VERSION_CURRENT, TEXT_FIELD, new MockAnalyzer());\n    Query query = queryParser.parse(\"Document\");\n\n    // Execute the search and process the search results.\n    String[] actualOrder = new String[5];\n    ScoreDoc[] hits = searcher.search(query, null, 1000, sort).scoreDocs;\n    for (int i = 0; i < hits.length; i++) {\n      Document document = searcher.doc(hits[i].doc);\n      String text = document.get(TEXT_FIELD);\n      actualOrder[i] = text;\n    }\n    searcher.close();\n\n    // Set up the expected order (i.e. Document 5, 4, 3, 2, 1).\n    String[] expectedOrder = new String[5];\n    expectedOrder[0] = \"Document 5\";\n    expectedOrder[1] = \"Document 4\";\n    expectedOrder[2] = \"Document 3\";\n    expectedOrder[3] = \"Document 2\";\n    expectedOrder[4] = \"Document 1\";\n\n    assertEquals(Arrays.asList(expectedOrder), Arrays.asList(actualOrder));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestDateSort#testReverseDateSort().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestDateSort#testReverseDateSort().mjava","sourceNew":"  public void testReverseDateSort() throws Exception {\n    IndexSearcher searcher = newSearcher(reader);\n\n    Sort sort = new Sort(new SortField(DATE_TIME_FIELD, SortField.STRING, true));\n\n    QueryParser queryParser = new QueryParser(TEST_VERSION_CURRENT, TEXT_FIELD, new MockAnalyzer(random));\n    Query query = queryParser.parse(\"Document\");\n\n    // Execute the search and process the search results.\n    String[] actualOrder = new String[5];\n    ScoreDoc[] hits = searcher.search(query, null, 1000, sort).scoreDocs;\n    for (int i = 0; i < hits.length; i++) {\n      Document document = searcher.doc(hits[i].doc);\n      String text = document.get(TEXT_FIELD);\n      actualOrder[i] = text;\n    }\n    searcher.close();\n\n    // Set up the expected order (i.e. Document 5, 4, 3, 2, 1).\n    String[] expectedOrder = new String[5];\n    expectedOrder[0] = \"Document 5\";\n    expectedOrder[1] = \"Document 4\";\n    expectedOrder[2] = \"Document 3\";\n    expectedOrder[3] = \"Document 2\";\n    expectedOrder[4] = \"Document 1\";\n\n    assertEquals(Arrays.asList(expectedOrder), Arrays.asList(actualOrder));\n  }\n\n","sourceOld":"  public void testReverseDateSort() throws Exception {\n    IndexSearcher searcher = newSearcher(reader);\n\n    Sort sort = new Sort(new SortField(DATE_TIME_FIELD, SortField.STRING, true));\n\n    QueryParser queryParser = new QueryParser(TEST_VERSION_CURRENT, TEXT_FIELD, new MockAnalyzer());\n    Query query = queryParser.parse(\"Document\");\n\n    // Execute the search and process the search results.\n    String[] actualOrder = new String[5];\n    ScoreDoc[] hits = searcher.search(query, null, 1000, sort).scoreDocs;\n    for (int i = 0; i < hits.length; i++) {\n      Document document = searcher.doc(hits[i].doc);\n      String text = document.get(TEXT_FIELD);\n      actualOrder[i] = text;\n    }\n    searcher.close();\n\n    // Set up the expected order (i.e. Document 5, 4, 3, 2, 1).\n    String[] expectedOrder = new String[5];\n    expectedOrder[0] = \"Document 5\";\n    expectedOrder[1] = \"Document 4\";\n    expectedOrder[2] = \"Document 3\";\n    expectedOrder[3] = \"Document 2\";\n    expectedOrder[4] = \"Document 1\";\n\n    assertEquals(Arrays.asList(expectedOrder), Arrays.asList(actualOrder));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"090a0320e4de4a3674376aef96b9701f47564f86","date":1308707325,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestDateSort#testReverseDateSort().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestDateSort#testReverseDateSort().mjava","sourceNew":"  public void testReverseDateSort() throws Exception {\n    IndexSearcher searcher = newSearcher(reader);\n\n    Sort sort = new Sort(new SortField(DATE_TIME_FIELD, SortField.Type.STRING, true));\n\n    QueryParser queryParser = new QueryParser(TEST_VERSION_CURRENT, TEXT_FIELD, new MockAnalyzer(random));\n    Query query = queryParser.parse(\"Document\");\n\n    // Execute the search and process the search results.\n    String[] actualOrder = new String[5];\n    ScoreDoc[] hits = searcher.search(query, null, 1000, sort).scoreDocs;\n    for (int i = 0; i < hits.length; i++) {\n      Document document = searcher.doc(hits[i].doc);\n      String text = document.get(TEXT_FIELD);\n      actualOrder[i] = text;\n    }\n    searcher.close();\n\n    // Set up the expected order (i.e. Document 5, 4, 3, 2, 1).\n    String[] expectedOrder = new String[5];\n    expectedOrder[0] = \"Document 5\";\n    expectedOrder[1] = \"Document 4\";\n    expectedOrder[2] = \"Document 3\";\n    expectedOrder[3] = \"Document 2\";\n    expectedOrder[4] = \"Document 1\";\n\n    assertEquals(Arrays.asList(expectedOrder), Arrays.asList(actualOrder));\n  }\n\n","sourceOld":"  public void testReverseDateSort() throws Exception {\n    IndexSearcher searcher = newSearcher(reader);\n\n    Sort sort = new Sort(new SortField(DATE_TIME_FIELD, SortField.STRING, true));\n\n    QueryParser queryParser = new QueryParser(TEST_VERSION_CURRENT, TEXT_FIELD, new MockAnalyzer(random));\n    Query query = queryParser.parse(\"Document\");\n\n    // Execute the search and process the search results.\n    String[] actualOrder = new String[5];\n    ScoreDoc[] hits = searcher.search(query, null, 1000, sort).scoreDocs;\n    for (int i = 0; i < hits.length; i++) {\n      Document document = searcher.doc(hits[i].doc);\n      String text = document.get(TEXT_FIELD);\n      actualOrder[i] = text;\n    }\n    searcher.close();\n\n    // Set up the expected order (i.e. Document 5, 4, 3, 2, 1).\n    String[] expectedOrder = new String[5];\n    expectedOrder[0] = \"Document 5\";\n    expectedOrder[1] = \"Document 4\";\n    expectedOrder[2] = \"Document 3\";\n    expectedOrder[3] = \"Document 2\";\n    expectedOrder[4] = \"Document 1\";\n\n    assertEquals(Arrays.asList(expectedOrder), Arrays.asList(actualOrder));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2553b00f699380c64959ccb27991289aae87be2e","date":1309290151,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestDateSort#testReverseDateSort().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestDateSort#testReverseDateSort().mjava","sourceNew":"  public void testReverseDateSort() throws Exception {\n    IndexSearcher searcher = newSearcher(reader);\n\n    Sort sort = new Sort(new SortField(DATE_TIME_FIELD, SortField.Type.STRING, true));\n\n    QueryParser queryParser = new QueryParser(TEST_VERSION_CURRENT, TEXT_FIELD, new MockAnalyzer(random));\n    Query query = queryParser.parse(\"Document\");\n\n    // Execute the search and process the search results.\n    String[] actualOrder = new String[5];\n    ScoreDoc[] hits = searcher.search(query, null, 1000, sort).scoreDocs;\n    for (int i = 0; i < hits.length; i++) {\n      Document document = searcher.doc(hits[i].doc);\n      String text = document.get(TEXT_FIELD);\n      actualOrder[i] = text;\n    }\n    searcher.close();\n\n    // Set up the expected order (i.e. Document 5, 4, 3, 2, 1).\n    String[] expectedOrder = new String[5];\n    expectedOrder[0] = \"Document 5\";\n    expectedOrder[1] = \"Document 4\";\n    expectedOrder[2] = \"Document 3\";\n    expectedOrder[3] = \"Document 2\";\n    expectedOrder[4] = \"Document 1\";\n\n    assertEquals(Arrays.asList(expectedOrder), Arrays.asList(actualOrder));\n  }\n\n","sourceOld":"  public void testReverseDateSort() throws Exception {\n    IndexSearcher searcher = newSearcher(reader);\n\n    Sort sort = new Sort(new SortField(DATE_TIME_FIELD, SortField.STRING, true));\n\n    QueryParser queryParser = new QueryParser(TEST_VERSION_CURRENT, TEXT_FIELD, new MockAnalyzer(random));\n    Query query = queryParser.parse(\"Document\");\n\n    // Execute the search and process the search results.\n    String[] actualOrder = new String[5];\n    ScoreDoc[] hits = searcher.search(query, null, 1000, sort).scoreDocs;\n    for (int i = 0; i < hits.length; i++) {\n      Document document = searcher.doc(hits[i].doc);\n      String text = document.get(TEXT_FIELD);\n      actualOrder[i] = text;\n    }\n    searcher.close();\n\n    // Set up the expected order (i.e. Document 5, 4, 3, 2, 1).\n    String[] expectedOrder = new String[5];\n    expectedOrder[0] = \"Document 5\";\n    expectedOrder[1] = \"Document 4\";\n    expectedOrder[2] = \"Document 3\";\n    expectedOrder[3] = \"Document 2\";\n    expectedOrder[4] = \"Document 1\";\n\n    assertEquals(Arrays.asList(expectedOrder), Arrays.asList(actualOrder));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"112629f1dfd1451722c6047bcf593e6efc96f5f4","date":1309910887,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestDateSort#testReverseDateSort().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestDateSort#testReverseDateSort().mjava","sourceNew":"  public void testReverseDateSort() throws Exception {\n    IndexSearcher searcher = newSearcher(reader);\n\n    Sort sort = new Sort(new SortField(DATE_TIME_FIELD, SortField.Type.STRING, true));\n    Query query = new TermQuery(new Term(TEXT_FIELD, \"document\"));\n\n    // Execute the search and process the search results.\n    String[] actualOrder = new String[5];\n    ScoreDoc[] hits = searcher.search(query, null, 1000, sort).scoreDocs;\n    for (int i = 0; i < hits.length; i++) {\n      Document document = searcher.doc(hits[i].doc);\n      String text = document.get(TEXT_FIELD);\n      actualOrder[i] = text;\n    }\n    searcher.close();\n\n    // Set up the expected order (i.e. Document 5, 4, 3, 2, 1).\n    String[] expectedOrder = new String[5];\n    expectedOrder[0] = \"Document 5\";\n    expectedOrder[1] = \"Document 4\";\n    expectedOrder[2] = \"Document 3\";\n    expectedOrder[3] = \"Document 2\";\n    expectedOrder[4] = \"Document 1\";\n\n    assertEquals(Arrays.asList(expectedOrder), Arrays.asList(actualOrder));\n  }\n\n","sourceOld":"  public void testReverseDateSort() throws Exception {\n    IndexSearcher searcher = newSearcher(reader);\n\n    Sort sort = new Sort(new SortField(DATE_TIME_FIELD, SortField.Type.STRING, true));\n\n    QueryParser queryParser = new QueryParser(TEST_VERSION_CURRENT, TEXT_FIELD, new MockAnalyzer(random));\n    Query query = queryParser.parse(\"Document\");\n\n    // Execute the search and process the search results.\n    String[] actualOrder = new String[5];\n    ScoreDoc[] hits = searcher.search(query, null, 1000, sort).scoreDocs;\n    for (int i = 0; i < hits.length; i++) {\n      Document document = searcher.doc(hits[i].doc);\n      String text = document.get(TEXT_FIELD);\n      actualOrder[i] = text;\n    }\n    searcher.close();\n\n    // Set up the expected order (i.e. Document 5, 4, 3, 2, 1).\n    String[] expectedOrder = new String[5];\n    expectedOrder[0] = \"Document 5\";\n    expectedOrder[1] = \"Document 4\";\n    expectedOrder[2] = \"Document 3\";\n    expectedOrder[3] = \"Document 2\";\n    expectedOrder[4] = \"Document 1\";\n\n    assertEquals(Arrays.asList(expectedOrder), Arrays.asList(actualOrder));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestDateSort#testReverseDateSort().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestDateSort#testReverseDateSort().mjava","sourceNew":"  public void testReverseDateSort() throws Exception {\n    IndexSearcher searcher = newSearcher(reader);\n\n    Sort sort = new Sort(new SortField(DATE_TIME_FIELD, SortField.Type.STRING, true));\n    Query query = new TermQuery(new Term(TEXT_FIELD, \"document\"));\n\n    // Execute the search and process the search results.\n    String[] actualOrder = new String[5];\n    ScoreDoc[] hits = searcher.search(query, null, 1000, sort).scoreDocs;\n    for (int i = 0; i < hits.length; i++) {\n      Document document = searcher.doc(hits[i].doc);\n      String text = document.get(TEXT_FIELD);\n      actualOrder[i] = text;\n    }\n    searcher.close();\n\n    // Set up the expected order (i.e. Document 5, 4, 3, 2, 1).\n    String[] expectedOrder = new String[5];\n    expectedOrder[0] = \"Document 5\";\n    expectedOrder[1] = \"Document 4\";\n    expectedOrder[2] = \"Document 3\";\n    expectedOrder[3] = \"Document 2\";\n    expectedOrder[4] = \"Document 1\";\n\n    assertEquals(Arrays.asList(expectedOrder), Arrays.asList(actualOrder));\n  }\n\n","sourceOld":"  public void testReverseDateSort() throws Exception {\n    IndexSearcher searcher = newSearcher(reader);\n\n    Sort sort = new Sort(new SortField(DATE_TIME_FIELD, SortField.Type.STRING, true));\n\n    QueryParser queryParser = new QueryParser(TEST_VERSION_CURRENT, TEXT_FIELD, new MockAnalyzer(random));\n    Query query = queryParser.parse(\"Document\");\n\n    // Execute the search and process the search results.\n    String[] actualOrder = new String[5];\n    ScoreDoc[] hits = searcher.search(query, null, 1000, sort).scoreDocs;\n    for (int i = 0; i < hits.length; i++) {\n      Document document = searcher.doc(hits[i].doc);\n      String text = document.get(TEXT_FIELD);\n      actualOrder[i] = text;\n    }\n    searcher.close();\n\n    // Set up the expected order (i.e. Document 5, 4, 3, 2, 1).\n    String[] expectedOrder = new String[5];\n    expectedOrder[0] = \"Document 5\";\n    expectedOrder[1] = \"Document 4\";\n    expectedOrder[2] = \"Document 3\";\n    expectedOrder[3] = \"Document 2\";\n    expectedOrder[4] = \"Document 1\";\n\n    assertEquals(Arrays.asList(expectedOrder), Arrays.asList(actualOrder));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestDateSort#testReverseDateSort().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestDateSort#testReverseDateSort().mjava","sourceNew":"  public void testReverseDateSort() throws Exception {\n    IndexSearcher searcher = newSearcher(reader);\n\n    Sort sort = new Sort(new SortField(DATE_TIME_FIELD, SortField.Type.STRING, true));\n    Query query = new TermQuery(new Term(TEXT_FIELD, \"document\"));\n\n    // Execute the search and process the search results.\n    String[] actualOrder = new String[5];\n    ScoreDoc[] hits = searcher.search(query, null, 1000, sort).scoreDocs;\n    for (int i = 0; i < hits.length; i++) {\n      Document document = searcher.doc(hits[i].doc);\n      String text = document.get(TEXT_FIELD);\n      actualOrder[i] = text;\n    }\n    searcher.close();\n\n    // Set up the expected order (i.e. Document 5, 4, 3, 2, 1).\n    String[] expectedOrder = new String[5];\n    expectedOrder[0] = \"Document 5\";\n    expectedOrder[1] = \"Document 4\";\n    expectedOrder[2] = \"Document 3\";\n    expectedOrder[3] = \"Document 2\";\n    expectedOrder[4] = \"Document 1\";\n\n    assertEquals(Arrays.asList(expectedOrder), Arrays.asList(actualOrder));\n  }\n\n","sourceOld":"  public void testReverseDateSort() throws Exception {\n    IndexSearcher searcher = newSearcher(reader);\n\n    Sort sort = new Sort(new SortField(DATE_TIME_FIELD, SortField.STRING, true));\n\n    QueryParser queryParser = new QueryParser(TEST_VERSION_CURRENT, TEXT_FIELD, new MockAnalyzer(random));\n    Query query = queryParser.parse(\"Document\");\n\n    // Execute the search and process the search results.\n    String[] actualOrder = new String[5];\n    ScoreDoc[] hits = searcher.search(query, null, 1000, sort).scoreDocs;\n    for (int i = 0; i < hits.length; i++) {\n      Document document = searcher.doc(hits[i].doc);\n      String text = document.get(TEXT_FIELD);\n      actualOrder[i] = text;\n    }\n    searcher.close();\n\n    // Set up the expected order (i.e. Document 5, 4, 3, 2, 1).\n    String[] expectedOrder = new String[5];\n    expectedOrder[0] = \"Document 5\";\n    expectedOrder[1] = \"Document 4\";\n    expectedOrder[2] = \"Document 3\";\n    expectedOrder[3] = \"Document 2\";\n    expectedOrder[4] = \"Document 1\";\n\n    assertEquals(Arrays.asList(expectedOrder), Arrays.asList(actualOrder));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e7c2454a6a8237bfd0e953f5b940838408c9055","date":1323649300,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestDateSort#testReverseDateSort().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestDateSort#testReverseDateSort().mjava","sourceNew":"  public void testReverseDateSort() throws Exception {\n    IndexSearcher searcher = newSearcher(reader);\n\n    Sort sort = new Sort(new SortField(DATE_TIME_FIELD, SortField.Type.STRING, true));\n    Query query = new TermQuery(new Term(TEXT_FIELD, \"document\"));\n\n    // Execute the search and process the search results.\n    String[] actualOrder = new String[5];\n    ScoreDoc[] hits = searcher.search(query, null, 1000, sort).scoreDocs;\n    for (int i = 0; i < hits.length; i++) {\n      Document document = searcher.doc(hits[i].doc);\n      String text = document.get(TEXT_FIELD);\n      actualOrder[i] = text;\n    }\n\n    // Set up the expected order (i.e. Document 5, 4, 3, 2, 1).\n    String[] expectedOrder = new String[5];\n    expectedOrder[0] = \"Document 5\";\n    expectedOrder[1] = \"Document 4\";\n    expectedOrder[2] = \"Document 3\";\n    expectedOrder[3] = \"Document 2\";\n    expectedOrder[4] = \"Document 1\";\n\n    assertEquals(Arrays.asList(expectedOrder), Arrays.asList(actualOrder));\n  }\n\n","sourceOld":"  public void testReverseDateSort() throws Exception {\n    IndexSearcher searcher = newSearcher(reader);\n\n    Sort sort = new Sort(new SortField(DATE_TIME_FIELD, SortField.Type.STRING, true));\n    Query query = new TermQuery(new Term(TEXT_FIELD, \"document\"));\n\n    // Execute the search and process the search results.\n    String[] actualOrder = new String[5];\n    ScoreDoc[] hits = searcher.search(query, null, 1000, sort).scoreDocs;\n    for (int i = 0; i < hits.length; i++) {\n      Document document = searcher.doc(hits[i].doc);\n      String text = document.get(TEXT_FIELD);\n      actualOrder[i] = text;\n    }\n    searcher.close();\n\n    // Set up the expected order (i.e. Document 5, 4, 3, 2, 1).\n    String[] expectedOrder = new String[5];\n    expectedOrder[0] = \"Document 5\";\n    expectedOrder[1] = \"Document 4\";\n    expectedOrder[2] = \"Document 3\";\n    expectedOrder[3] = \"Document 2\";\n    expectedOrder[4] = \"Document 1\";\n\n    assertEquals(Arrays.asList(expectedOrder), Arrays.asList(actualOrder));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","date":1323720782,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestDateSort#testReverseDateSort().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestDateSort#testReverseDateSort().mjava","sourceNew":"  public void testReverseDateSort() throws Exception {\n    IndexSearcher searcher = newSearcher(reader);\n\n    Sort sort = new Sort(new SortField(DATE_TIME_FIELD, SortField.Type.STRING, true));\n    Query query = new TermQuery(new Term(TEXT_FIELD, \"document\"));\n\n    // Execute the search and process the search results.\n    String[] actualOrder = new String[5];\n    ScoreDoc[] hits = searcher.search(query, null, 1000, sort).scoreDocs;\n    for (int i = 0; i < hits.length; i++) {\n      Document document = searcher.doc(hits[i].doc);\n      String text = document.get(TEXT_FIELD);\n      actualOrder[i] = text;\n    }\n\n    // Set up the expected order (i.e. Document 5, 4, 3, 2, 1).\n    String[] expectedOrder = new String[5];\n    expectedOrder[0] = \"Document 5\";\n    expectedOrder[1] = \"Document 4\";\n    expectedOrder[2] = \"Document 3\";\n    expectedOrder[3] = \"Document 2\";\n    expectedOrder[4] = \"Document 1\";\n\n    assertEquals(Arrays.asList(expectedOrder), Arrays.asList(actualOrder));\n  }\n\n","sourceOld":"  public void testReverseDateSort() throws Exception {\n    IndexSearcher searcher = newSearcher(reader);\n\n    Sort sort = new Sort(new SortField(DATE_TIME_FIELD, SortField.Type.STRING, true));\n    Query query = new TermQuery(new Term(TEXT_FIELD, \"document\"));\n\n    // Execute the search and process the search results.\n    String[] actualOrder = new String[5];\n    ScoreDoc[] hits = searcher.search(query, null, 1000, sort).scoreDocs;\n    for (int i = 0; i < hits.length; i++) {\n      Document document = searcher.doc(hits[i].doc);\n      String text = document.get(TEXT_FIELD);\n      actualOrder[i] = text;\n    }\n    searcher.close();\n\n    // Set up the expected order (i.e. Document 5, 4, 3, 2, 1).\n    String[] expectedOrder = new String[5];\n    expectedOrder[0] = \"Document 5\";\n    expectedOrder[1] = \"Document 4\";\n    expectedOrder[2] = \"Document 3\";\n    expectedOrder[3] = \"Document 2\";\n    expectedOrder[4] = \"Document 1\";\n\n    assertEquals(Arrays.asList(expectedOrder), Arrays.asList(actualOrder));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestDateSort#testReverseDateSort().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestDateSort#testReverseDateSort().mjava","sourceNew":"  public void testReverseDateSort() throws Exception {\n    IndexSearcher searcher = newSearcher(reader);\n\n    Sort sort = new Sort(new SortField(DATE_TIME_FIELD, SortField.Type.STRING, true));\n    Query query = new TermQuery(new Term(TEXT_FIELD, \"document\"));\n\n    // Execute the search and process the search results.\n    String[] actualOrder = new String[5];\n    ScoreDoc[] hits = searcher.search(query, null, 1000, sort).scoreDocs;\n    for (int i = 0; i < hits.length; i++) {\n      Document document = searcher.doc(hits[i].doc);\n      String text = document.get(TEXT_FIELD);\n      actualOrder[i] = text;\n    }\n\n    // Set up the expected order (i.e. Document 5, 4, 3, 2, 1).\n    String[] expectedOrder = new String[5];\n    expectedOrder[0] = \"Document 5\";\n    expectedOrder[1] = \"Document 4\";\n    expectedOrder[2] = \"Document 3\";\n    expectedOrder[3] = \"Document 2\";\n    expectedOrder[4] = \"Document 1\";\n\n    assertEquals(Arrays.asList(expectedOrder), Arrays.asList(actualOrder));\n  }\n\n","sourceOld":"  public void testReverseDateSort() throws Exception {\n    IndexSearcher searcher = newSearcher(reader);\n\n    Sort sort = new Sort(new SortField(DATE_TIME_FIELD, SortField.Type.STRING, true));\n    Query query = new TermQuery(new Term(TEXT_FIELD, \"document\"));\n\n    // Execute the search and process the search results.\n    String[] actualOrder = new String[5];\n    ScoreDoc[] hits = searcher.search(query, null, 1000, sort).scoreDocs;\n    for (int i = 0; i < hits.length; i++) {\n      Document document = searcher.doc(hits[i].doc);\n      String text = document.get(TEXT_FIELD);\n      actualOrder[i] = text;\n    }\n\n    // Set up the expected order (i.e. Document 5, 4, 3, 2, 1).\n    String[] expectedOrder = new String[5];\n    expectedOrder[0] = \"Document 5\";\n    expectedOrder[1] = \"Document 4\";\n    expectedOrder[2] = \"Document 3\";\n    expectedOrder[3] = \"Document 2\";\n    expectedOrder[4] = \"Document 1\";\n\n    assertEquals(Arrays.asList(expectedOrder), Arrays.asList(actualOrder));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["0e7c2454a6a8237bfd0e953f5b940838408c9055"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":["112629f1dfd1451722c6047bcf593e6efc96f5f4","0e7c2454a6a8237bfd0e953f5b940838408c9055"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["29ef99d61cda9641b6250bf9567329a6e65f901d","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"d572389229127c297dd1fa5ce4758e1cec41e799":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"5f4e87790277826a2aea119328600dfb07761f32":["d572389229127c297dd1fa5ce4758e1cec41e799","c084e47df29de3330311d69dabf515ceaa989512"],"962d04139994fce5193143ef35615499a9a96d78":["bde51b089eb7f86171eb3406e38a274743f9b7ac","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"2553b00f699380c64959ccb27991289aae87be2e":["a3776dccca01c11e7046323cfad46a3b4a471233","090a0320e4de4a3674376aef96b9701f47564f86"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["f2c5f0cb44df114db4228c8f77861714b5cabaea","112629f1dfd1451722c6047bcf593e6efc96f5f4"],"090a0320e4de4a3674376aef96b9701f47564f86":["f2c5f0cb44df114db4228c8f77861714b5cabaea"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["2553b00f699380c64959ccb27991289aae87be2e","112629f1dfd1451722c6047bcf593e6efc96f5f4"],"790e1fde4caa765b3faaad3fbcd25c6973450336":["c084e47df29de3330311d69dabf515ceaa989512"],"c084e47df29de3330311d69dabf515ceaa989512":["d572389229127c297dd1fa5ce4758e1cec41e799"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["790e1fde4caa765b3faaad3fbcd25c6973450336"],"0e7c2454a6a8237bfd0e953f5b940838408c9055":["112629f1dfd1451722c6047bcf593e6efc96f5f4"],"a3776dccca01c11e7046323cfad46a3b4a471233":["790e1fde4caa765b3faaad3fbcd25c6973450336","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["c084e47df29de3330311d69dabf515ceaa989512","790e1fde4caa765b3faaad3fbcd25c6973450336"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"112629f1dfd1451722c6047bcf593e6efc96f5f4":["090a0320e4de4a3674376aef96b9701f47564f86"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["5f4e87790277826a2aea119328600dfb07761f32","790e1fde4caa765b3faaad3fbcd25c6973450336"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":[],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"d572389229127c297dd1fa5ce4758e1cec41e799":["5f4e87790277826a2aea119328600dfb07761f32","c084e47df29de3330311d69dabf515ceaa989512"],"5f4e87790277826a2aea119328600dfb07761f32":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"962d04139994fce5193143ef35615499a9a96d78":[],"2553b00f699380c64959ccb27991289aae87be2e":["817d8435e9135b756f08ce6710ab0baac51bdf88"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"090a0320e4de4a3674376aef96b9701f47564f86":["2553b00f699380c64959ccb27991289aae87be2e","112629f1dfd1451722c6047bcf593e6efc96f5f4"],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"790e1fde4caa765b3faaad3fbcd25c6973450336":["f2c5f0cb44df114db4228c8f77861714b5cabaea","a3776dccca01c11e7046323cfad46a3b4a471233","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"c084e47df29de3330311d69dabf515ceaa989512":["5f4e87790277826a2aea119328600dfb07761f32","790e1fde4caa765b3faaad3fbcd25c6973450336","29ef99d61cda9641b6250bf9567329a6e65f901d"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","d083e83f225b11e5fdd900e83d26ddb385b6955c","090a0320e4de4a3674376aef96b9701f47564f86","a3776dccca01c11e7046323cfad46a3b4a471233"],"0e7c2454a6a8237bfd0e953f5b940838408c9055":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","93ccd971aca7fb61b7f1b946e44714cfc80bfc7c"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"a3776dccca01c11e7046323cfad46a3b4a471233":["2553b00f699380c64959ccb27991289aae87be2e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"112629f1dfd1451722c6047bcf593e6efc96f5f4":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","0e7c2454a6a8237bfd0e953f5b940838408c9055"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["962d04139994fce5193143ef35615499a9a96d78"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["d572389229127c297dd1fa5ce4758e1cec41e799"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}