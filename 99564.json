{"path":"lucene/src/test/org/apache/lucene/search/TestBooleanMinShouldMatch#verifyNrHits(Query,int).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestBooleanMinShouldMatch#verifyNrHits(Query,int).mjava","pathOld":"src/test/org/apache/lucene/search/TestBooleanMinShouldMatch#verifyNrHits(Query,int).mjava","sourceNew":"    public void verifyNrHits(Query q, int expected) throws Exception {\n        ScoreDoc[] h = s.search(q, null, 1000).scoreDocs;\n        if (expected != h.length) {\n            printHits(getName(), h, s);\n        }\n        assertEquals(\"result count\", expected, h.length);\n        QueryUtils.check(q,s);\n    }\n\n","sourceOld":"    public void verifyNrHits(Query q, int expected) throws Exception {\n        ScoreDoc[] h = s.search(q, null, 1000).scoreDocs;\n        if (expected != h.length) {\n            printHits(getName(), h, s);\n        }\n        assertEquals(\"result count\", expected, h.length);\n        QueryUtils.check(q,s);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"53a31399f2471493d67b19a95c028a74e0113b6a","date":1289817072,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestBooleanMinShouldMatch#verifyNrHits(Query,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestBooleanMinShouldMatch#verifyNrHits(Query,int).mjava","sourceNew":"    public void verifyNrHits(Query q, int expected) throws Exception {\n        ScoreDoc[] h = s.search(q, null, 1000).scoreDocs;\n        if (expected != h.length) {\n            printHits(getName(), h, s);\n        }\n        assertEquals(\"result count\", expected, h.length);\n        QueryUtils.check(random, q,s);\n    }\n\n","sourceOld":"    public void verifyNrHits(Query q, int expected) throws Exception {\n        ScoreDoc[] h = s.search(q, null, 1000).scoreDocs;\n        if (expected != h.length) {\n            printHits(getName(), h, s);\n        }\n        assertEquals(\"result count\", expected, h.length);\n        QueryUtils.check(q,s);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ab1f5591dc05f1f2b5407d809c9699f75554a32","date":1290008586,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestBooleanMinShouldMatch#verifyNrHits(Query,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestBooleanMinShouldMatch#verifyNrHits(Query,int).mjava","sourceNew":"    public void verifyNrHits(Query q, int expected) throws Exception {\n        ScoreDoc[] h = s.search(q, null, 1000).scoreDocs;\n        if (expected != h.length) {\n            printHits(getName(), h, s);\n        }\n        assertEquals(\"result count\", expected, h.length);\n        QueryUtils.check(random, q,s);\n    }\n\n","sourceOld":"    public void verifyNrHits(Query q, int expected) throws Exception {\n        ScoreDoc[] h = s.search(q, null, 1000).scoreDocs;\n        if (expected != h.length) {\n            printHits(getName(), h, s);\n        }\n        assertEquals(\"result count\", expected, h.length);\n        QueryUtils.check(q,s);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestBooleanMinShouldMatch#verifyNrHits(Query,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestBooleanMinShouldMatch#verifyNrHits(Query,int).mjava","sourceNew":"    public void verifyNrHits(Query q, int expected) throws Exception {\n        ScoreDoc[] h = s.search(q, null, 1000).scoreDocs;\n        if (expected != h.length) {\n            printHits(getName(), h, s);\n        }\n        assertEquals(\"result count\", expected, h.length);\n        QueryUtils.check(random, q,s);\n    }\n\n","sourceOld":"    public void verifyNrHits(Query q, int expected) throws Exception {\n        ScoreDoc[] h = s.search(q, null, 1000).scoreDocs;\n        if (expected != h.length) {\n            printHits(getName(), h, s);\n        }\n        assertEquals(\"result count\", expected, h.length);\n        QueryUtils.check(q,s);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"60ba444201d2570214b6fcf1d15600dc1a01f548","date":1313868045,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestBooleanMinShouldMatch#verifyNrHits(Query,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestBooleanMinShouldMatch#verifyNrHits(Query,int).mjava","sourceNew":"    public void verifyNrHits(Query q, int expected) throws Exception {\n        ScoreDoc[] h = s.search(q, null, 1000).scoreDocs;\n        if (expected != h.length) {\n            printHits(getName(), h, s);\n        }\n        assertEquals(\"result count\", expected, h.length);\n        //System.out.println(\"TEST: now check\");\n        QueryUtils.check(random, q,s);\n    }\n\n","sourceOld":"    public void verifyNrHits(Query q, int expected) throws Exception {\n        ScoreDoc[] h = s.search(q, null, 1000).scoreDocs;\n        if (expected != h.length) {\n            printHits(getName(), h, s);\n        }\n        assertEquals(\"result count\", expected, h.length);\n        QueryUtils.check(random, q,s);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanMinShouldMatch#verifyNrHits(Query,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestBooleanMinShouldMatch#verifyNrHits(Query,int).mjava","sourceNew":"    public void verifyNrHits(Query q, int expected) throws Exception {\n        ScoreDoc[] h = s.search(q, null, 1000).scoreDocs;\n        if (expected != h.length) {\n            printHits(getName(), h, s);\n        }\n        assertEquals(\"result count\", expected, h.length);\n        //System.out.println(\"TEST: now check\");\n        QueryUtils.check(random, q,s);\n    }\n\n","sourceOld":"    public void verifyNrHits(Query q, int expected) throws Exception {\n        ScoreDoc[] h = s.search(q, null, 1000).scoreDocs;\n        if (expected != h.length) {\n            printHits(getName(), h, s);\n        }\n        assertEquals(\"result count\", expected, h.length);\n        //System.out.println(\"TEST: now check\");\n        QueryUtils.check(random, q,s);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"60ba444201d2570214b6fcf1d15600dc1a01f548":["53a31399f2471493d67b19a95c028a74e0113b6a"],"53a31399f2471493d67b19a95c028a74e0113b6a":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9ab1f5591dc05f1f2b5407d809c9699f75554a32":["9454a6510e2db155fb01faa5c049b06ece95fab9","53a31399f2471493d67b19a95c028a74e0113b6a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["60ba444201d2570214b6fcf1d15600dc1a01f548"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["9454a6510e2db155fb01faa5c049b06ece95fab9","53a31399f2471493d67b19a95c028a74e0113b6a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"60ba444201d2570214b6fcf1d15600dc1a01f548":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"53a31399f2471493d67b19a95c028a74e0113b6a":["60ba444201d2570214b6fcf1d15600dc1a01f548","9ab1f5591dc05f1f2b5407d809c9699f75554a32","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"9ab1f5591dc05f1f2b5407d809c9699f75554a32":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["53a31399f2471493d67b19a95c028a74e0113b6a","9ab1f5591dc05f1f2b5407d809c9699f75554a32","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9ab1f5591dc05f1f2b5407d809c9699f75554a32","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}