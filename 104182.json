{"path":"lucene/core/src/java/org/apache/lucene/geo/Tessellator#getSharedVertex(Node,Node).mjava","commits":[{"id":"09c1e6d465800c73af60624bf9d4459a19f7940c","date":1579293280,"type":1,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/geo/Tessellator#getSharedVertex(Node,Node).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/geo/Tessellator#getSharedVertex(Node,Node).mjava","sourceNew":"  /** Check if the provided vertex is in the polygon and return it **/\n  private static Node getSharedVertex(final Node polygon, final Node vertex) {\n    Node next = polygon;\n    do {\n      if (isVertexEquals(next, vertex)) {\n        return next;\n      }\n      next = next.next;\n    } while(next != polygon);\n    return null;\n  }\n\n","sourceOld":"  /** Check if the provided vertex is in the polygon and return it **/\n  private static Node getSharedVertex(final Node polygon, final Node vertex) {\n    Node next = polygon;\n    do {\n      if (isVertexEquals(next, vertex)) {\n        return next;\n      }\n      next = next.next;\n    } while(next != polygon);\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"89405f778f7b217c96ad6331f46e9d16bee03f22","date":1592290836,"type":3,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/geo/Tessellator#getSharedVertex(Node,Node).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/geo/Tessellator#getSharedVertex(Node,Node).mjava","sourceNew":"  /** Check if the provided vertex is in the polygon and return it **/\n  private static Node getSharedVertex(final Node polygon, final Node vertex) {\n    Node next = polygon;\n    do {\n      if (isVertexEquals(next, vertex)) {\n        // make sure we are not crossing the polygon. This might happen when several holes share the same polygon vertex.\n        boolean crosses = GeoUtils.lineCrossesLine(next.previous.getX(), next.previous.getY(), vertex.next.getX(), vertex.next.getY(),\n                                                   next.next.getX(), next.next.getY(), vertex.previous.getX(), vertex.previous.getY());\n        if (crosses == false) {\n          return next;\n        }\n      }\n      next = next.next;\n    } while(next != polygon);\n    return null;\n  }\n\n","sourceOld":"  /** Check if the provided vertex is in the polygon and return it **/\n  private static Node getSharedVertex(final Node polygon, final Node vertex) {\n    Node next = polygon;\n    do {\n      if (isVertexEquals(next, vertex)) {\n        return next;\n      }\n      next = next.next;\n    } while(next != polygon);\n    return null;\n  }\n\n","bugFix":["3154b8a89750f531ca89c2fc8d7dc22a6ee5739d"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"89405f778f7b217c96ad6331f46e9d16bee03f22":["09c1e6d465800c73af60624bf9d4459a19f7940c"],"09c1e6d465800c73af60624bf9d4459a19f7940c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["89405f778f7b217c96ad6331f46e9d16bee03f22"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["09c1e6d465800c73af60624bf9d4459a19f7940c"],"89405f778f7b217c96ad6331f46e9d16bee03f22":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"09c1e6d465800c73af60624bf9d4459a19f7940c":["89405f778f7b217c96ad6331f46e9d16bee03f22"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}