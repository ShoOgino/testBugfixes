{"path":"lucene/analysis/common/src/java/org/apache/lucene/analysis/en/KStemmer#alEndings().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/en/KStemmer#alEndings().mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/en/KStemmer#alEndings().mjava","sourceNew":"  /*\n   * this routine deals with -al endings. Some of the endings from the previous\n   * routine are finished up here.\n   */\n  private void alEndings() {\n    int old_k = k;\n    \n    if (word.length() < 4) return;\n    if (endsIn('a', 'l')) {\n      word.setLength(j + 1);\n      k = j;\n      if (lookup()) /* try just removing the -al */\n      return;\n      \n      if (doubleC(j)) { /* allow for a doubled consonant */\n        word.setLength(j);\n        k = j - 1;\n        if (lookup()) return;\n        word.unsafeWrite(word.charAt(j - 1));\n      }\n      \n      word.setLength(j + 1);\n      word.unsafeWrite('e'); /* try removing the -al and adding -e */\n      k = j + 1;\n      if (lookup()) return;\n      \n      word.setLength(j + 1);\n      word.append(\"um\"); /* try converting -al to -um */\n      /* (e.g., optimal - > optimum ) */\n      k = j + 2;\n      if (lookup()) return;\n      \n      word.setLength(j + 1);\n      word.append(\"al\"); /* restore the ending to the way it was */\n      k = old_k;\n      \n      if ((j > 0) && (word.charAt(j - 1) == 'i') && (word.charAt(j) == 'c')) {\n        word.setLength(j - 1); /* try removing -ical */\n        k = j - 2;\n        if (lookup()) return;\n        \n        word.setLength(j - 1);\n        word.unsafeWrite('y');/* try turning -ical to -y (e.g., bibliographical) */\n        k = j - 1;\n        if (lookup()) return;\n        \n        word.setLength(j - 1);\n        word.append(\"ic\"); /* the default is to convert -ical to -ic */\n        k = j;\n        // nolookup() ... converting ical to ic means removing \"al\" which we\n        // already tried\n        // ERROR\n        lookup();\n        return;\n      }\n      \n      if (word.charAt(j) == 'i') { /* sometimes -ial endings should be removed */\n        word.setLength(j); /* (sometimes it gets turned into -y, but we */\n        k = j - 1; /* aren't dealing with that case for now) */\n        if (lookup()) return;\n        word.append(\"ial\");\n        k = old_k;\n        lookup();\n      }\n      \n    }\n    return;\n  }\n\n","sourceOld":"  /*\n   * this routine deals with -al endings. Some of the endings from the previous\n   * routine are finished up here.\n   */\n  private void alEndings() {\n    int old_k = k;\n    \n    if (word.length() < 4) return;\n    if (endsIn('a', 'l')) {\n      word.setLength(j + 1);\n      k = j;\n      if (lookup()) /* try just removing the -al */\n      return;\n      \n      if (doubleC(j)) { /* allow for a doubled consonant */\n        word.setLength(j);\n        k = j - 1;\n        if (lookup()) return;\n        word.unsafeWrite(word.charAt(j - 1));\n      }\n      \n      word.setLength(j + 1);\n      word.unsafeWrite('e'); /* try removing the -al and adding -e */\n      k = j + 1;\n      if (lookup()) return;\n      \n      word.setLength(j + 1);\n      word.append(\"um\"); /* try converting -al to -um */\n      /* (e.g., optimal - > optimum ) */\n      k = j + 2;\n      if (lookup()) return;\n      \n      word.setLength(j + 1);\n      word.append(\"al\"); /* restore the ending to the way it was */\n      k = old_k;\n      \n      if ((j > 0) && (word.charAt(j - 1) == 'i') && (word.charAt(j) == 'c')) {\n        word.setLength(j - 1); /* try removing -ical */\n        k = j - 2;\n        if (lookup()) return;\n        \n        word.setLength(j - 1);\n        word.unsafeWrite('y');/* try turning -ical to -y (e.g., bibliographical) */\n        k = j - 1;\n        if (lookup()) return;\n        \n        word.setLength(j - 1);\n        word.append(\"ic\"); /* the default is to convert -ical to -ic */\n        k = j;\n        // nolookup() ... converting ical to ic means removing \"al\" which we\n        // already tried\n        // ERROR\n        lookup();\n        return;\n      }\n      \n      if (word.charAt(j) == 'i') { /* sometimes -ial endings should be removed */\n        word.setLength(j); /* (sometimes it gets turned into -y, but we */\n        k = j - 1; /* aren't dealing with that case for now) */\n        if (lookup()) return;\n        word.append(\"ial\");\n        k = old_k;\n        lookup();\n      }\n      \n    }\n    return;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}