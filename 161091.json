{"path":"lucene/core/src/java/org/apache/lucene/index/SortingStoredFieldsConsumer#flush(SegmentWriteState,Sorter.DocMap).mjava","commits":[{"id":"86a0a50d2d14aaee1e635bbec914468551f7f9a2","date":1482234306,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SortingStoredFieldsConsumer#flush(SegmentWriteState,Sorter.DocMap).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  void flush(SegmentWriteState state, Sorter.DocMap sortMap) throws IOException {\n    super.flush(state, sortMap);\n    if (sortMap == null) {\n      // we're lucky the index is already sorted, just rename the temporary file and return\n      for (Map.Entry<String, String> entry : tmpDirectory.getTemporaryFiles().entrySet()) {\n        tmpDirectory.rename(entry.getValue(), entry.getKey());\n      }\n      return;\n    }\n    StoredFieldsReader reader = docWriter.codec.storedFieldsFormat()\n        .fieldsReader(tmpDirectory, state.segmentInfo, state.fieldInfos, IOContext.DEFAULT);\n    StoredFieldsReader mergeReader = reader.getMergeInstance();\n    StoredFieldsWriter sortWriter = docWriter.codec.storedFieldsFormat()\n        .fieldsWriter(state.directory, state.segmentInfo, IOContext.DEFAULT);\n    try {\n      reader.checkIntegrity();\n      CopyVisitor visitor = new CopyVisitor(sortWriter);\n      for (int docID = 0; docID < state.segmentInfo.maxDoc(); docID++) {\n        sortWriter.startDocument();\n        mergeReader.visitDocument(sortMap.newToOld(docID), visitor);\n        sortWriter.finishDocument();\n      }\n      sortWriter.finish(state.fieldInfos, state.segmentInfo.maxDoc());\n    } finally {\n      IOUtils.close(reader, sortWriter);\n      IOUtils.deleteFiles(tmpDirectory,\n          tmpDirectory.getTemporaryFiles().values());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","date":1482251961,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SortingStoredFieldsConsumer#flush(SegmentWriteState,Sorter.DocMap).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  void flush(SegmentWriteState state, Sorter.DocMap sortMap) throws IOException {\n    super.flush(state, sortMap);\n    if (sortMap == null) {\n      // we're lucky the index is already sorted, just rename the temporary file and return\n      for (Map.Entry<String, String> entry : tmpDirectory.getTemporaryFiles().entrySet()) {\n        tmpDirectory.rename(entry.getValue(), entry.getKey());\n      }\n      return;\n    }\n    StoredFieldsReader reader = docWriter.codec.storedFieldsFormat()\n        .fieldsReader(tmpDirectory, state.segmentInfo, state.fieldInfos, IOContext.DEFAULT);\n    StoredFieldsReader mergeReader = reader.getMergeInstance();\n    StoredFieldsWriter sortWriter = docWriter.codec.storedFieldsFormat()\n        .fieldsWriter(state.directory, state.segmentInfo, IOContext.DEFAULT);\n    try {\n      reader.checkIntegrity();\n      CopyVisitor visitor = new CopyVisitor(sortWriter);\n      for (int docID = 0; docID < state.segmentInfo.maxDoc(); docID++) {\n        sortWriter.startDocument();\n        mergeReader.visitDocument(sortMap.newToOld(docID), visitor);\n        sortWriter.finishDocument();\n      }\n      sortWriter.finish(state.fieldInfos, state.segmentInfo.maxDoc());\n    } finally {\n      IOUtils.close(reader, sortWriter);\n      IOUtils.deleteFiles(tmpDirectory,\n          tmpDirectory.getTemporaryFiles().values());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6926606ec5e0dd8d4ec79166d39a3b4ddb862bf4","date":1599581893,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SortingStoredFieldsConsumer#flush(SegmentWriteState,Sorter.DocMap).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SortingStoredFieldsConsumer#flush(SegmentWriteState,Sorter.DocMap).mjava","sourceNew":"  @Override\n  void flush(SegmentWriteState state, Sorter.DocMap sortMap) throws IOException {\n    super.flush(state, sortMap);\n    if (sortMap == null) {\n      // we're lucky the index is already sorted, just rename the temporary file and return\n      for (Map.Entry<String, String> entry : tmpDirectory.getTemporaryFiles().entrySet()) {\n        tmpDirectory.rename(entry.getValue(), entry.getKey());\n      }\n      return;\n    }\n    StoredFieldsReader reader = codec.storedFieldsFormat()\n        .fieldsReader(tmpDirectory, state.segmentInfo, state.fieldInfos, IOContext.DEFAULT);\n    StoredFieldsReader mergeReader = reader.getMergeInstance();\n    StoredFieldsWriter sortWriter = codec.storedFieldsFormat()\n        .fieldsWriter(state.directory, state.segmentInfo, IOContext.DEFAULT);\n    try {\n      reader.checkIntegrity();\n      CopyVisitor visitor = new CopyVisitor(sortWriter);\n      for (int docID = 0; docID < state.segmentInfo.maxDoc(); docID++) {\n        sortWriter.startDocument();\n        mergeReader.visitDocument(sortMap.newToOld(docID), visitor);\n        sortWriter.finishDocument();\n      }\n      sortWriter.finish(state.fieldInfos, state.segmentInfo.maxDoc());\n    } finally {\n      IOUtils.close(reader, sortWriter);\n      IOUtils.deleteFiles(tmpDirectory,\n          tmpDirectory.getTemporaryFiles().values());\n    }\n  }\n\n","sourceOld":"  @Override\n  void flush(SegmentWriteState state, Sorter.DocMap sortMap) throws IOException {\n    super.flush(state, sortMap);\n    if (sortMap == null) {\n      // we're lucky the index is already sorted, just rename the temporary file and return\n      for (Map.Entry<String, String> entry : tmpDirectory.getTemporaryFiles().entrySet()) {\n        tmpDirectory.rename(entry.getValue(), entry.getKey());\n      }\n      return;\n    }\n    StoredFieldsReader reader = docWriter.codec.storedFieldsFormat()\n        .fieldsReader(tmpDirectory, state.segmentInfo, state.fieldInfos, IOContext.DEFAULT);\n    StoredFieldsReader mergeReader = reader.getMergeInstance();\n    StoredFieldsWriter sortWriter = docWriter.codec.storedFieldsFormat()\n        .fieldsWriter(state.directory, state.segmentInfo, IOContext.DEFAULT);\n    try {\n      reader.checkIntegrity();\n      CopyVisitor visitor = new CopyVisitor(sortWriter);\n      for (int docID = 0; docID < state.segmentInfo.maxDoc(); docID++) {\n        sortWriter.startDocument();\n        mergeReader.visitDocument(sortMap.newToOld(docID), visitor);\n        sortWriter.finishDocument();\n      }\n      sortWriter.finish(state.fieldInfos, state.segmentInfo.maxDoc());\n    } finally {\n      IOUtils.close(reader, sortWriter);\n      IOUtils.deleteFiles(tmpDirectory,\n          tmpDirectory.getTemporaryFiles().values());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ee4c382ffe6e1add00d46a5fb87083b7658fa35","date":1600099624,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SortingStoredFieldsConsumer#flush(SegmentWriteState,Sorter.DocMap).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SortingStoredFieldsConsumer#flush(SegmentWriteState,Sorter.DocMap).mjava","sourceNew":"  @Override\n  void flush(SegmentWriteState state, Sorter.DocMap sortMap) throws IOException {\n    super.flush(state, sortMap);\n    if (sortMap == null) {\n      // we're lucky the index is already sorted, just rename the temporary file and return\n      for (Map.Entry<String, String> entry : tmpDirectory.getTemporaryFiles().entrySet()) {\n        tmpDirectory.rename(entry.getValue(), entry.getKey());\n      }\n      return;\n    }\n    StoredFieldsReader reader = codec.storedFieldsFormat()\n        .fieldsReader(tmpDirectory, state.segmentInfo, state.fieldInfos, IOContext.DEFAULT);\n    // Don't pull a merge instance, since merge instances optimize for\n    // sequential access while we consume stored fields in random order here.\n    StoredFieldsWriter sortWriter = codec.storedFieldsFormat()\n        .fieldsWriter(state.directory, state.segmentInfo, IOContext.DEFAULT);\n    try {\n      reader.checkIntegrity();\n      CopyVisitor visitor = new CopyVisitor(sortWriter);\n      for (int docID = 0; docID < state.segmentInfo.maxDoc(); docID++) {\n        sortWriter.startDocument();\n        reader.visitDocument(sortMap.newToOld(docID), visitor);\n        sortWriter.finishDocument();\n      }\n      sortWriter.finish(state.fieldInfos, state.segmentInfo.maxDoc());\n    } finally {\n      IOUtils.close(reader, sortWriter);\n      IOUtils.deleteFiles(tmpDirectory,\n          tmpDirectory.getTemporaryFiles().values());\n    }\n  }\n\n","sourceOld":"  @Override\n  void flush(SegmentWriteState state, Sorter.DocMap sortMap) throws IOException {\n    super.flush(state, sortMap);\n    if (sortMap == null) {\n      // we're lucky the index is already sorted, just rename the temporary file and return\n      for (Map.Entry<String, String> entry : tmpDirectory.getTemporaryFiles().entrySet()) {\n        tmpDirectory.rename(entry.getValue(), entry.getKey());\n      }\n      return;\n    }\n    StoredFieldsReader reader = codec.storedFieldsFormat()\n        .fieldsReader(tmpDirectory, state.segmentInfo, state.fieldInfos, IOContext.DEFAULT);\n    StoredFieldsReader mergeReader = reader.getMergeInstance();\n    StoredFieldsWriter sortWriter = codec.storedFieldsFormat()\n        .fieldsWriter(state.directory, state.segmentInfo, IOContext.DEFAULT);\n    try {\n      reader.checkIntegrity();\n      CopyVisitor visitor = new CopyVisitor(sortWriter);\n      for (int docID = 0; docID < state.segmentInfo.maxDoc(); docID++) {\n        sortWriter.startDocument();\n        mergeReader.visitDocument(sortMap.newToOld(docID), visitor);\n        sortWriter.finishDocument();\n      }\n      sortWriter.finish(state.fieldInfos, state.segmentInfo.maxDoc());\n    } finally {\n      IOUtils.close(reader, sortWriter);\n      IOUtils.deleteFiles(tmpDirectory,\n          tmpDirectory.getTemporaryFiles().values());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"680b6449f09827f58fe987aff279e014c311d966","date":1600247985,"type":3,"author":"noblepaul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SortingStoredFieldsConsumer#flush(SegmentWriteState,Sorter.DocMap).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SortingStoredFieldsConsumer#flush(SegmentWriteState,Sorter.DocMap).mjava","sourceNew":"  @Override\n  void flush(SegmentWriteState state, Sorter.DocMap sortMap) throws IOException {\n    super.flush(state, sortMap);\n    if (sortMap == null) {\n      // we're lucky the index is already sorted, just rename the temporary file and return\n      for (Map.Entry<String, String> entry : tmpDirectory.getTemporaryFiles().entrySet()) {\n        tmpDirectory.rename(entry.getValue(), entry.getKey());\n      }\n      return;\n    }\n    StoredFieldsReader reader = codec.storedFieldsFormat()\n        .fieldsReader(tmpDirectory, state.segmentInfo, state.fieldInfos, IOContext.DEFAULT);\n    // Don't pull a merge instance, since merge instances optimize for\n    // sequential access while we consume stored fields in random order here.\n    StoredFieldsWriter sortWriter = codec.storedFieldsFormat()\n        .fieldsWriter(state.directory, state.segmentInfo, IOContext.DEFAULT);\n    try {\n      reader.checkIntegrity();\n      CopyVisitor visitor = new CopyVisitor(sortWriter);\n      for (int docID = 0; docID < state.segmentInfo.maxDoc(); docID++) {\n        sortWriter.startDocument();\n        reader.visitDocument(sortMap.newToOld(docID), visitor);\n        sortWriter.finishDocument();\n      }\n      sortWriter.finish(state.fieldInfos, state.segmentInfo.maxDoc());\n    } finally {\n      IOUtils.close(reader, sortWriter);\n      IOUtils.deleteFiles(tmpDirectory,\n          tmpDirectory.getTemporaryFiles().values());\n    }\n  }\n\n","sourceOld":"  @Override\n  void flush(SegmentWriteState state, Sorter.DocMap sortMap) throws IOException {\n    super.flush(state, sortMap);\n    if (sortMap == null) {\n      // we're lucky the index is already sorted, just rename the temporary file and return\n      for (Map.Entry<String, String> entry : tmpDirectory.getTemporaryFiles().entrySet()) {\n        tmpDirectory.rename(entry.getValue(), entry.getKey());\n      }\n      return;\n    }\n    StoredFieldsReader reader = codec.storedFieldsFormat()\n        .fieldsReader(tmpDirectory, state.segmentInfo, state.fieldInfos, IOContext.DEFAULT);\n    StoredFieldsReader mergeReader = reader.getMergeInstance();\n    StoredFieldsWriter sortWriter = codec.storedFieldsFormat()\n        .fieldsWriter(state.directory, state.segmentInfo, IOContext.DEFAULT);\n    try {\n      reader.checkIntegrity();\n      CopyVisitor visitor = new CopyVisitor(sortWriter);\n      for (int docID = 0; docID < state.segmentInfo.maxDoc(); docID++) {\n        sortWriter.startDocument();\n        mergeReader.visitDocument(sortMap.newToOld(docID), visitor);\n        sortWriter.finishDocument();\n      }\n      sortWriter.finish(state.fieldInfos, state.segmentInfo.maxDoc());\n    } finally {\n      IOUtils.close(reader, sortWriter);\n      IOUtils.deleteFiles(tmpDirectory,\n          tmpDirectory.getTemporaryFiles().values());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9f56073cc34a5845a5b6b0978a769a0239068411","date":1600254322,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SortingStoredFieldsConsumer#flush(SegmentWriteState,Sorter.DocMap).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SortingStoredFieldsConsumer#flush(SegmentWriteState,Sorter.DocMap).mjava","sourceNew":"  @Override\n  void flush(SegmentWriteState state, Sorter.DocMap sortMap) throws IOException {\n    super.flush(state, sortMap);\n    StoredFieldsReader reader = TEMP_STORED_FIELDS_FORMAT\n        .fieldsReader(tmpDirectory, state.segmentInfo, state.fieldInfos, IOContext.DEFAULT);\n    // Don't pull a merge instance, since merge instances optimize for\n    // sequential access while we consume stored fields in random order here.\n    StoredFieldsWriter sortWriter = codec.storedFieldsFormat()\n        .fieldsWriter(state.directory, state.segmentInfo, IOContext.DEFAULT);\n    try {\n      reader.checkIntegrity();\n      CopyVisitor visitor = new CopyVisitor(sortWriter);\n      for (int docID = 0; docID < state.segmentInfo.maxDoc(); docID++) {\n        sortWriter.startDocument();\n        reader.visitDocument(sortMap == null ? docID : sortMap.newToOld(docID), visitor);\n        sortWriter.finishDocument();\n      }\n      sortWriter.finish(state.fieldInfos, state.segmentInfo.maxDoc());\n    } finally {\n      IOUtils.close(reader, sortWriter);\n      IOUtils.deleteFiles(tmpDirectory,\n          tmpDirectory.getTemporaryFiles().values());\n    }\n  }\n\n","sourceOld":"  @Override\n  void flush(SegmentWriteState state, Sorter.DocMap sortMap) throws IOException {\n    super.flush(state, sortMap);\n    if (sortMap == null) {\n      // we're lucky the index is already sorted, just rename the temporary file and return\n      for (Map.Entry<String, String> entry : tmpDirectory.getTemporaryFiles().entrySet()) {\n        tmpDirectory.rename(entry.getValue(), entry.getKey());\n      }\n      return;\n    }\n    StoredFieldsReader reader = codec.storedFieldsFormat()\n        .fieldsReader(tmpDirectory, state.segmentInfo, state.fieldInfos, IOContext.DEFAULT);\n    // Don't pull a merge instance, since merge instances optimize for\n    // sequential access while we consume stored fields in random order here.\n    StoredFieldsWriter sortWriter = codec.storedFieldsFormat()\n        .fieldsWriter(state.directory, state.segmentInfo, IOContext.DEFAULT);\n    try {\n      reader.checkIntegrity();\n      CopyVisitor visitor = new CopyVisitor(sortWriter);\n      for (int docID = 0; docID < state.segmentInfo.maxDoc(); docID++) {\n        sortWriter.startDocument();\n        reader.visitDocument(sortMap.newToOld(docID), visitor);\n        sortWriter.finishDocument();\n      }\n      sortWriter.finish(state.fieldInfos, state.segmentInfo.maxDoc());\n    } finally {\n      IOUtils.close(reader, sortWriter);\n      IOUtils.deleteFiles(tmpDirectory,\n          tmpDirectory.getTemporaryFiles().values());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"65352f844eb9e9a677ec4eb2abced4404f08181d","date":1600297608,"type":3,"author":"noblepaul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SortingStoredFieldsConsumer#flush(SegmentWriteState,Sorter.DocMap).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SortingStoredFieldsConsumer#flush(SegmentWriteState,Sorter.DocMap).mjava","sourceNew":"  @Override\n  void flush(SegmentWriteState state, Sorter.DocMap sortMap) throws IOException {\n    super.flush(state, sortMap);\n    StoredFieldsReader reader = TEMP_STORED_FIELDS_FORMAT\n        .fieldsReader(tmpDirectory, state.segmentInfo, state.fieldInfos, IOContext.DEFAULT);\n    // Don't pull a merge instance, since merge instances optimize for\n    // sequential access while we consume stored fields in random order here.\n    StoredFieldsWriter sortWriter = codec.storedFieldsFormat()\n        .fieldsWriter(state.directory, state.segmentInfo, IOContext.DEFAULT);\n    try {\n      reader.checkIntegrity();\n      CopyVisitor visitor = new CopyVisitor(sortWriter);\n      for (int docID = 0; docID < state.segmentInfo.maxDoc(); docID++) {\n        sortWriter.startDocument();\n        reader.visitDocument(sortMap == null ? docID : sortMap.newToOld(docID), visitor);\n        sortWriter.finishDocument();\n      }\n      sortWriter.finish(state.fieldInfos, state.segmentInfo.maxDoc());\n    } finally {\n      IOUtils.close(reader, sortWriter);\n      IOUtils.deleteFiles(tmpDirectory,\n          tmpDirectory.getTemporaryFiles().values());\n    }\n  }\n\n","sourceOld":"  @Override\n  void flush(SegmentWriteState state, Sorter.DocMap sortMap) throws IOException {\n    super.flush(state, sortMap);\n    if (sortMap == null) {\n      // we're lucky the index is already sorted, just rename the temporary file and return\n      for (Map.Entry<String, String> entry : tmpDirectory.getTemporaryFiles().entrySet()) {\n        tmpDirectory.rename(entry.getValue(), entry.getKey());\n      }\n      return;\n    }\n    StoredFieldsReader reader = codec.storedFieldsFormat()\n        .fieldsReader(tmpDirectory, state.segmentInfo, state.fieldInfos, IOContext.DEFAULT);\n    // Don't pull a merge instance, since merge instances optimize for\n    // sequential access while we consume stored fields in random order here.\n    StoredFieldsWriter sortWriter = codec.storedFieldsFormat()\n        .fieldsWriter(state.directory, state.segmentInfo, IOContext.DEFAULT);\n    try {\n      reader.checkIntegrity();\n      CopyVisitor visitor = new CopyVisitor(sortWriter);\n      for (int docID = 0; docID < state.segmentInfo.maxDoc(); docID++) {\n        sortWriter.startDocument();\n        reader.visitDocument(sortMap.newToOld(docID), visitor);\n        sortWriter.finishDocument();\n      }\n      sortWriter.finish(state.fieldInfos, state.segmentInfo.maxDoc());\n    } finally {\n      IOUtils.close(reader, sortWriter);\n      IOUtils.deleteFiles(tmpDirectory,\n          tmpDirectory.getTemporaryFiles().values());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6926606ec5e0dd8d4ec79166d39a3b4ddb862bf4":["86a0a50d2d14aaee1e635bbec914468551f7f9a2"],"680b6449f09827f58fe987aff279e014c311d966":["6926606ec5e0dd8d4ec79166d39a3b4ddb862bf4","0ee4c382ffe6e1add00d46a5fb87083b7658fa35"],"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","86a0a50d2d14aaee1e635bbec914468551f7f9a2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"65352f844eb9e9a677ec4eb2abced4404f08181d":["680b6449f09827f58fe987aff279e014c311d966","9f56073cc34a5845a5b6b0978a769a0239068411"],"0ee4c382ffe6e1add00d46a5fb87083b7658fa35":["6926606ec5e0dd8d4ec79166d39a3b4ddb862bf4"],"9f56073cc34a5845a5b6b0978a769a0239068411":["0ee4c382ffe6e1add00d46a5fb87083b7658fa35"],"86a0a50d2d14aaee1e635bbec914468551f7f9a2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["65352f844eb9e9a677ec4eb2abced4404f08181d"]},"commit2Childs":{"6926606ec5e0dd8d4ec79166d39a3b4ddb862bf4":["680b6449f09827f58fe987aff279e014c311d966","0ee4c382ffe6e1add00d46a5fb87083b7658fa35"],"680b6449f09827f58fe987aff279e014c311d966":["65352f844eb9e9a677ec4eb2abced4404f08181d"],"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","86a0a50d2d14aaee1e635bbec914468551f7f9a2"],"65352f844eb9e9a677ec4eb2abced4404f08181d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0ee4c382ffe6e1add00d46a5fb87083b7658fa35":["680b6449f09827f58fe987aff279e014c311d966","9f56073cc34a5845a5b6b0978a769a0239068411"],"9f56073cc34a5845a5b6b0978a769a0239068411":["65352f844eb9e9a677ec4eb2abced4404f08181d"],"86a0a50d2d14aaee1e635bbec914468551f7f9a2":["6926606ec5e0dd8d4ec79166d39a3b4ddb862bf4","5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}