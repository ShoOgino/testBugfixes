{"path":"lucene/src/java/org/apache/lucene/search/TermCollectingRewrite#collectTerms(IndexReader,MultiTermQuery,TermCollector).mjava","commits":[{"id":"744486748bc5bee772100e49230e5bca39bac99a","date":1289776426,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/TermCollectingRewrite#collectTerms(IndexReader,MultiTermQuery,TermCollector).mjava","pathOld":"/dev/null","sourceNew":"  protected final void collectTerms(IndexReader reader, MultiTermQuery query, TermCollector collector) throws IOException {\n    final List<IndexReader> subReaders = new ArrayList<IndexReader>();\n    ReaderUtil.gatherSubReaders(subReaders, reader);\n    Comparator<BytesRef> lastTermComp = null;\n    \n    for (IndexReader r : subReaders) {\n      final Fields fields = r.fields();\n      if (fields == null) {\n        // reader has no fields\n        continue;\n      }\n\n      final Terms terms = fields.terms(query.field);\n      if (terms == null) {\n        // field does not exist\n        continue;\n      }\n\n      final TermsEnum termsEnum = query.getTermsEnum(r, collector.attributes);\n      assert termsEnum != null;\n\n      if (termsEnum == TermsEnum.EMPTY)\n        continue;\n      \n      // Check comparator compatibility:\n      final Comparator<BytesRef> newTermComp = termsEnum.getComparator();\n      if (lastTermComp != null && newTermComp != lastTermComp)\n        throw new RuntimeException(\"term comparator should not change between segments: \"+lastTermComp+\" != \"+newTermComp);\n      lastTermComp = newTermComp;\n      \n      collector.setNextEnum(termsEnum);\n      BytesRef bytes;\n      while ((bytes = termsEnum.next()) != null) {\n        termsEnum.cacheCurrentTerm();\n        if (!collector.collect(bytes))\n          return; // interrupt whole term collection, so also don't iterate other subReaders\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["8028ab7a24273833d53d35eb160dba5b57283cf5"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9ab1f5591dc05f1f2b5407d809c9699f75554a32","date":1290008586,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/TermCollectingRewrite#collectTerms(IndexReader,MultiTermQuery,TermCollector).mjava","pathOld":"/dev/null","sourceNew":"  protected final void collectTerms(IndexReader reader, MultiTermQuery query, TermCollector collector) throws IOException {\n    final List<IndexReader> subReaders = new ArrayList<IndexReader>();\n    ReaderUtil.gatherSubReaders(subReaders, reader);\n    Comparator<BytesRef> lastTermComp = null;\n    \n    for (IndexReader r : subReaders) {\n      final Fields fields = r.fields();\n      if (fields == null) {\n        // reader has no fields\n        continue;\n      }\n\n      final Terms terms = fields.terms(query.field);\n      if (terms == null) {\n        // field does not exist\n        continue;\n      }\n\n      final TermsEnum termsEnum = query.getTermsEnum(r, collector.attributes);\n      assert termsEnum != null;\n\n      if (termsEnum == TermsEnum.EMPTY)\n        continue;\n      \n      // Check comparator compatibility:\n      final Comparator<BytesRef> newTermComp = termsEnum.getComparator();\n      if (lastTermComp != null && newTermComp != lastTermComp)\n        throw new RuntimeException(\"term comparator should not change between segments: \"+lastTermComp+\" != \"+newTermComp);\n      lastTermComp = newTermComp;\n      \n      collector.setNextEnum(termsEnum);\n      BytesRef bytes;\n      while ((bytes = termsEnum.next()) != null) {\n        termsEnum.cacheCurrentTerm();\n        if (!collector.collect(bytes))\n          return; // interrupt whole term collection, so also don't iterate other subReaders\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e8dd2a69747e9f2922fd8b6970bd1661b26a692d","date":1291080135,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/TermCollectingRewrite#collectTerms(IndexReader,MultiTermQuery,TermCollector).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/TermCollectingRewrite#collectTerms(IndexReader,MultiTermQuery,TermCollector).mjava","sourceNew":"  protected final void collectTerms(IndexReader reader, MultiTermQuery query, TermCollector collector) throws IOException {\n    final List<IndexReader> subReaders = new ArrayList<IndexReader>();\n    ReaderUtil.gatherSubReaders(subReaders, reader);\n    Comparator<BytesRef> lastTermComp = null;\n    \n    for (IndexReader r : subReaders) {\n      final Fields fields = r.fields();\n      if (fields == null) {\n        // reader has no fields\n        continue;\n      }\n\n      final Terms terms = fields.terms(query.field);\n      if (terms == null) {\n        // field does not exist\n        continue;\n      }\n\n      final TermsEnum termsEnum = query.getTermsEnum(terms, collector.attributes);\n      assert termsEnum != null;\n\n      if (termsEnum == TermsEnum.EMPTY)\n        continue;\n      \n      // Check comparator compatibility:\n      final Comparator<BytesRef> newTermComp = termsEnum.getComparator();\n      if (lastTermComp != null && newTermComp != lastTermComp)\n        throw new RuntimeException(\"term comparator should not change between segments: \"+lastTermComp+\" != \"+newTermComp);\n      lastTermComp = newTermComp;\n      \n      collector.setNextEnum(termsEnum);\n      BytesRef bytes;\n      while ((bytes = termsEnum.next()) != null) {\n        termsEnum.cacheCurrentTerm();\n        if (!collector.collect(bytes))\n          return; // interrupt whole term collection, so also don't iterate other subReaders\n      }\n    }\n  }\n\n","sourceOld":"  protected final void collectTerms(IndexReader reader, MultiTermQuery query, TermCollector collector) throws IOException {\n    final List<IndexReader> subReaders = new ArrayList<IndexReader>();\n    ReaderUtil.gatherSubReaders(subReaders, reader);\n    Comparator<BytesRef> lastTermComp = null;\n    \n    for (IndexReader r : subReaders) {\n      final Fields fields = r.fields();\n      if (fields == null) {\n        // reader has no fields\n        continue;\n      }\n\n      final Terms terms = fields.terms(query.field);\n      if (terms == null) {\n        // field does not exist\n        continue;\n      }\n\n      final TermsEnum termsEnum = query.getTermsEnum(r, collector.attributes);\n      assert termsEnum != null;\n\n      if (termsEnum == TermsEnum.EMPTY)\n        continue;\n      \n      // Check comparator compatibility:\n      final Comparator<BytesRef> newTermComp = termsEnum.getComparator();\n      if (lastTermComp != null && newTermComp != lastTermComp)\n        throw new RuntimeException(\"term comparator should not change between segments: \"+lastTermComp+\" != \"+newTermComp);\n      lastTermComp = newTermComp;\n      \n      collector.setNextEnum(termsEnum);\n      BytesRef bytes;\n      while ((bytes = termsEnum.next()) != null) {\n        termsEnum.cacheCurrentTerm();\n        if (!collector.collect(bytes))\n          return; // interrupt whole term collection, so also don't iterate other subReaders\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/TermCollectingRewrite#collectTerms(IndexReader,MultiTermQuery,TermCollector).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/TermCollectingRewrite#collectTerms(IndexReader,MultiTermQuery,TermCollector).mjava","sourceNew":"  protected final void collectTerms(IndexReader reader, MultiTermQuery query, TermCollector collector) throws IOException {\n    final List<IndexReader> subReaders = new ArrayList<IndexReader>();\n    ReaderUtil.gatherSubReaders(subReaders, reader);\n    Comparator<BytesRef> lastTermComp = null;\n    \n    for (IndexReader r : subReaders) {\n      final Fields fields = r.fields();\n      if (fields == null) {\n        // reader has no fields\n        continue;\n      }\n\n      final Terms terms = fields.terms(query.field);\n      if (terms == null) {\n        // field does not exist\n        continue;\n      }\n\n      final TermsEnum termsEnum = query.getTermsEnum(terms, collector.attributes);\n      assert termsEnum != null;\n\n      if (termsEnum == TermsEnum.EMPTY)\n        continue;\n      \n      // Check comparator compatibility:\n      final Comparator<BytesRef> newTermComp = termsEnum.getComparator();\n      if (lastTermComp != null && newTermComp != lastTermComp)\n        throw new RuntimeException(\"term comparator should not change between segments: \"+lastTermComp+\" != \"+newTermComp);\n      lastTermComp = newTermComp;\n      \n      collector.setNextEnum(termsEnum);\n      BytesRef bytes;\n      while ((bytes = termsEnum.next()) != null) {\n        termsEnum.cacheCurrentTerm();\n        if (!collector.collect(bytes))\n          return; // interrupt whole term collection, so also don't iterate other subReaders\n      }\n    }\n  }\n\n","sourceOld":"  protected final void collectTerms(IndexReader reader, MultiTermQuery query, TermCollector collector) throws IOException {\n    final List<IndexReader> subReaders = new ArrayList<IndexReader>();\n    ReaderUtil.gatherSubReaders(subReaders, reader);\n    Comparator<BytesRef> lastTermComp = null;\n    \n    for (IndexReader r : subReaders) {\n      final Fields fields = r.fields();\n      if (fields == null) {\n        // reader has no fields\n        continue;\n      }\n\n      final Terms terms = fields.terms(query.field);\n      if (terms == null) {\n        // field does not exist\n        continue;\n      }\n\n      final TermsEnum termsEnum = query.getTermsEnum(r, collector.attributes);\n      assert termsEnum != null;\n\n      if (termsEnum == TermsEnum.EMPTY)\n        continue;\n      \n      // Check comparator compatibility:\n      final Comparator<BytesRef> newTermComp = termsEnum.getComparator();\n      if (lastTermComp != null && newTermComp != lastTermComp)\n        throw new RuntimeException(\"term comparator should not change between segments: \"+lastTermComp+\" != \"+newTermComp);\n      lastTermComp = newTermComp;\n      \n      collector.setNextEnum(termsEnum);\n      BytesRef bytes;\n      while ((bytes = termsEnum.next()) != null) {\n        termsEnum.cacheCurrentTerm();\n        if (!collector.collect(bytes))\n          return; // interrupt whole term collection, so also don't iterate other subReaders\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0fe495ae5756c75b507bda15470047963243d87","date":1292338323,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/TermCollectingRewrite#collectTerms(IndexReader,MultiTermQuery,TermCollector).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/TermCollectingRewrite#collectTerms(IndexReader,MultiTermQuery,TermCollector).mjava","sourceNew":"  protected final void collectTerms(IndexReader reader, MultiTermQuery query, TermCollector collector) throws IOException {\n    final List<IndexReader> subReaders = new ArrayList<IndexReader>();\n    ReaderUtil.gatherSubReaders(subReaders, reader);\n    Comparator<BytesRef> lastTermComp = null;\n    \n    for (IndexReader r : subReaders) {\n      final Fields fields = r.fields();\n      if (fields == null) {\n        // reader has no fields\n        continue;\n      }\n\n      final Terms terms = fields.terms(query.field);\n      if (terms == null) {\n        // field does not exist\n        continue;\n      }\n\n      final TermsEnum termsEnum = query.getTermsEnum(terms, collector.attributes);\n      assert termsEnum != null;\n\n      if (termsEnum == TermsEnum.EMPTY)\n        continue;\n      \n      // Check comparator compatibility:\n      final Comparator<BytesRef> newTermComp = termsEnum.getComparator();\n      if (lastTermComp != null && newTermComp != null && newTermComp != lastTermComp)\n        throw new RuntimeException(\"term comparator should not change between segments: \"+lastTermComp+\" != \"+newTermComp);\n      lastTermComp = newTermComp;\n      \n      collector.setNextEnum(termsEnum);\n      BytesRef bytes;\n      while ((bytes = termsEnum.next()) != null) {\n        termsEnum.cacheCurrentTerm();\n        if (!collector.collect(bytes))\n          return; // interrupt whole term collection, so also don't iterate other subReaders\n      }\n    }\n  }\n\n","sourceOld":"  protected final void collectTerms(IndexReader reader, MultiTermQuery query, TermCollector collector) throws IOException {\n    final List<IndexReader> subReaders = new ArrayList<IndexReader>();\n    ReaderUtil.gatherSubReaders(subReaders, reader);\n    Comparator<BytesRef> lastTermComp = null;\n    \n    for (IndexReader r : subReaders) {\n      final Fields fields = r.fields();\n      if (fields == null) {\n        // reader has no fields\n        continue;\n      }\n\n      final Terms terms = fields.terms(query.field);\n      if (terms == null) {\n        // field does not exist\n        continue;\n      }\n\n      final TermsEnum termsEnum = query.getTermsEnum(terms, collector.attributes);\n      assert termsEnum != null;\n\n      if (termsEnum == TermsEnum.EMPTY)\n        continue;\n      \n      // Check comparator compatibility:\n      final Comparator<BytesRef> newTermComp = termsEnum.getComparator();\n      if (lastTermComp != null && newTermComp != lastTermComp)\n        throw new RuntimeException(\"term comparator should not change between segments: \"+lastTermComp+\" != \"+newTermComp);\n      lastTermComp = newTermComp;\n      \n      collector.setNextEnum(termsEnum);\n      BytesRef bytes;\n      while ((bytes = termsEnum.next()) != null) {\n        termsEnum.cacheCurrentTerm();\n        if (!collector.collect(bytes))\n          return; // interrupt whole term collection, so also don't iterate other subReaders\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ab5cb6a74aefb78aa0569857970b9151dfe2e787","date":1292842407,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/TermCollectingRewrite#collectTerms(IndexReader,MultiTermQuery,TermCollector).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/TermCollectingRewrite#collectTerms(IndexReader,MultiTermQuery,TermCollector).mjava","sourceNew":"  protected final void collectTerms(IndexReader reader, MultiTermQuery query, TermCollector collector) throws IOException {\n    final List<IndexReader> subReaders = new ArrayList<IndexReader>();\n    ReaderUtil.gatherSubReaders(subReaders, reader);\n    Comparator<BytesRef> lastTermComp = null;\n    \n    for (IndexReader r : subReaders) {\n      final Fields fields = r.fields();\n      if (fields == null) {\n        // reader has no fields\n        continue;\n      }\n\n      final Terms terms = fields.terms(query.field);\n      if (terms == null) {\n        // field does not exist\n        continue;\n      }\n\n      final TermsEnum termsEnum = query.getTermsEnum(terms, collector.attributes);\n      assert termsEnum != null;\n\n      if (termsEnum == TermsEnum.EMPTY)\n        continue;\n      \n      // Check comparator compatibility:\n      final Comparator<BytesRef> newTermComp = termsEnum.getComparator();\n      if (lastTermComp != null && newTermComp != null && newTermComp != lastTermComp)\n        throw new RuntimeException(\"term comparator should not change between segments: \"+lastTermComp+\" != \"+newTermComp);\n      lastTermComp = newTermComp;\n      \n      collector.setNextEnum(termsEnum);\n      BytesRef bytes;\n      while ((bytes = termsEnum.next()) != null) {\n        termsEnum.cacheCurrentTerm();\n        if (!collector.collect(bytes))\n          return; // interrupt whole term collection, so also don't iterate other subReaders\n      }\n    }\n  }\n\n","sourceOld":"  protected final void collectTerms(IndexReader reader, MultiTermQuery query, TermCollector collector) throws IOException {\n    final List<IndexReader> subReaders = new ArrayList<IndexReader>();\n    ReaderUtil.gatherSubReaders(subReaders, reader);\n    Comparator<BytesRef> lastTermComp = null;\n    \n    for (IndexReader r : subReaders) {\n      final Fields fields = r.fields();\n      if (fields == null) {\n        // reader has no fields\n        continue;\n      }\n\n      final Terms terms = fields.terms(query.field);\n      if (terms == null) {\n        // field does not exist\n        continue;\n      }\n\n      final TermsEnum termsEnum = query.getTermsEnum(terms, collector.attributes);\n      assert termsEnum != null;\n\n      if (termsEnum == TermsEnum.EMPTY)\n        continue;\n      \n      // Check comparator compatibility:\n      final Comparator<BytesRef> newTermComp = termsEnum.getComparator();\n      if (lastTermComp != null && newTermComp != lastTermComp)\n        throw new RuntimeException(\"term comparator should not change between segments: \"+lastTermComp+\" != \"+newTermComp);\n      lastTermComp = newTermComp;\n      \n      collector.setNextEnum(termsEnum);\n      BytesRef bytes;\n      while ((bytes = termsEnum.next()) != null) {\n        termsEnum.cacheCurrentTerm();\n        if (!collector.collect(bytes))\n          return; // interrupt whole term collection, so also don't iterate other subReaders\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/TermCollectingRewrite#collectTerms(IndexReader,MultiTermQuery,TermCollector).mjava","pathOld":"/dev/null","sourceNew":"  protected final void collectTerms(IndexReader reader, MultiTermQuery query, TermCollector collector) throws IOException {\n    final List<IndexReader> subReaders = new ArrayList<IndexReader>();\n    ReaderUtil.gatherSubReaders(subReaders, reader);\n    Comparator<BytesRef> lastTermComp = null;\n    \n    for (IndexReader r : subReaders) {\n      final Fields fields = r.fields();\n      if (fields == null) {\n        // reader has no fields\n        continue;\n      }\n\n      final Terms terms = fields.terms(query.field);\n      if (terms == null) {\n        // field does not exist\n        continue;\n      }\n\n      final TermsEnum termsEnum = query.getTermsEnum(terms, collector.attributes);\n      assert termsEnum != null;\n\n      if (termsEnum == TermsEnum.EMPTY)\n        continue;\n      \n      // Check comparator compatibility:\n      final Comparator<BytesRef> newTermComp = termsEnum.getComparator();\n      if (lastTermComp != null && newTermComp != null && newTermComp != lastTermComp)\n        throw new RuntimeException(\"term comparator should not change between segments: \"+lastTermComp+\" != \"+newTermComp);\n      lastTermComp = newTermComp;\n      \n      collector.setNextEnum(termsEnum);\n      BytesRef bytes;\n      while ((bytes = termsEnum.next()) != null) {\n        termsEnum.cacheCurrentTerm();\n        if (!collector.collect(bytes))\n          return; // interrupt whole term collection, so also don't iterate other subReaders\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fa1a999d6674423e5c4ac858b410283f6fe03f20","date":1294868331,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/TermCollectingRewrite#collectTerms(IndexReader,MultiTermQuery,TermCollector).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/TermCollectingRewrite#collectTerms(IndexReader,MultiTermQuery,TermCollector).mjava","sourceNew":"  protected final void collectTerms(IndexReader reader, MultiTermQuery query, TermCollector collector) throws IOException {\n    ReaderContext topReaderContext = reader.getTopReaderContext();\n    Comparator<BytesRef> lastTermComp = null;\n    final AtomicReaderContext[] leaves = ReaderUtil.leaves(topReaderContext);\n    for (AtomicReaderContext context : leaves) {\n      final Fields fields = context.reader.fields();\n      if (fields == null) {\n        // reader has no fields\n        continue;\n      }\n\n      final Terms terms = fields.terms(query.field);\n      if (terms == null) {\n        // field does not exist\n        continue;\n      }\n\n      final TermsEnum termsEnum = query.getTermsEnum(terms, collector.attributes);\n      assert termsEnum != null;\n\n      if (termsEnum == TermsEnum.EMPTY)\n        continue;\n      \n      // Check comparator compatibility:\n      final Comparator<BytesRef> newTermComp = termsEnum.getComparator();\n      if (lastTermComp != null && newTermComp != null && newTermComp != lastTermComp)\n        throw new RuntimeException(\"term comparator should not change between segments: \"+lastTermComp+\" != \"+newTermComp);\n      lastTermComp = newTermComp;\n      collector.setReaderContext(topReaderContext, context);\n      collector.setNextEnum(termsEnum);\n      BytesRef bytes;\n      while ((bytes = termsEnum.next()) != null) {\n        if (!collector.collect(bytes))\n          return; // interrupt whole term collection, so also don't iterate other subReaders\n      }\n    }\n  }\n\n","sourceOld":"  protected final void collectTerms(IndexReader reader, MultiTermQuery query, TermCollector collector) throws IOException {\n    final List<IndexReader> subReaders = new ArrayList<IndexReader>();\n    ReaderUtil.gatherSubReaders(subReaders, reader);\n    Comparator<BytesRef> lastTermComp = null;\n    \n    for (IndexReader r : subReaders) {\n      final Fields fields = r.fields();\n      if (fields == null) {\n        // reader has no fields\n        continue;\n      }\n\n      final Terms terms = fields.terms(query.field);\n      if (terms == null) {\n        // field does not exist\n        continue;\n      }\n\n      final TermsEnum termsEnum = query.getTermsEnum(terms, collector.attributes);\n      assert termsEnum != null;\n\n      if (termsEnum == TermsEnum.EMPTY)\n        continue;\n      \n      // Check comparator compatibility:\n      final Comparator<BytesRef> newTermComp = termsEnum.getComparator();\n      if (lastTermComp != null && newTermComp != null && newTermComp != lastTermComp)\n        throw new RuntimeException(\"term comparator should not change between segments: \"+lastTermComp+\" != \"+newTermComp);\n      lastTermComp = newTermComp;\n      \n      collector.setNextEnum(termsEnum);\n      BytesRef bytes;\n      while ((bytes = termsEnum.next()) != null) {\n        termsEnum.cacheCurrentTerm();\n        if (!collector.collect(bytes))\n          return; // interrupt whole term collection, so also don't iterate other subReaders\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/TermCollectingRewrite#collectTerms(IndexReader,MultiTermQuery,TermCollector).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/TermCollectingRewrite#collectTerms(IndexReader,MultiTermQuery,TermCollector).mjava","sourceNew":"  protected final void collectTerms(IndexReader reader, MultiTermQuery query, TermCollector collector) throws IOException {\n    ReaderContext topReaderContext = reader.getTopReaderContext();\n    Comparator<BytesRef> lastTermComp = null;\n    final AtomicReaderContext[] leaves = ReaderUtil.leaves(topReaderContext);\n    for (AtomicReaderContext context : leaves) {\n      final Fields fields = context.reader.fields();\n      if (fields == null) {\n        // reader has no fields\n        continue;\n      }\n\n      final Terms terms = fields.terms(query.field);\n      if (terms == null) {\n        // field does not exist\n        continue;\n      }\n\n      final TermsEnum termsEnum = query.getTermsEnum(terms, collector.attributes);\n      assert termsEnum != null;\n\n      if (termsEnum == TermsEnum.EMPTY)\n        continue;\n      \n      // Check comparator compatibility:\n      final Comparator<BytesRef> newTermComp = termsEnum.getComparator();\n      if (lastTermComp != null && newTermComp != null && newTermComp != lastTermComp)\n        throw new RuntimeException(\"term comparator should not change between segments: \"+lastTermComp+\" != \"+newTermComp);\n      lastTermComp = newTermComp;\n      collector.setReaderContext(topReaderContext, context);\n      collector.setNextEnum(termsEnum);\n      BytesRef bytes;\n      while ((bytes = termsEnum.next()) != null) {\n        if (!collector.collect(bytes))\n          return; // interrupt whole term collection, so also don't iterate other subReaders\n      }\n    }\n  }\n\n","sourceOld":"  protected final void collectTerms(IndexReader reader, MultiTermQuery query, TermCollector collector) throws IOException {\n    final List<IndexReader> subReaders = new ArrayList<IndexReader>();\n    ReaderUtil.gatherSubReaders(subReaders, reader);\n    Comparator<BytesRef> lastTermComp = null;\n    \n    for (IndexReader r : subReaders) {\n      final Fields fields = r.fields();\n      if (fields == null) {\n        // reader has no fields\n        continue;\n      }\n\n      final Terms terms = fields.terms(query.field);\n      if (terms == null) {\n        // field does not exist\n        continue;\n      }\n\n      final TermsEnum termsEnum = query.getTermsEnum(terms, collector.attributes);\n      assert termsEnum != null;\n\n      if (termsEnum == TermsEnum.EMPTY)\n        continue;\n      \n      // Check comparator compatibility:\n      final Comparator<BytesRef> newTermComp = termsEnum.getComparator();\n      if (lastTermComp != null && newTermComp != null && newTermComp != lastTermComp)\n        throw new RuntimeException(\"term comparator should not change between segments: \"+lastTermComp+\" != \"+newTermComp);\n      lastTermComp = newTermComp;\n      \n      collector.setNextEnum(termsEnum);\n      BytesRef bytes;\n      while ((bytes = termsEnum.next()) != null) {\n        termsEnum.cacheCurrentTerm();\n        if (!collector.collect(bytes))\n          return; // interrupt whole term collection, so also don't iterate other subReaders\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/TermCollectingRewrite#collectTerms(IndexReader,MultiTermQuery,TermCollector).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/TermCollectingRewrite#collectTerms(IndexReader,MultiTermQuery,TermCollector).mjava","sourceNew":"  protected final void collectTerms(IndexReader reader, MultiTermQuery query, TermCollector collector) throws IOException {\n    ReaderContext topReaderContext = reader.getTopReaderContext();\n    Comparator<BytesRef> lastTermComp = null;\n    final AtomicReaderContext[] leaves = ReaderUtil.leaves(topReaderContext);\n    for (AtomicReaderContext context : leaves) {\n      final Fields fields = context.reader.fields();\n      if (fields == null) {\n        // reader has no fields\n        continue;\n      }\n\n      final Terms terms = fields.terms(query.field);\n      if (terms == null) {\n        // field does not exist\n        continue;\n      }\n\n      final TermsEnum termsEnum = query.getTermsEnum(terms, collector.attributes);\n      assert termsEnum != null;\n\n      if (termsEnum == TermsEnum.EMPTY)\n        continue;\n      \n      // Check comparator compatibility:\n      final Comparator<BytesRef> newTermComp = termsEnum.getComparator();\n      if (lastTermComp != null && newTermComp != null && newTermComp != lastTermComp)\n        throw new RuntimeException(\"term comparator should not change between segments: \"+lastTermComp+\" != \"+newTermComp);\n      lastTermComp = newTermComp;\n      collector.setReaderContext(topReaderContext, context);\n      collector.setNextEnum(termsEnum);\n      BytesRef bytes;\n      while ((bytes = termsEnum.next()) != null) {\n        if (!collector.collect(bytes))\n          return; // interrupt whole term collection, so also don't iterate other subReaders\n      }\n    }\n  }\n\n","sourceOld":"  protected final void collectTerms(IndexReader reader, MultiTermQuery query, TermCollector collector) throws IOException {\n    final List<IndexReader> subReaders = new ArrayList<IndexReader>();\n    ReaderUtil.gatherSubReaders(subReaders, reader);\n    Comparator<BytesRef> lastTermComp = null;\n    \n    for (IndexReader r : subReaders) {\n      final Fields fields = r.fields();\n      if (fields == null) {\n        // reader has no fields\n        continue;\n      }\n\n      final Terms terms = fields.terms(query.field);\n      if (terms == null) {\n        // field does not exist\n        continue;\n      }\n\n      final TermsEnum termsEnum = query.getTermsEnum(terms, collector.attributes);\n      assert termsEnum != null;\n\n      if (termsEnum == TermsEnum.EMPTY)\n        continue;\n      \n      // Check comparator compatibility:\n      final Comparator<BytesRef> newTermComp = termsEnum.getComparator();\n      if (lastTermComp != null && newTermComp != null && newTermComp != lastTermComp)\n        throw new RuntimeException(\"term comparator should not change between segments: \"+lastTermComp+\" != \"+newTermComp);\n      lastTermComp = newTermComp;\n      \n      collector.setNextEnum(termsEnum);\n      BytesRef bytes;\n      while ((bytes = termsEnum.next()) != null) {\n        termsEnum.cacheCurrentTerm();\n        if (!collector.collect(bytes))\n          return; // interrupt whole term collection, so also don't iterate other subReaders\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6fff8f4b218bd0626afcdce82027bafeb84a50a4","date":1327229950,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/TermCollectingRewrite#collectTerms(IndexReader,MultiTermQuery,TermCollector).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/TermCollectingRewrite#collectTerms(IndexReader,MultiTermQuery,TermCollector).mjava","sourceNew":"  protected final void collectTerms(IndexReader reader, MultiTermQuery query, TermCollector collector) throws IOException {\n    ReaderContext topReaderContext = reader.getTopReaderContext();\n    Comparator<BytesRef> lastTermComp = null;\n    final AtomicReaderContext[] leaves = ReaderUtil.leaves(topReaderContext);\n    for (AtomicReaderContext context : leaves) {\n      final Fields fields = context.reader().fields();\n      if (fields == null) {\n        // reader has no fields\n        continue;\n      }\n\n      final Terms terms = fields.terms(query.field);\n      if (terms == null) {\n        // field does not exist\n        continue;\n      }\n\n      final TermsEnum termsEnum = query.getTermsEnum(terms, collector.attributes);\n      assert termsEnum != null;\n\n      if (termsEnum == TermsEnum.EMPTY)\n        continue;\n      \n      // Check comparator compatibility:\n      final Comparator<BytesRef> newTermComp = termsEnum.getComparator();\n      if (lastTermComp != null && newTermComp != null && newTermComp != lastTermComp)\n        throw new RuntimeException(\"term comparator should not change between segments: \"+lastTermComp+\" != \"+newTermComp);\n      lastTermComp = newTermComp;\n      collector.setReaderContext(topReaderContext, context);\n      collector.setNextEnum(termsEnum);\n      BytesRef bytes;\n      while ((bytes = termsEnum.next()) != null) {\n        if (!collector.collect(bytes))\n          return; // interrupt whole term collection, so also don't iterate other subReaders\n      }\n    }\n  }\n\n","sourceOld":"  protected final void collectTerms(IndexReader reader, MultiTermQuery query, TermCollector collector) throws IOException {\n    ReaderContext topReaderContext = reader.getTopReaderContext();\n    Comparator<BytesRef> lastTermComp = null;\n    final AtomicReaderContext[] leaves = ReaderUtil.leaves(topReaderContext);\n    for (AtomicReaderContext context : leaves) {\n      final Fields fields = context.reader.fields();\n      if (fields == null) {\n        // reader has no fields\n        continue;\n      }\n\n      final Terms terms = fields.terms(query.field);\n      if (terms == null) {\n        // field does not exist\n        continue;\n      }\n\n      final TermsEnum termsEnum = query.getTermsEnum(terms, collector.attributes);\n      assert termsEnum != null;\n\n      if (termsEnum == TermsEnum.EMPTY)\n        continue;\n      \n      // Check comparator compatibility:\n      final Comparator<BytesRef> newTermComp = termsEnum.getComparator();\n      if (lastTermComp != null && newTermComp != null && newTermComp != lastTermComp)\n        throw new RuntimeException(\"term comparator should not change between segments: \"+lastTermComp+\" != \"+newTermComp);\n      lastTermComp = newTermComp;\n      collector.setReaderContext(topReaderContext, context);\n      collector.setNextEnum(termsEnum);\n      BytesRef bytes;\n      while ((bytes = termsEnum.next()) != null) {\n        if (!collector.collect(bytes))\n          return; // interrupt whole term collection, so also don't iterate other subReaders\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8493985e6883b3fa8231d172694d2aa3a85cb182","date":1327920390,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/TermCollectingRewrite#collectTerms(IndexReader,MultiTermQuery,TermCollector).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/TermCollectingRewrite#collectTerms(IndexReader,MultiTermQuery,TermCollector).mjava","sourceNew":"  protected final void collectTerms(IndexReader reader, MultiTermQuery query, TermCollector collector) throws IOException {\n    IndexReaderContext topReaderContext = reader.getTopReaderContext();\n    Comparator<BytesRef> lastTermComp = null;\n    final AtomicReaderContext[] leaves = ReaderUtil.leaves(topReaderContext);\n    for (AtomicReaderContext context : leaves) {\n      final Fields fields = context.reader().fields();\n      if (fields == null) {\n        // reader has no fields\n        continue;\n      }\n\n      final Terms terms = fields.terms(query.field);\n      if (terms == null) {\n        // field does not exist\n        continue;\n      }\n\n      final TermsEnum termsEnum = query.getTermsEnum(terms, collector.attributes);\n      assert termsEnum != null;\n\n      if (termsEnum == TermsEnum.EMPTY)\n        continue;\n      \n      // Check comparator compatibility:\n      final Comparator<BytesRef> newTermComp = termsEnum.getComparator();\n      if (lastTermComp != null && newTermComp != null && newTermComp != lastTermComp)\n        throw new RuntimeException(\"term comparator should not change between segments: \"+lastTermComp+\" != \"+newTermComp);\n      lastTermComp = newTermComp;\n      collector.setReaderContext(topReaderContext, context);\n      collector.setNextEnum(termsEnum);\n      BytesRef bytes;\n      while ((bytes = termsEnum.next()) != null) {\n        if (!collector.collect(bytes))\n          return; // interrupt whole term collection, so also don't iterate other subReaders\n      }\n    }\n  }\n\n","sourceOld":"  protected final void collectTerms(IndexReader reader, MultiTermQuery query, TermCollector collector) throws IOException {\n    ReaderContext topReaderContext = reader.getTopReaderContext();\n    Comparator<BytesRef> lastTermComp = null;\n    final AtomicReaderContext[] leaves = ReaderUtil.leaves(topReaderContext);\n    for (AtomicReaderContext context : leaves) {\n      final Fields fields = context.reader().fields();\n      if (fields == null) {\n        // reader has no fields\n        continue;\n      }\n\n      final Terms terms = fields.terms(query.field);\n      if (terms == null) {\n        // field does not exist\n        continue;\n      }\n\n      final TermsEnum termsEnum = query.getTermsEnum(terms, collector.attributes);\n      assert termsEnum != null;\n\n      if (termsEnum == TermsEnum.EMPTY)\n        continue;\n      \n      // Check comparator compatibility:\n      final Comparator<BytesRef> newTermComp = termsEnum.getComparator();\n      if (lastTermComp != null && newTermComp != null && newTermComp != lastTermComp)\n        throw new RuntimeException(\"term comparator should not change between segments: \"+lastTermComp+\" != \"+newTermComp);\n      lastTermComp = newTermComp;\n      collector.setReaderContext(topReaderContext, context);\n      collector.setNextEnum(termsEnum);\n      BytesRef bytes;\n      while ((bytes = termsEnum.next()) != null) {\n        if (!collector.collect(bytes))\n          return; // interrupt whole term collection, so also don't iterate other subReaders\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/TermCollectingRewrite#collectTerms(IndexReader,MultiTermQuery,TermCollector).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/TermCollectingRewrite#collectTerms(IndexReader,MultiTermQuery,TermCollector).mjava","sourceNew":"  protected final void collectTerms(IndexReader reader, MultiTermQuery query, TermCollector collector) throws IOException {\n    IndexReaderContext topReaderContext = reader.getTopReaderContext();\n    Comparator<BytesRef> lastTermComp = null;\n    final AtomicReaderContext[] leaves = ReaderUtil.leaves(topReaderContext);\n    for (AtomicReaderContext context : leaves) {\n      final Fields fields = context.reader().fields();\n      if (fields == null) {\n        // reader has no fields\n        continue;\n      }\n\n      final Terms terms = fields.terms(query.field);\n      if (terms == null) {\n        // field does not exist\n        continue;\n      }\n\n      final TermsEnum termsEnum = query.getTermsEnum(terms, collector.attributes);\n      assert termsEnum != null;\n\n      if (termsEnum == TermsEnum.EMPTY)\n        continue;\n      \n      // Check comparator compatibility:\n      final Comparator<BytesRef> newTermComp = termsEnum.getComparator();\n      if (lastTermComp != null && newTermComp != null && newTermComp != lastTermComp)\n        throw new RuntimeException(\"term comparator should not change between segments: \"+lastTermComp+\" != \"+newTermComp);\n      lastTermComp = newTermComp;\n      collector.setReaderContext(topReaderContext, context);\n      collector.setNextEnum(termsEnum);\n      BytesRef bytes;\n      while ((bytes = termsEnum.next()) != null) {\n        if (!collector.collect(bytes))\n          return; // interrupt whole term collection, so also don't iterate other subReaders\n      }\n    }\n  }\n\n","sourceOld":"  protected final void collectTerms(IndexReader reader, MultiTermQuery query, TermCollector collector) throws IOException {\n    ReaderContext topReaderContext = reader.getTopReaderContext();\n    Comparator<BytesRef> lastTermComp = null;\n    final AtomicReaderContext[] leaves = ReaderUtil.leaves(topReaderContext);\n    for (AtomicReaderContext context : leaves) {\n      final Fields fields = context.reader.fields();\n      if (fields == null) {\n        // reader has no fields\n        continue;\n      }\n\n      final Terms terms = fields.terms(query.field);\n      if (terms == null) {\n        // field does not exist\n        continue;\n      }\n\n      final TermsEnum termsEnum = query.getTermsEnum(terms, collector.attributes);\n      assert termsEnum != null;\n\n      if (termsEnum == TermsEnum.EMPTY)\n        continue;\n      \n      // Check comparator compatibility:\n      final Comparator<BytesRef> newTermComp = termsEnum.getComparator();\n      if (lastTermComp != null && newTermComp != null && newTermComp != lastTermComp)\n        throw new RuntimeException(\"term comparator should not change between segments: \"+lastTermComp+\" != \"+newTermComp);\n      lastTermComp = newTermComp;\n      collector.setReaderContext(topReaderContext, context);\n      collector.setNextEnum(termsEnum);\n      BytesRef bytes;\n      while ((bytes = termsEnum.next()) != null) {\n        if (!collector.collect(bytes))\n          return; // interrupt whole term collection, so also don't iterate other subReaders\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TermCollectingRewrite#collectTerms(IndexReader,MultiTermQuery,TermCollector).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/TermCollectingRewrite#collectTerms(IndexReader,MultiTermQuery,TermCollector).mjava","sourceNew":"  protected final void collectTerms(IndexReader reader, MultiTermQuery query, TermCollector collector) throws IOException {\n    IndexReaderContext topReaderContext = reader.getTopReaderContext();\n    Comparator<BytesRef> lastTermComp = null;\n    final AtomicReaderContext[] leaves = ReaderUtil.leaves(topReaderContext);\n    for (AtomicReaderContext context : leaves) {\n      final Fields fields = context.reader().fields();\n      if (fields == null) {\n        // reader has no fields\n        continue;\n      }\n\n      final Terms terms = fields.terms(query.field);\n      if (terms == null) {\n        // field does not exist\n        continue;\n      }\n\n      final TermsEnum termsEnum = query.getTermsEnum(terms, collector.attributes);\n      assert termsEnum != null;\n\n      if (termsEnum == TermsEnum.EMPTY)\n        continue;\n      \n      // Check comparator compatibility:\n      final Comparator<BytesRef> newTermComp = termsEnum.getComparator();\n      if (lastTermComp != null && newTermComp != null && newTermComp != lastTermComp)\n        throw new RuntimeException(\"term comparator should not change between segments: \"+lastTermComp+\" != \"+newTermComp);\n      lastTermComp = newTermComp;\n      collector.setReaderContext(topReaderContext, context);\n      collector.setNextEnum(termsEnum);\n      BytesRef bytes;\n      while ((bytes = termsEnum.next()) != null) {\n        if (!collector.collect(bytes))\n          return; // interrupt whole term collection, so also don't iterate other subReaders\n      }\n    }\n  }\n\n","sourceOld":"  protected final void collectTerms(IndexReader reader, MultiTermQuery query, TermCollector collector) throws IOException {\n    IndexReaderContext topReaderContext = reader.getTopReaderContext();\n    Comparator<BytesRef> lastTermComp = null;\n    final AtomicReaderContext[] leaves = ReaderUtil.leaves(topReaderContext);\n    for (AtomicReaderContext context : leaves) {\n      final Fields fields = context.reader().fields();\n      if (fields == null) {\n        // reader has no fields\n        continue;\n      }\n\n      final Terms terms = fields.terms(query.field);\n      if (terms == null) {\n        // field does not exist\n        continue;\n      }\n\n      final TermsEnum termsEnum = query.getTermsEnum(terms, collector.attributes);\n      assert termsEnum != null;\n\n      if (termsEnum == TermsEnum.EMPTY)\n        continue;\n      \n      // Check comparator compatibility:\n      final Comparator<BytesRef> newTermComp = termsEnum.getComparator();\n      if (lastTermComp != null && newTermComp != null && newTermComp != lastTermComp)\n        throw new RuntimeException(\"term comparator should not change between segments: \"+lastTermComp+\" != \"+newTermComp);\n      lastTermComp = newTermComp;\n      collector.setReaderContext(topReaderContext, context);\n      collector.setNextEnum(termsEnum);\n      BytesRef bytes;\n      while ((bytes = termsEnum.next()) != null) {\n        if (!collector.collect(bytes))\n          return; // interrupt whole term collection, so also don't iterate other subReaders\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"8493985e6883b3fa8231d172694d2aa3a85cb182":["6fff8f4b218bd0626afcdce82027bafeb84a50a4"],"b0fe495ae5756c75b507bda15470047963243d87":["e8dd2a69747e9f2922fd8b6970bd1661b26a692d"],"9ab1f5591dc05f1f2b5407d809c9699f75554a32":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","744486748bc5bee772100e49230e5bca39bac99a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"6fff8f4b218bd0626afcdce82027bafeb84a50a4":["fa1a999d6674423e5c4ac858b410283f6fe03f20"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["3bb13258feba31ab676502787ab2e1779f129b7a","b0fe495ae5756c75b507bda15470047963243d87"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b0fe495ae5756c75b507bda15470047963243d87"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["fa1a999d6674423e5c4ac858b410283f6fe03f20","8493985e6883b3fa8231d172694d2aa3a85cb182"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","fa1a999d6674423e5c4ac858b410283f6fe03f20"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fa1a999d6674423e5c4ac858b410283f6fe03f20":["b0fe495ae5756c75b507bda15470047963243d87"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","fa1a999d6674423e5c4ac858b410283f6fe03f20"],"e8dd2a69747e9f2922fd8b6970bd1661b26a692d":["744486748bc5bee772100e49230e5bca39bac99a"],"744486748bc5bee772100e49230e5bca39bac99a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3bb13258feba31ab676502787ab2e1779f129b7a":["9ab1f5591dc05f1f2b5407d809c9699f75554a32","e8dd2a69747e9f2922fd8b6970bd1661b26a692d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"8493985e6883b3fa8231d172694d2aa3a85cb182":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"b0fe495ae5756c75b507bda15470047963243d87":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","fa1a999d6674423e5c4ac858b410283f6fe03f20"],"9ab1f5591dc05f1f2b5407d809c9699f75554a32":["3bb13258feba31ab676502787ab2e1779f129b7a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6fff8f4b218bd0626afcdce82027bafeb84a50a4":["8493985e6883b3fa8231d172694d2aa3a85cb182"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["868da859b43505d9d2a023bfeae6dd0c795f5295"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9ab1f5591dc05f1f2b5407d809c9699f75554a32","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","744486748bc5bee772100e49230e5bca39bac99a"],"fa1a999d6674423e5c4ac858b410283f6fe03f20":["6fff8f4b218bd0626afcdce82027bafeb84a50a4","5cab9a86bd67202d20b6adc463008c8e982b070a","29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"e8dd2a69747e9f2922fd8b6970bd1661b26a692d":["b0fe495ae5756c75b507bda15470047963243d87","3bb13258feba31ab676502787ab2e1779f129b7a"],"744486748bc5bee772100e49230e5bca39bac99a":["9ab1f5591dc05f1f2b5407d809c9699f75554a32","e8dd2a69747e9f2922fd8b6970bd1661b26a692d"],"3bb13258feba31ab676502787ab2e1779f129b7a":["ab5cb6a74aefb78aa0569857970b9151dfe2e787"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}