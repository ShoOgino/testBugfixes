{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientRetryTest#testRetry().mjava","commits":[{"id":"8d5f96be6db603b6357c4415227e35bbcbe22d06","date":1534343183,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientRetryTest#testRetry().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testRetry() throws Exception {\n    String collectionName = \"testRetry\";\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    CollectionAdminRequest.createCollection(collectionName, 1, 1)\n        .process(solrClient);\n\n    solrClient.add(collectionName, new SolrInputDocument(\"id\", \"1\"));\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(CommonParams.QT, \"/admin/metrics\");\n    String updateRequestCountKey = \"solr.core.testRetry.shard1.replica_n1:UPDATE./update.requestTimes:count\";\n    params.set(\"key\", updateRequestCountKey);\n    params.set(\"indent\", \"true\");\n\n    QueryResponse response = solrClient.query(collectionName, params, SolrRequest.METHOD.GET);\n    NamedList<Object> namedList = response.getResponse();\n    System.out.println(namedList);\n    NamedList metrics = (NamedList) namedList.get(\"metrics\");\n    assertEquals(1L, metrics.get(updateRequestCountKey));\n\n    TestInjection.failUpdateRequests = \"true:100\";\n    try {\n      expectThrows(CloudSolrClient.RouteException.class,\n          \"Expected an exception on the client when failure is injected during updates\", () -> {\n            solrClient.add(collectionName, new SolrInputDocument(\"id\", \"2\"));\n          });\n    } finally {\n      TestInjection.reset();\n    }\n\n    response = solrClient.query(collectionName, params, SolrRequest.METHOD.GET);\n    namedList = response.getResponse();\n    System.out.println(namedList);\n    metrics = (NamedList) namedList.get(\"metrics\");\n    assertEquals(2L, metrics.get(updateRequestCountKey));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9","date":1574619880,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientRetryTest#testRetry().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientRetryTest#testRetry().mjava","sourceNew":"  @Test\n  @SuppressWarnings(\"deprecation\")\n  public void testRetry() throws Exception {\n    String collectionName = \"testRetry\";\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    CollectionAdminRequest.createCollection(collectionName, 1, 1)\n        .process(solrClient);\n\n    solrClient.add(collectionName, new SolrInputDocument(\"id\", \"1\"));\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(CommonParams.QT, \"/admin/metrics\");\n    String updateRequestCountKey = \"solr.core.testRetry.shard1.replica_n1:UPDATE./update.requestTimes:count\";\n    params.set(\"key\", updateRequestCountKey);\n    params.set(\"indent\", \"true\");\n\n    QueryResponse response = solrClient.query(collectionName, params, SolrRequest.METHOD.GET);\n    NamedList<Object> namedList = response.getResponse();\n    System.out.println(namedList);\n    NamedList metrics = (NamedList) namedList.get(\"metrics\");\n    assertEquals(1L, metrics.get(updateRequestCountKey));\n\n    TestInjection.failUpdateRequests = \"true:100\";\n    try {\n      expectThrows(CloudSolrClient.RouteException.class,\n          \"Expected an exception on the client when failure is injected during updates\", () -> {\n            solrClient.add(collectionName, new SolrInputDocument(\"id\", \"2\"));\n          });\n    } finally {\n      TestInjection.reset();\n    }\n\n    response = solrClient.query(collectionName, params, SolrRequest.METHOD.GET);\n    namedList = response.getResponse();\n    System.out.println(namedList);\n    metrics = (NamedList) namedList.get(\"metrics\");\n    assertEquals(2L, metrics.get(updateRequestCountKey));\n  }\n\n","sourceOld":"  @Test\n  public void testRetry() throws Exception {\n    String collectionName = \"testRetry\";\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    CollectionAdminRequest.createCollection(collectionName, 1, 1)\n        .process(solrClient);\n\n    solrClient.add(collectionName, new SolrInputDocument(\"id\", \"1\"));\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(CommonParams.QT, \"/admin/metrics\");\n    String updateRequestCountKey = \"solr.core.testRetry.shard1.replica_n1:UPDATE./update.requestTimes:count\";\n    params.set(\"key\", updateRequestCountKey);\n    params.set(\"indent\", \"true\");\n\n    QueryResponse response = solrClient.query(collectionName, params, SolrRequest.METHOD.GET);\n    NamedList<Object> namedList = response.getResponse();\n    System.out.println(namedList);\n    NamedList metrics = (NamedList) namedList.get(\"metrics\");\n    assertEquals(1L, metrics.get(updateRequestCountKey));\n\n    TestInjection.failUpdateRequests = \"true:100\";\n    try {\n      expectThrows(CloudSolrClient.RouteException.class,\n          \"Expected an exception on the client when failure is injected during updates\", () -> {\n            solrClient.add(collectionName, new SolrInputDocument(\"id\", \"2\"));\n          });\n    } finally {\n      TestInjection.reset();\n    }\n\n    response = solrClient.query(collectionName, params, SolrRequest.METHOD.GET);\n    namedList = response.getResponse();\n    System.out.println(namedList);\n    metrics = (NamedList) namedList.get(\"metrics\");\n    assertEquals(2L, metrics.get(updateRequestCountKey));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb9c3baacabd473e8ecd6c4948aabacead49b88e","date":1574700980,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientRetryTest#testRetry().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientRetryTest#testRetry().mjava","sourceNew":"  @Test\n  public void testRetry() throws Exception {\n    String collectionName = \"testRetry\";\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    CollectionAdminRequest.createCollection(collectionName, 1, 1)\n        .process(solrClient);\n\n    solrClient.add(collectionName, new SolrInputDocument(\"id\", \"1\"));\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(CommonParams.QT, \"/admin/metrics\");\n    String updateRequestCountKey = \"solr.core.testRetry.shard1.replica_n1:UPDATE./update.requestTimes:count\";\n    params.set(\"key\", updateRequestCountKey);\n    params.set(\"indent\", \"true\");\n\n    QueryResponse response = solrClient.query(collectionName, params, SolrRequest.METHOD.GET);\n    NamedList<Object> namedList = response.getResponse();\n    System.out.println(namedList);\n    NamedList metrics = (NamedList) namedList.get(\"metrics\");\n    assertEquals(1L, metrics.get(updateRequestCountKey));\n\n    TestInjection.failUpdateRequests = \"true:100\";\n    try {\n      expectThrows(CloudSolrClient.RouteException.class,\n          \"Expected an exception on the client when failure is injected during updates\", () -> {\n            solrClient.add(collectionName, new SolrInputDocument(\"id\", \"2\"));\n          });\n    } finally {\n      TestInjection.reset();\n    }\n\n    response = solrClient.query(collectionName, params, SolrRequest.METHOD.GET);\n    namedList = response.getResponse();\n    System.out.println(namedList);\n    metrics = (NamedList) namedList.get(\"metrics\");\n    assertEquals(2L, metrics.get(updateRequestCountKey));\n  }\n\n","sourceOld":"  @Test\n  @SuppressWarnings(\"deprecation\")\n  public void testRetry() throws Exception {\n    String collectionName = \"testRetry\";\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    CollectionAdminRequest.createCollection(collectionName, 1, 1)\n        .process(solrClient);\n\n    solrClient.add(collectionName, new SolrInputDocument(\"id\", \"1\"));\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(CommonParams.QT, \"/admin/metrics\");\n    String updateRequestCountKey = \"solr.core.testRetry.shard1.replica_n1:UPDATE./update.requestTimes:count\";\n    params.set(\"key\", updateRequestCountKey);\n    params.set(\"indent\", \"true\");\n\n    QueryResponse response = solrClient.query(collectionName, params, SolrRequest.METHOD.GET);\n    NamedList<Object> namedList = response.getResponse();\n    System.out.println(namedList);\n    NamedList metrics = (NamedList) namedList.get(\"metrics\");\n    assertEquals(1L, metrics.get(updateRequestCountKey));\n\n    TestInjection.failUpdateRequests = \"true:100\";\n    try {\n      expectThrows(CloudSolrClient.RouteException.class,\n          \"Expected an exception on the client when failure is injected during updates\", () -> {\n            solrClient.add(collectionName, new SolrInputDocument(\"id\", \"2\"));\n          });\n    } finally {\n      TestInjection.reset();\n    }\n\n    response = solrClient.query(collectionName, params, SolrRequest.METHOD.GET);\n    namedList = response.getResponse();\n    System.out.println(namedList);\n    metrics = (NamedList) namedList.get(\"metrics\");\n    assertEquals(2L, metrics.get(updateRequestCountKey));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ba1b632c041956c93c41aa1143d16a567014891","date":1592328473,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientRetryTest#testRetry().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientRetryTest#testRetry().mjava","sourceNew":"  @Test\n  public void testRetry() throws Exception {\n    String collectionName = \"testRetry\";\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    CollectionAdminRequest.createCollection(collectionName, 1, 1)\n        .process(solrClient);\n\n    solrClient.add(collectionName, new SolrInputDocument(\"id\", \"1\"));\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(CommonParams.QT, \"/admin/metrics\");\n    String updateRequestCountKey = \"solr.core.testRetry.shard1.replica_n1:UPDATE./update.requestTimes:count\";\n    params.set(\"key\", updateRequestCountKey);\n    params.set(\"indent\", \"true\");\n\n    QueryResponse response = solrClient.query(collectionName, params, SolrRequest.METHOD.GET);\n    NamedList<Object> namedList = response.getResponse();\n    System.out.println(namedList);\n    @SuppressWarnings({\"rawtypes\"})\n    NamedList metrics = (NamedList) namedList.get(\"metrics\");\n    assertEquals(1L, metrics.get(updateRequestCountKey));\n\n    TestInjection.failUpdateRequests = \"true:100\";\n    try {\n      expectThrows(CloudSolrClient.RouteException.class,\n          \"Expected an exception on the client when failure is injected during updates\", () -> {\n            solrClient.add(collectionName, new SolrInputDocument(\"id\", \"2\"));\n          });\n    } finally {\n      TestInjection.reset();\n    }\n\n    response = solrClient.query(collectionName, params, SolrRequest.METHOD.GET);\n    namedList = response.getResponse();\n    System.out.println(namedList);\n    metrics = (NamedList) namedList.get(\"metrics\");\n    assertEquals(2L, metrics.get(updateRequestCountKey));\n  }\n\n","sourceOld":"  @Test\n  public void testRetry() throws Exception {\n    String collectionName = \"testRetry\";\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    CollectionAdminRequest.createCollection(collectionName, 1, 1)\n        .process(solrClient);\n\n    solrClient.add(collectionName, new SolrInputDocument(\"id\", \"1\"));\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(CommonParams.QT, \"/admin/metrics\");\n    String updateRequestCountKey = \"solr.core.testRetry.shard1.replica_n1:UPDATE./update.requestTimes:count\";\n    params.set(\"key\", updateRequestCountKey);\n    params.set(\"indent\", \"true\");\n\n    QueryResponse response = solrClient.query(collectionName, params, SolrRequest.METHOD.GET);\n    NamedList<Object> namedList = response.getResponse();\n    System.out.println(namedList);\n    NamedList metrics = (NamedList) namedList.get(\"metrics\");\n    assertEquals(1L, metrics.get(updateRequestCountKey));\n\n    TestInjection.failUpdateRequests = \"true:100\";\n    try {\n      expectThrows(CloudSolrClient.RouteException.class,\n          \"Expected an exception on the client when failure is injected during updates\", () -> {\n            solrClient.add(collectionName, new SolrInputDocument(\"id\", \"2\"));\n          });\n    } finally {\n      TestInjection.reset();\n    }\n\n    response = solrClient.query(collectionName, params, SolrRequest.METHOD.GET);\n    namedList = response.getResponse();\n    System.out.println(namedList);\n    metrics = (NamedList) namedList.get(\"metrics\");\n    assertEquals(2L, metrics.get(updateRequestCountKey));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9ba1b632c041956c93c41aa1143d16a567014891":["bb9c3baacabd473e8ecd6c4948aabacead49b88e"],"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9":["8d5f96be6db603b6357c4415227e35bbcbe22d06"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bb9c3baacabd473e8ecd6c4948aabacead49b88e":["a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9"],"8d5f96be6db603b6357c4415227e35bbcbe22d06":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9ba1b632c041956c93c41aa1143d16a567014891"]},"commit2Childs":{"9ba1b632c041956c93c41aa1143d16a567014891":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9":["bb9c3baacabd473e8ecd6c4948aabacead49b88e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8d5f96be6db603b6357c4415227e35bbcbe22d06"],"bb9c3baacabd473e8ecd6c4948aabacead49b88e":["9ba1b632c041956c93c41aa1143d16a567014891"],"8d5f96be6db603b6357c4415227e35bbcbe22d06":["a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}