{"path":"solr/core/src/java/org/apache/solr/store/blockcache/BlockLocks#set(int).mjava","commits":[{"id":"849494cf2f3a96af5c8c84995108ddd8456fcd04","date":1372277913,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/store/blockcache/BlockLocks#set(int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Thread safe set operation that will set the bit if and only if the bit was\n   * not previously set.\n   * \n   * @param index\n   *          the index position to set.\n   * @return returns true if the bit was set and false if it was already set.\n   */\n  public boolean set(int index) {\n    int wordNum = index >> 6; // div 64\n    int bit = index & 0x3f; // mod 64\n    long bitmask = 1L << bit;\n    long word, oword;\n    do {\n      word = bits.get(wordNum);\n      // if set another thread stole the lock\n      if ((word & bitmask) != 0) {\n        return false;\n      }\n      oword = word;\n      word |= bitmask;\n    } while (!bits.compareAndSet(wordNum, oword, word));\n    return true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/store/blockcache/BlockLocks#set(int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Thread safe set operation that will set the bit if and only if the bit was\n   * not previously set.\n   * \n   * @param index\n   *          the index position to set.\n   * @return returns true if the bit was set and false if it was already set.\n   */\n  public boolean set(int index) {\n    int wordNum = index >> 6; // div 64\n    int bit = index & 0x3f; // mod 64\n    long bitmask = 1L << bit;\n    long word, oword;\n    do {\n      word = bits.get(wordNum);\n      // if set another thread stole the lock\n      if ((word & bitmask) != 0) {\n        return false;\n      }\n      oword = word;\n      word |= bitmask;\n    } while (!bits.compareAndSet(wordNum, oword, word));\n    return true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"849494cf2f3a96af5c8c84995108ddd8456fcd04":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","849494cf2f3a96af5c8c84995108ddd8456fcd04"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["849494cf2f3a96af5c8c84995108ddd8456fcd04"]},"commit2Childs":{"849494cf2f3a96af5c8c84995108ddd8456fcd04":["37a0f60745e53927c4c876cfe5b5a58170f0646c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["849494cf2f3a96af5c8c84995108ddd8456fcd04","37a0f60745e53927c4c876cfe5b5a58170f0646c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}