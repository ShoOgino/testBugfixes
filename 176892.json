{"path":"lucene/suggest/src/java/org/apache/lucene/search/suggest/SortedTermFreqIteratorWrapper#SortedTermFreqIteratorWrapper(TermFreqIterator,Comparator[BytesRef],boolean).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/SortedTermFreqIteratorWrapper#SortedTermFreqIteratorWrapper(TermFreqIterator,Comparator[BytesRef],boolean).mjava","pathOld":"modules/suggest/src/java/org/apache/lucene/search/suggest/SortedTermFreqIteratorWrapper#SortedTermFreqIteratorWrapper(TermFreqIterator,Comparator[BytesRef],boolean).mjava","sourceNew":"  public SortedTermFreqIteratorWrapper(TermFreqIterator source, Comparator<BytesRef> comparator, boolean compareRawBytes) throws IOException {\n    this.source = source;\n    this.comparator = comparator;\n    this.reader = sort(compareRawBytes ? comparator : new BytesOnlyComparator(this.comparator));\n  }\n\n","sourceOld":"  public SortedTermFreqIteratorWrapper(TermFreqIterator source, Comparator<BytesRef> comparator, boolean compareRawBytes) throws IOException {\n    this.source = source;\n    this.comparator = comparator;\n    this.reader = sort(compareRawBytes ? comparator : new BytesOnlyComparator(this.comparator));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1cc849e9f232bea7495964477fb7bfd25aeb7173","date":1348236542,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/SortedTermFreqIteratorWrapper#SortedTermFreqIteratorWrapper(TermFreqIterator,Comparator[BytesRef],boolean).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/SortedTermFreqIteratorWrapper#SortedTermFreqIteratorWrapper(TermFreqIterator,Comparator[BytesRef],boolean).mjava","sourceNew":"  /**\n   * Creates a new sorted wrapper. if <code>compareRawBytes</code> is true, then\n   * only the bytes (not the weight) will be used for comparison.\n   */\n  public SortedTermFreqIteratorWrapper(TermFreqIterator source, Comparator<BytesRef> comparator, boolean compareRawBytes) throws IOException {\n    this.source = source;\n    this.comparator = comparator;\n    this.reader = sort(compareRawBytes ? comparator : new BytesOnlyComparator(this.comparator));\n  }\n\n","sourceOld":"  public SortedTermFreqIteratorWrapper(TermFreqIterator source, Comparator<BytesRef> comparator, boolean compareRawBytes) throws IOException {\n    this.source = source;\n    this.comparator = comparator;\n    this.reader = sort(compareRawBytes ? comparator : new BytesOnlyComparator(this.comparator));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c784b25e28b81ddedff2b97738c8286773f00f15","date":1352150231,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/SortedTermFreqIteratorWrapper#SortedTermFreqIteratorWrapper(TermFreqIterator,Comparator[BytesRef],boolean).mjava","sourceNew":null,"sourceOld":"  /**\n   * Creates a new sorted wrapper. if <code>compareRawBytes</code> is true, then\n   * only the bytes (not the weight) will be used for comparison.\n   */\n  public SortedTermFreqIteratorWrapper(TermFreqIterator source, Comparator<BytesRef> comparator, boolean compareRawBytes) throws IOException {\n    this.source = source;\n    this.comparator = comparator;\n    this.reader = sort(compareRawBytes ? comparator : new BytesOnlyComparator(this.comparator));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1cc849e9f232bea7495964477fb7bfd25aeb7173":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c784b25e28b81ddedff2b97738c8286773f00f15"],"c784b25e28b81ddedff2b97738c8286773f00f15":["1cc849e9f232bea7495964477fb7bfd25aeb7173"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["1cc849e9f232bea7495964477fb7bfd25aeb7173"],"1cc849e9f232bea7495964477fb7bfd25aeb7173":["c784b25e28b81ddedff2b97738c8286773f00f15"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"c784b25e28b81ddedff2b97738c8286773f00f15":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}