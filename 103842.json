{"path":"modules/analysis/icu/src/java/org/apache/lucene/collation/ICUCollationKeyFilter#incrementToken().mjava","commits":[{"id":"b441220ceb933f50f32318ab45acc05d5943f3aa","date":1274352360,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/icu/src/java/org/apache/lucene/collation/ICUCollationKeyFilter#incrementToken().mjava","pathOld":"lucene/contrib/icu/src/java/org/apache/lucene/collation/ICUCollationKeyFilter#incrementToken().mjava","sourceNew":"  @Override\n  public boolean incrementToken() throws IOException {\n    if (input.incrementToken()) {\n      char[] termBuffer = termAtt.termBuffer();\n      String termText = new String(termBuffer, 0, termAtt.termLength());\n      collator.getRawCollationKey(termText, reusableKey);\n      int encodedLength = IndexableBinaryStringTools.getEncodedLength(\n          reusableKey.bytes, 0, reusableKey.size);\n      if (encodedLength > termBuffer.length) {\n        termAtt.resizeTermBuffer(encodedLength);\n      }\n      termAtt.setTermLength(encodedLength);\n      IndexableBinaryStringTools.encode(reusableKey.bytes, 0, reusableKey.size,\n          termAtt.termBuffer(), 0, encodedLength);\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","sourceOld":"  @Override\n  public boolean incrementToken() throws IOException {\n    if (input.incrementToken()) {\n      char[] termBuffer = termAtt.termBuffer();\n      String termText = new String(termBuffer, 0, termAtt.termLength());\n      collator.getRawCollationKey(termText, reusableKey);\n      int encodedLength = IndexableBinaryStringTools.getEncodedLength(\n          reusableKey.bytes, 0, reusableKey.size);\n      if (encodedLength > termBuffer.length) {\n        termAtt.resizeTermBuffer(encodedLength);\n      }\n      termAtt.setTermLength(encodedLength);\n      IndexableBinaryStringTools.encode(reusableKey.bytes, 0, reusableKey.size,\n          termAtt.termBuffer(), 0, encodedLength);\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a7347509fad0711ac30cb15a746e9a3830a38ebd","date":1275388513,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/icu/src/java/org/apache/lucene/collation/ICUCollationKeyFilter#incrementToken().mjava","pathOld":"modules/analysis/icu/src/java/org/apache/lucene/collation/ICUCollationKeyFilter#incrementToken().mjava","sourceNew":"  @Override\n  public boolean incrementToken() throws IOException {\n    if (input.incrementToken()) {\n      char[] termBuffer = termAtt.buffer();\n      String termText = new String(termBuffer, 0, termAtt.length());\n      collator.getRawCollationKey(termText, reusableKey);\n      int encodedLength = IndexableBinaryStringTools.getEncodedLength(\n          reusableKey.bytes, 0, reusableKey.size);\n      if (encodedLength > termBuffer.length) {\n        termAtt.resizeBuffer(encodedLength);\n      }\n      termAtt.setLength(encodedLength);\n      IndexableBinaryStringTools.encode(reusableKey.bytes, 0, reusableKey.size,\n          termAtt.buffer(), 0, encodedLength);\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","sourceOld":"  @Override\n  public boolean incrementToken() throws IOException {\n    if (input.incrementToken()) {\n      char[] termBuffer = termAtt.termBuffer();\n      String termText = new String(termBuffer, 0, termAtt.termLength());\n      collator.getRawCollationKey(termText, reusableKey);\n      int encodedLength = IndexableBinaryStringTools.getEncodedLength(\n          reusableKey.bytes, 0, reusableKey.size);\n      if (encodedLength > termBuffer.length) {\n        termAtt.resizeTermBuffer(encodedLength);\n      }\n      termAtt.setTermLength(encodedLength);\n      IndexableBinaryStringTools.encode(reusableKey.bytes, 0, reusableKey.size,\n          termAtt.termBuffer(), 0, encodedLength);\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/icu/src/java/org/apache/lucene/collation/ICUCollationKeyFilter#incrementToken().mjava","pathOld":"modules/analysis/icu/src/java/org/apache/lucene/collation/ICUCollationKeyFilter#incrementToken().mjava","sourceNew":"  @Override\n  public boolean incrementToken() throws IOException {\n    if (input.incrementToken()) {\n      char[] termBuffer = termAtt.buffer();\n      String termText = new String(termBuffer, 0, termAtt.length());\n      collator.getRawCollationKey(termText, reusableKey);\n      int encodedLength = IndexableBinaryStringTools.getEncodedLength(\n          reusableKey.bytes, 0, reusableKey.size);\n      if (encodedLength > termBuffer.length) {\n        termAtt.resizeBuffer(encodedLength);\n      }\n      termAtt.setLength(encodedLength);\n      IndexableBinaryStringTools.encode(reusableKey.bytes, 0, reusableKey.size,\n          termAtt.buffer(), 0, encodedLength);\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","sourceOld":"  @Override\n  public boolean incrementToken() throws IOException {\n    if (input.incrementToken()) {\n      char[] termBuffer = termAtt.buffer();\n      String termText = new String(termBuffer, 0, termAtt.length());\n      collator.getRawCollationKey(termText, reusableKey);\n      int encodedLength = IndexableBinaryStringTools.getEncodedLength(\n          reusableKey.bytes, 0, reusableKey.size);\n      if (encodedLength > termBuffer.length) {\n        termAtt.resizeBuffer(encodedLength);\n      }\n      termAtt.setLength(encodedLength);\n      IndexableBinaryStringTools.encode(reusableKey.bytes, 0, reusableKey.size,\n          termAtt.buffer(), 0, encodedLength);\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a7347509fad0711ac30cb15a746e9a3830a38ebd"],"b441220ceb933f50f32318ab45acc05d5943f3aa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a7347509fad0711ac30cb15a746e9a3830a38ebd":["b441220ceb933f50f32318ab45acc05d5943f3aa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b441220ceb933f50f32318ab45acc05d5943f3aa":["a7347509fad0711ac30cb15a746e9a3830a38ebd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b441220ceb933f50f32318ab45acc05d5943f3aa"],"a7347509fad0711ac30cb15a746e9a3830a38ebd":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}