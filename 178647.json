{"path":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testGetBestSingleFragment().mjava","commits":[{"id":"043c298cb215f13ba7b9b81d20760704e8f93d66","date":1107566743,"type":1,"author":"Erik Hatcher","isMerge":false,"pathNew":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testGetBestSingleFragment().mjava","pathOld":"sandbox/contributions/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testGetBestSingleFragment().mjava","sourceNew":"\tpublic void testGetBestSingleFragment() throws Exception\n\t{\n\t\tdoSearching(\"Kennedy\");\n\t\tHighlighter highlighter =new Highlighter(this,new QueryScorer(query));\n\t\thighlighter.setTextFragmenter(new SimpleFragmenter(40));\n\n\t\tfor (int i = 0; i < hits.length(); i++)\n\t\t{\n\t\t\tString text = hits.doc(i).get(FIELD_NAME);\n\t\t\tTokenStream tokenStream=analyzer.tokenStream(FIELD_NAME,new StringReader(text));\n\t\t\tString result = highlighter.getBestFragment(tokenStream,text);\n\t\t\tSystem.out.println(\"\\t\" + result);\n\t\t}\n\t\tassertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\", numHighlights == 4);\n\t}\n\n","sourceOld":"\tpublic void testGetBestSingleFragment() throws Exception\n\t{\n\t\tdoSearching(\"Kennedy\");\n\t\tHighlighter highlighter =new Highlighter(this,new QueryScorer(query));\n\t\thighlighter.setTextFragmenter(new SimpleFragmenter(40));\n\n\t\tfor (int i = 0; i < hits.length(); i++)\n\t\t{\n\t\t\tString text = hits.doc(i).get(FIELD_NAME);\n\t\t\tTokenStream tokenStream=analyzer.tokenStream(FIELD_NAME,new StringReader(text));\n\t\t\tString result = highlighter.getBestFragment(tokenStream,text);\n\t\t\tSystem.out.println(\"\\t\" + result);\n\t\t}\n\t\tassertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\", numHighlights == 4);\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b4cf21055ce3298c85f04952b1aa208983470c4","date":1108840132,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testGetBestSingleFragment().mjava","pathOld":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testGetBestSingleFragment().mjava","sourceNew":"\tpublic void testGetBestSingleFragment() throws Exception\n\t{\n\t\tdoSearching(\"Kennedy\");\n\t\tHighlighter highlighter =new Highlighter(this,new QueryScorer(query));\n\t\thighlighter.setTextFragmenter(new SimpleFragmenter(40));\n\n\t\tfor (int i = 0; i < hits.length(); i++)\n\t\t{\n\t\t\tString text = hits.doc(i).get(FIELD_NAME);\n\t\t\tTokenStream tokenStream=analyzer.tokenStream(FIELD_NAME,new StringReader(text));\n\t\t\tString result = highlighter.getBestFragment(tokenStream,text);\n\t\t\tSystem.out.println(\"\\t\" + result);\n\t\t}\n\t\tassertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\", numHighlights == 4);\n\n\t\tnumHighlights = 0;\n\t\tfor (int i = 0; i < hits.length(); i++)\n\t\t{\n    \t\tString text = hits.doc(i).get(FIELD_NAME);\n    \t\thighlighter.getBestFragment(analyzer, text);\n\t\t}\n\t\tassertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\", numHighlights == 4);\n\n\t\tnumHighlights = 0;\n\t\tfor (int i = 0; i < hits.length(); i++)\n\t\t{\n    \t\tString text = hits.doc(i).get(FIELD_NAME);\n    \t\thighlighter.getBestFragments(analyzer, text, 10);\n\t\t}\n\t\tassertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\", numHighlights == 4);\n\n\t}\n\n","sourceOld":"\tpublic void testGetBestSingleFragment() throws Exception\n\t{\n\t\tdoSearching(\"Kennedy\");\n\t\tHighlighter highlighter =new Highlighter(this,new QueryScorer(query));\n\t\thighlighter.setTextFragmenter(new SimpleFragmenter(40));\n\n\t\tfor (int i = 0; i < hits.length(); i++)\n\t\t{\n\t\t\tString text = hits.doc(i).get(FIELD_NAME);\n\t\t\tTokenStream tokenStream=analyzer.tokenStream(FIELD_NAME,new StringReader(text));\n\t\t\tString result = highlighter.getBestFragment(tokenStream,text);\n\t\t\tSystem.out.println(\"\\t\" + result);\n\t\t}\n\t\tassertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\", numHighlights == 4);\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6521c44a9d5d28a09041959f70607985717c47c3","date":1108842664,"type":3,"author":"Mark Harwood","isMerge":false,"pathNew":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testGetBestSingleFragment().mjava","pathOld":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testGetBestSingleFragment().mjava","sourceNew":"\tpublic void testGetBestSingleFragment() throws Exception\n\t{\n\t\tdoSearching(\"Kennedy\");\n\t\tHighlighter highlighter =new Highlighter(this,new QueryScorer(query));\n\t\thighlighter.setTextFragmenter(new SimpleFragmenter(40));\n\n\t\tfor (int i = 0; i < hits.length(); i++)\n\t\t{\n\t\t\tString text = hits.doc(i).get(FIELD_NAME);\n\t\t\tTokenStream tokenStream=analyzer.tokenStream(FIELD_NAME,new StringReader(text));\n\t\t\tString result = highlighter.getBestFragment(tokenStream,text);\n\t\t\tSystem.out.println(\"\\t\" + result);\n\t\t}\n\t\tassertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\", numHighlights == 4);\n\n\t\tnumHighlights = 0;\n\t\tfor (int i = 0; i < hits.length(); i++)\n\t\t{\n    \t\tString text = hits.doc(i).get(FIELD_NAME);\n    \t\thighlighter.getBestFragment(analyzer, FIELD_NAME,text);\n\t\t}\n\t\tassertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\", numHighlights == 4);\n\n\t\tnumHighlights = 0;\n\t\tfor (int i = 0; i < hits.length(); i++)\n\t\t{\n    \t\tString text = hits.doc(i).get(FIELD_NAME);\n    \t\thighlighter.getBestFragments(analyzer, text, 10);\n\t\t}\n\t\tassertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\", numHighlights == 4);\n\n\t}\n\n","sourceOld":"\tpublic void testGetBestSingleFragment() throws Exception\n\t{\n\t\tdoSearching(\"Kennedy\");\n\t\tHighlighter highlighter =new Highlighter(this,new QueryScorer(query));\n\t\thighlighter.setTextFragmenter(new SimpleFragmenter(40));\n\n\t\tfor (int i = 0; i < hits.length(); i++)\n\t\t{\n\t\t\tString text = hits.doc(i).get(FIELD_NAME);\n\t\t\tTokenStream tokenStream=analyzer.tokenStream(FIELD_NAME,new StringReader(text));\n\t\t\tString result = highlighter.getBestFragment(tokenStream,text);\n\t\t\tSystem.out.println(\"\\t\" + result);\n\t\t}\n\t\tassertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\", numHighlights == 4);\n\n\t\tnumHighlights = 0;\n\t\tfor (int i = 0; i < hits.length(); i++)\n\t\t{\n    \t\tString text = hits.doc(i).get(FIELD_NAME);\n    \t\thighlighter.getBestFragment(analyzer, text);\n\t\t}\n\t\tassertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\", numHighlights == 4);\n\n\t\tnumHighlights = 0;\n\t\tfor (int i = 0; i < hits.length(); i++)\n\t\t{\n    \t\tString text = hits.doc(i).get(FIELD_NAME);\n    \t\thighlighter.getBestFragments(analyzer, text, 10);\n\t\t}\n\t\tassertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\", numHighlights == 4);\n\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ef0bc276292640209b4a2a0cb33ebdab85e1a5b","date":1143666100,"type":3,"author":"Mark Harwood","isMerge":false,"pathNew":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testGetBestSingleFragment().mjava","pathOld":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testGetBestSingleFragment().mjava","sourceNew":"\tpublic void testGetBestSingleFragment() throws Exception\n\t{\n\t\tdoSearching(\"Kennedy\");\n\t\tHighlighter highlighter =new Highlighter(this,new QueryScorer(query));\n\t\thighlighter.setTextFragmenter(new SimpleFragmenter(40));\n\n\t\tfor (int i = 0; i < hits.length(); i++)\n\t\t{\n\t\t\tString text = hits.doc(i).get(FIELD_NAME);\n\t\t\tTokenStream tokenStream=analyzer.tokenStream(FIELD_NAME,new StringReader(text));\n\t\t\tString result = highlighter.getBestFragment(tokenStream,text);\n\t\t\tSystem.out.println(\"\\t\" + result);\n\t\t}\n\t\tassertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\", numHighlights == 4);\n\n\t\tnumHighlights = 0;\n\t\tfor (int i = 0; i < hits.length(); i++)\n\t\t{\n    \t\tString text = hits.doc(i).get(FIELD_NAME);\n    \t\thighlighter.getBestFragment(analyzer, FIELD_NAME,text);\n\t\t}\n\t\tassertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\", numHighlights == 4);\n\n\t\tnumHighlights = 0;\n\t\tfor (int i = 0; i < hits.length(); i++)\n\t\t{\n    \t\tString text = hits.doc(i).get(FIELD_NAME);\n    \t\thighlighter.getBestFragments(analyzer,FIELD_NAME, text, 10);\n\t\t}\n\t\tassertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\", numHighlights == 4);\n\n\t}\n\n","sourceOld":"\tpublic void testGetBestSingleFragment() throws Exception\n\t{\n\t\tdoSearching(\"Kennedy\");\n\t\tHighlighter highlighter =new Highlighter(this,new QueryScorer(query));\n\t\thighlighter.setTextFragmenter(new SimpleFragmenter(40));\n\n\t\tfor (int i = 0; i < hits.length(); i++)\n\t\t{\n\t\t\tString text = hits.doc(i).get(FIELD_NAME);\n\t\t\tTokenStream tokenStream=analyzer.tokenStream(FIELD_NAME,new StringReader(text));\n\t\t\tString result = highlighter.getBestFragment(tokenStream,text);\n\t\t\tSystem.out.println(\"\\t\" + result);\n\t\t}\n\t\tassertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\", numHighlights == 4);\n\n\t\tnumHighlights = 0;\n\t\tfor (int i = 0; i < hits.length(); i++)\n\t\t{\n    \t\tString text = hits.doc(i).get(FIELD_NAME);\n    \t\thighlighter.getBestFragment(analyzer, FIELD_NAME,text);\n\t\t}\n\t\tassertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\", numHighlights == 4);\n\n\t\tnumHighlights = 0;\n\t\tfor (int i = 0; i < hits.length(); i++)\n\t\t{\n    \t\tString text = hits.doc(i).get(FIELD_NAME);\n    \t\thighlighter.getBestFragments(analyzer, text, 10);\n\t\t}\n\t\tassertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\", numHighlights == 4);\n\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"296b8b38a87feb478921f77834a2302dfe77641c","date":1209506838,"type":3,"author":"Mark Harwood","isMerge":false,"pathNew":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testGetBestSingleFragment().mjava","pathOld":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testGetBestSingleFragment().mjava","sourceNew":"  public void testGetBestSingleFragment() throws Exception {\n\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      public void run() throws Exception {\n        doSearching(\"Kennedy\");\n        numHighlights = 0;\n        for (int i = 0; i < hits.length(); i++) {\n          String text = hits.doc(i).get(FIELD_NAME);\n          TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(text));\n\n          Highlighter highlighter = getHighlighter(query, FIELD_NAME, tokenStream,\n              HighlighterTest.this);\n          highlighter.setTextFragmenter(new SimpleFragmenter(40));\n          String result = highlighter.getBestFragment(tokenStream, text);\n          System.out.println(\"\\t\" + result);\n        }\n        assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n            numHighlights == 4);\n\n        numHighlights = 0;\n        for (int i = 0; i < hits.length(); i++) {\n          String text = hits.doc(i).get(FIELD_NAME);\n          TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(text));\n          Highlighter highlighter = getHighlighter(query, FIELD_NAME, tokenStream,\n              HighlighterTest.this);\n          highlighter.getBestFragment(analyzer, FIELD_NAME, text);\n        }\n        assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n            numHighlights == 4);\n\n        numHighlights = 0;\n        for (int i = 0; i < hits.length(); i++) {\n          String text = hits.doc(i).get(FIELD_NAME);\n\n          TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(text));\n          Highlighter highlighter = getHighlighter(query, FIELD_NAME, tokenStream,\n              HighlighterTest.this);\n          highlighter.getBestFragments(analyzer, FIELD_NAME, text, 10);\n        }\n        assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n            numHighlights == 4);\n\n      }\n\n    };\n\n    helper.start();\n\n  }\n\n","sourceOld":"\tpublic void testGetBestSingleFragment() throws Exception\n\t{\n\t\tdoSearching(\"Kennedy\");\n\t\tHighlighter highlighter =new Highlighter(this,new QueryScorer(query));\n\t\thighlighter.setTextFragmenter(new SimpleFragmenter(40));\n\n\t\tfor (int i = 0; i < hits.length(); i++)\n\t\t{\n\t\t\tString text = hits.doc(i).get(FIELD_NAME);\n\t\t\tTokenStream tokenStream=analyzer.tokenStream(FIELD_NAME,new StringReader(text));\n\t\t\tString result = highlighter.getBestFragment(tokenStream,text);\n\t\t\tSystem.out.println(\"\\t\" + result);\n\t\t}\n\t\tassertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\", numHighlights == 4);\n\n\t\tnumHighlights = 0;\n\t\tfor (int i = 0; i < hits.length(); i++)\n\t\t{\n    \t\tString text = hits.doc(i).get(FIELD_NAME);\n    \t\thighlighter.getBestFragment(analyzer, FIELD_NAME,text);\n\t\t}\n\t\tassertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\", numHighlights == 4);\n\n\t\tnumHighlights = 0;\n\t\tfor (int i = 0; i < hits.length(); i++)\n\t\t{\n    \t\tString text = hits.doc(i).get(FIELD_NAME);\n    \t\thighlighter.getBestFragments(analyzer,FIELD_NAME, text, 10);\n\t\t}\n\t\tassertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\", numHighlights == 4);\n\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f148c02ddd6ba981c65ca685d0e56c3a98368e1","date":1254892102,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testGetBestSingleFragment().mjava","pathOld":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testGetBestSingleFragment().mjava","sourceNew":"  public void testGetBestSingleFragment() throws Exception {\n\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      public void run() throws Exception {\n        doSearching(\"Kennedy\");\n        numHighlights = 0;\n        for (int i = 0; i < hits.totalHits; i++) {\n          String text = searcher.doc(hits.scoreDocs[i].doc).get(FIELD_NAME);\n          TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(text));\n\n          Highlighter highlighter = getHighlighter(query, FIELD_NAME, tokenStream,\n              HighlighterTest.this);\n          highlighter.setTextFragmenter(new SimpleFragmenter(40));\n          String result = highlighter.getBestFragment(tokenStream, text);\n          System.out.println(\"\\t\" + result);\n        }\n        assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n            numHighlights == 4);\n\n        numHighlights = 0;\n        for (int i = 0; i < hits.totalHits; i++) {\n          String text = searcher.doc(hits.scoreDocs[i].doc).get(FIELD_NAME);\n          TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(text));\n          Highlighter highlighter = getHighlighter(query, FIELD_NAME, tokenStream,\n              HighlighterTest.this);\n          highlighter.getBestFragment(analyzer, FIELD_NAME, text);\n        }\n        assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n            numHighlights == 4);\n\n        numHighlights = 0;\n        for (int i = 0; i < hits.totalHits; i++) {\n          String text = searcher.doc(hits.scoreDocs[i].doc).get(FIELD_NAME);\n\n          TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(text));\n          Highlighter highlighter = getHighlighter(query, FIELD_NAME, tokenStream,\n              HighlighterTest.this);\n          highlighter.getBestFragments(analyzer, FIELD_NAME, text, 10);\n        }\n        assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n            numHighlights == 4);\n\n      }\n\n    };\n\n    helper.start();\n\n  }\n\n","sourceOld":"  public void testGetBestSingleFragment() throws Exception {\n\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      public void run() throws Exception {\n        doSearching(\"Kennedy\");\n        numHighlights = 0;\n        for (int i = 0; i < hits.length(); i++) {\n          String text = hits.doc(i).get(FIELD_NAME);\n          TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(text));\n\n          Highlighter highlighter = getHighlighter(query, FIELD_NAME, tokenStream,\n              HighlighterTest.this);\n          highlighter.setTextFragmenter(new SimpleFragmenter(40));\n          String result = highlighter.getBestFragment(tokenStream, text);\n          System.out.println(\"\\t\" + result);\n        }\n        assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n            numHighlights == 4);\n\n        numHighlights = 0;\n        for (int i = 0; i < hits.length(); i++) {\n          String text = hits.doc(i).get(FIELD_NAME);\n          TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(text));\n          Highlighter highlighter = getHighlighter(query, FIELD_NAME, tokenStream,\n              HighlighterTest.this);\n          highlighter.getBestFragment(analyzer, FIELD_NAME, text);\n        }\n        assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n            numHighlights == 4);\n\n        numHighlights = 0;\n        for (int i = 0; i < hits.length(); i++) {\n          String text = hits.doc(i).get(FIELD_NAME);\n\n          TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(text));\n          Highlighter highlighter = getHighlighter(query, FIELD_NAME, tokenStream,\n              HighlighterTest.this);\n          highlighter.getBestFragments(analyzer, FIELD_NAME, text, 10);\n        }\n        assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n            numHighlights == 4);\n\n      }\n\n    };\n\n    helper.start();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d57eb7c98c08c03af6e4cd83509df31c81ac16af","date":1257684312,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testGetBestSingleFragment().mjava","pathOld":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testGetBestSingleFragment().mjava","sourceNew":"  public void testGetBestSingleFragment() throws Exception {\n\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        doSearching(\"Kennedy\");\n        numHighlights = 0;\n        for (int i = 0; i < hits.totalHits; i++) {\n          String text = searcher.doc(hits.scoreDocs[i].doc).get(FIELD_NAME);\n          TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(text));\n\n          Highlighter highlighter = getHighlighter(query, FIELD_NAME, tokenStream,\n              HighlighterTest.this);\n          highlighter.setTextFragmenter(new SimpleFragmenter(40));\n          String result = highlighter.getBestFragment(tokenStream, text);\n          System.out.println(\"\\t\" + result);\n        }\n        assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n            numHighlights == 4);\n\n        numHighlights = 0;\n        for (int i = 0; i < hits.totalHits; i++) {\n          String text = searcher.doc(hits.scoreDocs[i].doc).get(FIELD_NAME);\n          TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(text));\n          Highlighter highlighter = getHighlighter(query, FIELD_NAME, tokenStream,\n              HighlighterTest.this);\n          highlighter.getBestFragment(analyzer, FIELD_NAME, text);\n        }\n        assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n            numHighlights == 4);\n\n        numHighlights = 0;\n        for (int i = 0; i < hits.totalHits; i++) {\n          String text = searcher.doc(hits.scoreDocs[i].doc).get(FIELD_NAME);\n\n          TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(text));\n          Highlighter highlighter = getHighlighter(query, FIELD_NAME, tokenStream,\n              HighlighterTest.this);\n          highlighter.getBestFragments(analyzer, FIELD_NAME, text, 10);\n        }\n        assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n            numHighlights == 4);\n\n      }\n\n    };\n\n    helper.start();\n\n  }\n\n","sourceOld":"  public void testGetBestSingleFragment() throws Exception {\n\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      public void run() throws Exception {\n        doSearching(\"Kennedy\");\n        numHighlights = 0;\n        for (int i = 0; i < hits.totalHits; i++) {\n          String text = searcher.doc(hits.scoreDocs[i].doc).get(FIELD_NAME);\n          TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(text));\n\n          Highlighter highlighter = getHighlighter(query, FIELD_NAME, tokenStream,\n              HighlighterTest.this);\n          highlighter.setTextFragmenter(new SimpleFragmenter(40));\n          String result = highlighter.getBestFragment(tokenStream, text);\n          System.out.println(\"\\t\" + result);\n        }\n        assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n            numHighlights == 4);\n\n        numHighlights = 0;\n        for (int i = 0; i < hits.totalHits; i++) {\n          String text = searcher.doc(hits.scoreDocs[i].doc).get(FIELD_NAME);\n          TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(text));\n          Highlighter highlighter = getHighlighter(query, FIELD_NAME, tokenStream,\n              HighlighterTest.this);\n          highlighter.getBestFragment(analyzer, FIELD_NAME, text);\n        }\n        assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n            numHighlights == 4);\n\n        numHighlights = 0;\n        for (int i = 0; i < hits.totalHits; i++) {\n          String text = searcher.doc(hits.scoreDocs[i].doc).get(FIELD_NAME);\n\n          TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(text));\n          Highlighter highlighter = getHighlighter(query, FIELD_NAME, tokenStream,\n              HighlighterTest.this);\n          highlighter.getBestFragments(analyzer, FIELD_NAME, text, 10);\n        }\n        assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n            numHighlights == 4);\n\n      }\n\n    };\n\n    helper.start();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"42607aa380c892dc1ec0ab26e86a575c28e13618","date":1268641604,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testGetBestSingleFragment().mjava","pathOld":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testGetBestSingleFragment().mjava","sourceNew":"  public void testGetBestSingleFragment() throws Exception {\n\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        doSearching(\"Kennedy\");\n        numHighlights = 0;\n        for (int i = 0; i < hits.totalHits; i++) {\n          String text = searcher.doc(hits.scoreDocs[i].doc).get(FIELD_NAME);\n          TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(text));\n\n          Highlighter highlighter = getHighlighter(query, FIELD_NAME, tokenStream,\n              HighlighterTest.this);\n          highlighter.setTextFragmenter(new SimpleFragmenter(40));\n          String result = highlighter.getBestFragment(tokenStream, text);\n          if (VERBOSE) System.out.println(\"\\t\" + result);\n        }\n        assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n            numHighlights == 4);\n\n        numHighlights = 0;\n        for (int i = 0; i < hits.totalHits; i++) {\n          String text = searcher.doc(hits.scoreDocs[i].doc).get(FIELD_NAME);\n          TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(text));\n          Highlighter highlighter = getHighlighter(query, FIELD_NAME, tokenStream,\n              HighlighterTest.this);\n          highlighter.getBestFragment(analyzer, FIELD_NAME, text);\n        }\n        assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n            numHighlights == 4);\n\n        numHighlights = 0;\n        for (int i = 0; i < hits.totalHits; i++) {\n          String text = searcher.doc(hits.scoreDocs[i].doc).get(FIELD_NAME);\n\n          TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(text));\n          Highlighter highlighter = getHighlighter(query, FIELD_NAME, tokenStream,\n              HighlighterTest.this);\n          highlighter.getBestFragments(analyzer, FIELD_NAME, text, 10);\n        }\n        assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n            numHighlights == 4);\n\n      }\n\n    };\n\n    helper.start();\n\n  }\n\n","sourceOld":"  public void testGetBestSingleFragment() throws Exception {\n\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        doSearching(\"Kennedy\");\n        numHighlights = 0;\n        for (int i = 0; i < hits.totalHits; i++) {\n          String text = searcher.doc(hits.scoreDocs[i].doc).get(FIELD_NAME);\n          TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(text));\n\n          Highlighter highlighter = getHighlighter(query, FIELD_NAME, tokenStream,\n              HighlighterTest.this);\n          highlighter.setTextFragmenter(new SimpleFragmenter(40));\n          String result = highlighter.getBestFragment(tokenStream, text);\n          System.out.println(\"\\t\" + result);\n        }\n        assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n            numHighlights == 4);\n\n        numHighlights = 0;\n        for (int i = 0; i < hits.totalHits; i++) {\n          String text = searcher.doc(hits.scoreDocs[i].doc).get(FIELD_NAME);\n          TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(text));\n          Highlighter highlighter = getHighlighter(query, FIELD_NAME, tokenStream,\n              HighlighterTest.this);\n          highlighter.getBestFragment(analyzer, FIELD_NAME, text);\n        }\n        assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n            numHighlights == 4);\n\n        numHighlights = 0;\n        for (int i = 0; i < hits.totalHits; i++) {\n          String text = searcher.doc(hits.scoreDocs[i].doc).get(FIELD_NAME);\n\n          TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(text));\n          Highlighter highlighter = getHighlighter(query, FIELD_NAME, tokenStream,\n              HighlighterTest.this);\n          highlighter.getBestFragments(analyzer, FIELD_NAME, text, 10);\n        }\n        assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n            numHighlights == 4);\n\n      }\n\n    };\n\n    helper.start();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testGetBestSingleFragment().mjava","pathOld":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testGetBestSingleFragment().mjava","sourceNew":"  public void testGetBestSingleFragment() throws Exception {\n\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        doSearching(\"Kennedy\");\n        numHighlights = 0;\n        for (int i = 0; i < hits.totalHits; i++) {\n          String text = searcher.doc(hits.scoreDocs[i].doc).get(FIELD_NAME);\n          TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(text));\n\n          Highlighter highlighter = getHighlighter(query, FIELD_NAME, tokenStream,\n              HighlighterTest.this);\n          highlighter.setTextFragmenter(new SimpleFragmenter(40));\n          String result = highlighter.getBestFragment(tokenStream, text);\n          if (VERBOSE) System.out.println(\"\\t\" + result);\n        }\n        assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n            numHighlights == 4);\n\n        numHighlights = 0;\n        for (int i = 0; i < hits.totalHits; i++) {\n          String text = searcher.doc(hits.scoreDocs[i].doc).get(FIELD_NAME);\n          TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(text));\n          Highlighter highlighter = getHighlighter(query, FIELD_NAME, tokenStream,\n              HighlighterTest.this);\n          highlighter.getBestFragment(analyzer, FIELD_NAME, text);\n        }\n        assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n            numHighlights == 4);\n\n        numHighlights = 0;\n        for (int i = 0; i < hits.totalHits; i++) {\n          String text = searcher.doc(hits.scoreDocs[i].doc).get(FIELD_NAME);\n\n          TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(text));\n          Highlighter highlighter = getHighlighter(query, FIELD_NAME, tokenStream,\n              HighlighterTest.this);\n          highlighter.getBestFragments(analyzer, FIELD_NAME, text, 10);\n        }\n        assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n            numHighlights == 4);\n\n      }\n\n    };\n\n    helper.start();\n\n  }\n\n","sourceOld":"  public void testGetBestSingleFragment() throws Exception {\n\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        doSearching(\"Kennedy\");\n        numHighlights = 0;\n        for (int i = 0; i < hits.totalHits; i++) {\n          String text = searcher.doc(hits.scoreDocs[i].doc).get(FIELD_NAME);\n          TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(text));\n\n          Highlighter highlighter = getHighlighter(query, FIELD_NAME, tokenStream,\n              HighlighterTest.this);\n          highlighter.setTextFragmenter(new SimpleFragmenter(40));\n          String result = highlighter.getBestFragment(tokenStream, text);\n          if (VERBOSE) System.out.println(\"\\t\" + result);\n        }\n        assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n            numHighlights == 4);\n\n        numHighlights = 0;\n        for (int i = 0; i < hits.totalHits; i++) {\n          String text = searcher.doc(hits.scoreDocs[i].doc).get(FIELD_NAME);\n          TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(text));\n          Highlighter highlighter = getHighlighter(query, FIELD_NAME, tokenStream,\n              HighlighterTest.this);\n          highlighter.getBestFragment(analyzer, FIELD_NAME, text);\n        }\n        assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n            numHighlights == 4);\n\n        numHighlights = 0;\n        for (int i = 0; i < hits.totalHits; i++) {\n          String text = searcher.doc(hits.scoreDocs[i].doc).get(FIELD_NAME);\n\n          TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(text));\n          Highlighter highlighter = getHighlighter(query, FIELD_NAME, tokenStream,\n              HighlighterTest.this);\n          highlighter.getBestFragments(analyzer, FIELD_NAME, text, 10);\n        }\n        assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n            numHighlights == 4);\n\n      }\n\n    };\n\n    helper.start();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4b4cf21055ce3298c85f04952b1aa208983470c4":["043c298cb215f13ba7b9b81d20760704e8f93d66"],"043c298cb215f13ba7b9b81d20760704e8f93d66":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6521c44a9d5d28a09041959f70607985717c47c3":["4b4cf21055ce3298c85f04952b1aa208983470c4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d57eb7c98c08c03af6e4cd83509df31c81ac16af":["0f148c02ddd6ba981c65ca685d0e56c3a98368e1"],"4ef0bc276292640209b4a2a0cb33ebdab85e1a5b":["6521c44a9d5d28a09041959f70607985717c47c3"],"42607aa380c892dc1ec0ab26e86a575c28e13618":["d57eb7c98c08c03af6e4cd83509df31c81ac16af"],"0f148c02ddd6ba981c65ca685d0e56c3a98368e1":["296b8b38a87feb478921f77834a2302dfe77641c"],"296b8b38a87feb478921f77834a2302dfe77641c":["4ef0bc276292640209b4a2a0cb33ebdab85e1a5b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["42607aa380c892dc1ec0ab26e86a575c28e13618"]},"commit2Childs":{"4b4cf21055ce3298c85f04952b1aa208983470c4":["6521c44a9d5d28a09041959f70607985717c47c3"],"043c298cb215f13ba7b9b81d20760704e8f93d66":["4b4cf21055ce3298c85f04952b1aa208983470c4"],"6521c44a9d5d28a09041959f70607985717c47c3":["4ef0bc276292640209b4a2a0cb33ebdab85e1a5b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["043c298cb215f13ba7b9b81d20760704e8f93d66"],"d57eb7c98c08c03af6e4cd83509df31c81ac16af":["42607aa380c892dc1ec0ab26e86a575c28e13618"],"4ef0bc276292640209b4a2a0cb33ebdab85e1a5b":["296b8b38a87feb478921f77834a2302dfe77641c"],"0f148c02ddd6ba981c65ca685d0e56c3a98368e1":["d57eb7c98c08c03af6e4cd83509df31c81ac16af"],"42607aa380c892dc1ec0ab26e86a575c28e13618":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"296b8b38a87feb478921f77834a2302dfe77641c":["0f148c02ddd6ba981c65ca685d0e56c3a98368e1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}