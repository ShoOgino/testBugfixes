{"path":"src/test/org/apache/lucene/search/TestSort#testSortWithoutFillFields().mjava","commits":[{"id":"64714133cf5ec732e3bbceee63351bb9af0117dc","date":1239647636,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestSort#testSortWithoutFillFields().mjava","pathOld":"/dev/null","sourceNew":"  public void testSortWithoutFillFields() throws Exception {\n    \n    // There was previously a bug in TopFieldCollector when fillFields was set\n    // to false - the same doc and score was set in ScoreDoc[] array. This test\n    // asserts that if fillFields is false, the documents are set properly. It\n    // does not use Searcher's default search methods (with Sort) since all set\n    // fillFields to true.\n    Sort[] sort = new Sort[] { new Sort(SortField.FIELD_DOC), new Sort() };\n    for (int i = 0; i < sort.length; i++) {\n      TopDocsCollector tdc = TopFieldCollector.create(sort[i], 10, false, false, false);\n      \n      full.search(new MatchAllDocsQuery(), tdc);\n      \n      ScoreDoc[] sd = tdc.topDocs().scoreDocs;\n      for (int j = 1; j < sd.length; j++) {\n        assertTrue(sd[j].doc != sd[j - 1].doc);\n      }\n      \n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"17563f8c3ca7e14d56ce4dcbb3fe9b042ba613cc","date":1241865401,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestSort#testSortWithoutFillFields().mjava","pathOld":"src/test/org/apache/lucene/search/TestSort#testSortWithoutFillFields().mjava","sourceNew":"  public void testSortWithoutFillFields() throws Exception {\n    \n    // There was previously a bug in TopFieldCollector when fillFields was set\n    // to false - the same doc and score was set in ScoreDoc[] array. This test\n    // asserts that if fillFields is false, the documents are set properly. It\n    // does not use Searcher's default search methods (with Sort) since all set\n    // fillFields to true.\n    Sort[] sort = new Sort[] { new Sort(SortField.FIELD_DOC), new Sort() };\n    for (int i = 0; i < sort.length; i++) {\n      Query q = new MatchAllDocsQuery();\n      TopDocsCollector tdc = TopFieldCollector.create(sort[i], 10, false,\n          false, false, true);\n      \n      full.search(q, tdc);\n      \n      ScoreDoc[] sd = tdc.topDocs().scoreDocs;\n      for (int j = 1; j < sd.length; j++) {\n        assertTrue(sd[j].doc != sd[j - 1].doc);\n      }\n      \n    }\n  }\n\n","sourceOld":"  public void testSortWithoutFillFields() throws Exception {\n    \n    // There was previously a bug in TopFieldCollector when fillFields was set\n    // to false - the same doc and score was set in ScoreDoc[] array. This test\n    // asserts that if fillFields is false, the documents are set properly. It\n    // does not use Searcher's default search methods (with Sort) since all set\n    // fillFields to true.\n    Sort[] sort = new Sort[] { new Sort(SortField.FIELD_DOC), new Sort() };\n    for (int i = 0; i < sort.length; i++) {\n      TopDocsCollector tdc = TopFieldCollector.create(sort[i], 10, false, false, false);\n      \n      full.search(new MatchAllDocsQuery(), tdc);\n      \n      ScoreDoc[] sd = tdc.topDocs().scoreDocs;\n      for (int j = 1; j < sd.length; j++) {\n        assertTrue(sd[j].doc != sd[j - 1].doc);\n      }\n      \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a","date":1267298041,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestSort#testSortWithoutFillFields().mjava","pathOld":"src/test/org/apache/lucene/search/TestSort#testSortWithoutFillFields().mjava","sourceNew":"  public void testSortWithoutFillFields() throws Exception {\n    \n    // There was previously a bug in TopFieldCollector when fillFields was set\n    // to false - the same doc and score was set in ScoreDoc[] array. This test\n    // asserts that if fillFields is false, the documents are set properly. It\n    // does not use Searcher's default search methods (with Sort) since all set\n    // fillFields to true.\n    Sort[] sort = new Sort[] { new Sort(SortField.FIELD_DOC), new Sort() };\n    for (int i = 0; i < sort.length; i++) {\n      Query q = new MatchAllDocsQuery();\n      TopDocsCollector<Entry> tdc = TopFieldCollector.create(sort[i], 10, false,\n          false, false, true);\n      \n      full.search(q, tdc);\n      \n      ScoreDoc[] sd = tdc.topDocs().scoreDocs;\n      for (int j = 1; j < sd.length; j++) {\n        assertTrue(sd[j].doc != sd[j - 1].doc);\n      }\n      \n    }\n  }\n\n","sourceOld":"  public void testSortWithoutFillFields() throws Exception {\n    \n    // There was previously a bug in TopFieldCollector when fillFields was set\n    // to false - the same doc and score was set in ScoreDoc[] array. This test\n    // asserts that if fillFields is false, the documents are set properly. It\n    // does not use Searcher's default search methods (with Sort) since all set\n    // fillFields to true.\n    Sort[] sort = new Sort[] { new Sort(SortField.FIELD_DOC), new Sort() };\n    for (int i = 0; i < sort.length; i++) {\n      Query q = new MatchAllDocsQuery();\n      TopDocsCollector tdc = TopFieldCollector.create(sort[i], 10, false,\n          false, false, true);\n      \n      full.search(q, tdc);\n      \n      ScoreDoc[] sd = tdc.topDocs().scoreDocs;\n      for (int j = 1; j < sd.length; j++) {\n        assertTrue(sd[j].doc != sd[j - 1].doc);\n      }\n      \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSort#testSortWithoutFillFields().mjava","pathOld":"src/test/org/apache/lucene/search/TestSort#testSortWithoutFillFields().mjava","sourceNew":"  public void testSortWithoutFillFields() throws Exception {\n    \n    // There was previously a bug in TopFieldCollector when fillFields was set\n    // to false - the same doc and score was set in ScoreDoc[] array. This test\n    // asserts that if fillFields is false, the documents are set properly. It\n    // does not use Searcher's default search methods (with Sort) since all set\n    // fillFields to true.\n    Sort[] sort = new Sort[] { new Sort(SortField.FIELD_DOC), new Sort() };\n    for (int i = 0; i < sort.length; i++) {\n      Query q = new MatchAllDocsQuery();\n      TopDocsCollector<Entry> tdc = TopFieldCollector.create(sort[i], 10, false,\n          false, false, true);\n      \n      full.search(q, tdc);\n      \n      ScoreDoc[] sd = tdc.topDocs().scoreDocs;\n      for (int j = 1; j < sd.length; j++) {\n        assertTrue(sd[j].doc != sd[j - 1].doc);\n      }\n      \n    }\n  }\n\n","sourceOld":"  public void testSortWithoutFillFields() throws Exception {\n    \n    // There was previously a bug in TopFieldCollector when fillFields was set\n    // to false - the same doc and score was set in ScoreDoc[] array. This test\n    // asserts that if fillFields is false, the documents are set properly. It\n    // does not use Searcher's default search methods (with Sort) since all set\n    // fillFields to true.\n    Sort[] sort = new Sort[] { new Sort(SortField.FIELD_DOC), new Sort() };\n    for (int i = 0; i < sort.length; i++) {\n      Query q = new MatchAllDocsQuery();\n      TopDocsCollector<Entry> tdc = TopFieldCollector.create(sort[i], 10, false,\n          false, false, true);\n      \n      full.search(q, tdc);\n      \n      ScoreDoc[] sd = tdc.topDocs().scoreDocs;\n      for (int j = 1; j < sd.length; j++) {\n        assertTrue(sd[j].doc != sd[j - 1].doc);\n      }\n      \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"17563f8c3ca7e14d56ce4dcbb3fe9b042ba613cc":["64714133cf5ec732e3bbceee63351bb9af0117dc"],"64714133cf5ec732e3bbceee63351bb9af0117dc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["17563f8c3ca7e14d56ce4dcbb3fe9b042ba613cc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"]},"commit2Childs":{"17563f8c3ca7e14d56ce4dcbb3fe9b042ba613cc":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"],"64714133cf5ec732e3bbceee63351bb9af0117dc":["17563f8c3ca7e14d56ce4dcbb3fe9b042ba613cc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["64714133cf5ec732e3bbceee63351bb9af0117dc"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}