{"path":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReader.SegmentDocsEnum#read().mjava","commits":[{"id":"99cf56f3a650b908f7017a72f9d23940418f8a52","date":1284891529,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReader.SegmentDocsEnum#read().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReaderImpl.SegmentDocsEnum#read().mjava","sourceNew":"    @Override\n    public int read() throws IOException {\n\n      final int[] docs = bulkResult.docs.ints;\n      final int[] freqs = bulkResult.freqs.ints;\n      int i = 0;\n      final int length = docs.length;\n      while (i < length && ord < limit) {\n        ord++;\n        // manually inlined call to next() for speed\n        final int code = freqIn.readVInt();\n        if (omitTF) {\n          doc += code;\n        } else {\n          doc += code >>> 1;              // shift off low bit\n          if ((code & 1) != 0) {          // if low bit is set\n            freq = 1;                     // freq is one\n          } else {\n            freq = freqIn.readVInt();     // else read freq\n          }\n        }\n\n        if (skipDocs == null || !skipDocs.get(doc)) {\n          docs[i] = doc;\n          freqs[i] = freq;\n          ++i;\n        }\n      }\n      \n      return i;\n    }\n\n","sourceOld":"    @Override\n    public int read() throws IOException {\n\n      final int[] docs = bulkResult.docs.ints;\n      final int[] freqs = bulkResult.freqs.ints;\n      int i = 0;\n      final int length = docs.length;\n      while (i < length && ord < limit) {\n        ord++;\n        // manually inlined call to next() for speed\n        final int code = freqIn.readVInt();\n        if (omitTF) {\n          doc += code;\n        } else {\n          doc += code >>> 1;              // shift off low bit\n          if ((code & 1) != 0) {          // if low bit is set\n            freq = 1;                     // freq is one\n          } else {\n            freq = freqIn.readVInt();     // else read freq\n          }\n        }\n\n        if (skipDocs == null || !skipDocs.get(doc)) {\n          docs[i] = doc;\n          freqs[i] = freq;\n          ++i;\n        }\n      }\n      \n      return i;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":1,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReader.SegmentDocsEnum#read().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReaderImpl.SegmentDocsEnum#read().mjava","sourceNew":"    @Override\n    public int read() throws IOException {\n\n      final int[] docs = bulkResult.docs.ints;\n      final int[] freqs = bulkResult.freqs.ints;\n      int i = 0;\n      final int length = docs.length;\n      while (i < length && ord < limit) {\n        ord++;\n        // manually inlined call to next() for speed\n        final int code = freqIn.readVInt();\n        if (omitTF) {\n          doc += code;\n        } else {\n          doc += code >>> 1;              // shift off low bit\n          if ((code & 1) != 0) {          // if low bit is set\n            freq = 1;                     // freq is one\n          } else {\n            freq = freqIn.readVInt();     // else read freq\n          }\n        }\n\n        if (skipDocs == null || !skipDocs.get(doc)) {\n          docs[i] = doc;\n          freqs[i] = freq;\n          ++i;\n        }\n      }\n      \n      return i;\n    }\n\n","sourceOld":"    @Override\n    public int read() throws IOException {\n\n      final int[] docs = bulkResult.docs.ints;\n      final int[] freqs = bulkResult.freqs.ints;\n      int i = 0;\n      final int length = docs.length;\n      while (i < length && ord < limit) {\n        ord++;\n        // manually inlined call to next() for speed\n        final int code = freqIn.readVInt();\n        if (omitTF) {\n          doc += code;\n        } else {\n          doc += code >>> 1;              // shift off low bit\n          if ((code & 1) != 0) {          // if low bit is set\n            freq = 1;                     // freq is one\n          } else {\n            freq = freqIn.readVInt();     // else read freq\n          }\n        }\n\n        if (skipDocs == null || !skipDocs.get(doc)) {\n          docs[i] = doc;\n          freqs[i] = freq;\n          ++i;\n        }\n      }\n      \n      return i;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb","date":1309960478,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReader.SegmentDocsEnum#read().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReader.SegmentDocsEnum#read().mjava","sourceNew":"    @Override\n    public int read() throws IOException {\n\n      final int[] docs = bulkResult.docs.ints;\n      final int[] freqs = bulkResult.freqs.ints;\n      int i = 0;\n      final int length = docs.length;\n      while (i < length && ord < limit) {\n        ord++;\n        // manually inlined call to next() for speed\n        final int code = freqIn.readVInt();\n        if (omitTF) {\n          doc += code;\n        } else {\n          doc += code >>> 1;              // shift off low bit\n          if ((code & 1) != 0) {          // if low bit is set\n            freq = 1;                     // freq is one\n          } else {\n            freq = freqIn.readVInt();     // else read freq\n          }\n        }\n\n        if (liveDocs == null || liveDocs.get(doc)) {\n          docs[i] = doc;\n          freqs[i] = freq;\n          ++i;\n        }\n      }\n      \n      return i;\n    }\n\n","sourceOld":"    @Override\n    public int read() throws IOException {\n\n      final int[] docs = bulkResult.docs.ints;\n      final int[] freqs = bulkResult.freqs.ints;\n      int i = 0;\n      final int length = docs.length;\n      while (i < length && ord < limit) {\n        ord++;\n        // manually inlined call to next() for speed\n        final int code = freqIn.readVInt();\n        if (omitTF) {\n          doc += code;\n        } else {\n          doc += code >>> 1;              // shift off low bit\n          if ((code & 1) != 0) {          // if low bit is set\n            freq = 1;                     // freq is one\n          } else {\n            freq = freqIn.readVInt();     // else read freq\n          }\n        }\n\n        if (skipDocs == null || !skipDocs.get(doc)) {\n          docs[i] = doc;\n          freqs[i] = freq;\n          ++i;\n        }\n      }\n      \n      return i;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReader.SegmentDocsEnum#read().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReader.SegmentDocsEnum#read().mjava","sourceNew":"    @Override\n    public int read() throws IOException {\n\n      final int[] docs = bulkResult.docs.ints;\n      final int[] freqs = bulkResult.freqs.ints;\n      int i = 0;\n      final int length = docs.length;\n      while (i < length && ord < limit) {\n        ord++;\n        // manually inlined call to next() for speed\n        final int code = freqIn.readVInt();\n        if (omitTF) {\n          doc += code;\n        } else {\n          doc += code >>> 1;              // shift off low bit\n          if ((code & 1) != 0) {          // if low bit is set\n            freq = 1;                     // freq is one\n          } else {\n            freq = freqIn.readVInt();     // else read freq\n          }\n        }\n\n        if (liveDocs == null || liveDocs.get(doc)) {\n          docs[i] = doc;\n          freqs[i] = freq;\n          ++i;\n        }\n      }\n      \n      return i;\n    }\n\n","sourceOld":"    @Override\n    public int read() throws IOException {\n\n      final int[] docs = bulkResult.docs.ints;\n      final int[] freqs = bulkResult.freqs.ints;\n      int i = 0;\n      final int length = docs.length;\n      while (i < length && ord < limit) {\n        ord++;\n        // manually inlined call to next() for speed\n        final int code = freqIn.readVInt();\n        if (omitTF) {\n          doc += code;\n        } else {\n          doc += code >>> 1;              // shift off low bit\n          if ((code & 1) != 0) {          // if low bit is set\n            freq = 1;                     // freq is one\n          } else {\n            freq = freqIn.readVInt();     // else read freq\n          }\n        }\n\n        if (skipDocs == null || !skipDocs.get(doc)) {\n          docs[i] = doc;\n          freqs[i] = freq;\n          ++i;\n        }\n      }\n      \n      return i;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReader.SegmentDocsEnum#read().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReader.SegmentDocsEnum#read().mjava","sourceNew":"    @Override\n    public int read() throws IOException {\n\n      final int[] docs = bulkResult.docs.ints;\n      final int[] freqs = bulkResult.freqs.ints;\n      int i = 0;\n      final int length = docs.length;\n      while (i < length && ord < limit) {\n        ord++;\n        // manually inlined call to next() for speed\n        final int code = freqIn.readVInt();\n        if (omitTF) {\n          doc += code;\n        } else {\n          doc += code >>> 1;              // shift off low bit\n          if ((code & 1) != 0) {          // if low bit is set\n            freq = 1;                     // freq is one\n          } else {\n            freq = freqIn.readVInt();     // else read freq\n          }\n        }\n\n        if (liveDocs == null || liveDocs.get(doc)) {\n          docs[i] = doc;\n          freqs[i] = freq;\n          ++i;\n        }\n      }\n      \n      return i;\n    }\n\n","sourceOld":"    @Override\n    public int read() throws IOException {\n\n      final int[] docs = bulkResult.docs.ints;\n      final int[] freqs = bulkResult.freqs.ints;\n      int i = 0;\n      final int length = docs.length;\n      while (i < length && ord < limit) {\n        ord++;\n        // manually inlined call to next() for speed\n        final int code = freqIn.readVInt();\n        if (omitTF) {\n          doc += code;\n        } else {\n          doc += code >>> 1;              // shift off low bit\n          if ((code & 1) != 0) {          // if low bit is set\n            freq = 1;                     // freq is one\n          } else {\n            freq = freqIn.readVInt();     // else read freq\n          }\n        }\n\n        if (skipDocs == null || !skipDocs.get(doc)) {\n          docs[i] = doc;\n          freqs[i] = freq;\n          ++i;\n        }\n      }\n      \n      return i;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/lucene40/Lucene40PostingsReader.SegmentDocsEnum#read().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReader.SegmentDocsEnum#read().mjava","sourceNew":"    @Override\n    public int read() throws IOException {\n\n      final int[] docs = bulkResult.docs.ints;\n      final int[] freqs = bulkResult.freqs.ints;\n      int i = 0;\n      final int length = docs.length;\n      while (i < length && ord < limit) {\n        ord++;\n        // manually inlined call to next() for speed\n        final int code = freqIn.readVInt();\n        if (omitTF) {\n          doc += code;\n        } else {\n          doc += code >>> 1;              // shift off low bit\n          if ((code & 1) != 0) {          // if low bit is set\n            freq = 1;                     // freq is one\n          } else {\n            freq = freqIn.readVInt();     // else read freq\n          }\n        }\n\n        if (liveDocs == null || liveDocs.get(doc)) {\n          docs[i] = doc;\n          freqs[i] = freq;\n          ++i;\n        }\n      }\n      \n      return i;\n    }\n\n","sourceOld":"    @Override\n    public int read() throws IOException {\n\n      final int[] docs = bulkResult.docs.ints;\n      final int[] freqs = bulkResult.freqs.ints;\n      int i = 0;\n      final int length = docs.length;\n      while (i < length && ord < limit) {\n        ord++;\n        // manually inlined call to next() for speed\n        final int code = freqIn.readVInt();\n        if (omitTF) {\n          doc += code;\n        } else {\n          doc += code >>> 1;              // shift off low bit\n          if ((code & 1) != 0) {          // if low bit is set\n            freq = 1;                     // freq is one\n          } else {\n            freq = freqIn.readVInt();     // else read freq\n          }\n        }\n\n        if (liveDocs == null || liveDocs.get(doc)) {\n          docs[i] = doc;\n          freqs[i] = freq;\n          ++i;\n        }\n      }\n      \n      return i;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7b91922b55d15444d554721b352861d028eb8278":["e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb":["99cf56f3a650b908f7017a72f9d23940418f8a52"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","99cf56f3a650b908f7017a72f9d23940418f8a52"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["99cf56f3a650b908f7017a72f9d23940418f8a52","e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"99cf56f3a650b908f7017a72f9d23940418f8a52":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["99cf56f3a650b908f7017a72f9d23940418f8a52","e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7b91922b55d15444d554721b352861d028eb8278"]},"commit2Childs":{"7b91922b55d15444d554721b352861d028eb8278":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb":["7b91922b55d15444d554721b352861d028eb8278","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","99cf56f3a650b908f7017a72f9d23940418f8a52"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"99cf56f3a650b908f7017a72f9d23940418f8a52":["e7bd246bb7bc35ac22edfee9157e034dfc4e65eb","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}