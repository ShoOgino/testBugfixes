{"path":"solr/core/src/java/org/apache/solr/core/SolrXmlConfig#fromConfig(Config).mjava","commits":[{"id":"e15199583d3635cb940942caed05132dd6c4c7c6","date":1424875551,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrXmlConfig#fromConfig(Config).mjava","pathOld":"/dev/null","sourceNew":"  public static NodeConfig fromConfig(Config config) {\n\n    checkForIllegalConfig(config);\n\n    config.substituteProperties();\n\n    CloudConfig cloudConfig = null;\n    UpdateShardHandlerConfig deprecatedUpdateConfig = null;\n\n    if (config.getNodeList(\"solr/solrcloud\", false).getLength() > 0) {\n      NamedList<Object> cloudSection = readNodeListAsNamedList(config, \"solr/solrcloud/*[@name]\", \"<solrcloud>\");\n      deprecatedUpdateConfig = loadUpdateConfig(cloudSection, false);\n      cloudConfig = fillSolrCloudSection(cloudSection);\n    }\n\n    NamedList<Object> entries = readNodeListAsNamedList(config, \"solr/*[@name]\", \"<solr>\");\n    String nodeName = (String) entries.remove(\"nodeName\");\n    if (Strings.isNullOrEmpty(nodeName) && cloudConfig != null)\n      nodeName = cloudConfig.getHost();\n\n    UpdateShardHandlerConfig updateConfig;\n    if (deprecatedUpdateConfig == null) {\n      updateConfig = loadUpdateConfig(readNodeListAsNamedList(config, \"solr/updateshardhandler/*[@name]\", \"<updateshardhandler>\"), true);\n    }\n    else {\n      updateConfig = loadUpdateConfig(readNodeListAsNamedList(config, \"solr/updateshardhandler/*[@name]\", \"<updateshardhandler>\"), false);\n      if (updateConfig != null) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"UpdateShardHandler configuration defined twice in solr.xml\");\n      }\n      updateConfig = deprecatedUpdateConfig;\n    }\n\n    NodeConfig.NodeConfigBuilder configBuilder = new NodeConfig.NodeConfigBuilder(nodeName, config.getResourceLoader());\n    configBuilder.setUpdateShardHandlerConfig(updateConfig);\n    configBuilder.setShardHandlerFactoryConfig(getShardHandlerFactoryPluginInfo(config));\n    configBuilder.setLogWatcherConfig(loadLogWatcherConfig(config, \"solr/logging/*[@name]\", \"solr/logging/watcher/*[@name]\"));\n    configBuilder.setSolrProperties(loadProperties(config));\n    if (cloudConfig != null)\n      configBuilder.setCloudConfig(cloudConfig);\n    return fillSolrSection(configBuilder, entries);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrXmlConfig#fromConfig(Config).mjava","pathOld":"/dev/null","sourceNew":"  public static NodeConfig fromConfig(Config config) {\n\n    checkForIllegalConfig(config);\n\n    config.substituteProperties();\n\n    CloudConfig cloudConfig = null;\n    UpdateShardHandlerConfig deprecatedUpdateConfig = null;\n\n    if (config.getNodeList(\"solr/solrcloud\", false).getLength() > 0) {\n      NamedList<Object> cloudSection = readNodeListAsNamedList(config, \"solr/solrcloud/*[@name]\", \"<solrcloud>\");\n      deprecatedUpdateConfig = loadUpdateConfig(cloudSection, false);\n      cloudConfig = fillSolrCloudSection(cloudSection);\n    }\n\n    NamedList<Object> entries = readNodeListAsNamedList(config, \"solr/*[@name]\", \"<solr>\");\n    String nodeName = (String) entries.remove(\"nodeName\");\n    if (Strings.isNullOrEmpty(nodeName) && cloudConfig != null)\n      nodeName = cloudConfig.getHost();\n\n    UpdateShardHandlerConfig updateConfig;\n    if (deprecatedUpdateConfig == null) {\n      updateConfig = loadUpdateConfig(readNodeListAsNamedList(config, \"solr/updateshardhandler/*[@name]\", \"<updateshardhandler>\"), true);\n    }\n    else {\n      updateConfig = loadUpdateConfig(readNodeListAsNamedList(config, \"solr/updateshardhandler/*[@name]\", \"<updateshardhandler>\"), false);\n      if (updateConfig != null) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"UpdateShardHandler configuration defined twice in solr.xml\");\n      }\n      updateConfig = deprecatedUpdateConfig;\n    }\n\n    NodeConfig.NodeConfigBuilder configBuilder = new NodeConfig.NodeConfigBuilder(nodeName, config.getResourceLoader());\n    configBuilder.setUpdateShardHandlerConfig(updateConfig);\n    configBuilder.setShardHandlerFactoryConfig(getShardHandlerFactoryPluginInfo(config));\n    configBuilder.setLogWatcherConfig(loadLogWatcherConfig(config, \"solr/logging/*[@name]\", \"solr/logging/watcher/*[@name]\"));\n    configBuilder.setSolrProperties(loadProperties(config));\n    if (cloudConfig != null)\n      configBuilder.setCloudConfig(cloudConfig);\n    return fillSolrSection(configBuilder, entries);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a51ab9b1f1b896f06b7ba61672f0fca2a4fce43b","date":1466705968,"type":3,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrXmlConfig#fromConfig(Config).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrXmlConfig#fromConfig(Config).mjava","sourceNew":"  public static NodeConfig fromConfig(Config config) {\n\n    checkForIllegalConfig(config);\n\n    config.substituteProperties();\n\n    CloudConfig cloudConfig = null;\n    UpdateShardHandlerConfig deprecatedUpdateConfig = null;\n\n    if (config.getNodeList(\"solr/solrcloud\", false).getLength() > 0) {\n      NamedList<Object> cloudSection = readNodeListAsNamedList(config, \"solr/solrcloud/*[@name]\", \"<solrcloud>\");\n      deprecatedUpdateConfig = loadUpdateConfig(cloudSection, false);\n      cloudConfig = fillSolrCloudSection(cloudSection);\n    }\n\n    NamedList<Object> entries = readNodeListAsNamedList(config, \"solr/*[@name]\", \"<solr>\");\n    String nodeName = (String) entries.remove(\"nodeName\");\n    if (Strings.isNullOrEmpty(nodeName) && cloudConfig != null)\n      nodeName = cloudConfig.getHost();\n\n    UpdateShardHandlerConfig updateConfig;\n    if (deprecatedUpdateConfig == null) {\n      updateConfig = loadUpdateConfig(readNodeListAsNamedList(config, \"solr/updateshardhandler/*[@name]\", \"<updateshardhandler>\"), true);\n    }\n    else {\n      updateConfig = loadUpdateConfig(readNodeListAsNamedList(config, \"solr/updateshardhandler/*[@name]\", \"<updateshardhandler>\"), false);\n      if (updateConfig != null) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"UpdateShardHandler configuration defined twice in solr.xml\");\n      }\n      updateConfig = deprecatedUpdateConfig;\n    }\n\n    NodeConfig.NodeConfigBuilder configBuilder = new NodeConfig.NodeConfigBuilder(nodeName, config.getResourceLoader());\n    configBuilder.setUpdateShardHandlerConfig(updateConfig);\n    configBuilder.setShardHandlerFactoryConfig(getShardHandlerFactoryPluginInfo(config));\n    configBuilder.setLogWatcherConfig(loadLogWatcherConfig(config, \"solr/logging/*[@name]\", \"solr/logging/watcher/*[@name]\"));\n    configBuilder.setSolrProperties(loadProperties(config));\n    if (cloudConfig != null)\n      configBuilder.setCloudConfig(cloudConfig);\n    configBuilder.setBackupRepositoryPlugins((getBackupRepositoryPluginInfos(config)));\n    return fillSolrSection(configBuilder, entries);\n  }\n\n","sourceOld":"  public static NodeConfig fromConfig(Config config) {\n\n    checkForIllegalConfig(config);\n\n    config.substituteProperties();\n\n    CloudConfig cloudConfig = null;\n    UpdateShardHandlerConfig deprecatedUpdateConfig = null;\n\n    if (config.getNodeList(\"solr/solrcloud\", false).getLength() > 0) {\n      NamedList<Object> cloudSection = readNodeListAsNamedList(config, \"solr/solrcloud/*[@name]\", \"<solrcloud>\");\n      deprecatedUpdateConfig = loadUpdateConfig(cloudSection, false);\n      cloudConfig = fillSolrCloudSection(cloudSection);\n    }\n\n    NamedList<Object> entries = readNodeListAsNamedList(config, \"solr/*[@name]\", \"<solr>\");\n    String nodeName = (String) entries.remove(\"nodeName\");\n    if (Strings.isNullOrEmpty(nodeName) && cloudConfig != null)\n      nodeName = cloudConfig.getHost();\n\n    UpdateShardHandlerConfig updateConfig;\n    if (deprecatedUpdateConfig == null) {\n      updateConfig = loadUpdateConfig(readNodeListAsNamedList(config, \"solr/updateshardhandler/*[@name]\", \"<updateshardhandler>\"), true);\n    }\n    else {\n      updateConfig = loadUpdateConfig(readNodeListAsNamedList(config, \"solr/updateshardhandler/*[@name]\", \"<updateshardhandler>\"), false);\n      if (updateConfig != null) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"UpdateShardHandler configuration defined twice in solr.xml\");\n      }\n      updateConfig = deprecatedUpdateConfig;\n    }\n\n    NodeConfig.NodeConfigBuilder configBuilder = new NodeConfig.NodeConfigBuilder(nodeName, config.getResourceLoader());\n    configBuilder.setUpdateShardHandlerConfig(updateConfig);\n    configBuilder.setShardHandlerFactoryConfig(getShardHandlerFactoryPluginInfo(config));\n    configBuilder.setLogWatcherConfig(loadLogWatcherConfig(config, \"solr/logging/*[@name]\", \"solr/logging/watcher/*[@name]\"));\n    configBuilder.setSolrProperties(loadProperties(config));\n    if (cloudConfig != null)\n      configBuilder.setCloudConfig(cloudConfig);\n    return fillSolrSection(configBuilder, entries);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrXmlConfig#fromConfig(Config).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrXmlConfig#fromConfig(Config).mjava","sourceNew":"  public static NodeConfig fromConfig(Config config) {\n\n    checkForIllegalConfig(config);\n\n    config.substituteProperties();\n\n    CloudConfig cloudConfig = null;\n    UpdateShardHandlerConfig deprecatedUpdateConfig = null;\n\n    if (config.getNodeList(\"solr/solrcloud\", false).getLength() > 0) {\n      NamedList<Object> cloudSection = readNodeListAsNamedList(config, \"solr/solrcloud/*[@name]\", \"<solrcloud>\");\n      deprecatedUpdateConfig = loadUpdateConfig(cloudSection, false);\n      cloudConfig = fillSolrCloudSection(cloudSection);\n    }\n\n    NamedList<Object> entries = readNodeListAsNamedList(config, \"solr/*[@name]\", \"<solr>\");\n    String nodeName = (String) entries.remove(\"nodeName\");\n    if (Strings.isNullOrEmpty(nodeName) && cloudConfig != null)\n      nodeName = cloudConfig.getHost();\n\n    UpdateShardHandlerConfig updateConfig;\n    if (deprecatedUpdateConfig == null) {\n      updateConfig = loadUpdateConfig(readNodeListAsNamedList(config, \"solr/updateshardhandler/*[@name]\", \"<updateshardhandler>\"), true);\n    }\n    else {\n      updateConfig = loadUpdateConfig(readNodeListAsNamedList(config, \"solr/updateshardhandler/*[@name]\", \"<updateshardhandler>\"), false);\n      if (updateConfig != null) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"UpdateShardHandler configuration defined twice in solr.xml\");\n      }\n      updateConfig = deprecatedUpdateConfig;\n    }\n\n    NodeConfig.NodeConfigBuilder configBuilder = new NodeConfig.NodeConfigBuilder(nodeName, config.getResourceLoader());\n    configBuilder.setUpdateShardHandlerConfig(updateConfig);\n    configBuilder.setShardHandlerFactoryConfig(getShardHandlerFactoryPluginInfo(config));\n    configBuilder.setLogWatcherConfig(loadLogWatcherConfig(config, \"solr/logging/*[@name]\", \"solr/logging/watcher/*[@name]\"));\n    configBuilder.setSolrProperties(loadProperties(config));\n    if (cloudConfig != null)\n      configBuilder.setCloudConfig(cloudConfig);\n    configBuilder.setBackupRepositoryPlugins((getBackupRepositoryPluginInfos(config)));\n    return fillSolrSection(configBuilder, entries);\n  }\n\n","sourceOld":"  public static NodeConfig fromConfig(Config config) {\n\n    checkForIllegalConfig(config);\n\n    config.substituteProperties();\n\n    CloudConfig cloudConfig = null;\n    UpdateShardHandlerConfig deprecatedUpdateConfig = null;\n\n    if (config.getNodeList(\"solr/solrcloud\", false).getLength() > 0) {\n      NamedList<Object> cloudSection = readNodeListAsNamedList(config, \"solr/solrcloud/*[@name]\", \"<solrcloud>\");\n      deprecatedUpdateConfig = loadUpdateConfig(cloudSection, false);\n      cloudConfig = fillSolrCloudSection(cloudSection);\n    }\n\n    NamedList<Object> entries = readNodeListAsNamedList(config, \"solr/*[@name]\", \"<solr>\");\n    String nodeName = (String) entries.remove(\"nodeName\");\n    if (Strings.isNullOrEmpty(nodeName) && cloudConfig != null)\n      nodeName = cloudConfig.getHost();\n\n    UpdateShardHandlerConfig updateConfig;\n    if (deprecatedUpdateConfig == null) {\n      updateConfig = loadUpdateConfig(readNodeListAsNamedList(config, \"solr/updateshardhandler/*[@name]\", \"<updateshardhandler>\"), true);\n    }\n    else {\n      updateConfig = loadUpdateConfig(readNodeListAsNamedList(config, \"solr/updateshardhandler/*[@name]\", \"<updateshardhandler>\"), false);\n      if (updateConfig != null) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"UpdateShardHandler configuration defined twice in solr.xml\");\n      }\n      updateConfig = deprecatedUpdateConfig;\n    }\n\n    NodeConfig.NodeConfigBuilder configBuilder = new NodeConfig.NodeConfigBuilder(nodeName, config.getResourceLoader());\n    configBuilder.setUpdateShardHandlerConfig(updateConfig);\n    configBuilder.setShardHandlerFactoryConfig(getShardHandlerFactoryPluginInfo(config));\n    configBuilder.setLogWatcherConfig(loadLogWatcherConfig(config, \"solr/logging/*[@name]\", \"solr/logging/watcher/*[@name]\"));\n    configBuilder.setSolrProperties(loadProperties(config));\n    if (cloudConfig != null)\n      configBuilder.setCloudConfig(cloudConfig);\n    return fillSolrSection(configBuilder, entries);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0265144286422ad99682a00904cc2536b79c8535","date":1482222684,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrXmlConfig#fromConfig(Config).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrXmlConfig#fromConfig(Config).mjava","sourceNew":"  public static NodeConfig fromConfig(Config config) {\n\n    checkForIllegalConfig(config);\n\n    config.substituteProperties();\n\n    CloudConfig cloudConfig = null;\n    UpdateShardHandlerConfig deprecatedUpdateConfig = null;\n\n    if (config.getNodeList(\"solr/solrcloud\", false).getLength() > 0) {\n      NamedList<Object> cloudSection = readNodeListAsNamedList(config, \"solr/solrcloud/*[@name]\", \"<solrcloud>\");\n      deprecatedUpdateConfig = loadUpdateConfig(cloudSection, false);\n      cloudConfig = fillSolrCloudSection(cloudSection);\n    }\n\n    NamedList<Object> entries = readNodeListAsNamedList(config, \"solr/*[@name]\", \"<solr>\");\n    String nodeName = (String) entries.remove(\"nodeName\");\n    if (Strings.isNullOrEmpty(nodeName) && cloudConfig != null)\n      nodeName = cloudConfig.getHost();\n\n    UpdateShardHandlerConfig updateConfig;\n    if (deprecatedUpdateConfig == null) {\n      updateConfig = loadUpdateConfig(readNodeListAsNamedList(config, \"solr/updateshardhandler/*[@name]\", \"<updateshardhandler>\"), true);\n    }\n    else {\n      updateConfig = loadUpdateConfig(readNodeListAsNamedList(config, \"solr/updateshardhandler/*[@name]\", \"<updateshardhandler>\"), false);\n      if (updateConfig != null) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"UpdateShardHandler configuration defined twice in solr.xml\");\n      }\n      updateConfig = deprecatedUpdateConfig;\n    }\n\n    NodeConfig.NodeConfigBuilder configBuilder = new NodeConfig.NodeConfigBuilder(nodeName, config.getResourceLoader());\n    configBuilder.setUpdateShardHandlerConfig(updateConfig);\n    configBuilder.setShardHandlerFactoryConfig(getShardHandlerFactoryPluginInfo(config));\n    configBuilder.setLogWatcherConfig(loadLogWatcherConfig(config, \"solr/logging/*[@name]\", \"solr/logging/watcher/*[@name]\"));\n    configBuilder.setSolrProperties(loadProperties(config));\n    if (cloudConfig != null)\n      configBuilder.setCloudConfig(cloudConfig);\n    configBuilder.setBackupRepositoryPlugins(getBackupRepositoryPluginInfos(config));\n    configBuilder.setMetricReporterPlugins(getMetricReporterPluginInfos(config));\n    return fillSolrSection(configBuilder, entries);\n  }\n\n","sourceOld":"  public static NodeConfig fromConfig(Config config) {\n\n    checkForIllegalConfig(config);\n\n    config.substituteProperties();\n\n    CloudConfig cloudConfig = null;\n    UpdateShardHandlerConfig deprecatedUpdateConfig = null;\n\n    if (config.getNodeList(\"solr/solrcloud\", false).getLength() > 0) {\n      NamedList<Object> cloudSection = readNodeListAsNamedList(config, \"solr/solrcloud/*[@name]\", \"<solrcloud>\");\n      deprecatedUpdateConfig = loadUpdateConfig(cloudSection, false);\n      cloudConfig = fillSolrCloudSection(cloudSection);\n    }\n\n    NamedList<Object> entries = readNodeListAsNamedList(config, \"solr/*[@name]\", \"<solr>\");\n    String nodeName = (String) entries.remove(\"nodeName\");\n    if (Strings.isNullOrEmpty(nodeName) && cloudConfig != null)\n      nodeName = cloudConfig.getHost();\n\n    UpdateShardHandlerConfig updateConfig;\n    if (deprecatedUpdateConfig == null) {\n      updateConfig = loadUpdateConfig(readNodeListAsNamedList(config, \"solr/updateshardhandler/*[@name]\", \"<updateshardhandler>\"), true);\n    }\n    else {\n      updateConfig = loadUpdateConfig(readNodeListAsNamedList(config, \"solr/updateshardhandler/*[@name]\", \"<updateshardhandler>\"), false);\n      if (updateConfig != null) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"UpdateShardHandler configuration defined twice in solr.xml\");\n      }\n      updateConfig = deprecatedUpdateConfig;\n    }\n\n    NodeConfig.NodeConfigBuilder configBuilder = new NodeConfig.NodeConfigBuilder(nodeName, config.getResourceLoader());\n    configBuilder.setUpdateShardHandlerConfig(updateConfig);\n    configBuilder.setShardHandlerFactoryConfig(getShardHandlerFactoryPluginInfo(config));\n    configBuilder.setLogWatcherConfig(loadLogWatcherConfig(config, \"solr/logging/*[@name]\", \"solr/logging/watcher/*[@name]\"));\n    configBuilder.setSolrProperties(loadProperties(config));\n    if (cloudConfig != null)\n      configBuilder.setCloudConfig(cloudConfig);\n    configBuilder.setBackupRepositoryPlugins((getBackupRepositoryPluginInfos(config)));\n    return fillSolrSection(configBuilder, entries);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","date":1482251961,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrXmlConfig#fromConfig(Config).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrXmlConfig#fromConfig(Config).mjava","sourceNew":"  public static NodeConfig fromConfig(Config config) {\n\n    checkForIllegalConfig(config);\n\n    config.substituteProperties();\n\n    CloudConfig cloudConfig = null;\n    UpdateShardHandlerConfig deprecatedUpdateConfig = null;\n\n    if (config.getNodeList(\"solr/solrcloud\", false).getLength() > 0) {\n      NamedList<Object> cloudSection = readNodeListAsNamedList(config, \"solr/solrcloud/*[@name]\", \"<solrcloud>\");\n      deprecatedUpdateConfig = loadUpdateConfig(cloudSection, false);\n      cloudConfig = fillSolrCloudSection(cloudSection);\n    }\n\n    NamedList<Object> entries = readNodeListAsNamedList(config, \"solr/*[@name]\", \"<solr>\");\n    String nodeName = (String) entries.remove(\"nodeName\");\n    if (Strings.isNullOrEmpty(nodeName) && cloudConfig != null)\n      nodeName = cloudConfig.getHost();\n\n    UpdateShardHandlerConfig updateConfig;\n    if (deprecatedUpdateConfig == null) {\n      updateConfig = loadUpdateConfig(readNodeListAsNamedList(config, \"solr/updateshardhandler/*[@name]\", \"<updateshardhandler>\"), true);\n    }\n    else {\n      updateConfig = loadUpdateConfig(readNodeListAsNamedList(config, \"solr/updateshardhandler/*[@name]\", \"<updateshardhandler>\"), false);\n      if (updateConfig != null) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"UpdateShardHandler configuration defined twice in solr.xml\");\n      }\n      updateConfig = deprecatedUpdateConfig;\n    }\n\n    NodeConfig.NodeConfigBuilder configBuilder = new NodeConfig.NodeConfigBuilder(nodeName, config.getResourceLoader());\n    configBuilder.setUpdateShardHandlerConfig(updateConfig);\n    configBuilder.setShardHandlerFactoryConfig(getShardHandlerFactoryPluginInfo(config));\n    configBuilder.setLogWatcherConfig(loadLogWatcherConfig(config, \"solr/logging/*[@name]\", \"solr/logging/watcher/*[@name]\"));\n    configBuilder.setSolrProperties(loadProperties(config));\n    if (cloudConfig != null)\n      configBuilder.setCloudConfig(cloudConfig);\n    configBuilder.setBackupRepositoryPlugins(getBackupRepositoryPluginInfos(config));\n    configBuilder.setMetricReporterPlugins(getMetricReporterPluginInfos(config));\n    return fillSolrSection(configBuilder, entries);\n  }\n\n","sourceOld":"  public static NodeConfig fromConfig(Config config) {\n\n    checkForIllegalConfig(config);\n\n    config.substituteProperties();\n\n    CloudConfig cloudConfig = null;\n    UpdateShardHandlerConfig deprecatedUpdateConfig = null;\n\n    if (config.getNodeList(\"solr/solrcloud\", false).getLength() > 0) {\n      NamedList<Object> cloudSection = readNodeListAsNamedList(config, \"solr/solrcloud/*[@name]\", \"<solrcloud>\");\n      deprecatedUpdateConfig = loadUpdateConfig(cloudSection, false);\n      cloudConfig = fillSolrCloudSection(cloudSection);\n    }\n\n    NamedList<Object> entries = readNodeListAsNamedList(config, \"solr/*[@name]\", \"<solr>\");\n    String nodeName = (String) entries.remove(\"nodeName\");\n    if (Strings.isNullOrEmpty(nodeName) && cloudConfig != null)\n      nodeName = cloudConfig.getHost();\n\n    UpdateShardHandlerConfig updateConfig;\n    if (deprecatedUpdateConfig == null) {\n      updateConfig = loadUpdateConfig(readNodeListAsNamedList(config, \"solr/updateshardhandler/*[@name]\", \"<updateshardhandler>\"), true);\n    }\n    else {\n      updateConfig = loadUpdateConfig(readNodeListAsNamedList(config, \"solr/updateshardhandler/*[@name]\", \"<updateshardhandler>\"), false);\n      if (updateConfig != null) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"UpdateShardHandler configuration defined twice in solr.xml\");\n      }\n      updateConfig = deprecatedUpdateConfig;\n    }\n\n    NodeConfig.NodeConfigBuilder configBuilder = new NodeConfig.NodeConfigBuilder(nodeName, config.getResourceLoader());\n    configBuilder.setUpdateShardHandlerConfig(updateConfig);\n    configBuilder.setShardHandlerFactoryConfig(getShardHandlerFactoryPluginInfo(config));\n    configBuilder.setLogWatcherConfig(loadLogWatcherConfig(config, \"solr/logging/*[@name]\", \"solr/logging/watcher/*[@name]\"));\n    configBuilder.setSolrProperties(loadProperties(config));\n    if (cloudConfig != null)\n      configBuilder.setCloudConfig(cloudConfig);\n    configBuilder.setBackupRepositoryPlugins((getBackupRepositoryPluginInfos(config)));\n    return fillSolrSection(configBuilder, entries);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9435d55e3ea95c5d94406d3affc36f9505b6a736","date":1491251232,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrXmlConfig#fromConfig(Config).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrXmlConfig#fromConfig(Config).mjava","sourceNew":"  public static NodeConfig fromConfig(Config config) {\n\n    checkForIllegalConfig(config);\n\n    config.substituteProperties();\n\n    CloudConfig cloudConfig = null;\n    UpdateShardHandlerConfig deprecatedUpdateConfig = null;\n\n    if (config.getNodeList(\"solr/solrcloud\", false).getLength() > 0) {\n      NamedList<Object> cloudSection = readNodeListAsNamedList(config, \"solr/solrcloud/*[@name]\", \"<solrcloud>\");\n      deprecatedUpdateConfig = loadUpdateConfig(cloudSection, false);\n      cloudConfig = fillSolrCloudSection(cloudSection);\n    }\n\n    NamedList<Object> entries = readNodeListAsNamedList(config, \"solr/*[@name]\", \"<solr>\");\n    String nodeName = (String) entries.remove(\"nodeName\");\n    if (Strings.isNullOrEmpty(nodeName) && cloudConfig != null)\n      nodeName = cloudConfig.getHost();\n\n    UpdateShardHandlerConfig updateConfig;\n    if (deprecatedUpdateConfig == null) {\n      updateConfig = loadUpdateConfig(readNodeListAsNamedList(config, \"solr/updateshardhandler/*[@name]\", \"<updateshardhandler>\"), true);\n    }\n    else {\n      updateConfig = loadUpdateConfig(readNodeListAsNamedList(config, \"solr/updateshardhandler/*[@name]\", \"<updateshardhandler>\"), false);\n      if (updateConfig != null) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"UpdateShardHandler configuration defined twice in solr.xml\");\n      }\n      updateConfig = deprecatedUpdateConfig;\n    }\n\n    NodeConfig.NodeConfigBuilder configBuilder = new NodeConfig.NodeConfigBuilder(nodeName, config.getResourceLoader());\n    configBuilder.setUpdateShardHandlerConfig(updateConfig);\n    configBuilder.setShardHandlerFactoryConfig(getShardHandlerFactoryPluginInfo(config));\n    configBuilder.setSolrCoreCacheFactoryConfig(getTransientCoreCacheFactoryPluginInfo(config));\n    configBuilder.setLogWatcherConfig(loadLogWatcherConfig(config, \"solr/logging/*[@name]\", \"solr/logging/watcher/*[@name]\"));\n    configBuilder.setSolrProperties(loadProperties(config));\n    if (cloudConfig != null)\n      configBuilder.setCloudConfig(cloudConfig);\n    configBuilder.setBackupRepositoryPlugins(getBackupRepositoryPluginInfos(config));\n    configBuilder.setMetricReporterPlugins(getMetricReporterPluginInfos(config));\n    return fillSolrSection(configBuilder, entries);\n  }\n\n","sourceOld":"  public static NodeConfig fromConfig(Config config) {\n\n    checkForIllegalConfig(config);\n\n    config.substituteProperties();\n\n    CloudConfig cloudConfig = null;\n    UpdateShardHandlerConfig deprecatedUpdateConfig = null;\n\n    if (config.getNodeList(\"solr/solrcloud\", false).getLength() > 0) {\n      NamedList<Object> cloudSection = readNodeListAsNamedList(config, \"solr/solrcloud/*[@name]\", \"<solrcloud>\");\n      deprecatedUpdateConfig = loadUpdateConfig(cloudSection, false);\n      cloudConfig = fillSolrCloudSection(cloudSection);\n    }\n\n    NamedList<Object> entries = readNodeListAsNamedList(config, \"solr/*[@name]\", \"<solr>\");\n    String nodeName = (String) entries.remove(\"nodeName\");\n    if (Strings.isNullOrEmpty(nodeName) && cloudConfig != null)\n      nodeName = cloudConfig.getHost();\n\n    UpdateShardHandlerConfig updateConfig;\n    if (deprecatedUpdateConfig == null) {\n      updateConfig = loadUpdateConfig(readNodeListAsNamedList(config, \"solr/updateshardhandler/*[@name]\", \"<updateshardhandler>\"), true);\n    }\n    else {\n      updateConfig = loadUpdateConfig(readNodeListAsNamedList(config, \"solr/updateshardhandler/*[@name]\", \"<updateshardhandler>\"), false);\n      if (updateConfig != null) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"UpdateShardHandler configuration defined twice in solr.xml\");\n      }\n      updateConfig = deprecatedUpdateConfig;\n    }\n\n    NodeConfig.NodeConfigBuilder configBuilder = new NodeConfig.NodeConfigBuilder(nodeName, config.getResourceLoader());\n    configBuilder.setUpdateShardHandlerConfig(updateConfig);\n    configBuilder.setShardHandlerFactoryConfig(getShardHandlerFactoryPluginInfo(config));\n    configBuilder.setLogWatcherConfig(loadLogWatcherConfig(config, \"solr/logging/*[@name]\", \"solr/logging/watcher/*[@name]\"));\n    configBuilder.setSolrProperties(loadProperties(config));\n    if (cloudConfig != null)\n      configBuilder.setCloudConfig(cloudConfig);\n    configBuilder.setBackupRepositoryPlugins(getBackupRepositoryPluginInfos(config));\n    configBuilder.setMetricReporterPlugins(getMetricReporterPluginInfos(config));\n    return fillSolrSection(configBuilder, entries);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b6a4b585aed7660a589375f6a09b90efd29c961","date":1491296430,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrXmlConfig#fromConfig(Config).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrXmlConfig#fromConfig(Config).mjava","sourceNew":"  public static NodeConfig fromConfig(Config config) {\n\n    checkForIllegalConfig(config);\n\n    config.substituteProperties();\n\n    CloudConfig cloudConfig = null;\n    UpdateShardHandlerConfig deprecatedUpdateConfig = null;\n\n    if (config.getNodeList(\"solr/solrcloud\", false).getLength() > 0) {\n      NamedList<Object> cloudSection = readNodeListAsNamedList(config, \"solr/solrcloud/*[@name]\", \"<solrcloud>\");\n      deprecatedUpdateConfig = loadUpdateConfig(cloudSection, false);\n      cloudConfig = fillSolrCloudSection(cloudSection);\n    }\n\n    NamedList<Object> entries = readNodeListAsNamedList(config, \"solr/*[@name]\", \"<solr>\");\n    String nodeName = (String) entries.remove(\"nodeName\");\n    if (Strings.isNullOrEmpty(nodeName) && cloudConfig != null)\n      nodeName = cloudConfig.getHost();\n\n    UpdateShardHandlerConfig updateConfig;\n    if (deprecatedUpdateConfig == null) {\n      updateConfig = loadUpdateConfig(readNodeListAsNamedList(config, \"solr/updateshardhandler/*[@name]\", \"<updateshardhandler>\"), true);\n    }\n    else {\n      updateConfig = loadUpdateConfig(readNodeListAsNamedList(config, \"solr/updateshardhandler/*[@name]\", \"<updateshardhandler>\"), false);\n      if (updateConfig != null) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"UpdateShardHandler configuration defined twice in solr.xml\");\n      }\n      updateConfig = deprecatedUpdateConfig;\n    }\n\n    NodeConfig.NodeConfigBuilder configBuilder = new NodeConfig.NodeConfigBuilder(nodeName, config.getResourceLoader());\n    configBuilder.setUpdateShardHandlerConfig(updateConfig);\n    configBuilder.setShardHandlerFactoryConfig(getShardHandlerFactoryPluginInfo(config));\n    configBuilder.setSolrCoreCacheFactoryConfig(getTransientCoreCacheFactoryPluginInfo(config));\n    configBuilder.setLogWatcherConfig(loadLogWatcherConfig(config, \"solr/logging/*[@name]\", \"solr/logging/watcher/*[@name]\"));\n    configBuilder.setSolrProperties(loadProperties(config));\n    if (cloudConfig != null)\n      configBuilder.setCloudConfig(cloudConfig);\n    configBuilder.setBackupRepositoryPlugins(getBackupRepositoryPluginInfos(config));\n    configBuilder.setMetricReporterPlugins(getMetricReporterPluginInfos(config));\n    return fillSolrSection(configBuilder, entries);\n  }\n\n","sourceOld":"  public static NodeConfig fromConfig(Config config) {\n\n    checkForIllegalConfig(config);\n\n    config.substituteProperties();\n\n    CloudConfig cloudConfig = null;\n    UpdateShardHandlerConfig deprecatedUpdateConfig = null;\n\n    if (config.getNodeList(\"solr/solrcloud\", false).getLength() > 0) {\n      NamedList<Object> cloudSection = readNodeListAsNamedList(config, \"solr/solrcloud/*[@name]\", \"<solrcloud>\");\n      deprecatedUpdateConfig = loadUpdateConfig(cloudSection, false);\n      cloudConfig = fillSolrCloudSection(cloudSection);\n    }\n\n    NamedList<Object> entries = readNodeListAsNamedList(config, \"solr/*[@name]\", \"<solr>\");\n    String nodeName = (String) entries.remove(\"nodeName\");\n    if (Strings.isNullOrEmpty(nodeName) && cloudConfig != null)\n      nodeName = cloudConfig.getHost();\n\n    UpdateShardHandlerConfig updateConfig;\n    if (deprecatedUpdateConfig == null) {\n      updateConfig = loadUpdateConfig(readNodeListAsNamedList(config, \"solr/updateshardhandler/*[@name]\", \"<updateshardhandler>\"), true);\n    }\n    else {\n      updateConfig = loadUpdateConfig(readNodeListAsNamedList(config, \"solr/updateshardhandler/*[@name]\", \"<updateshardhandler>\"), false);\n      if (updateConfig != null) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"UpdateShardHandler configuration defined twice in solr.xml\");\n      }\n      updateConfig = deprecatedUpdateConfig;\n    }\n\n    NodeConfig.NodeConfigBuilder configBuilder = new NodeConfig.NodeConfigBuilder(nodeName, config.getResourceLoader());\n    configBuilder.setUpdateShardHandlerConfig(updateConfig);\n    configBuilder.setShardHandlerFactoryConfig(getShardHandlerFactoryPluginInfo(config));\n    configBuilder.setLogWatcherConfig(loadLogWatcherConfig(config, \"solr/logging/*[@name]\", \"solr/logging/watcher/*[@name]\"));\n    configBuilder.setSolrProperties(loadProperties(config));\n    if (cloudConfig != null)\n      configBuilder.setCloudConfig(cloudConfig);\n    configBuilder.setBackupRepositoryPlugins(getBackupRepositoryPluginInfos(config));\n    configBuilder.setMetricReporterPlugins(getMetricReporterPluginInfos(config));\n    return fillSolrSection(configBuilder, entries);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d6879a535f14bc53be7c86de58142558c4f9eee","date":1492512399,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrXmlConfig#fromConfig(Config).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrXmlConfig#fromConfig(Config).mjava","sourceNew":"  public static NodeConfig fromConfig(Config config) {\n\n    checkForIllegalConfig(config);\n\n    config.substituteProperties();\n\n    CloudConfig cloudConfig = null;\n    UpdateShardHandlerConfig deprecatedUpdateConfig = null;\n\n    if (config.getNodeList(\"solr/solrcloud\", false).getLength() > 0) {\n      NamedList<Object> cloudSection = readNodeListAsNamedList(config, \"solr/solrcloud/*[@name]\", \"<solrcloud>\");\n      deprecatedUpdateConfig = loadUpdateConfig(cloudSection, false);\n      cloudConfig = fillSolrCloudSection(cloudSection);\n    }\n\n    NamedList<Object> entries = readNodeListAsNamedList(config, \"solr/*[@name]\", \"<solr>\");\n    String nodeName = (String) entries.remove(\"nodeName\");\n    if (Strings.isNullOrEmpty(nodeName) && cloudConfig != null)\n      nodeName = cloudConfig.getHost();\n\n    UpdateShardHandlerConfig updateConfig;\n    if (deprecatedUpdateConfig == null) {\n      updateConfig = loadUpdateConfig(readNodeListAsNamedList(config, \"solr/updateshardhandler/*[@name]\", \"<updateshardhandler>\"), true);\n    }\n    else {\n      updateConfig = loadUpdateConfig(readNodeListAsNamedList(config, \"solr/updateshardhandler/*[@name]\", \"<updateshardhandler>\"), false);\n      if (updateConfig != null) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"UpdateShardHandler configuration defined twice in solr.xml\");\n      }\n      updateConfig = deprecatedUpdateConfig;\n    }\n\n    NodeConfig.NodeConfigBuilder configBuilder = new NodeConfig.NodeConfigBuilder(nodeName, config.getResourceLoader());\n    configBuilder.setUpdateShardHandlerConfig(updateConfig);\n    configBuilder.setShardHandlerFactoryConfig(getShardHandlerFactoryPluginInfo(config));\n    configBuilder.setSolrCoreCacheFactoryConfig(getTransientCoreCacheFactoryPluginInfo(config));\n    configBuilder.setLogWatcherConfig(loadLogWatcherConfig(config, \"solr/logging/*[@name]\", \"solr/logging/watcher/*[@name]\"));\n    configBuilder.setSolrProperties(loadProperties(config));\n    if (cloudConfig != null)\n      configBuilder.setCloudConfig(cloudConfig);\n    configBuilder.setBackupRepositoryPlugins(getBackupRepositoryPluginInfos(config));\n    configBuilder.setMetricReporterPlugins(getMetricReporterPluginInfos(config));\n    configBuilder.setHiddenSysProps(getHiddenSysProps(config));\n    return fillSolrSection(configBuilder, entries);\n  }\n\n","sourceOld":"  public static NodeConfig fromConfig(Config config) {\n\n    checkForIllegalConfig(config);\n\n    config.substituteProperties();\n\n    CloudConfig cloudConfig = null;\n    UpdateShardHandlerConfig deprecatedUpdateConfig = null;\n\n    if (config.getNodeList(\"solr/solrcloud\", false).getLength() > 0) {\n      NamedList<Object> cloudSection = readNodeListAsNamedList(config, \"solr/solrcloud/*[@name]\", \"<solrcloud>\");\n      deprecatedUpdateConfig = loadUpdateConfig(cloudSection, false);\n      cloudConfig = fillSolrCloudSection(cloudSection);\n    }\n\n    NamedList<Object> entries = readNodeListAsNamedList(config, \"solr/*[@name]\", \"<solr>\");\n    String nodeName = (String) entries.remove(\"nodeName\");\n    if (Strings.isNullOrEmpty(nodeName) && cloudConfig != null)\n      nodeName = cloudConfig.getHost();\n\n    UpdateShardHandlerConfig updateConfig;\n    if (deprecatedUpdateConfig == null) {\n      updateConfig = loadUpdateConfig(readNodeListAsNamedList(config, \"solr/updateshardhandler/*[@name]\", \"<updateshardhandler>\"), true);\n    }\n    else {\n      updateConfig = loadUpdateConfig(readNodeListAsNamedList(config, \"solr/updateshardhandler/*[@name]\", \"<updateshardhandler>\"), false);\n      if (updateConfig != null) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"UpdateShardHandler configuration defined twice in solr.xml\");\n      }\n      updateConfig = deprecatedUpdateConfig;\n    }\n\n    NodeConfig.NodeConfigBuilder configBuilder = new NodeConfig.NodeConfigBuilder(nodeName, config.getResourceLoader());\n    configBuilder.setUpdateShardHandlerConfig(updateConfig);\n    configBuilder.setShardHandlerFactoryConfig(getShardHandlerFactoryPluginInfo(config));\n    configBuilder.setSolrCoreCacheFactoryConfig(getTransientCoreCacheFactoryPluginInfo(config));\n    configBuilder.setLogWatcherConfig(loadLogWatcherConfig(config, \"solr/logging/*[@name]\", \"solr/logging/watcher/*[@name]\"));\n    configBuilder.setSolrProperties(loadProperties(config));\n    if (cloudConfig != null)\n      configBuilder.setCloudConfig(cloudConfig);\n    configBuilder.setBackupRepositoryPlugins(getBackupRepositoryPluginInfos(config));\n    configBuilder.setMetricReporterPlugins(getMetricReporterPluginInfos(config));\n    return fillSolrSection(configBuilder, entries);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrXmlConfig#fromConfig(Config).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrXmlConfig#fromConfig(Config).mjava","sourceNew":"  public static NodeConfig fromConfig(Config config) {\n\n    checkForIllegalConfig(config);\n\n    config.substituteProperties();\n\n    CloudConfig cloudConfig = null;\n    UpdateShardHandlerConfig deprecatedUpdateConfig = null;\n\n    if (config.getNodeList(\"solr/solrcloud\", false).getLength() > 0) {\n      NamedList<Object> cloudSection = readNodeListAsNamedList(config, \"solr/solrcloud/*[@name]\", \"<solrcloud>\");\n      deprecatedUpdateConfig = loadUpdateConfig(cloudSection, false);\n      cloudConfig = fillSolrCloudSection(cloudSection);\n    }\n\n    NamedList<Object> entries = readNodeListAsNamedList(config, \"solr/*[@name]\", \"<solr>\");\n    String nodeName = (String) entries.remove(\"nodeName\");\n    if (Strings.isNullOrEmpty(nodeName) && cloudConfig != null)\n      nodeName = cloudConfig.getHost();\n\n    UpdateShardHandlerConfig updateConfig;\n    if (deprecatedUpdateConfig == null) {\n      updateConfig = loadUpdateConfig(readNodeListAsNamedList(config, \"solr/updateshardhandler/*[@name]\", \"<updateshardhandler>\"), true);\n    }\n    else {\n      updateConfig = loadUpdateConfig(readNodeListAsNamedList(config, \"solr/updateshardhandler/*[@name]\", \"<updateshardhandler>\"), false);\n      if (updateConfig != null) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"UpdateShardHandler configuration defined twice in solr.xml\");\n      }\n      updateConfig = deprecatedUpdateConfig;\n    }\n\n    NodeConfig.NodeConfigBuilder configBuilder = new NodeConfig.NodeConfigBuilder(nodeName, config.getResourceLoader());\n    configBuilder.setUpdateShardHandlerConfig(updateConfig);\n    configBuilder.setShardHandlerFactoryConfig(getShardHandlerFactoryPluginInfo(config));\n    configBuilder.setSolrCoreCacheFactoryConfig(getTransientCoreCacheFactoryPluginInfo(config));\n    configBuilder.setLogWatcherConfig(loadLogWatcherConfig(config, \"solr/logging/*[@name]\", \"solr/logging/watcher/*[@name]\"));\n    configBuilder.setSolrProperties(loadProperties(config));\n    if (cloudConfig != null)\n      configBuilder.setCloudConfig(cloudConfig);\n    configBuilder.setBackupRepositoryPlugins(getBackupRepositoryPluginInfos(config));\n    configBuilder.setMetricReporterPlugins(getMetricReporterPluginInfos(config));\n    configBuilder.setHiddenSysProps(getHiddenSysProps(config));\n    return fillSolrSection(configBuilder, entries);\n  }\n\n","sourceOld":"  public static NodeConfig fromConfig(Config config) {\n\n    checkForIllegalConfig(config);\n\n    config.substituteProperties();\n\n    CloudConfig cloudConfig = null;\n    UpdateShardHandlerConfig deprecatedUpdateConfig = null;\n\n    if (config.getNodeList(\"solr/solrcloud\", false).getLength() > 0) {\n      NamedList<Object> cloudSection = readNodeListAsNamedList(config, \"solr/solrcloud/*[@name]\", \"<solrcloud>\");\n      deprecatedUpdateConfig = loadUpdateConfig(cloudSection, false);\n      cloudConfig = fillSolrCloudSection(cloudSection);\n    }\n\n    NamedList<Object> entries = readNodeListAsNamedList(config, \"solr/*[@name]\", \"<solr>\");\n    String nodeName = (String) entries.remove(\"nodeName\");\n    if (Strings.isNullOrEmpty(nodeName) && cloudConfig != null)\n      nodeName = cloudConfig.getHost();\n\n    UpdateShardHandlerConfig updateConfig;\n    if (deprecatedUpdateConfig == null) {\n      updateConfig = loadUpdateConfig(readNodeListAsNamedList(config, \"solr/updateshardhandler/*[@name]\", \"<updateshardhandler>\"), true);\n    }\n    else {\n      updateConfig = loadUpdateConfig(readNodeListAsNamedList(config, \"solr/updateshardhandler/*[@name]\", \"<updateshardhandler>\"), false);\n      if (updateConfig != null) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"UpdateShardHandler configuration defined twice in solr.xml\");\n      }\n      updateConfig = deprecatedUpdateConfig;\n    }\n\n    NodeConfig.NodeConfigBuilder configBuilder = new NodeConfig.NodeConfigBuilder(nodeName, config.getResourceLoader());\n    configBuilder.setUpdateShardHandlerConfig(updateConfig);\n    configBuilder.setShardHandlerFactoryConfig(getShardHandlerFactoryPluginInfo(config));\n    configBuilder.setSolrCoreCacheFactoryConfig(getTransientCoreCacheFactoryPluginInfo(config));\n    configBuilder.setLogWatcherConfig(loadLogWatcherConfig(config, \"solr/logging/*[@name]\", \"solr/logging/watcher/*[@name]\"));\n    configBuilder.setSolrProperties(loadProperties(config));\n    if (cloudConfig != null)\n      configBuilder.setCloudConfig(cloudConfig);\n    configBuilder.setBackupRepositoryPlugins(getBackupRepositoryPluginInfos(config));\n    configBuilder.setMetricReporterPlugins(getMetricReporterPluginInfos(config));\n    return fillSolrSection(configBuilder, entries);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"195fcfcffd8f9047ac27ac642ee9da64f4e6c4fa","date":1494330459,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrXmlConfig#fromConfig(Config).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrXmlConfig#fromConfig(Config).mjava","sourceNew":"  public static NodeConfig fromConfig(Config config) {\n\n    checkForIllegalConfig(config);\n\n    config.substituteProperties();\n\n    CloudConfig cloudConfig = null;\n    UpdateShardHandlerConfig deprecatedUpdateConfig = null;\n\n    if (config.getNodeList(\"solr/solrcloud\", false).getLength() > 0) {\n      NamedList<Object> cloudSection = readNodeListAsNamedList(config, \"solr/solrcloud/*[@name]\", \"<solrcloud>\");\n      deprecatedUpdateConfig = loadUpdateConfig(cloudSection, false);\n      cloudConfig = fillSolrCloudSection(cloudSection);\n    }\n\n    NamedList<Object> entries = readNodeListAsNamedList(config, \"solr/*[@name]\", \"<solr>\");\n    String nodeName = (String) entries.remove(\"nodeName\");\n    if (Strings.isNullOrEmpty(nodeName) && cloudConfig != null)\n      nodeName = cloudConfig.getHost();\n\n    UpdateShardHandlerConfig updateConfig;\n    if (deprecatedUpdateConfig == null) {\n      updateConfig = loadUpdateConfig(readNodeListAsNamedList(config, \"solr/updateshardhandler/*[@name]\", \"<updateshardhandler>\"), true);\n    }\n    else {\n      updateConfig = loadUpdateConfig(readNodeListAsNamedList(config, \"solr/updateshardhandler/*[@name]\", \"<updateshardhandler>\"), false);\n      if (updateConfig != null) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"UpdateShardHandler configuration defined twice in solr.xml\");\n      }\n      updateConfig = deprecatedUpdateConfig;\n    }\n\n    NodeConfig.NodeConfigBuilder configBuilder = new NodeConfig.NodeConfigBuilder(nodeName, config.getResourceLoader());\n    configBuilder.setUpdateShardHandlerConfig(updateConfig);\n    configBuilder.setShardHandlerFactoryConfig(getShardHandlerFactoryPluginInfo(config));\n    configBuilder.setSolrCoreCacheFactoryConfig(getTransientCoreCacheFactoryPluginInfo(config));\n    configBuilder.setLogWatcherConfig(loadLogWatcherConfig(config, \"solr/logging/*[@name]\", \"solr/logging/watcher/*[@name]\"));\n    configBuilder.setSolrProperties(loadProperties(config));\n    if (cloudConfig != null)\n      configBuilder.setCloudConfig(cloudConfig);\n    configBuilder.setBackupRepositoryPlugins(getBackupRepositoryPluginInfos(config));\n    configBuilder.setMetricsConfig(getMetricsConfig(config));\n    return fillSolrSection(configBuilder, entries);\n  }\n\n","sourceOld":"  public static NodeConfig fromConfig(Config config) {\n\n    checkForIllegalConfig(config);\n\n    config.substituteProperties();\n\n    CloudConfig cloudConfig = null;\n    UpdateShardHandlerConfig deprecatedUpdateConfig = null;\n\n    if (config.getNodeList(\"solr/solrcloud\", false).getLength() > 0) {\n      NamedList<Object> cloudSection = readNodeListAsNamedList(config, \"solr/solrcloud/*[@name]\", \"<solrcloud>\");\n      deprecatedUpdateConfig = loadUpdateConfig(cloudSection, false);\n      cloudConfig = fillSolrCloudSection(cloudSection);\n    }\n\n    NamedList<Object> entries = readNodeListAsNamedList(config, \"solr/*[@name]\", \"<solr>\");\n    String nodeName = (String) entries.remove(\"nodeName\");\n    if (Strings.isNullOrEmpty(nodeName) && cloudConfig != null)\n      nodeName = cloudConfig.getHost();\n\n    UpdateShardHandlerConfig updateConfig;\n    if (deprecatedUpdateConfig == null) {\n      updateConfig = loadUpdateConfig(readNodeListAsNamedList(config, \"solr/updateshardhandler/*[@name]\", \"<updateshardhandler>\"), true);\n    }\n    else {\n      updateConfig = loadUpdateConfig(readNodeListAsNamedList(config, \"solr/updateshardhandler/*[@name]\", \"<updateshardhandler>\"), false);\n      if (updateConfig != null) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"UpdateShardHandler configuration defined twice in solr.xml\");\n      }\n      updateConfig = deprecatedUpdateConfig;\n    }\n\n    NodeConfig.NodeConfigBuilder configBuilder = new NodeConfig.NodeConfigBuilder(nodeName, config.getResourceLoader());\n    configBuilder.setUpdateShardHandlerConfig(updateConfig);\n    configBuilder.setShardHandlerFactoryConfig(getShardHandlerFactoryPluginInfo(config));\n    configBuilder.setSolrCoreCacheFactoryConfig(getTransientCoreCacheFactoryPluginInfo(config));\n    configBuilder.setLogWatcherConfig(loadLogWatcherConfig(config, \"solr/logging/*[@name]\", \"solr/logging/watcher/*[@name]\"));\n    configBuilder.setSolrProperties(loadProperties(config));\n    if (cloudConfig != null)\n      configBuilder.setCloudConfig(cloudConfig);\n    configBuilder.setBackupRepositoryPlugins(getBackupRepositoryPluginInfos(config));\n    configBuilder.setMetricReporterPlugins(getMetricReporterPluginInfos(config));\n    configBuilder.setHiddenSysProps(getHiddenSysProps(config));\n    return fillSolrSection(configBuilder, entries);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrXmlConfig#fromConfig(Config).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrXmlConfig#fromConfig(Config).mjava","sourceNew":"  public static NodeConfig fromConfig(Config config) {\n\n    checkForIllegalConfig(config);\n\n    config.substituteProperties();\n\n    CloudConfig cloudConfig = null;\n    UpdateShardHandlerConfig deprecatedUpdateConfig = null;\n\n    if (config.getNodeList(\"solr/solrcloud\", false).getLength() > 0) {\n      NamedList<Object> cloudSection = readNodeListAsNamedList(config, \"solr/solrcloud/*[@name]\", \"<solrcloud>\");\n      deprecatedUpdateConfig = loadUpdateConfig(cloudSection, false);\n      cloudConfig = fillSolrCloudSection(cloudSection);\n    }\n\n    NamedList<Object> entries = readNodeListAsNamedList(config, \"solr/*[@name]\", \"<solr>\");\n    String nodeName = (String) entries.remove(\"nodeName\");\n    if (Strings.isNullOrEmpty(nodeName) && cloudConfig != null)\n      nodeName = cloudConfig.getHost();\n\n    UpdateShardHandlerConfig updateConfig;\n    if (deprecatedUpdateConfig == null) {\n      updateConfig = loadUpdateConfig(readNodeListAsNamedList(config, \"solr/updateshardhandler/*[@name]\", \"<updateshardhandler>\"), true);\n    }\n    else {\n      updateConfig = loadUpdateConfig(readNodeListAsNamedList(config, \"solr/updateshardhandler/*[@name]\", \"<updateshardhandler>\"), false);\n      if (updateConfig != null) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"UpdateShardHandler configuration defined twice in solr.xml\");\n      }\n      updateConfig = deprecatedUpdateConfig;\n    }\n\n    NodeConfig.NodeConfigBuilder configBuilder = new NodeConfig.NodeConfigBuilder(nodeName, config.getResourceLoader());\n    configBuilder.setUpdateShardHandlerConfig(updateConfig);\n    configBuilder.setShardHandlerFactoryConfig(getShardHandlerFactoryPluginInfo(config));\n    configBuilder.setSolrCoreCacheFactoryConfig(getTransientCoreCacheFactoryPluginInfo(config));\n    configBuilder.setLogWatcherConfig(loadLogWatcherConfig(config, \"solr/logging/*[@name]\", \"solr/logging/watcher/*[@name]\"));\n    configBuilder.setSolrProperties(loadProperties(config));\n    if (cloudConfig != null)\n      configBuilder.setCloudConfig(cloudConfig);\n    configBuilder.setBackupRepositoryPlugins(getBackupRepositoryPluginInfos(config));\n    configBuilder.setMetricsConfig(getMetricsConfig(config));\n    return fillSolrSection(configBuilder, entries);\n  }\n\n","sourceOld":"  public static NodeConfig fromConfig(Config config) {\n\n    checkForIllegalConfig(config);\n\n    config.substituteProperties();\n\n    CloudConfig cloudConfig = null;\n    UpdateShardHandlerConfig deprecatedUpdateConfig = null;\n\n    if (config.getNodeList(\"solr/solrcloud\", false).getLength() > 0) {\n      NamedList<Object> cloudSection = readNodeListAsNamedList(config, \"solr/solrcloud/*[@name]\", \"<solrcloud>\");\n      deprecatedUpdateConfig = loadUpdateConfig(cloudSection, false);\n      cloudConfig = fillSolrCloudSection(cloudSection);\n    }\n\n    NamedList<Object> entries = readNodeListAsNamedList(config, \"solr/*[@name]\", \"<solr>\");\n    String nodeName = (String) entries.remove(\"nodeName\");\n    if (Strings.isNullOrEmpty(nodeName) && cloudConfig != null)\n      nodeName = cloudConfig.getHost();\n\n    UpdateShardHandlerConfig updateConfig;\n    if (deprecatedUpdateConfig == null) {\n      updateConfig = loadUpdateConfig(readNodeListAsNamedList(config, \"solr/updateshardhandler/*[@name]\", \"<updateshardhandler>\"), true);\n    }\n    else {\n      updateConfig = loadUpdateConfig(readNodeListAsNamedList(config, \"solr/updateshardhandler/*[@name]\", \"<updateshardhandler>\"), false);\n      if (updateConfig != null) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"UpdateShardHandler configuration defined twice in solr.xml\");\n      }\n      updateConfig = deprecatedUpdateConfig;\n    }\n\n    NodeConfig.NodeConfigBuilder configBuilder = new NodeConfig.NodeConfigBuilder(nodeName, config.getResourceLoader());\n    configBuilder.setUpdateShardHandlerConfig(updateConfig);\n    configBuilder.setShardHandlerFactoryConfig(getShardHandlerFactoryPluginInfo(config));\n    configBuilder.setSolrCoreCacheFactoryConfig(getTransientCoreCacheFactoryPluginInfo(config));\n    configBuilder.setLogWatcherConfig(loadLogWatcherConfig(config, \"solr/logging/*[@name]\", \"solr/logging/watcher/*[@name]\"));\n    configBuilder.setSolrProperties(loadProperties(config));\n    if (cloudConfig != null)\n      configBuilder.setCloudConfig(cloudConfig);\n    configBuilder.setBackupRepositoryPlugins(getBackupRepositoryPluginInfos(config));\n    configBuilder.setMetricReporterPlugins(getMetricReporterPluginInfos(config));\n    configBuilder.setHiddenSysProps(getHiddenSysProps(config));\n    return fillSolrSection(configBuilder, entries);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ee622110ba6021d0390037e77574743c1e55348c","date":1546700916,"type":5,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrXmlConfig#fromConfig(XmlConfigFile).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrXmlConfig#fromConfig(Config).mjava","sourceNew":"  public static NodeConfig fromConfig(XmlConfigFile config) {\n\n    checkForIllegalConfig(config);\n\n    config.substituteProperties();\n\n    CloudConfig cloudConfig = null;\n    UpdateShardHandlerConfig deprecatedUpdateConfig = null;\n\n    if (config.getNodeList(\"solr/solrcloud\", false).getLength() > 0) {\n      NamedList<Object> cloudSection = readNodeListAsNamedList(config, \"solr/solrcloud/*[@name]\", \"<solrcloud>\");\n      deprecatedUpdateConfig = loadUpdateConfig(cloudSection, false);\n      cloudConfig = fillSolrCloudSection(cloudSection);\n    }\n\n    NamedList<Object> entries = readNodeListAsNamedList(config, \"solr/*[@name]\", \"<solr>\");\n    String nodeName = (String) entries.remove(\"nodeName\");\n    if (Strings.isNullOrEmpty(nodeName) && cloudConfig != null)\n      nodeName = cloudConfig.getHost();\n\n    UpdateShardHandlerConfig updateConfig;\n    if (deprecatedUpdateConfig == null) {\n      updateConfig = loadUpdateConfig(readNodeListAsNamedList(config, \"solr/updateshardhandler/*[@name]\", \"<updateshardhandler>\"), true);\n    }\n    else {\n      updateConfig = loadUpdateConfig(readNodeListAsNamedList(config, \"solr/updateshardhandler/*[@name]\", \"<updateshardhandler>\"), false);\n      if (updateConfig != null) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"UpdateShardHandler configuration defined twice in solr.xml\");\n      }\n      updateConfig = deprecatedUpdateConfig;\n    }\n\n    NodeConfig.NodeConfigBuilder configBuilder = new NodeConfig.NodeConfigBuilder(nodeName, config.getResourceLoader());\n    configBuilder.setUpdateShardHandlerConfig(updateConfig);\n    configBuilder.setShardHandlerFactoryConfig(getShardHandlerFactoryPluginInfo(config));\n    configBuilder.setSolrCoreCacheFactoryConfig(getTransientCoreCacheFactoryPluginInfo(config));\n    configBuilder.setLogWatcherConfig(loadLogWatcherConfig(config, \"solr/logging/*[@name]\", \"solr/logging/watcher/*[@name]\"));\n    configBuilder.setSolrProperties(loadProperties(config));\n    if (cloudConfig != null)\n      configBuilder.setCloudConfig(cloudConfig);\n    configBuilder.setBackupRepositoryPlugins(getBackupRepositoryPluginInfos(config));\n    configBuilder.setMetricsConfig(getMetricsConfig(config));\n    return fillSolrSection(configBuilder, entries);\n  }\n\n","sourceOld":"  public static NodeConfig fromConfig(Config config) {\n\n    checkForIllegalConfig(config);\n\n    config.substituteProperties();\n\n    CloudConfig cloudConfig = null;\n    UpdateShardHandlerConfig deprecatedUpdateConfig = null;\n\n    if (config.getNodeList(\"solr/solrcloud\", false).getLength() > 0) {\n      NamedList<Object> cloudSection = readNodeListAsNamedList(config, \"solr/solrcloud/*[@name]\", \"<solrcloud>\");\n      deprecatedUpdateConfig = loadUpdateConfig(cloudSection, false);\n      cloudConfig = fillSolrCloudSection(cloudSection);\n    }\n\n    NamedList<Object> entries = readNodeListAsNamedList(config, \"solr/*[@name]\", \"<solr>\");\n    String nodeName = (String) entries.remove(\"nodeName\");\n    if (Strings.isNullOrEmpty(nodeName) && cloudConfig != null)\n      nodeName = cloudConfig.getHost();\n\n    UpdateShardHandlerConfig updateConfig;\n    if (deprecatedUpdateConfig == null) {\n      updateConfig = loadUpdateConfig(readNodeListAsNamedList(config, \"solr/updateshardhandler/*[@name]\", \"<updateshardhandler>\"), true);\n    }\n    else {\n      updateConfig = loadUpdateConfig(readNodeListAsNamedList(config, \"solr/updateshardhandler/*[@name]\", \"<updateshardhandler>\"), false);\n      if (updateConfig != null) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"UpdateShardHandler configuration defined twice in solr.xml\");\n      }\n      updateConfig = deprecatedUpdateConfig;\n    }\n\n    NodeConfig.NodeConfigBuilder configBuilder = new NodeConfig.NodeConfigBuilder(nodeName, config.getResourceLoader());\n    configBuilder.setUpdateShardHandlerConfig(updateConfig);\n    configBuilder.setShardHandlerFactoryConfig(getShardHandlerFactoryPluginInfo(config));\n    configBuilder.setSolrCoreCacheFactoryConfig(getTransientCoreCacheFactoryPluginInfo(config));\n    configBuilder.setLogWatcherConfig(loadLogWatcherConfig(config, \"solr/logging/*[@name]\", \"solr/logging/watcher/*[@name]\"));\n    configBuilder.setSolrProperties(loadProperties(config));\n    if (cloudConfig != null)\n      configBuilder.setCloudConfig(cloudConfig);\n    configBuilder.setBackupRepositoryPlugins(getBackupRepositoryPluginInfos(config));\n    configBuilder.setMetricsConfig(getMetricsConfig(config));\n    return fillSolrSection(configBuilder, entries);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["8b6a4b585aed7660a589375f6a09b90efd29c961"],"ee622110ba6021d0390037e77574743c1e55348c":["195fcfcffd8f9047ac27ac642ee9da64f4e6c4fa"],"9435d55e3ea95c5d94406d3affc36f9505b6a736":["0265144286422ad99682a00904cc2536b79c8535"],"8b6a4b585aed7660a589375f6a09b90efd29c961":["0265144286422ad99682a00904cc2536b79c8535"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["e15199583d3635cb940942caed05132dd6c4c7c6","a51ab9b1f1b896f06b7ba61672f0fca2a4fce43b"],"e15199583d3635cb940942caed05132dd6c4c7c6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","195fcfcffd8f9047ac27ac642ee9da64f4e6c4fa"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e15199583d3635cb940942caed05132dd6c4c7c6"],"0265144286422ad99682a00904cc2536b79c8535":["a51ab9b1f1b896f06b7ba61672f0fca2a4fce43b"],"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","0265144286422ad99682a00904cc2536b79c8535"],"a51ab9b1f1b896f06b7ba61672f0fca2a4fce43b":["e15199583d3635cb940942caed05132dd6c4c7c6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"195fcfcffd8f9047ac27ac642ee9da64f4e6c4fa":["0d6879a535f14bc53be7c86de58142558c4f9eee"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ee622110ba6021d0390037e77574743c1e55348c"],"0d6879a535f14bc53be7c86de58142558c4f9eee":["9435d55e3ea95c5d94406d3affc36f9505b6a736"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["e9017cf144952056066919f1ebc7897ff9bd71b1"],"ee622110ba6021d0390037e77574743c1e55348c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9435d55e3ea95c5d94406d3affc36f9505b6a736":["0d6879a535f14bc53be7c86de58142558c4f9eee"],"8b6a4b585aed7660a589375f6a09b90efd29c961":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf"],"e15199583d3635cb940942caed05132dd6c4c7c6":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","a51ab9b1f1b896f06b7ba61672f0fca2a4fce43b"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"0265144286422ad99682a00904cc2536b79c8535":["9435d55e3ea95c5d94406d3affc36f9505b6a736","8b6a4b585aed7660a589375f6a09b90efd29c961","5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf"],"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf":[],"a51ab9b1f1b896f06b7ba61672f0fca2a4fce43b":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","0265144286422ad99682a00904cc2536b79c8535"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e15199583d3635cb940942caed05132dd6c4c7c6","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"195fcfcffd8f9047ac27ac642ee9da64f4e6c4fa":["ee622110ba6021d0390037e77574743c1e55348c","e9017cf144952056066919f1ebc7897ff9bd71b1"],"0d6879a535f14bc53be7c86de58142558c4f9eee":["195fcfcffd8f9047ac27ac642ee9da64f4e6c4fa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}