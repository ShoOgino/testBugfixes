{"path":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQPHelper#testDateRange().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQPHelper#testDateRange().mjava","pathOld":"contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQPHelper#testDateRange().mjava","sourceNew":"  public void testDateRange() throws Exception {\n    String startDate = getLocalizedDate(2002, 1, 1);\n    String endDate = getLocalizedDate(2002, 1, 4);\n    Calendar endDateExpected = new GregorianCalendar();\n    endDateExpected.clear();\n    endDateExpected.set(2002, 1, 4, 23, 59, 59);\n    endDateExpected.set(Calendar.MILLISECOND, 999);\n    final String defaultField = \"default\";\n    final String monthField = \"month\";\n    final String hourField = \"hour\";\n    StandardQueryParser qp = new StandardQueryParser();\n\n    // Don't set any date resolution and verify if DateField is used\n    assertDateRangeQueryEquals(qp, defaultField, startDate, endDate,\n        endDateExpected.getTime(), null);\n\n    Map<CharSequence, DateTools.Resolution> dateRes =  new HashMap<CharSequence, DateTools.Resolution>();\n    \n    // set a field specific date resolution    \n    dateRes.put(monthField, DateTools.Resolution.MONTH);\n    qp.setDateResolution(dateRes);\n\n    // DateField should still be used for defaultField\n    assertDateRangeQueryEquals(qp, defaultField, startDate, endDate,\n        endDateExpected.getTime(), null);\n\n    // set default date resolution to MILLISECOND\n    qp.setDateResolution(DateTools.Resolution.MILLISECOND);\n\n    // set second field specific date resolution\n    dateRes.put(hourField, DateTools.Resolution.HOUR);\n    qp.setDateResolution(dateRes);\n\n    // for this field no field specific date resolution has been set,\n    // so verify if the default resolution is used\n    assertDateRangeQueryEquals(qp, defaultField, startDate, endDate,\n        endDateExpected.getTime(), DateTools.Resolution.MILLISECOND);\n\n    // verify if field specific date resolutions are used for these two\n    // fields\n    assertDateRangeQueryEquals(qp, monthField, startDate, endDate,\n        endDateExpected.getTime(), DateTools.Resolution.MONTH);\n\n    assertDateRangeQueryEquals(qp, hourField, startDate, endDate,\n        endDateExpected.getTime(), DateTools.Resolution.HOUR);\n  }\n\n","sourceOld":"  public void testDateRange() throws Exception {\n    String startDate = getLocalizedDate(2002, 1, 1);\n    String endDate = getLocalizedDate(2002, 1, 4);\n    Calendar endDateExpected = new GregorianCalendar();\n    endDateExpected.clear();\n    endDateExpected.set(2002, 1, 4, 23, 59, 59);\n    endDateExpected.set(Calendar.MILLISECOND, 999);\n    final String defaultField = \"default\";\n    final String monthField = \"month\";\n    final String hourField = \"hour\";\n    StandardQueryParser qp = new StandardQueryParser();\n\n    // Don't set any date resolution and verify if DateField is used\n    assertDateRangeQueryEquals(qp, defaultField, startDate, endDate,\n        endDateExpected.getTime(), null);\n\n    Map<CharSequence, DateTools.Resolution> dateRes =  new HashMap<CharSequence, DateTools.Resolution>();\n    \n    // set a field specific date resolution    \n    dateRes.put(monthField, DateTools.Resolution.MONTH);\n    qp.setDateResolution(dateRes);\n\n    // DateField should still be used for defaultField\n    assertDateRangeQueryEquals(qp, defaultField, startDate, endDate,\n        endDateExpected.getTime(), null);\n\n    // set default date resolution to MILLISECOND\n    qp.setDateResolution(DateTools.Resolution.MILLISECOND);\n\n    // set second field specific date resolution\n    dateRes.put(hourField, DateTools.Resolution.HOUR);\n    qp.setDateResolution(dateRes);\n\n    // for this field no field specific date resolution has been set,\n    // so verify if the default resolution is used\n    assertDateRangeQueryEquals(qp, defaultField, startDate, endDate,\n        endDateExpected.getTime(), DateTools.Resolution.MILLISECOND);\n\n    // verify if field specific date resolutions are used for these two\n    // fields\n    assertDateRangeQueryEquals(qp, monthField, startDate, endDate,\n        endDateExpected.getTime(), DateTools.Resolution.MONTH);\n\n    assertDateRangeQueryEquals(qp, hourField, startDate, endDate,\n        endDateExpected.getTime(), DateTools.Resolution.HOUR);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e8cc373c801e54cec75daf9f52792cb4b17f536","date":1291116159,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQPHelper#testDateRange().mjava","pathOld":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQPHelper#testDateRange().mjava","sourceNew":"  public void testDateRange() throws Exception {\n    String startDate = getLocalizedDate(2002, 1, 1);\n    String endDate = getLocalizedDate(2002, 1, 4);\n    Calendar endDateExpected = new GregorianCalendar();\n    endDateExpected.clear();\n    endDateExpected.set(2002, 1, 4, 23, 59, 59);\n    endDateExpected.set(Calendar.MILLISECOND, 999);\n    final String defaultField = \"default\";\n    final String monthField = \"month\";\n    final String hourField = \"hour\";\n    StandardQueryParser qp = new StandardQueryParser();\n\n    Map<CharSequence, DateTools.Resolution> dateRes =  new HashMap<CharSequence, DateTools.Resolution>();\n    \n    // set a field specific date resolution    \n    dateRes.put(monthField, DateTools.Resolution.MONTH);\n    qp.setDateResolution(dateRes);\n\n    // set default date resolution to MILLISECOND\n    qp.setDateResolution(DateTools.Resolution.MILLISECOND);\n\n    // set second field specific date resolution\n    dateRes.put(hourField, DateTools.Resolution.HOUR);\n    qp.setDateResolution(dateRes);\n\n    // for this field no field specific date resolution has been set,\n    // so verify if the default resolution is used\n    assertDateRangeQueryEquals(qp, defaultField, startDate, endDate,\n        endDateExpected.getTime(), DateTools.Resolution.MILLISECOND);\n\n    // verify if field specific date resolutions are used for these two\n    // fields\n    assertDateRangeQueryEquals(qp, monthField, startDate, endDate,\n        endDateExpected.getTime(), DateTools.Resolution.MONTH);\n\n    assertDateRangeQueryEquals(qp, hourField, startDate, endDate,\n        endDateExpected.getTime(), DateTools.Resolution.HOUR);\n  }\n\n","sourceOld":"  public void testDateRange() throws Exception {\n    String startDate = getLocalizedDate(2002, 1, 1);\n    String endDate = getLocalizedDate(2002, 1, 4);\n    Calendar endDateExpected = new GregorianCalendar();\n    endDateExpected.clear();\n    endDateExpected.set(2002, 1, 4, 23, 59, 59);\n    endDateExpected.set(Calendar.MILLISECOND, 999);\n    final String defaultField = \"default\";\n    final String monthField = \"month\";\n    final String hourField = \"hour\";\n    StandardQueryParser qp = new StandardQueryParser();\n\n    // Don't set any date resolution and verify if DateField is used\n    assertDateRangeQueryEquals(qp, defaultField, startDate, endDate,\n        endDateExpected.getTime(), null);\n\n    Map<CharSequence, DateTools.Resolution> dateRes =  new HashMap<CharSequence, DateTools.Resolution>();\n    \n    // set a field specific date resolution    \n    dateRes.put(monthField, DateTools.Resolution.MONTH);\n    qp.setDateResolution(dateRes);\n\n    // DateField should still be used for defaultField\n    assertDateRangeQueryEquals(qp, defaultField, startDate, endDate,\n        endDateExpected.getTime(), null);\n\n    // set default date resolution to MILLISECOND\n    qp.setDateResolution(DateTools.Resolution.MILLISECOND);\n\n    // set second field specific date resolution\n    dateRes.put(hourField, DateTools.Resolution.HOUR);\n    qp.setDateResolution(dateRes);\n\n    // for this field no field specific date resolution has been set,\n    // so verify if the default resolution is used\n    assertDateRangeQueryEquals(qp, defaultField, startDate, endDate,\n        endDateExpected.getTime(), DateTools.Resolution.MILLISECOND);\n\n    // verify if field specific date resolutions are used for these two\n    // fields\n    assertDateRangeQueryEquals(qp, monthField, startDate, endDate,\n        endDateExpected.getTime(), DateTools.Resolution.MONTH);\n\n    assertDateRangeQueryEquals(qp, hourField, startDate, endDate,\n        endDateExpected.getTime(), DateTools.Resolution.HOUR);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQPHelper#testDateRange().mjava","pathOld":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQPHelper#testDateRange().mjava","sourceNew":"  public void testDateRange() throws Exception {\n    String startDate = getLocalizedDate(2002, 1, 1);\n    String endDate = getLocalizedDate(2002, 1, 4);\n    Calendar endDateExpected = new GregorianCalendar();\n    endDateExpected.clear();\n    endDateExpected.set(2002, 1, 4, 23, 59, 59);\n    endDateExpected.set(Calendar.MILLISECOND, 999);\n    final String defaultField = \"default\";\n    final String monthField = \"month\";\n    final String hourField = \"hour\";\n    StandardQueryParser qp = new StandardQueryParser();\n\n    Map<CharSequence, DateTools.Resolution> dateRes =  new HashMap<CharSequence, DateTools.Resolution>();\n    \n    // set a field specific date resolution    \n    dateRes.put(monthField, DateTools.Resolution.MONTH);\n    qp.setDateResolution(dateRes);\n\n    // set default date resolution to MILLISECOND\n    qp.setDateResolution(DateTools.Resolution.MILLISECOND);\n\n    // set second field specific date resolution\n    dateRes.put(hourField, DateTools.Resolution.HOUR);\n    qp.setDateResolution(dateRes);\n\n    // for this field no field specific date resolution has been set,\n    // so verify if the default resolution is used\n    assertDateRangeQueryEquals(qp, defaultField, startDate, endDate,\n        endDateExpected.getTime(), DateTools.Resolution.MILLISECOND);\n\n    // verify if field specific date resolutions are used for these two\n    // fields\n    assertDateRangeQueryEquals(qp, monthField, startDate, endDate,\n        endDateExpected.getTime(), DateTools.Resolution.MONTH);\n\n    assertDateRangeQueryEquals(qp, hourField, startDate, endDate,\n        endDateExpected.getTime(), DateTools.Resolution.HOUR);\n  }\n\n","sourceOld":"  public void testDateRange() throws Exception {\n    String startDate = getLocalizedDate(2002, 1, 1);\n    String endDate = getLocalizedDate(2002, 1, 4);\n    Calendar endDateExpected = new GregorianCalendar();\n    endDateExpected.clear();\n    endDateExpected.set(2002, 1, 4, 23, 59, 59);\n    endDateExpected.set(Calendar.MILLISECOND, 999);\n    final String defaultField = \"default\";\n    final String monthField = \"month\";\n    final String hourField = \"hour\";\n    StandardQueryParser qp = new StandardQueryParser();\n\n    // Don't set any date resolution and verify if DateField is used\n    assertDateRangeQueryEquals(qp, defaultField, startDate, endDate,\n        endDateExpected.getTime(), null);\n\n    Map<CharSequence, DateTools.Resolution> dateRes =  new HashMap<CharSequence, DateTools.Resolution>();\n    \n    // set a field specific date resolution    \n    dateRes.put(monthField, DateTools.Resolution.MONTH);\n    qp.setDateResolution(dateRes);\n\n    // DateField should still be used for defaultField\n    assertDateRangeQueryEquals(qp, defaultField, startDate, endDate,\n        endDateExpected.getTime(), null);\n\n    // set default date resolution to MILLISECOND\n    qp.setDateResolution(DateTools.Resolution.MILLISECOND);\n\n    // set second field specific date resolution\n    dateRes.put(hourField, DateTools.Resolution.HOUR);\n    qp.setDateResolution(dateRes);\n\n    // for this field no field specific date resolution has been set,\n    // so verify if the default resolution is used\n    assertDateRangeQueryEquals(qp, defaultField, startDate, endDate,\n        endDateExpected.getTime(), DateTools.Resolution.MILLISECOND);\n\n    // verify if field specific date resolutions are used for these two\n    // fields\n    assertDateRangeQueryEquals(qp, monthField, startDate, endDate,\n        endDateExpected.getTime(), DateTools.Resolution.MONTH);\n\n    assertDateRangeQueryEquals(qp, hourField, startDate, endDate,\n        endDateExpected.getTime(), DateTools.Resolution.HOUR);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQPHelper#testDateRange().mjava","pathOld":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQPHelper#testDateRange().mjava","sourceNew":"  public void testDateRange() throws Exception {\n    String startDate = getLocalizedDate(2002, 1, 1);\n    String endDate = getLocalizedDate(2002, 1, 4);\n    Calendar endDateExpected = new GregorianCalendar();\n    endDateExpected.clear();\n    endDateExpected.set(2002, 1, 4, 23, 59, 59);\n    endDateExpected.set(Calendar.MILLISECOND, 999);\n    final String defaultField = \"default\";\n    final String monthField = \"month\";\n    final String hourField = \"hour\";\n    StandardQueryParser qp = new StandardQueryParser();\n\n    Map<CharSequence, DateTools.Resolution> dateRes =  new HashMap<CharSequence, DateTools.Resolution>();\n    \n    // set a field specific date resolution    \n    dateRes.put(monthField, DateTools.Resolution.MONTH);\n    qp.setDateResolution(dateRes);\n\n    // set default date resolution to MILLISECOND\n    qp.setDateResolution(DateTools.Resolution.MILLISECOND);\n\n    // set second field specific date resolution\n    dateRes.put(hourField, DateTools.Resolution.HOUR);\n    qp.setDateResolution(dateRes);\n\n    // for this field no field specific date resolution has been set,\n    // so verify if the default resolution is used\n    assertDateRangeQueryEquals(qp, defaultField, startDate, endDate,\n        endDateExpected.getTime(), DateTools.Resolution.MILLISECOND);\n\n    // verify if field specific date resolutions are used for these two\n    // fields\n    assertDateRangeQueryEquals(qp, monthField, startDate, endDate,\n        endDateExpected.getTime(), DateTools.Resolution.MONTH);\n\n    assertDateRangeQueryEquals(qp, hourField, startDate, endDate,\n        endDateExpected.getTime(), DateTools.Resolution.HOUR);\n  }\n\n","sourceOld":"  public void testDateRange() throws Exception {\n    String startDate = getLocalizedDate(2002, 1, 1);\n    String endDate = getLocalizedDate(2002, 1, 4);\n    Calendar endDateExpected = new GregorianCalendar();\n    endDateExpected.clear();\n    endDateExpected.set(2002, 1, 4, 23, 59, 59);\n    endDateExpected.set(Calendar.MILLISECOND, 999);\n    final String defaultField = \"default\";\n    final String monthField = \"month\";\n    final String hourField = \"hour\";\n    StandardQueryParser qp = new StandardQueryParser();\n\n    // Don't set any date resolution and verify if DateField is used\n    assertDateRangeQueryEquals(qp, defaultField, startDate, endDate,\n        endDateExpected.getTime(), null);\n\n    Map<CharSequence, DateTools.Resolution> dateRes =  new HashMap<CharSequence, DateTools.Resolution>();\n    \n    // set a field specific date resolution    \n    dateRes.put(monthField, DateTools.Resolution.MONTH);\n    qp.setDateResolution(dateRes);\n\n    // DateField should still be used for defaultField\n    assertDateRangeQueryEquals(qp, defaultField, startDate, endDate,\n        endDateExpected.getTime(), null);\n\n    // set default date resolution to MILLISECOND\n    qp.setDateResolution(DateTools.Resolution.MILLISECOND);\n\n    // set second field specific date resolution\n    dateRes.put(hourField, DateTools.Resolution.HOUR);\n    qp.setDateResolution(dateRes);\n\n    // for this field no field specific date resolution has been set,\n    // so verify if the default resolution is used\n    assertDateRangeQueryEquals(qp, defaultField, startDate, endDate,\n        endDateExpected.getTime(), DateTools.Resolution.MILLISECOND);\n\n    // verify if field specific date resolutions are used for these two\n    // fields\n    assertDateRangeQueryEquals(qp, monthField, startDate, endDate,\n        endDateExpected.getTime(), DateTools.Resolution.MONTH);\n\n    assertDateRangeQueryEquals(qp, hourField, startDate, endDate,\n        endDateExpected.getTime(), DateTools.Resolution.HOUR);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1","date":1310612214,"type":5,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestQPHelper#testDateRange().mjava","pathOld":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQPHelper#testDateRange().mjava","sourceNew":"  public void testDateRange() throws Exception {\n    String startDate = getLocalizedDate(2002, 1, 1);\n    String endDate = getLocalizedDate(2002, 1, 4);\n    Calendar endDateExpected = new GregorianCalendar();\n    endDateExpected.clear();\n    endDateExpected.set(2002, 1, 4, 23, 59, 59);\n    endDateExpected.set(Calendar.MILLISECOND, 999);\n    final String defaultField = \"default\";\n    final String monthField = \"month\";\n    final String hourField = \"hour\";\n    StandardQueryParser qp = new StandardQueryParser();\n\n    Map<CharSequence, DateTools.Resolution> dateRes =  new HashMap<CharSequence, DateTools.Resolution>();\n    \n    // set a field specific date resolution    \n    dateRes.put(monthField, DateTools.Resolution.MONTH);\n    qp.setDateResolution(dateRes);\n\n    // set default date resolution to MILLISECOND\n    qp.setDateResolution(DateTools.Resolution.MILLISECOND);\n\n    // set second field specific date resolution\n    dateRes.put(hourField, DateTools.Resolution.HOUR);\n    qp.setDateResolution(dateRes);\n\n    // for this field no field specific date resolution has been set,\n    // so verify if the default resolution is used\n    assertDateRangeQueryEquals(qp, defaultField, startDate, endDate,\n        endDateExpected.getTime(), DateTools.Resolution.MILLISECOND);\n\n    // verify if field specific date resolutions are used for these two\n    // fields\n    assertDateRangeQueryEquals(qp, monthField, startDate, endDate,\n        endDateExpected.getTime(), DateTools.Resolution.MONTH);\n\n    assertDateRangeQueryEquals(qp, hourField, startDate, endDate,\n        endDateExpected.getTime(), DateTools.Resolution.HOUR);\n  }\n\n","sourceOld":"  public void testDateRange() throws Exception {\n    String startDate = getLocalizedDate(2002, 1, 1);\n    String endDate = getLocalizedDate(2002, 1, 4);\n    Calendar endDateExpected = new GregorianCalendar();\n    endDateExpected.clear();\n    endDateExpected.set(2002, 1, 4, 23, 59, 59);\n    endDateExpected.set(Calendar.MILLISECOND, 999);\n    final String defaultField = \"default\";\n    final String monthField = \"month\";\n    final String hourField = \"hour\";\n    StandardQueryParser qp = new StandardQueryParser();\n\n    Map<CharSequence, DateTools.Resolution> dateRes =  new HashMap<CharSequence, DateTools.Resolution>();\n    \n    // set a field specific date resolution    \n    dateRes.put(monthField, DateTools.Resolution.MONTH);\n    qp.setDateResolution(dateRes);\n\n    // set default date resolution to MILLISECOND\n    qp.setDateResolution(DateTools.Resolution.MILLISECOND);\n\n    // set second field specific date resolution\n    dateRes.put(hourField, DateTools.Resolution.HOUR);\n    qp.setDateResolution(dateRes);\n\n    // for this field no field specific date resolution has been set,\n    // so verify if the default resolution is used\n    assertDateRangeQueryEquals(qp, defaultField, startDate, endDate,\n        endDateExpected.getTime(), DateTools.Resolution.MILLISECOND);\n\n    // verify if field specific date resolutions are used for these two\n    // fields\n    assertDateRangeQueryEquals(qp, monthField, startDate, endDate,\n        endDateExpected.getTime(), DateTools.Resolution.MONTH);\n\n    assertDateRangeQueryEquals(qp, hourField, startDate, endDate,\n        endDateExpected.getTime(), DateTools.Resolution.HOUR);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1":["4e8cc373c801e54cec75daf9f52792cb4b17f536"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["9454a6510e2db155fb01faa5c049b06ece95fab9","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"3bb13258feba31ab676502787ab2e1779f129b7a":["9454a6510e2db155fb01faa5c049b06ece95fab9","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"3bb13258feba31ab676502787ab2e1779f129b7a":[],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}