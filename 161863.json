{"path":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScaling.TriggerFactoryImpl#create(TriggerEventType,String,Map[String,Object]).mjava","commits":[{"id":"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac","date":1503580177,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScaling.TriggerFactoryImpl#create(TriggerEventType,String,Map[String,Object]).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public synchronized Trigger create(TriggerEventType type, String name, Map<String, Object> props) {\n      if (isClosed) {\n        throw new AlreadyClosedException(\"TriggerFactory has already been closed, cannot create new triggers\");\n      }\n      switch (type) {\n        case NODEADDED:\n          return new NodeAddedTrigger(name, props, loader, clusterDataProvider);\n        case NODELOST:\n          return new NodeLostTrigger(name, props, loader, clusterDataProvider);\n        default:\n          throw new IllegalArgumentException(\"Unknown event type: \" + type + \" in trigger: \" + name);\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b869898f50ca80263bac2e3ae0949f7700e5c977","date":1503580229,"type":4,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScaling.TriggerFactoryImpl#create(TriggerEventType,String,Map[String,Object]).mjava","sourceNew":null,"sourceOld":"    @Override\n    public synchronized Trigger create(TriggerEventType type, String name, Map<String, Object> props) {\n      if (isClosed) {\n        throw new AlreadyClosedException(\"TriggerFactory has already been closed, cannot create new triggers\");\n      }\n      switch (type) {\n        case NODEADDED:\n          return new NodeAddedTrigger(name, props, loader, clusterDataProvider);\n        case NODELOST:\n          return new NodeLostTrigger(name, props, loader, clusterDataProvider);\n        default:\n          throw new IllegalArgumentException(\"Unknown event type: \" + type + \" in trigger: \" + name);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85212dad4ed576c7f7e6c165ee19e597b7b4efc8","date":1507997740,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScaling.TriggerFactoryImpl#create(TriggerEventType,String,Map[String,Object]).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public synchronized Trigger create(TriggerEventType type, String name, Map<String, Object> props) {\n      if (isClosed) {\n        throw new AlreadyClosedException(\"TriggerFactory has already been closed, cannot create new triggers\");\n      }\n      switch (type) {\n        case NODEADDED:\n          return new NodeAddedTrigger(name, props, loader, dataProvider);\n        case NODELOST:\n          return new NodeLostTrigger(name, props, loader, dataProvider);\n        default:\n          throw new IllegalArgumentException(\"Unknown event type: \" + type + \" in trigger: \" + name);\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7d7cf463e12b13965d63f133adc46a1c673d0c4e","date":1509636749,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScaling.TriggerFactoryImpl#create(TriggerEventType,String,Map[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScaling.TriggerFactoryImpl#create(TriggerEventType,String,Map[String,Object]).mjava","sourceNew":"    @Override\n    public synchronized Trigger create(TriggerEventType type, String name, Map<String, Object> props) {\n      if (isClosed) {\n        throw new AlreadyClosedException(\"TriggerFactory has already been closed, cannot create new triggers\");\n      }\n      switch (type) {\n        case NODEADDED:\n          return new NodeAddedTrigger(name, props, loader, dataProvider);\n        case NODELOST:\n          return new NodeLostTrigger(name, props, loader, dataProvider);\n        case SEARCHRATE:\n          return new SearchRateTrigger(name, props, loader, dataProvider);\n        default:\n          throw new IllegalArgumentException(\"Unknown event type: \" + type + \" in trigger: \" + name);\n      }\n    }\n\n","sourceOld":"    @Override\n    public synchronized Trigger create(TriggerEventType type, String name, Map<String, Object> props) {\n      if (isClosed) {\n        throw new AlreadyClosedException(\"TriggerFactory has already been closed, cannot create new triggers\");\n      }\n      switch (type) {\n        case NODEADDED:\n          return new NodeAddedTrigger(name, props, loader, dataProvider);\n        case NODELOST:\n          return new NodeLostTrigger(name, props, loader, dataProvider);\n        default:\n          throw new IllegalArgumentException(\"Unknown event type: \" + type + \" in trigger: \" + name);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d523b8189b211dd1630166aa77b8c88bb48b3fcc","date":1510144168,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScaling.TriggerFactoryImpl#create(TriggerEventType,String,Map[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScaling.TriggerFactoryImpl#create(TriggerEventType,String,Map[String,Object]).mjava","sourceNew":"    @Override\n    public synchronized Trigger create(TriggerEventType type, String name, Map<String, Object> props) {\n      if (isClosed) {\n        throw new AlreadyClosedException(\"TriggerFactory has already been closed, cannot create new triggers\");\n      }\n      switch (type) {\n        case NODEADDED:\n          return new NodeAddedTrigger(name, props, loader, dataProvider);\n        case NODELOST:\n          return new NodeLostTrigger(name, props, loader, dataProvider);\n        case SEARCHRATE:\n          return new SearchRateTrigger(name, props, loader, dataProvider);\n        default:\n          throw new IllegalArgumentException(\"Unknown event type: \" + type + \" in trigger: \" + name);\n      }\n    }\n\n","sourceOld":"    @Override\n    public synchronized Trigger create(TriggerEventType type, String name, Map<String, Object> props) {\n      if (isClosed) {\n        throw new AlreadyClosedException(\"TriggerFactory has already been closed, cannot create new triggers\");\n      }\n      switch (type) {\n        case NODEADDED:\n          return new NodeAddedTrigger(name, props, loader, dataProvider);\n        case NODELOST:\n          return new NodeLostTrigger(name, props, loader, dataProvider);\n        default:\n          throw new IllegalArgumentException(\"Unknown event type: \" + type + \" in trigger: \" + name);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","date":1513252583,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScaling.TriggerFactoryImpl#create(TriggerEventType,String,Map[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScaling.TriggerFactoryImpl#create(TriggerEventType,String,Map[String,Object]).mjava","sourceNew":"    @Override\n    public synchronized Trigger create(TriggerEventType type, String name, Map<String, Object> props) {\n      if (isClosed) {\n        throw new AlreadyClosedException(\"TriggerFactory has already been closed, cannot create new triggers\");\n      }\n      switch (type) {\n        case NODEADDED:\n          return new NodeAddedTrigger(name, props, loader, cloudManager);\n        case NODELOST:\n          return new NodeLostTrigger(name, props, loader, cloudManager);\n        case SEARCHRATE:\n          return new SearchRateTrigger(name, props, loader, cloudManager);\n        default:\n          throw new IllegalArgumentException(\"Unknown event type: \" + type + \" in trigger: \" + name);\n      }\n    }\n\n","sourceOld":"    @Override\n    public synchronized Trigger create(TriggerEventType type, String name, Map<String, Object> props) {\n      if (isClosed) {\n        throw new AlreadyClosedException(\"TriggerFactory has already been closed, cannot create new triggers\");\n      }\n      switch (type) {\n        case NODEADDED:\n          return new NodeAddedTrigger(name, props, loader, dataProvider);\n        case NODELOST:\n          return new NodeLostTrigger(name, props, loader, dataProvider);\n        case SEARCHRATE:\n          return new SearchRateTrigger(name, props, loader, dataProvider);\n        default:\n          throw new IllegalArgumentException(\"Unknown event type: \" + type + \" in trigger: \" + name);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"35a328e6f64355319d0b316956c260b0be251aca","date":1513957730,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScaling.TriggerFactoryImpl#create(TriggerEventType,String,Map[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScaling.TriggerFactoryImpl#create(TriggerEventType,String,Map[String,Object]).mjava","sourceNew":"    @Override\n    public synchronized Trigger create(TriggerEventType type, String name, Map<String, Object> props) {\n      if (isClosed) {\n        throw new AlreadyClosedException(\"TriggerFactory has already been closed, cannot create new triggers\");\n      }\n      switch (type) {\n        case NODEADDED:\n          return new NodeAddedTrigger(name, props, loader, cloudManager);\n        case NODELOST:\n          return new NodeLostTrigger(name, props, loader, cloudManager);\n        case SEARCHRATE:\n          return new SearchRateTrigger(name, props, loader, cloudManager);\n        case METRIC:\n          return new MetricTrigger(name, props, loader, cloudManager);\n        default:\n          throw new IllegalArgumentException(\"Unknown event type: \" + type + \" in trigger: \" + name);\n      }\n    }\n\n","sourceOld":"    @Override\n    public synchronized Trigger create(TriggerEventType type, String name, Map<String, Object> props) {\n      if (isClosed) {\n        throw new AlreadyClosedException(\"TriggerFactory has already been closed, cannot create new triggers\");\n      }\n      switch (type) {\n        case NODEADDED:\n          return new NodeAddedTrigger(name, props, loader, cloudManager);\n        case NODELOST:\n          return new NodeLostTrigger(name, props, loader, cloudManager);\n        case SEARCHRATE:\n          return new SearchRateTrigger(name, props, loader, cloudManager);\n        default:\n          throw new IllegalArgumentException(\"Unknown event type: \" + type + \" in trigger: \" + name);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3102a9c9032617766c43974e7ec8b7a3148fb91","date":1519273763,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScaling.TriggerFactoryImpl#create(TriggerEventType,String,Map[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScaling.TriggerFactoryImpl#create(TriggerEventType,String,Map[String,Object]).mjava","sourceNew":"    @Override\n    public synchronized Trigger create(TriggerEventType type, String name, Map<String, Object> props) {\n      if (isClosed) {\n        throw new AlreadyClosedException(\"TriggerFactory has already been closed, cannot create new triggers\");\n      }\n      switch (type) {\n        case NODEADDED:\n          return new NodeAddedTrigger(name, props, loader, cloudManager);\n        case NODELOST:\n          return new NodeLostTrigger(name, props, loader, cloudManager);\n        case SEARCHRATE:\n          return new SearchRateTrigger(name, props, loader, cloudManager);\n        case METRIC:\n          return new MetricTrigger(name, props, loader, cloudManager);\n        case SCHEDULED:\n          return new ScheduledTrigger(name, props, loader, cloudManager);\n        default:\n          throw new IllegalArgumentException(\"Unknown event type: \" + type + \" in trigger: \" + name);\n      }\n    }\n\n","sourceOld":"    @Override\n    public synchronized Trigger create(TriggerEventType type, String name, Map<String, Object> props) {\n      if (isClosed) {\n        throw new AlreadyClosedException(\"TriggerFactory has already been closed, cannot create new triggers\");\n      }\n      switch (type) {\n        case NODEADDED:\n          return new NodeAddedTrigger(name, props, loader, cloudManager);\n        case NODELOST:\n          return new NodeLostTrigger(name, props, loader, cloudManager);\n        case SEARCHRATE:\n          return new SearchRateTrigger(name, props, loader, cloudManager);\n        case METRIC:\n          return new MetricTrigger(name, props, loader, cloudManager);\n        default:\n          throw new IllegalArgumentException(\"Unknown event type: \" + type + \" in trigger: \" + name);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c252a8291191876badb5f6235f62895d6e36b33e","date":1519309955,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScaling.TriggerFactoryImpl#create(TriggerEventType,String,Map[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScaling.TriggerFactoryImpl#create(TriggerEventType,String,Map[String,Object]).mjava","sourceNew":"    @Override\n    public synchronized Trigger create(TriggerEventType type, String name, Map<String, Object> props) {\n      if (isClosed) {\n        throw new AlreadyClosedException(\"TriggerFactory has already been closed, cannot create new triggers\");\n      }\n      switch (type) {\n        case NODEADDED:\n          return new NodeAddedTrigger(name, props, loader, cloudManager);\n        case NODELOST:\n          return new NodeLostTrigger(name, props, loader, cloudManager);\n        case SEARCHRATE:\n          return new SearchRateTrigger(name, props, loader, cloudManager);\n        case METRIC:\n          return new MetricTrigger(name, props, loader, cloudManager);\n        default:\n          throw new IllegalArgumentException(\"Unknown event type: \" + type + \" in trigger: \" + name);\n      }\n    }\n\n","sourceOld":"    @Override\n    public synchronized Trigger create(TriggerEventType type, String name, Map<String, Object> props) {\n      if (isClosed) {\n        throw new AlreadyClosedException(\"TriggerFactory has already been closed, cannot create new triggers\");\n      }\n      switch (type) {\n        case NODEADDED:\n          return new NodeAddedTrigger(name, props, loader, cloudManager);\n        case NODELOST:\n          return new NodeLostTrigger(name, props, loader, cloudManager);\n        case SEARCHRATE:\n          return new SearchRateTrigger(name, props, loader, cloudManager);\n        case METRIC:\n          return new MetricTrigger(name, props, loader, cloudManager);\n        case SCHEDULED:\n          return new ScheduledTrigger(name, props, loader, cloudManager);\n        default:\n          throw new IllegalArgumentException(\"Unknown event type: \" + type + \" in trigger: \" + name);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1dec9417ffbde1f9d7317d78c151248cb8f6af88","date":1520019381,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScaling.TriggerFactoryImpl#create(TriggerEventType,String,Map[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScaling.TriggerFactoryImpl#create(TriggerEventType,String,Map[String,Object]).mjava","sourceNew":"    @Override\n    public synchronized Trigger create(TriggerEventType type, String name, Map<String, Object> props) {\n      if (isClosed) {\n        throw new AlreadyClosedException(\"TriggerFactory has already been closed, cannot create new triggers\");\n      }\n      switch (type) {\n        case NODEADDED:\n          return new NodeAddedTrigger(name, props, loader, cloudManager);\n        case NODELOST:\n          return new NodeLostTrigger(name, props, loader, cloudManager);\n        case SEARCHRATE:\n          return new SearchRateTrigger(name, props, loader, cloudManager);\n        case METRIC:\n          return new MetricTrigger(name, props, loader, cloudManager);\n        case SCHEDULED:\n          return new ScheduledTrigger(name, props, loader, cloudManager);\n        default:\n          throw new IllegalArgumentException(\"Unknown event type: \" + type + \" in trigger: \" + name);\n      }\n    }\n\n","sourceOld":"    @Override\n    public synchronized Trigger create(TriggerEventType type, String name, Map<String, Object> props) {\n      if (isClosed) {\n        throw new AlreadyClosedException(\"TriggerFactory has already been closed, cannot create new triggers\");\n      }\n      switch (type) {\n        case NODEADDED:\n          return new NodeAddedTrigger(name, props, loader, cloudManager);\n        case NODELOST:\n          return new NodeLostTrigger(name, props, loader, cloudManager);\n        case SEARCHRATE:\n          return new SearchRateTrigger(name, props, loader, cloudManager);\n        case METRIC:\n          return new MetricTrigger(name, props, loader, cloudManager);\n        default:\n          throw new IllegalArgumentException(\"Unknown event type: \" + type + \" in trigger: \" + name);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cd44b11f5d211a0b76c6bc536f38d1eb1fe00c8d","date":1522763990,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScaling.TriggerFactoryImpl#create(TriggerEventType,String,Map[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScaling.TriggerFactoryImpl#create(TriggerEventType,String,Map[String,Object]).mjava","sourceNew":"    @Override\n    public synchronized Trigger create(TriggerEventType type, String name, Map<String, Object> props) throws TriggerValidationException {\n      if (isClosed) {\n        throw new AlreadyClosedException(\"TriggerFactory has already been closed, cannot create new triggers\");\n      }\n      if (type == null) {\n        throw new IllegalArgumentException(\"Trigger type must not be null\");\n      }\n      if (name == null || name.isEmpty()) {\n        throw new IllegalArgumentException(\"Trigger name must not be empty\");\n      }\n      Trigger t;\n      switch (type) {\n        case NODEADDED:\n          t = new NodeAddedTrigger(name);\n          break;\n        case NODELOST:\n          t = new NodeLostTrigger(name);\n        break;\n        case SEARCHRATE:\n          t = new SearchRateTrigger(name);\n        break;\n        case METRIC:\n          t = new MetricTrigger(name);\n        break;\n        case SCHEDULED:\n          t = new ScheduledTrigger(name);\n        break;\n        default:\n          throw new IllegalArgumentException(\"Unknown event type: \" + type + \" in trigger: \" + name);\n      }\n      t.configure(loader, cloudManager, props);\n      return t;\n    }\n\n","sourceOld":"    @Override\n    public synchronized Trigger create(TriggerEventType type, String name, Map<String, Object> props) {\n      if (isClosed) {\n        throw new AlreadyClosedException(\"TriggerFactory has already been closed, cannot create new triggers\");\n      }\n      switch (type) {\n        case NODEADDED:\n          return new NodeAddedTrigger(name, props, loader, cloudManager);\n        case NODELOST:\n          return new NodeLostTrigger(name, props, loader, cloudManager);\n        case SEARCHRATE:\n          return new SearchRateTrigger(name, props, loader, cloudManager);\n        case METRIC:\n          return new MetricTrigger(name, props, loader, cloudManager);\n        case SCHEDULED:\n          return new ScheduledTrigger(name, props, loader, cloudManager);\n        default:\n          throw new IllegalArgumentException(\"Unknown event type: \" + type + \" in trigger: \" + name);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ce71a9836bf1eba34a0ab31884e9eb8ad3f1cef1","date":1523453934,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScaling.TriggerFactoryImpl#create(TriggerEventType,String,Map[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScaling.TriggerFactoryImpl#create(TriggerEventType,String,Map[String,Object]).mjava","sourceNew":"    @Override\n    public synchronized Trigger create(TriggerEventType type, String name, Map<String, Object> props) throws TriggerValidationException {\n      if (isClosed) {\n        throw new AlreadyClosedException(\"TriggerFactory has already been closed, cannot create new triggers\");\n      }\n      if (type == null) {\n        throw new IllegalArgumentException(\"Trigger type must not be null\");\n      }\n      if (name == null || name.isEmpty()) {\n        throw new IllegalArgumentException(\"Trigger name must not be empty\");\n      }\n      Trigger t;\n      switch (type) {\n        case NODEADDED:\n          t = new NodeAddedTrigger(name);\n          break;\n        case NODELOST:\n          t = new NodeLostTrigger(name);\n        break;\n        case SEARCHRATE:\n          t = new SearchRateTrigger(name);\n        break;\n        case METRIC:\n          t = new MetricTrigger(name);\n        break;\n        case SCHEDULED:\n          t = new ScheduledTrigger(name);\n        break;\n        case INDEXSIZE:\n          t = new IndexSizeTrigger(name);\n          break;\n        default:\n          throw new IllegalArgumentException(\"Unknown event type: \" + type + \" in trigger: \" + name);\n      }\n      t.configure(loader, cloudManager, props);\n      return t;\n    }\n\n","sourceOld":"    @Override\n    public synchronized Trigger create(TriggerEventType type, String name, Map<String, Object> props) throws TriggerValidationException {\n      if (isClosed) {\n        throw new AlreadyClosedException(\"TriggerFactory has already been closed, cannot create new triggers\");\n      }\n      if (type == null) {\n        throw new IllegalArgumentException(\"Trigger type must not be null\");\n      }\n      if (name == null || name.isEmpty()) {\n        throw new IllegalArgumentException(\"Trigger name must not be empty\");\n      }\n      Trigger t;\n      switch (type) {\n        case NODEADDED:\n          t = new NodeAddedTrigger(name);\n          break;\n        case NODELOST:\n          t = new NodeLostTrigger(name);\n        break;\n        case SEARCHRATE:\n          t = new SearchRateTrigger(name);\n        break;\n        case METRIC:\n          t = new MetricTrigger(name);\n        break;\n        case SCHEDULED:\n          t = new ScheduledTrigger(name);\n        break;\n        default:\n          throw new IllegalArgumentException(\"Unknown event type: \" + type + \" in trigger: \" + name);\n      }\n      t.configure(loader, cloudManager, props);\n      return t;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43345f1452f9510f8aaadae6156fe0c834e7d957","date":1523483670,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScaling.TriggerFactoryImpl#create(TriggerEventType,String,Map[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScaling.TriggerFactoryImpl#create(TriggerEventType,String,Map[String,Object]).mjava","sourceNew":"    @Override\n    public synchronized Trigger create(TriggerEventType type, String name, Map<String, Object> props) throws TriggerValidationException {\n      if (isClosed) {\n        throw new AlreadyClosedException(\"TriggerFactory has already been closed, cannot create new triggers\");\n      }\n      if (type == null) {\n        throw new IllegalArgumentException(\"Trigger type must not be null\");\n      }\n      if (name == null || name.isEmpty()) {\n        throw new IllegalArgumentException(\"Trigger name must not be empty\");\n      }\n      Trigger t;\n      switch (type) {\n        case NODEADDED:\n          t = new NodeAddedTrigger(name);\n          break;\n        case NODELOST:\n          t = new NodeLostTrigger(name);\n        break;\n        case SEARCHRATE:\n          t = new SearchRateTrigger(name);\n        break;\n        case METRIC:\n          t = new MetricTrigger(name);\n        break;\n        case SCHEDULED:\n          t = new ScheduledTrigger(name);\n        break;\n        case INDEXSIZE:\n          t = new IndexSizeTrigger(name);\n          break;\n        default:\n          throw new IllegalArgumentException(\"Unknown event type: \" + type + \" in trigger: \" + name);\n      }\n      t.configure(loader, cloudManager, props);\n      return t;\n    }\n\n","sourceOld":"    @Override\n    public synchronized Trigger create(TriggerEventType type, String name, Map<String, Object> props) throws TriggerValidationException {\n      if (isClosed) {\n        throw new AlreadyClosedException(\"TriggerFactory has already been closed, cannot create new triggers\");\n      }\n      if (type == null) {\n        throw new IllegalArgumentException(\"Trigger type must not be null\");\n      }\n      if (name == null || name.isEmpty()) {\n        throw new IllegalArgumentException(\"Trigger name must not be empty\");\n      }\n      Trigger t;\n      switch (type) {\n        case NODEADDED:\n          t = new NodeAddedTrigger(name);\n          break;\n        case NODELOST:\n          t = new NodeLostTrigger(name);\n        break;\n        case SEARCHRATE:\n          t = new SearchRateTrigger(name);\n        break;\n        case METRIC:\n          t = new MetricTrigger(name);\n        break;\n        case SCHEDULED:\n          t = new ScheduledTrigger(name);\n        break;\n        default:\n          throw new IllegalArgumentException(\"Unknown event type: \" + type + \" in trigger: \" + name);\n      }\n      t.configure(loader, cloudManager, props);\n      return t;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScaling.TriggerFactoryImpl#create(TriggerEventType,String,Map[String,Object]).mjava","sourceNew":null,"sourceOld":"    @Override\n    public synchronized Trigger create(TriggerEventType type, String name, Map<String, Object> props) throws TriggerValidationException {\n      if (isClosed) {\n        throw new AlreadyClosedException(\"TriggerFactory has already been closed, cannot create new triggers\");\n      }\n      if (type == null) {\n        throw new IllegalArgumentException(\"Trigger type must not be null\");\n      }\n      if (name == null || name.isEmpty()) {\n        throw new IllegalArgumentException(\"Trigger name must not be empty\");\n      }\n      Trigger t;\n      switch (type) {\n        case NODEADDED:\n          t = new NodeAddedTrigger(name);\n          break;\n        case NODELOST:\n          t = new NodeLostTrigger(name);\n        break;\n        case SEARCHRATE:\n          t = new SearchRateTrigger(name);\n        break;\n        case METRIC:\n          t = new MetricTrigger(name);\n        break;\n        case SCHEDULED:\n          t = new ScheduledTrigger(name);\n        break;\n        case INDEXSIZE:\n          t = new IndexSizeTrigger(name);\n          break;\n        default:\n          throw new IllegalArgumentException(\"Unknown event type: \" + type + \" in trigger: \" + name);\n      }\n      t.configure(loader, cloudManager, props);\n      return t;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3f504512a03d978990cbff30db0522b354e846db":["43345f1452f9510f8aaadae6156fe0c834e7d957"],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8","7d7cf463e12b13965d63f133adc46a1c673d0c4e"],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"35a328e6f64355319d0b316956c260b0be251aca":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"7d7cf463e12b13965d63f133adc46a1c673d0c4e":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"b869898f50ca80263bac2e3ae0949f7700e5c977":["c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac"],"cd44b11f5d211a0b76c6bc536f38d1eb1fe00c8d":["1dec9417ffbde1f9d7317d78c151248cb8f6af88"],"43345f1452f9510f8aaadae6156fe0c834e7d957":["cd44b11f5d211a0b76c6bc536f38d1eb1fe00c8d","ce71a9836bf1eba34a0ab31884e9eb8ad3f1cef1"],"1dec9417ffbde1f9d7317d78c151248cb8f6af88":["c252a8291191876badb5f6235f62895d6e36b33e"],"ce71a9836bf1eba34a0ab31884e9eb8ad3f1cef1":["cd44b11f5d211a0b76c6bc536f38d1eb1fe00c8d"],"c252a8291191876badb5f6235f62895d6e36b33e":["d3102a9c9032617766c43974e7ec8b7a3148fb91"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"],"d3102a9c9032617766c43974e7ec8b7a3148fb91":["35a328e6f64355319d0b316956c260b0be251aca"]},"commit2Childs":{"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac":["b869898f50ca80263bac2e3ae0949f7700e5c977"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["d523b8189b211dd1630166aa77b8c88bb48b3fcc","7d7cf463e12b13965d63f133adc46a1c673d0c4e"],"35a328e6f64355319d0b316956c260b0be251aca":["d3102a9c9032617766c43974e7ec8b7a3148fb91"],"7d7cf463e12b13965d63f133adc46a1c673d0c4e":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"b869898f50ca80263bac2e3ae0949f7700e5c977":[],"43345f1452f9510f8aaadae6156fe0c834e7d957":["3f504512a03d978990cbff30db0522b354e846db"],"cd44b11f5d211a0b76c6bc536f38d1eb1fe00c8d":["43345f1452f9510f8aaadae6156fe0c834e7d957","ce71a9836bf1eba34a0ab31884e9eb8ad3f1cef1"],"1dec9417ffbde1f9d7317d78c151248cb8f6af88":["cd44b11f5d211a0b76c6bc536f38d1eb1fe00c8d"],"ce71a9836bf1eba34a0ab31884e9eb8ad3f1cef1":["43345f1452f9510f8aaadae6156fe0c834e7d957"],"c252a8291191876badb5f6235f62895d6e36b33e":["1dec9417ffbde1f9d7317d78c151248cb8f6af88"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac","85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["35a328e6f64355319d0b316956c260b0be251aca"],"d3102a9c9032617766c43974e7ec8b7a3148fb91":["c252a8291191876badb5f6235f62895d6e36b33e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b869898f50ca80263bac2e3ae0949f7700e5c977","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}