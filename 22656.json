{"path":"lucene/suggest/src/test/org/apache/lucene/search/suggest/LookupBenchmarkTest#buildLookup(Class[#-extends-Lookup],TermFreq[]).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/LookupBenchmarkTest#buildLookup(Class[#-extends-Lookup],TermFreq[]).mjava","pathOld":"modules/suggest/src/test/org/apache/lucene/search/suggest/LookupBenchmarkTest#buildLookup(Class[#-extends-Lookup],TermFreq[]).mjava","sourceNew":"  /**\n   * Create {@link Lookup} instance and populate it. \n   */\n  private Lookup buildLookup(Class<? extends Lookup> cls, TermFreq[] input) throws Exception {\n    Lookup lookup = cls.newInstance();\n    lookup.build(new TermFreqArrayIterator(input));\n    return lookup;\n  }\n\n","sourceOld":"  /**\n   * Create {@link Lookup} instance and populate it. \n   */\n  private Lookup buildLookup(Class<? extends Lookup> cls, TermFreq[] input) throws Exception {\n    Lookup lookup = cls.newInstance();\n    lookup.build(new TermFreqArrayIterator(input));\n    return lookup;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6ce825e9276493231308229152c48f755ce1a0a5","date":1348871483,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/LookupBenchmarkTest#buildLookup(Class[#-extends-Lookup],TermFreq[]).mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/LookupBenchmarkTest#buildLookup(Class[#-extends-Lookup],TermFreq[]).mjava","sourceNew":"  /**\n   * Create {@link Lookup} instance and populate it. \n   */\n  private Lookup buildLookup(Class<? extends Lookup> cls, TermFreq[] input) throws Exception {\n    Lookup lookup = null;\n    try {\n      lookup = cls.newInstance();\n    } catch (InstantiationException e) {\n      Constructor<? extends Lookup> ctor = cls.getConstructor(Analyzer.class);\n      lookup = ctor.newInstance(new MockAnalyzer(random, MockTokenizer.KEYWORD, false));\n    }\n    lookup.build(new TermFreqArrayIterator(input));\n    return lookup;\n  }\n\n","sourceOld":"  /**\n   * Create {@link Lookup} instance and populate it. \n   */\n  private Lookup buildLookup(Class<? extends Lookup> cls, TermFreq[] input) throws Exception {\n    Lookup lookup = cls.newInstance();\n    lookup.build(new TermFreqArrayIterator(input));\n    return lookup;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"33ba398fa7984fdcb45fd76b87504d5adf7ca5e3","date":1373907993,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/LookupBenchmarkTest#buildLookup(Class[#-extends-Lookup],TermFreq[]).mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/LookupBenchmarkTest#buildLookup(Class[#-extends-Lookup],TermFreq[]).mjava","sourceNew":"  /**\n   * Create {@link Lookup} instance and populate it. \n   */\n  private Lookup buildLookup(Class<? extends Lookup> cls, TermFreq[] input) throws Exception {\n    Lookup lookup = null;\n    try {\n      lookup = cls.newInstance();\n    } catch (InstantiationException e) {\n      Analyzer a = new MockAnalyzer(random, MockTokenizer.KEYWORD, false);\n      if (cls == AnalyzingInfixSuggester.class) {\n        lookup = new AnalyzingInfixSuggester(TEST_VERSION_CURRENT, _TestUtil.getTempDir(\"LookupBenchmarkTest\"), a);\n      } else {\n        Constructor<? extends Lookup> ctor = cls.getConstructor(Analyzer.class);\n        lookup = ctor.newInstance(a);\n      }\n    }\n    lookup.build(new TermFreqArrayIterator(input));\n    return lookup;\n  }\n\n","sourceOld":"  /**\n   * Create {@link Lookup} instance and populate it. \n   */\n  private Lookup buildLookup(Class<? extends Lookup> cls, TermFreq[] input) throws Exception {\n    Lookup lookup = null;\n    try {\n      lookup = cls.newInstance();\n    } catch (InstantiationException e) {\n      Constructor<? extends Lookup> ctor = cls.getConstructor(Analyzer.class);\n      lookup = ctor.newInstance(new MockAnalyzer(random, MockTokenizer.KEYWORD, false));\n    }\n    lookup.build(new TermFreqArrayIterator(input));\n    return lookup;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/LookupBenchmarkTest#buildLookup(Class[#-extends-Lookup],TermFreq[]).mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/LookupBenchmarkTest#buildLookup(Class[#-extends-Lookup],TermFreq[]).mjava","sourceNew":"  /**\n   * Create {@link Lookup} instance and populate it. \n   */\n  private Lookup buildLookup(Class<? extends Lookup> cls, TermFreq[] input) throws Exception {\n    Lookup lookup = null;\n    try {\n      lookup = cls.newInstance();\n    } catch (InstantiationException e) {\n      Analyzer a = new MockAnalyzer(random, MockTokenizer.KEYWORD, false);\n      if (cls == AnalyzingInfixSuggester.class) {\n        lookup = new AnalyzingInfixSuggester(TEST_VERSION_CURRENT, _TestUtil.getTempDir(\"LookupBenchmarkTest\"), a);\n      } else {\n        Constructor<? extends Lookup> ctor = cls.getConstructor(Analyzer.class);\n        lookup = ctor.newInstance(a);\n      }\n    }\n    lookup.build(new TermFreqArrayIterator(input));\n    return lookup;\n  }\n\n","sourceOld":"  /**\n   * Create {@link Lookup} instance and populate it. \n   */\n  private Lookup buildLookup(Class<? extends Lookup> cls, TermFreq[] input) throws Exception {\n    Lookup lookup = null;\n    try {\n      lookup = cls.newInstance();\n    } catch (InstantiationException e) {\n      Constructor<? extends Lookup> ctor = cls.getConstructor(Analyzer.class);\n      lookup = ctor.newInstance(new MockAnalyzer(random, MockTokenizer.KEYWORD, false));\n    }\n    lookup.build(new TermFreqArrayIterator(input));\n    return lookup;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ada2f7352a7f964fe49bccd13227c4ec38563d39","date":1381659982,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/LookupBenchmarkTest#buildLookup(Class[#-extends-Lookup],TermFreqPayload[]).mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/LookupBenchmarkTest#buildLookup(Class[#-extends-Lookup],TermFreq[]).mjava","sourceNew":"  /**\n   * Create {@link Lookup} instance and populate it. \n   */\n  private Lookup buildLookup(Class<? extends Lookup> cls, TermFreqPayload[] input) throws Exception {\n    Lookup lookup = null;\n    try {\n      lookup = cls.newInstance();\n    } catch (InstantiationException e) {\n      Analyzer a = new MockAnalyzer(random, MockTokenizer.KEYWORD, false);\n      if (cls == AnalyzingInfixSuggester.class) {\n        lookup = new AnalyzingInfixSuggester(TEST_VERSION_CURRENT, _TestUtil.getTempDir(\"LookupBenchmarkTest\"), a);\n      } else {\n        Constructor<? extends Lookup> ctor = cls.getConstructor(Analyzer.class);\n        lookup = ctor.newInstance(a);\n      }\n    }\n    lookup.build(new TermFreqPayloadArrayIterator(input));\n    return lookup;\n  }\n\n","sourceOld":"  /**\n   * Create {@link Lookup} instance and populate it. \n   */\n  private Lookup buildLookup(Class<? extends Lookup> cls, TermFreq[] input) throws Exception {\n    Lookup lookup = null;\n    try {\n      lookup = cls.newInstance();\n    } catch (InstantiationException e) {\n      Analyzer a = new MockAnalyzer(random, MockTokenizer.KEYWORD, false);\n      if (cls == AnalyzingInfixSuggester.class) {\n        lookup = new AnalyzingInfixSuggester(TEST_VERSION_CURRENT, _TestUtil.getTempDir(\"LookupBenchmarkTest\"), a);\n      } else {\n        Constructor<? extends Lookup> ctor = cls.getConstructor(Analyzer.class);\n        lookup = ctor.newInstance(a);\n      }\n    }\n    lookup.build(new TermFreqArrayIterator(input));\n    return lookup;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["6ce825e9276493231308229152c48f755ce1a0a5","33ba398fa7984fdcb45fd76b87504d5adf7ca5e3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6ce825e9276493231308229152c48f755ce1a0a5":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"33ba398fa7984fdcb45fd76b87504d5adf7ca5e3":["6ce825e9276493231308229152c48f755ce1a0a5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ada2f7352a7f964fe49bccd13227c4ec38563d39"],"ada2f7352a7f964fe49bccd13227c4ec38563d39":["33ba398fa7984fdcb45fd76b87504d5adf7ca5e3"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["6ce825e9276493231308229152c48f755ce1a0a5"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"6ce825e9276493231308229152c48f755ce1a0a5":["37a0f60745e53927c4c876cfe5b5a58170f0646c","33ba398fa7984fdcb45fd76b87504d5adf7ca5e3"],"33ba398fa7984fdcb45fd76b87504d5adf7ca5e3":["37a0f60745e53927c4c876cfe5b5a58170f0646c","ada2f7352a7f964fe49bccd13227c4ec38563d39"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"ada2f7352a7f964fe49bccd13227c4ec38563d39":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}