{"path":"lucene/sandbox/src/java/org/apache/lucene/document/FloatPointNearestNeighbor#nearest(IndexSearcher,String,int,float...).mjava","commits":[{"id":"1b73cddaec09172a09da82e758d0014ab8810ffa","date":1506898255,"type":0,"author":"Steve Rowe","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/FloatPointNearestNeighbor#nearest(IndexSearcher,String,int,float...).mjava","pathOld":"/dev/null","sourceNew":"  public static TopFieldDocs nearest(IndexSearcher searcher, String field, int topN, float... origin) throws IOException {\n    if (topN < 1) {\n      throw new IllegalArgumentException(\"topN must be at least 1; got \" + topN);\n    }\n    if (field == null) {\n      throw new IllegalArgumentException(\"field must not be null\");\n    }\n    if (searcher == null) {\n      throw new IllegalArgumentException(\"searcher must not be null\");\n    }\n    List<BKDReader> readers = new ArrayList<>();\n    List<Integer> docBases = new ArrayList<>();\n    List<Bits> liveDocs = new ArrayList<>();\n    int totalHits = 0;\n    for (LeafReaderContext leaf : searcher.getIndexReader().leaves()) {\n      PointValues points = leaf.reader().getPointValues(field);\n      if (points != null) {\n        if (points instanceof BKDReader == false) {\n          throw new IllegalArgumentException(\"can only run on Lucene60PointsReader points implementation, but got \" + points);\n        }\n        totalHits += points.getDocCount();\n        readers.add((BKDReader)points);\n        docBases.add(leaf.docBase);\n        liveDocs.add(leaf.reader().getLiveDocs());\n      }\n    }\n\n    NearestHit[] hits = nearest(readers, liveDocs, docBases, topN, origin);\n\n    // Convert to TopFieldDocs:\n    ScoreDoc[] scoreDocs = new ScoreDoc[hits.length];\n    for(int i=0;i<hits.length;i++) {\n      NearestHit hit = hits[i];\n      scoreDocs[i] = new FieldDoc(hit.docID, 0.0f, new Object[] { (float)Math.sqrt(hit.distanceSquared) });\n    }\n    return new TopFieldDocs(totalHits, scoreDocs, null, 0.0f);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6240b74b884c5587f2a4062dd27d6c32bf228889","date":1507037235,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/FloatPointNearestNeighbor#nearest(IndexSearcher,String,int,float...).mjava","pathOld":"/dev/null","sourceNew":"  public static TopFieldDocs nearest(IndexSearcher searcher, String field, int topN, float... origin) throws IOException {\n    if (topN < 1) {\n      throw new IllegalArgumentException(\"topN must be at least 1; got \" + topN);\n    }\n    if (field == null) {\n      throw new IllegalArgumentException(\"field must not be null\");\n    }\n    if (searcher == null) {\n      throw new IllegalArgumentException(\"searcher must not be null\");\n    }\n    List<BKDReader> readers = new ArrayList<>();\n    List<Integer> docBases = new ArrayList<>();\n    List<Bits> liveDocs = new ArrayList<>();\n    int totalHits = 0;\n    for (LeafReaderContext leaf : searcher.getIndexReader().leaves()) {\n      PointValues points = leaf.reader().getPointValues(field);\n      if (points != null) {\n        if (points instanceof BKDReader == false) {\n          throw new IllegalArgumentException(\"can only run on Lucene60PointsReader points implementation, but got \" + points);\n        }\n        totalHits += points.getDocCount();\n        readers.add((BKDReader)points);\n        docBases.add(leaf.docBase);\n        liveDocs.add(leaf.reader().getLiveDocs());\n      }\n    }\n\n    NearestHit[] hits = nearest(readers, liveDocs, docBases, topN, origin);\n\n    // Convert to TopFieldDocs:\n    ScoreDoc[] scoreDocs = new ScoreDoc[hits.length];\n    for(int i=0;i<hits.length;i++) {\n      NearestHit hit = hits[i];\n      scoreDocs[i] = new FieldDoc(hit.docID, 0.0f, new Object[] { (float)Math.sqrt(hit.distanceSquared) });\n    }\n    return new TopFieldDocs(totalHits, scoreDocs, null, 0.0f);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"81fff83bdb893c1471efd78f6a9a3ce4f98120b9","date":1531895937,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/FloatPointNearestNeighbor#nearest(IndexSearcher,String,int,float...).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/FloatPointNearestNeighbor#nearest(IndexSearcher,String,int,float...).mjava","sourceNew":"  public static TopFieldDocs nearest(IndexSearcher searcher, String field, int topN, float... origin) throws IOException {\n    if (topN < 1) {\n      throw new IllegalArgumentException(\"topN must be at least 1; got \" + topN);\n    }\n    if (field == null) {\n      throw new IllegalArgumentException(\"field must not be null\");\n    }\n    if (searcher == null) {\n      throw new IllegalArgumentException(\"searcher must not be null\");\n    }\n    List<BKDReader> readers = new ArrayList<>();\n    List<Integer> docBases = new ArrayList<>();\n    List<Bits> liveDocs = new ArrayList<>();\n    int totalHits = 0;\n    for (LeafReaderContext leaf : searcher.getIndexReader().leaves()) {\n      PointValues points = leaf.reader().getPointValues(field);\n      if (points != null) {\n        if (points instanceof BKDReader == false) {\n          throw new IllegalArgumentException(\"can only run on Lucene60PointsReader points implementation, but got \" + points);\n        }\n        totalHits += points.getDocCount();\n        readers.add((BKDReader)points);\n        docBases.add(leaf.docBase);\n        liveDocs.add(leaf.reader().getLiveDocs());\n      }\n    }\n\n    NearestHit[] hits = nearest(readers, liveDocs, docBases, topN, origin);\n\n    // Convert to TopFieldDocs:\n    ScoreDoc[] scoreDocs = new ScoreDoc[hits.length];\n    for(int i=0;i<hits.length;i++) {\n      NearestHit hit = hits[i];\n      scoreDocs[i] = new FieldDoc(hit.docID, 0.0f, new Object[] { (float)Math.sqrt(hit.distanceSquared) });\n    }\n    return new TopFieldDocs(totalHits, scoreDocs, null);\n  }\n\n","sourceOld":"  public static TopFieldDocs nearest(IndexSearcher searcher, String field, int topN, float... origin) throws IOException {\n    if (topN < 1) {\n      throw new IllegalArgumentException(\"topN must be at least 1; got \" + topN);\n    }\n    if (field == null) {\n      throw new IllegalArgumentException(\"field must not be null\");\n    }\n    if (searcher == null) {\n      throw new IllegalArgumentException(\"searcher must not be null\");\n    }\n    List<BKDReader> readers = new ArrayList<>();\n    List<Integer> docBases = new ArrayList<>();\n    List<Bits> liveDocs = new ArrayList<>();\n    int totalHits = 0;\n    for (LeafReaderContext leaf : searcher.getIndexReader().leaves()) {\n      PointValues points = leaf.reader().getPointValues(field);\n      if (points != null) {\n        if (points instanceof BKDReader == false) {\n          throw new IllegalArgumentException(\"can only run on Lucene60PointsReader points implementation, but got \" + points);\n        }\n        totalHits += points.getDocCount();\n        readers.add((BKDReader)points);\n        docBases.add(leaf.docBase);\n        liveDocs.add(leaf.reader().getLiveDocs());\n      }\n    }\n\n    NearestHit[] hits = nearest(readers, liveDocs, docBases, topN, origin);\n\n    // Convert to TopFieldDocs:\n    ScoreDoc[] scoreDocs = new ScoreDoc[hits.length];\n    for(int i=0;i<hits.length;i++) {\n      NearestHit hit = hits[i];\n      scoreDocs[i] = new FieldDoc(hit.docID, 0.0f, new Object[] { (float)Math.sqrt(hit.distanceSquared) });\n    }\n    return new TopFieldDocs(totalHits, scoreDocs, null, 0.0f);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/FloatPointNearestNeighbor#nearest(IndexSearcher,String,int,float...).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/FloatPointNearestNeighbor#nearest(IndexSearcher,String,int,float...).mjava","sourceNew":"  public static TopFieldDocs nearest(IndexSearcher searcher, String field, int topN, float... origin) throws IOException {\n    if (topN < 1) {\n      throw new IllegalArgumentException(\"topN must be at least 1; got \" + topN);\n    }\n    if (field == null) {\n      throw new IllegalArgumentException(\"field must not be null\");\n    }\n    if (searcher == null) {\n      throw new IllegalArgumentException(\"searcher must not be null\");\n    }\n    List<BKDReader> readers = new ArrayList<>();\n    List<Integer> docBases = new ArrayList<>();\n    List<Bits> liveDocs = new ArrayList<>();\n    int totalHits = 0;\n    for (LeafReaderContext leaf : searcher.getIndexReader().leaves()) {\n      PointValues points = leaf.reader().getPointValues(field);\n      if (points != null) {\n        if (points instanceof BKDReader == false) {\n          throw new IllegalArgumentException(\"can only run on Lucene60PointsReader points implementation, but got \" + points);\n        }\n        totalHits += points.getDocCount();\n        readers.add((BKDReader)points);\n        docBases.add(leaf.docBase);\n        liveDocs.add(leaf.reader().getLiveDocs());\n      }\n    }\n\n    NearestHit[] hits = nearest(readers, liveDocs, docBases, topN, origin);\n\n    // Convert to TopFieldDocs:\n    ScoreDoc[] scoreDocs = new ScoreDoc[hits.length];\n    for(int i=0;i<hits.length;i++) {\n      NearestHit hit = hits[i];\n      scoreDocs[i] = new FieldDoc(hit.docID, 0.0f, new Object[] { (float)Math.sqrt(hit.distanceSquared) });\n    }\n    return new TopFieldDocs(totalHits, scoreDocs, null);\n  }\n\n","sourceOld":"  public static TopFieldDocs nearest(IndexSearcher searcher, String field, int topN, float... origin) throws IOException {\n    if (topN < 1) {\n      throw new IllegalArgumentException(\"topN must be at least 1; got \" + topN);\n    }\n    if (field == null) {\n      throw new IllegalArgumentException(\"field must not be null\");\n    }\n    if (searcher == null) {\n      throw new IllegalArgumentException(\"searcher must not be null\");\n    }\n    List<BKDReader> readers = new ArrayList<>();\n    List<Integer> docBases = new ArrayList<>();\n    List<Bits> liveDocs = new ArrayList<>();\n    int totalHits = 0;\n    for (LeafReaderContext leaf : searcher.getIndexReader().leaves()) {\n      PointValues points = leaf.reader().getPointValues(field);\n      if (points != null) {\n        if (points instanceof BKDReader == false) {\n          throw new IllegalArgumentException(\"can only run on Lucene60PointsReader points implementation, but got \" + points);\n        }\n        totalHits += points.getDocCount();\n        readers.add((BKDReader)points);\n        docBases.add(leaf.docBase);\n        liveDocs.add(leaf.reader().getLiveDocs());\n      }\n    }\n\n    NearestHit[] hits = nearest(readers, liveDocs, docBases, topN, origin);\n\n    // Convert to TopFieldDocs:\n    ScoreDoc[] scoreDocs = new ScoreDoc[hits.length];\n    for(int i=0;i<hits.length;i++) {\n      NearestHit hit = hits[i];\n      scoreDocs[i] = new FieldDoc(hit.docID, 0.0f, new Object[] { (float)Math.sqrt(hit.distanceSquared) });\n    }\n    return new TopFieldDocs(totalHits, scoreDocs, null, 0.0f);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83788ad129a5154d5c6562c4e8ce3db48793aada","date":1532961485,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/FloatPointNearestNeighbor#nearest(IndexSearcher,String,int,float...).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/FloatPointNearestNeighbor#nearest(IndexSearcher,String,int,float...).mjava","sourceNew":"  public static TopFieldDocs nearest(IndexSearcher searcher, String field, int topN, float... origin) throws IOException {\n    if (topN < 1) {\n      throw new IllegalArgumentException(\"topN must be at least 1; got \" + topN);\n    }\n    if (field == null) {\n      throw new IllegalArgumentException(\"field must not be null\");\n    }\n    if (searcher == null) {\n      throw new IllegalArgumentException(\"searcher must not be null\");\n    }\n    List<BKDReader> readers = new ArrayList<>();\n    List<Integer> docBases = new ArrayList<>();\n    List<Bits> liveDocs = new ArrayList<>();\n    int totalHits = 0;\n    for (LeafReaderContext leaf : searcher.getIndexReader().leaves()) {\n      PointValues points = leaf.reader().getPointValues(field);\n      if (points != null) {\n        if (points instanceof BKDReader == false) {\n          throw new IllegalArgumentException(\"can only run on Lucene60PointsReader points implementation, but got \" + points);\n        }\n        totalHits += points.getDocCount();\n        readers.add((BKDReader)points);\n        docBases.add(leaf.docBase);\n        liveDocs.add(leaf.reader().getLiveDocs());\n      }\n    }\n\n    NearestHit[] hits = nearest(readers, liveDocs, docBases, topN, origin);\n\n    // Convert to TopFieldDocs:\n    ScoreDoc[] scoreDocs = new ScoreDoc[hits.length];\n    for(int i=0;i<hits.length;i++) {\n      NearestHit hit = hits[i];\n      scoreDocs[i] = new FieldDoc(hit.docID, 0.0f, new Object[] { (float)Math.sqrt(hit.distanceSquared) });\n    }\n    return new TopFieldDocs(new TotalHits(totalHits, TotalHits.Relation.EQUAL_TO), scoreDocs, null);\n  }\n\n","sourceOld":"  public static TopFieldDocs nearest(IndexSearcher searcher, String field, int topN, float... origin) throws IOException {\n    if (topN < 1) {\n      throw new IllegalArgumentException(\"topN must be at least 1; got \" + topN);\n    }\n    if (field == null) {\n      throw new IllegalArgumentException(\"field must not be null\");\n    }\n    if (searcher == null) {\n      throw new IllegalArgumentException(\"searcher must not be null\");\n    }\n    List<BKDReader> readers = new ArrayList<>();\n    List<Integer> docBases = new ArrayList<>();\n    List<Bits> liveDocs = new ArrayList<>();\n    int totalHits = 0;\n    for (LeafReaderContext leaf : searcher.getIndexReader().leaves()) {\n      PointValues points = leaf.reader().getPointValues(field);\n      if (points != null) {\n        if (points instanceof BKDReader == false) {\n          throw new IllegalArgumentException(\"can only run on Lucene60PointsReader points implementation, but got \" + points);\n        }\n        totalHits += points.getDocCount();\n        readers.add((BKDReader)points);\n        docBases.add(leaf.docBase);\n        liveDocs.add(leaf.reader().getLiveDocs());\n      }\n    }\n\n    NearestHit[] hits = nearest(readers, liveDocs, docBases, topN, origin);\n\n    // Convert to TopFieldDocs:\n    ScoreDoc[] scoreDocs = new ScoreDoc[hits.length];\n    for(int i=0;i<hits.length;i++) {\n      NearestHit hit = hits[i];\n      scoreDocs[i] = new FieldDoc(hit.docID, 0.0f, new Object[] { (float)Math.sqrt(hit.distanceSquared) });\n    }\n    return new TopFieldDocs(totalHits, scoreDocs, null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["1b73cddaec09172a09da82e758d0014ab8810ffa","81fff83bdb893c1471efd78f6a9a3ce4f98120b9"],"1b73cddaec09172a09da82e758d0014ab8810ffa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6240b74b884c5587f2a4062dd27d6c32bf228889":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1b73cddaec09172a09da82e758d0014ab8810ffa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"83788ad129a5154d5c6562c4e8ce3db48793aada":["81fff83bdb893c1471efd78f6a9a3ce4f98120b9"],"81fff83bdb893c1471efd78f6a9a3ce4f98120b9":["1b73cddaec09172a09da82e758d0014ab8810ffa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["83788ad129a5154d5c6562c4e8ce3db48793aada"]},"commit2Childs":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"1b73cddaec09172a09da82e758d0014ab8810ffa":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","6240b74b884c5587f2a4062dd27d6c32bf228889","81fff83bdb893c1471efd78f6a9a3ce4f98120b9"],"6240b74b884c5587f2a4062dd27d6c32bf228889":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1b73cddaec09172a09da82e758d0014ab8810ffa","6240b74b884c5587f2a4062dd27d6c32bf228889"],"81fff83bdb893c1471efd78f6a9a3ce4f98120b9":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","83788ad129a5154d5c6562c4e8ce3db48793aada"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","6240b74b884c5587f2a4062dd27d6c32bf228889","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}