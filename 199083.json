{"path":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimCloudManager#request(SolrRequest).mjava","commits":[{"id":"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5","date":1556572478,"type":1,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimCloudManager#request(SolrRequest).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimCloudManager#request(SolrRequest).mjava","sourceNew":"  @Override\n  public SolrResponse request(SolrRequest req) throws IOException {\n    try {\n      // NOTE: we're doing 2 odd things here:\n      // 1) rather then calling simHandleSolrRequest directly, we're submitting it to the\n      //    executor service and immediately waiting on the Future.\n      //    - This can introduce a delays if there are a lot of existing background tasks submitted\n      // 2) we use simCloudManagerPool directly, instead of using the public submit() method\n      //    - this is because there may be \"user level\" errors (ie: bad input) deliberately generated\n      //      by the testcase.  we're going to immediately catch & re-throw any exceptions, so we don't\n      //      need/want to be wrapped in a LoggingCallable w/getBackgroundTaskFailureCount() tracking\n      Future<SolrResponse> rsp = simCloudManagerPool.submit(() -> simHandleSolrRequest(req));\n      return rsp.get(120, TimeUnit.SECONDS); // longer then this and something is seriously wrong\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n\n","sourceOld":"  @Override\n  public SolrResponse request(SolrRequest req) throws IOException {\n    try {\n      // NOTE: we're doing 2 odd things here:\n      // 1) rather then calling simHandleSolrRequest directly, we're submitting it to the\n      //    executor service and immediately waiting on the Future.\n      //    - This can introduce a delays if there are a lot of existing background tasks submitted\n      // 2) we use simCloudManagerPool directly, instead of using the public submit() method\n      //    - this is because there may be \"user level\" errors (ie: bad input) deliberately generated\n      //      by the testcase.  we're going to immediately catch & re-throw any exceptions, so we don't\n      //      need/want to be wrapped in a LoggingCallable w/getBackgroundTaskFailureCount() tracking\n      Future<SolrResponse> rsp = simCloudManagerPool.submit(() -> simHandleSolrRequest(req));\n      return rsp.get(120, TimeUnit.SECONDS); // longer then this and something is seriously wrong\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"daa0f21a44e235a2299ea1fa913898b182dd7cce","date":1590952026,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimCloudManager#request(SolrRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimCloudManager#request(SolrRequest).mjava","sourceNew":"  @Override\n  @SuppressWarnings({\"rawtypes\"})\n  public SolrResponse request(SolrRequest req) throws IOException {\n    try {\n      // NOTE: we're doing 2 odd things here:\n      // 1) rather then calling simHandleSolrRequest directly, we're submitting it to the\n      //    executor service and immediately waiting on the Future.\n      //    - This can introduce a delays if there are a lot of existing background tasks submitted\n      // 2) we use simCloudManagerPool directly, instead of using the public submit() method\n      //    - this is because there may be \"user level\" errors (ie: bad input) deliberately generated\n      //      by the testcase.  we're going to immediately catch & re-throw any exceptions, so we don't\n      //      need/want to be wrapped in a LoggingCallable w/getBackgroundTaskFailureCount() tracking\n      Future<SolrResponse> rsp = simCloudManagerPool.submit(() -> simHandleSolrRequest(req));\n      return rsp.get(120, TimeUnit.SECONDS); // longer then this and something is seriously wrong\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n\n","sourceOld":"  @Override\n  public SolrResponse request(SolrRequest req) throws IOException {\n    try {\n      // NOTE: we're doing 2 odd things here:\n      // 1) rather then calling simHandleSolrRequest directly, we're submitting it to the\n      //    executor service and immediately waiting on the Future.\n      //    - This can introduce a delays if there are a lot of existing background tasks submitted\n      // 2) we use simCloudManagerPool directly, instead of using the public submit() method\n      //    - this is because there may be \"user level\" errors (ie: bad input) deliberately generated\n      //      by the testcase.  we're going to immediately catch & re-throw any exceptions, so we don't\n      //      need/want to be wrapped in a LoggingCallable w/getBackgroundTaskFailureCount() tracking\n      Future<SolrResponse> rsp = simCloudManagerPool.submit(() -> simHandleSolrRequest(req));\n      return rsp.get(120, TimeUnit.SECONDS); // longer then this and something is seriously wrong\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimCloudManager#request(SolrRequest).mjava","sourceNew":null,"sourceOld":"  @Override\n  @SuppressWarnings({\"rawtypes\"})\n  public SolrResponse request(SolrRequest req) throws IOException {\n    try {\n      // NOTE: we're doing 2 odd things here:\n      // 1) rather then calling simHandleSolrRequest directly, we're submitting it to the\n      //    executor service and immediately waiting on the Future.\n      //    - This can introduce a delays if there are a lot of existing background tasks submitted\n      // 2) we use simCloudManagerPool directly, instead of using the public submit() method\n      //    - this is because there may be \"user level\" errors (ie: bad input) deliberately generated\n      //      by the testcase.  we're going to immediately catch & re-throw any exceptions, so we don't\n      //      need/want to be wrapped in a LoggingCallable w/getBackgroundTaskFailureCount() tracking\n      Future<SolrResponse> rsp = simCloudManagerPool.submit(() -> simHandleSolrRequest(req));\n      return rsp.get(120, TimeUnit.SECONDS); // longer then this and something is seriously wrong\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f504512a03d978990cbff30db0522b354e846db":["daa0f21a44e235a2299ea1fa913898b182dd7cce"],"daa0f21a44e235a2299ea1fa913898b182dd7cce":["9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"daa0f21a44e235a2299ea1fa913898b182dd7cce":["3f504512a03d978990cbff30db0522b354e846db"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5"],"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5":["daa0f21a44e235a2299ea1fa913898b182dd7cce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}