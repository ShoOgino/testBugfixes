{"path":"src/test/org/apache/solr/request/JSONWriterTest#testNaNInf().mjava","commits":[{"id":"90b06bdf14dac8ce4e8baad877c7ecf48dcf37cc","date":1199407069,"type":0,"author":"Mike Klaas","isMerge":false,"pathNew":"src/test/org/apache/solr/request/JSONWriterTest#testNaNInf().mjava","pathOld":"/dev/null","sourceNew":"  public void testNaNInf() throws IOException {\n    SolrQueryRequest req = req(\"dummy\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    QueryResponseWriter w = new PythonResponseWriter();\n\n    StringWriter buf = new StringWriter();\n    rsp.add(\"data1\", Float.NaN);\n    rsp.add(\"data2\", Double.NEGATIVE_INFINITY);\n    rsp.add(\"data3\", Float.POSITIVE_INFINITY);\n    w.write(buf, req, rsp);\n    assertEquals(buf.toString(), \"{'data1':float('NaN'),'data2':-float('Inf'),'data3':float('Inf')}\");\n\n    w = new RubyResponseWriter();\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(buf.toString(), \"{'data1'=>(0.0/0.0),'data2'=>-(1.0/0.0),'data3'=>(1.0/0.0)}\");\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae248910a22eb7d1b6bd9ade7f9a33dfc0506f0c","date":1208435858,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/test/org/apache/solr/request/JSONWriterTest#testNaNInf().mjava","pathOld":"src/test/org/apache/solr/request/JSONWriterTest#testNaNInf().mjava","sourceNew":"  public void testNaNInf() throws IOException {\n    SolrQueryRequest req = req(\"dummy\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    QueryResponseWriter w = new PythonResponseWriter();\n\n    StringWriter buf = new StringWriter();\n    rsp.add(\"data1\", Float.NaN);\n    rsp.add(\"data2\", Double.NEGATIVE_INFINITY);\n    rsp.add(\"data3\", Float.POSITIVE_INFINITY);\n    w.write(buf, req, rsp);\n    assertEquals(buf.toString(), \"{'responseHeader':{},'data1':float('NaN'),'data2':-float('Inf'),'data3':float('Inf')}\");\n\n    w = new RubyResponseWriter();\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(buf.toString(), \"{'responseHeader'=>{},'data1'=>(0.0/0.0),'data2'=>-(1.0/0.0),'data3'=>(1.0/0.0)}\");\n\n  }\n\n","sourceOld":"  public void testNaNInf() throws IOException {\n    SolrQueryRequest req = req(\"dummy\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    QueryResponseWriter w = new PythonResponseWriter();\n\n    StringWriter buf = new StringWriter();\n    rsp.add(\"data1\", Float.NaN);\n    rsp.add(\"data2\", Double.NEGATIVE_INFINITY);\n    rsp.add(\"data3\", Float.POSITIVE_INFINITY);\n    w.write(buf, req, rsp);\n    assertEquals(buf.toString(), \"{'data1':float('NaN'),'data2':-float('Inf'),'data3':float('Inf')}\");\n\n    w = new RubyResponseWriter();\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(buf.toString(), \"{'data1'=>(0.0/0.0),'data2'=>-(1.0/0.0),'data3'=>(1.0/0.0)}\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"33b9bfa7d5034aab0430a310b0c9f2063b8c1531","date":1208451475,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/test/org/apache/solr/request/JSONWriterTest#testNaNInf().mjava","pathOld":"src/test/org/apache/solr/request/JSONWriterTest#testNaNInf().mjava","sourceNew":"  public void testNaNInf() throws IOException {\n    SolrQueryRequest req = req(\"dummy\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    QueryResponseWriter w = new PythonResponseWriter();\n\n    StringWriter buf = new StringWriter();\n    rsp.add(\"data1\", Float.NaN);\n    rsp.add(\"data2\", Double.NEGATIVE_INFINITY);\n    rsp.add(\"data3\", Float.POSITIVE_INFINITY);\n    w.write(buf, req, rsp);\n    assertEquals(buf.toString(), \"{'data1':float('NaN'),'data2':-float('Inf'),'data3':float('Inf')}\");\n\n    w = new RubyResponseWriter();\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(buf.toString(), \"{'data1'=>(0.0/0.0),'data2'=>-(1.0/0.0),'data3'=>(1.0/0.0)}\");\n\n  }\n\n","sourceOld":"  public void testNaNInf() throws IOException {\n    SolrQueryRequest req = req(\"dummy\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    QueryResponseWriter w = new PythonResponseWriter();\n\n    StringWriter buf = new StringWriter();\n    rsp.add(\"data1\", Float.NaN);\n    rsp.add(\"data2\", Double.NEGATIVE_INFINITY);\n    rsp.add(\"data3\", Float.POSITIVE_INFINITY);\n    w.write(buf, req, rsp);\n    assertEquals(buf.toString(), \"{'responseHeader':{},'data1':float('NaN'),'data2':-float('Inf'),'data3':float('Inf')}\");\n\n    w = new RubyResponseWriter();\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(buf.toString(), \"{'responseHeader'=>{},'data1'=>(0.0/0.0),'data2'=>-(1.0/0.0),'data3'=>(1.0/0.0)}\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/request/JSONWriterTest#testNaNInf().mjava","pathOld":"src/test/org/apache/solr/request/JSONWriterTest#testNaNInf().mjava","sourceNew":"  public void testNaNInf() throws IOException {\n    SolrQueryRequest req = req(\"dummy\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    QueryResponseWriter w = new PythonResponseWriter();\n\n    StringWriter buf = new StringWriter();\n    rsp.add(\"data1\", Float.NaN);\n    rsp.add(\"data2\", Double.NEGATIVE_INFINITY);\n    rsp.add(\"data3\", Float.POSITIVE_INFINITY);\n    w.write(buf, req, rsp);\n    assertEquals(buf.toString(), \"{'data1':float('NaN'),'data2':-float('Inf'),'data3':float('Inf')}\");\n\n    w = new RubyResponseWriter();\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(buf.toString(), \"{'data1'=>(0.0/0.0),'data2'=>-(1.0/0.0),'data3'=>(1.0/0.0)}\");\n\n  }\n\n","sourceOld":"  public void testNaNInf() throws IOException {\n    SolrQueryRequest req = req(\"dummy\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    QueryResponseWriter w = new PythonResponseWriter();\n\n    StringWriter buf = new StringWriter();\n    rsp.add(\"data1\", Float.NaN);\n    rsp.add(\"data2\", Double.NEGATIVE_INFINITY);\n    rsp.add(\"data3\", Float.POSITIVE_INFINITY);\n    w.write(buf, req, rsp);\n    assertEquals(buf.toString(), \"{'data1':float('NaN'),'data2':-float('Inf'),'data3':float('Inf')}\");\n\n    w = new RubyResponseWriter();\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(buf.toString(), \"{'data1'=>(0.0/0.0),'data2'=>-(1.0/0.0),'data3'=>(1.0/0.0)}\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"33b9bfa7d5034aab0430a310b0c9f2063b8c1531":["ae248910a22eb7d1b6bd9ade7f9a33dfc0506f0c"],"ae248910a22eb7d1b6bd9ade7f9a33dfc0506f0c":["90b06bdf14dac8ce4e8baad877c7ecf48dcf37cc"],"90b06bdf14dac8ce4e8baad877c7ecf48dcf37cc":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["33b9bfa7d5034aab0430a310b0c9f2063b8c1531"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"33b9bfa7d5034aab0430a310b0c9f2063b8c1531":["ad94625fb8d088209f46650c8097196fec67f00c"],"ae248910a22eb7d1b6bd9ade7f9a33dfc0506f0c":["33b9bfa7d5034aab0430a310b0c9f2063b8c1531"],"90b06bdf14dac8ce4e8baad877c7ecf48dcf37cc":["ae248910a22eb7d1b6bd9ade7f9a33dfc0506f0c"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["90b06bdf14dac8ce4e8baad877c7ecf48dcf37cc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}