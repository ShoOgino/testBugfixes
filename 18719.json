{"path":"solr/core/src/java/org/apache/solr/handler/admin/SystemInfoHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/SystemInfoHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/src/java/org/apache/solr/handler/admin/SystemInfoHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception\n  {\n    rsp.add( \"core\", getCoreInfo( req.getCore() ) );\n    rsp.add( \"lucene\", getLuceneInfo() );\n    rsp.add( \"jvm\", getJvmInfo() );\n    rsp.add( \"system\", getSystemInfo() );\n    rsp.setHttpCaching(false);\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception\n  {\n    rsp.add( \"core\", getCoreInfo( req.getCore() ) );\n    rsp.add( \"lucene\", getLuceneInfo() );\n    rsp.add( \"jvm\", getJvmInfo() );\n    rsp.add( \"system\", getSystemInfo() );\n    rsp.setHttpCaching(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/SystemInfoHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/src/java/org/apache/solr/handler/admin/SystemInfoHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception\n  {\n    rsp.add( \"core\", getCoreInfo( req.getCore() ) );\n    rsp.add( \"lucene\", getLuceneInfo() );\n    rsp.add( \"jvm\", getJvmInfo() );\n    rsp.add( \"system\", getSystemInfo() );\n    rsp.setHttpCaching(false);\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception\n  {\n    rsp.add( \"core\", getCoreInfo( req.getCore() ) );\n    rsp.add( \"lucene\", getLuceneInfo() );\n    rsp.add( \"jvm\", getJvmInfo() );\n    rsp.add( \"system\", getSystemInfo() );\n    rsp.setHttpCaching(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/SystemInfoHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/src/java/org/apache/solr/handler/admin/SystemInfoHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception\n  {\n    rsp.add( \"core\", getCoreInfo( req.getCore() ) );\n    rsp.add( \"lucene\", getLuceneInfo() );\n    rsp.add( \"jvm\", getJvmInfo() );\n    rsp.add( \"system\", getSystemInfo() );\n    rsp.setHttpCaching(false);\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception\n  {\n    rsp.add( \"core\", getCoreInfo( req.getCore() ) );\n    rsp.add( \"lucene\", getLuceneInfo() );\n    rsp.add( \"jvm\", getJvmInfo() );\n    rsp.add( \"system\", getSystemInfo() );\n    rsp.setHttpCaching(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2d9b37385e245fc3f250c134658c9889a287ec92","date":1361978103,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/SystemInfoHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/SystemInfoHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception\n  {\n    rsp.add( \"core\", getCoreInfo( req.getCore() ) );\n    boolean solrCloudMode = req.getCore().getCoreDescriptor().getCoreContainer().isZooKeeperAware();\n    rsp.add( \"mode\", solrCloudMode ? \"solrcloud\" : \"std\");\n    rsp.add( \"lucene\", getLuceneInfo() );\n    rsp.add( \"jvm\", getJvmInfo() );\n    rsp.add( \"system\", getSystemInfo() );\n    rsp.setHttpCaching(false);\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception\n  {\n    rsp.add( \"core\", getCoreInfo( req.getCore() ) );\n    rsp.add( \"lucene\", getLuceneInfo() );\n    rsp.add( \"jvm\", getJvmInfo() );\n    rsp.add( \"system\", getSystemInfo() );\n    rsp.setHttpCaching(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"08970e5b8411182a29412c177eff67ec1110095b","date":1366640815,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/SystemInfoHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/SystemInfoHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception\n  {\n    rsp.add( \"core\", getCoreInfo( req.getCore(), req.getSchema() ) );\n    boolean solrCloudMode = req.getCore().getCoreDescriptor().getCoreContainer().isZooKeeperAware();\n    rsp.add( \"mode\", solrCloudMode ? \"solrcloud\" : \"std\");\n    rsp.add( \"lucene\", getLuceneInfo() );\n    rsp.add( \"jvm\", getJvmInfo() );\n    rsp.add( \"system\", getSystemInfo() );\n    rsp.setHttpCaching(false);\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception\n  {\n    rsp.add( \"core\", getCoreInfo( req.getCore() ) );\n    boolean solrCloudMode = req.getCore().getCoreDescriptor().getCoreContainer().isZooKeeperAware();\n    rsp.add( \"mode\", solrCloudMode ? \"solrcloud\" : \"std\");\n    rsp.add( \"lucene\", getLuceneInfo() );\n    rsp.add( \"jvm\", getJvmInfo() );\n    rsp.add( \"system\", getSystemInfo() );\n    rsp.setHttpCaching(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b64a893a6d2efaa60e289534b1f8713e4aa2c776","date":1373480880,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/SystemInfoHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/SystemInfoHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception\n  {\n    SolrCore core = req.getCore();\n    if (core != null) rsp.add( \"core\", getCoreInfo( core, req.getSchema() ) );\n    boolean solrCloudMode =  getCoreContainer(req, core).isZooKeeperAware();\n    rsp.add( \"mode\", solrCloudMode ? \"solrcloud\" : \"std\");\n    rsp.add( \"lucene\", getLuceneInfo() );\n    rsp.add( \"jvm\", getJvmInfo() );\n    rsp.add( \"system\", getSystemInfo() );\n    rsp.setHttpCaching(false);\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception\n  {\n    rsp.add( \"core\", getCoreInfo( req.getCore(), req.getSchema() ) );\n    boolean solrCloudMode = req.getCore().getCoreDescriptor().getCoreContainer().isZooKeeperAware();\n    rsp.add( \"mode\", solrCloudMode ? \"solrcloud\" : \"std\");\n    rsp.add( \"lucene\", getLuceneInfo() );\n    rsp.add( \"jvm\", getJvmInfo() );\n    rsp.add( \"system\", getSystemInfo() );\n    rsp.setHttpCaching(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/SystemInfoHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/SystemInfoHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception\n  {\n    SolrCore core = req.getCore();\n    if (core != null) rsp.add( \"core\", getCoreInfo( core, req.getSchema() ) );\n    boolean solrCloudMode =  getCoreContainer(req, core).isZooKeeperAware();\n    rsp.add( \"mode\", solrCloudMode ? \"solrcloud\" : \"std\");\n    rsp.add( \"lucene\", getLuceneInfo() );\n    rsp.add( \"jvm\", getJvmInfo() );\n    rsp.add( \"system\", getSystemInfo() );\n    rsp.setHttpCaching(false);\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception\n  {\n    rsp.add( \"core\", getCoreInfo( req.getCore(), req.getSchema() ) );\n    boolean solrCloudMode = req.getCore().getCoreDescriptor().getCoreContainer().isZooKeeperAware();\n    rsp.add( \"mode\", solrCloudMode ? \"solrcloud\" : \"std\");\n    rsp.add( \"lucene\", getLuceneInfo() );\n    rsp.add( \"jvm\", getJvmInfo() );\n    rsp.add( \"system\", getSystemInfo() );\n    rsp.setHttpCaching(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c15d10e700377c05e882f40d3fab68b6db47d2e5","date":1413986858,"type":3,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/SystemInfoHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/SystemInfoHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception\n  {\n    SolrCore core = req.getCore();\n    if (core != null) rsp.add( \"core\", getCoreInfo( core, req.getSchema() ) );\n    boolean solrCloudMode =  getCoreContainer(req, core).isZooKeeperAware();\n    rsp.add( \"mode\", solrCloudMode ? \"solrcloud\" : \"std\");\n    if (solrCloudMode) {\n      rsp.add(\"zkHost\", getCoreContainer(req, core).getZkController().getZkServerAddress());\n    }\n    rsp.add( \"lucene\", getLuceneInfo() );\n    rsp.add( \"jvm\", getJvmInfo() );\n    rsp.add( \"system\", getSystemInfo() );\n    rsp.setHttpCaching(false);\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception\n  {\n    SolrCore core = req.getCore();\n    if (core != null) rsp.add( \"core\", getCoreInfo( core, req.getSchema() ) );\n    boolean solrCloudMode =  getCoreContainer(req, core).isZooKeeperAware();\n    rsp.add( \"mode\", solrCloudMode ? \"solrcloud\" : \"std\");\n    rsp.add( \"lucene\", getLuceneInfo() );\n    rsp.add( \"jvm\", getJvmInfo() );\n    rsp.add( \"system\", getSystemInfo() );\n    rsp.setHttpCaching(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1b1713aa2c66e65f3f024e9c3c4876dfed130ceb","date":1417043528,"type":3,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/SystemInfoHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/SystemInfoHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception\n  {\n    SolrCore core = req.getCore();\n    if (core != null) rsp.add( \"core\", getCoreInfo( core, req.getSchema() ) );\n    boolean solrCloudMode =  getCoreContainer(req, core).isZooKeeperAware();\n    rsp.add( \"mode\", solrCloudMode ? \"solrcloud\" : \"std\");\n    if (solrCloudMode) {\n      rsp.add(\"zkHost\", getCoreContainer(req, core).getZkController().getZkServerAddress());\n    }\n    rsp.add( \"solr_home\", cc.getSolrHome());\n    rsp.add( \"lucene\", getLuceneInfo() );\n    rsp.add( \"jvm\", getJvmInfo() );\n    rsp.add( \"system\", getSystemInfo() );\n    rsp.setHttpCaching(false);\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception\n  {\n    SolrCore core = req.getCore();\n    if (core != null) rsp.add( \"core\", getCoreInfo( core, req.getSchema() ) );\n    boolean solrCloudMode =  getCoreContainer(req, core).isZooKeeperAware();\n    rsp.add( \"mode\", solrCloudMode ? \"solrcloud\" : \"std\");\n    if (solrCloudMode) {\n      rsp.add(\"zkHost\", getCoreContainer(req, core).getZkController().getZkServerAddress());\n    }\n    rsp.add( \"lucene\", getLuceneInfo() );\n    rsp.add( \"jvm\", getJvmInfo() );\n    rsp.add( \"system\", getSystemInfo() );\n    rsp.setHttpCaching(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"de61d3b77112a94b379d2024189c8db8a64b0d19","date":1417058576,"type":3,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/SystemInfoHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/SystemInfoHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception\n  {\n    SolrCore core = req.getCore();\n    if (core != null) rsp.add( \"core\", getCoreInfo( core, req.getSchema() ) );\n    boolean solrCloudMode =  getCoreContainer(req, core).isZooKeeperAware();\n    rsp.add( \"mode\", solrCloudMode ? \"solrcloud\" : \"std\");\n    if (solrCloudMode) {\n      rsp.add(\"zkHost\", getCoreContainer(req, core).getZkController().getZkServerAddress());\n    }\n    if (cc != null)\n      rsp.add( \"solr_home\", cc.getSolrHome());\n    rsp.add( \"lucene\", getLuceneInfo() );\n    rsp.add( \"jvm\", getJvmInfo() );\n    rsp.add( \"system\", getSystemInfo() );\n    rsp.setHttpCaching(false);\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception\n  {\n    SolrCore core = req.getCore();\n    if (core != null) rsp.add( \"core\", getCoreInfo( core, req.getSchema() ) );\n    boolean solrCloudMode =  getCoreContainer(req, core).isZooKeeperAware();\n    rsp.add( \"mode\", solrCloudMode ? \"solrcloud\" : \"std\");\n    if (solrCloudMode) {\n      rsp.add(\"zkHost\", getCoreContainer(req, core).getZkController().getZkServerAddress());\n    }\n    rsp.add( \"solr_home\", cc.getSolrHome());\n    rsp.add( \"lucene\", getLuceneInfo() );\n    rsp.add( \"jvm\", getJvmInfo() );\n    rsp.add( \"system\", getSystemInfo() );\n    rsp.setHttpCaching(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"750239682d222924398443d581163940f48d68fc","date":1533297311,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/SystemInfoHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/SystemInfoHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception\n  {\n    rsp.setHttpCaching(false);\n    SolrCore core = req.getCore();\n    if (AdminHandlersProxy.maybeProxyToNodes(req, rsp, getCoreContainer(req, core))) {\n      return; // Request was proxied to other node\n    }\n    if (core != null) rsp.add( \"core\", getCoreInfo( core, req.getSchema() ) );\n    boolean solrCloudMode =  getCoreContainer(req, core).isZooKeeperAware();\n    rsp.add( \"mode\", solrCloudMode ? \"solrcloud\" : \"std\");\n    if (solrCloudMode) {\n      rsp.add(\"zkHost\", getCoreContainer(req, core).getZkController().getZkServerAddress());\n    }\n    if (cc != null)\n      rsp.add( \"solr_home\", cc.getSolrHome());\n    rsp.add( \"lucene\", getLuceneInfo() );\n    rsp.add( \"jvm\", getJvmInfo() );\n    rsp.add( \"system\", getSystemInfo() );\n    if (solrCloudMode) {\n      rsp.add(\"node\", getCoreContainer(req, core).getZkController().getNodeName());\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception\n  {\n    SolrCore core = req.getCore();\n    if (core != null) rsp.add( \"core\", getCoreInfo( core, req.getSchema() ) );\n    boolean solrCloudMode =  getCoreContainer(req, core).isZooKeeperAware();\n    rsp.add( \"mode\", solrCloudMode ? \"solrcloud\" : \"std\");\n    if (solrCloudMode) {\n      rsp.add(\"zkHost\", getCoreContainer(req, core).getZkController().getZkServerAddress());\n    }\n    if (cc != null)\n      rsp.add( \"solr_home\", cc.getSolrHome());\n    rsp.add( \"lucene\", getLuceneInfo() );\n    rsp.add( \"jvm\", getJvmInfo() );\n    rsp.add( \"system\", getSystemInfo() );\n    rsp.setHttpCaching(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f73fda188030be2885c2937e18b3aeaaf66632c","date":1561543742,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/SystemInfoHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/SystemInfoHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception\n  {\n    rsp.setHttpCaching(false);\n    SolrCore core = req.getCore();\n    if (AdminHandlersProxy.maybeProxyToNodes(req, rsp, getCoreContainer(req, core))) {\n      return; // Request was proxied to other node\n    }\n    if (core != null) rsp.add( \"core\", getCoreInfo( core, req.getSchema() ) );\n    boolean solrCloudMode =  getCoreContainer(req, core).isZooKeeperAware();\n    rsp.add( \"mode\", solrCloudMode ? \"solrcloud\" : \"std\");\n    if (solrCloudMode) {\n      rsp.add(\"zkHost\", getCoreContainer(req, core).getZkController().getZkServerAddress());\n    }\n    if (cc != null)\n      rsp.add( \"solr_home\", cc.getSolrHome());\n    rsp.add( \"lucene\", getLuceneInfo() );\n    rsp.add( \"jvm\", getJvmInfo() );\n    rsp.add( \"system\", getSystemInfo() );\n    if (solrCloudMode) {\n      rsp.add(\"node\", getCoreContainer(req, core).getZkController().getNodeName());\n    }\n    SolrEnvironment env = SolrEnvironment.getFromSyspropOrClusterprop(solrCloudMode ?\n        getCoreContainer(req, core).getZkController().zkStateReader : null);\n    if (env.isDefined()) {\n      rsp.add(\"environment\", env.getCode());\n      if (env.getLabel() != null) {\n        rsp.add(\"environment_label\", env.getLabel());\n      }\n      if (env.getColor() != null) {\n        rsp.add(\"environment_color\", env.getColor());\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception\n  {\n    rsp.setHttpCaching(false);\n    SolrCore core = req.getCore();\n    if (AdminHandlersProxy.maybeProxyToNodes(req, rsp, getCoreContainer(req, core))) {\n      return; // Request was proxied to other node\n    }\n    if (core != null) rsp.add( \"core\", getCoreInfo( core, req.getSchema() ) );\n    boolean solrCloudMode =  getCoreContainer(req, core).isZooKeeperAware();\n    rsp.add( \"mode\", solrCloudMode ? \"solrcloud\" : \"std\");\n    if (solrCloudMode) {\n      rsp.add(\"zkHost\", getCoreContainer(req, core).getZkController().getZkServerAddress());\n    }\n    if (cc != null)\n      rsp.add( \"solr_home\", cc.getSolrHome());\n    rsp.add( \"lucene\", getLuceneInfo() );\n    rsp.add( \"jvm\", getJvmInfo() );\n    rsp.add( \"system\", getSystemInfo() );\n    if (solrCloudMode) {\n      rsp.add(\"node\", getCoreContainer(req, core).getZkController().getNodeName());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7d05e957cb88bdd266409dea8cc4cbffb365204f","date":1588179853,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/SystemInfoHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/SystemInfoHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception\n  {\n    rsp.setHttpCaching(false);\n    SolrCore core = req.getCore();\n    if (AdminHandlersProxy.maybeProxyToNodes(req, rsp, getCoreContainer(req, core))) {\n      return; // Request was proxied to other node\n    }\n    if (core != null) rsp.add( \"core\", getCoreInfo( core, req.getSchema() ) );\n    boolean solrCloudMode =  getCoreContainer(req, core).isZooKeeperAware();\n    rsp.add( \"mode\", solrCloudMode ? \"solrcloud\" : \"std\");\n    if (solrCloudMode) {\n      rsp.add(\"zkHost\", getCoreContainer(req, core).getZkController().getZkServerAddress());\n    }\n    if (cc != null)\n      rsp.add( \"solr_home\", cc.getSolrHome());\n    rsp.add( \"lucene\", getLuceneInfo() );\n    rsp.add( \"jvm\", getJvmInfo() );\n    rsp.add( \"user\", getSecurityInfo(req) );\n    rsp.add( \"system\", getSystemInfo() );\n    if (solrCloudMode) {\n      rsp.add(\"node\", getCoreContainer(req, core).getZkController().getNodeName());\n    }\n    SolrEnvironment env = SolrEnvironment.getFromSyspropOrClusterprop(solrCloudMode ?\n        getCoreContainer(req, core).getZkController().zkStateReader : null);\n    if (env.isDefined()) {\n      rsp.add(\"environment\", env.getCode());\n      if (env.getLabel() != null) {\n        rsp.add(\"environment_label\", env.getLabel());\n      }\n      if (env.getColor() != null) {\n        rsp.add(\"environment_color\", env.getColor());\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception\n  {\n    rsp.setHttpCaching(false);\n    SolrCore core = req.getCore();\n    if (AdminHandlersProxy.maybeProxyToNodes(req, rsp, getCoreContainer(req, core))) {\n      return; // Request was proxied to other node\n    }\n    if (core != null) rsp.add( \"core\", getCoreInfo( core, req.getSchema() ) );\n    boolean solrCloudMode =  getCoreContainer(req, core).isZooKeeperAware();\n    rsp.add( \"mode\", solrCloudMode ? \"solrcloud\" : \"std\");\n    if (solrCloudMode) {\n      rsp.add(\"zkHost\", getCoreContainer(req, core).getZkController().getZkServerAddress());\n    }\n    if (cc != null)\n      rsp.add( \"solr_home\", cc.getSolrHome());\n    rsp.add( \"lucene\", getLuceneInfo() );\n    rsp.add( \"jvm\", getJvmInfo() );\n    rsp.add( \"system\", getSystemInfo() );\n    if (solrCloudMode) {\n      rsp.add(\"node\", getCoreContainer(req, core).getZkController().getNodeName());\n    }\n    SolrEnvironment env = SolrEnvironment.getFromSyspropOrClusterprop(solrCloudMode ?\n        getCoreContainer(req, core).getZkController().zkStateReader : null);\n    if (env.isDefined()) {\n      rsp.add(\"environment\", env.getCode());\n      if (env.getLabel() != null) {\n        rsp.add(\"environment_label\", env.getLabel());\n      }\n      if (env.getColor() != null) {\n        rsp.add(\"environment_color\", env.getColor());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cd50d954b2f6657fbb93286e3dab261c58356c2b","date":1588180459,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/SystemInfoHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/SystemInfoHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception\n  {\n    rsp.setHttpCaching(false);\n    SolrCore core = req.getCore();\n    if (AdminHandlersProxy.maybeProxyToNodes(req, rsp, getCoreContainer(req, core))) {\n      return; // Request was proxied to other node\n    }\n    if (core != null) rsp.add( \"core\", getCoreInfo( core, req.getSchema() ) );\n    boolean solrCloudMode =  getCoreContainer(req, core).isZooKeeperAware();\n    rsp.add( \"mode\", solrCloudMode ? \"solrcloud\" : \"std\");\n    if (solrCloudMode) {\n      rsp.add(\"zkHost\", getCoreContainer(req, core).getZkController().getZkServerAddress());\n    }\n    if (cc != null)\n      rsp.add( \"solr_home\", cc.getSolrHome());\n    rsp.add( \"lucene\", getLuceneInfo() );\n    rsp.add( \"jvm\", getJvmInfo() );\n    rsp.add( \"security\", getSecurityInfo(req) );\n    rsp.add( \"system\", getSystemInfo() );\n    if (solrCloudMode) {\n      rsp.add(\"node\", getCoreContainer(req, core).getZkController().getNodeName());\n    }\n    SolrEnvironment env = SolrEnvironment.getFromSyspropOrClusterprop(solrCloudMode ?\n        getCoreContainer(req, core).getZkController().zkStateReader : null);\n    if (env.isDefined()) {\n      rsp.add(\"environment\", env.getCode());\n      if (env.getLabel() != null) {\n        rsp.add(\"environment_label\", env.getLabel());\n      }\n      if (env.getColor() != null) {\n        rsp.add(\"environment_color\", env.getColor());\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception\n  {\n    rsp.setHttpCaching(false);\n    SolrCore core = req.getCore();\n    if (AdminHandlersProxy.maybeProxyToNodes(req, rsp, getCoreContainer(req, core))) {\n      return; // Request was proxied to other node\n    }\n    if (core != null) rsp.add( \"core\", getCoreInfo( core, req.getSchema() ) );\n    boolean solrCloudMode =  getCoreContainer(req, core).isZooKeeperAware();\n    rsp.add( \"mode\", solrCloudMode ? \"solrcloud\" : \"std\");\n    if (solrCloudMode) {\n      rsp.add(\"zkHost\", getCoreContainer(req, core).getZkController().getZkServerAddress());\n    }\n    if (cc != null)\n      rsp.add( \"solr_home\", cc.getSolrHome());\n    rsp.add( \"lucene\", getLuceneInfo() );\n    rsp.add( \"jvm\", getJvmInfo() );\n    rsp.add( \"user\", getSecurityInfo(req) );\n    rsp.add( \"system\", getSystemInfo() );\n    if (solrCloudMode) {\n      rsp.add(\"node\", getCoreContainer(req, core).getZkController().getNodeName());\n    }\n    SolrEnvironment env = SolrEnvironment.getFromSyspropOrClusterprop(solrCloudMode ?\n        getCoreContainer(req, core).getZkController().zkStateReader : null);\n    if (env.isDefined()) {\n      rsp.add(\"environment\", env.getCode());\n      if (env.getLabel() != null) {\n        rsp.add(\"environment_label\", env.getLabel());\n      }\n      if (env.getColor() != null) {\n        rsp.add(\"environment_color\", env.getColor());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1c1a5ff05c56300b1141fab1edd1a2384f7f9d61","date":1600567623,"type":3,"author":"Alexandre Rafalovitch","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/SystemInfoHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/SystemInfoHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception\n  {\n    rsp.setHttpCaching(false);\n    SolrCore core = req.getCore();\n    if (AdminHandlersProxy.maybeProxyToNodes(req, rsp, getCoreContainer(req, core))) {\n      return; // Request was proxied to other node\n    }\n    if (core != null) rsp.add( \"core\", getCoreInfo( core, req.getSchema() ) );\n    boolean solrCloudMode =  getCoreContainer(req, core).isZooKeeperAware();\n    rsp.add( \"mode\", solrCloudMode ? \"solrcloud\" : \"std\");\n    if (solrCloudMode) {\n      rsp.add(\"zkHost\", getCoreContainer(req, core).getZkController().getZkServerAddress());\n    }\n    if (cc != null) {\n      String solrHome = cc.getSolrHome();\n      rsp.add(\"solr_home\", solrHome);\n\n      Path coreRootDirectory = cc.getCoreRootDirectory();\n      if (coreRootDirectory != null) {\n        String coreRootDirectoryString = coreRootDirectory.toString();\n        if (!coreRootDirectoryString.equals(solrHome)) {\n          rsp.add(\"solr_core_root\", coreRootDirectoryString);\n        }\n      }\n    }\n\n    rsp.add( \"lucene\", getLuceneInfo() );\n    rsp.add( \"jvm\", getJvmInfo() );\n    rsp.add( \"security\", getSecurityInfo(req) );\n    rsp.add( \"system\", getSystemInfo() );\n    if (solrCloudMode) {\n      rsp.add(\"node\", getCoreContainer(req, core).getZkController().getNodeName());\n    }\n    SolrEnvironment env = SolrEnvironment.getFromSyspropOrClusterprop(solrCloudMode ?\n        getCoreContainer(req, core).getZkController().zkStateReader : null);\n    if (env.isDefined()) {\n      rsp.add(\"environment\", env.getCode());\n      if (env.getLabel() != null) {\n        rsp.add(\"environment_label\", env.getLabel());\n      }\n      if (env.getColor() != null) {\n        rsp.add(\"environment_color\", env.getColor());\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception\n  {\n    rsp.setHttpCaching(false);\n    SolrCore core = req.getCore();\n    if (AdminHandlersProxy.maybeProxyToNodes(req, rsp, getCoreContainer(req, core))) {\n      return; // Request was proxied to other node\n    }\n    if (core != null) rsp.add( \"core\", getCoreInfo( core, req.getSchema() ) );\n    boolean solrCloudMode =  getCoreContainer(req, core).isZooKeeperAware();\n    rsp.add( \"mode\", solrCloudMode ? \"solrcloud\" : \"std\");\n    if (solrCloudMode) {\n      rsp.add(\"zkHost\", getCoreContainer(req, core).getZkController().getZkServerAddress());\n    }\n    if (cc != null)\n      rsp.add( \"solr_home\", cc.getSolrHome());\n    rsp.add( \"lucene\", getLuceneInfo() );\n    rsp.add( \"jvm\", getJvmInfo() );\n    rsp.add( \"security\", getSecurityInfo(req) );\n    rsp.add( \"system\", getSystemInfo() );\n    if (solrCloudMode) {\n      rsp.add(\"node\", getCoreContainer(req, core).getZkController().getNodeName());\n    }\n    SolrEnvironment env = SolrEnvironment.getFromSyspropOrClusterprop(solrCloudMode ?\n        getCoreContainer(req, core).getZkController().zkStateReader : null);\n    if (env.isDefined()) {\n      rsp.add(\"environment\", env.getCode());\n      if (env.getLabel() != null) {\n        rsp.add(\"environment_label\", env.getLabel());\n      }\n      if (env.getColor() != null) {\n        rsp.add(\"environment_color\", env.getColor());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"51b87c86c466155ca33516db26f04e9c21c1f9d1","date":1600743368,"type":3,"author":"Alexandre Rafalovitch","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/SystemInfoHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/SystemInfoHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception\n  {\n    rsp.setHttpCaching(false);\n    SolrCore core = req.getCore();\n    if (AdminHandlersProxy.maybeProxyToNodes(req, rsp, getCoreContainer(req, core))) {\n      return; // Request was proxied to other node\n    }\n    if (core != null) rsp.add( \"core\", getCoreInfo( core, req.getSchema() ) );\n    boolean solrCloudMode =  getCoreContainer(req, core).isZooKeeperAware();\n    rsp.add( \"mode\", solrCloudMode ? \"solrcloud\" : \"std\");\n    if (solrCloudMode) {\n      rsp.add(\"zkHost\", getCoreContainer(req, core).getZkController().getZkServerAddress());\n    }\n    if (cc != null) {\n      rsp.add(\"solr_home\", cc.getSolrHome());\n      rsp.add(\"core_root\", cc.getCoreRootDirectory().toString());\n    }\n\n    rsp.add( \"lucene\", getLuceneInfo() );\n    rsp.add( \"jvm\", getJvmInfo() );\n    rsp.add( \"security\", getSecurityInfo(req) );\n    rsp.add( \"system\", getSystemInfo() );\n    if (solrCloudMode) {\n      rsp.add(\"node\", getCoreContainer(req, core).getZkController().getNodeName());\n    }\n    SolrEnvironment env = SolrEnvironment.getFromSyspropOrClusterprop(solrCloudMode ?\n        getCoreContainer(req, core).getZkController().zkStateReader : null);\n    if (env.isDefined()) {\n      rsp.add(\"environment\", env.getCode());\n      if (env.getLabel() != null) {\n        rsp.add(\"environment_label\", env.getLabel());\n      }\n      if (env.getColor() != null) {\n        rsp.add(\"environment_color\", env.getColor());\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception\n  {\n    rsp.setHttpCaching(false);\n    SolrCore core = req.getCore();\n    if (AdminHandlersProxy.maybeProxyToNodes(req, rsp, getCoreContainer(req, core))) {\n      return; // Request was proxied to other node\n    }\n    if (core != null) rsp.add( \"core\", getCoreInfo( core, req.getSchema() ) );\n    boolean solrCloudMode =  getCoreContainer(req, core).isZooKeeperAware();\n    rsp.add( \"mode\", solrCloudMode ? \"solrcloud\" : \"std\");\n    if (solrCloudMode) {\n      rsp.add(\"zkHost\", getCoreContainer(req, core).getZkController().getZkServerAddress());\n    }\n    if (cc != null) {\n      String solrHome = cc.getSolrHome();\n      rsp.add(\"solr_home\", solrHome);\n\n      Path coreRootDirectory = cc.getCoreRootDirectory();\n      if (coreRootDirectory != null) {\n        String coreRootDirectoryString = coreRootDirectory.toString();\n        if (!coreRootDirectoryString.equals(solrHome)) {\n          rsp.add(\"solr_core_root\", coreRootDirectoryString);\n        }\n      }\n    }\n\n    rsp.add( \"lucene\", getLuceneInfo() );\n    rsp.add( \"jvm\", getJvmInfo() );\n    rsp.add( \"security\", getSecurityInfo(req) );\n    rsp.add( \"system\", getSystemInfo() );\n    if (solrCloudMode) {\n      rsp.add(\"node\", getCoreContainer(req, core).getZkController().getNodeName());\n    }\n    SolrEnvironment env = SolrEnvironment.getFromSyspropOrClusterprop(solrCloudMode ?\n        getCoreContainer(req, core).getZkController().zkStateReader : null);\n    if (env.isDefined()) {\n      rsp.add(\"environment\", env.getCode());\n      if (env.getLabel() != null) {\n        rsp.add(\"environment_label\", env.getLabel());\n      }\n      if (env.getColor() != null) {\n        rsp.add(\"environment_color\", env.getColor());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"51b87c86c466155ca33516db26f04e9c21c1f9d1":["1c1a5ff05c56300b1141fab1edd1a2384f7f9d61"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["08970e5b8411182a29412c177eff67ec1110095b","b64a893a6d2efaa60e289534b1f8713e4aa2c776"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"7d05e957cb88bdd266409dea8cc4cbffb365204f":["0f73fda188030be2885c2937e18b3aeaaf66632c"],"2d9b37385e245fc3f250c134658c9889a287ec92":["c26f00b574427b55127e869b935845554afde1fa"],"c15d10e700377c05e882f40d3fab68b6db47d2e5":["b64a893a6d2efaa60e289534b1f8713e4aa2c776"],"cd50d954b2f6657fbb93286e3dab261c58356c2b":["7d05e957cb88bdd266409dea8cc4cbffb365204f"],"08970e5b8411182a29412c177eff67ec1110095b":["2d9b37385e245fc3f250c134658c9889a287ec92"],"0f73fda188030be2885c2937e18b3aeaaf66632c":["750239682d222924398443d581163940f48d68fc"],"b64a893a6d2efaa60e289534b1f8713e4aa2c776":["08970e5b8411182a29412c177eff67ec1110095b"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1c1a5ff05c56300b1141fab1edd1a2384f7f9d61":["cd50d954b2f6657fbb93286e3dab261c58356c2b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"de61d3b77112a94b379d2024189c8db8a64b0d19":["1b1713aa2c66e65f3f024e9c3c4876dfed130ceb"],"750239682d222924398443d581163940f48d68fc":["de61d3b77112a94b379d2024189c8db8a64b0d19"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["51b87c86c466155ca33516db26f04e9c21c1f9d1"],"1b1713aa2c66e65f3f024e9c3c4876dfed130ceb":["c15d10e700377c05e882f40d3fab68b6db47d2e5"]},"commit2Childs":{"51b87c86c466155ca33516db26f04e9c21c1f9d1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"c26f00b574427b55127e869b935845554afde1fa":["2d9b37385e245fc3f250c134658c9889a287ec92"],"7d05e957cb88bdd266409dea8cc4cbffb365204f":["cd50d954b2f6657fbb93286e3dab261c58356c2b"],"2d9b37385e245fc3f250c134658c9889a287ec92":["08970e5b8411182a29412c177eff67ec1110095b"],"c15d10e700377c05e882f40d3fab68b6db47d2e5":["1b1713aa2c66e65f3f024e9c3c4876dfed130ceb"],"cd50d954b2f6657fbb93286e3dab261c58356c2b":["1c1a5ff05c56300b1141fab1edd1a2384f7f9d61"],"08970e5b8411182a29412c177eff67ec1110095b":["37a0f60745e53927c4c876cfe5b5a58170f0646c","b64a893a6d2efaa60e289534b1f8713e4aa2c776"],"0f73fda188030be2885c2937e18b3aeaaf66632c":["7d05e957cb88bdd266409dea8cc4cbffb365204f"],"b64a893a6d2efaa60e289534b1f8713e4aa2c776":["37a0f60745e53927c4c876cfe5b5a58170f0646c","c15d10e700377c05e882f40d3fab68b6db47d2e5"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"1c1a5ff05c56300b1141fab1edd1a2384f7f9d61":["51b87c86c466155ca33516db26f04e9c21c1f9d1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"de61d3b77112a94b379d2024189c8db8a64b0d19":["750239682d222924398443d581163940f48d68fc"],"750239682d222924398443d581163940f48d68fc":["0f73fda188030be2885c2937e18b3aeaaf66632c"],"1b1713aa2c66e65f3f024e9c3c4876dfed130ceb":["de61d3b77112a94b379d2024189c8db8a64b0d19"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}