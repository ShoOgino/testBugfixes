{"path":"solr/src/java/org/apache/solr/search/SolrIndexSearcher#getDocListAndSetNC(QueryResult,QueryCommand).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/SolrIndexSearcher#getDocListAndSetNC(QueryResult,QueryCommand).mjava","pathOld":"/dev/null","sourceNew":"  // any DocSet returned is for the query only, without any filtering... that way it may\n  // be cached if desired.\n  private DocSet getDocListAndSetNC(QueryResult qr,QueryCommand cmd) throws IOException {\n    int len = cmd.getSupersetMaxDoc();\n    DocSet filter = cmd.getFilter()!=null ? cmd.getFilter() : getDocSet(cmd.getFilterList());\n    int last = len;\n    if (last < 0 || last > maxDoc()) last=maxDoc();\n    final int lastDocRequested = last;\n    int nDocsReturned;\n    int totalHits;\n    float maxScore;\n    int[] ids;\n    float[] scores;\n    DocSet set;\n\n    boolean needScores = (cmd.getFlags() & GET_SCORES) != 0;\n    int maxDoc = maxDoc();\n    int smallSetSize = maxDoc>>6;\n\n    Query query = QueryUtils.makeQueryable(cmd.getQuery());\n    final long timeAllowed = cmd.getTimeAllowed();\n\n    final Filter luceneFilter = filter==null ? null : filter.getTopFilter();\n\n    // handle zero case...\n    if (lastDocRequested<=0) {\n      final float[] topscore = new float[] { Float.NEGATIVE_INFINITY };\n\n      Collector collector;\n      DocSetCollector setCollector;\n\n       if (!needScores) {\n         collector = setCollector = new DocSetCollector(smallSetSize, maxDoc);\n       } else {\n         collector = setCollector = new DocSetDelegateCollector(smallSetSize, maxDoc, new Collector() {\n           Scorer scorer;\n           public void setScorer(Scorer scorer) throws IOException {\n             this.scorer = scorer;\n           }\n           public void collect(int doc) throws IOException {\n             float score = scorer.score();\n             if (score > topscore[0]) topscore[0]=score;\n           }\n           public void setNextReader(IndexReader reader, int docBase) throws IOException {\n           }\n           public boolean acceptsDocsOutOfOrder() {\n             return false;\n           }\n         });\n       }\n\n       if( timeAllowed > 0 ) {\n         collector = new TimeLimitingCollector(collector, timeAllowed);\n       }\n       try {\n         super.search(query, luceneFilter, collector);\n       }\n       catch( TimeLimitingCollector.TimeExceededException x ) {\n         log.warn( \"Query: \" + query + \"; \" + x.getMessage() );\n         qr.setPartialResults(true);\n       }\n\n      set = setCollector.getDocSet();\n\n      nDocsReturned = 0;\n      ids = new int[nDocsReturned];\n      scores = new float[nDocsReturned];\n      totalHits = set.size();\n      maxScore = totalHits>0 ? topscore[0] : 0.0f;\n    } else {\n\n      TopDocsCollector topCollector;\n\n      if (cmd.getSort() == null) {\n        topCollector = TopScoreDocCollector.create(len, true);\n      } else {\n        topCollector = TopFieldCollector.create(cmd.getSort(), len, false, needScores, needScores, true);\n      }\n\n      DocSetCollector setCollector = new DocSetDelegateCollector(maxDoc>>6, maxDoc, topCollector);\n      Collector collector = setCollector;\n\n      if( timeAllowed > 0 ) {\n        collector = new TimeLimitingCollector(collector, timeAllowed );\n      }\n      try {\n        super.search(query, luceneFilter, collector);\n      }\n      catch( TimeLimitingCollector.TimeExceededException x ) {\n        log.warn( \"Query: \" + query + \"; \" + x.getMessage() );\n        qr.setPartialResults(true);\n      }\n\n      set = setCollector.getDocSet();      \n\n      totalHits = topCollector.getTotalHits();\n      assert(totalHits == set.size());\n\n      TopDocs topDocs = topCollector.topDocs(0, len);\n      maxScore = totalHits>0 ? topDocs.getMaxScore() : 0.0f;\n      nDocsReturned = topDocs.scoreDocs.length;\n\n      ids = new int[nDocsReturned];\n      scores = (cmd.getFlags()&GET_SCORES)!=0 ? new float[nDocsReturned] : null;\n      for (int i=0; i<nDocsReturned; i++) {\n        ScoreDoc scoreDoc = topDocs.scoreDocs[i];\n        ids[i] = scoreDoc.doc;\n        if (scores != null) scores[i] = scoreDoc.score;\n      }\n    }\n\n    int sliceLen = Math.min(lastDocRequested,nDocsReturned);\n    if (sliceLen < 0) sliceLen=0;\n\n    qr.setDocList(new DocSlice(0,sliceLen,ids,scores,totalHits,maxScore));\n    // TODO: if we collect results before the filter, we just need to intersect with\n    // that filter to generate the DocSet for qr.setDocSet()\n    qr.setDocSet(set);\n\n    // TODO: currently we don't generate the DocSet for the base query,\n    // but the QueryDocSet == CompleteDocSet if filter==null.\n    return filter==null ? qr.getDocSet() : null;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/search/SolrIndexSearcher#getDocListAndSetNC(QueryResult,QueryCommand).mjava","sourceNew":null,"sourceOld":"  // any DocSet returned is for the query only, without any filtering... that way it may\n  // be cached if desired.\n  private DocSet getDocListAndSetNC(QueryResult qr,QueryCommand cmd) throws IOException {\n    int len = cmd.getSupersetMaxDoc();\n    DocSet filter = cmd.getFilter()!=null ? cmd.getFilter() : getDocSet(cmd.getFilterList());\n    int last = len;\n    if (last < 0 || last > maxDoc()) last=maxDoc();\n    final int lastDocRequested = last;\n    int nDocsReturned;\n    int totalHits;\n    float maxScore;\n    int[] ids;\n    float[] scores;\n    DocSet set;\n\n    boolean needScores = (cmd.getFlags() & GET_SCORES) != 0;\n    int maxDoc = maxDoc();\n    int smallSetSize = maxDoc>>6;\n\n    Query query = QueryUtils.makeQueryable(cmd.getQuery());\n    final long timeAllowed = cmd.getTimeAllowed();\n\n    final Filter luceneFilter = filter==null ? null : filter.getTopFilter();\n\n    // handle zero case...\n    if (lastDocRequested<=0) {\n      final float[] topscore = new float[] { Float.NEGATIVE_INFINITY };\n\n      Collector collector;\n      DocSetCollector setCollector;\n\n       if (!needScores) {\n         collector = setCollector = new DocSetCollector(smallSetSize, maxDoc);\n       } else {\n         collector = setCollector = new DocSetDelegateCollector(smallSetSize, maxDoc, new Collector() {\n           Scorer scorer;\n           public void setScorer(Scorer scorer) throws IOException {\n             this.scorer = scorer;\n           }\n           public void collect(int doc) throws IOException {\n             float score = scorer.score();\n             if (score > topscore[0]) topscore[0]=score;\n           }\n           public void setNextReader(IndexReader reader, int docBase) throws IOException {\n           }\n           public boolean acceptsDocsOutOfOrder() {\n             return false;\n           }\n         });\n       }\n\n       if( timeAllowed > 0 ) {\n         collector = new TimeLimitingCollector(collector, timeAllowed);\n       }\n       try {\n         super.search(query, luceneFilter, collector);\n       }\n       catch( TimeLimitingCollector.TimeExceededException x ) {\n         log.warn( \"Query: \" + query + \"; \" + x.getMessage() );\n         qr.setPartialResults(true);\n       }\n\n      set = setCollector.getDocSet();\n\n      nDocsReturned = 0;\n      ids = new int[nDocsReturned];\n      scores = new float[nDocsReturned];\n      totalHits = set.size();\n      maxScore = totalHits>0 ? topscore[0] : 0.0f;\n    } else {\n\n      TopDocsCollector topCollector;\n\n      if (cmd.getSort() == null) {\n        topCollector = TopScoreDocCollector.create(len, true);\n      } else {\n        topCollector = TopFieldCollector.create(cmd.getSort(), len, false, needScores, needScores, true);\n      }\n\n      DocSetCollector setCollector = new DocSetDelegateCollector(maxDoc>>6, maxDoc, topCollector);\n      Collector collector = setCollector;\n\n      if( timeAllowed > 0 ) {\n        collector = new TimeLimitingCollector(collector, timeAllowed );\n      }\n      try {\n        super.search(query, luceneFilter, collector);\n      }\n      catch( TimeLimitingCollector.TimeExceededException x ) {\n        log.warn( \"Query: \" + query + \"; \" + x.getMessage() );\n        qr.setPartialResults(true);\n      }\n\n      set = setCollector.getDocSet();      \n\n      totalHits = topCollector.getTotalHits();\n      assert(totalHits == set.size());\n\n      TopDocs topDocs = topCollector.topDocs(0, len);\n      maxScore = totalHits>0 ? topDocs.getMaxScore() : 0.0f;\n      nDocsReturned = topDocs.scoreDocs.length;\n\n      ids = new int[nDocsReturned];\n      scores = (cmd.getFlags()&GET_SCORES)!=0 ? new float[nDocsReturned] : null;\n      for (int i=0; i<nDocsReturned; i++) {\n        ScoreDoc scoreDoc = topDocs.scoreDocs[i];\n        ids[i] = scoreDoc.doc;\n        if (scores != null) scores[i] = scoreDoc.score;\n      }\n    }\n\n    int sliceLen = Math.min(lastDocRequested,nDocsReturned);\n    if (sliceLen < 0) sliceLen=0;\n\n    qr.setDocList(new DocSlice(0,sliceLen,ids,scores,totalHits,maxScore));\n    // TODO: if we collect results before the filter, we just need to intersect with\n    // that filter to generate the DocSet for qr.setDocSet()\n    qr.setDocSet(set);\n\n    // TODO: currently we don't generate the DocSet for the base query,\n    // but the QueryDocSet == CompleteDocSet if filter==null.\n    return filter==null ? qr.getDocSet() : null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/SolrIndexSearcher#getDocListAndSetNC(QueryResult,QueryCommand).mjava","pathOld":"src/java/org/apache/solr/search/SolrIndexSearcher#getDocListAndSetNC(QueryResult,QueryCommand).mjava","sourceNew":"  // any DocSet returned is for the query only, without any filtering... that way it may\n  // be cached if desired.\n  private DocSet getDocListAndSetNC(QueryResult qr,QueryCommand cmd) throws IOException {\n    int len = cmd.getSupersetMaxDoc();\n    DocSet filter = cmd.getFilter()!=null ? cmd.getFilter() : getDocSet(cmd.getFilterList());\n    int last = len;\n    if (last < 0 || last > maxDoc()) last=maxDoc();\n    final int lastDocRequested = last;\n    int nDocsReturned;\n    int totalHits;\n    float maxScore;\n    int[] ids;\n    float[] scores;\n    DocSet set;\n\n    boolean needScores = (cmd.getFlags() & GET_SCORES) != 0;\n    int maxDoc = maxDoc();\n    int smallSetSize = maxDoc>>6;\n\n    Query query = QueryUtils.makeQueryable(cmd.getQuery());\n    final long timeAllowed = cmd.getTimeAllowed();\n\n    final Filter luceneFilter = filter==null ? null : filter.getTopFilter();\n\n    // handle zero case...\n    if (lastDocRequested<=0) {\n      final float[] topscore = new float[] { Float.NEGATIVE_INFINITY };\n\n      Collector collector;\n      DocSetCollector setCollector;\n\n       if (!needScores) {\n         collector = setCollector = new DocSetCollector(smallSetSize, maxDoc);\n       } else {\n         collector = setCollector = new DocSetDelegateCollector(smallSetSize, maxDoc, new Collector() {\n           Scorer scorer;\n           public void setScorer(Scorer scorer) throws IOException {\n             this.scorer = scorer;\n           }\n           public void collect(int doc) throws IOException {\n             float score = scorer.score();\n             if (score > topscore[0]) topscore[0]=score;\n           }\n           public void setNextReader(IndexReader reader, int docBase) throws IOException {\n           }\n           public boolean acceptsDocsOutOfOrder() {\n             return false;\n           }\n         });\n       }\n\n       if( timeAllowed > 0 ) {\n         collector = new TimeLimitingCollector(collector, timeAllowed);\n       }\n       try {\n         super.search(query, luceneFilter, collector);\n       }\n       catch( TimeLimitingCollector.TimeExceededException x ) {\n         log.warn( \"Query: \" + query + \"; \" + x.getMessage() );\n         qr.setPartialResults(true);\n       }\n\n      set = setCollector.getDocSet();\n\n      nDocsReturned = 0;\n      ids = new int[nDocsReturned];\n      scores = new float[nDocsReturned];\n      totalHits = set.size();\n      maxScore = totalHits>0 ? topscore[0] : 0.0f;\n    } else {\n\n      TopDocsCollector topCollector;\n\n      if (cmd.getSort() == null) {\n        topCollector = TopScoreDocCollector.create(len, true);\n      } else {\n        topCollector = TopFieldCollector.create(cmd.getSort(), len, false, needScores, needScores, true);\n      }\n\n      DocSetCollector setCollector = new DocSetDelegateCollector(maxDoc>>6, maxDoc, topCollector);\n      Collector collector = setCollector;\n\n      if( timeAllowed > 0 ) {\n        collector = new TimeLimitingCollector(collector, timeAllowed );\n      }\n      try {\n        super.search(query, luceneFilter, collector);\n      }\n      catch( TimeLimitingCollector.TimeExceededException x ) {\n        log.warn( \"Query: \" + query + \"; \" + x.getMessage() );\n        qr.setPartialResults(true);\n      }\n\n      set = setCollector.getDocSet();      \n\n      totalHits = topCollector.getTotalHits();\n      assert(totalHits == set.size());\n\n      TopDocs topDocs = topCollector.topDocs(0, len);\n      maxScore = totalHits>0 ? topDocs.getMaxScore() : 0.0f;\n      nDocsReturned = topDocs.scoreDocs.length;\n\n      ids = new int[nDocsReturned];\n      scores = (cmd.getFlags()&GET_SCORES)!=0 ? new float[nDocsReturned] : null;\n      for (int i=0; i<nDocsReturned; i++) {\n        ScoreDoc scoreDoc = topDocs.scoreDocs[i];\n        ids[i] = scoreDoc.doc;\n        if (scores != null) scores[i] = scoreDoc.score;\n      }\n    }\n\n    int sliceLen = Math.min(lastDocRequested,nDocsReturned);\n    if (sliceLen < 0) sliceLen=0;\n\n    qr.setDocList(new DocSlice(0,sliceLen,ids,scores,totalHits,maxScore));\n    // TODO: if we collect results before the filter, we just need to intersect with\n    // that filter to generate the DocSet for qr.setDocSet()\n    qr.setDocSet(set);\n\n    // TODO: currently we don't generate the DocSet for the base query,\n    // but the QueryDocSet == CompleteDocSet if filter==null.\n    return filter==null ? qr.getDocSet() : null;\n  }\n\n","sourceOld":"  // any DocSet returned is for the query only, without any filtering... that way it may\n  // be cached if desired.\n  private DocSet getDocListAndSetNC(QueryResult qr,QueryCommand cmd) throws IOException {\n    int len = cmd.getSupersetMaxDoc();\n    DocSet filter = cmd.getFilter()!=null ? cmd.getFilter() : getDocSet(cmd.getFilterList());\n    int last = len;\n    if (last < 0 || last > maxDoc()) last=maxDoc();\n    final int lastDocRequested = last;\n    int nDocsReturned;\n    int totalHits;\n    float maxScore;\n    int[] ids;\n    float[] scores;\n    DocSet set;\n\n    boolean needScores = (cmd.getFlags() & GET_SCORES) != 0;\n    int maxDoc = maxDoc();\n    int smallSetSize = maxDoc>>6;\n\n    Query query = QueryUtils.makeQueryable(cmd.getQuery());\n    final long timeAllowed = cmd.getTimeAllowed();\n\n    final Filter luceneFilter = filter==null ? null : filter.getTopFilter();\n\n    // handle zero case...\n    if (lastDocRequested<=0) {\n      final float[] topscore = new float[] { Float.NEGATIVE_INFINITY };\n\n      Collector collector;\n      DocSetCollector setCollector;\n\n       if (!needScores) {\n         collector = setCollector = new DocSetCollector(smallSetSize, maxDoc);\n       } else {\n         collector = setCollector = new DocSetDelegateCollector(smallSetSize, maxDoc, new Collector() {\n           Scorer scorer;\n           public void setScorer(Scorer scorer) throws IOException {\n             this.scorer = scorer;\n           }\n           public void collect(int doc) throws IOException {\n             float score = scorer.score();\n             if (score > topscore[0]) topscore[0]=score;\n           }\n           public void setNextReader(IndexReader reader, int docBase) throws IOException {\n           }\n           public boolean acceptsDocsOutOfOrder() {\n             return false;\n           }\n         });\n       }\n\n       if( timeAllowed > 0 ) {\n         collector = new TimeLimitingCollector(collector, timeAllowed);\n       }\n       try {\n         super.search(query, luceneFilter, collector);\n       }\n       catch( TimeLimitingCollector.TimeExceededException x ) {\n         log.warn( \"Query: \" + query + \"; \" + x.getMessage() );\n         qr.setPartialResults(true);\n       }\n\n      set = setCollector.getDocSet();\n\n      nDocsReturned = 0;\n      ids = new int[nDocsReturned];\n      scores = new float[nDocsReturned];\n      totalHits = set.size();\n      maxScore = totalHits>0 ? topscore[0] : 0.0f;\n    } else {\n\n      TopDocsCollector topCollector;\n\n      if (cmd.getSort() == null) {\n        topCollector = TopScoreDocCollector.create(len, true);\n      } else {\n        topCollector = TopFieldCollector.create(cmd.getSort(), len, false, needScores, needScores, true);\n      }\n\n      DocSetCollector setCollector = new DocSetDelegateCollector(maxDoc>>6, maxDoc, topCollector);\n      Collector collector = setCollector;\n\n      if( timeAllowed > 0 ) {\n        collector = new TimeLimitingCollector(collector, timeAllowed );\n      }\n      try {\n        super.search(query, luceneFilter, collector);\n      }\n      catch( TimeLimitingCollector.TimeExceededException x ) {\n        log.warn( \"Query: \" + query + \"; \" + x.getMessage() );\n        qr.setPartialResults(true);\n      }\n\n      set = setCollector.getDocSet();      \n\n      totalHits = topCollector.getTotalHits();\n      assert(totalHits == set.size());\n\n      TopDocs topDocs = topCollector.topDocs(0, len);\n      maxScore = totalHits>0 ? topDocs.getMaxScore() : 0.0f;\n      nDocsReturned = topDocs.scoreDocs.length;\n\n      ids = new int[nDocsReturned];\n      scores = (cmd.getFlags()&GET_SCORES)!=0 ? new float[nDocsReturned] : null;\n      for (int i=0; i<nDocsReturned; i++) {\n        ScoreDoc scoreDoc = topDocs.scoreDocs[i];\n        ids[i] = scoreDoc.doc;\n        if (scores != null) scores[i] = scoreDoc.score;\n      }\n    }\n\n    int sliceLen = Math.min(lastDocRequested,nDocsReturned);\n    if (sliceLen < 0) sliceLen=0;\n\n    qr.setDocList(new DocSlice(0,sliceLen,ids,scores,totalHits,maxScore));\n    // TODO: if we collect results before the filter, we just need to intersect with\n    // that filter to generate the DocSet for qr.setDocSet()\n    qr.setDocSet(set);\n\n    // TODO: currently we don't generate the DocSet for the base query,\n    // but the QueryDocSet == CompleteDocSet if filter==null.\n    return filter==null ? qr.getDocSet() : null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/search/SolrIndexSearcher#getDocListAndSetNC(QueryResult,QueryCommand).mjava","pathOld":"/dev/null","sourceNew":"  // any DocSet returned is for the query only, without any filtering... that way it may\n  // be cached if desired.\n  private DocSet getDocListAndSetNC(QueryResult qr,QueryCommand cmd) throws IOException {\n    int len = cmd.getSupersetMaxDoc();\n    DocSet filter = cmd.getFilter()!=null ? cmd.getFilter() : getDocSet(cmd.getFilterList());\n    int last = len;\n    if (last < 0 || last > maxDoc()) last=maxDoc();\n    final int lastDocRequested = last;\n    int nDocsReturned;\n    int totalHits;\n    float maxScore;\n    int[] ids;\n    float[] scores;\n    DocSet set;\n\n    boolean needScores = (cmd.getFlags() & GET_SCORES) != 0;\n    int maxDoc = maxDoc();\n    int smallSetSize = maxDoc>>6;\n\n    Query query = QueryUtils.makeQueryable(cmd.getQuery());\n    final long timeAllowed = cmd.getTimeAllowed();\n\n    final Filter luceneFilter = filter==null ? null : filter.getTopFilter();\n\n    // handle zero case...\n    if (lastDocRequested<=0) {\n      final float[] topscore = new float[] { Float.NEGATIVE_INFINITY };\n\n      Collector collector;\n      DocSetCollector setCollector;\n\n       if (!needScores) {\n         collector = setCollector = new DocSetCollector(smallSetSize, maxDoc);\n       } else {\n         collector = setCollector = new DocSetDelegateCollector(smallSetSize, maxDoc, new Collector() {\n           Scorer scorer;\n           public void setScorer(Scorer scorer) throws IOException {\n             this.scorer = scorer;\n           }\n           public void collect(int doc) throws IOException {\n             float score = scorer.score();\n             if (score > topscore[0]) topscore[0]=score;\n           }\n           public void setNextReader(IndexReader reader, int docBase) throws IOException {\n           }\n           public boolean acceptsDocsOutOfOrder() {\n             return false;\n           }\n         });\n       }\n\n       if( timeAllowed > 0 ) {\n         collector = new TimeLimitingCollector(collector, timeAllowed);\n       }\n       try {\n         super.search(query, luceneFilter, collector);\n       }\n       catch( TimeLimitingCollector.TimeExceededException x ) {\n         log.warn( \"Query: \" + query + \"; \" + x.getMessage() );\n         qr.setPartialResults(true);\n       }\n\n      set = setCollector.getDocSet();\n\n      nDocsReturned = 0;\n      ids = new int[nDocsReturned];\n      scores = new float[nDocsReturned];\n      totalHits = set.size();\n      maxScore = totalHits>0 ? topscore[0] : 0.0f;\n    } else {\n\n      TopDocsCollector topCollector;\n\n      if (cmd.getSort() == null) {\n        topCollector = TopScoreDocCollector.create(len, true);\n      } else {\n        topCollector = TopFieldCollector.create(cmd.getSort(), len, false, needScores, needScores, true);\n      }\n\n      DocSetCollector setCollector = new DocSetDelegateCollector(maxDoc>>6, maxDoc, topCollector);\n      Collector collector = setCollector;\n\n      if( timeAllowed > 0 ) {\n        collector = new TimeLimitingCollector(collector, timeAllowed );\n      }\n      try {\n        super.search(query, luceneFilter, collector);\n      }\n      catch( TimeLimitingCollector.TimeExceededException x ) {\n        log.warn( \"Query: \" + query + \"; \" + x.getMessage() );\n        qr.setPartialResults(true);\n      }\n\n      set = setCollector.getDocSet();      \n\n      totalHits = topCollector.getTotalHits();\n      assert(totalHits == set.size());\n\n      TopDocs topDocs = topCollector.topDocs(0, len);\n      maxScore = totalHits>0 ? topDocs.getMaxScore() : 0.0f;\n      nDocsReturned = topDocs.scoreDocs.length;\n\n      ids = new int[nDocsReturned];\n      scores = (cmd.getFlags()&GET_SCORES)!=0 ? new float[nDocsReturned] : null;\n      for (int i=0; i<nDocsReturned; i++) {\n        ScoreDoc scoreDoc = topDocs.scoreDocs[i];\n        ids[i] = scoreDoc.doc;\n        if (scores != null) scores[i] = scoreDoc.score;\n      }\n    }\n\n    int sliceLen = Math.min(lastDocRequested,nDocsReturned);\n    if (sliceLen < 0) sliceLen=0;\n\n    qr.setDocList(new DocSlice(0,sliceLen,ids,scores,totalHits,maxScore));\n    // TODO: if we collect results before the filter, we just need to intersect with\n    // that filter to generate the DocSet for qr.setDocSet()\n    qr.setDocSet(set);\n\n    // TODO: currently we don't generate the DocSet for the base query,\n    // but the QueryDocSet == CompleteDocSet if filter==null.\n    return filter==null ? qr.getDocSet() : null;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"323f871ffe96b871d8c534a614be60751bb023c2","date":1294820532,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/SolrIndexSearcher#getDocListAndSetNC(QueryResult,QueryCommand).mjava","pathOld":"solr/src/java/org/apache/solr/search/SolrIndexSearcher#getDocListAndSetNC(QueryResult,QueryCommand).mjava","sourceNew":"  // any DocSet returned is for the query only, without any filtering... that way it may\n  // be cached if desired.\n  private DocSet getDocListAndSetNC(QueryResult qr,QueryCommand cmd) throws IOException {\n    int len = cmd.getSupersetMaxDoc();\n    DocSet filter = cmd.getFilter()!=null ? cmd.getFilter() : getDocSet(cmd.getFilterList());\n    int last = len;\n    if (last < 0 || last > maxDoc()) last=maxDoc();\n    final int lastDocRequested = last;\n    int nDocsReturned;\n    int totalHits;\n    float maxScore;\n    int[] ids;\n    float[] scores;\n    DocSet set;\n\n    boolean needScores = (cmd.getFlags() & GET_SCORES) != 0;\n    int maxDoc = maxDoc();\n    int smallSetSize = maxDoc>>6;\n\n    Query query = QueryUtils.makeQueryable(cmd.getQuery());\n    final long timeAllowed = cmd.getTimeAllowed();\n\n    final Filter luceneFilter = filter==null ? null : filter.getTopFilter();\n\n    // handle zero case...\n    if (lastDocRequested<=0) {\n      final float[] topscore = new float[] { Float.NEGATIVE_INFINITY };\n\n      Collector collector;\n      DocSetCollector setCollector;\n\n       if (!needScores) {\n         collector = setCollector = new DocSetCollector(smallSetSize, maxDoc);\n       } else {\n         collector = setCollector = new DocSetDelegateCollector(smallSetSize, maxDoc, new Collector() {\n           Scorer scorer;\n           public void setScorer(Scorer scorer) throws IOException {\n             this.scorer = scorer;\n           }\n           public void collect(int doc) throws IOException {\n             float score = scorer.score();\n             if (score > topscore[0]) topscore[0]=score;\n           }\n           public void setNextReader(AtomicReaderContext context) throws IOException {\n           }\n           public boolean acceptsDocsOutOfOrder() {\n             return false;\n           }\n         });\n       }\n\n       if( timeAllowed > 0 ) {\n         collector = new TimeLimitingCollector(collector, timeAllowed);\n       }\n       try {\n         super.search(query, luceneFilter, collector);\n       }\n       catch( TimeLimitingCollector.TimeExceededException x ) {\n         log.warn( \"Query: \" + query + \"; \" + x.getMessage() );\n         qr.setPartialResults(true);\n       }\n\n      set = setCollector.getDocSet();\n\n      nDocsReturned = 0;\n      ids = new int[nDocsReturned];\n      scores = new float[nDocsReturned];\n      totalHits = set.size();\n      maxScore = totalHits>0 ? topscore[0] : 0.0f;\n    } else {\n\n      TopDocsCollector topCollector;\n\n      if (cmd.getSort() == null) {\n        topCollector = TopScoreDocCollector.create(len, true);\n      } else {\n        topCollector = TopFieldCollector.create(cmd.getSort(), len, false, needScores, needScores, true);\n      }\n\n      DocSetCollector setCollector = new DocSetDelegateCollector(maxDoc>>6, maxDoc, topCollector);\n      Collector collector = setCollector;\n\n      if( timeAllowed > 0 ) {\n        collector = new TimeLimitingCollector(collector, timeAllowed );\n      }\n      try {\n        super.search(query, luceneFilter, collector);\n      }\n      catch( TimeLimitingCollector.TimeExceededException x ) {\n        log.warn( \"Query: \" + query + \"; \" + x.getMessage() );\n        qr.setPartialResults(true);\n      }\n\n      set = setCollector.getDocSet();      \n\n      totalHits = topCollector.getTotalHits();\n      assert(totalHits == set.size());\n\n      TopDocs topDocs = topCollector.topDocs(0, len);\n      maxScore = totalHits>0 ? topDocs.getMaxScore() : 0.0f;\n      nDocsReturned = topDocs.scoreDocs.length;\n\n      ids = new int[nDocsReturned];\n      scores = (cmd.getFlags()&GET_SCORES)!=0 ? new float[nDocsReturned] : null;\n      for (int i=0; i<nDocsReturned; i++) {\n        ScoreDoc scoreDoc = topDocs.scoreDocs[i];\n        ids[i] = scoreDoc.doc;\n        if (scores != null) scores[i] = scoreDoc.score;\n      }\n    }\n\n    int sliceLen = Math.min(lastDocRequested,nDocsReturned);\n    if (sliceLen < 0) sliceLen=0;\n\n    qr.setDocList(new DocSlice(0,sliceLen,ids,scores,totalHits,maxScore));\n    // TODO: if we collect results before the filter, we just need to intersect with\n    // that filter to generate the DocSet for qr.setDocSet()\n    qr.setDocSet(set);\n\n    // TODO: currently we don't generate the DocSet for the base query,\n    // but the QueryDocSet == CompleteDocSet if filter==null.\n    return filter==null ? qr.getDocSet() : null;\n  }\n\n","sourceOld":"  // any DocSet returned is for the query only, without any filtering... that way it may\n  // be cached if desired.\n  private DocSet getDocListAndSetNC(QueryResult qr,QueryCommand cmd) throws IOException {\n    int len = cmd.getSupersetMaxDoc();\n    DocSet filter = cmd.getFilter()!=null ? cmd.getFilter() : getDocSet(cmd.getFilterList());\n    int last = len;\n    if (last < 0 || last > maxDoc()) last=maxDoc();\n    final int lastDocRequested = last;\n    int nDocsReturned;\n    int totalHits;\n    float maxScore;\n    int[] ids;\n    float[] scores;\n    DocSet set;\n\n    boolean needScores = (cmd.getFlags() & GET_SCORES) != 0;\n    int maxDoc = maxDoc();\n    int smallSetSize = maxDoc>>6;\n\n    Query query = QueryUtils.makeQueryable(cmd.getQuery());\n    final long timeAllowed = cmd.getTimeAllowed();\n\n    final Filter luceneFilter = filter==null ? null : filter.getTopFilter();\n\n    // handle zero case...\n    if (lastDocRequested<=0) {\n      final float[] topscore = new float[] { Float.NEGATIVE_INFINITY };\n\n      Collector collector;\n      DocSetCollector setCollector;\n\n       if (!needScores) {\n         collector = setCollector = new DocSetCollector(smallSetSize, maxDoc);\n       } else {\n         collector = setCollector = new DocSetDelegateCollector(smallSetSize, maxDoc, new Collector() {\n           Scorer scorer;\n           public void setScorer(Scorer scorer) throws IOException {\n             this.scorer = scorer;\n           }\n           public void collect(int doc) throws IOException {\n             float score = scorer.score();\n             if (score > topscore[0]) topscore[0]=score;\n           }\n           public void setNextReader(IndexReader reader, int docBase) throws IOException {\n           }\n           public boolean acceptsDocsOutOfOrder() {\n             return false;\n           }\n         });\n       }\n\n       if( timeAllowed > 0 ) {\n         collector = new TimeLimitingCollector(collector, timeAllowed);\n       }\n       try {\n         super.search(query, luceneFilter, collector);\n       }\n       catch( TimeLimitingCollector.TimeExceededException x ) {\n         log.warn( \"Query: \" + query + \"; \" + x.getMessage() );\n         qr.setPartialResults(true);\n       }\n\n      set = setCollector.getDocSet();\n\n      nDocsReturned = 0;\n      ids = new int[nDocsReturned];\n      scores = new float[nDocsReturned];\n      totalHits = set.size();\n      maxScore = totalHits>0 ? topscore[0] : 0.0f;\n    } else {\n\n      TopDocsCollector topCollector;\n\n      if (cmd.getSort() == null) {\n        topCollector = TopScoreDocCollector.create(len, true);\n      } else {\n        topCollector = TopFieldCollector.create(cmd.getSort(), len, false, needScores, needScores, true);\n      }\n\n      DocSetCollector setCollector = new DocSetDelegateCollector(maxDoc>>6, maxDoc, topCollector);\n      Collector collector = setCollector;\n\n      if( timeAllowed > 0 ) {\n        collector = new TimeLimitingCollector(collector, timeAllowed );\n      }\n      try {\n        super.search(query, luceneFilter, collector);\n      }\n      catch( TimeLimitingCollector.TimeExceededException x ) {\n        log.warn( \"Query: \" + query + \"; \" + x.getMessage() );\n        qr.setPartialResults(true);\n      }\n\n      set = setCollector.getDocSet();      \n\n      totalHits = topCollector.getTotalHits();\n      assert(totalHits == set.size());\n\n      TopDocs topDocs = topCollector.topDocs(0, len);\n      maxScore = totalHits>0 ? topDocs.getMaxScore() : 0.0f;\n      nDocsReturned = topDocs.scoreDocs.length;\n\n      ids = new int[nDocsReturned];\n      scores = (cmd.getFlags()&GET_SCORES)!=0 ? new float[nDocsReturned] : null;\n      for (int i=0; i<nDocsReturned; i++) {\n        ScoreDoc scoreDoc = topDocs.scoreDocs[i];\n        ids[i] = scoreDoc.doc;\n        if (scores != null) scores[i] = scoreDoc.score;\n      }\n    }\n\n    int sliceLen = Math.min(lastDocRequested,nDocsReturned);\n    if (sliceLen < 0) sliceLen=0;\n\n    qr.setDocList(new DocSlice(0,sliceLen,ids,scores,totalHits,maxScore));\n    // TODO: if we collect results before the filter, we just need to intersect with\n    // that filter to generate the DocSet for qr.setDocSet()\n    qr.setDocSet(set);\n\n    // TODO: currently we don't generate the DocSet for the base query,\n    // but the QueryDocSet == CompleteDocSet if filter==null.\n    return filter==null ? qr.getDocSet() : null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/search/SolrIndexSearcher#getDocListAndSetNC(QueryResult,QueryCommand).mjava","pathOld":"solr/src/java/org/apache/solr/search/SolrIndexSearcher#getDocListAndSetNC(QueryResult,QueryCommand).mjava","sourceNew":"  // any DocSet returned is for the query only, without any filtering... that way it may\n  // be cached if desired.\n  private DocSet getDocListAndSetNC(QueryResult qr,QueryCommand cmd) throws IOException {\n    int len = cmd.getSupersetMaxDoc();\n    DocSet filter = cmd.getFilter()!=null ? cmd.getFilter() : getDocSet(cmd.getFilterList());\n    int last = len;\n    if (last < 0 || last > maxDoc()) last=maxDoc();\n    final int lastDocRequested = last;\n    int nDocsReturned;\n    int totalHits;\n    float maxScore;\n    int[] ids;\n    float[] scores;\n    DocSet set;\n\n    boolean needScores = (cmd.getFlags() & GET_SCORES) != 0;\n    int maxDoc = maxDoc();\n    int smallSetSize = maxDoc>>6;\n\n    Query query = QueryUtils.makeQueryable(cmd.getQuery());\n    final long timeAllowed = cmd.getTimeAllowed();\n\n    final Filter luceneFilter = filter==null ? null : filter.getTopFilter();\n\n    // handle zero case...\n    if (lastDocRequested<=0) {\n      final float[] topscore = new float[] { Float.NEGATIVE_INFINITY };\n\n      Collector collector;\n      DocSetCollector setCollector;\n\n       if (!needScores) {\n         collector = setCollector = new DocSetCollector(smallSetSize, maxDoc);\n       } else {\n         collector = setCollector = new DocSetDelegateCollector(smallSetSize, maxDoc, new Collector() {\n           Scorer scorer;\n           public void setScorer(Scorer scorer) throws IOException {\n             this.scorer = scorer;\n           }\n           public void collect(int doc) throws IOException {\n             float score = scorer.score();\n             if (score > topscore[0]) topscore[0]=score;\n           }\n           public void setNextReader(AtomicReaderContext context) throws IOException {\n           }\n           public boolean acceptsDocsOutOfOrder() {\n             return false;\n           }\n         });\n       }\n\n       if( timeAllowed > 0 ) {\n         collector = new TimeLimitingCollector(collector, timeAllowed);\n       }\n       try {\n         super.search(query, luceneFilter, collector);\n       }\n       catch( TimeLimitingCollector.TimeExceededException x ) {\n         log.warn( \"Query: \" + query + \"; \" + x.getMessage() );\n         qr.setPartialResults(true);\n       }\n\n      set = setCollector.getDocSet();\n\n      nDocsReturned = 0;\n      ids = new int[nDocsReturned];\n      scores = new float[nDocsReturned];\n      totalHits = set.size();\n      maxScore = totalHits>0 ? topscore[0] : 0.0f;\n    } else {\n\n      TopDocsCollector topCollector;\n\n      if (cmd.getSort() == null) {\n        topCollector = TopScoreDocCollector.create(len, true);\n      } else {\n        topCollector = TopFieldCollector.create(cmd.getSort(), len, false, needScores, needScores, true);\n      }\n\n      DocSetCollector setCollector = new DocSetDelegateCollector(maxDoc>>6, maxDoc, topCollector);\n      Collector collector = setCollector;\n\n      if( timeAllowed > 0 ) {\n        collector = new TimeLimitingCollector(collector, timeAllowed );\n      }\n      try {\n        super.search(query, luceneFilter, collector);\n      }\n      catch( TimeLimitingCollector.TimeExceededException x ) {\n        log.warn( \"Query: \" + query + \"; \" + x.getMessage() );\n        qr.setPartialResults(true);\n      }\n\n      set = setCollector.getDocSet();      \n\n      totalHits = topCollector.getTotalHits();\n      assert(totalHits == set.size());\n\n      TopDocs topDocs = topCollector.topDocs(0, len);\n      maxScore = totalHits>0 ? topDocs.getMaxScore() : 0.0f;\n      nDocsReturned = topDocs.scoreDocs.length;\n\n      ids = new int[nDocsReturned];\n      scores = (cmd.getFlags()&GET_SCORES)!=0 ? new float[nDocsReturned] : null;\n      for (int i=0; i<nDocsReturned; i++) {\n        ScoreDoc scoreDoc = topDocs.scoreDocs[i];\n        ids[i] = scoreDoc.doc;\n        if (scores != null) scores[i] = scoreDoc.score;\n      }\n    }\n\n    int sliceLen = Math.min(lastDocRequested,nDocsReturned);\n    if (sliceLen < 0) sliceLen=0;\n\n    qr.setDocList(new DocSlice(0,sliceLen,ids,scores,totalHits,maxScore));\n    // TODO: if we collect results before the filter, we just need to intersect with\n    // that filter to generate the DocSet for qr.setDocSet()\n    qr.setDocSet(set);\n\n    // TODO: currently we don't generate the DocSet for the base query,\n    // but the QueryDocSet == CompleteDocSet if filter==null.\n    return filter==null ? qr.getDocSet() : null;\n  }\n\n","sourceOld":"  // any DocSet returned is for the query only, without any filtering... that way it may\n  // be cached if desired.\n  private DocSet getDocListAndSetNC(QueryResult qr,QueryCommand cmd) throws IOException {\n    int len = cmd.getSupersetMaxDoc();\n    DocSet filter = cmd.getFilter()!=null ? cmd.getFilter() : getDocSet(cmd.getFilterList());\n    int last = len;\n    if (last < 0 || last > maxDoc()) last=maxDoc();\n    final int lastDocRequested = last;\n    int nDocsReturned;\n    int totalHits;\n    float maxScore;\n    int[] ids;\n    float[] scores;\n    DocSet set;\n\n    boolean needScores = (cmd.getFlags() & GET_SCORES) != 0;\n    int maxDoc = maxDoc();\n    int smallSetSize = maxDoc>>6;\n\n    Query query = QueryUtils.makeQueryable(cmd.getQuery());\n    final long timeAllowed = cmd.getTimeAllowed();\n\n    final Filter luceneFilter = filter==null ? null : filter.getTopFilter();\n\n    // handle zero case...\n    if (lastDocRequested<=0) {\n      final float[] topscore = new float[] { Float.NEGATIVE_INFINITY };\n\n      Collector collector;\n      DocSetCollector setCollector;\n\n       if (!needScores) {\n         collector = setCollector = new DocSetCollector(smallSetSize, maxDoc);\n       } else {\n         collector = setCollector = new DocSetDelegateCollector(smallSetSize, maxDoc, new Collector() {\n           Scorer scorer;\n           public void setScorer(Scorer scorer) throws IOException {\n             this.scorer = scorer;\n           }\n           public void collect(int doc) throws IOException {\n             float score = scorer.score();\n             if (score > topscore[0]) topscore[0]=score;\n           }\n           public void setNextReader(IndexReader reader, int docBase) throws IOException {\n           }\n           public boolean acceptsDocsOutOfOrder() {\n             return false;\n           }\n         });\n       }\n\n       if( timeAllowed > 0 ) {\n         collector = new TimeLimitingCollector(collector, timeAllowed);\n       }\n       try {\n         super.search(query, luceneFilter, collector);\n       }\n       catch( TimeLimitingCollector.TimeExceededException x ) {\n         log.warn( \"Query: \" + query + \"; \" + x.getMessage() );\n         qr.setPartialResults(true);\n       }\n\n      set = setCollector.getDocSet();\n\n      nDocsReturned = 0;\n      ids = new int[nDocsReturned];\n      scores = new float[nDocsReturned];\n      totalHits = set.size();\n      maxScore = totalHits>0 ? topscore[0] : 0.0f;\n    } else {\n\n      TopDocsCollector topCollector;\n\n      if (cmd.getSort() == null) {\n        topCollector = TopScoreDocCollector.create(len, true);\n      } else {\n        topCollector = TopFieldCollector.create(cmd.getSort(), len, false, needScores, needScores, true);\n      }\n\n      DocSetCollector setCollector = new DocSetDelegateCollector(maxDoc>>6, maxDoc, topCollector);\n      Collector collector = setCollector;\n\n      if( timeAllowed > 0 ) {\n        collector = new TimeLimitingCollector(collector, timeAllowed );\n      }\n      try {\n        super.search(query, luceneFilter, collector);\n      }\n      catch( TimeLimitingCollector.TimeExceededException x ) {\n        log.warn( \"Query: \" + query + \"; \" + x.getMessage() );\n        qr.setPartialResults(true);\n      }\n\n      set = setCollector.getDocSet();      \n\n      totalHits = topCollector.getTotalHits();\n      assert(totalHits == set.size());\n\n      TopDocs topDocs = topCollector.topDocs(0, len);\n      maxScore = totalHits>0 ? topDocs.getMaxScore() : 0.0f;\n      nDocsReturned = topDocs.scoreDocs.length;\n\n      ids = new int[nDocsReturned];\n      scores = (cmd.getFlags()&GET_SCORES)!=0 ? new float[nDocsReturned] : null;\n      for (int i=0; i<nDocsReturned; i++) {\n        ScoreDoc scoreDoc = topDocs.scoreDocs[i];\n        ids[i] = scoreDoc.doc;\n        if (scores != null) scores[i] = scoreDoc.score;\n      }\n    }\n\n    int sliceLen = Math.min(lastDocRequested,nDocsReturned);\n    if (sliceLen < 0) sliceLen=0;\n\n    qr.setDocList(new DocSlice(0,sliceLen,ids,scores,totalHits,maxScore));\n    // TODO: if we collect results before the filter, we just need to intersect with\n    // that filter to generate the DocSet for qr.setDocSet()\n    qr.setDocSet(set);\n\n    // TODO: currently we don't generate the DocSet for the base query,\n    // but the QueryDocSet == CompleteDocSet if filter==null.\n    return filter==null ? qr.getDocSet() : null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"771281b4c7dc712b48ba338b970b49007ca402a1","date":1295480908,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/SolrIndexSearcher#getDocListAndSetNC(QueryResult,QueryCommand).mjava","pathOld":"solr/src/java/org/apache/solr/search/SolrIndexSearcher#getDocListAndSetNC(QueryResult,QueryCommand).mjava","sourceNew":"  // any DocSet returned is for the query only, without any filtering... that way it may\n  // be cached if desired.\n  private DocSet getDocListAndSetNC(QueryResult qr,QueryCommand cmd) throws IOException {\n    int len = cmd.getSupersetMaxDoc();\n    DocSet filter = cmd.getFilter()!=null ? cmd.getFilter() : getDocSet(cmd.getFilterList());\n    int last = len;\n    if (last < 0 || last > maxDoc()) last=maxDoc();\n    final int lastDocRequested = last;\n    int nDocsReturned;\n    int totalHits;\n    float maxScore;\n    int[] ids;\n    float[] scores;\n    DocSet set;\n\n    boolean needScores = (cmd.getFlags() & GET_SCORES) != 0;\n    int maxDoc = maxDoc();\n    int smallSetSize = maxDoc>>6;\n\n    Query query = QueryUtils.makeQueryable(cmd.getQuery());\n    final long timeAllowed = cmd.getTimeAllowed();\n\n    final Filter luceneFilter = filter==null ? null : filter.getTopFilter();\n\n    // handle zero case...\n    if (lastDocRequested<=0) {\n      final float[] topscore = new float[] { Float.NEGATIVE_INFINITY };\n\n      Collector collector;\n      DocSetCollector setCollector;\n\n       if (!needScores) {\n         collector = setCollector = new DocSetCollector(smallSetSize, maxDoc);\n       } else {\n         collector = setCollector = new DocSetDelegateCollector(smallSetSize, maxDoc, new Collector() {\n           Scorer scorer;\n           public void setScorer(Scorer scorer) throws IOException {\n             this.scorer = scorer;\n           }\n           public void collect(int doc) throws IOException {\n             float score = scorer.score();\n             if (score > topscore[0]) topscore[0]=score;\n           }\n           public void setNextReader(AtomicReaderContext context) throws IOException {\n           }\n           public boolean acceptsDocsOutOfOrder() {\n             return false;\n           }\n         });\n       }\n\n       if( timeAllowed > 0 ) {\n         collector = new TimeLimitingCollector(collector, timeAllowed);\n       }\n       try {\n         super.search(query, luceneFilter, collector);\n       }\n       catch( TimeLimitingCollector.TimeExceededException x ) {\n         log.warn( \"Query: \" + query + \"; \" + x.getMessage() );\n         qr.setPartialResults(true);\n       }\n\n      set = setCollector.getDocSet();\n\n      nDocsReturned = 0;\n      ids = new int[nDocsReturned];\n      scores = new float[nDocsReturned];\n      totalHits = set.size();\n      maxScore = totalHits>0 ? topscore[0] : 0.0f;\n    } else {\n\n      TopDocsCollector topCollector;\n\n      if (cmd.getSort() == null) {\n        topCollector = TopScoreDocCollector.create(len, true);\n      } else {\n        topCollector = TopFieldCollector.create(weightSort(cmd.getSort()), len, false, needScores, needScores, true);\n      }\n\n      DocSetCollector setCollector = new DocSetDelegateCollector(maxDoc>>6, maxDoc, topCollector);\n      Collector collector = setCollector;\n\n      if( timeAllowed > 0 ) {\n        collector = new TimeLimitingCollector(collector, timeAllowed );\n      }\n      try {\n        super.search(query, luceneFilter, collector);\n      }\n      catch( TimeLimitingCollector.TimeExceededException x ) {\n        log.warn( \"Query: \" + query + \"; \" + x.getMessage() );\n        qr.setPartialResults(true);\n      }\n\n      set = setCollector.getDocSet();      \n\n      totalHits = topCollector.getTotalHits();\n      assert(totalHits == set.size());\n\n      TopDocs topDocs = topCollector.topDocs(0, len);\n      maxScore = totalHits>0 ? topDocs.getMaxScore() : 0.0f;\n      nDocsReturned = topDocs.scoreDocs.length;\n\n      ids = new int[nDocsReturned];\n      scores = (cmd.getFlags()&GET_SCORES)!=0 ? new float[nDocsReturned] : null;\n      for (int i=0; i<nDocsReturned; i++) {\n        ScoreDoc scoreDoc = topDocs.scoreDocs[i];\n        ids[i] = scoreDoc.doc;\n        if (scores != null) scores[i] = scoreDoc.score;\n      }\n    }\n\n    int sliceLen = Math.min(lastDocRequested,nDocsReturned);\n    if (sliceLen < 0) sliceLen=0;\n\n    qr.setDocList(new DocSlice(0,sliceLen,ids,scores,totalHits,maxScore));\n    // TODO: if we collect results before the filter, we just need to intersect with\n    // that filter to generate the DocSet for qr.setDocSet()\n    qr.setDocSet(set);\n\n    // TODO: currently we don't generate the DocSet for the base query,\n    // but the QueryDocSet == CompleteDocSet if filter==null.\n    return filter==null ? qr.getDocSet() : null;\n  }\n\n","sourceOld":"  // any DocSet returned is for the query only, without any filtering... that way it may\n  // be cached if desired.\n  private DocSet getDocListAndSetNC(QueryResult qr,QueryCommand cmd) throws IOException {\n    int len = cmd.getSupersetMaxDoc();\n    DocSet filter = cmd.getFilter()!=null ? cmd.getFilter() : getDocSet(cmd.getFilterList());\n    int last = len;\n    if (last < 0 || last > maxDoc()) last=maxDoc();\n    final int lastDocRequested = last;\n    int nDocsReturned;\n    int totalHits;\n    float maxScore;\n    int[] ids;\n    float[] scores;\n    DocSet set;\n\n    boolean needScores = (cmd.getFlags() & GET_SCORES) != 0;\n    int maxDoc = maxDoc();\n    int smallSetSize = maxDoc>>6;\n\n    Query query = QueryUtils.makeQueryable(cmd.getQuery());\n    final long timeAllowed = cmd.getTimeAllowed();\n\n    final Filter luceneFilter = filter==null ? null : filter.getTopFilter();\n\n    // handle zero case...\n    if (lastDocRequested<=0) {\n      final float[] topscore = new float[] { Float.NEGATIVE_INFINITY };\n\n      Collector collector;\n      DocSetCollector setCollector;\n\n       if (!needScores) {\n         collector = setCollector = new DocSetCollector(smallSetSize, maxDoc);\n       } else {\n         collector = setCollector = new DocSetDelegateCollector(smallSetSize, maxDoc, new Collector() {\n           Scorer scorer;\n           public void setScorer(Scorer scorer) throws IOException {\n             this.scorer = scorer;\n           }\n           public void collect(int doc) throws IOException {\n             float score = scorer.score();\n             if (score > topscore[0]) topscore[0]=score;\n           }\n           public void setNextReader(AtomicReaderContext context) throws IOException {\n           }\n           public boolean acceptsDocsOutOfOrder() {\n             return false;\n           }\n         });\n       }\n\n       if( timeAllowed > 0 ) {\n         collector = new TimeLimitingCollector(collector, timeAllowed);\n       }\n       try {\n         super.search(query, luceneFilter, collector);\n       }\n       catch( TimeLimitingCollector.TimeExceededException x ) {\n         log.warn( \"Query: \" + query + \"; \" + x.getMessage() );\n         qr.setPartialResults(true);\n       }\n\n      set = setCollector.getDocSet();\n\n      nDocsReturned = 0;\n      ids = new int[nDocsReturned];\n      scores = new float[nDocsReturned];\n      totalHits = set.size();\n      maxScore = totalHits>0 ? topscore[0] : 0.0f;\n    } else {\n\n      TopDocsCollector topCollector;\n\n      if (cmd.getSort() == null) {\n        topCollector = TopScoreDocCollector.create(len, true);\n      } else {\n        topCollector = TopFieldCollector.create(cmd.getSort(), len, false, needScores, needScores, true);\n      }\n\n      DocSetCollector setCollector = new DocSetDelegateCollector(maxDoc>>6, maxDoc, topCollector);\n      Collector collector = setCollector;\n\n      if( timeAllowed > 0 ) {\n        collector = new TimeLimitingCollector(collector, timeAllowed );\n      }\n      try {\n        super.search(query, luceneFilter, collector);\n      }\n      catch( TimeLimitingCollector.TimeExceededException x ) {\n        log.warn( \"Query: \" + query + \"; \" + x.getMessage() );\n        qr.setPartialResults(true);\n      }\n\n      set = setCollector.getDocSet();      \n\n      totalHits = topCollector.getTotalHits();\n      assert(totalHits == set.size());\n\n      TopDocs topDocs = topCollector.topDocs(0, len);\n      maxScore = totalHits>0 ? topDocs.getMaxScore() : 0.0f;\n      nDocsReturned = topDocs.scoreDocs.length;\n\n      ids = new int[nDocsReturned];\n      scores = (cmd.getFlags()&GET_SCORES)!=0 ? new float[nDocsReturned] : null;\n      for (int i=0; i<nDocsReturned; i++) {\n        ScoreDoc scoreDoc = topDocs.scoreDocs[i];\n        ids[i] = scoreDoc.doc;\n        if (scores != null) scores[i] = scoreDoc.score;\n      }\n    }\n\n    int sliceLen = Math.min(lastDocRequested,nDocsReturned);\n    if (sliceLen < 0) sliceLen=0;\n\n    qr.setDocList(new DocSlice(0,sliceLen,ids,scores,totalHits,maxScore));\n    // TODO: if we collect results before the filter, we just need to intersect with\n    // that filter to generate the DocSet for qr.setDocSet()\n    qr.setDocSet(set);\n\n    // TODO: currently we don't generate the DocSet for the base query,\n    // but the QueryDocSet == CompleteDocSet if filter==null.\n    return filter==null ? qr.getDocSet() : null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e79a6d080bdd5b2a8f56342cf571b5476de04180","date":1295638686,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/search/SolrIndexSearcher#getDocListAndSetNC(QueryResult,QueryCommand).mjava","pathOld":"solr/src/java/org/apache/solr/search/SolrIndexSearcher#getDocListAndSetNC(QueryResult,QueryCommand).mjava","sourceNew":"  // any DocSet returned is for the query only, without any filtering... that way it may\n  // be cached if desired.\n  private DocSet getDocListAndSetNC(QueryResult qr,QueryCommand cmd) throws IOException {\n    int len = cmd.getSupersetMaxDoc();\n    DocSet filter = cmd.getFilter()!=null ? cmd.getFilter() : getDocSet(cmd.getFilterList());\n    int last = len;\n    if (last < 0 || last > maxDoc()) last=maxDoc();\n    final int lastDocRequested = last;\n    int nDocsReturned;\n    int totalHits;\n    float maxScore;\n    int[] ids;\n    float[] scores;\n    DocSet set;\n\n    boolean needScores = (cmd.getFlags() & GET_SCORES) != 0;\n    int maxDoc = maxDoc();\n    int smallSetSize = maxDoc>>6;\n\n    Query query = QueryUtils.makeQueryable(cmd.getQuery());\n    final long timeAllowed = cmd.getTimeAllowed();\n\n    final Filter luceneFilter = filter==null ? null : filter.getTopFilter();\n\n    // handle zero case...\n    if (lastDocRequested<=0) {\n      final float[] topscore = new float[] { Float.NEGATIVE_INFINITY };\n\n      Collector collector;\n      DocSetCollector setCollector;\n\n       if (!needScores) {\n         collector = setCollector = new DocSetCollector(smallSetSize, maxDoc);\n       } else {\n         collector = setCollector = new DocSetDelegateCollector(smallSetSize, maxDoc, new Collector() {\n           Scorer scorer;\n           public void setScorer(Scorer scorer) throws IOException {\n             this.scorer = scorer;\n           }\n           public void collect(int doc) throws IOException {\n             float score = scorer.score();\n             if (score > topscore[0]) topscore[0]=score;\n           }\n           public void setNextReader(AtomicReaderContext context) throws IOException {\n           }\n           public boolean acceptsDocsOutOfOrder() {\n             return false;\n           }\n         });\n       }\n\n       if( timeAllowed > 0 ) {\n         collector = new TimeLimitingCollector(collector, timeAllowed);\n       }\n       try {\n         super.search(query, luceneFilter, collector);\n       }\n       catch( TimeLimitingCollector.TimeExceededException x ) {\n         log.warn( \"Query: \" + query + \"; \" + x.getMessage() );\n         qr.setPartialResults(true);\n       }\n\n      set = setCollector.getDocSet();\n\n      nDocsReturned = 0;\n      ids = new int[nDocsReturned];\n      scores = new float[nDocsReturned];\n      totalHits = set.size();\n      maxScore = totalHits>0 ? topscore[0] : 0.0f;\n    } else {\n\n      TopDocsCollector topCollector;\n\n      if (cmd.getSort() == null) {\n        topCollector = TopScoreDocCollector.create(len, true);\n      } else {\n        topCollector = TopFieldCollector.create(weightSort(cmd.getSort()), len, false, needScores, needScores, true);\n      }\n\n      DocSetCollector setCollector = new DocSetDelegateCollector(maxDoc>>6, maxDoc, topCollector);\n      Collector collector = setCollector;\n\n      if( timeAllowed > 0 ) {\n        collector = new TimeLimitingCollector(collector, timeAllowed );\n      }\n      try {\n        super.search(query, luceneFilter, collector);\n      }\n      catch( TimeLimitingCollector.TimeExceededException x ) {\n        log.warn( \"Query: \" + query + \"; \" + x.getMessage() );\n        qr.setPartialResults(true);\n      }\n\n      set = setCollector.getDocSet();      \n\n      totalHits = topCollector.getTotalHits();\n      assert(totalHits == set.size());\n\n      TopDocs topDocs = topCollector.topDocs(0, len);\n      maxScore = totalHits>0 ? topDocs.getMaxScore() : 0.0f;\n      nDocsReturned = topDocs.scoreDocs.length;\n\n      ids = new int[nDocsReturned];\n      scores = (cmd.getFlags()&GET_SCORES)!=0 ? new float[nDocsReturned] : null;\n      for (int i=0; i<nDocsReturned; i++) {\n        ScoreDoc scoreDoc = topDocs.scoreDocs[i];\n        ids[i] = scoreDoc.doc;\n        if (scores != null) scores[i] = scoreDoc.score;\n      }\n    }\n\n    int sliceLen = Math.min(lastDocRequested,nDocsReturned);\n    if (sliceLen < 0) sliceLen=0;\n\n    qr.setDocList(new DocSlice(0,sliceLen,ids,scores,totalHits,maxScore));\n    // TODO: if we collect results before the filter, we just need to intersect with\n    // that filter to generate the DocSet for qr.setDocSet()\n    qr.setDocSet(set);\n\n    // TODO: currently we don't generate the DocSet for the base query,\n    // but the QueryDocSet == CompleteDocSet if filter==null.\n    return filter==null ? qr.getDocSet() : null;\n  }\n\n","sourceOld":"  // any DocSet returned is for the query only, without any filtering... that way it may\n  // be cached if desired.\n  private DocSet getDocListAndSetNC(QueryResult qr,QueryCommand cmd) throws IOException {\n    int len = cmd.getSupersetMaxDoc();\n    DocSet filter = cmd.getFilter()!=null ? cmd.getFilter() : getDocSet(cmd.getFilterList());\n    int last = len;\n    if (last < 0 || last > maxDoc()) last=maxDoc();\n    final int lastDocRequested = last;\n    int nDocsReturned;\n    int totalHits;\n    float maxScore;\n    int[] ids;\n    float[] scores;\n    DocSet set;\n\n    boolean needScores = (cmd.getFlags() & GET_SCORES) != 0;\n    int maxDoc = maxDoc();\n    int smallSetSize = maxDoc>>6;\n\n    Query query = QueryUtils.makeQueryable(cmd.getQuery());\n    final long timeAllowed = cmd.getTimeAllowed();\n\n    final Filter luceneFilter = filter==null ? null : filter.getTopFilter();\n\n    // handle zero case...\n    if (lastDocRequested<=0) {\n      final float[] topscore = new float[] { Float.NEGATIVE_INFINITY };\n\n      Collector collector;\n      DocSetCollector setCollector;\n\n       if (!needScores) {\n         collector = setCollector = new DocSetCollector(smallSetSize, maxDoc);\n       } else {\n         collector = setCollector = new DocSetDelegateCollector(smallSetSize, maxDoc, new Collector() {\n           Scorer scorer;\n           public void setScorer(Scorer scorer) throws IOException {\n             this.scorer = scorer;\n           }\n           public void collect(int doc) throws IOException {\n             float score = scorer.score();\n             if (score > topscore[0]) topscore[0]=score;\n           }\n           public void setNextReader(AtomicReaderContext context) throws IOException {\n           }\n           public boolean acceptsDocsOutOfOrder() {\n             return false;\n           }\n         });\n       }\n\n       if( timeAllowed > 0 ) {\n         collector = new TimeLimitingCollector(collector, timeAllowed);\n       }\n       try {\n         super.search(query, luceneFilter, collector);\n       }\n       catch( TimeLimitingCollector.TimeExceededException x ) {\n         log.warn( \"Query: \" + query + \"; \" + x.getMessage() );\n         qr.setPartialResults(true);\n       }\n\n      set = setCollector.getDocSet();\n\n      nDocsReturned = 0;\n      ids = new int[nDocsReturned];\n      scores = new float[nDocsReturned];\n      totalHits = set.size();\n      maxScore = totalHits>0 ? topscore[0] : 0.0f;\n    } else {\n\n      TopDocsCollector topCollector;\n\n      if (cmd.getSort() == null) {\n        topCollector = TopScoreDocCollector.create(len, true);\n      } else {\n        topCollector = TopFieldCollector.create(cmd.getSort(), len, false, needScores, needScores, true);\n      }\n\n      DocSetCollector setCollector = new DocSetDelegateCollector(maxDoc>>6, maxDoc, topCollector);\n      Collector collector = setCollector;\n\n      if( timeAllowed > 0 ) {\n        collector = new TimeLimitingCollector(collector, timeAllowed );\n      }\n      try {\n        super.search(query, luceneFilter, collector);\n      }\n      catch( TimeLimitingCollector.TimeExceededException x ) {\n        log.warn( \"Query: \" + query + \"; \" + x.getMessage() );\n        qr.setPartialResults(true);\n      }\n\n      set = setCollector.getDocSet();      \n\n      totalHits = topCollector.getTotalHits();\n      assert(totalHits == set.size());\n\n      TopDocs topDocs = topCollector.topDocs(0, len);\n      maxScore = totalHits>0 ? topDocs.getMaxScore() : 0.0f;\n      nDocsReturned = topDocs.scoreDocs.length;\n\n      ids = new int[nDocsReturned];\n      scores = (cmd.getFlags()&GET_SCORES)!=0 ? new float[nDocsReturned] : null;\n      for (int i=0; i<nDocsReturned; i++) {\n        ScoreDoc scoreDoc = topDocs.scoreDocs[i];\n        ids[i] = scoreDoc.doc;\n        if (scores != null) scores[i] = scoreDoc.score;\n      }\n    }\n\n    int sliceLen = Math.min(lastDocRequested,nDocsReturned);\n    if (sliceLen < 0) sliceLen=0;\n\n    qr.setDocList(new DocSlice(0,sliceLen,ids,scores,totalHits,maxScore));\n    // TODO: if we collect results before the filter, we just need to intersect with\n    // that filter to generate the DocSet for qr.setDocSet()\n    qr.setDocSet(set);\n\n    // TODO: currently we don't generate the DocSet for the base query,\n    // but the QueryDocSet == CompleteDocSet if filter==null.\n    return filter==null ? qr.getDocSet() : null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01","date":1296400215,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/SolrIndexSearcher#getDocListAndSetNC(QueryResult,QueryCommand).mjava","pathOld":"solr/src/java/org/apache/solr/search/SolrIndexSearcher#getDocListAndSetNC(QueryResult,QueryCommand).mjava","sourceNew":"  // any DocSet returned is for the query only, without any filtering... that way it may\n  // be cached if desired.\n  private DocSet getDocListAndSetNC(QueryResult qr,QueryCommand cmd) throws IOException {\n    int len = cmd.getSupersetMaxDoc();\n    DocSet filter = cmd.getFilter()!=null ? cmd.getFilter() : getDocSet(cmd.getFilterList());\n    int last = len;\n    if (last < 0 || last > maxDoc()) last=maxDoc();\n    final int lastDocRequested = last;\n    int nDocsReturned;\n    int totalHits;\n    float maxScore;\n    int[] ids;\n    float[] scores;\n    DocSet set;\n\n    boolean needScores = (cmd.getFlags() & GET_SCORES) != 0;\n    int maxDoc = maxDoc();\n    int smallSetSize = maxDoc>>6;\n\n    Query query = QueryUtils.makeQueryable(cmd.getQuery());\n    final long timeAllowed = cmd.getTimeAllowed();\n\n    final Filter luceneFilter = filter==null ? null : filter.getTopFilter();\n\n    // handle zero case...\n    if (lastDocRequested<=0) {\n      final float[] topscore = new float[] { Float.NEGATIVE_INFINITY };\n\n      Collector collector;\n      DocSetCollector setCollector;\n\n       if (!needScores) {\n         collector = setCollector = new DocSetCollector(smallSetSize, maxDoc);\n       } else {\n         collector = setCollector = new DocSetDelegateCollector(smallSetSize, maxDoc, new Collector() {\n           Scorer scorer;\n           @Override\n          public void setScorer(Scorer scorer) throws IOException {\n             this.scorer = scorer;\n           }\n           @Override\n          public void collect(int doc) throws IOException {\n             float score = scorer.score();\n             if (score > topscore[0]) topscore[0]=score;\n           }\n           @Override\n          public void setNextReader(AtomicReaderContext context) throws IOException {\n           }\n           @Override\n          public boolean acceptsDocsOutOfOrder() {\n             return false;\n           }\n         });\n       }\n\n       if( timeAllowed > 0 ) {\n         collector = new TimeLimitingCollector(collector, timeAllowed);\n       }\n       try {\n         super.search(query, luceneFilter, collector);\n       }\n       catch( TimeLimitingCollector.TimeExceededException x ) {\n         log.warn( \"Query: \" + query + \"; \" + x.getMessage() );\n         qr.setPartialResults(true);\n       }\n\n      set = setCollector.getDocSet();\n\n      nDocsReturned = 0;\n      ids = new int[nDocsReturned];\n      scores = new float[nDocsReturned];\n      totalHits = set.size();\n      maxScore = totalHits>0 ? topscore[0] : 0.0f;\n    } else {\n\n      TopDocsCollector topCollector;\n\n      if (cmd.getSort() == null) {\n        topCollector = TopScoreDocCollector.create(len, true);\n      } else {\n        topCollector = TopFieldCollector.create(weightSort(cmd.getSort()), len, false, needScores, needScores, true);\n      }\n\n      DocSetCollector setCollector = new DocSetDelegateCollector(maxDoc>>6, maxDoc, topCollector);\n      Collector collector = setCollector;\n\n      if( timeAllowed > 0 ) {\n        collector = new TimeLimitingCollector(collector, timeAllowed );\n      }\n      try {\n        super.search(query, luceneFilter, collector);\n      }\n      catch( TimeLimitingCollector.TimeExceededException x ) {\n        log.warn( \"Query: \" + query + \"; \" + x.getMessage() );\n        qr.setPartialResults(true);\n      }\n\n      set = setCollector.getDocSet();      \n\n      totalHits = topCollector.getTotalHits();\n      assert(totalHits == set.size());\n\n      TopDocs topDocs = topCollector.topDocs(0, len);\n      maxScore = totalHits>0 ? topDocs.getMaxScore() : 0.0f;\n      nDocsReturned = topDocs.scoreDocs.length;\n\n      ids = new int[nDocsReturned];\n      scores = (cmd.getFlags()&GET_SCORES)!=0 ? new float[nDocsReturned] : null;\n      for (int i=0; i<nDocsReturned; i++) {\n        ScoreDoc scoreDoc = topDocs.scoreDocs[i];\n        ids[i] = scoreDoc.doc;\n        if (scores != null) scores[i] = scoreDoc.score;\n      }\n    }\n\n    int sliceLen = Math.min(lastDocRequested,nDocsReturned);\n    if (sliceLen < 0) sliceLen=0;\n\n    qr.setDocList(new DocSlice(0,sliceLen,ids,scores,totalHits,maxScore));\n    // TODO: if we collect results before the filter, we just need to intersect with\n    // that filter to generate the DocSet for qr.setDocSet()\n    qr.setDocSet(set);\n\n    // TODO: currently we don't generate the DocSet for the base query,\n    // but the QueryDocSet == CompleteDocSet if filter==null.\n    return filter==null ? qr.getDocSet() : null;\n  }\n\n","sourceOld":"  // any DocSet returned is for the query only, without any filtering... that way it may\n  // be cached if desired.\n  private DocSet getDocListAndSetNC(QueryResult qr,QueryCommand cmd) throws IOException {\n    int len = cmd.getSupersetMaxDoc();\n    DocSet filter = cmd.getFilter()!=null ? cmd.getFilter() : getDocSet(cmd.getFilterList());\n    int last = len;\n    if (last < 0 || last > maxDoc()) last=maxDoc();\n    final int lastDocRequested = last;\n    int nDocsReturned;\n    int totalHits;\n    float maxScore;\n    int[] ids;\n    float[] scores;\n    DocSet set;\n\n    boolean needScores = (cmd.getFlags() & GET_SCORES) != 0;\n    int maxDoc = maxDoc();\n    int smallSetSize = maxDoc>>6;\n\n    Query query = QueryUtils.makeQueryable(cmd.getQuery());\n    final long timeAllowed = cmd.getTimeAllowed();\n\n    final Filter luceneFilter = filter==null ? null : filter.getTopFilter();\n\n    // handle zero case...\n    if (lastDocRequested<=0) {\n      final float[] topscore = new float[] { Float.NEGATIVE_INFINITY };\n\n      Collector collector;\n      DocSetCollector setCollector;\n\n       if (!needScores) {\n         collector = setCollector = new DocSetCollector(smallSetSize, maxDoc);\n       } else {\n         collector = setCollector = new DocSetDelegateCollector(smallSetSize, maxDoc, new Collector() {\n           Scorer scorer;\n           public void setScorer(Scorer scorer) throws IOException {\n             this.scorer = scorer;\n           }\n           public void collect(int doc) throws IOException {\n             float score = scorer.score();\n             if (score > topscore[0]) topscore[0]=score;\n           }\n           public void setNextReader(AtomicReaderContext context) throws IOException {\n           }\n           public boolean acceptsDocsOutOfOrder() {\n             return false;\n           }\n         });\n       }\n\n       if( timeAllowed > 0 ) {\n         collector = new TimeLimitingCollector(collector, timeAllowed);\n       }\n       try {\n         super.search(query, luceneFilter, collector);\n       }\n       catch( TimeLimitingCollector.TimeExceededException x ) {\n         log.warn( \"Query: \" + query + \"; \" + x.getMessage() );\n         qr.setPartialResults(true);\n       }\n\n      set = setCollector.getDocSet();\n\n      nDocsReturned = 0;\n      ids = new int[nDocsReturned];\n      scores = new float[nDocsReturned];\n      totalHits = set.size();\n      maxScore = totalHits>0 ? topscore[0] : 0.0f;\n    } else {\n\n      TopDocsCollector topCollector;\n\n      if (cmd.getSort() == null) {\n        topCollector = TopScoreDocCollector.create(len, true);\n      } else {\n        topCollector = TopFieldCollector.create(weightSort(cmd.getSort()), len, false, needScores, needScores, true);\n      }\n\n      DocSetCollector setCollector = new DocSetDelegateCollector(maxDoc>>6, maxDoc, topCollector);\n      Collector collector = setCollector;\n\n      if( timeAllowed > 0 ) {\n        collector = new TimeLimitingCollector(collector, timeAllowed );\n      }\n      try {\n        super.search(query, luceneFilter, collector);\n      }\n      catch( TimeLimitingCollector.TimeExceededException x ) {\n        log.warn( \"Query: \" + query + \"; \" + x.getMessage() );\n        qr.setPartialResults(true);\n      }\n\n      set = setCollector.getDocSet();      \n\n      totalHits = topCollector.getTotalHits();\n      assert(totalHits == set.size());\n\n      TopDocs topDocs = topCollector.topDocs(0, len);\n      maxScore = totalHits>0 ? topDocs.getMaxScore() : 0.0f;\n      nDocsReturned = topDocs.scoreDocs.length;\n\n      ids = new int[nDocsReturned];\n      scores = (cmd.getFlags()&GET_SCORES)!=0 ? new float[nDocsReturned] : null;\n      for (int i=0; i<nDocsReturned; i++) {\n        ScoreDoc scoreDoc = topDocs.scoreDocs[i];\n        ids[i] = scoreDoc.doc;\n        if (scores != null) scores[i] = scoreDoc.score;\n      }\n    }\n\n    int sliceLen = Math.min(lastDocRequested,nDocsReturned);\n    if (sliceLen < 0) sliceLen=0;\n\n    qr.setDocList(new DocSlice(0,sliceLen,ids,scores,totalHits,maxScore));\n    // TODO: if we collect results before the filter, we just need to intersect with\n    // that filter to generate the DocSet for qr.setDocSet()\n    qr.setDocSet(set);\n\n    // TODO: currently we don't generate the DocSet for the base query,\n    // but the QueryDocSet == CompleteDocSet if filter==null.\n    return filter==null ? qr.getDocSet() : null;\n  }\n\n","bugFix":null,"bugIntro":["4d3e8520fd031bab31fd0e4d480e55958bc45efe","4d3e8520fd031bab31fd0e4d480e55958bc45efe","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/search/SolrIndexSearcher#getDocListAndSetNC(QueryResult,QueryCommand).mjava","pathOld":"solr/src/java/org/apache/solr/search/SolrIndexSearcher#getDocListAndSetNC(QueryResult,QueryCommand).mjava","sourceNew":"  // any DocSet returned is for the query only, without any filtering... that way it may\n  // be cached if desired.\n  private DocSet getDocListAndSetNC(QueryResult qr,QueryCommand cmd) throws IOException {\n    int len = cmd.getSupersetMaxDoc();\n    DocSet filter = cmd.getFilter()!=null ? cmd.getFilter() : getDocSet(cmd.getFilterList());\n    int last = len;\n    if (last < 0 || last > maxDoc()) last=maxDoc();\n    final int lastDocRequested = last;\n    int nDocsReturned;\n    int totalHits;\n    float maxScore;\n    int[] ids;\n    float[] scores;\n    DocSet set;\n\n    boolean needScores = (cmd.getFlags() & GET_SCORES) != 0;\n    int maxDoc = maxDoc();\n    int smallSetSize = maxDoc>>6;\n\n    Query query = QueryUtils.makeQueryable(cmd.getQuery());\n    final long timeAllowed = cmd.getTimeAllowed();\n\n    final Filter luceneFilter = filter==null ? null : filter.getTopFilter();\n\n    // handle zero case...\n    if (lastDocRequested<=0) {\n      final float[] topscore = new float[] { Float.NEGATIVE_INFINITY };\n\n      Collector collector;\n      DocSetCollector setCollector;\n\n       if (!needScores) {\n         collector = setCollector = new DocSetCollector(smallSetSize, maxDoc);\n       } else {\n         collector = setCollector = new DocSetDelegateCollector(smallSetSize, maxDoc, new Collector() {\n           Scorer scorer;\n           @Override\n          public void setScorer(Scorer scorer) throws IOException {\n             this.scorer = scorer;\n           }\n           @Override\n          public void collect(int doc) throws IOException {\n             float score = scorer.score();\n             if (score > topscore[0]) topscore[0]=score;\n           }\n           @Override\n          public void setNextReader(AtomicReaderContext context) throws IOException {\n           }\n           @Override\n          public boolean acceptsDocsOutOfOrder() {\n             return false;\n           }\n         });\n       }\n\n       if( timeAllowed > 0 ) {\n         collector = new TimeLimitingCollector(collector, timeAllowed);\n       }\n       try {\n         super.search(query, luceneFilter, collector);\n       }\n       catch( TimeLimitingCollector.TimeExceededException x ) {\n         log.warn( \"Query: \" + query + \"; \" + x.getMessage() );\n         qr.setPartialResults(true);\n       }\n\n      set = setCollector.getDocSet();\n\n      nDocsReturned = 0;\n      ids = new int[nDocsReturned];\n      scores = new float[nDocsReturned];\n      totalHits = set.size();\n      maxScore = totalHits>0 ? topscore[0] : 0.0f;\n    } else {\n\n      TopDocsCollector topCollector;\n\n      if (cmd.getSort() == null) {\n        topCollector = TopScoreDocCollector.create(len, true);\n      } else {\n        topCollector = TopFieldCollector.create(weightSort(cmd.getSort()), len, false, needScores, needScores, true);\n      }\n\n      DocSetCollector setCollector = new DocSetDelegateCollector(maxDoc>>6, maxDoc, topCollector);\n      Collector collector = setCollector;\n\n      if( timeAllowed > 0 ) {\n        collector = new TimeLimitingCollector(collector, timeAllowed );\n      }\n      try {\n        super.search(query, luceneFilter, collector);\n      }\n      catch( TimeLimitingCollector.TimeExceededException x ) {\n        log.warn( \"Query: \" + query + \"; \" + x.getMessage() );\n        qr.setPartialResults(true);\n      }\n\n      set = setCollector.getDocSet();      \n\n      totalHits = topCollector.getTotalHits();\n      assert(totalHits == set.size());\n\n      TopDocs topDocs = topCollector.topDocs(0, len);\n      maxScore = totalHits>0 ? topDocs.getMaxScore() : 0.0f;\n      nDocsReturned = topDocs.scoreDocs.length;\n\n      ids = new int[nDocsReturned];\n      scores = (cmd.getFlags()&GET_SCORES)!=0 ? new float[nDocsReturned] : null;\n      for (int i=0; i<nDocsReturned; i++) {\n        ScoreDoc scoreDoc = topDocs.scoreDocs[i];\n        ids[i] = scoreDoc.doc;\n        if (scores != null) scores[i] = scoreDoc.score;\n      }\n    }\n\n    int sliceLen = Math.min(lastDocRequested,nDocsReturned);\n    if (sliceLen < 0) sliceLen=0;\n\n    qr.setDocList(new DocSlice(0,sliceLen,ids,scores,totalHits,maxScore));\n    // TODO: if we collect results before the filter, we just need to intersect with\n    // that filter to generate the DocSet for qr.setDocSet()\n    qr.setDocSet(set);\n\n    // TODO: currently we don't generate the DocSet for the base query,\n    // but the QueryDocSet == CompleteDocSet if filter==null.\n    return filter==null ? qr.getDocSet() : null;\n  }\n\n","sourceOld":"  // any DocSet returned is for the query only, without any filtering... that way it may\n  // be cached if desired.\n  private DocSet getDocListAndSetNC(QueryResult qr,QueryCommand cmd) throws IOException {\n    int len = cmd.getSupersetMaxDoc();\n    DocSet filter = cmd.getFilter()!=null ? cmd.getFilter() : getDocSet(cmd.getFilterList());\n    int last = len;\n    if (last < 0 || last > maxDoc()) last=maxDoc();\n    final int lastDocRequested = last;\n    int nDocsReturned;\n    int totalHits;\n    float maxScore;\n    int[] ids;\n    float[] scores;\n    DocSet set;\n\n    boolean needScores = (cmd.getFlags() & GET_SCORES) != 0;\n    int maxDoc = maxDoc();\n    int smallSetSize = maxDoc>>6;\n\n    Query query = QueryUtils.makeQueryable(cmd.getQuery());\n    final long timeAllowed = cmd.getTimeAllowed();\n\n    final Filter luceneFilter = filter==null ? null : filter.getTopFilter();\n\n    // handle zero case...\n    if (lastDocRequested<=0) {\n      final float[] topscore = new float[] { Float.NEGATIVE_INFINITY };\n\n      Collector collector;\n      DocSetCollector setCollector;\n\n       if (!needScores) {\n         collector = setCollector = new DocSetCollector(smallSetSize, maxDoc);\n       } else {\n         collector = setCollector = new DocSetDelegateCollector(smallSetSize, maxDoc, new Collector() {\n           Scorer scorer;\n           public void setScorer(Scorer scorer) throws IOException {\n             this.scorer = scorer;\n           }\n           public void collect(int doc) throws IOException {\n             float score = scorer.score();\n             if (score > topscore[0]) topscore[0]=score;\n           }\n           public void setNextReader(IndexReader reader, int docBase) throws IOException {\n           }\n           public boolean acceptsDocsOutOfOrder() {\n             return false;\n           }\n         });\n       }\n\n       if( timeAllowed > 0 ) {\n         collector = new TimeLimitingCollector(collector, timeAllowed);\n       }\n       try {\n         super.search(query, luceneFilter, collector);\n       }\n       catch( TimeLimitingCollector.TimeExceededException x ) {\n         log.warn( \"Query: \" + query + \"; \" + x.getMessage() );\n         qr.setPartialResults(true);\n       }\n\n      set = setCollector.getDocSet();\n\n      nDocsReturned = 0;\n      ids = new int[nDocsReturned];\n      scores = new float[nDocsReturned];\n      totalHits = set.size();\n      maxScore = totalHits>0 ? topscore[0] : 0.0f;\n    } else {\n\n      TopDocsCollector topCollector;\n\n      if (cmd.getSort() == null) {\n        topCollector = TopScoreDocCollector.create(len, true);\n      } else {\n        topCollector = TopFieldCollector.create(cmd.getSort(), len, false, needScores, needScores, true);\n      }\n\n      DocSetCollector setCollector = new DocSetDelegateCollector(maxDoc>>6, maxDoc, topCollector);\n      Collector collector = setCollector;\n\n      if( timeAllowed > 0 ) {\n        collector = new TimeLimitingCollector(collector, timeAllowed );\n      }\n      try {\n        super.search(query, luceneFilter, collector);\n      }\n      catch( TimeLimitingCollector.TimeExceededException x ) {\n        log.warn( \"Query: \" + query + \"; \" + x.getMessage() );\n        qr.setPartialResults(true);\n      }\n\n      set = setCollector.getDocSet();      \n\n      totalHits = topCollector.getTotalHits();\n      assert(totalHits == set.size());\n\n      TopDocs topDocs = topCollector.topDocs(0, len);\n      maxScore = totalHits>0 ? topDocs.getMaxScore() : 0.0f;\n      nDocsReturned = topDocs.scoreDocs.length;\n\n      ids = new int[nDocsReturned];\n      scores = (cmd.getFlags()&GET_SCORES)!=0 ? new float[nDocsReturned] : null;\n      for (int i=0; i<nDocsReturned; i++) {\n        ScoreDoc scoreDoc = topDocs.scoreDocs[i];\n        ids[i] = scoreDoc.doc;\n        if (scores != null) scores[i] = scoreDoc.score;\n      }\n    }\n\n    int sliceLen = Math.min(lastDocRequested,nDocsReturned);\n    if (sliceLen < 0) sliceLen=0;\n\n    qr.setDocList(new DocSlice(0,sliceLen,ids,scores,totalHits,maxScore));\n    // TODO: if we collect results before the filter, we just need to intersect with\n    // that filter to generate the DocSet for qr.setDocSet()\n    qr.setDocSet(set);\n\n    // TODO: currently we don't generate the DocSet for the base query,\n    // but the QueryDocSet == CompleteDocSet if filter==null.\n    return filter==null ? qr.getDocSet() : null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/search/SolrIndexSearcher#getDocListAndSetNC(QueryResult,QueryCommand).mjava","pathOld":"solr/src/java/org/apache/solr/search/SolrIndexSearcher#getDocListAndSetNC(QueryResult,QueryCommand).mjava","sourceNew":"  // any DocSet returned is for the query only, without any filtering... that way it may\n  // be cached if desired.\n  private DocSet getDocListAndSetNC(QueryResult qr,QueryCommand cmd) throws IOException {\n    int len = cmd.getSupersetMaxDoc();\n    DocSet filter = cmd.getFilter()!=null ? cmd.getFilter() : getDocSet(cmd.getFilterList());\n    int last = len;\n    if (last < 0 || last > maxDoc()) last=maxDoc();\n    final int lastDocRequested = last;\n    int nDocsReturned;\n    int totalHits;\n    float maxScore;\n    int[] ids;\n    float[] scores;\n    DocSet set;\n\n    boolean needScores = (cmd.getFlags() & GET_SCORES) != 0;\n    int maxDoc = maxDoc();\n    int smallSetSize = maxDoc>>6;\n\n    Query query = QueryUtils.makeQueryable(cmd.getQuery());\n    final long timeAllowed = cmd.getTimeAllowed();\n\n    final Filter luceneFilter = filter==null ? null : filter.getTopFilter();\n\n    // handle zero case...\n    if (lastDocRequested<=0) {\n      final float[] topscore = new float[] { Float.NEGATIVE_INFINITY };\n\n      Collector collector;\n      DocSetCollector setCollector;\n\n       if (!needScores) {\n         collector = setCollector = new DocSetCollector(smallSetSize, maxDoc);\n       } else {\n         collector = setCollector = new DocSetDelegateCollector(smallSetSize, maxDoc, new Collector() {\n           Scorer scorer;\n           @Override\n          public void setScorer(Scorer scorer) throws IOException {\n             this.scorer = scorer;\n           }\n           @Override\n          public void collect(int doc) throws IOException {\n             float score = scorer.score();\n             if (score > topscore[0]) topscore[0]=score;\n           }\n           @Override\n          public void setNextReader(AtomicReaderContext context) throws IOException {\n           }\n           @Override\n          public boolean acceptsDocsOutOfOrder() {\n             return false;\n           }\n         });\n       }\n\n       if( timeAllowed > 0 ) {\n         collector = new TimeLimitingCollector(collector, timeAllowed);\n       }\n       try {\n         super.search(query, luceneFilter, collector);\n       }\n       catch( TimeLimitingCollector.TimeExceededException x ) {\n         log.warn( \"Query: \" + query + \"; \" + x.getMessage() );\n         qr.setPartialResults(true);\n       }\n\n      set = setCollector.getDocSet();\n\n      nDocsReturned = 0;\n      ids = new int[nDocsReturned];\n      scores = new float[nDocsReturned];\n      totalHits = set.size();\n      maxScore = totalHits>0 ? topscore[0] : 0.0f;\n    } else {\n\n      TopDocsCollector topCollector;\n\n      if (cmd.getSort() == null) {\n        topCollector = TopScoreDocCollector.create(len, true);\n      } else {\n        topCollector = TopFieldCollector.create(weightSort(cmd.getSort()), len, false, needScores, needScores, true);\n      }\n\n      DocSetCollector setCollector = new DocSetDelegateCollector(maxDoc>>6, maxDoc, topCollector);\n      Collector collector = setCollector;\n\n      if( timeAllowed > 0 ) {\n        collector = new TimeLimitingCollector(collector, timeAllowed );\n      }\n      try {\n        super.search(query, luceneFilter, collector);\n      }\n      catch( TimeLimitingCollector.TimeExceededException x ) {\n        log.warn( \"Query: \" + query + \"; \" + x.getMessage() );\n        qr.setPartialResults(true);\n      }\n\n      set = setCollector.getDocSet();      \n\n      totalHits = topCollector.getTotalHits();\n      assert(totalHits == set.size());\n\n      TopDocs topDocs = topCollector.topDocs(0, len);\n      maxScore = totalHits>0 ? topDocs.getMaxScore() : 0.0f;\n      nDocsReturned = topDocs.scoreDocs.length;\n\n      ids = new int[nDocsReturned];\n      scores = (cmd.getFlags()&GET_SCORES)!=0 ? new float[nDocsReturned] : null;\n      for (int i=0; i<nDocsReturned; i++) {\n        ScoreDoc scoreDoc = topDocs.scoreDocs[i];\n        ids[i] = scoreDoc.doc;\n        if (scores != null) scores[i] = scoreDoc.score;\n      }\n    }\n\n    int sliceLen = Math.min(lastDocRequested,nDocsReturned);\n    if (sliceLen < 0) sliceLen=0;\n\n    qr.setDocList(new DocSlice(0,sliceLen,ids,scores,totalHits,maxScore));\n    // TODO: if we collect results before the filter, we just need to intersect with\n    // that filter to generate the DocSet for qr.setDocSet()\n    qr.setDocSet(set);\n\n    // TODO: currently we don't generate the DocSet for the base query,\n    // but the QueryDocSet == CompleteDocSet if filter==null.\n    return filter==null ? qr.getDocSet() : null;\n  }\n\n","sourceOld":"  // any DocSet returned is for the query only, without any filtering... that way it may\n  // be cached if desired.\n  private DocSet getDocListAndSetNC(QueryResult qr,QueryCommand cmd) throws IOException {\n    int len = cmd.getSupersetMaxDoc();\n    DocSet filter = cmd.getFilter()!=null ? cmd.getFilter() : getDocSet(cmd.getFilterList());\n    int last = len;\n    if (last < 0 || last > maxDoc()) last=maxDoc();\n    final int lastDocRequested = last;\n    int nDocsReturned;\n    int totalHits;\n    float maxScore;\n    int[] ids;\n    float[] scores;\n    DocSet set;\n\n    boolean needScores = (cmd.getFlags() & GET_SCORES) != 0;\n    int maxDoc = maxDoc();\n    int smallSetSize = maxDoc>>6;\n\n    Query query = QueryUtils.makeQueryable(cmd.getQuery());\n    final long timeAllowed = cmd.getTimeAllowed();\n\n    final Filter luceneFilter = filter==null ? null : filter.getTopFilter();\n\n    // handle zero case...\n    if (lastDocRequested<=0) {\n      final float[] topscore = new float[] { Float.NEGATIVE_INFINITY };\n\n      Collector collector;\n      DocSetCollector setCollector;\n\n       if (!needScores) {\n         collector = setCollector = new DocSetCollector(smallSetSize, maxDoc);\n       } else {\n         collector = setCollector = new DocSetDelegateCollector(smallSetSize, maxDoc, new Collector() {\n           Scorer scorer;\n           public void setScorer(Scorer scorer) throws IOException {\n             this.scorer = scorer;\n           }\n           public void collect(int doc) throws IOException {\n             float score = scorer.score();\n             if (score > topscore[0]) topscore[0]=score;\n           }\n           public void setNextReader(AtomicReaderContext context) throws IOException {\n           }\n           public boolean acceptsDocsOutOfOrder() {\n             return false;\n           }\n         });\n       }\n\n       if( timeAllowed > 0 ) {\n         collector = new TimeLimitingCollector(collector, timeAllowed);\n       }\n       try {\n         super.search(query, luceneFilter, collector);\n       }\n       catch( TimeLimitingCollector.TimeExceededException x ) {\n         log.warn( \"Query: \" + query + \"; \" + x.getMessage() );\n         qr.setPartialResults(true);\n       }\n\n      set = setCollector.getDocSet();\n\n      nDocsReturned = 0;\n      ids = new int[nDocsReturned];\n      scores = new float[nDocsReturned];\n      totalHits = set.size();\n      maxScore = totalHits>0 ? topscore[0] : 0.0f;\n    } else {\n\n      TopDocsCollector topCollector;\n\n      if (cmd.getSort() == null) {\n        topCollector = TopScoreDocCollector.create(len, true);\n      } else {\n        topCollector = TopFieldCollector.create(weightSort(cmd.getSort()), len, false, needScores, needScores, true);\n      }\n\n      DocSetCollector setCollector = new DocSetDelegateCollector(maxDoc>>6, maxDoc, topCollector);\n      Collector collector = setCollector;\n\n      if( timeAllowed > 0 ) {\n        collector = new TimeLimitingCollector(collector, timeAllowed );\n      }\n      try {\n        super.search(query, luceneFilter, collector);\n      }\n      catch( TimeLimitingCollector.TimeExceededException x ) {\n        log.warn( \"Query: \" + query + \"; \" + x.getMessage() );\n        qr.setPartialResults(true);\n      }\n\n      set = setCollector.getDocSet();      \n\n      totalHits = topCollector.getTotalHits();\n      assert(totalHits == set.size());\n\n      TopDocs topDocs = topCollector.topDocs(0, len);\n      maxScore = totalHits>0 ? topDocs.getMaxScore() : 0.0f;\n      nDocsReturned = topDocs.scoreDocs.length;\n\n      ids = new int[nDocsReturned];\n      scores = (cmd.getFlags()&GET_SCORES)!=0 ? new float[nDocsReturned] : null;\n      for (int i=0; i<nDocsReturned; i++) {\n        ScoreDoc scoreDoc = topDocs.scoreDocs[i];\n        ids[i] = scoreDoc.doc;\n        if (scores != null) scores[i] = scoreDoc.score;\n      }\n    }\n\n    int sliceLen = Math.min(lastDocRequested,nDocsReturned);\n    if (sliceLen < 0) sliceLen=0;\n\n    qr.setDocList(new DocSlice(0,sliceLen,ids,scores,totalHits,maxScore));\n    // TODO: if we collect results before the filter, we just need to intersect with\n    // that filter to generate the DocSet for qr.setDocSet()\n    qr.setDocSet(set);\n\n    // TODO: currently we don't generate the DocSet for the base query,\n    // but the QueryDocSet == CompleteDocSet if filter==null.\n    return filter==null ? qr.getDocSet() : null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8bf47b67b38083a0c4d9d2e3f53b59a48e8db34","date":1309197122,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/SolrIndexSearcher#getDocListAndSetNC(QueryResult,QueryCommand).mjava","pathOld":"solr/src/java/org/apache/solr/search/SolrIndexSearcher#getDocListAndSetNC(QueryResult,QueryCommand).mjava","sourceNew":"  // any DocSet returned is for the query only, without any filtering... that way it may\n  // be cached if desired.\n  private DocSet getDocListAndSetNC(QueryResult qr,QueryCommand cmd) throws IOException {\n    int len = cmd.getSupersetMaxDoc();\n    int last = len;\n    if (last < 0 || last > maxDoc()) last=maxDoc();\n    final int lastDocRequested = last;\n    int nDocsReturned;\n    int totalHits;\n    float maxScore;\n    int[] ids;\n    float[] scores;\n    DocSet set;\n\n    boolean needScores = (cmd.getFlags() & GET_SCORES) != 0;\n    int maxDoc = maxDoc();\n    int smallSetSize = maxDoc>>6;\n\n    ProcessedFilter pf = getProcessedFilter(cmd.getFilter(), cmd.getFilterList());\n    final Filter luceneFilter = pf.filter;\n\n    Query query = QueryUtils.makeQueryable(cmd.getQuery());\n    final long timeAllowed = cmd.getTimeAllowed();\n\n    // handle zero case...\n    if (lastDocRequested<=0) {\n      final float[] topscore = new float[] { Float.NEGATIVE_INFINITY };\n\n      Collector collector;\n      DocSetCollector setCollector;\n\n       if (!needScores) {\n         collector = setCollector = new DocSetCollector(smallSetSize, maxDoc);\n       } else {\n         collector = setCollector = new DocSetDelegateCollector(smallSetSize, maxDoc, new Collector() {\n           Scorer scorer;\n           @Override\n          public void setScorer(Scorer scorer) throws IOException {\n             this.scorer = scorer;\n           }\n           @Override\n          public void collect(int doc) throws IOException {\n             float score = scorer.score();\n             if (score > topscore[0]) topscore[0]=score;\n           }\n           @Override\n          public void setNextReader(AtomicReaderContext context) throws IOException {\n           }\n           @Override\n          public boolean acceptsDocsOutOfOrder() {\n             return false;\n           }\n         });\n       }\n\n       if( timeAllowed > 0 ) {\n         collector = new TimeLimitingCollector(collector, timeAllowed);\n       }\n      if (pf.postFilter != null) {\n        pf.postFilter.setLastDelegate(collector);\n        collector = pf.postFilter;\n      }\n\n       try {\n         super.search(query, luceneFilter, collector);\n       }\n       catch( TimeLimitingCollector.TimeExceededException x ) {\n         log.warn( \"Query: \" + query + \"; \" + x.getMessage() );\n         qr.setPartialResults(true);\n       }\n\n      set = setCollector.getDocSet();\n\n      nDocsReturned = 0;\n      ids = new int[nDocsReturned];\n      scores = new float[nDocsReturned];\n      totalHits = set.size();\n      maxScore = totalHits>0 ? topscore[0] : 0.0f;\n    } else {\n\n      TopDocsCollector topCollector;\n\n      if (cmd.getSort() == null) {\n        topCollector = TopScoreDocCollector.create(len, true);\n      } else {\n        topCollector = TopFieldCollector.create(weightSort(cmd.getSort()), len, false, needScores, needScores, true);\n      }\n\n      DocSetCollector setCollector = new DocSetDelegateCollector(maxDoc>>6, maxDoc, topCollector);\n      Collector collector = setCollector;\n\n      if( timeAllowed > 0 ) {\n        collector = new TimeLimitingCollector(collector, timeAllowed );\n      }\n      if (pf.postFilter != null) {\n        pf.postFilter.setLastDelegate(collector);\n        collector = pf.postFilter;\n      }\n      try {\n        super.search(query, luceneFilter, collector);\n      }\n      catch( TimeLimitingCollector.TimeExceededException x ) {\n        log.warn( \"Query: \" + query + \"; \" + x.getMessage() );\n        qr.setPartialResults(true);\n      }\n\n      set = setCollector.getDocSet();      \n\n      totalHits = topCollector.getTotalHits();\n      assert(totalHits == set.size());\n\n      TopDocs topDocs = topCollector.topDocs(0, len);\n      maxScore = totalHits>0 ? topDocs.getMaxScore() : 0.0f;\n      nDocsReturned = topDocs.scoreDocs.length;\n\n      ids = new int[nDocsReturned];\n      scores = (cmd.getFlags()&GET_SCORES)!=0 ? new float[nDocsReturned] : null;\n      for (int i=0; i<nDocsReturned; i++) {\n        ScoreDoc scoreDoc = topDocs.scoreDocs[i];\n        ids[i] = scoreDoc.doc;\n        if (scores != null) scores[i] = scoreDoc.score;\n      }\n    }\n\n    int sliceLen = Math.min(lastDocRequested,nDocsReturned);\n    if (sliceLen < 0) sliceLen=0;\n\n    qr.setDocList(new DocSlice(0,sliceLen,ids,scores,totalHits,maxScore));\n    // TODO: if we collect results before the filter, we just need to intersect with\n    // that filter to generate the DocSet for qr.setDocSet()\n    qr.setDocSet(set);\n\n    // TODO: currently we don't generate the DocSet for the base query,\n    // but the QueryDocSet == CompleteDocSet if filter==null.\n    return pf.filter==null && pf.postFilter==null ? qr.getDocSet() : null;\n  }\n\n","sourceOld":"  // any DocSet returned is for the query only, without any filtering... that way it may\n  // be cached if desired.\n  private DocSet getDocListAndSetNC(QueryResult qr,QueryCommand cmd) throws IOException {\n    int len = cmd.getSupersetMaxDoc();\n    DocSet filter = cmd.getFilter()!=null ? cmd.getFilter() : getDocSet(cmd.getFilterList());\n    int last = len;\n    if (last < 0 || last > maxDoc()) last=maxDoc();\n    final int lastDocRequested = last;\n    int nDocsReturned;\n    int totalHits;\n    float maxScore;\n    int[] ids;\n    float[] scores;\n    DocSet set;\n\n    boolean needScores = (cmd.getFlags() & GET_SCORES) != 0;\n    int maxDoc = maxDoc();\n    int smallSetSize = maxDoc>>6;\n\n    Query query = QueryUtils.makeQueryable(cmd.getQuery());\n    final long timeAllowed = cmd.getTimeAllowed();\n\n    final Filter luceneFilter = filter==null ? null : filter.getTopFilter();\n\n    // handle zero case...\n    if (lastDocRequested<=0) {\n      final float[] topscore = new float[] { Float.NEGATIVE_INFINITY };\n\n      Collector collector;\n      DocSetCollector setCollector;\n\n       if (!needScores) {\n         collector = setCollector = new DocSetCollector(smallSetSize, maxDoc);\n       } else {\n         collector = setCollector = new DocSetDelegateCollector(smallSetSize, maxDoc, new Collector() {\n           Scorer scorer;\n           @Override\n          public void setScorer(Scorer scorer) throws IOException {\n             this.scorer = scorer;\n           }\n           @Override\n          public void collect(int doc) throws IOException {\n             float score = scorer.score();\n             if (score > topscore[0]) topscore[0]=score;\n           }\n           @Override\n          public void setNextReader(AtomicReaderContext context) throws IOException {\n           }\n           @Override\n          public boolean acceptsDocsOutOfOrder() {\n             return false;\n           }\n         });\n       }\n\n       if( timeAllowed > 0 ) {\n         collector = new TimeLimitingCollector(collector, timeAllowed);\n       }\n       try {\n         super.search(query, luceneFilter, collector);\n       }\n       catch( TimeLimitingCollector.TimeExceededException x ) {\n         log.warn( \"Query: \" + query + \"; \" + x.getMessage() );\n         qr.setPartialResults(true);\n       }\n\n      set = setCollector.getDocSet();\n\n      nDocsReturned = 0;\n      ids = new int[nDocsReturned];\n      scores = new float[nDocsReturned];\n      totalHits = set.size();\n      maxScore = totalHits>0 ? topscore[0] : 0.0f;\n    } else {\n\n      TopDocsCollector topCollector;\n\n      if (cmd.getSort() == null) {\n        topCollector = TopScoreDocCollector.create(len, true);\n      } else {\n        topCollector = TopFieldCollector.create(weightSort(cmd.getSort()), len, false, needScores, needScores, true);\n      }\n\n      DocSetCollector setCollector = new DocSetDelegateCollector(maxDoc>>6, maxDoc, topCollector);\n      Collector collector = setCollector;\n\n      if( timeAllowed > 0 ) {\n        collector = new TimeLimitingCollector(collector, timeAllowed );\n      }\n      try {\n        super.search(query, luceneFilter, collector);\n      }\n      catch( TimeLimitingCollector.TimeExceededException x ) {\n        log.warn( \"Query: \" + query + \"; \" + x.getMessage() );\n        qr.setPartialResults(true);\n      }\n\n      set = setCollector.getDocSet();      \n\n      totalHits = topCollector.getTotalHits();\n      assert(totalHits == set.size());\n\n      TopDocs topDocs = topCollector.topDocs(0, len);\n      maxScore = totalHits>0 ? topDocs.getMaxScore() : 0.0f;\n      nDocsReturned = topDocs.scoreDocs.length;\n\n      ids = new int[nDocsReturned];\n      scores = (cmd.getFlags()&GET_SCORES)!=0 ? new float[nDocsReturned] : null;\n      for (int i=0; i<nDocsReturned; i++) {\n        ScoreDoc scoreDoc = topDocs.scoreDocs[i];\n        ids[i] = scoreDoc.doc;\n        if (scores != null) scores[i] = scoreDoc.score;\n      }\n    }\n\n    int sliceLen = Math.min(lastDocRequested,nDocsReturned);\n    if (sliceLen < 0) sliceLen=0;\n\n    qr.setDocList(new DocSlice(0,sliceLen,ids,scores,totalHits,maxScore));\n    // TODO: if we collect results before the filter, we just need to intersect with\n    // that filter to generate the DocSet for qr.setDocSet()\n    qr.setDocSet(set);\n\n    // TODO: currently we don't generate the DocSet for the base query,\n    // but the QueryDocSet == CompleteDocSet if filter==null.\n    return filter==null ? qr.getDocSet() : null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2553b00f699380c64959ccb27991289aae87be2e","date":1309290151,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/search/SolrIndexSearcher#getDocListAndSetNC(QueryResult,QueryCommand).mjava","pathOld":"solr/src/java/org/apache/solr/search/SolrIndexSearcher#getDocListAndSetNC(QueryResult,QueryCommand).mjava","sourceNew":"  // any DocSet returned is for the query only, without any filtering... that way it may\n  // be cached if desired.\n  private DocSet getDocListAndSetNC(QueryResult qr,QueryCommand cmd) throws IOException {\n    int len = cmd.getSupersetMaxDoc();\n    int last = len;\n    if (last < 0 || last > maxDoc()) last=maxDoc();\n    final int lastDocRequested = last;\n    int nDocsReturned;\n    int totalHits;\n    float maxScore;\n    int[] ids;\n    float[] scores;\n    DocSet set;\n\n    boolean needScores = (cmd.getFlags() & GET_SCORES) != 0;\n    int maxDoc = maxDoc();\n    int smallSetSize = maxDoc>>6;\n\n    ProcessedFilter pf = getProcessedFilter(cmd.getFilter(), cmd.getFilterList());\n    final Filter luceneFilter = pf.filter;\n\n    Query query = QueryUtils.makeQueryable(cmd.getQuery());\n    final long timeAllowed = cmd.getTimeAllowed();\n\n    // handle zero case...\n    if (lastDocRequested<=0) {\n      final float[] topscore = new float[] { Float.NEGATIVE_INFINITY };\n\n      Collector collector;\n      DocSetCollector setCollector;\n\n       if (!needScores) {\n         collector = setCollector = new DocSetCollector(smallSetSize, maxDoc);\n       } else {\n         collector = setCollector = new DocSetDelegateCollector(smallSetSize, maxDoc, new Collector() {\n           Scorer scorer;\n           @Override\n          public void setScorer(Scorer scorer) throws IOException {\n             this.scorer = scorer;\n           }\n           @Override\n          public void collect(int doc) throws IOException {\n             float score = scorer.score();\n             if (score > topscore[0]) topscore[0]=score;\n           }\n           @Override\n          public void setNextReader(AtomicReaderContext context) throws IOException {\n           }\n           @Override\n          public boolean acceptsDocsOutOfOrder() {\n             return false;\n           }\n         });\n       }\n\n       if( timeAllowed > 0 ) {\n         collector = new TimeLimitingCollector(collector, timeAllowed);\n       }\n      if (pf.postFilter != null) {\n        pf.postFilter.setLastDelegate(collector);\n        collector = pf.postFilter;\n      }\n\n       try {\n         super.search(query, luceneFilter, collector);\n       }\n       catch( TimeLimitingCollector.TimeExceededException x ) {\n         log.warn( \"Query: \" + query + \"; \" + x.getMessage() );\n         qr.setPartialResults(true);\n       }\n\n      set = setCollector.getDocSet();\n\n      nDocsReturned = 0;\n      ids = new int[nDocsReturned];\n      scores = new float[nDocsReturned];\n      totalHits = set.size();\n      maxScore = totalHits>0 ? topscore[0] : 0.0f;\n    } else {\n\n      TopDocsCollector topCollector;\n\n      if (cmd.getSort() == null) {\n        topCollector = TopScoreDocCollector.create(len, true);\n      } else {\n        topCollector = TopFieldCollector.create(weightSort(cmd.getSort()), len, false, needScores, needScores, true);\n      }\n\n      DocSetCollector setCollector = new DocSetDelegateCollector(maxDoc>>6, maxDoc, topCollector);\n      Collector collector = setCollector;\n\n      if( timeAllowed > 0 ) {\n        collector = new TimeLimitingCollector(collector, timeAllowed );\n      }\n      if (pf.postFilter != null) {\n        pf.postFilter.setLastDelegate(collector);\n        collector = pf.postFilter;\n      }\n      try {\n        super.search(query, luceneFilter, collector);\n      }\n      catch( TimeLimitingCollector.TimeExceededException x ) {\n        log.warn( \"Query: \" + query + \"; \" + x.getMessage() );\n        qr.setPartialResults(true);\n      }\n\n      set = setCollector.getDocSet();      \n\n      totalHits = topCollector.getTotalHits();\n      assert(totalHits == set.size());\n\n      TopDocs topDocs = topCollector.topDocs(0, len);\n      maxScore = totalHits>0 ? topDocs.getMaxScore() : 0.0f;\n      nDocsReturned = topDocs.scoreDocs.length;\n\n      ids = new int[nDocsReturned];\n      scores = (cmd.getFlags()&GET_SCORES)!=0 ? new float[nDocsReturned] : null;\n      for (int i=0; i<nDocsReturned; i++) {\n        ScoreDoc scoreDoc = topDocs.scoreDocs[i];\n        ids[i] = scoreDoc.doc;\n        if (scores != null) scores[i] = scoreDoc.score;\n      }\n    }\n\n    int sliceLen = Math.min(lastDocRequested,nDocsReturned);\n    if (sliceLen < 0) sliceLen=0;\n\n    qr.setDocList(new DocSlice(0,sliceLen,ids,scores,totalHits,maxScore));\n    // TODO: if we collect results before the filter, we just need to intersect with\n    // that filter to generate the DocSet for qr.setDocSet()\n    qr.setDocSet(set);\n\n    // TODO: currently we don't generate the DocSet for the base query,\n    // but the QueryDocSet == CompleteDocSet if filter==null.\n    return pf.filter==null && pf.postFilter==null ? qr.getDocSet() : null;\n  }\n\n","sourceOld":"  // any DocSet returned is for the query only, without any filtering... that way it may\n  // be cached if desired.\n  private DocSet getDocListAndSetNC(QueryResult qr,QueryCommand cmd) throws IOException {\n    int len = cmd.getSupersetMaxDoc();\n    DocSet filter = cmd.getFilter()!=null ? cmd.getFilter() : getDocSet(cmd.getFilterList());\n    int last = len;\n    if (last < 0 || last > maxDoc()) last=maxDoc();\n    final int lastDocRequested = last;\n    int nDocsReturned;\n    int totalHits;\n    float maxScore;\n    int[] ids;\n    float[] scores;\n    DocSet set;\n\n    boolean needScores = (cmd.getFlags() & GET_SCORES) != 0;\n    int maxDoc = maxDoc();\n    int smallSetSize = maxDoc>>6;\n\n    Query query = QueryUtils.makeQueryable(cmd.getQuery());\n    final long timeAllowed = cmd.getTimeAllowed();\n\n    final Filter luceneFilter = filter==null ? null : filter.getTopFilter();\n\n    // handle zero case...\n    if (lastDocRequested<=0) {\n      final float[] topscore = new float[] { Float.NEGATIVE_INFINITY };\n\n      Collector collector;\n      DocSetCollector setCollector;\n\n       if (!needScores) {\n         collector = setCollector = new DocSetCollector(smallSetSize, maxDoc);\n       } else {\n         collector = setCollector = new DocSetDelegateCollector(smallSetSize, maxDoc, new Collector() {\n           Scorer scorer;\n           @Override\n          public void setScorer(Scorer scorer) throws IOException {\n             this.scorer = scorer;\n           }\n           @Override\n          public void collect(int doc) throws IOException {\n             float score = scorer.score();\n             if (score > topscore[0]) topscore[0]=score;\n           }\n           @Override\n          public void setNextReader(AtomicReaderContext context) throws IOException {\n           }\n           @Override\n          public boolean acceptsDocsOutOfOrder() {\n             return false;\n           }\n         });\n       }\n\n       if( timeAllowed > 0 ) {\n         collector = new TimeLimitingCollector(collector, timeAllowed);\n       }\n       try {\n         super.search(query, luceneFilter, collector);\n       }\n       catch( TimeLimitingCollector.TimeExceededException x ) {\n         log.warn( \"Query: \" + query + \"; \" + x.getMessage() );\n         qr.setPartialResults(true);\n       }\n\n      set = setCollector.getDocSet();\n\n      nDocsReturned = 0;\n      ids = new int[nDocsReturned];\n      scores = new float[nDocsReturned];\n      totalHits = set.size();\n      maxScore = totalHits>0 ? topscore[0] : 0.0f;\n    } else {\n\n      TopDocsCollector topCollector;\n\n      if (cmd.getSort() == null) {\n        topCollector = TopScoreDocCollector.create(len, true);\n      } else {\n        topCollector = TopFieldCollector.create(weightSort(cmd.getSort()), len, false, needScores, needScores, true);\n      }\n\n      DocSetCollector setCollector = new DocSetDelegateCollector(maxDoc>>6, maxDoc, topCollector);\n      Collector collector = setCollector;\n\n      if( timeAllowed > 0 ) {\n        collector = new TimeLimitingCollector(collector, timeAllowed );\n      }\n      try {\n        super.search(query, luceneFilter, collector);\n      }\n      catch( TimeLimitingCollector.TimeExceededException x ) {\n        log.warn( \"Query: \" + query + \"; \" + x.getMessage() );\n        qr.setPartialResults(true);\n      }\n\n      set = setCollector.getDocSet();      \n\n      totalHits = topCollector.getTotalHits();\n      assert(totalHits == set.size());\n\n      TopDocs topDocs = topCollector.topDocs(0, len);\n      maxScore = totalHits>0 ? topDocs.getMaxScore() : 0.0f;\n      nDocsReturned = topDocs.scoreDocs.length;\n\n      ids = new int[nDocsReturned];\n      scores = (cmd.getFlags()&GET_SCORES)!=0 ? new float[nDocsReturned] : null;\n      for (int i=0; i<nDocsReturned; i++) {\n        ScoreDoc scoreDoc = topDocs.scoreDocs[i];\n        ids[i] = scoreDoc.doc;\n        if (scores != null) scores[i] = scoreDoc.score;\n      }\n    }\n\n    int sliceLen = Math.min(lastDocRequested,nDocsReturned);\n    if (sliceLen < 0) sliceLen=0;\n\n    qr.setDocList(new DocSlice(0,sliceLen,ids,scores,totalHits,maxScore));\n    // TODO: if we collect results before the filter, we just need to intersect with\n    // that filter to generate the DocSet for qr.setDocSet()\n    qr.setDocSet(set);\n\n    // TODO: currently we don't generate the DocSet for the base query,\n    // but the QueryDocSet == CompleteDocSet if filter==null.\n    return filter==null ? qr.getDocSet() : null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/search/SolrIndexSearcher#getDocListAndSetNC(QueryResult,QueryCommand).mjava","pathOld":"solr/src/java/org/apache/solr/search/SolrIndexSearcher#getDocListAndSetNC(QueryResult,QueryCommand).mjava","sourceNew":"  // any DocSet returned is for the query only, without any filtering... that way it may\n  // be cached if desired.\n  private DocSet getDocListAndSetNC(QueryResult qr,QueryCommand cmd) throws IOException {\n    int len = cmd.getSupersetMaxDoc();\n    int last = len;\n    if (last < 0 || last > maxDoc()) last=maxDoc();\n    final int lastDocRequested = last;\n    int nDocsReturned;\n    int totalHits;\n    float maxScore;\n    int[] ids;\n    float[] scores;\n    DocSet set;\n\n    boolean needScores = (cmd.getFlags() & GET_SCORES) != 0;\n    int maxDoc = maxDoc();\n    int smallSetSize = maxDoc>>6;\n\n    ProcessedFilter pf = getProcessedFilter(cmd.getFilter(), cmd.getFilterList());\n    final Filter luceneFilter = pf.filter;\n\n    Query query = QueryUtils.makeQueryable(cmd.getQuery());\n    final long timeAllowed = cmd.getTimeAllowed();\n\n    // handle zero case...\n    if (lastDocRequested<=0) {\n      final float[] topscore = new float[] { Float.NEGATIVE_INFINITY };\n\n      Collector collector;\n      DocSetCollector setCollector;\n\n       if (!needScores) {\n         collector = setCollector = new DocSetCollector(smallSetSize, maxDoc);\n       } else {\n         collector = setCollector = new DocSetDelegateCollector(smallSetSize, maxDoc, new Collector() {\n           Scorer scorer;\n           @Override\n          public void setScorer(Scorer scorer) throws IOException {\n             this.scorer = scorer;\n           }\n           @Override\n          public void collect(int doc) throws IOException {\n             float score = scorer.score();\n             if (score > topscore[0]) topscore[0]=score;\n           }\n           @Override\n          public void setNextReader(AtomicReaderContext context) throws IOException {\n           }\n           @Override\n          public boolean acceptsDocsOutOfOrder() {\n             return false;\n           }\n         });\n       }\n\n       if( timeAllowed > 0 ) {\n         collector = new TimeLimitingCollector(collector, timeAllowed);\n       }\n      if (pf.postFilter != null) {\n        pf.postFilter.setLastDelegate(collector);\n        collector = pf.postFilter;\n      }\n\n       try {\n         super.search(query, luceneFilter, collector);\n       }\n       catch( TimeLimitingCollector.TimeExceededException x ) {\n         log.warn( \"Query: \" + query + \"; \" + x.getMessage() );\n         qr.setPartialResults(true);\n       }\n\n      set = setCollector.getDocSet();\n\n      nDocsReturned = 0;\n      ids = new int[nDocsReturned];\n      scores = new float[nDocsReturned];\n      totalHits = set.size();\n      maxScore = totalHits>0 ? topscore[0] : 0.0f;\n    } else {\n\n      TopDocsCollector topCollector;\n\n      if (cmd.getSort() == null) {\n        topCollector = TopScoreDocCollector.create(len, true);\n      } else {\n        topCollector = TopFieldCollector.create(weightSort(cmd.getSort()), len, false, needScores, needScores, true);\n      }\n\n      DocSetCollector setCollector = new DocSetDelegateCollector(maxDoc>>6, maxDoc, topCollector);\n      Collector collector = setCollector;\n\n      if( timeAllowed > 0 ) {\n        collector = new TimeLimitingCollector(collector, timeAllowed );\n      }\n      if (pf.postFilter != null) {\n        pf.postFilter.setLastDelegate(collector);\n        collector = pf.postFilter;\n      }\n      try {\n        super.search(query, luceneFilter, collector);\n      }\n      catch( TimeLimitingCollector.TimeExceededException x ) {\n        log.warn( \"Query: \" + query + \"; \" + x.getMessage() );\n        qr.setPartialResults(true);\n      }\n\n      set = setCollector.getDocSet();      \n\n      totalHits = topCollector.getTotalHits();\n      assert(totalHits == set.size());\n\n      TopDocs topDocs = topCollector.topDocs(0, len);\n      maxScore = totalHits>0 ? topDocs.getMaxScore() : 0.0f;\n      nDocsReturned = topDocs.scoreDocs.length;\n\n      ids = new int[nDocsReturned];\n      scores = (cmd.getFlags()&GET_SCORES)!=0 ? new float[nDocsReturned] : null;\n      for (int i=0; i<nDocsReturned; i++) {\n        ScoreDoc scoreDoc = topDocs.scoreDocs[i];\n        ids[i] = scoreDoc.doc;\n        if (scores != null) scores[i] = scoreDoc.score;\n      }\n    }\n\n    int sliceLen = Math.min(lastDocRequested,nDocsReturned);\n    if (sliceLen < 0) sliceLen=0;\n\n    qr.setDocList(new DocSlice(0,sliceLen,ids,scores,totalHits,maxScore));\n    // TODO: if we collect results before the filter, we just need to intersect with\n    // that filter to generate the DocSet for qr.setDocSet()\n    qr.setDocSet(set);\n\n    // TODO: currently we don't generate the DocSet for the base query,\n    // but the QueryDocSet == CompleteDocSet if filter==null.\n    return pf.filter==null && pf.postFilter==null ? qr.getDocSet() : null;\n  }\n\n","sourceOld":"  // any DocSet returned is for the query only, without any filtering... that way it may\n  // be cached if desired.\n  private DocSet getDocListAndSetNC(QueryResult qr,QueryCommand cmd) throws IOException {\n    int len = cmd.getSupersetMaxDoc();\n    DocSet filter = cmd.getFilter()!=null ? cmd.getFilter() : getDocSet(cmd.getFilterList());\n    int last = len;\n    if (last < 0 || last > maxDoc()) last=maxDoc();\n    final int lastDocRequested = last;\n    int nDocsReturned;\n    int totalHits;\n    float maxScore;\n    int[] ids;\n    float[] scores;\n    DocSet set;\n\n    boolean needScores = (cmd.getFlags() & GET_SCORES) != 0;\n    int maxDoc = maxDoc();\n    int smallSetSize = maxDoc>>6;\n\n    Query query = QueryUtils.makeQueryable(cmd.getQuery());\n    final long timeAllowed = cmd.getTimeAllowed();\n\n    final Filter luceneFilter = filter==null ? null : filter.getTopFilter();\n\n    // handle zero case...\n    if (lastDocRequested<=0) {\n      final float[] topscore = new float[] { Float.NEGATIVE_INFINITY };\n\n      Collector collector;\n      DocSetCollector setCollector;\n\n       if (!needScores) {\n         collector = setCollector = new DocSetCollector(smallSetSize, maxDoc);\n       } else {\n         collector = setCollector = new DocSetDelegateCollector(smallSetSize, maxDoc, new Collector() {\n           Scorer scorer;\n           @Override\n          public void setScorer(Scorer scorer) throws IOException {\n             this.scorer = scorer;\n           }\n           @Override\n          public void collect(int doc) throws IOException {\n             float score = scorer.score();\n             if (score > topscore[0]) topscore[0]=score;\n           }\n           @Override\n          public void setNextReader(AtomicReaderContext context) throws IOException {\n           }\n           @Override\n          public boolean acceptsDocsOutOfOrder() {\n             return false;\n           }\n         });\n       }\n\n       if( timeAllowed > 0 ) {\n         collector = new TimeLimitingCollector(collector, timeAllowed);\n       }\n       try {\n         super.search(query, luceneFilter, collector);\n       }\n       catch( TimeLimitingCollector.TimeExceededException x ) {\n         log.warn( \"Query: \" + query + \"; \" + x.getMessage() );\n         qr.setPartialResults(true);\n       }\n\n      set = setCollector.getDocSet();\n\n      nDocsReturned = 0;\n      ids = new int[nDocsReturned];\n      scores = new float[nDocsReturned];\n      totalHits = set.size();\n      maxScore = totalHits>0 ? topscore[0] : 0.0f;\n    } else {\n\n      TopDocsCollector topCollector;\n\n      if (cmd.getSort() == null) {\n        topCollector = TopScoreDocCollector.create(len, true);\n      } else {\n        topCollector = TopFieldCollector.create(weightSort(cmd.getSort()), len, false, needScores, needScores, true);\n      }\n\n      DocSetCollector setCollector = new DocSetDelegateCollector(maxDoc>>6, maxDoc, topCollector);\n      Collector collector = setCollector;\n\n      if( timeAllowed > 0 ) {\n        collector = new TimeLimitingCollector(collector, timeAllowed );\n      }\n      try {\n        super.search(query, luceneFilter, collector);\n      }\n      catch( TimeLimitingCollector.TimeExceededException x ) {\n        log.warn( \"Query: \" + query + \"; \" + x.getMessage() );\n        qr.setPartialResults(true);\n      }\n\n      set = setCollector.getDocSet();      \n\n      totalHits = topCollector.getTotalHits();\n      assert(totalHits == set.size());\n\n      TopDocs topDocs = topCollector.topDocs(0, len);\n      maxScore = totalHits>0 ? topDocs.getMaxScore() : 0.0f;\n      nDocsReturned = topDocs.scoreDocs.length;\n\n      ids = new int[nDocsReturned];\n      scores = (cmd.getFlags()&GET_SCORES)!=0 ? new float[nDocsReturned] : null;\n      for (int i=0; i<nDocsReturned; i++) {\n        ScoreDoc scoreDoc = topDocs.scoreDocs[i];\n        ids[i] = scoreDoc.doc;\n        if (scores != null) scores[i] = scoreDoc.score;\n      }\n    }\n\n    int sliceLen = Math.min(lastDocRequested,nDocsReturned);\n    if (sliceLen < 0) sliceLen=0;\n\n    qr.setDocList(new DocSlice(0,sliceLen,ids,scores,totalHits,maxScore));\n    // TODO: if we collect results before the filter, we just need to intersect with\n    // that filter to generate the DocSet for qr.setDocSet()\n    qr.setDocSet(set);\n\n    // TODO: currently we don't generate the DocSet for the base query,\n    // but the QueryDocSet == CompleteDocSet if filter==null.\n    return filter==null ? qr.getDocSet() : null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#getDocListAndSetNC(QueryResult,QueryCommand).mjava","pathOld":"solr/src/java/org/apache/solr/search/SolrIndexSearcher#getDocListAndSetNC(QueryResult,QueryCommand).mjava","sourceNew":"  // any DocSet returned is for the query only, without any filtering... that way it may\n  // be cached if desired.\n  private DocSet getDocListAndSetNC(QueryResult qr,QueryCommand cmd) throws IOException {\n    int len = cmd.getSupersetMaxDoc();\n    int last = len;\n    if (last < 0 || last > maxDoc()) last=maxDoc();\n    final int lastDocRequested = last;\n    int nDocsReturned;\n    int totalHits;\n    float maxScore;\n    int[] ids;\n    float[] scores;\n    DocSet set;\n\n    boolean needScores = (cmd.getFlags() & GET_SCORES) != 0;\n    int maxDoc = maxDoc();\n    int smallSetSize = maxDoc>>6;\n\n    ProcessedFilter pf = getProcessedFilter(cmd.getFilter(), cmd.getFilterList());\n    final Filter luceneFilter = pf.filter;\n\n    Query query = QueryUtils.makeQueryable(cmd.getQuery());\n    final long timeAllowed = cmd.getTimeAllowed();\n\n    // handle zero case...\n    if (lastDocRequested<=0) {\n      final float[] topscore = new float[] { Float.NEGATIVE_INFINITY };\n\n      Collector collector;\n      DocSetCollector setCollector;\n\n       if (!needScores) {\n         collector = setCollector = new DocSetCollector(smallSetSize, maxDoc);\n       } else {\n         collector = setCollector = new DocSetDelegateCollector(smallSetSize, maxDoc, new Collector() {\n           Scorer scorer;\n           @Override\n          public void setScorer(Scorer scorer) throws IOException {\n             this.scorer = scorer;\n           }\n           @Override\n          public void collect(int doc) throws IOException {\n             float score = scorer.score();\n             if (score > topscore[0]) topscore[0]=score;\n           }\n           @Override\n          public void setNextReader(AtomicReaderContext context) throws IOException {\n           }\n           @Override\n          public boolean acceptsDocsOutOfOrder() {\n             return false;\n           }\n         });\n       }\n\n       if( timeAllowed > 0 ) {\n         collector = new TimeLimitingCollector(collector, timeAllowed);\n       }\n      if (pf.postFilter != null) {\n        pf.postFilter.setLastDelegate(collector);\n        collector = pf.postFilter;\n      }\n\n       try {\n         super.search(query, luceneFilter, collector);\n       }\n       catch( TimeLimitingCollector.TimeExceededException x ) {\n         log.warn( \"Query: \" + query + \"; \" + x.getMessage() );\n         qr.setPartialResults(true);\n       }\n\n      set = setCollector.getDocSet();\n\n      nDocsReturned = 0;\n      ids = new int[nDocsReturned];\n      scores = new float[nDocsReturned];\n      totalHits = set.size();\n      maxScore = totalHits>0 ? topscore[0] : 0.0f;\n    } else {\n\n      TopDocsCollector topCollector;\n\n      if (cmd.getSort() == null) {\n        topCollector = TopScoreDocCollector.create(len, true);\n      } else {\n        topCollector = TopFieldCollector.create(weightSort(cmd.getSort()), len, false, needScores, needScores, true);\n      }\n\n      DocSetCollector setCollector = new DocSetDelegateCollector(maxDoc>>6, maxDoc, topCollector);\n      Collector collector = setCollector;\n\n      if( timeAllowed > 0 ) {\n        collector = new TimeLimitingCollector(collector, timeAllowed );\n      }\n      if (pf.postFilter != null) {\n        pf.postFilter.setLastDelegate(collector);\n        collector = pf.postFilter;\n      }\n      try {\n        super.search(query, luceneFilter, collector);\n      }\n      catch( TimeLimitingCollector.TimeExceededException x ) {\n        log.warn( \"Query: \" + query + \"; \" + x.getMessage() );\n        qr.setPartialResults(true);\n      }\n\n      set = setCollector.getDocSet();      \n\n      totalHits = topCollector.getTotalHits();\n      assert(totalHits == set.size());\n\n      TopDocs topDocs = topCollector.topDocs(0, len);\n      maxScore = totalHits>0 ? topDocs.getMaxScore() : 0.0f;\n      nDocsReturned = topDocs.scoreDocs.length;\n\n      ids = new int[nDocsReturned];\n      scores = (cmd.getFlags()&GET_SCORES)!=0 ? new float[nDocsReturned] : null;\n      for (int i=0; i<nDocsReturned; i++) {\n        ScoreDoc scoreDoc = topDocs.scoreDocs[i];\n        ids[i] = scoreDoc.doc;\n        if (scores != null) scores[i] = scoreDoc.score;\n      }\n    }\n\n    int sliceLen = Math.min(lastDocRequested,nDocsReturned);\n    if (sliceLen < 0) sliceLen=0;\n\n    qr.setDocList(new DocSlice(0,sliceLen,ids,scores,totalHits,maxScore));\n    // TODO: if we collect results before the filter, we just need to intersect with\n    // that filter to generate the DocSet for qr.setDocSet()\n    qr.setDocSet(set);\n\n    // TODO: currently we don't generate the DocSet for the base query,\n    // but the QueryDocSet == CompleteDocSet if filter==null.\n    return pf.filter==null && pf.postFilter==null ? qr.getDocSet() : null;\n  }\n\n","sourceOld":"  // any DocSet returned is for the query only, without any filtering... that way it may\n  // be cached if desired.\n  private DocSet getDocListAndSetNC(QueryResult qr,QueryCommand cmd) throws IOException {\n    int len = cmd.getSupersetMaxDoc();\n    int last = len;\n    if (last < 0 || last > maxDoc()) last=maxDoc();\n    final int lastDocRequested = last;\n    int nDocsReturned;\n    int totalHits;\n    float maxScore;\n    int[] ids;\n    float[] scores;\n    DocSet set;\n\n    boolean needScores = (cmd.getFlags() & GET_SCORES) != 0;\n    int maxDoc = maxDoc();\n    int smallSetSize = maxDoc>>6;\n\n    ProcessedFilter pf = getProcessedFilter(cmd.getFilter(), cmd.getFilterList());\n    final Filter luceneFilter = pf.filter;\n\n    Query query = QueryUtils.makeQueryable(cmd.getQuery());\n    final long timeAllowed = cmd.getTimeAllowed();\n\n    // handle zero case...\n    if (lastDocRequested<=0) {\n      final float[] topscore = new float[] { Float.NEGATIVE_INFINITY };\n\n      Collector collector;\n      DocSetCollector setCollector;\n\n       if (!needScores) {\n         collector = setCollector = new DocSetCollector(smallSetSize, maxDoc);\n       } else {\n         collector = setCollector = new DocSetDelegateCollector(smallSetSize, maxDoc, new Collector() {\n           Scorer scorer;\n           @Override\n          public void setScorer(Scorer scorer) throws IOException {\n             this.scorer = scorer;\n           }\n           @Override\n          public void collect(int doc) throws IOException {\n             float score = scorer.score();\n             if (score > topscore[0]) topscore[0]=score;\n           }\n           @Override\n          public void setNextReader(AtomicReaderContext context) throws IOException {\n           }\n           @Override\n          public boolean acceptsDocsOutOfOrder() {\n             return false;\n           }\n         });\n       }\n\n       if( timeAllowed > 0 ) {\n         collector = new TimeLimitingCollector(collector, timeAllowed);\n       }\n      if (pf.postFilter != null) {\n        pf.postFilter.setLastDelegate(collector);\n        collector = pf.postFilter;\n      }\n\n       try {\n         super.search(query, luceneFilter, collector);\n       }\n       catch( TimeLimitingCollector.TimeExceededException x ) {\n         log.warn( \"Query: \" + query + \"; \" + x.getMessage() );\n         qr.setPartialResults(true);\n       }\n\n      set = setCollector.getDocSet();\n\n      nDocsReturned = 0;\n      ids = new int[nDocsReturned];\n      scores = new float[nDocsReturned];\n      totalHits = set.size();\n      maxScore = totalHits>0 ? topscore[0] : 0.0f;\n    } else {\n\n      TopDocsCollector topCollector;\n\n      if (cmd.getSort() == null) {\n        topCollector = TopScoreDocCollector.create(len, true);\n      } else {\n        topCollector = TopFieldCollector.create(weightSort(cmd.getSort()), len, false, needScores, needScores, true);\n      }\n\n      DocSetCollector setCollector = new DocSetDelegateCollector(maxDoc>>6, maxDoc, topCollector);\n      Collector collector = setCollector;\n\n      if( timeAllowed > 0 ) {\n        collector = new TimeLimitingCollector(collector, timeAllowed );\n      }\n      if (pf.postFilter != null) {\n        pf.postFilter.setLastDelegate(collector);\n        collector = pf.postFilter;\n      }\n      try {\n        super.search(query, luceneFilter, collector);\n      }\n      catch( TimeLimitingCollector.TimeExceededException x ) {\n        log.warn( \"Query: \" + query + \"; \" + x.getMessage() );\n        qr.setPartialResults(true);\n      }\n\n      set = setCollector.getDocSet();      \n\n      totalHits = topCollector.getTotalHits();\n      assert(totalHits == set.size());\n\n      TopDocs topDocs = topCollector.topDocs(0, len);\n      maxScore = totalHits>0 ? topDocs.getMaxScore() : 0.0f;\n      nDocsReturned = topDocs.scoreDocs.length;\n\n      ids = new int[nDocsReturned];\n      scores = (cmd.getFlags()&GET_SCORES)!=0 ? new float[nDocsReturned] : null;\n      for (int i=0; i<nDocsReturned; i++) {\n        ScoreDoc scoreDoc = topDocs.scoreDocs[i];\n        ids[i] = scoreDoc.doc;\n        if (scores != null) scores[i] = scoreDoc.score;\n      }\n    }\n\n    int sliceLen = Math.min(lastDocRequested,nDocsReturned);\n    if (sliceLen < 0) sliceLen=0;\n\n    qr.setDocList(new DocSlice(0,sliceLen,ids,scores,totalHits,maxScore));\n    // TODO: if we collect results before the filter, we just need to intersect with\n    // that filter to generate the DocSet for qr.setDocSet()\n    qr.setDocSet(set);\n\n    // TODO: currently we don't generate the DocSet for the base query,\n    // but the QueryDocSet == CompleteDocSet if filter==null.\n    return pf.filter==null && pf.postFilter==null ? qr.getDocSet() : null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#getDocListAndSetNC(QueryResult,QueryCommand).mjava","pathOld":"solr/src/java/org/apache/solr/search/SolrIndexSearcher#getDocListAndSetNC(QueryResult,QueryCommand).mjava","sourceNew":"  // any DocSet returned is for the query only, without any filtering... that way it may\n  // be cached if desired.\n  private DocSet getDocListAndSetNC(QueryResult qr,QueryCommand cmd) throws IOException {\n    int len = cmd.getSupersetMaxDoc();\n    int last = len;\n    if (last < 0 || last > maxDoc()) last=maxDoc();\n    final int lastDocRequested = last;\n    int nDocsReturned;\n    int totalHits;\n    float maxScore;\n    int[] ids;\n    float[] scores;\n    DocSet set;\n\n    boolean needScores = (cmd.getFlags() & GET_SCORES) != 0;\n    int maxDoc = maxDoc();\n    int smallSetSize = maxDoc>>6;\n\n    ProcessedFilter pf = getProcessedFilter(cmd.getFilter(), cmd.getFilterList());\n    final Filter luceneFilter = pf.filter;\n\n    Query query = QueryUtils.makeQueryable(cmd.getQuery());\n    final long timeAllowed = cmd.getTimeAllowed();\n\n    // handle zero case...\n    if (lastDocRequested<=0) {\n      final float[] topscore = new float[] { Float.NEGATIVE_INFINITY };\n\n      Collector collector;\n      DocSetCollector setCollector;\n\n       if (!needScores) {\n         collector = setCollector = new DocSetCollector(smallSetSize, maxDoc);\n       } else {\n         collector = setCollector = new DocSetDelegateCollector(smallSetSize, maxDoc, new Collector() {\n           Scorer scorer;\n           @Override\n          public void setScorer(Scorer scorer) throws IOException {\n             this.scorer = scorer;\n           }\n           @Override\n          public void collect(int doc) throws IOException {\n             float score = scorer.score();\n             if (score > topscore[0]) topscore[0]=score;\n           }\n           @Override\n          public void setNextReader(AtomicReaderContext context) throws IOException {\n           }\n           @Override\n          public boolean acceptsDocsOutOfOrder() {\n             return false;\n           }\n         });\n       }\n\n       if( timeAllowed > 0 ) {\n         collector = new TimeLimitingCollector(collector, timeAllowed);\n       }\n      if (pf.postFilter != null) {\n        pf.postFilter.setLastDelegate(collector);\n        collector = pf.postFilter;\n      }\n\n       try {\n         super.search(query, luceneFilter, collector);\n       }\n       catch( TimeLimitingCollector.TimeExceededException x ) {\n         log.warn( \"Query: \" + query + \"; \" + x.getMessage() );\n         qr.setPartialResults(true);\n       }\n\n      set = setCollector.getDocSet();\n\n      nDocsReturned = 0;\n      ids = new int[nDocsReturned];\n      scores = new float[nDocsReturned];\n      totalHits = set.size();\n      maxScore = totalHits>0 ? topscore[0] : 0.0f;\n    } else {\n\n      TopDocsCollector topCollector;\n\n      if (cmd.getSort() == null) {\n        topCollector = TopScoreDocCollector.create(len, true);\n      } else {\n        topCollector = TopFieldCollector.create(weightSort(cmd.getSort()), len, false, needScores, needScores, true);\n      }\n\n      DocSetCollector setCollector = new DocSetDelegateCollector(maxDoc>>6, maxDoc, topCollector);\n      Collector collector = setCollector;\n\n      if( timeAllowed > 0 ) {\n        collector = new TimeLimitingCollector(collector, timeAllowed );\n      }\n      if (pf.postFilter != null) {\n        pf.postFilter.setLastDelegate(collector);\n        collector = pf.postFilter;\n      }\n      try {\n        super.search(query, luceneFilter, collector);\n      }\n      catch( TimeLimitingCollector.TimeExceededException x ) {\n        log.warn( \"Query: \" + query + \"; \" + x.getMessage() );\n        qr.setPartialResults(true);\n      }\n\n      set = setCollector.getDocSet();      \n\n      totalHits = topCollector.getTotalHits();\n      assert(totalHits == set.size());\n\n      TopDocs topDocs = topCollector.topDocs(0, len);\n      maxScore = totalHits>0 ? topDocs.getMaxScore() : 0.0f;\n      nDocsReturned = topDocs.scoreDocs.length;\n\n      ids = new int[nDocsReturned];\n      scores = (cmd.getFlags()&GET_SCORES)!=0 ? new float[nDocsReturned] : null;\n      for (int i=0; i<nDocsReturned; i++) {\n        ScoreDoc scoreDoc = topDocs.scoreDocs[i];\n        ids[i] = scoreDoc.doc;\n        if (scores != null) scores[i] = scoreDoc.score;\n      }\n    }\n\n    int sliceLen = Math.min(lastDocRequested,nDocsReturned);\n    if (sliceLen < 0) sliceLen=0;\n\n    qr.setDocList(new DocSlice(0,sliceLen,ids,scores,totalHits,maxScore));\n    // TODO: if we collect results before the filter, we just need to intersect with\n    // that filter to generate the DocSet for qr.setDocSet()\n    qr.setDocSet(set);\n\n    // TODO: currently we don't generate the DocSet for the base query,\n    // but the QueryDocSet == CompleteDocSet if filter==null.\n    return pf.filter==null && pf.postFilter==null ? qr.getDocSet() : null;\n  }\n\n","sourceOld":"  // any DocSet returned is for the query only, without any filtering... that way it may\n  // be cached if desired.\n  private DocSet getDocListAndSetNC(QueryResult qr,QueryCommand cmd) throws IOException {\n    int len = cmd.getSupersetMaxDoc();\n    int last = len;\n    if (last < 0 || last > maxDoc()) last=maxDoc();\n    final int lastDocRequested = last;\n    int nDocsReturned;\n    int totalHits;\n    float maxScore;\n    int[] ids;\n    float[] scores;\n    DocSet set;\n\n    boolean needScores = (cmd.getFlags() & GET_SCORES) != 0;\n    int maxDoc = maxDoc();\n    int smallSetSize = maxDoc>>6;\n\n    ProcessedFilter pf = getProcessedFilter(cmd.getFilter(), cmd.getFilterList());\n    final Filter luceneFilter = pf.filter;\n\n    Query query = QueryUtils.makeQueryable(cmd.getQuery());\n    final long timeAllowed = cmd.getTimeAllowed();\n\n    // handle zero case...\n    if (lastDocRequested<=0) {\n      final float[] topscore = new float[] { Float.NEGATIVE_INFINITY };\n\n      Collector collector;\n      DocSetCollector setCollector;\n\n       if (!needScores) {\n         collector = setCollector = new DocSetCollector(smallSetSize, maxDoc);\n       } else {\n         collector = setCollector = new DocSetDelegateCollector(smallSetSize, maxDoc, new Collector() {\n           Scorer scorer;\n           @Override\n          public void setScorer(Scorer scorer) throws IOException {\n             this.scorer = scorer;\n           }\n           @Override\n          public void collect(int doc) throws IOException {\n             float score = scorer.score();\n             if (score > topscore[0]) topscore[0]=score;\n           }\n           @Override\n          public void setNextReader(AtomicReaderContext context) throws IOException {\n           }\n           @Override\n          public boolean acceptsDocsOutOfOrder() {\n             return false;\n           }\n         });\n       }\n\n       if( timeAllowed > 0 ) {\n         collector = new TimeLimitingCollector(collector, timeAllowed);\n       }\n      if (pf.postFilter != null) {\n        pf.postFilter.setLastDelegate(collector);\n        collector = pf.postFilter;\n      }\n\n       try {\n         super.search(query, luceneFilter, collector);\n       }\n       catch( TimeLimitingCollector.TimeExceededException x ) {\n         log.warn( \"Query: \" + query + \"; \" + x.getMessage() );\n         qr.setPartialResults(true);\n       }\n\n      set = setCollector.getDocSet();\n\n      nDocsReturned = 0;\n      ids = new int[nDocsReturned];\n      scores = new float[nDocsReturned];\n      totalHits = set.size();\n      maxScore = totalHits>0 ? topscore[0] : 0.0f;\n    } else {\n\n      TopDocsCollector topCollector;\n\n      if (cmd.getSort() == null) {\n        topCollector = TopScoreDocCollector.create(len, true);\n      } else {\n        topCollector = TopFieldCollector.create(weightSort(cmd.getSort()), len, false, needScores, needScores, true);\n      }\n\n      DocSetCollector setCollector = new DocSetDelegateCollector(maxDoc>>6, maxDoc, topCollector);\n      Collector collector = setCollector;\n\n      if( timeAllowed > 0 ) {\n        collector = new TimeLimitingCollector(collector, timeAllowed );\n      }\n      if (pf.postFilter != null) {\n        pf.postFilter.setLastDelegate(collector);\n        collector = pf.postFilter;\n      }\n      try {\n        super.search(query, luceneFilter, collector);\n      }\n      catch( TimeLimitingCollector.TimeExceededException x ) {\n        log.warn( \"Query: \" + query + \"; \" + x.getMessage() );\n        qr.setPartialResults(true);\n      }\n\n      set = setCollector.getDocSet();      \n\n      totalHits = topCollector.getTotalHits();\n      assert(totalHits == set.size());\n\n      TopDocs topDocs = topCollector.topDocs(0, len);\n      maxScore = totalHits>0 ? topDocs.getMaxScore() : 0.0f;\n      nDocsReturned = topDocs.scoreDocs.length;\n\n      ids = new int[nDocsReturned];\n      scores = (cmd.getFlags()&GET_SCORES)!=0 ? new float[nDocsReturned] : null;\n      for (int i=0; i<nDocsReturned; i++) {\n        ScoreDoc scoreDoc = topDocs.scoreDocs[i];\n        ids[i] = scoreDoc.doc;\n        if (scores != null) scores[i] = scoreDoc.score;\n      }\n    }\n\n    int sliceLen = Math.min(lastDocRequested,nDocsReturned);\n    if (sliceLen < 0) sliceLen=0;\n\n    qr.setDocList(new DocSlice(0,sliceLen,ids,scores,totalHits,maxScore));\n    // TODO: if we collect results before the filter, we just need to intersect with\n    // that filter to generate the DocSet for qr.setDocSet()\n    qr.setDocSet(set);\n\n    // TODO: currently we don't generate the DocSet for the base query,\n    // but the QueryDocSet == CompleteDocSet if filter==null.\n    return pf.filter==null && pf.postFilter==null ? qr.getDocSet() : null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#getDocListAndSetNC(QueryResult,QueryCommand).mjava","pathOld":"solr/src/java/org/apache/solr/search/SolrIndexSearcher#getDocListAndSetNC(QueryResult,QueryCommand).mjava","sourceNew":"  // any DocSet returned is for the query only, without any filtering... that way it may\n  // be cached if desired.\n  private DocSet getDocListAndSetNC(QueryResult qr,QueryCommand cmd) throws IOException {\n    int len = cmd.getSupersetMaxDoc();\n    int last = len;\n    if (last < 0 || last > maxDoc()) last=maxDoc();\n    final int lastDocRequested = last;\n    int nDocsReturned;\n    int totalHits;\n    float maxScore;\n    int[] ids;\n    float[] scores;\n    DocSet set;\n\n    boolean needScores = (cmd.getFlags() & GET_SCORES) != 0;\n    int maxDoc = maxDoc();\n    int smallSetSize = maxDoc>>6;\n\n    ProcessedFilter pf = getProcessedFilter(cmd.getFilter(), cmd.getFilterList());\n    final Filter luceneFilter = pf.filter;\n\n    Query query = QueryUtils.makeQueryable(cmd.getQuery());\n    final long timeAllowed = cmd.getTimeAllowed();\n\n    // handle zero case...\n    if (lastDocRequested<=0) {\n      final float[] topscore = new float[] { Float.NEGATIVE_INFINITY };\n\n      Collector collector;\n      DocSetCollector setCollector;\n\n       if (!needScores) {\n         collector = setCollector = new DocSetCollector(smallSetSize, maxDoc);\n       } else {\n         collector = setCollector = new DocSetDelegateCollector(smallSetSize, maxDoc, new Collector() {\n           Scorer scorer;\n           @Override\n          public void setScorer(Scorer scorer) throws IOException {\n             this.scorer = scorer;\n           }\n           @Override\n          public void collect(int doc) throws IOException {\n             float score = scorer.score();\n             if (score > topscore[0]) topscore[0]=score;\n           }\n           @Override\n          public void setNextReader(AtomicReaderContext context) throws IOException {\n           }\n           @Override\n          public boolean acceptsDocsOutOfOrder() {\n             return false;\n           }\n         });\n       }\n\n       if( timeAllowed > 0 ) {\n         collector = new TimeLimitingCollector(collector, timeAllowed);\n       }\n      if (pf.postFilter != null) {\n        pf.postFilter.setLastDelegate(collector);\n        collector = pf.postFilter;\n      }\n\n       try {\n         super.search(query, luceneFilter, collector);\n       }\n       catch( TimeLimitingCollector.TimeExceededException x ) {\n         log.warn( \"Query: \" + query + \"; \" + x.getMessage() );\n         qr.setPartialResults(true);\n       }\n\n      set = setCollector.getDocSet();\n\n      nDocsReturned = 0;\n      ids = new int[nDocsReturned];\n      scores = new float[nDocsReturned];\n      totalHits = set.size();\n      maxScore = totalHits>0 ? topscore[0] : 0.0f;\n    } else {\n\n      TopDocsCollector topCollector;\n\n      if (cmd.getSort() == null) {\n        topCollector = TopScoreDocCollector.create(len, true);\n      } else {\n        topCollector = TopFieldCollector.create(weightSort(cmd.getSort()), len, false, needScores, needScores, true);\n      }\n\n      DocSetCollector setCollector = new DocSetDelegateCollector(maxDoc>>6, maxDoc, topCollector);\n      Collector collector = setCollector;\n\n      if( timeAllowed > 0 ) {\n        collector = new TimeLimitingCollector(collector, timeAllowed );\n      }\n      if (pf.postFilter != null) {\n        pf.postFilter.setLastDelegate(collector);\n        collector = pf.postFilter;\n      }\n      try {\n        super.search(query, luceneFilter, collector);\n      }\n      catch( TimeLimitingCollector.TimeExceededException x ) {\n        log.warn( \"Query: \" + query + \"; \" + x.getMessage() );\n        qr.setPartialResults(true);\n      }\n\n      set = setCollector.getDocSet();      \n\n      totalHits = topCollector.getTotalHits();\n      assert(totalHits == set.size());\n\n      TopDocs topDocs = topCollector.topDocs(0, len);\n      maxScore = totalHits>0 ? topDocs.getMaxScore() : 0.0f;\n      nDocsReturned = topDocs.scoreDocs.length;\n\n      ids = new int[nDocsReturned];\n      scores = (cmd.getFlags()&GET_SCORES)!=0 ? new float[nDocsReturned] : null;\n      for (int i=0; i<nDocsReturned; i++) {\n        ScoreDoc scoreDoc = topDocs.scoreDocs[i];\n        ids[i] = scoreDoc.doc;\n        if (scores != null) scores[i] = scoreDoc.score;\n      }\n    }\n\n    int sliceLen = Math.min(lastDocRequested,nDocsReturned);\n    if (sliceLen < 0) sliceLen=0;\n\n    qr.setDocList(new DocSlice(0,sliceLen,ids,scores,totalHits,maxScore));\n    // TODO: if we collect results before the filter, we just need to intersect with\n    // that filter to generate the DocSet for qr.setDocSet()\n    qr.setDocSet(set);\n\n    // TODO: currently we don't generate the DocSet for the base query,\n    // but the QueryDocSet == CompleteDocSet if filter==null.\n    return pf.filter==null && pf.postFilter==null ? qr.getDocSet() : null;\n  }\n\n","sourceOld":"  // any DocSet returned is for the query only, without any filtering... that way it may\n  // be cached if desired.\n  private DocSet getDocListAndSetNC(QueryResult qr,QueryCommand cmd) throws IOException {\n    int len = cmd.getSupersetMaxDoc();\n    int last = len;\n    if (last < 0 || last > maxDoc()) last=maxDoc();\n    final int lastDocRequested = last;\n    int nDocsReturned;\n    int totalHits;\n    float maxScore;\n    int[] ids;\n    float[] scores;\n    DocSet set;\n\n    boolean needScores = (cmd.getFlags() & GET_SCORES) != 0;\n    int maxDoc = maxDoc();\n    int smallSetSize = maxDoc>>6;\n\n    ProcessedFilter pf = getProcessedFilter(cmd.getFilter(), cmd.getFilterList());\n    final Filter luceneFilter = pf.filter;\n\n    Query query = QueryUtils.makeQueryable(cmd.getQuery());\n    final long timeAllowed = cmd.getTimeAllowed();\n\n    // handle zero case...\n    if (lastDocRequested<=0) {\n      final float[] topscore = new float[] { Float.NEGATIVE_INFINITY };\n\n      Collector collector;\n      DocSetCollector setCollector;\n\n       if (!needScores) {\n         collector = setCollector = new DocSetCollector(smallSetSize, maxDoc);\n       } else {\n         collector = setCollector = new DocSetDelegateCollector(smallSetSize, maxDoc, new Collector() {\n           Scorer scorer;\n           @Override\n          public void setScorer(Scorer scorer) throws IOException {\n             this.scorer = scorer;\n           }\n           @Override\n          public void collect(int doc) throws IOException {\n             float score = scorer.score();\n             if (score > topscore[0]) topscore[0]=score;\n           }\n           @Override\n          public void setNextReader(AtomicReaderContext context) throws IOException {\n           }\n           @Override\n          public boolean acceptsDocsOutOfOrder() {\n             return false;\n           }\n         });\n       }\n\n       if( timeAllowed > 0 ) {\n         collector = new TimeLimitingCollector(collector, timeAllowed);\n       }\n      if (pf.postFilter != null) {\n        pf.postFilter.setLastDelegate(collector);\n        collector = pf.postFilter;\n      }\n\n       try {\n         super.search(query, luceneFilter, collector);\n       }\n       catch( TimeLimitingCollector.TimeExceededException x ) {\n         log.warn( \"Query: \" + query + \"; \" + x.getMessage() );\n         qr.setPartialResults(true);\n       }\n\n      set = setCollector.getDocSet();\n\n      nDocsReturned = 0;\n      ids = new int[nDocsReturned];\n      scores = new float[nDocsReturned];\n      totalHits = set.size();\n      maxScore = totalHits>0 ? topscore[0] : 0.0f;\n    } else {\n\n      TopDocsCollector topCollector;\n\n      if (cmd.getSort() == null) {\n        topCollector = TopScoreDocCollector.create(len, true);\n      } else {\n        topCollector = TopFieldCollector.create(weightSort(cmd.getSort()), len, false, needScores, needScores, true);\n      }\n\n      DocSetCollector setCollector = new DocSetDelegateCollector(maxDoc>>6, maxDoc, topCollector);\n      Collector collector = setCollector;\n\n      if( timeAllowed > 0 ) {\n        collector = new TimeLimitingCollector(collector, timeAllowed );\n      }\n      if (pf.postFilter != null) {\n        pf.postFilter.setLastDelegate(collector);\n        collector = pf.postFilter;\n      }\n      try {\n        super.search(query, luceneFilter, collector);\n      }\n      catch( TimeLimitingCollector.TimeExceededException x ) {\n        log.warn( \"Query: \" + query + \"; \" + x.getMessage() );\n        qr.setPartialResults(true);\n      }\n\n      set = setCollector.getDocSet();      \n\n      totalHits = topCollector.getTotalHits();\n      assert(totalHits == set.size());\n\n      TopDocs topDocs = topCollector.topDocs(0, len);\n      maxScore = totalHits>0 ? topDocs.getMaxScore() : 0.0f;\n      nDocsReturned = topDocs.scoreDocs.length;\n\n      ids = new int[nDocsReturned];\n      scores = (cmd.getFlags()&GET_SCORES)!=0 ? new float[nDocsReturned] : null;\n      for (int i=0; i<nDocsReturned; i++) {\n        ScoreDoc scoreDoc = topDocs.scoreDocs[i];\n        ids[i] = scoreDoc.doc;\n        if (scores != null) scores[i] = scoreDoc.score;\n      }\n    }\n\n    int sliceLen = Math.min(lastDocRequested,nDocsReturned);\n    if (sliceLen < 0) sliceLen=0;\n\n    qr.setDocList(new DocSlice(0,sliceLen,ids,scores,totalHits,maxScore));\n    // TODO: if we collect results before the filter, we just need to intersect with\n    // that filter to generate the DocSet for qr.setDocSet()\n    qr.setDocSet(set);\n\n    // TODO: currently we don't generate the DocSet for the base query,\n    // but the QueryDocSet == CompleteDocSet if filter==null.\n    return pf.filter==null && pf.postFilter==null ? qr.getDocSet() : null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01":["771281b4c7dc712b48ba338b970b49007ca402a1"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"323f871ffe96b871d8c534a614be60751bb023c2":["1da8d55113b689b06716246649de6f62430f15c0"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"c26f00b574427b55127e869b935845554afde1fa":["f8bf47b67b38083a0c4d9d2e3f53b59a48e8db34","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"2553b00f699380c64959ccb27991289aae87be2e":["70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01","f8bf47b67b38083a0c4d9d2e3f53b59a48e8db34"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01","f8bf47b67b38083a0c4d9d2e3f53b59a48e8db34"],"e79a6d080bdd5b2a8f56342cf571b5476de04180":["868da859b43505d9d2a023bfeae6dd0c795f5295","771281b4c7dc712b48ba338b970b49007ca402a1"],"771281b4c7dc712b48ba338b970b49007ca402a1":["323f871ffe96b871d8c534a614be60751bb023c2"],"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["2553b00f699380c64959ccb27991289aae87be2e"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["1da8d55113b689b06716246649de6f62430f15c0","70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["f8bf47b67b38083a0c4d9d2e3f53b59a48e8db34"],"f8bf47b67b38083a0c4d9d2e3f53b59a48e8db34":["70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["1da8d55113b689b06716246649de6f62430f15c0","323f871ffe96b871d8c534a614be60751bb023c2"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["e79a6d080bdd5b2a8f56342cf571b5476de04180","70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01":["2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c","29ef99d61cda9641b6250bf9567329a6e65f901d","f8bf47b67b38083a0c4d9d2e3f53b59a48e8db34","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"323f871ffe96b871d8c534a614be60751bb023c2":["771281b4c7dc712b48ba338b970b49007ca402a1","868da859b43505d9d2a023bfeae6dd0c795f5295"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"2553b00f699380c64959ccb27991289aae87be2e":["c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"e79a6d080bdd5b2a8f56342cf571b5476de04180":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"771281b4c7dc712b48ba338b970b49007ca402a1":["70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01","e79a6d080bdd5b2a8f56342cf571b5476de04180"],"1da8d55113b689b06716246649de6f62430f15c0":["323f871ffe96b871d8c534a614be60751bb023c2","29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"f8bf47b67b38083a0c4d9d2e3f53b59a48e8db34":["c26f00b574427b55127e869b935845554afde1fa","2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c","a258fbb26824fd104ed795e5d9033d2d040049ee"],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["e79a6d080bdd5b2a8f56342cf571b5476de04180"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d083e83f225b11e5fdd900e83d26ddb385b6955c","29ef99d61cda9641b6250bf9567329a6e65f901d","a258fbb26824fd104ed795e5d9033d2d040049ee","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}