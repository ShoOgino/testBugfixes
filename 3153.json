{"path":"lucene/core/src/java/org/apache/lucene/util/NumericUtils#prefixCodedToLong(BytesRef).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/NumericUtils#prefixCodedToLong(BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/NumericUtils#prefixCodedToLong(BytesRef).mjava","sourceNew":"  /**\n   * Returns a long from prefixCoded bytes.\n   * Rightmost bits will be zero for lower precision codes.\n   * This method can be used to decode a term's value.\n   * @throws NumberFormatException if the supplied {@link BytesRef} is\n   * not correctly prefix encoded.\n   * @see #longToPrefixCoded(long,int,BytesRef)\n   */\n  public static long prefixCodedToLong(final BytesRef val) {\n    long sortableBits = 0L;\n    for (int i=val.offset+1, limit=val.offset+val.length; i<limit; i++) {\n      sortableBits <<= 7;\n      final byte b = val.bytes[i];\n      if (b < 0) {\n        throw new NumberFormatException(\n          \"Invalid prefixCoded numerical value representation (byte \"+\n          Integer.toHexString(b&0xff)+\" at position \"+(i-val.offset)+\" is invalid)\"\n        );\n      }\n      sortableBits |= b;\n    }\n    return (sortableBits << getPrefixCodedLongShift(val)) ^ 0x8000000000000000L;\n  }\n\n","sourceOld":"  /**\n   * Returns a long from prefixCoded bytes.\n   * Rightmost bits will be zero for lower precision codes.\n   * This method can be used to decode a term's value.\n   * @throws NumberFormatException if the supplied {@link BytesRef} is\n   * not correctly prefix encoded.\n   * @see #longToPrefixCoded(long,int,BytesRef)\n   */\n  public static long prefixCodedToLong(final BytesRef val) {\n    long sortableBits = 0L;\n    for (int i=val.offset+1, limit=val.offset+val.length; i<limit; i++) {\n      sortableBits <<= 7;\n      final byte b = val.bytes[i];\n      if (b < 0) {\n        throw new NumberFormatException(\n          \"Invalid prefixCoded numerical value representation (byte \"+\n          Integer.toHexString(b&0xff)+\" at position \"+(i-val.offset)+\" is invalid)\"\n        );\n      }\n      sortableBits |= b;\n    }\n    return (sortableBits << getPrefixCodedLongShift(val)) ^ 0x8000000000000000L;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"22abfa0c2df167320b9c97d1bdbb19347ff95402","date":1359067319,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/NumericUtils#prefixCodedToLong(BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/NumericUtils#prefixCodedToLong(BytesRef).mjava","sourceNew":"  /**\n   * Returns a long from prefixCoded bytes.\n   * Rightmost bits will be zero for lower precision codes.\n   * This method can be used to decode a term's value.\n   * @throws NumberFormatException if the supplied {@link BytesRef} is\n   * not correctly prefix encoded.\n   * @see #longToPrefixCodedBytes\n   */\n  public static long prefixCodedToLong(final BytesRef val) {\n    long sortableBits = 0L;\n    for (int i=val.offset+1, limit=val.offset+val.length; i<limit; i++) {\n      sortableBits <<= 7;\n      final byte b = val.bytes[i];\n      if (b < 0) {\n        throw new NumberFormatException(\n          \"Invalid prefixCoded numerical value representation (byte \"+\n          Integer.toHexString(b&0xff)+\" at position \"+(i-val.offset)+\" is invalid)\"\n        );\n      }\n      sortableBits |= b;\n    }\n    return (sortableBits << getPrefixCodedLongShift(val)) ^ 0x8000000000000000L;\n  }\n\n","sourceOld":"  /**\n   * Returns a long from prefixCoded bytes.\n   * Rightmost bits will be zero for lower precision codes.\n   * This method can be used to decode a term's value.\n   * @throws NumberFormatException if the supplied {@link BytesRef} is\n   * not correctly prefix encoded.\n   * @see #longToPrefixCoded(long,int,BytesRef)\n   */\n  public static long prefixCodedToLong(final BytesRef val) {\n    long sortableBits = 0L;\n    for (int i=val.offset+1, limit=val.offset+val.length; i<limit; i++) {\n      sortableBits <<= 7;\n      final byte b = val.bytes[i];\n      if (b < 0) {\n        throw new NumberFormatException(\n          \"Invalid prefixCoded numerical value representation (byte \"+\n          Integer.toHexString(b&0xff)+\" at position \"+(i-val.offset)+\" is invalid)\"\n        );\n      }\n      sortableBits |= b;\n    }\n    return (sortableBits << getPrefixCodedLongShift(val)) ^ 0x8000000000000000L;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dd45d4a2ee01a1932d33eec42f5272c2402da679","date":1359316912,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/NumericUtils#prefixCodedToLong(BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/NumericUtils#prefixCodedToLong(BytesRef).mjava","sourceNew":"  /**\n   * Returns a long from prefixCoded bytes.\n   * Rightmost bits will be zero for lower precision codes.\n   * This method can be used to decode a term's value.\n   * @throws NumberFormatException if the supplied {@link BytesRef} is\n   * not correctly prefix encoded.\n   * @see #longToPrefixCodedBytes\n   */\n  public static long prefixCodedToLong(final BytesRef val) {\n    long sortableBits = 0L;\n    for (int i=val.offset+1, limit=val.offset+val.length; i<limit; i++) {\n      sortableBits <<= 7;\n      final byte b = val.bytes[i];\n      if (b < 0) {\n        throw new NumberFormatException(\n          \"Invalid prefixCoded numerical value representation (byte \"+\n          Integer.toHexString(b&0xff)+\" at position \"+(i-val.offset)+\" is invalid)\"\n        );\n      }\n      sortableBits |= b;\n    }\n    return (sortableBits << getPrefixCodedLongShift(val)) ^ 0x8000000000000000L;\n  }\n\n","sourceOld":"  /**\n   * Returns a long from prefixCoded bytes.\n   * Rightmost bits will be zero for lower precision codes.\n   * This method can be used to decode a term's value.\n   * @throws NumberFormatException if the supplied {@link BytesRef} is\n   * not correctly prefix encoded.\n   * @see #longToPrefixCoded(long,int,BytesRef)\n   */\n  public static long prefixCodedToLong(final BytesRef val) {\n    long sortableBits = 0L;\n    for (int i=val.offset+1, limit=val.offset+val.length; i<limit; i++) {\n      sortableBits <<= 7;\n      final byte b = val.bytes[i];\n      if (b < 0) {\n        throw new NumberFormatException(\n          \"Invalid prefixCoded numerical value representation (byte \"+\n          Integer.toHexString(b&0xff)+\" at position \"+(i-val.offset)+\" is invalid)\"\n        );\n      }\n      sortableBits |= b;\n    }\n    return (sortableBits << getPrefixCodedLongShift(val)) ^ 0x8000000000000000L;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"770342641f7b505eaa8dccdc666158bff2419109","date":1449868421,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/LegacyNumericUtils#prefixCodedToLong(BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/NumericUtils#prefixCodedToLong(BytesRef).mjava","sourceNew":"  /**\n   * Returns a long from prefixCoded bytes.\n   * Rightmost bits will be zero for lower precision codes.\n   * This method can be used to decode a term's value.\n   * @throws NumberFormatException if the supplied {@link BytesRef} is\n   * not correctly prefix encoded.\n   * @see #longToPrefixCodedBytes\n   */\n  public static long prefixCodedToLong(final BytesRef val) {\n    long sortableBits = 0L;\n    for (int i=val.offset+1, limit=val.offset+val.length; i<limit; i++) {\n      sortableBits <<= 7;\n      final byte b = val.bytes[i];\n      if (b < 0) {\n        throw new NumberFormatException(\n          \"Invalid prefixCoded numerical value representation (byte \"+\n          Integer.toHexString(b&0xff)+\" at position \"+(i-val.offset)+\" is invalid)\"\n        );\n      }\n      sortableBits |= b;\n    }\n    return (sortableBits << getPrefixCodedLongShift(val)) ^ 0x8000000000000000L;\n  }\n\n","sourceOld":"  /**\n   * Returns a long from prefixCoded bytes.\n   * Rightmost bits will be zero for lower precision codes.\n   * This method can be used to decode a term's value.\n   * @throws NumberFormatException if the supplied {@link BytesRef} is\n   * not correctly prefix encoded.\n   * @see #longToPrefixCodedBytes\n   */\n  public static long prefixCodedToLong(final BytesRef val) {\n    long sortableBits = 0L;\n    for (int i=val.offset+1, limit=val.offset+val.length; i<limit; i++) {\n      sortableBits <<= 7;\n      final byte b = val.bytes[i];\n      if (b < 0) {\n        throw new NumberFormatException(\n          \"Invalid prefixCoded numerical value representation (byte \"+\n          Integer.toHexString(b&0xff)+\" at position \"+(i-val.offset)+\" is invalid)\"\n        );\n      }\n      sortableBits |= b;\n    }\n    return (sortableBits << getPrefixCodedLongShift(val)) ^ 0x8000000000000000L;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"22abfa0c2df167320b9c97d1bdbb19347ff95402":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"dd45d4a2ee01a1932d33eec42f5272c2402da679":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","22abfa0c2df167320b9c97d1bdbb19347ff95402"],"770342641f7b505eaa8dccdc666158bff2419109":["22abfa0c2df167320b9c97d1bdbb19347ff95402"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["770342641f7b505eaa8dccdc666158bff2419109"]},"commit2Childs":{"22abfa0c2df167320b9c97d1bdbb19347ff95402":["dd45d4a2ee01a1932d33eec42f5272c2402da679","770342641f7b505eaa8dccdc666158bff2419109"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["22abfa0c2df167320b9c97d1bdbb19347ff95402","dd45d4a2ee01a1932d33eec42f5272c2402da679"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"dd45d4a2ee01a1932d33eec42f5272c2402da679":[],"770342641f7b505eaa8dccdc666158bff2419109":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["dd45d4a2ee01a1932d33eec42f5272c2402da679","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}