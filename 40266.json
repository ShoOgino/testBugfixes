{"path":"lucene/core/src/java/org/apache/lucene/util/FixedBitSet#getAndClear(int).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/FixedBitSet#getAndClear(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/FixedBitSet#getAndClear(int).mjava","sourceNew":"  public boolean getAndClear(int index) {\n    assert index >= 0 && index < numBits;\n    int wordNum = index >> 6;      // div 64\n    int bit = index & 0x3f;     // mod 64\n    long bitmask = 1L << bit;\n    boolean val = (bits[wordNum] & bitmask) != 0;\n    bits[wordNum] &= ~bitmask;\n    return val;\n  }\n\n","sourceOld":"  public boolean getAndClear(int index) {\n    assert index >= 0 && index < numBits;\n    int wordNum = index >> 6;      // div 64\n    int bit = index & 0x3f;     // mod 64\n    long bitmask = 1L << bit;\n    boolean val = (bits[wordNum] & bitmask) != 0;\n    bits[wordNum] &= ~bitmask;\n    return val;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55cd30e9e9e71e141455bae8e74401676f036658","date":1406760593,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/FixedBitSet#getAndClear(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/FixedBitSet#getAndClear(int).mjava","sourceNew":"  public boolean getAndClear(int index) {\n    assert index >= 0 && index < numBits;\n    int wordNum = index >> 6;      // div 64\n    long bitmask = 1L << index;\n    boolean val = (bits[wordNum] & bitmask) != 0;\n    bits[wordNum] &= ~bitmask;\n    return val;\n  }\n\n","sourceOld":"  public boolean getAndClear(int index) {\n    assert index >= 0 && index < numBits;\n    int wordNum = index >> 6;      // div 64\n    int bit = index & 0x3f;     // mod 64\n    long bitmask = 1L << bit;\n    boolean val = (bits[wordNum] & bitmask) != 0;\n    bits[wordNum] &= ~bitmask;\n    return val;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"af918c7c328775f9fadd5870c21f0fafc2a059cc","date":1430253435,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/FixedBitSet#getAndClear(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/FixedBitSet#getAndClear(int).mjava","sourceNew":"  public boolean getAndClear(int index) {\n    assert index >= 0 && index < numBits: \"index=\" + index + \", numBits=\" + numBits;\n    int wordNum = index >> 6;      // div 64\n    long bitmask = 1L << index;\n    boolean val = (bits[wordNum] & bitmask) != 0;\n    bits[wordNum] &= ~bitmask;\n    return val;\n  }\n\n","sourceOld":"  public boolean getAndClear(int index) {\n    assert index >= 0 && index < numBits;\n    int wordNum = index >> 6;      // div 64\n    long bitmask = 1L << index;\n    boolean val = (bits[wordNum] & bitmask) != 0;\n    bits[wordNum] &= ~bitmask;\n    return val;\n  }\n\n","bugFix":["c0d520cd04d39f8caa0a53ed23e60beb30e8fb9f"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"af918c7c328775f9fadd5870c21f0fafc2a059cc":["55cd30e9e9e71e141455bae8e74401676f036658"],"55cd30e9e9e71e141455bae8e74401676f036658":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["af918c7c328775f9fadd5870c21f0fafc2a059cc"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["55cd30e9e9e71e141455bae8e74401676f036658"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"af918c7c328775f9fadd5870c21f0fafc2a059cc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"55cd30e9e9e71e141455bae8e74401676f036658":["af918c7c328775f9fadd5870c21f0fafc2a059cc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}