{"path":"modules/analysis/smartcn/src/java/org/apache/lucene/analysis/cn/smart/hhmm/SegTokenFilter#filter(SegToken).mjava","commits":[{"id":"0f080986da691a3bba7b757f43ab72cdc82b57ce","date":1273069619,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/smartcn/src/java/org/apache/lucene/analysis/cn/smart/hhmm/SegTokenFilter#filter(SegToken).mjava","pathOld":"lucene/contrib/analyzers/smartcn/src/java/org/apache/lucene/analysis/cn/smart/hhmm/SegTokenFilter#filter(SegToken).mjava","sourceNew":"  /**\n   * Filter an input {@link SegToken}\n   * <p>\n   * Full-width latin will be converted to half-width, then all latin will be lowercased.\n   * All punctuation is converted into {@link Utility#COMMON_DELIMITER}\n   * </p>\n   * \n   * @param token input {@link SegToken}\n   * @return normalized {@link SegToken}\n   */\n  public SegToken filter(SegToken token) {\n    switch (token.wordType) {\n      case WordType.FULLWIDTH_NUMBER:\n      case WordType.FULLWIDTH_STRING: /* first convert full-width -> half-width */\n        for (int i = 0; i < token.charArray.length; i++) {\n          if (token.charArray[i] >= 0xFF10)\n            token.charArray[i] -= 0xFEE0;\n\n          if (token.charArray[i] >= 0x0041 && token.charArray[i] <= 0x005A) /* lowercase latin */\n            token.charArray[i] += 0x0020;\n        }\n        break;\n      case WordType.STRING:\n        for (int i = 0; i < token.charArray.length; i++) {\n          if (token.charArray[i] >= 0x0041 && token.charArray[i] <= 0x005A) /* lowercase latin */\n            token.charArray[i] += 0x0020;\n        }\n        break;\n      case WordType.DELIMITER: /* convert all punctuation to Utility.COMMON_DELIMITER */\n        token.charArray = Utility.COMMON_DELIMITER;\n        break;\n      default:\n        break;\n    }\n    return token;\n  }\n\n","sourceOld":"  /**\n   * Filter an input {@link SegToken}\n   * <p>\n   * Full-width latin will be converted to half-width, then all latin will be lowercased.\n   * All punctuation is converted into {@link Utility#COMMON_DELIMITER}\n   * </p>\n   * \n   * @param token input {@link SegToken}\n   * @return normalized {@link SegToken}\n   */\n  public SegToken filter(SegToken token) {\n    switch (token.wordType) {\n      case WordType.FULLWIDTH_NUMBER:\n      case WordType.FULLWIDTH_STRING: /* first convert full-width -> half-width */\n        for (int i = 0; i < token.charArray.length; i++) {\n          if (token.charArray[i] >= 0xFF10)\n            token.charArray[i] -= 0xFEE0;\n\n          if (token.charArray[i] >= 0x0041 && token.charArray[i] <= 0x005A) /* lowercase latin */\n            token.charArray[i] += 0x0020;\n        }\n        break;\n      case WordType.STRING:\n        for (int i = 0; i < token.charArray.length; i++) {\n          if (token.charArray[i] >= 0x0041 && token.charArray[i] <= 0x005A) /* lowercase latin */\n            token.charArray[i] += 0x0020;\n        }\n        break;\n      case WordType.DELIMITER: /* convert all punctuation to Utility.COMMON_DELIMITER */\n        token.charArray = Utility.COMMON_DELIMITER;\n        break;\n      default:\n        break;\n    }\n    return token;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/smartcn/src/java/org/apache/lucene/analysis/cn/smart/hhmm/SegTokenFilter#filter(SegToken).mjava","pathOld":"modules/analysis/smartcn/src/java/org/apache/lucene/analysis/cn/smart/hhmm/SegTokenFilter#filter(SegToken).mjava","sourceNew":"  /**\n   * Filter an input {@link SegToken}\n   * <p>\n   * Full-width latin will be converted to half-width, then all latin will be lowercased.\n   * All punctuation is converted into {@link Utility#COMMON_DELIMITER}\n   * </p>\n   * \n   * @param token input {@link SegToken}\n   * @return normalized {@link SegToken}\n   */\n  public SegToken filter(SegToken token) {\n    switch (token.wordType) {\n      case WordType.FULLWIDTH_NUMBER:\n      case WordType.FULLWIDTH_STRING: /* first convert full-width -> half-width */\n        for (int i = 0; i < token.charArray.length; i++) {\n          if (token.charArray[i] >= 0xFF10)\n            token.charArray[i] -= 0xFEE0;\n\n          if (token.charArray[i] >= 0x0041 && token.charArray[i] <= 0x005A) /* lowercase latin */\n            token.charArray[i] += 0x0020;\n        }\n        break;\n      case WordType.STRING:\n        for (int i = 0; i < token.charArray.length; i++) {\n          if (token.charArray[i] >= 0x0041 && token.charArray[i] <= 0x005A) /* lowercase latin */\n            token.charArray[i] += 0x0020;\n        }\n        break;\n      case WordType.DELIMITER: /* convert all punctuation to Utility.COMMON_DELIMITER */\n        token.charArray = Utility.COMMON_DELIMITER;\n        break;\n      default:\n        break;\n    }\n    return token;\n  }\n\n","sourceOld":"  /**\n   * Filter an input {@link SegToken}\n   * <p>\n   * Full-width latin will be converted to half-width, then all latin will be lowercased.\n   * All punctuation is converted into {@link Utility#COMMON_DELIMITER}\n   * </p>\n   * \n   * @param token input {@link SegToken}\n   * @return normalized {@link SegToken}\n   */\n  public SegToken filter(SegToken token) {\n    switch (token.wordType) {\n      case WordType.FULLWIDTH_NUMBER:\n      case WordType.FULLWIDTH_STRING: /* first convert full-width -> half-width */\n        for (int i = 0; i < token.charArray.length; i++) {\n          if (token.charArray[i] >= 0xFF10)\n            token.charArray[i] -= 0xFEE0;\n\n          if (token.charArray[i] >= 0x0041 && token.charArray[i] <= 0x005A) /* lowercase latin */\n            token.charArray[i] += 0x0020;\n        }\n        break;\n      case WordType.STRING:\n        for (int i = 0; i < token.charArray.length; i++) {\n          if (token.charArray[i] >= 0x0041 && token.charArray[i] <= 0x005A) /* lowercase latin */\n            token.charArray[i] += 0x0020;\n        }\n        break;\n      case WordType.DELIMITER: /* convert all punctuation to Utility.COMMON_DELIMITER */\n        token.charArray = Utility.COMMON_DELIMITER;\n        break;\n      default:\n        break;\n    }\n    return token;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}