{"path":"lucene/demo/src/java/org/apache/lucene/demo/facet/SimpleFacetsExample#search().mjava","commits":[{"id":"31703f98041a9e7086254ed134d8f91c22ac933f","date":1360500940,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/demo/src/java/org/apache/lucene/demo/facet/SimpleFacetsExample#search().mjava","pathOld":"/dev/null","sourceNew":"  /** User runs a query and counts facets. */\n  private List<FacetResult> search() throws IOException {\n    DirectoryReader indexReader = DirectoryReader.open(indexDir);\n    IndexSearcher searcher = new IndexSearcher(indexReader);\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoDir);\n\n    // Count both \"Publish Date\" and \"Author\" dimensions\n    FacetSearchParams fsp = new FacetSearchParams(\n        new CountFacetRequest(new CategoryPath(\"Publish Date\"), 10), \n        new CountFacetRequest(new CategoryPath(\"Author\"), 10));\n\n    // Aggregatses the facet counts\n    FacetsCollector fc = FacetsCollector.create(fsp, searcher.getIndexReader(), taxoReader);\n\n    // MatchAllDocsQuery is for \"browsing\" (counts facets\n    // for all non-deleted docs in the index); normally\n    // you'd use a \"normal\" query, and use MultiCollector to\n    // wrap collecting the \"normal\" hits and also facets:\n    searcher.search(new MatchAllDocsQuery(), fc);\n\n    // Retrieve results\n    List<FacetResult> facetResults = fc.getFacetResults();\n    \n    indexReader.close();\n    taxoReader.close();\n    \n    return facetResults;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1b8829c66b19d8c6b7eedbb88f69c8ce1f53311d","date":1383508626,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/demo/src/java/org/apache/lucene/demo/facet/SimpleFacetsExample#search().mjava","pathOld":"lucene/demo/src/java/org/apache/lucene/demo/facet/SimpleFacetsExample#search().mjava","sourceNew":"  /** User runs a query and counts facets. */\n  private List<FacetResult> search() throws IOException {\n    DirectoryReader indexReader = DirectoryReader.open(indexDir);\n    IndexSearcher searcher = new IndexSearcher(indexReader);\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoDir);\n\n    // Count both \"Publish Date\" and \"Author\" dimensions\n    FacetSearchParams fsp = new FacetSearchParams(\n        new CountFacetRequest(new CategoryPath(\"Publish Date\"), 10), \n        new CountFacetRequest(new CategoryPath(\"Author\"), 10));\n\n    // Aggregates the facet counts\n    FacetsCollector fc = FacetsCollector.create(fsp, searcher.getIndexReader(), taxoReader);\n\n    // MatchAllDocsQuery is for \"browsing\" (counts facets\n    // for all non-deleted docs in the index); normally\n    // you'd use a \"normal\" query, and use MultiCollector to\n    // wrap collecting the \"normal\" hits and also facets:\n    searcher.search(new MatchAllDocsQuery(), fc);\n\n    // Retrieve results\n    List<FacetResult> facetResults = fc.getFacetResults();\n    \n    indexReader.close();\n    taxoReader.close();\n    \n    return facetResults;\n  }\n\n","sourceOld":"  /** User runs a query and counts facets. */\n  private List<FacetResult> search() throws IOException {\n    DirectoryReader indexReader = DirectoryReader.open(indexDir);\n    IndexSearcher searcher = new IndexSearcher(indexReader);\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoDir);\n\n    // Count both \"Publish Date\" and \"Author\" dimensions\n    FacetSearchParams fsp = new FacetSearchParams(\n        new CountFacetRequest(new CategoryPath(\"Publish Date\"), 10), \n        new CountFacetRequest(new CategoryPath(\"Author\"), 10));\n\n    // Aggregatses the facet counts\n    FacetsCollector fc = FacetsCollector.create(fsp, searcher.getIndexReader(), taxoReader);\n\n    // MatchAllDocsQuery is for \"browsing\" (counts facets\n    // for all non-deleted docs in the index); normally\n    // you'd use a \"normal\" query, and use MultiCollector to\n    // wrap collecting the \"normal\" hits and also facets:\n    searcher.search(new MatchAllDocsQuery(), fc);\n\n    // Retrieve results\n    List<FacetResult> facetResults = fc.getFacetResults();\n    \n    indexReader.close();\n    taxoReader.close();\n    \n    return facetResults;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c190847801a50f4dd20fd639bdc29b54ea3b288b","date":1384461522,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/demo/src/java/org/apache/lucene/demo/facet/SimpleFacetsExample#search().mjava","pathOld":"lucene/demo/src/java/org/apache/lucene/demo/facet/SimpleFacetsExample#search().mjava","sourceNew":"  /** User runs a query and counts facets. */\n  private List<FacetResult> search() throws IOException {\n    DirectoryReader indexReader = DirectoryReader.open(indexDir);\n    IndexSearcher searcher = new IndexSearcher(indexReader);\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoDir);\n\n    // Count both \"Publish Date\" and \"Author\" dimensions\n    FacetSearchParams fsp = new FacetSearchParams(\n        new CountFacetRequest(new FacetLabel(\"Publish Date\"), 10), \n        new CountFacetRequest(new FacetLabel(\"Author\"), 10));\n\n    // Aggregates the facet counts\n    FacetsCollector fc = FacetsCollector.create(fsp, searcher.getIndexReader(), taxoReader);\n\n    // MatchAllDocsQuery is for \"browsing\" (counts facets\n    // for all non-deleted docs in the index); normally\n    // you'd use a \"normal\" query, and use MultiCollector to\n    // wrap collecting the \"normal\" hits and also facets:\n    searcher.search(new MatchAllDocsQuery(), fc);\n\n    // Retrieve results\n    List<FacetResult> facetResults = fc.getFacetResults();\n    \n    indexReader.close();\n    taxoReader.close();\n    \n    return facetResults;\n  }\n\n","sourceOld":"  /** User runs a query and counts facets. */\n  private List<FacetResult> search() throws IOException {\n    DirectoryReader indexReader = DirectoryReader.open(indexDir);\n    IndexSearcher searcher = new IndexSearcher(indexReader);\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoDir);\n\n    // Count both \"Publish Date\" and \"Author\" dimensions\n    FacetSearchParams fsp = new FacetSearchParams(\n        new CountFacetRequest(new CategoryPath(\"Publish Date\"), 10), \n        new CountFacetRequest(new CategoryPath(\"Author\"), 10));\n\n    // Aggregates the facet counts\n    FacetsCollector fc = FacetsCollector.create(fsp, searcher.getIndexReader(), taxoReader);\n\n    // MatchAllDocsQuery is for \"browsing\" (counts facets\n    // for all non-deleted docs in the index); normally\n    // you'd use a \"normal\" query, and use MultiCollector to\n    // wrap collecting the \"normal\" hits and also facets:\n    searcher.search(new MatchAllDocsQuery(), fc);\n\n    // Retrieve results\n    List<FacetResult> facetResults = fc.getFacetResults();\n    \n    indexReader.close();\n    taxoReader.close();\n    \n    return facetResults;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d899affd3c008feba40d1405b7a38972ce2005b4","date":1385469973,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/demo/src/java/org/apache/lucene/demo/facet/SimpleFacetsExample#search().mjava","pathOld":"lucene/demo/src/java/org/apache/lucene/demo/facet/SimpleFacetsExample#search().mjava","sourceNew":"  /** User runs a query and counts facets. */\n  private List<SimpleFacetResult> search() throws IOException {\n    DirectoryReader indexReader = DirectoryReader.open(indexDir);\n    IndexSearcher searcher = new IndexSearcher(indexReader);\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoDir);\n    FacetsConfig config = getConfig(null);\n\n    SimpleFacetsCollector sfc = new SimpleFacetsCollector();\n\n    // MatchAllDocsQuery is for \"browsing\" (counts facets\n    // for all non-deleted docs in the index); normally\n    // you'd use a \"normal\" query, and use MultiCollector to\n    // wrap collecting the \"normal\" hits and also facets:\n    searcher.search(new MatchAllDocsQuery(), sfc);\n\n    // Retrieve results\n    List<SimpleFacetResult> results = new ArrayList<SimpleFacetResult>();\n\n    // Count both \"Publish Date\" and \"Author\" dimensions\n    Facets facets = new FastTaxonomyFacetCounts(taxoReader, config, sfc);\n    results.add(facets.getTopChildren(10, \"Author\"));\n    results.add(facets.getTopChildren(10, \"Publish Date\"));\n    \n    indexReader.close();\n    taxoReader.close();\n    \n    return results;\n  }\n\n","sourceOld":"  /** User runs a query and counts facets. */\n  private List<FacetResult> search() throws IOException {\n    DirectoryReader indexReader = DirectoryReader.open(indexDir);\n    IndexSearcher searcher = new IndexSearcher(indexReader);\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoDir);\n\n    // Count both \"Publish Date\" and \"Author\" dimensions\n    FacetSearchParams fsp = new FacetSearchParams(\n        new CountFacetRequest(new FacetLabel(\"Publish Date\"), 10), \n        new CountFacetRequest(new FacetLabel(\"Author\"), 10));\n\n    // Aggregates the facet counts\n    FacetsCollector fc = FacetsCollector.create(fsp, searcher.getIndexReader(), taxoReader);\n\n    // MatchAllDocsQuery is for \"browsing\" (counts facets\n    // for all non-deleted docs in the index); normally\n    // you'd use a \"normal\" query, and use MultiCollector to\n    // wrap collecting the \"normal\" hits and also facets:\n    searcher.search(new MatchAllDocsQuery(), fc);\n\n    // Retrieve results\n    List<FacetResult> facetResults = fc.getFacetResults();\n    \n    indexReader.close();\n    taxoReader.close();\n    \n    return facetResults;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"21d36d0db865f7b84026b447bec653469a6e66df","date":1385495602,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/demo/src/java/org/apache/lucene/demo/facet/SimpleFacetsExample#search().mjava","pathOld":"lucene/demo/src/java/org/apache/lucene/demo/facet/SimpleFacetsExample#search().mjava","sourceNew":"  /** User runs a query and counts facets. */\n  private List<FacetResult> search() throws IOException {\n    DirectoryReader indexReader = DirectoryReader.open(indexDir);\n    IndexSearcher searcher = new IndexSearcher(indexReader);\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoDir);\n    FacetsConfig config = getConfig(null);\n\n    FacetsCollector sfc = new FacetsCollector();\n\n    // MatchAllDocsQuery is for \"browsing\" (counts facets\n    // for all non-deleted docs in the index); normally\n    // you'd use a \"normal\" query, and use MultiCollector to\n    // wrap collecting the \"normal\" hits and also facets:\n    searcher.search(new MatchAllDocsQuery(), sfc);\n\n    // Retrieve results\n    List<FacetResult> results = new ArrayList<FacetResult>();\n\n    // Count both \"Publish Date\" and \"Author\" dimensions\n    Facets facets = new FastTaxonomyFacetCounts(taxoReader, config, sfc);\n    results.add(facets.getTopChildren(10, \"Author\"));\n    results.add(facets.getTopChildren(10, \"Publish Date\"));\n    \n    indexReader.close();\n    taxoReader.close();\n    \n    return results;\n  }\n\n","sourceOld":"  /** User runs a query and counts facets. */\n  private List<SimpleFacetResult> search() throws IOException {\n    DirectoryReader indexReader = DirectoryReader.open(indexDir);\n    IndexSearcher searcher = new IndexSearcher(indexReader);\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoDir);\n    FacetsConfig config = getConfig(null);\n\n    SimpleFacetsCollector sfc = new SimpleFacetsCollector();\n\n    // MatchAllDocsQuery is for \"browsing\" (counts facets\n    // for all non-deleted docs in the index); normally\n    // you'd use a \"normal\" query, and use MultiCollector to\n    // wrap collecting the \"normal\" hits and also facets:\n    searcher.search(new MatchAllDocsQuery(), sfc);\n\n    // Retrieve results\n    List<SimpleFacetResult> results = new ArrayList<SimpleFacetResult>();\n\n    // Count both \"Publish Date\" and \"Author\" dimensions\n    Facets facets = new FastTaxonomyFacetCounts(taxoReader, config, sfc);\n    results.add(facets.getTopChildren(10, \"Author\"));\n    results.add(facets.getTopChildren(10, \"Publish Date\"));\n    \n    indexReader.close();\n    taxoReader.close();\n    \n    return results;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"78522aad83283ca58fae08fd89406b65429d0229","date":1385573562,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/demo/src/java/org/apache/lucene/demo/facet/SimpleFacetsExample#search().mjava","pathOld":"lucene/demo/src/java/org/apache/lucene/demo/facet/SimpleFacetsExample#search().mjava","sourceNew":"  /** User runs a query and counts facets. */\n  private List<FacetResult> search() throws IOException {\n    DirectoryReader indexReader = DirectoryReader.open(indexDir);\n    IndexSearcher searcher = new IndexSearcher(indexReader);\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoDir);\n    FacetsConfig config = getConfig(null);\n\n    FacetsCollector fc = new FacetsCollector();\n\n    // MatchAllDocsQuery is for \"browsing\" (counts facets\n    // for all non-deleted docs in the index); normally\n    // you'd use a \"normal\" query:\n    Facets.search(searcher, new MatchAllDocsQuery(), 10, fc);\n\n    // Retrieve results\n    List<FacetResult> results = new ArrayList<FacetResult>();\n\n    // Count both \"Publish Date\" and \"Author\" dimensions\n    Facets facets = new FastTaxonomyFacetCounts(taxoReader, config, fc);\n    results.add(facets.getTopChildren(10, \"Author\"));\n    results.add(facets.getTopChildren(10, \"Publish Date\"));\n    \n    indexReader.close();\n    taxoReader.close();\n    \n    return results;\n  }\n\n","sourceOld":"  /** User runs a query and counts facets. */\n  private List<FacetResult> search() throws IOException {\n    DirectoryReader indexReader = DirectoryReader.open(indexDir);\n    IndexSearcher searcher = new IndexSearcher(indexReader);\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoDir);\n    FacetsConfig config = getConfig(null);\n\n    FacetsCollector sfc = new FacetsCollector();\n\n    // MatchAllDocsQuery is for \"browsing\" (counts facets\n    // for all non-deleted docs in the index); normally\n    // you'd use a \"normal\" query, and use MultiCollector to\n    // wrap collecting the \"normal\" hits and also facets:\n    searcher.search(new MatchAllDocsQuery(), sfc);\n\n    // Retrieve results\n    List<FacetResult> results = new ArrayList<FacetResult>();\n\n    // Count both \"Publish Date\" and \"Author\" dimensions\n    Facets facets = new FastTaxonomyFacetCounts(taxoReader, config, sfc);\n    results.add(facets.getTopChildren(10, \"Author\"));\n    results.add(facets.getTopChildren(10, \"Publish Date\"));\n    \n    indexReader.close();\n    taxoReader.close();\n    \n    return results;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd83550e4b0bdd36e7d9dca9273264100782440b","date":1385761753,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/demo/src/java/org/apache/lucene/demo/facet/SimpleFacetsExample#search().mjava","pathOld":"lucene/demo/src/java/org/apache/lucene/demo/facet/SimpleFacetsExample#search().mjava","sourceNew":"  /** User runs a query and counts facets. */\n  private List<FacetResult> search() throws IOException {\n    DirectoryReader indexReader = DirectoryReader.open(indexDir);\n    IndexSearcher searcher = new IndexSearcher(indexReader);\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoDir);\n\n    FacetsCollector fc = new FacetsCollector();\n\n    // MatchAllDocsQuery is for \"browsing\" (counts facets\n    // for all non-deleted docs in the index); normally\n    // you'd use a \"normal\" query:\n    FacetsCollector.search(searcher, new MatchAllDocsQuery(), 10, fc);\n\n    // Retrieve results\n    List<FacetResult> results = new ArrayList<FacetResult>();\n\n    // Count both \"Publish Date\" and \"Author\" dimensions\n    Facets facets = new FastTaxonomyFacetCounts(taxoReader, config, fc);\n    results.add(facets.getTopChildren(10, \"Author\"));\n    results.add(facets.getTopChildren(10, \"Publish Date\"));\n    \n    indexReader.close();\n    taxoReader.close();\n    \n    return results;\n  }\n\n","sourceOld":"  /** User runs a query and counts facets. */\n  private List<FacetResult> search() throws IOException {\n    DirectoryReader indexReader = DirectoryReader.open(indexDir);\n    IndexSearcher searcher = new IndexSearcher(indexReader);\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoDir);\n    FacetsConfig config = getConfig(null);\n\n    FacetsCollector fc = new FacetsCollector();\n\n    // MatchAllDocsQuery is for \"browsing\" (counts facets\n    // for all non-deleted docs in the index); normally\n    // you'd use a \"normal\" query:\n    Facets.search(searcher, new MatchAllDocsQuery(), 10, fc);\n\n    // Retrieve results\n    List<FacetResult> results = new ArrayList<FacetResult>();\n\n    // Count both \"Publish Date\" and \"Author\" dimensions\n    Facets facets = new FastTaxonomyFacetCounts(taxoReader, config, fc);\n    results.add(facets.getTopChildren(10, \"Author\"));\n    results.add(facets.getTopChildren(10, \"Publish Date\"));\n    \n    indexReader.close();\n    taxoReader.close();\n    \n    return results;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/demo/src/java/org/apache/lucene/demo/facet/SimpleFacetsExample#search().mjava","pathOld":"lucene/demo/src/java/org/apache/lucene/demo/facet/SimpleFacetsExample#search().mjava","sourceNew":"  /** User runs a query and counts facets. */\n  private List<FacetResult> search() throws IOException {\n    DirectoryReader indexReader = DirectoryReader.open(indexDir);\n    IndexSearcher searcher = new IndexSearcher(indexReader);\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoDir);\n\n    FacetsCollector fc = new FacetsCollector();\n\n    // MatchAllDocsQuery is for \"browsing\" (counts facets\n    // for all non-deleted docs in the index); normally\n    // you'd use a \"normal\" query:\n    FacetsCollector.search(searcher, new MatchAllDocsQuery(), 10, fc);\n\n    // Retrieve results\n    List<FacetResult> results = new ArrayList<FacetResult>();\n\n    // Count both \"Publish Date\" and \"Author\" dimensions\n    Facets facets = new FastTaxonomyFacetCounts(taxoReader, config, fc);\n    results.add(facets.getTopChildren(10, \"Author\"));\n    results.add(facets.getTopChildren(10, \"Publish Date\"));\n    \n    indexReader.close();\n    taxoReader.close();\n    \n    return results;\n  }\n\n","sourceOld":"  /** User runs a query and counts facets. */\n  private List<FacetResult> search() throws IOException {\n    DirectoryReader indexReader = DirectoryReader.open(indexDir);\n    IndexSearcher searcher = new IndexSearcher(indexReader);\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoDir);\n\n    // Count both \"Publish Date\" and \"Author\" dimensions\n    FacetSearchParams fsp = new FacetSearchParams(\n        new CountFacetRequest(new CategoryPath(\"Publish Date\"), 10), \n        new CountFacetRequest(new CategoryPath(\"Author\"), 10));\n\n    // Aggregates the facet counts\n    FacetsCollector fc = FacetsCollector.create(fsp, searcher.getIndexReader(), taxoReader);\n\n    // MatchAllDocsQuery is for \"browsing\" (counts facets\n    // for all non-deleted docs in the index); normally\n    // you'd use a \"normal\" query, and use MultiCollector to\n    // wrap collecting the \"normal\" hits and also facets:\n    searcher.search(new MatchAllDocsQuery(), fc);\n\n    // Retrieve results\n    List<FacetResult> facetResults = fc.getFacetResults();\n    \n    indexReader.close();\n    taxoReader.close();\n    \n    return facetResults;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"78d1c57f76cd5ff6b4c057e9f13ee970df7498ef","date":1393760562,"type":6,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/demo/src/java/org/apache/lucene/demo/facet/SimpleFacetsExample#facetsOnly().mjava","pathOld":"lucene/demo/src/java/org/apache/lucene/demo/facet/SimpleFacetsExample#search().mjava","sourceNew":"  /** User runs a query and counts facets only without collecting the matching documents.*/\n  private List<FacetResult> facetsOnly() throws IOException {\n    DirectoryReader indexReader = DirectoryReader.open(indexDir);\n    IndexSearcher searcher = new IndexSearcher(indexReader);\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoDir);\n\n    FacetsCollector fc = new FacetsCollector();\n\n    // MatchAllDocsQuery is for \"browsing\" (counts facets\n    // for all non-deleted docs in the index); normally\n    // you'd use a \"normal\" query:\n    searcher.search(new MatchAllDocsQuery(), null /*Filter */, fc);\n\n    // Retrieve results\n    List<FacetResult> results = new ArrayList<FacetResult>();\n\n    // Count both \"Publish Date\" and \"Author\" dimensions\n    Facets facets = new FastTaxonomyFacetCounts(taxoReader, config, fc);\n   \n    results.add(facets.getTopChildren(10, \"Author\"));\n    results.add(facets.getTopChildren(10, \"Publish Date\"));\n    \n    indexReader.close();\n    taxoReader.close();\n    \n    return results;\n  }\n\n","sourceOld":"  /** User runs a query and counts facets. */\n  private List<FacetResult> search() throws IOException {\n    DirectoryReader indexReader = DirectoryReader.open(indexDir);\n    IndexSearcher searcher = new IndexSearcher(indexReader);\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoDir);\n\n    FacetsCollector fc = new FacetsCollector();\n\n    // MatchAllDocsQuery is for \"browsing\" (counts facets\n    // for all non-deleted docs in the index); normally\n    // you'd use a \"normal\" query:\n    FacetsCollector.search(searcher, new MatchAllDocsQuery(), 10, fc);\n\n    // Retrieve results\n    List<FacetResult> results = new ArrayList<FacetResult>();\n\n    // Count both \"Publish Date\" and \"Author\" dimensions\n    Facets facets = new FastTaxonomyFacetCounts(taxoReader, config, fc);\n    results.add(facets.getTopChildren(10, \"Author\"));\n    results.add(facets.getTopChildren(10, \"Publish Date\"));\n    \n    indexReader.close();\n    taxoReader.close();\n    \n    return results;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"78d1c57f76cd5ff6b4c057e9f13ee970df7498ef","date":1393760562,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/demo/src/java/org/apache/lucene/demo/facet/SimpleFacetsExample#facetsWithSearch().mjava","pathOld":"lucene/demo/src/java/org/apache/lucene/demo/facet/SimpleFacetsExample#search().mjava","sourceNew":"  /** User runs a query and counts facets. */\n  private List<FacetResult> facetsWithSearch() throws IOException {\n    DirectoryReader indexReader = DirectoryReader.open(indexDir);\n    IndexSearcher searcher = new IndexSearcher(indexReader);\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoDir);\n\n    FacetsCollector fc = new FacetsCollector();\n\n    // MatchAllDocsQuery is for \"browsing\" (counts facets\n    // for all non-deleted docs in the index); normally\n    // you'd use a \"normal\" query:\n    FacetsCollector.search(searcher, new MatchAllDocsQuery(), 10, fc);\n\n    // Retrieve results\n    List<FacetResult> results = new ArrayList<FacetResult>();\n\n    // Count both \"Publish Date\" and \"Author\" dimensions\n    Facets facets = new FastTaxonomyFacetCounts(taxoReader, config, fc);\n    results.add(facets.getTopChildren(10, \"Author\"));\n    results.add(facets.getTopChildren(10, \"Publish Date\"));\n    \n    indexReader.close();\n    taxoReader.close();\n    \n    return results;\n  }\n\n","sourceOld":"  /** User runs a query and counts facets. */\n  private List<FacetResult> search() throws IOException {\n    DirectoryReader indexReader = DirectoryReader.open(indexDir);\n    IndexSearcher searcher = new IndexSearcher(indexReader);\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoDir);\n\n    FacetsCollector fc = new FacetsCollector();\n\n    // MatchAllDocsQuery is for \"browsing\" (counts facets\n    // for all non-deleted docs in the index); normally\n    // you'd use a \"normal\" query:\n    FacetsCollector.search(searcher, new MatchAllDocsQuery(), 10, fc);\n\n    // Retrieve results\n    List<FacetResult> results = new ArrayList<FacetResult>();\n\n    // Count both \"Publish Date\" and \"Author\" dimensions\n    Facets facets = new FastTaxonomyFacetCounts(taxoReader, config, fc);\n    results.add(facets.getTopChildren(10, \"Author\"));\n    results.add(facets.getTopChildren(10, \"Publish Date\"));\n    \n    indexReader.close();\n    taxoReader.close();\n    \n    return results;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1b8829c66b19d8c6b7eedbb88f69c8ce1f53311d":["31703f98041a9e7086254ed134d8f91c22ac933f"],"31703f98041a9e7086254ed134d8f91c22ac933f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"21d36d0db865f7b84026b447bec653469a6e66df":["d899affd3c008feba40d1405b7a38972ce2005b4"],"d899affd3c008feba40d1405b7a38972ce2005b4":["c190847801a50f4dd20fd639bdc29b54ea3b288b"],"fd83550e4b0bdd36e7d9dca9273264100782440b":["78522aad83283ca58fae08fd89406b65429d0229"],"78522aad83283ca58fae08fd89406b65429d0229":["21d36d0db865f7b84026b447bec653469a6e66df"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["1b8829c66b19d8c6b7eedbb88f69c8ce1f53311d","fd83550e4b0bdd36e7d9dca9273264100782440b"],"78d1c57f76cd5ff6b4c057e9f13ee970df7498ef":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["78d1c57f76cd5ff6b4c057e9f13ee970df7498ef"],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["1b8829c66b19d8c6b7eedbb88f69c8ce1f53311d"]},"commit2Childs":{"1b8829c66b19d8c6b7eedbb88f69c8ce1f53311d":["3cc728b07df73b197e6d940d27f9b08b63918f13","c190847801a50f4dd20fd639bdc29b54ea3b288b"],"31703f98041a9e7086254ed134d8f91c22ac933f":["1b8829c66b19d8c6b7eedbb88f69c8ce1f53311d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["31703f98041a9e7086254ed134d8f91c22ac933f"],"21d36d0db865f7b84026b447bec653469a6e66df":["78522aad83283ca58fae08fd89406b65429d0229"],"d899affd3c008feba40d1405b7a38972ce2005b4":["21d36d0db865f7b84026b447bec653469a6e66df"],"fd83550e4b0bdd36e7d9dca9273264100782440b":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"78522aad83283ca58fae08fd89406b65429d0229":["fd83550e4b0bdd36e7d9dca9273264100782440b"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["78d1c57f76cd5ff6b4c057e9f13ee970df7498ef"],"78d1c57f76cd5ff6b4c057e9f13ee970df7498ef":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["d899affd3c008feba40d1405b7a38972ce2005b4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}