{"path":"src/test/org/apache/lucene/analysis/TestCharArraySet#testEmptySet().mjava","commits":[{"id":"5f1a47d4171a315b5fa2a9146a6048dc8a2cfeae","date":1264405705,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"src/test/org/apache/lucene/analysis/TestCharArraySet#testEmptySet().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Smoketests the static empty set\n   */\n  public void testEmptySet() {\n    assertEquals(0, CharArraySet.EMPTY_SET.size());\n    \n    assertTrue(CharArraySet.EMPTY_SET.isEmpty());\n    for (String stopword : TEST_STOP_WORDS) {\n      assertFalse(CharArraySet.EMPTY_SET.contains(stopword));\n    }\n    assertFalse(CharArraySet.EMPTY_SET.contains((Object) \"foo\"));\n    assertFalse(CharArraySet.EMPTY_SET.contains((Object) \"foo\".toCharArray()));\n    assertFalse(CharArraySet.EMPTY_SET.contains(\"foo\".toCharArray(),0,3));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a","date":1267298041,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/analysis/TestCharArraySet#testEmptySet().mjava","pathOld":"src/test/org/apache/lucene/analysis/TestCharArraySet#testEmptySet().mjava","sourceNew":"  /**\n   * Smoketests the static empty set\n   */\n  public void testEmptySet() {\n    assertEquals(0, CharArraySet.EMPTY_SET.size());\n    \n    assertTrue(CharArraySet.EMPTY_SET.isEmpty());\n    for (String stopword : TEST_STOP_WORDS) {\n      assertFalse(CharArraySet.EMPTY_SET.contains(stopword));\n    }\n    assertFalse(CharArraySet.EMPTY_SET.contains(\"foo\"));\n    assertFalse(CharArraySet.EMPTY_SET.contains((Object) \"foo\"));\n    assertFalse(CharArraySet.EMPTY_SET.contains(\"foo\".toCharArray()));\n    assertFalse(CharArraySet.EMPTY_SET.contains(\"foo\".toCharArray(),0,3));\n  }\n\n","sourceOld":"  /**\n   * Smoketests the static empty set\n   */\n  public void testEmptySet() {\n    assertEquals(0, CharArraySet.EMPTY_SET.size());\n    \n    assertTrue(CharArraySet.EMPTY_SET.isEmpty());\n    for (String stopword : TEST_STOP_WORDS) {\n      assertFalse(CharArraySet.EMPTY_SET.contains(stopword));\n    }\n    assertFalse(CharArraySet.EMPTY_SET.contains((Object) \"foo\"));\n    assertFalse(CharArraySet.EMPTY_SET.contains((Object) \"foo\".toCharArray()));\n    assertFalse(CharArraySet.EMPTY_SET.contains(\"foo\".toCharArray(),0,3));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/analysis/TestCharArraySet#testEmptySet().mjava","pathOld":"src/test/org/apache/lucene/analysis/TestCharArraySet#testEmptySet().mjava","sourceNew":"  /**\n   * Smoketests the static empty set\n   */\n  public void testEmptySet() {\n    assertEquals(0, CharArraySet.EMPTY_SET.size());\n    \n    assertTrue(CharArraySet.EMPTY_SET.isEmpty());\n    for (String stopword : TEST_STOP_WORDS) {\n      assertFalse(CharArraySet.EMPTY_SET.contains(stopword));\n    }\n    assertFalse(CharArraySet.EMPTY_SET.contains(\"foo\"));\n    assertFalse(CharArraySet.EMPTY_SET.contains((Object) \"foo\"));\n    assertFalse(CharArraySet.EMPTY_SET.contains(\"foo\".toCharArray()));\n    assertFalse(CharArraySet.EMPTY_SET.contains(\"foo\".toCharArray(),0,3));\n  }\n\n","sourceOld":"  /**\n   * Smoketests the static empty set\n   */\n  public void testEmptySet() {\n    assertEquals(0, CharArraySet.EMPTY_SET.size());\n    \n    assertTrue(CharArraySet.EMPTY_SET.isEmpty());\n    for (String stopword : TEST_STOP_WORDS) {\n      assertFalse(CharArraySet.EMPTY_SET.contains(stopword));\n    }\n    assertFalse(CharArraySet.EMPTY_SET.contains(\"foo\"));\n    assertFalse(CharArraySet.EMPTY_SET.contains((Object) \"foo\"));\n    assertFalse(CharArraySet.EMPTY_SET.contains(\"foo\".toCharArray()));\n    assertFalse(CharArraySet.EMPTY_SET.contains(\"foo\".toCharArray(),0,3));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5f1a47d4171a315b5fa2a9146a6048dc8a2cfeae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["5f1a47d4171a315b5fa2a9146a6048dc8a2cfeae"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5f1a47d4171a315b5fa2a9146a6048dc8a2cfeae"],"5f1a47d4171a315b5fa2a9146a6048dc8a2cfeae":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}