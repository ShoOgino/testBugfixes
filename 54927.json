{"path":"solr/core/src/java/org/apache/solr/handler/component/PivotFacetHelper#process(String[]).mjava","commits":[{"id":"7a2ba67a463f52915e77a5fd8714aa7d36faf59c","date":1348538193,"type":1,"author":"David Wayne Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/PivotFacetHelper#process(String[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/PivotFacetHelper#process(ResponseBuilder,SolrParams,String[]).mjava","sourceNew":"  public SimpleOrderedMap<List<NamedList<Object>>> process(String[] pivots) throws IOException {\n    if (!rb.doFacets || pivots == null) \n      return null;\n\n    SimpleOrderedMap<List<NamedList<Object>>> pivotResponse = new SimpleOrderedMap<List<NamedList<Object>>>();\n    for (String pivot : pivots) {\n      //ex: pivot == \"features,cat\" or even \"{!ex=mytag}features,cat\"\n      try {\n        this.parseParams(FacetParams.FACET_PIVOT, pivot);\n      } catch (ParseException e) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, e);\n      }\n      pivot = facetValue;//facetValue potentially modified from parseParams()\n\n      String[] fields = pivot.split(\",\");\n\n      if( fields.length < 2 ) {\n        throw new SolrException( ErrorCode.BAD_REQUEST,\n            \"Pivot Facet needs at least two fields: \"+pivot );\n      }\n\n      String field = fields[0];\n      String subField = fields[1];\n      Deque<String> fnames = new LinkedList<String>();\n      for( int i=fields.length-1; i>1; i-- ) {\n        fnames.push( fields[i] );\n      }\n\n      NamedList<Integer> superFacets = this.getTermCounts(field);\n\n      //super.key usually == pivot unless local-param 'key' used\n      pivotResponse.add(key, doPivots(superFacets, field, subField, fnames, docs));\n    }\n    return pivotResponse;\n  }\n\n","sourceOld":"  public SimpleOrderedMap<List<NamedList<Object>>> process(ResponseBuilder rb, SolrParams params, String[] pivots) throws IOException {\n    if (!rb.doFacets || pivots == null) \n      return null;\n    \n    int minMatch = params.getInt( FacetParams.FACET_PIVOT_MINCOUNT, 1 );\n    \n    SimpleOrderedMap<List<NamedList<Object>>> pivotResponse = new SimpleOrderedMap<List<NamedList<Object>>>();\n    for (String pivot : pivots) {\n      String[] fields = pivot.split(\",\");  // only support two levels for now\n      \n      if( fields.length < 2 ) {\n        throw new SolrException( ErrorCode.BAD_REQUEST, \n            \"Pivot Facet needs at least two fields: \"+pivot );\n      }\n      \n      DocSet docs = rb.getResults().docSet;\n      String field = fields[0];\n      String subField = fields[1];\n      Deque<String> fnames = new LinkedList<String>();\n      for( int i=fields.length-1; i>1; i-- ) {\n        fnames.push( fields[i] );\n      }\n      \n      SimpleFacets sf = getFacetImplementation(rb.req, rb.getResults().docSet, rb.req.getParams());\n      NamedList<Integer> superFacets = sf.getTermCounts(field);\n      \n      pivotResponse.add(pivot, doPivots(superFacets, field, subField, fnames, rb, docs, minMatch));\n    }\n    return pivotResponse;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cdb67100dc016748799a77218aa409478372d79","date":1353699950,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/PivotFacetHelper#process(String[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/PivotFacetHelper#process(String[]).mjava","sourceNew":"  public SimpleOrderedMap<List<NamedList<Object>>> process(String[] pivots) throws IOException {\n    if (!rb.doFacets || pivots == null) \n      return null;\n\n    SimpleOrderedMap<List<NamedList<Object>>> pivotResponse = new SimpleOrderedMap<List<NamedList<Object>>>();\n    for (String pivot : pivots) {\n      //ex: pivot == \"features,cat\" or even \"{!ex=mytag}features,cat\"\n      try {\n        this.parseParams(FacetParams.FACET_PIVOT, pivot);\n      } catch (SyntaxError e) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, e);\n      }\n      pivot = facetValue;//facetValue potentially modified from parseParams()\n\n      String[] fields = pivot.split(\",\");\n\n      if( fields.length < 2 ) {\n        throw new SolrException( ErrorCode.BAD_REQUEST,\n            \"Pivot Facet needs at least two fields: \"+pivot );\n      }\n\n      String field = fields[0];\n      String subField = fields[1];\n      Deque<String> fnames = new LinkedList<String>();\n      for( int i=fields.length-1; i>1; i-- ) {\n        fnames.push( fields[i] );\n      }\n\n      NamedList<Integer> superFacets = this.getTermCounts(field);\n\n      //super.key usually == pivot unless local-param 'key' used\n      pivotResponse.add(key, doPivots(superFacets, field, subField, fnames, docs));\n    }\n    return pivotResponse;\n  }\n\n","sourceOld":"  public SimpleOrderedMap<List<NamedList<Object>>> process(String[] pivots) throws IOException {\n    if (!rb.doFacets || pivots == null) \n      return null;\n\n    SimpleOrderedMap<List<NamedList<Object>>> pivotResponse = new SimpleOrderedMap<List<NamedList<Object>>>();\n    for (String pivot : pivots) {\n      //ex: pivot == \"features,cat\" or even \"{!ex=mytag}features,cat\"\n      try {\n        this.parseParams(FacetParams.FACET_PIVOT, pivot);\n      } catch (ParseException e) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, e);\n      }\n      pivot = facetValue;//facetValue potentially modified from parseParams()\n\n      String[] fields = pivot.split(\",\");\n\n      if( fields.length < 2 ) {\n        throw new SolrException( ErrorCode.BAD_REQUEST,\n            \"Pivot Facet needs at least two fields: \"+pivot );\n      }\n\n      String field = fields[0];\n      String subField = fields[1];\n      Deque<String> fnames = new LinkedList<String>();\n      for( int i=fields.length-1; i>1; i-- ) {\n        fnames.push( fields[i] );\n      }\n\n      NamedList<Integer> superFacets = this.getTermCounts(field);\n\n      //super.key usually == pivot unless local-param 'key' used\n      pivotResponse.add(key, doPivots(superFacets, field, subField, fnames, docs));\n    }\n    return pivotResponse;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/PivotFacetHelper#process(String[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/PivotFacetHelper#process(String[]).mjava","sourceNew":"  public SimpleOrderedMap<List<NamedList<Object>>> process(String[] pivots) throws IOException {\n    if (!rb.doFacets || pivots == null) \n      return null;\n\n    SimpleOrderedMap<List<NamedList<Object>>> pivotResponse = new SimpleOrderedMap<List<NamedList<Object>>>();\n    for (String pivot : pivots) {\n      //ex: pivot == \"features,cat\" or even \"{!ex=mytag}features,cat\"\n      try {\n        this.parseParams(FacetParams.FACET_PIVOT, pivot);\n      } catch (SyntaxError e) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, e);\n      }\n      pivot = facetValue;//facetValue potentially modified from parseParams()\n\n      String[] fields = pivot.split(\",\");\n\n      if( fields.length < 2 ) {\n        throw new SolrException( ErrorCode.BAD_REQUEST,\n            \"Pivot Facet needs at least two fields: \"+pivot );\n      }\n\n      String field = fields[0];\n      String subField = fields[1];\n      Deque<String> fnames = new LinkedList<String>();\n      for( int i=fields.length-1; i>1; i-- ) {\n        fnames.push( fields[i] );\n      }\n\n      NamedList<Integer> superFacets = this.getTermCounts(field);\n\n      //super.key usually == pivot unless local-param 'key' used\n      pivotResponse.add(key, doPivots(superFacets, field, subField, fnames, docs));\n    }\n    return pivotResponse;\n  }\n\n","sourceOld":"  public SimpleOrderedMap<List<NamedList<Object>>> process(String[] pivots) throws IOException {\n    if (!rb.doFacets || pivots == null) \n      return null;\n\n    SimpleOrderedMap<List<NamedList<Object>>> pivotResponse = new SimpleOrderedMap<List<NamedList<Object>>>();\n    for (String pivot : pivots) {\n      //ex: pivot == \"features,cat\" or even \"{!ex=mytag}features,cat\"\n      try {\n        this.parseParams(FacetParams.FACET_PIVOT, pivot);\n      } catch (ParseException e) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, e);\n      }\n      pivot = facetValue;//facetValue potentially modified from parseParams()\n\n      String[] fields = pivot.split(\",\");\n\n      if( fields.length < 2 ) {\n        throw new SolrException( ErrorCode.BAD_REQUEST,\n            \"Pivot Facet needs at least two fields: \"+pivot );\n      }\n\n      String field = fields[0];\n      String subField = fields[1];\n      Deque<String> fnames = new LinkedList<String>();\n      for( int i=fields.length-1; i>1; i-- ) {\n        fnames.push( fields[i] );\n      }\n\n      NamedList<Integer> superFacets = this.getTermCounts(field);\n\n      //super.key usually == pivot unless local-param 'key' used\n      pivotResponse.add(key, doPivots(superFacets, field, subField, fnames, docs));\n    }\n    return pivotResponse;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/PivotFacetHelper#process(String[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/PivotFacetHelper#process(String[]).mjava","sourceNew":"  public SimpleOrderedMap<List<NamedList<Object>>> process(String[] pivots) throws IOException {\n    if (!rb.doFacets || pivots == null) \n      return null;\n\n    SimpleOrderedMap<List<NamedList<Object>>> pivotResponse = new SimpleOrderedMap<>();\n    for (String pivot : pivots) {\n      //ex: pivot == \"features,cat\" or even \"{!ex=mytag}features,cat\"\n      try {\n        this.parseParams(FacetParams.FACET_PIVOT, pivot);\n      } catch (SyntaxError e) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, e);\n      }\n      pivot = facetValue;//facetValue potentially modified from parseParams()\n\n      String[] fields = pivot.split(\",\");\n\n      if( fields.length < 2 ) {\n        throw new SolrException( ErrorCode.BAD_REQUEST,\n            \"Pivot Facet needs at least two fields: \"+pivot );\n      }\n\n      String field = fields[0];\n      String subField = fields[1];\n      Deque<String> fnames = new LinkedList<>();\n      for( int i=fields.length-1; i>1; i-- ) {\n        fnames.push( fields[i] );\n      }\n\n      NamedList<Integer> superFacets = this.getTermCounts(field);\n\n      //super.key usually == pivot unless local-param 'key' used\n      pivotResponse.add(key, doPivots(superFacets, field, subField, fnames, docs));\n    }\n    return pivotResponse;\n  }\n\n","sourceOld":"  public SimpleOrderedMap<List<NamedList<Object>>> process(String[] pivots) throws IOException {\n    if (!rb.doFacets || pivots == null) \n      return null;\n\n    SimpleOrderedMap<List<NamedList<Object>>> pivotResponse = new SimpleOrderedMap<List<NamedList<Object>>>();\n    for (String pivot : pivots) {\n      //ex: pivot == \"features,cat\" or even \"{!ex=mytag}features,cat\"\n      try {\n        this.parseParams(FacetParams.FACET_PIVOT, pivot);\n      } catch (SyntaxError e) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, e);\n      }\n      pivot = facetValue;//facetValue potentially modified from parseParams()\n\n      String[] fields = pivot.split(\",\");\n\n      if( fields.length < 2 ) {\n        throw new SolrException( ErrorCode.BAD_REQUEST,\n            \"Pivot Facet needs at least two fields: \"+pivot );\n      }\n\n      String field = fields[0];\n      String subField = fields[1];\n      Deque<String> fnames = new LinkedList<String>();\n      for( int i=fields.length-1; i>1; i-- ) {\n        fnames.push( fields[i] );\n      }\n\n      NamedList<Integer> superFacets = this.getTermCounts(field);\n\n      //super.key usually == pivot unless local-param 'key' used\n      pivotResponse.add(key, doPivots(superFacets, field, subField, fnames, docs));\n    }\n    return pivotResponse;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"92751ba9273251eab6a2e379ec42a1697a32ff96","date":1407954233,"type":4,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/handler/component/PivotFacetHelper#process(String[]).mjava","sourceNew":null,"sourceOld":"  public SimpleOrderedMap<List<NamedList<Object>>> process(String[] pivots) throws IOException {\n    if (!rb.doFacets || pivots == null) \n      return null;\n\n    SimpleOrderedMap<List<NamedList<Object>>> pivotResponse = new SimpleOrderedMap<>();\n    for (String pivot : pivots) {\n      //ex: pivot == \"features,cat\" or even \"{!ex=mytag}features,cat\"\n      try {\n        this.parseParams(FacetParams.FACET_PIVOT, pivot);\n      } catch (SyntaxError e) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, e);\n      }\n      pivot = facetValue;//facetValue potentially modified from parseParams()\n\n      String[] fields = pivot.split(\",\");\n\n      if( fields.length < 2 ) {\n        throw new SolrException( ErrorCode.BAD_REQUEST,\n            \"Pivot Facet needs at least two fields: \"+pivot );\n      }\n\n      String field = fields[0];\n      String subField = fields[1];\n      Deque<String> fnames = new LinkedList<>();\n      for( int i=fields.length-1; i>1; i-- ) {\n        fnames.push( fields[i] );\n      }\n\n      NamedList<Integer> superFacets = this.getTermCounts(field);\n\n      //super.key usually == pivot unless local-param 'key' used\n      pivotResponse.add(key, doPivots(superFacets, field, subField, fnames, docs));\n    }\n    return pivotResponse;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["3cdb67100dc016748799a77218aa409478372d79"],"92751ba9273251eab6a2e379ec42a1697a32ff96":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"3cdb67100dc016748799a77218aa409478372d79":["7a2ba67a463f52915e77a5fd8714aa7d36faf59c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["7a2ba67a463f52915e77a5fd8714aa7d36faf59c","3cdb67100dc016748799a77218aa409478372d79"],"7a2ba67a463f52915e77a5fd8714aa7d36faf59c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["92751ba9273251eab6a2e379ec42a1697a32ff96"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["92751ba9273251eab6a2e379ec42a1697a32ff96"],"92751ba9273251eab6a2e379ec42a1697a32ff96":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb67100dc016748799a77218aa409478372d79":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","407687e67faf6e1f02a211ca078d8e3eed631027"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7a2ba67a463f52915e77a5fd8714aa7d36faf59c"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"7a2ba67a463f52915e77a5fd8714aa7d36faf59c":["3cdb67100dc016748799a77218aa409478372d79","407687e67faf6e1f02a211ca078d8e3eed631027"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["407687e67faf6e1f02a211ca078d8e3eed631027","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}