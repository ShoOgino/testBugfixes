{"path":"lucene/core/src/java/org/apache/lucene/util/AttributeSource#cloneAttributes().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/AttributeSource#cloneAttributes().mjava","pathOld":"lucene/src/java/org/apache/lucene/util/AttributeSource#cloneAttributes().mjava","sourceNew":"  /**\n   * Performs a clone of all {@link AttributeImpl} instances returned in a new\n   * {@code AttributeSource} instance. This method can be used to e.g. create another TokenStream\n   * with exactly the same attributes (using {@link #AttributeSource(AttributeSource)}).\n   * You can also use it as a (non-performant) replacement for {@link #captureState}, if you need to look\n   * into / modify the captured state.\n   */\n  public final AttributeSource cloneAttributes() {\n    final AttributeSource clone = new AttributeSource(this.factory);\n    \n    if (hasAttributes()) {\n      // first clone the impls\n      for (State state = getCurrentState(); state != null; state = state.next) {\n        clone.attributeImpls.put(state.attribute.getClass(), (AttributeImpl) state.attribute.clone());\n      }\n      \n      // now the interfaces\n      for (Entry<Class<? extends Attribute>, AttributeImpl> entry : this.attributes.entrySet()) {\n        clone.attributes.put(entry.getKey(), clone.attributeImpls.get(entry.getValue().getClass()));\n      }\n    }\n    \n    return clone;\n  }\n\n","sourceOld":"  /**\n   * Performs a clone of all {@link AttributeImpl} instances returned in a new\n   * {@code AttributeSource} instance. This method can be used to e.g. create another TokenStream\n   * with exactly the same attributes (using {@link #AttributeSource(AttributeSource)}).\n   * You can also use it as a (non-performant) replacement for {@link #captureState}, if you need to look\n   * into / modify the captured state.\n   */\n  public final AttributeSource cloneAttributes() {\n    final AttributeSource clone = new AttributeSource(this.factory);\n    \n    if (hasAttributes()) {\n      // first clone the impls\n      for (State state = getCurrentState(); state != null; state = state.next) {\n        clone.attributeImpls.put(state.attribute.getClass(), (AttributeImpl) state.attribute.clone());\n      }\n      \n      // now the interfaces\n      for (Entry<Class<? extends Attribute>, AttributeImpl> entry : this.attributes.entrySet()) {\n        clone.attributes.put(entry.getKey(), clone.attributeImpls.get(entry.getValue().getClass()));\n      }\n    }\n    \n    return clone;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"399d5903979ca52514d2bc7e3a362e1c45885c94","date":1333042474,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/AttributeSource#cloneAttributes().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/AttributeSource#cloneAttributes().mjava","sourceNew":"  /**\n   * Performs a clone of all {@link AttributeImpl} instances returned in a new\n   * {@code AttributeSource} instance. This method can be used to e.g. create another TokenStream\n   * with exactly the same attributes (using {@link #AttributeSource(AttributeSource)}).\n   * You can also use it as a (non-performant) replacement for {@link #captureState}, if you need to look\n   * into / modify the captured state.\n   */\n  public final AttributeSource cloneAttributes() {\n    final AttributeSource clone = new AttributeSource(this.factory);\n    \n    if (hasAttributes()) {\n      // first clone the impls\n      for (State state = getCurrentState(); state != null; state = state.next) {\n        clone.attributeImpls.put(state.attribute.getClass(), state.attribute.clone());\n      }\n      \n      // now the interfaces\n      for (Entry<Class<? extends Attribute>, AttributeImpl> entry : this.attributes.entrySet()) {\n        clone.attributes.put(entry.getKey(), clone.attributeImpls.get(entry.getValue().getClass()));\n      }\n    }\n    \n    return clone;\n  }\n\n","sourceOld":"  /**\n   * Performs a clone of all {@link AttributeImpl} instances returned in a new\n   * {@code AttributeSource} instance. This method can be used to e.g. create another TokenStream\n   * with exactly the same attributes (using {@link #AttributeSource(AttributeSource)}).\n   * You can also use it as a (non-performant) replacement for {@link #captureState}, if you need to look\n   * into / modify the captured state.\n   */\n  public final AttributeSource cloneAttributes() {\n    final AttributeSource clone = new AttributeSource(this.factory);\n    \n    if (hasAttributes()) {\n      // first clone the impls\n      for (State state = getCurrentState(); state != null; state = state.next) {\n        clone.attributeImpls.put(state.attribute.getClass(), (AttributeImpl) state.attribute.clone());\n      }\n      \n      // now the interfaces\n      for (Entry<Class<? extends Attribute>, AttributeImpl> entry : this.attributes.entrySet()) {\n        clone.attributes.put(entry.getKey(), clone.attributeImpls.get(entry.getValue().getClass()));\n      }\n    }\n    \n    return clone;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"399d5903979ca52514d2bc7e3a362e1c45885c94":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["399d5903979ca52514d2bc7e3a362e1c45885c94"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["399d5903979ca52514d2bc7e3a362e1c45885c94"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"399d5903979ca52514d2bc7e3a362e1c45885c94":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}