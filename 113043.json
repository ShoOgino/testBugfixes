{"path":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#downloadIndexFiles(boolean,Directory,Directory,long).mjava","commits":[{"id":"20f6b7cff3771384f27af0f059795d7e64aff6b9","date":1425498309,"type":1,"author":"Ramkumar Aiyengar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#downloadIndexFiles(boolean,Directory,Directory,long).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller#downloadIndexFiles(boolean,Directory,Directory,long).mjava","sourceNew":"  /**\n   * Download the index files. If a new index is needed, download all the files.\n   *\n   * @param downloadCompleteIndex is it a fresh index copy\n   * @param tmpIndexDir              the directory to which files need to be downloadeed to\n   * @param indexDir                 the indexDir to be merged to\n   * @param latestGeneration         the version number\n   */\n  private void downloadIndexFiles(boolean downloadCompleteIndex, Directory indexDir, Directory tmpIndexDir, long latestGeneration)\n      throws Exception {\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Download files to dir: \" + Arrays.asList(indexDir.listAll()));\n    }\n    for (Map<String,Object> file : filesToDownload) {\n      String filename = (String) file.get(NAME);\n      long size = (Long) file.get(SIZE);\n      CompareResult compareResult = compareFile(indexDir, filename, size, (Long) file.get(CHECKSUM));\n      if (!compareResult.equal || downloadCompleteIndex\n          || filesToAlwaysDownloadIfNoChecksums(filename, size, compareResult)) {\n        dirFileFetcher = new DirectoryFileFetcher(tmpIndexDir, file,\n            (String) file.get(NAME), false, latestGeneration);\n        currentFile = file;\n        dirFileFetcher.fetchFile();\n        filesDownloaded.add(new HashMap<>(file));\n      } else {\n        LOG.info(\"Skipping download for \" + file.get(NAME)\n            + \" because it already exists\");\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Download the index files. If a new index is needed, download all the files.\n   *\n   * @param downloadCompleteIndex is it a fresh index copy\n   * @param tmpIndexDir              the directory to which files need to be downloadeed to\n   * @param indexDir                 the indexDir to be merged to\n   * @param latestGeneration         the version number\n   */\n  private void downloadIndexFiles(boolean downloadCompleteIndex, Directory indexDir, Directory tmpIndexDir, long latestGeneration)\n      throws Exception {\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Download files to dir: \" + Arrays.asList(indexDir.listAll()));\n    }\n    for (Map<String,Object> file : filesToDownload) {\n      String filename = (String) file.get(NAME);\n      long size = (Long) file.get(SIZE);\n      CompareResult compareResult = compareFile(indexDir, filename, size, (Long) file.get(CHECKSUM));\n      if (!compareResult.equal || downloadCompleteIndex\n          || filesToAlwaysDownloadIfNoChecksums(filename, size, compareResult)) {\n        dirFileFetcher = new DirectoryFileFetcher(tmpIndexDir, file,\n            (String) file.get(NAME), false, latestGeneration);\n        currentFile = file;\n        dirFileFetcher.fetchFile();\n        filesDownloaded.add(new HashMap<>(file));\n      } else {\n        LOG.info(\"Skipping download for \" + file.get(NAME)\n            + \" because it already exists\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":1,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#downloadIndexFiles(boolean,Directory,Directory,long).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller#downloadIndexFiles(boolean,Directory,Directory,long).mjava","sourceNew":"  /**\n   * Download the index files. If a new index is needed, download all the files.\n   *\n   * @param downloadCompleteIndex is it a fresh index copy\n   * @param tmpIndexDir              the directory to which files need to be downloadeed to\n   * @param indexDir                 the indexDir to be merged to\n   * @param latestGeneration         the version number\n   */\n  private void downloadIndexFiles(boolean downloadCompleteIndex, Directory indexDir, Directory tmpIndexDir, long latestGeneration)\n      throws Exception {\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Download files to dir: \" + Arrays.asList(indexDir.listAll()));\n    }\n    for (Map<String,Object> file : filesToDownload) {\n      String filename = (String) file.get(NAME);\n      long size = (Long) file.get(SIZE);\n      CompareResult compareResult = compareFile(indexDir, filename, size, (Long) file.get(CHECKSUM));\n      if (!compareResult.equal || downloadCompleteIndex\n          || filesToAlwaysDownloadIfNoChecksums(filename, size, compareResult)) {\n        dirFileFetcher = new DirectoryFileFetcher(tmpIndexDir, file,\n            (String) file.get(NAME), false, latestGeneration);\n        currentFile = file;\n        dirFileFetcher.fetchFile();\n        filesDownloaded.add(new HashMap<>(file));\n      } else {\n        LOG.info(\"Skipping download for \" + file.get(NAME)\n            + \" because it already exists\");\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Download the index files. If a new index is needed, download all the files.\n   *\n   * @param downloadCompleteIndex is it a fresh index copy\n   * @param tmpIndexDir              the directory to which files need to be downloadeed to\n   * @param indexDir                 the indexDir to be merged to\n   * @param latestGeneration         the version number\n   */\n  private void downloadIndexFiles(boolean downloadCompleteIndex, Directory indexDir, Directory tmpIndexDir, long latestGeneration)\n      throws Exception {\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Download files to dir: \" + Arrays.asList(indexDir.listAll()));\n    }\n    for (Map<String,Object> file : filesToDownload) {\n      String filename = (String) file.get(NAME);\n      long size = (Long) file.get(SIZE);\n      CompareResult compareResult = compareFile(indexDir, filename, size, (Long) file.get(CHECKSUM));\n      if (!compareResult.equal || downloadCompleteIndex\n          || filesToAlwaysDownloadIfNoChecksums(filename, size, compareResult)) {\n        dirFileFetcher = new DirectoryFileFetcher(tmpIndexDir, file,\n            (String) file.get(NAME), false, latestGeneration);\n        currentFile = file;\n        dirFileFetcher.fetchFile();\n        filesDownloaded.add(new HashMap<>(file));\n      } else {\n        LOG.info(\"Skipping download for \" + file.get(NAME)\n            + \" because it already exists\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"86290366cefc1b9d4eced13b430858c4a4c0421d","date":1432321109,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#downloadIndexFiles(boolean,Directory,Directory,long).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#downloadIndexFiles(boolean,Directory,Directory,long).mjava","sourceNew":"  /**\n   * Download the index files. If a new index is needed, download all the files.\n   *\n   * @param downloadCompleteIndex is it a fresh index copy\n   * @param tmpIndexDir              the directory to which files need to be downloadeed to\n   * @param indexDir                 the indexDir to be merged to\n   * @param latestGeneration         the version number\n   */\n  private void downloadIndexFiles(boolean downloadCompleteIndex, Directory indexDir, Directory tmpIndexDir, long latestGeneration)\n      throws Exception {\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Download files to dir: \" + Arrays.asList(indexDir.listAll()));\n    }\n    for (Map<String,Object> file : filesToDownload) {\n      String filename = (String) file.get(NAME);\n      long size = (Long) file.get(SIZE);\n      CompareResult compareResult = compareFile(indexDir, filename, size, (Long) file.get(CHECKSUM));\n      if (!compareResult.equal || downloadCompleteIndex\n          || filesToAlwaysDownloadIfNoChecksums(filename, size, compareResult)) {\n        dirFileFetcher = new DirectoryFileFetcher(tmpIndexDir, file,\n            (String) file.get(NAME), FILE, latestGeneration);\n        currentFile = file;\n        dirFileFetcher.fetchFile();\n        filesDownloaded.add(new HashMap<>(file));\n      } else {\n        LOG.info(\"Skipping download for \" + file.get(NAME)\n            + \" because it already exists\");\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Download the index files. If a new index is needed, download all the files.\n   *\n   * @param downloadCompleteIndex is it a fresh index copy\n   * @param tmpIndexDir              the directory to which files need to be downloadeed to\n   * @param indexDir                 the indexDir to be merged to\n   * @param latestGeneration         the version number\n   */\n  private void downloadIndexFiles(boolean downloadCompleteIndex, Directory indexDir, Directory tmpIndexDir, long latestGeneration)\n      throws Exception {\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Download files to dir: \" + Arrays.asList(indexDir.listAll()));\n    }\n    for (Map<String,Object> file : filesToDownload) {\n      String filename = (String) file.get(NAME);\n      long size = (Long) file.get(SIZE);\n      CompareResult compareResult = compareFile(indexDir, filename, size, (Long) file.get(CHECKSUM));\n      if (!compareResult.equal || downloadCompleteIndex\n          || filesToAlwaysDownloadIfNoChecksums(filename, size, compareResult)) {\n        dirFileFetcher = new DirectoryFileFetcher(tmpIndexDir, file,\n            (String) file.get(NAME), false, latestGeneration);\n        currentFile = file;\n        dirFileFetcher.fetchFile();\n        filesDownloaded.add(new HashMap<>(file));\n      } else {\n        LOG.info(\"Skipping download for \" + file.get(NAME)\n            + \" because it already exists\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6ad16d9bdc03ec6adfd5d4b7b6ea14b256ce3998","date":1445881418,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#downloadIndexFiles(boolean,Directory,Directory,long).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#downloadIndexFiles(boolean,Directory,Directory,long).mjava","sourceNew":"  /**\n   * Download the index files. If a new index is needed, download all the files.\n   *\n   * @param downloadCompleteIndex is it a fresh index copy\n   * @param tmpIndexDir              the directory to which files need to be downloadeed to\n   * @param indexDir                 the indexDir to be merged to\n   * @param latestGeneration         the version number\n   *\n   * @return number of bytes downloaded\n   */\n  private long downloadIndexFiles(boolean downloadCompleteIndex, Directory indexDir, Directory tmpIndexDir, long latestGeneration)\n      throws Exception {\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Download files to dir: \" + Arrays.asList(indexDir.listAll()));\n    }\n    long bytesDownloaded = 0;\n    for (Map<String,Object> file : filesToDownload) {\n      String filename = (String) file.get(NAME);\n      long size = (Long) file.get(SIZE);\n      CompareResult compareResult = compareFile(indexDir, filename, size, (Long) file.get(CHECKSUM));\n      if (!compareResult.equal || downloadCompleteIndex\n          || filesToAlwaysDownloadIfNoChecksums(filename, size, compareResult)) {\n        dirFileFetcher = new DirectoryFileFetcher(tmpIndexDir, file,\n            (String) file.get(NAME), FILE, latestGeneration);\n        currentFile = file;\n        dirFileFetcher.fetchFile();\n        bytesDownloaded += dirFileFetcher.getBytesDownloaded();\n        filesDownloaded.add(new HashMap<>(file));\n      } else {\n        LOG.info(\"Skipping download for \" + file.get(NAME)\n            + \" because it already exists\");\n      }\n    }\n    return bytesDownloaded;\n  }\n\n","sourceOld":"  /**\n   * Download the index files. If a new index is needed, download all the files.\n   *\n   * @param downloadCompleteIndex is it a fresh index copy\n   * @param tmpIndexDir              the directory to which files need to be downloadeed to\n   * @param indexDir                 the indexDir to be merged to\n   * @param latestGeneration         the version number\n   */\n  private void downloadIndexFiles(boolean downloadCompleteIndex, Directory indexDir, Directory tmpIndexDir, long latestGeneration)\n      throws Exception {\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Download files to dir: \" + Arrays.asList(indexDir.listAll()));\n    }\n    for (Map<String,Object> file : filesToDownload) {\n      String filename = (String) file.get(NAME);\n      long size = (Long) file.get(SIZE);\n      CompareResult compareResult = compareFile(indexDir, filename, size, (Long) file.get(CHECKSUM));\n      if (!compareResult.equal || downloadCompleteIndex\n          || filesToAlwaysDownloadIfNoChecksums(filename, size, compareResult)) {\n        dirFileFetcher = new DirectoryFileFetcher(tmpIndexDir, file,\n            (String) file.get(NAME), FILE, latestGeneration);\n        currentFile = file;\n        dirFileFetcher.fetchFile();\n        filesDownloaded.add(new HashMap<>(file));\n      } else {\n        LOG.info(\"Skipping download for \" + file.get(NAME)\n            + \" because it already exists\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad28156288ac00b91352582904d97e6653205757","date":1486850922,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#downloadIndexFiles(boolean,Directory,Directory,long).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#downloadIndexFiles(boolean,Directory,Directory,long).mjava","sourceNew":"  /**\n   * Download the index files. If a new index is needed, download all the files.\n   *\n   * @param downloadCompleteIndex is it a fresh index copy\n   * @param tmpIndexDir              the directory to which files need to be downloadeed to\n   * @param indexDir                 the indexDir to be merged to\n   * @param latestGeneration         the version number\n   *\n   * @return number of bytes downloaded\n   */\n  private long downloadIndexFiles(boolean downloadCompleteIndex, Directory indexDir, Directory tmpIndexDir, long latestGeneration)\n      throws Exception {\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Download files to dir: \" + Arrays.asList(indexDir.listAll()));\n    }\n    long bytesDownloaded = 0;\n    for (Map<String,Object> file : filesToDownload) {\n      String filename = (String) file.get(NAME);\n      long size = (Long) file.get(SIZE);\n      CompareResult compareResult = compareFile(indexDir, filename, size, (Long) file.get(CHECKSUM));\n      boolean alwaysDownload = filesToAlwaysDownloadIfNoChecksums(filename, size, compareResult);\n      LOG.debug(\"Downloading file={} size={} checksum={} alwaysDownload={}\", filename, size, file.get(CHECKSUM), alwaysDownload);\n      if (!compareResult.equal || downloadCompleteIndex || alwaysDownload) {\n        dirFileFetcher = new DirectoryFileFetcher(tmpIndexDir, file,\n            (String) file.get(NAME), FILE, latestGeneration);\n        currentFile = file;\n        dirFileFetcher.fetchFile();\n        bytesDownloaded += dirFileFetcher.getBytesDownloaded();\n        filesDownloaded.add(new HashMap<>(file));\n      } else {\n        LOG.info(\"Skipping download for \" + file.get(NAME)\n            + \" because it already exists\");\n      }\n    }\n    return bytesDownloaded;\n  }\n\n","sourceOld":"  /**\n   * Download the index files. If a new index is needed, download all the files.\n   *\n   * @param downloadCompleteIndex is it a fresh index copy\n   * @param tmpIndexDir              the directory to which files need to be downloadeed to\n   * @param indexDir                 the indexDir to be merged to\n   * @param latestGeneration         the version number\n   *\n   * @return number of bytes downloaded\n   */\n  private long downloadIndexFiles(boolean downloadCompleteIndex, Directory indexDir, Directory tmpIndexDir, long latestGeneration)\n      throws Exception {\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Download files to dir: \" + Arrays.asList(indexDir.listAll()));\n    }\n    long bytesDownloaded = 0;\n    for (Map<String,Object> file : filesToDownload) {\n      String filename = (String) file.get(NAME);\n      long size = (Long) file.get(SIZE);\n      CompareResult compareResult = compareFile(indexDir, filename, size, (Long) file.get(CHECKSUM));\n      if (!compareResult.equal || downloadCompleteIndex\n          || filesToAlwaysDownloadIfNoChecksums(filename, size, compareResult)) {\n        dirFileFetcher = new DirectoryFileFetcher(tmpIndexDir, file,\n            (String) file.get(NAME), FILE, latestGeneration);\n        currentFile = file;\n        dirFileFetcher.fetchFile();\n        bytesDownloaded += dirFileFetcher.getBytesDownloaded();\n        filesDownloaded.add(new HashMap<>(file));\n      } else {\n        LOG.info(\"Skipping download for \" + file.get(NAME)\n            + \" because it already exists\");\n      }\n    }\n    return bytesDownloaded;\n  }\n\n","bugFix":["59a3dc516228da9c3062b639c3aa88a79ae9a185","8d50ba1695a40ff11a41bbfc1ad45c7bfd6a5738"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"98fea9928eee12529633d73f52989154dd3dea1f","date":1521122475,"type":5,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#downloadIndexFiles(boolean,Directory,Directory,String,String,long).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#downloadIndexFiles(boolean,Directory,Directory,long).mjava","sourceNew":"  /**\n   * Download the index files. If a new index is needed, download all the files.\n   *\n   * @param downloadCompleteIndex is it a fresh index copy\n   * @param indexDir                 the indexDir to be merged to\n   * @param tmpIndexDir              the directory to which files need to be downloaded to\n   * @param indexDirPath             the path of indexDir\n   * @param latestGeneration         the version number\n   *\n   * @return number of bytes downloaded\n   */\n  private long downloadIndexFiles(boolean downloadCompleteIndex, Directory indexDir, Directory tmpIndexDir,\n                                  String indexDirPath, String tmpIndexDirPath, long latestGeneration)\n      throws Exception {\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Download files to dir: \" + Arrays.asList(indexDir.listAll()));\n    }\n    long bytesDownloaded = 0;\n    long bytesSkippedCopying = 0;\n    boolean doDifferentialCopy = (indexDir instanceof FSDirectory ||\n        (indexDir instanceof FilterDirectory && FilterDirectory.unwrap(indexDir) instanceof FSDirectory))\n        && (tmpIndexDir instanceof FSDirectory ||\n        (tmpIndexDir instanceof FilterDirectory && FilterDirectory.unwrap(tmpIndexDir) instanceof FSDirectory));\n\n    for (Map<String,Object> file : filesToDownload) {\n      String filename = (String) file.get(NAME);\n      long size = (Long) file.get(SIZE);\n      CompareResult compareResult = compareFile(indexDir, filename, size, (Long) file.get(CHECKSUM));\n      boolean alwaysDownload = filesToAlwaysDownloadIfNoChecksums(filename, size, compareResult);\n      LOG.debug(\"Downloading file={} size={} checksum={} alwaysDownload={}\", filename, size, file.get(CHECKSUM), alwaysDownload);\n      if (!compareResult.equal || downloadCompleteIndex || alwaysDownload) {\n        if (downloadCompleteIndex && doDifferentialCopy && compareResult.equal && compareResult.checkSummed) {\n          File localFile = new File(indexDirPath, filename);\n          LOG.info(\"Don't need to download this file. Local file's path is: {}, checksum is: {}\",\n              localFile.getAbsolutePath(), file.get(CHECKSUM));\n          // A hard link here should survive the eventual directory move, and should be more space efficient as\n          // compared to a file copy. TODO: Maybe we could do a move safely here?\n          Files.createLink(new File(tmpIndexDirPath, filename).toPath(), localFile.toPath());\n          bytesSkippedCopying += localFile.length();\n        } else {\n          dirFileFetcher = new DirectoryFileFetcher(tmpIndexDir, file,\n              (String) file.get(NAME), FILE, latestGeneration);\n          currentFile = file;\n          dirFileFetcher.fetchFile();\n          bytesDownloaded += dirFileFetcher.getBytesDownloaded();\n        }\n        filesDownloaded.add(new HashMap<>(file));\n      } else {\n        LOG.info(\"Skipping download for {} because it already exists\", file.get(NAME));\n      }\n    }\n    LOG.info(\"Bytes downloaded: {}, Bytes skipped downloading: {}\", bytesDownloaded, bytesSkippedCopying);\n    return bytesDownloaded;\n  }\n\n","sourceOld":"  /**\n   * Download the index files. If a new index is needed, download all the files.\n   *\n   * @param downloadCompleteIndex is it a fresh index copy\n   * @param tmpIndexDir              the directory to which files need to be downloadeed to\n   * @param indexDir                 the indexDir to be merged to\n   * @param latestGeneration         the version number\n   *\n   * @return number of bytes downloaded\n   */\n  private long downloadIndexFiles(boolean downloadCompleteIndex, Directory indexDir, Directory tmpIndexDir, long latestGeneration)\n      throws Exception {\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Download files to dir: \" + Arrays.asList(indexDir.listAll()));\n    }\n    long bytesDownloaded = 0;\n    for (Map<String,Object> file : filesToDownload) {\n      String filename = (String) file.get(NAME);\n      long size = (Long) file.get(SIZE);\n      CompareResult compareResult = compareFile(indexDir, filename, size, (Long) file.get(CHECKSUM));\n      boolean alwaysDownload = filesToAlwaysDownloadIfNoChecksums(filename, size, compareResult);\n      LOG.debug(\"Downloading file={} size={} checksum={} alwaysDownload={}\", filename, size, file.get(CHECKSUM), alwaysDownload);\n      if (!compareResult.equal || downloadCompleteIndex || alwaysDownload) {\n        dirFileFetcher = new DirectoryFileFetcher(tmpIndexDir, file,\n            (String) file.get(NAME), FILE, latestGeneration);\n        currentFile = file;\n        dirFileFetcher.fetchFile();\n        bytesDownloaded += dirFileFetcher.getBytesDownloaded();\n        filesDownloaded.add(new HashMap<>(file));\n      } else {\n        LOG.info(\"Skipping download for \" + file.get(NAME)\n            + \" because it already exists\");\n      }\n    }\n    return bytesDownloaded;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ad28156288ac00b91352582904d97e6653205757":["6ad16d9bdc03ec6adfd5d4b7b6ea14b256ce3998"],"86290366cefc1b9d4eced13b430858c4a4c0421d":["20f6b7cff3771384f27af0f059795d7e64aff6b9"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","20f6b7cff3771384f27af0f059795d7e64aff6b9"],"20f6b7cff3771384f27af0f059795d7e64aff6b9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6ad16d9bdc03ec6adfd5d4b7b6ea14b256ce3998":["86290366cefc1b9d4eced13b430858c4a4c0421d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"98fea9928eee12529633d73f52989154dd3dea1f":["ad28156288ac00b91352582904d97e6653205757"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["98fea9928eee12529633d73f52989154dd3dea1f"]},"commit2Childs":{"ad28156288ac00b91352582904d97e6653205757":["98fea9928eee12529633d73f52989154dd3dea1f"],"86290366cefc1b9d4eced13b430858c4a4c0421d":["6ad16d9bdc03ec6adfd5d4b7b6ea14b256ce3998"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"20f6b7cff3771384f27af0f059795d7e64aff6b9":["86290366cefc1b9d4eced13b430858c4a4c0421d","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"6ad16d9bdc03ec6adfd5d4b7b6ea14b256ce3998":["ad28156288ac00b91352582904d97e6653205757"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","20f6b7cff3771384f27af0f059795d7e64aff6b9"],"98fea9928eee12529633d73f52989154dd3dea1f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}