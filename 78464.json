{"path":"src/java/org/apache/solr/core/MultiCore#getAdminCore().mjava","commits":[{"id":"58b41d4093a9662306bdc051e4b46643deff70de","date":1205090944,"type":0,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/core/MultiCore#getAdminCore().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Gets a core to handle MultiCore admin tasks (@see SolrDispatchFilter).\n   * This makes the best attempt to reuse the same opened SolrCore accross calls.\n   */\n  public SolrCore getAdminCore() {\n    SolrCore core = adminCore != null ? adminCore.get() : null;\n    if (core == null || core.isClosed()) {\n      for (CoreDescriptor descr : this.cores.values()) {\n        core = descr.getCore();\n        if (core == null || core.isClosed()) {\n          core = null;\n        } else {\n          break;\n        }\n      }\n      setAdminCore(core);\n    }\n    return core;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["c28792ff7d1774c306e16afbd44ded91a417049b"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0323fcfcacbfb8242fbf70eb58498551b2018c67","date":1206721690,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/core/MultiCore#getAdminCore().mjava","pathOld":"src/java/org/apache/solr/core/MultiCore#getAdminCore().mjava","sourceNew":"  /**\n   * Gets a core to handle MultiCore admin tasks (@see SolrDispatchFilter).\n   * This makes the best attempt to reuse the same opened SolrCore accross calls.\n   */\n  public SolrCore getAdminCore() {\n    synchronized (cores) {\n      SolrCore core = adminCore != null ? adminCore.get() : null;\n      if (core == null || core.isClosed()) {\n        for (CoreDescriptor descr : this.cores.values()) {\n          core = descr.getCore();\n          if (core == null || core.isClosed()) {\n            core = null;\n          } else {\n            break;\n          }\n        }\n        setAdminCore(core);\n      }\n      return core;\n    }\n  }\n\n","sourceOld":"  /**\n   * Gets a core to handle MultiCore admin tasks (@see SolrDispatchFilter).\n   * This makes the best attempt to reuse the same opened SolrCore accross calls.\n   */\n  public SolrCore getAdminCore() {\n    SolrCore core = adminCore != null ? adminCore.get() : null;\n    if (core == null || core.isClosed()) {\n      for (CoreDescriptor descr : this.cores.values()) {\n        core = descr.getCore();\n        if (core == null || core.isClosed()) {\n          core = null;\n        } else {\n          break;\n        }\n      }\n      setAdminCore(core);\n    }\n    return core;\n  }\n\n","bugFix":null,"bugIntro":["3dad1e1d2281e08bc645a868fad3bb824c7907d8","c28792ff7d1774c306e16afbd44ded91a417049b"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9c74b2e17824ac88cefd4b764b4b9f2c56ceeea5","date":1218639440,"type":5,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/core/CoreContainer#getAdminCore().mjava","pathOld":"src/java/org/apache/solr/core/MultiCore#getAdminCore().mjava","sourceNew":"  /**\n   * Gets a core to handle CoreContainer admin tasks (@see SolrDispatchFilter).\n   * This makes the best attempt to reuse the same opened SolrCore across calls.\n   */\n  public SolrCore getAdminCore() {\n    synchronized (cores) {\n      SolrCore core = adminCore != null ? adminCore.get() : null;\n      if (core == null || core.isClosed()) {\n        for (CoreDescriptor descr : this.cores.values()) {\n          core = descr.getCore();\n          if (core == null || core.isClosed()) {\n            core = null;\n          } else {\n            break;\n          }\n        }\n        setAdminCore(core);\n      }\n      return core;\n    }\n  }\n\n","sourceOld":"  /**\n   * Gets a core to handle MultiCore admin tasks (@see SolrDispatchFilter).\n   * This makes the best attempt to reuse the same opened SolrCore accross calls.\n   */\n  public SolrCore getAdminCore() {\n    synchronized (cores) {\n      SolrCore core = adminCore != null ? adminCore.get() : null;\n      if (core == null || core.isClosed()) {\n        for (CoreDescriptor descr : this.cores.values()) {\n          core = descr.getCore();\n          if (core == null || core.isClosed()) {\n            core = null;\n          } else {\n            break;\n          }\n        }\n        setAdminCore(core);\n      }\n      return core;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"58b41d4093a9662306bdc051e4b46643deff70de":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"9c74b2e17824ac88cefd4b764b4b9f2c56ceeea5":["0323fcfcacbfb8242fbf70eb58498551b2018c67"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0323fcfcacbfb8242fbf70eb58498551b2018c67":["58b41d4093a9662306bdc051e4b46643deff70de"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["58b41d4093a9662306bdc051e4b46643deff70de"],"58b41d4093a9662306bdc051e4b46643deff70de":["0323fcfcacbfb8242fbf70eb58498551b2018c67"],"9c74b2e17824ac88cefd4b764b4b9f2c56ceeea5":[],"0323fcfcacbfb8242fbf70eb58498551b2018c67":["9c74b2e17824ac88cefd4b764b4b9f2c56ceeea5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9c74b2e17824ac88cefd4b764b4b9f2c56ceeea5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}