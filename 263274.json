{"path":"solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrWithNodesRestartsTest#testReplicationAfterRestart().mjava","commits":[{"id":"11f21773085db637873ba6e0bcd4265b2b4c7730","date":1534756753,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrWithNodesRestartsTest#testReplicationAfterRestart().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testReplicationAfterRestart() throws Exception {\n    createCollections();\n    CdcrTestsUtil.cdcrStart(sourceSolrClient); // start CDCR\n    Thread.sleep(2000);\n\n    //index 100 docs\n    for (int i = 0; i < 100; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", \"doc_\" + i);\n      CdcrTestsUtil.index(source, \"cdcr-source\", doc);\n      sourceSolrClient.commit();\n    }\n    Thread.sleep(2000);\n\n    // verify cdcr has replicated docs\n    QueryResponse response = sourceSolrClient.query(new SolrQuery(ALL_Q));\n    assertEquals(\"source docs mismatch\", 100, response.getResults().getNumFound());\n    assertEquals(\"target docs mismatch\", 100, CdcrTestsUtil.waitForClusterToSync(100, targetSolrClient));\n    CdcrTestsUtil.assertShardInSync(\"cdcr-source\", \"shard1\", sourceSolrClient);\n\n    // restart all the source cluster nodes\n    CdcrTestsUtil.restartClusterNodes(source, \"cdcr-source\");\n    sourceSolrClient = source.getSolrClient();\n    sourceSolrClient.setDefaultCollection(\"cdcr-source\");\n\n    // verify still the docs are there\n    response = sourceSolrClient.query(new SolrQuery(ALL_Q));\n    assertEquals(\"source docs mismatch\", 100, response.getResults().getNumFound());\n    assertEquals(\"target docs mismatch\", 100, CdcrTestsUtil.waitForClusterToSync(100, targetSolrClient));\n\n    // index 100 more\n    for (int i = 100; i < 200; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", \"doc_\" + i);\n      CdcrTestsUtil.index(source, \"cdcr-source\", doc);\n      sourceSolrClient.commit();\n    }\n    Thread.sleep(2000);\n\n    // verify still the docs are there\n    response = sourceSolrClient.query(new SolrQuery(ALL_Q));\n    assertEquals(\"source docs mismatch\", 200, response.getResults().getNumFound());\n    assertEquals(\"target docs mismatch\", 200, CdcrTestsUtil.waitForClusterToSync(200, targetSolrClient));\n\n    CdcrTestsUtil.cdcrStop(sourceSolrClient);\n    CdcrTestsUtil.cdcrStop(targetSolrClient);\n\n    deleteCollections();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1","date":1598647393,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrWithNodesRestartsTest#testReplicationAfterRestart().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testReplicationAfterRestart() throws Exception {\n    createCollections();\n    CdcrTestsUtil.cdcrStart(sourceSolrClient); // start CDCR\n    Thread.sleep(2000);\n\n    //index 100 docs\n    for (int i = 0; i < 100; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", \"doc_\" + i);\n      CdcrTestsUtil.index(source, \"cdcr-source\", doc);\n      sourceSolrClient.commit();\n    }\n    Thread.sleep(2000);\n\n    // verify cdcr has replicated docs\n    QueryResponse response = sourceSolrClient.query(new SolrQuery(ALL_Q));\n    assertEquals(\"source docs mismatch\", 100, response.getResults().getNumFound());\n    assertEquals(\"target docs mismatch\", 100, CdcrTestsUtil.waitForClusterToSync(100, targetSolrClient));\n    CdcrTestsUtil.assertShardInSync(\"cdcr-source\", \"shard1\", sourceSolrClient);\n\n    // restart all the source cluster nodes\n    CdcrTestsUtil.restartClusterNodes(source, \"cdcr-source\");\n    sourceSolrClient = source.getSolrClient();\n    sourceSolrClient.setDefaultCollection(\"cdcr-source\");\n\n    // verify still the docs are there\n    response = sourceSolrClient.query(new SolrQuery(ALL_Q));\n    assertEquals(\"source docs mismatch\", 100, response.getResults().getNumFound());\n    assertEquals(\"target docs mismatch\", 100, CdcrTestsUtil.waitForClusterToSync(100, targetSolrClient));\n\n    // index 100 more\n    for (int i = 100; i < 200; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", \"doc_\" + i);\n      CdcrTestsUtil.index(source, \"cdcr-source\", doc);\n      sourceSolrClient.commit();\n    }\n    Thread.sleep(2000);\n\n    // verify still the docs are there\n    response = sourceSolrClient.query(new SolrQuery(ALL_Q));\n    assertEquals(\"source docs mismatch\", 200, response.getResults().getNumFound());\n    assertEquals(\"target docs mismatch\", 200, CdcrTestsUtil.waitForClusterToSync(200, targetSolrClient));\n\n    CdcrTestsUtil.cdcrStop(sourceSolrClient);\n    CdcrTestsUtil.cdcrStop(targetSolrClient);\n\n    deleteCollections();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1":["11f21773085db637873ba6e0bcd4265b2b4c7730"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1"],"11f21773085db637873ba6e0bcd4265b2b4c7730":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["11f21773085db637873ba6e0bcd4265b2b4c7730"],"23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"11f21773085db637873ba6e0bcd4265b2b4c7730":["23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}