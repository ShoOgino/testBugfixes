{"path":"solr/core/src/test/org/apache/solr/uninverting/TestFieldCacheSortRandom.RandomQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","commits":[{"id":"9fc47cb7b4346802411bb432f501ed0673d7119e","date":1512640179,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/uninverting/TestFieldCacheSortRandom.RandomQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","pathOld":"solr/core/src/test/org/apache/solr/uninverting/TestFieldCacheSortRandom.RandomQuery#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"    @Override\n    public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n      return new ConstantScoreWeight(this, boost) {\n        @Override\n        public Scorer scorer(LeafReaderContext context) throws IOException {\n          Random random = new Random(seed ^ context.docBase);\n          final int maxDoc = context.reader().maxDoc();\n          final NumericDocValues idSource = DocValues.getNumeric(context.reader(), \"id\");\n          assertNotNull(idSource);\n          final FixedBitSet bits = new FixedBitSet(maxDoc);\n          for(int docID=0;docID<maxDoc;docID++) {\n            if (random.nextFloat() <= density) {\n              bits.set(docID);\n              //System.out.println(\"  acc id=\" + idSource.getInt(docID) + \" docID=\" + docID);\n              assertEquals(docID, idSource.advance(docID));\n              matchValues.add(docValues.get((int) idSource.longValue()));\n            }\n          }\n\n          return new ConstantScoreScorer(this, score(), new BitSetIterator(bits, bits.approximateCardinality()));\n        }\n\n        @Override\n        public boolean isCacheable(LeafReaderContext ctx) {\n          return true;\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n      return new ConstantScoreWeight(this, boost) {\n        @Override\n        public Scorer scorer(LeafReaderContext context) throws IOException {\n          Random random = new Random(seed ^ context.docBase);\n          final int maxDoc = context.reader().maxDoc();\n          final NumericDocValues idSource = DocValues.getNumeric(context.reader(), \"id\");\n          assertNotNull(idSource);\n          final FixedBitSet bits = new FixedBitSet(maxDoc);\n          for(int docID=0;docID<maxDoc;docID++) {\n            if (random.nextFloat() <= density) {\n              bits.set(docID);\n              //System.out.println(\"  acc id=\" + idSource.getInt(docID) + \" docID=\" + docID);\n              assertEquals(docID, idSource.advance(docID));\n              matchValues.add(docValues.get((int) idSource.longValue()));\n            }\n          }\n\n          return new ConstantScoreScorer(this, score(), new BitSetIterator(bits, bits.approximateCardinality()));\n        }\n\n        @Override\n        public boolean isCacheable(LeafReaderContext ctx) {\n          return true;\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"417142ff08fda9cf0b72d5133e63097a166c6458","date":1512729693,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/uninverting/TestFieldCacheSortRandom.RandomQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","pathOld":"solr/core/src/test/org/apache/solr/uninverting/TestFieldCacheSortRandom.RandomQuery#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"    @Override\n    public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n      return new ConstantScoreWeight(this, boost) {\n        @Override\n        public Scorer scorer(LeafReaderContext context) throws IOException {\n          Random random = new Random(seed ^ context.docBase);\n          final int maxDoc = context.reader().maxDoc();\n          final NumericDocValues idSource = DocValues.getNumeric(context.reader(), \"id\");\n          assertNotNull(idSource);\n          final FixedBitSet bits = new FixedBitSet(maxDoc);\n          for(int docID=0;docID<maxDoc;docID++) {\n            if (random.nextFloat() <= density) {\n              bits.set(docID);\n              //System.out.println(\"  acc id=\" + idSource.getInt(docID) + \" docID=\" + docID);\n              assertEquals(docID, idSource.advance(docID));\n              matchValues.add(docValues.get((int) idSource.longValue()));\n            }\n          }\n\n          return new ConstantScoreScorer(this, score(), new BitSetIterator(bits, bits.approximateCardinality()));\n        }\n\n        @Override\n        public boolean isCacheable(LeafReaderContext ctx) {\n          return true;\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n      return new ConstantScoreWeight(this, boost) {\n        @Override\n        public Scorer scorer(LeafReaderContext context) throws IOException {\n          Random random = new Random(seed ^ context.docBase);\n          final int maxDoc = context.reader().maxDoc();\n          final NumericDocValues idSource = DocValues.getNumeric(context.reader(), \"id\");\n          assertNotNull(idSource);\n          final FixedBitSet bits = new FixedBitSet(maxDoc);\n          for(int docID=0;docID<maxDoc;docID++) {\n            if (random.nextFloat() <= density) {\n              bits.set(docID);\n              //System.out.println(\"  acc id=\" + idSource.getInt(docID) + \" docID=\" + docID);\n              assertEquals(docID, idSource.advance(docID));\n              matchValues.add(docValues.get((int) idSource.longValue()));\n            }\n          }\n\n          return new ConstantScoreScorer(this, score(), new BitSetIterator(bits, bits.approximateCardinality()));\n        }\n\n        @Override\n        public boolean isCacheable(LeafReaderContext ctx) {\n          return true;\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9c226b0eeb8b028f572020f459851a663a2c064e","date":1542377651,"type":3,"author":"Christophe Bismuth","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/uninverting/TestFieldCacheSortRandom.RandomQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","pathOld":"solr/core/src/test/org/apache/solr/uninverting/TestFieldCacheSortRandom.RandomQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","sourceNew":"    @Override\n    public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n      return new ConstantScoreWeight(this, boost) {\n        @Override\n        public Scorer scorer(LeafReaderContext context) throws IOException {\n          Random random = new Random(seed ^ context.docBase);\n          final int maxDoc = context.reader().maxDoc();\n          final NumericDocValues idSource = DocValues.getNumeric(context.reader(), \"id\");\n          assertNotNull(idSource);\n          final FixedBitSet bits = new FixedBitSet(maxDoc);\n          for(int docID=0;docID<maxDoc;docID++) {\n            if (random.nextFloat() <= density) {\n              bits.set(docID);\n              //System.out.println(\"  acc id=\" + idSource.getInt(docID) + \" docID=\" + docID);\n              assertEquals(docID, idSource.advance(docID));\n              matchValues.add(docValues.get((int) idSource.longValue()));\n            }\n          }\n\n          return new ConstantScoreScorer(this, score(), scoreMode, new BitSetIterator(bits, bits.approximateCardinality()));\n        }\n\n        @Override\n        public boolean isCacheable(LeafReaderContext ctx) {\n          return true;\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n      return new ConstantScoreWeight(this, boost) {\n        @Override\n        public Scorer scorer(LeafReaderContext context) throws IOException {\n          Random random = new Random(seed ^ context.docBase);\n          final int maxDoc = context.reader().maxDoc();\n          final NumericDocValues idSource = DocValues.getNumeric(context.reader(), \"id\");\n          assertNotNull(idSource);\n          final FixedBitSet bits = new FixedBitSet(maxDoc);\n          for(int docID=0;docID<maxDoc;docID++) {\n            if (random.nextFloat() <= density) {\n              bits.set(docID);\n              //System.out.println(\"  acc id=\" + idSource.getInt(docID) + \" docID=\" + docID);\n              assertEquals(docID, idSource.advance(docID));\n              matchValues.add(docValues.get((int) idSource.longValue()));\n            }\n          }\n\n          return new ConstantScoreScorer(this, score(), new BitSetIterator(bits, bits.approximateCardinality()));\n        }\n\n        @Override\n        public boolean isCacheable(LeafReaderContext ctx) {\n          return true;\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9fc47cb7b4346802411bb432f501ed0673d7119e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9c226b0eeb8b028f572020f459851a663a2c064e":["417142ff08fda9cf0b72d5133e63097a166c6458"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9c226b0eeb8b028f572020f459851a663a2c064e"],"417142ff08fda9cf0b72d5133e63097a166c6458":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9fc47cb7b4346802411bb432f501ed0673d7119e"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9fc47cb7b4346802411bb432f501ed0673d7119e","417142ff08fda9cf0b72d5133e63097a166c6458"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["417142ff08fda9cf0b72d5133e63097a166c6458"],"9c226b0eeb8b028f572020f459851a663a2c064e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"417142ff08fda9cf0b72d5133e63097a166c6458":["9c226b0eeb8b028f572020f459851a663a2c064e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}