{"path":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesFieldUpdates#testSharedValueUpdates().mjava","commits":[{"id":"d10066de45b1b0d13af2eaf9294225d47a3c452b","date":1544466028,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesFieldUpdates#testSharedValueUpdates().mjava","pathOld":"/dev/null","sourceNew":"  public void testSharedValueUpdates() {\n    int delGen = random().nextInt();\n    int maxDoc = 1 + random().nextInt(1000);\n    long value = random().nextLong();\n    SingleValueNumericDocValuesFieldUpdates update = new SingleValueNumericDocValuesFieldUpdates(delGen, \"foo\", maxDoc, value);\n    assertEquals(value, update.longValue());\n    Boolean[] values = new Boolean[maxDoc];\n    boolean any = false;\n    boolean noReset = random().nextBoolean(); // sometimes don't reset\n    for (int i = 0; i < maxDoc; i++) {\n      if (random().nextBoolean()) {\n        values[i] = Boolean.TRUE;\n        any = true;\n        update.add(i, value);\n      } else if (random().nextBoolean() && noReset == false) {\n        values[i] = null;\n        any = true;\n        update.reset(i);\n      } else {\n        values[i] = Boolean.FALSE;\n      }\n    }\n    if (noReset == false) {\n      for (int i = 0; i < values.length; i++) {\n        if (rarely()) {\n          if (values[i] == null) {\n            values[i] = Boolean.TRUE;\n            update.add(i, value);\n          } else if (values[i]) {\n            values[i] = null;\n            update.reset(i);\n          }\n        }\n      }\n    }\n    update.finish();\n    DocValuesFieldUpdates.Iterator iterator = update.iterator();\n    assertEquals(any, update.any());\n    assertEquals(delGen, iterator.delGen());\n    int index = 0;\n    while (iterator.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      int doc = iterator.docID();\n      if (index < iterator.docID()) {\n        for (;index < doc; index++) {\n          assertFalse(values[index]);\n        }\n      }\n      if (index == doc) {\n        if (values[index++] == null) {\n          assertFalse(iterator.hasValue());\n        } else {\n          assertTrue(iterator.hasValue());\n          assertEquals(value, iterator.longValue());\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d10066de45b1b0d13af2eaf9294225d47a3c452b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d10066de45b1b0d13af2eaf9294225d47a3c452b"]},"commit2Childs":{"d10066de45b1b0d13af2eaf9294225d47a3c452b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d10066de45b1b0d13af2eaf9294225d47a3c452b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}