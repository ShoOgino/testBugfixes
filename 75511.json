{"path":"modules/join/src/java/org/apache/lucene/search/join/BlockJoinQuery.BlockJoinWeight#scorer(AtomicReaderContext,boolean,boolean,Bits).mjava","commits":[{"id":"3fc1f3f78b299e125f7e60f43b5d457392bea23f","date":1317431015,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/join/src/java/org/apache/lucene/search/join/BlockJoinQuery.BlockJoinWeight#scorer(AtomicReaderContext,boolean,boolean,Bits).mjava","pathOld":"modules/join/src/java/org/apache/lucene/search/join/BlockJoinQuery.BlockJoinWeight#scorer(AtomicReaderContext,ScorerContext).mjava","sourceNew":"    @Override\n    public Scorer scorer(AtomicReaderContext readerContext, boolean scoreDocsInOrder,\n        boolean topScorer, Bits acceptDocs) throws IOException {\n      // Pass scoreDocsInOrder true, topScorer false to our sub:\n      final Scorer childScorer = childWeight.scorer(readerContext, true, false, acceptDocs);\n\n      if (childScorer == null) {\n        // No matches\n        return null;\n      }\n\n      final int firstChildDoc = childScorer.nextDoc();\n      if (firstChildDoc == DocIdSetIterator.NO_MORE_DOCS) {\n        // No matches\n        return null;\n      }\n\n      final DocIdSet parents = parentsFilter.getDocIdSet(readerContext);\n      // TODO: once we do random-access filters we can\n      // generalize this:\n      if (parents == null) {\n        // No matches\n        return null;\n      }\n      if (!(parents instanceof FixedBitSet)) {\n        throw new IllegalStateException(\"parentFilter must return FixedBitSet; got \" + parents);\n      }\n\n      return new BlockJoinScorer(this, childScorer, (FixedBitSet) parents, firstChildDoc, scoreMode);\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(AtomicReaderContext readerContext, ScorerContext context) throws IOException {\n      // Pass scoreDocsInOrder true, topScorer false to our sub:\n      final Scorer childScorer = childWeight.scorer(readerContext, ScorerContext.def().scoreDocsInOrder(true).topScorer(false));\n\n      if (childScorer == null) {\n        // No matches\n        return null;\n      }\n\n      final int firstChildDoc = childScorer.nextDoc();\n      if (firstChildDoc == DocIdSetIterator.NO_MORE_DOCS) {\n        // No matches\n        return null;\n      }\n\n      final DocIdSet parents = parentsFilter.getDocIdSet(readerContext);\n      // TODO: once we do random-access filters we can\n      // generalize this:\n      if (parents == null) {\n        // No matches\n        return null;\n      }\n      if (!(parents instanceof FixedBitSet)) {\n        throw new IllegalStateException(\"parentFilter must return FixedBitSet; got \" + parents);\n      }\n\n      return new BlockJoinScorer(this, childScorer, (FixedBitSet) parents, firstChildDoc, scoreMode);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6620df8541b174097b1133a4fc370adb2e570524","date":1319544675,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"modules/join/src/java/org/apache/lucene/search/join/BlockJoinQuery.BlockJoinWeight#scorer(AtomicReaderContext,boolean,boolean,Bits).mjava","pathOld":"modules/join/src/java/org/apache/lucene/search/join/BlockJoinQuery.BlockJoinWeight#scorer(AtomicReaderContext,boolean,boolean,Bits).mjava","sourceNew":"    @Override\n    public Scorer scorer(AtomicReaderContext readerContext, boolean scoreDocsInOrder,\n        boolean topScorer, Bits acceptDocs) throws IOException {\n      // Pass scoreDocsInOrder true, topScorer false to our sub:\n      final Scorer childScorer = childWeight.scorer(readerContext, true, false, acceptDocs);\n\n      if (childScorer == null) {\n        // No matches\n        return null;\n      }\n\n      final int firstChildDoc = childScorer.nextDoc();\n      if (firstChildDoc == DocIdSetIterator.NO_MORE_DOCS) {\n        // No matches\n        return null;\n      }\n\n      final DocIdSet parents = parentsFilter.getDocIdSet(readerContext, readerContext.reader.getLiveDocs());\n      // TODO: once we do random-access filters we can\n      // generalize this:\n      if (parents == null) {\n        // No matches\n        return null;\n      }\n      if (!(parents instanceof FixedBitSet)) {\n        throw new IllegalStateException(\"parentFilter must return FixedBitSet; got \" + parents);\n      }\n\n      return new BlockJoinScorer(this, childScorer, (FixedBitSet) parents, firstChildDoc, scoreMode);\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(AtomicReaderContext readerContext, boolean scoreDocsInOrder,\n        boolean topScorer, Bits acceptDocs) throws IOException {\n      // Pass scoreDocsInOrder true, topScorer false to our sub:\n      final Scorer childScorer = childWeight.scorer(readerContext, true, false, acceptDocs);\n\n      if (childScorer == null) {\n        // No matches\n        return null;\n      }\n\n      final int firstChildDoc = childScorer.nextDoc();\n      if (firstChildDoc == DocIdSetIterator.NO_MORE_DOCS) {\n        // No matches\n        return null;\n      }\n\n      final DocIdSet parents = parentsFilter.getDocIdSet(readerContext);\n      // TODO: once we do random-access filters we can\n      // generalize this:\n      if (parents == null) {\n        // No matches\n        return null;\n      }\n      if (!(parents instanceof FixedBitSet)) {\n        throw new IllegalStateException(\"parentFilter must return FixedBitSet; got \" + parents);\n      }\n\n      return new BlockJoinScorer(this, childScorer, (FixedBitSet) parents, firstChildDoc, scoreMode);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6bd4a7478aca8c3880512b730b28bf3239340635","date":1326554224,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"modules/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinQuery.BlockJoinWeight#scorer(AtomicReaderContext,boolean,boolean,Bits).mjava","pathOld":"modules/join/src/java/org/apache/lucene/search/join/BlockJoinQuery.BlockJoinWeight#scorer(AtomicReaderContext,boolean,boolean,Bits).mjava","sourceNew":"    @Override\n    public Scorer scorer(AtomicReaderContext readerContext, boolean scoreDocsInOrder,\n        boolean topScorer, Bits acceptDocs) throws IOException {\n      // Pass scoreDocsInOrder true, topScorer false to our sub:\n      final Scorer childScorer = childWeight.scorer(readerContext, true, false, acceptDocs);\n\n      if (childScorer == null) {\n        // No matches\n        return null;\n      }\n\n      final int firstChildDoc = childScorer.nextDoc();\n      if (firstChildDoc == DocIdSetIterator.NO_MORE_DOCS) {\n        // No matches\n        return null;\n      }\n\n      final DocIdSet parents = parentsFilter.getDocIdSet(readerContext, readerContext.reader.getLiveDocs());\n      // TODO: once we do random-access filters we can\n      // generalize this:\n      if (parents == null) {\n        // No matches\n        return null;\n      }\n      if (!(parents instanceof FixedBitSet)) {\n        throw new IllegalStateException(\"parentFilter must return FixedBitSet; got \" + parents);\n      }\n\n      return new BlockJoinScorer(this, childScorer, (FixedBitSet) parents, firstChildDoc, scoreMode);\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(AtomicReaderContext readerContext, boolean scoreDocsInOrder,\n        boolean topScorer, Bits acceptDocs) throws IOException {\n      // Pass scoreDocsInOrder true, topScorer false to our sub:\n      final Scorer childScorer = childWeight.scorer(readerContext, true, false, acceptDocs);\n\n      if (childScorer == null) {\n        // No matches\n        return null;\n      }\n\n      final int firstChildDoc = childScorer.nextDoc();\n      if (firstChildDoc == DocIdSetIterator.NO_MORE_DOCS) {\n        // No matches\n        return null;\n      }\n\n      final DocIdSet parents = parentsFilter.getDocIdSet(readerContext, readerContext.reader.getLiveDocs());\n      // TODO: once we do random-access filters we can\n      // generalize this:\n      if (parents == null) {\n        // No matches\n        return null;\n      }\n      if (!(parents instanceof FixedBitSet)) {\n        throw new IllegalStateException(\"parentFilter must return FixedBitSet; got \" + parents);\n      }\n\n      return new BlockJoinScorer(this, childScorer, (FixedBitSet) parents, firstChildDoc, scoreMode);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"6bd4a7478aca8c3880512b730b28bf3239340635":["6620df8541b174097b1133a4fc370adb2e570524"],"6620df8541b174097b1133a4fc370adb2e570524":["3fc1f3f78b299e125f7e60f43b5d457392bea23f"],"3fc1f3f78b299e125f7e60f43b5d457392bea23f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6bd4a7478aca8c3880512b730b28bf3239340635"]},"commit2Childs":{"6bd4a7478aca8c3880512b730b28bf3239340635":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6620df8541b174097b1133a4fc370adb2e570524":["6bd4a7478aca8c3880512b730b28bf3239340635"],"3fc1f3f78b299e125f7e60f43b5d457392bea23f":["6620df8541b174097b1133a4fc370adb2e570524"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3fc1f3f78b299e125f7e60f43b5d457392bea23f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}