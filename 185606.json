{"path":"lucene/core/src/java/org/apache/lucene/document/ShapeQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","commits":[{"id":"09c1e6d465800c73af60624bf9d4459a19f7940c","date":1579293280,"type":1,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/ShapeQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/ShapeQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","sourceNew":"  @Override\n  public final Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) {\n    final ShapeQuery query = this;\n    return new ConstantScoreWeight(query, boost) {\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        final ScorerSupplier scorerSupplier = scorerSupplier(context);\n        if (scorerSupplier == null) {\n          return null;\n        }\n        return scorerSupplier.get(Long.MAX_VALUE);\n      }\n\n      @Override\n      public ScorerSupplier scorerSupplier(LeafReaderContext context) throws IOException {\n        final LeafReader reader = context.reader();\n        final PointValues values = reader.getPointValues(field);\n        if (values == null) {\n          // No docs in this segment had any points fields\n          return null;\n        }\n        final FieldInfo fieldInfo = reader.getFieldInfos().fieldInfo(field);\n        if (fieldInfo == null) {\n          // No docs in this segment indexed this field at all\n          return null;\n        }\n\n        final Weight weight = this;\n        final Relation rel = relateRangeToQuery(values.getMinPackedValue(), values.getMaxPackedValue(), queryRelation);\n        if (rel == Relation.CELL_OUTSIDE_QUERY || (rel == Relation.CELL_INSIDE_QUERY && queryRelation == QueryRelation.CONTAINS)) {\n          // no documents match the query\n          return null;\n        } else if (values.getDocCount() == reader.maxDoc() && rel == Relation.CELL_INSIDE_QUERY) {\n          // all documents match the query\n          return new ScorerSupplier() {\n            @Override\n            public Scorer get(long leadCost) {\n              return new ConstantScoreScorer(weight, score(), scoreMode, DocIdSetIterator.all(reader.maxDoc()));\n            }\n\n            @Override\n            public long cost() {\n              return reader.maxDoc();\n            }\n          };\n        } else {\n          if (queryRelation != QueryRelation.INTERSECTS\n              && queryRelation != QueryRelation.CONTAINS\n              && hasAnyHits(query, values) == false) {\n            // First we check if we have any hits so we are fast in the adversarial case where\n            // the shape does not match any documents and we are in the dense case\n            return null;\n          }\n          // walk the tree to get matching documents\n          return new RelationScorerSupplier(values, ShapeQuery.this) {\n            @Override\n            public Scorer get(long leadCost) throws IOException {\n              return getScorer(reader, weight, score(), scoreMode);\n            }\n          };\n        }\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return true;\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public final Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) {\n    final ShapeQuery query = this;\n    return new ConstantScoreWeight(query, boost) {\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        final ScorerSupplier scorerSupplier = scorerSupplier(context);\n        if (scorerSupplier == null) {\n          return null;\n        }\n        return scorerSupplier.get(Long.MAX_VALUE);\n      }\n\n      @Override\n      public ScorerSupplier scorerSupplier(LeafReaderContext context) throws IOException {\n        final LeafReader reader = context.reader();\n        final PointValues values = reader.getPointValues(field);\n        if (values == null) {\n          // No docs in this segment had any points fields\n          return null;\n        }\n        final FieldInfo fieldInfo = reader.getFieldInfos().fieldInfo(field);\n        if (fieldInfo == null) {\n          // No docs in this segment indexed this field at all\n          return null;\n        }\n\n        final Weight weight = this;\n        final Relation rel = relateRangeToQuery(values.getMinPackedValue(), values.getMaxPackedValue(), queryRelation);\n        if (rel == Relation.CELL_OUTSIDE_QUERY || (rel == Relation.CELL_INSIDE_QUERY && queryRelation == QueryRelation.CONTAINS)) {\n          // no documents match the query\n          return null;\n        } else if (values.getDocCount() == reader.maxDoc() && rel == Relation.CELL_INSIDE_QUERY) {\n          // all documents match the query\n          return new ScorerSupplier() {\n            @Override\n            public Scorer get(long leadCost) {\n              return new ConstantScoreScorer(weight, score(), scoreMode, DocIdSetIterator.all(reader.maxDoc()));\n            }\n\n            @Override\n            public long cost() {\n              return reader.maxDoc();\n            }\n          };\n        } else {\n          if (queryRelation != QueryRelation.INTERSECTS\n              && queryRelation != QueryRelation.CONTAINS\n              && hasAnyHits(query, values) == false) {\n            // First we check if we have any hits so we are fast in the adversarial case where\n            // the shape does not match any documents and we are in the dense case\n            return null;\n          }\n          // walk the tree to get matching documents\n          return new RelationScorerSupplier(values, ShapeQuery.this) {\n            @Override\n            public Scorer get(long leadCost) throws IOException {\n              return getScorer(reader, weight, score(), scoreMode);\n            }\n          };\n        }\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return true;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"09c1e6d465800c73af60624bf9d4459a19f7940c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["09c1e6d465800c73af60624bf9d4459a19f7940c"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["09c1e6d465800c73af60624bf9d4459a19f7940c"],"09c1e6d465800c73af60624bf9d4459a19f7940c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}