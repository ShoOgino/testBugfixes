{"path":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/vector/PointVectorStrategy#rangeQuery(String,Double,Double).mjava","commits":[{"id":"112d77ac8d3e10a362516ad834c9a11d35c94234","date":1456784319,"type":1,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/vector/PointVectorStrategy#rangeQuery(String,Double,Double).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/vector/PointVectorStrategy#rangeQuery(String,Double,Double).mjava","sourceNew":"  private LegacyNumericRangeQuery<Double> rangeQuery(String fieldName, Double min, Double max) {\n    return LegacyNumericRangeQuery.newDoubleRange(\n        fieldName,\n        precisionStep,\n        min,\n        max,\n        true,\n        true);//inclusive\n  }\n\n","sourceOld":"  private LegacyNumericRangeQuery<Double> rangeQuery(String fieldName, Double min, Double max) {\n    return LegacyNumericRangeQuery.newDoubleRange(\n        fieldName,\n        precisionStep,\n        min,\n        max,\n        true,\n        true);//inclusive\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af2638813028b254a88b418ebeafb541afb49653","date":1456804822,"type":1,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/vector/PointVectorStrategy#rangeQuery(String,Double,Double).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/vector/PointVectorStrategy#rangeQuery(String,Double,Double).mjava","sourceNew":"  private LegacyNumericRangeQuery<Double> rangeQuery(String fieldName, Double min, Double max) {\n    return LegacyNumericRangeQuery.newDoubleRange(\n        fieldName,\n        precisionStep,\n        min,\n        max,\n        true,\n        true);//inclusive\n  }\n\n","sourceOld":"  private LegacyNumericRangeQuery<Double> rangeQuery(String fieldName, Double min, Double max) {\n    return LegacyNumericRangeQuery.newDoubleRange(\n        fieldName,\n        precisionStep,\n        min,\n        max,\n        true,\n        true);//inclusive\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aaa4203f9b7fbc832b95b0ab5f986b81cd12aae4","date":1459379660,"type":3,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/vector/PointVectorStrategy#rangeQuery(String,Double,Double).mjava","pathOld":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/vector/PointVectorStrategy#rangeQuery(String,Double,Double).mjava","sourceNew":"  /**\n   * Returns a numeric range query based on FieldType\n   * {@link LegacyNumericRangeQuery} is used for indexes created using {@code FieldType.LegacyNumericType}\n   * {@link DoublePoint#newRangeQuery} is used for indexes created using {@link DoublePoint} fields\n   */\n  private Query rangeQuery(String fieldName, Double min, Double max) {\n    if (hasPointVals) {\n      if (min == null) {\n        min = Double.NEGATIVE_INFINITY;\n      }\n\n      if (max == null) {\n        max = Double.POSITIVE_INFINITY;\n      }\n\n      return DoublePoint.newRangeQuery(fieldName, min, max);\n\n    } else if (legacyNumericFieldType != null) {// todo remove legacy numeric support in 7.0\n      return LegacyNumericRangeQuery.newDoubleRange(fieldName, legacyNumericFieldType.numericPrecisionStep(), min, max, true, true);//inclusive\n    }\n    //TODO try doc-value range query?\n    throw new UnsupportedOperationException(\"An index is required for this operation.\");\n  }\n\n","sourceOld":"  private LegacyNumericRangeQuery<Double> rangeQuery(String fieldName, Double min, Double max) {\n    return LegacyNumericRangeQuery.newDoubleRange(\n        fieldName,\n        precisionStep,\n        min,\n        max,\n        true,\n        true);//inclusive\n  }\n\n","bugFix":["c2165e2bf547d6644ce2088f7789457b9f30c787","770342641f7b505eaa8dccdc666158bff2419109"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a178ac3dec643551e66363c457a9074f55545f86","date":1496133188,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/vector/PointVectorStrategy#rangeQuery(String,Double,Double).mjava","pathOld":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/vector/PointVectorStrategy#rangeQuery(String,Double,Double).mjava","sourceNew":"  /**\n   * Returns a numeric range query based on FieldType\n   * {@link DoublePoint#newRangeQuery} is used for indexes created using {@link DoublePoint} fields\n   */\n  private Query rangeQuery(String fieldName, Double min, Double max) {\n    if (hasPointVals) {\n      if (min == null) {\n        min = Double.NEGATIVE_INFINITY;\n      }\n\n      if (max == null) {\n        max = Double.POSITIVE_INFINITY;\n      }\n\n      return DoublePoint.newRangeQuery(fieldName, min, max);\n\n    }\n    //TODO try doc-value range query?\n    throw new UnsupportedOperationException(\"An index is required for this operation.\");\n  }\n\n","sourceOld":"  /**\n   * Returns a numeric range query based on FieldType\n   * {@link LegacyNumericRangeQuery} is used for indexes created using {@code FieldType.LegacyNumericType}\n   * {@link DoublePoint#newRangeQuery} is used for indexes created using {@link DoublePoint} fields\n   */\n  private Query rangeQuery(String fieldName, Double min, Double max) {\n    if (hasPointVals) {\n      if (min == null) {\n        min = Double.NEGATIVE_INFINITY;\n      }\n\n      if (max == null) {\n        max = Double.POSITIVE_INFINITY;\n      }\n\n      return DoublePoint.newRangeQuery(fieldName, min, max);\n\n    } else if (legacyNumericFieldType != null) {// todo remove legacy numeric support in 7.0\n      return LegacyNumericRangeQuery.newDoubleRange(fieldName, legacyNumericFieldType.numericPrecisionStep(), min, max, true, true);//inclusive\n    }\n    //TODO try doc-value range query?\n    throw new UnsupportedOperationException(\"An index is required for this operation.\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d1f5728f32a4a256b36cfabd7a2636452f599bb9","date":1496231774,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/vector/PointVectorStrategy#rangeQuery(String,Double,Double).mjava","pathOld":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/vector/PointVectorStrategy#rangeQuery(String,Double,Double).mjava","sourceNew":"  /**\n   * Returns a numeric range query based on FieldType\n   * {@link DoublePoint#newRangeQuery} is used for indexes created using {@link DoublePoint} fields\n   */\n  private Query rangeQuery(String fieldName, Double min, Double max) {\n    if (hasPointVals) {\n      if (min == null) {\n        min = Double.NEGATIVE_INFINITY;\n      }\n\n      if (max == null) {\n        max = Double.POSITIVE_INFINITY;\n      }\n\n      return DoublePoint.newRangeQuery(fieldName, min, max);\n\n    }\n    //TODO try doc-value range query?\n    throw new UnsupportedOperationException(\"An index is required for this operation.\");\n  }\n\n","sourceOld":"  /**\n   * Returns a numeric range query based on FieldType\n   * {@link LegacyNumericRangeQuery} is used for indexes created using {@code FieldType.LegacyNumericType}\n   * {@link DoublePoint#newRangeQuery} is used for indexes created using {@link DoublePoint} fields\n   */\n  private Query rangeQuery(String fieldName, Double min, Double max) {\n    if (hasPointVals) {\n      if (min == null) {\n        min = Double.NEGATIVE_INFINITY;\n      }\n\n      if (max == null) {\n        max = Double.POSITIVE_INFINITY;\n      }\n\n      return DoublePoint.newRangeQuery(fieldName, min, max);\n\n    } else if (legacyNumericFieldType != null) {// todo remove legacy numeric support in 7.0\n      return LegacyNumericRangeQuery.newDoubleRange(fieldName, legacyNumericFieldType.numericPrecisionStep(), min, max, true, true);//inclusive\n    }\n    //TODO try doc-value range query?\n    throw new UnsupportedOperationException(\"An index is required for this operation.\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/vector/PointVectorStrategy#rangeQuery(String,Double,Double).mjava","pathOld":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/vector/PointVectorStrategy#rangeQuery(String,Double,Double).mjava","sourceNew":"  /**\n   * Returns a numeric range query based on FieldType\n   * {@link DoublePoint#newRangeQuery} is used for indexes created using {@link DoublePoint} fields\n   */\n  private Query rangeQuery(String fieldName, Double min, Double max) {\n    if (hasPointVals) {\n      if (min == null) {\n        min = Double.NEGATIVE_INFINITY;\n      }\n\n      if (max == null) {\n        max = Double.POSITIVE_INFINITY;\n      }\n\n      return DoublePoint.newRangeQuery(fieldName, min, max);\n\n    }\n    //TODO try doc-value range query?\n    throw new UnsupportedOperationException(\"An index is required for this operation.\");\n  }\n\n","sourceOld":"  /**\n   * Returns a numeric range query based on FieldType\n   * {@link LegacyNumericRangeQuery} is used for indexes created using {@code FieldType.LegacyNumericType}\n   * {@link DoublePoint#newRangeQuery} is used for indexes created using {@link DoublePoint} fields\n   */\n  private Query rangeQuery(String fieldName, Double min, Double max) {\n    if (hasPointVals) {\n      if (min == null) {\n        min = Double.NEGATIVE_INFINITY;\n      }\n\n      if (max == null) {\n        max = Double.POSITIVE_INFINITY;\n      }\n\n      return DoublePoint.newRangeQuery(fieldName, min, max);\n\n    } else if (legacyNumericFieldType != null) {// todo remove legacy numeric support in 7.0\n      return LegacyNumericRangeQuery.newDoubleRange(fieldName, legacyNumericFieldType.numericPrecisionStep(), min, max, true, true);//inclusive\n    }\n    //TODO try doc-value range query?\n    throw new UnsupportedOperationException(\"An index is required for this operation.\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"aaa4203f9b7fbc832b95b0ab5f986b81cd12aae4":["af2638813028b254a88b418ebeafb541afb49653"],"a178ac3dec643551e66363c457a9074f55545f86":["aaa4203f9b7fbc832b95b0ab5f986b81cd12aae4"],"af2638813028b254a88b418ebeafb541afb49653":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","112d77ac8d3e10a362516ad834c9a11d35c94234"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["aaa4203f9b7fbc832b95b0ab5f986b81cd12aae4","a178ac3dec643551e66363c457a9074f55545f86"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"112d77ac8d3e10a362516ad834c9a11d35c94234":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d1f5728f32a4a256b36cfabd7a2636452f599bb9":["aaa4203f9b7fbc832b95b0ab5f986b81cd12aae4","a178ac3dec643551e66363c457a9074f55545f86"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d1f5728f32a4a256b36cfabd7a2636452f599bb9"]},"commit2Childs":{"aaa4203f9b7fbc832b95b0ab5f986b81cd12aae4":["a178ac3dec643551e66363c457a9074f55545f86","e9017cf144952056066919f1ebc7897ff9bd71b1","d1f5728f32a4a256b36cfabd7a2636452f599bb9"],"a178ac3dec643551e66363c457a9074f55545f86":["e9017cf144952056066919f1ebc7897ff9bd71b1","d1f5728f32a4a256b36cfabd7a2636452f599bb9"],"af2638813028b254a88b418ebeafb541afb49653":["aaa4203f9b7fbc832b95b0ab5f986b81cd12aae4"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["af2638813028b254a88b418ebeafb541afb49653","112d77ac8d3e10a362516ad834c9a11d35c94234"],"112d77ac8d3e10a362516ad834c9a11d35c94234":["af2638813028b254a88b418ebeafb541afb49653"],"d1f5728f32a4a256b36cfabd7a2636452f599bb9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}