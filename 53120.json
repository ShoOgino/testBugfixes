{"path":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/TestUnifiedHighlighterStrictPhrases#testPreSpanQueryRewrite().mjava","commits":[{"id":"cc650d323b3ed43d314ef27d4a586c37b4773f7e","date":1478639612,"type":0,"author":"David Smiley","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/TestUnifiedHighlighterStrictPhrases#testPreSpanQueryRewrite().mjava","pathOld":"/dev/null","sourceNew":"  public void testPreSpanQueryRewrite() throws IOException {\n    indexWriter.addDocument(newDoc(\"There is no accord and satisfaction with this - Consideration of the accord is arbitrary.\"));\n    initReaderSearcherHighlighter();\n\n    highlighter = new UnifiedHighlighter(searcher, indexAnalyzer) {\n      @Override\n      protected Collection<Query> preSpanQueryRewrite(Query query) {\n        if (query instanceof MyQuery) {\n          return Collections.singletonList(((MyQuery)query).wrapped);\n        }\n        return null;\n      }\n    };\n    highlighter.setHighlightPhrasesStrictly(true);\n\n    BooleanQuery.Builder bqBuilder = new BooleanQuery.Builder();\n    Query phraseQuery = new BoostQuery(new PhraseQuery(\"body\", \"accord\", \"and\", \"satisfaction\"), 2.0f);\n    Query oredTerms = new BooleanQuery.Builder()\n        .setMinimumNumberShouldMatch(2)\n        .add(new TermQuery(new Term(\"body\", \"accord\")), BooleanClause.Occur.SHOULD)\n        .add(new TermQuery(new Term(\"body\", \"satisfaction\")), BooleanClause.Occur.SHOULD)\n        .add(new TermQuery(new Term(\"body\", \"consideration\")), BooleanClause.Occur.SHOULD)\n        .build();\n    Query proximityBoostingQuery = new MyQuery(oredTerms);\n    Query totalQuery = bqBuilder\n        .add(phraseQuery, BooleanClause.Occur.SHOULD)\n        .add(proximityBoostingQuery, BooleanClause.Occur.SHOULD)\n        .build();\n    TopDocs topDocs = searcher.search(totalQuery, 10, Sort.INDEXORDER);\n    assertEquals(1, topDocs.totalHits);\n    String[] snippets = highlighter.highlight(\"body\", totalQuery, topDocs);\n    assertArrayEquals(new String[]{\"There is no <b>accord</b> <b>and</b> <b>satisfaction</b> with this - <b>Consideration</b> of the <b>accord</b> is arbitrary.\"}, snippets);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"199dfa410f1fdbfd3294106b04096cce5ed34b21","date":1478812506,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/TestUnifiedHighlighterStrictPhrases#testPreSpanQueryRewrite().mjava","pathOld":"/dev/null","sourceNew":"  public void testPreSpanQueryRewrite() throws IOException {\n    indexWriter.addDocument(newDoc(\"There is no accord and satisfaction with this - Consideration of the accord is arbitrary.\"));\n    initReaderSearcherHighlighter();\n\n    highlighter = new UnifiedHighlighter(searcher, indexAnalyzer) {\n      @Override\n      protected Collection<Query> preSpanQueryRewrite(Query query) {\n        if (query instanceof MyQuery) {\n          return Collections.singletonList(((MyQuery)query).wrapped);\n        }\n        return null;\n      }\n    };\n    highlighter.setHighlightPhrasesStrictly(true);\n\n    BooleanQuery.Builder bqBuilder = new BooleanQuery.Builder();\n    Query phraseQuery = new BoostQuery(new PhraseQuery(\"body\", \"accord\", \"and\", \"satisfaction\"), 2.0f);\n    Query oredTerms = new BooleanQuery.Builder()\n        .setMinimumNumberShouldMatch(2)\n        .add(new TermQuery(new Term(\"body\", \"accord\")), BooleanClause.Occur.SHOULD)\n        .add(new TermQuery(new Term(\"body\", \"satisfaction\")), BooleanClause.Occur.SHOULD)\n        .add(new TermQuery(new Term(\"body\", \"consideration\")), BooleanClause.Occur.SHOULD)\n        .build();\n    Query proximityBoostingQuery = new MyQuery(oredTerms);\n    Query totalQuery = bqBuilder\n        .add(phraseQuery, BooleanClause.Occur.SHOULD)\n        .add(proximityBoostingQuery, BooleanClause.Occur.SHOULD)\n        .build();\n    TopDocs topDocs = searcher.search(totalQuery, 10, Sort.INDEXORDER);\n    assertEquals(1, topDocs.totalHits);\n    String[] snippets = highlighter.highlight(\"body\", totalQuery, topDocs);\n    assertArrayEquals(new String[]{\"There is no <b>accord</b> <b>and</b> <b>satisfaction</b> with this - <b>Consideration</b> of the <b>accord</b> is arbitrary.\"}, snippets);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83788ad129a5154d5c6562c4e8ce3db48793aada","date":1532961485,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/TestUnifiedHighlighterStrictPhrases#testPreSpanQueryRewrite().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/TestUnifiedHighlighterStrictPhrases#testPreSpanQueryRewrite().mjava","sourceNew":"  public void testPreSpanQueryRewrite() throws IOException {\n    indexWriter.addDocument(newDoc(\"There is no accord and satisfaction with this - Consideration of the accord is arbitrary.\"));\n    initReaderSearcherHighlighter();\n\n    highlighter = new UnifiedHighlighter(searcher, indexAnalyzer) {\n      @Override\n      protected Collection<Query> preSpanQueryRewrite(Query query) {\n        if (query instanceof MyQuery) {\n          return Collections.singletonList(((MyQuery)query).wrapped);\n        }\n        return null;\n      }\n    };\n    highlighter.setHighlightPhrasesStrictly(true);\n\n    BooleanQuery.Builder bqBuilder = new BooleanQuery.Builder();\n    Query phraseQuery = new BoostQuery(new PhraseQuery(\"body\", \"accord\", \"and\", \"satisfaction\"), 2.0f);\n    Query oredTerms = new BooleanQuery.Builder()\n        .setMinimumNumberShouldMatch(2)\n        .add(new TermQuery(new Term(\"body\", \"accord\")), BooleanClause.Occur.SHOULD)\n        .add(new TermQuery(new Term(\"body\", \"satisfaction\")), BooleanClause.Occur.SHOULD)\n        .add(new TermQuery(new Term(\"body\", \"consideration\")), BooleanClause.Occur.SHOULD)\n        .build();\n    Query proximityBoostingQuery = new MyQuery(oredTerms);\n    Query totalQuery = bqBuilder\n        .add(phraseQuery, BooleanClause.Occur.SHOULD)\n        .add(proximityBoostingQuery, BooleanClause.Occur.SHOULD)\n        .build();\n    TopDocs topDocs = searcher.search(totalQuery, 10, Sort.INDEXORDER);\n    assertEquals(1, topDocs.totalHits.value);\n    String[] snippets = highlighter.highlight(\"body\", totalQuery, topDocs);\n    assertArrayEquals(new String[]{\"There is no <b>accord</b> <b>and</b> <b>satisfaction</b> with this - <b>Consideration</b> of the <b>accord</b> is arbitrary.\"}, snippets);\n  }\n\n","sourceOld":"  public void testPreSpanQueryRewrite() throws IOException {\n    indexWriter.addDocument(newDoc(\"There is no accord and satisfaction with this - Consideration of the accord is arbitrary.\"));\n    initReaderSearcherHighlighter();\n\n    highlighter = new UnifiedHighlighter(searcher, indexAnalyzer) {\n      @Override\n      protected Collection<Query> preSpanQueryRewrite(Query query) {\n        if (query instanceof MyQuery) {\n          return Collections.singletonList(((MyQuery)query).wrapped);\n        }\n        return null;\n      }\n    };\n    highlighter.setHighlightPhrasesStrictly(true);\n\n    BooleanQuery.Builder bqBuilder = new BooleanQuery.Builder();\n    Query phraseQuery = new BoostQuery(new PhraseQuery(\"body\", \"accord\", \"and\", \"satisfaction\"), 2.0f);\n    Query oredTerms = new BooleanQuery.Builder()\n        .setMinimumNumberShouldMatch(2)\n        .add(new TermQuery(new Term(\"body\", \"accord\")), BooleanClause.Occur.SHOULD)\n        .add(new TermQuery(new Term(\"body\", \"satisfaction\")), BooleanClause.Occur.SHOULD)\n        .add(new TermQuery(new Term(\"body\", \"consideration\")), BooleanClause.Occur.SHOULD)\n        .build();\n    Query proximityBoostingQuery = new MyQuery(oredTerms);\n    Query totalQuery = bqBuilder\n        .add(phraseQuery, BooleanClause.Occur.SHOULD)\n        .add(proximityBoostingQuery, BooleanClause.Occur.SHOULD)\n        .build();\n    TopDocs topDocs = searcher.search(totalQuery, 10, Sort.INDEXORDER);\n    assertEquals(1, topDocs.totalHits);\n    String[] snippets = highlighter.highlight(\"body\", totalQuery, topDocs);\n    assertArrayEquals(new String[]{\"There is no <b>accord</b> <b>and</b> <b>satisfaction</b> with this - <b>Consideration</b> of the <b>accord</b> is arbitrary.\"}, snippets);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"795822cce6616d4035b5a4bdbb6c113ea2f715ba","date":1535599765,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/TestUnifiedHighlighterStrictPhrases#testPreSpanQueryRewrite().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/TestUnifiedHighlighterStrictPhrases#testPreSpanQueryRewrite().mjava","sourceNew":"  public void testPreSpanQueryRewrite() throws IOException {\n    indexWriter.addDocument(newDoc(\"There is no accord and satisfaction with this - Consideration of the accord is arbitrary.\"));\n    initReaderSearcherHighlighter();\n\n    highlighter = new UnifiedHighlighter(searcher, indexAnalyzer) {\n      @Override\n      protected Set<HighlightFlag> getFlags(String field) {\n        final Set<HighlightFlag> flags = super.getFlags(field);\n        flags.remove(HighlightFlag.WEIGHT_MATCHES);//unsupported\n        return flags;\n      }\n\n      @Override\n      protected Collection<Query> preSpanQueryRewrite(Query query) {\n        if (query instanceof MyQuery) {\n          return Collections.singletonList(((MyQuery)query).wrapped);\n        }\n        return null;\n      }\n    };\n    highlighter.setHighlightPhrasesStrictly(true);\n\n    BooleanQuery.Builder bqBuilder = new BooleanQuery.Builder();\n    Query phraseQuery = new BoostQuery(new PhraseQuery(\"body\", \"accord\", \"and\", \"satisfaction\"), 2.0f);\n    Query oredTerms = new BooleanQuery.Builder()\n        .setMinimumNumberShouldMatch(2)\n        .add(new TermQuery(new Term(\"body\", \"accord\")), BooleanClause.Occur.SHOULD)\n        .add(new TermQuery(new Term(\"body\", \"satisfaction\")), BooleanClause.Occur.SHOULD)\n        .add(new TermQuery(new Term(\"body\", \"consideration\")), BooleanClause.Occur.SHOULD)\n        .build();\n    Query proximityBoostingQuery = new MyQuery(oredTerms);\n    Query totalQuery = bqBuilder\n        .add(phraseQuery, BooleanClause.Occur.SHOULD)\n        .add(proximityBoostingQuery, BooleanClause.Occur.SHOULD)\n        .build();\n    TopDocs topDocs = searcher.search(totalQuery, 10, Sort.INDEXORDER);\n    assertEquals(1, topDocs.totalHits.value);\n    String[] snippets = highlighter.highlight(\"body\", totalQuery, topDocs);\n    assertArrayEquals(new String[]{\"There is no <b>accord</b> <b>and</b> <b>satisfaction</b> with this - <b>Consideration</b> of the <b>accord</b> is arbitrary.\"}, snippets);\n  }\n\n","sourceOld":"  public void testPreSpanQueryRewrite() throws IOException {\n    indexWriter.addDocument(newDoc(\"There is no accord and satisfaction with this - Consideration of the accord is arbitrary.\"));\n    initReaderSearcherHighlighter();\n\n    highlighter = new UnifiedHighlighter(searcher, indexAnalyzer) {\n      @Override\n      protected Collection<Query> preSpanQueryRewrite(Query query) {\n        if (query instanceof MyQuery) {\n          return Collections.singletonList(((MyQuery)query).wrapped);\n        }\n        return null;\n      }\n    };\n    highlighter.setHighlightPhrasesStrictly(true);\n\n    BooleanQuery.Builder bqBuilder = new BooleanQuery.Builder();\n    Query phraseQuery = new BoostQuery(new PhraseQuery(\"body\", \"accord\", \"and\", \"satisfaction\"), 2.0f);\n    Query oredTerms = new BooleanQuery.Builder()\n        .setMinimumNumberShouldMatch(2)\n        .add(new TermQuery(new Term(\"body\", \"accord\")), BooleanClause.Occur.SHOULD)\n        .add(new TermQuery(new Term(\"body\", \"satisfaction\")), BooleanClause.Occur.SHOULD)\n        .add(new TermQuery(new Term(\"body\", \"consideration\")), BooleanClause.Occur.SHOULD)\n        .build();\n    Query proximityBoostingQuery = new MyQuery(oredTerms);\n    Query totalQuery = bqBuilder\n        .add(phraseQuery, BooleanClause.Occur.SHOULD)\n        .add(proximityBoostingQuery, BooleanClause.Occur.SHOULD)\n        .build();\n    TopDocs topDocs = searcher.search(totalQuery, 10, Sort.INDEXORDER);\n    assertEquals(1, topDocs.totalHits.value);\n    String[] snippets = highlighter.highlight(\"body\", totalQuery, topDocs);\n    assertArrayEquals(new String[]{\"There is no <b>accord</b> <b>and</b> <b>satisfaction</b> with this - <b>Consideration</b> of the <b>accord</b> is arbitrary.\"}, snippets);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"cc650d323b3ed43d314ef27d4a586c37b4773f7e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"199dfa410f1fdbfd3294106b04096cce5ed34b21":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","cc650d323b3ed43d314ef27d4a586c37b4773f7e"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["cc650d323b3ed43d314ef27d4a586c37b4773f7e"],"795822cce6616d4035b5a4bdbb6c113ea2f715ba":["83788ad129a5154d5c6562c4e8ce3db48793aada"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["795822cce6616d4035b5a4bdbb6c113ea2f715ba"]},"commit2Childs":{"cc650d323b3ed43d314ef27d4a586c37b4773f7e":["199dfa410f1fdbfd3294106b04096cce5ed34b21","83788ad129a5154d5c6562c4e8ce3db48793aada"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cc650d323b3ed43d314ef27d4a586c37b4773f7e","199dfa410f1fdbfd3294106b04096cce5ed34b21"],"199dfa410f1fdbfd3294106b04096cce5ed34b21":[],"83788ad129a5154d5c6562c4e8ce3db48793aada":["795822cce6616d4035b5a4bdbb6c113ea2f715ba"],"795822cce6616d4035b5a4bdbb6c113ea2f715ba":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["199dfa410f1fdbfd3294106b04096cce5ed34b21","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}