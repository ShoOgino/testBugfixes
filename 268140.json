{"path":"lucene/core/src/java/org/apache/lucene/store/CompoundFileDirectory#CompoundFileDirectory(Directory,String,IOContext,boolean).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/CompoundFileDirectory#CompoundFileDirectory(Directory,String,IOContext,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/store/CompoundFileDirectory#CompoundFileDirectory(Directory,String,IOContext,boolean).mjava","sourceNew":"  /**\n   * Create a new CompoundFileDirectory.\n   */\n  public CompoundFileDirectory(Directory directory, String fileName, IOContext context, boolean openForWrite) throws IOException {\n    this.directory = directory;\n    this.fileName = fileName;\n    this.readBufferSize = BufferedIndexInput.bufferSize(context);\n    this.isOpen = false;\n    this.openForWrite = openForWrite;\n    if (!openForWrite) {\n      boolean success = false;\n      handle = directory.createSlicer(fileName, context);\n      try {\n        this.entries = readEntries(handle, directory, fileName);\n        success = true;\n      } finally {\n        if (!success) {\n          IOUtils.closeWhileHandlingException(handle);\n        }\n      }\n      this.isOpen = true;\n      writer = null;\n    } else {\n      assert !(directory instanceof CompoundFileDirectory) : \"compound file inside of compound file: \" + fileName;\n      this.entries = SENTINEL;\n      this.isOpen = true;\n      writer = new CompoundFileWriter(directory, fileName);\n      handle = null;\n    }\n  }\n\n","sourceOld":"  /**\n   * Create a new CompoundFileDirectory.\n   */\n  public CompoundFileDirectory(Directory directory, String fileName, IOContext context, boolean openForWrite) throws IOException {\n    this.directory = directory;\n    this.fileName = fileName;\n    this.readBufferSize = BufferedIndexInput.bufferSize(context);\n    this.isOpen = false;\n    this.openForWrite = openForWrite;\n    if (!openForWrite) {\n      boolean success = false;\n      handle = directory.createSlicer(fileName, context);\n      try {\n        this.entries = readEntries(handle, directory, fileName);\n        success = true;\n      } finally {\n        if (!success) {\n          IOUtils.closeWhileHandlingException(handle);\n        }\n      }\n      this.isOpen = true;\n      writer = null;\n    } else {\n      assert !(directory instanceof CompoundFileDirectory) : \"compound file inside of compound file: \" + fileName;\n      this.entries = SENTINEL;\n      this.isOpen = true;\n      writer = new CompoundFileWriter(directory, fileName);\n      handle = null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e5e734869d76c22acfc12bc53ecbfcc1606c2f5","date":1347072117,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/CompoundFileDirectory#CompoundFileDirectory(Directory,String,IOContext,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/CompoundFileDirectory#CompoundFileDirectory(Directory,String,IOContext,boolean).mjava","sourceNew":"  /**\n   * Create a new CompoundFileDirectory.\n   */\n  public CompoundFileDirectory(Directory directory, String fileName, IOContext context, boolean openForWrite) throws IOException {\n    this.directory = directory;\n    this.fileName = fileName;\n    this.readBufferSize = BufferedIndexInput.bufferSize(context);\n    this.isOpen = false;\n    this.openForWrite = openForWrite;\n    if (!openForWrite) {\n      boolean success = false;\n      handle = directory.createSlicer(fileName, context);\n      try {\n        this.entries = readEntries(directory, fileName);\n        success = true;\n      } finally {\n        if (!success) {\n          IOUtils.closeWhileHandlingException(handle);\n        }\n      }\n      this.isOpen = true;\n      writer = null;\n    } else {\n      assert !(directory instanceof CompoundFileDirectory) : \"compound file inside of compound file: \" + fileName;\n      this.entries = SENTINEL;\n      this.isOpen = true;\n      writer = new CompoundFileWriter(directory, fileName);\n      handle = null;\n    }\n  }\n\n","sourceOld":"  /**\n   * Create a new CompoundFileDirectory.\n   */\n  public CompoundFileDirectory(Directory directory, String fileName, IOContext context, boolean openForWrite) throws IOException {\n    this.directory = directory;\n    this.fileName = fileName;\n    this.readBufferSize = BufferedIndexInput.bufferSize(context);\n    this.isOpen = false;\n    this.openForWrite = openForWrite;\n    if (!openForWrite) {\n      boolean success = false;\n      handle = directory.createSlicer(fileName, context);\n      try {\n        this.entries = readEntries(handle, directory, fileName);\n        success = true;\n      } finally {\n        if (!success) {\n          IOUtils.closeWhileHandlingException(handle);\n        }\n      }\n      this.isOpen = true;\n      writer = null;\n    } else {\n      assert !(directory instanceof CompoundFileDirectory) : \"compound file inside of compound file: \" + fileName;\n      this.entries = SENTINEL;\n      this.isOpen = true;\n      writer = new CompoundFileWriter(directory, fileName);\n      handle = null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7db8f2ddb77c9e36f948c8283a3b61bdfb6c2f3","date":1400334249,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/CompoundFileDirectory#CompoundFileDirectory(Directory,String,IOContext,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/CompoundFileDirectory#CompoundFileDirectory(Directory,String,IOContext,boolean).mjava","sourceNew":"  /**\n   * Create a new CompoundFileDirectory.\n   */\n  public CompoundFileDirectory(Directory directory, String fileName, IOContext context, boolean openForWrite) throws IOException {\n    this.directory = directory;\n    this.fileName = fileName;\n    this.readBufferSize = BufferedIndexInput.bufferSize(context);\n    this.isOpen = false;\n    this.openForWrite = openForWrite;\n    if (!openForWrite) {\n      boolean success = false;\n      handle = directory.openInput(fileName, context);\n      try {\n        this.entries = readEntries(directory, fileName);\n        success = true;\n      } finally {\n        if (!success) {\n          IOUtils.closeWhileHandlingException(handle);\n        }\n      }\n      this.isOpen = true;\n      writer = null;\n    } else {\n      assert !(directory instanceof CompoundFileDirectory) : \"compound file inside of compound file: \" + fileName;\n      this.entries = SENTINEL;\n      this.isOpen = true;\n      writer = new CompoundFileWriter(directory, fileName);\n      handle = null;\n    }\n  }\n\n","sourceOld":"  /**\n   * Create a new CompoundFileDirectory.\n   */\n  public CompoundFileDirectory(Directory directory, String fileName, IOContext context, boolean openForWrite) throws IOException {\n    this.directory = directory;\n    this.fileName = fileName;\n    this.readBufferSize = BufferedIndexInput.bufferSize(context);\n    this.isOpen = false;\n    this.openForWrite = openForWrite;\n    if (!openForWrite) {\n      boolean success = false;\n      handle = directory.createSlicer(fileName, context);\n      try {\n        this.entries = readEntries(directory, fileName);\n        success = true;\n      } finally {\n        if (!success) {\n          IOUtils.closeWhileHandlingException(handle);\n        }\n      }\n      this.isOpen = true;\n      writer = null;\n    } else {\n      assert !(directory instanceof CompoundFileDirectory) : \"compound file inside of compound file: \" + fileName;\n      this.entries = SENTINEL;\n      this.isOpen = true;\n      writer = new CompoundFileWriter(directory, fileName);\n      handle = null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56572ec06f1407c066d6b7399413178b33176cd8","date":1400495675,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/store/CompoundFileDirectory#CompoundFileDirectory(Directory,String,IOContext,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/CompoundFileDirectory#CompoundFileDirectory(Directory,String,IOContext,boolean).mjava","sourceNew":"  /**\n   * Create a new CompoundFileDirectory.\n   */\n  public CompoundFileDirectory(Directory directory, String fileName, IOContext context, boolean openForWrite) throws IOException {\n    this.directory = directory;\n    this.fileName = fileName;\n    this.readBufferSize = BufferedIndexInput.bufferSize(context);\n    this.isOpen = false;\n    this.openForWrite = openForWrite;\n    if (!openForWrite) {\n      boolean success = false;\n      handle = directory.openInput(fileName, context);\n      try {\n        this.entries = readEntries(directory, fileName);\n        success = true;\n      } finally {\n        if (!success) {\n          IOUtils.closeWhileHandlingException(handle);\n        }\n      }\n      this.isOpen = true;\n      writer = null;\n    } else {\n      assert !(directory instanceof CompoundFileDirectory) : \"compound file inside of compound file: \" + fileName;\n      this.entries = SENTINEL;\n      this.isOpen = true;\n      writer = new CompoundFileWriter(directory, fileName);\n      handle = null;\n    }\n  }\n\n","sourceOld":"  /**\n   * Create a new CompoundFileDirectory.\n   */\n  public CompoundFileDirectory(Directory directory, String fileName, IOContext context, boolean openForWrite) throws IOException {\n    this.directory = directory;\n    this.fileName = fileName;\n    this.readBufferSize = BufferedIndexInput.bufferSize(context);\n    this.isOpen = false;\n    this.openForWrite = openForWrite;\n    if (!openForWrite) {\n      boolean success = false;\n      handle = directory.createSlicer(fileName, context);\n      try {\n        this.entries = readEntries(directory, fileName);\n        success = true;\n      } finally {\n        if (!success) {\n          IOUtils.closeWhileHandlingException(handle);\n        }\n      }\n      this.isOpen = true;\n      writer = null;\n    } else {\n      assert !(directory instanceof CompoundFileDirectory) : \"compound file inside of compound file: \" + fileName;\n      this.entries = SENTINEL;\n      this.isOpen = true;\n      writer = new CompoundFileWriter(directory, fileName);\n      handle = null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b612f3f700a1ca999f12198b7a33c65b4a96fd0","date":1406127397,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/CompoundFileDirectory#CompoundFileDirectory(Directory,String,IOContext,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/CompoundFileDirectory#CompoundFileDirectory(Directory,String,IOContext,boolean).mjava","sourceNew":"  /**\n   * Create a new CompoundFileDirectory.\n   */\n  public CompoundFileDirectory(Directory directory, String fileName, IOContext context, boolean openForWrite) throws IOException {\n    this.directory = directory;\n    this.fileName = fileName;\n    this.readBufferSize = BufferedIndexInput.bufferSize(context);\n    this.isOpen = false;\n    this.openForWrite = openForWrite;\n    if (!openForWrite) {\n      boolean success = false;\n      handle = directory.openInput(fileName, context);\n      try {\n        this.entries = readEntries(directory, fileName);\n        if (version >= CompoundFileWriter.VERSION_CHECKSUM) {\n          CodecUtil.checkHeader(handle, CompoundFileWriter.DATA_CODEC, version, version);\n          // NOTE: data file is too costly to verify checksum against all the bytes on open,\n          // but for now we at least verify proper structure of the checksum footer: which looks\n          // for FOOTER_MAGIC + algorithmID. This is cheap and can detect some forms of corruption\n          // such as file truncation.\n          CodecUtil.retrieveChecksum(handle);\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          IOUtils.closeWhileHandlingException(handle);\n        }\n      }\n      this.isOpen = true;\n      writer = null;\n    } else {\n      assert !(directory instanceof CompoundFileDirectory) : \"compound file inside of compound file: \" + fileName;\n      this.entries = SENTINEL;\n      this.isOpen = true;\n      writer = new CompoundFileWriter(directory, fileName);\n      handle = null;\n    }\n  }\n\n","sourceOld":"  /**\n   * Create a new CompoundFileDirectory.\n   */\n  public CompoundFileDirectory(Directory directory, String fileName, IOContext context, boolean openForWrite) throws IOException {\n    this.directory = directory;\n    this.fileName = fileName;\n    this.readBufferSize = BufferedIndexInput.bufferSize(context);\n    this.isOpen = false;\n    this.openForWrite = openForWrite;\n    if (!openForWrite) {\n      boolean success = false;\n      handle = directory.openInput(fileName, context);\n      try {\n        this.entries = readEntries(directory, fileName);\n        success = true;\n      } finally {\n        if (!success) {\n          IOUtils.closeWhileHandlingException(handle);\n        }\n      }\n      this.isOpen = true;\n      writer = null;\n    } else {\n      assert !(directory instanceof CompoundFileDirectory) : \"compound file inside of compound file: \" + fileName;\n      this.entries = SENTINEL;\n      this.isOpen = true;\n      writer = new CompoundFileWriter(directory, fileName);\n      handle = null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f382b2e9f4ca7dbe98e2f15da70983ecfc02b171","date":1412231650,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/CompoundFileDirectory#CompoundFileDirectory(byte[],Directory,String,IOContext,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/CompoundFileDirectory#CompoundFileDirectory(Directory,String,IOContext,boolean).mjava","sourceNew":"  /**\n   * Create a new CompoundFileDirectory.\n   */\n  public CompoundFileDirectory(byte[] segmentID, Directory directory, String fileName, IOContext context, boolean openForWrite) throws IOException {\n    this.directory = directory;\n    this.segmentID = segmentID;\n    this.fileName = fileName;\n    this.readBufferSize = BufferedIndexInput.bufferSize(context);\n    this.isOpen = false;\n    this.openForWrite = openForWrite;\n    if (!openForWrite) {\n      boolean success = false;\n      handle = directory.openInput(fileName, context);\n      try {\n        this.entries = readEntries(directory, fileName);\n        if (version >= CompoundFileWriter.VERSION_CHECKSUM) {\n          if (version >= CompoundFileWriter.VERSION_SEGMENTHEADER) {\n            // nocommit: remove this null \"hack\", its because old rw test codecs cant properly impersonate\n            if (segmentID == null) {\n              CodecUtil.checkHeader(handle, CompoundFileWriter.DATA_CODEC, version, version);\n              handle.skipBytes(StringHelper.ID_LENGTH);\n            } else {\n              CodecUtil.checkSegmentHeader(handle, CompoundFileWriter.DATA_CODEC, version, version, segmentID, \"\");\n            }\n          } else {\n            CodecUtil.checkHeader(handle, CompoundFileWriter.DATA_CODEC, version, version);\n          }\n          // NOTE: data file is too costly to verify checksum against all the bytes on open,\n          // but for now we at least verify proper structure of the checksum footer: which looks\n          // for FOOTER_MAGIC + algorithmID. This is cheap and can detect some forms of corruption\n          // such as file truncation.\n          CodecUtil.retrieveChecksum(handle);\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          IOUtils.closeWhileHandlingException(handle);\n        }\n      }\n      this.isOpen = true;\n      writer = null;\n    } else {\n      assert !(directory instanceof CompoundFileDirectory) : \"compound file inside of compound file: \" + fileName;\n      this.entries = SENTINEL;\n      this.isOpen = true;\n      writer = new CompoundFileWriter(segmentID, directory, fileName);\n      handle = null;\n    }\n  }\n\n","sourceOld":"  /**\n   * Create a new CompoundFileDirectory.\n   */\n  public CompoundFileDirectory(Directory directory, String fileName, IOContext context, boolean openForWrite) throws IOException {\n    this.directory = directory;\n    this.fileName = fileName;\n    this.readBufferSize = BufferedIndexInput.bufferSize(context);\n    this.isOpen = false;\n    this.openForWrite = openForWrite;\n    if (!openForWrite) {\n      boolean success = false;\n      handle = directory.openInput(fileName, context);\n      try {\n        this.entries = readEntries(directory, fileName);\n        if (version >= CompoundFileWriter.VERSION_CHECKSUM) {\n          CodecUtil.checkHeader(handle, CompoundFileWriter.DATA_CODEC, version, version);\n          // NOTE: data file is too costly to verify checksum against all the bytes on open,\n          // but for now we at least verify proper structure of the checksum footer: which looks\n          // for FOOTER_MAGIC + algorithmID. This is cheap and can detect some forms of corruption\n          // such as file truncation.\n          CodecUtil.retrieveChecksum(handle);\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          IOUtils.closeWhileHandlingException(handle);\n        }\n      }\n      this.isOpen = true;\n      writer = null;\n    } else {\n      assert !(directory instanceof CompoundFileDirectory) : \"compound file inside of compound file: \" + fileName;\n      this.entries = SENTINEL;\n      this.isOpen = true;\n      writer = new CompoundFileWriter(directory, fileName);\n      handle = null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9bb9a29a5e71a90295f175df8919802993142c9a","date":1412517673,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/Lucene40CompoundReader#Lucene40CompoundReader(Directory,String,IOContext,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/CompoundFileDirectory#CompoundFileDirectory(Directory,String,IOContext,boolean).mjava","sourceNew":"  /**\n   * Create a new CompoundFileDirectory.\n   */\n  public Lucene40CompoundReader(Directory directory, String fileName, IOContext context, boolean openForWrite) throws IOException {\n    this.directory = directory;\n    this.fileName = fileName;\n    this.readBufferSize = BufferedIndexInput.bufferSize(context);\n    this.isOpen = false;\n    this.openForWrite = openForWrite;\n    if (!openForWrite) {\n      boolean success = false;\n      handle = directory.openInput(fileName, context);\n      try {\n        this.entries = readEntries(directory, fileName);\n        if (version >= Lucene40CompoundWriter.VERSION_CHECKSUM) {\n          CodecUtil.checkHeader(handle, Lucene40CompoundWriter.DATA_CODEC, version, version);\n          // NOTE: data file is too costly to verify checksum against all the bytes on open,\n          // but for now we at least verify proper structure of the checksum footer: which looks\n          // for FOOTER_MAGIC + algorithmID. This is cheap and can detect some forms of corruption\n          // such as file truncation.\n          CodecUtil.retrieveChecksum(handle);\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          IOUtils.closeWhileHandlingException(handle);\n        }\n      }\n      this.isOpen = true;\n      writer = null;\n    } else {\n      assert !(directory instanceof Lucene40CompoundReader) : \"compound file inside of compound file: \" + fileName;\n      this.entries = SENTINEL;\n      this.isOpen = true;\n      writer = new Lucene40CompoundWriter(directory, fileName, context);\n      handle = null;\n    }\n  }\n\n","sourceOld":"  /**\n   * Create a new CompoundFileDirectory.\n   */\n  public CompoundFileDirectory(Directory directory, String fileName, IOContext context, boolean openForWrite) throws IOException {\n    this.directory = directory;\n    this.fileName = fileName;\n    this.readBufferSize = BufferedIndexInput.bufferSize(context);\n    this.isOpen = false;\n    this.openForWrite = openForWrite;\n    if (!openForWrite) {\n      boolean success = false;\n      handle = directory.openInput(fileName, context);\n      try {\n        this.entries = readEntries(directory, fileName);\n        if (version >= CompoundFileWriter.VERSION_CHECKSUM) {\n          CodecUtil.checkHeader(handle, CompoundFileWriter.DATA_CODEC, version, version);\n          // NOTE: data file is too costly to verify checksum against all the bytes on open,\n          // but for now we at least verify proper structure of the checksum footer: which looks\n          // for FOOTER_MAGIC + algorithmID. This is cheap and can detect some forms of corruption\n          // such as file truncation.\n          CodecUtil.retrieveChecksum(handle);\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          IOUtils.closeWhileHandlingException(handle);\n        }\n      }\n      this.isOpen = true;\n      writer = null;\n    } else {\n      assert !(directory instanceof CompoundFileDirectory) : \"compound file inside of compound file: \" + fileName;\n      this.entries = SENTINEL;\n      this.isOpen = true;\n      writer = new CompoundFileWriter(directory, fileName);\n      handle = null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4e5e734869d76c22acfc12bc53ecbfcc1606c2f5":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"f382b2e9f4ca7dbe98e2f15da70983ecfc02b171":["4b612f3f700a1ca999f12198b7a33c65b4a96fd0"],"e7db8f2ddb77c9e36f948c8283a3b61bdfb6c2f3":["4e5e734869d76c22acfc12bc53ecbfcc1606c2f5"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9bb9a29a5e71a90295f175df8919802993142c9a":["4b612f3f700a1ca999f12198b7a33c65b4a96fd0","f382b2e9f4ca7dbe98e2f15da70983ecfc02b171"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4b612f3f700a1ca999f12198b7a33c65b4a96fd0":["e7db8f2ddb77c9e36f948c8283a3b61bdfb6c2f3"],"56572ec06f1407c066d6b7399413178b33176cd8":["4e5e734869d76c22acfc12bc53ecbfcc1606c2f5","e7db8f2ddb77c9e36f948c8283a3b61bdfb6c2f3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9bb9a29a5e71a90295f175df8919802993142c9a"]},"commit2Childs":{"4e5e734869d76c22acfc12bc53ecbfcc1606c2f5":["e7db8f2ddb77c9e36f948c8283a3b61bdfb6c2f3","56572ec06f1407c066d6b7399413178b33176cd8"],"f382b2e9f4ca7dbe98e2f15da70983ecfc02b171":["9bb9a29a5e71a90295f175df8919802993142c9a"],"e7db8f2ddb77c9e36f948c8283a3b61bdfb6c2f3":["4b612f3f700a1ca999f12198b7a33c65b4a96fd0","56572ec06f1407c066d6b7399413178b33176cd8"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["4e5e734869d76c22acfc12bc53ecbfcc1606c2f5"],"9bb9a29a5e71a90295f175df8919802993142c9a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4b612f3f700a1ca999f12198b7a33c65b4a96fd0":["f382b2e9f4ca7dbe98e2f15da70983ecfc02b171","9bb9a29a5e71a90295f175df8919802993142c9a"],"56572ec06f1407c066d6b7399413178b33176cd8":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["56572ec06f1407c066d6b7399413178b33176cd8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}