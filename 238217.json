{"path":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testHighlighterWithPhraseQuery().mjava","commits":[{"id":"7b0d0cdee6b728fdf8a8cf5bec3320bb7f67fa16","date":1463647723,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testHighlighterWithPhraseQuery().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testHighlighterWithPhraseQuery() throws IOException, InvalidTokenOffsetsException {\n\n    final Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        return new TokenStreamComponents(new NGramTokenizer(4, 4));\n      }\n    };\n    final String fieldName = \"substring\";\n\n    final List<BytesRef> list = new ArrayList<>();\n    list.add(new BytesRef(\"uchu\"));\n    final PhraseQuery query = new PhraseQuery(fieldName, list.toArray(new BytesRef[list.size()]));\n\n    final QueryScorer fragmentScorer = new QueryScorer(query, fieldName);\n    final SimpleHTMLFormatter formatter = new SimpleHTMLFormatter(\"<b>\", \"</b>\");\n\n    final Highlighter highlighter = new Highlighter(formatter, fragmentScorer);\n    highlighter.setTextFragmenter(new SimpleFragmenter(100));\n    final String fragment = highlighter.getBestFragment(analyzer, fieldName, \"Buchung\");\n\n    assertEquals(\"B<b>uchu</b>ng\",fragment);\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["cb2eac46a4023564c3d2b41ec4bc90eb48e61154"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1eb10453c4217aa50392c51e3e89deb8b779bd51","date":1463648949,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testHighlighterWithPhraseQuery().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testHighlighterWithPhraseQuery() throws IOException, InvalidTokenOffsetsException {\n\n    final Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        return new TokenStreamComponents(new NGramTokenizer(4, 4));\n      }\n    };\n    final String fieldName = \"substring\";\n\n    final List<BytesRef> list = new ArrayList<>();\n    list.add(new BytesRef(\"uchu\"));\n    final PhraseQuery query = new PhraseQuery(fieldName, list.toArray(new BytesRef[list.size()]));\n\n    final QueryScorer fragmentScorer = new QueryScorer(query, fieldName);\n    final SimpleHTMLFormatter formatter = new SimpleHTMLFormatter(\"<b>\", \"</b>\");\n\n    final Highlighter highlighter = new Highlighter(formatter, fragmentScorer);\n    highlighter.setTextFragmenter(new SimpleFragmenter(100));\n    final String fragment = highlighter.getBestFragment(analyzer, fieldName, \"Buchung\");\n\n    assertEquals(\"B<b>uchu</b>ng\",fragment);\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testHighlighterWithPhraseQuery().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testHighlighterWithPhraseQuery() throws IOException, InvalidTokenOffsetsException {\n\n    final Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        return new TokenStreamComponents(new NGramTokenizer(4, 4));\n      }\n    };\n    final String fieldName = \"substring\";\n\n    final List<BytesRef> list = new ArrayList<>();\n    list.add(new BytesRef(\"uchu\"));\n    final PhraseQuery query = new PhraseQuery(fieldName, list.toArray(new BytesRef[list.size()]));\n\n    final QueryScorer fragmentScorer = new QueryScorer(query, fieldName);\n    final SimpleHTMLFormatter formatter = new SimpleHTMLFormatter(\"<b>\", \"</b>\");\n\n    final Highlighter highlighter = new Highlighter(formatter, fragmentScorer);\n    highlighter.setTextFragmenter(new SimpleFragmenter(100));\n    final String fragment = highlighter.getBestFragment(analyzer, fieldName, \"Buchung\");\n\n    assertEquals(\"B<b>uchu</b>ng\",fragment);\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cb2eac46a4023564c3d2b41ec4bc90eb48e61154","date":1473429999,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testHighlighterWithPhraseQuery().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testHighlighterWithPhraseQuery().mjava","sourceNew":"  public void testHighlighterWithPhraseQuery() throws IOException, InvalidTokenOffsetsException {\n    final String fieldName = \"substring\";\n\n    final PhraseQuery query = new PhraseQuery(fieldName, new BytesRef[] { new BytesRef(\"uchu\") });\n\n    assertHighlighting(query, new SimpleHTMLFormatter(\"<b>\", \"</b>\"), \"Buchung\", \"B<b>uchu</b>ng\", fieldName);\n  }\n\n","sourceOld":"  @Test\n  public void testHighlighterWithPhraseQuery() throws IOException, InvalidTokenOffsetsException {\n\n    final Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        return new TokenStreamComponents(new NGramTokenizer(4, 4));\n      }\n    };\n    final String fieldName = \"substring\";\n\n    final List<BytesRef> list = new ArrayList<>();\n    list.add(new BytesRef(\"uchu\"));\n    final PhraseQuery query = new PhraseQuery(fieldName, list.toArray(new BytesRef[list.size()]));\n\n    final QueryScorer fragmentScorer = new QueryScorer(query, fieldName);\n    final SimpleHTMLFormatter formatter = new SimpleHTMLFormatter(\"<b>\", \"</b>\");\n\n    final Highlighter highlighter = new Highlighter(formatter, fragmentScorer);\n    highlighter.setTextFragmenter(new SimpleFragmenter(100));\n    final String fragment = highlighter.getBestFragment(analyzer, fieldName, \"Buchung\");\n\n    assertEquals(\"B<b>uchu</b>ng\",fragment);\n\n  }\n\n","bugFix":["7b0d0cdee6b728fdf8a8cf5bec3320bb7f67fa16"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"89424def13674ea17829b41c5883c54ecc31a132","date":1473767373,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testHighlighterWithPhraseQuery().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testHighlighterWithPhraseQuery().mjava","sourceNew":"  public void testHighlighterWithPhraseQuery() throws IOException, InvalidTokenOffsetsException {\n    final String fieldName = \"substring\";\n\n    final PhraseQuery query = new PhraseQuery(fieldName, new BytesRef[] { new BytesRef(\"uchu\") });\n\n    assertHighlighting(query, new SimpleHTMLFormatter(\"<b>\", \"</b>\"), \"Buchung\", \"B<b>uchu</b>ng\", fieldName);\n  }\n\n","sourceOld":"  @Test\n  public void testHighlighterWithPhraseQuery() throws IOException, InvalidTokenOffsetsException {\n\n    final Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        return new TokenStreamComponents(new NGramTokenizer(4, 4));\n      }\n    };\n    final String fieldName = \"substring\";\n\n    final List<BytesRef> list = new ArrayList<>();\n    list.add(new BytesRef(\"uchu\"));\n    final PhraseQuery query = new PhraseQuery(fieldName, list.toArray(new BytesRef[list.size()]));\n\n    final QueryScorer fragmentScorer = new QueryScorer(query, fieldName);\n    final SimpleHTMLFormatter formatter = new SimpleHTMLFormatter(\"<b>\", \"</b>\");\n\n    final Highlighter highlighter = new Highlighter(formatter, fragmentScorer);\n    highlighter.setTextFragmenter(new SimpleFragmenter(100));\n    final String fragment = highlighter.getBestFragment(analyzer, fieldName, \"Buchung\");\n\n    assertEquals(\"B<b>uchu</b>ng\",fragment);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testHighlighterWithPhraseQuery().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testHighlighterWithPhraseQuery().mjava","sourceNew":"  public void testHighlighterWithPhraseQuery() throws IOException, InvalidTokenOffsetsException {\n    final String fieldName = \"substring\";\n\n    final PhraseQuery query = new PhraseQuery(fieldName, new BytesRef[] { new BytesRef(\"uchu\") });\n\n    assertHighlighting(query, new SimpleHTMLFormatter(\"<b>\", \"</b>\"), \"Buchung\", \"B<b>uchu</b>ng\", fieldName);\n  }\n\n","sourceOld":"  @Test\n  public void testHighlighterWithPhraseQuery() throws IOException, InvalidTokenOffsetsException {\n\n    final Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        return new TokenStreamComponents(new NGramTokenizer(4, 4));\n      }\n    };\n    final String fieldName = \"substring\";\n\n    final List<BytesRef> list = new ArrayList<>();\n    list.add(new BytesRef(\"uchu\"));\n    final PhraseQuery query = new PhraseQuery(fieldName, list.toArray(new BytesRef[list.size()]));\n\n    final QueryScorer fragmentScorer = new QueryScorer(query, fieldName);\n    final SimpleHTMLFormatter formatter = new SimpleHTMLFormatter(\"<b>\", \"</b>\");\n\n    final Highlighter highlighter = new Highlighter(formatter, fragmentScorer);\n    highlighter.setTextFragmenter(new SimpleFragmenter(100));\n    final String fragment = highlighter.getBestFragment(analyzer, fieldName, \"Buchung\");\n\n    assertEquals(\"B<b>uchu</b>ng\",fragment);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testHighlighterWithPhraseQuery().mjava","pathOld":"/dev/null","sourceNew":"  public void testHighlighterWithPhraseQuery() throws IOException, InvalidTokenOffsetsException {\n    final String fieldName = \"substring\";\n\n    final PhraseQuery query = new PhraseQuery(fieldName, new BytesRef[] { new BytesRef(\"uchu\") });\n\n    assertHighlighting(query, new SimpleHTMLFormatter(\"<b>\", \"</b>\"), \"Buchung\", \"B<b>uchu</b>ng\", fieldName);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1eb10453c4217aa50392c51e3e89deb8b779bd51":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7b0d0cdee6b728fdf8a8cf5bec3320bb7f67fa16"],"7b0d0cdee6b728fdf8a8cf5bec3320bb7f67fa16":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cb2eac46a4023564c3d2b41ec4bc90eb48e61154":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["d470c8182e92b264680e34081b75e70a9f2b3c89","89424def13674ea17829b41c5883c54ecc31a132"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1eb10453c4217aa50392c51e3e89deb8b779bd51"],"89424def13674ea17829b41c5883c54ecc31a132":["d470c8182e92b264680e34081b75e70a9f2b3c89","cb2eac46a4023564c3d2b41ec4bc90eb48e61154"]},"commit2Childs":{"1eb10453c4217aa50392c51e3e89deb8b779bd51":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"7b0d0cdee6b728fdf8a8cf5bec3320bb7f67fa16":["1eb10453c4217aa50392c51e3e89deb8b779bd51"],"cb2eac46a4023564c3d2b41ec4bc90eb48e61154":["89424def13674ea17829b41c5883c54ecc31a132"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1eb10453c4217aa50392c51e3e89deb8b779bd51","7b0d0cdee6b728fdf8a8cf5bec3320bb7f67fa16","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"d470c8182e92b264680e34081b75e70a9f2b3c89":["cb2eac46a4023564c3d2b41ec4bc90eb48e61154","17e5da53e4e5bd659e22add9bba1cfa222e7e30d","89424def13674ea17829b41c5883c54ecc31a132"],"89424def13674ea17829b41c5883c54ecc31a132":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}