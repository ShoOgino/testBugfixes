{"path":"solr/core/src/test/org/apache/solr/handler/admin/CoreAdminHandlerTest#testCreateWithSysVars().mjava","commits":[{"id":"90164923c8d1612badfdbea3fadc987a4e5bc7e6","date":1373121947,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/CoreAdminHandlerTest#testCreateWithSysVars().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testCreateWithSysVars() throws Exception {\n    useFactory(null); // I require FS-based indexes for this test.\n\n    final File workDir = new File(TEMP_DIR, getCoreName());\n\n    if (workDir.exists()) {\n      FileUtils.deleteDirectory(workDir);\n    }\n    assertTrue(\"Failed to mkdirs workDir\", workDir.mkdirs());\n    String coreName = \"with_sys_vars\";\n    File instDir = new File(workDir, coreName);\n    File subHome = new File(instDir, \"conf\");\n    assertTrue(\"Failed to make subdirectory \", subHome.mkdirs());\n\n    // Be sure we pick up sysvars when we create this\n    String srcDir = SolrTestCaseJ4.TEST_HOME() + \"/collection1/conf\";\n    FileUtils.copyFile(new File(srcDir, \"schema-tiny.xml\"), new File(subHome, \"schema_ren.xml\"));\n    FileUtils.copyFile(new File(srcDir, \"solrconfig-minimal.xml\"), new File(subHome, \"solrconfig_ren.xml\"));\n    FileUtils.copyFile(new File(srcDir, \"solrconfig.snippet.randomindexconfig.xml\"),\n        new File(subHome, \"solrconfig.snippet.randomindexconfig.xml\"));\n\n    final CoreContainer cores = h.getCoreContainer();\n    cores.setPersistent(false); // we'll do this explicitly as needed\n\n    final CoreAdminHandler admin = new CoreAdminHandler(cores);\n\n    // create a new core (using CoreAdminHandler) w/ properties\n    System.setProperty(\"INSTDIR_TEST\", instDir.getAbsolutePath());\n    System.setProperty(\"CONFIG_TEST\", \"solrconfig_ren.xml\");\n    System.setProperty(\"SCHEMA_TEST\", \"schema_ren.xml\");\n\n    File dataDir = new File(workDir.getAbsolutePath(), \"data_diff\");\n    System.setProperty(\"DATA_TEST\", dataDir.getAbsolutePath());\n\n    SolrQueryResponse resp = new SolrQueryResponse();\n    admin.handleRequestBody\n        (req(CoreAdminParams.ACTION,\n            CoreAdminParams.CoreAdminAction.CREATE.toString(),\n            CoreAdminParams.NAME, getCoreName(),\n            CoreAdminParams.INSTANCE_DIR, \"${INSTDIR_TEST}\",\n            CoreAdminParams.CONFIG, \"${CONFIG_TEST}\",\n            CoreAdminParams.SCHEMA, \"${SCHEMA_TEST}\",\n            CoreAdminParams.DATA_DIR, \"${DATA_TEST}\"),\n            resp);\n    assertNull(\"Exception on create\", resp.getException());\n\n    // verify props are in persisted file\n\n    final File xml = new File(workDir, \"persist-solr.xml\");\n    cores.persistFile(xml);\n\n    // First assert that these values are persisted.\n    assertXmlFile\n        (xml\n            ,\"/solr/cores/core[@name='\" + getCoreName() + \"' and @instanceDir='${INSTDIR_TEST}']\"\n            ,\"/solr/cores/core[@name='\" + getCoreName() + \"' and @dataDir='${DATA_TEST}']\"\n            ,\"/solr/cores/core[@name='\" + getCoreName() + \"' and @schema='${SCHEMA_TEST}']\"\n            ,\"/solr/cores/core[@name='\" + getCoreName() + \"' and @config='${CONFIG_TEST}']\"\n        );\n\n    // Now assert that certain values are properly dereferenced in the process of creating the core, see\n    // SOLR-4982.\n\n    // Should NOT be a datadir named ${DATA_TEST} (literal). This is the bug after all\n    File badDir = new File(instDir, \"${DATA_TEST}\");\n    assertFalse(\"Should have substituted the sys var, found file \" + badDir.getAbsolutePath(), badDir.exists());\n\n    // For the other 3 vars, we couldn't get past creating the core fi dereferencing didn't work correctly.\n\n    // Should have segments in the directory pointed to by the ${DATA_TEST}.\n    File test = new File(dataDir, \"index\");\n    assertTrue(\"Should have found index dir at \" + test.getAbsolutePath(), test.exists());\n    test = new File(test,\"segments.gen\");\n    assertTrue(\"Should have found segments.gen at \" + test.getAbsolutePath(), test.exists());\n\n    // Cleanup\n    FileUtils.deleteDirectory(workDir);\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["1e9ce820cd3ed9efb959c181daaafd22f0c70143"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6e764e9a107f93be9fa3c922bc6a197b3eec387e","date":1373560501,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/CoreAdminHandlerTest#testCreateWithSysVars().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/CoreAdminHandlerTest#testCreateWithSysVars().mjava","sourceNew":"  @Test\n  public void testCreateWithSysVars() throws Exception {\n    useFactory(null); // I require FS-based indexes for this test.\n\n    final File workDir = new File(TEMP_DIR, getCoreName());\n\n    if (workDir.exists()) {\n      FileUtils.deleteDirectory(workDir);\n    }\n    assertTrue(\"Failed to mkdirs workDir\", workDir.mkdirs());\n    String coreName = \"with_sys_vars\";\n    File instDir = new File(workDir, coreName);\n    File subHome = new File(instDir, \"conf\");\n    assertTrue(\"Failed to make subdirectory \", subHome.mkdirs());\n\n    // Be sure we pick up sysvars when we create this\n    String srcDir = SolrTestCaseJ4.TEST_HOME() + \"/collection1/conf\";\n    FileUtils.copyFile(new File(srcDir, \"schema-tiny.xml\"), new File(subHome, \"schema_ren.xml\"));\n    FileUtils.copyFile(new File(srcDir, \"solrconfig-minimal.xml\"), new File(subHome, \"solrconfig_ren.xml\"));\n    FileUtils.copyFile(new File(srcDir, \"solrconfig.snippet.randomindexconfig.xml\"),\n        new File(subHome, \"solrconfig.snippet.randomindexconfig.xml\"));\n\n    final CoreContainer cores = h.getCoreContainer();\n    SolrXMLCoresLocator.NonPersistingLocator locator\n        = (SolrXMLCoresLocator.NonPersistingLocator) cores.getCoresLocator();\n\n    final CoreAdminHandler admin = new CoreAdminHandler(cores);\n\n    // create a new core (using CoreAdminHandler) w/ properties\n    System.setProperty(\"INSTDIR_TEST\", instDir.getAbsolutePath());\n    System.setProperty(\"CONFIG_TEST\", \"solrconfig_ren.xml\");\n    System.setProperty(\"SCHEMA_TEST\", \"schema_ren.xml\");\n\n    File dataDir = new File(workDir.getAbsolutePath(), \"data_diff\");\n    System.setProperty(\"DATA_TEST\", dataDir.getAbsolutePath());\n\n    SolrQueryResponse resp = new SolrQueryResponse();\n    admin.handleRequestBody\n        (req(CoreAdminParams.ACTION,\n            CoreAdminParams.CoreAdminAction.CREATE.toString(),\n            CoreAdminParams.NAME, getCoreName(),\n            CoreAdminParams.INSTANCE_DIR, \"${INSTDIR_TEST}\",\n            CoreAdminParams.CONFIG, \"${CONFIG_TEST}\",\n            CoreAdminParams.SCHEMA, \"${SCHEMA_TEST}\",\n            CoreAdminParams.DATA_DIR, \"${DATA_TEST}\"),\n            resp);\n    assertNull(\"Exception on create\", resp.getException());\n\n    // First assert that these values are persisted.\n    h.validateXPath\n        (locator.xml\n            ,\"/solr/cores/core[@name='\" + getCoreName() + \"' and @instanceDir='${INSTDIR_TEST}']\"\n            ,\"/solr/cores/core[@name='\" + getCoreName() + \"' and @dataDir='${DATA_TEST}']\"\n            ,\"/solr/cores/core[@name='\" + getCoreName() + \"' and @schema='${SCHEMA_TEST}']\"\n            ,\"/solr/cores/core[@name='\" + getCoreName() + \"' and @config='${CONFIG_TEST}']\"\n        );\n\n    // Now assert that certain values are properly dereferenced in the process of creating the core, see\n    // SOLR-4982.\n\n    // Should NOT be a datadir named ${DATA_TEST} (literal). This is the bug after all\n    File badDir = new File(instDir, \"${DATA_TEST}\");\n    assertFalse(\"Should have substituted the sys var, found file \" + badDir.getAbsolutePath(), badDir.exists());\n\n    // For the other 3 vars, we couldn't get past creating the core fi dereferencing didn't work correctly.\n\n    // Should have segments in the directory pointed to by the ${DATA_TEST}.\n    File test = new File(dataDir, \"index\");\n    assertTrue(\"Should have found index dir at \" + test.getAbsolutePath(), test.exists());\n    test = new File(test,\"segments.gen\");\n    assertTrue(\"Should have found segments.gen at \" + test.getAbsolutePath(), test.exists());\n\n    // Cleanup\n    FileUtils.deleteDirectory(workDir);\n\n  }\n\n","sourceOld":"  @Test\n  public void testCreateWithSysVars() throws Exception {\n    useFactory(null); // I require FS-based indexes for this test.\n\n    final File workDir = new File(TEMP_DIR, getCoreName());\n\n    if (workDir.exists()) {\n      FileUtils.deleteDirectory(workDir);\n    }\n    assertTrue(\"Failed to mkdirs workDir\", workDir.mkdirs());\n    String coreName = \"with_sys_vars\";\n    File instDir = new File(workDir, coreName);\n    File subHome = new File(instDir, \"conf\");\n    assertTrue(\"Failed to make subdirectory \", subHome.mkdirs());\n\n    // Be sure we pick up sysvars when we create this\n    String srcDir = SolrTestCaseJ4.TEST_HOME() + \"/collection1/conf\";\n    FileUtils.copyFile(new File(srcDir, \"schema-tiny.xml\"), new File(subHome, \"schema_ren.xml\"));\n    FileUtils.copyFile(new File(srcDir, \"solrconfig-minimal.xml\"), new File(subHome, \"solrconfig_ren.xml\"));\n    FileUtils.copyFile(new File(srcDir, \"solrconfig.snippet.randomindexconfig.xml\"),\n        new File(subHome, \"solrconfig.snippet.randomindexconfig.xml\"));\n\n    final CoreContainer cores = h.getCoreContainer();\n    cores.setPersistent(false); // we'll do this explicitly as needed\n\n    final CoreAdminHandler admin = new CoreAdminHandler(cores);\n\n    // create a new core (using CoreAdminHandler) w/ properties\n    System.setProperty(\"INSTDIR_TEST\", instDir.getAbsolutePath());\n    System.setProperty(\"CONFIG_TEST\", \"solrconfig_ren.xml\");\n    System.setProperty(\"SCHEMA_TEST\", \"schema_ren.xml\");\n\n    File dataDir = new File(workDir.getAbsolutePath(), \"data_diff\");\n    System.setProperty(\"DATA_TEST\", dataDir.getAbsolutePath());\n\n    SolrQueryResponse resp = new SolrQueryResponse();\n    admin.handleRequestBody\n        (req(CoreAdminParams.ACTION,\n            CoreAdminParams.CoreAdminAction.CREATE.toString(),\n            CoreAdminParams.NAME, getCoreName(),\n            CoreAdminParams.INSTANCE_DIR, \"${INSTDIR_TEST}\",\n            CoreAdminParams.CONFIG, \"${CONFIG_TEST}\",\n            CoreAdminParams.SCHEMA, \"${SCHEMA_TEST}\",\n            CoreAdminParams.DATA_DIR, \"${DATA_TEST}\"),\n            resp);\n    assertNull(\"Exception on create\", resp.getException());\n\n    // verify props are in persisted file\n\n    final File xml = new File(workDir, \"persist-solr.xml\");\n    cores.persistFile(xml);\n\n    // First assert that these values are persisted.\n    assertXmlFile\n        (xml\n            ,\"/solr/cores/core[@name='\" + getCoreName() + \"' and @instanceDir='${INSTDIR_TEST}']\"\n            ,\"/solr/cores/core[@name='\" + getCoreName() + \"' and @dataDir='${DATA_TEST}']\"\n            ,\"/solr/cores/core[@name='\" + getCoreName() + \"' and @schema='${SCHEMA_TEST}']\"\n            ,\"/solr/cores/core[@name='\" + getCoreName() + \"' and @config='${CONFIG_TEST}']\"\n        );\n\n    // Now assert that certain values are properly dereferenced in the process of creating the core, see\n    // SOLR-4982.\n\n    // Should NOT be a datadir named ${DATA_TEST} (literal). This is the bug after all\n    File badDir = new File(instDir, \"${DATA_TEST}\");\n    assertFalse(\"Should have substituted the sys var, found file \" + badDir.getAbsolutePath(), badDir.exists());\n\n    // For the other 3 vars, we couldn't get past creating the core fi dereferencing didn't work correctly.\n\n    // Should have segments in the directory pointed to by the ${DATA_TEST}.\n    File test = new File(dataDir, \"index\");\n    assertTrue(\"Should have found index dir at \" + test.getAbsolutePath(), test.exists());\n    test = new File(test,\"segments.gen\");\n    assertTrue(\"Should have found segments.gen at \" + test.getAbsolutePath(), test.exists());\n\n    // Cleanup\n    FileUtils.deleteDirectory(workDir);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/CoreAdminHandlerTest#testCreateWithSysVars().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testCreateWithSysVars() throws Exception {\n    useFactory(null); // I require FS-based indexes for this test.\n\n    final File workDir = new File(TEMP_DIR, getCoreName());\n\n    if (workDir.exists()) {\n      FileUtils.deleteDirectory(workDir);\n    }\n    assertTrue(\"Failed to mkdirs workDir\", workDir.mkdirs());\n    String coreName = \"with_sys_vars\";\n    File instDir = new File(workDir, coreName);\n    File subHome = new File(instDir, \"conf\");\n    assertTrue(\"Failed to make subdirectory \", subHome.mkdirs());\n\n    // Be sure we pick up sysvars when we create this\n    String srcDir = SolrTestCaseJ4.TEST_HOME() + \"/collection1/conf\";\n    FileUtils.copyFile(new File(srcDir, \"schema-tiny.xml\"), new File(subHome, \"schema_ren.xml\"));\n    FileUtils.copyFile(new File(srcDir, \"solrconfig-minimal.xml\"), new File(subHome, \"solrconfig_ren.xml\"));\n    FileUtils.copyFile(new File(srcDir, \"solrconfig.snippet.randomindexconfig.xml\"),\n        new File(subHome, \"solrconfig.snippet.randomindexconfig.xml\"));\n\n    final CoreContainer cores = h.getCoreContainer();\n    SolrXMLCoresLocator.NonPersistingLocator locator\n        = (SolrXMLCoresLocator.NonPersistingLocator) cores.getCoresLocator();\n\n    final CoreAdminHandler admin = new CoreAdminHandler(cores);\n\n    // create a new core (using CoreAdminHandler) w/ properties\n    System.setProperty(\"INSTDIR_TEST\", instDir.getAbsolutePath());\n    System.setProperty(\"CONFIG_TEST\", \"solrconfig_ren.xml\");\n    System.setProperty(\"SCHEMA_TEST\", \"schema_ren.xml\");\n\n    File dataDir = new File(workDir.getAbsolutePath(), \"data_diff\");\n    System.setProperty(\"DATA_TEST\", dataDir.getAbsolutePath());\n\n    SolrQueryResponse resp = new SolrQueryResponse();\n    admin.handleRequestBody\n        (req(CoreAdminParams.ACTION,\n            CoreAdminParams.CoreAdminAction.CREATE.toString(),\n            CoreAdminParams.NAME, getCoreName(),\n            CoreAdminParams.INSTANCE_DIR, \"${INSTDIR_TEST}\",\n            CoreAdminParams.CONFIG, \"${CONFIG_TEST}\",\n            CoreAdminParams.SCHEMA, \"${SCHEMA_TEST}\",\n            CoreAdminParams.DATA_DIR, \"${DATA_TEST}\"),\n            resp);\n    assertNull(\"Exception on create\", resp.getException());\n\n    // First assert that these values are persisted.\n    h.validateXPath\n        (locator.xml\n            ,\"/solr/cores/core[@name='\" + getCoreName() + \"' and @instanceDir='${INSTDIR_TEST}']\"\n            ,\"/solr/cores/core[@name='\" + getCoreName() + \"' and @dataDir='${DATA_TEST}']\"\n            ,\"/solr/cores/core[@name='\" + getCoreName() + \"' and @schema='${SCHEMA_TEST}']\"\n            ,\"/solr/cores/core[@name='\" + getCoreName() + \"' and @config='${CONFIG_TEST}']\"\n        );\n\n    // Now assert that certain values are properly dereferenced in the process of creating the core, see\n    // SOLR-4982.\n\n    // Should NOT be a datadir named ${DATA_TEST} (literal). This is the bug after all\n    File badDir = new File(instDir, \"${DATA_TEST}\");\n    assertFalse(\"Should have substituted the sys var, found file \" + badDir.getAbsolutePath(), badDir.exists());\n\n    // For the other 3 vars, we couldn't get past creating the core fi dereferencing didn't work correctly.\n\n    // Should have segments in the directory pointed to by the ${DATA_TEST}.\n    File test = new File(dataDir, \"index\");\n    assertTrue(\"Should have found index dir at \" + test.getAbsolutePath(), test.exists());\n    test = new File(test,\"segments.gen\");\n    assertTrue(\"Should have found segments.gen at \" + test.getAbsolutePath(), test.exists());\n\n    // Cleanup\n    FileUtils.deleteDirectory(workDir);\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0d579490a72f2e6297eaa648940611234c57cf1","date":1395917140,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/CoreAdminHandlerTest#testCreateWithSysVars().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/CoreAdminHandlerTest#testCreateWithSysVars().mjava","sourceNew":"  @Test\n  public void testCreateWithSysVars() throws Exception {\n    useFactory(null); // I require FS-based indexes for this test.\n\n    final File workDir = TestUtil.createTempDir(getCoreName());\n\n    String coreName = \"with_sys_vars\";\n    File instDir = new File(workDir, coreName);\n    File subHome = new File(instDir, \"conf\");\n    assertTrue(\"Failed to make subdirectory \", subHome.mkdirs());\n\n    // Be sure we pick up sysvars when we create this\n    String srcDir = SolrTestCaseJ4.TEST_HOME() + \"/collection1/conf\";\n    FileUtils.copyFile(new File(srcDir, \"schema-tiny.xml\"), new File(subHome, \"schema_ren.xml\"));\n    FileUtils.copyFile(new File(srcDir, \"solrconfig-minimal.xml\"), new File(subHome, \"solrconfig_ren.xml\"));\n    FileUtils.copyFile(new File(srcDir, \"solrconfig.snippet.randomindexconfig.xml\"),\n        new File(subHome, \"solrconfig.snippet.randomindexconfig.xml\"));\n\n    final CoreContainer cores = h.getCoreContainer();\n    SolrXMLCoresLocator.NonPersistingLocator locator\n        = (SolrXMLCoresLocator.NonPersistingLocator) cores.getCoresLocator();\n\n    final CoreAdminHandler admin = new CoreAdminHandler(cores);\n\n    // create a new core (using CoreAdminHandler) w/ properties\n    System.setProperty(\"INSTDIR_TEST\", instDir.getAbsolutePath());\n    System.setProperty(\"CONFIG_TEST\", \"solrconfig_ren.xml\");\n    System.setProperty(\"SCHEMA_TEST\", \"schema_ren.xml\");\n\n    File dataDir = new File(workDir.getAbsolutePath(), \"data_diff\");\n    System.setProperty(\"DATA_TEST\", dataDir.getAbsolutePath());\n\n    SolrQueryResponse resp = new SolrQueryResponse();\n    admin.handleRequestBody\n        (req(CoreAdminParams.ACTION,\n            CoreAdminParams.CoreAdminAction.CREATE.toString(),\n            CoreAdminParams.NAME, getCoreName(),\n            CoreAdminParams.INSTANCE_DIR, \"${INSTDIR_TEST}\",\n            CoreAdminParams.CONFIG, \"${CONFIG_TEST}\",\n            CoreAdminParams.SCHEMA, \"${SCHEMA_TEST}\",\n            CoreAdminParams.DATA_DIR, \"${DATA_TEST}\"),\n            resp);\n    assertNull(\"Exception on create\", resp.getException());\n\n    // First assert that these values are persisted.\n    h.validateXPath\n        (locator.xml\n            ,\"/solr/cores/core[@name='\" + getCoreName() + \"' and @instanceDir='${INSTDIR_TEST}']\"\n            ,\"/solr/cores/core[@name='\" + getCoreName() + \"' and @dataDir='${DATA_TEST}']\"\n            ,\"/solr/cores/core[@name='\" + getCoreName() + \"' and @schema='${SCHEMA_TEST}']\"\n            ,\"/solr/cores/core[@name='\" + getCoreName() + \"' and @config='${CONFIG_TEST}']\"\n        );\n\n    // Now assert that certain values are properly dereferenced in the process of creating the core, see\n    // SOLR-4982.\n\n    // Should NOT be a datadir named ${DATA_TEST} (literal). This is the bug after all\n    File badDir = new File(instDir, \"${DATA_TEST}\");\n    assertFalse(\"Should have substituted the sys var, found file \" + badDir.getAbsolutePath(), badDir.exists());\n\n    // For the other 3 vars, we couldn't get past creating the core fi dereferencing didn't work correctly.\n\n    // Should have segments in the directory pointed to by the ${DATA_TEST}.\n    File test = new File(dataDir, \"index\");\n    assertTrue(\"Should have found index dir at \" + test.getAbsolutePath(), test.exists());\n    test = new File(test,\"segments.gen\");\n    assertTrue(\"Should have found segments.gen at \" + test.getAbsolutePath(), test.exists());\n\n    // Cleanup\n    FileUtils.deleteDirectory(workDir);\n\n  }\n\n","sourceOld":"  @Test\n  public void testCreateWithSysVars() throws Exception {\n    useFactory(null); // I require FS-based indexes for this test.\n\n    final File workDir = new File(TEMP_DIR, getCoreName());\n\n    if (workDir.exists()) {\n      FileUtils.deleteDirectory(workDir);\n    }\n    assertTrue(\"Failed to mkdirs workDir\", workDir.mkdirs());\n    String coreName = \"with_sys_vars\";\n    File instDir = new File(workDir, coreName);\n    File subHome = new File(instDir, \"conf\");\n    assertTrue(\"Failed to make subdirectory \", subHome.mkdirs());\n\n    // Be sure we pick up sysvars when we create this\n    String srcDir = SolrTestCaseJ4.TEST_HOME() + \"/collection1/conf\";\n    FileUtils.copyFile(new File(srcDir, \"schema-tiny.xml\"), new File(subHome, \"schema_ren.xml\"));\n    FileUtils.copyFile(new File(srcDir, \"solrconfig-minimal.xml\"), new File(subHome, \"solrconfig_ren.xml\"));\n    FileUtils.copyFile(new File(srcDir, \"solrconfig.snippet.randomindexconfig.xml\"),\n        new File(subHome, \"solrconfig.snippet.randomindexconfig.xml\"));\n\n    final CoreContainer cores = h.getCoreContainer();\n    SolrXMLCoresLocator.NonPersistingLocator locator\n        = (SolrXMLCoresLocator.NonPersistingLocator) cores.getCoresLocator();\n\n    final CoreAdminHandler admin = new CoreAdminHandler(cores);\n\n    // create a new core (using CoreAdminHandler) w/ properties\n    System.setProperty(\"INSTDIR_TEST\", instDir.getAbsolutePath());\n    System.setProperty(\"CONFIG_TEST\", \"solrconfig_ren.xml\");\n    System.setProperty(\"SCHEMA_TEST\", \"schema_ren.xml\");\n\n    File dataDir = new File(workDir.getAbsolutePath(), \"data_diff\");\n    System.setProperty(\"DATA_TEST\", dataDir.getAbsolutePath());\n\n    SolrQueryResponse resp = new SolrQueryResponse();\n    admin.handleRequestBody\n        (req(CoreAdminParams.ACTION,\n            CoreAdminParams.CoreAdminAction.CREATE.toString(),\n            CoreAdminParams.NAME, getCoreName(),\n            CoreAdminParams.INSTANCE_DIR, \"${INSTDIR_TEST}\",\n            CoreAdminParams.CONFIG, \"${CONFIG_TEST}\",\n            CoreAdminParams.SCHEMA, \"${SCHEMA_TEST}\",\n            CoreAdminParams.DATA_DIR, \"${DATA_TEST}\"),\n            resp);\n    assertNull(\"Exception on create\", resp.getException());\n\n    // First assert that these values are persisted.\n    h.validateXPath\n        (locator.xml\n            ,\"/solr/cores/core[@name='\" + getCoreName() + \"' and @instanceDir='${INSTDIR_TEST}']\"\n            ,\"/solr/cores/core[@name='\" + getCoreName() + \"' and @dataDir='${DATA_TEST}']\"\n            ,\"/solr/cores/core[@name='\" + getCoreName() + \"' and @schema='${SCHEMA_TEST}']\"\n            ,\"/solr/cores/core[@name='\" + getCoreName() + \"' and @config='${CONFIG_TEST}']\"\n        );\n\n    // Now assert that certain values are properly dereferenced in the process of creating the core, see\n    // SOLR-4982.\n\n    // Should NOT be a datadir named ${DATA_TEST} (literal). This is the bug after all\n    File badDir = new File(instDir, \"${DATA_TEST}\");\n    assertFalse(\"Should have substituted the sys var, found file \" + badDir.getAbsolutePath(), badDir.exists());\n\n    // For the other 3 vars, we couldn't get past creating the core fi dereferencing didn't work correctly.\n\n    // Should have segments in the directory pointed to by the ${DATA_TEST}.\n    File test = new File(dataDir, \"index\");\n    assertTrue(\"Should have found index dir at \" + test.getAbsolutePath(), test.exists());\n    test = new File(test,\"segments.gen\");\n    assertTrue(\"Should have found segments.gen at \" + test.getAbsolutePath(), test.exists());\n\n    // Cleanup\n    FileUtils.deleteDirectory(workDir);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1416f9d09d016a6894cd17e1caac137dad2bba59","date":1395941020,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/CoreAdminHandlerTest#testCreateWithSysVars().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/CoreAdminHandlerTest#testCreateWithSysVars().mjava","sourceNew":"  @Test\n  public void testCreateWithSysVars() throws Exception {\n    useFactory(null); // I require FS-based indexes for this test.\n\n    final File workDir = new File(dataDir, getCoreName());\n\n    if (workDir.exists()) {\n      FileUtils.deleteDirectory(workDir);\n    }\n    assertTrue(\"Failed to mkdirs workDir\", workDir.mkdirs());\n    String coreName = \"with_sys_vars\";\n    File instDir = new File(workDir, coreName);\n    File subHome = new File(instDir, \"conf\");\n    assertTrue(\"Failed to make subdirectory \", subHome.mkdirs());\n\n    // Be sure we pick up sysvars when we create this\n    String srcDir = SolrTestCaseJ4.TEST_HOME() + \"/collection1/conf\";\n    FileUtils.copyFile(new File(srcDir, \"schema-tiny.xml\"), new File(subHome, \"schema_ren.xml\"));\n    FileUtils.copyFile(new File(srcDir, \"solrconfig-minimal.xml\"), new File(subHome, \"solrconfig_ren.xml\"));\n    FileUtils.copyFile(new File(srcDir, \"solrconfig.snippet.randomindexconfig.xml\"),\n        new File(subHome, \"solrconfig.snippet.randomindexconfig.xml\"));\n\n    final CoreContainer cores = h.getCoreContainer();\n    SolrXMLCoresLocator.NonPersistingLocator locator\n        = (SolrXMLCoresLocator.NonPersistingLocator) cores.getCoresLocator();\n\n    final CoreAdminHandler admin = new CoreAdminHandler(cores);\n\n    // create a new core (using CoreAdminHandler) w/ properties\n    System.setProperty(\"INSTDIR_TEST\", instDir.getAbsolutePath());\n    System.setProperty(\"CONFIG_TEST\", \"solrconfig_ren.xml\");\n    System.setProperty(\"SCHEMA_TEST\", \"schema_ren.xml\");\n\n    File dataDir = new File(workDir.getAbsolutePath(), \"data_diff\");\n    System.setProperty(\"DATA_TEST\", dataDir.getAbsolutePath());\n\n    SolrQueryResponse resp = new SolrQueryResponse();\n    admin.handleRequestBody\n        (req(CoreAdminParams.ACTION,\n            CoreAdminParams.CoreAdminAction.CREATE.toString(),\n            CoreAdminParams.NAME, getCoreName(),\n            CoreAdminParams.INSTANCE_DIR, \"${INSTDIR_TEST}\",\n            CoreAdminParams.CONFIG, \"${CONFIG_TEST}\",\n            CoreAdminParams.SCHEMA, \"${SCHEMA_TEST}\",\n            CoreAdminParams.DATA_DIR, \"${DATA_TEST}\"),\n            resp);\n    assertNull(\"Exception on create\", resp.getException());\n\n    // First assert that these values are persisted.\n    h.validateXPath\n        (locator.xml\n            ,\"/solr/cores/core[@name='\" + getCoreName() + \"' and @instanceDir='${INSTDIR_TEST}']\"\n            ,\"/solr/cores/core[@name='\" + getCoreName() + \"' and @dataDir='${DATA_TEST}']\"\n            ,\"/solr/cores/core[@name='\" + getCoreName() + \"' and @schema='${SCHEMA_TEST}']\"\n            ,\"/solr/cores/core[@name='\" + getCoreName() + \"' and @config='${CONFIG_TEST}']\"\n        );\n\n    // Now assert that certain values are properly dereferenced in the process of creating the core, see\n    // SOLR-4982.\n\n    // Should NOT be a datadir named ${DATA_TEST} (literal). This is the bug after all\n    File badDir = new File(instDir, \"${DATA_TEST}\");\n    assertFalse(\"Should have substituted the sys var, found file \" + badDir.getAbsolutePath(), badDir.exists());\n\n    // For the other 3 vars, we couldn't get past creating the core fi dereferencing didn't work correctly.\n\n    // Should have segments in the directory pointed to by the ${DATA_TEST}.\n    File test = new File(dataDir, \"index\");\n    assertTrue(\"Should have found index dir at \" + test.getAbsolutePath(), test.exists());\n    test = new File(test,\"segments.gen\");\n    assertTrue(\"Should have found segments.gen at \" + test.getAbsolutePath(), test.exists());\n\n    // Cleanup\n    FileUtils.deleteDirectory(workDir);\n\n  }\n\n","sourceOld":"  @Test\n  public void testCreateWithSysVars() throws Exception {\n    useFactory(null); // I require FS-based indexes for this test.\n\n    final File workDir = new File(TEMP_DIR, getCoreName());\n\n    if (workDir.exists()) {\n      FileUtils.deleteDirectory(workDir);\n    }\n    assertTrue(\"Failed to mkdirs workDir\", workDir.mkdirs());\n    String coreName = \"with_sys_vars\";\n    File instDir = new File(workDir, coreName);\n    File subHome = new File(instDir, \"conf\");\n    assertTrue(\"Failed to make subdirectory \", subHome.mkdirs());\n\n    // Be sure we pick up sysvars when we create this\n    String srcDir = SolrTestCaseJ4.TEST_HOME() + \"/collection1/conf\";\n    FileUtils.copyFile(new File(srcDir, \"schema-tiny.xml\"), new File(subHome, \"schema_ren.xml\"));\n    FileUtils.copyFile(new File(srcDir, \"solrconfig-minimal.xml\"), new File(subHome, \"solrconfig_ren.xml\"));\n    FileUtils.copyFile(new File(srcDir, \"solrconfig.snippet.randomindexconfig.xml\"),\n        new File(subHome, \"solrconfig.snippet.randomindexconfig.xml\"));\n\n    final CoreContainer cores = h.getCoreContainer();\n    SolrXMLCoresLocator.NonPersistingLocator locator\n        = (SolrXMLCoresLocator.NonPersistingLocator) cores.getCoresLocator();\n\n    final CoreAdminHandler admin = new CoreAdminHandler(cores);\n\n    // create a new core (using CoreAdminHandler) w/ properties\n    System.setProperty(\"INSTDIR_TEST\", instDir.getAbsolutePath());\n    System.setProperty(\"CONFIG_TEST\", \"solrconfig_ren.xml\");\n    System.setProperty(\"SCHEMA_TEST\", \"schema_ren.xml\");\n\n    File dataDir = new File(workDir.getAbsolutePath(), \"data_diff\");\n    System.setProperty(\"DATA_TEST\", dataDir.getAbsolutePath());\n\n    SolrQueryResponse resp = new SolrQueryResponse();\n    admin.handleRequestBody\n        (req(CoreAdminParams.ACTION,\n            CoreAdminParams.CoreAdminAction.CREATE.toString(),\n            CoreAdminParams.NAME, getCoreName(),\n            CoreAdminParams.INSTANCE_DIR, \"${INSTDIR_TEST}\",\n            CoreAdminParams.CONFIG, \"${CONFIG_TEST}\",\n            CoreAdminParams.SCHEMA, \"${SCHEMA_TEST}\",\n            CoreAdminParams.DATA_DIR, \"${DATA_TEST}\"),\n            resp);\n    assertNull(\"Exception on create\", resp.getException());\n\n    // First assert that these values are persisted.\n    h.validateXPath\n        (locator.xml\n            ,\"/solr/cores/core[@name='\" + getCoreName() + \"' and @instanceDir='${INSTDIR_TEST}']\"\n            ,\"/solr/cores/core[@name='\" + getCoreName() + \"' and @dataDir='${DATA_TEST}']\"\n            ,\"/solr/cores/core[@name='\" + getCoreName() + \"' and @schema='${SCHEMA_TEST}']\"\n            ,\"/solr/cores/core[@name='\" + getCoreName() + \"' and @config='${CONFIG_TEST}']\"\n        );\n\n    // Now assert that certain values are properly dereferenced in the process of creating the core, see\n    // SOLR-4982.\n\n    // Should NOT be a datadir named ${DATA_TEST} (literal). This is the bug after all\n    File badDir = new File(instDir, \"${DATA_TEST}\");\n    assertFalse(\"Should have substituted the sys var, found file \" + badDir.getAbsolutePath(), badDir.exists());\n\n    // For the other 3 vars, we couldn't get past creating the core fi dereferencing didn't work correctly.\n\n    // Should have segments in the directory pointed to by the ${DATA_TEST}.\n    File test = new File(dataDir, \"index\");\n    assertTrue(\"Should have found index dir at \" + test.getAbsolutePath(), test.exists());\n    test = new File(test,\"segments.gen\");\n    assertTrue(\"Should have found segments.gen at \" + test.getAbsolutePath(), test.exists());\n\n    // Cleanup\n    FileUtils.deleteDirectory(workDir);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb1f22cfa77230b5f05b7784feae5367f6bbb488","date":1395968145,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/CoreAdminHandlerTest#testCreateWithSysVars().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/CoreAdminHandlerTest#testCreateWithSysVars().mjava","sourceNew":"  @Test\n  public void testCreateWithSysVars() throws Exception {\n    useFactory(null); // I require FS-based indexes for this test.\n\n    final File workDir = createTempDir(getCoreName());\n\n    String coreName = \"with_sys_vars\";\n    File instDir = new File(workDir, coreName);\n    File subHome = new File(instDir, \"conf\");\n    assertTrue(\"Failed to make subdirectory \", subHome.mkdirs());\n\n    // Be sure we pick up sysvars when we create this\n    String srcDir = SolrTestCaseJ4.TEST_HOME() + \"/collection1/conf\";\n    FileUtils.copyFile(new File(srcDir, \"schema-tiny.xml\"), new File(subHome, \"schema_ren.xml\"));\n    FileUtils.copyFile(new File(srcDir, \"solrconfig-minimal.xml\"), new File(subHome, \"solrconfig_ren.xml\"));\n    FileUtils.copyFile(new File(srcDir, \"solrconfig.snippet.randomindexconfig.xml\"),\n        new File(subHome, \"solrconfig.snippet.randomindexconfig.xml\"));\n\n    final CoreContainer cores = h.getCoreContainer();\n    SolrXMLCoresLocator.NonPersistingLocator locator\n        = (SolrXMLCoresLocator.NonPersistingLocator) cores.getCoresLocator();\n\n    final CoreAdminHandler admin = new CoreAdminHandler(cores);\n\n    // create a new core (using CoreAdminHandler) w/ properties\n    System.setProperty(\"INSTDIR_TEST\", instDir.getAbsolutePath());\n    System.setProperty(\"CONFIG_TEST\", \"solrconfig_ren.xml\");\n    System.setProperty(\"SCHEMA_TEST\", \"schema_ren.xml\");\n\n    File dataDir = new File(workDir.getAbsolutePath(), \"data_diff\");\n    System.setProperty(\"DATA_TEST\", dataDir.getAbsolutePath());\n\n    SolrQueryResponse resp = new SolrQueryResponse();\n    admin.handleRequestBody\n        (req(CoreAdminParams.ACTION,\n            CoreAdminParams.CoreAdminAction.CREATE.toString(),\n            CoreAdminParams.NAME, getCoreName(),\n            CoreAdminParams.INSTANCE_DIR, \"${INSTDIR_TEST}\",\n            CoreAdminParams.CONFIG, \"${CONFIG_TEST}\",\n            CoreAdminParams.SCHEMA, \"${SCHEMA_TEST}\",\n            CoreAdminParams.DATA_DIR, \"${DATA_TEST}\"),\n            resp);\n    assertNull(\"Exception on create\", resp.getException());\n\n    // First assert that these values are persisted.\n    h.validateXPath\n        (locator.xml\n            ,\"/solr/cores/core[@name='\" + getCoreName() + \"' and @instanceDir='${INSTDIR_TEST}']\"\n            ,\"/solr/cores/core[@name='\" + getCoreName() + \"' and @dataDir='${DATA_TEST}']\"\n            ,\"/solr/cores/core[@name='\" + getCoreName() + \"' and @schema='${SCHEMA_TEST}']\"\n            ,\"/solr/cores/core[@name='\" + getCoreName() + \"' and @config='${CONFIG_TEST}']\"\n        );\n\n    // Now assert that certain values are properly dereferenced in the process of creating the core, see\n    // SOLR-4982.\n\n    // Should NOT be a datadir named ${DATA_TEST} (literal). This is the bug after all\n    File badDir = new File(instDir, \"${DATA_TEST}\");\n    assertFalse(\"Should have substituted the sys var, found file \" + badDir.getAbsolutePath(), badDir.exists());\n\n    // For the other 3 vars, we couldn't get past creating the core fi dereferencing didn't work correctly.\n\n    // Should have segments in the directory pointed to by the ${DATA_TEST}.\n    File test = new File(dataDir, \"index\");\n    assertTrue(\"Should have found index dir at \" + test.getAbsolutePath(), test.exists());\n    test = new File(test,\"segments.gen\");\n    assertTrue(\"Should have found segments.gen at \" + test.getAbsolutePath(), test.exists());\n\n    // Cleanup\n    FileUtils.deleteDirectory(workDir);\n\n  }\n\n","sourceOld":"  @Test\n  public void testCreateWithSysVars() throws Exception {\n    useFactory(null); // I require FS-based indexes for this test.\n\n    final File workDir = TestUtil.createTempDir(getCoreName());\n\n    String coreName = \"with_sys_vars\";\n    File instDir = new File(workDir, coreName);\n    File subHome = new File(instDir, \"conf\");\n    assertTrue(\"Failed to make subdirectory \", subHome.mkdirs());\n\n    // Be sure we pick up sysvars when we create this\n    String srcDir = SolrTestCaseJ4.TEST_HOME() + \"/collection1/conf\";\n    FileUtils.copyFile(new File(srcDir, \"schema-tiny.xml\"), new File(subHome, \"schema_ren.xml\"));\n    FileUtils.copyFile(new File(srcDir, \"solrconfig-minimal.xml\"), new File(subHome, \"solrconfig_ren.xml\"));\n    FileUtils.copyFile(new File(srcDir, \"solrconfig.snippet.randomindexconfig.xml\"),\n        new File(subHome, \"solrconfig.snippet.randomindexconfig.xml\"));\n\n    final CoreContainer cores = h.getCoreContainer();\n    SolrXMLCoresLocator.NonPersistingLocator locator\n        = (SolrXMLCoresLocator.NonPersistingLocator) cores.getCoresLocator();\n\n    final CoreAdminHandler admin = new CoreAdminHandler(cores);\n\n    // create a new core (using CoreAdminHandler) w/ properties\n    System.setProperty(\"INSTDIR_TEST\", instDir.getAbsolutePath());\n    System.setProperty(\"CONFIG_TEST\", \"solrconfig_ren.xml\");\n    System.setProperty(\"SCHEMA_TEST\", \"schema_ren.xml\");\n\n    File dataDir = new File(workDir.getAbsolutePath(), \"data_diff\");\n    System.setProperty(\"DATA_TEST\", dataDir.getAbsolutePath());\n\n    SolrQueryResponse resp = new SolrQueryResponse();\n    admin.handleRequestBody\n        (req(CoreAdminParams.ACTION,\n            CoreAdminParams.CoreAdminAction.CREATE.toString(),\n            CoreAdminParams.NAME, getCoreName(),\n            CoreAdminParams.INSTANCE_DIR, \"${INSTDIR_TEST}\",\n            CoreAdminParams.CONFIG, \"${CONFIG_TEST}\",\n            CoreAdminParams.SCHEMA, \"${SCHEMA_TEST}\",\n            CoreAdminParams.DATA_DIR, \"${DATA_TEST}\"),\n            resp);\n    assertNull(\"Exception on create\", resp.getException());\n\n    // First assert that these values are persisted.\n    h.validateXPath\n        (locator.xml\n            ,\"/solr/cores/core[@name='\" + getCoreName() + \"' and @instanceDir='${INSTDIR_TEST}']\"\n            ,\"/solr/cores/core[@name='\" + getCoreName() + \"' and @dataDir='${DATA_TEST}']\"\n            ,\"/solr/cores/core[@name='\" + getCoreName() + \"' and @schema='${SCHEMA_TEST}']\"\n            ,\"/solr/cores/core[@name='\" + getCoreName() + \"' and @config='${CONFIG_TEST}']\"\n        );\n\n    // Now assert that certain values are properly dereferenced in the process of creating the core, see\n    // SOLR-4982.\n\n    // Should NOT be a datadir named ${DATA_TEST} (literal). This is the bug after all\n    File badDir = new File(instDir, \"${DATA_TEST}\");\n    assertFalse(\"Should have substituted the sys var, found file \" + badDir.getAbsolutePath(), badDir.exists());\n\n    // For the other 3 vars, we couldn't get past creating the core fi dereferencing didn't work correctly.\n\n    // Should have segments in the directory pointed to by the ${DATA_TEST}.\n    File test = new File(dataDir, \"index\");\n    assertTrue(\"Should have found index dir at \" + test.getAbsolutePath(), test.exists());\n    test = new File(test,\"segments.gen\");\n    assertTrue(\"Should have found segments.gen at \" + test.getAbsolutePath(), test.exists());\n\n    // Cleanup\n    FileUtils.deleteDirectory(workDir);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1e9ce820cd3ed9efb959c181daaafd22f0c70143","date":1396201051,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/CoreAdminHandlerTest#testCreateWithSysVars().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/CoreAdminHandlerTest#testCreateWithSysVars().mjava","sourceNew":"  @Test\n  public void testCreateWithSysVars() throws Exception {\n    useFactory(null); // I require FS-based indexes for this test.\n\n    final File workDir = createTempDir(getCoreName());\n\n    String coreName = \"with_sys_vars\";\n    File instDir = new File(workDir, coreName);\n    File subHome = new File(instDir, \"conf\");\n    assertTrue(\"Failed to make subdirectory \", subHome.mkdirs());\n\n    // Be sure we pick up sysvars when we create this\n    String srcDir = SolrTestCaseJ4.TEST_HOME() + \"/collection1/conf\";\n    FileUtils.copyFile(new File(srcDir, \"schema-tiny.xml\"), new File(subHome, \"schema_ren.xml\"));\n    FileUtils.copyFile(new File(srcDir, \"solrconfig-minimal.xml\"), new File(subHome, \"solrconfig_ren.xml\"));\n    FileUtils.copyFile(new File(srcDir, \"solrconfig.snippet.randomindexconfig.xml\"),\n        new File(subHome, \"solrconfig.snippet.randomindexconfig.xml\"));\n\n    final CoreContainer cores = h.getCoreContainer();\n    SolrXMLCoresLocator.NonPersistingLocator locator\n        = (SolrXMLCoresLocator.NonPersistingLocator) cores.getCoresLocator();\n\n    final CoreAdminHandler admin = new CoreAdminHandler(cores);\n\n    // create a new core (using CoreAdminHandler) w/ properties\n    System.setProperty(\"INSTDIR_TEST\", instDir.getAbsolutePath());\n    System.setProperty(\"CONFIG_TEST\", \"solrconfig_ren.xml\");\n    System.setProperty(\"SCHEMA_TEST\", \"schema_ren.xml\");\n\n    File dataDir = new File(workDir.getAbsolutePath(), \"data_diff\");\n    System.setProperty(\"DATA_TEST\", dataDir.getAbsolutePath());\n\n    SolrQueryResponse resp = new SolrQueryResponse();\n    admin.handleRequestBody\n        (req(CoreAdminParams.ACTION,\n            CoreAdminParams.CoreAdminAction.CREATE.toString(),\n            CoreAdminParams.NAME, getCoreName(),\n            CoreAdminParams.INSTANCE_DIR, \"${INSTDIR_TEST}\",\n            CoreAdminParams.CONFIG, \"${CONFIG_TEST}\",\n            CoreAdminParams.SCHEMA, \"${SCHEMA_TEST}\",\n            CoreAdminParams.DATA_DIR, \"${DATA_TEST}\"),\n            resp);\n    assertNull(\"Exception on create\", resp.getException());\n\n    // First assert that these values are persisted.\n    h.validateXPath\n        (locator.xml\n            ,\"/solr/cores/core[@name='\" + getCoreName() + \"' and @instanceDir='${INSTDIR_TEST}']\"\n            ,\"/solr/cores/core[@name='\" + getCoreName() + \"' and @dataDir='${DATA_TEST}']\"\n            ,\"/solr/cores/core[@name='\" + getCoreName() + \"' and @schema='${SCHEMA_TEST}']\"\n            ,\"/solr/cores/core[@name='\" + getCoreName() + \"' and @config='${CONFIG_TEST}']\"\n        );\n\n    // Now assert that certain values are properly dereferenced in the process of creating the core, see\n    // SOLR-4982.\n\n    // Should NOT be a datadir named ${DATA_TEST} (literal). This is the bug after all\n    File badDir = new File(instDir, \"${DATA_TEST}\");\n    assertFalse(\"Should have substituted the sys var, found file \" + badDir.getAbsolutePath(), badDir.exists());\n\n    // For the other 3 vars, we couldn't get past creating the core fi dereferencing didn't work correctly.\n\n    // Should have segments in the directory pointed to by the ${DATA_TEST}.\n    File test = new File(dataDir, \"index\");\n    assertTrue(\"Should have found index dir at \" + test.getAbsolutePath(), test.exists());\n    test = new File(test,\"segments.gen\");\n    assertTrue(\"Should have found segments.gen at \" + test.getAbsolutePath(), test.exists());\n  }\n\n","sourceOld":"  @Test\n  public void testCreateWithSysVars() throws Exception {\n    useFactory(null); // I require FS-based indexes for this test.\n\n    final File workDir = createTempDir(getCoreName());\n\n    String coreName = \"with_sys_vars\";\n    File instDir = new File(workDir, coreName);\n    File subHome = new File(instDir, \"conf\");\n    assertTrue(\"Failed to make subdirectory \", subHome.mkdirs());\n\n    // Be sure we pick up sysvars when we create this\n    String srcDir = SolrTestCaseJ4.TEST_HOME() + \"/collection1/conf\";\n    FileUtils.copyFile(new File(srcDir, \"schema-tiny.xml\"), new File(subHome, \"schema_ren.xml\"));\n    FileUtils.copyFile(new File(srcDir, \"solrconfig-minimal.xml\"), new File(subHome, \"solrconfig_ren.xml\"));\n    FileUtils.copyFile(new File(srcDir, \"solrconfig.snippet.randomindexconfig.xml\"),\n        new File(subHome, \"solrconfig.snippet.randomindexconfig.xml\"));\n\n    final CoreContainer cores = h.getCoreContainer();\n    SolrXMLCoresLocator.NonPersistingLocator locator\n        = (SolrXMLCoresLocator.NonPersistingLocator) cores.getCoresLocator();\n\n    final CoreAdminHandler admin = new CoreAdminHandler(cores);\n\n    // create a new core (using CoreAdminHandler) w/ properties\n    System.setProperty(\"INSTDIR_TEST\", instDir.getAbsolutePath());\n    System.setProperty(\"CONFIG_TEST\", \"solrconfig_ren.xml\");\n    System.setProperty(\"SCHEMA_TEST\", \"schema_ren.xml\");\n\n    File dataDir = new File(workDir.getAbsolutePath(), \"data_diff\");\n    System.setProperty(\"DATA_TEST\", dataDir.getAbsolutePath());\n\n    SolrQueryResponse resp = new SolrQueryResponse();\n    admin.handleRequestBody\n        (req(CoreAdminParams.ACTION,\n            CoreAdminParams.CoreAdminAction.CREATE.toString(),\n            CoreAdminParams.NAME, getCoreName(),\n            CoreAdminParams.INSTANCE_DIR, \"${INSTDIR_TEST}\",\n            CoreAdminParams.CONFIG, \"${CONFIG_TEST}\",\n            CoreAdminParams.SCHEMA, \"${SCHEMA_TEST}\",\n            CoreAdminParams.DATA_DIR, \"${DATA_TEST}\"),\n            resp);\n    assertNull(\"Exception on create\", resp.getException());\n\n    // First assert that these values are persisted.\n    h.validateXPath\n        (locator.xml\n            ,\"/solr/cores/core[@name='\" + getCoreName() + \"' and @instanceDir='${INSTDIR_TEST}']\"\n            ,\"/solr/cores/core[@name='\" + getCoreName() + \"' and @dataDir='${DATA_TEST}']\"\n            ,\"/solr/cores/core[@name='\" + getCoreName() + \"' and @schema='${SCHEMA_TEST}']\"\n            ,\"/solr/cores/core[@name='\" + getCoreName() + \"' and @config='${CONFIG_TEST}']\"\n        );\n\n    // Now assert that certain values are properly dereferenced in the process of creating the core, see\n    // SOLR-4982.\n\n    // Should NOT be a datadir named ${DATA_TEST} (literal). This is the bug after all\n    File badDir = new File(instDir, \"${DATA_TEST}\");\n    assertFalse(\"Should have substituted the sys var, found file \" + badDir.getAbsolutePath(), badDir.exists());\n\n    // For the other 3 vars, we couldn't get past creating the core fi dereferencing didn't work correctly.\n\n    // Should have segments in the directory pointed to by the ${DATA_TEST}.\n    File test = new File(dataDir, \"index\");\n    assertTrue(\"Should have found index dir at \" + test.getAbsolutePath(), test.exists());\n    test = new File(test,\"segments.gen\");\n    assertTrue(\"Should have found segments.gen at \" + test.getAbsolutePath(), test.exists());\n\n    // Cleanup\n    FileUtils.deleteDirectory(workDir);\n\n  }\n\n","bugFix":["90164923c8d1612badfdbea3fadc987a4e5bc7e6"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a0f5bb79c600763ffe7b8141df59a3169d31e48","date":1396689440,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/CoreAdminHandlerTest#testCreateWithSysVars().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/CoreAdminHandlerTest#testCreateWithSysVars().mjava","sourceNew":"  @Test\n  public void testCreateWithSysVars() throws Exception {\n    useFactory(null); // I require FS-based indexes for this test.\n\n    final File workDir = createTempDir(getCoreName());\n\n    String coreName = \"with_sys_vars\";\n    File instDir = new File(workDir, coreName);\n    File subHome = new File(instDir, \"conf\");\n    assertTrue(\"Failed to make subdirectory \", subHome.mkdirs());\n\n    // Be sure we pick up sysvars when we create this\n    String srcDir = SolrTestCaseJ4.TEST_HOME() + \"/collection1/conf\";\n    FileUtils.copyFile(new File(srcDir, \"schema-tiny.xml\"), new File(subHome, \"schema_ren.xml\"));\n    FileUtils.copyFile(new File(srcDir, \"solrconfig-minimal.xml\"), new File(subHome, \"solrconfig_ren.xml\"));\n    FileUtils.copyFile(new File(srcDir, \"solrconfig.snippet.randomindexconfig.xml\"),\n        new File(subHome, \"solrconfig.snippet.randomindexconfig.xml\"));\n\n    final CoreContainer cores = h.getCoreContainer();\n    SolrXMLCoresLocator.NonPersistingLocator locator\n        = (SolrXMLCoresLocator.NonPersistingLocator) cores.getCoresLocator();\n\n    final CoreAdminHandler admin = new CoreAdminHandler(cores);\n\n    // create a new core (using CoreAdminHandler) w/ properties\n    System.setProperty(\"INSTDIR_TEST\", instDir.getAbsolutePath());\n    System.setProperty(\"CONFIG_TEST\", \"solrconfig_ren.xml\");\n    System.setProperty(\"SCHEMA_TEST\", \"schema_ren.xml\");\n\n    File dataDir = new File(workDir.getAbsolutePath(), \"data_diff\");\n    System.setProperty(\"DATA_TEST\", dataDir.getAbsolutePath());\n\n    SolrQueryResponse resp = new SolrQueryResponse();\n    admin.handleRequestBody\n        (req(CoreAdminParams.ACTION,\n            CoreAdminParams.CoreAdminAction.CREATE.toString(),\n            CoreAdminParams.NAME, getCoreName(),\n            CoreAdminParams.INSTANCE_DIR, \"${INSTDIR_TEST}\",\n            CoreAdminParams.CONFIG, \"${CONFIG_TEST}\",\n            CoreAdminParams.SCHEMA, \"${SCHEMA_TEST}\",\n            CoreAdminParams.DATA_DIR, \"${DATA_TEST}\"),\n            resp);\n    assertNull(\"Exception on create\", resp.getException());\n\n    // First assert that these values are persisted.\n    h.validateXPath\n        (locator.xml\n            ,\"/solr/cores/core[@name='\" + getCoreName() + \"' and @instanceDir='${INSTDIR_TEST}']\"\n            ,\"/solr/cores/core[@name='\" + getCoreName() + \"' and @dataDir='${DATA_TEST}']\"\n            ,\"/solr/cores/core[@name='\" + getCoreName() + \"' and @schema='${SCHEMA_TEST}']\"\n            ,\"/solr/cores/core[@name='\" + getCoreName() + \"' and @config='${CONFIG_TEST}']\"\n        );\n\n    // Now assert that certain values are properly dereferenced in the process of creating the core, see\n    // SOLR-4982.\n\n    // Should NOT be a datadir named ${DATA_TEST} (literal). This is the bug after all\n    File badDir = new File(instDir, \"${DATA_TEST}\");\n    assertFalse(\"Should have substituted the sys var, found file \" + badDir.getAbsolutePath(), badDir.exists());\n\n    // For the other 3 vars, we couldn't get past creating the core fi dereferencing didn't work correctly.\n\n    // Should have segments in the directory pointed to by the ${DATA_TEST}.\n    File test = new File(dataDir, \"index\");\n    assertTrue(\"Should have found index dir at \" + test.getAbsolutePath(), test.exists());\n    test = new File(test,\"segments.gen\");\n    assertTrue(\"Should have found segments.gen at \" + test.getAbsolutePath(), test.exists());\n  }\n\n","sourceOld":"  @Test\n  public void testCreateWithSysVars() throws Exception {\n    useFactory(null); // I require FS-based indexes for this test.\n\n    final File workDir = new File(dataDir, getCoreName());\n\n    if (workDir.exists()) {\n      FileUtils.deleteDirectory(workDir);\n    }\n    assertTrue(\"Failed to mkdirs workDir\", workDir.mkdirs());\n    String coreName = \"with_sys_vars\";\n    File instDir = new File(workDir, coreName);\n    File subHome = new File(instDir, \"conf\");\n    assertTrue(\"Failed to make subdirectory \", subHome.mkdirs());\n\n    // Be sure we pick up sysvars when we create this\n    String srcDir = SolrTestCaseJ4.TEST_HOME() + \"/collection1/conf\";\n    FileUtils.copyFile(new File(srcDir, \"schema-tiny.xml\"), new File(subHome, \"schema_ren.xml\"));\n    FileUtils.copyFile(new File(srcDir, \"solrconfig-minimal.xml\"), new File(subHome, \"solrconfig_ren.xml\"));\n    FileUtils.copyFile(new File(srcDir, \"solrconfig.snippet.randomindexconfig.xml\"),\n        new File(subHome, \"solrconfig.snippet.randomindexconfig.xml\"));\n\n    final CoreContainer cores = h.getCoreContainer();\n    SolrXMLCoresLocator.NonPersistingLocator locator\n        = (SolrXMLCoresLocator.NonPersistingLocator) cores.getCoresLocator();\n\n    final CoreAdminHandler admin = new CoreAdminHandler(cores);\n\n    // create a new core (using CoreAdminHandler) w/ properties\n    System.setProperty(\"INSTDIR_TEST\", instDir.getAbsolutePath());\n    System.setProperty(\"CONFIG_TEST\", \"solrconfig_ren.xml\");\n    System.setProperty(\"SCHEMA_TEST\", \"schema_ren.xml\");\n\n    File dataDir = new File(workDir.getAbsolutePath(), \"data_diff\");\n    System.setProperty(\"DATA_TEST\", dataDir.getAbsolutePath());\n\n    SolrQueryResponse resp = new SolrQueryResponse();\n    admin.handleRequestBody\n        (req(CoreAdminParams.ACTION,\n            CoreAdminParams.CoreAdminAction.CREATE.toString(),\n            CoreAdminParams.NAME, getCoreName(),\n            CoreAdminParams.INSTANCE_DIR, \"${INSTDIR_TEST}\",\n            CoreAdminParams.CONFIG, \"${CONFIG_TEST}\",\n            CoreAdminParams.SCHEMA, \"${SCHEMA_TEST}\",\n            CoreAdminParams.DATA_DIR, \"${DATA_TEST}\"),\n            resp);\n    assertNull(\"Exception on create\", resp.getException());\n\n    // First assert that these values are persisted.\n    h.validateXPath\n        (locator.xml\n            ,\"/solr/cores/core[@name='\" + getCoreName() + \"' and @instanceDir='${INSTDIR_TEST}']\"\n            ,\"/solr/cores/core[@name='\" + getCoreName() + \"' and @dataDir='${DATA_TEST}']\"\n            ,\"/solr/cores/core[@name='\" + getCoreName() + \"' and @schema='${SCHEMA_TEST}']\"\n            ,\"/solr/cores/core[@name='\" + getCoreName() + \"' and @config='${CONFIG_TEST}']\"\n        );\n\n    // Now assert that certain values are properly dereferenced in the process of creating the core, see\n    // SOLR-4982.\n\n    // Should NOT be a datadir named ${DATA_TEST} (literal). This is the bug after all\n    File badDir = new File(instDir, \"${DATA_TEST}\");\n    assertFalse(\"Should have substituted the sys var, found file \" + badDir.getAbsolutePath(), badDir.exists());\n\n    // For the other 3 vars, we couldn't get past creating the core fi dereferencing didn't work correctly.\n\n    // Should have segments in the directory pointed to by the ${DATA_TEST}.\n    File test = new File(dataDir, \"index\");\n    assertTrue(\"Should have found index dir at \" + test.getAbsolutePath(), test.exists());\n    test = new File(test,\"segments.gen\");\n    assertTrue(\"Should have found segments.gen at \" + test.getAbsolutePath(), test.exists());\n\n    // Cleanup\n    FileUtils.deleteDirectory(workDir);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"46e4a8bdfbafda795ef9c39a2bc2d47095770299","date":1410411846,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/CoreAdminHandlerTest#testCreateWithSysVars().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/CoreAdminHandlerTest#testCreateWithSysVars().mjava","sourceNew":"  @Test\n  public void testCreateWithSysVars() throws Exception {\n    useFactory(null); // I require FS-based indexes for this test.\n\n    final File workDir = createTempDir(getCoreName());\n\n    String coreName = \"with_sys_vars\";\n    File instDir = new File(workDir, coreName);\n    File subHome = new File(instDir, \"conf\");\n    assertTrue(\"Failed to make subdirectory \", subHome.mkdirs());\n\n    // Be sure we pick up sysvars when we create this\n    String srcDir = SolrTestCaseJ4.TEST_HOME() + \"/collection1/conf\";\n    FileUtils.copyFile(new File(srcDir, \"schema-tiny.xml\"), new File(subHome, \"schema_ren.xml\"));\n    FileUtils.copyFile(new File(srcDir, \"solrconfig-minimal.xml\"), new File(subHome, \"solrconfig_ren.xml\"));\n    FileUtils.copyFile(new File(srcDir, \"solrconfig.snippet.randomindexconfig.xml\"),\n        new File(subHome, \"solrconfig.snippet.randomindexconfig.xml\"));\n\n    final CoreContainer cores = h.getCoreContainer();\n    SolrXMLCoresLocator.NonPersistingLocator locator\n        = (SolrXMLCoresLocator.NonPersistingLocator) cores.getCoresLocator();\n\n    final CoreAdminHandler admin = new CoreAdminHandler(cores);\n\n    // create a new core (using CoreAdminHandler) w/ properties\n    System.setProperty(\"INSTDIR_TEST\", instDir.getAbsolutePath());\n    System.setProperty(\"CONFIG_TEST\", \"solrconfig_ren.xml\");\n    System.setProperty(\"SCHEMA_TEST\", \"schema_ren.xml\");\n\n    File dataDir = new File(workDir.getAbsolutePath(), \"data_diff\");\n    System.setProperty(\"DATA_TEST\", dataDir.getAbsolutePath());\n\n    SolrQueryResponse resp = new SolrQueryResponse();\n    admin.handleRequestBody\n        (req(CoreAdminParams.ACTION,\n            CoreAdminParams.CoreAdminAction.CREATE.toString(),\n            CoreAdminParams.NAME, getCoreName(),\n            CoreAdminParams.INSTANCE_DIR, \"${INSTDIR_TEST}\",\n            CoreAdminParams.CONFIG, \"${CONFIG_TEST}\",\n            CoreAdminParams.SCHEMA, \"${SCHEMA_TEST}\",\n            CoreAdminParams.DATA_DIR, \"${DATA_TEST}\"),\n            resp);\n    assertNull(\"Exception on create\", resp.getException());\n\n    // First assert that these values are persisted.\n    h.validateXPath\n        (locator.xml\n            ,\"/solr/cores/core[@name='\" + getCoreName() + \"' and @instanceDir='${INSTDIR_TEST}']\"\n            ,\"/solr/cores/core[@name='\" + getCoreName() + \"' and @dataDir='${DATA_TEST}']\"\n            ,\"/solr/cores/core[@name='\" + getCoreName() + \"' and @schema='${SCHEMA_TEST}']\"\n            ,\"/solr/cores/core[@name='\" + getCoreName() + \"' and @config='${CONFIG_TEST}']\"\n        );\n\n    // Now assert that certain values are properly dereferenced in the process of creating the core, see\n    // SOLR-4982.\n\n    // Should NOT be a datadir named ${DATA_TEST} (literal). This is the bug after all\n    File badDir = new File(instDir, \"${DATA_TEST}\");\n    assertFalse(\"Should have substituted the sys var, found file \" + badDir.getAbsolutePath(), badDir.exists());\n\n    // For the other 3 vars, we couldn't get past creating the core fi dereferencing didn't work correctly.\n\n    // Should have segments in the directory pointed to by the ${DATA_TEST}.\n    File test = new File(dataDir, \"index\");\n    assertTrue(\"Should have found index dir at \" + test.getAbsolutePath(), test.exists());\n  }\n\n","sourceOld":"  @Test\n  public void testCreateWithSysVars() throws Exception {\n    useFactory(null); // I require FS-based indexes for this test.\n\n    final File workDir = createTempDir(getCoreName());\n\n    String coreName = \"with_sys_vars\";\n    File instDir = new File(workDir, coreName);\n    File subHome = new File(instDir, \"conf\");\n    assertTrue(\"Failed to make subdirectory \", subHome.mkdirs());\n\n    // Be sure we pick up sysvars when we create this\n    String srcDir = SolrTestCaseJ4.TEST_HOME() + \"/collection1/conf\";\n    FileUtils.copyFile(new File(srcDir, \"schema-tiny.xml\"), new File(subHome, \"schema_ren.xml\"));\n    FileUtils.copyFile(new File(srcDir, \"solrconfig-minimal.xml\"), new File(subHome, \"solrconfig_ren.xml\"));\n    FileUtils.copyFile(new File(srcDir, \"solrconfig.snippet.randomindexconfig.xml\"),\n        new File(subHome, \"solrconfig.snippet.randomindexconfig.xml\"));\n\n    final CoreContainer cores = h.getCoreContainer();\n    SolrXMLCoresLocator.NonPersistingLocator locator\n        = (SolrXMLCoresLocator.NonPersistingLocator) cores.getCoresLocator();\n\n    final CoreAdminHandler admin = new CoreAdminHandler(cores);\n\n    // create a new core (using CoreAdminHandler) w/ properties\n    System.setProperty(\"INSTDIR_TEST\", instDir.getAbsolutePath());\n    System.setProperty(\"CONFIG_TEST\", \"solrconfig_ren.xml\");\n    System.setProperty(\"SCHEMA_TEST\", \"schema_ren.xml\");\n\n    File dataDir = new File(workDir.getAbsolutePath(), \"data_diff\");\n    System.setProperty(\"DATA_TEST\", dataDir.getAbsolutePath());\n\n    SolrQueryResponse resp = new SolrQueryResponse();\n    admin.handleRequestBody\n        (req(CoreAdminParams.ACTION,\n            CoreAdminParams.CoreAdminAction.CREATE.toString(),\n            CoreAdminParams.NAME, getCoreName(),\n            CoreAdminParams.INSTANCE_DIR, \"${INSTDIR_TEST}\",\n            CoreAdminParams.CONFIG, \"${CONFIG_TEST}\",\n            CoreAdminParams.SCHEMA, \"${SCHEMA_TEST}\",\n            CoreAdminParams.DATA_DIR, \"${DATA_TEST}\"),\n            resp);\n    assertNull(\"Exception on create\", resp.getException());\n\n    // First assert that these values are persisted.\n    h.validateXPath\n        (locator.xml\n            ,\"/solr/cores/core[@name='\" + getCoreName() + \"' and @instanceDir='${INSTDIR_TEST}']\"\n            ,\"/solr/cores/core[@name='\" + getCoreName() + \"' and @dataDir='${DATA_TEST}']\"\n            ,\"/solr/cores/core[@name='\" + getCoreName() + \"' and @schema='${SCHEMA_TEST}']\"\n            ,\"/solr/cores/core[@name='\" + getCoreName() + \"' and @config='${CONFIG_TEST}']\"\n        );\n\n    // Now assert that certain values are properly dereferenced in the process of creating the core, see\n    // SOLR-4982.\n\n    // Should NOT be a datadir named ${DATA_TEST} (literal). This is the bug after all\n    File badDir = new File(instDir, \"${DATA_TEST}\");\n    assertFalse(\"Should have substituted the sys var, found file \" + badDir.getAbsolutePath(), badDir.exists());\n\n    // For the other 3 vars, we couldn't get past creating the core fi dereferencing didn't work correctly.\n\n    // Should have segments in the directory pointed to by the ${DATA_TEST}.\n    File test = new File(dataDir, \"index\");\n    assertTrue(\"Should have found index dir at \" + test.getAbsolutePath(), test.exists());\n    test = new File(test,\"segments.gen\");\n    assertTrue(\"Should have found segments.gen at \" + test.getAbsolutePath(), test.exists());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4abec28b874149a7223e32cc7a01704c27790de","date":1410644789,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/CoreAdminHandlerTest#testCreateWithSysVars().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/CoreAdminHandlerTest#testCreateWithSysVars().mjava","sourceNew":"  @Test\n  public void testCreateWithSysVars() throws Exception {\n    useFactory(null); // I require FS-based indexes for this test.\n\n    final File workDir = createTempDir(getCoreName()).toFile();\n\n    String coreName = \"with_sys_vars\";\n    File instDir = new File(workDir, coreName);\n    File subHome = new File(instDir, \"conf\");\n    assertTrue(\"Failed to make subdirectory \", subHome.mkdirs());\n\n    // Be sure we pick up sysvars when we create this\n    String srcDir = SolrTestCaseJ4.TEST_HOME() + \"/collection1/conf\";\n    FileUtils.copyFile(new File(srcDir, \"schema-tiny.xml\"), new File(subHome, \"schema_ren.xml\"));\n    FileUtils.copyFile(new File(srcDir, \"solrconfig-minimal.xml\"), new File(subHome, \"solrconfig_ren.xml\"));\n    FileUtils.copyFile(new File(srcDir, \"solrconfig.snippet.randomindexconfig.xml\"),\n        new File(subHome, \"solrconfig.snippet.randomindexconfig.xml\"));\n\n    final CoreContainer cores = h.getCoreContainer();\n    SolrXMLCoresLocator.NonPersistingLocator locator\n        = (SolrXMLCoresLocator.NonPersistingLocator) cores.getCoresLocator();\n\n    final CoreAdminHandler admin = new CoreAdminHandler(cores);\n\n    // create a new core (using CoreAdminHandler) w/ properties\n    System.setProperty(\"INSTDIR_TEST\", instDir.getAbsolutePath());\n    System.setProperty(\"CONFIG_TEST\", \"solrconfig_ren.xml\");\n    System.setProperty(\"SCHEMA_TEST\", \"schema_ren.xml\");\n\n    File dataDir = new File(workDir.getAbsolutePath(), \"data_diff\");\n    System.setProperty(\"DATA_TEST\", dataDir.getAbsolutePath());\n\n    SolrQueryResponse resp = new SolrQueryResponse();\n    admin.handleRequestBody\n        (req(CoreAdminParams.ACTION,\n            CoreAdminParams.CoreAdminAction.CREATE.toString(),\n            CoreAdminParams.NAME, getCoreName(),\n            CoreAdminParams.INSTANCE_DIR, \"${INSTDIR_TEST}\",\n            CoreAdminParams.CONFIG, \"${CONFIG_TEST}\",\n            CoreAdminParams.SCHEMA, \"${SCHEMA_TEST}\",\n            CoreAdminParams.DATA_DIR, \"${DATA_TEST}\"),\n            resp);\n    assertNull(\"Exception on create\", resp.getException());\n\n    // First assert that these values are persisted.\n    h.validateXPath\n        (locator.xml\n            ,\"/solr/cores/core[@name='\" + getCoreName() + \"' and @instanceDir='${INSTDIR_TEST}']\"\n            ,\"/solr/cores/core[@name='\" + getCoreName() + \"' and @dataDir='${DATA_TEST}']\"\n            ,\"/solr/cores/core[@name='\" + getCoreName() + \"' and @schema='${SCHEMA_TEST}']\"\n            ,\"/solr/cores/core[@name='\" + getCoreName() + \"' and @config='${CONFIG_TEST}']\"\n        );\n\n    // Now assert that certain values are properly dereferenced in the process of creating the core, see\n    // SOLR-4982.\n\n    // Should NOT be a datadir named ${DATA_TEST} (literal). This is the bug after all\n    File badDir = new File(instDir, \"${DATA_TEST}\");\n    assertFalse(\"Should have substituted the sys var, found file \" + badDir.getAbsolutePath(), badDir.exists());\n\n    // For the other 3 vars, we couldn't get past creating the core fi dereferencing didn't work correctly.\n\n    // Should have segments in the directory pointed to by the ${DATA_TEST}.\n    File test = new File(dataDir, \"index\");\n    assertTrue(\"Should have found index dir at \" + test.getAbsolutePath(), test.exists());\n  }\n\n","sourceOld":"  @Test\n  public void testCreateWithSysVars() throws Exception {\n    useFactory(null); // I require FS-based indexes for this test.\n\n    final File workDir = createTempDir(getCoreName());\n\n    String coreName = \"with_sys_vars\";\n    File instDir = new File(workDir, coreName);\n    File subHome = new File(instDir, \"conf\");\n    assertTrue(\"Failed to make subdirectory \", subHome.mkdirs());\n\n    // Be sure we pick up sysvars when we create this\n    String srcDir = SolrTestCaseJ4.TEST_HOME() + \"/collection1/conf\";\n    FileUtils.copyFile(new File(srcDir, \"schema-tiny.xml\"), new File(subHome, \"schema_ren.xml\"));\n    FileUtils.copyFile(new File(srcDir, \"solrconfig-minimal.xml\"), new File(subHome, \"solrconfig_ren.xml\"));\n    FileUtils.copyFile(new File(srcDir, \"solrconfig.snippet.randomindexconfig.xml\"),\n        new File(subHome, \"solrconfig.snippet.randomindexconfig.xml\"));\n\n    final CoreContainer cores = h.getCoreContainer();\n    SolrXMLCoresLocator.NonPersistingLocator locator\n        = (SolrXMLCoresLocator.NonPersistingLocator) cores.getCoresLocator();\n\n    final CoreAdminHandler admin = new CoreAdminHandler(cores);\n\n    // create a new core (using CoreAdminHandler) w/ properties\n    System.setProperty(\"INSTDIR_TEST\", instDir.getAbsolutePath());\n    System.setProperty(\"CONFIG_TEST\", \"solrconfig_ren.xml\");\n    System.setProperty(\"SCHEMA_TEST\", \"schema_ren.xml\");\n\n    File dataDir = new File(workDir.getAbsolutePath(), \"data_diff\");\n    System.setProperty(\"DATA_TEST\", dataDir.getAbsolutePath());\n\n    SolrQueryResponse resp = new SolrQueryResponse();\n    admin.handleRequestBody\n        (req(CoreAdminParams.ACTION,\n            CoreAdminParams.CoreAdminAction.CREATE.toString(),\n            CoreAdminParams.NAME, getCoreName(),\n            CoreAdminParams.INSTANCE_DIR, \"${INSTDIR_TEST}\",\n            CoreAdminParams.CONFIG, \"${CONFIG_TEST}\",\n            CoreAdminParams.SCHEMA, \"${SCHEMA_TEST}\",\n            CoreAdminParams.DATA_DIR, \"${DATA_TEST}\"),\n            resp);\n    assertNull(\"Exception on create\", resp.getException());\n\n    // First assert that these values are persisted.\n    h.validateXPath\n        (locator.xml\n            ,\"/solr/cores/core[@name='\" + getCoreName() + \"' and @instanceDir='${INSTDIR_TEST}']\"\n            ,\"/solr/cores/core[@name='\" + getCoreName() + \"' and @dataDir='${DATA_TEST}']\"\n            ,\"/solr/cores/core[@name='\" + getCoreName() + \"' and @schema='${SCHEMA_TEST}']\"\n            ,\"/solr/cores/core[@name='\" + getCoreName() + \"' and @config='${CONFIG_TEST}']\"\n        );\n\n    // Now assert that certain values are properly dereferenced in the process of creating the core, see\n    // SOLR-4982.\n\n    // Should NOT be a datadir named ${DATA_TEST} (literal). This is the bug after all\n    File badDir = new File(instDir, \"${DATA_TEST}\");\n    assertFalse(\"Should have substituted the sys var, found file \" + badDir.getAbsolutePath(), badDir.exists());\n\n    // For the other 3 vars, we couldn't get past creating the core fi dereferencing didn't work correctly.\n\n    // Should have segments in the directory pointed to by the ${DATA_TEST}.\n    File test = new File(dataDir, \"index\");\n    assertTrue(\"Should have found index dir at \" + test.getAbsolutePath(), test.exists());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd44bec977a26a118d9e809e2de6f7edb5ca0f39","date":1421673929,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/CoreAdminHandlerTest#testCreateWithSysVars().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/CoreAdminHandlerTest#testCreateWithSysVars().mjava","sourceNew":"  @Test\n  public void testCreateWithSysVars() throws Exception {\n    useFactory(null); // I require FS-based indexes for this test.\n\n    final File workDir = createTempDir(getCoreName()).toFile();\n\n    String coreName = \"with_sys_vars\";\n    File instDir = new File(workDir, coreName);\n    File subHome = new File(instDir, \"conf\");\n    assertTrue(\"Failed to make subdirectory \", subHome.mkdirs());\n\n    // Be sure we pick up sysvars when we create this\n    String srcDir = SolrTestCaseJ4.TEST_HOME() + \"/collection1/conf\";\n    FileUtils.copyFile(new File(srcDir, \"schema-tiny.xml\"), new File(subHome, \"schema_ren.xml\"));\n    FileUtils.copyFile(new File(srcDir, \"solrconfig-minimal.xml\"), new File(subHome, \"solrconfig_ren.xml\"));\n    FileUtils.copyFile(new File(srcDir, \"solrconfig.snippet.randomindexconfig.xml\"),\n        new File(subHome, \"solrconfig.snippet.randomindexconfig.xml\"));\n\n    final CoreContainer cores = h.getCoreContainer();\n\n    final CoreAdminHandler admin = new CoreAdminHandler(cores);\n\n    // create a new core (using CoreAdminHandler) w/ properties\n    System.setProperty(\"INSTDIR_TEST\", instDir.getAbsolutePath());\n    System.setProperty(\"CONFIG_TEST\", \"solrconfig_ren.xml\");\n    System.setProperty(\"SCHEMA_TEST\", \"schema_ren.xml\");\n\n    File dataDir = new File(workDir.getAbsolutePath(), \"data_diff\");\n    System.setProperty(\"DATA_TEST\", dataDir.getAbsolutePath());\n\n    SolrQueryResponse resp = new SolrQueryResponse();\n    admin.handleRequestBody\n        (req(CoreAdminParams.ACTION,\n            CoreAdminParams.CoreAdminAction.CREATE.toString(),\n            CoreAdminParams.NAME, getCoreName(),\n            CoreAdminParams.INSTANCE_DIR, \"${INSTDIR_TEST}\",\n            CoreAdminParams.CONFIG, \"${CONFIG_TEST}\",\n            CoreAdminParams.SCHEMA, \"${SCHEMA_TEST}\",\n            CoreAdminParams.DATA_DIR, \"${DATA_TEST}\"),\n            resp);\n    assertNull(\"Exception on create\", resp.getException());\n\n    // Now assert that certain values are properly dereferenced in the process of creating the core, see\n    // SOLR-4982.\n\n    // Should NOT be a datadir named ${DATA_TEST} (literal). This is the bug after all\n    File badDir = new File(instDir, \"${DATA_TEST}\");\n    assertFalse(\"Should have substituted the sys var, found file \" + badDir.getAbsolutePath(), badDir.exists());\n\n    // For the other 3 vars, we couldn't get past creating the core fi dereferencing didn't work correctly.\n\n    // Should have segments in the directory pointed to by the ${DATA_TEST}.\n    File test = new File(dataDir, \"index\");\n    assertTrue(\"Should have found index dir at \" + test.getAbsolutePath(), test.exists());\n  }\n\n","sourceOld":"  @Test\n  public void testCreateWithSysVars() throws Exception {\n    useFactory(null); // I require FS-based indexes for this test.\n\n    final File workDir = createTempDir(getCoreName()).toFile();\n\n    String coreName = \"with_sys_vars\";\n    File instDir = new File(workDir, coreName);\n    File subHome = new File(instDir, \"conf\");\n    assertTrue(\"Failed to make subdirectory \", subHome.mkdirs());\n\n    // Be sure we pick up sysvars when we create this\n    String srcDir = SolrTestCaseJ4.TEST_HOME() + \"/collection1/conf\";\n    FileUtils.copyFile(new File(srcDir, \"schema-tiny.xml\"), new File(subHome, \"schema_ren.xml\"));\n    FileUtils.copyFile(new File(srcDir, \"solrconfig-minimal.xml\"), new File(subHome, \"solrconfig_ren.xml\"));\n    FileUtils.copyFile(new File(srcDir, \"solrconfig.snippet.randomindexconfig.xml\"),\n        new File(subHome, \"solrconfig.snippet.randomindexconfig.xml\"));\n\n    final CoreContainer cores = h.getCoreContainer();\n    SolrXMLCoresLocator.NonPersistingLocator locator\n        = (SolrXMLCoresLocator.NonPersistingLocator) cores.getCoresLocator();\n\n    final CoreAdminHandler admin = new CoreAdminHandler(cores);\n\n    // create a new core (using CoreAdminHandler) w/ properties\n    System.setProperty(\"INSTDIR_TEST\", instDir.getAbsolutePath());\n    System.setProperty(\"CONFIG_TEST\", \"solrconfig_ren.xml\");\n    System.setProperty(\"SCHEMA_TEST\", \"schema_ren.xml\");\n\n    File dataDir = new File(workDir.getAbsolutePath(), \"data_diff\");\n    System.setProperty(\"DATA_TEST\", dataDir.getAbsolutePath());\n\n    SolrQueryResponse resp = new SolrQueryResponse();\n    admin.handleRequestBody\n        (req(CoreAdminParams.ACTION,\n            CoreAdminParams.CoreAdminAction.CREATE.toString(),\n            CoreAdminParams.NAME, getCoreName(),\n            CoreAdminParams.INSTANCE_DIR, \"${INSTDIR_TEST}\",\n            CoreAdminParams.CONFIG, \"${CONFIG_TEST}\",\n            CoreAdminParams.SCHEMA, \"${SCHEMA_TEST}\",\n            CoreAdminParams.DATA_DIR, \"${DATA_TEST}\"),\n            resp);\n    assertNull(\"Exception on create\", resp.getException());\n\n    // First assert that these values are persisted.\n    h.validateXPath\n        (locator.xml\n            ,\"/solr/cores/core[@name='\" + getCoreName() + \"' and @instanceDir='${INSTDIR_TEST}']\"\n            ,\"/solr/cores/core[@name='\" + getCoreName() + \"' and @dataDir='${DATA_TEST}']\"\n            ,\"/solr/cores/core[@name='\" + getCoreName() + \"' and @schema='${SCHEMA_TEST}']\"\n            ,\"/solr/cores/core[@name='\" + getCoreName() + \"' and @config='${CONFIG_TEST}']\"\n        );\n\n    // Now assert that certain values are properly dereferenced in the process of creating the core, see\n    // SOLR-4982.\n\n    // Should NOT be a datadir named ${DATA_TEST} (literal). This is the bug after all\n    File badDir = new File(instDir, \"${DATA_TEST}\");\n    assertFalse(\"Should have substituted the sys var, found file \" + badDir.getAbsolutePath(), badDir.exists());\n\n    // For the other 3 vars, we couldn't get past creating the core fi dereferencing didn't work correctly.\n\n    // Should have segments in the directory pointed to by the ${DATA_TEST}.\n    File test = new File(dataDir, \"index\");\n    assertTrue(\"Should have found index dir at \" + test.getAbsolutePath(), test.exists());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba055e19afc289adcb5bedaf68513793a7254012","date":1591268575,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/CoreAdminHandlerTest#testCreateWithSysVars().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/CoreAdminHandlerTest#testCreateWithSysVars().mjava","sourceNew":"  @Test\n  public void testCreateWithSysVars() throws Exception {\n    useFactory(null); // I require FS-based indexes for this test.\n\n    final File workDir = createTempDir(getCoreName()).toFile();\n\n    String coreName = \"with_sys_vars\";\n    File instDir = new File(workDir, coreName);\n    File subHome = new File(instDir, \"conf\");\n    assertTrue(\"Failed to make subdirectory \", subHome.mkdirs());\n\n    // Be sure we pick up sysvars when we create this\n    String srcDir = SolrTestCaseJ4.TEST_HOME() + \"/collection1/conf\";\n    FileUtils.copyFile(new File(srcDir, \"schema-tiny.xml\"), new File(subHome, \"schema_ren.xml\"));\n    FileUtils.copyFile(new File(srcDir, \"solrconfig-minimal.xml\"), new File(subHome, \"solrconfig_ren.xml\"));\n    FileUtils.copyFile(new File(srcDir, \"solrconfig.snippet.randomindexconfig.xml\"),\n        new File(subHome, \"solrconfig.snippet.randomindexconfig.xml\"));\n\n    final CoreContainer cores = h.getCoreContainer();\n\n    final CoreAdminHandler admin = new CoreAdminHandler(cores);\n\n    // create a new core (using CoreAdminHandler) w/ properties\n    System.setProperty(\"INSTDIR_TEST\", instDir.getAbsolutePath());\n    System.setProperty(\"CONFIG_TEST\", \"solrconfig_ren.xml\");\n    System.setProperty(\"SCHEMA_TEST\", \"schema_ren.xml\");\n\n    File dataDir = new File(workDir.getAbsolutePath(), \"data_diff\");\n    System.setProperty(\"DATA_TEST\", dataDir.getAbsolutePath());\n\n    SolrQueryResponse resp = new SolrQueryResponse();\n    admin.handleRequestBody\n        (req(CoreAdminParams.ACTION,\n            CoreAdminParams.CoreAdminAction.CREATE.toString(),\n            CoreAdminParams.NAME, getCoreName(),\n            CoreAdminParams.INSTANCE_DIR, \"${INSTDIR_TEST}\",\n            CoreAdminParams.CONFIG, \"${CONFIG_TEST}\",\n            CoreAdminParams.SCHEMA, \"${SCHEMA_TEST}\",\n            CoreAdminParams.DATA_DIR, \"${DATA_TEST}\"),\n            resp);\n    assertNull(\"Exception on create\", resp.getException());\n\n    // Now assert that certain values are properly dereferenced in the process of creating the core, see\n    // SOLR-4982.\n\n    // Should NOT be a datadir named ${DATA_TEST} (literal). This is the bug after all\n    File badDir = new File(instDir, \"${DATA_TEST}\");\n    assertFalse(\"Should have substituted the sys var, found file \" + badDir.getAbsolutePath(), badDir.exists());\n\n    // For the other 3 vars, we couldn't get past creating the core fi dereferencing didn't work correctly.\n\n    // Should have segments in the directory pointed to by the ${DATA_TEST}.\n    File test = new File(dataDir, \"index\");\n    assertTrue(\"Should have found index dir at \" + test.getAbsolutePath(), test.exists());\n    admin.close();\n  }\n\n","sourceOld":"  @Test\n  public void testCreateWithSysVars() throws Exception {\n    useFactory(null); // I require FS-based indexes for this test.\n\n    final File workDir = createTempDir(getCoreName()).toFile();\n\n    String coreName = \"with_sys_vars\";\n    File instDir = new File(workDir, coreName);\n    File subHome = new File(instDir, \"conf\");\n    assertTrue(\"Failed to make subdirectory \", subHome.mkdirs());\n\n    // Be sure we pick up sysvars when we create this\n    String srcDir = SolrTestCaseJ4.TEST_HOME() + \"/collection1/conf\";\n    FileUtils.copyFile(new File(srcDir, \"schema-tiny.xml\"), new File(subHome, \"schema_ren.xml\"));\n    FileUtils.copyFile(new File(srcDir, \"solrconfig-minimal.xml\"), new File(subHome, \"solrconfig_ren.xml\"));\n    FileUtils.copyFile(new File(srcDir, \"solrconfig.snippet.randomindexconfig.xml\"),\n        new File(subHome, \"solrconfig.snippet.randomindexconfig.xml\"));\n\n    final CoreContainer cores = h.getCoreContainer();\n\n    final CoreAdminHandler admin = new CoreAdminHandler(cores);\n\n    // create a new core (using CoreAdminHandler) w/ properties\n    System.setProperty(\"INSTDIR_TEST\", instDir.getAbsolutePath());\n    System.setProperty(\"CONFIG_TEST\", \"solrconfig_ren.xml\");\n    System.setProperty(\"SCHEMA_TEST\", \"schema_ren.xml\");\n\n    File dataDir = new File(workDir.getAbsolutePath(), \"data_diff\");\n    System.setProperty(\"DATA_TEST\", dataDir.getAbsolutePath());\n\n    SolrQueryResponse resp = new SolrQueryResponse();\n    admin.handleRequestBody\n        (req(CoreAdminParams.ACTION,\n            CoreAdminParams.CoreAdminAction.CREATE.toString(),\n            CoreAdminParams.NAME, getCoreName(),\n            CoreAdminParams.INSTANCE_DIR, \"${INSTDIR_TEST}\",\n            CoreAdminParams.CONFIG, \"${CONFIG_TEST}\",\n            CoreAdminParams.SCHEMA, \"${SCHEMA_TEST}\",\n            CoreAdminParams.DATA_DIR, \"${DATA_TEST}\"),\n            resp);\n    assertNull(\"Exception on create\", resp.getException());\n\n    // Now assert that certain values are properly dereferenced in the process of creating the core, see\n    // SOLR-4982.\n\n    // Should NOT be a datadir named ${DATA_TEST} (literal). This is the bug after all\n    File badDir = new File(instDir, \"${DATA_TEST}\");\n    assertFalse(\"Should have substituted the sys var, found file \" + badDir.getAbsolutePath(), badDir.exists());\n\n    // For the other 3 vars, we couldn't get past creating the core fi dereferencing didn't work correctly.\n\n    // Should have segments in the directory pointed to by the ${DATA_TEST}.\n    File test = new File(dataDir, \"index\");\n    assertTrue(\"Should have found index dir at \" + test.getAbsolutePath(), test.exists());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c75c0fad5a9b6633e919ce2e9f96e1f0c496d373","date":1592489632,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/CoreAdminHandlerTest#testCreateWithSysVars().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/CoreAdminHandlerTest#testCreateWithSysVars().mjava","sourceNew":"  @Test\n  public void testCreateWithSysVars() throws Exception {\n    useFactory(null); // I require FS-based indexes for this test.\n\n    final File workDir = createTempDir(getCoreName()).toFile();\n\n    String coreName = \"with_sys_vars\";\n    File instDir = new File(workDir, coreName);\n    File subHome = new File(instDir, \"conf\");\n    assertTrue(\"Failed to make subdirectory \", subHome.mkdirs());\n\n    // Be sure we pick up sysvars when we create this\n    String srcDir = SolrTestCaseJ4.TEST_HOME() + \"/collection1/conf\";\n    FileUtils.copyFile(new File(srcDir, \"schema-tiny.xml\"), new File(subHome, \"schema_ren.xml\"));\n    FileUtils.copyFile(new File(srcDir, \"solrconfig-minimal.xml\"), new File(subHome, \"solrconfig_ren.xml\"));\n    FileUtils.copyFile(new File(srcDir, \"solrconfig.snippet.randomindexconfig.xml\"),\n        new File(subHome, \"solrconfig.snippet.randomindexconfig.xml\"));\n\n    final CoreContainer cores = h.getCoreContainer();\n    cores.getAllowPaths().add(workDir.toPath());\n\n    final CoreAdminHandler admin = new CoreAdminHandler(cores);\n\n    // create a new core (using CoreAdminHandler) w/ properties\n    System.setProperty(\"INSTDIR_TEST\", instDir.getAbsolutePath());\n    System.setProperty(\"CONFIG_TEST\", \"solrconfig_ren.xml\");\n    System.setProperty(\"SCHEMA_TEST\", \"schema_ren.xml\");\n\n    File dataDir = new File(workDir.getAbsolutePath(), \"data_diff\");\n    System.setProperty(\"DATA_TEST\", dataDir.getAbsolutePath());\n\n    SolrQueryResponse resp = new SolrQueryResponse();\n    admin.handleRequestBody\n        (req(CoreAdminParams.ACTION,\n            CoreAdminParams.CoreAdminAction.CREATE.toString(),\n            CoreAdminParams.NAME, getCoreName(),\n            CoreAdminParams.INSTANCE_DIR, \"${INSTDIR_TEST}\",\n            CoreAdminParams.CONFIG, \"${CONFIG_TEST}\",\n            CoreAdminParams.SCHEMA, \"${SCHEMA_TEST}\",\n            CoreAdminParams.DATA_DIR, \"${DATA_TEST}\"),\n            resp);\n    assertNull(\"Exception on create\", resp.getException());\n\n    // Now assert that certain values are properly dereferenced in the process of creating the core, see\n    // SOLR-4982.\n\n    // Should NOT be a datadir named ${DATA_TEST} (literal). This is the bug after all\n    File badDir = new File(instDir, \"${DATA_TEST}\");\n    assertFalse(\"Should have substituted the sys var, found file \" + badDir.getAbsolutePath(), badDir.exists());\n\n    // For the other 3 vars, we couldn't get past creating the core fi dereferencing didn't work correctly.\n\n    // Should have segments in the directory pointed to by the ${DATA_TEST}.\n    File test = new File(dataDir, \"index\");\n    assertTrue(\"Should have found index dir at \" + test.getAbsolutePath(), test.exists());\n    admin.close();\n  }\n\n","sourceOld":"  @Test\n  public void testCreateWithSysVars() throws Exception {\n    useFactory(null); // I require FS-based indexes for this test.\n\n    final File workDir = createTempDir(getCoreName()).toFile();\n\n    String coreName = \"with_sys_vars\";\n    File instDir = new File(workDir, coreName);\n    File subHome = new File(instDir, \"conf\");\n    assertTrue(\"Failed to make subdirectory \", subHome.mkdirs());\n\n    // Be sure we pick up sysvars when we create this\n    String srcDir = SolrTestCaseJ4.TEST_HOME() + \"/collection1/conf\";\n    FileUtils.copyFile(new File(srcDir, \"schema-tiny.xml\"), new File(subHome, \"schema_ren.xml\"));\n    FileUtils.copyFile(new File(srcDir, \"solrconfig-minimal.xml\"), new File(subHome, \"solrconfig_ren.xml\"));\n    FileUtils.copyFile(new File(srcDir, \"solrconfig.snippet.randomindexconfig.xml\"),\n        new File(subHome, \"solrconfig.snippet.randomindexconfig.xml\"));\n\n    final CoreContainer cores = h.getCoreContainer();\n\n    final CoreAdminHandler admin = new CoreAdminHandler(cores);\n\n    // create a new core (using CoreAdminHandler) w/ properties\n    System.setProperty(\"INSTDIR_TEST\", instDir.getAbsolutePath());\n    System.setProperty(\"CONFIG_TEST\", \"solrconfig_ren.xml\");\n    System.setProperty(\"SCHEMA_TEST\", \"schema_ren.xml\");\n\n    File dataDir = new File(workDir.getAbsolutePath(), \"data_diff\");\n    System.setProperty(\"DATA_TEST\", dataDir.getAbsolutePath());\n\n    SolrQueryResponse resp = new SolrQueryResponse();\n    admin.handleRequestBody\n        (req(CoreAdminParams.ACTION,\n            CoreAdminParams.CoreAdminAction.CREATE.toString(),\n            CoreAdminParams.NAME, getCoreName(),\n            CoreAdminParams.INSTANCE_DIR, \"${INSTDIR_TEST}\",\n            CoreAdminParams.CONFIG, \"${CONFIG_TEST}\",\n            CoreAdminParams.SCHEMA, \"${SCHEMA_TEST}\",\n            CoreAdminParams.DATA_DIR, \"${DATA_TEST}\"),\n            resp);\n    assertNull(\"Exception on create\", resp.getException());\n\n    // Now assert that certain values are properly dereferenced in the process of creating the core, see\n    // SOLR-4982.\n\n    // Should NOT be a datadir named ${DATA_TEST} (literal). This is the bug after all\n    File badDir = new File(instDir, \"${DATA_TEST}\");\n    assertFalse(\"Should have substituted the sys var, found file \" + badDir.getAbsolutePath(), badDir.exists());\n\n    // For the other 3 vars, we couldn't get past creating the core fi dereferencing didn't work correctly.\n\n    // Should have segments in the directory pointed to by the ${DATA_TEST}.\n    File test = new File(dataDir, \"index\");\n    assertTrue(\"Should have found index dir at \" + test.getAbsolutePath(), test.exists());\n    admin.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bb1f22cfa77230b5f05b7784feae5367f6bbb488":["d0d579490a72f2e6297eaa648940611234c57cf1"],"2a0f5bb79c600763ffe7b8141df59a3169d31e48":["1416f9d09d016a6894cd17e1caac137dad2bba59","1e9ce820cd3ed9efb959c181daaafd22f0c70143"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6e764e9a107f93be9fa3c922bc6a197b3eec387e"],"fd44bec977a26a118d9e809e2de6f7edb5ca0f39":["f4abec28b874149a7223e32cc7a01704c27790de"],"f4abec28b874149a7223e32cc7a01704c27790de":["46e4a8bdfbafda795ef9c39a2bc2d47095770299"],"d0d579490a72f2e6297eaa648940611234c57cf1":["6e764e9a107f93be9fa3c922bc6a197b3eec387e"],"c75c0fad5a9b6633e919ce2e9f96e1f0c496d373":["ba055e19afc289adcb5bedaf68513793a7254012"],"46e4a8bdfbafda795ef9c39a2bc2d47095770299":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"ba055e19afc289adcb5bedaf68513793a7254012":["fd44bec977a26a118d9e809e2de6f7edb5ca0f39"],"1416f9d09d016a6894cd17e1caac137dad2bba59":["6e764e9a107f93be9fa3c922bc6a197b3eec387e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6e764e9a107f93be9fa3c922bc6a197b3eec387e":["90164923c8d1612badfdbea3fadc987a4e5bc7e6"],"90164923c8d1612badfdbea3fadc987a4e5bc7e6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1e9ce820cd3ed9efb959c181daaafd22f0c70143":["bb1f22cfa77230b5f05b7784feae5367f6bbb488"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c75c0fad5a9b6633e919ce2e9f96e1f0c496d373"]},"commit2Childs":{"bb1f22cfa77230b5f05b7784feae5367f6bbb488":["1e9ce820cd3ed9efb959c181daaafd22f0c70143"],"2a0f5bb79c600763ffe7b8141df59a3169d31e48":["46e4a8bdfbafda795ef9c39a2bc2d47095770299"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"fd44bec977a26a118d9e809e2de6f7edb5ca0f39":["ba055e19afc289adcb5bedaf68513793a7254012"],"d0d579490a72f2e6297eaa648940611234c57cf1":["bb1f22cfa77230b5f05b7784feae5367f6bbb488"],"f4abec28b874149a7223e32cc7a01704c27790de":["fd44bec977a26a118d9e809e2de6f7edb5ca0f39"],"c75c0fad5a9b6633e919ce2e9f96e1f0c496d373":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"46e4a8bdfbafda795ef9c39a2bc2d47095770299":["f4abec28b874149a7223e32cc7a01704c27790de"],"ba055e19afc289adcb5bedaf68513793a7254012":["c75c0fad5a9b6633e919ce2e9f96e1f0c496d373"],"1416f9d09d016a6894cd17e1caac137dad2bba59":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["37a0f60745e53927c4c876cfe5b5a58170f0646c","90164923c8d1612badfdbea3fadc987a4e5bc7e6"],"6e764e9a107f93be9fa3c922bc6a197b3eec387e":["37a0f60745e53927c4c876cfe5b5a58170f0646c","d0d579490a72f2e6297eaa648940611234c57cf1","1416f9d09d016a6894cd17e1caac137dad2bba59"],"90164923c8d1612badfdbea3fadc987a4e5bc7e6":["6e764e9a107f93be9fa3c922bc6a197b3eec387e"],"1e9ce820cd3ed9efb959c181daaafd22f0c70143":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}