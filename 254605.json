{"path":"solr/core/src/java/org/apache/solr/handler/FieldAnalysisRequestHandler#resolveAnalysisRequest(SolrQueryRequest).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/FieldAnalysisRequestHandler#resolveAnalysisRequest(SolrQueryRequest).mjava","pathOld":"solr/src/java/org/apache/solr/handler/FieldAnalysisRequestHandler#resolveAnalysisRequest(SolrQueryRequest).mjava","sourceNew":"  /**\n   * Resolves the AnalysisRequest based on the parameters in the given SolrParams.\n   *\n   * @param req the request\n   *\n   * @return AnalysisRequest containing all the information about what needs to be analyzed, and using what\n   *         fields/types\n   */\n  FieldAnalysisRequest resolveAnalysisRequest(SolrQueryRequest req) {\n    SolrParams solrParams = req.getParams();\n    FieldAnalysisRequest analysisRequest = new FieldAnalysisRequest();\n\n    boolean useDefaultSearchField = true;\n    if (solrParams.get(AnalysisParams.FIELD_TYPE) != null) {\n      analysisRequest.setFieldTypes(Arrays.asList(solrParams.get(AnalysisParams.FIELD_TYPE).split(\",\")));\n      useDefaultSearchField = false;\n    }\n    if (solrParams.get(AnalysisParams.FIELD_NAME) != null) {\n      analysisRequest.setFieldNames(Arrays.asList(solrParams.get(AnalysisParams.FIELD_NAME).split(\",\")));\n      useDefaultSearchField = false;\n    }\n    if (useDefaultSearchField)  {\n      analysisRequest.addFieldName(req.getSchema().getDefaultSearchFieldName());\n    }\n    analysisRequest.setQuery(solrParams.get(AnalysisParams.QUERY, solrParams.get(CommonParams.Q)));\n\n    String value = solrParams.get(AnalysisParams.FIELD_VALUE);\n\n    Iterable<ContentStream> streams = req.getContentStreams();\n    if (streams != null) {\n      // NOTE: Only the first content stream is currently processed\n      for (ContentStream stream : streams) {\n        Reader reader = null;\n        try {\n          reader = stream.getReader();\n          value = IOUtils.toString(reader);\n        } catch (IOException e) {\n          // do nothing, leave value set to the request parameter\n        }\n        finally {\n          IOUtils.closeQuietly(reader);\n        }\n        break;\n      }\n    }\n\n    analysisRequest.setFieldValue(value);\n    analysisRequest.setShowMatch(solrParams.getBool(AnalysisParams.SHOW_MATCH, false));\n    return analysisRequest;\n  }\n\n","sourceOld":"  /**\n   * Resolves the AnalysisRequest based on the parameters in the given SolrParams.\n   *\n   * @param req the request\n   *\n   * @return AnalysisRequest containing all the information about what needs to be analyzed, and using what\n   *         fields/types\n   */\n  FieldAnalysisRequest resolveAnalysisRequest(SolrQueryRequest req) {\n    SolrParams solrParams = req.getParams();\n    FieldAnalysisRequest analysisRequest = new FieldAnalysisRequest();\n\n    boolean useDefaultSearchField = true;\n    if (solrParams.get(AnalysisParams.FIELD_TYPE) != null) {\n      analysisRequest.setFieldTypes(Arrays.asList(solrParams.get(AnalysisParams.FIELD_TYPE).split(\",\")));\n      useDefaultSearchField = false;\n    }\n    if (solrParams.get(AnalysisParams.FIELD_NAME) != null) {\n      analysisRequest.setFieldNames(Arrays.asList(solrParams.get(AnalysisParams.FIELD_NAME).split(\",\")));\n      useDefaultSearchField = false;\n    }\n    if (useDefaultSearchField)  {\n      analysisRequest.addFieldName(req.getSchema().getDefaultSearchFieldName());\n    }\n    analysisRequest.setQuery(solrParams.get(AnalysisParams.QUERY, solrParams.get(CommonParams.Q)));\n\n    String value = solrParams.get(AnalysisParams.FIELD_VALUE);\n\n    Iterable<ContentStream> streams = req.getContentStreams();\n    if (streams != null) {\n      // NOTE: Only the first content stream is currently processed\n      for (ContentStream stream : streams) {\n        Reader reader = null;\n        try {\n          reader = stream.getReader();\n          value = IOUtils.toString(reader);\n        } catch (IOException e) {\n          // do nothing, leave value set to the request parameter\n        }\n        finally {\n          IOUtils.closeQuietly(reader);\n        }\n        break;\n      }\n    }\n\n    analysisRequest.setFieldValue(value);\n    analysisRequest.setShowMatch(solrParams.getBool(AnalysisParams.SHOW_MATCH, false));\n    return analysisRequest;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/FieldAnalysisRequestHandler#resolveAnalysisRequest(SolrQueryRequest).mjava","pathOld":"solr/src/java/org/apache/solr/handler/FieldAnalysisRequestHandler#resolveAnalysisRequest(SolrQueryRequest).mjava","sourceNew":"  /**\n   * Resolves the AnalysisRequest based on the parameters in the given SolrParams.\n   *\n   * @param req the request\n   *\n   * @return AnalysisRequest containing all the information about what needs to be analyzed, and using what\n   *         fields/types\n   */\n  FieldAnalysisRequest resolveAnalysisRequest(SolrQueryRequest req) {\n    SolrParams solrParams = req.getParams();\n    FieldAnalysisRequest analysisRequest = new FieldAnalysisRequest();\n\n    boolean useDefaultSearchField = true;\n    if (solrParams.get(AnalysisParams.FIELD_TYPE) != null) {\n      analysisRequest.setFieldTypes(Arrays.asList(solrParams.get(AnalysisParams.FIELD_TYPE).split(\",\")));\n      useDefaultSearchField = false;\n    }\n    if (solrParams.get(AnalysisParams.FIELD_NAME) != null) {\n      analysisRequest.setFieldNames(Arrays.asList(solrParams.get(AnalysisParams.FIELD_NAME).split(\",\")));\n      useDefaultSearchField = false;\n    }\n    if (useDefaultSearchField)  {\n      analysisRequest.addFieldName(req.getSchema().getDefaultSearchFieldName());\n    }\n    analysisRequest.setQuery(solrParams.get(AnalysisParams.QUERY, solrParams.get(CommonParams.Q)));\n\n    String value = solrParams.get(AnalysisParams.FIELD_VALUE);\n\n    Iterable<ContentStream> streams = req.getContentStreams();\n    if (streams != null) {\n      // NOTE: Only the first content stream is currently processed\n      for (ContentStream stream : streams) {\n        Reader reader = null;\n        try {\n          reader = stream.getReader();\n          value = IOUtils.toString(reader);\n        } catch (IOException e) {\n          // do nothing, leave value set to the request parameter\n        }\n        finally {\n          IOUtils.closeQuietly(reader);\n        }\n        break;\n      }\n    }\n\n    analysisRequest.setFieldValue(value);\n    analysisRequest.setShowMatch(solrParams.getBool(AnalysisParams.SHOW_MATCH, false));\n    return analysisRequest;\n  }\n\n","sourceOld":"  /**\n   * Resolves the AnalysisRequest based on the parameters in the given SolrParams.\n   *\n   * @param req the request\n   *\n   * @return AnalysisRequest containing all the information about what needs to be analyzed, and using what\n   *         fields/types\n   */\n  FieldAnalysisRequest resolveAnalysisRequest(SolrQueryRequest req) {\n    SolrParams solrParams = req.getParams();\n    FieldAnalysisRequest analysisRequest = new FieldAnalysisRequest();\n\n    boolean useDefaultSearchField = true;\n    if (solrParams.get(AnalysisParams.FIELD_TYPE) != null) {\n      analysisRequest.setFieldTypes(Arrays.asList(solrParams.get(AnalysisParams.FIELD_TYPE).split(\",\")));\n      useDefaultSearchField = false;\n    }\n    if (solrParams.get(AnalysisParams.FIELD_NAME) != null) {\n      analysisRequest.setFieldNames(Arrays.asList(solrParams.get(AnalysisParams.FIELD_NAME).split(\",\")));\n      useDefaultSearchField = false;\n    }\n    if (useDefaultSearchField)  {\n      analysisRequest.addFieldName(req.getSchema().getDefaultSearchFieldName());\n    }\n    analysisRequest.setQuery(solrParams.get(AnalysisParams.QUERY, solrParams.get(CommonParams.Q)));\n\n    String value = solrParams.get(AnalysisParams.FIELD_VALUE);\n\n    Iterable<ContentStream> streams = req.getContentStreams();\n    if (streams != null) {\n      // NOTE: Only the first content stream is currently processed\n      for (ContentStream stream : streams) {\n        Reader reader = null;\n        try {\n          reader = stream.getReader();\n          value = IOUtils.toString(reader);\n        } catch (IOException e) {\n          // do nothing, leave value set to the request parameter\n        }\n        finally {\n          IOUtils.closeQuietly(reader);\n        }\n        break;\n      }\n    }\n\n    analysisRequest.setFieldValue(value);\n    analysisRequest.setShowMatch(solrParams.getBool(AnalysisParams.SHOW_MATCH, false));\n    return analysisRequest;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/FieldAnalysisRequestHandler#resolveAnalysisRequest(SolrQueryRequest).mjava","pathOld":"solr/src/java/org/apache/solr/handler/FieldAnalysisRequestHandler#resolveAnalysisRequest(SolrQueryRequest).mjava","sourceNew":"  /**\n   * Resolves the AnalysisRequest based on the parameters in the given SolrParams.\n   *\n   * @param req the request\n   *\n   * @return AnalysisRequest containing all the information about what needs to be analyzed, and using what\n   *         fields/types\n   */\n  FieldAnalysisRequest resolveAnalysisRequest(SolrQueryRequest req) {\n    SolrParams solrParams = req.getParams();\n    FieldAnalysisRequest analysisRequest = new FieldAnalysisRequest();\n\n    boolean useDefaultSearchField = true;\n    if (solrParams.get(AnalysisParams.FIELD_TYPE) != null) {\n      analysisRequest.setFieldTypes(Arrays.asList(solrParams.get(AnalysisParams.FIELD_TYPE).split(\",\")));\n      useDefaultSearchField = false;\n    }\n    if (solrParams.get(AnalysisParams.FIELD_NAME) != null) {\n      analysisRequest.setFieldNames(Arrays.asList(solrParams.get(AnalysisParams.FIELD_NAME).split(\",\")));\n      useDefaultSearchField = false;\n    }\n    if (useDefaultSearchField)  {\n      analysisRequest.addFieldName(req.getSchema().getDefaultSearchFieldName());\n    }\n    analysisRequest.setQuery(solrParams.get(AnalysisParams.QUERY, solrParams.get(CommonParams.Q)));\n\n    String value = solrParams.get(AnalysisParams.FIELD_VALUE);\n\n    Iterable<ContentStream> streams = req.getContentStreams();\n    if (streams != null) {\n      // NOTE: Only the first content stream is currently processed\n      for (ContentStream stream : streams) {\n        Reader reader = null;\n        try {\n          reader = stream.getReader();\n          value = IOUtils.toString(reader);\n        } catch (IOException e) {\n          // do nothing, leave value set to the request parameter\n        }\n        finally {\n          IOUtils.closeQuietly(reader);\n        }\n        break;\n      }\n    }\n\n    analysisRequest.setFieldValue(value);\n    analysisRequest.setShowMatch(solrParams.getBool(AnalysisParams.SHOW_MATCH, false));\n    return analysisRequest;\n  }\n\n","sourceOld":"  /**\n   * Resolves the AnalysisRequest based on the parameters in the given SolrParams.\n   *\n   * @param req the request\n   *\n   * @return AnalysisRequest containing all the information about what needs to be analyzed, and using what\n   *         fields/types\n   */\n  FieldAnalysisRequest resolveAnalysisRequest(SolrQueryRequest req) {\n    SolrParams solrParams = req.getParams();\n    FieldAnalysisRequest analysisRequest = new FieldAnalysisRequest();\n\n    boolean useDefaultSearchField = true;\n    if (solrParams.get(AnalysisParams.FIELD_TYPE) != null) {\n      analysisRequest.setFieldTypes(Arrays.asList(solrParams.get(AnalysisParams.FIELD_TYPE).split(\",\")));\n      useDefaultSearchField = false;\n    }\n    if (solrParams.get(AnalysisParams.FIELD_NAME) != null) {\n      analysisRequest.setFieldNames(Arrays.asList(solrParams.get(AnalysisParams.FIELD_NAME).split(\",\")));\n      useDefaultSearchField = false;\n    }\n    if (useDefaultSearchField)  {\n      analysisRequest.addFieldName(req.getSchema().getDefaultSearchFieldName());\n    }\n    analysisRequest.setQuery(solrParams.get(AnalysisParams.QUERY, solrParams.get(CommonParams.Q)));\n\n    String value = solrParams.get(AnalysisParams.FIELD_VALUE);\n\n    Iterable<ContentStream> streams = req.getContentStreams();\n    if (streams != null) {\n      // NOTE: Only the first content stream is currently processed\n      for (ContentStream stream : streams) {\n        Reader reader = null;\n        try {\n          reader = stream.getReader();\n          value = IOUtils.toString(reader);\n        } catch (IOException e) {\n          // do nothing, leave value set to the request parameter\n        }\n        finally {\n          IOUtils.closeQuietly(reader);\n        }\n        break;\n      }\n    }\n\n    analysisRequest.setFieldValue(value);\n    analysisRequest.setShowMatch(solrParams.getBool(AnalysisParams.SHOW_MATCH, false));\n    return analysisRequest;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e2d212bcd6f9794eeca3f3f5a849c007381ccd65","date":1399122096,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/FieldAnalysisRequestHandler#resolveAnalysisRequest(SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/FieldAnalysisRequestHandler#resolveAnalysisRequest(SolrQueryRequest).mjava","sourceNew":"  /**\n   * Resolves the AnalysisRequest based on the parameters in the given SolrParams.\n   *\n   * @param req the request\n   *\n   * @return AnalysisRequest containing all the information about what needs to be analyzed, and using what\n   *         fields/types\n   */\n  FieldAnalysisRequest resolveAnalysisRequest(SolrQueryRequest req) {\n    SolrParams solrParams = req.getParams();\n    FieldAnalysisRequest analysisRequest = new FieldAnalysisRequest();\n\n    boolean useDefaultSearchField = true;\n    if (solrParams.get(AnalysisParams.FIELD_TYPE) != null) {\n      analysisRequest.setFieldTypes(Arrays.asList(solrParams.get(AnalysisParams.FIELD_TYPE).split(\",\")));\n      useDefaultSearchField = false;\n    }\n    if (solrParams.get(AnalysisParams.FIELD_NAME) != null) {\n      analysisRequest.setFieldNames(Arrays.asList(solrParams.get(AnalysisParams.FIELD_NAME).split(\",\")));\n      useDefaultSearchField = false;\n    }\n    if (useDefaultSearchField)  {\n      analysisRequest.addFieldName(req.getSchema().getDefaultSearchFieldName());\n    }\n    analysisRequest.setQuery(solrParams.get(AnalysisParams.QUERY, solrParams.get(CommonParams.Q)));\n\n    String value = solrParams.required().get(AnalysisParams.FIELD_VALUE);\n\n    Iterable<ContentStream> streams = req.getContentStreams();\n    if (streams != null) {\n      // NOTE: Only the first content stream is currently processed\n      for (ContentStream stream : streams) {\n        Reader reader = null;\n        try {\n          reader = stream.getReader();\n          value = IOUtils.toString(reader);\n        } catch (IOException e) {\n          // do nothing, leave value set to the request parameter\n        }\n        finally {\n          IOUtils.closeQuietly(reader);\n        }\n        break;\n      }\n    }\n\n    analysisRequest.setFieldValue(value);\n    analysisRequest.setShowMatch(solrParams.getBool(AnalysisParams.SHOW_MATCH, false));\n    return analysisRequest;\n  }\n\n","sourceOld":"  /**\n   * Resolves the AnalysisRequest based on the parameters in the given SolrParams.\n   *\n   * @param req the request\n   *\n   * @return AnalysisRequest containing all the information about what needs to be analyzed, and using what\n   *         fields/types\n   */\n  FieldAnalysisRequest resolveAnalysisRequest(SolrQueryRequest req) {\n    SolrParams solrParams = req.getParams();\n    FieldAnalysisRequest analysisRequest = new FieldAnalysisRequest();\n\n    boolean useDefaultSearchField = true;\n    if (solrParams.get(AnalysisParams.FIELD_TYPE) != null) {\n      analysisRequest.setFieldTypes(Arrays.asList(solrParams.get(AnalysisParams.FIELD_TYPE).split(\",\")));\n      useDefaultSearchField = false;\n    }\n    if (solrParams.get(AnalysisParams.FIELD_NAME) != null) {\n      analysisRequest.setFieldNames(Arrays.asList(solrParams.get(AnalysisParams.FIELD_NAME).split(\",\")));\n      useDefaultSearchField = false;\n    }\n    if (useDefaultSearchField)  {\n      analysisRequest.addFieldName(req.getSchema().getDefaultSearchFieldName());\n    }\n    analysisRequest.setQuery(solrParams.get(AnalysisParams.QUERY, solrParams.get(CommonParams.Q)));\n\n    String value = solrParams.get(AnalysisParams.FIELD_VALUE);\n\n    Iterable<ContentStream> streams = req.getContentStreams();\n    if (streams != null) {\n      // NOTE: Only the first content stream is currently processed\n      for (ContentStream stream : streams) {\n        Reader reader = null;\n        try {\n          reader = stream.getReader();\n          value = IOUtils.toString(reader);\n        } catch (IOException e) {\n          // do nothing, leave value set to the request parameter\n        }\n        finally {\n          IOUtils.closeQuietly(reader);\n        }\n        break;\n      }\n    }\n\n    analysisRequest.setFieldValue(value);\n    analysisRequest.setShowMatch(solrParams.getBool(AnalysisParams.SHOW_MATCH, false));\n    return analysisRequest;\n  }\n\n","bugFix":["aae616b172ba970c05aecac11e93c3cc09d92295"],"bugIntro":["03a125ccdf6470367771bd730ac25aabb14ba0e3"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"03a125ccdf6470367771bd730ac25aabb14ba0e3","date":1402295908,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/FieldAnalysisRequestHandler#resolveAnalysisRequest(SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/FieldAnalysisRequestHandler#resolveAnalysisRequest(SolrQueryRequest).mjava","sourceNew":"  /**\n   * Resolves the AnalysisRequest based on the parameters in the given SolrParams.\n   *\n   * @param req the request\n   *\n   * @return AnalysisRequest containing all the information about what needs to be analyzed, and using what\n   *         fields/types\n   */\n  FieldAnalysisRequest resolveAnalysisRequest(SolrQueryRequest req) {\n    SolrParams solrParams = req.getParams();\n    FieldAnalysisRequest analysisRequest = new FieldAnalysisRequest();\n\n    boolean useDefaultSearchField = true;\n    if (solrParams.get(AnalysisParams.FIELD_TYPE) != null) {\n      analysisRequest.setFieldTypes(Arrays.asList(solrParams.get(AnalysisParams.FIELD_TYPE).split(\",\")));\n      useDefaultSearchField = false;\n    }\n    if (solrParams.get(AnalysisParams.FIELD_NAME) != null) {\n      analysisRequest.setFieldNames(Arrays.asList(solrParams.get(AnalysisParams.FIELD_NAME).split(\",\")));\n      useDefaultSearchField = false;\n    }\n    if (useDefaultSearchField)  {\n      analysisRequest.addFieldName(req.getSchema().getDefaultSearchFieldName());\n    }\n    analysisRequest.setQuery(solrParams.get(AnalysisParams.QUERY, solrParams.get(CommonParams.Q)));\n\n    String value = solrParams.get(AnalysisParams.FIELD_VALUE);\n    if (analysisRequest.getQuery() == null && value == null)  {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"One of analysis.value or q or analysis.query parameters must be specified\");\n    }\n\n    Iterable<ContentStream> streams = req.getContentStreams();\n    if (streams != null) {\n      // NOTE: Only the first content stream is currently processed\n      for (ContentStream stream : streams) {\n        Reader reader = null;\n        try {\n          reader = stream.getReader();\n          value = IOUtils.toString(reader);\n        } catch (IOException e) {\n          // do nothing, leave value set to the request parameter\n        }\n        finally {\n          IOUtils.closeQuietly(reader);\n        }\n        break;\n      }\n    }\n\n    analysisRequest.setFieldValue(value);\n    analysisRequest.setShowMatch(solrParams.getBool(AnalysisParams.SHOW_MATCH, false));\n    return analysisRequest;\n  }\n\n","sourceOld":"  /**\n   * Resolves the AnalysisRequest based on the parameters in the given SolrParams.\n   *\n   * @param req the request\n   *\n   * @return AnalysisRequest containing all the information about what needs to be analyzed, and using what\n   *         fields/types\n   */\n  FieldAnalysisRequest resolveAnalysisRequest(SolrQueryRequest req) {\n    SolrParams solrParams = req.getParams();\n    FieldAnalysisRequest analysisRequest = new FieldAnalysisRequest();\n\n    boolean useDefaultSearchField = true;\n    if (solrParams.get(AnalysisParams.FIELD_TYPE) != null) {\n      analysisRequest.setFieldTypes(Arrays.asList(solrParams.get(AnalysisParams.FIELD_TYPE).split(\",\")));\n      useDefaultSearchField = false;\n    }\n    if (solrParams.get(AnalysisParams.FIELD_NAME) != null) {\n      analysisRequest.setFieldNames(Arrays.asList(solrParams.get(AnalysisParams.FIELD_NAME).split(\",\")));\n      useDefaultSearchField = false;\n    }\n    if (useDefaultSearchField)  {\n      analysisRequest.addFieldName(req.getSchema().getDefaultSearchFieldName());\n    }\n    analysisRequest.setQuery(solrParams.get(AnalysisParams.QUERY, solrParams.get(CommonParams.Q)));\n\n    String value = solrParams.required().get(AnalysisParams.FIELD_VALUE);\n\n    Iterable<ContentStream> streams = req.getContentStreams();\n    if (streams != null) {\n      // NOTE: Only the first content stream is currently processed\n      for (ContentStream stream : streams) {\n        Reader reader = null;\n        try {\n          reader = stream.getReader();\n          value = IOUtils.toString(reader);\n        } catch (IOException e) {\n          // do nothing, leave value set to the request parameter\n        }\n        finally {\n          IOUtils.closeQuietly(reader);\n        }\n        break;\n      }\n    }\n\n    analysisRequest.setFieldValue(value);\n    analysisRequest.setShowMatch(solrParams.getBool(AnalysisParams.SHOW_MATCH, false));\n    return analysisRequest;\n  }\n\n","bugFix":["e2d212bcd6f9794eeca3f3f5a849c007381ccd65"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"de6ea56d622c2fb7dcfa19e26833cfbf9b9fe868","date":1436579645,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/FieldAnalysisRequestHandler#resolveAnalysisRequest(SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/FieldAnalysisRequestHandler#resolveAnalysisRequest(SolrQueryRequest).mjava","sourceNew":"  /**\n   * Resolves the AnalysisRequest based on the parameters in the given SolrParams.\n   *\n   * @param req the request\n   *\n   * @return AnalysisRequest containing all the information about what needs to be analyzed, and using what\n   *         fields/types\n   */\n  FieldAnalysisRequest resolveAnalysisRequest(SolrQueryRequest req) {\n    SolrParams solrParams = req.getParams();\n    FieldAnalysisRequest analysisRequest = new FieldAnalysisRequest();\n\n    boolean useDefaultSearchField = true;\n    if (solrParams.get(AnalysisParams.FIELD_TYPE) != null) {\n      analysisRequest.setFieldTypes(Arrays.asList(solrParams.get(AnalysisParams.FIELD_TYPE).split(\",\")));\n      useDefaultSearchField = false;\n    }\n    if (solrParams.get(AnalysisParams.FIELD_NAME) != null) {\n      analysisRequest.setFieldNames(Arrays.asList(solrParams.get(AnalysisParams.FIELD_NAME).split(\",\")));\n      useDefaultSearchField = false;\n    }\n    if (useDefaultSearchField)  {\n      analysisRequest.addFieldName(req.getSchema().getDefaultSearchFieldName());\n    }\n    analysisRequest.setQuery(solrParams.get(AnalysisParams.QUERY, solrParams.get(CommonParams.Q)));\n\n    String value = solrParams.get(AnalysisParams.FIELD_VALUE);\n    if (analysisRequest.getQuery() == null && value == null)  {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"One of analysis.fieldvalue, q, or analysis.query parameters must be specified\");\n    }\n\n    Iterable<ContentStream> streams = req.getContentStreams();\n    if (streams != null) {\n      // NOTE: Only the first content stream is currently processed\n      for (ContentStream stream : streams) {\n        Reader reader = null;\n        try {\n          reader = stream.getReader();\n          value = IOUtils.toString(reader);\n        } catch (IOException e) {\n          // do nothing, leave value set to the request parameter\n        }\n        finally {\n          IOUtils.closeQuietly(reader);\n        }\n        break;\n      }\n    }\n\n    analysisRequest.setFieldValue(value);\n    analysisRequest.setShowMatch(solrParams.getBool(AnalysisParams.SHOW_MATCH, false));\n    return analysisRequest;\n  }\n\n","sourceOld":"  /**\n   * Resolves the AnalysisRequest based on the parameters in the given SolrParams.\n   *\n   * @param req the request\n   *\n   * @return AnalysisRequest containing all the information about what needs to be analyzed, and using what\n   *         fields/types\n   */\n  FieldAnalysisRequest resolveAnalysisRequest(SolrQueryRequest req) {\n    SolrParams solrParams = req.getParams();\n    FieldAnalysisRequest analysisRequest = new FieldAnalysisRequest();\n\n    boolean useDefaultSearchField = true;\n    if (solrParams.get(AnalysisParams.FIELD_TYPE) != null) {\n      analysisRequest.setFieldTypes(Arrays.asList(solrParams.get(AnalysisParams.FIELD_TYPE).split(\",\")));\n      useDefaultSearchField = false;\n    }\n    if (solrParams.get(AnalysisParams.FIELD_NAME) != null) {\n      analysisRequest.setFieldNames(Arrays.asList(solrParams.get(AnalysisParams.FIELD_NAME).split(\",\")));\n      useDefaultSearchField = false;\n    }\n    if (useDefaultSearchField)  {\n      analysisRequest.addFieldName(req.getSchema().getDefaultSearchFieldName());\n    }\n    analysisRequest.setQuery(solrParams.get(AnalysisParams.QUERY, solrParams.get(CommonParams.Q)));\n\n    String value = solrParams.get(AnalysisParams.FIELD_VALUE);\n    if (analysisRequest.getQuery() == null && value == null)  {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"One of analysis.value or q or analysis.query parameters must be specified\");\n    }\n\n    Iterable<ContentStream> streams = req.getContentStreams();\n    if (streams != null) {\n      // NOTE: Only the first content stream is currently processed\n      for (ContentStream stream : streams) {\n        Reader reader = null;\n        try {\n          reader = stream.getReader();\n          value = IOUtils.toString(reader);\n        } catch (IOException e) {\n          // do nothing, leave value set to the request parameter\n        }\n        finally {\n          IOUtils.closeQuietly(reader);\n        }\n        break;\n      }\n    }\n\n    analysisRequest.setFieldValue(value);\n    analysisRequest.setShowMatch(solrParams.getBool(AnalysisParams.SHOW_MATCH, false));\n    return analysisRequest;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d057970b5f9fcaabc49d2f54c59a5d2a09da1769","date":1495200448,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/FieldAnalysisRequestHandler#resolveAnalysisRequest(SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/FieldAnalysisRequestHandler#resolveAnalysisRequest(SolrQueryRequest).mjava","sourceNew":"  /**\n   * Resolves the AnalysisRequest based on the parameters in the given SolrParams.\n   *\n   * @param req the request\n   *\n   * @return AnalysisRequest containing all the information about what needs to be analyzed, and using what\n   *         fields/types\n   */\n  FieldAnalysisRequest resolveAnalysisRequest(SolrQueryRequest req) throws SolrException {\n    SolrParams solrParams = req.getParams();\n    FieldAnalysisRequest analysisRequest = new FieldAnalysisRequest();\n\n    boolean useDefaultSearchField = true;\n    if (solrParams.get(AnalysisParams.FIELD_TYPE) != null) {\n      analysisRequest.setFieldTypes(Arrays.asList(solrParams.get(AnalysisParams.FIELD_TYPE).split(\",\")));\n      useDefaultSearchField = false;\n    }\n    if (solrParams.get(AnalysisParams.FIELD_NAME) != null) {\n      analysisRequest.setFieldNames(Arrays.asList(solrParams.get(AnalysisParams.FIELD_NAME).split(\",\")));\n      useDefaultSearchField = false;\n    }\n    if (useDefaultSearchField) {\n      if (solrParams.get(CommonParams.DF) != null) {\n        analysisRequest.addFieldName(solrParams.get(CommonParams.DF));\n      } else {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"Field analysis request must contain one of analysis.fieldtype, analysis.fieldname or df.\");\n      }\n    }\n    analysisRequest.setQuery(solrParams.get(AnalysisParams.QUERY, solrParams.get(CommonParams.Q)));\n\n    String value = solrParams.get(AnalysisParams.FIELD_VALUE);\n    if (analysisRequest.getQuery() == null && value == null)  {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"One of analysis.fieldvalue, q, or analysis.query parameters must be specified\");\n    }\n\n    Iterable<ContentStream> streams = req.getContentStreams();\n    if (streams != null) {\n      // NOTE: Only the first content stream is currently processed\n      for (ContentStream stream : streams) {\n        Reader reader = null;\n        try {\n          reader = stream.getReader();\n          value = IOUtils.toString(reader);\n        } catch (IOException e) {\n          // do nothing, leave value set to the request parameter\n        }\n        finally {\n          IOUtils.closeQuietly(reader);\n        }\n        break;\n      }\n    }\n\n    analysisRequest.setFieldValue(value);\n    analysisRequest.setShowMatch(solrParams.getBool(AnalysisParams.SHOW_MATCH, false));\n    return analysisRequest;\n  }\n\n","sourceOld":"  /**\n   * Resolves the AnalysisRequest based on the parameters in the given SolrParams.\n   *\n   * @param req the request\n   *\n   * @return AnalysisRequest containing all the information about what needs to be analyzed, and using what\n   *         fields/types\n   */\n  FieldAnalysisRequest resolveAnalysisRequest(SolrQueryRequest req) {\n    SolrParams solrParams = req.getParams();\n    FieldAnalysisRequest analysisRequest = new FieldAnalysisRequest();\n\n    boolean useDefaultSearchField = true;\n    if (solrParams.get(AnalysisParams.FIELD_TYPE) != null) {\n      analysisRequest.setFieldTypes(Arrays.asList(solrParams.get(AnalysisParams.FIELD_TYPE).split(\",\")));\n      useDefaultSearchField = false;\n    }\n    if (solrParams.get(AnalysisParams.FIELD_NAME) != null) {\n      analysisRequest.setFieldNames(Arrays.asList(solrParams.get(AnalysisParams.FIELD_NAME).split(\",\")));\n      useDefaultSearchField = false;\n    }\n    if (useDefaultSearchField)  {\n      analysisRequest.addFieldName(req.getSchema().getDefaultSearchFieldName());\n    }\n    analysisRequest.setQuery(solrParams.get(AnalysisParams.QUERY, solrParams.get(CommonParams.Q)));\n\n    String value = solrParams.get(AnalysisParams.FIELD_VALUE);\n    if (analysisRequest.getQuery() == null && value == null)  {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"One of analysis.fieldvalue, q, or analysis.query parameters must be specified\");\n    }\n\n    Iterable<ContentStream> streams = req.getContentStreams();\n    if (streams != null) {\n      // NOTE: Only the first content stream is currently processed\n      for (ContentStream stream : streams) {\n        Reader reader = null;\n        try {\n          reader = stream.getReader();\n          value = IOUtils.toString(reader);\n        } catch (IOException e) {\n          // do nothing, leave value set to the request parameter\n        }\n        finally {\n          IOUtils.closeQuietly(reader);\n        }\n        break;\n      }\n    }\n\n    analysisRequest.setFieldValue(value);\n    analysisRequest.setShowMatch(solrParams.getBool(AnalysisParams.SHOW_MATCH, false));\n    return analysisRequest;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/FieldAnalysisRequestHandler#resolveAnalysisRequest(SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/FieldAnalysisRequestHandler#resolveAnalysisRequest(SolrQueryRequest).mjava","sourceNew":"  /**\n   * Resolves the AnalysisRequest based on the parameters in the given SolrParams.\n   *\n   * @param req the request\n   *\n   * @return AnalysisRequest containing all the information about what needs to be analyzed, and using what\n   *         fields/types\n   */\n  FieldAnalysisRequest resolveAnalysisRequest(SolrQueryRequest req) throws SolrException {\n    SolrParams solrParams = req.getParams();\n    FieldAnalysisRequest analysisRequest = new FieldAnalysisRequest();\n\n    boolean useDefaultSearchField = true;\n    if (solrParams.get(AnalysisParams.FIELD_TYPE) != null) {\n      analysisRequest.setFieldTypes(Arrays.asList(solrParams.get(AnalysisParams.FIELD_TYPE).split(\",\")));\n      useDefaultSearchField = false;\n    }\n    if (solrParams.get(AnalysisParams.FIELD_NAME) != null) {\n      analysisRequest.setFieldNames(Arrays.asList(solrParams.get(AnalysisParams.FIELD_NAME).split(\",\")));\n      useDefaultSearchField = false;\n    }\n    if (useDefaultSearchField) {\n      if (solrParams.get(CommonParams.DF) != null) {\n        analysisRequest.addFieldName(solrParams.get(CommonParams.DF));\n      } else {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"Field analysis request must contain one of analysis.fieldtype, analysis.fieldname or df.\");\n      }\n    }\n    analysisRequest.setQuery(solrParams.get(AnalysisParams.QUERY, solrParams.get(CommonParams.Q)));\n\n    String value = solrParams.get(AnalysisParams.FIELD_VALUE);\n    if (analysisRequest.getQuery() == null && value == null)  {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"One of analysis.fieldvalue, q, or analysis.query parameters must be specified\");\n    }\n\n    Iterable<ContentStream> streams = req.getContentStreams();\n    if (streams != null) {\n      // NOTE: Only the first content stream is currently processed\n      for (ContentStream stream : streams) {\n        Reader reader = null;\n        try {\n          reader = stream.getReader();\n          value = IOUtils.toString(reader);\n        } catch (IOException e) {\n          // do nothing, leave value set to the request parameter\n        }\n        finally {\n          IOUtils.closeQuietly(reader);\n        }\n        break;\n      }\n    }\n\n    analysisRequest.setFieldValue(value);\n    analysisRequest.setShowMatch(solrParams.getBool(AnalysisParams.SHOW_MATCH, false));\n    return analysisRequest;\n  }\n\n","sourceOld":"  /**\n   * Resolves the AnalysisRequest based on the parameters in the given SolrParams.\n   *\n   * @param req the request\n   *\n   * @return AnalysisRequest containing all the information about what needs to be analyzed, and using what\n   *         fields/types\n   */\n  FieldAnalysisRequest resolveAnalysisRequest(SolrQueryRequest req) {\n    SolrParams solrParams = req.getParams();\n    FieldAnalysisRequest analysisRequest = new FieldAnalysisRequest();\n\n    boolean useDefaultSearchField = true;\n    if (solrParams.get(AnalysisParams.FIELD_TYPE) != null) {\n      analysisRequest.setFieldTypes(Arrays.asList(solrParams.get(AnalysisParams.FIELD_TYPE).split(\",\")));\n      useDefaultSearchField = false;\n    }\n    if (solrParams.get(AnalysisParams.FIELD_NAME) != null) {\n      analysisRequest.setFieldNames(Arrays.asList(solrParams.get(AnalysisParams.FIELD_NAME).split(\",\")));\n      useDefaultSearchField = false;\n    }\n    if (useDefaultSearchField)  {\n      analysisRequest.addFieldName(req.getSchema().getDefaultSearchFieldName());\n    }\n    analysisRequest.setQuery(solrParams.get(AnalysisParams.QUERY, solrParams.get(CommonParams.Q)));\n\n    String value = solrParams.get(AnalysisParams.FIELD_VALUE);\n    if (analysisRequest.getQuery() == null && value == null)  {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"One of analysis.fieldvalue, q, or analysis.query parameters must be specified\");\n    }\n\n    Iterable<ContentStream> streams = req.getContentStreams();\n    if (streams != null) {\n      // NOTE: Only the first content stream is currently processed\n      for (ContentStream stream : streams) {\n        Reader reader = null;\n        try {\n          reader = stream.getReader();\n          value = IOUtils.toString(reader);\n        } catch (IOException e) {\n          // do nothing, leave value set to the request parameter\n        }\n        finally {\n          IOUtils.closeQuietly(reader);\n        }\n        break;\n      }\n    }\n\n    analysisRequest.setFieldValue(value);\n    analysisRequest.setShowMatch(solrParams.getBool(AnalysisParams.SHOW_MATCH, false));\n    return analysisRequest;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["de6ea56d622c2fb7dcfa19e26833cfbf9b9fe868","d057970b5f9fcaabc49d2f54c59a5d2a09da1769"],"03a125ccdf6470367771bd730ac25aabb14ba0e3":["e2d212bcd6f9794eeca3f3f5a849c007381ccd65"],"de6ea56d622c2fb7dcfa19e26833cfbf9b9fe868":["03a125ccdf6470367771bd730ac25aabb14ba0e3"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"d057970b5f9fcaabc49d2f54c59a5d2a09da1769":["de6ea56d622c2fb7dcfa19e26833cfbf9b9fe868"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e2d212bcd6f9794eeca3f3f5a849c007381ccd65":["c26f00b574427b55127e869b935845554afde1fa"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d057970b5f9fcaabc49d2f54c59a5d2a09da1769"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"03a125ccdf6470367771bd730ac25aabb14ba0e3":["de6ea56d622c2fb7dcfa19e26833cfbf9b9fe868"],"de6ea56d622c2fb7dcfa19e26833cfbf9b9fe868":["e9017cf144952056066919f1ebc7897ff9bd71b1","d057970b5f9fcaabc49d2f54c59a5d2a09da1769"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["e2d212bcd6f9794eeca3f3f5a849c007381ccd65"],"d057970b5f9fcaabc49d2f54c59a5d2a09da1769":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"e2d212bcd6f9794eeca3f3f5a849c007381ccd65":["03a125ccdf6470367771bd730ac25aabb14ba0e3"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}