{"path":"lucene/core/src/test/org/apache/lucene/codecs/lucene40/TestBitVector#doCompare(BitVector,BitVector).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene40/TestBitVector#doCompare(BitVector,BitVector).mjava","pathOld":"lucene/src/test/org/apache/lucene/codecs/lucene40/TestBitVector#doCompare(BitVector,BitVector).mjava","sourceNew":"    /**\n     * Compare two BitVectors.\n     * This should really be an equals method on the BitVector itself.\n     * @param bv One bit vector\n     * @param compare The second to compare\n     */\n    private boolean doCompare(BitVector bv, BitVector compare) {\n        boolean equal = true;\n        for(int i=0;i<bv.size();i++) {\n            // bits must be equal\n            if(bv.get(i)!=compare.get(i)) {\n                equal = false;\n                break;\n            }\n        }\n        assertEquals(bv.count(), compare.count());\n        return equal;\n    }\n\n","sourceOld":"    /**\n     * Compare two BitVectors.\n     * This should really be an equals method on the BitVector itself.\n     * @param bv One bit vector\n     * @param compare The second to compare\n     */\n    private boolean doCompare(BitVector bv, BitVector compare) {\n        boolean equal = true;\n        for(int i=0;i<bv.size();i++) {\n            // bits must be equal\n            if(bv.get(i)!=compare.get(i)) {\n                equal = false;\n                break;\n            }\n        }\n        assertEquals(bv.count(), compare.count());\n        return equal;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cc45c615dbb82bf79d5f9550286098367874fbf","date":1409571423,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene40/TestBitVector#doCompare(BitVector,BitVector).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene40/TestBitVector#doCompare(BitVector,BitVector).mjava","sourceNew":"    /**\n     * Compare two BitVectors.\n     * This should really be an equals method on the BitVector itself.\n     * @param bv One bit vector\n     * @param compare The second to compare\n     */\n    private boolean doCompare(BitVector bv, BitVector compare) {\n        boolean equal = true;\n        for(int i=0;i<bv.size();i++) {\n            // bits must be equal\n            if(bv.get(i)!=compare.get(i)) {\n                equal = false;\n                break;\n            }\n        }\n        assertEquals(bv.count(), compare.count());\n        return equal;\n    }\n\n","sourceOld":"    /**\n     * Compare two BitVectors.\n     * This should really be an equals method on the BitVector itself.\n     * @param bv One bit vector\n     * @param compare The second to compare\n     */\n    private boolean doCompare(BitVector bv, BitVector compare) {\n        boolean equal = true;\n        for(int i=0;i<bv.size();i++) {\n            // bits must be equal\n            if(bv.get(i)!=compare.get(i)) {\n                equal = false;\n                break;\n            }\n        }\n        assertEquals(bv.count(), compare.count());\n        return equal;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"402ad3ddc9da7b70da1b167667a60ece6a1381fb","date":1409656478,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene40/TestBitVector#doCompare(BitVector,BitVector).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene40/TestBitVector#doCompare(BitVector,BitVector).mjava","sourceNew":"    /**\n     * Compare two BitVectors.\n     * This should really be an equals method on the BitVector itself.\n     * @param bv One bit vector\n     * @param compare The second to compare\n     */\n    private boolean doCompare(BitVector bv, BitVector compare) {\n        boolean equal = true;\n        for(int i=0;i<bv.size();i++) {\n            // bits must be equal\n            if(bv.get(i)!=compare.get(i)) {\n                equal = false;\n                break;\n            }\n        }\n        assertEquals(bv.count(), compare.count());\n        return equal;\n    }\n\n","sourceOld":"    /**\n     * Compare two BitVectors.\n     * This should really be an equals method on the BitVector itself.\n     * @param bv One bit vector\n     * @param compare The second to compare\n     */\n    private boolean doCompare(BitVector bv, BitVector compare) {\n        boolean equal = true;\n        for(int i=0;i<bv.size();i++) {\n            // bits must be equal\n            if(bv.get(i)!=compare.get(i)) {\n                equal = false;\n                break;\n            }\n        }\n        assertEquals(bv.count(), compare.count());\n        return equal;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cc45c615dbb82bf79d5f9550286098367874fbf":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","4cc45c615dbb82bf79d5f9550286098367874fbf"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["4cc45c615dbb82bf79d5f9550286098367874fbf","402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4cc45c615dbb82bf79d5f9550286098367874fbf":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}