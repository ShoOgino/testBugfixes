{"path":"lucene/contrib/demo/src/java/org/apache/lucene/demo/IndexHTML#indexDocs(File).mjava","commits":[{"id":"790c3f61c9b891d66d919c5d10db9fa5216eb0f1","date":1274818604,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/demo/src/java/org/apache/lucene/demo/IndexHTML#indexDocs(File).mjava","pathOld":"lucene/src/demo/org/apache/lucene/demo/IndexHTML#indexDocs(File).mjava","sourceNew":"  private static void indexDocs(File file) throws Exception {\n    if (file.isDirectory()) {\t\t\t  // if a directory\n      String[] files = file.list();\t\t  // list its files\n      Arrays.sort(files);\t\t\t  // sort the files\n      for (int i = 0; i < files.length; i++)\t  // recursively index them\n        indexDocs(new File(file, files[i]));\n\n    } else if (file.getPath().endsWith(\".html\") || // index .html files\n      file.getPath().endsWith(\".htm\") || // index .htm files\n      file.getPath().endsWith(\".txt\")) { // index .txt files\n\n      if (uidIter != null) {\n        String uid = HTMLDocument.uid(file);\t  // construct uid for doc\n\n        while (uidIter.term() != null && uidIter.term().field() == \"uid\" &&\n            uidIter.term().text().compareTo(uid) < 0) {\n          if (deleting) {\t\t\t  // delete stale docs\n            System.out.println(\"deleting \" +\n                HTMLDocument.uid2url(uidIter.term().text()));\n            reader.deleteDocuments(uidIter.term());\n          }\n          uidIter.next();\n        }\n        if (uidIter.term() != null && uidIter.term().field() == \"uid\" &&\n            uidIter.term().text().compareTo(uid) == 0) {\n          uidIter.next();\t\t\t  // keep matching docs\n        } else if (!deleting) {\t\t\t  // add new docs\n          Document doc = HTMLDocument.Document(file);\n          System.out.println(\"adding \" + doc.get(\"path\"));\n          writer.addDocument(doc);\n        }\n      } else {\t\t\t\t\t  // creating a new index\n        Document doc = HTMLDocument.Document(file);\n        System.out.println(\"adding \" + doc.get(\"path\"));\n        writer.addDocument(doc);\t\t  // add docs unconditionally\n      }\n    }\n  }\n\n","sourceOld":"  private static void indexDocs(File file) throws Exception {\n    if (file.isDirectory()) {\t\t\t  // if a directory\n      String[] files = file.list();\t\t  // list its files\n      Arrays.sort(files);\t\t\t  // sort the files\n      for (int i = 0; i < files.length; i++)\t  // recursively index them\n        indexDocs(new File(file, files[i]));\n\n    } else if (file.getPath().endsWith(\".html\") || // index .html files\n      file.getPath().endsWith(\".htm\") || // index .htm files\n      file.getPath().endsWith(\".txt\")) { // index .txt files\n\n      if (uidIter != null) {\n        String uid = HTMLDocument.uid(file);\t  // construct uid for doc\n\n        while (uidIter.term() != null && uidIter.term().field() == \"uid\" &&\n            uidIter.term().text().compareTo(uid) < 0) {\n          if (deleting) {\t\t\t  // delete stale docs\n            System.out.println(\"deleting \" +\n                HTMLDocument.uid2url(uidIter.term().text()));\n            reader.deleteDocuments(uidIter.term());\n          }\n          uidIter.next();\n        }\n        if (uidIter.term() != null && uidIter.term().field() == \"uid\" &&\n            uidIter.term().text().compareTo(uid) == 0) {\n          uidIter.next();\t\t\t  // keep matching docs\n        } else if (!deleting) {\t\t\t  // add new docs\n          Document doc = HTMLDocument.Document(file);\n          System.out.println(\"adding \" + doc.get(\"path\"));\n          writer.addDocument(doc);\n        }\n      } else {\t\t\t\t\t  // creating a new index\n        Document doc = HTMLDocument.Document(file);\n        System.out.println(\"adding \" + doc.get(\"path\"));\n        writer.addDocument(doc);\t\t  // add docs unconditionally\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28427ef110c4c5bf5b4057731b83110bd1e13724","date":1276701452,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/contrib/demo/src/java/org/apache/lucene/demo/IndexHTML#indexDocs(File).mjava","pathOld":"lucene/contrib/demo/src/java/org/apache/lucene/demo/IndexHTML#indexDocs(File).mjava","sourceNew":"  private static void indexDocs(File file) throws Exception {\n    if (file.isDirectory()) {\t\t\t  // if a directory\n      String[] files = file.list();\t\t  // list its files\n      Arrays.sort(files);\t\t\t  // sort the files\n      for (int i = 0; i < files.length; i++)\t  // recursively index them\n        indexDocs(new File(file, files[i]));\n\n    } else if (file.getPath().endsWith(\".html\") || // index .html files\n      file.getPath().endsWith(\".htm\") || // index .htm files\n      file.getPath().endsWith(\".txt\")) { // index .txt files\n\n      if (uidIter != null) {\n        String uid = HTMLDocument.uid(file);\t  // construct uid for doc\n\n        BytesRef text;\n        while((text = uidIter.next()) != null) {\n          String termText = text.utf8ToString();\n          if (termText.compareTo(uid) < 0) {\n            if (deleting) {\t\t\t  // delete stale docs\n              System.out.println(\"deleting \" +\n                                 HTMLDocument.uid2url(termText));\n              reader.deleteDocuments(new Term(\"uid\", termText));\n            }\n          } else {\n            break;\n          }\n        }\n        if (text != null &&\n            text.utf8ToString().compareTo(uid) == 0) {\n          uidIter.next();\t\t\t  // keep matching docs\n        } else if (!deleting) {\t\t\t  // add new docs\n          Document doc = HTMLDocument.Document(file);\n          System.out.println(\"adding \" + doc.get(\"path\"));\n          writer.addDocument(doc);\n        }\n      } else {\t\t\t\t\t  // creating a new index\n        Document doc = HTMLDocument.Document(file);\n        System.out.println(\"adding \" + doc.get(\"path\"));\n        writer.addDocument(doc);\t\t  // add docs unconditionally\n      }\n    }\n  }\n\n","sourceOld":"  private static void indexDocs(File file) throws Exception {\n    if (file.isDirectory()) {\t\t\t  // if a directory\n      String[] files = file.list();\t\t  // list its files\n      Arrays.sort(files);\t\t\t  // sort the files\n      for (int i = 0; i < files.length; i++)\t  // recursively index them\n        indexDocs(new File(file, files[i]));\n\n    } else if (file.getPath().endsWith(\".html\") || // index .html files\n      file.getPath().endsWith(\".htm\") || // index .htm files\n      file.getPath().endsWith(\".txt\")) { // index .txt files\n\n      if (uidIter != null) {\n        String uid = HTMLDocument.uid(file);\t  // construct uid for doc\n\n        while (uidIter.term() != null && uidIter.term().field() == \"uid\" &&\n            uidIter.term().text().compareTo(uid) < 0) {\n          if (deleting) {\t\t\t  // delete stale docs\n            System.out.println(\"deleting \" +\n                HTMLDocument.uid2url(uidIter.term().text()));\n            reader.deleteDocuments(uidIter.term());\n          }\n          uidIter.next();\n        }\n        if (uidIter.term() != null && uidIter.term().field() == \"uid\" &&\n            uidIter.term().text().compareTo(uid) == 0) {\n          uidIter.next();\t\t\t  // keep matching docs\n        } else if (!deleting) {\t\t\t  // add new docs\n          Document doc = HTMLDocument.Document(file);\n          System.out.println(\"adding \" + doc.get(\"path\"));\n          writer.addDocument(doc);\n        }\n      } else {\t\t\t\t\t  // creating a new index\n        Document doc = HTMLDocument.Document(file);\n        System.out.println(\"adding \" + doc.get(\"path\"));\n        writer.addDocument(doc);\t\t  // add docs unconditionally\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/contrib/demo/src/java/org/apache/lucene/demo/IndexHTML#indexDocs(File).mjava","pathOld":"lucene/contrib/demo/src/java/org/apache/lucene/demo/IndexHTML#indexDocs(File).mjava","sourceNew":"  private static void indexDocs(File file) throws Exception {\n    if (file.isDirectory()) {\t\t\t  // if a directory\n      String[] files = file.list();\t\t  // list its files\n      Arrays.sort(files);\t\t\t  // sort the files\n      for (int i = 0; i < files.length; i++)\t  // recursively index them\n        indexDocs(new File(file, files[i]));\n\n    } else if (file.getPath().endsWith(\".html\") || // index .html files\n      file.getPath().endsWith(\".htm\") || // index .htm files\n      file.getPath().endsWith(\".txt\")) { // index .txt files\n\n      if (uidIter != null) {\n        String uid = HTMLDocument.uid(file);\t  // construct uid for doc\n\n        BytesRef text;\n        while((text = uidIter.next()) != null) {\n          String termText = text.utf8ToString();\n          if (termText.compareTo(uid) < 0) {\n            if (deleting) {\t\t\t  // delete stale docs\n              System.out.println(\"deleting \" +\n                                 HTMLDocument.uid2url(termText));\n              reader.deleteDocuments(new Term(\"uid\", termText));\n            }\n          } else {\n            break;\n          }\n        }\n        if (text != null &&\n            text.utf8ToString().compareTo(uid) == 0) {\n          uidIter.next();\t\t\t  // keep matching docs\n        } else if (!deleting) {\t\t\t  // add new docs\n          Document doc = HTMLDocument.Document(file);\n          System.out.println(\"adding \" + doc.get(\"path\"));\n          writer.addDocument(doc);\n        }\n      } else {\t\t\t\t\t  // creating a new index\n        Document doc = HTMLDocument.Document(file);\n        System.out.println(\"adding \" + doc.get(\"path\"));\n        writer.addDocument(doc);\t\t  // add docs unconditionally\n      }\n    }\n  }\n\n","sourceOld":"  private static void indexDocs(File file) throws Exception {\n    if (file.isDirectory()) {\t\t\t  // if a directory\n      String[] files = file.list();\t\t  // list its files\n      Arrays.sort(files);\t\t\t  // sort the files\n      for (int i = 0; i < files.length; i++)\t  // recursively index them\n        indexDocs(new File(file, files[i]));\n\n    } else if (file.getPath().endsWith(\".html\") || // index .html files\n      file.getPath().endsWith(\".htm\") || // index .htm files\n      file.getPath().endsWith(\".txt\")) { // index .txt files\n\n      if (uidIter != null) {\n        String uid = HTMLDocument.uid(file);\t  // construct uid for doc\n\n        while (uidIter.term() != null && uidIter.term().field() == \"uid\" &&\n            uidIter.term().text().compareTo(uid) < 0) {\n          if (deleting) {\t\t\t  // delete stale docs\n            System.out.println(\"deleting \" +\n                HTMLDocument.uid2url(uidIter.term().text()));\n            reader.deleteDocuments(uidIter.term());\n          }\n          uidIter.next();\n        }\n        if (uidIter.term() != null && uidIter.term().field() == \"uid\" &&\n            uidIter.term().text().compareTo(uid) == 0) {\n          uidIter.next();\t\t\t  // keep matching docs\n        } else if (!deleting) {\t\t\t  // add new docs\n          Document doc = HTMLDocument.Document(file);\n          System.out.println(\"adding \" + doc.get(\"path\"));\n          writer.addDocument(doc);\n        }\n      } else {\t\t\t\t\t  // creating a new index\n        Document doc = HTMLDocument.Document(file);\n        System.out.println(\"adding \" + doc.get(\"path\"));\n        writer.addDocument(doc);\t\t  // add docs unconditionally\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"81ea17596392ebd5d12741eb9e3b2516258b9413","date":1298090976,"type":4,"author":"Steven Rowe","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/contrib/demo/src/java/org/apache/lucene/demo/IndexHTML#indexDocs(File).mjava","sourceNew":null,"sourceOld":"  private static void indexDocs(File file) throws Exception {\n    if (file.isDirectory()) {\t\t\t  // if a directory\n      String[] files = file.list();\t\t  // list its files\n      Arrays.sort(files);\t\t\t  // sort the files\n      for (int i = 0; i < files.length; i++)\t  // recursively index them\n        indexDocs(new File(file, files[i]));\n\n    } else if (file.getPath().endsWith(\".html\") || // index .html files\n      file.getPath().endsWith(\".htm\") || // index .htm files\n      file.getPath().endsWith(\".txt\")) { // index .txt files\n\n      if (uidIter != null) {\n        String uid = HTMLDocument.uid(file);\t  // construct uid for doc\n\n        BytesRef text;\n        while((text = uidIter.next()) != null) {\n          String termText = text.utf8ToString();\n          if (termText.compareTo(uid) < 0) {\n            if (deleting) {\t\t\t  // delete stale docs\n              System.out.println(\"deleting \" +\n                                 HTMLDocument.uid2url(termText));\n              reader.deleteDocuments(new Term(\"uid\", termText));\n            }\n          } else {\n            break;\n          }\n        }\n        if (text != null &&\n            text.utf8ToString().compareTo(uid) == 0) {\n          uidIter.next();\t\t\t  // keep matching docs\n        } else if (!deleting) {\t\t\t  // add new docs\n          Document doc = HTMLDocument.Document(file);\n          System.out.println(\"adding \" + doc.get(\"path\"));\n          writer.addDocument(doc);\n        }\n      } else {\t\t\t\t\t  // creating a new index\n        Document doc = HTMLDocument.Document(file);\n        System.out.println(\"adding \" + doc.get(\"path\"));\n        writer.addDocument(doc);\t\t  // add docs unconditionally\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f1bdbf92da222965b46c0a942c3857ba56e5c638","date":1298297608,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/contrib/demo/src/java/org/apache/lucene/demo/IndexHTML#indexDocs(File).mjava","sourceNew":null,"sourceOld":"  private static void indexDocs(File file) throws Exception {\n    if (file.isDirectory()) {\t\t\t  // if a directory\n      String[] files = file.list();\t\t  // list its files\n      Arrays.sort(files);\t\t\t  // sort the files\n      for (int i = 0; i < files.length; i++)\t  // recursively index them\n        indexDocs(new File(file, files[i]));\n\n    } else if (file.getPath().endsWith(\".html\") || // index .html files\n      file.getPath().endsWith(\".htm\") || // index .htm files\n      file.getPath().endsWith(\".txt\")) { // index .txt files\n\n      if (uidIter != null) {\n        String uid = HTMLDocument.uid(file);\t  // construct uid for doc\n\n        BytesRef text;\n        while((text = uidIter.next()) != null) {\n          String termText = text.utf8ToString();\n          if (termText.compareTo(uid) < 0) {\n            if (deleting) {\t\t\t  // delete stale docs\n              System.out.println(\"deleting \" +\n                                 HTMLDocument.uid2url(termText));\n              reader.deleteDocuments(new Term(\"uid\", termText));\n            }\n          } else {\n            break;\n          }\n        }\n        if (text != null &&\n            text.utf8ToString().compareTo(uid) == 0) {\n          uidIter.next();\t\t\t  // keep matching docs\n        } else if (!deleting) {\t\t\t  // add new docs\n          Document doc = HTMLDocument.Document(file);\n          System.out.println(\"adding \" + doc.get(\"path\"));\n          writer.addDocument(doc);\n        }\n      } else {\t\t\t\t\t  // creating a new index\n        Document doc = HTMLDocument.Document(file);\n        System.out.println(\"adding \" + doc.get(\"path\"));\n        writer.addDocument(doc);\t\t  // add docs unconditionally\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/contrib/demo/src/java/org/apache/lucene/demo/IndexHTML#indexDocs(File).mjava","sourceNew":null,"sourceOld":"  private static void indexDocs(File file) throws Exception {\n    if (file.isDirectory()) {\t\t\t  // if a directory\n      String[] files = file.list();\t\t  // list its files\n      Arrays.sort(files);\t\t\t  // sort the files\n      for (int i = 0; i < files.length; i++)\t  // recursively index them\n        indexDocs(new File(file, files[i]));\n\n    } else if (file.getPath().endsWith(\".html\") || // index .html files\n      file.getPath().endsWith(\".htm\") || // index .htm files\n      file.getPath().endsWith(\".txt\")) { // index .txt files\n\n      if (uidIter != null) {\n        String uid = HTMLDocument.uid(file);\t  // construct uid for doc\n\n        BytesRef text;\n        while((text = uidIter.next()) != null) {\n          String termText = text.utf8ToString();\n          if (termText.compareTo(uid) < 0) {\n            if (deleting) {\t\t\t  // delete stale docs\n              System.out.println(\"deleting \" +\n                                 HTMLDocument.uid2url(termText));\n              reader.deleteDocuments(new Term(\"uid\", termText));\n            }\n          } else {\n            break;\n          }\n        }\n        if (text != null &&\n            text.utf8ToString().compareTo(uid) == 0) {\n          uidIter.next();\t\t\t  // keep matching docs\n        } else if (!deleting) {\t\t\t  // add new docs\n          Document doc = HTMLDocument.Document(file);\n          System.out.println(\"adding \" + doc.get(\"path\"));\n          writer.addDocument(doc);\n        }\n      } else {\t\t\t\t\t  // creating a new index\n        Document doc = HTMLDocument.Document(file);\n        System.out.println(\"adding \" + doc.get(\"path\"));\n        writer.addDocument(doc);\t\t  // add docs unconditionally\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f1bdbf92da222965b46c0a942c3857ba56e5c638":["28427ef110c4c5bf5b4057731b83110bd1e13724","81ea17596392ebd5d12741eb9e3b2516258b9413"],"81ea17596392ebd5d12741eb9e3b2516258b9413":["28427ef110c4c5bf5b4057731b83110bd1e13724"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"28427ef110c4c5bf5b4057731b83110bd1e13724":["790c3f61c9b891d66d919c5d10db9fa5216eb0f1"],"5f4e87790277826a2aea119328600dfb07761f32":["790c3f61c9b891d66d919c5d10db9fa5216eb0f1","28427ef110c4c5bf5b4057731b83110bd1e13724"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["5f4e87790277826a2aea119328600dfb07761f32","81ea17596392ebd5d12741eb9e3b2516258b9413"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["81ea17596392ebd5d12741eb9e3b2516258b9413"],"790c3f61c9b891d66d919c5d10db9fa5216eb0f1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"f1bdbf92da222965b46c0a942c3857ba56e5c638":[],"81ea17596392ebd5d12741eb9e3b2516258b9413":["f1bdbf92da222965b46c0a942c3857ba56e5c638","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["790c3f61c9b891d66d919c5d10db9fa5216eb0f1"],"28427ef110c4c5bf5b4057731b83110bd1e13724":["f1bdbf92da222965b46c0a942c3857ba56e5c638","81ea17596392ebd5d12741eb9e3b2516258b9413","5f4e87790277826a2aea119328600dfb07761f32"],"5f4e87790277826a2aea119328600dfb07761f32":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"790c3f61c9b891d66d919c5d10db9fa5216eb0f1":["28427ef110c4c5bf5b4057731b83110bd1e13724","5f4e87790277826a2aea119328600dfb07761f32"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["f1bdbf92da222965b46c0a942c3857ba56e5c638","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}