{"path":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#commitPerThreadBytes(DocumentsWriterPerThread).mjava","commits":[{"id":"264935965977b4a9e2f3920420647072c9c49176","date":1586600626,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#commitPerThreadBytes(DocumentsWriterPerThread).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#commitPerThreadBytes(ThreadState).mjava","sourceNew":"  private synchronized void commitPerThreadBytes(DocumentsWriterPerThread perThread) {\n    final long delta = perThread.commitLastBytesUsed();\n    /*\n     * We need to differentiate here if we are pending since setFlushPending\n     * moves the perThread memory to the flushBytes and we could be set to\n     * pending during a delete\n     */\n    if (perThread.isFlushPending()) {\n      flushBytes += delta;\n    } else {\n      activeBytes += delta;\n    }\n    assert updatePeaks(delta);\n  }\n\n","sourceOld":"  private void commitPerThreadBytes(ThreadState perThread) {\n    final long delta = perThread.dwpt.bytesUsed() - perThread.bytesUsed;\n    perThread.bytesUsed += delta;\n    /*\n     * We need to differentiate here if we are pending since setFlushPending\n     * moves the perThread memory to the flushBytes and we could be set to\n     * pending during a delete\n     */\n    if (perThread.flushPending) {\n      flushBytes += delta;\n    } else {\n      activeBytes += delta;\n    }\n    assert updatePeaks(delta);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0fb8f59fecc02c4b9a6970b8968a3f4eca60b2d","date":1600933173,"type":4,"author":"Simon Willnauer","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#commitPerThreadBytes(DocumentsWriterPerThread).mjava","sourceNew":null,"sourceOld":"  private synchronized void commitPerThreadBytes(DocumentsWriterPerThread perThread) {\n    final long delta = perThread.commitLastBytesUsed();\n    /*\n     * We need to differentiate here if we are pending since setFlushPending\n     * moves the perThread memory to the flushBytes and we could be set to\n     * pending during a delete\n     */\n    if (perThread.isFlushPending()) {\n      flushBytes += delta;\n    } else {\n      activeBytes += delta;\n    }\n    assert updatePeaks(delta);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"264935965977b4a9e2f3920420647072c9c49176":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0fb8f59fecc02c4b9a6970b8968a3f4eca60b2d":["264935965977b4a9e2f3920420647072c9c49176"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0fb8f59fecc02c4b9a6970b8968a3f4eca60b2d"]},"commit2Childs":{"264935965977b4a9e2f3920420647072c9c49176":["a0fb8f59fecc02c4b9a6970b8968a3f4eca60b2d"],"a0fb8f59fecc02c4b9a6970b8968a3f4eca60b2d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["264935965977b4a9e2f3920420647072c9c49176"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}