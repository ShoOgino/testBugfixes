{"path":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#OverseerCollectionMessageHandler(ZkStateReader,String,HttpShardHandlerFactory,String,Stats,Overseer,OverseerNodePrioritizer).mjava","commits":[{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":1,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#OverseerCollectionMessageHandler(ZkStateReader,String,HttpShardHandlerFactory,String,Stats,Overseer,OverseerNodePrioritizer).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#OverseerCollectionMessageHandler(ZkStateReader,String,ShardHandlerFactory,String,Stats,Overseer,OverseerNodePrioritizer).mjava","sourceNew":"  public OverseerCollectionMessageHandler(ZkStateReader zkStateReader, String myId,\n                                        final HttpShardHandlerFactory shardHandlerFactory,\n                                        String adminPath,\n                                        Stats stats,\n                                        Overseer overseer,\n                                        OverseerNodePrioritizer overseerPrioritizer) {\n    this.zkStateReader = zkStateReader;\n    this.shardHandlerFactory = shardHandlerFactory;\n    this.adminPath = adminPath;\n    this.myId = myId;\n    this.stats = stats;\n    this.overseer = overseer;\n    this.cloudManager = overseer.getSolrCloudManager();\n    this.timeSource = cloudManager.getTimeSource();\n    this.isClosed = false;\n    commandMap = new ImmutableMap.Builder<CollectionAction, Cmd>()\n        .put(REPLACENODE, new ReplaceNodeCmd(this))\n        .put(DELETENODE, new DeleteNodeCmd(this))\n        .put(BACKUP, new BackupCmd(this))\n        .put(RESTORE, new RestoreCmd(this))\n        .put(CREATESNAPSHOT, new CreateSnapshotCmd(this))\n        .put(DELETESNAPSHOT, new DeleteSnapshotCmd(this))\n        .put(SPLITSHARD, new SplitShardCmd(this))\n        .put(ADDROLE, new OverseerRoleCmd(this, ADDROLE, overseerPrioritizer))\n        .put(REMOVEROLE, new OverseerRoleCmd(this, REMOVEROLE, overseerPrioritizer))\n        .put(MOCK_COLL_TASK, this::mockOperation)\n        .put(MOCK_SHARD_TASK, this::mockOperation)\n        .put(MOCK_REPLICA_TASK, this::mockOperation)\n        .put(MIGRATESTATEFORMAT, this::migrateStateFormat)\n        .put(CREATESHARD, new CreateShardCmd(this))\n        .put(MIGRATE, new MigrateCmd(this))\n        .put(CREATE, new CreateCollectionCmd(this))\n        .put(MODIFYCOLLECTION, this::modifyCollection)\n        .put(ADDREPLICAPROP, this::processReplicaAddPropertyCommand)\n        .put(DELETEREPLICAPROP, this::processReplicaDeletePropertyCommand)\n        .put(BALANCESHARDUNIQUE, this::balanceProperty)\n        .put(REBALANCELEADERS, this::processRebalanceLeaders)\n        .put(RELOAD, this::reloadCollection)\n        .put(DELETE, new DeleteCollectionCmd(this))\n        .put(CREATEALIAS, new CreateAliasCmd(this))\n        .put(DELETEALIAS, new DeleteAliasCmd(this))\n        .put(ALIASPROP, new SetAliasPropCmd(this))\n        .put(MAINTAINROUTEDALIAS, new MaintainRoutedAliasCmd(this))\n        .put(OVERSEERSTATUS, new OverseerStatusCmd(this))\n        .put(DELETESHARD, new DeleteShardCmd(this))\n        .put(DELETEREPLICA, new DeleteReplicaCmd(this))\n        .put(ADDREPLICA, new AddReplicaCmd(this))\n        .put(MOVEREPLICA, new MoveReplicaCmd(this))\n        .put(UTILIZENODE, new UtilizeNodeCmd(this))\n        .build()\n    ;\n  }\n\n","sourceOld":"  public OverseerCollectionMessageHandler(ZkStateReader zkStateReader, String myId,\n                                        final ShardHandlerFactory shardHandlerFactory,\n                                        String adminPath,\n                                        Stats stats,\n                                        Overseer overseer,\n                                        OverseerNodePrioritizer overseerPrioritizer) {\n    this.zkStateReader = zkStateReader;\n    this.shardHandlerFactory = shardHandlerFactory;\n    this.adminPath = adminPath;\n    this.myId = myId;\n    this.stats = stats;\n    this.overseer = overseer;\n    this.cloudManager = overseer.getSolrCloudManager();\n    this.timeSource = cloudManager.getTimeSource();\n    this.isClosed = false;\n    commandMap = new ImmutableMap.Builder<CollectionAction, Cmd>()\n        .put(REPLACENODE, new ReplaceNodeCmd(this))\n        .put(DELETENODE, new DeleteNodeCmd(this))\n        .put(BACKUP, new BackupCmd(this))\n        .put(RESTORE, new RestoreCmd(this))\n        .put(CREATESNAPSHOT, new CreateSnapshotCmd(this))\n        .put(DELETESNAPSHOT, new DeleteSnapshotCmd(this))\n        .put(SPLITSHARD, new SplitShardCmd(this))\n        .put(ADDROLE, new OverseerRoleCmd(this, ADDROLE, overseerPrioritizer))\n        .put(REMOVEROLE, new OverseerRoleCmd(this, REMOVEROLE, overseerPrioritizer))\n        .put(MOCK_COLL_TASK, this::mockOperation)\n        .put(MOCK_SHARD_TASK, this::mockOperation)\n        .put(MOCK_REPLICA_TASK, this::mockOperation)\n        .put(MIGRATESTATEFORMAT, this::migrateStateFormat)\n        .put(CREATESHARD, new CreateShardCmd(this))\n        .put(MIGRATE, new MigrateCmd(this))\n        .put(CREATE, new CreateCollectionCmd(this))\n        .put(MODIFYCOLLECTION, this::modifyCollection)\n        .put(ADDREPLICAPROP, this::processReplicaAddPropertyCommand)\n        .put(DELETEREPLICAPROP, this::processReplicaDeletePropertyCommand)\n        .put(BALANCESHARDUNIQUE, this::balanceProperty)\n        .put(REBALANCELEADERS, this::processRebalanceLeaders)\n        .put(RELOAD, this::reloadCollection)\n        .put(DELETE, new DeleteCollectionCmd(this))\n        .put(CREATEALIAS, new CreateAliasCmd(this))\n        .put(DELETEALIAS, new DeleteAliasCmd(this))\n        .put(ALIASPROP, new SetAliasPropCmd(this))\n        .put(MAINTAINROUTEDALIAS, new MaintainRoutedAliasCmd(this))\n        .put(OVERSEERSTATUS, new OverseerStatusCmd(this))\n        .put(DELETESHARD, new DeleteShardCmd(this))\n        .put(DELETEREPLICA, new DeleteReplicaCmd(this))\n        .put(ADDREPLICA, new AddReplicaCmd(this))\n        .put(MOVEREPLICA, new MoveReplicaCmd(this))\n        .put(UTILIZENODE, new UtilizeNodeCmd(this))\n        .build()\n    ;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b627755385655c7cd3fb296f17593658805cf4d5","date":1552455143,"type":3,"author":"Gus Heck","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#OverseerCollectionMessageHandler(ZkStateReader,String,HttpShardHandlerFactory,String,Stats,Overseer,OverseerNodePrioritizer).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#OverseerCollectionMessageHandler(ZkStateReader,String,HttpShardHandlerFactory,String,Stats,Overseer,OverseerNodePrioritizer).mjava","sourceNew":"  public OverseerCollectionMessageHandler(ZkStateReader zkStateReader, String myId,\n                                        final HttpShardHandlerFactory shardHandlerFactory,\n                                        String adminPath,\n                                        Stats stats,\n                                        Overseer overseer,\n                                        OverseerNodePrioritizer overseerPrioritizer) {\n    this.zkStateReader = zkStateReader;\n    this.shardHandlerFactory = shardHandlerFactory;\n    this.adminPath = adminPath;\n    this.myId = myId;\n    this.stats = stats;\n    this.overseer = overseer;\n    this.cloudManager = overseer.getSolrCloudManager();\n    this.timeSource = cloudManager.getTimeSource();\n    this.isClosed = false;\n    commandMap = new ImmutableMap.Builder<CollectionAction, Cmd>()\n        .put(REPLACENODE, new ReplaceNodeCmd(this))\n        .put(DELETENODE, new DeleteNodeCmd(this))\n        .put(BACKUP, new BackupCmd(this))\n        .put(RESTORE, new RestoreCmd(this))\n        .put(CREATESNAPSHOT, new CreateSnapshotCmd(this))\n        .put(DELETESNAPSHOT, new DeleteSnapshotCmd(this))\n        .put(SPLITSHARD, new SplitShardCmd(this))\n        .put(ADDROLE, new OverseerRoleCmd(this, ADDROLE, overseerPrioritizer))\n        .put(REMOVEROLE, new OverseerRoleCmd(this, REMOVEROLE, overseerPrioritizer))\n        .put(MOCK_COLL_TASK, this::mockOperation)\n        .put(MOCK_SHARD_TASK, this::mockOperation)\n        .put(MOCK_REPLICA_TASK, this::mockOperation)\n        .put(MIGRATESTATEFORMAT, this::migrateStateFormat)\n        .put(CREATESHARD, new CreateShardCmd(this))\n        .put(MIGRATE, new MigrateCmd(this))\n        .put(CREATE, new CreateCollectionCmd(this))\n        .put(MODIFYCOLLECTION, this::modifyCollection)\n        .put(ADDREPLICAPROP, this::processReplicaAddPropertyCommand)\n        .put(DELETEREPLICAPROP, this::processReplicaDeletePropertyCommand)\n        .put(BALANCESHARDUNIQUE, this::balanceProperty)\n        .put(REBALANCELEADERS, this::processRebalanceLeaders)\n        .put(RELOAD, this::reloadCollection)\n        .put(DELETE, new DeleteCollectionCmd(this))\n        .put(CREATEALIAS, new CreateAliasCmd(this))\n        .put(DELETEALIAS, new DeleteAliasCmd(this))\n        .put(ALIASPROP, new SetAliasPropCmd(this))\n        .put(MAINTAINTIMEROUTEDALIAS, new MaintainTimeRoutedAliasCmd(this))\n        .put(MAINTAINCATEGORYROUTEDALIAS, new MaintainCategoryRoutedAliasCmd(this))\n        .put(OVERSEERSTATUS, new OverseerStatusCmd(this))\n        .put(DELETESHARD, new DeleteShardCmd(this))\n        .put(DELETEREPLICA, new DeleteReplicaCmd(this))\n        .put(ADDREPLICA, new AddReplicaCmd(this))\n        .put(MOVEREPLICA, new MoveReplicaCmd(this))\n        .put(UTILIZENODE, new UtilizeNodeCmd(this))\n        .build()\n    ;\n  }\n\n","sourceOld":"  public OverseerCollectionMessageHandler(ZkStateReader zkStateReader, String myId,\n                                        final HttpShardHandlerFactory shardHandlerFactory,\n                                        String adminPath,\n                                        Stats stats,\n                                        Overseer overseer,\n                                        OverseerNodePrioritizer overseerPrioritizer) {\n    this.zkStateReader = zkStateReader;\n    this.shardHandlerFactory = shardHandlerFactory;\n    this.adminPath = adminPath;\n    this.myId = myId;\n    this.stats = stats;\n    this.overseer = overseer;\n    this.cloudManager = overseer.getSolrCloudManager();\n    this.timeSource = cloudManager.getTimeSource();\n    this.isClosed = false;\n    commandMap = new ImmutableMap.Builder<CollectionAction, Cmd>()\n        .put(REPLACENODE, new ReplaceNodeCmd(this))\n        .put(DELETENODE, new DeleteNodeCmd(this))\n        .put(BACKUP, new BackupCmd(this))\n        .put(RESTORE, new RestoreCmd(this))\n        .put(CREATESNAPSHOT, new CreateSnapshotCmd(this))\n        .put(DELETESNAPSHOT, new DeleteSnapshotCmd(this))\n        .put(SPLITSHARD, new SplitShardCmd(this))\n        .put(ADDROLE, new OverseerRoleCmd(this, ADDROLE, overseerPrioritizer))\n        .put(REMOVEROLE, new OverseerRoleCmd(this, REMOVEROLE, overseerPrioritizer))\n        .put(MOCK_COLL_TASK, this::mockOperation)\n        .put(MOCK_SHARD_TASK, this::mockOperation)\n        .put(MOCK_REPLICA_TASK, this::mockOperation)\n        .put(MIGRATESTATEFORMAT, this::migrateStateFormat)\n        .put(CREATESHARD, new CreateShardCmd(this))\n        .put(MIGRATE, new MigrateCmd(this))\n        .put(CREATE, new CreateCollectionCmd(this))\n        .put(MODIFYCOLLECTION, this::modifyCollection)\n        .put(ADDREPLICAPROP, this::processReplicaAddPropertyCommand)\n        .put(DELETEREPLICAPROP, this::processReplicaDeletePropertyCommand)\n        .put(BALANCESHARDUNIQUE, this::balanceProperty)\n        .put(REBALANCELEADERS, this::processRebalanceLeaders)\n        .put(RELOAD, this::reloadCollection)\n        .put(DELETE, new DeleteCollectionCmd(this))\n        .put(CREATEALIAS, new CreateAliasCmd(this))\n        .put(DELETEALIAS, new DeleteAliasCmd(this))\n        .put(ALIASPROP, new SetAliasPropCmd(this))\n        .put(MAINTAINROUTEDALIAS, new MaintainRoutedAliasCmd(this))\n        .put(OVERSEERSTATUS, new OverseerStatusCmd(this))\n        .put(DELETESHARD, new DeleteShardCmd(this))\n        .put(DELETEREPLICA, new DeleteReplicaCmd(this))\n        .put(ADDREPLICA, new AddReplicaCmd(this))\n        .put(MOVEREPLICA, new MoveReplicaCmd(this))\n        .put(UTILIZENODE, new UtilizeNodeCmd(this))\n        .build()\n    ;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"dad6a48950aafc9c2f5dc54740f8c6ab81304203","date":1552999379,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#OverseerCollectionMessageHandler(ZkStateReader,String,HttpShardHandlerFactory,String,Stats,Overseer,OverseerNodePrioritizer).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#OverseerCollectionMessageHandler(ZkStateReader,String,HttpShardHandlerFactory,String,Stats,Overseer,OverseerNodePrioritizer).mjava","sourceNew":"  public OverseerCollectionMessageHandler(ZkStateReader zkStateReader, String myId,\n                                        final HttpShardHandlerFactory shardHandlerFactory,\n                                        String adminPath,\n                                        Stats stats,\n                                        Overseer overseer,\n                                        OverseerNodePrioritizer overseerPrioritizer) {\n    this.zkStateReader = zkStateReader;\n    this.shardHandlerFactory = shardHandlerFactory;\n    this.adminPath = adminPath;\n    this.myId = myId;\n    this.stats = stats;\n    this.overseer = overseer;\n    this.cloudManager = overseer.getSolrCloudManager();\n    this.timeSource = cloudManager.getTimeSource();\n    this.isClosed = false;\n    commandMap = new ImmutableMap.Builder<CollectionAction, Cmd>()\n        .put(REPLACENODE, new ReplaceNodeCmd(this))\n        .put(DELETENODE, new DeleteNodeCmd(this))\n        .put(BACKUP, new BackupCmd(this))\n        .put(RESTORE, new RestoreCmd(this))\n        .put(CREATESNAPSHOT, new CreateSnapshotCmd(this))\n        .put(DELETESNAPSHOT, new DeleteSnapshotCmd(this))\n        .put(SPLITSHARD, new SplitShardCmd(this))\n        .put(ADDROLE, new OverseerRoleCmd(this, ADDROLE, overseerPrioritizer))\n        .put(REMOVEROLE, new OverseerRoleCmd(this, REMOVEROLE, overseerPrioritizer))\n        .put(MOCK_COLL_TASK, this::mockOperation)\n        .put(MOCK_SHARD_TASK, this::mockOperation)\n        .put(MOCK_REPLICA_TASK, this::mockOperation)\n        .put(MIGRATESTATEFORMAT, this::migrateStateFormat)\n        .put(CREATESHARD, new CreateShardCmd(this))\n        .put(MIGRATE, new MigrateCmd(this))\n        .put(CREATE, new CreateCollectionCmd(this))\n        .put(MODIFYCOLLECTION, this::modifyCollection)\n        .put(ADDREPLICAPROP, this::processReplicaAddPropertyCommand)\n        .put(DELETEREPLICAPROP, this::processReplicaDeletePropertyCommand)\n        .put(BALANCESHARDUNIQUE, this::balanceProperty)\n        .put(REBALANCELEADERS, this::processRebalanceLeaders)\n        .put(RELOAD, this::reloadCollection)\n        .put(DELETE, new DeleteCollectionCmd(this))\n        .put(CREATEALIAS, new CreateAliasCmd(this))\n        .put(DELETEALIAS, new DeleteAliasCmd(this))\n        .put(ALIASPROP, new SetAliasPropCmd(this))\n        .put(MAINTAINTIMEROUTEDALIAS, new MaintainTimeRoutedAliasCmd(this))\n        .put(MAINTAINCATEGORYROUTEDALIAS, new MaintainCategoryRoutedAliasCmd(this))\n        .put(OVERSEERSTATUS, new OverseerStatusCmd(this))\n        .put(DELETESHARD, new DeleteShardCmd(this))\n        .put(DELETEREPLICA, new DeleteReplicaCmd(this))\n        .put(ADDREPLICA, new AddReplicaCmd(this))\n        .put(MOVEREPLICA, new MoveReplicaCmd(this))\n        .put(REINDEXCOLLECTION, new ReindexCollectionCmd(this))\n        .put(UTILIZENODE, new UtilizeNodeCmd(this))\n        .build()\n    ;\n  }\n\n","sourceOld":"  public OverseerCollectionMessageHandler(ZkStateReader zkStateReader, String myId,\n                                        final HttpShardHandlerFactory shardHandlerFactory,\n                                        String adminPath,\n                                        Stats stats,\n                                        Overseer overseer,\n                                        OverseerNodePrioritizer overseerPrioritizer) {\n    this.zkStateReader = zkStateReader;\n    this.shardHandlerFactory = shardHandlerFactory;\n    this.adminPath = adminPath;\n    this.myId = myId;\n    this.stats = stats;\n    this.overseer = overseer;\n    this.cloudManager = overseer.getSolrCloudManager();\n    this.timeSource = cloudManager.getTimeSource();\n    this.isClosed = false;\n    commandMap = new ImmutableMap.Builder<CollectionAction, Cmd>()\n        .put(REPLACENODE, new ReplaceNodeCmd(this))\n        .put(DELETENODE, new DeleteNodeCmd(this))\n        .put(BACKUP, new BackupCmd(this))\n        .put(RESTORE, new RestoreCmd(this))\n        .put(CREATESNAPSHOT, new CreateSnapshotCmd(this))\n        .put(DELETESNAPSHOT, new DeleteSnapshotCmd(this))\n        .put(SPLITSHARD, new SplitShardCmd(this))\n        .put(ADDROLE, new OverseerRoleCmd(this, ADDROLE, overseerPrioritizer))\n        .put(REMOVEROLE, new OverseerRoleCmd(this, REMOVEROLE, overseerPrioritizer))\n        .put(MOCK_COLL_TASK, this::mockOperation)\n        .put(MOCK_SHARD_TASK, this::mockOperation)\n        .put(MOCK_REPLICA_TASK, this::mockOperation)\n        .put(MIGRATESTATEFORMAT, this::migrateStateFormat)\n        .put(CREATESHARD, new CreateShardCmd(this))\n        .put(MIGRATE, new MigrateCmd(this))\n        .put(CREATE, new CreateCollectionCmd(this))\n        .put(MODIFYCOLLECTION, this::modifyCollection)\n        .put(ADDREPLICAPROP, this::processReplicaAddPropertyCommand)\n        .put(DELETEREPLICAPROP, this::processReplicaDeletePropertyCommand)\n        .put(BALANCESHARDUNIQUE, this::balanceProperty)\n        .put(REBALANCELEADERS, this::processRebalanceLeaders)\n        .put(RELOAD, this::reloadCollection)\n        .put(DELETE, new DeleteCollectionCmd(this))\n        .put(CREATEALIAS, new CreateAliasCmd(this))\n        .put(DELETEALIAS, new DeleteAliasCmd(this))\n        .put(ALIASPROP, new SetAliasPropCmd(this))\n        .put(MAINTAINTIMEROUTEDALIAS, new MaintainTimeRoutedAliasCmd(this))\n        .put(MAINTAINCATEGORYROUTEDALIAS, new MaintainCategoryRoutedAliasCmd(this))\n        .put(OVERSEERSTATUS, new OverseerStatusCmd(this))\n        .put(DELETESHARD, new DeleteShardCmd(this))\n        .put(DELETEREPLICA, new DeleteReplicaCmd(this))\n        .put(ADDREPLICA, new AddReplicaCmd(this))\n        .put(MOVEREPLICA, new MoveReplicaCmd(this))\n        .put(UTILIZENODE, new UtilizeNodeCmd(this))\n        .build()\n    ;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"59bad1cc1e7f90125a140496e79b06afcedb68ec","date":1554915399,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#OverseerCollectionMessageHandler(ZkStateReader,String,HttpShardHandlerFactory,String,Stats,Overseer,OverseerNodePrioritizer).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#OverseerCollectionMessageHandler(ZkStateReader,String,HttpShardHandlerFactory,String,Stats,Overseer,OverseerNodePrioritizer).mjava","sourceNew":"  public OverseerCollectionMessageHandler(ZkStateReader zkStateReader, String myId,\n                                        final HttpShardHandlerFactory shardHandlerFactory,\n                                        String adminPath,\n                                        Stats stats,\n                                        Overseer overseer,\n                                        OverseerNodePrioritizer overseerPrioritizer) {\n    this.zkStateReader = zkStateReader;\n    this.shardHandlerFactory = shardHandlerFactory;\n    this.adminPath = adminPath;\n    this.myId = myId;\n    this.stats = stats;\n    this.overseer = overseer;\n    this.cloudManager = overseer.getSolrCloudManager();\n    this.timeSource = cloudManager.getTimeSource();\n    this.isClosed = false;\n    commandMap = new ImmutableMap.Builder<CollectionAction, Cmd>()\n        .put(REPLACENODE, new ReplaceNodeCmd(this))\n        .put(DELETENODE, new DeleteNodeCmd(this))\n        .put(BACKUP, new BackupCmd(this))\n        .put(RESTORE, new RestoreCmd(this))\n        .put(CREATESNAPSHOT, new CreateSnapshotCmd(this))\n        .put(DELETESNAPSHOT, new DeleteSnapshotCmd(this))\n        .put(SPLITSHARD, new SplitShardCmd(this))\n        .put(ADDROLE, new OverseerRoleCmd(this, ADDROLE, overseerPrioritizer))\n        .put(REMOVEROLE, new OverseerRoleCmd(this, REMOVEROLE, overseerPrioritizer))\n        .put(MOCK_COLL_TASK, this::mockOperation)\n        .put(MOCK_SHARD_TASK, this::mockOperation)\n        .put(MOCK_REPLICA_TASK, this::mockOperation)\n        .put(MIGRATESTATEFORMAT, this::migrateStateFormat)\n        .put(CREATESHARD, new CreateShardCmd(this))\n        .put(MIGRATE, new MigrateCmd(this))\n        .put(CREATE, new CreateCollectionCmd(this))\n        .put(MODIFYCOLLECTION, this::modifyCollection)\n        .put(ADDREPLICAPROP, this::processReplicaAddPropertyCommand)\n        .put(DELETEREPLICAPROP, this::processReplicaDeletePropertyCommand)\n        .put(BALANCESHARDUNIQUE, this::balanceProperty)\n        .put(REBALANCELEADERS, this::processRebalanceLeaders)\n        .put(RELOAD, this::reloadCollection)\n        .put(DELETE, new DeleteCollectionCmd(this))\n        .put(CREATEALIAS, new CreateAliasCmd(this))\n        .put(DELETEALIAS, new DeleteAliasCmd(this))\n        .put(ALIASPROP, new SetAliasPropCmd(this))\n        .put(MAINTAINTIMEROUTEDALIAS, new MaintainTimeRoutedAliasCmd(this))\n        .put(MAINTAINCATEGORYROUTEDALIAS, new MaintainCategoryRoutedAliasCmd(this))\n        .put(OVERSEERSTATUS, new OverseerStatusCmd(this))\n        .put(DELETESHARD, new DeleteShardCmd(this))\n        .put(DELETEREPLICA, new DeleteReplicaCmd(this))\n        .put(ADDREPLICA, new AddReplicaCmd(this))\n        .put(MOVEREPLICA, new MoveReplicaCmd(this))\n        .put(REINDEXCOLLECTION, new ReindexCollectionCmd(this))\n        .put(UTILIZENODE, new UtilizeNodeCmd(this))\n        .put(RENAME, new RenameCmd(this))\n        .build()\n    ;\n  }\n\n","sourceOld":"  public OverseerCollectionMessageHandler(ZkStateReader zkStateReader, String myId,\n                                        final HttpShardHandlerFactory shardHandlerFactory,\n                                        String adminPath,\n                                        Stats stats,\n                                        Overseer overseer,\n                                        OverseerNodePrioritizer overseerPrioritizer) {\n    this.zkStateReader = zkStateReader;\n    this.shardHandlerFactory = shardHandlerFactory;\n    this.adminPath = adminPath;\n    this.myId = myId;\n    this.stats = stats;\n    this.overseer = overseer;\n    this.cloudManager = overseer.getSolrCloudManager();\n    this.timeSource = cloudManager.getTimeSource();\n    this.isClosed = false;\n    commandMap = new ImmutableMap.Builder<CollectionAction, Cmd>()\n        .put(REPLACENODE, new ReplaceNodeCmd(this))\n        .put(DELETENODE, new DeleteNodeCmd(this))\n        .put(BACKUP, new BackupCmd(this))\n        .put(RESTORE, new RestoreCmd(this))\n        .put(CREATESNAPSHOT, new CreateSnapshotCmd(this))\n        .put(DELETESNAPSHOT, new DeleteSnapshotCmd(this))\n        .put(SPLITSHARD, new SplitShardCmd(this))\n        .put(ADDROLE, new OverseerRoleCmd(this, ADDROLE, overseerPrioritizer))\n        .put(REMOVEROLE, new OverseerRoleCmd(this, REMOVEROLE, overseerPrioritizer))\n        .put(MOCK_COLL_TASK, this::mockOperation)\n        .put(MOCK_SHARD_TASK, this::mockOperation)\n        .put(MOCK_REPLICA_TASK, this::mockOperation)\n        .put(MIGRATESTATEFORMAT, this::migrateStateFormat)\n        .put(CREATESHARD, new CreateShardCmd(this))\n        .put(MIGRATE, new MigrateCmd(this))\n        .put(CREATE, new CreateCollectionCmd(this))\n        .put(MODIFYCOLLECTION, this::modifyCollection)\n        .put(ADDREPLICAPROP, this::processReplicaAddPropertyCommand)\n        .put(DELETEREPLICAPROP, this::processReplicaDeletePropertyCommand)\n        .put(BALANCESHARDUNIQUE, this::balanceProperty)\n        .put(REBALANCELEADERS, this::processRebalanceLeaders)\n        .put(RELOAD, this::reloadCollection)\n        .put(DELETE, new DeleteCollectionCmd(this))\n        .put(CREATEALIAS, new CreateAliasCmd(this))\n        .put(DELETEALIAS, new DeleteAliasCmd(this))\n        .put(ALIASPROP, new SetAliasPropCmd(this))\n        .put(MAINTAINTIMEROUTEDALIAS, new MaintainTimeRoutedAliasCmd(this))\n        .put(MAINTAINCATEGORYROUTEDALIAS, new MaintainCategoryRoutedAliasCmd(this))\n        .put(OVERSEERSTATUS, new OverseerStatusCmd(this))\n        .put(DELETESHARD, new DeleteShardCmd(this))\n        .put(DELETEREPLICA, new DeleteReplicaCmd(this))\n        .put(ADDREPLICA, new AddReplicaCmd(this))\n        .put(MOVEREPLICA, new MoveReplicaCmd(this))\n        .put(REINDEXCOLLECTION, new ReindexCollectionCmd(this))\n        .put(UTILIZENODE, new UtilizeNodeCmd(this))\n        .build()\n    ;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1eebf1b080530bdd7572c4927fb2bb52334b7a86","date":1563199033,"type":3,"author":"Gus Heck","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#OverseerCollectionMessageHandler(ZkStateReader,String,HttpShardHandlerFactory,String,Stats,Overseer,OverseerNodePrioritizer).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#OverseerCollectionMessageHandler(ZkStateReader,String,HttpShardHandlerFactory,String,Stats,Overseer,OverseerNodePrioritizer).mjava","sourceNew":"  public OverseerCollectionMessageHandler(ZkStateReader zkStateReader, String myId,\n                                        final HttpShardHandlerFactory shardHandlerFactory,\n                                        String adminPath,\n                                        Stats stats,\n                                        Overseer overseer,\n                                        OverseerNodePrioritizer overseerPrioritizer) {\n    this.zkStateReader = zkStateReader;\n    this.shardHandlerFactory = shardHandlerFactory;\n    this.adminPath = adminPath;\n    this.myId = myId;\n    this.stats = stats;\n    this.overseer = overseer;\n    this.cloudManager = overseer.getSolrCloudManager();\n    this.timeSource = cloudManager.getTimeSource();\n    this.isClosed = false;\n    commandMap = new ImmutableMap.Builder<CollectionAction, Cmd>()\n        .put(REPLACENODE, new ReplaceNodeCmd(this))\n        .put(DELETENODE, new DeleteNodeCmd(this))\n        .put(BACKUP, new BackupCmd(this))\n        .put(RESTORE, new RestoreCmd(this))\n        .put(CREATESNAPSHOT, new CreateSnapshotCmd(this))\n        .put(DELETESNAPSHOT, new DeleteSnapshotCmd(this))\n        .put(SPLITSHARD, new SplitShardCmd(this))\n        .put(ADDROLE, new OverseerRoleCmd(this, ADDROLE, overseerPrioritizer))\n        .put(REMOVEROLE, new OverseerRoleCmd(this, REMOVEROLE, overseerPrioritizer))\n        .put(MOCK_COLL_TASK, this::mockOperation)\n        .put(MOCK_SHARD_TASK, this::mockOperation)\n        .put(MOCK_REPLICA_TASK, this::mockOperation)\n        .put(MIGRATESTATEFORMAT, this::migrateStateFormat)\n        .put(CREATESHARD, new CreateShardCmd(this))\n        .put(MIGRATE, new MigrateCmd(this))\n        .put(CREATE, new CreateCollectionCmd(this))\n        .put(MODIFYCOLLECTION, this::modifyCollection)\n        .put(ADDREPLICAPROP, this::processReplicaAddPropertyCommand)\n        .put(DELETEREPLICAPROP, this::processReplicaDeletePropertyCommand)\n        .put(BALANCESHARDUNIQUE, this::balanceProperty)\n        .put(REBALANCELEADERS, this::processRebalanceLeaders)\n        .put(RELOAD, this::reloadCollection)\n        .put(DELETE, new DeleteCollectionCmd(this))\n        .put(CREATEALIAS, new CreateAliasCmd(this))\n        .put(DELETEALIAS, new DeleteAliasCmd(this))\n        .put(ALIASPROP, new SetAliasPropCmd(this))\n        .put(MAINTAINROUTEDALIAS, new MaintainRoutedAliasCmd(this))\n        .put(OVERSEERSTATUS, new OverseerStatusCmd(this))\n        .put(DELETESHARD, new DeleteShardCmd(this))\n        .put(DELETEREPLICA, new DeleteReplicaCmd(this))\n        .put(ADDREPLICA, new AddReplicaCmd(this))\n        .put(MOVEREPLICA, new MoveReplicaCmd(this))\n        .put(REINDEXCOLLECTION, new ReindexCollectionCmd(this))\n        .put(UTILIZENODE, new UtilizeNodeCmd(this))\n        .put(RENAME, new RenameCmd(this))\n        .build()\n    ;\n  }\n\n","sourceOld":"  public OverseerCollectionMessageHandler(ZkStateReader zkStateReader, String myId,\n                                        final HttpShardHandlerFactory shardHandlerFactory,\n                                        String adminPath,\n                                        Stats stats,\n                                        Overseer overseer,\n                                        OverseerNodePrioritizer overseerPrioritizer) {\n    this.zkStateReader = zkStateReader;\n    this.shardHandlerFactory = shardHandlerFactory;\n    this.adminPath = adminPath;\n    this.myId = myId;\n    this.stats = stats;\n    this.overseer = overseer;\n    this.cloudManager = overseer.getSolrCloudManager();\n    this.timeSource = cloudManager.getTimeSource();\n    this.isClosed = false;\n    commandMap = new ImmutableMap.Builder<CollectionAction, Cmd>()\n        .put(REPLACENODE, new ReplaceNodeCmd(this))\n        .put(DELETENODE, new DeleteNodeCmd(this))\n        .put(BACKUP, new BackupCmd(this))\n        .put(RESTORE, new RestoreCmd(this))\n        .put(CREATESNAPSHOT, new CreateSnapshotCmd(this))\n        .put(DELETESNAPSHOT, new DeleteSnapshotCmd(this))\n        .put(SPLITSHARD, new SplitShardCmd(this))\n        .put(ADDROLE, new OverseerRoleCmd(this, ADDROLE, overseerPrioritizer))\n        .put(REMOVEROLE, new OverseerRoleCmd(this, REMOVEROLE, overseerPrioritizer))\n        .put(MOCK_COLL_TASK, this::mockOperation)\n        .put(MOCK_SHARD_TASK, this::mockOperation)\n        .put(MOCK_REPLICA_TASK, this::mockOperation)\n        .put(MIGRATESTATEFORMAT, this::migrateStateFormat)\n        .put(CREATESHARD, new CreateShardCmd(this))\n        .put(MIGRATE, new MigrateCmd(this))\n        .put(CREATE, new CreateCollectionCmd(this))\n        .put(MODIFYCOLLECTION, this::modifyCollection)\n        .put(ADDREPLICAPROP, this::processReplicaAddPropertyCommand)\n        .put(DELETEREPLICAPROP, this::processReplicaDeletePropertyCommand)\n        .put(BALANCESHARDUNIQUE, this::balanceProperty)\n        .put(REBALANCELEADERS, this::processRebalanceLeaders)\n        .put(RELOAD, this::reloadCollection)\n        .put(DELETE, new DeleteCollectionCmd(this))\n        .put(CREATEALIAS, new CreateAliasCmd(this))\n        .put(DELETEALIAS, new DeleteAliasCmd(this))\n        .put(ALIASPROP, new SetAliasPropCmd(this))\n        .put(MAINTAINTIMEROUTEDALIAS, new MaintainTimeRoutedAliasCmd(this))\n        .put(MAINTAINCATEGORYROUTEDALIAS, new MaintainCategoryRoutedAliasCmd(this))\n        .put(OVERSEERSTATUS, new OverseerStatusCmd(this))\n        .put(DELETESHARD, new DeleteShardCmd(this))\n        .put(DELETEREPLICA, new DeleteReplicaCmd(this))\n        .put(ADDREPLICA, new AddReplicaCmd(this))\n        .put(MOVEREPLICA, new MoveReplicaCmd(this))\n        .put(REINDEXCOLLECTION, new ReindexCollectionCmd(this))\n        .put(UTILIZENODE, new UtilizeNodeCmd(this))\n        .put(RENAME, new RenameCmd(this))\n        .build()\n    ;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5ad9c35f926b4bf8da0336d1300efc709c8d5a56","date":1591729157,"type":3,"author":"murblanc","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#OverseerCollectionMessageHandler(ZkStateReader,String,HttpShardHandlerFactory,String,Stats,Overseer,OverseerNodePrioritizer).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#OverseerCollectionMessageHandler(ZkStateReader,String,HttpShardHandlerFactory,String,Stats,Overseer,OverseerNodePrioritizer).mjava","sourceNew":"  public OverseerCollectionMessageHandler(ZkStateReader zkStateReader, String myId,\n                                        final HttpShardHandlerFactory shardHandlerFactory,\n                                        String adminPath,\n                                        Stats stats,\n                                        Overseer overseer,\n                                        OverseerNodePrioritizer overseerPrioritizer) {\n    this.zkStateReader = zkStateReader;\n    this.shardHandlerFactory = shardHandlerFactory;\n    this.adminPath = adminPath;\n    this.myId = myId;\n    this.stats = stats;\n    this.overseer = overseer;\n    this.cloudManager = overseer.getSolrCloudManager();\n    this.timeSource = cloudManager.getTimeSource();\n    this.isClosed = false;\n    commandMap = new ImmutableMap.Builder<CollectionAction, Cmd>()\n        .put(REPLACENODE, new ReplaceNodeCmd(this))\n        .put(DELETENODE, new DeleteNodeCmd(this))\n        .put(BACKUP, new BackupCmd(this))\n        .put(RESTORE, new RestoreCmd(this))\n        .put(CREATESNAPSHOT, new CreateSnapshotCmd(this))\n        .put(DELETESNAPSHOT, new DeleteSnapshotCmd(this))\n        .put(SPLITSHARD, new SplitShardCmd(this))\n        .put(ADDROLE, new OverseerRoleCmd(this, ADDROLE, overseerPrioritizer))\n        .put(REMOVEROLE, new OverseerRoleCmd(this, REMOVEROLE, overseerPrioritizer))\n        .put(MOCK_COLL_TASK, this::mockOperation)\n        .put(MOCK_SHARD_TASK, this::mockOperation)\n        .put(MOCK_REPLICA_TASK, this::mockOperation)\n        .put(CREATESHARD, new CreateShardCmd(this))\n        .put(MIGRATE, new MigrateCmd(this))\n        .put(CREATE, new CreateCollectionCmd(this))\n        .put(MODIFYCOLLECTION, this::modifyCollection)\n        .put(ADDREPLICAPROP, this::processReplicaAddPropertyCommand)\n        .put(DELETEREPLICAPROP, this::processReplicaDeletePropertyCommand)\n        .put(BALANCESHARDUNIQUE, this::balanceProperty)\n        .put(REBALANCELEADERS, this::processRebalanceLeaders)\n        .put(RELOAD, this::reloadCollection)\n        .put(DELETE, new DeleteCollectionCmd(this))\n        .put(CREATEALIAS, new CreateAliasCmd(this))\n        .put(DELETEALIAS, new DeleteAliasCmd(this))\n        .put(ALIASPROP, new SetAliasPropCmd(this))\n        .put(MAINTAINROUTEDALIAS, new MaintainRoutedAliasCmd(this))\n        .put(OVERSEERSTATUS, new OverseerStatusCmd(this))\n        .put(DELETESHARD, new DeleteShardCmd(this))\n        .put(DELETEREPLICA, new DeleteReplicaCmd(this))\n        .put(ADDREPLICA, new AddReplicaCmd(this))\n        .put(MOVEREPLICA, new MoveReplicaCmd(this))\n        .put(REINDEXCOLLECTION, new ReindexCollectionCmd(this))\n        .put(UTILIZENODE, new UtilizeNodeCmd(this))\n        .put(RENAME, new RenameCmd(this))\n        .build()\n    ;\n  }\n\n","sourceOld":"  public OverseerCollectionMessageHandler(ZkStateReader zkStateReader, String myId,\n                                        final HttpShardHandlerFactory shardHandlerFactory,\n                                        String adminPath,\n                                        Stats stats,\n                                        Overseer overseer,\n                                        OverseerNodePrioritizer overseerPrioritizer) {\n    this.zkStateReader = zkStateReader;\n    this.shardHandlerFactory = shardHandlerFactory;\n    this.adminPath = adminPath;\n    this.myId = myId;\n    this.stats = stats;\n    this.overseer = overseer;\n    this.cloudManager = overseer.getSolrCloudManager();\n    this.timeSource = cloudManager.getTimeSource();\n    this.isClosed = false;\n    commandMap = new ImmutableMap.Builder<CollectionAction, Cmd>()\n        .put(REPLACENODE, new ReplaceNodeCmd(this))\n        .put(DELETENODE, new DeleteNodeCmd(this))\n        .put(BACKUP, new BackupCmd(this))\n        .put(RESTORE, new RestoreCmd(this))\n        .put(CREATESNAPSHOT, new CreateSnapshotCmd(this))\n        .put(DELETESNAPSHOT, new DeleteSnapshotCmd(this))\n        .put(SPLITSHARD, new SplitShardCmd(this))\n        .put(ADDROLE, new OverseerRoleCmd(this, ADDROLE, overseerPrioritizer))\n        .put(REMOVEROLE, new OverseerRoleCmd(this, REMOVEROLE, overseerPrioritizer))\n        .put(MOCK_COLL_TASK, this::mockOperation)\n        .put(MOCK_SHARD_TASK, this::mockOperation)\n        .put(MOCK_REPLICA_TASK, this::mockOperation)\n        .put(MIGRATESTATEFORMAT, this::migrateStateFormat)\n        .put(CREATESHARD, new CreateShardCmd(this))\n        .put(MIGRATE, new MigrateCmd(this))\n        .put(CREATE, new CreateCollectionCmd(this))\n        .put(MODIFYCOLLECTION, this::modifyCollection)\n        .put(ADDREPLICAPROP, this::processReplicaAddPropertyCommand)\n        .put(DELETEREPLICAPROP, this::processReplicaDeletePropertyCommand)\n        .put(BALANCESHARDUNIQUE, this::balanceProperty)\n        .put(REBALANCELEADERS, this::processRebalanceLeaders)\n        .put(RELOAD, this::reloadCollection)\n        .put(DELETE, new DeleteCollectionCmd(this))\n        .put(CREATEALIAS, new CreateAliasCmd(this))\n        .put(DELETEALIAS, new DeleteAliasCmd(this))\n        .put(ALIASPROP, new SetAliasPropCmd(this))\n        .put(MAINTAINROUTEDALIAS, new MaintainRoutedAliasCmd(this))\n        .put(OVERSEERSTATUS, new OverseerStatusCmd(this))\n        .put(DELETESHARD, new DeleteShardCmd(this))\n        .put(DELETEREPLICA, new DeleteReplicaCmd(this))\n        .put(ADDREPLICA, new AddReplicaCmd(this))\n        .put(MOVEREPLICA, new MoveReplicaCmd(this))\n        .put(REINDEXCOLLECTION, new ReindexCollectionCmd(this))\n        .put(UTILIZENODE, new UtilizeNodeCmd(this))\n        .put(RENAME, new RenameCmd(this))\n        .build()\n    ;\n  }\n\n","bugFix":["66e0b82bd39567aa2bf534e5282d05fb4a4a2c76"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#OverseerCollectionMessageHandler(ZkStateReader,String,HttpShardHandlerFactory,String,Stats,Overseer,OverseerNodePrioritizer).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#OverseerCollectionMessageHandler(ZkStateReader,String,HttpShardHandlerFactory,String,Stats,Overseer,OverseerNodePrioritizer).mjava","sourceNew":"  public OverseerCollectionMessageHandler(ZkStateReader zkStateReader, String myId,\n                                        final HttpShardHandlerFactory shardHandlerFactory,\n                                        String adminPath,\n                                        Stats stats,\n                                        Overseer overseer,\n                                        OverseerNodePrioritizer overseerPrioritizer) {\n    this.zkStateReader = zkStateReader;\n    this.shardHandlerFactory = shardHandlerFactory;\n    this.adminPath = adminPath;\n    this.myId = myId;\n    this.stats = stats;\n    this.overseer = overseer;\n    this.cloudManager = overseer.getSolrCloudManager();\n    this.timeSource = cloudManager.getTimeSource();\n    this.isClosed = false;\n    commandMap = new ImmutableMap.Builder<CollectionAction, Cmd>()\n        .put(REPLACENODE, new ReplaceNodeCmd(this))\n        .put(DELETENODE, new DeleteNodeCmd(this))\n        .put(BACKUP, new BackupCmd(this))\n        .put(RESTORE, new RestoreCmd(this))\n        .put(CREATESNAPSHOT, new CreateSnapshotCmd(this))\n        .put(DELETESNAPSHOT, new DeleteSnapshotCmd(this))\n        .put(SPLITSHARD, new SplitShardCmd(this))\n        .put(ADDROLE, new OverseerRoleCmd(this, ADDROLE, overseerPrioritizer))\n        .put(REMOVEROLE, new OverseerRoleCmd(this, REMOVEROLE, overseerPrioritizer))\n        .put(MOCK_COLL_TASK, this::mockOperation)\n        .put(MOCK_SHARD_TASK, this::mockOperation)\n        .put(MOCK_REPLICA_TASK, this::mockOperation)\n        .put(CREATESHARD, new CreateShardCmd(this))\n        .put(MIGRATE, new MigrateCmd(this))\n        .put(CREATE, new CreateCollectionCmd(this))\n        .put(MODIFYCOLLECTION, this::modifyCollection)\n        .put(ADDREPLICAPROP, this::processReplicaAddPropertyCommand)\n        .put(DELETEREPLICAPROP, this::processReplicaDeletePropertyCommand)\n        .put(BALANCESHARDUNIQUE, this::balanceProperty)\n        .put(REBALANCELEADERS, this::processRebalanceLeaders)\n        .put(RELOAD, this::reloadCollection)\n        .put(DELETE, new DeleteCollectionCmd(this))\n        .put(CREATEALIAS, new CreateAliasCmd(this))\n        .put(DELETEALIAS, new DeleteAliasCmd(this))\n        .put(ALIASPROP, new SetAliasPropCmd(this))\n        .put(MAINTAINROUTEDALIAS, new MaintainRoutedAliasCmd(this))\n        .put(OVERSEERSTATUS, new OverseerStatusCmd(this))\n        .put(DELETESHARD, new DeleteShardCmd(this))\n        .put(DELETEREPLICA, new DeleteReplicaCmd(this))\n        .put(ADDREPLICA, new AddReplicaCmd(this))\n        .put(MOVEREPLICA, new MoveReplicaCmd(this))\n        .put(REINDEXCOLLECTION, new ReindexCollectionCmd(this))\n        .put(RENAME, new RenameCmd(this))\n        .build()\n    ;\n  }\n\n","sourceOld":"  public OverseerCollectionMessageHandler(ZkStateReader zkStateReader, String myId,\n                                        final HttpShardHandlerFactory shardHandlerFactory,\n                                        String adminPath,\n                                        Stats stats,\n                                        Overseer overseer,\n                                        OverseerNodePrioritizer overseerPrioritizer) {\n    this.zkStateReader = zkStateReader;\n    this.shardHandlerFactory = shardHandlerFactory;\n    this.adminPath = adminPath;\n    this.myId = myId;\n    this.stats = stats;\n    this.overseer = overseer;\n    this.cloudManager = overseer.getSolrCloudManager();\n    this.timeSource = cloudManager.getTimeSource();\n    this.isClosed = false;\n    commandMap = new ImmutableMap.Builder<CollectionAction, Cmd>()\n        .put(REPLACENODE, new ReplaceNodeCmd(this))\n        .put(DELETENODE, new DeleteNodeCmd(this))\n        .put(BACKUP, new BackupCmd(this))\n        .put(RESTORE, new RestoreCmd(this))\n        .put(CREATESNAPSHOT, new CreateSnapshotCmd(this))\n        .put(DELETESNAPSHOT, new DeleteSnapshotCmd(this))\n        .put(SPLITSHARD, new SplitShardCmd(this))\n        .put(ADDROLE, new OverseerRoleCmd(this, ADDROLE, overseerPrioritizer))\n        .put(REMOVEROLE, new OverseerRoleCmd(this, REMOVEROLE, overseerPrioritizer))\n        .put(MOCK_COLL_TASK, this::mockOperation)\n        .put(MOCK_SHARD_TASK, this::mockOperation)\n        .put(MOCK_REPLICA_TASK, this::mockOperation)\n        .put(CREATESHARD, new CreateShardCmd(this))\n        .put(MIGRATE, new MigrateCmd(this))\n        .put(CREATE, new CreateCollectionCmd(this))\n        .put(MODIFYCOLLECTION, this::modifyCollection)\n        .put(ADDREPLICAPROP, this::processReplicaAddPropertyCommand)\n        .put(DELETEREPLICAPROP, this::processReplicaDeletePropertyCommand)\n        .put(BALANCESHARDUNIQUE, this::balanceProperty)\n        .put(REBALANCELEADERS, this::processRebalanceLeaders)\n        .put(RELOAD, this::reloadCollection)\n        .put(DELETE, new DeleteCollectionCmd(this))\n        .put(CREATEALIAS, new CreateAliasCmd(this))\n        .put(DELETEALIAS, new DeleteAliasCmd(this))\n        .put(ALIASPROP, new SetAliasPropCmd(this))\n        .put(MAINTAINROUTEDALIAS, new MaintainRoutedAliasCmd(this))\n        .put(OVERSEERSTATUS, new OverseerStatusCmd(this))\n        .put(DELETESHARD, new DeleteShardCmd(this))\n        .put(DELETEREPLICA, new DeleteReplicaCmd(this))\n        .put(ADDREPLICA, new AddReplicaCmd(this))\n        .put(MOVEREPLICA, new MoveReplicaCmd(this))\n        .put(REINDEXCOLLECTION, new ReindexCollectionCmd(this))\n        .put(UTILIZENODE, new UtilizeNodeCmd(this))\n        .put(RENAME, new RenameCmd(this))\n        .build()\n    ;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5ad9c35f926b4bf8da0336d1300efc709c8d5a56":["1eebf1b080530bdd7572c4927fb2bb52334b7a86"],"3f504512a03d978990cbff30db0522b354e846db":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"59bad1cc1e7f90125a140496e79b06afcedb68ec":["dad6a48950aafc9c2f5dc54740f8c6ab81304203"],"dad6a48950aafc9c2f5dc54740f8c6ab81304203":["b627755385655c7cd3fb296f17593658805cf4d5"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b627755385655c7cd3fb296f17593658805cf4d5":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"1eebf1b080530bdd7572c4927fb2bb52334b7a86":["59bad1cc1e7f90125a140496e79b06afcedb68ec"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"5ad9c35f926b4bf8da0336d1300efc709c8d5a56":["3f504512a03d978990cbff30db0522b354e846db"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"59bad1cc1e7f90125a140496e79b06afcedb68ec":["1eebf1b080530bdd7572c4927fb2bb52334b7a86"],"dad6a48950aafc9c2f5dc54740f8c6ab81304203":["59bad1cc1e7f90125a140496e79b06afcedb68ec"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["b627755385655c7cd3fb296f17593658805cf4d5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"b627755385655c7cd3fb296f17593658805cf4d5":["dad6a48950aafc9c2f5dc54740f8c6ab81304203"],"1eebf1b080530bdd7572c4927fb2bb52334b7a86":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}