{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simDeleteCollection(String,String,NamedList).mjava","commits":[{"id":"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","date":1513252583,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simDeleteCollection(String,String,NamedList).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Delete a collection\n   * @param collection collection name\n   * @param async async id\n   * @param results results of the operation\n   */\n  public void simDeleteCollection(String collection, String async, NamedList results) throws IOException {\n    if (async != null) {\n      results.add(CoreAdminParams.REQUESTID, async);\n    }\n    lock.lock();\n    try {\n      collProperties.remove(collection);\n      sliceProperties.remove(collection);\n\n      opDelay(collection, CollectionParams.CollectionAction.DELETE.name());\n\n      opDelays.remove(collection);\n      nodeReplicaMap.forEach((n, replicas) -> {\n        for (Iterator<ReplicaInfo> it = replicas.iterator(); it.hasNext(); ) {\n          ReplicaInfo ri = it.next();\n          if (ri.getCollection().equals(collection)) {\n            it.remove();\n            // update the number of cores in node values\n            Integer cores = (Integer) cloudManager.getSimNodeStateProvider().simGetNodeValue(n, \"cores\");\n            if (cores != null) { // node is still up\n              if (cores == 0) {\n                throw new RuntimeException(\"Unexpected value of 'cores' (\" + cores + \") on node: \" + n);\n              }\n              cloudManager.getSimNodeStateProvider().simSetNodeValue(n, \"cores\", cores - 1);\n            }\n          }\n        }\n      });\n      collectionsStatesRef.set(null);\n      results.add(\"success\", \"\");\n    } catch (Exception e) {\n      LOG.warn(\"Exception\", e);\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a4422b331d00607258b0ed3e43934306e67764aa","date":1513943901,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simDeleteCollection(String,String,NamedList).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simDeleteCollection(String,String,NamedList).mjava","sourceNew":"  /**\n   * Delete a collection\n   * @param collection collection name\n   * @param async async id\n   * @param results results of the operation\n   */\n  public void simDeleteCollection(String collection, String async, NamedList results) throws IOException {\n    if (async != null) {\n      results.add(CoreAdminParams.REQUESTID, async);\n    }\n    lock.lock();\n    try {\n      collProperties.remove(collection);\n      sliceProperties.remove(collection);\n      leaderThrottles.remove(collection);\n\n      opDelay(collection, CollectionParams.CollectionAction.DELETE.name());\n\n      opDelays.remove(collection);\n      nodeReplicaMap.forEach((n, replicas) -> {\n        for (Iterator<ReplicaInfo> it = replicas.iterator(); it.hasNext(); ) {\n          ReplicaInfo ri = it.next();\n          if (ri.getCollection().equals(collection)) {\n            it.remove();\n            // update the number of cores in node values\n            Integer cores = (Integer) cloudManager.getSimNodeStateProvider().simGetNodeValue(n, \"cores\");\n            if (cores != null) { // node is still up\n              if (cores == 0) {\n                throw new RuntimeException(\"Unexpected value of 'cores' (\" + cores + \") on node: \" + n);\n              }\n              cloudManager.getSimNodeStateProvider().simSetNodeValue(n, \"cores\", cores - 1);\n            }\n          }\n        }\n      });\n      collectionsStatesRef.set(null);\n      results.add(\"success\", \"\");\n    } catch (Exception e) {\n      LOG.warn(\"Exception\", e);\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","sourceOld":"  /**\n   * Delete a collection\n   * @param collection collection name\n   * @param async async id\n   * @param results results of the operation\n   */\n  public void simDeleteCollection(String collection, String async, NamedList results) throws IOException {\n    if (async != null) {\n      results.add(CoreAdminParams.REQUESTID, async);\n    }\n    lock.lock();\n    try {\n      collProperties.remove(collection);\n      sliceProperties.remove(collection);\n\n      opDelay(collection, CollectionParams.CollectionAction.DELETE.name());\n\n      opDelays.remove(collection);\n      nodeReplicaMap.forEach((n, replicas) -> {\n        for (Iterator<ReplicaInfo> it = replicas.iterator(); it.hasNext(); ) {\n          ReplicaInfo ri = it.next();\n          if (ri.getCollection().equals(collection)) {\n            it.remove();\n            // update the number of cores in node values\n            Integer cores = (Integer) cloudManager.getSimNodeStateProvider().simGetNodeValue(n, \"cores\");\n            if (cores != null) { // node is still up\n              if (cores == 0) {\n                throw new RuntimeException(\"Unexpected value of 'cores' (\" + cores + \") on node: \" + n);\n              }\n              cloudManager.getSimNodeStateProvider().simSetNodeValue(n, \"cores\", cores - 1);\n            }\n          }\n        }\n      });\n      collectionsStatesRef.set(null);\n      results.add(\"success\", \"\");\n    } catch (Exception e) {\n      LOG.warn(\"Exception\", e);\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ce71a9836bf1eba34a0ab31884e9eb8ad3f1cef1","date":1523453934,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simDeleteCollection(String,String,NamedList).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simDeleteCollection(String,String,NamedList).mjava","sourceNew":"  /**\n   * Delete a collection\n   * @param collection collection name\n   * @param async async id\n   * @param results results of the operation\n   */\n  public void simDeleteCollection(String collection, String async, NamedList results) throws Exception {\n    if (async != null) {\n      results.add(CoreAdminParams.REQUESTID, async);\n    }\n    lock.lockInterruptibly();\n    try {\n      collProperties.remove(collection);\n      sliceProperties.remove(collection);\n      leaderThrottles.remove(collection);\n\n      opDelay(collection, CollectionParams.CollectionAction.DELETE.name());\n\n      opDelays.remove(collection);\n      nodeReplicaMap.forEach((n, replicas) -> {\n        for (Iterator<ReplicaInfo> it = replicas.iterator(); it.hasNext(); ) {\n          ReplicaInfo ri = it.next();\n          if (ri.getCollection().equals(collection)) {\n            it.remove();\n            // update the number of cores in node values\n            Integer cores = (Integer) cloudManager.getSimNodeStateProvider().simGetNodeValue(n, \"cores\");\n            if (cores != null) { // node is still up\n              if (cores == 0) {\n                throw new RuntimeException(\"Unexpected value of 'cores' (\" + cores + \") on node: \" + n);\n              }\n              cloudManager.getSimNodeStateProvider().simSetNodeValue(n, \"cores\", cores - 1);\n            }\n          }\n        }\n      });\n      collectionsStatesRef.set(null);\n      results.add(\"success\", \"\");\n    } catch (Exception e) {\n      LOG.warn(\"Exception\", e);\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","sourceOld":"  /**\n   * Delete a collection\n   * @param collection collection name\n   * @param async async id\n   * @param results results of the operation\n   */\n  public void simDeleteCollection(String collection, String async, NamedList results) throws IOException {\n    if (async != null) {\n      results.add(CoreAdminParams.REQUESTID, async);\n    }\n    lock.lock();\n    try {\n      collProperties.remove(collection);\n      sliceProperties.remove(collection);\n      leaderThrottles.remove(collection);\n\n      opDelay(collection, CollectionParams.CollectionAction.DELETE.name());\n\n      opDelays.remove(collection);\n      nodeReplicaMap.forEach((n, replicas) -> {\n        for (Iterator<ReplicaInfo> it = replicas.iterator(); it.hasNext(); ) {\n          ReplicaInfo ri = it.next();\n          if (ri.getCollection().equals(collection)) {\n            it.remove();\n            // update the number of cores in node values\n            Integer cores = (Integer) cloudManager.getSimNodeStateProvider().simGetNodeValue(n, \"cores\");\n            if (cores != null) { // node is still up\n              if (cores == 0) {\n                throw new RuntimeException(\"Unexpected value of 'cores' (\" + cores + \") on node: \" + n);\n              }\n              cloudManager.getSimNodeStateProvider().simSetNodeValue(n, \"cores\", cores - 1);\n            }\n          }\n        }\n      });\n      collectionsStatesRef.set(null);\n      results.add(\"success\", \"\");\n    } catch (Exception e) {\n      LOG.warn(\"Exception\", e);\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43345f1452f9510f8aaadae6156fe0c834e7d957","date":1523483670,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simDeleteCollection(String,String,NamedList).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simDeleteCollection(String,String,NamedList).mjava","sourceNew":"  /**\n   * Delete a collection\n   * @param collection collection name\n   * @param async async id\n   * @param results results of the operation\n   */\n  public void simDeleteCollection(String collection, String async, NamedList results) throws Exception {\n    if (async != null) {\n      results.add(CoreAdminParams.REQUESTID, async);\n    }\n    lock.lockInterruptibly();\n    try {\n      collProperties.remove(collection);\n      sliceProperties.remove(collection);\n      leaderThrottles.remove(collection);\n\n      opDelay(collection, CollectionParams.CollectionAction.DELETE.name());\n\n      opDelays.remove(collection);\n      nodeReplicaMap.forEach((n, replicas) -> {\n        for (Iterator<ReplicaInfo> it = replicas.iterator(); it.hasNext(); ) {\n          ReplicaInfo ri = it.next();\n          if (ri.getCollection().equals(collection)) {\n            it.remove();\n            // update the number of cores in node values\n            Integer cores = (Integer) cloudManager.getSimNodeStateProvider().simGetNodeValue(n, \"cores\");\n            if (cores != null) { // node is still up\n              if (cores == 0) {\n                throw new RuntimeException(\"Unexpected value of 'cores' (\" + cores + \") on node: \" + n);\n              }\n              cloudManager.getSimNodeStateProvider().simSetNodeValue(n, \"cores\", cores - 1);\n            }\n          }\n        }\n      });\n      collectionsStatesRef.set(null);\n      results.add(\"success\", \"\");\n    } catch (Exception e) {\n      LOG.warn(\"Exception\", e);\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","sourceOld":"  /**\n   * Delete a collection\n   * @param collection collection name\n   * @param async async id\n   * @param results results of the operation\n   */\n  public void simDeleteCollection(String collection, String async, NamedList results) throws IOException {\n    if (async != null) {\n      results.add(CoreAdminParams.REQUESTID, async);\n    }\n    lock.lock();\n    try {\n      collProperties.remove(collection);\n      sliceProperties.remove(collection);\n      leaderThrottles.remove(collection);\n\n      opDelay(collection, CollectionParams.CollectionAction.DELETE.name());\n\n      opDelays.remove(collection);\n      nodeReplicaMap.forEach((n, replicas) -> {\n        for (Iterator<ReplicaInfo> it = replicas.iterator(); it.hasNext(); ) {\n          ReplicaInfo ri = it.next();\n          if (ri.getCollection().equals(collection)) {\n            it.remove();\n            // update the number of cores in node values\n            Integer cores = (Integer) cloudManager.getSimNodeStateProvider().simGetNodeValue(n, \"cores\");\n            if (cores != null) { // node is still up\n              if (cores == 0) {\n                throw new RuntimeException(\"Unexpected value of 'cores' (\" + cores + \") on node: \" + n);\n              }\n              cloudManager.getSimNodeStateProvider().simSetNodeValue(n, \"cores\", cores - 1);\n            }\n          }\n        }\n      });\n      collectionsStatesRef.set(null);\n      results.add(\"success\", \"\");\n    } catch (Exception e) {\n      LOG.warn(\"Exception\", e);\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad60b6945c360ff89899d716d9cdec8dd674e2a0","date":1528114819,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simDeleteCollection(String,String,NamedList).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simDeleteCollection(String,String,NamedList).mjava","sourceNew":"  /**\n   * Delete a collection\n   * @param collection collection name\n   * @param async async id\n   * @param results results of the operation\n   */\n  public void simDeleteCollection(String collection, String async, NamedList results) throws Exception {\n    if (async != null) {\n      results.add(CoreAdminParams.REQUESTID, async);\n    }\n    lock.lockInterruptibly();\n    try {\n      collProperties.remove(collection);\n      sliceProperties.remove(collection);\n      leaderThrottles.remove(collection);\n\n      opDelay(collection, CollectionParams.CollectionAction.DELETE.name());\n\n      opDelays.remove(collection);\n      nodeReplicaMap.forEach((n, replicas) -> {\n        for (Iterator<ReplicaInfo> it = replicas.iterator(); it.hasNext(); ) {\n          ReplicaInfo ri = it.next();\n          if (ri.getCollection().equals(collection)) {\n            it.remove();\n            // update the number of cores in node values\n            Integer cores = (Integer) cloudManager.getSimNodeStateProvider().simGetNodeValue(n, \"cores\");\n            if (cores != null) { // node is still up\n              if (cores == 0) {\n                throw new RuntimeException(\"Unexpected value of 'cores' (\" + cores + \") on node: \" + n);\n              }\n              try {\n                cloudManager.getSimNodeStateProvider().simSetNodeValue(n, \"cores\", cores - 1);\n              } catch (InterruptedException e) {\n                Thread.currentThread().interrupt();\n                throw new RuntimeException(\"interrupted\");\n              }\n            }\n          }\n        }\n      });\n      collectionsStatesRef.set(null);\n      saveClusterState.set(true);\n      results.add(\"success\", \"\");\n    } catch (Exception e) {\n      LOG.warn(\"Exception\", e);\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","sourceOld":"  /**\n   * Delete a collection\n   * @param collection collection name\n   * @param async async id\n   * @param results results of the operation\n   */\n  public void simDeleteCollection(String collection, String async, NamedList results) throws Exception {\n    if (async != null) {\n      results.add(CoreAdminParams.REQUESTID, async);\n    }\n    lock.lockInterruptibly();\n    try {\n      collProperties.remove(collection);\n      sliceProperties.remove(collection);\n      leaderThrottles.remove(collection);\n\n      opDelay(collection, CollectionParams.CollectionAction.DELETE.name());\n\n      opDelays.remove(collection);\n      nodeReplicaMap.forEach((n, replicas) -> {\n        for (Iterator<ReplicaInfo> it = replicas.iterator(); it.hasNext(); ) {\n          ReplicaInfo ri = it.next();\n          if (ri.getCollection().equals(collection)) {\n            it.remove();\n            // update the number of cores in node values\n            Integer cores = (Integer) cloudManager.getSimNodeStateProvider().simGetNodeValue(n, \"cores\");\n            if (cores != null) { // node is still up\n              if (cores == 0) {\n                throw new RuntimeException(\"Unexpected value of 'cores' (\" + cores + \") on node: \" + n);\n              }\n              cloudManager.getSimNodeStateProvider().simSetNodeValue(n, \"cores\", cores - 1);\n            }\n          }\n        }\n      });\n      collectionsStatesRef.set(null);\n      results.add(\"success\", \"\");\n    } catch (Exception e) {\n      LOG.warn(\"Exception\", e);\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f592209545c71895260367152601e9200399776d","date":1528238935,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simDeleteCollection(String,String,NamedList).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simDeleteCollection(String,String,NamedList).mjava","sourceNew":"  /**\n   * Delete a collection\n   * @param collection collection name\n   * @param async async id\n   * @param results results of the operation\n   */\n  public void simDeleteCollection(String collection, String async, NamedList results) throws Exception {\n    if (async != null) {\n      results.add(CoreAdminParams.REQUESTID, async);\n    }\n    lock.lockInterruptibly();\n    try {\n      collProperties.remove(collection);\n      sliceProperties.remove(collection);\n      leaderThrottles.remove(collection);\n\n      opDelay(collection, CollectionParams.CollectionAction.DELETE.name());\n\n      opDelays.remove(collection);\n      nodeReplicaMap.forEach((n, replicas) -> {\n        for (Iterator<ReplicaInfo> it = replicas.iterator(); it.hasNext(); ) {\n          ReplicaInfo ri = it.next();\n          if (ri.getCollection().equals(collection)) {\n            it.remove();\n            // update the number of cores in node values\n            Integer cores = (Integer) cloudManager.getSimNodeStateProvider().simGetNodeValue(n, \"cores\");\n            if (cores != null) { // node is still up\n              if (cores == 0) {\n                throw new RuntimeException(\"Unexpected value of 'cores' (\" + cores + \") on node: \" + n);\n              }\n              try {\n                cloudManager.getSimNodeStateProvider().simSetNodeValue(n, \"cores\", cores - 1);\n              } catch (InterruptedException e) {\n                Thread.currentThread().interrupt();\n                throw new RuntimeException(\"interrupted\");\n              }\n            }\n          }\n        }\n      });\n      collectionsStatesRef.set(null);\n      saveClusterState.set(true);\n      results.add(\"success\", \"\");\n    } catch (Exception e) {\n      LOG.warn(\"Exception\", e);\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","sourceOld":"  /**\n   * Delete a collection\n   * @param collection collection name\n   * @param async async id\n   * @param results results of the operation\n   */\n  public void simDeleteCollection(String collection, String async, NamedList results) throws Exception {\n    if (async != null) {\n      results.add(CoreAdminParams.REQUESTID, async);\n    }\n    lock.lockInterruptibly();\n    try {\n      collProperties.remove(collection);\n      sliceProperties.remove(collection);\n      leaderThrottles.remove(collection);\n\n      opDelay(collection, CollectionParams.CollectionAction.DELETE.name());\n\n      opDelays.remove(collection);\n      nodeReplicaMap.forEach((n, replicas) -> {\n        for (Iterator<ReplicaInfo> it = replicas.iterator(); it.hasNext(); ) {\n          ReplicaInfo ri = it.next();\n          if (ri.getCollection().equals(collection)) {\n            it.remove();\n            // update the number of cores in node values\n            Integer cores = (Integer) cloudManager.getSimNodeStateProvider().simGetNodeValue(n, \"cores\");\n            if (cores != null) { // node is still up\n              if (cores == 0) {\n                throw new RuntimeException(\"Unexpected value of 'cores' (\" + cores + \") on node: \" + n);\n              }\n              cloudManager.getSimNodeStateProvider().simSetNodeValue(n, \"cores\", cores - 1);\n            }\n          }\n        }\n      });\n      collectionsStatesRef.set(null);\n      results.add(\"success\", \"\");\n    } catch (Exception e) {\n      LOG.warn(\"Exception\", e);\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b70042a8a492f7054d480ccdd2be9796510d4327","date":1528386658,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simDeleteCollection(String,String,NamedList).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simDeleteCollection(String,String,NamedList).mjava","sourceNew":"  /**\n   * Delete a collection\n   * @param collection collection name\n   * @param async async id\n   * @param results results of the operation\n   */\n  public void simDeleteCollection(String collection, String async, NamedList results) throws Exception {\n    if (async != null) {\n      results.add(CoreAdminParams.REQUESTID, async);\n    }\n    lock.lockInterruptibly();\n    try {\n      collProperties.remove(collection);\n      sliceProperties.remove(collection);\n      leaderThrottles.remove(collection);\n\n      opDelay(collection, CollectionParams.CollectionAction.DELETE.name());\n\n      opDelays.remove(collection);\n      nodeReplicaMap.forEach((n, replicas) -> {\n        for (Iterator<ReplicaInfo> it = replicas.iterator(); it.hasNext(); ) {\n          ReplicaInfo ri = it.next();\n          if (ri.getCollection().equals(collection)) {\n            it.remove();\n            // update the number of cores in node values\n            Integer cores = (Integer) cloudManager.getSimNodeStateProvider().simGetNodeValue(n, \"cores\");\n            if (cores != null) { // node is still up\n              if (cores == 0) {\n                throw new RuntimeException(\"Unexpected value of 'cores' (\" + cores + \") on node: \" + n);\n              }\n              try {\n                cloudManager.getSimNodeStateProvider().simSetNodeValue(n, \"cores\", cores - 1);\n              } catch (InterruptedException e) {\n                Thread.currentThread().interrupt();\n                throw new RuntimeException(\"interrupted\");\n              }\n            }\n          }\n        }\n      });\n      collectionsStatesRef.set(null);\n      saveClusterState.set(true);\n      results.add(\"success\", \"\");\n    } catch (Exception e) {\n      LOG.warn(\"Exception\", e);\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","sourceOld":"  /**\n   * Delete a collection\n   * @param collection collection name\n   * @param async async id\n   * @param results results of the operation\n   */\n  public void simDeleteCollection(String collection, String async, NamedList results) throws Exception {\n    if (async != null) {\n      results.add(CoreAdminParams.REQUESTID, async);\n    }\n    lock.lockInterruptibly();\n    try {\n      collProperties.remove(collection);\n      sliceProperties.remove(collection);\n      leaderThrottles.remove(collection);\n\n      opDelay(collection, CollectionParams.CollectionAction.DELETE.name());\n\n      opDelays.remove(collection);\n      nodeReplicaMap.forEach((n, replicas) -> {\n        for (Iterator<ReplicaInfo> it = replicas.iterator(); it.hasNext(); ) {\n          ReplicaInfo ri = it.next();\n          if (ri.getCollection().equals(collection)) {\n            it.remove();\n            // update the number of cores in node values\n            Integer cores = (Integer) cloudManager.getSimNodeStateProvider().simGetNodeValue(n, \"cores\");\n            if (cores != null) { // node is still up\n              if (cores == 0) {\n                throw new RuntimeException(\"Unexpected value of 'cores' (\" + cores + \") on node: \" + n);\n              }\n              cloudManager.getSimNodeStateProvider().simSetNodeValue(n, \"cores\", cores - 1);\n            }\n          }\n        }\n      });\n      collectionsStatesRef.set(null);\n      results.add(\"success\", \"\");\n    } catch (Exception e) {\n      LOG.warn(\"Exception\", e);\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"042b92cf48996255bedb0c3c4bf772d7e06e4dea","date":1534272102,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simDeleteCollection(String,String,NamedList).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simDeleteCollection(String,String,NamedList).mjava","sourceNew":"  /**\n   * Delete a collection\n   * @param collection collection name\n   * @param async async id\n   * @param results results of the operation\n   */\n  public void simDeleteCollection(String collection, String async, NamedList results) throws Exception {\n    ensureNotClosed();\n    if (async != null) {\n      results.add(CoreAdminParams.REQUESTID, async);\n    }\n    lock.lockInterruptibly();\n    try {\n      collProperties.remove(collection);\n      sliceProperties.remove(collection);\n      leaderThrottles.remove(collection);\n\n      opDelay(collection, CollectionParams.CollectionAction.DELETE.name());\n\n      opDelays.remove(collection);\n      nodeReplicaMap.forEach((n, replicas) -> {\n        for (Iterator<ReplicaInfo> it = replicas.iterator(); it.hasNext(); ) {\n          ReplicaInfo ri = it.next();\n          if (ri.getCollection().equals(collection)) {\n            it.remove();\n            // update the number of cores in node values\n            Integer cores = (Integer) cloudManager.getSimNodeStateProvider().simGetNodeValue(n, \"cores\");\n            if (cores != null) { // node is still up\n              if (cores == 0) {\n                throw new RuntimeException(\"Unexpected value of 'cores' (\" + cores + \") on node: \" + n);\n              }\n              try {\n                cloudManager.getSimNodeStateProvider().simSetNodeValue(n, \"cores\", cores - 1);\n              } catch (InterruptedException e) {\n                Thread.currentThread().interrupt();\n                throw new RuntimeException(\"interrupted\");\n              }\n            }\n          }\n        }\n      });\n      collectionsStatesRef.set(null);\n      saveClusterState.set(true);\n      results.add(\"success\", \"\");\n    } catch (Exception e) {\n      LOG.warn(\"Exception\", e);\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","sourceOld":"  /**\n   * Delete a collection\n   * @param collection collection name\n   * @param async async id\n   * @param results results of the operation\n   */\n  public void simDeleteCollection(String collection, String async, NamedList results) throws Exception {\n    if (async != null) {\n      results.add(CoreAdminParams.REQUESTID, async);\n    }\n    lock.lockInterruptibly();\n    try {\n      collProperties.remove(collection);\n      sliceProperties.remove(collection);\n      leaderThrottles.remove(collection);\n\n      opDelay(collection, CollectionParams.CollectionAction.DELETE.name());\n\n      opDelays.remove(collection);\n      nodeReplicaMap.forEach((n, replicas) -> {\n        for (Iterator<ReplicaInfo> it = replicas.iterator(); it.hasNext(); ) {\n          ReplicaInfo ri = it.next();\n          if (ri.getCollection().equals(collection)) {\n            it.remove();\n            // update the number of cores in node values\n            Integer cores = (Integer) cloudManager.getSimNodeStateProvider().simGetNodeValue(n, \"cores\");\n            if (cores != null) { // node is still up\n              if (cores == 0) {\n                throw new RuntimeException(\"Unexpected value of 'cores' (\" + cores + \") on node: \" + n);\n              }\n              try {\n                cloudManager.getSimNodeStateProvider().simSetNodeValue(n, \"cores\", cores - 1);\n              } catch (InterruptedException e) {\n                Thread.currentThread().interrupt();\n                throw new RuntimeException(\"interrupted\");\n              }\n            }\n          }\n        }\n      });\n      collectionsStatesRef.set(null);\n      saveClusterState.set(true);\n      results.add(\"success\", \"\");\n    } catch (Exception e) {\n      LOG.warn(\"Exception\", e);\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd","date":1534976797,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simDeleteCollection(String,String,NamedList).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simDeleteCollection(String,String,NamedList).mjava","sourceNew":"  /**\n   * Delete a collection\n   * @param collection collection name\n   * @param async async id\n   * @param results results of the operation\n   */\n  public void simDeleteCollection(String collection, String async, NamedList results) throws Exception {\n    ensureNotClosed();\n    if (async != null) {\n      results.add(CoreAdminParams.REQUESTID, async);\n    }\n    lock.lockInterruptibly();\n    try {\n      collProperties.remove(collection);\n      sliceProperties.remove(collection);\n      leaderThrottles.remove(collection);\n\n      opDelay(collection, CollectionParams.CollectionAction.DELETE.name());\n\n      opDelays.remove(collection);\n      nodeReplicaMap.forEach((n, replicas) -> {\n        for (Iterator<ReplicaInfo> it = replicas.iterator(); it.hasNext(); ) {\n          ReplicaInfo ri = it.next();\n          if (ri.getCollection().equals(collection)) {\n            it.remove();\n            // update the number of cores in node values\n            Integer cores = (Integer) cloudManager.getSimNodeStateProvider().simGetNodeValue(n, \"cores\");\n            if (cores != null) { // node is still up\n              if (cores == 0) {\n                throw new RuntimeException(\"Unexpected value of 'cores' (\" + cores + \") on node: \" + n);\n              }\n              try {\n                cloudManager.getSimNodeStateProvider().simSetNodeValue(n, \"cores\", cores - 1);\n              } catch (InterruptedException e) {\n                Thread.currentThread().interrupt();\n                throw new RuntimeException(\"interrupted\");\n              }\n            }\n          }\n        }\n      });\n      collectionsStatesRef.set(null);\n      saveClusterState.set(true);\n      results.add(\"success\", \"\");\n    } catch (Exception e) {\n      log.warn(\"Exception\", e);\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","sourceOld":"  /**\n   * Delete a collection\n   * @param collection collection name\n   * @param async async id\n   * @param results results of the operation\n   */\n  public void simDeleteCollection(String collection, String async, NamedList results) throws Exception {\n    ensureNotClosed();\n    if (async != null) {\n      results.add(CoreAdminParams.REQUESTID, async);\n    }\n    lock.lockInterruptibly();\n    try {\n      collProperties.remove(collection);\n      sliceProperties.remove(collection);\n      leaderThrottles.remove(collection);\n\n      opDelay(collection, CollectionParams.CollectionAction.DELETE.name());\n\n      opDelays.remove(collection);\n      nodeReplicaMap.forEach((n, replicas) -> {\n        for (Iterator<ReplicaInfo> it = replicas.iterator(); it.hasNext(); ) {\n          ReplicaInfo ri = it.next();\n          if (ri.getCollection().equals(collection)) {\n            it.remove();\n            // update the number of cores in node values\n            Integer cores = (Integer) cloudManager.getSimNodeStateProvider().simGetNodeValue(n, \"cores\");\n            if (cores != null) { // node is still up\n              if (cores == 0) {\n                throw new RuntimeException(\"Unexpected value of 'cores' (\" + cores + \") on node: \" + n);\n              }\n              try {\n                cloudManager.getSimNodeStateProvider().simSetNodeValue(n, \"cores\", cores - 1);\n              } catch (InterruptedException e) {\n                Thread.currentThread().interrupt();\n                throw new RuntimeException(\"interrupted\");\n              }\n            }\n          }\n        }\n      });\n      collectionsStatesRef.set(null);\n      saveClusterState.set(true);\n      results.add(\"success\", \"\");\n    } catch (Exception e) {\n      LOG.warn(\"Exception\", e);\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fc18bc8ea2e2c1e308757ff50671c774438e9f3e","date":1538052583,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simDeleteCollection(String,String,NamedList).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simDeleteCollection(String,String,NamedList).mjava","sourceNew":"  /**\n   * Delete a collection\n   * @param collection collection name\n   * @param async async id\n   * @param results results of the operation\n   */\n  public void simDeleteCollection(String collection, String async, NamedList results) throws Exception {\n    ensureNotClosed();\n    if (async != null) {\n      results.add(CoreAdminParams.REQUESTID, async);\n    }\n    lock.lockInterruptibly();\n    try {\n      collProperties.remove(collection);\n      sliceProperties.remove(collection);\n      leaderThrottles.remove(collection);\n      colShardReplicaMap.remove(collection);\n\n      opDelay(collection, CollectionParams.CollectionAction.DELETE.name());\n\n      opDelays.remove(collection);\n      nodeReplicaMap.forEach((n, replicas) -> {\n        for (Iterator<ReplicaInfo> it = replicas.iterator(); it.hasNext(); ) {\n          ReplicaInfo ri = it.next();\n          if (ri.getCollection().equals(collection)) {\n            it.remove();\n            // update the number of cores in node values\n            Integer cores = (Integer) cloudManager.getSimNodeStateProvider().simGetNodeValue(n, \"cores\");\n            if (cores != null) { // node is still up\n              if (cores == 0) {\n                throw new RuntimeException(\"Unexpected value of 'cores' (\" + cores + \") on node: \" + n);\n              }\n              try {\n                cloudManager.getSimNodeStateProvider().simSetNodeValue(n, \"cores\", cores - 1);\n              } catch (InterruptedException e) {\n                Thread.currentThread().interrupt();\n                throw new RuntimeException(\"interrupted\");\n              }\n            }\n          }\n        }\n      });\n      collectionsStatesRef.set(null);\n      saveClusterState.set(true);\n      results.add(\"success\", \"\");\n    } catch (Exception e) {\n      log.warn(\"Exception\", e);\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","sourceOld":"  /**\n   * Delete a collection\n   * @param collection collection name\n   * @param async async id\n   * @param results results of the operation\n   */\n  public void simDeleteCollection(String collection, String async, NamedList results) throws Exception {\n    ensureNotClosed();\n    if (async != null) {\n      results.add(CoreAdminParams.REQUESTID, async);\n    }\n    lock.lockInterruptibly();\n    try {\n      collProperties.remove(collection);\n      sliceProperties.remove(collection);\n      leaderThrottles.remove(collection);\n\n      opDelay(collection, CollectionParams.CollectionAction.DELETE.name());\n\n      opDelays.remove(collection);\n      nodeReplicaMap.forEach((n, replicas) -> {\n        for (Iterator<ReplicaInfo> it = replicas.iterator(); it.hasNext(); ) {\n          ReplicaInfo ri = it.next();\n          if (ri.getCollection().equals(collection)) {\n            it.remove();\n            // update the number of cores in node values\n            Integer cores = (Integer) cloudManager.getSimNodeStateProvider().simGetNodeValue(n, \"cores\");\n            if (cores != null) { // node is still up\n              if (cores == 0) {\n                throw new RuntimeException(\"Unexpected value of 'cores' (\" + cores + \") on node: \" + n);\n              }\n              try {\n                cloudManager.getSimNodeStateProvider().simSetNodeValue(n, \"cores\", cores - 1);\n              } catch (InterruptedException e) {\n                Thread.currentThread().interrupt();\n                throw new RuntimeException(\"interrupted\");\n              }\n            }\n          }\n        }\n      });\n      collectionsStatesRef.set(null);\n      saveClusterState.set(true);\n      results.add(\"success\", \"\");\n    } catch (Exception e) {\n      log.warn(\"Exception\", e);\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8254aa20264eb7a88d556bbe0346667937ed9c2a","date":1538494545,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simDeleteCollection(String,String,NamedList).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simDeleteCollection(String,String,NamedList).mjava","sourceNew":"  /**\n   * Delete a collection\n   * @param collection collection name\n   * @param async async id\n   * @param results results of the operation\n   */\n  public void simDeleteCollection(String collection, String async, NamedList results) throws Exception {\n    ensureNotClosed();\n    if (async != null) {\n      results.add(CoreAdminParams.REQUESTID, async);\n    }\n    lock.lockInterruptibly();\n    try {\n      collProperties.remove(collection);\n      sliceProperties.remove(collection);\n      leaderThrottles.remove(collection);\n      colShardReplicaMap.remove(collection);\n\n      opDelay(collection, CollectionParams.CollectionAction.DELETE.name());\n\n      opDelays.remove(collection);\n      nodeReplicaMap.forEach((n, replicas) -> {\n        for (Iterator<ReplicaInfo> it = replicas.iterator(); it.hasNext(); ) {\n          ReplicaInfo ri = it.next();\n          if (ri.getCollection().equals(collection)) {\n            it.remove();\n            // update the number of cores in node values\n            Integer cores = (Integer) cloudManager.getSimNodeStateProvider().simGetNodeValue(n, \"cores\");\n            if (cores != null) { // node is still up\n              if (cores == 0) {\n                throw new RuntimeException(\"Unexpected value of 'cores' (\" + cores + \") on node: \" + n);\n              }\n              try {\n                cloudManager.getSimNodeStateProvider().simSetNodeValue(n, \"cores\", cores - 1);\n              } catch (InterruptedException e) {\n                Thread.currentThread().interrupt();\n                throw new RuntimeException(\"interrupted\");\n              }\n            }\n          }\n        }\n      });\n      collectionsStatesRef.set(null);\n      results.add(\"success\", \"\");\n    } catch (Exception e) {\n      log.warn(\"Exception\", e);\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","sourceOld":"  /**\n   * Delete a collection\n   * @param collection collection name\n   * @param async async id\n   * @param results results of the operation\n   */\n  public void simDeleteCollection(String collection, String async, NamedList results) throws Exception {\n    ensureNotClosed();\n    if (async != null) {\n      results.add(CoreAdminParams.REQUESTID, async);\n    }\n    lock.lockInterruptibly();\n    try {\n      collProperties.remove(collection);\n      sliceProperties.remove(collection);\n      leaderThrottles.remove(collection);\n      colShardReplicaMap.remove(collection);\n\n      opDelay(collection, CollectionParams.CollectionAction.DELETE.name());\n\n      opDelays.remove(collection);\n      nodeReplicaMap.forEach((n, replicas) -> {\n        for (Iterator<ReplicaInfo> it = replicas.iterator(); it.hasNext(); ) {\n          ReplicaInfo ri = it.next();\n          if (ri.getCollection().equals(collection)) {\n            it.remove();\n            // update the number of cores in node values\n            Integer cores = (Integer) cloudManager.getSimNodeStateProvider().simGetNodeValue(n, \"cores\");\n            if (cores != null) { // node is still up\n              if (cores == 0) {\n                throw new RuntimeException(\"Unexpected value of 'cores' (\" + cores + \") on node: \" + n);\n              }\n              try {\n                cloudManager.getSimNodeStateProvider().simSetNodeValue(n, \"cores\", cores - 1);\n              } catch (InterruptedException e) {\n                Thread.currentThread().interrupt();\n                throw new RuntimeException(\"interrupted\");\n              }\n            }\n          }\n        }\n      });\n      collectionsStatesRef.set(null);\n      saveClusterState.set(true);\n      results.add(\"success\", \"\");\n    } catch (Exception e) {\n      log.warn(\"Exception\", e);\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7cac1f2920f8057198f04505797cbabf74dd9a97","date":1546884894,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simDeleteCollection(String,String,NamedList).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simDeleteCollection(String,String,NamedList).mjava","sourceNew":"  /**\n   * Delete a collection\n   * @param collection collection name\n   * @param async async id\n   * @param results results of the operation\n   */\n  public void simDeleteCollection(String collection, String async, NamedList results) throws Exception {\n    ensureNotClosed();\n    if (async != null) {\n      results.add(CoreAdminParams.REQUESTID, async);\n    }\n    lock.lockInterruptibly();\n    try {\n      collProperties.remove(collection);\n      sliceProperties.remove(collection);\n      leaderThrottles.remove(collection);\n      colShardReplicaMap.remove(collection);\n      SplitShardCmd.unlockForSplit(cloudManager, collection, null);\n\n      opDelay(collection, CollectionParams.CollectionAction.DELETE.name());\n\n      opDelays.remove(collection);\n      nodeReplicaMap.forEach((n, replicas) -> {\n        for (Iterator<ReplicaInfo> it = replicas.iterator(); it.hasNext(); ) {\n          ReplicaInfo ri = it.next();\n          if (ri.getCollection().equals(collection)) {\n            it.remove();\n            // update the number of cores in node values\n            Integer cores = (Integer) cloudManager.getSimNodeStateProvider().simGetNodeValue(n, \"cores\");\n            if (cores != null) { // node is still up\n              if (cores == 0) {\n                throw new RuntimeException(\"Unexpected value of 'cores' (\" + cores + \") on node: \" + n);\n              }\n              try {\n                cloudManager.getSimNodeStateProvider().simSetNodeValue(n, \"cores\", cores - 1);\n              } catch (InterruptedException e) {\n                Thread.currentThread().interrupt();\n                throw new RuntimeException(\"interrupted\");\n              }\n            }\n          }\n        }\n      });\n      collectionsStatesRef.set(null);\n      results.add(\"success\", \"\");\n    } catch (Exception e) {\n      log.warn(\"Exception\", e);\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","sourceOld":"  /**\n   * Delete a collection\n   * @param collection collection name\n   * @param async async id\n   * @param results results of the operation\n   */\n  public void simDeleteCollection(String collection, String async, NamedList results) throws Exception {\n    ensureNotClosed();\n    if (async != null) {\n      results.add(CoreAdminParams.REQUESTID, async);\n    }\n    lock.lockInterruptibly();\n    try {\n      collProperties.remove(collection);\n      sliceProperties.remove(collection);\n      leaderThrottles.remove(collection);\n      colShardReplicaMap.remove(collection);\n\n      opDelay(collection, CollectionParams.CollectionAction.DELETE.name());\n\n      opDelays.remove(collection);\n      nodeReplicaMap.forEach((n, replicas) -> {\n        for (Iterator<ReplicaInfo> it = replicas.iterator(); it.hasNext(); ) {\n          ReplicaInfo ri = it.next();\n          if (ri.getCollection().equals(collection)) {\n            it.remove();\n            // update the number of cores in node values\n            Integer cores = (Integer) cloudManager.getSimNodeStateProvider().simGetNodeValue(n, \"cores\");\n            if (cores != null) { // node is still up\n              if (cores == 0) {\n                throw new RuntimeException(\"Unexpected value of 'cores' (\" + cores + \") on node: \" + n);\n              }\n              try {\n                cloudManager.getSimNodeStateProvider().simSetNodeValue(n, \"cores\", cores - 1);\n              } catch (InterruptedException e) {\n                Thread.currentThread().interrupt();\n                throw new RuntimeException(\"interrupted\");\n              }\n            }\n          }\n        }\n      });\n      collectionsStatesRef.set(null);\n      results.add(\"success\", \"\");\n    } catch (Exception e) {\n      log.warn(\"Exception\", e);\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"66b87d86427dfa19b2ef36b66de83aa9655cea33","date":1552627668,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simDeleteCollection(String,String,NamedList).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simDeleteCollection(String,String,NamedList).mjava","sourceNew":"  /**\n   * Delete a collection\n   * @param collection collection name\n   * @param async async id\n   * @param results results of the operation\n   */\n  public void simDeleteCollection(String collection, String async, NamedList results) throws Exception {\n    ensureNotClosed();\n    if (async != null) {\n      results.add(CoreAdminParams.REQUESTID, async);\n    }\n    \n    lock.lockInterruptibly();\n    try {\n      collProperties.remove(collection);\n      sliceProperties.remove(collection);\n      leaderThrottles.remove(collection);\n      colShardReplicaMap.remove(collection);\n      SplitShardCmd.unlockForSplit(cloudManager, collection, null);\n\n      opDelay(collection, CollectionParams.CollectionAction.DELETE.name());\n\n      opDelays.remove(collection);\n      nodeReplicaMap.forEach((n, replicas) -> {\n          synchronized (replicas) {  \n            for (Iterator<ReplicaInfo> it = replicas.iterator(); it.hasNext(); ) {\n              ReplicaInfo ri = it.next();\n              if (ri.getCollection().equals(collection)) {\n                it.remove();\n                // update the number of cores in node values\n                Integer cores = (Integer) cloudManager.getSimNodeStateProvider().simGetNodeValue(n, \"cores\");\n                if (cores != null) { // node is still up\n                  if (cores == 0) {\n                    throw new RuntimeException(\"Unexpected value of 'cores' (\" + cores + \") on node: \" + n);\n                  }\n                  try {\n                    cloudManager.getSimNodeStateProvider().simSetNodeValue(n, \"cores\", cores - 1);\n                  } catch (InterruptedException e) {\n                    Thread.currentThread().interrupt();\n                    throw new RuntimeException(\"interrupted\");\n                  }\n                }\n              }\n            }\n          }\n        });\n      collectionsStatesRef.set(null);\n      results.add(\"success\", \"\");\n    } catch (Exception e) {\n      log.warn(\"Exception\", e);\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","sourceOld":"  /**\n   * Delete a collection\n   * @param collection collection name\n   * @param async async id\n   * @param results results of the operation\n   */\n  public void simDeleteCollection(String collection, String async, NamedList results) throws Exception {\n    ensureNotClosed();\n    if (async != null) {\n      results.add(CoreAdminParams.REQUESTID, async);\n    }\n    lock.lockInterruptibly();\n    try {\n      collProperties.remove(collection);\n      sliceProperties.remove(collection);\n      leaderThrottles.remove(collection);\n      colShardReplicaMap.remove(collection);\n      SplitShardCmd.unlockForSplit(cloudManager, collection, null);\n\n      opDelay(collection, CollectionParams.CollectionAction.DELETE.name());\n\n      opDelays.remove(collection);\n      nodeReplicaMap.forEach((n, replicas) -> {\n        for (Iterator<ReplicaInfo> it = replicas.iterator(); it.hasNext(); ) {\n          ReplicaInfo ri = it.next();\n          if (ri.getCollection().equals(collection)) {\n            it.remove();\n            // update the number of cores in node values\n            Integer cores = (Integer) cloudManager.getSimNodeStateProvider().simGetNodeValue(n, \"cores\");\n            if (cores != null) { // node is still up\n              if (cores == 0) {\n                throw new RuntimeException(\"Unexpected value of 'cores' (\" + cores + \") on node: \" + n);\n              }\n              try {\n                cloudManager.getSimNodeStateProvider().simSetNodeValue(n, \"cores\", cores - 1);\n              } catch (InterruptedException e) {\n                Thread.currentThread().interrupt();\n                throw new RuntimeException(\"interrupted\");\n              }\n            }\n          }\n        }\n      });\n      collectionsStatesRef.set(null);\n      results.add(\"success\", \"\");\n    } catch (Exception e) {\n      log.warn(\"Exception\", e);\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5","date":1556572478,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simDeleteCollection(String,String,NamedList).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simDeleteCollection(String,String,NamedList).mjava","sourceNew":"  /**\n   * Delete a collection\n   * @param collection collection name\n   * @param async async id\n   * @param results results of the operation\n   */\n  public void simDeleteCollection(String collection, String async, NamedList results) throws Exception {\n    ensureNotClosed();\n    if (async != null) {\n      results.add(CoreAdminParams.REQUESTID, async);\n    }\n    \n    lock.lockInterruptibly();\n    try {\n      collProperties.remove(collection);\n      sliceProperties.remove(collection);\n      leaderThrottles.remove(collection);\n      colShardReplicaMap.remove(collection);\n      SplitShardCmd.unlockForSplit(cloudManager, collection, null);\n\n      opDelay(collection, CollectionParams.CollectionAction.DELETE.name());\n\n      opDelays.remove(collection);\n      nodeReplicaMap.forEach((n, replicas) -> {\n          synchronized (replicas) {  \n            for (Iterator<ReplicaInfo> it = replicas.iterator(); it.hasNext(); ) {\n              ReplicaInfo ri = it.next();\n              if (ri.getCollection().equals(collection)) {\n                it.remove();\n                // update the number of cores in node values\n                Integer cores = (Integer) cloudManager.getSimNodeStateProvider().simGetNodeValue(n, \"cores\");\n                if (cores != null) { // node is still up\n                  if (cores == 0) {\n                    throw new RuntimeException(\"Unexpected value of 'cores' (\" + cores + \") on node: \" + n);\n                  }\n                  try {\n                    cloudManager.getSimNodeStateProvider().simSetNodeValue(n, \"cores\", cores - 1);\n                  } catch (InterruptedException e) {\n                    Thread.currentThread().interrupt();\n                    throw new RuntimeException(\"interrupted\");\n                  }\n                }\n              }\n            }\n          }\n        });\n      collectionsStatesRef.set(null);\n      results.add(\"success\", \"\");\n    } catch (Exception e) {\n      log.warn(\"Exception\", e);\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","sourceOld":"  /**\n   * Delete a collection\n   * @param collection collection name\n   * @param async async id\n   * @param results results of the operation\n   */\n  public void simDeleteCollection(String collection, String async, NamedList results) throws Exception {\n    ensureNotClosed();\n    if (async != null) {\n      results.add(CoreAdminParams.REQUESTID, async);\n    }\n    \n    lock.lockInterruptibly();\n    try {\n      collProperties.remove(collection);\n      sliceProperties.remove(collection);\n      leaderThrottles.remove(collection);\n      colShardReplicaMap.remove(collection);\n      SplitShardCmd.unlockForSplit(cloudManager, collection, null);\n\n      opDelay(collection, CollectionParams.CollectionAction.DELETE.name());\n\n      opDelays.remove(collection);\n      nodeReplicaMap.forEach((n, replicas) -> {\n          synchronized (replicas) {  \n            for (Iterator<ReplicaInfo> it = replicas.iterator(); it.hasNext(); ) {\n              ReplicaInfo ri = it.next();\n              if (ri.getCollection().equals(collection)) {\n                it.remove();\n                // update the number of cores in node values\n                Integer cores = (Integer) cloudManager.getSimNodeStateProvider().simGetNodeValue(n, \"cores\");\n                if (cores != null) { // node is still up\n                  if (cores == 0) {\n                    throw new RuntimeException(\"Unexpected value of 'cores' (\" + cores + \") on node: \" + n);\n                  }\n                  try {\n                    cloudManager.getSimNodeStateProvider().simSetNodeValue(n, \"cores\", cores - 1);\n                  } catch (InterruptedException e) {\n                    Thread.currentThread().interrupt();\n                    throw new RuntimeException(\"interrupted\");\n                  }\n                }\n              }\n            }\n          }\n        });\n      collectionsStatesRef.set(null);\n      results.add(\"success\", \"\");\n    } catch (Exception e) {\n      log.warn(\"Exception\", e);\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fc18bc8ea2e2c1e308757ff50671c774438e9f3e":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"7cac1f2920f8057198f04505797cbabf74dd9a97":["8254aa20264eb7a88d556bbe0346667937ed9c2a"],"8254aa20264eb7a88d556bbe0346667937ed9c2a":["fc18bc8ea2e2c1e308757ff50671c774438e9f3e"],"43345f1452f9510f8aaadae6156fe0c834e7d957":["a4422b331d00607258b0ed3e43934306e67764aa","ce71a9836bf1eba34a0ab31884e9eb8ad3f1cef1"],"042b92cf48996255bedb0c3c4bf772d7e06e4dea":["ad60b6945c360ff89899d716d9cdec8dd674e2a0"],"ce71a9836bf1eba34a0ab31884e9eb8ad3f1cef1":["a4422b331d00607258b0ed3e43934306e67764aa"],"66b87d86427dfa19b2ef36b66de83aa9655cea33":["7cac1f2920f8057198f04505797cbabf74dd9a97"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b70042a8a492f7054d480ccdd2be9796510d4327":["43345f1452f9510f8aaadae6156fe0c834e7d957","ad60b6945c360ff89899d716d9cdec8dd674e2a0"],"a4422b331d00607258b0ed3e43934306e67764aa":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5":["66b87d86427dfa19b2ef36b66de83aa9655cea33"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ad60b6945c360ff89899d716d9cdec8dd674e2a0":["43345f1452f9510f8aaadae6156fe0c834e7d957"],"f592209545c71895260367152601e9200399776d":["43345f1452f9510f8aaadae6156fe0c834e7d957","ad60b6945c360ff89899d716d9cdec8dd674e2a0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["042b92cf48996255bedb0c3c4bf772d7e06e4dea"]},"commit2Childs":{"fc18bc8ea2e2c1e308757ff50671c774438e9f3e":["8254aa20264eb7a88d556bbe0346667937ed9c2a"],"7cac1f2920f8057198f04505797cbabf74dd9a97":["66b87d86427dfa19b2ef36b66de83aa9655cea33"],"8254aa20264eb7a88d556bbe0346667937ed9c2a":["7cac1f2920f8057198f04505797cbabf74dd9a97"],"43345f1452f9510f8aaadae6156fe0c834e7d957":["b70042a8a492f7054d480ccdd2be9796510d4327","ad60b6945c360ff89899d716d9cdec8dd674e2a0","f592209545c71895260367152601e9200399776d"],"042b92cf48996255bedb0c3c4bf772d7e06e4dea":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"ce71a9836bf1eba34a0ab31884e9eb8ad3f1cef1":["43345f1452f9510f8aaadae6156fe0c834e7d957"],"66b87d86427dfa19b2ef36b66de83aa9655cea33":["9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"b70042a8a492f7054d480ccdd2be9796510d4327":[],"a4422b331d00607258b0ed3e43934306e67764aa":["43345f1452f9510f8aaadae6156fe0c834e7d957","ce71a9836bf1eba34a0ab31884e9eb8ad3f1cef1"],"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["a4422b331d00607258b0ed3e43934306e67764aa"],"ad60b6945c360ff89899d716d9cdec8dd674e2a0":["042b92cf48996255bedb0c3c4bf772d7e06e4dea","b70042a8a492f7054d480ccdd2be9796510d4327","f592209545c71895260367152601e9200399776d"],"f592209545c71895260367152601e9200399776d":[],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["fc18bc8ea2e2c1e308757ff50671c774438e9f3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b70042a8a492f7054d480ccdd2be9796510d4327","f592209545c71895260367152601e9200399776d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}