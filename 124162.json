{"path":"lucene/src/java/org/apache/lucene/index/codecs/pulsing/PulsingCodec#fieldsConsumer(SegmentWriteState).mjava","commits":[{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/pulsing/PulsingCodec#fieldsConsumer(SegmentWriteState).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    // We wrap StandardPostingsWriterImpl, but any StandardPostingsWriter\n    // will work:\n    StandardPostingsWriter docsWriter = new StandardPostingsWriterImpl(state);\n\n    // Terms that have <= freqCutoff number of docs are\n    // \"pulsed\" (inlined):\n    final int freqCutoff = 1;\n    StandardPostingsWriter pulsingWriter = new PulsingPostingsWriterImpl(freqCutoff, docsWriter);\n\n    // Terms dict index\n    StandardTermsIndexWriter indexWriter;\n    boolean success = false;\n    try {\n      indexWriter = new SimpleStandardTermsIndexWriter(state);\n      success = true;\n    } finally {\n      if (!success) {\n        pulsingWriter.close();\n      }\n    }\n\n    // Terms dict\n    success = false;\n    try {\n      FieldsConsumer ret = new StandardTermsDictWriter(indexWriter, state, pulsingWriter, BytesRef.getUTF8SortedAsUTF16Comparator());\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          pulsingWriter.close();\n        } finally {\n          indexWriter.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"08932c793647a36953d1816b1060121f48820d3f","date":1277386540,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/pulsing/PulsingCodec#fieldsConsumer(SegmentWriteState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/pulsing/PulsingCodec#fieldsConsumer(SegmentWriteState).mjava","sourceNew":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    // We wrap StandardPostingsWriterImpl, but any StandardPostingsWriter\n    // will work:\n    StandardPostingsWriter docsWriter = new StandardPostingsWriterImpl(state);\n\n    // Terms that have <= freqCutoff number of docs are\n    // \"pulsed\" (inlined):\n    final int freqCutoff = 1;\n    StandardPostingsWriter pulsingWriter = new PulsingPostingsWriterImpl(freqCutoff, docsWriter);\n\n    // Terms dict index\n    StandardTermsIndexWriter indexWriter;\n    boolean success = false;\n    try {\n      indexWriter = new SimpleStandardTermsIndexWriter(state);\n      success = true;\n    } finally {\n      if (!success) {\n        pulsingWriter.close();\n      }\n    }\n\n    // Terms dict\n    success = false;\n    try {\n      FieldsConsumer ret = new StandardTermsDictWriter(indexWriter, state, pulsingWriter, BytesRef.getUTF8SortedAsUnicodeComparator());\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          pulsingWriter.close();\n        } finally {\n          indexWriter.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    // We wrap StandardPostingsWriterImpl, but any StandardPostingsWriter\n    // will work:\n    StandardPostingsWriter docsWriter = new StandardPostingsWriterImpl(state);\n\n    // Terms that have <= freqCutoff number of docs are\n    // \"pulsed\" (inlined):\n    final int freqCutoff = 1;\n    StandardPostingsWriter pulsingWriter = new PulsingPostingsWriterImpl(freqCutoff, docsWriter);\n\n    // Terms dict index\n    StandardTermsIndexWriter indexWriter;\n    boolean success = false;\n    try {\n      indexWriter = new SimpleStandardTermsIndexWriter(state);\n      success = true;\n    } finally {\n      if (!success) {\n        pulsingWriter.close();\n      }\n    }\n\n    // Terms dict\n    success = false;\n    try {\n      FieldsConsumer ret = new StandardTermsDictWriter(indexWriter, state, pulsingWriter, BytesRef.getUTF8SortedAsUTF16Comparator());\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          pulsingWriter.close();\n        } finally {\n          indexWriter.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/pulsing/PulsingCodec#fieldsConsumer(SegmentWriteState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/pulsing/PulsingCodec#fieldsConsumer(SegmentWriteState).mjava","sourceNew":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    // We wrap StandardPostingsWriterImpl, but any StandardPostingsWriter\n    // will work:\n    StandardPostingsWriter docsWriter = new StandardPostingsWriterImpl(state);\n\n    // Terms that have <= freqCutoff number of docs are\n    // \"pulsed\" (inlined):\n    final int freqCutoff = 1;\n    StandardPostingsWriter pulsingWriter = new PulsingPostingsWriterImpl(freqCutoff, docsWriter);\n\n    // Terms dict index\n    StandardTermsIndexWriter indexWriter;\n    boolean success = false;\n    try {\n      indexWriter = new SimpleStandardTermsIndexWriter(state);\n      success = true;\n    } finally {\n      if (!success) {\n        pulsingWriter.close();\n      }\n    }\n\n    // Terms dict\n    success = false;\n    try {\n      FieldsConsumer ret = new StandardTermsDictWriter(indexWriter, state, pulsingWriter, BytesRef.getUTF8SortedAsUnicodeComparator());\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          pulsingWriter.close();\n        } finally {\n          indexWriter.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    // We wrap StandardPostingsWriterImpl, but any StandardPostingsWriter\n    // will work:\n    StandardPostingsWriter docsWriter = new StandardPostingsWriterImpl(state);\n\n    // Terms that have <= freqCutoff number of docs are\n    // \"pulsed\" (inlined):\n    final int freqCutoff = 1;\n    StandardPostingsWriter pulsingWriter = new PulsingPostingsWriterImpl(freqCutoff, docsWriter);\n\n    // Terms dict index\n    StandardTermsIndexWriter indexWriter;\n    boolean success = false;\n    try {\n      indexWriter = new SimpleStandardTermsIndexWriter(state);\n      success = true;\n    } finally {\n      if (!success) {\n        pulsingWriter.close();\n      }\n    }\n\n    // Terms dict\n    success = false;\n    try {\n      FieldsConsumer ret = new StandardTermsDictWriter(indexWriter, state, pulsingWriter, BytesRef.getUTF8SortedAsUTF16Comparator());\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          pulsingWriter.close();\n        } finally {\n          indexWriter.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"03b152509ee3fa8cf52abb8a4a0cfe7287c59fc8","date":1281277545,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/pulsing/PulsingCodec#fieldsConsumer(SegmentWriteState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/pulsing/PulsingCodec#fieldsConsumer(SegmentWriteState).mjava","sourceNew":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    // We wrap StandardPostingsWriterImpl, but any StandardPostingsWriter\n    // will work:\n    StandardPostingsWriter docsWriter = new StandardPostingsWriterImpl(state);\n\n    // Terms that have <= freqCutoff number of docs are\n    // \"pulsed\" (inlined):\n    StandardPostingsWriter pulsingWriter = new PulsingPostingsWriterImpl(freqCutoff, docsWriter);\n\n    // Terms dict index\n    StandardTermsIndexWriter indexWriter;\n    boolean success = false;\n    try {\n      indexWriter = new SimpleStandardTermsIndexWriter(state);\n      success = true;\n    } finally {\n      if (!success) {\n        pulsingWriter.close();\n      }\n    }\n\n    // Terms dict\n    success = false;\n    try {\n      FieldsConsumer ret = new StandardTermsDictWriter(indexWriter, state, pulsingWriter, BytesRef.getUTF8SortedAsUnicodeComparator());\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          pulsingWriter.close();\n        } finally {\n          indexWriter.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    // We wrap StandardPostingsWriterImpl, but any StandardPostingsWriter\n    // will work:\n    StandardPostingsWriter docsWriter = new StandardPostingsWriterImpl(state);\n\n    // Terms that have <= freqCutoff number of docs are\n    // \"pulsed\" (inlined):\n    final int freqCutoff = 1;\n    StandardPostingsWriter pulsingWriter = new PulsingPostingsWriterImpl(freqCutoff, docsWriter);\n\n    // Terms dict index\n    StandardTermsIndexWriter indexWriter;\n    boolean success = false;\n    try {\n      indexWriter = new SimpleStandardTermsIndexWriter(state);\n      success = true;\n    } finally {\n      if (!success) {\n        pulsingWriter.close();\n      }\n    }\n\n    // Terms dict\n    success = false;\n    try {\n      FieldsConsumer ret = new StandardTermsDictWriter(indexWriter, state, pulsingWriter, BytesRef.getUTF8SortedAsUnicodeComparator());\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          pulsingWriter.close();\n        } finally {\n          indexWriter.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"99cf56f3a650b908f7017a72f9d23940418f8a52","date":1284891529,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/pulsing/PulsingCodec#fieldsConsumer(SegmentWriteState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/pulsing/PulsingCodec#fieldsConsumer(SegmentWriteState).mjava","sourceNew":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    // We wrap StandardPostingsWriter, but any StandardPostingsWriter\n    // will work:\n    PostingsWriterBase docsWriter = new StandardPostingsWriter(state);\n\n    // Terms that have <= freqCutoff number of docs are\n    // \"pulsed\" (inlined):\n    PostingsWriterBase pulsingWriter = new PulsingPostingsWriterImpl(freqCutoff, docsWriter);\n\n    // Terms dict index\n    TermsIndexWriterBase indexWriter;\n    boolean success = false;\n    try {\n      indexWriter = new FixedGapTermsIndexWriter(state);\n      success = true;\n    } finally {\n      if (!success) {\n        pulsingWriter.close();\n      }\n    }\n\n    // Terms dict\n    success = false;\n    try {\n      FieldsConsumer ret = new PrefixCodedTermsWriter(indexWriter, state, pulsingWriter, BytesRef.getUTF8SortedAsUnicodeComparator());\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          pulsingWriter.close();\n        } finally {\n          indexWriter.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    // We wrap StandardPostingsWriterImpl, but any StandardPostingsWriter\n    // will work:\n    StandardPostingsWriter docsWriter = new StandardPostingsWriterImpl(state);\n\n    // Terms that have <= freqCutoff number of docs are\n    // \"pulsed\" (inlined):\n    StandardPostingsWriter pulsingWriter = new PulsingPostingsWriterImpl(freqCutoff, docsWriter);\n\n    // Terms dict index\n    StandardTermsIndexWriter indexWriter;\n    boolean success = false;\n    try {\n      indexWriter = new SimpleStandardTermsIndexWriter(state);\n      success = true;\n    } finally {\n      if (!success) {\n        pulsingWriter.close();\n      }\n    }\n\n    // Terms dict\n    success = false;\n    try {\n      FieldsConsumer ret = new StandardTermsDictWriter(indexWriter, state, pulsingWriter, BytesRef.getUTF8SortedAsUnicodeComparator());\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          pulsingWriter.close();\n        } finally {\n          indexWriter.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/pulsing/PulsingCodec#fieldsConsumer(SegmentWriteState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/pulsing/PulsingCodec#fieldsConsumer(SegmentWriteState).mjava","sourceNew":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    // We wrap StandardPostingsWriter, but any StandardPostingsWriter\n    // will work:\n    PostingsWriterBase docsWriter = new StandardPostingsWriter(state);\n\n    // Terms that have <= freqCutoff number of docs are\n    // \"pulsed\" (inlined):\n    PostingsWriterBase pulsingWriter = new PulsingPostingsWriterImpl(freqCutoff, docsWriter);\n\n    // Terms dict index\n    TermsIndexWriterBase indexWriter;\n    boolean success = false;\n    try {\n      indexWriter = new FixedGapTermsIndexWriter(state);\n      success = true;\n    } finally {\n      if (!success) {\n        pulsingWriter.close();\n      }\n    }\n\n    // Terms dict\n    success = false;\n    try {\n      FieldsConsumer ret = new PrefixCodedTermsWriter(indexWriter, state, pulsingWriter, BytesRef.getUTF8SortedAsUnicodeComparator());\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          pulsingWriter.close();\n        } finally {\n          indexWriter.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    // We wrap StandardPostingsWriterImpl, but any StandardPostingsWriter\n    // will work:\n    StandardPostingsWriter docsWriter = new StandardPostingsWriterImpl(state);\n\n    // Terms that have <= freqCutoff number of docs are\n    // \"pulsed\" (inlined):\n    final int freqCutoff = 1;\n    StandardPostingsWriter pulsingWriter = new PulsingPostingsWriterImpl(freqCutoff, docsWriter);\n\n    // Terms dict index\n    StandardTermsIndexWriter indexWriter;\n    boolean success = false;\n    try {\n      indexWriter = new SimpleStandardTermsIndexWriter(state);\n      success = true;\n    } finally {\n      if (!success) {\n        pulsingWriter.close();\n      }\n    }\n\n    // Terms dict\n    success = false;\n    try {\n      FieldsConsumer ret = new StandardTermsDictWriter(indexWriter, state, pulsingWriter, BytesRef.getUTF8SortedAsUnicodeComparator());\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          pulsingWriter.close();\n        } finally {\n          indexWriter.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b1add9ddc0005b07550d4350720aac22dc9886b3","date":1295549635,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/pulsing/PulsingCodec#fieldsConsumer(SegmentWriteState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/pulsing/PulsingCodec#fieldsConsumer(SegmentWriteState).mjava","sourceNew":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    // We wrap StandardPostingsWriter, but any StandardPostingsWriter\n    // will work:\n    PostingsWriterBase docsWriter = new StandardPostingsWriter(state);\n\n    // Terms that have <= freqCutoff number of docs are\n    // \"pulsed\" (inlined):\n    PostingsWriterBase pulsingWriter = new PulsingPostingsWriterImpl(freqCutoff, docsWriter);\n\n    // Terms dict index\n    TermsIndexWriterBase indexWriter;\n    boolean success = false;\n    try {\n      indexWriter = new FixedGapTermsIndexWriter(state);\n      success = true;\n    } finally {\n      if (!success) {\n        pulsingWriter.close();\n      }\n    }\n\n    // Terms dict\n    success = false;\n    try {\n      FieldsConsumer ret = new BlockTermsWriter(indexWriter, state, pulsingWriter, BytesRef.getUTF8SortedAsUnicodeComparator());\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          pulsingWriter.close();\n        } finally {\n          indexWriter.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    // We wrap StandardPostingsWriter, but any StandardPostingsWriter\n    // will work:\n    PostingsWriterBase docsWriter = new StandardPostingsWriter(state);\n\n    // Terms that have <= freqCutoff number of docs are\n    // \"pulsed\" (inlined):\n    PostingsWriterBase pulsingWriter = new PulsingPostingsWriterImpl(freqCutoff, docsWriter);\n\n    // Terms dict index\n    TermsIndexWriterBase indexWriter;\n    boolean success = false;\n    try {\n      indexWriter = new FixedGapTermsIndexWriter(state);\n      success = true;\n    } finally {\n      if (!success) {\n        pulsingWriter.close();\n      }\n    }\n\n    // Terms dict\n    success = false;\n    try {\n      FieldsConsumer ret = new PrefixCodedTermsWriter(indexWriter, state, pulsingWriter, BytesRef.getUTF8SortedAsUnicodeComparator());\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          pulsingWriter.close();\n        } finally {\n          indexWriter.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e79a6d080bdd5b2a8f56342cf571b5476de04180","date":1295638686,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/pulsing/PulsingCodec#fieldsConsumer(SegmentWriteState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/pulsing/PulsingCodec#fieldsConsumer(SegmentWriteState).mjava","sourceNew":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    // We wrap StandardPostingsWriter, but any StandardPostingsWriter\n    // will work:\n    PostingsWriterBase docsWriter = new StandardPostingsWriter(state);\n\n    // Terms that have <= freqCutoff number of docs are\n    // \"pulsed\" (inlined):\n    PostingsWriterBase pulsingWriter = new PulsingPostingsWriterImpl(freqCutoff, docsWriter);\n\n    // Terms dict index\n    TermsIndexWriterBase indexWriter;\n    boolean success = false;\n    try {\n      indexWriter = new FixedGapTermsIndexWriter(state);\n      success = true;\n    } finally {\n      if (!success) {\n        pulsingWriter.close();\n      }\n    }\n\n    // Terms dict\n    success = false;\n    try {\n      FieldsConsumer ret = new BlockTermsWriter(indexWriter, state, pulsingWriter, BytesRef.getUTF8SortedAsUnicodeComparator());\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          pulsingWriter.close();\n        } finally {\n          indexWriter.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    // We wrap StandardPostingsWriter, but any StandardPostingsWriter\n    // will work:\n    PostingsWriterBase docsWriter = new StandardPostingsWriter(state);\n\n    // Terms that have <= freqCutoff number of docs are\n    // \"pulsed\" (inlined):\n    PostingsWriterBase pulsingWriter = new PulsingPostingsWriterImpl(freqCutoff, docsWriter);\n\n    // Terms dict index\n    TermsIndexWriterBase indexWriter;\n    boolean success = false;\n    try {\n      indexWriter = new FixedGapTermsIndexWriter(state);\n      success = true;\n    } finally {\n      if (!success) {\n        pulsingWriter.close();\n      }\n    }\n\n    // Terms dict\n    success = false;\n    try {\n      FieldsConsumer ret = new PrefixCodedTermsWriter(indexWriter, state, pulsingWriter, BytesRef.getUTF8SortedAsUnicodeComparator());\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          pulsingWriter.close();\n        } finally {\n          indexWriter.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/pulsing/PulsingCodec#fieldsConsumer(SegmentWriteState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/pulsing/PulsingCodec#fieldsConsumer(SegmentWriteState).mjava","sourceNew":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    // We wrap StandardPostingsWriter, but any StandardPostingsWriter\n    // will work:\n    PostingsWriterBase docsWriter = new StandardPostingsWriter(state);\n\n    // Terms that have <= freqCutoff number of docs are\n    // \"pulsed\" (inlined):\n    PostingsWriterBase pulsingWriter = new PulsingPostingsWriterImpl(freqCutoff, docsWriter);\n\n    // Terms dict index\n    TermsIndexWriterBase indexWriter;\n    boolean success = false;\n    try {\n      indexWriter = new FixedGapTermsIndexWriter(state);\n      success = true;\n    } finally {\n      if (!success) {\n        pulsingWriter.close();\n      }\n    }\n\n    // Terms dict\n    success = false;\n    try {\n      FieldsConsumer ret = new BlockTermsWriter(indexWriter, state, pulsingWriter, BytesRef.getUTF8SortedAsUnicodeComparator());\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          pulsingWriter.close();\n        } finally {\n          indexWriter.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    // We wrap StandardPostingsWriter, but any StandardPostingsWriter\n    // will work:\n    PostingsWriterBase docsWriter = new StandardPostingsWriter(state);\n\n    // Terms that have <= freqCutoff number of docs are\n    // \"pulsed\" (inlined):\n    PostingsWriterBase pulsingWriter = new PulsingPostingsWriterImpl(freqCutoff, docsWriter);\n\n    // Terms dict index\n    TermsIndexWriterBase indexWriter;\n    boolean success = false;\n    try {\n      indexWriter = new FixedGapTermsIndexWriter(state);\n      success = true;\n    } finally {\n      if (!success) {\n        pulsingWriter.close();\n      }\n    }\n\n    // Terms dict\n    success = false;\n    try {\n      FieldsConsumer ret = new PrefixCodedTermsWriter(indexWriter, state, pulsingWriter, BytesRef.getUTF8SortedAsUnicodeComparator());\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          pulsingWriter.close();\n        } finally {\n          indexWriter.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4fd64b6aa64934b0e35d9ec3e6c5a5c60ffc1762","date":1297938719,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/pulsing/PulsingCodec#fieldsConsumer(SegmentWriteState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/pulsing/PulsingCodec#fieldsConsumer(SegmentWriteState).mjava","sourceNew":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    // We wrap StandardPostingsWriter, but any StandardPostingsWriter\n    // will work:\n    PostingsWriterBase docsWriter = new StandardPostingsWriter(state);\n\n    // Terms that have <= freqCutoff number of docs are\n    // \"pulsed\" (inlined):\n    PostingsWriterBase pulsingWriter = new PulsingPostingsWriterImpl(freqCutoff, docsWriter);\n\n    // Terms dict index\n    TermsIndexWriterBase indexWriter;\n    boolean success = false;\n    try {\n      indexWriter = new FixedGapTermsIndexWriter(state);\n      success = true;\n    } finally {\n      if (!success) {\n        pulsingWriter.close();\n      }\n    }\n\n    // Terms dict\n    success = false;\n    try {\n      FieldsConsumer ret = new BlockTermsWriter(indexWriter, state, pulsingWriter);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          pulsingWriter.close();\n        } finally {\n          indexWriter.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    // We wrap StandardPostingsWriter, but any StandardPostingsWriter\n    // will work:\n    PostingsWriterBase docsWriter = new StandardPostingsWriter(state);\n\n    // Terms that have <= freqCutoff number of docs are\n    // \"pulsed\" (inlined):\n    PostingsWriterBase pulsingWriter = new PulsingPostingsWriterImpl(freqCutoff, docsWriter);\n\n    // Terms dict index\n    TermsIndexWriterBase indexWriter;\n    boolean success = false;\n    try {\n      indexWriter = new FixedGapTermsIndexWriter(state);\n      success = true;\n    } finally {\n      if (!success) {\n        pulsingWriter.close();\n      }\n    }\n\n    // Terms dict\n    success = false;\n    try {\n      FieldsConsumer ret = new BlockTermsWriter(indexWriter, state, pulsingWriter, BytesRef.getUTF8SortedAsUnicodeComparator());\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          pulsingWriter.close();\n        } finally {\n          indexWriter.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f1bdbf92da222965b46c0a942c3857ba56e5c638","date":1298297608,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/pulsing/PulsingCodec#fieldsConsumer(SegmentWriteState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/pulsing/PulsingCodec#fieldsConsumer(SegmentWriteState).mjava","sourceNew":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    // We wrap StandardPostingsWriter, but any StandardPostingsWriter\n    // will work:\n    PostingsWriterBase docsWriter = new StandardPostingsWriter(state);\n\n    // Terms that have <= freqCutoff number of docs are\n    // \"pulsed\" (inlined):\n    PostingsWriterBase pulsingWriter = new PulsingPostingsWriterImpl(freqCutoff, docsWriter);\n\n    // Terms dict index\n    TermsIndexWriterBase indexWriter;\n    boolean success = false;\n    try {\n      indexWriter = new FixedGapTermsIndexWriter(state);\n      success = true;\n    } finally {\n      if (!success) {\n        pulsingWriter.close();\n      }\n    }\n\n    // Terms dict\n    success = false;\n    try {\n      FieldsConsumer ret = new BlockTermsWriter(indexWriter, state, pulsingWriter);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          pulsingWriter.close();\n        } finally {\n          indexWriter.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    // We wrap StandardPostingsWriter, but any StandardPostingsWriter\n    // will work:\n    PostingsWriterBase docsWriter = new StandardPostingsWriter(state);\n\n    // Terms that have <= freqCutoff number of docs are\n    // \"pulsed\" (inlined):\n    PostingsWriterBase pulsingWriter = new PulsingPostingsWriterImpl(freqCutoff, docsWriter);\n\n    // Terms dict index\n    TermsIndexWriterBase indexWriter;\n    boolean success = false;\n    try {\n      indexWriter = new FixedGapTermsIndexWriter(state);\n      success = true;\n    } finally {\n      if (!success) {\n        pulsingWriter.close();\n      }\n    }\n\n    // Terms dict\n    success = false;\n    try {\n      FieldsConsumer ret = new BlockTermsWriter(indexWriter, state, pulsingWriter, BytesRef.getUTF8SortedAsUnicodeComparator());\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          pulsingWriter.close();\n        } finally {\n          indexWriter.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/pulsing/PulsingCodec#fieldsConsumer(SegmentWriteState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/pulsing/PulsingCodec#fieldsConsumer(SegmentWriteState).mjava","sourceNew":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    // We wrap StandardPostingsWriter, but any StandardPostingsWriter\n    // will work:\n    PostingsWriterBase docsWriter = new StandardPostingsWriter(state);\n\n    // Terms that have <= freqCutoff number of docs are\n    // \"pulsed\" (inlined):\n    PostingsWriterBase pulsingWriter = new PulsingPostingsWriterImpl(freqCutoff, docsWriter);\n\n    // Terms dict index\n    TermsIndexWriterBase indexWriter;\n    boolean success = false;\n    try {\n      indexWriter = new FixedGapTermsIndexWriter(state);\n      success = true;\n    } finally {\n      if (!success) {\n        pulsingWriter.close();\n      }\n    }\n\n    // Terms dict\n    success = false;\n    try {\n      FieldsConsumer ret = new BlockTermsWriter(indexWriter, state, pulsingWriter);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          pulsingWriter.close();\n        } finally {\n          indexWriter.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    // We wrap StandardPostingsWriter, but any StandardPostingsWriter\n    // will work:\n    PostingsWriterBase docsWriter = new StandardPostingsWriter(state);\n\n    // Terms that have <= freqCutoff number of docs are\n    // \"pulsed\" (inlined):\n    PostingsWriterBase pulsingWriter = new PulsingPostingsWriterImpl(freqCutoff, docsWriter);\n\n    // Terms dict index\n    TermsIndexWriterBase indexWriter;\n    boolean success = false;\n    try {\n      indexWriter = new FixedGapTermsIndexWriter(state);\n      success = true;\n    } finally {\n      if (!success) {\n        pulsingWriter.close();\n      }\n    }\n\n    // Terms dict\n    success = false;\n    try {\n      FieldsConsumer ret = new BlockTermsWriter(indexWriter, state, pulsingWriter, BytesRef.getUTF8SortedAsUnicodeComparator());\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          pulsingWriter.close();\n        } finally {\n          indexWriter.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9c18f18acd178df9b067d805c52fe16882828aa0","date":1298739952,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/pulsing/PulsingCodec#fieldsConsumer(SegmentWriteState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/pulsing/PulsingCodec#fieldsConsumer(SegmentWriteState).mjava","sourceNew":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    // We wrap StandardPostingsWriter, but any StandardPostingsWriter\n    // will work:\n    PostingsWriterBase docsWriter = new StandardPostingsWriter(state);\n\n    // Terms that have <= freqCutoff number of docs are\n    // \"pulsed\" (inlined):\n    PostingsWriterBase pulsingWriter = new PulsingPostingsWriterImpl(freqCutoff, docsWriter);\n\n    // Terms dict index\n    TermsIndexWriterBase indexWriter;\n    boolean success = false;\n    try {\n      indexWriter = new VariableGapTermsIndexWriter(state, new VariableGapTermsIndexWriter.EveryNTermSelector(state.termIndexInterval));\n      success = true;\n    } finally {\n      if (!success) {\n        pulsingWriter.close();\n      }\n    }\n\n    // Terms dict\n    success = false;\n    try {\n      FieldsConsumer ret = new BlockTermsWriter(indexWriter, state, pulsingWriter);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          pulsingWriter.close();\n        } finally {\n          indexWriter.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    // We wrap StandardPostingsWriter, but any StandardPostingsWriter\n    // will work:\n    PostingsWriterBase docsWriter = new StandardPostingsWriter(state);\n\n    // Terms that have <= freqCutoff number of docs are\n    // \"pulsed\" (inlined):\n    PostingsWriterBase pulsingWriter = new PulsingPostingsWriterImpl(freqCutoff, docsWriter);\n\n    // Terms dict index\n    TermsIndexWriterBase indexWriter;\n    boolean success = false;\n    try {\n      indexWriter = new FixedGapTermsIndexWriter(state);\n      success = true;\n    } finally {\n      if (!success) {\n        pulsingWriter.close();\n      }\n    }\n\n    // Terms dict\n    success = false;\n    try {\n      FieldsConsumer ret = new BlockTermsWriter(indexWriter, state, pulsingWriter);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          pulsingWriter.close();\n        } finally {\n          indexWriter.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/pulsing/PulsingCodec#fieldsConsumer(SegmentWriteState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/pulsing/PulsingCodec#fieldsConsumer(SegmentWriteState).mjava","sourceNew":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    // We wrap StandardPostingsWriter, but any StandardPostingsWriter\n    // will work:\n    PostingsWriterBase docsWriter = new StandardPostingsWriter(state);\n\n    // Terms that have <= freqCutoff number of docs are\n    // \"pulsed\" (inlined):\n    PostingsWriterBase pulsingWriter = new PulsingPostingsWriterImpl(freqCutoff, docsWriter);\n\n    // Terms dict index\n    TermsIndexWriterBase indexWriter;\n    boolean success = false;\n    try {\n      indexWriter = new VariableGapTermsIndexWriter(state, new VariableGapTermsIndexWriter.EveryNTermSelector(state.termIndexInterval));\n      success = true;\n    } finally {\n      if (!success) {\n        pulsingWriter.close();\n      }\n    }\n\n    // Terms dict\n    success = false;\n    try {\n      FieldsConsumer ret = new BlockTermsWriter(indexWriter, state, pulsingWriter);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          pulsingWriter.close();\n        } finally {\n          indexWriter.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    // We wrap StandardPostingsWriter, but any StandardPostingsWriter\n    // will work:\n    PostingsWriterBase docsWriter = new StandardPostingsWriter(state);\n\n    // Terms that have <= freqCutoff number of docs are\n    // \"pulsed\" (inlined):\n    PostingsWriterBase pulsingWriter = new PulsingPostingsWriterImpl(freqCutoff, docsWriter);\n\n    // Terms dict index\n    TermsIndexWriterBase indexWriter;\n    boolean success = false;\n    try {\n      indexWriter = new FixedGapTermsIndexWriter(state);\n      success = true;\n    } finally {\n      if (!success) {\n        pulsingWriter.close();\n      }\n    }\n\n    // Terms dict\n    success = false;\n    try {\n      FieldsConsumer ret = new BlockTermsWriter(indexWriter, state, pulsingWriter);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          pulsingWriter.close();\n        } finally {\n          indexWriter.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0ef0193974807e4bddf5432a6b0287fe4d6c9df","date":1301476645,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/pulsing/PulsingCodec#fieldsConsumer(SegmentWriteState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/pulsing/PulsingCodec#fieldsConsumer(SegmentWriteState).mjava","sourceNew":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    // We wrap StandardPostingsWriter, but any StandardPostingsWriter\n    // will work:\n    PostingsWriterBase docsWriter = new StandardPostingsWriter(state);\n\n    // Terms that have <= freqCutoff number of docs are\n    // \"pulsed\" (inlined):\n    PostingsWriterBase pulsingWriter = new PulsingPostingsWriterImpl(freqCutoff, docsWriter);\n\n    // Terms dict index\n    TermsIndexWriterBase indexWriter;\n    boolean success = false;\n    try {\n      indexWriter = new VariableGapTermsIndexWriter(state, new VariableGapTermsIndexWriter.EveryNTermSelector(state.termIndexInterval));\n      success = true;\n    } finally {\n      if (!success) {\n        pulsingWriter.close();\n      }\n    }\n\n    // Terms dict\n    success = false;\n    try {\n      FieldsConsumer ret = new BlockTermsWriter(indexWriter, state, pulsingWriter);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          pulsingWriter.close();\n        } finally {\n          indexWriter.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    // We wrap StandardPostingsWriter, but any StandardPostingsWriter\n    // will work:\n    PostingsWriterBase docsWriter = new StandardPostingsWriter(state);\n\n    // Terms that have <= freqCutoff number of docs are\n    // \"pulsed\" (inlined):\n    PostingsWriterBase pulsingWriter = new PulsingPostingsWriterImpl(freqCutoff, docsWriter);\n\n    // Terms dict index\n    TermsIndexWriterBase indexWriter;\n    boolean success = false;\n    try {\n      indexWriter = new FixedGapTermsIndexWriter(state);\n      success = true;\n    } finally {\n      if (!success) {\n        pulsingWriter.close();\n      }\n    }\n\n    // Terms dict\n    success = false;\n    try {\n      FieldsConsumer ret = new BlockTermsWriter(indexWriter, state, pulsingWriter);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          pulsingWriter.close();\n        } finally {\n          indexWriter.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"efb7a19703a037c29e30440260d393500febc1f4","date":1306648116,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/pulsing/PulsingCodec#fieldsConsumer(SegmentWriteState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/pulsing/PulsingCodec#fieldsConsumer(SegmentWriteState).mjava","sourceNew":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    // We wrap StandardPostingsWriter, but any StandardPostingsWriter\n    // will work:\n    PostingsWriterBase docsWriter = new StandardPostingsWriter(state);\n\n    // Terms that have <= freqCutoff number of docs are\n    // \"pulsed\" (inlined):\n    PostingsWriterBase pulsingWriter = new PulsingPostingsWriterImpl(freqCutoff, docsWriter);\n\n    // Terms dict index\n    TermsIndexWriterBase indexWriter;\n    boolean success = false;\n    try {\n      indexWriter = new VariableGapTermsIndexWriter(state, new VariableGapTermsIndexWriter.EveryNTermSelector(state.termIndexInterval));\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeSafely(true, pulsingWriter);\n      }\n    }\n\n    // Terms dict\n    success = false;\n    try {\n      FieldsConsumer ret = new BlockTermsWriter(indexWriter, state, pulsingWriter);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        IOUtils.closeSafely(true, pulsingWriter, indexWriter);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    // We wrap StandardPostingsWriter, but any StandardPostingsWriter\n    // will work:\n    PostingsWriterBase docsWriter = new StandardPostingsWriter(state);\n\n    // Terms that have <= freqCutoff number of docs are\n    // \"pulsed\" (inlined):\n    PostingsWriterBase pulsingWriter = new PulsingPostingsWriterImpl(freqCutoff, docsWriter);\n\n    // Terms dict index\n    TermsIndexWriterBase indexWriter;\n    boolean success = false;\n    try {\n      indexWriter = new VariableGapTermsIndexWriter(state, new VariableGapTermsIndexWriter.EveryNTermSelector(state.termIndexInterval));\n      success = true;\n    } finally {\n      if (!success) {\n        pulsingWriter.close();\n      }\n    }\n\n    // Terms dict\n    success = false;\n    try {\n      FieldsConsumer ret = new BlockTermsWriter(indexWriter, state, pulsingWriter);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          pulsingWriter.close();\n        } finally {\n          indexWriter.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/pulsing/PulsingCodec#fieldsConsumer(SegmentWriteState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/pulsing/PulsingCodec#fieldsConsumer(SegmentWriteState).mjava","sourceNew":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    // We wrap StandardPostingsWriter, but any StandardPostingsWriter\n    // will work:\n    PostingsWriterBase docsWriter = new StandardPostingsWriter(state);\n\n    // Terms that have <= freqCutoff number of docs are\n    // \"pulsed\" (inlined):\n    PostingsWriterBase pulsingWriter = new PulsingPostingsWriterImpl(freqCutoff, docsWriter);\n\n    // Terms dict index\n    TermsIndexWriterBase indexWriter;\n    boolean success = false;\n    try {\n      indexWriter = new VariableGapTermsIndexWriter(state, new VariableGapTermsIndexWriter.EveryNTermSelector(state.termIndexInterval));\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeSafely(true, pulsingWriter);\n      }\n    }\n\n    // Terms dict\n    success = false;\n    try {\n      FieldsConsumer ret = new BlockTermsWriter(indexWriter, state, pulsingWriter);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        IOUtils.closeSafely(true, pulsingWriter, indexWriter);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    // We wrap StandardPostingsWriter, but any StandardPostingsWriter\n    // will work:\n    PostingsWriterBase docsWriter = new StandardPostingsWriter(state);\n\n    // Terms that have <= freqCutoff number of docs are\n    // \"pulsed\" (inlined):\n    PostingsWriterBase pulsingWriter = new PulsingPostingsWriterImpl(freqCutoff, docsWriter);\n\n    // Terms dict index\n    TermsIndexWriterBase indexWriter;\n    boolean success = false;\n    try {\n      indexWriter = new VariableGapTermsIndexWriter(state, new VariableGapTermsIndexWriter.EveryNTermSelector(state.termIndexInterval));\n      success = true;\n    } finally {\n      if (!success) {\n        pulsingWriter.close();\n      }\n    }\n\n    // Terms dict\n    success = false;\n    try {\n      FieldsConsumer ret = new BlockTermsWriter(indexWriter, state, pulsingWriter);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          pulsingWriter.close();\n        } finally {\n          indexWriter.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e10cb22a8bdb44339e282925a29182bb2f3174d","date":1306841137,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/pulsing/PulsingCodec#fieldsConsumer(SegmentWriteState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/pulsing/PulsingCodec#fieldsConsumer(SegmentWriteState).mjava","sourceNew":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    // We wrap StandardPostingsWriter, but any StandardPostingsWriter\n    // will work:\n    PostingsWriterBase docsWriter = new StandardPostingsWriter(state);\n\n    // Terms that have <= freqCutoff number of docs are\n    // \"pulsed\" (inlined):\n    PostingsWriterBase pulsingWriter = new PulsingPostingsWriterImpl(freqCutoff, docsWriter);\n\n    // Terms dict index\n    TermsIndexWriterBase indexWriter;\n    boolean success = false;\n    try {\n      indexWriter = new VariableGapTermsIndexWriter(state, new VariableGapTermsIndexWriter.EveryNTermSelector(state.termIndexInterval));\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeSafely(true, pulsingWriter);\n      }\n    }\n\n    // Terms dict\n    success = false;\n    try {\n      FieldsConsumer ret = new BlockTermsWriter(indexWriter, state, pulsingWriter);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        IOUtils.closeSafely(true, pulsingWriter, indexWriter);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    // We wrap StandardPostingsWriter, but any StandardPostingsWriter\n    // will work:\n    PostingsWriterBase docsWriter = new StandardPostingsWriter(state);\n\n    // Terms that have <= freqCutoff number of docs are\n    // \"pulsed\" (inlined):\n    PostingsWriterBase pulsingWriter = new PulsingPostingsWriterImpl(freqCutoff, docsWriter);\n\n    // Terms dict index\n    TermsIndexWriterBase indexWriter;\n    boolean success = false;\n    try {\n      indexWriter = new VariableGapTermsIndexWriter(state, new VariableGapTermsIndexWriter.EveryNTermSelector(state.termIndexInterval));\n      success = true;\n    } finally {\n      if (!success) {\n        pulsingWriter.close();\n      }\n    }\n\n    // Terms dict\n    success = false;\n    try {\n      FieldsConsumer ret = new BlockTermsWriter(indexWriter, state, pulsingWriter);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          pulsingWriter.close();\n        } finally {\n          indexWriter.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"60ba444201d2570214b6fcf1d15600dc1a01f548","date":1313868045,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/pulsing/PulsingCodec#fieldsConsumer(SegmentWriteState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/pulsing/PulsingCodec#fieldsConsumer(SegmentWriteState).mjava","sourceNew":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    // We wrap StandardPostingsWriter, but any PostingsWriterBase\n    // will work:\n\n    PostingsWriterBase docsWriter = new StandardPostingsWriter(state);\n\n    // Terms that have <= freqCutoff number of docs are\n    // \"pulsed\" (inlined):\n    PostingsWriterBase pulsingWriter = new PulsingPostingsWriter(freqCutoff, docsWriter);\n\n    // Terms dict\n    boolean success = false;\n    try {\n      FieldsConsumer ret = new BlockTreeTermsWriter(state, pulsingWriter, minBlockSize, maxBlockSize);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        pulsingWriter.close();\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    // We wrap StandardPostingsWriter, but any StandardPostingsWriter\n    // will work:\n    PostingsWriterBase docsWriter = new StandardPostingsWriter(state);\n\n    // Terms that have <= freqCutoff number of docs are\n    // \"pulsed\" (inlined):\n    PostingsWriterBase pulsingWriter = new PulsingPostingsWriterImpl(freqCutoff, docsWriter);\n\n    // Terms dict index\n    TermsIndexWriterBase indexWriter;\n    boolean success = false;\n    try {\n      indexWriter = new VariableGapTermsIndexWriter(state, new VariableGapTermsIndexWriter.EveryNTermSelector(state.termIndexInterval));\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeSafely(true, pulsingWriter);\n      }\n    }\n\n    // Terms dict\n    success = false;\n    try {\n      FieldsConsumer ret = new BlockTermsWriter(indexWriter, state, pulsingWriter);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        IOUtils.closeSafely(true, pulsingWriter, indexWriter);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/pulsing/PulsingPostingsFormat#fieldsConsumer(SegmentWriteState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/pulsing/PulsingCodec#fieldsConsumer(SegmentWriteState).mjava","sourceNew":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    PostingsWriterBase docsWriter = wrappedPostingsBaseFormat.postingsWriterBase(state);\n\n    // Terms that have <= freqCutoff number of docs are\n    // \"pulsed\" (inlined):\n    PostingsWriterBase pulsingWriter = new PulsingPostingsWriter(freqCutoff, docsWriter);\n\n    // Terms dict\n    boolean success = false;\n    try {\n      FieldsConsumer ret = new BlockTreeTermsWriter(state, pulsingWriter, minBlockSize, maxBlockSize);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        pulsingWriter.close();\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    // We wrap StandardPostingsWriter, but any PostingsWriterBase\n    // will work:\n\n    PostingsWriterBase docsWriter = new StandardPostingsWriter(state);\n\n    // Terms that have <= freqCutoff number of docs are\n    // \"pulsed\" (inlined):\n    PostingsWriterBase pulsingWriter = new PulsingPostingsWriter(freqCutoff, docsWriter);\n\n    // Terms dict\n    boolean success = false;\n    try {\n      FieldsConsumer ret = new BlockTreeTermsWriter(state, pulsingWriter, minBlockSize, maxBlockSize);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        pulsingWriter.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["dd5dd283c3d9f22e186699bf823c9d1e67f49152"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"03b152509ee3fa8cf52abb8a4a0cfe7287c59fc8":["08932c793647a36953d1816b1060121f48820d3f"],"f1bdbf92da222965b46c0a942c3857ba56e5c638":["29ef99d61cda9641b6250bf9567329a6e65f901d","4fd64b6aa64934b0e35d9ec3e6c5a5c60ffc1762"],"efb7a19703a037c29e30440260d393500febc1f4":["9c18f18acd178df9b067d805c52fe16882828aa0"],"4fd64b6aa64934b0e35d9ec3e6c5a5c60ffc1762":["b1add9ddc0005b07550d4350720aac22dc9886b3"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5f4e87790277826a2aea119328600dfb07761f32":["955c32f886db6f6356c9fcdea6b1f1cb4effda24","08932c793647a36953d1816b1060121f48820d3f"],"b1add9ddc0005b07550d4350720aac22dc9886b3":["99cf56f3a650b908f7017a72f9d23940418f8a52"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["5f4e87790277826a2aea119328600dfb07761f32","99cf56f3a650b908f7017a72f9d23940418f8a52"],"e79a6d080bdd5b2a8f56342cf571b5476de04180":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","b1add9ddc0005b07550d4350720aac22dc9886b3"],"60ba444201d2570214b6fcf1d15600dc1a01f548":["efb7a19703a037c29e30440260d393500febc1f4"],"7b91922b55d15444d554721b352861d028eb8278":["60ba444201d2570214b6fcf1d15600dc1a01f548"],"08932c793647a36953d1816b1060121f48820d3f":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["bde51b089eb7f86171eb3406e38a274743f9b7ac","9c18f18acd178df9b067d805c52fe16882828aa0"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["f1bdbf92da222965b46c0a942c3857ba56e5c638","9c18f18acd178df9b067d805c52fe16882828aa0"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["9c18f18acd178df9b067d805c52fe16882828aa0","efb7a19703a037c29e30440260d393500febc1f4"],"9c18f18acd178df9b067d805c52fe16882828aa0":["4fd64b6aa64934b0e35d9ec3e6c5a5c60ffc1762"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["99cf56f3a650b908f7017a72f9d23940418f8a52","b1add9ddc0005b07550d4350720aac22dc9886b3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"99cf56f3a650b908f7017a72f9d23940418f8a52":["03b152509ee3fa8cf52abb8a4a0cfe7287c59fc8"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["e79a6d080bdd5b2a8f56342cf571b5476de04180","4fd64b6aa64934b0e35d9ec3e6c5a5c60ffc1762"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7b91922b55d15444d554721b352861d028eb8278"],"2e10cb22a8bdb44339e282925a29182bb2f3174d":["d619839baa8ce5503e496b94a9e42ad6f079293f","efb7a19703a037c29e30440260d393500febc1f4"]},"commit2Childs":{"03b152509ee3fa8cf52abb8a4a0cfe7287c59fc8":["99cf56f3a650b908f7017a72f9d23940418f8a52"],"f1bdbf92da222965b46c0a942c3857ba56e5c638":["d619839baa8ce5503e496b94a9e42ad6f079293f"],"4fd64b6aa64934b0e35d9ec3e6c5a5c60ffc1762":["f1bdbf92da222965b46c0a942c3857ba56e5c638","9c18f18acd178df9b067d805c52fe16882828aa0","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"efb7a19703a037c29e30440260d393500febc1f4":["60ba444201d2570214b6fcf1d15600dc1a01f548","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["5f4e87790277826a2aea119328600dfb07761f32","08932c793647a36953d1816b1060121f48820d3f"],"5f4e87790277826a2aea119328600dfb07761f32":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"b1add9ddc0005b07550d4350720aac22dc9886b3":["4fd64b6aa64934b0e35d9ec3e6c5a5c60ffc1762","e79a6d080bdd5b2a8f56342cf571b5476de04180","29ef99d61cda9641b6250bf9567329a6e65f901d"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["e79a6d080bdd5b2a8f56342cf571b5476de04180"],"e79a6d080bdd5b2a8f56342cf571b5476de04180":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"60ba444201d2570214b6fcf1d15600dc1a01f548":["7b91922b55d15444d554721b352861d028eb8278"],"7b91922b55d15444d554721b352861d028eb8278":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"08932c793647a36953d1816b1060121f48820d3f":["03b152509ee3fa8cf52abb8a4a0cfe7287c59fc8","5f4e87790277826a2aea119328600dfb07761f32"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":[],"d619839baa8ce5503e496b94a9e42ad6f079293f":["2e10cb22a8bdb44339e282925a29182bb2f3174d"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":[],"29ef99d61cda9641b6250bf9567329a6e65f901d":["f1bdbf92da222965b46c0a942c3857ba56e5c638"],"9c18f18acd178df9b067d805c52fe16882828aa0":["efb7a19703a037c29e30440260d393500febc1f4","c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"99cf56f3a650b908f7017a72f9d23940418f8a52":["b1add9ddc0005b07550d4350720aac22dc9886b3","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","29ef99d61cda9641b6250bf9567329a6e65f901d"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2e10cb22a8bdb44339e282925a29182bb2f3174d":[]},"heads":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","cd5edd1f2b162a5cfa08efd17851a07373a96817","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}