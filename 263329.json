{"path":"backwards/src/java/org/apache/lucene/queryParser/QueryParser#discardEscapeChar(String).mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/java/org/apache/lucene/queryParser/QueryParser#discardEscapeChar(String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns a String where the escape char has been\n   * removed, or kept only once if there was a double escape.\n   * \n   * Supports escaped unicode characters, e. g. translates\n   * <code>\\\\u0041</code> to <code>A</code>.\n   * \n   */\n  private String discardEscapeChar(String input) throws ParseException {\n    // Create char array to hold unescaped char sequence\n    char[] output = new char[input.length()];\n\n    // The length of the output can be less than the input\n    // due to discarded escape chars. This variable holds\n    // the actual length of the output\n    int length = 0;\n\n    // We remember whether the last processed character was \n    // an escape character\n    boolean lastCharWasEscapeChar = false;\n\n    // The multiplier the current unicode digit must be multiplied with.\n    // E. g. the first digit must be multiplied with 16^3, the second with 16^2...\n    int codePointMultiplier = 0;\n\n    // Used to calculate the codepoint of the escaped unicode character\n    int codePoint = 0;\n\n    for (int i = 0; i < input.length(); i++) {\n      char curChar = input.charAt(i);\n      if (codePointMultiplier > 0) {\n        codePoint += hexToInt(curChar) * codePointMultiplier;\n        codePointMultiplier >>>= 4;\n        if (codePointMultiplier == 0) {\n          output[length++] = (char)codePoint;\n          codePoint = 0;\n        }\n      } else if (lastCharWasEscapeChar) {\n        if (curChar == 'u') {\n          // found an escaped unicode character\n          codePointMultiplier = 16 * 16 * 16;\n        } else {\n          // this character was escaped\n          output[length] = curChar;\n          length++;\n        }\n        lastCharWasEscapeChar = false;\n      } else {\n        if (curChar == '\\\\') {\n          lastCharWasEscapeChar = true;\n        } else {\n          output[length] = curChar;\n          length++;\n        }\n      }\n    }\n\n    if (codePointMultiplier > 0) {\n      throw new ParseException(\"Truncated unicode escape sequence.\");\n    }\n\n    if (lastCharWasEscapeChar) {\n      throw new ParseException(\"Term can not end with escape character.\");\n    }\n\n    return new String(output, 0, length);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/queryParser/QueryParser#discardEscapeChar(String).mjava","pathOld":"backwards/src/java/org/apache/lucene/queryParser/QueryParser#discardEscapeChar(String).mjava","sourceNew":"  /**\n   * Returns a String where the escape char has been\n   * removed, or kept only once if there was a double escape.\n   * \n   * Supports escaped unicode characters, e. g. translates\n   * <code>\\\\u0041</code> to <code>A</code>.\n   * \n   */\n  private String discardEscapeChar(String input) throws ParseException {\n    // Create char array to hold unescaped char sequence\n    char[] output = new char[input.length()];\n\n    // The length of the output can be less than the input\n    // due to discarded escape chars. This variable holds\n    // the actual length of the output\n    int length = 0;\n\n    // We remember whether the last processed character was \n    // an escape character\n    boolean lastCharWasEscapeChar = false;\n\n    // The multiplier the current unicode digit must be multiplied with.\n    // E. g. the first digit must be multiplied with 16^3, the second with 16^2...\n    int codePointMultiplier = 0;\n\n    // Used to calculate the codepoint of the escaped unicode character\n    int codePoint = 0;\n\n    for (int i = 0; i < input.length(); i++) {\n      char curChar = input.charAt(i);\n      if (codePointMultiplier > 0) {\n        codePoint += hexToInt(curChar) * codePointMultiplier;\n        codePointMultiplier >>>= 4;\n        if (codePointMultiplier == 0) {\n          output[length++] = (char)codePoint;\n          codePoint = 0;\n        }\n      } else if (lastCharWasEscapeChar) {\n        if (curChar == 'u') {\n          // found an escaped unicode character\n          codePointMultiplier = 16 * 16 * 16;\n        } else {\n          // this character was escaped\n          output[length] = curChar;\n          length++;\n        }\n        lastCharWasEscapeChar = false;\n      } else {\n        if (curChar == '\\\\') {\n          lastCharWasEscapeChar = true;\n        } else {\n          output[length] = curChar;\n          length++;\n        }\n      }\n    }\n\n    if (codePointMultiplier > 0) {\n      throw new ParseException(\"Truncated unicode escape sequence.\");\n    }\n\n    if (lastCharWasEscapeChar) {\n      throw new ParseException(\"Term can not end with escape character.\");\n    }\n\n    return new String(output, 0, length);\n  }\n\n","sourceOld":"  /**\n   * Returns a String where the escape char has been\n   * removed, or kept only once if there was a double escape.\n   * \n   * Supports escaped unicode characters, e. g. translates\n   * <code>\\\\u0041</code> to <code>A</code>.\n   * \n   */\n  private String discardEscapeChar(String input) throws ParseException {\n    // Create char array to hold unescaped char sequence\n    char[] output = new char[input.length()];\n\n    // The length of the output can be less than the input\n    // due to discarded escape chars. This variable holds\n    // the actual length of the output\n    int length = 0;\n\n    // We remember whether the last processed character was \n    // an escape character\n    boolean lastCharWasEscapeChar = false;\n\n    // The multiplier the current unicode digit must be multiplied with.\n    // E. g. the first digit must be multiplied with 16^3, the second with 16^2...\n    int codePointMultiplier = 0;\n\n    // Used to calculate the codepoint of the escaped unicode character\n    int codePoint = 0;\n\n    for (int i = 0; i < input.length(); i++) {\n      char curChar = input.charAt(i);\n      if (codePointMultiplier > 0) {\n        codePoint += hexToInt(curChar) * codePointMultiplier;\n        codePointMultiplier >>>= 4;\n        if (codePointMultiplier == 0) {\n          output[length++] = (char)codePoint;\n          codePoint = 0;\n        }\n      } else if (lastCharWasEscapeChar) {\n        if (curChar == 'u') {\n          // found an escaped unicode character\n          codePointMultiplier = 16 * 16 * 16;\n        } else {\n          // this character was escaped\n          output[length] = curChar;\n          length++;\n        }\n        lastCharWasEscapeChar = false;\n      } else {\n        if (curChar == '\\\\') {\n          lastCharWasEscapeChar = true;\n        } else {\n          output[length] = curChar;\n          length++;\n        }\n      }\n    }\n\n    if (codePointMultiplier > 0) {\n      throw new ParseException(\"Truncated unicode escape sequence.\");\n    }\n\n    if (lastCharWasEscapeChar) {\n      throw new ParseException(\"Term can not end with escape character.\");\n    }\n\n    return new String(output, 0, length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}