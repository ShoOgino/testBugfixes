{"path":"modules/queries/src/test/org/apache/lucene/queries/TermsFilterTest#testMissingTerms().mjava","commits":[{"id":"1f9f2355d68aab1348539f7a1603279405e566a4","date":1313634992,"type":1,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queries/src/test/org/apache/lucene/queries/TermsFilterTest#testMissingTerms().mjava","pathOld":"lucene/contrib/queries/src/test/org/apache/lucene/search/TermsFilterTest#testMissingTerms().mjava","sourceNew":"  public void testMissingTerms() throws Exception {\n    String fieldName = \"field1\";\n    Directory rd = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random, rd);\n    for (int i = 0; i < 100; i++) {\n      Document doc = new Document();\n      int term = i * 10; //terms are units of 10;\n      doc.add(newField(fieldName, \"\" + term, Field.Store.YES, Field.Index.NOT_ANALYZED));\n      w.addDocument(doc);\n    }\n    IndexReader reader = new SlowMultiReaderWrapper(w.getReader());\n    assertTrue(reader.getTopReaderContext().isAtomic);\n    AtomicReaderContext context = (AtomicReaderContext) reader.getTopReaderContext();\n    assertTrue(context.isAtomic);\n    w.close();\n\n    TermsFilter tf = new TermsFilter();\n    tf.addTerm(new Term(fieldName, \"19\"));\n    FixedBitSet bits = (FixedBitSet) tf.getDocIdSet(context);\n    assertEquals(\"Must match nothing\", 0, bits.cardinality());\n\n    tf.addTerm(new Term(fieldName, \"20\"));\n    bits = (FixedBitSet) tf.getDocIdSet(context);\n    assertEquals(\"Must match 1\", 1, bits.cardinality());\n\n    tf.addTerm(new Term(fieldName, \"10\"));\n    bits = (FixedBitSet) tf.getDocIdSet(context);\n    assertEquals(\"Must match 2\", 2, bits.cardinality());\n\n    tf.addTerm(new Term(fieldName, \"00\"));\n    bits = (FixedBitSet) tf.getDocIdSet(context);\n    assertEquals(\"Must match 2\", 2, bits.cardinality());\n\n    reader.close();\n    rd.close();\n  }\n\n","sourceOld":"  public void testMissingTerms() throws Exception {\n    String fieldName = \"field1\";\n    Directory rd = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random, rd);\n    for (int i = 0; i < 100; i++) {\n      Document doc = new Document();\n      int term = i * 10; //terms are units of 10;\n      doc.add(newField(fieldName, \"\" + term, Field.Store.YES, Field.Index.NOT_ANALYZED));\n      w.addDocument(doc);\n    }\n    IndexReader reader = new SlowMultiReaderWrapper(w.getReader());\n    assertTrue(reader.getTopReaderContext().isAtomic);\n    AtomicReaderContext context = (AtomicReaderContext) reader.getTopReaderContext();\n    assertTrue(context.isAtomic);\n    w.close();\n\n    TermsFilter tf = new TermsFilter();\n    tf.addTerm(new Term(fieldName, \"19\"));\n    FixedBitSet bits = (FixedBitSet) tf.getDocIdSet(context);\n    assertEquals(\"Must match nothing\", 0, bits.cardinality());\n\n    tf.addTerm(new Term(fieldName, \"20\"));\n    bits = (FixedBitSet) tf.getDocIdSet(context);\n    assertEquals(\"Must match 1\", 1, bits.cardinality());\n\n    tf.addTerm(new Term(fieldName, \"10\"));\n    bits = (FixedBitSet) tf.getDocIdSet(context);\n    assertEquals(\"Must match 2\", 2, bits.cardinality());\n\n    tf.addTerm(new Term(fieldName, \"00\"));\n    bits = (FixedBitSet) tf.getDocIdSet(context);\n    assertEquals(\"Must match 2\", 2, bits.cardinality());\n\n    reader.close();\n    rd.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"modules/queries/src/test/org/apache/lucene/queries/TermsFilterTest#testMissingTerms().mjava","pathOld":"modules/queries/src/test/org/apache/lucene/queries/TermsFilterTest#testMissingTerms().mjava","sourceNew":"  public void testMissingTerms() throws Exception {\n    String fieldName = \"field1\";\n    Directory rd = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random, rd);\n    for (int i = 0; i < 100; i++) {\n      Document doc = new Document();\n      int term = i * 10; //terms are units of 10;\n      doc.add(newField(fieldName, \"\" + term, StringField.TYPE_STORED));\n      w.addDocument(doc);\n    }\n    IndexReader reader = new SlowMultiReaderWrapper(w.getReader());\n    assertTrue(reader.getTopReaderContext().isAtomic);\n    AtomicReaderContext context = (AtomicReaderContext) reader.getTopReaderContext();\n    assertTrue(context.isAtomic);\n    w.close();\n\n    TermsFilter tf = new TermsFilter();\n    tf.addTerm(new Term(fieldName, \"19\"));\n    FixedBitSet bits = (FixedBitSet) tf.getDocIdSet(context);\n    assertEquals(\"Must match nothing\", 0, bits.cardinality());\n\n    tf.addTerm(new Term(fieldName, \"20\"));\n    bits = (FixedBitSet) tf.getDocIdSet(context);\n    assertEquals(\"Must match 1\", 1, bits.cardinality());\n\n    tf.addTerm(new Term(fieldName, \"10\"));\n    bits = (FixedBitSet) tf.getDocIdSet(context);\n    assertEquals(\"Must match 2\", 2, bits.cardinality());\n\n    tf.addTerm(new Term(fieldName, \"00\"));\n    bits = (FixedBitSet) tf.getDocIdSet(context);\n    assertEquals(\"Must match 2\", 2, bits.cardinality());\n\n    reader.close();\n    rd.close();\n  }\n\n","sourceOld":"  public void testMissingTerms() throws Exception {\n    String fieldName = \"field1\";\n    Directory rd = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random, rd);\n    for (int i = 0; i < 100; i++) {\n      Document doc = new Document();\n      int term = i * 10; //terms are units of 10;\n      doc.add(newField(fieldName, \"\" + term, Field.Store.YES, Field.Index.NOT_ANALYZED));\n      w.addDocument(doc);\n    }\n    IndexReader reader = new SlowMultiReaderWrapper(w.getReader());\n    assertTrue(reader.getTopReaderContext().isAtomic);\n    AtomicReaderContext context = (AtomicReaderContext) reader.getTopReaderContext();\n    assertTrue(context.isAtomic);\n    w.close();\n\n    TermsFilter tf = new TermsFilter();\n    tf.addTerm(new Term(fieldName, \"19\"));\n    FixedBitSet bits = (FixedBitSet) tf.getDocIdSet(context);\n    assertEquals(\"Must match nothing\", 0, bits.cardinality());\n\n    tf.addTerm(new Term(fieldName, \"20\"));\n    bits = (FixedBitSet) tf.getDocIdSet(context);\n    assertEquals(\"Must match 1\", 1, bits.cardinality());\n\n    tf.addTerm(new Term(fieldName, \"10\"));\n    bits = (FixedBitSet) tf.getDocIdSet(context);\n    assertEquals(\"Must match 2\", 2, bits.cardinality());\n\n    tf.addTerm(new Term(fieldName, \"00\"));\n    bits = (FixedBitSet) tf.getDocIdSet(context);\n    assertEquals(\"Must match 2\", 2, bits.cardinality());\n\n    reader.close();\n    rd.close();\n  }\n\n","bugFix":null,"bugIntro":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6620df8541b174097b1133a4fc370adb2e570524","date":1319544675,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"modules/queries/src/test/org/apache/lucene/queries/TermsFilterTest#testMissingTerms().mjava","pathOld":"modules/queries/src/test/org/apache/lucene/queries/TermsFilterTest#testMissingTerms().mjava","sourceNew":"  public void testMissingTerms() throws Exception {\n    String fieldName = \"field1\";\n    Directory rd = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random, rd);\n    for (int i = 0; i < 100; i++) {\n      Document doc = new Document();\n      int term = i * 10; //terms are units of 10;\n      doc.add(newField(fieldName, \"\" + term, StringField.TYPE_STORED));\n      w.addDocument(doc);\n    }\n    IndexReader reader = new SlowMultiReaderWrapper(w.getReader());\n    assertTrue(reader.getTopReaderContext().isAtomic);\n    AtomicReaderContext context = (AtomicReaderContext) reader.getTopReaderContext();\n    assertTrue(context.isAtomic);\n    w.close();\n\n    TermsFilter tf = new TermsFilter();\n    tf.addTerm(new Term(fieldName, \"19\"));\n    FixedBitSet bits = (FixedBitSet) tf.getDocIdSet(context, context.reader.getLiveDocs());\n    assertEquals(\"Must match nothing\", 0, bits.cardinality());\n\n    tf.addTerm(new Term(fieldName, \"20\"));\n    bits = (FixedBitSet) tf.getDocIdSet(context, context.reader.getLiveDocs());\n    assertEquals(\"Must match 1\", 1, bits.cardinality());\n\n    tf.addTerm(new Term(fieldName, \"10\"));\n    bits = (FixedBitSet) tf.getDocIdSet(context, context.reader.getLiveDocs());\n    assertEquals(\"Must match 2\", 2, bits.cardinality());\n\n    tf.addTerm(new Term(fieldName, \"00\"));\n    bits = (FixedBitSet) tf.getDocIdSet(context, context.reader.getLiveDocs());\n    assertEquals(\"Must match 2\", 2, bits.cardinality());\n\n    reader.close();\n    rd.close();\n  }\n\n","sourceOld":"  public void testMissingTerms() throws Exception {\n    String fieldName = \"field1\";\n    Directory rd = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random, rd);\n    for (int i = 0; i < 100; i++) {\n      Document doc = new Document();\n      int term = i * 10; //terms are units of 10;\n      doc.add(newField(fieldName, \"\" + term, StringField.TYPE_STORED));\n      w.addDocument(doc);\n    }\n    IndexReader reader = new SlowMultiReaderWrapper(w.getReader());\n    assertTrue(reader.getTopReaderContext().isAtomic);\n    AtomicReaderContext context = (AtomicReaderContext) reader.getTopReaderContext();\n    assertTrue(context.isAtomic);\n    w.close();\n\n    TermsFilter tf = new TermsFilter();\n    tf.addTerm(new Term(fieldName, \"19\"));\n    FixedBitSet bits = (FixedBitSet) tf.getDocIdSet(context);\n    assertEquals(\"Must match nothing\", 0, bits.cardinality());\n\n    tf.addTerm(new Term(fieldName, \"20\"));\n    bits = (FixedBitSet) tf.getDocIdSet(context);\n    assertEquals(\"Must match 1\", 1, bits.cardinality());\n\n    tf.addTerm(new Term(fieldName, \"10\"));\n    bits = (FixedBitSet) tf.getDocIdSet(context);\n    assertEquals(\"Must match 2\", 2, bits.cardinality());\n\n    tf.addTerm(new Term(fieldName, \"00\"));\n    bits = (FixedBitSet) tf.getDocIdSet(context);\n    assertEquals(\"Must match 2\", 2, bits.cardinality());\n\n    reader.close();\n    rd.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"61e20f33ce8ff701576366fdb03955eded5f209b","date":1327852832,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/queries/src/test/org/apache/lucene/queries/TermsFilterTest#testMissingTerms().mjava","pathOld":"modules/queries/src/test/org/apache/lucene/queries/TermsFilterTest#testMissingTerms().mjava","sourceNew":"  public void testMissingTerms() throws Exception {\n    String fieldName = \"field1\";\n    Directory rd = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random, rd);\n    for (int i = 0; i < 100; i++) {\n      Document doc = new Document();\n      int term = i * 10; //terms are units of 10;\n      doc.add(newField(fieldName, \"\" + term, StringField.TYPE_STORED));\n      w.addDocument(doc);\n    }\n    IndexReader reader = new SlowCompositeReaderWrapper(w.getReader());\n    assertTrue(reader.getTopReaderContext() instanceof AtomicReaderContext);\n    AtomicReaderContext context = (AtomicReaderContext) reader.getTopReaderContext();\n    w.close();\n\n    TermsFilter tf = new TermsFilter();\n    tf.addTerm(new Term(fieldName, \"19\"));\n    FixedBitSet bits = (FixedBitSet) tf.getDocIdSet(context, context.reader().getLiveDocs());\n    assertEquals(\"Must match nothing\", 0, bits.cardinality());\n\n    tf.addTerm(new Term(fieldName, \"20\"));\n    bits = (FixedBitSet) tf.getDocIdSet(context, context.reader().getLiveDocs());\n    assertEquals(\"Must match 1\", 1, bits.cardinality());\n\n    tf.addTerm(new Term(fieldName, \"10\"));\n    bits = (FixedBitSet) tf.getDocIdSet(context, context.reader().getLiveDocs());\n    assertEquals(\"Must match 2\", 2, bits.cardinality());\n\n    tf.addTerm(new Term(fieldName, \"00\"));\n    bits = (FixedBitSet) tf.getDocIdSet(context, context.reader().getLiveDocs());\n    assertEquals(\"Must match 2\", 2, bits.cardinality());\n\n    reader.close();\n    rd.close();\n  }\n\n","sourceOld":"  public void testMissingTerms() throws Exception {\n    String fieldName = \"field1\";\n    Directory rd = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random, rd);\n    for (int i = 0; i < 100; i++) {\n      Document doc = new Document();\n      int term = i * 10; //terms are units of 10;\n      doc.add(newField(fieldName, \"\" + term, StringField.TYPE_STORED));\n      w.addDocument(doc);\n    }\n    IndexReader reader = new SlowMultiReaderWrapper(w.getReader());\n    assertTrue(reader.getTopReaderContext().isAtomic);\n    AtomicReaderContext context = (AtomicReaderContext) reader.getTopReaderContext();\n    assertTrue(context.isAtomic);\n    w.close();\n\n    TermsFilter tf = new TermsFilter();\n    tf.addTerm(new Term(fieldName, \"19\"));\n    FixedBitSet bits = (FixedBitSet) tf.getDocIdSet(context, context.reader.getLiveDocs());\n    assertEquals(\"Must match nothing\", 0, bits.cardinality());\n\n    tf.addTerm(new Term(fieldName, \"20\"));\n    bits = (FixedBitSet) tf.getDocIdSet(context, context.reader.getLiveDocs());\n    assertEquals(\"Must match 1\", 1, bits.cardinality());\n\n    tf.addTerm(new Term(fieldName, \"10\"));\n    bits = (FixedBitSet) tf.getDocIdSet(context, context.reader.getLiveDocs());\n    assertEquals(\"Must match 2\", 2, bits.cardinality());\n\n    tf.addTerm(new Term(fieldName, \"00\"));\n    bits = (FixedBitSet) tf.getDocIdSet(context, context.reader.getLiveDocs());\n    assertEquals(\"Must match 2\", 2, bits.cardinality());\n\n    reader.close();\n    rd.close();\n  }\n\n","bugFix":null,"bugIntro":["4107dd39b127d892359c5c1d67d0f14d92f1a9bf"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"modules/queries/src/test/org/apache/lucene/queries/TermsFilterTest#testMissingTerms().mjava","pathOld":"modules/queries/src/test/org/apache/lucene/queries/TermsFilterTest#testMissingTerms().mjava","sourceNew":"  public void testMissingTerms() throws Exception {\n    String fieldName = \"field1\";\n    Directory rd = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random, rd);\n    for (int i = 0; i < 100; i++) {\n      Document doc = new Document();\n      int term = i * 10; //terms are units of 10;\n      doc.add(newField(fieldName, \"\" + term, StringField.TYPE_STORED));\n      w.addDocument(doc);\n    }\n    IndexReader reader = new SlowCompositeReaderWrapper(w.getReader());\n    assertTrue(reader.getTopReaderContext() instanceof AtomicReaderContext);\n    AtomicReaderContext context = (AtomicReaderContext) reader.getTopReaderContext();\n    w.close();\n\n    TermsFilter tf = new TermsFilter();\n    tf.addTerm(new Term(fieldName, \"19\"));\n    FixedBitSet bits = (FixedBitSet) tf.getDocIdSet(context, context.reader().getLiveDocs());\n    assertEquals(\"Must match nothing\", 0, bits.cardinality());\n\n    tf.addTerm(new Term(fieldName, \"20\"));\n    bits = (FixedBitSet) tf.getDocIdSet(context, context.reader().getLiveDocs());\n    assertEquals(\"Must match 1\", 1, bits.cardinality());\n\n    tf.addTerm(new Term(fieldName, \"10\"));\n    bits = (FixedBitSet) tf.getDocIdSet(context, context.reader().getLiveDocs());\n    assertEquals(\"Must match 2\", 2, bits.cardinality());\n\n    tf.addTerm(new Term(fieldName, \"00\"));\n    bits = (FixedBitSet) tf.getDocIdSet(context, context.reader().getLiveDocs());\n    assertEquals(\"Must match 2\", 2, bits.cardinality());\n\n    reader.close();\n    rd.close();\n  }\n\n","sourceOld":"  public void testMissingTerms() throws Exception {\n    String fieldName = \"field1\";\n    Directory rd = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random, rd);\n    for (int i = 0; i < 100; i++) {\n      Document doc = new Document();\n      int term = i * 10; //terms are units of 10;\n      doc.add(newField(fieldName, \"\" + term, StringField.TYPE_STORED));\n      w.addDocument(doc);\n    }\n    IndexReader reader = new SlowMultiReaderWrapper(w.getReader());\n    assertTrue(reader.getTopReaderContext().isAtomic);\n    AtomicReaderContext context = (AtomicReaderContext) reader.getTopReaderContext();\n    assertTrue(context.isAtomic);\n    w.close();\n\n    TermsFilter tf = new TermsFilter();\n    tf.addTerm(new Term(fieldName, \"19\"));\n    FixedBitSet bits = (FixedBitSet) tf.getDocIdSet(context, context.reader.getLiveDocs());\n    assertEquals(\"Must match nothing\", 0, bits.cardinality());\n\n    tf.addTerm(new Term(fieldName, \"20\"));\n    bits = (FixedBitSet) tf.getDocIdSet(context, context.reader.getLiveDocs());\n    assertEquals(\"Must match 1\", 1, bits.cardinality());\n\n    tf.addTerm(new Term(fieldName, \"10\"));\n    bits = (FixedBitSet) tf.getDocIdSet(context, context.reader.getLiveDocs());\n    assertEquals(\"Must match 2\", 2, bits.cardinality());\n\n    tf.addTerm(new Term(fieldName, \"00\"));\n    bits = (FixedBitSet) tf.getDocIdSet(context, context.reader.getLiveDocs());\n    assertEquals(\"Must match 2\", 2, bits.cardinality());\n\n    reader.close();\n    rd.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"modules/queries/src/test/org/apache/lucene/queries/TermsFilterTest#testMissingTerms().mjava","pathOld":"modules/queries/src/test/org/apache/lucene/queries/TermsFilterTest#testMissingTerms().mjava","sourceNew":"  public void testMissingTerms() throws Exception {\n    String fieldName = \"field1\";\n    Directory rd = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), rd);\n    for (int i = 0; i < 100; i++) {\n      Document doc = new Document();\n      int term = i * 10; //terms are units of 10;\n      doc.add(newField(fieldName, \"\" + term, StringField.TYPE_STORED));\n      w.addDocument(doc);\n    }\n    IndexReader reader = new SlowCompositeReaderWrapper(w.getReader());\n    assertTrue(reader.getTopReaderContext() instanceof AtomicReaderContext);\n    AtomicReaderContext context = (AtomicReaderContext) reader.getTopReaderContext();\n    w.close();\n\n    TermsFilter tf = new TermsFilter();\n    tf.addTerm(new Term(fieldName, \"19\"));\n    FixedBitSet bits = (FixedBitSet) tf.getDocIdSet(context, context.reader().getLiveDocs());\n    assertEquals(\"Must match nothing\", 0, bits.cardinality());\n\n    tf.addTerm(new Term(fieldName, \"20\"));\n    bits = (FixedBitSet) tf.getDocIdSet(context, context.reader().getLiveDocs());\n    assertEquals(\"Must match 1\", 1, bits.cardinality());\n\n    tf.addTerm(new Term(fieldName, \"10\"));\n    bits = (FixedBitSet) tf.getDocIdSet(context, context.reader().getLiveDocs());\n    assertEquals(\"Must match 2\", 2, bits.cardinality());\n\n    tf.addTerm(new Term(fieldName, \"00\"));\n    bits = (FixedBitSet) tf.getDocIdSet(context, context.reader().getLiveDocs());\n    assertEquals(\"Must match 2\", 2, bits.cardinality());\n\n    reader.close();\n    rd.close();\n  }\n\n","sourceOld":"  public void testMissingTerms() throws Exception {\n    String fieldName = \"field1\";\n    Directory rd = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random, rd);\n    for (int i = 0; i < 100; i++) {\n      Document doc = new Document();\n      int term = i * 10; //terms are units of 10;\n      doc.add(newField(fieldName, \"\" + term, StringField.TYPE_STORED));\n      w.addDocument(doc);\n    }\n    IndexReader reader = new SlowCompositeReaderWrapper(w.getReader());\n    assertTrue(reader.getTopReaderContext() instanceof AtomicReaderContext);\n    AtomicReaderContext context = (AtomicReaderContext) reader.getTopReaderContext();\n    w.close();\n\n    TermsFilter tf = new TermsFilter();\n    tf.addTerm(new Term(fieldName, \"19\"));\n    FixedBitSet bits = (FixedBitSet) tf.getDocIdSet(context, context.reader().getLiveDocs());\n    assertEquals(\"Must match nothing\", 0, bits.cardinality());\n\n    tf.addTerm(new Term(fieldName, \"20\"));\n    bits = (FixedBitSet) tf.getDocIdSet(context, context.reader().getLiveDocs());\n    assertEquals(\"Must match 1\", 1, bits.cardinality());\n\n    tf.addTerm(new Term(fieldName, \"10\"));\n    bits = (FixedBitSet) tf.getDocIdSet(context, context.reader().getLiveDocs());\n    assertEquals(\"Must match 2\", 2, bits.cardinality());\n\n    tf.addTerm(new Term(fieldName, \"00\"));\n    bits = (FixedBitSet) tf.getDocIdSet(context, context.reader().getLiveDocs());\n    assertEquals(\"Must match 2\", 2, bits.cardinality());\n\n    reader.close();\n    rd.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/TermsFilterTest#testMissingTerms().mjava","pathOld":"modules/queries/src/test/org/apache/lucene/queries/TermsFilterTest#testMissingTerms().mjava","sourceNew":"  public void testMissingTerms() throws Exception {\n    String fieldName = \"field1\";\n    Directory rd = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), rd);\n    for (int i = 0; i < 100; i++) {\n      Document doc = new Document();\n      int term = i * 10; //terms are units of 10;\n      doc.add(newField(fieldName, \"\" + term, StringField.TYPE_STORED));\n      w.addDocument(doc);\n    }\n    IndexReader reader = new SlowCompositeReaderWrapper(w.getReader());\n    assertTrue(reader.getTopReaderContext() instanceof AtomicReaderContext);\n    AtomicReaderContext context = (AtomicReaderContext) reader.getTopReaderContext();\n    w.close();\n\n    TermsFilter tf = new TermsFilter();\n    tf.addTerm(new Term(fieldName, \"19\"));\n    FixedBitSet bits = (FixedBitSet) tf.getDocIdSet(context, context.reader().getLiveDocs());\n    assertEquals(\"Must match nothing\", 0, bits.cardinality());\n\n    tf.addTerm(new Term(fieldName, \"20\"));\n    bits = (FixedBitSet) tf.getDocIdSet(context, context.reader().getLiveDocs());\n    assertEquals(\"Must match 1\", 1, bits.cardinality());\n\n    tf.addTerm(new Term(fieldName, \"10\"));\n    bits = (FixedBitSet) tf.getDocIdSet(context, context.reader().getLiveDocs());\n    assertEquals(\"Must match 2\", 2, bits.cardinality());\n\n    tf.addTerm(new Term(fieldName, \"00\"));\n    bits = (FixedBitSet) tf.getDocIdSet(context, context.reader().getLiveDocs());\n    assertEquals(\"Must match 2\", 2, bits.cardinality());\n\n    reader.close();\n    rd.close();\n  }\n\n","sourceOld":"  public void testMissingTerms() throws Exception {\n    String fieldName = \"field1\";\n    Directory rd = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), rd);\n    for (int i = 0; i < 100; i++) {\n      Document doc = new Document();\n      int term = i * 10; //terms are units of 10;\n      doc.add(newField(fieldName, \"\" + term, StringField.TYPE_STORED));\n      w.addDocument(doc);\n    }\n    IndexReader reader = new SlowCompositeReaderWrapper(w.getReader());\n    assertTrue(reader.getTopReaderContext() instanceof AtomicReaderContext);\n    AtomicReaderContext context = (AtomicReaderContext) reader.getTopReaderContext();\n    w.close();\n\n    TermsFilter tf = new TermsFilter();\n    tf.addTerm(new Term(fieldName, \"19\"));\n    FixedBitSet bits = (FixedBitSet) tf.getDocIdSet(context, context.reader().getLiveDocs());\n    assertEquals(\"Must match nothing\", 0, bits.cardinality());\n\n    tf.addTerm(new Term(fieldName, \"20\"));\n    bits = (FixedBitSet) tf.getDocIdSet(context, context.reader().getLiveDocs());\n    assertEquals(\"Must match 1\", 1, bits.cardinality());\n\n    tf.addTerm(new Term(fieldName, \"10\"));\n    bits = (FixedBitSet) tf.getDocIdSet(context, context.reader().getLiveDocs());\n    assertEquals(\"Must match 2\", 2, bits.cardinality());\n\n    tf.addTerm(new Term(fieldName, \"00\"));\n    bits = (FixedBitSet) tf.getDocIdSet(context, context.reader().getLiveDocs());\n    assertEquals(\"Must match 2\", 2, bits.cardinality());\n\n    reader.close();\n    rd.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"6620df8541b174097b1133a4fc370adb2e570524":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"61e20f33ce8ff701576366fdb03955eded5f209b":["6620df8541b174097b1133a4fc370adb2e570524"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["1f9f2355d68aab1348539f7a1603279405e566a4"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["6620df8541b174097b1133a4fc370adb2e570524","61e20f33ce8ff701576366fdb03955eded5f209b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"1f9f2355d68aab1348539f7a1603279405e566a4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6620df8541b174097b1133a4fc370adb2e570524":["61e20f33ce8ff701576366fdb03955eded5f209b","5cab9a86bd67202d20b6adc463008c8e982b070a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1f9f2355d68aab1348539f7a1603279405e566a4"],"61e20f33ce8ff701576366fdb03955eded5f209b":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["6620df8541b174097b1133a4fc370adb2e570524"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"1f9f2355d68aab1348539f7a1603279405e566a4":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}