{"path":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDConfig#verifyParams(int,int,int,int).mjava","commits":[{"id":"bb94bf667d51f9c390c99d97afb36b7caab6b6e9","date":1599548621,"type":1,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDConfig#verifyParams(int,int,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#verifyParams(int,int,int,double,long).mjava","sourceNew":"  private static void verifyParams(final int numDims, final int numIndexDims, final int bytesPerDim, final int maxPointsInLeafNode) {\n    // Check inputs are on bounds\n    if (numDims < 1 || numDims > MAX_DIMS) {\n      throw new IllegalArgumentException(\"numDims must be 1 .. \" + MAX_DIMS + \" (got: \" + numDims + \")\");\n    }\n    if (numIndexDims < 1 || numIndexDims > MAX_INDEX_DIMS) {\n      throw new IllegalArgumentException(\"numIndexDims must be 1 .. \" + MAX_INDEX_DIMS + \" (got: \" + numIndexDims + \")\");\n    }\n    if (numIndexDims > numDims) {\n      throw new IllegalArgumentException(\"numIndexDims cannot exceed numDims (\" + numDims + \") (got: \" + numIndexDims + \")\");\n    }\n    if (bytesPerDim <= 0) {\n      throw new IllegalArgumentException(\"bytesPerDim must be > 0; got \" + bytesPerDim);\n    }\n    if (maxPointsInLeafNode <= 0) {\n      throw new IllegalArgumentException(\"maxPointsInLeafNode must be > 0; got \" + maxPointsInLeafNode);\n    }\n    if (maxPointsInLeafNode > ArrayUtil.MAX_ARRAY_LENGTH) {\n      throw new IllegalArgumentException(\"maxPointsInLeafNode must be <= ArrayUtil.MAX_ARRAY_LENGTH (= \" + ArrayUtil.MAX_ARRAY_LENGTH + \"); got \" + maxPointsInLeafNode);\n    }\n  }\n\n","sourceOld":"  public static void verifyParams(int numDims, int numIndexDims, int maxPointsInLeafNode, double maxMBSortInHeap, long totalPointCount) {\n    // We encode dim in a single byte in the splitPackedValues, but we only expose 4 bits for it now, in case we want to use\n    // remaining 4 bits for another purpose later\n    if (numDims < 1 || numDims > MAX_DIMS) {\n      throw new IllegalArgumentException(\"numDims must be 1 .. \" + MAX_DIMS + \" (got: \" + numDims + \")\");\n    }\n    if (numIndexDims < 1 || numIndexDims > MAX_INDEX_DIMS) {\n      throw new IllegalArgumentException(\"numIndexDims must be 1 .. \" + MAX_INDEX_DIMS + \" (got: \" + numIndexDims + \")\");\n    }\n    if (numIndexDims > numDims) {\n      throw new IllegalArgumentException(\"numIndexDims cannot exceed numDims (\" + numDims + \") (got: \" + numIndexDims + \")\");\n    }\n    if (maxPointsInLeafNode <= 0) {\n      throw new IllegalArgumentException(\"maxPointsInLeafNode must be > 0; got \" + maxPointsInLeafNode);\n    }\n    if (maxPointsInLeafNode > ArrayUtil.MAX_ARRAY_LENGTH) {\n      throw new IllegalArgumentException(\"maxPointsInLeafNode must be <= ArrayUtil.MAX_ARRAY_LENGTH (= \" + ArrayUtil.MAX_ARRAY_LENGTH + \"); got \" + maxPointsInLeafNode);\n    }\n    if (maxMBSortInHeap < 0.0) {\n      throw new IllegalArgumentException(\"maxMBSortInHeap must be >= 0.0 (got: \" + maxMBSortInHeap + \")\");\n    }\n    if (totalPointCount < 0) {\n      throw new IllegalArgumentException(\"totalPointCount must be >=0 (got: \" + totalPointCount + \")\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bb94bf667d51f9c390c99d97afb36b7caab6b6e9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bb94bf667d51f9c390c99d97afb36b7caab6b6e9"]},"commit2Childs":{"bb94bf667d51f9c390c99d97afb36b7caab6b6e9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bb94bf667d51f9c390c99d97afb36b7caab6b6e9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}