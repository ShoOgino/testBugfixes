{"path":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/LineDocSource#getNextDocData(DocData).mjava","commits":[{"id":"ecc11368dc265bfdad90214f8bf5da99016ab1e2","date":1294144090,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/LineDocSource#getNextDocData(DocData).mjava","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/LineDocSource#getNextDocData(DocData).mjava","sourceNew":"  @Override\n  public DocData getNextDocData(DocData docData) throws NoMoreDataException, IOException {\n    final String line;\n    final int myID;\n    \n    synchronized(this) {\n      line = reader.readLine();\n      myID = readCount++;\n      if (line == null) {\n        if (!forever) {\n          throw new NoMoreDataException();\n        }\n        // Reset the file\n        openFile();\n        return getNextDocData(docData);\n      }\n    }\n    \n    // A line must be in the following format. If it's not, fail !\n    // title <TAB> date <TAB> body <NEWLINE>\n    int spot = line.indexOf(SEP);\n    if (spot == -1) {\n      throw new RuntimeException(\"line: [\" + line + \"] is in an invalid format !\");\n    }\n    int spot2 = line.indexOf(SEP, 1 + spot);\n    if (spot2 == -1) {\n      throw new RuntimeException(\"line: [\" + line + \"] is in an invalid format !\");\n    }\n    // The date String was written in the format of DateTools.dateToString.\n    docData.clear();\n    docData.setID(myID);\n    docData.setBody(line.substring(1 + spot2, line.length()));\n    docData.setTitle(line.substring(0, spot));\n    docData.setDate(line.substring(1 + spot, spot2));\n    return docData;\n  }\n\n","sourceOld":"  @Override\n  public DocData getNextDocData(DocData docData) throws NoMoreDataException, IOException {\n    final String line;\n    final int myID;\n    \n    synchronized(this) {\n      line = reader.readLine();\n      myID = readCount++;\n      if (line == null) {\n        if (!forever) {\n          throw new NoMoreDataException();\n        }\n        // Reset the file\n        openFile();\n        return getNextDocData(docData);\n      }\n    }\n    \n    // A line must be in the following format. If it's not, fail !\n    // title <TAB> date <TAB> body <NEWLINE>\n    int spot = line.indexOf(SEP);\n    if (spot == -1) {\n      throw new RuntimeException(\"line: [\" + line + \"] is in an invalid format !\");\n    }\n    int spot2 = line.indexOf(SEP, 1 + spot);\n    if (spot2 == -1) {\n      throw new RuntimeException(\"line: [\" + line + \"] is in an invalid format !\");\n    }\n    // The date String was written in the format of DateTools.dateToString.\n    docData.clear();\n    docData.setID(myID);\n    docData.setBody(line.substring(1 + spot2, line.length()));\n    docData.setTitle(line.substring(0, spot));\n    docData.setDate(line.substring(1 + spot, spot2));\n    return docData;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/LineDocSource#getNextDocData(DocData).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public DocData getNextDocData(DocData docData) throws NoMoreDataException, IOException {\n    final String line;\n    final int myID;\n    \n    synchronized(this) {\n      line = reader.readLine();\n      myID = readCount++;\n      if (line == null) {\n        if (!forever) {\n          throw new NoMoreDataException();\n        }\n        // Reset the file\n        openFile();\n        return getNextDocData(docData);\n      }\n    }\n    \n    // A line must be in the following format. If it's not, fail !\n    // title <TAB> date <TAB> body <NEWLINE>\n    int spot = line.indexOf(SEP);\n    if (spot == -1) {\n      throw new RuntimeException(\"line: [\" + line + \"] is in an invalid format !\");\n    }\n    int spot2 = line.indexOf(SEP, 1 + spot);\n    if (spot2 == -1) {\n      throw new RuntimeException(\"line: [\" + line + \"] is in an invalid format !\");\n    }\n    // The date String was written in the format of DateTools.dateToString.\n    docData.clear();\n    docData.setID(myID);\n    docData.setBody(line.substring(1 + spot2, line.length()));\n    docData.setTitle(line.substring(0, spot));\n    docData.setDate(line.substring(1 + spot, spot2));\n    return docData;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":1,"author":"Michael Busch","isMerge":true,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/LineDocSource#getNextDocData(DocData).mjava","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/LineDocSource#getNextDocData(DocData).mjava","sourceNew":"  @Override\n  public DocData getNextDocData(DocData docData) throws NoMoreDataException, IOException {\n    final String line;\n    final int myID;\n    \n    synchronized(this) {\n      line = reader.readLine();\n      myID = readCount++;\n      if (line == null) {\n        if (!forever) {\n          throw new NoMoreDataException();\n        }\n        // Reset the file\n        openFile();\n        return getNextDocData(docData);\n      }\n    }\n    \n    // A line must be in the following format. If it's not, fail !\n    // title <TAB> date <TAB> body <NEWLINE>\n    int spot = line.indexOf(SEP);\n    if (spot == -1) {\n      throw new RuntimeException(\"line: [\" + line + \"] is in an invalid format !\");\n    }\n    int spot2 = line.indexOf(SEP, 1 + spot);\n    if (spot2 == -1) {\n      throw new RuntimeException(\"line: [\" + line + \"] is in an invalid format !\");\n    }\n    // The date String was written in the format of DateTools.dateToString.\n    docData.clear();\n    docData.setID(myID);\n    docData.setBody(line.substring(1 + spot2, line.length()));\n    docData.setTitle(line.substring(0, spot));\n    docData.setDate(line.substring(1 + spot, spot2));\n    return docData;\n  }\n\n","sourceOld":"  @Override\n  public DocData getNextDocData(DocData docData) throws NoMoreDataException, IOException {\n    final String line;\n    final int myID;\n    \n    synchronized(this) {\n      line = reader.readLine();\n      myID = readCount++;\n      if (line == null) {\n        if (!forever) {\n          throw new NoMoreDataException();\n        }\n        // Reset the file\n        openFile();\n        return getNextDocData(docData);\n      }\n    }\n    \n    // A line must be in the following format. If it's not, fail !\n    // title <TAB> date <TAB> body <NEWLINE>\n    int spot = line.indexOf(SEP);\n    if (spot == -1) {\n      throw new RuntimeException(\"line: [\" + line + \"] is in an invalid format !\");\n    }\n    int spot2 = line.indexOf(SEP, 1 + spot);\n    if (spot2 == -1) {\n      throw new RuntimeException(\"line: [\" + line + \"] is in an invalid format !\");\n    }\n    // The date String was written in the format of DateTools.dateToString.\n    docData.clear();\n    docData.setID(myID);\n    docData.setBody(line.substring(1 + spot2, line.length()));\n    docData.setTitle(line.substring(0, spot));\n    docData.setDate(line.substring(1 + spot, spot2));\n    return docData;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7d8d7a81c29a594c8d28e66f3a9029ed7458af42","date":1300719582,"type":3,"author":"Doron Cohen","isMerge":false,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/LineDocSource#getNextDocData(DocData).mjava","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/LineDocSource#getNextDocData(DocData).mjava","sourceNew":"  @Override\n  public DocData getNextDocData(DocData docData) throws NoMoreDataException, IOException {\n    final String line;\n    final int myID;\n    \n    synchronized(this) {\n      line = reader.readLine();\n      if (line == null) {\n        if (!forever) {\n          throw new NoMoreDataException();\n        }\n        // Reset the file\n        openFile();\n        return getNextDocData(docData);\n      }\n      if (docDataLineReader == null) { // first line ever, one time initialization,\n        docDataLineReader = createDocDataLineReader(line);\n        if (skipHeaderLine) {\n          return getNextDocData(docData);\n        }\n      }\n      // increment IDS only once...\n      myID = readCount++; \n    }\n    \n    // The date String was written in the format of DateTools.dateToString.\n    docData.clear();\n    docData.setID(myID);\n    docDataLineReader.parseLine(docData, line);\n    return docData;\n  }\n\n","sourceOld":"  @Override\n  public DocData getNextDocData(DocData docData) throws NoMoreDataException, IOException {\n    final String line;\n    final int myID;\n    \n    synchronized(this) {\n      line = reader.readLine();\n      myID = readCount++;\n      if (line == null) {\n        if (!forever) {\n          throw new NoMoreDataException();\n        }\n        // Reset the file\n        openFile();\n        return getNextDocData(docData);\n      }\n    }\n    \n    // A line must be in the following format. If it's not, fail !\n    // title <TAB> date <TAB> body <NEWLINE>\n    int spot = line.indexOf(SEP);\n    if (spot == -1) {\n      throw new RuntimeException(\"line: [\" + line + \"] is in an invalid format !\");\n    }\n    int spot2 = line.indexOf(SEP, 1 + spot);\n    if (spot2 == -1) {\n      throw new RuntimeException(\"line: [\" + line + \"] is in an invalid format !\");\n    }\n    // The date String was written in the format of DateTools.dateToString.\n    docData.clear();\n    docData.setID(myID);\n    docData.setBody(line.substring(1 + spot2, line.length()));\n    docData.setTitle(line.substring(0, spot));\n    docData.setDate(line.substring(1 + spot, spot2));\n    return docData;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/LineDocSource#getNextDocData(DocData).mjava","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/LineDocSource#getNextDocData(DocData).mjava","sourceNew":"  @Override\n  public DocData getNextDocData(DocData docData) throws NoMoreDataException, IOException {\n    final String line;\n    final int myID;\n    \n    synchronized(this) {\n      line = reader.readLine();\n      if (line == null) {\n        if (!forever) {\n          throw new NoMoreDataException();\n        }\n        // Reset the file\n        openFile();\n        return getNextDocData(docData);\n      }\n      if (docDataLineReader == null) { // first line ever, one time initialization,\n        docDataLineReader = createDocDataLineReader(line);\n        if (skipHeaderLine) {\n          return getNextDocData(docData);\n        }\n      }\n      // increment IDS only once...\n      myID = readCount++; \n    }\n    \n    // The date String was written in the format of DateTools.dateToString.\n    docData.clear();\n    docData.setID(myID);\n    docDataLineReader.parseLine(docData, line);\n    return docData;\n  }\n\n","sourceOld":"  @Override\n  public DocData getNextDocData(DocData docData) throws NoMoreDataException, IOException {\n    final String line;\n    final int myID;\n    \n    synchronized(this) {\n      line = reader.readLine();\n      myID = readCount++;\n      if (line == null) {\n        if (!forever) {\n          throw new NoMoreDataException();\n        }\n        // Reset the file\n        openFile();\n        return getNextDocData(docData);\n      }\n    }\n    \n    // A line must be in the following format. If it's not, fail !\n    // title <TAB> date <TAB> body <NEWLINE>\n    int spot = line.indexOf(SEP);\n    if (spot == -1) {\n      throw new RuntimeException(\"line: [\" + line + \"] is in an invalid format !\");\n    }\n    int spot2 = line.indexOf(SEP, 1 + spot);\n    if (spot2 == -1) {\n      throw new RuntimeException(\"line: [\" + line + \"] is in an invalid format !\");\n    }\n    // The date String was written in the format of DateTools.dateToString.\n    docData.clear();\n    docData.setID(myID);\n    docData.setBody(line.substring(1 + spot2, line.length()));\n    docData.setTitle(line.substring(0, spot));\n    docData.setDate(line.substring(1 + spot, spot2));\n    return docData;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0ef0193974807e4bddf5432a6b0287fe4d6c9df","date":1301476645,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/LineDocSource#getNextDocData(DocData).mjava","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/LineDocSource#getNextDocData(DocData).mjava","sourceNew":"  @Override\n  public DocData getNextDocData(DocData docData) throws NoMoreDataException, IOException {\n    final String line;\n    final int myID;\n    \n    synchronized(this) {\n      line = reader.readLine();\n      if (line == null) {\n        if (!forever) {\n          throw new NoMoreDataException();\n        }\n        // Reset the file\n        openFile();\n        return getNextDocData(docData);\n      }\n      if (docDataLineReader == null) { // first line ever, one time initialization,\n        docDataLineReader = createDocDataLineReader(line);\n        if (skipHeaderLine) {\n          return getNextDocData(docData);\n        }\n      }\n      // increment IDS only once...\n      myID = readCount++; \n    }\n    \n    // The date String was written in the format of DateTools.dateToString.\n    docData.clear();\n    docData.setID(myID);\n    docDataLineReader.parseLine(docData, line);\n    return docData;\n  }\n\n","sourceOld":"  @Override\n  public DocData getNextDocData(DocData docData) throws NoMoreDataException, IOException {\n    final String line;\n    final int myID;\n    \n    synchronized(this) {\n      line = reader.readLine();\n      myID = readCount++;\n      if (line == null) {\n        if (!forever) {\n          throw new NoMoreDataException();\n        }\n        // Reset the file\n        openFile();\n        return getNextDocData(docData);\n      }\n    }\n    \n    // A line must be in the following format. If it's not, fail !\n    // title <TAB> date <TAB> body <NEWLINE>\n    int spot = line.indexOf(SEP);\n    if (spot == -1) {\n      throw new RuntimeException(\"line: [\" + line + \"] is in an invalid format !\");\n    }\n    int spot2 = line.indexOf(SEP, 1 + spot);\n    if (spot2 == -1) {\n      throw new RuntimeException(\"line: [\" + line + \"] is in an invalid format !\");\n    }\n    // The date String was written in the format of DateTools.dateToString.\n    docData.clear();\n    docData.setID(myID);\n    docData.setBody(line.substring(1 + spot2, line.length()));\n    docData.setTitle(line.substring(0, spot));\n    docData.setDate(line.substring(1 + spot, spot2));\n    return docData;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/LineDocSource#getNextDocData(DocData).mjava","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/LineDocSource#getNextDocData(DocData).mjava","sourceNew":"  @Override\n  public DocData getNextDocData(DocData docData) throws NoMoreDataException, IOException {\n    final String line;\n    final int myID;\n    \n    synchronized(this) {\n      line = reader.readLine();\n      if (line == null) {\n        if (!forever) {\n          throw new NoMoreDataException();\n        }\n        // Reset the file\n        openFile();\n        return getNextDocData(docData);\n      }\n      if (docDataLineReader == null) { // first line ever, one time initialization,\n        docDataLineReader = createDocDataLineReader(line);\n        if (skipHeaderLine) {\n          return getNextDocData(docData);\n        }\n      }\n      // increment IDS only once...\n      myID = readCount++; \n    }\n    \n    // The date String was written in the format of DateTools.dateToString.\n    docData.clear();\n    docData.setID(myID);\n    docDataLineReader.parseLine(docData, line);\n    return docData;\n  }\n\n","sourceOld":"  @Override\n  public DocData getNextDocData(DocData docData) throws NoMoreDataException, IOException {\n    final String line;\n    final int myID;\n    \n    synchronized(this) {\n      line = reader.readLine();\n      if (line == null) {\n        if (!forever) {\n          throw new NoMoreDataException();\n        }\n        // Reset the file\n        openFile();\n        return getNextDocData(docData);\n      }\n      if (docDataLineReader == null) { // first line ever, one time initialization,\n        docDataLineReader = createDocDataLineReader(line);\n        if (skipHeaderLine) {\n          return getNextDocData(docData);\n        }\n      }\n      // increment IDS only once...\n      myID = readCount++; \n    }\n    \n    // The date String was written in the format of DateTools.dateToString.\n    docData.clear();\n    docData.setID(myID);\n    docDataLineReader.parseLine(docData, line);\n    return docData;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["7d8d7a81c29a594c8d28e66f3a9029ed7458af42"],"ecc11368dc265bfdad90214f8bf5da99016ab1e2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["868da859b43505d9d2a023bfeae6dd0c795f5295","7d8d7a81c29a594c8d28e66f3a9029ed7458af42"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["70ad682703b8585f5d0a637efec044d57ec05efb","7d8d7a81c29a594c8d28e66f3a9029ed7458af42"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7d8d7a81c29a594c8d28e66f3a9029ed7458af42":["ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":["d619839baa8ce5503e496b94a9e42ad6f079293f"],"ecc11368dc265bfdad90214f8bf5da99016ab1e2":["70ad682703b8585f5d0a637efec044d57ec05efb","7d8d7a81c29a594c8d28e66f3a9029ed7458af42","868da859b43505d9d2a023bfeae6dd0c795f5295"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":[],"d619839baa8ce5503e496b94a9e42ad6f079293f":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["70ad682703b8585f5d0a637efec044d57ec05efb","ecc11368dc265bfdad90214f8bf5da99016ab1e2","868da859b43505d9d2a023bfeae6dd0c795f5295"],"7d8d7a81c29a594c8d28e66f3a9029ed7458af42":["b89678825b68eccaf09e6ab71675fc0b0af1e099","c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}