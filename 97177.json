{"path":"lucene/analysis/common/src/java/org/apache/lucene/analysis/compound/Lucene43DictionaryCompoundWordTokenFilter#decompose().mjava","commits":[{"id":"379db3ad24c4f0214f30a122265a6d6be003a99d","date":1407537768,"type":0,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/compound/Lucene43DictionaryCompoundWordTokenFilter#decompose().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  protected void decompose() {\n    final int len = termAtt.length();\n    for (int i=0;i<=len-this.minSubwordSize;++i) {\n        CompoundToken longestMatchToken=null;\n        for (int j=this.minSubwordSize;j<=this.maxSubwordSize;++j) {\n            if(i+j>len) {\n                break;\n            }\n            if(dictionary.contains(termAtt.buffer(), i, j)) {\n                if (this.onlyLongestMatch) {\n                   if (longestMatchToken!=null) {\n                     if (longestMatchToken.txt.length()<j) {\n                       longestMatchToken=new CompoundToken(i,j);\n                     }\n                   } else {\n                     longestMatchToken=new CompoundToken(i,j);\n                   }\n                } else {\n                   tokens.add(new CompoundToken(i,j));\n                }\n            } \n        }\n        if (this.onlyLongestMatch && longestMatchToken!=null) {\n          tokens.add(longestMatchToken);\n        }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"71387d8cb6923eb831b17a8b734608ba2e21c653","date":1414126093,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/compound/Lucene43DictionaryCompoundWordTokenFilter#decompose().mjava","sourceNew":null,"sourceOld":"  @Override\n  protected void decompose() {\n    final int len = termAtt.length();\n    for (int i=0;i<=len-this.minSubwordSize;++i) {\n        CompoundToken longestMatchToken=null;\n        for (int j=this.minSubwordSize;j<=this.maxSubwordSize;++j) {\n            if(i+j>len) {\n                break;\n            }\n            if(dictionary.contains(termAtt.buffer(), i, j)) {\n                if (this.onlyLongestMatch) {\n                   if (longestMatchToken!=null) {\n                     if (longestMatchToken.txt.length()<j) {\n                       longestMatchToken=new CompoundToken(i,j);\n                     }\n                   } else {\n                     longestMatchToken=new CompoundToken(i,j);\n                   }\n                } else {\n                   tokens.add(new CompoundToken(i,j));\n                }\n            } \n        }\n        if (this.onlyLongestMatch && longestMatchToken!=null) {\n          tokens.add(longestMatchToken);\n        }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"379db3ad24c4f0214f30a122265a6d6be003a99d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"71387d8cb6923eb831b17a8b734608ba2e21c653":["379db3ad24c4f0214f30a122265a6d6be003a99d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["71387d8cb6923eb831b17a8b734608ba2e21c653"]},"commit2Childs":{"379db3ad24c4f0214f30a122265a6d6be003a99d":["71387d8cb6923eb831b17a8b734608ba2e21c653"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["379db3ad24c4f0214f30a122265a6d6be003a99d"],"71387d8cb6923eb831b17a8b734608ba2e21c653":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}