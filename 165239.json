{"path":"solr/core/src/test/org/apache/solr/uninverting/TestFieldCacheSortRandom.RandomQuery#createWeight(IndexSearcher,boolean,float).mjava","commits":[{"id":"02e175abd2c4c1611c5a9647486ae8ba249a94c1","date":1468327116,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/uninverting/TestFieldCacheSortRandom.RandomQuery#createWeight(IndexSearcher,boolean,float).mjava","pathOld":"solr/core/src/test/org/apache/solr/uninverting/TestFieldCacheSortRandom.RandomQuery#createWeight(IndexSearcher,boolean).mjava","sourceNew":"    @Override\n    public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n      return new ConstantScoreWeight(this, boost) {\n        @Override\n        public Scorer scorer(LeafReaderContext context) throws IOException {\n          Random random = new Random(seed ^ context.docBase);\n          final int maxDoc = context.reader().maxDoc();\n          final NumericDocValues idSource = DocValues.getNumeric(context.reader(), \"id\");\n          assertNotNull(idSource);\n          final FixedBitSet bits = new FixedBitSet(maxDoc);\n          for(int docID=0;docID<maxDoc;docID++) {\n            if (random.nextFloat() <= density) {\n              bits.set(docID);\n              //System.out.println(\"  acc id=\" + idSource.getInt(docID) + \" docID=\" + docID);\n              matchValues.add(docValues.get((int) idSource.get(docID)));\n            }\n          }\n\n          return new ConstantScoreScorer(this, score(), new BitSetIterator(bits, bits.approximateCardinality()));\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n      return new ConstantScoreWeight(this) {\n        @Override\n        public Scorer scorer(LeafReaderContext context) throws IOException {\n          Random random = new Random(seed ^ context.docBase);\n          final int maxDoc = context.reader().maxDoc();\n          final NumericDocValues idSource = DocValues.getNumeric(context.reader(), \"id\");\n          assertNotNull(idSource);\n          final FixedBitSet bits = new FixedBitSet(maxDoc);\n          for(int docID=0;docID<maxDoc;docID++) {\n            if (random.nextFloat() <= density) {\n              bits.set(docID);\n              //System.out.println(\"  acc id=\" + idSource.getInt(docID) + \" docID=\" + docID);\n              matchValues.add(docValues.get((int) idSource.get(docID)));\n            }\n          }\n\n          return new ConstantScoreScorer(this, score(), new BitSetIterator(bits, bits.approximateCardinality()));\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/uninverting/TestFieldCacheSortRandom.RandomQuery#createWeight(IndexSearcher,boolean,float).mjava","pathOld":"solr/core/src/test/org/apache/solr/uninverting/TestFieldCacheSortRandom.RandomQuery#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"    @Override\n    public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n      return new ConstantScoreWeight(this, boost) {\n        @Override\n        public Scorer scorer(LeafReaderContext context) throws IOException {\n          Random random = new Random(seed ^ context.docBase);\n          final int maxDoc = context.reader().maxDoc();\n          final NumericDocValues idSource = DocValues.getNumeric(context.reader(), \"id\");\n          assertNotNull(idSource);\n          final FixedBitSet bits = new FixedBitSet(maxDoc);\n          for(int docID=0;docID<maxDoc;docID++) {\n            if (random.nextFloat() <= density) {\n              bits.set(docID);\n              //System.out.println(\"  acc id=\" + idSource.getInt(docID) + \" docID=\" + docID);\n              assertEquals(docID, idSource.advance(docID));\n              matchValues.add(docValues.get((int) idSource.longValue()));\n            }\n          }\n\n          return new ConstantScoreScorer(this, score(), new BitSetIterator(bits, bits.approximateCardinality()));\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n      return new ConstantScoreWeight(this, boost) {\n        @Override\n        public Scorer scorer(LeafReaderContext context) throws IOException {\n          Random random = new Random(seed ^ context.docBase);\n          final int maxDoc = context.reader().maxDoc();\n          final NumericDocValues idSource = DocValues.getNumeric(context.reader(), \"id\");\n          assertNotNull(idSource);\n          final FixedBitSet bits = new FixedBitSet(maxDoc);\n          for(int docID=0;docID<maxDoc;docID++) {\n            if (random.nextFloat() <= density) {\n              bits.set(docID);\n              //System.out.println(\"  acc id=\" + idSource.getInt(docID) + \" docID=\" + docID);\n              matchValues.add(docValues.get((int) idSource.get(docID)));\n            }\n          }\n\n          return new ConstantScoreScorer(this, score(), new BitSetIterator(bits, bits.approximateCardinality()));\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/uninverting/TestFieldCacheSortRandom.RandomQuery#createWeight(IndexSearcher,boolean,float).mjava","pathOld":"solr/core/src/test/org/apache/solr/uninverting/TestFieldCacheSortRandom.RandomQuery#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"    @Override\n    public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n      return new ConstantScoreWeight(this, boost) {\n        @Override\n        public Scorer scorer(LeafReaderContext context) throws IOException {\n          Random random = new Random(seed ^ context.docBase);\n          final int maxDoc = context.reader().maxDoc();\n          final NumericDocValues idSource = DocValues.getNumeric(context.reader(), \"id\");\n          assertNotNull(idSource);\n          final FixedBitSet bits = new FixedBitSet(maxDoc);\n          for(int docID=0;docID<maxDoc;docID++) {\n            if (random.nextFloat() <= density) {\n              bits.set(docID);\n              //System.out.println(\"  acc id=\" + idSource.getInt(docID) + \" docID=\" + docID);\n              assertEquals(docID, idSource.advance(docID));\n              matchValues.add(docValues.get((int) idSource.longValue()));\n            }\n          }\n\n          return new ConstantScoreScorer(this, score(), new BitSetIterator(bits, bits.approximateCardinality()));\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n      return new ConstantScoreWeight(this, boost) {\n        @Override\n        public Scorer scorer(LeafReaderContext context) throws IOException {\n          Random random = new Random(seed ^ context.docBase);\n          final int maxDoc = context.reader().maxDoc();\n          final NumericDocValues idSource = DocValues.getNumeric(context.reader(), \"id\");\n          assertNotNull(idSource);\n          final FixedBitSet bits = new FixedBitSet(maxDoc);\n          for(int docID=0;docID<maxDoc;docID++) {\n            if (random.nextFloat() <= density) {\n              bits.set(docID);\n              //System.out.println(\"  acc id=\" + idSource.getInt(docID) + \" docID=\" + docID);\n              matchValues.add(docValues.get((int) idSource.get(docID)));\n            }\n          }\n\n          return new ConstantScoreScorer(this, score(), new BitSetIterator(bits, bits.approximateCardinality()));\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/uninverting/TestFieldCacheSortRandom.RandomQuery#createWeight(IndexSearcher,boolean,float).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n      return new ConstantScoreWeight(this, boost) {\n        @Override\n        public Scorer scorer(LeafReaderContext context) throws IOException {\n          Random random = new Random(seed ^ context.docBase);\n          final int maxDoc = context.reader().maxDoc();\n          final NumericDocValues idSource = DocValues.getNumeric(context.reader(), \"id\");\n          assertNotNull(idSource);\n          final FixedBitSet bits = new FixedBitSet(maxDoc);\n          for(int docID=0;docID<maxDoc;docID++) {\n            if (random.nextFloat() <= density) {\n              bits.set(docID);\n              //System.out.println(\"  acc id=\" + idSource.getInt(docID) + \" docID=\" + docID);\n              assertEquals(docID, idSource.advance(docID));\n              matchValues.add(docValues.get((int) idSource.longValue()));\n            }\n          }\n\n          return new ConstantScoreScorer(this, score(), new BitSetIterator(bits, bits.approximateCardinality()));\n        }\n      };\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"706a7a3396c030cc66dda92a0492eb492131c4c0","date":1509705614,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/uninverting/TestFieldCacheSortRandom.RandomQuery#createWeight(IndexSearcher,boolean,float).mjava","pathOld":"solr/core/src/test/org/apache/solr/uninverting/TestFieldCacheSortRandom.RandomQuery#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"    @Override\n    public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n      return new ConstantScoreWeight(this, boost) {\n        @Override\n        public Scorer scorer(LeafReaderContext context) throws IOException {\n          Random random = new Random(seed ^ context.docBase);\n          final int maxDoc = context.reader().maxDoc();\n          final NumericDocValues idSource = DocValues.getNumeric(context.reader(), \"id\");\n          assertNotNull(idSource);\n          final FixedBitSet bits = new FixedBitSet(maxDoc);\n          for(int docID=0;docID<maxDoc;docID++) {\n            if (random.nextFloat() <= density) {\n              bits.set(docID);\n              //System.out.println(\"  acc id=\" + idSource.getInt(docID) + \" docID=\" + docID);\n              assertEquals(docID, idSource.advance(docID));\n              matchValues.add(docValues.get((int) idSource.longValue()));\n            }\n          }\n\n          return new ConstantScoreScorer(this, score(), new BitSetIterator(bits, bits.approximateCardinality()));\n        }\n\n        @Override\n        public IndexReader.CacheHelper getCacheHelper(LeafReaderContext context) {\n          return context.reader().getCoreCacheHelper();\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n      return new ConstantScoreWeight(this, boost) {\n        @Override\n        public Scorer scorer(LeafReaderContext context) throws IOException {\n          Random random = new Random(seed ^ context.docBase);\n          final int maxDoc = context.reader().maxDoc();\n          final NumericDocValues idSource = DocValues.getNumeric(context.reader(), \"id\");\n          assertNotNull(idSource);\n          final FixedBitSet bits = new FixedBitSet(maxDoc);\n          for(int docID=0;docID<maxDoc;docID++) {\n            if (random.nextFloat() <= density) {\n              bits.set(docID);\n              //System.out.println(\"  acc id=\" + idSource.getInt(docID) + \" docID=\" + docID);\n              assertEquals(docID, idSource.advance(docID));\n              matchValues.add(docValues.get((int) idSource.longValue()));\n            }\n          }\n\n          return new ConstantScoreScorer(this, score(), new BitSetIterator(bits, bits.approximateCardinality()));\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d523b8189b211dd1630166aa77b8c88bb48b3fcc","date":1510144168,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/uninverting/TestFieldCacheSortRandom.RandomQuery#createWeight(IndexSearcher,boolean,float).mjava","pathOld":"solr/core/src/test/org/apache/solr/uninverting/TestFieldCacheSortRandom.RandomQuery#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"    @Override\n    public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n      return new ConstantScoreWeight(this, boost) {\n        @Override\n        public Scorer scorer(LeafReaderContext context) throws IOException {\n          Random random = new Random(seed ^ context.docBase);\n          final int maxDoc = context.reader().maxDoc();\n          final NumericDocValues idSource = DocValues.getNumeric(context.reader(), \"id\");\n          assertNotNull(idSource);\n          final FixedBitSet bits = new FixedBitSet(maxDoc);\n          for(int docID=0;docID<maxDoc;docID++) {\n            if (random.nextFloat() <= density) {\n              bits.set(docID);\n              //System.out.println(\"  acc id=\" + idSource.getInt(docID) + \" docID=\" + docID);\n              assertEquals(docID, idSource.advance(docID));\n              matchValues.add(docValues.get((int) idSource.longValue()));\n            }\n          }\n\n          return new ConstantScoreScorer(this, score(), new BitSetIterator(bits, bits.approximateCardinality()));\n        }\n\n        @Override\n        public IndexReader.CacheHelper getCacheHelper(LeafReaderContext context) {\n          return context.reader().getCoreCacheHelper();\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n      return new ConstantScoreWeight(this, boost) {\n        @Override\n        public Scorer scorer(LeafReaderContext context) throws IOException {\n          Random random = new Random(seed ^ context.docBase);\n          final int maxDoc = context.reader().maxDoc();\n          final NumericDocValues idSource = DocValues.getNumeric(context.reader(), \"id\");\n          assertNotNull(idSource);\n          final FixedBitSet bits = new FixedBitSet(maxDoc);\n          for(int docID=0;docID<maxDoc;docID++) {\n            if (random.nextFloat() <= density) {\n              bits.set(docID);\n              //System.out.println(\"  acc id=\" + idSource.getInt(docID) + \" docID=\" + docID);\n              assertEquals(docID, idSource.advance(docID));\n              matchValues.add(docValues.get((int) idSource.longValue()));\n            }\n          }\n\n          return new ConstantScoreScorer(this, score(), new BitSetIterator(bits, bits.approximateCardinality()));\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"da1460d7a5dea2658e7b8e4f6e632e53ade440ac","date":1510316270,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/uninverting/TestFieldCacheSortRandom.RandomQuery#createWeight(IndexSearcher,boolean,float).mjava","pathOld":"solr/core/src/test/org/apache/solr/uninverting/TestFieldCacheSortRandom.RandomQuery#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"    @Override\n    public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n      return new ConstantScoreWeight(this, boost) {\n        @Override\n        public Scorer scorer(LeafReaderContext context) throws IOException {\n          Random random = new Random(seed ^ context.docBase);\n          final int maxDoc = context.reader().maxDoc();\n          final NumericDocValues idSource = DocValues.getNumeric(context.reader(), \"id\");\n          assertNotNull(idSource);\n          final FixedBitSet bits = new FixedBitSet(maxDoc);\n          for(int docID=0;docID<maxDoc;docID++) {\n            if (random.nextFloat() <= density) {\n              bits.set(docID);\n              //System.out.println(\"  acc id=\" + idSource.getInt(docID) + \" docID=\" + docID);\n              assertEquals(docID, idSource.advance(docID));\n              matchValues.add(docValues.get((int) idSource.longValue()));\n            }\n          }\n\n          return new ConstantScoreScorer(this, score(), new BitSetIterator(bits, bits.approximateCardinality()));\n        }\n\n        @Override\n        public boolean isCacheable(LeafReaderContext ctx) {\n          return true;\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n      return new ConstantScoreWeight(this, boost) {\n        @Override\n        public Scorer scorer(LeafReaderContext context) throws IOException {\n          Random random = new Random(seed ^ context.docBase);\n          final int maxDoc = context.reader().maxDoc();\n          final NumericDocValues idSource = DocValues.getNumeric(context.reader(), \"id\");\n          assertNotNull(idSource);\n          final FixedBitSet bits = new FixedBitSet(maxDoc);\n          for(int docID=0;docID<maxDoc;docID++) {\n            if (random.nextFloat() <= density) {\n              bits.set(docID);\n              //System.out.println(\"  acc id=\" + idSource.getInt(docID) + \" docID=\" + docID);\n              assertEquals(docID, idSource.advance(docID));\n              matchValues.add(docValues.get((int) idSource.longValue()));\n            }\n          }\n\n          return new ConstantScoreScorer(this, score(), new BitSetIterator(bits, bits.approximateCardinality()));\n        }\n\n        @Override\n        public IndexReader.CacheHelper getCacheHelper(LeafReaderContext context) {\n          return context.reader().getCoreCacheHelper();\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9fc47cb7b4346802411bb432f501ed0673d7119e","date":1512640179,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/uninverting/TestFieldCacheSortRandom.RandomQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","pathOld":"solr/core/src/test/org/apache/solr/uninverting/TestFieldCacheSortRandom.RandomQuery#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"    @Override\n    public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n      return new ConstantScoreWeight(this, boost) {\n        @Override\n        public Scorer scorer(LeafReaderContext context) throws IOException {\n          Random random = new Random(seed ^ context.docBase);\n          final int maxDoc = context.reader().maxDoc();\n          final NumericDocValues idSource = DocValues.getNumeric(context.reader(), \"id\");\n          assertNotNull(idSource);\n          final FixedBitSet bits = new FixedBitSet(maxDoc);\n          for(int docID=0;docID<maxDoc;docID++) {\n            if (random.nextFloat() <= density) {\n              bits.set(docID);\n              //System.out.println(\"  acc id=\" + idSource.getInt(docID) + \" docID=\" + docID);\n              assertEquals(docID, idSource.advance(docID));\n              matchValues.add(docValues.get((int) idSource.longValue()));\n            }\n          }\n\n          return new ConstantScoreScorer(this, score(), new BitSetIterator(bits, bits.approximateCardinality()));\n        }\n\n        @Override\n        public boolean isCacheable(LeafReaderContext ctx) {\n          return true;\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n      return new ConstantScoreWeight(this, boost) {\n        @Override\n        public Scorer scorer(LeafReaderContext context) throws IOException {\n          Random random = new Random(seed ^ context.docBase);\n          final int maxDoc = context.reader().maxDoc();\n          final NumericDocValues idSource = DocValues.getNumeric(context.reader(), \"id\");\n          assertNotNull(idSource);\n          final FixedBitSet bits = new FixedBitSet(maxDoc);\n          for(int docID=0;docID<maxDoc;docID++) {\n            if (random.nextFloat() <= density) {\n              bits.set(docID);\n              //System.out.println(\"  acc id=\" + idSource.getInt(docID) + \" docID=\" + docID);\n              assertEquals(docID, idSource.advance(docID));\n              matchValues.add(docValues.get((int) idSource.longValue()));\n            }\n          }\n\n          return new ConstantScoreScorer(this, score(), new BitSetIterator(bits, bits.approximateCardinality()));\n        }\n\n        @Override\n        public boolean isCacheable(LeafReaderContext ctx) {\n          return true;\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"417142ff08fda9cf0b72d5133e63097a166c6458","date":1512729693,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/uninverting/TestFieldCacheSortRandom.RandomQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","pathOld":"solr/core/src/test/org/apache/solr/uninverting/TestFieldCacheSortRandom.RandomQuery#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"    @Override\n    public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n      return new ConstantScoreWeight(this, boost) {\n        @Override\n        public Scorer scorer(LeafReaderContext context) throws IOException {\n          Random random = new Random(seed ^ context.docBase);\n          final int maxDoc = context.reader().maxDoc();\n          final NumericDocValues idSource = DocValues.getNumeric(context.reader(), \"id\");\n          assertNotNull(idSource);\n          final FixedBitSet bits = new FixedBitSet(maxDoc);\n          for(int docID=0;docID<maxDoc;docID++) {\n            if (random.nextFloat() <= density) {\n              bits.set(docID);\n              //System.out.println(\"  acc id=\" + idSource.getInt(docID) + \" docID=\" + docID);\n              assertEquals(docID, idSource.advance(docID));\n              matchValues.add(docValues.get((int) idSource.longValue()));\n            }\n          }\n\n          return new ConstantScoreScorer(this, score(), new BitSetIterator(bits, bits.approximateCardinality()));\n        }\n\n        @Override\n        public boolean isCacheable(LeafReaderContext ctx) {\n          return true;\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n      return new ConstantScoreWeight(this, boost) {\n        @Override\n        public Scorer scorer(LeafReaderContext context) throws IOException {\n          Random random = new Random(seed ^ context.docBase);\n          final int maxDoc = context.reader().maxDoc();\n          final NumericDocValues idSource = DocValues.getNumeric(context.reader(), \"id\");\n          assertNotNull(idSource);\n          final FixedBitSet bits = new FixedBitSet(maxDoc);\n          for(int docID=0;docID<maxDoc;docID++) {\n            if (random.nextFloat() <= density) {\n              bits.set(docID);\n              //System.out.println(\"  acc id=\" + idSource.getInt(docID) + \" docID=\" + docID);\n              assertEquals(docID, idSource.advance(docID));\n              matchValues.add(docValues.get((int) idSource.longValue()));\n            }\n          }\n\n          return new ConstantScoreScorer(this, score(), new BitSetIterator(bits, bits.approximateCardinality()));\n        }\n\n        @Override\n        public boolean isCacheable(LeafReaderContext ctx) {\n          return true;\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"706a7a3396c030cc66dda92a0492eb492131c4c0":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"da1460d7a5dea2658e7b8e4f6e632e53ade440ac":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","706a7a3396c030cc66dda92a0492eb492131c4c0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["02e175abd2c4c1611c5a9647486ae8ba249a94c1","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["02e175abd2c4c1611c5a9647486ae8ba249a94c1"],"02e175abd2c4c1611c5a9647486ae8ba249a94c1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["da1460d7a5dea2658e7b8e4f6e632e53ade440ac"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["417142ff08fda9cf0b72d5133e63097a166c6458"],"417142ff08fda9cf0b72d5133e63097a166c6458":["da1460d7a5dea2658e7b8e4f6e632e53ade440ac","9fc47cb7b4346802411bb432f501ed0673d7119e"]},"commit2Childs":{"706a7a3396c030cc66dda92a0492eb492131c4c0":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"da1460d7a5dea2658e7b8e4f6e632e53ade440ac":["9fc47cb7b4346802411bb432f501ed0673d7119e","417142ff08fda9cf0b72d5133e63097a166c6458"],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["da1460d7a5dea2658e7b8e4f6e632e53ade440ac"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["706a7a3396c030cc66dda92a0492eb492131c4c0","d523b8189b211dd1630166aa77b8c88bb48b3fcc","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["02e175abd2c4c1611c5a9647486ae8ba249a94c1","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"02e175abd2c4c1611c5a9647486ae8ba249a94c1":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["417142ff08fda9cf0b72d5133e63097a166c6458"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"417142ff08fda9cf0b72d5133e63097a166c6458":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}