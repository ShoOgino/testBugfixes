{"path":"src/java/org/apache/solr/handler/component/TermVectorComponent#distributedProcess(ResponseBuilder).mjava","commits":[{"id":"3a04bdb295a363a052bdc5a2fcd6e8ce977aa51c","date":1224776958,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/component/TermVectorComponent#distributedProcess(ResponseBuilder).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public int distributedProcess(ResponseBuilder rb) throws IOException {\n    int result = ResponseBuilder.STAGE_DONE;\n    if (rb.stage == ResponseBuilder.STAGE_GET_FIELDS) {\n      //Go ask each shard for it's vectors\n      // for each shard, collect the documents for that shard.\n      HashMap<String, Collection<ShardDoc>> shardMap = new HashMap<String, Collection<ShardDoc>>();\n      for (ShardDoc sdoc : rb.resultIds.values()) {\n        Collection<ShardDoc> shardDocs = shardMap.get(sdoc.shard);\n        if (shardDocs == null) {\n          shardDocs = new ArrayList<ShardDoc>();\n          shardMap.put(sdoc.shard, shardDocs);\n        }\n        shardDocs.add(sdoc);\n      }\n      // Now create a request for each shard to retrieve the stored fields\n      for (Collection<ShardDoc> shardDocs : shardMap.values()) {\n        ShardRequest sreq = new ShardRequest();\n        sreq.purpose = ShardRequest.PURPOSE_GET_FIELDS;\n\n        sreq.shards = new String[]{shardDocs.iterator().next().shard};\n\n        sreq.params = new ModifiableSolrParams();\n\n        // add original params\n        sreq.params.add(rb.req.getParams());\n        sreq.params.remove(CommonParams.Q);//remove the query\n        ArrayList<String> ids = new ArrayList<String>(shardDocs.size());\n        for (ShardDoc shardDoc : shardDocs) {\n          ids.add(shardDoc.id.toString());\n        }\n        sreq.params.add(TermVectorParams.DOC_IDS, StrUtils.join(ids, ','));\n\n        rb.addRequest(this, sreq);\n      }\n      result = ResponseBuilder.STAGE_DONE;\n    }\n    return result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/component/TermVectorComponent#distributedProcess(ResponseBuilder).mjava","pathOld":"src/java/org/apache/solr/handler/component/TermVectorComponent#distributedProcess(ResponseBuilder).mjava","sourceNew":"  @Override\n  public int distributedProcess(ResponseBuilder rb) throws IOException {\n    int result = ResponseBuilder.STAGE_DONE;\n    if (rb.stage == ResponseBuilder.STAGE_GET_FIELDS) {\n      //Go ask each shard for it's vectors\n      // for each shard, collect the documents for that shard.\n      HashMap<String, Collection<ShardDoc>> shardMap = new HashMap<String, Collection<ShardDoc>>();\n      for (ShardDoc sdoc : rb.resultIds.values()) {\n        Collection<ShardDoc> shardDocs = shardMap.get(sdoc.shard);\n        if (shardDocs == null) {\n          shardDocs = new ArrayList<ShardDoc>();\n          shardMap.put(sdoc.shard, shardDocs);\n        }\n        shardDocs.add(sdoc);\n      }\n      // Now create a request for each shard to retrieve the stored fields\n      for (Collection<ShardDoc> shardDocs : shardMap.values()) {\n        ShardRequest sreq = new ShardRequest();\n        sreq.purpose = ShardRequest.PURPOSE_GET_FIELDS;\n\n        sreq.shards = new String[]{shardDocs.iterator().next().shard};\n\n        sreq.params = new ModifiableSolrParams();\n\n        // add original params\n        sreq.params.add(rb.req.getParams());\n        sreq.params.remove(CommonParams.Q);//remove the query\n        ArrayList<String> ids = new ArrayList<String>(shardDocs.size());\n        for (ShardDoc shardDoc : shardDocs) {\n          ids.add(shardDoc.id.toString());\n        }\n        sreq.params.add(TermVectorParams.DOC_IDS, StrUtils.join(ids, ','));\n\n        rb.addRequest(this, sreq);\n      }\n      result = ResponseBuilder.STAGE_DONE;\n    }\n    return result;\n  }\n\n","sourceOld":"  @Override\n  public int distributedProcess(ResponseBuilder rb) throws IOException {\n    int result = ResponseBuilder.STAGE_DONE;\n    if (rb.stage == ResponseBuilder.STAGE_GET_FIELDS) {\n      //Go ask each shard for it's vectors\n      // for each shard, collect the documents for that shard.\n      HashMap<String, Collection<ShardDoc>> shardMap = new HashMap<String, Collection<ShardDoc>>();\n      for (ShardDoc sdoc : rb.resultIds.values()) {\n        Collection<ShardDoc> shardDocs = shardMap.get(sdoc.shard);\n        if (shardDocs == null) {\n          shardDocs = new ArrayList<ShardDoc>();\n          shardMap.put(sdoc.shard, shardDocs);\n        }\n        shardDocs.add(sdoc);\n      }\n      // Now create a request for each shard to retrieve the stored fields\n      for (Collection<ShardDoc> shardDocs : shardMap.values()) {\n        ShardRequest sreq = new ShardRequest();\n        sreq.purpose = ShardRequest.PURPOSE_GET_FIELDS;\n\n        sreq.shards = new String[]{shardDocs.iterator().next().shard};\n\n        sreq.params = new ModifiableSolrParams();\n\n        // add original params\n        sreq.params.add(rb.req.getParams());\n        sreq.params.remove(CommonParams.Q);//remove the query\n        ArrayList<String> ids = new ArrayList<String>(shardDocs.size());\n        for (ShardDoc shardDoc : shardDocs) {\n          ids.add(shardDoc.id.toString());\n        }\n        sreq.params.add(TermVectorParams.DOC_IDS, StrUtils.join(ids, ','));\n\n        rb.addRequest(this, sreq);\n      }\n      result = ResponseBuilder.STAGE_DONE;\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["3a04bdb295a363a052bdc5a2fcd6e8ce977aa51c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a04bdb295a363a052bdc5a2fcd6e8ce977aa51c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["3a04bdb295a363a052bdc5a2fcd6e8ce977aa51c"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"3a04bdb295a363a052bdc5a2fcd6e8ce977aa51c":["ad94625fb8d088209f46650c8097196fec67f00c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}