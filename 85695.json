{"path":"src/java/org/apache/solr/common/SolrDocument#setField(String,Object).mjava","commits":[{"id":"3abdd666f12a1d3197de9c612ea8e83cfbb6e7bb","date":1181791578,"type":1,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/common/SolrDocument#setField(String,Object).mjava","pathOld":"src/java/org/apache/solr/util/SolrDocument#setField(String,Object).mjava","sourceNew":"  /**\n   * Set a field with the given object.  If the object is an Array or Iterable, it will \n   * set multiple fields with the included contents.  This will replace any existing \n   * field with the given name\n   */\n  public void setField(String name, Object value) \n  {\n    Collection<Object> existing = _fields.get( name );\n    if( existing != null ) {\n      existing.clear();\n    }\n    this.addField(name, value);\n  }\n\n","sourceOld":"  /**\n   * Set a field with the given object.  If the object is an Array or Iterable, it will \n   * set multiple fields with the included contents.  This will replace any existing \n   * field with the given name\n   */\n  public void setField(String name, Object value) \n  {\n    Collection<Object> existing = _fields.get( name );\n    if( existing != null ) {\n      existing.clear();\n    }\n    this.addField(name, value);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ebb24ab555aab7c4dd5d2264c06a4f19fb217913","date":1183353562,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/common/SolrDocument#setField(String,Object).mjava","pathOld":"src/java/org/apache/solr/common/SolrDocument#setField(String,Object).mjava","sourceNew":"  /**\n   * Set a field with the given object.  If the object is an Array, it will \n   * set multiple fields with the included contents.  This will replace any existing \n   * field with the given name\n   */\n  @SuppressWarnings(\"unchecked\")\n  public void setField(String name, Object value) \n  {\n    if( value instanceof Object[] ) {\n      Object[] arr = (Object[])value;\n      Collection<Object> c = new ArrayList<Object>( arr.length );\n      for( Object o : arr ) {\n        c.add( o );\n      }\n      value = c;\n    }\n    _fields.put(name, value);\n  }\n\n","sourceOld":"  /**\n   * Set a field with the given object.  If the object is an Array or Iterable, it will \n   * set multiple fields with the included contents.  This will replace any existing \n   * field with the given name\n   */\n  public void setField(String name, Object value) \n  {\n    Collection<Object> existing = _fields.get( name );\n    if( existing != null ) {\n      existing.clear();\n    }\n    this.addField(name, value);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a07a53434512d96d1e93e3e4a2ea16c202ec3e7e","date":1212696628,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/common/SolrDocument#setField(String,Object).mjava","pathOld":"src/java/org/apache/solr/common/SolrDocument#setField(String,Object).mjava","sourceNew":"  /**\n   * Set a field with the given object.  If the object is an Array, it will \n   * set multiple fields with the included contents.  This will replace any existing \n   * field with the given name\n   */\n  @SuppressWarnings(\"unchecked\")\n  public void setField(String name, Object value) \n  {\n    if( value instanceof Object[] ) {\n      value = Arrays.asList( (Object[])value );\n    }\n    else if( value instanceof Collection ) {\n      // nothing\n    }\n    else if( value instanceof Iterable ) {\n      ArrayList<Object> lst = new ArrayList<Object>();\n      for( Object o : (Iterable)value ) {\n        lst.add( o );\n      }\n      value = lst;\n    }\n    _fields.put(name, value);\n  }\n\n","sourceOld":"  /**\n   * Set a field with the given object.  If the object is an Array, it will \n   * set multiple fields with the included contents.  This will replace any existing \n   * field with the given name\n   */\n  @SuppressWarnings(\"unchecked\")\n  public void setField(String name, Object value) \n  {\n    if( value instanceof Object[] ) {\n      Object[] arr = (Object[])value;\n      Collection<Object> c = new ArrayList<Object>( arr.length );\n      for( Object o : arr ) {\n        c.add( o );\n      }\n      value = c;\n    }\n    _fields.put(name, value);\n  }\n\n","bugFix":null,"bugIntro":["284d163d212ead7122979e72131d10e2ccd96c38"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"284d163d212ead7122979e72131d10e2ccd96c38","date":1215810736,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/common/SolrDocument#setField(String,Object).mjava","pathOld":"src/java/org/apache/solr/common/SolrDocument#setField(String,Object).mjava","sourceNew":"  /**\n   * Set a field with the given object.  If the object is an Array, it will \n   * set multiple fields with the included contents.  This will replace any existing \n   * field with the given name\n   */\n  @SuppressWarnings(\"unchecked\")\n  public void setField(String name, Object value) \n  {\n    if( value instanceof Object[] ) {\n      value = new ArrayList(Arrays.asList( (Object[])value ));\n    }\n    else if( value instanceof Collection ) {\n      // nothing\n    }\n    else if( value instanceof Iterable ) {\n      ArrayList<Object> lst = new ArrayList<Object>();\n      for( Object o : (Iterable)value ) {\n        lst.add( o );\n      }\n      value = lst;\n    }\n    _fields.put(name, value);\n  }\n\n","sourceOld":"  /**\n   * Set a field with the given object.  If the object is an Array, it will \n   * set multiple fields with the included contents.  This will replace any existing \n   * field with the given name\n   */\n  @SuppressWarnings(\"unchecked\")\n  public void setField(String name, Object value) \n  {\n    if( value instanceof Object[] ) {\n      value = Arrays.asList( (Object[])value );\n    }\n    else if( value instanceof Collection ) {\n      // nothing\n    }\n    else if( value instanceof Iterable ) {\n      ArrayList<Object> lst = new ArrayList<Object>();\n      for( Object o : (Iterable)value ) {\n        lst.add( o );\n      }\n      value = lst;\n    }\n    _fields.put(name, value);\n  }\n\n","bugFix":["a07a53434512d96d1e93e3e4a2ea16c202ec3e7e"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e3602d5eab954caecc726ab136ad580ac1ceb917","date":1228676831,"type":5,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/common/org/apache/solr/common/SolrDocument#setField(String,Object).mjava","pathOld":"src/java/org/apache/solr/common/SolrDocument#setField(String,Object).mjava","sourceNew":"  /**\n   * Set a field with the given object.  If the object is an Array, it will \n   * set multiple fields with the included contents.  This will replace any existing \n   * field with the given name\n   */\n  @SuppressWarnings(\"unchecked\")\n  public void setField(String name, Object value) \n  {\n    if( value instanceof Object[] ) {\n      value = new ArrayList(Arrays.asList( (Object[])value ));\n    }\n    else if( value instanceof Collection ) {\n      // nothing\n    }\n    else if( value instanceof Iterable ) {\n      ArrayList<Object> lst = new ArrayList<Object>();\n      for( Object o : (Iterable)value ) {\n        lst.add( o );\n      }\n      value = lst;\n    }\n    _fields.put(name, value);\n  }\n\n","sourceOld":"  /**\n   * Set a field with the given object.  If the object is an Array, it will \n   * set multiple fields with the included contents.  This will replace any existing \n   * field with the given name\n   */\n  @SuppressWarnings(\"unchecked\")\n  public void setField(String name, Object value) \n  {\n    if( value instanceof Object[] ) {\n      value = new ArrayList(Arrays.asList( (Object[])value ));\n    }\n    else if( value instanceof Collection ) {\n      // nothing\n    }\n    else if( value instanceof Iterable ) {\n      ArrayList<Object> lst = new ArrayList<Object>();\n      for( Object o : (Iterable)value ) {\n        lst.add( o );\n      }\n      value = lst;\n    }\n    _fields.put(name, value);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e3602d5eab954caecc726ab136ad580ac1ceb917":["284d163d212ead7122979e72131d10e2ccd96c38"],"3abdd666f12a1d3197de9c612ea8e83cfbb6e7bb":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a07a53434512d96d1e93e3e4a2ea16c202ec3e7e":["ebb24ab555aab7c4dd5d2264c06a4f19fb217913"],"284d163d212ead7122979e72131d10e2ccd96c38":["a07a53434512d96d1e93e3e4a2ea16c202ec3e7e"],"ebb24ab555aab7c4dd5d2264c06a4f19fb217913":["3abdd666f12a1d3197de9c612ea8e83cfbb6e7bb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"e3602d5eab954caecc726ab136ad580ac1ceb917":[],"3abdd666f12a1d3197de9c612ea8e83cfbb6e7bb":["ebb24ab555aab7c4dd5d2264c06a4f19fb217913"],"a07a53434512d96d1e93e3e4a2ea16c202ec3e7e":["284d163d212ead7122979e72131d10e2ccd96c38"],"284d163d212ead7122979e72131d10e2ccd96c38":["e3602d5eab954caecc726ab136ad580ac1ceb917"],"ebb24ab555aab7c4dd5d2264c06a4f19fb217913":["a07a53434512d96d1e93e3e4a2ea16c202ec3e7e"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["3abdd666f12a1d3197de9c612ea8e83cfbb6e7bb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e3602d5eab954caecc726ab136ad580ac1ceb917","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}