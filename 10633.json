{"path":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterOnJRECrash#crashJRE().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterOnJRECrash#crashJRE().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterOnJRECrash#crashJRE().mjava","sourceNew":"  /**\n   * currently, this only works/tested on Sun and IBM.\n   */\n  public void crashJRE() {\n    try {\n      Class<?> clazz = Class.forName(\"sun.misc.Unsafe\");\n      // we should use getUnsafe instead, harmony implements it, etc.\n      Field field = clazz.getDeclaredField(\"theUnsafe\");\n      field.setAccessible(true);\n      Object o = field.get(null);\n      Method m = clazz.getMethod(\"putAddress\", long.class, long.class);\n      m.invoke(o, 0L, 0L);\n    } catch (Exception e) { e.printStackTrace(); }\n    fail();\n  }\n\n","sourceOld":"  /**\n   * currently, this only works/tested on Sun and IBM.\n   */\n  public void crashJRE() {\n    try {\n      Class<?> clazz = Class.forName(\"sun.misc.Unsafe\");\n      // we should use getUnsafe instead, harmony implements it, etc.\n      Field field = clazz.getDeclaredField(\"theUnsafe\");\n      field.setAccessible(true);\n      Object o = field.get(null);\n      Method m = clazz.getMethod(\"putAddress\", long.class, long.class);\n      m.invoke(o, 0L, 0L);\n    } catch (Exception e) { e.printStackTrace(); }\n    fail();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db62e3d5cd46d053fa0b9ac863a5a6dbe1c9498b","date":1368612521,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterOnJRECrash#crashJRE().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterOnJRECrash#crashJRE().mjava","sourceNew":"  /**\n   * currently, this only works/tested on Sun and IBM.\n   */\n  public void crashJRE() {\n    final String vendor = Constants.JAVA_VENDOR;\n    final boolean supportsUnsafeNpeDereference = \n        vendor.startsWith(\"Oracle\") || \n        vendor.startsWith(\"Sun\") || \n        vendor.startsWith(\"Apple\");\n\n      try {\n        if (supportsUnsafeNpeDereference) {\n          try {\n            Class<?> clazz = Class.forName(\"sun.misc.Unsafe\");\n            Field field = clazz.getDeclaredField(\"theUnsafe\");\n            field.setAccessible(true);\n            Object o = field.get(null);\n            Method m = clazz.getMethod(\"putAddress\", long.class, long.class);\n            m.invoke(o, 0L, 0L);\n          } catch (Throwable e) {\n            System.out.println(\"Couldn't kill the JVM via Unsafe.\");\n            e.printStackTrace(System.out); \n          }\n        }\n\n        // Fallback attempt to Runtime.halt();\n        Runtime.getRuntime().halt(-1);\n      } catch (Exception e) {\n        System.out.println(\"Couldn't kill the JVM.\");\n        e.printStackTrace(System.out); \n      }\n\n      // We couldn't get the JVM to crash for some reason.\n      fail();\n  }\n\n","sourceOld":"  /**\n   * currently, this only works/tested on Sun and IBM.\n   */\n  public void crashJRE() {\n    try {\n      Class<?> clazz = Class.forName(\"sun.misc.Unsafe\");\n      // we should use getUnsafe instead, harmony implements it, etc.\n      Field field = clazz.getDeclaredField(\"theUnsafe\");\n      field.setAccessible(true);\n      Object o = field.get(null);\n      Method m = clazz.getMethod(\"putAddress\", long.class, long.class);\n      m.invoke(o, 0L, 0L);\n    } catch (Exception e) { e.printStackTrace(); }\n    fail();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4383b91725e5b335d0a9d5f24b122b813dddd0cc","date":1442106431,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterOnJRECrash#crashJRE().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterOnJRECrash#crashJRE().mjava","sourceNew":"  /**\n   * currently, this only works/tested on Sun and IBM.\n   */\n  @SuppressForbidden(reason = \"We need Unsafe to actually crush :-)\")\n  public void crashJRE() {\n    final String vendor = Constants.JAVA_VENDOR;\n    final boolean supportsUnsafeNpeDereference = \n        vendor.startsWith(\"Oracle\") || \n        vendor.startsWith(\"Sun\") || \n        vendor.startsWith(\"Apple\");\n\n      try {\n        if (supportsUnsafeNpeDereference) {\n          try {\n            Class<?> clazz = Class.forName(\"sun.misc.Unsafe\");\n            Field field = clazz.getDeclaredField(\"theUnsafe\");\n            field.setAccessible(true);\n            Object o = field.get(null);\n            Method m = clazz.getMethod(\"putAddress\", long.class, long.class);\n            m.invoke(o, 0L, 0L);\n          } catch (Throwable e) {\n            System.out.println(\"Couldn't kill the JVM via Unsafe.\");\n            e.printStackTrace(System.out); \n          }\n        }\n\n        // Fallback attempt to Runtime.halt();\n        Runtime.getRuntime().halt(-1);\n      } catch (Exception e) {\n        System.out.println(\"Couldn't kill the JVM.\");\n        e.printStackTrace(System.out); \n      }\n\n      // We couldn't get the JVM to crash for some reason.\n      fail();\n  }\n\n","sourceOld":"  /**\n   * currently, this only works/tested on Sun and IBM.\n   */\n  public void crashJRE() {\n    final String vendor = Constants.JAVA_VENDOR;\n    final boolean supportsUnsafeNpeDereference = \n        vendor.startsWith(\"Oracle\") || \n        vendor.startsWith(\"Sun\") || \n        vendor.startsWith(\"Apple\");\n\n      try {\n        if (supportsUnsafeNpeDereference) {\n          try {\n            Class<?> clazz = Class.forName(\"sun.misc.Unsafe\");\n            Field field = clazz.getDeclaredField(\"theUnsafe\");\n            field.setAccessible(true);\n            Object o = field.get(null);\n            Method m = clazz.getMethod(\"putAddress\", long.class, long.class);\n            m.invoke(o, 0L, 0L);\n          } catch (Throwable e) {\n            System.out.println(\"Couldn't kill the JVM via Unsafe.\");\n            e.printStackTrace(System.out); \n          }\n        }\n\n        // Fallback attempt to Runtime.halt();\n        Runtime.getRuntime().halt(-1);\n      } catch (Exception e) {\n        System.out.println(\"Couldn't kill the JVM.\");\n        e.printStackTrace(System.out); \n      }\n\n      // We couldn't get the JVM to crash for some reason.\n      fail();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d49a158012a8ff48f328a4558e4bfcffbaed16f","date":1453677440,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterOnJRECrash#crashJRE().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterOnJRECrash#crashJRE().mjava","sourceNew":"  /**\n   * currently, this only works/tested on Sun and IBM.\n   */\n  @SuppressForbidden(reason = \"We need Unsafe to actually crush :-)\")\n  public void crashJRE() {\n    final String vendor = Constants.JAVA_VENDOR;\n    final boolean supportsUnsafeNpeDereference = \n        vendor.startsWith(\"Oracle\") || \n        vendor.startsWith(\"Sun\") || \n        vendor.startsWith(\"Apple\");\n\n    try {\n      if (supportsUnsafeNpeDereference) {\n        try {\n          Class<?> clazz = Class.forName(\"sun.misc.Unsafe\");\n          Field field = clazz.getDeclaredField(\"theUnsafe\");\n          field.setAccessible(true);\n          Object o = field.get(null);\n          Method m = clazz.getMethod(\"putAddress\", long.class, long.class);\n          m.invoke(o, 0L, 0L);\n        } catch (Throwable e) {\n          System.out.println(\"Couldn't kill the JVM via Unsafe.\");\n          e.printStackTrace(System.out); \n        }\n      }\n\n      // Fallback attempt to Runtime.halt();\n      Runtime.getRuntime().halt(-1);\n    } catch (Exception e) {\n      System.out.println(\"Couldn't kill the JVM.\");\n      e.printStackTrace(System.out); \n    }\n\n    // We couldn't get the JVM to crash for some reason.\n    fail();\n  }\n\n","sourceOld":"  /**\n   * currently, this only works/tested on Sun and IBM.\n   */\n  @SuppressForbidden(reason = \"We need Unsafe to actually crush :-)\")\n  public void crashJRE() {\n    final String vendor = Constants.JAVA_VENDOR;\n    final boolean supportsUnsafeNpeDereference = \n        vendor.startsWith(\"Oracle\") || \n        vendor.startsWith(\"Sun\") || \n        vendor.startsWith(\"Apple\");\n\n      try {\n        if (supportsUnsafeNpeDereference) {\n          try {\n            Class<?> clazz = Class.forName(\"sun.misc.Unsafe\");\n            Field field = clazz.getDeclaredField(\"theUnsafe\");\n            field.setAccessible(true);\n            Object o = field.get(null);\n            Method m = clazz.getMethod(\"putAddress\", long.class, long.class);\n            m.invoke(o, 0L, 0L);\n          } catch (Throwable e) {\n            System.out.println(\"Couldn't kill the JVM via Unsafe.\");\n            e.printStackTrace(System.out); \n          }\n        }\n\n        // Fallback attempt to Runtime.halt();\n        Runtime.getRuntime().halt(-1);\n      } catch (Exception e) {\n        System.out.println(\"Couldn't kill the JVM.\");\n        e.printStackTrace(System.out); \n      }\n\n      // We couldn't get the JVM to crash for some reason.\n      fail();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"68496c2200e559fb7802f7575427b7a482659afb","date":1455207618,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterOnJRECrash#crashJRE().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterOnJRECrash#crashJRE().mjava","sourceNew":"  /**\n   * currently, this only works/tested on Sun and IBM.\n   */\n  @SuppressForbidden(reason = \"We need Unsafe to actually crush :-)\")\n  public void crashJRE() {\n    final String vendor = Constants.JAVA_VENDOR;\n    final boolean supportsUnsafeNpeDereference = \n        vendor.startsWith(\"Oracle\") || \n        vendor.startsWith(\"Sun\") || \n        vendor.startsWith(\"Apple\");\n\n    try {\n      if (supportsUnsafeNpeDereference) {\n        try {\n          Class<?> clazz = Class.forName(\"sun.misc.Unsafe\");\n          Field field = clazz.getDeclaredField(\"theUnsafe\");\n          field.setAccessible(true);\n          Object o = field.get(null);\n          Method m = clazz.getMethod(\"putAddress\", long.class, long.class);\n          m.invoke(o, 0L, 0L);\n        } catch (Throwable e) {\n          System.out.println(\"Couldn't kill the JVM via Unsafe.\");\n          e.printStackTrace(System.out); \n        }\n      }\n\n      // Fallback attempt to Runtime.halt();\n      Runtime.getRuntime().halt(-1);\n    } catch (Exception e) {\n      System.out.println(\"Couldn't kill the JVM.\");\n      e.printStackTrace(System.out); \n    }\n\n    // We couldn't get the JVM to crash for some reason.\n    fail();\n  }\n\n","sourceOld":"  /**\n   * currently, this only works/tested on Sun and IBM.\n   */\n  @SuppressForbidden(reason = \"We need Unsafe to actually crush :-)\")\n  public void crashJRE() {\n    final String vendor = Constants.JAVA_VENDOR;\n    final boolean supportsUnsafeNpeDereference = \n        vendor.startsWith(\"Oracle\") || \n        vendor.startsWith(\"Sun\") || \n        vendor.startsWith(\"Apple\");\n\n      try {\n        if (supportsUnsafeNpeDereference) {\n          try {\n            Class<?> clazz = Class.forName(\"sun.misc.Unsafe\");\n            Field field = clazz.getDeclaredField(\"theUnsafe\");\n            field.setAccessible(true);\n            Object o = field.get(null);\n            Method m = clazz.getMethod(\"putAddress\", long.class, long.class);\n            m.invoke(o, 0L, 0L);\n          } catch (Throwable e) {\n            System.out.println(\"Couldn't kill the JVM via Unsafe.\");\n            e.printStackTrace(System.out); \n          }\n        }\n\n        // Fallback attempt to Runtime.halt();\n        Runtime.getRuntime().halt(-1);\n      } catch (Exception e) {\n        System.out.println(\"Couldn't kill the JVM.\");\n        e.printStackTrace(System.out); \n      }\n\n      // We couldn't get the JVM to crash for some reason.\n      fail();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"db62e3d5cd46d053fa0b9ac863a5a6dbe1c9498b":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4383b91725e5b335d0a9d5f24b122b813dddd0cc":["db62e3d5cd46d053fa0b9ac863a5a6dbe1c9498b"],"68496c2200e559fb7802f7575427b7a482659afb":["4383b91725e5b335d0a9d5f24b122b813dddd0cc","0d49a158012a8ff48f328a4558e4bfcffbaed16f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["68496c2200e559fb7802f7575427b7a482659afb"],"0d49a158012a8ff48f328a4558e4bfcffbaed16f":["4383b91725e5b335d0a9d5f24b122b813dddd0cc"]},"commit2Childs":{"db62e3d5cd46d053fa0b9ac863a5a6dbe1c9498b":["4383b91725e5b335d0a9d5f24b122b813dddd0cc"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["db62e3d5cd46d053fa0b9ac863a5a6dbe1c9498b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4383b91725e5b335d0a9d5f24b122b813dddd0cc":["68496c2200e559fb7802f7575427b7a482659afb","0d49a158012a8ff48f328a4558e4bfcffbaed16f"],"68496c2200e559fb7802f7575427b7a482659afb":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0d49a158012a8ff48f328a4558e4bfcffbaed16f":["68496c2200e559fb7802f7575427b7a482659afb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}