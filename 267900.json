{"path":"solr/core/src/test/org/apache/solr/cloud/RemoteQueryErrorTest#doTest().mjava","commits":[{"id":"f0e8b6c653fa7a4e4ce7df62d16488c8876de46d","date":1391905882,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/RemoteQueryErrorTest#doTest().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void doTest() throws Exception {\n    handle.clear();\n    handle.put(\"QTime\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n    \n    waitForThingsToLevelOut(15);\n\n    del(\"*:*\");\n    \n    createCollection(\"collection2\", 2, 1, 10);\n    \n    List<Integer> numShardsNumReplicaList = new ArrayList<Integer>(2);\n    numShardsNumReplicaList.add(2);\n    numShardsNumReplicaList.add(1);\n    checkForCollection(\"collection2\", numShardsNumReplicaList, null);\n    waitForRecoveriesToFinish(\"collection2\", true);\n\n    HttpSolrServer solrServer = null;\n    for (JettySolrRunner jetty : jettys) {\n      int port = port = jetty.getLocalPort();\n      solrServer = new HttpSolrServer(\"http://127.0.0.1:\" + port + context + \"/collection2\");\n      try {\n        SolrInputDocument emptyDoc = new SolrInputDocument();\n        solrServer.add(emptyDoc);\n        fail(\"Expected unique key exceptoin\");\n      } catch (Exception ex) {\n        assert(ex.getMessage().contains(\"Document is missing mandatory uniqueKey field: id\"));\n      } finally {\n        solrServer.shutdown();\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["072f211dfa8387028bb978d128c35bf9a450bbbf"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f0a87e3f134b6a3b6b329749e63f5b8eab5f2a21","date":1391908052,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/RemoteQueryErrorTest#doTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/RemoteQueryErrorTest#doTest().mjava","sourceNew":"  @Override\n  public void doTest() throws Exception {\n    handle.clear();\n    handle.put(\"QTime\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n    \n    waitForThingsToLevelOut(15);\n\n    del(\"*:*\");\n    \n    createCollection(\"collection2\", 2, 1, 10);\n    \n    List<Integer> numShardsNumReplicaList = new ArrayList<Integer>(2);\n    numShardsNumReplicaList.add(2);\n    numShardsNumReplicaList.add(1);\n    checkForCollection(\"collection2\", numShardsNumReplicaList, null);\n    waitForRecoveriesToFinish(\"collection2\", true);\n\n    for (SolrServer solrServer : clients) {\n      try {\n        SolrInputDocument emptyDoc = new SolrInputDocument();\n        solrServer.add(emptyDoc);\n        fail(\"Expected unique key exceptoin\");\n      } catch (SolrException ex) {\n        assertEquals(\"Document is missing mandatory uniqueKey field: id\", ex.getMessage());\n      } catch(Exception ex) {\n        fail(\"Expected a SolrException to occur, instead received: \" + ex.getClass());\n      } finally {\n        solrServer.shutdown();\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void doTest() throws Exception {\n    handle.clear();\n    handle.put(\"QTime\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n    \n    waitForThingsToLevelOut(15);\n\n    del(\"*:*\");\n    \n    createCollection(\"collection2\", 2, 1, 10);\n    \n    List<Integer> numShardsNumReplicaList = new ArrayList<Integer>(2);\n    numShardsNumReplicaList.add(2);\n    numShardsNumReplicaList.add(1);\n    checkForCollection(\"collection2\", numShardsNumReplicaList, null);\n    waitForRecoveriesToFinish(\"collection2\", true);\n\n    HttpSolrServer solrServer = null;\n    for (JettySolrRunner jetty : jettys) {\n      int port = port = jetty.getLocalPort();\n      solrServer = new HttpSolrServer(\"http://127.0.0.1:\" + port + context + \"/collection2\");\n      try {\n        SolrInputDocument emptyDoc = new SolrInputDocument();\n        solrServer.add(emptyDoc);\n        fail(\"Expected unique key exceptoin\");\n      } catch (Exception ex) {\n        assert(ex.getMessage().contains(\"Document is missing mandatory uniqueKey field: id\"));\n      } finally {\n        solrServer.shutdown();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/RemoteQueryErrorTest#doTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/RemoteQueryErrorTest#doTest().mjava","sourceNew":"  @Override\n  public void doTest() throws Exception {\n    handle.clear();\n    handle.put(\"QTime\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n    \n    waitForThingsToLevelOut(15);\n\n    del(\"*:*\");\n    \n    createCollection(\"collection2\", 2, 1, 10);\n    \n    List<Integer> numShardsNumReplicaList = new ArrayList<>(2);\n    numShardsNumReplicaList.add(2);\n    numShardsNumReplicaList.add(1);\n    checkForCollection(\"collection2\", numShardsNumReplicaList, null);\n    waitForRecoveriesToFinish(\"collection2\", true);\n\n    for (SolrServer solrServer : clients) {\n      try {\n        SolrInputDocument emptyDoc = new SolrInputDocument();\n        solrServer.add(emptyDoc);\n        fail(\"Expected unique key exceptoin\");\n      } catch (SolrException ex) {\n        assertEquals(\"Document is missing mandatory uniqueKey field: id\", ex.getMessage());\n      } catch(Exception ex) {\n        fail(\"Expected a SolrException to occur, instead received: \" + ex.getClass());\n      } finally {\n        solrServer.shutdown();\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void doTest() throws Exception {\n    handle.clear();\n    handle.put(\"QTime\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n    \n    waitForThingsToLevelOut(15);\n\n    del(\"*:*\");\n    \n    createCollection(\"collection2\", 2, 1, 10);\n    \n    List<Integer> numShardsNumReplicaList = new ArrayList<Integer>(2);\n    numShardsNumReplicaList.add(2);\n    numShardsNumReplicaList.add(1);\n    checkForCollection(\"collection2\", numShardsNumReplicaList, null);\n    waitForRecoveriesToFinish(\"collection2\", true);\n\n    for (SolrServer solrServer : clients) {\n      try {\n        SolrInputDocument emptyDoc = new SolrInputDocument();\n        solrServer.add(emptyDoc);\n        fail(\"Expected unique key exceptoin\");\n      } catch (SolrException ex) {\n        assertEquals(\"Document is missing mandatory uniqueKey field: id\", ex.getMessage());\n      } catch(Exception ex) {\n        fail(\"Expected a SolrException to occur, instead received: \" + ex.getClass());\n      } finally {\n        solrServer.shutdown();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"072f211dfa8387028bb978d128c35bf9a450bbbf","date":1406041363,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/RemoteQueryErrorTest#doTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/RemoteQueryErrorTest#doTest().mjava","sourceNew":"  @Override\n  public void doTest() throws Exception {\n    handle.clear();\n    handle.put(\"timestamp\", SKIPVAL);\n    \n    waitForThingsToLevelOut(15);\n\n    del(\"*:*\");\n    \n    createCollection(\"collection2\", 2, 1, 10);\n    \n    List<Integer> numShardsNumReplicaList = new ArrayList<>(2);\n    numShardsNumReplicaList.add(2);\n    numShardsNumReplicaList.add(1);\n    checkForCollection(\"collection2\", numShardsNumReplicaList, null);\n    waitForRecoveriesToFinish(\"collection2\", true);\n\n    for (SolrServer solrServer : clients) {\n      try {\n        SolrInputDocument emptyDoc = new SolrInputDocument();\n        solrServer.add(emptyDoc);\n        fail(\"Expected unique key exceptoin\");\n      } catch (SolrException ex) {\n        assertEquals(\"Document is missing mandatory uniqueKey field: id\", ex.getMessage());\n      } catch(Exception ex) {\n        fail(\"Expected a SolrException to occur, instead received: \" + ex.getClass());\n      } finally {\n        solrServer.shutdown();\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void doTest() throws Exception {\n    handle.clear();\n    handle.put(\"QTime\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n    \n    waitForThingsToLevelOut(15);\n\n    del(\"*:*\");\n    \n    createCollection(\"collection2\", 2, 1, 10);\n    \n    List<Integer> numShardsNumReplicaList = new ArrayList<>(2);\n    numShardsNumReplicaList.add(2);\n    numShardsNumReplicaList.add(1);\n    checkForCollection(\"collection2\", numShardsNumReplicaList, null);\n    waitForRecoveriesToFinish(\"collection2\", true);\n\n    for (SolrServer solrServer : clients) {\n      try {\n        SolrInputDocument emptyDoc = new SolrInputDocument();\n        solrServer.add(emptyDoc);\n        fail(\"Expected unique key exceptoin\");\n      } catch (SolrException ex) {\n        assertEquals(\"Document is missing mandatory uniqueKey field: id\", ex.getMessage());\n      } catch(Exception ex) {\n        fail(\"Expected a SolrException to occur, instead received: \" + ex.getClass());\n      } finally {\n        solrServer.shutdown();\n      }\n    }\n  }\n\n","bugFix":["f0e8b6c653fa7a4e4ce7df62d16488c8876de46d"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0896ace2910e9823fc27fa0a0adab8fc3e478ba6","date":1418662149,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/RemoteQueryErrorTest#doTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/RemoteQueryErrorTest#doTest().mjava","sourceNew":"  @Override\n  public void doTest() throws Exception {\n    handle.clear();\n    handle.put(\"timestamp\", SKIPVAL);\n    \n    waitForThingsToLevelOut(15);\n\n    del(\"*:*\");\n    \n    createCollection(\"collection2\", 2, 1, 10);\n    \n    List<Integer> numShardsNumReplicaList = new ArrayList<>(2);\n    numShardsNumReplicaList.add(2);\n    numShardsNumReplicaList.add(1);\n    checkForCollection(\"collection2\", numShardsNumReplicaList, null);\n    waitForRecoveriesToFinish(\"collection2\", true);\n\n    for (SolrServer solrServer : clients) {\n      try {\n        SolrInputDocument emptyDoc = new SolrInputDocument();\n        solrServer.add(emptyDoc);\n        fail(\"Expected unique key exceptoin\");\n      } catch (SolrException ex) {\n        assertThat(ex.getMessage(), containsString(\"Document is missing mandatory uniqueKey field: id\"));\n      } catch(Exception ex) {\n        fail(\"Expected a SolrException to occur, instead received: \" + ex.getClass());\n      } finally {\n        solrServer.shutdown();\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void doTest() throws Exception {\n    handle.clear();\n    handle.put(\"timestamp\", SKIPVAL);\n    \n    waitForThingsToLevelOut(15);\n\n    del(\"*:*\");\n    \n    createCollection(\"collection2\", 2, 1, 10);\n    \n    List<Integer> numShardsNumReplicaList = new ArrayList<>(2);\n    numShardsNumReplicaList.add(2);\n    numShardsNumReplicaList.add(1);\n    checkForCollection(\"collection2\", numShardsNumReplicaList, null);\n    waitForRecoveriesToFinish(\"collection2\", true);\n\n    for (SolrServer solrServer : clients) {\n      try {\n        SolrInputDocument emptyDoc = new SolrInputDocument();\n        solrServer.add(emptyDoc);\n        fail(\"Expected unique key exceptoin\");\n      } catch (SolrException ex) {\n        assertEquals(\"Document is missing mandatory uniqueKey field: id\", ex.getMessage());\n      } catch(Exception ex) {\n        fail(\"Expected a SolrException to occur, instead received: \" + ex.getClass());\n      } finally {\n        solrServer.shutdown();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/RemoteQueryErrorTest#doTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/RemoteQueryErrorTest#doTest().mjava","sourceNew":"  @Override\n  public void doTest() throws Exception {\n    handle.clear();\n    handle.put(\"timestamp\", SKIPVAL);\n    \n    waitForThingsToLevelOut(15);\n\n    del(\"*:*\");\n    \n    createCollection(\"collection2\", 2, 1, 10);\n    \n    List<Integer> numShardsNumReplicaList = new ArrayList<>(2);\n    numShardsNumReplicaList.add(2);\n    numShardsNumReplicaList.add(1);\n    checkForCollection(\"collection2\", numShardsNumReplicaList, null);\n    waitForRecoveriesToFinish(\"collection2\", true);\n\n    for (SolrClient solrClient : clients) {\n      try {\n        SolrInputDocument emptyDoc = new SolrInputDocument();\n        solrClient.add(emptyDoc);\n        fail(\"Expected unique key exceptoin\");\n      } catch (SolrException ex) {\n        assertThat(ex.getMessage(), containsString(\"Document is missing mandatory uniqueKey field: id\"));\n      } catch(Exception ex) {\n        fail(\"Expected a SolrException to occur, instead received: \" + ex.getClass());\n      } finally {\n        solrClient.shutdown();\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void doTest() throws Exception {\n    handle.clear();\n    handle.put(\"timestamp\", SKIPVAL);\n    \n    waitForThingsToLevelOut(15);\n\n    del(\"*:*\");\n    \n    createCollection(\"collection2\", 2, 1, 10);\n    \n    List<Integer> numShardsNumReplicaList = new ArrayList<>(2);\n    numShardsNumReplicaList.add(2);\n    numShardsNumReplicaList.add(1);\n    checkForCollection(\"collection2\", numShardsNumReplicaList, null);\n    waitForRecoveriesToFinish(\"collection2\", true);\n\n    for (SolrServer solrServer : clients) {\n      try {\n        SolrInputDocument emptyDoc = new SolrInputDocument();\n        solrServer.add(emptyDoc);\n        fail(\"Expected unique key exceptoin\");\n      } catch (SolrException ex) {\n        assertThat(ex.getMessage(), containsString(\"Document is missing mandatory uniqueKey field: id\"));\n      } catch(Exception ex) {\n        fail(\"Expected a SolrException to occur, instead received: \" + ex.getClass());\n      } finally {\n        solrServer.shutdown();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"abb23fcc2461782ab204e61213240feb77d355aa","date":1422029612,"type":5,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/RemoteQueryErrorTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/RemoteQueryErrorTest#doTest().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n    handle.clear();\n    handle.put(\"timestamp\", SKIPVAL);\n    \n    waitForThingsToLevelOut(15);\n\n    del(\"*:*\");\n    \n    createCollection(\"collection2\", 2, 1, 10);\n    \n    List<Integer> numShardsNumReplicaList = new ArrayList<>(2);\n    numShardsNumReplicaList.add(2);\n    numShardsNumReplicaList.add(1);\n    checkForCollection(\"collection2\", numShardsNumReplicaList, null);\n    waitForRecoveriesToFinish(\"collection2\", true);\n\n    for (SolrClient solrClient : clients) {\n      try {\n        SolrInputDocument emptyDoc = new SolrInputDocument();\n        solrClient.add(emptyDoc);\n        fail(\"Expected unique key exceptoin\");\n      } catch (SolrException ex) {\n        assertThat(ex.getMessage(), containsString(\"Document is missing mandatory uniqueKey field: id\"));\n      } catch(Exception ex) {\n        fail(\"Expected a SolrException to occur, instead received: \" + ex.getClass());\n      } finally {\n        solrClient.shutdown();\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void doTest() throws Exception {\n    handle.clear();\n    handle.put(\"timestamp\", SKIPVAL);\n    \n    waitForThingsToLevelOut(15);\n\n    del(\"*:*\");\n    \n    createCollection(\"collection2\", 2, 1, 10);\n    \n    List<Integer> numShardsNumReplicaList = new ArrayList<>(2);\n    numShardsNumReplicaList.add(2);\n    numShardsNumReplicaList.add(1);\n    checkForCollection(\"collection2\", numShardsNumReplicaList, null);\n    waitForRecoveriesToFinish(\"collection2\", true);\n\n    for (SolrClient solrClient : clients) {\n      try {\n        SolrInputDocument emptyDoc = new SolrInputDocument();\n        solrClient.add(emptyDoc);\n        fail(\"Expected unique key exceptoin\");\n      } catch (SolrException ex) {\n        assertThat(ex.getMessage(), containsString(\"Document is missing mandatory uniqueKey field: id\"));\n      } catch(Exception ex) {\n        fail(\"Expected a SolrException to occur, instead received: \" + ex.getClass());\n      } finally {\n        solrClient.shutdown();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["f0a87e3f134b6a3b6b329749e63f5b8eab5f2a21"],"072f211dfa8387028bb978d128c35bf9a450bbbf":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"abb23fcc2461782ab204e61213240feb77d355aa":["bafca15d8e408346a67f4282ad1143b88023893b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bafca15d8e408346a67f4282ad1143b88023893b":["0896ace2910e9823fc27fa0a0adab8fc3e478ba6"],"f0a87e3f134b6a3b6b329749e63f5b8eab5f2a21":["f0e8b6c653fa7a4e4ce7df62d16488c8876de46d"],"f0e8b6c653fa7a4e4ce7df62d16488c8876de46d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["abb23fcc2461782ab204e61213240feb77d355aa"],"0896ace2910e9823fc27fa0a0adab8fc3e478ba6":["072f211dfa8387028bb978d128c35bf9a450bbbf"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["072f211dfa8387028bb978d128c35bf9a450bbbf"],"072f211dfa8387028bb978d128c35bf9a450bbbf":["0896ace2910e9823fc27fa0a0adab8fc3e478ba6"],"abb23fcc2461782ab204e61213240feb77d355aa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f0e8b6c653fa7a4e4ce7df62d16488c8876de46d"],"bafca15d8e408346a67f4282ad1143b88023893b":["abb23fcc2461782ab204e61213240feb77d355aa"],"f0a87e3f134b6a3b6b329749e63f5b8eab5f2a21":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"f0e8b6c653fa7a4e4ce7df62d16488c8876de46d":["f0a87e3f134b6a3b6b329749e63f5b8eab5f2a21"],"0896ace2910e9823fc27fa0a0adab8fc3e478ba6":["bafca15d8e408346a67f4282ad1143b88023893b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}