{"path":"lucene/src/java/org/apache/lucene/codecs/lucene40/values/FixedStraightBytesImpl.FixedBytesWriterBase#add(int,BytesRef).mjava","commits":[{"id":"a0ae5e3ed1232483b7b8a014f175a5fe43595982","date":1324062192,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/lucene40/values/FixedStraightBytesImpl.FixedBytesWriterBase#add(int,BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/lucene40/values/FixedStraightBytesImpl.FixedBytesWriterBase#add(int,BytesRef).mjava","sourceNew":"    @Override\n    public void add(int docID, BytesRef bytes) throws IOException {\n      assert lastDocID < docID;\n\n      if (size == -1) {\n        if (bytes.length > BYTE_BLOCK_SIZE) {\n          throw new IllegalArgumentException(\"bytes arrays > \" + Short.MAX_VALUE + \" are not supported\");\n        }\n        size = bytes.length;\n      } else if (bytes.length != size) {\n        throw new IllegalArgumentException(\"expected bytes size=\" + size\n            + \" but got \" + bytes.length);\n      }\n      if (lastDocID+1 < docID) {\n        advancePool(docID);\n      }\n      pool.copy(bytes);\n      lastDocID = docID;\n    }\n\n","sourceOld":"    @Override\n    public void add(int docID, BytesRef bytes) throws IOException {\n      assert lastDocID < docID;\n\n      if (size == -1) {\n        if (bytes.length > BYTE_BLOCK_SIZE) {\n          throw new IllegalArgumentException(\"bytes arrays > \" + Short.MAX_VALUE + \" are not supported\");\n        }\n        size = bytes.length;\n      } else if (bytes.length != size) {\n        throw new IllegalArgumentException(\"expected bytes size=\" + size\n            + \" but got \" + bytes.length);\n      }\n      if (lastDocID+1 < docID) {\n        advancePool(docID);\n      }\n      pool.copy(bytes);\n      lastDocID = docID;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f6e3376a314fcc2b31bc46d399c2ff23552b78d6","date":1325780477,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/lucene40/values/FixedStraightBytesImpl.FixedBytesWriterBase#add(int,BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/lucene40/values/FixedStraightBytesImpl.FixedBytesWriterBase#add(int,BytesRef).mjava","sourceNew":"    @Override\n    protected void add(int docID, BytesRef bytes) throws IOException {\n      assert lastDocID < docID;\n\n      if (size == -1) {\n        if (bytes.length > BYTE_BLOCK_SIZE) {\n          throw new IllegalArgumentException(\"bytes arrays > \" + Short.MAX_VALUE + \" are not supported\");\n        }\n        size = bytes.length;\n      } else if (bytes.length != size) {\n        throw new IllegalArgumentException(\"expected bytes size=\" + size\n            + \" but got \" + bytes.length);\n      }\n      if (lastDocID+1 < docID) {\n        advancePool(docID);\n      }\n      pool.copy(bytes);\n      lastDocID = docID;\n    }\n\n","sourceOld":"    @Override\n    public void add(int docID, BytesRef bytes) throws IOException {\n      assert lastDocID < docID;\n\n      if (size == -1) {\n        if (bytes.length > BYTE_BLOCK_SIZE) {\n          throw new IllegalArgumentException(\"bytes arrays > \" + Short.MAX_VALUE + \" are not supported\");\n        }\n        size = bytes.length;\n      } else if (bytes.length != size) {\n        throw new IllegalArgumentException(\"expected bytes size=\" + size\n            + \" but got \" + bytes.length);\n      }\n      if (lastDocID+1 < docID) {\n        advancePool(docID);\n      }\n      pool.copy(bytes);\n      lastDocID = docID;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fa0f44f887719e97183771e977cfc4bfb485b766","date":1326668713,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/lucene40/values/FixedStraightBytesImpl.FixedBytesWriterBase#add(int,BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/lucene40/values/FixedStraightBytesImpl.FixedBytesWriterBase#add(int,BytesRef).mjava","sourceNew":"    @Override\n    protected void add(int docID, BytesRef bytes) throws IOException {\n      assert lastDocID < docID;\n\n      if (size == -1) {\n        if (bytes.length > BYTE_BLOCK_SIZE) {\n          throw new IllegalArgumentException(\"bytes arrays > \" + BYTE_BLOCK_SIZE + \" are not supported\");\n        }\n        size = bytes.length;\n      } else if (bytes.length != size) {\n        throw new IllegalArgumentException(\"byte[] length changed for BYTES_FIXED_STRAIGHT type (before=\" + size + \" now=\" + bytes.length);\n      }\n      if (lastDocID+1 < docID) {\n        advancePool(docID);\n      }\n      pool.copy(bytes);\n      lastDocID = docID;\n    }\n\n","sourceOld":"    @Override\n    protected void add(int docID, BytesRef bytes) throws IOException {\n      assert lastDocID < docID;\n\n      if (size == -1) {\n        if (bytes.length > BYTE_BLOCK_SIZE) {\n          throw new IllegalArgumentException(\"bytes arrays > \" + Short.MAX_VALUE + \" are not supported\");\n        }\n        size = bytes.length;\n      } else if (bytes.length != size) {\n        throw new IllegalArgumentException(\"expected bytes size=\" + size\n            + \" but got \" + bytes.length);\n      }\n      if (lastDocID+1 < docID) {\n        advancePool(docID);\n      }\n      pool.copy(bytes);\n      lastDocID = docID;\n    }\n\n","bugFix":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","3b7a068f550e13e49517c6899cc3b94c8eeb72e5"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/values/FixedStraightBytesImpl.FixedBytesWriterBase#add(int,BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/lucene40/values/FixedStraightBytesImpl.FixedBytesWriterBase#add(int,BytesRef).mjava","sourceNew":"    @Override\n    protected void add(int docID, BytesRef bytes) throws IOException {\n      assert lastDocID < docID;\n\n      if (size == -1) {\n        if (bytes.length > BYTE_BLOCK_SIZE) {\n          throw new IllegalArgumentException(\"bytes arrays > \" + BYTE_BLOCK_SIZE + \" are not supported\");\n        }\n        size = bytes.length;\n      } else if (bytes.length != size) {\n        throw new IllegalArgumentException(\"byte[] length changed for BYTES_FIXED_STRAIGHT type (before=\" + size + \" now=\" + bytes.length);\n      }\n      if (lastDocID+1 < docID) {\n        advancePool(docID);\n      }\n      pool.copy(bytes);\n      lastDocID = docID;\n    }\n\n","sourceOld":"    @Override\n    protected void add(int docID, BytesRef bytes) throws IOException {\n      assert lastDocID < docID;\n\n      if (size == -1) {\n        if (bytes.length > BYTE_BLOCK_SIZE) {\n          throw new IllegalArgumentException(\"bytes arrays > \" + BYTE_BLOCK_SIZE + \" are not supported\");\n        }\n        size = bytes.length;\n      } else if (bytes.length != size) {\n        throw new IllegalArgumentException(\"byte[] length changed for BYTES_FIXED_STRAIGHT type (before=\" + size + \" now=\" + bytes.length);\n      }\n      if (lastDocID+1 < docID) {\n        advancePool(docID);\n      }\n      pool.copy(bytes);\n      lastDocID = docID;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["fa0f44f887719e97183771e977cfc4bfb485b766"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fa0f44f887719e97183771e977cfc4bfb485b766":["f6e3376a314fcc2b31bc46d399c2ff23552b78d6"],"f6e3376a314fcc2b31bc46d399c2ff23552b78d6":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"fa0f44f887719e97183771e977cfc4bfb485b766":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"f6e3376a314fcc2b31bc46d399c2ff23552b78d6":["fa0f44f887719e97183771e977cfc4bfb485b766"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["f6e3376a314fcc2b31bc46d399c2ff23552b78d6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}