{"path":"lucene/src/java/org/apache/lucene/index/DirectoryReader#doClose().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DirectoryReader#doClose().mjava","pathOld":"src/java/org/apache/lucene/index/DirectoryReader#doClose().mjava","sourceNew":"  @Override\n  protected synchronized void doClose() throws IOException {\n    IOException ioe = null;\n    normsCache = null;\n    for (int i = 0; i < subReaders.length; i++) {\n      // try to close each reader, even if an exception is thrown\n      try {\n        subReaders[i].decRef();\n      } catch (IOException e) {\n        if (ioe == null) ioe = e;\n      }\n    }\n\n    // NOTE: only needed in case someone had asked for\n    // FieldCache for top-level reader (which is generally\n    // not a good idea):\n    FieldCache.DEFAULT.purge(this);\n\n    if (writer != null) {\n      // Since we just closed, writer may now be able to\n      // delete unused files:\n      writer.deleteUnusedFiles();\n    }\n\n    // throw the first exception\n    if (ioe != null) throw ioe;\n  }\n\n","sourceOld":"  @Override\n  protected synchronized void doClose() throws IOException {\n    IOException ioe = null;\n    normsCache = null;\n    for (int i = 0; i < subReaders.length; i++) {\n      // try to close each reader, even if an exception is thrown\n      try {\n        subReaders[i].decRef();\n      } catch (IOException e) {\n        if (ioe == null) ioe = e;\n      }\n    }\n\n    // NOTE: only needed in case someone had asked for\n    // FieldCache for top-level reader (which is generally\n    // not a good idea):\n    FieldCache.DEFAULT.purge(this);\n\n    if (writer != null) {\n      // Since we just closed, writer may now be able to\n      // delete unused files:\n      writer.deleteUnusedFiles();\n    }\n\n    // throw the first exception\n    if (ioe != null) throw ioe;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0d06946f61921459f43309f86ed621ebe67eebe","date":1294182697,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DirectoryReader#doClose().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DirectoryReader#doClose().mjava","sourceNew":"  @Override\n  protected synchronized void doClose() throws IOException {\n    IOException ioe = null;\n    for (int i = 0; i < subReaders.length; i++) {\n      // try to close each reader, even if an exception is thrown\n      try {\n        subReaders[i].decRef();\n      } catch (IOException e) {\n        if (ioe == null) ioe = e;\n      }\n    }\n\n    // NOTE: only needed in case someone had asked for\n    // FieldCache for top-level reader (which is generally\n    // not a good idea):\n    FieldCache.DEFAULT.purge(this);\n\n    if (writer != null) {\n      // Since we just closed, writer may now be able to\n      // delete unused files:\n      writer.deleteUnusedFiles();\n    }\n\n    // throw the first exception\n    if (ioe != null) throw ioe;\n  }\n\n","sourceOld":"  @Override\n  protected synchronized void doClose() throws IOException {\n    IOException ioe = null;\n    normsCache = null;\n    for (int i = 0; i < subReaders.length; i++) {\n      // try to close each reader, even if an exception is thrown\n      try {\n        subReaders[i].decRef();\n      } catch (IOException e) {\n        if (ioe == null) ioe = e;\n      }\n    }\n\n    // NOTE: only needed in case someone had asked for\n    // FieldCache for top-level reader (which is generally\n    // not a good idea):\n    FieldCache.DEFAULT.purge(this);\n\n    if (writer != null) {\n      // Since we just closed, writer may now be able to\n      // delete unused files:\n      writer.deleteUnusedFiles();\n    }\n\n    // throw the first exception\n    if (ioe != null) throw ioe;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/DirectoryReader#doClose().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DirectoryReader#doClose().mjava","sourceNew":"  @Override\n  protected synchronized void doClose() throws IOException {\n    IOException ioe = null;\n    for (int i = 0; i < subReaders.length; i++) {\n      // try to close each reader, even if an exception is thrown\n      try {\n        subReaders[i].decRef();\n      } catch (IOException e) {\n        if (ioe == null) ioe = e;\n      }\n    }\n\n    // NOTE: only needed in case someone had asked for\n    // FieldCache for top-level reader (which is generally\n    // not a good idea):\n    FieldCache.DEFAULT.purge(this);\n\n    if (writer != null) {\n      // Since we just closed, writer may now be able to\n      // delete unused files:\n      writer.deleteUnusedFiles();\n    }\n\n    // throw the first exception\n    if (ioe != null) throw ioe;\n  }\n\n","sourceOld":"  @Override\n  protected synchronized void doClose() throws IOException {\n    IOException ioe = null;\n    normsCache = null;\n    for (int i = 0; i < subReaders.length; i++) {\n      // try to close each reader, even if an exception is thrown\n      try {\n        subReaders[i].decRef();\n      } catch (IOException e) {\n        if (ioe == null) ioe = e;\n      }\n    }\n\n    // NOTE: only needed in case someone had asked for\n    // FieldCache for top-level reader (which is generally\n    // not a good idea):\n    FieldCache.DEFAULT.purge(this);\n\n    if (writer != null) {\n      // Since we just closed, writer may now be able to\n      // delete unused files:\n      writer.deleteUnusedFiles();\n    }\n\n    // throw the first exception\n    if (ioe != null) throw ioe;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/DirectoryReader#doClose().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DirectoryReader#doClose().mjava","sourceNew":"  @Override\n  protected synchronized void doClose() throws IOException {\n    IOException ioe = null;\n    for (int i = 0; i < subReaders.length; i++) {\n      // try to close each reader, even if an exception is thrown\n      try {\n        subReaders[i].decRef();\n      } catch (IOException e) {\n        if (ioe == null) ioe = e;\n      }\n    }\n\n    // NOTE: only needed in case someone had asked for\n    // FieldCache for top-level reader (which is generally\n    // not a good idea):\n    FieldCache.DEFAULT.purge(this);\n\n    if (writer != null) {\n      // Since we just closed, writer may now be able to\n      // delete unused files:\n      writer.deleteUnusedFiles();\n    }\n\n    // throw the first exception\n    if (ioe != null) throw ioe;\n  }\n\n","sourceOld":"  @Override\n  protected synchronized void doClose() throws IOException {\n    IOException ioe = null;\n    normsCache = null;\n    for (int i = 0; i < subReaders.length; i++) {\n      // try to close each reader, even if an exception is thrown\n      try {\n        subReaders[i].decRef();\n      } catch (IOException e) {\n        if (ioe == null) ioe = e;\n      }\n    }\n\n    // NOTE: only needed in case someone had asked for\n    // FieldCache for top-level reader (which is generally\n    // not a good idea):\n    FieldCache.DEFAULT.purge(this);\n\n    if (writer != null) {\n      // Since we just closed, writer may now be able to\n      // delete unused files:\n      writer.deleteUnusedFiles();\n    }\n\n    // throw the first exception\n    if (ioe != null) throw ioe;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cdd3a20c3f7b8db3ed0313a58cb6304f9b5bc340","date":1295995357,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DirectoryReader#doClose().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DirectoryReader#doClose().mjava","sourceNew":"  @Override\n  protected synchronized void doClose() throws IOException {\n    IOException ioe = null;\n    for (int i = 0; i < subReaders.length; i++) {\n      // try to close each reader, even if an exception is thrown\n      try {\n        subReaders[i].decRef();\n      } catch (IOException e) {\n        if (ioe == null) ioe = e;\n      }\n    }\n\n    if (writer != null) {\n      // Since we just closed, writer may now be able to\n      // delete unused files:\n      writer.deleteUnusedFiles();\n    }\n\n    // throw the first exception\n    if (ioe != null) throw ioe;\n  }\n\n","sourceOld":"  @Override\n  protected synchronized void doClose() throws IOException {\n    IOException ioe = null;\n    for (int i = 0; i < subReaders.length; i++) {\n      // try to close each reader, even if an exception is thrown\n      try {\n        subReaders[i].decRef();\n      } catch (IOException e) {\n        if (ioe == null) ioe = e;\n      }\n    }\n\n    // NOTE: only needed in case someone had asked for\n    // FieldCache for top-level reader (which is generally\n    // not a good idea):\n    FieldCache.DEFAULT.purge(this);\n\n    if (writer != null) {\n      // Since we just closed, writer may now be able to\n      // delete unused files:\n      writer.deleteUnusedFiles();\n    }\n\n    // throw the first exception\n    if (ioe != null) throw ioe;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/DirectoryReader#doClose().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DirectoryReader#doClose().mjava","sourceNew":"  @Override\n  protected synchronized void doClose() throws IOException {\n    IOException ioe = null;\n    for (int i = 0; i < subReaders.length; i++) {\n      // try to close each reader, even if an exception is thrown\n      try {\n        subReaders[i].decRef();\n      } catch (IOException e) {\n        if (ioe == null) ioe = e;\n      }\n    }\n\n    if (writer != null) {\n      // Since we just closed, writer may now be able to\n      // delete unused files:\n      writer.deleteUnusedFiles();\n    }\n\n    // throw the first exception\n    if (ioe != null) throw ioe;\n  }\n\n","sourceOld":"  @Override\n  protected synchronized void doClose() throws IOException {\n    IOException ioe = null;\n    for (int i = 0; i < subReaders.length; i++) {\n      // try to close each reader, even if an exception is thrown\n      try {\n        subReaders[i].decRef();\n      } catch (IOException e) {\n        if (ioe == null) ioe = e;\n      }\n    }\n\n    // NOTE: only needed in case someone had asked for\n    // FieldCache for top-level reader (which is generally\n    // not a good idea):\n    FieldCache.DEFAULT.purge(this);\n\n    if (writer != null) {\n      // Since we just closed, writer may now be able to\n      // delete unused files:\n      writer.deleteUnusedFiles();\n    }\n\n    // throw the first exception\n    if (ioe != null) throw ioe;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/DirectoryReader#doClose().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DirectoryReader#doClose().mjava","sourceNew":"  @Override\n  protected synchronized void doClose() throws IOException {\n    IOException ioe = null;\n    for (int i = 0; i < subReaders.length; i++) {\n      // try to close each reader, even if an exception is thrown\n      try {\n        subReaders[i].decRef();\n      } catch (IOException e) {\n        if (ioe == null) ioe = e;\n      }\n    }\n\n    if (writer != null) {\n      // Since we just closed, writer may now be able to\n      // delete unused files:\n      writer.deleteUnusedFiles();\n    }\n\n    // throw the first exception\n    if (ioe != null) throw ioe;\n  }\n\n","sourceOld":"  @Override\n  protected synchronized void doClose() throws IOException {\n    IOException ioe = null;\n    for (int i = 0; i < subReaders.length; i++) {\n      // try to close each reader, even if an exception is thrown\n      try {\n        subReaders[i].decRef();\n      } catch (IOException e) {\n        if (ioe == null) ioe = e;\n      }\n    }\n\n    // NOTE: only needed in case someone had asked for\n    // FieldCache for top-level reader (which is generally\n    // not a good idea):\n    FieldCache.DEFAULT.purge(this);\n\n    if (writer != null) {\n      // Since we just closed, writer may now be able to\n      // delete unused files:\n      writer.deleteUnusedFiles();\n    }\n\n    // throw the first exception\n    if (ioe != null) throw ioe;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ddeeafb97cacc0f0e449e34a246cb6dda2c712b","date":1316619234,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DirectoryReader#doClose().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DirectoryReader#doClose().mjava","sourceNew":"  @Override\n  protected synchronized void doClose() throws IOException {\n    IOException ioe = null;\n    for (int i = 0; i < subReaders.length; i++) {\n      // try to close each reader, even if an exception is thrown\n      try {\n        subReaders[i].decRef();\n      } catch (IOException e) {\n        if (ioe == null) ioe = e;\n      }\n    }\n\n    if (writer != null) {\n      // Since we just closed, writer may now be able to\n      // delete unused files:\n      writer.deletePendingFiles();\n    }\n\n    // throw the first exception\n    if (ioe != null) throw ioe;\n  }\n\n","sourceOld":"  @Override\n  protected synchronized void doClose() throws IOException {\n    IOException ioe = null;\n    for (int i = 0; i < subReaders.length; i++) {\n      // try to close each reader, even if an exception is thrown\n      try {\n        subReaders[i].decRef();\n      } catch (IOException e) {\n        if (ioe == null) ioe = e;\n      }\n    }\n\n    if (writer != null) {\n      // Since we just closed, writer may now be able to\n      // delete unused files:\n      writer.deleteUnusedFiles();\n    }\n\n    // throw the first exception\n    if (ioe != null) throw ioe;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d7bbf8cffd2321f26cf9f6487f1571d325f20bc3","date":1328092914,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/StandardDirectoryReader#doClose().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DirectoryReader#doClose().mjava","sourceNew":"  @Override\n  protected synchronized void doClose() throws IOException {\n    IOException ioe = null;\n    for (int i = 0; i < subReaders.length; i++) {\n      // try to close each reader, even if an exception is thrown\n      try {\n        subReaders[i].decRef();\n      } catch (IOException e) {\n        if (ioe == null) ioe = e;\n      }\n    }\n\n    if (writer != null) {\n      // Since we just closed, writer may now be able to\n      // delete unused files:\n      writer.deletePendingFiles();\n    }\n\n    // throw the first exception\n    if (ioe != null) throw ioe;\n  }\n\n","sourceOld":"  @Override\n  protected synchronized void doClose() throws IOException {\n    IOException ioe = null;\n    for (int i = 0; i < subReaders.length; i++) {\n      // try to close each reader, even if an exception is thrown\n      try {\n        subReaders[i].decRef();\n      } catch (IOException e) {\n        if (ioe == null) ioe = e;\n      }\n    }\n\n    if (writer != null) {\n      // Since we just closed, writer may now be able to\n      // delete unused files:\n      writer.deletePendingFiles();\n    }\n\n    // throw the first exception\n    if (ioe != null) throw ioe;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0ddeeafb97cacc0f0e449e34a246cb6dda2c712b":["cdd3a20c3f7b8db3ed0313a58cb6304f9b5bc340"],"cdd3a20c3f7b8db3ed0313a58cb6304f9b5bc340":["b0d06946f61921459f43309f86ed621ebe67eebe"],"70ad682703b8585f5d0a637efec044d57ec05efb":["9454a6510e2db155fb01faa5c049b06ece95fab9","b0d06946f61921459f43309f86ed621ebe67eebe"],"b0d06946f61921459f43309f86ed621ebe67eebe":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["70ad682703b8585f5d0a637efec044d57ec05efb","cdd3a20c3f7b8db3ed0313a58cb6304f9b5bc340"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"868da859b43505d9d2a023bfeae6dd0c795f5295":["9454a6510e2db155fb01faa5c049b06ece95fab9","b0d06946f61921459f43309f86ed621ebe67eebe"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["868da859b43505d9d2a023bfeae6dd0c795f5295","cdd3a20c3f7b8db3ed0313a58cb6304f9b5bc340"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d7bbf8cffd2321f26cf9f6487f1571d325f20bc3"],"d7bbf8cffd2321f26cf9f6487f1571d325f20bc3":["0ddeeafb97cacc0f0e449e34a246cb6dda2c712b"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"0ddeeafb97cacc0f0e449e34a246cb6dda2c712b":["d7bbf8cffd2321f26cf9f6487f1571d325f20bc3"],"cdd3a20c3f7b8db3ed0313a58cb6304f9b5bc340":["0ddeeafb97cacc0f0e449e34a246cb6dda2c712b","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"70ad682703b8585f5d0a637efec044d57ec05efb":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"b0d06946f61921459f43309f86ed621ebe67eebe":["cdd3a20c3f7b8db3ed0313a58cb6304f9b5bc340","70ad682703b8585f5d0a637efec044d57ec05efb","868da859b43505d9d2a023bfeae6dd0c795f5295"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["70ad682703b8585f5d0a637efec044d57ec05efb","b0d06946f61921459f43309f86ed621ebe67eebe","868da859b43505d9d2a023bfeae6dd0c795f5295"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"d7bbf8cffd2321f26cf9f6487f1571d325f20bc3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}