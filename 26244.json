{"path":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharacterUtils#testNewCharacterBuffer().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharacterUtils#testNewCharacterBuffer().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharacterUtils#testNewCharacterBuffer().mjava","sourceNew":"  @Test\n  public void testNewCharacterBuffer() {\n    CharacterBuffer newCharacterBuffer = CharacterUtils.newCharacterBuffer(1024);\n    assertEquals(1024, newCharacterBuffer.getBuffer().length);\n    assertEquals(0, newCharacterBuffer.getOffset());\n    assertEquals(0, newCharacterBuffer.getLength());\n\n    newCharacterBuffer = CharacterUtils.newCharacterBuffer(2);\n    assertEquals(2, newCharacterBuffer.getBuffer().length);\n    assertEquals(0, newCharacterBuffer.getOffset());\n    assertEquals(0, newCharacterBuffer.getLength());\n\n    try {\n      newCharacterBuffer = CharacterUtils.newCharacterBuffer(1);\n      fail(\"length must be >= 2\");\n    } catch (IllegalArgumentException e) {\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testNewCharacterBuffer() {\n    CharacterBuffer newCharacterBuffer = CharacterUtils.newCharacterBuffer(1024);\n    assertEquals(1024, newCharacterBuffer.getBuffer().length);\n    assertEquals(0, newCharacterBuffer.getOffset());\n    assertEquals(0, newCharacterBuffer.getLength());\n\n    newCharacterBuffer = CharacterUtils.newCharacterBuffer(2);\n    assertEquals(2, newCharacterBuffer.getBuffer().length);\n    assertEquals(0, newCharacterBuffer.getOffset());\n    assertEquals(0, newCharacterBuffer.getLength());\n\n    try {\n      newCharacterBuffer = CharacterUtils.newCharacterBuffer(1);\n      fail(\"length must be >= 2\");\n    } catch (IllegalArgumentException e) {\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"05fe562aa248790944d43cdd478f512572835ba0","date":1455901667,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharacterUtils#testNewCharacterBuffer().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharacterUtils#testNewCharacterBuffer().mjava","sourceNew":"  @Test\n  public void testNewCharacterBuffer() {\n    CharacterBuffer newCharacterBuffer = CharacterUtils.newCharacterBuffer(1024);\n    assertEquals(1024, newCharacterBuffer.getBuffer().length);\n    assertEquals(0, newCharacterBuffer.getOffset());\n    assertEquals(0, newCharacterBuffer.getLength());\n\n    newCharacterBuffer = CharacterUtils.newCharacterBuffer(2);\n    assertEquals(2, newCharacterBuffer.getBuffer().length);\n    assertEquals(0, newCharacterBuffer.getOffset());\n    assertEquals(0, newCharacterBuffer.getLength());\n\n    // length must be >= 2\n    expectThrows(IllegalArgumentException.class, () -> {\n      CharacterUtils.newCharacterBuffer(1);\n    });\n  }\n\n","sourceOld":"  @Test\n  public void testNewCharacterBuffer() {\n    CharacterBuffer newCharacterBuffer = CharacterUtils.newCharacterBuffer(1024);\n    assertEquals(1024, newCharacterBuffer.getBuffer().length);\n    assertEquals(0, newCharacterBuffer.getOffset());\n    assertEquals(0, newCharacterBuffer.getLength());\n\n    newCharacterBuffer = CharacterUtils.newCharacterBuffer(2);\n    assertEquals(2, newCharacterBuffer.getBuffer().length);\n    assertEquals(0, newCharacterBuffer.getOffset());\n    assertEquals(0, newCharacterBuffer.getLength());\n\n    try {\n      newCharacterBuffer = CharacterUtils.newCharacterBuffer(1);\n      fail(\"length must be >= 2\");\n    } catch (IllegalArgumentException e) {\n    }\n  }\n\n","bugFix":["966b079690131e434b39530d82cc413f5aff4cd5"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b266fe0ac2172d4ad87cff12bd9bf9f8c8247345","date":1465936684,"type":5,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/analysis/TestCharacterUtils#testNewCharacterBuffer().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharacterUtils#testNewCharacterBuffer().mjava","sourceNew":"  @Test\n  public void testNewCharacterBuffer() {\n    CharacterBuffer newCharacterBuffer = CharacterUtils.newCharacterBuffer(1024);\n    assertEquals(1024, newCharacterBuffer.getBuffer().length);\n    assertEquals(0, newCharacterBuffer.getOffset());\n    assertEquals(0, newCharacterBuffer.getLength());\n\n    newCharacterBuffer = CharacterUtils.newCharacterBuffer(2);\n    assertEquals(2, newCharacterBuffer.getBuffer().length);\n    assertEquals(0, newCharacterBuffer.getOffset());\n    assertEquals(0, newCharacterBuffer.getLength());\n\n    // length must be >= 2\n    expectThrows(IllegalArgumentException.class, () -> {\n      CharacterUtils.newCharacterBuffer(1);\n    });\n  }\n\n","sourceOld":"  @Test\n  public void testNewCharacterBuffer() {\n    CharacterBuffer newCharacterBuffer = CharacterUtils.newCharacterBuffer(1024);\n    assertEquals(1024, newCharacterBuffer.getBuffer().length);\n    assertEquals(0, newCharacterBuffer.getOffset());\n    assertEquals(0, newCharacterBuffer.getLength());\n\n    newCharacterBuffer = CharacterUtils.newCharacterBuffer(2);\n    assertEquals(2, newCharacterBuffer.getBuffer().length);\n    assertEquals(0, newCharacterBuffer.getOffset());\n    assertEquals(0, newCharacterBuffer.getLength());\n\n    // length must be >= 2\n    expectThrows(IllegalArgumentException.class, () -> {\n      CharacterUtils.newCharacterBuffer(1);\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":5,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/analysis/TestCharacterUtils#testNewCharacterBuffer().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharacterUtils#testNewCharacterBuffer().mjava","sourceNew":"  @Test\n  public void testNewCharacterBuffer() {\n    CharacterBuffer newCharacterBuffer = CharacterUtils.newCharacterBuffer(1024);\n    assertEquals(1024, newCharacterBuffer.getBuffer().length);\n    assertEquals(0, newCharacterBuffer.getOffset());\n    assertEquals(0, newCharacterBuffer.getLength());\n\n    newCharacterBuffer = CharacterUtils.newCharacterBuffer(2);\n    assertEquals(2, newCharacterBuffer.getBuffer().length);\n    assertEquals(0, newCharacterBuffer.getOffset());\n    assertEquals(0, newCharacterBuffer.getLength());\n\n    // length must be >= 2\n    expectThrows(IllegalArgumentException.class, () -> {\n      CharacterUtils.newCharacterBuffer(1);\n    });\n  }\n\n","sourceOld":"  @Test\n  public void testNewCharacterBuffer() {\n    CharacterBuffer newCharacterBuffer = CharacterUtils.newCharacterBuffer(1024);\n    assertEquals(1024, newCharacterBuffer.getBuffer().length);\n    assertEquals(0, newCharacterBuffer.getOffset());\n    assertEquals(0, newCharacterBuffer.getLength());\n\n    newCharacterBuffer = CharacterUtils.newCharacterBuffer(2);\n    assertEquals(2, newCharacterBuffer.getBuffer().length);\n    assertEquals(0, newCharacterBuffer.getOffset());\n    assertEquals(0, newCharacterBuffer.getLength());\n\n    // length must be >= 2\n    expectThrows(IllegalArgumentException.class, () -> {\n      CharacterUtils.newCharacterBuffer(1);\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"05fe562aa248790944d43cdd478f512572835ba0":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b266fe0ac2172d4ad87cff12bd9bf9f8c8247345":["05fe562aa248790944d43cdd478f512572835ba0"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["05fe562aa248790944d43cdd478f512572835ba0","b266fe0ac2172d4ad87cff12bd9bf9f8c8247345"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b266fe0ac2172d4ad87cff12bd9bf9f8c8247345"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["05fe562aa248790944d43cdd478f512572835ba0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"05fe562aa248790944d43cdd478f512572835ba0":["b266fe0ac2172d4ad87cff12bd9bf9f8c8247345","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"b266fe0ac2172d4ad87cff12bd9bf9f8c8247345":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}