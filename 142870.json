{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Row#addReplica(String,String,Replica.Type).mjava","commits":[{"id":"98f11c416d30e556e0004a9a84960702d12d35b1","date":1498628359,"type":1,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Row#addReplica(String,String,Replica.Type).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Row#addReplica(String,String,Replica.Type).mjava","sourceNew":"  // this adds a replica to the replica info\n  public Row addReplica(String coll, String shard, Replica.Type type) {\n    Row row = copy();\n    Map<String, List<ReplicaInfo>> c = row.collectionVsShardVsReplicas.computeIfAbsent(coll, k -> new HashMap<>());\n    List<ReplicaInfo> replicas = c.computeIfAbsent(shard, k -> new ArrayList<>());\n    replicas.add(new ReplicaInfo(\"\" + new Random().nextInt(1000) + 1000, coll, shard, type, new HashMap<>()));\n    for (Cell cell : row.cells) {\n      if (cell.name.equals(\"cores\")) {\n        cell.val = cell.val == null ? 0 : ((Number) cell.val).longValue() + 1;\n      }\n    }\n    return row;\n\n  }\n\n","sourceOld":"  // this adds a replica to the replica info\n  Row addReplica(String coll, String shard, Replica.Type type) {\n    Row row = copy();\n    Map<String, List<ReplicaInfo>> c = row.collectionVsShardVsReplicas.computeIfAbsent(coll, k -> new HashMap<>());\n    List<ReplicaInfo> replicas = c.computeIfAbsent(shard, k -> new ArrayList<>());\n    replicas.add(new ReplicaInfo(\"\" + new Random().nextInt(1000) + 1000, coll, shard, type, new HashMap<>()));\n    for (Cell cell : row.cells) {\n      if (cell.name.equals(\"cores\")) {\n        cell.val = cell.val == null ? 0 : ((Number) cell.val).longValue() + 1;\n      }\n    }\n    return row;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c304e97e7c1d472bc70e801b35ee78583916c6cd","date":1507105431,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Row#addReplica(String,String,Replica.Type).mjava","pathOld":"/dev/null","sourceNew":"  // this adds a replica to the replica info\n  public Row addReplica(String coll, String shard, Replica.Type type) {\n    Row row = copy();\n    Map<String, List<ReplicaInfo>> c = row.collectionVsShardVsReplicas.computeIfAbsent(coll, k -> new HashMap<>());\n    List<ReplicaInfo> replicas = c.computeIfAbsent(shard, k -> new ArrayList<>());\n    replicas.add(new ReplicaInfo(\"\" + new Random().nextInt(1000) + 1000, coll, shard, type, new HashMap<>()));\n    for (Cell cell : row.cells) {\n      if (cell.name.equals(\"cores\")) {\n        cell.val = cell.val == null ? 0 : ((Number) cell.val).longValue() + 1;\n      }\n    }\n    return row;\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"560c18d71dad43d675158783c3840f8c80d6d39c","date":1507105532,"type":0,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Row#addReplica(String,String,Replica.Type).mjava","pathOld":"/dev/null","sourceNew":"  // this adds a replica to the replica info\n  public Row addReplica(String coll, String shard, Replica.Type type) {\n    Row row = copy();\n    Map<String, List<ReplicaInfo>> c = row.collectionVsShardVsReplicas.computeIfAbsent(coll, k -> new HashMap<>());\n    List<ReplicaInfo> replicas = c.computeIfAbsent(shard, k -> new ArrayList<>());\n    replicas.add(new ReplicaInfo(\"\" + new Random().nextInt(1000) + 1000, coll, shard, type, new HashMap<>()));\n    for (Cell cell : row.cells) {\n      if (cell.name.equals(\"cores\")) {\n        cell.val = cell.val == null ? 0 : ((Number) cell.val).longValue() + 1;\n      }\n    }\n    return row;\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85212dad4ed576c7f7e6c165ee19e597b7b4efc8","date":1507997740,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Row#addReplica(String,String,Replica.Type).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Row#addReplica(String,String,Replica.Type).mjava","sourceNew":"  // this adds a replica to the replica info\n  public Row addReplica(String coll, String shard, Replica.Type type) {\n    Row row = copy();\n    Map<String, List<ReplicaInfo>> c = row.collectionVsShardVsReplicas.computeIfAbsent(coll, k -> new HashMap<>());\n    List<ReplicaInfo> replicas = c.computeIfAbsent(shard, k -> new ArrayList<>());\n    replicas.add(new ReplicaInfo(\"\" + new Random().nextInt(1000) + 1000, coll, shard,\n        Collections.singletonMap(ZkStateReader.REPLICA_TYPE, type != null ? type.toString() : Replica.Type.NRT.toString())));\n    for (Cell cell : row.cells) {\n      if (cell.name.equals(\"cores\")) {\n        cell.val = cell.val == null ? 0 : ((Number) cell.val).longValue() + 1;\n      }\n    }\n    return row;\n\n  }\n\n","sourceOld":"  // this adds a replica to the replica info\n  public Row addReplica(String coll, String shard, Replica.Type type) {\n    Row row = copy();\n    Map<String, List<ReplicaInfo>> c = row.collectionVsShardVsReplicas.computeIfAbsent(coll, k -> new HashMap<>());\n    List<ReplicaInfo> replicas = c.computeIfAbsent(shard, k -> new ArrayList<>());\n    replicas.add(new ReplicaInfo(\"\" + new Random().nextInt(1000) + 1000, coll, shard, type, new HashMap<>()));\n    for (Cell cell : row.cells) {\n      if (cell.name.equals(\"cores\")) {\n        cell.val = cell.val == null ? 0 : ((Number) cell.val).longValue() + 1;\n      }\n    }\n    return row;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eaca6a0674512222004d9a2b0ca95d86bda20f1c","date":1508160449,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Row#addReplica(String,String,Replica.Type).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Row#addReplica(String,String,Replica.Type).mjava","sourceNew":"  // this adds a replica to the replica info\n  public Row addReplica(String coll, String shard, Replica.Type type) {\n    Row row = copy();\n    Map<String, List<ReplicaInfo>> c = row.collectionVsShardVsReplicas.computeIfAbsent(coll, k -> new HashMap<>());\n    List<ReplicaInfo> replicas = c.computeIfAbsent(shard, k -> new ArrayList<>());\n    String replicaname = \"\" + new Random().nextInt(1000) + 1000;\n    replicas.add(new ReplicaInfo(replicaname,replicaname, coll, shard,\n        Collections.singletonMap(ZkStateReader.REPLICA_TYPE, type != null ? type.toString() : Replica.Type.NRT.toString())));\n    for (Cell cell : row.cells) {\n      if (cell.name.equals(\"cores\")) {\n        cell.val = cell.val == null ? 0 : ((Number) cell.val).longValue() + 1;\n      }\n    }\n    return row;\n\n  }\n\n","sourceOld":"  // this adds a replica to the replica info\n  public Row addReplica(String coll, String shard, Replica.Type type) {\n    Row row = copy();\n    Map<String, List<ReplicaInfo>> c = row.collectionVsShardVsReplicas.computeIfAbsent(coll, k -> new HashMap<>());\n    List<ReplicaInfo> replicas = c.computeIfAbsent(shard, k -> new ArrayList<>());\n    replicas.add(new ReplicaInfo(\"\" + new Random().nextInt(1000) + 1000, coll, shard,\n        Collections.singletonMap(ZkStateReader.REPLICA_TYPE, type != null ? type.toString() : Replica.Type.NRT.toString())));\n    for (Cell cell : row.cells) {\n      if (cell.name.equals(\"cores\")) {\n        cell.val = cell.val == null ? 0 : ((Number) cell.val).longValue() + 1;\n      }\n    }\n    return row;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1bbcda32e5cd37ef61ea1190bacd080308e22070","date":1508850553,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Row#addReplica(String,String,Replica.Type).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Row#addReplica(String,String,Replica.Type).mjava","sourceNew":"  // this adds a replica to the replica info\n  public Row addReplica(String coll, String shard, Replica.Type type) {\n    Row row = copy();\n    Map<String, List<ReplicaInfo>> c = row.collectionVsShardVsReplicas.computeIfAbsent(coll, k -> new HashMap<>());\n    List<ReplicaInfo> replicas = c.computeIfAbsent(shard, k -> new ArrayList<>());\n    String replicaname = \"\" + new Random().nextInt(1000) + 1000;\n    replicas.add(new ReplicaInfo(replicaname, replicaname, coll, shard, type, this.node,\n        Collections.singletonMap(ZkStateReader.REPLICA_TYPE, type != null ? type.toString() : Replica.Type.NRT.toString())));\n    for (Cell cell : row.cells) {\n      if (cell.name.equals(\"cores\")) {\n        cell.val = cell.val == null ? 0 : ((Number) cell.val).longValue() + 1;\n      }\n    }\n    return row;\n\n  }\n\n","sourceOld":"  // this adds a replica to the replica info\n  public Row addReplica(String coll, String shard, Replica.Type type) {\n    Row row = copy();\n    Map<String, List<ReplicaInfo>> c = row.collectionVsShardVsReplicas.computeIfAbsent(coll, k -> new HashMap<>());\n    List<ReplicaInfo> replicas = c.computeIfAbsent(shard, k -> new ArrayList<>());\n    String replicaname = \"\" + new Random().nextInt(1000) + 1000;\n    replicas.add(new ReplicaInfo(replicaname,replicaname, coll, shard,\n        Collections.singletonMap(ZkStateReader.REPLICA_TYPE, type != null ? type.toString() : Replica.Type.NRT.toString())));\n    for (Cell cell : row.cells) {\n      if (cell.name.equals(\"cores\")) {\n        cell.val = cell.val == null ? 0 : ((Number) cell.val).longValue() + 1;\n      }\n    }\n    return row;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9f0e33082a86447f4f2b59a1a5f69a310500276a","date":1519970482,"type":3,"author":"noble","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Row#addReplica(String,String,Replica.Type).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Row#addReplica(String,String,Replica.Type).mjava","sourceNew":"  /**\n   * this simulates adding a replica of a certain coll+shard to node. as a result of adding a replica ,\n   * values of certain attributes will be modified, in this node as well as other nodes. Please note that\n   * the state of the current session is kept intact while this operation is being performed\n   *\n   * @param coll  collection name\n   * @param shard shard name\n   * @param type  replica type\n   */\n  public Row addReplica(String coll, String shard, Replica.Type type) {\n    Row row = session.copy().getNode(this.node);\n    if (row == null) throw new RuntimeException(\"couldn't get a row\");\n    Map<String, List<ReplicaInfo>> c = row.collectionVsShardVsReplicas.computeIfAbsent(coll, k -> new HashMap<>());\n    List<ReplicaInfo> replicas = c.computeIfAbsent(shard, k -> new ArrayList<>());\n    String replicaname = \"\" + new Random().nextInt(1000) + 1000;\n    ReplicaInfo ri = new ReplicaInfo(replicaname, replicaname, coll, shard, type, this.node,\n        Utils.makeMap(ZkStateReader.REPLICA_TYPE, type != null ? type.toString() : Replica.Type.NRT.toString()));\n    replicas.add(ri);\n    for (Cell cell : row.cells) {\n      cell.type.projectAddReplica(cell, ri);\n    }\n    return row;\n  }\n\n","sourceOld":"  // this adds a replica to the replica info\n  public Row addReplica(String coll, String shard, Replica.Type type) {\n    Row row = copy();\n    Map<String, List<ReplicaInfo>> c = row.collectionVsShardVsReplicas.computeIfAbsent(coll, k -> new HashMap<>());\n    List<ReplicaInfo> replicas = c.computeIfAbsent(shard, k -> new ArrayList<>());\n    String replicaname = \"\" + new Random().nextInt(1000) + 1000;\n    replicas.add(new ReplicaInfo(replicaname, replicaname, coll, shard, type, this.node,\n        Collections.singletonMap(ZkStateReader.REPLICA_TYPE, type != null ? type.toString() : Replica.Type.NRT.toString())));\n    for (Cell cell : row.cells) {\n      if (cell.name.equals(\"cores\")) {\n        cell.val = cell.val == null ? 0 : ((Number) cell.val).longValue() + 1;\n      }\n    }\n    return row;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"27639bb5e041490ce599065875dd2f6d8beef62a","date":1532829373,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Row#addReplica(String,String,Replica.Type).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Row#addReplica(String,String,Replica.Type).mjava","sourceNew":"  public Row addReplica(String coll, String shard, Replica.Type type) {\n    return addReplica(coll, shard, type, 0, true);\n  }\n\n","sourceOld":"  /**\n   * this simulates adding a replica of a certain coll+shard to node. as a result of adding a replica ,\n   * values of certain attributes will be modified, in this node as well as other nodes. Please note that\n   * the state of the current session is kept intact while this operation is being performed\n   *\n   * @param coll  collection name\n   * @param shard shard name\n   * @param type  replica type\n   */\n  public Row addReplica(String coll, String shard, Replica.Type type) {\n    Row row = session.copy().getNode(this.node);\n    if (row == null) throw new RuntimeException(\"couldn't get a row\");\n    Map<String, List<ReplicaInfo>> c = row.collectionVsShardVsReplicas.computeIfAbsent(coll, k -> new HashMap<>());\n    List<ReplicaInfo> replicas = c.computeIfAbsent(shard, k -> new ArrayList<>());\n    String replicaname = \"\" + new Random().nextInt(1000) + 1000;\n    ReplicaInfo ri = new ReplicaInfo(replicaname, replicaname, coll, shard, type, this.node,\n        Utils.makeMap(ZkStateReader.REPLICA_TYPE, type != null ? type.toString() : Replica.Type.NRT.toString()));\n    replicas.add(ri);\n    for (Cell cell : row.cells) {\n      cell.type.projectAddReplica(cell, ri);\n    }\n    return row;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Row#addReplica(String,String,Replica.Type).mjava","sourceNew":null,"sourceOld":"  public Row addReplica(String coll, String shard, Replica.Type type) {\n    return addReplica(coll, shard, type, 0, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c304e97e7c1d472bc70e801b35ee78583916c6cd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","98f11c416d30e556e0004a9a84960702d12d35b1"],"3f504512a03d978990cbff30db0522b354e846db":["27639bb5e041490ce599065875dd2f6d8beef62a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["560c18d71dad43d675158783c3840f8c80d6d39c"],"9f0e33082a86447f4f2b59a1a5f69a310500276a":["1bbcda32e5cd37ef61ea1190bacd080308e22070"],"1bbcda32e5cd37ef61ea1190bacd080308e22070":["eaca6a0674512222004d9a2b0ca95d86bda20f1c"],"eaca6a0674512222004d9a2b0ca95d86bda20f1c":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"560c18d71dad43d675158783c3840f8c80d6d39c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c304e97e7c1d472bc70e801b35ee78583916c6cd"],"27639bb5e041490ce599065875dd2f6d8beef62a":["9f0e33082a86447f4f2b59a1a5f69a310500276a"],"98f11c416d30e556e0004a9a84960702d12d35b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"c304e97e7c1d472bc70e801b35ee78583916c6cd":["560c18d71dad43d675158783c3840f8c80d6d39c"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c304e97e7c1d472bc70e801b35ee78583916c6cd","560c18d71dad43d675158783c3840f8c80d6d39c","98f11c416d30e556e0004a9a84960702d12d35b1"],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["eaca6a0674512222004d9a2b0ca95d86bda20f1c"],"9f0e33082a86447f4f2b59a1a5f69a310500276a":["27639bb5e041490ce599065875dd2f6d8beef62a"],"1bbcda32e5cd37ef61ea1190bacd080308e22070":["9f0e33082a86447f4f2b59a1a5f69a310500276a"],"eaca6a0674512222004d9a2b0ca95d86bda20f1c":["1bbcda32e5cd37ef61ea1190bacd080308e22070"],"560c18d71dad43d675158783c3840f8c80d6d39c":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"98f11c416d30e556e0004a9a84960702d12d35b1":["c304e97e7c1d472bc70e801b35ee78583916c6cd"],"27639bb5e041490ce599065875dd2f6d8beef62a":["3f504512a03d978990cbff30db0522b354e846db"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}