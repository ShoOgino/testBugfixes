{"path":"lucene/core/src/test/org/apache/lucene/index/TestNorms#buildIndex(Directory).mjava","commits":[{"id":"0837ab0472feecb3a54260729d845f839e1cbd72","date":1358283639,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNorms#buildIndex(Directory).mjava","pathOld":"/dev/null","sourceNew":"  public void buildIndex(Directory dir) throws IOException {\n    Random random = random();\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random()));\n    Similarity provider = new MySimProvider();\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, config);\n    final LineFileDocs docs = new LineFileDocs(random, true);\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      int boost = random().nextInt(255);\n      Field f = new TextField(byteTestField, \"\" + boost, Field.Store.YES);\n      f.setBoost(boost);\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(byteTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n    docs.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNorms#buildIndex(Directory).mjava","pathOld":"/dev/null","sourceNew":"  public void buildIndex(Directory dir) throws IOException {\n    Random random = random();\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random()));\n    Similarity provider = new MySimProvider();\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, config);\n    final LineFileDocs docs = new LineFileDocs(random, true);\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      int boost = random().nextInt(255);\n      Field f = new TextField(byteTestField, \"\" + boost, Field.Store.YES);\n      f.setBoost(boost);\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(byteTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n    docs.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNorms#buildIndex(Directory).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNorms#buildIndex(Directory).mjava","sourceNew":"  public void buildIndex(Directory dir) throws IOException {\n    Random random = random();\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random()));\n    Similarity provider = new MySimProvider();\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, config);\n    final LineFileDocs docs = new LineFileDocs(random, true);\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      int boost = random().nextInt(255);\n      Field f = new TextField(byteTestField, \"\" + boost, Field.Store.YES);\n      f.setBoost(boost);\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(byteTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n    docs.close();\n  }\n\n","sourceOld":"  public void buildIndex(Directory dir) throws IOException {\n    Random random = random();\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random()));\n    Similarity provider = new MySimProvider();\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, config);\n    final LineFileDocs docs = new LineFileDocs(random, true);\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      int boost = random().nextInt(255);\n      Field f = new TextField(byteTestField, \"\" + boost, Field.Store.YES);\n      f.setBoost(boost);\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(byteTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n    docs.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNorms#buildIndex(Directory).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNorms#buildIndex(Directory).mjava","sourceNew":"  public void buildIndex(Directory dir) throws IOException {\n    Random random = random();\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random()));\n    Similarity provider = new MySimProvider();\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, config);\n    final LineFileDocs docs = new LineFileDocs(random, true);\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      int boost = random().nextInt(255);\n      Field f = new TextField(byteTestField, \"\" + boost, Field.Store.YES);\n      f.setBoost(boost);\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(byteTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n    docs.close();\n  }\n\n","sourceOld":"  public void buildIndex(Directory dir) throws IOException {\n    Random random = random();\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random()));\n    Similarity provider = new MySimProvider();\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, config);\n    final LineFileDocs docs = new LineFileDocs(random, true);\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      int boost = random().nextInt(255);\n      Field f = new TextField(byteTestField, \"\" + boost, Field.Store.YES);\n      f.setBoost(boost);\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(byteTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n    docs.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb0af84f7eb1ce29d521e0890c71cb77a167b910","date":1395997467,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNorms#buildIndex(Directory).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNorms#buildIndex(Directory).mjava","sourceNew":"  public void buildIndex(Directory dir) throws IOException {\n    Random random = random();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        analyzer);\n    Similarity provider = new MySimProvider();\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, config);\n    final LineFileDocs docs = new LineFileDocs(random, true);\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      int boost = random().nextInt(255);\n      Field f = new TextField(byteTestField, \"\" + boost, Field.Store.YES);\n      f.setBoost(boost);\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(byteTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n    docs.close();\n  }\n\n","sourceOld":"  public void buildIndex(Directory dir) throws IOException {\n    Random random = random();\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random()));\n    Similarity provider = new MySimProvider();\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, config);\n    final LineFileDocs docs = new LineFileDocs(random, true);\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      int boost = random().nextInt(255);\n      Field f = new TextField(byteTestField, \"\" + boost, Field.Store.YES);\n      f.setBoost(boost);\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(byteTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n    docs.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNorms#buildIndex(Directory).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNorms#buildIndex(Directory).mjava","sourceNew":"  public void buildIndex(Directory dir) throws IOException {\n    Random random = random();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        analyzer);\n    Similarity provider = new MySimProvider();\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, config);\n    final LineFileDocs docs = new LineFileDocs(random, true);\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      int boost = random().nextInt(255);\n      Field f = new TextField(byteTestField, \"\" + boost, Field.Store.YES);\n      f.setBoost(boost);\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(byteTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n    docs.close();\n  }\n\n","sourceOld":"  public void buildIndex(Directory dir) throws IOException {\n    Random random = random();\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random()));\n    Similarity provider = new MySimProvider();\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, config);\n    final LineFileDocs docs = new LineFileDocs(random, true);\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      int boost = random().nextInt(255);\n      Field f = new TextField(byteTestField, \"\" + boost, Field.Store.YES);\n      f.setBoost(boost);\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(byteTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n    docs.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNorms#buildIndex(Directory).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNorms#buildIndex(Directory).mjava","sourceNew":"  public void buildIndex(Directory dir) throws IOException {\n    Random random = random();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        analyzer);\n    Similarity provider = new MySimProvider();\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, config);\n    final LineFileDocs docs = new LineFileDocs(random, true);\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      int boost = random().nextInt(255);\n      Field f = new TextField(byteTestField, \"\" + boost, Field.Store.YES);\n      f.setBoost(boost);\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(byteTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.shutdown();\n    docs.close();\n  }\n\n","sourceOld":"  public void buildIndex(Directory dir) throws IOException {\n    Random random = random();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        analyzer);\n    Similarity provider = new MySimProvider();\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, config);\n    final LineFileDocs docs = new LineFileDocs(random, true);\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      int boost = random().nextInt(255);\n      Field f = new TextField(byteTestField, \"\" + boost, Field.Store.YES);\n      f.setBoost(boost);\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(byteTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n    docs.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNorms#buildIndex(Directory).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNorms#buildIndex(Directory).mjava","sourceNew":"  public void buildIndex(Directory dir) throws IOException {\n    Random random = random();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n    IndexWriterConfig config = newIndexWriterConfig(analyzer);\n    Similarity provider = new MySimProvider();\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, config);\n    final LineFileDocs docs = new LineFileDocs(random, true);\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      int boost = random().nextInt(255);\n      Field f = new TextField(byteTestField, \"\" + boost, Field.Store.YES);\n      f.setBoost(boost);\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(byteTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.shutdown();\n    docs.close();\n  }\n\n","sourceOld":"  public void buildIndex(Directory dir) throws IOException {\n    Random random = random();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        analyzer);\n    Similarity provider = new MySimProvider();\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, config);\n    final LineFileDocs docs = new LineFileDocs(random, true);\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      int boost = random().nextInt(255);\n      Field f = new TextField(byteTestField, \"\" + boost, Field.Store.YES);\n      f.setBoost(boost);\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(byteTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.shutdown();\n    docs.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNorms#buildIndex(Directory).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNorms#buildIndex(Directory).mjava","sourceNew":"  public void buildIndex(Directory dir) throws IOException {\n    Random random = random();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n    IndexWriterConfig config = newIndexWriterConfig(analyzer);\n    Similarity provider = new MySimProvider();\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, config);\n    final LineFileDocs docs = new LineFileDocs(random, true);\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      int boost = random().nextInt(255);\n      Field f = new TextField(byteTestField, \"\" + boost, Field.Store.YES);\n      f.setBoost(boost);\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(byteTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n    docs.close();\n  }\n\n","sourceOld":"  public void buildIndex(Directory dir) throws IOException {\n    Random random = random();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n    IndexWriterConfig config = newIndexWriterConfig(analyzer);\n    Similarity provider = new MySimProvider();\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, config);\n    final LineFileDocs docs = new LineFileDocs(random, true);\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      int boost = random().nextInt(255);\n      Field f = new TextField(byteTestField, \"\" + boost, Field.Store.YES);\n      f.setBoost(boost);\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(byteTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.shutdown();\n    docs.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"221076a44effb5561a3b799974ba1a35119fbcc0","date":1457468497,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNorms#buildIndex(Directory).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNorms#buildIndex(Directory).mjava","sourceNew":"  public void buildIndex(Directory dir) throws IOException {\n    Random random = random();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n    IndexWriterConfig config = newIndexWriterConfig(analyzer);\n    Similarity provider = new MySimProvider();\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, config);\n    final LineFileDocs docs = new LineFileDocs(random);\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      int boost = random().nextInt(255);\n      Field f = new TextField(byteTestField, \"\" + boost, Field.Store.YES);\n      f.setBoost(boost);\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(byteTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n    docs.close();\n  }\n\n","sourceOld":"  public void buildIndex(Directory dir) throws IOException {\n    Random random = random();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n    IndexWriterConfig config = newIndexWriterConfig(analyzer);\n    Similarity provider = new MySimProvider();\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, config);\n    final LineFileDocs docs = new LineFileDocs(random, true);\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      int boost = random().nextInt(255);\n      Field f = new TextField(byteTestField, \"\" + boost, Field.Store.YES);\n      f.setBoost(boost);\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(byteTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n    docs.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"acd9883560fd89e6448b2b447302fe543040cd4f","date":1488478696,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNorms#buildIndex(Directory).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNorms#buildIndex(Directory).mjava","sourceNew":"  public void buildIndex(Directory dir) throws IOException {\n    Random random = random();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n    IndexWriterConfig config = newIndexWriterConfig(analyzer);\n    Similarity provider = new MySimProvider();\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, config);\n    final LineFileDocs docs = new LineFileDocs(random);\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      int boost = TestUtil.nextInt(random, 1, 255);\n      String value = IntStream.range(0, boost).mapToObj(k -> Integer.toString(boost)).collect(Collectors.joining(\" \"));\n      Field f = new TextField(byteTestField, value, Field.Store.YES);\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(byteTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n    docs.close();\n  }\n\n","sourceOld":"  public void buildIndex(Directory dir) throws IOException {\n    Random random = random();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n    IndexWriterConfig config = newIndexWriterConfig(analyzer);\n    Similarity provider = new MySimProvider();\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, config);\n    final LineFileDocs docs = new LineFileDocs(random);\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      int boost = random().nextInt(255);\n      Field f = new TextField(byteTestField, \"\" + boost, Field.Store.YES);\n      f.setBoost(boost);\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(byteTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n    docs.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5de502b5478255493125e7e801411ba17a6682ec","date":1490974101,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNorms#buildIndex(Directory).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNorms#buildIndex(Directory).mjava","sourceNew":"  public void buildIndex(Directory dir) throws IOException {\n    Random random = random();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n    IndexWriterConfig config = newIndexWriterConfig(analyzer);\n    Similarity provider = new MySimProvider();\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, config);\n    final LineFileDocs docs = new LineFileDocs(random);\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      int boost = TestUtil.nextInt(random, 1, 255);\n      String value = IntStream.range(0, boost).mapToObj(k -> Integer.toString(boost)).collect(Collectors.joining(\" \"));\n      Field f = new TextField(BYTE_TEST_FIELD, value, Field.Store.YES);\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(BYTE_TEST_FIELD);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n    docs.close();\n  }\n\n","sourceOld":"  public void buildIndex(Directory dir) throws IOException {\n    Random random = random();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n    IndexWriterConfig config = newIndexWriterConfig(analyzer);\n    Similarity provider = new MySimProvider();\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, config);\n    final LineFileDocs docs = new LineFileDocs(random);\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      int boost = TestUtil.nextInt(random, 1, 255);\n      String value = IntStream.range(0, boost).mapToObj(k -> Integer.toString(boost)).collect(Collectors.joining(\" \"));\n      Field f = new TextField(byteTestField, value, Field.Store.YES);\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(byteTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n    docs.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6f20fd35e3055a0c5b387df0b986a68d65d86441","date":1491045405,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNorms#buildIndex(Directory).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNorms#buildIndex(Directory).mjava","sourceNew":"  public void buildIndex(Directory dir) throws IOException {\n    Random random = random();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n    IndexWriterConfig config = newIndexWriterConfig(analyzer);\n    Similarity provider = new MySimProvider();\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, config);\n    final LineFileDocs docs = new LineFileDocs(random);\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      int boost = TestUtil.nextInt(random, 1, 255);\n      String value = IntStream.range(0, boost).mapToObj(k -> Integer.toString(boost)).collect(Collectors.joining(\" \"));\n      Field f = new TextField(BYTE_TEST_FIELD, value, Field.Store.YES);\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(BYTE_TEST_FIELD);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n    docs.close();\n  }\n\n","sourceOld":"  public void buildIndex(Directory dir) throws IOException {\n    Random random = random();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n    IndexWriterConfig config = newIndexWriterConfig(analyzer);\n    Similarity provider = new MySimProvider();\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, config);\n    final LineFileDocs docs = new LineFileDocs(random);\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      int boost = TestUtil.nextInt(random, 1, 255);\n      String value = IntStream.range(0, boost).mapToObj(k -> Integer.toString(boost)).collect(Collectors.joining(\" \"));\n      Field f = new TextField(byteTestField, value, Field.Store.YES);\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(byteTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n    docs.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e57fe83328dc248c3b2a259727b61d1c67d2797c","date":1525853058,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNorms#buildIndex(Directory).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNorms#buildIndex(Directory).mjava","sourceNew":"  public void buildIndex(Directory dir) throws IOException {\n    Random random = random();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    // we need at least 3 for maxTokenLength otherwise norms are messed up\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 3, IndexWriter.MAX_TERM_LENGTH));\n    IndexWriterConfig config = newIndexWriterConfig(analyzer);\n    Similarity provider = new MySimProvider();\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, config);\n    final LineFileDocs docs = new LineFileDocs(random);\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      int boost = TestUtil.nextInt(random, 1, 255);\n      String value = IntStream.range(0, boost).mapToObj(k -> Integer.toString(boost)).collect(Collectors.joining(\" \"));\n      Field f = new TextField(BYTE_TEST_FIELD, value, Field.Store.YES);\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(BYTE_TEST_FIELD);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n    docs.close();\n  }\n\n","sourceOld":"  public void buildIndex(Directory dir) throws IOException {\n    Random random = random();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n    IndexWriterConfig config = newIndexWriterConfig(analyzer);\n    Similarity provider = new MySimProvider();\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, config);\n    final LineFileDocs docs = new LineFileDocs(random);\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      int boost = TestUtil.nextInt(random, 1, 255);\n      String value = IntStream.range(0, boost).mapToObj(k -> Integer.toString(boost)).collect(Collectors.joining(\" \"));\n      Field f = new TextField(BYTE_TEST_FIELD, value, Field.Store.YES);\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(BYTE_TEST_FIELD);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n    docs.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4208ed8e426ae5f75a41d8b4ae53f4587e413061","date":1580475454,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNorms#buildIndex(Directory).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNorms#buildIndex(Directory).mjava","sourceNew":"  public void buildIndex(Directory dir) throws IOException {\n    Random random = random();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    // we need at least 3 for maxTokenLength otherwise norms are messed up\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 3, IndexWriter.MAX_TERM_LENGTH));\n    IndexWriterConfig config = newIndexWriterConfig(analyzer);\n    Similarity provider = new MySimProvider();\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, config);\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = new Document();\n      int boost = TestUtil.nextInt(random, 1, 255);\n      String value = IntStream.range(0, boost).mapToObj(k -> Integer.toString(boost)).collect(Collectors.joining(\" \"));\n      Field f = new TextField(BYTE_TEST_FIELD, value, Field.Store.YES);\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(BYTE_TEST_FIELD);\n    }\n    writer.commit();\n    writer.close();\n  }\n\n","sourceOld":"  public void buildIndex(Directory dir) throws IOException {\n    Random random = random();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    // we need at least 3 for maxTokenLength otherwise norms are messed up\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 3, IndexWriter.MAX_TERM_LENGTH));\n    IndexWriterConfig config = newIndexWriterConfig(analyzer);\n    Similarity provider = new MySimProvider();\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, config);\n    final LineFileDocs docs = new LineFileDocs(random);\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      int boost = TestUtil.nextInt(random, 1, 255);\n      String value = IntStream.range(0, boost).mapToObj(k -> Integer.toString(boost)).collect(Collectors.joining(\" \"));\n      Field f = new TextField(BYTE_TEST_FIELD, value, Field.Store.YES);\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(BYTE_TEST_FIELD);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n    docs.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5eb2511ababf862ea11e10761c70ee560cd84510":["19275ba31e621f6da1b83bf13af75233876fd3d4","fb0af84f7eb1ce29d521e0890c71cb77a167b910"],"5de502b5478255493125e7e801411ba17a6682ec":["acd9883560fd89e6448b2b447302fe543040cd4f"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"6f20fd35e3055a0c5b387df0b986a68d65d86441":["acd9883560fd89e6448b2b447302fe543040cd4f"],"e57fe83328dc248c3b2a259727b61d1c67d2797c":["5de502b5478255493125e7e801411ba17a6682ec"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"221076a44effb5561a3b799974ba1a35119fbcc0":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"fb0af84f7eb1ce29d521e0890c71cb77a167b910":["19275ba31e621f6da1b83bf13af75233876fd3d4"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0837ab0472feecb3a54260729d845f839e1cbd72"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"4208ed8e426ae5f75a41d8b4ae53f4587e413061":["e57fe83328dc248c3b2a259727b61d1c67d2797c"],"0837ab0472feecb3a54260729d845f839e1cbd72":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["fb0af84f7eb1ce29d521e0890c71cb77a167b910"],"acd9883560fd89e6448b2b447302fe543040cd4f":["221076a44effb5561a3b799974ba1a35119fbcc0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4208ed8e426ae5f75a41d8b4ae53f4587e413061"]},"commit2Childs":{"5eb2511ababf862ea11e10761c70ee560cd84510":[],"5de502b5478255493125e7e801411ba17a6682ec":["e57fe83328dc248c3b2a259727b61d1c67d2797c"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"6f20fd35e3055a0c5b387df0b986a68d65d86441":[],"e57fe83328dc248c3b2a259727b61d1c67d2797c":["4208ed8e426ae5f75a41d8b4ae53f4587e413061"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["5eb2511ababf862ea11e10761c70ee560cd84510","fb0af84f7eb1ce29d521e0890c71cb77a167b910"],"221076a44effb5561a3b799974ba1a35119fbcc0":["acd9883560fd89e6448b2b447302fe543040cd4f"],"fb0af84f7eb1ce29d521e0890c71cb77a167b910":["5eb2511ababf862ea11e10761c70ee560cd84510","ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["19275ba31e621f6da1b83bf13af75233876fd3d4","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d4d69c535930b5cce125cff868d40f6373dc27d4","0837ab0472feecb3a54260729d845f839e1cbd72"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["221076a44effb5561a3b799974ba1a35119fbcc0"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"0837ab0472feecb3a54260729d845f839e1cbd72":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"4208ed8e426ae5f75a41d8b4ae53f4587e413061":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"acd9883560fd89e6448b2b447302fe543040cd4f":["5de502b5478255493125e7e801411ba17a6682ec","6f20fd35e3055a0c5b387df0b986a68d65d86441"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","6f20fd35e3055a0c5b387df0b986a68d65d86441","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}