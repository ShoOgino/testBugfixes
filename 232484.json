{"path":"lucene/sandbox/src/test/org/apache/lucene/geo/TestRectangle2D#testRandomTriangles().mjava","commits":[{"id":"9feee35369998c08f5168e0808e67e09857d5bac","date":1544618795,"type":0,"author":"iverase","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/geo/TestRectangle2D#testRandomTriangles().mjava","pathOld":"/dev/null","sourceNew":"  public void testRandomTriangles() {\n    Rectangle rectangle = GeoTestUtil.nextBox();\n    Rectangle2D rectangle2D = Rectangle2D.create(rectangle);\n\n    for (int i =0; i < 100; i++) {\n      int ax = GeoEncodingUtils.encodeLongitude(GeoTestUtil.nextLongitude());\n      int ay = GeoEncodingUtils.encodeLatitude(GeoTestUtil.nextLatitude());\n      int bx = GeoEncodingUtils.encodeLongitude(GeoTestUtil.nextLongitude());\n      int by = GeoEncodingUtils.encodeLatitude(GeoTestUtil.nextLatitude());\n      int cx = GeoEncodingUtils.encodeLongitude(GeoTestUtil.nextLongitude());\n      int cy = GeoEncodingUtils.encodeLatitude(GeoTestUtil.nextLatitude());\n\n      int tMinX = StrictMath.min(StrictMath.min(ax, bx), cx);\n      int tMaxX = StrictMath.max(StrictMath.max(ax, bx), cx);\n      int tMinY = StrictMath.min(StrictMath.min(ay, by), cy);\n      int tMaxY = StrictMath.max(StrictMath.max(ay, by), cy);\n\n      byte[] triangle = new byte[4 * LatLonShape.BYTES];\n      LatLonShape.encodeTriangleBoxVal(tMinY, triangle, 0);\n      LatLonShape.encodeTriangleBoxVal(tMinX, triangle, BYTES);\n      LatLonShape.encodeTriangleBoxVal(tMaxY, triangle, 2 * BYTES);\n      LatLonShape.encodeTriangleBoxVal(tMaxX, triangle, 3 * BYTES);\n\n      PointValues.Relation r = rectangle2D.relateRangeBBox(LatLonShape.BYTES, 0, triangle, 3 * LatLonShape.BYTES, 2 * LatLonShape.BYTES, triangle);\n      if (r == PointValues.Relation.CELL_OUTSIDE_QUERY) {\n        assertFalse(rectangle2D.intersectsTriangle(ax, ay, bx, by , cx, cy));\n        assertFalse(rectangle2D.containsTriangle(ax, ay, bx, by , cx, cy));\n      }\n      else if (rectangle2D.containsTriangle(ax, ay, bx, by , cx, cy)) {\n        assertTrue(rectangle2D.intersectsTriangle(ax, ay, bx, by , cx, cy));\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2aeefba8262036d422d639e48c49d51316bea138","date":1545148224,"type":3,"author":"iverase","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/geo/TestRectangle2D#testRandomTriangles().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/geo/TestRectangle2D#testRandomTriangles().mjava","sourceNew":"  public void testRandomTriangles() {\n    Rectangle rectangle = GeoTestUtil.nextBox();\n    Rectangle2D rectangle2D = Rectangle2D.create(rectangle);\n\n    for (int i =0; i < 100; i++) {\n      int ax = GeoEncodingUtils.encodeLongitude(GeoTestUtil.nextLongitude());\n      int ay = GeoEncodingUtils.encodeLatitude(GeoTestUtil.nextLatitude());\n      int bx = GeoEncodingUtils.encodeLongitude(GeoTestUtil.nextLongitude());\n      int by = GeoEncodingUtils.encodeLatitude(GeoTestUtil.nextLatitude());\n      int cx = GeoEncodingUtils.encodeLongitude(GeoTestUtil.nextLongitude());\n      int cy = GeoEncodingUtils.encodeLatitude(GeoTestUtil.nextLatitude());\n\n      int tMinX = StrictMath.min(StrictMath.min(ax, bx), cx);\n      int tMaxX = StrictMath.max(StrictMath.max(ax, bx), cx);\n      int tMinY = StrictMath.min(StrictMath.min(ay, by), cy);\n      int tMaxY = StrictMath.max(StrictMath.max(ay, by), cy);\n\n      byte[] triangle = new byte[4 * LatLonShape.BYTES];\n      NumericUtils.intToSortableBytes(tMinY, triangle, 0);\n      NumericUtils.intToSortableBytes(tMinX, triangle, BYTES);\n      NumericUtils.intToSortableBytes(tMaxY, triangle, 2 * BYTES);\n      NumericUtils.intToSortableBytes(tMaxX, triangle, 3 * BYTES);\n\n      PointValues.Relation r = rectangle2D.relateRangeBBox(LatLonShape.BYTES, 0, triangle, 3 * LatLonShape.BYTES, 2 * LatLonShape.BYTES, triangle);\n      if (r == PointValues.Relation.CELL_OUTSIDE_QUERY) {\n        assertFalse(rectangle2D.intersectsTriangle(ax, ay, bx, by , cx, cy));\n        assertFalse(rectangle2D.containsTriangle(ax, ay, bx, by , cx, cy));\n      }\n      else if (rectangle2D.containsTriangle(ax, ay, bx, by , cx, cy)) {\n        assertTrue(rectangle2D.intersectsTriangle(ax, ay, bx, by , cx, cy));\n      }\n    }\n  }\n\n","sourceOld":"  public void testRandomTriangles() {\n    Rectangle rectangle = GeoTestUtil.nextBox();\n    Rectangle2D rectangle2D = Rectangle2D.create(rectangle);\n\n    for (int i =0; i < 100; i++) {\n      int ax = GeoEncodingUtils.encodeLongitude(GeoTestUtil.nextLongitude());\n      int ay = GeoEncodingUtils.encodeLatitude(GeoTestUtil.nextLatitude());\n      int bx = GeoEncodingUtils.encodeLongitude(GeoTestUtil.nextLongitude());\n      int by = GeoEncodingUtils.encodeLatitude(GeoTestUtil.nextLatitude());\n      int cx = GeoEncodingUtils.encodeLongitude(GeoTestUtil.nextLongitude());\n      int cy = GeoEncodingUtils.encodeLatitude(GeoTestUtil.nextLatitude());\n\n      int tMinX = StrictMath.min(StrictMath.min(ax, bx), cx);\n      int tMaxX = StrictMath.max(StrictMath.max(ax, bx), cx);\n      int tMinY = StrictMath.min(StrictMath.min(ay, by), cy);\n      int tMaxY = StrictMath.max(StrictMath.max(ay, by), cy);\n\n      byte[] triangle = new byte[4 * LatLonShape.BYTES];\n      LatLonShape.encodeTriangleBoxVal(tMinY, triangle, 0);\n      LatLonShape.encodeTriangleBoxVal(tMinX, triangle, BYTES);\n      LatLonShape.encodeTriangleBoxVal(tMaxY, triangle, 2 * BYTES);\n      LatLonShape.encodeTriangleBoxVal(tMaxX, triangle, 3 * BYTES);\n\n      PointValues.Relation r = rectangle2D.relateRangeBBox(LatLonShape.BYTES, 0, triangle, 3 * LatLonShape.BYTES, 2 * LatLonShape.BYTES, triangle);\n      if (r == PointValues.Relation.CELL_OUTSIDE_QUERY) {\n        assertFalse(rectangle2D.intersectsTriangle(ax, ay, bx, by , cx, cy));\n        assertFalse(rectangle2D.containsTriangle(ax, ay, bx, by , cx, cy));\n      }\n      else if (rectangle2D.containsTriangle(ax, ay, bx, by , cx, cy)) {\n        assertTrue(rectangle2D.intersectsTriangle(ax, ay, bx, by , cx, cy));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6d284e8652a9d71490d15140fe4f95dfd5a995c4","date":1547733618,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/geo/TestRectangle2D#testRandomTriangles().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/geo/TestRectangle2D#testRandomTriangles().mjava","sourceNew":"  public void testRandomTriangles() {\n    Rectangle rectangle = GeoTestUtil.nextBox();\n    Rectangle2D rectangle2D = Rectangle2D.create(rectangle);\n\n    for (int i =0; i < 100; i++) {\n      int ax = GeoEncodingUtils.encodeLongitude(GeoTestUtil.nextLongitude());\n      int ay = GeoEncodingUtils.encodeLatitude(GeoTestUtil.nextLatitude());\n      int bx = GeoEncodingUtils.encodeLongitude(GeoTestUtil.nextLongitude());\n      int by = GeoEncodingUtils.encodeLatitude(GeoTestUtil.nextLatitude());\n      int cx = GeoEncodingUtils.encodeLongitude(GeoTestUtil.nextLongitude());\n      int cy = GeoEncodingUtils.encodeLatitude(GeoTestUtil.nextLatitude());\n\n      int tMinX = StrictMath.min(StrictMath.min(ax, bx), cx);\n      int tMaxX = StrictMath.max(StrictMath.max(ax, bx), cx);\n      int tMinY = StrictMath.min(StrictMath.min(ay, by), cy);\n      int tMaxY = StrictMath.max(StrictMath.max(ay, by), cy);\n\n      byte[] triangle = new byte[4 * BYTES];\n      NumericUtils.intToSortableBytes(tMinY, triangle, 0);\n      NumericUtils.intToSortableBytes(tMinX, triangle, BYTES);\n      NumericUtils.intToSortableBytes(tMaxY, triangle, 2 * BYTES);\n      NumericUtils.intToSortableBytes(tMaxX, triangle, 3 * BYTES);\n\n      PointValues.Relation r = rectangle2D.relateRangeBBox(BYTES, 0, triangle, 3 * BYTES, 2 * BYTES, triangle);\n      if (r == PointValues.Relation.CELL_OUTSIDE_QUERY) {\n        assertFalse(rectangle2D.intersectsTriangle(ax, ay, bx, by , cx, cy));\n        assertFalse(rectangle2D.containsTriangle(ax, ay, bx, by , cx, cy));\n      }\n      else if (rectangle2D.containsTriangle(ax, ay, bx, by , cx, cy)) {\n        assertTrue(rectangle2D.intersectsTriangle(ax, ay, bx, by , cx, cy));\n      }\n    }\n  }\n\n","sourceOld":"  public void testRandomTriangles() {\n    Rectangle rectangle = GeoTestUtil.nextBox();\n    Rectangle2D rectangle2D = Rectangle2D.create(rectangle);\n\n    for (int i =0; i < 100; i++) {\n      int ax = GeoEncodingUtils.encodeLongitude(GeoTestUtil.nextLongitude());\n      int ay = GeoEncodingUtils.encodeLatitude(GeoTestUtil.nextLatitude());\n      int bx = GeoEncodingUtils.encodeLongitude(GeoTestUtil.nextLongitude());\n      int by = GeoEncodingUtils.encodeLatitude(GeoTestUtil.nextLatitude());\n      int cx = GeoEncodingUtils.encodeLongitude(GeoTestUtil.nextLongitude());\n      int cy = GeoEncodingUtils.encodeLatitude(GeoTestUtil.nextLatitude());\n\n      int tMinX = StrictMath.min(StrictMath.min(ax, bx), cx);\n      int tMaxX = StrictMath.max(StrictMath.max(ax, bx), cx);\n      int tMinY = StrictMath.min(StrictMath.min(ay, by), cy);\n      int tMaxY = StrictMath.max(StrictMath.max(ay, by), cy);\n\n      byte[] triangle = new byte[4 * LatLonShape.BYTES];\n      NumericUtils.intToSortableBytes(tMinY, triangle, 0);\n      NumericUtils.intToSortableBytes(tMinX, triangle, BYTES);\n      NumericUtils.intToSortableBytes(tMaxY, triangle, 2 * BYTES);\n      NumericUtils.intToSortableBytes(tMaxX, triangle, 3 * BYTES);\n\n      PointValues.Relation r = rectangle2D.relateRangeBBox(LatLonShape.BYTES, 0, triangle, 3 * LatLonShape.BYTES, 2 * LatLonShape.BYTES, triangle);\n      if (r == PointValues.Relation.CELL_OUTSIDE_QUERY) {\n        assertFalse(rectangle2D.intersectsTriangle(ax, ay, bx, by , cx, cy));\n        assertFalse(rectangle2D.containsTriangle(ax, ay, bx, by , cx, cy));\n      }\n      else if (rectangle2D.containsTriangle(ax, ay, bx, by , cx, cy)) {\n        assertTrue(rectangle2D.intersectsTriangle(ax, ay, bx, by , cx, cy));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5e32619a05801247e931ce6b9998721600e247b0","date":1570166014,"type":3,"author":"Igor Motov","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/geo/TestRectangle2D#testRandomTriangles().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/geo/TestRectangle2D#testRandomTriangles().mjava","sourceNew":"  public void testRandomTriangles() {\n    Rectangle rectangle = GeoTestUtil.nextBox();\n    Rectangle2D rectangle2D = Rectangle2D.create(rectangle);\n\n    for (int i =0; i < 100; i++) {\n      int ax = GeoEncodingUtils.encodeLongitude(GeoTestUtil.nextLongitude());\n      int ay = GeoEncodingUtils.encodeLatitude(GeoTestUtil.nextLatitude());\n      int bx = GeoEncodingUtils.encodeLongitude(GeoTestUtil.nextLongitude());\n      int by = GeoEncodingUtils.encodeLatitude(GeoTestUtil.nextLatitude());\n      int cx = GeoEncodingUtils.encodeLongitude(GeoTestUtil.nextLongitude());\n      int cy = GeoEncodingUtils.encodeLatitude(GeoTestUtil.nextLatitude());\n\n      int tMinX = StrictMath.min(StrictMath.min(ax, bx), cx);\n      int tMaxX = StrictMath.max(StrictMath.max(ax, bx), cx);\n      int tMinY = StrictMath.min(StrictMath.min(ay, by), cy);\n      int tMaxY = StrictMath.max(StrictMath.max(ay, by), cy);\n\n      byte[] triangle = new byte[4 * BYTES];\n      NumericUtils.intToSortableBytes(tMinY, triangle, 0);\n      NumericUtils.intToSortableBytes(tMinX, triangle, BYTES);\n      NumericUtils.intToSortableBytes(tMaxY, triangle, 2 * BYTES);\n      NumericUtils.intToSortableBytes(tMaxX, triangle, 3 * BYTES);\n\n      PointValues.Relation r;\n      if (random().nextBoolean()) {\n        r = rectangle2D.relateRangeBBox(BYTES, 0, triangle, 3 * BYTES, 2 * BYTES, triangle);\n      } else {\n        r = rectangle2D.intersectRangeBBox(BYTES, 0, triangle, 3 * BYTES, 2 * BYTES, triangle);\n      }\n\n      if (r == PointValues.Relation.CELL_OUTSIDE_QUERY) {\n        assertFalse(rectangle2D.intersectsTriangle(ax, ay, bx, by , cx, cy));\n        assertFalse(rectangle2D.containsTriangle(ax, ay, bx, by , cx, cy));\n      }\n      else if (rectangle2D.containsTriangle(ax, ay, bx, by , cx, cy)) {\n        assertTrue(rectangle2D.intersectsTriangle(ax, ay, bx, by , cx, cy));\n      }\n    }\n  }\n\n","sourceOld":"  public void testRandomTriangles() {\n    Rectangle rectangle = GeoTestUtil.nextBox();\n    Rectangle2D rectangle2D = Rectangle2D.create(rectangle);\n\n    for (int i =0; i < 100; i++) {\n      int ax = GeoEncodingUtils.encodeLongitude(GeoTestUtil.nextLongitude());\n      int ay = GeoEncodingUtils.encodeLatitude(GeoTestUtil.nextLatitude());\n      int bx = GeoEncodingUtils.encodeLongitude(GeoTestUtil.nextLongitude());\n      int by = GeoEncodingUtils.encodeLatitude(GeoTestUtil.nextLatitude());\n      int cx = GeoEncodingUtils.encodeLongitude(GeoTestUtil.nextLongitude());\n      int cy = GeoEncodingUtils.encodeLatitude(GeoTestUtil.nextLatitude());\n\n      int tMinX = StrictMath.min(StrictMath.min(ax, bx), cx);\n      int tMaxX = StrictMath.max(StrictMath.max(ax, bx), cx);\n      int tMinY = StrictMath.min(StrictMath.min(ay, by), cy);\n      int tMaxY = StrictMath.max(StrictMath.max(ay, by), cy);\n\n      byte[] triangle = new byte[4 * BYTES];\n      NumericUtils.intToSortableBytes(tMinY, triangle, 0);\n      NumericUtils.intToSortableBytes(tMinX, triangle, BYTES);\n      NumericUtils.intToSortableBytes(tMaxY, triangle, 2 * BYTES);\n      NumericUtils.intToSortableBytes(tMaxX, triangle, 3 * BYTES);\n\n      PointValues.Relation r = rectangle2D.relateRangeBBox(BYTES, 0, triangle, 3 * BYTES, 2 * BYTES, triangle);\n      if (r == PointValues.Relation.CELL_OUTSIDE_QUERY) {\n        assertFalse(rectangle2D.intersectsTriangle(ax, ay, bx, by , cx, cy));\n        assertFalse(rectangle2D.containsTriangle(ax, ay, bx, by , cx, cy));\n      }\n      else if (rectangle2D.containsTriangle(ax, ay, bx, by , cx, cy)) {\n        assertTrue(rectangle2D.intersectsTriangle(ax, ay, bx, by , cx, cy));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":3,"author":"jimczi","isMerge":true,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/geo/TestRectangle2D#testRandomTriangles().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/geo/TestRectangle2D#testRandomTriangles().mjava","sourceNew":"  public void testRandomTriangles() {\n    Rectangle rectangle = GeoTestUtil.nextBox();\n    Rectangle2D rectangle2D = Rectangle2D.create(rectangle);\n\n    for (int i =0; i < 100; i++) {\n      int ax = GeoEncodingUtils.encodeLongitude(GeoTestUtil.nextLongitude());\n      int ay = GeoEncodingUtils.encodeLatitude(GeoTestUtil.nextLatitude());\n      int bx = GeoEncodingUtils.encodeLongitude(GeoTestUtil.nextLongitude());\n      int by = GeoEncodingUtils.encodeLatitude(GeoTestUtil.nextLatitude());\n      int cx = GeoEncodingUtils.encodeLongitude(GeoTestUtil.nextLongitude());\n      int cy = GeoEncodingUtils.encodeLatitude(GeoTestUtil.nextLatitude());\n\n      int tMinX = StrictMath.min(StrictMath.min(ax, bx), cx);\n      int tMaxX = StrictMath.max(StrictMath.max(ax, bx), cx);\n      int tMinY = StrictMath.min(StrictMath.min(ay, by), cy);\n      int tMaxY = StrictMath.max(StrictMath.max(ay, by), cy);\n\n      byte[] triangle = new byte[4 * BYTES];\n      NumericUtils.intToSortableBytes(tMinY, triangle, 0);\n      NumericUtils.intToSortableBytes(tMinX, triangle, BYTES);\n      NumericUtils.intToSortableBytes(tMaxY, triangle, 2 * BYTES);\n      NumericUtils.intToSortableBytes(tMaxX, triangle, 3 * BYTES);\n\n      PointValues.Relation r;\n      if (random().nextBoolean()) {\n        r = rectangle2D.relateRangeBBox(BYTES, 0, triangle, 3 * BYTES, 2 * BYTES, triangle);\n      } else {\n        r = rectangle2D.intersectRangeBBox(BYTES, 0, triangle, 3 * BYTES, 2 * BYTES, triangle);\n      }\n\n      if (r == PointValues.Relation.CELL_OUTSIDE_QUERY) {\n        assertFalse(rectangle2D.intersectsTriangle(ax, ay, bx, by , cx, cy));\n        assertFalse(rectangle2D.containsTriangle(ax, ay, bx, by , cx, cy));\n      }\n      else if (rectangle2D.containsTriangle(ax, ay, bx, by , cx, cy)) {\n        assertTrue(rectangle2D.intersectsTriangle(ax, ay, bx, by , cx, cy));\n      }\n    }\n  }\n\n","sourceOld":"  public void testRandomTriangles() {\n    Rectangle rectangle = GeoTestUtil.nextBox();\n    Rectangle2D rectangle2D = Rectangle2D.create(rectangle);\n\n    for (int i =0; i < 100; i++) {\n      int ax = GeoEncodingUtils.encodeLongitude(GeoTestUtil.nextLongitude());\n      int ay = GeoEncodingUtils.encodeLatitude(GeoTestUtil.nextLatitude());\n      int bx = GeoEncodingUtils.encodeLongitude(GeoTestUtil.nextLongitude());\n      int by = GeoEncodingUtils.encodeLatitude(GeoTestUtil.nextLatitude());\n      int cx = GeoEncodingUtils.encodeLongitude(GeoTestUtil.nextLongitude());\n      int cy = GeoEncodingUtils.encodeLatitude(GeoTestUtil.nextLatitude());\n\n      int tMinX = StrictMath.min(StrictMath.min(ax, bx), cx);\n      int tMaxX = StrictMath.max(StrictMath.max(ax, bx), cx);\n      int tMinY = StrictMath.min(StrictMath.min(ay, by), cy);\n      int tMaxY = StrictMath.max(StrictMath.max(ay, by), cy);\n\n      byte[] triangle = new byte[4 * BYTES];\n      NumericUtils.intToSortableBytes(tMinY, triangle, 0);\n      NumericUtils.intToSortableBytes(tMinX, triangle, BYTES);\n      NumericUtils.intToSortableBytes(tMaxY, triangle, 2 * BYTES);\n      NumericUtils.intToSortableBytes(tMaxX, triangle, 3 * BYTES);\n\n      PointValues.Relation r = rectangle2D.relateRangeBBox(BYTES, 0, triangle, 3 * BYTES, 2 * BYTES, triangle);\n      if (r == PointValues.Relation.CELL_OUTSIDE_QUERY) {\n        assertFalse(rectangle2D.intersectsTriangle(ax, ay, bx, by , cx, cy));\n        assertFalse(rectangle2D.containsTriangle(ax, ay, bx, by , cx, cy));\n      }\n      else if (rectangle2D.containsTriangle(ax, ay, bx, by , cx, cy)) {\n        assertTrue(rectangle2D.intersectsTriangle(ax, ay, bx, by , cx, cy));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f2d8fb73c718c3fc5600f453cc514f18ae1b8c3","date":1576052211,"type":3,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/geo/TestRectangle2D#testRandomTriangles().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/geo/TestRectangle2D#testRandomTriangles().mjava","sourceNew":"  public void testRandomTriangles() {\n    Rectangle rectangle = GeoTestUtil.nextBox();\n    while(rectangle.crossesDateline()) {\n      rectangle = GeoTestUtil.nextBox();\n    }\n    Rectangle2D rectangle2D = Rectangle2D.create(rectangle);\n\n    for (int i =0; i < 100; i++) {\n      int ax = GeoEncodingUtils.encodeLongitude(GeoTestUtil.nextLongitude());\n      int ay = GeoEncodingUtils.encodeLatitude(GeoTestUtil.nextLatitude());\n      int bx = GeoEncodingUtils.encodeLongitude(GeoTestUtil.nextLongitude());\n      int by = GeoEncodingUtils.encodeLatitude(GeoTestUtil.nextLatitude());\n      int cx = GeoEncodingUtils.encodeLongitude(GeoTestUtil.nextLongitude());\n      int cy = GeoEncodingUtils.encodeLatitude(GeoTestUtil.nextLatitude());\n\n      int tMinX = StrictMath.min(StrictMath.min(ax, bx), cx);\n      int tMaxX = StrictMath.max(StrictMath.max(ax, bx), cx);\n      int tMinY = StrictMath.min(StrictMath.min(ay, by), cy);\n      int tMaxY = StrictMath.max(StrictMath.max(ay, by), cy);\n\n      byte[] triangle = new byte[4 * BYTES];\n      NumericUtils.intToSortableBytes(tMinY, triangle, 0);\n      NumericUtils.intToSortableBytes(tMinX, triangle, BYTES);\n      NumericUtils.intToSortableBytes(tMaxY, triangle, 2 * BYTES);\n      NumericUtils.intToSortableBytes(tMaxX, triangle, 3 * BYTES);\n\n      PointValues.Relation r;\n      if (random().nextBoolean()) {\n        r = rectangle2D.relateRangeBBox(BYTES, 0, triangle, 3 * BYTES, 2 * BYTES, triangle);\n      } else {\n        r = rectangle2D.intersectRangeBBox(BYTES, 0, triangle, 3 * BYTES, 2 * BYTES, triangle);\n      }\n\n      if (r == PointValues.Relation.CELL_OUTSIDE_QUERY) {\n        assertFalse(rectangle2D.intersectsTriangle(ax, ay, bx, by , cx, cy));\n        assertFalse(rectangle2D.containsTriangle(ax, ay, bx, by , cx, cy));\n        assertEquals(Component2D.WithinRelation.DISJOINT, rectangle2D.withinTriangle(ax, ay, true, bx, by, true, cx, cy, true));\n      } else if (rectangle2D.containsTriangle(ax, ay, bx, by , cx, cy)) {\n        assertTrue(rectangle2D.intersectsTriangle(ax, ay, bx, by , cx, cy));\n        assertTrue(rectangle2D.withinTriangle(ax, ay, true, bx, by, true, cx, cy, true) !=  Component2D.WithinRelation.CANDIDATE);\n      } else if (rectangle2D.withinTriangle(ax, ay, true, bx, by , true, cx, cy, true) ==  Component2D.WithinRelation.CANDIDATE) {\n        assertTrue(rectangle2D.intersectsTriangle(ax, ay, bx, by , cx, cy));\n        assertFalse(rectangle2D.containsTriangle(ax, ay, bx, by , cx, cy));\n      }\n    }\n  }\n\n","sourceOld":"  public void testRandomTriangles() {\n    Rectangle rectangle = GeoTestUtil.nextBox();\n    Rectangle2D rectangle2D = Rectangle2D.create(rectangle);\n\n    for (int i =0; i < 100; i++) {\n      int ax = GeoEncodingUtils.encodeLongitude(GeoTestUtil.nextLongitude());\n      int ay = GeoEncodingUtils.encodeLatitude(GeoTestUtil.nextLatitude());\n      int bx = GeoEncodingUtils.encodeLongitude(GeoTestUtil.nextLongitude());\n      int by = GeoEncodingUtils.encodeLatitude(GeoTestUtil.nextLatitude());\n      int cx = GeoEncodingUtils.encodeLongitude(GeoTestUtil.nextLongitude());\n      int cy = GeoEncodingUtils.encodeLatitude(GeoTestUtil.nextLatitude());\n\n      int tMinX = StrictMath.min(StrictMath.min(ax, bx), cx);\n      int tMaxX = StrictMath.max(StrictMath.max(ax, bx), cx);\n      int tMinY = StrictMath.min(StrictMath.min(ay, by), cy);\n      int tMaxY = StrictMath.max(StrictMath.max(ay, by), cy);\n\n      byte[] triangle = new byte[4 * BYTES];\n      NumericUtils.intToSortableBytes(tMinY, triangle, 0);\n      NumericUtils.intToSortableBytes(tMinX, triangle, BYTES);\n      NumericUtils.intToSortableBytes(tMaxY, triangle, 2 * BYTES);\n      NumericUtils.intToSortableBytes(tMaxX, triangle, 3 * BYTES);\n\n      PointValues.Relation r;\n      if (random().nextBoolean()) {\n        r = rectangle2D.relateRangeBBox(BYTES, 0, triangle, 3 * BYTES, 2 * BYTES, triangle);\n      } else {\n        r = rectangle2D.intersectRangeBBox(BYTES, 0, triangle, 3 * BYTES, 2 * BYTES, triangle);\n      }\n\n      if (r == PointValues.Relation.CELL_OUTSIDE_QUERY) {\n        assertFalse(rectangle2D.intersectsTriangle(ax, ay, bx, by , cx, cy));\n        assertFalse(rectangle2D.containsTriangle(ax, ay, bx, by , cx, cy));\n      }\n      else if (rectangle2D.containsTriangle(ax, ay, bx, by , cx, cy)) {\n        assertTrue(rectangle2D.intersectsTriangle(ax, ay, bx, by , cx, cy));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6c6b7e01cb749c3b01e226e06085dfb1d9ed8eab","date":1576073026,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/geo/TestRectangle2D#testRandomTriangles().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/geo/TestRectangle2D#testRandomTriangles().mjava","sourceNew":"  public void testRandomTriangles() {\n    Rectangle rectangle = GeoTestUtil.nextBox();\n    while(rectangle.crossesDateline()) {\n      rectangle = GeoTestUtil.nextBox();\n    }\n    Rectangle2D rectangle2D = Rectangle2D.create(rectangle);\n\n    for (int i =0; i < 100; i++) {\n      int ax = GeoEncodingUtils.encodeLongitude(GeoTestUtil.nextLongitude());\n      int ay = GeoEncodingUtils.encodeLatitude(GeoTestUtil.nextLatitude());\n      int bx = GeoEncodingUtils.encodeLongitude(GeoTestUtil.nextLongitude());\n      int by = GeoEncodingUtils.encodeLatitude(GeoTestUtil.nextLatitude());\n      int cx = GeoEncodingUtils.encodeLongitude(GeoTestUtil.nextLongitude());\n      int cy = GeoEncodingUtils.encodeLatitude(GeoTestUtil.nextLatitude());\n\n      int tMinX = StrictMath.min(StrictMath.min(ax, bx), cx);\n      int tMaxX = StrictMath.max(StrictMath.max(ax, bx), cx);\n      int tMinY = StrictMath.min(StrictMath.min(ay, by), cy);\n      int tMaxY = StrictMath.max(StrictMath.max(ay, by), cy);\n\n      byte[] triangle = new byte[4 * BYTES];\n      NumericUtils.intToSortableBytes(tMinY, triangle, 0);\n      NumericUtils.intToSortableBytes(tMinX, triangle, BYTES);\n      NumericUtils.intToSortableBytes(tMaxY, triangle, 2 * BYTES);\n      NumericUtils.intToSortableBytes(tMaxX, triangle, 3 * BYTES);\n\n      PointValues.Relation r;\n      if (random().nextBoolean()) {\n        r = rectangle2D.relateRangeBBox(BYTES, 0, triangle, 3 * BYTES, 2 * BYTES, triangle);\n      } else {\n        r = rectangle2D.intersectRangeBBox(BYTES, 0, triangle, 3 * BYTES, 2 * BYTES, triangle);\n      }\n\n      if (r == PointValues.Relation.CELL_OUTSIDE_QUERY) {\n        assertFalse(rectangle2D.intersectsTriangle(ax, ay, bx, by , cx, cy));\n        assertFalse(rectangle2D.containsTriangle(ax, ay, bx, by , cx, cy));\n        assertEquals(Component2D.WithinRelation.DISJOINT, rectangle2D.withinTriangle(ax, ay, true, bx, by, true, cx, cy, true));\n      } else if (rectangle2D.containsTriangle(ax, ay, bx, by , cx, cy)) {\n        assertTrue(rectangle2D.intersectsTriangle(ax, ay, bx, by , cx, cy));\n        assertTrue(rectangle2D.withinTriangle(ax, ay, true, bx, by, true, cx, cy, true) !=  Component2D.WithinRelation.CANDIDATE);\n      } else if (rectangle2D.withinTriangle(ax, ay, true, bx, by , true, cx, cy, true) ==  Component2D.WithinRelation.CANDIDATE) {\n        assertTrue(rectangle2D.intersectsTriangle(ax, ay, bx, by , cx, cy));\n        assertFalse(rectangle2D.containsTriangle(ax, ay, bx, by , cx, cy));\n      }\n    }\n  }\n\n","sourceOld":"  public void testRandomTriangles() {\n    Rectangle rectangle = GeoTestUtil.nextBox();\n    Rectangle2D rectangle2D = Rectangle2D.create(rectangle);\n\n    for (int i =0; i < 100; i++) {\n      int ax = GeoEncodingUtils.encodeLongitude(GeoTestUtil.nextLongitude());\n      int ay = GeoEncodingUtils.encodeLatitude(GeoTestUtil.nextLatitude());\n      int bx = GeoEncodingUtils.encodeLongitude(GeoTestUtil.nextLongitude());\n      int by = GeoEncodingUtils.encodeLatitude(GeoTestUtil.nextLatitude());\n      int cx = GeoEncodingUtils.encodeLongitude(GeoTestUtil.nextLongitude());\n      int cy = GeoEncodingUtils.encodeLatitude(GeoTestUtil.nextLatitude());\n\n      int tMinX = StrictMath.min(StrictMath.min(ax, bx), cx);\n      int tMaxX = StrictMath.max(StrictMath.max(ax, bx), cx);\n      int tMinY = StrictMath.min(StrictMath.min(ay, by), cy);\n      int tMaxY = StrictMath.max(StrictMath.max(ay, by), cy);\n\n      byte[] triangle = new byte[4 * BYTES];\n      NumericUtils.intToSortableBytes(tMinY, triangle, 0);\n      NumericUtils.intToSortableBytes(tMinX, triangle, BYTES);\n      NumericUtils.intToSortableBytes(tMaxY, triangle, 2 * BYTES);\n      NumericUtils.intToSortableBytes(tMaxX, triangle, 3 * BYTES);\n\n      PointValues.Relation r;\n      if (random().nextBoolean()) {\n        r = rectangle2D.relateRangeBBox(BYTES, 0, triangle, 3 * BYTES, 2 * BYTES, triangle);\n      } else {\n        r = rectangle2D.intersectRangeBBox(BYTES, 0, triangle, 3 * BYTES, 2 * BYTES, triangle);\n      }\n\n      if (r == PointValues.Relation.CELL_OUTSIDE_QUERY) {\n        assertFalse(rectangle2D.intersectsTriangle(ax, ay, bx, by , cx, cy));\n        assertFalse(rectangle2D.containsTriangle(ax, ay, bx, by , cx, cy));\n      }\n      else if (rectangle2D.containsTriangle(ax, ay, bx, by , cx, cy)) {\n        assertTrue(rectangle2D.intersectsTriangle(ax, ay, bx, by , cx, cy));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09c1e6d465800c73af60624bf9d4459a19f7940c","date":1579293280,"type":5,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/geo/TestRectangle2D#testRandomTriangles().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/geo/TestRectangle2D#testRandomTriangles().mjava","sourceNew":"  public void testRandomTriangles() {\n    Rectangle rectangle = GeoTestUtil.nextBox();\n    while(rectangle.crossesDateline()) {\n      rectangle = GeoTestUtil.nextBox();\n    }\n    Rectangle2D rectangle2D = Rectangle2D.create(rectangle);\n\n    for (int i =0; i < 100; i++) {\n      int ax = GeoEncodingUtils.encodeLongitude(GeoTestUtil.nextLongitude());\n      int ay = GeoEncodingUtils.encodeLatitude(GeoTestUtil.nextLatitude());\n      int bx = GeoEncodingUtils.encodeLongitude(GeoTestUtil.nextLongitude());\n      int by = GeoEncodingUtils.encodeLatitude(GeoTestUtil.nextLatitude());\n      int cx = GeoEncodingUtils.encodeLongitude(GeoTestUtil.nextLongitude());\n      int cy = GeoEncodingUtils.encodeLatitude(GeoTestUtil.nextLatitude());\n\n      int tMinX = StrictMath.min(StrictMath.min(ax, bx), cx);\n      int tMaxX = StrictMath.max(StrictMath.max(ax, bx), cx);\n      int tMinY = StrictMath.min(StrictMath.min(ay, by), cy);\n      int tMaxY = StrictMath.max(StrictMath.max(ay, by), cy);\n\n      byte[] triangle = new byte[4 * BYTES];\n      NumericUtils.intToSortableBytes(tMinY, triangle, 0);\n      NumericUtils.intToSortableBytes(tMinX, triangle, BYTES);\n      NumericUtils.intToSortableBytes(tMaxY, triangle, 2 * BYTES);\n      NumericUtils.intToSortableBytes(tMaxX, triangle, 3 * BYTES);\n\n      PointValues.Relation r;\n      if (random().nextBoolean()) {\n        r = rectangle2D.relateRangeBBox(BYTES, 0, triangle, 3 * BYTES, 2 * BYTES, triangle);\n      } else {\n        r = rectangle2D.intersectRangeBBox(BYTES, 0, triangle, 3 * BYTES, 2 * BYTES, triangle);\n      }\n\n      if (r == PointValues.Relation.CELL_OUTSIDE_QUERY) {\n        assertFalse(rectangle2D.intersectsTriangle(ax, ay, bx, by , cx, cy));\n        assertFalse(rectangle2D.containsTriangle(ax, ay, bx, by , cx, cy));\n        assertEquals(Component2D.WithinRelation.DISJOINT, rectangle2D.withinTriangle(ax, ay, true, bx, by, true, cx, cy, true));\n      } else if (rectangle2D.containsTriangle(ax, ay, bx, by , cx, cy)) {\n        assertTrue(rectangle2D.intersectsTriangle(ax, ay, bx, by , cx, cy));\n        assertTrue(rectangle2D.withinTriangle(ax, ay, true, bx, by, true, cx, cy, true) !=  Component2D.WithinRelation.CANDIDATE);\n      } else if (rectangle2D.withinTriangle(ax, ay, true, bx, by , true, cx, cy, true) ==  Component2D.WithinRelation.CANDIDATE) {\n        assertTrue(rectangle2D.intersectsTriangle(ax, ay, bx, by , cx, cy));\n        assertFalse(rectangle2D.containsTriangle(ax, ay, bx, by , cx, cy));\n      }\n    }\n  }\n\n","sourceOld":"  public void testRandomTriangles() {\n    Rectangle rectangle = GeoTestUtil.nextBox();\n    while(rectangle.crossesDateline()) {\n      rectangle = GeoTestUtil.nextBox();\n    }\n    Rectangle2D rectangle2D = Rectangle2D.create(rectangle);\n\n    for (int i =0; i < 100; i++) {\n      int ax = GeoEncodingUtils.encodeLongitude(GeoTestUtil.nextLongitude());\n      int ay = GeoEncodingUtils.encodeLatitude(GeoTestUtil.nextLatitude());\n      int bx = GeoEncodingUtils.encodeLongitude(GeoTestUtil.nextLongitude());\n      int by = GeoEncodingUtils.encodeLatitude(GeoTestUtil.nextLatitude());\n      int cx = GeoEncodingUtils.encodeLongitude(GeoTestUtil.nextLongitude());\n      int cy = GeoEncodingUtils.encodeLatitude(GeoTestUtil.nextLatitude());\n\n      int tMinX = StrictMath.min(StrictMath.min(ax, bx), cx);\n      int tMaxX = StrictMath.max(StrictMath.max(ax, bx), cx);\n      int tMinY = StrictMath.min(StrictMath.min(ay, by), cy);\n      int tMaxY = StrictMath.max(StrictMath.max(ay, by), cy);\n\n      byte[] triangle = new byte[4 * BYTES];\n      NumericUtils.intToSortableBytes(tMinY, triangle, 0);\n      NumericUtils.intToSortableBytes(tMinX, triangle, BYTES);\n      NumericUtils.intToSortableBytes(tMaxY, triangle, 2 * BYTES);\n      NumericUtils.intToSortableBytes(tMaxX, triangle, 3 * BYTES);\n\n      PointValues.Relation r;\n      if (random().nextBoolean()) {\n        r = rectangle2D.relateRangeBBox(BYTES, 0, triangle, 3 * BYTES, 2 * BYTES, triangle);\n      } else {\n        r = rectangle2D.intersectRangeBBox(BYTES, 0, triangle, 3 * BYTES, 2 * BYTES, triangle);\n      }\n\n      if (r == PointValues.Relation.CELL_OUTSIDE_QUERY) {\n        assertFalse(rectangle2D.intersectsTriangle(ax, ay, bx, by , cx, cy));\n        assertFalse(rectangle2D.containsTriangle(ax, ay, bx, by , cx, cy));\n        assertEquals(Component2D.WithinRelation.DISJOINT, rectangle2D.withinTriangle(ax, ay, true, bx, by, true, cx, cy, true));\n      } else if (rectangle2D.containsTriangle(ax, ay, bx, by , cx, cy)) {\n        assertTrue(rectangle2D.intersectsTriangle(ax, ay, bx, by , cx, cy));\n        assertTrue(rectangle2D.withinTriangle(ax, ay, true, bx, by, true, cx, cy, true) !=  Component2D.WithinRelation.CANDIDATE);\n      } else if (rectangle2D.withinTriangle(ax, ay, true, bx, by , true, cx, cy, true) ==  Component2D.WithinRelation.CANDIDATE) {\n        assertTrue(rectangle2D.intersectsTriangle(ax, ay, bx, by , cx, cy));\n        assertFalse(rectangle2D.containsTriangle(ax, ay, bx, by , cx, cy));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2aeefba8262036d422d639e48c49d51316bea138":["9feee35369998c08f5168e0808e67e09857d5bac"],"9feee35369998c08f5168e0808e67e09857d5bac":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6c6b7e01cb749c3b01e226e06085dfb1d9ed8eab":["5e32619a05801247e931ce6b9998721600e247b0","3f2d8fb73c718c3fc5600f453cc514f18ae1b8c3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"09c1e6d465800c73af60624bf9d4459a19f7940c":["3f2d8fb73c718c3fc5600f453cc514f18ae1b8c3"],"5e32619a05801247e931ce6b9998721600e247b0":["6d284e8652a9d71490d15140fe4f95dfd5a995c4"],"3f2d8fb73c718c3fc5600f453cc514f18ae1b8c3":["5e32619a05801247e931ce6b9998721600e247b0"],"6d284e8652a9d71490d15140fe4f95dfd5a995c4":["2aeefba8262036d422d639e48c49d51316bea138"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["09c1e6d465800c73af60624bf9d4459a19f7940c"],"b0b597c65628ca9e73913a07e81691f8229bae35":["6d284e8652a9d71490d15140fe4f95dfd5a995c4","5e32619a05801247e931ce6b9998721600e247b0"]},"commit2Childs":{"2aeefba8262036d422d639e48c49d51316bea138":["6d284e8652a9d71490d15140fe4f95dfd5a995c4"],"9feee35369998c08f5168e0808e67e09857d5bac":["2aeefba8262036d422d639e48c49d51316bea138"],"6c6b7e01cb749c3b01e226e06085dfb1d9ed8eab":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9feee35369998c08f5168e0808e67e09857d5bac"],"5e32619a05801247e931ce6b9998721600e247b0":["6c6b7e01cb749c3b01e226e06085dfb1d9ed8eab","3f2d8fb73c718c3fc5600f453cc514f18ae1b8c3","b0b597c65628ca9e73913a07e81691f8229bae35"],"09c1e6d465800c73af60624bf9d4459a19f7940c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3f2d8fb73c718c3fc5600f453cc514f18ae1b8c3":["6c6b7e01cb749c3b01e226e06085dfb1d9ed8eab","09c1e6d465800c73af60624bf9d4459a19f7940c"],"6d284e8652a9d71490d15140fe4f95dfd5a995c4":["5e32619a05801247e931ce6b9998721600e247b0","b0b597c65628ca9e73913a07e81691f8229bae35"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["6c6b7e01cb749c3b01e226e06085dfb1d9ed8eab","cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}