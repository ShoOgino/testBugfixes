{"path":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataImportHandler#inform(SolrCore).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataImportHandler#inform(SolrCore).mjava","pathOld":"/dev/null","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public void inform(SolrCore core) {\n    try {\n      //hack to get the name of this handler\n      for (Map.Entry<String, SolrRequestHandler> e : core.getRequestHandlers().entrySet()) {\n        SolrRequestHandler handler = e.getValue();\n        //this will not work if startup=lazy is set\n        if( this == handler) {\n          String name= e.getKey();\n          if(name.startsWith(\"/\")){\n            myName = name.substring(1);\n          }\n          // some users may have '/' in the handler name. replace with '_'\n          myName = myName.replaceAll(\"/\",\"_\") ;\n        }\n      }\n      String debug = (String) initArgs.get(ENABLE_DEBUG);\n      if (debug != null && \"no\".equals(debug))\n        debugEnabled = false;\n      NamedList defaults = (NamedList) initArgs.get(\"defaults\");\n      if (defaults != null) {\n        String configLoc = (String) defaults.get(\"config\");\n        if (configLoc != null && configLoc.length() != 0) {\n          processConfiguration(defaults);\n\n          importer = new DataImporter(SolrWriter.getResourceAsString(core\n                  .getResourceLoader().openResource(configLoc)), core,\n                  dataSources, coreScopeSession);\n        }\n      }\n    } catch (Throwable e) {\n      SolrConfig.severeErrors.add(e);\n      LOG.error( DataImporter.MSG.LOAD_EXP, e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              DataImporter.MSG.INVALID_CONFIG, e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataImportHandler#inform(SolrCore).mjava","sourceNew":null,"sourceOld":"  @SuppressWarnings(\"unchecked\")\n  public void inform(SolrCore core) {\n    try {\n      //hack to get the name of this handler\n      for (Map.Entry<String, SolrRequestHandler> e : core.getRequestHandlers().entrySet()) {\n        SolrRequestHandler handler = e.getValue();\n        //this will not work if startup=lazy is set\n        if( this == handler) {\n          String name= e.getKey();\n          if(name.startsWith(\"/\")){\n            myName = name.substring(1);\n          }\n          // some users may have '/' in the handler name. replace with '_'\n          myName = myName.replaceAll(\"/\",\"_\") ;\n        }\n      }\n      String debug = (String) initArgs.get(ENABLE_DEBUG);\n      if (debug != null && \"no\".equals(debug))\n        debugEnabled = false;\n      NamedList defaults = (NamedList) initArgs.get(\"defaults\");\n      if (defaults != null) {\n        String configLoc = (String) defaults.get(\"config\");\n        if (configLoc != null && configLoc.length() != 0) {\n          processConfiguration(defaults);\n\n          importer = new DataImporter(SolrWriter.getResourceAsString(core\n                  .getResourceLoader().openResource(configLoc)), core,\n                  dataSources, coreScopeSession);\n        }\n      }\n    } catch (Throwable e) {\n      SolrConfig.severeErrors.add(e);\n      LOG.error( DataImporter.MSG.LOAD_EXP, e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              DataImporter.MSG.INVALID_CONFIG, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataImportHandler#inform(SolrCore).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataImportHandler#inform(SolrCore).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public void inform(SolrCore core) {\n    try {\n      //hack to get the name of this handler\n      for (Map.Entry<String, SolrRequestHandler> e : core.getRequestHandlers().entrySet()) {\n        SolrRequestHandler handler = e.getValue();\n        //this will not work if startup=lazy is set\n        if( this == handler) {\n          String name= e.getKey();\n          if(name.startsWith(\"/\")){\n            myName = name.substring(1);\n          }\n          // some users may have '/' in the handler name. replace with '_'\n          myName = myName.replaceAll(\"/\",\"_\") ;\n        }\n      }\n      String debug = (String) initArgs.get(ENABLE_DEBUG);\n      if (debug != null && \"no\".equals(debug))\n        debugEnabled = false;\n      NamedList defaults = (NamedList) initArgs.get(\"defaults\");\n      if (defaults != null) {\n        String configLoc = (String) defaults.get(\"config\");\n        if (configLoc != null && configLoc.length() != 0) {\n          processConfiguration(defaults);\n\n          importer = new DataImporter(SolrWriter.getResourceAsString(core\n                  .getResourceLoader().openResource(configLoc)), core,\n                  dataSources, coreScopeSession);\n        }\n      }\n    } catch (Throwable e) {\n      SolrConfig.severeErrors.add(e);\n      LOG.error( DataImporter.MSG.LOAD_EXP, e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              DataImporter.MSG.INVALID_CONFIG, e);\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  public void inform(SolrCore core) {\n    try {\n      //hack to get the name of this handler\n      for (Map.Entry<String, SolrRequestHandler> e : core.getRequestHandlers().entrySet()) {\n        SolrRequestHandler handler = e.getValue();\n        //this will not work if startup=lazy is set\n        if( this == handler) {\n          String name= e.getKey();\n          if(name.startsWith(\"/\")){\n            myName = name.substring(1);\n          }\n          // some users may have '/' in the handler name. replace with '_'\n          myName = myName.replaceAll(\"/\",\"_\") ;\n        }\n      }\n      String debug = (String) initArgs.get(ENABLE_DEBUG);\n      if (debug != null && \"no\".equals(debug))\n        debugEnabled = false;\n      NamedList defaults = (NamedList) initArgs.get(\"defaults\");\n      if (defaults != null) {\n        String configLoc = (String) defaults.get(\"config\");\n        if (configLoc != null && configLoc.length() != 0) {\n          processConfiguration(defaults);\n\n          importer = new DataImporter(SolrWriter.getResourceAsString(core\n                  .getResourceLoader().openResource(configLoc)), core,\n                  dataSources, coreScopeSession);\n        }\n      }\n    } catch (Throwable e) {\n      SolrConfig.severeErrors.add(e);\n      LOG.error( DataImporter.MSG.LOAD_EXP, e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              DataImporter.MSG.INVALID_CONFIG, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataImportHandler#inform(SolrCore).mjava","pathOld":"/dev/null","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public void inform(SolrCore core) {\n    try {\n      //hack to get the name of this handler\n      for (Map.Entry<String, SolrRequestHandler> e : core.getRequestHandlers().entrySet()) {\n        SolrRequestHandler handler = e.getValue();\n        //this will not work if startup=lazy is set\n        if( this == handler) {\n          String name= e.getKey();\n          if(name.startsWith(\"/\")){\n            myName = name.substring(1);\n          }\n          // some users may have '/' in the handler name. replace with '_'\n          myName = myName.replaceAll(\"/\",\"_\") ;\n        }\n      }\n      String debug = (String) initArgs.get(ENABLE_DEBUG);\n      if (debug != null && \"no\".equals(debug))\n        debugEnabled = false;\n      NamedList defaults = (NamedList) initArgs.get(\"defaults\");\n      if (defaults != null) {\n        String configLoc = (String) defaults.get(\"config\");\n        if (configLoc != null && configLoc.length() != 0) {\n          processConfiguration(defaults);\n\n          importer = new DataImporter(SolrWriter.getResourceAsString(core\n                  .getResourceLoader().openResource(configLoc)), core,\n                  dataSources, coreScopeSession);\n        }\n      }\n    } catch (Throwable e) {\n      SolrConfig.severeErrors.add(e);\n      LOG.error( DataImporter.MSG.LOAD_EXP, e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              DataImporter.MSG.INVALID_CONFIG, e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c9f9c250dfa2238c6fa2cb7c83894edc84e1c5a8","date":1289183364,"type":3,"author":"Koji Sekiguchi","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataImportHandler#inform(SolrCore).mjava","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataImportHandler#inform(SolrCore).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public void inform(SolrCore core) {\n    try {\n      //hack to get the name of this handler\n      for (Map.Entry<String, SolrRequestHandler> e : core.getRequestHandlers().entrySet()) {\n        SolrRequestHandler handler = e.getValue();\n        //this will not work if startup=lazy is set\n        if( this == handler) {\n          String name= e.getKey();\n          if(name.startsWith(\"/\")){\n            myName = name.substring(1);\n          }\n          // some users may have '/' in the handler name. replace with '_'\n          myName = myName.replaceAll(\"/\",\"_\") ;\n        }\n      }\n      debugEnabled = StrUtils.parseBool((String)initArgs.get(ENABLE_DEBUG), true);\n      NamedList defaults = (NamedList) initArgs.get(\"defaults\");\n      if (defaults != null) {\n        String configLoc = (String) defaults.get(\"config\");\n        if (configLoc != null && configLoc.length() != 0) {\n          processConfiguration(defaults);\n\n          importer = new DataImporter(SolrWriter.getResourceAsString(core\n                  .getResourceLoader().openResource(configLoc)), core,\n                  dataSources, coreScopeSession);\n        }\n      }\n    } catch (Throwable e) {\n      SolrConfig.severeErrors.add(e);\n      LOG.error( DataImporter.MSG.LOAD_EXP, e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              DataImporter.MSG.INVALID_CONFIG, e);\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  public void inform(SolrCore core) {\n    try {\n      //hack to get the name of this handler\n      for (Map.Entry<String, SolrRequestHandler> e : core.getRequestHandlers().entrySet()) {\n        SolrRequestHandler handler = e.getValue();\n        //this will not work if startup=lazy is set\n        if( this == handler) {\n          String name= e.getKey();\n          if(name.startsWith(\"/\")){\n            myName = name.substring(1);\n          }\n          // some users may have '/' in the handler name. replace with '_'\n          myName = myName.replaceAll(\"/\",\"_\") ;\n        }\n      }\n      String debug = (String) initArgs.get(ENABLE_DEBUG);\n      if (debug != null && \"no\".equals(debug))\n        debugEnabled = false;\n      NamedList defaults = (NamedList) initArgs.get(\"defaults\");\n      if (defaults != null) {\n        String configLoc = (String) defaults.get(\"config\");\n        if (configLoc != null && configLoc.length() != 0) {\n          processConfiguration(defaults);\n\n          importer = new DataImporter(SolrWriter.getResourceAsString(core\n                  .getResourceLoader().openResource(configLoc)), core,\n                  dataSources, coreScopeSession);\n        }\n      }\n    } catch (Throwable e) {\n      SolrConfig.severeErrors.add(e);\n      LOG.error( DataImporter.MSG.LOAD_EXP, e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              DataImporter.MSG.INVALID_CONFIG, e);\n    }\n  }\n\n","bugFix":["4d4f1b2c5601680b01c4bb95a43fe6fb73f03103"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"85a883878c0af761245ab048babc63d099f835f3","date":1289553330,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataImportHandler#inform(SolrCore).mjava","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataImportHandler#inform(SolrCore).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public void inform(SolrCore core) {\n    try {\n      //hack to get the name of this handler\n      for (Map.Entry<String, SolrRequestHandler> e : core.getRequestHandlers().entrySet()) {\n        SolrRequestHandler handler = e.getValue();\n        //this will not work if startup=lazy is set\n        if( this == handler) {\n          String name= e.getKey();\n          if(name.startsWith(\"/\")){\n            myName = name.substring(1);\n          }\n          // some users may have '/' in the handler name. replace with '_'\n          myName = myName.replaceAll(\"/\",\"_\") ;\n        }\n      }\n      debugEnabled = StrUtils.parseBool((String)initArgs.get(ENABLE_DEBUG), true);\n      NamedList defaults = (NamedList) initArgs.get(\"defaults\");\n      if (defaults != null) {\n        String configLoc = (String) defaults.get(\"config\");\n        if (configLoc != null && configLoc.length() != 0) {\n          processConfiguration(defaults);\n\n          importer = new DataImporter(SolrWriter.getResourceAsString(core\n                  .getResourceLoader().openResource(configLoc)), core,\n                  dataSources, coreScopeSession);\n        }\n      }\n    } catch (Throwable e) {\n      SolrConfig.severeErrors.add(e);\n      LOG.error( DataImporter.MSG.LOAD_EXP, e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              DataImporter.MSG.INVALID_CONFIG, e);\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  public void inform(SolrCore core) {\n    try {\n      //hack to get the name of this handler\n      for (Map.Entry<String, SolrRequestHandler> e : core.getRequestHandlers().entrySet()) {\n        SolrRequestHandler handler = e.getValue();\n        //this will not work if startup=lazy is set\n        if( this == handler) {\n          String name= e.getKey();\n          if(name.startsWith(\"/\")){\n            myName = name.substring(1);\n          }\n          // some users may have '/' in the handler name. replace with '_'\n          myName = myName.replaceAll(\"/\",\"_\") ;\n        }\n      }\n      String debug = (String) initArgs.get(ENABLE_DEBUG);\n      if (debug != null && \"no\".equals(debug))\n        debugEnabled = false;\n      NamedList defaults = (NamedList) initArgs.get(\"defaults\");\n      if (defaults != null) {\n        String configLoc = (String) defaults.get(\"config\");\n        if (configLoc != null && configLoc.length() != 0) {\n          processConfiguration(defaults);\n\n          importer = new DataImporter(SolrWriter.getResourceAsString(core\n                  .getResourceLoader().openResource(configLoc)), core,\n                  dataSources, coreScopeSession);\n        }\n      }\n    } catch (Throwable e) {\n      SolrConfig.severeErrors.add(e);\n      LOG.error( DataImporter.MSG.LOAD_EXP, e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              DataImporter.MSG.INVALID_CONFIG, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataImportHandler#inform(SolrCore).mjava","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataImportHandler#inform(SolrCore).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public void inform(SolrCore core) {\n    try {\n      //hack to get the name of this handler\n      for (Map.Entry<String, SolrRequestHandler> e : core.getRequestHandlers().entrySet()) {\n        SolrRequestHandler handler = e.getValue();\n        //this will not work if startup=lazy is set\n        if( this == handler) {\n          String name= e.getKey();\n          if(name.startsWith(\"/\")){\n            myName = name.substring(1);\n          }\n          // some users may have '/' in the handler name. replace with '_'\n          myName = myName.replaceAll(\"/\",\"_\") ;\n        }\n      }\n      debugEnabled = StrUtils.parseBool((String)initArgs.get(ENABLE_DEBUG), true);\n      NamedList defaults = (NamedList) initArgs.get(\"defaults\");\n      if (defaults != null) {\n        String configLoc = (String) defaults.get(\"config\");\n        if (configLoc != null && configLoc.length() != 0) {\n          processConfiguration(defaults);\n\n          importer = new DataImporter(SolrWriter.getResourceAsString(core\n                  .getResourceLoader().openResource(configLoc)), core,\n                  dataSources, coreScopeSession);\n        }\n      }\n    } catch (Throwable e) {\n      SolrConfig.severeErrors.add(e);\n      LOG.error( DataImporter.MSG.LOAD_EXP, e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              DataImporter.MSG.INVALID_CONFIG, e);\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  public void inform(SolrCore core) {\n    try {\n      //hack to get the name of this handler\n      for (Map.Entry<String, SolrRequestHandler> e : core.getRequestHandlers().entrySet()) {\n        SolrRequestHandler handler = e.getValue();\n        //this will not work if startup=lazy is set\n        if( this == handler) {\n          String name= e.getKey();\n          if(name.startsWith(\"/\")){\n            myName = name.substring(1);\n          }\n          // some users may have '/' in the handler name. replace with '_'\n          myName = myName.replaceAll(\"/\",\"_\") ;\n        }\n      }\n      String debug = (String) initArgs.get(ENABLE_DEBUG);\n      if (debug != null && \"no\".equals(debug))\n        debugEnabled = false;\n      NamedList defaults = (NamedList) initArgs.get(\"defaults\");\n      if (defaults != null) {\n        String configLoc = (String) defaults.get(\"config\");\n        if (configLoc != null && configLoc.length() != 0) {\n          processConfiguration(defaults);\n\n          importer = new DataImporter(SolrWriter.getResourceAsString(core\n                  .getResourceLoader().openResource(configLoc)), core,\n                  dataSources, coreScopeSession);\n        }\n      }\n    } catch (Throwable e) {\n      SolrConfig.severeErrors.add(e);\n      LOG.error( DataImporter.MSG.LOAD_EXP, e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              DataImporter.MSG.INVALID_CONFIG, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b24326411db492f92ea49f6fb947c90bc73cf19e","date":1298813468,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataImportHandler#inform(SolrCore).mjava","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataImportHandler#inform(SolrCore).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public void inform(SolrCore core) {\n    try {\n      //hack to get the name of this handler\n      for (Map.Entry<String, SolrRequestHandler> e : core.getRequestHandlers().entrySet()) {\n        SolrRequestHandler handler = e.getValue();\n        //this will not work if startup=lazy is set\n        if( this == handler) {\n          String name= e.getKey();\n          if(name.startsWith(\"/\")){\n            myName = name.substring(1);\n          }\n          // some users may have '/' in the handler name. replace with '_'\n          myName = myName.replaceAll(\"/\",\"_\") ;\n        }\n      }\n      debugEnabled = StrUtils.parseBool((String)initArgs.get(ENABLE_DEBUG), true);\n      NamedList defaults = (NamedList) initArgs.get(\"defaults\");\n      if (defaults != null) {\n        String configLoc = (String) defaults.get(\"config\");\n        if (configLoc != null && configLoc.length() != 0) {\n          processConfiguration(defaults);\n          final InputSource is = new InputSource(core.getResourceLoader().openConfig(configLoc));\n          is.setSystemId(SystemIdResolver.createSystemIdFromResourceName(configLoc));\n          importer = new DataImporter(is, core,\n                  dataSources, coreScopeSession);\n        }\n      }\n    } catch (Throwable e) {\n      SolrConfig.severeErrors.add(e);\n      LOG.error( DataImporter.MSG.LOAD_EXP, e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              DataImporter.MSG.INVALID_CONFIG, e);\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  public void inform(SolrCore core) {\n    try {\n      //hack to get the name of this handler\n      for (Map.Entry<String, SolrRequestHandler> e : core.getRequestHandlers().entrySet()) {\n        SolrRequestHandler handler = e.getValue();\n        //this will not work if startup=lazy is set\n        if( this == handler) {\n          String name= e.getKey();\n          if(name.startsWith(\"/\")){\n            myName = name.substring(1);\n          }\n          // some users may have '/' in the handler name. replace with '_'\n          myName = myName.replaceAll(\"/\",\"_\") ;\n        }\n      }\n      debugEnabled = StrUtils.parseBool((String)initArgs.get(ENABLE_DEBUG), true);\n      NamedList defaults = (NamedList) initArgs.get(\"defaults\");\n      if (defaults != null) {\n        String configLoc = (String) defaults.get(\"config\");\n        if (configLoc != null && configLoc.length() != 0) {\n          processConfiguration(defaults);\n\n          importer = new DataImporter(SolrWriter.getResourceAsString(core\n                  .getResourceLoader().openResource(configLoc)), core,\n                  dataSources, coreScopeSession);\n        }\n      }\n    } catch (Throwable e) {\n      SolrConfig.severeErrors.add(e);\n      LOG.error( DataImporter.MSG.LOAD_EXP, e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              DataImporter.MSG.INVALID_CONFIG, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":["b2a6913ca906832d1ef58d72498167acb00a7e4f","b2a6913ca906832d1ef58d72498167acb00a7e4f","5101aff20e65c9a285c274627ec956eb5409d253","5101aff20e65c9a285c274627ec956eb5409d253"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataImportHandler#inform(SolrCore).mjava","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataImportHandler#inform(SolrCore).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public void inform(SolrCore core) {\n    try {\n      //hack to get the name of this handler\n      for (Map.Entry<String, SolrRequestHandler> e : core.getRequestHandlers().entrySet()) {\n        SolrRequestHandler handler = e.getValue();\n        //this will not work if startup=lazy is set\n        if( this == handler) {\n          String name= e.getKey();\n          if(name.startsWith(\"/\")){\n            myName = name.substring(1);\n          }\n          // some users may have '/' in the handler name. replace with '_'\n          myName = myName.replaceAll(\"/\",\"_\") ;\n        }\n      }\n      debugEnabled = StrUtils.parseBool((String)initArgs.get(ENABLE_DEBUG), true);\n      NamedList defaults = (NamedList) initArgs.get(\"defaults\");\n      if (defaults != null) {\n        String configLoc = (String) defaults.get(\"config\");\n        if (configLoc != null && configLoc.length() != 0) {\n          processConfiguration(defaults);\n          final InputSource is = new InputSource(core.getResourceLoader().openConfig(configLoc));\n          is.setSystemId(SystemIdResolver.createSystemIdFromResourceName(configLoc));\n          importer = new DataImporter(is, core,\n                  dataSources, coreScopeSession);\n        }\n      }\n    } catch (Throwable e) {\n      SolrConfig.severeErrors.add(e);\n      LOG.error( DataImporter.MSG.LOAD_EXP, e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              DataImporter.MSG.INVALID_CONFIG, e);\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  public void inform(SolrCore core) {\n    try {\n      //hack to get the name of this handler\n      for (Map.Entry<String, SolrRequestHandler> e : core.getRequestHandlers().entrySet()) {\n        SolrRequestHandler handler = e.getValue();\n        //this will not work if startup=lazy is set\n        if( this == handler) {\n          String name= e.getKey();\n          if(name.startsWith(\"/\")){\n            myName = name.substring(1);\n          }\n          // some users may have '/' in the handler name. replace with '_'\n          myName = myName.replaceAll(\"/\",\"_\") ;\n        }\n      }\n      debugEnabled = StrUtils.parseBool((String)initArgs.get(ENABLE_DEBUG), true);\n      NamedList defaults = (NamedList) initArgs.get(\"defaults\");\n      if (defaults != null) {\n        String configLoc = (String) defaults.get(\"config\");\n        if (configLoc != null && configLoc.length() != 0) {\n          processConfiguration(defaults);\n\n          importer = new DataImporter(SolrWriter.getResourceAsString(core\n                  .getResourceLoader().openResource(configLoc)), core,\n                  dataSources, coreScopeSession);\n        }\n      }\n    } catch (Throwable e) {\n      SolrConfig.severeErrors.add(e);\n      LOG.error( DataImporter.MSG.LOAD_EXP, e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              DataImporter.MSG.INVALID_CONFIG, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0ef0193974807e4bddf5432a6b0287fe4d6c9df","date":1301476645,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataImportHandler#inform(SolrCore).mjava","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataImportHandler#inform(SolrCore).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public void inform(SolrCore core) {\n    try {\n      //hack to get the name of this handler\n      for (Map.Entry<String, SolrRequestHandler> e : core.getRequestHandlers().entrySet()) {\n        SolrRequestHandler handler = e.getValue();\n        //this will not work if startup=lazy is set\n        if( this == handler) {\n          String name= e.getKey();\n          if(name.startsWith(\"/\")){\n            myName = name.substring(1);\n          }\n          // some users may have '/' in the handler name. replace with '_'\n          myName = myName.replaceAll(\"/\",\"_\") ;\n        }\n      }\n      debugEnabled = StrUtils.parseBool((String)initArgs.get(ENABLE_DEBUG), true);\n      NamedList defaults = (NamedList) initArgs.get(\"defaults\");\n      if (defaults != null) {\n        String configLoc = (String) defaults.get(\"config\");\n        if (configLoc != null && configLoc.length() != 0) {\n          processConfiguration(defaults);\n          final InputSource is = new InputSource(core.getResourceLoader().openConfig(configLoc));\n          is.setSystemId(SystemIdResolver.createSystemIdFromResourceName(configLoc));\n          importer = new DataImporter(is, core,\n                  dataSources, coreScopeSession);\n        }\n      }\n    } catch (Throwable e) {\n      SolrConfig.severeErrors.add(e);\n      LOG.error( DataImporter.MSG.LOAD_EXP, e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              DataImporter.MSG.INVALID_CONFIG, e);\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  public void inform(SolrCore core) {\n    try {\n      //hack to get the name of this handler\n      for (Map.Entry<String, SolrRequestHandler> e : core.getRequestHandlers().entrySet()) {\n        SolrRequestHandler handler = e.getValue();\n        //this will not work if startup=lazy is set\n        if( this == handler) {\n          String name= e.getKey();\n          if(name.startsWith(\"/\")){\n            myName = name.substring(1);\n          }\n          // some users may have '/' in the handler name. replace with '_'\n          myName = myName.replaceAll(\"/\",\"_\") ;\n        }\n      }\n      debugEnabled = StrUtils.parseBool((String)initArgs.get(ENABLE_DEBUG), true);\n      NamedList defaults = (NamedList) initArgs.get(\"defaults\");\n      if (defaults != null) {\n        String configLoc = (String) defaults.get(\"config\");\n        if (configLoc != null && configLoc.length() != 0) {\n          processConfiguration(defaults);\n\n          importer = new DataImporter(SolrWriter.getResourceAsString(core\n                  .getResourceLoader().openResource(configLoc)), core,\n                  dataSources, coreScopeSession);\n        }\n      }\n    } catch (Throwable e) {\n      SolrConfig.severeErrors.add(e);\n      LOG.error( DataImporter.MSG.LOAD_EXP, e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              DataImporter.MSG.INVALID_CONFIG, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImportHandler#inform(SolrCore).mjava","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataImportHandler#inform(SolrCore).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public void inform(SolrCore core) {\n    try {\n      //hack to get the name of this handler\n      for (Map.Entry<String, SolrRequestHandler> e : core.getRequestHandlers().entrySet()) {\n        SolrRequestHandler handler = e.getValue();\n        //this will not work if startup=lazy is set\n        if( this == handler) {\n          String name= e.getKey();\n          if(name.startsWith(\"/\")){\n            myName = name.substring(1);\n          }\n          // some users may have '/' in the handler name. replace with '_'\n          myName = myName.replaceAll(\"/\",\"_\") ;\n        }\n      }\n      debugEnabled = StrUtils.parseBool((String)initArgs.get(ENABLE_DEBUG), true);\n      NamedList defaults = (NamedList) initArgs.get(\"defaults\");\n      if (defaults != null) {\n        String configLoc = (String) defaults.get(\"config\");\n        if (configLoc != null && configLoc.length() != 0) {\n          processConfiguration(defaults);\n          final InputSource is = new InputSource(core.getResourceLoader().openConfig(configLoc));\n          is.setSystemId(SystemIdResolver.createSystemIdFromResourceName(configLoc));\n          importer = new DataImporter(is, core,\n                  dataSources, coreScopeSession);\n        }\n      }\n    } catch (Throwable e) {\n      SolrConfig.severeErrors.add(e);\n      LOG.error( DataImporter.MSG.LOAD_EXP, e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              DataImporter.MSG.INVALID_CONFIG, e);\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  public void inform(SolrCore core) {\n    try {\n      //hack to get the name of this handler\n      for (Map.Entry<String, SolrRequestHandler> e : core.getRequestHandlers().entrySet()) {\n        SolrRequestHandler handler = e.getValue();\n        //this will not work if startup=lazy is set\n        if( this == handler) {\n          String name= e.getKey();\n          if(name.startsWith(\"/\")){\n            myName = name.substring(1);\n          }\n          // some users may have '/' in the handler name. replace with '_'\n          myName = myName.replaceAll(\"/\",\"_\") ;\n        }\n      }\n      debugEnabled = StrUtils.parseBool((String)initArgs.get(ENABLE_DEBUG), true);\n      NamedList defaults = (NamedList) initArgs.get(\"defaults\");\n      if (defaults != null) {\n        String configLoc = (String) defaults.get(\"config\");\n        if (configLoc != null && configLoc.length() != 0) {\n          processConfiguration(defaults);\n          final InputSource is = new InputSource(core.getResourceLoader().openConfig(configLoc));\n          is.setSystemId(SystemIdResolver.createSystemIdFromResourceName(configLoc));\n          importer = new DataImporter(is, core,\n                  dataSources, coreScopeSession);\n        }\n      }\n    } catch (Throwable e) {\n      SolrConfig.severeErrors.add(e);\n      LOG.error( DataImporter.MSG.LOAD_EXP, e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              DataImporter.MSG.INVALID_CONFIG, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImportHandler#inform(SolrCore).mjava","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataImportHandler#inform(SolrCore).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public void inform(SolrCore core) {\n    try {\n      //hack to get the name of this handler\n      for (Map.Entry<String, SolrRequestHandler> e : core.getRequestHandlers().entrySet()) {\n        SolrRequestHandler handler = e.getValue();\n        //this will not work if startup=lazy is set\n        if( this == handler) {\n          String name= e.getKey();\n          if(name.startsWith(\"/\")){\n            myName = name.substring(1);\n          }\n          // some users may have '/' in the handler name. replace with '_'\n          myName = myName.replaceAll(\"/\",\"_\") ;\n        }\n      }\n      debugEnabled = StrUtils.parseBool((String)initArgs.get(ENABLE_DEBUG), true);\n      NamedList defaults = (NamedList) initArgs.get(\"defaults\");\n      if (defaults != null) {\n        String configLoc = (String) defaults.get(\"config\");\n        if (configLoc != null && configLoc.length() != 0) {\n          processConfiguration(defaults);\n          final InputSource is = new InputSource(core.getResourceLoader().openConfig(configLoc));\n          is.setSystemId(SystemIdResolver.createSystemIdFromResourceName(configLoc));\n          importer = new DataImporter(is, core,\n                  dataSources, coreScopeSession);\n        }\n      }\n    } catch (Throwable e) {\n      SolrConfig.severeErrors.add(e);\n      LOG.error( DataImporter.MSG.LOAD_EXP, e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              DataImporter.MSG.INVALID_CONFIG, e);\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  public void inform(SolrCore core) {\n    try {\n      //hack to get the name of this handler\n      for (Map.Entry<String, SolrRequestHandler> e : core.getRequestHandlers().entrySet()) {\n        SolrRequestHandler handler = e.getValue();\n        //this will not work if startup=lazy is set\n        if( this == handler) {\n          String name= e.getKey();\n          if(name.startsWith(\"/\")){\n            myName = name.substring(1);\n          }\n          // some users may have '/' in the handler name. replace with '_'\n          myName = myName.replaceAll(\"/\",\"_\") ;\n        }\n      }\n      debugEnabled = StrUtils.parseBool((String)initArgs.get(ENABLE_DEBUG), true);\n      NamedList defaults = (NamedList) initArgs.get(\"defaults\");\n      if (defaults != null) {\n        String configLoc = (String) defaults.get(\"config\");\n        if (configLoc != null && configLoc.length() != 0) {\n          processConfiguration(defaults);\n          final InputSource is = new InputSource(core.getResourceLoader().openConfig(configLoc));\n          is.setSystemId(SystemIdResolver.createSystemIdFromResourceName(configLoc));\n          importer = new DataImporter(is, core,\n                  dataSources, coreScopeSession);\n        }\n      }\n    } catch (Throwable e) {\n      SolrConfig.severeErrors.add(e);\n      LOG.error( DataImporter.MSG.LOAD_EXP, e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              DataImporter.MSG.INVALID_CONFIG, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"c26f00b574427b55127e869b935845554afde1fa":["b24326411db492f92ea49f6fb947c90bc73cf19e","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"85a883878c0af761245ab048babc63d099f835f3":["1da8d55113b689b06716246649de6f62430f15c0","c9f9c250dfa2238c6fa2cb7c83894edc84e1c5a8"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["1da8d55113b689b06716246649de6f62430f15c0","c9f9c250dfa2238c6fa2cb7c83894edc84e1c5a8"],"c9f9c250dfa2238c6fa2cb7c83894edc84e1c5a8":["1da8d55113b689b06716246649de6f62430f15c0"],"b24326411db492f92ea49f6fb947c90bc73cf19e":["c9f9c250dfa2238c6fa2cb7c83894edc84e1c5a8"],"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","b24326411db492f92ea49f6fb947c90bc73cf19e"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["b24326411db492f92ea49f6fb947c90bc73cf19e","b24326411db492f92ea49f6fb947c90bc73cf19e"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["85a883878c0af761245ab048babc63d099f835f3","b24326411db492f92ea49f6fb947c90bc73cf19e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"85a883878c0af761245ab048babc63d099f835f3":["d619839baa8ce5503e496b94a9e42ad6f079293f"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df"],"c9f9c250dfa2238c6fa2cb7c83894edc84e1c5a8":["85a883878c0af761245ab048babc63d099f835f3","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","b24326411db492f92ea49f6fb947c90bc73cf19e"],"b24326411db492f92ea49f6fb947c90bc73cf19e":["c26f00b574427b55127e869b935845554afde1fa","c0ef0193974807e4bddf5432a6b0287fe4d6c9df","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","d619839baa8ce5503e496b94a9e42ad6f079293f"],"1da8d55113b689b06716246649de6f62430f15c0":["85a883878c0af761245ab048babc63d099f835f3","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","c9f9c250dfa2238c6fa2cb7c83894edc84e1c5a8"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":[],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["c26f00b574427b55127e869b935845554afde1fa"],"d619839baa8ce5503e496b94a9e42ad6f079293f":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}