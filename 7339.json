{"path":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#implWeightSortSpec(Sort,int,int,Sort).mjava","commits":[{"id":"3f20d97ebbd280405cebcc21d53c781bf4456453","date":1480454130,"type":0,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#implWeightSortSpec(Sort,int,int,Sort).mjava","pathOld":"/dev/null","sourceNew":"  /** Returns a weighted sort spec according to this searcher */\n  private SortSpec implWeightSortSpec(Sort originalSort, int num, int offset, Sort nullEquivalent) throws IOException {\n    Sort rewrittenSort = weightSort(originalSort);\n    if (rewrittenSort == null) {\n      rewrittenSort = nullEquivalent;\n    }\n\n    final SortField[] rewrittenSortFields = rewrittenSort.getSort();\n    final SchemaField[] rewrittenSchemaFields = new SchemaField[rewrittenSortFields.length];\n    for (int ii = 0; ii < rewrittenSortFields.length; ++ii) {\n      final String fieldName = rewrittenSortFields[ii].getField();\n      rewrittenSchemaFields[ii] = (fieldName == null ? null : schema.getFieldOrNull(fieldName));\n    }\n\n    return new SortSpec(rewrittenSort, rewrittenSchemaFields, num, offset);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b101c3c0e7f5871415e80d970cb3289309f3522e","date":1480511898,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#implWeightSortSpec(Sort,int,int,Sort).mjava","pathOld":"/dev/null","sourceNew":"  /** Returns a weighted sort spec according to this searcher */\n  private SortSpec implWeightSortSpec(Sort originalSort, int num, int offset, Sort nullEquivalent) throws IOException {\n    Sort rewrittenSort = weightSort(originalSort);\n    if (rewrittenSort == null) {\n      rewrittenSort = nullEquivalent;\n    }\n\n    final SortField[] rewrittenSortFields = rewrittenSort.getSort();\n    final SchemaField[] rewrittenSchemaFields = new SchemaField[rewrittenSortFields.length];\n    for (int ii = 0; ii < rewrittenSortFields.length; ++ii) {\n      final String fieldName = rewrittenSortFields[ii].getField();\n      rewrittenSchemaFields[ii] = (fieldName == null ? null : schema.getFieldOrNull(fieldName));\n    }\n\n    return new SortSpec(rewrittenSort, rewrittenSchemaFields, num, offset);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9856095f7afb5a607bf5e65077615ed91273508c","date":1481837697,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#implWeightSortSpec(Sort,int,int,Sort).mjava","pathOld":"/dev/null","sourceNew":"  /** Returns a weighted sort spec according to this searcher */\n  private SortSpec implWeightSortSpec(Sort originalSort, int num, int offset, Sort nullEquivalent) throws IOException {\n    Sort rewrittenSort = weightSort(originalSort);\n    if (rewrittenSort == null) {\n      rewrittenSort = nullEquivalent;\n    }\n\n    final SortField[] rewrittenSortFields = rewrittenSort.getSort();\n    final SchemaField[] rewrittenSchemaFields = new SchemaField[rewrittenSortFields.length];\n    for (int ii = 0; ii < rewrittenSortFields.length; ++ii) {\n      final String fieldName = rewrittenSortFields[ii].getField();\n      rewrittenSchemaFields[ii] = (fieldName == null ? null : schema.getFieldOrNull(fieldName));\n    }\n\n    return new SortSpec(rewrittenSort, rewrittenSchemaFields, num, offset);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b101c3c0e7f5871415e80d970cb3289309f3522e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3f20d97ebbd280405cebcc21d53c781bf4456453"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3f20d97ebbd280405cebcc21d53c781bf4456453":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9856095f7afb5a607bf5e65077615ed91273508c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b101c3c0e7f5871415e80d970cb3289309f3522e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b101c3c0e7f5871415e80d970cb3289309f3522e"]},"commit2Childs":{"b101c3c0e7f5871415e80d970cb3289309f3522e":["9856095f7afb5a607bf5e65077615ed91273508c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b101c3c0e7f5871415e80d970cb3289309f3522e","3f20d97ebbd280405cebcc21d53c781bf4456453","9856095f7afb5a607bf5e65077615ed91273508c"],"3f20d97ebbd280405cebcc21d53c781bf4456453":["b101c3c0e7f5871415e80d970cb3289309f3522e"],"9856095f7afb5a607bf5e65077615ed91273508c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9856095f7afb5a607bf5e65077615ed91273508c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}