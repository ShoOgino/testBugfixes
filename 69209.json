{"path":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestDuelingAnalyzers#testLetterAscii().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestDuelingAnalyzers#testLetterAscii().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/core/TestDuelingAnalyzers#testLetterAscii().mjava","sourceNew":"  public void testLetterAscii() throws Exception {\n    Random random = random();\n    Analyzer left = new MockAnalyzer(random, jvmLetter, false);\n    Analyzer right = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new LetterTokenizer(TEST_VERSION_CURRENT, reader);\n        return new TokenStreamComponents(tokenizer, tokenizer);\n      }\n    };\n    for (int i = 0; i < 10000; i++) {\n      String s = _TestUtil.randomSimpleString(random);\n      assertEquals(s, left.tokenStream(\"foo\", newStringReader(s)), \n                   right.tokenStream(\"foo\", newStringReader(s)));\n    }\n  }\n\n","sourceOld":"  public void testLetterAscii() throws Exception {\n    Random random = random();\n    Analyzer left = new MockAnalyzer(random, jvmLetter, false);\n    Analyzer right = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new LetterTokenizer(TEST_VERSION_CURRENT, reader);\n        return new TokenStreamComponents(tokenizer, tokenizer);\n      }\n    };\n    for (int i = 0; i < 10000; i++) {\n      String s = _TestUtil.randomSimpleString(random);\n      assertEquals(s, left.tokenStream(\"foo\", newStringReader(s)), \n                   right.tokenStream(\"foo\", newStringReader(s)));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"743ffab8be2b8a803ebd5a826a710d8f214a2ca6","date":1341573204,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestDuelingAnalyzers#testLetterAscii().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestDuelingAnalyzers#testLetterAscii().mjava","sourceNew":"  public void testLetterAscii() throws Exception {\n    Random random = random();\n    Analyzer left = new MockAnalyzer(random, jvmLetter, false);\n    Analyzer right = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new LetterTokenizer(TEST_VERSION_CURRENT, reader);\n        return new TokenStreamComponents(tokenizer, tokenizer);\n      }\n    };\n    for (int i = 0; i < 1000; i++) {\n      String s = _TestUtil.randomSimpleString(random);\n      assertEquals(s, left.tokenStream(\"foo\", newStringReader(s)), \n                   right.tokenStream(\"foo\", newStringReader(s)));\n    }\n  }\n\n","sourceOld":"  public void testLetterAscii() throws Exception {\n    Random random = random();\n    Analyzer left = new MockAnalyzer(random, jvmLetter, false);\n    Analyzer right = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new LetterTokenizer(TEST_VERSION_CURRENT, reader);\n        return new TokenStreamComponents(tokenizer, tokenizer);\n      }\n    };\n    for (int i = 0; i < 10000; i++) {\n      String s = _TestUtil.randomSimpleString(random);\n      assertEquals(s, left.tokenStream(\"foo\", newStringReader(s)), \n                   right.tokenStream(\"foo\", newStringReader(s)));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"04e7f30683f53928b2fce016e6430c9795caff22","date":1341839598,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestDuelingAnalyzers#testLetterAscii().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestDuelingAnalyzers#testLetterAscii().mjava","sourceNew":"  public void testLetterAscii() throws Exception {\n    Random random = random();\n    Analyzer left = new MockAnalyzer(random, jvmLetter, false);\n    Analyzer right = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new LetterTokenizer(TEST_VERSION_CURRENT, reader);\n        return new TokenStreamComponents(tokenizer, tokenizer);\n      }\n    };\n    for (int i = 0; i < 1000; i++) {\n      String s = _TestUtil.randomSimpleString(random);\n      assertEquals(s, left.tokenStream(\"foo\", newStringReader(s)), \n                   right.tokenStream(\"foo\", newStringReader(s)));\n    }\n  }\n\n","sourceOld":"  public void testLetterAscii() throws Exception {\n    Random random = random();\n    Analyzer left = new MockAnalyzer(random, jvmLetter, false);\n    Analyzer right = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new LetterTokenizer(TEST_VERSION_CURRENT, reader);\n        return new TokenStreamComponents(tokenizer, tokenizer);\n      }\n    };\n    for (int i = 0; i < 10000; i++) {\n      String s = _TestUtil.randomSimpleString(random);\n      assertEquals(s, left.tokenStream(\"foo\", newStringReader(s)), \n                   right.tokenStream(\"foo\", newStringReader(s)));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestDuelingAnalyzers#testLetterAscii().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestDuelingAnalyzers#testLetterAscii().mjava","sourceNew":"  public void testLetterAscii() throws Exception {\n    Random random = random();\n    Analyzer left = new MockAnalyzer(random, jvmLetter, false);\n    Analyzer right = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new LetterTokenizer(TEST_VERSION_CURRENT, reader);\n        return new TokenStreamComponents(tokenizer, tokenizer);\n      }\n    };\n    for (int i = 0; i < 1000; i++) {\n      String s = _TestUtil.randomSimpleString(random);\n      assertEquals(s, left.tokenStream(\"foo\", newStringReader(s)), \n                   right.tokenStream(\"foo\", newStringReader(s)));\n    }\n  }\n\n","sourceOld":"  public void testLetterAscii() throws Exception {\n    Random random = random();\n    Analyzer left = new MockAnalyzer(random, jvmLetter, false);\n    Analyzer right = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new LetterTokenizer(TEST_VERSION_CURRENT, reader);\n        return new TokenStreamComponents(tokenizer, tokenizer);\n      }\n    };\n    for (int i = 0; i < 10000; i++) {\n      String s = _TestUtil.randomSimpleString(random);\n      assertEquals(s, left.tokenStream(\"foo\", newStringReader(s)), \n                   right.tokenStream(\"foo\", newStringReader(s)));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338","date":1389274049,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestDuelingAnalyzers#testLetterAscii().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestDuelingAnalyzers#testLetterAscii().mjava","sourceNew":"  public void testLetterAscii() throws Exception {\n    Random random = random();\n    Analyzer left = new MockAnalyzer(random, jvmLetter, false);\n    Analyzer right = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new LetterTokenizer(TEST_VERSION_CURRENT);\n        return new TokenStreamComponents(tokenizer, tokenizer);\n      }\n    };\n    for (int i = 0; i < 1000; i++) {\n      String s = _TestUtil.randomSimpleString(random);\n      assertEquals(s, left.tokenStream(\"foo\", newStringReader(s)), \n                   right.tokenStream(\"foo\", newStringReader(s)));\n    }\n  }\n\n","sourceOld":"  public void testLetterAscii() throws Exception {\n    Random random = random();\n    Analyzer left = new MockAnalyzer(random, jvmLetter, false);\n    Analyzer right = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new LetterTokenizer(TEST_VERSION_CURRENT, reader);\n        return new TokenStreamComponents(tokenizer, tokenizer);\n      }\n    };\n    for (int i = 0; i < 1000; i++) {\n      String s = _TestUtil.randomSimpleString(random);\n      assertEquals(s, left.tokenStream(\"foo\", newStringReader(s)), \n                   right.tokenStream(\"foo\", newStringReader(s)));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestDuelingAnalyzers#testLetterAscii().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestDuelingAnalyzers#testLetterAscii().mjava","sourceNew":"  public void testLetterAscii() throws Exception {\n    Random random = random();\n    Analyzer left = new MockAnalyzer(random, jvmLetter, false);\n    Analyzer right = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new LetterTokenizer(TEST_VERSION_CURRENT);\n        return new TokenStreamComponents(tokenizer, tokenizer);\n      }\n    };\n    for (int i = 0; i < 1000; i++) {\n      String s = TestUtil.randomSimpleString(random);\n      assertEquals(s, left.tokenStream(\"foo\", newStringReader(s)), \n                   right.tokenStream(\"foo\", newStringReader(s)));\n    }\n  }\n\n","sourceOld":"  public void testLetterAscii() throws Exception {\n    Random random = random();\n    Analyzer left = new MockAnalyzer(random, jvmLetter, false);\n    Analyzer right = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new LetterTokenizer(TEST_VERSION_CURRENT);\n        return new TokenStreamComponents(tokenizer, tokenizer);\n      }\n    };\n    for (int i = 0; i < 1000; i++) {\n      String s = _TestUtil.randomSimpleString(random);\n      assertEquals(s, left.tokenStream(\"foo\", newStringReader(s)), \n                   right.tokenStream(\"foo\", newStringReader(s)));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"923f36bb0db6f793cf62dbb68723ae3bfbaf1d75","date":1399205975,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestDuelingAnalyzers#testLetterAscii().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestDuelingAnalyzers#testLetterAscii().mjava","sourceNew":"  public void testLetterAscii() throws Exception {\n    Random random = random();\n    Analyzer left = new MockAnalyzer(random, jvmLetter, false);\n    Analyzer right = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new LetterTokenizer(TEST_VERSION_CURRENT, newAttributeFactory());\n        return new TokenStreamComponents(tokenizer, tokenizer);\n      }\n    };\n    for (int i = 0; i < 1000; i++) {\n      String s = TestUtil.randomSimpleString(random);\n      assertEquals(s, left.tokenStream(\"foo\", newStringReader(s)), \n                   right.tokenStream(\"foo\", newStringReader(s)));\n    }\n  }\n\n","sourceOld":"  public void testLetterAscii() throws Exception {\n    Random random = random();\n    Analyzer left = new MockAnalyzer(random, jvmLetter, false);\n    Analyzer right = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new LetterTokenizer(TEST_VERSION_CURRENT);\n        return new TokenStreamComponents(tokenizer, tokenizer);\n      }\n    };\n    for (int i = 0; i < 1000; i++) {\n      String s = TestUtil.randomSimpleString(random);\n      assertEquals(s, left.tokenStream(\"foo\", newStringReader(s)), \n                   right.tokenStream(\"foo\", newStringReader(s)));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff4227bb146f97aabae888091c19e48c88dbb0db","date":1406758576,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestDuelingAnalyzers#testLetterAscii().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestDuelingAnalyzers#testLetterAscii().mjava","sourceNew":"  public void testLetterAscii() throws Exception {\n    Random random = random();\n    Analyzer left = new MockAnalyzer(random, jvmLetter, false);\n    Analyzer right = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new LetterTokenizer(newAttributeFactory());\n        return new TokenStreamComponents(tokenizer, tokenizer);\n      }\n    };\n    for (int i = 0; i < 1000; i++) {\n      String s = TestUtil.randomSimpleString(random);\n      assertEquals(s, left.tokenStream(\"foo\", newStringReader(s)), \n                   right.tokenStream(\"foo\", newStringReader(s)));\n    }\n  }\n\n","sourceOld":"  public void testLetterAscii() throws Exception {\n    Random random = random();\n    Analyzer left = new MockAnalyzer(random, jvmLetter, false);\n    Analyzer right = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new LetterTokenizer(TEST_VERSION_CURRENT, newAttributeFactory());\n        return new TokenStreamComponents(tokenizer, tokenizer);\n      }\n    };\n    for (int i = 0; i < 1000; i++) {\n      String s = TestUtil.randomSimpleString(random);\n      assertEquals(s, left.tokenStream(\"foo\", newStringReader(s)), \n                   right.tokenStream(\"foo\", newStringReader(s)));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cdab62f058ea765dd33deb05b4f19b7d626c801","date":1406803479,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestDuelingAnalyzers#testLetterAscii().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestDuelingAnalyzers#testLetterAscii().mjava","sourceNew":"  public void testLetterAscii() throws Exception {\n    Random random = random();\n    Analyzer left = new MockAnalyzer(random, jvmLetter, false);\n    Analyzer right = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new LetterTokenizer(TEST_VERSION_CURRENT, newAttributeFactory());\n        return new TokenStreamComponents(tokenizer, tokenizer);\n      }\n    };\n    for (int i = 0; i < 1000; i++) {\n      String s = TestUtil.randomSimpleString(random);\n      assertEquals(s, left.tokenStream(\"foo\", newStringReader(s)), \n                   right.tokenStream(\"foo\", newStringReader(s)));\n    }\n  }\n\n","sourceOld":"  public void testLetterAscii() throws Exception {\n    Random random = random();\n    Analyzer left = new MockAnalyzer(random, jvmLetter, false);\n    Analyzer right = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new LetterTokenizer(newAttributeFactory());\n        return new TokenStreamComponents(tokenizer, tokenizer);\n      }\n    };\n    for (int i = 0; i < 1000; i++) {\n      String s = TestUtil.randomSimpleString(random);\n      assertEquals(s, left.tokenStream(\"foo\", newStringReader(s)), \n                   right.tokenStream(\"foo\", newStringReader(s)));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"379db3ad24c4f0214f30a122265a6d6be003a99d","date":1407537768,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestDuelingAnalyzers#testLetterAscii().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestDuelingAnalyzers#testLetterAscii().mjava","sourceNew":"  public void testLetterAscii() throws Exception {\n    Random random = random();\n    Analyzer left = new MockAnalyzer(random, jvmLetter, false);\n    Analyzer right = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new LetterTokenizer(newAttributeFactory());\n        return new TokenStreamComponents(tokenizer, tokenizer);\n      }\n    };\n    for (int i = 0; i < 1000; i++) {\n      String s = TestUtil.randomSimpleString(random);\n      assertEquals(s, left.tokenStream(\"foo\", newStringReader(s)), \n                   right.tokenStream(\"foo\", newStringReader(s)));\n    }\n  }\n\n","sourceOld":"  public void testLetterAscii() throws Exception {\n    Random random = random();\n    Analyzer left = new MockAnalyzer(random, jvmLetter, false);\n    Analyzer right = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new LetterTokenizer(TEST_VERSION_CURRENT, newAttributeFactory());\n        return new TokenStreamComponents(tokenizer, tokenizer);\n      }\n    };\n    for (int i = 0; i < 1000; i++) {\n      String s = TestUtil.randomSimpleString(random);\n      assertEquals(s, left.tokenStream(\"foo\", newStringReader(s)), \n                   right.tokenStream(\"foo\", newStringReader(s)));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a56958d7f71a28824f20031ffbb2e13502a0274e","date":1425573902,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestDuelingAnalyzers#testLetterAscii().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestDuelingAnalyzers#testLetterAscii().mjava","sourceNew":"  public void testLetterAscii() throws Exception {\n    Random random = random();\n    Analyzer left = new MockAnalyzer(random, jvmLetter, false);\n    Analyzer right = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new LetterTokenizer(newAttributeFactory());\n        return new TokenStreamComponents(tokenizer, tokenizer);\n      }\n    };\n    for (int i = 0; i < 1000; i++) {\n      String s = TestUtil.randomSimpleString(random);\n      assertEquals(s, left.tokenStream(\"foo\", newStringReader(s)), \n                   right.tokenStream(\"foo\", newStringReader(s)));\n    }\n    IOUtils.close(left, right);\n  }\n\n","sourceOld":"  public void testLetterAscii() throws Exception {\n    Random random = random();\n    Analyzer left = new MockAnalyzer(random, jvmLetter, false);\n    Analyzer right = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new LetterTokenizer(newAttributeFactory());\n        return new TokenStreamComponents(tokenizer, tokenizer);\n      }\n    };\n    for (int i = 0; i < 1000; i++) {\n      String s = TestUtil.randomSimpleString(random);\n      assertEquals(s, left.tokenStream(\"foo\", newStringReader(s)), \n                   right.tokenStream(\"foo\", newStringReader(s)));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestDuelingAnalyzers#testLetterAscii().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestDuelingAnalyzers#testLetterAscii().mjava","sourceNew":"  public void testLetterAscii() throws Exception {\n    Random random = random();\n    Analyzer left = new MockAnalyzer(random, jvmLetter, false);\n    Analyzer right = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new LetterTokenizer(newAttributeFactory());\n        return new TokenStreamComponents(tokenizer, tokenizer);\n      }\n    };\n    for (int i = 0; i < 1000; i++) {\n      String s = TestUtil.randomSimpleString(random);\n      assertEquals(s, left.tokenStream(\"foo\", newStringReader(s)), \n                   right.tokenStream(\"foo\", newStringReader(s)));\n    }\n    IOUtils.close(left, right);\n  }\n\n","sourceOld":"  public void testLetterAscii() throws Exception {\n    Random random = random();\n    Analyzer left = new MockAnalyzer(random, jvmLetter, false);\n    Analyzer right = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new LetterTokenizer(newAttributeFactory());\n        return new TokenStreamComponents(tokenizer, tokenizer);\n      }\n    };\n    for (int i = 0; i < 1000; i++) {\n      String s = TestUtil.randomSimpleString(random);\n      assertEquals(s, left.tokenStream(\"foo\", newStringReader(s)), \n                   right.tokenStream(\"foo\", newStringReader(s)));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"617d6d4150e0fb2acef8980ce51e3b8e628fb200","date":1580326292,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestDuelingAnalyzers#testLetterAscii().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestDuelingAnalyzers#testLetterAscii().mjava","sourceNew":"  public void testLetterAscii() throws Exception {\n    Random random = random();\n    Analyzer left = new MockAnalyzer(random, jvmLetter, false);\n    Analyzer right = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new LetterTokenizer(newAttributeFactory());\n        return new TokenStreamComponents(tokenizer, tokenizer);\n      }\n    };\n    for (int i = 0; i < 200; i++) {\n      String s = TestUtil.randomSimpleString(random);\n      assertEquals(s, left.tokenStream(\"foo\", newStringReader(s)), \n                   right.tokenStream(\"foo\", newStringReader(s)));\n    }\n    IOUtils.close(left, right);\n  }\n\n","sourceOld":"  public void testLetterAscii() throws Exception {\n    Random random = random();\n    Analyzer left = new MockAnalyzer(random, jvmLetter, false);\n    Analyzer right = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new LetterTokenizer(newAttributeFactory());\n        return new TokenStreamComponents(tokenizer, tokenizer);\n      }\n    };\n    for (int i = 0; i < 1000; i++) {\n      String s = TestUtil.randomSimpleString(random);\n      assertEquals(s, left.tokenStream(\"foo\", newStringReader(s)), \n                   right.tokenStream(\"foo\", newStringReader(s)));\n    }\n    IOUtils.close(left, right);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ff4227bb146f97aabae888091c19e48c88dbb0db":["923f36bb0db6f793cf62dbb68723ae3bfbaf1d75"],"04e7f30683f53928b2fce016e6430c9795caff22":["b89678825b68eccaf09e6ab71675fc0b0af1e099","743ffab8be2b8a803ebd5a826a710d8f214a2ca6"],"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338":["743ffab8be2b8a803ebd5a826a710d8f214a2ca6"],"6613659748fe4411a7dcf85266e55db1f95f7315":["ae889fd5c8a69f6b5d130d3c895bfa5b04d07338"],"923f36bb0db6f793cf62dbb68723ae3bfbaf1d75":["6613659748fe4411a7dcf85266e55db1f95f7315"],"617d6d4150e0fb2acef8980ce51e3b8e628fb200":["a56958d7f71a28824f20031ffbb2e13502a0274e"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["379db3ad24c4f0214f30a122265a6d6be003a99d","a56958d7f71a28824f20031ffbb2e13502a0274e"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["b89678825b68eccaf09e6ab71675fc0b0af1e099","743ffab8be2b8a803ebd5a826a710d8f214a2ca6"],"379db3ad24c4f0214f30a122265a6d6be003a99d":["5cdab62f058ea765dd33deb05b4f19b7d626c801"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a56958d7f71a28824f20031ffbb2e13502a0274e":["379db3ad24c4f0214f30a122265a6d6be003a99d"],"5cdab62f058ea765dd33deb05b4f19b7d626c801":["ff4227bb146f97aabae888091c19e48c88dbb0db"],"743ffab8be2b8a803ebd5a826a710d8f214a2ca6":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["617d6d4150e0fb2acef8980ce51e3b8e628fb200"]},"commit2Childs":{"ff4227bb146f97aabae888091c19e48c88dbb0db":["5cdab62f058ea765dd33deb05b4f19b7d626c801"],"04e7f30683f53928b2fce016e6430c9795caff22":[],"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338":["6613659748fe4411a7dcf85266e55db1f95f7315"],"6613659748fe4411a7dcf85266e55db1f95f7315":["923f36bb0db6f793cf62dbb68723ae3bfbaf1d75"],"923f36bb0db6f793cf62dbb68723ae3bfbaf1d75":["ff4227bb146f97aabae888091c19e48c88dbb0db"],"617d6d4150e0fb2acef8980ce51e3b8e628fb200":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["04e7f30683f53928b2fce016e6430c9795caff22","fe33227f6805edab2036cbb80645cc4e2d1fa424","743ffab8be2b8a803ebd5a826a710d8f214a2ca6"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"379db3ad24c4f0214f30a122265a6d6be003a99d":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","a56958d7f71a28824f20031ffbb2e13502a0274e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"743ffab8be2b8a803ebd5a826a710d8f214a2ca6":["04e7f30683f53928b2fce016e6430c9795caff22","ae889fd5c8a69f6b5d130d3c895bfa5b04d07338","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"a56958d7f71a28824f20031ffbb2e13502a0274e":["617d6d4150e0fb2acef8980ce51e3b8e628fb200","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"5cdab62f058ea765dd33deb05b4f19b7d626c801":["379db3ad24c4f0214f30a122265a6d6be003a99d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["04e7f30683f53928b2fce016e6430c9795caff22","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}