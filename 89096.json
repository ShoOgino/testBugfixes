{"path":"solr/core/src/test/org/apache/solr/cloud/TestRebalanceLeaders#getZkData(CloudSolrClient,String).mjava","commits":[{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestRebalanceLeaders#getZkData(CloudSolrClient,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestRebalanceLeaders#getZkData(CloudSolrServer,String).mjava","sourceNew":"  byte[] getZkData(CloudSolrClient client, String path) {\n    org.apache.zookeeper.data.Stat stat = new org.apache.zookeeper.data.Stat();\n    long start = System.currentTimeMillis();\n    try {\n      byte[] data = client.getZkStateReader().getZkClient().getData(path, null, stat, true);\n      if (data != null) {\n        return data;\n      }\n    } catch (KeeperException.NoNodeException e) {\n      try {\n        Thread.sleep(1000);\n      } catch (InterruptedException e1) {\n        return null;\n      }\n    } catch (InterruptedException | KeeperException e) {\n      return null;\n    }\n    return null;\n  }\n\n","sourceOld":"  byte[] getZkData(CloudSolrServer server, String path) {\n    org.apache.zookeeper.data.Stat stat = new org.apache.zookeeper.data.Stat();\n    long start = System.currentTimeMillis();\n    try {\n      byte[] data = server.getZkStateReader().getZkClient().getData(path, null, stat, true);\n      if (data != null) {\n        return data;\n      }\n    } catch (KeeperException.NoNodeException e) {\n      try {\n        Thread.sleep(1000);\n      } catch (InterruptedException e1) {\n        return null;\n      }\n    } catch (InterruptedException | KeeperException e) {\n      return null;\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bcf9886c8ff537aafde14de48ebf744f5673f08b","date":1439041198,"type":3,"author":"Ramkumar Aiyengar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestRebalanceLeaders#getZkData(CloudSolrClient,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestRebalanceLeaders#getZkData(CloudSolrClient,String).mjava","sourceNew":"  byte[] getZkData(CloudSolrClient client, String path) {\n    org.apache.zookeeper.data.Stat stat = new org.apache.zookeeper.data.Stat();\n    try {\n      byte[] data = client.getZkStateReader().getZkClient().getData(path, null, stat, true);\n      if (data != null) {\n        return data;\n      }\n    } catch (KeeperException.NoNodeException e) {\n      try {\n        Thread.sleep(1000);\n      } catch (InterruptedException e1) {\n        return null;\n      }\n    } catch (InterruptedException | KeeperException e) {\n      return null;\n    }\n    return null;\n  }\n\n","sourceOld":"  byte[] getZkData(CloudSolrClient client, String path) {\n    org.apache.zookeeper.data.Stat stat = new org.apache.zookeeper.data.Stat();\n    long start = System.currentTimeMillis();\n    try {\n      byte[] data = client.getZkStateReader().getZkClient().getData(path, null, stat, true);\n      if (data != null) {\n        return data;\n      }\n    } catch (KeeperException.NoNodeException e) {\n      try {\n        Thread.sleep(1000);\n      } catch (InterruptedException e1) {\n        return null;\n      }\n    } catch (InterruptedException | KeeperException e) {\n      return null;\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"73fd358e8ec697393d56617f4d9cedaca74dca14","date":1547954439,"type":4,"author":"Erick Erickson","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestRebalanceLeaders#getZkData(CloudSolrClient,String).mjava","sourceNew":null,"sourceOld":"  byte[] getZkData(CloudSolrClient client, String path) {\n    org.apache.zookeeper.data.Stat stat = new org.apache.zookeeper.data.Stat();\n    try {\n      byte[] data = client.getZkStateReader().getZkClient().getData(path, null, stat, true);\n      if (data != null) {\n        return data;\n      }\n    } catch (KeeperException.NoNodeException e) {\n      try {\n        Thread.sleep(1000);\n      } catch (InterruptedException e1) {\n        return null;\n      }\n    } catch (InterruptedException | KeeperException e) {\n      return null;\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c89f1ef80a9432f4eabaeda9a1e135cd72e60836","date":1547972642,"type":4,"author":"Tommaso Teofili","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestRebalanceLeaders#getZkData(CloudSolrClient,String).mjava","sourceNew":null,"sourceOld":"  byte[] getZkData(CloudSolrClient client, String path) {\n    org.apache.zookeeper.data.Stat stat = new org.apache.zookeeper.data.Stat();\n    try {\n      byte[] data = client.getZkStateReader().getZkClient().getData(path, null, stat, true);\n      if (data != null) {\n        return data;\n      }\n    } catch (KeeperException.NoNodeException e) {\n      try {\n        Thread.sleep(1000);\n      } catch (InterruptedException e1) {\n        return null;\n      }\n    } catch (InterruptedException | KeeperException e) {\n      return null;\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c89f1ef80a9432f4eabaeda9a1e135cd72e60836":["bcf9886c8ff537aafde14de48ebf744f5673f08b","73fd358e8ec697393d56617f4d9cedaca74dca14"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bcf9886c8ff537aafde14de48ebf744f5673f08b":["bafca15d8e408346a67f4282ad1143b88023893b"],"bafca15d8e408346a67f4282ad1143b88023893b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"73fd358e8ec697393d56617f4d9cedaca74dca14":["bcf9886c8ff537aafde14de48ebf744f5673f08b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["73fd358e8ec697393d56617f4d9cedaca74dca14"]},"commit2Childs":{"c89f1ef80a9432f4eabaeda9a1e135cd72e60836":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bafca15d8e408346a67f4282ad1143b88023893b"],"bcf9886c8ff537aafde14de48ebf744f5673f08b":["c89f1ef80a9432f4eabaeda9a1e135cd72e60836","73fd358e8ec697393d56617f4d9cedaca74dca14"],"bafca15d8e408346a67f4282ad1143b88023893b":["bcf9886c8ff537aafde14de48ebf744f5673f08b"],"73fd358e8ec697393d56617f4d9cedaca74dca14":["c89f1ef80a9432f4eabaeda9a1e135cd72e60836","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c89f1ef80a9432f4eabaeda9a1e135cd72e60836","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}