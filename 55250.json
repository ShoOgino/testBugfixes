{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TopicStream#persistCheckpoints().mjava","commits":[{"id":"10b9c6c42133576daaccbd79bd04c88511b9caca","date":1455930223,"type":0,"author":"jbernste","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TopicStream#persistCheckpoints().mjava","pathOld":"/dev/null","sourceNew":"  private void persistCheckpoints() throws IOException{\n\n    UpdateRequest request = new UpdateRequest();\n    request.setParam(\"collection\", checkpointCollection);\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"id\", id);\n\n    for(Map.Entry<String, Long> entry : checkpoints.entrySet()) {\n      doc.addField(\"checkpoint_ss\", entry.getKey()+\"~\"+entry.getValue());\n    }\n\n    request.add(doc);\n    try {\n      cloudSolrClient.request(request);\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6d2dadc1f5ca8703d8659f4964961f9967935d75","date":1490231750,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TopicStream#persistCheckpoints().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TopicStream#persistCheckpoints().mjava","sourceNew":"  private void persistCheckpoints() throws IOException{\n\n    UpdateRequest request = new UpdateRequest();\n    request.setParam(\"collection\", checkpointCollection);\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(ID, id);\n\n    for(Map.Entry<String, Long> entry : checkpoints.entrySet()) {\n      doc.addField(\"checkpoint_ss\", entry.getKey()+\"~\"+entry.getValue());\n    }\n\n    request.add(doc);\n    try {\n      cloudSolrClient.request(request);\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n\n","sourceOld":"  private void persistCheckpoints() throws IOException{\n\n    UpdateRequest request = new UpdateRequest();\n    request.setParam(\"collection\", checkpointCollection);\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"id\", id);\n\n    for(Map.Entry<String, Long> entry : checkpoints.entrySet()) {\n      doc.addField(\"checkpoint_ss\", entry.getKey()+\"~\"+entry.getValue());\n    }\n\n    request.add(doc);\n    try {\n      cloudSolrClient.request(request);\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e5fa6615014cd2288fe930f8c8bb726f9504961d","date":1490280013,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TopicStream#persistCheckpoints().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TopicStream#persistCheckpoints().mjava","sourceNew":"  private void persistCheckpoints() throws IOException{\n\n    UpdateRequest request = new UpdateRequest();\n    request.setParam(\"collection\", checkpointCollection);\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(ID, id);\n\n    for(Map.Entry<String, Long> entry : checkpoints.entrySet()) {\n      doc.addField(\"checkpoint_ss\", entry.getKey()+\"~\"+entry.getValue());\n    }\n\n    request.add(doc);\n    try {\n      cloudSolrClient.request(request);\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n\n","sourceOld":"  private void persistCheckpoints() throws IOException{\n\n    UpdateRequest request = new UpdateRequest();\n    request.setParam(\"collection\", checkpointCollection);\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"id\", id);\n\n    for(Map.Entry<String, Long> entry : checkpoints.entrySet()) {\n      doc.addField(\"checkpoint_ss\", entry.getKey()+\"~\"+entry.getValue());\n    }\n\n    request.add(doc);\n    try {\n      cloudSolrClient.request(request);\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f15af35d55d70c34451f9df5edeaeff6b31f8cbe","date":1519625627,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TopicStream#persistCheckpoints().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TopicStream#persistCheckpoints().mjava","sourceNew":"  private void persistCheckpoints() throws IOException{\n\n    if (cloudSolrClient == null) {\n      return;\n    }\n    UpdateRequest request = new UpdateRequest();\n    request.setParam(\"collection\", checkpointCollection);\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(ID, id);\n\n    for(Map.Entry<String, Long> entry : checkpoints.entrySet()) {\n      doc.addField(\"checkpoint_ss\", entry.getKey()+\"~\"+entry.getValue());\n    }\n\n    request.add(doc);\n    try {\n      cloudSolrClient.request(request);\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n\n","sourceOld":"  private void persistCheckpoints() throws IOException{\n\n    UpdateRequest request = new UpdateRequest();\n    request.setParam(\"collection\", checkpointCollection);\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(ID, id);\n\n    for(Map.Entry<String, Long> entry : checkpoints.entrySet()) {\n      doc.addField(\"checkpoint_ss\", entry.getKey()+\"~\"+entry.getValue());\n    }\n\n    request.add(doc);\n    try {\n      cloudSolrClient.request(request);\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e5fa6615014cd2288fe930f8c8bb726f9504961d":["10b9c6c42133576daaccbd79bd04c88511b9caca"],"10b9c6c42133576daaccbd79bd04c88511b9caca":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6d2dadc1f5ca8703d8659f4964961f9967935d75":["10b9c6c42133576daaccbd79bd04c88511b9caca"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f15af35d55d70c34451f9df5edeaeff6b31f8cbe":["6d2dadc1f5ca8703d8659f4964961f9967935d75"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f15af35d55d70c34451f9df5edeaeff6b31f8cbe"]},"commit2Childs":{"e5fa6615014cd2288fe930f8c8bb726f9504961d":[],"10b9c6c42133576daaccbd79bd04c88511b9caca":["e5fa6615014cd2288fe930f8c8bb726f9504961d","6d2dadc1f5ca8703d8659f4964961f9967935d75"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["10b9c6c42133576daaccbd79bd04c88511b9caca"],"6d2dadc1f5ca8703d8659f4964961f9967935d75":["f15af35d55d70c34451f9df5edeaeff6b31f8cbe"],"f15af35d55d70c34451f9df5edeaeff6b31f8cbe":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e5fa6615014cd2288fe930f8c8bb726f9504961d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}