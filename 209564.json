{"path":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testExceptionOnMergeInit().mjava","commits":[{"id":"fd4c4b2a55a46d2c45e3de4514f08e33215caa21","date":1288902330,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testExceptionOnMergeInit().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testExceptionOnMergeInit().mjava","sourceNew":"  // LUCENE-1210\n  public void testExceptionOnMergeInit() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer())\n      .setMaxBufferedDocs(2).setMergeScheduler(new ConcurrentMergeScheduler());\n    ((LogMergePolicy) conf.getMergePolicy()).setMergeFactor(2);\n    MockIndexWriter3 w = new MockIndexWriter3(dir, conf);\n    w.doFail = true;\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a field\", Field.Store.YES,\n                      Field.Index.ANALYZED));\n    for(int i=0;i<10;i++)\n      try {\n        w.addDocument(doc);\n      } catch (RuntimeException re) {\n        break;\n      }\n\n    ((ConcurrentMergeScheduler) w.getConfig().getMergeScheduler()).sync();\n    assertTrue(w.failed);\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1210\n  public void testExceptionOnMergeInit() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer())\n      .setMaxBufferedDocs(2).setMergeScheduler(new ConcurrentMergeScheduler());\n    ((LogMergePolicy) conf.getMergePolicy()).setMergeFactor(2);\n    MockIndexWriter2 w = new MockIndexWriter2(dir, conf);\n    w.doFail = true;\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a field\", Field.Store.YES,\n                      Field.Index.ANALYZED));\n    for(int i=0;i<10;i++)\n      try {\n        w.addDocument(doc);\n      } catch (RuntimeException re) {\n        break;\n      }\n\n    ((ConcurrentMergeScheduler) w.getConfig().getMergeScheduler()).sync();\n    assertTrue(w.failed);\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85a883878c0af761245ab048babc63d099f835f3","date":1289553330,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testExceptionOnMergeInit().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testExceptionOnMergeInit().mjava","sourceNew":"  // LUCENE-1210\n  public void testExceptionOnMergeInit() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer())\n      .setMaxBufferedDocs(2).setMergeScheduler(new ConcurrentMergeScheduler());\n    ((LogMergePolicy) conf.getMergePolicy()).setMergeFactor(2);\n    MockIndexWriter3 w = new MockIndexWriter3(dir, conf);\n    w.doFail = true;\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a field\", Field.Store.YES,\n                      Field.Index.ANALYZED));\n    for(int i=0;i<10;i++)\n      try {\n        w.addDocument(doc);\n      } catch (RuntimeException re) {\n        break;\n      }\n\n    ((ConcurrentMergeScheduler) w.getConfig().getMergeScheduler()).sync();\n    assertTrue(w.failed);\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1210\n  public void testExceptionOnMergeInit() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer())\n      .setMaxBufferedDocs(2).setMergeScheduler(new ConcurrentMergeScheduler());\n    ((LogMergePolicy) conf.getMergePolicy()).setMergeFactor(2);\n    MockIndexWriter2 w = new MockIndexWriter2(dir, conf);\n    w.doFail = true;\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a field\", Field.Store.YES,\n                      Field.Index.ANALYZED));\n    for(int i=0;i<10;i++)\n      try {\n        w.addDocument(doc);\n      } catch (RuntimeException re) {\n        break;\n      }\n\n    ((ConcurrentMergeScheduler) w.getConfig().getMergeScheduler()).sync();\n    assertTrue(w.failed);\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testExceptionOnMergeInit().mjava","pathOld":"/dev/null","sourceNew":"  // LUCENE-1210\n  public void testExceptionOnMergeInit() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer())\n      .setMaxBufferedDocs(2).setMergeScheduler(new ConcurrentMergeScheduler());\n    ((LogMergePolicy) conf.getMergePolicy()).setMergeFactor(2);\n    MockIndexWriter3 w = new MockIndexWriter3(dir, conf);\n    w.doFail = true;\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a field\", Field.Store.YES,\n                      Field.Index.ANALYZED));\n    for(int i=0;i<10;i++)\n      try {\n        w.addDocument(doc);\n      } catch (RuntimeException re) {\n        break;\n      }\n\n    ((ConcurrentMergeScheduler) w.getConfig().getMergeScheduler()).sync();\n    assertTrue(w.failed);\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c19f985e36a65cc969e8e564fe337a0d41512075","date":1296330536,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testExceptionOnMergeInit().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testExceptionOnMergeInit().mjava","sourceNew":"  // LUCENE-1210\n  public void testExceptionOnMergeInit() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer())\n      .setMaxBufferedDocs(2).setMergeScheduler(new ConcurrentMergeScheduler()).setMergePolicy(newLogMergePolicy());\n    ((LogMergePolicy) conf.getMergePolicy()).setMergeFactor(2);\n    MockIndexWriter3 w = new MockIndexWriter3(dir, conf);\n    w.doFail = true;\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a field\", Field.Store.YES,\n                      Field.Index.ANALYZED));\n    for(int i=0;i<10;i++)\n      try {\n        w.addDocument(doc);\n      } catch (RuntimeException re) {\n        break;\n      }\n\n    ((ConcurrentMergeScheduler) w.getConfig().getMergeScheduler()).sync();\n    assertTrue(w.failed);\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1210\n  public void testExceptionOnMergeInit() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer())\n      .setMaxBufferedDocs(2).setMergeScheduler(new ConcurrentMergeScheduler());\n    ((LogMergePolicy) conf.getMergePolicy()).setMergeFactor(2);\n    MockIndexWriter3 w = new MockIndexWriter3(dir, conf);\n    w.doFail = true;\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a field\", Field.Store.YES,\n                      Field.Index.ANALYZED));\n    for(int i=0;i<10;i++)\n      try {\n        w.addDocument(doc);\n      } catch (RuntimeException re) {\n        break;\n      }\n\n    ((ConcurrentMergeScheduler) w.getConfig().getMergeScheduler()).sync();\n    assertTrue(w.failed);\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":["94b4f4bf8892e6006d66f4231d6d1873bbe56e73"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testExceptionOnMergeInit().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testExceptionOnMergeInit().mjava","sourceNew":"  // LUCENE-1210\n  public void testExceptionOnMergeInit() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer())\n      .setMaxBufferedDocs(2).setMergeScheduler(new ConcurrentMergeScheduler()).setMergePolicy(newLogMergePolicy());\n    ((LogMergePolicy) conf.getMergePolicy()).setMergeFactor(2);\n    MockIndexWriter3 w = new MockIndexWriter3(dir, conf);\n    w.doFail = true;\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a field\", Field.Store.YES,\n                      Field.Index.ANALYZED));\n    for(int i=0;i<10;i++)\n      try {\n        w.addDocument(doc);\n      } catch (RuntimeException re) {\n        break;\n      }\n\n    ((ConcurrentMergeScheduler) w.getConfig().getMergeScheduler()).sync();\n    assertTrue(w.failed);\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1210\n  public void testExceptionOnMergeInit() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer())\n      .setMaxBufferedDocs(2).setMergeScheduler(new ConcurrentMergeScheduler());\n    ((LogMergePolicy) conf.getMergePolicy()).setMergeFactor(2);\n    MockIndexWriter3 w = new MockIndexWriter3(dir, conf);\n    w.doFail = true;\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a field\", Field.Store.YES,\n                      Field.Index.ANALYZED));\n    for(int i=0;i<10;i++)\n      try {\n        w.addDocument(doc);\n      } catch (RuntimeException re) {\n        break;\n      }\n\n    ((ConcurrentMergeScheduler) w.getConfig().getMergeScheduler()).sync();\n    assertTrue(w.failed);\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testExceptionOnMergeInit().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testExceptionOnMergeInit().mjava","sourceNew":"  // LUCENE-1210\n  public void testExceptionOnMergeInit() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer())\n      .setMaxBufferedDocs(2).setMergeScheduler(new ConcurrentMergeScheduler()).setMergePolicy(newLogMergePolicy());\n    ((LogMergePolicy) conf.getMergePolicy()).setMergeFactor(2);\n    MockIndexWriter3 w = new MockIndexWriter3(dir, conf);\n    w.doFail = true;\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a field\", Field.Store.YES,\n                      Field.Index.ANALYZED));\n    for(int i=0;i<10;i++)\n      try {\n        w.addDocument(doc);\n      } catch (RuntimeException re) {\n        break;\n      }\n\n    ((ConcurrentMergeScheduler) w.getConfig().getMergeScheduler()).sync();\n    assertTrue(w.failed);\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1210\n  public void testExceptionOnMergeInit() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer())\n      .setMaxBufferedDocs(2).setMergeScheduler(new ConcurrentMergeScheduler());\n    ((LogMergePolicy) conf.getMergePolicy()).setMergeFactor(2);\n    MockIndexWriter3 w = new MockIndexWriter3(dir, conf);\n    w.doFail = true;\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a field\", Field.Store.YES,\n                      Field.Index.ANALYZED));\n    for(int i=0;i<10;i++)\n      try {\n        w.addDocument(doc);\n      } catch (RuntimeException re) {\n        break;\n      }\n\n    ((ConcurrentMergeScheduler) w.getConfig().getMergeScheduler()).sync();\n    assertTrue(w.failed);\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2c5f0cb44df114db4228c8f77861714b5cabaea","date":1302542431,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testExceptionOnMergeInit().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testExceptionOnMergeInit().mjava","sourceNew":"  // LUCENE-1210\n  public void testExceptionOnMergeInit() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random))\n      .setMaxBufferedDocs(2).setMergeScheduler(new ConcurrentMergeScheduler()).setMergePolicy(newLogMergePolicy());\n    ((LogMergePolicy) conf.getMergePolicy()).setMergeFactor(2);\n    MockIndexWriter3 w = new MockIndexWriter3(dir, conf);\n    w.doFail = true;\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a field\", Field.Store.YES,\n                      Field.Index.ANALYZED));\n    for(int i=0;i<10;i++)\n      try {\n        w.addDocument(doc);\n      } catch (RuntimeException re) {\n        break;\n      }\n\n    ((ConcurrentMergeScheduler) w.getConfig().getMergeScheduler()).sync();\n    assertTrue(w.failed);\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1210\n  public void testExceptionOnMergeInit() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer())\n      .setMaxBufferedDocs(2).setMergeScheduler(new ConcurrentMergeScheduler()).setMergePolicy(newLogMergePolicy());\n    ((LogMergePolicy) conf.getMergePolicy()).setMergeFactor(2);\n    MockIndexWriter3 w = new MockIndexWriter3(dir, conf);\n    w.doFail = true;\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a field\", Field.Store.YES,\n                      Field.Index.ANALYZED));\n    for(int i=0;i<10;i++)\n      try {\n        w.addDocument(doc);\n      } catch (RuntimeException re) {\n        break;\n      }\n\n    ((ConcurrentMergeScheduler) w.getConfig().getMergeScheduler()).sync();\n    assertTrue(w.failed);\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testExceptionOnMergeInit().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testExceptionOnMergeInit().mjava","sourceNew":"  // LUCENE-1210\n  public void testExceptionOnMergeInit() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random))\n      .setMaxBufferedDocs(2).setMergeScheduler(new ConcurrentMergeScheduler()).setMergePolicy(newLogMergePolicy());\n    ((LogMergePolicy) conf.getMergePolicy()).setMergeFactor(2);\n    MockIndexWriter3 w = new MockIndexWriter3(dir, conf);\n    w.doFail = true;\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a field\", Field.Store.YES,\n                      Field.Index.ANALYZED));\n    for(int i=0;i<10;i++)\n      try {\n        w.addDocument(doc);\n      } catch (RuntimeException re) {\n        break;\n      }\n\n    ((ConcurrentMergeScheduler) w.getConfig().getMergeScheduler()).sync();\n    assertTrue(w.failed);\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1210\n  public void testExceptionOnMergeInit() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer())\n      .setMaxBufferedDocs(2).setMergeScheduler(new ConcurrentMergeScheduler()).setMergePolicy(newLogMergePolicy());\n    ((LogMergePolicy) conf.getMergePolicy()).setMergeFactor(2);\n    MockIndexWriter3 w = new MockIndexWriter3(dir, conf);\n    w.doFail = true;\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a field\", Field.Store.YES,\n                      Field.Index.ANALYZED));\n    for(int i=0;i<10;i++)\n      try {\n        w.addDocument(doc);\n      } catch (RuntimeException re) {\n        break;\n      }\n\n    ((ConcurrentMergeScheduler) w.getConfig().getMergeScheduler()).sync();\n    assertTrue(w.failed);\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testExceptionOnMergeInit().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testExceptionOnMergeInit().mjava","sourceNew":"  // LUCENE-1210\n  public void testExceptionOnMergeInit() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random))\n      .setMaxBufferedDocs(2).setMergeScheduler(new ConcurrentMergeScheduler()).setMergePolicy(newLogMergePolicy());\n    ((LogMergePolicy) conf.getMergePolicy()).setMergeFactor(2);\n    MockIndexWriter3 w = new MockIndexWriter3(dir, conf);\n    w.doFail = true;\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a field\", Field.Store.YES,\n                      Field.Index.ANALYZED));\n    for(int i=0;i<10;i++)\n      try {\n        w.addDocument(doc);\n      } catch (RuntimeException re) {\n        break;\n      }\n\n    ((ConcurrentMergeScheduler) w.getConfig().getMergeScheduler()).sync();\n    assertTrue(w.failed);\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1210\n  public void testExceptionOnMergeInit() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer())\n      .setMaxBufferedDocs(2).setMergeScheduler(new ConcurrentMergeScheduler()).setMergePolicy(newLogMergePolicy());\n    ((LogMergePolicy) conf.getMergePolicy()).setMergeFactor(2);\n    MockIndexWriter3 w = new MockIndexWriter3(dir, conf);\n    w.doFail = true;\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a field\", Field.Store.YES,\n                      Field.Index.ANALYZED));\n    for(int i=0;i<10;i++)\n      try {\n        w.addDocument(doc);\n      } catch (RuntimeException re) {\n        break;\n      }\n\n    ((ConcurrentMergeScheduler) w.getConfig().getMergeScheduler()).sync();\n    assertTrue(w.failed);\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testExceptionOnMergeInit().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testExceptionOnMergeInit().mjava","sourceNew":"  // LUCENE-1210\n  public void testExceptionOnMergeInit() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random))\n      .setMaxBufferedDocs(2).setMergeScheduler(new ConcurrentMergeScheduler()).setMergePolicy(newLogMergePolicy());\n    ((LogMergePolicy) conf.getMergePolicy()).setMergeFactor(2);\n    MockIndexWriter3 w = new MockIndexWriter3(dir, conf);\n    w.doFail = true;\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a field\", Field.Store.YES,\n                      Field.Index.ANALYZED));\n    for(int i=0;i<10;i++)\n      try {\n        w.addDocument(doc);\n      } catch (RuntimeException re) {\n        break;\n      }\n\n    ((ConcurrentMergeScheduler) w.getConfig().getMergeScheduler()).sync();\n    assertTrue(w.failed);\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1210\n  public void testExceptionOnMergeInit() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer())\n      .setMaxBufferedDocs(2).setMergeScheduler(new ConcurrentMergeScheduler()).setMergePolicy(newLogMergePolicy());\n    ((LogMergePolicy) conf.getMergePolicy()).setMergeFactor(2);\n    MockIndexWriter3 w = new MockIndexWriter3(dir, conf);\n    w.doFail = true;\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a field\", Field.Store.YES,\n                      Field.Index.ANALYZED));\n    for(int i=0;i<10;i++)\n      try {\n        w.addDocument(doc);\n      } catch (RuntimeException re) {\n        break;\n      }\n\n    ((ConcurrentMergeScheduler) w.getConfig().getMergeScheduler()).sync();\n    assertTrue(w.failed);\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testExceptionOnMergeInit().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testExceptionOnMergeInit().mjava","sourceNew":"  // LUCENE-1210\n  public void testExceptionOnMergeInit() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random))\n      .setMaxBufferedDocs(2).setMergeScheduler(new ConcurrentMergeScheduler()).setMergePolicy(newLogMergePolicy());\n    ((LogMergePolicy) conf.getMergePolicy()).setMergeFactor(2);\n    MockIndexWriter3 w = new MockIndexWriter3(dir, conf);\n    w.doFail = true;\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a field\", TextField.TYPE_STORED));\n    for(int i=0;i<10;i++)\n      try {\n        w.addDocument(doc);\n      } catch (RuntimeException re) {\n        break;\n      }\n\n    ((ConcurrentMergeScheduler) w.getConfig().getMergeScheduler()).sync();\n    assertTrue(w.failed);\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1210\n  public void testExceptionOnMergeInit() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random))\n      .setMaxBufferedDocs(2).setMergeScheduler(new ConcurrentMergeScheduler()).setMergePolicy(newLogMergePolicy());\n    ((LogMergePolicy) conf.getMergePolicy()).setMergeFactor(2);\n    MockIndexWriter3 w = new MockIndexWriter3(dir, conf);\n    w.doFail = true;\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a field\", Field.Store.YES,\n                      Field.Index.ANALYZED));\n    for(int i=0;i<10;i++)\n      try {\n        w.addDocument(doc);\n      } catch (RuntimeException re) {\n        break;\n      }\n\n    ((ConcurrentMergeScheduler) w.getConfig().getMergeScheduler()).sync();\n    assertTrue(w.failed);\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testExceptionOnMergeInit().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testExceptionOnMergeInit().mjava","sourceNew":"  // LUCENE-1210\n  public void testExceptionOnMergeInit() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random))\n      .setMaxBufferedDocs(2).setMergeScheduler(new ConcurrentMergeScheduler()).setMergePolicy(newLogMergePolicy());\n    ((LogMergePolicy) conf.getMergePolicy()).setMergeFactor(2);\n    MockIndexWriter3 w = new MockIndexWriter3(dir, conf);\n    w.doFail = true;\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a field\", TextField.TYPE_STORED));\n    for(int i=0;i<10;i++)\n      try {\n        w.addDocument(doc);\n      } catch (RuntimeException re) {\n        break;\n      }\n\n    ((ConcurrentMergeScheduler) w.getConfig().getMergeScheduler()).sync();\n    assertTrue(w.failed);\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1210\n  public void testExceptionOnMergeInit() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random))\n      .setMaxBufferedDocs(2).setMergeScheduler(new ConcurrentMergeScheduler()).setMergePolicy(newLogMergePolicy());\n    ((LogMergePolicy) conf.getMergePolicy()).setMergeFactor(2);\n    MockIndexWriter3 w = new MockIndexWriter3(dir, conf);\n    w.doFail = true;\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a field\", TextField.TYPE_STORED));\n    for(int i=0;i<10;i++)\n      try {\n        w.addDocument(doc);\n      } catch (RuntimeException re) {\n        break;\n      }\n\n    ((ConcurrentMergeScheduler) w.getConfig().getMergeScheduler()).sync();\n    assertTrue(w.failed);\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"85a883878c0af761245ab048babc63d099f835f3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","fd4c4b2a55a46d2c45e3de4514f08e33215caa21"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["29ef99d61cda9641b6250bf9567329a6e65f901d","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"962d04139994fce5193143ef35615499a9a96d78":["bde51b089eb7f86171eb3406e38a274743f9b7ac","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","fd4c4b2a55a46d2c45e3de4514f08e33215caa21"],"c19f985e36a65cc969e8e564fe337a0d41512075":["fd4c4b2a55a46d2c45e3de4514f08e33215caa21"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["c19f985e36a65cc969e8e564fe337a0d41512075"],"a3776dccca01c11e7046323cfad46a3b4a471233":["c19f985e36a65cc969e8e564fe337a0d41512075","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["85a883878c0af761245ab048babc63d099f835f3","c19f985e36a65cc969e8e564fe337a0d41512075"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fd4c4b2a55a46d2c45e3de4514f08e33215caa21":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["f2c5f0cb44df114db4228c8f77861714b5cabaea"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","c19f985e36a65cc969e8e564fe337a0d41512075"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"85a883878c0af761245ab048babc63d099f835f3":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"962d04139994fce5193143ef35615499a9a96d78":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"c19f985e36a65cc969e8e564fe337a0d41512075":["f2c5f0cb44df114db4228c8f77861714b5cabaea","a3776dccca01c11e7046323cfad46a3b4a471233","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233","1509f151d7692d84fae414b2b799ac06ba60fcb4"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["85a883878c0af761245ab048babc63d099f835f3","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","fd4c4b2a55a46d2c45e3de4514f08e33215caa21"],"fd4c4b2a55a46d2c45e3de4514f08e33215caa21":["85a883878c0af761245ab048babc63d099f835f3","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","c19f985e36a65cc969e8e564fe337a0d41512075"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["962d04139994fce5193143ef35615499a9a96d78"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}