{"path":"solr/core/src/java/org/apache/solr/cloud/ZkController#rejoinShardLeaderElection(SolrParams).mjava","commits":[{"id":"4e6b620c271c84c0f14919eec7b90083b292ee51","date":1419461736,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#rejoinShardLeaderElection(SolrParams).mjava","pathOld":"/dev/null","sourceNew":"  public void rejoinShardLeaderElection(SolrParams params) {\n    try {\n      String collectionName = params.get(COLLECTION_PROP);\n      String shardId = params.get(SHARD_ID_PROP);\n      String nodeName = params.get(NODE_NAME_PROP);\n      String coreName = params.get(CORE_NAME_PROP);\n      String electionNode = params.get(ELECTION_NODE_PROP);\n      String baseUrl = params.get(BASE_URL_PROP);\n\n      ZkNodeProps zkProps = new ZkNodeProps(CORE_NAME_PROP, coreName, NODE_NAME_PROP, nodeName, COLLECTION_PROP, collectionName,\n          SHARD_ID_PROP, shardId, ELECTION_NODE_PROP, electionNode, BASE_URL_PROP, baseUrl);\n\n      ShardLeaderElectionContext context = new ShardLeaderElectionContext(leaderElector, shardId, collectionName,\n          nodeName, zkProps, this, getCoreContainer());\n      LeaderElector elect = new LeaderElector(this.zkClient);\n      context.leaderSeqPath = context.electionPath + LeaderElector.ELECTION_NODE + \"/\" + electionNode;\n      elect.setup(context);\n\n      elect.retryElection(context, params.getBool(REJOIN_AT_HEAD_PROP));\n    } catch (Exception e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Unable to rejoin election\", e);\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["6b18ef9cd3f6ff4f7733e6d43eebec259e0e9064"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6b18ef9cd3f6ff4f7733e6d43eebec259e0e9064","date":1441124018,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#rejoinShardLeaderElection(SolrParams).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#rejoinShardLeaderElection(SolrParams).mjava","sourceNew":"  public void rejoinShardLeaderElection(SolrParams params) {\n    try {\n      \n      String collectionName = params.get(COLLECTION_PROP);\n      String shardId = params.get(SHARD_ID_PROP);\n      String coreNodeName = params.get(CORE_NODE_NAME_PROP);\n      String coreName = params.get(CORE_NAME_PROP);\n      String electionNode = params.get(ELECTION_NODE_PROP);\n      String baseUrl = params.get(BASE_URL_PROP);\n\n      try (SolrCore core = cc.getCore(coreName)) {\n        MDCLoggingContext.setCore(core);\n        \n        log.info(\"Rejoin the shard leader election.\");\n        \n        ContextKey contextKey = new ContextKey(collectionName, coreNodeName);\n        \n        ElectionContext prevContext = electionContexts.get(contextKey);\n        if (prevContext != null) prevContext.cancelElection();\n        \n        ZkNodeProps zkProps = new ZkNodeProps(BASE_URL_PROP, baseUrl, CORE_NAME_PROP, coreName, NODE_NAME_PROP, getNodeName(), CORE_NODE_NAME_PROP, coreNodeName);\n            \n        LeaderElector elect = ((ShardLeaderElectionContextBase) prevContext).getLeaderElector();\n        ShardLeaderElectionContext context = new ShardLeaderElectionContext(elect, shardId, collectionName,\n            coreNodeName, zkProps, this, getCoreContainer());\n            \n        context.leaderSeqPath = context.electionPath + LeaderElector.ELECTION_NODE + \"/\" + electionNode;\n        elect.setup(context);\n        electionContexts.put(contextKey, context);\n        \n        elect.retryElection(context, params.getBool(REJOIN_AT_HEAD_PROP));\n      }\n    } catch (Exception e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Unable to rejoin election\", e);\n    }\n\n  }\n\n","sourceOld":"  public void rejoinShardLeaderElection(SolrParams params) {\n    try {\n      String collectionName = params.get(COLLECTION_PROP);\n      String shardId = params.get(SHARD_ID_PROP);\n      String nodeName = params.get(NODE_NAME_PROP);\n      String coreName = params.get(CORE_NAME_PROP);\n      String electionNode = params.get(ELECTION_NODE_PROP);\n      String baseUrl = params.get(BASE_URL_PROP);\n\n      ZkNodeProps zkProps = new ZkNodeProps(CORE_NAME_PROP, coreName, NODE_NAME_PROP, nodeName, COLLECTION_PROP, collectionName,\n          SHARD_ID_PROP, shardId, ELECTION_NODE_PROP, electionNode, BASE_URL_PROP, baseUrl);\n\n      ShardLeaderElectionContext context = new ShardLeaderElectionContext(leaderElector, shardId, collectionName,\n          nodeName, zkProps, this, getCoreContainer());\n      LeaderElector elect = new LeaderElector(this.zkClient);\n      context.leaderSeqPath = context.electionPath + LeaderElector.ELECTION_NODE + \"/\" + electionNode;\n      elect.setup(context);\n\n      elect.retryElection(context, params.getBool(REJOIN_AT_HEAD_PROP));\n    } catch (Exception e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Unable to rejoin election\", e);\n    }\n\n  }\n\n","bugFix":["4e6b620c271c84c0f14919eec7b90083b292ee51"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8ed124d21605b0e41f648c25f80f60ba1828e78a","date":1477056513,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#rejoinShardLeaderElection(SolrParams).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#rejoinShardLeaderElection(SolrParams).mjava","sourceNew":"  public void rejoinShardLeaderElection(SolrParams params) {\n    try {\n      \n      String collectionName = params.get(COLLECTION_PROP);\n      String shardId = params.get(SHARD_ID_PROP);\n      String coreNodeName = params.get(CORE_NODE_NAME_PROP);\n      String coreName = params.get(CORE_NAME_PROP);\n      String electionNode = params.get(ELECTION_NODE_PROP);\n      String baseUrl = params.get(BASE_URL_PROP);\n\n      try (SolrCore core = cc.getCore(coreName)) {\n        MDCLoggingContext.setCore(core);\n        \n        log.info(\"Rejoin the shard leader election.\");\n        \n        ContextKey contextKey = new ContextKey(collectionName, coreNodeName);\n        \n        ElectionContext prevContext = electionContexts.get(contextKey);\n        if (prevContext != null) prevContext.cancelElection();\n        \n        ZkNodeProps zkProps = new ZkNodeProps(BASE_URL_PROP, baseUrl, CORE_NAME_PROP, coreName, NODE_NAME_PROP, getNodeName(), CORE_NODE_NAME_PROP, coreNodeName);\n            \n        LeaderElector elect = ((ShardLeaderElectionContextBase) prevContext).getLeaderElector();\n        ShardLeaderElectionContext context = new ShardLeaderElectionContext(elect, shardId, collectionName,\n            coreNodeName, zkProps, this, getCoreContainer());\n            \n        context.leaderSeqPath = context.electionPath + LeaderElector.ELECTION_NODE + \"/\" + electionNode;\n        elect.setup(context);\n        electionContexts.put(contextKey, context);\n        \n        elect.retryElection(context, params.getBool(REJOIN_AT_HEAD_PROP, false));\n      }\n    } catch (Exception e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Unable to rejoin election\", e);\n    }\n\n  }\n\n","sourceOld":"  public void rejoinShardLeaderElection(SolrParams params) {\n    try {\n      \n      String collectionName = params.get(COLLECTION_PROP);\n      String shardId = params.get(SHARD_ID_PROP);\n      String coreNodeName = params.get(CORE_NODE_NAME_PROP);\n      String coreName = params.get(CORE_NAME_PROP);\n      String electionNode = params.get(ELECTION_NODE_PROP);\n      String baseUrl = params.get(BASE_URL_PROP);\n\n      try (SolrCore core = cc.getCore(coreName)) {\n        MDCLoggingContext.setCore(core);\n        \n        log.info(\"Rejoin the shard leader election.\");\n        \n        ContextKey contextKey = new ContextKey(collectionName, coreNodeName);\n        \n        ElectionContext prevContext = electionContexts.get(contextKey);\n        if (prevContext != null) prevContext.cancelElection();\n        \n        ZkNodeProps zkProps = new ZkNodeProps(BASE_URL_PROP, baseUrl, CORE_NAME_PROP, coreName, NODE_NAME_PROP, getNodeName(), CORE_NODE_NAME_PROP, coreNodeName);\n            \n        LeaderElector elect = ((ShardLeaderElectionContextBase) prevContext).getLeaderElector();\n        ShardLeaderElectionContext context = new ShardLeaderElectionContext(elect, shardId, collectionName,\n            coreNodeName, zkProps, this, getCoreContainer());\n            \n        context.leaderSeqPath = context.electionPath + LeaderElector.ELECTION_NODE + \"/\" + electionNode;\n        elect.setup(context);\n        electionContexts.put(contextKey, context);\n        \n        elect.retryElection(context, params.getBool(REJOIN_AT_HEAD_PROP));\n      }\n    } catch (Exception e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Unable to rejoin election\", e);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"80d0e6d59ae23f4a6f30eaf40bfb40742300287f","date":1477598926,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#rejoinShardLeaderElection(SolrParams).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#rejoinShardLeaderElection(SolrParams).mjava","sourceNew":"  public void rejoinShardLeaderElection(SolrParams params) {\n    try {\n      \n      String collectionName = params.get(COLLECTION_PROP);\n      String shardId = params.get(SHARD_ID_PROP);\n      String coreNodeName = params.get(CORE_NODE_NAME_PROP);\n      String coreName = params.get(CORE_NAME_PROP);\n      String electionNode = params.get(ELECTION_NODE_PROP);\n      String baseUrl = params.get(BASE_URL_PROP);\n\n      try (SolrCore core = cc.getCore(coreName)) {\n        MDCLoggingContext.setCore(core);\n        \n        log.info(\"Rejoin the shard leader election.\");\n        \n        ContextKey contextKey = new ContextKey(collectionName, coreNodeName);\n        \n        ElectionContext prevContext = electionContexts.get(contextKey);\n        if (prevContext != null) prevContext.cancelElection();\n        \n        ZkNodeProps zkProps = new ZkNodeProps(BASE_URL_PROP, baseUrl, CORE_NAME_PROP, coreName, NODE_NAME_PROP, getNodeName(), CORE_NODE_NAME_PROP, coreNodeName);\n            \n        LeaderElector elect = ((ShardLeaderElectionContextBase) prevContext).getLeaderElector();\n        ShardLeaderElectionContext context = new ShardLeaderElectionContext(elect, shardId, collectionName,\n            coreNodeName, zkProps, this, getCoreContainer());\n            \n        context.leaderSeqPath = context.electionPath + LeaderElector.ELECTION_NODE + \"/\" + electionNode;\n        elect.setup(context);\n        electionContexts.put(contextKey, context);\n        \n        elect.retryElection(context, params.getBool(REJOIN_AT_HEAD_PROP, false));\n      }\n    } catch (Exception e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Unable to rejoin election\", e);\n    }\n\n  }\n\n","sourceOld":"  public void rejoinShardLeaderElection(SolrParams params) {\n    try {\n      \n      String collectionName = params.get(COLLECTION_PROP);\n      String shardId = params.get(SHARD_ID_PROP);\n      String coreNodeName = params.get(CORE_NODE_NAME_PROP);\n      String coreName = params.get(CORE_NAME_PROP);\n      String electionNode = params.get(ELECTION_NODE_PROP);\n      String baseUrl = params.get(BASE_URL_PROP);\n\n      try (SolrCore core = cc.getCore(coreName)) {\n        MDCLoggingContext.setCore(core);\n        \n        log.info(\"Rejoin the shard leader election.\");\n        \n        ContextKey contextKey = new ContextKey(collectionName, coreNodeName);\n        \n        ElectionContext prevContext = electionContexts.get(contextKey);\n        if (prevContext != null) prevContext.cancelElection();\n        \n        ZkNodeProps zkProps = new ZkNodeProps(BASE_URL_PROP, baseUrl, CORE_NAME_PROP, coreName, NODE_NAME_PROP, getNodeName(), CORE_NODE_NAME_PROP, coreNodeName);\n            \n        LeaderElector elect = ((ShardLeaderElectionContextBase) prevContext).getLeaderElector();\n        ShardLeaderElectionContext context = new ShardLeaderElectionContext(elect, shardId, collectionName,\n            coreNodeName, zkProps, this, getCoreContainer());\n            \n        context.leaderSeqPath = context.electionPath + LeaderElector.ELECTION_NODE + \"/\" + electionNode;\n        elect.setup(context);\n        electionContexts.put(contextKey, context);\n        \n        elect.retryElection(context, params.getBool(REJOIN_AT_HEAD_PROP));\n      }\n    } catch (Exception e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Unable to rejoin election\", e);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15","date":1554259533,"type":3,"author":"Gus Heck","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#rejoinShardLeaderElection(SolrParams).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#rejoinShardLeaderElection(SolrParams).mjava","sourceNew":"  public void rejoinShardLeaderElection(SolrParams params) {\n    try {\n\n      String collectionName = params.get(COLLECTION_PROP);\n      String shardId = params.get(SHARD_ID_PROP);\n      String coreNodeName = params.get(CORE_NODE_NAME_PROP);\n      String coreName = params.get(CORE_NAME_PROP);\n      String electionNode = params.get(ELECTION_NODE_PROP);\n      String baseUrl = params.get(BASE_URL_PROP);\n\n      try (SolrCore core = cc.getCore(coreName)) {\n        MDCLoggingContext.setCore(core);\n\n        log.info(\"Rejoin the shard leader election.\");\n\n        ContextKey contextKey = new ContextKey(collectionName, coreNodeName);\n\n        ElectionContext prevContext = electionContexts.get(contextKey);\n        if (prevContext != null) prevContext.cancelElection();\n\n        ZkNodeProps zkProps = new ZkNodeProps(BASE_URL_PROP, baseUrl, CORE_NAME_PROP, coreName, NODE_NAME_PROP, getNodeName(), CORE_NODE_NAME_PROP, coreNodeName);\n\n        LeaderElector elect = ((ShardLeaderElectionContextBase) prevContext).getLeaderElector();\n        ShardLeaderElectionContext context = new ShardLeaderElectionContext(elect, shardId, collectionName,\n            coreNodeName, zkProps, this, getCoreContainer());\n\n        context.leaderSeqPath = context.electionPath + LeaderElector.ELECTION_NODE + \"/\" + electionNode;\n        elect.setup(context);\n        electionContexts.put(contextKey, context);\n\n        elect.retryElection(context, params.getBool(REJOIN_AT_HEAD_PROP, false));\n      }\n    } catch (Exception e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Unable to rejoin election\", e);\n    }\n\n  }\n\n","sourceOld":"  public void rejoinShardLeaderElection(SolrParams params) {\n    try {\n      \n      String collectionName = params.get(COLLECTION_PROP);\n      String shardId = params.get(SHARD_ID_PROP);\n      String coreNodeName = params.get(CORE_NODE_NAME_PROP);\n      String coreName = params.get(CORE_NAME_PROP);\n      String electionNode = params.get(ELECTION_NODE_PROP);\n      String baseUrl = params.get(BASE_URL_PROP);\n\n      try (SolrCore core = cc.getCore(coreName)) {\n        MDCLoggingContext.setCore(core);\n        \n        log.info(\"Rejoin the shard leader election.\");\n        \n        ContextKey contextKey = new ContextKey(collectionName, coreNodeName);\n        \n        ElectionContext prevContext = electionContexts.get(contextKey);\n        if (prevContext != null) prevContext.cancelElection();\n        \n        ZkNodeProps zkProps = new ZkNodeProps(BASE_URL_PROP, baseUrl, CORE_NAME_PROP, coreName, NODE_NAME_PROP, getNodeName(), CORE_NODE_NAME_PROP, coreNodeName);\n            \n        LeaderElector elect = ((ShardLeaderElectionContextBase) prevContext).getLeaderElector();\n        ShardLeaderElectionContext context = new ShardLeaderElectionContext(elect, shardId, collectionName,\n            coreNodeName, zkProps, this, getCoreContainer());\n            \n        context.leaderSeqPath = context.electionPath + LeaderElector.ELECTION_NODE + \"/\" + electionNode;\n        elect.setup(context);\n        electionContexts.put(contextKey, context);\n        \n        elect.retryElection(context, params.getBool(REJOIN_AT_HEAD_PROP, false));\n      }\n    } catch (Exception e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Unable to rejoin election\", e);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ed5005b977107bba28c700351216f1595e7abe4f","date":1585964712,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#rejoinShardLeaderElection(SolrParams).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#rejoinShardLeaderElection(SolrParams).mjava","sourceNew":"  public void rejoinShardLeaderElection(SolrParams params) {\n\n    String collectionName = params.get(COLLECTION_PROP);\n    String shardId = params.get(SHARD_ID_PROP);\n    String coreNodeName = params.get(CORE_NODE_NAME_PROP);\n    String coreName = params.get(CORE_NAME_PROP);\n    String electionNode = params.get(ELECTION_NODE_PROP);\n    String baseUrl = params.get(BASE_URL_PROP);\n\n    try {\n      MDCLoggingContext.setCoreDescriptor(cc, cc.getCoreDescriptor(coreName));\n\n      log.info(\"Rejoin the shard leader election.\");\n\n      ContextKey contextKey = new ContextKey(collectionName, coreNodeName);\n\n      ElectionContext prevContext = electionContexts.get(contextKey);\n      if (prevContext != null) prevContext.cancelElection();\n\n      ZkNodeProps zkProps = new ZkNodeProps(BASE_URL_PROP, baseUrl, CORE_NAME_PROP, coreName, NODE_NAME_PROP, getNodeName(), CORE_NODE_NAME_PROP, coreNodeName);\n\n      LeaderElector elect = ((ShardLeaderElectionContextBase) prevContext).getLeaderElector();\n      ShardLeaderElectionContext context = new ShardLeaderElectionContext(elect, shardId, collectionName,\n          coreNodeName, zkProps, this, getCoreContainer());\n\n      context.leaderSeqPath = context.electionPath + LeaderElector.ELECTION_NODE + \"/\" + electionNode;\n      elect.setup(context);\n      electionContexts.put(contextKey, context);\n\n      elect.retryElection(context, params.getBool(REJOIN_AT_HEAD_PROP, false));\n    } catch (Exception e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Unable to rejoin election\", e);\n    } finally {\n      MDCLoggingContext.clear();\n    }\n  }\n\n","sourceOld":"  public void rejoinShardLeaderElection(SolrParams params) {\n    try {\n\n      String collectionName = params.get(COLLECTION_PROP);\n      String shardId = params.get(SHARD_ID_PROP);\n      String coreNodeName = params.get(CORE_NODE_NAME_PROP);\n      String coreName = params.get(CORE_NAME_PROP);\n      String electionNode = params.get(ELECTION_NODE_PROP);\n      String baseUrl = params.get(BASE_URL_PROP);\n\n      try (SolrCore core = cc.getCore(coreName)) {\n        MDCLoggingContext.setCore(core);\n\n        log.info(\"Rejoin the shard leader election.\");\n\n        ContextKey contextKey = new ContextKey(collectionName, coreNodeName);\n\n        ElectionContext prevContext = electionContexts.get(contextKey);\n        if (prevContext != null) prevContext.cancelElection();\n\n        ZkNodeProps zkProps = new ZkNodeProps(BASE_URL_PROP, baseUrl, CORE_NAME_PROP, coreName, NODE_NAME_PROP, getNodeName(), CORE_NODE_NAME_PROP, coreNodeName);\n\n        LeaderElector elect = ((ShardLeaderElectionContextBase) prevContext).getLeaderElector();\n        ShardLeaderElectionContext context = new ShardLeaderElectionContext(elect, shardId, collectionName,\n            coreNodeName, zkProps, this, getCoreContainer());\n\n        context.leaderSeqPath = context.electionPath + LeaderElector.ELECTION_NODE + \"/\" + electionNode;\n        elect.setup(context);\n        electionContexts.put(contextKey, context);\n\n        elect.retryElection(context, params.getBool(REJOIN_AT_HEAD_PROP, false));\n      }\n    } catch (Exception e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Unable to rejoin election\", e);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb3e074ae11c1a9314839f364f6bcb94aba27b0c","date":1595610635,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#rejoinShardLeaderElection(SolrParams).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#rejoinShardLeaderElection(SolrParams).mjava","sourceNew":"  public void rejoinShardLeaderElection(SolrParams params) {\n\n    String collectionName = params.get(COLLECTION_PROP);\n    String shardId = params.get(SHARD_ID_PROP);\n    String coreNodeName = params.get(CORE_NODE_NAME_PROP);\n    String coreName = params.get(CORE_NAME_PROP);\n    String electionNode = params.get(ELECTION_NODE_PROP);\n    String baseUrl = params.get(BASE_URL_PROP);\n\n    try {\n      MDCLoggingContext.setCoreDescriptor(cc, cc.getCoreDescriptor(coreName));\n\n      log.info(\"Rejoin the shard leader election.\");\n\n      ContextKey contextKey = new ContextKey(collectionName, coreNodeName);\n\n      ElectionContext prevContext = electionContexts.get(contextKey);\n      if (prevContext != null) prevContext.cancelElection();\n\n      ZkNodeProps zkProps = new ZkNodeProps(BASE_URL_PROP, baseUrl, CORE_NAME_PROP, coreName, NODE_NAME_PROP, getNodeName(), CORE_NODE_NAME_PROP, coreNodeName);\n\n      LeaderElector elect = ((ShardLeaderElectionContextBase) prevContext).getLeaderElector();\n      ShardLeaderElectionContext context = new ShardLeaderElectionContext(elect, shardId, collectionName,\n          coreNodeName, zkProps, this, getCoreContainer());\n\n      context.leaderSeqPath = context.electionPath + LeaderElector.ELECTION_NODE + \"/\" + electionNode;\n      elect.setup(context);\n      electionContexts.put(contextKey, context);\n\n      elect.retryElection(context, params.getBool(REJOIN_AT_HEAD_PROP, false));\n\n      try (SolrCore core = cc.getCore(coreName)) {\n        Replica.Type replicaType = core.getCoreDescriptor().getCloudDescriptor().getReplicaType();\n        if (replicaType == Type.TLOG) {\n          String leaderUrl = getLeader(core.getCoreDescriptor().getCloudDescriptor(), cloudConfig.getLeaderVoteWait());\n          String ourUrl = ZkCoreNodeProps.getCoreUrl(baseUrl, coreName);\n          if (!leaderUrl.equals(ourUrl)) {\n            // restart the replication thread to ensure the replication is running in each new replica\n            // especially if previous role is \"leader\" (i.e., no replication thread)\n            stopReplicationFromLeader(coreName);\n            startReplicationFromLeader(coreName, false);\n          }\n        }\n      }\n    } catch (Exception e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Unable to rejoin election\", e);\n    } finally {\n      MDCLoggingContext.clear();\n    }\n  }\n\n","sourceOld":"  public void rejoinShardLeaderElection(SolrParams params) {\n\n    String collectionName = params.get(COLLECTION_PROP);\n    String shardId = params.get(SHARD_ID_PROP);\n    String coreNodeName = params.get(CORE_NODE_NAME_PROP);\n    String coreName = params.get(CORE_NAME_PROP);\n    String electionNode = params.get(ELECTION_NODE_PROP);\n    String baseUrl = params.get(BASE_URL_PROP);\n\n    try {\n      MDCLoggingContext.setCoreDescriptor(cc, cc.getCoreDescriptor(coreName));\n\n      log.info(\"Rejoin the shard leader election.\");\n\n      ContextKey contextKey = new ContextKey(collectionName, coreNodeName);\n\n      ElectionContext prevContext = electionContexts.get(contextKey);\n      if (prevContext != null) prevContext.cancelElection();\n\n      ZkNodeProps zkProps = new ZkNodeProps(BASE_URL_PROP, baseUrl, CORE_NAME_PROP, coreName, NODE_NAME_PROP, getNodeName(), CORE_NODE_NAME_PROP, coreNodeName);\n\n      LeaderElector elect = ((ShardLeaderElectionContextBase) prevContext).getLeaderElector();\n      ShardLeaderElectionContext context = new ShardLeaderElectionContext(elect, shardId, collectionName,\n          coreNodeName, zkProps, this, getCoreContainer());\n\n      context.leaderSeqPath = context.electionPath + LeaderElector.ELECTION_NODE + \"/\" + electionNode;\n      elect.setup(context);\n      electionContexts.put(contextKey, context);\n\n      elect.retryElection(context, params.getBool(REJOIN_AT_HEAD_PROP, false));\n    } catch (Exception e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Unable to rejoin election\", e);\n    } finally {\n      MDCLoggingContext.clear();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8ed124d21605b0e41f648c25f80f60ba1828e78a":["6b18ef9cd3f6ff4f7733e6d43eebec259e0e9064"],"bb3e074ae11c1a9314839f364f6bcb94aba27b0c":["ed5005b977107bba28c700351216f1595e7abe4f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":["6b18ef9cd3f6ff4f7733e6d43eebec259e0e9064","8ed124d21605b0e41f648c25f80f60ba1828e78a"],"ed5005b977107bba28c700351216f1595e7abe4f":["0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15"],"6b18ef9cd3f6ff4f7733e6d43eebec259e0e9064":["4e6b620c271c84c0f14919eec7b90083b292ee51"],"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15":["8ed124d21605b0e41f648c25f80f60ba1828e78a"],"4e6b620c271c84c0f14919eec7b90083b292ee51":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bb3e074ae11c1a9314839f364f6bcb94aba27b0c"]},"commit2Childs":{"8ed124d21605b0e41f648c25f80f60ba1828e78a":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f","0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15"],"bb3e074ae11c1a9314839f364f6bcb94aba27b0c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4e6b620c271c84c0f14919eec7b90083b292ee51"],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":[],"ed5005b977107bba28c700351216f1595e7abe4f":["bb3e074ae11c1a9314839f364f6bcb94aba27b0c"],"6b18ef9cd3f6ff4f7733e6d43eebec259e0e9064":["8ed124d21605b0e41f648c25f80f60ba1828e78a","80d0e6d59ae23f4a6f30eaf40bfb40742300287f"],"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15":["ed5005b977107bba28c700351216f1595e7abe4f"],"4e6b620c271c84c0f14919eec7b90083b292ee51":["6b18ef9cd3f6ff4f7733e6d43eebec259e0e9064"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}