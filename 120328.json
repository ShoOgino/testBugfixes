{"path":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/FacetLabel#fullPathLength().mjava","commits":[{"id":"c190847801a50f4dd20fd639bdc29b54ea3b288b","date":1384461522,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/FacetLabel#fullPathLength().mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/CategoryPath#fullPathLength().mjava","sourceNew":"  /**\n   * Returns the number of characters needed to represent the path, including\n   * delimiter characters, for using with\n   * {@link #copyFullPath(char[], int, char)}.\n   */\n  public int fullPathLength() {\n    if (length == 0) return 0;\n    \n    int charsNeeded = 0;\n    for (int i = 0; i < length; i++) {\n      charsNeeded += components[i].length();\n    }\n    charsNeeded += length - 1; // num delimter chars\n    return charsNeeded;\n  }\n\n","sourceOld":"  /**\n   * Returns the number of characters needed to represent the path, including\n   * delimiter characters, for using with\n   * {@link #copyFullPath(char[], int, char)}.\n   */\n  public int fullPathLength() {\n    if (length == 0) return 0;\n    \n    int charsNeeded = 0;\n    for (int i = 0; i < length; i++) {\n      charsNeeded += components[i].length();\n    }\n    charsNeeded += length - 1; // num delimter chars\n    return charsNeeded;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bbe9946d3cd818d329255e4c325597ac3480503e","date":1385580921,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/FacetLabel#fullPathLength().mjava","sourceNew":null,"sourceOld":"  /**\n   * Returns the number of characters needed to represent the path, including\n   * delimiter characters, for using with\n   * {@link #copyFullPath(char[], int, char)}.\n   */\n  public int fullPathLength() {\n    if (length == 0) return 0;\n    \n    int charsNeeded = 0;\n    for (int i = 0; i < length; i++) {\n      charsNeeded += components[i].length();\n    }\n    charsNeeded += length - 1; // num delimter chars\n    return charsNeeded;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bbe9946d3cd818d329255e4c325597ac3480503e":["c190847801a50f4dd20fd639bdc29b54ea3b288b"],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817","c190847801a50f4dd20fd639bdc29b54ea3b288b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"bbe9946d3cd818d329255e4c325597ac3480503e":[],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["bbe9946d3cd818d329255e4c325597ac3480503e"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","bbe9946d3cd818d329255e4c325597ac3480503e"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}