{"path":"modules/queryparser/src/test/org/apache/lucene/queryparser/classic/TestMultiPhraseQueryParsing#testMultiPhraseQueryParsing().mjava","commits":[{"id":"91a3609ac9a09ca0c8eee1b765401bbdacaceaf8","date":1310355420,"type":1,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queryparser/src/test/org/apache/lucene/queryparser/classic/TestMultiPhraseQueryParsing#testMultiPhraseQueryParsing().mjava","pathOld":"lucene/src/test/org/apache/lucene/queryParser/TestMultiPhraseQueryParsing#testMultiPhraseQueryParsing().mjava","sourceNew":"  public void testMultiPhraseQueryParsing() throws Exception {\n    TokenAndPos[] INCR_0_QUERY_TOKENS_AND = new TokenAndPos[]{\n        new TokenAndPos(\"a\", 0),\n        new TokenAndPos(\"1\", 0),\n        new TokenAndPos(\"b\", 1),\n        new TokenAndPos(\"1\", 1),\n        new TokenAndPos(\"c\", 2)\n    };\n\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\", new CannedAnalyzer(INCR_0_QUERY_TOKENS_AND));\n    Query q = qp.parse(\"\\\"this text is acually ignored\\\"\");\n    assertTrue(\"wrong query type!\", q instanceof MultiPhraseQuery);\n\n    MultiPhraseQuery multiPhraseQuery = new MultiPhraseQuery();\n    multiPhraseQuery.add(new Term[]{ new Term(\"field\", \"a\"), new Term(\"field\", \"1\") }, -1);\n    multiPhraseQuery.add(new Term[]{ new Term(\"field\", \"b\"), new Term(\"field\", \"1\") }, 0);\n    multiPhraseQuery.add(new Term[]{ new Term(\"field\", \"c\") }, 1);\n\n    assertEquals(multiPhraseQuery, q);\n  }\n\n","sourceOld":"  public void testMultiPhraseQueryParsing() throws Exception {\n    TokenAndPos[] INCR_0_QUERY_TOKENS_AND = new TokenAndPos[]{\n        new TokenAndPos(\"a\", 0),\n        new TokenAndPos(\"1\", 0),\n        new TokenAndPos(\"b\", 1),\n        new TokenAndPos(\"1\", 1),\n        new TokenAndPos(\"c\", 2)\n    };\n\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\", new CannedAnalyzer(INCR_0_QUERY_TOKENS_AND));\n    Query q = qp.parse(\"\\\"this text is acually ignored\\\"\");\n    assertTrue(\"wrong query type!\", q instanceof MultiPhraseQuery);\n\n    MultiPhraseQuery multiPhraseQuery = new MultiPhraseQuery();\n    multiPhraseQuery.add(new Term[]{ new Term(\"field\", \"a\"), new Term(\"field\", \"1\") }, -1);\n    multiPhraseQuery.add(new Term[]{ new Term(\"field\", \"b\"), new Term(\"field\", \"1\") }, 0);\n    multiPhraseQuery.add(new Term[]{ new Term(\"field\", \"c\") }, 1);\n\n    assertEquals(multiPhraseQuery, q);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestMultiPhraseQueryParsing#testMultiPhraseQueryParsing().mjava","pathOld":"modules/queryparser/src/test/org/apache/lucene/queryparser/classic/TestMultiPhraseQueryParsing#testMultiPhraseQueryParsing().mjava","sourceNew":"  public void testMultiPhraseQueryParsing() throws Exception {\n    TokenAndPos[] INCR_0_QUERY_TOKENS_AND = new TokenAndPos[]{\n        new TokenAndPos(\"a\", 0),\n        new TokenAndPos(\"1\", 0),\n        new TokenAndPos(\"b\", 1),\n        new TokenAndPos(\"1\", 1),\n        new TokenAndPos(\"c\", 2)\n    };\n\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\", new CannedAnalyzer(INCR_0_QUERY_TOKENS_AND));\n    Query q = qp.parse(\"\\\"this text is acually ignored\\\"\");\n    assertTrue(\"wrong query type!\", q instanceof MultiPhraseQuery);\n\n    MultiPhraseQuery multiPhraseQuery = new MultiPhraseQuery();\n    multiPhraseQuery.add(new Term[]{ new Term(\"field\", \"a\"), new Term(\"field\", \"1\") }, -1);\n    multiPhraseQuery.add(new Term[]{ new Term(\"field\", \"b\"), new Term(\"field\", \"1\") }, 0);\n    multiPhraseQuery.add(new Term[]{ new Term(\"field\", \"c\") }, 1);\n\n    assertEquals(multiPhraseQuery, q);\n  }\n\n","sourceOld":"  public void testMultiPhraseQueryParsing() throws Exception {\n    TokenAndPos[] INCR_0_QUERY_TOKENS_AND = new TokenAndPos[]{\n        new TokenAndPos(\"a\", 0),\n        new TokenAndPos(\"1\", 0),\n        new TokenAndPos(\"b\", 1),\n        new TokenAndPos(\"1\", 1),\n        new TokenAndPos(\"c\", 2)\n    };\n\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\", new CannedAnalyzer(INCR_0_QUERY_TOKENS_AND));\n    Query q = qp.parse(\"\\\"this text is acually ignored\\\"\");\n    assertTrue(\"wrong query type!\", q instanceof MultiPhraseQuery);\n\n    MultiPhraseQuery multiPhraseQuery = new MultiPhraseQuery();\n    multiPhraseQuery.add(new Term[]{ new Term(\"field\", \"a\"), new Term(\"field\", \"1\") }, -1);\n    multiPhraseQuery.add(new Term[]{ new Term(\"field\", \"b\"), new Term(\"field\", \"1\") }, 0);\n    multiPhraseQuery.add(new Term[]{ new Term(\"field\", \"c\") }, 1);\n\n    assertEquals(multiPhraseQuery, q);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["91a3609ac9a09ca0c8eee1b765401bbdacaceaf8"],"91a3609ac9a09ca0c8eee1b765401bbdacaceaf8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"91a3609ac9a09ca0c8eee1b765401bbdacaceaf8":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["91a3609ac9a09ca0c8eee1b765401bbdacaceaf8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}