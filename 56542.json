{"path":"lucene/core/src/java/org/apache/lucene/util/automaton/SortedIntSet#incr(int).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/SortedIntSet#incr(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/SortedIntSet#incr(int).mjava","sourceNew":"  // Adds this state to the set\n  public void incr(int num) {\n    if (useTreeMap) {\n      final Integer key = num;\n      Integer val = map.get(key);\n      if (val == null) {\n        map.put(key, 1);\n      } else {\n        map.put(key, 1+val);\n      }\n      return;\n    }\n\n    if (upto == values.length) {\n      values = ArrayUtil.grow(values, 1+upto);\n      counts = ArrayUtil.grow(counts, 1+upto);\n    }\n\n    for(int i=0;i<upto;i++) {\n      if (values[i] == num) {\n        counts[i]++;\n        return;\n      } else if (num < values[i]) {\n        // insert here\n        int j = upto-1;\n        while (j >= i) {\n          values[1+j] = values[j];\n          counts[1+j] = counts[j];\n          j--;\n        }\n        values[i] = num;\n        counts[i] = 1;\n        upto++;\n        return;\n      }\n    }\n\n    // append\n    values[upto] = num;\n    counts[upto] = 1;\n    upto++;\n\n    if (upto == TREE_MAP_CUTOVER) {\n      useTreeMap = true;\n      for(int i=0;i<upto;i++) {\n        map.put(values[i], counts[i]);\n      }\n    }\n  }\n\n","sourceOld":"  // Adds this state to the set\n  public void incr(int num) {\n    if (useTreeMap) {\n      final Integer key = num;\n      Integer val = map.get(key);\n      if (val == null) {\n        map.put(key, 1);\n      } else {\n        map.put(key, 1+val);\n      }\n      return;\n    }\n\n    if (upto == values.length) {\n      values = ArrayUtil.grow(values, 1+upto);\n      counts = ArrayUtil.grow(counts, 1+upto);\n    }\n\n    for(int i=0;i<upto;i++) {\n      if (values[i] == num) {\n        counts[i]++;\n        return;\n      } else if (num < values[i]) {\n        // insert here\n        int j = upto-1;\n        while (j >= i) {\n          values[1+j] = values[j];\n          counts[1+j] = counts[j];\n          j--;\n        }\n        values[i] = num;\n        counts[i] = 1;\n        upto++;\n        return;\n      }\n    }\n\n    // append\n    values[upto] = num;\n    counts[upto] = 1;\n    upto++;\n\n    if (upto == TREE_MAP_CUTOVER) {\n      useTreeMap = true;\n      for(int i=0;i<upto;i++) {\n        map.put(values[i], counts[i]);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7f4ef381bf0c2d618c6db830d3dd668c6901c05a","date":1402592253,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/SortedIntSet#incr(int).mjava","sourceNew":null,"sourceOld":"  // Adds this state to the set\n  public void incr(int num) {\n    if (useTreeMap) {\n      final Integer key = num;\n      Integer val = map.get(key);\n      if (val == null) {\n        map.put(key, 1);\n      } else {\n        map.put(key, 1+val);\n      }\n      return;\n    }\n\n    if (upto == values.length) {\n      values = ArrayUtil.grow(values, 1+upto);\n      counts = ArrayUtil.grow(counts, 1+upto);\n    }\n\n    for(int i=0;i<upto;i++) {\n      if (values[i] == num) {\n        counts[i]++;\n        return;\n      } else if (num < values[i]) {\n        // insert here\n        int j = upto-1;\n        while (j >= i) {\n          values[1+j] = values[j];\n          counts[1+j] = counts[j];\n          j--;\n        }\n        values[i] = num;\n        counts[i] = 1;\n        upto++;\n        return;\n      }\n    }\n\n    // append\n    values[upto] = num;\n    counts[upto] = 1;\n    upto++;\n\n    if (upto == TREE_MAP_CUTOVER) {\n      useTreeMap = true;\n      for(int i=0;i<upto;i++) {\n        map.put(values[i], counts[i]);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ca1c732df8923f5624f6c06b1dcca9e69d98c96","date":1402957391,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/SortedIntSet#incr(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/SortedIntSetLight#incr(int).mjava","sourceNew":"  // Adds this state to the set\n  public void incr(int num) {\n    if (useTreeMap) {\n      final Integer key = num;\n      Integer val = map.get(key);\n      if (val == null) {\n        map.put(key, 1);\n      } else {\n        map.put(key, 1+val);\n      }\n      return;\n    }\n\n    if (upto == values.length) {\n      values = ArrayUtil.grow(values, 1+upto);\n      counts = ArrayUtil.grow(counts, 1+upto);\n    }\n\n    for(int i=0;i<upto;i++) {\n      if (values[i] == num) {\n        counts[i]++;\n        return;\n      } else if (num < values[i]) {\n        // insert here\n        int j = upto-1;\n        while (j >= i) {\n          values[1+j] = values[j];\n          counts[1+j] = counts[j];\n          j--;\n        }\n        values[i] = num;\n        counts[i] = 1;\n        upto++;\n        return;\n      }\n    }\n\n    // append\n    values[upto] = num;\n    counts[upto] = 1;\n    upto++;\n\n    if (upto == TREE_MAP_CUTOVER) {\n      useTreeMap = true;\n      for(int i=0;i<upto;i++) {\n        map.put(values[i], counts[i]);\n      }\n    }\n  }\n\n","sourceOld":"  // Adds this state to the set\n  public void incr(int num) {\n    if (useTreeMap) {\n      final Integer key = num;\n      Integer val = map.get(key);\n      if (val == null) {\n        map.put(key, 1);\n      } else {\n        map.put(key, 1+val);\n      }\n      return;\n    }\n\n    if (upto == values.length) {\n      values = ArrayUtil.grow(values, 1+upto);\n      counts = ArrayUtil.grow(counts, 1+upto);\n    }\n\n    for(int i=0;i<upto;i++) {\n      if (values[i] == num) {\n        counts[i]++;\n        return;\n      } else if (num < values[i]) {\n        // insert here\n        int j = upto-1;\n        while (j >= i) {\n          values[1+j] = values[j];\n          counts[1+j] = counts[j];\n          j--;\n        }\n        values[i] = num;\n        counts[i] = 1;\n        upto++;\n        return;\n      }\n    }\n\n    // append\n    values[upto] = num;\n    counts[upto] = 1;\n    upto++;\n\n    if (upto == TREE_MAP_CUTOVER) {\n      useTreeMap = true;\n      for(int i=0;i<upto;i++) {\n        map.put(values[i], counts[i]);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6b23a02f76f15e0dd99a6951055a45aa5c43c48","date":1581020205,"type":3,"author":"Mike","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/SortedIntSet#incr(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/SortedIntSet#incr(int).mjava","sourceNew":"  // Adds this state to the set\n  public void incr(int num) {\n    if (useTreeMap) {\n      map.merge(num, 1, Integer::sum);\n      return;\n    }\n\n    if (upto == values.length) {\n      values = ArrayUtil.grow(values, 1+upto);\n      counts = ArrayUtil.grow(counts, 1+upto);\n    }\n\n    for(int i=0;i<upto;i++) {\n      if (values[i] == num) {\n        counts[i]++;\n        return;\n      } else if (num < values[i]) {\n        // insert here\n        int j = upto-1;\n        while (j >= i) {\n          values[1+j] = values[j];\n          counts[1+j] = counts[j];\n          j--;\n        }\n        values[i] = num;\n        counts[i] = 1;\n        upto++;\n        return;\n      }\n    }\n\n    // append\n    values[upto] = num;\n    counts[upto] = 1;\n    upto++;\n\n    if (upto == TREE_MAP_CUTOVER) {\n      useTreeMap = true;\n      for(int i=0;i<upto;i++) {\n        map.put(values[i], counts[i]);\n      }\n    }\n  }\n\n","sourceOld":"  // Adds this state to the set\n  public void incr(int num) {\n    if (useTreeMap) {\n      final Integer key = num;\n      Integer val = map.get(key);\n      if (val == null) {\n        map.put(key, 1);\n      } else {\n        map.put(key, 1+val);\n      }\n      return;\n    }\n\n    if (upto == values.length) {\n      values = ArrayUtil.grow(values, 1+upto);\n      counts = ArrayUtil.grow(counts, 1+upto);\n    }\n\n    for(int i=0;i<upto;i++) {\n      if (values[i] == num) {\n        counts[i]++;\n        return;\n      } else if (num < values[i]) {\n        // insert here\n        int j = upto-1;\n        while (j >= i) {\n          values[1+j] = values[j];\n          counts[1+j] = counts[j];\n          j--;\n        }\n        values[i] = num;\n        counts[i] = 1;\n        upto++;\n        return;\n      }\n    }\n\n    // append\n    values[upto] = num;\n    counts[upto] = 1;\n    upto++;\n\n    if (upto == TREE_MAP_CUTOVER) {\n      useTreeMap = true;\n      for(int i=0;i<upto;i++) {\n        map.put(values[i], counts[i]);\n      }\n    }\n  }\n\n","bugFix":["5acb0ee59cc50caf85402e92d148fdb2af61bc19"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d6b23a02f76f15e0dd99a6951055a45aa5c43c48":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["7f4ef381bf0c2d618c6db830d3dd668c6901c05a"],"7f4ef381bf0c2d618c6db830d3dd668c6901c05a":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d6b23a02f76f15e0dd99a6951055a45aa5c43c48"]},"commit2Childs":{"d6b23a02f76f15e0dd99a6951055a45aa5c43c48":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["d6b23a02f76f15e0dd99a6951055a45aa5c43c48","7f4ef381bf0c2d618c6db830d3dd668c6901c05a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":[],"7f4ef381bf0c2d618c6db830d3dd668c6901c05a":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}