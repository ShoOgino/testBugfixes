{"path":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#checkSimpleNorms(FieldInfo,AtomicReader,PrintStream).mjava","commits":[{"id":"50599bdf4e0c26952f76b740a4280d058cab3539","date":1355180801,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#checkSimpleNorms(FieldInfo,AtomicReader,PrintStream).mjava","pathOld":"/dev/null","sourceNew":"  // nocommit\n  public static void checkSimpleNorms(FieldInfo fi, AtomicReader reader, PrintStream infoStream) throws IOException {\n    switch(fi.getNormType()) {\n      case FLOAT_32:\n      case FLOAT_64:\n      case VAR_INTS:\n      case FIXED_INTS_16:\n      case FIXED_INTS_32:\n      case FIXED_INTS_64:\n      case FIXED_INTS_8:\n        checkNumericDocValues(fi.name, reader, reader.simpleNormValues(fi.name));\n        break;\n      default:\n        throw new AssertionError(\"wtf: \" + fi.getNormType());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0837ab0472feecb3a54260729d845f839e1cbd72","date":1358283639,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#checkSimpleNorms(FieldInfo,AtomicReader,PrintStream).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#checkSimpleNorms(FieldInfo,AtomicReader,PrintStream).mjava","sourceNew":"  // nocommit\n  public static void checkSimpleNorms(FieldInfo fi, AtomicReader reader, PrintStream infoStream) throws IOException {\n    switch(fi.getNormType()) {\n      case NUMERIC:\n        checkNumericDocValues(fi.name, reader, reader.simpleNormValues(fi.name));\n        break;\n      default:\n        throw new AssertionError(\"wtf: \" + fi.getNormType());\n    }\n  }\n\n","sourceOld":"  // nocommit\n  public static void checkSimpleNorms(FieldInfo fi, AtomicReader reader, PrintStream infoStream) throws IOException {\n    switch(fi.getNormType()) {\n      case FLOAT_32:\n      case FLOAT_64:\n      case VAR_INTS:\n      case FIXED_INTS_16:\n      case FIXED_INTS_32:\n      case FIXED_INTS_64:\n      case FIXED_INTS_8:\n        checkNumericDocValues(fi.name, reader, reader.simpleNormValues(fi.name));\n        break;\n      default:\n        throw new AssertionError(\"wtf: \" + fi.getNormType());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b8acf0807ca5f38beda8e0f7d5ab46ff39f81200","date":1358521790,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#checkSimpleNorms(FieldInfo,AtomicReader,PrintStream).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#checkSimpleNorms(FieldInfo,AtomicReader,PrintStream).mjava","sourceNew":"  // nocommit\n  public static void checkSimpleNorms(FieldInfo fi, AtomicReader reader, PrintStream infoStream) throws IOException {\n    switch(fi.getNormType()) {\n      case NUMERIC:\n        checkNumericDocValues(fi.name, reader, reader.getNormValues(fi.name));\n        break;\n      default:\n        throw new AssertionError(\"wtf: \" + fi.getNormType());\n    }\n  }\n\n","sourceOld":"  // nocommit\n  public static void checkSimpleNorms(FieldInfo fi, AtomicReader reader, PrintStream infoStream) throws IOException {\n    switch(fi.getNormType()) {\n      case NUMERIC:\n        checkNumericDocValues(fi.name, reader, reader.simpleNormValues(fi.name));\n        break;\n      default:\n        throw new AssertionError(\"wtf: \" + fi.getNormType());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e13bf6998389e201ae22c6e84079b9d6b5da0af","date":1358809420,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#checkNorms(FieldInfo,AtomicReader,PrintStream).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#checkSimpleNorms(FieldInfo,AtomicReader,PrintStream).mjava","sourceNew":"  private static void checkNorms(FieldInfo fi, AtomicReader reader, PrintStream infoStream) throws IOException {\n    switch(fi.getNormType()) {\n      case NUMERIC:\n        checkNumericDocValues(fi.name, reader, reader.getNormValues(fi.name));\n        break;\n      default:\n        throw new AssertionError(\"wtf: \" + fi.getNormType());\n    }\n  }\n\n","sourceOld":"  // nocommit\n  public static void checkSimpleNorms(FieldInfo fi, AtomicReader reader, PrintStream infoStream) throws IOException {\n    switch(fi.getNormType()) {\n      case NUMERIC:\n        checkNumericDocValues(fi.name, reader, reader.getNormValues(fi.name));\n        break;\n      default:\n        throw new AssertionError(\"wtf: \" + fi.getNormType());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b8acf0807ca5f38beda8e0f7d5ab46ff39f81200":["0837ab0472feecb3a54260729d845f839e1cbd72"],"50599bdf4e0c26952f76b740a4280d058cab3539":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0837ab0472feecb3a54260729d845f839e1cbd72":["50599bdf4e0c26952f76b740a4280d058cab3539"],"1e13bf6998389e201ae22c6e84079b9d6b5da0af":["b8acf0807ca5f38beda8e0f7d5ab46ff39f81200"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"b8acf0807ca5f38beda8e0f7d5ab46ff39f81200":["1e13bf6998389e201ae22c6e84079b9d6b5da0af"],"50599bdf4e0c26952f76b740a4280d058cab3539":["0837ab0472feecb3a54260729d845f839e1cbd72"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["50599bdf4e0c26952f76b740a4280d058cab3539","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0837ab0472feecb3a54260729d845f839e1cbd72":["b8acf0807ca5f38beda8e0f7d5ab46ff39f81200"],"1e13bf6998389e201ae22c6e84079b9d6b5da0af":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1e13bf6998389e201ae22c6e84079b9d6b5da0af","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}