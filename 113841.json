{"path":"src/test/org/apache/lucene/index/TestIndexWriter#testAddDocumentOnDiskFull().mjava","commits":[{"id":"8b6187898fc4413ccd18229711786550a280383c","date":1173776782,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testAddDocumentOnDiskFull().mjava","pathOld":"/dev/null","sourceNew":"    /*\n     * Make sure IndexWriter cleans up on hitting a disk\n     * full exception in addDocument.\n     */\n    public void testAddDocumentOnDiskFull() throws IOException {\n\n      for(int pass=0;pass<3;pass++) {\n        boolean autoCommit = pass == 0;\n        boolean doAbort = pass == 2;\n        long diskFree = 200;\n        while(true) {\n          MockRAMDirectory dir = new MockRAMDirectory();\n          dir.setMaxSizeInBytes(diskFree);\n          IndexWriter writer = new IndexWriter(dir, autoCommit, new WhitespaceAnalyzer(), true);\n          boolean hitError = false;\n          try {\n            for(int i=0;i<200;i++) {\n              addDoc(writer);\n            }\n          } catch (IOException e) {\n            // e.printStackTrace();\n            hitError = true;\n          }\n\n          if (hitError) {\n            if (doAbort) {\n              writer.abort();\n            } else {\n              try {\n                writer.close();\n              } catch (IOException e) {\n                // e.printStackTrace();\n                dir.setMaxSizeInBytes(0);\n                writer.close();\n              }\n            }\n\n            assertNoUnreferencedFiles(dir, \"after disk full during addDocument with autoCommit=\" + autoCommit);\n\n            // Make sure reader can open the index:\n            IndexReader.open(dir).close();\n\n            dir.close();\n\n            // Now try again w/ more space:\n            diskFree += 500;\n          } else {\n            dir.close();\n            break;\n          }\n        }\n      }\n    \n    }                                               \n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b1405362241b561f5590ff4a87d5d6e173bcd9cf","date":1190107634,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testAddDocumentOnDiskFull().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testAddDocumentOnDiskFull().mjava","sourceNew":"    /*\n     * Make sure IndexWriter cleans up on hitting a disk\n     * full exception in addDocument.\n     */\n    public void testAddDocumentOnDiskFull() throws IOException {\n\n      boolean debug = false;\n\n      for(int pass=0;pass<3;pass++) {\n        if (debug)\n          System.out.println(\"TEST: pass=\" + pass);\n        boolean autoCommit = pass == 0;\n        boolean doAbort = pass == 2;\n        long diskFree = 200;\n        while(true) {\n          if (debug)\n            System.out.println(\"TEST: cycle: diskFree=\" + diskFree);\n          MockRAMDirectory dir = new MockRAMDirectory();\n          dir.setMaxSizeInBytes(diskFree);\n          IndexWriter writer = new IndexWriter(dir, autoCommit, new WhitespaceAnalyzer(), true);\n\n          MergeScheduler ms = writer.getMergeScheduler();\n          if (ms instanceof ConcurrentMergeScheduler)\n            // This test intentionally produces exceptions\n            // in the threads that CMS launches; we don't\n            // want to pollute test output with these.\n            ((ConcurrentMergeScheduler) ms).setSuppressExceptions();\n\n          boolean hitError = false;\n          try {\n            for(int i=0;i<200;i++) {\n              addDoc(writer);\n            }\n          } catch (IOException e) {\n            if (debug) {\n              System.out.println(\"TEST: exception on addDoc\");\n              e.printStackTrace(System.out);\n            }\n            hitError = true;\n          }\n\n          if (hitError) {\n            if (doAbort) {\n              writer.abort();\n            } else {\n              try {\n                writer.close();\n              } catch (IOException e) {\n                if (debug) {\n                  System.out.println(\"TEST: exception on close\");\n                  e.printStackTrace(System.out);\n                }\n                dir.setMaxSizeInBytes(0);\n                writer.close();\n              }\n            }\n\n            _TestUtil.syncConcurrentMerges(ms);\n\n            assertNoUnreferencedFiles(dir, \"after disk full during addDocument with autoCommit=\" + autoCommit);\n\n            // Make sure reader can open the index:\n            IndexReader.open(dir).close();\n\n            dir.close();\n\n            // Now try again w/ more space:\n            diskFree += 500;\n          } else {\n            _TestUtil.syncConcurrentMerges(writer);\n            dir.close();\n            break;\n          }\n        }\n      }\n    }                                               \n\n","sourceOld":"    /*\n     * Make sure IndexWriter cleans up on hitting a disk\n     * full exception in addDocument.\n     */\n    public void testAddDocumentOnDiskFull() throws IOException {\n\n      for(int pass=0;pass<3;pass++) {\n        boolean autoCommit = pass == 0;\n        boolean doAbort = pass == 2;\n        long diskFree = 200;\n        while(true) {\n          MockRAMDirectory dir = new MockRAMDirectory();\n          dir.setMaxSizeInBytes(diskFree);\n          IndexWriter writer = new IndexWriter(dir, autoCommit, new WhitespaceAnalyzer(), true);\n          boolean hitError = false;\n          try {\n            for(int i=0;i<200;i++) {\n              addDoc(writer);\n            }\n          } catch (IOException e) {\n            // e.printStackTrace();\n            hitError = true;\n          }\n\n          if (hitError) {\n            if (doAbort) {\n              writer.abort();\n            } else {\n              try {\n                writer.close();\n              } catch (IOException e) {\n                // e.printStackTrace();\n                dir.setMaxSizeInBytes(0);\n                writer.close();\n              }\n            }\n\n            assertNoUnreferencedFiles(dir, \"after disk full during addDocument with autoCommit=\" + autoCommit);\n\n            // Make sure reader can open the index:\n            IndexReader.open(dir).close();\n\n            dir.close();\n\n            // Now try again w/ more space:\n            diskFree += 500;\n          } else {\n            dir.close();\n            break;\n          }\n        }\n      }\n    \n    }                                               \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd9aba6db0f2adde620bb61f591ed18dcfee36ac","date":1201778618,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testAddDocumentOnDiskFull().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testAddDocumentOnDiskFull().mjava","sourceNew":"    /*\n     * Make sure IndexWriter cleans up on hitting a disk\n     * full exception in addDocument.\n     */\n    public void testAddDocumentOnDiskFull() throws IOException {\n\n      boolean debug = false;\n\n      for(int pass=0;pass<3;pass++) {\n        if (debug)\n          System.out.println(\"TEST: pass=\" + pass);\n        boolean autoCommit = pass == 0;\n        boolean doAbort = pass == 2;\n        long diskFree = 200;\n        while(true) {\n          if (debug)\n            System.out.println(\"TEST: cycle: diskFree=\" + diskFree);\n          MockRAMDirectory dir = new MockRAMDirectory();\n          dir.setMaxSizeInBytes(diskFree);\n          IndexWriter writer = new IndexWriter(dir, autoCommit, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n\n          MergeScheduler ms = writer.getMergeScheduler();\n          if (ms instanceof ConcurrentMergeScheduler)\n            // This test intentionally produces exceptions\n            // in the threads that CMS launches; we don't\n            // want to pollute test output with these.\n            ((ConcurrentMergeScheduler) ms).setSuppressExceptions();\n\n          boolean hitError = false;\n          try {\n            for(int i=0;i<200;i++) {\n              addDoc(writer);\n            }\n          } catch (IOException e) {\n            if (debug) {\n              System.out.println(\"TEST: exception on addDoc\");\n              e.printStackTrace(System.out);\n            }\n            hitError = true;\n          }\n\n          if (hitError) {\n            if (doAbort) {\n              writer.abort();\n            } else {\n              try {\n                writer.close();\n              } catch (IOException e) {\n                if (debug) {\n                  System.out.println(\"TEST: exception on close\");\n                  e.printStackTrace(System.out);\n                }\n                dir.setMaxSizeInBytes(0);\n                writer.close();\n              }\n            }\n\n            _TestUtil.syncConcurrentMerges(ms);\n\n            assertNoUnreferencedFiles(dir, \"after disk full during addDocument with autoCommit=\" + autoCommit);\n\n            // Make sure reader can open the index:\n            IndexReader.open(dir).close();\n\n            dir.close();\n\n            // Now try again w/ more space:\n            diskFree += 500;\n          } else {\n            _TestUtil.syncConcurrentMerges(writer);\n            dir.close();\n            break;\n          }\n        }\n      }\n    }                                               \n\n","sourceOld":"    /*\n     * Make sure IndexWriter cleans up on hitting a disk\n     * full exception in addDocument.\n     */\n    public void testAddDocumentOnDiskFull() throws IOException {\n\n      boolean debug = false;\n\n      for(int pass=0;pass<3;pass++) {\n        if (debug)\n          System.out.println(\"TEST: pass=\" + pass);\n        boolean autoCommit = pass == 0;\n        boolean doAbort = pass == 2;\n        long diskFree = 200;\n        while(true) {\n          if (debug)\n            System.out.println(\"TEST: cycle: diskFree=\" + diskFree);\n          MockRAMDirectory dir = new MockRAMDirectory();\n          dir.setMaxSizeInBytes(diskFree);\n          IndexWriter writer = new IndexWriter(dir, autoCommit, new WhitespaceAnalyzer(), true);\n\n          MergeScheduler ms = writer.getMergeScheduler();\n          if (ms instanceof ConcurrentMergeScheduler)\n            // This test intentionally produces exceptions\n            // in the threads that CMS launches; we don't\n            // want to pollute test output with these.\n            ((ConcurrentMergeScheduler) ms).setSuppressExceptions();\n\n          boolean hitError = false;\n          try {\n            for(int i=0;i<200;i++) {\n              addDoc(writer);\n            }\n          } catch (IOException e) {\n            if (debug) {\n              System.out.println(\"TEST: exception on addDoc\");\n              e.printStackTrace(System.out);\n            }\n            hitError = true;\n          }\n\n          if (hitError) {\n            if (doAbort) {\n              writer.abort();\n            } else {\n              try {\n                writer.close();\n              } catch (IOException e) {\n                if (debug) {\n                  System.out.println(\"TEST: exception on close\");\n                  e.printStackTrace(System.out);\n                }\n                dir.setMaxSizeInBytes(0);\n                writer.close();\n              }\n            }\n\n            _TestUtil.syncConcurrentMerges(ms);\n\n            assertNoUnreferencedFiles(dir, \"after disk full during addDocument with autoCommit=\" + autoCommit);\n\n            // Make sure reader can open the index:\n            IndexReader.open(dir).close();\n\n            dir.close();\n\n            // Now try again w/ more space:\n            diskFree += 500;\n          } else {\n            _TestUtil.syncConcurrentMerges(writer);\n            dir.close();\n            break;\n          }\n        }\n      }\n    }                                               \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c4ae99f08f69aa3acba7cd75134e8447eb747559","date":1222344278,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testAddDocumentOnDiskFull().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testAddDocumentOnDiskFull().mjava","sourceNew":"    /*\n     * Make sure IndexWriter cleans up on hitting a disk\n     * full exception in addDocument.\n     */\n    public void testAddDocumentOnDiskFull() throws IOException {\n\n      boolean debug = false;\n\n      for(int pass=0;pass<3;pass++) {\n        if (debug)\n          System.out.println(\"TEST: pass=\" + pass);\n        boolean autoCommit = pass == 0;\n        boolean doAbort = pass == 2;\n        long diskFree = 200;\n        while(true) {\n          if (debug)\n            System.out.println(\"TEST: cycle: diskFree=\" + diskFree);\n          MockRAMDirectory dir = new MockRAMDirectory();\n          dir.setMaxSizeInBytes(diskFree);\n          IndexWriter writer = new IndexWriter(dir, autoCommit, new WhitespaceAnalyzer(), true);\n\n          MergeScheduler ms = writer.getMergeScheduler();\n          if (ms instanceof ConcurrentMergeScheduler)\n            // This test intentionally produces exceptions\n            // in the threads that CMS launches; we don't\n            // want to pollute test output with these.\n            ((ConcurrentMergeScheduler) ms).setSuppressExceptions();\n\n          boolean hitError = false;\n          try {\n            for(int i=0;i<200;i++) {\n              addDoc(writer);\n            }\n          } catch (IOException e) {\n            if (debug) {\n              System.out.println(\"TEST: exception on addDoc\");\n              e.printStackTrace(System.out);\n            }\n            hitError = true;\n          }\n\n          if (hitError) {\n            if (doAbort) {\n              writer.abort();\n            } else {\n              try {\n                writer.close();\n              } catch (IOException e) {\n                if (debug) {\n                  System.out.println(\"TEST: exception on close\");\n                  e.printStackTrace(System.out);\n                }\n                dir.setMaxSizeInBytes(0);\n                writer.close();\n              }\n            }\n\n            _TestUtil.syncConcurrentMerges(ms);\n\n            assertNoUnreferencedFiles(dir, \"after disk full during addDocument with autoCommit=\" + autoCommit);\n\n            // Make sure reader can open the index:\n            IndexReader.open(dir).close();\n\n            dir.close();\n\n            // Now try again w/ more space:\n            diskFree += 500;\n          } else {\n            _TestUtil.syncConcurrentMerges(writer);\n            dir.close();\n            break;\n          }\n        }\n      }\n    }                                               \n\n","sourceOld":"    /*\n     * Make sure IndexWriter cleans up on hitting a disk\n     * full exception in addDocument.\n     */\n    public void testAddDocumentOnDiskFull() throws IOException {\n\n      boolean debug = false;\n\n      for(int pass=0;pass<3;pass++) {\n        if (debug)\n          System.out.println(\"TEST: pass=\" + pass);\n        boolean autoCommit = pass == 0;\n        boolean doAbort = pass == 2;\n        long diskFree = 200;\n        while(true) {\n          if (debug)\n            System.out.println(\"TEST: cycle: diskFree=\" + diskFree);\n          MockRAMDirectory dir = new MockRAMDirectory();\n          dir.setMaxSizeInBytes(diskFree);\n          IndexWriter writer = new IndexWriter(dir, autoCommit, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n\n          MergeScheduler ms = writer.getMergeScheduler();\n          if (ms instanceof ConcurrentMergeScheduler)\n            // This test intentionally produces exceptions\n            // in the threads that CMS launches; we don't\n            // want to pollute test output with these.\n            ((ConcurrentMergeScheduler) ms).setSuppressExceptions();\n\n          boolean hitError = false;\n          try {\n            for(int i=0;i<200;i++) {\n              addDoc(writer);\n            }\n          } catch (IOException e) {\n            if (debug) {\n              System.out.println(\"TEST: exception on addDoc\");\n              e.printStackTrace(System.out);\n            }\n            hitError = true;\n          }\n\n          if (hitError) {\n            if (doAbort) {\n              writer.abort();\n            } else {\n              try {\n                writer.close();\n              } catch (IOException e) {\n                if (debug) {\n                  System.out.println(\"TEST: exception on close\");\n                  e.printStackTrace(System.out);\n                }\n                dir.setMaxSizeInBytes(0);\n                writer.close();\n              }\n            }\n\n            _TestUtil.syncConcurrentMerges(ms);\n\n            assertNoUnreferencedFiles(dir, \"after disk full during addDocument with autoCommit=\" + autoCommit);\n\n            // Make sure reader can open the index:\n            IndexReader.open(dir).close();\n\n            dir.close();\n\n            // Now try again w/ more space:\n            diskFree += 500;\n          } else {\n            _TestUtil.syncConcurrentMerges(writer);\n            dir.close();\n            break;\n          }\n        }\n      }\n    }                                               \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3215ae1377fc1ca1790921d75dd39cb764743b85","date":1237371771,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#xxxtestAddDocumentOnDiskFull().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testAddDocumentOnDiskFull().mjava","sourceNew":"    /*\n     * Make sure IndexWriter cleans up on hitting a disk\n     * full exception in addDocument.\n     */\n    public void xxxtestAddDocumentOnDiskFull() throws IOException {\n\n      boolean debug = false;\n\n      for(int pass=0;pass<3;pass++) {\n        if (debug)\n          System.out.println(\"TEST: pass=\" + pass);\n        boolean autoCommit = pass == 0;\n        boolean doAbort = pass == 2;\n        long diskFree = 200;\n        while(true) {\n          if (debug)\n            System.out.println(\"TEST: cycle: diskFree=\" + diskFree);\n          MockRAMDirectory dir = new MockRAMDirectory();\n          dir.setMaxSizeInBytes(diskFree);\n          IndexWriter writer = new IndexWriter(dir, autoCommit, new WhitespaceAnalyzer(), true);\n\n          MergeScheduler ms = writer.getMergeScheduler();\n          if (ms instanceof ConcurrentMergeScheduler)\n            // This test intentionally produces exceptions\n            // in the threads that CMS launches; we don't\n            // want to pollute test output with these.\n            ((ConcurrentMergeScheduler) ms).setSuppressExceptions();\n\n          boolean hitError = false;\n          try {\n            for(int i=0;i<200;i++) {\n              addDoc(writer);\n            }\n          } catch (IOException e) {\n            if (debug) {\n              System.out.println(\"TEST: exception on addDoc\");\n              e.printStackTrace(System.out);\n            }\n            hitError = true;\n          }\n\n          if (hitError) {\n            if (doAbort) {\n              writer.abort();\n            } else {\n              try {\n                writer.close();\n              } catch (IOException e) {\n                if (debug) {\n                  System.out.println(\"TEST: exception on close\");\n                  e.printStackTrace(System.out);\n                }\n                dir.setMaxSizeInBytes(0);\n                writer.close();\n              }\n            }\n\n            _TestUtil.syncConcurrentMerges(ms);\n\n            assertNoUnreferencedFiles(dir, \"after disk full during addDocument with autoCommit=\" + autoCommit);\n\n            // Make sure reader can open the index:\n            IndexReader.open(dir).close();\n\n            dir.close();\n\n            // Now try again w/ more space:\n            diskFree += 500;\n          } else {\n            _TestUtil.syncConcurrentMerges(writer);\n            dir.close();\n            break;\n          }\n        }\n      }\n    }                                               \n\n","sourceOld":"    /*\n     * Make sure IndexWriter cleans up on hitting a disk\n     * full exception in addDocument.\n     */\n    public void testAddDocumentOnDiskFull() throws IOException {\n\n      boolean debug = false;\n\n      for(int pass=0;pass<3;pass++) {\n        if (debug)\n          System.out.println(\"TEST: pass=\" + pass);\n        boolean autoCommit = pass == 0;\n        boolean doAbort = pass == 2;\n        long diskFree = 200;\n        while(true) {\n          if (debug)\n            System.out.println(\"TEST: cycle: diskFree=\" + diskFree);\n          MockRAMDirectory dir = new MockRAMDirectory();\n          dir.setMaxSizeInBytes(diskFree);\n          IndexWriter writer = new IndexWriter(dir, autoCommit, new WhitespaceAnalyzer(), true);\n\n          MergeScheduler ms = writer.getMergeScheduler();\n          if (ms instanceof ConcurrentMergeScheduler)\n            // This test intentionally produces exceptions\n            // in the threads that CMS launches; we don't\n            // want to pollute test output with these.\n            ((ConcurrentMergeScheduler) ms).setSuppressExceptions();\n\n          boolean hitError = false;\n          try {\n            for(int i=0;i<200;i++) {\n              addDoc(writer);\n            }\n          } catch (IOException e) {\n            if (debug) {\n              System.out.println(\"TEST: exception on addDoc\");\n              e.printStackTrace(System.out);\n            }\n            hitError = true;\n          }\n\n          if (hitError) {\n            if (doAbort) {\n              writer.abort();\n            } else {\n              try {\n                writer.close();\n              } catch (IOException e) {\n                if (debug) {\n                  System.out.println(\"TEST: exception on close\");\n                  e.printStackTrace(System.out);\n                }\n                dir.setMaxSizeInBytes(0);\n                writer.close();\n              }\n            }\n\n            _TestUtil.syncConcurrentMerges(ms);\n\n            assertNoUnreferencedFiles(dir, \"after disk full during addDocument with autoCommit=\" + autoCommit);\n\n            // Make sure reader can open the index:\n            IndexReader.open(dir).close();\n\n            dir.close();\n\n            // Now try again w/ more space:\n            diskFree += 500;\n          } else {\n            _TestUtil.syncConcurrentMerges(writer);\n            dir.close();\n            break;\n          }\n        }\n      }\n    }                                               \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09c482d1e63332617181729a225b215c452d8a79","date":1237396006,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testAddDocumentOnDiskFull().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#xxxtestAddDocumentOnDiskFull().mjava","sourceNew":"    /*\n     * Make sure IndexWriter cleans up on hitting a disk\n     * full exception in addDocument.\n     */\n    public void testAddDocumentOnDiskFull() throws IOException {\n\n      boolean debug = false;\n\n      for(int pass=0;pass<3;pass++) {\n        if (debug)\n          System.out.println(\"TEST: pass=\" + pass);\n        boolean autoCommit = pass == 0;\n        boolean doAbort = pass == 2;\n        long diskFree = 200;\n        while(true) {\n          if (debug)\n            System.out.println(\"TEST: cycle: diskFree=\" + diskFree);\n          MockRAMDirectory dir = new MockRAMDirectory();\n          dir.setMaxSizeInBytes(diskFree);\n          IndexWriter writer = new IndexWriter(dir, autoCommit, new WhitespaceAnalyzer(), true);\n\n          MergeScheduler ms = writer.getMergeScheduler();\n          if (ms instanceof ConcurrentMergeScheduler)\n            // This test intentionally produces exceptions\n            // in the threads that CMS launches; we don't\n            // want to pollute test output with these.\n            ((ConcurrentMergeScheduler) ms).setSuppressExceptions();\n\n          boolean hitError = false;\n          try {\n            for(int i=0;i<200;i++) {\n              addDoc(writer);\n            }\n          } catch (IOException e) {\n            if (debug) {\n              System.out.println(\"TEST: exception on addDoc\");\n              e.printStackTrace(System.out);\n            }\n            hitError = true;\n          }\n\n          if (hitError) {\n            if (doAbort) {\n              writer.abort();\n            } else {\n              try {\n                writer.close();\n              } catch (IOException e) {\n                if (debug) {\n                  System.out.println(\"TEST: exception on close\");\n                  e.printStackTrace(System.out);\n                }\n                dir.setMaxSizeInBytes(0);\n                writer.close();\n              }\n            }\n\n            _TestUtil.syncConcurrentMerges(ms);\n\n            assertNoUnreferencedFiles(dir, \"after disk full during addDocument with autoCommit=\" + autoCommit);\n\n            // Make sure reader can open the index:\n            IndexReader.open(dir).close();\n\n            dir.close();\n\n            // Now try again w/ more space:\n            diskFree += 500;\n          } else {\n            _TestUtil.syncConcurrentMerges(writer);\n            dir.close();\n            break;\n          }\n        }\n      }\n    }                                               \n\n","sourceOld":"    /*\n     * Make sure IndexWriter cleans up on hitting a disk\n     * full exception in addDocument.\n     */\n    public void xxxtestAddDocumentOnDiskFull() throws IOException {\n\n      boolean debug = false;\n\n      for(int pass=0;pass<3;pass++) {\n        if (debug)\n          System.out.println(\"TEST: pass=\" + pass);\n        boolean autoCommit = pass == 0;\n        boolean doAbort = pass == 2;\n        long diskFree = 200;\n        while(true) {\n          if (debug)\n            System.out.println(\"TEST: cycle: diskFree=\" + diskFree);\n          MockRAMDirectory dir = new MockRAMDirectory();\n          dir.setMaxSizeInBytes(diskFree);\n          IndexWriter writer = new IndexWriter(dir, autoCommit, new WhitespaceAnalyzer(), true);\n\n          MergeScheduler ms = writer.getMergeScheduler();\n          if (ms instanceof ConcurrentMergeScheduler)\n            // This test intentionally produces exceptions\n            // in the threads that CMS launches; we don't\n            // want to pollute test output with these.\n            ((ConcurrentMergeScheduler) ms).setSuppressExceptions();\n\n          boolean hitError = false;\n          try {\n            for(int i=0;i<200;i++) {\n              addDoc(writer);\n            }\n          } catch (IOException e) {\n            if (debug) {\n              System.out.println(\"TEST: exception on addDoc\");\n              e.printStackTrace(System.out);\n            }\n            hitError = true;\n          }\n\n          if (hitError) {\n            if (doAbort) {\n              writer.abort();\n            } else {\n              try {\n                writer.close();\n              } catch (IOException e) {\n                if (debug) {\n                  System.out.println(\"TEST: exception on close\");\n                  e.printStackTrace(System.out);\n                }\n                dir.setMaxSizeInBytes(0);\n                writer.close();\n              }\n            }\n\n            _TestUtil.syncConcurrentMerges(ms);\n\n            assertNoUnreferencedFiles(dir, \"after disk full during addDocument with autoCommit=\" + autoCommit);\n\n            // Make sure reader can open the index:\n            IndexReader.open(dir).close();\n\n            dir.close();\n\n            // Now try again w/ more space:\n            diskFree += 500;\n          } else {\n            _TestUtil.syncConcurrentMerges(writer);\n            dir.close();\n            break;\n          }\n        }\n      }\n    }                                               \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e8d1458a2543cbd30cbfe7929be4dcb5c5251659","date":1254582241,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testAddDocumentOnDiskFull().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testAddDocumentOnDiskFull().mjava","sourceNew":"    /*\n     * Make sure IndexWriter cleans up on hitting a disk\n     * full exception in addDocument.\n     */\n    public void testAddDocumentOnDiskFull() throws IOException {\n\n      boolean debug = false;\n\n      for(int pass=0;pass<3;pass++) {\n        if (debug)\n          System.out.println(\"TEST: pass=\" + pass);\n        boolean autoCommit = pass == 0;\n        boolean doAbort = pass == 2;\n        long diskFree = 200;\n        while(true) {\n          if (debug)\n            System.out.println(\"TEST: cycle: diskFree=\" + diskFree);\n          MockRAMDirectory dir = new MockRAMDirectory();\n          dir.setMaxSizeInBytes(diskFree);\n          IndexWriter writer = new IndexWriter(dir, autoCommit, new WhitespaceAnalyzer(), true);\n\n          MergeScheduler ms = writer.getMergeScheduler();\n          if (ms instanceof ConcurrentMergeScheduler)\n            // This test intentionally produces exceptions\n            // in the threads that CMS launches; we don't\n            // want to pollute test output with these.\n            ((ConcurrentMergeScheduler) ms).setSuppressExceptions();\n\n          boolean hitError = false;\n          try {\n            for(int i=0;i<200;i++) {\n              addDoc(writer);\n            }\n          } catch (IOException e) {\n            if (debug) {\n              System.out.println(\"TEST: exception on addDoc\");\n              e.printStackTrace(System.out);\n            }\n            hitError = true;\n          }\n\n          if (hitError) {\n            if (doAbort) {\n              writer.abort();\n            } else {\n              try {\n                writer.close();\n              } catch (IOException e) {\n                if (debug) {\n                  System.out.println(\"TEST: exception on close\");\n                  e.printStackTrace(System.out);\n                }\n                dir.setMaxSizeInBytes(0);\n                writer.close();\n              }\n            }\n\n            _TestUtil.syncConcurrentMerges(ms);\n\n            assertNoUnreferencedFiles(dir, \"after disk full during addDocument with autoCommit=\" + autoCommit);\n\n            // Make sure reader can open the index:\n            IndexReader.open(dir, true).close();\n\n            dir.close();\n\n            // Now try again w/ more space:\n            diskFree += 500;\n          } else {\n            _TestUtil.syncConcurrentMerges(writer);\n            dir.close();\n            break;\n          }\n        }\n      }\n    }                                               \n\n","sourceOld":"    /*\n     * Make sure IndexWriter cleans up on hitting a disk\n     * full exception in addDocument.\n     */\n    public void testAddDocumentOnDiskFull() throws IOException {\n\n      boolean debug = false;\n\n      for(int pass=0;pass<3;pass++) {\n        if (debug)\n          System.out.println(\"TEST: pass=\" + pass);\n        boolean autoCommit = pass == 0;\n        boolean doAbort = pass == 2;\n        long diskFree = 200;\n        while(true) {\n          if (debug)\n            System.out.println(\"TEST: cycle: diskFree=\" + diskFree);\n          MockRAMDirectory dir = new MockRAMDirectory();\n          dir.setMaxSizeInBytes(diskFree);\n          IndexWriter writer = new IndexWriter(dir, autoCommit, new WhitespaceAnalyzer(), true);\n\n          MergeScheduler ms = writer.getMergeScheduler();\n          if (ms instanceof ConcurrentMergeScheduler)\n            // This test intentionally produces exceptions\n            // in the threads that CMS launches; we don't\n            // want to pollute test output with these.\n            ((ConcurrentMergeScheduler) ms).setSuppressExceptions();\n\n          boolean hitError = false;\n          try {\n            for(int i=0;i<200;i++) {\n              addDoc(writer);\n            }\n          } catch (IOException e) {\n            if (debug) {\n              System.out.println(\"TEST: exception on addDoc\");\n              e.printStackTrace(System.out);\n            }\n            hitError = true;\n          }\n\n          if (hitError) {\n            if (doAbort) {\n              writer.abort();\n            } else {\n              try {\n                writer.close();\n              } catch (IOException e) {\n                if (debug) {\n                  System.out.println(\"TEST: exception on close\");\n                  e.printStackTrace(System.out);\n                }\n                dir.setMaxSizeInBytes(0);\n                writer.close();\n              }\n            }\n\n            _TestUtil.syncConcurrentMerges(ms);\n\n            assertNoUnreferencedFiles(dir, \"after disk full during addDocument with autoCommit=\" + autoCommit);\n\n            // Make sure reader can open the index:\n            IndexReader.open(dir).close();\n\n            dir.close();\n\n            // Now try again w/ more space:\n            diskFree += 500;\n          } else {\n            _TestUtil.syncConcurrentMerges(writer);\n            dir.close();\n            break;\n          }\n        }\n      }\n    }                                               \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a046c0c310bc77931fc8441bd920053b607dd14","date":1254584734,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testAddDocumentOnDiskFull().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testAddDocumentOnDiskFull().mjava","sourceNew":"    /*\n     * Make sure IndexWriter cleans up on hitting a disk\n     * full exception in addDocument.\n     */\n    public void testAddDocumentOnDiskFull() throws IOException {\n\n      boolean debug = false;\n\n      for(int pass=0;pass<3;pass++) {\n        if (debug)\n          System.out.println(\"TEST: pass=\" + pass);\n        boolean autoCommit = pass == 0;\n        boolean doAbort = pass == 2;\n        long diskFree = 200;\n        while(true) {\n          if (debug)\n            System.out.println(\"TEST: cycle: diskFree=\" + diskFree);\n          MockRAMDirectory dir = new MockRAMDirectory();\n          dir.setMaxSizeInBytes(diskFree);\n          IndexWriter writer = new IndexWriter(dir, autoCommit, new WhitespaceAnalyzer(), true);\n\n          MergeScheduler ms = writer.getMergeScheduler();\n          if (ms instanceof ConcurrentMergeScheduler)\n            // This test intentionally produces exceptions\n            // in the threads that CMS launches; we don't\n            // want to pollute test output with these.\n            ((ConcurrentMergeScheduler) ms).setSuppressExceptions();\n\n          boolean hitError = false;\n          try {\n            for(int i=0;i<200;i++) {\n              addDoc(writer);\n            }\n          } catch (IOException e) {\n            if (debug) {\n              System.out.println(\"TEST: exception on addDoc\");\n              e.printStackTrace(System.out);\n            }\n            hitError = true;\n          }\n\n          if (hitError) {\n            if (doAbort) {\n              writer.abort();\n            } else {\n              try {\n                writer.close();\n              } catch (IOException e) {\n                if (debug) {\n                  System.out.println(\"TEST: exception on close\");\n                  e.printStackTrace(System.out);\n                }\n                dir.setMaxSizeInBytes(0);\n                writer.close();\n              }\n            }\n\n            _TestUtil.syncConcurrentMerges(ms);\n\n            assertNoUnreferencedFiles(dir, \"after disk full during addDocument with autoCommit=\" + autoCommit);\n\n            // Make sure reader can open the index:\n            IndexReader.open(dir, true).close();\n\n            dir.close();\n\n            // Now try again w/ more space:\n            diskFree += 500;\n          } else {\n            _TestUtil.syncConcurrentMerges(writer);\n            dir.close();\n            break;\n          }\n        }\n      }\n    }                                               \n\n","sourceOld":"    /*\n     * Make sure IndexWriter cleans up on hitting a disk\n     * full exception in addDocument.\n     */\n    public void testAddDocumentOnDiskFull() throws IOException {\n\n      boolean debug = false;\n\n      for(int pass=0;pass<3;pass++) {\n        if (debug)\n          System.out.println(\"TEST: pass=\" + pass);\n        boolean autoCommit = pass == 0;\n        boolean doAbort = pass == 2;\n        long diskFree = 200;\n        while(true) {\n          if (debug)\n            System.out.println(\"TEST: cycle: diskFree=\" + diskFree);\n          MockRAMDirectory dir = new MockRAMDirectory();\n          dir.setMaxSizeInBytes(diskFree);\n          IndexWriter writer = new IndexWriter(dir, autoCommit, new WhitespaceAnalyzer(), true);\n\n          MergeScheduler ms = writer.getMergeScheduler();\n          if (ms instanceof ConcurrentMergeScheduler)\n            // This test intentionally produces exceptions\n            // in the threads that CMS launches; we don't\n            // want to pollute test output with these.\n            ((ConcurrentMergeScheduler) ms).setSuppressExceptions();\n\n          boolean hitError = false;\n          try {\n            for(int i=0;i<200;i++) {\n              addDoc(writer);\n            }\n          } catch (IOException e) {\n            if (debug) {\n              System.out.println(\"TEST: exception on addDoc\");\n              e.printStackTrace(System.out);\n            }\n            hitError = true;\n          }\n\n          if (hitError) {\n            if (doAbort) {\n              writer.abort();\n            } else {\n              try {\n                writer.close();\n              } catch (IOException e) {\n                if (debug) {\n                  System.out.println(\"TEST: exception on close\");\n                  e.printStackTrace(System.out);\n                }\n                dir.setMaxSizeInBytes(0);\n                writer.close();\n              }\n            }\n\n            _TestUtil.syncConcurrentMerges(ms);\n\n            assertNoUnreferencedFiles(dir, \"after disk full during addDocument with autoCommit=\" + autoCommit);\n\n            // Make sure reader can open the index:\n            IndexReader.open(dir).close();\n\n            dir.close();\n\n            // Now try again w/ more space:\n            diskFree += 500;\n          } else {\n            _TestUtil.syncConcurrentMerges(writer);\n            dir.close();\n            break;\n          }\n        }\n      }\n    }                                               \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"87c966e9308847938a7c905c2e46a56d8df788b8","date":1255035452,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testAddDocumentOnDiskFull().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testAddDocumentOnDiskFull().mjava","sourceNew":"    /*\n     * Make sure IndexWriter cleans up on hitting a disk\n     * full exception in addDocument.\n     */\n    public void testAddDocumentOnDiskFull() throws IOException {\n\n      boolean debug = false;\n\n      for(int pass=0;pass<2;pass++) {\n        if (debug)\n          System.out.println(\"TEST: pass=\" + pass);\n        boolean doAbort = pass == 1;\n        long diskFree = 200;\n        while(true) {\n          if (debug)\n            System.out.println(\"TEST: cycle: diskFree=\" + diskFree);\n          MockRAMDirectory dir = new MockRAMDirectory();\n          dir.setMaxSizeInBytes(diskFree);\n          IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.UNLIMITED);\n\n          MergeScheduler ms = writer.getMergeScheduler();\n          if (ms instanceof ConcurrentMergeScheduler)\n            // This test intentionally produces exceptions\n            // in the threads that CMS launches; we don't\n            // want to pollute test output with these.\n            ((ConcurrentMergeScheduler) ms).setSuppressExceptions();\n\n          boolean hitError = false;\n          try {\n            for(int i=0;i<200;i++) {\n              addDoc(writer);\n            }\n          } catch (IOException e) {\n            if (debug) {\n              System.out.println(\"TEST: exception on addDoc\");\n              e.printStackTrace(System.out);\n            }\n            hitError = true;\n          }\n\n          if (hitError) {\n            if (doAbort) {\n              writer.abort();\n            } else {\n              try {\n                writer.close();\n              } catch (IOException e) {\n                if (debug) {\n                  System.out.println(\"TEST: exception on close\");\n                  e.printStackTrace(System.out);\n                }\n                dir.setMaxSizeInBytes(0);\n                writer.close();\n              }\n            }\n\n            _TestUtil.syncConcurrentMerges(ms);\n\n            assertNoUnreferencedFiles(dir, \"after disk full during addDocument\");\n\n            // Make sure reader can open the index:\n            IndexReader.open(dir, true).close();\n\n            dir.close();\n\n            // Now try again w/ more space:\n            diskFree += 500;\n          } else {\n            _TestUtil.syncConcurrentMerges(writer);\n            dir.close();\n            break;\n          }\n        }\n      }\n    }                                               \n\n","sourceOld":"    /*\n     * Make sure IndexWriter cleans up on hitting a disk\n     * full exception in addDocument.\n     */\n    public void testAddDocumentOnDiskFull() throws IOException {\n\n      boolean debug = false;\n\n      for(int pass=0;pass<3;pass++) {\n        if (debug)\n          System.out.println(\"TEST: pass=\" + pass);\n        boolean autoCommit = pass == 0;\n        boolean doAbort = pass == 2;\n        long diskFree = 200;\n        while(true) {\n          if (debug)\n            System.out.println(\"TEST: cycle: diskFree=\" + diskFree);\n          MockRAMDirectory dir = new MockRAMDirectory();\n          dir.setMaxSizeInBytes(diskFree);\n          IndexWriter writer = new IndexWriter(dir, autoCommit, new WhitespaceAnalyzer(), true);\n\n          MergeScheduler ms = writer.getMergeScheduler();\n          if (ms instanceof ConcurrentMergeScheduler)\n            // This test intentionally produces exceptions\n            // in the threads that CMS launches; we don't\n            // want to pollute test output with these.\n            ((ConcurrentMergeScheduler) ms).setSuppressExceptions();\n\n          boolean hitError = false;\n          try {\n            for(int i=0;i<200;i++) {\n              addDoc(writer);\n            }\n          } catch (IOException e) {\n            if (debug) {\n              System.out.println(\"TEST: exception on addDoc\");\n              e.printStackTrace(System.out);\n            }\n            hitError = true;\n          }\n\n          if (hitError) {\n            if (doAbort) {\n              writer.abort();\n            } else {\n              try {\n                writer.close();\n              } catch (IOException e) {\n                if (debug) {\n                  System.out.println(\"TEST: exception on close\");\n                  e.printStackTrace(System.out);\n                }\n                dir.setMaxSizeInBytes(0);\n                writer.close();\n              }\n            }\n\n            _TestUtil.syncConcurrentMerges(ms);\n\n            assertNoUnreferencedFiles(dir, \"after disk full during addDocument with autoCommit=\" + autoCommit);\n\n            // Make sure reader can open the index:\n            IndexReader.open(dir, true).close();\n\n            dir.close();\n\n            // Now try again w/ more space:\n            diskFree += 500;\n          } else {\n            _TestUtil.syncConcurrentMerges(writer);\n            dir.close();\n            break;\n          }\n        }\n      }\n    }                                               \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"560b3a3bb8efcae105d6ae5fbee0f8b03c7decc7","date":1255555265,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testAddDocumentOnDiskFull().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testAddDocumentOnDiskFull().mjava","sourceNew":"    /*\n     * Make sure IndexWriter cleans up on hitting a disk\n     * full exception in addDocument.\n     */\n    public void testAddDocumentOnDiskFull() throws IOException {\n\n      boolean debug = false;\n\n      for(int pass=0;pass<2;pass++) {\n        if (debug)\n          System.out.println(\"TEST: pass=\" + pass);\n        boolean doAbort = pass == 1;\n        long diskFree = 200;\n        while(true) {\n          if (debug)\n            System.out.println(\"TEST: cycle: diskFree=\" + diskFree);\n          MockRAMDirectory dir = new MockRAMDirectory();\n          dir.setMaxSizeInBytes(diskFree);\n          IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.UNLIMITED);\n\n          MergeScheduler ms = writer.getMergeScheduler();\n          if (ms instanceof ConcurrentMergeScheduler)\n            // This test intentionally produces exceptions\n            // in the threads that CMS launches; we don't\n            // want to pollute test output with these.\n            ((ConcurrentMergeScheduler) ms).setSuppressExceptions();\n\n          boolean hitError = false;\n          try {\n            for(int i=0;i<200;i++) {\n              addDoc(writer);\n            }\n          } catch (IOException e) {\n            if (debug) {\n              System.out.println(\"TEST: exception on addDoc\");\n              e.printStackTrace(System.out);\n            }\n            hitError = true;\n          }\n\n          if (hitError) {\n            if (doAbort) {\n              writer.rollback();\n            } else {\n              try {\n                writer.close();\n              } catch (IOException e) {\n                if (debug) {\n                  System.out.println(\"TEST: exception on close\");\n                  e.printStackTrace(System.out);\n                }\n                dir.setMaxSizeInBytes(0);\n                writer.close();\n              }\n            }\n\n            _TestUtil.syncConcurrentMerges(ms);\n\n            assertNoUnreferencedFiles(dir, \"after disk full during addDocument\");\n\n            // Make sure reader can open the index:\n            IndexReader.open(dir, true).close();\n\n            dir.close();\n\n            // Now try again w/ more space:\n            diskFree += 500;\n          } else {\n            _TestUtil.syncConcurrentMerges(writer);\n            dir.close();\n            break;\n          }\n        }\n      }\n    }                                               \n\n","sourceOld":"    /*\n     * Make sure IndexWriter cleans up on hitting a disk\n     * full exception in addDocument.\n     */\n    public void testAddDocumentOnDiskFull() throws IOException {\n\n      boolean debug = false;\n\n      for(int pass=0;pass<2;pass++) {\n        if (debug)\n          System.out.println(\"TEST: pass=\" + pass);\n        boolean doAbort = pass == 1;\n        long diskFree = 200;\n        while(true) {\n          if (debug)\n            System.out.println(\"TEST: cycle: diskFree=\" + diskFree);\n          MockRAMDirectory dir = new MockRAMDirectory();\n          dir.setMaxSizeInBytes(diskFree);\n          IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.UNLIMITED);\n\n          MergeScheduler ms = writer.getMergeScheduler();\n          if (ms instanceof ConcurrentMergeScheduler)\n            // This test intentionally produces exceptions\n            // in the threads that CMS launches; we don't\n            // want to pollute test output with these.\n            ((ConcurrentMergeScheduler) ms).setSuppressExceptions();\n\n          boolean hitError = false;\n          try {\n            for(int i=0;i<200;i++) {\n              addDoc(writer);\n            }\n          } catch (IOException e) {\n            if (debug) {\n              System.out.println(\"TEST: exception on addDoc\");\n              e.printStackTrace(System.out);\n            }\n            hitError = true;\n          }\n\n          if (hitError) {\n            if (doAbort) {\n              writer.abort();\n            } else {\n              try {\n                writer.close();\n              } catch (IOException e) {\n                if (debug) {\n                  System.out.println(\"TEST: exception on close\");\n                  e.printStackTrace(System.out);\n                }\n                dir.setMaxSizeInBytes(0);\n                writer.close();\n              }\n            }\n\n            _TestUtil.syncConcurrentMerges(ms);\n\n            assertNoUnreferencedFiles(dir, \"after disk full during addDocument\");\n\n            // Make sure reader can open the index:\n            IndexReader.open(dir, true).close();\n\n            dir.close();\n\n            // Now try again w/ more space:\n            diskFree += 500;\n          } else {\n            _TestUtil.syncConcurrentMerges(writer);\n            dir.close();\n            break;\n          }\n        }\n      }\n    }                                               \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe0932c1d340f83fb0a611e5829b3046a1cc1152","date":1264946739,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testAddDocumentOnDiskFull().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testAddDocumentOnDiskFull().mjava","sourceNew":"    /*\n     * Make sure IndexWriter cleans up on hitting a disk\n     * full exception in addDocument.\n     */\n    public void testAddDocumentOnDiskFull() throws IOException {\n\n      boolean debug = false;\n\n      for(int pass=0;pass<2;pass++) {\n        if (debug)\n          System.out.println(\"TEST: pass=\" + pass);\n        boolean doAbort = pass == 1;\n        long diskFree = 200;\n        while(true) {\n          if (debug)\n            System.out.println(\"TEST: cycle: diskFree=\" + diskFree);\n          MockRAMDirectory dir = new MockRAMDirectory();\n          dir.setMaxSizeInBytes(diskFree);\n          IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.UNLIMITED);\n\n          MergeScheduler ms = writer.getMergeScheduler();\n          if (ms instanceof ConcurrentMergeScheduler)\n            // This test intentionally produces exceptions\n            // in the threads that CMS launches; we don't\n            // want to pollute test output with these.\n            ((ConcurrentMergeScheduler) ms).setSuppressExceptions();\n\n          boolean hitError = false;\n          try {\n            for(int i=0;i<200;i++) {\n              addDoc(writer);\n            }\n          } catch (IOException e) {\n            if (debug) {\n              System.out.println(\"TEST: exception on addDoc\");\n              e.printStackTrace(System.out);\n            }\n            hitError = true;\n          }\n\n          if (hitError) {\n            if (doAbort) {\n              writer.rollback();\n            } else {\n              try {\n                writer.close();\n              } catch (IOException e) {\n                if (debug) {\n                  System.out.println(\"TEST: exception on close\");\n                  e.printStackTrace(System.out);\n                }\n                dir.setMaxSizeInBytes(0);\n                writer.close();\n              }\n            }\n\n            _TestUtil.syncConcurrentMerges(ms);\n\n            assertNoUnreferencedFiles(dir, \"after disk full during addDocument\");\n\n            // Make sure reader can open the index:\n            IndexReader.open(dir, true).close();\n\n            dir.close();\n\n            // Now try again w/ more space:\n            diskFree += 500;\n          } else {\n            _TestUtil.syncConcurrentMerges(writer);\n            dir.close();\n            break;\n          }\n        }\n      }\n    }                                               \n\n","sourceOld":"    /*\n     * Make sure IndexWriter cleans up on hitting a disk\n     * full exception in addDocument.\n     */\n    public void testAddDocumentOnDiskFull() throws IOException {\n\n      boolean debug = false;\n\n      for(int pass=0;pass<2;pass++) {\n        if (debug)\n          System.out.println(\"TEST: pass=\" + pass);\n        boolean doAbort = pass == 1;\n        long diskFree = 200;\n        while(true) {\n          if (debug)\n            System.out.println(\"TEST: cycle: diskFree=\" + diskFree);\n          MockRAMDirectory dir = new MockRAMDirectory();\n          dir.setMaxSizeInBytes(diskFree);\n          IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.UNLIMITED);\n\n          MergeScheduler ms = writer.getMergeScheduler();\n          if (ms instanceof ConcurrentMergeScheduler)\n            // This test intentionally produces exceptions\n            // in the threads that CMS launches; we don't\n            // want to pollute test output with these.\n            ((ConcurrentMergeScheduler) ms).setSuppressExceptions();\n\n          boolean hitError = false;\n          try {\n            for(int i=0;i<200;i++) {\n              addDoc(writer);\n            }\n          } catch (IOException e) {\n            if (debug) {\n              System.out.println(\"TEST: exception on addDoc\");\n              e.printStackTrace(System.out);\n            }\n            hitError = true;\n          }\n\n          if (hitError) {\n            if (doAbort) {\n              writer.rollback();\n            } else {\n              try {\n                writer.close();\n              } catch (IOException e) {\n                if (debug) {\n                  System.out.println(\"TEST: exception on close\");\n                  e.printStackTrace(System.out);\n                }\n                dir.setMaxSizeInBytes(0);\n                writer.close();\n              }\n            }\n\n            _TestUtil.syncConcurrentMerges(ms);\n\n            assertNoUnreferencedFiles(dir, \"after disk full during addDocument\");\n\n            // Make sure reader can open the index:\n            IndexReader.open(dir, true).close();\n\n            dir.close();\n\n            // Now try again w/ more space:\n            diskFree += 500;\n          } else {\n            _TestUtil.syncConcurrentMerges(writer);\n            dir.close();\n            break;\n          }\n        }\n      }\n    }                                               \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6","date":1265808957,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testAddDocumentOnDiskFull().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testAddDocumentOnDiskFull().mjava","sourceNew":"    /*\n     * Make sure IndexWriter cleans up on hitting a disk\n     * full exception in addDocument.\n     */\n    public void testAddDocumentOnDiskFull() throws IOException {\n\n      boolean debug = false;\n\n      for(int pass=0;pass<2;pass++) {\n        if (debug)\n          System.out.println(\"TEST: pass=\" + pass);\n        boolean doAbort = pass == 1;\n        long diskFree = 200;\n        while(true) {\n          if (debug)\n            System.out.println(\"TEST: cycle: diskFree=\" + diskFree);\n          MockRAMDirectory dir = new MockRAMDirectory();\n          dir.setMaxSizeInBytes(diskFree);\n          IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.UNLIMITED);\n\n          MergeScheduler ms = writer.getMergeScheduler();\n          if (ms instanceof ConcurrentMergeScheduler)\n            // This test intentionally produces exceptions\n            // in the threads that CMS launches; we don't\n            // want to pollute test output with these.\n            ((ConcurrentMergeScheduler) ms).setSuppressExceptions();\n\n          boolean hitError = false;\n          try {\n            for(int i=0;i<200;i++) {\n              addDoc(writer);\n            }\n          } catch (IOException e) {\n            if (debug) {\n              System.out.println(\"TEST: exception on addDoc\");\n              e.printStackTrace(System.out);\n            }\n            hitError = true;\n          }\n\n          if (hitError) {\n            if (doAbort) {\n              writer.rollback();\n            } else {\n              try {\n                writer.close();\n              } catch (IOException e) {\n                if (debug) {\n                  System.out.println(\"TEST: exception on close\");\n                  e.printStackTrace(System.out);\n                }\n                dir.setMaxSizeInBytes(0);\n                writer.close();\n              }\n            }\n\n            _TestUtil.syncConcurrentMerges(ms);\n\n            assertNoUnreferencedFiles(dir, \"after disk full during addDocument\");\n\n            // Make sure reader can open the index:\n            IndexReader.open(dir, true).close();\n\n            dir.close();\n\n            // Now try again w/ more space:\n            diskFree += 500;\n          } else {\n            _TestUtil.syncConcurrentMerges(writer);\n            dir.close();\n            break;\n          }\n        }\n      }\n    }                                               \n\n","sourceOld":"    /*\n     * Make sure IndexWriter cleans up on hitting a disk\n     * full exception in addDocument.\n     */\n    public void testAddDocumentOnDiskFull() throws IOException {\n\n      boolean debug = false;\n\n      for(int pass=0;pass<2;pass++) {\n        if (debug)\n          System.out.println(\"TEST: pass=\" + pass);\n        boolean doAbort = pass == 1;\n        long diskFree = 200;\n        while(true) {\n          if (debug)\n            System.out.println(\"TEST: cycle: diskFree=\" + diskFree);\n          MockRAMDirectory dir = new MockRAMDirectory();\n          dir.setMaxSizeInBytes(diskFree);\n          IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.UNLIMITED);\n\n          MergeScheduler ms = writer.getMergeScheduler();\n          if (ms instanceof ConcurrentMergeScheduler)\n            // This test intentionally produces exceptions\n            // in the threads that CMS launches; we don't\n            // want to pollute test output with these.\n            ((ConcurrentMergeScheduler) ms).setSuppressExceptions();\n\n          boolean hitError = false;\n          try {\n            for(int i=0;i<200;i++) {\n              addDoc(writer);\n            }\n          } catch (IOException e) {\n            if (debug) {\n              System.out.println(\"TEST: exception on addDoc\");\n              e.printStackTrace(System.out);\n            }\n            hitError = true;\n          }\n\n          if (hitError) {\n            if (doAbort) {\n              writer.rollback();\n            } else {\n              try {\n                writer.close();\n              } catch (IOException e) {\n                if (debug) {\n                  System.out.println(\"TEST: exception on close\");\n                  e.printStackTrace(System.out);\n                }\n                dir.setMaxSizeInBytes(0);\n                writer.close();\n              }\n            }\n\n            _TestUtil.syncConcurrentMerges(ms);\n\n            assertNoUnreferencedFiles(dir, \"after disk full during addDocument\");\n\n            // Make sure reader can open the index:\n            IndexReader.open(dir, true).close();\n\n            dir.close();\n\n            // Now try again w/ more space:\n            diskFree += 500;\n          } else {\n            _TestUtil.syncConcurrentMerges(writer);\n            dir.close();\n            break;\n          }\n        }\n      }\n    }                                               \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testAddDocumentOnDiskFull().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testAddDocumentOnDiskFull().mjava","sourceNew":"    /*\n     * Make sure IndexWriter cleans up on hitting a disk\n     * full exception in addDocument.\n     */\n    public void testAddDocumentOnDiskFull() throws IOException {\n\n      boolean debug = false;\n\n      for(int pass=0;pass<2;pass++) {\n        if (debug)\n          System.out.println(\"TEST: pass=\" + pass);\n        boolean doAbort = pass == 1;\n        long diskFree = 200;\n        while(true) {\n          if (debug)\n            System.out.println(\"TEST: cycle: diskFree=\" + diskFree);\n          MockRAMDirectory dir = new MockRAMDirectory();\n          dir.setMaxSizeInBytes(diskFree);\n          IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT));\n\n          MergeScheduler ms = writer.getConfig().getMergeScheduler();\n          if (ms instanceof ConcurrentMergeScheduler)\n            // This test intentionally produces exceptions\n            // in the threads that CMS launches; we don't\n            // want to pollute test output with these.\n            ((ConcurrentMergeScheduler) ms).setSuppressExceptions();\n\n          boolean hitError = false;\n          try {\n            for(int i=0;i<200;i++) {\n              addDoc(writer);\n            }\n          } catch (IOException e) {\n            if (debug) {\n              System.out.println(\"TEST: exception on addDoc\");\n              e.printStackTrace(System.out);\n            }\n            hitError = true;\n          }\n\n          if (hitError) {\n            if (doAbort) {\n              writer.rollback();\n            } else {\n              try {\n                writer.close();\n              } catch (IOException e) {\n                if (debug) {\n                  System.out.println(\"TEST: exception on close\");\n                  e.printStackTrace(System.out);\n                }\n                dir.setMaxSizeInBytes(0);\n                writer.close();\n              }\n            }\n\n            _TestUtil.syncConcurrentMerges(ms);\n\n            assertNoUnreferencedFiles(dir, \"after disk full during addDocument\");\n\n            // Make sure reader can open the index:\n            IndexReader.open(dir, true).close();\n\n            dir.close();\n\n            // Now try again w/ more space:\n            diskFree += 500;\n          } else {\n            _TestUtil.syncConcurrentMerges(writer);\n            dir.close();\n            break;\n          }\n        }\n      }\n    }                                               \n\n","sourceOld":"    /*\n     * Make sure IndexWriter cleans up on hitting a disk\n     * full exception in addDocument.\n     */\n    public void testAddDocumentOnDiskFull() throws IOException {\n\n      boolean debug = false;\n\n      for(int pass=0;pass<2;pass++) {\n        if (debug)\n          System.out.println(\"TEST: pass=\" + pass);\n        boolean doAbort = pass == 1;\n        long diskFree = 200;\n        while(true) {\n          if (debug)\n            System.out.println(\"TEST: cycle: diskFree=\" + diskFree);\n          MockRAMDirectory dir = new MockRAMDirectory();\n          dir.setMaxSizeInBytes(diskFree);\n          IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.UNLIMITED);\n\n          MergeScheduler ms = writer.getMergeScheduler();\n          if (ms instanceof ConcurrentMergeScheduler)\n            // This test intentionally produces exceptions\n            // in the threads that CMS launches; we don't\n            // want to pollute test output with these.\n            ((ConcurrentMergeScheduler) ms).setSuppressExceptions();\n\n          boolean hitError = false;\n          try {\n            for(int i=0;i<200;i++) {\n              addDoc(writer);\n            }\n          } catch (IOException e) {\n            if (debug) {\n              System.out.println(\"TEST: exception on addDoc\");\n              e.printStackTrace(System.out);\n            }\n            hitError = true;\n          }\n\n          if (hitError) {\n            if (doAbort) {\n              writer.rollback();\n            } else {\n              try {\n                writer.close();\n              } catch (IOException e) {\n                if (debug) {\n                  System.out.println(\"TEST: exception on close\");\n                  e.printStackTrace(System.out);\n                }\n                dir.setMaxSizeInBytes(0);\n                writer.close();\n              }\n            }\n\n            _TestUtil.syncConcurrentMerges(ms);\n\n            assertNoUnreferencedFiles(dir, \"after disk full during addDocument\");\n\n            // Make sure reader can open the index:\n            IndexReader.open(dir, true).close();\n\n            dir.close();\n\n            // Now try again w/ more space:\n            diskFree += 500;\n          } else {\n            _TestUtil.syncConcurrentMerges(writer);\n            dir.close();\n            break;\n          }\n        }\n      }\n    }                                               \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testAddDocumentOnDiskFull().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testAddDocumentOnDiskFull().mjava","sourceNew":"    /*\n     * Make sure IndexWriter cleans up on hitting a disk\n     * full exception in addDocument.\n     */\n    public void testAddDocumentOnDiskFull() throws IOException {\n\n      boolean debug = false;\n\n      for(int pass=0;pass<2;pass++) {\n        if (debug)\n          System.out.println(\"TEST: pass=\" + pass);\n        boolean doAbort = pass == 1;\n        long diskFree = 200;\n        while(true) {\n          if (debug)\n            System.out.println(\"TEST: cycle: diskFree=\" + diskFree);\n          MockRAMDirectory dir = new MockRAMDirectory();\n          dir.setMaxSizeInBytes(diskFree);\n          IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.UNLIMITED);\n\n          MergeScheduler ms = writer.getMergeScheduler();\n          if (ms instanceof ConcurrentMergeScheduler)\n            // This test intentionally produces exceptions\n            // in the threads that CMS launches; we don't\n            // want to pollute test output with these.\n            ((ConcurrentMergeScheduler) ms).setSuppressExceptions();\n\n          boolean hitError = false;\n          try {\n            for(int i=0;i<200;i++) {\n              addDoc(writer);\n            }\n          } catch (IOException e) {\n            if (debug) {\n              System.out.println(\"TEST: exception on addDoc\");\n              e.printStackTrace(System.out);\n            }\n            hitError = true;\n          }\n\n          if (hitError) {\n            if (doAbort) {\n              writer.rollback();\n            } else {\n              try {\n                writer.close();\n              } catch (IOException e) {\n                if (debug) {\n                  System.out.println(\"TEST: exception on close\");\n                  e.printStackTrace(System.out);\n                }\n                dir.setMaxSizeInBytes(0);\n                writer.close();\n              }\n            }\n\n            _TestUtil.syncConcurrentMerges(ms);\n\n            assertNoUnreferencedFiles(dir, \"after disk full during addDocument\");\n\n            // Make sure reader can open the index:\n            IndexReader.open(dir, true).close();\n\n            dir.close();\n\n            // Now try again w/ more space:\n            diskFree += 500;\n          } else {\n            _TestUtil.syncConcurrentMerges(writer);\n            dir.close();\n            break;\n          }\n        }\n      }\n    }                                               \n\n","sourceOld":"    /*\n     * Make sure IndexWriter cleans up on hitting a disk\n     * full exception in addDocument.\n     */\n    public void testAddDocumentOnDiskFull() throws IOException {\n\n      boolean debug = false;\n\n      for(int pass=0;pass<2;pass++) {\n        if (debug)\n          System.out.println(\"TEST: pass=\" + pass);\n        boolean doAbort = pass == 1;\n        long diskFree = 200;\n        while(true) {\n          if (debug)\n            System.out.println(\"TEST: cycle: diskFree=\" + diskFree);\n          MockRAMDirectory dir = new MockRAMDirectory();\n          dir.setMaxSizeInBytes(diskFree);\n          IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT));\n\n          MergeScheduler ms = writer.getConfig().getMergeScheduler();\n          if (ms instanceof ConcurrentMergeScheduler)\n            // This test intentionally produces exceptions\n            // in the threads that CMS launches; we don't\n            // want to pollute test output with these.\n            ((ConcurrentMergeScheduler) ms).setSuppressExceptions();\n\n          boolean hitError = false;\n          try {\n            for(int i=0;i<200;i++) {\n              addDoc(writer);\n            }\n          } catch (IOException e) {\n            if (debug) {\n              System.out.println(\"TEST: exception on addDoc\");\n              e.printStackTrace(System.out);\n            }\n            hitError = true;\n          }\n\n          if (hitError) {\n            if (doAbort) {\n              writer.rollback();\n            } else {\n              try {\n                writer.close();\n              } catch (IOException e) {\n                if (debug) {\n                  System.out.println(\"TEST: exception on close\");\n                  e.printStackTrace(System.out);\n                }\n                dir.setMaxSizeInBytes(0);\n                writer.close();\n              }\n            }\n\n            _TestUtil.syncConcurrentMerges(ms);\n\n            assertNoUnreferencedFiles(dir, \"after disk full during addDocument\");\n\n            // Make sure reader can open the index:\n            IndexReader.open(dir, true).close();\n\n            dir.close();\n\n            // Now try again w/ more space:\n            diskFree += 500;\n          } else {\n            _TestUtil.syncConcurrentMerges(writer);\n            dir.close();\n            break;\n          }\n        }\n      }\n    }                                               \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testAddDocumentOnDiskFull().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testAddDocumentOnDiskFull().mjava","sourceNew":"    /*\n     * Make sure IndexWriter cleans up on hitting a disk\n     * full exception in addDocument.\n     */\n    public void testAddDocumentOnDiskFull() throws IOException {\n\n      boolean debug = false;\n\n      for(int pass=0;pass<2;pass++) {\n        if (debug)\n          System.out.println(\"TEST: pass=\" + pass);\n        boolean doAbort = pass == 1;\n        long diskFree = 200;\n        while(true) {\n          if (debug)\n            System.out.println(\"TEST: cycle: diskFree=\" + diskFree);\n          MockRAMDirectory dir = new MockRAMDirectory();\n          dir.setMaxSizeInBytes(diskFree);\n          IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n\n          MergeScheduler ms = writer.getConfig().getMergeScheduler();\n          if (ms instanceof ConcurrentMergeScheduler)\n            // This test intentionally produces exceptions\n            // in the threads that CMS launches; we don't\n            // want to pollute test output with these.\n            ((ConcurrentMergeScheduler) ms).setSuppressExceptions();\n\n          boolean hitError = false;\n          try {\n            for(int i=0;i<200;i++) {\n              addDoc(writer);\n            }\n          } catch (IOException e) {\n            if (debug) {\n              System.out.println(\"TEST: exception on addDoc\");\n              e.printStackTrace(System.out);\n            }\n            hitError = true;\n          }\n\n          if (hitError) {\n            if (doAbort) {\n              writer.rollback();\n            } else {\n              try {\n                writer.close();\n              } catch (IOException e) {\n                if (debug) {\n                  System.out.println(\"TEST: exception on close\");\n                  e.printStackTrace(System.out);\n                }\n                dir.setMaxSizeInBytes(0);\n                writer.close();\n              }\n            }\n\n            _TestUtil.syncConcurrentMerges(ms);\n\n            assertNoUnreferencedFiles(dir, \"after disk full during addDocument\");\n\n            // Make sure reader can open the index:\n            IndexReader.open(dir, true).close();\n\n            dir.close();\n\n            // Now try again w/ more space:\n            diskFree += 500;\n          } else {\n            _TestUtil.syncConcurrentMerges(writer);\n            dir.close();\n            break;\n          }\n        }\n      }\n    }                                               \n\n","sourceOld":"    /*\n     * Make sure IndexWriter cleans up on hitting a disk\n     * full exception in addDocument.\n     */\n    public void testAddDocumentOnDiskFull() throws IOException {\n\n      boolean debug = false;\n\n      for(int pass=0;pass<2;pass++) {\n        if (debug)\n          System.out.println(\"TEST: pass=\" + pass);\n        boolean doAbort = pass == 1;\n        long diskFree = 200;\n        while(true) {\n          if (debug)\n            System.out.println(\"TEST: cycle: diskFree=\" + diskFree);\n          MockRAMDirectory dir = new MockRAMDirectory();\n          dir.setMaxSizeInBytes(diskFree);\n          IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.UNLIMITED);\n\n          MergeScheduler ms = writer.getMergeScheduler();\n          if (ms instanceof ConcurrentMergeScheduler)\n            // This test intentionally produces exceptions\n            // in the threads that CMS launches; we don't\n            // want to pollute test output with these.\n            ((ConcurrentMergeScheduler) ms).setSuppressExceptions();\n\n          boolean hitError = false;\n          try {\n            for(int i=0;i<200;i++) {\n              addDoc(writer);\n            }\n          } catch (IOException e) {\n            if (debug) {\n              System.out.println(\"TEST: exception on addDoc\");\n              e.printStackTrace(System.out);\n            }\n            hitError = true;\n          }\n\n          if (hitError) {\n            if (doAbort) {\n              writer.rollback();\n            } else {\n              try {\n                writer.close();\n              } catch (IOException e) {\n                if (debug) {\n                  System.out.println(\"TEST: exception on close\");\n                  e.printStackTrace(System.out);\n                }\n                dir.setMaxSizeInBytes(0);\n                writer.close();\n              }\n            }\n\n            _TestUtil.syncConcurrentMerges(ms);\n\n            assertNoUnreferencedFiles(dir, \"after disk full during addDocument\");\n\n            // Make sure reader can open the index:\n            IndexReader.open(dir, true).close();\n\n            dir.close();\n\n            // Now try again w/ more space:\n            diskFree += 500;\n          } else {\n            _TestUtil.syncConcurrentMerges(writer);\n            dir.close();\n            break;\n          }\n        }\n      }\n    }                                               \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"42607aa380c892dc1ec0ab26e86a575c28e13618","date":1268641604,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testAddDocumentOnDiskFull().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testAddDocumentOnDiskFull().mjava","sourceNew":"    /*\n     * Make sure IndexWriter cleans up on hitting a disk\n     * full exception in addDocument.\n     */\n    public void testAddDocumentOnDiskFull() throws IOException {\n\n      for(int pass=0;pass<2;pass++) {\n        if (VERBOSE)\n          System.out.println(\"TEST: pass=\" + pass);\n        boolean doAbort = pass == 1;\n        long diskFree = 200;\n        while(true) {\n          if (VERBOSE)\n            System.out.println(\"TEST: cycle: diskFree=\" + diskFree);\n          MockRAMDirectory dir = new MockRAMDirectory();\n          dir.setMaxSizeInBytes(diskFree);\n          IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n\n          MergeScheduler ms = writer.getConfig().getMergeScheduler();\n          if (ms instanceof ConcurrentMergeScheduler)\n            // This test intentionally produces exceptions\n            // in the threads that CMS launches; we don't\n            // want to pollute test output with these.\n            ((ConcurrentMergeScheduler) ms).setSuppressExceptions();\n\n          boolean hitError = false;\n          try {\n            for(int i=0;i<200;i++) {\n              addDoc(writer);\n            }\n          } catch (IOException e) {\n            if (VERBOSE) {\n              System.out.println(\"TEST: exception on addDoc\");\n              e.printStackTrace(System.out);\n            }\n            hitError = true;\n          }\n\n          if (hitError) {\n            if (doAbort) {\n              writer.rollback();\n            } else {\n              try {\n                writer.close();\n              } catch (IOException e) {\n                if (VERBOSE) {\n                  System.out.println(\"TEST: exception on close\");\n                  e.printStackTrace(System.out);\n                }\n                dir.setMaxSizeInBytes(0);\n                writer.close();\n              }\n            }\n\n            _TestUtil.syncConcurrentMerges(ms);\n\n            assertNoUnreferencedFiles(dir, \"after disk full during addDocument\");\n\n            // Make sure reader can open the index:\n            IndexReader.open(dir, true).close();\n\n            dir.close();\n\n            // Now try again w/ more space:\n            diskFree += 500;\n          } else {\n            _TestUtil.syncConcurrentMerges(writer);\n            dir.close();\n            break;\n          }\n        }\n      }\n    }                                               \n\n","sourceOld":"    /*\n     * Make sure IndexWriter cleans up on hitting a disk\n     * full exception in addDocument.\n     */\n    public void testAddDocumentOnDiskFull() throws IOException {\n\n      boolean debug = false;\n\n      for(int pass=0;pass<2;pass++) {\n        if (debug)\n          System.out.println(\"TEST: pass=\" + pass);\n        boolean doAbort = pass == 1;\n        long diskFree = 200;\n        while(true) {\n          if (debug)\n            System.out.println(\"TEST: cycle: diskFree=\" + diskFree);\n          MockRAMDirectory dir = new MockRAMDirectory();\n          dir.setMaxSizeInBytes(diskFree);\n          IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n\n          MergeScheduler ms = writer.getConfig().getMergeScheduler();\n          if (ms instanceof ConcurrentMergeScheduler)\n            // This test intentionally produces exceptions\n            // in the threads that CMS launches; we don't\n            // want to pollute test output with these.\n            ((ConcurrentMergeScheduler) ms).setSuppressExceptions();\n\n          boolean hitError = false;\n          try {\n            for(int i=0;i<200;i++) {\n              addDoc(writer);\n            }\n          } catch (IOException e) {\n            if (debug) {\n              System.out.println(\"TEST: exception on addDoc\");\n              e.printStackTrace(System.out);\n            }\n            hitError = true;\n          }\n\n          if (hitError) {\n            if (doAbort) {\n              writer.rollback();\n            } else {\n              try {\n                writer.close();\n              } catch (IOException e) {\n                if (debug) {\n                  System.out.println(\"TEST: exception on close\");\n                  e.printStackTrace(System.out);\n                }\n                dir.setMaxSizeInBytes(0);\n                writer.close();\n              }\n            }\n\n            _TestUtil.syncConcurrentMerges(ms);\n\n            assertNoUnreferencedFiles(dir, \"after disk full during addDocument\");\n\n            // Make sure reader can open the index:\n            IndexReader.open(dir, true).close();\n\n            dir.close();\n\n            // Now try again w/ more space:\n            diskFree += 500;\n          } else {\n            _TestUtil.syncConcurrentMerges(writer);\n            dir.close();\n            break;\n          }\n        }\n      }\n    }                                               \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testAddDocumentOnDiskFull().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testAddDocumentOnDiskFull().mjava","sourceNew":"    /*\n     * Make sure IndexWriter cleans up on hitting a disk\n     * full exception in addDocument.\n     */\n    public void testAddDocumentOnDiskFull() throws IOException {\n\n      for(int pass=0;pass<2;pass++) {\n        if (VERBOSE)\n          System.out.println(\"TEST: pass=\" + pass);\n        boolean doAbort = pass == 1;\n        long diskFree = 200;\n        while(true) {\n          if (VERBOSE)\n            System.out.println(\"TEST: cycle: diskFree=\" + diskFree);\n          MockRAMDirectory dir = new MockRAMDirectory();\n          dir.setMaxSizeInBytes(diskFree);\n          IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n\n          MergeScheduler ms = writer.getConfig().getMergeScheduler();\n          if (ms instanceof ConcurrentMergeScheduler)\n            // This test intentionally produces exceptions\n            // in the threads that CMS launches; we don't\n            // want to pollute test output with these.\n            ((ConcurrentMergeScheduler) ms).setSuppressExceptions();\n\n          boolean hitError = false;\n          try {\n            for(int i=0;i<200;i++) {\n              addDoc(writer);\n            }\n          } catch (IOException e) {\n            if (VERBOSE) {\n              System.out.println(\"TEST: exception on addDoc\");\n              e.printStackTrace(System.out);\n            }\n            hitError = true;\n          }\n\n          if (hitError) {\n            if (doAbort) {\n              writer.rollback();\n            } else {\n              try {\n                writer.close();\n              } catch (IOException e) {\n                if (VERBOSE) {\n                  System.out.println(\"TEST: exception on close\");\n                  e.printStackTrace(System.out);\n                }\n                dir.setMaxSizeInBytes(0);\n                writer.close();\n              }\n            }\n\n            _TestUtil.syncConcurrentMerges(ms);\n\n            assertNoUnreferencedFiles(dir, \"after disk full during addDocument\");\n\n            // Make sure reader can open the index:\n            IndexReader.open(dir, true).close();\n\n            dir.close();\n\n            // Now try again w/ more space:\n            diskFree += 500;\n          } else {\n            _TestUtil.syncConcurrentMerges(writer);\n            dir.close();\n            break;\n          }\n        }\n      }\n    }                                               \n\n","sourceOld":"    /*\n     * Make sure IndexWriter cleans up on hitting a disk\n     * full exception in addDocument.\n     */\n    public void testAddDocumentOnDiskFull() throws IOException {\n\n      for(int pass=0;pass<2;pass++) {\n        if (VERBOSE)\n          System.out.println(\"TEST: pass=\" + pass);\n        boolean doAbort = pass == 1;\n        long diskFree = 200;\n        while(true) {\n          if (VERBOSE)\n            System.out.println(\"TEST: cycle: diskFree=\" + diskFree);\n          MockRAMDirectory dir = new MockRAMDirectory();\n          dir.setMaxSizeInBytes(diskFree);\n          IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n\n          MergeScheduler ms = writer.getConfig().getMergeScheduler();\n          if (ms instanceof ConcurrentMergeScheduler)\n            // This test intentionally produces exceptions\n            // in the threads that CMS launches; we don't\n            // want to pollute test output with these.\n            ((ConcurrentMergeScheduler) ms).setSuppressExceptions();\n\n          boolean hitError = false;\n          try {\n            for(int i=0;i<200;i++) {\n              addDoc(writer);\n            }\n          } catch (IOException e) {\n            if (VERBOSE) {\n              System.out.println(\"TEST: exception on addDoc\");\n              e.printStackTrace(System.out);\n            }\n            hitError = true;\n          }\n\n          if (hitError) {\n            if (doAbort) {\n              writer.rollback();\n            } else {\n              try {\n                writer.close();\n              } catch (IOException e) {\n                if (VERBOSE) {\n                  System.out.println(\"TEST: exception on close\");\n                  e.printStackTrace(System.out);\n                }\n                dir.setMaxSizeInBytes(0);\n                writer.close();\n              }\n            }\n\n            _TestUtil.syncConcurrentMerges(ms);\n\n            assertNoUnreferencedFiles(dir, \"after disk full during addDocument\");\n\n            // Make sure reader can open the index:\n            IndexReader.open(dir, true).close();\n\n            dir.close();\n\n            // Now try again w/ more space:\n            diskFree += 500;\n          } else {\n            _TestUtil.syncConcurrentMerges(writer);\n            dir.close();\n            break;\n          }\n        }\n      }\n    }                                               \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b1405362241b561f5590ff4a87d5d6e173bcd9cf":["8b6187898fc4413ccd18229711786550a280383c"],"c4ae99f08f69aa3acba7cd75134e8447eb747559":["fd9aba6db0f2adde620bb61f591ed18dcfee36ac"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"0a046c0c310bc77931fc8441bd920053b607dd14":["09c482d1e63332617181729a225b215c452d8a79","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"3215ae1377fc1ca1790921d75dd39cb764743b85":["c4ae99f08f69aa3acba7cd75134e8447eb747559"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"560b3a3bb8efcae105d6ae5fbee0f8b03c7decc7":["87c966e9308847938a7c905c2e46a56d8df788b8"],"fd9aba6db0f2adde620bb61f591ed18dcfee36ac":["b1405362241b561f5590ff4a87d5d6e173bcd9cf"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["09c482d1e63332617181729a225b215c452d8a79"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["560b3a3bb8efcae105d6ae5fbee0f8b03c7decc7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8b6187898fc4413ccd18229711786550a280383c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"42607aa380c892dc1ec0ab26e86a575c28e13618":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"87c966e9308847938a7c905c2e46a56d8df788b8":["0a046c0c310bc77931fc8441bd920053b607dd14"],"09c482d1e63332617181729a225b215c452d8a79":["3215ae1377fc1ca1790921d75dd39cb764743b85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["42607aa380c892dc1ec0ab26e86a575c28e13618"]},"commit2Childs":{"b1405362241b561f5590ff4a87d5d6e173bcd9cf":["fd9aba6db0f2adde620bb61f591ed18dcfee36ac"],"c4ae99f08f69aa3acba7cd75134e8447eb747559":["3215ae1377fc1ca1790921d75dd39cb764743b85"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"0a046c0c310bc77931fc8441bd920053b607dd14":["87c966e9308847938a7c905c2e46a56d8df788b8"],"3215ae1377fc1ca1790921d75dd39cb764743b85":["09c482d1e63332617181729a225b215c452d8a79"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"560b3a3bb8efcae105d6ae5fbee0f8b03c7decc7":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"fd9aba6db0f2adde620bb61f591ed18dcfee36ac":["c4ae99f08f69aa3acba7cd75134e8447eb747559"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["42607aa380c892dc1ec0ab26e86a575c28e13618"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["0a046c0c310bc77931fc8441bd920053b607dd14"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8b6187898fc4413ccd18229711786550a280383c"],"8b6187898fc4413ccd18229711786550a280383c":["b1405362241b561f5590ff4a87d5d6e173bcd9cf"],"87c966e9308847938a7c905c2e46a56d8df788b8":["560b3a3bb8efcae105d6ae5fbee0f8b03c7decc7"],"42607aa380c892dc1ec0ab26e86a575c28e13618":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"09c482d1e63332617181729a225b215c452d8a79":["0a046c0c310bc77931fc8441bd920053b607dd14","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}