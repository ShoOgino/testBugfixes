{"path":"lucene/core/src/java/org/apache/lucene/search/FilteredQuery.RandomAccessFilterStrategy#filteredScorer(AtomicReaderContext,boolean,boolean,Weight,DocIdSet).mjava","commits":[{"id":"cc7674a6feb46b954ebfb8ace9eb0383adb93de9","date":1348214796,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FilteredQuery.RandomAccessFilterStrategy#filteredScorer(AtomicReaderContext,boolean,boolean,Weight,DocIdSet).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public Scorer filteredScorer(AtomicReaderContext context, boolean scoreDocsInOrder, boolean topScorer, Weight weight, DocIdSet docIdSet) throws IOException {\n      final DocIdSetIterator filterIter = docIdSet.iterator();\n      if (filterIter == null) {\n        // this means the filter does not accept any documents.\n        return null;\n      }  \n\n      final int firstFilterDoc = filterIter.nextDoc();\n      if (firstFilterDoc == DocIdSetIterator.NO_MORE_DOCS) {\n        return null;\n      }\n      \n      final Bits filterAcceptDocs = docIdSet.bits();\n        // force if RA is requested\n      final boolean useRandomAccess = (filterAcceptDocs != null && (useRandomAccess(filterAcceptDocs, firstFilterDoc)));\n      if (useRandomAccess) {\n        // if we are using random access, we return the inner scorer, just with other acceptDocs\n        return weight.scorer(context, scoreDocsInOrder, topScorer, filterAcceptDocs);\n      } else {\n        assert firstFilterDoc > -1;\n        // we are gonna advance() this scorer, so we set inorder=true/toplevel=false\n        // we pass null as acceptDocs, as our filter has already respected acceptDocs, no need to do twice\n        final Scorer scorer = weight.scorer(context, true, false, null);\n        // TODO once we have way to figure out if we use RA or LeapFrog we can remove this scorer\n        return (scorer == null) ? null : new PrimaryAdvancedLeapFrogScorer(weight, firstFilterDoc, filterIter, scorer);\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5b1ac4be5e40d7bda6ec0f850c933a95ca0642fd","date":1361836936,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FilteredQuery.RandomAccessFilterStrategy#filteredScorer(AtomicReaderContext,boolean,boolean,Weight,DocIdSet).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FilteredQuery.RandomAccessFilterStrategy#filteredScorer(AtomicReaderContext,boolean,boolean,Weight,DocIdSet).mjava","sourceNew":"    @Override\n    public Scorer filteredScorer(AtomicReaderContext context, boolean scoreDocsInOrder, boolean topScorer, Weight weight, DocIdSet docIdSet) throws IOException {\n      final DocIdSetIterator filterIter = docIdSet.iterator();\n      if (filterIter == null) {\n        // this means the filter does not accept any documents.\n        return null;\n      }  \n\n      final int firstFilterDoc = filterIter.nextDoc();\n      if (firstFilterDoc == DocIdSetIterator.NO_MORE_DOCS) {\n        return null;\n      }\n      \n      final Bits filterAcceptDocs = docIdSet.bits();\n      // force if RA is requested\n      final boolean useRandomAccess = (filterAcceptDocs != null && (useRandomAccess(filterAcceptDocs, firstFilterDoc)));\n      if (useRandomAccess) {\n        // if we are using random access, we return the inner scorer, just with other acceptDocs\n        return weight.scorer(context, scoreDocsInOrder, topScorer, filterAcceptDocs);\n      } else {\n        assert firstFilterDoc > -1;\n        // we are gonna advance() this scorer, so we set inorder=true/toplevel=false\n        // we pass null as acceptDocs, as our filter has already respected acceptDocs, no need to do twice\n        final Scorer scorer = weight.scorer(context, true, false, null);\n        // TODO once we have way to figure out if we use RA or LeapFrog we can remove this scorer\n        return (scorer == null) ? null : new PrimaryAdvancedLeapFrogScorer(weight, firstFilterDoc, filterIter, scorer);\n      }\n    }\n\n","sourceOld":"    @Override\n    public Scorer filteredScorer(AtomicReaderContext context, boolean scoreDocsInOrder, boolean topScorer, Weight weight, DocIdSet docIdSet) throws IOException {\n      final DocIdSetIterator filterIter = docIdSet.iterator();\n      if (filterIter == null) {\n        // this means the filter does not accept any documents.\n        return null;\n      }  \n\n      final int firstFilterDoc = filterIter.nextDoc();\n      if (firstFilterDoc == DocIdSetIterator.NO_MORE_DOCS) {\n        return null;\n      }\n      \n      final Bits filterAcceptDocs = docIdSet.bits();\n        // force if RA is requested\n      final boolean useRandomAccess = (filterAcceptDocs != null && (useRandomAccess(filterAcceptDocs, firstFilterDoc)));\n      if (useRandomAccess) {\n        // if we are using random access, we return the inner scorer, just with other acceptDocs\n        return weight.scorer(context, scoreDocsInOrder, topScorer, filterAcceptDocs);\n      } else {\n        assert firstFilterDoc > -1;\n        // we are gonna advance() this scorer, so we set inorder=true/toplevel=false\n        // we pass null as acceptDocs, as our filter has already respected acceptDocs, no need to do twice\n        final Scorer scorer = weight.scorer(context, true, false, null);\n        // TODO once we have way to figure out if we use RA or LeapFrog we can remove this scorer\n        return (scorer == null) ? null : new PrimaryAdvancedLeapFrogScorer(weight, firstFilterDoc, filterIter, scorer);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"40640359164f629dd440a47df2e145d084ce9645","date":1391711808,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FilteredQuery.RandomAccessFilterStrategy#filteredScorer(AtomicReaderContext,boolean,boolean,Weight,DocIdSet).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FilteredQuery.RandomAccessFilterStrategy#filteredScorer(AtomicReaderContext,boolean,boolean,Weight,DocIdSet).mjava","sourceNew":"    @Override\n    public Scorer filteredScorer(AtomicReaderContext context, boolean scoreDocsInOrder, boolean topScorer, Weight weight, DocIdSet docIdSet) throws IOException {\n      final DocIdSetIterator filterIter = docIdSet.iterator();\n      if (filterIter == null) {\n        // this means the filter does not accept any documents.\n        return null;\n      }  \n\n      final int firstFilterDoc = filterIter.nextDoc();\n      if (firstFilterDoc == DocIdSetIterator.NO_MORE_DOCS) {\n        return null;\n      }\n      \n      final Bits filterAcceptDocs = docIdSet.bits();\n      // force if RA is requested\n      final boolean useRandomAccess = filterAcceptDocs != null && useRandomAccess(filterAcceptDocs, firstFilterDoc);\n      if (useRandomAccess) {\n        // if we are using random access, we return the inner scorer, just with other acceptDocs\n        return weight.scorer(context, scoreDocsInOrder, topScorer, filterAcceptDocs);\n      } else {\n        assert firstFilterDoc > -1;\n        // we are gonna advance() this scorer, so we set inorder=true/toplevel=false\n        // we pass null as acceptDocs, as our filter has already respected acceptDocs, no need to do twice\n        final Scorer scorer = weight.scorer(context, true, false, null);\n        // TODO once we have way to figure out if we use RA or LeapFrog we can remove this scorer\n        return (scorer == null) ? null : new PrimaryAdvancedLeapFrogScorer(weight, firstFilterDoc, filterIter, scorer);\n      }\n    }\n\n","sourceOld":"    @Override\n    public Scorer filteredScorer(AtomicReaderContext context, boolean scoreDocsInOrder, boolean topScorer, Weight weight, DocIdSet docIdSet) throws IOException {\n      final DocIdSetIterator filterIter = docIdSet.iterator();\n      if (filterIter == null) {\n        // this means the filter does not accept any documents.\n        return null;\n      }  \n\n      final int firstFilterDoc = filterIter.nextDoc();\n      if (firstFilterDoc == DocIdSetIterator.NO_MORE_DOCS) {\n        return null;\n      }\n      \n      final Bits filterAcceptDocs = docIdSet.bits();\n      // force if RA is requested\n      final boolean useRandomAccess = (filterAcceptDocs != null && (useRandomAccess(filterAcceptDocs, firstFilterDoc)));\n      if (useRandomAccess) {\n        // if we are using random access, we return the inner scorer, just with other acceptDocs\n        return weight.scorer(context, scoreDocsInOrder, topScorer, filterAcceptDocs);\n      } else {\n        assert firstFilterDoc > -1;\n        // we are gonna advance() this scorer, so we set inorder=true/toplevel=false\n        // we pass null as acceptDocs, as our filter has already respected acceptDocs, no need to do twice\n        final Scorer scorer = weight.scorer(context, true, false, null);\n        // TODO once we have way to figure out if we use RA or LeapFrog we can remove this scorer\n        return (scorer == null) ? null : new PrimaryAdvancedLeapFrogScorer(weight, firstFilterDoc, filterIter, scorer);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e18c86f811939bfa8cd24046c96ed026f2e9b34","date":1393893071,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FilteredQuery.RandomAccessFilterStrategy#filteredScorer(AtomicReaderContext,Weight,DocIdSet).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FilteredQuery.RandomAccessFilterStrategy#filteredScorer(AtomicReaderContext,boolean,boolean,Weight,DocIdSet).mjava","sourceNew":"    @Override\n    public Scorer filteredScorer(AtomicReaderContext context, Weight weight, DocIdSet docIdSet) throws IOException {\n      final DocIdSetIterator filterIter = docIdSet.iterator();\n      if (filterIter == null) {\n        // this means the filter does not accept any documents.\n        return null;\n      }  \n\n      final int firstFilterDoc = filterIter.nextDoc();\n      if (firstFilterDoc == DocIdSetIterator.NO_MORE_DOCS) {\n        return null;\n      }\n      \n      final Bits filterAcceptDocs = docIdSet.bits();\n      // force if RA is requested\n      final boolean useRandomAccess = filterAcceptDocs != null && useRandomAccess(filterAcceptDocs, firstFilterDoc);\n      if (useRandomAccess) {\n        // if we are using random access, we return the inner scorer, just with other acceptDocs\n        return weight.scorer(context, filterAcceptDocs);\n      } else {\n        assert firstFilterDoc > -1;\n        // we are gonna advance() this scorer, so we set inorder=true/toplevel=false\n        // we pass null as acceptDocs, as our filter has already respected acceptDocs, no need to do twice\n        final Scorer scorer = weight.scorer(context, null);\n        // TODO once we have way to figure out if we use RA or LeapFrog we can remove this scorer\n        return (scorer == null) ? null : new PrimaryAdvancedLeapFrogScorer(weight, firstFilterDoc, filterIter, scorer);\n      }\n    }\n\n","sourceOld":"    @Override\n    public Scorer filteredScorer(AtomicReaderContext context, boolean scoreDocsInOrder, boolean topScorer, Weight weight, DocIdSet docIdSet) throws IOException {\n      final DocIdSetIterator filterIter = docIdSet.iterator();\n      if (filterIter == null) {\n        // this means the filter does not accept any documents.\n        return null;\n      }  \n\n      final int firstFilterDoc = filterIter.nextDoc();\n      if (firstFilterDoc == DocIdSetIterator.NO_MORE_DOCS) {\n        return null;\n      }\n      \n      final Bits filterAcceptDocs = docIdSet.bits();\n      // force if RA is requested\n      final boolean useRandomAccess = filterAcceptDocs != null && useRandomAccess(filterAcceptDocs, firstFilterDoc);\n      if (useRandomAccess) {\n        // if we are using random access, we return the inner scorer, just with other acceptDocs\n        return weight.scorer(context, scoreDocsInOrder, topScorer, filterAcceptDocs);\n      } else {\n        assert firstFilterDoc > -1;\n        // we are gonna advance() this scorer, so we set inorder=true/toplevel=false\n        // we pass null as acceptDocs, as our filter has already respected acceptDocs, no need to do twice\n        final Scorer scorer = weight.scorer(context, true, false, null);\n        // TODO once we have way to figure out if we use RA or LeapFrog we can remove this scorer\n        return (scorer == null) ? null : new PrimaryAdvancedLeapFrogScorer(weight, firstFilterDoc, filterIter, scorer);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"acf00221f44c5f08ccea014f2492b53af15ecd66","date":1394568293,"type":5,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FilteredQuery.RandomAccessFilterStrategy#filteredScorer(AtomicReaderContext,Weight,DocIdSet).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FilteredQuery.RandomAccessFilterStrategy#filteredScorer(AtomicReaderContext,boolean,boolean,Weight,DocIdSet).mjava","sourceNew":"    @Override\n    public Scorer filteredScorer(AtomicReaderContext context, Weight weight, DocIdSet docIdSet) throws IOException {\n      final DocIdSetIterator filterIter = docIdSet.iterator();\n      if (filterIter == null) {\n        // this means the filter does not accept any documents.\n        return null;\n      }  \n\n      final int firstFilterDoc = filterIter.nextDoc();\n      if (firstFilterDoc == DocIdSetIterator.NO_MORE_DOCS) {\n        return null;\n      }\n      \n      final Bits filterAcceptDocs = docIdSet.bits();\n      // force if RA is requested\n      final boolean useRandomAccess = filterAcceptDocs != null && useRandomAccess(filterAcceptDocs, firstFilterDoc);\n      if (useRandomAccess) {\n        // if we are using random access, we return the inner scorer, just with other acceptDocs\n        return weight.scorer(context, filterAcceptDocs);\n      } else {\n        assert firstFilterDoc > -1;\n        // we are gonna advance() this scorer, so we set inorder=true/toplevel=false\n        // we pass null as acceptDocs, as our filter has already respected acceptDocs, no need to do twice\n        final Scorer scorer = weight.scorer(context, null);\n        // TODO once we have way to figure out if we use RA or LeapFrog we can remove this scorer\n        return (scorer == null) ? null : new PrimaryAdvancedLeapFrogScorer(weight, firstFilterDoc, filterIter, scorer);\n      }\n    }\n\n","sourceOld":"    @Override\n    public Scorer filteredScorer(AtomicReaderContext context, boolean scoreDocsInOrder, boolean topScorer, Weight weight, DocIdSet docIdSet) throws IOException {\n      final DocIdSetIterator filterIter = docIdSet.iterator();\n      if (filterIter == null) {\n        // this means the filter does not accept any documents.\n        return null;\n      }  \n\n      final int firstFilterDoc = filterIter.nextDoc();\n      if (firstFilterDoc == DocIdSetIterator.NO_MORE_DOCS) {\n        return null;\n      }\n      \n      final Bits filterAcceptDocs = docIdSet.bits();\n      // force if RA is requested\n      final boolean useRandomAccess = filterAcceptDocs != null && useRandomAccess(filterAcceptDocs, firstFilterDoc);\n      if (useRandomAccess) {\n        // if we are using random access, we return the inner scorer, just with other acceptDocs\n        return weight.scorer(context, scoreDocsInOrder, topScorer, filterAcceptDocs);\n      } else {\n        assert firstFilterDoc > -1;\n        // we are gonna advance() this scorer, so we set inorder=true/toplevel=false\n        // we pass null as acceptDocs, as our filter has already respected acceptDocs, no need to do twice\n        final Scorer scorer = weight.scorer(context, true, false, null);\n        // TODO once we have way to figure out if we use RA or LeapFrog we can remove this scorer\n        return (scorer == null) ? null : new PrimaryAdvancedLeapFrogScorer(weight, firstFilterDoc, filterIter, scorer);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2e18c86f811939bfa8cd24046c96ed026f2e9b34":["40640359164f629dd440a47df2e145d084ce9645"],"5b1ac4be5e40d7bda6ec0f850c933a95ca0642fd":["cc7674a6feb46b954ebfb8ace9eb0383adb93de9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cc7674a6feb46b954ebfb8ace9eb0383adb93de9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"acf00221f44c5f08ccea014f2492b53af15ecd66":["40640359164f629dd440a47df2e145d084ce9645","2e18c86f811939bfa8cd24046c96ed026f2e9b34"],"40640359164f629dd440a47df2e145d084ce9645":["5b1ac4be5e40d7bda6ec0f850c933a95ca0642fd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["acf00221f44c5f08ccea014f2492b53af15ecd66"]},"commit2Childs":{"2e18c86f811939bfa8cd24046c96ed026f2e9b34":["acf00221f44c5f08ccea014f2492b53af15ecd66"],"5b1ac4be5e40d7bda6ec0f850c933a95ca0642fd":["40640359164f629dd440a47df2e145d084ce9645"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cc7674a6feb46b954ebfb8ace9eb0383adb93de9"],"cc7674a6feb46b954ebfb8ace9eb0383adb93de9":["5b1ac4be5e40d7bda6ec0f850c933a95ca0642fd"],"acf00221f44c5f08ccea014f2492b53af15ecd66":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"40640359164f629dd440a47df2e145d084ce9645":["2e18c86f811939bfa8cd24046c96ed026f2e9b34","acf00221f44c5f08ccea014f2492b53af15ecd66"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}