{"path":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/IntersectTermsEnum#IntersectTermsEnum(FieldReader,Automaton,RunAutomaton,BytesRef,BytesRef,int).mjava","commits":[{"id":"3e8715d826e588419327562287d5d6a8040d63d6","date":1427987148,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/IntersectTermsEnum#IntersectTermsEnum(FieldReader,Automaton,RunAutomaton,BytesRef,BytesRef,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/IntersectTermsEnum#IntersectTermsEnum(FieldReader,CompiledAutomaton,BytesRef).mjava","sourceNew":"  // TODO: in some cases we can filter by length?  eg\n  // regexp foo*bar must be at least length 6 bytes\n  public IntersectTermsEnum(FieldReader fr, Automaton automaton, RunAutomaton runAutomaton, BytesRef commonSuffix, BytesRef startTerm, int sinkState) throws IOException {\n    //if (DEBUG) System.out.println(\"\\nintEnum.init seg=\" + fr.parent.segment + \" commonSuffix=\" + commonSuffix);\n    this.fr = fr;\n    this.sinkState = sinkState;\n\n    assert automaton != null;\n    assert runAutomaton != null;\n\n    //if (DEBUG) System.out.println(\"sinkState=\" + sinkState + \" AUTOMATON:\\n\" + automaton.toDot());\n    this.runAutomaton = runAutomaton;\n    this.allowAutoPrefixTerms = sinkState != -1;\n    this.automaton = automaton;\n    this.commonSuffix = commonSuffix;\n\n    in = fr.parent.termsIn.clone();\n    stack = new IntersectTermsEnumFrame[5];\n    for(int idx=0;idx<stack.length;idx++) {\n      stack[idx] = new IntersectTermsEnumFrame(this, idx);\n    }\n    for(int arcIdx=0;arcIdx<arcs.length;arcIdx++) {\n      arcs[arcIdx] = new FST.Arc<>();\n    }\n\n    if (fr.index == null) {\n      fstReader = null;\n    } else {\n      fstReader = fr.index.getBytesReader();\n    }\n\n    // TODO: if the automaton is \"smallish\" we really\n    // should use the terms index to seek at least to\n    // the initial term and likely to subsequent terms\n    // (or, maybe just fallback to ATE for such cases).\n    // Else the seek cost of loading the frames will be\n    // too costly.\n\n    final FST.Arc<BytesRef> arc = fr.index.getFirstArc(arcs[0]);\n    // Empty string prefix must have an output in the index!\n    assert arc.isFinal();\n\n    // Special pushFrame since it's the first one:\n    final IntersectTermsEnumFrame f = stack[0];\n    f.fp = f.fpOrig = fr.rootBlockFP;\n    f.prefix = 0;\n    f.setState(runAutomaton.getInitialState());\n    f.arc = arc;\n    f.outputPrefix = arc.output;\n    f.load(fr.rootCode);\n\n    // for assert:\n    assert setSavedStartTerm(startTerm);\n\n    currentFrame = f;\n    if (startTerm != null) {\n      seekToStartTerm(startTerm);\n    }\n  }\n\n","sourceOld":"  // TODO: in some cases we can filter by length?  eg\n  // regexp foo*bar must be at least length 6 bytes\n  public IntersectTermsEnum(FieldReader fr, CompiledAutomaton compiled, BytesRef startTerm) throws IOException {\n    // if (DEBUG) {\n    //   System.out.println(\"\\nintEnum.init seg=\" + segment + \" commonSuffix=\" + brToString(compiled.commonSuffixRef));\n    // }\n    this.fr = fr;\n    runAutomaton = compiled.runAutomaton;\n    compiledAutomaton = compiled;\n    in = fr.parent.termsIn.clone();\n    stack = new IntersectTermsEnumFrame[5];\n    for(int idx=0;idx<stack.length;idx++) {\n      stack[idx] = new IntersectTermsEnumFrame(this, idx);\n    }\n    for(int arcIdx=0;arcIdx<arcs.length;arcIdx++) {\n      arcs[arcIdx] = new FST.Arc<>();\n    }\n\n    if (fr.index == null) {\n      fstReader = null;\n    } else {\n      fstReader = fr.index.getBytesReader();\n    }\n\n    // TODO: if the automaton is \"smallish\" we really\n    // should use the terms index to seek at least to\n    // the initial term and likely to subsequent terms\n    // (or, maybe just fallback to ATE for such cases).\n    // Else the seek cost of loading the frames will be\n    // too costly.\n\n    final FST.Arc<BytesRef> arc = fr.index.getFirstArc(arcs[0]);\n    // Empty string prefix must have an output in the index!\n    assert arc.isFinal();\n\n    // Special pushFrame since it's the first one:\n    final IntersectTermsEnumFrame f = stack[0];\n    f.fp = f.fpOrig = fr.rootBlockFP;\n    f.prefix = 0;\n    f.setState(runAutomaton.getInitialState());\n    f.arc = arc;\n    f.outputPrefix = arc.output;\n    f.load(fr.rootCode);\n\n    // for assert:\n    assert setSavedStartTerm(startTerm);\n\n    currentFrame = f;\n    if (startTerm != null) {\n      seekToStartTerm(startTerm);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2638f781be724518ff6c2263d14a48cf6e68017","date":1427989059,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/IntersectTermsEnum#IntersectTermsEnum(FieldReader,Automaton,RunAutomaton,BytesRef,BytesRef,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/IntersectTermsEnum#IntersectTermsEnum(FieldReader,CompiledAutomaton,BytesRef).mjava","sourceNew":"  // TODO: in some cases we can filter by length?  eg\n  // regexp foo*bar must be at least length 6 bytes\n  public IntersectTermsEnum(FieldReader fr, Automaton automaton, RunAutomaton runAutomaton, BytesRef commonSuffix, BytesRef startTerm, int sinkState) throws IOException {\n    //if (DEBUG) System.out.println(\"\\nintEnum.init seg=\" + fr.parent.segment + \" commonSuffix=\" + commonSuffix);\n    this.fr = fr;\n    this.sinkState = sinkState;\n\n    assert automaton != null;\n    assert runAutomaton != null;\n\n    //if (DEBUG) System.out.println(\"sinkState=\" + sinkState + \" AUTOMATON:\\n\" + automaton.toDot());\n    this.runAutomaton = runAutomaton;\n    this.allowAutoPrefixTerms = sinkState != -1;\n    this.automaton = automaton;\n    this.commonSuffix = commonSuffix;\n\n    in = fr.parent.termsIn.clone();\n    stack = new IntersectTermsEnumFrame[5];\n    for(int idx=0;idx<stack.length;idx++) {\n      stack[idx] = new IntersectTermsEnumFrame(this, idx);\n    }\n    for(int arcIdx=0;arcIdx<arcs.length;arcIdx++) {\n      arcs[arcIdx] = new FST.Arc<>();\n    }\n\n    if (fr.index == null) {\n      fstReader = null;\n    } else {\n      fstReader = fr.index.getBytesReader();\n    }\n\n    // TODO: if the automaton is \"smallish\" we really\n    // should use the terms index to seek at least to\n    // the initial term and likely to subsequent terms\n    // (or, maybe just fallback to ATE for such cases).\n    // Else the seek cost of loading the frames will be\n    // too costly.\n\n    final FST.Arc<BytesRef> arc = fr.index.getFirstArc(arcs[0]);\n    // Empty string prefix must have an output in the index!\n    assert arc.isFinal();\n\n    // Special pushFrame since it's the first one:\n    final IntersectTermsEnumFrame f = stack[0];\n    f.fp = f.fpOrig = fr.rootBlockFP;\n    f.prefix = 0;\n    f.setState(runAutomaton.getInitialState());\n    f.arc = arc;\n    f.outputPrefix = arc.output;\n    f.load(fr.rootCode);\n\n    // for assert:\n    assert setSavedStartTerm(startTerm);\n\n    currentFrame = f;\n    if (startTerm != null) {\n      seekToStartTerm(startTerm);\n    }\n  }\n\n","sourceOld":"  // TODO: in some cases we can filter by length?  eg\n  // regexp foo*bar must be at least length 6 bytes\n  public IntersectTermsEnum(FieldReader fr, CompiledAutomaton compiled, BytesRef startTerm) throws IOException {\n    // if (DEBUG) {\n    //   System.out.println(\"\\nintEnum.init seg=\" + segment + \" commonSuffix=\" + brToString(compiled.commonSuffixRef));\n    // }\n    this.fr = fr;\n    runAutomaton = compiled.runAutomaton;\n    compiledAutomaton = compiled;\n    in = fr.parent.termsIn.clone();\n    stack = new IntersectTermsEnumFrame[5];\n    for(int idx=0;idx<stack.length;idx++) {\n      stack[idx] = new IntersectTermsEnumFrame(this, idx);\n    }\n    for(int arcIdx=0;arcIdx<arcs.length;arcIdx++) {\n      arcs[arcIdx] = new FST.Arc<>();\n    }\n\n    if (fr.index == null) {\n      fstReader = null;\n    } else {\n      fstReader = fr.index.getBytesReader();\n    }\n\n    // TODO: if the automaton is \"smallish\" we really\n    // should use the terms index to seek at least to\n    // the initial term and likely to subsequent terms\n    // (or, maybe just fallback to ATE for such cases).\n    // Else the seek cost of loading the frames will be\n    // too costly.\n\n    final FST.Arc<BytesRef> arc = fr.index.getFirstArc(arcs[0]);\n    // Empty string prefix must have an output in the index!\n    assert arc.isFinal();\n\n    // Special pushFrame since it's the first one:\n    final IntersectTermsEnumFrame f = stack[0];\n    f.fp = f.fpOrig = fr.rootBlockFP;\n    f.prefix = 0;\n    f.setState(runAutomaton.getInitialState());\n    f.arc = arc;\n    f.outputPrefix = arc.output;\n    f.load(fr.rootCode);\n\n    // for assert:\n    assert setSavedStartTerm(startTerm);\n\n    currentFrame = f;\n    if (startTerm != null) {\n      seekToStartTerm(startTerm);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"59db5e5f780185e0155d296a323e440a6ecfd3b6","date":1435089559,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/IntersectTermsEnum#IntersectTermsEnum(FieldReader,Automaton,RunAutomaton,BytesRef,BytesRef,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/IntersectTermsEnum#IntersectTermsEnum(FieldReader,Automaton,RunAutomaton,BytesRef,BytesRef,int).mjava","sourceNew":"  // TODO: in some cases we can filter by length?  eg\n  // regexp foo*bar must be at least length 6 bytes\n  public IntersectTermsEnum(FieldReader fr, Automaton automaton, RunAutomaton runAutomaton, BytesRef commonSuffix, BytesRef startTerm, int sinkState) throws IOException {\n    this.fr = fr;\n    this.sinkState = sinkState;\n\n    assert automaton != null;\n    assert runAutomaton != null;\n\n    this.runAutomaton = runAutomaton;\n    this.allowAutoPrefixTerms = sinkState != -1;\n    this.automaton = automaton;\n    this.commonSuffix = commonSuffix;\n\n    in = fr.parent.termsIn.clone();\n    stack = new IntersectTermsEnumFrame[5];\n    for(int idx=0;idx<stack.length;idx++) {\n      stack[idx] = new IntersectTermsEnumFrame(this, idx);\n    }\n    for(int arcIdx=0;arcIdx<arcs.length;arcIdx++) {\n      arcs[arcIdx] = new FST.Arc<>();\n    }\n\n    if (fr.index == null) {\n      fstReader = null;\n    } else {\n      fstReader = fr.index.getBytesReader();\n    }\n\n    // TODO: if the automaton is \"smallish\" we really\n    // should use the terms index to seek at least to\n    // the initial term and likely to subsequent terms\n    // (or, maybe just fallback to ATE for such cases).\n    // Else the seek cost of loading the frames will be\n    // too costly.\n\n    final FST.Arc<BytesRef> arc = fr.index.getFirstArc(arcs[0]);\n    // Empty string prefix must have an output in the index!\n    assert arc.isFinal();\n\n    // Special pushFrame since it's the first one:\n    final IntersectTermsEnumFrame f = stack[0];\n    f.fp = f.fpOrig = fr.rootBlockFP;\n    f.prefix = 0;\n    f.setState(runAutomaton.getInitialState());\n    f.arc = arc;\n    f.outputPrefix = arc.output;\n    f.load(fr.rootCode);\n\n    // for assert:\n    assert setSavedStartTerm(startTerm);\n\n    currentFrame = f;\n    if (startTerm != null) {\n      seekToStartTerm(startTerm);\n    }\n    currentTransition = currentFrame.transition;\n  }\n\n","sourceOld":"  // TODO: in some cases we can filter by length?  eg\n  // regexp foo*bar must be at least length 6 bytes\n  public IntersectTermsEnum(FieldReader fr, Automaton automaton, RunAutomaton runAutomaton, BytesRef commonSuffix, BytesRef startTerm, int sinkState) throws IOException {\n    //if (DEBUG) System.out.println(\"\\nintEnum.init seg=\" + fr.parent.segment + \" commonSuffix=\" + commonSuffix);\n    this.fr = fr;\n    this.sinkState = sinkState;\n\n    assert automaton != null;\n    assert runAutomaton != null;\n\n    //if (DEBUG) System.out.println(\"sinkState=\" + sinkState + \" AUTOMATON:\\n\" + automaton.toDot());\n    this.runAutomaton = runAutomaton;\n    this.allowAutoPrefixTerms = sinkState != -1;\n    this.automaton = automaton;\n    this.commonSuffix = commonSuffix;\n\n    in = fr.parent.termsIn.clone();\n    stack = new IntersectTermsEnumFrame[5];\n    for(int idx=0;idx<stack.length;idx++) {\n      stack[idx] = new IntersectTermsEnumFrame(this, idx);\n    }\n    for(int arcIdx=0;arcIdx<arcs.length;arcIdx++) {\n      arcs[arcIdx] = new FST.Arc<>();\n    }\n\n    if (fr.index == null) {\n      fstReader = null;\n    } else {\n      fstReader = fr.index.getBytesReader();\n    }\n\n    // TODO: if the automaton is \"smallish\" we really\n    // should use the terms index to seek at least to\n    // the initial term and likely to subsequent terms\n    // (or, maybe just fallback to ATE for such cases).\n    // Else the seek cost of loading the frames will be\n    // too costly.\n\n    final FST.Arc<BytesRef> arc = fr.index.getFirstArc(arcs[0]);\n    // Empty string prefix must have an output in the index!\n    assert arc.isFinal();\n\n    // Special pushFrame since it's the first one:\n    final IntersectTermsEnumFrame f = stack[0];\n    f.fp = f.fpOrig = fr.rootBlockFP;\n    f.prefix = 0;\n    f.setState(runAutomaton.getInitialState());\n    f.arc = arc;\n    f.outputPrefix = arc.output;\n    f.load(fr.rootCode);\n\n    // for assert:\n    assert setSavedStartTerm(startTerm);\n\n    currentFrame = f;\n    if (startTerm != null) {\n      seekToStartTerm(startTerm);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b7543e96e2d4820e09334d36a699b998ed963f4f","date":1476121426,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/IntersectTermsEnum#IntersectTermsEnum(FieldReader,Automaton,RunAutomaton,BytesRef,BytesRef,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/IntersectTermsEnum#IntersectTermsEnum(FieldReader,Automaton,RunAutomaton,BytesRef,BytesRef,int).mjava","sourceNew":"  // TODO: in some cases we can filter by length?  eg\n  // regexp foo*bar must be at least length 6 bytes\n  public IntersectTermsEnum(FieldReader fr, Automaton automaton, RunAutomaton runAutomaton, BytesRef commonSuffix, BytesRef startTerm, int sinkState) throws IOException {\n    this.fr = fr;\n    this.sinkState = sinkState;\n\n    assert automaton != null;\n    assert runAutomaton != null;\n\n    this.runAutomaton = runAutomaton;\n    this.allowAutoPrefixTerms = sinkState != -1;\n    this.automaton = automaton;\n    this.commonSuffix = commonSuffix;\n\n    in = fr.parent.termsIn.clone();\n    stack = new IntersectTermsEnumFrame[5];\n    for(int idx=0;idx<stack.length;idx++) {\n      stack[idx] = new IntersectTermsEnumFrame(this, idx);\n    }\n    for(int arcIdx=0;arcIdx<arcs.length;arcIdx++) {\n      arcs[arcIdx] = new FST.Arc<>();\n    }\n\n    if (fr.index == null) {\n      fstReader = null;\n    } else {\n      fstReader = fr.index.getBytesReader();\n    }\n\n    // TODO: if the automaton is \"smallish\" we really\n    // should use the terms index to seek at least to\n    // the initial term and likely to subsequent terms\n    // (or, maybe just fallback to ATE for such cases).\n    // Else the seek cost of loading the frames will be\n    // too costly.\n\n    final FST.Arc<BytesRef> arc = fr.index.getFirstArc(arcs[0]);\n    // Empty string prefix must have an output in the index!\n    assert arc.isFinal();\n\n    // Special pushFrame since it's the first one:\n    final IntersectTermsEnumFrame f = stack[0];\n    f.fp = f.fpOrig = fr.rootBlockFP;\n    f.prefix = 0;\n    f.setState(0);\n    f.arc = arc;\n    f.outputPrefix = arc.output;\n    f.load(fr.rootCode);\n\n    // for assert:\n    assert setSavedStartTerm(startTerm);\n\n    currentFrame = f;\n    if (startTerm != null) {\n      seekToStartTerm(startTerm);\n    }\n    currentTransition = currentFrame.transition;\n  }\n\n","sourceOld":"  // TODO: in some cases we can filter by length?  eg\n  // regexp foo*bar must be at least length 6 bytes\n  public IntersectTermsEnum(FieldReader fr, Automaton automaton, RunAutomaton runAutomaton, BytesRef commonSuffix, BytesRef startTerm, int sinkState) throws IOException {\n    this.fr = fr;\n    this.sinkState = sinkState;\n\n    assert automaton != null;\n    assert runAutomaton != null;\n\n    this.runAutomaton = runAutomaton;\n    this.allowAutoPrefixTerms = sinkState != -1;\n    this.automaton = automaton;\n    this.commonSuffix = commonSuffix;\n\n    in = fr.parent.termsIn.clone();\n    stack = new IntersectTermsEnumFrame[5];\n    for(int idx=0;idx<stack.length;idx++) {\n      stack[idx] = new IntersectTermsEnumFrame(this, idx);\n    }\n    for(int arcIdx=0;arcIdx<arcs.length;arcIdx++) {\n      arcs[arcIdx] = new FST.Arc<>();\n    }\n\n    if (fr.index == null) {\n      fstReader = null;\n    } else {\n      fstReader = fr.index.getBytesReader();\n    }\n\n    // TODO: if the automaton is \"smallish\" we really\n    // should use the terms index to seek at least to\n    // the initial term and likely to subsequent terms\n    // (or, maybe just fallback to ATE for such cases).\n    // Else the seek cost of loading the frames will be\n    // too costly.\n\n    final FST.Arc<BytesRef> arc = fr.index.getFirstArc(arcs[0]);\n    // Empty string prefix must have an output in the index!\n    assert arc.isFinal();\n\n    // Special pushFrame since it's the first one:\n    final IntersectTermsEnumFrame f = stack[0];\n    f.fp = f.fpOrig = fr.rootBlockFP;\n    f.prefix = 0;\n    f.setState(runAutomaton.getInitialState());\n    f.arc = arc;\n    f.outputPrefix = arc.output;\n    f.load(fr.rootCode);\n\n    // for assert:\n    assert setSavedStartTerm(startTerm);\n\n    currentFrame = f;\n    if (startTerm != null) {\n      seekToStartTerm(startTerm);\n    }\n    currentTransition = currentFrame.transition;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/IntersectTermsEnum#IntersectTermsEnum(FieldReader,Automaton,RunAutomaton,BytesRef,BytesRef,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/IntersectTermsEnum#IntersectTermsEnum(FieldReader,Automaton,RunAutomaton,BytesRef,BytesRef,int).mjava","sourceNew":"  // TODO: in some cases we can filter by length?  eg\n  // regexp foo*bar must be at least length 6 bytes\n  public IntersectTermsEnum(FieldReader fr, Automaton automaton, RunAutomaton runAutomaton, BytesRef commonSuffix, BytesRef startTerm, int sinkState) throws IOException {\n    this.fr = fr;\n    this.sinkState = sinkState;\n\n    assert automaton != null;\n    assert runAutomaton != null;\n\n    this.runAutomaton = runAutomaton;\n    this.allowAutoPrefixTerms = sinkState != -1;\n    this.automaton = automaton;\n    this.commonSuffix = commonSuffix;\n\n    in = fr.parent.termsIn.clone();\n    stack = new IntersectTermsEnumFrame[5];\n    for(int idx=0;idx<stack.length;idx++) {\n      stack[idx] = new IntersectTermsEnumFrame(this, idx);\n    }\n    for(int arcIdx=0;arcIdx<arcs.length;arcIdx++) {\n      arcs[arcIdx] = new FST.Arc<>();\n    }\n\n    if (fr.index == null) {\n      fstReader = null;\n    } else {\n      fstReader = fr.index.getBytesReader();\n    }\n\n    // TODO: if the automaton is \"smallish\" we really\n    // should use the terms index to seek at least to\n    // the initial term and likely to subsequent terms\n    // (or, maybe just fallback to ATE for such cases).\n    // Else the seek cost of loading the frames will be\n    // too costly.\n\n    final FST.Arc<BytesRef> arc = fr.index.getFirstArc(arcs[0]);\n    // Empty string prefix must have an output in the index!\n    assert arc.isFinal();\n\n    // Special pushFrame since it's the first one:\n    final IntersectTermsEnumFrame f = stack[0];\n    f.fp = f.fpOrig = fr.rootBlockFP;\n    f.prefix = 0;\n    f.setState(0);\n    f.arc = arc;\n    f.outputPrefix = arc.output;\n    f.load(fr.rootCode);\n\n    // for assert:\n    assert setSavedStartTerm(startTerm);\n\n    currentFrame = f;\n    if (startTerm != null) {\n      seekToStartTerm(startTerm);\n    }\n    currentTransition = currentFrame.transition;\n  }\n\n","sourceOld":"  // TODO: in some cases we can filter by length?  eg\n  // regexp foo*bar must be at least length 6 bytes\n  public IntersectTermsEnum(FieldReader fr, Automaton automaton, RunAutomaton runAutomaton, BytesRef commonSuffix, BytesRef startTerm, int sinkState) throws IOException {\n    this.fr = fr;\n    this.sinkState = sinkState;\n\n    assert automaton != null;\n    assert runAutomaton != null;\n\n    this.runAutomaton = runAutomaton;\n    this.allowAutoPrefixTerms = sinkState != -1;\n    this.automaton = automaton;\n    this.commonSuffix = commonSuffix;\n\n    in = fr.parent.termsIn.clone();\n    stack = new IntersectTermsEnumFrame[5];\n    for(int idx=0;idx<stack.length;idx++) {\n      stack[idx] = new IntersectTermsEnumFrame(this, idx);\n    }\n    for(int arcIdx=0;arcIdx<arcs.length;arcIdx++) {\n      arcs[arcIdx] = new FST.Arc<>();\n    }\n\n    if (fr.index == null) {\n      fstReader = null;\n    } else {\n      fstReader = fr.index.getBytesReader();\n    }\n\n    // TODO: if the automaton is \"smallish\" we really\n    // should use the terms index to seek at least to\n    // the initial term and likely to subsequent terms\n    // (or, maybe just fallback to ATE for such cases).\n    // Else the seek cost of loading the frames will be\n    // too costly.\n\n    final FST.Arc<BytesRef> arc = fr.index.getFirstArc(arcs[0]);\n    // Empty string prefix must have an output in the index!\n    assert arc.isFinal();\n\n    // Special pushFrame since it's the first one:\n    final IntersectTermsEnumFrame f = stack[0];\n    f.fp = f.fpOrig = fr.rootBlockFP;\n    f.prefix = 0;\n    f.setState(runAutomaton.getInitialState());\n    f.arc = arc;\n    f.outputPrefix = arc.output;\n    f.load(fr.rootCode);\n\n    // for assert:\n    assert setSavedStartTerm(startTerm);\n\n    currentFrame = f;\n    if (startTerm != null) {\n      seekToStartTerm(startTerm);\n    }\n    currentTransition = currentFrame.transition;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"45f1ab280880dd574523c481077097a2fbb37c1b","date":1515505336,"type":3,"author":"Pulak Ghosh","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/IntersectTermsEnum#IntersectTermsEnum(FieldReader,Automaton,RunAutomaton,BytesRef,BytesRef,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/IntersectTermsEnum#IntersectTermsEnum(FieldReader,Automaton,RunAutomaton,BytesRef,BytesRef,int).mjava","sourceNew":"  // TODO: in some cases we can filter by length?  eg\n  // regexp foo*bar must be at least length 6 bytes\n  public IntersectTermsEnum(FieldReader fr, Automaton automaton, RunAutomaton runAutomaton, BytesRef commonSuffix, BytesRef startTerm, int sinkState) throws IOException {\n    this.fr = fr;\n    this.sinkState = sinkState;\n\n    assert automaton != null;\n    assert runAutomaton != null;\n\n    this.runAutomaton = runAutomaton;\n    this.allowAutoPrefixTerms = sinkState != -1;\n    this.automaton = automaton;\n    this.commonSuffix = commonSuffix;\n\n    in = fr.parent.termsIn.clone();\n    stack = new IntersectTermsEnumFrame[5];\n    for(int idx=0;idx<stack.length;idx++) {\n      stack[idx] = new IntersectTermsEnumFrame(this, idx);\n    }\n    for(int arcIdx=0;arcIdx<arcs.length;arcIdx++) {\n      arcs[arcIdx] = new FST.Arc<>();\n    }\n\n    \n    fstReader = fr.index.getBytesReader();\n\n    // TODO: if the automaton is \"smallish\" we really\n    // should use the terms index to seek at least to\n    // the initial term and likely to subsequent terms\n    // (or, maybe just fallback to ATE for such cases).\n    // Else the seek cost of loading the frames will be\n    // too costly.\n\n    final FST.Arc<BytesRef> arc = fr.index.getFirstArc(arcs[0]);\n    // Empty string prefix must have an output in the index!\n    assert arc.isFinal();\n\n    // Special pushFrame since it's the first one:\n    final IntersectTermsEnumFrame f = stack[0];\n    f.fp = f.fpOrig = fr.rootBlockFP;\n    f.prefix = 0;\n    f.setState(0);\n    f.arc = arc;\n    f.outputPrefix = arc.output;\n    f.load(fr.rootCode);\n\n    // for assert:\n    assert setSavedStartTerm(startTerm);\n\n    currentFrame = f;\n    if (startTerm != null) {\n      seekToStartTerm(startTerm);\n    }\n    currentTransition = currentFrame.transition;\n  }\n\n","sourceOld":"  // TODO: in some cases we can filter by length?  eg\n  // regexp foo*bar must be at least length 6 bytes\n  public IntersectTermsEnum(FieldReader fr, Automaton automaton, RunAutomaton runAutomaton, BytesRef commonSuffix, BytesRef startTerm, int sinkState) throws IOException {\n    this.fr = fr;\n    this.sinkState = sinkState;\n\n    assert automaton != null;\n    assert runAutomaton != null;\n\n    this.runAutomaton = runAutomaton;\n    this.allowAutoPrefixTerms = sinkState != -1;\n    this.automaton = automaton;\n    this.commonSuffix = commonSuffix;\n\n    in = fr.parent.termsIn.clone();\n    stack = new IntersectTermsEnumFrame[5];\n    for(int idx=0;idx<stack.length;idx++) {\n      stack[idx] = new IntersectTermsEnumFrame(this, idx);\n    }\n    for(int arcIdx=0;arcIdx<arcs.length;arcIdx++) {\n      arcs[arcIdx] = new FST.Arc<>();\n    }\n\n    if (fr.index == null) {\n      fstReader = null;\n    } else {\n      fstReader = fr.index.getBytesReader();\n    }\n\n    // TODO: if the automaton is \"smallish\" we really\n    // should use the terms index to seek at least to\n    // the initial term and likely to subsequent terms\n    // (or, maybe just fallback to ATE for such cases).\n    // Else the seek cost of loading the frames will be\n    // too costly.\n\n    final FST.Arc<BytesRef> arc = fr.index.getFirstArc(arcs[0]);\n    // Empty string prefix must have an output in the index!\n    assert arc.isFinal();\n\n    // Special pushFrame since it's the first one:\n    final IntersectTermsEnumFrame f = stack[0];\n    f.fp = f.fpOrig = fr.rootBlockFP;\n    f.prefix = 0;\n    f.setState(0);\n    f.arc = arc;\n    f.outputPrefix = arc.output;\n    f.load(fr.rootCode);\n\n    // for assert:\n    assert setSavedStartTerm(startTerm);\n\n    currentFrame = f;\n    if (startTerm != null) {\n      seekToStartTerm(startTerm);\n    }\n    currentTransition = currentFrame.transition;\n  }\n\n","bugFix":["c8e28215c157245fd00f3954f8f0d4f45c2b0fd3"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/IntersectTermsEnum#IntersectTermsEnum(FieldReader,Automaton,RunAutomaton,BytesRef,BytesRef,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/IntersectTermsEnum#IntersectTermsEnum(FieldReader,Automaton,RunAutomaton,BytesRef,BytesRef,int).mjava","sourceNew":"  // TODO: in some cases we can filter by length?  eg\n  // regexp foo*bar must be at least length 6 bytes\n  public IntersectTermsEnum(FieldReader fr, Automaton automaton, RunAutomaton runAutomaton, BytesRef commonSuffix, BytesRef startTerm, int sinkState) throws IOException {\n    this.fr = fr;\n    this.sinkState = sinkState;\n\n    assert automaton != null;\n    assert runAutomaton != null;\n\n    this.runAutomaton = runAutomaton;\n    this.allowAutoPrefixTerms = sinkState != -1;\n    this.automaton = automaton;\n    this.commonSuffix = commonSuffix;\n\n    in = fr.parent.termsIn.clone();\n    stack = new IntersectTermsEnumFrame[5];\n    for(int idx=0;idx<stack.length;idx++) {\n      stack[idx] = new IntersectTermsEnumFrame(this, idx);\n    }\n    for(int arcIdx=0;arcIdx<arcs.length;arcIdx++) {\n      arcs[arcIdx] = new FST.Arc<>();\n    }\n\n    \n    fstReader = fr.index.getBytesReader();\n\n    // TODO: if the automaton is \"smallish\" we really\n    // should use the terms index to seek at least to\n    // the initial term and likely to subsequent terms\n    // (or, maybe just fallback to ATE for such cases).\n    // Else the seek cost of loading the frames will be\n    // too costly.\n\n    final FST.Arc<BytesRef> arc = fr.index.getFirstArc(arcs[0]);\n    // Empty string prefix must have an output in the index!\n    assert arc.isFinal();\n\n    // Special pushFrame since it's the first one:\n    final IntersectTermsEnumFrame f = stack[0];\n    f.fp = f.fpOrig = fr.rootBlockFP;\n    f.prefix = 0;\n    f.setState(0);\n    f.arc = arc;\n    f.outputPrefix = arc.output;\n    f.load(fr.rootCode);\n\n    // for assert:\n    assert setSavedStartTerm(startTerm);\n\n    currentFrame = f;\n    if (startTerm != null) {\n      seekToStartTerm(startTerm);\n    }\n    currentTransition = currentFrame.transition;\n  }\n\n","sourceOld":"  // TODO: in some cases we can filter by length?  eg\n  // regexp foo*bar must be at least length 6 bytes\n  public IntersectTermsEnum(FieldReader fr, Automaton automaton, RunAutomaton runAutomaton, BytesRef commonSuffix, BytesRef startTerm, int sinkState) throws IOException {\n    this.fr = fr;\n    this.sinkState = sinkState;\n\n    assert automaton != null;\n    assert runAutomaton != null;\n\n    this.runAutomaton = runAutomaton;\n    this.allowAutoPrefixTerms = sinkState != -1;\n    this.automaton = automaton;\n    this.commonSuffix = commonSuffix;\n\n    in = fr.parent.termsIn.clone();\n    stack = new IntersectTermsEnumFrame[5];\n    for(int idx=0;idx<stack.length;idx++) {\n      stack[idx] = new IntersectTermsEnumFrame(this, idx);\n    }\n    for(int arcIdx=0;arcIdx<arcs.length;arcIdx++) {\n      arcs[arcIdx] = new FST.Arc<>();\n    }\n\n    if (fr.index == null) {\n      fstReader = null;\n    } else {\n      fstReader = fr.index.getBytesReader();\n    }\n\n    // TODO: if the automaton is \"smallish\" we really\n    // should use the terms index to seek at least to\n    // the initial term and likely to subsequent terms\n    // (or, maybe just fallback to ATE for such cases).\n    // Else the seek cost of loading the frames will be\n    // too costly.\n\n    final FST.Arc<BytesRef> arc = fr.index.getFirstArc(arcs[0]);\n    // Empty string prefix must have an output in the index!\n    assert arc.isFinal();\n\n    // Special pushFrame since it's the first one:\n    final IntersectTermsEnumFrame f = stack[0];\n    f.fp = f.fpOrig = fr.rootBlockFP;\n    f.prefix = 0;\n    f.setState(0);\n    f.arc = arc;\n    f.outputPrefix = arc.output;\n    f.load(fr.rootCode);\n\n    // for assert:\n    assert setSavedStartTerm(startTerm);\n\n    currentFrame = f;\n    if (startTerm != null) {\n      seekToStartTerm(startTerm);\n    }\n    currentTransition = currentFrame.transition;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dd96a930cc08d72beee719cc11ce465b9d9861c3","date":1535640296,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/IntersectTermsEnum#IntersectTermsEnum(FieldReader,Automaton,RunAutomaton,BytesRef,BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/IntersectTermsEnum#IntersectTermsEnum(FieldReader,Automaton,RunAutomaton,BytesRef,BytesRef,int).mjava","sourceNew":"  // TODO: in some cases we can filter by length?  eg\n  // regexp foo*bar must be at least length 6 bytes\n  public IntersectTermsEnum(FieldReader fr, Automaton automaton, RunAutomaton runAutomaton, BytesRef commonSuffix, BytesRef startTerm) throws IOException {\n    this.fr = fr;\n\n    assert automaton != null;\n    assert runAutomaton != null;\n\n    this.runAutomaton = runAutomaton;\n    this.automaton = automaton;\n    this.commonSuffix = commonSuffix;\n\n    in = fr.parent.termsIn.clone();\n    stack = new IntersectTermsEnumFrame[5];\n    for(int idx=0;idx<stack.length;idx++) {\n      stack[idx] = new IntersectTermsEnumFrame(this, idx);\n    }\n    for(int arcIdx=0;arcIdx<arcs.length;arcIdx++) {\n      arcs[arcIdx] = new FST.Arc<>();\n    }\n\n    \n    fstReader = fr.index.getBytesReader();\n\n    // TODO: if the automaton is \"smallish\" we really\n    // should use the terms index to seek at least to\n    // the initial term and likely to subsequent terms\n    // (or, maybe just fallback to ATE for such cases).\n    // Else the seek cost of loading the frames will be\n    // too costly.\n\n    final FST.Arc<BytesRef> arc = fr.index.getFirstArc(arcs[0]);\n    // Empty string prefix must have an output in the index!\n    assert arc.isFinal();\n\n    // Special pushFrame since it's the first one:\n    final IntersectTermsEnumFrame f = stack[0];\n    f.fp = f.fpOrig = fr.rootBlockFP;\n    f.prefix = 0;\n    f.setState(0);\n    f.arc = arc;\n    f.outputPrefix = arc.output;\n    f.load(fr.rootCode);\n\n    // for assert:\n    assert setSavedStartTerm(startTerm);\n\n    currentFrame = f;\n    if (startTerm != null) {\n      seekToStartTerm(startTerm);\n    }\n    currentTransition = currentFrame.transition;\n  }\n\n","sourceOld":"  // TODO: in some cases we can filter by length?  eg\n  // regexp foo*bar must be at least length 6 bytes\n  public IntersectTermsEnum(FieldReader fr, Automaton automaton, RunAutomaton runAutomaton, BytesRef commonSuffix, BytesRef startTerm, int sinkState) throws IOException {\n    this.fr = fr;\n    this.sinkState = sinkState;\n\n    assert automaton != null;\n    assert runAutomaton != null;\n\n    this.runAutomaton = runAutomaton;\n    this.allowAutoPrefixTerms = sinkState != -1;\n    this.automaton = automaton;\n    this.commonSuffix = commonSuffix;\n\n    in = fr.parent.termsIn.clone();\n    stack = new IntersectTermsEnumFrame[5];\n    for(int idx=0;idx<stack.length;idx++) {\n      stack[idx] = new IntersectTermsEnumFrame(this, idx);\n    }\n    for(int arcIdx=0;arcIdx<arcs.length;arcIdx++) {\n      arcs[arcIdx] = new FST.Arc<>();\n    }\n\n    \n    fstReader = fr.index.getBytesReader();\n\n    // TODO: if the automaton is \"smallish\" we really\n    // should use the terms index to seek at least to\n    // the initial term and likely to subsequent terms\n    // (or, maybe just fallback to ATE for such cases).\n    // Else the seek cost of loading the frames will be\n    // too costly.\n\n    final FST.Arc<BytesRef> arc = fr.index.getFirstArc(arcs[0]);\n    // Empty string prefix must have an output in the index!\n    assert arc.isFinal();\n\n    // Special pushFrame since it's the first one:\n    final IntersectTermsEnumFrame f = stack[0];\n    f.fp = f.fpOrig = fr.rootBlockFP;\n    f.prefix = 0;\n    f.setState(0);\n    f.arc = arc;\n    f.outputPrefix = arc.output;\n    f.load(fr.rootCode);\n\n    // for assert:\n    assert setSavedStartTerm(startTerm);\n\n    currentFrame = f;\n    if (startTerm != null) {\n      seekToStartTerm(startTerm);\n    }\n    currentTransition = currentFrame.transition;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["b7543e96e2d4820e09334d36a699b998ed963f4f","45f1ab280880dd574523c481077097a2fbb37c1b"],"b7543e96e2d4820e09334d36a699b998ed963f4f":["59db5e5f780185e0155d296a323e440a6ecfd3b6"],"59db5e5f780185e0155d296a323e440a6ecfd3b6":["3e8715d826e588419327562287d5d6a8040d63d6"],"dd96a930cc08d72beee719cc11ce465b9d9861c3":["b94236357aaa22b76c10629851fe4e376e0cea82"],"45f1ab280880dd574523c481077097a2fbb37c1b":["b7543e96e2d4820e09334d36a699b998ed963f4f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d2638f781be724518ff6c2263d14a48cf6e68017":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3e8715d826e588419327562287d5d6a8040d63d6"],"3e8715d826e588419327562287d5d6a8040d63d6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["59db5e5f780185e0155d296a323e440a6ecfd3b6","b7543e96e2d4820e09334d36a699b998ed963f4f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["dd96a930cc08d72beee719cc11ce465b9d9861c3"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["dd96a930cc08d72beee719cc11ce465b9d9861c3"],"b7543e96e2d4820e09334d36a699b998ed963f4f":["b94236357aaa22b76c10629851fe4e376e0cea82","45f1ab280880dd574523c481077097a2fbb37c1b","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"59db5e5f780185e0155d296a323e440a6ecfd3b6":["b7543e96e2d4820e09334d36a699b998ed963f4f","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"45f1ab280880dd574523c481077097a2fbb37c1b":["b94236357aaa22b76c10629851fe4e376e0cea82"],"dd96a930cc08d72beee719cc11ce465b9d9861c3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d2638f781be724518ff6c2263d14a48cf6e68017","3e8715d826e588419327562287d5d6a8040d63d6"],"d2638f781be724518ff6c2263d14a48cf6e68017":[],"3e8715d826e588419327562287d5d6a8040d63d6":["59db5e5f780185e0155d296a323e440a6ecfd3b6","d2638f781be724518ff6c2263d14a48cf6e68017"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d2638f781be724518ff6c2263d14a48cf6e68017","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}