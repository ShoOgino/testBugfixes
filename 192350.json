{"path":"solr/core/src/java/org/apache/solr/core/PluginBag.RuntimeLib#verify().mjava","commits":[{"id":"e82d485dfb2d8c31baefb7ef96b64021a1ffa170","date":1425903839,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/PluginBag.RuntimeLib#verify().mjava","pathOld":"/dev/null","sourceNew":"    public void verify() throws Exception {\n      if (verified) return;\n      if (jarContent == null) {\n        log.error(\"Calling verify before loading the jar\");\n        return;\n      }\n\n      if (!coreContainer.isZooKeeperAware())\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Signing jar is possible only in cloud\");\n      Map<String, byte[]> keys = CloudUtil.getTrustedKeys(coreContainer.getZkController().getZkClient(), \"exe\");\n      if (keys.isEmpty()) {\n        if (sig == null) {\n          verified = true;\n          log.info(\"A run time lib {} is loaded  without verification \", name);\n          return;\n        } else {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"No public keys are available in ZK to verify signature for runtime lib  \" + name);\n        }\n      } else if (sig == null) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, MessageFormat.format(\"runtimelib {0} should be signed with one of the keys in ZK /keys/exe \", name));\n      }\n\n      try {\n        String matchedKey = jarContent.jar.checkSignature(sig, new CryptoKeys(keys));\n        if (matchedKey == null)\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"No key matched signature for jar : \" + name + \" version: \" + version);\n        log.info(\"Jar {} signed with {} successfully verified\", name, matchedKey);\n      } catch (Exception e) {\n        if (e instanceof SolrException) throw e;\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error verifying key \", e);\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9bdb19206b4aeab66b9fb393c53969f44bdd48be","date":1426629125,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/PluginBag.RuntimeLib#verify().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/PluginBag.RuntimeLib#verify().mjava","sourceNew":"    public void verify() throws Exception {\n      if (verified) return;\n      if (jarContent == null) {\n        log.error(\"Calling verify before loading the jar\");\n        return;\n      }\n\n      if (!coreContainer.isZooKeeperAware())\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Signing jar is possible only in cloud\");\n      Map<String, byte[]> keys = CloudUtil.getTrustedKeys(coreContainer.getZkController().getZkClient(), \"exe\");\n      if (keys.isEmpty()) {\n        if (sig == null) {\n          verified = true;\n          log.info(\"A run time lib {} is loaded  without verification \", name);\n          return;\n        } else {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"No public keys are available in ZK to verify signature for runtime lib  \" + name);\n        }\n      } else if (sig == null) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, StrUtils.formatString(\"runtimelib {0} should be signed with one of the keys in ZK /keys/exe \", name));\n      }\n\n      try {\n        String matchedKey = jarContent.jar.checkSignature(sig, new CryptoKeys(keys));\n        if (matchedKey == null)\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"No key matched signature for jar : \" + name + \" version: \" + version);\n        log.info(\"Jar {} signed with {} successfully verified\", name, matchedKey);\n      } catch (Exception e) {\n        if (e instanceof SolrException) throw e;\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error verifying key \", e);\n      }\n    }\n\n","sourceOld":"    public void verify() throws Exception {\n      if (verified) return;\n      if (jarContent == null) {\n        log.error(\"Calling verify before loading the jar\");\n        return;\n      }\n\n      if (!coreContainer.isZooKeeperAware())\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Signing jar is possible only in cloud\");\n      Map<String, byte[]> keys = CloudUtil.getTrustedKeys(coreContainer.getZkController().getZkClient(), \"exe\");\n      if (keys.isEmpty()) {\n        if (sig == null) {\n          verified = true;\n          log.info(\"A run time lib {} is loaded  without verification \", name);\n          return;\n        } else {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"No public keys are available in ZK to verify signature for runtime lib  \" + name);\n        }\n      } else if (sig == null) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, MessageFormat.format(\"runtimelib {0} should be signed with one of the keys in ZK /keys/exe \", name));\n      }\n\n      try {\n        String matchedKey = jarContent.jar.checkSignature(sig, new CryptoKeys(keys));\n        if (matchedKey == null)\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"No key matched signature for jar : \" + name + \" version: \" + version);\n        log.info(\"Jar {} signed with {} successfully verified\", name, matchedKey);\n      } catch (Exception e) {\n        if (e instanceof SolrException) throw e;\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error verifying key \", e);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/PluginBag.RuntimeLib#verify().mjava","pathOld":"/dev/null","sourceNew":"    public void verify() throws Exception {\n      if (verified) return;\n      if (jarContent == null) {\n        log.error(\"Calling verify before loading the jar\");\n        return;\n      }\n\n      if (!coreContainer.isZooKeeperAware())\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Signing jar is possible only in cloud\");\n      Map<String, byte[]> keys = CloudUtil.getTrustedKeys(coreContainer.getZkController().getZkClient(), \"exe\");\n      if (keys.isEmpty()) {\n        if (sig == null) {\n          verified = true;\n          log.info(\"A run time lib {} is loaded  without verification \", name);\n          return;\n        } else {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"No public keys are available in ZK to verify signature for runtime lib  \" + name);\n        }\n      } else if (sig == null) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, StrUtils.formatString(\"runtimelib {0} should be signed with one of the keys in ZK /keys/exe \", name));\n      }\n\n      try {\n        String matchedKey = jarContent.jar.checkSignature(sig, new CryptoKeys(keys));\n        if (matchedKey == null)\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"No key matched signature for jar : \" + name + \" version: \" + version);\n        log.info(\"Jar {} signed with {} successfully verified\", name, matchedKey);\n      } catch (Exception e) {\n        if (e instanceof SolrException) throw e;\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error verifying key \", e);\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f46a888512a86ee1f37a7682bac9b2f4b38bb5a","date":1456224289,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/PluginBag.RuntimeLib#verify().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/PluginBag.RuntimeLib#verify().mjava","sourceNew":"    public void verify() throws Exception {\n      if (verified) return;\n      if (jarContent == null) {\n        log.error(\"Calling verify before loading the jar\");\n        return;\n      }\n\n      if (!coreContainer.isZooKeeperAware())\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Signing jar is possible only in cloud\");\n      Map<String, byte[]> keys = CloudUtil.getTrustedKeys(coreContainer.getZkController().getZkClient(), \"exe\");\n      if (keys.isEmpty()) {\n        if (sig == null) {\n          verified = true;\n          log.info(\"A run time lib {} is loaded  without verification \", name);\n          return;\n        } else {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"No public keys are available in ZK to verify signature for runtime lib  \" + name);\n        }\n      } else if (sig == null) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, StrUtils.formatString(\"runtimelib {0} should be signed with one of the keys in ZK /keys/exe \", name));\n      }\n\n      try {\n        String matchedKey = jarContent.blob.checkSignature(sig, new CryptoKeys(keys));\n        if (matchedKey == null)\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"No key matched signature for jar : \" + name + \" version: \" + version);\n        log.info(\"Jar {} signed with {} successfully verified\", name, matchedKey);\n      } catch (Exception e) {\n        if (e instanceof SolrException) throw e;\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error verifying key \", e);\n      }\n    }\n\n","sourceOld":"    public void verify() throws Exception {\n      if (verified) return;\n      if (jarContent == null) {\n        log.error(\"Calling verify before loading the jar\");\n        return;\n      }\n\n      if (!coreContainer.isZooKeeperAware())\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Signing jar is possible only in cloud\");\n      Map<String, byte[]> keys = CloudUtil.getTrustedKeys(coreContainer.getZkController().getZkClient(), \"exe\");\n      if (keys.isEmpty()) {\n        if (sig == null) {\n          verified = true;\n          log.info(\"A run time lib {} is loaded  without verification \", name);\n          return;\n        } else {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"No public keys are available in ZK to verify signature for runtime lib  \" + name);\n        }\n      } else if (sig == null) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, StrUtils.formatString(\"runtimelib {0} should be signed with one of the keys in ZK /keys/exe \", name));\n      }\n\n      try {\n        String matchedKey = jarContent.jar.checkSignature(sig, new CryptoKeys(keys));\n        if (matchedKey == null)\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"No key matched signature for jar : \" + name + \" version: \" + version);\n        log.info(\"Jar {} signed with {} successfully verified\", name, matchedKey);\n      } catch (Exception e) {\n        if (e instanceof SolrException) throw e;\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error verifying key \", e);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5296efc4b319f5647b606629c093a94b23692c6","date":1456267155,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/PluginBag.RuntimeLib#verify().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/PluginBag.RuntimeLib#verify().mjava","sourceNew":"    public void verify() throws Exception {\n      if (verified) return;\n      if (jarContent == null) {\n        log.error(\"Calling verify before loading the jar\");\n        return;\n      }\n\n      if (!coreContainer.isZooKeeperAware())\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Signing jar is possible only in cloud\");\n      Map<String, byte[]> keys = CloudUtil.getTrustedKeys(coreContainer.getZkController().getZkClient(), \"exe\");\n      if (keys.isEmpty()) {\n        if (sig == null) {\n          verified = true;\n          log.info(\"A run time lib {} is loaded  without verification \", name);\n          return;\n        } else {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"No public keys are available in ZK to verify signature for runtime lib  \" + name);\n        }\n      } else if (sig == null) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, StrUtils.formatString(\"runtimelib {0} should be signed with one of the keys in ZK /keys/exe \", name));\n      }\n\n      try {\n        String matchedKey = jarContent.blob.checkSignature(sig, new CryptoKeys(keys));\n        if (matchedKey == null)\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"No key matched signature for jar : \" + name + \" version: \" + version);\n        log.info(\"Jar {} signed with {} successfully verified\", name, matchedKey);\n      } catch (Exception e) {\n        if (e instanceof SolrException) throw e;\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error verifying key \", e);\n      }\n    }\n\n","sourceOld":"    public void verify() throws Exception {\n      if (verified) return;\n      if (jarContent == null) {\n        log.error(\"Calling verify before loading the jar\");\n        return;\n      }\n\n      if (!coreContainer.isZooKeeperAware())\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Signing jar is possible only in cloud\");\n      Map<String, byte[]> keys = CloudUtil.getTrustedKeys(coreContainer.getZkController().getZkClient(), \"exe\");\n      if (keys.isEmpty()) {\n        if (sig == null) {\n          verified = true;\n          log.info(\"A run time lib {} is loaded  without verification \", name);\n          return;\n        } else {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"No public keys are available in ZK to verify signature for runtime lib  \" + name);\n        }\n      } else if (sig == null) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, StrUtils.formatString(\"runtimelib {0} should be signed with one of the keys in ZK /keys/exe \", name));\n      }\n\n      try {\n        String matchedKey = jarContent.jar.checkSignature(sig, new CryptoKeys(keys));\n        if (matchedKey == null)\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"No key matched signature for jar : \" + name + \" version: \" + version);\n        log.info(\"Jar {} signed with {} successfully verified\", name, matchedKey);\n      } catch (Exception e) {\n        if (e instanceof SolrException) throw e;\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error verifying key \", e);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5fab1d180f47e9924e0e56501b42034b3476f2b1","date":1460974879,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/PluginBag.RuntimeLib#verify().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/PluginBag.RuntimeLib#verify().mjava","sourceNew":"    public void verify() throws Exception {\n      if (verified) return;\n      if (jarContent == null) {\n        log.error(\"Calling verify before loading the jar\");\n        return;\n      }\n\n      if (!coreContainer.isZooKeeperAware())\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Signing jar is possible only in cloud\");\n      Map<String, byte[]> keys = CloudUtil.getTrustedKeys(coreContainer.getZkController().getZkClient(), \"exe\");\n      if (keys.isEmpty()) {\n        if (sig == null) {\n          verified = true;\n          log.info(\"A run time lib {} is loaded  without verification \", name);\n          return;\n        } else {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"No public keys are available in ZK to verify signature for runtime lib  \" + name);\n        }\n      } else if (sig == null) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, StrUtils.formatString(\"runtimelib {0} should be signed with one of the keys in ZK /keys/exe \", name));\n      }\n\n      try {\n        String matchedKey = new CryptoKeys(keys).verify(sig, jarContent.blob.get());\n        if (matchedKey == null)\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"No key matched signature for jar : \" + name + \" version: \" + version);\n        log.info(\"Jar {} signed with {} successfully verified\", name, matchedKey);\n      } catch (Exception e) {\n        if (e instanceof SolrException) throw e;\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error verifying key \", e);\n      }\n    }\n\n","sourceOld":"    public void verify() throws Exception {\n      if (verified) return;\n      if (jarContent == null) {\n        log.error(\"Calling verify before loading the jar\");\n        return;\n      }\n\n      if (!coreContainer.isZooKeeperAware())\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Signing jar is possible only in cloud\");\n      Map<String, byte[]> keys = CloudUtil.getTrustedKeys(coreContainer.getZkController().getZkClient(), \"exe\");\n      if (keys.isEmpty()) {\n        if (sig == null) {\n          verified = true;\n          log.info(\"A run time lib {} is loaded  without verification \", name);\n          return;\n        } else {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"No public keys are available in ZK to verify signature for runtime lib  \" + name);\n        }\n      } else if (sig == null) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, StrUtils.formatString(\"runtimelib {0} should be signed with one of the keys in ZK /keys/exe \", name));\n      }\n\n      try {\n        String matchedKey = jarContent.blob.checkSignature(sig, new CryptoKeys(keys));\n        if (matchedKey == null)\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"No key matched signature for jar : \" + name + \" version: \" + version);\n        log.info(\"Jar {} signed with {} successfully verified\", name, matchedKey);\n      } catch (Exception e) {\n        if (e instanceof SolrException) throw e;\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error verifying key \", e);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"713122036535651642e6d4fe57ce12b449e18473","date":1461000510,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/PluginBag.RuntimeLib#verify().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/PluginBag.RuntimeLib#verify().mjava","sourceNew":"    public void verify() throws Exception {\n      if (verified) return;\n      if (jarContent == null) {\n        log.error(\"Calling verify before loading the jar\");\n        return;\n      }\n\n      if (!coreContainer.isZooKeeperAware())\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Signing jar is possible only in cloud\");\n      Map<String, byte[]> keys = CloudUtil.getTrustedKeys(coreContainer.getZkController().getZkClient(), \"exe\");\n      if (keys.isEmpty()) {\n        if (sig == null) {\n          verified = true;\n          log.info(\"A run time lib {} is loaded  without verification \", name);\n          return;\n        } else {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"No public keys are available in ZK to verify signature for runtime lib  \" + name);\n        }\n      } else if (sig == null) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, StrUtils.formatString(\"runtimelib {0} should be signed with one of the keys in ZK /keys/exe \", name));\n      }\n\n      try {\n        String matchedKey = new CryptoKeys(keys).verify(sig, jarContent.blob.get());\n        if (matchedKey == null)\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"No key matched signature for jar : \" + name + \" version: \" + version);\n        log.info(\"Jar {} signed with {} successfully verified\", name, matchedKey);\n      } catch (Exception e) {\n        if (e instanceof SolrException) throw e;\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error verifying key \", e);\n      }\n    }\n\n","sourceOld":"    public void verify() throws Exception {\n      if (verified) return;\n      if (jarContent == null) {\n        log.error(\"Calling verify before loading the jar\");\n        return;\n      }\n\n      if (!coreContainer.isZooKeeperAware())\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Signing jar is possible only in cloud\");\n      Map<String, byte[]> keys = CloudUtil.getTrustedKeys(coreContainer.getZkController().getZkClient(), \"exe\");\n      if (keys.isEmpty()) {\n        if (sig == null) {\n          verified = true;\n          log.info(\"A run time lib {} is loaded  without verification \", name);\n          return;\n        } else {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"No public keys are available in ZK to verify signature for runtime lib  \" + name);\n        }\n      } else if (sig == null) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, StrUtils.formatString(\"runtimelib {0} should be signed with one of the keys in ZK /keys/exe \", name));\n      }\n\n      try {\n        String matchedKey = jarContent.blob.checkSignature(sig, new CryptoKeys(keys));\n        if (matchedKey == null)\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"No key matched signature for jar : \" + name + \" version: \" + version);\n        log.info(\"Jar {} signed with {} successfully verified\", name, matchedKey);\n      } catch (Exception e) {\n        if (e instanceof SolrException) throw e;\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error verifying key \", e);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"627e70d5711ab39d080a080f089685268525f54d","date":1560754171,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/PluginBag.RuntimeLib#verify().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/PluginBag.RuntimeLib#verify().mjava","sourceNew":"    public void verify() throws Exception {\n      if (verified) return;\n      if (jarContent == null) {\n        log.error(\"Calling verify before loading the jar\");\n        return;\n      }\n\n      if (!coreContainer.isZooKeeperAware())\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Signing jar is possible only in cloud\");\n      Map<String, byte[]> keys = CloudUtil.getTrustedKeys(coreContainer.getZkController().getZkClient(), \"exe\");\n      if (keys.isEmpty()) {\n        if (sig == null) {\n          verified = true;\n          return;\n        } else {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"No public keys are available in ZK to verify signature for runtime lib  \" + name);\n        }\n      } else if (sig == null) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, StrUtils.formatString(\"runtimelib {0} should be signed with one of the keys in ZK /keys/exe \", name));\n      }\n\n      try {\n        String matchedKey = new CryptoKeys(keys).verify(sig, jarContent.blob.get());\n        if (matchedKey == null)\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"No key matched signature for jar : \" + name + \" version: \" + version);\n        log.info(\"Jar {} signed with {} successfully verified\", name, matchedKey);\n      } catch (Exception e) {\n        if (e instanceof SolrException) throw e;\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error verifying key \", e);\n      }\n    }\n\n","sourceOld":"    public void verify() throws Exception {\n      if (verified) return;\n      if (jarContent == null) {\n        log.error(\"Calling verify before loading the jar\");\n        return;\n      }\n\n      if (!coreContainer.isZooKeeperAware())\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Signing jar is possible only in cloud\");\n      Map<String, byte[]> keys = CloudUtil.getTrustedKeys(coreContainer.getZkController().getZkClient(), \"exe\");\n      if (keys.isEmpty()) {\n        if (sig == null) {\n          verified = true;\n          log.info(\"A run time lib {} is loaded  without verification \", name);\n          return;\n        } else {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"No public keys are available in ZK to verify signature for runtime lib  \" + name);\n        }\n      } else if (sig == null) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, StrUtils.formatString(\"runtimelib {0} should be signed with one of the keys in ZK /keys/exe \", name));\n      }\n\n      try {\n        String matchedKey = new CryptoKeys(keys).verify(sig, jarContent.blob.get());\n        if (matchedKey == null)\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"No key matched signature for jar : \" + name + \" version: \" + version);\n        log.info(\"Jar {} signed with {} successfully verified\", name, matchedKey);\n      } catch (Exception e) {\n        if (e instanceof SolrException) throw e;\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error verifying key \", e);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb50877dc038c021eba3a70999fd1f6ed85001c1","date":1563596432,"type":4,"author":"Noble Paul","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/core/PluginBag.RuntimeLib#verify().mjava","sourceNew":null,"sourceOld":"    public void verify() throws Exception {\n      if (verified) return;\n      if (jarContent == null) {\n        log.error(\"Calling verify before loading the jar\");\n        return;\n      }\n\n      if (!coreContainer.isZooKeeperAware())\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Signing jar is possible only in cloud\");\n      Map<String, byte[]> keys = CloudUtil.getTrustedKeys(coreContainer.getZkController().getZkClient(), \"exe\");\n      if (keys.isEmpty()) {\n        if (sig == null) {\n          verified = true;\n          return;\n        } else {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"No public keys are available in ZK to verify signature for runtime lib  \" + name);\n        }\n      } else if (sig == null) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, StrUtils.formatString(\"runtimelib {0} should be signed with one of the keys in ZK /keys/exe \", name));\n      }\n\n      try {\n        String matchedKey = new CryptoKeys(keys).verify(sig, jarContent.blob.get());\n        if (matchedKey == null)\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"No key matched signature for jar : \" + name + \" version: \" + version);\n        log.info(\"Jar {} signed with {} successfully verified\", name, matchedKey);\n      } catch (Exception e) {\n        if (e instanceof SolrException) throw e;\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error verifying key \", e);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c44cc06c26e456fe9c215072b79fce30babe3975","date":1570365040,"type":0,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/PluginBag.RuntimeLib#verify().mjava","pathOld":"/dev/null","sourceNew":"    public void verify() throws Exception {\n      if (verified) return;\n      if (jarContent == null) {\n        log.error(\"Calling verify before loading the jar\");\n        return;\n      }\n\n      if (!coreContainer.isZooKeeperAware())\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Signing jar is possible only in cloud\");\n      Map<String, byte[]> keys = CloudUtil.getTrustedKeys(coreContainer.getZkController().getZkClient(), \"exe\");\n      if (keys.isEmpty()) {\n        if (sig == null) {\n          verified = true;\n          return;\n        } else {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"No public keys are available in ZK to verify signature for runtime lib  \" + name);\n        }\n      } else if (sig == null) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, StrUtils.formatString(\"runtimelib {0} should be signed with one of the keys in ZK /keys/exe \", name));\n      }\n\n      try {\n        String matchedKey = new CryptoKeys(keys).verify(sig, jarContent.blob.get());\n        if (matchedKey == null)\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"No key matched signature for jar : \" + name + \" version: \" + version);\n        log.info(\"Jar {} signed with {} successfully verified\", name, matchedKey);\n      } catch (Exception e) {\n        if (e instanceof SolrException) throw e;\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error verifying key \", e);\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":0,"author":"jimczi","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/PluginBag.RuntimeLib#verify().mjava","pathOld":"/dev/null","sourceNew":"    public void verify() throws Exception {\n      if (verified) return;\n      if (jarContent == null) {\n        log.error(\"Calling verify before loading the jar\");\n        return;\n      }\n\n      if (!coreContainer.isZooKeeperAware())\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Signing jar is possible only in cloud\");\n      Map<String, byte[]> keys = CloudUtil.getTrustedKeys(coreContainer.getZkController().getZkClient(), \"exe\");\n      if (keys.isEmpty()) {\n        if (sig == null) {\n          verified = true;\n          return;\n        } else {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"No public keys are available in ZK to verify signature for runtime lib  \" + name);\n        }\n      } else if (sig == null) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, StrUtils.formatString(\"runtimelib {0} should be signed with one of the keys in ZK /keys/exe \", name));\n      }\n\n      try {\n        String matchedKey = new CryptoKeys(keys).verify(sig, jarContent.blob.get());\n        if (matchedKey == null)\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"No key matched signature for jar : \" + name + \" version: \" + version);\n        log.info(\"Jar {} signed with {} successfully verified\", name, matchedKey);\n      } catch (Exception e) {\n        if (e instanceof SolrException) throw e;\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error verifying key \", e);\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d16198391f70a4ee52a8c8792c91eb87a30f1d6","date":1596695552,"type":4,"author":"Noble Paul","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/core/PluginBag.RuntimeLib#verify().mjava","sourceNew":null,"sourceOld":"    public void verify() throws Exception {\n      if (verified) return;\n      if (jarContent == null) {\n        log.error(\"Calling verify before loading the jar\");\n        return;\n      }\n\n      if (!coreContainer.isZooKeeperAware())\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Signing jar is possible only in cloud\");\n      Map<String, byte[]> keys = CloudUtil.getTrustedKeys(coreContainer.getZkController().getZkClient(), \"exe\");\n      if (keys.isEmpty()) {\n        if (sig == null) {\n          verified = true;\n          return;\n        } else {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"No public keys are available in ZK to verify signature for runtime lib  \" + name);\n        }\n      } else if (sig == null) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, StrUtils.formatString(\"runtimelib {0} should be signed with one of the keys in ZK /keys/exe \", name));\n      }\n\n      try {\n        String matchedKey = new CryptoKeys(keys).verify(sig, jarContent.blob.get());\n        if (matchedKey == null)\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"No key matched signature for jar : \" + name + \" version: \" + version);\n        log.info(\"Jar {} signed with {} successfully verified\", name, matchedKey);\n      } catch (Exception e) {\n        if (e instanceof SolrException) throw e;\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error verifying key \", e);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0f46a888512a86ee1f37a7682bac9b2f4b38bb5a":["9bdb19206b4aeab66b9fb393c53969f44bdd48be"],"627e70d5711ab39d080a080f089685268525f54d":["713122036535651642e6d4fe57ce12b449e18473"],"e82d485dfb2d8c31baefb7ef96b64021a1ffa170":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5fab1d180f47e9924e0e56501b42034b3476f2b1":["0f46a888512a86ee1f37a7682bac9b2f4b38bb5a"],"c44cc06c26e456fe9c215072b79fce30babe3975":["fb50877dc038c021eba3a70999fd1f6ed85001c1"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9bdb19206b4aeab66b9fb393c53969f44bdd48be"],"fb50877dc038c021eba3a70999fd1f6ed85001c1":["627e70d5711ab39d080a080f089685268525f54d"],"713122036535651642e6d4fe57ce12b449e18473":["0f46a888512a86ee1f37a7682bac9b2f4b38bb5a","5fab1d180f47e9924e0e56501b42034b3476f2b1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0d16198391f70a4ee52a8c8792c91eb87a30f1d6":["c44cc06c26e456fe9c215072b79fce30babe3975"],"a5296efc4b319f5647b606629c093a94b23692c6":["9bdb19206b4aeab66b9fb393c53969f44bdd48be","0f46a888512a86ee1f37a7682bac9b2f4b38bb5a"],"9bdb19206b4aeab66b9fb393c53969f44bdd48be":["e82d485dfb2d8c31baefb7ef96b64021a1ffa170"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0d16198391f70a4ee52a8c8792c91eb87a30f1d6"],"b0b597c65628ca9e73913a07e81691f8229bae35":["fb50877dc038c021eba3a70999fd1f6ed85001c1","c44cc06c26e456fe9c215072b79fce30babe3975"]},"commit2Childs":{"0f46a888512a86ee1f37a7682bac9b2f4b38bb5a":["5fab1d180f47e9924e0e56501b42034b3476f2b1","713122036535651642e6d4fe57ce12b449e18473","a5296efc4b319f5647b606629c093a94b23692c6"],"627e70d5711ab39d080a080f089685268525f54d":["fb50877dc038c021eba3a70999fd1f6ed85001c1"],"e82d485dfb2d8c31baefb7ef96b64021a1ffa170":["9bdb19206b4aeab66b9fb393c53969f44bdd48be"],"5fab1d180f47e9924e0e56501b42034b3476f2b1":["713122036535651642e6d4fe57ce12b449e18473"],"c44cc06c26e456fe9c215072b79fce30babe3975":["0d16198391f70a4ee52a8c8792c91eb87a30f1d6","b0b597c65628ca9e73913a07e81691f8229bae35"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"fb50877dc038c021eba3a70999fd1f6ed85001c1":["c44cc06c26e456fe9c215072b79fce30babe3975","b0b597c65628ca9e73913a07e81691f8229bae35"],"713122036535651642e6d4fe57ce12b449e18473":["627e70d5711ab39d080a080f089685268525f54d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e82d485dfb2d8c31baefb7ef96b64021a1ffa170","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"0d16198391f70a4ee52a8c8792c91eb87a30f1d6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a5296efc4b319f5647b606629c093a94b23692c6":[],"9bdb19206b4aeab66b9fb393c53969f44bdd48be":["0f46a888512a86ee1f37a7682bac9b2f4b38bb5a","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","a5296efc4b319f5647b606629c093a94b23692c6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","a5296efc4b319f5647b606629c093a94b23692c6","cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}