{"path":"lucene/misc/src/test/org/apache/lucene/index/sorter/TestSortingMergePolicy#assertSorted(AtomicReader).mjava","commits":[{"id":"ad252c98ff183bc59bd0617be14fa46f9696d6fc","date":1363962178,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/index/sorter/TestSortingMergePolicy#assertSorted(AtomicReader).mjava","pathOld":"/dev/null","sourceNew":"  private void assertSorted(AtomicReader reader) throws IOException {\n    final NumericDocValues ndv = reader.getNumericDocValues(\"ndv\");\n    for (int i = 1; i < reader.maxDoc(); ++i) {\n      assertTrue(ndv.get(i-1) < ndv.get(i));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"66b61ab77ab36893d701d693f1b6df2a383bb7b5","date":1364405461,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/index/sorter/TestSortingMergePolicy#assertSorted(AtomicReader).mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/index/sorter/TestSortingMergePolicy#assertSorted(AtomicReader).mjava","sourceNew":"  private static void assertSorted(AtomicReader reader) throws IOException {\n    final NumericDocValues ndv = reader.getNumericDocValues(\"ndv\");\n    for (int i = 1; i < reader.maxDoc(); ++i) {\n      assertTrue(ndv.get(i-1) < ndv.get(i));\n    }\n  }\n\n","sourceOld":"  private void assertSorted(AtomicReader reader) throws IOException {\n    final NumericDocValues ndv = reader.getNumericDocValues(\"ndv\");\n    for (int i = 1; i < reader.maxDoc(); ++i) {\n      assertTrue(ndv.get(i-1) < ndv.get(i));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7ad6eed24e557585be7c29a40cab86db8f06d7b2","date":1367333440,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/index/sorter/TestSortingMergePolicy#assertSorted(AtomicReader).mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/index/sorter/TestSortingMergePolicy#assertSorted(AtomicReader).mjava","sourceNew":"  private static void assertSorted(AtomicReader reader) throws IOException {\n    final NumericDocValues ndv = reader.getNumericDocValues(\"ndv\");\n    for (int i = 1; i < reader.maxDoc(); ++i) {\n      assertTrue(ndv.get(i-1) <= ndv.get(i));\n    }\n  }\n\n","sourceOld":"  private static void assertSorted(AtomicReader reader) throws IOException {\n    final NumericDocValues ndv = reader.getNumericDocValues(\"ndv\");\n    for (int i = 1; i < reader.maxDoc(); ++i) {\n      assertTrue(ndv.get(i-1) < ndv.get(i));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e072d0b1fc19e0533d8ce432eed245196bca6fde","date":1379265112,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/index/sorter/TestSortingMergePolicy#assertSorted(AtomicReader).mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/index/sorter/TestSortingMergePolicy#assertSorted(AtomicReader).mjava","sourceNew":"  private static void assertSorted(AtomicReader reader) throws IOException {\n    final NumericDocValues ndv = reader.getNumericDocValues(\"ndv\");\n    for (int i = 1; i < reader.maxDoc(); ++i) {\n      assertTrue(\"ndv(\" + (i-1) + \")=\" + ndv.get(i-1) + \",ndv(\" + i + \")=\" + ndv.get(i), ndv.get(i-1) <= ndv.get(i));\n    }\n  }\n\n","sourceOld":"  private static void assertSorted(AtomicReader reader) throws IOException {\n    final NumericDocValues ndv = reader.getNumericDocValues(\"ndv\");\n    for (int i = 1; i < reader.maxDoc(); ++i) {\n      assertTrue(ndv.get(i-1) <= ndv.get(i));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":4,"author":"Ryan Ernst","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/misc/src/test/org/apache/lucene/index/sorter/TestSortingMergePolicy#assertSorted(AtomicReader).mjava","sourceNew":null,"sourceOld":"  private static void assertSorted(AtomicReader reader) throws IOException {\n    final NumericDocValues ndv = reader.getNumericDocValues(\"ndv\");\n    for (int i = 1; i < reader.maxDoc(); ++i) {\n      assertTrue(\"ndv(\" + (i-1) + \")=\" + ndv.get(i-1) + \",ndv(\" + i + \")=\" + ndv.get(i), ndv.get(i-1) <= ndv.get(i));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e072d0b1fc19e0533d8ce432eed245196bca6fde":["7ad6eed24e557585be7c29a40cab86db8f06d7b2"],"ad252c98ff183bc59bd0617be14fa46f9696d6fc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7ad6eed24e557585be7c29a40cab86db8f06d7b2":["66b61ab77ab36893d701d693f1b6df2a383bb7b5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"66b61ab77ab36893d701d693f1b6df2a383bb7b5":["ad252c98ff183bc59bd0617be14fa46f9696d6fc"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["e072d0b1fc19e0533d8ce432eed245196bca6fde"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c9fb5f46e264daf5ba3860defe623a89d202dd87"]},"commit2Childs":{"e072d0b1fc19e0533d8ce432eed245196bca6fde":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"ad252c98ff183bc59bd0617be14fa46f9696d6fc":["66b61ab77ab36893d701d693f1b6df2a383bb7b5"],"7ad6eed24e557585be7c29a40cab86db8f06d7b2":["e072d0b1fc19e0533d8ce432eed245196bca6fde"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ad252c98ff183bc59bd0617be14fa46f9696d6fc"],"66b61ab77ab36893d701d693f1b6df2a383bb7b5":["7ad6eed24e557585be7c29a40cab86db8f06d7b2"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}