{"path":"src/test/org/apache/lucene/index/TestConcurrentMergeScheduler.FailOnlyOnFlush#eval(MockRAMDirectory).mjava","commits":[{"id":"b1405362241b561f5590ff4a87d5d6e173bcd9cf","date":1190107634,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestConcurrentMergeScheduler.FailOnlyOnFlush#eval(MockRAMDirectory).mjava","pathOld":"/dev/null","sourceNew":"    public void eval(MockRAMDirectory dir)  throws IOException {\n      if (doFail) {\n        StackTraceElement[] trace = new Exception().getStackTrace();\n        for (int i = 0; i < trace.length; i++) {\n          if (\"doFlush\".equals(trace[i].getMethodName())) {\n            //new RuntimeException().printStackTrace(System.out);\n            throw new IOException(\"now failing during flush\");\n          }\n        }\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["2a186ae8733084223c22044e935e4ef848a143d1","5ef87af8c7bd0f8429622b83aa74202383f2e757"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"87c966e9308847938a7c905c2e46a56d8df788b8","date":1255035452,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestConcurrentMergeScheduler.FailOnlyOnFlush#eval(MockRAMDirectory).mjava","pathOld":"src/test/org/apache/lucene/index/TestConcurrentMergeScheduler.FailOnlyOnFlush#eval(MockRAMDirectory).mjava","sourceNew":"    public void eval(MockRAMDirectory dir)  throws IOException {\n      if (doFail) {\n        StackTraceElement[] trace = new Exception().getStackTrace();\n        for (int i = 0; i < trace.length; i++) {\n          if (\"doFlush\".equals(trace[i].getMethodName())) {\n            hitExc = true;\n            //new RuntimeException().printStackTrace(System.out);\n            throw new IOException(\"now failing during flush\");\n          }\n        }\n      }\n    }\n\n","sourceOld":"    public void eval(MockRAMDirectory dir)  throws IOException {\n      if (doFail) {\n        StackTraceElement[] trace = new Exception().getStackTrace();\n        for (int i = 0; i < trace.length; i++) {\n          if (\"doFlush\".equals(trace[i].getMethodName())) {\n            //new RuntimeException().printStackTrace(System.out);\n            throw new IOException(\"now failing during flush\");\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":["2a186ae8733084223c22044e935e4ef848a143d1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"dd81e8ef0540a4b8eb8c9e013584e1a88f7cce97","date":1255048240,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestConcurrentMergeScheduler.FailOnlyOnFlush#eval(MockRAMDirectory).mjava","pathOld":"src/test/org/apache/lucene/index/TestConcurrentMergeScheduler.FailOnlyOnFlush#eval(MockRAMDirectory).mjava","sourceNew":"    public void eval(MockRAMDirectory dir)  throws IOException {\n      if (doFail && Thread.currentThread().getName().equals(\"main\")) {\n        StackTraceElement[] trace = new Exception().getStackTrace();\n        for (int i = 0; i < trace.length; i++) {\n          if (\"doFlush\".equals(trace[i].getMethodName())) {\n            hitExc = true;\n            //new RuntimeException().printStackTrace(System.out);\n            throw new IOException(\"now failing during flush\");\n          }\n        }\n      }\n    }\n\n","sourceOld":"    public void eval(MockRAMDirectory dir)  throws IOException {\n      if (doFail) {\n        StackTraceElement[] trace = new Exception().getStackTrace();\n        for (int i = 0; i < trace.length; i++) {\n          if (\"doFlush\".equals(trace[i].getMethodName())) {\n            hitExc = true;\n            //new RuntimeException().printStackTrace(System.out);\n            throw new IOException(\"now failing during flush\");\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1326054a8d3aa66382d49decc7f330955c9c6f71","date":1257386139,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestConcurrentMergeScheduler.FailOnlyOnFlush#eval(MockRAMDirectory).mjava","pathOld":"src/test/org/apache/lucene/index/TestConcurrentMergeScheduler.FailOnlyOnFlush#eval(MockRAMDirectory).mjava","sourceNew":"    @Override\n    public void eval(MockRAMDirectory dir)  throws IOException {\n      if (doFail && Thread.currentThread().getName().equals(\"main\")) {\n        StackTraceElement[] trace = new Exception().getStackTrace();\n        for (int i = 0; i < trace.length; i++) {\n          if (\"doFlush\".equals(trace[i].getMethodName())) {\n            hitExc = true;\n            //new RuntimeException().printStackTrace(System.out);\n            throw new IOException(\"now failing during flush\");\n          }\n        }\n      }\n    }\n\n","sourceOld":"    public void eval(MockRAMDirectory dir)  throws IOException {\n      if (doFail && Thread.currentThread().getName().equals(\"main\")) {\n        StackTraceElement[] trace = new Exception().getStackTrace();\n        for (int i = 0; i < trace.length; i++) {\n          if (\"doFlush\".equals(trace[i].getMethodName())) {\n            hitExc = true;\n            //new RuntimeException().printStackTrace(System.out);\n            throw new IOException(\"now failing during flush\");\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"42607aa380c892dc1ec0ab26e86a575c28e13618","date":1268641604,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestConcurrentMergeScheduler.FailOnlyOnFlush#eval(MockRAMDirectory).mjava","pathOld":"src/test/org/apache/lucene/index/TestConcurrentMergeScheduler.FailOnlyOnFlush#eval(MockRAMDirectory).mjava","sourceNew":"    @Override\n    public void eval(MockRAMDirectory dir)  throws IOException {\n      if (doFail && Thread.currentThread().getName().equals(\"main\")) {\n        StackTraceElement[] trace = new Exception().getStackTrace();\n        for (int i = 0; i < trace.length; i++) {\n          if (\"doFlush\".equals(trace[i].getMethodName())) {\n            hitExc = true;\n            throw new IOException(\"now failing during flush\");\n          }\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void eval(MockRAMDirectory dir)  throws IOException {\n      if (doFail && Thread.currentThread().getName().equals(\"main\")) {\n        StackTraceElement[] trace = new Exception().getStackTrace();\n        for (int i = 0; i < trace.length; i++) {\n          if (\"doFlush\".equals(trace[i].getMethodName())) {\n            hitExc = true;\n            //new RuntimeException().printStackTrace(System.out);\n            throw new IOException(\"now failing during flush\");\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler.FailOnlyOnFlush#eval(MockRAMDirectory).mjava","pathOld":"src/test/org/apache/lucene/index/TestConcurrentMergeScheduler.FailOnlyOnFlush#eval(MockRAMDirectory).mjava","sourceNew":"    @Override\n    public void eval(MockRAMDirectory dir)  throws IOException {\n      if (doFail && Thread.currentThread().getName().equals(\"main\")) {\n        StackTraceElement[] trace = new Exception().getStackTrace();\n        for (int i = 0; i < trace.length; i++) {\n          if (\"doFlush\".equals(trace[i].getMethodName())) {\n            hitExc = true;\n            throw new IOException(\"now failing during flush\");\n          }\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void eval(MockRAMDirectory dir)  throws IOException {\n      if (doFail && Thread.currentThread().getName().equals(\"main\")) {\n        StackTraceElement[] trace = new Exception().getStackTrace();\n        for (int i = 0; i < trace.length; i++) {\n          if (\"doFlush\".equals(trace[i].getMethodName())) {\n            hitExc = true;\n            throw new IOException(\"now failing during flush\");\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"1326054a8d3aa66382d49decc7f330955c9c6f71":["dd81e8ef0540a4b8eb8c9e013584e1a88f7cce97"],"dd81e8ef0540a4b8eb8c9e013584e1a88f7cce97":["87c966e9308847938a7c905c2e46a56d8df788b8"],"b1405362241b561f5590ff4a87d5d6e173bcd9cf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"42607aa380c892dc1ec0ab26e86a575c28e13618":["1326054a8d3aa66382d49decc7f330955c9c6f71"],"87c966e9308847938a7c905c2e46a56d8df788b8":["b1405362241b561f5590ff4a87d5d6e173bcd9cf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["42607aa380c892dc1ec0ab26e86a575c28e13618"]},"commit2Childs":{"1326054a8d3aa66382d49decc7f330955c9c6f71":["42607aa380c892dc1ec0ab26e86a575c28e13618"],"dd81e8ef0540a4b8eb8c9e013584e1a88f7cce97":["1326054a8d3aa66382d49decc7f330955c9c6f71"],"b1405362241b561f5590ff4a87d5d6e173bcd9cf":["87c966e9308847938a7c905c2e46a56d8df788b8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b1405362241b561f5590ff4a87d5d6e173bcd9cf"],"87c966e9308847938a7c905c2e46a56d8df788b8":["dd81e8ef0540a4b8eb8c9e013584e1a88f7cce97"],"42607aa380c892dc1ec0ab26e86a575c28e13618":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}