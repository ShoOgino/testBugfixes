{"path":"lucene/backwards/src/test/org/apache/lucene/index/TestIndexWriterReader#doTestIndexWriterReopenSegment(boolean).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/index/TestIndexWriterReader#doTestIndexWriterReopenSegment(boolean).mjava","pathOld":"backwards/src/test/org/apache/lucene/index/TestIndexWriterReader#doTestIndexWriterReopenSegment(boolean).mjava","sourceNew":"  /**\n   * Tests creating a segment, then check to insure the segment can be seen via\n   * IW.getReader\n   */\n  public void doTestIndexWriterReopenSegment(boolean optimize) throws Exception {\n    Directory dir1 = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir1, new WhitespaceAnalyzer(),\n        IndexWriter.MaxFieldLength.LIMITED);\n    writer.setInfoStream(infoStream);\n    IndexReader r1 = writer.getReader();\n    assertEquals(0, r1.maxDoc());\n    createIndexNoClose(false, \"index1\", writer);\n    writer.flush(!optimize, true, true);\n\n    IndexReader iwr1 = writer.getReader();\n    assertEquals(100, iwr1.maxDoc());\n\n    IndexReader r2 = writer.getReader();\n    assertEquals(r2.maxDoc(), 100);\n    // add 100 documents\n    for (int x = 10000; x < 10000 + 100; x++) {\n      Document d = createDocument(x, \"index1\", 5);\n      writer.addDocument(d);\n    }\n    writer.flush(false, true, true);\n    // verify the reader was reopened internally\n    IndexReader iwr2 = writer.getReader();\n    assertTrue(iwr2 != r1);\n    assertEquals(200, iwr2.maxDoc());\n    // should have flushed out a segment\n    IndexReader r3 = writer.getReader();\n    assertTrue(r2 != r3);\n    assertEquals(200, r3.maxDoc());\n\n    // dec ref the readers rather than close them because\n    // closing flushes changes to the writer\n    r1.close();\n    iwr1.close();\n    r2.close();\n    r3.close();\n    iwr2.close();\n    writer.close();\n\n    // test whether the changes made it to the directory\n    writer = new IndexWriter(dir1, new WhitespaceAnalyzer(),\n        IndexWriter.MaxFieldLength.LIMITED);\n    IndexReader w2r1 = writer.getReader();\n    // insure the deletes were actually flushed to the directory\n    assertEquals(200, w2r1.maxDoc());\n    w2r1.close();\n    writer.close();\n\n    dir1.close();\n  }\n\n","sourceOld":"  /**\n   * Tests creating a segment, then check to insure the segment can be seen via\n   * IW.getReader\n   */\n  public void doTestIndexWriterReopenSegment(boolean optimize) throws Exception {\n    Directory dir1 = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir1, new WhitespaceAnalyzer(),\n        IndexWriter.MaxFieldLength.LIMITED);\n    writer.setInfoStream(infoStream);\n    IndexReader r1 = writer.getReader();\n    assertEquals(0, r1.maxDoc());\n    createIndexNoClose(false, \"index1\", writer);\n    writer.flush(!optimize, true, true);\n\n    IndexReader iwr1 = writer.getReader();\n    assertEquals(100, iwr1.maxDoc());\n\n    IndexReader r2 = writer.getReader();\n    assertEquals(r2.maxDoc(), 100);\n    // add 100 documents\n    for (int x = 10000; x < 10000 + 100; x++) {\n      Document d = createDocument(x, \"index1\", 5);\n      writer.addDocument(d);\n    }\n    writer.flush(false, true, true);\n    // verify the reader was reopened internally\n    IndexReader iwr2 = writer.getReader();\n    assertTrue(iwr2 != r1);\n    assertEquals(200, iwr2.maxDoc());\n    // should have flushed out a segment\n    IndexReader r3 = writer.getReader();\n    assertTrue(r2 != r3);\n    assertEquals(200, r3.maxDoc());\n\n    // dec ref the readers rather than close them because\n    // closing flushes changes to the writer\n    r1.close();\n    iwr1.close();\n    r2.close();\n    r3.close();\n    iwr2.close();\n    writer.close();\n\n    // test whether the changes made it to the directory\n    writer = new IndexWriter(dir1, new WhitespaceAnalyzer(),\n        IndexWriter.MaxFieldLength.LIMITED);\n    IndexReader w2r1 = writer.getReader();\n    // insure the deletes were actually flushed to the directory\n    assertEquals(200, w2r1.maxDoc());\n    w2r1.close();\n    writer.close();\n\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/test/org/apache/lucene/index/TestIndexWriterReader#doTestIndexWriterReopenSegment(boolean).mjava","sourceNew":null,"sourceOld":"  /**\n   * Tests creating a segment, then check to insure the segment can be seen via\n   * IW.getReader\n   */\n  public void doTestIndexWriterReopenSegment(boolean optimize) throws Exception {\n    Directory dir1 = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir1, new WhitespaceAnalyzer(),\n        IndexWriter.MaxFieldLength.LIMITED);\n    writer.setInfoStream(infoStream);\n    IndexReader r1 = writer.getReader();\n    assertEquals(0, r1.maxDoc());\n    createIndexNoClose(false, \"index1\", writer);\n    writer.flush(!optimize, true, true);\n\n    IndexReader iwr1 = writer.getReader();\n    assertEquals(100, iwr1.maxDoc());\n\n    IndexReader r2 = writer.getReader();\n    assertEquals(r2.maxDoc(), 100);\n    // add 100 documents\n    for (int x = 10000; x < 10000 + 100; x++) {\n      Document d = createDocument(x, \"index1\", 5);\n      writer.addDocument(d);\n    }\n    writer.flush(false, true, true);\n    // verify the reader was reopened internally\n    IndexReader iwr2 = writer.getReader();\n    assertTrue(iwr2 != r1);\n    assertEquals(200, iwr2.maxDoc());\n    // should have flushed out a segment\n    IndexReader r3 = writer.getReader();\n    assertTrue(r2 != r3);\n    assertEquals(200, r3.maxDoc());\n\n    // dec ref the readers rather than close them because\n    // closing flushes changes to the writer\n    r1.close();\n    iwr1.close();\n    r2.close();\n    r3.close();\n    iwr2.close();\n    writer.close();\n\n    // test whether the changes made it to the directory\n    writer = new IndexWriter(dir1, new WhitespaceAnalyzer(),\n        IndexWriter.MaxFieldLength.LIMITED);\n    IndexReader w2r1 = writer.getReader();\n    // insure the deletes were actually flushed to the directory\n    assertEquals(200, w2r1.maxDoc());\n    w2r1.close();\n    writer.close();\n\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}