{"path":"lucene/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestSynonymMapFilter#testDoKeepOrig().mjava","commits":[{"id":"3938e891050232a07c92a8acfa853c5a5e2a8259","date":1348763107,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestSynonymMapFilter#testDoKeepOrig().mjava","pathOld":"/dev/null","sourceNew":"  public void testDoKeepOrig() throws Exception {\n    b = new SynonymMap.Builder(true);\n    add(\"a b\", \"foo\", true);\n\n    final SynonymMap map = b.build();\n\n    final Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.SIMPLE, true);\n        return new TokenStreamComponents(tokenizer, new SynonymFilter(tokenizer, map, false));\n      }\n    };\n\n    assertAnalyzesTo(analyzer, \"a b c\",\n                     new String[] {\"a\", \"foo\", \"b\", \"c\"},\n                     new int[] {0, 0, 2, 4},\n                     new int[] {1, 3, 3, 5},\n                     null,\n                     new int[] {1, 0, 1, 1},\n                     new int[] {1, 2, 1, 1},\n                     true);\n    checkAnalysisConsistency(random(), analyzer, false, \"a b c\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338","date":1389274049,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestSynonymMapFilter#testDoKeepOrig().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestSynonymMapFilter#testDoKeepOrig().mjava","sourceNew":"  public void testDoKeepOrig() throws Exception {\n    b = new SynonymMap.Builder(true);\n    add(\"a b\", \"foo\", true);\n\n    final SynonymMap map = b.build();\n\n    final Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new MockTokenizer(MockTokenizer.SIMPLE, true);\n        return new TokenStreamComponents(tokenizer, new SynonymFilter(tokenizer, map, false));\n      }\n    };\n\n    assertAnalyzesTo(analyzer, \"a b c\",\n                     new String[] {\"a\", \"foo\", \"b\", \"c\"},\n                     new int[] {0, 0, 2, 4},\n                     new int[] {1, 3, 3, 5},\n                     null,\n                     new int[] {1, 0, 1, 1},\n                     new int[] {1, 2, 1, 1},\n                     true);\n    checkAnalysisConsistency(random(), analyzer, false, \"a b c\");\n  }\n\n","sourceOld":"  public void testDoKeepOrig() throws Exception {\n    b = new SynonymMap.Builder(true);\n    add(\"a b\", \"foo\", true);\n\n    final SynonymMap map = b.build();\n\n    final Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.SIMPLE, true);\n        return new TokenStreamComponents(tokenizer, new SynonymFilter(tokenizer, map, false));\n      }\n    };\n\n    assertAnalyzesTo(analyzer, \"a b c\",\n                     new String[] {\"a\", \"foo\", \"b\", \"c\"},\n                     new int[] {0, 0, 2, 4},\n                     new int[] {1, 3, 3, 5},\n                     null,\n                     new int[] {1, 0, 1, 1},\n                     new int[] {1, 2, 1, 1},\n                     true);\n    checkAnalysisConsistency(random(), analyzer, false, \"a b c\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a56958d7f71a28824f20031ffbb2e13502a0274e","date":1425573902,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestSynonymMapFilter#testDoKeepOrig().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestSynonymMapFilter#testDoKeepOrig().mjava","sourceNew":"  public void testDoKeepOrig() throws Exception {\n    b = new SynonymMap.Builder(true);\n    add(\"a b\", \"foo\", true);\n\n    final SynonymMap map = b.build();\n\n    final Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new MockTokenizer(MockTokenizer.SIMPLE, true);\n        return new TokenStreamComponents(tokenizer, new SynonymFilter(tokenizer, map, false));\n      }\n    };\n\n    assertAnalyzesTo(analyzer, \"a b c\",\n                     new String[] {\"a\", \"foo\", \"b\", \"c\"},\n                     new int[] {0, 0, 2, 4},\n                     new int[] {1, 3, 3, 5},\n                     null,\n                     new int[] {1, 0, 1, 1},\n                     new int[] {1, 2, 1, 1},\n                     true);\n    checkAnalysisConsistency(random(), analyzer, false, \"a b c\");\n    analyzer.close();\n  }\n\n","sourceOld":"  public void testDoKeepOrig() throws Exception {\n    b = new SynonymMap.Builder(true);\n    add(\"a b\", \"foo\", true);\n\n    final SynonymMap map = b.build();\n\n    final Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new MockTokenizer(MockTokenizer.SIMPLE, true);\n        return new TokenStreamComponents(tokenizer, new SynonymFilter(tokenizer, map, false));\n      }\n    };\n\n    assertAnalyzesTo(analyzer, \"a b c\",\n                     new String[] {\"a\", \"foo\", \"b\", \"c\"},\n                     new int[] {0, 0, 2, 4},\n                     new int[] {1, 3, 3, 5},\n                     null,\n                     new int[] {1, 0, 1, 1},\n                     new int[] {1, 2, 1, 1},\n                     true);\n    checkAnalysisConsistency(random(), analyzer, false, \"a b c\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestSynonymMapFilter#testDoKeepOrig().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestSynonymMapFilter#testDoKeepOrig().mjava","sourceNew":"  public void testDoKeepOrig() throws Exception {\n    b = new SynonymMap.Builder(true);\n    add(\"a b\", \"foo\", true);\n\n    final SynonymMap map = b.build();\n\n    final Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new MockTokenizer(MockTokenizer.SIMPLE, true);\n        return new TokenStreamComponents(tokenizer, new SynonymFilter(tokenizer, map, false));\n      }\n    };\n\n    assertAnalyzesTo(analyzer, \"a b c\",\n                     new String[] {\"a\", \"foo\", \"b\", \"c\"},\n                     new int[] {0, 0, 2, 4},\n                     new int[] {1, 3, 3, 5},\n                     null,\n                     new int[] {1, 0, 1, 1},\n                     new int[] {1, 2, 1, 1},\n                     true);\n    checkAnalysisConsistency(random(), analyzer, false, \"a b c\");\n    analyzer.close();\n  }\n\n","sourceOld":"  public void testDoKeepOrig() throws Exception {\n    b = new SynonymMap.Builder(true);\n    add(\"a b\", \"foo\", true);\n\n    final SynonymMap map = b.build();\n\n    final Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new MockTokenizer(MockTokenizer.SIMPLE, true);\n        return new TokenStreamComponents(tokenizer, new SynonymFilter(tokenizer, map, false));\n      }\n    };\n\n    assertAnalyzesTo(analyzer, \"a b c\",\n                     new String[] {\"a\", \"foo\", \"b\", \"c\"},\n                     new int[] {0, 0, 2, 4},\n                     new int[] {1, 3, 3, 5},\n                     null,\n                     new int[] {1, 0, 1, 1},\n                     new int[] {1, 2, 1, 1},\n                     true);\n    checkAnalysisConsistency(random(), analyzer, false, \"a b c\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["ae889fd5c8a69f6b5d130d3c895bfa5b04d07338","a56958d7f71a28824f20031ffbb2e13502a0274e"],"3938e891050232a07c92a8acfa853c5a5e2a8259":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338":["3938e891050232a07c92a8acfa853c5a5e2a8259"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a56958d7f71a28824f20031ffbb2e13502a0274e":["ae889fd5c8a69f6b5d130d3c895bfa5b04d07338"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a56958d7f71a28824f20031ffbb2e13502a0274e"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"3938e891050232a07c92a8acfa853c5a5e2a8259":["ae889fd5c8a69f6b5d130d3c895bfa5b04d07338"],"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","a56958d7f71a28824f20031ffbb2e13502a0274e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3938e891050232a07c92a8acfa853c5a5e2a8259"],"a56958d7f71a28824f20031ffbb2e13502a0274e":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}