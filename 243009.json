{"path":"solr/core/src/java/org/apache/solr/util/SimplePostTool#SimplePostTool(String,URL,boolean,String,int,int,String,OutputStream,boolean,boolean,String[]).mjava","commits":[{"id":"c2c3a504730329ae644b009dee43024116605d47","date":1345253449,"type":0,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SimplePostTool#SimplePostTool(String,URL,boolean,String,int,int,String,OutputStream,boolean,boolean,String[]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Constructor which takes in all mandatory input for the tool to work.\n   * Also see {@link #usage()} for further explanation of the params.\n   * @param mode whether to post files, web pages, params or stdin\n   * @param url the Solr base Url to post to, should end with /update\n   * @param auto if true, we'll guess type and add resourcename/url\n   * @param type content-type of the data you are posting\n   * @param recursive number of levels for file/web mode, or 0 if one file only\n   * @param delay if recursive then delay will be the wait time between posts\n   * @param fileTypes a comma separated list of file-name endings to accept for file/web\n   * @param out an OutputStream to write output to, e.g. stdout to print to console\n   * @param commit if true, will commit at end of posting\n   * @param optimize if true, will optimize at end of posting\n   * @param args a String[] of arguments, varies between modes\n   */\n  public SimplePostTool(String mode, URL url, boolean auto, String type,\n      int recursive, int delay, String fileTypes, OutputStream out, \n      boolean commit, boolean optimize, String[] args) {\n    this.mode = mode;\n    this.solrUrl = url;\n    this.auto = auto;\n    this.type = type;\n    this.recursive = recursive;\n    this.delay = delay;\n    this.fileTypes = fileTypes;\n    this.globFileFilter = getFileFilterFromFileTypes(fileTypes);\n    this.out = out;\n    this.commit = commit;\n    this.optimize = optimize;\n    this.args = args;\n    pageFetcher = new PageFetcher();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["38f05daa6146d75507d970167918490315a71643"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"38f05daa6146d75507d970167918490315a71643","date":1345285611,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SimplePostTool#SimplePostTool(String,URL,boolean,String,int,int,String,OutputStream,boolean,boolean,String[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SimplePostTool#SimplePostTool(String,URL,boolean,String,int,int,String,OutputStream,boolean,boolean,String[]).mjava","sourceNew":"  /**\n   * Constructor which takes in all mandatory input for the tool to work.\n   * Also see usage() for further explanation of the params.\n   * @param mode whether to post files, web pages, params or stdin\n   * @param url the Solr base Url to post to, should end with /update\n   * @param auto if true, we'll guess type and add resourcename/url\n   * @param type content-type of the data you are posting\n   * @param recursive number of levels for file/web mode, or 0 if one file only\n   * @param delay if recursive then delay will be the wait time between posts\n   * @param fileTypes a comma separated list of file-name endings to accept for file/web\n   * @param out an OutputStream to write output to, e.g. stdout to print to console\n   * @param commit if true, will commit at end of posting\n   * @param optimize if true, will optimize at end of posting\n   * @param args a String[] of arguments, varies between modes\n   */\n  public SimplePostTool(String mode, URL url, boolean auto, String type,\n      int recursive, int delay, String fileTypes, OutputStream out, \n      boolean commit, boolean optimize, String[] args) {\n    this.mode = mode;\n    this.solrUrl = url;\n    this.auto = auto;\n    this.type = type;\n    this.recursive = recursive;\n    this.delay = delay;\n    this.fileTypes = fileTypes;\n    this.globFileFilter = getFileFilterFromFileTypes(fileTypes);\n    this.out = out;\n    this.commit = commit;\n    this.optimize = optimize;\n    this.args = args;\n    pageFetcher = new PageFetcher();\n  }\n\n","sourceOld":"  /**\n   * Constructor which takes in all mandatory input for the tool to work.\n   * Also see {@link #usage()} for further explanation of the params.\n   * @param mode whether to post files, web pages, params or stdin\n   * @param url the Solr base Url to post to, should end with /update\n   * @param auto if true, we'll guess type and add resourcename/url\n   * @param type content-type of the data you are posting\n   * @param recursive number of levels for file/web mode, or 0 if one file only\n   * @param delay if recursive then delay will be the wait time between posts\n   * @param fileTypes a comma separated list of file-name endings to accept for file/web\n   * @param out an OutputStream to write output to, e.g. stdout to print to console\n   * @param commit if true, will commit at end of posting\n   * @param optimize if true, will optimize at end of posting\n   * @param args a String[] of arguments, varies between modes\n   */\n  public SimplePostTool(String mode, URL url, boolean auto, String type,\n      int recursive, int delay, String fileTypes, OutputStream out, \n      boolean commit, boolean optimize, String[] args) {\n    this.mode = mode;\n    this.solrUrl = url;\n    this.auto = auto;\n    this.type = type;\n    this.recursive = recursive;\n    this.delay = delay;\n    this.fileTypes = fileTypes;\n    this.globFileFilter = getFileFilterFromFileTypes(fileTypes);\n    this.out = out;\n    this.commit = commit;\n    this.optimize = optimize;\n    this.args = args;\n    pageFetcher = new PageFetcher();\n  }\n\n","bugFix":["c2c3a504730329ae644b009dee43024116605d47"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70fa1c0f4d75735ff2e1485e059d9bc5efa50598","date":1345296911,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SimplePostTool#SimplePostTool(String,URL,boolean,String,int,int,String,OutputStream,boolean,boolean,String[]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Constructor which takes in all mandatory input for the tool to work.\n   * Also see usage() for further explanation of the params.\n   * @param mode whether to post files, web pages, params or stdin\n   * @param url the Solr base Url to post to, should end with /update\n   * @param auto if true, we'll guess type and add resourcename/url\n   * @param type content-type of the data you are posting\n   * @param recursive number of levels for file/web mode, or 0 if one file only\n   * @param delay if recursive then delay will be the wait time between posts\n   * @param fileTypes a comma separated list of file-name endings to accept for file/web\n   * @param out an OutputStream to write output to, e.g. stdout to print to console\n   * @param commit if true, will commit at end of posting\n   * @param optimize if true, will optimize at end of posting\n   * @param args a String[] of arguments, varies between modes\n   */\n  public SimplePostTool(String mode, URL url, boolean auto, String type,\n      int recursive, int delay, String fileTypes, OutputStream out, \n      boolean commit, boolean optimize, String[] args) {\n    this.mode = mode;\n    this.solrUrl = url;\n    this.auto = auto;\n    this.type = type;\n    this.recursive = recursive;\n    this.delay = delay;\n    this.fileTypes = fileTypes;\n    this.globFileFilter = getFileFilterFromFileTypes(fileTypes);\n    this.out = out;\n    this.commit = commit;\n    this.optimize = optimize;\n    this.args = args;\n    pageFetcher = new PageFetcher();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"616c1830142ff5c1ddedec1ed898733b73c8e23b","date":1345368925,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SimplePostTool#SimplePostTool(String,URL,boolean,String,int,int,String,OutputStream,boolean,boolean,String[]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Constructor which takes in all mandatory input for the tool to work.\n   * Also see usage() for further explanation of the params.\n   * @param mode whether to post files, web pages, params or stdin\n   * @param url the Solr base Url to post to, should end with /update\n   * @param auto if true, we'll guess type and add resourcename/url\n   * @param type content-type of the data you are posting\n   * @param recursive number of levels for file/web mode, or 0 if one file only\n   * @param delay if recursive then delay will be the wait time between posts\n   * @param fileTypes a comma separated list of file-name endings to accept for file/web\n   * @param out an OutputStream to write output to, e.g. stdout to print to console\n   * @param commit if true, will commit at end of posting\n   * @param optimize if true, will optimize at end of posting\n   * @param args a String[] of arguments, varies between modes\n   */\n  public SimplePostTool(String mode, URL url, boolean auto, String type,\n      int recursive, int delay, String fileTypes, OutputStream out, \n      boolean commit, boolean optimize, String[] args) {\n    this.mode = mode;\n    this.solrUrl = url;\n    this.auto = auto;\n    this.type = type;\n    this.recursive = recursive;\n    this.delay = delay;\n    this.fileTypes = fileTypes;\n    this.globFileFilter = getFileFilterFromFileTypes(fileTypes);\n    this.out = out;\n    this.commit = commit;\n    this.optimize = optimize;\n    this.args = args;\n    pageFetcher = new PageFetcher();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0fd5e2f2d54cd12e37ff023454d6869673fd9e4","date":1448325266,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SimplePostTool#SimplePostTool(String,URL,boolean,String,int,int,String,OutputStream,boolean,boolean,String[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SimplePostTool#SimplePostTool(String,URL,boolean,String,int,int,String,OutputStream,boolean,boolean,String[]).mjava","sourceNew":"  /**\n   * Constructor which takes in all mandatory input for the tool to work.\n   * Also see usage() for further explanation of the params.\n   * @param mode whether to post files, web pages, params or stdin\n   * @param url the Solr base Url to post to, should end with /update\n   * @param auto if true, we'll guess type and add resourcename/url\n   * @param type content-type of the data you are posting\n   * @param recursive number of levels for file/web mode, or 0 if one file only\n   * @param delay if recursive then delay will be the wait time between posts\n   * @param fileTypes a comma separated list of file-name endings to accept for file/web\n   * @param out an OutputStream to write output to, e.g. stdout to print to console\n   * @param commit if true, will commit at end of posting\n   * @param optimize if true, will optimize at end of posting\n   * @param args a String[] of arguments, varies between modes\n   */\n  public SimplePostTool(String mode, URL url, boolean auto, String type,\n      int recursive, int delay, String fileTypes, OutputStream out, \n      boolean commit, boolean optimize, String[] args) {\n    this.mode = mode;\n    this.solrUrl = url;\n    this.auto = auto;\n    this.type = type;\n    this.recursive = recursive;\n    this.delay = delay;\n    this.fileTypes = fileTypes;\n    this.fileFilter = getFileFilterFromFileTypes(fileTypes);\n    this.out = out;\n    this.commit = commit;\n    this.optimize = optimize;\n    this.args = args;\n    pageFetcher = new PageFetcher();\n  }\n\n","sourceOld":"  /**\n   * Constructor which takes in all mandatory input for the tool to work.\n   * Also see usage() for further explanation of the params.\n   * @param mode whether to post files, web pages, params or stdin\n   * @param url the Solr base Url to post to, should end with /update\n   * @param auto if true, we'll guess type and add resourcename/url\n   * @param type content-type of the data you are posting\n   * @param recursive number of levels for file/web mode, or 0 if one file only\n   * @param delay if recursive then delay will be the wait time between posts\n   * @param fileTypes a comma separated list of file-name endings to accept for file/web\n   * @param out an OutputStream to write output to, e.g. stdout to print to console\n   * @param commit if true, will commit at end of posting\n   * @param optimize if true, will optimize at end of posting\n   * @param args a String[] of arguments, varies between modes\n   */\n  public SimplePostTool(String mode, URL url, boolean auto, String type,\n      int recursive, int delay, String fileTypes, OutputStream out, \n      boolean commit, boolean optimize, String[] args) {\n    this.mode = mode;\n    this.solrUrl = url;\n    this.auto = auto;\n    this.type = type;\n    this.recursive = recursive;\n    this.delay = delay;\n    this.fileTypes = fileTypes;\n    this.globFileFilter = getFileFilterFromFileTypes(fileTypes);\n    this.out = out;\n    this.commit = commit;\n    this.optimize = optimize;\n    this.args = args;\n    pageFetcher = new PageFetcher();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ed1f5038d985eaf26ae779edc703a309549ac24","date":1452367821,"type":5,"author":"Erik Hatcher","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SimplePostTool#SimplePostTool(String,URL,boolean,String,String,int,int,String,OutputStream,boolean,boolean,String[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SimplePostTool#SimplePostTool(String,URL,boolean,String,int,int,String,OutputStream,boolean,boolean,String[]).mjava","sourceNew":"  /**\n   * Constructor which takes in all mandatory input for the tool to work.\n   * Also see usage() for further explanation of the params.\n   * @param mode whether to post files, web pages, params or stdin\n   * @param url the Solr base Url to post to, should end with /update\n   * @param auto if true, we'll guess type and add resourcename/url\n   * @param type content-type of the data you are posting\n   * @param recursive number of levels for file/web mode, or 0 if one file only\n   * @param delay if recursive then delay will be the wait time between posts\n   * @param fileTypes a comma separated list of file-name endings to accept for file/web\n   * @param out an OutputStream to write output to, e.g. stdout to print to console\n   * @param commit if true, will commit at end of posting\n   * @param optimize if true, will optimize at end of posting\n   * @param args a String[] of arguments, varies between modes\n   */\n  public SimplePostTool(String mode, URL url, boolean auto, String type, String format,\n      int recursive, int delay, String fileTypes, OutputStream out, \n      boolean commit, boolean optimize, String[] args) {\n    this.mode = mode;\n    this.solrUrl = url;\n    this.auto = auto;\n    this.type = type;\n    this.format = format;\n    this.recursive = recursive;\n    this.delay = delay;\n    this.fileTypes = fileTypes;\n    this.fileFilter = getFileFilterFromFileTypes(fileTypes);\n    this.out = out;\n    this.commit = commit;\n    this.optimize = optimize;\n    this.args = args;\n    pageFetcher = new PageFetcher();\n  }\n\n","sourceOld":"  /**\n   * Constructor which takes in all mandatory input for the tool to work.\n   * Also see usage() for further explanation of the params.\n   * @param mode whether to post files, web pages, params or stdin\n   * @param url the Solr base Url to post to, should end with /update\n   * @param auto if true, we'll guess type and add resourcename/url\n   * @param type content-type of the data you are posting\n   * @param recursive number of levels for file/web mode, or 0 if one file only\n   * @param delay if recursive then delay will be the wait time between posts\n   * @param fileTypes a comma separated list of file-name endings to accept for file/web\n   * @param out an OutputStream to write output to, e.g. stdout to print to console\n   * @param commit if true, will commit at end of posting\n   * @param optimize if true, will optimize at end of posting\n   * @param args a String[] of arguments, varies between modes\n   */\n  public SimplePostTool(String mode, URL url, boolean auto, String type,\n      int recursive, int delay, String fileTypes, OutputStream out, \n      boolean commit, boolean optimize, String[] args) {\n    this.mode = mode;\n    this.solrUrl = url;\n    this.auto = auto;\n    this.type = type;\n    this.recursive = recursive;\n    this.delay = delay;\n    this.fileTypes = fileTypes;\n    this.fileFilter = getFileFilterFromFileTypes(fileTypes);\n    this.out = out;\n    this.commit = commit;\n    this.optimize = optimize;\n    this.args = args;\n    pageFetcher = new PageFetcher();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4ed1f5038d985eaf26ae779edc703a309549ac24":["a0fd5e2f2d54cd12e37ff023454d6869673fd9e4"],"38f05daa6146d75507d970167918490315a71643":["c2c3a504730329ae644b009dee43024116605d47"],"616c1830142ff5c1ddedec1ed898733b73c8e23b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","38f05daa6146d75507d970167918490315a71643"],"a0fd5e2f2d54cd12e37ff023454d6869673fd9e4":["38f05daa6146d75507d970167918490315a71643"],"70fa1c0f4d75735ff2e1485e059d9bc5efa50598":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","38f05daa6146d75507d970167918490315a71643"],"c2c3a504730329ae644b009dee43024116605d47":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4ed1f5038d985eaf26ae779edc703a309549ac24"]},"commit2Childs":{"4ed1f5038d985eaf26ae779edc703a309549ac24":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"38f05daa6146d75507d970167918490315a71643":["616c1830142ff5c1ddedec1ed898733b73c8e23b","a0fd5e2f2d54cd12e37ff023454d6869673fd9e4","70fa1c0f4d75735ff2e1485e059d9bc5efa50598"],"616c1830142ff5c1ddedec1ed898733b73c8e23b":[],"a0fd5e2f2d54cd12e37ff023454d6869673fd9e4":["4ed1f5038d985eaf26ae779edc703a309549ac24"],"70fa1c0f4d75735ff2e1485e059d9bc5efa50598":[],"c2c3a504730329ae644b009dee43024116605d47":["38f05daa6146d75507d970167918490315a71643"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["616c1830142ff5c1ddedec1ed898733b73c8e23b","70fa1c0f4d75735ff2e1485e059d9bc5efa50598","c2c3a504730329ae644b009dee43024116605d47"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["616c1830142ff5c1ddedec1ed898733b73c8e23b","70fa1c0f4d75735ff2e1485e059d9bc5efa50598","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}