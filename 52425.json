{"path":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#moveIndexFiles(Directory,Directory).mjava","commits":[{"id":"20f6b7cff3771384f27af0f059795d7e64aff6b9","date":1425498309,"type":1,"author":"Ramkumar Aiyengar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#moveIndexFiles(Directory,Directory).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller#moveIndexFiles(Directory,Directory).mjava","sourceNew":"  /**\n   * Copy all index files from the temp index dir to the actual index. The segments_N file is copied last.\n   */\n  private boolean moveIndexFiles(Directory tmpIdxDir, Directory indexDir) {\n    if (LOG.isDebugEnabled()) {\n      try {\n        LOG.info(\"From dir files:\" + Arrays.asList(tmpIdxDir.listAll()));\n        LOG.info(\"To dir files:\" + Arrays.asList(indexDir.listAll()));\n      } catch (IOException e) {\n        throw new RuntimeException(e);\n      }\n    }\n    String segmentsFile = null;\n    for (Map<String, Object> f : filesDownloaded) {\n      String fname = (String) f.get(NAME);\n      // the segments file must be copied last\n      // or else if there is a failure in between the\n      // index will be corrupted\n      if (fname.startsWith(\"segments_\")) {\n        //The segments file must be copied in the end\n        //Otherwise , if the copy fails index ends up corrupted\n        segmentsFile = fname;\n        continue;\n      }\n      if (!moveAFile(tmpIdxDir, indexDir, fname)) return false;\n    }\n    //copy the segments file last\n    if (segmentsFile != null) {\n      if (!moveAFile(tmpIdxDir, indexDir, segmentsFile)) return false;\n    }\n    return true;\n  }\n\n","sourceOld":"  /**\n   * Copy all index files from the temp index dir to the actual index. The segments_N file is copied last.\n   */\n  private boolean moveIndexFiles(Directory tmpIdxDir, Directory indexDir) {\n    if (LOG.isDebugEnabled()) {\n      try {\n        LOG.info(\"From dir files:\" + Arrays.asList(tmpIdxDir.listAll()));\n        LOG.info(\"To dir files:\" + Arrays.asList(indexDir.listAll()));\n      } catch (IOException e) {\n        throw new RuntimeException(e);\n      }\n    }\n    String segmentsFile = null;\n    for (Map<String, Object> f : filesDownloaded) {\n      String fname = (String) f.get(NAME);\n      // the segments file must be copied last\n      // or else if there is a failure in between the\n      // index will be corrupted\n      if (fname.startsWith(\"segments_\")) {\n        //The segments file must be copied in the end\n        //Otherwise , if the copy fails index ends up corrupted\n        segmentsFile = fname;\n        continue;\n      }\n      if (!moveAFile(tmpIdxDir, indexDir, fname)) return false;\n    }\n    //copy the segments file last\n    if (segmentsFile != null) {\n      if (!moveAFile(tmpIdxDir, indexDir, segmentsFile)) return false;\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":1,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#moveIndexFiles(Directory,Directory).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller#moveIndexFiles(Directory,Directory).mjava","sourceNew":"  /**\n   * Copy all index files from the temp index dir to the actual index. The segments_N file is copied last.\n   */\n  private boolean moveIndexFiles(Directory tmpIdxDir, Directory indexDir) {\n    if (LOG.isDebugEnabled()) {\n      try {\n        LOG.info(\"From dir files:\" + Arrays.asList(tmpIdxDir.listAll()));\n        LOG.info(\"To dir files:\" + Arrays.asList(indexDir.listAll()));\n      } catch (IOException e) {\n        throw new RuntimeException(e);\n      }\n    }\n    String segmentsFile = null;\n    for (Map<String, Object> f : filesDownloaded) {\n      String fname = (String) f.get(NAME);\n      // the segments file must be copied last\n      // or else if there is a failure in between the\n      // index will be corrupted\n      if (fname.startsWith(\"segments_\")) {\n        //The segments file must be copied in the end\n        //Otherwise , if the copy fails index ends up corrupted\n        segmentsFile = fname;\n        continue;\n      }\n      if (!moveAFile(tmpIdxDir, indexDir, fname)) return false;\n    }\n    //copy the segments file last\n    if (segmentsFile != null) {\n      if (!moveAFile(tmpIdxDir, indexDir, segmentsFile)) return false;\n    }\n    return true;\n  }\n\n","sourceOld":"  /**\n   * Copy all index files from the temp index dir to the actual index. The segments_N file is copied last.\n   */\n  private boolean moveIndexFiles(Directory tmpIdxDir, Directory indexDir) {\n    if (LOG.isDebugEnabled()) {\n      try {\n        LOG.info(\"From dir files:\" + Arrays.asList(tmpIdxDir.listAll()));\n        LOG.info(\"To dir files:\" + Arrays.asList(indexDir.listAll()));\n      } catch (IOException e) {\n        throw new RuntimeException(e);\n      }\n    }\n    String segmentsFile = null;\n    for (Map<String, Object> f : filesDownloaded) {\n      String fname = (String) f.get(NAME);\n      // the segments file must be copied last\n      // or else if there is a failure in between the\n      // index will be corrupted\n      if (fname.startsWith(\"segments_\")) {\n        //The segments file must be copied in the end\n        //Otherwise , if the copy fails index ends up corrupted\n        segmentsFile = fname;\n        continue;\n      }\n      if (!moveAFile(tmpIdxDir, indexDir, fname)) return false;\n    }\n    //copy the segments file last\n    if (segmentsFile != null) {\n      if (!moveAFile(tmpIdxDir, indexDir, segmentsFile)) return false;\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd","date":1534976797,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#moveIndexFiles(Directory,Directory).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#moveIndexFiles(Directory,Directory).mjava","sourceNew":"  /**\n   * Copy all index files from the temp index dir to the actual index. The segments_N file is copied last.\n   */\n  private boolean moveIndexFiles(Directory tmpIdxDir, Directory indexDir) {\n    if (log.isDebugEnabled()) {\n      try {\n        log.info(\"From dir files:\" + Arrays.asList(tmpIdxDir.listAll()));\n        log.info(\"To dir files:\" + Arrays.asList(indexDir.listAll()));\n      } catch (IOException e) {\n        throw new RuntimeException(e);\n      }\n    }\n    String segmentsFile = null;\n    for (Map<String, Object> f : filesDownloaded) {\n      String fname = (String) f.get(NAME);\n      // the segments file must be copied last\n      // or else if there is a failure in between the\n      // index will be corrupted\n      if (fname.startsWith(\"segments_\")) {\n        //The segments file must be copied in the end\n        //Otherwise , if the copy fails index ends up corrupted\n        segmentsFile = fname;\n        continue;\n      }\n      if (!moveAFile(tmpIdxDir, indexDir, fname)) return false;\n    }\n    //copy the segments file last\n    if (segmentsFile != null) {\n      if (!moveAFile(tmpIdxDir, indexDir, segmentsFile)) return false;\n    }\n    return true;\n  }\n\n","sourceOld":"  /**\n   * Copy all index files from the temp index dir to the actual index. The segments_N file is copied last.\n   */\n  private boolean moveIndexFiles(Directory tmpIdxDir, Directory indexDir) {\n    if (LOG.isDebugEnabled()) {\n      try {\n        LOG.info(\"From dir files:\" + Arrays.asList(tmpIdxDir.listAll()));\n        LOG.info(\"To dir files:\" + Arrays.asList(indexDir.listAll()));\n      } catch (IOException e) {\n        throw new RuntimeException(e);\n      }\n    }\n    String segmentsFile = null;\n    for (Map<String, Object> f : filesDownloaded) {\n      String fname = (String) f.get(NAME);\n      // the segments file must be copied last\n      // or else if there is a failure in between the\n      // index will be corrupted\n      if (fname.startsWith(\"segments_\")) {\n        //The segments file must be copied in the end\n        //Otherwise , if the copy fails index ends up corrupted\n        segmentsFile = fname;\n        continue;\n      }\n      if (!moveAFile(tmpIdxDir, indexDir, fname)) return false;\n    }\n    //copy the segments file last\n    if (segmentsFile != null) {\n      if (!moveAFile(tmpIdxDir, indexDir, segmentsFile)) return false;\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4","date":1588172214,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#moveIndexFiles(Directory,Directory).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#moveIndexFiles(Directory,Directory).mjava","sourceNew":"  /**\n   * Copy all index files from the temp index dir to the actual index. The segments_N file is copied last.\n   */\n  private boolean moveIndexFiles(Directory tmpIdxDir, Directory indexDir) {\n    if (log.isDebugEnabled()) {\n      try {\n        if (log.isInfoEnabled()) {\n          log.info(\"From dir files: {}\", Arrays.asList(tmpIdxDir.listAll()));\n          log.info(\"To dir files: {}\", Arrays.asList(indexDir.listAll())); //logOk\n        }\n      } catch (IOException e) {\n        throw new RuntimeException(e);\n      }\n    }\n    String segmentsFile = null;\n    for (Map<String, Object> f : filesDownloaded) {\n      String fname = (String) f.get(NAME);\n      // the segments file must be copied last\n      // or else if there is a failure in between the\n      // index will be corrupted\n      if (fname.startsWith(\"segments_\")) {\n        //The segments file must be copied in the end\n        //Otherwise , if the copy fails index ends up corrupted\n        segmentsFile = fname;\n        continue;\n      }\n      if (!moveAFile(tmpIdxDir, indexDir, fname)) return false;\n    }\n    //copy the segments file last\n    if (segmentsFile != null) {\n      if (!moveAFile(tmpIdxDir, indexDir, segmentsFile)) return false;\n    }\n    return true;\n  }\n\n","sourceOld":"  /**\n   * Copy all index files from the temp index dir to the actual index. The segments_N file is copied last.\n   */\n  private boolean moveIndexFiles(Directory tmpIdxDir, Directory indexDir) {\n    if (log.isDebugEnabled()) {\n      try {\n        log.info(\"From dir files:\" + Arrays.asList(tmpIdxDir.listAll()));\n        log.info(\"To dir files:\" + Arrays.asList(indexDir.listAll()));\n      } catch (IOException e) {\n        throw new RuntimeException(e);\n      }\n    }\n    String segmentsFile = null;\n    for (Map<String, Object> f : filesDownloaded) {\n      String fname = (String) f.get(NAME);\n      // the segments file must be copied last\n      // or else if there is a failure in between the\n      // index will be corrupted\n      if (fname.startsWith(\"segments_\")) {\n        //The segments file must be copied in the end\n        //Otherwise , if the copy fails index ends up corrupted\n        segmentsFile = fname;\n        continue;\n      }\n      if (!moveAFile(tmpIdxDir, indexDir, fname)) return false;\n    }\n    //copy the segments file last\n    if (segmentsFile != null) {\n      if (!moveAFile(tmpIdxDir, indexDir, segmentsFile)) return false;\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b2d19164145b2a65acf62a657c75f4a249b649c0","date":1601732857,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#moveIndexFiles(Directory,Directory).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#moveIndexFiles(Directory,Directory).mjava","sourceNew":"  /**\n   * Copy all index files from the temp index dir to the actual index. The segments_N file is copied last.\n   */\n  private boolean moveIndexFiles(Directory tmpIdxDir, Directory indexDir) {\n    if (log.isDebugEnabled()) {\n      try {\n        if (log.isInfoEnabled()) {\n          log.info(\"From dir files: {}\", Arrays.asList(tmpIdxDir.listAll()));\n          log.info(\"To dir files: {}\", Arrays.asList(indexDir.listAll())); //nowarn\n        }\n      } catch (IOException e) {\n        throw new RuntimeException(e);\n      }\n    }\n    String segmentsFile = null;\n    for (Map<String, Object> f : filesDownloaded) {\n      String fname = (String) f.get(NAME);\n      // the segments file must be copied last\n      // or else if there is a failure in between the\n      // index will be corrupted\n      if (fname.startsWith(\"segments_\")) {\n        //The segments file must be copied in the end\n        //Otherwise , if the copy fails index ends up corrupted\n        segmentsFile = fname;\n        continue;\n      }\n      if (!moveAFile(tmpIdxDir, indexDir, fname)) return false;\n    }\n    //copy the segments file last\n    if (segmentsFile != null) {\n      if (!moveAFile(tmpIdxDir, indexDir, segmentsFile)) return false;\n    }\n    return true;\n  }\n\n","sourceOld":"  /**\n   * Copy all index files from the temp index dir to the actual index. The segments_N file is copied last.\n   */\n  private boolean moveIndexFiles(Directory tmpIdxDir, Directory indexDir) {\n    if (log.isDebugEnabled()) {\n      try {\n        if (log.isInfoEnabled()) {\n          log.info(\"From dir files: {}\", Arrays.asList(tmpIdxDir.listAll()));\n          log.info(\"To dir files: {}\", Arrays.asList(indexDir.listAll())); //logOk\n        }\n      } catch (IOException e) {\n        throw new RuntimeException(e);\n      }\n    }\n    String segmentsFile = null;\n    for (Map<String, Object> f : filesDownloaded) {\n      String fname = (String) f.get(NAME);\n      // the segments file must be copied last\n      // or else if there is a failure in between the\n      // index will be corrupted\n      if (fname.startsWith(\"segments_\")) {\n        //The segments file must be copied in the end\n        //Otherwise , if the copy fails index ends up corrupted\n        segmentsFile = fname;\n        continue;\n      }\n      if (!moveAFile(tmpIdxDir, indexDir, fname)) return false;\n    }\n    //copy the segments file last\n    if (segmentsFile != null) {\n      if (!moveAFile(tmpIdxDir, indexDir, segmentsFile)) return false;\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","20f6b7cff3771384f27af0f059795d7e64aff6b9"],"20f6b7cff3771384f27af0f059795d7e64aff6b9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b2d19164145b2a65acf62a657c75f4a249b649c0":["fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b2d19164145b2a65acf62a657c75f4a249b649c0"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["20f6b7cff3771384f27af0f059795d7e64aff6b9"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"20f6b7cff3771384f27af0f059795d7e64aff6b9":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","20f6b7cff3771384f27af0f059795d7e64aff6b9"],"fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4":["b2d19164145b2a65acf62a657c75f4a249b649c0"],"b2d19164145b2a65acf62a657c75f4a249b649c0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}