{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/graph/ShortestPathStream#ShortestPathStream(StreamExpression,StreamFactory).mjava","commits":[{"id":"9a7edeee192980cdc45735957606fc0dbf22d437","date":1459455891,"type":0,"author":"jbernste","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/graph/ShortestPathStream#ShortestPathStream(StreamExpression,StreamFactory).mjava","pathOld":"/dev/null","sourceNew":"  public ShortestPathStream(StreamExpression expression, StreamFactory factory) throws IOException {\n\n    String collectionName = factory.getValueOperand(expression, 0);\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n\n    // Collection Name\n    if(null == collectionName) {\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - collectionName expected as first operand\",expression));\n    }\n\n    String fromNode = null;\n    StreamExpressionNamedParameter fromExpression = factory.getNamedOperand(expression, \"from\");\n\n    if(fromExpression == null) {\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - from param is required\",expression));\n    } else {\n      fromNode = ((StreamExpressionValue)fromExpression.getParameter()).getValue();\n    }\n\n    String toNode = null;\n    StreamExpressionNamedParameter toExpression = factory.getNamedOperand(expression, \"to\");\n\n    if(toExpression == null) {\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - to param is required\", expression));\n    } else {\n      toNode = ((StreamExpressionValue)toExpression.getParameter()).getValue();\n    }\n\n    String fromField = null;\n    String toField = null;\n\n    StreamExpressionNamedParameter edgeExpression = factory.getNamedOperand(expression, \"edge\");\n\n    if(edgeExpression == null) {\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - edge param is required\", expression));\n    } else {\n      String edge = ((StreamExpressionValue)edgeExpression.getParameter()).getValue();\n      String[] fields = edge.split(\"=\");\n      if(fields.length != 2) {\n        throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - edge param separated by and = and must contain two fields\", expression));\n      }\n      fromField = fields[0].trim();\n      toField = fields[1].trim();\n    }\n\n    int threads = 6;\n\n    StreamExpressionNamedParameter threadsExpression = factory.getNamedOperand(expression, \"threads\");\n\n    if(threadsExpression != null) {\n      threads = Integer.parseInt(((StreamExpressionValue)threadsExpression.getParameter()).getValue());\n    }\n\n    int partitionSize = 250;\n\n    StreamExpressionNamedParameter partitionExpression = factory.getNamedOperand(expression, \"partitionSize\");\n\n    if(partitionExpression != null) {\n      partitionSize = Integer.parseInt(((StreamExpressionValue)partitionExpression.getParameter()).getValue());\n    }\n\n    int maxDepth = 0;\n\n    StreamExpressionNamedParameter depthExpression = factory.getNamedOperand(expression, \"maxDepth\");\n\n    if(depthExpression == null) {\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - maxDepth param is required\", expression));\n    } else {\n      maxDepth = Integer.parseInt(((StreamExpressionValue) depthExpression.getParameter()).getValue());\n    }\n\n    Map<String,String> params = new HashMap<String,String>();\n    for(StreamExpressionNamedParameter namedParam : namedParams){\n      if(!namedParam.getName().equals(\"zkHost\") &&\n          !namedParam.getName().equals(\"to\") &&\n          !namedParam.getName().equals(\"from\") &&\n          !namedParam.getName().equals(\"edge\") &&\n          !namedParam.getName().equals(\"maxDepth\") &&\n          !namedParam.getName().equals(\"threads\") &&\n          !namedParam.getName().equals(\"partitionSize\"))\n      {\n        params.put(namedParam.getName(), namedParam.getParameter().toString().trim());\n      }\n    }\n\n    // zkHost, optional - if not provided then will look into factory list to get\n    String zkHost = null;\n    if(null == zkHostExpression){\n      zkHost = factory.getCollectionZkHost(collectionName);\n      if(zkHost == null) {\n        zkHost = factory.getDefaultZkHost();\n      }\n    } else if(zkHostExpression.getParameter() instanceof StreamExpressionValue) {\n      zkHost = ((StreamExpressionValue)zkHostExpression.getParameter()).getValue();\n    }\n\n    if(null == zkHost){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - zkHost not found for collection '%s'\",expression,collectionName));\n    }\n\n    // We've got all the required items\n    init(zkHost, collectionName, fromNode, toNode, fromField, toField, params, partitionSize, threads, maxDepth);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"826d15444ddf61716dc768c229cd54b2c2ccce1c","date":1462822652,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/graph/ShortestPathStream#ShortestPathStream(StreamExpression,StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/graph/ShortestPathStream#ShortestPathStream(StreamExpression,StreamFactory).mjava","sourceNew":"  public ShortestPathStream(StreamExpression expression, StreamFactory factory) throws IOException {\n\n    String collectionName = factory.getValueOperand(expression, 0);\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n\n    // Collection Name\n    if(null == collectionName) {\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - collectionName expected as first operand\",expression));\n    }\n\n    String fromNode = null;\n    StreamExpressionNamedParameter fromExpression = factory.getNamedOperand(expression, \"from\");\n\n    if(fromExpression == null) {\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - from param is required\",expression));\n    } else {\n      fromNode = ((StreamExpressionValue)fromExpression.getParameter()).getValue();\n    }\n\n    String toNode = null;\n    StreamExpressionNamedParameter toExpression = factory.getNamedOperand(expression, \"to\");\n\n    if(toExpression == null) {\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - to param is required\", expression));\n    } else {\n      toNode = ((StreamExpressionValue)toExpression.getParameter()).getValue();\n    }\n\n    String fromField = null;\n    String toField = null;\n\n    StreamExpressionNamedParameter edgeExpression = factory.getNamedOperand(expression, \"edge\");\n\n    if(edgeExpression == null) {\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - edge param is required\", expression));\n    } else {\n      String edge = ((StreamExpressionValue)edgeExpression.getParameter()).getValue();\n      String[] fields = edge.split(\"=\");\n      if(fields.length != 2) {\n        throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - edge param separated by and = and must contain two fields\", expression));\n      }\n      fromField = fields[0].trim();\n      toField = fields[1].trim();\n    }\n\n    int threads = 6;\n\n    StreamExpressionNamedParameter threadsExpression = factory.getNamedOperand(expression, \"threads\");\n\n    if(threadsExpression != null) {\n      threads = Integer.parseInt(((StreamExpressionValue)threadsExpression.getParameter()).getValue());\n    }\n\n    int partitionSize = 250;\n\n    StreamExpressionNamedParameter partitionExpression = factory.getNamedOperand(expression, \"partitionSize\");\n\n    if(partitionExpression != null) {\n      partitionSize = Integer.parseInt(((StreamExpressionValue)partitionExpression.getParameter()).getValue());\n    }\n\n    int maxDepth = 0;\n\n    StreamExpressionNamedParameter depthExpression = factory.getNamedOperand(expression, \"maxDepth\");\n\n    if(depthExpression == null) {\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - maxDepth param is required\", expression));\n    } else {\n      maxDepth = Integer.parseInt(((StreamExpressionValue) depthExpression.getParameter()).getValue());\n    }\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    for(StreamExpressionNamedParameter namedParam : namedParams){\n      if(!namedParam.getName().equals(\"zkHost\") &&\n          !namedParam.getName().equals(\"to\") &&\n          !namedParam.getName().equals(\"from\") &&\n          !namedParam.getName().equals(\"edge\") &&\n          !namedParam.getName().equals(\"maxDepth\") &&\n          !namedParam.getName().equals(\"threads\") &&\n          !namedParam.getName().equals(\"partitionSize\"))\n      {\n        params.set(namedParam.getName(), namedParam.getParameter().toString().trim());\n      }\n    }\n\n    // zkHost, optional - if not provided then will look into factory list to get\n    String zkHost = null;\n    if(null == zkHostExpression){\n      zkHost = factory.getCollectionZkHost(collectionName);\n      if(zkHost == null) {\n        zkHost = factory.getDefaultZkHost();\n      }\n    } else if(zkHostExpression.getParameter() instanceof StreamExpressionValue) {\n      zkHost = ((StreamExpressionValue)zkHostExpression.getParameter()).getValue();\n    }\n\n    if(null == zkHost){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - zkHost not found for collection '%s'\",expression,collectionName));\n    }\n\n    // We've got all the required items\n    init(zkHost, collectionName, fromNode, toNode, fromField, toField, params, partitionSize, threads, maxDepth);\n  }\n\n","sourceOld":"  public ShortestPathStream(StreamExpression expression, StreamFactory factory) throws IOException {\n\n    String collectionName = factory.getValueOperand(expression, 0);\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n\n    // Collection Name\n    if(null == collectionName) {\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - collectionName expected as first operand\",expression));\n    }\n\n    String fromNode = null;\n    StreamExpressionNamedParameter fromExpression = factory.getNamedOperand(expression, \"from\");\n\n    if(fromExpression == null) {\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - from param is required\",expression));\n    } else {\n      fromNode = ((StreamExpressionValue)fromExpression.getParameter()).getValue();\n    }\n\n    String toNode = null;\n    StreamExpressionNamedParameter toExpression = factory.getNamedOperand(expression, \"to\");\n\n    if(toExpression == null) {\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - to param is required\", expression));\n    } else {\n      toNode = ((StreamExpressionValue)toExpression.getParameter()).getValue();\n    }\n\n    String fromField = null;\n    String toField = null;\n\n    StreamExpressionNamedParameter edgeExpression = factory.getNamedOperand(expression, \"edge\");\n\n    if(edgeExpression == null) {\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - edge param is required\", expression));\n    } else {\n      String edge = ((StreamExpressionValue)edgeExpression.getParameter()).getValue();\n      String[] fields = edge.split(\"=\");\n      if(fields.length != 2) {\n        throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - edge param separated by and = and must contain two fields\", expression));\n      }\n      fromField = fields[0].trim();\n      toField = fields[1].trim();\n    }\n\n    int threads = 6;\n\n    StreamExpressionNamedParameter threadsExpression = factory.getNamedOperand(expression, \"threads\");\n\n    if(threadsExpression != null) {\n      threads = Integer.parseInt(((StreamExpressionValue)threadsExpression.getParameter()).getValue());\n    }\n\n    int partitionSize = 250;\n\n    StreamExpressionNamedParameter partitionExpression = factory.getNamedOperand(expression, \"partitionSize\");\n\n    if(partitionExpression != null) {\n      partitionSize = Integer.parseInt(((StreamExpressionValue)partitionExpression.getParameter()).getValue());\n    }\n\n    int maxDepth = 0;\n\n    StreamExpressionNamedParameter depthExpression = factory.getNamedOperand(expression, \"maxDepth\");\n\n    if(depthExpression == null) {\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - maxDepth param is required\", expression));\n    } else {\n      maxDepth = Integer.parseInt(((StreamExpressionValue) depthExpression.getParameter()).getValue());\n    }\n\n    Map<String,String> params = new HashMap<String,String>();\n    for(StreamExpressionNamedParameter namedParam : namedParams){\n      if(!namedParam.getName().equals(\"zkHost\") &&\n          !namedParam.getName().equals(\"to\") &&\n          !namedParam.getName().equals(\"from\") &&\n          !namedParam.getName().equals(\"edge\") &&\n          !namedParam.getName().equals(\"maxDepth\") &&\n          !namedParam.getName().equals(\"threads\") &&\n          !namedParam.getName().equals(\"partitionSize\"))\n      {\n        params.put(namedParam.getName(), namedParam.getParameter().toString().trim());\n      }\n    }\n\n    // zkHost, optional - if not provided then will look into factory list to get\n    String zkHost = null;\n    if(null == zkHostExpression){\n      zkHost = factory.getCollectionZkHost(collectionName);\n      if(zkHost == null) {\n        zkHost = factory.getDefaultZkHost();\n      }\n    } else if(zkHostExpression.getParameter() instanceof StreamExpressionValue) {\n      zkHost = ((StreamExpressionValue)zkHostExpression.getParameter()).getValue();\n    }\n\n    if(null == zkHost){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - zkHost not found for collection '%s'\",expression,collectionName));\n    }\n\n    // We've got all the required items\n    init(zkHost, collectionName, fromNode, toNode, fromField, toField, params, partitionSize, threads, maxDepth);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e66a459d38c1c4a2f97128433dab546f683a9fed","date":1462873476,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/graph/ShortestPathStream#ShortestPathStream(StreamExpression,StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/graph/ShortestPathStream#ShortestPathStream(StreamExpression,StreamFactory).mjava","sourceNew":"  public ShortestPathStream(StreamExpression expression, StreamFactory factory) throws IOException {\n\n    String collectionName = factory.getValueOperand(expression, 0);\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n\n    // Collection Name\n    if(null == collectionName) {\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - collectionName expected as first operand\",expression));\n    }\n\n    String fromNode = null;\n    StreamExpressionNamedParameter fromExpression = factory.getNamedOperand(expression, \"from\");\n\n    if(fromExpression == null) {\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - from param is required\",expression));\n    } else {\n      fromNode = ((StreamExpressionValue)fromExpression.getParameter()).getValue();\n    }\n\n    String toNode = null;\n    StreamExpressionNamedParameter toExpression = factory.getNamedOperand(expression, \"to\");\n\n    if(toExpression == null) {\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - to param is required\", expression));\n    } else {\n      toNode = ((StreamExpressionValue)toExpression.getParameter()).getValue();\n    }\n\n    String fromField = null;\n    String toField = null;\n\n    StreamExpressionNamedParameter edgeExpression = factory.getNamedOperand(expression, \"edge\");\n\n    if(edgeExpression == null) {\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - edge param is required\", expression));\n    } else {\n      String edge = ((StreamExpressionValue)edgeExpression.getParameter()).getValue();\n      String[] fields = edge.split(\"=\");\n      if(fields.length != 2) {\n        throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - edge param separated by and = and must contain two fields\", expression));\n      }\n      fromField = fields[0].trim();\n      toField = fields[1].trim();\n    }\n\n    int threads = 6;\n\n    StreamExpressionNamedParameter threadsExpression = factory.getNamedOperand(expression, \"threads\");\n\n    if(threadsExpression != null) {\n      threads = Integer.parseInt(((StreamExpressionValue)threadsExpression.getParameter()).getValue());\n    }\n\n    int partitionSize = 250;\n\n    StreamExpressionNamedParameter partitionExpression = factory.getNamedOperand(expression, \"partitionSize\");\n\n    if(partitionExpression != null) {\n      partitionSize = Integer.parseInt(((StreamExpressionValue)partitionExpression.getParameter()).getValue());\n    }\n\n    int maxDepth = 0;\n\n    StreamExpressionNamedParameter depthExpression = factory.getNamedOperand(expression, \"maxDepth\");\n\n    if(depthExpression == null) {\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - maxDepth param is required\", expression));\n    } else {\n      maxDepth = Integer.parseInt(((StreamExpressionValue) depthExpression.getParameter()).getValue());\n    }\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    for(StreamExpressionNamedParameter namedParam : namedParams){\n      if(!namedParam.getName().equals(\"zkHost\") &&\n          !namedParam.getName().equals(\"to\") &&\n          !namedParam.getName().equals(\"from\") &&\n          !namedParam.getName().equals(\"edge\") &&\n          !namedParam.getName().equals(\"maxDepth\") &&\n          !namedParam.getName().equals(\"threads\") &&\n          !namedParam.getName().equals(\"partitionSize\"))\n      {\n        params.set(namedParam.getName(), namedParam.getParameter().toString().trim());\n      }\n    }\n\n    // zkHost, optional - if not provided then will look into factory list to get\n    String zkHost = null;\n    if(null == zkHostExpression){\n      zkHost = factory.getCollectionZkHost(collectionName);\n      if(zkHost == null) {\n        zkHost = factory.getDefaultZkHost();\n      }\n    } else if(zkHostExpression.getParameter() instanceof StreamExpressionValue) {\n      zkHost = ((StreamExpressionValue)zkHostExpression.getParameter()).getValue();\n    }\n\n    if(null == zkHost){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - zkHost not found for collection '%s'\",expression,collectionName));\n    }\n\n    // We've got all the required items\n    init(zkHost, collectionName, fromNode, toNode, fromField, toField, params, partitionSize, threads, maxDepth);\n  }\n\n","sourceOld":"  public ShortestPathStream(StreamExpression expression, StreamFactory factory) throws IOException {\n\n    String collectionName = factory.getValueOperand(expression, 0);\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n\n    // Collection Name\n    if(null == collectionName) {\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - collectionName expected as first operand\",expression));\n    }\n\n    String fromNode = null;\n    StreamExpressionNamedParameter fromExpression = factory.getNamedOperand(expression, \"from\");\n\n    if(fromExpression == null) {\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - from param is required\",expression));\n    } else {\n      fromNode = ((StreamExpressionValue)fromExpression.getParameter()).getValue();\n    }\n\n    String toNode = null;\n    StreamExpressionNamedParameter toExpression = factory.getNamedOperand(expression, \"to\");\n\n    if(toExpression == null) {\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - to param is required\", expression));\n    } else {\n      toNode = ((StreamExpressionValue)toExpression.getParameter()).getValue();\n    }\n\n    String fromField = null;\n    String toField = null;\n\n    StreamExpressionNamedParameter edgeExpression = factory.getNamedOperand(expression, \"edge\");\n\n    if(edgeExpression == null) {\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - edge param is required\", expression));\n    } else {\n      String edge = ((StreamExpressionValue)edgeExpression.getParameter()).getValue();\n      String[] fields = edge.split(\"=\");\n      if(fields.length != 2) {\n        throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - edge param separated by and = and must contain two fields\", expression));\n      }\n      fromField = fields[0].trim();\n      toField = fields[1].trim();\n    }\n\n    int threads = 6;\n\n    StreamExpressionNamedParameter threadsExpression = factory.getNamedOperand(expression, \"threads\");\n\n    if(threadsExpression != null) {\n      threads = Integer.parseInt(((StreamExpressionValue)threadsExpression.getParameter()).getValue());\n    }\n\n    int partitionSize = 250;\n\n    StreamExpressionNamedParameter partitionExpression = factory.getNamedOperand(expression, \"partitionSize\");\n\n    if(partitionExpression != null) {\n      partitionSize = Integer.parseInt(((StreamExpressionValue)partitionExpression.getParameter()).getValue());\n    }\n\n    int maxDepth = 0;\n\n    StreamExpressionNamedParameter depthExpression = factory.getNamedOperand(expression, \"maxDepth\");\n\n    if(depthExpression == null) {\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - maxDepth param is required\", expression));\n    } else {\n      maxDepth = Integer.parseInt(((StreamExpressionValue) depthExpression.getParameter()).getValue());\n    }\n\n    Map<String,String> params = new HashMap<String,String>();\n    for(StreamExpressionNamedParameter namedParam : namedParams){\n      if(!namedParam.getName().equals(\"zkHost\") &&\n          !namedParam.getName().equals(\"to\") &&\n          !namedParam.getName().equals(\"from\") &&\n          !namedParam.getName().equals(\"edge\") &&\n          !namedParam.getName().equals(\"maxDepth\") &&\n          !namedParam.getName().equals(\"threads\") &&\n          !namedParam.getName().equals(\"partitionSize\"))\n      {\n        params.put(namedParam.getName(), namedParam.getParameter().toString().trim());\n      }\n    }\n\n    // zkHost, optional - if not provided then will look into factory list to get\n    String zkHost = null;\n    if(null == zkHostExpression){\n      zkHost = factory.getCollectionZkHost(collectionName);\n      if(zkHost == null) {\n        zkHost = factory.getDefaultZkHost();\n      }\n    } else if(zkHostExpression.getParameter() instanceof StreamExpressionValue) {\n      zkHost = ((StreamExpressionValue)zkHostExpression.getParameter()).getValue();\n    }\n\n    if(null == zkHost){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - zkHost not found for collection '%s'\",expression,collectionName));\n    }\n\n    // We've got all the required items\n    init(zkHost, collectionName, fromNode, toNode, fromField, toField, params, partitionSize, threads, maxDepth);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/graph/ShortestPathStream#ShortestPathStream(StreamExpression,StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/graph/ShortestPathStream#ShortestPathStream(StreamExpression,StreamFactory).mjava","sourceNew":"  public ShortestPathStream(StreamExpression expression, StreamFactory factory) throws IOException {\n\n    String collectionName = factory.getValueOperand(expression, 0);\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n\n    // Collection Name\n    if(null == collectionName) {\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - collectionName expected as first operand\",expression));\n    }\n\n    String fromNode = null;\n    StreamExpressionNamedParameter fromExpression = factory.getNamedOperand(expression, \"from\");\n\n    if(fromExpression == null) {\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - from param is required\",expression));\n    } else {\n      fromNode = ((StreamExpressionValue)fromExpression.getParameter()).getValue();\n    }\n\n    String toNode = null;\n    StreamExpressionNamedParameter toExpression = factory.getNamedOperand(expression, \"to\");\n\n    if(toExpression == null) {\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - to param is required\", expression));\n    } else {\n      toNode = ((StreamExpressionValue)toExpression.getParameter()).getValue();\n    }\n\n    String fromField = null;\n    String toField = null;\n\n    StreamExpressionNamedParameter edgeExpression = factory.getNamedOperand(expression, \"edge\");\n\n    if(edgeExpression == null) {\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - edge param is required\", expression));\n    } else {\n      String edge = ((StreamExpressionValue)edgeExpression.getParameter()).getValue();\n      String[] fields = edge.split(\"=\");\n      if(fields.length != 2) {\n        throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - edge param separated by and = and must contain two fields\", expression));\n      }\n      fromField = fields[0].trim();\n      toField = fields[1].trim();\n    }\n\n    int threads = 6;\n\n    StreamExpressionNamedParameter threadsExpression = factory.getNamedOperand(expression, \"threads\");\n\n    if(threadsExpression != null) {\n      threads = Integer.parseInt(((StreamExpressionValue)threadsExpression.getParameter()).getValue());\n    }\n\n    int partitionSize = 250;\n\n    StreamExpressionNamedParameter partitionExpression = factory.getNamedOperand(expression, \"partitionSize\");\n\n    if(partitionExpression != null) {\n      partitionSize = Integer.parseInt(((StreamExpressionValue)partitionExpression.getParameter()).getValue());\n    }\n\n    int maxDepth = 0;\n\n    StreamExpressionNamedParameter depthExpression = factory.getNamedOperand(expression, \"maxDepth\");\n\n    if(depthExpression == null) {\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - maxDepth param is required\", expression));\n    } else {\n      maxDepth = Integer.parseInt(((StreamExpressionValue) depthExpression.getParameter()).getValue());\n    }\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    for(StreamExpressionNamedParameter namedParam : namedParams){\n      if(!namedParam.getName().equals(\"zkHost\") &&\n          !namedParam.getName().equals(\"to\") &&\n          !namedParam.getName().equals(\"from\") &&\n          !namedParam.getName().equals(\"edge\") &&\n          !namedParam.getName().equals(\"maxDepth\") &&\n          !namedParam.getName().equals(\"threads\") &&\n          !namedParam.getName().equals(\"partitionSize\"))\n      {\n        params.set(namedParam.getName(), namedParam.getParameter().toString().trim());\n      }\n    }\n\n    // zkHost, optional - if not provided then will look into factory list to get\n    String zkHost = null;\n    if(null == zkHostExpression){\n      zkHost = factory.getCollectionZkHost(collectionName);\n      if(zkHost == null) {\n        zkHost = factory.getDefaultZkHost();\n      }\n    } else if(zkHostExpression.getParameter() instanceof StreamExpressionValue) {\n      zkHost = ((StreamExpressionValue)zkHostExpression.getParameter()).getValue();\n    }\n\n    if(null == zkHost){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - zkHost not found for collection '%s'\",expression,collectionName));\n    }\n\n    // We've got all the required items\n    init(zkHost, collectionName, fromNode, toNode, fromField, toField, params, partitionSize, threads, maxDepth);\n  }\n\n","sourceOld":"  public ShortestPathStream(StreamExpression expression, StreamFactory factory) throws IOException {\n\n    String collectionName = factory.getValueOperand(expression, 0);\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n\n    // Collection Name\n    if(null == collectionName) {\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - collectionName expected as first operand\",expression));\n    }\n\n    String fromNode = null;\n    StreamExpressionNamedParameter fromExpression = factory.getNamedOperand(expression, \"from\");\n\n    if(fromExpression == null) {\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - from param is required\",expression));\n    } else {\n      fromNode = ((StreamExpressionValue)fromExpression.getParameter()).getValue();\n    }\n\n    String toNode = null;\n    StreamExpressionNamedParameter toExpression = factory.getNamedOperand(expression, \"to\");\n\n    if(toExpression == null) {\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - to param is required\", expression));\n    } else {\n      toNode = ((StreamExpressionValue)toExpression.getParameter()).getValue();\n    }\n\n    String fromField = null;\n    String toField = null;\n\n    StreamExpressionNamedParameter edgeExpression = factory.getNamedOperand(expression, \"edge\");\n\n    if(edgeExpression == null) {\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - edge param is required\", expression));\n    } else {\n      String edge = ((StreamExpressionValue)edgeExpression.getParameter()).getValue();\n      String[] fields = edge.split(\"=\");\n      if(fields.length != 2) {\n        throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - edge param separated by and = and must contain two fields\", expression));\n      }\n      fromField = fields[0].trim();\n      toField = fields[1].trim();\n    }\n\n    int threads = 6;\n\n    StreamExpressionNamedParameter threadsExpression = factory.getNamedOperand(expression, \"threads\");\n\n    if(threadsExpression != null) {\n      threads = Integer.parseInt(((StreamExpressionValue)threadsExpression.getParameter()).getValue());\n    }\n\n    int partitionSize = 250;\n\n    StreamExpressionNamedParameter partitionExpression = factory.getNamedOperand(expression, \"partitionSize\");\n\n    if(partitionExpression != null) {\n      partitionSize = Integer.parseInt(((StreamExpressionValue)partitionExpression.getParameter()).getValue());\n    }\n\n    int maxDepth = 0;\n\n    StreamExpressionNamedParameter depthExpression = factory.getNamedOperand(expression, \"maxDepth\");\n\n    if(depthExpression == null) {\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - maxDepth param is required\", expression));\n    } else {\n      maxDepth = Integer.parseInt(((StreamExpressionValue) depthExpression.getParameter()).getValue());\n    }\n\n    Map<String,String> params = new HashMap<String,String>();\n    for(StreamExpressionNamedParameter namedParam : namedParams){\n      if(!namedParam.getName().equals(\"zkHost\") &&\n          !namedParam.getName().equals(\"to\") &&\n          !namedParam.getName().equals(\"from\") &&\n          !namedParam.getName().equals(\"edge\") &&\n          !namedParam.getName().equals(\"maxDepth\") &&\n          !namedParam.getName().equals(\"threads\") &&\n          !namedParam.getName().equals(\"partitionSize\"))\n      {\n        params.put(namedParam.getName(), namedParam.getParameter().toString().trim());\n      }\n    }\n\n    // zkHost, optional - if not provided then will look into factory list to get\n    String zkHost = null;\n    if(null == zkHostExpression){\n      zkHost = factory.getCollectionZkHost(collectionName);\n      if(zkHost == null) {\n        zkHost = factory.getDefaultZkHost();\n      }\n    } else if(zkHostExpression.getParameter() instanceof StreamExpressionValue) {\n      zkHost = ((StreamExpressionValue)zkHostExpression.getParameter()).getValue();\n    }\n\n    if(null == zkHost){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - zkHost not found for collection '%s'\",expression,collectionName));\n    }\n\n    // We've got all the required items\n    init(zkHost, collectionName, fromNode, toNode, fromField, toField, params, partitionSize, threads, maxDepth);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/graph/ShortestPathStream#ShortestPathStream(StreamExpression,StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/graph/ShortestPathStream#ShortestPathStream(StreamExpression,StreamFactory).mjava","sourceNew":"  public ShortestPathStream(StreamExpression expression, StreamFactory factory) throws IOException {\n\n    String collectionName = factory.getValueOperand(expression, 0);\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n\n    // Collection Name\n    if(null == collectionName) {\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - collectionName expected as first operand\",expression));\n    }\n\n    String fromNode = null;\n    StreamExpressionNamedParameter fromExpression = factory.getNamedOperand(expression, \"from\");\n\n    if(fromExpression == null) {\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - from param is required\",expression));\n    } else {\n      fromNode = ((StreamExpressionValue)fromExpression.getParameter()).getValue();\n    }\n\n    String toNode = null;\n    StreamExpressionNamedParameter toExpression = factory.getNamedOperand(expression, \"to\");\n\n    if(toExpression == null) {\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - to param is required\", expression));\n    } else {\n      toNode = ((StreamExpressionValue)toExpression.getParameter()).getValue();\n    }\n\n    String fromField = null;\n    String toField = null;\n\n    StreamExpressionNamedParameter edgeExpression = factory.getNamedOperand(expression, \"edge\");\n\n    if(edgeExpression == null) {\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - edge param is required\", expression));\n    } else {\n      String edge = ((StreamExpressionValue)edgeExpression.getParameter()).getValue();\n      String[] fields = edge.split(\"=\");\n      if(fields.length != 2) {\n        throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - edge param separated by and = and must contain two fields\", expression));\n      }\n      fromField = fields[0].trim();\n      toField = fields[1].trim();\n    }\n\n    int threads = 6;\n\n    StreamExpressionNamedParameter threadsExpression = factory.getNamedOperand(expression, \"threads\");\n\n    if(threadsExpression != null) {\n      threads = Integer.parseInt(((StreamExpressionValue)threadsExpression.getParameter()).getValue());\n    }\n\n    int partitionSize = 250;\n\n    StreamExpressionNamedParameter partitionExpression = factory.getNamedOperand(expression, \"partitionSize\");\n\n    if(partitionExpression != null) {\n      partitionSize = Integer.parseInt(((StreamExpressionValue)partitionExpression.getParameter()).getValue());\n    }\n\n    int maxDepth = 0;\n\n    StreamExpressionNamedParameter depthExpression = factory.getNamedOperand(expression, \"maxDepth\");\n\n    if(depthExpression == null) {\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - maxDepth param is required\", expression));\n    } else {\n      maxDepth = Integer.parseInt(((StreamExpressionValue) depthExpression.getParameter()).getValue());\n    }\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    for(StreamExpressionNamedParameter namedParam : namedParams){\n      if(!namedParam.getName().equals(\"zkHost\") &&\n          !namedParam.getName().equals(\"to\") &&\n          !namedParam.getName().equals(\"from\") &&\n          !namedParam.getName().equals(\"edge\") &&\n          !namedParam.getName().equals(\"maxDepth\") &&\n          !namedParam.getName().equals(\"threads\") &&\n          !namedParam.getName().equals(\"partitionSize\"))\n      {\n        params.set(namedParam.getName(), namedParam.getParameter().toString().trim());\n      }\n    }\n\n    // zkHost, optional - if not provided then will look into factory list to get\n    String zkHost = null;\n    if(null == zkHostExpression){\n      zkHost = factory.getCollectionZkHost(collectionName);\n      if(zkHost == null) {\n        zkHost = factory.getDefaultZkHost();\n      }\n    } else if(zkHostExpression.getParameter() instanceof StreamExpressionValue) {\n      zkHost = ((StreamExpressionValue)zkHostExpression.getParameter()).getValue();\n    }\n\n    if(null == zkHost){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - zkHost not found for collection '%s'\",expression,collectionName));\n    }\n\n    // We've got all the required items\n    init(zkHost, collectionName, fromNode, toNode, fromField, toField, params, partitionSize, threads, maxDepth);\n  }\n\n","sourceOld":"  public ShortestPathStream(StreamExpression expression, StreamFactory factory) throws IOException {\n\n    String collectionName = factory.getValueOperand(expression, 0);\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n\n    // Collection Name\n    if(null == collectionName) {\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - collectionName expected as first operand\",expression));\n    }\n\n    String fromNode = null;\n    StreamExpressionNamedParameter fromExpression = factory.getNamedOperand(expression, \"from\");\n\n    if(fromExpression == null) {\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - from param is required\",expression));\n    } else {\n      fromNode = ((StreamExpressionValue)fromExpression.getParameter()).getValue();\n    }\n\n    String toNode = null;\n    StreamExpressionNamedParameter toExpression = factory.getNamedOperand(expression, \"to\");\n\n    if(toExpression == null) {\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - to param is required\", expression));\n    } else {\n      toNode = ((StreamExpressionValue)toExpression.getParameter()).getValue();\n    }\n\n    String fromField = null;\n    String toField = null;\n\n    StreamExpressionNamedParameter edgeExpression = factory.getNamedOperand(expression, \"edge\");\n\n    if(edgeExpression == null) {\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - edge param is required\", expression));\n    } else {\n      String edge = ((StreamExpressionValue)edgeExpression.getParameter()).getValue();\n      String[] fields = edge.split(\"=\");\n      if(fields.length != 2) {\n        throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - edge param separated by and = and must contain two fields\", expression));\n      }\n      fromField = fields[0].trim();\n      toField = fields[1].trim();\n    }\n\n    int threads = 6;\n\n    StreamExpressionNamedParameter threadsExpression = factory.getNamedOperand(expression, \"threads\");\n\n    if(threadsExpression != null) {\n      threads = Integer.parseInt(((StreamExpressionValue)threadsExpression.getParameter()).getValue());\n    }\n\n    int partitionSize = 250;\n\n    StreamExpressionNamedParameter partitionExpression = factory.getNamedOperand(expression, \"partitionSize\");\n\n    if(partitionExpression != null) {\n      partitionSize = Integer.parseInt(((StreamExpressionValue)partitionExpression.getParameter()).getValue());\n    }\n\n    int maxDepth = 0;\n\n    StreamExpressionNamedParameter depthExpression = factory.getNamedOperand(expression, \"maxDepth\");\n\n    if(depthExpression == null) {\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - maxDepth param is required\", expression));\n    } else {\n      maxDepth = Integer.parseInt(((StreamExpressionValue) depthExpression.getParameter()).getValue());\n    }\n\n    Map<String,String> params = new HashMap<String,String>();\n    for(StreamExpressionNamedParameter namedParam : namedParams){\n      if(!namedParam.getName().equals(\"zkHost\") &&\n          !namedParam.getName().equals(\"to\") &&\n          !namedParam.getName().equals(\"from\") &&\n          !namedParam.getName().equals(\"edge\") &&\n          !namedParam.getName().equals(\"maxDepth\") &&\n          !namedParam.getName().equals(\"threads\") &&\n          !namedParam.getName().equals(\"partitionSize\"))\n      {\n        params.put(namedParam.getName(), namedParam.getParameter().toString().trim());\n      }\n    }\n\n    // zkHost, optional - if not provided then will look into factory list to get\n    String zkHost = null;\n    if(null == zkHostExpression){\n      zkHost = factory.getCollectionZkHost(collectionName);\n      if(zkHost == null) {\n        zkHost = factory.getDefaultZkHost();\n      }\n    } else if(zkHostExpression.getParameter() instanceof StreamExpressionValue) {\n      zkHost = ((StreamExpressionValue)zkHostExpression.getParameter()).getValue();\n    }\n\n    if(null == zkHost){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - zkHost not found for collection '%s'\",expression,collectionName));\n    }\n\n    // We've got all the required items\n    init(zkHost, collectionName, fromNode, toNode, fromField, toField, params, partitionSize, threads, maxDepth);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9a7edeee192980cdc45735957606fc0dbf22d437":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e66a459d38c1c4a2f97128433dab546f683a9fed":["9a7edeee192980cdc45735957606fc0dbf22d437","826d15444ddf61716dc768c229cd54b2c2ccce1c"],"826d15444ddf61716dc768c229cd54b2c2ccce1c":["9a7edeee192980cdc45735957606fc0dbf22d437"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["9a7edeee192980cdc45735957606fc0dbf22d437","d470c8182e92b264680e34081b75e70a9f2b3c89"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["9a7edeee192980cdc45735957606fc0dbf22d437","826d15444ddf61716dc768c229cd54b2c2ccce1c"]},"commit2Childs":{"9a7edeee192980cdc45735957606fc0dbf22d437":["e66a459d38c1c4a2f97128433dab546f683a9fed","826d15444ddf61716dc768c229cd54b2c2ccce1c","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9a7edeee192980cdc45735957606fc0dbf22d437"],"e66a459d38c1c4a2f97128433dab546f683a9fed":[],"826d15444ddf61716dc768c229cd54b2c2ccce1c":["e66a459d38c1c4a2f97128433dab546f683a9fed","d470c8182e92b264680e34081b75e70a9f2b3c89"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"d470c8182e92b264680e34081b75e70a9f2b3c89":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e66a459d38c1c4a2f97128433dab546f683a9fed","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}