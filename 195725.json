{"path":"lucene/contrib/queries/src/test/org/apache/lucene/search/regex/TestRegexQuery#testMatchAll().mjava","commits":[{"id":"36f91bf9cfc9d0c3155edab43359e7670ea8a5af","date":1269580873,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/queries/src/test/org/apache/lucene/search/regex/TestRegexQuery#testMatchAll().mjava","pathOld":"lucene/contrib/regex/src/test/org/apache/lucene/search/regex/TestRegexQuery#testMatchAll().mjava","sourceNew":"  public void testMatchAll() throws Exception {\n    TermEnum terms = new RegexQuery(new Term(FN, \"jum.\")).getEnum(searcher.getIndexReader());\n    // no term should match\n    assertNull(terms.term());\n    assertFalse(terms.next());\n  }\n\n","sourceOld":"  public void testMatchAll() throws Exception {\n    TermEnum terms = new RegexQuery(new Term(FN, \"jum.\")).getEnum(searcher.getIndexReader());\n    // no term should match\n    assertNull(terms.term());\n    assertFalse(terms.next());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28427ef110c4c5bf5b4057731b83110bd1e13724","date":1276701452,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/contrib/queries/src/test/org/apache/lucene/search/regex/TestRegexQuery#testMatchAll().mjava","pathOld":"lucene/contrib/queries/src/test/org/apache/lucene/search/regex/TestRegexQuery#testMatchAll().mjava","sourceNew":"  public void testMatchAll() throws Exception {\n    TermsEnum terms = new RegexQuery(new Term(FN, \"jum.\")).getTermsEnum(searcher.getIndexReader());\n    // no term should match\n    assertNull(terms.next());\n  }\n\n","sourceOld":"  public void testMatchAll() throws Exception {\n    TermEnum terms = new RegexQuery(new Term(FN, \"jum.\")).getEnum(searcher.getIndexReader());\n    // no term should match\n    assertNull(terms.term());\n    assertFalse(terms.next());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/contrib/queries/src/test/org/apache/lucene/search/regex/TestRegexQuery#testMatchAll().mjava","pathOld":"lucene/contrib/queries/src/test/org/apache/lucene/search/regex/TestRegexQuery#testMatchAll().mjava","sourceNew":"  public void testMatchAll() throws Exception {\n    TermsEnum terms = new RegexQuery(new Term(FN, \"jum.\")).getTermsEnum(searcher.getIndexReader());\n    // no term should match\n    assertNull(terms.next());\n  }\n\n","sourceOld":"  public void testMatchAll() throws Exception {\n    TermEnum terms = new RegexQuery(new Term(FN, \"jum.\")).getEnum(searcher.getIndexReader());\n    // no term should match\n    assertNull(terms.term());\n    assertFalse(terms.next());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"33a8b1f99104f4144f210f5d068411c297cd7163","date":1287152748,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/contrib/queries/src/test/org/apache/lucene/search/regex/TestRegexQuery#testMatchAll().mjava","pathOld":"lucene/contrib/queries/src/test/org/apache/lucene/search/regex/TestRegexQuery#testMatchAll().mjava","sourceNew":"  public void testMatchAll() throws Exception {\n    TermsEnum terms = new RegexQuery(new Term(FN, \"jum.\")).getTermsEnum(searcher.getIndexReader(), new AttributeSource() /*dummy*/);\n    // no term should match\n    assertNull(terms.next());\n  }\n\n","sourceOld":"  public void testMatchAll() throws Exception {\n    TermsEnum terms = new RegexQuery(new Term(FN, \"jum.\")).getTermsEnum(searcher.getIndexReader());\n    // no term should match\n    assertNull(terms.next());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ecea1664e8617d82eca3b8055a3c37cb4da8511","date":1287578668,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/queries/src/test/org/apache/lucene/search/regex/TestRegexQuery#testMatchAll().mjava","pathOld":"lucene/contrib/queries/src/test/org/apache/lucene/search/regex/TestRegexQuery#testMatchAll().mjava","sourceNew":"  public void testMatchAll() throws Exception {\n    TermsEnum terms = new RegexQuery(new Term(FN, \"jum.\")).getTermsEnum(searcher.getIndexReader(), new AttributeSource() /*dummy*/);\n    // no term should match\n    assertNull(terms.next());\n  }\n\n","sourceOld":"  public void testMatchAll() throws Exception {\n    TermsEnum terms = new RegexQuery(new Term(FN, \"jum.\")).getTermsEnum(searcher.getIndexReader());\n    // no term should match\n    assertNull(terms.next());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e8dd2a69747e9f2922fd8b6970bd1661b26a692d","date":1291080135,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/queries/src/test/org/apache/lucene/search/regex/TestRegexQuery#testMatchAll().mjava","pathOld":"lucene/contrib/queries/src/test/org/apache/lucene/search/regex/TestRegexQuery#testMatchAll().mjava","sourceNew":"  public void testMatchAll() throws Exception {\n    Terms terms = MultiFields.getTerms(searcher.getIndexReader(), FN);\n    TermsEnum te = new RegexQuery(new Term(FN, \"jum.\")).getTermsEnum(terms, new AttributeSource() /*dummy*/);\n    // no term should match\n    assertNull(te.next());\n  }\n\n","sourceOld":"  public void testMatchAll() throws Exception {\n    TermsEnum terms = new RegexQuery(new Term(FN, \"jum.\")).getTermsEnum(searcher.getIndexReader(), new AttributeSource() /*dummy*/);\n    // no term should match\n    assertNull(terms.next());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/queries/src/test/org/apache/lucene/search/regex/TestRegexQuery#testMatchAll().mjava","pathOld":"lucene/contrib/queries/src/test/org/apache/lucene/search/regex/TestRegexQuery#testMatchAll().mjava","sourceNew":"  public void testMatchAll() throws Exception {\n    Terms terms = MultiFields.getTerms(searcher.getIndexReader(), FN);\n    TermsEnum te = new RegexQuery(new Term(FN, \"jum.\")).getTermsEnum(terms, new AttributeSource() /*dummy*/);\n    // no term should match\n    assertNull(te.next());\n  }\n\n","sourceOld":"  public void testMatchAll() throws Exception {\n    TermsEnum terms = new RegexQuery(new Term(FN, \"jum.\")).getTermsEnum(searcher.getIndexReader(), new AttributeSource() /*dummy*/);\n    // no term should match\n    assertNull(terms.next());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/contrib/queries/src/test/org/apache/lucene/search/regex/TestRegexQuery#testMatchAll().mjava","pathOld":"lucene/contrib/queries/src/test/org/apache/lucene/search/regex/TestRegexQuery#testMatchAll().mjava","sourceNew":"  public void testMatchAll() throws Exception {\n    Terms terms = MultiFields.getTerms(searcher.getIndexReader(), FN);\n    TermsEnum te = new RegexQuery(new Term(FN, \"jum.\")).getTermsEnum(terms, new AttributeSource() /*dummy*/);\n    // no term should match\n    assertNull(te.next());\n  }\n\n","sourceOld":"  public void testMatchAll() throws Exception {\n    TermsEnum terms = new RegexQuery(new Term(FN, \"jum.\")).getTermsEnum(searcher.getIndexReader());\n    // no term should match\n    assertNull(terms.next());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f9fdc0777b84633cc8cfa8995ff5b0d411e4515b","date":1313816278,"type":5,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/contrib/sandbox/src/test/org/apache/lucene/sandbox/queries/regex/TestRegexQuery#testMatchAll().mjava","pathOld":"lucene/contrib/queries/src/test/org/apache/lucene/search/regex/TestRegexQuery#testMatchAll().mjava","sourceNew":"  public void testMatchAll() throws Exception {\n    Terms terms = MultiFields.getTerms(searcher.getIndexReader(), FN);\n    TermsEnum te = new RegexQuery(new Term(FN, \"jum.\")).getTermsEnum(terms, new AttributeSource() /*dummy*/);\n    // no term should match\n    assertNull(te.next());\n  }\n\n","sourceOld":"  public void testMatchAll() throws Exception {\n    Terms terms = MultiFields.getTerms(searcher.getIndexReader(), FN);\n    TermsEnum te = new RegexQuery(new Term(FN, \"jum.\")).getTermsEnum(terms, new AttributeSource() /*dummy*/);\n    // no term should match\n    assertNull(te.next());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"33a8b1f99104f4144f210f5d068411c297cd7163":["28427ef110c4c5bf5b4057731b83110bd1e13724"],"f9fdc0777b84633cc8cfa8995ff5b0d411e4515b":["e8dd2a69747e9f2922fd8b6970bd1661b26a692d"],"36f91bf9cfc9d0c3155edab43359e7670ea8a5af":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"28427ef110c4c5bf5b4057731b83110bd1e13724":["36f91bf9cfc9d0c3155edab43359e7670ea8a5af"],"5f4e87790277826a2aea119328600dfb07761f32":["36f91bf9cfc9d0c3155edab43359e7670ea8a5af","28427ef110c4c5bf5b4057731b83110bd1e13724"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["5f4e87790277826a2aea119328600dfb07761f32","e8dd2a69747e9f2922fd8b6970bd1661b26a692d"],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":["28427ef110c4c5bf5b4057731b83110bd1e13724","33a8b1f99104f4144f210f5d068411c297cd7163"],"e8dd2a69747e9f2922fd8b6970bd1661b26a692d":["33a8b1f99104f4144f210f5d068411c297cd7163"],"3bb13258feba31ab676502787ab2e1779f129b7a":["4ecea1664e8617d82eca3b8055a3c37cb4da8511","e8dd2a69747e9f2922fd8b6970bd1661b26a692d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f9fdc0777b84633cc8cfa8995ff5b0d411e4515b"]},"commit2Childs":{"33a8b1f99104f4144f210f5d068411c297cd7163":["4ecea1664e8617d82eca3b8055a3c37cb4da8511","e8dd2a69747e9f2922fd8b6970bd1661b26a692d"],"f9fdc0777b84633cc8cfa8995ff5b0d411e4515b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"36f91bf9cfc9d0c3155edab43359e7670ea8a5af":["28427ef110c4c5bf5b4057731b83110bd1e13724","5f4e87790277826a2aea119328600dfb07761f32"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["36f91bf9cfc9d0c3155edab43359e7670ea8a5af"],"28427ef110c4c5bf5b4057731b83110bd1e13724":["33a8b1f99104f4144f210f5d068411c297cd7163","5f4e87790277826a2aea119328600dfb07761f32","4ecea1664e8617d82eca3b8055a3c37cb4da8511"],"5f4e87790277826a2aea119328600dfb07761f32":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":["3bb13258feba31ab676502787ab2e1779f129b7a"],"e8dd2a69747e9f2922fd8b6970bd1661b26a692d":["f9fdc0777b84633cc8cfa8995ff5b0d411e4515b","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a"],"3bb13258feba31ab676502787ab2e1779f129b7a":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}