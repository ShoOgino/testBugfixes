{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/uniformsplit/BlockReader#seekInBlock(BytesRef).mjava","commits":[{"id":"09dfa411e0e1bbfad83c3e6629cf1fe24a7aed89","date":1567784912,"type":0,"author":"David Smiley","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/uniformsplit/BlockReader#seekInBlock(BytesRef).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Seeks to the provided term in this block.\n   * <p>\n   * Does not exceed this block; {@link org.apache.lucene.index.TermsEnum.SeekStatus#END}\n   * is returned if it follows the block.\n   * <p>\n   * Compares the line terms with the <code>searchedTerm</code>, taking\n   * advantage of the incremental encoding properties.\n   * <p>\n   * Scans linearly the terms. Updates the current block line with the current\n   * term.\n   */\n  protected SeekStatus seekInBlock(BytesRef searchedTerm) throws IOException {\n    if (compareToMiddleAndJump(searchedTerm) == 0) {\n      return SeekStatus.FOUND;\n    }\n    int comparisonOffset = 0;\n    while (true) {\n      if (readLineInBlock() == null) {\n        // No more terms for the block.\n        return SeekStatus.END;\n      }\n      TermBytes lineTermBytes = blockLine.getTermBytes();\n      BytesRef lineTerm = lineTermBytes.getTerm();\n      assert lineTerm.offset == 0;\n\n      // Equivalent to comparing with BytesRef.compareTo(),\n      // but faster since we start comparing from min(comparisonOffset, suffixOffset).\n      int suffixOffset = lineTermBytes.getSuffixOffset();\n      int start = Math.min(comparisonOffset, suffixOffset);\n      int end = Math.min(searchedTerm.length, lineTerm.length);\n      int comparison = searchedTerm.length - lineTerm.length;\n      for (int i = start; i < end; i++) {\n        // Compare unsigned bytes.\n        int byteDiff = (searchedTerm.bytes[i + searchedTerm.offset] & 0xFF) - (lineTerm.bytes[i] & 0xFF);\n        if (byteDiff != 0) {\n          comparison = byteDiff;\n          break;\n        }\n        comparisonOffset = i + 1;\n      }\n      if (comparison == 0) {\n        return SeekStatus.FOUND;\n      } else if (comparison < 0) {\n        return SeekStatus.NOT_FOUND;\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"09dfa411e0e1bbfad83c3e6629cf1fe24a7aed89":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["09dfa411e0e1bbfad83c3e6629cf1fe24a7aed89"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["09dfa411e0e1bbfad83c3e6629cf1fe24a7aed89"],"09dfa411e0e1bbfad83c3e6629cf1fe24a7aed89":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}