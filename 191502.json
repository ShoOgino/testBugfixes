{"path":"lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldQuery#checkOverlap(Collection[Query],PhraseQuery,PhraseQuery).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldQuery#checkOverlap(Collection[Query],PhraseQuery,PhraseQuery).mjava","pathOld":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldQuery#checkOverlap(Collection[Query],PhraseQuery,PhraseQuery).mjava","sourceNew":"  /*\n   * Check if PhraseQuery A and B have overlapped part.\n   * \n   * ex1) A=\"a b\", B=\"b c\" => overlap; expandQueries={\"a b c\"}\n   * ex2) A=\"b c\", B=\"a b\" => overlap; expandQueries={\"a b c\"}\n   * ex3) A=\"a b\", B=\"c d\" => no overlap; expandQueries={}\n   */\n  private void checkOverlap( Collection<Query> expandQueries, PhraseQuery a, PhraseQuery b ){\n    if( a.getSlop() != b.getSlop() ) return;\n    Term[] ats = a.getTerms();\n    Term[] bts = b.getTerms();\n    if( fieldMatch && !ats[0].field().equals( bts[0].field() ) ) return;\n    checkOverlap( expandQueries, ats, bts, a.getSlop(), a.getBoost() );\n    checkOverlap( expandQueries, bts, ats, b.getSlop(), b.getBoost() );\n  }\n\n","sourceOld":"  /*\n   * Check if PhraseQuery A and B have overlapped part.\n   * \n   * ex1) A=\"a b\", B=\"b c\" => overlap; expandQueries={\"a b c\"}\n   * ex2) A=\"b c\", B=\"a b\" => overlap; expandQueries={\"a b c\"}\n   * ex3) A=\"a b\", B=\"c d\" => no overlap; expandQueries={}\n   */\n  private void checkOverlap( Collection<Query> expandQueries, PhraseQuery a, PhraseQuery b ){\n    if( a.getSlop() != b.getSlop() ) return;\n    Term[] ats = a.getTerms();\n    Term[] bts = b.getTerms();\n    if( fieldMatch && !ats[0].field().equals( bts[0].field() ) ) return;\n    checkOverlap( expandQueries, ats, bts, a.getSlop(), a.getBoost() );\n    checkOverlap( expandQueries, bts, ats, b.getSlop(), b.getBoost() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2dfdf766e55e943d942055d7de53c7ad6bc45283","date":1441632886,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldQuery#checkOverlap(Collection[Query],PhraseQuery,float,PhraseQuery,float).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldQuery#checkOverlap(Collection[Query],PhraseQuery,PhraseQuery).mjava","sourceNew":"  /*\n   * Check if PhraseQuery A and B have overlapped part.\n   * \n   * ex1) A=\"a b\", B=\"b c\" => overlap; expandQueries={\"a b c\"}\n   * ex2) A=\"b c\", B=\"a b\" => overlap; expandQueries={\"a b c\"}\n   * ex3) A=\"a b\", B=\"c d\" => no overlap; expandQueries={}\n   */\n  private void checkOverlap( Collection<Query> expandQueries, PhraseQuery a, float aBoost, PhraseQuery b, float bBoost ){\n    if( a.getSlop() != b.getSlop() ) return;\n    Term[] ats = a.getTerms();\n    Term[] bts = b.getTerms();\n    if( fieldMatch && !ats[0].field().equals( bts[0].field() ) ) return;\n    checkOverlap( expandQueries, ats, bts, a.getSlop(), aBoost);\n    checkOverlap( expandQueries, bts, ats, b.getSlop(), bBoost );\n  }\n\n","sourceOld":"  /*\n   * Check if PhraseQuery A and B have overlapped part.\n   * \n   * ex1) A=\"a b\", B=\"b c\" => overlap; expandQueries={\"a b c\"}\n   * ex2) A=\"b c\", B=\"a b\" => overlap; expandQueries={\"a b c\"}\n   * ex3) A=\"a b\", B=\"c d\" => no overlap; expandQueries={}\n   */\n  private void checkOverlap( Collection<Query> expandQueries, PhraseQuery a, PhraseQuery b ){\n    if( a.getSlop() != b.getSlop() ) return;\n    Term[] ats = a.getTerms();\n    Term[] bts = b.getTerms();\n    if( fieldMatch && !ats[0].field().equals( bts[0].field() ) ) return;\n    checkOverlap( expandQueries, ats, bts, a.getSlop(), a.getBoost() );\n    checkOverlap( expandQueries, bts, ats, b.getSlop(), b.getBoost() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2dfdf766e55e943d942055d7de53c7ad6bc45283"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}