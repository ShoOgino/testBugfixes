{"path":"lucene/src/java/org/apache/lucene/queryParser/MultiFieldQueryParser#getFieldQuery(String,String,boolean).mjava","commits":[{"id":"2ee056ec8e953928ee49a691090634eed1fa4d6b","date":1274852580,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/queryParser/MultiFieldQueryParser#getFieldQuery(String,String,boolean).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  protected Query getFieldQuery(String field, String queryText, boolean quoted) throws ParseException {\n    if (field == null) {\n      List<BooleanClause> clauses = new ArrayList<BooleanClause>();\n      for (int i = 0; i < fields.length; i++) {\n        Query q = super.getFieldQuery(fields[i], queryText, quoted);\n        if (q != null) {\n          //If the user passes a map of boosts\n          if (boosts != null) {\n            //Get the boost from the map and apply them\n            Float boost = boosts.get(fields[i]);\n            if (boost != null) {\n              q.setBoost(boost.floatValue());\n            }\n          }\n          clauses.add(new BooleanClause(q, BooleanClause.Occur.SHOULD));\n        }\n      }\n      if (clauses.size() == 0)  // happens for stopwords\n        return null;\n      return getBooleanQuery(clauses, true);\n    }\n    Query q = super.getFieldQuery(field, queryText, quoted);\n    return q;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"33e4a95ed08968b85d84e9fba82424f1fd945fbb","date":1274878310,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/queryParser/MultiFieldQueryParser#getFieldQuery(String,String,boolean).mjava","sourceNew":null,"sourceOld":"  @Override\n  protected Query getFieldQuery(String field, String queryText, boolean quoted) throws ParseException {\n    if (field == null) {\n      List<BooleanClause> clauses = new ArrayList<BooleanClause>();\n      for (int i = 0; i < fields.length; i++) {\n        Query q = super.getFieldQuery(fields[i], queryText, quoted);\n        if (q != null) {\n          //If the user passes a map of boosts\n          if (boosts != null) {\n            //Get the boost from the map and apply them\n            Float boost = boosts.get(fields[i]);\n            if (boost != null) {\n              q.setBoost(boost.floatValue());\n            }\n          }\n          clauses.add(new BooleanClause(q, BooleanClause.Occur.SHOULD));\n        }\n      }\n      if (clauses.size() == 0)  // happens for stopwords\n        return null;\n      return getBooleanQuery(clauses, true);\n    }\n    Query q = super.getFieldQuery(field, queryText, quoted);\n    return q;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55f0d8e9a3f2e45eeea14a4803eaac02a0865097","date":1279565910,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/queryParser/MultiFieldQueryParser#getFieldQuery(String,String,boolean).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  protected Query getFieldQuery(String field, String queryText, boolean quoted) throws ParseException {\n    if (field == null) {\n      List<BooleanClause> clauses = new ArrayList<BooleanClause>();\n      for (int i = 0; i < fields.length; i++) {\n        Query q = super.getFieldQuery(fields[i], queryText, quoted);\n        if (q != null) {\n          //If the user passes a map of boosts\n          if (boosts != null) {\n            //Get the boost from the map and apply them\n            Float boost = boosts.get(fields[i]);\n            if (boost != null) {\n              q.setBoost(boost.floatValue());\n            }\n          }\n          clauses.add(new BooleanClause(q, BooleanClause.Occur.SHOULD));\n        }\n      }\n      if (clauses.size() == 0)  // happens for stopwords\n        return null;\n      return getBooleanQuery(clauses, true);\n    }\n    Query q = super.getFieldQuery(field, queryText, quoted);\n    return q;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/queryParser/MultiFieldQueryParser#getFieldQuery(String,String,boolean).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  protected Query getFieldQuery(String field, String queryText, boolean quoted) throws ParseException {\n    if (field == null) {\n      List<BooleanClause> clauses = new ArrayList<BooleanClause>();\n      for (int i = 0; i < fields.length; i++) {\n        Query q = super.getFieldQuery(fields[i], queryText, quoted);\n        if (q != null) {\n          //If the user passes a map of boosts\n          if (boosts != null) {\n            //Get the boost from the map and apply them\n            Float boost = boosts.get(fields[i]);\n            if (boost != null) {\n              q.setBoost(boost.floatValue());\n            }\n          }\n          clauses.add(new BooleanClause(q, BooleanClause.Occur.SHOULD));\n        }\n      }\n      if (clauses.size() == 0)  // happens for stopwords\n        return null;\n      return getBooleanQuery(clauses, true);\n    }\n    Query q = super.getFieldQuery(field, queryText, quoted);\n    return q;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"91a3609ac9a09ca0c8eee1b765401bbdacaceaf8","date":1310355420,"type":5,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queryparser/src/java/org/apache/lucene/queryparser/classic/MultiFieldQueryParser#getFieldQuery(String,String,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/queryParser/MultiFieldQueryParser#getFieldQuery(String,String,boolean).mjava","sourceNew":"  @Override\n  protected Query getFieldQuery(String field, String queryText, boolean quoted) throws ParseException {\n    if (field == null) {\n      List<BooleanClause> clauses = new ArrayList<BooleanClause>();\n      for (int i = 0; i < fields.length; i++) {\n        Query q = super.getFieldQuery(fields[i], queryText, quoted);\n        if (q != null) {\n          //If the user passes a map of boosts\n          if (boosts != null) {\n            //Get the boost from the map and apply them\n            Float boost = boosts.get(fields[i]);\n            if (boost != null) {\n              q.setBoost(boost.floatValue());\n            }\n          }\n          clauses.add(new BooleanClause(q, BooleanClause.Occur.SHOULD));\n        }\n      }\n      if (clauses.size() == 0)  // happens for stopwords\n        return null;\n      return getBooleanQuery(clauses, true);\n    }\n    Query q = super.getFieldQuery(field, queryText, quoted);\n    return q;\n  }\n\n","sourceOld":"  @Override\n  protected Query getFieldQuery(String field, String queryText, boolean quoted) throws ParseException {\n    if (field == null) {\n      List<BooleanClause> clauses = new ArrayList<BooleanClause>();\n      for (int i = 0; i < fields.length; i++) {\n        Query q = super.getFieldQuery(fields[i], queryText, quoted);\n        if (q != null) {\n          //If the user passes a map of boosts\n          if (boosts != null) {\n            //Get the boost from the map and apply them\n            Float boost = boosts.get(fields[i]);\n            if (boost != null) {\n              q.setBoost(boost.floatValue());\n            }\n          }\n          clauses.add(new BooleanClause(q, BooleanClause.Occur.SHOULD));\n        }\n      }\n      if (clauses.size() == 0)  // happens for stopwords\n        return null;\n      return getBooleanQuery(clauses, true);\n    }\n    Query q = super.getFieldQuery(field, queryText, quoted);\n    return q;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"91a3609ac9a09ca0c8eee1b765401bbdacaceaf8":["55f0d8e9a3f2e45eeea14a4803eaac02a0865097"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"33e4a95ed08968b85d84e9fba82424f1fd945fbb":["2ee056ec8e953928ee49a691090634eed1fa4d6b"],"2ee056ec8e953928ee49a691090634eed1fa4d6b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5f4e87790277826a2aea119328600dfb07761f32":["33e4a95ed08968b85d84e9fba82424f1fd945fbb","55f0d8e9a3f2e45eeea14a4803eaac02a0865097"],"55f0d8e9a3f2e45eeea14a4803eaac02a0865097":["33e4a95ed08968b85d84e9fba82424f1fd945fbb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["91a3609ac9a09ca0c8eee1b765401bbdacaceaf8"]},"commit2Childs":{"91a3609ac9a09ca0c8eee1b765401bbdacaceaf8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2ee056ec8e953928ee49a691090634eed1fa4d6b"],"33e4a95ed08968b85d84e9fba82424f1fd945fbb":["5f4e87790277826a2aea119328600dfb07761f32","55f0d8e9a3f2e45eeea14a4803eaac02a0865097"],"2ee056ec8e953928ee49a691090634eed1fa4d6b":["33e4a95ed08968b85d84e9fba82424f1fd945fbb"],"5f4e87790277826a2aea119328600dfb07761f32":[],"55f0d8e9a3f2e45eeea14a4803eaac02a0865097":["91a3609ac9a09ca0c8eee1b765401bbdacaceaf8","5f4e87790277826a2aea119328600dfb07761f32"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5f4e87790277826a2aea119328600dfb07761f32","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}