{"path":"lucene/src/test/org/apache/lucene/search/function/FunctionTestSetup#addDoc(IndexWriter,int).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/function/FunctionTestSetup#addDoc(IndexWriter,int).mjava","pathOld":"src/test/org/apache/lucene/search/function/FunctionTestSetup#addDoc(IndexWriter,int).mjava","sourceNew":"  private void addDoc(IndexWriter iw, int i) throws Exception {\n    Document d = new Document();\n    Fieldable f;\n    int scoreAndID = i + 1;\n\n    f = new Field(ID_FIELD, id2String(scoreAndID), Field.Store.YES, Field.Index.NOT_ANALYZED); // for debug purposes\n    f.setOmitNorms(true);\n    d.add(f);\n\n    f = new Field(TEXT_FIELD, \"text of doc\" + scoreAndID + textLine(i), Field.Store.NO, Field.Index.ANALYZED); // for regular search\n    f.setOmitNorms(true);\n    d.add(f);\n\n    f = new Field(INT_FIELD, \"\" + scoreAndID, Field.Store.NO, Field.Index.NOT_ANALYZED); // for function scoring\n    f.setOmitNorms(true);\n    d.add(f);\n\n    f = new Field(FLOAT_FIELD, scoreAndID + \".000\", Field.Store.NO, Field.Index.NOT_ANALYZED); // for function scoring\n    f.setOmitNorms(true);\n    d.add(f);\n\n    iw.addDocument(d);\n    log(\"added: \" + d);\n  }\n\n","sourceOld":"  private void addDoc(IndexWriter iw, int i) throws Exception {\n    Document d = new Document();\n    Fieldable f;\n    int scoreAndID = i + 1;\n\n    f = new Field(ID_FIELD, id2String(scoreAndID), Field.Store.YES, Field.Index.NOT_ANALYZED); // for debug purposes\n    f.setOmitNorms(true);\n    d.add(f);\n\n    f = new Field(TEXT_FIELD, \"text of doc\" + scoreAndID + textLine(i), Field.Store.NO, Field.Index.ANALYZED); // for regular search\n    f.setOmitNorms(true);\n    d.add(f);\n\n    f = new Field(INT_FIELD, \"\" + scoreAndID, Field.Store.NO, Field.Index.NOT_ANALYZED); // for function scoring\n    f.setOmitNorms(true);\n    d.add(f);\n\n    f = new Field(FLOAT_FIELD, scoreAndID + \".000\", Field.Store.NO, Field.Index.NOT_ANALYZED); // for function scoring\n    f.setOmitNorms(true);\n    d.add(f);\n\n    iw.addDocument(d);\n    log(\"added: \" + d);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e36f19452726fab77a51c5fcb61fd7d9ee91068","date":1280918442,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/function/FunctionTestSetup#addDoc(RandomIndexWriter,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/function/FunctionTestSetup#addDoc(IndexWriter,int).mjava","sourceNew":"  private void addDoc(RandomIndexWriter iw, int i) throws Exception {\n    Document d = new Document();\n    Fieldable f;\n    int scoreAndID = i + 1;\n\n    f = new Field(ID_FIELD, id2String(scoreAndID), Field.Store.YES, Field.Index.NOT_ANALYZED); // for debug purposes\n    f.setOmitNorms(true);\n    d.add(f);\n\n    f = new Field(TEXT_FIELD, \"text of doc\" + scoreAndID + textLine(i), Field.Store.NO, Field.Index.ANALYZED); // for regular search\n    f.setOmitNorms(true);\n    d.add(f);\n\n    f = new Field(INT_FIELD, \"\" + scoreAndID, Field.Store.NO, Field.Index.NOT_ANALYZED); // for function scoring\n    f.setOmitNorms(true);\n    d.add(f);\n\n    f = new Field(FLOAT_FIELD, scoreAndID + \".000\", Field.Store.NO, Field.Index.NOT_ANALYZED); // for function scoring\n    f.setOmitNorms(true);\n    d.add(f);\n\n    iw.addDocument(d);\n    log(\"added: \" + d);\n  }\n\n","sourceOld":"  private void addDoc(IndexWriter iw, int i) throws Exception {\n    Document d = new Document();\n    Fieldable f;\n    int scoreAndID = i + 1;\n\n    f = new Field(ID_FIELD, id2String(scoreAndID), Field.Store.YES, Field.Index.NOT_ANALYZED); // for debug purposes\n    f.setOmitNorms(true);\n    d.add(f);\n\n    f = new Field(TEXT_FIELD, \"text of doc\" + scoreAndID + textLine(i), Field.Store.NO, Field.Index.ANALYZED); // for regular search\n    f.setOmitNorms(true);\n    d.add(f);\n\n    f = new Field(INT_FIELD, \"\" + scoreAndID, Field.Store.NO, Field.Index.NOT_ANALYZED); // for function scoring\n    f.setOmitNorms(true);\n    d.add(f);\n\n    f = new Field(FLOAT_FIELD, scoreAndID + \".000\", Field.Store.NO, Field.Index.NOT_ANALYZED); // for function scoring\n    f.setOmitNorms(true);\n    d.add(f);\n\n    iw.addDocument(d);\n    log(\"added: \" + d);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/search/function/FunctionTestSetup#addDoc(IndexWriter,int).mjava","sourceNew":null,"sourceOld":"  private void addDoc(IndexWriter iw, int i) throws Exception {\n    Document d = new Document();\n    Fieldable f;\n    int scoreAndID = i + 1;\n\n    f = new Field(ID_FIELD, id2String(scoreAndID), Field.Store.YES, Field.Index.NOT_ANALYZED); // for debug purposes\n    f.setOmitNorms(true);\n    d.add(f);\n\n    f = new Field(TEXT_FIELD, \"text of doc\" + scoreAndID + textLine(i), Field.Store.NO, Field.Index.ANALYZED); // for regular search\n    f.setOmitNorms(true);\n    d.add(f);\n\n    f = new Field(INT_FIELD, \"\" + scoreAndID, Field.Store.NO, Field.Index.NOT_ANALYZED); // for function scoring\n    f.setOmitNorms(true);\n    d.add(f);\n\n    f = new Field(FLOAT_FIELD, scoreAndID + \".000\", Field.Store.NO, Field.Index.NOT_ANALYZED); // for function scoring\n    f.setOmitNorms(true);\n    d.add(f);\n\n    iw.addDocument(d);\n    log(\"added: \" + d);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0e36f19452726fab77a51c5fcb61fd7d9ee91068":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["9454a6510e2db155fb01faa5c049b06ece95fab9","0e36f19452726fab77a51c5fcb61fd7d9ee91068"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0e36f19452726fab77a51c5fcb61fd7d9ee91068"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"0e36f19452726fab77a51c5fcb61fd7d9ee91068":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["0e36f19452726fab77a51c5fcb61fd7d9ee91068","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}