{"path":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoBaseCompositeShape#GeoBaseCompositeShape(PlanetModel,InputStream,Class[T]).mjava","commits":[{"id":"4fb8b37902dbdd7832727cccdd1d3c5441074fa5","date":1503643931,"type":0,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoBaseCompositeShape#GeoBaseCompositeShape(PlanetModel,InputStream,Class[T]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Constructor for deserialization.\n   * @param planetModel is the planet model.\n   * @param inputStream is the input stream.\n   * @param clazz is the class of the generic.\n   */\n  public GeoBaseCompositeShape(final PlanetModel planetModel, final InputStream inputStream, final Class<T> clazz) throws IOException {\n    this(planetModel);\n    final SerializableObject[] array = SerializableObject.readHeterogeneousArray(planetModel, inputStream);\n    for (final SerializableObject member : array) {\n      if (!(clazz.isAssignableFrom(member.getClass()))) {\n        throw new IOException(\"Can't deserialize composite because member has wrong type: \"+member.getClass().getName());\n      }\n      addShape(clazz.cast(member));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"10e189d8bfedacdd349fb0522782430967a57c10","date":1503662313,"type":3,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoBaseCompositeShape#GeoBaseCompositeShape(PlanetModel,InputStream,Class[T]).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoBaseCompositeShape#GeoBaseCompositeShape(PlanetModel,InputStream,Class[T]).mjava","sourceNew":"  /**\n   * Constructor for deserialization.\n   * @param planetModel is the planet model.\n   * @param inputStream is the input stream.\n   * @param clazz is the class of the generic.\n   */\n  public GeoBaseCompositeShape(final PlanetModel planetModel, final InputStream inputStream, final Class<T> clazz) throws IOException {\n    this(planetModel);\n    final T[] array = SerializableObject.readHeterogeneousArray(planetModel, inputStream, clazz);\n    for (final SerializableObject member : array) {\n      addShape(clazz.cast(member));\n    }\n  }\n\n","sourceOld":"  /**\n   * Constructor for deserialization.\n   * @param planetModel is the planet model.\n   * @param inputStream is the input stream.\n   * @param clazz is the class of the generic.\n   */\n  public GeoBaseCompositeShape(final PlanetModel planetModel, final InputStream inputStream, final Class<T> clazz) throws IOException {\n    this(planetModel);\n    final SerializableObject[] array = SerializableObject.readHeterogeneousArray(planetModel, inputStream);\n    for (final SerializableObject member : array) {\n      if (!(clazz.isAssignableFrom(member.getClass()))) {\n        throw new IOException(\"Can't deserialize composite because member has wrong type: \"+member.getClass().getName());\n      }\n      addShape(clazz.cast(member));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a7809d1d753b67f48b1a706e17034bf8b624ea3","date":1504366927,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoBaseCompositeShape#GeoBaseCompositeShape(PlanetModel,InputStream,Class[T]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Constructor for deserialization.\n   * @param planetModel is the planet model.\n   * @param inputStream is the input stream.\n   * @param clazz is the class of the generic.\n   */\n  public GeoBaseCompositeShape(final PlanetModel planetModel, final InputStream inputStream, final Class<T> clazz) throws IOException {\n    this(planetModel);\n    final T[] array = SerializableObject.readHeterogeneousArray(planetModel, inputStream, clazz);\n    for (final SerializableObject member : array) {\n      addShape(clazz.cast(member));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"10e189d8bfedacdd349fb0522782430967a57c10":["4fb8b37902dbdd7832727cccdd1d3c5441074fa5"],"3a7809d1d753b67f48b1a706e17034bf8b624ea3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","10e189d8bfedacdd349fb0522782430967a57c10"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4fb8b37902dbdd7832727cccdd1d3c5441074fa5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["10e189d8bfedacdd349fb0522782430967a57c10"]},"commit2Childs":{"10e189d8bfedacdd349fb0522782430967a57c10":["3a7809d1d753b67f48b1a706e17034bf8b624ea3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a7809d1d753b67f48b1a706e17034bf8b624ea3":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a7809d1d753b67f48b1a706e17034bf8b624ea3","4fb8b37902dbdd7832727cccdd1d3c5441074fa5"],"4fb8b37902dbdd7832727cccdd1d3c5441074fa5":["10e189d8bfedacdd349fb0522782430967a57c10"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3a7809d1d753b67f48b1a706e17034bf8b624ea3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}