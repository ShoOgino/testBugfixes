{"path":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/fr/FrenchStemFilter#incrementToken().mjava","commits":[{"id":"9b5756469957918cac40a831acec9cf01c8c2bb3","date":1249167152,"type":0,"author":"Michael Busch","isMerge":false,"pathNew":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/fr/FrenchStemFilter#incrementToken().mjava","pathOld":"/dev/null","sourceNew":"\t/**\n\t * @return  Returns true for the next token in the stream, or false at EOS\n\t */\n\tpublic boolean incrementToken() throws IOException {\n\t  if (input.incrementToken()) {\n\t    String term = termAtt.term();\n\n\t    // Check the exclusion table\n\t    if ( exclusions == null || !exclusions.contains( term ) ) {\n\t      String s = stemmer.stem( term );\n\t      // If not stemmed, don't waste the time  adjusting the token.\n\t      if ((s != null) && !s.equals( term ) )\n\t        termAtt.setTermBuffer(s);\n\t    }\n\t    return true;\n\t  } else {\n\t    return false;\n\t  }\n\t}\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d57eb7c98c08c03af6e4cd83509df31c81ac16af","date":1257684312,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/fr/FrenchStemFilter#incrementToken().mjava","pathOld":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/fr/FrenchStemFilter#incrementToken().mjava","sourceNew":"\t/**\n\t * @return  Returns true for the next token in the stream, or false at EOS\n\t */\n\t@Override\n\tpublic boolean incrementToken() throws IOException {\n\t  if (input.incrementToken()) {\n\t    String term = termAtt.term();\n\n\t    // Check the exclusion table\n\t    if ( exclusions == null || !exclusions.contains( term ) ) {\n\t      String s = stemmer.stem( term );\n\t      // If not stemmed, don't waste the time  adjusting the token.\n\t      if ((s != null) && !s.equals( term ) )\n\t        termAtt.setTermBuffer(s);\n\t    }\n\t    return true;\n\t  } else {\n\t    return false;\n\t  }\n\t}\n\n","sourceOld":"\t/**\n\t * @return  Returns true for the next token in the stream, or false at EOS\n\t */\n\tpublic boolean incrementToken() throws IOException {\n\t  if (input.incrementToken()) {\n\t    String term = termAtt.term();\n\n\t    // Check the exclusion table\n\t    if ( exclusions == null || !exclusions.contains( term ) ) {\n\t      String s = stemmer.stem( term );\n\t      // If not stemmed, don't waste the time  adjusting the token.\n\t      if ((s != null) && !s.equals( term ) )\n\t        termAtt.setTermBuffer(s);\n\t    }\n\t    return true;\n\t  } else {\n\t    return false;\n\t  }\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b9fc748b8fc4097ccc222bdf2948cc2d20770c54","date":1264591145,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/fr/FrenchStemFilter#incrementToken().mjava","pathOld":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/fr/FrenchStemFilter#incrementToken().mjava","sourceNew":"\t/**\n\t * @return  Returns true for the next token in the stream, or false at EOS\n\t */\n\t@Override\n\tpublic boolean incrementToken() throws IOException {\n\t  if (input.incrementToken()) {\n\t    String term = termAtt.term();\n\n\t    // Check the exclusion table\n\t    if ( !keywordAttr.isKeyword() && (exclusions == null || !exclusions.contains( term )) ) {\n\t      String s = stemmer.stem( term );\n\t      // If not stemmed, don't waste the time  adjusting the token.\n\t      if ((s != null) && !s.equals( term ) )\n\t        termAtt.setTermBuffer(s);\n\t    }\n\t    return true;\n\t  } else {\n\t    return false;\n\t  }\n\t}\n\n","sourceOld":"\t/**\n\t * @return  Returns true for the next token in the stream, or false at EOS\n\t */\n\t@Override\n\tpublic boolean incrementToken() throws IOException {\n\t  if (input.incrementToken()) {\n\t    String term = termAtt.term();\n\n\t    // Check the exclusion table\n\t    if ( exclusions == null || !exclusions.contains( term ) ) {\n\t      String s = stemmer.stem( term );\n\t      // If not stemmed, don't waste the time  adjusting the token.\n\t      if ((s != null) && !s.equals( term ) )\n\t        termAtt.setTermBuffer(s);\n\t    }\n\t    return true;\n\t  } else {\n\t    return false;\n\t  }\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/fr/FrenchStemFilter#incrementToken().mjava","pathOld":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/fr/FrenchStemFilter#incrementToken().mjava","sourceNew":"\t/**\n\t * @return  Returns true for the next token in the stream, or false at EOS\n\t */\n\t@Override\n\tpublic boolean incrementToken() throws IOException {\n\t  if (input.incrementToken()) {\n\t    String term = termAtt.term();\n\n\t    // Check the exclusion table\n\t    if ( !keywordAttr.isKeyword() && (exclusions == null || !exclusions.contains( term )) ) {\n\t      String s = stemmer.stem( term );\n\t      // If not stemmed, don't waste the time  adjusting the token.\n\t      if ((s != null) && !s.equals( term ) )\n\t        termAtt.setTermBuffer(s);\n\t    }\n\t    return true;\n\t  } else {\n\t    return false;\n\t  }\n\t}\n\n","sourceOld":"\t/**\n\t * @return  Returns true for the next token in the stream, or false at EOS\n\t */\n\t@Override\n\tpublic boolean incrementToken() throws IOException {\n\t  if (input.incrementToken()) {\n\t    String term = termAtt.term();\n\n\t    // Check the exclusion table\n\t    if ( !keywordAttr.isKeyword() && (exclusions == null || !exclusions.contains( term )) ) {\n\t      String s = stemmer.stem( term );\n\t      // If not stemmed, don't waste the time  adjusting the token.\n\t      if ((s != null) && !s.equals( term ) )\n\t        termAtt.setTermBuffer(s);\n\t    }\n\t    return true;\n\t  } else {\n\t    return false;\n\t  }\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b9fc748b8fc4097ccc222bdf2948cc2d20770c54":["d57eb7c98c08c03af6e4cd83509df31c81ac16af"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9b5756469957918cac40a831acec9cf01c8c2bb3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d57eb7c98c08c03af6e4cd83509df31c81ac16af":["9b5756469957918cac40a831acec9cf01c8c2bb3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["b9fc748b8fc4097ccc222bdf2948cc2d20770c54"]},"commit2Childs":{"b9fc748b8fc4097ccc222bdf2948cc2d20770c54":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9b5756469957918cac40a831acec9cf01c8c2bb3"],"9b5756469957918cac40a831acec9cf01c8c2bb3":["d57eb7c98c08c03af6e4cd83509df31c81ac16af"],"d57eb7c98c08c03af6e4cd83509df31c81ac16af":["b9fc748b8fc4097ccc222bdf2948cc2d20770c54"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}