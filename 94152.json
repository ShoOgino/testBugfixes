{"path":"lucene/src/java/org/apache/lucene/queryParser/QueryParserBase#parse(String).mjava","commits":[{"id":"9e87c4193bc100c3b96235f14bee01a5b2009ce5","date":1287756261,"type":1,"author":"Yonik Seeley","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/queryParser/QueryParserBase#parse(String).mjava","pathOld":"lucene/src/java/org/apache/lucene/queryParser/QueryParser#parse(String).mjava","sourceNew":"  /** Parses a query string, returning a {@link org.apache.lucene.search.Query}.\r\n   *  @param query  the query string to be parsed.\r\n   *  @throws ParseException if the parsing fails\r\n   */\r\n  public Query parse(String query) throws ParseException {\r\n    ReInit(new FastCharStream(new StringReader(query)));\r\n    try {\r\n      // TopLevelQuery is a Query followed by the end-of-input (EOF)\r\n      Query res = TopLevelQuery(field);\r\n      return res!=null ? res : newBooleanQuery(false);\r\n    }\r\n    catch (ParseException tme) {\r\n      // rethrow to include the original query:\r\n      ParseException e = new ParseException(\"Cannot parse '\" +query+ \"': \" + tme.getMessage());\r\n      e.initCause(tme);\r\n      throw e;\r\n    }\r\n    catch (TokenMgrError tme) {\r\n      ParseException e = new ParseException(\"Cannot parse '\" +query+ \"': \" + tme.getMessage());\r\n      e.initCause(tme);\r\n      throw e;\r\n    }\r\n    catch (BooleanQuery.TooManyClauses tmc) {\r\n      ParseException e = new ParseException(\"Cannot parse '\" +query+ \"': too many boolean clauses\");\r\n      e.initCause(tmc);\r\n      throw e;\r\n    }\r\n  }\r\n\n","sourceOld":"  /** Parses a query string, returning a {@link org.apache.lucene.search.Query}.\n   *  @param query  the query string to be parsed.\n   *  @throws ParseException if the parsing fails\n   */\n  public Query parse(String query) throws ParseException {\n    ReInit(new FastCharStream(new StringReader(query)));\n    try {\n      // TopLevelQuery is a Query followed by the end-of-input (EOF)\n      Query res = TopLevelQuery(field);\n      return res!=null ? res : newBooleanQuery(false);\n    }\n    catch (ParseException tme) {\n      // rethrow to include the original query:\n      ParseException e = new ParseException(\"Cannot parse '\" +query+ \"': \" + tme.getMessage());\n      e.initCause(tme);\n      throw e;\n    }\n    catch (TokenMgrError tme) {\n      ParseException e = new ParseException(\"Cannot parse '\" +query+ \"': \" + tme.getMessage());\n      e.initCause(tme);\n      throw e;\n    }\n    catch (BooleanQuery.TooManyClauses tmc) {\n      ParseException e = new ParseException(\"Cannot parse '\" +query+ \"': too many boolean clauses\");\n      e.initCause(tmc);\n      throw e;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b12d3e81e0f95a4527b5703953c503f71120ffcc","date":1288080933,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/queryParser/QueryParserBase#parse(String).mjava","pathOld":"lucene/src/java/org/apache/lucene/queryParser/QueryParser#parse(String).mjava","sourceNew":"  /** Parses a query string, returning a {@link org.apache.lucene.search.Query}.\r\n   *  @param query  the query string to be parsed.\r\n   *  @throws ParseException if the parsing fails\r\n   */\r\n  public Query parse(String query) throws ParseException {\r\n    ReInit(new FastCharStream(new StringReader(query)));\r\n    try {\r\n      // TopLevelQuery is a Query followed by the end-of-input (EOF)\r\n      Query res = TopLevelQuery(field);\r\n      return res!=null ? res : newBooleanQuery(false);\r\n    }\r\n    catch (ParseException tme) {\r\n      // rethrow to include the original query:\r\n      ParseException e = new ParseException(\"Cannot parse '\" +query+ \"': \" + tme.getMessage());\r\n      e.initCause(tme);\r\n      throw e;\r\n    }\r\n    catch (TokenMgrError tme) {\r\n      ParseException e = new ParseException(\"Cannot parse '\" +query+ \"': \" + tme.getMessage());\r\n      e.initCause(tme);\r\n      throw e;\r\n    }\r\n    catch (BooleanQuery.TooManyClauses tmc) {\r\n      ParseException e = new ParseException(\"Cannot parse '\" +query+ \"': too many boolean clauses\");\r\n      e.initCause(tmc);\r\n      throw e;\r\n    }\r\n  }\r\n\n","sourceOld":"  /** Parses a query string, returning a {@link org.apache.lucene.search.Query}.\n   *  @param query  the query string to be parsed.\n   *  @throws ParseException if the parsing fails\n   */\n  public Query parse(String query) throws ParseException {\n    ReInit(new FastCharStream(new StringReader(query)));\n    try {\n      // TopLevelQuery is a Query followed by the end-of-input (EOF)\n      Query res = TopLevelQuery(field);\n      return res!=null ? res : newBooleanQuery(false);\n    }\n    catch (ParseException tme) {\n      // rethrow to include the original query:\n      ParseException e = new ParseException(\"Cannot parse '\" +query+ \"': \" + tme.getMessage());\n      e.initCause(tme);\n      throw e;\n    }\n    catch (TokenMgrError tme) {\n      ParseException e = new ParseException(\"Cannot parse '\" +query+ \"': \" + tme.getMessage());\n      e.initCause(tme);\n      throw e;\n    }\n    catch (BooleanQuery.TooManyClauses tmc) {\n      ParseException e = new ParseException(\"Cannot parse '\" +query+ \"': too many boolean clauses\");\n      e.initCause(tmc);\n      throw e;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/queryParser/QueryParserBase#parse(String).mjava","pathOld":"/dev/null","sourceNew":"  /** Parses a query string, returning a {@link org.apache.lucene.search.Query}.\r\n   *  @param query  the query string to be parsed.\r\n   *  @throws ParseException if the parsing fails\r\n   */\r\n  public Query parse(String query) throws ParseException {\r\n    ReInit(new FastCharStream(new StringReader(query)));\r\n    try {\r\n      // TopLevelQuery is a Query followed by the end-of-input (EOF)\r\n      Query res = TopLevelQuery(field);\r\n      return res!=null ? res : newBooleanQuery(false);\r\n    }\r\n    catch (ParseException tme) {\r\n      // rethrow to include the original query:\r\n      ParseException e = new ParseException(\"Cannot parse '\" +query+ \"': \" + tme.getMessage());\r\n      e.initCause(tme);\r\n      throw e;\r\n    }\r\n    catch (TokenMgrError tme) {\r\n      ParseException e = new ParseException(\"Cannot parse '\" +query+ \"': \" + tme.getMessage());\r\n      e.initCause(tme);\r\n      throw e;\r\n    }\r\n    catch (BooleanQuery.TooManyClauses tmc) {\r\n      ParseException e = new ParseException(\"Cannot parse '\" +query+ \"': too many boolean clauses\");\r\n      e.initCause(tmc);\r\n      throw e;\r\n    }\r\n  }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bed62fe6383040eaff2ec720cdc55bb1462c61da","date":1296408595,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/queryParser/QueryParserBase#parse(String).mjava","pathOld":"lucene/src/java/org/apache/lucene/queryParser/QueryParserBase#parse(String).mjava","sourceNew":"  /** Parses a query string, returning a {@link org.apache.lucene.search.Query}.\n   *  @param query  the query string to be parsed.\n   *  @throws ParseException if the parsing fails\n   */\n  public Query parse(String query) throws ParseException {\n    ReInit(new FastCharStream(new StringReader(query)));\n    try {\n      // TopLevelQuery is a Query followed by the end-of-input (EOF)\n      Query res = TopLevelQuery(field);\n      return res!=null ? res : newBooleanQuery(false);\n    }\n    catch (ParseException tme) {\n      // rethrow to include the original query:\n      ParseException e = new ParseException(\"Cannot parse '\" +query+ \"': \" + tme.getMessage());\n      e.initCause(tme);\n      throw e;\n    }\n    catch (TokenMgrError tme) {\n      ParseException e = new ParseException(\"Cannot parse '\" +query+ \"': \" + tme.getMessage());\n      e.initCause(tme);\n      throw e;\n    }\n    catch (BooleanQuery.TooManyClauses tmc) {\n      ParseException e = new ParseException(\"Cannot parse '\" +query+ \"': too many boolean clauses\");\n      e.initCause(tmc);\n      throw e;\n    }\n  }\n\n","sourceOld":"  /** Parses a query string, returning a {@link org.apache.lucene.search.Query}.\r\n   *  @param query  the query string to be parsed.\r\n   *  @throws ParseException if the parsing fails\r\n   */\r\n  public Query parse(String query) throws ParseException {\r\n    ReInit(new FastCharStream(new StringReader(query)));\r\n    try {\r\n      // TopLevelQuery is a Query followed by the end-of-input (EOF)\r\n      Query res = TopLevelQuery(field);\r\n      return res!=null ? res : newBooleanQuery(false);\r\n    }\r\n    catch (ParseException tme) {\r\n      // rethrow to include the original query:\r\n      ParseException e = new ParseException(\"Cannot parse '\" +query+ \"': \" + tme.getMessage());\r\n      e.initCause(tme);\r\n      throw e;\r\n    }\r\n    catch (TokenMgrError tme) {\r\n      ParseException e = new ParseException(\"Cannot parse '\" +query+ \"': \" + tme.getMessage());\r\n      e.initCause(tme);\r\n      throw e;\r\n    }\r\n    catch (BooleanQuery.TooManyClauses tmc) {\r\n      ParseException e = new ParseException(\"Cannot parse '\" +query+ \"': too many boolean clauses\");\r\n      e.initCause(tmc);\r\n      throw e;\r\n    }\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/queryParser/QueryParserBase#parse(String).mjava","pathOld":"lucene/src/java/org/apache/lucene/queryParser/QueryParserBase#parse(String).mjava","sourceNew":"  /** Parses a query string, returning a {@link org.apache.lucene.search.Query}.\n   *  @param query  the query string to be parsed.\n   *  @throws ParseException if the parsing fails\n   */\n  public Query parse(String query) throws ParseException {\n    ReInit(new FastCharStream(new StringReader(query)));\n    try {\n      // TopLevelQuery is a Query followed by the end-of-input (EOF)\n      Query res = TopLevelQuery(field);\n      return res!=null ? res : newBooleanQuery(false);\n    }\n    catch (ParseException tme) {\n      // rethrow to include the original query:\n      ParseException e = new ParseException(\"Cannot parse '\" +query+ \"': \" + tme.getMessage());\n      e.initCause(tme);\n      throw e;\n    }\n    catch (TokenMgrError tme) {\n      ParseException e = new ParseException(\"Cannot parse '\" +query+ \"': \" + tme.getMessage());\n      e.initCause(tme);\n      throw e;\n    }\n    catch (BooleanQuery.TooManyClauses tmc) {\n      ParseException e = new ParseException(\"Cannot parse '\" +query+ \"': too many boolean clauses\");\n      e.initCause(tmc);\n      throw e;\n    }\n  }\n\n","sourceOld":"  /** Parses a query string, returning a {@link org.apache.lucene.search.Query}.\r\n   *  @param query  the query string to be parsed.\r\n   *  @throws ParseException if the parsing fails\r\n   */\r\n  public Query parse(String query) throws ParseException {\r\n    ReInit(new FastCharStream(new StringReader(query)));\r\n    try {\r\n      // TopLevelQuery is a Query followed by the end-of-input (EOF)\r\n      Query res = TopLevelQuery(field);\r\n      return res!=null ? res : newBooleanQuery(false);\r\n    }\r\n    catch (ParseException tme) {\r\n      // rethrow to include the original query:\r\n      ParseException e = new ParseException(\"Cannot parse '\" +query+ \"': \" + tme.getMessage());\r\n      e.initCause(tme);\r\n      throw e;\r\n    }\r\n    catch (TokenMgrError tme) {\r\n      ParseException e = new ParseException(\"Cannot parse '\" +query+ \"': \" + tme.getMessage());\r\n      e.initCause(tme);\r\n      throw e;\r\n    }\r\n    catch (BooleanQuery.TooManyClauses tmc) {\r\n      ParseException e = new ParseException(\"Cannot parse '\" +query+ \"': too many boolean clauses\");\r\n      e.initCause(tmc);\r\n      throw e;\r\n    }\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/queryParser/QueryParserBase#parse(String).mjava","pathOld":"lucene/src/java/org/apache/lucene/queryParser/QueryParserBase#parse(String).mjava","sourceNew":"  /** Parses a query string, returning a {@link org.apache.lucene.search.Query}.\n   *  @param query  the query string to be parsed.\n   *  @throws ParseException if the parsing fails\n   */\n  public Query parse(String query) throws ParseException {\n    ReInit(new FastCharStream(new StringReader(query)));\n    try {\n      // TopLevelQuery is a Query followed by the end-of-input (EOF)\n      Query res = TopLevelQuery(field);\n      return res!=null ? res : newBooleanQuery(false);\n    }\n    catch (ParseException tme) {\n      // rethrow to include the original query:\n      ParseException e = new ParseException(\"Cannot parse '\" +query+ \"': \" + tme.getMessage());\n      e.initCause(tme);\n      throw e;\n    }\n    catch (TokenMgrError tme) {\n      ParseException e = new ParseException(\"Cannot parse '\" +query+ \"': \" + tme.getMessage());\n      e.initCause(tme);\n      throw e;\n    }\n    catch (BooleanQuery.TooManyClauses tmc) {\n      ParseException e = new ParseException(\"Cannot parse '\" +query+ \"': too many boolean clauses\");\n      e.initCause(tmc);\n      throw e;\n    }\n  }\n\n","sourceOld":"  /** Parses a query string, returning a {@link org.apache.lucene.search.Query}.\r\n   *  @param query  the query string to be parsed.\r\n   *  @throws ParseException if the parsing fails\r\n   */\r\n  public Query parse(String query) throws ParseException {\r\n    ReInit(new FastCharStream(new StringReader(query)));\r\n    try {\r\n      // TopLevelQuery is a Query followed by the end-of-input (EOF)\r\n      Query res = TopLevelQuery(field);\r\n      return res!=null ? res : newBooleanQuery(false);\r\n    }\r\n    catch (ParseException tme) {\r\n      // rethrow to include the original query:\r\n      ParseException e = new ParseException(\"Cannot parse '\" +query+ \"': \" + tme.getMessage());\r\n      e.initCause(tme);\r\n      throw e;\r\n    }\r\n    catch (TokenMgrError tme) {\r\n      ParseException e = new ParseException(\"Cannot parse '\" +query+ \"': \" + tme.getMessage());\r\n      e.initCause(tme);\r\n      throw e;\r\n    }\r\n    catch (BooleanQuery.TooManyClauses tmc) {\r\n      ParseException e = new ParseException(\"Cannot parse '\" +query+ \"': too many boolean clauses\");\r\n      e.initCause(tmc);\r\n      throw e;\r\n    }\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"91a3609ac9a09ca0c8eee1b765401bbdacaceaf8","date":1310355420,"type":5,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParserBase#parse(String).mjava","pathOld":"lucene/src/java/org/apache/lucene/queryParser/QueryParserBase#parse(String).mjava","sourceNew":"  /** Parses a query string, returning a {@link org.apache.lucene.search.Query}.\n   *  @param query  the query string to be parsed.\n   *  @throws ParseException if the parsing fails\n   */\n  public Query parse(String query) throws ParseException {\n    ReInit(new FastCharStream(new StringReader(query)));\n    try {\n      // TopLevelQuery is a Query followed by the end-of-input (EOF)\n      Query res = TopLevelQuery(field);\n      return res!=null ? res : newBooleanQuery(false);\n    }\n    catch (ParseException tme) {\n      // rethrow to include the original query:\n      ParseException e = new ParseException(\"Cannot parse '\" +query+ \"': \" + tme.getMessage());\n      e.initCause(tme);\n      throw e;\n    }\n    catch (TokenMgrError tme) {\n      ParseException e = new ParseException(\"Cannot parse '\" +query+ \"': \" + tme.getMessage());\n      e.initCause(tme);\n      throw e;\n    }\n    catch (BooleanQuery.TooManyClauses tmc) {\n      ParseException e = new ParseException(\"Cannot parse '\" +query+ \"': too many boolean clauses\");\n      e.initCause(tmc);\n      throw e;\n    }\n  }\n\n","sourceOld":"  /** Parses a query string, returning a {@link org.apache.lucene.search.Query}.\n   *  @param query  the query string to be parsed.\n   *  @throws ParseException if the parsing fails\n   */\n  public Query parse(String query) throws ParseException {\n    ReInit(new FastCharStream(new StringReader(query)));\n    try {\n      // TopLevelQuery is a Query followed by the end-of-input (EOF)\n      Query res = TopLevelQuery(field);\n      return res!=null ? res : newBooleanQuery(false);\n    }\n    catch (ParseException tme) {\n      // rethrow to include the original query:\n      ParseException e = new ParseException(\"Cannot parse '\" +query+ \"': \" + tme.getMessage());\n      e.initCause(tme);\n      throw e;\n    }\n    catch (TokenMgrError tme) {\n      ParseException e = new ParseException(\"Cannot parse '\" +query+ \"': \" + tme.getMessage());\n      e.initCause(tme);\n      throw e;\n    }\n    catch (BooleanQuery.TooManyClauses tmc) {\n      ParseException e = new ParseException(\"Cannot parse '\" +query+ \"': too many boolean clauses\");\n      e.initCause(tmc);\n      throw e;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"29ef99d61cda9641b6250bf9567329a6e65f901d":["b12d3e81e0f95a4527b5703953c503f71120ffcc","bed62fe6383040eaff2ec720cdc55bb1462c61da"],"91a3609ac9a09ca0c8eee1b765401bbdacaceaf8":["bed62fe6383040eaff2ec720cdc55bb1462c61da"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9e87c4193bc100c3b96235f14bee01a5b2009ce5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b12d3e81e0f95a4527b5703953c503f71120ffcc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9e87c4193bc100c3b96235f14bee01a5b2009ce5"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9e87c4193bc100c3b96235f14bee01a5b2009ce5"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","bed62fe6383040eaff2ec720cdc55bb1462c61da"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["91a3609ac9a09ca0c8eee1b765401bbdacaceaf8"],"bed62fe6383040eaff2ec720cdc55bb1462c61da":["9e87c4193bc100c3b96235f14bee01a5b2009ce5"]},"commit2Childs":{"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"91a3609ac9a09ca0c8eee1b765401bbdacaceaf8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9e87c4193bc100c3b96235f14bee01a5b2009ce5","b12d3e81e0f95a4527b5703953c503f71120ffcc","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"b12d3e81e0f95a4527b5703953c503f71120ffcc":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"9e87c4193bc100c3b96235f14bee01a5b2009ce5":["b12d3e81e0f95a4527b5703953c503f71120ffcc","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","bed62fe6383040eaff2ec720cdc55bb1462c61da"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"bed62fe6383040eaff2ec720cdc55bb1462c61da":["29ef99d61cda9641b6250bf9567329a6e65f901d","91a3609ac9a09ca0c8eee1b765401bbdacaceaf8","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}