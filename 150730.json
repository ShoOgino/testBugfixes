{"path":"solr/src/java/org/apache/solr/handler/component/PivotFacetComponent#distributedProcess(ResponseBuilder).mjava","commits":[{"id":"601c6168c1d70f05f7a6a2d8c7ad4ceb218f3541","date":1284416022,"type":0,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/component/PivotFacetComponent#distributedProcess(ResponseBuilder).mjava","pathOld":"/dev/null","sourceNew":"  @Override\r\n  public int distributedProcess(ResponseBuilder rb) throws IOException {\r\n    if (!rb.doFacets) {\r\n      return ResponseBuilder.STAGE_DONE;\r\n    }\r\n\r\n    if (rb.stage == ResponseBuilder.STAGE_GET_FIELDS) {\r\n      SolrParams params = rb.req.getParams();\r\n      String[] pivots = params.getParams(FacetParams.FACET_PIVOT);\r\n      for ( ShardRequest sreq : rb.outgoing ) {\r\n        if (( sreq.purpose & ShardRequest.PURPOSE_GET_FIELDS ) != 0\r\n            && sreq.shards != null && sreq.shards.length == 1 ) {\r\n          sreq.params.set( FacetParams.FACET, \"true\" );\r\n          sreq.params.set( FacetParams.FACET_PIVOT, pivots );\r\n          sreq.params.set( FacetParams.FACET_PIVOT_MINCOUNT, 1 ); // keep this at 1 regardless so that it accumulates everything\r\n            }\r\n      }\r\n    }\r\n    return ResponseBuilder.STAGE_DONE;\r\n  }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e904610f0db3fdf2ea10c5701f5f4f86c1e9ade","date":1286051536,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/component/PivotFacetComponent#distributedProcess(ResponseBuilder).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/PivotFacetComponent#distributedProcess(ResponseBuilder).mjava","sourceNew":"  @Override\n  public int distributedProcess(ResponseBuilder rb) throws IOException {\n    if (!rb.doFacets) {\n      return ResponseBuilder.STAGE_DONE;\n    }\n\n    if (rb.stage == ResponseBuilder.STAGE_GET_FIELDS) {\n      SolrParams params = rb.req.getParams();\n      String[] pivots = params.getParams(FacetParams.FACET_PIVOT);\n      for ( ShardRequest sreq : rb.outgoing ) {\n        if (( sreq.purpose & ShardRequest.PURPOSE_GET_FIELDS ) != 0\n            && sreq.shards != null && sreq.shards.length == 1 ) {\n          sreq.params.set( FacetParams.FACET, \"true\" );\n          sreq.params.set( FacetParams.FACET_PIVOT, pivots );\n          sreq.params.set( FacetParams.FACET_PIVOT_MINCOUNT, 1 ); // keep this at 1 regardless so that it accumulates everything\n            }\n      }\n    }\n    return ResponseBuilder.STAGE_DONE;\n  }\n\n","sourceOld":"  @Override\r\n  public int distributedProcess(ResponseBuilder rb) throws IOException {\r\n    if (!rb.doFacets) {\r\n      return ResponseBuilder.STAGE_DONE;\r\n    }\r\n\r\n    if (rb.stage == ResponseBuilder.STAGE_GET_FIELDS) {\r\n      SolrParams params = rb.req.getParams();\r\n      String[] pivots = params.getParams(FacetParams.FACET_PIVOT);\r\n      for ( ShardRequest sreq : rb.outgoing ) {\r\n        if (( sreq.purpose & ShardRequest.PURPOSE_GET_FIELDS ) != 0\r\n            && sreq.shards != null && sreq.shards.length == 1 ) {\r\n          sreq.params.set( FacetParams.FACET, \"true\" );\r\n          sreq.params.set( FacetParams.FACET_PIVOT, pivots );\r\n          sreq.params.set( FacetParams.FACET_PIVOT_MINCOUNT, 1 ); // keep this at 1 regardless so that it accumulates everything\r\n            }\r\n      }\r\n    }\r\n    return ResponseBuilder.STAGE_DONE;\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"03a198be002bb6786dce54cf550c3ca7bb7b88a9","date":1287519003,"type":4,"author":"Ryan McKinley","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/handler/component/PivotFacetComponent#distributedProcess(ResponseBuilder).mjava","sourceNew":null,"sourceOld":"  @Override\n  public int distributedProcess(ResponseBuilder rb) throws IOException {\n    if (!rb.doFacets) {\n      return ResponseBuilder.STAGE_DONE;\n    }\n\n    if (rb.stage == ResponseBuilder.STAGE_GET_FIELDS) {\n      SolrParams params = rb.req.getParams();\n      String[] pivots = params.getParams(FacetParams.FACET_PIVOT);\n      for ( ShardRequest sreq : rb.outgoing ) {\n        if (( sreq.purpose & ShardRequest.PURPOSE_GET_FIELDS ) != 0\n            && sreq.shards != null && sreq.shards.length == 1 ) {\n          sreq.params.set( FacetParams.FACET, \"true\" );\n          sreq.params.set( FacetParams.FACET_PIVOT, pivots );\n          sreq.params.set( FacetParams.FACET_PIVOT_MINCOUNT, 1 ); // keep this at 1 regardless so that it accumulates everything\n            }\n      }\n    }\n    return ResponseBuilder.STAGE_DONE;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ecea1664e8617d82eca3b8055a3c37cb4da8511","date":1287578668,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/handler/component/PivotFacetComponent#distributedProcess(ResponseBuilder).mjava","sourceNew":null,"sourceOld":"  @Override\n  public int distributedProcess(ResponseBuilder rb) throws IOException {\n    if (!rb.doFacets) {\n      return ResponseBuilder.STAGE_DONE;\n    }\n\n    if (rb.stage == ResponseBuilder.STAGE_GET_FIELDS) {\n      SolrParams params = rb.req.getParams();\n      String[] pivots = params.getParams(FacetParams.FACET_PIVOT);\n      for ( ShardRequest sreq : rb.outgoing ) {\n        if (( sreq.purpose & ShardRequest.PURPOSE_GET_FIELDS ) != 0\n            && sreq.shards != null && sreq.shards.length == 1 ) {\n          sreq.params.set( FacetParams.FACET, \"true\" );\n          sreq.params.set( FacetParams.FACET_PIVOT, pivots );\n          sreq.params.set( FacetParams.FACET_PIVOT_MINCOUNT, 1 ); // keep this at 1 regardless so that it accumulates everything\n            }\n      }\n    }\n    return ResponseBuilder.STAGE_DONE;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3e904610f0db3fdf2ea10c5701f5f4f86c1e9ade":["601c6168c1d70f05f7a6a2d8c7ad4ceb218f3541"],"601c6168c1d70f05f7a6a2d8c7ad4ceb218f3541":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":["3e904610f0db3fdf2ea10c5701f5f4f86c1e9ade","03a198be002bb6786dce54cf550c3ca7bb7b88a9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["03a198be002bb6786dce54cf550c3ca7bb7b88a9"],"03a198be002bb6786dce54cf550c3ca7bb7b88a9":["3e904610f0db3fdf2ea10c5701f5f4f86c1e9ade"]},"commit2Childs":{"3e904610f0db3fdf2ea10c5701f5f4f86c1e9ade":["4ecea1664e8617d82eca3b8055a3c37cb4da8511","03a198be002bb6786dce54cf550c3ca7bb7b88a9"],"601c6168c1d70f05f7a6a2d8c7ad4ceb218f3541":["3e904610f0db3fdf2ea10c5701f5f4f86c1e9ade"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["601c6168c1d70f05f7a6a2d8c7ad4ceb218f3541"],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":[],"03a198be002bb6786dce54cf550c3ca7bb7b88a9":["4ecea1664e8617d82eca3b8055a3c37cb4da8511","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4ecea1664e8617d82eca3b8055a3c37cb4da8511","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}