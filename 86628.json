{"path":"lucene/src/test/org/apache/lucene/index/TestTypePromotion#index(IndexWriter,DocValuesField,Type,long[],int,int).mjava","commits":[{"id":"a0ae5e3ed1232483b7b8a014f175a5fe43595982","date":1324062192,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestTypePromotion#index(IndexWriter,DocValuesField,Type,long[],int,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/values/TestTypePromotion#index(IndexWriter,DocValuesField,Type,long[],int,int).mjava","sourceNew":"  public void index(IndexWriter writer, DocValuesField valField,\n      Type valueType, long[] values, int offset, int num)\n      throws CorruptIndexException, IOException {\n    BytesRef ref = new BytesRef(new byte[] { 1, 2, 3, 4 });\n    for (int i = offset; i < offset + num; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", i + \"\", TextField.TYPE_STORED));\n      switch (valueType) {\n      case VAR_INTS:\n        values[i] = random.nextInt();\n        valField.setInt(values[i]);\n        break;\n      case FIXED_INTS_16:\n        values[i] = random.nextInt(Short.MAX_VALUE);\n        valField.setInt((short) values[i], true);\n        break;\n      case FIXED_INTS_32:\n        values[i] = random.nextInt();\n        valField.setInt((int) values[i], true);\n        break;\n      case FIXED_INTS_64:\n        values[i] = random.nextLong();\n        valField.setInt(values[i], true);\n        break;\n      case FLOAT_64:\n        double nextDouble = random.nextDouble();\n        values[i] = Double.doubleToRawLongBits(nextDouble);\n        valField.setFloat(nextDouble);\n        break;\n      case FLOAT_32:\n        final float nextFloat = random.nextFloat();\n        values[i] = Double.doubleToRawLongBits(nextFloat);\n        valField.setFloat(nextFloat);\n        break;\n      case FIXED_INTS_8:\n         values[i] = (byte) i;\n        valField.setInt((byte)values[i], true);\n        break;\n      case BYTES_FIXED_DEREF:\n      case BYTES_FIXED_SORTED:\n      case BYTES_FIXED_STRAIGHT:\n        values[i] = random.nextLong();\n        BytesRefUtils.copyLong(ref, values[i]);\n        valField.setBytes(ref, valueType);\n        break;\n      case BYTES_VAR_DEREF:\n      case BYTES_VAR_SORTED:\n      case BYTES_VAR_STRAIGHT:\n        if (random.nextBoolean()) {\n          BytesRefUtils.copyInt(ref, random.nextInt());\n          values[i] = BytesRefUtils.asInt(ref);\n        } else {\n          BytesRefUtils.copyLong(ref, random.nextLong());\n          values[i] = BytesRefUtils.asLong(ref);\n        }\n        valField.setBytes(ref, valueType);\n        break;\n\n      default:\n        fail(\"unexpected value \" + valueType);\n\n      }\n      doc.add(valField);\n      writer.addDocument(doc);\n      if (random.nextInt(10) == 0) {\n        writer.commit();\n      }\n    }\n  }\n\n","sourceOld":"  public void index(IndexWriter writer, DocValuesField valField,\n      Type valueType, long[] values, int offset, int num)\n      throws CorruptIndexException, IOException {\n    BytesRef ref = new BytesRef(new byte[] { 1, 2, 3, 4 });\n    for (int i = offset; i < offset + num; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", i + \"\", TextField.TYPE_STORED));\n      switch (valueType) {\n      case VAR_INTS:\n        values[i] = random.nextInt();\n        valField.setInt(values[i]);\n        break;\n      case FIXED_INTS_16:\n        values[i] = random.nextInt(Short.MAX_VALUE);\n        valField.setInt((short) values[i], true);\n        break;\n      case FIXED_INTS_32:\n        values[i] = random.nextInt();\n        valField.setInt((int) values[i], true);\n        break;\n      case FIXED_INTS_64:\n        values[i] = random.nextLong();\n        valField.setInt(values[i], true);\n        break;\n      case FLOAT_64:\n        double nextDouble = random.nextDouble();\n        values[i] = Double.doubleToRawLongBits(nextDouble);\n        valField.setFloat(nextDouble);\n        break;\n      case FLOAT_32:\n        final float nextFloat = random.nextFloat();\n        values[i] = Double.doubleToRawLongBits(nextFloat);\n        valField.setFloat(nextFloat);\n        break;\n      case FIXED_INTS_8:\n         values[i] = (byte) i;\n        valField.setInt((byte)values[i], true);\n        break;\n      case BYTES_FIXED_DEREF:\n      case BYTES_FIXED_SORTED:\n      case BYTES_FIXED_STRAIGHT:\n        values[i] = random.nextLong();\n        BytesRefUtils.copyLong(ref, values[i]);\n        valField.setBytes(ref, valueType);\n        break;\n      case BYTES_VAR_DEREF:\n      case BYTES_VAR_SORTED:\n      case BYTES_VAR_STRAIGHT:\n        if (random.nextBoolean()) {\n          BytesRefUtils.copyInt(ref, random.nextInt());\n          values[i] = BytesRefUtils.asInt(ref);\n        } else {\n          BytesRefUtils.copyLong(ref, random.nextLong());\n          values[i] = BytesRefUtils.asLong(ref);\n        }\n        valField.setBytes(ref, valueType);\n        break;\n\n      default:\n        fail(\"unexpected value \" + valueType);\n\n      }\n      doc.add(valField);\n      writer.addDocument(doc);\n      if (random.nextInt(10) == 0) {\n        writer.commit();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fa0f44f887719e97183771e977cfc4bfb485b766","date":1326668713,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestTypePromotion#index(IndexWriter,Type,long[],int,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestTypePromotion#index(IndexWriter,DocValuesField,Type,long[],int,int).mjava","sourceNew":"  public void index(IndexWriter writer,\n      Type valueType, long[] values, int offset, int num)\n      throws CorruptIndexException, IOException {\n    final DocValuesField valField;\n    switch (valueType) {\n    case FIXED_INTS_8:\n      valField = new DocValuesField(\"promote\", (byte) 0, valueType);\n      break;\n    case FIXED_INTS_16:\n      valField = new DocValuesField(\"promote\", (short) 0, valueType);\n      break;\n    case FIXED_INTS_32:\n      valField = new DocValuesField(\"promote\", 0, valueType);\n      break;\n    case VAR_INTS:\n      valField = new DocValuesField(\"promote\", 0L, valueType);\n      break;\n    case FIXED_INTS_64:\n      valField = new DocValuesField(\"promote\", (long) 0, valueType);\n      break;\n    case FLOAT_64:\n      valField = new DocValuesField(\"promote\", (double) 0, valueType);\n      break;\n    case FLOAT_32:\n      valField = new DocValuesField(\"promote\", (float) 0, valueType);\n      break;\n    case BYTES_FIXED_DEREF:\n    case BYTES_FIXED_SORTED:\n    case BYTES_FIXED_STRAIGHT:\n    case BYTES_VAR_DEREF:\n    case BYTES_VAR_SORTED:\n    case BYTES_VAR_STRAIGHT:\n      valField = new DocValuesField(\"promote\", new BytesRef(), valueType);\n      break;\n    default:\n      fail(\"unexpected value \" + valueType);\n      valField = null;\n    }\n\n    BytesRef ref = new BytesRef(new byte[] { 1, 2, 3, 4 });\n    for (int i = offset; i < offset + num; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", i + \"\", TextField.TYPE_STORED));\n      switch (valueType) {\n      case VAR_INTS:\n        values[i] = random.nextInt();\n        valField.setValue(values[i]);\n        break;\n      case FIXED_INTS_16:\n        values[i] = random.nextInt(Short.MAX_VALUE);\n        valField.setValue((short) values[i]);\n        break;\n      case FIXED_INTS_32:\n        values[i] = random.nextInt();\n        valField.setValue((int) values[i]);\n        break;\n      case FIXED_INTS_64:\n        values[i] = random.nextLong();\n        valField.setValue(values[i]);\n        break;\n      case FLOAT_64:\n        double nextDouble = random.nextDouble();\n        values[i] = Double.doubleToRawLongBits(nextDouble);\n        valField.setValue(nextDouble);\n        break;\n      case FLOAT_32:\n        final float nextFloat = random.nextFloat();\n        values[i] = Double.doubleToRawLongBits(nextFloat);\n        valField.setValue(nextFloat);\n        break;\n      case FIXED_INTS_8:\n        values[i] = (byte) i;\n        valField.setValue((byte)values[i]);\n        break;\n      case BYTES_FIXED_DEREF:\n      case BYTES_FIXED_SORTED:\n      case BYTES_FIXED_STRAIGHT:\n        values[i] = random.nextLong();\n        BytesRefUtils.copyLong(ref, values[i]);\n        valField.setValue(ref);\n        break;\n      case BYTES_VAR_DEREF:\n      case BYTES_VAR_SORTED:\n      case BYTES_VAR_STRAIGHT:\n        if (random.nextBoolean()) {\n          BytesRefUtils.copyInt(ref, random.nextInt());\n          values[i] = BytesRefUtils.asInt(ref);\n        } else {\n          BytesRefUtils.copyLong(ref, random.nextLong());\n          values[i] = BytesRefUtils.asLong(ref);\n        }\n        valField.setValue(ref);\n        break;\n\n      default:\n        fail(\"unexpected value \" + valueType);\n      }\n      doc.add(valField);\n      writer.addDocument(doc);\n      if (random.nextInt(10) == 0) {\n        writer.commit();\n      }\n    }\n  }\n\n","sourceOld":"  public void index(IndexWriter writer, DocValuesField valField,\n      Type valueType, long[] values, int offset, int num)\n      throws CorruptIndexException, IOException {\n    BytesRef ref = new BytesRef(new byte[] { 1, 2, 3, 4 });\n    for (int i = offset; i < offset + num; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", i + \"\", TextField.TYPE_STORED));\n      switch (valueType) {\n      case VAR_INTS:\n        values[i] = random.nextInt();\n        valField.setInt(values[i]);\n        break;\n      case FIXED_INTS_16:\n        values[i] = random.nextInt(Short.MAX_VALUE);\n        valField.setInt((short) values[i], true);\n        break;\n      case FIXED_INTS_32:\n        values[i] = random.nextInt();\n        valField.setInt((int) values[i], true);\n        break;\n      case FIXED_INTS_64:\n        values[i] = random.nextLong();\n        valField.setInt(values[i], true);\n        break;\n      case FLOAT_64:\n        double nextDouble = random.nextDouble();\n        values[i] = Double.doubleToRawLongBits(nextDouble);\n        valField.setFloat(nextDouble);\n        break;\n      case FLOAT_32:\n        final float nextFloat = random.nextFloat();\n        values[i] = Double.doubleToRawLongBits(nextFloat);\n        valField.setFloat(nextFloat);\n        break;\n      case FIXED_INTS_8:\n         values[i] = (byte) i;\n        valField.setInt((byte)values[i], true);\n        break;\n      case BYTES_FIXED_DEREF:\n      case BYTES_FIXED_SORTED:\n      case BYTES_FIXED_STRAIGHT:\n        values[i] = random.nextLong();\n        BytesRefUtils.copyLong(ref, values[i]);\n        valField.setBytes(ref, valueType);\n        break;\n      case BYTES_VAR_DEREF:\n      case BYTES_VAR_SORTED:\n      case BYTES_VAR_STRAIGHT:\n        if (random.nextBoolean()) {\n          BytesRefUtils.copyInt(ref, random.nextInt());\n          values[i] = BytesRefUtils.asInt(ref);\n        } else {\n          BytesRefUtils.copyLong(ref, random.nextLong());\n          values[i] = BytesRefUtils.asLong(ref);\n        }\n        valField.setBytes(ref, valueType);\n        break;\n\n      default:\n        fail(\"unexpected value \" + valueType);\n\n      }\n      doc.add(valField);\n      writer.addDocument(doc);\n      if (random.nextInt(10) == 0) {\n        writer.commit();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["a78a90fc9701e511308346ea29f4f5e548bb39fe","cd659803551ebd8ca09b9e4ad7abd18d3d558f9d","04f07771a2a7dd3a395700665ed839c3dae2def2","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fa0f44f887719e97183771e977cfc4bfb485b766":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fa0f44f887719e97183771e977cfc4bfb485b766"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"fa0f44f887719e97183771e977cfc4bfb485b766":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["fa0f44f887719e97183771e977cfc4bfb485b766"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}