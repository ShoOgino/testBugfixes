{"path":"contrib/benchmark/src/java/org/apache/lucene/benchmark/quality/utils/QualityQueriesFinder#bestQueries(String,int).mjava","commits":[{"id":"df2d68685a69bd82bf79243e28623c0775eb7bd8","date":1185567892,"type":0,"author":"Doron Cohen","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/quality/utils/QualityQueriesFinder#bestQueries(String,int).mjava","pathOld":"/dev/null","sourceNew":"  private String [] bestQueries(String field,int numQueries) throws IOException {\n    String words[] = bestTerms(\"body\",4*numQueries);\n    int n = words.length;\n    int m = n/4;\n    String res[] = new String[m];\n    for (int i=0; i<res.length; i++) {\n      res[i] = words[i] + \" \" + words[m+i]+ \"  \" + words[n-1-m-i]  + \" \" + words[n-1-i];\n      //System.out.println(\"query[\"+i+\"]:  \"+res[i]);\n    }\n    return res;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/quality/utils/QualityQueriesFinder#bestQueries(String,int).mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/quality/utils/QualityQueriesFinder#bestQueries(String,int).mjava","sourceNew":"  private String [] bestQueries(String field,int numQueries) throws IOException {\n    String words[] = bestTerms(\"body\",4*numQueries);\n    int n = words.length;\n    int m = n/4;\n    String res[] = new String[m];\n    for (int i=0; i<res.length; i++) {\n      res[i] = words[i] + \" \" + words[m+i]+ \"  \" + words[n-1-m-i]  + \" \" + words[n-1-i];\n      //System.out.println(\"query[\"+i+\"]:  \"+res[i]);\n    }\n    return res;\n  }\n\n","sourceOld":"  private String [] bestQueries(String field,int numQueries) throws IOException {\n    String words[] = bestTerms(\"body\",4*numQueries);\n    int n = words.length;\n    int m = n/4;\n    String res[] = new String[m];\n    for (int i=0; i<res.length; i++) {\n      res[i] = words[i] + \" \" + words[m+i]+ \"  \" + words[n-1-m-i]  + \" \" + words[n-1-i];\n      //System.out.println(\"query[\"+i+\"]:  \"+res[i]);\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"df2d68685a69bd82bf79243e28623c0775eb7bd8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["df2d68685a69bd82bf79243e28623c0775eb7bd8"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["df2d68685a69bd82bf79243e28623c0775eb7bd8"],"df2d68685a69bd82bf79243e28623c0775eb7bd8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}