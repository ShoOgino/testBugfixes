{"path":"solr/core/src/java/org/apache/solr/util/FastWriter#write(String,int,int).mjava","commits":[{"id":"e6a2315ba749856e5787b2ad962fa124bc3ed121","date":1334194349,"type":1,"author":"Christopher John Male","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/FastWriter#write(String,int,int).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/FastWriter#write(String,int,int).mjava","sourceNew":"  @Override\n  public void write(String str, int off, int len) throws IOException {\n    int space = buf.length - pos;\n    if (len < space) {\n      str.getChars(off, off+len, buf, pos);\n      pos += len;\n    } else if (len<BUFSIZE) {\n      // if the data to write is small enough, buffer it.\n      str.getChars(off, off+space, buf, pos);\n      sink.write(buf, 0, buf.length);\n      str.getChars(off+space, off+len, buf, 0);\n      pos = len-space;\n    } else {\n      sink.write(buf,0,pos);  // flush\n      pos=0;\n      // don't buffer, just write to sink\n      sink.write(str, off, len);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void write(String str, int off, int len) throws IOException {\n    int space = buf.length - pos;\n    if (len < space) {\n      str.getChars(off, off+len, buf, pos);\n      pos += len;\n    } else if (len<BUFSIZE) {\n      // if the data to write is small enough, buffer it.\n      str.getChars(off, off+space, buf, pos);\n      sink.write(buf, 0, buf.length);\n      str.getChars(off+space, off+len, buf, 0);\n      pos = len-space;\n    } else {\n      sink.write(buf,0,pos);  // flush\n      pos=0;\n      // don't buffer, just write to sink\n      sink.write(str, off, len);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cad90908fe6b90a8b7310dc8c2dceac34341580c","date":1344538399,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/FastWriter#write(String,int,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/FastWriter#write(String,int,int).mjava","sourceNew":"  @Override\n  public void write(String str, int off, int len) throws IOException {\n    int space = buf.length - pos;\n    if (len < space) {\n      str.getChars(off, off+len, buf, pos);\n      pos += len;\n    } else if (len<BUFSIZE) {\n      // if the data to write is small enough, buffer it.\n      str.getChars(off, off+space, buf, pos);\n      flush(buf, 0, buf.length);\n      str.getChars(off+space, off+len, buf, 0);\n      pos = len-space;\n    } else {\n      flush(buf,0,pos);  // flush\n      pos=0;\n      // don't buffer, just write to sink\n      flush(str, off, len);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void write(String str, int off, int len) throws IOException {\n    int space = buf.length - pos;\n    if (len < space) {\n      str.getChars(off, off+len, buf, pos);\n      pos += len;\n    } else if (len<BUFSIZE) {\n      // if the data to write is small enough, buffer it.\n      str.getChars(off, off+space, buf, pos);\n      sink.write(buf, 0, buf.length);\n      str.getChars(off+space, off+len, buf, 0);\n      pos = len-space;\n    } else {\n      sink.write(buf,0,pos);  // flush\n      pos=0;\n      // don't buffer, just write to sink\n      sink.write(str, off, len);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7869f64c874ebf7f317d22c00baf2b6857797a6","date":1344856617,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/FastWriter#write(String,int,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/FastWriter#write(String,int,int).mjava","sourceNew":"  @Override\n  public void write(String str, int off, int len) throws IOException {\n    int space = buf.length - pos;\n    if (len < space) {\n      str.getChars(off, off+len, buf, pos);\n      pos += len;\n    } else if (len<BUFSIZE) {\n      // if the data to write is small enough, buffer it.\n      str.getChars(off, off+space, buf, pos);\n      flush(buf, 0, buf.length);\n      str.getChars(off+space, off+len, buf, 0);\n      pos = len-space;\n    } else {\n      flush(buf,0,pos);  // flush\n      pos=0;\n      // don't buffer, just write to sink\n      flush(str, off, len);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void write(String str, int off, int len) throws IOException {\n    int space = buf.length - pos;\n    if (len < space) {\n      str.getChars(off, off+len, buf, pos);\n      pos += len;\n    } else if (len<BUFSIZE) {\n      // if the data to write is small enough, buffer it.\n      str.getChars(off, off+space, buf, pos);\n      sink.write(buf, 0, buf.length);\n      str.getChars(off+space, off+len, buf, 0);\n      pos = len-space;\n    } else {\n      sink.write(buf,0,pos);  // flush\n      pos=0;\n      // don't buffer, just write to sink\n      sink.write(str, off, len);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9","date":1344867506,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/FastWriter#write(String,int,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/FastWriter#write(String,int,int).mjava","sourceNew":"  @Override\n  public void write(String str, int off, int len) throws IOException {\n    int space = buf.length - pos;\n    if (len < space) {\n      str.getChars(off, off+len, buf, pos);\n      pos += len;\n    } else if (len<BUFSIZE) {\n      // if the data to write is small enough, buffer it.\n      str.getChars(off, off+space, buf, pos);\n      flush(buf, 0, buf.length);\n      str.getChars(off+space, off+len, buf, 0);\n      pos = len-space;\n    } else {\n      flush(buf,0,pos);  // flush\n      pos=0;\n      // don't buffer, just write to sink\n      flush(str, off, len);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void write(String str, int off, int len) throws IOException {\n    int space = buf.length - pos;\n    if (len < space) {\n      str.getChars(off, off+len, buf, pos);\n      pos += len;\n    } else if (len<BUFSIZE) {\n      // if the data to write is small enough, buffer it.\n      str.getChars(off, off+space, buf, pos);\n      sink.write(buf, 0, buf.length);\n      str.getChars(off+space, off+len, buf, 0);\n      pos = len-space;\n    } else {\n      sink.write(buf,0,pos);  // flush\n      pos=0;\n      // don't buffer, just write to sink\n      sink.write(str, off, len);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb5e2d9cb6380aa54e123da56915c9be394a0952","date":1345248904,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/FastWriter#write(String,int,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/FastWriter#write(String,int,int).mjava","sourceNew":"  @Override\n  public void write(String str, int off, int len) throws IOException {\n    for(;;) {\n      int space = buf.length - pos;\n\n      if (len <= space) {\n        str.getChars(off, off+len, buf, pos);\n        pos += len;\n        return;\n      } else if (len > buf.length) {\n        if (pos>0) {\n          flush(buf,0,pos);  // flush\n          pos=0;\n        }\n        // don't buffer, just write to sink\n        flush(str, off, len);\n        return;\n      }\n\n      // buffer is too big to fit in the free space, but\n      // not big enough to warrant writing on its own.\n      // write whatever we can fit, then flush and iterate.\n\n      str.getChars(off, off+space, buf, pos);\n      flush(buf, 0, buf.length);\n      pos = 0;\n      off += space;\n      len -= space;\n    }\n  }\n\n","sourceOld":"  @Override\n  public void write(String str, int off, int len) throws IOException {\n    int space = buf.length - pos;\n    if (len < space) {\n      str.getChars(off, off+len, buf, pos);\n      pos += len;\n    } else if (len<BUFSIZE) {\n      // if the data to write is small enough, buffer it.\n      str.getChars(off, off+space, buf, pos);\n      flush(buf, 0, buf.length);\n      str.getChars(off+space, off+len, buf, 0);\n      pos = len-space;\n    } else {\n      flush(buf,0,pos);  // flush\n      pos=0;\n      // don't buffer, just write to sink\n      flush(str, off, len);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70fa1c0f4d75735ff2e1485e059d9bc5efa50598","date":1345296911,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/FastWriter#write(String,int,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/FastWriter#write(String,int,int).mjava","sourceNew":"  @Override\n  public void write(String str, int off, int len) throws IOException {\n    for(;;) {\n      int space = buf.length - pos;\n\n      if (len <= space) {\n        str.getChars(off, off+len, buf, pos);\n        pos += len;\n        return;\n      } else if (len > buf.length) {\n        if (pos>0) {\n          flush(buf,0,pos);  // flush\n          pos=0;\n        }\n        // don't buffer, just write to sink\n        flush(str, off, len);\n        return;\n      }\n\n      // buffer is too big to fit in the free space, but\n      // not big enough to warrant writing on its own.\n      // write whatever we can fit, then flush and iterate.\n\n      str.getChars(off, off+space, buf, pos);\n      flush(buf, 0, buf.length);\n      pos = 0;\n      off += space;\n      len -= space;\n    }\n  }\n\n","sourceOld":"  @Override\n  public void write(String str, int off, int len) throws IOException {\n    int space = buf.length - pos;\n    if (len < space) {\n      str.getChars(off, off+len, buf, pos);\n      pos += len;\n    } else if (len<BUFSIZE) {\n      // if the data to write is small enough, buffer it.\n      str.getChars(off, off+space, buf, pos);\n      flush(buf, 0, buf.length);\n      str.getChars(off+space, off+len, buf, 0);\n      pos = len-space;\n    } else {\n      flush(buf,0,pos);  // flush\n      pos=0;\n      // don't buffer, just write to sink\n      flush(str, off, len);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"616c1830142ff5c1ddedec1ed898733b73c8e23b","date":1345368925,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/FastWriter#write(String,int,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/FastWriter#write(String,int,int).mjava","sourceNew":"  @Override\n  public void write(String str, int off, int len) throws IOException {\n    for(;;) {\n      int space = buf.length - pos;\n\n      if (len <= space) {\n        str.getChars(off, off+len, buf, pos);\n        pos += len;\n        return;\n      } else if (len > buf.length) {\n        if (pos>0) {\n          flush(buf,0,pos);  // flush\n          pos=0;\n        }\n        // don't buffer, just write to sink\n        flush(str, off, len);\n        return;\n      }\n\n      // buffer is too big to fit in the free space, but\n      // not big enough to warrant writing on its own.\n      // write whatever we can fit, then flush and iterate.\n\n      str.getChars(off, off+space, buf, pos);\n      flush(buf, 0, buf.length);\n      pos = 0;\n      off += space;\n      len -= space;\n    }\n  }\n\n","sourceOld":"  @Override\n  public void write(String str, int off, int len) throws IOException {\n    int space = buf.length - pos;\n    if (len < space) {\n      str.getChars(off, off+len, buf, pos);\n      pos += len;\n    } else if (len<BUFSIZE) {\n      // if the data to write is small enough, buffer it.\n      str.getChars(off, off+space, buf, pos);\n      flush(buf, 0, buf.length);\n      str.getChars(off+space, off+len, buf, 0);\n      pos = len-space;\n    } else {\n      flush(buf,0,pos);  // flush\n      pos=0;\n      // don't buffer, just write to sink\n      flush(str, off, len);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/FastWriter#write(String,int,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/FastWriter#write(String,int,int).mjava","sourceNew":"  @Override\n  public void write(String str, int off, int len) throws IOException {\n    for(;;) {\n      int space = buf.length - pos;\n\n      if (len <= space) {\n        str.getChars(off, off+len, buf, pos);\n        pos += len;\n        return;\n      } else if (len > buf.length) {\n        if (pos>0) {\n          flush(buf,0,pos);  // flush\n          pos=0;\n        }\n        // don't buffer, just write to sink\n        flush(str, off, len);\n        return;\n      }\n\n      // buffer is too big to fit in the free space, but\n      // not big enough to warrant writing on its own.\n      // write whatever we can fit, then flush and iterate.\n\n      str.getChars(off, off+space, buf, pos);\n      flush(buf, 0, buf.length);\n      pos = 0;\n      off += space;\n      len -= space;\n    }\n  }\n\n","sourceOld":"  @Override\n  public void write(String str, int off, int len) throws IOException {\n    for(;;) {\n      int space = buf.length - pos;\n\n      if (len <= space) {\n        str.getChars(off, off+len, buf, pos);\n        pos += len;\n        return;\n      } else if (len > buf.length) {\n        if (pos>0) {\n          flush(buf,0,pos);  // flush\n          pos=0;\n        }\n        // don't buffer, just write to sink\n        flush(str, off, len);\n        return;\n      }\n\n      // buffer is too big to fit in the free space, but\n      // not big enough to warrant writing on its own.\n      // write whatever we can fit, then flush and iterate.\n\n      str.getChars(off, off+space, buf, pos);\n      flush(buf, 0, buf.length);\n      pos = 0;\n      off += space;\n      len -= space;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","date":1376375609,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/FastWriter#write(String,int,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/FastWriter#write(String,int,int).mjava","sourceNew":"  @Override\n  public void write(String str, int off, int len) throws IOException {\n    for(;;) {\n      int space = buf.length - pos;\n\n      if (len <= space) {\n        str.getChars(off, off+len, buf, pos);\n        pos += len;\n        return;\n      } else if (len > buf.length) {\n        if (pos>0) {\n          flush(buf,0,pos);  // flush\n          pos=0;\n        }\n        // don't buffer, just write to sink\n        flush(str, off, len);\n        return;\n      }\n\n      // buffer is too big to fit in the free space, but\n      // not big enough to warrant writing on its own.\n      // write whatever we can fit, then flush and iterate.\n\n      str.getChars(off, off+space, buf, pos);\n      flush(buf, 0, buf.length);\n      pos = 0;\n      off += space;\n      len -= space;\n    }\n  }\n\n","sourceOld":"  @Override\n  public void write(String str, int off, int len) throws IOException {\n    for(;;) {\n      int space = buf.length - pos;\n\n      if (len <= space) {\n        str.getChars(off, off+len, buf, pos);\n        pos += len;\n        return;\n      } else if (len > buf.length) {\n        if (pos>0) {\n          flush(buf,0,pos);  // flush\n          pos=0;\n        }\n        // don't buffer, just write to sink\n        flush(str, off, len);\n        return;\n      }\n\n      // buffer is too big to fit in the free space, but\n      // not big enough to warrant writing on its own.\n      // write whatever we can fit, then flush and iterate.\n\n      str.getChars(off, off+space, buf, pos);\n      flush(buf, 0, buf.length);\n      pos = 0;\n      off += space;\n      len -= space;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"26dad91f15019714a045b4d8c5f40162b2058b54","date":1528551655,"type":5,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/FastWriter#write(String,int,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/FastWriter#write(String,int,int).mjava","sourceNew":"  @Override\n  public void write(String str, int off, int len) throws IOException {\n    for(;;) {\n      int space = buf.length - pos;\n\n      if (len <= space) {\n        str.getChars(off, off+len, buf, pos);\n        pos += len;\n        return;\n      } else if (len > buf.length) {\n        if (pos>0) {\n          flush(buf,0,pos);  // flush\n          pos=0;\n        }\n        // don't buffer, just write to sink\n        flush(str, off, len);\n        return;\n      }\n\n      // buffer is too big to fit in the free space, but\n      // not big enough to warrant writing on its own.\n      // write whatever we can fit, then flush and iterate.\n\n      str.getChars(off, off+space, buf, pos);\n      flush(buf, 0, buf.length);\n      pos = 0;\n      off += space;\n      len -= space;\n    }\n  }\n\n","sourceOld":"  @Override\n  public void write(String str, int off, int len) throws IOException {\n    for(;;) {\n      int space = buf.length - pos;\n\n      if (len <= space) {\n        str.getChars(off, off+len, buf, pos);\n        pos += len;\n        return;\n      } else if (len > buf.length) {\n        if (pos>0) {\n          flush(buf,0,pos);  // flush\n          pos=0;\n        }\n        // don't buffer, just write to sink\n        flush(str, off, len);\n        return;\n      }\n\n      // buffer is too big to fit in the free space, but\n      // not big enough to warrant writing on its own.\n      // write whatever we can fit, then flush and iterate.\n\n      str.getChars(off, off+space, buf, pos);\n      flush(buf, 0, buf.length);\n      pos = 0;\n      off += space;\n      len -= space;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":5,"author":"Michael Braun","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/FastWriter#write(String,int,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/FastWriter#write(String,int,int).mjava","sourceNew":"  @Override\n  public void write(String str, int off, int len) throws IOException {\n    for(;;) {\n      int space = buf.length - pos;\n\n      if (len <= space) {\n        str.getChars(off, off+len, buf, pos);\n        pos += len;\n        return;\n      } else if (len > buf.length) {\n        if (pos>0) {\n          flush(buf,0,pos);  // flush\n          pos=0;\n        }\n        // don't buffer, just write to sink\n        flush(str, off, len);\n        return;\n      }\n\n      // buffer is too big to fit in the free space, but\n      // not big enough to warrant writing on its own.\n      // write whatever we can fit, then flush and iterate.\n\n      str.getChars(off, off+space, buf, pos);\n      flush(buf, 0, buf.length);\n      pos = 0;\n      off += space;\n      len -= space;\n    }\n  }\n\n","sourceOld":"  @Override\n  public void write(String str, int off, int len) throws IOException {\n    for(;;) {\n      int space = buf.length - pos;\n\n      if (len <= space) {\n        str.getChars(off, off+len, buf, pos);\n        pos += len;\n        return;\n      } else if (len > buf.length) {\n        if (pos>0) {\n          flush(buf,0,pos);  // flush\n          pos=0;\n        }\n        // don't buffer, just write to sink\n        flush(str, off, len);\n        return;\n      }\n\n      // buffer is too big to fit in the free space, but\n      // not big enough to warrant writing on its own.\n      // write whatever we can fit, then flush and iterate.\n\n      str.getChars(off, off+space, buf, pos);\n      flush(buf, 0, buf.length);\n      pos = 0;\n      off += space;\n      len -= space;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":5,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/FastWriter#write(String,int,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/FastWriter#write(String,int,int).mjava","sourceNew":"  @Override\n  public void write(String str, int off, int len) throws IOException {\n    for(;;) {\n      int space = buf.length - pos;\n\n      if (len <= space) {\n        str.getChars(off, off+len, buf, pos);\n        pos += len;\n        return;\n      } else if (len > buf.length) {\n        if (pos>0) {\n          flush(buf,0,pos);  // flush\n          pos=0;\n        }\n        // don't buffer, just write to sink\n        flush(str, off, len);\n        return;\n      }\n\n      // buffer is too big to fit in the free space, but\n      // not big enough to warrant writing on its own.\n      // write whatever we can fit, then flush and iterate.\n\n      str.getChars(off, off+space, buf, pos);\n      flush(buf, 0, buf.length);\n      pos = 0;\n      off += space;\n      len -= space;\n    }\n  }\n\n","sourceOld":"  @Override\n  public void write(String str, int off, int len) throws IOException {\n    for(;;) {\n      int space = buf.length - pos;\n\n      if (len <= space) {\n        str.getChars(off, off+len, buf, pos);\n        pos += len;\n        return;\n      } else if (len > buf.length) {\n        if (pos>0) {\n          flush(buf,0,pos);  // flush\n          pos=0;\n        }\n        // don't buffer, just write to sink\n        flush(str, off, len);\n        return;\n      }\n\n      // buffer is too big to fit in the free space, but\n      // not big enough to warrant writing on its own.\n      // write whatever we can fit, then flush and iterate.\n\n      str.getChars(off, off+space, buf, pos);\n      flush(buf, 0, buf.length);\n      pos = 0;\n      off += space;\n      len -= space;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":["fb5e2d9cb6380aa54e123da56915c9be394a0952","19275ba31e621f6da1b83bf13af75233876fd3d4"],"616c1830142ff5c1ddedec1ed898733b73c8e23b":["d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9","fb5e2d9cb6380aa54e123da56915c9be394a0952"],"26dad91f15019714a045b4d8c5f40162b2058b54":["19275ba31e621f6da1b83bf13af75233876fd3d4"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["fb5e2d9cb6380aa54e123da56915c9be394a0952"],"fb5e2d9cb6380aa54e123da56915c9be394a0952":["cad90908fe6b90a8b7310dc8c2dceac34341580c"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["19275ba31e621f6da1b83bf13af75233876fd3d4","26dad91f15019714a045b4d8c5f40162b2058b54"],"e6a2315ba749856e5787b2ad962fa124bc3ed121":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":["e6a2315ba749856e5787b2ad962fa124bc3ed121","cad90908fe6b90a8b7310dc8c2dceac34341580c"],"cad90908fe6b90a8b7310dc8c2dceac34341580c":["e6a2315ba749856e5787b2ad962fa124bc3ed121"],"70fa1c0f4d75735ff2e1485e059d9bc5efa50598":["c7869f64c874ebf7f317d22c00baf2b6857797a6","fb5e2d9cb6380aa54e123da56915c9be394a0952"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9":["e6a2315ba749856e5787b2ad962fa124bc3ed121","cad90908fe6b90a8b7310dc8c2dceac34341580c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["26dad91f15019714a045b4d8c5f40162b2058b54"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["19275ba31e621f6da1b83bf13af75233876fd3d4","26dad91f15019714a045b4d8c5f40162b2058b54"]},"commit2Childs":{"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":[],"616c1830142ff5c1ddedec1ed898733b73c8e23b":[],"26dad91f15019714a045b4d8c5f40162b2058b54":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","26dad91f15019714a045b4d8c5f40162b2058b54","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"fb5e2d9cb6380aa54e123da56915c9be394a0952":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","616c1830142ff5c1ddedec1ed898733b73c8e23b","19275ba31e621f6da1b83bf13af75233876fd3d4","70fa1c0f4d75735ff2e1485e059d9bc5efa50598"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"e6a2315ba749856e5787b2ad962fa124bc3ed121":["c7869f64c874ebf7f317d22c00baf2b6857797a6","cad90908fe6b90a8b7310dc8c2dceac34341580c","d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":["70fa1c0f4d75735ff2e1485e059d9bc5efa50598"],"cad90908fe6b90a8b7310dc8c2dceac34341580c":["fb5e2d9cb6380aa54e123da56915c9be394a0952","c7869f64c874ebf7f317d22c00baf2b6857797a6","d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9"],"70fa1c0f4d75735ff2e1485e059d9bc5efa50598":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e6a2315ba749856e5787b2ad962fa124bc3ed121"],"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9":["616c1830142ff5c1ddedec1ed898733b73c8e23b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","616c1830142ff5c1ddedec1ed898733b73c8e23b","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","70fa1c0f4d75735ff2e1485e059d9bc5efa50598","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}