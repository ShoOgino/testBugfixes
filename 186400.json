{"path":"lucene/core/src/java/org/apache/lucene/search/QueryCache#doCache(Weight,QueryCachingPolicy).mjava","commits":[{"id":"60596f28be69b10c37a56a303c2dbea07b2ca4ba","date":1425060541,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/QueryCache#doCache(Weight,QueryCachingPolicy).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Return a wrapper around the provided <code>weight</code> that will cache\n   * matching docs per-segment accordingly to the given <code>policy</code>.\n   * NOTE: The returned weight will only be equivalent if scores are not needed.\n   * @see Collector#needsScores()\n   */\n  Weight doCache(Weight weight, QueryCachingPolicy policy);\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/QueryCache#doCache(Weight,QueryCachingPolicy).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Return a wrapper around the provided <code>weight</code> that will cache\n   * matching docs per-segment accordingly to the given <code>policy</code>.\n   * NOTE: The returned weight will only be equivalent if scores are not needed.\n   * @see Collector#needsScores()\n   */\n  Weight doCache(Weight weight, QueryCachingPolicy policy);\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9fc47cb7b4346802411bb432f501ed0673d7119e","date":1512640179,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/QueryCache#doCache(Weight,QueryCachingPolicy).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/QueryCache#doCache(Weight,QueryCachingPolicy).mjava","sourceNew":"  /**\n   * Return a wrapper around the provided <code>weight</code> that will cache\n   * matching docs per-segment accordingly to the given <code>policy</code>.\n   * NOTE: The returned weight will only be equivalent if scores are not needed.\n   * @see Collector#scoreMode()\n   */\n  Weight doCache(Weight weight, QueryCachingPolicy policy);\n\n","sourceOld":"  /**\n   * Return a wrapper around the provided <code>weight</code> that will cache\n   * matching docs per-segment accordingly to the given <code>policy</code>.\n   * NOTE: The returned weight will only be equivalent if scores are not needed.\n   * @see Collector#needsScores()\n   */\n  Weight doCache(Weight weight, QueryCachingPolicy policy);\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"417142ff08fda9cf0b72d5133e63097a166c6458","date":1512729693,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/QueryCache#doCache(Weight,QueryCachingPolicy).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/QueryCache#doCache(Weight,QueryCachingPolicy).mjava","sourceNew":"  /**\n   * Return a wrapper around the provided <code>weight</code> that will cache\n   * matching docs per-segment accordingly to the given <code>policy</code>.\n   * NOTE: The returned weight will only be equivalent if scores are not needed.\n   * @see Collector#scoreMode()\n   */\n  Weight doCache(Weight weight, QueryCachingPolicy policy);\n\n","sourceOld":"  /**\n   * Return a wrapper around the provided <code>weight</code> that will cache\n   * matching docs per-segment accordingly to the given <code>policy</code>.\n   * NOTE: The returned weight will only be equivalent if scores are not needed.\n   * @see Collector#needsScores()\n   */\n  Weight doCache(Weight weight, QueryCachingPolicy policy);\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1fbdd90cd58912788fecb1044df8f566a4420e59","date":1574749923,"type":5,"author":"Atri Sharma","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/QueryCache#doCache(Weight,QueryCachingPolicy,Executor).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/QueryCache#doCache(Weight,QueryCachingPolicy).mjava","sourceNew":"  /**\n   * Return a wrapper around the provided <code>weight</code> that will cache\n   * matching docs per-segment accordingly to the given <code>policy</code>.\n   * NOTE: The returned weight will only be equivalent if scores are not needed.\n   * @see Collector#scoreMode()\n   * If the Executor is not null, it will be used to perform asynchronous caching\n   */\n  Weight doCache(Weight weight, QueryCachingPolicy policy, Executor executor);\n\n","sourceOld":"  /**\n   * Return a wrapper around the provided <code>weight</code> that will cache\n   * matching docs per-segment accordingly to the given <code>policy</code>.\n   * NOTE: The returned weight will only be equivalent if scores are not needed.\n   * @see Collector#scoreMode()\n   */\n  Weight doCache(Weight weight, QueryCachingPolicy policy);\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9bbc355b3e849ee4a34763155bb78e638d625419","date":1574952532,"type":1,"author":"Atri Sharma","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/QueryCache#doCache(Weight,QueryCachingPolicy).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/QueryCache#doCache(Weight,QueryCachingPolicy,Executor).mjava","sourceNew":"  /**\n   * Return a wrapper around the provided <code>weight</code> that will cache\n   * matching docs per-segment accordingly to the given <code>policy</code>.\n   * NOTE: The returned weight will only be equivalent if scores are not needed.\n   * @see Collector#scoreMode()\n   */\n  Weight doCache(Weight weight, QueryCachingPolicy policy);\n\n","sourceOld":"  /**\n   * Return a wrapper around the provided <code>weight</code> that will cache\n   * matching docs per-segment accordingly to the given <code>policy</code>.\n   * NOTE: The returned weight will only be equivalent if scores are not needed.\n   * @see Collector#scoreMode()\n   * If the Executor is not null, it will be used to perform asynchronous caching\n   */\n  Weight doCache(Weight weight, QueryCachingPolicy policy, Executor executor);\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1fbdd90cd58912788fecb1044df8f566a4420e59":["417142ff08fda9cf0b72d5133e63097a166c6458"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","60596f28be69b10c37a56a303c2dbea07b2ca4ba"],"60596f28be69b10c37a56a303c2dbea07b2ca4ba":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9bbc355b3e849ee4a34763155bb78e638d625419":["1fbdd90cd58912788fecb1044df8f566a4420e59"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["60596f28be69b10c37a56a303c2dbea07b2ca4ba"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9bbc355b3e849ee4a34763155bb78e638d625419"],"417142ff08fda9cf0b72d5133e63097a166c6458":["60596f28be69b10c37a56a303c2dbea07b2ca4ba","9fc47cb7b4346802411bb432f501ed0673d7119e"]},"commit2Childs":{"1fbdd90cd58912788fecb1044df8f566a4420e59":["9bbc355b3e849ee4a34763155bb78e638d625419"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"60596f28be69b10c37a56a303c2dbea07b2ca4ba":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","9fc47cb7b4346802411bb432f501ed0673d7119e","417142ff08fda9cf0b72d5133e63097a166c6458"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","60596f28be69b10c37a56a303c2dbea07b2ca4ba"],"9bbc355b3e849ee4a34763155bb78e638d625419":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["417142ff08fda9cf0b72d5133e63097a166c6458"],"417142ff08fda9cf0b72d5133e63097a166c6458":["1fbdd90cd58912788fecb1044df8f566a4420e59"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}