{"path":"lucene/core/src/test/org/apache/lucene/util/TestQueryBuilder#testMaxBooleanClause().mjava","commits":[{"id":"7267848f22239747d2a2bad85e4464e5823736cc","date":1538651093,"type":0,"author":"Jim Ferenczi","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestQueryBuilder#testMaxBooleanClause().mjava","pathOld":"/dev/null","sourceNew":"  public void testMaxBooleanClause() throws Exception {\n    int size = 34;\n    CannedBinaryTokenStream.BinaryToken[] tokens = new CannedBinaryTokenStream.BinaryToken[size];\n    BytesRef term1 = new BytesRef(\"ff\");\n    BytesRef term2 = new BytesRef(\"f\");\n    for (int i = 0; i < size;) {\n      if (i % 2 == 0) {\n        tokens[i] = new CannedBinaryTokenStream.BinaryToken(term2, 1, 1);\n        tokens[i + 1] = new CannedBinaryTokenStream.BinaryToken(term1, 0, 2);\n        i += 2;\n      } else {\n        tokens[i] = new CannedBinaryTokenStream.BinaryToken(term2, 1, 1);\n        i ++;\n      }\n    }\n    QueryBuilder qb = new QueryBuilder(null);\n    try (TokenStream ts = new CannedBinaryTokenStream(tokens)) {\n      expectThrows(BooleanQuery.TooManyClauses.class, () -> qb.analyzeGraphBoolean(\"\", ts, BooleanClause.Occur.MUST));\n    }\n    try (TokenStream ts = new CannedBinaryTokenStream(tokens)) {\n      expectThrows(BooleanQuery.TooManyClauses.class, () -> qb.analyzeGraphBoolean(\"\", ts, BooleanClause.Occur.SHOULD));\n    }\n    try (TokenStream ts = new CannedBinaryTokenStream(tokens)) {\n      expectThrows(BooleanQuery.TooManyClauses.class, () -> qb.analyzeGraphPhrase(ts, \"\", 0));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"36c70eb3b44de4355a7168b762cadc0f1cf194bc","date":1561542955,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestQueryBuilder#testMaxBooleanClause().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestQueryBuilder#testMaxBooleanClause().mjava","sourceNew":"  public void testMaxBooleanClause() throws Exception {\n    int size = 34;\n    CannedBinaryTokenStream.BinaryToken[] tokens = new CannedBinaryTokenStream.BinaryToken[size];\n    BytesRef term1 = new BytesRef(\"ff\");\n    BytesRef term2 = new BytesRef(\"f\");\n    for (int i = 0; i < size;) {\n      if (i % 2 == 0) {\n        tokens[i] = new CannedBinaryTokenStream.BinaryToken(term2, 1, 1);\n        tokens[i + 1] = new CannedBinaryTokenStream.BinaryToken(term1, 0, 2);\n        i += 2;\n      } else {\n        tokens[i] = new CannedBinaryTokenStream.BinaryToken(term2, 1, 1);\n        i ++;\n      }\n    }\n    QueryBuilder qb = new QueryBuilder(null);\n    try (TokenStream ts = new CannedBinaryTokenStream(tokens)) {\n      expectThrows(IndexSearcher.TooManyClauses.class, () -> qb.analyzeGraphBoolean(\"\", ts, BooleanClause.Occur.MUST));\n    }\n    try (TokenStream ts = new CannedBinaryTokenStream(tokens)) {\n      expectThrows(IndexSearcher.TooManyClauses.class, () -> qb.analyzeGraphBoolean(\"\", ts, BooleanClause.Occur.SHOULD));\n    }\n    try (TokenStream ts = new CannedBinaryTokenStream(tokens)) {\n      expectThrows(IndexSearcher.TooManyClauses.class, () -> qb.analyzeGraphPhrase(ts, \"\", 0));\n    }\n  }\n\n","sourceOld":"  public void testMaxBooleanClause() throws Exception {\n    int size = 34;\n    CannedBinaryTokenStream.BinaryToken[] tokens = new CannedBinaryTokenStream.BinaryToken[size];\n    BytesRef term1 = new BytesRef(\"ff\");\n    BytesRef term2 = new BytesRef(\"f\");\n    for (int i = 0; i < size;) {\n      if (i % 2 == 0) {\n        tokens[i] = new CannedBinaryTokenStream.BinaryToken(term2, 1, 1);\n        tokens[i + 1] = new CannedBinaryTokenStream.BinaryToken(term1, 0, 2);\n        i += 2;\n      } else {\n        tokens[i] = new CannedBinaryTokenStream.BinaryToken(term2, 1, 1);\n        i ++;\n      }\n    }\n    QueryBuilder qb = new QueryBuilder(null);\n    try (TokenStream ts = new CannedBinaryTokenStream(tokens)) {\n      expectThrows(BooleanQuery.TooManyClauses.class, () -> qb.analyzeGraphBoolean(\"\", ts, BooleanClause.Occur.MUST));\n    }\n    try (TokenStream ts = new CannedBinaryTokenStream(tokens)) {\n      expectThrows(BooleanQuery.TooManyClauses.class, () -> qb.analyzeGraphBoolean(\"\", ts, BooleanClause.Occur.SHOULD));\n    }\n    try (TokenStream ts = new CannedBinaryTokenStream(tokens)) {\n      expectThrows(BooleanQuery.TooManyClauses.class, () -> qb.analyzeGraphPhrase(ts, \"\", 0));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7267848f22239747d2a2bad85e4464e5823736cc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"36c70eb3b44de4355a7168b762cadc0f1cf194bc":["7267848f22239747d2a2bad85e4464e5823736cc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["36c70eb3b44de4355a7168b762cadc0f1cf194bc"]},"commit2Childs":{"7267848f22239747d2a2bad85e4464e5823736cc":["36c70eb3b44de4355a7168b762cadc0f1cf194bc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7267848f22239747d2a2bad85e4464e5823736cc"],"36c70eb3b44de4355a7168b762cadc0f1cf194bc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}