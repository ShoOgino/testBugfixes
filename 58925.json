{"path":"src/java/org/apache/lucene/index/IndexReader#deleteDocuments(Term).mjava","commits":[{"id":"ff150a6da6c43f093044f7717b36fd565b99634d","date":1134001320,"type":0,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#deleteDocuments(Term).mjava","pathOld":"/dev/null","sourceNew":"  /** Deletes all documents containing <code>term</code>.\n   * This is useful if one uses a document field to hold a unique ID string for\n   * the document.  Then to delete such a document, one merely constructs a\n   * term with the appropriate field and the unique ID string as its text and\n   * passes it to this method.\n   * See {@link #delete(int)} for information about when this deletion will \n   * become effective.\n   * @return the number of documents deleted\n   */\n  public final int deleteDocuments(Term term) throws IOException {\n    TermDocs docs = termDocs(term);\n    if (docs == null) return 0;\n    int n = 0;\n    try {\n      while (docs.next()) {\n        deleteDocument(docs.doc());\n        n++;\n      }\n    } finally {\n      docs.close();\n    }\n    return n;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["1b54a9bc667895a2095a886184bf69a3179e63df"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e2f195f6d9681a86b05e9d60a295041c25493ac3","date":1146865678,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#deleteDocuments(Term).mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#deleteDocuments(Term).mjava","sourceNew":"  /** Deletes all documents containing <code>term</code>.\n   * This is useful if one uses a document field to hold a unique ID string for\n   * the document.  Then to delete such a document, one merely constructs a\n   * term with the appropriate field and the unique ID string as its text and\n   * passes it to this method.\n   * See {@link #deleteDocument(int)} for information about when this deletion will \n   * become effective.\n   * @return the number of documents deleted\n   */\n  public final int deleteDocuments(Term term) throws IOException {\n    TermDocs docs = termDocs(term);\n    if (docs == null) return 0;\n    int n = 0;\n    try {\n      while (docs.next()) {\n        deleteDocument(docs.doc());\n        n++;\n      }\n    } finally {\n      docs.close();\n    }\n    return n;\n  }\n\n","sourceOld":"  /** Deletes all documents containing <code>term</code>.\n   * This is useful if one uses a document field to hold a unique ID string for\n   * the document.  Then to delete such a document, one merely constructs a\n   * term with the appropriate field and the unique ID string as its text and\n   * passes it to this method.\n   * See {@link #delete(int)} for information about when this deletion will \n   * become effective.\n   * @return the number of documents deleted\n   */\n  public final int deleteDocuments(Term term) throws IOException {\n    TermDocs docs = termDocs(term);\n    if (docs == null) return 0;\n    int n = 0;\n    try {\n      while (docs.next()) {\n        deleteDocument(docs.doc());\n        n++;\n      }\n    } finally {\n      docs.close();\n    }\n    return n;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c2af234e0174872a08e6151ae3419722adb45f6f","date":1160922171,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#deleteDocuments(Term).mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#deleteDocuments(Term).mjava","sourceNew":"  /** Deletes all documents that have a given <code>term</code> indexed.\n   * This is useful if one uses a document field to hold a unique ID string for\n   * the document.  Then to delete such a document, one merely constructs a\n   * term with the appropriate field and the unique ID string as its text and\n   * passes it to this method.\n   * See {@link #deleteDocument(int)} for information about when this deletion will \n   * become effective.\n   * @return the number of documents deleted\n   */\n  public final int deleteDocuments(Term term) throws IOException {\n    TermDocs docs = termDocs(term);\n    if (docs == null) return 0;\n    int n = 0;\n    try {\n      while (docs.next()) {\n        deleteDocument(docs.doc());\n        n++;\n      }\n    } finally {\n      docs.close();\n    }\n    return n;\n  }\n\n","sourceOld":"  /** Deletes all documents containing <code>term</code>.\n   * This is useful if one uses a document field to hold a unique ID string for\n   * the document.  Then to delete such a document, one merely constructs a\n   * term with the appropriate field and the unique ID string as its text and\n   * passes it to this method.\n   * See {@link #deleteDocument(int)} for information about when this deletion will \n   * become effective.\n   * @return the number of documents deleted\n   */\n  public final int deleteDocuments(Term term) throws IOException {\n    TermDocs docs = termDocs(term);\n    if (docs == null) return 0;\n    int n = 0;\n    try {\n      while (docs.next()) {\n        deleteDocument(docs.doc());\n        n++;\n      }\n    } finally {\n      docs.close();\n    }\n    return n;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1b54a9bc667895a2095a886184bf69a3179e63df","date":1172088096,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#deleteDocuments(Term).mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#deleteDocuments(Term).mjava","sourceNew":"  /** Deletes all documents that have a given <code>term</code> indexed.\n   * This is useful if one uses a document field to hold a unique ID string for\n   * the document.  Then to delete such a document, one merely constructs a\n   * term with the appropriate field and the unique ID string as its text and\n   * passes it to this method.\n   * See {@link #deleteDocument(int)} for information about when this deletion will \n   * become effective.\n   *\n   * @return the number of documents deleted\n   * @throws StaleReaderException if the index has changed\n   *  since this reader was opened\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if this reader was closed already\n   *  or there is a low-level IO error\n   */\n  public final int deleteDocuments(Term term) throws StaleReaderException, CorruptIndexException, LockObtainFailedException, IOException {\n    TermDocs docs = termDocs(term);\n    if (docs == null) return 0;\n    int n = 0;\n    try {\n      while (docs.next()) {\n        deleteDocument(docs.doc());\n        n++;\n      }\n    } finally {\n      docs.close();\n    }\n    return n;\n  }\n\n","sourceOld":"  /** Deletes all documents that have a given <code>term</code> indexed.\n   * This is useful if one uses a document field to hold a unique ID string for\n   * the document.  Then to delete such a document, one merely constructs a\n   * term with the appropriate field and the unique ID string as its text and\n   * passes it to this method.\n   * See {@link #deleteDocument(int)} for information about when this deletion will \n   * become effective.\n   * @return the number of documents deleted\n   */\n  public final int deleteDocuments(Term term) throws IOException {\n    TermDocs docs = termDocs(term);\n    if (docs == null) return 0;\n    int n = 0;\n    try {\n      while (docs.next()) {\n        deleteDocument(docs.doc());\n        n++;\n      }\n    } finally {\n      docs.close();\n    }\n    return n;\n  }\n\n","bugFix":["ff150a6da6c43f093044f7717b36fd565b99634d"],"bugIntro":["328c1568e471f0c6eaa49ec00334ca59e573710f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"328c1568e471f0c6eaa49ec00334ca59e573710f","date":1173897963,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#deleteDocuments(Term).mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#deleteDocuments(Term).mjava","sourceNew":"  /** Deletes all documents that have a given <code>term</code> indexed.\n   * This is useful if one uses a document field to hold a unique ID string for\n   * the document.  Then to delete such a document, one merely constructs a\n   * term with the appropriate field and the unique ID string as its text and\n   * passes it to this method.\n   * See {@link #deleteDocument(int)} for information about when this deletion will \n   * become effective.\n   *\n   * @return the number of documents deleted\n   * @throws StaleReaderException if the index has changed\n   *  since this reader was opened\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if there is a low-level IO error\n   */\n  public final int deleteDocuments(Term term) throws StaleReaderException, CorruptIndexException, LockObtainFailedException, IOException {\n    ensureOpen();\n    TermDocs docs = termDocs(term);\n    if (docs == null) return 0;\n    int n = 0;\n    try {\n      while (docs.next()) {\n        deleteDocument(docs.doc());\n        n++;\n      }\n    } finally {\n      docs.close();\n    }\n    return n;\n  }\n\n","sourceOld":"  /** Deletes all documents that have a given <code>term</code> indexed.\n   * This is useful if one uses a document field to hold a unique ID string for\n   * the document.  Then to delete such a document, one merely constructs a\n   * term with the appropriate field and the unique ID string as its text and\n   * passes it to this method.\n   * See {@link #deleteDocument(int)} for information about when this deletion will \n   * become effective.\n   *\n   * @return the number of documents deleted\n   * @throws StaleReaderException if the index has changed\n   *  since this reader was opened\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if this reader was closed already\n   *  or there is a low-level IO error\n   */\n  public final int deleteDocuments(Term term) throws StaleReaderException, CorruptIndexException, LockObtainFailedException, IOException {\n    TermDocs docs = termDocs(term);\n    if (docs == null) return 0;\n    int n = 0;\n    try {\n      while (docs.next()) {\n        deleteDocument(docs.doc());\n        n++;\n      }\n    } finally {\n      docs.close();\n    }\n    return n;\n  }\n\n","bugFix":["1b54a9bc667895a2095a886184bf69a3179e63df"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5712975970a595c28f1988efd007e1b8a617a92f","date":1219499238,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#deleteDocuments(Term).mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#deleteDocuments(Term).mjava","sourceNew":"  /** Deletes all documents that have a given <code>term</code> indexed.\n   * This is useful if one uses a document field to hold a unique ID string for\n   * the document.  Then to delete such a document, one merely constructs a\n   * term with the appropriate field and the unique ID string as its text and\n   * passes it to this method.\n   * See {@link #deleteDocument(int)} for information about when this deletion will \n   * become effective.\n   *\n   * @return the number of documents deleted\n   * @throws StaleReaderException if the index has changed\n   *  since this reader was opened\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if there is a low-level IO error\n   */\n  public int deleteDocuments(Term term) throws StaleReaderException, CorruptIndexException, LockObtainFailedException, IOException {\n    ensureOpen();\n    TermDocs docs = termDocs(term);\n    if (docs == null) return 0;\n    int n = 0;\n    try {\n      while (docs.next()) {\n        deleteDocument(docs.doc());\n        n++;\n      }\n    } finally {\n      docs.close();\n    }\n    return n;\n  }\n\n","sourceOld":"  /** Deletes all documents that have a given <code>term</code> indexed.\n   * This is useful if one uses a document field to hold a unique ID string for\n   * the document.  Then to delete such a document, one merely constructs a\n   * term with the appropriate field and the unique ID string as its text and\n   * passes it to this method.\n   * See {@link #deleteDocument(int)} for information about when this deletion will \n   * become effective.\n   *\n   * @return the number of documents deleted\n   * @throws StaleReaderException if the index has changed\n   *  since this reader was opened\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if there is a low-level IO error\n   */\n  public final int deleteDocuments(Term term) throws StaleReaderException, CorruptIndexException, LockObtainFailedException, IOException {\n    ensureOpen();\n    TermDocs docs = termDocs(term);\n    if (docs == null) return 0;\n    int n = 0;\n    try {\n      while (docs.next()) {\n        deleteDocument(docs.doc());\n        n++;\n      }\n    } finally {\n      docs.close();\n    }\n    return n;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#deleteDocuments(Term).mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#deleteDocuments(Term).mjava","sourceNew":"  /** Deletes all documents that have a given <code>term</code> indexed.\n   * This is useful if one uses a document field to hold a unique ID string for\n   * the document.  Then to delete such a document, one merely constructs a\n   * term with the appropriate field and the unique ID string as its text and\n   * passes it to this method.\n   * See {@link #deleteDocument(int)} for information about when this deletion will \n   * become effective.\n   *\n   * @return the number of documents deleted\n   * @throws StaleReaderException if the index has changed\n   *  since this reader was opened\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if there is a low-level IO error\n   */\n  public int deleteDocuments(Term term) throws StaleReaderException, CorruptIndexException, LockObtainFailedException, IOException {\n    ensureOpen();\n    TermDocs docs = termDocs(term);\n    if (docs == null) return 0;\n    int n = 0;\n    try {\n      while (docs.next()) {\n        deleteDocument(docs.doc());\n        n++;\n      }\n    } finally {\n      docs.close();\n    }\n    return n;\n  }\n\n","sourceOld":"  /** Deletes all documents that have a given <code>term</code> indexed.\n   * This is useful if one uses a document field to hold a unique ID string for\n   * the document.  Then to delete such a document, one merely constructs a\n   * term with the appropriate field and the unique ID string as its text and\n   * passes it to this method.\n   * See {@link #deleteDocument(int)} for information about when this deletion will \n   * become effective.\n   *\n   * @return the number of documents deleted\n   * @throws StaleReaderException if the index has changed\n   *  since this reader was opened\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if there is a low-level IO error\n   */\n  public int deleteDocuments(Term term) throws StaleReaderException, CorruptIndexException, LockObtainFailedException, IOException {\n    ensureOpen();\n    TermDocs docs = termDocs(term);\n    if (docs == null) return 0;\n    int n = 0;\n    try {\n      while (docs.next()) {\n        deleteDocument(docs.doc());\n        n++;\n      }\n    } finally {\n      docs.close();\n    }\n    return n;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"328c1568e471f0c6eaa49ec00334ca59e573710f":["1b54a9bc667895a2095a886184bf69a3179e63df"],"5712975970a595c28f1988efd007e1b8a617a92f":["328c1568e471f0c6eaa49ec00334ca59e573710f"],"c2af234e0174872a08e6151ae3419722adb45f6f":["e2f195f6d9681a86b05e9d60a295041c25493ac3"],"1b54a9bc667895a2095a886184bf69a3179e63df":["c2af234e0174872a08e6151ae3419722adb45f6f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ff150a6da6c43f093044f7717b36fd565b99634d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e2f195f6d9681a86b05e9d60a295041c25493ac3":["ff150a6da6c43f093044f7717b36fd565b99634d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["5712975970a595c28f1988efd007e1b8a617a92f"]},"commit2Childs":{"328c1568e471f0c6eaa49ec00334ca59e573710f":["5712975970a595c28f1988efd007e1b8a617a92f"],"5712975970a595c28f1988efd007e1b8a617a92f":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"c2af234e0174872a08e6151ae3419722adb45f6f":["1b54a9bc667895a2095a886184bf69a3179e63df"],"1b54a9bc667895a2095a886184bf69a3179e63df":["328c1568e471f0c6eaa49ec00334ca59e573710f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ff150a6da6c43f093044f7717b36fd565b99634d"],"ff150a6da6c43f093044f7717b36fd565b99634d":["e2f195f6d9681a86b05e9d60a295041c25493ac3"],"e2f195f6d9681a86b05e9d60a295041c25493ac3":["c2af234e0174872a08e6151ae3419722adb45f6f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}