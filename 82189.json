{"path":"lucene/core/src/test/org/apache/lucene/geo/TestPoint2D#testTriangleDisjoint().mjava","commits":[{"id":"09c1e6d465800c73af60624bf9d4459a19f7940c","date":1579293280,"type":1,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/geo/TestPoint2D#testTriangleDisjoint().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/geo/TestPoint2D#testTriangleDisjoint().mjava","sourceNew":"  public void testTriangleDisjoint() {\n    Component2D point2D = Point2D.create(new double[] {0, 0});\n    double ax = 4;\n    double ay = 4;\n    double bx = 5;\n    double by = 5;\n    double cx = 5;\n    double cy = 4;\n    assertEquals(Relation.CELL_OUTSIDE_QUERY, point2D.relateTriangle(ax, ay, bx, by , cx, cy));\n  }\n\n","sourceOld":"  public void testTriangleDisjoint() {\n    Component2D point2D = Point2D.create(new double[] {0, 0});\n    double ax = 4;\n    double ay = 4;\n    double bx = 5;\n    double by = 5;\n    double cx = 5;\n    double cy = 4;\n    assertEquals(Relation.CELL_OUTSIDE_QUERY, point2D.relateTriangle(ax, ay, bx, by , cx, cy));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"258015480e75238ff7a8d9ebab69c2be37dfa6dc","date":1580796608,"type":3,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/geo/TestPoint2D#testTriangleDisjoint().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/geo/TestPoint2D#testTriangleDisjoint().mjava","sourceNew":"  public void testTriangleDisjoint() {\n    Component2D point2D = Point2D.create(new double[] {0, 0});\n    double ax = 4;\n    double ay = 4;\n    double bx = 5;\n    double by = 5;\n    double cx = 5;\n    double cy = 4;\n    assertEquals(Relation.CELL_OUTSIDE_QUERY, point2D.relateTriangle(ax, ay, bx, by , cx, cy));\n    assertEquals(Component2D.WithinRelation.DISJOINT,\n        point2D.withinTriangle(ax, ay, random().nextBoolean(), bx, by, random().nextBoolean(), cx, cy, random().nextBoolean()));\n  }\n\n","sourceOld":"  public void testTriangleDisjoint() {\n    Component2D point2D = Point2D.create(new double[] {0, 0});\n    double ax = 4;\n    double ay = 4;\n    double bx = 5;\n    double by = 5;\n    double cx = 5;\n    double cy = 4;\n    assertEquals(Relation.CELL_OUTSIDE_QUERY, point2D.relateTriangle(ax, ay, bx, by , cx, cy));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a923e28c9d079048c6993884ec89c44f0380b923","date":1581100153,"type":3,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/geo/TestPoint2D#testTriangleDisjoint().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/geo/TestPoint2D#testTriangleDisjoint().mjava","sourceNew":"  public void testTriangleDisjoint() {\n    Component2D point2D = Point2D.create(new Point(0, 0));\n    double ax = 4;\n    double ay = 4;\n    double bx = 5;\n    double by = 5;\n    double cx = 5;\n    double cy = 4;\n    assertEquals(Relation.CELL_OUTSIDE_QUERY, point2D.relateTriangle(ax, ay, bx, by , cx, cy));\n    assertEquals(Component2D.WithinRelation.DISJOINT,\n        point2D.withinTriangle(ax, ay, random().nextBoolean(), bx, by, random().nextBoolean(), cx, cy, random().nextBoolean()));\n  }\n\n","sourceOld":"  public void testTriangleDisjoint() {\n    Component2D point2D = Point2D.create(new double[] {0, 0});\n    double ax = 4;\n    double ay = 4;\n    double bx = 5;\n    double by = 5;\n    double cx = 5;\n    double cy = 4;\n    assertEquals(Relation.CELL_OUTSIDE_QUERY, point2D.relateTriangle(ax, ay, bx, by , cx, cy));\n    assertEquals(Component2D.WithinRelation.DISJOINT,\n        point2D.withinTriangle(ax, ay, random().nextBoolean(), bx, by, random().nextBoolean(), cx, cy, random().nextBoolean()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c568a1e2a5125c2245150eebb030a81baa158b31","date":1587403489,"type":3,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/geo/TestPoint2D#testTriangleDisjoint().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/geo/TestPoint2D#testTriangleDisjoint().mjava","sourceNew":"  public void testTriangleDisjoint() {\n    Component2D point2D = Point2D.create(new Point(0, 0));\n    double ax = 4;\n    double ay = 4;\n    double bx = 5;\n    double by = 5;\n    double cx = 5;\n    double cy = 4;\n    assertFalse(point2D.intersectsTriangle(ax, ay, bx, by , cx, cy));\n    assertFalse(point2D.intersectsLine(ax, ay, bx, by));\n    assertFalse(point2D.containsTriangle(ax, ay, bx, by , cx, cy));\n    assertFalse(point2D.containsLine(ax, ay, bx, by));\n    assertEquals(Component2D.WithinRelation.DISJOINT,\n        point2D.withinTriangle(ax, ay, random().nextBoolean(), bx, by, random().nextBoolean(), cx, cy, random().nextBoolean()));\n  }\n\n","sourceOld":"  public void testTriangleDisjoint() {\n    Component2D point2D = Point2D.create(new Point(0, 0));\n    double ax = 4;\n    double ay = 4;\n    double bx = 5;\n    double by = 5;\n    double cx = 5;\n    double cy = 4;\n    assertEquals(Relation.CELL_OUTSIDE_QUERY, point2D.relateTriangle(ax, ay, bx, by , cx, cy));\n    assertEquals(Component2D.WithinRelation.DISJOINT,\n        point2D.withinTriangle(ax, ay, random().nextBoolean(), bx, by, random().nextBoolean(), cx, cy, random().nextBoolean()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c568a1e2a5125c2245150eebb030a81baa158b31":["a923e28c9d079048c6993884ec89c44f0380b923"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"258015480e75238ff7a8d9ebab69c2be37dfa6dc":["09c1e6d465800c73af60624bf9d4459a19f7940c"],"09c1e6d465800c73af60624bf9d4459a19f7940c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a923e28c9d079048c6993884ec89c44f0380b923":["258015480e75238ff7a8d9ebab69c2be37dfa6dc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c568a1e2a5125c2245150eebb030a81baa158b31"]},"commit2Childs":{"c568a1e2a5125c2245150eebb030a81baa158b31":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["09c1e6d465800c73af60624bf9d4459a19f7940c"],"258015480e75238ff7a8d9ebab69c2be37dfa6dc":["a923e28c9d079048c6993884ec89c44f0380b923"],"09c1e6d465800c73af60624bf9d4459a19f7940c":["258015480e75238ff7a8d9ebab69c2be37dfa6dc"],"a923e28c9d079048c6993884ec89c44f0380b923":["c568a1e2a5125c2245150eebb030a81baa158b31"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}