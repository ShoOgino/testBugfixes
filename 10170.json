{"path":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/dXYdZSolid#dXYdZSolid(PlanetModel,double,double,double,double).mjava","commits":[{"id":"b4e444678504caf66a8060b1d514383aa4feac0c","date":1457399659,"type":1,"author":"David Smiley","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/dXYdZSolid#dXYdZSolid(PlanetModel,double,double,double,double).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/geo3d/dXYdZSolid#dXYdZSolid(PlanetModel,double,double,double,double).mjava","sourceNew":"  /**\n   * Sole constructor\n   *\n   *@param planetModel is the planet model.\n   *@param X is the X value.\n   *@param minY is the minimum Y value.\n   *@param maxY is the maximum Y value.\n   *@param Z is the Z value.\n   */\n  public dXYdZSolid(final PlanetModel planetModel,\n    final double X,\n    final double minY,\n    final double maxY,\n    final double Z) {\n    super(planetModel);\n    // Argument checking\n    if (maxY - minY < Vector.MINIMUM_RESOLUTION)\n      throw new IllegalArgumentException(\"Y values in wrong order or identical\");\n\n    // Build the planes and intersect them.\n    final Plane xPlane = new Plane(xUnitVector,-X);\n    final Plane zPlane = new Plane(zUnitVector,-Z);\n    final SidedPlane minYPlane = new SidedPlane(0.0,maxY,0.0,yUnitVector,-minY);\n    final SidedPlane maxYPlane = new SidedPlane(0.0,minY,0.0,yUnitVector,-maxY);\n    surfacePoints = xPlane.findIntersections(planetModel,zPlane,minYPlane,maxYPlane);\n  }\n\n","sourceOld":"  /**\n   * Sole constructor\n   *\n   *@param planetModel is the planet model.\n   *@param X is the X value.\n   *@param minY is the minimum Y value.\n   *@param maxY is the maximum Y value.\n   *@param Z is the Z value.\n   */\n  public dXYdZSolid(final PlanetModel planetModel,\n    final double X,\n    final double minY,\n    final double maxY,\n    final double Z) {\n    super(planetModel);\n    // Argument checking\n    if (maxY - minY < Vector.MINIMUM_RESOLUTION)\n      throw new IllegalArgumentException(\"Y values in wrong order or identical\");\n\n    // Build the planes and intersect them.\n    final Plane xPlane = new Plane(xUnitVector,-X);\n    final Plane zPlane = new Plane(zUnitVector,-Z);\n    final SidedPlane minYPlane = new SidedPlane(0.0,maxY,0.0,yUnitVector,-minY);\n    final SidedPlane maxYPlane = new SidedPlane(0.0,minY,0.0,yUnitVector,-maxY);\n    surfacePoints = xPlane.findIntersections(planetModel,zPlane,minYPlane,maxYPlane);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"25f722af2eac1e9065821e525111924b171ab724","date":1503596482,"type":3,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/dXYdZSolid#dXYdZSolid(PlanetModel,double,double,double,double).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/dXYdZSolid#dXYdZSolid(PlanetModel,double,double,double,double).mjava","sourceNew":"  /**\n   * Sole constructor\n   *\n   *@param planetModel is the planet model.\n   *@param X is the X value.\n   *@param minY is the minimum Y value.\n   *@param maxY is the maximum Y value.\n   *@param Z is the Z value.\n   */\n  public dXYdZSolid(final PlanetModel planetModel,\n    final double X,\n    final double minY,\n    final double maxY,\n    final double Z) {\n    super(planetModel);\n    // Argument checking\n    if (maxY - minY < Vector.MINIMUM_RESOLUTION)\n      throw new IllegalArgumentException(\"Y values in wrong order or identical\");\n\n    this.X = X;\n    this.minY = minY;\n    this.maxY = maxY;\n    this.Z = Z;\n\n    // Build the planes and intersect them.\n    final Plane xPlane = new Plane(xUnitVector,-X);\n    final Plane zPlane = new Plane(zUnitVector,-Z);\n    final SidedPlane minYPlane = new SidedPlane(0.0,maxY,0.0,yUnitVector,-minY);\n    final SidedPlane maxYPlane = new SidedPlane(0.0,minY,0.0,yUnitVector,-maxY);\n    surfacePoints = xPlane.findIntersections(planetModel,zPlane,minYPlane,maxYPlane);\n  }\n\n","sourceOld":"  /**\n   * Sole constructor\n   *\n   *@param planetModel is the planet model.\n   *@param X is the X value.\n   *@param minY is the minimum Y value.\n   *@param maxY is the maximum Y value.\n   *@param Z is the Z value.\n   */\n  public dXYdZSolid(final PlanetModel planetModel,\n    final double X,\n    final double minY,\n    final double maxY,\n    final double Z) {\n    super(planetModel);\n    // Argument checking\n    if (maxY - minY < Vector.MINIMUM_RESOLUTION)\n      throw new IllegalArgumentException(\"Y values in wrong order or identical\");\n\n    // Build the planes and intersect them.\n    final Plane xPlane = new Plane(xUnitVector,-X);\n    final Plane zPlane = new Plane(zUnitVector,-Z);\n    final SidedPlane minYPlane = new SidedPlane(0.0,maxY,0.0,yUnitVector,-minY);\n    final SidedPlane maxYPlane = new SidedPlane(0.0,minY,0.0,yUnitVector,-maxY);\n    surfacePoints = xPlane.findIntersections(planetModel,zPlane,minYPlane,maxYPlane);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a7809d1d753b67f48b1a706e17034bf8b624ea3","date":1504366927,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/dXYdZSolid#dXYdZSolid(PlanetModel,double,double,double,double).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/dXYdZSolid#dXYdZSolid(PlanetModel,double,double,double,double).mjava","sourceNew":"  /**\n   * Sole constructor\n   *\n   *@param planetModel is the planet model.\n   *@param X is the X value.\n   *@param minY is the minimum Y value.\n   *@param maxY is the maximum Y value.\n   *@param Z is the Z value.\n   */\n  public dXYdZSolid(final PlanetModel planetModel,\n    final double X,\n    final double minY,\n    final double maxY,\n    final double Z) {\n    super(planetModel);\n    // Argument checking\n    if (maxY - minY < Vector.MINIMUM_RESOLUTION)\n      throw new IllegalArgumentException(\"Y values in wrong order or identical\");\n\n    this.X = X;\n    this.minY = minY;\n    this.maxY = maxY;\n    this.Z = Z;\n\n    // Build the planes and intersect them.\n    final Plane xPlane = new Plane(xUnitVector,-X);\n    final Plane zPlane = new Plane(zUnitVector,-Z);\n    final SidedPlane minYPlane = new SidedPlane(0.0,maxY,0.0,yUnitVector,-minY);\n    final SidedPlane maxYPlane = new SidedPlane(0.0,minY,0.0,yUnitVector,-maxY);\n    surfacePoints = xPlane.findIntersections(planetModel,zPlane,minYPlane,maxYPlane);\n  }\n\n","sourceOld":"  /**\n   * Sole constructor\n   *\n   *@param planetModel is the planet model.\n   *@param X is the X value.\n   *@param minY is the minimum Y value.\n   *@param maxY is the maximum Y value.\n   *@param Z is the Z value.\n   */\n  public dXYdZSolid(final PlanetModel planetModel,\n    final double X,\n    final double minY,\n    final double maxY,\n    final double Z) {\n    super(planetModel);\n    // Argument checking\n    if (maxY - minY < Vector.MINIMUM_RESOLUTION)\n      throw new IllegalArgumentException(\"Y values in wrong order or identical\");\n\n    // Build the planes and intersect them.\n    final Plane xPlane = new Plane(xUnitVector,-X);\n    final Plane zPlane = new Plane(zUnitVector,-Z);\n    final SidedPlane minYPlane = new SidedPlane(0.0,maxY,0.0,yUnitVector,-minY);\n    final SidedPlane maxYPlane = new SidedPlane(0.0,minY,0.0,yUnitVector,-maxY);\n    surfacePoints = xPlane.findIntersections(planetModel,zPlane,minYPlane,maxYPlane);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"25f722af2eac1e9065821e525111924b171ab724":["b4e444678504caf66a8060b1d514383aa4feac0c"],"3a7809d1d753b67f48b1a706e17034bf8b624ea3":["b4e444678504caf66a8060b1d514383aa4feac0c","25f722af2eac1e9065821e525111924b171ab724"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b4e444678504caf66a8060b1d514383aa4feac0c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["25f722af2eac1e9065821e525111924b171ab724"]},"commit2Childs":{"25f722af2eac1e9065821e525111924b171ab724":["3a7809d1d753b67f48b1a706e17034bf8b624ea3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a7809d1d753b67f48b1a706e17034bf8b624ea3":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b4e444678504caf66a8060b1d514383aa4feac0c"],"b4e444678504caf66a8060b1d514383aa4feac0c":["25f722af2eac1e9065821e525111924b171ab724","3a7809d1d753b67f48b1a706e17034bf8b624ea3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3a7809d1d753b67f48b1a706e17034bf8b624ea3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}