{"path":"solr/core/src/java/org/apache/solr/core/CoreContainer#processCoreCreateException(SolrException,CoreDescriptor,ConfigSet).mjava","commits":[{"id":"b39b1b02e442aaf736cc87417e93552cbd8ef1da","date":1484786722,"type":0,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#processCoreCreateException(SolrException,CoreDescriptor,ConfigSet).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Take action when we failed to create a SolrCore. If error is due to corrupt index, try to recover. Various recovery\n   * strategies can be specified via system properties \"-DCoreInitFailedAction={fromleader, none}\"\n   *\n   * @see CoreInitFailedAction\n   *\n   * @param original\n   *          the problem seen when loading the core the first time.\n   * @param dcore\n   *          core descriptor for the core to create\n   * @param coreConfig\n   *          core config for the core to create\n   * @return if possible\n   * @throws SolrException\n   *           rethrows the original exception if we will not attempt to recover, throws a new SolrException with the\n   *           original exception as a suppressed exception if there is a second problem creating the solr core.\n   */\n  private SolrCore processCoreCreateException(SolrException original, CoreDescriptor dcore, ConfigSet coreConfig) {\n    // Traverse full chain since CIE may not be root exception\n    Throwable cause = original;\n    while ((cause = cause.getCause()) != null) {\n      if (cause instanceof CorruptIndexException) {\n        break;\n      }\n    }\n    \n    // If no CorruptIndexExeption, nothing we can try here\n    if (cause == null) throw original;\n    \n    CoreInitFailedAction action = CoreInitFailedAction.valueOf(System.getProperty(CoreInitFailedAction.class.getSimpleName(), \"none\"));\n    log.debug(\"CorruptIndexException while creating core, will attempt to repair via {}\", action);\n    \n    switch (action) {\n      case fromleader: // Recovery from leader on a CorruptedIndexException\n        if (isZooKeeperAware()) {\n          CloudDescriptor desc = dcore.getCloudDescriptor();\n          try {\n            Replica leader = getZkController().getClusterState()\n                .getCollection(desc.getCollectionName())\n                .getSlice(desc.getShardId())\n                .getLeader();\n            if (leader != null && leader.getState() == State.ACTIVE) {\n              log.info(\"Found active leader, will attempt to create fresh core and recover.\");\n              resetIndexDirectory(dcore, coreConfig);\n              return new SolrCore(dcore, coreConfig);\n            }\n          } catch (SolrException se) {\n            se.addSuppressed(original);\n            throw se;\n          }\n        }\n        throw original;\n      case none:\n        throw original;\n      default:\n        log.warn(\"Failed to create core, and did not recognize specified 'CoreInitFailedAction': [{}]. Valid options are {}.\",\n            action, Arrays.asList(CoreInitFailedAction.values()));\n        throw original;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90a682dc1bfd188ef61cc28373c7f5d700b4ac75","date":1485186128,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#processCoreCreateException(SolrException,CoreDescriptor,ConfigSet).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Take action when we failed to create a SolrCore. If error is due to corrupt index, try to recover. Various recovery\n   * strategies can be specified via system properties \"-DCoreInitFailedAction={fromleader, none}\"\n   *\n   * @see CoreInitFailedAction\n   *\n   * @param original\n   *          the problem seen when loading the core the first time.\n   * @param dcore\n   *          core descriptor for the core to create\n   * @param coreConfig\n   *          core config for the core to create\n   * @return if possible\n   * @throws SolrException\n   *           rethrows the original exception if we will not attempt to recover, throws a new SolrException with the\n   *           original exception as a suppressed exception if there is a second problem creating the solr core.\n   */\n  private SolrCore processCoreCreateException(SolrException original, CoreDescriptor dcore, ConfigSet coreConfig) {\n    // Traverse full chain since CIE may not be root exception\n    Throwable cause = original;\n    while ((cause = cause.getCause()) != null) {\n      if (cause instanceof CorruptIndexException) {\n        break;\n      }\n    }\n    \n    // If no CorruptIndexExeption, nothing we can try here\n    if (cause == null) throw original;\n    \n    CoreInitFailedAction action = CoreInitFailedAction.valueOf(System.getProperty(CoreInitFailedAction.class.getSimpleName(), \"none\"));\n    log.debug(\"CorruptIndexException while creating core, will attempt to repair via {}\", action);\n    \n    switch (action) {\n      case fromleader: // Recovery from leader on a CorruptedIndexException\n        if (isZooKeeperAware()) {\n          CloudDescriptor desc = dcore.getCloudDescriptor();\n          try {\n            Replica leader = getZkController().getClusterState()\n                .getCollection(desc.getCollectionName())\n                .getSlice(desc.getShardId())\n                .getLeader();\n            if (leader != null && leader.getState() == State.ACTIVE) {\n              log.info(\"Found active leader, will attempt to create fresh core and recover.\");\n              resetIndexDirectory(dcore, coreConfig);\n              return new SolrCore(dcore, coreConfig);\n            }\n          } catch (SolrException se) {\n            se.addSuppressed(original);\n            throw se;\n          }\n        }\n        throw original;\n      case none:\n        throw original;\n      default:\n        log.warn(\"Failed to create core, and did not recognize specified 'CoreInitFailedAction': [{}]. Valid options are {}.\",\n            action, Arrays.asList(CoreInitFailedAction.values()));\n        throw original;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"729cb470f975115d4c60517b2cb7c42e37a7a2e1","date":1492041760,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#processCoreCreateException(SolrException,CoreDescriptor,ConfigSet).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#processCoreCreateException(SolrException,CoreDescriptor,ConfigSet).mjava","sourceNew":"  /**\n   * Take action when we failed to create a SolrCore. If error is due to corrupt index, try to recover. Various recovery\n   * strategies can be specified via system properties \"-DCoreInitFailedAction={fromleader, none}\"\n   *\n   * @see CoreInitFailedAction\n   *\n   * @param original\n   *          the problem seen when loading the core the first time.\n   * @param dcore\n   *          core descriptor for the core to create\n   * @param coreConfig\n   *          core config for the core to create\n   * @return if possible\n   * @throws SolrException\n   *           rethrows the original exception if we will not attempt to recover, throws a new SolrException with the\n   *           original exception as a suppressed exception if there is a second problem creating the solr core.\n   */\n  private SolrCore processCoreCreateException(SolrException original, CoreDescriptor dcore, ConfigSet coreConfig) {\n    // Traverse full chain since CIE may not be root exception\n    Throwable cause = original;\n    while ((cause = cause.getCause()) != null) {\n      if (cause instanceof CorruptIndexException) {\n        break;\n      }\n    }\n    \n    // If no CorruptIndexExeption, nothing we can try here\n    if (cause == null) throw original;\n    \n    CoreInitFailedAction action = CoreInitFailedAction.valueOf(System.getProperty(CoreInitFailedAction.class.getSimpleName(), \"none\"));\n    log.debug(\"CorruptIndexException while creating core, will attempt to repair via {}\", action);\n    \n    switch (action) {\n      case fromleader: // Recovery from leader on a CorruptedIndexException\n        if (isZooKeeperAware()) {\n          CloudDescriptor desc = dcore.getCloudDescriptor();\n          try {\n            Replica leader = getZkController().getClusterState()\n                .getCollection(desc.getCollectionName())\n                .getSlice(desc.getShardId())\n                .getLeader();\n            if (leader != null && leader.getState() == State.ACTIVE) {\n              log.info(\"Found active leader, will attempt to create fresh core and recover.\");\n              resetIndexDirectory(dcore, coreConfig);\n              return new SolrCore(this, dcore, coreConfig);\n            }\n          } catch (SolrException se) {\n            se.addSuppressed(original);\n            throw se;\n          }\n        }\n        throw original;\n      case none:\n        throw original;\n      default:\n        log.warn(\"Failed to create core, and did not recognize specified 'CoreInitFailedAction': [{}]. Valid options are {}.\",\n            action, Arrays.asList(CoreInitFailedAction.values()));\n        throw original;\n    }\n  }\n\n","sourceOld":"  /**\n   * Take action when we failed to create a SolrCore. If error is due to corrupt index, try to recover. Various recovery\n   * strategies can be specified via system properties \"-DCoreInitFailedAction={fromleader, none}\"\n   *\n   * @see CoreInitFailedAction\n   *\n   * @param original\n   *          the problem seen when loading the core the first time.\n   * @param dcore\n   *          core descriptor for the core to create\n   * @param coreConfig\n   *          core config for the core to create\n   * @return if possible\n   * @throws SolrException\n   *           rethrows the original exception if we will not attempt to recover, throws a new SolrException with the\n   *           original exception as a suppressed exception if there is a second problem creating the solr core.\n   */\n  private SolrCore processCoreCreateException(SolrException original, CoreDescriptor dcore, ConfigSet coreConfig) {\n    // Traverse full chain since CIE may not be root exception\n    Throwable cause = original;\n    while ((cause = cause.getCause()) != null) {\n      if (cause instanceof CorruptIndexException) {\n        break;\n      }\n    }\n    \n    // If no CorruptIndexExeption, nothing we can try here\n    if (cause == null) throw original;\n    \n    CoreInitFailedAction action = CoreInitFailedAction.valueOf(System.getProperty(CoreInitFailedAction.class.getSimpleName(), \"none\"));\n    log.debug(\"CorruptIndexException while creating core, will attempt to repair via {}\", action);\n    \n    switch (action) {\n      case fromleader: // Recovery from leader on a CorruptedIndexException\n        if (isZooKeeperAware()) {\n          CloudDescriptor desc = dcore.getCloudDescriptor();\n          try {\n            Replica leader = getZkController().getClusterState()\n                .getCollection(desc.getCollectionName())\n                .getSlice(desc.getShardId())\n                .getLeader();\n            if (leader != null && leader.getState() == State.ACTIVE) {\n              log.info(\"Found active leader, will attempt to create fresh core and recover.\");\n              resetIndexDirectory(dcore, coreConfig);\n              return new SolrCore(dcore, coreConfig);\n            }\n          } catch (SolrException se) {\n            se.addSuppressed(original);\n            throw se;\n          }\n        }\n        throw original;\n      case none:\n        throw original;\n      default:\n        log.warn(\"Failed to create core, and did not recognize specified 'CoreInitFailedAction': [{}]. Valid options are {}.\",\n            action, Arrays.asList(CoreInitFailedAction.values()));\n        throw original;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#processCoreCreateException(SolrException,CoreDescriptor,ConfigSet).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#processCoreCreateException(SolrException,CoreDescriptor,ConfigSet).mjava","sourceNew":"  /**\n   * Take action when we failed to create a SolrCore. If error is due to corrupt index, try to recover. Various recovery\n   * strategies can be specified via system properties \"-DCoreInitFailedAction={fromleader, none}\"\n   *\n   * @see CoreInitFailedAction\n   *\n   * @param original\n   *          the problem seen when loading the core the first time.\n   * @param dcore\n   *          core descriptor for the core to create\n   * @param coreConfig\n   *          core config for the core to create\n   * @return if possible\n   * @throws SolrException\n   *           rethrows the original exception if we will not attempt to recover, throws a new SolrException with the\n   *           original exception as a suppressed exception if there is a second problem creating the solr core.\n   */\n  private SolrCore processCoreCreateException(SolrException original, CoreDescriptor dcore, ConfigSet coreConfig) {\n    // Traverse full chain since CIE may not be root exception\n    Throwable cause = original;\n    while ((cause = cause.getCause()) != null) {\n      if (cause instanceof CorruptIndexException) {\n        break;\n      }\n    }\n    \n    // If no CorruptIndexExeption, nothing we can try here\n    if (cause == null) throw original;\n    \n    CoreInitFailedAction action = CoreInitFailedAction.valueOf(System.getProperty(CoreInitFailedAction.class.getSimpleName(), \"none\"));\n    log.debug(\"CorruptIndexException while creating core, will attempt to repair via {}\", action);\n    \n    switch (action) {\n      case fromleader: // Recovery from leader on a CorruptedIndexException\n        if (isZooKeeperAware()) {\n          CloudDescriptor desc = dcore.getCloudDescriptor();\n          try {\n            Replica leader = getZkController().getClusterState()\n                .getCollection(desc.getCollectionName())\n                .getSlice(desc.getShardId())\n                .getLeader();\n            if (leader != null && leader.getState() == State.ACTIVE) {\n              log.info(\"Found active leader, will attempt to create fresh core and recover.\");\n              resetIndexDirectory(dcore, coreConfig);\n              return new SolrCore(this, dcore, coreConfig);\n            }\n          } catch (SolrException se) {\n            se.addSuppressed(original);\n            throw se;\n          }\n        }\n        throw original;\n      case none:\n        throw original;\n      default:\n        log.warn(\"Failed to create core, and did not recognize specified 'CoreInitFailedAction': [{}]. Valid options are {}.\",\n            action, Arrays.asList(CoreInitFailedAction.values()));\n        throw original;\n    }\n  }\n\n","sourceOld":"  /**\n   * Take action when we failed to create a SolrCore. If error is due to corrupt index, try to recover. Various recovery\n   * strategies can be specified via system properties \"-DCoreInitFailedAction={fromleader, none}\"\n   *\n   * @see CoreInitFailedAction\n   *\n   * @param original\n   *          the problem seen when loading the core the first time.\n   * @param dcore\n   *          core descriptor for the core to create\n   * @param coreConfig\n   *          core config for the core to create\n   * @return if possible\n   * @throws SolrException\n   *           rethrows the original exception if we will not attempt to recover, throws a new SolrException with the\n   *           original exception as a suppressed exception if there is a second problem creating the solr core.\n   */\n  private SolrCore processCoreCreateException(SolrException original, CoreDescriptor dcore, ConfigSet coreConfig) {\n    // Traverse full chain since CIE may not be root exception\n    Throwable cause = original;\n    while ((cause = cause.getCause()) != null) {\n      if (cause instanceof CorruptIndexException) {\n        break;\n      }\n    }\n    \n    // If no CorruptIndexExeption, nothing we can try here\n    if (cause == null) throw original;\n    \n    CoreInitFailedAction action = CoreInitFailedAction.valueOf(System.getProperty(CoreInitFailedAction.class.getSimpleName(), \"none\"));\n    log.debug(\"CorruptIndexException while creating core, will attempt to repair via {}\", action);\n    \n    switch (action) {\n      case fromleader: // Recovery from leader on a CorruptedIndexException\n        if (isZooKeeperAware()) {\n          CloudDescriptor desc = dcore.getCloudDescriptor();\n          try {\n            Replica leader = getZkController().getClusterState()\n                .getCollection(desc.getCollectionName())\n                .getSlice(desc.getShardId())\n                .getLeader();\n            if (leader != null && leader.getState() == State.ACTIVE) {\n              log.info(\"Found active leader, will attempt to create fresh core and recover.\");\n              resetIndexDirectory(dcore, coreConfig);\n              return new SolrCore(dcore, coreConfig);\n            }\n          } catch (SolrException se) {\n            se.addSuppressed(original);\n            throw se;\n          }\n        }\n        throw original;\n      case none:\n        throw original;\n      default:\n        log.warn(\"Failed to create core, and did not recognize specified 'CoreInitFailedAction': [{}]. Valid options are {}.\",\n            action, Arrays.asList(CoreInitFailedAction.values()));\n        throw original;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bd6174b2f3408e04d4778eb0a4a1fdb1f9f8bdc9","date":1498572460,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#processCoreCreateException(SolrException,CoreDescriptor,ConfigSet).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#processCoreCreateException(SolrException,CoreDescriptor,ConfigSet).mjava","sourceNew":"  /**\n   * Take action when we failed to create a SolrCore. If error is due to corrupt index, try to recover. Various recovery\n   * strategies can be specified via system properties \"-DCoreInitFailedAction={fromleader, none}\"\n   *\n   * @see CoreInitFailedAction\n   *\n   * @param original\n   *          the problem seen when loading the core the first time.\n   * @param dcore\n   *          core descriptor for the core to create\n   * @param coreConfig\n   *          core config for the core to create\n   * @return if possible\n   * @throws SolrException\n   *           rethrows the original exception if we will not attempt to recover, throws a new SolrException with the\n   *           original exception as a suppressed exception if there is a second problem creating the solr core.\n   */\n  private SolrCore processCoreCreateException(SolrException original, CoreDescriptor dcore, ConfigSet coreConfig) {\n    // Traverse full chain since CIE may not be root exception\n    Throwable cause = original;\n    while ((cause = cause.getCause()) != null) {\n      if (cause instanceof CorruptIndexException) {\n        break;\n      }\n    }\n    \n    // If no CorruptIndexException, nothing we can try here\n    if (cause == null) throw original;\n    \n    CoreInitFailedAction action = CoreInitFailedAction.valueOf(System.getProperty(CoreInitFailedAction.class.getSimpleName(), \"none\"));\n    log.debug(\"CorruptIndexException while creating core, will attempt to repair via {}\", action);\n    \n    switch (action) {\n      case fromleader: // Recovery from leader on a CorruptedIndexException\n        if (isZooKeeperAware()) {\n          CloudDescriptor desc = dcore.getCloudDescriptor();\n          try {\n            Replica leader = getZkController().getClusterState()\n                .getCollection(desc.getCollectionName())\n                .getSlice(desc.getShardId())\n                .getLeader();\n            if (leader != null && leader.getState() == State.ACTIVE) {\n              log.info(\"Found active leader, will attempt to create fresh core and recover.\");\n              resetIndexDirectory(dcore, coreConfig);\n              return new SolrCore(this, dcore, coreConfig);\n            }\n          } catch (SolrException se) {\n            se.addSuppressed(original);\n            throw se;\n          }\n        }\n        throw original;\n      case none:\n        throw original;\n      default:\n        log.warn(\"Failed to create core, and did not recognize specified 'CoreInitFailedAction': [{}]. Valid options are {}.\",\n            action, Arrays.asList(CoreInitFailedAction.values()));\n        throw original;\n    }\n  }\n\n","sourceOld":"  /**\n   * Take action when we failed to create a SolrCore. If error is due to corrupt index, try to recover. Various recovery\n   * strategies can be specified via system properties \"-DCoreInitFailedAction={fromleader, none}\"\n   *\n   * @see CoreInitFailedAction\n   *\n   * @param original\n   *          the problem seen when loading the core the first time.\n   * @param dcore\n   *          core descriptor for the core to create\n   * @param coreConfig\n   *          core config for the core to create\n   * @return if possible\n   * @throws SolrException\n   *           rethrows the original exception if we will not attempt to recover, throws a new SolrException with the\n   *           original exception as a suppressed exception if there is a second problem creating the solr core.\n   */\n  private SolrCore processCoreCreateException(SolrException original, CoreDescriptor dcore, ConfigSet coreConfig) {\n    // Traverse full chain since CIE may not be root exception\n    Throwable cause = original;\n    while ((cause = cause.getCause()) != null) {\n      if (cause instanceof CorruptIndexException) {\n        break;\n      }\n    }\n    \n    // If no CorruptIndexExeption, nothing we can try here\n    if (cause == null) throw original;\n    \n    CoreInitFailedAction action = CoreInitFailedAction.valueOf(System.getProperty(CoreInitFailedAction.class.getSimpleName(), \"none\"));\n    log.debug(\"CorruptIndexException while creating core, will attempt to repair via {}\", action);\n    \n    switch (action) {\n      case fromleader: // Recovery from leader on a CorruptedIndexException\n        if (isZooKeeperAware()) {\n          CloudDescriptor desc = dcore.getCloudDescriptor();\n          try {\n            Replica leader = getZkController().getClusterState()\n                .getCollection(desc.getCollectionName())\n                .getSlice(desc.getShardId())\n                .getLeader();\n            if (leader != null && leader.getState() == State.ACTIVE) {\n              log.info(\"Found active leader, will attempt to create fresh core and recover.\");\n              resetIndexDirectory(dcore, coreConfig);\n              return new SolrCore(this, dcore, coreConfig);\n            }\n          } catch (SolrException se) {\n            se.addSuppressed(original);\n            throw se;\n          }\n        }\n        throw original;\n      case none:\n        throw original;\n      default:\n        log.warn(\"Failed to create core, and did not recognize specified 'CoreInitFailedAction': [{}]. Valid options are {}.\",\n            action, Arrays.asList(CoreInitFailedAction.values()));\n        throw original;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"98f11c416d30e556e0004a9a84960702d12d35b1","date":1498628359,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#processCoreCreateException(SolrException,CoreDescriptor,ConfigSet).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#processCoreCreateException(SolrException,CoreDescriptor,ConfigSet).mjava","sourceNew":"  /**\n   * Take action when we failed to create a SolrCore. If error is due to corrupt index, try to recover. Various recovery\n   * strategies can be specified via system properties \"-DCoreInitFailedAction={fromleader, none}\"\n   *\n   * @see CoreInitFailedAction\n   *\n   * @param original\n   *          the problem seen when loading the core the first time.\n   * @param dcore\n   *          core descriptor for the core to create\n   * @param coreConfig\n   *          core config for the core to create\n   * @return if possible\n   * @throws SolrException\n   *           rethrows the original exception if we will not attempt to recover, throws a new SolrException with the\n   *           original exception as a suppressed exception if there is a second problem creating the solr core.\n   */\n  private SolrCore processCoreCreateException(SolrException original, CoreDescriptor dcore, ConfigSet coreConfig) {\n    // Traverse full chain since CIE may not be root exception\n    Throwable cause = original;\n    while ((cause = cause.getCause()) != null) {\n      if (cause instanceof CorruptIndexException) {\n        break;\n      }\n    }\n    \n    // If no CorruptIndexException, nothing we can try here\n    if (cause == null) throw original;\n    \n    CoreInitFailedAction action = CoreInitFailedAction.valueOf(System.getProperty(CoreInitFailedAction.class.getSimpleName(), \"none\"));\n    log.debug(\"CorruptIndexException while creating core, will attempt to repair via {}\", action);\n    \n    switch (action) {\n      case fromleader: // Recovery from leader on a CorruptedIndexException\n        if (isZooKeeperAware()) {\n          CloudDescriptor desc = dcore.getCloudDescriptor();\n          try {\n            Replica leader = getZkController().getClusterState()\n                .getCollection(desc.getCollectionName())\n                .getSlice(desc.getShardId())\n                .getLeader();\n            if (leader != null && leader.getState() == State.ACTIVE) {\n              log.info(\"Found active leader, will attempt to create fresh core and recover.\");\n              resetIndexDirectory(dcore, coreConfig);\n              return new SolrCore(this, dcore, coreConfig);\n            }\n          } catch (SolrException se) {\n            se.addSuppressed(original);\n            throw se;\n          }\n        }\n        throw original;\n      case none:\n        throw original;\n      default:\n        log.warn(\"Failed to create core, and did not recognize specified 'CoreInitFailedAction': [{}]. Valid options are {}.\",\n            action, Arrays.asList(CoreInitFailedAction.values()));\n        throw original;\n    }\n  }\n\n","sourceOld":"  /**\n   * Take action when we failed to create a SolrCore. If error is due to corrupt index, try to recover. Various recovery\n   * strategies can be specified via system properties \"-DCoreInitFailedAction={fromleader, none}\"\n   *\n   * @see CoreInitFailedAction\n   *\n   * @param original\n   *          the problem seen when loading the core the first time.\n   * @param dcore\n   *          core descriptor for the core to create\n   * @param coreConfig\n   *          core config for the core to create\n   * @return if possible\n   * @throws SolrException\n   *           rethrows the original exception if we will not attempt to recover, throws a new SolrException with the\n   *           original exception as a suppressed exception if there is a second problem creating the solr core.\n   */\n  private SolrCore processCoreCreateException(SolrException original, CoreDescriptor dcore, ConfigSet coreConfig) {\n    // Traverse full chain since CIE may not be root exception\n    Throwable cause = original;\n    while ((cause = cause.getCause()) != null) {\n      if (cause instanceof CorruptIndexException) {\n        break;\n      }\n    }\n    \n    // If no CorruptIndexExeption, nothing we can try here\n    if (cause == null) throw original;\n    \n    CoreInitFailedAction action = CoreInitFailedAction.valueOf(System.getProperty(CoreInitFailedAction.class.getSimpleName(), \"none\"));\n    log.debug(\"CorruptIndexException while creating core, will attempt to repair via {}\", action);\n    \n    switch (action) {\n      case fromleader: // Recovery from leader on a CorruptedIndexException\n        if (isZooKeeperAware()) {\n          CloudDescriptor desc = dcore.getCloudDescriptor();\n          try {\n            Replica leader = getZkController().getClusterState()\n                .getCollection(desc.getCollectionName())\n                .getSlice(desc.getShardId())\n                .getLeader();\n            if (leader != null && leader.getState() == State.ACTIVE) {\n              log.info(\"Found active leader, will attempt to create fresh core and recover.\");\n              resetIndexDirectory(dcore, coreConfig);\n              return new SolrCore(this, dcore, coreConfig);\n            }\n          } catch (SolrException se) {\n            se.addSuppressed(original);\n            throw se;\n          }\n        }\n        throw original;\n      case none:\n        throw original;\n      default:\n        log.warn(\"Failed to create core, and did not recognize specified 'CoreInitFailedAction': [{}]. Valid options are {}.\",\n            action, Arrays.asList(CoreInitFailedAction.values()));\n        throw original;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#processCoreCreateException(SolrException,CoreDescriptor,ConfigSet).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#processCoreCreateException(SolrException,CoreDescriptor,ConfigSet).mjava","sourceNew":"  /**\n   * Take action when we failed to create a SolrCore. If error is due to corrupt index, try to recover. Various recovery\n   * strategies can be specified via system properties \"-DCoreInitFailedAction={fromleader, none}\"\n   *\n   * @see CoreInitFailedAction\n   *\n   * @param original\n   *          the problem seen when loading the core the first time.\n   * @param dcore\n   *          core descriptor for the core to create\n   * @param coreConfig\n   *          core config for the core to create\n   * @return if possible\n   * @throws SolrException\n   *           rethrows the original exception if we will not attempt to recover, throws a new SolrException with the\n   *           original exception as a suppressed exception if there is a second problem creating the solr core.\n   */\n  private SolrCore processCoreCreateException(SolrException original, CoreDescriptor dcore, ConfigSet coreConfig) {\n    // Traverse full chain since CIE may not be root exception\n    Throwable cause = original;\n    while ((cause = cause.getCause()) != null) {\n      if (cause instanceof CorruptIndexException) {\n        break;\n      }\n    }\n    \n    // If no CorruptIndexException, nothing we can try here\n    if (cause == null) throw original;\n    \n    CoreInitFailedAction action = CoreInitFailedAction.valueOf(System.getProperty(CoreInitFailedAction.class.getSimpleName(), \"none\"));\n    log.debug(\"CorruptIndexException while creating core, will attempt to repair via {}\", action);\n    \n    switch (action) {\n      case fromleader: // Recovery from leader on a CorruptedIndexException\n        if (isZooKeeperAware()) {\n          CloudDescriptor desc = dcore.getCloudDescriptor();\n          try {\n            Replica leader = getZkController().getClusterState()\n                .getCollection(desc.getCollectionName())\n                .getSlice(desc.getShardId())\n                .getLeader();\n            if (leader != null && leader.getState() == State.ACTIVE) {\n              log.info(\"Found active leader, will attempt to create fresh core and recover.\");\n              resetIndexDirectory(dcore, coreConfig);\n              return new SolrCore(this, dcore, coreConfig);\n            }\n          } catch (SolrException se) {\n            se.addSuppressed(original);\n            throw se;\n          }\n        }\n        throw original;\n      case none:\n        throw original;\n      default:\n        log.warn(\"Failed to create core, and did not recognize specified 'CoreInitFailedAction': [{}]. Valid options are {}.\",\n            action, Arrays.asList(CoreInitFailedAction.values()));\n        throw original;\n    }\n  }\n\n","sourceOld":"  /**\n   * Take action when we failed to create a SolrCore. If error is due to corrupt index, try to recover. Various recovery\n   * strategies can be specified via system properties \"-DCoreInitFailedAction={fromleader, none}\"\n   *\n   * @see CoreInitFailedAction\n   *\n   * @param original\n   *          the problem seen when loading the core the first time.\n   * @param dcore\n   *          core descriptor for the core to create\n   * @param coreConfig\n   *          core config for the core to create\n   * @return if possible\n   * @throws SolrException\n   *           rethrows the original exception if we will not attempt to recover, throws a new SolrException with the\n   *           original exception as a suppressed exception if there is a second problem creating the solr core.\n   */\n  private SolrCore processCoreCreateException(SolrException original, CoreDescriptor dcore, ConfigSet coreConfig) {\n    // Traverse full chain since CIE may not be root exception\n    Throwable cause = original;\n    while ((cause = cause.getCause()) != null) {\n      if (cause instanceof CorruptIndexException) {\n        break;\n      }\n    }\n    \n    // If no CorruptIndexExeption, nothing we can try here\n    if (cause == null) throw original;\n    \n    CoreInitFailedAction action = CoreInitFailedAction.valueOf(System.getProperty(CoreInitFailedAction.class.getSimpleName(), \"none\"));\n    log.debug(\"CorruptIndexException while creating core, will attempt to repair via {}\", action);\n    \n    switch (action) {\n      case fromleader: // Recovery from leader on a CorruptedIndexException\n        if (isZooKeeperAware()) {\n          CloudDescriptor desc = dcore.getCloudDescriptor();\n          try {\n            Replica leader = getZkController().getClusterState()\n                .getCollection(desc.getCollectionName())\n                .getSlice(desc.getShardId())\n                .getLeader();\n            if (leader != null && leader.getState() == State.ACTIVE) {\n              log.info(\"Found active leader, will attempt to create fresh core and recover.\");\n              resetIndexDirectory(dcore, coreConfig);\n              return new SolrCore(this, dcore, coreConfig);\n            }\n          } catch (SolrException se) {\n            se.addSuppressed(original);\n            throw se;\n          }\n        }\n        throw original;\n      case none:\n        throw original;\n      default:\n        log.warn(\"Failed to create core, and did not recognize specified 'CoreInitFailedAction': [{}]. Valid options are {}.\",\n            action, Arrays.asList(CoreInitFailedAction.values()));\n        throw original;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8c30d22eaf1287a88a402fba9d8b7b9d20d6ef94","date":1520143025,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#processCoreCreateException(SolrException,CoreDescriptor,ConfigSet).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#processCoreCreateException(SolrException,CoreDescriptor,ConfigSet).mjava","sourceNew":"  /**\n   * Take action when we failed to create a SolrCore. If error is due to corrupt index, try to recover. Various recovery\n   * strategies can be specified via system properties \"-DCoreInitFailedAction={fromleader, none}\"\n   *\n   * @see CoreInitFailedAction\n   *\n   * @param original\n   *          the problem seen when loading the core the first time.\n   * @param dcore\n   *          core descriptor for the core to create\n   * @param coreConfig\n   *          core config for the core to create\n   * @return if possible\n   * @throws SolrException\n   *           rethrows the original exception if we will not attempt to recover, throws a new SolrException with the\n   *           original exception as a suppressed exception if there is a second problem creating the solr core.\n   */\n  private SolrCore processCoreCreateException(SolrException original, CoreDescriptor dcore, ConfigSet coreConfig) {\n    // Traverse full chain since CIE may not be root exception\n    Throwable cause = original;\n    while ((cause = cause.getCause()) != null) {\n      if (cause instanceof CorruptIndexException) {\n        break;\n      }\n    }\n    \n    // If no CorruptIndexException, nothing we can try here\n    if (cause == null) throw original;\n    \n    CoreInitFailedAction action = CoreInitFailedAction.valueOf(System.getProperty(CoreInitFailedAction.class.getSimpleName(), \"none\"));\n    log.debug(\"CorruptIndexException while creating core, will attempt to repair via {}\", action);\n    \n    switch (action) {\n      case fromleader: // Recovery from leader on a CorruptedIndexException\n        if (isZooKeeperAware()) {\n          CloudDescriptor desc = dcore.getCloudDescriptor();\n          try {\n            Replica leader = getZkController().getClusterState()\n                .getCollection(desc.getCollectionName())\n                .getSlice(desc.getShardId())\n                .getLeader();\n            if (leader != null && leader.getState() == State.ACTIVE) {\n              log.info(\"Found active leader, will attempt to create fresh core and recover.\");\n              resetIndexDirectory(dcore, coreConfig);\n              // the index of this core is emptied, its term should be set to 0\n              getZkController().getShardTerms(desc.getCollectionName(), desc.getShardId()).setTermToZero(desc.getCoreNodeName());\n              return new SolrCore(this, dcore, coreConfig);\n            }\n          } catch (SolrException se) {\n            se.addSuppressed(original);\n            throw se;\n          }\n        }\n        throw original;\n      case none:\n        throw original;\n      default:\n        log.warn(\"Failed to create core, and did not recognize specified 'CoreInitFailedAction': [{}]. Valid options are {}.\",\n            action, Arrays.asList(CoreInitFailedAction.values()));\n        throw original;\n    }\n  }\n\n","sourceOld":"  /**\n   * Take action when we failed to create a SolrCore. If error is due to corrupt index, try to recover. Various recovery\n   * strategies can be specified via system properties \"-DCoreInitFailedAction={fromleader, none}\"\n   *\n   * @see CoreInitFailedAction\n   *\n   * @param original\n   *          the problem seen when loading the core the first time.\n   * @param dcore\n   *          core descriptor for the core to create\n   * @param coreConfig\n   *          core config for the core to create\n   * @return if possible\n   * @throws SolrException\n   *           rethrows the original exception if we will not attempt to recover, throws a new SolrException with the\n   *           original exception as a suppressed exception if there is a second problem creating the solr core.\n   */\n  private SolrCore processCoreCreateException(SolrException original, CoreDescriptor dcore, ConfigSet coreConfig) {\n    // Traverse full chain since CIE may not be root exception\n    Throwable cause = original;\n    while ((cause = cause.getCause()) != null) {\n      if (cause instanceof CorruptIndexException) {\n        break;\n      }\n    }\n    \n    // If no CorruptIndexException, nothing we can try here\n    if (cause == null) throw original;\n    \n    CoreInitFailedAction action = CoreInitFailedAction.valueOf(System.getProperty(CoreInitFailedAction.class.getSimpleName(), \"none\"));\n    log.debug(\"CorruptIndexException while creating core, will attempt to repair via {}\", action);\n    \n    switch (action) {\n      case fromleader: // Recovery from leader on a CorruptedIndexException\n        if (isZooKeeperAware()) {\n          CloudDescriptor desc = dcore.getCloudDescriptor();\n          try {\n            Replica leader = getZkController().getClusterState()\n                .getCollection(desc.getCollectionName())\n                .getSlice(desc.getShardId())\n                .getLeader();\n            if (leader != null && leader.getState() == State.ACTIVE) {\n              log.info(\"Found active leader, will attempt to create fresh core and recover.\");\n              resetIndexDirectory(dcore, coreConfig);\n              return new SolrCore(this, dcore, coreConfig);\n            }\n          } catch (SolrException se) {\n            se.addSuppressed(original);\n            throw se;\n          }\n        }\n        throw original;\n      case none:\n        throw original;\n      default:\n        log.warn(\"Failed to create core, and did not recognize specified 'CoreInitFailedAction': [{}]. Valid options are {}.\",\n            action, Arrays.asList(CoreInitFailedAction.values()));\n        throw original;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b627755385655c7cd3fb296f17593658805cf4d5","date":1552455143,"type":3,"author":"Gus Heck","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#processCoreCreateException(SolrException,CoreDescriptor,ConfigSet).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#processCoreCreateException(SolrException,CoreDescriptor,ConfigSet).mjava","sourceNew":"  /**\n   * Take action when we failed to create a SolrCore. If error is due to corrupt index, try to recover. Various recovery\n   * strategies can be specified via system properties \"-DCoreInitFailedAction={fromleader, none}\"\n   *\n   * @see CoreInitFailedAction\n   *\n   * @param original\n   *          the problem seen when loading the core the first time.\n   * @param dcore\n   *          core descriptor for the core to create\n   * @param coreConfig\n   *          core config for the core to create\n   * @return if possible\n   * @throws SolrException\n   *           rethrows the original exception if we will not attempt to recover, throws a new SolrException with the\n   *           original exception as a suppressed exception if there is a second problem creating the solr core.\n   */\n  private SolrCore processCoreCreateException(SolrException original, CoreDescriptor dcore, ConfigSet coreConfig) {\n    // Traverse full chain since CIE may not be root exception\n    Throwable cause = original;\n    while ((cause = cause.getCause()) != null) {\n      if (cause instanceof CorruptIndexException) {\n        break;\n      }\n    }\n\n    // If no CorruptIndexException, nothing we can try here\n    if (cause == null) throw original;\n\n    CoreInitFailedAction action = CoreInitFailedAction.valueOf(System.getProperty(CoreInitFailedAction.class.getSimpleName(), \"none\"));\n    log.debug(\"CorruptIndexException while creating core, will attempt to repair via {}\", action);\n\n    switch (action) {\n      case fromleader: // Recovery from leader on a CorruptedIndexException\n        if (isZooKeeperAware()) {\n          CloudDescriptor desc = dcore.getCloudDescriptor();\n          try {\n            Replica leader = getZkController().getClusterState()\n                .getCollection(desc.getCollectionName())\n                .getSlice(desc.getShardId())\n                .getLeader();\n            if (leader != null && leader.getState() == State.ACTIVE) {\n              log.info(\"Found active leader, will attempt to create fresh core and recover.\");\n              resetIndexDirectory(dcore, coreConfig);\n              // the index of this core is emptied, its term should be set to 0\n              getZkController().getShardTerms(desc.getCollectionName(), desc.getShardId()).setTermToZero(desc.getCoreNodeName());\n              return new SolrCore(this, dcore, coreConfig);\n            }\n          } catch (SolrException se) {\n            se.addSuppressed(original);\n            throw se;\n          }\n        }\n        throw original;\n      case none:\n        throw original;\n      default:\n        log.warn(\"Failed to create core, and did not recognize specified 'CoreInitFailedAction': [{}]. Valid options are {}.\",\n            action, Arrays.asList(CoreInitFailedAction.values()));\n        throw original;\n    }\n  }\n\n","sourceOld":"  /**\n   * Take action when we failed to create a SolrCore. If error is due to corrupt index, try to recover. Various recovery\n   * strategies can be specified via system properties \"-DCoreInitFailedAction={fromleader, none}\"\n   *\n   * @see CoreInitFailedAction\n   *\n   * @param original\n   *          the problem seen when loading the core the first time.\n   * @param dcore\n   *          core descriptor for the core to create\n   * @param coreConfig\n   *          core config for the core to create\n   * @return if possible\n   * @throws SolrException\n   *           rethrows the original exception if we will not attempt to recover, throws a new SolrException with the\n   *           original exception as a suppressed exception if there is a second problem creating the solr core.\n   */\n  private SolrCore processCoreCreateException(SolrException original, CoreDescriptor dcore, ConfigSet coreConfig) {\n    // Traverse full chain since CIE may not be root exception\n    Throwable cause = original;\n    while ((cause = cause.getCause()) != null) {\n      if (cause instanceof CorruptIndexException) {\n        break;\n      }\n    }\n    \n    // If no CorruptIndexException, nothing we can try here\n    if (cause == null) throw original;\n    \n    CoreInitFailedAction action = CoreInitFailedAction.valueOf(System.getProperty(CoreInitFailedAction.class.getSimpleName(), \"none\"));\n    log.debug(\"CorruptIndexException while creating core, will attempt to repair via {}\", action);\n    \n    switch (action) {\n      case fromleader: // Recovery from leader on a CorruptedIndexException\n        if (isZooKeeperAware()) {\n          CloudDescriptor desc = dcore.getCloudDescriptor();\n          try {\n            Replica leader = getZkController().getClusterState()\n                .getCollection(desc.getCollectionName())\n                .getSlice(desc.getShardId())\n                .getLeader();\n            if (leader != null && leader.getState() == State.ACTIVE) {\n              log.info(\"Found active leader, will attempt to create fresh core and recover.\");\n              resetIndexDirectory(dcore, coreConfig);\n              // the index of this core is emptied, its term should be set to 0\n              getZkController().getShardTerms(desc.getCollectionName(), desc.getShardId()).setTermToZero(desc.getCoreNodeName());\n              return new SolrCore(this, dcore, coreConfig);\n            }\n          } catch (SolrException se) {\n            se.addSuppressed(original);\n            throw se;\n          }\n        }\n        throw original;\n      case none:\n        throw original;\n      default:\n        log.warn(\"Failed to create core, and did not recognize specified 'CoreInitFailedAction': [{}]. Valid options are {}.\",\n            action, Arrays.asList(CoreInitFailedAction.values()));\n        throw original;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2668c99990e4c94a78bac005aa682b7c5986d23a","date":1561446137,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#processCoreCreateException(SolrException,CoreDescriptor,ConfigSet).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#processCoreCreateException(SolrException,CoreDescriptor,ConfigSet).mjava","sourceNew":"  /**\n   * Take action when we failed to create a SolrCore. If error is due to corrupt index, try to recover. Various recovery\n   * strategies can be specified via system properties \"-DCoreInitFailedAction={fromleader, none}\"\n   *\n   * @param original   the problem seen when loading the core the first time.\n   * @param dcore      core descriptor for the core to create\n   * @param coreConfig core config for the core to create\n   * @return if possible\n   * @throws SolrException rethrows the original exception if we will not attempt to recover, throws a new SolrException with the\n   *                       original exception as a suppressed exception if there is a second problem creating the solr core.\n   * @see CoreInitFailedAction\n   */\n  private SolrCore processCoreCreateException(SolrException original, CoreDescriptor dcore, ConfigSet coreConfig) {\n    // Traverse full chain since CIE may not be root exception\n    Throwable cause = original;\n    while ((cause = cause.getCause()) != null) {\n      if (cause instanceof CorruptIndexException) {\n        break;\n      }\n    }\n\n    // If no CorruptIndexException, nothing we can try here\n    if (cause == null) throw original;\n\n    CoreInitFailedAction action = CoreInitFailedAction.valueOf(System.getProperty(CoreInitFailedAction.class.getSimpleName(), \"none\"));\n    log.debug(\"CorruptIndexException while creating core, will attempt to repair via {}\", action);\n\n    switch (action) {\n      case fromleader: // Recovery from leader on a CorruptedIndexException\n        if (isZooKeeperAware()) {\n          CloudDescriptor desc = dcore.getCloudDescriptor();\n          try {\n            Replica leader = getZkController().getClusterState()\n                .getCollection(desc.getCollectionName())\n                .getSlice(desc.getShardId())\n                .getLeader();\n            if (leader != null && leader.getState() == State.ACTIVE) {\n              log.info(\"Found active leader, will attempt to create fresh core and recover.\");\n              resetIndexDirectory(dcore, coreConfig);\n              // the index of this core is emptied, its term should be set to 0\n              getZkController().getShardTerms(desc.getCollectionName(), desc.getShardId()).setTermToZero(desc.getCoreNodeName());\n              return new SolrCore(this, dcore, coreConfig);\n            }\n          } catch (SolrException se) {\n            se.addSuppressed(original);\n            throw se;\n          }\n        }\n        throw original;\n      case none:\n        throw original;\n      default:\n        log.warn(\"Failed to create core, and did not recognize specified 'CoreInitFailedAction': [{}]. Valid options are {}.\",\n            action, Arrays.asList(CoreInitFailedAction.values()));\n        throw original;\n    }\n  }\n\n","sourceOld":"  /**\n   * Take action when we failed to create a SolrCore. If error is due to corrupt index, try to recover. Various recovery\n   * strategies can be specified via system properties \"-DCoreInitFailedAction={fromleader, none}\"\n   *\n   * @see CoreInitFailedAction\n   *\n   * @param original\n   *          the problem seen when loading the core the first time.\n   * @param dcore\n   *          core descriptor for the core to create\n   * @param coreConfig\n   *          core config for the core to create\n   * @return if possible\n   * @throws SolrException\n   *           rethrows the original exception if we will not attempt to recover, throws a new SolrException with the\n   *           original exception as a suppressed exception if there is a second problem creating the solr core.\n   */\n  private SolrCore processCoreCreateException(SolrException original, CoreDescriptor dcore, ConfigSet coreConfig) {\n    // Traverse full chain since CIE may not be root exception\n    Throwable cause = original;\n    while ((cause = cause.getCause()) != null) {\n      if (cause instanceof CorruptIndexException) {\n        break;\n      }\n    }\n\n    // If no CorruptIndexException, nothing we can try here\n    if (cause == null) throw original;\n\n    CoreInitFailedAction action = CoreInitFailedAction.valueOf(System.getProperty(CoreInitFailedAction.class.getSimpleName(), \"none\"));\n    log.debug(\"CorruptIndexException while creating core, will attempt to repair via {}\", action);\n\n    switch (action) {\n      case fromleader: // Recovery from leader on a CorruptedIndexException\n        if (isZooKeeperAware()) {\n          CloudDescriptor desc = dcore.getCloudDescriptor();\n          try {\n            Replica leader = getZkController().getClusterState()\n                .getCollection(desc.getCollectionName())\n                .getSlice(desc.getShardId())\n                .getLeader();\n            if (leader != null && leader.getState() == State.ACTIVE) {\n              log.info(\"Found active leader, will attempt to create fresh core and recover.\");\n              resetIndexDirectory(dcore, coreConfig);\n              // the index of this core is emptied, its term should be set to 0\n              getZkController().getShardTerms(desc.getCollectionName(), desc.getShardId()).setTermToZero(desc.getCoreNodeName());\n              return new SolrCore(this, dcore, coreConfig);\n            }\n          } catch (SolrException se) {\n            se.addSuppressed(original);\n            throw se;\n          }\n        }\n        throw original;\n      case none:\n        throw original;\n      default:\n        log.warn(\"Failed to create core, and did not recognize specified 'CoreInitFailedAction': [{}]. Valid options are {}.\",\n            action, Arrays.asList(CoreInitFailedAction.values()));\n        throw original;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"140be51d03394488536f4aacedace29f9b318347","date":1587170432,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#processCoreCreateException(SolrException,CoreDescriptor,ConfigSet).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#processCoreCreateException(SolrException,CoreDescriptor,ConfigSet).mjava","sourceNew":"  /**\n   * Take action when we failed to create a SolrCore. If error is due to corrupt index, try to recover. Various recovery\n   * strategies can be specified via system properties \"-DCoreInitFailedAction={fromleader, none}\"\n   *\n   * @param original   the problem seen when loading the core the first time.\n   * @param dcore      core descriptor for the core to create\n   * @param coreConfig core config for the core to create\n   * @return if possible\n   * @throws SolrException rethrows the original exception if we will not attempt to recover, throws a new SolrException with the\n   *                       original exception as a suppressed exception if there is a second problem creating the solr core.\n   * @see CoreInitFailedAction\n   */\n  private SolrCore processCoreCreateException(SolrException original, CoreDescriptor dcore, ConfigSet coreConfig) {\n    // Traverse full chain since CIE may not be root exception\n    Throwable cause = original;\n    while ((cause = cause.getCause()) != null) {\n      if (cause instanceof CorruptIndexException) {\n        break;\n      }\n    }\n\n    // If no CorruptIndexException, nothing we can try here\n    if (cause == null) throw original;\n\n    CoreInitFailedAction action = CoreInitFailedAction.valueOf(System.getProperty(CoreInitFailedAction.class.getSimpleName(), \"none\"));\n    log.debug(\"CorruptIndexException while creating core, will attempt to repair via {}\", action);\n\n    switch (action) {\n      case fromleader: // Recovery from leader on a CorruptedIndexException\n        if (isZooKeeperAware()) {\n          CloudDescriptor desc = dcore.getCloudDescriptor();\n          try {\n            Replica leader = getZkController().getClusterState()\n                .getCollection(desc.getCollectionName())\n                .getSlice(desc.getShardId())\n                .getLeader();\n            if (leader != null && leader.getState() == State.ACTIVE) {\n              log.info(\"Found active leader, will attempt to create fresh core and recover.\");\n              resetIndexDirectory(dcore, coreConfig);\n              // the index of this core is emptied, its term should be set to 0\n              getZkController().getShardTerms(desc.getCollectionName(), desc.getShardId()).setTermToZero(desc.getCoreNodeName());\n              return new SolrCore(this, dcore, coreConfig);\n            }\n          } catch (SolrException se) {\n            se.addSuppressed(original);\n            throw se;\n          }\n        }\n        throw original;\n      case none:\n        throw original;\n      default:\n        if (log.isWarnEnabled()) {\n          log.warn(\"Failed to create core, and did not recognize specified 'CoreInitFailedAction': [{}]. Valid options are {}.\",\n              action, Arrays.asList(CoreInitFailedAction.values()));\n        }\n        throw original;\n    }\n  }\n\n","sourceOld":"  /**\n   * Take action when we failed to create a SolrCore. If error is due to corrupt index, try to recover. Various recovery\n   * strategies can be specified via system properties \"-DCoreInitFailedAction={fromleader, none}\"\n   *\n   * @param original   the problem seen when loading the core the first time.\n   * @param dcore      core descriptor for the core to create\n   * @param coreConfig core config for the core to create\n   * @return if possible\n   * @throws SolrException rethrows the original exception if we will not attempt to recover, throws a new SolrException with the\n   *                       original exception as a suppressed exception if there is a second problem creating the solr core.\n   * @see CoreInitFailedAction\n   */\n  private SolrCore processCoreCreateException(SolrException original, CoreDescriptor dcore, ConfigSet coreConfig) {\n    // Traverse full chain since CIE may not be root exception\n    Throwable cause = original;\n    while ((cause = cause.getCause()) != null) {\n      if (cause instanceof CorruptIndexException) {\n        break;\n      }\n    }\n\n    // If no CorruptIndexException, nothing we can try here\n    if (cause == null) throw original;\n\n    CoreInitFailedAction action = CoreInitFailedAction.valueOf(System.getProperty(CoreInitFailedAction.class.getSimpleName(), \"none\"));\n    log.debug(\"CorruptIndexException while creating core, will attempt to repair via {}\", action);\n\n    switch (action) {\n      case fromleader: // Recovery from leader on a CorruptedIndexException\n        if (isZooKeeperAware()) {\n          CloudDescriptor desc = dcore.getCloudDescriptor();\n          try {\n            Replica leader = getZkController().getClusterState()\n                .getCollection(desc.getCollectionName())\n                .getSlice(desc.getShardId())\n                .getLeader();\n            if (leader != null && leader.getState() == State.ACTIVE) {\n              log.info(\"Found active leader, will attempt to create fresh core and recover.\");\n              resetIndexDirectory(dcore, coreConfig);\n              // the index of this core is emptied, its term should be set to 0\n              getZkController().getShardTerms(desc.getCollectionName(), desc.getShardId()).setTermToZero(desc.getCoreNodeName());\n              return new SolrCore(this, dcore, coreConfig);\n            }\n          } catch (SolrException se) {\n            se.addSuppressed(original);\n            throw se;\n          }\n        }\n        throw original;\n      case none:\n        throw original;\n      default:\n        log.warn(\"Failed to create core, and did not recognize specified 'CoreInitFailedAction': [{}]. Valid options are {}.\",\n            action, Arrays.asList(CoreInitFailedAction.values()));\n        throw original;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"575e66bd4b2349209027f6801184da7fc3cba13f","date":1587609169,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#processCoreCreateException(SolrException,CoreDescriptor,ConfigSet).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#processCoreCreateException(SolrException,CoreDescriptor,ConfigSet).mjava","sourceNew":"  /**\n   * Take action when we failed to create a SolrCore. If error is due to corrupt index, try to recover. Various recovery\n   * strategies can be specified via system properties \"-DCoreInitFailedAction={fromleader, none}\"\n   *\n   * @param original   the problem seen when loading the core the first time.\n   * @param dcore      core descriptor for the core to create\n   * @param coreConfig core config for the core to create\n   * @return if possible\n   * @throws SolrException rethrows the original exception if we will not attempt to recover, throws a new SolrException with the\n   *                       original exception as a suppressed exception if there is a second problem creating the solr core.\n   * @see CoreInitFailedAction\n   */\n  private SolrCore processCoreCreateException(SolrException original, CoreDescriptor dcore, ConfigSet coreConfig) {\n    // Traverse full chain since CIE may not be root exception\n    Throwable cause = original;\n    while ((cause = cause.getCause()) != null) {\n      if (cause instanceof CorruptIndexException) {\n        break;\n      }\n    }\n\n    // If no CorruptIndexException, nothing we can try here\n    if (cause == null) throw original;\n\n    CoreInitFailedAction action = CoreInitFailedAction.valueOf(System.getProperty(CoreInitFailedAction.class.getSimpleName(), \"none\"));\n    log.debug(\"CorruptIndexException while creating core, will attempt to repair via {}\", action);\n\n    switch (action) {\n      case fromleader: // Recovery from leader on a CorruptedIndexException\n        if (isZooKeeperAware()) {\n          CloudDescriptor desc = dcore.getCloudDescriptor();\n          try {\n            Replica leader = getZkController().getClusterState()\n                .getCollection(desc.getCollectionName())\n                .getSlice(desc.getShardId())\n                .getLeader();\n            if (leader != null && leader.getState() == State.ACTIVE) {\n              log.info(\"Found active leader, will attempt to create fresh core and recover.\");\n              resetIndexDirectory(dcore, coreConfig);\n              // the index of this core is emptied, its term should be set to 0\n              getZkController().getShardTerms(desc.getCollectionName(), desc.getShardId()).setTermToZero(desc.getCoreNodeName());\n              return new SolrCore(this, dcore, coreConfig);\n            }\n          } catch (SolrException se) {\n            se.addSuppressed(original);\n            throw se;\n          }\n        }\n        throw original;\n      case none:\n        throw original;\n      default:\n        log.warn(\"Failed to create core, and did not recognize specified 'CoreInitFailedAction': [{}]. Valid options are {}.\",\n            action, Arrays.asList(CoreInitFailedAction.values()));\n        throw original;\n    }\n  }\n\n","sourceOld":"  /**\n   * Take action when we failed to create a SolrCore. If error is due to corrupt index, try to recover. Various recovery\n   * strategies can be specified via system properties \"-DCoreInitFailedAction={fromleader, none}\"\n   *\n   * @param original   the problem seen when loading the core the first time.\n   * @param dcore      core descriptor for the core to create\n   * @param coreConfig core config for the core to create\n   * @return if possible\n   * @throws SolrException rethrows the original exception if we will not attempt to recover, throws a new SolrException with the\n   *                       original exception as a suppressed exception if there is a second problem creating the solr core.\n   * @see CoreInitFailedAction\n   */\n  private SolrCore processCoreCreateException(SolrException original, CoreDescriptor dcore, ConfigSet coreConfig) {\n    // Traverse full chain since CIE may not be root exception\n    Throwable cause = original;\n    while ((cause = cause.getCause()) != null) {\n      if (cause instanceof CorruptIndexException) {\n        break;\n      }\n    }\n\n    // If no CorruptIndexException, nothing we can try here\n    if (cause == null) throw original;\n\n    CoreInitFailedAction action = CoreInitFailedAction.valueOf(System.getProperty(CoreInitFailedAction.class.getSimpleName(), \"none\"));\n    log.debug(\"CorruptIndexException while creating core, will attempt to repair via {}\", action);\n\n    switch (action) {\n      case fromleader: // Recovery from leader on a CorruptedIndexException\n        if (isZooKeeperAware()) {\n          CloudDescriptor desc = dcore.getCloudDescriptor();\n          try {\n            Replica leader = getZkController().getClusterState()\n                .getCollection(desc.getCollectionName())\n                .getSlice(desc.getShardId())\n                .getLeader();\n            if (leader != null && leader.getState() == State.ACTIVE) {\n              log.info(\"Found active leader, will attempt to create fresh core and recover.\");\n              resetIndexDirectory(dcore, coreConfig);\n              // the index of this core is emptied, its term should be set to 0\n              getZkController().getShardTerms(desc.getCollectionName(), desc.getShardId()).setTermToZero(desc.getCoreNodeName());\n              return new SolrCore(this, dcore, coreConfig);\n            }\n          } catch (SolrException se) {\n            se.addSuppressed(original);\n            throw se;\n          }\n        }\n        throw original;\n      case none:\n        throw original;\n      default:\n        if (log.isWarnEnabled()) {\n          log.warn(\"Failed to create core, and did not recognize specified 'CoreInitFailedAction': [{}]. Valid options are {}.\",\n              action, Arrays.asList(CoreInitFailedAction.values()));\n        }\n        throw original;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["b39b1b02e442aaf736cc87417e93552cbd8ef1da"],"575e66bd4b2349209027f6801184da7fc3cba13f":["140be51d03394488536f4aacedace29f9b318347"],"8c30d22eaf1287a88a402fba9d8b7b9d20d6ef94":["28288370235ed02234a64753cdbf0c6ec096304a"],"729cb470f975115d4c60517b2cb7c42e37a7a2e1":["b39b1b02e442aaf736cc87417e93552cbd8ef1da"],"28288370235ed02234a64753cdbf0c6ec096304a":["729cb470f975115d4c60517b2cb7c42e37a7a2e1","bd6174b2f3408e04d4778eb0a4a1fdb1f9f8bdc9"],"90a682dc1bfd188ef61cc28373c7f5d700b4ac75":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b39b1b02e442aaf736cc87417e93552cbd8ef1da"],"2668c99990e4c94a78bac005aa682b7c5986d23a":["b627755385655c7cd3fb296f17593658805cf4d5"],"140be51d03394488536f4aacedace29f9b318347":["2668c99990e4c94a78bac005aa682b7c5986d23a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bd6174b2f3408e04d4778eb0a4a1fdb1f9f8bdc9":["729cb470f975115d4c60517b2cb7c42e37a7a2e1"],"b627755385655c7cd3fb296f17593658805cf4d5":["8c30d22eaf1287a88a402fba9d8b7b9d20d6ef94"],"b39b1b02e442aaf736cc87417e93552cbd8ef1da":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"98f11c416d30e556e0004a9a84960702d12d35b1":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","bd6174b2f3408e04d4778eb0a4a1fdb1f9f8bdc9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["575e66bd4b2349209027f6801184da7fc3cba13f"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["98f11c416d30e556e0004a9a84960702d12d35b1"],"575e66bd4b2349209027f6801184da7fc3cba13f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"8c30d22eaf1287a88a402fba9d8b7b9d20d6ef94":["b627755385655c7cd3fb296f17593658805cf4d5"],"28288370235ed02234a64753cdbf0c6ec096304a":["8c30d22eaf1287a88a402fba9d8b7b9d20d6ef94"],"729cb470f975115d4c60517b2cb7c42e37a7a2e1":["28288370235ed02234a64753cdbf0c6ec096304a","bd6174b2f3408e04d4778eb0a4a1fdb1f9f8bdc9"],"90a682dc1bfd188ef61cc28373c7f5d700b4ac75":[],"2668c99990e4c94a78bac005aa682b7c5986d23a":["140be51d03394488536f4aacedace29f9b318347"],"140be51d03394488536f4aacedace29f9b318347":["575e66bd4b2349209027f6801184da7fc3cba13f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["90a682dc1bfd188ef61cc28373c7f5d700b4ac75","b39b1b02e442aaf736cc87417e93552cbd8ef1da"],"bd6174b2f3408e04d4778eb0a4a1fdb1f9f8bdc9":["28288370235ed02234a64753cdbf0c6ec096304a","98f11c416d30e556e0004a9a84960702d12d35b1"],"b627755385655c7cd3fb296f17593658805cf4d5":["2668c99990e4c94a78bac005aa682b7c5986d23a"],"b39b1b02e442aaf736cc87417e93552cbd8ef1da":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","729cb470f975115d4c60517b2cb7c42e37a7a2e1","90a682dc1bfd188ef61cc28373c7f5d700b4ac75"],"98f11c416d30e556e0004a9a84960702d12d35b1":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["90a682dc1bfd188ef61cc28373c7f5d700b4ac75","98f11c416d30e556e0004a9a84960702d12d35b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}