{"path":"solr/core/src/java/org/apache/solr/cloud/overseer/ReplicaMutator#deleteReplicaProperty(ClusterState,ZkNodeProps).mjava","commits":[{"id":"da5ef0533dae1e5782b071a5484e1b9f3c28fc5f","date":1419334852,"type":1,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/overseer/ReplicaMutator#deleteReplicaProperty(ClusterState,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/overseer/ReplicaMutator#removeReplicaProperty(ClusterState,ZkNodeProps).mjava","sourceNew":"  public ZkWriteCommand deleteReplicaProperty(ClusterState clusterState, ZkNodeProps message) {\n    if (checkKeyExistence(message, ZkStateReader.COLLECTION_PROP) == false ||\n        checkKeyExistence(message, ZkStateReader.SHARD_ID_PROP) == false ||\n        checkKeyExistence(message, ZkStateReader.REPLICA_PROP) == false ||\n        checkKeyExistence(message, ZkStateReader.PROPERTY_PROP) == false) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Overseer DELETEREPLICAPROP requires \" +\n              ZkStateReader.COLLECTION_PROP + \" and \" + ZkStateReader.SHARD_ID_PROP + \" and \" +\n              ZkStateReader.REPLICA_PROP + \" and \" + ZkStateReader.PROPERTY_PROP + \" no action taken.\");\n    }\n    String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    String sliceName = message.getStr(ZkStateReader.SHARD_ID_PROP);\n    String replicaName = message.getStr(ZkStateReader.REPLICA_PROP);\n    String property = message.getStr(ZkStateReader.PROPERTY_PROP).toLowerCase(Locale.ROOT);\n    if (StringUtils.startsWith(property, COLL_PROP_PREFIX) == false) {\n      property = OverseerCollectionProcessor.COLL_PROP_PREFIX + property;\n    }\n\n    Replica replica = clusterState.getReplica(collectionName, replicaName);\n\n    if (replica == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Could not find collection/slice/replica \" +\n          collectionName + \"/\" + sliceName + \"/\" + replicaName + \" no action taken.\");\n    }\n\n    log.info(\"Deleting property \" + property + \" for collection: \" + collectionName +\n        \" slice \" + sliceName + \" replica \" + replicaName + \". Full message: \" + message);\n    String curProp = replica.getStr(property);\n    if (curProp == null) return ZkStateWriter.NO_OP; // not there anyway, nothing to do.\n\n    log.info(\"Deleting property \" + property + \" for collection: \" + collectionName +\n        \" slice \" + sliceName + \" replica \" + replicaName + \". Full message: \" + message);\n    DocCollection collection = clusterState.getCollection(collectionName);\n    Slice slice = collection.getSlice(sliceName);\n    DocCollection newCollection = SliceMutator.updateReplica(collection,\n        slice, replicaName, unsetProperty(replica, property));\n    return new ZkWriteCommand(collectionName, newCollection);\n  }\n\n","sourceOld":"  public ZkWriteCommand removeReplicaProperty(ClusterState clusterState, ZkNodeProps message) {\n    if (checkKeyExistence(message, ZkStateReader.COLLECTION_PROP) == false ||\n        checkKeyExistence(message, ZkStateReader.SHARD_ID_PROP) == false ||\n        checkKeyExistence(message, ZkStateReader.REPLICA_PROP) == false ||\n        checkKeyExistence(message, ZkStateReader.PROPERTY_PROP) == false) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Overseer DELETEREPLICAPROPERTY requires \" +\n              ZkStateReader.COLLECTION_PROP + \" and \" + ZkStateReader.SHARD_ID_PROP + \" and \" +\n              ZkStateReader.REPLICA_PROP + \" and \" + ZkStateReader.PROPERTY_PROP + \" no action taken.\");\n    }\n    String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    String sliceName = message.getStr(ZkStateReader.SHARD_ID_PROP);\n    String replicaName = message.getStr(ZkStateReader.REPLICA_PROP);\n    String property = message.getStr(ZkStateReader.PROPERTY_PROP).toLowerCase(Locale.ROOT);\n    if (StringUtils.startsWith(property, COLL_PROP_PREFIX) == false) {\n      property = OverseerCollectionProcessor.COLL_PROP_PREFIX + property;\n    }\n\n    Replica replica = clusterState.getReplica(collectionName, replicaName);\n\n    if (replica == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Could not find collection/slice/replica \" +\n          collectionName + \"/\" + sliceName + \"/\" + replicaName + \" no action taken.\");\n    }\n\n    log.info(\"Deleting property \" + property + \" for collection: \" + collectionName +\n        \" slice \" + sliceName + \" replica \" + replicaName + \". Full message: \" + message);\n    String curProp = replica.getStr(property);\n    if (curProp == null) return ZkStateWriter.NO_OP; // not there anyway, nothing to do.\n\n    log.info(\"Deleting property \" + property + \" for collection: \" + collectionName +\n        \" slice \" + sliceName + \" replica \" + replicaName + \". Full message: \" + message);\n    DocCollection collection = clusterState.getCollection(collectionName);\n    Slice slice = collection.getSlice(sliceName);\n    DocCollection newCollection = SliceMutator.updateReplica(collection,\n        slice, replicaName, unsetProperty(replica, property));\n    return new ZkWriteCommand(collectionName, newCollection);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac","date":1438841252,"type":3,"author":"Gregory Chanan","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/overseer/ReplicaMutator#deleteReplicaProperty(ClusterState,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/overseer/ReplicaMutator#deleteReplicaProperty(ClusterState,ZkNodeProps).mjava","sourceNew":"  public ZkWriteCommand deleteReplicaProperty(ClusterState clusterState, ZkNodeProps message) {\n    if (checkKeyExistence(message, ZkStateReader.COLLECTION_PROP) == false ||\n        checkKeyExistence(message, ZkStateReader.SHARD_ID_PROP) == false ||\n        checkKeyExistence(message, ZkStateReader.REPLICA_PROP) == false ||\n        checkKeyExistence(message, ZkStateReader.PROPERTY_PROP) == false) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Overseer DELETEREPLICAPROP requires \" +\n              ZkStateReader.COLLECTION_PROP + \" and \" + ZkStateReader.SHARD_ID_PROP + \" and \" +\n              ZkStateReader.REPLICA_PROP + \" and \" + ZkStateReader.PROPERTY_PROP + \" no action taken.\");\n    }\n    String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    String sliceName = message.getStr(ZkStateReader.SHARD_ID_PROP);\n    String replicaName = message.getStr(ZkStateReader.REPLICA_PROP);\n    String property = message.getStr(ZkStateReader.PROPERTY_PROP).toLowerCase(Locale.ROOT);\n    if (StringUtils.startsWith(property, COLL_PROP_PREFIX) == false) {\n      property = OverseerCollectionMessageHandler.COLL_PROP_PREFIX + property;\n    }\n\n    Replica replica = clusterState.getReplica(collectionName, replicaName);\n\n    if (replica == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Could not find collection/slice/replica \" +\n          collectionName + \"/\" + sliceName + \"/\" + replicaName + \" no action taken.\");\n    }\n\n    log.info(\"Deleting property \" + property + \" for collection: \" + collectionName +\n        \" slice \" + sliceName + \" replica \" + replicaName + \". Full message: \" + message);\n    String curProp = replica.getStr(property);\n    if (curProp == null) return ZkStateWriter.NO_OP; // not there anyway, nothing to do.\n\n    log.info(\"Deleting property \" + property + \" for collection: \" + collectionName +\n        \" slice \" + sliceName + \" replica \" + replicaName + \". Full message: \" + message);\n    DocCollection collection = clusterState.getCollection(collectionName);\n    Slice slice = collection.getSlice(sliceName);\n    DocCollection newCollection = SliceMutator.updateReplica(collection,\n        slice, replicaName, unsetProperty(replica, property));\n    return new ZkWriteCommand(collectionName, newCollection);\n  }\n\n","sourceOld":"  public ZkWriteCommand deleteReplicaProperty(ClusterState clusterState, ZkNodeProps message) {\n    if (checkKeyExistence(message, ZkStateReader.COLLECTION_PROP) == false ||\n        checkKeyExistence(message, ZkStateReader.SHARD_ID_PROP) == false ||\n        checkKeyExistence(message, ZkStateReader.REPLICA_PROP) == false ||\n        checkKeyExistence(message, ZkStateReader.PROPERTY_PROP) == false) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Overseer DELETEREPLICAPROP requires \" +\n              ZkStateReader.COLLECTION_PROP + \" and \" + ZkStateReader.SHARD_ID_PROP + \" and \" +\n              ZkStateReader.REPLICA_PROP + \" and \" + ZkStateReader.PROPERTY_PROP + \" no action taken.\");\n    }\n    String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    String sliceName = message.getStr(ZkStateReader.SHARD_ID_PROP);\n    String replicaName = message.getStr(ZkStateReader.REPLICA_PROP);\n    String property = message.getStr(ZkStateReader.PROPERTY_PROP).toLowerCase(Locale.ROOT);\n    if (StringUtils.startsWith(property, COLL_PROP_PREFIX) == false) {\n      property = OverseerCollectionProcessor.COLL_PROP_PREFIX + property;\n    }\n\n    Replica replica = clusterState.getReplica(collectionName, replicaName);\n\n    if (replica == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Could not find collection/slice/replica \" +\n          collectionName + \"/\" + sliceName + \"/\" + replicaName + \" no action taken.\");\n    }\n\n    log.info(\"Deleting property \" + property + \" for collection: \" + collectionName +\n        \" slice \" + sliceName + \" replica \" + replicaName + \". Full message: \" + message);\n    String curProp = replica.getStr(property);\n    if (curProp == null) return ZkStateWriter.NO_OP; // not there anyway, nothing to do.\n\n    log.info(\"Deleting property \" + property + \" for collection: \" + collectionName +\n        \" slice \" + sliceName + \" replica \" + replicaName + \". Full message: \" + message);\n    DocCollection collection = clusterState.getCollection(collectionName);\n    Slice slice = collection.getSlice(sliceName);\n    DocCollection newCollection = SliceMutator.updateReplica(collection,\n        slice, replicaName, unsetProperty(replica, property));\n    return new ZkWriteCommand(collectionName, newCollection);\n  }\n\n","bugFix":["24a5da2a0d397ff29f3de8f6cf451d3412c2509a"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"04c8df3f10a676c3de5dbf390f17a2de2d45cacd","date":1461615626,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/overseer/ReplicaMutator#deleteReplicaProperty(ClusterState,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/overseer/ReplicaMutator#deleteReplicaProperty(ClusterState,ZkNodeProps).mjava","sourceNew":"  public ZkWriteCommand deleteReplicaProperty(ClusterState clusterState, ZkNodeProps message) {\n    if (checkKeyExistence(message, ZkStateReader.COLLECTION_PROP) == false ||\n        checkKeyExistence(message, ZkStateReader.SHARD_ID_PROP) == false ||\n        checkKeyExistence(message, ZkStateReader.REPLICA_PROP) == false ||\n        checkKeyExistence(message, ZkStateReader.PROPERTY_PROP) == false) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Overseer DELETEREPLICAPROP requires \" +\n              ZkStateReader.COLLECTION_PROP + \" and \" + ZkStateReader.SHARD_ID_PROP + \" and \" +\n              ZkStateReader.REPLICA_PROP + \" and \" + ZkStateReader.PROPERTY_PROP + \" no action taken.\");\n    }\n    String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    String sliceName = message.getStr(ZkStateReader.SHARD_ID_PROP);\n    String replicaName = message.getStr(ZkStateReader.REPLICA_PROP);\n    String property = message.getStr(ZkStateReader.PROPERTY_PROP).toLowerCase(Locale.ROOT);\n    if (StringUtils.startsWith(property, COLL_PROP_PREFIX) == false) {\n      property = OverseerCollectionMessageHandler.COLL_PROP_PREFIX + property;\n    }\n\n    DocCollection collection = clusterState.getCollection(collectionName);\n    Replica replica = collection.getReplica(replicaName);\n\n    if (replica == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Could not find collection/slice/replica \" +\n          collectionName + \"/\" + sliceName + \"/\" + replicaName + \" no action taken.\");\n    }\n\n    log.info(\"Deleting property \" + property + \" for collection: \" + collectionName +\n        \" slice \" + sliceName + \" replica \" + replicaName + \". Full message: \" + message);\n    String curProp = replica.getStr(property);\n    if (curProp == null) return ZkStateWriter.NO_OP; // not there anyway, nothing to do.\n\n    log.info(\"Deleting property \" + property + \" for collection: \" + collectionName +\n        \" slice \" + sliceName + \" replica \" + replicaName + \". Full message: \" + message);\n    Slice slice = collection.getSlice(sliceName);\n    DocCollection newCollection = SliceMutator.updateReplica(collection,\n        slice, replicaName, unsetProperty(replica, property));\n    return new ZkWriteCommand(collectionName, newCollection);\n  }\n\n","sourceOld":"  public ZkWriteCommand deleteReplicaProperty(ClusterState clusterState, ZkNodeProps message) {\n    if (checkKeyExistence(message, ZkStateReader.COLLECTION_PROP) == false ||\n        checkKeyExistence(message, ZkStateReader.SHARD_ID_PROP) == false ||\n        checkKeyExistence(message, ZkStateReader.REPLICA_PROP) == false ||\n        checkKeyExistence(message, ZkStateReader.PROPERTY_PROP) == false) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Overseer DELETEREPLICAPROP requires \" +\n              ZkStateReader.COLLECTION_PROP + \" and \" + ZkStateReader.SHARD_ID_PROP + \" and \" +\n              ZkStateReader.REPLICA_PROP + \" and \" + ZkStateReader.PROPERTY_PROP + \" no action taken.\");\n    }\n    String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    String sliceName = message.getStr(ZkStateReader.SHARD_ID_PROP);\n    String replicaName = message.getStr(ZkStateReader.REPLICA_PROP);\n    String property = message.getStr(ZkStateReader.PROPERTY_PROP).toLowerCase(Locale.ROOT);\n    if (StringUtils.startsWith(property, COLL_PROP_PREFIX) == false) {\n      property = OverseerCollectionMessageHandler.COLL_PROP_PREFIX + property;\n    }\n\n    Replica replica = clusterState.getReplica(collectionName, replicaName);\n\n    if (replica == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Could not find collection/slice/replica \" +\n          collectionName + \"/\" + sliceName + \"/\" + replicaName + \" no action taken.\");\n    }\n\n    log.info(\"Deleting property \" + property + \" for collection: \" + collectionName +\n        \" slice \" + sliceName + \" replica \" + replicaName + \". Full message: \" + message);\n    String curProp = replica.getStr(property);\n    if (curProp == null) return ZkStateWriter.NO_OP; // not there anyway, nothing to do.\n\n    log.info(\"Deleting property \" + property + \" for collection: \" + collectionName +\n        \" slice \" + sliceName + \" replica \" + replicaName + \". Full message: \" + message);\n    DocCollection collection = clusterState.getCollection(collectionName);\n    Slice slice = collection.getSlice(sliceName);\n    DocCollection newCollection = SliceMutator.updateReplica(collection,\n        slice, replicaName, unsetProperty(replica, property));\n    return new ZkWriteCommand(collectionName, newCollection);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f7f901826e47f75f810d7aae24b0455d21ea1fe2","date":1461678892,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/overseer/ReplicaMutator#deleteReplicaProperty(ClusterState,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/overseer/ReplicaMutator#deleteReplicaProperty(ClusterState,ZkNodeProps).mjava","sourceNew":"  public ZkWriteCommand deleteReplicaProperty(ClusterState clusterState, ZkNodeProps message) {\n    if (checkKeyExistence(message, ZkStateReader.COLLECTION_PROP) == false ||\n        checkKeyExistence(message, ZkStateReader.SHARD_ID_PROP) == false ||\n        checkKeyExistence(message, ZkStateReader.REPLICA_PROP) == false ||\n        checkKeyExistence(message, ZkStateReader.PROPERTY_PROP) == false) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Overseer DELETEREPLICAPROP requires \" +\n              ZkStateReader.COLLECTION_PROP + \" and \" + ZkStateReader.SHARD_ID_PROP + \" and \" +\n              ZkStateReader.REPLICA_PROP + \" and \" + ZkStateReader.PROPERTY_PROP + \" no action taken.\");\n    }\n    String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    String sliceName = message.getStr(ZkStateReader.SHARD_ID_PROP);\n    String replicaName = message.getStr(ZkStateReader.REPLICA_PROP);\n    String property = message.getStr(ZkStateReader.PROPERTY_PROP).toLowerCase(Locale.ROOT);\n    if (StringUtils.startsWith(property, COLL_PROP_PREFIX) == false) {\n      property = OverseerCollectionMessageHandler.COLL_PROP_PREFIX + property;\n    }\n\n    DocCollection collection = clusterState.getCollection(collectionName);\n    Replica replica = collection.getReplica(replicaName);\n\n    if (replica == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Could not find collection/slice/replica \" +\n          collectionName + \"/\" + sliceName + \"/\" + replicaName + \" no action taken.\");\n    }\n\n    log.info(\"Deleting property \" + property + \" for collection: \" + collectionName +\n        \" slice \" + sliceName + \" replica \" + replicaName + \". Full message: \" + message);\n    String curProp = replica.getStr(property);\n    if (curProp == null) return ZkStateWriter.NO_OP; // not there anyway, nothing to do.\n\n    log.info(\"Deleting property \" + property + \" for collection: \" + collectionName +\n        \" slice \" + sliceName + \" replica \" + replicaName + \". Full message: \" + message);\n    Slice slice = collection.getSlice(sliceName);\n    DocCollection newCollection = SliceMutator.updateReplica(collection,\n        slice, replicaName, unsetProperty(replica, property));\n    return new ZkWriteCommand(collectionName, newCollection);\n  }\n\n","sourceOld":"  public ZkWriteCommand deleteReplicaProperty(ClusterState clusterState, ZkNodeProps message) {\n    if (checkKeyExistence(message, ZkStateReader.COLLECTION_PROP) == false ||\n        checkKeyExistence(message, ZkStateReader.SHARD_ID_PROP) == false ||\n        checkKeyExistence(message, ZkStateReader.REPLICA_PROP) == false ||\n        checkKeyExistence(message, ZkStateReader.PROPERTY_PROP) == false) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Overseer DELETEREPLICAPROP requires \" +\n              ZkStateReader.COLLECTION_PROP + \" and \" + ZkStateReader.SHARD_ID_PROP + \" and \" +\n              ZkStateReader.REPLICA_PROP + \" and \" + ZkStateReader.PROPERTY_PROP + \" no action taken.\");\n    }\n    String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    String sliceName = message.getStr(ZkStateReader.SHARD_ID_PROP);\n    String replicaName = message.getStr(ZkStateReader.REPLICA_PROP);\n    String property = message.getStr(ZkStateReader.PROPERTY_PROP).toLowerCase(Locale.ROOT);\n    if (StringUtils.startsWith(property, COLL_PROP_PREFIX) == false) {\n      property = OverseerCollectionMessageHandler.COLL_PROP_PREFIX + property;\n    }\n\n    Replica replica = clusterState.getReplica(collectionName, replicaName);\n\n    if (replica == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Could not find collection/slice/replica \" +\n          collectionName + \"/\" + sliceName + \"/\" + replicaName + \" no action taken.\");\n    }\n\n    log.info(\"Deleting property \" + property + \" for collection: \" + collectionName +\n        \" slice \" + sliceName + \" replica \" + replicaName + \". Full message: \" + message);\n    String curProp = replica.getStr(property);\n    if (curProp == null) return ZkStateWriter.NO_OP; // not there anyway, nothing to do.\n\n    log.info(\"Deleting property \" + property + \" for collection: \" + collectionName +\n        \" slice \" + sliceName + \" replica \" + replicaName + \". Full message: \" + message);\n    DocCollection collection = clusterState.getCollection(collectionName);\n    Slice slice = collection.getSlice(sliceName);\n    DocCollection newCollection = SliceMutator.updateReplica(collection,\n        slice, replicaName, unsetProperty(replica, property));\n    return new ZkWriteCommand(collectionName, newCollection);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"962cd4f5e313777f35da8f521265323e84184929","date":1474533758,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/overseer/ReplicaMutator#deleteReplicaProperty(ClusterState,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/overseer/ReplicaMutator#deleteReplicaProperty(ClusterState,ZkNodeProps).mjava","sourceNew":"  public ZkWriteCommand deleteReplicaProperty(ClusterState clusterState, ZkNodeProps message) {\n    if (checkKeyExistence(message, ZkStateReader.COLLECTION_PROP) == false ||\n        checkKeyExistence(message, ZkStateReader.SHARD_ID_PROP) == false ||\n        checkKeyExistence(message, ZkStateReader.REPLICA_PROP) == false ||\n        checkKeyExistence(message, ZkStateReader.PROPERTY_PROP) == false) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Overseer DELETEREPLICAPROP requires \" +\n              ZkStateReader.COLLECTION_PROP + \" and \" + ZkStateReader.SHARD_ID_PROP + \" and \" +\n              ZkStateReader.REPLICA_PROP + \" and \" + ZkStateReader.PROPERTY_PROP + \" no action taken.\");\n    }\n    String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    String sliceName = message.getStr(ZkStateReader.SHARD_ID_PROP);\n    String replicaName = message.getStr(ZkStateReader.REPLICA_PROP);\n    String property = message.getStr(ZkStateReader.PROPERTY_PROP).toLowerCase(Locale.ROOT);\n    if (StringUtils.startsWith(property, COLL_PROP_PREFIX) == false) {\n      property = OverseerCollectionMessageHandler.COLL_PROP_PREFIX + property;\n    }\n\n    DocCollection collection = clusterState.getCollection(collectionName);\n    Replica replica = collection.getReplica(replicaName);\n\n    if (replica == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Could not find collection/slice/replica \" +\n          collectionName + \"/\" + sliceName + \"/\" + replicaName + \" no action taken.\");\n    }\n\n    log.info(\"Deleting property {} for collection: {} slice: {} replica: {}\", property, collectionName, sliceName, replicaName);\n    log.debug(\"Full message: {}\", message);\n    String curProp = replica.getStr(property);\n    if (curProp == null) return ZkStateWriter.NO_OP; // not there anyway, nothing to do.\n\n    Slice slice = collection.getSlice(sliceName);\n    DocCollection newCollection = SliceMutator.updateReplica(collection,\n        slice, replicaName, unsetProperty(replica, property));\n    return new ZkWriteCommand(collectionName, newCollection);\n  }\n\n","sourceOld":"  public ZkWriteCommand deleteReplicaProperty(ClusterState clusterState, ZkNodeProps message) {\n    if (checkKeyExistence(message, ZkStateReader.COLLECTION_PROP) == false ||\n        checkKeyExistence(message, ZkStateReader.SHARD_ID_PROP) == false ||\n        checkKeyExistence(message, ZkStateReader.REPLICA_PROP) == false ||\n        checkKeyExistence(message, ZkStateReader.PROPERTY_PROP) == false) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Overseer DELETEREPLICAPROP requires \" +\n              ZkStateReader.COLLECTION_PROP + \" and \" + ZkStateReader.SHARD_ID_PROP + \" and \" +\n              ZkStateReader.REPLICA_PROP + \" and \" + ZkStateReader.PROPERTY_PROP + \" no action taken.\");\n    }\n    String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    String sliceName = message.getStr(ZkStateReader.SHARD_ID_PROP);\n    String replicaName = message.getStr(ZkStateReader.REPLICA_PROP);\n    String property = message.getStr(ZkStateReader.PROPERTY_PROP).toLowerCase(Locale.ROOT);\n    if (StringUtils.startsWith(property, COLL_PROP_PREFIX) == false) {\n      property = OverseerCollectionMessageHandler.COLL_PROP_PREFIX + property;\n    }\n\n    DocCollection collection = clusterState.getCollection(collectionName);\n    Replica replica = collection.getReplica(replicaName);\n\n    if (replica == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Could not find collection/slice/replica \" +\n          collectionName + \"/\" + sliceName + \"/\" + replicaName + \" no action taken.\");\n    }\n\n    log.info(\"Deleting property \" + property + \" for collection: \" + collectionName +\n        \" slice \" + sliceName + \" replica \" + replicaName + \". Full message: \" + message);\n    String curProp = replica.getStr(property);\n    if (curProp == null) return ZkStateWriter.NO_OP; // not there anyway, nothing to do.\n\n    log.info(\"Deleting property \" + property + \" for collection: \" + collectionName +\n        \" slice \" + sliceName + \" replica \" + replicaName + \". Full message: \" + message);\n    Slice slice = collection.getSlice(sliceName);\n    DocCollection newCollection = SliceMutator.updateReplica(collection,\n        slice, replicaName, unsetProperty(replica, property));\n    return new ZkWriteCommand(collectionName, newCollection);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/overseer/ReplicaMutator#deleteReplicaProperty(ClusterState,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/overseer/ReplicaMutator#deleteReplicaProperty(ClusterState,ZkNodeProps).mjava","sourceNew":"  public ZkWriteCommand deleteReplicaProperty(ClusterState clusterState, ZkNodeProps message) {\n    if (checkKeyExistence(message, ZkStateReader.COLLECTION_PROP) == false ||\n        checkKeyExistence(message, ZkStateReader.SHARD_ID_PROP) == false ||\n        checkKeyExistence(message, ZkStateReader.REPLICA_PROP) == false ||\n        checkKeyExistence(message, ZkStateReader.PROPERTY_PROP) == false) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Overseer DELETEREPLICAPROP requires \" +\n              ZkStateReader.COLLECTION_PROP + \" and \" + ZkStateReader.SHARD_ID_PROP + \" and \" +\n              ZkStateReader.REPLICA_PROP + \" and \" + ZkStateReader.PROPERTY_PROP + \" no action taken.\");\n    }\n    String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    String sliceName = message.getStr(ZkStateReader.SHARD_ID_PROP);\n    String replicaName = message.getStr(ZkStateReader.REPLICA_PROP);\n    String property = message.getStr(ZkStateReader.PROPERTY_PROP).toLowerCase(Locale.ROOT);\n    if (StringUtils.startsWith(property, COLL_PROP_PREFIX) == false) {\n      property = OverseerCollectionMessageHandler.COLL_PROP_PREFIX + property;\n    }\n\n    DocCollection collection = clusterState.getCollection(collectionName);\n    Replica replica = collection.getReplica(replicaName);\n\n    if (replica == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Could not find collection/slice/replica \" +\n          collectionName + \"/\" + sliceName + \"/\" + replicaName + \" no action taken.\");\n    }\n\n    log.info(\"Deleting property {} for collection: {} slice: {} replica: {}\", property, collectionName, sliceName, replicaName);\n    log.debug(\"Full message: {}\", message);\n    String curProp = replica.getStr(property);\n    if (curProp == null) return ZkStateWriter.NO_OP; // not there anyway, nothing to do.\n\n    Slice slice = collection.getSlice(sliceName);\n    DocCollection newCollection = SliceMutator.updateReplica(collection,\n        slice, replicaName, unsetProperty(replica, property));\n    return new ZkWriteCommand(collectionName, newCollection);\n  }\n\n","sourceOld":"  public ZkWriteCommand deleteReplicaProperty(ClusterState clusterState, ZkNodeProps message) {\n    if (checkKeyExistence(message, ZkStateReader.COLLECTION_PROP) == false ||\n        checkKeyExistence(message, ZkStateReader.SHARD_ID_PROP) == false ||\n        checkKeyExistence(message, ZkStateReader.REPLICA_PROP) == false ||\n        checkKeyExistence(message, ZkStateReader.PROPERTY_PROP) == false) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Overseer DELETEREPLICAPROP requires \" +\n              ZkStateReader.COLLECTION_PROP + \" and \" + ZkStateReader.SHARD_ID_PROP + \" and \" +\n              ZkStateReader.REPLICA_PROP + \" and \" + ZkStateReader.PROPERTY_PROP + \" no action taken.\");\n    }\n    String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    String sliceName = message.getStr(ZkStateReader.SHARD_ID_PROP);\n    String replicaName = message.getStr(ZkStateReader.REPLICA_PROP);\n    String property = message.getStr(ZkStateReader.PROPERTY_PROP).toLowerCase(Locale.ROOT);\n    if (StringUtils.startsWith(property, COLL_PROP_PREFIX) == false) {\n      property = OverseerCollectionMessageHandler.COLL_PROP_PREFIX + property;\n    }\n\n    DocCollection collection = clusterState.getCollection(collectionName);\n    Replica replica = collection.getReplica(replicaName);\n\n    if (replica == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Could not find collection/slice/replica \" +\n          collectionName + \"/\" + sliceName + \"/\" + replicaName + \" no action taken.\");\n    }\n\n    log.info(\"Deleting property \" + property + \" for collection: \" + collectionName +\n        \" slice \" + sliceName + \" replica \" + replicaName + \". Full message: \" + message);\n    String curProp = replica.getStr(property);\n    if (curProp == null) return ZkStateWriter.NO_OP; // not there anyway, nothing to do.\n\n    log.info(\"Deleting property \" + property + \" for collection: \" + collectionName +\n        \" slice \" + sliceName + \" replica \" + replicaName + \". Full message: \" + message);\n    Slice slice = collection.getSlice(sliceName);\n    DocCollection newCollection = SliceMutator.updateReplica(collection,\n        slice, replicaName, unsetProperty(replica, property));\n    return new ZkWriteCommand(collectionName, newCollection);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/overseer/ReplicaMutator#deleteReplicaProperty(ClusterState,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/overseer/ReplicaMutator#deleteReplicaProperty(ClusterState,ZkNodeProps).mjava","sourceNew":"  public ZkWriteCommand deleteReplicaProperty(ClusterState clusterState, ZkNodeProps message) {\n    if (checkKeyExistence(message, ZkStateReader.COLLECTION_PROP) == false ||\n        checkKeyExistence(message, ZkStateReader.SHARD_ID_PROP) == false ||\n        checkKeyExistence(message, ZkStateReader.REPLICA_PROP) == false ||\n        checkKeyExistence(message, ZkStateReader.PROPERTY_PROP) == false) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Overseer DELETEREPLICAPROP requires \" +\n              ZkStateReader.COLLECTION_PROP + \" and \" + ZkStateReader.SHARD_ID_PROP + \" and \" +\n              ZkStateReader.REPLICA_PROP + \" and \" + ZkStateReader.PROPERTY_PROP + \" no action taken.\");\n    }\n    String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    String sliceName = message.getStr(ZkStateReader.SHARD_ID_PROP);\n    String replicaName = message.getStr(ZkStateReader.REPLICA_PROP);\n    String property = message.getStr(ZkStateReader.PROPERTY_PROP).toLowerCase(Locale.ROOT);\n    if (StringUtils.startsWith(property, COLL_PROP_PREFIX) == false) {\n      property = OverseerCollectionMessageHandler.COLL_PROP_PREFIX + property;\n    }\n\n    DocCollection collection = clusterState.getCollection(collectionName);\n    Replica replica = collection.getReplica(replicaName);\n\n    if (replica == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Could not find collection/slice/replica \" +\n          collectionName + \"/\" + sliceName + \"/\" + replicaName + \" no action taken.\");\n    }\n\n    log.info(\"Deleting property {} for collection: {} slice: {} replica: {}\", property, collectionName, sliceName, replicaName);\n    log.debug(\"Full message: {}\", message);\n    String curProp = replica.getStr(property);\n    if (curProp == null) return ZkStateWriter.NO_OP; // not there anyway, nothing to do.\n\n    Slice slice = collection.getSlice(sliceName);\n    DocCollection newCollection = SliceMutator.updateReplica(collection,\n        slice, replicaName, unsetProperty(replica, property));\n    return new ZkWriteCommand(collectionName, newCollection);\n  }\n\n","sourceOld":"  public ZkWriteCommand deleteReplicaProperty(ClusterState clusterState, ZkNodeProps message) {\n    if (checkKeyExistence(message, ZkStateReader.COLLECTION_PROP) == false ||\n        checkKeyExistence(message, ZkStateReader.SHARD_ID_PROP) == false ||\n        checkKeyExistence(message, ZkStateReader.REPLICA_PROP) == false ||\n        checkKeyExistence(message, ZkStateReader.PROPERTY_PROP) == false) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Overseer DELETEREPLICAPROP requires \" +\n              ZkStateReader.COLLECTION_PROP + \" and \" + ZkStateReader.SHARD_ID_PROP + \" and \" +\n              ZkStateReader.REPLICA_PROP + \" and \" + ZkStateReader.PROPERTY_PROP + \" no action taken.\");\n    }\n    String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    String sliceName = message.getStr(ZkStateReader.SHARD_ID_PROP);\n    String replicaName = message.getStr(ZkStateReader.REPLICA_PROP);\n    String property = message.getStr(ZkStateReader.PROPERTY_PROP).toLowerCase(Locale.ROOT);\n    if (StringUtils.startsWith(property, COLL_PROP_PREFIX) == false) {\n      property = OverseerCollectionMessageHandler.COLL_PROP_PREFIX + property;\n    }\n\n    DocCollection collection = clusterState.getCollection(collectionName);\n    Replica replica = collection.getReplica(replicaName);\n\n    if (replica == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Could not find collection/slice/replica \" +\n          collectionName + \"/\" + sliceName + \"/\" + replicaName + \" no action taken.\");\n    }\n\n    log.info(\"Deleting property \" + property + \" for collection: \" + collectionName +\n        \" slice \" + sliceName + \" replica \" + replicaName + \". Full message: \" + message);\n    String curProp = replica.getStr(property);\n    if (curProp == null) return ZkStateWriter.NO_OP; // not there anyway, nothing to do.\n\n    log.info(\"Deleting property \" + property + \" for collection: \" + collectionName +\n        \" slice \" + sliceName + \" replica \" + replicaName + \". Full message: \" + message);\n    Slice slice = collection.getSlice(sliceName);\n    DocCollection newCollection = SliceMutator.updateReplica(collection,\n        slice, replicaName, unsetProperty(replica, property));\n    return new ZkWriteCommand(collectionName, newCollection);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6146c07c0dee1ae1e42926167acd127fed5ef59d","date":1516129420,"type":3,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/overseer/ReplicaMutator#deleteReplicaProperty(ClusterState,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/overseer/ReplicaMutator#deleteReplicaProperty(ClusterState,ZkNodeProps).mjava","sourceNew":"  public ZkWriteCommand deleteReplicaProperty(ClusterState clusterState, ZkNodeProps message) {\n    if (checkKeyExistence(message, ZkStateReader.COLLECTION_PROP) == false ||\n        checkKeyExistence(message, ZkStateReader.SHARD_ID_PROP) == false ||\n        checkKeyExistence(message, ZkStateReader.REPLICA_PROP) == false ||\n        checkKeyExistence(message, ZkStateReader.PROPERTY_PROP) == false) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Overseer DELETEREPLICAPROP requires \" +\n              ZkStateReader.COLLECTION_PROP + \" and \" + ZkStateReader.SHARD_ID_PROP + \" and \" +\n              ZkStateReader.REPLICA_PROP + \" and \" + ZkStateReader.PROPERTY_PROP + \" no action taken.\");\n    }\n    String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    String sliceName = message.getStr(ZkStateReader.SHARD_ID_PROP);\n    String replicaName = message.getStr(ZkStateReader.REPLICA_PROP);\n    String property = message.getStr(ZkStateReader.PROPERTY_PROP).toLowerCase(Locale.ROOT);\n    if (StringUtils.startsWith(property, OverseerCollectionMessageHandler.COLL_PROP_PREFIX) == false) {\n      property = OverseerCollectionMessageHandler.COLL_PROP_PREFIX + property;\n    }\n\n    DocCollection collection = clusterState.getCollection(collectionName);\n    Replica replica = collection.getReplica(replicaName);\n\n    if (replica == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Could not find collection/slice/replica \" +\n          collectionName + \"/\" + sliceName + \"/\" + replicaName + \" no action taken.\");\n    }\n\n    log.info(\"Deleting property {} for collection: {} slice: {} replica: {}\", property, collectionName, sliceName, replicaName);\n    log.debug(\"Full message: {}\", message);\n    String curProp = replica.getStr(property);\n    if (curProp == null) return ZkStateWriter.NO_OP; // not there anyway, nothing to do.\n\n    Slice slice = collection.getSlice(sliceName);\n    DocCollection newCollection = SliceMutator.updateReplica(collection,\n        slice, replicaName, unsetProperty(replica, property));\n    return new ZkWriteCommand(collectionName, newCollection);\n  }\n\n","sourceOld":"  public ZkWriteCommand deleteReplicaProperty(ClusterState clusterState, ZkNodeProps message) {\n    if (checkKeyExistence(message, ZkStateReader.COLLECTION_PROP) == false ||\n        checkKeyExistence(message, ZkStateReader.SHARD_ID_PROP) == false ||\n        checkKeyExistence(message, ZkStateReader.REPLICA_PROP) == false ||\n        checkKeyExistence(message, ZkStateReader.PROPERTY_PROP) == false) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Overseer DELETEREPLICAPROP requires \" +\n              ZkStateReader.COLLECTION_PROP + \" and \" + ZkStateReader.SHARD_ID_PROP + \" and \" +\n              ZkStateReader.REPLICA_PROP + \" and \" + ZkStateReader.PROPERTY_PROP + \" no action taken.\");\n    }\n    String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    String sliceName = message.getStr(ZkStateReader.SHARD_ID_PROP);\n    String replicaName = message.getStr(ZkStateReader.REPLICA_PROP);\n    String property = message.getStr(ZkStateReader.PROPERTY_PROP).toLowerCase(Locale.ROOT);\n    if (StringUtils.startsWith(property, COLL_PROP_PREFIX) == false) {\n      property = OverseerCollectionMessageHandler.COLL_PROP_PREFIX + property;\n    }\n\n    DocCollection collection = clusterState.getCollection(collectionName);\n    Replica replica = collection.getReplica(replicaName);\n\n    if (replica == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Could not find collection/slice/replica \" +\n          collectionName + \"/\" + sliceName + \"/\" + replicaName + \" no action taken.\");\n    }\n\n    log.info(\"Deleting property {} for collection: {} slice: {} replica: {}\", property, collectionName, sliceName, replicaName);\n    log.debug(\"Full message: {}\", message);\n    String curProp = replica.getStr(property);\n    if (curProp == null) return ZkStateWriter.NO_OP; // not there anyway, nothing to do.\n\n    Slice slice = collection.getSlice(sliceName);\n    DocCollection newCollection = SliceMutator.updateReplica(collection,\n        slice, replicaName, unsetProperty(replica, property));\n    return new ZkWriteCommand(collectionName, newCollection);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/overseer/ReplicaMutator#deleteReplicaProperty(ClusterState,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/overseer/ReplicaMutator#deleteReplicaProperty(ClusterState,ZkNodeProps).mjava","sourceNew":"  public ZkWriteCommand deleteReplicaProperty(ClusterState clusterState, ZkNodeProps message) {\n    if (checkKeyExistence(message, ZkStateReader.COLLECTION_PROP) == false ||\n        checkKeyExistence(message, ZkStateReader.SHARD_ID_PROP) == false ||\n        checkKeyExistence(message, ZkStateReader.REPLICA_PROP) == false ||\n        checkKeyExistence(message, ZkStateReader.PROPERTY_PROP) == false) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Overseer DELETEREPLICAPROP requires \" +\n              ZkStateReader.COLLECTION_PROP + \" and \" + ZkStateReader.SHARD_ID_PROP + \" and \" +\n              ZkStateReader.REPLICA_PROP + \" and \" + ZkStateReader.PROPERTY_PROP + \" no action taken.\");\n    }\n    String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    String sliceName = message.getStr(ZkStateReader.SHARD_ID_PROP);\n    String replicaName = message.getStr(ZkStateReader.REPLICA_PROP);\n    String property = message.getStr(ZkStateReader.PROPERTY_PROP).toLowerCase(Locale.ROOT);\n    if (StringUtils.startsWith(property, OverseerCollectionMessageHandler.COLL_PROP_PREFIX) == false) {\n      property = OverseerCollectionMessageHandler.COLL_PROP_PREFIX + property;\n    }\n\n    DocCollection collection = clusterState.getCollection(collectionName);\n    Replica replica = collection.getReplica(replicaName);\n\n    if (replica == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Could not find collection/slice/replica \" +\n          collectionName + \"/\" + sliceName + \"/\" + replicaName + \" no action taken.\");\n    }\n\n    log.info(\"Deleting property {} for collection: {} slice: {} replica: {}\", property, collectionName, sliceName, replicaName);\n    log.debug(\"Full message: {}\", message);\n    String curProp = replica.getStr(property);\n    if (curProp == null) return ZkStateWriter.NO_OP; // not there anyway, nothing to do.\n\n    Slice slice = collection.getSlice(sliceName);\n    DocCollection newCollection = SliceMutator.updateReplica(collection,\n        slice, replicaName, unsetProperty(replica, property));\n    return new ZkWriteCommand(collectionName, newCollection);\n  }\n\n","sourceOld":"  public ZkWriteCommand deleteReplicaProperty(ClusterState clusterState, ZkNodeProps message) {\n    if (checkKeyExistence(message, ZkStateReader.COLLECTION_PROP) == false ||\n        checkKeyExistence(message, ZkStateReader.SHARD_ID_PROP) == false ||\n        checkKeyExistence(message, ZkStateReader.REPLICA_PROP) == false ||\n        checkKeyExistence(message, ZkStateReader.PROPERTY_PROP) == false) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Overseer DELETEREPLICAPROP requires \" +\n              ZkStateReader.COLLECTION_PROP + \" and \" + ZkStateReader.SHARD_ID_PROP + \" and \" +\n              ZkStateReader.REPLICA_PROP + \" and \" + ZkStateReader.PROPERTY_PROP + \" no action taken.\");\n    }\n    String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    String sliceName = message.getStr(ZkStateReader.SHARD_ID_PROP);\n    String replicaName = message.getStr(ZkStateReader.REPLICA_PROP);\n    String property = message.getStr(ZkStateReader.PROPERTY_PROP).toLowerCase(Locale.ROOT);\n    if (StringUtils.startsWith(property, COLL_PROP_PREFIX) == false) {\n      property = OverseerCollectionMessageHandler.COLL_PROP_PREFIX + property;\n    }\n\n    DocCollection collection = clusterState.getCollection(collectionName);\n    Replica replica = collection.getReplica(replicaName);\n\n    if (replica == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Could not find collection/slice/replica \" +\n          collectionName + \"/\" + sliceName + \"/\" + replicaName + \" no action taken.\");\n    }\n\n    log.info(\"Deleting property {} for collection: {} slice: {} replica: {}\", property, collectionName, sliceName, replicaName);\n    log.debug(\"Full message: {}\", message);\n    String curProp = replica.getStr(property);\n    if (curProp == null) return ZkStateWriter.NO_OP; // not there anyway, nothing to do.\n\n    Slice slice = collection.getSlice(sliceName);\n    DocCollection newCollection = SliceMutator.updateReplica(collection,\n        slice, replicaName, unsetProperty(replica, property));\n    return new ZkWriteCommand(collectionName, newCollection);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"da5ef0533dae1e5782b071a5484e1b9f3c28fc5f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac":["da5ef0533dae1e5782b071a5484e1b9f3c28fc5f"],"962cd4f5e313777f35da8f521265323e84184929":["f7f901826e47f75f810d7aae24b0455d21ea1fe2"],"b94236357aaa22b76c10629851fe4e376e0cea82":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f7f901826e47f75f810d7aae24b0455d21ea1fe2":["e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac","04c8df3f10a676c3de5dbf390f17a2de2d45cacd"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["f7f901826e47f75f810d7aae24b0455d21ea1fe2","962cd4f5e313777f35da8f521265323e84184929"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"04c8df3f10a676c3de5dbf390f17a2de2d45cacd":["e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["f7f901826e47f75f810d7aae24b0455d21ea1fe2","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b94236357aaa22b76c10629851fe4e376e0cea82"]},"commit2Childs":{"da5ef0533dae1e5782b071a5484e1b9f3c28fc5f":["e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac"],"e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac":["f7f901826e47f75f810d7aae24b0455d21ea1fe2","04c8df3f10a676c3de5dbf390f17a2de2d45cacd"],"962cd4f5e313777f35da8f521265323e84184929":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"b94236357aaa22b76c10629851fe4e376e0cea82":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["da5ef0533dae1e5782b071a5484e1b9f3c28fc5f"],"f7f901826e47f75f810d7aae24b0455d21ea1fe2":["962cd4f5e313777f35da8f521265323e84184929","17e5da53e4e5bd659e22add9bba1cfa222e7e30d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["b94236357aaa22b76c10629851fe4e376e0cea82","6146c07c0dee1ae1e42926167acd127fed5ef59d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["b94236357aaa22b76c10629851fe4e376e0cea82"],"04c8df3f10a676c3de5dbf390f17a2de2d45cacd":["f7f901826e47f75f810d7aae24b0455d21ea1fe2"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}