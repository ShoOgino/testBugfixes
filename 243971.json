{"path":"lucene/contrib/spatial/src/java/org/apache/lucene/spatial/geohash/GeoHashUtils#encode(double,double).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/spatial/src/java/org/apache/lucene/spatial/geohash/GeoHashUtils#encode(double,double).mjava","pathOld":"contrib/spatial/src/java/org/apache/lucene/spatial/geohash/GeoHashUtils#encode(double,double).mjava","sourceNew":"  /**\n   * Encodes the given latitude and longitude into a geohash\n   *\n   * @param latitude Latitude to encode\n   * @param longitude Longitude to encode\n   * @return Geohash encoding of the longitude and latitude\n   */\n  public static String encode(double latitude, double longitude) {\n    double[] latInterval = {-90.0, 90.0};\n    double[] lngInterval = {-180.0, 180.0};\n\n    final StringBuilder geohash = new StringBuilder();\n    boolean isEven = true;\n\n    int bit = 0;\n    int ch = 0;\n\n    while (geohash.length() < PRECISION) {\n      double mid = 0.0;\n      if (isEven) {\n        mid = (lngInterval[0] + lngInterval[1]) / 2D;\n        if (longitude > mid) {\n          ch |= BITS[bit];\n          lngInterval[0] = mid;\n        } else {\n          lngInterval[1] = mid;\n        }\n      } else {\n        mid = (latInterval[0] + latInterval[1]) / 2D;\n        if (latitude > mid) {\n          ch |= BITS[bit];\n          latInterval[0] = mid;\n        } else {\n          latInterval[1] = mid;\n        }\n      }\n\n      isEven = !isEven;\n\n      if (bit < 4) {\n        bit++;\n      } else {\n        geohash.append(BASE_32[ch]);\n        bit = 0;\n        ch = 0;\n      }\n    }\n\n    return geohash.toString();\n  }\n\n","sourceOld":"  /**\n   * Encodes the given latitude and longitude into a geohash\n   *\n   * @param latitude Latitude to encode\n   * @param longitude Longitude to encode\n   * @return Geohash encoding of the longitude and latitude\n   */\n  public static String encode(double latitude, double longitude) {\n    double[] latInterval = {-90.0, 90.0};\n    double[] lngInterval = {-180.0, 180.0};\n\n    final StringBuilder geohash = new StringBuilder();\n    boolean isEven = true;\n\n    int bit = 0;\n    int ch = 0;\n\n    while (geohash.length() < PRECISION) {\n      double mid = 0.0;\n      if (isEven) {\n        mid = (lngInterval[0] + lngInterval[1]) / 2D;\n        if (longitude > mid) {\n          ch |= BITS[bit];\n          lngInterval[0] = mid;\n        } else {\n          lngInterval[1] = mid;\n        }\n      } else {\n        mid = (latInterval[0] + latInterval[1]) / 2D;\n        if (latitude > mid) {\n          ch |= BITS[bit];\n          latInterval[0] = mid;\n        } else {\n          latInterval[1] = mid;\n        }\n      }\n\n      isEven = !isEven;\n\n      if (bit < 4) {\n        bit++;\n      } else {\n        geohash.append(BASE_32[ch]);\n        bit = 0;\n        ch = 0;\n      }\n    }\n\n    return geohash.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2fb7e38713d15939e085d376c6391e6e6262a81f","date":1329897272,"type":4,"author":"David Wayne Smiley","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/contrib/spatial/src/java/org/apache/lucene/spatial/geohash/GeoHashUtils#encode(double,double).mjava","sourceNew":null,"sourceOld":"  /**\n   * Encodes the given latitude and longitude into a geohash\n   *\n   * @param latitude Latitude to encode\n   * @param longitude Longitude to encode\n   * @return Geohash encoding of the longitude and latitude\n   */\n  public static String encode(double latitude, double longitude) {\n    double[] latInterval = {-90.0, 90.0};\n    double[] lngInterval = {-180.0, 180.0};\n\n    final StringBuilder geohash = new StringBuilder();\n    boolean isEven = true;\n\n    int bit = 0;\n    int ch = 0;\n\n    while (geohash.length() < PRECISION) {\n      double mid = 0.0;\n      if (isEven) {\n        mid = (lngInterval[0] + lngInterval[1]) / 2D;\n        if (longitude > mid) {\n          ch |= BITS[bit];\n          lngInterval[0] = mid;\n        } else {\n          lngInterval[1] = mid;\n        }\n      } else {\n        mid = (latInterval[0] + latInterval[1]) / 2D;\n        if (latitude > mid) {\n          ch |= BITS[bit];\n          latInterval[0] = mid;\n        } else {\n          latInterval[1] = mid;\n        }\n      }\n\n      isEven = !isEven;\n\n      if (bit < 4) {\n        bit++;\n      } else {\n        geohash.append(BASE_32[ch]);\n        bit = 0;\n        ch = 0;\n      }\n    }\n\n    return geohash.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e47768b261c28e7e6032060e8331475c81057953","date":1331681297,"type":4,"author":"Ryan McKinley","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/contrib/spatial/src/java/org/apache/lucene/spatial/geohash/GeoHashUtils#encode(double,double).mjava","sourceNew":null,"sourceOld":"  /**\n   * Encodes the given latitude and longitude into a geohash\n   *\n   * @param latitude Latitude to encode\n   * @param longitude Longitude to encode\n   * @return Geohash encoding of the longitude and latitude\n   */\n  public static String encode(double latitude, double longitude) {\n    double[] latInterval = {-90.0, 90.0};\n    double[] lngInterval = {-180.0, 180.0};\n\n    final StringBuilder geohash = new StringBuilder();\n    boolean isEven = true;\n\n    int bit = 0;\n    int ch = 0;\n\n    while (geohash.length() < PRECISION) {\n      double mid = 0.0;\n      if (isEven) {\n        mid = (lngInterval[0] + lngInterval[1]) / 2D;\n        if (longitude > mid) {\n          ch |= BITS[bit];\n          lngInterval[0] = mid;\n        } else {\n          lngInterval[1] = mid;\n        }\n      } else {\n        mid = (latInterval[0] + latInterval[1]) / 2D;\n        if (latitude > mid) {\n          ch |= BITS[bit];\n          latInterval[0] = mid;\n        } else {\n          latInterval[1] = mid;\n        }\n      }\n\n      isEven = !isEven;\n\n      if (bit < 4) {\n        bit++;\n      } else {\n        geohash.append(BASE_32[ch]);\n        bit = 0;\n        ch = 0;\n      }\n    }\n\n    return geohash.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e47768b261c28e7e6032060e8331475c81057953":["9454a6510e2db155fb01faa5c049b06ece95fab9","2fb7e38713d15939e085d376c6391e6e6262a81f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e47768b261c28e7e6032060e8331475c81057953"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2fb7e38713d15939e085d376c6391e6e6262a81f":["9454a6510e2db155fb01faa5c049b06ece95fab9"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"e47768b261c28e7e6032060e8331475c81057953":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["e47768b261c28e7e6032060e8331475c81057953","2fb7e38713d15939e085d376c6391e6e6262a81f"],"2fb7e38713d15939e085d376c6391e6e6262a81f":["e47768b261c28e7e6032060e8331475c81057953"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}