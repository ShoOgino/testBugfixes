{"path":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonShape#testLUCENE9055().mjava","commits":[{"id":"908e262be655c65579ec6d94f228d47b663da975","date":1576571938,"type":0,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonShape#testLUCENE9055().mjava","pathOld":"/dev/null","sourceNew":"  public void testLUCENE9055() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    // test polygons:\n    //[5, 5], [10, 6], [10, 10], [5, 10], [5, 5] ]\n    Polygon indexPoly1 = new Polygon(\n        new double[] {5d, 6d, 10d, 10d, 5d},\n        new double[] {5d, 10d, 10d, 5d, 5d}\n    );\n\n    // [ [6, 6], [9, 6], [9, 9], [6, 9], [6, 6] ]\n    Polygon indexPoly2 = new Polygon(\n        new double[] {6d, 6d, 9d, 9d, 6d},\n        new double[] {6d, 9d, 9d, 6d, 6d}\n    );\n\n    // index polygons:\n    Document doc;\n    addPolygonsToDoc(FIELDNAME, doc = new Document(), indexPoly1);\n    w.addDocument(doc);\n    addPolygonsToDoc(FIELDNAME, doc = new Document(), indexPoly2);\n    w.addDocument(doc);\n    w.forceMerge(1);\n\n    ///// search //////\n    IndexReader reader = w.getReader();\n    w.close();\n    IndexSearcher searcher = newSearcher(reader);\n\n    // [ [0, 0], [5, 5], [7, 7] ]\n    Line searchLine = new Line(new double[] {0, 5, 7}, new double[] {0, 5, 7});\n\n\n    Query q = LatLonShape.newLineQuery(FIELDNAME, QueryRelation.INTERSECTS, searchLine);\n    assertEquals(2, searcher.count(q));\n\n    IOUtils.close(w, reader, dir);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b945b8f5bba0303382bc69d60c0c287714f23328","date":1576586294,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonShape#testLUCENE9055().mjava","pathOld":"/dev/null","sourceNew":"  public void testLUCENE9055() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    // test polygons:\n    //[5, 5], [10, 6], [10, 10], [5, 10], [5, 5] ]\n    Polygon indexPoly1 = new Polygon(\n        new double[] {5d, 6d, 10d, 10d, 5d},\n        new double[] {5d, 10d, 10d, 5d, 5d}\n    );\n\n    // [ [6, 6], [9, 6], [9, 9], [6, 9], [6, 6] ]\n    Polygon indexPoly2 = new Polygon(\n        new double[] {6d, 6d, 9d, 9d, 6d},\n        new double[] {6d, 9d, 9d, 6d, 6d}\n    );\n\n    // index polygons:\n    Document doc;\n    addPolygonsToDoc(FIELDNAME, doc = new Document(), indexPoly1);\n    w.addDocument(doc);\n    addPolygonsToDoc(FIELDNAME, doc = new Document(), indexPoly2);\n    w.addDocument(doc);\n    w.forceMerge(1);\n\n    ///// search //////\n    IndexReader reader = w.getReader();\n    w.close();\n    IndexSearcher searcher = newSearcher(reader);\n\n    // [ [0, 0], [5, 5], [7, 7] ]\n    Line searchLine = new Line(new double[] {0, 5, 7}, new double[] {0, 5, 7});\n\n\n    Query q = LatLonShape.newLineQuery(FIELDNAME, QueryRelation.INTERSECTS, searchLine);\n    assertEquals(2, searcher.count(q));\n\n    IOUtils.close(w, reader, dir);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09c1e6d465800c73af60624bf9d4459a19f7940c","date":1579293280,"type":5,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/document/TestLatLonShape#testLUCENE9055().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonShape#testLUCENE9055().mjava","sourceNew":"  public void testLUCENE9055() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    // test polygons:\n    //[5, 5], [10, 6], [10, 10], [5, 10], [5, 5] ]\n    Polygon indexPoly1 = new Polygon(\n        new double[] {5d, 6d, 10d, 10d, 5d},\n        new double[] {5d, 10d, 10d, 5d, 5d}\n    );\n\n    // [ [6, 6], [9, 6], [9, 9], [6, 9], [6, 6] ]\n    Polygon indexPoly2 = new Polygon(\n        new double[] {6d, 6d, 9d, 9d, 6d},\n        new double[] {6d, 9d, 9d, 6d, 6d}\n    );\n\n    // index polygons:\n    Document doc;\n    addPolygonsToDoc(FIELDNAME, doc = new Document(), indexPoly1);\n    w.addDocument(doc);\n    addPolygonsToDoc(FIELDNAME, doc = new Document(), indexPoly2);\n    w.addDocument(doc);\n    w.forceMerge(1);\n\n    ///// search //////\n    IndexReader reader = w.getReader();\n    w.close();\n    IndexSearcher searcher = newSearcher(reader);\n\n    // [ [0, 0], [5, 5], [7, 7] ]\n    Line searchLine = new Line(new double[] {0, 5, 7}, new double[] {0, 5, 7});\n\n\n    Query q = LatLonShape.newLineQuery(FIELDNAME, QueryRelation.INTERSECTS, searchLine);\n    assertEquals(2, searcher.count(q));\n\n    IOUtils.close(w, reader, dir);\n  }\n\n","sourceOld":"  public void testLUCENE9055() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    // test polygons:\n    //[5, 5], [10, 6], [10, 10], [5, 10], [5, 5] ]\n    Polygon indexPoly1 = new Polygon(\n        new double[] {5d, 6d, 10d, 10d, 5d},\n        new double[] {5d, 10d, 10d, 5d, 5d}\n    );\n\n    // [ [6, 6], [9, 6], [9, 9], [6, 9], [6, 6] ]\n    Polygon indexPoly2 = new Polygon(\n        new double[] {6d, 6d, 9d, 9d, 6d},\n        new double[] {6d, 9d, 9d, 6d, 6d}\n    );\n\n    // index polygons:\n    Document doc;\n    addPolygonsToDoc(FIELDNAME, doc = new Document(), indexPoly1);\n    w.addDocument(doc);\n    addPolygonsToDoc(FIELDNAME, doc = new Document(), indexPoly2);\n    w.addDocument(doc);\n    w.forceMerge(1);\n\n    ///// search //////\n    IndexReader reader = w.getReader();\n    w.close();\n    IndexSearcher searcher = newSearcher(reader);\n\n    // [ [0, 0], [5, 5], [7, 7] ]\n    Line searchLine = new Line(new double[] {0, 5, 7}, new double[] {0, 5, 7});\n\n\n    Query q = LatLonShape.newLineQuery(FIELDNAME, QueryRelation.INTERSECTS, searchLine);\n    assertEquals(2, searcher.count(q));\n\n    IOUtils.close(w, reader, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"908e262be655c65579ec6d94f228d47b663da975":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"09c1e6d465800c73af60624bf9d4459a19f7940c":["908e262be655c65579ec6d94f228d47b663da975"],"b945b8f5bba0303382bc69d60c0c287714f23328":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","908e262be655c65579ec6d94f228d47b663da975"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["09c1e6d465800c73af60624bf9d4459a19f7940c"]},"commit2Childs":{"908e262be655c65579ec6d94f228d47b663da975":["09c1e6d465800c73af60624bf9d4459a19f7940c","b945b8f5bba0303382bc69d60c0c287714f23328"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["908e262be655c65579ec6d94f228d47b663da975","b945b8f5bba0303382bc69d60c0c287714f23328"],"09c1e6d465800c73af60624bf9d4459a19f7940c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b945b8f5bba0303382bc69d60c0c287714f23328":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b945b8f5bba0303382bc69d60c0c287714f23328","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}