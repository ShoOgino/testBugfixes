{"path":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#initializeMetrics(SolrMetricsContext,String).mjava","commits":[{"id":"c959a64c5b52cc12eb8daa17f4f0ed9cf2dfcaaa","date":1571411704,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#initializeMetrics(SolrMetricsContext,String).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void initializeMetrics(SolrMetricsContext parentContext, String scope) {\n    parentContext.gauge(this, () -> name, true, \"searcherName\", Category.SEARCHER.toString(), scope);\n    parentContext.gauge(this, () -> cachingEnabled, true, \"caching\", Category.SEARCHER.toString(), scope);\n    parentContext.gauge(this, () -> openTime, true, \"openedAt\", Category.SEARCHER.toString(), scope);\n    parentContext.gauge(this, () -> warmupTime, true, \"warmupTime\", Category.SEARCHER.toString(), scope);\n    parentContext.gauge(this, () -> registerTime, true, \"registeredAt\", Category.SEARCHER.toString(), scope);\n    // reader stats\n    parentContext.gauge(this, () -> reader.numDocs(), true, \"numDocs\", Category.SEARCHER.toString(), scope);\n    parentContext.gauge(this, () -> reader.maxDoc(), true, \"maxDoc\", Category.SEARCHER.toString(), scope);\n    parentContext.gauge(this, () -> reader.maxDoc() - reader.numDocs(), true, \"deletedDocs\", Category.SEARCHER.toString(), scope);\n    parentContext.gauge(this, () -> reader.toString(), true, \"reader\", Category.SEARCHER.toString(), scope);\n    parentContext.gauge(this, () -> reader.directory().toString(), true, \"readerDir\", Category.SEARCHER.toString(), scope);\n    parentContext.gauge(this, () -> reader.getVersion(), true, \"indexVersion\", Category.SEARCHER.toString(), scope);\n    // size of the currently opened commit\n    parentContext.gauge(this, () -> {\n      try {\n        Collection<String> files = reader.getIndexCommit().getFileNames();\n        long total = 0;\n        for (String file : files) {\n          total += DirectoryFactory.sizeOf(reader.directory(), file);\n        }\n        return total;\n      } catch (Exception e) {\n        return -1;\n      }\n    }, true, \"indexCommitSize\", Category.SEARCHER.toString(), scope);\n    // statsCache metrics\n    parentContext.gauge(this,\n        new MetricsMap((detailed, map) -> {\n          statsCache.getCacheMetrics().getSnapshot(map::put);\n          map.put(\"statsCacheImpl\", statsCache.getClass().getSimpleName());\n        }), true, \"statsCache\", Category.CACHE.toString(), scope);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c2af5a711bd6e2d33e0221ced0f47ac596ed275","date":1572877903,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#initializeMetrics(SolrMetricsContext,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#initializeMetrics(SolrMetricsContext,String).mjava","sourceNew":"  @Override\n  public void initializeMetrics(SolrMetricsContext parentContext, String scope) {\n    parentContext.gauge(() -> name, true, \"searcherName\", Category.SEARCHER.toString(), scope);\n    parentContext.gauge(() -> cachingEnabled, true, \"caching\", Category.SEARCHER.toString(), scope);\n    parentContext.gauge(() -> openTime, true, \"openedAt\", Category.SEARCHER.toString(), scope);\n    parentContext.gauge(() -> warmupTime, true, \"warmupTime\", Category.SEARCHER.toString(), scope);\n    parentContext.gauge(() -> registerTime, true, \"registeredAt\", Category.SEARCHER.toString(), scope);\n    // reader stats\n    parentContext.gauge(() -> reader.numDocs(), true, \"numDocs\", Category.SEARCHER.toString(), scope);\n    parentContext.gauge(() -> reader.maxDoc(), true, \"maxDoc\", Category.SEARCHER.toString(), scope);\n    parentContext.gauge(() -> reader.maxDoc() - reader.numDocs(), true, \"deletedDocs\", Category.SEARCHER.toString(), scope);\n    parentContext.gauge(() -> reader.toString(), true, \"reader\", Category.SEARCHER.toString(), scope);\n    parentContext.gauge(() -> reader.directory().toString(), true, \"readerDir\", Category.SEARCHER.toString(), scope);\n    parentContext.gauge(() -> reader.getVersion(), true, \"indexVersion\", Category.SEARCHER.toString(), scope);\n    // size of the currently opened commit\n    parentContext.gauge(() -> {\n      try {\n        Collection<String> files = reader.getIndexCommit().getFileNames();\n        long total = 0;\n        for (String file : files) {\n          total += DirectoryFactory.sizeOf(reader.directory(), file);\n        }\n        return total;\n      } catch (Exception e) {\n        return -1;\n      }\n    }, true, \"indexCommitSize\", Category.SEARCHER.toString(), scope);\n    // statsCache metrics\n    parentContext.gauge(\n        new MetricsMap((detailed, map) -> {\n          statsCache.getCacheMetrics().getSnapshot(map::put);\n          map.put(\"statsCacheImpl\", statsCache.getClass().getSimpleName());\n        }), true, \"statsCache\", Category.CACHE.toString(), scope);\n  }\n\n","sourceOld":"  @Override\n  public void initializeMetrics(SolrMetricsContext parentContext, String scope) {\n    parentContext.gauge(this, () -> name, true, \"searcherName\", Category.SEARCHER.toString(), scope);\n    parentContext.gauge(this, () -> cachingEnabled, true, \"caching\", Category.SEARCHER.toString(), scope);\n    parentContext.gauge(this, () -> openTime, true, \"openedAt\", Category.SEARCHER.toString(), scope);\n    parentContext.gauge(this, () -> warmupTime, true, \"warmupTime\", Category.SEARCHER.toString(), scope);\n    parentContext.gauge(this, () -> registerTime, true, \"registeredAt\", Category.SEARCHER.toString(), scope);\n    // reader stats\n    parentContext.gauge(this, () -> reader.numDocs(), true, \"numDocs\", Category.SEARCHER.toString(), scope);\n    parentContext.gauge(this, () -> reader.maxDoc(), true, \"maxDoc\", Category.SEARCHER.toString(), scope);\n    parentContext.gauge(this, () -> reader.maxDoc() - reader.numDocs(), true, \"deletedDocs\", Category.SEARCHER.toString(), scope);\n    parentContext.gauge(this, () -> reader.toString(), true, \"reader\", Category.SEARCHER.toString(), scope);\n    parentContext.gauge(this, () -> reader.directory().toString(), true, \"readerDir\", Category.SEARCHER.toString(), scope);\n    parentContext.gauge(this, () -> reader.getVersion(), true, \"indexVersion\", Category.SEARCHER.toString(), scope);\n    // size of the currently opened commit\n    parentContext.gauge(this, () -> {\n      try {\n        Collection<String> files = reader.getIndexCommit().getFileNames();\n        long total = 0;\n        for (String file : files) {\n          total += DirectoryFactory.sizeOf(reader.directory(), file);\n        }\n        return total;\n      } catch (Exception e) {\n        return -1;\n      }\n    }, true, \"indexCommitSize\", Category.SEARCHER.toString(), scope);\n    // statsCache metrics\n    parentContext.gauge(this,\n        new MetricsMap((detailed, map) -> {\n          statsCache.getCacheMetrics().getSnapshot(map::put);\n          map.put(\"statsCacheImpl\", statsCache.getClass().getSimpleName());\n        }), true, \"statsCache\", Category.CACHE.toString(), scope);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2928e0bbce7a86e62526b5332f7847e29dc7092c","date":1596473896,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#initializeMetrics(SolrMetricsContext,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#initializeMetrics(SolrMetricsContext,String).mjava","sourceNew":"  @Override\n  public void initializeMetrics(SolrMetricsContext parentContext, String scope) {\n    parentContext.gauge(() -> name, true, \"searcherName\", Category.SEARCHER.toString(), scope);\n    parentContext.gauge(() -> cachingEnabled, true, \"caching\", Category.SEARCHER.toString(), scope);\n    parentContext.gauge(() -> openTime, true, \"openedAt\", Category.SEARCHER.toString(), scope);\n    parentContext.gauge(() -> warmupTime, true, \"warmupTime\", Category.SEARCHER.toString(), scope);\n    parentContext.gauge(() -> registerTime, true, \"registeredAt\", Category.SEARCHER.toString(), scope);\n    // reader stats\n    parentContext.gauge(rgauge(-1, () -> reader.numDocs()), true, \"numDocs\", Category.SEARCHER.toString(), scope);\n    parentContext.gauge(rgauge(-1, () -> reader.maxDoc()), true, \"maxDoc\", Category.SEARCHER.toString(), scope);\n    parentContext.gauge(rgauge(-1, () -> reader.maxDoc() - reader.numDocs()), true, \"deletedDocs\", Category.SEARCHER.toString(), scope);\n    parentContext.gauge(rgauge(-1, () -> reader.toString()), true, \"reader\", Category.SEARCHER.toString(), scope);\n    parentContext.gauge(rgauge(\"\", () -> reader.directory().toString()), true, \"readerDir\", Category.SEARCHER.toString(), scope);\n    parentContext.gauge(rgauge(-1, () -> reader.getVersion()), true, \"indexVersion\", Category.SEARCHER.toString(), scope);\n    // size of the currently opened commit\n    parentContext.gauge(() -> {\n      try {\n        Collection<String> files = reader.getIndexCommit().getFileNames();\n        long total = 0;\n        for (String file : files) {\n          total += DirectoryFactory.sizeOf(reader.directory(), file);\n        }\n        return total;\n      } catch (Exception e) {\n        return -1;\n      }\n    }, true, \"indexCommitSize\", Category.SEARCHER.toString(), scope);\n    // statsCache metrics\n    parentContext.gauge(\n        new MetricsMap((detailed, map) -> {\n          statsCache.getCacheMetrics().getSnapshot(map::put);\n          map.put(\"statsCacheImpl\", statsCache.getClass().getSimpleName());\n        }), true, \"statsCache\", Category.CACHE.toString(), scope);\n  }\n\n","sourceOld":"  @Override\n  public void initializeMetrics(SolrMetricsContext parentContext, String scope) {\n    parentContext.gauge(() -> name, true, \"searcherName\", Category.SEARCHER.toString(), scope);\n    parentContext.gauge(() -> cachingEnabled, true, \"caching\", Category.SEARCHER.toString(), scope);\n    parentContext.gauge(() -> openTime, true, \"openedAt\", Category.SEARCHER.toString(), scope);\n    parentContext.gauge(() -> warmupTime, true, \"warmupTime\", Category.SEARCHER.toString(), scope);\n    parentContext.gauge(() -> registerTime, true, \"registeredAt\", Category.SEARCHER.toString(), scope);\n    // reader stats\n    parentContext.gauge(() -> reader.numDocs(), true, \"numDocs\", Category.SEARCHER.toString(), scope);\n    parentContext.gauge(() -> reader.maxDoc(), true, \"maxDoc\", Category.SEARCHER.toString(), scope);\n    parentContext.gauge(() -> reader.maxDoc() - reader.numDocs(), true, \"deletedDocs\", Category.SEARCHER.toString(), scope);\n    parentContext.gauge(() -> reader.toString(), true, \"reader\", Category.SEARCHER.toString(), scope);\n    parentContext.gauge(() -> reader.directory().toString(), true, \"readerDir\", Category.SEARCHER.toString(), scope);\n    parentContext.gauge(() -> reader.getVersion(), true, \"indexVersion\", Category.SEARCHER.toString(), scope);\n    // size of the currently opened commit\n    parentContext.gauge(() -> {\n      try {\n        Collection<String> files = reader.getIndexCommit().getFileNames();\n        long total = 0;\n        for (String file : files) {\n          total += DirectoryFactory.sizeOf(reader.directory(), file);\n        }\n        return total;\n      } catch (Exception e) {\n        return -1;\n      }\n    }, true, \"indexCommitSize\", Category.SEARCHER.toString(), scope);\n    // statsCache metrics\n    parentContext.gauge(\n        new MetricsMap((detailed, map) -> {\n          statsCache.getCacheMetrics().getSnapshot(map::put);\n          map.put(\"statsCacheImpl\", statsCache.getClass().getSimpleName());\n        }), true, \"statsCache\", Category.CACHE.toString(), scope);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"233211c3dbff6f367588be5bbb4ac77f72eae193","date":1602085975,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#initializeMetrics(SolrMetricsContext,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#initializeMetrics(SolrMetricsContext,String).mjava","sourceNew":"  @Override\n  public void initializeMetrics(SolrMetricsContext parentContext, String scope) {\n    parentContext.gauge(() -> name, true, \"searcherName\", Category.SEARCHER.toString(), scope);\n    parentContext.gauge(() -> cachingEnabled, true, \"caching\", Category.SEARCHER.toString(), scope);\n    parentContext.gauge(() -> openTime, true, \"openedAt\", Category.SEARCHER.toString(), scope);\n    parentContext.gauge(() -> warmupTime, true, \"warmupTime\", Category.SEARCHER.toString(), scope);\n    parentContext.gauge(() -> registerTime, true, \"registeredAt\", Category.SEARCHER.toString(), scope);\n    // reader stats\n    parentContext.gauge(rgauge(-1, () -> reader.numDocs()), true, \"numDocs\", Category.SEARCHER.toString(), scope);\n    parentContext.gauge(rgauge(-1, () -> reader.maxDoc()), true, \"maxDoc\", Category.SEARCHER.toString(), scope);\n    parentContext.gauge(rgauge(-1, () -> reader.maxDoc() - reader.numDocs()), true, \"deletedDocs\", Category.SEARCHER.toString(), scope);\n    parentContext.gauge(rgauge(-1, () -> reader.toString()), true, \"reader\", Category.SEARCHER.toString(), scope);\n    parentContext.gauge(rgauge(\"\", () -> reader.directory().toString()), true, \"readerDir\", Category.SEARCHER.toString(), scope);\n    parentContext.gauge(rgauge(-1, () -> reader.getVersion()), true, \"indexVersion\", Category.SEARCHER.toString(), scope);\n    // size of the currently opened commit\n    parentContext.gauge(() -> {\n      try {\n        Collection<String> files = reader.getIndexCommit().getFileNames();\n        long total = 0;\n        for (String file : files) {\n          total += DirectoryFactory.sizeOf(reader.directory(), file);\n        }\n        return total;\n      } catch (Exception e) {\n        return -1;\n      }\n    }, true, \"indexCommitSize\", Category.SEARCHER.toString(), scope);\n    // statsCache metrics\n    parentContext.gauge(\n        new MetricsMap(map -> {\n          statsCache.getCacheMetrics().getSnapshot(map::putNoEx);\n          map.put(\"statsCacheImpl\", statsCache.getClass().getSimpleName());\n        }), true, \"statsCache\", Category.CACHE.toString(), scope);\n  }\n\n","sourceOld":"  @Override\n  public void initializeMetrics(SolrMetricsContext parentContext, String scope) {\n    parentContext.gauge(() -> name, true, \"searcherName\", Category.SEARCHER.toString(), scope);\n    parentContext.gauge(() -> cachingEnabled, true, \"caching\", Category.SEARCHER.toString(), scope);\n    parentContext.gauge(() -> openTime, true, \"openedAt\", Category.SEARCHER.toString(), scope);\n    parentContext.gauge(() -> warmupTime, true, \"warmupTime\", Category.SEARCHER.toString(), scope);\n    parentContext.gauge(() -> registerTime, true, \"registeredAt\", Category.SEARCHER.toString(), scope);\n    // reader stats\n    parentContext.gauge(rgauge(-1, () -> reader.numDocs()), true, \"numDocs\", Category.SEARCHER.toString(), scope);\n    parentContext.gauge(rgauge(-1, () -> reader.maxDoc()), true, \"maxDoc\", Category.SEARCHER.toString(), scope);\n    parentContext.gauge(rgauge(-1, () -> reader.maxDoc() - reader.numDocs()), true, \"deletedDocs\", Category.SEARCHER.toString(), scope);\n    parentContext.gauge(rgauge(-1, () -> reader.toString()), true, \"reader\", Category.SEARCHER.toString(), scope);\n    parentContext.gauge(rgauge(\"\", () -> reader.directory().toString()), true, \"readerDir\", Category.SEARCHER.toString(), scope);\n    parentContext.gauge(rgauge(-1, () -> reader.getVersion()), true, \"indexVersion\", Category.SEARCHER.toString(), scope);\n    // size of the currently opened commit\n    parentContext.gauge(() -> {\n      try {\n        Collection<String> files = reader.getIndexCommit().getFileNames();\n        long total = 0;\n        for (String file : files) {\n          total += DirectoryFactory.sizeOf(reader.directory(), file);\n        }\n        return total;\n      } catch (Exception e) {\n        return -1;\n      }\n    }, true, \"indexCommitSize\", Category.SEARCHER.toString(), scope);\n    // statsCache metrics\n    parentContext.gauge(\n        new MetricsMap((detailed, map) -> {\n          statsCache.getCacheMetrics().getSnapshot(map::put);\n          map.put(\"statsCacheImpl\", statsCache.getClass().getSimpleName());\n        }), true, \"statsCache\", Category.CACHE.toString(), scope);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2928e0bbce7a86e62526b5332f7847e29dc7092c":["7c2af5a711bd6e2d33e0221ced0f47ac596ed275"],"7c2af5a711bd6e2d33e0221ced0f47ac596ed275":["c959a64c5b52cc12eb8daa17f4f0ed9cf2dfcaaa"],"c959a64c5b52cc12eb8daa17f4f0ed9cf2dfcaaa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"233211c3dbff6f367588be5bbb4ac77f72eae193":["2928e0bbce7a86e62526b5332f7847e29dc7092c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["233211c3dbff6f367588be5bbb4ac77f72eae193"]},"commit2Childs":{"2928e0bbce7a86e62526b5332f7847e29dc7092c":["233211c3dbff6f367588be5bbb4ac77f72eae193"],"7c2af5a711bd6e2d33e0221ced0f47ac596ed275":["2928e0bbce7a86e62526b5332f7847e29dc7092c"],"c959a64c5b52cc12eb8daa17f4f0ed9cf2dfcaaa":["7c2af5a711bd6e2d33e0221ced0f47ac596ed275"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c959a64c5b52cc12eb8daa17f4f0ed9cf2dfcaaa"],"233211c3dbff6f367588be5bbb4ac77f72eae193":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}