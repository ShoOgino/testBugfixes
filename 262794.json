{"path":"modules/analysis/common/src/java/org/apache/lucene/analysis/cz/CzechStemmer#stem(char[],int).mjava","commits":[{"id":"0f080986da691a3bba7b757f43ab72cdc82b57ce","date":1273069619,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/cz/CzechStemmer#stem(char[],int).mjava","pathOld":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/cz/CzechStemmer#stem(char[],int).mjava","sourceNew":"  /**\n   * Stem an input buffer of Czech text.\n   * \n   * @param s input buffer\n   * @param len length of input buffer\n   * @return length of input buffer after normalization\n   * \n   * <p><b>NOTE</b>: Input is expected to be in lowercase, \n   * but with diacritical marks</p>\n   */\n  public int stem(char s[], int len) {\n    len = removeCase(s, len);\n    len = removePossessives(s, len);\n    len = normalize(s, len);\n    return len;\n  }\n\n","sourceOld":"  /**\n   * Stem an input buffer of Czech text.\n   * \n   * @param s input buffer\n   * @param len length of input buffer\n   * @return length of input buffer after normalization\n   * \n   * <p><b>NOTE</b>: Input is expected to be in lowercase, \n   * but with diacritical marks</p>\n   */\n  public int stem(char s[], int len) {\n    len = removeCase(s, len);\n    len = removePossessives(s, len);\n    len = normalize(s, len);\n    return len;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c02a88c5281d230b9318dc19e6971dfd21778227","date":1332718844,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/cz/CzechStemmer#stem(char[],int).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/cz/CzechStemmer#stem(char[],int).mjava","sourceNew":"  /**\n   * Stem an input buffer of Czech text.\n   * \n   * @param s input buffer\n   * @param len length of input buffer\n   * @return length of input buffer after normalization\n   * \n   * <p><b>NOTE</b>: Input is expected to be in lowercase, \n   * but with diacritical marks</p>\n   */\n  public int stem(char s[], int len) {\n    len = removeCase(s, len);\n    len = removePossessives(s, len);\n    if (len > 0) {\n      len = normalize(s, len);\n    }\n    return len;\n  }\n\n","sourceOld":"  /**\n   * Stem an input buffer of Czech text.\n   * \n   * @param s input buffer\n   * @param len length of input buffer\n   * @return length of input buffer after normalization\n   * \n   * <p><b>NOTE</b>: Input is expected to be in lowercase, \n   * but with diacritical marks</p>\n   */\n  public int stem(char s[], int len) {\n    len = removeCase(s, len);\n    len = removePossessives(s, len);\n    len = normalize(s, len);\n    return len;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/cz/CzechStemmer#stem(char[],int).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/cz/CzechStemmer#stem(char[],int).mjava","sourceNew":"  /**\n   * Stem an input buffer of Czech text.\n   * \n   * @param s input buffer\n   * @param len length of input buffer\n   * @return length of input buffer after normalization\n   * \n   * <p><b>NOTE</b>: Input is expected to be in lowercase, \n   * but with diacritical marks</p>\n   */\n  public int stem(char s[], int len) {\n    len = removeCase(s, len);\n    len = removePossessives(s, len);\n    if (len > 0) {\n      len = normalize(s, len);\n    }\n    return len;\n  }\n\n","sourceOld":"  /**\n   * Stem an input buffer of Czech text.\n   * \n   * @param s input buffer\n   * @param len length of input buffer\n   * @return length of input buffer after normalization\n   * \n   * <p><b>NOTE</b>: Input is expected to be in lowercase, \n   * but with diacritical marks</p>\n   */\n  public int stem(char s[], int len) {\n    len = removeCase(s, len);\n    len = removePossessives(s, len);\n    if (len > 0) {\n      len = normalize(s, len);\n    }\n    return len;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["c02a88c5281d230b9318dc19e6971dfd21778227"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c02a88c5281d230b9318dc19e6971dfd21778227":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"c02a88c5281d230b9318dc19e6971dfd21778227":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["c02a88c5281d230b9318dc19e6971dfd21778227"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}