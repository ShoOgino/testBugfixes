{"path":"lucene/core/src/test/org/apache/lucene/index/TestCodecs.Verify#verifyPositions(PositionData[],DocsAndPositionsEnum).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestCodecs.Verify#verifyPositions(PositionData[],DocsAndPositionsEnum).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestCodecs.Verify#verifyPositions(PositionData[],DocsAndPositionsEnum).mjava","sourceNew":"    private void verifyPositions(final PositionData[] positions, final DocsAndPositionsEnum posEnum) throws Throwable {\n      for(int i=0;i<positions.length;i++) {\n        final int pos = posEnum.nextPosition();\n        assertEquals(positions[i].pos, pos);\n        if (positions[i].payload != null) {\n          assertTrue(posEnum.hasPayload());\n          if (TestCodecs.random.nextInt(3) < 2) {\n            // Verify the payload bytes\n            final BytesRef otherPayload = posEnum.getPayload();\n            assertTrue(\"expected=\" + positions[i].payload.toString() + \" got=\" + otherPayload.toString(), positions[i].payload.equals(otherPayload));\n          }\n        } else {\n          assertFalse(posEnum.hasPayload());\n        }\n      }\n    }\n\n","sourceOld":"    private void verifyPositions(final PositionData[] positions, final DocsAndPositionsEnum posEnum) throws Throwable {\n      for(int i=0;i<positions.length;i++) {\n        final int pos = posEnum.nextPosition();\n        assertEquals(positions[i].pos, pos);\n        if (positions[i].payload != null) {\n          assertTrue(posEnum.hasPayload());\n          if (TestCodecs.random.nextInt(3) < 2) {\n            // Verify the payload bytes\n            final BytesRef otherPayload = posEnum.getPayload();\n            assertTrue(\"expected=\" + positions[i].payload.toString() + \" got=\" + otherPayload.toString(), positions[i].payload.equals(otherPayload));\n          }\n        } else {\n          assertFalse(posEnum.hasPayload());\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f08557cdb6c60ac7b88a9342c983a20cd236e74f","date":1330954480,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestCodecs.Verify#verifyPositions(PositionData[],DocsAndPositionsEnum).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestCodecs.Verify#verifyPositions(PositionData[],DocsAndPositionsEnum).mjava","sourceNew":"    private void verifyPositions(final PositionData[] positions, final DocsAndPositionsEnum posEnum) throws Throwable {\n      for(int i=0;i<positions.length;i++) {\n        final int pos = posEnum.nextPosition();\n        assertEquals(positions[i].pos, pos);\n        if (positions[i].payload != null) {\n          assertTrue(posEnum.hasPayload());\n          if (LuceneTestCase.random.nextInt(3) < 2) {\n            // Verify the payload bytes\n            final BytesRef otherPayload = posEnum.getPayload();\n            assertTrue(\"expected=\" + positions[i].payload.toString() + \" got=\" + otherPayload.toString(), positions[i].payload.equals(otherPayload));\n          }\n        } else {\n          assertFalse(posEnum.hasPayload());\n        }\n      }\n    }\n\n","sourceOld":"    private void verifyPositions(final PositionData[] positions, final DocsAndPositionsEnum posEnum) throws Throwable {\n      for(int i=0;i<positions.length;i++) {\n        final int pos = posEnum.nextPosition();\n        assertEquals(positions[i].pos, pos);\n        if (positions[i].payload != null) {\n          assertTrue(posEnum.hasPayload());\n          if (TestCodecs.random.nextInt(3) < 2) {\n            // Verify the payload bytes\n            final BytesRef otherPayload = posEnum.getPayload();\n            assertTrue(\"expected=\" + positions[i].payload.toString() + \" got=\" + otherPayload.toString(), positions[i].payload.equals(otherPayload));\n          }\n        } else {\n          assertFalse(posEnum.hasPayload());\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestCodecs.Verify#verifyPositions(PositionData[],DocsAndPositionsEnum).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestCodecs.Verify#verifyPositions(PositionData[],DocsAndPositionsEnum).mjava","sourceNew":"    private void verifyPositions(final PositionData[] positions, final DocsAndPositionsEnum posEnum) throws Throwable {\n      for(int i=0;i<positions.length;i++) {\n        final int pos = posEnum.nextPosition();\n        assertEquals(positions[i].pos, pos);\n        if (positions[i].payload != null) {\n          assertTrue(posEnum.hasPayload());\n          if (LuceneTestCase.random.nextInt(3) < 2) {\n            // Verify the payload bytes\n            final BytesRef otherPayload = posEnum.getPayload();\n            assertTrue(\"expected=\" + positions[i].payload.toString() + \" got=\" + otherPayload.toString(), positions[i].payload.equals(otherPayload));\n          }\n        } else {\n          assertFalse(posEnum.hasPayload());\n        }\n      }\n    }\n\n","sourceOld":"    private void verifyPositions(final PositionData[] positions, final DocsAndPositionsEnum posEnum) throws Throwable {\n      for(int i=0;i<positions.length;i++) {\n        final int pos = posEnum.nextPosition();\n        assertEquals(positions[i].pos, pos);\n        if (positions[i].payload != null) {\n          assertTrue(posEnum.hasPayload());\n          if (TestCodecs.random.nextInt(3) < 2) {\n            // Verify the payload bytes\n            final BytesRef otherPayload = posEnum.getPayload();\n            assertTrue(\"expected=\" + positions[i].payload.toString() + \" got=\" + otherPayload.toString(), positions[i].payload.equals(otherPayload));\n          }\n        } else {\n          assertFalse(posEnum.hasPayload());\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestCodecs.Verify#verifyPositions(PositionData[],DocsAndPositionsEnum).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestCodecs.Verify#verifyPositions(PositionData[],DocsAndPositionsEnum).mjava","sourceNew":"    private void verifyPositions(final PositionData[] positions, final DocsAndPositionsEnum posEnum) throws Throwable {\n      for(int i=0;i<positions.length;i++) {\n        final int pos = posEnum.nextPosition();\n        assertEquals(positions[i].pos, pos);\n        if (positions[i].payload != null) {\n          assertTrue(posEnum.hasPayload());\n          if (random().nextInt(3) < 2) {\n            // Verify the payload bytes\n            final BytesRef otherPayload = posEnum.getPayload();\n            assertTrue(\"expected=\" + positions[i].payload.toString() + \" got=\" + otherPayload.toString(), positions[i].payload.equals(otherPayload));\n          }\n        } else {\n          assertFalse(posEnum.hasPayload());\n        }\n      }\n    }\n\n","sourceOld":"    private void verifyPositions(final PositionData[] positions, final DocsAndPositionsEnum posEnum) throws Throwable {\n      for(int i=0;i<positions.length;i++) {\n        final int pos = posEnum.nextPosition();\n        assertEquals(positions[i].pos, pos);\n        if (positions[i].payload != null) {\n          assertTrue(posEnum.hasPayload());\n          if (LuceneTestCase.random.nextInt(3) < 2) {\n            // Verify the payload bytes\n            final BytesRef otherPayload = posEnum.getPayload();\n            assertTrue(\"expected=\" + positions[i].payload.toString() + \" got=\" + otherPayload.toString(), positions[i].payload.equals(otherPayload));\n          }\n        } else {\n          assertFalse(posEnum.hasPayload());\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2b4c7e630332c5e9e7d7a70f4ace4b3ffd3fc552","date":1344797146,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestCodecs.Verify#verifyPositions(PositionData[],DocsAndPositionsEnum).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestCodecs.Verify#verifyPositions(PositionData[],DocsAndPositionsEnum).mjava","sourceNew":"    private void verifyPositions(final PositionData[] positions, final DocsAndPositionsEnum posEnum) throws Throwable {\n      for(int i=0;i<positions.length;i++) {\n        final int pos = posEnum.nextPosition();\n        assertEquals(positions[i].pos, pos);\n        if (positions[i].payload != null) {\n          assertNotNull(posEnum.getPayload());\n          if (random().nextInt(3) < 2) {\n            // Verify the payload bytes\n            final BytesRef otherPayload = posEnum.getPayload();\n            assertTrue(\"expected=\" + positions[i].payload.toString() + \" got=\" + otherPayload.toString(), positions[i].payload.equals(otherPayload));\n          }\n        } else {\n          assertNull(posEnum.getPayload());\n        }\n      }\n    }\n\n","sourceOld":"    private void verifyPositions(final PositionData[] positions, final DocsAndPositionsEnum posEnum) throws Throwable {\n      for(int i=0;i<positions.length;i++) {\n        final int pos = posEnum.nextPosition();\n        assertEquals(positions[i].pos, pos);\n        if (positions[i].payload != null) {\n          assertTrue(posEnum.hasPayload());\n          if (random().nextInt(3) < 2) {\n            // Verify the payload bytes\n            final BytesRef otherPayload = posEnum.getPayload();\n            assertTrue(\"expected=\" + positions[i].payload.toString() + \" got=\" + otherPayload.toString(), positions[i].payload.equals(otherPayload));\n          }\n        } else {\n          assertFalse(posEnum.hasPayload());\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7869f64c874ebf7f317d22c00baf2b6857797a6","date":1344856617,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestCodecs.Verify#verifyPositions(PositionData[],DocsAndPositionsEnum).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestCodecs.Verify#verifyPositions(PositionData[],DocsAndPositionsEnum).mjava","sourceNew":"    private void verifyPositions(final PositionData[] positions, final DocsAndPositionsEnum posEnum) throws Throwable {\n      for(int i=0;i<positions.length;i++) {\n        final int pos = posEnum.nextPosition();\n        assertEquals(positions[i].pos, pos);\n        if (positions[i].payload != null) {\n          assertNotNull(posEnum.getPayload());\n          if (random().nextInt(3) < 2) {\n            // Verify the payload bytes\n            final BytesRef otherPayload = posEnum.getPayload();\n            assertTrue(\"expected=\" + positions[i].payload.toString() + \" got=\" + otherPayload.toString(), positions[i].payload.equals(otherPayload));\n          }\n        } else {\n          assertNull(posEnum.getPayload());\n        }\n      }\n    }\n\n","sourceOld":"    private void verifyPositions(final PositionData[] positions, final DocsAndPositionsEnum posEnum) throws Throwable {\n      for(int i=0;i<positions.length;i++) {\n        final int pos = posEnum.nextPosition();\n        assertEquals(positions[i].pos, pos);\n        if (positions[i].payload != null) {\n          assertTrue(posEnum.hasPayload());\n          if (random().nextInt(3) < 2) {\n            // Verify the payload bytes\n            final BytesRef otherPayload = posEnum.getPayload();\n            assertTrue(\"expected=\" + positions[i].payload.toString() + \" got=\" + otherPayload.toString(), positions[i].payload.equals(otherPayload));\n          }\n        } else {\n          assertFalse(posEnum.hasPayload());\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9","date":1344867506,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestCodecs.Verify#verifyPositions(PositionData[],DocsAndPositionsEnum).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestCodecs.Verify#verifyPositions(PositionData[],DocsAndPositionsEnum).mjava","sourceNew":"    private void verifyPositions(final PositionData[] positions, final DocsAndPositionsEnum posEnum) throws Throwable {\n      for(int i=0;i<positions.length;i++) {\n        final int pos = posEnum.nextPosition();\n        assertEquals(positions[i].pos, pos);\n        if (positions[i].payload != null) {\n          assertNotNull(posEnum.getPayload());\n          if (random().nextInt(3) < 2) {\n            // Verify the payload bytes\n            final BytesRef otherPayload = posEnum.getPayload();\n            assertTrue(\"expected=\" + positions[i].payload.toString() + \" got=\" + otherPayload.toString(), positions[i].payload.equals(otherPayload));\n          }\n        } else {\n          assertNull(posEnum.getPayload());\n        }\n      }\n    }\n\n","sourceOld":"    private void verifyPositions(final PositionData[] positions, final DocsAndPositionsEnum posEnum) throws Throwable {\n      for(int i=0;i<positions.length;i++) {\n        final int pos = posEnum.nextPosition();\n        assertEquals(positions[i].pos, pos);\n        if (positions[i].payload != null) {\n          assertTrue(posEnum.hasPayload());\n          if (random().nextInt(3) < 2) {\n            // Verify the payload bytes\n            final BytesRef otherPayload = posEnum.getPayload();\n            assertTrue(\"expected=\" + positions[i].payload.toString() + \" got=\" + otherPayload.toString(), positions[i].payload.equals(otherPayload));\n          }\n        } else {\n          assertFalse(posEnum.hasPayload());\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"51f5280f31484820499077f41fcdfe92d527d9dc","date":1423229122,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestCodecs.Verify#verifyPositions(PositionData[],PostingsEnum).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestCodecs.Verify#verifyPositions(PositionData[],DocsAndPositionsEnum).mjava","sourceNew":"    private void verifyPositions(final PositionData[] positions, final PostingsEnum posEnum) throws Throwable {\n      for(int i=0;i<positions.length;i++) {\n        final int pos = posEnum.nextPosition();\n        assertEquals(positions[i].pos, pos);\n        if (positions[i].payload != null) {\n          assertNotNull(posEnum.getPayload());\n          if (random().nextInt(3) < 2) {\n            // Verify the payload bytes\n            final BytesRef otherPayload = posEnum.getPayload();\n            assertTrue(\"expected=\" + positions[i].payload.toString() + \" got=\" + otherPayload.toString(), positions[i].payload.equals(otherPayload));\n          }\n        } else {\n          assertNull(posEnum.getPayload());\n        }\n      }\n    }\n\n","sourceOld":"    private void verifyPositions(final PositionData[] positions, final DocsAndPositionsEnum posEnum) throws Throwable {\n      for(int i=0;i<positions.length;i++) {\n        final int pos = posEnum.nextPosition();\n        assertEquals(positions[i].pos, pos);\n        if (positions[i].payload != null) {\n          assertNotNull(posEnum.getPayload());\n          if (random().nextInt(3) < 2) {\n            // Verify the payload bytes\n            final BytesRef otherPayload = posEnum.getPayload();\n            assertTrue(\"expected=\" + positions[i].payload.toString() + \" got=\" + otherPayload.toString(), positions[i].payload.equals(otherPayload));\n          }\n        } else {\n          assertNull(posEnum.getPayload());\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7869f64c874ebf7f317d22c00baf2b6857797a6":["629c38c4ae4e303d0617e05fbfe508140b32f0a3","2b4c7e630332c5e9e7d7a70f4ace4b3ffd3fc552"],"2b4c7e630332c5e9e7d7a70f4ace4b3ffd3fc552":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","f08557cdb6c60ac7b88a9342c983a20cd236e74f"],"f08557cdb6c60ac7b88a9342c983a20cd236e74f":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["f08557cdb6c60ac7b88a9342c983a20cd236e74f"],"51f5280f31484820499077f41fcdfe92d527d9dc":["2b4c7e630332c5e9e7d7a70f4ace4b3ffd3fc552"],"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9":["629c38c4ae4e303d0617e05fbfe508140b32f0a3","2b4c7e630332c5e9e7d7a70f4ace4b3ffd3fc552"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["51f5280f31484820499077f41fcdfe92d527d9dc"]},"commit2Childs":{"c7869f64c874ebf7f317d22c00baf2b6857797a6":[],"2b4c7e630332c5e9e7d7a70f4ace4b3ffd3fc552":["c7869f64c874ebf7f317d22c00baf2b6857797a6","51f5280f31484820499077f41fcdfe92d527d9dc","d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","f08557cdb6c60ac7b88a9342c983a20cd236e74f"],"f08557cdb6c60ac7b88a9342c983a20cd236e74f":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["c7869f64c874ebf7f317d22c00baf2b6857797a6","2b4c7e630332c5e9e7d7a70f4ace4b3ffd3fc552","d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9"],"51f5280f31484820499077f41fcdfe92d527d9dc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c7869f64c874ebf7f317d22c00baf2b6857797a6","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}