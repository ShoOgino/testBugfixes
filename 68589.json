{"path":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testSimpleHighlighter().mjava","commits":[{"id":"043c298cb215f13ba7b9b81d20760704e8f93d66","date":1107566743,"type":1,"author":"Erik Hatcher","isMerge":false,"pathNew":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testSimpleHighlighter().mjava","pathOld":"sandbox/contributions/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testSimpleHighlighter().mjava","sourceNew":"\tpublic void testSimpleHighlighter() throws Exception\n\t{\n\t\tdoSearching(\"Kennedy\");\n\t\tHighlighter highlighter =\tnew Highlighter(new QueryScorer(query));\n\t\thighlighter.setTextFragmenter(new SimpleFragmenter(40));\n\t\tint maxNumFragmentsRequired = 2;\n\t\tfor (int i = 0; i < hits.length(); i++)\n\t\t{\n\t\t\tString text = hits.doc(i).get(FIELD_NAME);\n\t\t\tTokenStream tokenStream=analyzer.tokenStream(FIELD_NAME,new StringReader(text));\n\n\t\t\tString result =\n\t\t\t\thighlighter.getBestFragments(tokenStream,text,maxNumFragmentsRequired, \"...\");\n\t\t\tSystem.out.println(\"\\t\" + result);\n\t\t}\n\t\t//Not sure we can assert anything here - just running to check we dont throw any exceptions\n\t}\n\n","sourceOld":"\tpublic void testSimpleHighlighter() throws Exception\n\t{\n\t\tdoSearching(\"Kennedy\");\n\t\tHighlighter highlighter =\tnew Highlighter(new QueryScorer(query));\n\t\thighlighter.setTextFragmenter(new SimpleFragmenter(40));\n\t\tint maxNumFragmentsRequired = 2;\n\t\tfor (int i = 0; i < hits.length(); i++)\n\t\t{\n\t\t\tString text = hits.doc(i).get(FIELD_NAME);\n\t\t\tTokenStream tokenStream=analyzer.tokenStream(FIELD_NAME,new StringReader(text));\n\n\t\t\tString result =\n\t\t\t\thighlighter.getBestFragments(tokenStream,text,maxNumFragmentsRequired, \"...\");\n\t\t\tSystem.out.println(\"\\t\" + result);\n\t\t}\n\t\t//Not sure we can assert anything here - just running to check we dont throw any exceptions\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"296b8b38a87feb478921f77834a2302dfe77641c","date":1209506838,"type":3,"author":"Mark Harwood","isMerge":false,"pathNew":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testSimpleHighlighter().mjava","pathOld":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testSimpleHighlighter().mjava","sourceNew":"  public void testSimpleHighlighter() throws Exception {\n    doSearching(\"Kennedy\");\n    Highlighter highlighter = new Highlighter(new QueryScorer(query));\n    highlighter.setTextFragmenter(new SimpleFragmenter(40));\n    int maxNumFragmentsRequired = 2;\n    for (int i = 0; i < hits.length(); i++) {\n      String text = hits.doc(i).get(FIELD_NAME);\n      TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(text));\n\n      String result = highlighter.getBestFragments(tokenStream, text, maxNumFragmentsRequired,\n          \"...\");\n      System.out.println(\"\\t\" + result);\n    }\n    // Not sure we can assert anything here - just running to check we dont\n    // throw any exceptions\n  }\n\n","sourceOld":"\tpublic void testSimpleHighlighter() throws Exception\n\t{\n\t\tdoSearching(\"Kennedy\");\n\t\tHighlighter highlighter =\tnew Highlighter(new QueryScorer(query));\n\t\thighlighter.setTextFragmenter(new SimpleFragmenter(40));\n\t\tint maxNumFragmentsRequired = 2;\n\t\tfor (int i = 0; i < hits.length(); i++)\n\t\t{\n\t\t\tString text = hits.doc(i).get(FIELD_NAME);\n\t\t\tTokenStream tokenStream=analyzer.tokenStream(FIELD_NAME,new StringReader(text));\n\n\t\t\tString result =\n\t\t\t\thighlighter.getBestFragments(tokenStream,text,maxNumFragmentsRequired, \"...\");\n\t\t\tSystem.out.println(\"\\t\" + result);\n\t\t}\n\t\t//Not sure we can assert anything here - just running to check we dont throw any exceptions\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"943c3f9cf96b8df37f4273d66a66182e2a669467","date":1249394171,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testSimpleHighlighter().mjava","pathOld":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testSimpleHighlighter().mjava","sourceNew":"  public void testSimpleHighlighter() throws Exception {\n    doSearching(\"Kennedy\");\n    Highlighter highlighter = new Highlighter(new QueryTermScorer(query));\n    highlighter.setTextFragmenter(new SimpleFragmenter(40));\n    int maxNumFragmentsRequired = 2;\n    for (int i = 0; i < hits.length(); i++) {\n      String text = hits.doc(i).get(FIELD_NAME);\n      TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(text));\n\n      String result = highlighter.getBestFragments(tokenStream, text, maxNumFragmentsRequired,\n          \"...\");\n      System.out.println(\"\\t\" + result);\n    }\n    // Not sure we can assert anything here - just running to check we dont\n    // throw any exceptions\n  }\n\n","sourceOld":"  public void testSimpleHighlighter() throws Exception {\n    doSearching(\"Kennedy\");\n    Highlighter highlighter = new Highlighter(new QueryScorer(query));\n    highlighter.setTextFragmenter(new SimpleFragmenter(40));\n    int maxNumFragmentsRequired = 2;\n    for (int i = 0; i < hits.length(); i++) {\n      String text = hits.doc(i).get(FIELD_NAME);\n      TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(text));\n\n      String result = highlighter.getBestFragments(tokenStream, text, maxNumFragmentsRequired,\n          \"...\");\n      System.out.println(\"\\t\" + result);\n    }\n    // Not sure we can assert anything here - just running to check we dont\n    // throw any exceptions\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c16ba100a31d292b7b4c893a3cdf1994e75a3201","date":1249608645,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testSimpleQueryTermScorerHighlighter().mjava","pathOld":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testSimpleHighlighter().mjava","sourceNew":"  public void testSimpleQueryTermScorerHighlighter() throws Exception {\n    doSearching(\"Kennedy\");\n    Highlighter highlighter = new Highlighter(new QueryTermScorer(query));\n    highlighter.setTextFragmenter(new SimpleFragmenter(40));\n    int maxNumFragmentsRequired = 2;\n    for (int i = 0; i < hits.length(); i++) {\n      String text = hits.doc(i).get(FIELD_NAME);\n      TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(text));\n\n      String result = highlighter.getBestFragments(tokenStream, text, maxNumFragmentsRequired,\n          \"...\");\n      System.out.println(\"\\t\" + result);\n    }\n    // Not sure we can assert anything here - just running to check we dont\n    // throw any exceptions\n  }\n\n","sourceOld":"  public void testSimpleHighlighter() throws Exception {\n    doSearching(\"Kennedy\");\n    Highlighter highlighter = new Highlighter(new QueryTermScorer(query));\n    highlighter.setTextFragmenter(new SimpleFragmenter(40));\n    int maxNumFragmentsRequired = 2;\n    for (int i = 0; i < hits.length(); i++) {\n      String text = hits.doc(i).get(FIELD_NAME);\n      TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(text));\n\n      String result = highlighter.getBestFragments(tokenStream, text, maxNumFragmentsRequired,\n          \"...\");\n      System.out.println(\"\\t\" + result);\n    }\n    // Not sure we can assert anything here - just running to check we dont\n    // throw any exceptions\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"043c298cb215f13ba7b9b81d20760704e8f93d66":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c16ba100a31d292b7b4c893a3cdf1994e75a3201":["943c3f9cf96b8df37f4273d66a66182e2a669467"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"943c3f9cf96b8df37f4273d66a66182e2a669467":["296b8b38a87feb478921f77834a2302dfe77641c"],"296b8b38a87feb478921f77834a2302dfe77641c":["043c298cb215f13ba7b9b81d20760704e8f93d66"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c16ba100a31d292b7b4c893a3cdf1994e75a3201"]},"commit2Childs":{"043c298cb215f13ba7b9b81d20760704e8f93d66":["296b8b38a87feb478921f77834a2302dfe77641c"],"c16ba100a31d292b7b4c893a3cdf1994e75a3201":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["043c298cb215f13ba7b9b81d20760704e8f93d66"],"943c3f9cf96b8df37f4273d66a66182e2a669467":["c16ba100a31d292b7b4c893a3cdf1994e75a3201"],"296b8b38a87feb478921f77834a2302dfe77641c":["943c3f9cf96b8df37f4273d66a66182e2a669467"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}