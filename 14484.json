{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSegmentInfoFormat#read(Directory,String,IOContext).mjava","commits":[{"id":"e2fe60a17a7a0cfd101b1169acf089221bc6c166","date":1412767493,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSegmentInfoFormat#read(Directory,String,IOContext).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSegmentInfoReader#read(Directory,String,IOContext).mjava","sourceNew":"  @Override\n  public SegmentInfo read(Directory directory, String segmentName, IOContext context) throws IOException {\n    BytesRefBuilder scratch = new BytesRefBuilder();\n    String segFileName = IndexFileNames.segmentFileName(segmentName, \"\", SimpleTextSegmentInfoFormat.SI_EXTENSION);\n    ChecksumIndexInput input = directory.openChecksumInput(segFileName, context);\n    boolean success = false;\n    try {\n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_VERSION);\n      final Version version;\n      try {\n        version = Version.parse(readString(SI_VERSION.length, scratch));\n      } catch (ParseException pe) {\n        throw new CorruptIndexException(\"unable to parse version string: \" + pe.getMessage(), input, pe);\n      }\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_DOCCOUNT);\n      final int docCount = Integer.parseInt(readString(SI_DOCCOUNT.length, scratch));\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_USECOMPOUND);\n      final boolean isCompoundFile = Boolean.parseBoolean(readString(SI_USECOMPOUND.length, scratch));\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_NUM_DIAG);\n      int numDiag = Integer.parseInt(readString(SI_NUM_DIAG.length, scratch));\n      Map<String,String> diagnostics = new HashMap<>();\n\n      for (int i = 0; i < numDiag; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_DIAG_KEY);\n        String key = readString(SI_DIAG_KEY.length, scratch);\n      \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_DIAG_VALUE);\n        String value = readString(SI_DIAG_VALUE.length, scratch);\n        diagnostics.put(key, value);\n      }\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_NUM_FILES);\n      int numFiles = Integer.parseInt(readString(SI_NUM_FILES.length, scratch));\n      Set<String> files = new HashSet<>();\n\n      for (int i = 0; i < numFiles; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_FILE);\n        String fileName = readString(SI_FILE.length, scratch);\n        files.add(fileName);\n      }\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_ID);\n      final byte[] id = Arrays.copyOfRange(scratch.bytes(), SI_ID.length, scratch.length());\n\n      SimpleTextUtil.checkFooter(input);\n\n      SegmentInfo info = new SegmentInfo(directory, version, segmentName, docCount,\n                                         isCompoundFile, null, diagnostics, id);\n      info.setFiles(files);\n      success = true;\n      return info;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(input);\n      } else {\n        input.close();\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public SegmentInfo read(Directory directory, String segmentName, IOContext context) throws IOException {\n    BytesRefBuilder scratch = new BytesRefBuilder();\n    String segFileName = IndexFileNames.segmentFileName(segmentName, \"\", SimpleTextSegmentInfoFormat.SI_EXTENSION);\n    ChecksumIndexInput input = directory.openChecksumInput(segFileName, context);\n    boolean success = false;\n    try {\n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_VERSION);\n      final Version version;\n      try {\n        version = Version.parse(readString(SI_VERSION.length, scratch));\n      } catch (ParseException pe) {\n        throw new CorruptIndexException(\"unable to parse version string: \" + pe.getMessage(), input, pe);\n      }\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_DOCCOUNT);\n      final int docCount = Integer.parseInt(readString(SI_DOCCOUNT.length, scratch));\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_USECOMPOUND);\n      final boolean isCompoundFile = Boolean.parseBoolean(readString(SI_USECOMPOUND.length, scratch));\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_NUM_DIAG);\n      int numDiag = Integer.parseInt(readString(SI_NUM_DIAG.length, scratch));\n      Map<String,String> diagnostics = new HashMap<>();\n\n      for (int i = 0; i < numDiag; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_DIAG_KEY);\n        String key = readString(SI_DIAG_KEY.length, scratch);\n      \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_DIAG_VALUE);\n        String value = readString(SI_DIAG_VALUE.length, scratch);\n        diagnostics.put(key, value);\n      }\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_NUM_FILES);\n      int numFiles = Integer.parseInt(readString(SI_NUM_FILES.length, scratch));\n      Set<String> files = new HashSet<>();\n\n      for (int i = 0; i < numFiles; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_FILE);\n        String fileName = readString(SI_FILE.length, scratch);\n        files.add(fileName);\n      }\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_ID);\n      final byte[] id = Arrays.copyOfRange(scratch.bytes(), SI_ID.length, scratch.length());\n\n      SimpleTextUtil.checkFooter(input);\n\n      SegmentInfo info = new SegmentInfo(directory, version, segmentName, docCount,\n                                         isCompoundFile, null, diagnostics, id);\n      info.setFiles(files);\n      success = true;\n      return info;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(input);\n      } else {\n        input.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55980207f1977bd1463465de1659b821347e2fa8","date":1413336386,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSegmentInfoFormat#read(Directory,String,IOContext).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSegmentInfoReader#read(Directory,String,IOContext).mjava","sourceNew":"  @Override\n  public SegmentInfo read(Directory directory, String segmentName, IOContext context) throws IOException {\n    BytesRefBuilder scratch = new BytesRefBuilder();\n    String segFileName = IndexFileNames.segmentFileName(segmentName, \"\", SimpleTextSegmentInfoFormat.SI_EXTENSION);\n    ChecksumIndexInput input = directory.openChecksumInput(segFileName, context);\n    boolean success = false;\n    try {\n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_VERSION);\n      final Version version;\n      try {\n        version = Version.parse(readString(SI_VERSION.length, scratch));\n      } catch (ParseException pe) {\n        throw new CorruptIndexException(\"unable to parse version string: \" + pe.getMessage(), input, pe);\n      }\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_DOCCOUNT);\n      final int docCount = Integer.parseInt(readString(SI_DOCCOUNT.length, scratch));\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_USECOMPOUND);\n      final boolean isCompoundFile = Boolean.parseBoolean(readString(SI_USECOMPOUND.length, scratch));\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_NUM_DIAG);\n      int numDiag = Integer.parseInt(readString(SI_NUM_DIAG.length, scratch));\n      Map<String,String> diagnostics = new HashMap<>();\n\n      for (int i = 0; i < numDiag; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_DIAG_KEY);\n        String key = readString(SI_DIAG_KEY.length, scratch);\n      \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_DIAG_VALUE);\n        String value = readString(SI_DIAG_VALUE.length, scratch);\n        diagnostics.put(key, value);\n      }\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_NUM_FILES);\n      int numFiles = Integer.parseInt(readString(SI_NUM_FILES.length, scratch));\n      Set<String> files = new HashSet<>();\n\n      for (int i = 0; i < numFiles; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_FILE);\n        String fileName = readString(SI_FILE.length, scratch);\n        files.add(fileName);\n      }\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_ID);\n      final byte[] id = Arrays.copyOfRange(scratch.bytes(), SI_ID.length, scratch.length());\n\n      SimpleTextUtil.checkFooter(input);\n\n      SegmentInfo info = new SegmentInfo(directory, version, segmentName, docCount,\n                                         isCompoundFile, null, diagnostics, id);\n      info.setFiles(files);\n      success = true;\n      return info;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(input);\n      } else {\n        input.close();\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public SegmentInfo read(Directory directory, String segmentName, IOContext context) throws IOException {\n    BytesRefBuilder scratch = new BytesRefBuilder();\n    String segFileName = IndexFileNames.segmentFileName(segmentName, \"\", SimpleTextSegmentInfoFormat.SI_EXTENSION);\n    ChecksumIndexInput input = directory.openChecksumInput(segFileName, context);\n    boolean success = false;\n    try {\n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_VERSION);\n      final Version version;\n      try {\n        version = Version.parse(readString(SI_VERSION.length, scratch));\n      } catch (ParseException pe) {\n        throw new CorruptIndexException(\"unable to parse version string: \" + pe.getMessage(), input, pe);\n      }\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_DOCCOUNT);\n      final int docCount = Integer.parseInt(readString(SI_DOCCOUNT.length, scratch));\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_USECOMPOUND);\n      final boolean isCompoundFile = Boolean.parseBoolean(readString(SI_USECOMPOUND.length, scratch));\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_NUM_DIAG);\n      int numDiag = Integer.parseInt(readString(SI_NUM_DIAG.length, scratch));\n      Map<String,String> diagnostics = new HashMap<>();\n\n      for (int i = 0; i < numDiag; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_DIAG_KEY);\n        String key = readString(SI_DIAG_KEY.length, scratch);\n      \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_DIAG_VALUE);\n        String value = readString(SI_DIAG_VALUE.length, scratch);\n        diagnostics.put(key, value);\n      }\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_NUM_FILES);\n      int numFiles = Integer.parseInt(readString(SI_NUM_FILES.length, scratch));\n      Set<String> files = new HashSet<>();\n\n      for (int i = 0; i < numFiles; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_FILE);\n        String fileName = readString(SI_FILE.length, scratch);\n        files.add(fileName);\n      }\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_ID);\n      final byte[] id = Arrays.copyOfRange(scratch.bytes(), SI_ID.length, scratch.length());\n\n      SimpleTextUtil.checkFooter(input);\n\n      SegmentInfo info = new SegmentInfo(directory, version, segmentName, docCount,\n                                         isCompoundFile, null, diagnostics, id);\n      info.setFiles(files);\n      success = true;\n      return info;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(input);\n      } else {\n        input.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3384e6013a93e4d11b7d75388693f8d0388602bf","date":1413951663,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSegmentInfoFormat#read(Directory,String,byte[],IOContext).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSegmentInfoFormat#read(Directory,String,IOContext).mjava","sourceNew":"  @Override\n  public SegmentInfo read(Directory directory, String segmentName, byte[] segmentID, IOContext context) throws IOException {\n    BytesRefBuilder scratch = new BytesRefBuilder();\n    String segFileName = IndexFileNames.segmentFileName(segmentName, \"\", SimpleTextSegmentInfoFormat.SI_EXTENSION);\n    ChecksumIndexInput input = directory.openChecksumInput(segFileName, context);\n    boolean success = false;\n    try {\n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_VERSION);\n      final Version version;\n      try {\n        version = Version.parse(readString(SI_VERSION.length, scratch));\n      } catch (ParseException pe) {\n        throw new CorruptIndexException(\"unable to parse version string: \" + pe.getMessage(), input, pe);\n      }\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_DOCCOUNT);\n      final int docCount = Integer.parseInt(readString(SI_DOCCOUNT.length, scratch));\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_USECOMPOUND);\n      final boolean isCompoundFile = Boolean.parseBoolean(readString(SI_USECOMPOUND.length, scratch));\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_NUM_DIAG);\n      int numDiag = Integer.parseInt(readString(SI_NUM_DIAG.length, scratch));\n      Map<String,String> diagnostics = new HashMap<>();\n\n      for (int i = 0; i < numDiag; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_DIAG_KEY);\n        String key = readString(SI_DIAG_KEY.length, scratch);\n      \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_DIAG_VALUE);\n        String value = readString(SI_DIAG_VALUE.length, scratch);\n        diagnostics.put(key, value);\n      }\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_NUM_FILES);\n      int numFiles = Integer.parseInt(readString(SI_NUM_FILES.length, scratch));\n      Set<String> files = new HashSet<>();\n\n      for (int i = 0; i < numFiles; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_FILE);\n        String fileName = readString(SI_FILE.length, scratch);\n        files.add(fileName);\n      }\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_ID);\n      final byte[] id = Arrays.copyOfRange(scratch.bytes(), SI_ID.length, scratch.length());\n      \n      if (!Arrays.equals(segmentID, id)) {\n        throw new CorruptIndexException(\"file mismatch, expected: \" + StringHelper.idToString(segmentID)\n                                                        + \", got: \" + StringHelper.idToString(id), input);\n      }\n\n      SimpleTextUtil.checkFooter(input);\n\n      SegmentInfo info = new SegmentInfo(directory, version, segmentName, docCount,\n                                         isCompoundFile, null, diagnostics, id);\n      info.setFiles(files);\n      success = true;\n      return info;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(input);\n      } else {\n        input.close();\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public SegmentInfo read(Directory directory, String segmentName, IOContext context) throws IOException {\n    BytesRefBuilder scratch = new BytesRefBuilder();\n    String segFileName = IndexFileNames.segmentFileName(segmentName, \"\", SimpleTextSegmentInfoFormat.SI_EXTENSION);\n    ChecksumIndexInput input = directory.openChecksumInput(segFileName, context);\n    boolean success = false;\n    try {\n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_VERSION);\n      final Version version;\n      try {\n        version = Version.parse(readString(SI_VERSION.length, scratch));\n      } catch (ParseException pe) {\n        throw new CorruptIndexException(\"unable to parse version string: \" + pe.getMessage(), input, pe);\n      }\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_DOCCOUNT);\n      final int docCount = Integer.parseInt(readString(SI_DOCCOUNT.length, scratch));\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_USECOMPOUND);\n      final boolean isCompoundFile = Boolean.parseBoolean(readString(SI_USECOMPOUND.length, scratch));\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_NUM_DIAG);\n      int numDiag = Integer.parseInt(readString(SI_NUM_DIAG.length, scratch));\n      Map<String,String> diagnostics = new HashMap<>();\n\n      for (int i = 0; i < numDiag; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_DIAG_KEY);\n        String key = readString(SI_DIAG_KEY.length, scratch);\n      \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_DIAG_VALUE);\n        String value = readString(SI_DIAG_VALUE.length, scratch);\n        diagnostics.put(key, value);\n      }\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_NUM_FILES);\n      int numFiles = Integer.parseInt(readString(SI_NUM_FILES.length, scratch));\n      Set<String> files = new HashSet<>();\n\n      for (int i = 0; i < numFiles; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_FILE);\n        String fileName = readString(SI_FILE.length, scratch);\n        files.add(fileName);\n      }\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_ID);\n      final byte[] id = Arrays.copyOfRange(scratch.bytes(), SI_ID.length, scratch.length());\n\n      SimpleTextUtil.checkFooter(input);\n\n      SegmentInfo info = new SegmentInfo(directory, version, segmentName, docCount,\n                                         isCompoundFile, null, diagnostics, id);\n      info.setFiles(files);\n      success = true;\n      return info;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(input);\n      } else {\n        input.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"db68c63cbfaa8698b9c4475f75ed2b9c9696d238","date":1414118621,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSegmentInfoFormat#read(Directory,String,byte[],IOContext).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSegmentInfoFormat#read(Directory,String,IOContext).mjava","sourceNew":"  @Override\n  public SegmentInfo read(Directory directory, String segmentName, byte[] segmentID, IOContext context) throws IOException {\n    BytesRefBuilder scratch = new BytesRefBuilder();\n    String segFileName = IndexFileNames.segmentFileName(segmentName, \"\", SimpleTextSegmentInfoFormat.SI_EXTENSION);\n    ChecksumIndexInput input = directory.openChecksumInput(segFileName, context);\n    boolean success = false;\n    try {\n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_VERSION);\n      final Version version;\n      try {\n        version = Version.parse(readString(SI_VERSION.length, scratch));\n      } catch (ParseException pe) {\n        throw new CorruptIndexException(\"unable to parse version string: \" + pe.getMessage(), input, pe);\n      }\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_DOCCOUNT);\n      final int docCount = Integer.parseInt(readString(SI_DOCCOUNT.length, scratch));\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_USECOMPOUND);\n      final boolean isCompoundFile = Boolean.parseBoolean(readString(SI_USECOMPOUND.length, scratch));\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_NUM_DIAG);\n      int numDiag = Integer.parseInt(readString(SI_NUM_DIAG.length, scratch));\n      Map<String,String> diagnostics = new HashMap<>();\n\n      for (int i = 0; i < numDiag; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_DIAG_KEY);\n        String key = readString(SI_DIAG_KEY.length, scratch);\n      \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_DIAG_VALUE);\n        String value = readString(SI_DIAG_VALUE.length, scratch);\n        diagnostics.put(key, value);\n      }\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_NUM_FILES);\n      int numFiles = Integer.parseInt(readString(SI_NUM_FILES.length, scratch));\n      Set<String> files = new HashSet<>();\n\n      for (int i = 0; i < numFiles; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_FILE);\n        String fileName = readString(SI_FILE.length, scratch);\n        files.add(fileName);\n      }\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_ID);\n      final byte[] id = Arrays.copyOfRange(scratch.bytes(), SI_ID.length, scratch.length());\n      \n      if (!Arrays.equals(segmentID, id)) {\n        throw new CorruptIndexException(\"file mismatch, expected: \" + StringHelper.idToString(segmentID)\n                                                        + \", got: \" + StringHelper.idToString(id), input);\n      }\n\n      SimpleTextUtil.checkFooter(input);\n\n      SegmentInfo info = new SegmentInfo(directory, version, segmentName, docCount,\n                                         isCompoundFile, null, diagnostics, id);\n      info.setFiles(files);\n      success = true;\n      return info;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(input);\n      } else {\n        input.close();\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public SegmentInfo read(Directory directory, String segmentName, IOContext context) throws IOException {\n    BytesRefBuilder scratch = new BytesRefBuilder();\n    String segFileName = IndexFileNames.segmentFileName(segmentName, \"\", SimpleTextSegmentInfoFormat.SI_EXTENSION);\n    ChecksumIndexInput input = directory.openChecksumInput(segFileName, context);\n    boolean success = false;\n    try {\n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_VERSION);\n      final Version version;\n      try {\n        version = Version.parse(readString(SI_VERSION.length, scratch));\n      } catch (ParseException pe) {\n        throw new CorruptIndexException(\"unable to parse version string: \" + pe.getMessage(), input, pe);\n      }\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_DOCCOUNT);\n      final int docCount = Integer.parseInt(readString(SI_DOCCOUNT.length, scratch));\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_USECOMPOUND);\n      final boolean isCompoundFile = Boolean.parseBoolean(readString(SI_USECOMPOUND.length, scratch));\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_NUM_DIAG);\n      int numDiag = Integer.parseInt(readString(SI_NUM_DIAG.length, scratch));\n      Map<String,String> diagnostics = new HashMap<>();\n\n      for (int i = 0; i < numDiag; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_DIAG_KEY);\n        String key = readString(SI_DIAG_KEY.length, scratch);\n      \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_DIAG_VALUE);\n        String value = readString(SI_DIAG_VALUE.length, scratch);\n        diagnostics.put(key, value);\n      }\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_NUM_FILES);\n      int numFiles = Integer.parseInt(readString(SI_NUM_FILES.length, scratch));\n      Set<String> files = new HashSet<>();\n\n      for (int i = 0; i < numFiles; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_FILE);\n        String fileName = readString(SI_FILE.length, scratch);\n        files.add(fileName);\n      }\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_ID);\n      final byte[] id = Arrays.copyOfRange(scratch.bytes(), SI_ID.length, scratch.length());\n\n      SimpleTextUtil.checkFooter(input);\n\n      SegmentInfo info = new SegmentInfo(directory, version, segmentName, docCount,\n                                         isCompoundFile, null, diagnostics, id);\n      info.setFiles(files);\n      success = true;\n      return info;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(input);\n      } else {\n        input.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"e2fe60a17a7a0cfd101b1169acf089221bc6c166":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"55980207f1977bd1463465de1659b821347e2fa8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e2fe60a17a7a0cfd101b1169acf089221bc6c166"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3384e6013a93e4d11b7d75388693f8d0388602bf":["55980207f1977bd1463465de1659b821347e2fa8"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["e2fe60a17a7a0cfd101b1169acf089221bc6c166","3384e6013a93e4d11b7d75388693f8d0388602bf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"]},"commit2Childs":{"e2fe60a17a7a0cfd101b1169acf089221bc6c166":["55980207f1977bd1463465de1659b821347e2fa8","db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"55980207f1977bd1463465de1659b821347e2fa8":["3384e6013a93e4d11b7d75388693f8d0388602bf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e2fe60a17a7a0cfd101b1169acf089221bc6c166","55980207f1977bd1463465de1659b821347e2fa8"],"3384e6013a93e4d11b7d75388693f8d0388602bf":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}