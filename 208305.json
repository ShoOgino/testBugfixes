{"path":"lucene/sandbox/src/test/org/apache/lucene/search/TestBM25FQuery#testAgainstCopyField().mjava","commits":[{"id":"15c07295375e0ec8be1c0ec46de21292455b3af8","date":1542792270,"type":0,"author":"Jim Ferenczi","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/search/TestBM25FQuery#testAgainstCopyField().mjava","pathOld":"/dev/null","sourceNew":"  public void testAgainstCopyField() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, new MockAnalyzer(random()));\n    int numMatch = atLeast(10);\n    int boost1 = Math.max(1, random().nextInt(5));\n    int boost2 = Math.max(1, random().nextInt(5));\n    for (int i = 0; i < numMatch; i++) {\n      Document doc = new Document();\n      if (random().nextBoolean()) {\n        doc.add(new TextField(\"a\", \"baz\", Store.NO));\n        doc.add(new TextField(\"b\", \"baz\", Store.NO));\n        for (int k = 0; k < boost1+boost2; k++) {\n          doc.add(new TextField(\"ab\", \"baz\", Store.NO));\n        }\n        w.addDocument(doc);\n        doc.clear();\n      }\n      int freqA = random().nextInt(5) + 1;\n      for (int j = 0; j < freqA; j++) {\n        doc.add(new TextField(\"a\", \"foo\", Store.NO));\n      }\n      int freqB = random().nextInt(5) + 1;\n      for (int j = 0; j < freqB; j++) {\n        doc.add(new TextField(\"b\", \"foo\", Store.NO));\n      }\n      int freqAB = freqA * boost1 + freqB * boost2;\n      for (int j = 0; j < freqAB; j++) {\n        doc.add(new TextField(\"ab\", \"foo\", Store.NO));\n      }\n      w.addDocument(doc);\n    }\n    IndexReader reader = w.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setSimilarity(new BM25Similarity());\n    BM25FQuery query = new BM25FQuery.Builder()\n        .addField(\"a\", (float) boost1)\n        .addField(\"b\", (float) boost2)\n        .addTerm(new BytesRef(\"foo\"))\n        .addTerm(new BytesRef(\"foo\"))\n        .build();\n\n    TopScoreDocCollector bm25FCollector = TopScoreDocCollector.create(numMatch, null, Integer.MAX_VALUE);\n    searcher.search(query, bm25FCollector);\n    TopDocs bm25FTopDocs = bm25FCollector.topDocs();\n    assertEquals(numMatch, bm25FTopDocs.totalHits.value);\n    TopScoreDocCollector collector = TopScoreDocCollector.create(reader.numDocs(), null, Integer.MAX_VALUE);\n    searcher.search(new TermQuery(new Term(\"ab\", \"foo\")), collector);\n    TopDocs topDocs = collector.topDocs();\n    CheckHits.checkEqual(query, topDocs.scoreDocs, bm25FTopDocs.scoreDocs);\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"15c07295375e0ec8be1c0ec46de21292455b3af8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["15c07295375e0ec8be1c0ec46de21292455b3af8"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["15c07295375e0ec8be1c0ec46de21292455b3af8"],"15c07295375e0ec8be1c0ec46de21292455b3af8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}