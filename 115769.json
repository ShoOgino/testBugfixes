{"path":"modules/analysis/common/src/java/org/apache/lucene/analysis/shingle/ShingleMatrixFilter#updateToken(Token,List[Token],int,List[Row],List[Token]).mjava","commits":[{"id":"0f080986da691a3bba7b757f43ab72cdc82b57ce","date":1273069619,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/shingle/ShingleMatrixFilter#updateToken(Token,List[Token],int,List[Row],List[Token]).mjava","pathOld":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/shingle/ShingleMatrixFilter#updateToken(Token,List[Token],int,List[Row],List[Token]).mjava","sourceNew":"  /**\n   * Final touch of a shingle token before it is passed on to the consumer from method {@link #incrementToken()}.\n   *\n   * Calculates and sets type, flags, position increment, start/end offsets and weight.\n   *\n   * @param token Shingle token\n   * @param shingle Tokens used to produce the shingle token.\n   * @param currentPermutationStartOffset Start offset in parameter currentPermutationTokens\n   * @param currentPermutationRows index to Matrix.Column.Row from the position of tokens in parameter currentPermutationTokens\n   * @param currentPermuationTokens tokens of the current permutation of rows in the matrix.\n   */\n  public void updateToken(Token token, List<Token> shingle, int currentPermutationStartOffset, List<Row> currentPermutationRows, List<Token> currentPermuationTokens) {\n    token.setType(ShingleMatrixFilter.class.getName());\n    token.setFlags(0);\n    token.setPositionIncrement(1);\n    token.setStartOffset(shingle.get(0).startOffset());\n    token.setEndOffset(shingle.get(shingle.size() - 1).endOffset());\n    settingsCodec.setWeight(token, calculateShingleWeight(token, shingle, currentPermutationStartOffset, currentPermutationRows, currentPermuationTokens));\n  }\n\n","sourceOld":"  /**\n   * Final touch of a shingle token before it is passed on to the consumer from method {@link #incrementToken()}.\n   *\n   * Calculates and sets type, flags, position increment, start/end offsets and weight.\n   *\n   * @param token Shingle token\n   * @param shingle Tokens used to produce the shingle token.\n   * @param currentPermutationStartOffset Start offset in parameter currentPermutationTokens\n   * @param currentPermutationRows index to Matrix.Column.Row from the position of tokens in parameter currentPermutationTokens\n   * @param currentPermuationTokens tokens of the current permutation of rows in the matrix.\n   */\n  public void updateToken(Token token, List<Token> shingle, int currentPermutationStartOffset, List<Row> currentPermutationRows, List<Token> currentPermuationTokens) {\n    token.setType(ShingleMatrixFilter.class.getName());\n    token.setFlags(0);\n    token.setPositionIncrement(1);\n    token.setStartOffset(shingle.get(0).startOffset());\n    token.setEndOffset(shingle.get(shingle.size() - 1).endOffset());\n    settingsCodec.setWeight(token, calculateShingleWeight(token, shingle, currentPermutationStartOffset, currentPermutationRows, currentPermuationTokens));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aacf7f8a9f6ea920c7ca39f86371d4e25397121b","date":1297761846,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/shingle/ShingleMatrixFilter#updateToken(Token,List[Token],int,List[Row],List[Token]).mjava","sourceNew":null,"sourceOld":"  /**\n   * Final touch of a shingle token before it is passed on to the consumer from method {@link #incrementToken()}.\n   *\n   * Calculates and sets type, flags, position increment, start/end offsets and weight.\n   *\n   * @param token Shingle token\n   * @param shingle Tokens used to produce the shingle token.\n   * @param currentPermutationStartOffset Start offset in parameter currentPermutationTokens\n   * @param currentPermutationRows index to Matrix.Column.Row from the position of tokens in parameter currentPermutationTokens\n   * @param currentPermuationTokens tokens of the current permutation of rows in the matrix.\n   */\n  public void updateToken(Token token, List<Token> shingle, int currentPermutationStartOffset, List<Row> currentPermutationRows, List<Token> currentPermuationTokens) {\n    token.setType(ShingleMatrixFilter.class.getName());\n    token.setFlags(0);\n    token.setPositionIncrement(1);\n    token.setStartOffset(shingle.get(0).startOffset());\n    token.setEndOffset(shingle.get(shingle.size() - 1).endOffset());\n    settingsCodec.setWeight(token, calculateShingleWeight(token, shingle, currentPermutationStartOffset, currentPermutationRows, currentPermuationTokens));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f1bdbf92da222965b46c0a942c3857ba56e5c638","date":1298297608,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/shingle/ShingleMatrixFilter#updateToken(Token,List[Token],int,List[Row],List[Token]).mjava","sourceNew":null,"sourceOld":"  /**\n   * Final touch of a shingle token before it is passed on to the consumer from method {@link #incrementToken()}.\n   *\n   * Calculates and sets type, flags, position increment, start/end offsets and weight.\n   *\n   * @param token Shingle token\n   * @param shingle Tokens used to produce the shingle token.\n   * @param currentPermutationStartOffset Start offset in parameter currentPermutationTokens\n   * @param currentPermutationRows index to Matrix.Column.Row from the position of tokens in parameter currentPermutationTokens\n   * @param currentPermuationTokens tokens of the current permutation of rows in the matrix.\n   */\n  public void updateToken(Token token, List<Token> shingle, int currentPermutationStartOffset, List<Row> currentPermutationRows, List<Token> currentPermuationTokens) {\n    token.setType(ShingleMatrixFilter.class.getName());\n    token.setFlags(0);\n    token.setPositionIncrement(1);\n    token.setStartOffset(shingle.get(0).startOffset());\n    token.setEndOffset(shingle.get(shingle.size() - 1).endOffset());\n    settingsCodec.setWeight(token, calculateShingleWeight(token, shingle, currentPermutationStartOffset, currentPermutationRows, currentPermuationTokens));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/shingle/ShingleMatrixFilter#updateToken(Token,List[Token],int,List[Row],List[Token]).mjava","sourceNew":null,"sourceOld":"  /**\n   * Final touch of a shingle token before it is passed on to the consumer from method {@link #incrementToken()}.\n   *\n   * Calculates and sets type, flags, position increment, start/end offsets and weight.\n   *\n   * @param token Shingle token\n   * @param shingle Tokens used to produce the shingle token.\n   * @param currentPermutationStartOffset Start offset in parameter currentPermutationTokens\n   * @param currentPermutationRows index to Matrix.Column.Row from the position of tokens in parameter currentPermutationTokens\n   * @param currentPermuationTokens tokens of the current permutation of rows in the matrix.\n   */\n  public void updateToken(Token token, List<Token> shingle, int currentPermutationStartOffset, List<Row> currentPermutationRows, List<Token> currentPermuationTokens) {\n    token.setType(ShingleMatrixFilter.class.getName());\n    token.setFlags(0);\n    token.setPositionIncrement(1);\n    token.setStartOffset(shingle.get(0).startOffset());\n    token.setEndOffset(shingle.get(shingle.size() - 1).endOffset());\n    settingsCodec.setWeight(token, calculateShingleWeight(token, shingle, currentPermutationStartOffset, currentPermutationRows, currentPermuationTokens));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f1bdbf92da222965b46c0a942c3857ba56e5c638":["0f080986da691a3bba7b757f43ab72cdc82b57ce","aacf7f8a9f6ea920c7ca39f86371d4e25397121b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"aacf7f8a9f6ea920c7ca39f86371d4e25397121b":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["0f080986da691a3bba7b757f43ab72cdc82b57ce","aacf7f8a9f6ea920c7ca39f86371d4e25397121b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["aacf7f8a9f6ea920c7ca39f86371d4e25397121b"]},"commit2Childs":{"f1bdbf92da222965b46c0a942c3857ba56e5c638":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["f1bdbf92da222965b46c0a942c3857ba56e5c638","aacf7f8a9f6ea920c7ca39f86371d4e25397121b","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"aacf7f8a9f6ea920c7ca39f86371d4e25397121b":["f1bdbf92da222965b46c0a942c3857ba56e5c638","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["f1bdbf92da222965b46c0a942c3857ba56e5c638","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}