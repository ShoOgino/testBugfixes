{"path":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl#getTerms(AtomicReader,String).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl#getTerms(AtomicReader,String).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FieldCacheImpl#getTerms(AtomicReader,String).mjava","sourceNew":"  // TODO: this if DocTermsIndex was already created, we\n  // should share it...\n  public DocTerms getTerms(AtomicReader reader, String field) throws IOException {\n    return getTerms(reader, field, DEFAULT_FASTER_BUT_MORE_RAM);\n  }\n\n","sourceOld":"  // TODO: this if DocTermsIndex was already created, we\n  // should share it...\n  public DocTerms getTerms(AtomicReader reader, String field) throws IOException {\n    return getTerms(reader, field, DEFAULT_FASTER_BUT_MORE_RAM);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4a470c93b2b0f8f51241f52705fc110a01f27ad2","date":1337969379,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl#getTerms(AtomicReader,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl#getTerms(AtomicReader,String).mjava","sourceNew":"  // TODO: this if DocTermsIndex was already created, we\n  // should share it...\n  public DocTerms getTerms(AtomicReader reader, String field) throws IOException {\n    return getTerms(reader, field, PackedInts.FAST);\n  }\n\n","sourceOld":"  // TODO: this if DocTermsIndex was already created, we\n  // should share it...\n  public DocTerms getTerms(AtomicReader reader, String field) throws IOException {\n    return getTerms(reader, field, DEFAULT_FASTER_BUT_MORE_RAM);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2dd9934a49477c83301120ba51827d91eb3606d5","date":1353767072,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl#getTerms(AtomicReader,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl#getTerms(AtomicReader,String).mjava","sourceNew":"  // TODO: this if DocTermsIndex was already created, we\n  // should share it...\n  public BinaryDocValues getTerms(AtomicReader reader, String field) throws IOException {\n    return getTerms(reader, field, PackedInts.FAST);\n  }\n\n","sourceOld":"  // TODO: this if DocTermsIndex was already created, we\n  // should share it...\n  public DocTerms getTerms(AtomicReader reader, String field) throws IOException {\n    return getTerms(reader, field, PackedInts.FAST);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7530de27b87b961b51f01bd1299b7004d46e8823","date":1355236261,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl#getTerms(AtomicReader,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl#getTerms(AtomicReader,String).mjava","sourceNew":"  // TODO: this if DocTermsIndex was already created, we\n  // should share it...\n  @Override\n  public DocTerms getTerms(AtomicReader reader, String field) throws IOException {\n    return getTerms(reader, field, PackedInts.FAST);\n  }\n\n","sourceOld":"  // TODO: this if DocTermsIndex was already created, we\n  // should share it...\n  public DocTerms getTerms(AtomicReader reader, String field) throws IOException {\n    return getTerms(reader, field, PackedInts.FAST);\n  }\n\n","bugFix":null,"bugIntro":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl#getTerms(AtomicReader,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl#getTerms(AtomicReader,String).mjava","sourceNew":"  // TODO: this if DocTermsIndex was already created, we\n  // should share it...\n  public BinaryDocValues getTerms(AtomicReader reader, String field) throws IOException {\n    return getTerms(reader, field, PackedInts.FAST);\n  }\n\n","sourceOld":"  // TODO: this if DocTermsIndex was already created, we\n  // should share it...\n  @Override\n  public DocTerms getTerms(AtomicReader reader, String field) throws IOException {\n    return getTerms(reader, field, PackedInts.FAST);\n  }\n\n","bugFix":["7530de27b87b961b51f01bd1299b7004d46e8823","da6d5ac19a80d65b1e864251f155d30960353b7e"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"87d6f9603307ae2ad642fb01deedf031320fd0c3","date":1377877563,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl#getTerms(AtomicReader,String,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl#getTerms(AtomicReader,String).mjava","sourceNew":"  // TODO: this if DocTermsIndex was already created, we\n  // should share it...\n  public BinaryDocValues getTerms(AtomicReader reader, String field, boolean setDocsWithField) throws IOException {\n    return getTerms(reader, field, setDocsWithField, PackedInts.FAST);\n  }\n\n","sourceOld":"  // TODO: this if DocTermsIndex was already created, we\n  // should share it...\n  public BinaryDocValues getTerms(AtomicReader reader, String field) throws IOException {\n    return getTerms(reader, field, PackedInts.FAST);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d4d69c535930b5cce125cff868d40f6373dc27d4":["7530de27b87b961b51f01bd1299b7004d46e8823","2dd9934a49477c83301120ba51827d91eb3606d5"],"2dd9934a49477c83301120ba51827d91eb3606d5":["4a470c93b2b0f8f51241f52705fc110a01f27ad2"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"87d6f9603307ae2ad642fb01deedf031320fd0c3":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"7530de27b87b961b51f01bd1299b7004d46e8823":["4a470c93b2b0f8f51241f52705fc110a01f27ad2"],"4a470c93b2b0f8f51241f52705fc110a01f27ad2":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["87d6f9603307ae2ad642fb01deedf031320fd0c3"]},"commit2Childs":{"d4d69c535930b5cce125cff868d40f6373dc27d4":["87d6f9603307ae2ad642fb01deedf031320fd0c3"],"2dd9934a49477c83301120ba51827d91eb3606d5":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["4a470c93b2b0f8f51241f52705fc110a01f27ad2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"87d6f9603307ae2ad642fb01deedf031320fd0c3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7530de27b87b961b51f01bd1299b7004d46e8823":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"4a470c93b2b0f8f51241f52705fc110a01f27ad2":["2dd9934a49477c83301120ba51827d91eb3606d5","7530de27b87b961b51f01bd1299b7004d46e8823"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}