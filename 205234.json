{"path":"lucene/core/src/java/org/apache/lucene/store/SleepingLockWrapper#SleepingLockWrapper(Directory,long,long).mjava","commits":[{"id":"f86ce8c7390eeb4b24bceee343195d17e92103a1","date":1434276789,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/SleepingLockWrapper#SleepingLockWrapper(Directory,long,long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SleepingLockWrapper#SleepingLockWrapper(Directory,long,long).mjava","sourceNew":"  /**\n   * Create a new SleepingLockFactory\n   * @param delegate        underlying directory to wrap\n   * @param lockWaitTimeout length of time to wait in milliseconds \n   *                        or {@link #LOCK_OBTAIN_WAIT_FOREVER} to retry forever.\n   * @param pollInterval    poll once per this interval in milliseconds until\n   *                        {@code lockWaitTimeout} is exceeded.\n   */\n  public SleepingLockWrapper(Directory delegate, long lockWaitTimeout, long pollInterval) {\n    super(delegate);\n    this.lockWaitTimeout = lockWaitTimeout;\n    this.pollInterval = pollInterval;\n    if (lockWaitTimeout < 0 && lockWaitTimeout != LOCK_OBTAIN_WAIT_FOREVER) {\n      throw new IllegalArgumentException(\"lockWaitTimeout should be LOCK_OBTAIN_WAIT_FOREVER or a non-negative number (got \" + lockWaitTimeout + \")\");\n    }\n    if (pollInterval < 0) {\n      throw new IllegalArgumentException(\"pollInterval must be a non-negative number (got \" + pollInterval + \")\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Create a new SleepingLockFactory\n   * @param delegate        underlying directory to wrap\n   * @param lockWaitTimeout length of time to wait in milliseconds \n   *                        or {@link #LOCK_OBTAIN_WAIT_FOREVER} to retry forever.\n   * @param pollInterval    poll once per this interval in milliseconds until\n   *                        {@code lockWaitTimeout} is exceeded.\n   */\n  public SleepingLockWrapper(Directory delegate, long lockWaitTimeout, long pollInterval) {\n    super(delegate);\n    this.lockWaitTimeout = lockWaitTimeout;\n    this.pollInterval = pollInterval;\n    if (lockWaitTimeout < 0 && lockWaitTimeout != LOCK_OBTAIN_WAIT_FOREVER) {\n      throw new IllegalArgumentException(\"lockWaitTimeout should be LOCK_OBTAIN_WAIT_FOREVER or a non-negative number (got \" + lockWaitTimeout + \")\");\n    }\n    if (pollInterval < 0) {\n      throw new IllegalArgumentException(\"pollInterval must be a non-negative number (got \" + pollInterval + \")\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f86ce8c7390eeb4b24bceee343195d17e92103a1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f86ce8c7390eeb4b24bceee343195d17e92103a1"]},"commit2Childs":{"f86ce8c7390eeb4b24bceee343195d17e92103a1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f86ce8c7390eeb4b24bceee343195d17e92103a1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}