{"path":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/prefix/WithinPrefixTreeQuery#WithinPrefixTreeQuery(Shape,String,SpatialPrefixTree,int,int,double).mjava","commits":[{"id":"112d77ac8d3e10a362516ad834c9a11d35c94234","date":1456784319,"type":1,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/prefix/WithinPrefixTreeQuery#WithinPrefixTreeQuery(Shape,String,SpatialPrefixTree,int,int,double).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/WithinPrefixTreeQuery#WithinPrefixTreeQuery(Shape,String,SpatialPrefixTree,int,int,double).mjava","sourceNew":"  /**\n   * See {@link AbstractVisitingPrefixTreeQuery#AbstractVisitingPrefixTreeQuery(com.spatial4j.core.shape.Shape, String, org.apache.lucene.spatial.prefix.tree.SpatialPrefixTree, int, int)}.\n   * {@code queryBuffer} is the (minimum) distance beyond the query shape edge\n   * where non-matching documents are looked for so they can be excluded. If\n   * -1 is used then the whole world is examined (a good default for correctness).\n   */\n  public WithinPrefixTreeQuery(Shape queryShape, String fieldName, SpatialPrefixTree grid,\n                               int detailLevel, int prefixGridScanLevel,\n                               double queryBuffer) {\n    super(queryShape, fieldName, grid, detailLevel, prefixGridScanLevel);\n    this.bufferedQueryShape = queryBuffer == -1 ? null : bufferShape(queryShape, queryBuffer);\n  }\n\n","sourceOld":"  /**\n   * See {@link AbstractVisitingPrefixTreeQuery#AbstractVisitingPrefixTreeQuery(com.spatial4j.core.shape.Shape, String, org.apache.lucene.spatial.prefix.tree.SpatialPrefixTree, int, int)}.\n   * {@code queryBuffer} is the (minimum) distance beyond the query shape edge\n   * where non-matching documents are looked for so they can be excluded. If\n   * -1 is used then the whole world is examined (a good default for correctness).\n   */\n  public WithinPrefixTreeQuery(Shape queryShape, String fieldName, SpatialPrefixTree grid,\n                               int detailLevel, int prefixGridScanLevel,\n                               double queryBuffer) {\n    super(queryShape, fieldName, grid, detailLevel, prefixGridScanLevel);\n    this.bufferedQueryShape = queryBuffer == -1 ? null : bufferShape(queryShape, queryBuffer);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af2638813028b254a88b418ebeafb541afb49653","date":1456804822,"type":1,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/prefix/WithinPrefixTreeQuery#WithinPrefixTreeQuery(Shape,String,SpatialPrefixTree,int,int,double).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/WithinPrefixTreeQuery#WithinPrefixTreeQuery(Shape,String,SpatialPrefixTree,int,int,double).mjava","sourceNew":"  /**\n   * See {@link AbstractVisitingPrefixTreeQuery#AbstractVisitingPrefixTreeQuery(com.spatial4j.core.shape.Shape, String, org.apache.lucene.spatial.prefix.tree.SpatialPrefixTree, int, int)}.\n   * {@code queryBuffer} is the (minimum) distance beyond the query shape edge\n   * where non-matching documents are looked for so they can be excluded. If\n   * -1 is used then the whole world is examined (a good default for correctness).\n   */\n  public WithinPrefixTreeQuery(Shape queryShape, String fieldName, SpatialPrefixTree grid,\n                               int detailLevel, int prefixGridScanLevel,\n                               double queryBuffer) {\n    super(queryShape, fieldName, grid, detailLevel, prefixGridScanLevel);\n    this.bufferedQueryShape = queryBuffer == -1 ? null : bufferShape(queryShape, queryBuffer);\n  }\n\n","sourceOld":"  /**\n   * See {@link AbstractVisitingPrefixTreeQuery#AbstractVisitingPrefixTreeQuery(com.spatial4j.core.shape.Shape, String, org.apache.lucene.spatial.prefix.tree.SpatialPrefixTree, int, int)}.\n   * {@code queryBuffer} is the (minimum) distance beyond the query shape edge\n   * where non-matching documents are looked for so they can be excluded. If\n   * -1 is used then the whole world is examined (a good default for correctness).\n   */\n  public WithinPrefixTreeQuery(Shape queryShape, String fieldName, SpatialPrefixTree grid,\n                               int detailLevel, int prefixGridScanLevel,\n                               double queryBuffer) {\n    super(queryShape, fieldName, grid, detailLevel, prefixGridScanLevel);\n    this.bufferedQueryShape = queryBuffer == -1 ? null : bufferShape(queryShape, queryBuffer);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bae0bbf5dfabb3daa76f77f636f38310a28de18a","date":1456970732,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/prefix/WithinPrefixTreeQuery#WithinPrefixTreeQuery(Shape,String,SpatialPrefixTree,int,int,double).mjava","pathOld":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/prefix/WithinPrefixTreeQuery#WithinPrefixTreeQuery(Shape,String,SpatialPrefixTree,int,int,double).mjava","sourceNew":"  /**\n   * See {@link AbstractVisitingPrefixTreeQuery#AbstractVisitingPrefixTreeQuery(org.locationtech.spatial4j.shape.Shape, String, org.apache.lucene.spatial.prefix.tree.SpatialPrefixTree, int, int)}.\n   * {@code queryBuffer} is the (minimum) distance beyond the query shape edge\n   * where non-matching documents are looked for so they can be excluded. If\n   * -1 is used then the whole world is examined (a good default for correctness).\n   */\n  public WithinPrefixTreeQuery(Shape queryShape, String fieldName, SpatialPrefixTree grid,\n                               int detailLevel, int prefixGridScanLevel,\n                               double queryBuffer) {\n    super(queryShape, fieldName, grid, detailLevel, prefixGridScanLevel);\n    this.bufferedQueryShape = queryBuffer == -1 ? null : bufferShape(queryShape, queryBuffer);\n  }\n\n","sourceOld":"  /**\n   * See {@link AbstractVisitingPrefixTreeQuery#AbstractVisitingPrefixTreeQuery(com.spatial4j.core.shape.Shape, String, org.apache.lucene.spatial.prefix.tree.SpatialPrefixTree, int, int)}.\n   * {@code queryBuffer} is the (minimum) distance beyond the query shape edge\n   * where non-matching documents are looked for so they can be excluded. If\n   * -1 is used then the whole world is examined (a good default for correctness).\n   */\n  public WithinPrefixTreeQuery(Shape queryShape, String fieldName, SpatialPrefixTree grid,\n                               int detailLevel, int prefixGridScanLevel,\n                               double queryBuffer) {\n    super(queryShape, fieldName, grid, detailLevel, prefixGridScanLevel);\n    this.bufferedQueryShape = queryBuffer == -1 ? null : bufferShape(queryShape, queryBuffer);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e697e346b573b1b58353f45be00090a4f2de91e7","date":1457002125,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/prefix/WithinPrefixTreeQuery#WithinPrefixTreeQuery(Shape,String,SpatialPrefixTree,int,int,double).mjava","pathOld":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/prefix/WithinPrefixTreeQuery#WithinPrefixTreeQuery(Shape,String,SpatialPrefixTree,int,int,double).mjava","sourceNew":"  /**\n   * See {@link AbstractVisitingPrefixTreeQuery#AbstractVisitingPrefixTreeQuery(org.locationtech.spatial4j.shape.Shape, String, org.apache.lucene.spatial.prefix.tree.SpatialPrefixTree, int, int)}.\n   * {@code queryBuffer} is the (minimum) distance beyond the query shape edge\n   * where non-matching documents are looked for so they can be excluded. If\n   * -1 is used then the whole world is examined (a good default for correctness).\n   */\n  public WithinPrefixTreeQuery(Shape queryShape, String fieldName, SpatialPrefixTree grid,\n                               int detailLevel, int prefixGridScanLevel,\n                               double queryBuffer) {\n    super(queryShape, fieldName, grid, detailLevel, prefixGridScanLevel);\n    this.bufferedQueryShape = queryBuffer == -1 ? null : bufferShape(queryShape, queryBuffer);\n  }\n\n","sourceOld":"  /**\n   * See {@link AbstractVisitingPrefixTreeQuery#AbstractVisitingPrefixTreeQuery(com.spatial4j.core.shape.Shape, String, org.apache.lucene.spatial.prefix.tree.SpatialPrefixTree, int, int)}.\n   * {@code queryBuffer} is the (minimum) distance beyond the query shape edge\n   * where non-matching documents are looked for so they can be excluded. If\n   * -1 is used then the whole world is examined (a good default for correctness).\n   */\n  public WithinPrefixTreeQuery(Shape queryShape, String fieldName, SpatialPrefixTree grid,\n                               int detailLevel, int prefixGridScanLevel,\n                               double queryBuffer) {\n    super(queryShape, fieldName, grid, detailLevel, prefixGridScanLevel);\n    this.bufferedQueryShape = queryBuffer == -1 ? null : bufferShape(queryShape, queryBuffer);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf1a614098b46c9c22afebd7b898ae4d1d2fc273","date":1457088850,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/prefix/WithinPrefixTreeQuery#WithinPrefixTreeQuery(Shape,String,SpatialPrefixTree,int,int,double).mjava","pathOld":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/prefix/WithinPrefixTreeQuery#WithinPrefixTreeQuery(Shape,String,SpatialPrefixTree,int,int,double).mjava","sourceNew":"  /**\n   * See {@link AbstractVisitingPrefixTreeQuery#AbstractVisitingPrefixTreeQuery(org.locationtech.spatial4j.shape.Shape, String, org.apache.lucene.spatial.prefix.tree.SpatialPrefixTree, int, int)}.\n   * {@code queryBuffer} is the (minimum) distance beyond the query shape edge\n   * where non-matching documents are looked for so they can be excluded. If\n   * -1 is used then the whole world is examined (a good default for correctness).\n   */\n  public WithinPrefixTreeQuery(Shape queryShape, String fieldName, SpatialPrefixTree grid,\n                               int detailLevel, int prefixGridScanLevel,\n                               double queryBuffer) {\n    super(queryShape, fieldName, grid, detailLevel, prefixGridScanLevel);\n    this.bufferedQueryShape = queryBuffer == -1 ? null : bufferShape(queryShape, queryBuffer);\n  }\n\n","sourceOld":"  /**\n   * See {@link AbstractVisitingPrefixTreeQuery#AbstractVisitingPrefixTreeQuery(com.spatial4j.core.shape.Shape, String, org.apache.lucene.spatial.prefix.tree.SpatialPrefixTree, int, int)}.\n   * {@code queryBuffer} is the (minimum) distance beyond the query shape edge\n   * where non-matching documents are looked for so they can be excluded. If\n   * -1 is used then the whole world is examined (a good default for correctness).\n   */\n  public WithinPrefixTreeQuery(Shape queryShape, String fieldName, SpatialPrefixTree grid,\n                               int detailLevel, int prefixGridScanLevel,\n                               double queryBuffer) {\n    super(queryShape, fieldName, grid, detailLevel, prefixGridScanLevel);\n    this.bufferedQueryShape = queryBuffer == -1 ? null : bufferShape(queryShape, queryBuffer);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"af2638813028b254a88b418ebeafb541afb49653":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","112d77ac8d3e10a362516ad834c9a11d35c94234"],"bae0bbf5dfabb3daa76f77f636f38310a28de18a":["112d77ac8d3e10a362516ad834c9a11d35c94234"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e697e346b573b1b58353f45be00090a4f2de91e7":["112d77ac8d3e10a362516ad834c9a11d35c94234","bae0bbf5dfabb3daa76f77f636f38310a28de18a"],"112d77ac8d3e10a362516ad834c9a11d35c94234":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["af2638813028b254a88b418ebeafb541afb49653","e697e346b573b1b58353f45be00090a4f2de91e7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"]},"commit2Childs":{"af2638813028b254a88b418ebeafb541afb49653":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"bae0bbf5dfabb3daa76f77f636f38310a28de18a":["e697e346b573b1b58353f45be00090a4f2de91e7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["af2638813028b254a88b418ebeafb541afb49653","112d77ac8d3e10a362516ad834c9a11d35c94234"],"e697e346b573b1b58353f45be00090a4f2de91e7":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"112d77ac8d3e10a362516ad834c9a11d35c94234":["af2638813028b254a88b418ebeafb541afb49653","bae0bbf5dfabb3daa76f77f636f38310a28de18a","e697e346b573b1b58353f45be00090a4f2de91e7"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}