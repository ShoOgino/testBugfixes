{"path":"lucene/core/src/test/org/apache/lucene/mockfile/TestMockFilesystems#testDirectoryStreamGlobFiltered().mjava","commits":[{"id":"16c4d4800310f2b63211f8c7538c896ee01332e5","date":1429094194,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/mockfile/TestMockFilesystems#testDirectoryStreamGlobFiltered().mjava","pathOld":"/dev/null","sourceNew":"  public void testDirectoryStreamGlobFiltered() throws IOException {\n    Path dir = FilterPath.unwrap(createTempDir());\n    FileSystem fs = new FilterFileSystemProvider(\"test://\", dir.getFileSystem()).getFileSystem(URI.create(\"file:///\"));\n    Path wrapped = new FilterPath(dir, fs);\n\n    OutputStream file = Files.newOutputStream(wrapped.resolve(\"foo\"));\n    file.write(5);\n    file.close();\n    file = Files.newOutputStream(wrapped.resolve(\"bar\"));\n    file.write(5);\n    file.close();\n    try (DirectoryStream<Path> stream = Files.newDirectoryStream(wrapped, \"f*\")) {\n      int count = 0;\n      for (Path path : stream) {\n        assertTrue(path instanceof FilterPath);\n        ++count;\n      }\n      assertEquals(1, count);\n    }\n\n    // check with LeakFS, a subclass of HandleTrackingFS which mucks with newDirectoryStream\n    dir = FilterPath.unwrap(createTempDir());\n    fs = new LeakFS(dir.getFileSystem()).getFileSystem(URI.create(\"file:///\"));\n    wrapped = new FilterPath(dir, fs);\n\n    file = Files.newOutputStream(wrapped.resolve(\"foo\"));\n    file.write(5);\n    file.close();\n    file = Files.newOutputStream(wrapped.resolve(\"bar\"));\n    file.write(5);\n    file.close();\n    try (DirectoryStream<Path> stream = Files.newDirectoryStream(wrapped, \"f*\")) {\n      int count = 0;\n      for (Path path : stream) {\n        assertTrue(path instanceof FilterPath);\n        ++count;\n      }\n      assertEquals(1, count);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b52491e71f0d5d0f0160d6ed0d39e0dd661be68a","date":1429550638,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/test/org/apache/lucene/mockfile/TestMockFilesystems#testDirectoryStreamGlobFiltered().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/mockfile/TestMockFilesystems#testDirectoryStreamGlobFiltered().mjava","sourceNew":"  public void testDirectoryStreamGlobFiltered() throws IOException {\n    Path dir = FilterPath.unwrap(createTempDir());\n    FileSystem fs = new FilterFileSystemProvider(\"test://\", dir.getFileSystem()).getFileSystem(URI.create(\"file:///\"));\n    Path wrapped = new FilterPath(dir, fs);\n\n    OutputStream file = Files.newOutputStream(wrapped.resolve(\"foo\"));\n    file.write(5);\n    file.close();\n    file = Files.newOutputStream(wrapped.resolve(\"bar\"));\n    file.write(5);\n    file.close();\n    try (DirectoryStream<Path> stream = Files.newDirectoryStream(wrapped, \"f*\")) {\n      int count = 0;\n      for (Path path : stream) {\n        assertTrue(path instanceof FilterPath);\n        ++count;\n      }\n      assertEquals(1, count);\n    }\n\n    // check with LeakFS, a subclass of HandleTrackingFS which mucks with newDirectoryStream\n    dir = FilterPath.unwrap(createTempDir());\n    fs = new LeakFS(dir.getFileSystem()).getFileSystem(URI.create(\"file:///\"));\n    wrapped = new FilterPath(dir, fs);\n\n    file = Files.newOutputStream(wrapped.resolve(\"foo\"));\n    file.write(5);\n    file.close();\n    file = Files.newOutputStream(wrapped.resolve(\"bar\"));\n    file.write(5);\n    file.close();\n    try (DirectoryStream<Path> stream = Files.newDirectoryStream(wrapped, \"f*\")) {\n      int count = 0;\n      for (Path path : stream) {\n        assertTrue(path instanceof FilterPath);\n        ++count;\n      }\n      assertEquals(1, count);\n    }\n  }\n\n","sourceOld":"  public void testDirectoryStreamGlobFiltered() throws IOException {\n    Path dir = FilterPath.unwrap(createTempDir());\n    FileSystem fs = new FilterFileSystemProvider(\"test://\", dir.getFileSystem()).getFileSystem(URI.create(\"file:///\"));\n    Path wrapped = new FilterPath(dir, fs);\n\n    OutputStream file = Files.newOutputStream(wrapped.resolve(\"foo\"));\n    file.write(5);\n    file.close();\n    file = Files.newOutputStream(wrapped.resolve(\"bar\"));\n    file.write(5);\n    file.close();\n    try (DirectoryStream<Path> stream = Files.newDirectoryStream(wrapped, \"f*\")) {\n      int count = 0;\n      for (Path path : stream) {\n        assertTrue(path instanceof FilterPath);\n        ++count;\n      }\n      assertEquals(1, count);\n    }\n\n    // check with LeakFS, a subclass of HandleTrackingFS which mucks with newDirectoryStream\n    dir = FilterPath.unwrap(createTempDir());\n    fs = new LeakFS(dir.getFileSystem()).getFileSystem(URI.create(\"file:///\"));\n    wrapped = new FilterPath(dir, fs);\n\n    file = Files.newOutputStream(wrapped.resolve(\"foo\"));\n    file.write(5);\n    file.close();\n    file = Files.newOutputStream(wrapped.resolve(\"bar\"));\n    file.write(5);\n    file.close();\n    try (DirectoryStream<Path> stream = Files.newDirectoryStream(wrapped, \"f*\")) {\n      int count = 0;\n      for (Path path : stream) {\n        assertTrue(path instanceof FilterPath);\n        ++count;\n      }\n      assertEquals(1, count);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"16c4d4800310f2b63211f8c7538c896ee01332e5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b52491e71f0d5d0f0160d6ed0d39e0dd661be68a":["16c4d4800310f2b63211f8c7538c896ee01332e5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b52491e71f0d5d0f0160d6ed0d39e0dd661be68a"]},"commit2Childs":{"16c4d4800310f2b63211f8c7538c896ee01332e5":["b52491e71f0d5d0f0160d6ed0d39e0dd661be68a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["16c4d4800310f2b63211f8c7538c896ee01332e5"],"b52491e71f0d5d0f0160d6ed0d39e0dd661be68a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}