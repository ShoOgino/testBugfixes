{"path":"contrib/xml-query-parser/src/java/org/apache/lucene/xmlparser/CoreParser#CoreParser(Analyzer,QueryParser).mjava","commits":[{"id":"d3c3c2404d1200c39220fa15054fae854db4e1ee","date":1140827958,"type":0,"author":"Mark Harwood","isMerge":false,"pathNew":"contrib/xml-query-parser/src/java/org/apache/lucene/xmlparser/CoreParser#CoreParser(Analyzer,QueryParser).mjava","pathOld":"/dev/null","sourceNew":"\tpublic CoreParser(Analyzer analyzer, QueryParser parser)\r\n\t{\r\n\t\tthis.analyzer=analyzer;\r\n\t\tthis.parser=parser;\r\n\t\tfilterFactory = new FilterBuilderFactory();\r\n\t\tfilterFactory.addBuilder(\"RangeFilter\",new RangeFilterBuilder());\r\n\t\t\r\n\t\t\r\n\t\tqueryFactory = new QueryBuilderFactory();\r\n\t\tqueryFactory.addBuilder(\"TermQuery\",new TermQueryBuilder());\r\n\t\tqueryFactory.addBuilder(\"BooleanQuery\",new BooleanQueryBuilder(queryFactory));\r\n\t\tqueryFactory.addBuilder(\"UserQuery\",new UserInputQueryBuilder(new QueryParser(\"contents\", analyzer)));\r\n\t\tqueryFactory.addBuilder(\"FilteredQuery\",new FilteredQueryBuilder(filterFactory,queryFactory));\r\n\t\tqueryFactory.addBuilder(\"ConstantScoreQuery\",new ConstantScoreQueryBuilder(filterFactory));\r\n\t\t\r\n\t\tSpanQueryBuilderFactory sqof=new SpanQueryBuilderFactory();\r\n\r\n\t\tSpanNearBuilder snb=new SpanNearBuilder(sqof);\r\n\t\tsqof.addBuilder(\"SpanNear\",snb);\r\n\t\tqueryFactory.addBuilder(\"SpanNear\",snb);\r\n\r\n\t\tSpanTermBuilder snt=new SpanTermBuilder();\r\n\t\tsqof.addBuilder(\"SpanTerm\",snt);\r\n\t\tqueryFactory.addBuilder(\"SpanTerm\",snt);\r\n\t\t\r\n\t\tSpanOrBuilder sot=new SpanOrBuilder(sqof);\r\n\t\tsqof.addBuilder(\"SpanOr\",sot);\r\n\t\tqueryFactory.addBuilder(\"SpanOr\",sot);\r\n\r\n\t\tSpanOrTermsBuilder sots=new SpanOrTermsBuilder(analyzer);\r\n\t\tsqof.addBuilder(\"SpanOrTerms\",sots);\r\n\t\tqueryFactory.addBuilder(\"SpanOrTerms\",sots);\t\t\r\n\t\t\r\n\t\tSpanFirstBuilder sft=new SpanFirstBuilder(sqof);\r\n\t\tsqof.addBuilder(\"SpanFirst\",sft);\r\n\t\tqueryFactory.addBuilder(\"SpanFirst\",sft);\r\n\t\t\r\n\t\tSpanNotBuilder snot=new SpanNotBuilder(sqof);\r\n\t\tsqof.addBuilder(\"SpanNot\",snot);\r\n\t\tqueryFactory.addBuilder(\"SpanNot\",snot);\t\r\n\t}\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"12b667fa519518d1f1a1483550240554a03c9fae","date":1142326183,"type":3,"author":"Mark Harwood","isMerge":false,"pathNew":"contrib/xml-query-parser/src/java/org/apache/lucene/xmlparser/CoreParser#CoreParser(Analyzer,QueryParser).mjava","pathOld":"contrib/xml-query-parser/src/java/org/apache/lucene/xmlparser/CoreParser#CoreParser(Analyzer,QueryParser).mjava","sourceNew":"\tpublic CoreParser(Analyzer analyzer, QueryParser parser)\r\n\t{\r\n\t\tthis.analyzer=analyzer;\r\n\t\tthis.parser=parser;\r\n\t\tfilterFactory = new FilterBuilderFactory();\r\n\t\tfilterFactory.addBuilder(\"RangeFilter\",new RangeFilterBuilder());\r\n\t\t\r\n\t\t\r\n\t\tqueryFactory = new QueryBuilderFactory();\r\n\t\tqueryFactory.addBuilder(\"TermQuery\",new TermQueryBuilder());\r\n\t\tqueryFactory.addBuilder(\"BooleanQuery\",new BooleanQueryBuilder(queryFactory));\r\n\t\tqueryFactory.addBuilder(\"UserQuery\",new UserInputQueryBuilder(parser));\r\n\t\tqueryFactory.addBuilder(\"FilteredQuery\",new FilteredQueryBuilder(filterFactory,queryFactory));\r\n\t\tqueryFactory.addBuilder(\"ConstantScoreQuery\",new ConstantScoreQueryBuilder(filterFactory));\r\n\t\t\r\n\t\tSpanQueryBuilderFactory sqof=new SpanQueryBuilderFactory();\r\n\r\n\t\tSpanNearBuilder snb=new SpanNearBuilder(sqof);\r\n\t\tsqof.addBuilder(\"SpanNear\",snb);\r\n\t\tqueryFactory.addBuilder(\"SpanNear\",snb);\r\n\r\n\t\tSpanTermBuilder snt=new SpanTermBuilder();\r\n\t\tsqof.addBuilder(\"SpanTerm\",snt);\r\n\t\tqueryFactory.addBuilder(\"SpanTerm\",snt);\r\n\t\t\r\n\t\tSpanOrBuilder sot=new SpanOrBuilder(sqof);\r\n\t\tsqof.addBuilder(\"SpanOr\",sot);\r\n\t\tqueryFactory.addBuilder(\"SpanOr\",sot);\r\n\r\n\t\tSpanOrTermsBuilder sots=new SpanOrTermsBuilder(analyzer);\r\n\t\tsqof.addBuilder(\"SpanOrTerms\",sots);\r\n\t\tqueryFactory.addBuilder(\"SpanOrTerms\",sots);\t\t\r\n\t\t\r\n\t\tSpanFirstBuilder sft=new SpanFirstBuilder(sqof);\r\n\t\tsqof.addBuilder(\"SpanFirst\",sft);\r\n\t\tqueryFactory.addBuilder(\"SpanFirst\",sft);\r\n\t\t\r\n\t\tSpanNotBuilder snot=new SpanNotBuilder(sqof);\r\n\t\tsqof.addBuilder(\"SpanNot\",snot);\r\n\t\tqueryFactory.addBuilder(\"SpanNot\",snot);\t\r\n\t}\r\n\n","sourceOld":"\tpublic CoreParser(Analyzer analyzer, QueryParser parser)\r\n\t{\r\n\t\tthis.analyzer=analyzer;\r\n\t\tthis.parser=parser;\r\n\t\tfilterFactory = new FilterBuilderFactory();\r\n\t\tfilterFactory.addBuilder(\"RangeFilter\",new RangeFilterBuilder());\r\n\t\t\r\n\t\t\r\n\t\tqueryFactory = new QueryBuilderFactory();\r\n\t\tqueryFactory.addBuilder(\"TermQuery\",new TermQueryBuilder());\r\n\t\tqueryFactory.addBuilder(\"BooleanQuery\",new BooleanQueryBuilder(queryFactory));\r\n\t\tqueryFactory.addBuilder(\"UserQuery\",new UserInputQueryBuilder(new QueryParser(\"contents\", analyzer)));\r\n\t\tqueryFactory.addBuilder(\"FilteredQuery\",new FilteredQueryBuilder(filterFactory,queryFactory));\r\n\t\tqueryFactory.addBuilder(\"ConstantScoreQuery\",new ConstantScoreQueryBuilder(filterFactory));\r\n\t\t\r\n\t\tSpanQueryBuilderFactory sqof=new SpanQueryBuilderFactory();\r\n\r\n\t\tSpanNearBuilder snb=new SpanNearBuilder(sqof);\r\n\t\tsqof.addBuilder(\"SpanNear\",snb);\r\n\t\tqueryFactory.addBuilder(\"SpanNear\",snb);\r\n\r\n\t\tSpanTermBuilder snt=new SpanTermBuilder();\r\n\t\tsqof.addBuilder(\"SpanTerm\",snt);\r\n\t\tqueryFactory.addBuilder(\"SpanTerm\",snt);\r\n\t\t\r\n\t\tSpanOrBuilder sot=new SpanOrBuilder(sqof);\r\n\t\tsqof.addBuilder(\"SpanOr\",sot);\r\n\t\tqueryFactory.addBuilder(\"SpanOr\",sot);\r\n\r\n\t\tSpanOrTermsBuilder sots=new SpanOrTermsBuilder(analyzer);\r\n\t\tsqof.addBuilder(\"SpanOrTerms\",sots);\r\n\t\tqueryFactory.addBuilder(\"SpanOrTerms\",sots);\t\t\r\n\t\t\r\n\t\tSpanFirstBuilder sft=new SpanFirstBuilder(sqof);\r\n\t\tsqof.addBuilder(\"SpanFirst\",sft);\r\n\t\tqueryFactory.addBuilder(\"SpanFirst\",sft);\r\n\t\t\r\n\t\tSpanNotBuilder snot=new SpanNotBuilder(sqof);\r\n\t\tsqof.addBuilder(\"SpanNot\",snot);\r\n\t\tqueryFactory.addBuilder(\"SpanNot\",snot);\t\r\n\t}\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"97daaba62208a040d50a9f763395afbe1aac3435","date":1143156633,"type":3,"author":"Mark Harwood","isMerge":false,"pathNew":"contrib/xml-query-parser/src/java/org/apache/lucene/xmlparser/CoreParser#CoreParser(Analyzer,QueryParser).mjava","pathOld":"contrib/xml-query-parser/src/java/org/apache/lucene/xmlparser/CoreParser#CoreParser(Analyzer,QueryParser).mjava","sourceNew":"\tpublic CoreParser(Analyzer analyzer, QueryParser parser)\r\n\t{\r\n\t\tthis.analyzer=analyzer;\r\n\t\tthis.parser=parser;\r\n\t\tfilterFactory = new FilterBuilderFactory();\r\n\t\tfilterFactory.addBuilder(\"RangeFilter\",new RangeFilterBuilder());\r\n\t\t\r\n\t\t\r\n\t\tqueryFactory = new QueryBuilderFactory();\r\n\t\tqueryFactory.addBuilder(\"TermQuery\",new TermQueryBuilder());\r\n\t\tqueryFactory.addBuilder(\"MatchAllDocsQuery\",new MatchAllDocsQueryBuilder());\r\n\t\tqueryFactory.addBuilder(\"BooleanQuery\",new BooleanQueryBuilder(queryFactory));\r\n\t\tqueryFactory.addBuilder(\"UserQuery\",new UserInputQueryBuilder(parser));\r\n\t\tqueryFactory.addBuilder(\"FilteredQuery\",new FilteredQueryBuilder(filterFactory,queryFactory));\r\n\t\tqueryFactory.addBuilder(\"ConstantScoreQuery\",new ConstantScoreQueryBuilder(filterFactory));\r\n\t\t\r\n\t\tSpanQueryBuilderFactory sqof=new SpanQueryBuilderFactory();\r\n\r\n\t\tSpanNearBuilder snb=new SpanNearBuilder(sqof);\r\n\t\tsqof.addBuilder(\"SpanNear\",snb);\r\n\t\tqueryFactory.addBuilder(\"SpanNear\",snb);\r\n\r\n\t\tSpanTermBuilder snt=new SpanTermBuilder();\r\n\t\tsqof.addBuilder(\"SpanTerm\",snt);\r\n\t\tqueryFactory.addBuilder(\"SpanTerm\",snt);\r\n\t\t\r\n\t\tSpanOrBuilder sot=new SpanOrBuilder(sqof);\r\n\t\tsqof.addBuilder(\"SpanOr\",sot);\r\n\t\tqueryFactory.addBuilder(\"SpanOr\",sot);\r\n\r\n\t\tSpanOrTermsBuilder sots=new SpanOrTermsBuilder(analyzer);\r\n\t\tsqof.addBuilder(\"SpanOrTerms\",sots);\r\n\t\tqueryFactory.addBuilder(\"SpanOrTerms\",sots);\t\t\r\n\t\t\r\n\t\tSpanFirstBuilder sft=new SpanFirstBuilder(sqof);\r\n\t\tsqof.addBuilder(\"SpanFirst\",sft);\r\n\t\tqueryFactory.addBuilder(\"SpanFirst\",sft);\r\n\t\t\r\n\t\tSpanNotBuilder snot=new SpanNotBuilder(sqof);\r\n\t\tsqof.addBuilder(\"SpanNot\",snot);\r\n\t\tqueryFactory.addBuilder(\"SpanNot\",snot);\t\r\n\t}\r\n\n","sourceOld":"\tpublic CoreParser(Analyzer analyzer, QueryParser parser)\r\n\t{\r\n\t\tthis.analyzer=analyzer;\r\n\t\tthis.parser=parser;\r\n\t\tfilterFactory = new FilterBuilderFactory();\r\n\t\tfilterFactory.addBuilder(\"RangeFilter\",new RangeFilterBuilder());\r\n\t\t\r\n\t\t\r\n\t\tqueryFactory = new QueryBuilderFactory();\r\n\t\tqueryFactory.addBuilder(\"TermQuery\",new TermQueryBuilder());\r\n\t\tqueryFactory.addBuilder(\"BooleanQuery\",new BooleanQueryBuilder(queryFactory));\r\n\t\tqueryFactory.addBuilder(\"UserQuery\",new UserInputQueryBuilder(parser));\r\n\t\tqueryFactory.addBuilder(\"FilteredQuery\",new FilteredQueryBuilder(filterFactory,queryFactory));\r\n\t\tqueryFactory.addBuilder(\"ConstantScoreQuery\",new ConstantScoreQueryBuilder(filterFactory));\r\n\t\t\r\n\t\tSpanQueryBuilderFactory sqof=new SpanQueryBuilderFactory();\r\n\r\n\t\tSpanNearBuilder snb=new SpanNearBuilder(sqof);\r\n\t\tsqof.addBuilder(\"SpanNear\",snb);\r\n\t\tqueryFactory.addBuilder(\"SpanNear\",snb);\r\n\r\n\t\tSpanTermBuilder snt=new SpanTermBuilder();\r\n\t\tsqof.addBuilder(\"SpanTerm\",snt);\r\n\t\tqueryFactory.addBuilder(\"SpanTerm\",snt);\r\n\t\t\r\n\t\tSpanOrBuilder sot=new SpanOrBuilder(sqof);\r\n\t\tsqof.addBuilder(\"SpanOr\",sot);\r\n\t\tqueryFactory.addBuilder(\"SpanOr\",sot);\r\n\r\n\t\tSpanOrTermsBuilder sots=new SpanOrTermsBuilder(analyzer);\r\n\t\tsqof.addBuilder(\"SpanOrTerms\",sots);\r\n\t\tqueryFactory.addBuilder(\"SpanOrTerms\",sots);\t\t\r\n\t\t\r\n\t\tSpanFirstBuilder sft=new SpanFirstBuilder(sqof);\r\n\t\tsqof.addBuilder(\"SpanFirst\",sft);\r\n\t\tqueryFactory.addBuilder(\"SpanFirst\",sft);\r\n\t\t\r\n\t\tSpanNotBuilder snot=new SpanNotBuilder(sqof);\r\n\t\tsqof.addBuilder(\"SpanNot\",snot);\r\n\t\tqueryFactory.addBuilder(\"SpanNot\",snot);\t\r\n\t}\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b9e98fb28c9831a6b05012c06179c54500f79d66","date":1151445407,"type":3,"author":"Mark Harwood","isMerge":false,"pathNew":"contrib/xml-query-parser/src/java/org/apache/lucene/xmlparser/CoreParser#CoreParser(Analyzer,QueryParser).mjava","pathOld":"contrib/xml-query-parser/src/java/org/apache/lucene/xmlparser/CoreParser#CoreParser(Analyzer,QueryParser).mjava","sourceNew":"\tpublic CoreParser(Analyzer analyzer, QueryParser parser)\r\n\t{\r\n\t\tthis.analyzer=analyzer;\r\n\t\tthis.parser=parser;\r\n\t\tfilterFactory = new FilterBuilderFactory();\r\n\t\tfilterFactory.addBuilder(\"RangeFilter\",new RangeFilterBuilder());\r\n\t\t\r\n\t\t\r\n\t\tqueryFactory = new QueryBuilderFactory();\r\n\t\tqueryFactory.addBuilder(\"TermQuery\",new TermQueryBuilder());\r\n\t\tqueryFactory.addBuilder(\"TermsQuery\",new TermsQueryBuilder(analyzer));\r\n\t\tqueryFactory.addBuilder(\"MatchAllDocsQuery\",new MatchAllDocsQueryBuilder());\r\n\t\tqueryFactory.addBuilder(\"BooleanQuery\",new BooleanQueryBuilder(queryFactory));\r\n\t\tqueryFactory.addBuilder(\"UserQuery\",new UserInputQueryBuilder(parser));\r\n\t\tqueryFactory.addBuilder(\"FilteredQuery\",new FilteredQueryBuilder(filterFactory,queryFactory));\r\n\t\tqueryFactory.addBuilder(\"ConstantScoreQuery\",new ConstantScoreQueryBuilder(filterFactory));\r\n\t\t\r\n\t\tSpanQueryBuilderFactory sqof=new SpanQueryBuilderFactory();\r\n\r\n\t\tSpanNearBuilder snb=new SpanNearBuilder(sqof);\r\n\t\tsqof.addBuilder(\"SpanNear\",snb);\r\n\t\tqueryFactory.addBuilder(\"SpanNear\",snb);\r\n\r\n\t\tSpanTermBuilder snt=new SpanTermBuilder();\r\n\t\tsqof.addBuilder(\"SpanTerm\",snt);\r\n\t\tqueryFactory.addBuilder(\"SpanTerm\",snt);\r\n\t\t\r\n\t\tSpanOrBuilder sot=new SpanOrBuilder(sqof);\r\n\t\tsqof.addBuilder(\"SpanOr\",sot);\r\n\t\tqueryFactory.addBuilder(\"SpanOr\",sot);\r\n\r\n\t\tSpanOrTermsBuilder sots=new SpanOrTermsBuilder(analyzer);\r\n\t\tsqof.addBuilder(\"SpanOrTerms\",sots);\r\n\t\tqueryFactory.addBuilder(\"SpanOrTerms\",sots);\t\t\r\n\t\t\r\n\t\tSpanFirstBuilder sft=new SpanFirstBuilder(sqof);\r\n\t\tsqof.addBuilder(\"SpanFirst\",sft);\r\n\t\tqueryFactory.addBuilder(\"SpanFirst\",sft);\r\n\t\t\r\n\t\tSpanNotBuilder snot=new SpanNotBuilder(sqof);\r\n\t\tsqof.addBuilder(\"SpanNot\",snot);\r\n\t\tqueryFactory.addBuilder(\"SpanNot\",snot);\t\r\n\t}\r\n\n","sourceOld":"\tpublic CoreParser(Analyzer analyzer, QueryParser parser)\r\n\t{\r\n\t\tthis.analyzer=analyzer;\r\n\t\tthis.parser=parser;\r\n\t\tfilterFactory = new FilterBuilderFactory();\r\n\t\tfilterFactory.addBuilder(\"RangeFilter\",new RangeFilterBuilder());\r\n\t\t\r\n\t\t\r\n\t\tqueryFactory = new QueryBuilderFactory();\r\n\t\tqueryFactory.addBuilder(\"TermQuery\",new TermQueryBuilder());\r\n\t\tqueryFactory.addBuilder(\"MatchAllDocsQuery\",new MatchAllDocsQueryBuilder());\r\n\t\tqueryFactory.addBuilder(\"BooleanQuery\",new BooleanQueryBuilder(queryFactory));\r\n\t\tqueryFactory.addBuilder(\"UserQuery\",new UserInputQueryBuilder(parser));\r\n\t\tqueryFactory.addBuilder(\"FilteredQuery\",new FilteredQueryBuilder(filterFactory,queryFactory));\r\n\t\tqueryFactory.addBuilder(\"ConstantScoreQuery\",new ConstantScoreQueryBuilder(filterFactory));\r\n\t\t\r\n\t\tSpanQueryBuilderFactory sqof=new SpanQueryBuilderFactory();\r\n\r\n\t\tSpanNearBuilder snb=new SpanNearBuilder(sqof);\r\n\t\tsqof.addBuilder(\"SpanNear\",snb);\r\n\t\tqueryFactory.addBuilder(\"SpanNear\",snb);\r\n\r\n\t\tSpanTermBuilder snt=new SpanTermBuilder();\r\n\t\tsqof.addBuilder(\"SpanTerm\",snt);\r\n\t\tqueryFactory.addBuilder(\"SpanTerm\",snt);\r\n\t\t\r\n\t\tSpanOrBuilder sot=new SpanOrBuilder(sqof);\r\n\t\tsqof.addBuilder(\"SpanOr\",sot);\r\n\t\tqueryFactory.addBuilder(\"SpanOr\",sot);\r\n\r\n\t\tSpanOrTermsBuilder sots=new SpanOrTermsBuilder(analyzer);\r\n\t\tsqof.addBuilder(\"SpanOrTerms\",sots);\r\n\t\tqueryFactory.addBuilder(\"SpanOrTerms\",sots);\t\t\r\n\t\t\r\n\t\tSpanFirstBuilder sft=new SpanFirstBuilder(sqof);\r\n\t\tsqof.addBuilder(\"SpanFirst\",sft);\r\n\t\tqueryFactory.addBuilder(\"SpanFirst\",sft);\r\n\t\t\r\n\t\tSpanNotBuilder snot=new SpanNotBuilder(sqof);\r\n\t\tsqof.addBuilder(\"SpanNot\",snot);\r\n\t\tqueryFactory.addBuilder(\"SpanNot\",snot);\t\r\n\t}\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ac4d82055808e35fe2a92db7425ad6537779e3d0","date":1167955517,"type":3,"author":"Mark Harwood","isMerge":false,"pathNew":"contrib/xml-query-parser/src/java/org/apache/lucene/xmlparser/CoreParser#CoreParser(Analyzer,QueryParser).mjava","pathOld":"contrib/xml-query-parser/src/java/org/apache/lucene/xmlparser/CoreParser#CoreParser(Analyzer,QueryParser).mjava","sourceNew":"\tpublic CoreParser(Analyzer analyzer, QueryParser parser)\r\n\t{\r\n\t\tthis.analyzer=analyzer;\r\n\t\tthis.parser=parser;\r\n\t\tfilterFactory = new FilterBuilderFactory();\r\n\t\tfilterFactory.addBuilder(\"RangeFilter\",new RangeFilterBuilder());\r\n\t\t\r\n\t\t\r\n\t\tqueryFactory = new QueryBuilderFactory();\r\n\t\tqueryFactory.addBuilder(\"TermQuery\",new TermQueryBuilder());\r\n\t\tqueryFactory.addBuilder(\"TermsQuery\",new TermsQueryBuilder(analyzer));\r\n\t\tqueryFactory.addBuilder(\"MatchAllDocsQuery\",new MatchAllDocsQueryBuilder());\r\n\t\tqueryFactory.addBuilder(\"BooleanQuery\",new BooleanQueryBuilder(queryFactory));\r\n\t\tqueryFactory.addBuilder(\"UserQuery\",new UserInputQueryBuilder(parser));\r\n\t\tqueryFactory.addBuilder(\"FilteredQuery\",new FilteredQueryBuilder(filterFactory,queryFactory));\r\n\t\tqueryFactory.addBuilder(\"ConstantScoreQuery\",new ConstantScoreQueryBuilder(filterFactory));\r\n\t\t\r\n\t\tfilterFactory.addBuilder(\"CachedFilter\",new CachedFilterBuilder(queryFactory,\r\n\t\t\t\t\t\t\tfilterFactory, maxNumCachedFilters));\r\n\t\t\r\n\t\t\r\n\t\tSpanQueryBuilderFactory sqof=new SpanQueryBuilderFactory();\r\n\r\n\t\tSpanNearBuilder snb=new SpanNearBuilder(sqof);\r\n\t\tsqof.addBuilder(\"SpanNear\",snb);\r\n\t\tqueryFactory.addBuilder(\"SpanNear\",snb);\r\n\r\n\t\tSpanTermBuilder snt=new SpanTermBuilder();\r\n\t\tsqof.addBuilder(\"SpanTerm\",snt);\r\n\t\tqueryFactory.addBuilder(\"SpanTerm\",snt);\r\n\t\t\r\n\t\tSpanOrBuilder sot=new SpanOrBuilder(sqof);\r\n\t\tsqof.addBuilder(\"SpanOr\",sot);\r\n\t\tqueryFactory.addBuilder(\"SpanOr\",sot);\r\n\r\n\t\tSpanOrTermsBuilder sots=new SpanOrTermsBuilder(analyzer);\r\n\t\tsqof.addBuilder(\"SpanOrTerms\",sots);\r\n\t\tqueryFactory.addBuilder(\"SpanOrTerms\",sots);\t\t\r\n\t\t\r\n\t\tSpanFirstBuilder sft=new SpanFirstBuilder(sqof);\r\n\t\tsqof.addBuilder(\"SpanFirst\",sft);\r\n\t\tqueryFactory.addBuilder(\"SpanFirst\",sft);\r\n\t\t\r\n\t\tSpanNotBuilder snot=new SpanNotBuilder(sqof);\r\n\t\tsqof.addBuilder(\"SpanNot\",snot);\r\n\t\tqueryFactory.addBuilder(\"SpanNot\",snot);\t\r\n\t}\r\n\n","sourceOld":"\tpublic CoreParser(Analyzer analyzer, QueryParser parser)\r\n\t{\r\n\t\tthis.analyzer=analyzer;\r\n\t\tthis.parser=parser;\r\n\t\tfilterFactory = new FilterBuilderFactory();\r\n\t\tfilterFactory.addBuilder(\"RangeFilter\",new RangeFilterBuilder());\r\n\t\t\r\n\t\t\r\n\t\tqueryFactory = new QueryBuilderFactory();\r\n\t\tqueryFactory.addBuilder(\"TermQuery\",new TermQueryBuilder());\r\n\t\tqueryFactory.addBuilder(\"TermsQuery\",new TermsQueryBuilder(analyzer));\r\n\t\tqueryFactory.addBuilder(\"MatchAllDocsQuery\",new MatchAllDocsQueryBuilder());\r\n\t\tqueryFactory.addBuilder(\"BooleanQuery\",new BooleanQueryBuilder(queryFactory));\r\n\t\tqueryFactory.addBuilder(\"UserQuery\",new UserInputQueryBuilder(parser));\r\n\t\tqueryFactory.addBuilder(\"FilteredQuery\",new FilteredQueryBuilder(filterFactory,queryFactory));\r\n\t\tqueryFactory.addBuilder(\"ConstantScoreQuery\",new ConstantScoreQueryBuilder(filterFactory));\r\n\t\t\r\n\t\tSpanQueryBuilderFactory sqof=new SpanQueryBuilderFactory();\r\n\r\n\t\tSpanNearBuilder snb=new SpanNearBuilder(sqof);\r\n\t\tsqof.addBuilder(\"SpanNear\",snb);\r\n\t\tqueryFactory.addBuilder(\"SpanNear\",snb);\r\n\r\n\t\tSpanTermBuilder snt=new SpanTermBuilder();\r\n\t\tsqof.addBuilder(\"SpanTerm\",snt);\r\n\t\tqueryFactory.addBuilder(\"SpanTerm\",snt);\r\n\t\t\r\n\t\tSpanOrBuilder sot=new SpanOrBuilder(sqof);\r\n\t\tsqof.addBuilder(\"SpanOr\",sot);\r\n\t\tqueryFactory.addBuilder(\"SpanOr\",sot);\r\n\r\n\t\tSpanOrTermsBuilder sots=new SpanOrTermsBuilder(analyzer);\r\n\t\tsqof.addBuilder(\"SpanOrTerms\",sots);\r\n\t\tqueryFactory.addBuilder(\"SpanOrTerms\",sots);\t\t\r\n\t\t\r\n\t\tSpanFirstBuilder sft=new SpanFirstBuilder(sqof);\r\n\t\tsqof.addBuilder(\"SpanFirst\",sft);\r\n\t\tqueryFactory.addBuilder(\"SpanFirst\",sft);\r\n\t\t\r\n\t\tSpanNotBuilder snot=new SpanNotBuilder(sqof);\r\n\t\tsqof.addBuilder(\"SpanNot\",snot);\r\n\t\tqueryFactory.addBuilder(\"SpanNot\",snot);\t\r\n\t}\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"82632e9d88b0fa1aa99de5b6dbba336eaca33fae","date":1203287578,"type":3,"author":"Mark Harwood","isMerge":false,"pathNew":"contrib/xml-query-parser/src/java/org/apache/lucene/xmlparser/CoreParser#CoreParser(Analyzer,QueryParser).mjava","pathOld":"contrib/xml-query-parser/src/java/org/apache/lucene/xmlparser/CoreParser#CoreParser(Analyzer,QueryParser).mjava","sourceNew":"\t/**\r\n\t * Construct an XML parser that uses a single instance QueryParser for handling \r\n\t * UserQuery tags - all parse operations are synchronised on this parser\r\n\t * @param analyzer\r\n\t * @param parser A QueryParser which will be synchronized on during parse calls.\r\n\t */\r\n\tpublic CoreParser(Analyzer analyzer, QueryParser parser)\r\n\t{\r\n\t\tthis(null,analyzer,parser);\r\n\t}\r\n\n","sourceOld":"\tpublic CoreParser(Analyzer analyzer, QueryParser parser)\r\n\t{\r\n\t\tthis.analyzer=analyzer;\r\n\t\tthis.parser=parser;\r\n\t\tfilterFactory = new FilterBuilderFactory();\r\n\t\tfilterFactory.addBuilder(\"RangeFilter\",new RangeFilterBuilder());\r\n\t\t\r\n\t\t\r\n\t\tqueryFactory = new QueryBuilderFactory();\r\n\t\tqueryFactory.addBuilder(\"TermQuery\",new TermQueryBuilder());\r\n\t\tqueryFactory.addBuilder(\"TermsQuery\",new TermsQueryBuilder(analyzer));\r\n\t\tqueryFactory.addBuilder(\"MatchAllDocsQuery\",new MatchAllDocsQueryBuilder());\r\n\t\tqueryFactory.addBuilder(\"BooleanQuery\",new BooleanQueryBuilder(queryFactory));\r\n\t\tqueryFactory.addBuilder(\"UserQuery\",new UserInputQueryBuilder(parser));\r\n\t\tqueryFactory.addBuilder(\"FilteredQuery\",new FilteredQueryBuilder(filterFactory,queryFactory));\r\n\t\tqueryFactory.addBuilder(\"ConstantScoreQuery\",new ConstantScoreQueryBuilder(filterFactory));\r\n\t\t\r\n\t\tfilterFactory.addBuilder(\"CachedFilter\",new CachedFilterBuilder(queryFactory,\r\n\t\t\t\t\t\t\tfilterFactory, maxNumCachedFilters));\r\n\t\t\r\n\t\t\r\n\t\tSpanQueryBuilderFactory sqof=new SpanQueryBuilderFactory();\r\n\r\n\t\tSpanNearBuilder snb=new SpanNearBuilder(sqof);\r\n\t\tsqof.addBuilder(\"SpanNear\",snb);\r\n\t\tqueryFactory.addBuilder(\"SpanNear\",snb);\r\n\r\n\t\tSpanTermBuilder snt=new SpanTermBuilder();\r\n\t\tsqof.addBuilder(\"SpanTerm\",snt);\r\n\t\tqueryFactory.addBuilder(\"SpanTerm\",snt);\r\n\t\t\r\n\t\tSpanOrBuilder sot=new SpanOrBuilder(sqof);\r\n\t\tsqof.addBuilder(\"SpanOr\",sot);\r\n\t\tqueryFactory.addBuilder(\"SpanOr\",sot);\r\n\r\n\t\tSpanOrTermsBuilder sots=new SpanOrTermsBuilder(analyzer);\r\n\t\tsqof.addBuilder(\"SpanOrTerms\",sots);\r\n\t\tqueryFactory.addBuilder(\"SpanOrTerms\",sots);\t\t\r\n\t\t\r\n\t\tSpanFirstBuilder sft=new SpanFirstBuilder(sqof);\r\n\t\tsqof.addBuilder(\"SpanFirst\",sft);\r\n\t\tqueryFactory.addBuilder(\"SpanFirst\",sft);\r\n\t\t\r\n\t\tSpanNotBuilder snot=new SpanNotBuilder(sqof);\r\n\t\tsqof.addBuilder(\"SpanNot\",snot);\r\n\t\tqueryFactory.addBuilder(\"SpanNot\",snot);\t\r\n\t}\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6a361a621b184d9b73c9c9a37323a9845b8f8260","date":1226370946,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"contrib/xml-query-parser/src/java/org/apache/lucene/xmlparser/CoreParser#CoreParser(Analyzer,QueryParser).mjava","pathOld":"contrib/xml-query-parser/src/java/org/apache/lucene/xmlparser/CoreParser#CoreParser(Analyzer,QueryParser).mjava","sourceNew":"\t/**\n\t * Construct an XML parser that uses a single instance QueryParser for handling \n\t * UserQuery tags - all parse operations are synchronised on this parser\n\t * @param analyzer\n\t * @param parser A QueryParser which will be synchronized on during parse calls.\n\t */\n\tpublic CoreParser(Analyzer analyzer, QueryParser parser)\n\t{\n\t\tthis(null,analyzer,parser);\n\t}\n\n","sourceOld":"\t/**\r\n\t * Construct an XML parser that uses a single instance QueryParser for handling \r\n\t * UserQuery tags - all parse operations are synchronised on this parser\r\n\t * @param analyzer\r\n\t * @param parser A QueryParser which will be synchronized on during parse calls.\r\n\t */\r\n\tpublic CoreParser(Analyzer analyzer, QueryParser parser)\r\n\t{\r\n\t\tthis(null,analyzer,parser);\r\n\t}\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/xml-query-parser/src/java/org/apache/lucene/xmlparser/CoreParser#CoreParser(Analyzer,QueryParser).mjava","pathOld":"contrib/xml-query-parser/src/java/org/apache/lucene/xmlparser/CoreParser#CoreParser(Analyzer,QueryParser).mjava","sourceNew":"\t/**\n\t * Construct an XML parser that uses a single instance QueryParser for handling \n\t * UserQuery tags - all parse operations are synchronised on this parser\n\t * @param analyzer\n\t * @param parser A QueryParser which will be synchronized on during parse calls.\n\t */\n\tpublic CoreParser(Analyzer analyzer, QueryParser parser)\n\t{\n\t\tthis(null,analyzer,parser);\n\t}\n\n","sourceOld":"\t/**\n\t * Construct an XML parser that uses a single instance QueryParser for handling \n\t * UserQuery tags - all parse operations are synchronised on this parser\n\t * @param analyzer\n\t * @param parser A QueryParser which will be synchronized on during parse calls.\n\t */\n\tpublic CoreParser(Analyzer analyzer, QueryParser parser)\n\t{\n\t\tthis(null,analyzer,parser);\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"97daaba62208a040d50a9f763395afbe1aac3435":["12b667fa519518d1f1a1483550240554a03c9fae"],"82632e9d88b0fa1aa99de5b6dbba336eaca33fae":["ac4d82055808e35fe2a92db7425ad6537779e3d0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6a361a621b184d9b73c9c9a37323a9845b8f8260":["82632e9d88b0fa1aa99de5b6dbba336eaca33fae"],"d3c3c2404d1200c39220fa15054fae854db4e1ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ac4d82055808e35fe2a92db7425ad6537779e3d0":["b9e98fb28c9831a6b05012c06179c54500f79d66"],"12b667fa519518d1f1a1483550240554a03c9fae":["d3c3c2404d1200c39220fa15054fae854db4e1ee"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["6a361a621b184d9b73c9c9a37323a9845b8f8260"],"b9e98fb28c9831a6b05012c06179c54500f79d66":["97daaba62208a040d50a9f763395afbe1aac3435"]},"commit2Childs":{"97daaba62208a040d50a9f763395afbe1aac3435":["b9e98fb28c9831a6b05012c06179c54500f79d66"],"82632e9d88b0fa1aa99de5b6dbba336eaca33fae":["6a361a621b184d9b73c9c9a37323a9845b8f8260"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d3c3c2404d1200c39220fa15054fae854db4e1ee"],"6a361a621b184d9b73c9c9a37323a9845b8f8260":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"d3c3c2404d1200c39220fa15054fae854db4e1ee":["12b667fa519518d1f1a1483550240554a03c9fae"],"12b667fa519518d1f1a1483550240554a03c9fae":["97daaba62208a040d50a9f763395afbe1aac3435"],"ac4d82055808e35fe2a92db7425ad6537779e3d0":["82632e9d88b0fa1aa99de5b6dbba336eaca33fae"],"b9e98fb28c9831a6b05012c06179c54500f79d66":["ac4d82055808e35fe2a92db7425ad6537779e3d0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}