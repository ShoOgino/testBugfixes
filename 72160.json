{"path":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoComplexPolygon.Node#traverse(EdgeIterator,TraverseComparator,double,double).mjava","commits":[{"id":"116824c1b3f14f43f9a77914fbf6f0d70a5b7c89","date":1461609218,"type":0,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoComplexPolygon.Node#traverse(EdgeIterator,TraverseComparator,double,double).mjava","pathOld":"/dev/null","sourceNew":"    public boolean traverse(final EdgeIterator edgeIterator, final TraverseComparator edgeComparator, final double minValue, final double maxValue) {\n      Node currentNode = this;\n      while (currentNode != null) {\n        final int result = edgeComparator.compare(currentNode.edge, minValue, maxValue);\n        if (result < 0) {\n          currentNode = lesser;\n        } else if (result > 0) {\n          currentNode = greater;\n        } else {\n          if (!edgeIterator.matches(edge)) {\n            return false;\n          }\n          currentNode = overlaps;\n        }\n      }\n      return true;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"265e2d0799e876e7c751a97229b0d8007cd79f0a","date":1461779668,"type":3,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoComplexPolygon.Node#traverse(EdgeIterator,TraverseComparator,double,double).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoComplexPolygon.Node#traverse(EdgeIterator,TraverseComparator,double,double).mjava","sourceNew":"    public boolean traverse(final EdgeIterator edgeIterator, final TraverseComparator edgeComparator, final double minValue, final double maxValue) {\n      Node currentNode = this;\n      while (currentNode != null) {\n        final int result = edgeComparator.compare(currentNode.edge, minValue, maxValue);\n        if (result < 0) {\n          currentNode = currentNode.lesser;\n        } else if (result > 0) {\n          currentNode = currentNode.greater;\n        } else {\n          if (!edgeIterator.matches(currentNode.edge)) {\n            return false;\n          }\n          currentNode = currentNode.overlaps;\n        }\n      }\n      return true;\n    }\n\n","sourceOld":"    public boolean traverse(final EdgeIterator edgeIterator, final TraverseComparator edgeComparator, final double minValue, final double maxValue) {\n      Node currentNode = this;\n      while (currentNode != null) {\n        final int result = edgeComparator.compare(currentNode.edge, minValue, maxValue);\n        if (result < 0) {\n          currentNode = lesser;\n        } else if (result > 0) {\n          currentNode = greater;\n        } else {\n          if (!edgeIterator.matches(edge)) {\n            return false;\n          }\n          currentNode = overlaps;\n        }\n      }\n      return true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5b3ccbc7c0d21f9643de6c5c7894f67336dcb57a","date":1461845562,"type":5,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoComplexPolygon.Tree#traverse(EdgeIterator,double).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoComplexPolygon.Node#traverse(EdgeIterator,TraverseComparator,double,double).mjava","sourceNew":"    /** Traverse the tree, finding all edges that intersect the provided value.\n     * @param edgeIterator provides the method to call for any encountered matching edge.\n     * @param value is the value to match.\n     * @return false if the traversal was aborted before completion.\n     */\n    public boolean traverse(final EdgeIterator edgeIterator, final double value) {\n      // Since there is one distinct value we are looking for, we can just do a straight descent through the nodes.\n      Node currentNode = rootNode;\n      while (currentNode != null) {\n        if (value < currentNode.minimumValue) {\n          currentNode = currentNode.lesser;\n        } else if (value > currentNode.maximumValue) {\n          currentNode = currentNode.greater;\n        } else {\n          // We're within the bounds of the node.  Call the iterator, and descend\n          if (!edgeIterator.matches(currentNode.edge)) {\n            return false;\n          }\n          currentNode = currentNode.within;\n        }\n      }\n      return true;\n    }\n\n","sourceOld":"    public boolean traverse(final EdgeIterator edgeIterator, final TraverseComparator edgeComparator, final double minValue, final double maxValue) {\n      Node currentNode = this;\n      while (currentNode != null) {\n        final int result = edgeComparator.compare(currentNode.edge, minValue, maxValue);\n        if (result < 0) {\n          currentNode = currentNode.lesser;\n        } else if (result > 0) {\n          currentNode = currentNode.greater;\n        } else {\n          if (!edgeIterator.matches(currentNode.edge)) {\n            return false;\n          }\n          currentNode = currentNode.overlaps;\n        }\n      }\n      return true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"265e2d0799e876e7c751a97229b0d8007cd79f0a":["116824c1b3f14f43f9a77914fbf6f0d70a5b7c89"],"5b3ccbc7c0d21f9643de6c5c7894f67336dcb57a":["265e2d0799e876e7c751a97229b0d8007cd79f0a"],"116824c1b3f14f43f9a77914fbf6f0d70a5b7c89":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["116824c1b3f14f43f9a77914fbf6f0d70a5b7c89","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"265e2d0799e876e7c751a97229b0d8007cd79f0a":["5b3ccbc7c0d21f9643de6c5c7894f67336dcb57a"],"5b3ccbc7c0d21f9643de6c5c7894f67336dcb57a":[],"116824c1b3f14f43f9a77914fbf6f0d70a5b7c89":["265e2d0799e876e7c751a97229b0d8007cd79f0a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5b3ccbc7c0d21f9643de6c5c7894f67336dcb57a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}