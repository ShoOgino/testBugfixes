{"path":"solr/core/src/test/org/apache/solr/util/TestCircuitBreaker#testBuildingMemoryPressure().mjava","commits":[{"id":"b73e9c1914a76cfa16576e9d7165e286cc35c36e","date":1593099382,"type":0,"author":"Atri Sharma","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/util/TestCircuitBreaker#testBuildingMemoryPressure().mjava","pathOld":"/dev/null","sourceNew":"  public void testBuildingMemoryPressure() {\n    ExecutorService executor = ExecutorUtil.newMDCAwareCachedThreadPool(\n        new SolrNamedThreadFactory(\"TestCircuitBreaker\"));\n    HashMap<String, String> args = new HashMap<String, String>();\n\n    args.put(QueryParsing.DEFTYPE, CircuitBreaker.NAME);\n    args.put(CommonParams.FL, \"id\");\n\n    AtomicInteger failureCount = new AtomicInteger();\n\n    try {\n      CircuitBreaker circuitBreaker = new BuildingUpMemoryPressureCircuitBreaker(h.getCore());\n\n      h.getCore().getCircuitBreakerManager().registerCircuitBreaker(CircuitBreakerType.MEMORY, circuitBreaker);\n\n      for (int i = 0; i < 5; i++) {\n        executor.submit(() -> {\n          try {\n            h.query(req(\"name:\\\"john smith\\\"\"));\n          } catch (SolrException e) {\n            failureCount.incrementAndGet();\n          } catch (Exception e) {\n            throw new RuntimeException(e.getMessage());\n          }\n        });\n      }\n\n      executor.shutdown();\n      try {\n        executor.awaitTermination(Long.MAX_VALUE, TimeUnit.NANOSECONDS);\n      } catch (InterruptedException e) {\n        throw new RuntimeException(e.getMessage());\n      }\n\n      assertEquals(\"Number of failed queries is not correct\", 1, failureCount.get());\n    } finally {\n      if (!executor.isShutdown()) {\n        executor.shutdown();\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c83e4e3bad02b24e922b644b91e819af19553a79","date":1593190221,"type":3,"author":"Atri Sharma","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/util/TestCircuitBreaker#testBuildingMemoryPressure().mjava","pathOld":"solr/core/src/test/org/apache/solr/util/TestCircuitBreaker#testBuildingMemoryPressure().mjava","sourceNew":"  public void testBuildingMemoryPressure() {\n    ExecutorService executor = ExecutorUtil.newMDCAwareCachedThreadPool(\n        new SolrNamedThreadFactory(\"TestCircuitBreaker\"));\n    HashMap<String, String> args = new HashMap<String, String>();\n\n    args.put(QueryParsing.DEFTYPE, CircuitBreaker.NAME);\n    args.put(CommonParams.FL, \"id\");\n\n    AtomicInteger failureCount = new AtomicInteger();\n\n    try {\n      CircuitBreaker circuitBreaker = new BuildingUpMemoryPressureCircuitBreaker(h.getCore());\n\n      h.getCore().getCircuitBreakerManager().registerCircuitBreaker(CircuitBreakerType.MEMORY, circuitBreaker);\n\n      for (int i = 0; i < 5; i++) {\n        executor.submit(() -> {\n          try {\n            h.query(req(\"name:\\\"john smith\\\"\"));\n          } catch (SolrException e) {\n            failureCount.incrementAndGet();\n          } catch (Exception e) {\n            throw new RuntimeException(e.getMessage());\n          }\n        });\n      }\n\n      executor.shutdown();\n      try {\n        executor.awaitTermination(Long.MAX_VALUE, TimeUnit.NANOSECONDS);\n      } catch (InterruptedException e) {\n        throw new RuntimeException(e.getMessage());\n      }\n\n      assertEquals(\"Number of failed queries is not correct\", 1, failureCount.get());\n\n      circuitBreaker = new MemoryCircuitBreaker(h.getCore());\n\n      h.getCore().getCircuitBreakerManager().registerCircuitBreaker(CircuitBreakerType.MEMORY, circuitBreaker);\n    } finally {\n      if (!executor.isShutdown()) {\n        executor.shutdown();\n      }\n    }\n  }\n\n","sourceOld":"  public void testBuildingMemoryPressure() {\n    ExecutorService executor = ExecutorUtil.newMDCAwareCachedThreadPool(\n        new SolrNamedThreadFactory(\"TestCircuitBreaker\"));\n    HashMap<String, String> args = new HashMap<String, String>();\n\n    args.put(QueryParsing.DEFTYPE, CircuitBreaker.NAME);\n    args.put(CommonParams.FL, \"id\");\n\n    AtomicInteger failureCount = new AtomicInteger();\n\n    try {\n      CircuitBreaker circuitBreaker = new BuildingUpMemoryPressureCircuitBreaker(h.getCore());\n\n      h.getCore().getCircuitBreakerManager().registerCircuitBreaker(CircuitBreakerType.MEMORY, circuitBreaker);\n\n      for (int i = 0; i < 5; i++) {\n        executor.submit(() -> {\n          try {\n            h.query(req(\"name:\\\"john smith\\\"\"));\n          } catch (SolrException e) {\n            failureCount.incrementAndGet();\n          } catch (Exception e) {\n            throw new RuntimeException(e.getMessage());\n          }\n        });\n      }\n\n      executor.shutdown();\n      try {\n        executor.awaitTermination(Long.MAX_VALUE, TimeUnit.NANOSECONDS);\n      } catch (InterruptedException e) {\n        throw new RuntimeException(e.getMessage());\n      }\n\n      assertEquals(\"Number of failed queries is not correct\", 1, failureCount.get());\n    } finally {\n      if (!executor.isShutdown()) {\n        executor.shutdown();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d9c8a0d139a128916bbde3ee20210c0aec72f4f7","date":1593281638,"type":3,"author":"Atri Sharma","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/util/TestCircuitBreaker#testBuildingMemoryPressure().mjava","pathOld":"solr/core/src/test/org/apache/solr/util/TestCircuitBreaker#testBuildingMemoryPressure().mjava","sourceNew":"  public void testBuildingMemoryPressure() {\n    ExecutorService executor = ExecutorUtil.newMDCAwareCachedThreadPool(\n        new SolrNamedThreadFactory(\"TestCircuitBreaker\"));\n    HashMap<String, String> args = new HashMap<String, String>();\n\n    args.put(QueryParsing.DEFTYPE, CircuitBreaker.NAME);\n    args.put(CommonParams.FL, \"id\");\n\n    AtomicInteger failureCount = new AtomicInteger();\n\n    try {\n      CircuitBreaker circuitBreaker = new BuildingUpMemoryPressureCircuitBreaker(h.getCore());\n\n      h.getCore().getCircuitBreakerManager().registerCircuitBreaker(CircuitBreakerType.MEMORY, circuitBreaker);\n\n      for (int i = 0; i < 5; i++) {\n        executor.submit(() -> {\n          try {\n            h.query(req(\"name:\\\"john smith\\\"\"));\n          } catch (SolrException e) {\n            failureCount.incrementAndGet();\n          } catch (Exception e) {\n            throw new RuntimeException(e.getMessage());\n          }\n        });\n      }\n\n      executor.shutdown();\n      try {\n        executor.awaitTermination(Long.MAX_VALUE, TimeUnit.NANOSECONDS);\n      } catch (InterruptedException e) {\n        throw new RuntimeException(e.getMessage());\n      }\n\n      assertEquals(\"Number of failed queries is not correct\", 1, failureCount.get());\n    } finally {\n      if (!executor.isShutdown()) {\n        executor.shutdown();\n      }\n    }\n  }\n\n","sourceOld":"  public void testBuildingMemoryPressure() {\n    ExecutorService executor = ExecutorUtil.newMDCAwareCachedThreadPool(\n        new SolrNamedThreadFactory(\"TestCircuitBreaker\"));\n    HashMap<String, String> args = new HashMap<String, String>();\n\n    args.put(QueryParsing.DEFTYPE, CircuitBreaker.NAME);\n    args.put(CommonParams.FL, \"id\");\n\n    AtomicInteger failureCount = new AtomicInteger();\n\n    try {\n      CircuitBreaker circuitBreaker = new BuildingUpMemoryPressureCircuitBreaker(h.getCore());\n\n      h.getCore().getCircuitBreakerManager().registerCircuitBreaker(CircuitBreakerType.MEMORY, circuitBreaker);\n\n      for (int i = 0; i < 5; i++) {\n        executor.submit(() -> {\n          try {\n            h.query(req(\"name:\\\"john smith\\\"\"));\n          } catch (SolrException e) {\n            failureCount.incrementAndGet();\n          } catch (Exception e) {\n            throw new RuntimeException(e.getMessage());\n          }\n        });\n      }\n\n      executor.shutdown();\n      try {\n        executor.awaitTermination(Long.MAX_VALUE, TimeUnit.NANOSECONDS);\n      } catch (InterruptedException e) {\n        throw new RuntimeException(e.getMessage());\n      }\n\n      assertEquals(\"Number of failed queries is not correct\", 1, failureCount.get());\n\n      circuitBreaker = new MemoryCircuitBreaker(h.getCore());\n\n      h.getCore().getCircuitBreakerManager().registerCircuitBreaker(CircuitBreakerType.MEMORY, circuitBreaker);\n    } finally {\n      if (!executor.isShutdown()) {\n        executor.shutdown();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c24f8f07a3e4a885c0e19286d51575df197a611b","date":1593281672,"type":4,"author":"Atri Sharma","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/util/TestCircuitBreaker#testBuildingMemoryPressure().mjava","sourceNew":null,"sourceOld":"  public void testBuildingMemoryPressure() {\n    ExecutorService executor = ExecutorUtil.newMDCAwareCachedThreadPool(\n        new SolrNamedThreadFactory(\"TestCircuitBreaker\"));\n    HashMap<String, String> args = new HashMap<String, String>();\n\n    args.put(QueryParsing.DEFTYPE, CircuitBreaker.NAME);\n    args.put(CommonParams.FL, \"id\");\n\n    AtomicInteger failureCount = new AtomicInteger();\n\n    try {\n      CircuitBreaker circuitBreaker = new BuildingUpMemoryPressureCircuitBreaker(h.getCore());\n\n      h.getCore().getCircuitBreakerManager().registerCircuitBreaker(CircuitBreakerType.MEMORY, circuitBreaker);\n\n      for (int i = 0; i < 5; i++) {\n        executor.submit(() -> {\n          try {\n            h.query(req(\"name:\\\"john smith\\\"\"));\n          } catch (SolrException e) {\n            failureCount.incrementAndGet();\n          } catch (Exception e) {\n            throw new RuntimeException(e.getMessage());\n          }\n        });\n      }\n\n      executor.shutdown();\n      try {\n        executor.awaitTermination(Long.MAX_VALUE, TimeUnit.NANOSECONDS);\n      } catch (InterruptedException e) {\n        throw new RuntimeException(e.getMessage());\n      }\n\n      assertEquals(\"Number of failed queries is not correct\", 1, failureCount.get());\n    } finally {\n      if (!executor.isShutdown()) {\n        executor.shutdown();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8ef8e4fae9bcd156a117f5758819aeabdae3e963","date":1593674028,"type":0,"author":"Atri Sharma","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/util/TestCircuitBreaker#testBuildingMemoryPressure().mjava","pathOld":"/dev/null","sourceNew":"  public void testBuildingMemoryPressure() {\n    ExecutorService executor = ExecutorUtil.newMDCAwareCachedThreadPool(\n        new SolrNamedThreadFactory(\"TestCircuitBreaker\"));\n    HashMap<String, String> args = new HashMap<String, String>();\n\n    args.put(QueryParsing.DEFTYPE, CircuitBreaker.NAME);\n    args.put(CommonParams.FL, \"id\");\n\n    AtomicInteger failureCount = new AtomicInteger();\n\n    try {\n      CircuitBreaker circuitBreaker = new BuildingUpMemoryPressureCircuitBreaker(h.getCore().getSolrConfig());\n\n      h.getCore().getCircuitBreakerManager().register(circuitBreaker);\n\n      for (int i = 0; i < 5; i++) {\n        executor.submit(() -> {\n          try {\n            h.query(req(\"name:\\\"john smith\\\"\"));\n          } catch (SolrException e) {\n            failureCount.incrementAndGet();\n          } catch (Exception e) {\n            throw new RuntimeException(e.getMessage());\n          }\n        });\n      }\n\n      executor.shutdown();\n      try {\n        executor.awaitTermination(Long.MAX_VALUE, TimeUnit.NANOSECONDS);\n      } catch (InterruptedException e) {\n        throw new RuntimeException(e.getMessage());\n      }\n\n      assertEquals(\"Number of failed queries is not correct\", 1, failureCount.get());\n    } finally {\n      if (!executor.isShutdown()) {\n        executor.shutdown();\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9a18e054d7e71da5abc99ebbd3b6eb77c1797765","date":1594632779,"type":3,"author":"Atri Sharma","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/util/TestCircuitBreaker#testBuildingMemoryPressure().mjava","pathOld":"solr/core/src/test/org/apache/solr/util/TestCircuitBreaker#testBuildingMemoryPressure().mjava","sourceNew":"  public void testBuildingMemoryPressure() {\n    ExecutorService executor = ExecutorUtil.newMDCAwareCachedThreadPool(\n        new SolrNamedThreadFactory(\"TestCircuitBreaker\"));\n    HashMap<String, String> args = new HashMap<String, String>();\n\n    args.put(QueryParsing.DEFTYPE, CircuitBreaker.NAME);\n    args.put(CommonParams.FL, \"id\");\n\n    AtomicInteger failureCount = new AtomicInteger();\n\n    try {\n      CircuitBreaker circuitBreaker = new BuildingUpMemoryPressureCircuitBreaker(h.getCore().getSolrConfig());\n\n      h.getCore().getCircuitBreakerManager().register(circuitBreaker);\n\n      for (int i = 0; i < 5; i++) {\n        executor.submit(() -> {\n          try {\n            h.query(req(\"name:\\\"john smith\\\"\"));\n          } catch (SolrException e) {\n            if (!e.getMessage().startsWith(\"Circuit Breakers tripped\")) {\n              if (log.isInfoEnabled()) {\n                String logMessage = \"Expected error message for testBuildingMemoryPressure was not received. Error message \" + e.getMessage();\n                log.info(logMessage);\n              }\n              throw new RuntimeException(\"Expected error message was not received. Error message \" + e.getMessage());\n            }\n            failureCount.incrementAndGet();\n          } catch (Exception e) {\n            throw new RuntimeException(e.getMessage());\n          }\n        });\n      }\n\n      executor.shutdown();\n      try {\n        executor.awaitTermination(Long.MAX_VALUE, TimeUnit.NANOSECONDS);\n      } catch (InterruptedException e) {\n        throw new RuntimeException(e.getMessage());\n      }\n\n      assertEquals(\"Number of failed queries is not correct\", 1, failureCount.get());\n    } finally {\n      if (!executor.isShutdown()) {\n        executor.shutdown();\n      }\n    }\n  }\n\n","sourceOld":"  public void testBuildingMemoryPressure() {\n    ExecutorService executor = ExecutorUtil.newMDCAwareCachedThreadPool(\n        new SolrNamedThreadFactory(\"TestCircuitBreaker\"));\n    HashMap<String, String> args = new HashMap<String, String>();\n\n    args.put(QueryParsing.DEFTYPE, CircuitBreaker.NAME);\n    args.put(CommonParams.FL, \"id\");\n\n    AtomicInteger failureCount = new AtomicInteger();\n\n    try {\n      CircuitBreaker circuitBreaker = new BuildingUpMemoryPressureCircuitBreaker(h.getCore().getSolrConfig());\n\n      h.getCore().getCircuitBreakerManager().register(circuitBreaker);\n\n      for (int i = 0; i < 5; i++) {\n        executor.submit(() -> {\n          try {\n            h.query(req(\"name:\\\"john smith\\\"\"));\n          } catch (SolrException e) {\n            failureCount.incrementAndGet();\n          } catch (Exception e) {\n            throw new RuntimeException(e.getMessage());\n          }\n        });\n      }\n\n      executor.shutdown();\n      try {\n        executor.awaitTermination(Long.MAX_VALUE, TimeUnit.NANOSECONDS);\n      } catch (InterruptedException e) {\n        throw new RuntimeException(e.getMessage());\n      }\n\n      assertEquals(\"Number of failed queries is not correct\", 1, failureCount.get());\n    } finally {\n      if (!executor.isShutdown()) {\n        executor.shutdown();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a761febaf4b3c09d4490395eb90617263016fc2a","date":1597909886,"type":3,"author":"Atri Sharma","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/util/TestCircuitBreaker#testBuildingMemoryPressure().mjava","pathOld":"solr/core/src/test/org/apache/solr/util/TestCircuitBreaker#testBuildingMemoryPressure().mjava","sourceNew":"  public void testBuildingMemoryPressure() {\n    ExecutorService executor = ExecutorUtil.newMDCAwareCachedThreadPool(\n        new SolrNamedThreadFactory(\"TestCircuitBreaker\"));\n    HashMap<String, String> args = new HashMap<String, String>();\n\n    args.put(QueryParsing.DEFTYPE, CircuitBreaker.NAME);\n    args.put(CommonParams.FL, \"id\");\n\n    AtomicInteger failureCount = new AtomicInteger();\n\n    try {\n      removeAllExistingCircuitBreakers();\n\n      CircuitBreaker circuitBreaker = new BuildingUpMemoryPressureCircuitBreaker(h.getCore().getSolrConfig());\n\n      h.getCore().getCircuitBreakerManager().register(circuitBreaker);\n\n      List<Future<?>> futures = new ArrayList<>();\n\n      for (int i = 0; i < 5; i++) {\n        Future<?> future = executor.submit(() -> {\n          try {\n            h.query(req(\"name:\\\"john smith\\\"\"));\n          } catch (SolrException e) {\n            assertThat(e.getMessage(), containsString(\"Circuit Breakers tripped\"));\n            failureCount.incrementAndGet();\n          } catch (Exception e) {\n            throw new RuntimeException(e.getMessage());\n          }\n        });\n\n        futures.add(future);\n      }\n\n      for  (Future<?> future : futures) {\n        try {\n          future.get();\n        } catch (Exception e) {\n          throw new RuntimeException(e.getMessage());\n        }\n      }\n\n      executor.shutdown();\n      try {\n        executor.awaitTermination(Long.MAX_VALUE, TimeUnit.NANOSECONDS);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        throw new RuntimeException(e.getMessage());\n      }\n\n      assertEquals(\"Number of failed queries is not correct\", 1, failureCount.get());\n    } finally {\n      if (!executor.isShutdown()) {\n        executor.shutdown();\n      }\n    }\n  }\n\n","sourceOld":"  public void testBuildingMemoryPressure() {\n    ExecutorService executor = ExecutorUtil.newMDCAwareCachedThreadPool(\n        new SolrNamedThreadFactory(\"TestCircuitBreaker\"));\n    HashMap<String, String> args = new HashMap<String, String>();\n\n    args.put(QueryParsing.DEFTYPE, CircuitBreaker.NAME);\n    args.put(CommonParams.FL, \"id\");\n\n    AtomicInteger failureCount = new AtomicInteger();\n\n    try {\n      CircuitBreaker circuitBreaker = new BuildingUpMemoryPressureCircuitBreaker(h.getCore().getSolrConfig());\n\n      h.getCore().getCircuitBreakerManager().register(circuitBreaker);\n\n      for (int i = 0; i < 5; i++) {\n        executor.submit(() -> {\n          try {\n            h.query(req(\"name:\\\"john smith\\\"\"));\n          } catch (SolrException e) {\n            if (!e.getMessage().startsWith(\"Circuit Breakers tripped\")) {\n              if (log.isInfoEnabled()) {\n                String logMessage = \"Expected error message for testBuildingMemoryPressure was not received. Error message \" + e.getMessage();\n                log.info(logMessage);\n              }\n              throw new RuntimeException(\"Expected error message was not received. Error message \" + e.getMessage());\n            }\n            failureCount.incrementAndGet();\n          } catch (Exception e) {\n            throw new RuntimeException(e.getMessage());\n          }\n        });\n      }\n\n      executor.shutdown();\n      try {\n        executor.awaitTermination(Long.MAX_VALUE, TimeUnit.NANOSECONDS);\n      } catch (InterruptedException e) {\n        throw new RuntimeException(e.getMessage());\n      }\n\n      assertEquals(\"Number of failed queries is not correct\", 1, failureCount.get());\n    } finally {\n      if (!executor.isShutdown()) {\n        executor.shutdown();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ef286034ca1be064a363aaec38e34e64a59154c","date":1598517382,"type":3,"author":"Atri Sharma","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/util/TestCircuitBreaker#testBuildingMemoryPressure().mjava","pathOld":"solr/core/src/test/org/apache/solr/util/TestCircuitBreaker#testBuildingMemoryPressure().mjava","sourceNew":"  public void testBuildingMemoryPressure() {\n    ExecutorService executor = ExecutorUtil.newMDCAwareCachedThreadPool(\n        new SolrNamedThreadFactory(\"TestCircuitBreaker\"));\n    HashMap<String, String> args = new HashMap<String, String>();\n\n    args.put(QueryParsing.DEFTYPE, CircuitBreaker.NAME);\n    args.put(CommonParams.FL, \"id\");\n\n    AtomicInteger failureCount = new AtomicInteger();\n\n    try {\n      removeAllExistingCircuitBreakers();\n\n      PluginInfo pluginInfo = h.getCore().getSolrConfig().getPluginInfo(CircuitBreakerManager.class.getName());\n\n      CircuitBreaker.CircuitBreakerConfig circuitBreakerConfig = CircuitBreakerManager.buildCBConfig(pluginInfo);\n      CircuitBreaker circuitBreaker = new BuildingUpMemoryPressureCircuitBreaker(circuitBreakerConfig);\n\n      h.getCore().getCircuitBreakerManager().register(circuitBreaker);\n\n      List<Future<?>> futures = new ArrayList<>();\n\n      for (int i = 0; i < 5; i++) {\n        Future<?> future = executor.submit(() -> {\n          try {\n            h.query(req(\"name:\\\"john smith\\\"\"));\n          } catch (SolrException e) {\n            assertThat(e.getMessage(), containsString(\"Circuit Breakers tripped\"));\n            failureCount.incrementAndGet();\n          } catch (Exception e) {\n            throw new RuntimeException(e.getMessage());\n          }\n        });\n\n        futures.add(future);\n      }\n\n      for  (Future<?> future : futures) {\n        try {\n          future.get();\n        } catch (Exception e) {\n          throw new RuntimeException(e.getMessage());\n        }\n      }\n\n      executor.shutdown();\n      try {\n        executor.awaitTermination(Long.MAX_VALUE, TimeUnit.NANOSECONDS);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        throw new RuntimeException(e.getMessage());\n      }\n\n      assertEquals(\"Number of failed queries is not correct\", 1, failureCount.get());\n    } finally {\n      if (!executor.isShutdown()) {\n        executor.shutdown();\n      }\n    }\n  }\n\n","sourceOld":"  public void testBuildingMemoryPressure() {\n    ExecutorService executor = ExecutorUtil.newMDCAwareCachedThreadPool(\n        new SolrNamedThreadFactory(\"TestCircuitBreaker\"));\n    HashMap<String, String> args = new HashMap<String, String>();\n\n    args.put(QueryParsing.DEFTYPE, CircuitBreaker.NAME);\n    args.put(CommonParams.FL, \"id\");\n\n    AtomicInteger failureCount = new AtomicInteger();\n\n    try {\n      removeAllExistingCircuitBreakers();\n\n      CircuitBreaker circuitBreaker = new BuildingUpMemoryPressureCircuitBreaker(h.getCore().getSolrConfig());\n\n      h.getCore().getCircuitBreakerManager().register(circuitBreaker);\n\n      List<Future<?>> futures = new ArrayList<>();\n\n      for (int i = 0; i < 5; i++) {\n        Future<?> future = executor.submit(() -> {\n          try {\n            h.query(req(\"name:\\\"john smith\\\"\"));\n          } catch (SolrException e) {\n            assertThat(e.getMessage(), containsString(\"Circuit Breakers tripped\"));\n            failureCount.incrementAndGet();\n          } catch (Exception e) {\n            throw new RuntimeException(e.getMessage());\n          }\n        });\n\n        futures.add(future);\n      }\n\n      for  (Future<?> future : futures) {\n        try {\n          future.get();\n        } catch (Exception e) {\n          throw new RuntimeException(e.getMessage());\n        }\n      }\n\n      executor.shutdown();\n      try {\n        executor.awaitTermination(Long.MAX_VALUE, TimeUnit.NANOSECONDS);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        throw new RuntimeException(e.getMessage());\n      }\n\n      assertEquals(\"Number of failed queries is not correct\", 1, failureCount.get());\n    } finally {\n      if (!executor.isShutdown()) {\n        executor.shutdown();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c24f8f07a3e4a885c0e19286d51575df197a611b":["d9c8a0d139a128916bbde3ee20210c0aec72f4f7"],"0ef286034ca1be064a363aaec38e34e64a59154c":["a761febaf4b3c09d4490395eb90617263016fc2a"],"9a18e054d7e71da5abc99ebbd3b6eb77c1797765":["8ef8e4fae9bcd156a117f5758819aeabdae3e963"],"c83e4e3bad02b24e922b644b91e819af19553a79":["b73e9c1914a76cfa16576e9d7165e286cc35c36e"],"d9c8a0d139a128916bbde3ee20210c0aec72f4f7":["c83e4e3bad02b24e922b644b91e819af19553a79"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b73e9c1914a76cfa16576e9d7165e286cc35c36e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8ef8e4fae9bcd156a117f5758819aeabdae3e963":["c24f8f07a3e4a885c0e19286d51575df197a611b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0ef286034ca1be064a363aaec38e34e64a59154c"],"a761febaf4b3c09d4490395eb90617263016fc2a":["9a18e054d7e71da5abc99ebbd3b6eb77c1797765"]},"commit2Childs":{"c24f8f07a3e4a885c0e19286d51575df197a611b":["8ef8e4fae9bcd156a117f5758819aeabdae3e963"],"0ef286034ca1be064a363aaec38e34e64a59154c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9a18e054d7e71da5abc99ebbd3b6eb77c1797765":["a761febaf4b3c09d4490395eb90617263016fc2a"],"c83e4e3bad02b24e922b644b91e819af19553a79":["d9c8a0d139a128916bbde3ee20210c0aec72f4f7"],"d9c8a0d139a128916bbde3ee20210c0aec72f4f7":["c24f8f07a3e4a885c0e19286d51575df197a611b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b73e9c1914a76cfa16576e9d7165e286cc35c36e"],"b73e9c1914a76cfa16576e9d7165e286cc35c36e":["c83e4e3bad02b24e922b644b91e819af19553a79"],"8ef8e4fae9bcd156a117f5758819aeabdae3e963":["9a18e054d7e71da5abc99ebbd3b6eb77c1797765"],"a761febaf4b3c09d4490395eb90617263016fc2a":["0ef286034ca1be064a363aaec38e34e64a59154c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}