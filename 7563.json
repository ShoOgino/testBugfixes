{"path":"solr/core/src/test/org/apache/solr/update/AddBlockUpdateTest#testOverwrite().mjava","commits":[{"id":"61da2e4482f2cf6149ff5323d107dded56e89400","date":1378215401,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/AddBlockUpdateTest#testOverwrite().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testOverwrite() throws IOException{\n    assertU(add(\n      nest(doc(\"id\",\"X\", parent, \"X\"), \n             doc(child,\"a\", \"id\", \"66\"), \n             doc(child,\"b\", \"id\", \"66\"))));\n    assertU(add(\n      nest(doc(\"id\",\"Y\", parent, \"Y\"), \n             doc(child,\"a\", \"id\", \"66\"), \n             doc(child,\"b\", \"id\", \"66\"))));\n    String overwritten = random().nextBoolean() ? \"X\": \"Y\";\n    String dubbed = overwritten==\"X\" ? \"Y\":\"X\";\n    \n    assertU(add(\n        nest(doc(\"id\",overwritten, parent, overwritten), \n               doc(child,\"c\",\"id\", \"66\"), \n               doc(child,\"d\",\"id\", \"66\")), \"overwrite\", \"true\"));\n    assertU(add(\n        nest(doc(\"id\",dubbed, parent, dubbed), \n               doc(child,\"c\",\"id\", \"66\"), \n               doc(child,\"d\",\"id\", \"66\")), \"overwrite\", \"false\"));\n    \n    assertU(commit());\n    \n    assertQ(req(parent+\":\"+overwritten, \"//*[@numFound='1']\"));\n    assertQ(req(parent+\":\"+dubbed, \"//*[@numFound='2']\"));\n    \n    final SolrIndexSearcher searcher = getSearcher();\n    assertSingleParentOf(searcher, one(\"ab\"), dubbed);\n    \n    final TopDocs docs = searcher.search(join(one(\"cd\")), 10);\n    assertEquals(2, docs.totalHits);\n    final String pAct = searcher.doc(docs.scoreDocs[0].doc).get(parent)+\n                        searcher.doc(docs.scoreDocs[1].doc).get(parent);\n    assertTrue(pAct.contains(dubbed) && pAct.contains(overwritten) && pAct.length()==2);\n    \n    assertQ(req(\"id:66\", \"//*[@numFound='6']\"));\n    assertQ(req(child+\":(a b)\", \"//*[@numFound='2']\"));\n    assertQ(req(child+\":(c d)\", \"//*[@numFound='4']\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c5ce7c704ca874aa623a99f2669737b52ec71cfc","date":1528728510,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/AddBlockUpdateTest#testOverwrite().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/AddBlockUpdateTest#testOverwrite().mjava","sourceNew":"  @Test\n  public void testOverwrite() throws IOException{\n    assertU(add(\n      nest(doc(\"id\",\"X\", parent, \"X\"), \n             doc(child,\"a\", \"id\", \"66\"), \n             doc(child,\"b\", \"id\", \"66\"))));\n    assertU(add(\n      nest(doc(\"id\",\"Y\", parent, \"Y\"), \n             doc(child,\"a\", \"id\", \"66\"), \n             doc(child,\"b\", \"id\", \"66\"))));\n    String overwritten = random().nextBoolean() ? \"X\": \"Y\";\n    String dubbed = overwritten==\"X\" ? \"Y\":\"X\";\n    \n    assertU(add(\n        nest(doc(\"id\",overwritten, parent, overwritten), \n               doc(child,\"c\",\"id\", \"66\"), \n               doc(child,\"d\",\"id\", \"66\")), \"overwrite\", \"true\"));\n    assertU(add(\n        nest(doc(\"id\",dubbed, parent, dubbed), \n               doc(child,\"c\",\"id\", \"66\"), \n               doc(child,\"d\",\"id\", \"66\")), \"overwrite\", \"false\"));\n    \n    assertU(commit());\n\n    assertQ(req(parent+\":\"+overwritten, \"//*[@numFound='1']\"));\n    assertQ(req(parent+\":\"+dubbed, \"//*[@numFound='2']\"));\n\n    final SolrIndexSearcher searcher = getSearcher();\n    assertSingleParentOf(searcher, one(\"ab\"), dubbed);\n\n    final TopDocs docs = searcher.search(join(one(\"cd\")), 10);\n    assertEquals(2, docs.totalHits);\n    final String pAct = searcher.doc(docs.scoreDocs[0].doc).get(parent)+\n                        searcher.doc(docs.scoreDocs[1].doc).get(parent);\n    assertTrue(pAct.contains(dubbed) && pAct.contains(overwritten) && pAct.length()==2);\n    \n    assertQ(req(\"id:66\", \"//*[@numFound='6']\"));\n    assertQ(req(child+\":(a b)\", \"//*[@numFound='2']\"));\n    assertQ(req(child+\":(c d)\", \"//*[@numFound='4']\"));\n  }\n\n","sourceOld":"  @Test\n  public void testOverwrite() throws IOException{\n    assertU(add(\n      nest(doc(\"id\",\"X\", parent, \"X\"), \n             doc(child,\"a\", \"id\", \"66\"), \n             doc(child,\"b\", \"id\", \"66\"))));\n    assertU(add(\n      nest(doc(\"id\",\"Y\", parent, \"Y\"), \n             doc(child,\"a\", \"id\", \"66\"), \n             doc(child,\"b\", \"id\", \"66\"))));\n    String overwritten = random().nextBoolean() ? \"X\": \"Y\";\n    String dubbed = overwritten==\"X\" ? \"Y\":\"X\";\n    \n    assertU(add(\n        nest(doc(\"id\",overwritten, parent, overwritten), \n               doc(child,\"c\",\"id\", \"66\"), \n               doc(child,\"d\",\"id\", \"66\")), \"overwrite\", \"true\"));\n    assertU(add(\n        nest(doc(\"id\",dubbed, parent, dubbed), \n               doc(child,\"c\",\"id\", \"66\"), \n               doc(child,\"d\",\"id\", \"66\")), \"overwrite\", \"false\"));\n    \n    assertU(commit());\n    \n    assertQ(req(parent+\":\"+overwritten, \"//*[@numFound='1']\"));\n    assertQ(req(parent+\":\"+dubbed, \"//*[@numFound='2']\"));\n    \n    final SolrIndexSearcher searcher = getSearcher();\n    assertSingleParentOf(searcher, one(\"ab\"), dubbed);\n    \n    final TopDocs docs = searcher.search(join(one(\"cd\")), 10);\n    assertEquals(2, docs.totalHits);\n    final String pAct = searcher.doc(docs.scoreDocs[0].doc).get(parent)+\n                        searcher.doc(docs.scoreDocs[1].doc).get(parent);\n    assertTrue(pAct.contains(dubbed) && pAct.contains(overwritten) && pAct.length()==2);\n    \n    assertQ(req(\"id:66\", \"//*[@numFound='6']\"));\n    assertQ(req(child+\":(a b)\", \"//*[@numFound='2']\"));\n    assertQ(req(child+\":(c d)\", \"//*[@numFound='4']\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/AddBlockUpdateTest#testOverwrite().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/AddBlockUpdateTest#testOverwrite().mjava","sourceNew":"  @Test\n  public void testOverwrite() throws IOException{\n    assertU(add(\n      nest(doc(\"id\",\"X\", parent, \"X\"), \n             doc(child,\"a\", \"id\", \"66\"), \n             doc(child,\"b\", \"id\", \"66\"))));\n    assertU(add(\n      nest(doc(\"id\",\"Y\", parent, \"Y\"), \n             doc(child,\"a\", \"id\", \"66\"), \n             doc(child,\"b\", \"id\", \"66\"))));\n    String overwritten = random().nextBoolean() ? \"X\": \"Y\";\n    String dubbed = overwritten==\"X\" ? \"Y\":\"X\";\n    \n    assertU(add(\n        nest(doc(\"id\",overwritten, parent, overwritten), \n               doc(child,\"c\",\"id\", \"66\"), \n               doc(child,\"d\",\"id\", \"66\")), \"overwrite\", \"true\"));\n    assertU(add(\n        nest(doc(\"id\",dubbed, parent, dubbed), \n               doc(child,\"c\",\"id\", \"66\"), \n               doc(child,\"d\",\"id\", \"66\")), \"overwrite\", \"false\"));\n    \n    assertU(commit());\n\n    assertQ(req(parent+\":\"+overwritten, \"//*[@numFound='1']\"));\n    assertQ(req(parent+\":\"+dubbed, \"//*[@numFound='2']\"));\n\n    final SolrIndexSearcher searcher = getSearcher();\n    assertSingleParentOf(searcher, one(\"ab\"), dubbed);\n\n    final TopDocs docs = searcher.search(join(one(\"cd\")), 10);\n    assertEquals(2, docs.totalHits);\n    final String pAct = searcher.doc(docs.scoreDocs[0].doc).get(parent)+\n                        searcher.doc(docs.scoreDocs[1].doc).get(parent);\n    assertTrue(pAct.contains(dubbed) && pAct.contains(overwritten) && pAct.length()==2);\n    \n    assertQ(req(\"id:66\", \"//*[@numFound='6']\"));\n    assertQ(req(child+\":(a b)\", \"//*[@numFound='2']\"));\n    assertQ(req(child+\":(c d)\", \"//*[@numFound='4']\"));\n  }\n\n","sourceOld":"  @Test\n  public void testOverwrite() throws IOException{\n    assertU(add(\n      nest(doc(\"id\",\"X\", parent, \"X\"), \n             doc(child,\"a\", \"id\", \"66\"), \n             doc(child,\"b\", \"id\", \"66\"))));\n    assertU(add(\n      nest(doc(\"id\",\"Y\", parent, \"Y\"), \n             doc(child,\"a\", \"id\", \"66\"), \n             doc(child,\"b\", \"id\", \"66\"))));\n    String overwritten = random().nextBoolean() ? \"X\": \"Y\";\n    String dubbed = overwritten==\"X\" ? \"Y\":\"X\";\n    \n    assertU(add(\n        nest(doc(\"id\",overwritten, parent, overwritten), \n               doc(child,\"c\",\"id\", \"66\"), \n               doc(child,\"d\",\"id\", \"66\")), \"overwrite\", \"true\"));\n    assertU(add(\n        nest(doc(\"id\",dubbed, parent, dubbed), \n               doc(child,\"c\",\"id\", \"66\"), \n               doc(child,\"d\",\"id\", \"66\")), \"overwrite\", \"false\"));\n    \n    assertU(commit());\n    \n    assertQ(req(parent+\":\"+overwritten, \"//*[@numFound='1']\"));\n    assertQ(req(parent+\":\"+dubbed, \"//*[@numFound='2']\"));\n    \n    final SolrIndexSearcher searcher = getSearcher();\n    assertSingleParentOf(searcher, one(\"ab\"), dubbed);\n    \n    final TopDocs docs = searcher.search(join(one(\"cd\")), 10);\n    assertEquals(2, docs.totalHits);\n    final String pAct = searcher.doc(docs.scoreDocs[0].doc).get(parent)+\n                        searcher.doc(docs.scoreDocs[1].doc).get(parent);\n    assertTrue(pAct.contains(dubbed) && pAct.contains(overwritten) && pAct.length()==2);\n    \n    assertQ(req(\"id:66\", \"//*[@numFound='6']\"));\n    assertQ(req(child+\":(a b)\", \"//*[@numFound='2']\"));\n    assertQ(req(child+\":(c d)\", \"//*[@numFound='4']\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/AddBlockUpdateTest#testOverwrite().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/AddBlockUpdateTest#testOverwrite().mjava","sourceNew":"  @Test\n  public void testOverwrite() throws IOException{\n    assertU(add(\n      nest(doc(\"id\",\"X\", parent, \"X\"), \n             doc(child,\"a\", \"id\", \"66\"), \n             doc(child,\"b\", \"id\", \"66\"))));\n    assertU(add(\n      nest(doc(\"id\",\"Y\", parent, \"Y\"), \n             doc(child,\"a\", \"id\", \"66\"), \n             doc(child,\"b\", \"id\", \"66\"))));\n    String overwritten = random().nextBoolean() ? \"X\": \"Y\";\n    String dubbed = overwritten==\"X\" ? \"Y\":\"X\";\n    \n    assertU(add(\n        nest(doc(\"id\",overwritten, parent, overwritten), \n               doc(child,\"c\",\"id\", \"66\"), \n               doc(child,\"d\",\"id\", \"66\")), \"overwrite\", \"true\"));\n    assertU(add(\n        nest(doc(\"id\",dubbed, parent, dubbed), \n               doc(child,\"c\",\"id\", \"66\"), \n               doc(child,\"d\",\"id\", \"66\")), \"overwrite\", \"false\"));\n    \n    assertU(commit());\n\n    assertQ(req(parent+\":\"+overwritten, \"//*[@numFound='1']\"));\n    assertQ(req(parent+\":\"+dubbed, \"//*[@numFound='2']\"));\n\n    final SolrIndexSearcher searcher = getSearcher();\n    assertSingleParentOf(searcher, one(\"ab\"), dubbed);\n\n    final TopDocs docs = searcher.search(join(one(\"cd\")), 10);\n    assertEquals(2, docs.totalHits);\n    final String pAct = searcher.doc(docs.scoreDocs[0].doc).get(parent)+\n                        searcher.doc(docs.scoreDocs[1].doc).get(parent);\n    assertTrue(pAct.contains(dubbed) && pAct.contains(overwritten) && pAct.length()==2);\n    \n    assertQ(req(\"id:66\", \"//*[@numFound='6']\"));\n    assertQ(req(child+\":(a b)\", \"//*[@numFound='2']\"));\n    assertQ(req(child+\":(c d)\", \"//*[@numFound='4']\"));\n  }\n\n","sourceOld":"  @Test\n  public void testOverwrite() throws IOException{\n    assertU(add(\n      nest(doc(\"id\",\"X\", parent, \"X\"), \n             doc(child,\"a\", \"id\", \"66\"), \n             doc(child,\"b\", \"id\", \"66\"))));\n    assertU(add(\n      nest(doc(\"id\",\"Y\", parent, \"Y\"), \n             doc(child,\"a\", \"id\", \"66\"), \n             doc(child,\"b\", \"id\", \"66\"))));\n    String overwritten = random().nextBoolean() ? \"X\": \"Y\";\n    String dubbed = overwritten==\"X\" ? \"Y\":\"X\";\n    \n    assertU(add(\n        nest(doc(\"id\",overwritten, parent, overwritten), \n               doc(child,\"c\",\"id\", \"66\"), \n               doc(child,\"d\",\"id\", \"66\")), \"overwrite\", \"true\"));\n    assertU(add(\n        nest(doc(\"id\",dubbed, parent, dubbed), \n               doc(child,\"c\",\"id\", \"66\"), \n               doc(child,\"d\",\"id\", \"66\")), \"overwrite\", \"false\"));\n    \n    assertU(commit());\n    \n    assertQ(req(parent+\":\"+overwritten, \"//*[@numFound='1']\"));\n    assertQ(req(parent+\":\"+dubbed, \"//*[@numFound='2']\"));\n    \n    final SolrIndexSearcher searcher = getSearcher();\n    assertSingleParentOf(searcher, one(\"ab\"), dubbed);\n    \n    final TopDocs docs = searcher.search(join(one(\"cd\")), 10);\n    assertEquals(2, docs.totalHits);\n    final String pAct = searcher.doc(docs.scoreDocs[0].doc).get(parent)+\n                        searcher.doc(docs.scoreDocs[1].doc).get(parent);\n    assertTrue(pAct.contains(dubbed) && pAct.contains(overwritten) && pAct.length()==2);\n    \n    assertQ(req(\"id:66\", \"//*[@numFound='6']\"));\n    assertQ(req(child+\":(a b)\", \"//*[@numFound='2']\"));\n    assertQ(req(child+\":(c d)\", \"//*[@numFound='4']\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83788ad129a5154d5c6562c4e8ce3db48793aada","date":1532961485,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/AddBlockUpdateTest#testOverwrite().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/AddBlockUpdateTest#testOverwrite().mjava","sourceNew":"  @Test\n  public void testOverwrite() throws IOException{\n    assertU(add(\n      nest(doc(\"id\",\"X\", parent, \"X\"), \n             doc(child,\"a\", \"id\", \"66\"), \n             doc(child,\"b\", \"id\", \"66\"))));\n    assertU(add(\n      nest(doc(\"id\",\"Y\", parent, \"Y\"), \n             doc(child,\"a\", \"id\", \"66\"), \n             doc(child,\"b\", \"id\", \"66\"))));\n    String overwritten = random().nextBoolean() ? \"X\": \"Y\";\n    String dubbed = overwritten==\"X\" ? \"Y\":\"X\";\n    \n    assertU(add(\n        nest(doc(\"id\",overwritten, parent, overwritten), \n               doc(child,\"c\",\"id\", \"66\"), \n               doc(child,\"d\",\"id\", \"66\")), \"overwrite\", \"true\"));\n    assertU(add(\n        nest(doc(\"id\",dubbed, parent, dubbed), \n               doc(child,\"c\",\"id\", \"66\"), \n               doc(child,\"d\",\"id\", \"66\")), \"overwrite\", \"false\"));\n    \n    assertU(commit());\n\n    assertQ(req(parent+\":\"+overwritten, \"//*[@numFound='1']\"));\n    assertQ(req(parent+\":\"+dubbed, \"//*[@numFound='2']\"));\n\n    final SolrIndexSearcher searcher = getSearcher();\n    assertSingleParentOf(searcher, one(\"ab\"), dubbed);\n\n    final TopDocs docs = searcher.search(join(one(\"cd\")), 10);\n    assertEquals(2, docs.totalHits.value);\n    final String pAct = searcher.doc(docs.scoreDocs[0].doc).get(parent)+\n                        searcher.doc(docs.scoreDocs[1].doc).get(parent);\n    assertTrue(pAct.contains(dubbed) && pAct.contains(overwritten) && pAct.length()==2);\n    \n    assertQ(req(\"id:66\", \"//*[@numFound='6']\"));\n    assertQ(req(child+\":(a b)\", \"//*[@numFound='2']\"));\n    assertQ(req(child+\":(c d)\", \"//*[@numFound='4']\"));\n  }\n\n","sourceOld":"  @Test\n  public void testOverwrite() throws IOException{\n    assertU(add(\n      nest(doc(\"id\",\"X\", parent, \"X\"), \n             doc(child,\"a\", \"id\", \"66\"), \n             doc(child,\"b\", \"id\", \"66\"))));\n    assertU(add(\n      nest(doc(\"id\",\"Y\", parent, \"Y\"), \n             doc(child,\"a\", \"id\", \"66\"), \n             doc(child,\"b\", \"id\", \"66\"))));\n    String overwritten = random().nextBoolean() ? \"X\": \"Y\";\n    String dubbed = overwritten==\"X\" ? \"Y\":\"X\";\n    \n    assertU(add(\n        nest(doc(\"id\",overwritten, parent, overwritten), \n               doc(child,\"c\",\"id\", \"66\"), \n               doc(child,\"d\",\"id\", \"66\")), \"overwrite\", \"true\"));\n    assertU(add(\n        nest(doc(\"id\",dubbed, parent, dubbed), \n               doc(child,\"c\",\"id\", \"66\"), \n               doc(child,\"d\",\"id\", \"66\")), \"overwrite\", \"false\"));\n    \n    assertU(commit());\n\n    assertQ(req(parent+\":\"+overwritten, \"//*[@numFound='1']\"));\n    assertQ(req(parent+\":\"+dubbed, \"//*[@numFound='2']\"));\n\n    final SolrIndexSearcher searcher = getSearcher();\n    assertSingleParentOf(searcher, one(\"ab\"), dubbed);\n\n    final TopDocs docs = searcher.search(join(one(\"cd\")), 10);\n    assertEquals(2, docs.totalHits);\n    final String pAct = searcher.doc(docs.scoreDocs[0].doc).get(parent)+\n                        searcher.doc(docs.scoreDocs[1].doc).get(parent);\n    assertTrue(pAct.contains(dubbed) && pAct.contains(overwritten) && pAct.length()==2);\n    \n    assertQ(req(\"id:66\", \"//*[@numFound='6']\"));\n    assertQ(req(child+\":(a b)\", \"//*[@numFound='2']\"));\n    assertQ(req(child+\":(c d)\", \"//*[@numFound='4']\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb1a5eff758fefcac883606f32579ae501a14119","date":1553516101,"type":3,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/AddBlockUpdateTest#testOverwrite().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/AddBlockUpdateTest#testOverwrite().mjava","sourceNew":"  @Test\n  public void testOverwrite() throws IOException{\n    assertU(add(\n      nest(doc(\"id\",\"X\", parent, \"X\"),\n             doc(child,\"a\", \"id\", \"66\"),\n             doc(child,\"b\", \"id\", \"66\"))));\n    assertU(add(\n      nest(doc(\"id\",\"Y\", parent, \"Y\"),\n             doc(child,\"a\", \"id\", \"66\"),\n             doc(child,\"b\", \"id\", \"66\"))));\n    String overwritten = random().nextBoolean() ? \"X\": \"Y\";\n    String dubbed = overwritten.equals(\"X\") ? \"Y\":\"X\";\n\n    assertU(add(\n        nest(doc(\"id\",overwritten, parent, overwritten),\n               doc(child,\"c\",\"id\", \"66\"),\n               doc(child,\"d\",\"id\", \"66\")), \"overwrite\", \"true\"));\n    assertU(add(\n        nest(doc(\"id\",dubbed, parent, dubbed),\n               doc(child,\"c\",\"id\", \"66\"),\n               doc(child,\"d\",\"id\", \"66\")), \"overwrite\", \"false\"));\n\n    assertU(commit());\n\n    assertQ(req(parent+\":\"+overwritten, \"//*[@numFound='1']\"));\n    assertQ(req(parent+\":\"+dubbed, \"//*[@numFound='2']\"));\n\n    final SolrIndexSearcher searcher = getSearcher();\n    assertSingleParentOf(searcher, one(\"ab\"), dubbed);\n\n    final TopDocs docs = searcher.search(join(one(\"cd\")), 10);\n    assertEquals(2, docs.totalHits.value);\n    final String pAct = searcher.doc(docs.scoreDocs[0].doc).get(parent)+\n                        searcher.doc(docs.scoreDocs[1].doc).get(parent);\n    assertTrue(pAct.contains(dubbed) && pAct.contains(overwritten) && pAct.length()==2);\n\n    assertQ(req(\"id:66\", \"//*[@numFound='6']\"));\n    assertQ(req(child+\":(a b)\", \"//*[@numFound='2']\"));\n    assertQ(req(child+\":(c d)\", \"//*[@numFound='4']\"));\n  }\n\n","sourceOld":"  @Test\n  public void testOverwrite() throws IOException{\n    assertU(add(\n      nest(doc(\"id\",\"X\", parent, \"X\"), \n             doc(child,\"a\", \"id\", \"66\"), \n             doc(child,\"b\", \"id\", \"66\"))));\n    assertU(add(\n      nest(doc(\"id\",\"Y\", parent, \"Y\"), \n             doc(child,\"a\", \"id\", \"66\"), \n             doc(child,\"b\", \"id\", \"66\"))));\n    String overwritten = random().nextBoolean() ? \"X\": \"Y\";\n    String dubbed = overwritten==\"X\" ? \"Y\":\"X\";\n    \n    assertU(add(\n        nest(doc(\"id\",overwritten, parent, overwritten), \n               doc(child,\"c\",\"id\", \"66\"), \n               doc(child,\"d\",\"id\", \"66\")), \"overwrite\", \"true\"));\n    assertU(add(\n        nest(doc(\"id\",dubbed, parent, dubbed), \n               doc(child,\"c\",\"id\", \"66\"), \n               doc(child,\"d\",\"id\", \"66\")), \"overwrite\", \"false\"));\n    \n    assertU(commit());\n\n    assertQ(req(parent+\":\"+overwritten, \"//*[@numFound='1']\"));\n    assertQ(req(parent+\":\"+dubbed, \"//*[@numFound='2']\"));\n\n    final SolrIndexSearcher searcher = getSearcher();\n    assertSingleParentOf(searcher, one(\"ab\"), dubbed);\n\n    final TopDocs docs = searcher.search(join(one(\"cd\")), 10);\n    assertEquals(2, docs.totalHits.value);\n    final String pAct = searcher.doc(docs.scoreDocs[0].doc).get(parent)+\n                        searcher.doc(docs.scoreDocs[1].doc).get(parent);\n    assertTrue(pAct.contains(dubbed) && pAct.contains(overwritten) && pAct.length()==2);\n    \n    assertQ(req(\"id:66\", \"//*[@numFound='6']\"));\n    assertQ(req(child+\":(a b)\", \"//*[@numFound='2']\"));\n    assertQ(req(child+\":(c d)\", \"//*[@numFound='4']\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["61da2e4482f2cf6149ff5323d107dded56e89400","c5ce7c704ca874aa623a99f2669737b52ec71cfc"],"bb1a5eff758fefcac883606f32579ae501a14119":["83788ad129a5154d5c6562c4e8ce3db48793aada"],"61da2e4482f2cf6149ff5323d107dded56e89400":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"83788ad129a5154d5c6562c4e8ce3db48793aada":["c5ce7c704ca874aa623a99f2669737b52ec71cfc"],"c5ce7c704ca874aa623a99f2669737b52ec71cfc":["61da2e4482f2cf6149ff5323d107dded56e89400"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bb1a5eff758fefcac883606f32579ae501a14119"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["61da2e4482f2cf6149ff5323d107dded56e89400","c5ce7c704ca874aa623a99f2669737b52ec71cfc"]},"commit2Childs":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"61da2e4482f2cf6149ff5323d107dded56e89400":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","c5ce7c704ca874aa623a99f2669737b52ec71cfc","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"bb1a5eff758fefcac883606f32579ae501a14119":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["61da2e4482f2cf6149ff5323d107dded56e89400"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["bb1a5eff758fefcac883606f32579ae501a14119"],"c5ce7c704ca874aa623a99f2669737b52ec71cfc":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","83788ad129a5154d5c6562c4e8ce3db48793aada","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}