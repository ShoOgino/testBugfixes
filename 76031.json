{"path":"lucene/core/src/java/org/apache/lucene/index/PrefixCodedTerms.Builder#add(String,BytesRef).mjava","commits":[{"id":"01fc0eec0e4dd3fdd2977bb8d7d2997a4c8075cb","date":1453797574,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/PrefixCodedTerms.Builder#add(String,BytesRef).mjava","pathOld":"/dev/null","sourceNew":"    /** add a term */\n    public void add(String field, BytesRef bytes) {\n      assert lastTerm.equals(new Term(\"\")) || new Term(field, bytes).compareTo(lastTerm) > 0;\n\n      try {\n        int prefix = sharedPrefix(lastTerm.bytes, bytes);\n        int suffix = bytes.length - prefix;\n        if (field.equals(lastTerm.field)) {\n          output.writeVInt(prefix << 1);\n        } else {\n          output.writeVInt(prefix << 1 | 1);\n          output.writeString(field);\n        }\n        output.writeVInt(suffix);\n        output.writeBytes(bytes.bytes, bytes.offset + prefix, suffix);\n        lastTermBytes.copyBytes(bytes);\n        lastTerm.bytes = lastTermBytes.get();\n        lastTerm.field = field;\n        size += 1;\n      } catch (IOException e) {\n        throw new RuntimeException(e);\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ac88193d9fe80e165a43bb0555c43afa83da8330","date":1453823827,"type":0,"author":"jbernste","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/PrefixCodedTerms.Builder#add(String,BytesRef).mjava","pathOld":"/dev/null","sourceNew":"    /** add a term */\n    public void add(String field, BytesRef bytes) {\n      assert lastTerm.equals(new Term(\"\")) || new Term(field, bytes).compareTo(lastTerm) > 0;\n\n      try {\n        int prefix = sharedPrefix(lastTerm.bytes, bytes);\n        int suffix = bytes.length - prefix;\n        if (field.equals(lastTerm.field)) {\n          output.writeVInt(prefix << 1);\n        } else {\n          output.writeVInt(prefix << 1 | 1);\n          output.writeString(field);\n        }\n        output.writeVInt(suffix);\n        output.writeBytes(bytes.bytes, bytes.offset + prefix, suffix);\n        lastTermBytes.copyBytes(bytes);\n        lastTerm.bytes = lastTermBytes.get();\n        lastTerm.field = field;\n        size += 1;\n      } catch (IOException e) {\n        throw new RuntimeException(e);\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":0,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/PrefixCodedTerms.Builder#add(String,BytesRef).mjava","pathOld":"/dev/null","sourceNew":"    /** add a term */\n    public void add(String field, BytesRef bytes) {\n      assert lastTerm.equals(new Term(\"\")) || new Term(field, bytes).compareTo(lastTerm) > 0;\n\n      try {\n        int prefix = sharedPrefix(lastTerm.bytes, bytes);\n        int suffix = bytes.length - prefix;\n        if (field.equals(lastTerm.field)) {\n          output.writeVInt(prefix << 1);\n        } else {\n          output.writeVInt(prefix << 1 | 1);\n          output.writeString(field);\n        }\n        output.writeVInt(suffix);\n        output.writeBytes(bytes.bytes, bytes.offset + prefix, suffix);\n        lastTermBytes.copyBytes(bytes);\n        lastTerm.bytes = lastTermBytes.get();\n        lastTerm.field = field;\n        size += 1;\n      } catch (IOException e) {\n        throw new RuntimeException(e);\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"99761ac3b0c4136140f9cd2d081b80934bba16fa","date":1456263279,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/PrefixCodedTerms.Builder#add(String,BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/PrefixCodedTerms.Builder#add(String,BytesRef).mjava","sourceNew":"    /** add a term.  This fully consumes in the incoming {@link BytesRef}. */\n    public void add(String field, BytesRef bytes) {\n      assert lastTerm.equals(new Term(\"\")) || new Term(field, bytes).compareTo(lastTerm) > 0;\n\n      try {\n        int prefix = sharedPrefix(lastTerm.bytes, bytes);\n        int suffix = bytes.length - prefix;\n        if (field.equals(lastTerm.field)) {\n          output.writeVInt(prefix << 1);\n        } else {\n          output.writeVInt(prefix << 1 | 1);\n          output.writeString(field);\n        }\n        output.writeVInt(suffix);\n        output.writeBytes(bytes.bytes, bytes.offset + prefix, suffix);\n        lastTermBytes.copyBytes(bytes);\n        lastTerm.bytes = lastTermBytes.get();\n        lastTerm.field = field;\n        size += 1;\n      } catch (IOException e) {\n        throw new RuntimeException(e);\n      }\n    }\n\n","sourceOld":"    /** add a term */\n    public void add(String field, BytesRef bytes) {\n      assert lastTerm.equals(new Term(\"\")) || new Term(field, bytes).compareTo(lastTerm) > 0;\n\n      try {\n        int prefix = sharedPrefix(lastTerm.bytes, bytes);\n        int suffix = bytes.length - prefix;\n        if (field.equals(lastTerm.field)) {\n          output.writeVInt(prefix << 1);\n        } else {\n          output.writeVInt(prefix << 1 | 1);\n          output.writeString(field);\n        }\n        output.writeVInt(suffix);\n        output.writeBytes(bytes.bytes, bytes.offset + prefix, suffix);\n        lastTermBytes.copyBytes(bytes);\n        lastTerm.bytes = lastTermBytes.get();\n        lastTerm.field = field;\n        size += 1;\n      } catch (IOException e) {\n        throw new RuntimeException(e);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868f63baffb79407d4b49f3c0be8dc4725ffc6e1","date":1456423715,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/PrefixCodedTerms.Builder#add(String,BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/PrefixCodedTerms.Builder#add(String,BytesRef).mjava","sourceNew":"    /** add a term.  This fully consumes in the incoming {@link BytesRef}. */\n    public void add(String field, BytesRef bytes) {\n      assert lastTerm.equals(new Term(\"\")) || new Term(field, bytes).compareTo(lastTerm) > 0;\n\n      try {\n        int prefix = sharedPrefix(lastTerm.bytes, bytes);\n        int suffix = bytes.length - prefix;\n        if (field.equals(lastTerm.field)) {\n          output.writeVInt(prefix << 1);\n        } else {\n          output.writeVInt(prefix << 1 | 1);\n          output.writeString(field);\n        }\n        output.writeVInt(suffix);\n        output.writeBytes(bytes.bytes, bytes.offset + prefix, suffix);\n        lastTermBytes.copyBytes(bytes);\n        lastTerm.bytes = lastTermBytes.get();\n        lastTerm.field = field;\n        size += 1;\n      } catch (IOException e) {\n        throw new RuntimeException(e);\n      }\n    }\n\n","sourceOld":"    /** add a term */\n    public void add(String field, BytesRef bytes) {\n      assert lastTerm.equals(new Term(\"\")) || new Term(field, bytes).compareTo(lastTerm) > 0;\n\n      try {\n        int prefix = sharedPrefix(lastTerm.bytes, bytes);\n        int suffix = bytes.length - prefix;\n        if (field.equals(lastTerm.field)) {\n          output.writeVInt(prefix << 1);\n        } else {\n          output.writeVInt(prefix << 1 | 1);\n          output.writeString(field);\n        }\n        output.writeVInt(suffix);\n        output.writeBytes(bytes.bytes, bytes.offset + prefix, suffix);\n        lastTermBytes.copyBytes(bytes);\n        lastTerm.bytes = lastTermBytes.get();\n        lastTerm.field = field;\n        size += 1;\n      } catch (IOException e) {\n        throw new RuntimeException(e);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"456d7e7092cb043c740b4674301660ee8abc26fe","date":1517645879,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/PrefixCodedTerms.Builder#add(String,BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/PrefixCodedTerms.Builder#add(String,BytesRef).mjava","sourceNew":"    /** add a term.  This fully consumes in the incoming {@link BytesRef}. */\n    public void add(String field, BytesRef bytes) {\n      assert lastTerm.equals(new Term(\"\")) || new Term(field, bytes).compareTo(lastTerm) > 0;\n\n      try {\n        final int prefix;\n        if (size > 0 && field.equals(lastTerm.field)) {\n          // same field as the last term\n          prefix = StringHelper.bytesDifference(lastTerm.bytes, bytes);\n          output.writeVInt(prefix << 1);\n        } else {\n          // field change\n          prefix = 0;\n          output.writeVInt(1);\n          output.writeString(field);\n        }\n\n        int suffix = bytes.length - prefix;\n        output.writeVInt(suffix);\n        output.writeBytes(bytes.bytes, bytes.offset + prefix, suffix);\n        lastTermBytes.copyBytes(bytes);\n        lastTerm.bytes = lastTermBytes.get();\n        lastTerm.field = field;\n        size += 1;\n      } catch (IOException e) {\n        throw new RuntimeException(e);\n      }\n    }\n\n","sourceOld":"    /** add a term.  This fully consumes in the incoming {@link BytesRef}. */\n    public void add(String field, BytesRef bytes) {\n      assert lastTerm.equals(new Term(\"\")) || new Term(field, bytes).compareTo(lastTerm) > 0;\n\n      try {\n        int prefix = sharedPrefix(lastTerm.bytes, bytes);\n        int suffix = bytes.length - prefix;\n        if (field.equals(lastTerm.field)) {\n          output.writeVInt(prefix << 1);\n        } else {\n          output.writeVInt(prefix << 1 | 1);\n          output.writeString(field);\n        }\n        output.writeVInt(suffix);\n        output.writeBytes(bytes.bytes, bytes.offset + prefix, suffix);\n        lastTermBytes.copyBytes(bytes);\n        lastTerm.bytes = lastTermBytes.get();\n        lastTerm.field = field;\n        size += 1;\n      } catch (IOException e) {\n        throw new RuntimeException(e);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"456d7e7092cb043c740b4674301660ee8abc26fe":["868f63baffb79407d4b49f3c0be8dc4725ffc6e1"],"ac88193d9fe80e165a43bb0555c43afa83da8330":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","01fc0eec0e4dd3fdd2977bb8d7d2997a4c8075cb"],"01fc0eec0e4dd3fdd2977bb8d7d2997a4c8075cb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"868f63baffb79407d4b49f3c0be8dc4725ffc6e1":["ac88193d9fe80e165a43bb0555c43afa83da8330","99761ac3b0c4136140f9cd2d081b80934bba16fa"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ac88193d9fe80e165a43bb0555c43afa83da8330"],"99761ac3b0c4136140f9cd2d081b80934bba16fa":["ac88193d9fe80e165a43bb0555c43afa83da8330"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["456d7e7092cb043c740b4674301660ee8abc26fe"]},"commit2Childs":{"456d7e7092cb043c740b4674301660ee8abc26fe":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ac88193d9fe80e165a43bb0555c43afa83da8330":["868f63baffb79407d4b49f3c0be8dc4725ffc6e1","1e6acbaae7af722f17204ceccf0f7db5753eccf3","99761ac3b0c4136140f9cd2d081b80934bba16fa"],"01fc0eec0e4dd3fdd2977bb8d7d2997a4c8075cb":["ac88193d9fe80e165a43bb0555c43afa83da8330"],"868f63baffb79407d4b49f3c0be8dc4725ffc6e1":["456d7e7092cb043c740b4674301660ee8abc26fe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ac88193d9fe80e165a43bb0555c43afa83da8330","01fc0eec0e4dd3fdd2977bb8d7d2997a4c8075cb","1e6acbaae7af722f17204ceccf0f7db5753eccf3"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":[],"99761ac3b0c4136140f9cd2d081b80934bba16fa":["868f63baffb79407d4b49f3c0be8dc4725ffc6e1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}