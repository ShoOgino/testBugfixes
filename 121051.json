{"path":"solr/core/src/test/org/apache/solr/search/TestSolrQueryParser#testSyntax().mjava","commits":[{"id":"3b6b0848a4750fd6d81f9e4bd504eecd4205eb11","date":1362244723,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSolrQueryParser#testSyntax().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testSyntax() throws Exception {\n    // a bare * should be treated as *:*\n    assertJQ(req(\"q\",\"*\", \"df\",\"doesnotexist_s\")\n        ,\"/response/docs/[0]==\"   // make sure we get something...\n    );\n    assertJQ(req(\"q\",\"doesnotexist_s:*\")\n        ,\"/response/numFound==0\"   // nothing should be found\n    );\n    assertJQ(req(\"q\",\"doesnotexist_s:( * * * )\")\n        ,\"/response/numFound==0\"   // nothing should be found\n    );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["7d959d418bddfa46d8eea54f0d8b855165586838"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d0fad4c5c26f8a062d31d59ceb5ea2dc3ca38aef","date":1363025664,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSolrQueryParser#testSyntax().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestSolrQueryParser#testSyntax().mjava","sourceNew":"  @Test\n  public void testSyntax() throws Exception {\n    // a bare * should be treated as *:*\n    assertJQ(req(\"q\",\"*\", \"df\",\"doesnotexist_s\")\n        ,\"/response/docs/[0]==\"   // make sure we get something...\n    );\n    assertJQ(req(\"q\",\"doesnotexist_s:*\")\n        ,\"/response/numFound==0\"   // nothing should be found\n    );\n    assertJQ(req(\"q\",\"doesnotexist_s:( * * * )\")\n        ,\"/response/numFound==0\"   // nothing should be found\n     );\n\n    // length of date math caused issues...\n    assertJQ(req(\"q\",\"foo_dt:\\\"2013-03-08T00:46:15Z/DAY+000MILLISECONDS+00SECONDS+00MINUTES+00HOURS+0000000000YEARS+6MONTHS+3DAYS\\\"\", \"debug\",\"query\")\n        ,\"/debug/parsedquery=='foo_dt:2013-09-11T00:00:00Z'\"\n    );\n  }\n\n","sourceOld":"  @Test\n  public void testSyntax() throws Exception {\n    // a bare * should be treated as *:*\n    assertJQ(req(\"q\",\"*\", \"df\",\"doesnotexist_s\")\n        ,\"/response/docs/[0]==\"   // make sure we get something...\n    );\n    assertJQ(req(\"q\",\"doesnotexist_s:*\")\n        ,\"/response/numFound==0\"   // nothing should be found\n    );\n    assertJQ(req(\"q\",\"doesnotexist_s:( * * * )\")\n        ,\"/response/numFound==0\"   // nothing should be found\n    );\n  }\n\n","bugFix":null,"bugIntro":["7d959d418bddfa46d8eea54f0d8b855165586838"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7d959d418bddfa46d8eea54f0d8b855165586838","date":1453938797,"type":3,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSolrQueryParser#testSyntax().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestSolrQueryParser#testSyntax().mjava","sourceNew":"  @Test\n  public void testSyntax() throws Exception {\n    // a bare * should be treated as *:*\n    assertJQ(req(\"q\", \"*\", \"df\", \"doesnotexist_s\")\n        , \"/response/docs/[0]==\"   // make sure we get something...\n    );\n    assertJQ(req(\"q\", \"doesnotexist_s:*\")\n        , \"/response/numFound==0\"   // nothing should be found\n    );\n    assertJQ(req(\"q\", \"doesnotexist_s:( * * * )\")\n        , \"/response/numFound==0\"   // nothing should be found\n    );\n\n    // length of date math caused issues...\n    assertJQ(req(\"q\", \"foo_dt:\\\"2013-03-08T00:46:15Z/DAY+000MILLISECONDS+00SECONDS+00MINUTES+00HOURS+0000000000YEARS+6MONTHS+3DAYS\\\"\", \"debug\", \"query\")\n        , \"/debug/parsedquery=='foo_dt:2013-09-11T00:00:00Z'\"\n    );\n  }\n\n","sourceOld":"  @Test\n  public void testSyntax() throws Exception {\n    // a bare * should be treated as *:*\n    assertJQ(req(\"q\",\"*\", \"df\",\"doesnotexist_s\")\n        ,\"/response/docs/[0]==\"   // make sure we get something...\n    );\n    assertJQ(req(\"q\",\"doesnotexist_s:*\")\n        ,\"/response/numFound==0\"   // nothing should be found\n    );\n    assertJQ(req(\"q\",\"doesnotexist_s:( * * * )\")\n        ,\"/response/numFound==0\"   // nothing should be found\n     );\n\n    // length of date math caused issues...\n    assertJQ(req(\"q\",\"foo_dt:\\\"2013-03-08T00:46:15Z/DAY+000MILLISECONDS+00SECONDS+00MINUTES+00HOURS+0000000000YEARS+6MONTHS+3DAYS\\\"\", \"debug\",\"query\")\n        ,\"/debug/parsedquery=='foo_dt:2013-09-11T00:00:00Z'\"\n    );\n  }\n\n","bugFix":["3b6b0848a4750fd6d81f9e4bd504eecd4205eb11","d0fad4c5c26f8a062d31d59ceb5ea2dc3ca38aef"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSolrQueryParser#testSyntax().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestSolrQueryParser#testSyntax().mjava","sourceNew":"  @Test\n  public void testSyntax() throws Exception {\n    // a bare * should be treated as *:*\n    assertJQ(req(\"q\", \"*\", \"df\", \"doesnotexist_s\")\n        , \"/response/docs/[0]==\"   // make sure we get something...\n    );\n    assertJQ(req(\"q\", \"doesnotexist_s:*\")\n        , \"/response/numFound==0\"   // nothing should be found\n    );\n    assertJQ(req(\"q\", \"doesnotexist_s:( * * * )\")\n        , \"/response/numFound==0\"   // nothing should be found\n    );\n\n    // length of date math caused issues...\n    assertJQ(req(\"q\", \"foo_dt:\\\"2013-03-08T00:46:15Z/DAY+000MILLISECONDS+00SECONDS+00MINUTES+00HOURS+0000000000YEARS+6MONTHS+3DAYS\\\"\", \"debug\", \"query\")\n        , \"/debug/parsedquery=='foo_dt:2013-09-11T00:00:00Z'\"\n    );\n  }\n\n","sourceOld":"  @Test\n  public void testSyntax() throws Exception {\n    // a bare * should be treated as *:*\n    assertJQ(req(\"q\",\"*\", \"df\",\"doesnotexist_s\")\n        ,\"/response/docs/[0]==\"   // make sure we get something...\n    );\n    assertJQ(req(\"q\",\"doesnotexist_s:*\")\n        ,\"/response/numFound==0\"   // nothing should be found\n    );\n    assertJQ(req(\"q\",\"doesnotexist_s:( * * * )\")\n        ,\"/response/numFound==0\"   // nothing should be found\n     );\n\n    // length of date math caused issues...\n    assertJQ(req(\"q\",\"foo_dt:\\\"2013-03-08T00:46:15Z/DAY+000MILLISECONDS+00SECONDS+00MINUTES+00HOURS+0000000000YEARS+6MONTHS+3DAYS\\\"\", \"debug\",\"query\")\n        ,\"/debug/parsedquery=='foo_dt:2013-09-11T00:00:00Z'\"\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"daa9f76a48e97bb2d40fc67ecdaad33d166d596e","date":1488856307,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSolrQueryParser#testSyntax().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestSolrQueryParser#testSyntax().mjava","sourceNew":"  @Test\n  public void testSyntax() throws Exception {\n    // a bare * should be treated as *:*\n    assertJQ(req(\"q\", \"*\", \"df\", \"doesnotexist_s\")\n        , \"/response/docs/[0]==\"   // make sure we get something...\n    );\n    assertJQ(req(\"q\", \"doesnotexist_s:*\")\n        , \"/response/numFound==0\"   // nothing should be found\n    );\n    assertJQ(req(\"q\", \"doesnotexist_s:( * * * )\")\n        , \"/response/numFound==0\"   // nothing should be found\n    );\n\n    // length of date math caused issues...\n    if (h.getCore().getLatestSchema().getField(\"foo_dt\").getType().isPointField()) {\n      assertJQ(req(\"q\", \"foo_dt:\\\"2013-03-08T00:46:15Z/DAY+000MILLISECONDS+00SECONDS+00MINUTES+00HOURS+0000000000YEARS+6MONTHS+3DAYS\\\"\", \"debug\", \"query\")\n          , \"/debug/parsedquery=='IndexOrDocValuesQuery(foo_dt:[1378857600000 TO 1378857600000])'\"\n      );\n    } else {\n      assertJQ(req(\"q\", \"foo_dt:\\\"2013-03-08T00:46:15Z/DAY+000MILLISECONDS+00SECONDS+00MINUTES+00HOURS+0000000000YEARS+6MONTHS+3DAYS\\\"\", \"debug\", \"query\")\n          , \"/debug/parsedquery=='foo_dt:2013-09-11T00:00:00Z'\"\n      );\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testSyntax() throws Exception {\n    // a bare * should be treated as *:*\n    assertJQ(req(\"q\", \"*\", \"df\", \"doesnotexist_s\")\n        , \"/response/docs/[0]==\"   // make sure we get something...\n    );\n    assertJQ(req(\"q\", \"doesnotexist_s:*\")\n        , \"/response/numFound==0\"   // nothing should be found\n    );\n    assertJQ(req(\"q\", \"doesnotexist_s:( * * * )\")\n        , \"/response/numFound==0\"   // nothing should be found\n    );\n\n    // length of date math caused issues...\n    assertJQ(req(\"q\", \"foo_dt:\\\"2013-03-08T00:46:15Z/DAY+000MILLISECONDS+00SECONDS+00MINUTES+00HOURS+0000000000YEARS+6MONTHS+3DAYS\\\"\", \"debug\", \"query\")\n        , \"/debug/parsedquery=='foo_dt:2013-09-11T00:00:00Z'\"\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"351efe6fdecf9af62134d37ec2582e4a0331a4dc","date":1498149096,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSolrQueryParser#testSyntax().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestSolrQueryParser#testSyntax().mjava","sourceNew":"  @Test\n  public void testSyntax() throws Exception {\n    // a bare * should be treated as *:*\n    assertJQ(req(\"q\", \"*\", \"df\", \"doesnotexist_s\")\n        , \"/response/docs/[0]==\"   // make sure we get something...\n    );\n    assertJQ(req(\"q\", \"doesnotexist_s:*\")\n        , \"/response/numFound==0\"   // nothing should be found\n    );\n    assertJQ(req(\"q\", \"doesnotexist_s:( * * * )\")\n        , \"/response/numFound==0\"   // nothing should be found\n    );\n\n    // length of date math caused issues...\n    {\n      SchemaField foo_dt = h.getCore().getLatestSchema().getField(\"foo_dt\");\n      String expected = \"foo_dt:2013-09-11T00:00:00Z\";\n      if (foo_dt.getType().isPointField()) {\n        expected = \"(foo_dt:[1378857600000 TO 1378857600000])\";\n        if (foo_dt.hasDocValues() && foo_dt.indexed()) {\n          expected = \"IndexOrDocValuesQuery\"+expected ;\n        }\n      }\n      assertJQ(req(\"q\", \"foo_dt:\\\"2013-03-08T00:46:15Z/DAY+000MILLISECONDS+00SECONDS+00MINUTES+00HOURS+0000000000YEARS+6MONTHS+3DAYS\\\"\", \"debug\", \"query\")\n               , \"/debug/parsedquery=='\"+expected+\"'\");\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testSyntax() throws Exception {\n    // a bare * should be treated as *:*\n    assertJQ(req(\"q\", \"*\", \"df\", \"doesnotexist_s\")\n        , \"/response/docs/[0]==\"   // make sure we get something...\n    );\n    assertJQ(req(\"q\", \"doesnotexist_s:*\")\n        , \"/response/numFound==0\"   // nothing should be found\n    );\n    assertJQ(req(\"q\", \"doesnotexist_s:( * * * )\")\n        , \"/response/numFound==0\"   // nothing should be found\n    );\n\n    // length of date math caused issues...\n    if (h.getCore().getLatestSchema().getField(\"foo_dt\").getType().isPointField()) {\n      assertJQ(req(\"q\", \"foo_dt:\\\"2013-03-08T00:46:15Z/DAY+000MILLISECONDS+00SECONDS+00MINUTES+00HOURS+0000000000YEARS+6MONTHS+3DAYS\\\"\", \"debug\", \"query\")\n          , \"/debug/parsedquery=='IndexOrDocValuesQuery(foo_dt:[1378857600000 TO 1378857600000])'\"\n      );\n    } else {\n      assertJQ(req(\"q\", \"foo_dt:\\\"2013-03-08T00:46:15Z/DAY+000MILLISECONDS+00SECONDS+00MINUTES+00HOURS+0000000000YEARS+6MONTHS+3DAYS\\\"\", \"debug\", \"query\")\n          , \"/debug/parsedquery=='foo_dt:2013-09-11T00:00:00Z'\"\n      );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSolrQueryParser#testSyntax().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestSolrQueryParser#testSyntax().mjava","sourceNew":"  @Test\n  public void testSyntax() throws Exception {\n    // a bare * should be treated as *:*\n    assertJQ(req(\"q\", \"*\", \"df\", \"doesnotexist_s\")\n        , \"/response/docs/[0]==\"   // make sure we get something...\n    );\n    assertJQ(req(\"q\", \"doesnotexist_s:*\")\n        , \"/response/numFound==0\"   // nothing should be found\n    );\n    assertJQ(req(\"q\", \"doesnotexist_s:( * * * )\")\n        , \"/response/numFound==0\"   // nothing should be found\n    );\n\n    // length of date math caused issues...\n    {\n      SchemaField foo_dt = h.getCore().getLatestSchema().getField(\"foo_dt\");\n      String expected = \"foo_dt:2013-09-11T00:00:00Z\";\n      if (foo_dt.getType().isPointField()) {\n        expected = \"(foo_dt:[1378857600000 TO 1378857600000])\";\n        if (foo_dt.hasDocValues() && foo_dt.indexed()) {\n          expected = \"IndexOrDocValuesQuery\"+expected ;\n        }\n      }\n      assertJQ(req(\"q\", \"foo_dt:\\\"2013-03-08T00:46:15Z/DAY+000MILLISECONDS+00SECONDS+00MINUTES+00HOURS+0000000000YEARS+6MONTHS+3DAYS\\\"\", \"debug\", \"query\")\n               , \"/debug/parsedquery=='\"+expected+\"'\");\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testSyntax() throws Exception {\n    // a bare * should be treated as *:*\n    assertJQ(req(\"q\", \"*\", \"df\", \"doesnotexist_s\")\n        , \"/response/docs/[0]==\"   // make sure we get something...\n    );\n    assertJQ(req(\"q\", \"doesnotexist_s:*\")\n        , \"/response/numFound==0\"   // nothing should be found\n    );\n    assertJQ(req(\"q\", \"doesnotexist_s:( * * * )\")\n        , \"/response/numFound==0\"   // nothing should be found\n    );\n\n    // length of date math caused issues...\n    if (h.getCore().getLatestSchema().getField(\"foo_dt\").getType().isPointField()) {\n      assertJQ(req(\"q\", \"foo_dt:\\\"2013-03-08T00:46:15Z/DAY+000MILLISECONDS+00SECONDS+00MINUTES+00HOURS+0000000000YEARS+6MONTHS+3DAYS\\\"\", \"debug\", \"query\")\n          , \"/debug/parsedquery=='IndexOrDocValuesQuery(foo_dt:[1378857600000 TO 1378857600000])'\"\n      );\n    } else {\n      assertJQ(req(\"q\", \"foo_dt:\\\"2013-03-08T00:46:15Z/DAY+000MILLISECONDS+00SECONDS+00MINUTES+00HOURS+0000000000YEARS+6MONTHS+3DAYS\\\"\", \"debug\", \"query\")\n          , \"/debug/parsedquery=='foo_dt:2013-09-11T00:00:00Z'\"\n      );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSolrQueryParser#testSyntax().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestSolrQueryParser#testSyntax().mjava","sourceNew":"  @Test\n  public void testSyntax() throws Exception {\n    // a bare * should be treated as *:*\n    assertJQ(req(\"q\", \"*\", \"df\", \"doesnotexist_s\")\n        , \"/response/docs/[0]==\"   // make sure we get something...\n    );\n    assertJQ(req(\"q\", \"doesnotexist_s:*\")\n        , \"/response/numFound==0\"   // nothing should be found\n    );\n    assertJQ(req(\"q\", \"doesnotexist_s:( * * * )\")\n        , \"/response/numFound==0\"   // nothing should be found\n    );\n\n    // length of date math caused issues...\n    {\n      SchemaField foo_dt = h.getCore().getLatestSchema().getField(\"foo_dt\");\n      String expected = \"foo_dt:2013-09-11T00:00:00Z\";\n      if (foo_dt.getType().isPointField()) {\n        expected = \"(foo_dt:[1378857600000 TO 1378857600000])\";\n        if (foo_dt.hasDocValues() && foo_dt.indexed()) {\n          expected = \"IndexOrDocValuesQuery\"+expected ;\n        }\n      }\n      assertJQ(req(\"q\", \"foo_dt:\\\"2013-03-08T00:46:15Z/DAY+000MILLISECONDS+00SECONDS+00MINUTES+00HOURS+0000000000YEARS+6MONTHS+3DAYS\\\"\", \"debug\", \"query\")\n               , \"/debug/parsedquery=='\"+expected+\"'\");\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testSyntax() throws Exception {\n    // a bare * should be treated as *:*\n    assertJQ(req(\"q\", \"*\", \"df\", \"doesnotexist_s\")\n        , \"/response/docs/[0]==\"   // make sure we get something...\n    );\n    assertJQ(req(\"q\", \"doesnotexist_s:*\")\n        , \"/response/numFound==0\"   // nothing should be found\n    );\n    assertJQ(req(\"q\", \"doesnotexist_s:( * * * )\")\n        , \"/response/numFound==0\"   // nothing should be found\n    );\n\n    // length of date math caused issues...\n    if (h.getCore().getLatestSchema().getField(\"foo_dt\").getType().isPointField()) {\n      assertJQ(req(\"q\", \"foo_dt:\\\"2013-03-08T00:46:15Z/DAY+000MILLISECONDS+00SECONDS+00MINUTES+00HOURS+0000000000YEARS+6MONTHS+3DAYS\\\"\", \"debug\", \"query\")\n          , \"/debug/parsedquery=='IndexOrDocValuesQuery(foo_dt:[1378857600000 TO 1378857600000])'\"\n      );\n    } else {\n      assertJQ(req(\"q\", \"foo_dt:\\\"2013-03-08T00:46:15Z/DAY+000MILLISECONDS+00SECONDS+00MINUTES+00HOURS+0000000000YEARS+6MONTHS+3DAYS\\\"\", \"debug\", \"query\")\n          , \"/debug/parsedquery=='foo_dt:2013-09-11T00:00:00Z'\"\n      );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"351efe6fdecf9af62134d37ec2582e4a0331a4dc":["daa9f76a48e97bb2d40fc67ecdaad33d166d596e"],"daa9f76a48e97bb2d40fc67ecdaad33d166d596e":["7d959d418bddfa46d8eea54f0d8b855165586838"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["d0fad4c5c26f8a062d31d59ceb5ea2dc3ca38aef","7d959d418bddfa46d8eea54f0d8b855165586838"],"3b6b0848a4750fd6d81f9e4bd504eecd4205eb11":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7d959d418bddfa46d8eea54f0d8b855165586838":["d0fad4c5c26f8a062d31d59ceb5ea2dc3ca38aef"],"d0fad4c5c26f8a062d31d59ceb5ea2dc3ca38aef":["3b6b0848a4750fd6d81f9e4bd504eecd4205eb11"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["daa9f76a48e97bb2d40fc67ecdaad33d166d596e","351efe6fdecf9af62134d37ec2582e4a0331a4dc"],"28288370235ed02234a64753cdbf0c6ec096304a":["daa9f76a48e97bb2d40fc67ecdaad33d166d596e","351efe6fdecf9af62134d37ec2582e4a0331a4dc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"]},"commit2Childs":{"351efe6fdecf9af62134d37ec2582e4a0331a4dc":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"daa9f76a48e97bb2d40fc67ecdaad33d166d596e":["351efe6fdecf9af62134d37ec2582e4a0331a4dc","b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3b6b0848a4750fd6d81f9e4bd504eecd4205eb11"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":[],"3b6b0848a4750fd6d81f9e4bd504eecd4205eb11":["d0fad4c5c26f8a062d31d59ceb5ea2dc3ca38aef"],"7d959d418bddfa46d8eea54f0d8b855165586838":["daa9f76a48e97bb2d40fc67ecdaad33d166d596e","1e6acbaae7af722f17204ceccf0f7db5753eccf3"],"d0fad4c5c26f8a062d31d59ceb5ea2dc3ca38aef":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","7d959d418bddfa46d8eea54f0d8b855165586838"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":[],"28288370235ed02234a64753cdbf0c6ec096304a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","b7dfa64bc2074fb87d0ca70095a644c1ead107e1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}