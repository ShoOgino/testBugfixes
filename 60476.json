{"path":"lucene/src/java/org/apache/lucene/index/IndexReader#directory().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#directory().mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#directory().mjava","sourceNew":"  /** \n   * Returns the directory associated with this index.  The Default \n   * implementation returns the directory specified by subclasses when \n   * delegating to the IndexReader(Directory) constructor, or throws an \n   * UnsupportedOperationException if one was not specified.\n   * @throws UnsupportedOperationException if no directory\n   */\n  public Directory directory() {\n    ensureOpen();\n    throw new UnsupportedOperationException(\"This reader does not support this method.\");  \n  }\n\n","sourceOld":"  /** \n   * Returns the directory associated with this index.  The Default \n   * implementation returns the directory specified by subclasses when \n   * delegating to the IndexReader(Directory) constructor, or throws an \n   * UnsupportedOperationException if one was not specified.\n   * @throws UnsupportedOperationException if no directory\n   */\n  public Directory directory() {\n    ensureOpen();\n    throw new UnsupportedOperationException(\"This reader does not support this method.\");  \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2725b2d479964ea5aaea0ba4ae2634716f3ec26c","date":1327188170,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#directory().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#directory().mjava","sourceNew":"  /**\n   * Returns the directory associated with this index.  The Default \n   * implementation returns the directory specified by subclasses when \n   * delegating to the IndexReader(Directory) constructor, or throws an \n   * UnsupportedOperationException if one was not specified.\n   * @throws UnsupportedOperationException if no directory\n   */\n  public Directory directory() {\n    ensureOpen();\n    throw new UnsupportedOperationException(\"This reader does not support this method.\");  \n  }\n\n","sourceOld":"  /** \n   * Returns the directory associated with this index.  The Default \n   * implementation returns the directory specified by subclasses when \n   * delegating to the IndexReader(Directory) constructor, or throws an \n   * UnsupportedOperationException if one was not specified.\n   * @throws UnsupportedOperationException if no directory\n   */\n  public Directory directory() {\n    ensureOpen();\n    throw new UnsupportedOperationException(\"This reader does not support this method.\");  \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"893d07555f01912f57b453a320e4d46363a31b50","date":1327312526,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#directory().mjava","sourceNew":null,"sourceOld":"  /**\n   * Returns the directory associated with this index.  The Default \n   * implementation returns the directory specified by subclasses when \n   * delegating to the IndexReader(Directory) constructor, or throws an \n   * UnsupportedOperationException if one was not specified.\n   * @throws UnsupportedOperationException if no directory\n   */\n  public Directory directory() {\n    ensureOpen();\n    throw new UnsupportedOperationException(\"This reader does not support this method.\");  \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":4,"author":"Uwe Schindler","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#directory().mjava","sourceNew":null,"sourceOld":"  /** \n   * Returns the directory associated with this index.  The Default \n   * implementation returns the directory specified by subclasses when \n   * delegating to the IndexReader(Directory) constructor, or throws an \n   * UnsupportedOperationException if one was not specified.\n   * @throws UnsupportedOperationException if no directory\n   */\n  public Directory directory() {\n    ensureOpen();\n    throw new UnsupportedOperationException(\"This reader does not support this method.\");  \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"893d07555f01912f57b453a320e4d46363a31b50":["2725b2d479964ea5aaea0ba4ae2634716f3ec26c"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["9454a6510e2db155fb01faa5c049b06ece95fab9","893d07555f01912f57b453a320e4d46363a31b50"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2725b2d479964ea5aaea0ba4ae2634716f3ec26c":["9454a6510e2db155fb01faa5c049b06ece95fab9"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"893d07555f01912f57b453a320e4d46363a31b50":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2725b2d479964ea5aaea0ba4ae2634716f3ec26c":["893d07555f01912f57b453a320e4d46363a31b50"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["5cab9a86bd67202d20b6adc463008c8e982b070a","2725b2d479964ea5aaea0ba4ae2634716f3ec26c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}