{"path":"lucene/src/test-framework/org/apache/lucene/index/codecs/mockrandom/MockRandomCodec#fieldsProducer(SegmentReadState).mjava","commits":[{"id":"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce","date":1297021734,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/index/codecs/mockrandom/MockRandomCodec#fieldsProducer(SegmentReadState).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/codecs/mockrandom/MockRandomCodec#fieldsProducer(SegmentReadState).mjava","sourceNew":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.codecId, SEED_EXT);\n    final IndexInput in = state.dir.openInput(seedFileName);\n    final long seed = in.readLong();\n    in.close();\n\n    final Random random = new Random(seed);\n    PostingsReaderBase postingsReader;\n    final int n = random.nextInt(4);\n\n    if (n == 0) {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading MockSep postings\");\n      }\n      postingsReader = new SepPostingsReaderImpl(state.dir, state.segmentInfo,\n                                                 state.readBufferSize, new MockSingleIntFactory(), state.codecId);\n    } else if (n == 1) {\n      final int blockSize = _TestUtil.nextInt(random, 1, 2000);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading MockFixedIntBlock(\" + blockSize + \") postings\");\n      }\n      postingsReader = new SepPostingsReaderImpl(state.dir, state.segmentInfo,\n                                                 state.readBufferSize, new MockFixedIntBlockCodec.MockIntFactory(blockSize), state.codecId);\n    } else if (n == 2) {\n      final int baseBlockSize = _TestUtil.nextInt(random, 1, 127);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading MockVariableIntBlock(\" + baseBlockSize + \") postings\");\n      }\n      postingsReader = new SepPostingsReaderImpl(state.dir, state.segmentInfo,\n                                                 state.readBufferSize, new MockVariableIntBlockCodec.MockIntFactory(baseBlockSize), state.codecId);\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Standard postings\");\n      }\n      postingsReader = new StandardPostingsReader(state.dir, state.segmentInfo, state.readBufferSize, state.codecId);\n    }\n\n    if (random.nextBoolean()) {\n      final int totTFCutoff = _TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading pulsing postings with totTFCutoff=\" + totTFCutoff);\n      }\n      postingsReader = new PulsingPostingsReaderImpl(postingsReader);\n    }\n\n    final TermsIndexReaderBase indexReader;\n    boolean success = false;\n\n    try {\n      if (random.nextBoolean()) {\n        // if termsIndexDivisor is set to -1, we should not touch it. It means a\n        // test explicitly instructed not to load the terms index.\n        if (state.termsIndexDivisor != -1) {\n          state.termsIndexDivisor = _TestUtil.nextInt(random, 1, 10);\n        }\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"MockRandomCodec: fixed-gap terms index (divisor=\" + state.termsIndexDivisor + \")\");\n        }\n        indexReader = new FixedGapTermsIndexReader(state.dir,\n                                                   state.fieldInfos,\n                                                   state.segmentInfo.name,\n                                                   state.termsIndexDivisor,\n                                                   BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                   state.codecId);\n      } else {\n        final int n2 = random.nextInt(3);\n        if (n2 == 1) {\n          random.nextInt();\n        } else if (n2 == 2) {\n          random.nextLong();\n        }\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"MockRandomCodec: variable-gap terms index (divisor=\" + state.termsIndexDivisor + \")\");\n        }\n        if (state.termsIndexDivisor != -1) {\n          state.termsIndexDivisor = _TestUtil.nextInt(random, 1, 10);\n        }\n        indexReader = new VariableGapTermsIndexReader(state.dir,\n                                                      state.fieldInfos,\n                                                      state.segmentInfo.name,\n                                                      state.termsIndexDivisor,\n                                                      state.codecId);\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        postingsReader.close();\n      }\n    }\n\n    final int termsCacheSize = _TestUtil.nextInt(random, 1, 1024);\n\n    success = false;\n    try {\n      FieldsProducer ret = new BlockTermsReader(indexReader,\n                                                state.dir,\n                                                state.fieldInfos,\n                                                state.segmentInfo.name,\n                                                postingsReader,\n                                                state.readBufferSize,\n                                                BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                termsCacheSize,\n                                                state.codecId);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postingsReader.close();\n        } finally {\n          indexReader.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.codecId, SEED_EXT);\n    final IndexInput in = state.dir.openInput(seedFileName);\n    final long seed = in.readLong();\n    in.close();\n\n    final Random random = new Random(seed);\n    PostingsReaderBase postingsReader;\n    final int n = random.nextInt(4);\n\n    if (n == 0) {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading MockSep postings\");\n      }\n      postingsReader = new SepPostingsReaderImpl(state.dir, state.segmentInfo,\n                                                 state.readBufferSize, new MockSingleIntFactory(), state.codecId);\n    } else if (n == 1) {\n      final int blockSize = _TestUtil.nextInt(random, 1, 2000);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading MockFixedIntBlock(\" + blockSize + \") postings\");\n      }\n      postingsReader = new SepPostingsReaderImpl(state.dir, state.segmentInfo,\n                                                 state.readBufferSize, new MockFixedIntBlockCodec.MockIntFactory(blockSize), state.codecId);\n    } else if (n == 2) {\n      final int baseBlockSize = _TestUtil.nextInt(random, 1, 127);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading MockVariableIntBlock(\" + baseBlockSize + \") postings\");\n      }\n      postingsReader = new SepPostingsReaderImpl(state.dir, state.segmentInfo,\n                                                 state.readBufferSize, new MockVariableIntBlockCodec.MockIntFactory(baseBlockSize), state.codecId);\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Standard postings\");\n      }\n      postingsReader = new StandardPostingsReader(state.dir, state.segmentInfo, state.readBufferSize, state.codecId);\n    }\n\n    if (random.nextBoolean()) {\n      final int totTFCutoff = _TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading pulsing postings with totTFCutoff=\" + totTFCutoff);\n      }\n      postingsReader = new PulsingPostingsReaderImpl(postingsReader);\n    }\n\n    final TermsIndexReaderBase indexReader;\n    boolean success = false;\n\n    try {\n      if (random.nextBoolean()) {\n        // if termsIndexDivisor is set to -1, we should not touch it. It means a\n        // test explicitly instructed not to load the terms index.\n        if (state.termsIndexDivisor != -1) {\n          state.termsIndexDivisor = _TestUtil.nextInt(random, 1, 10);\n        }\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"MockRandomCodec: fixed-gap terms index (divisor=\" + state.termsIndexDivisor + \")\");\n        }\n        indexReader = new FixedGapTermsIndexReader(state.dir,\n                                                   state.fieldInfos,\n                                                   state.segmentInfo.name,\n                                                   state.termsIndexDivisor,\n                                                   BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                   state.codecId);\n      } else {\n        final int n2 = random.nextInt(3);\n        if (n2 == 1) {\n          random.nextInt();\n        } else if (n2 == 2) {\n          random.nextLong();\n        }\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"MockRandomCodec: variable-gap terms index (divisor=\" + state.termsIndexDivisor + \")\");\n        }\n        if (state.termsIndexDivisor != -1) {\n          state.termsIndexDivisor = _TestUtil.nextInt(random, 1, 10);\n        }\n        indexReader = new VariableGapTermsIndexReader(state.dir,\n                                                      state.fieldInfos,\n                                                      state.segmentInfo.name,\n                                                      state.termsIndexDivisor,\n                                                      state.codecId);\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        postingsReader.close();\n      }\n    }\n\n    final int termsCacheSize = _TestUtil.nextInt(random, 1, 1024);\n\n    success = false;\n    try {\n      FieldsProducer ret = new BlockTermsReader(indexReader,\n                                                state.dir,\n                                                state.fieldInfos,\n                                                state.segmentInfo.name,\n                                                postingsReader,\n                                                state.readBufferSize,\n                                                BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                termsCacheSize,\n                                                state.codecId);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postingsReader.close();\n        } finally {\n          indexReader.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/index/codecs/mockrandom/MockRandomCodec#fieldsProducer(SegmentReadState).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.codecId, SEED_EXT);\n    final IndexInput in = state.dir.openInput(seedFileName);\n    final long seed = in.readLong();\n    in.close();\n\n    final Random random = new Random(seed);\n    PostingsReaderBase postingsReader;\n    final int n = random.nextInt(4);\n\n    if (n == 0) {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading MockSep postings\");\n      }\n      postingsReader = new SepPostingsReaderImpl(state.dir, state.segmentInfo,\n                                                 state.readBufferSize, new MockSingleIntFactory(), state.codecId);\n    } else if (n == 1) {\n      final int blockSize = _TestUtil.nextInt(random, 1, 2000);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading MockFixedIntBlock(\" + blockSize + \") postings\");\n      }\n      postingsReader = new SepPostingsReaderImpl(state.dir, state.segmentInfo,\n                                                 state.readBufferSize, new MockFixedIntBlockCodec.MockIntFactory(blockSize), state.codecId);\n    } else if (n == 2) {\n      final int baseBlockSize = _TestUtil.nextInt(random, 1, 127);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading MockVariableIntBlock(\" + baseBlockSize + \") postings\");\n      }\n      postingsReader = new SepPostingsReaderImpl(state.dir, state.segmentInfo,\n                                                 state.readBufferSize, new MockVariableIntBlockCodec.MockIntFactory(baseBlockSize), state.codecId);\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Standard postings\");\n      }\n      postingsReader = new StandardPostingsReader(state.dir, state.segmentInfo, state.readBufferSize, state.codecId);\n    }\n\n    if (random.nextBoolean()) {\n      final int totTFCutoff = _TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading pulsing postings with totTFCutoff=\" + totTFCutoff);\n      }\n      postingsReader = new PulsingPostingsReaderImpl(postingsReader);\n    }\n\n    final TermsIndexReaderBase indexReader;\n    boolean success = false;\n\n    try {\n      if (random.nextBoolean()) {\n        // if termsIndexDivisor is set to -1, we should not touch it. It means a\n        // test explicitly instructed not to load the terms index.\n        if (state.termsIndexDivisor != -1) {\n          state.termsIndexDivisor = _TestUtil.nextInt(random, 1, 10);\n        }\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"MockRandomCodec: fixed-gap terms index (divisor=\" + state.termsIndexDivisor + \")\");\n        }\n        indexReader = new FixedGapTermsIndexReader(state.dir,\n                                                   state.fieldInfos,\n                                                   state.segmentInfo.name,\n                                                   state.termsIndexDivisor,\n                                                   BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                   state.codecId);\n      } else {\n        final int n2 = random.nextInt(3);\n        if (n2 == 1) {\n          random.nextInt();\n        } else if (n2 == 2) {\n          random.nextLong();\n        }\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"MockRandomCodec: variable-gap terms index (divisor=\" + state.termsIndexDivisor + \")\");\n        }\n        if (state.termsIndexDivisor != -1) {\n          state.termsIndexDivisor = _TestUtil.nextInt(random, 1, 10);\n        }\n        indexReader = new VariableGapTermsIndexReader(state.dir,\n                                                      state.fieldInfos,\n                                                      state.segmentInfo.name,\n                                                      state.termsIndexDivisor,\n                                                      state.codecId);\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        postingsReader.close();\n      }\n    }\n\n    final int termsCacheSize = _TestUtil.nextInt(random, 1, 1024);\n\n    success = false;\n    try {\n      FieldsProducer ret = new BlockTermsReader(indexReader,\n                                                state.dir,\n                                                state.fieldInfos,\n                                                state.segmentInfo.name,\n                                                postingsReader,\n                                                state.readBufferSize,\n                                                BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                termsCacheSize,\n                                                state.codecId);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postingsReader.close();\n        } finally {\n          indexReader.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"08bd82f9f7ac6b7ae532616311b08252338e335d","date":1297527663,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/index/codecs/mockrandom/MockRandomCodec#fieldsProducer(SegmentReadState).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/index/codecs/mockrandom/MockRandomCodec#fieldsProducer(SegmentReadState).mjava","sourceNew":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.codecId, SEED_EXT);\n    final IndexInput in = state.dir.openInput(seedFileName);\n    final long seed = in.readLong();\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: reading from seg=\" + state.segmentInfo.name + \" seed=\" + seed);\n    }\n    in.close();\n\n    final Random random = new Random(seed);\n    PostingsReaderBase postingsReader;\n\n    if (random.nextBoolean()) {\n      postingsReader = new SepPostingsReaderImpl(state.dir, state.segmentInfo,\n                                                 state.readBufferSize, new MockIntStreamFactory(random), state.codecId);\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Standard postings\");\n      }\n      postingsReader = new StandardPostingsReader(state.dir, state.segmentInfo, state.readBufferSize, state.codecId);\n    }\n\n    if (random.nextBoolean()) {\n      final int totTFCutoff = _TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading pulsing postings with totTFCutoff=\" + totTFCutoff);\n      }\n      postingsReader = new PulsingPostingsReaderImpl(postingsReader);\n    }\n\n    final TermsIndexReaderBase indexReader;\n    boolean success = false;\n\n    try {\n      if (random.nextBoolean()) {\n        // if termsIndexDivisor is set to -1, we should not touch it. It means a\n        // test explicitly instructed not to load the terms index.\n        if (state.termsIndexDivisor != -1) {\n          state.termsIndexDivisor = _TestUtil.nextInt(random, 1, 10);\n        }\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"MockRandomCodec: fixed-gap terms index (divisor=\" + state.termsIndexDivisor + \")\");\n        }\n        indexReader = new FixedGapTermsIndexReader(state.dir,\n                                                   state.fieldInfos,\n                                                   state.segmentInfo.name,\n                                                   state.termsIndexDivisor,\n                                                   BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                   state.codecId);\n      } else {\n        final int n2 = random.nextInt(3);\n        if (n2 == 1) {\n          random.nextInt();\n        } else if (n2 == 2) {\n          random.nextLong();\n        }\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"MockRandomCodec: variable-gap terms index (divisor=\" + state.termsIndexDivisor + \")\");\n        }\n        if (state.termsIndexDivisor != -1) {\n          state.termsIndexDivisor = _TestUtil.nextInt(random, 1, 10);\n        }\n        indexReader = new VariableGapTermsIndexReader(state.dir,\n                                                      state.fieldInfos,\n                                                      state.segmentInfo.name,\n                                                      state.termsIndexDivisor,\n                                                      state.codecId);\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        postingsReader.close();\n      }\n    }\n\n    final int termsCacheSize = _TestUtil.nextInt(random, 1, 1024);\n\n    success = false;\n    try {\n      FieldsProducer ret = new BlockTermsReader(indexReader,\n                                                state.dir,\n                                                state.fieldInfos,\n                                                state.segmentInfo.name,\n                                                postingsReader,\n                                                state.readBufferSize,\n                                                BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                termsCacheSize,\n                                                state.codecId);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postingsReader.close();\n        } finally {\n          indexReader.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.codecId, SEED_EXT);\n    final IndexInput in = state.dir.openInput(seedFileName);\n    final long seed = in.readLong();\n    in.close();\n\n    final Random random = new Random(seed);\n    PostingsReaderBase postingsReader;\n    final int n = random.nextInt(4);\n\n    if (n == 0) {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading MockSep postings\");\n      }\n      postingsReader = new SepPostingsReaderImpl(state.dir, state.segmentInfo,\n                                                 state.readBufferSize, new MockSingleIntFactory(), state.codecId);\n    } else if (n == 1) {\n      final int blockSize = _TestUtil.nextInt(random, 1, 2000);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading MockFixedIntBlock(\" + blockSize + \") postings\");\n      }\n      postingsReader = new SepPostingsReaderImpl(state.dir, state.segmentInfo,\n                                                 state.readBufferSize, new MockFixedIntBlockCodec.MockIntFactory(blockSize), state.codecId);\n    } else if (n == 2) {\n      final int baseBlockSize = _TestUtil.nextInt(random, 1, 127);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading MockVariableIntBlock(\" + baseBlockSize + \") postings\");\n      }\n      postingsReader = new SepPostingsReaderImpl(state.dir, state.segmentInfo,\n                                                 state.readBufferSize, new MockVariableIntBlockCodec.MockIntFactory(baseBlockSize), state.codecId);\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Standard postings\");\n      }\n      postingsReader = new StandardPostingsReader(state.dir, state.segmentInfo, state.readBufferSize, state.codecId);\n    }\n\n    if (random.nextBoolean()) {\n      final int totTFCutoff = _TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading pulsing postings with totTFCutoff=\" + totTFCutoff);\n      }\n      postingsReader = new PulsingPostingsReaderImpl(postingsReader);\n    }\n\n    final TermsIndexReaderBase indexReader;\n    boolean success = false;\n\n    try {\n      if (random.nextBoolean()) {\n        // if termsIndexDivisor is set to -1, we should not touch it. It means a\n        // test explicitly instructed not to load the terms index.\n        if (state.termsIndexDivisor != -1) {\n          state.termsIndexDivisor = _TestUtil.nextInt(random, 1, 10);\n        }\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"MockRandomCodec: fixed-gap terms index (divisor=\" + state.termsIndexDivisor + \")\");\n        }\n        indexReader = new FixedGapTermsIndexReader(state.dir,\n                                                   state.fieldInfos,\n                                                   state.segmentInfo.name,\n                                                   state.termsIndexDivisor,\n                                                   BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                   state.codecId);\n      } else {\n        final int n2 = random.nextInt(3);\n        if (n2 == 1) {\n          random.nextInt();\n        } else if (n2 == 2) {\n          random.nextLong();\n        }\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"MockRandomCodec: variable-gap terms index (divisor=\" + state.termsIndexDivisor + \")\");\n        }\n        if (state.termsIndexDivisor != -1) {\n          state.termsIndexDivisor = _TestUtil.nextInt(random, 1, 10);\n        }\n        indexReader = new VariableGapTermsIndexReader(state.dir,\n                                                      state.fieldInfos,\n                                                      state.segmentInfo.name,\n                                                      state.termsIndexDivisor,\n                                                      state.codecId);\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        postingsReader.close();\n      }\n    }\n\n    final int termsCacheSize = _TestUtil.nextInt(random, 1, 1024);\n\n    success = false;\n    try {\n      FieldsProducer ret = new BlockTermsReader(indexReader,\n                                                state.dir,\n                                                state.fieldInfos,\n                                                state.segmentInfo.name,\n                                                postingsReader,\n                                                state.readBufferSize,\n                                                BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                termsCacheSize,\n                                                state.codecId);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postingsReader.close();\n        } finally {\n          indexReader.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4fd64b6aa64934b0e35d9ec3e6c5a5c60ffc1762","date":1297938719,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/index/codecs/mockrandom/MockRandomCodec#fieldsProducer(SegmentReadState).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/index/codecs/mockrandom/MockRandomCodec#fieldsProducer(SegmentReadState).mjava","sourceNew":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.codecId, SEED_EXT);\n    final IndexInput in = state.dir.openInput(seedFileName);\n    final long seed = in.readLong();\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: reading from seg=\" + state.segmentInfo.name + \" seed=\" + seed);\n    }\n    in.close();\n\n    final Random random = new Random(seed);\n    PostingsReaderBase postingsReader;\n\n    if (random.nextBoolean()) {\n      postingsReader = new SepPostingsReaderImpl(state.dir, state.segmentInfo,\n                                                 state.readBufferSize, new MockIntStreamFactory(random), state.codecId);\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Standard postings\");\n      }\n      postingsReader = new StandardPostingsReader(state.dir, state.segmentInfo, state.readBufferSize, state.codecId);\n    }\n\n    if (random.nextBoolean()) {\n      final int totTFCutoff = _TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading pulsing postings with totTFCutoff=\" + totTFCutoff);\n      }\n      postingsReader = new PulsingPostingsReaderImpl(postingsReader);\n    }\n\n    final TermsIndexReaderBase indexReader;\n    boolean success = false;\n\n    try {\n      if (random.nextBoolean()) {\n        // if termsIndexDivisor is set to -1, we should not touch it. It means a\n        // test explicitly instructed not to load the terms index.\n        if (state.termsIndexDivisor != -1) {\n          state.termsIndexDivisor = _TestUtil.nextInt(random, 1, 10);\n        }\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"MockRandomCodec: fixed-gap terms index (divisor=\" + state.termsIndexDivisor + \")\");\n        }\n        indexReader = new FixedGapTermsIndexReader(state.dir,\n                                                   state.fieldInfos,\n                                                   state.segmentInfo.name,\n                                                   state.termsIndexDivisor,\n                                                   BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                   state.codecId);\n      } else {\n        final int n2 = random.nextInt(3);\n        if (n2 == 1) {\n          random.nextInt();\n        } else if (n2 == 2) {\n          random.nextLong();\n        }\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"MockRandomCodec: variable-gap terms index (divisor=\" + state.termsIndexDivisor + \")\");\n        }\n        if (state.termsIndexDivisor != -1) {\n          state.termsIndexDivisor = _TestUtil.nextInt(random, 1, 10);\n        }\n        indexReader = new VariableGapTermsIndexReader(state.dir,\n                                                      state.fieldInfos,\n                                                      state.segmentInfo.name,\n                                                      state.termsIndexDivisor,\n                                                      state.codecId);\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        postingsReader.close();\n      }\n    }\n\n    final int termsCacheSize = _TestUtil.nextInt(random, 1, 1024);\n\n    success = false;\n    try {\n      FieldsProducer ret = new BlockTermsReader(indexReader,\n                                                state.dir,\n                                                state.fieldInfos,\n                                                state.segmentInfo.name,\n                                                postingsReader,\n                                                state.readBufferSize,\n                                                termsCacheSize,\n                                                state.codecId);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postingsReader.close();\n        } finally {\n          indexReader.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.codecId, SEED_EXT);\n    final IndexInput in = state.dir.openInput(seedFileName);\n    final long seed = in.readLong();\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: reading from seg=\" + state.segmentInfo.name + \" seed=\" + seed);\n    }\n    in.close();\n\n    final Random random = new Random(seed);\n    PostingsReaderBase postingsReader;\n\n    if (random.nextBoolean()) {\n      postingsReader = new SepPostingsReaderImpl(state.dir, state.segmentInfo,\n                                                 state.readBufferSize, new MockIntStreamFactory(random), state.codecId);\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Standard postings\");\n      }\n      postingsReader = new StandardPostingsReader(state.dir, state.segmentInfo, state.readBufferSize, state.codecId);\n    }\n\n    if (random.nextBoolean()) {\n      final int totTFCutoff = _TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading pulsing postings with totTFCutoff=\" + totTFCutoff);\n      }\n      postingsReader = new PulsingPostingsReaderImpl(postingsReader);\n    }\n\n    final TermsIndexReaderBase indexReader;\n    boolean success = false;\n\n    try {\n      if (random.nextBoolean()) {\n        // if termsIndexDivisor is set to -1, we should not touch it. It means a\n        // test explicitly instructed not to load the terms index.\n        if (state.termsIndexDivisor != -1) {\n          state.termsIndexDivisor = _TestUtil.nextInt(random, 1, 10);\n        }\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"MockRandomCodec: fixed-gap terms index (divisor=\" + state.termsIndexDivisor + \")\");\n        }\n        indexReader = new FixedGapTermsIndexReader(state.dir,\n                                                   state.fieldInfos,\n                                                   state.segmentInfo.name,\n                                                   state.termsIndexDivisor,\n                                                   BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                   state.codecId);\n      } else {\n        final int n2 = random.nextInt(3);\n        if (n2 == 1) {\n          random.nextInt();\n        } else if (n2 == 2) {\n          random.nextLong();\n        }\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"MockRandomCodec: variable-gap terms index (divisor=\" + state.termsIndexDivisor + \")\");\n        }\n        if (state.termsIndexDivisor != -1) {\n          state.termsIndexDivisor = _TestUtil.nextInt(random, 1, 10);\n        }\n        indexReader = new VariableGapTermsIndexReader(state.dir,\n                                                      state.fieldInfos,\n                                                      state.segmentInfo.name,\n                                                      state.termsIndexDivisor,\n                                                      state.codecId);\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        postingsReader.close();\n      }\n    }\n\n    final int termsCacheSize = _TestUtil.nextInt(random, 1, 1024);\n\n    success = false;\n    try {\n      FieldsProducer ret = new BlockTermsReader(indexReader,\n                                                state.dir,\n                                                state.fieldInfos,\n                                                state.segmentInfo.name,\n                                                postingsReader,\n                                                state.readBufferSize,\n                                                BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                termsCacheSize,\n                                                state.codecId);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postingsReader.close();\n        } finally {\n          indexReader.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f1bdbf92da222965b46c0a942c3857ba56e5c638","date":1298297608,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/index/codecs/mockrandom/MockRandomCodec#fieldsProducer(SegmentReadState).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/index/codecs/mockrandom/MockRandomCodec#fieldsProducer(SegmentReadState).mjava","sourceNew":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.codecId, SEED_EXT);\n    final IndexInput in = state.dir.openInput(seedFileName);\n    final long seed = in.readLong();\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: reading from seg=\" + state.segmentInfo.name + \" seed=\" + seed);\n    }\n    in.close();\n\n    final Random random = new Random(seed);\n    PostingsReaderBase postingsReader;\n\n    if (random.nextBoolean()) {\n      postingsReader = new SepPostingsReaderImpl(state.dir, state.segmentInfo,\n                                                 state.readBufferSize, new MockIntStreamFactory(random), state.codecId);\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Standard postings\");\n      }\n      postingsReader = new StandardPostingsReader(state.dir, state.segmentInfo, state.readBufferSize, state.codecId);\n    }\n\n    if (random.nextBoolean()) {\n      final int totTFCutoff = _TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading pulsing postings with totTFCutoff=\" + totTFCutoff);\n      }\n      postingsReader = new PulsingPostingsReaderImpl(postingsReader);\n    }\n\n    final TermsIndexReaderBase indexReader;\n    boolean success = false;\n\n    try {\n      if (random.nextBoolean()) {\n        // if termsIndexDivisor is set to -1, we should not touch it. It means a\n        // test explicitly instructed not to load the terms index.\n        if (state.termsIndexDivisor != -1) {\n          state.termsIndexDivisor = _TestUtil.nextInt(random, 1, 10);\n        }\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"MockRandomCodec: fixed-gap terms index (divisor=\" + state.termsIndexDivisor + \")\");\n        }\n        indexReader = new FixedGapTermsIndexReader(state.dir,\n                                                   state.fieldInfos,\n                                                   state.segmentInfo.name,\n                                                   state.termsIndexDivisor,\n                                                   BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                   state.codecId);\n      } else {\n        final int n2 = random.nextInt(3);\n        if (n2 == 1) {\n          random.nextInt();\n        } else if (n2 == 2) {\n          random.nextLong();\n        }\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"MockRandomCodec: variable-gap terms index (divisor=\" + state.termsIndexDivisor + \")\");\n        }\n        if (state.termsIndexDivisor != -1) {\n          state.termsIndexDivisor = _TestUtil.nextInt(random, 1, 10);\n        }\n        indexReader = new VariableGapTermsIndexReader(state.dir,\n                                                      state.fieldInfos,\n                                                      state.segmentInfo.name,\n                                                      state.termsIndexDivisor,\n                                                      state.codecId);\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        postingsReader.close();\n      }\n    }\n\n    final int termsCacheSize = _TestUtil.nextInt(random, 1, 1024);\n\n    success = false;\n    try {\n      FieldsProducer ret = new BlockTermsReader(indexReader,\n                                                state.dir,\n                                                state.fieldInfos,\n                                                state.segmentInfo.name,\n                                                postingsReader,\n                                                state.readBufferSize,\n                                                termsCacheSize,\n                                                state.codecId);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postingsReader.close();\n        } finally {\n          indexReader.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.codecId, SEED_EXT);\n    final IndexInput in = state.dir.openInput(seedFileName);\n    final long seed = in.readLong();\n    in.close();\n\n    final Random random = new Random(seed);\n    PostingsReaderBase postingsReader;\n    final int n = random.nextInt(4);\n\n    if (n == 0) {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading MockSep postings\");\n      }\n      postingsReader = new SepPostingsReaderImpl(state.dir, state.segmentInfo,\n                                                 state.readBufferSize, new MockSingleIntFactory(), state.codecId);\n    } else if (n == 1) {\n      final int blockSize = _TestUtil.nextInt(random, 1, 2000);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading MockFixedIntBlock(\" + blockSize + \") postings\");\n      }\n      postingsReader = new SepPostingsReaderImpl(state.dir, state.segmentInfo,\n                                                 state.readBufferSize, new MockFixedIntBlockCodec.MockIntFactory(blockSize), state.codecId);\n    } else if (n == 2) {\n      final int baseBlockSize = _TestUtil.nextInt(random, 1, 127);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading MockVariableIntBlock(\" + baseBlockSize + \") postings\");\n      }\n      postingsReader = new SepPostingsReaderImpl(state.dir, state.segmentInfo,\n                                                 state.readBufferSize, new MockVariableIntBlockCodec.MockIntFactory(baseBlockSize), state.codecId);\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Standard postings\");\n      }\n      postingsReader = new StandardPostingsReader(state.dir, state.segmentInfo, state.readBufferSize, state.codecId);\n    }\n\n    if (random.nextBoolean()) {\n      final int totTFCutoff = _TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading pulsing postings with totTFCutoff=\" + totTFCutoff);\n      }\n      postingsReader = new PulsingPostingsReaderImpl(postingsReader);\n    }\n\n    final TermsIndexReaderBase indexReader;\n    boolean success = false;\n\n    try {\n      if (random.nextBoolean()) {\n        // if termsIndexDivisor is set to -1, we should not touch it. It means a\n        // test explicitly instructed not to load the terms index.\n        if (state.termsIndexDivisor != -1) {\n          state.termsIndexDivisor = _TestUtil.nextInt(random, 1, 10);\n        }\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"MockRandomCodec: fixed-gap terms index (divisor=\" + state.termsIndexDivisor + \")\");\n        }\n        indexReader = new FixedGapTermsIndexReader(state.dir,\n                                                   state.fieldInfos,\n                                                   state.segmentInfo.name,\n                                                   state.termsIndexDivisor,\n                                                   BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                   state.codecId);\n      } else {\n        final int n2 = random.nextInt(3);\n        if (n2 == 1) {\n          random.nextInt();\n        } else if (n2 == 2) {\n          random.nextLong();\n        }\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"MockRandomCodec: variable-gap terms index (divisor=\" + state.termsIndexDivisor + \")\");\n        }\n        if (state.termsIndexDivisor != -1) {\n          state.termsIndexDivisor = _TestUtil.nextInt(random, 1, 10);\n        }\n        indexReader = new VariableGapTermsIndexReader(state.dir,\n                                                      state.fieldInfos,\n                                                      state.segmentInfo.name,\n                                                      state.termsIndexDivisor,\n                                                      state.codecId);\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        postingsReader.close();\n      }\n    }\n\n    final int termsCacheSize = _TestUtil.nextInt(random, 1, 1024);\n\n    success = false;\n    try {\n      FieldsProducer ret = new BlockTermsReader(indexReader,\n                                                state.dir,\n                                                state.fieldInfos,\n                                                state.segmentInfo.name,\n                                                postingsReader,\n                                                state.readBufferSize,\n                                                BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                termsCacheSize,\n                                                state.codecId);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postingsReader.close();\n        } finally {\n          indexReader.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":1,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/index/codecs/mockrandom/MockRandomCodec#fieldsProducer(SegmentReadState).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/codecs/mockrandom/MockRandomCodec#fieldsProducer(SegmentReadState).mjava","sourceNew":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.codecId, SEED_EXT);\n    final IndexInput in = state.dir.openInput(seedFileName);\n    final long seed = in.readLong();\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: reading from seg=\" + state.segmentInfo.name + \" seed=\" + seed);\n    }\n    in.close();\n\n    final Random random = new Random(seed);\n    PostingsReaderBase postingsReader;\n\n    if (random.nextBoolean()) {\n      postingsReader = new SepPostingsReaderImpl(state.dir, state.segmentInfo,\n                                                 state.readBufferSize, new MockIntStreamFactory(random), state.codecId);\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Standard postings\");\n      }\n      postingsReader = new StandardPostingsReader(state.dir, state.segmentInfo, state.readBufferSize, state.codecId);\n    }\n\n    if (random.nextBoolean()) {\n      final int totTFCutoff = _TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading pulsing postings with totTFCutoff=\" + totTFCutoff);\n      }\n      postingsReader = new PulsingPostingsReaderImpl(postingsReader);\n    }\n\n    final TermsIndexReaderBase indexReader;\n    boolean success = false;\n\n    try {\n      if (random.nextBoolean()) {\n        // if termsIndexDivisor is set to -1, we should not touch it. It means a\n        // test explicitly instructed not to load the terms index.\n        if (state.termsIndexDivisor != -1) {\n          state.termsIndexDivisor = _TestUtil.nextInt(random, 1, 10);\n        }\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"MockRandomCodec: fixed-gap terms index (divisor=\" + state.termsIndexDivisor + \")\");\n        }\n        indexReader = new FixedGapTermsIndexReader(state.dir,\n                                                   state.fieldInfos,\n                                                   state.segmentInfo.name,\n                                                   state.termsIndexDivisor,\n                                                   BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                   state.codecId);\n      } else {\n        final int n2 = random.nextInt(3);\n        if (n2 == 1) {\n          random.nextInt();\n        } else if (n2 == 2) {\n          random.nextLong();\n        }\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"MockRandomCodec: variable-gap terms index (divisor=\" + state.termsIndexDivisor + \")\");\n        }\n        if (state.termsIndexDivisor != -1) {\n          state.termsIndexDivisor = _TestUtil.nextInt(random, 1, 10);\n        }\n        indexReader = new VariableGapTermsIndexReader(state.dir,\n                                                      state.fieldInfos,\n                                                      state.segmentInfo.name,\n                                                      state.termsIndexDivisor,\n                                                      state.codecId);\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        postingsReader.close();\n      }\n    }\n\n    final int termsCacheSize = _TestUtil.nextInt(random, 1, 1024);\n\n    success = false;\n    try {\n      FieldsProducer ret = new BlockTermsReader(indexReader,\n                                                state.dir,\n                                                state.fieldInfos,\n                                                state.segmentInfo.name,\n                                                postingsReader,\n                                                state.readBufferSize,\n                                                termsCacheSize,\n                                                state.codecId);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postingsReader.close();\n        } finally {\n          indexReader.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.codecId, SEED_EXT);\n    final IndexInput in = state.dir.openInput(seedFileName);\n    final long seed = in.readLong();\n    in.close();\n\n    final Random random = new Random(seed);\n    PostingsReaderBase postingsReader;\n    final int n = random.nextInt(4);\n\n    if (n == 0) {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading MockSep postings\");\n      }\n      postingsReader = new SepPostingsReaderImpl(state.dir, state.segmentInfo,\n                                                 state.readBufferSize, new MockSingleIntFactory(), state.codecId);\n    } else if (n == 1) {\n      final int blockSize = _TestUtil.nextInt(random, 1, 2000);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading MockFixedIntBlock(\" + blockSize + \") postings\");\n      }\n      postingsReader = new SepPostingsReaderImpl(state.dir, state.segmentInfo,\n                                                 state.readBufferSize, new MockFixedIntBlockCodec.MockIntFactory(blockSize), state.codecId);\n    } else if (n == 2) {\n      final int baseBlockSize = _TestUtil.nextInt(random, 1, 127);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading MockVariableIntBlock(\" + baseBlockSize + \") postings\");\n      }\n      postingsReader = new SepPostingsReaderImpl(state.dir, state.segmentInfo,\n                                                 state.readBufferSize, new MockVariableIntBlockCodec.MockIntFactory(baseBlockSize), state.codecId);\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Standard postings\");\n      }\n      postingsReader = new StandardPostingsReader(state.dir, state.segmentInfo, state.readBufferSize, state.codecId);\n    }\n\n    if (random.nextBoolean()) {\n      final int totTFCutoff = _TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading pulsing postings with totTFCutoff=\" + totTFCutoff);\n      }\n      postingsReader = new PulsingPostingsReaderImpl(postingsReader);\n    }\n\n    final TermsIndexReaderBase indexReader;\n    boolean success = false;\n\n    try {\n      if (random.nextBoolean()) {\n        state.termsIndexDivisor = _TestUtil.nextInt(random, 1, 10);\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"MockRandomCodec: fixed-gap terms index (divisor=\" + state.termsIndexDivisor + \")\");\n        }\n        indexReader = new FixedGapTermsIndexReader(state.dir,\n                                                   state.fieldInfos,\n                                                   state.segmentInfo.name,\n                                                   state.termsIndexDivisor,\n                                                   BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                   state.codecId);\n      } else {\n        final int n2 = random.nextInt(3);\n        if (n2 == 1) {\n          random.nextInt();\n        } else if (n2 == 2) {\n          random.nextLong();\n        }\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"MockRandomCodec: variable-gap terms index (divisor=\" + state.termsIndexDivisor + \")\");\n        }\n        state.termsIndexDivisor = _TestUtil.nextInt(random, 1, 10);\n        indexReader = new VariableGapTermsIndexReader(state.dir,\n                                                      state.fieldInfos,\n                                                      state.segmentInfo.name,\n                                                      state.termsIndexDivisor,\n                                                      state.codecId);\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        postingsReader.close();\n      }\n    }\n\n    final int termsCacheSize = _TestUtil.nextInt(random, 1, 1024);\n\n    success = false;\n    try {\n      FieldsProducer ret = new BlockTermsReader(indexReader,\n                                                state.dir,\n                                                state.fieldInfos,\n                                                state.segmentInfo.name,\n                                                postingsReader,\n                                                state.readBufferSize,\n                                                BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                termsCacheSize,\n                                                state.codecId);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postingsReader.close();\n        } finally {\n          indexReader.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/index/codecs/mockrandom/MockRandomCodec#fieldsProducer(SegmentReadState).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/index/codecs/mockrandom/MockRandomCodec#fieldsProducer(SegmentReadState).mjava","sourceNew":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.codecIdAsString(), SEED_EXT);\n    final IndexInput in = state.dir.openInput(seedFileName);\n    final long seed = in.readLong();\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: reading from seg=\" + state.segmentInfo.name + \" seed=\" + seed);\n    }\n    in.close();\n\n    final Random random = new Random(seed);\n    PostingsReaderBase postingsReader;\n\n    if (random.nextBoolean()) {\n      postingsReader = new SepPostingsReaderImpl(state.dir, state.segmentInfo,\n                                                 state.readBufferSize, new MockIntStreamFactory(random), state.codecId);\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Standard postings\");\n      }\n      postingsReader = new StandardPostingsReader(state.dir, state.segmentInfo, state.readBufferSize, state.codecId);\n    }\n\n    if (random.nextBoolean()) {\n      final int totTFCutoff = _TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading pulsing postings with totTFCutoff=\" + totTFCutoff);\n      }\n      postingsReader = new PulsingPostingsReaderImpl(postingsReader);\n    }\n\n    final TermsIndexReaderBase indexReader;\n    boolean success = false;\n\n    try {\n      if (random.nextBoolean()) {\n        // if termsIndexDivisor is set to -1, we should not touch it. It means a\n        // test explicitly instructed not to load the terms index.\n        if (state.termsIndexDivisor != -1) {\n          state.termsIndexDivisor = _TestUtil.nextInt(random, 1, 10);\n        }\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"MockRandomCodec: fixed-gap terms index (divisor=\" + state.termsIndexDivisor + \")\");\n        }\n        indexReader = new FixedGapTermsIndexReader(state.dir,\n                                                   state.fieldInfos,\n                                                   state.segmentInfo.name,\n                                                   state.termsIndexDivisor,\n                                                   BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                   state.codecId);\n      } else {\n        final int n2 = random.nextInt(3);\n        if (n2 == 1) {\n          random.nextInt();\n        } else if (n2 == 2) {\n          random.nextLong();\n        }\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"MockRandomCodec: variable-gap terms index (divisor=\" + state.termsIndexDivisor + \")\");\n        }\n        if (state.termsIndexDivisor != -1) {\n          state.termsIndexDivisor = _TestUtil.nextInt(random, 1, 10);\n        }\n        indexReader = new VariableGapTermsIndexReader(state.dir,\n                                                      state.fieldInfos,\n                                                      state.segmentInfo.name,\n                                                      state.termsIndexDivisor,\n                                                      state.codecId);\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        postingsReader.close();\n      }\n    }\n\n    final int termsCacheSize = _TestUtil.nextInt(random, 1, 1024);\n\n    success = false;\n    try {\n      FieldsProducer ret = new BlockTermsReader(indexReader,\n                                                state.dir,\n                                                state.fieldInfos,\n                                                state.segmentInfo.name,\n                                                postingsReader,\n                                                state.readBufferSize,\n                                                termsCacheSize,\n                                                state.codecId);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postingsReader.close();\n        } finally {\n          indexReader.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.codecId, SEED_EXT);\n    final IndexInput in = state.dir.openInput(seedFileName);\n    final long seed = in.readLong();\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: reading from seg=\" + state.segmentInfo.name + \" seed=\" + seed);\n    }\n    in.close();\n\n    final Random random = new Random(seed);\n    PostingsReaderBase postingsReader;\n\n    if (random.nextBoolean()) {\n      postingsReader = new SepPostingsReaderImpl(state.dir, state.segmentInfo,\n                                                 state.readBufferSize, new MockIntStreamFactory(random), state.codecId);\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Standard postings\");\n      }\n      postingsReader = new StandardPostingsReader(state.dir, state.segmentInfo, state.readBufferSize, state.codecId);\n    }\n\n    if (random.nextBoolean()) {\n      final int totTFCutoff = _TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading pulsing postings with totTFCutoff=\" + totTFCutoff);\n      }\n      postingsReader = new PulsingPostingsReaderImpl(postingsReader);\n    }\n\n    final TermsIndexReaderBase indexReader;\n    boolean success = false;\n\n    try {\n      if (random.nextBoolean()) {\n        // if termsIndexDivisor is set to -1, we should not touch it. It means a\n        // test explicitly instructed not to load the terms index.\n        if (state.termsIndexDivisor != -1) {\n          state.termsIndexDivisor = _TestUtil.nextInt(random, 1, 10);\n        }\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"MockRandomCodec: fixed-gap terms index (divisor=\" + state.termsIndexDivisor + \")\");\n        }\n        indexReader = new FixedGapTermsIndexReader(state.dir,\n                                                   state.fieldInfos,\n                                                   state.segmentInfo.name,\n                                                   state.termsIndexDivisor,\n                                                   BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                   state.codecId);\n      } else {\n        final int n2 = random.nextInt(3);\n        if (n2 == 1) {\n          random.nextInt();\n        } else if (n2 == 2) {\n          random.nextLong();\n        }\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"MockRandomCodec: variable-gap terms index (divisor=\" + state.termsIndexDivisor + \")\");\n        }\n        if (state.termsIndexDivisor != -1) {\n          state.termsIndexDivisor = _TestUtil.nextInt(random, 1, 10);\n        }\n        indexReader = new VariableGapTermsIndexReader(state.dir,\n                                                      state.fieldInfos,\n                                                      state.segmentInfo.name,\n                                                      state.termsIndexDivisor,\n                                                      state.codecId);\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        postingsReader.close();\n      }\n    }\n\n    final int termsCacheSize = _TestUtil.nextInt(random, 1, 1024);\n\n    success = false;\n    try {\n      FieldsProducer ret = new BlockTermsReader(indexReader,\n                                                state.dir,\n                                                state.fieldInfos,\n                                                state.segmentInfo.name,\n                                                postingsReader,\n                                                state.readBufferSize,\n                                                termsCacheSize,\n                                                state.codecId);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postingsReader.close();\n        } finally {\n          indexReader.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8c5a871c0a23009308ca3ffa6b14f04457e271ff","date":1305043277,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/index/codecs/mockrandom/MockRandomCodec#fieldsProducer(SegmentReadState).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/index/codecs/mockrandom/MockRandomCodec#fieldsProducer(SegmentReadState).mjava","sourceNew":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.codecId, SEED_EXT);\n    final IndexInput in = state.dir.openInput(seedFileName);\n    final long seed = in.readLong();\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: reading from seg=\" + state.segmentInfo.name + \" seed=\" + seed);\n    }\n    in.close();\n\n    final Random random = new Random(seed);\n    \n    int readBufferSize = _TestUtil.nextInt(random, 1, 4096);\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: readBufferSize=\" + readBufferSize);\n    }\n\n    PostingsReaderBase postingsReader;\n\n    if (random.nextBoolean()) {\n      postingsReader = new SepPostingsReaderImpl(state.dir, state.segmentInfo,\n                                                 readBufferSize, new MockIntStreamFactory(random), state.codecId);\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Standard postings\");\n      }\n      postingsReader = new StandardPostingsReader(state.dir, state.segmentInfo, readBufferSize, state.codecId);\n    }\n\n    if (random.nextBoolean()) {\n      final int totTFCutoff = _TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading pulsing postings with totTFCutoff=\" + totTFCutoff);\n      }\n      postingsReader = new PulsingPostingsReaderImpl(postingsReader);\n    }\n\n    final TermsIndexReaderBase indexReader;\n    boolean success = false;\n\n    try {\n      if (random.nextBoolean()) {\n        // if termsIndexDivisor is set to -1, we should not touch it. It means a\n        // test explicitly instructed not to load the terms index.\n        if (state.termsIndexDivisor != -1) {\n          state.termsIndexDivisor = _TestUtil.nextInt(random, 1, 10);\n        }\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"MockRandomCodec: fixed-gap terms index (divisor=\" + state.termsIndexDivisor + \")\");\n        }\n        indexReader = new FixedGapTermsIndexReader(state.dir,\n                                                   state.fieldInfos,\n                                                   state.segmentInfo.name,\n                                                   state.termsIndexDivisor,\n                                                   BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                   state.codecId);\n      } else {\n        final int n2 = random.nextInt(3);\n        if (n2 == 1) {\n          random.nextInt();\n        } else if (n2 == 2) {\n          random.nextLong();\n        }\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"MockRandomCodec: variable-gap terms index (divisor=\" + state.termsIndexDivisor + \")\");\n        }\n        if (state.termsIndexDivisor != -1) {\n          state.termsIndexDivisor = _TestUtil.nextInt(random, 1, 10);\n        }\n        indexReader = new VariableGapTermsIndexReader(state.dir,\n                                                      state.fieldInfos,\n                                                      state.segmentInfo.name,\n                                                      state.termsIndexDivisor,\n                                                      state.codecId);\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        postingsReader.close();\n      }\n    }\n\n    final int termsCacheSize = _TestUtil.nextInt(random, 1, 1024);\n\n    success = false;\n    try {\n      FieldsProducer ret = new BlockTermsReader(indexReader,\n                                                state.dir,\n                                                state.fieldInfos,\n                                                state.segmentInfo.name,\n                                                postingsReader,\n                                                readBufferSize,\n                                                termsCacheSize,\n                                                state.codecId);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postingsReader.close();\n        } finally {\n          indexReader.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.codecId, SEED_EXT);\n    final IndexInput in = state.dir.openInput(seedFileName);\n    final long seed = in.readLong();\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: reading from seg=\" + state.segmentInfo.name + \" seed=\" + seed);\n    }\n    in.close();\n\n    final Random random = new Random(seed);\n    PostingsReaderBase postingsReader;\n\n    if (random.nextBoolean()) {\n      postingsReader = new SepPostingsReaderImpl(state.dir, state.segmentInfo,\n                                                 state.readBufferSize, new MockIntStreamFactory(random), state.codecId);\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Standard postings\");\n      }\n      postingsReader = new StandardPostingsReader(state.dir, state.segmentInfo, state.readBufferSize, state.codecId);\n    }\n\n    if (random.nextBoolean()) {\n      final int totTFCutoff = _TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading pulsing postings with totTFCutoff=\" + totTFCutoff);\n      }\n      postingsReader = new PulsingPostingsReaderImpl(postingsReader);\n    }\n\n    final TermsIndexReaderBase indexReader;\n    boolean success = false;\n\n    try {\n      if (random.nextBoolean()) {\n        // if termsIndexDivisor is set to -1, we should not touch it. It means a\n        // test explicitly instructed not to load the terms index.\n        if (state.termsIndexDivisor != -1) {\n          state.termsIndexDivisor = _TestUtil.nextInt(random, 1, 10);\n        }\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"MockRandomCodec: fixed-gap terms index (divisor=\" + state.termsIndexDivisor + \")\");\n        }\n        indexReader = new FixedGapTermsIndexReader(state.dir,\n                                                   state.fieldInfos,\n                                                   state.segmentInfo.name,\n                                                   state.termsIndexDivisor,\n                                                   BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                   state.codecId);\n      } else {\n        final int n2 = random.nextInt(3);\n        if (n2 == 1) {\n          random.nextInt();\n        } else if (n2 == 2) {\n          random.nextLong();\n        }\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"MockRandomCodec: variable-gap terms index (divisor=\" + state.termsIndexDivisor + \")\");\n        }\n        if (state.termsIndexDivisor != -1) {\n          state.termsIndexDivisor = _TestUtil.nextInt(random, 1, 10);\n        }\n        indexReader = new VariableGapTermsIndexReader(state.dir,\n                                                      state.fieldInfos,\n                                                      state.segmentInfo.name,\n                                                      state.termsIndexDivisor,\n                                                      state.codecId);\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        postingsReader.close();\n      }\n    }\n\n    final int termsCacheSize = _TestUtil.nextInt(random, 1, 1024);\n\n    success = false;\n    try {\n      FieldsProducer ret = new BlockTermsReader(indexReader,\n                                                state.dir,\n                                                state.fieldInfos,\n                                                state.segmentInfo.name,\n                                                postingsReader,\n                                                state.readBufferSize,\n                                                termsCacheSize,\n                                                state.codecId);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postingsReader.close();\n        } finally {\n          indexReader.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c700f8d0842d3e52bb2bdfbfdc046a137e836edb","date":1305285499,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/index/codecs/mockrandom/MockRandomCodec#fieldsProducer(SegmentReadState).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/index/codecs/mockrandom/MockRandomCodec#fieldsProducer(SegmentReadState).mjava","sourceNew":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.codecIdAsString(), SEED_EXT);\n    final IndexInput in = state.dir.openInput(seedFileName);\n    final long seed = in.readLong();\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: reading from seg=\" + state.segmentInfo.name + \" seed=\" + seed);\n    }\n    in.close();\n\n    final Random random = new Random(seed);\n    \n    int readBufferSize = _TestUtil.nextInt(random, 1, 4096);\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: readBufferSize=\" + readBufferSize);\n    }\n\n    PostingsReaderBase postingsReader;\n\n    if (random.nextBoolean()) {\n      postingsReader = new SepPostingsReaderImpl(state.dir, state.segmentInfo,\n                                                 readBufferSize, new MockIntStreamFactory(random), state.codecId);\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Standard postings\");\n      }\n      postingsReader = new StandardPostingsReader(state.dir, state.segmentInfo, readBufferSize, state.codecId);\n    }\n\n    if (random.nextBoolean()) {\n      final int totTFCutoff = _TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading pulsing postings with totTFCutoff=\" + totTFCutoff);\n      }\n      postingsReader = new PulsingPostingsReaderImpl(postingsReader);\n    }\n\n    final TermsIndexReaderBase indexReader;\n    boolean success = false;\n\n    try {\n      if (random.nextBoolean()) {\n        // if termsIndexDivisor is set to -1, we should not touch it. It means a\n        // test explicitly instructed not to load the terms index.\n        if (state.termsIndexDivisor != -1) {\n          state.termsIndexDivisor = _TestUtil.nextInt(random, 1, 10);\n        }\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"MockRandomCodec: fixed-gap terms index (divisor=\" + state.termsIndexDivisor + \")\");\n        }\n        indexReader = new FixedGapTermsIndexReader(state.dir,\n                                                   state.fieldInfos,\n                                                   state.segmentInfo.name,\n                                                   state.termsIndexDivisor,\n                                                   BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                   state.codecId);\n      } else {\n        final int n2 = random.nextInt(3);\n        if (n2 == 1) {\n          random.nextInt();\n        } else if (n2 == 2) {\n          random.nextLong();\n        }\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"MockRandomCodec: variable-gap terms index (divisor=\" + state.termsIndexDivisor + \")\");\n        }\n        if (state.termsIndexDivisor != -1) {\n          state.termsIndexDivisor = _TestUtil.nextInt(random, 1, 10);\n        }\n        indexReader = new VariableGapTermsIndexReader(state.dir,\n                                                      state.fieldInfos,\n                                                      state.segmentInfo.name,\n                                                      state.termsIndexDivisor,\n                                                      state.codecId);\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        postingsReader.close();\n      }\n    }\n\n    final int termsCacheSize = _TestUtil.nextInt(random, 1, 1024);\n\n    success = false;\n    try {\n      FieldsProducer ret = new BlockTermsReader(indexReader,\n                                                state.dir,\n                                                state.fieldInfos,\n                                                state.segmentInfo.name,\n                                                postingsReader,\n                                                readBufferSize,\n                                                termsCacheSize,\n                                                state.codecId);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postingsReader.close();\n        } finally {\n          indexReader.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.codecIdAsString(), SEED_EXT);\n    final IndexInput in = state.dir.openInput(seedFileName);\n    final long seed = in.readLong();\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: reading from seg=\" + state.segmentInfo.name + \" seed=\" + seed);\n    }\n    in.close();\n\n    final Random random = new Random(seed);\n    PostingsReaderBase postingsReader;\n\n    if (random.nextBoolean()) {\n      postingsReader = new SepPostingsReaderImpl(state.dir, state.segmentInfo,\n                                                 state.readBufferSize, new MockIntStreamFactory(random), state.codecId);\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Standard postings\");\n      }\n      postingsReader = new StandardPostingsReader(state.dir, state.segmentInfo, state.readBufferSize, state.codecId);\n    }\n\n    if (random.nextBoolean()) {\n      final int totTFCutoff = _TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading pulsing postings with totTFCutoff=\" + totTFCutoff);\n      }\n      postingsReader = new PulsingPostingsReaderImpl(postingsReader);\n    }\n\n    final TermsIndexReaderBase indexReader;\n    boolean success = false;\n\n    try {\n      if (random.nextBoolean()) {\n        // if termsIndexDivisor is set to -1, we should not touch it. It means a\n        // test explicitly instructed not to load the terms index.\n        if (state.termsIndexDivisor != -1) {\n          state.termsIndexDivisor = _TestUtil.nextInt(random, 1, 10);\n        }\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"MockRandomCodec: fixed-gap terms index (divisor=\" + state.termsIndexDivisor + \")\");\n        }\n        indexReader = new FixedGapTermsIndexReader(state.dir,\n                                                   state.fieldInfos,\n                                                   state.segmentInfo.name,\n                                                   state.termsIndexDivisor,\n                                                   BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                   state.codecId);\n      } else {\n        final int n2 = random.nextInt(3);\n        if (n2 == 1) {\n          random.nextInt();\n        } else if (n2 == 2) {\n          random.nextLong();\n        }\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"MockRandomCodec: variable-gap terms index (divisor=\" + state.termsIndexDivisor + \")\");\n        }\n        if (state.termsIndexDivisor != -1) {\n          state.termsIndexDivisor = _TestUtil.nextInt(random, 1, 10);\n        }\n        indexReader = new VariableGapTermsIndexReader(state.dir,\n                                                      state.fieldInfos,\n                                                      state.segmentInfo.name,\n                                                      state.termsIndexDivisor,\n                                                      state.codecId);\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        postingsReader.close();\n      }\n    }\n\n    final int termsCacheSize = _TestUtil.nextInt(random, 1, 1024);\n\n    success = false;\n    try {\n      FieldsProducer ret = new BlockTermsReader(indexReader,\n                                                state.dir,\n                                                state.fieldInfos,\n                                                state.segmentInfo.name,\n                                                postingsReader,\n                                                state.readBufferSize,\n                                                termsCacheSize,\n                                                state.codecId);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postingsReader.close();\n        } finally {\n          indexReader.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/index/codecs/mockrandom/MockRandomCodec#fieldsProducer(SegmentReadState).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/index/codecs/mockrandom/MockRandomCodec#fieldsProducer(SegmentReadState).mjava","sourceNew":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.codecId, SEED_EXT);\n    final IndexInput in = state.dir.openInput(seedFileName);\n    final long seed = in.readLong();\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: reading from seg=\" + state.segmentInfo.name + \" seed=\" + seed);\n    }\n    in.close();\n\n    final Random random = new Random(seed);\n    \n    int readBufferSize = _TestUtil.nextInt(random, 1, 4096);\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: readBufferSize=\" + readBufferSize);\n    }\n\n    PostingsReaderBase postingsReader;\n\n    if (random.nextBoolean()) {\n      postingsReader = new SepPostingsReaderImpl(state.dir, state.segmentInfo,\n                                                 readBufferSize, new MockIntStreamFactory(random), state.codecId);\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Standard postings\");\n      }\n      postingsReader = new StandardPostingsReader(state.dir, state.segmentInfo, readBufferSize, state.codecId);\n    }\n\n    if (random.nextBoolean()) {\n      final int totTFCutoff = _TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading pulsing postings with totTFCutoff=\" + totTFCutoff);\n      }\n      postingsReader = new PulsingPostingsReaderImpl(postingsReader);\n    }\n\n    final TermsIndexReaderBase indexReader;\n    boolean success = false;\n\n    try {\n      if (random.nextBoolean()) {\n        // if termsIndexDivisor is set to -1, we should not touch it. It means a\n        // test explicitly instructed not to load the terms index.\n        if (state.termsIndexDivisor != -1) {\n          state.termsIndexDivisor = _TestUtil.nextInt(random, 1, 10);\n        }\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"MockRandomCodec: fixed-gap terms index (divisor=\" + state.termsIndexDivisor + \")\");\n        }\n        indexReader = new FixedGapTermsIndexReader(state.dir,\n                                                   state.fieldInfos,\n                                                   state.segmentInfo.name,\n                                                   state.termsIndexDivisor,\n                                                   BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                   state.codecId);\n      } else {\n        final int n2 = random.nextInt(3);\n        if (n2 == 1) {\n          random.nextInt();\n        } else if (n2 == 2) {\n          random.nextLong();\n        }\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"MockRandomCodec: variable-gap terms index (divisor=\" + state.termsIndexDivisor + \")\");\n        }\n        if (state.termsIndexDivisor != -1) {\n          state.termsIndexDivisor = _TestUtil.nextInt(random, 1, 10);\n        }\n        indexReader = new VariableGapTermsIndexReader(state.dir,\n                                                      state.fieldInfos,\n                                                      state.segmentInfo.name,\n                                                      state.termsIndexDivisor,\n                                                      state.codecId);\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        postingsReader.close();\n      }\n    }\n\n    final int termsCacheSize = _TestUtil.nextInt(random, 1, 1024);\n\n    success = false;\n    try {\n      FieldsProducer ret = new BlockTermsReader(indexReader,\n                                                state.dir,\n                                                state.fieldInfos,\n                                                state.segmentInfo.name,\n                                                postingsReader,\n                                                readBufferSize,\n                                                termsCacheSize,\n                                                state.codecId);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postingsReader.close();\n        } finally {\n          indexReader.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.codecId, SEED_EXT);\n    final IndexInput in = state.dir.openInput(seedFileName);\n    final long seed = in.readLong();\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: reading from seg=\" + state.segmentInfo.name + \" seed=\" + seed);\n    }\n    in.close();\n\n    final Random random = new Random(seed);\n    PostingsReaderBase postingsReader;\n\n    if (random.nextBoolean()) {\n      postingsReader = new SepPostingsReaderImpl(state.dir, state.segmentInfo,\n                                                 state.readBufferSize, new MockIntStreamFactory(random), state.codecId);\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Standard postings\");\n      }\n      postingsReader = new StandardPostingsReader(state.dir, state.segmentInfo, state.readBufferSize, state.codecId);\n    }\n\n    if (random.nextBoolean()) {\n      final int totTFCutoff = _TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading pulsing postings with totTFCutoff=\" + totTFCutoff);\n      }\n      postingsReader = new PulsingPostingsReaderImpl(postingsReader);\n    }\n\n    final TermsIndexReaderBase indexReader;\n    boolean success = false;\n\n    try {\n      if (random.nextBoolean()) {\n        // if termsIndexDivisor is set to -1, we should not touch it. It means a\n        // test explicitly instructed not to load the terms index.\n        if (state.termsIndexDivisor != -1) {\n          state.termsIndexDivisor = _TestUtil.nextInt(random, 1, 10);\n        }\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"MockRandomCodec: fixed-gap terms index (divisor=\" + state.termsIndexDivisor + \")\");\n        }\n        indexReader = new FixedGapTermsIndexReader(state.dir,\n                                                   state.fieldInfos,\n                                                   state.segmentInfo.name,\n                                                   state.termsIndexDivisor,\n                                                   BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                   state.codecId);\n      } else {\n        final int n2 = random.nextInt(3);\n        if (n2 == 1) {\n          random.nextInt();\n        } else if (n2 == 2) {\n          random.nextLong();\n        }\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"MockRandomCodec: variable-gap terms index (divisor=\" + state.termsIndexDivisor + \")\");\n        }\n        if (state.termsIndexDivisor != -1) {\n          state.termsIndexDivisor = _TestUtil.nextInt(random, 1, 10);\n        }\n        indexReader = new VariableGapTermsIndexReader(state.dir,\n                                                      state.fieldInfos,\n                                                      state.segmentInfo.name,\n                                                      state.termsIndexDivisor,\n                                                      state.codecId);\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        postingsReader.close();\n      }\n    }\n\n    final int termsCacheSize = _TestUtil.nextInt(random, 1, 1024);\n\n    success = false;\n    try {\n      FieldsProducer ret = new BlockTermsReader(indexReader,\n                                                state.dir,\n                                                state.fieldInfos,\n                                                state.segmentInfo.name,\n                                                postingsReader,\n                                                state.readBufferSize,\n                                                termsCacheSize,\n                                                state.codecId);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postingsReader.close();\n        } finally {\n          indexReader.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0150c6e116b24d66f02d63fcb0758f336e8791e2","date":1307283797,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/index/codecs/mockrandom/MockRandomCodec#fieldsProducer(SegmentReadState).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/index/codecs/mockrandom/MockRandomCodec#fieldsProducer(SegmentReadState).mjava","sourceNew":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.codecId, SEED_EXT);\n    final IndexInput in = state.dir.openInput(seedFileName);\n    final long seed = in.readLong();\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: reading from seg=\" + state.segmentInfo.name + \" seed=\" + seed);\n    }\n    in.close();\n\n    final Random random = new Random(seed);\n    \n    int readBufferSize = _TestUtil.nextInt(random, 1, 4096);\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: readBufferSize=\" + readBufferSize);\n    }\n\n    PostingsReaderBase postingsReader;\n\n    if (random.nextBoolean()) {\n      postingsReader = new SepPostingsReaderImpl(state.dir, state.segmentInfo,\n                                                 readBufferSize, new MockIntStreamFactory(random), state.codecId);\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Standard postings\");\n      }\n      postingsReader = new StandardPostingsReader(state.dir, state.segmentInfo, readBufferSize, state.codecId);\n    }\n\n    if (random.nextBoolean()) {\n      final int totTFCutoff = _TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading pulsing postings with totTFCutoff=\" + totTFCutoff);\n      }\n      postingsReader = new PulsingPostingsReaderImpl(postingsReader);\n    }\n\n    final TermsIndexReaderBase indexReader;\n    boolean success = false;\n\n    try {\n      if (random.nextBoolean()) {\n        // if termsIndexDivisor is set to -1, we should not touch it. It means a\n        // test explicitly instructed not to load the terms index.\n        if (state.termsIndexDivisor != -1) {\n          state.termsIndexDivisor = _TestUtil.nextInt(random, 1, 10);\n        }\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"MockRandomCodec: fixed-gap terms index (divisor=\" + state.termsIndexDivisor + \")\");\n        }\n        indexReader = new FixedGapTermsIndexReader(state.dir,\n                                                   state.fieldInfos,\n                                                   state.segmentInfo.name,\n                                                   state.termsIndexDivisor,\n                                                   BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                   state.codecId);\n      } else {\n        final int n2 = random.nextInt(3);\n        if (n2 == 1) {\n          random.nextInt();\n        } else if (n2 == 2) {\n          random.nextLong();\n        }\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"MockRandomCodec: variable-gap terms index (divisor=\" + state.termsIndexDivisor + \")\");\n        }\n        if (state.termsIndexDivisor != -1) {\n          state.termsIndexDivisor = _TestUtil.nextInt(random, 1, 10);\n        }\n        indexReader = new VariableGapTermsIndexReader(state.dir,\n                                                      state.fieldInfos,\n                                                      state.segmentInfo.name,\n                                                      state.termsIndexDivisor,\n                                                      state.codecId);\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        postingsReader.close();\n      }\n    }\n\n    final int termsCacheSize = _TestUtil.nextInt(random, 1, 1024);\n\n    success = false;\n    try {\n      FieldsProducer ret = new BlockTermsReader(indexReader,\n                                                state.dir,\n                                                state.fieldInfos,\n                                                state.segmentInfo.name,\n                                                postingsReader,\n                                                readBufferSize,\n                                                termsCacheSize,\n                                                state.codecId);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postingsReader.close();\n        } finally {\n          indexReader.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.codecIdAsString(), SEED_EXT);\n    final IndexInput in = state.dir.openInput(seedFileName);\n    final long seed = in.readLong();\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: reading from seg=\" + state.segmentInfo.name + \" seed=\" + seed);\n    }\n    in.close();\n\n    final Random random = new Random(seed);\n    \n    int readBufferSize = _TestUtil.nextInt(random, 1, 4096);\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: readBufferSize=\" + readBufferSize);\n    }\n\n    PostingsReaderBase postingsReader;\n\n    if (random.nextBoolean()) {\n      postingsReader = new SepPostingsReaderImpl(state.dir, state.segmentInfo,\n                                                 readBufferSize, new MockIntStreamFactory(random), state.codecId);\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Standard postings\");\n      }\n      postingsReader = new StandardPostingsReader(state.dir, state.segmentInfo, readBufferSize, state.codecId);\n    }\n\n    if (random.nextBoolean()) {\n      final int totTFCutoff = _TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading pulsing postings with totTFCutoff=\" + totTFCutoff);\n      }\n      postingsReader = new PulsingPostingsReaderImpl(postingsReader);\n    }\n\n    final TermsIndexReaderBase indexReader;\n    boolean success = false;\n\n    try {\n      if (random.nextBoolean()) {\n        // if termsIndexDivisor is set to -1, we should not touch it. It means a\n        // test explicitly instructed not to load the terms index.\n        if (state.termsIndexDivisor != -1) {\n          state.termsIndexDivisor = _TestUtil.nextInt(random, 1, 10);\n        }\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"MockRandomCodec: fixed-gap terms index (divisor=\" + state.termsIndexDivisor + \")\");\n        }\n        indexReader = new FixedGapTermsIndexReader(state.dir,\n                                                   state.fieldInfos,\n                                                   state.segmentInfo.name,\n                                                   state.termsIndexDivisor,\n                                                   BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                   state.codecId);\n      } else {\n        final int n2 = random.nextInt(3);\n        if (n2 == 1) {\n          random.nextInt();\n        } else if (n2 == 2) {\n          random.nextLong();\n        }\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"MockRandomCodec: variable-gap terms index (divisor=\" + state.termsIndexDivisor + \")\");\n        }\n        if (state.termsIndexDivisor != -1) {\n          state.termsIndexDivisor = _TestUtil.nextInt(random, 1, 10);\n        }\n        indexReader = new VariableGapTermsIndexReader(state.dir,\n                                                      state.fieldInfos,\n                                                      state.segmentInfo.name,\n                                                      state.termsIndexDivisor,\n                                                      state.codecId);\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        postingsReader.close();\n      }\n    }\n\n    final int termsCacheSize = _TestUtil.nextInt(random, 1, 1024);\n\n    success = false;\n    try {\n      FieldsProducer ret = new BlockTermsReader(indexReader,\n                                                state.dir,\n                                                state.fieldInfos,\n                                                state.segmentInfo.name,\n                                                postingsReader,\n                                                readBufferSize,\n                                                termsCacheSize,\n                                                state.codecId);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postingsReader.close();\n        } finally {\n          indexReader.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"639c36565ce03aed5b0fce7c9e4448e53a1f7efd","date":1308580104,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/index/codecs/mockrandom/MockRandomCodec#fieldsProducer(SegmentReadState).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/index/codecs/mockrandom/MockRandomCodec#fieldsProducer(SegmentReadState).mjava","sourceNew":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.codecId, SEED_EXT);\n    final IndexInput in = state.dir.openInput(seedFileName, state.context);\n    final long seed = in.readLong();\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: reading from seg=\" + state.segmentInfo.name + \" seed=\" + seed);\n    }\n    in.close();\n\n    final Random random = new Random(seed);\n    \n    int readBufferSize = _TestUtil.nextInt(random, 1, 4096);\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: readBufferSize=\" + readBufferSize);\n    }\n\n    PostingsReaderBase postingsReader;\n\n    if (random.nextBoolean()) {\n      postingsReader = new SepPostingsReaderImpl(state.dir, state.segmentInfo,\n                                                 state.context, new MockIntStreamFactory(random), state.codecId);\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Standard postings\");\n      }\n      postingsReader = new StandardPostingsReader(state.dir, state.segmentInfo, state.context, state.codecId);\n    }\n\n    if (random.nextBoolean()) {\n      final int totTFCutoff = _TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading pulsing postings with totTFCutoff=\" + totTFCutoff);\n      }\n      postingsReader = new PulsingPostingsReaderImpl(postingsReader);\n    }\n\n    final TermsIndexReaderBase indexReader;\n    boolean success = false;\n\n    try {\n      if (random.nextBoolean()) {\n        // if termsIndexDivisor is set to -1, we should not touch it. It means a\n        // test explicitly instructed not to load the terms index.\n        if (state.termsIndexDivisor != -1) {\n          state.termsIndexDivisor = _TestUtil.nextInt(random, 1, 10);\n        }\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"MockRandomCodec: fixed-gap terms index (divisor=\" + state.termsIndexDivisor + \")\");\n        }\n        indexReader = new FixedGapTermsIndexReader(state.dir,\n                                                   state.fieldInfos,\n                                                   state.segmentInfo.name,\n                                                   state.termsIndexDivisor,\n                                                   BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                   state.codecId, state.context);\n      } else {\n        final int n2 = random.nextInt(3);\n        if (n2 == 1) {\n          random.nextInt();\n        } else if (n2 == 2) {\n          random.nextLong();\n        }\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"MockRandomCodec: variable-gap terms index (divisor=\" + state.termsIndexDivisor + \")\");\n        }\n        if (state.termsIndexDivisor != -1) {\n          state.termsIndexDivisor = _TestUtil.nextInt(random, 1, 10);\n        }\n        indexReader = new VariableGapTermsIndexReader(state.dir,\n                                                      state.fieldInfos,\n                                                      state.segmentInfo.name,\n                                                      state.termsIndexDivisor,\n                                                      state.codecId, state.context);\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        postingsReader.close();\n      }\n    }\n\n    final int termsCacheSize = _TestUtil.nextInt(random, 1, 1024);\n\n    success = false;\n    try {\n      FieldsProducer ret = new BlockTermsReader(indexReader,\n                                                state.dir,\n                                                state.fieldInfos,\n                                                state.segmentInfo.name,\n                                                postingsReader,\n                                                state.context,\n                                                termsCacheSize,\n                                                state.codecId);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postingsReader.close();\n        } finally {\n          indexReader.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.codecId, SEED_EXT);\n    final IndexInput in = state.dir.openInput(seedFileName);\n    final long seed = in.readLong();\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: reading from seg=\" + state.segmentInfo.name + \" seed=\" + seed);\n    }\n    in.close();\n\n    final Random random = new Random(seed);\n    \n    int readBufferSize = _TestUtil.nextInt(random, 1, 4096);\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: readBufferSize=\" + readBufferSize);\n    }\n\n    PostingsReaderBase postingsReader;\n\n    if (random.nextBoolean()) {\n      postingsReader = new SepPostingsReaderImpl(state.dir, state.segmentInfo,\n                                                 readBufferSize, new MockIntStreamFactory(random), state.codecId);\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Standard postings\");\n      }\n      postingsReader = new StandardPostingsReader(state.dir, state.segmentInfo, readBufferSize, state.codecId);\n    }\n\n    if (random.nextBoolean()) {\n      final int totTFCutoff = _TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading pulsing postings with totTFCutoff=\" + totTFCutoff);\n      }\n      postingsReader = new PulsingPostingsReaderImpl(postingsReader);\n    }\n\n    final TermsIndexReaderBase indexReader;\n    boolean success = false;\n\n    try {\n      if (random.nextBoolean()) {\n        // if termsIndexDivisor is set to -1, we should not touch it. It means a\n        // test explicitly instructed not to load the terms index.\n        if (state.termsIndexDivisor != -1) {\n          state.termsIndexDivisor = _TestUtil.nextInt(random, 1, 10);\n        }\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"MockRandomCodec: fixed-gap terms index (divisor=\" + state.termsIndexDivisor + \")\");\n        }\n        indexReader = new FixedGapTermsIndexReader(state.dir,\n                                                   state.fieldInfos,\n                                                   state.segmentInfo.name,\n                                                   state.termsIndexDivisor,\n                                                   BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                   state.codecId);\n      } else {\n        final int n2 = random.nextInt(3);\n        if (n2 == 1) {\n          random.nextInt();\n        } else if (n2 == 2) {\n          random.nextLong();\n        }\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"MockRandomCodec: variable-gap terms index (divisor=\" + state.termsIndexDivisor + \")\");\n        }\n        if (state.termsIndexDivisor != -1) {\n          state.termsIndexDivisor = _TestUtil.nextInt(random, 1, 10);\n        }\n        indexReader = new VariableGapTermsIndexReader(state.dir,\n                                                      state.fieldInfos,\n                                                      state.segmentInfo.name,\n                                                      state.termsIndexDivisor,\n                                                      state.codecId);\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        postingsReader.close();\n      }\n    }\n\n    final int termsCacheSize = _TestUtil.nextInt(random, 1, 1024);\n\n    success = false;\n    try {\n      FieldsProducer ret = new BlockTermsReader(indexReader,\n                                                state.dir,\n                                                state.fieldInfos,\n                                                state.segmentInfo.name,\n                                                postingsReader,\n                                                readBufferSize,\n                                                termsCacheSize,\n                                                state.codecId);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postingsReader.close();\n        } finally {\n          indexReader.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ddc4c914be86e34b54f70023f45a60fa7f04e929","date":1310115160,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/index/codecs/mockrandom/MockRandomCodec#fieldsProducer(SegmentReadState).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/index/codecs/mockrandom/MockRandomCodec#fieldsProducer(SegmentReadState).mjava","sourceNew":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.codecId, SEED_EXT);\n    final IndexInput in = state.dir.openInput(seedFileName, state.context);\n    final long seed = in.readLong();\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: reading from seg=\" + state.segmentInfo.name + \" seed=\" + seed);\n    }\n    in.close();\n\n    final Random random = new Random(seed);\n    \n    int readBufferSize = _TestUtil.nextInt(random, 1, 4096);\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: readBufferSize=\" + readBufferSize);\n    }\n\n    PostingsReaderBase postingsReader;\n\n    if (random.nextBoolean()) {\n      postingsReader = new SepPostingsReaderImpl(state.dir, state.segmentInfo,\n                                                 state.context, new MockIntStreamFactory(random), state.codecId);\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Standard postings\");\n      }\n      postingsReader = new StandardPostingsReader(state.dir, state.segmentInfo, state.context, state.codecId);\n    }\n\n    if (random.nextBoolean()) {\n      final int totTFCutoff = _TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading pulsing postings with totTFCutoff=\" + totTFCutoff);\n      }\n      postingsReader = new PulsingPostingsReaderImpl(postingsReader);\n    }\n\n    final TermsIndexReaderBase indexReader;\n    boolean success = false;\n\n    try {\n      if (random.nextBoolean()) {\n        // if termsIndexDivisor is set to -1, we should not touch it. It means a\n        // test explicitly instructed not to load the terms index.\n        if (state.termsIndexDivisor != -1) {\n          state.termsIndexDivisor = _TestUtil.nextInt(random, 1, 10);\n        }\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"MockRandomCodec: fixed-gap terms index (divisor=\" + state.termsIndexDivisor + \")\");\n        }\n        indexReader = new FixedGapTermsIndexReader(state.dir,\n                                                   state.fieldInfos,\n                                                   state.segmentInfo.name,\n                                                   state.termsIndexDivisor,\n                                                   BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                   state.codecId, state.context);\n      } else {\n        final int n2 = random.nextInt(3);\n        if (n2 == 1) {\n          random.nextInt();\n        } else if (n2 == 2) {\n          random.nextLong();\n        }\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"MockRandomCodec: variable-gap terms index (divisor=\" + state.termsIndexDivisor + \")\");\n        }\n        if (state.termsIndexDivisor != -1) {\n          state.termsIndexDivisor = _TestUtil.nextInt(random, 1, 10);\n        }\n        indexReader = new VariableGapTermsIndexReader(state.dir,\n                                                      state.fieldInfos,\n                                                      state.segmentInfo.name,\n                                                      state.termsIndexDivisor,\n                                                      state.codecId, state.context);\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        postingsReader.close();\n      }\n    }\n\n    final int termsCacheSize = _TestUtil.nextInt(random, 1, 1024);\n\n    success = false;\n    try {\n      FieldsProducer ret = new BlockTermsReader(indexReader,\n                                                state.dir,\n                                                state.fieldInfos,\n                                                state.segmentInfo.name,\n                                                postingsReader,\n                                                state.context,\n                                                termsCacheSize,\n                                                state.codecId);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postingsReader.close();\n        } finally {\n          indexReader.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.codecId, SEED_EXT);\n    final IndexInput in = state.dir.openInput(seedFileName);\n    final long seed = in.readLong();\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: reading from seg=\" + state.segmentInfo.name + \" seed=\" + seed);\n    }\n    in.close();\n\n    final Random random = new Random(seed);\n    \n    int readBufferSize = _TestUtil.nextInt(random, 1, 4096);\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: readBufferSize=\" + readBufferSize);\n    }\n\n    PostingsReaderBase postingsReader;\n\n    if (random.nextBoolean()) {\n      postingsReader = new SepPostingsReaderImpl(state.dir, state.segmentInfo,\n                                                 readBufferSize, new MockIntStreamFactory(random), state.codecId);\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Standard postings\");\n      }\n      postingsReader = new StandardPostingsReader(state.dir, state.segmentInfo, readBufferSize, state.codecId);\n    }\n\n    if (random.nextBoolean()) {\n      final int totTFCutoff = _TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading pulsing postings with totTFCutoff=\" + totTFCutoff);\n      }\n      postingsReader = new PulsingPostingsReaderImpl(postingsReader);\n    }\n\n    final TermsIndexReaderBase indexReader;\n    boolean success = false;\n\n    try {\n      if (random.nextBoolean()) {\n        // if termsIndexDivisor is set to -1, we should not touch it. It means a\n        // test explicitly instructed not to load the terms index.\n        if (state.termsIndexDivisor != -1) {\n          state.termsIndexDivisor = _TestUtil.nextInt(random, 1, 10);\n        }\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"MockRandomCodec: fixed-gap terms index (divisor=\" + state.termsIndexDivisor + \")\");\n        }\n        indexReader = new FixedGapTermsIndexReader(state.dir,\n                                                   state.fieldInfos,\n                                                   state.segmentInfo.name,\n                                                   state.termsIndexDivisor,\n                                                   BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                   state.codecId);\n      } else {\n        final int n2 = random.nextInt(3);\n        if (n2 == 1) {\n          random.nextInt();\n        } else if (n2 == 2) {\n          random.nextLong();\n        }\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"MockRandomCodec: variable-gap terms index (divisor=\" + state.termsIndexDivisor + \")\");\n        }\n        if (state.termsIndexDivisor != -1) {\n          state.termsIndexDivisor = _TestUtil.nextInt(random, 1, 10);\n        }\n        indexReader = new VariableGapTermsIndexReader(state.dir,\n                                                      state.fieldInfos,\n                                                      state.segmentInfo.name,\n                                                      state.termsIndexDivisor,\n                                                      state.codecId);\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        postingsReader.close();\n      }\n    }\n\n    final int termsCacheSize = _TestUtil.nextInt(random, 1, 1024);\n\n    success = false;\n    try {\n      FieldsProducer ret = new BlockTermsReader(indexReader,\n                                                state.dir,\n                                                state.fieldInfos,\n                                                state.segmentInfo.name,\n                                                postingsReader,\n                                                readBufferSize,\n                                                termsCacheSize,\n                                                state.codecId);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postingsReader.close();\n        } finally {\n          indexReader.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5d004d0e0b3f65bb40da76d476d659d7888270e8","date":1310158940,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/index/codecs/mockrandom/MockRandomCodec#fieldsProducer(SegmentReadState).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/index/codecs/mockrandom/MockRandomCodec#fieldsProducer(SegmentReadState).mjava","sourceNew":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.codecId, SEED_EXT);\n    final IndexInput in = state.dir.openInput(seedFileName, state.context);\n    final long seed = in.readLong();\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: reading from seg=\" + state.segmentInfo.name + \" seed=\" + seed);\n    }\n    in.close();\n\n    final Random random = new Random(seed);\n    \n    int readBufferSize = _TestUtil.nextInt(random, 1, 4096);\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: readBufferSize=\" + readBufferSize);\n    }\n\n    PostingsReaderBase postingsReader;\n\n    if (random.nextBoolean()) {\n      postingsReader = new SepPostingsReaderImpl(state.dir, state.segmentInfo,\n                                                 state.context, new MockIntStreamFactory(random), state.codecId);\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Standard postings\");\n      }\n      postingsReader = new StandardPostingsReader(state.dir, state.segmentInfo, state.context, state.codecId);\n    }\n\n    if (random.nextBoolean()) {\n      final int totTFCutoff = _TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading pulsing postings with totTFCutoff=\" + totTFCutoff);\n      }\n      postingsReader = new PulsingPostingsReaderImpl(postingsReader);\n    }\n\n    final TermsIndexReaderBase indexReader;\n    boolean success = false;\n\n    try {\n      if (random.nextBoolean()) {\n        // if termsIndexDivisor is set to -1, we should not touch it. It means a\n        // test explicitly instructed not to load the terms index.\n        if (state.termsIndexDivisor != -1) {\n          state.termsIndexDivisor = _TestUtil.nextInt(random, 1, 10);\n        }\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"MockRandomCodec: fixed-gap terms index (divisor=\" + state.termsIndexDivisor + \")\");\n        }\n        indexReader = new FixedGapTermsIndexReader(state.dir,\n                                                   state.fieldInfos,\n                                                   state.segmentInfo.name,\n                                                   state.termsIndexDivisor,\n                                                   BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                   state.codecId, state.context);\n      } else {\n        final int n2 = random.nextInt(3);\n        if (n2 == 1) {\n          random.nextInt();\n        } else if (n2 == 2) {\n          random.nextLong();\n        }\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"MockRandomCodec: variable-gap terms index (divisor=\" + state.termsIndexDivisor + \")\");\n        }\n        if (state.termsIndexDivisor != -1) {\n          state.termsIndexDivisor = _TestUtil.nextInt(random, 1, 10);\n        }\n        indexReader = new VariableGapTermsIndexReader(state.dir,\n                                                      state.fieldInfos,\n                                                      state.segmentInfo.name,\n                                                      state.termsIndexDivisor,\n                                                      state.codecId, state.context);\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        postingsReader.close();\n      }\n    }\n\n    final int termsCacheSize = _TestUtil.nextInt(random, 1, 1024);\n\n    success = false;\n    try {\n      FieldsProducer ret = new BlockTermsReader(indexReader,\n                                                state.dir,\n                                                state.fieldInfos,\n                                                state.segmentInfo.name,\n                                                postingsReader,\n                                                state.context,\n                                                termsCacheSize,\n                                                state.codecId);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postingsReader.close();\n        } finally {\n          indexReader.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.codecId, SEED_EXT);\n    final IndexInput in = state.dir.openInput(seedFileName);\n    final long seed = in.readLong();\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: reading from seg=\" + state.segmentInfo.name + \" seed=\" + seed);\n    }\n    in.close();\n\n    final Random random = new Random(seed);\n    \n    int readBufferSize = _TestUtil.nextInt(random, 1, 4096);\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: readBufferSize=\" + readBufferSize);\n    }\n\n    PostingsReaderBase postingsReader;\n\n    if (random.nextBoolean()) {\n      postingsReader = new SepPostingsReaderImpl(state.dir, state.segmentInfo,\n                                                 readBufferSize, new MockIntStreamFactory(random), state.codecId);\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Standard postings\");\n      }\n      postingsReader = new StandardPostingsReader(state.dir, state.segmentInfo, readBufferSize, state.codecId);\n    }\n\n    if (random.nextBoolean()) {\n      final int totTFCutoff = _TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading pulsing postings with totTFCutoff=\" + totTFCutoff);\n      }\n      postingsReader = new PulsingPostingsReaderImpl(postingsReader);\n    }\n\n    final TermsIndexReaderBase indexReader;\n    boolean success = false;\n\n    try {\n      if (random.nextBoolean()) {\n        // if termsIndexDivisor is set to -1, we should not touch it. It means a\n        // test explicitly instructed not to load the terms index.\n        if (state.termsIndexDivisor != -1) {\n          state.termsIndexDivisor = _TestUtil.nextInt(random, 1, 10);\n        }\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"MockRandomCodec: fixed-gap terms index (divisor=\" + state.termsIndexDivisor + \")\");\n        }\n        indexReader = new FixedGapTermsIndexReader(state.dir,\n                                                   state.fieldInfos,\n                                                   state.segmentInfo.name,\n                                                   state.termsIndexDivisor,\n                                                   BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                   state.codecId);\n      } else {\n        final int n2 = random.nextInt(3);\n        if (n2 == 1) {\n          random.nextInt();\n        } else if (n2 == 2) {\n          random.nextLong();\n        }\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"MockRandomCodec: variable-gap terms index (divisor=\" + state.termsIndexDivisor + \")\");\n        }\n        if (state.termsIndexDivisor != -1) {\n          state.termsIndexDivisor = _TestUtil.nextInt(random, 1, 10);\n        }\n        indexReader = new VariableGapTermsIndexReader(state.dir,\n                                                      state.fieldInfos,\n                                                      state.segmentInfo.name,\n                                                      state.termsIndexDivisor,\n                                                      state.codecId);\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        postingsReader.close();\n      }\n    }\n\n    final int termsCacheSize = _TestUtil.nextInt(random, 1, 1024);\n\n    success = false;\n    try {\n      FieldsProducer ret = new BlockTermsReader(indexReader,\n                                                state.dir,\n                                                state.fieldInfos,\n                                                state.segmentInfo.name,\n                                                postingsReader,\n                                                readBufferSize,\n                                                termsCacheSize,\n                                                state.codecId);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postingsReader.close();\n        } finally {\n          indexReader.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"60ba444201d2570214b6fcf1d15600dc1a01f548","date":1313868045,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/index/codecs/mockrandom/MockRandomCodec#fieldsProducer(SegmentReadState).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/index/codecs/mockrandom/MockRandomCodec#fieldsProducer(SegmentReadState).mjava","sourceNew":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.codecId, SEED_EXT);\n    final IndexInput in = state.dir.openInput(seedFileName, state.context);\n    final long seed = in.readLong();\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: reading from seg=\" + state.segmentInfo.name + \" codecID=\" + state.codecId + \" seed=\" + seed);\n    }\n    in.close();\n\n    final Random random = new Random(seed);\n    \n    int readBufferSize = _TestUtil.nextInt(random, 1, 4096);\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: readBufferSize=\" + readBufferSize);\n    }\n\n    PostingsReaderBase postingsReader;\n\n    if (random.nextBoolean()) {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Sep postings\");\n      }\n      postingsReader = new SepPostingsReader(state.dir, state.segmentInfo,\n                                             state.context, new MockIntStreamFactory(random), state.codecId);\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Standard postings\");\n      }\n      postingsReader = new StandardPostingsReader(state.dir, state.segmentInfo, state.context, state.codecId);\n    }\n\n    if (random.nextBoolean()) {\n      final int totTFCutoff = _TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading pulsing postings with totTFCutoff=\" + totTFCutoff);\n      }\n      postingsReader = new PulsingPostingsReader(postingsReader);\n    }\n\n    final FieldsProducer fields;\n\n    if (random.nextBoolean()) {\n      // Use BlockTree terms dict\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading BlockTree terms dict\");\n      }\n\n      boolean success = false;\n      try {\n        fields = new BlockTreeTermsReader(state.dir,\n                                          state.fieldInfos,\n                                          state.segmentInfo.name,\n                                          postingsReader,\n                                          state.context,\n                                          state.codecId,\n                                          state.termsIndexDivisor);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n    } else {\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Block terms dict\");\n      }\n      final TermsIndexReaderBase indexReader;\n      boolean success = false;\n      try {\n        final boolean doFixedGap = random.nextBoolean();\n\n        // randomness diverges from writer, here:\n        if (state.termsIndexDivisor != -1) {\n          state.termsIndexDivisor = _TestUtil.nextInt(random, 1, 10);\n        }\n\n        if (doFixedGap) {\n          // if termsIndexDivisor is set to -1, we should not touch it. It means a\n          // test explicitly instructed not to load the terms index.\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: fixed-gap terms index (divisor=\" + state.termsIndexDivisor + \")\");\n          }\n          indexReader = new FixedGapTermsIndexReader(state.dir,\n                                                     state.fieldInfos,\n                                                     state.segmentInfo.name,\n                                                     state.termsIndexDivisor,\n                                                     BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                     state.codecId, state.context);\n        } else {\n          final int n2 = random.nextInt(3);\n          if (n2 == 1) {\n            random.nextInt();\n          } else if (n2 == 2) {\n            random.nextLong();\n          }\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: variable-gap terms index (divisor=\" + state.termsIndexDivisor + \")\");\n          }\n          indexReader = new VariableGapTermsIndexReader(state.dir,\n                                                        state.fieldInfos,\n                                                        state.segmentInfo.name,\n                                                        state.termsIndexDivisor,\n                                                        state.codecId, state.context);\n\n        }\n\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n\n      final int termsCacheSize = _TestUtil.nextInt(random, 1, 1024);\n\n      success = false;\n      try {\n        fields = new BlockTermsReader(indexReader,\n                                      state.dir,\n                                      state.fieldInfos,\n                                      state.segmentInfo.name,\n                                      postingsReader,\n                                      state.context,\n                                      termsCacheSize,\n                                      state.codecId);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            postingsReader.close();\n          } finally {\n            indexReader.close();\n          }\n        }\n      }\n    }\n\n    return fields;\n  }\n\n","sourceOld":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.codecId, SEED_EXT);\n    final IndexInput in = state.dir.openInput(seedFileName, state.context);\n    final long seed = in.readLong();\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: reading from seg=\" + state.segmentInfo.name + \" seed=\" + seed);\n    }\n    in.close();\n\n    final Random random = new Random(seed);\n    \n    int readBufferSize = _TestUtil.nextInt(random, 1, 4096);\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: readBufferSize=\" + readBufferSize);\n    }\n\n    PostingsReaderBase postingsReader;\n\n    if (random.nextBoolean()) {\n      postingsReader = new SepPostingsReaderImpl(state.dir, state.segmentInfo,\n                                                 state.context, new MockIntStreamFactory(random), state.codecId);\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Standard postings\");\n      }\n      postingsReader = new StandardPostingsReader(state.dir, state.segmentInfo, state.context, state.codecId);\n    }\n\n    if (random.nextBoolean()) {\n      final int totTFCutoff = _TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading pulsing postings with totTFCutoff=\" + totTFCutoff);\n      }\n      postingsReader = new PulsingPostingsReaderImpl(postingsReader);\n    }\n\n    final TermsIndexReaderBase indexReader;\n    boolean success = false;\n\n    try {\n      if (random.nextBoolean()) {\n        // if termsIndexDivisor is set to -1, we should not touch it. It means a\n        // test explicitly instructed not to load the terms index.\n        if (state.termsIndexDivisor != -1) {\n          state.termsIndexDivisor = _TestUtil.nextInt(random, 1, 10);\n        }\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"MockRandomCodec: fixed-gap terms index (divisor=\" + state.termsIndexDivisor + \")\");\n        }\n        indexReader = new FixedGapTermsIndexReader(state.dir,\n                                                   state.fieldInfos,\n                                                   state.segmentInfo.name,\n                                                   state.termsIndexDivisor,\n                                                   BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                   state.codecId, state.context);\n      } else {\n        final int n2 = random.nextInt(3);\n        if (n2 == 1) {\n          random.nextInt();\n        } else if (n2 == 2) {\n          random.nextLong();\n        }\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"MockRandomCodec: variable-gap terms index (divisor=\" + state.termsIndexDivisor + \")\");\n        }\n        if (state.termsIndexDivisor != -1) {\n          state.termsIndexDivisor = _TestUtil.nextInt(random, 1, 10);\n        }\n        indexReader = new VariableGapTermsIndexReader(state.dir,\n                                                      state.fieldInfos,\n                                                      state.segmentInfo.name,\n                                                      state.termsIndexDivisor,\n                                                      state.codecId, state.context);\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        postingsReader.close();\n      }\n    }\n\n    final int termsCacheSize = _TestUtil.nextInt(random, 1, 1024);\n\n    success = false;\n    try {\n      FieldsProducer ret = new BlockTermsReader(indexReader,\n                                                state.dir,\n                                                state.fieldInfos,\n                                                state.segmentInfo.name,\n                                                postingsReader,\n                                                state.context,\n                                                termsCacheSize,\n                                                state.codecId);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postingsReader.close();\n        } finally {\n          indexReader.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/index/codecs/mockrandom/MockRandomPostingsFormat#fieldsProducer(SegmentReadState).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/index/codecs/mockrandom/MockRandomCodec#fieldsProducer(SegmentReadState).mjava","sourceNew":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, SEED_EXT);\n    final IndexInput in = state.dir.openInput(seedFileName, state.context);\n    final long seed = in.readLong();\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: reading from seg=\" + state.segmentInfo.name + \" formatID=\" + state.segmentSuffix + \" seed=\" + seed);\n    }\n    in.close();\n\n    final Random random = new Random(seed);\n    \n    int readBufferSize = _TestUtil.nextInt(random, 1, 4096);\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: readBufferSize=\" + readBufferSize);\n    }\n\n    PostingsReaderBase postingsReader;\n\n    if (random.nextBoolean()) {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Sep postings\");\n      }\n      postingsReader = new SepPostingsReader(state.dir, state.segmentInfo,\n                                             state.context, new MockIntStreamFactory(random), state.segmentSuffix);\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Standard postings\");\n      }\n      postingsReader = new Lucene40PostingsReader(state.dir, state.segmentInfo, state.context, state.segmentSuffix);\n    }\n\n    if (random.nextBoolean()) {\n      final int totTFCutoff = _TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading pulsing postings with totTFCutoff=\" + totTFCutoff);\n      }\n      postingsReader = new PulsingPostingsReader(postingsReader);\n    }\n\n    final FieldsProducer fields;\n\n    if (random.nextBoolean()) {\n      // Use BlockTree terms dict\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading BlockTree terms dict\");\n      }\n\n      boolean success = false;\n      try {\n        fields = new BlockTreeTermsReader(state.dir,\n                                          state.fieldInfos,\n                                          state.segmentInfo.name,\n                                          postingsReader,\n                                          state.context,\n                                          state.segmentSuffix,\n                                          state.termsIndexDivisor);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n    } else {\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Block terms dict\");\n      }\n      final TermsIndexReaderBase indexReader;\n      boolean success = false;\n      try {\n        final boolean doFixedGap = random.nextBoolean();\n\n        // randomness diverges from writer, here:\n        if (state.termsIndexDivisor != -1) {\n          state.termsIndexDivisor = _TestUtil.nextInt(random, 1, 10);\n        }\n\n        if (doFixedGap) {\n          // if termsIndexDivisor is set to -1, we should not touch it. It means a\n          // test explicitly instructed not to load the terms index.\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: fixed-gap terms index (divisor=\" + state.termsIndexDivisor + \")\");\n          }\n          indexReader = new FixedGapTermsIndexReader(state.dir,\n                                                     state.fieldInfos,\n                                                     state.segmentInfo.name,\n                                                     state.termsIndexDivisor,\n                                                     BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                     state.segmentSuffix, state.context);\n        } else {\n          final int n2 = random.nextInt(3);\n          if (n2 == 1) {\n            random.nextInt();\n          } else if (n2 == 2) {\n            random.nextLong();\n          }\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: variable-gap terms index (divisor=\" + state.termsIndexDivisor + \")\");\n          }\n          indexReader = new VariableGapTermsIndexReader(state.dir,\n                                                        state.fieldInfos,\n                                                        state.segmentInfo.name,\n                                                        state.termsIndexDivisor,\n                                                        state.segmentSuffix, state.context);\n\n        }\n\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n\n      final int termsCacheSize = _TestUtil.nextInt(random, 1, 1024);\n\n      success = false;\n      try {\n        fields = new BlockTermsReader(indexReader,\n                                      state.dir,\n                                      state.fieldInfos,\n                                      state.segmentInfo.name,\n                                      postingsReader,\n                                      state.context,\n                                      termsCacheSize,\n                                      state.segmentSuffix);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            postingsReader.close();\n          } finally {\n            indexReader.close();\n          }\n        }\n      }\n    }\n\n    return fields;\n  }\n\n","sourceOld":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.codecId, SEED_EXT);\n    final IndexInput in = state.dir.openInput(seedFileName, state.context);\n    final long seed = in.readLong();\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: reading from seg=\" + state.segmentInfo.name + \" codecID=\" + state.codecId + \" seed=\" + seed);\n    }\n    in.close();\n\n    final Random random = new Random(seed);\n    \n    int readBufferSize = _TestUtil.nextInt(random, 1, 4096);\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: readBufferSize=\" + readBufferSize);\n    }\n\n    PostingsReaderBase postingsReader;\n\n    if (random.nextBoolean()) {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Sep postings\");\n      }\n      postingsReader = new SepPostingsReader(state.dir, state.segmentInfo,\n                                             state.context, new MockIntStreamFactory(random), state.codecId);\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Standard postings\");\n      }\n      postingsReader = new StandardPostingsReader(state.dir, state.segmentInfo, state.context, state.codecId);\n    }\n\n    if (random.nextBoolean()) {\n      final int totTFCutoff = _TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading pulsing postings with totTFCutoff=\" + totTFCutoff);\n      }\n      postingsReader = new PulsingPostingsReader(postingsReader);\n    }\n\n    final FieldsProducer fields;\n\n    if (random.nextBoolean()) {\n      // Use BlockTree terms dict\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading BlockTree terms dict\");\n      }\n\n      boolean success = false;\n      try {\n        fields = new BlockTreeTermsReader(state.dir,\n                                          state.fieldInfos,\n                                          state.segmentInfo.name,\n                                          postingsReader,\n                                          state.context,\n                                          state.codecId,\n                                          state.termsIndexDivisor);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n    } else {\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Block terms dict\");\n      }\n      final TermsIndexReaderBase indexReader;\n      boolean success = false;\n      try {\n        final boolean doFixedGap = random.nextBoolean();\n\n        // randomness diverges from writer, here:\n        if (state.termsIndexDivisor != -1) {\n          state.termsIndexDivisor = _TestUtil.nextInt(random, 1, 10);\n        }\n\n        if (doFixedGap) {\n          // if termsIndexDivisor is set to -1, we should not touch it. It means a\n          // test explicitly instructed not to load the terms index.\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: fixed-gap terms index (divisor=\" + state.termsIndexDivisor + \")\");\n          }\n          indexReader = new FixedGapTermsIndexReader(state.dir,\n                                                     state.fieldInfos,\n                                                     state.segmentInfo.name,\n                                                     state.termsIndexDivisor,\n                                                     BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                     state.codecId, state.context);\n        } else {\n          final int n2 = random.nextInt(3);\n          if (n2 == 1) {\n            random.nextInt();\n          } else if (n2 == 2) {\n            random.nextLong();\n          }\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: variable-gap terms index (divisor=\" + state.termsIndexDivisor + \")\");\n          }\n          indexReader = new VariableGapTermsIndexReader(state.dir,\n                                                        state.fieldInfos,\n                                                        state.segmentInfo.name,\n                                                        state.termsIndexDivisor,\n                                                        state.codecId, state.context);\n\n        }\n\n        success = true;\n      } finally {\n        if (!success) {\n          postingsReader.close();\n        }\n      }\n\n      final int termsCacheSize = _TestUtil.nextInt(random, 1, 1024);\n\n      success = false;\n      try {\n        fields = new BlockTermsReader(indexReader,\n                                      state.dir,\n                                      state.fieldInfos,\n                                      state.segmentInfo.name,\n                                      postingsReader,\n                                      state.context,\n                                      termsCacheSize,\n                                      state.codecId);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            postingsReader.close();\n          } finally {\n            indexReader.close();\n          }\n        }\n      }\n    }\n\n    return fields;\n  }\n\n","bugFix":null,"bugIntro":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"f1bdbf92da222965b46c0a942c3857ba56e5c638":["29ef99d61cda9641b6250bf9567329a6e65f901d","4fd64b6aa64934b0e35d9ec3e6c5a5c60ffc1762"],"4fd64b6aa64934b0e35d9ec3e6c5a5c60ffc1762":["08bd82f9f7ac6b7ae532616311b08252338e335d"],"0150c6e116b24d66f02d63fcb0758f336e8791e2":["c700f8d0842d3e52bb2bdfbfdc046a137e836edb"],"639c36565ce03aed5b0fce7c9e4448e53a1f7efd":["8c5a871c0a23009308ca3ffa6b14f04457e271ff"],"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"60ba444201d2570214b6fcf1d15600dc1a01f548":["ddc4c914be86e34b54f70023f45a60fa7f04e929"],"7b91922b55d15444d554721b352861d028eb8278":["60ba444201d2570214b6fcf1d15600dc1a01f548"],"08bd82f9f7ac6b7ae532616311b08252338e335d":["f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["f1bdbf92da222965b46c0a942c3857ba56e5c638","4fd64b6aa64934b0e35d9ec3e6c5a5c60ffc1762"],"a3776dccca01c11e7046323cfad46a3b4a471233":["4fd64b6aa64934b0e35d9ec3e6c5a5c60ffc1762","8c5a871c0a23009308ca3ffa6b14f04457e271ff"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5d004d0e0b3f65bb40da76d476d659d7888270e8":["a3776dccca01c11e7046323cfad46a3b4a471233","ddc4c914be86e34b54f70023f45a60fa7f04e929"],"c700f8d0842d3e52bb2bdfbfdc046a137e836edb":["d619839baa8ce5503e496b94a9e42ad6f079293f","8c5a871c0a23009308ca3ffa6b14f04457e271ff"],"ddc4c914be86e34b54f70023f45a60fa7f04e929":["8c5a871c0a23009308ca3ffa6b14f04457e271ff","639c36565ce03aed5b0fce7c9e4448e53a1f7efd"],"8c5a871c0a23009308ca3ffa6b14f04457e271ff":["4fd64b6aa64934b0e35d9ec3e6c5a5c60ffc1762"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4fd64b6aa64934b0e35d9ec3e6c5a5c60ffc1762"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7b91922b55d15444d554721b352861d028eb8278"]},"commit2Childs":{"f1bdbf92da222965b46c0a942c3857ba56e5c638":["d619839baa8ce5503e496b94a9e42ad6f079293f"],"4fd64b6aa64934b0e35d9ec3e6c5a5c60ffc1762":["f1bdbf92da222965b46c0a942c3857ba56e5c638","d619839baa8ce5503e496b94a9e42ad6f079293f","a3776dccca01c11e7046323cfad46a3b4a471233","8c5a871c0a23009308ca3ffa6b14f04457e271ff","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"0150c6e116b24d66f02d63fcb0758f336e8791e2":[],"639c36565ce03aed5b0fce7c9e4448e53a1f7efd":["ddc4c914be86e34b54f70023f45a60fa7f04e929"],"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce":["08bd82f9f7ac6b7ae532616311b08252338e335d","29ef99d61cda9641b6250bf9567329a6e65f901d"],"60ba444201d2570214b6fcf1d15600dc1a01f548":["7b91922b55d15444d554721b352861d028eb8278"],"08bd82f9f7ac6b7ae532616311b08252338e335d":["4fd64b6aa64934b0e35d9ec3e6c5a5c60ffc1762"],"7b91922b55d15444d554721b352861d028eb8278":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["c700f8d0842d3e52bb2bdfbfdc046a137e836edb"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["f1bdbf92da222965b46c0a942c3857ba56e5c638"],"a3776dccca01c11e7046323cfad46a3b4a471233":["5d004d0e0b3f65bb40da76d476d659d7888270e8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"c700f8d0842d3e52bb2bdfbfdc046a137e836edb":["0150c6e116b24d66f02d63fcb0758f336e8791e2"],"5d004d0e0b3f65bb40da76d476d659d7888270e8":[],"ddc4c914be86e34b54f70023f45a60fa7f04e929":["60ba444201d2570214b6fcf1d15600dc1a01f548","5d004d0e0b3f65bb40da76d476d659d7888270e8"],"8c5a871c0a23009308ca3ffa6b14f04457e271ff":["639c36565ce03aed5b0fce7c9e4448e53a1f7efd","a3776dccca01c11e7046323cfad46a3b4a471233","c700f8d0842d3e52bb2bdfbfdc046a137e836edb","ddc4c914be86e34b54f70023f45a60fa7f04e929"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0150c6e116b24d66f02d63fcb0758f336e8791e2","5d004d0e0b3f65bb40da76d476d659d7888270e8","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}