{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/request/TestCoreAdmin#testCoreSwap().mjava","commits":[{"id":"a30bfa174128ad6cb3bcf568080886729e347fe9","date":1485967817,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/request/TestCoreAdmin#testCoreSwap().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testCoreSwap() throws Exception {\n    // index marker docs to core0\n    SolrClient cli0 = getSolrCore0();\n    SolrInputDocument d = new SolrInputDocument(\"id\", \"core0-0\");\n    cli0.add(d);\n    d = new SolrInputDocument(\"id\", \"core0-1\");\n    cli0.add(d);\n    cli0.commit();\n    // index a marker doc to core1\n    SolrClient cli1 = getSolrCore1();\n    d = new SolrInputDocument(\"id\", \"core1-0\");\n    cli1.add(d);\n    cli1.commit();\n\n    // initial state assertions\n    SolrQuery q = new SolrQuery(\"*:*\");\n    QueryResponse rsp = cli0.query(q);\n    SolrDocumentList docs = rsp.getResults();\n    assertEquals(2, docs.size());\n    docs.forEach(doc -> {\n      assertTrue(doc.toString(), doc.getFieldValue(\"id\").toString().startsWith(\"core0-\"));\n    });\n\n    rsp = cli1.query(q);\n    docs = rsp.getResults();\n    assertEquals(1, docs.size());\n    docs.forEach(doc -> {\n      assertTrue(doc.toString(), doc.getFieldValue(\"id\").toString().startsWith(\"core1-\"));\n    });\n\n    // assert initial metrics\n    SolrMetricManager metricManager = cores.getMetricManager();\n    String core0RegistryName = SolrCoreMetricManager.createRegistryName(null, \"core0\");\n    String core1RegistryName = SolrCoreMetricManager.createRegistryName(null, \"core1\");\n    MetricRegistry core0Registry = metricManager.registry(core0RegistryName);\n    MetricRegistry core1Registry = metricManager.registry(core1RegistryName);\n\n    // 2 docs + 1 commit\n    assertEquals(3, core0Registry.counter(\"UPDATE./update.requests\").getCount());\n    // 1 doc + 1 commit\n    assertEquals(2, core1Registry.counter(\"UPDATE./update.requests\").getCount());\n\n    // swap\n    CoreAdminRequest.swapCore(\"core0\", \"core1\", getSolrAdmin());\n\n    // assert state after swap\n    cli0 = getSolrCore0();\n    cli1 = getSolrCore1();\n\n    rsp = cli0.query(q);\n    docs = rsp.getResults();\n    assertEquals(1, docs.size());\n    docs.forEach(doc -> {\n      assertTrue(doc.toString(), doc.getFieldValue(\"id\").toString().startsWith(\"core1-\"));\n    });\n\n    rsp = cli1.query(q);\n    docs = rsp.getResults();\n    assertEquals(2, docs.size());\n    docs.forEach(doc -> {\n      assertTrue(doc.toString(), doc.getFieldValue(\"id\").toString().startsWith(\"core0-\"));\n    });\n\n    core0Registry = metricManager.registry(core0RegistryName);\n    core1Registry = metricManager.registry(core1RegistryName);\n\n    assertEquals(2, core0Registry.counter(\"UPDATE./update.requests\").getCount());\n    assertEquals(3, core1Registry.counter(\"UPDATE./update.requests\").getCount());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c3523a0ab04c3002eee3896c75ea5f10f388bcc","date":1485968422,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/request/TestCoreAdmin#testCoreSwap().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testCoreSwap() throws Exception {\n    // index marker docs to core0\n    SolrClient cli0 = getSolrCore0();\n    SolrInputDocument d = new SolrInputDocument(\"id\", \"core0-0\");\n    cli0.add(d);\n    d = new SolrInputDocument(\"id\", \"core0-1\");\n    cli0.add(d);\n    cli0.commit();\n    // index a marker doc to core1\n    SolrClient cli1 = getSolrCore1();\n    d = new SolrInputDocument(\"id\", \"core1-0\");\n    cli1.add(d);\n    cli1.commit();\n\n    // initial state assertions\n    SolrQuery q = new SolrQuery(\"*:*\");\n    QueryResponse rsp = cli0.query(q);\n    SolrDocumentList docs = rsp.getResults();\n    assertEquals(2, docs.size());\n    docs.forEach(doc -> {\n      assertTrue(doc.toString(), doc.getFieldValue(\"id\").toString().startsWith(\"core0-\"));\n    });\n\n    rsp = cli1.query(q);\n    docs = rsp.getResults();\n    assertEquals(1, docs.size());\n    docs.forEach(doc -> {\n      assertTrue(doc.toString(), doc.getFieldValue(\"id\").toString().startsWith(\"core1-\"));\n    });\n\n    // assert initial metrics\n    SolrMetricManager metricManager = cores.getMetricManager();\n    String core0RegistryName = SolrCoreMetricManager.createRegistryName(null, \"core0\");\n    String core1RegistryName = SolrCoreMetricManager.createRegistryName(null, \"core1\");\n    MetricRegistry core0Registry = metricManager.registry(core0RegistryName);\n    MetricRegistry core1Registry = metricManager.registry(core1RegistryName);\n\n    // 2 docs + 1 commit\n    assertEquals(3, core0Registry.counter(\"UPDATE./update.requests\").getCount());\n    // 1 doc + 1 commit\n    assertEquals(2, core1Registry.counter(\"UPDATE./update.requests\").getCount());\n\n    // swap\n    CoreAdminRequest.swapCore(\"core0\", \"core1\", getSolrAdmin());\n\n    // assert state after swap\n    cli0 = getSolrCore0();\n    cli1 = getSolrCore1();\n\n    rsp = cli0.query(q);\n    docs = rsp.getResults();\n    assertEquals(1, docs.size());\n    docs.forEach(doc -> {\n      assertTrue(doc.toString(), doc.getFieldValue(\"id\").toString().startsWith(\"core1-\"));\n    });\n\n    rsp = cli1.query(q);\n    docs = rsp.getResults();\n    assertEquals(2, docs.size());\n    docs.forEach(doc -> {\n      assertTrue(doc.toString(), doc.getFieldValue(\"id\").toString().startsWith(\"core0-\"));\n    });\n\n    core0Registry = metricManager.registry(core0RegistryName);\n    core1Registry = metricManager.registry(core1RegistryName);\n\n    assertEquals(2, core0Registry.counter(\"UPDATE./update.requests\").getCount());\n    assertEquals(3, core1Registry.counter(\"UPDATE./update.requests\").getCount());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"073f1aa70444ec64f3e216816af2a3b43fa38fe7","date":1488920481,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/request/TestCoreAdmin#testCoreSwap().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/request/TestCoreAdmin#testCoreSwap().mjava","sourceNew":"  @Test\n  public void testCoreSwap() throws Exception {\n    // index marker docs to core0\n    SolrClient cli0 = getSolrCore0();\n    SolrInputDocument d = new SolrInputDocument(\"id\", \"core0-0\");\n    cli0.add(d);\n    d = new SolrInputDocument(\"id\", \"core0-1\");\n    cli0.add(d);\n    cli0.commit();\n    // index a marker doc to core1\n    SolrClient cli1 = getSolrCore1();\n    d = new SolrInputDocument(\"id\", \"core1-0\");\n    cli1.add(d);\n    cli1.commit();\n\n    // initial state assertions\n    SolrQuery q = new SolrQuery(\"*:*\");\n    QueryResponse rsp = cli0.query(q);\n    SolrDocumentList docs = rsp.getResults();\n    assertEquals(2, docs.size());\n    docs.forEach(doc -> {\n      assertTrue(doc.toString(), doc.getFieldValue(\"id\").toString().startsWith(\"core0-\"));\n    });\n\n    rsp = cli1.query(q);\n    docs = rsp.getResults();\n    assertEquals(1, docs.size());\n    docs.forEach(doc -> {\n      assertTrue(doc.toString(), doc.getFieldValue(\"id\").toString().startsWith(\"core1-\"));\n    });\n\n    // assert initial metrics\n    SolrMetricManager metricManager = cores.getMetricManager();\n    String core0RegistryName = SolrCoreMetricManager.createRegistryName(false, null, null, null, \"core0\");\n    String core1RegistryName = SolrCoreMetricManager.createRegistryName(false, null, null,null, \"core1\");\n    MetricRegistry core0Registry = metricManager.registry(core0RegistryName);\n    MetricRegistry core1Registry = metricManager.registry(core1RegistryName);\n\n    // 2 docs + 1 commit\n    assertEquals(3, core0Registry.counter(\"UPDATE./update.requests\").getCount());\n    // 1 doc + 1 commit\n    assertEquals(2, core1Registry.counter(\"UPDATE./update.requests\").getCount());\n\n    // swap\n    CoreAdminRequest.swapCore(\"core0\", \"core1\", getSolrAdmin());\n\n    // assert state after swap\n    cli0 = getSolrCore0();\n    cli1 = getSolrCore1();\n\n    rsp = cli0.query(q);\n    docs = rsp.getResults();\n    assertEquals(1, docs.size());\n    docs.forEach(doc -> {\n      assertTrue(doc.toString(), doc.getFieldValue(\"id\").toString().startsWith(\"core1-\"));\n    });\n\n    rsp = cli1.query(q);\n    docs = rsp.getResults();\n    assertEquals(2, docs.size());\n    docs.forEach(doc -> {\n      assertTrue(doc.toString(), doc.getFieldValue(\"id\").toString().startsWith(\"core0-\"));\n    });\n\n    core0Registry = metricManager.registry(core0RegistryName);\n    core1Registry = metricManager.registry(core1RegistryName);\n\n    assertEquals(2, core0Registry.counter(\"UPDATE./update.requests\").getCount());\n    assertEquals(3, core1Registry.counter(\"UPDATE./update.requests\").getCount());\n  }\n\n","sourceOld":"  @Test\n  public void testCoreSwap() throws Exception {\n    // index marker docs to core0\n    SolrClient cli0 = getSolrCore0();\n    SolrInputDocument d = new SolrInputDocument(\"id\", \"core0-0\");\n    cli0.add(d);\n    d = new SolrInputDocument(\"id\", \"core0-1\");\n    cli0.add(d);\n    cli0.commit();\n    // index a marker doc to core1\n    SolrClient cli1 = getSolrCore1();\n    d = new SolrInputDocument(\"id\", \"core1-0\");\n    cli1.add(d);\n    cli1.commit();\n\n    // initial state assertions\n    SolrQuery q = new SolrQuery(\"*:*\");\n    QueryResponse rsp = cli0.query(q);\n    SolrDocumentList docs = rsp.getResults();\n    assertEquals(2, docs.size());\n    docs.forEach(doc -> {\n      assertTrue(doc.toString(), doc.getFieldValue(\"id\").toString().startsWith(\"core0-\"));\n    });\n\n    rsp = cli1.query(q);\n    docs = rsp.getResults();\n    assertEquals(1, docs.size());\n    docs.forEach(doc -> {\n      assertTrue(doc.toString(), doc.getFieldValue(\"id\").toString().startsWith(\"core1-\"));\n    });\n\n    // assert initial metrics\n    SolrMetricManager metricManager = cores.getMetricManager();\n    String core0RegistryName = SolrCoreMetricManager.createRegistryName(null, \"core0\");\n    String core1RegistryName = SolrCoreMetricManager.createRegistryName(null, \"core1\");\n    MetricRegistry core0Registry = metricManager.registry(core0RegistryName);\n    MetricRegistry core1Registry = metricManager.registry(core1RegistryName);\n\n    // 2 docs + 1 commit\n    assertEquals(3, core0Registry.counter(\"UPDATE./update.requests\").getCount());\n    // 1 doc + 1 commit\n    assertEquals(2, core1Registry.counter(\"UPDATE./update.requests\").getCount());\n\n    // swap\n    CoreAdminRequest.swapCore(\"core0\", \"core1\", getSolrAdmin());\n\n    // assert state after swap\n    cli0 = getSolrCore0();\n    cli1 = getSolrCore1();\n\n    rsp = cli0.query(q);\n    docs = rsp.getResults();\n    assertEquals(1, docs.size());\n    docs.forEach(doc -> {\n      assertTrue(doc.toString(), doc.getFieldValue(\"id\").toString().startsWith(\"core1-\"));\n    });\n\n    rsp = cli1.query(q);\n    docs = rsp.getResults();\n    assertEquals(2, docs.size());\n    docs.forEach(doc -> {\n      assertTrue(doc.toString(), doc.getFieldValue(\"id\").toString().startsWith(\"core0-\"));\n    });\n\n    core0Registry = metricManager.registry(core0RegistryName);\n    core1Registry = metricManager.registry(core1RegistryName);\n\n    assertEquals(2, core0Registry.counter(\"UPDATE./update.requests\").getCount());\n    assertEquals(3, core1Registry.counter(\"UPDATE./update.requests\").getCount());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a30bfa174128ad6cb3bcf568080886729e347fe9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a30bfa174128ad6cb3bcf568080886729e347fe9"],"073f1aa70444ec64f3e216816af2a3b43fa38fe7":["a30bfa174128ad6cb3bcf568080886729e347fe9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["073f1aa70444ec64f3e216816af2a3b43fa38fe7"]},"commit2Childs":{"a30bfa174128ad6cb3bcf568080886729e347fe9":["7c3523a0ab04c3002eee3896c75ea5f10f388bcc","073f1aa70444ec64f3e216816af2a3b43fa38fe7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a30bfa174128ad6cb3bcf568080886729e347fe9","7c3523a0ab04c3002eee3896c75ea5f10f388bcc"],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":[],"073f1aa70444ec64f3e216816af2a3b43fa38fe7":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c3523a0ab04c3002eee3896c75ea5f10f388bcc","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}